TITLE: Creating a Basic Web Search Agent with Agno and OpenAI
DESCRIPTION: This snippet demonstrates how to create a simple agent using Agno that can search the web. It utilizes the OpenAI chat model and DuckDuckGo search tools.

LANGUAGE: python
CODE:
from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.tools.duckduckgo import DuckDuckGoTools

agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    tools=[DuckDuckGoTools()],
    markdown=True
)
agent.print_response("What's happening in New York?", stream=True)

----------------------------------------

TITLE: Running Reasoning Agent with Tools for Finance
DESCRIPTION: This command executes a Python script demonstrating a reasoning agent equipped with tools, specifically for financial tasks.

LANGUAGE: shell
CODE:
python cookbook/agent_concepts/reasoning/default/finance_agent.py

----------------------------------------

TITLE: Creating an Agno Agent with Knowledge Base
DESCRIPTION: This snippet shows how to create an Agno agent with a knowledge base using a PDF source and vector database for RAG (Retrieval-Augmented Generation).

LANGUAGE: python
CODE:
from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.embedder.openai import OpenAIEmbedder
from agno.tools.duckduckgo import DuckDuckGoTools
from agno.knowledge.pdf_url import PDFUrlKnowledgeBase
from agno.vectordb.lancedb import LanceDb, SearchType

agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    description="You are a Thai cuisine expert!",
    instructions=[
        "Search your knowledge base for Thai recipes.",
        "If the question is better suited for the web, search the web to fill in gaps.",
        "Prefer the information in your knowledge base over the web results."
    ],
    knowledge=PDFUrlKnowledgeBase(
        urls=["https://agno-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf"],
        vector_db=LanceDb(
            uri="tmp/lancedb",
            table_name="recipes",
            search_type=SearchType.hybrid,
            embedder=OpenAIEmbedder(id="text-embedding-3-small"),
        ),
    ),
    tools=[DuckDuckGoTools()],
    show_tool_calls=True,
    markdown=True
)

# Comment out after the knowledge base is loaded
if agent.knowledge is not None:
    agent.knowledge.load()

agent.print_response("How do I make chicken and galangal in coconut milk soup", stream=True)
agent.print_response("What is the history of Thai curry?", stream=True)

----------------------------------------

TITLE: Creating a Multi-Agent Team with Agno
DESCRIPTION: This snippet demonstrates how to create a team of specialized Agno agents for web search and financial data retrieval, coordinated by a main agent.

LANGUAGE: python
CODE:
from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.tools.duckduckgo import DuckDuckGoTools
from agno.tools.yfinance import YFinanceTools

web_agent = Agent(
    name="Web Agent",
    role="Search the web for information",
    model=OpenAIChat(id="gpt-4o"),
    tools=[DuckDuckGoTools()],
    instructions="Always include sources",
    show_tool_calls=True,
    markdown=True,
)

finance_agent = Agent(
    name="Finance Agent",
    role="Get financial data",
    model=OpenAIChat(id="gpt-4o"),
    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True, company_info=True)],
    instructions="Use tables to display data",
    show_tool_calls=True,
    markdown=True,
)

agent_team = Agent(
    team=[web_agent, finance_agent],
    model=OpenAIChat(id="gpt-4o"),
    instructions=["Always include sources", "Use tables to display data"],
    show_tool_calls=True,
    markdown=True,
)

agent_team.print_response("What's the market outlook and financial performance of AI semiconductor companies?", stream=True)

----------------------------------------

TITLE: Installing Agno via pip
DESCRIPTION: Command to install the Agno library using pip package manager.

LANGUAGE: shell
CODE:
pip install -U agno

----------------------------------------

TITLE: Running Claude Agent with Knowledge Capabilities
DESCRIPTION: Executes a Python script to run a Claude agent that utilizes knowledge functionality, requiring an OpenAI API key for embeddings.

LANGUAGE: shell
CODE:
python cookbook/models/anthropic/knowledge.py

----------------------------------------

TITLE: Creating an Agno Agent with Web Search Tools
DESCRIPTION: This snippet demonstrates how to create an Agno agent with web search capabilities using DuckDuckGo tools.

LANGUAGE: python
CODE:
from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.tools.duckduckgo import DuckDuckGoTools

agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    description="You are an enthusiastic news reporter with a flair for storytelling!",
    tools=[DuckDuckGoTools()],
    show_tool_calls=True,
    markdown=True
)
agent.print_response("Tell me about a breaking news story from New York.", stream=True)

----------------------------------------

TITLE: Creating a Basic Agno Agent with OpenAI
DESCRIPTION: This snippet shows how to create a basic Agno agent using the OpenAI chat model, without any additional tools.

LANGUAGE: python
CODE:
from agno.agent import Agent
from agno.models.openai import OpenAIChat

agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    description="You are an enthusiastic news reporter with a flair for storytelling!",
    markdown=True
)
agent.print_response("Tell me about a breaking news story from New York.", stream=True)

----------------------------------------

TITLE: Running Agno Example Scripts
DESCRIPTION: Commands to execute various example scripts demonstrating different Agno capabilities

LANGUAGE: bash
CODE:
python cookbook/getting_started/01_basic_agent.py
python cookbook/getting_started/02_agent_with_tools.py
python cookbook/getting_started/03_agent_with_knowledge.py

----------------------------------------

TITLE: Running Qdrant Docker Container for LLM OS Knowledge Base
DESCRIPTION: Docker command to run a Qdrant container, which serves as a knowledge base for storing external data like websites and uploaded PDF documents in the LLM OS.

LANGUAGE: shell
CODE:
docker run -d -p 6333:6333 qdrant/qdrant

----------------------------------------

TITLE: Running a Multi-Agent Team with Agno
DESCRIPTION: Shell commands to install dependencies for the multi-agent team and run the script.

LANGUAGE: shell
CODE:
pip install duckduckgo-search yfinance

python agent_team.py

----------------------------------------

TITLE: Running an Agno Agent with Knowledge Base
DESCRIPTION: Shell commands to install dependencies for the Agno agent with knowledge base and run the script.

LANGUAGE: shell
CODE:
pip install lancedb tantivy pypdf duckduckgo-search

python agent_with_knowledge.py

----------------------------------------

TITLE: Executing Llama Essay Writer Agent
DESCRIPTION: Python command to run an essay writer agent using the Llama model. This advanced application demonstrates the use of Huggingface tools for specific tasks.

LANGUAGE: shell
CODE:
python cookbook/models/huggingface/llama_essay_writer.py

----------------------------------------

TITLE: Running Advanced Azure OpenAI Agent Examples
DESCRIPTION: Commands to run specialized Azure OpenAI agents with various capabilities including tool usage, structured output, storage, and knowledge integration.

LANGUAGE: shell
CODE:
python cookbook/models/azure/openai/tool_use.py

LANGUAGE: shell
CODE:
python cookbook/models/azure/openai/structured_output.py

LANGUAGE: shell
CODE:
python cookbook/models/azure/openai/storage.py

LANGUAGE: shell
CODE:
python cookbook/models/azure/openai/knowledge.py

----------------------------------------

TITLE: Running Storage and Knowledge-Based Agents
DESCRIPTION: Commands for running PGVector storage container and agents with storage and knowledge capabilities.

LANGUAGE: shell
CODE:
./cookbook/run_pgvector.sh

LANGUAGE: shell
CODE:
python cookbook/models/groq/storage.py

LANGUAGE: shell
CODE:
python cookbook/models/groq/knowledge.py

----------------------------------------

TITLE: Running Mistral Agent with Memory
DESCRIPTION: Executes the Mistral agent with memory capabilities for context retention.

LANGUAGE: shell
CODE:
python cookbook/models/mistral/memory.py

----------------------------------------

TITLE: Running Multimedia OpenAI Agents
DESCRIPTION: Commands for running OpenAI agents that handle image generation, image analysis, and audio processing

LANGUAGE: shell
CODE:
python cookbook/models/openai/generate_images.py

LANGUAGE: shell
CODE:
python cookbook/models/openai/image_agent.py

LANGUAGE: shell
CODE:
python cookbook/models/openai/image_agent_with_memory.py

LANGUAGE: shell
CODE:
python cookbook/models/openai/audio_input_agent.py

LANGUAGE: shell
CODE:
python cookbook/models/openai/audio_output_agent.py

----------------------------------------

TITLE: Running Agentic RAG Example
DESCRIPTION: Execute the agentic RAG implementation using PgVector

LANGUAGE: shell
CODE:
python cookbook/agent_concepts/rag/agentic_rag_pgvector.py

----------------------------------------

TITLE: Running DeepSeek Agent with DuckDuckGo Search Tool
DESCRIPTION: Command to execute a Python script that runs a DeepSeek agent with DuckDuckGo search capabilities.

LANGUAGE: shell
CODE:
python cookbook/models/deepseek/tool_use.py

----------------------------------------

TITLE: Installing Agno Dependencies
DESCRIPTION: Pip command to install all required Python packages for Agno functionality including OpenAI, DuckDuckGo, YFinance, and other essential libraries

LANGUAGE: bash
CODE:
pip install openai duckduckgo-search yfinance lancedb tantivy pypdf requests exa-py newspaper4k lxml_html_clean sqlalchemy agno

----------------------------------------

TITLE: Running Traditional RAG Example
DESCRIPTION: Execute the traditional RAG implementation using PgVector

LANGUAGE: shell
CODE:
python cookbook/agent_concepts/rag/traditional_rag_pgvector.py

----------------------------------------

TITLE: Running Basic Azure OpenAI Agent Examples
DESCRIPTION: Commands to execute basic Azure OpenAI agents with and without streaming functionality.

LANGUAGE: shell
CODE:
python cookbook/models/azure/openai/basic_stream.py

LANGUAGE: shell
CODE:
python cookbook/models/azure/openai/basic.py

----------------------------------------

TITLE: Running WatsonX Agent with Knowledge Base
DESCRIPTION: This snippet demonstrates how to run a WatsonX agent that utilizes a knowledge base.

LANGUAGE: shell
CODE:
python cookbook/models/ibm/watsonx/knowledge.py

----------------------------------------

TITLE: Running Gemini Agents
DESCRIPTION: Various Python commands to execute different types of Gemini agents including basic streaming, tool usage, structured output, storage, knowledge base, and multimedia analysis.

LANGUAGE: shell
CODE:
python cookbook/models/google/gemini/basic_stream.py
python cookbook/models/google/gemini/basic.py
python cookbook/models/google/gemini/tool_use.py
python cookbook/models/google/gemini/structured_output.py
python cookbook/models/google/gemini/storage.py
python cookbook/models/google/gemini/knowledge.py
python cookbook/models/google/gemini/audio_input_bytes_content.py
python cookbook/models/google/gemini/image_agent.py
python cookbook/models/google/gemini/image_agent_file_upload.py
python cookbook/models/google/gemini/video_agent_input_bytes_content.py
python cookbook/models/google/gemini/flash_thinking_agent.py

----------------------------------------

TITLE: Running Advanced OpenAI Agents
DESCRIPTION: Commands for running various specialized OpenAI agents including tool integration, structured output, memory management, and storage

LANGUAGE: shell
CODE:
python cookbook/models/openai/tool_use.py

LANGUAGE: shell
CODE:
python cookbook/models/openai/structured_output.py

LANGUAGE: shell
CODE:
python cookbook/models/openai/memory.py

LANGUAGE: shell
CODE:
python cookbook/models/openai/storage.py

LANGUAGE: shell
CODE:
python cookbook/models/openai/knowledge.py

----------------------------------------

TITLE: Running Basic OpenAI Agents
DESCRIPTION: Commands to run basic OpenAI agents with streaming enabled or disabled

LANGUAGE: shell
CODE:
python cookbook/models/openai/basic_stream.py

LANGUAGE: shell
CODE:
python cookbook/models/openai/basic.py

----------------------------------------

TITLE: Project Dependencies List
DESCRIPTION: A comprehensive list of Python package dependencies including data processing libraries (pandas, duckdb), ML tools (openai), web scraping utilities (bs4, duckduckgo-search), vector databases (qdrant-client, pgvector), and visualization tools (matplotlib, streamlit).

LANGUAGE: txt
CODE:
agno
openai
exa_py
yfinance
duckdb
bs4
duckduckgo-search
nest_asyncio
qdrant-client
pgvector
psycopg[binary]
pypdf
sqlalchemy
streamlit
pandas
matplotlib

----------------------------------------

TITLE: Running Ethical Dilemma Reasoning Agent Example
DESCRIPTION: This command runs a Python script showcasing a reasoning agent tackling an ethical dilemma using DeepSeek.

LANGUAGE: shell
CODE:
python cookbook/agent_concepts/reasoning/deepseek/ethical_dilemma.py

----------------------------------------

TITLE: Running Ollama Agent with Storage Capability
DESCRIPTION: Command to run an Ollama agent that utilizes storage functionality.

LANGUAGE: shell
CODE:
python cookbook/models/ollama_tools/storage.py

----------------------------------------

TITLE: Setting Up and Running a Basic Agno Agent
DESCRIPTION: Shell commands to install dependencies, set the OpenAI API key, and run a basic Agno agent script.

LANGUAGE: shell
CODE:
pip install agno openai

export OPENAI_API_KEY=sk-xxxx

python basic_agent.py

----------------------------------------

TITLE: Running Image Processing Agents
DESCRIPTION: Commands for running various image-processing agents with URL input, byte input, and memory capabilities

LANGUAGE: shell
CODE:
python cookbook/models/together/image_agent.py

LANGUAGE: shell
CODE:
python cookbook/models/together/image_agent_bytes.py

LANGUAGE: shell
CODE:
python cookbook/models/together/image_agent_with_memory.py

----------------------------------------

TITLE: Running Advanced Agent Scripts
DESCRIPTION: Commands to run various specialized agent scripts including tool use, structured output, storage, knowledge base, memory, and image processing

LANGUAGE: shell
CODE:
python cookbook/models/ollama/tool_use.py
python cookbook/models/ollama/structured_output.py
python cookbook/models/ollama/storage.py
python cookbook/models/ollama/knowledge.py
python cookbook/models/ollama/memory.py
python cookbook/models/ollama/image_agent.py
python cookbook/models/ollama/set_client.py

----------------------------------------

TITLE: Launching GeoBuddy Streamlit Application
DESCRIPTION: Command to start the Streamlit web application interface for GeoBuddy.

LANGUAGE: shell
CODE:
streamlit run cookbook/examples/apps/geobuddy/app.py

----------------------------------------

TITLE: Running Tool-Enabled Agents
DESCRIPTION: Commands to run Groq agents with DuckDuckGo search and Exa research capabilities.

LANGUAGE: shell
CODE:
python cookbook/models/groq/tool_use.py

LANGUAGE: shell
CODE:
python cookbook/models/groq/research_agent_exa.py

----------------------------------------

TITLE: Running Model Demo Scripts
DESCRIPTION: Commands to run demonstration scripts for specific Ollama models including deepseek, qwen, and phi4

LANGUAGE: shell
CODE:
python cookbook/models/ollama/demo_deepseek_r1.py
python cookbook/models/ollama/demo_qwen.py
python cookbook/models/ollama/demo_phi4.py

----------------------------------------

TITLE: Running PgVector for Agentic RAG Agent using Helper Script
DESCRIPTION: Command to run PgVector using a provided helper script for the Agentic RAG Agent.

LANGUAGE: shell
CODE:
./cookbook/scripts/run_pgvector.sh

----------------------------------------

TITLE: Running Basic Cohere Agent Commands
DESCRIPTION: Commands to run basic Cohere agents with streaming enabled and disabled

LANGUAGE: shell
CODE:
python cookbook/models/cohere/basic_stream.py

LANGUAGE: shell
CODE:
python cookbook/models/cohere/basic.py

----------------------------------------

TITLE: Running Claude Agent for Image Analysis
DESCRIPTION: Executes a Python script to run a Claude agent that performs image analysis tasks.

LANGUAGE: shell
CODE:
python cookbook/models/anthropic/image_agent.py

----------------------------------------

TITLE: Running Async Agents
DESCRIPTION: Commands to run agents in asynchronous mode with and without streaming.

LANGUAGE: shell
CODE:
python cookbook/models/groq/async/basic_stream.py

LANGUAGE: shell
CODE:
python cookbook/models/groq/async/basic.py

----------------------------------------

TITLE: Running Basic DeepSeek Agent with Streaming
DESCRIPTION: Command to execute a Python script that runs a basic DeepSeek agent with streaming enabled.

LANGUAGE: shell
CODE:
python cookbook/models/deepseek/basic_stream.py

----------------------------------------

TITLE: Running Agent with JSON Output
DESCRIPTION: Command for running an agent that returns structured JSON output based on a response model

LANGUAGE: shell
CODE:
python cookbook/models/deepinfra/json_output.py

----------------------------------------

TITLE: Running Async Agent Scripts
DESCRIPTION: Commands for running asynchronous agent implementations with and without streaming

LANGUAGE: shell
CODE:
python cookbook/models/deepinfra/async_basic_stream.py
python cookbook/models/deepinfra/async_basic.py

----------------------------------------

TITLE: Running Basic LiteLLM Agent
DESCRIPTION: Command to run a basic agent with streaming enabled using Hugging Face models.

LANGUAGE: shell
CODE:
python cookbook/models/litellm/basic_hf.py

----------------------------------------

TITLE: Running Mistral Agent with Structured Output
DESCRIPTION: Executes the Mistral agent that provides structured output responses.

LANGUAGE: shell
CODE:
python cookbook/models/mistral/structured_output.py

----------------------------------------

TITLE: Running Advanced Cohere Agent Features
DESCRIPTION: Commands for running Cohere agents with various advanced features including tools, structured output, storage, knowledge, and memory

LANGUAGE: shell
CODE:
python cookbook/models/cohere/tool_use.py

LANGUAGE: shell
CODE:
python cookbook/models/cohere/structured_output.py

LANGUAGE: shell
CODE:
python cookbook/models/cohere/storage.py

LANGUAGE: shell
CODE:
python cookbook/models/cohere/knowledge.py

LANGUAGE: shell
CODE:
python cookbook/models/cohere/memory.py

----------------------------------------

TITLE: Running Claude Agent with Storage Capabilities
DESCRIPTION: Executes a Python script to run a Claude agent that utilizes storage functionality.

LANGUAGE: shell
CODE:
python cookbook/models/anthropic/storage.py

----------------------------------------

TITLE: Running Basic Agent with Streaming
DESCRIPTION: Command to execute the basic Azure AI agent with streaming enabled.

LANGUAGE: shell
CODE:
python cookbook/models/azure/openai/basic_stream.py

----------------------------------------

TITLE: Running AWS Bedrock Agent with DuckDuckGo Search Tool
DESCRIPTION: Shell command to run a Python script that demonstrates an AWS Bedrock agent using the DuckDuckGo search tool.

LANGUAGE: shell
CODE:
python cookbook/models/aws/bedrock/tool_use.py

----------------------------------------

TITLE: Running Openrouter Agent with Structured Output
DESCRIPTION: This command runs an Openrouter agent that returns structured output using a Python script.

LANGUAGE: shell
CODE:
python cookbook/models/openrouter/structured_output.py

----------------------------------------

TITLE: Exporting API Keys
DESCRIPTION: Commands to export required API keys for OpenAI, Google, and Eleven Labs services as environment variables.

LANGUAGE: shell
CODE:
export OPENAI_API_KEY=***
export GOOGLE_API_KEY=***
export ELEVEN_LABS_API_KEY=***

----------------------------------------

TITLE: Running Streamlit App for Medical Imaging Agent in Shell
DESCRIPTION: Launches the Streamlit application for the Medical Imaging Diagnosis Agent. This command starts the web interface for interacting with the agent.

LANGUAGE: shell
CODE:
streamlit run cookbook/examples/apps/medical_imaging/app.py

----------------------------------------

TITLE: Running Various AI Agents
DESCRIPTION: Commands for running different types of AI agents including Grok, Groq, and Gemini.

LANGUAGE: shell
CODE:
python cookbook/playground/grok_agents.py

LANGUAGE: shell
CODE:
python cookbook/playground/groq_agents.py

LANGUAGE: shell
CODE:
python cookbook/playground/gemini_agents.py

----------------------------------------

TITLE: Running Ollama Agent with Knowledge Integration
DESCRIPTION: Command to run an Ollama agent that incorporates knowledge capabilities.

LANGUAGE: shell
CODE:
python cookbook/models/ollama_tools/knowledge.py

----------------------------------------

TITLE: Loading F1 Dataset
DESCRIPTION: Command to execute the Python script for loading F1 data into the database.

LANGUAGE: shell
CODE:
python cookbook/examples/apps/sql_agent/load_f1_data.py

----------------------------------------

TITLE: Installing Required Libraries
DESCRIPTION: Installing necessary Python packages including OpenAI, LiteLLM, DuckDuckGo search, DuckDB, YFinance, and Agno.

LANGUAGE: shell
CODE:
pip install -U openai 'litellm' duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Running AWS Bedrock Agent with Storage Capabilities
DESCRIPTION: Shell command to execute a Python script demonstrating an AWS Bedrock agent that utilizes storage functionality.

LANGUAGE: shell
CODE:
python cookbook/models/aws/bedrock/storage.py

----------------------------------------

TITLE: Running Basic Openrouter Agent without Streaming
DESCRIPTION: This command runs a basic Openrouter agent without streaming using a Python script.

LANGUAGE: shell
CODE:
python cookbook/models/openrouter/basic.py

----------------------------------------

TITLE: Launching LLM OS Streamlit App
DESCRIPTION: Command to run the LLM OS application using Streamlit, which provides a web interface for interacting with the LLM OS.

LANGUAGE: shell
CODE:
streamlit run cookbook/use_cases/apps/llm_os/app.py

----------------------------------------

TITLE: Running Image Processing Agents
DESCRIPTION: Commands for running xAI agents with various image processing capabilities including URL input, byte input, and memory features

LANGUAGE: shell
CODE:
python cookbook/models/xai/image_agent.py

LANGUAGE: shell
CODE:
python cookbook/models/xai/image_agent_bytes.py

LANGUAGE: shell
CODE:
python cookbook/models/xai/image_agent_with_memory.py

----------------------------------------

TITLE: Running Agent with Storage Capability
DESCRIPTION: Command to run the Azure AI agent with storage functionality.

LANGUAGE: shell
CODE:
python cookbook/models/azure/openai/storage.py

----------------------------------------

TITLE: Running Basic Sambanova Agent without Streaming in Python
DESCRIPTION: This command executes a Python script that runs a basic Sambanova agent without streaming.

LANGUAGE: shell
CODE:
python cookbook/models/sambanova/basic.py

----------------------------------------

TITLE: Running Agent with Knowledge Base
DESCRIPTION: Command to run a Perplexity agent with knowledge base integration

LANGUAGE: shell
CODE:
python cookbook/models/perplexity/knowledge.py

----------------------------------------

TITLE: Running PDF URL Knowledge Base Script
DESCRIPTION: Executes the Python script for the PDF URL Knowledge Base example located in the cookbook directory.

LANGUAGE: shell
CODE:
python cookbook/agent_concepts/knowledge/pdf_url.py

----------------------------------------

TITLE: Configuring API Keys for AI Models
DESCRIPTION: Shell commands to export necessary API keys for various AI models including OpenAI, Anthropic, Google, and Groq.

LANGUAGE: shell
CODE:
# Required for OpenAI models
export OPENAI_API_KEY=***

# Optional - for additional models
export ANTHROPIC_API_KEY=***  # For Claude models
export GOOGLE_API_KEY=***     # For Gemini models
export GROQ_API_KEY=***       # For Groq models

----------------------------------------

TITLE: Running Fireworks Agent with Structured Output
DESCRIPTION: Command to run Fireworks agent that returns structured output.

LANGUAGE: shell
CODE:
python cookbook/models/fireworks/structured_output.py

----------------------------------------

TITLE: Python Package Dependencies List
DESCRIPTION: Comprehensive list of Python package dependencies with pinned versions, generated by UV. Includes both direct project dependencies and their transitive dependencies, with comments indicating the dependency chain.

LANGUAGE: text
CODE:
annotated-types==0.7.0
    # via pydantic
anyio==4.7.0
    # via httpx
certifi==2024.12.14
    # via
    #   httpcore
    #   httpx
click==8.1.8
    # via typer
docstring-parser==0.16
    # via agno (libs/agno/pyproject.toml)
gitdb==4.0.11
    # via gitpython
gitpython==3.1.43
    # via agno (libs/agno/pyproject.toml)
h11==0.14.0
    # via httpcore
httpcore==1.0.7
    # via httpx
httpx==0.28.1
    # via agno (libs/agno/pyproject.toml)
idna==3.10
    # via
    #   anyio
    #   httpx
markdown-it-py==3.0.0
    # via rich
mdurl==0.1.2
    # via markdown-it-py
pydantic==2.10.4
    # via
    #   agno (libs/agno/pyproject.toml)
    #   pydantic-settings
pydantic-core==2.27.2
    # via pydantic
pydantic-settings==2.7.1
    # via agno (libs/agno/pyproject.toml)
pygments==2.18.0
    # via rich
python-dotenv==1.0.1
    # via
    #   agno (libs/agno/pyproject.toml)
    #   pydantic-settings
python-multipart==0.0.20
    # via agno (libs/agno/pyproject.toml)
pyyaml==6.0.2
    # via agno (libs/agno/pyproject.toml)
rich==13.9.4
    # via
    #   agno (libs/agno/pyproject.toml)
    #   typer
shellingham==1.5.4
    # via typer
smmap==5.0.1
    # via gitdb
sniffio==1.3.1
    # via anyio
tomli==2.2.1
    # via agno (libs/agno/pyproject.toml)
typer==0.15.1
    # via agno (libs/agno/pyproject.toml)
typing-extensions==4.12.2
    # via
    #   agno (libs/agno/pyproject.toml)
    #   anyio
    #   pydantic
    #   pydantic-core
    #   typer

----------------------------------------

TITLE: Setting API Keys for AI Models
DESCRIPTION: Environment variable configuration for various AI model API keys including OpenAI, Anthropic, Google, and Groq

LANGUAGE: shell
CODE:
# Required for OpenAI models
export OPENAI_API_KEY=***

# Optional - for additional models
export ANTHROPIC_API_KEY=***  # For Claude models
export GOOGLE_API_KEY=***     # For Gemini models
export GROQ_API_KEY=***       # For Groq models

----------------------------------------

TITLE: Running Logical Puzzle Reasoning Agent Example
DESCRIPTION: This command executes a Python script that demonstrates a reasoning agent solving a logical puzzle using DeepSeek.

LANGUAGE: shell
CODE:
python cookbook/agent_concepts/reasoning/deepseek/logical_puzzle.py

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Installs necessary Python packages including OpenAI, LiteLLM proxy, DuckDuckGo search, DuckDB, YFinance, and Agno.

LANGUAGE: shell
CODE:
pip install -U openai 'litellm[proxy]' duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Setting OpenAI API Key
DESCRIPTION: Exports the OpenAI API key as an environment variable for authentication with OpenAI services

LANGUAGE: shell
CODE:
export OPENAI_API_KEY=sk-***

----------------------------------------

TITLE: Running Basic Agent with Streaming
DESCRIPTION: Command to execute the basic LMStudio agent with streaming enabled.

LANGUAGE: shell
CODE:
python cookbook/models/lmstudio/basic_stream.py

----------------------------------------

TITLE: Running xAI Agent with DuckDuckGo Search Tool
DESCRIPTION: Execute xAI agent with DuckDuckGo search integration

LANGUAGE: shell
CODE:
python cookbook/models/xai/tool_use.py

----------------------------------------

TITLE: Starting LiteLLM Proxy Server
DESCRIPTION: Launches the LiteLLM proxy server using GPT-4 model on localhost port 4000.

LANGUAGE: shell
CODE:
litellm --model gpt-4o --host 127.0.0.1 --port 4000

----------------------------------------

TITLE: Creating and Activating a Python Virtual Environment
DESCRIPTION: Commands to create a Python virtual environment named 'aienv' and activate it for isolating project dependencies.

LANGUAGE: bash
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Launching the Streamlit Application
DESCRIPTION: Command to start the Streamlit web interface for the Tic Tac Toe game

LANGUAGE: shell
CODE:
streamlit run cookbook/examples/apps/tic_tac_toe/app.py

----------------------------------------

TITLE: Running Structured Output Agent
DESCRIPTION: Launches an agent that produces structured output responses

LANGUAGE: shell
CODE:
python cookbook/models/together/structured_output.py

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Installs necessary Python packages including OpenAI, DuckDuckGo Search, DuckDB, YFinance, and agno

LANGUAGE: shell
CODE:
pip install -U openai duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Launching UAgI Application with Streamlit in Bash
DESCRIPTION: Command to start the UAgI application using Streamlit, which provides a user-friendly web interface for interacting with the agent.

LANGUAGE: bash
CODE:
streamlit run cookbook/examples/apps/mcp_agent/app.py

----------------------------------------

TITLE: Running Openrouter Agent with DuckDuckGo Search Tool
DESCRIPTION: This command runs an Openrouter agent that utilizes the DuckDuckGo search tool using a Python script.

LANGUAGE: shell
CODE:
python cookbook/models/openrouter/tool_use.py

----------------------------------------

TITLE: Running Tool-Enabled Agent
DESCRIPTION: Executes an AI agent with DuckDuckGo search capability

LANGUAGE: shell
CODE:
python cookbook/models/together/tool_use.py

----------------------------------------

TITLE: Running MCP Agent Examples
DESCRIPTION: Commands to execute the filesystem and GitHub agent example scripts.

LANGUAGE: bash
CODE:
python filesystem.py
python github.py

----------------------------------------

TITLE: Setting Azure OpenAI Environment Variables
DESCRIPTION: Configures necessary environment variables for Azure OpenAI API access including API key, endpoint, version, and deployment settings.

LANGUAGE: shell
CODE:
export AZURE_OPENAI_API_KEY=***
export AZURE_OPENAI_ENDPOINT="https://<your-resource-name>.openai.azure.com/openai/deployments/<your-deployment-name>"
export AZURE_API_VERSION="2024-10-21"  # Optional
export AZURE_DEPLOYMENT=***  # Optional

----------------------------------------

TITLE: Running Claude Agent with Structured Output
DESCRIPTION: Executes a Python script to run a Claude agent that returns structured output.

LANGUAGE: shell
CODE:
python cookbook/models/anthropic/structured_output.py

----------------------------------------

TITLE: Exporting AWS Credentials as Environment Variables
DESCRIPTION: Shell commands to set AWS credentials (Access Key ID, Secret Access Key, and Region) as environment variables for AWS SDK authentication.

LANGUAGE: shell
CODE:
export AWS_ACCESS_KEY_ID=***
export AWS_SECRET_ACCESS_KEY=***
export AWS_REGION=***

----------------------------------------

TITLE: Setting OpenAI API Key
DESCRIPTION: Command to export the OpenAI API key as an environment variable for authentication

LANGUAGE: bash
CODE:
export OPENAI_API_KEY=your_api_key

----------------------------------------

TITLE: Running Agent with Tools
DESCRIPTION: Commands for running agents with DuckDuckGo search integration, both sync and async versions

LANGUAGE: shell
CODE:
python cookbook/models/deepinfra/tool_use.py
python cookbook/models/deepinfra/async_tool_use.py

----------------------------------------

TITLE: Running Ollama Agent with Structured Output
DESCRIPTION: Command to run an Ollama agent that returns structured output.

LANGUAGE: shell
CODE:
python cookbook/models/ollama_tools/structured_output.py

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install required project dependencies from requirements.txt file

LANGUAGE: bash
CODE:
pip install -r cookbook/examples/apps/answer_engine/requirements.txt

----------------------------------------

TITLE: Exporting API Keys for Agno Project in Shell
DESCRIPTION: These commands set environment variables for OpenAI and Google API keys, which are required for certain Agno functionalities.

LANGUAGE: shell
CODE:
export OPENAI_API_KEY=***
export GOOGLE_API_KEY=***

----------------------------------------

TITLE: Running Image Analysis Agent
DESCRIPTION: Command to run an agent capable of analyzing images.

LANGUAGE: shell
CODE:
python cookbook/models/groq/image_agent.py

----------------------------------------

TITLE: Exporting Openrouter API Key in Shell
DESCRIPTION: This command sets the OPENROUTER_API_KEY environment variable with the user's API key.

LANGUAGE: shell
CODE:
export OPENROUTER_API_KEY=***

----------------------------------------

TITLE: Setting OpenAI API Key
DESCRIPTION: Command to export the OpenAI API key as an environment variable, which is required for the application to function.

LANGUAGE: shell
CODE:
export OPENAI_API_KEY=sk-***

----------------------------------------

TITLE: Running Ollama Agent with DuckDuckGo Search Tool
DESCRIPTION: Command to run an Ollama agent that utilizes the DuckDuckGo search tool.

LANGUAGE: shell
CODE:
python cookbook/models/ollama_tools/tool_use.py

----------------------------------------

TITLE: Executing AWS Bedrock Claude Agent with Storage Capabilities
DESCRIPTION: Command to run a Python script demonstrating a Claude agent that utilizes storage functionality for persistent data management.

LANGUAGE: shell
CODE:
python cookbook/models/aws/claude/storage.py

----------------------------------------

TITLE: Setting DeepInfra API Key
DESCRIPTION: Exports the DeepInfra API key as an environment variable for authentication

LANGUAGE: shell
CODE:
export DEEPINFRA_API_KEY=***

----------------------------------------

TITLE: Setting Anthropic API Key for Claude Integration
DESCRIPTION: Exports the Anthropic API key as an environment variable for authentication with the Anthropic services.

LANGUAGE: shell
CODE:
export ANTHROPIC_API_KEY=xxx

----------------------------------------

TITLE: Running Finance Agent with Reasoning and Tools
DESCRIPTION: This command executes a Python script demonstrating a finance-focused reasoning agent that utilizes additional tools with DeepSeek.

LANGUAGE: shell
CODE:
python cookbook/agent_concepts/reasoning/deepseek/finance_agent.py

----------------------------------------

TITLE: Setting Mistral API Key
DESCRIPTION: Exports the Mistral API key as an environment variable for authentication.

LANGUAGE: shell
CODE:
export MISTRAL_API_KEY=***

----------------------------------------

TITLE: Running Mistral Agent with DuckDuckGo Search Tool
DESCRIPTION: Executes the Mistral agent with DuckDuckGo search capability.

LANGUAGE: shell
CODE:
python cookbook/models/mistral/tool_use.py

----------------------------------------

TITLE: Running Ethical Dilemma Reasoning Agent
DESCRIPTION: This command runs a Python script showcasing a reasoning agent tackling an ethical dilemma.

LANGUAGE: shell
CODE:
python cookbook/agent_concepts/reasoning/default/ethical_dilemma.py

----------------------------------------

TITLE: Installing Required Libraries
DESCRIPTION: Installs the necessary Python packages including qdrant-client, pypdf, openai and agno

LANGUAGE: shell
CODE:
pip install -U qdrant-client pypdf openai agno

----------------------------------------

TITLE: Configuring Google API Key
DESCRIPTION: Exports the Google API key as an environment variable for authentication.

LANGUAGE: shell
CODE:
export GOOGLE_API_KEY=***

----------------------------------------

TITLE: Running Basic Mistral Agent with Streaming
DESCRIPTION: Executes the basic Mistral agent with streaming enabled.

LANGUAGE: shell
CODE:
python cookbook/models/mistral/basic_stream.py

----------------------------------------

TITLE: Installing Required Python Libraries
DESCRIPTION: Command to install necessary Python packages including duckduckgo-search, duckdb, yfinance, and agno libraries.

LANGUAGE: shell
CODE:
pip install -U duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Setting LiteLLM API Key
DESCRIPTION: Exports the API key for LiteLLM which works with various models including OpenAI, HuggingFace, and XAI.

LANGUAGE: shell
CODE:
export LITELLM_API_KEY=***

----------------------------------------

TITLE: Executing AWS Bedrock Claude Agent with DuckDuckGo Search Tool
DESCRIPTION: Command to run a Python script that demonstrates a Claude agent using the DuckDuckGo search tool for enhanced capabilities.

LANGUAGE: shell
CODE:
python cookbook/models/aws/claude/tool_use.py

----------------------------------------

TITLE: Running Agent with DuckDuckGo Search Tool
DESCRIPTION: Command to run LMStudio agent with integrated DuckDuckGo search capability.

LANGUAGE: shell
CODE:
python cookbook/models/lmstudio/tool_use.py

----------------------------------------

TITLE: Navigating to the Workflow Directory
DESCRIPTION: Command to change the current directory to the Content Creator Workflow folder within the cloned repository.

LANGUAGE: bash
CODE:
cd agno/workflows/content-creator-workflow

----------------------------------------

TITLE: Setting Fireworks API Key
DESCRIPTION: Command to export the Fireworks API key as an environment variable for authentication.

LANGUAGE: shell
CODE:
export FIREWORKS_API_KEY=***

----------------------------------------

TITLE: Running LiteLLM Agent with DuckDuckGo Tool
DESCRIPTION: Command to run an agent with DuckDuckGo search capability enabled.

LANGUAGE: shell
CODE:
python cookbook/models/litellm/tool_use.py

----------------------------------------

TITLE: Configuring API Keys
DESCRIPTION: Setting up required environment variables for API keys including OpenAI and Exa.

LANGUAGE: shell
CODE:
export OPENAI_API_KEY=***
# If you need Exa search
export EXA_API_KEY=***
...

----------------------------------------

TITLE: Exporting Huggingface Token as Environment Variable
DESCRIPTION: Command to set the Huggingface token as an environment variable. This token is required for authentication when using Huggingface services.

LANGUAGE: shell
CODE:
export HF_TOKEN=***

----------------------------------------

TITLE: Running Nvidia Agent with DuckDuckGo Tool
DESCRIPTION: Command to execute the Nvidia agent with DuckDuckGo search integration

LANGUAGE: shell
CODE:
python cookbook/models/nvidia/tool_use.py

----------------------------------------

TITLE: Running Basic Openrouter Agent with Streaming
DESCRIPTION: This command runs a basic Openrouter agent with streaming enabled using a Python script.

LANGUAGE: shell
CODE:
python cookbook/models/openrouter/basic_stream.py

----------------------------------------

TITLE: Setting Azure AI Environment Variables
DESCRIPTION: Commands to export required Azure AI credentials and endpoint configuration for API access.

LANGUAGE: shell
CODE:
export AZURE_API_KEY=***
export AZURE_ENDPOINT="https://<your-host-name>.services.ai.azure.com/models"
export AZURE_API_VERSION="2024-05-01-preview"

----------------------------------------

TITLE: Setting Cohere API Key
DESCRIPTION: Exports the Cohere API key as an environment variable for authentication

LANGUAGE: shell
CODE:
export CO_API_KEY=***

----------------------------------------

TITLE: Running Basic WatsonX Agent with Streaming
DESCRIPTION: This snippet provides the command to run a basic WatsonX agent with streaming enabled.

LANGUAGE: shell
CODE:
python cookbook/models/ibm/watsonx/basic_stream.py

----------------------------------------

TITLE: Setting up Python Virtual Environment
DESCRIPTION: Commands to create and activate a Python virtual environment for Agno development

LANGUAGE: bash
CODE:
python3 -m venv .venv
source .venv/bin/activate

----------------------------------------

TITLE: Setting Google API Key Environment Variable
DESCRIPTION: Command to export the Google API key as an environment variable required for the application.

LANGUAGE: shell
CODE:
export GOOGLE_API_KEY=***

----------------------------------------

TITLE: Running Claude Agent with DuckDuckGo Search Tool
DESCRIPTION: Executes a Python script to run a Claude agent that utilizes the DuckDuckGo search tool.

LANGUAGE: shell
CODE:
python cookbook/models/anthropic/tool_use.py

----------------------------------------

TITLE: Running Basic Ollama Agent without Streaming
DESCRIPTION: Command to run a basic Ollama agent with streaming disabled.

LANGUAGE: shell
CODE:
python cookbook/models/ollama_tools/basic.py

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Commands to create and activate a Python virtual environment for isolating the project dependencies.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Exporting Google API Key for Medical Imaging Agent in Shell
DESCRIPTION: Sets the GOOGLE_API_KEY environment variable, which is likely required for certain functionalities of the Medical Imaging Diagnosis Agent.

LANGUAGE: shell
CODE:
export GOOGLE_API_KEY=****

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Instructions for creating and activating a Python virtual environment for isolated package management.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Running Basic Ollama Agent with Streaming
DESCRIPTION: Command to run a basic Ollama agent with streaming enabled.

LANGUAGE: shell
CODE:
python cookbook/models/ollama_tools/basic_stream.py

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Instructions for creating and activating a Python virtual environment for isolated package management.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Configuring Required API Keys
DESCRIPTION: Setting required environment variables for Groq and Exa API keys

LANGUAGE: bash
CODE:
export GROQ_API_KEY=your_groq_key_here
export EXA_API_KEY=your_exa_key_here

----------------------------------------

TITLE: Running AWS Bedrock Claude Agent with Structured Output
DESCRIPTION: Command to execute a Python script showcasing a Claude agent that returns structured output, enhancing data processing capabilities.

LANGUAGE: shell
CODE:
python cookbook/models/aws/claude/structured_output.py

----------------------------------------

TITLE: Running Basic Agent without Streaming
DESCRIPTION: Command to execute the basic Azure AI agent without streaming.

LANGUAGE: shell
CODE:
python cookbook/models/azure/openai/basic.py

----------------------------------------

TITLE: Creating and Activating Virtual Environment in Python
DESCRIPTION: These commands create a new Python virtual environment named 'aienv' and activate it for use.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Setting OpenAI API Key for Agentic Reasoning
DESCRIPTION: This command exports the OpenAI API key as an environment variable for authentication in the reasoning scripts.

LANGUAGE: shell
CODE:
export OPENAI_API_KEY=***

----------------------------------------

TITLE: Running Basic Sambanova Agent with Streaming in Python
DESCRIPTION: This command executes a Python script that runs a basic Sambanova agent with streaming enabled.

LANGUAGE: shell
CODE:
python cookbook/models/sambanova/basic_stream.py

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Sets up an isolated Python virtual environment named 'aienv' and activates it for the project

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Exporting OpenAI API Key
DESCRIPTION: This command sets the OPENAI_API_KEY environment variable, which is required for using OpenAI's services.

LANGUAGE: shell
CODE:
export OPENAI_API_KEY=***

----------------------------------------

TITLE: Executing AWS Bedrock Agent with Knowledge Integration
DESCRIPTION: Shell command to run a Python script that shows an AWS Bedrock agent leveraging integrated knowledge capabilities.

LANGUAGE: shell
CODE:
python cookbook/models/aws/bedrock/knowledge.py

----------------------------------------

TITLE: Running Basic Agent Scripts
DESCRIPTION: Commands to run basic agent scripts with streaming enabled and disabled

LANGUAGE: shell
CODE:
python cookbook/models/ollama/basic_stream.py
python cookbook/models/ollama/basic.py

----------------------------------------

TITLE: Installing Dependencies for Agno MCP Integration
DESCRIPTION: Command to install required Python packages including agno, mcp, and openai libraries using pip.

LANGUAGE: bash
CODE:
pip install agno mcp openai

----------------------------------------

TITLE: Setting Optional API Keys
DESCRIPTION: Commands to export optional API keys (Anthropic and Google) as environment variables for additional functionality testing.

LANGUAGE: shell
CODE:
export ANTHROPIC_API_KEY=***
export GOOGLE_API_KEY=***

----------------------------------------

TITLE: Creating Virtual Environment for LiteLLM
DESCRIPTION: Commands to create and activate a Python virtual environment for isolated package management.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Commands to create and activate a Python virtual environment named 'aienv'.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Installing Required Libraries
DESCRIPTION: Installs necessary Python packages including Google's generative AI library, DuckDuckGo search, YFinance, and Agno.

LANGUAGE: shell
CODE:
pip install -U google-generativeai duckduckgo-search yfinance agno

----------------------------------------

TITLE: Running WatsonX Agent with Storage Capabilities
DESCRIPTION: This snippet provides the command to run a WatsonX agent that uses storage functionality.

LANGUAGE: shell
CODE:
python cookbook/models/ibm/watsonx/storage.py

----------------------------------------

TITLE: Installing Ollama Model
DESCRIPTION: Command to pull and install the llama3.1 8b model using Ollama

LANGUAGE: shell
CODE:
ollama pull llama3.1:8b

----------------------------------------

TITLE: Cloning the Content Creator Agent Workflow Repository
DESCRIPTION: Command to clone the GitHub repository containing the Content Creator Agent Workflow.

LANGUAGE: bash
CODE:
git clone https://github.com/agno-agi/agno.git

----------------------------------------

TITLE: Installing Required Python Libraries
DESCRIPTION: This pip command installs or upgrades the necessary Python libraries for running Openrouter agents, including openai, duckduckgo-search, duckdb, yfinance, and agno.

LANGUAGE: shell
CODE:
pip install -U openai duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Running PgVector using Docker
DESCRIPTION: Docker command to run PgVector database with specified environment variables and volume mounting

LANGUAGE: shell
CODE:
docker run -d \
  -e POSTGRES_DB=ai \
  -e POSTGRES_USER=ai \
  -e POSTGRES_PASSWORD=ai \
  -e PGDATA=/var/lib/postgresql/data/pgdata \
  -v pgvolume:/var/lib/postgresql/data \
  -p 5532:5432 \
  --name pgvector \
  agnohq/pgvector:16

----------------------------------------

TITLE: Installing Required Libraries
DESCRIPTION: pip command to install the necessary Python packages OpenAI and Agno

LANGUAGE: shell
CODE:
pip install -U openai agno

----------------------------------------

TITLE: Running Claude Agent with Memory Capabilities
DESCRIPTION: Executes a Python script to run a Claude agent that utilizes memory functionality.

LANGUAGE: shell
CODE:
python cookbook/models/anthropic/memory.py

----------------------------------------

TITLE: Running PgVector using Helper Script
DESCRIPTION: Execute PgVector database using a provided shell script

LANGUAGE: shell
CODE:
./cookbook/scripts/run_pgvector.sh

----------------------------------------

TITLE: Installing Required Python Libraries
DESCRIPTION: Command to install necessary Python packages including ollama, duckduckgo-search, duckdb, yfinance, and agno

LANGUAGE: shell
CODE:
pip install -U ollama duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Running PgVector with Docker
DESCRIPTION: Docker command to run PgVector database with specific configuration parameters including environment variables and volume mapping.

LANGUAGE: shell
CODE:
docker run -d \
  -e POSTGRES_DB=ai \
  -e POSTGRES_USER=ai \
  -e POSTGRES_PASSWORD=ai \
  -e PGDATA=/var/lib/postgresql/data/pgdata \
  -v pgvolume:/var/lib/postgresql/data \
  -p 5532:5432 \
  --name pgvector \
  agnohq/pgvector:16

----------------------------------------

TITLE: Installing Required Libraries
DESCRIPTION: Installs necessary Python packages including cohere, duckduckgo-search, duckdb, yfinance, and agno

LANGUAGE: shell
CODE:
pip install -U cohere duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Running Agent with Memory Capability
DESCRIPTION: Command to run LMStudio agent with memory functionality.

LANGUAGE: shell
CODE:
python cookbook/models/lmstudio/memory.py

----------------------------------------

TITLE: Running Qdrant Docker Container
DESCRIPTION: Launches a Qdrant vector database container with volume mount for persistence

LANGUAGE: shell
CODE:
docker run -p 6333:6333 -p 6334:6334 -v $(pwd)/qdrant_storage:/qdrant/storage:z qdrant/qdrant

----------------------------------------

TITLE: Installing GeoBuddy Dependencies
DESCRIPTION: Command to install required Python packages from requirements.txt file.

LANGUAGE: shell
CODE:
pip install -r cookbook/examples/apps/geobuddy/requirements.txt

----------------------------------------

TITLE: Running PgVector with Docker using Command
DESCRIPTION: Runs PgVector in a Docker container with specified environment variables, volume mapping, and port forwarding. Alternative to using the helper script.

LANGUAGE: shell
CODE:
docker run -d \
  -e POSTGRES_DB=ai \
  -e POSTGRES_USER=ai \
  -e POSTGRES_PASSWORD=ai \
  -e PGDATA=/var/lib/postgresql/data/pgdata \
  -v pgvolume:/var/lib/postgresql/data \
  -p 5532:5432 \
  --name pgvector \
  agnohq/pgvector:16

----------------------------------------

TITLE: Installing Requirements for Medical Imaging Agent in Shell
DESCRIPTION: Installs the necessary Python packages for the Medical Imaging Diagnosis Agent using pip. The requirements are specified in a requirements.txt file.

LANGUAGE: shell
CODE:
pip install -r cookbook/examples/apps/medical_imaging/requirements.txt

----------------------------------------

TITLE: Running Agent with Knowledge Base
DESCRIPTION: Command to execute LMStudio agent with integrated knowledge base.

LANGUAGE: shell
CODE:
python cookbook/models/lmstudio/knowledge.py

----------------------------------------

TITLE: Running PgVector Docker Container for LLM OS
DESCRIPTION: Docker command to run a PgVector container, which provides long-term memory for the LLM OS. It sets up environment variables, volume mapping, and port forwarding.

LANGUAGE: shell
CODE:
docker run -d \
  -e POSTGRES_DB=ai \
  -e POSTGRES_USER=ai \
  -e POSTGRES_PASSWORD=ai \
  -e PGDATA=/var/lib/postgresql/data/pgdata \
  -v pgvolume:/var/lib/postgresql/data \
  -p 5532:5432 \
  --name pgvector \
  agnohq/pgvector:16

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install required packages from the requirements file

LANGUAGE: shell
CODE:
pip install -r cookbook/examples/apps/tic_tac_toe/requirements.txt

----------------------------------------

TITLE: Running Agent with DuckDuckGo Tool
DESCRIPTION: Executes the agent script with DuckDuckGo search tool integration.

LANGUAGE: shell
CODE:
python cookbook/models/litellm_proxy/tool_use.py

----------------------------------------

TITLE: Running Agent with DuckDuckGo Tool
DESCRIPTION: Executes the agent script with DuckDuckGo search tool integration.

LANGUAGE: shell
CODE:
python cookbook/models/litellm_proxy/tool_use.py

----------------------------------------

TITLE: Verifying Node.js Installation
DESCRIPTION: Commands to verify the installation of Node.js, npm, and npx by checking their versions.

LANGUAGE: bash
CODE:
node --version
npm --version
npx --version

----------------------------------------

TITLE: Running Agent with Storage Capability
DESCRIPTION: Command to run LMStudio agent with data storage functionality.

LANGUAGE: shell
CODE:
python cookbook/models/lmstudio/storage.py

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Sets up and activates a Python virtual environment for isolated package management.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Installing Required Libraries for Agent Knowledge Base
DESCRIPTION: Installs necessary Python libraries including pgvector, psycopg, sqlalchemy, openai, and agno using pip.

LANGUAGE: shell
CODE:
pip install -U pgvector "psycopg[binary]" sqlalchemy openai agno

----------------------------------------

TITLE: Creating and Activating Virtual Environment for AWS Bedrock Claude
DESCRIPTION: Commands to create a Python virtual environment named 'aienv' and activate it for isolated package management.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Installing Additional Libraries for PDF URL Knowledge Base
DESCRIPTION: Installs pypdf and bs4 libraries required for the PDF URL Knowledge Base example.

LANGUAGE: shell
CODE:
pip install -U pypdf bs4

----------------------------------------

TITLE: Running DeepSeek Agent with Structured Output
DESCRIPTION: Command to execute a Python script that runs a DeepSeek agent capable of returning structured output.

LANGUAGE: shell
CODE:
python cookbook/models/deepseek/structured_output.py

----------------------------------------

TITLE: Creating and Activating Virtual Environment for WatsonX in Python
DESCRIPTION: This snippet shows how to create a virtual environment named 'aienv' and activate it for use with WatsonX projects.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Running Agent with Knowledge Integration
DESCRIPTION: Command to execute the Azure AI agent with knowledge base integration.

LANGUAGE: shell
CODE:
python cookbook/models/azure/openai/knowledge.py

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Commands to create and activate a dedicated Python virtual environment for AI development

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Running Agent with Structured Output
DESCRIPTION: Command to execute the Azure AI agent that returns structured output.

LANGUAGE: shell
CODE:
python cookbook/models/azure/openai/structured_output.py

----------------------------------------

TITLE: Running Basic Agent Scripts
DESCRIPTION: Commands to run basic Groq agents with streaming enabled or disabled.

LANGUAGE: shell
CODE:
python cookbook/models/groq/basic_stream.py

LANGUAGE: shell
CODE:
python cookbook/models/groq/basic.py

----------------------------------------

TITLE: Creating Python Virtual Environment for GeoBuddy
DESCRIPTION: Commands to create and activate a Python virtual environment for isolated package management.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/geobuddyenv
source ~/.venvs/geobuddyenv/bin/activate

----------------------------------------

TITLE: Running Agent with DuckDuckGo Search Tool
DESCRIPTION: Command to run the Azure AI agent with DuckDuckGo search capability.

LANGUAGE: shell
CODE:
python cookbook/models/azure/openai/tool_use.py

----------------------------------------

TITLE: Python Virtual Environment Setup
DESCRIPTION: Commands to create and activate a Python virtual environment named 'aienv'

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Running AWS Bedrock Claude Agent with Knowledge Integration
DESCRIPTION: Command to execute a Python script showcasing a Claude agent that leverages knowledge bases or external information sources.

LANGUAGE: shell
CODE:
python cookbook/models/aws/claude/knowledge.py

----------------------------------------

TITLE: Running Basic Agent Scripts
DESCRIPTION: Commands for running basic Together AI agents with and without streaming

LANGUAGE: shell
CODE:
python cookbook/models/together/basic_stream.py

LANGUAGE: shell
CODE:
python cookbook/models/together/basic.py

----------------------------------------

TITLE: Setting Up Virtual Environment for UAgI in Bash
DESCRIPTION: Commands to create and activate a virtual environment for the UAgI project. This ensures a clean, isolated Python environment for the application.

LANGUAGE: bash
CODE:
python3 -m venv .venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate

----------------------------------------

TITLE: Running Basic AWS Bedrock Claude Agents (Streaming and Non-Streaming)
DESCRIPTION: Commands to execute Python scripts for basic Claude agents, with and without streaming functionality.

LANGUAGE: shell
CODE:
python cookbook/models/aws/claude/basic_stream.py

LANGUAGE: shell
CODE:
python cookbook/models/aws/claude/basic.py

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Creates and activates a Python virtual environment named 'aienv' for isolated package management.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Installing Required Libraries for AWS Bedrock Claude
DESCRIPTION: pip command to install the necessary Python libraries: anthropic for Claude integration, duckduckgo-search for web searches, and agno for agent functionality.

LANGUAGE: shell
CODE:
pip install -U anthropic duckduckgo-search agno

----------------------------------------

TITLE: Running Basic Agent without Streaming
DESCRIPTION: Command to execute the basic LMStudio agent without streaming.

LANGUAGE: shell
CODE:
python cookbook/models/lmstudio/basic.py

----------------------------------------

TITLE: Creating Virtual Environment for Podify AI in Shell
DESCRIPTION: These commands create a virtual environment named 'podifyenv' and activate it for the Podify AI project.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/podifyenv
source ~/.venvs/podifyenv/bin/activate

----------------------------------------

TITLE: Installing Required Python Libraries
DESCRIPTION: Pip command to install or upgrade necessary Python libraries including boto3, duckduckgo-search, and agno for AWS Bedrock and agent functionality.

LANGUAGE: shell
CODE:
pip install -U boto3 duckduckgo-search agno

----------------------------------------

TITLE: Setting up Python Virtual Environment
DESCRIPTION: Creates and activates a Python virtual environment for the project

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Running Agent with DuckDuckGo Search Tool
DESCRIPTION: Command to run a Cohere agent with DuckDuckGo search capability

LANGUAGE: shell
CODE:
python cookbook/models/cohere/tool_use.py

----------------------------------------

TITLE: Installing Required Python Libraries
DESCRIPTION: Pip command to install necessary Python libraries including ollama, duckduckgo-search, duckdb, yfinance, and agno.

LANGUAGE: shell
CODE:
pip install -U ollama duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Commands to create and activate a Python virtual environment for isolating the project dependencies.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Running Basic Non-Streaming Agent
DESCRIPTION: Command to run a basic Cohere agent without streaming

LANGUAGE: shell
CODE:
python cookbook/models/cohere/basic.py

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Creates and activates a Python virtual environment for isolating the project dependencies

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Running Basic Agent Scripts
DESCRIPTION: Commands for running basic agent implementations with and without streaming

LANGUAGE: shell
CODE:
python cookbook/models/deepinfra/basic_stream.py
python cookbook/models/deepinfra/basic.py

----------------------------------------

TITLE: Installing Required Libraries
DESCRIPTION: Installs necessary Python packages including Together API, OpenAI, DuckDuckGo search, DuckDB, YFinance and Agno

LANGUAGE: shell
CODE:
pip install -U together openai duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Commands to create and activate a Python virtual environment for RAG implementation

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Running Nvidia Agent with Streaming
DESCRIPTION: Command to execute the Nvidia agent with streaming enabled

LANGUAGE: shell
CODE:
python cookbook/models/nvidia/basic_stream.py

----------------------------------------

TITLE: Configuring Groq API Key
DESCRIPTION: Exports the Groq API key as an environment variable for authentication.

LANGUAGE: shell
CODE:
export GROQ_API_KEY=***

----------------------------------------

TITLE: Running Basic Nvidia Agent
DESCRIPTION: Command to run the basic Nvidia agent without streaming

LANGUAGE: shell
CODE:
python cookbook/models/nvidia/basic.py

----------------------------------------

TITLE: Installing Required Libraries
DESCRIPTION: Installs necessary Python packages including OpenAI, DuckDuckGo Search, and Agno

LANGUAGE: shell
CODE:
pip install -U openai duckduckgo-search agno

----------------------------------------

TITLE: Installing and Running Ollama Model
DESCRIPTION: Instructions for installing Ollama and pulling the llama3.2 model.

LANGUAGE: shell
CODE:
ollama pull llama3.2

----------------------------------------

TITLE: Running PgVector Docker Container
DESCRIPTION: Launches a PostgreSQL container with vector extension support and configured environment variables

LANGUAGE: shell
CODE:
docker run -d \
  -e POSTGRES_DB=ai \
  -e POSTGRES_USER=ai \
  -e POSTGRES_PASSWORD=ai \
  -e PGDATA=/var/lib/postgresql/data/pgdata \
  -v pgvolume:/var/lib/postgresql/data \
  -p 5532:5432 \
  --name pgvector \
  agnohq/pgvector:16

----------------------------------------

TITLE: Exporting DeepSeek API Key
DESCRIPTION: Command to set the DEEPSEEK_API_KEY environment variable, which is required for authentication with the DeepSeek API.

LANGUAGE: shell
CODE:
export DEEPSEEK_API_KEY=***

----------------------------------------

TITLE: Running Clickhouse Docker Container
DESCRIPTION: Launches a Clickhouse database container with configured environment variables and volume mounts

LANGUAGE: shell
CODE:
docker run -d \
  -e CLICKHOUSE_DB=ai \
  -e CLICKHOUSE_USER=ai \
  -e CLICKHOUSE_PASSWORD=ai \
  -e CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1 \
  -v clickhouse_data:/var/lib/clickhouse/ \
  -v clickhouse_log:/var/log/clickhouse-server/ \
  -p 8123:8123 \
  -p 9000:9000 \
  --ulimit nofile=262144:262144 \
  --name clickhouse-server \
  clickhouse/clickhouse-server

----------------------------------------

TITLE: Installing Required Python Libraries
DESCRIPTION: Pip command to install the latest versions of huggingface_hub and agno libraries. These are essential for running Huggingface models and agents.

LANGUAGE: shell
CODE:
pip install -U huggingface_hub agno

----------------------------------------

TITLE: Setting DeepSeek API Key for Agentic Reasoning
DESCRIPTION: This command exports the DeepSeek API key as an environment variable for authentication in the reasoning scripts.

LANGUAGE: shell
CODE:
export OPENAI_API_KEY=***

----------------------------------------

TITLE: Running PgVector for Agentic RAG Agent using Docker
DESCRIPTION: Docker command to run PgVector container with specific configurations for the Agentic RAG Agent.

LANGUAGE: shell
CODE:
docker run -d \
  -e POSTGRES_DB=ai \
  -e POSTGRES_USER=ai \
  -e POSTGRES_PASSWORD=ai \
  -e PGDATA=/var/lib/postgresql/data/pgdata \
  -v pgvolume:/var/lib/postgresql/data \
  -p 5532:5432 \
  --name pgvector \
  agnohq/pgvector:16

----------------------------------------

TITLE: Exporting Sambanova API Key in Shell
DESCRIPTION: This command sets the SAMBANOVA_API_KEY environment variable, which is required for authentication with the Sambanova API.

LANGUAGE: shell
CODE:
export SAMBANOVA_API_KEY=***

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Commands to create and activate a Python virtual environment for isolated package management

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Installing Required Python Libraries
DESCRIPTION: Installs necessary Python packages including OpenAI SDK, DuckDuckGo search, DuckDB, YFinance, and Agno library.

LANGUAGE: shell
CODE:
pip install -U openai duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Setting Together API Key
DESCRIPTION: Exports the Together API key as an environment variable for authentication

LANGUAGE: shell
CODE:
export TOGETHER_API_KEY=***

----------------------------------------

TITLE: Creating and Activating Virtual Environment for Sambanova in Python
DESCRIPTION: These commands create a Python virtual environment named 'aienv' and activate it for use with Sambanova.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Setting Nvidia API Key
DESCRIPTION: Export command to set the Nvidia API key as an environment variable

LANGUAGE: shell
CODE:
export NVIDIA_API_KEY=***

----------------------------------------

TITLE: Creating Virtual Environment for Python
DESCRIPTION: Commands to create and activate a Python virtual environment named 'aienv'

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Configuring AWS Session with Profile in Python
DESCRIPTION: Python code snippet demonstrating how to create an AWS session using a named profile and initialize an Agent with AWS Bedrock model.

LANGUAGE: python
CODE:
import boto3
session = boto3.Session(profile_name='MY-PROFILE')
agent = Agent(
    model=AwsBedrock(id="mistral.mistral-small-2402-v1:0", session=session),
    markdown=True
)

----------------------------------------

TITLE: Setting LiteLLM API Key
DESCRIPTION: Export the API key for LiteLLM, which works with OpenAI, Hugging Face, or XAI models.

LANGUAGE: shell
CODE:
export LITELLM_API_KEY=***

----------------------------------------

TITLE: Setting up Python Virtual Environment
DESCRIPTION: Creates and activates a Python virtual environment named 'aienv'

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Configuring OpenAI API Key
DESCRIPTION: Exports the OpenAI API key as an environment variable

LANGUAGE: shell
CODE:
export OPENAI_API_KEY=***

----------------------------------------

TITLE: Running Basic WatsonX Agent without Streaming
DESCRIPTION: This snippet shows how to run a basic WatsonX agent without streaming.

LANGUAGE: shell
CODE:
python cookbook/models/ibm/watsonx/basic.py

----------------------------------------

TITLE: Setting API Environment Variables
DESCRIPTION: Exports required API keys for OpenAI and Exa services as environment variables.

LANGUAGE: shell
CODE:
export OPENAI_API_KEY=sk-***
export EXA_API_KEY=***

----------------------------------------

TITLE: Setting up Python Virtual Environment
DESCRIPTION: Creates and activates a Python virtual environment for isolated package management.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Authenticating with Agno
DESCRIPTION: Command for authenticating with the agno.app service.

LANGUAGE: shell
CODE:
ag auth

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Sets up and activates a Python virtual environment for isolated dependencies

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Running Basic Streaming Agent
DESCRIPTION: Command to run a basic Cohere agent with streaming enabled

LANGUAGE: shell
CODE:
python cookbook/models/cohere/basic_stream.py

----------------------------------------

TITLE: Running Multimodal Agents
DESCRIPTION: Command to test multimodal agents using the provided script.

LANGUAGE: shell
CODE:
python cookbook/playground/multimodal_agents.py

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Sets up and activates a Python virtual environment for isolating the project dependencies

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Setting Up Ollama Agents
DESCRIPTION: Commands for pulling the llama3.1:8b model and connecting Ollama agents to the UI.

LANGUAGE: shell
CODE:
ollama pull llama3.1:8b

LANGUAGE: shell
CODE:
python cookbook/playground/ollama_agents.py

----------------------------------------

TITLE: Creating and Activating Virtual Environment for Claude Integration
DESCRIPTION: Sets up a Python virtual environment named 'aienv' and activates it for isolating the project dependencies.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Running an Agno Cookbook Example in Shell
DESCRIPTION: This command executes a Python script from the cookbook directory, demonstrating how to run specific examples or recipes.

LANGUAGE: shell
CODE:
python cookbook/.../example.py

----------------------------------------

TITLE: Running Agentic RAG Application with Streamlit
DESCRIPTION: Command to run the Agentic RAG application using Streamlit.

LANGUAGE: shell
CODE:
streamlit run cookbook/examples/apps/agentic_rag/app.py

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Commands to create and activate a Python virtual environment for the project

LANGUAGE: shell
CODE:
python3 -m venv .venv
source .venv/bin/activate

----------------------------------------

TITLE: Launching Streamlit Application
DESCRIPTION: Command to start the Streamlit application server

LANGUAGE: bash
CODE:
streamlit run cookbook/examples/apps/answer_engine/app.py

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Commands to create and activate a Python virtual environment for isolated package management.

LANGUAGE: shell
CODE:
python3 -m venv .venv
source .venv/bin/activate

----------------------------------------

TITLE: Running Agent Demo
DESCRIPTION: Command to connect agents to the Agent UI using the demo script.

LANGUAGE: shell
CODE:
python cookbook/playground/demo.py

----------------------------------------

TITLE: Launching Streamlit Application
DESCRIPTION: Starts the Streamlit web application for the game generator interface

LANGUAGE: shell
CODE:
streamlit run cookbook/examples/apps/game_generator/app.py

----------------------------------------

TITLE: Creating and Activating Python Virtual Environment
DESCRIPTION: These commands create a new Python virtual environment named 'aienv' and activate it for use.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Launching Streamlit Application
DESCRIPTION: Starts the Paperpal Streamlit web application interface.

LANGUAGE: shell
CODE:
streamlit run cookbook/use_cases/apps/paperpal/app.py

----------------------------------------

TITLE: Creating and Activating Virtual Environment in Python
DESCRIPTION: These commands create a new Python virtual environment and activate it for isolated dependency management.

LANGUAGE: shell
CODE:
python3 -m venv .venv
source .venv/bin/activate

----------------------------------------

TITLE: Launching SQL Agent
DESCRIPTION: Command to start the Streamlit application for the SQL Agent interface.

LANGUAGE: shell
CODE:
streamlit run cookbook/examples/apps/sql_agent/app.py

----------------------------------------

TITLE: Launching the Chess Game Application
DESCRIPTION: Command to start the Streamlit web application for the chess game interface.

LANGUAGE: shell
CODE:
streamlit run cookbook/examples/apps/chess_team/app.py

----------------------------------------

TITLE: Creating Virtual Environment for Agent Knowledge Base
DESCRIPTION: Creates a Python virtual environment named 'aienv' and activates it for isolated package management.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Starting Streamlit Application
DESCRIPTION: Command to launch the Streamlit application for the GitHub MCP agent.

LANGUAGE: bash
CODE:
streamlit run cookbook/examples/apps/github_mcp_agent/app.py

----------------------------------------

TITLE: Creating and Activating Virtual Environment for Agno in Shell
DESCRIPTION: These commands create a Python virtual environment named '.venv' and activate it for isolating the project dependencies.

LANGUAGE: shell
CODE:
python3 -m venv .venv
source .venv/bin/activate

----------------------------------------

TITLE: Setting API Keys
DESCRIPTION: Commands to export required and optional API keys for various AI models.

LANGUAGE: shell
CODE:
export OPENAI_API_KEY=***
export ANTHROPIC_API_KEY=***
export GOOGLE_API_KEY=***
export GROQ_API_KEY=***

----------------------------------------

TITLE: Installing Required Libraries for Sambanova in Python
DESCRIPTION: This pip command installs or updates the OpenAI and Agno libraries, which are necessary for running Sambanova agents.

LANGUAGE: shell
CODE:
pip install -U openai agno

----------------------------------------

TITLE: Creating Virtual Environment with Python
DESCRIPTION: Commands to create and activate a Python virtual environment using the standard python venv module.

LANGUAGE: shell
CODE:
python3 -m venv .venv
source .venv/bin/activate

----------------------------------------

TITLE: Installing Required Libraries for Claude Integration
DESCRIPTION: Installs the necessary Python libraries including anthropic, duckduckgo-search, duckdb, yfinance, and agno using pip.

LANGUAGE: shell
CODE:
pip install -U anthropic duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Installing UV Package Manager for Python
DESCRIPTION: Command to install the UV package manager using pip if not already installed.

LANGUAGE: bash
CODE:
pip install uv

----------------------------------------

TITLE: Loading Knowledge Base
DESCRIPTION: Command to load table metadata, rules and sample queries into the knowledge base.

LANGUAGE: shell
CODE:
python cookbook/examples/apps/sql_agent/load_knowledge.py

----------------------------------------

TITLE: Installing Required Libraries
DESCRIPTION: Install necessary Python packages including OpenAI, DuckDuckGo Search, DuckDB, YFinance, and Agno

LANGUAGE: shell
CODE:
pip install -U openai duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Installing Paperpal Dependencies
DESCRIPTION: Installs required Python packages for Paperpal from the requirements.txt file.

LANGUAGE: shell
CODE:
pip install -r cookbook/use_cases/apps/paperpal/requirements.txt

----------------------------------------

TITLE: Installing Required Python Libraries
DESCRIPTION: Command to install necessary Python packages including OpenAI, DuckDuckGo search, DuckDB, YFinance, and Agno.

LANGUAGE: shell
CODE:
pip install -U openai duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Installs required Python packages from the requirements.txt file located in the game generator project directory

LANGUAGE: shell
CODE:
pip install -r cookbook/examples/apps/game_generator/requirements.txt

----------------------------------------

TITLE: Running Podify AI Streamlit App
DESCRIPTION: This command starts the Streamlit application for Podify AI, allowing users to interact with the podcast generation interface.

LANGUAGE: shell
CODE:
streamlit run cookbook/examples/apps/podcast_generator/app.py

----------------------------------------

TITLE: Installing Required Libraries
DESCRIPTION: Command to install necessary Python packages including OpenAI, DuckDuckGo Search, DuckDB, YFinance, and Agno.

LANGUAGE: shell
CODE:
pip install -U openai duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Installing Project Requirements
DESCRIPTION: Command to install the required packages for the Parallel World Builder application using pip and a requirements file.

LANGUAGE: shell
CODE:
pip install -r cookbook/examples/apps/parallel_world_builder/requirements.txt

----------------------------------------

TITLE: Installing Required Libraries with pip
DESCRIPTION: Command to install necessary Python libraries including OpenAI, LiteLLM with proxy support, and various other dependencies.

LANGUAGE: shell
CODE:
pip install -U openai 'litellm[proxy]' duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Installing Dependencies with Pip
DESCRIPTION: Command to install Agno and OpenAI packages using standard pip package manager.

LANGUAGE: shell
CODE:
pip install -U agno openai

----------------------------------------

TITLE: Running PgVector with Helper Script
DESCRIPTION: Command to launch PgVector database using a provided shell script.

LANGUAGE: shell
CODE:
./cookbook/scripts/run_pgvector.sh

----------------------------------------

TITLE: Installing Required Python Dependencies
DESCRIPTION: Command to install the necessary Python packages listed in the requirements.txt file for the Content Creator Agent Workflow.

LANGUAGE: bash
CODE:
pip install -r requirements.txt

----------------------------------------

TITLE: Running WatsonX Agent with DuckDuckGo Search Tool
DESCRIPTION: This snippet demonstrates how to run a WatsonX agent that utilizes the DuckDuckGo search tool.

LANGUAGE: shell
CODE:
python cookbook/models/ibm/watsonx/tool_use.py

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Command to install necessary Python packages from requirements file.

LANGUAGE: shell
CODE:
pip install -r cookbook/examples/apps/sql_agent/requirements.txt

----------------------------------------

TITLE: Running Fireworks Agent with DuckDuckGo Search Tool
DESCRIPTION: Command to run Fireworks agent with DuckDuckGo search capability.

LANGUAGE: shell
CODE:
python cookbook/models/fireworks/tool_use.py

----------------------------------------

TITLE: Configuring API Keys for Agentic RAG Agent
DESCRIPTION: Bash commands to set environment variables for various API keys used by the Agentic RAG Agent, including OpenAI, Anthropic, Google, and Groq.

LANGUAGE: bash
CODE:
export OPENAI_API_KEY=your_openai_key_here

# Optional (for additional models):
export ANTHROPIC_API_KEY=your_anthropic_key_here
export GOOGLE_API_KEY=your_google_key_here
export GROQ_API_KEY=your_groq_key_here

----------------------------------------

TITLE: Installing Dependencies for UAgI in Bash
DESCRIPTION: Command to install the required dependencies for the UAgI project using pip and the provided requirements file.

LANGUAGE: bash
CODE:
pip install -r cookbook/examples/apps/mcp_agent/requirements.txt

----------------------------------------

TITLE: Running Basic Claude Agent without Streaming
DESCRIPTION: Executes a Python script to run a basic Claude agent without streaming.

LANGUAGE: shell
CODE:
python cookbook/models/anthropic/basic.py

----------------------------------------

TITLE: Installing Dependencies for LLM OS Project
DESCRIPTION: Command to install the required libraries for the LLM OS project using pip and the requirements.txt file.

LANGUAGE: shell
CODE:
pip install -r cookbook/use_cases/apps/llm_os/requirements.txt

----------------------------------------

TITLE: Installing Required Libraries
DESCRIPTION: Command to install necessary Python packages including duckduckgo-search, duckdb, and agno

LANGUAGE: shell
CODE:
pip install -U duckduckgo-search duckdb agno

----------------------------------------

TITLE: Setting OpenAI API Key for Podify AI
DESCRIPTION: This command exports the OpenAI API key as an environment variable, which is required for the Podify AI application to function.

LANGUAGE: shell
CODE:
export OPENAI_API_KEY=***

----------------------------------------

TITLE: Listing Python Package Dependencies for agno Project
DESCRIPTION: This snippet lists the required Python packages and their versions for the 'agno' project. It includes AWS-related packages like boto3 and botocore, as well as utility packages like jmespath and python-dateutil. Each package is listed with its version and the packages that depend on it.

LANGUAGE: plaintext
CODE:
# This file was autogenerated by uv via the following command:
#    ./scripts/generate_requirements.sh
boto3==1.35.93
    # via agno-aws (libs/infra/agno_aws/pyproject.toml)
botocore==1.35.93
    # via
    #   boto3
    #   s3transfer
jmespath==1.0.1
    # via
    #   boto3
    #   botocore
python-dateutil==2.9.0.post0
    # via botocore
s3transfer==0.10.4
    # via boto3
six==1.17.0
    # via python-dateutil
urllib3==2.3.0
    # via botocore

----------------------------------------

TITLE: Installing Required Libraries for IBM WatsonX and Agno
DESCRIPTION: This snippet shows the command to install the necessary Python libraries for working with IBM WatsonX, DuckDuckGo search, and Agno.

LANGUAGE: shell
CODE:
pip install -U ibm-watsonx-ai duckduckgo-search agno

----------------------------------------

TITLE: Defining Python Package Dependencies for agno Project
DESCRIPTION: This snippet defines the required Python packages and their specific versions for the agno project. It includes packages for HTTP requests, Docker integration, and character encoding handling.

LANGUAGE: Text
CODE:
certifi==2024.12.14
    # via requests
charset-normalizer==3.4.1
    # via requests
docker==7.1.0
    # via agno-docker (libs/agno_docker/pyproject.toml)
idna==3.10
    # via requests
requests==2.32.3
    # via docker
urllib3==2.3.0
    # via
    #   docker
    #   requests

----------------------------------------

TITLE: Installing Required Libraries
DESCRIPTION: Installs necessary Python packages including Mistral AI, DuckDuckGo search, DuckDB, YFinance, and Agno.

LANGUAGE: shell
CODE:
pip install -U mistralai duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Setting OpenAI API Key
DESCRIPTION: Command to set the OpenAI API key as an environment variable for authentication.

LANGUAGE: bash
CODE:
export OPENAI_API_KEY=your-openai-api-key

----------------------------------------

TITLE: Python Requirements List
DESCRIPTION: A requirements.txt file listing all Python package dependencies generated by uv. Each package is listed with its exact version and includes comments indicating which other packages depend on it.

LANGUAGE: plaintext
CODE:
# This file was autogenerated by uv via the following command:\n#    ./generate_requirements.sh\nagno==0.1.2\n    # via -r cookbook/examples/apps/sql/requirements.in\naltair==5.5.0\n    # via streamlit\nannotated-types==0.7.0\n    # via pydantic\nanyio==4.8.0\n    # via\n    #   httpx\n    #   openai\nattrs==25.1.0\n    # via\n    #   jsonschema\n    #   referencing\nblinker==1.9.0\n    # via streamlit\ncachetools==5.5.1\n    # via streamlit\ncertifi==2024.12.14\n    # via\n    #   httpcore\n    #   httpx\n    #   requests\ncharset-normalizer==3.4.1\n    # via requests\nclick==8.1.8\n    # via\n    #   streamlit\n    #   typer\ndistro==1.9.0\n    # via openai\ndocstring-parser==0.16\n    # via agno\ngitdb==4.0.12\n    # via gitpython\ngitpython==3.1.44\n    # via\n    #   agno\n    #   streamlit\nh11==0.14.0\n    # via httpcore\nhttpcore==1.0.7\n    # via httpx\nhttpx==0.28.1\n    # via\n    #   agno\n    #   openai\nidna==3.10\n    # via\n    #   anyio\n    #   httpx\n    #   requests\njinja2==3.1.5\n    # via\n    #   altair\n    #   pydeck\njiter==0.8.2\n    # via openai\njsonschema==4.23.0\n    # via altair\njsonschema-specifications==2024.10.1\n    # via jsonschema\nmarkdown-it-py==3.0.0\n    # via rich\nmarkupsafe==3.0.2\n    # via jinja2\nmdurl==0.1.2\n    # via markdown-it-py\nnarwhals==1.24.0\n    # via altair\nnest-asyncio==1.6.0\n    # via -r cookbook/examples/apps/sql/requirements.in\nnumpy==2.2.2\n    # via\n    #   pandas\n    #   pgvector\n    #   pydeck\n    #   streamlit\nopenai==1.60.1\n    # via -r cookbook/examples/apps/sql/requirements.in\npackaging==24.2\n    # via\n    #   altair\n    #   streamlit\npandas==2.2.3\n    # via\n    #   -r cookbook/examples/apps/sql/requirements.in\n    #   streamlit\npgvector==0.3.6\n    # via -r cookbook/examples/apps/sql/requirements.in\npillow==11.1.0\n    # via streamlit\nprotobuf==5.29.3\n    # via streamlit\npsycopg==3.2.4\n    # via -r cookbook/examples/apps/sql/requirements.in\npsycopg-binary==3.2.4\n    # via psycopg\npyarrow==19.0.0\n    # via streamlit\npydantic==2.10.6\n    # via\n    #   agno\n    #   openai\n    #   pydantic-settings\npydantic-core==2.27.2\n    # via pydantic\npydantic-settings==2.7.1\n    # via agno\npydeck==0.9.1\n    # via streamlit\npygments==2.19.1\n    # via rich\npython-dateutil==2.9.0.post0\n    # via pandas\npython-dotenv==1.0.1\n    # via\n    #   agno\n    #   pydantic-settings\npython-multipart==0.0.20\n    # via agno\npytz==2024.2\n    # via pandas\npyyaml==6.0.2\n    # via agno\nreferencing==0.36.2\n    # via\n    #   jsonschema\n    #   jsonschema-specifications\nrequests==2.32.3\n    # via streamlit\nrich==13.9.4\n    # via\n    #   agno\n    #   streamlit\n    #   typer\nrpds-py==0.22.3\n    # via\n    #   jsonschema\n    #   referencing\nshellingham==1.5.4\n    # via typer\nsimplejson==3.19.3\n    # via -r cookbook/examples/apps/sql/requirements.in\nsix==1.17.0\n    # via python-dateutil\nsmmap==5.0.2\n    # via gitdb\nsniffio==1.3.1\n    # via\n    #   anyio\n    #   openai\nsqlalchemy==2.0.37\n    # via -r cookbook/examples/apps/sql/requirements.in\nstreamlit==1.41.1\n    # via -r cookbook/examples/apps/sql/requirements.in\ntenacity==9.0.0\n    # via streamlit\ntoml==0.10.2\n    # via streamlit\ntomli==2.2.1\n    # via agno\ntornado==6.4.2\n    # via streamlit\ntqdm==4.67.1\n    # via openai\ntyper==0.15.1\n    # via agno\ntyping-extensions==4.12.2\n    # via\n    #   agno\n    #   altair\n    #   anyio\n    #   openai\n    #   psycopg\n    #   pydantic\n    #   pydantic-core\n    #   referencing\n    #   sqlalchemy\n    #   streamlit\n    #   typer\ntzdata==2025.1\n    # via pandas\nurllib3==2.3.0\n    # via requests

----------------------------------------

TITLE: Installing Required Libraries
DESCRIPTION: Installs necessary Python packages including Groq, DuckDuckGo Search, DuckDB, YFinance, and Agno.

LANGUAGE: shell
CODE:
pip install -U groq duckduckgo-search duckdb yfinance agno

----------------------------------------

TITLE: Python Package Dependencies List
DESCRIPTION: Comprehensive list of Python package dependencies with exact version numbers and dependency relationships. Generated via uv using generate_requirements.sh script.

LANGUAGE: pip
CODE:
agno==1.1.9
altair==5.5.0
annotated-types==0.7.0
anyio==4.8.0
asyncio==3.4.3
attrs==25.1.0
blinker==1.9.0
cachetools==5.5.2
certifi==2025.1.31
charset-normalizer==3.4.1
click==8.1.8
distro==1.9.0
docstring-parser==0.16
gitdb==4.0.12
gitpython==3.1.44
h11==0.14.0
httpcore==1.0.7
httpx==0.28.1
httpx-sse==0.4.0
idna==3.10
jinja2==3.1.6
jiter==0.8.2
jsonschema==4.23.0
jsonschema-specifications==2024.10.1
markdown-it-py==3.0.0
markupsafe==3.0.2
mcp==1.3.0
mdurl==0.1.2
narwhals==1.29.1
numpy==2.2.3
openai==1.65.4
packaging==24.2
pandas==2.2.3
pillow==11.1.0
protobuf==5.29.3
pyarrow==19.0.1
pydantic==2.10.6
pydantic-core==2.27.2
pydantic-settings==2.8.1
pydeck==0.9.1
pygments==2.19.1
python-dateutil==2.9.0.post0
python-dotenv==1.0.1
python-multipart==0.0.20
pytz==2025.1
pyyaml==6.0.2
referencing==0.36.2
requests==2.32.3
rich==13.9.4
rpds-py==0.23.1
shellingham==1.5.4
six==1.17.0
smmap==5.0.2
sniffio==1.3.1
sse-starlette==2.2.1
starlette==0.46.0
streamlit==1.43.0
tenacity==9.0.0
toml==0.10.2
tomli==2.2.1
tornado==6.4.2
tqdm==4.67.1
typer==0.15.2
typing-extensions==4.12.2
tzdata==2025.1
urllib3==2.3.0
uvicorn==0.34.0

----------------------------------------

TITLE: Running Basic Huggingface Agent with Streaming
DESCRIPTION: Python command to execute a basic Huggingface agent with streaming enabled. This script is located in the cookbook/models/huggingface directory.

LANGUAGE: shell
CODE:
python cookbook/models/huggingface/basic_stream.py

----------------------------------------

TITLE: Configuring Optional API Keys
DESCRIPTION: Setting optional environment variables for additional model providers like OpenAI, Anthropic and Google

LANGUAGE: bash
CODE:
export OPENAI_API_KEY=your_openai_key_here
export ANTHROPIC_API_KEY=your_anthropic_key_here
export GOOGLE_API_KEY=your_google_key_here

----------------------------------------

TITLE: Listing Project Dependencies
DESCRIPTION: A list of required packages and dependencies needed for the project, including AI, web, and scientific packages.

LANGUAGE: plaintext
CODE:
agno
openai
streamlit
exa_py
arxiv

----------------------------------------

TITLE: Activating Virtual Environment on Windows
DESCRIPTION: Command to activate the virtual environment on Windows systems.

LANGUAGE: batch
CODE:
.venv\Scripts\activate

----------------------------------------

TITLE: Running the Content Creator Agent Workflow
DESCRIPTION: Command to execute the main script that initiates the content creation process in the workflow.

LANGUAGE: bash
CODE:
python workflow.py

----------------------------------------

TITLE: Listing Python Package Dependencies for agno Project
DESCRIPTION: This snippet shows the complete list of Python package dependencies for the agno project, including version numbers and the packages that require each dependency. It's typically used for reproducing the project's environment.

LANGUAGE: plaintext
CODE:
# This file was autogenerated by uv via the following command:
#    ./generate_requirements.sh
agno==1.1.11
    # via -r cookbook/examples/apps/answer_engine/requirements.in
altair==5.5.0
    # via streamlit
annotated-types==0.7.0
    # via pydantic
anthropic==0.49.0
    # via -r cookbook/examples/apps/answer_engine/requirements.in
anyio==4.8.0
    # via
    #   anthropic
    #   groq
    #   httpx
    #   openai
attrs==25.3.0
    # via
    #   jsonschema
    #   referencing
blinker==1.9.0
    # via streamlit
cachetools==5.5.2
    # via
    #   google-auth
    #   streamlit
certifi==2025.1.31
    # via
    #   httpcore
    #   httpx
    #   requests
charset-normalizer==3.4.1
    # via requests
click==8.1.8
    # via
    #   duckduckgo-search
    #   streamlit
    #   typer
distro==1.9.0
    # via
    #   anthropic
    #   groq
    #   openai
docstring-parser==0.16
    # via agno
duckduckgo-search==7.5.2
    # via -r cookbook/examples/apps/answer_engine/requirements.in
exa-py==1.9.0
    # via -r cookbook/examples/apps/answer_engine/requirements.in
gitdb==4.0.12
    # via gitpython
gitpython==3.1.44
    # via
    #   agno
    #   streamlit
google-ai-generativelanguage==0.6.15
    # via google-generativeai
google-api-core==2.24.2
    # via
    #   google-ai-generativelanguage
    #   google-api-python-client
    #   google-generativeai
google-api-python-client==2.164.0
    # via google-generativeai
google-auth==2.38.0
    # via
    #   google-ai-generativelanguage
    #   google-api-core
    #   google-api-python-client
    #   google-auth-httplib2
    #   google-generativeai
google-auth-httplib2==0.2.0
    # via google-api-python-client
google-generativeai==0.8.4
    # via -r cookbook/examples/apps/answer_engine/requirements.in
google-search-results==2.4.2
    # via -r cookbook/examples/apps/answer_engine/requirements.in
googleapis-common-protos==1.69.1
    # via
    #   google-api-core
    #   grpcio-status
groq==0.19.0
    # via -r cookbook/examples/apps/answer_engine/requirements.in
grpcio==1.71.0
    # via
    #   google-api-core
    #   grpcio-status
grpcio-status==1.71.0
    # via google-api-core
h11==0.14.0
    # via httpcore
httpcore==1.0.7
    # via httpx
httplib2==0.22.0
    # via
    #   google-api-python-client
    #   google-auth-httplib2
httpx==0.28.1
    # via
    #   agno
    #   anthropic
    #   groq
    #   openai
idna==3.10
    # via
    #   anyio
    #   httpx
    #   requests
jinja2==3.1.6
    # via
    #   altair
    #   pydeck
jiter==0.9.0
    # via
    #   anthropic
    #   openai
jsonschema==4.23.0
    # via altair
jsonschema-specifications==2024.10.1
    # via jsonschema
lxml==5.3.1
    # via duckduckgo-search
markdown-it-py==3.0.0
    # via rich
markupsafe==3.0.2
    # via jinja2
mdurl==0.1.2
    # via markdown-it-py
narwhals==1.30.0
    # via altair
nest-asyncio==1.6.0
    # via -r cookbook/examples/apps/answer_engine/requirements.in
numpy==2.2.3
    # via
    #   pandas
    #   pydeck
    #   streamlit
openai==1.66.3
    # via
    #   -r cookbook/examples/apps/answer_engine/requirements.in
    #   exa-py
packaging==24.2
    # via
    #   altair
    #   streamlit
pandas==2.2.3
    # via streamlit
pillow==11.1.0
    # via streamlit
primp==0.14.0
    # via duckduckgo-search
proto-plus==1.26.1
    # via
    #   google-ai-generativelanguage
    #   google-api-core
protobuf==5.29.3
    # via
    #   google-ai-generativelanguage
    #   google-api-core
    #   google-generativeai
    #   googleapis-common-protos
    #   grpcio-status
    #   proto-plus
    #   streamlit
pyarrow==19.0.1
    # via streamlit
pyasn1==0.6.1
    # via
    #   pyasn1-modules
    #   rsa
pyasn1-modules==0.4.1
    # via google-auth
pydantic==2.10.6
    # via
    #   agno
    #   anthropic
    #   google-generativeai
    #   groq
    #   openai
    #   pydantic-settings
pydantic-core==2.27.2
    # via pydantic
pydantic-settings==2.8.1
    # via agno
pydeck==0.9.1
    # via streamlit
pygments==2.19.1
    # via rich
pyparsing==3.2.1
    # via httplib2
python-dateutil==2.9.0.post0
    # via pandas
python-dotenv==1.0.1
    # via
    #   agno
    #   pydantic-settings
python-multipart==0.0.20
    # via agno
pytz==2025.1
    # via pandas
pyyaml==6.0.2
    # via agno
referencing==0.36.2
    # via
    #   jsonschema
    #   jsonschema-specifications
requests==2.32.3
    # via
    #   exa-py
    #   google-api-core
    #   google-search-results
    #   streamlit
rich==13.9.4
    # via
    #   agno
    #   typer
rpds-py==0.23.1
    # via
    #   jsonschema
    #   referencing
rsa==4.9
    # via google-auth
shellingham==1.5.4
    # via typer
six==1.17.0
    # via python-dateutil
smmap==5.0.2
    # via gitdb
sniffio==1.3.1
    # via
    #   anthropic
    #   anyio
    #   groq
    #   openai
sqlalchemy==2.0.39
    # via -r cookbook/examples/apps/answer_engine/requirements.in
streamlit==1.43.2
    # via -r cookbook/examples/apps/answer_engine/requirements.in
tenacity==9.0.0
    # via streamlit
toml==0.10.2
    # via streamlit
tomli==2.2.1
    # via agno
tornado==6.4.2
    # via streamlit
tqdm==4.67.1
    # via
    #   google-generativeai
    #   openai
typer==0.15.2
    # via agno
typing-extensions==4.12.2
    # via
    #   agno
    #   altair
    #   anthropic
    #   anyio
    #   exa-py
    #   google-generativeai
    #   groq
    #   openai
    #   pydantic
    #   pydantic-core
    #   referencing
    #   sqlalchemy
    #   streamlit
    #   typer
tzdata==2025.1
    # via pandas
uritemplate==4.1.1
    # via google-api-python-client
urllib3==2.3.0
    # via requests

----------------------------------------

TITLE: Exporting EXA API Key for Research in LLM OS
DESCRIPTION: Command to export the EXA API Key as an environment variable for use in the LLM OS project's research functionality.

LANGUAGE: shell
CODE:
export EXA_API_KEY=xxx

----------------------------------------

TITLE: Exporting AWS Credentials for IBM WatsonX
DESCRIPTION: This snippet demonstrates how to export the necessary AWS credentials for using IBM WatsonX, including the API key, project ID, and optional URL.

LANGUAGE: shell
CODE:
export IBM_WATSONX_API_KEY=***
export IBM_WATSONX_PROJECT_ID=***
export IBM_WATSONX_URL=*** (optional, defaults to https://eu-de.ml.cloud.ibm.com)

----------------------------------------

TITLE: Python Dependencies List
DESCRIPTION: A pip requirements.txt file containing package dependencies with pinned versions and their dependency chains. The file was autogenerated and includes both direct project dependencies and their transitive requirements.

LANGUAGE: pip
CODE:
# This file was autogenerated by uv via the following command:\n#    ./generate_requirements.sh\nagno==1.1.0\n    # via -r requirements.in\naltair==5.5.0\n    # via streamlit\nannotated-types==0.7.0\n    # via pydantic\nanyio==4.8.0\n    # via\n    #   httpx\n    #   openai\nattrs==25.1.0\n    # via\n    #   jsonschema\n    #   referencing\nblinker==1.9.0\n    # via streamlit\ncachetools==5.5.1\n    # via streamlit\ncertifi==2025.1.31\n    # via\n    #   httpcore\n    #   httpx\n    #   requests\ncharset-normalizer==3.4.1\n    # via requests\nclick==8.1.8\n    # via\n    #   duckduckgo-search\n    #   streamlit\n    #   typer\ndistro==1.9.0\n    # via openai\ndocstring-parser==0.16\n    # via agno\nduckduckgo-search==7.3.2\n    # via -r requirements.in\ngitdb==4.0.12\n    # via gitpython\ngitpython==3.1.44\n    # via\n    #   agno\n    #   streamlit\nh11==0.14.0\n    # via httpcore\nhttpcore==1.0.7\n    # via httpx\nhttpx==0.28.1\n    # via\n    #   agno\n    #   openai\nidna==3.10\n    # via\n    #   anyio\n    #   httpx\n    #   requests\njinja2==3.1.5\n    # via\n    #   altair\n    #   pydeck\njiter==0.8.2\n    # via openai\njsonschema==4.23.0\n    # via altair\njsonschema-specifications==2024.10.1\n    # via jsonschema\nlxml==5.3.1\n    # via duckduckgo-search\nmarkdown-it-py==3.0.0\n    # via rich\nmarkupsafe==3.0.2\n    # via jinja2\nmdurl==0.1.2\n    # via markdown-it-py\nnarwhals==1.26.0\n    # via altair\nnumpy==2.2.2\n    # via\n    #   pandas\n    #   pydeck\n    #   streamlit\nopenai==1.62.0\n    # via -r requirements.in\npackaging==24.2\n    # via\n    #   altair\n    #   streamlit\npandas==2.2.3\n    # via streamlit\npillow==11.1.0\n    # via streamlit\nprimp==0.12.1\n    # via duckduckgo-search\nprotobuf==5.29.3\n    # via streamlit\npyarrow==19.0.0\n    # via streamlit\npydantic==2.10.6\n    # via\n    #   agno\n    #   openai\n    #   pydantic-settings\npydantic-core==2.27.2\n    # via pydantic\npydantic-settings==2.7.1\n    # via agno\npydeck==0.9.1\n    # via streamlit\npygments==2.19.1\n    # via rich\npython-dateutil==2.9.0.post0\n    # via pandas\npython-dotenv==1.0.1\n    # via\n    #   agno\n    #   pydantic-settings\npython-multipart==0.0.20\n    # via agno\npytz==2025.1\n    # via pandas\npyyaml==6.0.2\n    # via agno\nreferencing==0.36.2\n    # via\n    #   jsonschema\n    #   jsonschema-specifications\nrequests==2.32.3\n    # via streamlit\nrich==13.9.4\n    # via\n    #   agno\n    #   streamlit\n    #   typer\nrpds-py==0.22.3\n    # via\n    #   jsonschema\n    #   referencing\nshellingham==1.5.4\n    # via typer\nsix==1.17.0\n    # via python-dateutil\nsmmap==5.0.2\n    # via gitdb\nsniffio==1.3.1\n    # via\n    #   anyio\n    #   openai\nstreamlit==1.42.0\n    # via -r requirements.in\ntenacity==9.0.0\n    # via streamlit\ntoml==0.10.2\n    # via streamlit\ntomli==2.2.1\n    # via agno\ntornado==6.4.2\n    # via streamlit\ntqdm==4.67.1\n    # via openai\ntyper==0.15.1\n    # via agno\ntyping-extensions==4.12.2\n    # via\n    #   agno\n    #   altair\n    #   anyio\n    #   openai\n    #   pydantic\n    #   pydantic-core\n    #   referencing\n    #   streamlit\n    #   typer\ntzdata==2025.1\n    # via pandas\nurllib3==2.3.0\n    # via requests

----------------------------------------

TITLE: Running Specific Test Files with Pytest
DESCRIPTION: Example command to run specific test files or test cases using pytest.

LANGUAGE: bash
CODE:
pytest ./libs/agno/tests/unit/utils/test_string.py

----------------------------------------

TITLE: Installing Dependencies for Agentic RAG Agent
DESCRIPTION: Command to install the required dependencies for the Agentic RAG Agent from a requirements file.

LANGUAGE: shell
CODE:
pip install -r cookbook/examples/apps/agentic_rag/requirements.txt

----------------------------------------

TITLE: Setting up Python Virtual Environment
DESCRIPTION: Commands for creating and activating a Python virtual environment for the project

LANGUAGE: bash
CODE:
python3 -m venv .venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate

----------------------------------------

TITLE: Creating Virtual Environment for Agentic RAG Agent in Python
DESCRIPTION: Commands to create and activate a Python virtual environment for the Agentic RAG Agent project.

LANGUAGE: shell
CODE:
python3 -m venv .venv
source .venv/bin/activate

----------------------------------------

TITLE: Listing Python Package Dependencies
DESCRIPTION: This snippet shows the full list of required Python packages and their versions for the agno project. It includes direct dependencies and their transitive dependencies, with comments indicating the source of each requirement.

LANGUAGE: plaintext
CODE:
# This file was autogenerated by uv via the following command:
#    ./generate_requirements.sh
agno==1.1.9
    # via -r cookbook/examples/apps/mcp_agent/requirements.in
altair==5.5.0
    # via streamlit
annotated-types==0.7.0
    # via pydantic
anthropic==0.49.0
    # via -r cookbook/examples/apps/mcp_agent/requirements.in
anyio==4.8.0
    # via
    #   anthropic
    #   google-genai
    #   groq
    #   httpx
    #   mcp
    #   openai
    #   sse-starlette
    #   starlette
attrs==25.1.0
    # via
    #   jsonschema
    #   referencing
blinker==1.9.0
    # via streamlit
cachetools==5.5.2
    # via
    #   google-auth
    #   streamlit
certifi==2025.1.31
    # via
    #   httpcore
    #   httpx
    #   requests
charset-normalizer==3.4.1
    # via requests
click==8.1.8
    # via
    #   streamlit
    #   typer
    #   uvicorn
deprecation==2.1.0
    # via lancedb
distro==1.9.0
    # via
    #   anthropic
    #   groq
    #   openai
docstring-parser==0.16
    # via agno
gitdb==4.0.12
    # via gitpython
gitpython==3.1.44
    # via
    #   agno
    #   streamlit
google-auth==2.38.0
    # via google-genai
google-genai==1.5.0
    # via -r cookbook/examples/apps/mcp_agent/requirements.in
groq==0.18.0
    # via -r cookbook/examples/apps/mcp_agent/requirements.in
h11==0.14.0
    # via
    #   httpcore
    #   uvicorn
httpcore==1.0.7
    # via httpx
httpx==0.28.1
    # via
    #   agno
    #   anthropic
    #   google-genai
    #   groq
    #   mcp
    #   openai
httpx-sse==0.4.0
    # via mcp
idna==3.10
    # via
    #   anyio
    #   httpx
    #   requests
jinja2==3.1.6
    # via
    #   altair
    #   pydeck
jiter==0.8.2
    # via
    #   anthropic
    #   openai
jsonschema==4.23.0
    # via altair
jsonschema-specifications==2024.10.1
    # via jsonschema
lancedb==0.20.0
    # via -r cookbook/examples/apps/mcp_agent/requirements.in
markdown-it-py==3.0.0
    # via rich
markupsafe==3.0.2
    # via jinja2
mcp==1.3.0
    # via -r cookbook/examples/apps/mcp_agent/requirements.in
mdurl==0.1.2
    # via markdown-it-py
narwhals==1.29.1
    # via altair
nest-asyncio==1.6.0
    # via -r cookbook/examples/apps/mcp_agent/requirements.in
numpy==2.2.3
    # via
    #   pandas
    #   pydeck
    #   pylance
    #   streamlit
openai==1.65.5
    # via -r cookbook/examples/apps/mcp_agent/requirements.in
overrides==7.7.0
    # via lancedb
packaging==24.2
    # via
    #   altair
    #   deprecation
    #   lancedb
    #   streamlit
pandas==2.2.3
    # via streamlit
pillow==11.1.0
    # via streamlit
protobuf==5.29.3
    # via streamlit
pyarrow==19.0.1
    # via
    #   pylance
    #   streamlit
pyasn1==0.6.1
    # via
    #   pyasn1-modules
    #   rsa
pyasn1-modules==0.4.1
    # via google-auth
pydantic==2.10.6
    # via
    #   agno
    #   anthropic
    #   google-genai
    #   groq
    #   lancedb
    #   mcp
    #   openai
    #   pydantic-settings
pydantic-core==2.27.2
    # via pydantic
pydantic-settings==2.8.1
    # via
    #   agno
    #   mcp
pydeck==0.9.1
    # via streamlit
pygments==2.19.1
    # via rich
pylance==0.23.2
    # via lancedb
python-dateutil==2.9.0.post0
    # via pandas
python-dotenv==1.0.1
    # via
    #   agno
    #   pydantic-settings
python-multipart==0.0.20
    # via agno
pytz==2025.1
    # via pandas
pyyaml==6.0.2
    # via agno
referencing==0.36.2
    # via
    #   jsonschema
    #   jsonschema-specifications
requests==2.32.3
    # via
    #   google-genai
    #   streamlit
rich==13.9.4
    # via
    #   agno
    #   typer
rpds-py==0.23.1
    # via
    #   jsonschema
    #   referencing
rsa==4.9
    # via google-auth
shellingham==1.5.4
    # via typer
six==1.17.0
    # via python-dateutil
smmap==5.0.2
    # via gitdb
sniffio==1.3.1
    # via
    #   anthropic
    #   anyio
    #   groq
    #   openai
sqlalchemy==2.0.38
    # via -r cookbook/examples/apps/mcp_agent/requirements.in
sse-starlette==2.2.1
    # via mcp
starlette==0.46.1
    # via
    #   mcp
    #   sse-starlette
streamlit==1.43.1
    # via -r cookbook/examples/apps/mcp_agent/requirements.in
tantivy==0.22.0
    # via -r cookbook/examples/apps/mcp_agent/requirements.in
tenacity==9.0.0
    # via streamlit
toml==0.10.2
    # via streamlit
tomli==2.2.1
    # via agno
tornado==6.4.2
    # via streamlit
tqdm==4.67.1
    # via
    #   lancedb
    #   openai
typer==0.15.2
    # via agno
typing-extensions==4.12.2
    # via
    #   agno
    #   altair
    #   anthropic
    #   anyio
    #   google-genai
    #   groq
    #   openai
    #   pydantic
    #   pydantic-core
    #   referencing
    #   sqlalchemy
    #   streamlit
    #   typer
tzdata==2025.1
    # via pandas
urllib3==2.3.0
    # via requests
uvicorn==0.34.0
    # via mcp
websockets==14.2
    # via google-genai

----------------------------------------

TITLE: Dependency List - Core Requirements
DESCRIPTION: Lists the core package dependencies required for the project including agno for agnotic programming, OpenAI for AI capabilities, and Streamlit for web interface.

LANGUAGE: plaintext
CODE:
agno
openai
streamlit

----------------------------------------

TITLE: Python Package Dependencies
DESCRIPTION: List of required Python packages including Google's GenerativeAI, OpenAI, Streamlit for UI, Pillow for image processing, and DuckDuckGo search integration.

LANGUAGE: plaintext
CODE:
agno
google-generativeai
openai
streamlit
pillow
duckduckgo-search

----------------------------------------

TITLE: Installing Dependencies with UV
DESCRIPTION: Command to install Agno and OpenAI packages using UV package manager.

LANGUAGE: shell
CODE:
uv pip install -U agno openai

----------------------------------------

TITLE: Creating Virtual Environment with UV
DESCRIPTION: Commands to create and activate a Python virtual environment using the UV package manager.

LANGUAGE: shell
CODE:
uv venv --python 3.12
source .venv/bin/activate

----------------------------------------

TITLE: Running Non-Functional Reasoning Agent Example
DESCRIPTION: This command runs a Python script demonstrating a non-functional reasoning agent using DeepSeek.

LANGUAGE: shell
CODE:
python cookbook/agent_concepts/reasoning/deepseek/strawberry.py

----------------------------------------

TITLE: Running Logical Puzzle Reasoning Agent
DESCRIPTION: This command executes a Python script that demonstrates a reasoning agent solving a logical puzzle.

LANGUAGE: shell
CODE:
python cookbook/agent_concepts/reasoning/default/logical_puzzle.py

----------------------------------------

TITLE: Running Non-Functional Reasoning Agent Example
DESCRIPTION: This command runs a Python script that demonstrates a reasoning agent that doesn't work as expected, likely for educational or debugging purposes.

LANGUAGE: shell
CODE:
python cookbook/agent_concepts/reasoning/default/strawberry.py

----------------------------------------

TITLE: Installing Required Python Libraries
DESCRIPTION: This command installs or updates the OpenAI and Agno libraries using pip.

LANGUAGE: shell
CODE:
pip install -U openai agno

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Installation of necessary Python packages including OpenAI, SQLAlchemy, PgVector, LanceDB, and other dependencies for RAG implementation

LANGUAGE: shell
CODE:
pip install -U openai sqlalchemy "psycopg[binary]" pgvector lancedb tantivy pypdf sqlalchemy "fastapi[standard]" agno

----------------------------------------

TITLE: Setting Singlestore Environment Variables
DESCRIPTION: Configures environment variables for Singlestore database connection and OpenAI API key

LANGUAGE: shell
CODE:
export SINGLESTORE_HOST="localhost"
export SINGLESTORE_PORT="3306"
export SINGLESTORE_USERNAME="root"
export SINGLESTORE_PASSWORD="admin"
export SINGLESTORE_DATABASE="your_database_name"
export SINGLESTORE_SSL_CA=".certs/singlestore_bundle.pem"

export OPENAI_API_KEY="sk-..."

----------------------------------------

TITLE: Running PgVector with Docker using Helper Script
DESCRIPTION: Executes a helper script to run PgVector in a Docker container. Requires Docker Desktop to be installed.

LANGUAGE: shell
CODE:
./cookbook/run_pgvector.sh

----------------------------------------

TITLE: Setting Environment Variables for API Keys
DESCRIPTION: Commands to set environment variables for OpenAI, Firecrawl, and Typefully API keys, which are required for authentication in the workflow.

LANGUAGE: bash
CODE:
export OPENAI_API_KEY="your_openai_api_key_here"
export FIRECRAWL_API_KEY="your_firecrawl_api_key_here"
export TYPEFULLY_API_KEY="your_typefully_api_key_here"

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Installing necessary Python packages including OpenAI, Exa, DuckDuckGo, YFinance, and other required libraries.

LANGUAGE: shell
CODE:
pip install -U openai exa_py duckduckgo-search yfinance pypdf sqlalchemy 'fastapi[standard]' youtube-transcript-api agno

----------------------------------------

TITLE: Creating Virtual Environment for Agno
DESCRIPTION: Instructions for creating and activating a Python virtual environment for the project.

LANGUAGE: shell
CODE:
python3 -m venv .venv
source .venv/bin/activate

----------------------------------------

TITLE: Running Basic xAI Agents
DESCRIPTION: Commands to run basic xAI agents with streaming enabled or disabled

LANGUAGE: shell
CODE:
python cookbook/models/xai/basic_stream.py

LANGUAGE: shell
CODE:
python cookbook/models/xai/basic.py

----------------------------------------

TITLE: Setting XAI API Key
DESCRIPTION: Export the XAI API key as an environment variable for authentication

LANGUAGE: shell
CODE:
export XAI_API_KEY=***

----------------------------------------

TITLE: Setting Perplexity API Key
DESCRIPTION: Command to export the Perplexity API key as an environment variable

LANGUAGE: shell
CODE:
export PERPLEXITY_API_KEY=***

----------------------------------------

TITLE: Creating and Activating Python Virtual Environment
DESCRIPTION: Commands to create a Python virtual environment named 'aienv' and activate it.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Creates and activates a Python virtual environment for isolated package management.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Creating and Activating Virtual Environment for Python
DESCRIPTION: Commands to create a new Python virtual environment named 'aienv' and activate it. This isolates the project dependencies from the system-wide Python installation.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Setting up Python Virtual Environment
DESCRIPTION: Creates and activates a Python virtual environment for isolating project dependencies.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Creating and Activating Virtual Environment for DeepSeek
DESCRIPTION: Commands to create a Python virtual environment named 'aienv' and activate it for DeepSeek usage.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Creating and Activating Python Virtual Environment
DESCRIPTION: Commands to create a new Python virtual environment named 'aienv' and activate it for isolated package management.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/aienv
source ~/.venvs/aienv/bin/activate

----------------------------------------

TITLE: Activating Virtual Environment on Unix Systems
DESCRIPTION: Command to activate the virtual environment on Unix-based systems.

LANGUAGE: bash
CODE:
source .venv/bin/activate

----------------------------------------

TITLE: Running Agent with Structured Output
DESCRIPTION: Command to execute LMStudio agent that returns structured data format.

LANGUAGE: shell
CODE:
python cookbook/models/lmstudio/structured_output.py

----------------------------------------

TITLE: Running WatsonX Agent for Image Processing
DESCRIPTION: This snippet shows the command to run a WatsonX agent capable of processing images.

LANGUAGE: shell
CODE:
python cookbook/models/ibm/watsonx/image_agent.py

----------------------------------------

TITLE: Running WatsonX Agent with Structured Output
DESCRIPTION: This snippet shows the command to run a WatsonX agent that returns structured output.

LANGUAGE: shell
CODE:
python cookbook/models/ibm/watsonx/structured_output.py

----------------------------------------

TITLE: Running Basic DeepSeek Agent without Streaming
DESCRIPTION: Command to execute a Python script that runs a basic DeepSeek agent without streaming.

LANGUAGE: shell
CODE:
python cookbook/models/deepseek/basic.py

----------------------------------------

TITLE: Configuring AWS Session with Profile for Claude Integration
DESCRIPTION: Python code to create an AWS session using a specific profile and initialize a Claude agent with the session.

LANGUAGE: python
CODE:
import boto3
session = boto3.Session(profile_name='MY-PROFILE')
agent = Agent(
    model=Claude(id="anthropic.claude-3-5-sonnet-20240620-v1:0", session=session),
    markdown=True
)

----------------------------------------

TITLE: Exporting AWS Credentials for Bedrock Claude Access
DESCRIPTION: Shell commands to export AWS credentials as environment variables for authentication with AWS services.

LANGUAGE: shell
CODE:
export AWS_ACCESS_KEY_ID=***
export AWS_SECRET_ACCESS_KEY=***
export AWS_REGION=***

----------------------------------------

TITLE: Running Integration Tests with pytest
DESCRIPTION: Commands to run integration tests for the LiteLLM OpenAI integration, including basic tests and tool use tests.

LANGUAGE: shell
CODE:
pytest libs/agno/tests/integration/models/litellm_openai/test_basic.py -v
pytest libs/agno/tests/integration/models/litellm_openai/test_tool_use.py -v

----------------------------------------

TITLE: Starting LiteLLM Proxy Server
DESCRIPTION: Command to start the LiteLLM proxy server using the GPT-4 model, specifying host and port.

LANGUAGE: shell
CODE:
litellm --model gpt-4o --host 127.0.0.1 --port 4000

----------------------------------------

TITLE: Installing Ollama Vision Model
DESCRIPTION: Command to pull and install the llama3.2 vision model for image interpretation

LANGUAGE: shell
CODE:
ollama pull llama3.2-vision

----------------------------------------

TITLE: Running Streamlit Application
DESCRIPTION: Command to start the Streamlit application for the Parallel World Builder, specifying the path to the app.py file.

LANGUAGE: shell
CODE:
streamlit run cookbook/examples/apps/parallel_world_builder/app.py

----------------------------------------

TITLE: Creating Python Virtual Environment
DESCRIPTION: Commands to create and activate a Python virtual environment for isolating project dependencies.

LANGUAGE: shell
CODE:
python3 -m venv .venv
source .venv/bin/activate

----------------------------------------

TITLE: Configuring API Keys for UAgI in Bash
DESCRIPTION: Commands to set environment variables for various API keys required by UAgI, including OpenAI, Anthropic, Google, Groq, and GitHub.

LANGUAGE: bash
CODE:
export OPENAI_API_KEY=your_openai_key_here

# Optional (for additional models):
export ANTHROPIC_API_KEY=your_anthropic_key_here
export GOOGLE_API_KEY=your_google_key_here
export GROQ_API_KEY=your_groq_key_here

# For GitHub MCP server:
export GITHUB_TOKEN=your_github_token_here

----------------------------------------

TITLE: Creating Virtual Environment for LLM OS in Python
DESCRIPTION: Commands to create and activate a virtual environment for the LLM OS project using Python's venv module.

LANGUAGE: shell
CODE:
python3 -m venv ~/.venvs/llmos
source ~/.venvs/llmos/bin/activate

----------------------------------------

TITLE: Installing Python Dependencies
DESCRIPTION: Command to install required Python packages for the GitHub MCP agent application using pip package manager.

LANGUAGE: bash
CODE:
pip install -r cookbook/examples/apps/github_mcp_agent/requirements.txt

----------------------------------------

TITLE: Installing Python Dependencies
DESCRIPTION: Command to install required Python packages for the GitHub MCP agent application using pip package manager.

LANGUAGE: bash
CODE:
pip install -r cookbook/examples/apps/github_mcp_agent/requirements.txt

----------------------------------------

TITLE: Initializing Virtual Environment for Chess Game
DESCRIPTION: Commands to create and activate a Python virtual environment for the chess game project.

LANGUAGE: shell
CODE:
python3 -m venv .venv
source .venv/bin/activate

----------------------------------------

TITLE: Installing Required Libraries for Agno Project using Pip
DESCRIPTION: This command installs or updates the OpenAI and Agno libraries, along with any other necessary packages for the project.

LANGUAGE: shell
CODE:
pip install -U openai agno  # And all other packages you might need