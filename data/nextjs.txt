TITLE: Manual Installation of Next.js Dependencies
DESCRIPTION: Manually install the required packages for a Next.js application using npm. This includes next, react, and react-dom.

LANGUAGE: bash
CODE:
npm install next@latest react@latest react-dom@latest

----------------------------------------

TITLE: Cached GET Request Handler with External API
DESCRIPTION: Example of a cached Route Handler fetching data from MongoDB API with force-static configuration.

LANGUAGE: typescript
CODE:
export const dynamic = 'force-static'

export async function GET() {
  const res = await fetch('https://data.mongodb-api.com/...', {
    headers: {
      'Content-Type': 'application/json',
      'API-Key': process.env.DATA_API_KEY,
    },
  })
  const data = await res.json()

  return Response.json({ data })
}

----------------------------------------

TITLE: Using Local Images with Next.js Image Component
DESCRIPTION: Shows how to use local images with the Next.js Image component. It imports the image file and automatically provides width, height, and blurDataURL properties.

LANGUAGE: tsx
CODE:
import Image from 'next/image'
import profilePic from './me.png'

export default function Page() {
  return (
    <Image
      src={profilePic}
      alt="Picture of the author"
      // width={500} automatically provided
      // height={500} automatically provided
      // blurDataURL="data:..." automatically provided
      // placeholder="blur" // Optional blur-up while loading
    />
  )
}

LANGUAGE: jsx
CODE:
import Image from 'next/image'
import profilePic from './me.png'

export default function Page() {
  return (
    <Image
      src={profilePic}
      alt="Picture of the author"
      // width={500} automatically provided
      // height={500} automatically provided
      // blurDataURL="data:..." automatically provided
      // placeholder="blur" // Optional blur-up while loading
    />
  )
}

----------------------------------------

TITLE: Fetching Blog Posts with getStaticProps in Next.js
DESCRIPTION: This example demonstrates how to fetch a list of blog posts from a CMS using getStaticProps. It shows both TypeScript and JavaScript versions of the code, illustrating how to pass the fetched data as props to the page component.

LANGUAGE: typescript
CODE:
// posts will be populated at build time by getStaticProps()
export default function Blog({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li>{post.title}</li>
      ))}
    </ul>
  )
}

// This function gets called at build time on server-side.
// It won't be called on client-side, so you can even do
// direct database queries.
export async function getStaticProps() {
  // Call an external API endpoint to get posts.
  // You can use any data fetching library
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      posts,
    },
  }
}

LANGUAGE: javascript
CODE:
// posts will be populated at build time by getStaticProps()
export default function Blog({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li>{post.title}</li>
      ))}
    </ul>
  )
}

// This function gets called at build time on server-side.
// It won't be called on client-side, so you can even do
// direct database queries.
export async function getStaticProps() {
  // Call an external API endpoint to get posts.
  // You can use any data fetching library
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      posts,
    },
  }
}

----------------------------------------

TITLE: Form Validation with Server Actions
DESCRIPTION: Example of implementing server-side form validation using zod with Server Actions.

LANGUAGE: typescript
CODE:
'use server'

import { z } from 'zod'

const schema = z.object({
  email: z.string({
    invalid_type_error: 'Invalid Email',
  }),
})

export default async function createUser(formData: FormData) {
  const validatedFields = schema.safeParse({
    email: formData.get('email'),
  })

  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // Mutate data
}

----------------------------------------

TITLE: Implementing a Client-Side Counter Component in Next.js
DESCRIPTION: This snippet demonstrates how to create a Client Component in Next.js using the 'use client' directive. It implements a simple counter with state management and event handling, showcasing the interactivity possible with Client Components.

LANGUAGE: typescript
CODE:
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>Click me</button>
    </div>
  )
}

LANGUAGE: javascript
CODE:
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>Click me</button>
    </div>
  )
}

----------------------------------------

TITLE: Server-Side Data Fetching with ORM or Database in Next.js
DESCRIPTION: Shows how to fetch data on the server using an ORM or database. The component queries a database for blog posts and renders them in an unordered list. The response is not cached by default.

LANGUAGE: tsx
CODE:
import { db, posts } from '@/lib/db'

export default async function Page() {
  const allPosts = await db.select().from(posts)
  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}

----------------------------------------

TITLE: Implementing a Root Layout in Next.js
DESCRIPTION: This snippet shows how to create a required root layout for a Next.js application. The root layout applies to all routes and must contain html and body tags. It's used to modify the initial HTML returned from the server.

LANGUAGE: typescript
CODE:
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        {/* Layout UI */}
        <main>{children}</main>
      </body>
    </html>
  )
}

LANGUAGE: javascript
CODE:
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        {/* Layout UI */}
        <main>{children}</main>
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Configuring Static Export in Next.js Configuration
DESCRIPTION: This snippet shows how to enable static export mode in the Next.js configuration file. It demonstrates setting the output mode to 'export' and includes optional configuration for trailing slashes and output directory.

LANGUAGE: javascript
CODE:
/**
 * @type {import('next').NextConfig}
 */
const nextConfig = {
  output: 'export',

  // Optional: Change links `/me` -> `/me/` and emit `/me.html` -> `/me/index.html`
  // trailingSlash: true,

  // Optional: Prevent automatic `/me` -> `/me/`, instead preserve `href`
  // skipTrailingSlashRedirect: true,

  // Optional: Change the output directory `out` -> `dist`
  // distDir: 'dist',
}

module.exports = nextConfig

----------------------------------------

TITLE: Generating Static Params for Dynamic Routes in Next.js
DESCRIPTION: This code snippet shows how to use the generateStaticParams function to statically generate routes at build time for dynamic segments. It fetches posts data and maps it to generate slug parameters.

LANGUAGE: typescript
CODE:
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}

LANGUAGE: jsx
CODE:
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}

----------------------------------------

TITLE: Basic Server-Side Data Fetching in Next.js
DESCRIPTION: Demonstrates a simple server-side data fetch using the fetch API in an asynchronous React Server Component. The component fetches blog posts and renders them in an unordered list.

LANGUAGE: tsx
CODE:
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}

----------------------------------------

TITLE: Installing Next.js with create-next-app
DESCRIPTION: Use the create-next-app CLI to automatically set up a new Next.js project. This command initiates the installation process and prompts for project configuration options.

LANGUAGE: bash
CODE:
npx create-next-app@latest

----------------------------------------

TITLE: Handling Expected Errors in Server Components (TypeScript)
DESCRIPTION: This snippet demonstrates how to handle expected errors when fetching data inside a Server Component using TypeScript. It shows conditional rendering based on the response status.

LANGUAGE: typescript
CODE:
export default async function Page() {
  const res = await fetch(`https://...`)
  const data = await res.json()

  if (!res.ok) {
    return 'There was an error.'
  }

  return '...'
}

----------------------------------------

TITLE: Next.js Link Component Usage
DESCRIPTION: Demonstrates how to use the built-in Link component for client-side navigation between routes. The Link component extends the HTML anchor tag with prefetching capabilities.

LANGUAGE: typescript
CODE:
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}

LANGUAGE: javascript
CODE:
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}

----------------------------------------

TITLE: Implementing Error Boundary Component in Next.js (TypeScript)
DESCRIPTION: Creates a client-side error boundary component that handles runtime errors and provides a fallback UI with error logging and reset functionality. Uses TypeScript with proper type definitions for error and reset props.

LANGUAGE: tsx
CODE:
'use client' // Error boundaries must be Client Components

import { useEffect } from 'react'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}

----------------------------------------

TITLE: Using Authorization Header in Next.js API Request
DESCRIPTION: Example showing how to forward an authorization header from an incoming request to another API fetch call within a Next.js Server Component.

LANGUAGE: javascript
CODE:
import { headers } from 'next/headers'

export default async function Page() {
  const authorization = (await headers()).get('authorization')
  const res = await fetch('...', {
    headers: { authorization }, // Forward the authorization header
  })
  const user = await res.json()

  return <h1>{user.name}</h1>
}

----------------------------------------

TITLE: Implementing Modal with Parallel Routes
DESCRIPTION: Example of using parallel routes to create a modal component with deep linking support.

LANGUAGE: typescript
CODE:
'use client'

import { useRouter } from 'next/navigation'

export function Modal({ children }: { children: React.ReactNode }) {
  const router = useRouter()

  return (
    <>
      <button
        onClick={() => {
          router.back()
        }}
      >
        Close modal
      </button>
      <div>{children}</div>
    </>
  )
}

----------------------------------------

TITLE: Configuring VS Code Debugging for Next.js
DESCRIPTION: This JSON configuration sets up debugging tasks for Next.js in VS Code. It includes configurations for server-side debugging, client-side debugging (Chrome and Firefox), and full-stack debugging.

LANGUAGE: json
CODE:
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Next.js: debug server-side",
      "type": "node-terminal",
      "request": "launch",
      "command": "npm run dev"
    },
    {
      "name": "Next.js: debug client-side",
      "type": "chrome",
      "request": "launch",
      "url": "http://localhost:3000"
    },
    {
      "name": "Next.js: debug client-side (Firefox)",
      "type": "firefox",
      "request": "launch",
      "url": "http://localhost:3000",
      "reAttach": true,
      "pathMappings": [
        {
          "url": "webpack://_N_E",
          "path": "${workspaceFolder}"
        }
      ]
    },
    {
      "name": "Next.js: debug full stack",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/node_modules/.bin/next",
      "runtimeArgs": ["--inspect"],
      "skipFiles": ["<node_internals>/**"],
      "serverReadyAction": {
        "action": "debugWithEdge",
        "killOnServerStop": true,
        "pattern": "- Local:.+(https?://.+)",
        "uriFormat": "%s",
        "webRoot": "${workspaceFolder}"
      }
    }
  ]
}

----------------------------------------

TITLE: Installing Next.js with create-next-app
DESCRIPTION: Use the create-next-app CLI to automatically set up a new Next.js project. This command initiates the installation process and prompts for project configuration options.

LANGUAGE: bash
CODE:
npx create-next-app@latest

----------------------------------------

TITLE: Implementing Sign-up Form in Next.js
DESCRIPTION: Example of a sign-up form component using Server Actions in Next.js. It demonstrates how to capture user credentials and handle form submission.

LANGUAGE: tsx
CODE:
import { signup } from '@/app/actions/auth'

export function SignupForm() {
  return (
    <form action={signup}>
      <div>
        <label htmlFor="name">Name</label>
        <input id="name" name="name" placeholder="Name" />
      </div>
      <div>
        <label htmlFor="email">Email</label>
        <input id="email" name="email" type="email" placeholder="Email" />
      </div>
      <div>
        <label htmlFor="password">Password</label>
        <input id="password" name="password" type="password" />
      </div>
      <button type="submit">Sign Up</button>
    </form>
  )
}

----------------------------------------

TITLE: create-next-app CLI Options for Non-interactive Setup
DESCRIPTION: Comprehensive list of command-line options for create-next-app, allowing non-interactive project setup with specific configurations such as TypeScript, Tailwind CSS, ESLint, and more.

LANGUAGE: bash
CODE:
Usage: create-next-app [project-directory] [options]

Options:
  -V, --version                        output the version number
  --ts, --typescript

    Initialize as a TypeScript project. (default)

  --js, --javascript

    Initialize as a JavaScript project.

  --tailwind

    Initialize with Tailwind CSS config. (default)

  --eslint

    Initialize with ESLint config.

  --app

    Initialize as an App Router project.

  --src-dir

    Initialize inside a `src/` directory.

  --turbopack

    Enable Turbopack by default for development.

  --import-alias <alias-to-configure>

    Specify import alias to use (default "@/*").

  --empty

    Initialize an empty project.

  --use-npm

    Explicitly tell the CLI to bootstrap the application using npm

  --use-pnpm

    Explicitly tell the CLI to bootstrap the application using pnpm

  --use-yarn

    Explicitly tell the CLI to bootstrap the application using Yarn

  --use-bun

    Explicitly tell the CLI to bootstrap the application using Bun

  -e, --example [name]|[github-url]

    An example to bootstrap the app with. You can use an example name
    from the official Next.js repo or a GitHub URL. The URL can use
    any branch and/or subdirectory

  --example-path <path-to-example>

    In a rare case, your GitHub URL might contain a branch name with
    a slash (e.g. bug/fix-1) and the path to the example (e.g. foo/bar).
    In this case, you must specify the path to the example separately:
    --example-path foo/bar

  --reset-preferences

    Explicitly tell the CLI to reset any stored preferences

  --skip-install

    Explicitly tell the CLI to skip installing packages

  --disable-git

    Explicitly tell the CLI to skip initializing a git repository.

  --yes

    Use previous preferences or defaults for all options that were not
    explicitly specified, without prompting.

  -h, --help                           display help for command

----------------------------------------

TITLE: Implementing Dynamic Routes in Next.js
DESCRIPTION: This code snippet demonstrates how to create a dynamic route for a blog post using the [slug] parameter. It shows how to access the dynamic segment value from the params prop in both TypeScript and JavaScript.

LANGUAGE: typescript
CODE:
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  return <div>My Post: {slug}</div>
}

LANGUAGE: jsx
CODE:
export default async function Page({ params }) {
  const { slug } = await params
  return <div>My Post: {slug}</div>
}

----------------------------------------

TITLE: Passing Server Components to Client Components as Props
DESCRIPTION: Demonstrates the supported pattern of passing Server Components as props to Client Components, using the children prop as an example.

LANGUAGE: typescript
CODE:
'use client'

import { useState } from 'react'

export default function ClientComponent({
  children,
}: {
  children: React.ReactNode
}) {
  const [count, setCount] = useState(0)

  return (
    <>
      <button onClick={() => setCount(count + 1)}>{count}</button>
      {children}
    </>
  )
}

----------------------------------------

TITLE: Implementing Streaming with Suspense in Next.js
DESCRIPTION: This snippet shows how to implement streaming using React's Suspense component in a Next.js page. It allows for granular control over which parts of the page are streamed, improving initial load time and user experience.

LANGUAGE: tsx
CODE:
import { Suspense } from 'react'
import BlogList from '@/components/BlogList'
import BlogListSkeleton from '@/components/BlogListSkeleton'

export default function BlogPage() {
  return (
    <div>
      {/* This content will be sent to the client immediately */}
      <header>
        <h1>Welcome to the Blog</h1>
        <p>Read the latest posts below.</p>
      </header>
      <main>
        {/* Any content wrapped in a <Suspense> boundary will be streamed */}
        <Suspense fallback={<BlogListSkeleton />}>
          <BlogList />
        </Suspense>
      </main>
    </div>
  )
}

LANGUAGE: jsx
CODE:
import { Suspense } from 'react'
import BlogList from '@/components/BlogList'
import BlogListSkeleton from '@/components/BlogListSkeleton'

export default function BlogPage() {
  return (
    <div>
      {/* This content will be sent to the client immediately */}
      <header>
        <h1>Welcome to the Blog</h1>
        <p>Read the latest posts below.</p>
      </header>
      <main>
        {/* Any content wrapped in a <Suspense> boundary will be streamed */}
        <Suspense fallback={<BlogListSkeleton />}>
          <BlogList />
        </Suspense>
      </main>
    </div>
  )
}

----------------------------------------

TITLE: Basic Server Action in Server Component
DESCRIPTION: Demonstrates how to create a basic Server Action within a Server Component using the 'use server' directive.

LANGUAGE: typescript
CODE:
export default function Page() {
  async function create() {
    'use server'
    // Mutate data
  }

  return '...'
}

----------------------------------------

TITLE: Importing CSS Module in Next.js App Router
DESCRIPTION: This snippet demonstrates how to import and use a CSS Module in a Next.js app using the App Router. It shows the usage of the styles object to apply scoped CSS classes.

LANGUAGE: tsx
CODE:
import styles from './styles.module.css'

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <section className={styles.dashboard}>{children}</section>
}

LANGUAGE: css
CODE:
.dashboard {
  padding: 24px;
}

----------------------------------------

TITLE: Using revalidatePath in a Next.js Server Action
DESCRIPTION: This example shows how to use revalidatePath within a server action. It defines an async function that submits a form and then revalidates the root path.

LANGUAGE: ts
CODE:
'use server'

import { revalidatePath } from 'next/cache'

export default async function submit() {
  await submitForm()
  revalidatePath('/')
}

----------------------------------------

TITLE: Defining a Dashboard Layout in Next.js
DESCRIPTION: This snippet demonstrates how to create a basic layout component for a dashboard in Next.js. It accepts children as a prop and wraps them in a section element.

LANGUAGE: tsx
CODE:
export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <section>{children}</section>
}

LANGUAGE: jsx
CODE:
export default function DashboardLayout({ children }) {
  return <section>{children}</section>
}

----------------------------------------

TITLE: Importing and Using next/image Component in Next.js
DESCRIPTION: This snippet demonstrates how to import and use the Image component from next/image in a Next.js application. It shows how to use local images with automatic size detection.

LANGUAGE: jsx
CODE:
import Image from 'next/image'
import profilePic from './me.png'

export default function Page() {
  return (
    <Image
      src={profilePic}
      alt="Picture of the author"
      // width={500} automatically provided
      // height={500} automatically provided
      // blurDataURL="data:..." automatically provided
      // placeholder="blur" // Optional blur-up while loading
    />
  )
}

----------------------------------------

TITLE: Implementing Partial Prerendering in a Next.js Page
DESCRIPTION: Example of a Next.js page using Partial Prerendering with static and dynamic components.

LANGUAGE: typescript
CODE:
import { Suspense } from 'react'
import { StaticComponent, DynamicComponent, Fallback } from '@/app/ui'

export const experimental_ppr = true

export default function Page() {
  return (
    <>
      <StaticComponent />
      <Suspense fallback={<Fallback />}>
        <DynamicComponent />
      </Suspense>
    </>
  )
}

LANGUAGE: javascript
CODE:
import { Suspense } from "react"
import { StaticComponent, DynamicComponent, Fallback } from "@/app/ui"

export const experimental_ppr = true

export default function Page() {
  return {
     <>
      <StaticComponent />
      <Suspense fallback={<Fallback />}>
        <DynamicComponent />
      </Suspense>
     </>
  };
}

----------------------------------------

TITLE: Implementing Partial Prerendering with Dynamic User Component
DESCRIPTION: Example of a Next.js page using Partial Prerendering with a dynamic User component wrapped in Suspense.

LANGUAGE: typescript
CODE:
import { Suspense } from 'react'
import { User, AvatarSkeleton } from './user'

export const experimental_ppr = true

export default function Page() {
  return (
    <section>
      <h1>This will be prerendered</h1>
      <Suspense fallback={<AvatarSkeleton />}>
        <User />
      </Suspense>
    </section>
  )
}

LANGUAGE: javascript
CODE:
import { Suspense } from 'react'
import { User, AvatarSkeleton } from './user'

export const experimental_ppr = true

export default function Page() {
  return (
    <section>
      <h1>This will be prerendered</h1>
      <Suspense fallback={<AvatarSkeleton />}>
        <User />
      </Suspense>
    </section>
  )
}

----------------------------------------

TITLE: Accessing NextRequest Object in Next.js Route Handlers
DESCRIPTION: This snippet demonstrates how to access the NextRequest object in a Next.js route handler, which extends the Web Request API and provides additional functionality like easy access to cookies and parsed URL object.

LANGUAGE: typescript
CODE:
import type { NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  const url = request.nextUrl
}

LANGUAGE: javascript
CODE:
export async function GET(request) {
  const url = request.nextUrl
}

----------------------------------------

TITLE: Implementing Shared Layout Component
DESCRIPTION: Shows how to create a reusable layout component that includes navigation and footer, wrapped around page content using the children prop.

LANGUAGE: jsx
CODE:
import Navbar from './navbar'
import Footer from './footer'

export default function Layout({ children }) {
  return (
    <>
      <Navbar />
      <main>{children}</main>
      <Footer />
    </>
  )
}

----------------------------------------

TITLE: Creating a Nested Layout for Dashboard in Next.js
DESCRIPTION: This code demonstrates how to create a nested layout for the /dashboard route in a Next.js application. Nested layouts allow for more granular control over the UI structure for specific route segments.

LANGUAGE: typescript
CODE:
export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <section>{children}</section>
}

LANGUAGE: javascript
CODE:
export default function DashboardLayout({ children }) {
  return <section>{children}</section>
}

----------------------------------------

TITLE: Creating a Font Definitions File in Next.js
DESCRIPTION: Demonstrates how to create a font definitions file to centralize font loading and improve reusability across the application.

LANGUAGE: typescript
CODE:
import { Inter, Lora, Source_Sans_3 } from 'next/font/google'
import localFont from 'next/font/local'

const inter = Inter()
const lora = Lora()
const sourceCodePro400 = Source_Sans_3({ weight: '400' })
const sourceCodePro700 = Source_Sans_3({ weight: '700' })
const greatVibes = localFont({ src: './GreatVibes-Regular.ttf' })

export { inter, lora, sourceCodePro400, sourceCodePro700, greatVibes }

----------------------------------------

TITLE: Creating a Global Error Handler (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a global error handler component in TypeScript for handling errors in the root layout. It includes custom HTML and body tags.

LANGUAGE: typescript
CODE:
'use client' // Error boundaries must be Client Components

export default function GlobalError({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    // global-error must include html and body tags
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Creating a Root Layout in Next.js
DESCRIPTION: Shows how to create a root layout in Next.js by exporting a default React component from a 'layout' file in the app directory. The layout includes html and body tags and accepts children as a prop.

LANGUAGE: typescript
CODE:
export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        {/* Layout UI */}
        {/* Place children where you want to render a page or nested layout */}
        <main>{children}</main>
      </body>
    </html>
  )
}

LANGUAGE: javascript
CODE:
export default function DashboardLayout({ children }) {
  return (
    <html lang="en">
      <body>
        {/* Layout UI */}
        {/* Place children where you want to render a page or nested layout */}
        <main>{children}</main>
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Revalidating Cache after Server Function Execution in Next.js
DESCRIPTION: Shows how to revalidate the Next.js cache after performing an update using a Server Function by calling revalidatePath within the function.

LANGUAGE: typescript
CODE:
'use server'

import { revalidatePath } from 'next/cache'

export async function createPost(formData: FormData) {
  // Update data
  // ...

  revalidatePath('/posts')
}

LANGUAGE: javascript
CODE:
'use server'

import { revalidatePath } from 'next/cache'

export async function createPost(formData) {
  // Update data
  // ...
  revalidatePath('/posts')
}

----------------------------------------

TITLE: Basic Cookie Reading in Next.js Server Component
DESCRIPTION: Demonstrates how to read a cookie named 'theme' using the cookies() function in a Next.js Server Component.

LANGUAGE: typescript
CODE:
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const theme = cookieStore.get('theme')
  return '...'
}

LANGUAGE: javascript
CODE:
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  const theme = cookieStore.get('theme')
  return '...'
}

----------------------------------------

TITLE: Implementing Server-side Rendering with getServerSideProps in Next.js
DESCRIPTION: This snippet demonstrates how to use getServerSideProps to fetch data on every request and pass it to a Next.js page component. It includes an example of fetching data from an external API and returning it as props.

LANGUAGE: jsx
CODE:
export default function Page({ data }) {
  // Render data...
}

// This gets called on every request
export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch(`https://.../data`)
  const data = await res.json()

  // Pass data to the page via props
  return { props: { data } }
}

----------------------------------------

TITLE: Implementing getStaticProps for Data Fetching
DESCRIPTION: Demonstrates how to use getStaticProps to fetch external data at build time and pass it as props to a page component.

LANGUAGE: jsx
CODE:
export default function Blog({ posts }) {
  // Render posts...
}

// This function gets called at build time
export async function getStaticProps() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      posts,
    },
  }
}

----------------------------------------

TITLE: Generating Static Params for Single Dynamic Segment in Next.js
DESCRIPTION: This code demonstrates how to use generateStaticParams to statically generate routes with a single dynamic segment. It returns an array of objects, each representing a set of params for the [slug] segment.

LANGUAGE: tsx
CODE:
// Return a list of `params` to populate the [slug] dynamic segment
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}

// Multiple versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  // ...
}

----------------------------------------

TITLE: Creating a Dashboard Layout in Next.js
DESCRIPTION: This code defines a shared layout for the dashboard pages in a Next.js application. It demonstrates how to create a layout component that wraps child components and includes shared UI elements like a navigation bar.

LANGUAGE: typescript
CODE:
export default function DashboardLayout({
  children, // will be a page or nested layout
}: {
  children: React.ReactNode
}) {
  return (
    <section>
      {/* Include shared UI here e.g. a header or sidebar */}
      <nav></nav>

      {children}
    </section>
  )
}

LANGUAGE: javascript
CODE:
export default function DashboardLayout({
  children, // will be a page or nested layout
}) {
  return (
    <section>
      {/* Include shared UI here e.g. a header or sidebar */}
      <nav></nav>

      {children}
    </section>
  )
}

----------------------------------------

TITLE: Verifying Session in Next.js Data Access Layer
DESCRIPTION: Function to verify user session using a Data Access Layer approach. It checks the session cookie and redirects to login if not authenticated.

LANGUAGE: ts
CODE:
import 'server-only'

import { cookies } from 'next/headers'
import { decrypt } from '@/app/lib/session'

export const verifySession = cache(async () => {
  const cookie = (await cookies()).get('session')?.value
  const session = await decrypt(cookie)

  if (!session?.userId) {
    redirect('/login')
  }

  return { isAuth: true, userId: session.userId }
})

----------------------------------------

TITLE: Configuring Next.js using ECMAScript Modules
DESCRIPTION: Example of using ECMAScript modules for Next.js configuration. This approach uses the .mjs file extension and exports the configuration object as the default export.

LANGUAGE: javascript
CODE:
// @ts-check

/**
 * @type {import('next').NextConfig}
 */
const nextConfig = {
  /* config options here */
}

export default nextConfig

----------------------------------------

TITLE: Using Next.js Built-in Components
DESCRIPTION: Examples of Next.js core optimization components including Image for optimized image loading, Link for page prefetching, and Script for third-party script management.

LANGUAGE: jsx
CODE:
<Image /> // Optimized image component
<Link /> // Prefetching link component
<Script /> // Script loading component

----------------------------------------

TITLE: Using SWR for Data Fetching in Next.js
DESCRIPTION: Demonstrates integration of SWR library with Next.js for efficient data fetching. Shows how to configure SWRConfig and implement data fetching in client components.

LANGUAGE: typescript
CODE:
import { SWRConfig } from 'swr'
import { getUser } from './user' // some server-side function

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <SWRConfig
      value={{
        fallback: {
          '/api/user': getUser(),
        },
      }}
    >
      {children}
    </SWRConfig>
  )
}

----------------------------------------

TITLE: Using Remote Images with Next.js Image Component
DESCRIPTION: Demonstrates how to use remote images with the Next.js Image component. It requires manually specifying width and height properties and configuring allowed URL patterns in next.config.js.

LANGUAGE: tsx
CODE:
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="https://s3.amazonaws.com/my-bucket/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}

LANGUAGE: jsx
CODE:
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="https://s3.amazonaws.com/my-bucket/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}

----------------------------------------

TITLE: Creating Session in Next.js
DESCRIPTION: Function to create a session after user authentication. It demonstrates how to encrypt session data and set cookies with recommended security options.

LANGUAGE: ts
CODE:
import 'server-only'
import { cookies } from 'next/headers'

export async function createSession(userId: string) {
  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
  const session = await encrypt({ userId, expiresAt })
  const cookieStore = await cookies()

  cookieStore.set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expiresAt,
    sameSite: 'lax',
    path: '/',
  })
}

----------------------------------------

TITLE: Time-based Revalidation in Next.js App Router
DESCRIPTION: This example demonstrates time-based revalidation in the Next.js App Router. It fetches a list of blog posts and invalidates the cache every hour.

LANGUAGE: tsx
CODE:
interface Post {
  id: string
  title: string
  content: string
}

export const revalidate = 3600 // invalidate every hour

export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts: Post[] = await data.json()
  return (
    <main>
      <h1>Blog Posts</h1>
      <ul>
        {posts.map((post) => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </main>
  )
}

----------------------------------------

TITLE: Next.js Directory Structure
DESCRIPTION: Standard directory structure for Next.js applications showing key folders like app, pages, public, and src along with their purposes.

LANGUAGE: plaintext
CODE:
app/       # App Router
pages/     # Pages Router
public/    # Static assets
src/       # Optional source folder

----------------------------------------

TITLE: Loading External Libraries On-Demand
DESCRIPTION: Shows how to dynamically import and use an external library (fuse.js) for client-side fuzzy search functionality, loading the library only when needed.

LANGUAGE: jsx
CODE:
'use client'

import { useState } from 'react'

const names = ['Tim', 'Joe', 'Bel', 'Lee']

export default function Page() {
  const [results, setResults] = useState()

  return (
    <div>
      <input
        type="text"
        placeholder="Search"
        onChange={async (e) => {
          const { value } = e.currentTarget
          // Dynamically load fuse.js
          const Fuse = (await import('fuse.js')).default
          const fuse = new Fuse(names)

          setResults(fuse.search(value))
        }}
      />
      <pre>Results: {JSON.stringify(results, null, 2)}</pre>
    </div>
  )
}

----------------------------------------

TITLE: Basic Next.js Image Component Usage
DESCRIPTION: Example showing basic usage of the Next.js Image component with required props src, width, height, and alt.

LANGUAGE: jsx
CODE:
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="/profile.png"
      width={500}
      height={500}
      alt="Picture of the author"
    />
  )
}

----------------------------------------

TITLE: On-demand Revalidation with revalidatePath in Next.js
DESCRIPTION: This code snippet shows how to implement on-demand revalidation using the revalidatePath function in a Next.js Server Action.

LANGUAGE: ts
CODE:
'use server'

import { revalidatePath } from 'next/cache'

export async function createPost() {
  // Invalidate the /posts route in the cache
  revalidatePath('/posts')
}

----------------------------------------

TITLE: Accessing URL Query Parameters in Next.js Client Components
DESCRIPTION: Demonstrates how to use the useSearchParams hook to read URL query parameters in a Next.js Client Component. The example shows how to retrieve a specific search parameter and render it.

LANGUAGE: tsx
CODE:
'use client'

import { useSearchParams } from 'next/navigation'

export default function SearchBar() {
  const searchParams = useSearchParams()

  const search = searchParams.get('search')

  // URL -> `/dashboard?search=my-project`
  // `search` -> 'my-project'
  return <>Search: {search}</>
}

LANGUAGE: jsx
CODE:
'use client'

import { useSearchParams } from 'next/navigation'

export default function SearchBar() {
  const searchParams = useSearchParams()

  const search = searchParams.get('search')

  // URL -> `/dashboard?search=my-project`
  // `search` -> 'my-project'
  return <>Search: {search}</>
}

----------------------------------------

TITLE: Fetching Data with fetch API in Next.js Server Component
DESCRIPTION: This snippet demonstrates how to fetch data using the fetch API in a Next.js Server Component. It uses an async function to await the fetch call and render a list of blog posts.

LANGUAGE: tsx
CODE:
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}

LANGUAGE: jsx
CODE:
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}

----------------------------------------

TITLE: Fill Container Image Example with next/image in Next.js
DESCRIPTION: This example shows how to use the fill property to make an image fill its parent container, useful for creating image grids.

LANGUAGE: jsx
CODE:
import Image from 'next/image'
import mountains from '../public/mountains.jpg'

export default function Fill() {
  return (
    <div
      style={{
        display: 'grid',
        gridGap: '8px',
        gridTemplateColumns: 'repeat(auto-fit, minmax(400px, auto))',
      }}
    >
      <div style={{ position: 'relative', height: '400px' }}>
        <Image
          alt="Mountains"
          src={mountains}
          fill
          sizes="(min-width: 808px) 50vw, 100vw"
          style={{
            objectFit: 'cover',
          }}
        />
      </div>
    </div>
  )
}

----------------------------------------

TITLE: Inline Server Functions in Next.js Server Components
DESCRIPTION: Shows how to create inline Server Functions within Server Components by adding the 'use server' directive at the top of the function body.

LANGUAGE: typescript
CODE:
export default function Page() {
  // Server Action
  async function createPost() {
    'use server'
    // Update data
    // ...
  }

  return <></>
}

LANGUAGE: javascript
CODE:
export default function Page() {
  // Server Action
  async function createPost() {
    'use server'
    // Update data
    // ...
  }

  return <></>
}

----------------------------------------

TITLE: Creating a Basic Page in Next.js
DESCRIPTION: Demonstrates how to create a simple index page ('/') in Next.js by exporting a default React component from a 'page' file in the app directory.

LANGUAGE: typescript
CODE:
export default function Page() {
  return <h1>Hello Next.js!</h1>
}

LANGUAGE: javascript
CODE:
export default function Page() {
  return <h1>Hello Next.js!</h1>
}

----------------------------------------

TITLE: Generating Multiple Sitemaps with TypeScript in Next.js
DESCRIPTION: This code demonstrates how to use the generateSitemaps function to create multiple sitemaps for a Next.js application using TypeScript. It splits the sitemap into multiple parts, each containing up to 50,000 URLs (Google's limit), and generates unique URLs for each product.

LANGUAGE: typescript
CODE:
import { BASE_URL } from '@/app/lib/constants'

export async function generateSitemaps() {
  // Fetch the total number of products and calculate the number of sitemaps needed
  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]
}

export default async function sitemap({
  id,
}: {
  id: number
}): Promise<MetadataRoute.Sitemap> {
  // Google's limit is 50,000 URLs per sitemap
  const start = id * 50000
  const end = start + 50000
  const products = await getProducts(
    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`
  )
  return products.map((product) => ({
    url: `${BASE_URL}/product/${product.id}`,
    lastModified: product.date,
  }))
}

----------------------------------------

TITLE: Server Action in Client Component
DESCRIPTION: Shows how to define and use Server Actions in Client Components by creating a separate file with the 'use server' directive.

LANGUAGE: typescript
CODE:
'use server'

export async function create() {}

// In client component:
'use client'

import { create } from './actions'

export function Button() {
  return <button onClick={() => create()}>Create</button>
}

----------------------------------------

TITLE: Next.js useRouter Hook Implementation
DESCRIPTION: Shows how to use the useRouter hook for programmatic navigation in Client Components. This example demonstrates pushing to a new route on button click.

LANGUAGE: typescript
CODE:
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/dashboard')}>
      Dashboard
    </button>
  )
}

LANGUAGE: javascript
CODE:
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/dashboard')}>
      Dashboard
    </button>
  )
}

----------------------------------------

TITLE: Using React Cache for Data Memoization in Next.js
DESCRIPTION: Demonstrates how to use the React cache function to manually memoize data requests when the fetch API is not suitable, such as with database or CMS clients.

LANGUAGE: typescript
CODE:
import { cache } from 'react'
import db from '@/lib/db'

export const getItem = cache(async (id: string) => {
  const item = await db.item.findUnique({ id })
  return item
})

----------------------------------------

TITLE: Implementing getStaticProps in TypeScript for Next.js
DESCRIPTION: This snippet demonstrates how to use getStaticProps to fetch data from the GitHub API and render it in a Next.js page component. It includes type definitions and uses the InferGetStaticPropsType utility.

LANGUAGE: typescript
CODE:
import type { InferGetStaticPropsType, GetStaticProps } from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getStaticProps = (async (context) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}) satisfies GetStaticProps<{
  repo: Repo
}>

export default function Page({
  repo,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  return repo.stargazers_count
}

----------------------------------------

TITLE: Implementing a Root Layout with Metadata Support in Next.js
DESCRIPTION: This snippet shows how to create a root layout in Next.js, emphasizing the importance of defining HTML and body tags. It also mentions using the Metadata API for head elements.

LANGUAGE: tsx
CODE:
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html>
      <body>{children}</body>
    </html>
  )
}

LANGUAGE: jsx
CODE:
export default function RootLayout({ children }) {
  return (
    <html>
      <body>{children}</body>
    </html>
  )
}

----------------------------------------

TITLE: Configuring Asset Prefix in Next.js Multi-Zone
DESCRIPTION: Configuration for setting up assetPrefix in next.config.js to avoid asset conflicts between different zones. This ensures each zone's assets are served under a unique prefix.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  assetPrefix: '/blog-static',
}

----------------------------------------

TITLE: Implementing a Client Component Counter in Next.js
DESCRIPTION: This snippet demonstrates how to create a client-side counter component using the 'use client' directive. It utilizes React's useState hook for state management and includes a button to increment the count.

LANGUAGE: tsx
CODE:
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  )
}

LANGUAGE: jsx
CODE:
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  )
}

----------------------------------------

TITLE: Dynamic Metadata Generation in Next.js
DESCRIPTION: Implementation of generateMetadata function for dynamic metadata fetching. Demonstrates route parameter usage, data fetching, and parent metadata extension.

LANGUAGE: tsx
CODE:
import type { Metadata, ResolvingMetadata } from 'next'

type Props = {
  params: Promise<{ id: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}

export async function generateMetadata(
  { params, searchParams }: Props,
  parent: ResolvingMetadata
): Promise<Metadata> {
  const { id } = await params
  const product = await fetch(`https://.../${id}`).then((res) => res.json())
  const previousImages = (await parent).openGraph?.images || []

  return {
    title: product.title,
    openGraph: {
      images: ['/some-specific-page-image.jpg', ...previousImages],
    },
  }
}

export default function Page({ params, searchParams }: Props) {}

LANGUAGE: jsx
CODE:
export async function generateMetadata({ params, searchParams }, parent) {
  const { id } = await params
  const product = await fetch(`https://.../${id}`).then((res) => res.json())
  const previousImages = (await parent).openGraph?.images || []

  return {
    title: product.title,
    openGraph: {
      images: ['/some-specific-page-image.jpg', ...previousImages],
    },
  }
}

export default function Page({ params, searchParams }) {}

----------------------------------------

TITLE: Generating Static Params for Multiple Dynamic Segments in Next.js
DESCRIPTION: This example shows how to generate static params for a route with multiple dynamic segments ([category] and [product]). It returns an array of objects, each containing values for both segments.

LANGUAGE: tsx
CODE:
export function generateStaticParams() {
  return [
    { category: 'a', product: '1' },
    { category: 'b', product: '2' },
    { category: 'c', product: '3' },
  ]
}

// Three versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
// - /products/a/1
// - /products/b/2
// - /products/c/3
export default async function Page({
  params,
}: {
  params: Promise<{ category: string; product: string }>
}) {
  const { category, product } = await params
  // ...
}

----------------------------------------

TITLE: Handling Cookies in Next.js Route Handlers
DESCRIPTION: This snippet demonstrates how to handle cookies in a Next.js route handler using the cookies() function from 'next/headers'. It shows how to get, set, and delete cookies.

LANGUAGE: typescript
CODE:
import { cookies } from 'next/headers'

export async function GET(request: NextRequest) {
  const cookieStore = await cookies()

  const a = cookieStore.get('a')
  const b = cookieStore.set('b', '1')
  const c = cookieStore.delete('c')
}

LANGUAGE: javascript
CODE:
import { cookies } from 'next/headers'

export async function GET(request) {
  const cookieStore = await cookies()

  const a = cookieStore.get('a')
  const b = cookieStore.set('b', '1')
  const c = cookieStore.delete('c')
}

----------------------------------------

TITLE: Generating Static Params for Subset of Paths in Next.js
DESCRIPTION: This example demonstrates how to statically render a subset of paths at build time, while allowing the rest to be rendered at runtime. It uses the slice method to limit the number of paths generated.

LANGUAGE: tsx
CODE:
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  // Render the first 10 posts at build time
  return posts.slice(0, 10).map((post) => ({
    slug: post.slug,
  }))
}

----------------------------------------

TITLE: Basic Route Handler Implementation in Next.js
DESCRIPTION: Demonstrates the basic setup of a Route Handler with GET method in the app directory.

LANGUAGE: typescript
CODE:
export async function GET(request: Request) {}

LANGUAGE: javascript
CODE:
export async function GET(request) {}

----------------------------------------

TITLE: Implementing Navigation Events in Layout
DESCRIPTION: Demonstrates how to integrate the NavigationEvents component into a layout file with proper Suspense boundary handling.

LANGUAGE: javascript
CODE:
import { Suspense } from 'react'
import { NavigationEvents } from './components/navigation-events'

export default function Layout({ children }) {
  return (
    <html lang="en">
      <body>
        {children}

        <Suspense fallback={null}>
          <NavigationEvents />
        </Suspense>
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Nesting Client Components within Server Components in Next.js
DESCRIPTION: This example shows how to combine Server and Client Components in Next.js. It imports a Client Component (Counter) into a Server Component (Page), demonstrating the separation of server and client logic.

LANGUAGE: tsx
CODE:
import Header from './header'
import Counter from './counter' // This is a Client Component

export default function Page() {
  return (
    <div>
      <Header />
      <Counter />
    </div>
  )
}

LANGUAGE: jsx
CODE:
import Header from './header'
import Counter from './counter' // This is a Client Component

export default function Page() {
  return (
    <div>
      <Header />
      <Counter />
    </div>
  )
}

----------------------------------------

TITLE: Configuring dynamicIO in Next.js Configuration
DESCRIPTION: Shows how to enable the dynamicIO experimental flag in a Next.js application by modifying the next.config.ts file. This configuration allows data fetching operations to be excluded from pre-renders unless explicitly cached.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    dynamicIO: true,
  },
}

export default nextConfig

----------------------------------------

TITLE: Advanced Custom Document with renderPage Configuration
DESCRIPTION: Extended Document implementation that includes custom renderPage logic for advanced server-side rendering scenarios. Demonstrates how to implement getInitialProps and customize the rendering process.

LANGUAGE: tsx
CODE:
import Document, {
  Html,
  Head,
  Main,
  NextScript,
  DocumentContext,
  DocumentInitialProps,
} from 'next/document'

class MyDocument extends Document {
  static async getInitialProps(
    ctx: DocumentContext
  ): Promise<DocumentInitialProps> {
    const originalRenderPage = ctx.renderPage

    // Run the React rendering logic synchronously
    ctx.renderPage = () =>
      originalRenderPage({
        // Useful for wrapping the whole react tree
        enhanceApp: (App) => App,
        // Useful for wrapping in a per-page basis
        enhanceComponent: (Component) => Component,
      })

    // Run the parent `getInitialProps`, it now includes the custom `renderPage`
    const initialProps = await Document.getInitialProps(ctx)

    return initialProps
  }

  render() {
    return (
      <Html lang="en">
        <Head />
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    )
  }
}

export default MyDocument

LANGUAGE: jsx
CODE:
import Document, { Html, Head, Main, NextScript } from 'next/document'

class MyDocument extends Document {
  static async getInitialProps(ctx) {
    const originalRenderPage = ctx.renderPage

    // Run the React rendering logic synchronously
    ctx.renderPage = () =>
      originalRenderPage({
        // Useful for wrapping the whole react tree
        enhanceApp: (App) => App,
        // Useful for wrapping in a per-page basis
        enhanceComponent: (Component) => Component,
      })

    // Run the parent `getInitialProps`, it now includes the custom `renderPage`
    const initialProps = await Document.getInitialProps(ctx)

    return initialProps
  }

  render() {
    return (
      <Html lang="en">
        <Head />
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    )
  }
}

export default MyDocument

----------------------------------------

TITLE: Dynamic Image Generation with ImageResponse in Next.js
DESCRIPTION: Example of using ImageResponse constructor to generate dynamic images using JSX and CSS, commonly used for social media cards and Open Graph images.

LANGUAGE: jsx
CODE:
import { ImageResponse } from 'next/og'

export async function GET() {
  return new ImageResponse(
    (
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          textAlign: 'center',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        Hello world!
      </div>
    ),
    {
      width: 1200,
      height: 600,
    }
  )
}

----------------------------------------

TITLE: Implementing getStaticPaths for Dynamic Routes
DESCRIPTION: Shows how to use getStaticPaths to specify which dynamic routes should be pre-rendered at build time.

LANGUAGE: jsx
CODE:
export async function getStaticPaths() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // Get the paths we want to pre-render based on posts
  const paths = posts.map((post) => ({
    params: { id: post.id },
  }))

  // We'll pre-render only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: false }
}

----------------------------------------

TITLE: Basic API Route Handler Implementation
DESCRIPTION: Example of a basic API route handler that returns a JSON response with a 200 status code. Shows both TypeScript and JavaScript implementations.

LANGUAGE: typescript
CODE:
import type { NextApiRequest, NextApiResponse } from 'next'

type ResponseData = {
  message: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>
) {
  res.status(200).json({ message: 'Hello from Next.js!' })
}

LANGUAGE: javascript
CODE:
export default function handler(req, res) {
  res.status(200).json({ message: 'Hello from Next.js!' })
}

----------------------------------------

TITLE: Styled-JSX Component Example in Next.js
DESCRIPTION: Shows how to use styled-jsx for component-scoped and global styling in Next.js, including media queries.

LANGUAGE: javascript
CODE:
function HelloWorld() {
  return (
    <div>
      Hello world
      <p>scoped!</p>
      <style jsx>{`
        p {
          color: blue;
        }
        div {
          background: red;
        }
        @media (max-width: 600px) {
          div {
            background: blue;
          }
        }
      `}</style>
      <style global jsx>{`
        body {
          background: black;
        }
      `}</style>
    </div>
  )
}

export default HelloWorld

----------------------------------------

TITLE: Creating a Dynamic Blog Post Page in Next.js
DESCRIPTION: Shows how to create a dynamic blog post page using a [slug] folder for dynamic routing. This example includes a placeholder for generateStaticParams function, which is used for static generation of dynamic routes.

LANGUAGE: typescript
CODE:
function generateStaticParams() {}

export default function Page() {
  return <h1>Hello, Blog Post Page!</h1>
}

LANGUAGE: javascript
CODE:
function generateStaticParams() {}

export default function Page() {
  return <h1>Hello, Blog Post Page!</h1>
}

----------------------------------------

TITLE: Disabling Draft Mode API Route
DESCRIPTION: Implementation of an API route that disables Draft Mode by clearing the draft mode cookie

LANGUAGE: typescript
CODE:
export default function handler(req, res) {
  res.setDraftMode({ enable: false })
}

----------------------------------------

TITLE: Using Environment Variables in Next.js Pages
DESCRIPTION: Demonstrates how to access environment variables within getStaticProps for database connection in pages router.

LANGUAGE: js
CODE:
export async function getStaticProps() {
  const db = await myDB.connect({
    host: process.env.DB_HOST,
    username: process.env.DB_USER,
    password: process.env.DB_PASS,
  })
  // ...
}

----------------------------------------

TITLE: Implementing getStaticPaths and getStaticProps in JavaScript
DESCRIPTION: This snippet shows how to implement getStaticPaths and getStaticProps for a dynamic route in Next.js using JavaScript. It fetches data from the GitHub API and generates static paths.

LANGUAGE: javascript
CODE:
export async function getStaticPaths() {
  return {
    paths: [
      {
        params: {
          name: 'next.js',
        },
      }, // See the "paths" section below
    ],
    fallback: true, // false or "blocking"
  }
}

export async function getStaticProps() {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}

export default function Page({ repo }) {
  return repo.stargazers_count
}

----------------------------------------

TITLE: Streaming with React Suspense in Next.js TypeScript
DESCRIPTION: Implementation of streaming content using React Suspense in a Next.js dashboard page. Shows how to wrap multiple components with Suspense boundaries for progressive loading with fallback states.

LANGUAGE: typescript
CODE:
import { Suspense } from 'react'
import { PostFeed, Weather } from './Components'

export default function Posts() {
  return (
    <section>
      <Suspense fallback={<p>Loading feed...</p>}>
        <PostFeed />
      </Suspense>
      <Suspense fallback={<p>Loading weather...</p>}>
        <Weather />
      </Suspense>
    </section>
  )
}

----------------------------------------

TITLE: Next.js Configuration as a Function
DESCRIPTION: Demonstrates how to export a function that returns the Next.js configuration object. This approach allows for more dynamic configuration based on the current phase.

LANGUAGE: javascript
CODE:
// @ts-check

export default (phase, { defaultConfig }) => {
  /**
   * @type {import('next').NextConfig}
   */
  const nextConfig = {
    /* config options here */
  }
  return nextConfig
}

----------------------------------------

TITLE: Implementing Root-Level Middleware with Path-Based Conditions in Next.js
DESCRIPTION: Demonstrates how to implement conditional middleware logic at the root level using NextRequest to check pathname patterns. This approach replaces the previous nested middleware structure by consolidating multiple middleware functions into a single root-level file with path-specific conditions.

LANGUAGE: typescript
CODE:
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  if (request.nextUrl.pathname.startsWith('/about')) {
    // This logic is only applied to /about
  }

  if (request.nextUrl.pathname.startsWith('/dashboard')) {
    // This logic is only applied to /dashboard
  }
}

----------------------------------------

TITLE: Creating Active Navigation Links in Next.js
DESCRIPTION: This snippet shows how to create active navigation links in a Next.js application using the usePathname() hook. It demonstrates the creation of a Client Component for navigation links that can be imported into layouts or templates.

LANGUAGE: typescript
CODE:
'use client'

import { usePathname } from 'next/navigation'
import Link from 'next/link'

export function NavLinks() {
  const pathname = usePathname()

  return (
    <nav>
      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href="/">
        Home
      </Link>

      <Link
        className={`link ${pathname === '/about' ? 'active' : ''}`}
        href="/about"
      >
        About
      </Link>
    </nav>
  )
}

LANGUAGE: javascript
CODE:
'use client'

import { usePathname } from 'next/navigation'
import Link from 'next/link'

export function Links() {
  const pathname = usePathname()

  return (
    <nav>
      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href="/">
        Home
      </Link>

      <Link
        className={`link ${pathname === '/about' ? 'active' : ''}`}
        href="/about"
      >
        About
      </Link>
    </nav>
  )
}

----------------------------------------

TITLE: Implementing getStaticProps in TypeScript for Next.js
DESCRIPTION: This snippet demonstrates how to implement `getStaticProps` in a TypeScript Next.js project. It fetches data from the GitHub API and returns it as props for the page component.

LANGUAGE: tsx
CODE:
import type { InferGetStaticPropsType, GetStaticProps } from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getStaticProps = (async (context) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}) satisfies GetStaticProps<{
  repo: Repo
}>

export default function Page({
  repo,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  return repo.stargazers_count
}

----------------------------------------

TITLE: Example Metadata File Structure in Next.js
DESCRIPTION: Demonstrates the file naming conventions for metadata files in Next.js, including static files like 'opengraph-image.jpg' and dynamic variants like 'opengraph-image.js'. These files are automatically processed by Next.js to update head elements with correct metadata.

LANGUAGE: plaintext
CODE:
opengraph-image.jpg    # Static metadata file
opengraph-image.js     # Dynamic metadata file
sitemap.ts             # Special route handler
icon.tsx               # App icon configuration
middleware.ts          # Middleware configuration

----------------------------------------

TITLE: Handling Expected Errors in Server Actions (TypeScript)
DESCRIPTION: This snippet demonstrates how to handle expected errors in Server Actions using TypeScript. It shows how to return an error message for invalid input and redirect on success.

LANGUAGE: typescript
CODE:
'use server'

import { redirect } from 'next/navigation'

export async function createUser(prevState: any, formData: FormData) {
  const res = await fetch('https://...')
  const json = await res.json()

  if (!res.ok) {
    return { message: 'Please enter a valid email' }
  }

  redirect('/dashboard')
}

----------------------------------------

TITLE: Fetching Data with getServerSideProps in Next.js (JavaScript)
DESCRIPTION: This snippet shows how to implement getServerSideProps in JavaScript to fetch data from an external API and pass it to a Next.js page component as props.

LANGUAGE: javascript
CODE:
export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  // Pass data to the page via props
  return { props: { repo } }
}

export default function Page({ repo }) {
  return (
    <main>
      <p>{repo.stargazers_count}</p>
    </main>
  )
}

----------------------------------------

TITLE: Implementing Layout Scripts in Next.js App Router
DESCRIPTION: Example of loading a third-party script for multiple routes using next/script in a layout component. The script will only load once even when navigating between routes in the same layout.

LANGUAGE: typescript
CODE:
import Script from 'next/script'

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <>
      <section>{children}</section>
      <Script src="https://example.com/script.js" />
    </>
  )
}

----------------------------------------

TITLE: Implementing ISR with Pages Router in Next.js
DESCRIPTION: This code snippet shows how to implement Incremental Static Regeneration using the Pages Router in Next.js. It includes getStaticPaths and getStaticProps functions with revalidation settings.

LANGUAGE: tsx
CODE:
import type { GetStaticPaths, GetStaticProps } from 'next'

interface Post {
  id: string
  title: string
  content: string
}

interface Props {
  post: Post
}

export const getStaticPaths: GetStaticPaths = async () => {
  const posts = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )
  const paths = posts.map((post: Post) => ({
    params: { id: String(post.id) },
  }))

  // We'll prerender only these paths at build time.
  // { fallback: 'blocking' } will server-render pages
  // on-demand if the path doesn't exist.
  return { paths, fallback: false }
}

export const getStaticProps: GetStaticProps<Props> = async ({
  params,
}: {
  params: { id: string }
}) => {
  const post = await fetch(`https://api.vercel.app/blog/${params.id}`).then(
    (res) => res.json()
  )

  return {
    props: { post },
    // Next.js will invalidate the cache when a
    // request comes in, at most once every 60 seconds.
    revalidate: 60,
  }
}

export default function Page({ post }: Props) {
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </main>
  )
}

----------------------------------------

TITLE: Using server-only Package to Prevent Client-side Usage
DESCRIPTION: Demonstrates how to use the server-only package to ensure server-only code is not accidentally used in Client Components.

LANGUAGE: javascript
CODE:
import 'server-only'

export async function getData() {
  const res = await fetch('https://external-service.com/data', {
    headers: {
      authorization: process.env.API_KEY,
    },
  })

  return res.json()
}

----------------------------------------

TITLE: Generating Static Params for Multiple Dynamic Segments from Child Route in Next.js
DESCRIPTION: This code shows how to generate params for multiple dynamic segments from the child route. It fetches product data and generates params for both [category] and [product] segments.

LANGUAGE: tsx
CODE:
// Generate segments for both [category] and [product]
export async function generateStaticParams() {
  const products = await fetch('https://.../products').then((res) => res.json())

  return products.map((product) => ({
    category: product.category.slug,
    product: product.id,
  }))
}

export default function Page({
  params,
}: {
  params: Promise<{ category: string; product: string }>
}) {
  // ...
}

----------------------------------------

TITLE: Streaming Response Implementation
DESCRIPTION: Demonstrates how to create a streaming response using ReadableStream and async iterators.

LANGUAGE: typescript
CODE:
function iteratorToStream(iterator: any) {
  return new ReadableStream({
    async pull(controller) {
      const { value, done } = await iterator.next()

      if (done) {
        controller.close()
      } else {
        controller.enqueue(value)
      }
    },
  })
}

function sleep(time: number) {
  return new Promise((resolve) => {
    setTimeout(resolve, time)
  })
}

const encoder = new TextEncoder()

async function* makeIterator() {
  yield encoder.encode('<p>One</p>')
  await sleep(200)
  yield encoder.encode('<p>Two</p>')
  await sleep(200)
  yield encoder.encode('<p>Three</p>')
}

export async function GET() {
  const iterator = makeIterator()
  const stream = iteratorToStream(iterator)

  return new Response(stream)
}

----------------------------------------

TITLE: Google Maps Integration with Script onReady Event
DESCRIPTION: Example of using the Script component's onReady event to initialize a Google Maps instance, with proper handling of component remounting.

LANGUAGE: tsx
CODE:
'use client'

import { useRef } from 'react'
import Script from 'next/script'

export default function Page() {
  const mapRef = useRef()

  return (
    <>
      <div ref={mapRef}></div>
      <Script
        id="google-maps"
        src="https://maps.googleapis.com/maps/api/js"
        onReady={() => {
          new google.maps.Map(mapRef.current, {
            center: { lat: -34.397, lng: 150.644 },
            zoom: 8,
          })
        }}
      />
    </>
  )
}

----------------------------------------

TITLE: Reusing Data Across Multiple Functions in Next.js
DESCRIPTION: Demonstrates how to reuse data across generateStaticParams, generateMetadata, and the main Page component using memoized fetch requests. The getPost function is used in multiple places to fetch and reuse blog post data.

LANGUAGE: tsx
CODE:
import { notFound } from 'next/navigation'

interface Post {
  id: string
  title: string
  content: string
}

async function getPost(id: string) {
  const res = await fetch(`https://api.vercel.app/blog/${id}`, {
    cache: 'force-cache',
  })
  const post: Post = await res.json()
  if (!post) notFound()
  return post
}

export async function generateStaticParams() {
  const posts = await fetch('https://api.vercel.app/blog', {
    cache: 'force-cache',
  }).then((res) => res.json())

  return posts.map((post: Post) => ({
    id: String(post.id),
  }))
}

export async function generateMetadata({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const post = await getPost(id)

  return {
    title: post.title,
  }
}

export default async function Page({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const post = await getPost(id)

  return (
    <article>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </article>
  )
}

----------------------------------------

TITLE: Using useActionState for Error Handling in React Components (TypeScript)
DESCRIPTION: This snippet shows how to use the useActionState hook to manage Server Action state and display error messages in a React component. It includes form submission and error display logic.

LANGUAGE: typescript
CODE:
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

const initialState = {
  message: '',
}

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      <label htmlFor="email">Email</label>
      <input type="text" id="email" name="email" required />
      {/* ... */}
      <p aria-live="polite">{state?.message}</p>
      <button disabled={pending}>Sign up</button>
    </form>
  )
}

----------------------------------------

TITLE: Basic Inline Styles Example in Next.js
DESCRIPTION: Demonstrates the simplest form of CSS-in-JS using inline styles in a React component.

LANGUAGE: javascript
CODE:
function HiThere() {
  return <p style={{ color: 'red' }}>hi there</p>
}

export default HiThere

----------------------------------------

TITLE: Importing External Stylesheet in Next.js App Router
DESCRIPTION: This snippet illustrates how to import an external CSS library (Bootstrap in this case) in the root layout of a Next.js app using the App Router. It also demonstrates applying a Bootstrap class to the body element.

LANGUAGE: tsx
CODE:
import 'bootstrap/dist/css/bootstrap.css'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className="container">{children}</body>
    </html>
  )
}

----------------------------------------

TITLE: Streaming with React Suspense in Next.js JavaScript
DESCRIPTION: Implementation of streaming content using React Suspense in a Next.js dashboard page. Shows how to wrap multiple components with Suspense boundaries for progressive loading with fallback states.

LANGUAGE: javascript
CODE:
import { Suspense } from 'react'
import { PostFeed, Weather } from './Components'

export default function Posts() {
  return (
    <section>
      <Suspense fallback={<p>Loading feed...</p>}>
        <PostFeed />
      </Suspense>
      <Suspense fallback={<p>Loading weather...</p>}>
        <Weather />
      </Suspense>
    </section>
  )
}

----------------------------------------

TITLE: Authentication Redirect with useRouter in Next.js
DESCRIPTION: Example of implementing authentication-based navigation using useRouter and useEffect.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react'
import { useRouter } from 'next/router'

const useUser = () => ({ user: null, loading: false })

export default function Page() {
  const { user, loading } = useUser()
  const router = useRouter()

  useEffect(() => {
    if (!(user || loading)) {
      router.push('/login')
    }
  }, [user, loading])

  return <p>Redirecting...</p>
}

----------------------------------------

TITLE: Basic Custom Document Implementation in Next.js
DESCRIPTION: Basic setup for a custom Document component that provides the minimal required structure for a Next.js page. Includes Html, Head, Main, and NextScript components from next/document.

LANGUAGE: tsx
CODE:
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}

LANGUAGE: jsx
CODE:
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}

----------------------------------------

TITLE: Responsive Image Example with next/image in Next.js
DESCRIPTION: This snippet demonstrates how to create a responsive image that fills the width of its container while maintaining aspect ratio.

LANGUAGE: jsx
CODE:
import Image from 'next/image'
import mountains from '../public/mountains.jpg'

export default function Responsive() {
  return (
    <div style={{ display: 'flex', flexDirection: 'column' }}>
      <Image
        alt="Mountains"
        src={mountains}
        sizes="100vw"
        style={{
          width: '100%',
          height: 'auto',
        }}
      />
    </div>
  )
}

----------------------------------------

TITLE: Implementing Basic Dynamic Route in Next.js
DESCRIPTION: Example of implementing a dynamic route for blog posts using Next.js. The code demonstrates how to access the dynamic segment parameter using the useRouter hook to display the slug value from the URL.

LANGUAGE: jsx
CODE:
import { useRouter } from 'next/router'

export default function Page() {
  const router = useRouter()
  return <p>Post: {router.query.slug}</p>
}

----------------------------------------

TITLE: Caching Data with ORM or Database in Next.js
DESCRIPTION: Illustrates how to use the unstable_cache API to cache database query results. The getPosts function is wrapped with unstable_cache to cache the result for 1 hour and add a cache tag for invalidation.

LANGUAGE: tsx
CODE:
import { unstable_cache } from 'next/cache'
import { db, posts } from '@/lib/db'

const getPosts = unstable_cache(
  async () => {
    return await db.select().from(posts)
  },
  ['posts'],
  { revalidate: 3600, tags: ['posts'] }
)

export default async function Page() {
  const allPosts = await getPosts()

  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}

----------------------------------------

TITLE: Removing Unnecessary getInitialProps from Custom Next.js App
DESCRIPTION: Example of an unnecessary getInitialProps implementation in a custom App component that should be removed. This pattern forces server-side rendering for all pages and disables automatic static optimization.

LANGUAGE: jsx
CODE:
class MyApp extends App {
  // Remove me, I do nothing!
  static async getInitialProps({ Component, ctx }) {
    let pageProps = {}

    if (Component.getInitialProps) {
      pageProps = await Component.getInitialProps(ctx)
    }

    return { pageProps }
  }

  render() {
    // ...
  }
}

----------------------------------------

TITLE: Implementing Static Route Handler in Next.js
DESCRIPTION: This example shows how to create a static Route Handler that generates a JSON response during the build process. It demonstrates the use of the GET method to return static data.

LANGUAGE: typescript
CODE:
export async function GET() {
  return Response.json({ name: 'Lee' })
}

----------------------------------------

TITLE: Using useActionState for Error Handling in React Components (JavaScript)
DESCRIPTION: This snippet shows how to use the useActionState hook to manage Server Action state and display error messages in a React component. It includes form submission and error display logic.

LANGUAGE: javascript
CODE:
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

const initialState = {
  message: '',
}

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      <label htmlFor="email">Email</label>
      <input type="text" id="email" name="email" required />
      {/* ... */}
      <p aria-live="polite">{state?.message}</p>
      <button disabled={pending}>Sign up</button>
    </form>
  )
}

----------------------------------------

TITLE: Implementing Loading UI in Next.js with JavaScript
DESCRIPTION: Example of creating a loading state using loading.js file in Next.js dashboard route. The component returns a LoadingSkeleton component that serves as a fallback UI while the main content loads.

LANGUAGE: javascript
CODE:
export default function Loading() {
  // You can add any UI inside Loading, including a Skeleton.
  return <LoadingSkeleton />
}

----------------------------------------

TITLE: Configuring StaleTimes in Next.js Config
DESCRIPTION: Configuration example showing how to set custom revalidation times for static and dynamic routes in Next.js client-side router cache. The static property applies to statically generated pages and prefetched routes, while dynamic property applies to non-static pages.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    staleTimes: {
      dynamic: 30,
      static: 180,
    },
  },
}

module.exports = nextConfig

----------------------------------------

TITLE: Revalidating a Layout Path in Next.js
DESCRIPTION: This example illustrates revalidating a layout path, which affects all pages using that layout. It includes an example with a dynamic segment and a route group, using the 'layout' type parameter.

LANGUAGE: ts
CODE:
import { revalidatePath } from 'next/cache'
revalidatePath('/blog/[slug]', 'layout')
// or with route groups
revalidatePath('/(main)/post/[slug]', 'layout')

----------------------------------------

TITLE: Using Worker Strategy with Next.js Script Component
DESCRIPTION: Demonstration of using the experimental worker strategy to offload script execution to a web worker using Partytown integration.

LANGUAGE: typescript
CODE:
import Script from 'next/script'

export default function Home() {
  return (
    <>
      <Script src="https://example.com/script.js" strategy="worker" />
    </>
  )
}

----------------------------------------

TITLE: Creating a Root Layout in Next.js
DESCRIPTION: This snippet shows how to define a root layout in Next.js, which is used to set up the HTML and body tags. It's placed in the root app directory and applies to all pages.

LANGUAGE: tsx
CODE:
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}

LANGUAGE: jsx
CODE:
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}

----------------------------------------

TITLE: Creating Web App Manifest in Next.js
DESCRIPTION: Defines the manifest.ts/js file to configure PWA metadata including app name, icons, and display properties. This enables home screen installation and customizes the PWA appearance.

LANGUAGE: typescript
CODE:
import type { MetadataRoute } from 'next'

export default function manifest(): MetadataRoute.Manifest {
  return {
    name: 'Next.js PWA',
    short_name: 'NextPWA',
    description: 'A Progressive Web App built with Next.js',
    start_url: '/',
    display: 'standalone',
    background_color: '#ffffff',
    theme_color: '#000000',
    icons: [
      {
        src: '/icon-192x192.png',
        sizes: '192x192',
        type: 'image/png',
      },
      {
        src: '/icon-512x512.png',
        sizes: '512x512',
        type: 'image/png',
      },
    ],
  }
}

----------------------------------------

TITLE: Implementing getStaticPaths and getStaticProps in TypeScript
DESCRIPTION: This snippet demonstrates how to implement getStaticPaths and getStaticProps for a dynamic route in Next.js using TypeScript. It fetches data from the GitHub API and generates static paths.

LANGUAGE: typescript
CODE:
import type {
  InferGetStaticPropsType,
  GetStaticProps,
  GetStaticPaths,
} from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getStaticPaths = (async () => {
  return {
    paths: [
      {
        params: {
          name: 'next.js',
        },
      }, // See the "paths" section below
    ],
    fallback: true, // false or "blocking"
  }
}) satisfies GetStaticPaths

export const getStaticProps = (async (context) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}) satisfies GetStaticProps<{
  repo: Repo
}>

export default function Page({
  repo,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  return repo.stargazers_count
}

----------------------------------------

TITLE: Theme-Aware Image Component Implementation
DESCRIPTION: TypeScript/JSX implementation of a theme-aware image component that switches between light and dark mode images.

LANGUAGE: tsx
CODE:
import styles from './theme-image.module.css'
import Image, { ImageProps } from 'next/image'

type Props = Omit<ImageProps, 'src' | 'priority' | 'loading'> & {
  srcLight: string
  srcDark: string
}

const ThemeImage = (props: Props) => {
  const { srcLight, srcDark, ...rest } = props

  return (
    <>
      <Image {...rest} src={srcLight} className={styles.imgLight} />
      <Image {...rest} src={srcDark} className={styles.imgDark} />
    </>
  )
}

----------------------------------------

TITLE: Next.js Middleware Cookie Handling
DESCRIPTION: Example demonstrating how to handle cookies in middleware using the RequestCookies and ResponseCookies APIs.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  let cookie = request.cookies.get('nextjs')
  const allCookies = request.cookies.getAll()
  
  const response = NextResponse.next()
  response.cookies.set('vercel', 'fast')
  
  return response
}

----------------------------------------

TITLE: Using next/script in pages/_app.js in Next.js
DESCRIPTION: This code snippet demonstrates how to properly use the next/script component in pages/_app.js for global scripts in Next.js. It imports the Script component, wraps the main Component with it, and sets the script source.

LANGUAGE: jsx
CODE:
import Script from 'next/script'

function MyApp({ Component, pageProps }) {
  return (
    <>
      <Script src="/my-script.js" />
      <Component {...pageProps} />
    </>
  )
}

export default MyApp

----------------------------------------

TITLE: Implementing getInitialProps in Next.js (TypeScript)
DESCRIPTION: Demonstrates how to use getInitialProps to fetch data from the GitHub API and pass it as props to a Next.js page component. The function runs on both server-side and client-side during page transitions.

LANGUAGE: typescript
CODE:
import { NextPageContext } from 'next'

Page.getInitialProps = async (ctx: NextPageContext) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const json = await res.json()
  return { stars: json.stargazers_count }
}

export default function Page({ stars }: { stars: number }) {
  return stars
}

----------------------------------------

TITLE: Implementing Intercepting Routes Directory Structure
DESCRIPTION: Example showing the directory structure for intercepting routes using the (..) convention. The notation allows matching segments at different levels: (.) for same level, (..) for one level above, (..)(..) for two levels above, and (...) for root app directory.

LANGUAGE: plaintext
CODE:
app/
  feed/
    page.js
    (..)photo/
      [...id]/
        page.js
  photo/
    [...id]/
      page.js

----------------------------------------

TITLE: On-demand Revalidation with revalidateTag in Next.js
DESCRIPTION: This example demonstrates how to use revalidateTag for more granular control over cache invalidation in Next.js, including tagging fetch calls and using unstable_cache.

LANGUAGE: tsx
CODE:
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog', {
    next: { tags: ['posts'] },
  })
  const posts = await data.json()
  // ...
}

import { unstable_cache } from 'next/cache'
import { db, posts } from '@/lib/db'

const getCachedPosts = unstable_cache(
  async () => {
    return await db.select().from(posts)
  },
  ['posts'],
  { revalidate: 3600, tags: ['posts'] }
)

export default async function Page() {
  const posts = getCachedPosts()
  // ...
}

'use server'

import { revalidateTag } from 'next/cache'

export async function createPost() {
  // Invalidate all data tagged with 'posts' in the cache
  revalidateTag('posts')
}

----------------------------------------

TITLE: Dynamic Metadata Generation with generateMetadata
DESCRIPTION: Demonstrates how to generate dynamic metadata based on route parameters and external data

LANGUAGE: tsx
CODE:
import type { Metadata, ResolvingMetadata } from 'next'

type Props = {
  params: Promise<{ id: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}

export async function generateMetadata(
  { params, searchParams }: Props,
  parent: ResolvingMetadata
): Promise<Metadata> {
  const { id } = await params
  const product = await fetch(`https://.../${id}`).then((res) => res.json())
  
  const previousImages = (await parent).openGraph?.images || []

  return {
    title: product.title,
    openGraph: {
      images: ['/some-specific-page-image.jpg', ...previousImages],
    },
  }
}

----------------------------------------

TITLE: Client-Side Data Fetching in Next.js
DESCRIPTION: Demonstrates client-side data fetching using useState and useEffect hooks. The component fetches blog posts and renders them in an unordered list, with a loading state while data is being fetched.

LANGUAGE: tsx
CODE:
'use client'

import { useState, useEffect } from 'react'

export function Posts() {
  const [posts, setPosts] = useState(null)

  useEffect(() => {
    async function fetchPosts() {
      const res = await fetch('https://api.vercel.app/blog')
      const data = await res.json()
      setPosts(data)
    }
    fetchPosts()
  }, [])

  if (!posts) return <div>Loading...</div>

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}

----------------------------------------

TITLE: Next.js Component Hierarchy Example
DESCRIPTION: The standard component hierarchy for special files in a Next.js route segment. Components render in a specific order: layout, template, error boundaries, loading boundaries, and page content.

LANGUAGE: tsx
CODE:
- layout.js
- template.js
- error.js (React error boundary)
- loading.js (React suspense boundary)
- not-found.js (React error boundary)
- page.js or nested layout.js

----------------------------------------

TITLE: Creating Server Functions in Next.js
DESCRIPTION: Demonstrates how to create Server Functions in a separate file using the 'use server' directive. This approach allows for exporting multiple Server Functions that can be used across the application.

LANGUAGE: typescript
CODE:
'use server'

export async function createPost(formData: FormData) {}

export async function deletePost(formData: FormData) {}

LANGUAGE: javascript
CODE:
'use server'

export async function createPost(formData) {}

export async function deletePost(formData) {}

----------------------------------------

TITLE: Defining Client-Server Boundary with React Directives
DESCRIPTION: Shows the usage of React's "use client" and "use server" directives to define rendering boundaries between client and server code in Next.js applications.

LANGUAGE: javascript
CODE:
"use client"
"use server"

----------------------------------------

TITLE: Creating Tab Groups with Parallel Routes
DESCRIPTION: Implementation of a layout component for creating tabbed navigation within a parallel route slot.

LANGUAGE: typescript
CODE:
import Link from 'next/link'

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <>
      <nav>
        <Link href="/page-views">Page Views</Link>
        <Link href="/visitors">Visitors</Link>
      </nav>
      <div>{children}</div>
    </>
  )
}

----------------------------------------

TITLE: Implementing Correct getStaticProps Return Value in Next.js (TypeScript)
DESCRIPTION: This snippet demonstrates the correct shape for the return value of getStaticProps in a Next.js page. It shows the function signature with TypeScript types and the expected return object structure.

LANGUAGE: tsx
CODE:
export async function getStaticProps(ctx: {
    params?: ParsedUrlQuery;
    preview?: boolean;
    previewData?: PreviewData;
}) {
    return {
        props: { [key: string]: any }
    }
}

----------------------------------------

TITLE: Implementing a Layout with Navigation Links in Next.js
DESCRIPTION: This code shows how to implement a layout that includes navigation links in a Next.js application. It demonstrates the usage of a Client Component (NavLinks) within a Server Component (Layout).

LANGUAGE: typescript
CODE:
import { NavLinks } from '@/app/ui/nav-links'

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <NavLinks />
        <main>{children}</main>
      </body>
    </html>
  )
}

LANGUAGE: javascript
CODE:
import { NavLinks } from '@/app/ui/nav-links'

export default function Layout({ children }) {
  return (
    <html lang="en">
      <body>
        <NavLinks />
        <main>{children}</main>
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Using useParams in Next.js Client Component (JavaScript)
DESCRIPTION: This snippet shows how to use the useParams hook in a Next.js Client Component with JavaScript. It demonstrates accessing dynamic route parameters without type annotations.

LANGUAGE: jsx
CODE:
'use client'

import { useParams } from 'next/navigation'

export default function ExampleClientComponent() {
  const params = useParams()

  // Route -> /shop/[tag]/[item]
  // URL -> /shop/shoes/nike-air-max-97
  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }
  console.log(params)

  return '...'
}

----------------------------------------

TITLE: Configuring Advanced Matcher Options in Next.js Middleware
DESCRIPTION: This snippet shows how to configure advanced matcher options for Next.js middleware. It demonstrates using complex path specifications, including conditions based on headers, query parameters, and cookies.

LANGUAGE: javascript
CODE:
export const config = {
  matcher: [
    {
      source: '/api/*',
      regexp: '^/api/(.*)',
      locale: false,
      has: [
        { type: 'header', key: 'Authorization', value: 'Bearer Token' },
        { type: 'query', key: 'userId', value: '123' },
      ],
      missing: [{ type: 'cookie', key: 'session', value: 'active' }],
    },
  ],
}

----------------------------------------

TITLE: Basic Environment Variables Setup in Next.js
DESCRIPTION: Example of basic environment variable configuration in a .env file, showing database connection credentials setup.

LANGUAGE: txt
CODE:
DB_HOST=localhost
DB_USER=myuser
DB_PASS=mypassword

----------------------------------------

TITLE: Handling Not Found Errors (TypeScript)
DESCRIPTION: This snippet shows how to use the notFound function to handle 404 errors in a dynamic route, and how to create a custom not-found page.

LANGUAGE: typescript
CODE:
import { getPostBySlug } from '@/lib/posts'

export default async function Page({ params }: { params: { slug: string } }) {
  const { slug } = await params
  const post = getPostBySlug(slug)

  if (!post) {
    notFound()
  }

  return <div>{post.title}</div>
}

LANGUAGE: typescript
CODE:
export default function NotFound() {
  return <div>404 - Page Not Found</div>
}

----------------------------------------

TITLE: Implementing Loading UI in Next.js with TypeScript
DESCRIPTION: Example of creating a loading state using loading.tsx file in Next.js dashboard route. The component returns a LoadingSkeleton component that serves as a fallback UI while the main content loads.

LANGUAGE: typescript
CODE:
export default function Loading() {
  // You can add any UI inside Loading, including a Skeleton.
  return <LoadingSkeleton />
}

----------------------------------------

TITLE: Opting Out of Data Caching in Next.js
DESCRIPTION: Demonstrates how to opt out of caching for specific fetch requests by using the cache: 'no-store' option.

LANGUAGE: javascript
CODE:
let data = await fetch('https://api.vercel.app/blog', { cache: 'no-store' })

----------------------------------------

TITLE: Using notFound Function in Next.js Route Handler
DESCRIPTION: This snippet demonstrates how to use the notFound function in a Next.js route handler. It fetches user data and calls notFound() if the user is not found, which renders the not-found file for the route segment.

LANGUAGE: jsx
CODE:
import { notFound } from 'next/navigation'

async function fetchUser(id) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({ params }) {
  const { id } = await params
  const user = await fetchUser(id)

  if (!user) {
    notFound()
  }

  // ...
}

----------------------------------------

TITLE: Optimizing Layout with Server and Client Components
DESCRIPTION: Shows how to optimize a layout by keeping it as a Server Component and moving interactive elements to Client Components.

LANGUAGE: typescript
CODE:
// SearchBar is a Client Component
import SearchBar from './searchbar'
// Logo is a Server Component
import Logo from './logo'

// Layout is a Server Component by default
export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <>
      <nav>
        <Logo />
        <SearchBar />
      </nav>
      <main>{children}</main>
    </>
  )
}

----------------------------------------

TITLE: Adding a Custom Loader with Babel in Next.js Webpack Config
DESCRIPTION: This example shows how to add a custom loader that depends on babel-loader in the Next.js webpack configuration. It specifically demonstrates adding an MDX loader using the @mdx-js/loader package.

LANGUAGE: javascript
CODE:
module.exports = {
  webpack: (config, options) => {
    config.module.rules.push({
      test: /\.mdx/,
      use: [
        options.defaultLoaders.babel,
        {
          loader: '@mdx-js/loader',
          options: pluginOptions.options,
        },
      ],
    })

    return config
  },
}

----------------------------------------

TITLE: Generating Open Graph Images with External Data in Next.js (JavaScript)
DESCRIPTION: This advanced example shows how to use generateImageMetadata with external data to create multiple Open Graph images for a dynamic route in JavaScript. It includes async functions and data fetching.

LANGUAGE: javascript
CODE:
import { ImageResponse } from 'next/og'
import { getCaptionForImage, getOGImages } from '@/app/utils/images'

export async function generateImageMetadata({ params }) {
  const images = await getOGImages(params.id)

  return images.map((image, idx) => ({
    id: idx,
    size: { width: 1200, height: 600 },
    alt: image.text,
    contentType: 'image/png',
  }))
}

export default async function Image({ params, id }) {
  const productId = (await params).id
  const imageId = id
  const text = await getCaptionForImage(productId, imageId)

  return new ImageResponse(
    (
      <div
        style={
          {
            // ...
          }
        }
      >
        {text}
      </div>
    )
  )
}

----------------------------------------

TITLE: Next.js Middleware CORS Configuration
DESCRIPTION: Example showing how to configure CORS headers in middleware for handling cross-origin requests.

LANGUAGE: typescript
CODE:
import { NextRequest, NextResponse } from 'next/server'

const allowedOrigins = ['https://acme.com', 'https://my-app.org']

const corsOptions = {
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
}

export function middleware(request: NextRequest) {
  const origin = request.headers.get('origin') ?? ''
  const isAllowedOrigin = allowedOrigins.includes(origin)
  
  if (request.method === 'OPTIONS') {
    const preflightHeaders = {
      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),
      ...corsOptions,
    }
    return NextResponse.json({}, { headers: preflightHeaders })
  }

  const response = NextResponse.next()
  if (isAllowedOrigin) {
    response.headers.set('Access-Control-Allow-Origin', origin)
  }
  return response
}

----------------------------------------

TITLE: Implementing Secure Server Actions with Authentication
DESCRIPTION: Demonstrates how to implement secure server actions with proper authentication and authorization checks.

LANGUAGE: tsx
CODE:
'use server'

import { db } from '@/lib/db' // Your database client
import { authenticate } from '@/lib/auth' // Your authentication library

export async function createUser(
  data: { name: string; email: string },
  token: string
) {
  const user = authenticate(token)
  if (!user) {
    throw new Error('Unauthorized')
  }
  const newUser = await db.user.create({ data })
  return newUser
}

LANGUAGE: jsx
CODE:
'use server'

import { db } from '@/lib/db' // Your database client
import { authenticate } from '@/lib/auth' // Your authentication library

export async function createUser(data, token) {
  const user = authenticate(token)
  if (!user) {
    throw new Error('Unauthorized')
  }
  const newUser = await db.user.create({ data })
  return newUser
}

----------------------------------------

TITLE: Creating a Home Page in Next.js App Router
DESCRIPTION: Create a basic home page (page.tsx) in the app directory for a Next.js application using the App Router.

LANGUAGE: tsx
CODE:
export default function Page() {
  return <h1>Hello, Next.js!</h1>
}

----------------------------------------

TITLE: Basic Form Component Usage in Next.js
DESCRIPTION: Demonstrates basic implementation of the Next.js Form component for handling search queries. The component automatically appends input values to the URL as search parameters.

LANGUAGE: typescript
CODE:
import Form from 'next/form'

export default function Page() {
  return (
    <Form action="/search">
      {/* On submission, the input value will be appended to
          the URL, e.g. /search?query=abc */}
      <input name="query" />
      <button type="submit">Submit</button>
    </Form>
  )
}

LANGUAGE: javascript
CODE:
import Form from 'next/form'

export default function Search() {
  return (
    <Form action="/search">
      {/* On submission, the input value will be appended to
          the URL, e.g. /search?query=abc */}
      <input name="query" />
      <button type="submit">Submit</button>
    </Form>
  )
}

----------------------------------------

TITLE: Enabling Draft Mode in Next.js Route Handler
DESCRIPTION: This example shows how to create a Route Handler to enable Draft Mode using the draftMode function. It demonstrates importing the function, calling the enable() method, and returning a response.

LANGUAGE: typescript
CODE:
import { draftMode } from 'next/headers'

export async function GET(request: Request) {
  const draft = await draftMode()
  draft.enable()
  return new Response('Draft mode is enabled')
}

LANGUAGE: javascript
CODE:
import { draftMode } from 'next/headers'

export async function GET(request) {
  const draft = await draftMode()
  draft.enable()
  return new Response('Draft mode is enabled')
}

----------------------------------------

TITLE: Basic useRouter Implementation in Next.js Client Component
DESCRIPTION: Demonstrates the basic usage of useRouter hook to handle programmatic navigation in a client component. Shows how to import the hook and use the push method to navigate to a new route.

LANGUAGE: typescript
CODE:
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/dashboard')}>
      Dashboard
    </button>
  )
}

LANGUAGE: javascript
CODE:
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/dashboard')}>
      Dashboard
    </button>
  )
}

----------------------------------------

TITLE: Correct Usage of cookies() with Cached Function (Next.js)
DESCRIPTION: This code snippet shows the correct way to use cookies with a cached function. The cookie access is moved outside the cached function, and the result is passed as an argument, making it part of the cache key.

LANGUAGE: jsx
CODE:
import { cookies } from 'next/headers'

async function getExampleData(isLoggedIn) {
  "use cache"
  ...
}

export default async function Page() {
  const isLoggedIn = (await cookies()).has('token')
  const data = await getExampleData(isLoggedIn)
  return ...
}

----------------------------------------

TITLE: Creating a Server Component for Video Embedding in Next.js
DESCRIPTION: This snippet demonstrates creating a Server Component in Next.js that fetches a video source URL and renders an iframe for embedding. It's designed to work with external video platforms.

LANGUAGE: jsx
CODE:
export default async function VideoComponent() {
  const src = await getVideoSrc()

  return <iframe src={src} allowFullScreen />
}

----------------------------------------

TITLE: Creating Server Functions for Client Components in Next.js
DESCRIPTION: Shows how to create server functions that can be imported and used in Client Components. Implements a fetchUsers function for database queries.

LANGUAGE: tsx
CODE:
'use server'
import { db } from '@/lib/db' // Your database client

export async function fetchUsers() {
  const users = await db.user.findMany()
  return users
}

LANGUAGE: jsx
CODE:
'use server'
import { db } from '@/lib/db' // Your database client

export async function fetchUsers() {
  const users = await db.user.findMany()
  return users
}

----------------------------------------

TITLE: Blog Page Component with External Data Dependencies
DESCRIPTION: Example of a blog page component that requires external data for rendering. Shows the basic structure before implementing data fetching.

LANGUAGE: jsx
CODE:
export default function Blog({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li>{post.title}</li>
      ))}
    </ul>
  )
}

----------------------------------------

TITLE: Implementing Per-Page Layouts
DESCRIPTION: Shows how to implement page-specific layouts using the getLayout pattern, allowing for nested layouts and maintaining state between page transitions.

LANGUAGE: jsx
CODE:
import Layout from '../components/layout'
import NestedLayout from '../components/nested-layout'

export default function Page() {
  return (
    /** Your content */
  )
}

Page.getLayout = function getLayout(page) {
  return (
    <Layout>
      <NestedLayout>{page}</NestedLayout>
    </Layout>
  )
}

----------------------------------------

TITLE: Creating an Error Boundary Component (JavaScript)
DESCRIPTION: This snippet shows how to create an error boundary component in JavaScript to handle uncaught exceptions. It includes error logging and a reset mechanism.

LANGUAGE: javascript
CODE:
'use client' // Error boundaries must be Client Components

import { useEffect } from 'react'

export default function Error({ error, reset }) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}

----------------------------------------

TITLE: Server-side Form Validation with Zod in Next.js API Route
DESCRIPTION: This snippet shows how to perform server-side form validation using the Zod library in a Next.js API Route. It demonstrates schema creation and parsing of request body data.

LANGUAGE: typescript
CODE:
import type { NextApiRequest, NextApiResponse } from 'next'
import { z } from 'zod'

const schema = z.object({
  // ...
})

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const parsed = schema.parse(req.body)
  // ...
}

LANGUAGE: javascript
CODE:
import { z } from 'zod'

const schema = z.object({
  // ...
})

export default async function handler(req, res) {
  const parsed = schema.parse(req.body)
  // ...
}

----------------------------------------

TITLE: Fetching Data with getServerSideProps in Next.js (TypeScript)
DESCRIPTION: This snippet demonstrates how to use getServerSideProps to fetch data from an external API and pass it to a Next.js page component as props. It includes type definitions and uses TypeScript.

LANGUAGE: typescript
CODE:
import type { InferGetServerSidePropsType, GetServerSideProps } from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getServerSideProps = (async () => {
  // Fetch data from external API
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo: Repo = await res.json()
  // Pass data to the page via props
  return { props: { repo } }
}) satisfies GetServerSideProps<{ repo: Repo }>

export default function Page({
  repo,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <main>
      <p>{repo.stargazers_count}</p>
    </main>
  )
}

----------------------------------------

TITLE: Implementing Conditional Custom Components in Next.js with MDX Remote
DESCRIPTION: TypeScript code demonstrating how to conditionally load custom components in MDX using next/dynamic and next-mdx-remote. This approach optimizes performance by only loading heavy components when necessary.

LANGUAGE: typescript
CODE:
import dynamic from "next/dynamic";
import Test from "@/components/test";
import { MDXRemote, type MDXRemoteProps } from 'next-mdx-remote/rsc'

const SomeHeavyComponent = dynamic(() => import("../component/SomeHeavyComponent"));

const defaultComponents = { Test };

export function CustomMDX(props: MDXRemoteProps) {
  const componentNames = [
    /<SomeHeavyComponent/.test(props.source as string) ? "SomeHeavyComponent" : "",
  ].filter(Boolean);

  const components = {
    ...defaultComponents,
    SomeHeavyComponent: componentNames.includes("SomeHeavyComponent")
      ? SomeHeavyComponent
      : () => null,
  };

  return <MDXRemote {...props} components={components} />;
}

----------------------------------------

TITLE: Phase-Specific Next.js Configuration
DESCRIPTION: Demonstrates how to use different configurations based on the current phase of the Next.js application. It imports phase constants from 'next/constants' for comparison.

LANGUAGE: javascript
CODE:
// @ts-check

const { PHASE_DEVELOPMENT_SERVER } = require('next/constants')

module.exports = (phase, { defaultConfig }) => {
  if (phase === PHASE_DEVELOPMENT_SERVER) {
    return {
      /* development only config options here */
    }
  }

  return {
    /* config options for all phases except development here */
  }
}

----------------------------------------

TITLE: Fetching Data in Server Components
DESCRIPTION: Example of a data fetching function intended for use in Server Components, using environment variables to securely access API keys.

LANGUAGE: typescript
CODE:
export async function getData() {
  const res = await fetch('https://external-service.com/data', {
    headers: {
      authorization: process.env.API_KEY,
    },
  })

  return res.json()
}

----------------------------------------

TITLE: Generating Static Params for Dynamic Routes in Next.js
DESCRIPTION: Illustrates how to use generateStaticParams to specify which dynamic routes should be statically generated at build time.

LANGUAGE: javascript
CODE:
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}

----------------------------------------

TITLE: Handling Errors in Server Components (TypeScript)
DESCRIPTION: This snippet demonstrates error handling in a Server Component by checking the response status and returning an error message if the fetch operation fails.

LANGUAGE: typescript
CODE:
export default async function Page() {
  const res = await fetch(`https://...`)
  const data = await res.json()

  if (!res.ok) {
    return 'There was an error.'
  }

  return '...'
}

----------------------------------------

TITLE: Implementing Root Layout with User Provider in Next.js
DESCRIPTION: Shows how to set up a root layout component that initializes user data fetching and provides it through a context provider. Demonstrates proper Promise handling without awaiting to enable streaming.

LANGUAGE: typescript
CODE:
import { UserProvider } from './user-provider'
import { getUser } from './user' // some server-side function

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  let userPromise = getUser() // do NOT await

  return (
    <html lang="en">
      <body>
        <UserProvider userPromise={userPromise}>{children}</UserProvider>
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Implementing revalidateTag in a Route Handler (TypeScript)
DESCRIPTION: This snippet demonstrates how to use revalidateTag in a Next.js route handler. It extracts a tag from the request URL and revalidates it, then returns a JSON response.

LANGUAGE: ts
CODE:
import type { NextRequest } from 'next/server'
import { revalidateTag } from 'next/cache'

export async function GET(request: NextRequest) {
  const tag = request.nextUrl.searchParams.get('tag')
  revalidateTag(tag)
  return Response.json({ revalidated: true, now: Date.now() })
}

----------------------------------------

TITLE: Implementing Basic Middleware in Next.js (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a basic middleware function in TypeScript for Next.js. It includes a redirect example and shows how to configure path matching.

LANGUAGE: typescript
CODE:
import { NextResponse, NextRequest } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request: NextRequest) {
  return NextResponse.redirect(new URL('/home', request.url))
}

export const config = {
  matcher: '/about/:path*',
}

----------------------------------------

TITLE: Implementing a Template in Next.js
DESCRIPTION: This snippet shows how to create a template in Next.js. Templates are similar to layouts but create new instances for each child on navigation, allowing for effects to be re-synchronized and state to be reset in Client Components.

LANGUAGE: typescript
CODE:
export default function Template({ children }: { children: React.ReactNode }) {
  return <div>{children}</div>
}

LANGUAGE: javascript
CODE:
export default function Template({ children }) {
  return <div>{children}</div>
}

----------------------------------------

TITLE: Creating Basic Next.js Page
DESCRIPTION: Demonstrates the simplest form of a Next.js page component exported from the pages directory. Shows how to create a basic About page that will be accessible at /about.

LANGUAGE: jsx
CODE:
export default function About() {
  return <div>About</div>
}

----------------------------------------

TITLE: Advanced Usage with TypeScript
DESCRIPTION: Demonstrates advanced implementation of unstable_cache with TypeScript, including cache tags and revalidation options. Shows usage with params and type definitions.

LANGUAGE: tsx
CODE:
import { unstable_cache } from 'next/cache'

export default async function Page({
  params,
}: {
  params: Promise<{ userId: string }>
}) {
  const { userId } = await params
  const getCachedUser = unstable_cache(
    async () => {
      return { id: userId }
    },
    [userId], // add the user ID to the cache key
    {
      tags: ['users'],
      revalidate: 60,
    }
  )

  //...
}

----------------------------------------

TITLE: Using Remote Images with next/image in Next.js
DESCRIPTION: This example demonstrates how to use remote images with the Image component, including manually specifying width and height attributes.

LANGUAGE: jsx
CODE:
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="https://s3.amazonaws.com/my-bucket/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}

----------------------------------------

TITLE: Programmatic Navigation with router.push in Next.js
DESCRIPTION: Demonstrates client-side navigation using router.push with both static and dynamic routes.

LANGUAGE: jsx
CODE:
import { useRouter } from 'next/router'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/post/abc')}>
      Click me
    </button>
  )
}

----------------------------------------

TITLE: Importing with Absolute Path in Next.js (TSX)
DESCRIPTION: This snippet shows how to use absolute imports in a Next.js TypeScript project after configuring the baseUrl option. It demonstrates a cleaner and shorter import syntax.

LANGUAGE: tsx
CODE:
import Button from "components/button";

----------------------------------------

TITLE: Basic Usage of unstable_cache in NextJS
DESCRIPTION: Demonstrates basic implementation of unstable_cache to cache user data fetching operations. Shows how to wrap an async function with unstable_cache for caching results.

LANGUAGE: jsx
CODE:
import { getUser } from './data';
import { unstable_cache } from 'next/cache';

const getCachedUser = unstable_cache(
  async (id) => getUser(id),
  ['my-app-user']
);

export default async function Component({ userID }) {
  const user = await getCachedUser(userID);
  ...
}

----------------------------------------

TITLE: Implementing Avatar Component with Next.js Image
DESCRIPTION: Example showing how to create reusable Avatar components using Next.js Image component to display images from the public directory. Demonstrates proper path referencing and component composition.

LANGUAGE: jsx
CODE:
import Image from 'next/image'

export function Avatar({ id, alt }) {
  return <Image src={`/avatars/${id}.png`} alt={alt} width="64" height="64" />
}

export function AvatarOfMe() {
  return <Avatar id="me" alt="A portrait of me" />
}

----------------------------------------

TITLE: Correct usage of Next.js Link component
DESCRIPTION: This snippet shows the correct way to create an internal link in a Next.js application using the Link component from 'next/link'. This approach enables client-side route transitions and provides a single-page app experience.

LANGUAGE: jsx
CODE:
import Link from 'next/link'

function Home() {
  return (
    <div>
      <Link href="/about">About Us</Link>
    </div>
  )
}

export default Home

----------------------------------------

TITLE: Implementing Custom App Component in Next.js (JavaScript)
DESCRIPTION: This snippet shows how to create a custom App component in Next.js using JavaScript. It demonstrates the basic structure and how to handle the Component and pageProps.

LANGUAGE: javascript
CODE:
export default function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />
}

----------------------------------------

TITLE: Implementing Client-side Data Fetching with SWR in React
DESCRIPTION: This snippet shows how to use the SWR library for client-side data fetching in React. It demonstrates the simplified API of SWR, which handles caching, revalidation, and error states automatically.

LANGUAGE: jsx
CODE:
import useSWR from 'swr'

const fetcher = (...args) => fetch(...args).then((res) => res.json())

function Profile() {
  const { data, error } = useSWR('/api/profile-data', fetcher)

  if (error) return <div>Failed to load</div>
  if (!data) return <div>Loading...</div>

  return (
    <div>
      <h1>{data.name}</h1>
      <p>{data.bio}</p>
    </div>
  )
}

----------------------------------------

TITLE: Creating JSON Response with NextResponse in JavaScript
DESCRIPTION: Shows how to create a JSON response with a custom status code using NextResponse.json() method in a Next.js API route using JavaScript.

LANGUAGE: javascript
CODE:
import { NextResponse } from 'next/server'

export async function GET(request) {
  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })
}

----------------------------------------

TITLE: Basic Next.js Page Component Implementation
DESCRIPTION: Demonstrates the basic structure of a Next.js page component with params and searchParams props. Shows both TypeScript and JavaScript implementations.

LANGUAGE: tsx
CODE:
export default function Page({
  params,
  searchParams,
}: {
  params: Promise<{ slug: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  return <h1>My Page</h1>
}

LANGUAGE: jsx
CODE:
export default function Page({ params, searchParams }) {
  return <h1>My Page</h1>
}

----------------------------------------

TITLE: Cloudinary Image Loader Implementation
DESCRIPTION: Custom image loader function for Cloudinary. It generates a URL with parameters for format, crop, width, and quality.

LANGUAGE: javascript
CODE:
export default function cloudinaryLoader({ src, width, quality }) {
  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]
  return `https://example.com/${params.join(',')}${src}`
}

----------------------------------------

TITLE: Configuring Multiple Font Files for a Single Font Family
DESCRIPTION: Demonstrates how to configure multiple font files for a single font family using the next/font/local module. It specifies different files for various weights and styles.

LANGUAGE: js
CODE:
const roboto = localFont({
  src: [
    {
      path: './Roboto-Regular.woff2',
      weight: '400',
      style: 'normal',
    },
    {
      path: './Roboto-Italic.woff2',
      weight: '400',
      style: 'italic',
    },
    {
      path: './Roboto-Bold.woff2',
      weight: '700',
      style: 'normal',
    },
    {
      path: './Roboto-BoldItalic.woff2',
      weight: '700',
      style: 'italic',
    },
  ],
})

----------------------------------------

TITLE: Setting Cookies in Next.js Server Action
DESCRIPTION: Demonstrates different ways to set cookies using the set() method in a Next.js Server Action.

LANGUAGE: typescript
CODE:
'use server'

import { cookies } from 'next/headers'

export async function create(data) {
  const cookieStore = await cookies()

  cookieStore.set('name', 'lee')
  // or
  cookieStore.set('name', 'lee', { secure: true })
  // or
  cookieStore.set({
    name: 'name',
    value: 'lee',
    httpOnly: true,
    path: '/',
  })
}

----------------------------------------

TITLE: Handling Dynamic Route Parameters in Next.js Route Handlers
DESCRIPTION: This example shows how to access dynamic route parameters in a Next.js route handler. The parameters are available through the context object as a promise that resolves to an object containing the dynamic route parameters.

LANGUAGE: typescript
CODE:
export async function GET(
  request: Request,
  { params }: { params: Promise<{ team: string }> }
) {
  const { team } = await params
}

LANGUAGE: javascript
CODE:
export async function GET(request, { params }) {
  const { team } = await params
}

----------------------------------------

TITLE: Rendering Required Document Components in Next.js (TSX)
DESCRIPTION: This code snippet demonstrates how to correctly implement a custom _document file in Next.js. It imports and renders all the required Document components: Html, Head, Main, and NextScript.

LANGUAGE: tsx
CODE:
import Document, { Html, Head, Main, NextScript } from 'next/document'

export default class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head />
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    )
  }
}

----------------------------------------

TITLE: Server Actions for Push Notifications
DESCRIPTION: Server-side actions for managing push notification subscriptions and sending notifications using web-push library. Includes subscription management and notification dispatch functionality.

LANGUAGE: typescript
CODE:
'use server'

import webpush from 'web-push'

webpush.setVapidDetails(
  '<mailto:your-email@example.com>',
  process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!,
  process.env.VAPID_PRIVATE_KEY!
)

let subscription: PushSubscription | null = null

export async function subscribeUser(sub: PushSubscription) {
  subscription = sub
  return { success: true }
}

export async function unsubscribeUser() {
  subscription = null
  return { success: true }
}

export async function sendNotification(message: string) {
  if (!subscription) {
    throw new Error('No subscription available')
  }

  try {
    await webpush.sendNotification(
      subscription,
      JSON.stringify({
        title: 'Test Notification',
        body: message,
        icon: '/icon.png',
      })
    )
    return { success: true }
  } catch (error) {
    console.error('Error sending push notification:', error)
    return { success: false, error: 'Failed to send notification' }
  }
}

----------------------------------------

TITLE: Complete Dynamic Post Page Implementation
DESCRIPTION: A full example showing how to implement both getStaticPaths and getStaticProps for a dynamic post page, including data fetching for specific posts.

LANGUAGE: jsx
CODE:
export default function Post({ post }) {
  // Render post...
}

export async function getStaticPaths() {
  // ...
}

// This also gets called at build time
export async function getStaticProps({ params }) {
  // params contains the post `id`.
  // If the route is like /posts/1, then params.id is 1
  const res = await fetch(`https://.../posts/${params.id}`)
  const post = await res.json()

  // Pass post data to the page via props
  return { props: { post } }
}

----------------------------------------

TITLE: Using usePathname Hook in Next.js Client Component
DESCRIPTION: This snippet demonstrates how to use the usePathname hook in a Next.js Client Component to read the current URL's pathname. It imports the hook from 'next/navigation' and renders the current pathname in a paragraph element.

LANGUAGE: tsx
CODE:
'use client'

import { usePathname } from 'next/navigation'

export default function ExampleClientComponent() {
  const pathname = usePathname()
  return <p>Current pathname: {pathname}</p>
}

LANGUAGE: jsx
CODE:
'use client'

import { usePathname } from 'next/navigation'

export default function ExampleClientComponent() {
  const pathname = usePathname()
  return <p>Current pathname: {pathname}</p>
}

----------------------------------------

TITLE: BeforeInteractive Script Strategy in Next.js Layout
DESCRIPTION: Example showing how to implement the beforeInteractive loading strategy in a root layout file. This strategy loads scripts before any page hydration occurs.

LANGUAGE: tsx
CODE:
import Script from 'next/script'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        {children}
        <Script
          src="https://example.com/script.js"
          strategy="beforeInteractive"
        />
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Using suppressHydrationWarning Attribute in React
DESCRIPTION: This snippet demonstrates the use of the suppressHydrationWarning attribute in React to silence hydration mismatch warnings for specific elements. This is useful for content that will inevitably differ between server and client rendering, such as timestamps.

LANGUAGE: jsx
CODE:
<time datetime="2016-10-25" suppressHydrationWarning />

----------------------------------------

TITLE: Configuring Rewrites with Header, Cookie, and Query Matching in Next.js
DESCRIPTION: This snippet shows how to use the 'has' and 'missing' fields to match rewrites based on headers, cookies, and query parameters. It demonstrates various matching scenarios and how to use captured values in the destination.

LANGUAGE: javascript
CODE:
module.exports = {
  async rewrites() {
    return [
      {
        source: '/:path*',
        has: [
          {
            type: 'header',
            key: 'x-rewrite-me',
          },
        ],
        destination: '/another-page',
      },
      {
        source: '/:path*',
        missing: [
          {
            type: 'header',
            key: 'x-rewrite-me',
          },
        ],
        destination: '/another-page',
      },
      {
        source: '/specific/:path*',
        has: [
          {
            type: 'query',
            key: 'page',
            value: 'home',
          },
          {
            type: 'cookie',
            key: 'authorized',
            value: 'true',
          },
        ],
        destination: '/:path*/home',
      },
      {
        source: '/:path*',
        has: [
          {
            type: 'header',
            key: 'x-authorized',
            value: '(?<authorized>yes|true)',
          },
        ],
        destination: '/home?authorized=:authorized',
      },
      {
        source: '/:path*',
        has: [
          {
            type: 'host',
            value: 'example.com',
          },
        ],
        destination: '/another-page',
      },
    ]
  },
}

----------------------------------------

TITLE: Implementing ISR with App Router in Next.js
DESCRIPTION: This code snippet demonstrates how to implement Incremental Static Regeneration using the App Router in Next.js. It includes revalidation settings, dynamic params, and static path generation.

LANGUAGE: tsx
CODE:
interface Post {
  id: string
  title: string
  content: string
}

// Next.js will invalidate the cache when a
// request comes in, at most once every 60 seconds.
export const revalidate = 60

// We'll prerender only the params from `generateStaticParams` at build time.
// If a request comes in for a path that hasn't been generated,
// Next.js will server-render the page on-demand.
export const dynamicParams = true // or false, to 404 on unknown paths

export async function generateStaticParams() {
  const posts: Post[] = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )
  return posts.map((post) => ({
    id: String(post.id),
  }))
}

export default async function Page({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const post: Post = await fetch(`https://api.vercel.app/blog/${id}`).then(
    (res) => res.json()
  )
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </main>
  )
}

----------------------------------------

TITLE: Creating JSON Response with NextResponse in TypeScript
DESCRIPTION: Demonstrates how to create a JSON response with a custom status code using NextResponse.json() method in a Next.js API route.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'

export async function GET(request: Request) {
  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })
}

----------------------------------------

TITLE: Sending Web Vitals Results to Google Analytics
DESCRIPTION: This code example shows how to send Web Vitals results to Google Analytics using the gtag function. It formats the metric values and sets appropriate parameters for event tracking.

LANGUAGE: js
CODE:
useReportWebVitals((metric) => {
  // Use `window.gtag` if you initialized Google Analytics as this example:
  // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics
  window.gtag('event', metric.name, {
    value: Math.round(
      metric.name === 'CLS' ? metric.value * 1000 : metric.value
    ), // values must be integers
    event_label: metric.id, // id unique to current page load
    non_interaction: true, // avoids affecting bounce rate.
  })
})

----------------------------------------

TITLE: Implementing Multiple HTTP Methods in Next.js Route Handlers
DESCRIPTION: This snippet shows how to implement various HTTP methods (GET, HEAD, POST, PUT, DELETE, PATCH, OPTIONS) in Next.js route handlers. Each method receives a Request object as a parameter.

LANGUAGE: typescript
CODE:
export async function GET(request: Request) {}

export async function HEAD(request: Request) {}

export async function POST(request: Request) {}

export async function PUT(request: Request) {}

export async function DELETE(request: Request) {}

export async function PATCH(request: Request) {}

// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and set the appropriate Response `Allow` header depending on the other methods defined in the Route Handler.
export async function OPTIONS(request: Request) {}

LANGUAGE: javascript
CODE:
export async function GET(request) {}

export async function HEAD(request) {}

export async function POST(request) {}

export async function PUT(request) {}

export async function DELETE(request) {}

export async function PATCH(request) {}

// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and set the appropriate Response `Allow` header depending on the other methods defined in the Route Handler.
export async function OPTIONS(request) {}

----------------------------------------

TITLE: JSON-LD Implementation in Next.js
DESCRIPTION: Example of implementing structured data using JSON-LD in Next.js pages, including TypeScript support with schema-dts package.

LANGUAGE: tsx
CODE:
import { Product, WithContext } from 'schema-dts'

const jsonLd: WithContext<Product> = {
  '@context': 'https://schema.org',
  '@type': 'Product',
  name: 'Next.js Sticker',
  image: 'https://nextjs.org/imgs/sticker.png',
  description: 'Dynamic at the speed of static.',
}

----------------------------------------

TITLE: Sending Web Vitals to Analytics
DESCRIPTION: Example showing how to send Web Vitals metrics to an external analytics endpoint using navigator.sendBeacon or fetch API.

LANGUAGE: javascript
CODE:
useReportWebVitals((metric) => {
  const body = JSON.stringify(metric)
  const url = 'https://example.com/analytics'

  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.
  if (navigator.sendBeacon) {
    navigator.sendBeacon(url, body)
  } else {
    fetch(url, { body, method: 'POST', keepalive: true })
  }
})

----------------------------------------

TITLE: Memoizing Fetch Requests in Next.js
DESCRIPTION: Demonstrates how fetch requests are automatically memoized in Next.js, allowing multiple calls to the same function while only executing it once during a render pass.

LANGUAGE: typescript
CODE:
async function getItem() {
  // The `fetch` function is automatically memoized and the result
  // is cached
  const res = await fetch('https://.../item/1')
  return res.json()
}

// This function is called twice, but only executed the first time
const item = await getItem() // cache MISS

// The second call could be anywhere in your route
const item = await getItem() // cache HIT

----------------------------------------

TITLE: Implementing CSP with Nonces using Next.js Middleware
DESCRIPTION: Sets up Content Security Policy headers with dynamic nonces using Next.js Middleware. Generates a unique nonce for each request and applies it to CSP directives for scripts and styles.

LANGUAGE: typescript
CODE:
import { NextRequest, NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  const nonce = Buffer.from(crypto.randomUUID()).toString('base64')
  const cspHeader = `
    default-src 'self';
    script-src 'self' 'nonce-${nonce}' 'strict-dynamic';
    style-src 'self' 'nonce-${nonce}';
    img-src 'self' blob: data:;
    font-src 'self';
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
    upgrade-insecure-requests;
`
  const contentSecurityPolicyHeaderValue = cspHeader
    .replace(/\s{2,}/g, ' ')
    .trim()

  const requestHeaders = new Headers(request.headers)
  requestHeaders.set('x-nonce', nonce)

  requestHeaders.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )

  const response = NextResponse.next({
    request: {
      headers: requestHeaders,
    },
  })
  response.headers.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )

  return response
}

----------------------------------------

TITLE: Configuring Basic Rewrites in Next.js
DESCRIPTION: This snippet demonstrates how to set up a basic rewrite in the next.config.js file. It shows how to map an incoming request path to a different destination path.

LANGUAGE: javascript
CODE:
module.exports = {
  async rewrites() {
    return [
      {
        source: '/about',
        destination: '/',
      },
    ]
  },
}

----------------------------------------

TITLE: Lazy Loading Client Components with next/dynamic
DESCRIPTION: Demonstrates how to lazy load multiple Client Components with different loading strategies including immediate loading, conditional loading, and client-side only rendering.

LANGUAGE: jsx
CODE:
'use client'

import { useState } from 'react'
import dynamic from 'next/dynamic'

// Client Components:
const ComponentA = dynamic(() => import('../components/A'))
const ComponentB = dynamic(() => import('../components/B'))
const ComponentC = dynamic(() => import('../components/C'), { ssr: false })

export default function ClientComponentExample() {
  const [showMore, setShowMore] = useState(false)

  return (
    <div>
      {/* Load immediately, but in a separate client bundle */}
      <ComponentA />

      {/* Load on demand, only when/if the condition is met */}
      {showMore && <ComponentB />}
      <button onClick={() => setShowMore(!showMore)}>Toggle</button>

      {/* Load only on the client side */}
      <ComponentC />
    </div>
  )
}

----------------------------------------

TITLE: Push Notification Manager Component
DESCRIPTION: React component that handles push notification subscription management, including service worker registration and notification permissions. Provides UI for subscribing, unsubscribing and sending test notifications.

LANGUAGE: typescript
CODE:
function PushNotificationManager() {
  const [isSupported, setIsSupported] = useState(false)
  const [subscription, setSubscription] = useState<PushSubscription | null>(null)
  const [message, setMessage] = useState('')

  useEffect(() => {
    if ('serviceWorker' in navigator && 'PushManager' in window) {
      setIsSupported(true)
      registerServiceWorker()
    }
  }, [])

  async function registerServiceWorker() {
    const registration = await navigator.serviceWorker.register('/sw.js', {
      scope: '/',
      updateViaCache: 'none',
    })
    const sub = await registration.pushManager.getSubscription()
    setSubscription(sub)
  }

  async function subscribeToPush() {
    const registration = await navigator.serviceWorker.ready
    const sub = await registration.pushManager.subscribe({
      userVisibleOnly: true,
      applicationServerKey: urlBase64ToUint8Array(
        process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY!
      ),
    })
    setSubscription(sub)
    const serializedSub = JSON.parse(JSON.stringify(sub))
    await subscribeUser(serializedSub)
  }

  async function unsubscribeFromPush() {
    await subscription?.unsubscribe()
    setSubscription(null)
    await unsubscribeUser()
  }

  async function sendTestNotification() {
    if (subscription) {
      await sendNotification(message)
      setMessage('')
    }
  }

  if (!isSupported) {
    return <p>Push notifications are not supported in this browser.</p>
  }

  return (
    <div>
      <h3>Push Notifications</h3>
      {subscription ? (
        <>
          <p>You are subscribed to push notifications.</p>
          <button onClick={unsubscribeFromPush}>Unsubscribe</button>
          <input
            type="text"
            placeholder="Enter notification message"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
          />
          <button onClick={sendTestNotification}>Send Test</button>
        </>
      ) : (
        <>
          <p>You are not subscribed to push notifications.</p>
          <button onClick={subscribeToPush}>Subscribe</button>
        </>
      )}
    </div>
  )
}

----------------------------------------

TITLE: Disabling HTTP Keep-Alive in Next.js Configuration
DESCRIPTION: This code snippet demonstrates how to disable HTTP Keep-Alive for all server-side fetch() calls in Next.js. It uses the httpAgentOptions configuration in the next.config.js file.

LANGUAGE: javascript
CODE:
module.exports = {
  httpAgentOptions: {
    keepAlive: false,
  },
}

----------------------------------------

TITLE: Integrating Google Maps Embed in Next.js with @next/third-parties
DESCRIPTION: This code shows how to use the GoogleMapsEmbed component from @next/third-parties/google to add a Google Maps embed to a Next.js page. It requires an API key and allows customization of height, width, mode, and location query.

LANGUAGE: javascript
CODE:
import { GoogleMapsEmbed } from '@next/third-parties/google'

export default function Page() {
  return (
    <GoogleMapsEmbed
      apiKey="XYZ"
      height={200}
      width="100%"
      mode="place"
      q="Brooklyn+Bridge,New+York,NY"
    />
  )
}

----------------------------------------

TITLE: Configuring exportPathMap in Next.js
DESCRIPTION: Example configuration for custom page export mapping in next.config.js. This setup defines custom routes for static HTML generation, including parameterized post pages with query parameters.

LANGUAGE: javascript
CODE:
module.exports = {
  exportPathMap: async function (
    defaultPathMap,
    { dev, dir, outDir, distDir, buildId }
  ) {
    return {
      '/': { page: '/' },
      '/about': { page: '/about' },
      '/p/hello-nextjs': { page: '/post', query: { title: 'hello-nextjs' } },
      '/p/learn-nextjs': { page: '/post', query: { title: 'learn-nextjs' } },
      '/p/deploy-nextjs': { page: '/post', query: { title: 'deploy-nextjs' } },
    }
  },
}

----------------------------------------

TITLE: Revalidating a Specific URL in Next.js
DESCRIPTION: This example demonstrates how to use revalidatePath to revalidate a specific URL. It imports the function from 'next/cache' and calls it with a specific blog post URL.

LANGUAGE: ts
CODE:
import { revalidatePath } from 'next/cache'
revalidatePath('/blog/post-1')

----------------------------------------

TITLE: Configuring Time-based Revalidation in Next.js
DESCRIPTION: Shows how to set up time-based revalidation for fetched data using the next.revalidate option, which determines how often the data should be refreshed.

LANGUAGE: javascript
CODE:
// Revalidate at most every hour
fetch('https://...', { next: { revalidate: 3600 } })

----------------------------------------

TITLE: Enabling React Strict Mode in Next.js Configuration
DESCRIPTION: This code snippet shows how to enable React Strict Mode globally in a Next.js application by modifying the next.config.js file. It sets the reactStrictMode option to true, which applies Strict Mode to the entire application.

LANGUAGE: javascript
CODE:
module.exports = {
  reactStrictMode: true,
}

----------------------------------------

TITLE: Basic Head Component Usage in Next.js
DESCRIPTION: Demonstrates the basic implementation of the Next.js Head component to add a title tag to a page. Shows how to import and use the Head component within a React functional component.

LANGUAGE: jsx
CODE:
import Head from 'next/head'

function IndexPage() {
  return (
    <div>
      <Head>
        <title>My page title</title>
      </Head>
      <p>Hello world!</p>
    </div>
  )
}

export default IndexPage

----------------------------------------

TITLE: Implementing Required HTML Tags in NextJS Root Layout
DESCRIPTION: Demonstrates how to properly structure a NextJS root layout component by adding the required HTML and body tags. The example shows the correction from a bare children render to a properly structured HTML document with appropriate TypeScript typing.

LANGUAGE: diff
CODE:
export default function Layout({ children }: { children: React.ReactNode }) {
-  return children
+  return (
+    <html>
+      <body>
+        {children}
+      </body>
+    </html>
+  )
}

----------------------------------------

TITLE: Defining MDX Components in JavaScript
DESCRIPTION: This snippet demonstrates how to define MDX Components using JavaScript in a Next.js project. It exports a useMDXComponents function that takes and returns components, allowing for customization of MDX rendering.

LANGUAGE: javascript
CODE:
export function useMDXComponents(components) {
  return {
    ...components,
  }
}

----------------------------------------

TITLE: Initializing Next.js Project Interactively with create-next-app
DESCRIPTION: Commands to create a new Next.js project interactively using npm, yarn, pnpm, or bun. The user will be prompted for project details during setup.

LANGUAGE: bash
CODE:
npx create-next-app@latest
# or
yarn create next-app
# or
pnpm create next-app
# or
bunx create-next-app

----------------------------------------

TITLE: Global CSS Configuration in Next.js
DESCRIPTION: Implementation of global CSS styles in Next.js, showing how to define global styles and import them in the root layout component.

LANGUAGE: css
CODE:
body {
  padding: 20px 20px 60px;
  max-width: 680px;
  margin: 0 auto;
}

LANGUAGE: tsx
CODE:
import './global.css'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}

----------------------------------------

TITLE: Continuing Routing with NextResponse in TypeScript
DESCRIPTION: Demonstrates how to use NextResponse.next() method in middleware to continue routing without modifying the request or response.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'

return NextResponse.next()

----------------------------------------

TITLE: Revalidating a Page Path in Next.js
DESCRIPTION: This snippet shows how to revalidate a page path, including an example with a dynamic segment and a route group. It uses the 'page' type parameter to specify revalidation of a page file.

LANGUAGE: ts
CODE:
import { revalidatePath } from 'next/cache'
revalidatePath('/blog/[slug]', 'page')
// or with route groups
revalidatePath('/(main)/blog/[slug]', 'page')

----------------------------------------

TITLE: Background Image Example with next/image in Next.js
DESCRIPTION: This snippet demonstrates how to use the Image component to create a full-width and full-height background image.

LANGUAGE: jsx
CODE:
import Image from 'next/image'
import mountains from '../public/mountains.jpg'

export default function Background() {
  return (
    <Image
      alt="Mountains"
      src={mountains}
      placeholder="blur"
      quality={100}
      fill
      sizes="100vw"
      style={{
        objectFit: 'cover',
      }}
    />
  )
}

----------------------------------------

TITLE: Enabling Typed Routes in Next.js Configuration
DESCRIPTION: Configuration snippet for enabling experimental support for statically typed links in Next.js. This feature requires the App Router and TypeScript implementation. The configuration is done through the next.config.js file by setting the typedRoutes flag to true in the experimental options.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    typedRoutes: true,
  },
}

module.exports = nextConfig

----------------------------------------

TITLE: Extending Webpack Configuration in Next.js
DESCRIPTION: This snippet demonstrates how to extend the webpack configuration in a Next.js project using the next.config.js file. It shows the structure of the webpack function and the available parameters.

LANGUAGE: javascript
CODE:
module.exports = {
  webpack: (
    config,
    { buildId, dev, isServer, defaultLoaders, nextRuntime, webpack }
  ) => {
    // Important: return the modified config
    return config
  },
}

----------------------------------------

TITLE: Creating an Error Boundary Component (TypeScript)
DESCRIPTION: This snippet shows how to create an error boundary component in TypeScript to handle uncaught exceptions. It includes error logging and a reset mechanism.

LANGUAGE: typescript
CODE:
'use client' // Error boundaries must be Client Components

import { useEffect } from 'react'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}

----------------------------------------

TITLE: Implementing Custom Server in Next.js (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a custom server for a Next.js application using TypeScript. It sets up an HTTP server, handles routing, and integrates with the Next.js app instance.

LANGUAGE: typescript
CODE:
import { createServer } from 'http'
import { parse } from 'url'
import next from 'next'

const port = parseInt(process.env.PORT || '3000', 10)
const dev = process.env.NODE_ENV !== 'production'
const app = next({ dev })
const handle = app.getRequestHandler()

app.prepare().then(() => {
  createServer((req, res) => {
    const parsedUrl = parse(req.url!, true)
    handle(req, res, parsedUrl)
  }).listen(port)

  console.log(
    `> Server listening at http://localhost:${port} as ${
      dev ? 'development' : process.env.NODE_ENV
    }`
  )
})

----------------------------------------

TITLE: Implementing CSR with useEffect in Next.js
DESCRIPTION: Example of client-side data fetching using React's useEffect hook in a Next.js page component. The code demonstrates fetching data from an API endpoint, handling loading states, and error handling.

LANGUAGE: jsx
CODE:
import React, { useState, useEffect } from 'react'

export function Page() {
  const [data, setData] = useState(null)

  useEffect(() => {
    const fetchData = async () => {
      const response = await fetch('https://api.example.com/data')
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      const result = await response.json()
      setData(result)
    }

    fetchData().catch((e) => {
      // handle the error as needed
      console.error('An error occurred while fetching the data: ', e)
    })
  }, [])

  return <p>{data ? `Your data: ${data}` : 'Loading...'}</p>
}

----------------------------------------

TITLE: Configuring Cypress for E2E Testing in Next.js (TypeScript)
DESCRIPTION: This snippet shows the configuration for Cypress E2E testing in a Next.js project using TypeScript.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'cypress'

export default defineConfig({
  e2e: {
    setupNodeEvents(on, config) {},
  },
})

----------------------------------------

TITLE: Redirecting after Server Function Execution in Next.js
DESCRIPTION: Demonstrates how to redirect the user to a different page after performing an update using a Server Function by calling redirect within the function.

LANGUAGE: typescript
CODE:
'use server'

import { redirect } from 'next/navigation'

export async function createPost(formData: FormData) {
  // Update data
  // ...

  redirect('/posts')
}

LANGUAGE: javascript
CODE:
'use server'

import { redirect } from 'next/navigation'

export async function createPost(formData) {
  // Update data
  // ...

  redirect('/posts')
}

----------------------------------------

TITLE: Configuring Styled Components in Next.js
DESCRIPTION: Configuration options for enabling and customizing styled-components compilation in Next.js using the SWC compiler.

LANGUAGE: javascript
CODE:
module.exports = {
  compiler: {
    styledComponents: true,
  },
}

----------------------------------------

TITLE: Example Implementation of getStaticPaths in Next.js
DESCRIPTION: This example shows how to implement `getStaticPaths` with both string and object variants for the 'paths' property. It demonstrates returning multiple paths and setting the 'fallback' property.

LANGUAGE: javascript
CODE:
export async function getStaticPaths() {
  return {
    paths: [
      // String variant:
      '/blog/first-post',
      // Object variant:
      { params: { slug: 'second-post' } },
    ],
    fallback: true,
  }
}

----------------------------------------

TITLE: Configuring Jest for Next.js (TypeScript)
DESCRIPTION: TypeScript configuration file for Jest in a Next.js project, using next/jest for automatic setup.

LANGUAGE: typescript
CODE:
import type { Config } from 'jest'
import nextJest from 'next/jest.js'

const createJestConfig = nextJest({
  dir: './',
})

const config: Config = {
  coverageProvider: 'v8',
  testEnvironment: 'jsdom',
}

export default createJestConfig(config)

----------------------------------------

TITLE: Implementing a Blog Layout with Active Links in Next.js
DESCRIPTION: This snippet demonstrates how to use the BlogNavLink component (which uses useSelectedLayoutSegment) in a blog layout. It creates a list of featured posts with active links in the sidebar.

LANGUAGE: tsx
CODE:
// Import the Client Component into a parent Layout (Server Component)
import { BlogNavLink } from './blog-nav-link'
import getFeaturedPosts from './get-featured-posts'

export default async function Layout({
  children,
}: {
  children: React.ReactNode
}) {
  const featuredPosts = await getFeaturedPosts()
  return (
    <div>
      {featuredPosts.map((post) => (
        <div key={post.id}>
          <BlogNavLink slug={post.slug}>{post.title}</BlogNavLink>
        </div>
      ))}
      <div>{children}</div>
    </div>
  )
}

LANGUAGE: jsx
CODE:
// Import the Client Component into a parent Layout (Server Component)
import { BlogNavLink } from './blog-nav-link'
import getFeaturedPosts from './get-featured-posts'

export default async function Layout({ children }) {
  const featuredPosts = await getFeaturedPosts()
  return (
    <div>
      {featuredPosts.map((post) => (
        <div key={post.id}>
          <BlogNavLink slug={post.slug}>{post.title}</BlogNavLink>
        </div>
      ))}
      <div>{children}</div>
    </div>
  )
}

----------------------------------------

TITLE: Creating a Nested Layout for Blog in Next.js
DESCRIPTION: Demonstrates how to create a nested layout specifically for the /blog route. This layout wraps its children in a section element and can be used to share UI across blog-related pages.

LANGUAGE: typescript
CODE:
export default function BlogLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <section>{children}</section>
}

LANGUAGE: javascript
CODE:
export default function BlogLayout({ children }) {
  return <section>{children}</section>
}

----------------------------------------

TITLE: Generating Open Graph Image with JavaScript in Next.js
DESCRIPTION: This code snippet shows how to generate an Open Graph image dynamically using JavaScript and the ImageResponse API from next/og. It includes metadata exports and a function to create a custom image with text and styling.

LANGUAGE: javascript
CODE:
import { ImageResponse } from 'next/og'
import { readFile } from 'node:fs/promises'
import { join } from 'node:path'

// Image metadata
export const alt = 'About Acme'
export const size = {
  width: 1200,
  height: 630,
}

export const contentType = 'image/png'

// Image generation
export default async function Image() {
  // Font loading, process.cwd() is Next.js project directory
  const interSemiBold = await readFile(
    join(process.cwd(), 'assets/Inter-SemiBold.ttf')
  )

  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        About Acme
      </div>
    ),
    // ImageResponse options
    {
      // For convenience, we can re-use the exported opengraph-image
      // size config to also set the ImageResponse's width and height.
      ...size,
      fonts: [
        {
          name: 'Inter',
          data: interSemiBold,
          style: 'normal',
          weight: 400,
        },
      ],
    }
  )
}

----------------------------------------

TITLE: Configuring Remote Image Patterns in Next.js
DESCRIPTION: This configuration snippet shows how to set up remotePatterns in next.config.js to allow specific remote image sources.

LANGUAGE: javascript
CODE:
module.exports = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 's3.amazonaws.com',
        port: '',
        pathname: '/my-bucket/**',
        search: '',
      },
    ],
  },
}

----------------------------------------

TITLE: Middleware-based Redirect Logic
DESCRIPTION: Example of implementing redirects using Next.js Middleware for authentication checks

LANGUAGE: typescript
CODE:
import { NextResponse, NextRequest } from 'next/server'
import { authenticate } from 'auth-provider'

export function middleware(request: NextRequest) {
  const isAuthenticated = authenticate(request)

  if (isAuthenticated) {
    return NextResponse.next()
  }

  return NextResponse.redirect(new URL('/login', request.url))
}

export const config = {
  matcher: '/dashboard/:path*',
}

----------------------------------------

TITLE: Configuring Styled-Components Registry in Next.js
DESCRIPTION: Implements a style registry component for styled-components in Next.js App Router. Handles style collection and injection during server-side rendering and streaming.

LANGUAGE: typescript
CODE:
'use client'

import React, { useState } from 'react'
import { useServerInsertedHTML } from 'next/navigation'
import { ServerStyleSheet, StyleSheetManager } from 'styled-components'

export default function StyledComponentsRegistry({
  children,
}: {
  children: React.ReactNode
}) {
  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet())

  useServerInsertedHTML(() => {
    const styles = styledComponentsStyleSheet.getStyleElement()
    styledComponentsStyleSheet.instance.clearTag()
    return <>{styles}</>
  })

  if (typeof window !== 'undefined') return <>{children}</>

  return (
    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>
      {children}
    </StyleSheetManager>
  )
}

----------------------------------------

TITLE: Invoking Server Functions in Next.js Client Components
DESCRIPTION: Demonstrates how to invoke Server Functions in Client Components using event handlers like onClick, and updating local state based on the server response.

LANGUAGE: typescript
CODE:
'use client'

import { incrementLike } from './actions'
import { useState } from 'react'

export default function LikeButton({ initialLikes }: { initialLikes: number }) {
  const [likes, setLikes] = useState(initialLikes)

  return (
    <>
      <p>Total Likes: {likes}</p>
      <button
        onClick={async () => {
          const updatedLikes = await incrementLike()
          setLikes(updatedLikes)
        }}
      >
        Like
      </button>
    </>
  )
}

LANGUAGE: javascript
CODE:
'use client'

import { incrementLike } from './actions'
import { useState } from 'react'

export default function LikeButton({ initialLikes }) {
  const [likes, setLikes] = useState(initialLikes)

  return (
    <>
      <p>Total Likes: {likes}</p>
      <button
        onClick={async () => {
          const updatedLikes = await incrementLike()
          setLikes(updatedLikes)
        }}
      >
        Like
      </button>
    </>
  )
}

----------------------------------------

TITLE: Blog Post Frontmatter Configuration in YAML
DESCRIPTION: YAML frontmatter configuration for a Next.js blog post, defining metadata like title, excerpt, images, date and author information. This metadata is used for generating static blog pages.

LANGUAGE: yaml
CODE:
---
title: "Learn How to Pre-render Pages Using Static Generation with Next.js"
excerpt: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Praesent elementum facilisis leo vel fringilla est ullamcorper eget. At imperdiet dui accumsan sit amet nulla facilities morbi tempus."
coverImage: "/assets/blog/hello-world/cover.jpg"
date: "2020-03-16T05:35:07.322Z"
author:
  name: Tim Neutkens
  picture: "/assets/blog/authors/tim.jpeg"
ogImage:
  url: "/assets/blog/hello-world/cover.jpg"
---

----------------------------------------

TITLE: Implementing GET Request Handler in Next.js
DESCRIPTION: This snippet demonstrates how to create a basic GET request handler in Next.js that returns a JSON response with a 'Hello World' message.

LANGUAGE: typescript
CODE:
export async function GET() {
  return Response.json({ message: 'Hello World' })
}

LANGUAGE: javascript
CODE:
export async function GET() {
  return Response.json({ message: 'Hello World' })
}

----------------------------------------

TITLE: Configuring package.json Scripts for Next.js
DESCRIPTION: Add necessary scripts to package.json for development, building, starting, and linting a Next.js application.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  }
}

----------------------------------------

TITLE: Creating Context Providers as Client Components
DESCRIPTION: Demonstrates how to create and use context providers in Next.js by wrapping them in Client Components.

LANGUAGE: typescript
CODE:
'use client'

import { createContext } from 'react'

export const ThemeContext = createContext({})

export default function ThemeProvider({
  children,
}: {
  children: React.ReactNode
}) {
  return <ThemeContext.Provider value="dark">{children}</ThemeContext.Provider>
}

----------------------------------------

TITLE: Implementing Custom Document Component in Next.js
DESCRIPTION: Demonstrates the correct way to import and extend the Document component from next/document within pages/_document.js. This is the only valid location for Document imports to ensure proper application functionality.

LANGUAGE: jsx
CODE:
import Document, { Html, Head, Main, NextScript } from 'next/document'

class MyDocument extends Document {
  //...
}

export default MyDocument

----------------------------------------

TITLE: Handling Script Events in Next.js Client Components
DESCRIPTION: Example of using event handlers with the Script component in a client-side component to execute code after specific script loading events.

LANGUAGE: typescript
CODE:
'use client'

import Script from 'next/script'

export default function Page() {
  return (
    <>
      <Script
        src="https://example.com/script.js"
        onLoad={() => {
          console.log('Script has loaded')
        }}
      />
    </>
  )
}

----------------------------------------

TITLE: Initializing Next.js Configuration in JavaScript
DESCRIPTION: Basic setup for a next.config.js file using JavaScript. It exports a configuration object that can be customized with various options.

LANGUAGE: javascript
CODE:
// @ts-check

/** @type {import('next').NextConfig} */
const nextConfig = {
  /* config options here */
}

module.exports = nextConfig

----------------------------------------

TITLE: Writing a Cypress E2E Test for Next.js Navigation
DESCRIPTION: This snippet shows how to write a Cypress E2E test to check navigation between pages in a Next.js application.

LANGUAGE: javascript
CODE:
describe('Navigation', () => {
  it('should navigate to the about page', () => {
    // Start from the index page
    cy.visit('http://localhost:3000/')

    // Find a link with an href attribute containing "about" and click it
    cy.get('a[href*="about"]').click()

    // The new url should include "/about"
    cy.url().should('include', '/about')

    // The new page should contain an h1 with "About"
    cy.get('h1').contains('About')
  })
})

----------------------------------------

TITLE: Header and Cookie Based Redirects
DESCRIPTION: Complex example showing how to configure redirects based on request headers, cookies, and query parameters using the has and missing conditions.

LANGUAGE: javascript
CODE:
module.exports = {
  async redirects() {
    return [
      {
        source: '/:path((?!another-page$).*)',
        has: [
          {
            type: 'header',
            key: 'x-redirect-me',
          },
        ],
        permanent: false,
        destination: '/another-page',
      }
    ]
  },
}

----------------------------------------

TITLE: Creating Root Layout in App Router
DESCRIPTION: Example of a root layout file (app/layout.tsx) in the new App Router, which replaces _app.js and _document.js from the Pages Router.

LANGUAGE: tsx
CODE:
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}

----------------------------------------

TITLE: Reading files in getStaticProps using process.cwd() in Next.js
DESCRIPTION: This snippet shows how to read files from the filesystem in `getStaticProps` using `process.cwd()` to get the correct file path. It reads blog post files and passes their contents as props to the page component.

LANGUAGE: jsx
CODE:
import { promises as fs } from 'fs'
import path from 'path'

function Blog({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li>
          <h3>{post.filename}</h3>
          <p>{post.content}</p>
        </li>
      ))}
    </ul>
  )
}

export async function getStaticProps() {
  const postsDirectory = path.join(process.cwd(), 'posts')
  const filenames = await fs.readdir(postsDirectory)

  const posts = filenames.map(async (filename) => {
    const filePath = path.join(postsDirectory, filename)
    const fileContents = await fs.readFile(filePath, 'utf8')

    return {
      filename,
      content: fileContents,
    }
  })

  return {
    props: {
      posts: await Promise.all(posts),
    },
  }
}

export default Blog

----------------------------------------

TITLE: Tailwind CSS Integration with next/font
DESCRIPTION: Configuration for integrating next/font with Tailwind CSS using CSS variables.

LANGUAGE: javascript
CODE:
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx}',
    './components/**/*.{js,ts,jsx,tsx}',
    './app/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        sans: ['var(--font-inter)'],
        mono: ['var(--font-roboto-mono)'],
      },
    },
  },
  plugins: [],
}

----------------------------------------

TITLE: Implementing Draft-Aware Data Fetching in Next.js Page
DESCRIPTION: Demonstrates how to implement conditional data fetching based on draft mode status in a Next.js page component.

LANGUAGE: typescript
CODE:
import { draftMode } from 'next/headers'

async function getData() {
  const { isEnabled } = await draftMode()

  const url = isEnabled
    ? 'https://draft.example.com'
    : 'https://production.example.com'

  const res = await fetch(url)

  return res.json()
}

export default async function Page() {
  const { title, desc } = await getData()

  return (
    <main>
      <h1>{title}</h1>
      <p>{desc}</p>
    </main>
  )
}

----------------------------------------

TITLE: Implementing Web Vitals in Pages Router
DESCRIPTION: Example showing how to implement useReportWebVitals hook in Next.js Pages Router _app.js file to track Core Web Vitals metrics.

LANGUAGE: jsx
CODE:
import { useReportWebVitals } from 'next/web-vitals'

function MyApp({ Component, pageProps }) {
  useReportWebVitals((metric) => {
    console.log(metric)
  })

  return <Component {...pageProps} />
}

----------------------------------------

TITLE: Static Route Generation for Multiple Locales
DESCRIPTION: Demonstrates how to generate static routes for multiple locales using generateStaticParams in Next.js root layout.

LANGUAGE: typescript
CODE:
export async function generateStaticParams() {
  return [{ lang: 'en-US' }, { lang: 'de' }]
}

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode
  params: Promise<{ lang: 'en-US' | 'de' }>
}>) {
  return (
    <html lang={(await params).lang}>
      <body>{children}</body>
    </html>
  )
}

----------------------------------------

TITLE: Basic Not Found Page Implementation
DESCRIPTION: Basic implementation of a Not Found page component that displays a custom 404 error message with a link to return home. Available in both TypeScript and JavaScript versions.

LANGUAGE: typescript
CODE:
import Link from 'next/link'

export default function NotFound() {
  return (
    <div>
      <h2>Not Found</h2>
      <p>Could not find requested resource</p>
      <Link href="/">Return Home</Link>
    </div>
  )
}

LANGUAGE: javascript
CODE:
import Link from 'next/link'

export default function NotFound() {
  return (
    <div>
      <h2>Not Found</h2>
      <p>Could not find requested resource</p>
      <Link href="/">Return Home</Link>
    </div>
  )
}

----------------------------------------

TITLE: Generating Static Params for Child Segment Using Parent Params in Next.js
DESCRIPTION: This example illustrates how to generate params for a child segment ([product]) using the params passed from the parent segment's generateStaticParams function. It fetches products based on the category param.

LANGUAGE: tsx
CODE:
// Generate segments for [product] using the `params` passed from
// the parent segment's `generateStaticParams` function
export async function generateStaticParams({
  params: { category },
}: {
  params: { category: string }
}) {
  const products = await fetch(
    `https://.../products?category=${category}`
  ).then((res) => res.json())

  return products.map((product) => ({
    product: product.id,
  }))
}

export default function Page({
  params,
}: {
  params: Promise<{ category: string; product: string }>
}) {
  // ...
}

----------------------------------------

TITLE: Installing Sass Dependencies for Next.js
DESCRIPTION: Command to install the required sass package as a development dependency for Next.js projects.

LANGUAGE: bash
CODE:
npm install --save-dev sass

----------------------------------------

TITLE: Next.js History API Integration - Locale Switcher
DESCRIPTION: Shows how to implement language switching using the History API replaceState method to update the URL path without adding to browser history.

LANGUAGE: typescript
CODE:
'use client'

import { usePathname } from 'next/navigation'

export function LocaleSwitcher() {
  const pathname = usePathname()

  function switchLocale(locale: string) {
    const newPath = `/${locale}${pathname}`
    window.history.replaceState(null, '', newPath)
  }

  return (
    <>
      <button onClick={() => switchLocale('en')}>English</button>
      <button onClick={() => switchLocale('fr')}>French</button>
    </>
  )
}

----------------------------------------

TITLE: Creating a Static Web Manifest in Next.js
DESCRIPTION: This snippet shows how to create a static manifest.json or manifest.webmanifest file in the root of the Next.js app directory. It includes basic properties like name, short_name, description, and start_url.

LANGUAGE: json
CODE:
{
  "name": "My Next.js Application",
  "short_name": "Next.js App",
  "description": "An application built with Next.js",
  "start_url": "/"
  // ...
}

----------------------------------------

TITLE: Implementing Custom App Component in Next.js (TypeScript)
DESCRIPTION: This snippet shows how to create a custom App component in Next.js using TypeScript. It demonstrates the basic structure and how to handle the Component and pageProps.

LANGUAGE: typescript
CODE:
import type { AppProps } from 'next/app'

export default function MyApp({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />
}

----------------------------------------

TITLE: Implementing Navigation E2E Test with Playwright
DESCRIPTION: Playwright test script that verifies navigation between home and about pages, checking URLs and content

LANGUAGE: typescript
CODE:
import { test, expect } from '@playwright/test'

test('should navigate to the about page', async ({ page }) => {
  // Start from the index page (the baseURL is set via the webServer in the playwright.config.ts)
  await page.goto('http://localhost:3000/')
  // Find an element with the text 'About' and click on it
  await page.click('text=About')
  // The new URL should be "/about" (baseURL is used there)
  await expect(page).toHaveURL('http://localhost:3000/about')
  // The new page should contain an h1 with "About"
  await expect(page.locator('h1')).toContainText('About')
})

----------------------------------------

TITLE: Importing Button Component in Next.js MDX
DESCRIPTION: Shows how to import a custom Button component from the components directory and use it within MDX content. The component is rendered with a greeting message and wave emoji.

LANGUAGE: javascript
CODE:
import Button from "../components/button.js";

<Button>👋 Hello</Button>

----------------------------------------

TITLE: Configuring Custom HTTP Headers in Next.js
DESCRIPTION: This snippet demonstrates how to set custom HTTP headers for specific routes in a Next.js application using the `headers` function in next.config.js. It includes examples of setting multiple headers for a single route.

LANGUAGE: javascript
CODE:
module.exports = {
  async headers() {
    return [
      {
        source: '/about',
        headers: [
          {
            key: 'x-custom-header',
            value: 'my custom header value',
          },
          {
            key: 'x-another-custom-header',
            value: 'my other custom header value',
          },
        ],
      },
    ]
  },
}

----------------------------------------

TITLE: Implementing beforeInteractive Script in Next.js Pages Router
DESCRIPTION: Example demonstrating correct implementation of a beforeInteractive script in pages/_document.js using the Pages Router. This setup ensures the script is loaded globally for all pages.

LANGUAGE: jsx
CODE:
import { Html, Head, Main, NextScript } from 'next/document'
import Script from 'next/script'

export default function Document() {
  return (
    <Html>
      <Head />
      <body>
        <Main />
        <NextScript />
        <Script
          src="https://example.com/script.js"
          strategy="beforeInteractive"
        ></Script>
      </body>
    </Html>
  )
}

----------------------------------------

TITLE: Implementing getInitialProps in Next.js (JavaScript)
DESCRIPTION: Shows how to use getInitialProps to fetch data from the GitHub API and pass it as props to a Next.js page component in JavaScript. The function runs on both server-side and client-side during page transitions.

LANGUAGE: javascript
CODE:
Page.getInitialProps = async (ctx) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const json = await res.json()
  return { stars: json.stargazers_count }
}

export default function Page({ stars }) {
  return stars
}

----------------------------------------

TITLE: Fetching Data with TypeScript in Next.js App Router
DESCRIPTION: Example of type-safe data fetching in a Next.js page component using async/await with TypeScript. Demonstrates how to fetch and return non-serialized data.

LANGUAGE: tsx
CODE:
async function getData() {
  const res = await fetch('https://api.example.com/...')
  // The return value is *not* serialized
  // You can return Date, Map, Set, etc.
  return res.json()
}

export default async function Page() {
  const name = await getData()

  return '...'
}

----------------------------------------

TITLE: Implementing Convex Query Function in TypeScript
DESCRIPTION: Example of a query function that takes numeric and string arguments, demonstrating database querying with Convex. Shows argument validation and async database operations returning collected documents.

LANGUAGE: typescript
CODE:
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  args: {
    first: v.number(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const documents = await ctx.db.query("tablename").collect();
    console.log(args.first, args.second);
    return documents;
  },
});

----------------------------------------

TITLE: Customizing Next.js Babel Presets
DESCRIPTION: Advanced Babel configuration showing how to customize the next/babel preset options. Demonstrates configuration of preset-env, transform-runtime, styled-jsx, and class-properties within the Next.js Babel preset.

LANGUAGE: json
CODE:
{
  "presets": [
    [
      "next/babel",
      {
        "preset-env": {},
        "transform-runtime": {},
        "styled-jsx": {},
        "class-properties": {}
      }
    ]
  ],
  "plugins": []
}

----------------------------------------

TITLE: Using Server Functions in Client Components
DESCRIPTION: Demonstrates how to import and use server functions within a Client Component using the use client directive.

LANGUAGE: tsx
CODE:
'use client'
import { fetchUsers } from '../actions'

export default function MyButton() {
  return <button onClick={() => fetchUsers()}>Fetch Users</button>
}

LANGUAGE: jsx
CODE:
'use client'
import { fetchUsers } from '../actions'

export default function MyButton() {
  return <button onClick={() => fetchUsers()}>Fetch Users</button>
}

----------------------------------------

TITLE: Creating Next.js Blog Project with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js blog project using the 'create-next-app' package. It specifies the 'blog' example and names the project 'my-blog'.

LANGUAGE: bash
CODE:
pnpm create next-app --example blog my-blog

----------------------------------------

TITLE: Using After Function with Request APIs in Next.js Route Handler
DESCRIPTION: Shows how to use the after function in combination with Next.js request APIs (cookies and headers) within a Route Handler for post-response logging and analytics.

LANGUAGE: typescript
CODE:
import { after } from 'next/server'
import { cookies, headers } from 'next/headers'
import { logUserAction } from '@/app/utils'

export async function POST(request: Request) {
  // Perform mutation
  // ...

  // Log user activity for analytics
  after(async () => {
    const userAgent = (await headers().get('user-agent')) || 'unknown'
    const sessionCookie =
      (await cookies().get('session-id'))?.value || 'anonymous'

    logUserAction({ sessionCookie, userAgent })
  })

  return new Response(JSON.stringify({ status: 'success' }), {
    status: 200,
    headers: { 'Content-Type': 'application/json' },
  })
}

----------------------------------------

TITLE: Responding to Route Changes with usePathname in Next.js
DESCRIPTION: This example shows how to use usePathname along with useSearchParams and useEffect to perform actions in response to route changes in a Next.js Client Component. It demonstrates tracking both pathname and search parameters changes.

LANGUAGE: tsx
CODE:
'use client'

import { usePathname, useSearchParams } from 'next/navigation'

function ExampleClientComponent() {
  const pathname = usePathname()
  const searchParams = useSearchParams()
  useEffect(() => {
    // Do something here...
  }, [pathname, searchParams])
}

LANGUAGE: jsx
CODE:
'use client'

import { usePathname, useSearchParams } from 'next/navigation'

function ExampleClientComponent() {
  const pathname = usePathname()
  const searchParams = useSearchParams()
  useEffect(() => {
    // Do something here...
  }, [pathname, searchParams])
}

----------------------------------------

TITLE: Using useEffect for Client-Side Rendering in Next.js
DESCRIPTION: This snippet demonstrates how to use the useEffect hook to render different content on the client-side, preventing hydration mismatches. It uses useState to track whether the code is running on the client and updates the rendered content accordingly.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react'

export default function App() {
  const [isClient, setIsClient] = useState(false)

  useEffect(() => {
    setIsClient(true)
  }, [])

  return <h1>{isClient ? 'This is never prerendered' : 'Prerendered'}</h1>
}

----------------------------------------

TITLE: Implementing Redirects in getServerSideProps
DESCRIPTION: Example showing how to implement redirects within getServerSideProps based on data conditions.

LANGUAGE: javascript
CODE:
export async function getServerSideProps(context) {
  const res = await fetch(`https://.../data`)
  const data = await res.json()

  if (!data) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }
  }

  return {
    props: {}, // will be passed to the page component as props
  }
}

----------------------------------------

TITLE: Implementing Global Error Handler in Next.js (JavaScript)
DESCRIPTION: Creates a global error boundary component for handling errors at the root level of a Next.js application. JavaScript version that includes required HTML and body tags for global error handling.

LANGUAGE: jsx
CODE:
'use client' // Error boundaries must be Client Components

export default function GlobalError({ error, reset }) {
  return (
    // global-error must include html and body tags
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Reading Headers in Next.js TypeScript Server Component
DESCRIPTION: Demonstrates how to import and use the headers function to access request headers in a Next.js Server Component using TypeScript. Shows accessing the user-agent header as an example.

LANGUAGE: typescript
CODE:
import { headers } from 'next/headers'

export default async function Page() {
  const headersList = await headers()
  const userAgent = headersList.get('user-agent')
}

----------------------------------------

TITLE: Adding Jest test scripts to package.json
DESCRIPTION: JSON snippet to add Jest test scripts to the package.json file for running tests.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "test": "jest",
    "test:watch": "jest --watch"
  }
}

----------------------------------------

TITLE: Router Events Implementation with Navigation Hooks
DESCRIPTION: Shows how to implement router event listening using usePathname and useSearchParams hooks. This pattern replaces the router.events from the Pages Router.

LANGUAGE: javascript
CODE:
'use client'

import { useEffect } from 'react'
import { usePathname, useSearchParams } from 'next/navigation'

export function NavigationEvents() {
  const pathname = usePathname()
  const searchParams = useSearchParams()

  useEffect(() => {
    const url = `${pathname}?${searchParams}`
    console.log(url)
    // You can now use the current URL
    // ...
  }, [pathname, searchParams])

  return '...'
}

----------------------------------------

TITLE: Reading Headers in Next.js JavaScript Server Component
DESCRIPTION: Demonstrates how to import and use the headers function to access request headers in a Next.js Server Component using JavaScript. Shows accessing the user-agent header as an example.

LANGUAGE: javascript
CODE:
import { headers } from 'next/headers'

export default async function Page() {
  const headersList = await headers()
  const userAgent = headersList.get('user-agent')
}

----------------------------------------

TITLE: Creating a basic Jest test for Next.js component
DESCRIPTION: Example Jest test file for a Next.js component, using React Testing Library.

LANGUAGE: jsx
CODE:
import '@testing-library/jest-dom'
import { render, screen } from '@testing-library/react'
import Page from '../app/page'

describe('Page', () => {
  it('renders a heading', () => {
    render(<Page />)

    const heading = screen.getByRole('heading', { level: 1 })

    expect(heading).toBeInTheDocument()
  })
})

----------------------------------------

TITLE: Basic Script Component Usage in Next.js
DESCRIPTION: Basic example of importing and using the Script component to load an external JavaScript file in a Next.js dashboard page.

LANGUAGE: tsx
CODE:
import Script from 'next/script'

export default function Dashboard() {
  return (
    <>
      <Script src="https://example.com/script.js" />
    </>
  )
}

----------------------------------------

TITLE: Router Event Handling in Next.js
DESCRIPTION: Shows how to subscribe to and handle router events in a custom App component.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react'
import { useRouter } from 'next/router'

export default function MyApp({ Component, pageProps }) {
  const router = useRouter()

  useEffect(() => {
    const handleRouteChange = (url, { shallow }) => {
      console.log(
        `App is changing to ${url} ${
          shallow ? 'with' : 'without'
        } shallow routing`
      )
    }

    router.events.on('routeChangeStart', handleRouteChange)

    return () => {
      router.events.off('routeChangeStart', handleRouteChange)
    }
  }, [router])

  return <Component {...pageProps} />
}

----------------------------------------

TITLE: Conditional Header Application in Next.js
DESCRIPTION: This example demonstrates how to conditionally apply headers based on the presence or absence of specific headers, cookies, or query parameters using the 'has' and 'missing' fields in Next.js header configuration.

LANGUAGE: javascript
CODE:
module.exports = {
  async headers() {
    return [
      {
        source: '/:path*',
        has: [
          {
            type: 'header',
            key: 'x-add-header',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: 'hello',
          },
        ],
      },
      {
        source: '/:path*',
        missing: [
          {
            type: 'header',
            key: 'x-no-header',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: 'hello',
          },
        ],
      },
    ]
  },
}

----------------------------------------

TITLE: Installing Next.js Sitemap Project with Yarn
DESCRIPTION: Command to create a new Next.js application with next-sitemap integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-next-sitemap with-next-sitemap-app

----------------------------------------

TITLE: Implementing revalidatePath in a Next.js Route Handler (TypeScript)
DESCRIPTION: This snippet demonstrates using revalidatePath in a route handler. It creates a GET function that accepts a path parameter and revalidates that path, returning a JSON response with the revalidation status.

LANGUAGE: ts
CODE:
import { revalidatePath } from 'next/cache'
import type { NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  const path = request.nextUrl.searchParams.get('path')

  if (path) {
    revalidatePath(path)
    return Response.json({ revalidated: true, now: Date.now() })
  }

  return Response.json({
    revalidated: false,
    now: Date.now(),
    message: 'Missing path to revalidate',
  })
}

----------------------------------------

TITLE: Configuring ESLint with Core Web Vitals in Next.js
DESCRIPTION: Shows how to enable the 'next/core-web-vitals' rule set in the ESLint configuration.

LANGUAGE: javascript
CODE:
import { FlatCompat } from '@eslint/eslintrc'

const compat = new FlatCompat({
  // import.meta.dirname is available after Node.js v20.11.0
  baseDirectory: import.meta.dirname,
})

const eslintConfig = [
  ...compat.config({
    extends: ['next/core-web-vitals'],
  }),
]

export default eslintConfig

----------------------------------------

TITLE: Implementing Global Error Handler in Next.js (TypeScript)
DESCRIPTION: Creates a global error boundary component for handling errors at the root level of a Next.js application. Includes custom HTML and body tags as required for global error handling.

LANGUAGE: tsx
CODE:
'use client' // Error boundaries must be Client Components

export default function GlobalError({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    // global-error must include html and body tags
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Using Convex Mutation in React Component
DESCRIPTION: Shows how to use the Convex mutation function in a React component using the useMutation hook, demonstrating both fire-and-forget and promise-based approaches.

LANGUAGE: typescript
CODE:
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  mutation({ first: "Hello!", second: "me" });
  // OR
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}

----------------------------------------

TITLE: Setting and Reading Cookies in Next.js API Routes
DESCRIPTION: These snippets demonstrate how to set, read, and delete cookies in Next.js API Routes using the response headers and request helpers.

LANGUAGE: typescript
CODE:
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // Setting a cookie
  res.setHeader('Set-Cookie', 'username=lee; Path=/; HttpOnly')
  res.status(200).send('Cookie has been set.')

  // Reading a cookie
  const auth = req.cookies.authorization
  // ...

  // Deleting a cookie
  res.setHeader('Set-Cookie', 'username=; Path=/; HttpOnly; Max-Age=0')
  res.status(200).send('Cookie has been deleted.')
}

LANGUAGE: javascript
CODE:
export default async function handler(req, res) {
  // Setting a cookie
  res.setHeader('Set-Cookie', 'username=lee; Path=/; HttpOnly')
  res.status(200).send('Cookie has been set.')

  // Reading a cookie
  const auth = req.cookies.authorization
  // ...

  // Deleting a cookie
  res.setHeader('Set-Cookie', 'username=; Path=/; HttpOnly; Max-Age=0')
  res.status(200).send('Cookie has been deleted.')
}

----------------------------------------

TITLE: Implementing Inline Server Functions in Next.js
DESCRIPTION: Shows how to use the use server directive inline within a component to create server-side functions.

LANGUAGE: tsx
CODE:
import { db } from '@/lib/db' // Your database client

export default function UserList() {
  async function fetchUsers() {
    'use server'
    const users = await db.user.findMany()
    return users
  }

  return <button onClick={() => fetchUsers()}>Fetch Users</button>
}

LANGUAGE: jsx
CODE:
import { db } from '@/lib/db' // Your database client

export default function UserList() {
  async function fetchUsers() {
    'use server'
    const users = await db.user.findMany()
    return users
  }

  return <button onClick={() => fetchUsers()}>Fetch Users</button>
}

----------------------------------------

TITLE: Implementing Client-side Data Fetching with useEffect in React
DESCRIPTION: This snippet demonstrates how to fetch data on the client side using the useEffect hook in React. It includes state management for data and loading status, as well as conditional rendering based on the fetch results.

LANGUAGE: jsx
CODE:
import { useState, useEffect } from 'react'

function Profile() {
  const [data, setData] = useState(null)
  const [isLoading, setLoading] = useState(true)

  useEffect(() => {
    fetch('/api/profile-data')
      .then((res) => res.json())
      .then((data) => {
        setData(data)
        setLoading(false)
      })
  }, [])

  if (isLoading) return <p>Loading...</p>
  if (!data) return <p>No profile data</p>

  return (
    <div>
      <h1>{data.name}</h1>
      <p>{data.bio}</p>
    </div>
  )
}

----------------------------------------

TITLE: Configuring Google Fonts in Next.js App Router
DESCRIPTION: Example of loading and configuring the Inter variable font from Google Fonts using next/font in a Next.js app router layout file.

LANGUAGE: typescript
CODE:
import { Inter } from 'next/font/google'

// If loading a variable font, you don't need to specify the font weight
const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={inter.className}>
      <body>{children}</body>
    </html>
  )
}

----------------------------------------

TITLE: Creating Next.js App with Grafbase using Yarn
DESCRIPTION: This command uses create-next-app to bootstrap a Next.js application with Grafbase integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-grafbase with-grafbase-app

----------------------------------------

TITLE: Using Client Components in Next.js Layouts
DESCRIPTION: This example illustrates how to incorporate Client Components within a Next.js layout to handle client-side functionality, such as accessing the current pathname.

LANGUAGE: tsx
CODE:
import { ClientComponent } from '@/app/ui/ClientComponent'

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <>
      <ClientComponent />
      {/* Other Layout UI */}
      <main>{children}</main>
    </>
  )
}

LANGUAGE: jsx
CODE:
import { ClientComponent } from '@/app/ui/ClientComponent'

export default function Layout({ children }) {
  return (
    <>
      <ClientComponent />
      {/* Other Layout UI */}
      <main>{children}</main>
    </>
  )
}

----------------------------------------

TITLE: Path Matching with Parameters in Next.js Headers
DESCRIPTION: This snippet shows how to use path matching with parameters in Next.js header configuration. It demonstrates using matched parameters in both header keys and values.

LANGUAGE: javascript
CODE:
module.exports = {
  async headers() {
    return [
      {
        source: '/blog/:slug',
        headers: [
          {
            key: 'x-slug',
            value: ':slug', // Matched parameters can be used in the value
          },
          {
            key: 'x-slug-:slug', // Matched parameters can be used in the key
            value: 'my other custom header value',
          },
        ],
      },
    ]
  },
}

----------------------------------------

TITLE: Implementing getStaticPaths with fallback: false
DESCRIPTION: This example demonstrates how to use getStaticPaths with fallback: false to pre-render a specific set of blog post pages. It fetches post data from an external API and generates static pages for each post.

LANGUAGE: javascript
CODE:
function Post({ post }) {
  // Render post...
}

// This function gets called at build time
export async function getStaticPaths() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // Get the paths we want to pre-render based on posts
  const paths = posts.map((post) => ({
    params: { id: post.id },
  }))

  // We'll pre-render only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: false }
}

// This also gets called at build time
export async function getStaticProps({ params }) {
  // params contains the post `id`.
  // If the route is like /posts/1, then params.id is 1
  const res = await fetch(`https://.../posts/${params.id}`)
  const post = await res.json()

  // Pass post data to the page via props
  return { props: { post } }
}

export default Post

----------------------------------------

TITLE: Bundling WASM in Next.js Middleware (TypeScript)
DESCRIPTION: This snippet demonstrates how to bundle and use a WASM module in Next.js Middleware. It imports a WASM file, instantiates it, and uses its exports in a middleware function.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'
import squareWasm from './square.wasm?module'

export default async function middleware() {
  const m = await WebAssembly.instantiate(squareWasm)
  const answer = m.exports.square(9)

  const response = NextResponse.next()
  response.headers.set('x-square', answer.toString())
  return response
}

----------------------------------------

TITLE: Configuring Custom Image Loader for Static Export in Next.js
DESCRIPTION: This configuration snippet demonstrates how to set up a custom image loader for use with next/image in a static export. It uses Cloudinary as an example image optimization service.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'export',
  images: {
    loader: 'custom',
    loaderFile: './my-loader.ts',
  },
}

module.exports = nextConfig

----------------------------------------

TITLE: Adding Suspense Boundary for Data Access in Next.js
DESCRIPTION: This snippet shows how to add a Suspense boundary around a component that accesses data on every user request in Next.js. It includes a fallback UI for loading state.

LANGUAGE: jsx
CODE:
import { Suspense } from 'react'

async function TransactionList() {
  const transactions = await db.query(...)
  return ...
}

function TransactionSkeleton() {
  return <ul>...</ul>
}

export default async function Page() {
  return (
    <Suspense fallback={<TransactionSkeleton />}>
      <TransactionList/>
    </Suspense>
  )
}

----------------------------------------

TITLE: Enabling Server Actions in Next.js v13
DESCRIPTION: This snippet demonstrates how to enable Server Actions in Next.js version 13. It sets the 'experimental.serverActions' option to true in the Next.js configuration file.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const config = {
  experimental: {
    serverActions: true,
  },
}

module.exports = config

----------------------------------------

TITLE: Static CSP Configuration in Next.js Config
DESCRIPTION: Configures a static Content Security Policy without nonces using next.config.js. Sets up various CSP directives for different resource types.

LANGUAGE: javascript
CODE:
const cspHeader = `
    default-src 'self';
    script-src 'self' 'unsafe-eval' 'unsafe-inline';
    style-src 'self' 'unsafe-inline';
    img-src 'self' blob: data:;
    font-src 'self';
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
    upgrade-insecure-requests;
`

module.exports = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'Content-Security-Policy',
            value: cspHeader.replace(/\n/g, ''),
          },
        ],
      },
    ]
  },
}

----------------------------------------

TITLE: Implementing Custom Link Component with passHref in Next.js
DESCRIPTION: This code snippet demonstrates how to properly use the passHref and legacyBehavior props with a custom Link component in Next.js. It creates a styled NavLink component that wraps an <a> tag, ensuring the href is correctly passed down.

LANGUAGE: jsx
CODE:
import Link from 'next/link'
import styled from 'styled-components'

const StyledLink = styled.a`
  color: red;
`

function NavLink({ href, name }) {
  return (
    <Link href={href} passHref legacyBehavior>
      <StyledLink>{name}</StyledLink>
    </Link>
  )
}

export default NavLink

----------------------------------------

TITLE: Configuring transpilePackages in Next.js Configuration
DESCRIPTION: Demonstrates how to set up automatic package transpilation in next.config.js. This configuration allows Next.js to transpile and bundle specified dependencies, whether they are local packages in a monorepo or external dependencies from node_modules.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  transpilePackages: ['package-name'],
}

module.exports = nextConfig

----------------------------------------

TITLE: Search Result Page Implementation
DESCRIPTION: Shows how to implement a search results page that receives and processes search parameters from the Form component.

LANGUAGE: typescript
CODE:
import { getSearchResults } from '@/lib/search'

export default async function SearchPage({
  searchParams,
}: {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const results = await getSearchResults((await searchParams).query)

  return <div>...</div>
}

LANGUAGE: javascript
CODE:
import { getSearchResults } from '@/lib/search'

export default async function SearchPage({ searchParams }) {
  const results = await getSearchResults((await searchParams).query)

  return <div>...</div>
}

----------------------------------------

TITLE: Setting Revalidation Interval in Next.js fetch
DESCRIPTION: Demonstrates how to set the revalidation interval for a cached resource using the next.revalidate option in a fetch request.

LANGUAGE: ts
CODE:
fetch(`https://...`, { next: { revalidate: false | 0 | number } })

----------------------------------------

TITLE: Deleting Cookies in Next.js Server Action
DESCRIPTION: Shows three different approaches to delete cookies in a Next.js Server Action: using delete(), setting empty value, or using maxAge.

LANGUAGE: typescript
CODE:
'use server'

import { cookies } from 'next/headers'

export async function delete(data) {
  (await cookies()).delete('name')
  // or
  (await cookies()).set('name', '')
  // or
  (await cookies()).set('name', 'value', { maxAge: 0 })
}

----------------------------------------

TITLE: Using Nonce with Next.js Script Component
DESCRIPTION: Demonstrates how to read and apply the CSP nonce to a Next.js Script component in a Server Component using the headers API.

LANGUAGE: typescript
CODE:
import { headers } from 'next/headers'
import Script from 'next/script'

export default async function Page() {
  const nonce = (await headers()).get('x-nonce')

  return (
    <Script
      src="https://www.googletagmanager.com/gtag/js"
      strategy="afterInteractive"
      nonce={nonce}
    />
  )
}

----------------------------------------

TITLE: Checking Draft Mode Status in Next.js Server Component
DESCRIPTION: This example illustrates how to check if Draft Mode is enabled in a Server Component using the isEnabled property of the draftMode function. It demonstrates rendering different content based on the Draft Mode status.

LANGUAGE: typescript
CODE:
import { draftMode } from 'next/headers'

export default async function Page() {
  const { isEnabled } = await draftMode()
  return (
    <main>
      <h1>My Blog Post</h1>
      <p>Draft Mode is currently {isEnabled ? 'Enabled' : 'Disabled'}</p>
    </main>
  )
}

LANGUAGE: javascript
CODE:
import { draftMode } from 'next/headers'

export default async function Page() {
  const { isEnabled } = await draftMode()
  return (
    <main>
      <h1>My Blog Post</h1>
      <p>Draft Mode is currently {isEnabled ? 'Enabled' : 'Disabled'}</p>
    </main>
  )
}

----------------------------------------

TITLE: Script Event Handling with onLoad in Next.js
DESCRIPTION: Implementation of the onLoad event handler for Script component in a client-side component, demonstrating how to execute code after a script has loaded.

LANGUAGE: tsx
CODE:
'use client'

import Script from 'next/script'

export default function Page() {
  return (
    <>
      <Script
        src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js"
        onLoad={() => {
          console.log(_.sample([1, 2, 3, 4]))
        }}
      />
    </>
  )
}

----------------------------------------

TITLE: Implementing useSelectedLayoutSegments in JavaScript React Component
DESCRIPTION: A client-side component example showing how to use the useSelectedLayoutSegments hook to render a list of active route segments in JavaScript. The component maps through the segments array and renders each segment in a list item.

LANGUAGE: jsx
CODE:
'use client'

import { useSelectedLayoutSegments } from 'next/navigation'

export default function ExampleClientComponent() {
  const segments = useSelectedLayoutSegments()

  return (
    <ul>
      {segments.map((segment, index) => (
        <li key={index}>{segment}</li>
      ))}
    </ul>
  )
}

----------------------------------------

TITLE: HTTP Method Handling in API Routes
DESCRIPTION: Demonstrates how to handle different HTTP methods (POST and others) in an API route handler.

LANGUAGE: typescript
CODE:
import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    // Process a POST request
  } else {
    // Handle any other HTTP method
  }
}

LANGUAGE: javascript
CODE:
export default function handler(req, res) {
  if (req.method === 'POST') {
    // Process a POST request
  } else {
    // Handle any other HTTP method
  }
}

----------------------------------------

TITLE: Configuring Remote Image Patterns in Next.js Configuration
DESCRIPTION: This snippet demonstrates how to configure the images.remotePatterns in next.config.js to allow specific remote image hosts. It includes settings for protocol, hostname, port, pathname, and search parameters.

LANGUAGE: javascript
CODE:
module.exports = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'assets.example.com',
        port: '',
        pathname: '/account123/**',
        search: '',
      },
    ],
  },
}

----------------------------------------

TITLE: Cookie Handling in Route Handlers
DESCRIPTION: Shows how to read and set cookies using the next/headers cookies API in a Route Handler.

LANGUAGE: typescript
CODE:
import { cookies } from 'next/headers'

export async function GET(request: Request) {
  const cookieStore = await cookies()
  const token = cookieStore.get('token')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { 'Set-Cookie': `token=${token.value}` },
  })
}

----------------------------------------

TITLE: Implementing CSS Modules in Next.js
DESCRIPTION: Example of using CSS Modules to create locally scoped styles in a Next.js application. Shows both the CSS definition and its usage in a React component.

LANGUAGE: css
CODE:
.blog {
  padding: 24px;
}

LANGUAGE: tsx
CODE:
import styles from './styles.module.css'

export default function Page({ children }: { children: React.ReactNode }) {
  return <main className={styles.blog}>{children}</main>
}

----------------------------------------

TITLE: Creating Next.js App with Cloudinary Example using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the Cloudinary example. It sets up the project structure and installs necessary dependencies.

LANGUAGE: bash
CODE:
yarn create next-app --example with-cloudinary with-cloudinary-app

----------------------------------------

TITLE: Configuring crossOrigin in Next.js Configuration
DESCRIPTION: Example shows how to set up crossOrigin attribute for script tags in next.config.js. This configuration applies to all script tags generated by next/script and next/head components.

LANGUAGE: javascript
CODE:
module.exports = {
  crossOrigin: 'anonymous',
}

----------------------------------------

TITLE: Configuring generateBuildId in Next.js Config
DESCRIPTION: Demonstrates how to customize the build ID generation in next.config.js. This example shows using a git hash from an environment variable to create a consistent build ID across different deployment environments.

LANGUAGE: jsx
CODE:
module.exports = {
  generateBuildId: async () => {
    // This could be anything, using the latest git hash
    return process.env.GIT_HASH
  },
}

----------------------------------------

TITLE: Configuring generateBuildId in Next.js Config
DESCRIPTION: Demonstrates how to customize the build ID generation in next.config.js. This example shows using a git hash from an environment variable to create a consistent build ID across different deployment environments.

LANGUAGE: jsx
CODE:
module.exports = {
  generateBuildId: async () => {
    // This could be anything, using the latest git hash
    return process.env.GIT_HASH
  },
}

----------------------------------------

TITLE: Implementing a Dynamic Table Component with Search Parameters
DESCRIPTION: Example of a Table component that uses dynamic search parameters in a partially prerendered Next.js application.

LANGUAGE: typescript
CODE:
export async function Table({
  searchParams,
}: {
  searchParams: Promise<{ sort: string }>
}) {
  const sort = (await searchParams).sort === 'true'
  return '...'
}

LANGUAGE: javascript
CODE:
export async function Table({ searchParams }) {
  const sort = (await searchParams).sort === 'true'
  return '...'
}

----------------------------------------

TITLE: Implementing useSearchParams with Suspense in Next.js (JavaScript)
DESCRIPTION: This snippet shows how to properly use useSearchParams within a Suspense boundary in a Next.js application using JavaScript. It creates a Search component that uses useSearchParams and wraps it in a Suspense boundary within a Searchbar component.

LANGUAGE: jsx
CODE:
'use client'

import { useSearchParams } from 'next/navigation'
import { Suspense } from 'react'

function Search() {
  const searchParams = useSearchParams()

  return <input placeholder="Search..." />
}

export function Searchbar() {
  return (
    // You could have a loading skeleton as the `fallback` too
    <Suspense>
      <Search />
    </Suspense>
  )
}

----------------------------------------

TITLE: Generating Dynamic robots.txt with TypeScript
DESCRIPTION: TypeScript implementation for dynamically generating robots.txt using Next.js Route Handlers. Returns a Robots object defining crawler rules and sitemap location.

LANGUAGE: typescript
CODE:
import type { MetadataRoute } from 'next'

export default function robots(): MetadataRoute.Robots {
  return {
    rules: {
      userAgent: '*',
      allow: '/',
      disallow: '/private/',
    },
    sitemap: 'https://acme.com/sitemap.xml',
  }
}

----------------------------------------

TITLE: Generating Dynamic robots.txt with JavaScript
DESCRIPTION: JavaScript implementation for dynamically generating robots.txt using Next.js Route Handlers. Returns a Robots object with basic crawler configurations.

LANGUAGE: javascript
CODE:
export default function robots() {
  return {
    rules: {
      userAgent: '*',
      allow: '/',
      disallow: '/private/',
    },
    sitemap: 'https://acme.com/sitemap.xml',
  }
}

----------------------------------------

TITLE: Using getInitialProps with Custom App in Next.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to use getInitialProps with a custom App component in Next.js using JavaScript. It shows how to fetch initial props and pass additional data to pages.

LANGUAGE: javascript
CODE:
import App from 'next/app'

export default function MyApp({ Component, pageProps, example }) {
  return (
    <>
      <p>Data: {example}</p>
      <Component {...pageProps} />
    </>
  )
}

MyApp.getInitialProps = async (context) => {
  const ctx = await App.getInitialProps(context)

  return { ...ctx, example: 'data' }
}

----------------------------------------

TITLE: Creating a Dynamic User Component in Next.js
DESCRIPTION: Example of a dynamic component that uses cookies, requiring Suspense wrapping for Partial Prerendering.

LANGUAGE: typescript
CODE:
import { cookies } from 'next/headers'

export async function User() {
  const session = (await cookies()).get('session')?.value
  return '...'
}

LANGUAGE: javascript
CODE:
import { cookies } from 'next/headers'

export async function User() {
  const session = (await cookies()).get('session')?.value
  return '...'
}

----------------------------------------

TITLE: Creating Next.js App with Storybook using Yarn
DESCRIPTION: Command to bootstrap a new Next.js application with Storybook integration using Yarn create.

LANGUAGE: bash
CODE:
yarn create next-app --example with-storybook with-storybook-app

----------------------------------------

TITLE: Async Next.js Configuration Function
DESCRIPTION: Shows how to use an async function for Next.js configuration, which is supported since Next.js 12.1.0. This allows for asynchronous operations during configuration.

LANGUAGE: javascript
CODE:
// @ts-check

module.exports = async (phase, { defaultConfig }) => {
  /**
   * @type {import('next').NextConfig}
   */
  const nextConfig = {
    /* config options here */
  }
  return nextConfig
}

----------------------------------------

TITLE: Configuring Image Loader in next.config.js
DESCRIPTION: Example configuration options for next.config.js to handle image optimization in static exports. You can either configure a custom loader or disable optimization completely.

LANGUAGE: javascript
CODE:
// Option 1: Configure custom loader
module.exports = {
  images: {
    loader: 'custom',
    loaderFile: './my/image/loader.js',
  }
}

// Option 2: Disable optimization
module.exports = {
  images: {
    unoptimized: true
  }
}

----------------------------------------

TITLE: Implementing Google Maps Embed in Next.js App Router
DESCRIPTION: Example of how to add a Google Maps Embed to a page in a Next.js application using the App Router. The GoogleMapsEmbed component is used with various configuration options.

LANGUAGE: jsx
CODE:
import { GoogleMapsEmbed } from '@next/third-parties/google'

export default function Page() {
  return (
    <GoogleMapsEmbed
      apiKey="XYZ"
      height={200}
      width="100%"
      mode="place"
      q="Brooklyn+Bridge,New+York,NY"
    />
  )
}

----------------------------------------

TITLE: Configuring CSS Chunking in Next.js (TypeScript)
DESCRIPTION: This snippet demonstrates how to set up CSS Chunking in a Next.js application using TypeScript. It shows the configuration of the experimental.cssChunking option in the next.config.ts file.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig = {
  experimental: {
    cssChunking: true, // default
  },
} satisfies NextConfig

export default nextConfig

----------------------------------------

TITLE: Correct usage of styled-jsx in Next.js components
DESCRIPTION: This snippet demonstrates the proper way to use styled-jsx in a Next.js component. It shows how to include a single template literal as a child of the <style jsx> tag to define component-specific styles.

LANGUAGE: jsx
CODE:
const Component = () => (
  <div>
    <p>Red paragraph</p>
    <style jsx>{`
      p {
        color: red;
      }
    `}</style>
  </div>
)

----------------------------------------

TITLE: Creating a Video Sitemap in Next.js
DESCRIPTION: Example of creating a video sitemap using the 'videos' property in a sitemap.ts file. This helps search engines index videos on the website.

LANGUAGE: typescript
CODE:
import type { MetadataRoute } from 'next'

export default function sitemap(): MetadataRoute.Sitemap {
  return [
    {
      url: 'https://example.com',
      lastModified: '2021-01-01',
      changeFrequency: 'weekly',
      priority: 0.5,
      videos: [
        {
          title: 'example',
          thumbnail_loc: 'https://example.com/image.jpg',
          description: 'this is the description',
        },
      ],
    },
  ]
}

----------------------------------------

TITLE: Implementing Web Vitals Reporting in Next.js App Router
DESCRIPTION: This example demonstrates how to implement Web Vitals reporting in the App Router using a separate WebVitals component. It shows the component definition and its integration into the root layout.

LANGUAGE: jsx
CODE:
'use client'

import { useReportWebVitals } from 'next/web-vitals'

export function WebVitals() {
  useReportWebVitals((metric) => {
    console.log(metric)
  })
}

LANGUAGE: jsx
CODE:
import { WebVitals } from './_components/web-vitals'

export default function Layout({ children }) {
  return (
    <html>
      <body>
        <WebVitals />
        {children}
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Implementing Loading Component in TypeScript
DESCRIPTION: Creates a loading state component in TypeScript that renders during page transitions or data fetching. Can be used as either a Server Component (default) or Client Component with 'use client' directive.

LANGUAGE: typescript
CODE:
export default function Loading() {
  // Or a custom loading skeleton component
  return <p>Loading...</p>
}

----------------------------------------

TITLE: Implementing Icon Generation with generateImageMetadata in Next.js (TypeScript)
DESCRIPTION: This example demonstrates how to use generateImageMetadata to create multiple icon sizes and implement a corresponding Icon component using ImageResponse from next/og.

LANGUAGE: typescript
CODE:
import { ImageResponse } from 'next/og'

export function generateImageMetadata() {
  return [
    {
      contentType: 'image/png',
      size: { width: 48, height: 48 },
      id: 'small',
    },
    {
      contentType: 'image/png',
      size: { width: 72, height: 72 },
      id: 'medium',
    },
  ]
}

export default function Icon({ id }: { id: string }) {
  return new ImageResponse(
    (
      <div
        style={{
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: 88,
          background: '#000',
          color: '#fafafa',
        }}
      >
        Icon {id}
      </div>
    )
  )
}

----------------------------------------

TITLE: Importing Global CSS in Next.js Custom App
DESCRIPTION: Implementation of the custom _app.js file that properly imports global CSS. This is the correct location for global CSS imports in Next.js applications.

LANGUAGE: jsx
CODE:
import '../styles.css'

export default function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />
}

----------------------------------------

TITLE: Implementing useSelectedLayoutSegments in TypeScript React Component
DESCRIPTION: A client-side component example showing how to use the useSelectedLayoutSegments hook to render a list of active route segments in TypeScript. The component maps through the segments array and renders each segment in a list item.

LANGUAGE: tsx
CODE:
'use client'

import { useSelectedLayoutSegments } from 'next/navigation'

export default function ExampleClientComponent() {
  const segments = useSelectedLayoutSegments()

  return (
    <ul>
      {segments.map((segment, index) => (
        <li key={index}>{segment}</li>
      ))}
    </ul>
  )
}

----------------------------------------

TITLE: Creating Movie and Person Nodes with Relationships in Neo4j
DESCRIPTION: This Cypher query creates nodes for movies and people (actors, directors) and establishes relationships between them. It includes properties such as title, release date, tagline for movies, and name, birth year for people.

LANGUAGE: cypher
CODE:
CREATE (TheMatrix:Movie {title:'The Matrix', released:1999, tagline:'Welcome to the Real World'})
CREATE (Keanu:Person {name:'Keanu Reeves', born:1964})
CREATE (Carrie:Person {name:'Carrie-Anne Moss', born:1967})
CREATE (Laurence:Person {name:'Laurence Fishburne', born:1961})
CREATE (Hugo:Person {name:'Hugo Weaving', born:1960})
CREATE (LillyW:Person {name:'Lilly Wachowski', born:1967})
CREATE (LanaW:Person {name:'Lana Wachowski', born:1965})
CREATE (JoelS:Person {name:'Joel Silver', born:1952})
CREATE
(Keanu)-[:ACTED_IN {roles:['Neo']}]->(TheMatrix),
(Carrie)-[:ACTED_IN {roles:['Trinity']}]->(TheMatrix),
(Laurence)-[:ACTED_IN {roles:['Morpheus']}]->(TheMatrix),
(Hugo)-[:ACTED_IN {roles:['Agent Smith']}]->(TheMatrix),
(LillyW)-[:DIRECTED]->(TheMatrix),
(LanaW)-[:DIRECTED]->(TheMatrix),
(JoelS)-[:PRODUCED]->(TheMatrix)

----------------------------------------

TITLE: Next.js Redirect Function Usage
DESCRIPTION: Demonstrates the redirect function usage in Server Components for handling navigation based on conditional logic and API responses.

LANGUAGE: typescript
CODE:
import { redirect } from 'next/navigation'

async function fetchTeam(id: string) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  if (!id) {
    redirect('/login')
  }

  const team = await fetchTeam(id)
  if (!team) {
    redirect('/join')
  }

  // ...
}

LANGUAGE: javascript
CODE:
import { redirect } from 'next/navigation'

async function fetchTeam(id) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({ params }) {
  const { id } = await params
  if (!id) {
    redirect('/login')
  }

  const team = await fetchTeam(id)
  if (!team) {
    redirect('/join')
  }

  // ...
}

----------------------------------------

TITLE: Adding Babel Plugins to Next.js
DESCRIPTION: Example of extending the default Next.js Babel configuration by adding additional plugins without custom configuration. Shows how to add the do-expressions plugin while maintaining the required next/babel preset.

LANGUAGE: json
CODE:
{
  "presets": ["next/babel"],
  "plugins": ["@babel/plugin-proposal-do-expressions"]
}

----------------------------------------

TITLE: Defining MDX Components in TypeScript
DESCRIPTION: This snippet shows how to define MDX Components using TypeScript in a Next.js project. It exports a useMDXComponents function that takes and returns MDXComponents, allowing for customization of MDX rendering.

LANGUAGE: typescript
CODE:
import type { MDXComponents } from 'mdx/types'

export function useMDXComponents(components: MDXComponents): MDXComponents {
  return {
    ...components,
  }
}

----------------------------------------

TITLE: Configuring Custom App with Shared Layout
DESCRIPTION: Demonstrates how to implement a custom App component that wraps all pages with a shared layout component for consistent page structure.

LANGUAGE: jsx
CODE:
import Layout from '../components/layout'

export default function MyApp({ Component, pageProps }) {
  return (
    <Layout>
      <Component {...pageProps} />
    </Layout>
  )
}

----------------------------------------

TITLE: Generating Static Params for Catch-all Dynamic Segment in Next.js
DESCRIPTION: This snippet illustrates how to use generateStaticParams with a catch-all dynamic segment ([...slug]). It returns an array of objects, where each object's slug property is an array of path segments.

LANGUAGE: tsx
CODE:
export function generateStaticParams() {
  return [{ slug: ['a', '1'] }, { slug: ['b', '2'] }, { slug: ['c', '3'] }]
}

// Three versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
// - /product/a/1
// - /product/b/2
// - /product/c/3
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string[] }>
}) {
  const { slug } = await params
  // ...
}

----------------------------------------

TITLE: Configuring Next.js to Ignore TypeScript Errors in Production Builds
DESCRIPTION: This code snippet demonstrates how to modify the next.config.js file to allow production builds to complete successfully even when TypeScript errors are present. It enables the ignoreBuildErrors option in the typescript configuration.

LANGUAGE: javascript
CODE:
module.exports = {
  typescript: {
    // !! WARN !!
    // Dangerously allow production builds to successfully complete even if
    // your project has type errors.
    // !! WARN !!
    ignoreBuildErrors: true,
  },
}

----------------------------------------

TITLE: Implementing getStaticPaths with fallback: true
DESCRIPTION: This example shows how to use getStaticPaths with fallback: true to handle dynamic routes. It includes a loading state for pages that are generated on-demand and demonstrates how to detect if a fallback is being rendered.

LANGUAGE: javascript
CODE:
import { useRouter } from 'next/router'

function Post({ post }) {
  const router = useRouter()

  // If the page is not yet generated, this will be displayed
  // initially until getStaticProps() finishes running
  if (router.isFallback) {
    return <div>Loading...</div>
  }

  // Render post...
}

// This function gets called at build time
export async function getStaticPaths() {
  return {
    // Only `/posts/1` and `/posts/2` are generated at build time
    paths: [{ params: { id: '1' } }, { params: { id: '2' } }],
    // Enable statically generating additional pages
    // For example: `/posts/3`
    fallback: true,
  }
}

// This also gets called at build time
export async function getStaticProps({ params }) {
  // params contains the post `id`.
  // If the route is like /posts/1, then params.id is 1
  const res = await fetch(`https://.../posts/${params.id}`)
  const post = await res.json()

  // Pass post data to the page via props
  return {
    props: { post },
    // Re-generate the post at most once per second
    // if a request comes in
    revalidate: 1,
  }
}

export default Post

----------------------------------------

TITLE: Configuring Scripts for Next.js Deployment in package.json
DESCRIPTION: This snippet shows how to set up the necessary scripts in package.json for building and running a Next.js application in production.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  }
}

----------------------------------------

TITLE: Tailwind CSS Setup in Next.js
DESCRIPTION: Complete setup guide for integrating Tailwind CSS with Next.js, including installation, configuration, and usage examples.

LANGUAGE: bash
CODE:
npm install -D tailwindcss @tailwindcss/postcss postcss

LANGUAGE: javascript
CODE:
/** @type {import('tailwindcss').Config} */
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
}

LANGUAGE: css
CODE:
@import 'tailwindcss';

----------------------------------------

TITLE: Internationalized Routing Middleware
DESCRIPTION: Implements middleware for handling internationalized routing in Next.js, including locale detection and URL redirection based on the detected locale.

LANGUAGE: javascript
CODE:
import { NextResponse } from "next/server";

let locales = ['en-US', 'nl-NL', 'nl']

// Get the preferred locale, similar to the above or using a library
function getLocale(request) { ... }

export function middleware(request) {
  // Check if there is any supported locale in the pathname
  const { pathname } = request.nextUrl
  const pathnameHasLocale = locales.some(
    (locale) => pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`
  )

  if (pathnameHasLocale) return

  // Redirect if there is no locale
  const locale = getLocale(request)
  request.nextUrl.pathname = `/${locale}${pathname}`
  // e.g. incoming request is /products
  // The new URL is now /en-US/products
  return NextResponse.redirect(request.nextUrl)
}

export const config = {
  matcher: [
    // Skip all internal paths (_next)
    '/((?!_next).*)',
    // Optional: only run on root (/) URL
    // '/'
  ],
}

----------------------------------------

TITLE: Installing Next.js with GraphQL React using Yarn
DESCRIPTION: Command to create a new Next.js application with graphql-react integration using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-graphql-react with-graphql-react-app

----------------------------------------

TITLE: Setting Cookies with NextRequest
DESCRIPTION: Demonstrates how to set a cookie value using the cookies.set() method. Sets a cookie named 'show-banner' with value 'false'.

LANGUAGE: typescript
CODE:
// Given incoming request /home
// Set a cookie to hide the banner
// request will have a `Set-Cookie:show-banner=false;path=/home` header
request.cookies.set('show-banner', 'false')

----------------------------------------

TITLE: Incorrect Usage of cookies() in Cached Function (Next.js)
DESCRIPTION: This code snippet demonstrates the incorrect way of accessing cookies within a function annotated with "use cache". This approach causes an error because it invalidates the cache on every request.

LANGUAGE: jsx
CODE:
import { cookies } from 'next/headers'

async function getExampleData() {
  "use cache"
  const isLoggedIn = (await cookies()).has('token')
  ...
}

export default async function Page() {
  const data = await getExampleData()
  return ...
}

----------------------------------------

TITLE: Configuring Page Extensions for Non-Page Files in Next.js
DESCRIPTION: This snippet shows how to configure page extensions in Next.js to allow colocating non-page files (like test files) in the pages directory. It modifies the next.config.js file to use a .page suffix for actual page files.

LANGUAGE: javascript
CODE:
module.exports = {
  pageExtensions: ['page.tsx', 'page.ts', 'page.jsx', 'page.js'],
}

----------------------------------------

TITLE: Adding Cache Tags in Next.js fetch
DESCRIPTION: Shows how to add cache tags to a resource fetched with Next.js' extended fetch API, allowing for on-demand revalidation using revalidateTag.

LANGUAGE: ts
CODE:
fetch(`https://...`, { next: { tags: ['collection'] } })

----------------------------------------

TITLE: Implementing Server Component for Static Export in Next.js
DESCRIPTION: This example demonstrates a Server Component that performs data fetching during the build process for static export. The component fetches data from an API and renders it as part of the static HTML.

LANGUAGE: typescript
CODE:
export default async function Page() {
  // This fetch will run on the server during `next build`
  const res = await fetch('https://api.example.com/...')
  const data = await res.json()

  return <main>...</main>
}

----------------------------------------

TITLE: Defining Viewport Options with Static Object in Next.js
DESCRIPTION: Export a viewport object from a layout.tsx or page.tsx file to define viewport options. This example sets the themeColor to black.

LANGUAGE: typescript
CODE:
import type { Viewport } from 'next'

export const viewport: Viewport = {
  themeColor: 'black',
}

export default function Page() {}

----------------------------------------

TITLE: Correcting Dynamic API Calls in Next.js Page Component
DESCRIPTION: Demonstrates how to properly implement the cookies() API call within a Next.js page component by moving it from the global scope into the request scope of the Page function.

LANGUAGE: diff
CODE:
filename="app/page.js"
import { cookies } from 'next/headers'

- const cookieStore = await cookies()
export default async function Page() {
+ const cookieStore = await cookies()
  return ...
}

----------------------------------------

TITLE: Draft Mode Integration with getStaticProps
DESCRIPTION: Example showing how to update getStaticProps to handle draft mode and fetch appropriate data based on context

LANGUAGE: javascript
CODE:
export async function getStaticProps(context) {
  const url = context.draftMode
    ? 'https://draft.example.com'
    : 'https://production.example.com'
  const res = await fetch(url)
  // ...
}

----------------------------------------

TITLE: Correct Placement of <style jsx> Tags in Next.js Component
DESCRIPTION: This snippet shows the correct way to use `<style jsx>` tags in a Next.js component. The styles are placed at the root level of the component, outside of any HTML elements.

LANGUAGE: jsx
CODE:
const Component = () => (
  <div>
    <p>Hello world</p>
    <style jsx>{`
      p {
        color: white;
      }
    `}</style>
    <style global jsx>{`
      body {
        background: black;
      }
    `}</style>
  </div>
)

----------------------------------------

TITLE: Implementing a Basic Template in Next.js (JavaScript)
DESCRIPTION: This snippet shows how to create a basic template component in Next.js using JavaScript. The template wraps its children components and resets their state on navigation.

LANGUAGE: jsx
CODE:
export default function Template({ children }) {
  return <div>{children}</div>
}

----------------------------------------

TITLE: Data Fetching Not Found Page
DESCRIPTION: Advanced implementation of a Not Found page that fetches site data asynchronously using headers. Demonstrates server-side data fetching capabilities in both TypeScript and JavaScript.

LANGUAGE: typescript
CODE:
import Link from 'next/link'
import { headers } from 'next/headers'

export default async function NotFound() {
  const headersList = await headers()
  const domain = headersList.get('host')
  const data = await getSiteData(domain)
  return (
    <div>
      <h2>Not Found: {data.name}</h2>
      <p>Could not find requested resource</p>
      <p>
        View <Link href="/blog">all posts</Link>
      </p>
    </div>
  )
}

LANGUAGE: javascript
CODE:
import Link from 'next/link'
import { headers } from 'next/headers'

export default async function NotFound() {
  const headersList = await headers()
  const domain = headersList.get('host')
  const data = await getSiteData(domain)
  return (
    <div>
      <h2>Not Found: {data.name}</h2>
      <p>Could not find requested resource</p>
      <p>
        View <Link href="/blog">all posts</Link>
      </p>
    </div>
  )
}

----------------------------------------

TITLE: Configuring Cypress for Component Testing in Next.js (TypeScript)
DESCRIPTION: This snippet shows the configuration for Cypress component testing in a Next.js project using TypeScript.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'cypress'

export default defineConfig({
  component: {
    devServer: {
      framework: 'next',
      bundler: 'webpack',
    },
  },
})

----------------------------------------

TITLE: Implementing a Basic Template in Next.js (TypeScript)
DESCRIPTION: This snippet demonstrates how to create a basic template component in Next.js using TypeScript. The template wraps its children components and resets their state on navigation.

LANGUAGE: tsx
CODE:
export default function Template({ children }: { children: React.ReactNode }) {
  return <div>{children}</div>
}

----------------------------------------

TITLE: Migrating Data Fetching in App Router
DESCRIPTION: Example of migrating data fetching from getServerSideProps and getStaticProps in the Pages Router to the new data fetching approach in the App Router.

LANGUAGE: tsx
CODE:
export default async function Page() {
  // This request should be cached until manually invalidated.
  // Similar to `getStaticProps`.
  // `force-cache` is the default and can be omitted.
  const staticData = await fetch(`https://...`, { cache: 'force-cache' })

  // This request should be refetched on every request.
  // Similar to `getServerSideProps`.
  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })

  // This request should be cached with a lifetime of 10 seconds.
  // Similar to `getStaticProps` with the `revalidate` option.
  const revalidatedData = await fetch(`https://...`, {
    next: { revalidate: 10 },
  })

  return <div>...</div>
}

----------------------------------------

TITLE: Redirecting with NextResponse in TypeScript
DESCRIPTION: Illustrates how to create a redirect response using NextResponse.redirect() method with a new URL object.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'

return NextResponse.redirect(new URL('/new', request.url))

----------------------------------------

TITLE: Using cacheTag in a Data Fetching Function
DESCRIPTION: Demonstrate how to use cacheTag in a data fetching function. The function tags the cached data with 'my-data' for later invalidation.

LANGUAGE: typescript
CODE:
import { unstable_cacheTag as cacheTag } from 'next/cache'

export async function getData() {
  'use cache'
  cacheTag('my-data')
  const data = await fetch('/api/data')
  return data
}

LANGUAGE: javascript
CODE:
import { unstable_cacheTag as cacheTag } from 'next/cache'

export async function getData() {
  'use cache'
  cacheTag('my-data')
  const data = await fetch('/api/data')
  return data
}

----------------------------------------

TITLE: Revalidating All Data in Next.js
DESCRIPTION: This snippet demonstrates how to revalidate all data by using the root path '/' with the 'layout' type. This action purges the Client-side Router Cache and revalidates the Data Cache on the next page visit.

LANGUAGE: ts
CODE:
import { revalidatePath } from 'next/cache'

revalidatePath('/', 'layout')

----------------------------------------

TITLE: Server Action Redirect Implementation in Next.js
DESCRIPTION: Shows how to implement redirect within a Next.js Server Action using form submission.

LANGUAGE: typescript
CODE:
'use client'

import { navigate } from './actions'

export function ClientRedirect() {
  return (
    <form action={navigate}>
      <input type="text" name="id" />
      <button>Submit</button>
    </form>
  )
}

LANGUAGE: typescript
CODE:
'use server'

import { redirect } from 'next/navigation'

export async function navigate(data: FormData) {
  redirect(`/posts/${data.get('id')}`)
}

----------------------------------------

TITLE: Fixing Invalid Custom Route Pattern in Next.js (JavaScript)
DESCRIPTION: Demonstrates how to correctly format a custom route pattern using path-to-regexp syntax for negative lookahead scenarios in Next.js routing configuration.

LANGUAGE: javascript
CODE:
{
  source: '/feedback/(?!general)',
  destination: '/feedback/general'
}

LANGUAGE: javascript
CODE:
{
  source: '/feedback/((?!general).*)',
  destination: '/feedback/general'
}

----------------------------------------

TITLE: Configuring Cache Options in Next.js fetch
DESCRIPTION: Shows how to set the cache option for a fetch request in Next.js, which determines how the request interacts with the Next.js Data Cache.

LANGUAGE: ts
CODE:
fetch(`https://...`, { cache: 'force-cache' | 'no-store' })

----------------------------------------

TITLE: Creating a Simple Preview Mode API Route in Next.js
DESCRIPTION: This example shows a basic implementation of a preview mode API route that enables preview mode and returns a message.

LANGUAGE: javascript
CODE:
export default function handler(req, res) {
  res.setPreviewData({})
  res.end('Preview mode enabled')
}

----------------------------------------

TITLE: Installing Next.js with EdgeDB Template using Yarn
DESCRIPTION: Command to create a new Next.js application with EdgeDB template using yarn create

LANGUAGE: bash
CODE:
yarn create next-app --example with-edgedb with-edgedb-app

----------------------------------------

TITLE: Tagging Cached Components in Next.js
DESCRIPTION: Example of using cacheTag within a cached component. The Bookings component tags its cache with 'bookings-data' for selective invalidation.

LANGUAGE: typescript
CODE:
import { unstable_cacheTag as cacheTag } from 'next/cache'

interface BookingsProps {
  type: string
}

export async function Bookings({ type = 'haircut' }: BookingsProps) {
  'use cache'
  cacheTag('bookings-data')

  async function getBookingsData() {
    const data = await fetch(`/api/bookings?type=${encodeURIComponent(type)}`)
    return data
  }

  return //...
}

LANGUAGE: javascript
CODE:
import { unstable_cacheTag as cacheTag } from 'next/cache'

export async function Bookings({ type = 'haircut' }) {
  'use cache'
  cacheTag('bookings-data')

  async function getBookingsData() {
    const data = await fetch(`/api/bookings?type=${encodeURIComponent(type)}`)
    return data
  }

  return //...
}

----------------------------------------

TITLE: Server Action Redirect Implementation
DESCRIPTION: Example of using the redirect function in a Next.js Server Action to handle post-mutation navigation

LANGUAGE: typescript
CODE:
'use server'

import { redirect } from 'next/navigation'
import { revalidatePath } from 'next/cache'

export async function createPost(id: string) {
  try {
    // Call database
  } catch (error) {
    // Handle errors
  }

  revalidatePath('/posts') // Update cached posts
  redirect(`/post/${id}`) // Navigate to the new post page
}

----------------------------------------

TITLE: Problematic Page Export Pattern
DESCRIPTION: Example showing a page export that the codemod cannot properly analyze, leading to potential synchronous access issues

LANGUAGE: jsx
CODE:
// @next-codemod-error
export * from '.../some-file'

----------------------------------------

TITLE: Setting Color Scheme in Next.js Viewport
DESCRIPTION: Specify the color scheme for the page using the colorScheme property in the viewport configuration.

LANGUAGE: typescript
CODE:
import type { Viewport } from 'next'

export const viewport: Viewport = {
  colorScheme: 'dark',
}

----------------------------------------

TITLE: Installing Cypress as a Dev Dependency in Next.js
DESCRIPTION: This snippet shows how to install Cypress as a development dependency in a Next.js project using npm, yarn, or pnpm.

LANGUAGE: bash
CODE:
npm install -D cypress
# or
yarn add -D cypress
# or
pnpm install -D cypress

----------------------------------------

TITLE: Conditional Static Path Generation in Next.js
DESCRIPTION: This snippet demonstrates how to conditionally generate static paths based on the environment. It skips static generation in preview environments and generates all paths in production for optimal performance.

LANGUAGE: javascript
CODE:
export async function getStaticPaths() {
  // When this is true (in preview environments) don't
  // prerender any static pages
  // (faster builds, but slower initial page load)
  if (process.env.SKIP_BUILD_STATIC_GENERATION) {
    return {
      paths: [],
      fallback: 'blocking',
    }
  }

  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // Get the paths we want to prerender based on posts
  // In production environments, prerender all pages
  // (slower builds, but faster initial page load)
  const paths = posts.map((post) => ({
    params: { id: post.id },
  }))

  // { fallback: false } means other routes should 404
  return { paths, fallback: false }
}

----------------------------------------

TITLE: Implementing getStaticProps in JavaScript for Next.js
DESCRIPTION: This snippet shows how to implement `getStaticProps` in a JavaScript Next.js project. It fetches data from the GitHub API and returns it as props for the page component.

LANGUAGE: jsx
CODE:
export async function getStaticProps() {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}

export default function Page({ repo }) {
  return repo.stargazers_count
}

----------------------------------------

TITLE: Creating an Active Link Component with useSelectedLayoutSegment in Next.js
DESCRIPTION: This example shows how to create an active link component using useSelectedLayoutSegment. The component changes style depending on the active segment, useful for navigation UI like featured posts in a blog sidebar.

LANGUAGE: tsx
CODE:
'use client'

import Link from 'next/link'
import { useSelectedLayoutSegment } from 'next/navigation'

// This *client* component will be imported into a blog layout
export default function BlogNavLink({
  slug,
  children,
}: {
  slug: string
  children: React.ReactNode
}) {
  // Navigating to `/blog/hello-world` will return 'hello-world'
  // for the selected layout segment
  const segment = useSelectedLayoutSegment()
  const isActive = slug === segment

  return (
    <Link
      href={`/blog/${slug}`}
      // Change style depending on whether the link is active
      style={{ fontWeight: isActive ? 'bold' : 'normal' }}
    >
      {children}
    </Link>
  )
}

LANGUAGE: jsx
CODE:
'use client'

import Link from 'next/link'
import { useSelectedLayoutSegment } from 'next/navigation'

// This *client* component will be imported into a blog layout
export default function BlogNavLink({ slug, children }) {
  // Navigating to `/blog/hello-world` will return 'hello-world'
  // for the selected layout segment
  const segment = useSelectedLayoutSegment()
  const isActive = slug === segment

  return (
    <Link
      href={`/blog/${slug}`}
      // Change style depending on whether the link is active
      style={{ fontWeight: isActive ? 'bold' : 'normal' }}
    >
      {children}
    </Link>
  )
}

----------------------------------------

TITLE: Creating Next.js App with Yarn for Bug Reproduction
DESCRIPTION: This command uses create-next-app with Yarn to bootstrap a Next.js application using the reproduction template for bug reporting purposes.

LANGUAGE: bash
CODE:
yarn create next-app --example reproduction-template-pages reproduction-app

----------------------------------------

TITLE: Implementing Custom Image Loader Function (Client Component)
DESCRIPTION: Example of a custom image loader function for use in Client Components. This function generates a URL for image optimization based on source, width, and quality parameters.

LANGUAGE: javascript
CODE:
'use client'

export default function myImageLoader({ src, width, quality }) {
  return `https://example.com/${src}?w=${width}&q=${quality || 75}`
}

----------------------------------------

TITLE: Basic Static Metadata Configuration in Next.js
DESCRIPTION: Shows how to export static metadata using both TypeScript and JavaScript syntax in layout or page files

LANGUAGE: tsx
CODE:
import type { Metadata } from 'next'

// either Static metadata
export const metadata: Metadata = {
  title: '...',
}

// or Dynamic metadata
export async function generateMetadata({ params }) {
  return {
    title: '...',
  }
}

----------------------------------------

TITLE: Configuring Dynamic Parameters in Next.js Routes
DESCRIPTION: Control behavior for dynamic segments not generated with generateStaticParams using the dynamicParams option.

LANGUAGE: typescript
CODE:
export const dynamicParams = true // true | false,

LANGUAGE: javascript
CODE:
export const dynamicParams = true // true | false,

----------------------------------------

TITLE: Disabling Draft Mode in Next.js Route Handler
DESCRIPTION: This snippet demonstrates how to create a Route Handler to disable Draft Mode using the draftMode function. It shows importing the function, calling the disable() method, and returning a response.

LANGUAGE: typescript
CODE:
import { draftMode } from 'next/headers'

export async function GET(request: Request) {
  const draft = await draftMode()
  draft.disable()
  return new Response('Draft mode is disabled')
}

LANGUAGE: javascript
CODE:
import { draftMode } from 'next/headers'

export async function GET(request) {
  const draft = await draftMode()
  draft.disable()
  return new Response('Draft mode is disabled')
}

----------------------------------------

TITLE: Rendering Custom React Component in Next.js MDX
DESCRIPTION: Demonstrates how to include a custom React component within MDX content. The Greet component is used here, showcasing the integration of React components in Markdown.

LANGUAGE: jsx
CODE:
<Greet name="next-mdx-remote" />

----------------------------------------

TITLE: Creating Next.js Project with Playwright
DESCRIPTION: Command to create a new Next.js project with Playwright pre-configured using create-next-app

LANGUAGE: bash
CODE:
npx create-next-app@latest --example with-playwright with-playwright-app

----------------------------------------

TITLE: Basic unstable_noStore Usage in Next.js Server Component
DESCRIPTION: Demonstrates how to use unstable_noStore to opt out of static rendering in a Next.js server component. The function is imported from next/cache and called before dynamic operations like database queries.

LANGUAGE: jsx
CODE:
import { unstable_noStore as noStore } from 'next/cache';

export default async function ServerComponent() {
  noStore();
  const result = await db.query(...);
  ...
}

----------------------------------------

TITLE: Migrating Dynamic Paths in App Router
DESCRIPTION: Example of migrating from getStaticPaths in the Pages Router to generateStaticParams in the App Router for generating dynamic routes.

LANGUAGE: jsx
CODE:
// `app` directory
import PostLayout from '@/components/post-layout'

export async function generateStaticParams() {
  return [{ id: '1' }, { id: '2' }]
}

async function getPost(params) {
  const res = await fetch(`https://.../posts/${(await params).id}`)
  const post = await res.json()

  return post
}

export default async function Post({ params }) {
  const post = await getPost(params)

  return <PostLayout post={post} />
}

----------------------------------------

TITLE: Implementing Custom 404 Page in Next.js
DESCRIPTION: Creates a custom 404 error page that is statically generated at build time. This can be enhanced with getStaticProps for data fetching if needed.

LANGUAGE: jsx
CODE:
export default function Custom404() {
  return <h1>404 - Page Not Found</h1>
}

----------------------------------------

TITLE: Configuring Next.js Speed Insights in next.config.js
DESCRIPTION: This snippet shows how to enable Next.js Speed Insights in the next.config.js file. It demonstrates setting up analytics with various options including a custom endpoint and debugging mode.

LANGUAGE: javascript
CODE:
module.exports = {
  experimental: {
    speedInsights: {
      enabled: true,
      // Use a custom endpoint
      endpoint: 'https://your-endpoint.com',
      // Enable debug mode
      debug: true,
    },
  },
}

----------------------------------------

TITLE: Configuring Static Generation Options in Next.js (TypeScript)
DESCRIPTION: This snippet demonstrates how to configure experimental static generation options in a Next.js application using TypeScript. It sets values for retry count, max concurrency, and minimum pages per worker.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    staticGenerationRetryCount: 1,
    staticGenerationMaxConcurrency: 8,
    staticGenerationMinPagesPerWorker: 25,
  },
}

export default nextConfig

----------------------------------------

TITLE: Configuring PostCSS for Tailwind
DESCRIPTION: PostCSS configuration setup for Tailwind CSS integration with plugin configuration.

LANGUAGE: javascript
CODE:
/** @type {import('tailwindcss').Config} */
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
}

----------------------------------------

TITLE: Configuring Bundle Analyzer in Next.js
DESCRIPTION: Configuration setup for @next/bundle-analyzer in next.config.js. Enables bundle analysis when ANALYZE environment variable is set to true.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {}

const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
})

module.exports = withBundleAnalyzer(nextConfig)

----------------------------------------

TITLE: Creating Next.js Project with Reflux using PNPM
DESCRIPTION: Command to create a new Next.js project with Reflux integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-reflux with-reflux-app

----------------------------------------

TITLE: Implementing Google Analytics in Next.js Root Layout (TypeScript)
DESCRIPTION: This snippet demonstrates how to add Google Analytics to all routes in a Next.js application using the App Router and TypeScript. It utilizes the GoogleAnalytics component from @next/third-parties/google in the root layout file.

LANGUAGE: tsx
CODE:
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}

----------------------------------------

TITLE: Outdated Authorization Middleware in Next.js (TypeScript)
DESCRIPTION: An example of outdated Middleware implementation for authorization in Next.js. This code directly returns a JSON response, which is no longer allowed in v12.2+.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { isAuthValid } from './lib/auth'

export function middleware(request: NextRequest) {
  // Example function to validate auth
  if (isAuthValid(request)) {
    return NextResponse.next()
  }

  return NextResponse.json({ message: 'Auth required' }, { status: 401 })
}

----------------------------------------

TITLE: Forwarding Headers with NextResponse in TypeScript
DESCRIPTION: Illustrates how to forward and modify headers when continuing routing using NextResponse.next() method in middleware.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'

// Given an incoming request...
const newHeaders = new Headers(request.headers)
// Add a new header
newHeaders.set('x-version', '123')
// And produce a response with the new headers
return NextResponse.next({
  request: {
    // New request headers
    headers: newHeaders,
  },
})

----------------------------------------

TITLE: Implementing getStaticProps in JavaScript for Next.js
DESCRIPTION: This snippet shows how to use getStaticProps to fetch data from the GitHub API and render it in a Next.js page component using JavaScript. It demonstrates the basic structure without type annotations.

LANGUAGE: javascript
CODE:
export async function getStaticProps() {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}

export default function Page({ repo }) {
  return repo.stargazers_count
}

----------------------------------------

TITLE: Basic Next.js Redirect Configuration
DESCRIPTION: Basic example of configuring redirects in next.config.js using the redirects() function. Shows how to redirect /about to / with a permanent redirect status.

LANGUAGE: javascript
CODE:
module.exports = {
  async redirects() {
    return [
      {
        source: '/about',
        destination: '/',
        permanent: true,
      },
    ]
  },
}

----------------------------------------

TITLE: Localization Dictionary Configuration
DESCRIPTION: Shows the structure of localization dictionaries and implementation of a dictionary loader function for multiple languages.

LANGUAGE: json
CODE:
{
  "products": {
    "cart": "Add to Cart"
  }
}

LANGUAGE: json
CODE:
{
  "products": {
    "cart": "Toevoegen aan Winkelwagen"
  }
}

LANGUAGE: typescript
CODE:
import 'server-only'

const dictionaries = {
  en: () => import('./dictionaries/en.json').then((module) => module.default),
  nl: () => import('./dictionaries/nl.json').then((module) => module.default),
}

export const getDictionary = async (locale: 'en' | 'nl') =>
  dictionaries[locale]()

----------------------------------------

TITLE: Loading Local Fonts in Next.js
DESCRIPTION: Demonstrates how to load and configure local font files using next/font/local in a Next.js application.

LANGUAGE: typescript
CODE:
import localFont from 'next/font/local'

const roboto = localFont({
  src: [
    {
      path: './Roboto-Regular.woff2',
      weight: '400',
      style: 'normal',
    },
    {
      path: './Roboto-Italic.woff2',
      weight: '400',
      style: 'italic',
    },
    {
      path: './Roboto-Bold.woff2',
      weight: '700',
      style: 'normal',
    },
    {
      path: './Roboto-BoldItalic.woff2',
      weight: '700',
      style: 'italic',
    },
  ],
})

----------------------------------------

TITLE: Using CSS Modules with Next.js Components
DESCRIPTION: Shows how to implement component-scoped CSS using CSS Modules in a Next.js component. This method provides CSS isolation and prevents style conflicts between components.

LANGUAGE: jsx
CODE:
import styles from './extra.module.css'

export class Home {
  render() {
    return (
      <div>
        <button type="button" className={styles.active}>
          Open
        </button>
      </div>
    )
  }
}

----------------------------------------

TITLE: Secure Draft Mode Implementation with CMS Integration
DESCRIPTION: Implements a secure draft mode handler with CMS integration, including token validation, slug verification, and proper redirect handling.

LANGUAGE: typescript
CODE:
import { draftMode } from 'next/headers'
import { redirect } from 'next/navigation'

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url)
  const secret = searchParams.get('secret')
  const slug = searchParams.get('slug')

  if (secret !== 'MY_SECRET_TOKEN' || !slug) {
    return new Response('Invalid token', { status: 401 })
  }

  const post = await getPostBySlug(slug)

  if (!post) {
    return new Response('Invalid slug', { status: 401 })
  }

  const draft = await draftMode()
  draft.enable()

  redirect(post.slug)
}

----------------------------------------

TITLE: Creating Next.js App with Mocha Using PNPM
DESCRIPTION: Command to create a new Next.js application with Mocha testing setup using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-mocha with-mocha-app

----------------------------------------

TITLE: Configuring Page Extensions for App Router in Next.js
DESCRIPTION: This snippet shows how to extend page extensions in Next.js App Router to include markdown files. It uses the @next/mdx package and modifies the next.config.js file.

LANGUAGE: javascript
CODE:
const withMDX = require('@next/mdx')()

/** @type {import('next').NextConfig} */
const nextConfig = {
  pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'md', 'mdx'],
}

module.exports = withMDX(nextConfig)

----------------------------------------

TITLE: Configuring Standalone Output in Next.js
DESCRIPTION: Enable automatic copying of traced files for production deployment by setting the 'output' option in next.config.js. This creates a standalone folder with only necessary files.

LANGUAGE: javascript
CODE:
module.exports = {
  output: 'standalone',
}

----------------------------------------

TITLE: Implementing Basic Middleware in Next.js (JavaScript)
DESCRIPTION: This snippet shows how to create a basic middleware function in JavaScript for Next.js. It includes a redirect example and demonstrates path matching configuration.

LANGUAGE: javascript
CODE:
import { NextResponse } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request) {
  return NextResponse.redirect(new URL('/home', request.url))
}

export const config = {
  matcher: '/about/:path*',
}

----------------------------------------

TITLE: Configuring URL Imports in Next.js
DESCRIPTION: This snippet shows how to enable URL imports by adding allowed URL prefixes in the next.config.js file. It's a prerequisite for using URL imports in a Next.js project.

LANGUAGE: javascript
CODE:
module.exports = {
  experimental: {
    urlImports: ['https://example.com/assets/', 'https://cdn.skypack.dev'],
  },
}

----------------------------------------

TITLE: Configuration-based Redirects Setup
DESCRIPTION: Shows how to configure redirects in next.config.js for path-based redirections

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  async redirects() {
    return [
      {
        source: '/about',
        destination: '/',
        permanent: true,
      },
      {
        source: '/blog/:slug',
        destination: '/news/:slug',
        permanent: true,
      },
    ]
  },
}

export default nextConfig

----------------------------------------

TITLE: Using Server Functions with Forms in Next.js
DESCRIPTION: Shows how to use Server Functions with React's extended HTML form element, automatically receiving FormData and extracting data using native FormData methods.

LANGUAGE: typescript
CODE:
import { createPost } from '@/app/actions'

export function Form() {
  return (
    <form action={createPost}>
      <input type="text" name="title" />
      <input type="text" name="content" />
      <button type="submit">Create</button>
    </form>
  )
}

LANGUAGE: javascript
CODE:
import { createPost } from '@/app/actions'

export function Form() {
  return (
    <form action={createPost}>
      <input type="text" name="title" />
      <input type="text" name="content" />
      <button type="submit">Create</button>
    </form>
  )
}

----------------------------------------

TITLE: Valid Static Runtime Config in Next.js
DESCRIPTION: Examples showing correct usage of static runtime configuration.

LANGUAGE: javascript
CODE:
export const config = {
  runtime: 'nodejs',
}
export const config = {
  runtime: `edge`,
}

----------------------------------------

TITLE: Adding Type Safety to Viewport Object in Next.js
DESCRIPTION: Use the Viewport type from Next.js to add type safety to your viewport object configuration.

LANGUAGE: typescript
CODE:
import type { Viewport } from 'next'

export const viewport: Viewport = {
  themeColor: 'black',
}

----------------------------------------

TITLE: Configuring TypeScript Paths in Next.js
DESCRIPTION: Set up absolute imports and module path aliases in a Next.js project by configuring the tsconfig.json or jsconfig.json file.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": "src/",
    "paths": {
      "@/styles/*": ["styles/*"],
      "@/components/*": ["components/*"]
    }
  }
}

----------------------------------------

TITLE: Type-Safe generateViewport Function with Segment Props in Next.js
DESCRIPTION: Define a type-safe generateViewport function that includes segment props (params and searchParams) for dynamic viewport generation.

LANGUAGE: typescript
CODE:
import type { Viewport } from 'next'

type Props = {
  params: Promise<{ id: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}

export function generateViewport({ params, searchParams }: Props): Viewport {
  return {
    themeColor: 'black',
  }
}

export default function Page({ params, searchParams }: Props) {}

----------------------------------------

TITLE: Revalidating Tagged Cache in a Server Action
DESCRIPTION: Example of using revalidateTag in a server action to invalidate cached data. This function adds a post and then revalidates the 'my-data' tag.

LANGUAGE: typescript
CODE:
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('my-data')
}

LANGUAGE: javascript
CODE:
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('my-data')
}

----------------------------------------

TITLE: Implementing getServerSideProps with TypeScript
DESCRIPTION: Example showing how to fetch data from GitHub API using getServerSideProps with TypeScript type definitions. Demonstrates proper typing of props and component parameters.

LANGUAGE: tsx
CODE:
import type { InferGetServerSidePropsType, GetServerSideProps } from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getServerSideProps = (async () => {
  // Fetch data from external API
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo: Repo = await res.json()
  // Pass data to the page via props
  return { props: { repo } }
}) satisfies GetServerSideProps<{ repo: Repo }>

export default function Page({
  repo,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <main>
      <p>{repo.stargazers_count}</p>
    </main>
  )
}

----------------------------------------

TITLE: Basic use cache Implementation Examples
DESCRIPTION: Examples showing how to implement use cache at file, component, and function levels.

LANGUAGE: typescript
CODE:
// File level
'use cache'

export default async function Page() {
  // ...
}

// Component level
export async function MyComponent() {
  'use cache'
  return <></>
}

// Function level
export async function getData() {
  'use cache'
  const data = await fetch('/api/data')
  return data
}

----------------------------------------

TITLE: Configuring Tailwind CSS for App Router
DESCRIPTION: Example of updating the Tailwind CSS configuration to include the new app directory.

LANGUAGE: js
CODE:
module.exports = {
  content: [
    './app/**/*.{js,ts,jsx,tsx,mdx}', // <-- Add this line
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
  ],
}

----------------------------------------

TITLE: Implementing Loading Component in JavaScript
DESCRIPTION: Creates a loading state component in JavaScript that renders during page transitions or data fetching. Can be used as either a Server Component (default) or Client Component with 'use client' directive.

LANGUAGE: javascript
CODE:
export default function Loading() {
  // Or a custom loading skeleton component
  return <p>Loading...</p>
}

----------------------------------------

TITLE: Implementing After Function in Next.js Layout Component
DESCRIPTION: Demonstrates how to use the after function in a Next.js layout component to execute code after the layout is rendered and sent to the user. This example shows basic implementation with a custom logging function.

LANGUAGE: tsx
CODE:
import { after } from 'next/server'
// Custom logging function
import { log } from '@/app/utils'

export default function Layout({ children }: { children: React.ReactNode }) {
  after(() => {
    // Execute after the layout is rendered and sent to the user
    log()
  })
  return <>{children}</>
}

----------------------------------------

TITLE: TypeScript Configuration for src Directory
DESCRIPTION: Example configuration for updating TypeScript paths in tsconfig.json when using the src directory structure.

LANGUAGE: typescript
CODE:
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

----------------------------------------

TITLE: Configuring Static Generation Options in Next.js (JavaScript)
DESCRIPTION: This snippet shows how to configure experimental static generation options in a Next.js application using JavaScript. It sets the same values for retry count, max concurrency, and minimum pages per worker as the TypeScript version.

LANGUAGE: javascript
CODE:
const nextConfig = {
  experimental: {
    staticGenerationRetryCount: 1,
    staticGenerationMaxConcurrency: 8,
    staticGenerationMinPagesPerWorker: 25,
  },
}

export default nextConfig

----------------------------------------

TITLE: Importing Assets with URL Constructor in Next.js
DESCRIPTION: This example shows how to use the URL constructor with import.meta.url to import assets. It demonstrates how Next.js processes these imports and provides a static path for the asset in the build output.

LANGUAGE: javascript
CODE:
const logo = new URL('https://example.com/assets/file.txt', import.meta.url)

console.log(logo.pathname)

// prints "/_next/static/media/file.a9727b5d.txt"

----------------------------------------

TITLE: Implementing Root Layout Scripts in Next.js
DESCRIPTION: Example of loading a third-party script for all routes by including it in the root layout. This ensures the script is available throughout the entire application.

LANGUAGE: typescript
CODE:
import Script from 'next/script'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
      <Script src="https://example.com/script.js" />
    </html>
  )
}

----------------------------------------

TITLE: Forcing SWC Transforms in Next.js Configuration
DESCRIPTION: This code snippet demonstrates how to force the use of SWC transforms in Next.js, even when a custom .babelrc file is present. It uses the experimental 'forceSwcTransforms' option in the next.config.js file.

LANGUAGE: javascript
CODE:
module.exports = {
  experimental: {
    forceSwcTransforms: true,
  },
}

----------------------------------------

TITLE: Creating Next.js App with Rematch Example using PNPM
DESCRIPTION: Command to create a new Next.js application with the Rematch example using PNPM.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-rematch with-rematch-app

----------------------------------------

TITLE: Implementing Middleware with next/server in TypeScript
DESCRIPTION: This snippet demonstrates the correct usage of next/server within a middleware.ts file. It imports necessary types and defines a middleware function that returns a simple response.

LANGUAGE: typescript
CODE:
import type { NextFetchEvent, NextRequest } from 'next/server'

export function middleware(req: NextRequest, ev: NextFetchEvent) {
  return new Response('Hello, world!')
}

----------------------------------------

TITLE: Disabling x-powered-by Header in Next.js Configuration
DESCRIPTION: This code snippet shows how to disable the default x-powered-by header in Next.js by setting the poweredByHeader option to false in the next.config.js file. This configuration affects the entire Next.js application.

LANGUAGE: javascript
CODE:
module.exports = {
  poweredByHeader: false,
}

----------------------------------------

TITLE: Implementing Search Bar Component with useSearchParams in Next.js
DESCRIPTION: A client-side component that uses useSearchParams hook to access search parameters from the URL. This component needs to be wrapped in a Suspense boundary to prevent full page client-side rendering.

LANGUAGE: typescript
CODE:
'use client'

import { useSearchParams } from 'next/navigation'

export default function SearchBar() {
  const searchParams = useSearchParams()

  const search = searchParams.get('search')

  // This will not be logged on the server when using static rendering
  console.log(search)

  return <>Search: {search}</>
}

----------------------------------------

TITLE: Implementing Dynamic Zone Routing with Middleware
DESCRIPTION: Example of using Next.js middleware for dynamic routing decisions between zones based on feature flags.

LANGUAGE: javascript
CODE:
export async function middleware(request) {
  const { pathname, search } = req.nextUrl;
  if (pathname === '/your-path' && myFeatureFlag.isEnabled()) {
    return NextResponse.rewrite(`${rewriteDomain}${pathname}${search});
  }
}

----------------------------------------

TITLE: Configuring Runtime Settings in Next.js Config
DESCRIPTION: Example of setting up serverRuntimeConfig for server-side only values and publicRuntimeConfig for values accessible on both client and server. Shows how to include static values and environment variables.

LANGUAGE: javascript
CODE:
module.exports = {
  serverRuntimeConfig: {
    // Will only be available on the server side
    mySecret: 'secret',
    secondSecret: process.env.SECOND_SECRET, // Pass through env variables
  },
  publicRuntimeConfig: {
    // Will be available on both server and client
    staticFolder: '/static',
  },
}

----------------------------------------

TITLE: Configuring Sass Options in Next.js TypeScript Configuration
DESCRIPTION: This snippet shows how to configure Sass options in a Next.js project using TypeScript. It sets additional data and specifies the Sass implementation as 'sass-embedded'.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const sassOptions = {
  additionalData: `
    $var: red;
  `,
}

const nextConfig: NextConfig = {
  sassOptions: {
    ...sassOptions,
    implementation: 'sass-embedded',
  },
}

export default nextConfig

----------------------------------------

TITLE: Getting Cookies with NextResponse in TypeScript
DESCRIPTION: Shows how to retrieve a cookie value from the response using the cookies.get() method.

LANGUAGE: typescript
CODE:
// Given incoming request /home
let response = NextResponse.next()
// { name: 'show-banner', value: 'false', Path: '/home' }
response.cookies.get('show-banner')

----------------------------------------

TITLE: Importing Runtime-Specific Code in Next.js Instrumentation
DESCRIPTION: This snippet demonstrates how to conditionally import runtime-specific code in a Next.js instrumentation file. It uses the NEXT_RUNTIME environment variable to determine the current runtime and imports the appropriate file.

LANGUAGE: typescript
CODE:
export async function register() {
  if (process.env.NEXT_RUNTIME === 'nodejs') {
    await import('./instrumentation-node')
  }

  if (process.env.NEXT_RUNTIME === 'edge') {
    await import('./instrumentation-edge')
  }
}

LANGUAGE: javascript
CODE:
export async function register() {
  if (process.env.NEXT_RUNTIME === 'nodejs') {
    await import('./instrumentation-node')
  }

  if (process.env.NEXT_RUNTIME === 'edge') {
    await import('./instrumentation-edge')
  }
}

----------------------------------------

TITLE: Creating Next.js App with Turso Template using NPX
DESCRIPTION: Command to create a new Next.js application using the 'with-turso' example template via NPX.

LANGUAGE: bash
CODE:
npx create-next-app --example with-turso with-turso-app

----------------------------------------

TITLE: Disabling Compression in Next.js Configuration
DESCRIPTION: This code snippet shows how to disable compression in Next.js by setting the 'compress' option to false in the next.config.js file. This is useful when compression is already configured on the server.

LANGUAGE: javascript
CODE:
module.exports = {
  compress: false,
}

----------------------------------------

TITLE: Server Component Redirect Implementation in Next.js
DESCRIPTION: Shows how to implement redirect in a Next.js Server Component with error handling and team data fetching.

LANGUAGE: typescript
CODE:
import { redirect } from 'next/navigation'

async function fetchTeam(id: string) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const team = await fetchTeam(id)

  if (!team) {
    redirect('/login')
  }

  // ...
}

----------------------------------------

TITLE: Correct Next.js Data Fetching Method Export
DESCRIPTION: Example showing the correct way to export getStaticProps as a separate named export alongside the page component in Next.js.

LANGUAGE: jsx
CODE:
function Page(props) {
  return <p>hello world</p>
}

export default Page

export const getStaticProps = () => ({
  props: {
    hello: 'world',
  },
})

----------------------------------------

TITLE: AWS CloudFront Image Loader Implementation
DESCRIPTION: Custom image loader function for AWS CloudFront. It generates a URL with parameters for format, width, and quality.

LANGUAGE: javascript
CODE:
export default function cloudfrontLoader({ src, width, quality }) {
  const url = new URL(`https://example.com${src}`)
  url.searchParams.set('format', 'auto')
  url.searchParams.set('width', width.toString())
  url.searchParams.set('quality', (quality || 75).toString())
  return url.href
}

----------------------------------------

TITLE: Configuring React Compiler in Next.js (JavaScript)
DESCRIPTION: JavaScript configuration to enable the React Compiler feature in next.config.js file.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    reactCompiler: true,
  },
}

module.exports = nextConfig

----------------------------------------

TITLE: Configuring Turbopack Options in Next.js (JavaScript)
DESCRIPTION: This snippet shows how to configure Turbopack options in a Next.js configuration file using JavaScript. It demonstrates the structure for adding Turbopack settings under the 'experimental' key.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    turbo: {
      // ...
    },
  },
}

module.exports = nextConfig

----------------------------------------

TITLE: Getting All Cookies with NextRequest
DESCRIPTION: Demonstrates how to retrieve multiple cookies using the cookies.getAll() method. Can return all cookies for a specific name or all cookies on the request.

LANGUAGE: typescript
CODE:
// Given incoming request /home
// [
//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },
//   { name: 'experiments', value: 'winter-launch', Path: '/home' },
// ]
request.cookies.getAll('experiments')
// Alternatively, get all cookies for the request
request.cookies.getAll()

----------------------------------------

TITLE: Configuring basePath in Next.js Configuration File
DESCRIPTION: This snippet demonstrates how to set the basePath option in the next.config.js file. It allows you to specify a path prefix for the application, such as '/docs'.

LANGUAGE: javascript
CODE:
module.exports = {
  basePath: '/docs',
}

----------------------------------------

TITLE: Implementing Interleaved Caching
DESCRIPTION: Advanced example showing how to implement caching with non-serializable arguments using children props and Server Actions.

LANGUAGE: typescript
CODE:
export default async function Page() {
  const uncachedData = await getData()
  return (
    <CacheComponent>
      <DynamicComponent data={uncachedData} />
    </CacheComponent>
  )
}

async function CacheComponent({ children }: { children: ReactNode }) {
  'use cache'
  const cachedData = await fetch('/api/cached-data')
  return (
    <div>
      <PrerenderedComponent data={cachedData} />
      {children}
    </div>
  )
}

----------------------------------------

TITLE: Basic Next.js Middleware Example
DESCRIPTION: Example showing basic middleware implementation with URL redirection and path matching configuration.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request: NextRequest) {
  return NextResponse.redirect(new URL('/home', request.url))
}

// See "Matching Paths" below to learn more
export const config = {
  matcher: '/about/:path*',
}

LANGUAGE: javascript
CODE:
import { NextResponse } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request) {
  return NextResponse.redirect(new URL('/home', request.url))
}

// See "Matching Paths" below to learn more
export const config = {
  matcher: '/about/:path*',
}

----------------------------------------

TITLE: Basic Next.js Middleware Example
DESCRIPTION: Example showing basic middleware implementation with URL redirection and path matching configuration.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request: NextRequest) {
  return NextResponse.redirect(new URL('/home', request.url))
}

// See "Matching Paths" below to learn more
export const config = {
  matcher: '/about/:path*',
}

LANGUAGE: javascript
CODE:
import { NextResponse } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request) {
  return NextResponse.redirect(new URL('/home', request.url))
}

// See "Matching Paths" below to learn more
export const config = {
  matcher: '/about/:path*',
}

----------------------------------------

TITLE: Configuring Resolve Aliases for Turbopack in Next.js
DESCRIPTION: This snippet shows how to set up resolve aliases for Turbopack in a Next.js configuration. It demonstrates how to map imported patterns to new destinations, including conditional aliasing for browser environments.

LANGUAGE: javascript
CODE:
module.exports = {
  experimental: {
    turbo: {
      resolveAlias: {
        underscore: 'lodash',
        mocha: { browser: 'mocha/browser-entry.js' },
      },
    },
  },
}

----------------------------------------

TITLE: Correcting Plugin Instantiation in Next.js PostCSS
DESCRIPTION: Demonstrates the proper way to configure plugins with options using a nested array structure instead of direct instantiation.

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: [
    require('postcss-plugin')({
      optionA: '...',
    }),
  ],
}

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: [
    // Pay attention to this nested array. The first index is the plugin name,
    // the second index is the configuration.
    [
      'postcss-plugin',
      {
        optionA: '...',
      },
    ],
  ],
}

----------------------------------------

TITLE: Implementing Custom Image Loader for Cloudinary in Next.js
DESCRIPTION: This TypeScript function defines a custom image loader for use with Cloudinary in a Next.js static export. It constructs the URL for Cloudinary based on the image source, width, and quality parameters.

LANGUAGE: typescript
CODE:
export default function cloudinaryLoader({
  src,
  width,
  quality,
}: {
  src: string
  width: number
  quality?: number
}) {
  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]
  return `https://res.cloudinary.com/demo/image/upload/${params.join(
    ','
  )}${src}`
}

----------------------------------------

TITLE: Installing Next.js with Filbert using NPX
DESCRIPTION: Command to create a new Next.js application with Filbert.js integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-filbert with-filbert-app

----------------------------------------

TITLE: Configuring MDX Rust Compiler in Next.js
DESCRIPTION: Configuration setup for enabling the experimental Rust-based MDX compiler in next.config.js. This snippet shows how to integrate @next/mdx with the experimental mdxRs flag and configure supported page extensions.

LANGUAGE: javascript
CODE:
const withMDX = require('@next/mdx')()

/** @type {import('next').NextConfig} */
const nextConfig = {
  pageExtensions: ['ts', 'tsx', 'mdx'],
  experimental: {
    mdxRs: true,
  },
}

module.exports = withMDX(nextConfig)

----------------------------------------

TITLE: Generating TypeScript Types
DESCRIPTION: Command to update TypeScript types after editing GROQ queries.

LANGUAGE: bash
CODE:
npm run typegen

----------------------------------------

TITLE: Configuring Allowed Dynamic Code in Next.js Middleware
DESCRIPTION: This code snippet demonstrates how to configure the Next.js Middleware to allow specific files or modules to contain dynamic code evaluation statements that are typically restricted in the Edge Runtime.

LANGUAGE: javascript
CODE:
export const config = {
  unstable_allowDynamic: [
    // allows a single file
    '/lib/utilities.js',
    // use a glob to allow anything in the function-bind 3rd party module
    '**/node_modules/function-bind/**',
  ],
}

----------------------------------------

TITLE: Configuring Turbopack Options in Next.js (TypeScript)
DESCRIPTION: This snippet demonstrates how to set up Turbopack-specific options in a Next.js configuration file using TypeScript. It shows the basic structure for adding Turbopack options under the 'experimental' key.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    turbo: {
      // ...
    },
  },
}

export default nextConfig

----------------------------------------

TITLE: Correct React Hook Usage in Client Component
DESCRIPTION: Fixed implementation showing proper usage of useEffect hook by marking the component as a Client Component using the 'use client' directive.

LANGUAGE: jsx
CODE:
'use client'

import { useEffect } from 'react'

export default function Example() {
  useEffect(() => {
    console.log('in useEffect')
  })
  return <p>Hello world</p>
}

----------------------------------------

TITLE: Generating a Dynamic Web Manifest in Next.js (JavaScript)
DESCRIPTION: This snippet shows how to create a dynamic manifest.js file that returns a Manifest object. It includes the same properties as the TypeScript version, such as name, short_name, description, start_url, display, colors, and icons.

LANGUAGE: javascript
CODE:
export default function manifest() {
  return {
    name: 'Next.js App',
    short_name: 'Next.js App',
    description: 'Next.js App',
    start_url: '/',
    display: 'standalone',
    background_color: '#fff',
    theme_color: '#fff',
    icons: [
      {
        src: '/favicon.ico',
        sizes: 'any',
        type: 'image/x-icon',
      },
    ],
  }
}

----------------------------------------

TITLE: Adding Google Font Preconnect in Next.js Document
DESCRIPTION: Implementation example showing how to add a preconnect resource hint for Google Fonts domain in a Next.js _document.js file. This optimization initiates an early connection to the Google Fonts origin for improved performance.

LANGUAGE: jsx
CODE:
<link rel="preconnect" href="https://fonts.gstatic.com" />

----------------------------------------

TITLE: Caching Token Generation in Next.js
DESCRIPTION: Demonstrates how to properly cache a random token generation by moving it inside a 'use cache' scope. Shows incorrect implementation where token is generated outside cache vs correct implementation inside cache.

LANGUAGE: jsx
CODE:
async function getCachedDate(token: string) {
  "use cache"
  return db.query(token, ...)
}

export default async function Page() {
  const token = crypto.getRandomUUID()
  const data = await getCachedData(token);
  return ...
}

LANGUAGE: jsx
CODE:
async function getCachedDate(token: string) {
  "use cache"
  const token = crypto.getRandomUUID()
  return db.query(token, ...)
}

export default async function Page() {
  const data = await getCachedData();
  return ...
}

----------------------------------------

TITLE: Initializing ImageResponse Constructor in Next.js
DESCRIPTION: This snippet demonstrates how to import and use the ImageResponse constructor from 'next/og'. It shows the available options for configuring the image generation, including dimensions, emoji style, fonts, debugging, and HTTP response options.

LANGUAGE: jsx
CODE:
import { ImageResponse } from 'next/og'

new ImageResponse(
  element: ReactElement,
  options: {
    width?: number = 1200
    height?: number = 630
    emoji?: 'twemoji' | 'blobmoji' | 'noto' | 'openmoji' = 'twemoji',
    fonts?: {
      name: string,
      data: ArrayBuffer,
      weight: number,
      style: 'normal' | 'italic'
    }[]
    debug?: boolean = false

    // Options that will be passed to the HTTP response
    status?: number = 200
    statusText?: string
    headers?: Record<string, string>
  },
)

----------------------------------------

TITLE: Creating Next.js Project with Flow using npx
DESCRIPTION: Command to create a new Next.js project with Flow integration using npx and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-flow with-flow-app

----------------------------------------

TITLE: Unit Testing Next.js Configuration (Experimental)
DESCRIPTION: Demonstrates how to use experimental utilities for unit testing next.config.js files. It uses the unstable_getResponseFromNextConfig function to test redirect configurations.

LANGUAGE: javascript
CODE:
import {
  getRedirectUrl,
  unstable_getResponseFromNextConfig,
} from 'next/experimental/testing/server'

const response = await unstable_getResponseFromNextConfig({
  url: 'https://nextjs.org/test',
  nextConfig: {
    async redirects() {
      return [{ source: '/test', destination: '/test2', permanent: false }]
    },
  },
})
expect(response.status).toEqual(307)
expect(getRedirectUrl(response)).toEqual('https://nextjs.org/test2')

----------------------------------------

TITLE: Configuring Partial Prerendering in Next.js (TypeScript)
DESCRIPTION: This snippet shows how to configure Partial Prerendering in the next.config.ts file. It sets the 'ppr' option to 'incremental' in the experimental settings.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    ppr: 'incremental',
  },
}

export default nextConfig

----------------------------------------

TITLE: Fetching Data in Next.js Server Component
DESCRIPTION: Demonstrates how to use the fetch API within a Next.js Server Component to retrieve blog posts from an API and render them as a list.

LANGUAGE: tsx
CODE:
export default async function Page() {
  let data = await fetch('https://api.vercel.app/blog')
  let posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}

LANGUAGE: jsx
CODE:
export default async function Page() {
  let data = await fetch('https://api.vercel.app/blog')
  let posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}

----------------------------------------

TITLE: Correcting Invalid `suspense` Usage in Next.js Dynamic Imports
DESCRIPTION: This snippet demonstrates how to properly use the `suspense` option with `next/dynamic`. It suggests removing `suspense: true` for older React versions, avoiding `ssr: false` with `suspense: true`, and using `Suspense` fallback instead of a `loading` prop.

LANGUAGE: jsx
CODE:
// Correct usage for React 18+
import dynamic from 'next/dynamic';
import { Suspense } from 'react';

const DynamicComponent = dynamic(() => import('../components/DynamicComponent'), {
  suspense: true
});

function MyComponent() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <DynamicComponent />
    </Suspense>
  );
}

----------------------------------------

TITLE: Using unauthorized in Route Handlers
DESCRIPTION: Example of using the unauthorized function in a Route Handler to ensure only authenticated users can access the endpoint.

LANGUAGE: typescript
CODE:
import { NextRequest, NextResponse } from 'next/server'
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export async function GET(req: NextRequest): Promise<NextResponse> {
  // Verify the user's session
  const session = await verifySession()

  // If no session exists, return a 401 and render unauthorized.tsx
  if (!session) {
    unauthorized()
  }

  // Fetch data
  // ...
}

LANGUAGE: javascript
CODE:
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export async function GET() {
  const session = await verifySession()

  // If the user is not authenticated, return a 401 and render unauthorized.tsx
  if (!session) {
    unauthorized()
  }

  // Fetch data
  // ...
}

----------------------------------------

TITLE: Configuring Webpack DevTool in Next.js Config
DESCRIPTION: Demonstrates how to properly configure webpack devtool setting in next.config.js, ensuring custom devtool is only applied to production builds. The configuration checks for non-development mode before applying custom devtool settings, preventing performance issues in development.

LANGUAGE: javascript
CODE:
module.exports = {
  webpack: (config, options) => {
    if (!options.dev) {
      config.devtool = options.isServer ? false : 'your-custom-devtool'
    }
    return config
  },
}

----------------------------------------

TITLE: Docker Staging Environment Commands
DESCRIPTION: Makefile commands for building and starting the staging environment on port 3002.

LANGUAGE: bash
CODE:
make build-staging
make start-staging

----------------------------------------

TITLE: Configuring trailingSlash in Next.js Configuration
DESCRIPTION: This snippet demonstrates how to set the trailingSlash option to true in the Next.js configuration file. When enabled, URLs without trailing slashes will redirect to their counterparts with trailing slashes.

LANGUAGE: javascript
CODE:
module.exports = {
  trailingSlash: true,
}

----------------------------------------

TITLE: Configuring Experimental Turbotrace in Next.js
DESCRIPTION: Enable and configure the experimental turbotrace feature in next.config.js for faster dependency tracing. Options include log level, detail, context directory, and memory limit.

LANGUAGE: javascript
CODE:
module.exports = {
  experimental: {
    turbotrace: {
      // control the log level of the turbotrace, default is `error`
      logLevel?:
      | 'bug'
      | 'fatal'
      | 'error'
      | 'warning'
      | 'hint'
      | 'note'
      | 'suggestions'
      | 'info',
      // control if the log of turbotrace should contain the details of the analysis, default is `false`
      logDetail?: boolean
      // show all log messages without limit
      // turbotrace only show 1 log message for each categories by default
      logAll?: boolean
      // control the context directory of the turbotrace
      // files outside of the context directory will not be traced
      // set the `outputFileTracingRoot` has the same effect
      // if the `outputFileTracingRoot` and this option are both set, the `experimental.turbotrace.contextDirectory` will be used
      contextDirectory?: string
      // if there is `process.cwd()` expression in your code, you can set this option to tell `turbotrace` the value of `process.cwd()` while tracing.
      // for example the require(process.cwd() + '/package.json') will be traced as require('/path/to/cwd/package.json')
      processCwd?: string
      // control the maximum memory usage of the `turbotrace`, in `MB`, default is `6000`.
      memoryLimit?: number
    },
  },
}

----------------------------------------

TITLE: Handling Dynamic Parameters in Next.js default.js (TypeScript)
DESCRIPTION: TypeScript implementation of a default.js file that handles dynamic route parameters in Next.js Parallel Routes. The function receives params as a Promise containing dynamic route parameters from the root segment to slot's subpages.

LANGUAGE: typescript
CODE:
export default async function Default({
  params,
}: {
  params: Promise<{ artist: string }>
}) {
  const { artist } = await params
}

----------------------------------------

TITLE: Configuring Webpack Loaders for Turbopack in Next.js
DESCRIPTION: This example demonstrates how to configure webpack loaders for use with Turbopack in Next.js. It shows how to set up rules for specific file types, such as SVG files, and specify the loaders to be used.

LANGUAGE: javascript
CODE:
module.exports = {
  experimental: {
    turbo: {
      rules: {
        '*.svg': {
          loaders: ['@svgr/webpack'],
          as: '*.js',
        },
      },
    },
  },
}

----------------------------------------

TITLE: Exporting Configuration in next.config.js for Next.js
DESCRIPTION: This snippet demonstrates how to correctly export configuration options in the next.config.js file for a Next.js project. It shows the basic structure of exporting a module with a configuration object.

LANGUAGE: javascript
CODE:
module.exports = {
  /* config options here */
}

----------------------------------------

TITLE: Disabling File-System Routing in Next.js Configuration
DESCRIPTION: This JavaScript snippet demonstrates how to disable file-system based routing in Next.js by modifying the next.config.js file. This is useful when using a custom server to prevent serving the same content from multiple paths.

LANGUAGE: javascript
CODE:
module.exports = {
  useFileSystemPublicRoutes: false,
}

----------------------------------------

TITLE: Using permanentRedirect in a Next.js Server Component
DESCRIPTION: This example demonstrates how to use permanentRedirect in a Next.js server component. It fetches team data and redirects to the login page if the team is not found. The function is used within an async component and handles potential undefined return values from the fetch operation.

LANGUAGE: jsx
CODE:
import { permanentRedirect } from 'next/navigation'

async function fetchTeam(id) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({ params }) {
  const { id } = await params
  const team = await fetchTeam(id)
  if (!team) {
    permanentRedirect('/login')
  }

  // ...
}

----------------------------------------

TITLE: Caching Route Layouts in Next.js
DESCRIPTION: Implementation of use cache for caching entire routes by applying it to both layout and page components.

LANGUAGE: typescript
CODE:
'use cache'

export default function Layout({ children }: { children: ReactNode }) {
  return <div>{children}</div>
}

----------------------------------------

TITLE: Applying Font Styles with className in Next.js
DESCRIPTION: Demonstrates how to apply font styles using the className property returned by the font loader.

LANGUAGE: tsx
CODE:
<p className={inter.className}>Hello, Next.js!</p>

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to create a local environment file from the example template

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Importing Static Images via URL in Next.js
DESCRIPTION: This example shows how to import a static image from an external URL and use it with Next.js's Image component. It demonstrates the compatibility of URL imports with Next.js built-in components and features like image optimization.

LANGUAGE: javascript
CODE:
import Image from 'next/image'
import logo from 'https://example.com/assets/logo.png'

export default () => (
  <div>
    <Image src={logo} placeholder="blur" />
  </div>
)

----------------------------------------

TITLE: Custom Loading Component with next/dynamic
DESCRIPTION: Demonstrates how to add a custom loading component that displays while the dynamically imported component is being loaded.

LANGUAGE: jsx
CODE:
'use client'

import dynamic from 'next/dynamic'

const WithCustomLoading = dynamic(
  () => import('../components/WithCustomLoading'),
  {
    loading: () => <p>Loading...</p>,
  }
)

export default function Page() {
  return (
    <div>
      {/* The loading component will be rendered while  <WithCustomLoading/> is loading */}
      <WithCustomLoading />
    </div>
  )
}

----------------------------------------

TITLE: On-demand Revalidation with res.revalidate() in Next.js Pages Router
DESCRIPTION: This code snippet demonstrates how to implement on-demand revalidation using res.revalidate() in a Next.js API Route for the Pages Router.

LANGUAGE: ts
CODE:
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // Check for secret to confirm this is a valid request
  if (req.query.secret !== process.env.MY_SECRET_TOKEN) {
    return res.status(401).json({ message: 'Invalid token' })
  }

  try {
    // This should be the actual path not a rewritten path
    // e.g. for "/posts/[id]" this should be "/posts/1"
    await res.revalidate('/posts/1')
    return res.json({ revalidated: true })
  } catch (err) {
    // If there was an error, Next.js will continue
    // to show the last successfully generated page
    return res.status(500).send('Error revalidating')
  }
}

----------------------------------------

TITLE: Using connection() for Request-time Random Values in Next.js
DESCRIPTION: Demonstrates how to use the connection() function to ensure unique random values per request when async API versions are not available. Shows implementation with crypto.randomUUID().

LANGUAGE: jsx
CODE:
export default async function Page() {
  const uuid = crypto.randomUUID()
  return <RequestId id={uuid}>
}

LANGUAGE: jsx
CODE:
import { connection } from 'next/server'

export default async function Page() {
  await connection()
  const uuid = crypto.randomUUID()
  return <RequestId id={uuid}>
}

----------------------------------------

TITLE: Creating Next.js Project with HLS.js using Yarn
DESCRIPTION: Command to create a new Next.js project with HLS.js integration using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-hls-js with-hls-js-app

----------------------------------------

TITLE: Creating Next.js App with GraphQL API Routes using npm
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with GraphQL API routes. It utilizes npm to set up the project named 'api-routes-graphql-app'.

LANGUAGE: bash
CODE:
npx create-next-app --example api-routes-graphql api-routes-graphql-app

----------------------------------------

TITLE: Configuring Custom Image Loader
DESCRIPTION: Next.js configuration for setting up a custom image loader using the loaderFile option in next.config.js.

LANGUAGE: javascript
CODE:
module.exports = {
  images: {
    loader: 'custom',
    loaderFile: './my/image/loader.js',
  },
}

----------------------------------------

TITLE: Publishing Messages to Ably Channel
DESCRIPTION: Example of publishing messages to an Ably channel using the channel instance

LANGUAGE: javascript
CODE:
channel.publish("test-message", { text: "message text" });

----------------------------------------

TITLE: Client-side Data Fetching with useEffect in Next.js
DESCRIPTION: This example demonstrates client-side data fetching using the useEffect hook in a Next.js component. It includes state management and conditional rendering based on the fetched data.

LANGUAGE: tsx
CODE:
'use client'

import { useState, useEffect } from 'react'

export function Posts() {
  const [posts, setPosts] = useState(null)

  useEffect(() => {
    async function fetchPosts() {
      const res = await fetch('https://api.vercel.app/blog')
      const data = await res.json()
      setPosts(data)
    }
    fetchPosts()
  }, [])

  if (!posts) return <div>Loading...</div>

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}

----------------------------------------

TITLE: Configuring Rewrites to External URLs in Next.js
DESCRIPTION: This snippet demonstrates how to set up rewrites to external URLs, which is useful for incremental adoption of Next.js. It shows how to rewrite both static and dynamic paths to an external site.

LANGUAGE: javascript
CODE:
module.exports = {
  async rewrites() {
    return [
      {
        source: '/blog',
        destination: 'https://example.com/blog',
      },
      {
        source: '/blog/:slug',
        destination: 'https://example.com/blog/:slug',
      },
    ]
  },
}

----------------------------------------

TITLE: Configuring Package Transpilation
DESCRIPTION: Next.js configuration for transpiling specific packages using the transpilePackages option.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  transpilePackages: ['package-name'],
}

module.exports = nextConfig

----------------------------------------

TITLE: Creating a Static XML Sitemap in Next.js
DESCRIPTION: Example of a static sitemap.xml file for smaller Next.js applications. It includes URLs with lastmod, changefreq, and priority attributes.

LANGUAGE: xml
CODE:
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>https://acme.com</loc>
    <lastmod>2023-04-06T15:02:24.021Z</lastmod>
    <changefreq>yearly</changefreq>
    <priority>1</priority>
  </url>
  <url>
    <loc>https://acme.com/about</loc>
    <lastmod>2023-04-06T15:02:24.021Z</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>
  <url>
    <loc>https://acme.com/blog</loc>
    <lastmod>2023-04-06T15:02:24.021Z</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.5</priority>
  </url>
</urlset>

----------------------------------------

TITLE: Theme Detection CSS for Images
DESCRIPTION: CSS module for implementing light/dark theme detection with the Image component.

LANGUAGE: css
CODE:
.imgDark {
  display: none;
}

@media (prefers-color-scheme: dark) {
  .imgLight {
    display: none;
  }
  .imgDark {
    display: unset;
  }
}

----------------------------------------

TITLE: Creating Next.js App with Inngest Example using Bun
DESCRIPTION: Command to create a new Next.js application with the Inngest example using Bun's create-next-app.

LANGUAGE: bash
CODE:
bunx create-next-app --example inngest inngest-app

----------------------------------------

TITLE: Disabling Incoming Request Logging in Next.js
DESCRIPTION: Completely disable incoming request logging in development mode by setting the incomingRequests option to false.

LANGUAGE: javascript
CODE:
module.exports = {
  logging: {
    incomingRequests: false,
  },
}

----------------------------------------

TITLE: Using Absolute Imports in Next.js Components
DESCRIPTION: Demonstrate the usage of absolute imports and module path aliases in a Next.js component file after configuring paths in tsconfig.json or jsconfig.json.

LANGUAGE: tsx
CODE:
import Button from '@/components/button'
import '@/styles/styles.css'

export default function HomePage() {
  return (
    <div>
      <h1>Hello World</h1>
      <Button />
    </div>
  )
}

----------------------------------------

TITLE: Invalidating Tagged Cache in a Server Action
DESCRIPTION: Example of invalidating a tagged cache using revalidateTag in a server action. This function updates booking data and then revalidates the 'bookings-data' tag.

LANGUAGE: typescript
CODE:
'use server'

import { revalidateTag } from 'next/cache'

export async function updateBookings() {
  await updateBookingData()
  revalidateTag('bookings-data')
}

LANGUAGE: javascript
CODE:
'use server'

import { revalidateTag } from 'next/cache'

export async function updateBookings() {
  await updateBookingData()
  revalidateTag('bookings-data')
}

----------------------------------------

TITLE: Setting Custom Response Size Limit in Next.js API Route
DESCRIPTION: This code snippet demonstrates how to set a custom response size limit for a Next.js API Route. The example sets the limit to 8MB using a string format. The responseLimit can accept numeric values in bytes or string formats supported by the bytes module.

LANGUAGE: javascript
CODE:
export const config = {
  api: {
    responseLimit: '8mb',
  },
}

----------------------------------------

TITLE: Configuring Environment Variables in Next.js Config
DESCRIPTION: Demonstrates how to add custom environment variables to the JavaScript bundle using the next.config.js file. This configuration makes the variables available through process.env at build time.

LANGUAGE: javascript
CODE:
module.exports = {
  env: {
    customKey: 'my-value',
  },
}

----------------------------------------

TITLE: Defining Middleware Function in Next.js (JavaScript)
DESCRIPTION: This snippet shows how to define a basic middleware function in JavaScript for Next.js, demonstrating the structure without TypeScript type annotations.

LANGUAGE: javascript
CODE:
export function middleware(request) {
  // Middleware logic goes here
}

----------------------------------------

TITLE: Implementing getStaticPaths and getStaticProps in TypeScript
DESCRIPTION: This snippet demonstrates how to use getStaticPaths and getStaticProps to pre-render dynamic routes in a Next.js TypeScript project. It fetches repository data from the GitHub API and generates static pages.

LANGUAGE: typescript
CODE:
import type {
  InferGetStaticPropsType,
  GetStaticProps,
  GetStaticPaths,
} from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getStaticPaths = (async () => {
  return {
    paths: [
      {
        params: {
          name: 'next.js',
        },
      }, // See the "paths" section below
    ],
    fallback: true, // false or "blocking"
  }
}) satisfies GetStaticPaths

export const getStaticProps = (async (context) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}) satisfies GetStaticProps<{
  repo: Repo
}>

export default function Page({
  repo,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  return repo.stargazers_count
}

----------------------------------------

TITLE: Displaying Content Based on Route Parameters in Next.js Layout
DESCRIPTION: This snippet demonstrates how to use dynamic route segments to display or fetch specific content in a Next.js layout component based on the params prop.

LANGUAGE: tsx
CODE:
export default async function DashboardLayout({
  children,
  params,
}: {
  children: React.ReactNode
  params: Promise<{ team: string }>
}) {
  const { team } = await params

  return (
    <section>
      <header>
        <h1>Welcome to {team}'s Dashboard</h1>
      </header>
      <main>{children}</main>
    </section>
  )
}

LANGUAGE: jsx
CODE:
export default async function DashboardLayout({ children, params }) {
  const { team } = await params

  return (
    <section>
      <header>
        <h1>Welcome to {team}'s Dashboard</h1>
      </header>
      <main>{children}</main>
    </section>
  )
}

----------------------------------------

TITLE: Implementing Forbidden Component in Next.js (JavaScript)
DESCRIPTION: This snippet shows how to create a custom Forbidden component in Next.js using JavaScript. It displays a message and a link to return to the home page when access is denied.

LANGUAGE: jsx
CODE:
import Link from 'next/link'

export default function Forbidden() {
  return (
    <div>
      <h2>Forbidden</h2>
      <p>You are not authorized to access this resource.</p>
      <Link href="/">Return Home</Link>
    </div>
  )
}

----------------------------------------

TITLE: Creating Next.js App with Cookies Management using Yarn
DESCRIPTION: Command to create a new Next.js application with cookie management functionality using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-cookies-next with-cookies-next-app

----------------------------------------

TITLE: Path Parameter Redirect Configuration
DESCRIPTION: Example showing how to configure redirects with path parameters, allowing dynamic path segments to be captured and used in the destination URL.

LANGUAGE: javascript
CODE:
module.exports = {
  async redirects() {
    return [
      {
        source: '/old-blog/:slug',
        destination: '/news/:slug',
        permanent: true,
      },
    ]
  },
}

----------------------------------------

TITLE: Starting Redis Stack Server with Docker Compose
DESCRIPTION: This command starts the Redis Stack server using Docker Compose for local development.

LANGUAGE: bash
CODE:
docker compose up -d

----------------------------------------

TITLE: Creating Next.js Project with Reflux using NPX
DESCRIPTION: Command to create a new Next.js project with Reflux integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-reflux with-reflux-app

----------------------------------------

TITLE: Creating Next.js App with Middleware Matcher using NPX
DESCRIPTION: Command to create a new Next.js application with middleware matcher example using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example middleware-matcher middleware-matcher-app

----------------------------------------

TITLE: Configuring optimizePackageImports in Next.js
DESCRIPTION: This snippet demonstrates how to add a package to the 'optimizePackageImports' experimental option in the Next.js configuration file. This optimization only loads the modules actually being used, improving performance while maintaining convenience.

LANGUAGE: javascript
CODE:
module.exports = {
  experimental: {
    optimizePackageImports: ['package-name'],
  },
}

----------------------------------------

TITLE: Installing TypeScript with Yarn
DESCRIPTION: Command to install TypeScript as a dev dependency using Yarn in a Next.js project.

LANGUAGE: shell
CODE:
yarn install --save-dev typescript

----------------------------------------

TITLE: Advanced Error Page Component in Next.js
DESCRIPTION: Creates a custom Error component that handles both client and server-side errors. This component includes getInitialProps for dynamic error code handling.

LANGUAGE: jsx
CODE:
function Error({ statusCode }) {
  return (
    <p>
      {statusCode
        ? `An error ${statusCode} occurred on server`
        : 'An error occurred on client'}
    </p>
  )
}

Error.getInitialProps = ({ res, err }) => {
  const statusCode = res ? res.statusCode : err ? err.statusCode : 404
  return { statusCode }
}

export default Error

----------------------------------------

TITLE: Implementing WASM Module Import in Next.js Middleware
DESCRIPTION: Demonstrates the correct way to use WebAssembly in Next.js Middleware by importing WASM modules using the ?module suffix. The example shows how to instantiate a WASM module, execute a square function, and set the result in response headers.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'
import squareWasm from './square.wasm?module'

export default async function middleware() {
  const m = await WebAssembly.instantiate(squareWasm)
  const answer = m.exports.square(9)
  const response = NextResponse.next()

  response.headers.set('x-square', answer.toString())
  return response
}

----------------------------------------

TITLE: Creating Next.js Project with Turbopack using NPX
DESCRIPTION: This command uses npx to create a new Next.js project with Turbopack integration. It utilizes the 'with-turbopack' example template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-turbopack with-turbopack-app

----------------------------------------

TITLE: Rendering Optimized Images with Next.js
DESCRIPTION: Uses the Next.js Image component to display photos with specified dimensions, priority loading, and custom CSS classes. Each image is followed by a link to its source on Unsplash.

LANGUAGE: JSX
CODE:
<Image
  src="/images/photo2.jpg"
  alt="Photo"
  width={1125}
  height={750}
  priority
  className="next-image"
/>
[Unsplash ↗ ](https://unsplash.com/photos/WeYamle9fDM)

<Image
  src="/images/photo.jpg"
  alt="Photo"
  width={1125}
  height={750}
  priority
  className="next-image"
/>
[Unsplash ↗ ](https://unsplash.com/photos/ndN00KmbJ1c)

----------------------------------------

TITLE: Generating a Localized Sitemap in Next.js
DESCRIPTION: Example of generating a localized sitemap using the 'alternates' property in a sitemap.ts file. This helps search engines understand language variations of web pages.

LANGUAGE: typescript
CODE:
import type { MetadataRoute } from 'next'

export default function sitemap(): MetadataRoute.Sitemap {
  return [
    {
      url: 'https://acme.com',
      lastModified: new Date(),
      alternates: {
        languages: {
          es: 'https://acme.com/es',
          de: 'https://acme.com/de',
        },
      },
    },
    {
      url: 'https://acme.com/about',
      lastModified: new Date(),
      alternates: {
        languages: {
          es: 'https://acme.com/es/about',
          de: 'https://acme.com/de/about',
        },
      },
    },
    {
      url: 'https://acme.com/blog',
      lastModified: new Date(),
      alternates: {
        languages: {
          es: 'https://acme.com/es/blog',
          de: 'https://acme.com/de/blog',
        },
      },
    },
  ]
}

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to run the Next.js development server using different package managers. This allows developers to start working on their Next.js project locally.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Configuring Middleware Matcher for CSP
DESCRIPTION: Defines path matching rules for the Middleware to apply CSP headers selectively. Excludes API routes, static files, image optimization files, and favicon from CSP application.

LANGUAGE: typescript
CODE:
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    {
      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',
      missing: [
        { type: 'header', key: 'next-router-prefetch' },
        { type: 'header', key: 'purpose', value: 'prefetch' },
      ],
    },
  ],
}

----------------------------------------

TITLE: Installing Next.js Shallow Routing Example with NPX
DESCRIPTION: Creates a new Next.js application with shallow routing functionality using NPX command line tool.

LANGUAGE: bash
CODE:
npx create-next-app --example with-shallow-routing with-shallow-routing-app

----------------------------------------

TITLE: Updated Middleware Implementation Using URLPattern in Next.js
DESCRIPTION: This code snippet demonstrates the recommended approach for handling locale and slug parameters in Next.js middleware using URLPattern. It defines patterns for URL matching, extracts parameters, and performs redirection based on the extracted locale and slug.

LANGUAGE: typescript
CODE:
import { NextRequest, NextResponse } from 'next/server'

const PATTERNS = [
  [
    new URLPattern({ pathname: '/:locale/:slug' }),
    ({ pathname }) => pathname.groups,
  ],
]

const params = (url) => {
  const input = url.split('?')[0]
  let result = {}

  for (const [pattern, handler] of PATTERNS) {
    const patternResult = pattern.exec(input)
    if (patternResult !== null && 'pathname' in patternResult) {
      result = handler(patternResult)
      break
    }
  }
  return result
}

export function middleware(request: NextRequest) {
  const { locale, slug } = params(request.url)

  if (locale && slug) {
    const { search, protocol, host } = request.nextUrl
    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)
    return NextResponse.redirect(url)
  }
}

----------------------------------------

TITLE: Embedding YouTube Video Using Iframe in Next.js
DESCRIPTION: This code snippet shows how to embed a YouTube video in a Next.js page component using an iframe. It includes the allowFullScreen attribute for full-screen playback.

LANGUAGE: jsx
CODE:
export default function Page() {
  return (
    <iframe src="https://www.youtube.com/embed/19g66ezsKAg" allowFullScreen />
  )
}

----------------------------------------

TITLE: Wrapping Third-party Components for Client-side Use
DESCRIPTION: Shows how to wrap third-party components that use client-side features in a Client Component to use them in Server Components.

LANGUAGE: typescript
CODE:
'use client'

import { Carousel } from 'acme-carousel'

export default Carousel

----------------------------------------

TITLE: Akamai Image Loader Implementation
DESCRIPTION: Custom image loader function for Akamai's Image and Video Manager. It generates a URL with the specified width parameter.

LANGUAGE: javascript
CODE:
export default function akamaiLoader({ src, width, quality }) {
  return `https://example.com/${src}?imwidth=${width}`
}

----------------------------------------

TITLE: Implementing Custom Document Component in Next.js
DESCRIPTION: This code snippet demonstrates how to correctly implement a custom Document component in Next.js. It imports necessary components from 'next/document', defines a MyDocument class extending Document, and includes methods for getInitialProps and render.

LANGUAGE: jsx
CODE:
import Document, { Html, Head, Main, NextScript } from 'next/document'

class MyDocument extends Document {
  static async getInitialProps(ctx) {
    //...
  }

  render() {
    return (
      <Html>
        <Head></Head>
      </Html>
    )
  }
}

export default MyDocument

----------------------------------------

TITLE: URL Rewriting with NextResponse in TypeScript
DESCRIPTION: Shows how to rewrite (proxy) a URL while preserving the original URL in the browser using NextResponse.rewrite() method.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'

// Incoming request: /about, browser shows /about
// Rewritten request: /proxy, browser shows /about
return NextResponse.rewrite(new URL('/proxy', request.url))

----------------------------------------

TITLE: Generating Package Tarballs
DESCRIPTION: Command to generate local tarballs for Next.js packages for integration testing

LANGUAGE: bash
CODE:
pnpm pack-next

----------------------------------------

TITLE: Correct Structure for getStaticPaths in Next.js
DESCRIPTION: This snippet demonstrates the correct return value shape for the `getStaticPaths` function in Next.js. It includes the required 'paths' array and 'fallback' boolean properties.

LANGUAGE: javascript
CODE:
export async function getStaticPaths() {
  return {
    paths: Array<string | { params: { [key: string]: string } }>,
    fallback: boolean
  }
}

----------------------------------------

TITLE: Runtime-Specific Instrumentation in Next.js
DESCRIPTION: Example of conditional instrumentation configuration based on the runtime environment (Edge or Node.js) using process.env.NEXT_RUNTIME.

LANGUAGE: javascript
CODE:
export function register() {
  if (process.env.NEXT_RUNTIME === 'edge') {
    return require('./register.edge')
  } else {
    return require('./register.node')
  }
}

export function onRequestError() {
  if (process.env.NEXT_RUNTIME === 'edge') {
    return require('./on-request-error.edge')
  } else {
    return require('./on-request-error.node')
  }
}

----------------------------------------

TITLE: Configuring ESLint Directories in Next.js Config
DESCRIPTION: Specifies which directories to run ESLint on during production builds using the 'eslint' config in next.config.js.

LANGUAGE: javascript
CODE:
module.exports = {
  eslint: {
    dirs: ['pages', 'utils'], // Only run ESLint on the 'pages' and 'utils' directories during production builds (next build)
  },
}

----------------------------------------

TITLE: Basic Usage of create-next-app CLI in Bash
DESCRIPTION: Demonstrates the basic command to create a new Next.js application using create-next-app. The command allows specifying a project name and additional options.

LANGUAGE: bash
CODE:
npx create-next-app@latest [project-name] [options]

----------------------------------------

TITLE: Current NextJS Middleware Implementation
DESCRIPTION: Shows the current request-based middleware implementation pattern. This version directly accepts the request parameter and returns the NextResponse object instead of using respondWith().

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'

export function middleware(request) {
  if (request.nextUrl.pathname === '/blocked') {
    return new NextResponse(null, {
      status: 403,
    })
  }
}

----------------------------------------

TITLE: Deleting Cookies with NextResponse in TypeScript
DESCRIPTION: Shows how to delete a cookie from the response using the cookies.delete() method.

LANGUAGE: typescript
CODE:
// Given incoming request /home
let response = NextResponse.next()
// Returns true for deleted, false is nothing is deleted
response.cookies.delete('experiments')

----------------------------------------

TITLE: Creating Entrypoint Page in Next.js
DESCRIPTION: Example of an entrypoint page file (page.tsx) in Next.js, which serves as the main application page and includes client-side rendering setup.

LANGUAGE: typescript
CODE:
import '../../index.css'
import { ClientOnly } from './client'

export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return <ClientOnly />
}

----------------------------------------

TITLE: Accessing Dynamic Route Parameters in Next.js Layout
DESCRIPTION: This example demonstrates how to access dynamic route parameters in a Next.js layout component using the params prop. It's useful for customizing layouts based on route information.

LANGUAGE: tsx
CODE:
export default async function Layout({
  params,
}: {
  params: Promise<{ team: string }>
}) {
  const { team } = await params
}

LANGUAGE: jsx
CODE:
export default async function Layout({ params }) {
  const { team } = await params
}

----------------------------------------

TITLE: Implementing Role-based Route Protection in Next.js
DESCRIPTION: Use the forbidden function to restrict access to certain routes based on user roles in a Next.js application.

LANGUAGE: typescript
CODE:
import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'

export default async function AdminPage() {
  const session = await verifySession()

  // Check if the user has the 'admin' role
  if (session.role !== 'admin') {
    forbidden()
  }

  // Render the admin page for authorized users
  return (
    <main>
      <h1>Admin Dashboard</h1>
      <p>Welcome, {session.user.name}!</p>
    </main>
  )
}

LANGUAGE: javascript
CODE:
import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'

export default async function AdminPage() {
  const session = await verifySession()

  // Check if the user has the 'admin' role
  if (session.role !== 'admin') {
    forbidden()
  }

  // Render the admin page for authorized users
  return (
    <main>
      <h1>Admin Dashboard</h1>
      <p>Welcome, {session.user.name}!</p>
    </main>
  )
}

----------------------------------------

TITLE: Creating Next.js WebWorker Project with Yarn
DESCRIPTION: Command to create a new Next.js project with WebWorker support using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-web-worker with-web-worker-app

----------------------------------------

TITLE: Regex Path Matching Redirect
DESCRIPTION: Shows how to use regex patterns in redirect paths to match specific formats like numeric IDs.

LANGUAGE: javascript
CODE:
module.exports = {
  async redirects() {
    return [
      {
        source: '/post/:slug(\\d{1,})',
        destination: '/news/:slug',
        permanent: false,
      },
    ]
  },
}

----------------------------------------

TITLE: Creating Next.js App with Apollo using Yarn
DESCRIPTION: Command to create a new Next.js application with Apollo integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-apollo with-apollo-app

----------------------------------------

TITLE: Fetching Data with ORM in Next.js Server Component
DESCRIPTION: This example shows how to fetch data using an ORM or database in a Next.js Server Component. It uses an async function to await the database query and render a list of blog posts.

LANGUAGE: tsx
CODE:
import { db, posts } from '@/lib/db'

export default async function Page() {
  const allPosts = await db.select().from(posts)
  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}

LANGUAGE: jsx
CODE:
import { db, posts } from '@/lib/db'

export default async function Page() {
  const allPosts = await db.select().from(posts)
  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}

----------------------------------------

TITLE: Configuring Incoming Request Logging in Next.js
DESCRIPTION: Configure which incoming requests to ignore during development logging. Allows specifying regex patterns to filter out specific request paths from being logged.

LANGUAGE: javascript
CODE:
module.exports = {
  logging: {
    incomingRequests: {
      ignore: [/\api\/v1\/health/],
    },
  },
}

----------------------------------------

TITLE: Creating Next.js App with Joi using PNPM
DESCRIPTION: Command to create a new Next.js application with joi validation example using pnpm create

LANGUAGE: bash
CODE:
pnpm create next-app --example with-joi with-joi-app

----------------------------------------

TITLE: Creating Next.js App with Prefetching using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with prefetching example. It utilizes the create next-app command and specifies the with-prefetching example template.

LANGUAGE: bash
CODE:
yarn create next-app --example with-prefetching with-prefetching-app

----------------------------------------

TITLE: Implementing Partial Prerendering in Next.js Page (JavaScript)
DESCRIPTION: This code snippet illustrates how to implement Partial Prerendering in a Next.js page component using JavaScript. It shows the usage of the 'experimental_ppr' flag and combines static and dynamic components with Suspense.

LANGUAGE: javascript
CODE:
import { Suspense } from "react"
import { StaticComponent, DynamicComponent, Fallback } from "@/app/ui"

export const experimental_ppr = true

export default function Page() {
  return {
     <>
      <StaticComponent />
      <Suspense fallback={<Fallback />}>
        <DynamicComponent />
      </Suspense>
     </>
  };
}

----------------------------------------

TITLE: Initializing Next.js Project with Neo4j Integration using npm
DESCRIPTION: Command to create a new Next.js project with Neo4j integration using npm and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-neo4j with-neo4j-app

----------------------------------------

TITLE: Configuring CircleCI Cache for Next.js Builds
DESCRIPTION: This YAML configuration snippet shows how to set up caching for Next.js builds in CircleCI. It includes caching for node_modules and the Next.js cache directory.

LANGUAGE: yaml
CODE:
steps:
  - save_cache:
      key: dependency-cache-{{ checksum "yarn.lock" }}
      paths:
        - ./node_modules
        - ./.next/cache

----------------------------------------

TITLE: Configuring Next.js with TypeScript
DESCRIPTION: TypeScript configuration for next.config.ts showing how to properly type Next.js configuration options using the NextConfig type.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  /* config options here */
}

export default nextConfig

----------------------------------------

TITLE: Creating Next.js App with Framer Motion using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with Framer Motion integration.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-framer-motion with-framer-motion-app

----------------------------------------

TITLE: Sending Web Vitals Results to External Analytics Systems
DESCRIPTION: This snippet demonstrates how to send Web Vitals results to an external analytics endpoint. It uses navigator.sendBeacon() with a fallback to fetch() for sending the data.

LANGUAGE: js
CODE:
useReportWebVitals((metric) => {
  const body = JSON.stringify(metric)
  const url = 'https://example.com/analytics'

  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.
  if (navigator.sendBeacon) {
    navigator.sendBeacon(url, body)
  } else {
    fetch(url, { body, method: 'POST', keepalive: true })
  }
})

----------------------------------------

TITLE: Using Short-lived Cache in Next.js
DESCRIPTION: This snippet demonstrates how to use a short-lived cache with 'use cache' directive in Next.js, setting an appropriate cache life for prerendering.

LANGUAGE: jsx
CODE:
async function getDashboard() {
  "use cache"
  // This cache will revalidate after 1 minute. It's long enough that
  // Next.js will still produce a fully or partially prerendered page
  cacheLife('minutes')
  return db.query(...)
}

export default async function Page() {
  const data = await getDashboard(token);
  return <Dashboard data={data}>
}

----------------------------------------

TITLE: Creating Next.js App with GraphQL API Routes using pnpm
DESCRIPTION: This command uses create-next-app with pnpm to bootstrap a new Next.js project with GraphQL API routes. It initializes the project named 'api-routes-graphql-app'.

LANGUAGE: bash
CODE:
pnpm create next-app --example api-routes-graphql api-routes-graphql-app

----------------------------------------

TITLE: Creating Dynamic Cache Tags from External Data
DESCRIPTION: Example of creating cache tags dynamically using data returned from an async function. The cache is tagged with both a static string and a dynamic ID.

LANGUAGE: typescript
CODE:
import { unstable_cacheTag as cacheTag } from 'next/cache'

interface BookingsProps {
  type: string
}

export async function Bookings({ type = 'haircut' }: BookingsProps) {
  async function getBookingsData() {
    'use cache'
    const data = await fetch(`/api/bookings?type=${encodeURIComponent(type)}`)
    cacheTag('bookings-data', data.id)
    return data
  }
  return //...
}

LANGUAGE: javascript
CODE:
import { unstable_cacheTag as cacheTag } from 'next/cache'

export async function Bookings({ type = 'haircut' }) {
  async function getBookingsData() {
    'use cache'
    const data = await fetch(`/api/bookings?type=${encodeURIComponent(type)}`)
    cacheTag('bookings-data', data.id)
    return data
  }
  return //...
}

----------------------------------------

TITLE: Importing Files with Side Effects in Next.js Instrumentation
DESCRIPTION: This example shows how to import a file with side effects within the register function of a Next.js instrumentation file. It uses dynamic import to load a package that may have global side effects.

LANGUAGE: typescript
CODE:
export async function register() {
  await import('package-with-side-effect')
}

LANGUAGE: javascript
CODE:
export async function register() {
  await import('package-with-side-effect')
}

----------------------------------------

TITLE: Implementing Google Analytics in Next.js App Router
DESCRIPTION: Example of how to add Google Analytics to all routes in a Next.js application using the App Router. The GoogleAnalytics component is included in the root layout file.

LANGUAGE: tsx
CODE:
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}

----------------------------------------

TITLE: Fixing Missing Plugin Configuration in Next.js PostCSS
DESCRIPTION: Shows how to properly structure plugin configurations when some plugins require options and others don't, avoiding the common mistake of unnecessary array wrapping.

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: [
    [
      'postcss-plugin-1',
      {
        optionA: '...',
      },
    ],
    // This single-entry array is detected as misconfigured because it's
    // missing the second element. To fix, unwrap the value.
    ['postcss-plugin-2'],
  ],
}

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: [
    [
      'postcss-plugin-1',
      {
        optionA: '...',
      },
    ],
    // Only string:
    'postcss-plugin-2',
  ],
}

----------------------------------------

TITLE: Setting Preview Data in Next.js API Route
DESCRIPTION: This code snippet demonstrates how to set preview data in a Next.js API route using the res.setPreviewData() method.

LANGUAGE: javascript
CODE:
export default function handler(req, res) {
  // ...
  res.setPreviewData({})
  // ...
}

----------------------------------------

TITLE: Enabling Server-Side Debugging with Node.js Inspect Flag
DESCRIPTION: This command starts the Next.js development server with the --inspect flag, allowing for server-side debugging using browser DevTools.

LANGUAGE: bash
CODE:
NODE_OPTIONS='--inspect' next dev

----------------------------------------

TITLE: Importing ESM Packages in Next.js
DESCRIPTION: Examples showing the correct and incorrect ways to import ESM packages in Next.js. ESM packages must be imported using the import statement or dynamic import() function rather than require().

LANGUAGE: javascript
CODE:
// Correct ways to import ESM packages
import { something } from 'package';

// Dynamic import
await import('package');

// Incorrect way
const package = require('package'); // This will cause an error

----------------------------------------

TITLE: Installing TypeScript with pnpm
DESCRIPTION: Command to install TypeScript as a dev dependency using pnpm in a Next.js project.

LANGUAGE: shell
CODE:
pnpm install --save-dev typescript

----------------------------------------

TITLE: Using forbidden in Next.js Server Actions for Mutations
DESCRIPTION: Implement role-based access control for data mutations using the forbidden function in Next.js Server Actions.

LANGUAGE: typescript
CODE:
'use server'

import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateRole(formData: FormData) {
  const session = await verifySession()

  // Ensure only admins can update roles
  if (session.role !== 'admin') {
    forbidden()
  }

  // Perform the role update for authorized users
  // ...
}

LANGUAGE: javascript
CODE:
'use server'

import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateRole(formData) {
  const session = await verifySession()

  // Ensure only admins can update roles
  if (session.role !== 'admin') {
    forbidden()
  }

  // Perform the role update for authorized users
  // ...
}

----------------------------------------

TITLE: Creating Next.js App with React Bootstrap using npm
DESCRIPTION: This command uses npx to create a new Next.js application with react-bootstrap integration. It utilizes the 'with-react-bootstrap' example as a template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-react-bootstrap with-react-bootstrap-app

----------------------------------------

TITLE: Creating Next.js App with Firebase Template using npx
DESCRIPTION: Command to create a new Next.js application with Firebase integration using npx and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-firebase with-firebase-app

----------------------------------------

TITLE: Configuring Webpack 5 in Next.js Configuration
DESCRIPTION: Example of the webpack5 configuration flag in next.config.js that was used to opt-out of Webpack 5. This flag has been removed in Next.js 12 as Webpack 5 is now the only supported version.

LANGUAGE: javascript
CODE:
module.exports = {
  // Webpack 5 is enabled by default
  // You can still use webpack 4 while upgrading to the latest version of Next.js by adding the "webpack5: false" flag
  webpack5: false,
}

----------------------------------------

TITLE: Creating Next.js App with Markdoc using npx
DESCRIPTION: This command uses npx to create a new Next.js application with Markdoc integration. It utilizes the create-next-app package and specifies the markdoc example template.

LANGUAGE: bash
CODE:
npx create-next-app --example markdoc markdoc-app

----------------------------------------

TITLE: Installing Next.js Auth Example with Bun
DESCRIPTION: Creates a new Next.js application with authentication using Bun package manager

LANGUAGE: bash
CODE:
bunx create-next-app --example auth auth-app

----------------------------------------

TITLE: Implementing File-Level Server Actions in Next.js
DESCRIPTION: Demonstrates how to use the use server directive at the file level to mark all functions as server-side. Shows implementation of a createUser function that interacts with a database.

LANGUAGE: tsx
CODE:
'use server'
import { db } from '@/lib/db' // Your database client

export async function createUser(data: { name: string; email: string }) {
  const user = await db.user.create({ data })
  return user
}

LANGUAGE: jsx
CODE:
'use server'
import { db } from '@/lib/db' // Your database client

export async function createUser(data) {
  const user = await db.user.create({ data })
  return user
}

----------------------------------------

TITLE: Implementing File-Level Server Actions in Next.js
DESCRIPTION: Demonstrates how to use the use server directive at the file level to mark all functions as server-side. Shows implementation of a createUser function that interacts with a database.

LANGUAGE: tsx
CODE:
'use server'
import { db } from '@/lib/db' // Your database client

export async function createUser(data: { name: string; email: string }) {
  const user = await db.user.create({ data })
  return user
}

LANGUAGE: jsx
CODE:
'use server'
import { db } from '@/lib/db' // Your database client

export async function createUser(data) {
  const user = await db.user.create({ data })
  return user
}

----------------------------------------

TITLE: Creating Next.js App with MobX State Tree Template using npx
DESCRIPTION: Command to create a new Next.js application using the MobX State Tree example template with npx.

LANGUAGE: bash
CODE:
npx create-next-app --example with-mobx-state-tree with-mobx-state-tree-app

----------------------------------------

TITLE: Using Sass Variables in Next.js Pages Router
DESCRIPTION: Example of importing and using Sass variables in a Next.js _app.js file using the Pages Router.

LANGUAGE: jsx
CODE:
import variables from '../styles/variables.module.scss'

export default function MyApp({ Component, pageProps }) {
  return (
    <Layout color={variables.primaryColor}>
      <Component {...pageProps} />
    </Layout>
  )
}

----------------------------------------

TITLE: Using revalidateTag in a Server Action (TypeScript)
DESCRIPTION: This example demonstrates how to use revalidateTag in a server action. It calls an addPost function and then revalidates the 'posts' tag.

LANGUAGE: ts
CODE:
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('posts')
}

----------------------------------------

TITLE: Installing Next.js Forms Example with NPX
DESCRIPTION: Creates a new Next.js application with forms example using NPX command line tool.

LANGUAGE: bash
CODE:
npx create-next-app --example next-forms next-forms-app

----------------------------------------

TITLE: Implementing Error Tracking in Next.js
DESCRIPTION: Implementation of the onRequestError function to track server errors with a custom observability provider. Handles error reporting with request context and error details.

LANGUAGE: typescript
CODE:
import { type Instrumentation } from 'next'

export const onRequestError: Instrumentation.onRequestError = async (
  err,
  request,
  context
) => {
  await fetch('https://.../report-error', {
    method: 'POST',
    body: JSON.stringify({
      message: err.message,
      request,
      context,
    }),
    headers: {
      'Content-Type': 'application/json',
    },
  })
}

LANGUAGE: javascript
CODE:
export async function onRequestError(err, request, context) {
  await fetch('https://.../report-error', {
    method: 'POST',
    body: JSON.stringify({
      message: err.message,
      request,
      context,
    }),
    headers: {
      'Content-Type': 'application/json',
    },
  })
}

----------------------------------------

TITLE: Correct Usage of 'use server' in Next.js
DESCRIPTION: This code snippet shows the correct way to use the 'use server' directive in Next.js. It exports an async function, which is required for server actions.

LANGUAGE: javascript
CODE:
'use server'

// ✅ This is correct: an async function is exported.
export async function getServerData() {
  return '...'
}

----------------------------------------

TITLE: Installing Next.js Blog Template with Yarn
DESCRIPTION: Command to create a new Next.js blog application using the Cosmic CMS template with Yarn package manager

LANGUAGE: bash
CODE:
yarn create next-app --example cms-cosmic cms-cosmic-app

----------------------------------------

TITLE: Adding Subtitles to Self-Hosted Video in Next.js
DESCRIPTION: This code snippet shows how to add subtitles to a self-hosted video in Next.js, fetching both the video and subtitle files from Vercel Blob.

LANGUAGE: jsx
CODE:
async function VideoComponent({ fileName }) {
  const { blobs } = await list({
    prefix: fileName,
    limit: 2,
  })
  const { url } = blobs[0]
  const { url: captionsUrl } = blobs[1]

  return (
    <video controls preload="none" aria-label="Video player">
      <source src={url} type="video/mp4" />
      <track src={captionsUrl} kind="subtitles" srcLang="en" label="English" />
      Your browser does not support the video tag.
    </video>
  )
}

----------------------------------------

TITLE: Creating Next.js App with MQTT.js Example using npx
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js application with the MQTT.js example. It creates a new directory named 'with-mqtt-js-app' containing the project files.

LANGUAGE: bash
CODE:
npx create-next-app --example with-mqtt-js with-mqtt-js-app

----------------------------------------

TITLE: Updated Next.js Middleware Using userAgent Function
DESCRIPTION: The correct way to parse user agent information in Next.js middleware using the userAgent function imported from next/server. This is the recommended approach for detecting device types.

LANGUAGE: typescript
CODE:
import { NextRequest, NextResponse, userAgent } from 'next/server'

export function middleware(request: NextRequest) {
  const url = request.nextUrl
  const { device } = userAgent(request)
  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'
  url.searchParams.set('viewport', viewport)
  return NextResponse.rewrite(url)
}

----------------------------------------

TITLE: Configuring dynamicIO in Next.js
DESCRIPTION: Enable the dynamicIO flag in next.config.js to use cacheTag. This configuration is required for using the cacheTag function in your Next.js application.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    dynamicIO: true,
  },
}

export default nextConfig

LANGUAGE: javascript
CODE:
const nextConfig = {
  experimental: {
    dynamicIO: true,
  },
}

export default nextConfig

----------------------------------------

TITLE: Setting Revalidation in Next.js Routes
DESCRIPTION: Configure default revalidation time for layouts and pages. Controls caching behavior and rendering frequency.

LANGUAGE: typescript
CODE:
export const revalidate = false
// false | 0 | number

LANGUAGE: javascript
CODE:
export const revalidate = false
// false | 0 | number

----------------------------------------

TITLE: Linking to Dynamic Segments in Next.js
DESCRIPTION: Shows how to create links to dynamic route segments using template literals in Next.js.

LANGUAGE: tsx
CODE:
import Link from 'next/link'

interface Post {
  id: number
  title: string
  slug: string
}

export default function PostList({ posts }: { posts: Post[] }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}

LANGUAGE: jsx
CODE:
import Link from 'next/link'

export default function PostList({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}

----------------------------------------

TITLE: Correct PostCSS Configuration in Next.js (Object Export)
DESCRIPTION: This snippet demonstrates the correct way to configure PostCSS in Next.js by exporting a plain object. It uses process.env to access environment information instead of function parameters.

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: {
    'postcss-plugin': process.env.NODE_ENV === 'production' ? {} : false,
  },
}

----------------------------------------

TITLE: Deleting Query Parameters in Next.js Middleware
DESCRIPTION: Demonstrates how to delete query parameters in Next.js middleware using the searchParams.delete() method. This new functionality allows direct manipulation of URL parameters.

LANGUAGE: typescript
CODE:
import type { NextRequest } from 'next/server'
import { NextResponse } from 'next/server'

export default function middleware(request: NextRequest) {
  const nextUrl = request.nextUrl
  nextUrl.searchParams.delete('key') // <-- this is now possible! 🎉
  return NextResponse.rewrite(nextUrl)
}

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Example of environment variable configuration for Makeswift API settings in .env.local file.

LANGUAGE: bash
CODE:
-- MAKESWIFT_API_HOST=
-- MAKESWIFT_SITE_API_KEY=
++ MAKESWIFT_API_HOST=https://api.makeswift.com
++ MAKESWIFT_SITE_API_KEY=<YOUR_MAKESWIFT_SITE_API_KEY>

----------------------------------------

TITLE: Incorrect Usage of Dynamic href in Next.js Link Component
DESCRIPTION: This code snippet demonstrates the incorrect usage of dynamic href in the Next.js Link component, which causes the 'Dynamic href is not supported in the App Router' error.

LANGUAGE: jsx
CODE:
<Link
  href={{
    pathname: '/route/[slug]',
    query: { slug: '1' },
  }}
>
  link
</Link>

LANGUAGE: jsx
CODE:
<Link href="/route/[slug]?slug=1">link</Link>

----------------------------------------

TITLE: Next.js Security Configuration
DESCRIPTION: Security headers configuration in next.config.js including Content Security Policy and cache control settings for the service worker.

LANGUAGE: javascript
CODE:
module.exports = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin',
          },
        ],
      },
      {
        source: '/sw.js',
        headers: [
          {
            key: 'Content-Type',
            value: 'application/javascript; charset=utf-8',
          },
          {
            key: 'Cache-Control',
            value: 'no-cache, no-store, must-revalidate',
          },
          {
            key: 'Content-Security-Policy',
            value: "default-src 'self'; script-src 'self'",
          },
        ],
      },
    ]
  },
}

----------------------------------------

TITLE: Importing View Transition Component in React
DESCRIPTION: Example of importing the experimental ViewTransition component from React. This import statement shows how to access the unstable API feature.

LANGUAGE: jsx
CODE:
import { unstable_ViewTransition as ViewTransition } from 'react'

----------------------------------------

TITLE: Using next/script Component in Next.js
DESCRIPTION: This snippet demonstrates how to use the Script component from next/script to optimally load third-party scripts in a Next.js application. It shows the basic usage within a React component.

LANGUAGE: jsx
CODE:
import Script from 'next/script'

export default function Dashboard() {
  return (
    <>
      <Script src="https://example.com/script.js" />
    </>
  )
}

----------------------------------------

TITLE: Using revalidateTag in a Server Action (JavaScript)
DESCRIPTION: This example shows the JavaScript version of using revalidateTag in a server action. It performs the same operation as the TypeScript version.

LANGUAGE: js
CODE:
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('posts')
}

----------------------------------------

TITLE: Using next/script Component with Inline Script in Next.js (JSX)
DESCRIPTION: This example shows how to use the next/script component with an inline script using curly braces. The script removes the 'hidden' class from an element with the id 'banner'.

LANGUAGE: jsx
CODE:
<Script id="show-banner">
  {`document.getElementById('banner').classList.remove('hidden')`}
</Script>

----------------------------------------

TITLE: Docker Development Environment Commands
DESCRIPTION: Makefile commands for building and starting the development environment on port 3001.

LANGUAGE: bash
CODE:
make build-development
make start-development

----------------------------------------

TITLE: Using connection() in Next.js Page Component (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the connection() function in a Next.js page component to ensure dynamic rendering at runtime. It includes accessing Math.random() after the connection() call to generate a random number for each request.

LANGUAGE: typescript
CODE:
import { connection } from 'next/server'

export default async function Page() {
  await connection()
  // Everything below will be excluded from prerendering
  const rand = Math.random()
  return <span>{rand}</span>
}

----------------------------------------

TITLE: Configuring Module ID Strategy for Turbopack in Next.js
DESCRIPTION: This snippet demonstrates how to set the module ID strategy for Turbopack in a Next.js configuration. It shows how to specify either 'named' or 'deterministic' strategies for assigning module IDs.

LANGUAGE: javascript
CODE:
module.exports = {
  experimental: {
    turbo: {
      moduleIdStrategy: 'deterministic',
    },
  },
}

----------------------------------------

TITLE: Creating Next.js App with Google Maps Embed using npx
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js application with Google Maps Embed functionality.

LANGUAGE: bash
CODE:
npx create-next-app --example with-google-maps-embed with-google-maps-embed-app

----------------------------------------

TITLE: Creating Next.js App with Supabase Starter Template using pnpm
DESCRIPTION: This command creates a new Next.js application using the Supabase Starter template. It uses pnpm to execute the create-next-app command with the 'with-supabase' example.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-supabase with-supabase-app

----------------------------------------

TITLE: Creating Next.js App with Supabase Starter Template using npx
DESCRIPTION: This command creates a new Next.js application using the Supabase Starter template. It uses npx to execute the create-next-app command with the 'with-supabase' example.

LANGUAGE: bash
CODE:
npx create-next-app --example with-supabase with-supabase-app

----------------------------------------

TITLE: Public Environment Variables in Browser
DESCRIPTION: Example of using NEXT_PUBLIC_ prefixed environment variables in client-side code.

LANGUAGE: js
CODE:
import setupAnalyticsService from '../lib/my-analytics-service'

setupAnalyticsService(process.env.NEXT_PUBLIC_ANALYTICS_ID)

function HomePage() {
  return <h1>Hello World</h1>
}

export default HomePage

----------------------------------------

TITLE: Creating Next.js App with Storybook using PNPM
DESCRIPTION: Command to bootstrap a new Next.js application with Storybook integration using PNPM create.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-storybook with-storybook-app

----------------------------------------

TITLE: Creating Next.js App with MobX State Tree Template using Yarn
DESCRIPTION: Command to create a new Next.js application using the MobX State Tree example template with Yarn.

LANGUAGE: bash
CODE:
yarn create next-app --example with-mobx-state-tree with-mobx-state-tree-app

----------------------------------------

TITLE: Installing Next.js Translation Project with Yarn
DESCRIPTION: Command to create a new Next.js project with next-translate integration using yarn create

LANGUAGE: bash
CODE:
yarn create next-app --example with-next-translate with-next-translate-app

----------------------------------------

TITLE: Configuring localPatterns in next.config.js for Next.js
DESCRIPTION: This code snippet demonstrates how to add an entry to the images.localPatterns array in next.config.js to allow specific URL patterns for the next/image component. It shows how to define a pathname pattern for asset URLs.

LANGUAGE: javascript
CODE:
module.exports = {
  images: {
    localPatterns: [
      {
        pathname: '/assets/**',
        search: '',
      },
    ],
  },
}

----------------------------------------

TITLE: Installing Sharp with Yarn
DESCRIPTION: Command to install the sharp package using Yarn package manager

LANGUAGE: bash
CODE:
yarn add sharp

----------------------------------------

TITLE: TypeScript Import Changes in Next.js 9
DESCRIPTION: Migration guide for updating TypeScript type imports to match Next.js 9's new type definitions

LANGUAGE: typescript
CODE:
import { NextContext } from 'next'
import { NextAppContext, DefaultAppIProps } from 'next/app'
import { NextDocumentContext, DefaultDocumentIProps } from 'next/document'

LANGUAGE: typescript
CODE:
import { NextPageContext } from 'next'
import { AppContext, AppInitialProps } from 'next/app'
import { DocumentContext, DocumentInitialProps } from 'next/document'

----------------------------------------

TITLE: Shallow Routing with Different Pages in Next.js
DESCRIPTION: Demonstrates the limitation of shallow routing when navigating to a different page, which will trigger a full page load.

LANGUAGE: js
CODE:
router.push('/?counter=10', '/about?counter=10', { shallow: true })

----------------------------------------

TITLE: Creating Next.js App with Mantine using PNPM
DESCRIPTION: Command to create a new Next.js application with Mantine integration using PNPM. This sets up a project named 'with-mantine-app' based on the 'with-mantine' example.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-mantine with-mantine-app

----------------------------------------

TITLE: Generating Consistent Build ID in next.config.js
DESCRIPTION: This snippet demonstrates how to generate a consistent build ID for Next.js applications, which is useful when deploying to multiple containers.

LANGUAGE: jsx
CODE:
module.exports = {
  generateBuildId: async () => {
    return process.env.GIT_HASH
  },
}

----------------------------------------

TITLE: Valid Next.js Link Component Implementation with Complete Route Params
DESCRIPTION: Example showing correct usage of the Next.js Link component where all required dynamic route parameters (post and comment) are properly provided in the query object.

LANGUAGE: jsx
CODE:
import Link from 'next/link'

export default function BlogLink() {
  return (
    <Link
      href={{
        pathname: '/blog/[post]/[comment]',
        query: { post: 'post-1', comment: 'comment-1' },
      }}
    >
      <a>Valid link</a>
    </Link>
  )
}

----------------------------------------

TITLE: Pushing Database Schema with Prisma
DESCRIPTION: Commands to push the database schema to PlanetScale using Prisma with different package managers.

LANGUAGE: bash
CODE:
npx prisma db push

LANGUAGE: bash
CODE:
yarn prisma db push

LANGUAGE: bash
CODE:
pnpm prisma

----------------------------------------

TITLE: Handling Dynamic Parameters in Next.js default.js (JavaScript)
DESCRIPTION: JavaScript implementation of a default.js file that handles dynamic route parameters in Next.js Parallel Routes. The function receives params as a Promise containing dynamic route parameters from the root segment to slot's subpages.

LANGUAGE: javascript
CODE:
export default async function Default({ params }) {
  const { artist } = await params
}

----------------------------------------

TITLE: Configuring serverExternalPackages in Next.js Configuration
DESCRIPTION: This code snippet demonstrates how to configure the serverExternalPackages option in the Next.js configuration file (next.config.js). It shows how to opt-out specific dependencies, like '@acme/ui', from Server Components bundling.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  serverExternalPackages: ['@acme/ui'],
}

module.exports = nextConfig

----------------------------------------

TITLE: Configuring assetPrefix in Next.js Configuration File
DESCRIPTION: This snippet demonstrates the correct way to set the assetPrefix option in the next.config.js file. The assetPrefix should be a string value, typically representing a URL prefix for static assets.

LANGUAGE: javascript
CODE:
module.exports = {
  assetPrefix: '/',
}

----------------------------------------

TITLE: Structuring Next.js Error Documentation in Markdown
DESCRIPTION: This snippet outlines the structure for documenting Next.js errors. It includes sections for the error title, explanation, possible fixes, and useful links. The template uses placeholders ({{title}}, {{why}}, {{fix}}) to be filled with specific error details.

LANGUAGE: markdown
CODE:
---
title: {{title}}
---

## Why This Error Occurred

<!-- Explain why the error occurred. Ensure the description makes it clear why the warning/error exists -->

{{why}}

## Possible Ways to Fix It

<!-- Explain how to fix the warning/error, potentially by providing alternative approaches. Ensure this section is actionable by users -->

{{fix}}

## Useful Links

<!-- Add links to relevant documentation -->

----------------------------------------

TITLE: Correcting Dynamic API Calls in Next.js Route Handler
DESCRIPTION: Shows the correct implementation of the headers() API call within a Next.js route handler by moving it from the global scope into the request scope of the GET function.

LANGUAGE: diff
CODE:
filename="app/foo/route.js"
import { headers } from 'next/headers'

- const headersList = await headers()
export async function GET() {
+ const headersList = await headers()
  return ...
}

----------------------------------------

TITLE: Secure Draft Mode API Route Implementation
DESCRIPTION: Complete implementation of a secure Draft Mode API route with token validation, slug verification, and proper redirection

LANGUAGE: javascript
CODE:
export default async (req, res) => {
  if (req.query.secret !== 'MY_SECRET_TOKEN' || !req.query.slug) {
    return res.status(401).json({ message: 'Invalid token' })
  }

  const post = await getPostBySlug(req.query.slug)

  if (!post) {
    return res.status(401).json({ message: 'Invalid slug' })
  }

  res.setDraftMode({ enable: true })

  res.redirect(post.slug)
}

----------------------------------------

TITLE: Using Next.js Script Component
DESCRIPTION: Demonstrates the recommended approach for loading third-party scripts using Next.js built-in Script component. This method provides better performance and control over script loading.

LANGUAGE: jsx
CODE:
import Script from 'next/script'

function Home() {
  return (
    <div class="container">
      <Script src="https://third-party-script.js"></Script>
      <div>Home Page</div>
    </div>
  )
}

----------------------------------------

TITLE: Creating Next.js Image Component Example with npm
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with the image-component example. It sets up a project named 'image-app' with all necessary configurations for the Image Component demo.

LANGUAGE: bash
CODE:
npx create-next-app --example image-component image-app

----------------------------------------

TITLE: Defining revalidatePath Function Parameters in TypeScript
DESCRIPTION: This snippet shows the TypeScript definition of the revalidatePath function, including its parameters and return type. It takes a path string and an optional type parameter, and returns void.

LANGUAGE: tsx
CODE:
revalidatePath(path: string, type?: 'page' | 'layout'): void;

----------------------------------------

TITLE: Installing Next.js with NextUI using PNPM
DESCRIPTION: Command to create a new Next.js application with NextUI integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-next-ui with-next-ui-app

----------------------------------------

TITLE: Creating Next.js Project with Clerk Authentication using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js project with Clerk authentication integration.

LANGUAGE: bash
CODE:
yarn create next-app --example with-clerk with-clerk-app

----------------------------------------

TITLE: Installing Next.js SEO Example with NPX
DESCRIPTION: Command to create a new Next.js application with next-seo integration using npx create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example with-next-seo next-seo-app

----------------------------------------

TITLE: Installing CSP Next.js App with NPX
DESCRIPTION: Command to create a new Next.js application with strict CSP implementation using npx and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-strict-csp with-strict-csp-app

----------------------------------------

TITLE: Running Sentry Wizard for Next.js Configuration
DESCRIPTION: This command runs the Sentry wizard to create and populate the necessary configuration files for integrating Sentry with Next.js. It sets up SDK initialization and source map uploading.

LANGUAGE: bash
CODE:
npx @sentry/wizard -i nextjs

----------------------------------------

TITLE: Correct Usage of next/dynamic Options in JSX
DESCRIPTION: This snippet shows the correct way to pass options to next/dynamic. The options are provided as an object literal directly in the dynamic function call.

LANGUAGE: jsx
CODE:
import dynamic from 'next/dynamic'

const DynamicComponent = dynamic(() => import('../components/hello'), {
  loading: () => <p>...</p>,
  ssr: false,
})

----------------------------------------

TITLE: Creating Next.js App with npm
DESCRIPTION: Command to create a new Next.js application with basic CSS example using npm and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example basic-css basic-css-app

----------------------------------------

TITLE: Dynamic Component Loading with Custom Loading State
DESCRIPTION: Example of using next/dynamic with custom loading component in Next.js 9

LANGUAGE: jsx
CODE:
import dynamic from 'next/dynamic'

const DynamicComponentWithCustomLoading = dynamic(
  () => import('../components/hello2'),
  {
    loading: () => <p>Loading</p>,
  }
)

----------------------------------------

TITLE: Creating Next.js App with Custom Babel Config using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with a custom Babel configuration. It utilizes the 'with-custom-babel-config' example as a template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-custom-babel-config with-custom-babel-config-app

----------------------------------------

TITLE: Retrieving Turso Database URL
DESCRIPTION: Command to fetch the Turso database URL for use in deployment environment variables.

LANGUAGE: bash
CODE:
turso db show <database-name> --url

----------------------------------------

TITLE: Configuring Travis CI Cache for Next.js Builds
DESCRIPTION: This YAML configuration snippet demonstrates how to set up caching for Next.js builds in Travis CI. It includes caching for yarn, node_modules, and the Next.js cache directory.

LANGUAGE: yaml
CODE:
cache:
  directories:
    - $HOME/.cache/yarn
    - node_modules
    - .next/cache

----------------------------------------

TITLE: Enabling SWC Minification in Next.js Configuration
DESCRIPTION: Configuration option in next.config.js to enable SWC minification. SWC is a Rust-based platform that performs minification 7x faster than Terser while maintaining comparable output quality.

LANGUAGE: javascript
CODE:
{
  "swcMinify": true
}

----------------------------------------

TITLE: Creating Next.js App with TinaCMS Template using pnpm
DESCRIPTION: This command uses pnpm to initialize a new Next.js project with the TinaCMS template. It creates the same blog structure as the other commands, but uses pnpm as the package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-tina cms-tina-app

----------------------------------------

TITLE: Implementing revalidatePath in a Next.js Route Handler (JavaScript)
DESCRIPTION: This example shows how to use revalidatePath in a JavaScript route handler. It creates a GET function that accepts a path parameter and revalidates that path, returning a JSON response with the revalidation status.

LANGUAGE: js
CODE:
import { revalidatePath } from 'next/cache'

export async function GET(request) {
  const path = request.nextUrl.searchParams.get('path')

  if (path) {
    revalidatePath(path)
    return Response.json({ revalidated: true, now: Date.now() })
  }

  return Response.json({
    revalidated: false,
    now: Date.now(),
    message: 'Missing path to revalidate',
  })
}

----------------------------------------

TITLE: Example of Problematic getInitialProps Implementation in Next.js
DESCRIPTION: Demonstrates an anti-pattern where getInitialProps returns an empty object, which prevents Next.js from performing automatic static optimization. This pattern should be avoided unless there's a specific need to make the page dynamic.

LANGUAGE: javascript
CODE:
MyPage.getInitialProps = async () => {\n  return {}; // This empty return prevents static optimization\n}

----------------------------------------

TITLE: Configuring dynamicIO in Next.js Config
DESCRIPTION: Basic Next.js configuration to enable the dynamicIO feature required for cacheLife functionality.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    dynamicIO: true,
  },
}

export default nextConfig

LANGUAGE: javascript
CODE:
const nextConfig = {
  experimental: {
    dynamicIO: true,
  },
}

export default nextConfig

----------------------------------------

TITLE: Implementing Partial Prerendering in Next.js Page (TypeScript)
DESCRIPTION: This code snippet shows how to implement Partial Prerendering in a Next.js page component using TypeScript. It demonstrates the use of the 'experimental_ppr' flag and combines static and dynamic components with Suspense.

LANGUAGE: typescript
CODE:
import { Suspense } from "react"
import { StaticComponent, DynamicComponent, Fallback } from "@/app/ui"

export const experimental_ppr = true

export default function Page() {
  return {
     <>
      <StaticComponent />
      <Suspense fallback={<Fallback />}>
        <DynamicComponent />
      </Suspense>
     </>
  };
}

----------------------------------------

TITLE: Next.js Edge API Route Implementation
DESCRIPTION: Example of using Edge API Routes to handle requests that previously used middleware response bodies.

LANGUAGE: typescript
CODE:
import { type NextRequest } from 'next/server'

export const config = {
  runtime: 'edge',
}

export default async function handler(req: NextRequest) {
  const authorization = req.cookies.get('authorization')
  return fetch('https://backend-api.com/api/protected', {
    method: req.method,
    headers: {
      authorization,
    },
    redirect: 'manual',
  })
}

----------------------------------------

TITLE: Configuring cacheLife Profiles in Next.js Config (JavaScript)
DESCRIPTION: JavaScript version of setting up a custom 'blog' cache profile in next.config.js with stale, revalidate, and expire parameters. Requires dynamicIO flag to be enabled.

LANGUAGE: javascript
CODE:
module.exports = {
  experimental: {
    dynamicIO: true,
    cacheLife: {
      blog: {
        stale: 3600, // 1 hour
        revalidate: 900, // 15 minutes
        expire: 86400, // 1 day
      },
    },
  },
}

----------------------------------------

TITLE: Configuring package.json Scripts for Next.js Custom Server
DESCRIPTION: This snippet shows how to modify the scripts in package.json to properly handle a custom server in both development and production environments. It includes separate commands for development, building, and starting the production server.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "node server.js",
    "build": "next build",
    "start": "NODE_ENV=production node server.js"
  }
}

----------------------------------------

TITLE: Adding GitHub Remote to Local Repository
DESCRIPTION: This command adds a GitHub remote to the local Git repository. It's used to link the local project to a GitHub repository for deployment on Vercel.

LANGUAGE: bash
CODE:
git remote add origin https://github.com/<org>/<repo>.git

----------------------------------------

TITLE: Updated Next.js Middleware Cookies API Usage
DESCRIPTION: Example demonstrating the new cookies API in middleware with get/set methods and options.

LANGUAGE: typescript
CODE:
export function middleware() {
  const response = new NextResponse()

  // set a cookie
  response.cookies.set('vercel', 'fast')

  // set another cookie with options
  response.cookies.set('nextjs', 'awesome', { path: '/test' })

  // get all the details of a cookie
  const { value, ...options } = response.cookies.getWithOptions('vercel')
  console.log(value) // => 'fast'
  console.log(options) // => { name: 'vercel', Path: '/test' }

  // deleting a cookie will mark it as expired
  response.cookies.delete('vercel')

  return response
}

----------------------------------------

TITLE: Incorrect Synchronous Request Access in Next.js Route Handler
DESCRIPTION: Example showing problematic synchronous access of Request information in a GET route handler that will cause errors with dynamicIO enabled.

LANGUAGE: jsx
CODE:
export default function GET(request) {
  const requestHeaders = request.headers
  return ...
}

----------------------------------------

TITLE: Incorrect API Route Handler with Response Body
DESCRIPTION: An example showing incorrect implementation of a Next.js API route handler that attempts to send a response body with status code 204, which is invalid.

LANGUAGE: javascript
CODE:
export default function handler(req, res) {
  res.status(204).send('invalid body')
}

----------------------------------------

TITLE: Using NextURL Clone for Middleware Redirects in Next.js TypeScript
DESCRIPTION: Demonstrates the recommended approach for handling URL redirects in Next.js Middleware by cloning the NextURL object and modifying its pathname. This method properly handles configuration options like basePath and locale.

LANGUAGE: typescript
CODE:
import type { NextRequest } from 'next/server'
import { NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  const url = request.nextUrl.clone()
  url.pathname = '/dest'
  return NextResponse.rewrite(url)
}

----------------------------------------

TITLE: Creating Next.js App with Dynamic Import Example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with dynamic import functionality. It utilizes the 'with-dynamic-import' example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-dynamic-import with-dynamic-import-app

----------------------------------------

TITLE: Async Token Access Implementation in Next.js
DESCRIPTION: Shows the correct async implementation for token access using cookies() with proper async/await syntax in both utility functions and page components.

LANGUAGE: jsx
CODE:
export async function Page() {
  return (await cookies()).get(token)
}

LANGUAGE: jsx
CODE:
import { getToken } from '.../token-utils'

export default async function Page() {
  const token = await getToken();
  validateToken(token)
  return ...
}

----------------------------------------

TITLE: Creating Next.js Project with Kea using npx
DESCRIPTION: This command uses npx to create a new Next.js project with Kea integration. It utilizes the 'create-next-app' package and specifies the 'with-kea' example template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-kea with-kea-app

----------------------------------------

TITLE: AMP Configuration Migration
DESCRIPTION: Migration example for converting withAmp HOC to new page-level configuration in Next.js 9

LANGUAGE: jsx
CODE:
import { withAmp } from 'next/amp'

function Home() {
  return <h1>My AMP Page</h1>
}

export default withAmp(Home)
// or
export default withAmp(Home, { hybrid: true })

LANGUAGE: jsx
CODE:
export default function Home() {
  return <h1>My AMP Page</h1>
}

export const config = {
  amp: true,
  // or
  amp: 'hybrid',
}

----------------------------------------

TITLE: Setting Runtime Environment in Next.js Routes
DESCRIPTION: Specify the runtime environment for route segments between Node.js and Edge runtimes.

LANGUAGE: typescript
CODE:
export const runtime = 'nodejs'
// 'nodejs' | 'edge'

LANGUAGE: javascript
CODE:
export const runtime = 'nodejs'
// 'nodejs' | 'edge'

----------------------------------------

TITLE: Creating Next.js Project with XState Template
DESCRIPTION: Commands to bootstrap a new Next.js project with XState integration using different package managers (npm, yarn, or pnpm).

LANGUAGE: bash
CODE:
npx create-next-app --example with-xstate with-xstate-app

LANGUAGE: bash
CODE:
yarn create next-app --example with-xstate with-xstate-app

LANGUAGE: bash
CODE:
pnpm create next-app --example with-xstate with-xstate-app

----------------------------------------

TITLE: Installing Next.js Redux Template with NPX
DESCRIPTION: Creates a new Next.js application with Redux Toolkit integration using npx create-next-app command.

LANGUAGE: bash
CODE:
npx create-next-app --example with-redux with-redux-app

----------------------------------------

TITLE: Authenticating PlanetScale CLI
DESCRIPTION: Command to authenticate the PlanetScale CLI for database operations.

LANGUAGE: sh
CODE:
pscale auth login

----------------------------------------

TITLE: Configuring Advanced Rewrites with Prioritization in Next.js
DESCRIPTION: This snippet shows how to configure more advanced rewrites using beforeFiles, afterFiles, and fallback options. It demonstrates how to control the order in which rewrites are applied.

LANGUAGE: javascript
CODE:
module.exports = {
  async rewrites() {
    return {
      beforeFiles: [
        {
          source: '/some-page',
          destination: '/somewhere-else',
          has: [{ type: 'query', key: 'overrideMe' }],
        },
      ],
      afterFiles: [
        {
          source: '/non-existent',
          destination: '/somewhere-else',
        },
      ],
      fallback: [
        {
          source: '/:path*',
          destination: `https://my-old-site.com/:path*`,
        },
      ],
    }
  },
}

----------------------------------------

TITLE: Creating Next.js Project with Passport Authentication using Yarn
DESCRIPTION: Command to create a new Next.js application with Passport.js authentication template using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-passport with-passport-app

----------------------------------------

TITLE: Creating Next.js App with Internationalized Routing using pnpm
DESCRIPTION: Command to create a new Next.js application with internationalized routing template using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example i18n-routing i18n-routing-app

----------------------------------------

TITLE: Installing Next.js Forms Example with Yarn
DESCRIPTION: Creates a new Next.js application with forms example using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example next-forms next-forms-app

----------------------------------------

TITLE: Migrating Next.js Link Component Usage
DESCRIPTION: Example showing the difference between Next.js 12 and 13 Link component implementation. In version 13, the Link component automatically renders an anchor tag and no longer requires manual nesting of <a> tags.

LANGUAGE: jsx
CODE:
import Link from 'next/link'

// Next.js 12: `<a>` has to be nested otherwise it's excluded
<Link href="/about">
  <a>About</a>
</Link>

// Next.js 13: `<Link>` always renders `<a>` under the hood
<Link href="/about">
  About
</Link>

----------------------------------------

TITLE: Creating Next.js WebWorker Project with npm
DESCRIPTION: Command to create a new Next.js project with WebWorker support using npm and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-web-worker with-web-worker-app

----------------------------------------

TITLE: Directory Structure After Migration in Next.js
DESCRIPTION: Example of the project directory structure after migrating static assets to the 'public' directory while maintaining the same URL structure.

LANGUAGE: plaintext
CODE:
public/
  static/
    my-image.jpg
pages/
  index.js
components/
  my-image.js

----------------------------------------

TITLE: Creating Next.js App with Firebase Hosting using PNPM
DESCRIPTION: Command to bootstrap a new Next.js application with Firebase Hosting integration using PNPM

LANGUAGE: bash
CODE:
pnpm create next-app --example with-firebase-hosting with-firebase-hosting-app

----------------------------------------

TITLE: Installing Dependencies and Starting Development Server with npm
DESCRIPTION: Commands to install project dependencies and start the Next.js development server using npm. This allows developers to run the project locally for testing and development.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Configuring GitLab CI Cache for Next.js Builds
DESCRIPTION: This YAML configuration snippet shows how to set up caching for Next.js builds in GitLab CI. It includes caching for node_modules and the Next.js cache directory.

LANGUAGE: yaml
CODE:
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .next/cache/

----------------------------------------

TITLE: Updated Separate Dynamic Imports in Next.js
DESCRIPTION: This code snippet shows the updated method of using separate dynamic calls for each module in Next.js. It uses individual dynamic imports for each component and combines them in a regular React component.

LANGUAGE: jsx
CODE:
import dynamic from 'next/dynamic'

const Hello1 = dynamic(() => import('../components/hello1'))
const Hello2 = dynamic(() => import('../components/hello2'))

function HelloBundle({ title }) {
  return (
    <div>
      <h1>{title}</h1>
      <Hello1 />
      <Hello2 />
    </div>
  )
}

function DynamicBundle() {
  return <HelloBundle title="Dynamic Bundle" />
}

export default DynamicBundle

----------------------------------------

TITLE: Running Storybook Development Server
DESCRIPTION: Commands to start the Storybook development server using npm, yarn, or pnpm.

LANGUAGE: bash
CODE:
npm run storybook
# or
yarn storybook
# or
pnpm storybook

----------------------------------------

TITLE: Configuring Dynamic Rendering in Next.js
DESCRIPTION: Examples of using the dynamic export to control page rendering behavior. These configurations ensure consistent rendering modes between build time and runtime.

LANGUAGE: javascript
CODE:
export const dynamic = 'force-static'

LANGUAGE: javascript
CODE:
export const dynamic = 'force-dynamic'

----------------------------------------

TITLE: Configuring React Compiler in Next.js (TypeScript)
DESCRIPTION: TypeScript configuration to enable the React Compiler feature in next.config.ts file.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    reactCompiler: true,
  },
}

export default nextConfig

----------------------------------------

TITLE: Example of Template Usage in Next.js Layout
DESCRIPTION: This code snippet illustrates how a template is typically used within a Next.js layout. The template is automatically given a unique key based on the route parameter.

LANGUAGE: jsx
CODE:
<Layout>
  {/* Note that the template is automatically given a unique key. */}
  <Template key={routeParam}>{children}</Template>
</Layout>

----------------------------------------

TITLE: Configuring Webpack in Next.js Configuration File
DESCRIPTION: Demonstrates the correct way to customize webpack configuration in next.config.js. Shows how to modify the webpack config object and properly return it to avoid the 'Missing webpack config' error. The example adds an IgnorePlugin to exclude test files from the build.

LANGUAGE: javascript
CODE:
module.exports = {
  webpack: (config, { buildId, dev, isServer, defaultLoaders, webpack }) => {
    // Note: we provide webpack above so you should not `require` it
    // Perform customizations to webpack config
    config.plugins.push(new webpack.IgnorePlugin(/\/__tests__\//));

    // Important: return the modified config
    return config
  },
}

----------------------------------------

TITLE: Browser Operations Helper
DESCRIPTION: Browser automation helper functions for navigation and interaction testing. Includes session management and various navigation methods.

LANGUAGE: javascript
CODE:
import { newBrowserSession } from "devlow-bench/browser";

const session = await newBrowserSession({
  // options
});
await session.hardNavigation("metric name", "https://example.com");
await session.reload("metric name");
await session.softNavigationByClick("metric name", ".selector-to-click");
await session.close();

----------------------------------------

TITLE: Creating Next.js App with Joi using Yarn
DESCRIPTION: Command to create a new Next.js application with joi validation example using yarn create

LANGUAGE: bash
CODE:
yarn create next-app --example with-joi with-joi-app

----------------------------------------

TITLE: Configuring i18n in Next.js
DESCRIPTION: This snippet demonstrates how to properly configure internationalization (i18n) in a Next.js project using the next.config.js file. It includes settings for supported locales, default locale, and domain-specific locale configurations.

LANGUAGE: javascript
CODE:
module.exports = {
  i18n: {
    // These are all the locales you want to support in
    // your application
    locales: ['en-US', 'es', 'fr', 'nl-NL'],
    // This is the default locale you want to be used when visiting
    // a non-locale prefixed path e.g. `/hello`
    defaultLocale: 'en-US',
    // This is a list of locale domains and the default locale they
    // should handle (these are only required when setting up domain routing)
    domains: [
      {
        domain: 'example.com',
        defaultLocale: 'en-US',
        // other locales that should be handled on this domain
        locales: ['es'],
      },
      {
        domain: 'example.nl',
        defaultLocale: 'nl-NL',
      },
      {
        domain: 'example.fr',
        defaultLocale: 'fr',
      },
    ],
  },
}

----------------------------------------

TITLE: Configuring Ably in Next.js App
DESCRIPTION: Setup code for initializing Ably in the Next.js application with client authentication

LANGUAGE: javascript
CODE:
import { configureAbly } from "@ably-labs/react-hooks";

const prefix = process.env.API_ROOT || "";
const clientId =
  Math.random().toString(36).substring(2, 15) +
  Math.random().toString(36).substring(2, 15);

configureAbly({
  authUrl: `${prefix}/api/createTokenRequest?clientId=${clientId}`,
  clientId: clientId,
});

function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />;
}

export default MyApp;

----------------------------------------

TITLE: Loading Specific Moment.js Locales
DESCRIPTION: Example of how to load a specific locale in Moment.js, as Next.js 11 excludes all locales by default to optimize bundle size.

LANGUAGE: javascript
CODE:
import moment from 'moment'
import 'moment/locale/ja'

moment.locale('ja')

----------------------------------------

TITLE: Creating Next.js App with Prefetching using npx
DESCRIPTION: This command uses npx to create a new Next.js application with prefetching example. It utilizes the create-next-app package and specifies the with-prefetching example template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-prefetching with-prefetching-app

----------------------------------------

TITLE: Creating Next.js App with Framer Motion using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with Framer Motion integration.

LANGUAGE: bash
CODE:
yarn create next-app --example with-framer-motion with-framer-motion-app

----------------------------------------

TITLE: Installing Next.js with NextUI using NPX
DESCRIPTION: Command to create a new Next.js application with NextUI integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-next-ui with-next-ui-app

----------------------------------------

TITLE: Installing Next.js Application with Realm Web SDK using Yarn
DESCRIPTION: Command to create a new Next.js application with Realm Web SDK integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-realm-web with-realm-web-app

----------------------------------------

TITLE: Local Development Setup
DESCRIPTION: Commands for installing dependencies and starting the development server with different package managers.

LANGUAGE: bash
CODE:
npm install && npm run dev

LANGUAGE: bash
CODE:
yarn install && yarn dev

LANGUAGE: bash
CODE:
pnpm install && pnpm dev

----------------------------------------

TITLE: Basic Props Return in getServerSideProps
DESCRIPTION: Simple example showing how to return props from getServerSideProps function with a basic message.

LANGUAGE: jsx
CODE:
export async function getServerSideProps(context) {
  return {
    props: { message: `Next.js is awesome` }, // will be passed to the page component as props
  }
}

----------------------------------------

TITLE: Creating Turso Database Auth Token
DESCRIPTION: Command to create an access token for the Turso database, to be used in deployment environment variables.

LANGUAGE: bash
CODE:
turso db tokens create <database-name>

----------------------------------------

TITLE: Importing Head Component in Next.js Custom Document
DESCRIPTION: To resolve the '`next-head-count` is missing' error, ensure that your custom _document.js file imports and renders the <Head> component from next/document. This is a required component for Next.js to render correctly.

LANGUAGE: javascript
CODE:
import { Head } from 'next/document';

// In your custom Document component
<Head />

----------------------------------------

TITLE: Creating Next.js Project with Absolute Imports using Yarn
DESCRIPTION: This bash command creates a new Next.js project with absolute imports configuration using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-absolute-imports with-absolute-imports-app

----------------------------------------

TITLE: Installing Next.js Project with npm
DESCRIPTION: Command to create a new Next.js project using npm and the Docker Compose example template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-docker-compose with-docker-compose-app

----------------------------------------

TITLE: Configuring AWS CodeBuild Cache for Next.js Builds
DESCRIPTION: This YAML configuration snippet demonstrates how to set up caching for Next.js builds in AWS CodeBuild. It includes caching for node_modules and the Next.js cache directory.

LANGUAGE: yaml
CODE:
cache:
  paths:
    - 'node_modules/**/*' # Cache `node_modules` for faster `yarn` or `npm i`
    - '.next/cache/**/*' # Cache Next.js for faster application rebuilds

----------------------------------------

TITLE: Implementing Redirect in getStaticPaths with JavaScript
DESCRIPTION: This snippet shows how to implement a redirect in the getStaticPaths function using JavaScript. It fetches data from the GitHub API and redirects to a 404 page if the data is not available.

LANGUAGE: jsx
CODE:
export async function getStaticPaths() {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()

  if (!repo) {
    return {
      redirect: {
        permanent: false, // or true
        destination: '/404',
      },
    }
  }

  return { props: { repo } }
}

export default function Page({ repo }) {
  return repo.stargazers_count
}

----------------------------------------

TITLE: Creating Next.js Project with Three.js using Yarn
DESCRIPTION: Command to create a new Next.js project with Three.js integration using Yarn and create-next-app. This alternative method sets up the project using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-three-js with-three-js-app

----------------------------------------

TITLE: Defining Middleware Function with NextRequest in Next.js (TypeScript)
DESCRIPTION: This snippet demonstrates how to define a middleware function in TypeScript, using the NextRequest type for type-safe request handling in Next.js.

LANGUAGE: typescript
CODE:
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // Middleware logic goes here
}

----------------------------------------

TITLE: Creating Next.js App with Basic Export using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js project with basic export configuration. It specifies the example to use and the name of the new application.

LANGUAGE: bash
CODE:
pnpm create next-app --example basic-export basic-export-app

----------------------------------------

TITLE: Configuring Basic PostCSS Structure in Next.js
DESCRIPTION: Demonstrates the correct structure for configuring PostCSS plugins in Next.js, including simple plugins, plugins with configuration, and conditionally enabled plugins based on environment variables.

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: [
    // A plugin that does not require configuration:
    'simple-plugin-example',

    // A plugin which needs a configuration object:
    [
      'plugin-with-configuration',
      {
        optionA: '...',
      },
    ],

    // A plugin that is toggled on or off based on environment:
    [
      'plugin-toggled',
      process.env.NODE_ENV === 'production'
        ? {
            optionA: '...',
          }
        : false,
    ],

    // Boolean expressions are also valid.
    // `true` enables the plugin, `false` disables the plugin:
    ['plugin-toggled-2', true /* a === b, etc */],
  ],
}

----------------------------------------

TITLE: Configuring Custom Page Extensions in Next.js
DESCRIPTION: This snippet shows how to configure custom page extensions in the next.config.js file. It allows you to support different file extensions for page components or include non-page files in the pages directory.

LANGUAGE: javascript
CODE:
pageExtensions

----------------------------------------

TITLE: Using useParams in Next.js Client Component (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the useParams hook in a Next.js Client Component with TypeScript. It shows how to access dynamic route parameters and includes type annotations for the params object.

LANGUAGE: tsx
CODE:
'use client'

import { useParams } from 'next/navigation'

export default function ExampleClientComponent() {
  const params = useParams<{ tag: string; item: string }>()

  // Route -> /shop/[tag]/[item]
  // URL -> /shop/shoes/nike-air-max-97
  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }
  console.log(params)

  return '...'
}

----------------------------------------

TITLE: Getting Cookie Values with NextRequest
DESCRIPTION: Shows how to retrieve a cookie value using the cookies.get() method. Returns the value of a specific cookie or undefined if not found.

LANGUAGE: typescript
CODE:
// Given incoming request /home
// { name: 'show-banner', value: 'false', Path: '/home' }
request.cookies.get('show-banner')

----------------------------------------

TITLE: Configuring DevIndicators Types in Next.js TypeScript
DESCRIPTION: TypeScript type definition for the devIndicators configuration object. Allows setting the position of the development indicator or disabling it completely.

LANGUAGE: typescript
CODE:
devIndicators: false | {
    position?: 'bottom-right'
    | 'bottom-left'
    | 'top-right'
    | 'top-left', // defaults to 'bottom-left',
  },

----------------------------------------

TITLE: Configuring Allowed Origins for Server Actions in Next.js
DESCRIPTION: This snippet demonstrates how to set up allowed origins for Server Actions in Next.js. It uses the 'serverActions.allowedOrigins' option to specify additional safe domains from which Server Actions can be invoked.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */

module.exports = {
  experimental: {
    serverActions: {
      allowedOrigins: ['my-proxy.com', '*.my-proxy.com'],
    },
  },
}

----------------------------------------

TITLE: Updated Next.js Webpack 5 Configuration
DESCRIPTION: Example of the current webpack5 configuration syntax in next.config.js showing the correct way to opt out of webpack 5.

LANGUAGE: javascript
CODE:
module.exports = {
  webpack5: false,
}

----------------------------------------

TITLE: Using Async Crypto API in Next.js
DESCRIPTION: Shows how to convert synchronous crypto key generation to asynchronous version for request-time usage. Demonstrates migration from generateKeySync to generateKey with Promise wrapper.

LANGUAGE: jsx
CODE:
import { generateKeySync } from 'node:crypto'

export default async function Page() {
  const key = generateKeySync('hmac', { ... })
  const digestedData = await digestDataWithKey(data, key);
  return ...
}

LANGUAGE: jsx
CODE:
import { generateKey } from 'node:crypto'

export default async function Page() {
  const key = await new Promise(resolve => generateKey('hmac', { ... }, key => resolve(key)))
  const digestedData = await digestDataWithKey(data, key);
  return ...
}

----------------------------------------

TITLE: Adding Vitest Script to package.json
DESCRIPTION: Package.json configuration adding the test script for running Vitest.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "test": "vitest"
  }
}

----------------------------------------

TITLE: Next.js Config for ESM Externals
DESCRIPTION: Configuration option to enable loose mode for ESM externals in Next.js, which attempts to automatically handle ESM import issues.

LANGUAGE: javascript
CODE:
// next.config.js
module.exports = {
  experimental: {
    esmExternals: 'loose'
  }
}

----------------------------------------

TITLE: Creating Next.js App with Mantine using NPX
DESCRIPTION: Command to create a new Next.js application with Mantine integration using NPX. This sets up a project named 'with-mantine-app' based on the 'with-mantine' example.

LANGUAGE: bash
CODE:
npx create-next-app --example with-mantine with-mantine-app

----------------------------------------

TITLE: Creating Next.js App with Joi using NPX
DESCRIPTION: Command to create a new Next.js application with joi validation example using npx create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example with-joi with-joi-app

----------------------------------------

TITLE: Converting Synchronous Token Access to Async in Next.js
DESCRIPTION: Shows the migration from synchronous token access using cookies() to an async implementation. Demonstrates changes needed in both utility functions and page components.

LANGUAGE: jsx
CODE:
// This function is sync and the codemod won't make it async
// because it doesn't know about every callsite that uses it.
export function getToken() {
  // @next-codemod-error ...
  return cookies().get('token')
}

LANGUAGE: jsx
CODE:
import { getToken } from '.../token-utils'

export default function Page() {
  const token = getToken();
  validateToken(token)
  return ...
}

----------------------------------------

TITLE: Creating Next.js App with Markdoc using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with Markdoc integration. It utilizes the create-next-app package and specifies the markdoc example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example markdoc markdoc-app

----------------------------------------

TITLE: Using Environment Variable for Port Configuration
DESCRIPTION: Example of using the PORT environment variable to set the application port in Next.js 11.

LANGUAGE: bash
CODE:
PORT=4000 next start

----------------------------------------

TITLE: Configuring Package Import Optimization
DESCRIPTION: Next.js configuration for optimizing package imports using the optimizePackageImports option.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    optimizePackageImports: ['icon-library'],
  },
}

module.exports = nextConfig

----------------------------------------

TITLE: Installing Next.js Project with NPM
DESCRIPTION: Creates a new Next.js project using NPM's create-next-app command with the hello-world example template.

LANGUAGE: bash
CODE:
npx create-next-app --example hello-world hello-world-app

----------------------------------------

TITLE: Creating Next.js App with Framer Motion using npx
DESCRIPTION: This command uses npx to create a new Next.js application with Framer Motion integration.

LANGUAGE: bash
CODE:
npx create-next-app --example with-framer-motion with-framer-motion-app

----------------------------------------

TITLE: Creating Next.js App with Cookies Management using NPX
DESCRIPTION: Command to create a new Next.js application with cookie management functionality using npx and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-cookies-next with-cookies-next-app

----------------------------------------

TITLE: Disabling Scroll Behavior in Navigation
DESCRIPTION: Shows how to disable the default scroll-to-top behavior when navigating between routes using the scroll option in router.push().

LANGUAGE: typescript
CODE:
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button
      type="button"
      onClick={() => router.push('/dashboard', { scroll: false })}
    >
      Dashboard
    </button>
  )
}

LANGUAGE: javascript
CODE:
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button
      type="button"
      onClick={() => router.push('/dashboard', { scroll: false })}
    >
      Dashboard
    </button>
  )
}

----------------------------------------

TITLE: Installing Next.js Apollo Redux Example with PNPM
DESCRIPTION: Command to create a new Next.js application with Apollo and Redux integration using pnpm create next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-apollo-and-redux with-apollo-and-redux-app

----------------------------------------

TITLE: Creating SuperTokens App with create-supertokens-app using pnpm
DESCRIPTION: Command to create a SuperTokens app with Next.js frontend using pnpm.

LANGUAGE: bash
CODE:
pnpm create-supertokens-app@latest --frontend=next

----------------------------------------

TITLE: Creating Next.js Project with Jotai using NPX
DESCRIPTION: Command to create a new Next.js project with Jotai integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-jotai with-jotai-app

----------------------------------------

TITLE: Catching notFound Error in Next.js Component (TypeScript)
DESCRIPTION: This snippet demonstrates how the notFound function can be caught by a try/catch block, preventing the not-found.js component from rendering. It fetches a post and throws notFound if the status is 404.

LANGUAGE: tsx
CODE:
import { notFound } from 'next/navigation'

export default async function Page() {
  try {
    const post = await fetch('https://.../posts/1').then((res) => {
      if (res.status === 404) notFound()
      if (!res.ok) throw new Error(res.statusText)
      return res.json()
    })
  } catch (err) {
    console.error(err)
  }
}

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Creates a local environment file by copying the example template for Auth0 configuration.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Creating Next.js Configuration
DESCRIPTION: Example of a basic Next.js configuration file (next.config.mjs) to set up output and build directory options.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'export', // Outputs a Single-Page Application (SPA).
  distDir: './dist', // Changes the build output directory to `./dist/`.
}

export default nextConfig

----------------------------------------

TITLE: Installing React and Node Type Declarations with Yarn
DESCRIPTION: Command to install type declarations for React, React DOM, and Node.js using Yarn in a Next.js TypeScript project.

LANGUAGE: shell
CODE:
yarn install --save-dev @types/react @types/react-dom @types/node

----------------------------------------

TITLE: Creating Next.js App with MDBreact using Yarn
DESCRIPTION: Command to create a new Next.js application with MDBreact integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-mdbreact with-mdbreact-app

----------------------------------------

TITLE: Customizing Target Browsers in package.json
DESCRIPTION: Configure the target browsers for Autoprefixer and CSS feature compilation using Browserslist in package.json.

LANGUAGE: json
CODE:
{
  "browserslist": [">0.3%", "not dead", "not op_mini all"]
}

----------------------------------------

TITLE: Correcting Multi-match Parameter Usage in Next.js Custom Routes
DESCRIPTION: This snippet demonstrates how to properly use a multi-match parameter in Next.js custom routes. It shows the incorrect usage where the '*' is missing in the destination, and the correct usage where '*' is included to capture all path segments.

LANGUAGE: javascript
CODE:
{
  source: '/:path*',
  destination: '/another/:path'
}

LANGUAGE: javascript
CODE:
{
  source: '/:path*',
  destination: '/another/:path*'
}

----------------------------------------

TITLE: TypeScript Project Initialization Prompt in create-next-app
DESCRIPTION: Interactive prompt asking the user if they want to use TypeScript for their Next.js project. Selecting 'Yes' will set up necessary dependencies for a TypeScript project.

LANGUAGE: bash
CODE:
✔ Would you like to use TypeScript? … No / Yes

----------------------------------------

TITLE: Using Router.onAppUpdated for Server-Side Navigation in Next.js (Deprecated)
DESCRIPTION: This snippet demonstrates the now-removed Router.onAppUpdated hook in Next.js, which was used to detect new app deployments and handle page navigation. It redirects to the new route using location.href.

LANGUAGE: javascript
CODE:
Router.onAppUpdated = function (nextRoute) {
  location.href = nextRoute
}

----------------------------------------

TITLE: Disabling ETag Generation in Next.js Configuration
DESCRIPTION: Configuration snippet showing how to disable automatic ETag generation in Next.js by setting the generateEtags option to false in next.config.js. This can be useful when implementing custom caching strategies.

LANGUAGE: javascript
CODE:
module.exports = {
  generateEtags: false,
}

----------------------------------------

TITLE: Wildcard Path Matching in Next.js Headers
DESCRIPTION: This example demonstrates how to use wildcard path matching in Next.js header configuration. It allows matching multiple segments in a path using the asterisk (*) symbol.

LANGUAGE: javascript
CODE:
module.exports = {
  async headers() {
    return [
      {
        source: '/blog/:slug*',
        headers: [
          {
            key: 'x-slug',
            value: ':slug*', // Matched parameters can be used in the value
          },
          {
            key: 'x-slug-:slug*', // Matched parameters can be used in the key
            value: 'my other custom header value',
          },
        ],
      },
    ]
  },
}

----------------------------------------

TITLE: Correct Next.js Link Usage With Children
DESCRIPTION: Example showing the correct implementation of Next.js Link component with proper child elements, both with direct text content and with nested anchor tags.

LANGUAGE: jsx
CODE:
import Link from 'next/link'

export default function Home() {
  return (
    <>
      <Link href="/about">To About</Link>
      // or
      <Link href="/about" legacyBehavior>
        <a>To About</a>
      </Link>
    </>
  )
}

----------------------------------------

TITLE: Sample Next.js Page Component
DESCRIPTION: Example Next.js page component used for testing demonstration.

LANGUAGE: tsx
CODE:
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}

----------------------------------------

TITLE: Creating Next.js WebAssembly Project with pnpm
DESCRIPTION: Command to create a new Next.js project with WebAssembly support using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-webassembly with-webassembly-app

----------------------------------------

TITLE: Manual Query Parameter Handling in Next.js Middleware
DESCRIPTION: Shows how to maintain compatibility with older behavior by manually handling query parameters in the middleware. Uses request.nextUrl to automatically preserve existing query parameters.

LANGUAGE: typescript
CODE:
import type { NextRequest } from 'next/server'
import { NextResponse } from 'next/server'

export default function middleware(request: NextRequest) {
  const nextUrl = request.nextUrl
  nextUrl.pathname = '/dest'
  return NextResponse.rewrite(nextUrl)
}

----------------------------------------

TITLE: Creating Next.js App with GTM Template using PNPM
DESCRIPTION: Command to create a new Next.js application with Google Tag Manager integration using PNPM

LANGUAGE: bash
CODE:
pnpm create next-app --example with-google-tag-manager with-google-tag-manager-app

----------------------------------------

TITLE: Building and Starting Next.js Production Server
DESCRIPTION: Commands for creating and running a Next.js production build. First run 'next build' to create the production build, then use 'next start' to run the production server. Alternatively, use 'next dev' for development mode.

LANGUAGE: bash
CODE:
next build

LANGUAGE: bash
CODE:
next start

LANGUAGE: bash
CODE:
next dev

----------------------------------------

TITLE: Creating Next.js App with Custom Server using PNPM
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with a custom server configuration using pnpm.

LANGUAGE: bash
CODE:
pnpm create next-app --example custom-server custom-server-app

----------------------------------------

TITLE: Creating Next.js App with OpenTelemetry using NPX
DESCRIPTION: This command uses npx to create a new Next.js application with OpenTelemetry integration. It utilizes the 'create-next-app' package and specifies the 'with-opentelemetry' example template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-opentelemetry with-opentelemetry-app

----------------------------------------

TITLE: Creating Next.js App with Zustand Example using npx
DESCRIPTION: This command uses npx to create a new Next.js application with the Zustand example template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-zustand with-zustand-app

----------------------------------------

TITLE: Installing Next.js with Vanilla Extract using PNPM
DESCRIPTION: Command to create a new Next.js application with Vanilla Extract integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-vanilla-extract with-vanilla-extract-app

----------------------------------------

TITLE: Next.js MDX with Custom Webpack Configuration
DESCRIPTION: MDX configuration combined with custom webpack settings.

LANGUAGE: javascript
CODE:
const withMDX = require('@next/mdx')()
module.exports = withMDX({
  webpack(config, options) {
    return config
  },
})

----------------------------------------

TITLE: Incorrect Nesting of <style jsx> Tags in Next.js Component
DESCRIPTION: This snippet demonstrates the incorrect way of nesting `<style jsx>` tags within a Next.js component. The styles are placed inside a `<p>` tag, which causes an error.

LANGUAGE: jsx
CODE:
const Component = () => (
  <div>
    <p>
      Hello world
      <style jsx>{`
        p {
          color: white;
        }
      `}</style>
    </p>
    <style global jsx>{`
      body {
        background: black;
      }
    `}</style>
  </div>
)

----------------------------------------

TITLE: Creating Next.js Project with Jest and Babel using Yarn
DESCRIPTION: Initializes a new Next.js project with Jest and Babel configuration using Yarn create command.

LANGUAGE: bash
CODE:
yarn create next-app --example with-jest-babel with-jest-babel-app

----------------------------------------

TITLE: Enabling Webpack Build Worker in Next.js Configuration
DESCRIPTION: To enable the build worker and allow parallel build features, add the following configuration to your next.config.js file. This setting is required for experimental.parallelServerCompiles and experimental.parallelServerBuildTraces options to work.

LANGUAGE: javascript
CODE:
{
  experimental: {
    webpackBuildWorker: true
  }
}

----------------------------------------

TITLE: Installing and Running Multi-Zone Next.js Application with npm
DESCRIPTION: Commands to create a new Next.js app using the with-zones example, then install dependencies and run the 'home' and 'blog' apps separately using npm.

LANGUAGE: bash
CODE:
npx create-next-app --example with-zones with-zones-app

LANGUAGE: bash
CODE:
cd home
npm install && npm run dev

LANGUAGE: bash
CODE:
cd blog
npm install && npm run dev

----------------------------------------

TITLE: Creating Next.js Drupal Project with NPM
DESCRIPTION: Command to bootstrap a new Next.js project with Drupal CMS integration using npx create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example cms-drupal cms-drupal-app

----------------------------------------

TITLE: Configuring exportPathMap in Next.js
DESCRIPTION: Demonstrates the correct way to map export paths for dynamically routed pages in Next.js configuration. Shows how to properly include URL parameters in the export path to match dynamic route segments.

LANGUAGE: javascript
CODE:
module.exports = {
  exportPathMap: function () {
    return {
      '/': { page: '/' },
      // '/blog/nextjs': { page: '/blog/[post]/comment/[id]' },        // wrong
      '/blog/nextjs/comment/1': { page: '/blog/[post]/comment/[id]' }, // correct
    }
  },
}

----------------------------------------

TITLE: Deprecated User Agent Parsing in Next.js Middleware (TypeScript)
DESCRIPTION: This code snippet demonstrates the deprecated method of accessing user agent information in Next.js middleware using req.ua. It determines the viewport based on the device type and sets it as a search parameter.

LANGUAGE: typescript
CODE:
import { NextRequest, NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  const viewport = request.ua.device.type === 'mobile' ? 'mobile' : 'desktop'

  request.nextUrl.searchParams.set('viewport', viewport)
  return NextResponse.rewrites(request.nextUrl)
}

----------------------------------------

TITLE: Installing Next.js with MongoDB Template using Yarn
DESCRIPTION: Creates a new Next.js application with MongoDB integration using create-next-app and yarn command.

LANGUAGE: bash
CODE:
yarn create next-app --example with-mongodb with-mongodb-app

----------------------------------------

TITLE: Basic Static Generation without Data in Next.js
DESCRIPTION: A simple example of a statically generated page without any data fetching requirements. The page is pre-rendered at build time with static content.

LANGUAGE: jsx
CODE:
function About() {
  return <div>About</div>
}

export default About

----------------------------------------

TITLE: Displaying Next.js Dependency Version Conflicts in Bash
DESCRIPTION: Terminal output showing incompatible dependency versions. The output highlights conflicts between installed React/React DOM versions and the requirements of two packages: unmet-prerelease and unmet-range. The installed versions are pre-release builds that don't match the expected version ranges.

LANGUAGE: bash
CODE:
⚠ Found 2 dependencies that seem incompatible with the upgraded package versions.
You may have to update these packages to their latest version or file an issue to ask for support of the upgraded libraries.
unmet-prerelease 0.0.1
  ├── ✕ unmet peer react@"^18.2.0 || 19.0.0-rc-aaaaaaaa-20240101": found 19.0.0-rc-7c8e5e7a-20241101
  └── ✕ unmet peer react-dom@"^18.2.0 || 19.0.0-rc-aaaaaaaa-20240101": found 19.0.0-rc-7c8e5e7a-20241101
unmet-range 0.0.1
  ├── ✕ unmet peer react@"^18.0.0 || ^19.0.0": found 19.0.0-rc-7c8e5e7a-20241101
  └── ✕ unmet peer react-dom@"< 19": found 19.0.0-rc-7c8e5e7a-20241101

----------------------------------------

TITLE: Context Provider for Async Data in Next.js
DESCRIPTION: This snippet creates a context provider for handling async data in Next.js. It defines a BlogContext and provides functions for creating and using the context.

LANGUAGE: tsx
CODE:
'use client'

import { createContext, useContext } from 'react'

export const BlogContext = createContext<Promise<any> | null>(null)

export function BlogProvider({
  children,
  blogPromise,
}: {
  children: React.ReactNode
  blogPromise: Promise<any>
}) {
  return (
    <BlogContext.Provider value={blogPromise}>{children}</BlogContext.Provider>
  )
}

export function useBlogContext() {
  const context = useContext(BlogContext)
  if (!context) {
    throw new Error('useBlogContext must be used within a BlogProvider')
  }
  return context
}

----------------------------------------

TITLE: Next.js Middleware Path-Based Conditional Logic
DESCRIPTION: Example showing how to implement conditional middleware logic based on request paths instead of using the matcher config.

LANGUAGE: typescript
CODE:
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  if (request.nextUrl.pathname.startsWith('/about')) {
    // This logic is only applied to /about
  }

  if (request.nextUrl.pathname.startsWith('/dashboard')) {
    // This logic is only applied to /dashboard
  }
}

----------------------------------------

TITLE: Implementing Authorization in Next.js Server Action
DESCRIPTION: Example of implementing authorization in a Server Action. It checks the user's role before allowing the action to proceed.

LANGUAGE: ts
CODE:
'use server'
import { verifySession } from '@/app/lib/dal'

export async function serverAction(formData: FormData) {
  const session = await verifySession()
  const userRole = session?.user?.role

  // Return early if user is not authorized to perform the action
  if (userRole !== 'admin') {
    return null
  }

  // Proceed with the action for authorized users
}

----------------------------------------

TITLE: Configuring Asset Prefix with Rewrites for Legacy Support
DESCRIPTION: Extended configuration for Next.js versions before 15, including both assetPrefix and rewrites to handle static assets correctly.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  assetPrefix: '/blog-static',
  async rewrites() {
    return {
      beforeFiles: [
        {
          source: '/blog-static/_next/:path+',
          destination: '/_next/:path+',
        },
      ],
    }
  },
}

----------------------------------------

TITLE: Configuring Production Source Maps in Next.js
DESCRIPTION: Configuration snippet for enabling browser source map generation during production builds in Next.js. When enabled, source maps will be output alongside JavaScript files and automatically served when requested. Note that this may increase build time and memory usage.

LANGUAGE: javascript
CODE:
module.exports = {
  productionBrowserSourceMaps: true,
}

----------------------------------------

TITLE: Checking Active Links in Next.js
DESCRIPTION: Demonstrates how to determine if a link is active using the usePathname hook in Next.js.

LANGUAGE: tsx
CODE:
'use client'

import { usePathname } from 'next/navigation'
import Link from 'next/link'

export function Links() {
  const pathname = usePathname()

  return (
    <nav>
      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href="/">
        Home
      </Link>

      <Link
        className={`link ${pathname === '/about' ? 'active' : ''}`}
        href="/about"
      >
        About
      </Link>
    </nav>
  )
}

LANGUAGE: jsx
CODE:
'use client'

import { usePathname } from 'next/navigation'
import Link from 'next/link'

export function Links() {
  const pathname = usePathname()

  return (
    <nav>
      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href="/">
        Home
      </Link>

      <Link
        className={`link ${pathname === '/about' ? 'active' : ''}`}
        href="/about"
      >
        About
      </Link>
    </nav>
  )
}

----------------------------------------

TITLE: Installing Next.js REST API Example with Yarn
DESCRIPTION: Creates a new Next.js application with REST API routes example using Yarn package manager

LANGUAGE: bash
CODE:
yarn create next-app --example api-routes-rest api-routes-rest-app

----------------------------------------

TITLE: Installing Next.js Auth Example with PNPM
DESCRIPTION: Creates a new Next.js application with authentication using PNPM package manager

LANGUAGE: bash
CODE:
pnpm create next-app --example auth auth-app

----------------------------------------

TITLE: Creating About Page Component (Pages Router)
DESCRIPTION: Implementation of the about page component using Next.js Pages Router with a navigation link back to home

LANGUAGE: tsx
CODE:
import Link from 'next/link'

export default function About() {
  return (
    <div>
      <h1>About</h1>
      <Link href="/">Home</Link>
    </div>
  )
}

----------------------------------------

TITLE: Configuring serverComponentsHmrCache in Next.js TypeScript Config
DESCRIPTION: This snippet demonstrates how to disable the serverComponentsHmrCache option in a Next.js TypeScript configuration file. It imports the NextConfig type and sets the experimental option to false.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    serverComponentsHmrCache: false, // defaults to true
  },
}

export default nextConfig

----------------------------------------

TITLE: Creating Next.js App with MobX State Tree Template using pnpm
DESCRIPTION: Command to create a new Next.js application using the MobX State Tree example template with pnpm.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-mobx-state-tree with-mobx-state-tree-app

----------------------------------------

TITLE: Setting Up Environment Variables
DESCRIPTION: Copy the example environment file to create a local configuration file

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Setting CrossOrigin in Next.js Configuration
DESCRIPTION: Shows how to properly configure the crossOrigin setting in next.config.js after deprecation of the attribute in Head and NextScript components. Sets the crossOrigin value to 'anonymous' at the configuration level.

LANGUAGE: javascript
CODE:
module.exports = {
  crossOrigin: 'anonymous',
}

----------------------------------------

TITLE: Implementing Single Head Component in Next.js Custom Document
DESCRIPTION: Demonstrates the correct way to implement a custom document in Next.js using a single Head component. Shows proper structure with Html, Head, Main, and NextScript components to avoid duplicate head issues.

LANGUAGE: jsx
CODE:
import Document, { Html, Head, Main, NextScript } from 'next/document'

class MyDocument extends Document {
  static async getInitialProps(ctx) {
    //...
  }

  render() {
    return (
      <Html>
        <Head />
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    )
  }
}

export default MyDocument

----------------------------------------

TITLE: Configuring Cypress for E2E Testing in Next.js (JavaScript)
DESCRIPTION: This snippet shows the configuration for Cypress E2E testing in a Next.js project using JavaScript.

LANGUAGE: javascript
CODE:
const { defineConfig } = require('cypress')

module.exports = defineConfig({
  e2e: {
    setupNodeEvents(on, config) {},
  },
})

----------------------------------------

TITLE: Installing Next.js with Recoil using PNPM
DESCRIPTION: Command to create a new Next.js application with Recoil integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-recoil with-recoil-app

----------------------------------------

TITLE: Creating Next.js App with Apollo Server and Client using npx
DESCRIPTION: Command to bootstrap a new Next.js application with Apollo server and client integration using npx and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example api-routes-apollo-server-and-client api-routes-apollo-server-and-client-app

----------------------------------------

TITLE: Creating Next.js App with Zustand Example using yarn
DESCRIPTION: This command uses yarn to create a new Next.js application with the Zustand example template.

LANGUAGE: bash
CODE:
yarn create next-app --example with-zustand with-zustand-app

----------------------------------------

TITLE: Updating Search Parameters in Next.js Client Components
DESCRIPTION: Demonstrates how to update search parameters using useRouter and Link components in a Next.js Client Component. The example shows creating new query strings and navigating with updated parameters.

LANGUAGE: tsx
CODE:
'use client'

export default function ExampleClientComponent() {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  const createQueryString = useCallback(
    (name: string, value: string) => {
      const params = new URLSearchParams(searchParams.toString())
      params.set(name, value)

      return params.toString()
    },
    [searchParams]
  )

  return (
    <>
      <p>Sort By</p>

      <button
        onClick={() => {
          router.push(pathname + '?' + createQueryString('sort', 'asc'))
        }}
      >
        ASC
      </button>

      <Link
        href={
          pathname + '?' + createQueryString('sort', 'desc')
        }
      >
        DESC
      </Link>
    </>
  )
}

LANGUAGE: jsx
CODE:
'use client'

export default function ExampleClientComponent() {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  const createQueryString = useCallback(
    (name, value) => {
      const params = new URLSearchParams(searchParams)
      params.set(name, value)

      return params.toString()
    },
    [searchParams]
  )

  return (
    <>
      <p>Sort By</p>

      <button
        onClick={() => {
          router.push(pathname + '?' + createQueryString('sort', 'asc'))
        }}
      >
        ASC
      </button>

      <Link
        href={
          pathname + '?' + createQueryString('sort', 'desc')
        }
      >
        DESC
      </Link>
    </>
  )
}

----------------------------------------

TITLE: Creating Next.js App with MobX using NPX
DESCRIPTION: Command to bootstrap a new Next.js application with MobX integration using NPX.

LANGUAGE: bash
CODE:
npx create-next-app --example with-mobx with-mobx-app

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to run the Next.js development server using various package managers. This allows developers to start the local development environment for their Next.js application.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Creating Next.js App with MongoDB Template using NPX
DESCRIPTION: Command to bootstrap a new Next.js application with MongoDB and Mongoose setup using npx create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example with-mongodb-mongoose with-mongodb-mongoose-app

----------------------------------------

TITLE: Using Memo Annotation in Components (JavaScript)
DESCRIPTION: Example of using the 'use memo' directive in a JavaScript component for opt-in optimization.

LANGUAGE: javascript
CODE:
export default function Page() {
  'use memo'
  // ...
}

----------------------------------------

TITLE: Configuring Next.js Image Optimization
DESCRIPTION: Configuration for Next.js image optimization to allow Storyblok and Unsplash image URLs.

LANGUAGE: javascript
CODE:
module.exports = {
    images: {
      remotePatterns: [
        {
          protocol: 'https',
          hostname: 'a.storyblok.com',
          port: '',
          pathname: '**',
          search: '',
        },
        {
          protocol: 'https',
          hostname: 'images.unsplash.com',
          port: '',
          pathname: '**',
          search: '',
        },
       ],
    },
  }

----------------------------------------

TITLE: Fixing Circular References in Next.js getInitialProps
DESCRIPTION: When working with getInitialProps in Next.js, you need to ensure the returned object can be serialized to JSON. Instead of returning circular objects like the req object directly, extract and return only the needed properties.

LANGUAGE: javascript
CODE:
// Instead of this:
Page.getInitialProps = async ({ req }) => {
  return { req } // Error: circular structure
}

// Do this:
Page.getInitialProps = async ({ req }) => {
  return {
    headerData: req.headers,
    specificField: req.specificField
  }
}

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Example of the required environment variable setup in the .env.local file for Userbase integration.

LANGUAGE: bash
CODE:
NEXT_PUBLIC_USERBASE_APP_ID=...

----------------------------------------

TITLE: Installing Next.js with Vitest using Yarn
DESCRIPTION: Command to create a new Next.js application with Vitest integration using Yarn

LANGUAGE: bash
CODE:
yarn create next-app --example with-vitest with-vitest-app

----------------------------------------

TITLE: Incorrect Usage of Async Context in Next.js
DESCRIPTION: Example demonstrating incorrect usage of cookies() function inside setTimeout, which causes DynamicServerError due to breaking async context.

LANGUAGE: jsx
CODE:
import { cookies } from 'next/headers'

async function getCookieData() {
  return new Promise((resolve) =>
    setTimeout(() => {
      // cookies will be called outside of the async context, causing a build-time error
      resolve(cookies().getAll())
    }, 1000)
  )
}

export default async function Page() {
  const cookieData = await getCookieData()
  return <div>Hello World</div>
}

----------------------------------------

TITLE: Defining a Simple Hello World Page in Next.js
DESCRIPTION: This snippet shows a basic Next.js page component that renders 'hello world!'.

LANGUAGE: jsx
CODE:
export default function Hello() {
  return 'hello world!'
}

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers. Supports npm, yarn, pnpm, and bun.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Configuring Next.js Middleware with Path Matching
DESCRIPTION: Example showing how to configure a single root middleware file with path matching using the matcher config option. Demonstrates rewriting URLs for specific paths.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  return NextResponse.rewrite(new URL('/about-2', request.url))
}

// Supports both a single string value or an array of matchers
export const config = {
  matcher: ['/about/:path*', '/dashboard/:path*'],
}

----------------------------------------

TITLE: Configuring CSS Chunking in Next.js (JavaScript)
DESCRIPTION: This snippet illustrates the configuration of CSS Chunking in a Next.js application using JavaScript. It shows how to set the experimental.cssChunking option in the next.config.js file.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    cssChunking: true, // default
  },
}

module.exports = nextConfig

----------------------------------------

TITLE: TypeScript Integration for Dynamic Routes in Next.js
DESCRIPTION: This code snippet demonstrates how to add TypeScript types for the params prop in a dynamic route. It shows the type definition for a page component with a dynamic slug parameter.

LANGUAGE: typescript
CODE:
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  return <h1>My Page</h1>
}

LANGUAGE: jsx
CODE:
export default async function Page({ params }) {
  return <h1>My Page</h1>
}

----------------------------------------

TITLE: Creating Next.js App with Storybook using NPX
DESCRIPTION: Command to bootstrap a new Next.js application with Storybook integration using NPX create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-storybook with-storybook-app

----------------------------------------

TITLE: Cross-Platform Debugging Configuration for Windows
DESCRIPTION: This package.json configuration uses cross-env to set NODE_OPTIONS, allowing for consistent debugging across different operating systems, including Windows.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "cross-env NODE_OPTIONS='--inspect' next dev"
  }
}

----------------------------------------

TITLE: Running Vitest Tests with pnpm
DESCRIPTION: Command to execute Vitest tests using pnpm

LANGUAGE: bash
CODE:
pnpm test

----------------------------------------

TITLE: Performance Tracking with performance.now() in Next.js
DESCRIPTION: This snippet demonstrates how to use performance.now() instead of Date.now() for accurate performance tracking in a Next.js page component.

LANGUAGE: jsx
CODE:
export default async function Page() {
  const start = performance.now();
  const data = computeDataSlowly(...);
  const end = performance.now();
  console.log(`somethingSlow took ${end - start} milliseconds to complete`)
  return ...
}

----------------------------------------

TITLE: Creating Next.js Script Component App with pnpm
DESCRIPTION: Command to bootstrap a new Next.js application using the script-component example with pnpm.

LANGUAGE: bash
CODE:
pnpm create next-app --example script-component script-component-app

----------------------------------------

TITLE: Incorrect Node.js Module Usage Example in Next.js
DESCRIPTION: Shows problematic implementation of Node.js-specific modules in client-side code, which will cause runtime errors.

LANGUAGE: javascript
CODE:
import Redis from 'ioredis'

const redis = new Redis(process.env.REDIS_URL)

export default redis

LANGUAGE: jsx
CODE:
import redis from '../lib/redis'
import { useEffect, useState } from 'react'

export default function Home() {
  const [message, setMessage] = useState()
  useEffect(() => {
    redis.get('message').then((result) => {
      setMessage(result)
    })
  }, [])
  return <h1>{message}</h1>
}

----------------------------------------

TITLE: Installing Redis Example with PNPM
DESCRIPTION: Command to create a new Next.js project with Redis integration using PNPM create next-app

LANGUAGE: bash
CODE:
pnpm create next-app --example with-redis roadmap

----------------------------------------

TITLE: Creating Next.js App with ESLint using Yarn
DESCRIPTION: Command to bootstrap a Next.js application with ESLint configuration using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-eslint with-eslint-app

----------------------------------------

TITLE: Promoting PlanetScale Database Branch
DESCRIPTION: Command to promote a database branch to production using PlanetScale CLI.

LANGUAGE: sh
CODE:
pscale branch promote <DATABASE_NAME> <BRANCH_NAME>

----------------------------------------

TITLE: Installing Next.js TakeShape Blog with Yarn
DESCRIPTION: Command to create a new Next.js application with TakeShape CMS integration using yarn create

LANGUAGE: bash
CODE:
yarn create next-app --example cms-takeshape cms-takeshape-app

----------------------------------------

TITLE: Running Next.js with WASM
DESCRIPTION: This command forces Next.js to use the WASM binary by disabling native addons. It's used when testing WASM builds locally.

LANGUAGE: bash
CODE:
NODE_OPTIONS='--no-addons'

----------------------------------------

TITLE: Demonstrating TypeScript Import Error in Next.js
DESCRIPTION: This code snippet illustrates the type of import error that can occur when TypeScript types are not properly exported or imported in a Next.js project. It shows the specific error message that developers might encounter.

LANGUAGE: javascript
CODE:
Attempted import error: 'TypeA' is not exported from './package-1'.

----------------------------------------

TITLE: Installing Next.js with Sass using create-next-app (pnpm)
DESCRIPTION: Command to create a new Next.js project with Sass support using pnpm's create-next-app command.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-sass with-sass-app

----------------------------------------

TITLE: Importing Images in Next.js Custom App Component
DESCRIPTION: Example showing how to properly import and display images in Next.js by using the _app.js file instead of _document.js. Uses next/image component for optimized image handling.

LANGUAGE: jsx
CODE:
import yourImage from 'path/to/your/image'
import Image from 'next/image'

function MyApp({ Component, pageProps }) {
  return (
    <>
      <Image src={yourImage} alt="your_image_description" />
      <Component {...pageProps} />
    </>
  )
}

export default MyApp

----------------------------------------

TITLE: Installing Next.js Application with Realm Web SDK using PNPM
DESCRIPTION: Command to create a new Next.js application with Realm Web SDK integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-realm-web with-realm-web-app

----------------------------------------

TITLE: Installing Quilljs with NPM in Next.js
DESCRIPTION: Command to create a new Next.js application with Quilljs integration using NPM package manager.

LANGUAGE: bash
CODE:
npx create-next-app --example with-quill-js with-quill-js-app

----------------------------------------

TITLE: Demonstrating Incompatible Next.js Dynamic Route Props
DESCRIPTION: Example showing incorrect usage of href and as props in Next.js Link component where the as prop contains extra path segments not defined in the dynamic route pattern.

LANGUAGE: jsx
CODE:
import Link from 'next/link'

export default function Page(props) {
  return (
    <>
      <Link href="/[post]" as="/post-1/comments">
        <a>Invalid link</a>
      </Link>
    </>
  )
}

----------------------------------------

TITLE: Creating Jest Test Template for Next.js in JavaScript
DESCRIPTION: This snippet demonstrates a basic structure for a Jest test in a Next.js project. It includes a describe block with a placeholder name and a single test case using the 'it' function. The test checks if a string type is correctly identified.

LANGUAGE: javascript
CODE:
describe('{{name}}', () => {
  it('should work', async () => {
    expect(typeof 'hello').toBe('string')
  })
})

----------------------------------------

TITLE: Creating Next.js App with Layout Component Example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the layout-component example. It sets up the project structure and installs necessary dependencies.

LANGUAGE: bash
CODE:
pnpm create next-app --example layout-component layout-component-app

----------------------------------------

TITLE: Implementing Web Vitals Reporting in Next.js Pages Router
DESCRIPTION: This snippet shows how to use the useReportWebVitals hook in the _app.js file for the Pages Router. It demonstrates basic usage by logging the metric to the console.

LANGUAGE: jsx
CODE:
import { useReportWebVitals } from 'next/web-vitals'

function MyApp({ Component, pageProps }) {
  useReportWebVitals((metric) => {
    console.log(metric)
  })

  return <Component {...pageProps} />
}

----------------------------------------

TITLE: Building WASM for Next.js SWC
DESCRIPTION: This command builds the WASM target for @next/swc. It requires wasm-pack to be installed and is used for testing WASM builds locally.

LANGUAGE: bash
CODE:
pnpm --filter=@next/swc build-wasm --target <wasm_target>

----------------------------------------

TITLE: Setting ISR Expire Time in Next.js Configuration
DESCRIPTION: Demonstrates how to configure a custom stale-while-revalidate expire time in next.config.js. The expireTime property is set in seconds and affects how the Cache-Control header is calculated for ISR-enabled pages. For example, with a one-hour expire time and 15-minute revalidate period, the Cache-Control header will be set to s-maxage=900, stale-while-revalidate=2700.

LANGUAGE: javascript
CODE:
module.exports = {
  // one hour in seconds
  expireTime: 3600,
}

----------------------------------------

TITLE: Caching Current Time in Next.js with use cache Directive
DESCRIPTION: This example shows how to move the current time read inside a cached function using the 'use cache' directive in a Next.js page component.

LANGUAGE: jsx
CODE:
async function InformationTable() {
  "use cache"
  const data = await fetch(...)
  return (
    <>
      <section>
        <h1>Latest Info...</h1>
        <table>{renderData(data)}</table>
      </section>
      Last Refresh: {new Date().toString()}
    </>
  )
}

export default async function Page() {
  return (
    <main>
      <InformationTable />
    </main>
  )
}

----------------------------------------

TITLE: Implementing a Secure Preview API Route in Next.js
DESCRIPTION: This code demonstrates a secure implementation of a preview API route, including token validation, slug checking, and redirection.

LANGUAGE: javascript
CODE:
export default async (req, res) => {
  // Check the secret and next parameters
  // This secret should only be known to this API route and the CMS
  if (req.query.secret !== 'MY_SECRET_TOKEN' || !req.query.slug) {
    return res.status(401).json({ message: 'Invalid token' })
  }

  // Fetch the headless CMS to check if the provided `slug` exists
  // getPostBySlug would implement the required fetching logic to the headless CMS
  const post = await getPostBySlug(req.query.slug)

  // If the slug doesn't exist prevent preview mode from being enabled
  if (!post) {
    return res.status(401).json({ message: 'Invalid slug' })
  }

  // Enable Preview Mode by setting the cookies
  res.setPreviewData({})

  // Redirect to the path from the fetched post
  // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities
  res.redirect(post.slug)
}

----------------------------------------

TITLE: Watching URL Changes with componentDidUpdate in Next.js
DESCRIPTION: Shows how to detect URL changes in class components using the componentDidUpdate lifecycle method with the router prop.

LANGUAGE: jsx
CODE:
componentDidUpdate(prevProps) {
  const { pathname, query } = this.props.router
  // verify props have changed to avoid an infinite loop
  if (query.counter !== prevProps.router.query.counter) {
    // fetch data based on the new query
  }
}

----------------------------------------

TITLE: Using unstable_noStore to Opt Out of Static Generation in Next.js
DESCRIPTION: This snippet demonstrates how to use the unstable_noStore function from next/cache to opt out of static generation before a try/catch block. This approach prevents the Static Bail Out error when using dynamic rendering APIs.

LANGUAGE: javascript
CODE:
import { unstable_noStore } from 'next/cache'

async function fetchData() {
  unstable_noStore() // opt out before we even get to the try/catch
  try {
    const response = await fetch(url);
    ...
  } catch (x) {
    ...
  }
}

----------------------------------------

TITLE: Generating a Sitemap Programmatically in Next.js (JavaScript)
DESCRIPTION: Example of generating a sitemap programmatically using a sitemap.js file in Next.js. It exports a default function that returns an array of URL objects.

LANGUAGE: javascript
CODE:
export default function sitemap() {
  return [
    {
      url: 'https://acme.com',
      lastModified: new Date(),
      changeFrequency: 'yearly',
      priority: 1,
    },
    {
      url: 'https://acme.com/about',
      lastModified: new Date(),
      changeFrequency: 'monthly',
      priority: 0.8,
    },
    {
      url: 'https://acme.com/blog',
      lastModified: new Date(),
      changeFrequency: 'weekly',
      priority: 0.5,
    },
  ]
}

----------------------------------------

TITLE: Starting Development Server with NPM
DESCRIPTION: Commands to install dependencies and start the Next.js development server using NPM.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Creating Next.js Docker Project with Yarn
DESCRIPTION: Command to create a new Next.js project with Docker support using Yarn and create-next-app

LANGUAGE: bash
CODE:
yarn create next-app --example with-docker nextjs-docker

----------------------------------------

TITLE: Installing Vitest Dependencies
DESCRIPTION: Commands for installing required dependencies for Vitest setup in both TypeScript and JavaScript projects.

LANGUAGE: bash
CODE:
# Using TypeScript
npm install -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom vite-tsconfig-paths
# Using JavaScript
npm install -D vitest @vitejs/plugin-react jsdom @testing-library/react @testing-library/dom

----------------------------------------

TITLE: Incorrect Next.js Data Fetching Method Export
DESCRIPTION: Example showing the incorrect way of attaching getStaticProps as a property of the page component, which will cause an error in Next.js.

LANGUAGE: jsx
CODE:
function Page(props) {
  return <p>hello world</p>
}

Page.getStaticProps = () => ({
  props: {
    hello: 'world',
  },
})

export default Page

----------------------------------------

TITLE: Next.js MDX Page Extensions Configuration
DESCRIPTION: Setup for handling MDX files as pages with custom page extensions.

LANGUAGE: javascript
CODE:
const withMDX = require('@next/mdx')({
  extension: /\.mdx?$/,
})
module.exports = withMDX({
  pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'md', 'mdx'],
})

----------------------------------------

TITLE: Initializing MSW Service Worker with Yarn
DESCRIPTION: Command to generate the Mock Service Worker file in the public directory using Yarn

LANGUAGE: bash
CODE:
yarn msw init public/

----------------------------------------

TITLE: Asynchronous Request Access Pattern (After)
DESCRIPTION: Corrected example showing proper async/await usage for accessing params and searchParams in Next.js 15

LANGUAGE: jsx
CODE:
export default async function ComponentThatWillBeExportedAsPage({ params, searchParams }) {
  const { slug } = await params;
  const { page } = await searchParams
  return <RenderList slug={slug} page={page}>
}

----------------------------------------

TITLE: Installing Redis Example with NPX
DESCRIPTION: Command to create a new Next.js project with Redis integration using NPX create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example with-redis roadmap

----------------------------------------

TITLE: Installing Next.js Canary Version using npm
DESCRIPTION: This command installs the latest canary version of Next.js using npm. The canary version includes all features and fixes that have not been released to the stable version yet.

LANGUAGE: bash
CODE:
npm install next@canary

----------------------------------------

TITLE: Handling Specific Web Vitals Metrics in Next.js Pages Router
DESCRIPTION: This code snippet shows how to handle specific Web Vitals metrics using a switch statement in the Pages Router. It provides a structure for handling different metrics like FCP and LCP.

LANGUAGE: jsx
CODE:
import { useReportWebVitals } from 'next/web-vitals'

function MyApp({ Component, pageProps }) {
  useReportWebVitals((metric) => {
    switch (metric.name) {
      case 'FCP': {
        // handle FCP results
      }
      case 'LCP': {
        // handle LCP results
      }
      // ...
    }
  })

  return <Component {...pageProps} />
}

----------------------------------------

TITLE: Installing Next.js Project with pnpm
DESCRIPTION: Command to create a new Next.js project using pnpm and the Docker Compose example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-docker-compose with-docker-compose-app

----------------------------------------

TITLE: Creating Next.js App with React Hook Form using Yarn
DESCRIPTION: Command to bootstrap a new Next.js application with React Hook Form integration using Yarn create command.

LANGUAGE: bash
CODE:
yarn create next-app --example with-react-hook-form with-react-hook-form-app

----------------------------------------

TITLE: Installing Next.js with React Toolbox using Yarn
DESCRIPTION: Command to create a new Next.js application with React Toolbox integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-react-toolbox with-react-toolbox-app

----------------------------------------

TITLE: Dynamic Rendering Decision Matrix
DESCRIPTION: Table showing how Dynamic APIs and data caching affect whether a route is statically or dynamically rendered in Next.js.

LANGUAGE: markdown
CODE:
| Dynamic APIs | Data       | Route                |
| ------------ | ---------- | -------------------- |
| No           | Cached     | Statically Rendered  |
| Yes          | Cached     | Dynamically Rendered |
| No           | Not Cached | Dynamically Rendered |
| Yes          | Not Cached | Dynamically Rendered |

----------------------------------------

TITLE: Installing Next.js SEO Example with PNPM
DESCRIPTION: Command to create a new Next.js application with next-seo integration using pnpm create

LANGUAGE: bash
CODE:
pnpm create next-app --example with-next-seo next-seo-app

----------------------------------------

TITLE: Generating Rust Registration Code with Build Script
DESCRIPTION: Example of automatically generated registration code that maps global identifiers to concrete implementations. The code registers various value types and functions with unique identifiers that include crate name, hash, and full path information.

LANGUAGE: rust
CODE:
// target/debug/build/turbo-tasks-{hash}/out/register.rs

{
crate::nothing::NOTHINGVC_IMPL_NEW_FUNCTION.register(r##"turbo-tasks@TODO::::nothing::NothingVc::new"##);
crate::display::VALUETOSTRING_TRAIT_TYPE.register(r##"turbo-tasks@TODO::::display::ValueToString"##);
crate::primitives::STRING_VALUE_TYPE.register(r##"turbo-tasks@TODO::::primitives::String"##);
crate::primitives::BOOL_VALUE_TYPE.register(r##"turbo-tasks@TODO::::primitives::Bool"##);
crate::nothing::NOTHING_VALUE_TYPE.register(r##"turbo-tasks@TODO::::nothing::Nothing"##);
crate::native_function::NATIVEFUNCTION_VALUE_TYPE.register(r##"turbo-tasks@TODO::::native_function::NativeFunction"##);
crate::completion::COMPLETION_VALUE_TYPE.register(r##"turbo-tasks@TODO::::completion::Completion"##);
}

----------------------------------------

TITLE: Creating Next.js App with Head Elements Example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the head-elements example. It sets up a project named 'head-elements-app' with the necessary configuration for injecting head elements.

LANGUAGE: bash
CODE:
pnpm create next-app --example head-elements head-elements-app

----------------------------------------

TITLE: Configuring Headers for Streaming in next.config.js
DESCRIPTION: This code snippet shows how to configure headers in next.config.js to disable buffering and enable streaming responses when using Nginx or similar proxies.

LANGUAGE: jsx
CODE:
module.exports = {
  async headers() {
    return [
      {
        source: '/:path*{/}?',
        headers: [
          {
            key: 'X-Accel-Buffering',
            value: 'no',
          },
        ],
      },
    ]
  },
}

----------------------------------------

TITLE: Creating Next.js Project with Three.js using npx
DESCRIPTION: Command to create a new Next.js project with Three.js integration using npx and create-next-app. This sets up the project structure and installs necessary dependencies.

LANGUAGE: bash
CODE:
npx create-next-app --example with-three-js with-three-js-app

----------------------------------------

TITLE: Configuring Emotion in Next.js
DESCRIPTION: Setup for Emotion CSS-in-JS library with various compilation options in Next.js.

LANGUAGE: javascript
CODE:
module.exports = {
  compiler: {
    emotion: {
      sourceMap: true,
      autoLabel: 'dev-only',
      labelFormat: '[local]',
      importMap: {}
    },
  },
}

----------------------------------------

TITLE: Installing MDX Remote Example with yarn
DESCRIPTION: Command to create a new Next.js application using the mdx-remote example template with yarn.

LANGUAGE: bash
CODE:
yarn create next-app --example mdx-remote mdx-remote-app

----------------------------------------

TITLE: Installing Next.js with Reflexjs using Yarn
DESCRIPTION: Command to create a new Next.js application with Reflexjs integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-reflexjs with-reflexjs-app

----------------------------------------

TITLE: Implementing getInitialProps in Functional Component - Next.js JSX
DESCRIPTION: Demonstrates how to add getInitialProps to a functional component by assigning it as a static property after the component definition. This approach achieves the same result as the class-based implementation.

LANGUAGE: jsx
CODE:
const YourEntryComponent = function () {
  return 'foo'
}

YourEntryComponent.getInitialProps = () => {
  return {}
}

export default YourEntryComponent

----------------------------------------

TITLE: Creating Next.js App with Relay Modern using PNPM
DESCRIPTION: Command to create a new Next.js application with Relay Modern template using PNPM package manager

LANGUAGE: bash
CODE:
pnpm create next-app --example with-relay-modern with-relay-modern-app

----------------------------------------

TITLE: Running Turbopack Benchmark with Custom Module Count
DESCRIPTION: Command to run Turbopack benchmarks with a specified number of test modules using environment variables.

LANGUAGE: sh
CODE:
TURBOPACK_BENCH_COUNTS=5000 cargo bench -p turbopack-bench

----------------------------------------

TITLE: Incorrect Usage of 'use server' in Next.js
DESCRIPTION: This code snippet demonstrates incorrect usage of 'use server' directive where non-async functions or values are exported. These are not allowed in server action files.

LANGUAGE: javascript
CODE:
'use server'

// ❌ This is incorrect: only async functions are allowed.
export const value = 1

// ❌ This is incorrect: missed the `async` keyword.
export function getServerData() {
  return '...'
}

----------------------------------------

TITLE: Configuring Partial Prerendering in Next.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to configure Partial Prerendering in the next.config.js file. It sets the 'ppr' option to 'incremental' in the experimental settings.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    ppr: 'incremental',
  },
}

module.exports = nextConfig

----------------------------------------

TITLE: Using CSS Modules in Next.js Components
DESCRIPTION: Example of using CSS Modules in a Next.js component, demonstrating how to import and apply scoped styles to specific components.

LANGUAGE: jsx
CODE:
import styles from '../../styles.module.css'

export default function Home() {
  return <div className={styles.container}>Hello World</div>
}

----------------------------------------

TITLE: Installing Next.js Ably Project
DESCRIPTION: Commands to create a new Next.js project with Ably integration using different package managers

LANGUAGE: bash
CODE:
npx create-next-app --example with-ably with-ably-app

yarn create next-app --example with-ably with-ably-app

pnpm create next-app --example with-ably with-ably-app

----------------------------------------

TITLE: Specifying Font Subsets in Next.js
DESCRIPTION: This snippet demonstrates how to specify which subsets to preload for a font using the Inter font from next/font/google. It shows the correct usage of the subsets option.

LANGUAGE: javascript
CODE:
const inter = Inter({ subsets: ['latin'] })

----------------------------------------

TITLE: Creating Next.js App with MobX using Yarn
DESCRIPTION: Command to bootstrap a new Next.js application with MobX integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-mobx with-mobx-app

----------------------------------------

TITLE: Installing and Running Development Server with Yarn
DESCRIPTION: Commands to install dependencies and start the development server using Yarn package manager.

LANGUAGE: sh
CODE:
yarn
yarn dev

----------------------------------------

TITLE: Installing Next.js with EdgeDB Template using NPX
DESCRIPTION: Command to create a new Next.js application with EdgeDB template using npx create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example with-edgedb with-edgedb-app

----------------------------------------

TITLE: Valid Empty Config Object in Next.js
DESCRIPTION: Example showing correct usage with an empty config object.

LANGUAGE: javascript
CODE:
export const config = {}

----------------------------------------

TITLE: Creating Next.js App with Firebase Hosting using NPX
DESCRIPTION: Command to bootstrap a new Next.js application with Firebase Hosting integration using NPX create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example with-firebase-hosting with-firebase-hosting-app

----------------------------------------

TITLE: Creating a Next.js Project with TypeScript and GraphQL
DESCRIPTION: These bash commands show how to create a new Next.js project using the TypeScript and GraphQL template with different package managers.

LANGUAGE: bash
CODE:
npx create-next-app --example with-typescript-graphql with-typescript-graphql-app

LANGUAGE: bash
CODE:
yarn create next-app --example with-typescript-graphql with-typescript-graphql-app

LANGUAGE: bash
CODE:
pnpm create next-app --example with-typescript-graphql with-typescript-graphql-app

----------------------------------------

TITLE: Installing Next.js with Vanilla Extract using Yarn
DESCRIPTION: Command to create a new Next.js application with Vanilla Extract integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-vanilla-extract with-vanilla-extract-app

----------------------------------------

TITLE: Using Router Methods in Class Components with componentDidMount
DESCRIPTION: Example showing how to properly use router methods in a class component by placing them in componentDidMount lifecycle method to ensure client-side execution.

LANGUAGE: javascript
CODE:
componentDidMount() {
  this.props.router.push('/some-path')
}

----------------------------------------

TITLE: Defining External Function with Dependencies
DESCRIPTION: Exports a function that depends on an internal function and foobar variable

LANGUAGE: javascript
CODE:
export function external1() {
    return internal() + foobar;
}

----------------------------------------

TITLE: Disallowed Re-export in Next.js Page
DESCRIPTION: This snippet shows the disallowed syntax for re-exporting all exports from a page in Next.js, which can potentially break the compilation process.

LANGUAGE: jsx
CODE:
export * from '...'

----------------------------------------

TITLE: Installing XState Inspect Package
DESCRIPTION: Commands to install the @xstate/inspect package for debugging and visualizing XState machines in development mode.

LANGUAGE: bash
CODE:
npm install @xstate/inspect
# or
yarn add @xstate/inspect
# or
pnpm add @xstate/inspect

----------------------------------------

TITLE: Configuring Viewport Meta Tag in Next.js _app.js
DESCRIPTION: Demonstrates the correct implementation of viewport meta tags using next/head in the application wrapper component. The viewport meta tag is placed in _app.js to ensure proper deduplication and consistent behavior across the application.

LANGUAGE: jsx
CODE:
import Head from 'next/head'

function MyApp({ Component, pageProps }) {
  return (
    <>
      <Head>
        <meta name="viewport" content="viewport-fit=cover" />
      </Head>
      <Component {...pageProps} />
    </>
  )
}

export default MyApp

----------------------------------------

TITLE: Running Mocha Tests in Next.js Application
DESCRIPTION: Commands to execute Mocha tests using different package managers (npm, yarn, or pnpm).

LANGUAGE: bash
CODE:
npm run test
# or
yarn test
# or
pnpm test

----------------------------------------

TITLE: Installing Next.js with Meilisearch using Yarn
DESCRIPTION: Command to create a new Next.js application with Meilisearch integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-meilisearch with-meilisearch-app

----------------------------------------

TITLE: Removing Container Component from Custom App in Next.js
DESCRIPTION: This snippet demonstrates how to update the custom App component in Next.js to resolve the "App Container Deprecated" error. It shows the transition from using the Container component to removing it entirely.

LANGUAGE: jsx
CODE:
import React from 'react'
import App, { Container } from 'next/app'

class MyApp extends App {
  render() {
    const { Component, pageProps } = this.props
    return (
      <Container>
        <Component {...pageProps} />
      </Container>
    )
  }
}

export default MyApp

LANGUAGE: jsx
CODE:
import React from 'react'
import App from 'next/app'

class MyApp extends App {
  render() {
    const { Component, pageProps } = this.props
    return <Component {...pageProps} />
  }
}

export default MyApp

----------------------------------------

TITLE: Creating Next.js Electron App with npm
DESCRIPTION: Command to create a new Next.js Electron application using npm and create-next-app. This sets up the project with the 'with-electron' example template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-electron with-electron-app

----------------------------------------

TITLE: Enabling Draft Mode in Next.js Route Handler
DESCRIPTION: Implements draft mode functionality using Next.js draftMode() function. Sets up a cookie to enable draft mode for subsequent requests.

LANGUAGE: typescript
CODE:
import { draftMode } from 'next/headers'

export async function GET(request: Request) {
  const draft = await draftMode()
  draft.enable()
  return new Response('Draft mode is enabled')
}

LANGUAGE: javascript
CODE:
import { draftMode } from 'next/headers'

export async function GET(request) {
  const draft = await draftMode()
  draft.enable()
  return new Response('Draft mode is enabled')
}

----------------------------------------

TITLE: Adding Metadata to a Next.js Page
DESCRIPTION: This code demonstrates how to add metadata to a Next.js page using the Metadata API. It allows for modifying <head> HTML elements such as title and meta tags.

LANGUAGE: typescript
CODE:
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Next.js',
}

export default function Page() {
  return '...'
}

LANGUAGE: javascript
CODE:
export const metadata = {
  title: 'Next.js',
}

export default function Page() {
  return '...'
}

----------------------------------------

TITLE: Variable Manipulation in Next.js
DESCRIPTION: Shows variable declarations and string concatenation operations. This snippet demonstrates how to declare variables, modify their values, and perform basic string operations.

LANGUAGE: javascript
CODE:
const bar = "bar";

foobar += bar;

let foobarCopy = foobar;

foobar += "foo";

console.log(foobarCopy);

foobarCopy += "Unused";

----------------------------------------

TITLE: Configuring Webpack Resolve Aliases in Next.js
DESCRIPTION: Demonstrates the correct way to extend webpack's resolve.alias configuration in next.config.js while preserving Next.js internal aliases. This prevents the 'private-next-pages is not defined' error by spreading existing aliases before adding custom ones.

LANGUAGE: javascript
CODE:
webpack(config) {
  config.resolve.alias = {
    ...config.resolve.alias,
    // your aliases
  }
}

----------------------------------------

TITLE: Generating a Sitemap Programmatically in Next.js (TypeScript)
DESCRIPTION: Example of generating a sitemap programmatically using a sitemap.ts file in Next.js. It exports a default function that returns an array of URL objects.

LANGUAGE: typescript
CODE:
import type { MetadataRoute } from 'next'

export default function sitemap(): MetadataRoute.Sitemap {
  return [
    {
      url: 'https://acme.com',
      lastModified: new Date(),
      changeFrequency: 'yearly',
      priority: 1,
    },
    {
      url: 'https://acme.com/about',
      lastModified: new Date(),
      changeFrequency: 'monthly',
      priority: 0.8,
    },
    {
      url: 'https://acme.com/blog',
      lastModified: new Date(),
      changeFrequency: 'weekly',
      priority: 0.5,
    },
  ]
}

----------------------------------------

TITLE: Next.js MDX with MD Extension Support
DESCRIPTION: Configuration to handle both .md and .mdx file extensions.

LANGUAGE: javascript
CODE:
const withMDX = require('@next/mdx')({
  extension: /\.(md|mdx)$/,
})
module.exports = withMDX()

----------------------------------------

TITLE: Disabling AMP Validation in Next.js
DESCRIPTION: Configuration to skip AMP validation in next.config.js

LANGUAGE: js
CODE:
experimental: {
  amp: {
    skipValidation: true
  }
}

----------------------------------------

TITLE: Disabling Static Image Imports in Next.js Configuration
DESCRIPTION: Configuration example showing how to disable the built-in image loader in Next.js when not using image imports with next/image component.

LANGUAGE: javascript
CODE:
module.exports = {
  images: {
    disableStaticImages: true,
  },
}

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to copy the example environment variables file to create a local configuration file. This file will store the necessary API keys and secrets for the Magic authentication setup.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Creating Next.js Project with Three.js using pnpm
DESCRIPTION: Command to create a new Next.js project with Three.js integration using pnpm and create-next-app. This method uses the pnpm package manager for project setup.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-three-js with-three-js-app

----------------------------------------

TITLE: Defining Global CSS Styles in Next.js
DESCRIPTION: Example of global CSS styles defined in styles.css that affect the entire application's body element. Sets font family, padding, maximum width, and margin properties.

LANGUAGE: css
CODE:
body {
  font-family: 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',
    'Arial', sans-serif;
  padding: 20px 20px 60px;
  max-width: 680px;
  margin: 0 auto;
}

----------------------------------------

TITLE: Running Bundle Analysis Build Command
DESCRIPTION: Commands to run the bundle analysis build process with different package managers.

LANGUAGE: bash
CODE:
ANALYZE=true npm run build
# or
ANALYZE=true yarn build
# or
ANALYZE=true pnpm build

----------------------------------------

TITLE: Implementing Styled-JSX Registry in Next.js
DESCRIPTION: Creates a style registry component for styled-jsx integration in Next.js App Router. Uses useServerInsertedHTML hook to inject CSS rules during server-side rendering.

LANGUAGE: typescript
CODE:
'use client'

import React, { useState } from 'react'
import { useServerInsertedHTML } from 'next/navigation'
import { StyleRegistry, createStyleRegistry } from 'styled-jsx'

export default function StyledJsxRegistry({
  children,
}: {
  children: React.ReactNode
}) {
  const [jsxStyleRegistry] = useState(() => createStyleRegistry())

  useServerInsertedHTML(() => {
    const styles = jsxStyleRegistry.styles()
    jsxStyleRegistry.flush()
    return <>{styles}</>
  })

  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>
}

----------------------------------------

TITLE: Installing Next.js with Recoil using Yarn
DESCRIPTION: Command to create a new Next.js application with Recoil integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-recoil with-recoil-app

----------------------------------------

TITLE: Copying Environment Configuration File
DESCRIPTION: Command to copy the example environment configuration file to create a local configuration file for setting up Facebook Pixel ID.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Creating Next.js App with Yoga Design System using pnpm
DESCRIPTION: This command uses pnpm to initialize a new Next.js project with Yoga Design System integration.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-yoga with-yoga-app

----------------------------------------

TITLE: Incorrect Usage of next/dynamic Options in JSX
DESCRIPTION: This snippet demonstrates the incorrect way of passing options to next/dynamic. The options are defined as a separate variable, which is not allowed.

LANGUAGE: jsx
CODE:
import dynamic from 'next/dynamic'

const options = { loading: () => <p>...</p>, ssr: false }
const DynamicComponent = dynamic(() => import('../components/hello'), options)

----------------------------------------

TITLE: Shallow Routing in Next.js
DESCRIPTION: Demonstrates how to use shallow routing to update the URL without running data fetching methods again, using the useRouter hook.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react'
import { useRouter } from 'next/router'

// Current URL is '/'
function Page() {
  const router = useRouter()

  useEffect(() => {
    // Always do navigations after the first render
    router.push('/?counter=10', undefined, { shallow: true })
  }, [])

  useEffect(() => {
    // The counter changed!
  }, [router.query.counter])
}

export default Page

----------------------------------------

TITLE: Creating Next.js App with Styled-JSX using Yarn
DESCRIPTION: Command to create a new Next.js application with styled-jsx example using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-styled-jsx with-styled-jsx-app

----------------------------------------

TITLE: Installing Next.js with Google Analytics Template using PNPM
DESCRIPTION: Command to create a new Next.js application with Google Analytics integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-google-analytics with-google-analytics-app

----------------------------------------

TITLE: Creating Next.js App with DatoCMS Template using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js project with the DatoCMS template.

LANGUAGE: bash
CODE:
yarn create next-app --example cms-datocms cms-datocms-app

----------------------------------------

TITLE: Implementing Web Vitals in App Router
DESCRIPTION: Example showing how to implement useReportWebVitals hook in Next.js App Router using a dedicated client component and layout integration.

LANGUAGE: jsx
CODE:
'use client'

import { useReportWebVitals } from 'next/web-vitals'

export function WebVitals() {
  useReportWebVitals((metric) => {
    console.log(metric)
  })

  return null
}

LANGUAGE: jsx
CODE:
import { WebVitals } from './_components/web-vitals'

export default function Layout({ children }) {
  return (
    <html>
      <body>
        <WebVitals />
        {children}
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Installing Apollo Server and Client Auth Example with npm
DESCRIPTION: Command to create a new Next.js application using the Apollo Server and Client Auth example template with npm.

LANGUAGE: bash
CODE:
npx create-next-app --example api-routes-apollo-server-and-client-auth api-routes-apollo-server-and-client-auth-app

----------------------------------------

TITLE: Importing and Exporting in Next.js
DESCRIPTION: Demonstrates importing a named export from a module and re-exporting it. This snippet shows how to import a specific function and make it available for use in other parts of the application.

LANGUAGE: javascript
CODE:
import { upper } from "module";

export let foobar = "foo";

export const foo = foobar;

----------------------------------------

TITLE: Trailing Slash Configuration
DESCRIPTION: Configuration to maintain trailing slash behavior for exported pages in Next.js 9

LANGUAGE: javascript
CODE:
module.exports = {
  trailingSlash: true,
}

----------------------------------------

TITLE: Basic Variable Operations in JavaScript
DESCRIPTION: A sequence of basic variable declarations and operations including initialization, logging, arithmetic operations and reassignment.

LANGUAGE: javascript
CODE:
let x = 0;
console.log(x);
x = 1;
x = 2;
let y = x;
let z = x;
x = y + z;
x = x + 1;
x *= 2;
console.log(x);
let a = x;
x = x + a + 5;
x = 100;

----------------------------------------

TITLE: Configuring Ably Environment Variables
DESCRIPTION: Environment variables required for Ably integration

LANGUAGE: bash
CODE:
ABLY_API_KEY=your-ably-api-key:goes-here
API_ROOT=http://localhost:3000

----------------------------------------

TITLE: Installing Next.js Bundle Analyzer Package
DESCRIPTION: Command line instructions for installing the @next/bundle-analyzer package using npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install @next/bundle-analyzer

LANGUAGE: bash
CODE:
yarn add @next/bundle-analyzer

----------------------------------------

TITLE: Creating SuperTokens App with create-next-app using Yarn
DESCRIPTION: Command to bootstrap a SuperTokens example app using create-next-app with Yarn.

LANGUAGE: bash
CODE:
yarn create next-app --example with-supertokens with-supertokens-app

----------------------------------------

TITLE: Building and Running Next.js Production Build
DESCRIPTION: Commands to build and start the Next.js application in production mode using npm, yarn, or pnpm.

LANGUAGE: bash
CODE:
npm run build
npm run start
# or
yarn build
yarn start
# or
pnpm build
pnpm start

----------------------------------------

TITLE: Creating Next.js Electron App with Yarn
DESCRIPTION: Command to create a new Next.js Electron application using Yarn and create-next-app. This sets up the project with the 'with-electron' example template.

LANGUAGE: bash
CODE:
yarn create next-app --example with-electron with-electron-app

----------------------------------------

TITLE: Merged Module Evaluation
DESCRIPTION: Final merged module code combining imports, conditional logic, and module evaluation.

LANGUAGE: javascript
CODE:
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { baz } from './module';
if (1 + 1 == 3) {
    baz();
}
"module evaluation";

----------------------------------------

TITLE: Disabling Font Preloading in Next.js
DESCRIPTION: This code example shows how to disable preloading for a specific font (Noto Sans Japanese) when it's not possible to preload the intended subset. It demonstrates setting the preload option to false.

LANGUAGE: javascript
CODE:
const notoSansJapanese = Noto_Sans_JP({
  weight: '400',
  preload: false,
})

----------------------------------------

TITLE: Updating package.json Build Configuration in Next.js
DESCRIPTION: Shows how to modify the build script in package.json to remove static export and enable server-side rendering. Removes 'next export' from the build command to support getServerSideProps.

LANGUAGE: diff
CODE:
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
{
  "scripts": {
    "dev": "next dev",
-    "build": "next build && next export",
+    "build": "next build",
    "start": "next start"
  }
}

----------------------------------------

TITLE: Correct Custom Route Definition in Next.js Configuration
DESCRIPTION: This snippet demonstrates the correct way to define custom routes in Next.js. The `rewrites` function returns an array containing route objects, which is the expected format for Next.js custom routes.

LANGUAGE: javascript
CODE:
module.exports = {
  async rewrites() {
    return [
      {
        source: '/feedback',
        destination: '/feedback/general',
      },
    ]
  },
}

----------------------------------------

TITLE: Implementing NextResponse Class in JavaScript
DESCRIPTION: Core implementation of NextResponse class extending the native Response object. Adds support for cookies, URL handling, JSON responses, redirects, rewrites and middleware processing. Uses a Proxy for cookie operations and includes custom inspection.

LANGUAGE: javascript
CODE:
export class NextResponse extends Response {
    constructor(body, init = {}){
        super(body, init);
        const headers = this.headers;
        const cookies = new ResponseCookies(headers);
        const cookiesProxy = new Proxy(cookies, {
            get (target, prop, receiver) {
                switch(prop){
                    case 'delete':
                    case 'set':
                        {
                            return (...args)=>{
                                const result = Reflect.apply(target[prop], target, args);
                                const newHeaders = new Headers(headers);
                                if (result instanceof ResponseCookies) {
                                    headers.set('x-middleware-set-cookie', result.getAll().map((cookie)=>stringifyCookie(cookie)).join(','));
                                }
                                handleMiddlewareField(init, newHeaders);
                                return result;
                            };
                        }
                    default:
                        return ReflectAdapter.get(target, prop, receiver);
                }
            }
        });
        this[INTERNALS] = {
            cookies: cookiesProxy,
            url: init.url ? new NextURL(init.url, {
                headers: toNodeOutgoingHttpHeaders(headers),
                nextConfig: init.nextConfig
            }) : undefined
        };
    }
}

----------------------------------------

TITLE: Implementing Custom Fonts with Class Component in Next.js
DESCRIPTION: Demonstrates how to add custom fonts globally using a class-based custom Document component in Next.js. This approach ensures proper font optimization and application-wide font availability.

LANGUAGE: jsx
CODE:
import Document, { Html, Head, Main, NextScript } from 'next/document'

class MyDocument extends Document {
  render() {
    return (
      <Html>
        <Head>
          <link
            href="https://fonts.googleapis.com/css2?family=Inter&display=optional"
            rel="stylesheet"
          />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    )
  }
}

export default MyDocument

----------------------------------------

TITLE: Creating Next.js Project with urql using npm
DESCRIPTION: Command to initialize a new Next.js project with urql integration using npm and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-urql with-urql-app

----------------------------------------

TITLE: Creating Next.js Project with Absolute Imports using NPX
DESCRIPTION: This bash command creates a new Next.js project with absolute imports configuration using NPX and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-absolute-imports with-absolute-imports-app

----------------------------------------

TITLE: Creating Next.js App with Couchbase Integration using pnpm
DESCRIPTION: This command utilizes pnpm to initialize a new Next.js project with Couchbase integration. It creates a new directory 'with-couchbase-app' and sets up the project with required files and configurations.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-couchbase with-couchbase-app

----------------------------------------

TITLE: Incompatible `href` and `as` usage in Next.js Link component
DESCRIPTION: This example demonstrates incorrect usage of the Next.js Link component where a relative `href` is combined with an external `as` value, which causes an error.

LANGUAGE: jsx
CODE:
import Link from 'next/link'

export default function Page(props) {
  return (
    <>
      <Link href="/invalid" as="mailto:john@example.com">
        <a>Invalid link</a>
      </Link>
    </>
  )
}

----------------------------------------

TITLE: Creating Next.js App with Sitemap Example using npm
DESCRIPTION: This command uses npx to create a new Next.js application with sitemap generation functionality.

LANGUAGE: bash
CODE:
npx create-next-app --example with-sitemap with-sitemap-app

----------------------------------------

TITLE: Creating Next.js App with Segment Analytics using Yarn
DESCRIPTION: Command to create a new Next.js application with Segment Analytics integration using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-segment-analytics-pages-router with-segment-analytics-app

----------------------------------------

TITLE: Setting BLOG_URL Environment Variable for Multi-Zone Next.js Application
DESCRIPTION: Command to set the BLOG_URL environment variable in the .env file of the 'home' app, which is necessary for connecting the two zones.

LANGUAGE: bash
CODE:
# Replace this URL with the URL of your blog app
BLOG_URL="https://with-zones-blog.vercel.app"

----------------------------------------

TITLE: Using HTML Picture Element
DESCRIPTION: Alternative approach using the HTML picture element with multiple source formats (AVIF, WebP, JPEG) for browser compatibility.

LANGUAGE: jsx
CODE:
function Home() {
  return (
    <picture>
      <source srcSet="https://example.com/hero.avif" type="image/avif" />
      <source srcSet="https://example.com/hero.webp" type="image/webp" />
      <img
        src="https://example.com/hero.jpg"
        alt="Landscape picture"
        width={800}
        height={500}
      />
    </picture>
  )
}

----------------------------------------

TITLE: Combined Exports Configuration
DESCRIPTION: Configures exports for variables 'a' and 'b' using TurboPack part assertions

LANGUAGE: javascript
CODE:
export { a } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export a"
};
export { b } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export b"
};

----------------------------------------

TITLE: Exporting Variables in Next.js
DESCRIPTION: This snippet shows how to export variables in a Next.js module. It demonstrates exporting both let and const variables, which can be imported and used in other parts of the application.

LANGUAGE: javascript
CODE:
export let foobar = "foo";
export const foo = foobar;

----------------------------------------

TITLE: Creating Next.js App with Chakra UI using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with Chakra UI integration. It utilizes the 'create next-app' command with a specific example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-chakra-ui with-chakra-ui-app

----------------------------------------

TITLE: Installing @next/third-parties Package in Next.js
DESCRIPTION: Command to install the @next/third-parties package along with the latest version of Next.js using npm.

LANGUAGE: bash
CODE:
npm install @next/third-parties@latest next@latest

----------------------------------------

TITLE: Creating Next.js Project with Xata Integration using npm
DESCRIPTION: This command uses create-next-app to bootstrap a Next.js project with Xata integration using npm.

LANGUAGE: sh
CODE:
npx create-next-app --example with-xata with-xata-app

----------------------------------------

TITLE: Installing Next.js with Algolia using yarn
DESCRIPTION: Creates a new Next.js application with Algolia React InstantSearch integration using yarn create command.

LANGUAGE: bash
CODE:
yarn create next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app

----------------------------------------

TITLE: Downloading Relay Schema Introspection Data
DESCRIPTION: Commands to fetch and update the GraphQL schema introspection data for Relay, available with npm, yarn, or pnpm

LANGUAGE: bash
CODE:
npm run schema
# or
yarn schema
# or
pnpm schema

----------------------------------------

TITLE: Creating Next.js Docker Project with NPM
DESCRIPTION: Command to create a new Next.js project with Docker support using npm and create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example with-docker nextjs-docker

----------------------------------------

TITLE: Creating Next.js App with i18n Routing using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with internationalized routing using the i18n-routing-pages example.

LANGUAGE: bash
CODE:
pnpm create next-app --example i18n-routing-pages i18n-routing-pages-app

----------------------------------------

TITLE: Generating Icon using ImageResponse in JavaScript
DESCRIPTION: This snippet shows how to programmatically generate an icon using the ImageResponse API from next/og in JavaScript. It exports size and contentType metadata and creates a simple icon with the letter 'A'.

LANGUAGE: jsx
CODE:
import { ImageResponse } from 'next/og'

// Image metadata
export const size = {
  width: 32,
  height: 32,
}
export const contentType = 'image/png'

// Image generation
export default function Icon() {
  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 24,
          background: 'black',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          color: 'white',
        }}
      >
        A
      </div>
    ),
    // ImageResponse options
    {
      // For convenience, we can re-use the exported icons size metadata
      // config to also set the ImageResponse's width and height.
      ...size,
    }
  )
}

----------------------------------------

TITLE: Registering OpenTelemetry in Next.js
DESCRIPTION: Implementation of the register function to initialize OpenTelemetry integration in a Next.js application. This function is called once when a new Next.js server instance starts.

LANGUAGE: typescript
CODE:
import { registerOTel } from '@vercel/otel'

export function register() {
  registerOTel('next-app')
}

LANGUAGE: javascript
CODE:
import { registerOTel } from '@vercel/otel'

export function register() {
  registerOTel('next-app')
}

----------------------------------------

TITLE: Using Router Methods in Function Components with useEffect
DESCRIPTION: Example showing how to properly use router methods in a function component by wrapping them in useEffect to ensure they only execute client-side.

LANGUAGE: javascript
CODE:
useEffect(() => {
  router.push('/some-path')
}, [])

----------------------------------------

TITLE: Customizing User Agents in robots.txt with TypeScript
DESCRIPTION: Advanced TypeScript implementation showing how to customize rules for specific search engine bots using an array of user agents.

LANGUAGE: typescript
CODE:
import type { MetadataRoute } from 'next'

export default function robots(): MetadataRoute.Robots {
  return {
    rules: [
      {
        userAgent: 'Googlebot',
        allow: ['/'],
        disallow: '/private/',
      },
      {
        userAgent: ['Applebot', 'Bingbot'],
        disallow: ['/'],
      },
    ],
    sitemap: 'https://acme.com/sitemap.xml',
  }
}

----------------------------------------

TITLE: Initializing and Exporting Array Order
DESCRIPTION: Declares and exports an empty array named 'order' that will be used to track execution order across modules.

LANGUAGE: javascript
CODE:
export const order = [];

----------------------------------------

TITLE: Third-party Integration with Synchronous Request Access
DESCRIPTION: Demonstrates how to handle third-party libraries that use synchronous Request data access by using connection() as a temporary solution.

LANGUAGE: jsx
CODE:
import { getDataFrom3rdParty } from '3rdparty'

export default function Page() {
  // Imagine this function access Request data synchronously
  // on the inside even if it has an async external interface
  const token = await getDataFrom3rdParty();
  return ...
}

LANGUAGE: jsx
CODE:
import { connection } from 'next/server'

export default async function Page() {
  await connection()
  // Everything from here down will be excluded from prerendering
  const token = await getDataFrom3rdParty();
  validateToken(token)
  return ...
}

----------------------------------------

TITLE: Incorrect Custom Route Definition in Next.js Configuration
DESCRIPTION: This snippet shows an incorrect way of defining custom routes in Next.js, where the `rewrites` function returns an object instead of an array. This will cause an error in the Next.js application.

LANGUAGE: javascript
CODE:
module.exports = {
  async rewrites() {
    return {
      source: '/feedback',
      destination: '/feedback/general',
    }
  },
}

----------------------------------------

TITLE: Creating Next.js App with MDBreact using NPX
DESCRIPTION: Command to create a new Next.js application with MDBreact integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-mdbreact with-mdbreact-app

----------------------------------------

TITLE: Implementing Structured Error Handling in JavaScript
DESCRIPTION: Function that converts errors into a structured format with name, message and parsed stack trace using the stacktrace-parser library.

LANGUAGE: javascript
CODE:
function structuredError(e) {
    e = getProperError(e);
    return {
        name: e.name,
        message: e.message,
        stack: typeof e.stack === "string" ? parseStackTrace(e.stack) : []
    };
}

----------------------------------------

TITLE: Deprecated Middleware Response Patterns in Next.js
DESCRIPTION: Examples of response patterns that are no longer supported in Next.js Middleware as of v12.2+. These patterns directly produce response bodies, which is now disallowed.

LANGUAGE: javascript
CODE:
new Response('a text value')
new Response(streamOrBuffer)
new Response(JSON.stringify(obj), { headers: 'application/json' })
NextResponse.json()

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to run the Next.js development server using different package managers. This allows developers to start the local development environment and view their application.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Configuring PPR in Next.js Routes
DESCRIPTION: Enable Partial Prerendering (PPR) for a layout or page by setting the experimental_ppr flag.

LANGUAGE: typescript
CODE:
export const experimental_ppr = true
// true | false

LANGUAGE: javascript
CODE:
export const experimental_ppr = true
// true | false

----------------------------------------

TITLE: Creating Next.js App with Rematch Example using NPX
DESCRIPTION: Command to create a new Next.js application with the Rematch example using NPX.

LANGUAGE: bash
CODE:
npx create-next-app --example with-rematch with-rematch-app

----------------------------------------

TITLE: Creating Next.js App with CXS using Yarn
DESCRIPTION: Command to create a new Next.js application with CXS styling using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-cxs with-cxs-app

----------------------------------------

TITLE: Creating Next.js App with GSAP using Yarn
DESCRIPTION: Command to create a new Next.js application with GSAP integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-gsap with-gsap-app

----------------------------------------

TITLE: Updating React and React DOM to Latest Versions using Yarn
DESCRIPTION: This command updates React and React DOM to their latest versions using Yarn. Use this alternative if your project uses Yarn as the package manager.

LANGUAGE: bash
CODE:
yarn add react@latest react-dom@latest

----------------------------------------

TITLE: Handling Form Submission on Client-side in Next.js
DESCRIPTION: This code shows how to handle form submission on the client-side by calling an API Route. It includes event handling, form data extraction, and sending a POST request.

LANGUAGE: typescript
CODE:
import { FormEvent } from 'react'

export default function Page() {
  async function onSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault()

    const formData = new FormData(event.currentTarget)
    const response = await fetch('/api/submit', {
      method: 'POST',
      body: formData,
    })

    // Handle response if necessary
    const data = await response.json()
    // ...
  }

  return (
    <form onSubmit={onSubmit}>
      <input type="text" name="name" />
      <button type="submit">Submit</button>
    </form>
  )
}

LANGUAGE: javascript
CODE:
export default function Page() {
  async function onSubmit(event) {
    event.preventDefault()

    const formData = new FormData(event.target)
    const response = await fetch('/api/submit', {
      method: 'POST',
      body: formData,
    })

    // Handle response if necessary
    const data = await response.json()
    // ...
  }

  return (
    <form onSubmit={onSubmit}>
      <input type="text" name="name" />
      <button type="submit">Submit</button>
    </form>
  )
}

----------------------------------------

TITLE: Creating Next.js ButterCMS App via NPM
DESCRIPTION: Command to bootstrap a new Next.js application with ButterCMS using create-next-app and npm.

LANGUAGE: bash
CODE:
npx create-next-app --example cms-buttercms cms-buttercms-app

----------------------------------------

TITLE: Creating Next.js App with Server Side Rendered Portals using pnpm
DESCRIPTION: Command to bootstrap a Next.js application with Server Side Rendered Portals using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-portals-ssr with-portals-ssr-app

----------------------------------------

TITLE: Installing Server Actions Upload Example with Yarn
DESCRIPTION: Creates a new Next.js application with server actions upload functionality using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example server-actions-upload server-actions-upload-app

----------------------------------------

TITLE: Creating Next.js App with Apollo using NPX
DESCRIPTION: Command to create a new Next.js application with Apollo integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-apollo with-apollo-app

----------------------------------------

TITLE: Creating Next.js Project with Azure Cosmos DB Example using pnpm
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with Azure Cosmos DB integration using pnpm.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-azure-cosmos with-azure-cosmos-app

----------------------------------------

TITLE: Installing Next.js Blog Template with PNPM
DESCRIPTION: Command to create a new Next.js application using the Webiny CMS template using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-webiny cms-webiny-app

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using different package managers. Supports npm, yarn, pnpm, and bun.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Defining Frontmatter for Next.js MDX Post
DESCRIPTION: Sets up the frontmatter for a Next.js MDX post, including title and description. This metadata is typically used for SEO and page rendering.

LANGUAGE: markdown
CODE:
---
title: Example Post
description: This frontmatter description will appear below the title
---

----------------------------------------

TITLE: Creating Next.js App with SVG Components using npx
DESCRIPTION: This command uses npx to create a new Next.js application with SVG component support. It utilizes the 'create-next-app' tool with the 'svg-components' example template.

LANGUAGE: bash
CODE:
npx create-next-app --example svg-components svg-components-app

----------------------------------------

TITLE: Installing Next.js with Unsplash Example using npm
DESCRIPTION: This command uses create-next-app to bootstrap a Next.js project with Unsplash integration using npm.

LANGUAGE: bash
CODE:
npx create-next-app --example with-unsplash with-unsplash-app

----------------------------------------

TITLE: Running Database Migrations
DESCRIPTION: Applies the latest database migrations to set up the initial schema and data

LANGUAGE: bash
CODE:
npm run migrate:latest
# or
yarn migrate:latest
# or
pnpm migrate:latest

----------------------------------------

TITLE: Creating Next.js App with Compiled CSS using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with Compiled CSS-in-JS integration. It utilizes the 'with-compiled-css' example template.

LANGUAGE: bash
CODE:
yarn create next-app --example with-compiled-css with-compiled-css-app

----------------------------------------

TITLE: Fixing Invalid Middleware Matcher Pattern in Next.js (TypeScript)
DESCRIPTION: Shows the correct pattern format for middleware matchers using path-to-regexp syntax when implementing negative lookahead patterns in Next.js middleware configuration.

LANGUAGE: typescript
CODE:
const config = {
  matcher: '/feedback/(?!general)',
}

LANGUAGE: typescript
CODE:
const config = {
  matcher: '/feedback/((?!general).*)',
}

----------------------------------------

TITLE: Example of Node.js Code Leakage in Next.js
DESCRIPTION: These snippets demonstrate how re-exporting all exports can lead to Node.js code leakage in the browser build, causing errors. The first file uses 'fs' module, which is not available in the browser.

LANGUAGE: jsx
CODE:
import fs from 'fs'

export default function A() {
  return <main />
}

export function getStaticProps() {
  fs
  return { props: {} }
}

LANGUAGE: jsx
CODE:
export * from './example-a'

----------------------------------------

TITLE: Implementing getStaticProps with notFound in Next.js
DESCRIPTION: This snippet shows how to use the `notFound` option in `getStaticProps` to return a 404 status when data is not available. It's useful for handling user-generated content that might be removed.

LANGUAGE: js
CODE:
export async function getStaticProps(context) {
  const res = await fetch(`https://.../data`)
  const data = await res.json()

  if (!data) {
    return {
      notFound: true,
    }
  }

  return {
    props: { data }, // will be passed to the page component as props
  }
}

----------------------------------------

TITLE: Improving Console Output in JavaScript
DESCRIPTION: This function enhances console methods to include additional formatting and stack traces in the output.

LANGUAGE: JavaScript
CODE:
const improveConsole = (name, stream, addStack) => {
    const original = console[name];
    const stdio = process[stream];
    console[name] = (...args) => {
        stdio.write(`TURBOPACK_OUTPUT_B\n`);
        original(...args);
        if (addStack) {
            const stack = new Error().stack?.replace(/^.+\n.+\n/, "") + "\n";
            stdio.write("TURBOPACK_OUTPUT_S\n");
            stdio.write(stack);
        }
        stdio.write("TURBOPACK_OUTPUT_E\n");
    };
};

----------------------------------------

TITLE: Correct Usage of Async Context in Next.js
DESCRIPTION: Example showing proper usage of cookies() function by maintaining async context - accessing cookies before the setTimeout operation.

LANGUAGE: jsx
CODE:
import { cookies } from 'next/headers'

async function getCookieData() {
  const cookieData = cookies().getAll()
  return new Promise((resolve) =>
    setTimeout(() => {
      resolve(cookieData)
    }, 1000)
  )
}

export default async function Page() {
  const cookieData = await getCookieData()
  return <div>Hello World</div>
}

----------------------------------------

TITLE: Creating Next.js Rewrites App with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with the rewrites example template.

LANGUAGE: bash
CODE:
yarn create next-app --example rewrites rewrites-app

----------------------------------------

TITLE: Creating Next.js App with MQTT.js Example using pnpm
DESCRIPTION: This command uses pnpm to initialize a new Next.js application with the MQTT.js example. It creates a new project in a directory called 'with-mqtt-js-app'.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-mqtt-js with-mqtt-js-app

----------------------------------------

TITLE: Creating Next.js App with React Bootstrap using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with react-bootstrap integration. It utilizes the 'with-react-bootstrap' example as a template.

LANGUAGE: bash
CODE:
yarn create next-app --example with-react-bootstrap with-react-bootstrap-app

----------------------------------------

TITLE: Disabling AVIF Format in Next.js Configuration
DESCRIPTION: This code snippet shows how to disable AVIF format in the Next.js configuration file if upgrading Sharp is not possible.

LANGUAGE: javascript
CODE:
// next.config.js
module.exports = {
  images: {
    formats: ['image/webp']
  }
}

----------------------------------------

TITLE: Installing Next.js Forms Example with PNPM
DESCRIPTION: Creates a new Next.js application with forms example using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example next-forms next-forms-app

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using different package managers.

LANGUAGE: bash
CODE:
npm run dev

LANGUAGE: bash
CODE:
yarn dev

LANGUAGE: bash
CODE:
pnpm dev

----------------------------------------

TITLE: Creating Next.js App with WindiCSS using npm
DESCRIPTION: This command uses npx to create a new Next.js application with WindiCSS integration. It utilizes the 'create-next-app' package and specifies the 'with-windicss' example template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-windicss with-windicss-app

----------------------------------------

TITLE: Deprecated Multi-Module Dynamic Import in Next.js
DESCRIPTION: This code snippet demonstrates the deprecated method of loading multiple modules at once using next/dynamic in Next.js. It uses the modules and render properties to dynamically import and render multiple components.

LANGUAGE: jsx
CODE:
import dynamic from 'next/dynamic'

const HelloBundle = dynamic({
  modules: () => {
    const components = {
      Hello1: () => import('../components/hello1').then((m) => m.default),
      Hello2: () => import('../components/hello2').then((m) => m.default),
    }

    return components
  },
  render: (props, { Hello1, Hello2 }) => (
    <div>
      <h1>{props.title}</h1>
      <Hello1 />
      <Hello2 />
    </div>
  ),
})

function DynamicBundle() {
  return <HelloBundle title="Dynamic Bundle" />
}

export default DynamicBundle

----------------------------------------

TITLE: Finding Available Pages in Next.js Example
DESCRIPTION: This shell script locates and lists all available pages for a given Next.js example project. It searches the pages directory, filters out unnecessary files, and formats the output as localhost URLs.

LANGUAGE: sh
CODE:
EXAMPLE=./test/integration/basic
(
  cd $EXAMPLE/pages; \
  find . -type f \
  | grep -v '\.next' \
  | sed 's#^\.$##' \
  | sed 's#index\.js##' \
  | sed 's#\.js$##' \
  | xargs -I{} echo localhost:3000{} \
)

----------------------------------------

TITLE: Creating Next.js App with Polyfills using npm
DESCRIPTION: This command uses npx to run create-next-app and bootstrap a new Next.js project with polyfills support.

LANGUAGE: bash
CODE:
npx create-next-app --example with-polyfills with-polyfills-app

----------------------------------------

TITLE: Creating a Next.js App with Default Template in Bash
DESCRIPTION: Shows how to create a new Next.js application using the default template. This command will prompt the user for various configuration options.

LANGUAGE: bash
CODE:
npx create-next-app@latest

----------------------------------------

TITLE: Creating Next.js App with Emotion using npx
DESCRIPTION: This command uses npx to create a new Next.js application with Emotion integration using the 'with-emotion-swc' example template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-emotion-swc with-emotion-swc-app

----------------------------------------

TITLE: Installing Next.js with Recoil using NPX
DESCRIPTION: Command to create a new Next.js application with Recoil integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-recoil with-recoil-app

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Installs required project dependencies using npm, yarn, or pnpm package managers

LANGUAGE: bash
CODE:
npm install
# or
yarn
# or
pnpm install

----------------------------------------

TITLE: Creating Next.js App with YouTube Embed Using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with YouTube embed functionality. It employs the 'with-youtube-embed' example template to set up the project structure and dependencies.

LANGUAGE: bash
CODE:
yarn create next-app --example with-youtube-embed with-youtube-embed-app

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Commands for installing dependencies and starting the Next.js development server using npm, yarn, or pnpm.

LANGUAGE: bash
CODE:
npm install
npm run dev
# or
yarn install
yarn dev
# or
pnpm install
pnpm dev

----------------------------------------

TITLE: Creating an Image Sitemap in Next.js
DESCRIPTION: Example of creating an image sitemap using the 'images' property in a sitemap.ts file. This helps search engines index images on the website.

LANGUAGE: typescript
CODE:
import type { MetadataRoute } from 'next'

export default function sitemap(): MetadataRoute.Sitemap {
  return [
    {
      url: 'https://example.com',
      lastModified: '2021-01-01',
      changeFrequency: 'weekly',
      priority: 0.5,
      images: ['https://example.com/image.jpg'],
    },
  ]
}

----------------------------------------

TITLE: Setting up Production Without Multistage Builds
DESCRIPTION: Commands to create a network, build and start the production environment without using multistage builds.

LANGUAGE: bash
CODE:
docker network create my_network

# Build prod without multistage
docker compose -f compose.prod-without-multistage.yaml build

# Up prod without multistage in detached mode
docker compose -f compose.prod-without-multistage.yaml up -d

----------------------------------------

TITLE: Invalid Dynamic Runtime Config in Next.js
DESCRIPTION: Example showing incorrect usage of dynamic expressions in runtime configuration.

LANGUAGE: javascript
CODE:
// `config.runtime` contains a dynamic expression
export const config = {
  runtime: `node${'js'}`,
}

----------------------------------------

TITLE: Accessing Environment Variables in Next.js Components
DESCRIPTION: Shows how to access environment variables in a React component using process.env. The environment variable values are replaced at build time with their actual values.

LANGUAGE: jsx
CODE:
function Page() {
  return <h1>The value of customKey is: {process.env.customKey}</h1>
}

export default Page

----------------------------------------

TITLE: Defining and Exporting Function in JavaScript
DESCRIPTION: Defines and exports a function named 'func' that pushes the string 'd' to the 'order' array when called.

LANGUAGE: javascript
CODE:
export function func() {
    order.push("d");
}

----------------------------------------

TITLE: Implementing Ably Presence Features
DESCRIPTION: Example of using usePresence hook to track and display user presence information in a channel

LANGUAGE: javascript
CODE:
import { useState } from "react";
import { usePresence } from "@ably-labs/react-hooks";

export default function Home() {
  const [presenceData, updateStatus] = usePresence("your-channel-name");

  const presentClients = presenceData.map((msg, index) => (
    <li key={index}>
      {msg.clientId}: {msg.data}
    </li>
  ));

  return <ul>{presentClients}</ul>;
}

----------------------------------------

TITLE: LazyRoot Implementation with DOM Element in Next.js
DESCRIPTION: Example showing how to implement lazyRoot with a DOM element reference

LANGUAGE: jsx
CODE:
import Image from 'next/legacy/image'
import React from 'react'

const Example = () => {
  const lazyRoot = React.useRef(null)

  return (
    <div ref={lazyRoot} style={{ overflowX: 'scroll', width: '500px' }}>
      <Image lazyRoot={lazyRoot} src="/one.jpg" width="500" height="500" />
      <Image lazyRoot={lazyRoot} src="/two.jpg" width="500" height="500" />
    </div>
  )
}

----------------------------------------

TITLE: Installing with Yarn
DESCRIPTION: Command to create a new Next.js application with rate limiting using yarn create

LANGUAGE: bash
CODE:
yarn create next-app --example api-routes-rate-limit api-routes-rate-limit-app

----------------------------------------

TITLE: Modifying Order Array in JavaScript
DESCRIPTION: Pushes the string 'a' to the 'order' array. This operation has side effects and modifies the exported 'order' array.

LANGUAGE: javascript
CODE:
order.push("a");

----------------------------------------

TITLE: Handling Duplicate Tags with Key Property in Next.js Head
DESCRIPTION: Shows how to prevent duplicate meta tags in the head section using the key property. When multiple tags with the same key are present, only the last instance will be rendered.

LANGUAGE: jsx
CODE:
import Head from 'next/head'

function IndexPage() {
  return (
    <div>
      <Head>
        <title>My page title</title>
        <meta property="og:title" content="My page title" key="title" />
      </Head>
      <Head>
        <meta property="og:title" content="My new title" key="title" />
      </Head>
      <p>Hello world!</p>
    </div>
  )
}

export default IndexPage

----------------------------------------

TITLE: Configuring Vitest with TypeScript
DESCRIPTION: TypeScript configuration file for Vitest including React plugin and TypeScript path mappings.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vitest/config'
import react from '@vitejs/plugin-react'
import tsconfigPaths from 'vite-tsconfig-paths'

export default defineConfig({
  plugins: [tsconfigPaths(), react()],
  test: {
    environment: 'jsdom',
  },
})

----------------------------------------

TITLE: Blog Post Front Matter in YAML
DESCRIPTION: YAML front matter block defining metadata for a blog post including title, excerpt, images, date and author information.

LANGUAGE: yaml
CODE:
---
title: "Dynamic Routing and Static Generation"
excerpt: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Praesent elementum facilisis leo vel fringilla est ullamcorper eget. At imperdiet dui accumsan sit amet nulla facilities morbi tempus."
coverImage: "/assets/blog/dynamic-routing/cover.jpg"
date: "2020-03-16T05:35:07.322Z"
author:
  name: JJ Kasper
  picture: "/assets/blog/authors/jj.jpeg"
ogImage:
  url: "/assets/blog/dynamic-routing/cover.jpg"
---

----------------------------------------

TITLE: Creating Next.js Prismic App with Yarn
DESCRIPTION: Command to bootstrap a new Next.js application with Prismic CMS integration using yarn create.

LANGUAGE: bash
CODE:
yarn create next-app --example cms-prismic cms-prismic-app

----------------------------------------

TITLE: Creating a Turso Database
DESCRIPTION: Command to create a new Turso database using the Turso CLI.

LANGUAGE: bash
CODE:
turso db create [database-name]

----------------------------------------

TITLE: Creating Next.js Project with Fauna Integration using npm
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with Fauna integration. It creates a new directory named 'with-fauna-app' with the necessary project files.

LANGUAGE: bash
CODE:
npx create-next-app --example with-fauna with-fauna-app

----------------------------------------

TITLE: Updating Sharp in Custom Path for Next.js
DESCRIPTION: This command updates Sharp to the latest version when using a custom NEXT_SHARP_PATH environment variable in your Next.js setup.

LANGUAGE: bash
CODE:
cd "$NEXT_SHARP_PATH/../" && npm i sharp@latest

----------------------------------------

TITLE: Configuring PostCSS for IE11 Grid Support in JSON
DESCRIPTION: PostCSS configuration in JSON format to enable CSS Grid Layout support for IE11 across the entire project.

LANGUAGE: json
CODE:
{
  "plugins": [
    "postcss-flexbugs-fixes",
    [
      "postcss-preset-env",
      {
        "autoprefixer": {
          "flexbox": "no-2009",
          "grid": "autoplace"
        },
        "stage": 3,
        "features": {
          "custom-properties": false
        }
      }
    ]
  ]
}

----------------------------------------

TITLE: Creating Next.js App with Catch All Routes using Yarn
DESCRIPTION: Command to create a new Next.js application with catch-all routes example using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example catch-all-routes catch-all-routes-app

----------------------------------------

TITLE: Creating PlanetScale Database
DESCRIPTION: Command to create a new database using the PlanetScale CLI.

LANGUAGE: sh
CODE:
pscale database create <DATABASE_NAME>

----------------------------------------

TITLE: Creating Next.js Project with Absolute Imports using PNPM
DESCRIPTION: This bash command creates a new Next.js project with absolute imports configuration using PNPM and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-absolute-imports with-absolute-imports-app

----------------------------------------

TITLE: Creating Next.js App with MongoDB Template using PNPM
DESCRIPTION: Command to bootstrap a new Next.js application with MongoDB and Mongoose setup using PNPM package manager

LANGUAGE: bash
CODE:
pnpm create next-app --example with-mongodb-mongoose with-mongodb-mongoose-app

----------------------------------------

TITLE: Creating Next.js App with OpenTelemetry using PNPM
DESCRIPTION: This command uses PNPM to create a new Next.js application with OpenTelemetry integration. It utilizes the 'create next-app' command and specifies the 'with-opentelemetry' example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-opentelemetry with-opentelemetry-app

----------------------------------------

TITLE: Installing Dependencies and Running Next.js Development Server
DESCRIPTION: These commands install the required packages for the project and start the Next.js development server. After running these commands, the application will be accessible at http://localhost:3000.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Installing Radix UI Next.js Example with PNPM
DESCRIPTION: Creates a new Next.js application with Radix UI components using PNPM package manager. The command initializes a project named 'radix-ui-app' with pre-configured Radix UI examples.

LANGUAGE: bash
CODE:
pnpm create next-app --example radix-ui radix-ui-app

----------------------------------------

TITLE: Configuring Jest for Next.js (JavaScript)
DESCRIPTION: JavaScript configuration file for Jest in a Next.js project, using next/jest for automatic setup.

LANGUAGE: javascript
CODE:
const nextJest = require('next/jest')

/** @type {import('jest').Config} */
const createJestConfig = nextJest({
  dir: './',
})

const config = {
  coverageProvider: 'v8',
  testEnvironment: 'jsdom',
}

module.exports = createJestConfig(config)

----------------------------------------

TITLE: Creating Next.js App with Styletron using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js project with Styletron integration.

LANGUAGE: bash
CODE:
yarn create next-app --example with-styletron with-styletron-app

----------------------------------------

TITLE: Installing Next.js Nested Components Example with Yarn
DESCRIPTION: Creates a new Next.js application with nested components structure using Yarn create next-app command.

LANGUAGE: bash
CODE:
yarn create next-app --example nested-components nested-components-app

----------------------------------------

TITLE: Running Contentful Setup Script
DESCRIPTION: Command to initialize the Contentful space with required content models using environment variables.

LANGUAGE: bash
CODE:
npx cross-env CONTENTFUL_SPACE_ID=YOUR_SPACE_ID CONTENTFUL_MANAGEMENT_TOKEN=XXX npm run setup

----------------------------------------

TITLE: Creating Next.js Project with Turbopack using PNPM
DESCRIPTION: This command uses PNPM to create a new Next.js project with Turbopack integration. It utilizes the 'with-turbopack' example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-turbopack with-turbopack-app

----------------------------------------

TITLE: Next.js Configuration Options
DESCRIPTION: Example of incompatible Next.js configuration options that cannot be used together - custom routes with static export.

LANGUAGE: javascript
CODE:
// next.config.js
{
  output: 'export',  // Cannot be used with the following
  rewrites: [],
  redirects: [],
  headers: []
}

----------------------------------------

TITLE: Setting up Development Environment with Docker Compose
DESCRIPTION: Commands to create a network, build and start the development environment using Docker Compose.

LANGUAGE: bash
CODE:
docker network create my_network

# Build dev
docker compose -f compose.dev.yaml build

# Up dev
docker compose -f compose.dev.yaml up

----------------------------------------

TITLE: Creating Custom Spans in Next.js
DESCRIPTION: Example of implementing custom OpenTelemetry spans for tracking specific operations in a Next.js application

LANGUAGE: typescript
CODE:
import { trace } from '@opentelemetry/api'

export async function fetchGithubStars() {
  return await trace
    .getTracer('nextjs-example')
    .startActiveSpan('fetchGithubStars', async (span) => {
      try {
        return await getValue()
      } finally {
        span.end()
      }
    })
}

----------------------------------------

TITLE: Exporting Variables from Different Parts in Next.js
DESCRIPTION: This snippet demonstrates how to export variables from different parts of a module using TurboPack assertions. It shows advanced module composition techniques.

LANGUAGE: javascript
CODE:
export { DOG } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export DOG"
};
export { cat } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export cat"
};

----------------------------------------

TITLE: Correct Usage of Next.js Link Component with Single Child
DESCRIPTION: This code snippet shows the correct way to use the Next.js Link component by passing only one child, which resolves the error.

LANGUAGE: jsx
CODE:
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/about">
      <a>To About</a>
    </Link>
  )
}

----------------------------------------

TITLE: Creating Next.js Project with Cypress using NPX
DESCRIPTION: Command to create a new Next.js project with Cypress testing configuration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-cypress with-cypress-app

----------------------------------------

TITLE: Creating Next.js App with Ant Design using NPX
DESCRIPTION: Command to create a new Next.js application with Ant Design integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-ant-design with-ant-design-app

----------------------------------------

TITLE: Creating Next.js App with Reactstrap using npx
DESCRIPTION: This command uses npx to create a new Next.js application with Reactstrap integration. It specifies the example template and names the project 'with-reactstrap-app'.

LANGUAGE: bash
CODE:
npx create-next-app --example with-reactstrap with-reactstrap-app

----------------------------------------

TITLE: Configuring Image Qualities in Next.js Configuration
DESCRIPTION: This code snippet demonstrates how to properly configure the images.qualities property in the next.config.js file. It sets up an array of allowed quality values for image optimization in a Next.js project.

LANGUAGE: javascript
CODE:
module.exports = {
  images: {
    qualities: [25, 50, 75],
  },
}

----------------------------------------

TITLE: Creating Next.js App with CXS using NPX
DESCRIPTION: Command to create a new Next.js application with CXS styling using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-cxs with-cxs-app

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Launches the Next.js development server with Knex integration

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev

----------------------------------------

TITLE: Installing Next.js Video Uploader with PNPM
DESCRIPTION: Creates a new Next.js application with api.video integration using pnpm create command

LANGUAGE: bash
CODE:
pnpm create next-app --example with-apivideo with-apivideo-app

----------------------------------------

TITLE: Ingesting Blog Content to Enterspeed
DESCRIPTION: cURL commands for ingesting blog content types into Enterspeed using the Ingest API.

LANGUAGE: bash
CODE:
curl --location --request POST 'https://api.enterspeed.com/ingest/v2/1' \
--header 'X-Api-Key: [YOUR DATA SOUCE API KEY]' \
--header 'Content-Type: application/json' \
--data-raw '{
  "type": "blog",
  "url": "/blog"
}'

----------------------------------------

TITLE: Declaring Variables with External Function Calls in JavaScript
DESCRIPTION: Declares two constants, 'x1' and 'x2', assigning them the result of calling an external function. This may have side effects depending on the implementation of 'externalFunction'.

LANGUAGE: javascript
CODE:
const x1 = externalFunction();

LANGUAGE: javascript
CODE:
const x2 = externalFunction();

----------------------------------------

TITLE: Creating Next.js App with i18n Routing using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with internationalized routing using the i18n-routing-pages example.

LANGUAGE: bash
CODE:
yarn create next-app --example i18n-routing-pages i18n-routing-pages-app

----------------------------------------

TITLE: Executing Exported Functions in JavaScript Module
DESCRIPTION: This snippet demonstrates the execution of two exported functions (c1_3 and c2_2) within the module. It represents the module evaluation phase.

LANGUAGE: javascript
CODE:
c1_3();
c2_2();

----------------------------------------

TITLE: Creating Image Secure Compute App with NPX
DESCRIPTION: Command to create a new Next.js application with image secure compute template using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example image-secure-compute image-secure-compute-app

----------------------------------------

TITLE: Creating Next.js App with Panda CSS using Bun
DESCRIPTION: Command to create a new Next.js application with Panda CSS template using Bun runtime and package manager.

LANGUAGE: bash
CODE:
bunx create-next-app --example panda-css panda-css-app

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: This command copies the example environment file to create a local configuration file.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Installing Next.js Stripe Project with NPM
DESCRIPTION: Command to create a new Next.js project with Stripe TypeScript template using NPM package manager.

LANGUAGE: bash
CODE:
npx create-next-app --example with-stripe-typescript with-stripe-typescript-app

----------------------------------------

TITLE: Running Stencil Development Commands
DESCRIPTION: Basic npm commands for installing dependencies, starting the development server, building for production, and running tests.

LANGUAGE: bash
CODE:
npm install
npm start

----------------------------------------

TITLE: Robots Type Definition in TypeScript
DESCRIPTION: TypeScript type definition for the Robots object, showing all available configuration options including rules, sitemap, and host properties.

LANGUAGE: typescript
CODE:
type Robots = {
  rules:
    | {
        userAgent?: string | string[]
        allow?: string | string[]
        disallow?: string | string[]
        crawlDelay?: number
      }
    | Array<{
        userAgent: string | string[]
        allow?: string | string[]
        disallow?: string | string[]
        crawlDelay?: number
      }>
  sitemap?: string | string[]
  host?: string
}

----------------------------------------

TITLE: Installing Next.js with MongoDB Template using PNPM
DESCRIPTION: Creates a new Next.js application with MongoDB integration using create-next-app and pnpm command.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-mongodb with-mongodb-app

----------------------------------------

TITLE: Creating Next.js Static Export App with pnpm
DESCRIPTION: Command to create a new Next.js application with static export functionality using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-static-export with-static-export-app

----------------------------------------

TITLE: Creating Unauthorized Page in Next.js
DESCRIPTION: This snippet demonstrates how to create an unauthorized page in Next.js using both TypeScript and JavaScript. It renders a 401 error message and includes a login component.

LANGUAGE: tsx
CODE:
import Login from '@/app/components/Login'

export default function Unauthorized() {
  return (
    <main>
      <h1>401 - Unauthorized</h1>
      <p>Please log in to access this page.</p>
      <Login />
    </main>
  )
}

LANGUAGE: jsx
CODE:
import Login from '@/app/components/Login'

export default function Unauthorized() {
  return (
    <main>
      <h1>401 - Unauthorized</h1>
      <p>Please log in to access this page.</p>
      <Login />
    </main>
  )
}

----------------------------------------

TITLE: Development Module Evaluation
DESCRIPTION: Development-specific module evaluation code with Turbopack assertions

LANGUAGE: javascript
CODE:
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
"module evaluation";

----------------------------------------

TITLE: Docker Production Environment Commands
DESCRIPTION: Makefile commands for building and starting the production environment on port 3003.

LANGUAGE: bash
CODE:
make build-production
make start-production

----------------------------------------

TITLE: Installing Next.js with RBX and Bulma Pro using Yarn
DESCRIPTION: Command to create a new Next.js application with RBX and Bulma Pro template using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-rbx-bulma-pro with-rbx-bulma-pro-app

----------------------------------------

TITLE: Available NPM Scripts for Electron with TypeScript and Next.js
DESCRIPTION: List of available npm scripts for building, developing, and managing the Electron with TypeScript and Next.js project. These commands handle tasks such as building the renderer and electron layers, starting the development version, creating production builds, and type checking.

LANGUAGE: bash
CODE:
"build-renderer": build and transpile Next.js layer
"build-electron": transpile electron layer
"build": build both layers
"dev": start dev version
"dist": create production electron build
"type-check": check TypeScript in project

----------------------------------------

TITLE: Creating Next.js WebAssembly Project with npm
DESCRIPTION: Command to create a new Next.js project with WebAssembly support using npm and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-webassembly with-webassembly-app

----------------------------------------

TITLE: Using next/script Component with dangerouslySetInnerHTML in Next.js (JSX)
DESCRIPTION: This snippet illustrates how to use the next/script component with an inline script using the dangerouslySetInnerHTML attribute. It performs the same action as the previous example.

LANGUAGE: jsx
CODE:
<Script
  id="show-banner"
  dangerouslySetInnerHTML={{
    __html: `document.getElementById('banner').classList.remove('hidden')`,
  }}
/>

----------------------------------------

TITLE: Rendering Chart Component with Year and Color Props
DESCRIPTION: JSX code snippet showing Chart component usage with year data binding and color property configuration.

LANGUAGE: jsx
CODE:
<Chart year={year} color="#fcb32c" />

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Example environment variable configuration for connecting Next.js to Umbraco CMS, including server URL, API key, and preview secret

LANGUAGE: bash
CODE:
NODE_TLS_REJECT_UNAUTHORIZED=0
UMBRACO_SERVER_URL = 'https://localhost:12345'
UMBRACO_DELIVERY_API_KEY = 'my-secret-api-key'
UMBRACO_PREVIEW_SECRET = 'my-preview-secret'

----------------------------------------

TITLE: Installing Next.js ButterCMS Starter via Git and Package Managers
DESCRIPTION: Commands for cloning the ButterCMS starter repository and installing dependencies using npm or yarn.

LANGUAGE: bash
CODE:
git clone https://github.com/ButterCMS/nextjs-starter-buttercms.git
cd nextjs-starter-buttercms
npm install # or yarn install

----------------------------------------

TITLE: Installing MDX Remote Example with pnpm
DESCRIPTION: Command to create a new Next.js application using the mdx-remote example template with pnpm.

LANGUAGE: bash
CODE:
pnpm create next-app --example mdx-remote mdx-remote-app

----------------------------------------

TITLE: Creating Next.js Project with Agility CMS Template - NPM
DESCRIPTION: Command to bootstrap a new Next.js project using the Agility CMS template with NPM package manager.

LANGUAGE: bash
CODE:
npx create-next-app --example cms-agilitycms cms-agilitycms-app

----------------------------------------

TITLE: Configuring GitHub Actions Cache for Next.js Builds
DESCRIPTION: This YAML configuration snippet shows how to set up caching for Next.js builds using GitHub Actions. It uses the actions/cache action to cache npm and Next.js build files.

LANGUAGE: yaml
CODE:
uses: actions/cache@v4
with:
  # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
  path: |
    ~/.npm
    ${{ github.workspace }}/.next/cache
  # Generate a new cache whenever packages or source files change.
  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
  # If source files changed but packages didn't, rebuild from a prior cache.
  restore-keys: |
    ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

----------------------------------------

TITLE: Running Next.js Development Server with Yarn
DESCRIPTION: These commands install dependencies and start the Next.js development server using Yarn.

LANGUAGE: bash
CODE:
yarn install
yarn dev

----------------------------------------

TITLE: Installing Environment Variables Example with PNPM
DESCRIPTION: Creates a new Next.js application with environment variables configuration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example environment-variables environment-variables-app

----------------------------------------

TITLE: Installing Next.js Project with PNPM
DESCRIPTION: Creates a new Next.js application with Nhost authentication and GraphQL setup using pnpm create command.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-nhost-auth-realtime-graphql nhost-app

----------------------------------------

TITLE: Creating Next.js App with Headers Example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with the headers example template. It initializes a project named 'headers-app' configured to showcase custom HTTP header implementation.

LANGUAGE: bash
CODE:
pnpm create next-app --example headers headers-app

----------------------------------------

TITLE: Installing Next.js Video Uploader with Yarn
DESCRIPTION: Creates a new Next.js application with api.video integration using yarn create command

LANGUAGE: bash
CODE:
yarn create next-app --example with-apivideo with-apivideo-app

----------------------------------------

TITLE: Building and Starting the Next.js App for Production
DESCRIPTION: These commands build the Next.js application for production and start the server in production mode, enabling localization with translated message files.

LANGUAGE: bash
CODE:
npm run build
npm start

----------------------------------------

TITLE: Default Export Configuration
DESCRIPTION: Sets up the default export of the fetch function with TurboPack integration.

LANGUAGE: javascript
CODE:
export default fetch;

----------------------------------------

TITLE: Installing and Running Multi-Zone Next.js Application with pnpm
DESCRIPTION: Commands to create a new Next.js app using the with-zones example, then install dependencies and run the 'home' and 'blog' apps separately using pnpm.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-zones with-zones-app

LANGUAGE: bash
CODE:
cd home
pnpm install && pnpm dev

LANGUAGE: bash
CODE:
cd blog
pnpm install && pnpm dev

----------------------------------------

TITLE: Defining a Next.js Page Component in JavaScript/JSX
DESCRIPTION: This code defines a default exported function component named 'Page' that renders a paragraph element with the text 'hello world'. It represents a basic Next.js page component.

LANGUAGE: javascript
CODE:
export default function Page() { 
    return <p>hello world</p>
}

----------------------------------------

TITLE: Importing EdgeDB Query Builder
DESCRIPTION: Example of importing the EdgeQL query builder in TypeScript after generation

LANGUAGE: typescript
CODE:
import e from "./dbschema/edgeql-js";

----------------------------------------

TITLE: Creating Next.js App with Apollo Server and Client using pnpm
DESCRIPTION: Command to bootstrap a new Next.js application with Apollo server and client integration using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example api-routes-apollo-server-and-client api-routes-apollo-server-and-client-app

----------------------------------------

TITLE: Running Development Server (yarn)
DESCRIPTION: Command to start the Next.js development server using Yarn.

LANGUAGE: bash
CODE:
yarn dev

----------------------------------------

TITLE: Creating Next.js App with Segment Analytics using Yarn
DESCRIPTION: Command to create a new Next.js application with Segment Analytics integration using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-segment-analytics with-segment-analytics-app

----------------------------------------

TITLE: Creating Next.js Static Export App with npm
DESCRIPTION: Command to create a new Next.js application with static export functionality using npm and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-static-export with-static-export-app

----------------------------------------

TITLE: Creating Next.js Project with Docker Support
DESCRIPTION: Commands to bootstrap a new Next.js project with Docker multi-environment configuration using different package managers.

LANGUAGE: bash
CODE:
npx create-next-app --example with-docker-multi-env nextjs-docker-multi-env

LANGUAGE: bash
CODE:
yarn create next-app --example with-docker-multi-env nextjs-docker-multi-env

LANGUAGE: bash
CODE:
pnpm create next-app --example with-docker-multi-env nextjs-docker-multi-env

----------------------------------------

TITLE: Installing Next.js with NextUI using Yarn
DESCRIPTION: Command to create a new Next.js application with NextUI integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-next-ui with-next-ui-app

----------------------------------------

TITLE: Creating Next.js App with MQTT.js Example using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with the MQTT.js example. It sets up a new project in a directory named 'with-mqtt-js-app'.

LANGUAGE: bash
CODE:
yarn create next-app --example with-mqtt-js with-mqtt-js-app

----------------------------------------

TITLE: Upgrading Next.js to Latest Stable Version using Package Managers
DESCRIPTION: These commands show how to upgrade Next.js to the latest stable version using npm, yarn, pnpm, and bun. Use these for updating to the most recent stable release of Next.js.

LANGUAGE: bash
CODE:
npm i next@latest

LANGUAGE: bash
CODE:
yarn add next@latest

LANGUAGE: bash
CODE:
pnpm add next@latest

LANGUAGE: bash
CODE:
bun add next@latest

----------------------------------------

TITLE: ESLint configuration for no-html-link-for-pages rule
DESCRIPTION: This snippet shows how to configure the ESLint rule '@next/next/no-html-link-for-pages' in a JSON configuration file. It allows specifying a custom pages directory path for the rule to check.

LANGUAGE: json
CODE:
{
  "rules": {
    "@next/next/no-html-link-for-pages": ["error", "packages/my-app/pages/"]
  }
}

----------------------------------------

TITLE: Creating Next.js Project with Fauna Integration using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js project with Fauna integration. It sets up a new directory named 'with-fauna-app' with the required project structure.

LANGUAGE: bash
CODE:
yarn create next-app --example with-fauna with-fauna-app

----------------------------------------

TITLE: Creating SuperTokens App with create-next-app using pnpm
DESCRIPTION: Command to bootstrap a SuperTokens example app using create-next-app with pnpm.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-supertokens with-supertokens-app

----------------------------------------

TITLE: Unmigratable Code Example
DESCRIPTION: Example of code that cannot be automatically migrated by the codemod and requires manual intervention.

LANGUAGE: typescript
CODE:
export function MyCookiesComponent() {
  const c =
    /* @next-codemod-error Manually await this call and refactor the function to be async */
    cookies()
  return c.get('name')
}

----------------------------------------

TITLE: Installing Next.js Stripe Project with PNPM
DESCRIPTION: Command to create a new Next.js project with Stripe TypeScript template using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-stripe-typescript with-stripe-typescript-app

----------------------------------------

TITLE: Deploying to Firebase Cloud
DESCRIPTION: Commands to deploy the Next.js application to Firebase cloud hosting

LANGUAGE: bash
CODE:
npm run deploy
# or
yarn deploy

----------------------------------------

TITLE: Installing Radix UI Next.js Example with NPX
DESCRIPTION: Creates a new Next.js application with Radix UI components using NPX package runner. The command initializes a project named 'radix-ui-app' with pre-configured Radix UI examples.

LANGUAGE: bash
CODE:
npx create-next-app --example radix-ui radix-ui-app

----------------------------------------

TITLE: Serving Bundle Analysis Results
DESCRIPTION: Commands to serve and inspect the generated bundle analysis report after the build is completed.

LANGUAGE: bash
CODE:
npm run serve

LANGUAGE: bash
CODE:
yarn serve

----------------------------------------

TITLE: Array Manipulation and Shared State Management
DESCRIPTION: Demonstrates module state management through array manipulation and object creation. Creates a shared object containing random value and side effects.

LANGUAGE: javascript
CODE:
const random = Math.random();
const shared = {
    random,
    effect: order.push("b")
};

----------------------------------------

TITLE: Installing Next.js Blog with Yarn
DESCRIPTION: Command to create a new Next.js blog project with Sanity CMS using yarn create.

LANGUAGE: bash
CODE:
yarn create next-app --example cms-sanity next-sanity-blog

----------------------------------------

TITLE: Variable Declaration - Constant a
DESCRIPTION: Declares a constant variable 'a' with string value 'a'

LANGUAGE: javascript
CODE:
const a = "a";

----------------------------------------

TITLE: Implementing Custom Fonts with Function Component in Next.js
DESCRIPTION: Shows how to add custom fonts globally using a functional custom Document component in Next.js. This modern approach achieves the same result as the class-based version with more concise syntax.

LANGUAGE: jsx
CODE:
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html>
      <Head>
        <link
          href="https://fonts.googleapis.com/css2?family=Inter&display=optional"
          rel="stylesheet"
        />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}

----------------------------------------

TITLE: Creating Next.js App with Head Elements Example using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the head-elements example. It sets up a project named 'head-elements-app' with the necessary configuration for injecting head elements.

LANGUAGE: bash
CODE:
yarn create next-app --example head-elements head-elements-app

----------------------------------------

TITLE: Environment Variables Setup
DESCRIPTION: Configuration of required Stripe API keys in the environment variables file.

LANGUAGE: bash
CODE:
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=<replace-with-your-publishable-key>
STRIPE_SECRET_KEY=<replace-with-your-secret-key>

----------------------------------------

TITLE: Creating Next.js App with ReactMD and TypeScript using Yarn
DESCRIPTION: Command to bootstrap a new Next.js project with ReactMD and TypeScript using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-react-md-typescript with-react-md-typescript-app

----------------------------------------

TITLE: Compiling Next.js Changes for Benchmarking
DESCRIPTION: Instructions for compiling local changes to Next.js before running the benchmark. This ensures that the latest modifications are included in the performance tests.

LANGUAGE: markdown
CODE:
Note: if you made some changes to Next.js, make sure you compiled them by running at the root of the monorepo either `pnpm dev` or `pnpm build --force`.

----------------------------------------

TITLE: Setting Favicon in HTML Head
DESCRIPTION: This snippet shows the HTML output for setting a favicon using the favicon.ico file convention in Next.js.

LANGUAGE: html
CODE:
<link rel="icon" href="/favicon.ico" sizes="any" />

----------------------------------------

TITLE: Creating Next.js App with Apollo using PNPM
DESCRIPTION: Command to create a new Next.js application with Apollo integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-apollo with-apollo-app

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Commands to install dependencies and start the Next.js development server using either NPM or Yarn.

LANGUAGE: bash
CODE:
npm install
npm run dev

# or

yarn install
yarn dev

----------------------------------------

TITLE: Generating Icon using ImageResponse in TypeScript
DESCRIPTION: This snippet demonstrates how to programmatically generate an icon using the ImageResponse API from next/og in TypeScript. It exports size and contentType metadata and creates a simple icon with the letter 'A'.

LANGUAGE: tsx
CODE:
import { ImageResponse } from 'next/og'

// Image metadata
export const size = {
  width: 32,
  height: 32,
}
export const contentType = 'image/png'

// Image generation
export default function Icon() {
  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 24,
          background: 'black',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          color: 'white',
        }}
      >
        A
      </div>
    ),
    // ImageResponse options
    {
      // For convenience, we can re-use the exported icons size metadata
      // config to also set the ImageResponse's width and height.
      ...size,
    }
  )
}

----------------------------------------

TITLE: Creating Client-Only Entrypoint
DESCRIPTION: Example of creating a client-only entrypoint in Next.js using dynamic import and 'use client' directive.

LANGUAGE: typescript
CODE:
'use client'

import dynamic from 'next/dynamic'

const App = dynamic(() => import('../../App'), { ssr: false })

export function ClientOnly() {
  return <App />
}

----------------------------------------

TITLE: Installing Dependencies and Running Next.js Dev Server
DESCRIPTION: Commands to install project dependencies and start the Next.js development server using npm, yarn, or pnpm.

LANGUAGE: bash
CODE:
npm install
npm run dev

# or

yarn install
yarn dev

# or

pnpm install
pnpm dev

----------------------------------------

TITLE: Creating Next.js Project with Kea using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js project with Kea integration. It utilizes the 'create next-app' command and specifies the 'with-kea' example template.

LANGUAGE: bash
CODE:
yarn create next-app --example with-kea with-kea-app

----------------------------------------

TITLE: Creating Next.js App with Page Transitions using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with the next-page-transitions example. It sets up the project structure and installs necessary dependencies.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-next-page-transitions with-next-page-transitions-app

----------------------------------------

TITLE: Creating Next.js App with Facebook Pixel Template using npx
DESCRIPTION: Command to create a new Next.js application with Facebook Pixel integration using npx and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-facebook-pixel with-facebook-pixel-app

----------------------------------------

TITLE: Disabling SSR on Specific Components in Next.js
DESCRIPTION: This code snippet shows how to disable server-side rendering (SSR) for specific components using Next.js's dynamic import feature. By setting the 'ssr' option to false, the component will only be rendered on the client-side, preventing hydration mismatches.

LANGUAGE: jsx
CODE:
import dynamic from 'next/dynamic'

const NoSSR = dynamic(() => import('../components/no-ssr'), { ssr: false })

export default function Page() {
  return (
    <div>
      <NoSSR />
    </div>
  )
}

----------------------------------------

TITLE: Configuring Turbopack in Next.js Configuration File
DESCRIPTION: Demonstrates how to configure Turbopack options in the next.config.js file, including setting up resolve aliases and custom file extensions.

LANGUAGE: javascript
CODE:
module.exports = {
  experimental: {
    turbo: {
      // Example: adding an alias and custom file extension
      resolveAlias: {
        underscore: 'lodash',
      },
      resolveExtensions: ['.mdx', '.tsx', '.ts', '.jsx', '.js', '.json'],
    },
  },
}

----------------------------------------

TITLE: Installing and Running Next.js Development Server
DESCRIPTION: Commands to install dependencies and start the Next.js development server. This allows developers to run the blog locally for testing and development.

LANGUAGE: bash
CODE:
npm install
npm run dev

# or

yarn install
yarn dev

----------------------------------------

TITLE: Compatible `href` usage in Next.js Link component
DESCRIPTION: This example shows the correct way to use an external URL with the Next.js Link component by using only the `href` prop without an `as` prop.

LANGUAGE: jsx
CODE:
import Link from 'next/link'

export default function Page(props) {
  return (
    <>
      <Link href="mailto:john@example.com">
        <a>Invalid link</a>
      </Link>
    </>
  )
}

----------------------------------------

TITLE: Next.js Docker Configuration
DESCRIPTION: Configuration for next.config.js to enable standalone build output for Docker deployment

LANGUAGE: javascript
CODE:
module.exports = {
  // ... rest of the configuration.
  output: "standalone",
};

----------------------------------------

TITLE: Creating Next.js Project with Userbase Template using Yarn
DESCRIPTION: Command to create a new Next.js project with Userbase integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-userbase next-userbase-app

----------------------------------------

TITLE: Static Data Fetching with getStaticProps in Next.js
DESCRIPTION: Shows how to implement static data fetching using getStaticProps for static site generation.

LANGUAGE: jsx
CODE:
export async function getStaticProps() {
  const res = await fetch('https://api.vercel.app/blog')
  const data = await res.json()

  return {
    props: { data },
    revalidate: 60,
  }
}

----------------------------------------

TITLE: Implementing useSearchParams with Suspense in Next.js (TypeScript)
DESCRIPTION: This snippet demonstrates how to correctly use useSearchParams within a Suspense boundary in a Next.js application using TypeScript. It creates a Search component that uses useSearchParams and wraps it in a Suspense boundary within a Searchbar component.

LANGUAGE: tsx
CODE:
'use client'

import { useSearchParams } from 'next/navigation'
import { Suspense } from 'react'

function Search() {
  const searchParams = useSearchParams()

  return <input placeholder="Search..." />
}

export function Searchbar() {
  return (
    // You could have a loading skeleton as the `fallback` too
    <Suspense>
      <Search />
    </Suspense>
  )
}

----------------------------------------

TITLE: Creating Next.js App with Fela using NPX
DESCRIPTION: Command to create a new Next.js application with Fela integration using NPX.

LANGUAGE: bash
CODE:
npx create-next-app --example with-fela with-fela-app

----------------------------------------

TITLE: Installing Next.js Translation Project with PNPM
DESCRIPTION: Command to create a new Next.js project with next-translate integration using pnpm create

LANGUAGE: bash
CODE:
pnpm create next-app --example with-next-translate with-next-translate-app

----------------------------------------

TITLE: Installing Dependencies and Running Next.js Benchmark
DESCRIPTION: Commands for installing project dependencies and executing the benchmarking script. This step prepares the environment and initiates the performance testing process.

LANGUAGE: markdown
CODE:
Run `pnpm install`, `pnpm bench` and profit.

----------------------------------------

TITLE: Installing Next.js with Google Analytics Template using Yarn
DESCRIPTION: Command to create a new Next.js application with Google Analytics integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-google-analytics with-google-analytics-app

----------------------------------------

TITLE: Creating Next.js App with Inngest Example using NPM
DESCRIPTION: Command to create a new Next.js application with the Inngest example using NPM's create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example inngest inngest-app

----------------------------------------

TITLE: Creating Next.js Project with Ghost CMS Template
DESCRIPTION: Commands to bootstrap a new Next.js project using the Ghost CMS example template. This sets up the initial project structure and dependencies.

LANGUAGE: bash
CODE:
npx create-next-app --example cms-ghost cms-ghost-app

LANGUAGE: bash
CODE:
yarn create next-app --example cms-ghost cms-ghost-app

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-ghost cms-ghost-app

----------------------------------------

TITLE: Installing Next.js Version 9 with Package Managers
DESCRIPTION: Commands to upgrade Next.js to version 9 using different package managers (npm, yarn, pnpm, bun)

LANGUAGE: bash
CODE:
npm i next@9

LANGUAGE: bash
CODE:
yarn add next@9

LANGUAGE: bash
CODE:
pnpm up next@9

LANGUAGE: bash
CODE:
bun add next@9

----------------------------------------

TITLE: Updating Snapshot Test Outputs
DESCRIPTION: Command to automatically update all snapshot test outputs using the UPDATE environment variable flag with nextest.

LANGUAGE: bash
CODE:
UPDATE=1 cargo nextest run -E 'test(snapshot)'

----------------------------------------

TITLE: Installing Apollo Server and Client Auth Example with pnpm
DESCRIPTION: Command to create a new Next.js application using the Apollo Server and Client Auth example template with pnpm.

LANGUAGE: bash
CODE:
pnpm create next-app --example api-routes-apollo-server-and-client-auth api-routes-apollo-server-and-client-auth-app

----------------------------------------

TITLE: Implementing Conflicting Catch-All Route in Next.js
DESCRIPTION: This snippet demonstrates a catch-all route with getStaticPaths that conflicts with the previously defined blog route. The '/blog/conflicting' path should be removed to resolve the conflict.

LANGUAGE: jsx
CODE:
export const getStaticProps = () => ({ props: {} })

export const getStaticPaths = () => ({
  paths: [
    // this conflicts with the /blog/conflicting path above, remove to resolve error
    '/blog/conflicting',
    '/another',
  ],
  fallback: false,
})

export default function CatchAll() {
  return 'Catch-all page'
}

----------------------------------------

TITLE: Rebuilding WASM Plugin for Next.js Error Code Transformation
DESCRIPTION: Bash script to rebuild the WASM file for the Next.js error code SWC plugin. It sets the Next.js root directory, navigates to the plugin directory, builds the plugin targeting wasm32-wasip1, and moves the resulting WASM file to the appropriate Next.js package directory.

LANGUAGE: bash
CODE:
#!/usr/bin/env bash
set -e
NEXT_JS_ROOT="/Users/judegao/repos/next.js"
cd "$NEXT_JS_ROOT/crates/next-error-code-swc-plugin"
rustup target add wasm32-wasip1
CARGO_PROFILE_RELEASE_STRIP=true CARGO_PROFILE_RELEASE_LTO=true cargo build --target wasm32-wasip1 --release
mv "$NEXT_JS_ROOT/crates/next-error-code-swc-plugin/target/wasm32-wasip1/release/next_error_code_swc_plugin.wasm" "$NEXT_JS_ROOT/packages/next/"
echo "✨ Successfully built and moved WASM plugin! 🚀"

----------------------------------------

TITLE: Generating and Running Next.js Build Test
DESCRIPTION: Commands to generate project options and run the Next.js build test tool. It first generates a project_options.json file for a specific Next.js project, then executes the build test.

LANGUAGE: sh
CODE:
cargo run -- generate /path/to/project > project_options.json
cargo run -- run

----------------------------------------

TITLE: Creating Next.js App with ReactMD and TypeScript using npm
DESCRIPTION: Command to bootstrap a new Next.js project with ReactMD and TypeScript using npm and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-react-md-typescript with-react-md-typescript-app

----------------------------------------

TITLE: Installing React Multi-Carousel with Yarn
DESCRIPTION: Command to create a new Next.js application with react-multi-carousel using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-react-multi-carousel with-react-multi-carousel-app

----------------------------------------

TITLE: Initializing MSW Service Worker with NPX
DESCRIPTION: Command to generate the Mock Service Worker file in the public directory using NPX

LANGUAGE: bash
CODE:
npx msw init public/

----------------------------------------

TITLE: Creating Next.js Project with Jotai using PNPM
DESCRIPTION: Command to create a new Next.js project with Jotai integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-jotai with-jotai-app

----------------------------------------

TITLE: Creating Next.js App with Custom Babel Config using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with a custom Babel configuration. It utilizes the 'with-custom-babel-config' example as a template.

LANGUAGE: bash
CODE:
yarn create next-app --example with-custom-babel-config with-custom-babel-config-app

----------------------------------------

TITLE: Correct Re-export of Default Component in Next.js
DESCRIPTION: This snippet shows the correct way to re-export only the default component from another page in Next.js, avoiding potential compilation errors.

LANGUAGE: jsx
CODE:
export { default } from './example-b'

----------------------------------------

TITLE: Removing node-sass dependency using Yarn in Next.js project
DESCRIPTION: This command removes the node-sass package using Yarn, addressing the duplicate Sass dependency problem in a Next.js project.

LANGUAGE: bash
CODE:
yarn remove node-sass

----------------------------------------

TITLE: Creating Next.js App with GraphQL Gateway using NPX
DESCRIPTION: This bash command uses create-next-app to bootstrap a new Next.js application with the GraphQL Gateway example. It utilizes npx to run the create-next-app package.

LANGUAGE: bash
CODE:
npx create-next-app --example with-graphql-gateway with-graphql-gateway-app

----------------------------------------

TITLE: Creating Next.js App with MobX using PNPM
DESCRIPTION: Command to bootstrap a new Next.js application with MobX integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-mobx with-mobx-app

----------------------------------------

TITLE: Manually updating React versions in package.json
DESCRIPTION: This JSON snippet shows how to manually update the React and React DOM versions in the package.json file to the recommended minimum versions.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  }
}

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Example structure of the environment variables file containing Umbraco Heartcore configuration.

LANGUAGE: bash
CODE:
UMBRACO_PROJECT_ALIAS=...
UMBRACO_API_KEY=...
UMBRACO_PREVIEW_SECRET=...

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Example structure of the environment variables file containing Cosmic CMS configuration

LANGUAGE: bash
CODE:
COSMIC_BUCKET_SLUG=...
COSMIC_READ_KEY=...
COSMIC_PREVIEW_SECRET=...

----------------------------------------

TITLE: Creating Next.js App with Active Class Name Example using Yarn
DESCRIPTION: Command to create a new Next.js application using create-next-app with Yarn package manager and the active-class-name example template.

LANGUAGE: bash
CODE:
yarn create next-app --example active-class-name active-class-name-app

----------------------------------------

TITLE: Configuring Next.js with Rspack Plugin
DESCRIPTION: Basic configuration setup for using the Rspack plugin in a Next.js project by wrapping the existing configuration with withRspack.

LANGUAGE: javascript
CODE:
const withRspack = require('@next/plugin-rspack')

/** @type {import('next').NextConfig} */
const nextConfig = {
  /* config options here */
}

module.exports = withRspack(nextConfig)

----------------------------------------

TITLE: Installing Next.js with Vitest using pnpm
DESCRIPTION: Command to create a new Next.js application with Vitest integration using pnpm

LANGUAGE: bash
CODE:
pnpm create next-app --example with-vitest with-vitest-app

----------------------------------------

TITLE: Constructing Dynamic URLs in JavaScript
DESCRIPTION: This code snippet demonstrates the creation of a URL using dynamic values, which can be problematic for static analysis. It uses the 'new URL()' constructor with an unknown first argument and 'import.meta.url' as the base.

LANGUAGE: javascript
CODE:
new URL(unknown, import.meta.url);

----------------------------------------

TITLE: Static Generation with Data Fetching in Next.js
DESCRIPTION: Demonstrates how to use getStaticProps for Static Generation with data fetching. This example fetches blog posts from an external API and passes them as props to the page component.

LANGUAGE: javascript
CODE:
function Blog({ posts }) {
  // Render posts...
}

// This function gets called at build time
export async function getStaticProps() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      posts
    }
  }
}

export default Blog

----------------------------------------

TITLE: Static Generation with Data Fetching in Next.js
DESCRIPTION: Demonstrates how to use getStaticProps for Static Generation with data fetching. This example fetches blog posts from an external API and passes them as props to the page component.

LANGUAGE: javascript
CODE:
function Blog({ posts }) {
  // Render posts...
}

// This function gets called at build time
export async function getStaticProps() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      posts
    }
  }
}

export default Blog

----------------------------------------

TITLE: Accessing Headers in Next.js Components
DESCRIPTION: This snippet demonstrates how to access request headers using the cookies() function in a Next.js component, moving the access deeper into the component tree.

LANGUAGE: jsx
CODE:
import { cookies } from 'next/headers'

export async function Inbox() {
  const token = (await cookies()).get('token')
  const email = await getEmail(token)
  return (
    <ul>
      {email.map((e) => (
        <EmailRow key={e.id} />
      ))}
    </ul>
  )
}

export default async function Page() {
  return (
    <Suspense fallback="loading your inbox...">
      <Inbox>
    </Suspense>
  )
}

----------------------------------------

TITLE: Shell Command Operations
DESCRIPTION: Helper functions for executing and monitoring shell commands. Includes process management, output handling, and metric reporting.

LANGUAGE: javascript
CODE:
import { command } from 'devlow-bench/shell';

const shell = await command("pnpm", ["run", "build"], {
  env: { /* optional env vars */ }
  cwd: "/optional/path/to/directory"
});

// Wait for successful exit
await shell.ok();

// Wait for exit
const exitCode = await shell.end();

// Wait for specific output
const [match, world] = await shell.waitForOutput(/hello (world)/);

// Report memory usage or the process tree as metric
await shell.reportMemUsage("metric name", { /* optional options */ });

shell.stdout, shell.stderr

// merged output
shell.output

// Kill the process tree
await shell.kill();

----------------------------------------

TITLE: Building Next.js with pnpm
DESCRIPTION: This command builds Next.js, including all type definitions and packages. It uses taskr to parallelize build tasks defined in the taskfile.js.

LANGUAGE: bash
CODE:
pnpm build

----------------------------------------

TITLE: Installing Quilljs with Yarn in Next.js
DESCRIPTION: Command to create a new Next.js application with Quilljs integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-quill-js with-quill-js-app

----------------------------------------

TITLE: Basic Playwright Test Implementation
DESCRIPTION: Example of a basic Playwright test implementation with fetch interception for external API calls.

LANGUAGE: javascript
CODE:
import { test, expect } from 'next/experimental/testmode/playwright'

test('/product/shoe', async ({ page, next }) => {
  next.onFetch((request) => {
    if (request.url === 'http://my-db/product/shoe') {
      return new Response(
        JSON.stringify({
          title: 'A shoe',
        }),
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )
    }
    return 'abort'
  })

  await page.goto('/product/shoe')

  await expect(page.locator('body')).toHaveText(/Shoe/)
})

----------------------------------------

TITLE: Setting Icon in HTML Head
DESCRIPTION: This snippet demonstrates the HTML output for setting an icon using the icon file convention in Next.js. The href, type, and sizes attributes are dynamically generated based on the icon file.

LANGUAGE: html
CODE:
<link
  rel="icon"
  href="/icon?<generated>"
  type="image/<generated>"
  sizes="<generated>"
/>

----------------------------------------

TITLE: Creating Next.js App with Stitches using npx
DESCRIPTION: This command uses npx to create a new Next.js application with Stitches integration. It specifies the example template and the output directory name.

LANGUAGE: bash
CODE:
npx create-next-app --example with-stitches with-stitches-app

----------------------------------------

TITLE: Setting up Production Environment with Docker Compose
DESCRIPTION: Commands to create a network, build and start the production environment using multistage builds.

LANGUAGE: bash
CODE:
docker network create my_network

# Build prod
docker compose -f compose.prod.yaml build

# Up prod in detached mode
docker compose -f compose.prod.yaml up -d

----------------------------------------

TITLE: Configuring Image Optimization Options in next.config.js
DESCRIPTION: This snippet demonstrates the complete set of configuration options for the 'images' field in next.config.js. It includes settings for device sizes, image sizes, domains, loaders, caching, formats, security policies, and more.

LANGUAGE: javascript
CODE:
module.exports = {
  images: {
    // limit of 25 deviceSizes values
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    // limit of 25 imageSizes values
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
    // limit of 50 domains values (deprecated)
    domains: [],
    // path prefix for Image Optimization API, useful with `loader`
    path: '/_next/image',
    // loader can be 'default', 'imgix', 'cloudinary', 'akamai', or 'custom'
    loader: 'default',
    // file with `export default function loader({src, width, quality})`
    loaderFile: '',
    // disable static imports for image files
    disableStaticImages: false,
    // minimumCacheTTL is in seconds, must be integer 0 or more
    minimumCacheTTL: 60,
    // ordered list of acceptable optimized image formats (mime types)
    formats: ['image/webp'],
    // enable dangerous use of SVG images
    dangerouslyAllowSVG: false,
    // set the Content-Security-Policy header
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
    // sets the Content-Disposition header ('inline' or 'attachment')
    contentDispositionType: 'attachment',
    // limit of 25 objects
    localPatterns: [],
    // limit of 50 objects
    remotePatterns: [],
    // limit of 20 integers
    qualities: [25, 50, 75],
    // when true, every image will be unoptimized
    unoptimized: false,
  },
}

----------------------------------------

TITLE: Installing TypeScript with npm
DESCRIPTION: Command to install TypeScript as a dev dependency using npm in a Next.js project.

LANGUAGE: shell
CODE:
npm install --save-dev typescript

----------------------------------------

TITLE: Initializing MSW Service Worker with PNPM
DESCRIPTION: Command to generate the Mock Service Worker file in the public directory using PNPM

LANGUAGE: bash
CODE:
pnpm msw init public/

----------------------------------------

TITLE: Creating Next.js Project with Flow using pnpm
DESCRIPTION: Command to create a new Next.js project with Flow integration using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-flow with-flow-app

----------------------------------------

TITLE: Dynamic Module Loading in Node.js
DESCRIPTION: This snippet demonstrates the use of a dynamic require() statement, which can lead to unpredictable behavior and potential security vulnerabilities if the source of 'unknown' is not properly validated.

LANGUAGE: JavaScript
CODE:
require(unknown);

----------------------------------------

TITLE: Creating Next.js App with pnpm
DESCRIPTION: Command to create a new Next.js application with basic CSS example using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example basic-css basic-css-app

----------------------------------------

TITLE: Importing Non-existent Module Export in JavaScript
DESCRIPTION: Example of an invalid module import where the export 'Abc' doesn't exist in the target module. The code shows multiple import statements including an invalid one, with the available exports being 'Abd', 'Eef', 'a', 'b', and 'c'.

LANGUAGE: javascript
CODE:
import { Abc } from "./module";
// We don't report errors for unused invalid exports
import { Def } from "./module";
import * as X from "./module";

----------------------------------------

TITLE: Installing Next.js Portal Example with PNPM
DESCRIPTION: Command to create a new Next.js application with Portals example using PNPM create next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-portals with-portals-app

----------------------------------------

TITLE: Importing and Using Client Component in MDX
DESCRIPTION: Demonstrates importing a Client component from a relative path and rendering it within MDX content. Shows basic MDX syntax combining markdown with JSX.

LANGUAGE: javascript
CODE:
import { Client } from './client'

<Client />

----------------------------------------

TITLE: Creating Next.js App with Emotion using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with Emotion integration using the 'with-emotion-swc' example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-emotion-swc with-emotion-swc-app

----------------------------------------

TITLE: Installing Builder.io CLI
DESCRIPTION: Command to install the Builder.io CLI globally using npm. This is required for generating a new Builder.io space.

LANGUAGE: bash
CODE:
npm install @builder.io/cli -g

----------------------------------------

TITLE: Committing Changes in Next.js Development
DESCRIPTION: Git commands to stage and commit changes made during Next.js development.

LANGUAGE: bash
CODE:
git add .
git commit -m "DESCRIBE_YOUR_CHANGES_HERE"

----------------------------------------

TITLE: Implementing Page Component with Suspense Boundary in Next.js
DESCRIPTION: A page component that properly implements Suspense boundary around the SearchBar component to maintain partial static rendering. Includes a fallback component that renders during initial HTML load.

LANGUAGE: typescript
CODE:
import { Suspense } from 'react'
import SearchBar from './search-bar'

// This component passed as fallback to the Suspense boundary
// will be rendered in place of the search bar in the initial HTML.
// When the value is available during React hydration the fallback
// will be replaced with the `<SearchBar>` component.
function SearchBarFallback() {
  return <>placeholder</>
}

export default function Page() {
  return (
    <>
      <nav>
        <Suspense fallback={<SearchBarFallback />}>
          <SearchBar />
        </Suspense>
      </nav>
      <h1>Dashboard</h1>
    </>
  )
}

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Example structure of the .env.local file with required TakeShape configuration variables

LANGUAGE: bash
CODE:
TAKESHAPE_PROJECT_ID=...
TAKESHAPE_API_KEY=...
TAKESHAPE_PREVIEW_SECRET=...

----------------------------------------

TITLE: Copying Environment Configuration File
DESCRIPTION: This command copies the example environment configuration file to create a local version. The resulting .env.local file is used to set up MQTT connection parameters and is ignored by Git.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Exporting Object with Shared Properties and Custom Value in JavaScript
DESCRIPTION: Creates and exports an object 'b' that includes the 'shared' object and a custom property. This shows another example of object creation and module exports.

LANGUAGE: javascript
CODE:
export const b = {
    shared,
    b: "bbbbbbbbbbb"
};

----------------------------------------

TITLE: Creating Next.js Project with Clerk Authentication using npm
DESCRIPTION: This command uses create-next-app to bootstrap a Next.js project with Clerk authentication integration.

LANGUAGE: bash
CODE:
npx create-next-app --example with-clerk with-clerk-app

----------------------------------------

TITLE: Creating Next.js App with React Remove Properties Example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the react-remove-properties example. It sets up the project structure and installs necessary dependencies.

LANGUAGE: bash
CODE:
pnpm create next-app --example react-remove-properties react-remove-properties-app

----------------------------------------

TITLE: Configuring Cypress for Component Testing in Next.js (JavaScript)
DESCRIPTION: This snippet shows the configuration for Cypress component testing in a Next.js project using JavaScript.

LANGUAGE: javascript
CODE:
const { defineConfig } = require('cypress')

module.exports = defineConfig({
  component: {
    devServer: {
      framework: 'next',
      bundler: 'webpack',
    },
  },
})

----------------------------------------

TITLE: Initializing Client Component Load Metrics Variables in JavaScript
DESCRIPTION: Declares and initializes variables to track client component loading metrics, including start time, total load time, and load count.

LANGUAGE: javascript
CODE:
let clientComponentLoadStart = 0;
let clientComponentLoadTimes = 0;
let clientComponentLoadCount = 0;

----------------------------------------

TITLE: Creating Next.js Project with Cloudflare Turnstile using npx
DESCRIPTION: Command to create a new Next.js project with Cloudflare Turnstile integration using npx and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example cloudflare-turnstile cloudflare-turnstile-app

----------------------------------------

TITLE: Setting Red Text Color in CSS
DESCRIPTION: Defines a CSS class that sets text color to red. This class can be applied to any HTML element to make its text content appear in red.

LANGUAGE: css
CODE:
.red {
  color: red;
}

----------------------------------------

TITLE: Importing and Defining RouteKind in Development Mode
DESCRIPTION: This snippet imports RouteKind and defines its values using an IIFE in development mode.

LANGUAGE: javascript
CODE:
import { a as RouteKind } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
(function(RouteKind) {
    RouteKind["PAGES"] = "PAGES";
    RouteKind["PAGES_API"] = "PAGES_API";
    RouteKind["APP_PAGE"] = "APP_PAGE";
    RouteKind["APP_ROUTE"] = "APP_ROUTE";
})(RouteKind || (RouteKind = {}));

----------------------------------------

TITLE: Running Next.js Example App with Dependencies
DESCRIPTION: This command runs a Next.js example app with its dependencies. It requires installing dependencies and building repository packages beforehand.

LANGUAGE: sh
CODE:
pnpm next-with-deps ./examples/basic-css/

----------------------------------------

TITLE: Installing Next.js Translation Project with NPX
DESCRIPTION: Command to create a new Next.js project with next-translate integration using npx create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example with-next-translate with-next-translate-app

----------------------------------------

TITLE: Installing Next.js with React Toolbox using PNPM
DESCRIPTION: Command to create a new Next.js application with React Toolbox integration using the PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-react-toolbox with-react-toolbox-app

----------------------------------------

TITLE: Committing and Pushing to GitHub Repository
DESCRIPTION: These commands commit the changes to the local Git repository and push them to the GitHub remote. This triggers a deployment in Vercel if set up correctly.

LANGUAGE: bash
CODE:
git add .
git commit -m "Initial commit"
git push

----------------------------------------

TITLE: Creating Next.js App with ESLint using npm
DESCRIPTION: Command to bootstrap a Next.js application with ESLint configuration using npm and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-eslint with-eslint-app

----------------------------------------

TITLE: Creating Next.js App with Compiled CSS using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with Compiled CSS-in-JS integration. It utilizes the 'with-compiled-css' example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-compiled-css with-compiled-css-app

----------------------------------------

TITLE: Testing Module Import Error in JavaScript
DESCRIPTION: This code snippet demonstrates a test case for importing a non-existent file. It expects the import to throw an error, which is used to verify error handling behavior.

LANGUAGE: javascript
CODE:
it("importing a not existing file should throw", () => {
  // This is a check to make sure that the following tests would fail if they require("fail")
  expect(() => {
    require("./not-existing-file");
  }).toThrow();
});

function maybeReturn(x) {


----------------------------------------

TITLE: Variable Declaration in JavaScript
DESCRIPTION: Declaration of variable 'a' using var keyword

LANGUAGE: javascript
CODE:
var a;

----------------------------------------

TITLE: Creating Next.js Script Component App with Yarn
DESCRIPTION: Command to bootstrap a new Next.js application using the script-component example with Yarn.

LANGUAGE: bash
CODE:
yarn create next-app --example script-component script-component-app

----------------------------------------

TITLE: Creating Next.js App with DatoCMS Template using npm
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with the DatoCMS template.

LANGUAGE: bash
CODE:
npx create-next-app --example cms-datocms cms-datocms-app

----------------------------------------

TITLE: Installing Local Next.js Dependencies in Shell
DESCRIPTION: This command adds local versions of Next.js, React, and React DOM as dependencies to your project. It's used when setting up Next.js as a local dependency in your package.json.

LANGUAGE: sh
CODE:
pnpm add ./path/to/next.js/{packages/next,node_modules/{react,react-dom}}

----------------------------------------

TITLE: Installing Next.js with Filbert using Yarn
DESCRIPTION: Command to create a new Next.js application with Filbert.js integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-filbert with-filbert-app

----------------------------------------

TITLE: Development Module Merged Evaluation
DESCRIPTION: Merged module evaluation code combining imports and console log

LANGUAGE: javascript
CODE:
import { a as a } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
console.log(a);
"module evaluation";

----------------------------------------

TITLE: Visualizing Next.js SWC Package Hierarchies
DESCRIPTION: Mermaid flowchart representing the package hierarchies within @next/swc, showing relationships between different components like next-custom-transforms, next-core, and binding interfaces.

LANGUAGE: mermaid
CODE:
flowchart TD
    C(next-custom-transforms) --> A(napi)
    C(next-custom-transforms) --> B(wasm)
    D(next-core) --> A(napi)
    E(next-build) --> A(napi)
    F(next-api) --> A(napi)
    C(next-custom-transforms) --> D
    D(next-core) --> F(next-api)
    D(next-core) --> E(next-build)

----------------------------------------

TITLE: Displaying Mathematical Expression with Rehype
DESCRIPTION: Shows a basic mathematical symbol C_L using math notation within a Rehype plugin context. This represents a coefficient commonly used in mathematical or scientific documentation.

LANGUAGE: math
CODE:
C_L

----------------------------------------

TITLE: Creating Next.js App with StencilJS using Yarn
DESCRIPTION: Command to create a new Next.js application with StencilJS integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-stencil with-stencil-app

----------------------------------------

TITLE: Formatting Dynamic API Accesses in Next.js
DESCRIPTION: Formats dynamic API access information for debugging purposes in Next.js.

LANGUAGE: JavaScript
CODE:
function formatDynamicAPIAccesses(prerenderState) {
    return prerenderState.dynamicAccesses.filter((access)=>typeof access.stack === 'string' && access.stack.length > 0).map(({ expression, stack })=>{
        stack = stack.split('\n').slice(4).filter((line)=>{
            if (line.includes('node_modules/next/')) {
                return false;
            }
            if (line.includes(' (<anonymous>)')) {
                return false;
            }
            if (line.includes(' (node:')) {
                return false;
            }
            return true;
        }).join('\n');
        return `Dynamic API Usage Debug - ${expression}:\n${stack}`;
    });
}

----------------------------------------

TITLE: Creating Next.js Project with Cloudflare Turnstile using Yarn
DESCRIPTION: Command to create a new Next.js project with Cloudflare Turnstile integration using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example cloudflare-turnstile cloudflare-turnstile-app

----------------------------------------

TITLE: Defining a Setter Function in JavaScript
DESCRIPTION: This snippet defines a function 'setDog(newDog)' that sets the value of the 'dog' variable to a new value. It demonstrates the creation of a simple setter function in JavaScript.

LANGUAGE: javascript
CODE:
function setDog(newDog) {
    dog = newDog;
}

----------------------------------------

TITLE: Module Export Configuration (Dev Part 0)
DESCRIPTION: Exports variable 'a' with TurboPack variable assertion configuration

LANGUAGE: javascript
CODE:
const a = "a";
export { a };
export { a as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

----------------------------------------

TITLE: Installing React and Node Type Declarations with npm
DESCRIPTION: Command to install type declarations for React, React DOM, and Node.js using npm in a Next.js TypeScript project.

LANGUAGE: shell
CODE:
npm install --save-dev @types/react @types/react-dom @types/node

----------------------------------------

TITLE: Installing Next.js with Meilisearch using PNPM
DESCRIPTION: Command to create a new Next.js application with Meilisearch integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-meilisearch with-meilisearch-app

----------------------------------------

TITLE: Configuring Inline CSS in Next.js with JavaScript
DESCRIPTION: Configuration example showing how to enable inline CSS support in Next.js using JavaScript. This setup enables the experimental feature that converts <link> tags to inline <style> tags in the HTML head.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    inlineCss: true,
  },
}

module.exports = nextConfig

----------------------------------------

TITLE: Exporting Icon Size Configuration in TypeScript
DESCRIPTION: This snippet demonstrates how to export the size configuration for an icon in TypeScript, which sets the width and height of the icon.

LANGUAGE: tsx
CODE:
export const size = { width: 32, height: 32 }

export default function Icon() {}

----------------------------------------

TITLE: Installing Next.js with Knex Template using pnpm
DESCRIPTION: Creates a new Next.js application with Knex integration using pnpm create

LANGUAGE: bash
CODE:
pnpm create next-app --example with-knex with-knex-app

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Creates a local environment file by copying the example template for MongoDB configuration.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Using draftMode in Next.js Server Component
DESCRIPTION: This snippet demonstrates how to import and use the draftMode function in a Next.js Server Component. It shows how to check if Draft Mode is enabled using the isEnabled property.

LANGUAGE: typescript
CODE:
import { draftMode } from 'next/headers'

export default async function Page() {
  const { isEnabled } = await draftMode()
}

LANGUAGE: javascript
CODE:
import { draftMode } from 'next/headers'

export default async function Page() {
  const { isEnabled } = await draftMode()
}

----------------------------------------

TITLE: Creating Next.js App with Slate using Yarn
DESCRIPTION: Command to create a new Next.js application with Slate.js integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-slate with-slate-app

----------------------------------------

TITLE: Adding User Reviews and Follows Relationships in Neo4j
DESCRIPTION: This Cypher query adds user nodes, creates 'FOLLOWS' relationships between users, and adds 'REVIEWED' relationships between users and movies with properties like summary and rating.

LANGUAGE: cypher
CODE:
CREATE (PaulBlythe:Person {name:'Paul Blythe'})
CREATE (AngelaScope:Person {name:'Angela Scope'})
CREATE (JessicaThompson:Person {name:'Jessica Thompson'})
CREATE (JamesThompson:Person {name:'James Thompson'})

CREATE
(JamesThompson)-[:FOLLOWS]->(JessicaThompson),
(AngelaScope)-[:FOLLOWS]->(JessicaThompson),
(PaulBlythe)-[:FOLLOWS]->(AngelaScope)

CREATE
(JessicaThompson)-[:REVIEWED {summary:'An amazing journey', rating:95}]->(CloudAtlas),
(JessicaThompson)-[:REVIEWED {summary:'Silly, but fun', rating:65}]->(TheReplacements),
(JamesThompson)-[:REVIEWED {summary:'The coolest football movie ever', rating:100}]->(TheReplacements),
(AngelaScope)-[:REVIEWED {summary:'Pretty funny at times', rating:62}]->(TheReplacements),
(JessicaThompson)-[:REVIEWED {summary:'Dark, but compelling', rating:85}]->(Unforgiven),
(JessicaThompson)-[:REVIEWED {summary:"Slapstick redeemed only by the Robin Williams and Gene Hackman's stellar performances", rating:45}]->(TheBirdcage),
(JessicaThompson)-[:REVIEWED {summary:'A solid romp', rating:68}]->(TheDaVinciCode),
(JamesThompson)-[:REVIEWED {summary:'Fun, but a little far fetched', rating:65}]->(TheDaVinciCode),
(JessicaThompson)-[:REVIEWED {summary:'You had me at Jerry', rating:92}]->(JerryMaguire)

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using either npm or yarn

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev

----------------------------------------

TITLE: Defining and Exporting Functions in Next.js
DESCRIPTION: This snippet shows how to define internal and external functions in a Next.js module and export them. It demonstrates function declarations, using imported functions within other functions, and exporting functions for use in other parts of the application.

LANGUAGE: javascript
CODE:
function internal() {
    return upper(foobar);
}

export function external1() {
    return internal() + foobar;
}

export function external2() {
    foobar += ".";
}

----------------------------------------

TITLE: Installing MDX Remote Example with Bun
DESCRIPTION: Command to create a new Next.js application using the mdx-remote example template with Bun.

LANGUAGE: bash
CODE:
bunx create-next-app --example mdx-remote mdx-remote-app

----------------------------------------

TITLE: Export All Warning - CommonJS Module Resolution
DESCRIPTION: Error message showing incorrect usage of export * with a CommonJS module. The warning suggests either explicitly listing exports or converting the module to ESM format to avoid runtime overhead.

LANGUAGE: javascript
CODE:
export * from "./commonjs.js"

----------------------------------------

TITLE: Installing Next.js Blog Template with PNPM
DESCRIPTION: Command to create a new Next.js blog application using the Cosmic CMS template with PNPM package manager

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-cosmic cms-cosmic-app

----------------------------------------

TITLE: Creating Next.js Project with urql using pnpm
DESCRIPTION: Command to initialize a new Next.js project with urql integration using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-urql with-urql-app

----------------------------------------

TITLE: Conditional Function Call
DESCRIPTION: Conditional block that calls the imported 'baz' function if a condition is met. Contains a side effect and reads the 'baz' binding.

LANGUAGE: javascript
CODE:
if (1 + 1 == 3) {
    baz();
}

----------------------------------------

TITLE: Creating Next.js ButterCMS App via PNPM
DESCRIPTION: Command to bootstrap a new Next.js application with ButterCMS using create-next-app and pnpm.

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-buttercms cms-buttercms-app

----------------------------------------

TITLE: Creating Next.js API Routes Project with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js project with route handlers. It sets up a new directory named 'route-handlers-app' with the required project structure and dependencies.

LANGUAGE: bash
CODE:
yarn create next-app --example route-handlers route-handlers-app

----------------------------------------

TITLE: Setting up WASM for Next.js
DESCRIPTION: This script copies the built WASM binary into the node_modules directory. It's part of the process for testing WASM builds locally.

LANGUAGE: bash
CODE:
node ./scripts/setup-wasm.mjs

----------------------------------------

TITLE: Deprecated NextJS Middleware Implementation
DESCRIPTION: Shows the old event-based middleware implementation pattern that is now deprecated. This version uses the event parameter and event.respondWith() method which are no longer supported.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'

export function middleware(event) {
  if (event.request.nextUrl.pathname === '/blocked') {
    event.respondWith(
      new NextResponse(null, {
        status: 403,
      })
    )
  }
}

----------------------------------------

TITLE: Creating Next.js Static Export App with Yarn
DESCRIPTION: Command to create a new Next.js application with static export functionality using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-static-export with-static-export-app

----------------------------------------

TITLE: Stream Destruction Support Check
DESCRIPTION: Checks if stream destruction is supported by verifying the existence of 'destroy' method in Stream.Readable.prototype.

LANGUAGE: javascript
CODE:
const streamDestructionSupported = 'destroy' in Stream.Readable.prototype;

----------------------------------------

TITLE: Export Handling in Next.js Production Environment
DESCRIPTION: This snippet shows how exports are managed in a Next.js production environment. It includes exports of variables 'a' and 'b' from specific Turbopack parts, demonstrating the modular structure in production builds.

LANGUAGE: javascript
CODE:
export { a } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export a"
};
export { b } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export b"
};


----------------------------------------

TITLE: Implementing Ably Channel Subscription
DESCRIPTION: Example of using useChannel hook to subscribe to and receive messages from an Ably channel

LANGUAGE: javascript
CODE:
import { useState } from "react";
import { useChannel } from "@ably-labs/react-hooks";

export default function Home() {
  const [channel] = useChannel("your-channel", async (message) => {
    console.log("Received Ably message", message);
  });
}

----------------------------------------

TITLE: Configuring Next.js with Experimental NFT Plugin
DESCRIPTION: This snippet demonstrates how to set up the @vercel/experimental-nft-next-plugin in a Next.js project's configuration file. It shows the import of the createNodeFileTrace function and its usage with experimental NFT options.

LANGUAGE: javascript
CODE:
// next.config.js

const { createNodeFileTrace } = require("@vercel/experimental-nft-next-plugin");

const withNodeFileTrace = createNodeFileTrace({
  // experimental nft options
  log: {
    all: true,
  },
});

module.exports = withNodeFileTrace({
  // next config
});

----------------------------------------

TITLE: Async Headers API Migration
DESCRIPTION: Examples showing how to migrate the headers API to use async/await syntax in Next.js 15.

LANGUAGE: typescript
CODE:
import { headers } from 'next/headers'

// Before
const headersList = headers()
const userAgent = headersList.get('user-agent')

// After
const headersList = await headers()
const userAgent = headersList.get('user-agent')

----------------------------------------

TITLE: Creating Next.js Project with Reflux using Yarn
DESCRIPTION: Command to create a new Next.js project with Reflux integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-reflux with-reflux-app

----------------------------------------

TITLE: Variable Manipulation in Next.js
DESCRIPTION: This snippet illustrates variable manipulation within a Next.js module. It shows how to declare variables, concatenate strings, and perform assignments using the += operator.

LANGUAGE: javascript
CODE:
const bar = "bar";
foobar += bar;
let foobarCopy = foobar;
foobar += "foo";

----------------------------------------

TITLE: Installing Next.js Blog Template with Yarn
DESCRIPTION: Command to create a new Next.js blog project using the GraphCMS template with Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example cms-graphcms cms-graphcms-app

----------------------------------------

TITLE: Development Module Parts
DESCRIPTION: TurboPack-generated module parts for development, showing how the original export is split into multiple chunks with internal references.

LANGUAGE: javascript
CODE:
import "./lib";

LANGUAGE: javascript
CODE:
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { cat as __TURBOPACK__reexport__cat__ } from "./lib";
export { __TURBOPACK__reexport__cat__ as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

LANGUAGE: javascript
CODE:
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
"module evaluation";

LANGUAGE: javascript
CODE:
import { a as __TURBOPACK__reexport__cat__ } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
export { __TURBOPACK__reexport__cat__ as fakeCat };

----------------------------------------

TITLE: Composing Grid Utilities in JavaScript
DESCRIPTION: Composes various grid-related utility functions into a single 'grid' utility using the 'compose' function from Material-UI.

LANGUAGE: JavaScript
CODE:
const grid = compose(
    gap,
    columnGap,
    rowGap,
    gridColumn,
    gridRow,
    gridAutoFlow,
    gridAutoColumns,
    gridAutoRows,
    gridTemplateColumns,
    gridTemplateRows,
    gridTemplateAreas,
    gridArea
);

export default grid;

----------------------------------------

TITLE: Installing sass package using npm or yarn
DESCRIPTION: Commands to install the sass package using either npm or yarn package managers. This is required to use Next.js built-in Sass support.

LANGUAGE: bash
CODE:
npm i sass
# or
yarn add sass

----------------------------------------

TITLE: Creating Next.js Project with Rosetta i18n Using npm
DESCRIPTION: Command to create a new Next.js project with Rosetta internationalization using npm and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-i18n-rosetta with-i18n-rosetta-app

----------------------------------------

TITLE: Building Static Storybook
DESCRIPTION: Commands to build a static version of Storybook for deployment using npm, yarn, or pnpm.

LANGUAGE: bash
CODE:
npm run build-storybook
# or
yarn build-storybook
# or
pnpm build-storybook

----------------------------------------

TITLE: Initializing Next.js Project with Neo4j Integration using Yarn
DESCRIPTION: Command to create a new Next.js project with Neo4j integration using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-neo4j with-neo4j-app

----------------------------------------

TITLE: Creating Next.js SFCC Project with Yarn
DESCRIPTION: Command to create a new Next.js project with Salesforce Commerce Cloud integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-sfcc nextjs-sfcc-app

----------------------------------------

TITLE: Creating Next.js App with DatoCMS Template using pnpm
DESCRIPTION: This command uses pnpm to initialize a new Next.js project with the DatoCMS template.

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-datocms cms-datocms-app

----------------------------------------

TITLE: Executing Dynamic Child Processes in Node.js
DESCRIPTION: This code demonstrates the use of child_process.spawnSync with dynamic arguments, which can lead to unpredictable and potentially unsafe behavior. It also shows dynamic usage of require, which is generally discouraged for security reasons.

LANGUAGE: javascript
CODE:
const unknown = Math.random();

child_process.spawnSync(unknown);
child_process.spawnSync("node", unknown);
child_process.spawnSync("node", [unknown, unknown]);

require(unknown);

----------------------------------------

TITLE: Implementing BubbledError Class
DESCRIPTION: Custom error class for handling bubbled errors in the tracing system. Contains bubble flag and result properties.

LANGUAGE: javascript
CODE:
class BubbledError extends Error {
    constructor(bubble, result){
        super();
        this.bubble = bubble;
        this.result = result;
    }
}

----------------------------------------

TITLE: Creating Next.js Project with Plasmic Integration using pnpm
DESCRIPTION: Command to create a new Next.js project with Plasmic integration using pnpm. This provides another package manager option for setting up the project structure and installing dependencies.

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-plasmic cms-plasmic-app

----------------------------------------

TITLE: Installing Next.js with Knex Template using npx
DESCRIPTION: Creates a new Next.js application with Knex integration using npx create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example with-knex with-knex-app

----------------------------------------

TITLE: Creating New Error Documentation in Next.js using pnpm
DESCRIPTION: Command to generate a new error document and automatically update the error manifest in Next.js. The command will create the necessary files and provide a URL that can be used in the error message.

LANGUAGE: bash
CODE:
pnpm new-error

----------------------------------------

TITLE: Copying Environment Configuration File
DESCRIPTION: Command to copy the example environment configuration file to create a local configuration for GTM ID

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Importing and Exporting Module in Next.js
DESCRIPTION: This snippet demonstrates importing a module and exporting a named function from it. It shows how to use ES6 import syntax and export a specific function from an imported module.

LANGUAGE: javascript
CODE:
import { upper } from "module";

----------------------------------------

TITLE: Describing @next/swc-win32-x64-msvc Package in Markdown
DESCRIPTION: This markdown snippet identifies the specific binary package for @next/swc, targeting Windows x64 systems using the MSVC compiler. It's crucial for Next.js projects running on Windows 64-bit environments.

LANGUAGE: markdown
CODE:
# `@next/swc-win32-x64-msvc`

This is the **x86_64-pc-windows-msvc** binary for `@next/swc`

----------------------------------------

TITLE: Checking React Element Types with react-is
DESCRIPTION: Demonstrates how to use react-is to check if a value is a React element and determine its type.

LANGUAGE: javascript
CODE:
import React from "react";
import * as ReactIs from 'react-is';

ReactIs.isElement(<div />); // true
ReactIs.typeOf(<div />) === ReactIs.Element; // true

----------------------------------------

TITLE: Creating Next.js App with React Intl Using npx
DESCRIPTION: This command uses npx to create a new Next.js application with React Intl integration using the create-next-app tool.

LANGUAGE: bash
CODE:
npx create-next-app --example with-react-intl with-react-intl-app

----------------------------------------

TITLE: Manipulating Order Array
DESCRIPTION: Demonstrates array manipulation by pushing values into the order array and creating objects with shared state.

LANGUAGE: javascript
CODE:
const random = Math.random();
const shared = {
    random,
    effect: order.push("b")
};

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to create a local environment variables file from the example template.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Dependency Graph Visualization with Mermaid
DESCRIPTION: These Mermaid diagrams visualize the dependencies between different items in the module, showing the relationships between variable declarations and exports.

LANGUAGE: mermaid
CODE:
graph TD
    Item1;
    Item2;
    Item3;
    Item4;
    Item5;
    Item5["ModuleEvaluation"];
    Item6;
    Item6["export DOG"];
    Item7;
    Item7["export CHIMERA"];
    Item3 --> Item1;
    Item4 --> Item2;
    Item4 --> Item1;
    Item6 --> Item3;
    Item7 --> Item4;

LANGUAGE: mermaid
CODE:
graph TD
    N0["Items: [ItemId(0, VarDeclarator(0))]"];
    N1["Items: [ItemId(1, VarDeclarator(0)), ItemId(3, VarDeclarator(0)), ItemId(Export((&quot;CHIMERA&quot;, #2), &quot;CHIMERA&quot;))]"];
    N2["Items: [ItemId(2, VarDeclarator(0)), ItemId(Export((&quot;DOG&quot;, #2), &quot;DOG&quot;))]"];
    N3["Items: [ItemId(ModuleEvaluation)]"];
    N2 --> N0;
    N1 --> N0;

----------------------------------------

TITLE: Installing Sharp with NPM
DESCRIPTION: Command to install the sharp package using NPM package manager

LANGUAGE: bash
CODE:
npm i sharp

----------------------------------------

TITLE: Creating Next.js App with FingerprintJS Pro using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with FingerprintJS Pro integration. It initializes the project with the necessary template and dependencies.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-fingerprintjs-pro with-fingerprintjs-pro-app

----------------------------------------

TITLE: Incorrect usage of HTML anchor tag in Next.js
DESCRIPTION: This snippet demonstrates the incorrect way of creating an internal link in a Next.js application using an HTML anchor tag. This approach causes unnecessary full-page refreshes and should be avoided.

LANGUAGE: jsx
CODE:
function Home() {
  return (
    <div>
      <a href="/about">About Us</a>
    </div>
  )
}

----------------------------------------

TITLE: Getting All Cookies in Next.js
DESCRIPTION: Shows how to retrieve and display all cookies using the getAll() method in a Next.js Server Component.

LANGUAGE: typescript
CODE:
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  return cookieStore.getAll().map((cookie) => (
    <div key={cookie.name}>
      <p>Name: {cookie.name}</p>
      <p>Value: {cookie.value}</p>
    </div>
  ))
}

LANGUAGE: javascript
CODE:
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  return cookieStore.getAll().map((cookie) => (
    <div key={cookie.name}>
      <p>Name: {cookie.name}</p>
      <p>Value: {cookie.value}</p>
    </div>
  ))
}

----------------------------------------

TITLE: Creating Next.js Project with Passport Authentication using NPX
DESCRIPTION: Command to create a new Next.js application with Passport.js authentication template using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-passport with-passport-app

----------------------------------------

TITLE: Running Next.js Development Server with Yarn
DESCRIPTION: These commands install dependencies and start the Next.js development server using Yarn.

LANGUAGE: bash
CODE:
yarn install
yarn dev

----------------------------------------

TITLE: Implementing Custom Server in Next.js (JavaScript)
DESCRIPTION: This snippet shows how to set up a custom server for a Next.js application using JavaScript. It creates an HTTP server, handles URL parsing, and integrates with the Next.js app instance.

LANGUAGE: javascript
CODE:
import { createServer } from 'http'
import { parse } from 'url'
import next from 'next'

const port = parseInt(process.env.PORT || '3000', 10)
const dev = process.env.NODE_ENV !== 'production'
const app = next({ dev })
const handle = app.getRequestHandler()

app.prepare().then(() => {
  createServer((req, res) => {
    const parsedUrl = parse(req.url, true)
    handle(req, res, parsedUrl)
  }).listen(port)

  console.log(
    `> Server listening at http://localhost:${port} as ${
      dev ? 'development' : process.env.NODE_ENV
    }`
  )
})

----------------------------------------

TITLE: Installing React GA4 Project with PNPM
DESCRIPTION: Command to create a new Next.js application with react-ga4 integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-react-ga4 with-react-ga-app

----------------------------------------

TITLE: Creating Next.js App with Styled-JSX using pnpm
DESCRIPTION: Command to create a new Next.js application with styled-jsx example using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-styled-jsx with-styled-jsx-app

----------------------------------------

TITLE: Creating Next.js SFCC Project with NPX
DESCRIPTION: Command to create a new Next.js project with Salesforce Commerce Cloud integration using NPX package manager.

LANGUAGE: bash
CODE:
npx create-next-app --example with-sfcc nextjs-sfcc-app

----------------------------------------

TITLE: Defining Constants for NextResponse Implementation
DESCRIPTION: Defines internal symbols and sets of valid redirect status codes used by the NextResponse implementation

LANGUAGE: javascript
CODE:
const INTERNALS = Symbol('internal response');

const REDIRECTS = new Set([
    301,
    302,
    303,
    307,
    308
]);

----------------------------------------

TITLE: Configuring Posts Page Frontmatter in Next.js
DESCRIPTION: YAML frontmatter configuration that defines the metadata for a Posts page in a Next.js application. Specifies the content type as 'posts', page title as 'Posts', and sets the publication date to March 18, 2021.

LANGUAGE: yaml
CODE:
---
type: posts
title: Posts
date: 2021-03-18
---

----------------------------------------

TITLE: Production Module Implementation
DESCRIPTION: Production version of the module with optimized imports and exports

LANGUAGE: javascript
CODE:
import { a as effects } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
function effect(name) {
    effects.push(name);
}
export { effect };
export { effect as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

----------------------------------------

TITLE: Running Development Server (npm)
DESCRIPTION: Command to start the Next.js development server using npm.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Creating Next.js App with Styled Components using npx
DESCRIPTION: This command uses create-next-app to bootstrap a Next.js project with styled-components integration.

LANGUAGE: bash
CODE:
npx create-next-app --example with-styled-components with-styled-components-app

----------------------------------------

TITLE: Importing Client Components
DESCRIPTION: Imports ClientComponent and MyModuleClientComponent from local and external module paths.

LANGUAGE: javascript
CODE:
import { ClientComponent } from '../../ClientComponent';
import { MyModuleClientComponent } from 'my-module/MyModuleClientComponent';

----------------------------------------

TITLE: Creating Next.js Project with Userbase Template using PNPM
DESCRIPTION: Command to create a new Next.js project with Userbase integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-userbase next-userbase-app

----------------------------------------

TITLE: Installing Next.js Sitemap Project with PNPM
DESCRIPTION: Command to create a new Next.js application with next-sitemap integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-next-sitemap with-next-sitemap-app

----------------------------------------

TITLE: Creating Shared Object in JavaScript
DESCRIPTION: Constructs an object 'shared' with properties from previously defined variables. This shows object creation and property assignment using shorthand syntax.

LANGUAGE: javascript
CODE:
const shared = {
    value,
    value2,
    value3
};

----------------------------------------

TITLE: Using URL Constructor for Middleware Redirects in Next.js TypeScript
DESCRIPTION: Shows an alternative approach for handling URL redirects in Next.js Middleware using the URL constructor. This method uses the original URL as the base but doesn't consider basePath or locale configuration.

LANGUAGE: typescript
CODE:
import type { NextRequest } from 'next/server'
import { NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  return NextResponse.rewrite(new URL('/dest', request.url))
}

----------------------------------------

TITLE: Initialize Next.js Project with PNPM
DESCRIPTION: Command to create a new Next.js project using the dotCMS template with PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-dotcms cms-dotcms-app

----------------------------------------

TITLE: Defining Gap Utility for Grid Layouts in JavaScript
DESCRIPTION: Creates a utility function 'gap' that handles the 'gap' property for grid layouts. It uses theme-aware spacing and supports responsive breakpoints.

LANGUAGE: JavaScript
CODE:
export const gap = (props) => {
    if (props.gap !== undefined && props.gap !== null) {
        const transformer = createUnaryUnit(props.theme, 'spacing', 8, 'gap');
        const styleFromPropValue = (propValue) => ({
                gap: getValue(transformer, propValue)
            });
        return handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
};

----------------------------------------

TITLE: Creating Next.js App with Sentry Template using Yarn
DESCRIPTION: This command creates a new Next.js application using the Sentry example template with Yarn package manager. It sets up the project structure and installs necessary dependencies.

LANGUAGE: bash
CODE:
yarn create next-app --example with-sentry nextjs-sentry-example

----------------------------------------

TITLE: Building Next.js Project
DESCRIPTION: Initial build command required before running tests

LANGUAGE: bash
CODE:
pnpm build

----------------------------------------

TITLE: Exporting Variables and Functions in JavaScript
DESCRIPTION: This snippet exports a 'cat' variable, an 'initialCat' constant, and a 'getChimera()' function. It demonstrates various ways of exporting elements from a JavaScript module.

LANGUAGE: javascript
CODE:
export let cat = "cat";
export const initialCat = cat;
export function getChimera() {
    return cat + dog;
}

----------------------------------------

TITLE: Installing React GA4 Project with Yarn
DESCRIPTION: Command to create a new Next.js application with react-ga4 integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-react-ga4 with-react-ga-app

----------------------------------------

TITLE: Postponing Rendering in Next.js
DESCRIPTION: Implements a Postpone component that triggers postponed rendering with tracking in Next.js.

LANGUAGE: JavaScript
CODE:
function Postpone({ reason, prerenderState, pathname }) {
    postponeWithTracking(prerenderState, reason, pathname);
}

----------------------------------------

TITLE: Creating Next.js App with Sitecore XM Cloud Template using PNPM
DESCRIPTION: Command to create a new Next.js application using the Sitecore XM Cloud template with PNPM. This provides another package manager option for setting up the Sitecore-integrated Next.js project.

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-sitecore-xmcloud cms-sitecore-xmcloud-app

----------------------------------------

TITLE: Exporting Custom Document
DESCRIPTION: Exports the MyDocument class as the default export for use in the Next.js application.

LANGUAGE: JavaScript
CODE:
export default MyDocument;

----------------------------------------

TITLE: Running Tests with npm
DESCRIPTION: This command runs the Jest tests in a Next.js project using npm.

LANGUAGE: bash
CODE:
npm test

----------------------------------------

TITLE: Creating Next.js App with Facebook Pixel Template using pnpm
DESCRIPTION: Command to create a new Next.js application with Facebook Pixel integration using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-facebook-pixel with-facebook-pixel-app

----------------------------------------

TITLE: Installing Next.js with RBX and Bulma Pro using PNPM
DESCRIPTION: Command to create a new Next.js application with RBX and Bulma Pro template using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-rbx-bulma-pro with-rbx-bulma-pro-app

----------------------------------------

TITLE: Creating Next.js TypeScript App with npm
DESCRIPTION: Command to create a new Next.js application with TypeScript using npm and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-typescript with-typescript-app

----------------------------------------

TITLE: Installing Next.js with Sass using create-next-app (Yarn)
DESCRIPTION: Command to create a new Next.js project with Sass support using Yarn's create-next-app command.

LANGUAGE: bash
CODE:
yarn create next-app --example with-sass with-sass-app

----------------------------------------

TITLE: Installing Next.js Sitemap Project with NPX
DESCRIPTION: Command to create a new Next.js application with next-sitemap integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-next-sitemap with-next-sitemap-app

----------------------------------------

TITLE: Project Structure Visualization (Mermaid)
DESCRIPTION: These Mermaid diagrams visualize the project structure and dependencies across different phases of the build process. They show the relationships between items and module evaluation stages.

LANGUAGE: mermaid
CODE:
graph TD
    Item1;
    Item2;
    Item2["ModuleEvaluation"];

LANGUAGE: mermaid
CODE:
graph TD
    Item1;
    Item2;
    Item2["ModuleEvaluation"];
    Item2 --> Item1;

LANGUAGE: mermaid
CODE:
graph TD
    N0["Items: [ItemId(0, Normal), ItemId(ModuleEvaluation)]"];

----------------------------------------

TITLE: Initializing WebSocket Connection Variables in JavaScript
DESCRIPTION: Declares a variable 'source' for the WebSocket connection and an array 'eventCallbacks' to store event callback functions.

LANGUAGE: javascript
CODE:
let source;

const eventCallbacks = [];

----------------------------------------

TITLE: Creating Next.js App with Catch All Routes using NPX
DESCRIPTION: Command to create a new Next.js application with catch-all routes example using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example catch-all-routes catch-all-routes-app

----------------------------------------

TITLE: Creating Next.js App with Magic Authentication Template
DESCRIPTION: Commands to create a new Next.js application using the Magic authentication example template. These commands use different package managers (npm, yarn, pnpm) to bootstrap the project.

LANGUAGE: bash
CODE:
npx create-next-app --example with-magic with-magic-app

LANGUAGE: bash
CODE:
yarn create next-app --example with-magic with-magic-app

LANGUAGE: bash
CODE:
pnpm create next-app --example with-magic with-magic-app

----------------------------------------

TITLE: Accessing External Object Property in JavaScript
DESCRIPTION: Retrieves a property value from an external object using a getter and assigns it to a constant 'value2'. This shows how to interact with external object properties.

LANGUAGE: javascript
CODE:
const value2 = externalObject.propertyWithGetter;

----------------------------------------

TITLE: Creating Next.js App with Contentlayer using pnpm
DESCRIPTION: This command uses create-next-app to bootstrap a Next.js project with Contentlayer integration using pnpm.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-contentlayer with-contentlayer-app

----------------------------------------

TITLE: Spawning Node.js Processes with Dynamic Arguments
DESCRIPTION: These lines show examples of spawning Node.js processes using child_process.spawnSync() with various combinations of dynamic arguments, which could lead to unexpected behavior or security issues.

LANGUAGE: JavaScript
CODE:
child_process.spawnSync("node", unknown);
child_process.spawnSync("node", [unknown, unknown]);

----------------------------------------

TITLE: Logging and Unused Variable in Next.js
DESCRIPTION: This snippet demonstrates logging to the console and manipulating a variable that is not used elsewhere. It shows how to use console.log() for debugging and how unused variables might be handled in a Next.js environment.

LANGUAGE: javascript
CODE:
console.log(foobarCopy);
foobarCopy += "Unused";

----------------------------------------

TITLE: Markdown Front Matter Configuration
DESCRIPTION: Front matter metadata configuration for the Next.js version 14 upgrade documentation page, specifying the title, description, and source path.

LANGUAGE: markdown
CODE:
---
title: Version 14
description: Upgrade your Next.js Application from Version 13 to 14.
source: app/building-your-application/upgrading/version-14
---

----------------------------------------

TITLE: Installing Next.js Application with Realm Web SDK using NPX
DESCRIPTION: Command to create a new Next.js application with Realm Web SDK integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-realm-web with-realm-web-app

----------------------------------------

TITLE: Setting Edge Runtime for Next.js API Route
DESCRIPTION: Exports a runtime constant set to 'edge', indicating that this API route should use the Edge Runtime environment.

LANGUAGE: javascript
CODE:
export const runtime = "edge";

----------------------------------------

TITLE: Configuring Umbraco Delivery API Settings
DESCRIPTION: JSON configuration for enabling the Umbraco Delivery API with optional API key for preview functionality

LANGUAGE: json
CODE:
  "Umbraco": {
    "CMS": {
      "DeliveryApi": {
        "Enabled": true,
        "ApiKey": "my-secret-api-key"
      },
      ....


----------------------------------------

TITLE: Starting Next.js Server for Benchmarking
DESCRIPTION: Command to start the Next.js server before running benchmark tests

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Running Tests with Yarn
DESCRIPTION: This command runs the Jest tests in a Next.js project using Yarn.

LANGUAGE: bash
CODE:
yarn test

----------------------------------------

TITLE: Starting Development Server with Yarn
DESCRIPTION: Commands to install dependencies and start the Next.js development server using Yarn.

LANGUAGE: bash
CODE:
yarn install
yarn dev

----------------------------------------

TITLE: Installing Sharp with pnpm
DESCRIPTION: Command to install Sharp package using pnpm package manager for Next.js image optimization

LANGUAGE: bash
CODE:
pnpm add sharp

----------------------------------------

TITLE: Clearing Cookies with NextRequest
DESCRIPTION: Shows how to remove all cookies using the cookies.clear() method. Removes the Set-Cookie header from the request.

LANGUAGE: typescript
CODE:
request.cookies.clear()

----------------------------------------

TITLE: Creating Next.js Electron App with pnpm
DESCRIPTION: Command to create a new Next.js Electron application using pnpm and create-next-app. This sets up the project with the 'with-electron' example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-electron with-electron-app

----------------------------------------

TITLE: Querying GraphQL Data with TypeScript in Next.js
DESCRIPTION: This snippet demonstrates how to use the Apollo Client's useQuery hook with TypeScript in a Next.js component. It shows type-safe access to GraphQL data.

LANGUAGE: tsx
CODE:
import { useQuery } from "@apollo/client";
import { ViewerDocument } from "lib/graphql-operations";

const News = () => {
  // Typed already️⚡️
  const {
    data: { viewer },
  } = useQuery(ViewerDocument);

  return <div>{viewer.name}</div>;
};

----------------------------------------

TITLE: Creating Next.js App with Reactstrap using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with Reactstrap integration. It specifies the example template and names the project 'with-reactstrap-app'.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-reactstrap with-reactstrap-app

----------------------------------------

TITLE: Creating Next.js TypeScript App with Yarn
DESCRIPTION: Command to create a new Next.js application with TypeScript using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-typescript with-typescript-app

----------------------------------------

TITLE: Creating Next.js App with Stitches using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with Stitches integration. It specifies the example template and the output directory name.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-stitches with-stitches-app

----------------------------------------

TITLE: Example Scenario Implementation
DESCRIPTION: Complete example showing how to implement a scenario with multiple properties and values. Demonstrates property combinations and execution.

LANGUAGE: javascript
CODE:
import { describe } from "devlow-bench";

describe(
  "my scenario",
  {
    myProperty: [1, 2, 3],
    myOtherProperty: true,
  },
  async ({ myProperty, myOtherProperty }) => {
    console.log(myProperty, myOtherProperty);
  }
);

----------------------------------------

TITLE: Initializing Next.js Project with npm for GitHub Pages Deployment
DESCRIPTION: Command to create a new Next.js project using npx create-next-app, specifically for GitHub Pages deployment.

LANGUAGE: bash
CODE:
npx create-next-app --example github-pages github-pages-app

----------------------------------------

TITLE: Production Module Code
DESCRIPTION: Complete module code for production, identical to development version

LANGUAGE: javascript
CODE:
a = ()=>{};
function a() {}
console.log(a);
"module evaluation";
export { a as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

----------------------------------------

TITLE: Installing Next.js WordPress Example with yarn
DESCRIPTION: Command to create a new Next.js application using the WordPress CMS example template with yarn.

LANGUAGE: bash
CODE:
yarn create next-app --example cms-wordpress cms-wordpress-app

----------------------------------------

TITLE: Creating Next.js Project with MSW using NPX
DESCRIPTION: Command to bootstrap a new Next.js project with MSW integration using create-next-app with NPX

LANGUAGE: bash
CODE:
npx create-next-app --example with-msw with-msw-app

----------------------------------------

TITLE: Publishing Stable Next.js Release
DESCRIPTION: Command for repository maintainers to publish a new stable version. Prompts for version type (major, minor, or patch).

LANGUAGE: bash
CODE:
pnpm publish-stable

----------------------------------------

TITLE: Running Jest Tests with Yarn
DESCRIPTION: Executes Jest tests in the Next.js project using Yarn test command.

LANGUAGE: bash
CODE:
yarn test

----------------------------------------

TITLE: Creating Next.js App with Orbit Components using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with Orbit components integration. It specifies the example template and the output directory name.

LANGUAGE: bash
CODE:
yarn create next-app --example with-orbit-components with-orbit-components-app

----------------------------------------

TITLE: Exporting RouteKind in Production Mode
DESCRIPTION: This snippet demonstrates how RouteKind is exported in production mode using TurboPack's module system.

LANGUAGE: javascript
CODE:
export { RouteKind } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export RouteKind"
};

----------------------------------------

TITLE: Invalid Dynamic Config Modification in Next.js
DESCRIPTION: Examples showing incorrect usage of dynamic config modification and expressions.

LANGUAGE: javascript
CODE:
export const config = {}
// `config.amp` is defined after `config` is exported
config.amp = true

// `config.amp` contains a dynamic expression
export const config = {
  amp: 1 + 1 > 2,
}

----------------------------------------

TITLE: Creating Next.js CSS App with pnpm
DESCRIPTION: This command uses pnpm to set up a new Next.js project with CSS support. It specifies the example template and the project name.

LANGUAGE: bash
CODE:
pnpm create next-app --example next-css next-css-app

----------------------------------------

TITLE: Dynamic Process Execution and Module Loading in Node.js
DESCRIPTION: Demonstrates multiple patterns of dynamic execution including child_process.spawnSync with dynamic arguments, dynamic require statements, and dynamic imports. The code shows potential security concerns with using random values as arguments and paths.

LANGUAGE: javascript
CODE:
const unknown = Math.random();

child_process.spawnSync(unknown);
child_process.spawnSync("node", unknown);
child_process.spawnSync("node", [unknown, unknown]);

require(unknown);

import(unknown);

----------------------------------------

TITLE: Installing Next.js with Vitest using npx
DESCRIPTION: Command to create a new Next.js application with Vitest integration using npx create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example with-vitest with-vitest-app

----------------------------------------

TITLE: Basic Variable Assignment in JavaScript
DESCRIPTION: Simple assignment statement setting variable 'a' to value 1

LANGUAGE: javascript
CODE:
a = 1;

----------------------------------------

TITLE: Creating Next.js App with Basic Export using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js project with basic export configuration. It specifies the example to use and the name of the new application.

LANGUAGE: bash
CODE:
yarn create next-app --example basic-export basic-export-app

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Commands to start the Next.js development server with Relay Modern integration

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev

----------------------------------------

TITLE: Initializing a Next.js Project with create-next-app
DESCRIPTION: This command uses npx to run create-next-app, which sets up a new Next.js project. It prompts the user for various configuration options during setup.

LANGUAGE: bash
CODE:
npx create-next-app@latest

----------------------------------------

TITLE: Running Jest Tests with NPM
DESCRIPTION: Executes Jest tests in the Next.js project using NPM test command.

LANGUAGE: bash
CODE:
npm test

----------------------------------------

TITLE: Starting Development Server with NPM
DESCRIPTION: Commands to install dependencies and start the Next.js development server using NPM.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Creating Next.js TypeScript App with pnpm
DESCRIPTION: Command to create a new Next.js application with TypeScript using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-typescript with-typescript-app

----------------------------------------

TITLE: Installing Next.js Project with Yarn
DESCRIPTION: Creates a new Next.js project using Yarn's create next-app command with the hello-world example template.

LANGUAGE: bash
CODE:
yarn create next-app --example hello-world hello-world-app

----------------------------------------

TITLE: Configuring Website URL for Sitemap Generation
DESCRIPTION: This environment variable setting in the .env file is used to specify the domain for the sitemap.xml generation.

LANGUAGE: bash
CODE:
# Used to add the domain to sitemap.xml, replace it with a real domain in production
WEBSITE_URL=https://my-domain.com

----------------------------------------

TITLE: Copying Environment Variables Template for Cloudflare Turnstile
DESCRIPTION: Command to copy the environment variables template file for configuring Cloudflare Turnstile in the Next.js project.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Initializing Turbopack in Next.js (JavaScript)
DESCRIPTION: This snippet initializes the Turbopack object on the process global. It sets up an empty object for Turbopack configuration in a Next.js environment.

LANGUAGE: javascript
CODE:
process.turbopack = {};

----------------------------------------

TITLE: Defining Web Crawler Access Rules in robots.txt
DESCRIPTION: Configuration for web crawlers specifying which paths are allowed and disallowed for crawling. The file includes comments indicating it should not be triggered from a non-root app directory.

LANGUAGE: robots.txt
CODE:
# This robots.txt not in root app dir should never be triggered
User-Agent: *
Disallow:

Disallow: /pocket
Allow: /blog/*

----------------------------------------

TITLE: Creating Next.js App with Sitecore XM Cloud Template using Yarn
DESCRIPTION: Command to create a new Next.js application using the Sitecore XM Cloud template with Yarn. This alternative to NPX sets up the same project structure for Sitecore integration.

LANGUAGE: bash
CODE:
yarn create next-app --example cms-sitecore-xmcloud cms-sitecore-xmcloud-app

----------------------------------------

TITLE: Stream Module Import
DESCRIPTION: Imports the Node.js native stream module for stream handling functionality.

LANGUAGE: javascript
CODE:
import Stream from 'node:stream';

----------------------------------------

TITLE: Creating Next.js App with Styletron using PNPM
DESCRIPTION: This command uses PNPM to initialize a new Next.js project with Styletron integration.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-styletron with-styletron-app

----------------------------------------

TITLE: Using Context Provider for Async Data in Next.js Page
DESCRIPTION: This example demonstrates how to use the BlogProvider in a Next.js page component. It creates a promise for fetching blog data and passes it to the provider.

LANGUAGE: tsx
CODE:
import { BlogProvider } from './context'

export default function Page() {
  const blogPromise = fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )

  return (
    <BlogProvider blogPromise={blogPromise}>
      <BlogPosts />
    </BlogProvider>
  )
}

----------------------------------------

TITLE: Updating Snapshot Tests for turbopack-ecmascript in Rust
DESCRIPTION: This command runs the test suite for turbopack-ecmascript and updates the snapshot tests. It uses the UPDATE environment variable to trigger the snapshot update process.

LANGUAGE: sh
CODE:
UPDATE=1 cargo test -p turbopack-ecmascript

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers. The server can be started using npm, yarn, pnpm, or bun.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Installing Next.js with RBX and Bulma Pro using NPX
DESCRIPTION: Command to create a new Next.js application with RBX and Bulma Pro template using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-rbx-bulma-pro with-rbx-bulma-pro-app

----------------------------------------

TITLE: Creating Next.js App with Custom Server using NPX
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with a custom server configuration using npx.

LANGUAGE: bash
CODE:
npx create-next-app --example custom-server custom-server-app

----------------------------------------

TITLE: Extracting Tag from URL in Next.js
DESCRIPTION: This snippet defines a TagName component that uses Next.js's useRouter hook to extract the 'tag' query parameter from the URL. It returns the tag value or null if not present.

LANGUAGE: JavaScript
CODE:
import { useRouter } from "next/router";

export const TagName = () => {
  const { tag } = useRouter().query;
  return tag || null;
};

----------------------------------------

TITLE: Creating Next.js Project with Jest and Babel using NPX
DESCRIPTION: Initializes a new Next.js project with Jest and Babel configuration using NPX create-next-app command.

LANGUAGE: bash
CODE:
npx create-next-app --example with-jest-babel with-jest-babel-app

----------------------------------------

TITLE: Installing Next.js with Axiom using npx
DESCRIPTION: Command to create a new Next.js application with Axiom integration using npx create-next-app command.

LANGUAGE: bash
CODE:
npx create-next-app --example with-axiom with-axiom-app

----------------------------------------

TITLE: Draft Mode Test Implementation in TypeScript
DESCRIPTION: Simple test implementation of a Draft Mode API route that enables draft mode and returns a confirmation message

LANGUAGE: typescript
CODE:
export default function handler(req, res) {
  res.setDraftMode({ enable: true })
  res.end('Draft mode is enabled')
}

----------------------------------------

TITLE: Complex Redirecting with NextResponse in TypeScript
DESCRIPTION: Demonstrates a more complex redirect scenario where the URL is modified before redirecting, including adding search parameters.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'

// Given an incoming request...
const loginUrl = new URL('/login', request.url)
// Add ?from=/incoming-url to the /login URL
loginUrl.searchParams.set('from', request.nextUrl.pathname)
// And redirect to the new URL
return NextResponse.redirect(loginUrl)

----------------------------------------

TITLE: Creating Next.js App with GTM Template using Yarn
DESCRIPTION: Command to create a new Next.js application with Google Tag Manager integration using Yarn

LANGUAGE: bash
CODE:
yarn create next-app --example with-google-tag-manager with-google-tag-manager-app

----------------------------------------

TITLE: Installing with NPX
DESCRIPTION: Command to create a new Next.js application with rate limiting using npx create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example api-routes-rate-limit api-routes-rate-limit-app

----------------------------------------

TITLE: Correct Usage of href in Next.js Link Component
DESCRIPTION: This code snippet shows the correct way to use href in the Next.js Link component by replacing the dynamic part with a direct path, which resolves the 'Dynamic href is not supported in the App Router' error.

LANGUAGE: jsx
CODE:
<Link href="/route/1">link</Link>

----------------------------------------

TITLE: Installing Next.js Portal Example with Yarn
DESCRIPTION: Command to create a new Next.js application with Portals example using Yarn create next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-portals with-portals-app

----------------------------------------

TITLE: Creating Next.js App with Polyfills using pnpm
DESCRIPTION: This command uses pnpm to initialize a new Next.js project with polyfills support.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-polyfills with-polyfills-app

----------------------------------------

TITLE: Initializing Route-as-Modal Next.js Project with Yarn
DESCRIPTION: Command to create a new Next.js project using the route-as-modal example template with Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-route-as-modal with-route-as-modal-app

----------------------------------------

TITLE: Defining Next.js Blog Post Frontmatter in Markdown
DESCRIPTION: This code snippet defines the frontmatter for a Next.js blog post using YAML syntax within Markdown. It specifies the title, excerpt, and publication date for the post.

LANGUAGE: markdown
CODE:
---
title: "The Riders of Rohan"
excerpt: "Aragorn, Legolas, and Gimli follow the trail of the Orcs and find
several clues as to what happened with Merry and Pippin."
date: "2021-02-01"
---

----------------------------------------

TITLE: Implementing fillPool Function for Nanoid
DESCRIPTION: Defines the fillPool function to manage and refill the random byte pool used for ID generation.

LANGUAGE: javascript
CODE:
let fillPool = (bytes)=>{
    if (!pool || pool.length < bytes) {
        pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER);
        crypto.randomFillSync(pool);
        poolOffset = 0;
    } else if (poolOffset + bytes > pool.length) {
        crypto.randomFillSync(pool);
        poolOffset = 0;
    }
    poolOffset += bytes;
};

----------------------------------------

TITLE: Installing Next.js with Plausible using Yarn
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with Plausible integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-plausible with-plausible-app

----------------------------------------

TITLE: Querying Actor-Director Relationships in Neo4j
DESCRIPTION: This Cypher query retrieves relationships between an actor (Tom Hanks), the movies he acted in, and the directors of those movies, limited to 10 results.

LANGUAGE: cypher
CODE:
WITH TomH as a
MATCH (a)-[:ACTED_IN]->(m)<-[:DIRECTED]-(d) RETURN a,m,d LIMIT 10;

----------------------------------------

TITLE: Importing and Using Next.js Image Component in Markdown
DESCRIPTION: This snippet demonstrates how to import and use the Next.js Image component within a markdown file. It showcases the integration of JSX syntax with markdown content, allowing for optimized image rendering in Next.js applications.

LANGUAGE: javascript
CODE:
import Image from 'next/image'

# Title

This is a markdown page

<Image src="/test.jpg" alt="Next.js Logo" width={180} height={37} />

----------------------------------------

TITLE: Installing React GA4 Project with NPX
DESCRIPTION: Command to create a new Next.js application with react-ga4 integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-react-ga4 with-react-ga-app

----------------------------------------

TITLE: Creating a Second Set of Interdependent JavaScript Functions
DESCRIPTION: This snippet defines another set of three interdependent functions (c2_1, c2_2, c2_3) that call each other and use the previously defined d3 function. These functions also demonstrate circular dependencies.

LANGUAGE: javascript
CODE:
function c2_1() {
    return c2_2(d3);
}

export function c2_2() {
    return c2_3();
}

function c2_3() {
    return c2_1();
}

----------------------------------------

TITLE: Configuring Webpack Resolve Aliases in next.config.js
DESCRIPTION: Demonstrates the correct way to extend webpack's resolve.alias configuration in Next.js without breaking internal aliases. This approach preserves Next.js' built-in aliases while allowing custom alias additions.

LANGUAGE: javascript
CODE:
webpack(config) {
  config.resolve.alias = {
    ...config.resolve.alias,
    // your aliases
  }
}

----------------------------------------

TITLE: Creating Next.js App with pnpm for Bug Reproduction
DESCRIPTION: This command uses pnpm to create a new Next.js app using the reproduction template. It provides another package manager option for setting up a bug reproduction environment.

LANGUAGE: bash
CODE:
pnpm create next-app --example reproduction-template reproduction-app

----------------------------------------

TITLE: Incorrect Usage of createContext in Server Component
DESCRIPTION: Example showing incorrect implementation of createContext in a Server Component that will cause an error.

LANGUAGE: jsx
CODE:
import { createContext } from 'react'

const Context = createContext()

----------------------------------------

TITLE: Creating Next.js App with Chakra UI using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with Chakra UI integration. It utilizes the 'create next-app' command with a specific example template.

LANGUAGE: bash
CODE:
yarn create next-app --example with-chakra-ui with-chakra-ui-app

----------------------------------------

TITLE: Creating Next.js Project with Jotai using Yarn
DESCRIPTION: Command to create a new Next.js project with Jotai integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-jotai with-jotai-app

----------------------------------------

TITLE: Creating Next.js Project with MSW using PNPM
DESCRIPTION: Command to bootstrap a new Next.js project with MSW integration using create-next-app with PNPM

LANGUAGE: bash
CODE:
pnpm create next-app --example with-msw with-msw-app

----------------------------------------

TITLE: Creating Next.js App with Internationalized Routing using Yarn
DESCRIPTION: Command to create a new Next.js application with internationalized routing template using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example i18n-routing i18n-routing-app

----------------------------------------

TITLE: Initializing Route-as-Modal Next.js Project with PNPM
DESCRIPTION: Command to create a new Next.js project using the route-as-modal example template with PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-route-as-modal with-route-as-modal-app

----------------------------------------

TITLE: Creating Next.js App with Passport and next-connect using npx
DESCRIPTION: Command to bootstrap a new Next.js application with Passport and next-connect authentication using npx and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-passport-and-next-connect with-passport-and-next-connect-app

----------------------------------------

TITLE: Installing Next.js Contentful Blog with NPM
DESCRIPTION: Command to create a new Next.js project using the Contentful CMS template with NPM package manager.

LANGUAGE: bash
CODE:
npx create-next-app --example cms-contentful cms-contentful-app

----------------------------------------

TITLE: Creating Next.js App with StencilJS using PNPM
DESCRIPTION: Command to create a new Next.js application with StencilJS integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-stencil with-stencil-app

----------------------------------------

TITLE: Creating Next.js App with React Intl Using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with React Intl integration using the create-next-app tool.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-react-intl with-react-intl-app

----------------------------------------

TITLE: Implementing Right Arrow SVG Component in React
DESCRIPTION: This snippet defines a React component that renders an SVG right arrow icon. The component is used throughout the page to indicate external links.

LANGUAGE: JSX
CODE:
export const RightArrow = () => (
  <svg
    viewBox="0 0 14 14"
    width="8px"
    height="14px"
    style={{
      marginLeft: "4px",
      display: "inline-block",
      shapeRendering: "inherit",
      verticalAlign: "middle",
      fill: "currentColor",
      "path fill": "currentColor",
    }}
  >
    <path d="m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z" />
  </svg>
);

----------------------------------------

TITLE: Creating Next.js App with React Native Web using NPX
DESCRIPTION: Command to initialize a new Next.js application with React Native Web integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-react-native-web with-react-native-web-app

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 by default.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Declaring MDX Page in Next.js
DESCRIPTION: A simple MDX file header showing basic page structure for a Next.js MDX page.

LANGUAGE: markdown
CODE:
# I'm a MDX page

----------------------------------------

TITLE: Installing Server Actions Upload Example with NPX
DESCRIPTION: Creates a new Next.js application with server actions upload functionality using NPX.

LANGUAGE: bash
CODE:
npx create-next-app --example server-actions-upload server-actions-upload-app

----------------------------------------

TITLE: Importing Module Upper Function
DESCRIPTION: Imports the 'upper' function from an external module

LANGUAGE: javascript
CODE:
import { upper } from "module";

----------------------------------------

TITLE: Installing Next.js with React Toolbox using NPX
DESCRIPTION: Command to create a new Next.js application with React Toolbox integration using npx create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-react-toolbox with-react-toolbox-app

----------------------------------------

TITLE: Caching Data Access in Next.js
DESCRIPTION: This snippet demonstrates how to cache data access using the 'use cache' directive in Next.js. It includes setting cache tags and life for revalidation purposes.

LANGUAGE: jsx
CODE:
async function getRecentArticles() {
  "use cache"
  // This cache can be revalidated by webhook or server action
  // when you call revalidateTag("articles")
  cacheTag("articles")
  // This cache will revalidate after an hour even if no explicit
  // revalidate instruction was received
  cacheLife('hours')
  return db.query(...)
}

export default async function Page() {
  const articles = await getRecentArticles(token);
  return <ArticleList articles={articles}>
}

----------------------------------------

TITLE: Identifying React StrictMode with react-is
DESCRIPTION: Shows how to use react-is to check if a component is a React StrictMode component and determine its type.

LANGUAGE: javascript
CODE:
import React from "react";
import * as ReactIs from 'react-is';

ReactIs.isStrictMode(<React.StrictMode />); // true
ReactIs.typeOf(<React.StrictMode />) === ReactIs.StrictMode; // true

----------------------------------------

TITLE: Creating Next.js App with Middleware Matcher using Yarn
DESCRIPTION: Command to create a new Next.js application with middleware matcher example using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example middleware-matcher middleware-matcher-app

----------------------------------------

TITLE: Creating Next.js App with Legacy Image Component using npx
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js application with the legacy image component example.

LANGUAGE: bash
CODE:
npx create-next-app --example image-legacy-component image-app

----------------------------------------

TITLE: Injecting Styles in Next.js Dev Overlay
DESCRIPTION: Example of injecting component styles into the dev overlay using the ComponentStyles function and css() util for minification.

LANGUAGE: tsx
CODE:
import { COMPONENT_NAME_STYLES } from './component'

export function ComponentStyles() {
  return (
    <style>
      {css`
        // ...
        ${COMPONENT_NAME_STYLES}
      `}
    </style
  )
}

----------------------------------------

TITLE: Creating Next.js App with StencilJS using NPX
DESCRIPTION: Command to create a new Next.js application with StencilJS integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-stencil with-stencil-app

----------------------------------------

TITLE: Creating Next.js App with Prepr CMS Template (yarn)
DESCRIPTION: Command to create a new Next.js application using the Prepr CMS template with Yarn.

LANGUAGE: bash
CODE:
yarn create next-app --example cms-prepr cms-prepr-app

----------------------------------------

TITLE: Original Module Export Declaration
DESCRIPTION: Initial export statement that re-exports the 'cat' import as 'fakeCat' from a local library module.

LANGUAGE: javascript
CODE:
export { cat as fakeCat } from "./lib";

----------------------------------------

TITLE: Using cacheLife Profile in Components (JavaScript)
DESCRIPTION: Implementation example showing how to use a custom cache profile in a JavaScript component or function using the cacheLife directive and function.

LANGUAGE: javascript
CODE:
import { unstable_cacheLife as cacheLife } from 'next/cache'

export async function getCachedData() {
  'use cache'
  cacheLife('blog')
  const data = await fetch('/api/data')
  return data
}

----------------------------------------

TITLE: Creating Next.js App with Rematch Example using Yarn
DESCRIPTION: Command to create a new Next.js application with the Rematch example using Yarn.

LANGUAGE: bash
CODE:
yarn create next-app --example with-rematch with-rematch-app

----------------------------------------

TITLE: Creating Next.js App with Couchbase Integration using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js project with Couchbase integration. It sets up a new directory named 'with-couchbase-app' with the necessary project structure and dependencies.

LANGUAGE: bash
CODE:
yarn create next-app --example with-couchbase with-couchbase-app

----------------------------------------

TITLE: Basic Link Usage in Next.js App Router
DESCRIPTION: Demonstrates how to import and use the Link component in a Next.js application using the App Router.

LANGUAGE: tsx
CODE:
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}

LANGUAGE: jsx
CODE:
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}

----------------------------------------

TITLE: Creating Next.js App with GraphQL Gateway using PNPM
DESCRIPTION: This bash command uses create-next-app with pnpm to bootstrap a new Next.js application with the GraphQL Gateway example.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-graphql-gateway with-graphql-gateway-app

----------------------------------------

TITLE: Initialize Next.js Project with Yarn
DESCRIPTION: Command to create a new Next.js project using the dotCMS template with Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example cms-dotcms cms-dotcms-app

----------------------------------------

TITLE: Installing Next.js with Plausible using npm
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with Plausible integration using npm.

LANGUAGE: bash
CODE:
npx create-next-app --example with-plausible with-plausible-app

----------------------------------------

TITLE: Creating Next.js App with ESLint using pnpm
DESCRIPTION: Command to bootstrap a Next.js application with ESLint configuration using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-eslint with-eslint-app

----------------------------------------

TITLE: Creating Next.js Blog App with NPM
DESCRIPTION: Command to bootstrap a new Next.js blog starter application using NPM's create-next-app command

LANGUAGE: bash
CODE:
npx create-next-app --example blog-starter blog-starter-app

----------------------------------------

TITLE: Creating Next.js App with Inngest Example using PNPM
DESCRIPTION: Command to create a new Next.js application with the Inngest example using PNPM's create next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example inngest inngest-app

----------------------------------------

TITLE: Installing Next.js with Meilisearch using NPX
DESCRIPTION: Command to create a new Next.js application with Meilisearch integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-meilisearch with-meilisearch-app

----------------------------------------

TITLE: Integrating Rspack with next-compose-plugins
DESCRIPTION: Advanced configuration showing how to use the Rspack plugin with next-compose-plugins for multiple plugin integration.

LANGUAGE: javascript
CODE:
const withPlugins = require('next-compose-plugins')
const withRspack = require('@next/plugin-rspack')

module.exports = withPlugins([
  [withRspack],
  // your other plugins here
])

----------------------------------------

TITLE: Building Native Binary for Next.js Integration
DESCRIPTION: Command to build the native binary that integrates with Next.js, using pnpm as the package manager.

LANGUAGE: sh
CODE:
pnpm build-native

----------------------------------------

TITLE: Clearing Redis Cache via CLI
DESCRIPTION: This command sequence demonstrates how to clear the Redis cache using the Redis CLI within a Docker container.

LANGUAGE: bash
CODE:
docker exec -it redis-stack redis-cli
127.0.0.1:6379> flushall
OK

----------------------------------------

TITLE: Variable Declaration - Constant b
DESCRIPTION: Declares a constant variable 'b' with string value 'b'

LANGUAGE: javascript
CODE:
const b = "b";

----------------------------------------

TITLE: Configuring Babel Preset for Next.js
DESCRIPTION: This code snippet shows how to configure a .babelrc file to use the Next.js Babel preset. This can be used as an alternative if SWC continues to fail to load.

LANGUAGE: json
CODE:
{
  "presets": ["next/babel"]
}

----------------------------------------

TITLE: Rendering Simple Text in Next.js (JSX)
DESCRIPTION: This code snippet defines a basic Next.js page component that renders 'hello world' followed by a plus sign. It demonstrates the simplest possible Next.js page structure.

LANGUAGE: JSX
CODE:
hello world +

----------------------------------------

TITLE: Using next/head Component for Page Metadata in Next.js (JSX)
DESCRIPTION: This snippet demonstrates the correct way to include page-level metadata in a Next.js application using the next/head component. It shows how to import the component and use it to set a page title and viewport meta tag.

LANGUAGE: jsx
CODE:
import Head from 'next/head'

function Index() {
  return (
    <>
      <Head>
        <title>My page title</title>
        <meta name="viewport" content="initial-scale=1.0, width=device-width" />
      </Head>
    </>
  )
}

export default Index

----------------------------------------

TITLE: Installing AMP Example with PNPM
DESCRIPTION: Command to create a new Next.js application with AMP integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example amp amp-app

----------------------------------------

TITLE: Internal Function Definition
DESCRIPTION: Defines an internal helper function that uses imported upper function

LANGUAGE: javascript
CODE:
function internal() {
    return upper(foobar);
}

----------------------------------------

TITLE: Docker Cleanup Commands
DESCRIPTION: Utility commands for stopping containers and cleaning up Docker resources.

LANGUAGE: bash
CODE:
# Stop all running containers
docker kill $(docker ps -aq) && docker rm $(docker ps -aq)

# Free space
docker system prune -af --volumes

----------------------------------------

TITLE: Creating Next.js MDX App with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with MDX support. It utilizes the create next-app command and specifies the MDX example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example mdx mdx-app

----------------------------------------

TITLE: Installing Vercel Functions Package
DESCRIPTION: Command to install the @vercel/functions package using NPM. This package enables serverless function capabilities in Next.js projects deployed on Vercel.

LANGUAGE: shell
CODE:
@vercel/functions

----------------------------------------

TITLE: Creating Next.js App with Slate using npx
DESCRIPTION: Command to create a new Next.js application with Slate.js integration using npx and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-slate with-slate-app

----------------------------------------

TITLE: Creating Next.js App with Prepr CMS Template (npm)
DESCRIPTION: Command to create a new Next.js application using the Prepr CMS template with npm.

LANGUAGE: bash
CODE:
npx create-next-app --example cms-prepr cms-prepr-app

----------------------------------------

TITLE: Creating Next.js Dynamic Routing App with Yarn
DESCRIPTION: Command to create a new Next.js application with dynamic routing template using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example dynamic-routing dynamic-routing-app

----------------------------------------

TITLE: Creating Next.js Prismic App with NPX
DESCRIPTION: Command to bootstrap a new Next.js application with Prismic CMS integration using npx create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example cms-prismic cms-prismic-app

----------------------------------------

TITLE: Creating Next.js Project with Lingui using Yarn
DESCRIPTION: Command to create a new Next.js project with Lingui integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-lingui with-lingui-app

----------------------------------------

TITLE: Creating Next.js Project with Rosetta i18n Using Yarn
DESCRIPTION: Command to create a new Next.js project with Rosetta internationalization using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-i18n-rosetta with-i18n-rosetta-app

----------------------------------------

TITLE: Creating Next.js App with Styled Components using yarn
DESCRIPTION: This command uses yarn to create a new Next.js project with styled-components integration.

LANGUAGE: bash
CODE:
yarn create next-app --example with-styled-components with-styled-components-app

----------------------------------------

TITLE: Markdown Frontmatter Configuration for CSS-in-JS Documentation
DESCRIPTION: YAML frontmatter configuration block defining the title, description, and source path for the CSS-in-JS documentation page.

LANGUAGE: markdown
CODE:
---
title: CSS-in-JS
description: Use CSS-in-JS libraries with Next.js
source: app/building-your-application/styling/css-in-js
---

----------------------------------------

TITLE: Embedding YouTube Video with @next/third-parties in Next.js
DESCRIPTION: This snippet demonstrates how to use the YouTubeEmbed component from @next/third-parties/google to efficiently load and display a YouTube video in a Next.js page. The component requires a video ID and allows setting the height of the embed.

LANGUAGE: javascript
CODE:
import { YouTubeEmbed } from '@next/third-parties/google'

export default function Page() {
  return <YouTubeEmbed videoid="ogfYd705cRs" height={400} />
}

----------------------------------------

TITLE: Starting Next.js Development Server - Yarn
DESCRIPTION: Commands to install dependencies and start the Next.js development server using yarn

LANGUAGE: bash
CODE:
yarn
yarn dev

----------------------------------------

TITLE: Initializing and Exporting Array - Basic Module Setup
DESCRIPTION: Creates and exports an empty array named 'order'. This serves as a base module that other modules will import and modify.

LANGUAGE: javascript
CODE:
export const order = [];

----------------------------------------

TITLE: Implementing Fetch Patch Function
DESCRIPTION: Defines a patchFetch function that wraps the original fetch implementation with server hooks and work async storage context.

LANGUAGE: javascript
CODE:
function patchFetch() {
    return _patchFetch({
        serverHooks,
        workAsyncStorage
    });
}

----------------------------------------

TITLE: Incorrect Usage of next/script in next/head
DESCRIPTION: This code snippet demonstrates the incorrect placement of the Script component inside the Head component. This usage is not recommended in Next.js.

LANGUAGE: jsx
CODE:
import Script from 'next/script'
import Head from 'next/head'

export default function Index() {
  return (
    <Head>
      <title>Next.js</title>
      <Script src="/my-script.js" />
    </Head>
  )
}

----------------------------------------

TITLE: Variable Declarations and Modifications
DESCRIPTION: Series of variable declarations and string concatenation operations

LANGUAGE: javascript
CODE:
export let foobar = "foo";

export const foo = foobar;

const bar = "bar";

foobar += bar;

let foobarCopy = foobar;

foobar += "foo";

----------------------------------------

TITLE: Creating Next.js App with Contentlayer using npm
DESCRIPTION: This command uses create-next-app to bootstrap a Next.js project with Contentlayer integration using npm.

LANGUAGE: bash
CODE:
npx create-next-app --example with-contentlayer with-contentlayer-app

----------------------------------------

TITLE: Creating Next.js MDX App with Bun
DESCRIPTION: This command uses Bun to create a new Next.js application with MDX support. It employs the create-next-app command through bunx and specifies the MDX example template.

LANGUAGE: bash
CODE:
bunx create-next-app --example mdx mdx-app

----------------------------------------

TITLE: Creating Next.js App with Slate using pnpm
DESCRIPTION: Command to create a new Next.js application with Slate.js integration using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-slate with-slate-app

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to copy the example environment variables file to create a local configuration. This step is crucial for setting up the project with the correct Plasmic credentials.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Defining and Exporting Simple JavaScript Functions
DESCRIPTION: This snippet defines three simple JavaScript functions (d1, d2, d3) and exports them. These functions serve as dependencies for other functions in the module.

LANGUAGE: javascript
CODE:
function d1() {}
function d2() {}
function d3() {}

----------------------------------------

TITLE: Enabling Trailing Slashes in Next.js Export
DESCRIPTION: Configuration to enable trailing slashes for exported pages, which changes the output format to use index.html files in directories.

LANGUAGE: javascript
CODE:
module.exports = {
  trailingSlash: true,
}

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to install dependencies and start the Next.js development server using either npm or yarn.

LANGUAGE: bash
CODE:
npm install
npm run dev

# or

yarn install
yarn dev

----------------------------------------

TITLE: Installing Next.js with Google Analytics Template using NPX
DESCRIPTION: Command to create a new Next.js application with Google Analytics integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-google-analytics with-google-analytics-app

----------------------------------------

TITLE: Implementing Active Link with useRouter in Next.js
DESCRIPTION: Example showing how to create an ActiveLink component using the useRouter hook to style links based on the current path and handle client-side navigation.

LANGUAGE: jsx
CODE:
import { useRouter } from 'next/router'

function ActiveLink({ children, href }) {
  const router = useRouter()
  const style = {
    marginRight: 10,
    color: router.asPath === href ? 'red' : 'black',
  }

  const handleClick = (e) => {
    e.preventDefault()
    router.push(href)
  }

  return (
    <a href={href} onClick={handleClick} style={style}>
      {children}
    </a>
  )
}

export default ActiveLink

----------------------------------------

TITLE: Creating Next.js App with Cloudinary Example using npx
DESCRIPTION: This command uses npx to create a new Next.js application based on the Cloudinary example. It sets up the project structure and installs necessary dependencies.

LANGUAGE: bash
CODE:
npx create-next-app --example with-cloudinary with-cloudinary-app

----------------------------------------

TITLE: Creating Next.js App with Facebook Pixel Template using Yarn
DESCRIPTION: Command to create a new Next.js application with Facebook Pixel integration using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-facebook-pixel with-facebook-pixel-app

----------------------------------------

TITLE: Creating Next.js Project with Firebase Cloud Messaging using npx
DESCRIPTION: This command uses npx to create a new Next.js project with Firebase Cloud Messaging integration. It utilizes the 'create-next-app' tool with a specific example template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-firebase-cloud-messaging with-firebase-cloud-messaging-app

----------------------------------------

TITLE: Creating Next.js App with Zustand Example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with the Zustand example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-zustand with-zustand-app

----------------------------------------

TITLE: Creating Next.js App with Sentry Template using NPX
DESCRIPTION: This command creates a new Next.js application using the Sentry example template. It sets up the project structure and installs necessary dependencies.

LANGUAGE: bash
CODE:
npx create-next-app --example with-sentry nextjs-sentry-example

----------------------------------------

TITLE: Installing Next.js Nested Components Example with NPX
DESCRIPTION: Creates a new Next.js application with nested components structure using NPX create-next-app command.

LANGUAGE: bash
CODE:
npx create-next-app --example nested-components nested-components-app

----------------------------------------

TITLE: Running Database Seed Script
DESCRIPTION: Commands to run the seed script for populating the database with initial data using different package managers.

LANGUAGE: bash
CODE:
npm run seed

LANGUAGE: bash
CODE:
yarn seed

LANGUAGE: bash
CODE:
pnpm seed

----------------------------------------

TITLE: Installing devlow-bench via npm
DESCRIPTION: Installation command for the devlow-bench package using npm.

LANGUAGE: bash
CODE:
npm install devlow-bench

----------------------------------------

TITLE: Testing Next.js Components with Multiple Methods
DESCRIPTION: Demonstrates four different testing approaches for Next.js applications: Cheerio HTML parsing, browser testing, direct HTML rendering, and fetch requests. Uses nextTestSetup utility for test configuration and includes multiple test cases showing different testing strategies.

LANGUAGE: javascript
CODE:
import { nextTestSetup } from 'e2e-utils'

describe('{{name}}', () => {
  const { next } = nextTestSetup({
    files: __dirname,
  })

  // Recommended for tests that check HTML. Cheerio is a HTML parser that has a jQuery like API.
  it('should work using cheerio', async () => {
    const $ = await next.render$('/')
    expect($('p').text()).toBe('hello world')
  })

  // Recommended for tests that need a full browser
  it('should work using browser', async () => {
    const browser = await next.browser('/')
    expect(await browser.elementByCss('p').text()).toBe('hello world')
  })

  // In case you need the full HTML. Can also use $.html() with cheerio.
  it('should work with html', async () => {
    const html = await next.render('/')
    expect(html).toContain('hello world')
  })

  // In case you need to test the response object
  it('should work with fetch', async () => {
    const res = await next.fetch('/')
    const html = await res.text()
    expect(html).toContain('hello world')
  })
})

----------------------------------------

TITLE: Creating SuperTokens App with create-supertokens-app using Yarn
DESCRIPTION: Command to create a SuperTokens app with Next.js frontend using Yarn.

LANGUAGE: bash
CODE:
yarn create-supertokens-app@latest --frontend=next

----------------------------------------

TITLE: Implementing Google Analytics in Next.js Root Layout (JavaScript)
DESCRIPTION: This snippet shows how to add Google Analytics to all routes in a Next.js application using the App Router and JavaScript. It uses the GoogleAnalytics component from @next/third-parties/google in the root layout file.

LANGUAGE: jsx
CODE:
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}

----------------------------------------

TITLE: Module Export Configuration (Dev Part 1)
DESCRIPTION: Exports variable 'b' with TurboPack variable assertion configuration

LANGUAGE: javascript
CODE:
const b = "b";
export { b };
export { b as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

----------------------------------------

TITLE: Installing Sharp with yarn
DESCRIPTION: Command to install Sharp package using yarn package manager for Next.js image optimization

LANGUAGE: bash
CODE:
yarn add sharp

----------------------------------------

TITLE: Installing Quilljs with PNPM in Next.js
DESCRIPTION: Command to create a new Next.js application with Quilljs integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-quill-js with-quill-js-app

----------------------------------------

TITLE: Next.js Codemod Command
DESCRIPTION: Terminal command to run the next-async-request-api codemod for automated migration.

LANGUAGE: bash
CODE:
$ npx @next/codemod@canary next-async-request-api .

----------------------------------------

TITLE: Installing Server Actions Upload Example with PNPM
DESCRIPTION: Creates a new Next.js application with server actions upload functionality using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example server-actions-upload server-actions-upload-app

----------------------------------------

TITLE: Creating Next.js App with Panda CSS using NPX
DESCRIPTION: Command to create a new Next.js application with Panda CSS template using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example panda-css panda-css-app

----------------------------------------

TITLE: Creating Next.js App with Segment Analytics using pnpm
DESCRIPTION: Command to create a new Next.js application with Segment Analytics integration using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-segment-analytics with-segment-analytics-app

----------------------------------------

TITLE: Creating Next.js Project with Plasmic Integration using Yarn
DESCRIPTION: Command to create a new Next.js project with Plasmic integration using Yarn. This alternative to npm sets up the project structure and installs necessary dependencies.

LANGUAGE: bash
CODE:
yarn create next-app --example cms-plasmic cms-plasmic-app

----------------------------------------

TITLE: Installing Next.js Auth Example with NPM
DESCRIPTION: Creates a new Next.js application with authentication using NPX and create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example auth auth-app

----------------------------------------

TITLE: Creating Next.js Project with Azure Cosmos DB Example using Yarn
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with Azure Cosmos DB integration using Yarn.

LANGUAGE: bash
CODE:
yarn create next-app --example with-azure-cosmos with-azure-cosmos-app

----------------------------------------

TITLE: Creating Next.js WebAssembly Project with Yarn
DESCRIPTION: Command to create a new Next.js project with WebAssembly support using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-webassembly with-webassembly-app

----------------------------------------

TITLE: Creating New Project with Yarn
DESCRIPTION: Command to bootstrap a new project using create-next-app with Yarn.

LANGUAGE: bash
CODE:
yarn create next-app --example with-turbopack-loaders with-turbopack-loaders-app

----------------------------------------

TITLE: Creating Next.js Project with Cypress using Yarn
DESCRIPTION: Command to create a new Next.js project with Cypress testing configuration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-cypress with-cypress-app

----------------------------------------

TITLE: Initializing Client Component Loading Metrics Variables in JavaScript
DESCRIPTION: Declares and initializes three variables to track client component loading metrics: start time, total load time, and load count.

LANGUAGE: javascript
CODE:
let clientComponentLoadStart = 0;
let clientComponentLoadTimes = 0;
let clientComponentLoadCount = 0;

----------------------------------------

TITLE: Measurement Reporting Functions
DESCRIPTION: Functions for measuring and reporting performance metrics. Includes time measurements and custom value reporting with optional configuration.

LANGUAGE: javascript
CODE:
import { measureTime, reportMeasurement } from "devlow-bench";

// Measure a time
await measureTime("name of the timing", {
  /* optional options */
});

// Report some other measurement
await reportMeasurement("name of the measurement", value, unit, {
  /* optional options */
});

----------------------------------------

TITLE: Creating Next.js App with Segment Analytics using pnpm
DESCRIPTION: Command to create a new Next.js application with Segment Analytics integration using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-segment-analytics-pages-router with-segment-analytics-app

----------------------------------------

TITLE: Module Evaluation in Next.js
DESCRIPTION: This snippet represents the module evaluation phase. It's a placeholder for any code that needs to be executed when the module is evaluated.

LANGUAGE: javascript
CODE:
"module evaluation";

----------------------------------------

TITLE: Implementing Google Fonts with Optional Display in Next.js
DESCRIPTION: Demonstrates how to properly import Google Fonts in a Next.js page component using the recommended 'optional' font-display strategy. Shows integration with next/head for adding font stylesheet links with the correct display parameter.

LANGUAGE: jsx
CODE:
import Head from 'next/head'

export default function IndexPage() {
  return (
    <div>
      <Head>
        <link
          href="https://fonts.googleapis.com/css2?family=Krona+One&display=optional"
          rel="stylesheet"
        />
      </Head>
    </div>
  )
}

----------------------------------------

TITLE: Upgrading Next.js Package Version
DESCRIPTION: Command to upgrade Next.js to the latest version (>= 14.1.0) to remove the webpack build worker warning. This upgrade helps maintain compatibility with webpack build worker optimization which helps reduce memory usage during builds.

LANGUAGE: bash
CODE:
npm i next@latest

----------------------------------------

TITLE: Creating Next.js Redirects Example with Yarn
DESCRIPTION: Command to create a new Next.js application with redirects example using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example redirects redirects-app

----------------------------------------

TITLE: Creating Next.js App with React Remove Properties Example using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the react-remove-properties example. It sets up the project structure and installs necessary dependencies.

LANGUAGE: bash
CODE:
yarn create next-app --example react-remove-properties react-remove-properties-app

----------------------------------------

TITLE: Creating Next.js App with YouTube Embed Using npx
DESCRIPTION: This command uses npx to create a new Next.js application with YouTube embed functionality. It utilizes the 'with-youtube-embed' example template to set up the project structure and dependencies.

LANGUAGE: bash
CODE:
npx create-next-app --example with-youtube-embed with-youtube-embed-app

----------------------------------------

TITLE: Running Development Server
DESCRIPTION: Commands to start the Next.js development server locally.

LANGUAGE: bash
CODE:
yarn dev
# or
npm run dev

----------------------------------------

TITLE: Implementing Metadata in Root Layout
DESCRIPTION: Example of using Next.js Metadata API to manage metadata in the root layout component.

LANGUAGE: typescript
CODE:
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'React App',
  description: 'Web site created with Next.js.',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Regex Path Matching in Next.js Headers
DESCRIPTION: This snippet illustrates how to use regex path matching in Next.js header configuration. It shows how to match specific patterns in the URL path using regular expressions.

LANGUAGE: javascript
CODE:
module.exports = {
  async headers() {
    return [
      {
        source: '/blog/:post(\\d{1,})',
        headers: [
          {
            key: 'x-post',
            value: ':post',
          },
        ],
      },
    ]
  },
}

----------------------------------------

TITLE: Running Next.js in Development Mode with Yarn
DESCRIPTION: These commands install dependencies and start the Next.js development server using Yarn.

LANGUAGE: bash
CODE:
yarn install
yarn dev

----------------------------------------

TITLE: Creating Next.js App with Context API Example using npx
DESCRIPTION: Command to create a new Next.js application with the Context API example using npx and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-context-api with-context-api-app

----------------------------------------

TITLE: Implementing Error Boundary Component in Next.js (JavaScript)
DESCRIPTION: Creates a client-side error boundary component that handles runtime errors and provides a fallback UI with error logging and reset functionality. JavaScript version without type annotations.

LANGUAGE: jsx
CODE:
'use client' // Error boundaries must be Client Components

import { useEffect } from 'react'

export default function Error({ error, reset }) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error)
  }, [error])

  return (
    <div>
      <h2>Something went wrong!</h2>
      <button
        onClick={
          // Attempt to recover by trying to re-render the segment
          () => reset()
        }
      >
        Try again
      </button>
    </div>
  )
}

----------------------------------------

TITLE: Creating Next.js App with React Remove Properties Example using npx
DESCRIPTION: This command uses npx to create a new Next.js application based on the react-remove-properties example. It sets up the project structure and installs necessary dependencies.

LANGUAGE: bash
CODE:
npx create-next-app --example react-remove-properties react-remove-properties-app

----------------------------------------

TITLE: Installing Next.js Middleware Example with Yarn
DESCRIPTION: Command to create a new Next.js application with middleware example using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example middleware middleware-app

----------------------------------------

TITLE: Installing Next.js Middleware Example with NPX
DESCRIPTION: Command to create a new Next.js application with middleware example using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example middleware middleware-app

----------------------------------------

TITLE: Installing Next.js with Goober using npx
DESCRIPTION: Command to create a new Next.js application with Goober integration using npx create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example with-goober with-goober-app

----------------------------------------

TITLE: Creating Next.js App with npm for Bug Reproduction
DESCRIPTION: This command uses create-next-app with npm to bootstrap a Next.js application using the reproduction template for bug reporting purposes.

LANGUAGE: bash
CODE:
npx create-next-app --example reproduction-template-pages reproduction-app

----------------------------------------

TITLE: Installing Electron with TypeScript and Next.js Example
DESCRIPTION: Commands to bootstrap the Electron with TypeScript and Next.js example using various package managers. These commands create a new project with the necessary configuration and dependencies.

LANGUAGE: bash
CODE:
npx create-next-app --example with-electron-typescript with-electron-typescript-app

LANGUAGE: bash
CODE:
yarn create next-app --example with-electron-typescript with-electron-typescript-app

LANGUAGE: bash
CODE:
pnpm create next-app --example with-electron-typescript with-electron-typescript-app

----------------------------------------

TITLE: Declaring and Exporting Variables in Next.js
DESCRIPTION: This snippet shows the declaration of two constants 'a' and 'b', and their subsequent export. It demonstrates the basic structure of variable declaration and export in a Next.js module.

LANGUAGE: javascript
CODE:
const a = "a";

const b = "b";


----------------------------------------

TITLE: File Operations Helper
DESCRIPTION: File system helper functions for monitoring and interacting with files. Includes waiting for file existence with timeout option.

LANGUAGE: javascript
CODE:
import { waitForFile } from "devlow-bench/file";

// wait for file to exist
await waitForFile("/path/to/file", /* timeout = */ 30000);

----------------------------------------

TITLE: Installing Next.js with Reflexjs using PNPM
DESCRIPTION: Command to create a new Next.js application with Reflexjs integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-reflexjs with-reflexjs-app

----------------------------------------

TITLE: Updated User Agent Parsing in Next.js Middleware (TypeScript)
DESCRIPTION: This code snippet shows the updated method for parsing user agent information in Next.js middleware using the userAgent function from next/server. It determines the viewport based on the device type and sets it as a search parameter.

LANGUAGE: typescript
CODE:
import { NextRequest, NextResponse, userAgent } from 'next/server'

export function middleware(request: NextRequest) {
  const { device } = userAgent(request)
  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'

  request.nextUrl.searchParams.set('viewport', viewport)
  return NextResponse.rewrite(request.nextUrl)
}

----------------------------------------

TITLE: Importing GlobalThis Utility in JavaScript
DESCRIPTION: Imports the _globalThis object from the globalThis module, which is likely a custom implementation of the global object.

LANGUAGE: javascript
CODE:
import { _globalThis } from './globalThis';

----------------------------------------

TITLE: Replacing AMP Bind Syntax in JSX for Next.js
DESCRIPTION: This snippet demonstrates how to replace the problematic AMP bind syntax [prop]='something' with the JSX-compatible alternative data-amp-bind-prop='something'. This change resolves the "AMP Bind JSX Error" in Next.js projects.

LANGUAGE: JSX
CODE:
// Invalid syntax that causes the error
[prop]='something'

// Valid alternative syntax
data-amp-bind-prop='something'

----------------------------------------

TITLE: Creating Next.js Dynamic Routing App with PNPM
DESCRIPTION: Command to create a new Next.js application with dynamic routing template using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example dynamic-routing dynamic-routing-app

----------------------------------------

TITLE: Creating New Project with NPX
DESCRIPTION: Command to bootstrap a new project using create-next-app with NPX.

LANGUAGE: bash
CODE:
npx create-next-app --example with-turbopack-loaders with-turbopack-loaders-app

----------------------------------------

TITLE: Installing Next.js with Axiom using pnpm
DESCRIPTION: Command to create a new Next.js application with Axiom integration using pnpm create command.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-axiom with-axiom-app

----------------------------------------

TITLE: Creating Next.js App with SSR Caching Example using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with the ssr-caching example. It bootstraps a project named 'ssr-caching-app' using the create-next-app tool.

LANGUAGE: bash
CODE:
yarn create next-app --example ssr-caching ssr-caching-app

----------------------------------------

TITLE: Creating Next.js App with Prefetching using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with prefetching example. It utilizes the create next-app command and specifies the with-prefetching example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-prefetching with-prefetching-app

----------------------------------------

TITLE: Starting Development Server with Yarn
DESCRIPTION: Commands to install dependencies and start the Next.js development server using Yarn.

LANGUAGE: bash
CODE:
yarn install
yarn dev

----------------------------------------

TITLE: Installing Next.js Project with Temporal using Yarn
DESCRIPTION: Command to create a new Next.js project with Temporal integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-temporal next-temporal-app

----------------------------------------

TITLE: Creating Next.js App with Relay Modern using NPX
DESCRIPTION: Command to create a new Next.js application with Relay Modern template using NPX package runner

LANGUAGE: bash
CODE:
npx create-next-app --example with-relay-modern with-relay-modern-app

----------------------------------------

TITLE: Creating Next.js App with Markdoc using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with Markdoc integration. It utilizes the create-next-app package and specifies the markdoc example template.

LANGUAGE: bash
CODE:
yarn create next-app --example markdoc markdoc-app

----------------------------------------

TITLE: Installing Next.js Storyblok Blog with Yarn
DESCRIPTION: Command to create a new Next.js application with Storyblok integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example cms-storyblok cms-storyblok-app

----------------------------------------

TITLE: Creating Next.js Project with Video.js using Yarn
DESCRIPTION: Command to create a new Next.js application with Video.js integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-videojs with-videojs-app

----------------------------------------

TITLE: Initializing and Exporting Order Array in JavaScript
DESCRIPTION: Declares and exports an empty array named 'order'. This array is used throughout the module to track execution order.

LANGUAGE: javascript
CODE:
export const order = [];

----------------------------------------

TITLE: Declaring MIT License for ws in undici WebSocket frame
DESCRIPTION: This comment declares the MIT License for the ws library used in undici's WebSocket frame implementation. It credits Einar Otto Stangvik as the author.

LANGUAGE: JavaScript
CODE:
/*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */

----------------------------------------

TITLE: Creating Next.js App with React Bootstrap using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with react-bootstrap integration. It utilizes the 'with-react-bootstrap' example as a template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-react-bootstrap with-react-bootstrap-app

----------------------------------------

TITLE: Importing NextResponse from Next.js Server
DESCRIPTION: Imports the NextResponse utility from the Next.js server module. This is used to create standardized API responses.

LANGUAGE: javascript
CODE:
import { NextResponse } from "next/server";

----------------------------------------

TITLE: Invalid Next.js Link Component Implementation with Missing Route Params
DESCRIPTION: Example showing incorrect usage of the Next.js Link component where not all required dynamic route parameters are provided in the query object. This implementation will trigger an interpolation error when clicked.

LANGUAGE: jsx
CODE:
import Link from 'next/link'

export default function BlogLink() {
  return (
    <Link
      href={{
        pathname: '/blog/[post]/[comment]',
        query: { post: 'post-1' },
      }}
    >
      <a>Invalid link</a>
    </Link>
  )
}

----------------------------------------

TITLE: Creating Next.js App with Convex using NPX
DESCRIPTION: Command to bootstrap a new Next.js application with Convex integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example convex convex-app

----------------------------------------

TITLE: Running Next.js Development Server with npm
DESCRIPTION: These commands install dependencies and start the Next.js development server using npm.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Importing with Relative Path in Next.js (TSX)
DESCRIPTION: This snippet demonstrates the traditional relative import syntax in a Next.js TypeScript project. It shows how deep nesting can lead to complex import paths.

LANGUAGE: tsx
CODE:
import Button from "../../../components/button";

----------------------------------------

TITLE: Importing with Relative Path in Next.js (TSX)
DESCRIPTION: This snippet demonstrates the traditional relative import syntax in a Next.js TypeScript project. It shows how deep nesting can lead to complex import paths.

LANGUAGE: tsx
CODE:
import Button from "../../../components/button";

----------------------------------------

TITLE: Creating Next.js App with React Intl Using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with React Intl integration using the create-next-app tool.

LANGUAGE: bash
CODE:
yarn create next-app --example with-react-intl with-react-intl-app

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Example of required environment variables for connecting Next.js application with Contentful APIs.

LANGUAGE: bash
CODE:
CONTENTFUL_SPACE_ID=...
CONTENTFUL_ACCESS_TOKEN=...
CONTENTFUL_PREVIEW_ACCESS_TOKEN=...
CONTENTFUL_PREVIEW_SECRET=...
CONTENTFUL_REVALIDATE_SECRET=...

----------------------------------------

TITLE: Adding React Imports in JavaScript
DESCRIPTION: Example of adding missing React imports to files for the new React JSX transform in JavaScript.

LANGUAGE: javascript
CODE:
export default class Home extends React.Component {
  render() {
    return <div>Hello World</div>
  }
}

LANGUAGE: javascript
CODE:
import React from 'react'
export default class Home extends React.Component {
  render() {
    return <div>Hello World</div>
  }
}

----------------------------------------

TITLE: Configuring Inline CSS in Next.js with TypeScript
DESCRIPTION: Configuration example showing how to enable inline CSS support in Next.js using TypeScript. This setup enables the experimental feature that converts <link> tags to inline <style> tags in the HTML head.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    inlineCss: true,
  },
}

export default nextConfig

----------------------------------------

TITLE: Creating Next.js API Routes Project with pnpm
DESCRIPTION: This command utilizes pnpm to bootstrap a new Next.js project with route handlers. It creates a new directory called 'route-handlers-app' containing the example code and necessary configuration.

LANGUAGE: bash
CODE:
pnpm create next-app --example route-handlers route-handlers-app

----------------------------------------

TITLE: Running Next.js in Development Mode with Yarn
DESCRIPTION: These commands use Yarn to install the required dependencies and launch the Next.js development server. This sets up the local development environment for the application.

LANGUAGE: bash
CODE:
yarn install
yarn dev

----------------------------------------

TITLE: Incorrect Async Client Component Definition in Next.js
DESCRIPTION: This snippet demonstrates the incorrect way of defining a client component as an async function, which will cause an error in Next.js.

LANGUAGE: tsx
CODE:
'use client'

// This will cause an error
async function ClientComponent() {
  // ...
}

----------------------------------------

TITLE: Creating Next.js Project with Video.js using NPX
DESCRIPTION: Command to create a new Next.js application with Video.js integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-videojs with-videojs-app

----------------------------------------

TITLE: Creating Next.js Project with HLS.js using npx
DESCRIPTION: Command to create a new Next.js project with HLS.js integration using npx and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-hls-js with-hls-js-app

----------------------------------------

TITLE: Installing Next.js Blog Template with PNPM
DESCRIPTION: Command to create a new Next.js blog application using the Kontent.ai CMS template with PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-kontent-ai cms-kontent-app

----------------------------------------

TITLE: Creating Next.js App with GSAP using PNPM
DESCRIPTION: Command to create a new Next.js application with GSAP integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-gsap with-gsap-app

----------------------------------------

TITLE: Creating Next.js Project with Video.js using PNPM
DESCRIPTION: Command to create a new Next.js application with Video.js integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-videojs with-videojs-app

----------------------------------------

TITLE: Installing Next.js with Axiom using yarn
DESCRIPTION: Command to create a new Next.js application with Axiom integration using yarn create command.

LANGUAGE: bash
CODE:
yarn create next-app --example with-axiom with-axiom-app

----------------------------------------

TITLE: Installing @babel/runtime with npm
DESCRIPTION: Command to install @babel/runtime package as a production dependency using npm package manager.

LANGUAGE: sh
CODE:
npm install --save @babel/runtime

----------------------------------------

TITLE: Effect Registration Function
DESCRIPTION: Exports a function that registers named effects by pushing them to the effects array

LANGUAGE: javascript
CODE:
export function effect(name) {
    effects.push(name);
}

----------------------------------------

TITLE: Importing Regenerator Runtime as a Module in JavaScript
DESCRIPTION: Demonstrates how to import the regenerator-runtime module using both CommonJS and ECMAScript 2015 import styles. This is the recommended approach for using the runtime in your project.

LANGUAGE: javascript
CODE:
// CommonJS
const regeneratorRuntime = require("regenerator-runtime");

// ECMAScript 2015
import regeneratorRuntime from "regenerator-runtime";

----------------------------------------

TITLE: Creating Next.js App with Playwright using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with Playwright integration. It utilizes the 'create next-app' command and specifies the 'with-playwright' example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-playwright with-playwright-app

----------------------------------------

TITLE: Creating Next.js App with Service Worker using Yarn
DESCRIPTION: This command creates a new Next.js application with a service worker integration using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-service-worker with-service-worker-app

----------------------------------------

TITLE: Importing Next.js Components and Modules
DESCRIPTION: Imports the PagesRouteModule, RouteKind, and helper functions required for setting up a Next.js page route.

LANGUAGE: JavaScript
CODE:
import { PagesRouteModule } from '../../server/future/route-modules/pages/module.compiled';
import { RouteKind } from '../../server/future/route-kind';
import { hoist } from './helpers';
import Document from 'VAR_MODULE_DOCUMENT';
import App from 'VAR_MODULE_APP';
import * as userland from 'VAR_USERLAND';

----------------------------------------

TITLE: Implementing Compatible Next.js Dynamic Route Props
DESCRIPTION: Example showing correct usage of href and as props in Next.js Link component where the as prop matches the expected dynamic route pattern.

LANGUAGE: jsx
CODE:
import Link from 'next/link'

export default function Page(props) {
  return (
    <>
      <Link href="/[post]" as="/post-1">
        <a>Valid link</a>
      </Link>
    </>
  )
}

----------------------------------------

TITLE: Creating Next.js Project with Userbase Template using NPX
DESCRIPTION: Command to create a new Next.js project with Userbase integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-userbase next-userbase-app

----------------------------------------

TITLE: Installing Next.js 14 with NPM
DESCRIPTION: Command to upgrade Next.js to version 14 using NPM package manager. Installs Next.js, React 18, React DOM 18, and ESLint configuration.

LANGUAGE: bash
CODE:
npm i next@next-14 react@18 react-dom@18 && npm i eslint-config-next@next-14 -D

----------------------------------------

TITLE: Installing Next.js with Algolia using npx
DESCRIPTION: Creates a new Next.js application with Algolia React InstantSearch integration using npx create-next-app command.

LANGUAGE: bash
CODE:
npx create-next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app

----------------------------------------

TITLE: Creating Next.js App with Chakra UI using npx
DESCRIPTION: This command uses npx to create a new Next.js application with Chakra UI integration. It utilizes the 'create-next-app' package with a specific example template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-chakra-ui with-chakra-ui-app

----------------------------------------

TITLE: Creating Next.js App with Linaria using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with Linaria styling. It employs the 'create next-app' command and specifies the 'with-linaria' example template.

LANGUAGE: bash
CODE:
yarn create next-app --example with-linaria with-linaria-app

----------------------------------------

TITLE: Importing Next.js Image Component
DESCRIPTION: Imports the Image component from Next.js for optimized image rendering.

LANGUAGE: JSX
CODE:
import Image from "next/image";

----------------------------------------

TITLE: Installing Next.js with MongoDB Template using NPX
DESCRIPTION: Creates a new Next.js application with MongoDB integration using create-next-app and npx command.

LANGUAGE: bash
CODE:
npx create-next-app --example with-mongodb with-mongodb-app

----------------------------------------

TITLE: Creating Next.js App with Segment Analytics using npm
DESCRIPTION: Command to create a new Next.js application with Segment Analytics integration using npm and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-segment-analytics with-segment-analytics-app

----------------------------------------

TITLE: Creating Next.js Prismic App with PNPM
DESCRIPTION: Command to bootstrap a new Next.js application with Prismic CMS integration using pnpm create.

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-prismic cms-prismic-app

----------------------------------------

TITLE: Installing Next.js Blog Template with Yarn
DESCRIPTION: Command to create a new Next.js application using the Webiny CMS template using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example cms-webiny cms-webiny-app

----------------------------------------

TITLE: Installing Next.js with Unsplash Example using pnpm
DESCRIPTION: This command uses create-next-app to bootstrap a Next.js project with Unsplash integration using pnpm.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-unsplash with-unsplash-app

----------------------------------------

TITLE: Promise Resolution
DESCRIPTION: Initial Promise resolution operation with side effects

LANGUAGE: javascript
CODE:
await Promise.resolve();

----------------------------------------

TITLE: Renaming Environment File for Next.js Benchmarking
DESCRIPTION: Instructions for renaming the environment file and adding required Vercel credentials. This step is necessary for authenticating with Vercel's services during the benchmarking process.

LANGUAGE: markdown
CODE:
Rename the provided `./env.local` file to `./env` and fill in the required `VERCEL_TEST_TOKEN` and `VERCEL_TEST_TEAM` values. You can find and generate those from vercel.com.

----------------------------------------

TITLE: Creating Next.js App with Orbit Components using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with Orbit components integration. It specifies the example template and the output directory name.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-orbit-components with-orbit-components-app

----------------------------------------

TITLE: SWC Abstract Syntax Tree Output in Rust
DESCRIPTION: This code block shows the Rust representation of the SWC Abstract Syntax Tree generated from the input JavaScript code. It illustrates the detailed structure of the AST, including nodes for the script, expression statement, call expression, and string literal.

LANGUAGE: rust
CODE:
Script(
  Script {
    body: [
      Expr(
        ExprStmt {
          expr: Call(
            CallExpr {
              callee: Expr(
                Member(
                  MemberExpr {
                    obj: Ident(
                      Ident {
                        sym: Atom('console' type=inline),
                        optional: false,
                      },
                    ),
                    prop: Ident(
                      Ident {
                        sym: Atom('log' type=inline),
                        optional: false,
                      },
                    ),
                  },
                ),
              ),
              args: [
                ExprOrSpread {
                  spread: None,
                  expr: Lit(
                    Str(
                      Str {
                        value: Atom('hello' type=inline),
                        raw: Some(
                          "'hello'",
                        ),
                      },
                    ),
                  ),
                },
              ],
              type_args: None,
            },
          ),
        },
      ),
    ],
    shebang: None,
  },
)

----------------------------------------

TITLE: Deprecated Next.js Middleware Using req.ua
DESCRIPTION: Example showing the deprecated way of accessing user agent information through req.ua in Next.js middleware. This approach is no longer supported and needs to be updated.

LANGUAGE: typescript
CODE:
import { NextRequest, NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  const url = request.nextUrl
  const viewport = request.ua.device.type === 'mobile' ? 'mobile' : 'desktop'
  url.searchParams.set('viewport', viewport)
  return NextResponse.rewrite(url)
}

----------------------------------------

TITLE: Defining Markdown Frontmatter for Font Optimization Documentation
DESCRIPTION: YAML frontmatter metadata for a documentation page about font optimization in Next.js, including title, navigation title, description and source path information.

LANGUAGE: markdown
CODE:
---
title: Font Optimization
nav_title: Fonts
description: Optimize your application's web fonts with the built-in `next/font` loaders.
source: 'app/building-your-application/optimizing/fonts'
---

----------------------------------------

TITLE: Creating Next.js App with Headers Example using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with the headers example template. It sets up a project named 'headers-app' that demonstrates custom HTTP header usage.

LANGUAGE: bash
CODE:
yarn create next-app --example headers headers-app

----------------------------------------

TITLE: Creating Next.js App with Cloudinary Example using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application based on the Cloudinary example. It sets up the project structure and installs necessary dependencies.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-cloudinary with-cloudinary-app

----------------------------------------

TITLE: Initializing Route-as-Modal Next.js Project with NPX
DESCRIPTION: Command to create a new Next.js project using the route-as-modal example template with NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-route-as-modal with-route-as-modal-app

----------------------------------------

TITLE: Creating HTML Social Links Section
DESCRIPTION: HTML div containing social media and contact links with line breaks for vertical layout.

LANGUAGE: html
CODE:
<div>
  Twitter [@yourname](https://twitter.com/yourname)
  <br />
  GitHub [@yourname](https://github.com/yourname)
  <br />
  Instagram [@yourname](https://instagram.com/yourname)
  <br />
  Email your@name.com
</div>

----------------------------------------

TITLE: Installing OpenTelemetry Dependencies with NPM
DESCRIPTION: Command to install the required OpenTelemetry packages including Vercel's otel package and core OpenTelemetry dependencies

LANGUAGE: bash
CODE:
npm install @vercel/otel @opentelemetry/sdk-logs @opentelemetry/api-logs @opentelemetry/instrumentation

----------------------------------------

TITLE: Disabling All Development Logging in Next.js
DESCRIPTION: Completely disable all development logging functionality by setting the logging configuration to false.

LANGUAGE: javascript
CODE:
module.exports = {
  logging: false,
}

----------------------------------------

TITLE: Installing Environment Variables Example with Yarn
DESCRIPTION: Creates a new Next.js application with environment variables configuration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example environment-variables environment-variables-app

----------------------------------------

TITLE: Creating SuperTokens App with create-supertokens-app using npm
DESCRIPTION: Command to create a SuperTokens app with Next.js frontend using npm.

LANGUAGE: bash
CODE:
npx create-supertokens-app@latest --frontend=next

----------------------------------------

TITLE: Using Alternative Variable Name for Module Assignment in JavaScript
DESCRIPTION: Demonstrates the correct way to declare module-like variables by using a different variable name instead of the reserved 'module' keyword. This prevents conflicts with the built-in module system.

LANGUAGE: javascript
CODE:
let myModule = {...}

----------------------------------------

TITLE: Creating Next.js App with Convex using PNPM
DESCRIPTION: Command to bootstrap a new Next.js application with Convex integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example convex convex-app

----------------------------------------

TITLE: Creating Next.js Project with Overmind using Yarn
DESCRIPTION: Command to create a new Next.js project with Overmind template using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-overmind with-overmind-app

----------------------------------------

TITLE: Creating Next.js Redirects Example with npm
DESCRIPTION: Command to create a new Next.js application with redirects example using npm and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example redirects redirects-app

----------------------------------------

TITLE: Displaying Turbopack Error for Invalid UTF-8 Sequence
DESCRIPTION: This snippet shows a Turbopack error message encountered when trying to read and parse source code. The error indicates an invalid UTF-8 sequence in the input file.

LANGUAGE: plaintext
CODE:
error - [load] [project]/turbopack/crates/turbopack-tests/tests/execution/turbopack/basic/error/input/broken.js  Reading source code for parsing failed
  An unexpected error happened while trying to read the source code to parse: failed to convert rope into string
  
  Caused by:
  - invalid utf-8 sequence of 1 bytes from index 1

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: This command copies the example environment variable file to create a local configuration file.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Copying Environment Variables Example File
DESCRIPTION: This command copies the example environment variables file to create a new .env.local file. This file will be used to store the actual environment variables needed for the application.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Installing react-is Package
DESCRIPTION: Commands to install the react-is package using Yarn or NPM package managers.

LANGUAGE: sh
CODE:
# Yarn
yarn add react-is

# NPM
npm install react-is

----------------------------------------

TITLE: Structuring Errors in JavaScript
DESCRIPTION: This function takes an error object and returns a structured version of it, including the name, message, and parsed stack trace.

LANGUAGE: JavaScript
CODE:
export function structuredError(e) {
    e = getProperError(e);
    return {
        name: e.name,
        message: e.message,
        stack: typeof e.stack === "string" ? parseStackTrace(e.stack) : []
    };
}

----------------------------------------

TITLE: Final Modification of Order Array in JavaScript
DESCRIPTION: Pushes the string 'c' to the 'order' array. This is the final direct modification of the 'order' array in the module's top-level code.

LANGUAGE: javascript
CODE:
order.push("c");

----------------------------------------

TITLE: Installing Next.js with Meilisearch using Bun
DESCRIPTION: Command to create a new Next.js application with Meilisearch integration using Bun package manager.

LANGUAGE: bash
CODE:
bunx create-next-app --example with-meilisearch with-meilisearch-app

----------------------------------------

TITLE: Creating Next.js Project with urql using Yarn
DESCRIPTION: Command to initialize a new Next.js project with urql integration using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-urql with-urql-app

----------------------------------------

TITLE: Running Tests for Next.js SWC Compilation
DESCRIPTION: Commands to run tests and update snapshots for the @next/swc package. It includes options for standard testing and updating test fixtures.

LANGUAGE: sh
CODE:
cargo test

# Update snapshots and fixtures for tests
UPDATE=1 cargo test

----------------------------------------

TITLE: Component Casing Example in Next.js
DESCRIPTION: Shows correct component definition and import syntax, highlighting the importance of proper casing in file names.

LANGUAGE: jsx
CODE:
export default function MyComponent() {
  return <h1>Hello</h1>
}

LANGUAGE: jsx
CODE:
// Note how `components/MyComponent` exists but `Mycomponent` without the capital `c` is imported
import MyComponent from '../components/Mycomponent'

----------------------------------------

TITLE: Installing Next.js with Unsplash Example using Yarn
DESCRIPTION: This command uses create-next-app to bootstrap a Next.js project with Unsplash integration using Yarn.

LANGUAGE: bash
CODE:
yarn create next-app --example with-unsplash with-unsplash-app

----------------------------------------

TITLE: Installing Next.js Blog Template with NPM
DESCRIPTION: Command to create a new Next.js application using the Webiny CMS template using NPM package manager.

LANGUAGE: bash
CODE:
npx create-next-app --example cms-webiny cms-webiny-app

----------------------------------------

TITLE: Creating Next.js Docker Project with PNPM
DESCRIPTION: Command to create a new Next.js project with Docker support using pnpm and create-next-app

LANGUAGE: bash
CODE:
pnpm create next-app --example with-docker nextjs-docker

----------------------------------------

TITLE: Creating Next.js App with Grafbase using pnpm
DESCRIPTION: This command uses create-next-app to bootstrap a Next.js application with Grafbase integration using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-grafbase with-grafbase-app

----------------------------------------

TITLE: Configuring Next.js Page Frontmatter
DESCRIPTION: YAML frontmatter configuration for a Next.js page defining the page type, title, and creation date.

LANGUAGE: yaml
CODE:
---
type: page
title: About
date: 2021-03-19
---

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: This command starts the Next.js development server, allowing you to run and test your application locally.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Creating Next.js CSS App with npm
DESCRIPTION: This command uses npx to execute create-next-app and set up a new Next.js project with CSS support. It specifies the example template and the project name.

LANGUAGE: bash
CODE:
npx create-next-app --example next-css next-css-app

----------------------------------------

TITLE: Exporting RouteKind in Development Mode
DESCRIPTION: This snippet shows how RouteKind is exported in development mode. It uses TurboPack's module system to handle the export.

LANGUAGE: javascript
CODE:
var RouteKind;
export { RouteKind as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

----------------------------------------

TITLE: Performing Dynamic Operations in JavaScript
DESCRIPTION: This code snippet showcases dynamic import, file system read, and URL creation with unknown parameters. It demonstrates potentially risky operations that are difficult to statically analyze.

LANGUAGE: JavaScript
CODE:
import(unknown);

fs.readFileSync(unknown);
readFileSync(unknown);

new URL(unknown, import.meta.url);

----------------------------------------

TITLE: Creating Next.js App with MDBreact using PNPM
DESCRIPTION: Command to create a new Next.js application with MDBreact integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-mdbreact with-mdbreact-app

----------------------------------------

TITLE: Dynamic File Reading in JavaScript
DESCRIPTION: This code shows two methods of reading files dynamically: using 'fs.readFileSync()' and a standalone 'readFileSync()' function. Both use an 'unknown' variable as the file path, which makes static analysis challenging.

LANGUAGE: javascript
CODE:
fs.readFileSync(unknown);
readFileSync(unknown);

----------------------------------------

TITLE: Production Module Parts
DESCRIPTION: TurboPack-generated module parts for production, showing the final optimized chunks with internal references.

LANGUAGE: javascript
CODE:
import "./lib";

LANGUAGE: javascript
CODE:
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { cat as __TURBOPACK__reexport__cat__ } from "./lib";
export { __TURBOPACK__reexport__cat__ as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

LANGUAGE: javascript
CODE:
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
"module evaluation";

----------------------------------------

TITLE: Installing Next.js with Knex Template using yarn
DESCRIPTION: Creates a new Next.js application with Knex integration using yarn create

LANGUAGE: bash
CODE:
yarn create next-app --example with-knex with-knex-app

----------------------------------------

TITLE: Formatting Code for Next.js SWC Package
DESCRIPTION: Command to format the code before submission, ensuring consistent style across the project.

LANGUAGE: sh
CODE:
cargo fmt

----------------------------------------

TITLE: Getting the File System Path of Regenerator Runtime in JavaScript
DESCRIPTION: Provides a method to obtain the absolute file system path of the runtime.js file. This can be useful for configurations or when you need to reference the exact location of the runtime file.

LANGUAGE: javascript
CODE:
require("regenerator-runtime/path").path

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to create a local environment configuration file from the example template.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Creating Next.js App with Elasticsearch using PNPM
DESCRIPTION: Command to create a new Next.js application with Elasticsearch integration using PNPM create next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-elasticsearch with-elasticsearch-app

----------------------------------------

TITLE: Creating Next.js with Ionic project using pnpm
DESCRIPTION: Command to create a new Next.js project with Ionic integration using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-ionic with-ionic-app

----------------------------------------

TITLE: Analyzing Webpack Output in Next.js
DESCRIPTION: Commands to analyze the webpack output of a Next.js project. This generates a report of the bundle composition and size.

LANGUAGE: bash
CODE:
npm run analyze

LANGUAGE: bash
CODE:
yarn analyze

----------------------------------------

TITLE: Customizing Output File Tracing in Next.js
DESCRIPTION: Configure outputFileTracingExcludes and outputFileTracingIncludes in next.config.js to fine-tune which files are included or excluded during tracing. Uses minimatch globs for specifying files.

LANGUAGE: javascript
CODE:
module.exports = {
  outputFileTracingExcludes: {
    '/api/hello': ['./un-necessary-folder/**/*'],
  },
  outputFileTracingIncludes: {
    '/api/another': ['./necessary-folder/**/*'],
    '/api/login/\\[\\[\\.\\.\\.slug\\]\\]': [
      './node_modules/aws-crt/dist/bin/**/*',
    ],
  },
}

----------------------------------------

TITLE: Creating Next.js Script Component App with npm
DESCRIPTION: Command to bootstrap a new Next.js application using the script-component example with npm.

LANGUAGE: bash
CODE:
npx create-next-app --example script-component script-component-app

----------------------------------------

TITLE: Creating Next.js Project with Xata Integration using pnpm
DESCRIPTION: This command uses create-next-app to bootstrap a Next.js project with Xata integration using pnpm.

LANGUAGE: sh
CODE:
pnpm create next-app --example with-xata with-xata-app

----------------------------------------

TITLE: Disabling iOS Content Detection with Meta Tag
DESCRIPTION: This code snippet shows how to use a meta tag to disable iOS's automatic detection and conversion of phone numbers, email addresses, and other data into links. This can prevent hydration mismatches caused by iOS's content detection feature.

LANGUAGE: jsx
CODE:
<meta
  name="format-detection"
  content="telephone=no, date=no, email=no, address=no"
/>

----------------------------------------

TITLE: Importing Content Models with Kontent.ai Backup Manager
DESCRIPTION: Command to restore content models and data using the Kontent.ai Backup Manager CLI tool. Requires Management API key and Project ID.

LANGUAGE: bash
CODE:
npm i -g @kontent-ai/backup-manager
kbm --action=restore --apiKey=<Management API key> --projectId=<Project ID> --zipFilename=kontent-ai-backup

----------------------------------------

TITLE: Creating Next.js App with pnpm for Bug Reproduction
DESCRIPTION: This command uses create-next-app with pnpm to bootstrap a Next.js application using the reproduction template for bug reporting purposes.

LANGUAGE: bash
CODE:
pnpm create next-app --example reproduction-template-pages reproduction-app

----------------------------------------

TITLE: Importing Environment Utilities in JavaScript
DESCRIPTION: Imports the DEFAULT_ENVIRONMENT constant and parseEnvironment function from the environment utility module.

LANGUAGE: javascript
CODE:
import { DEFAULT_ENVIRONMENT, parseEnvironment } from '../../utils/environment';

----------------------------------------

TITLE: Dynamic Operations with Unknown Variables in Node.js
DESCRIPTION: Example of potentially unsafe dynamic operations including spawn processes, imports, and file system operations using unknown variables. This pattern can lead to security vulnerabilities and runtime errors.

LANGUAGE: javascript
CODE:
child_process.spawnSync("node", [unknown, unknown]);

require(unknown);

import(unknown);

fs.readFileSync(unknown);
readFileSync(unknown);

----------------------------------------

TITLE: Creating Next.js MDX App with PNPM
DESCRIPTION: Command to create a new Next.js application with MDX pages support using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example mdx-pages mdx-pages-app

----------------------------------------

TITLE: Installing Next.js with GraphQL React using NPX
DESCRIPTION: Command to create a new Next.js application with graphql-react integration using NPX and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-graphql-react with-graphql-react-app

----------------------------------------

TITLE: Installing @next/plugin-rspack via NPM
DESCRIPTION: Command to install the Rspack plugin using NPM package manager.

LANGUAGE: bash
CODE:
npm install @next/plugin-rspack

----------------------------------------

TITLE: Console Log Statement
DESCRIPTION: Logs variable 'a' to the console

LANGUAGE: javascript
CODE:
console.log(a);

----------------------------------------

TITLE: Development Module Code
DESCRIPTION: Complete module code for development including variable assignments, function declaration, logging and exports

LANGUAGE: javascript
CODE:
a = ()=>{};
function a() {}
console.log(a);
"module evaluation";
export { a as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

----------------------------------------

TITLE: Creating Next.js with Ionic project using npx
DESCRIPTION: Command to create a new Next.js project with Ionic integration using npx and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-ionic with-ionic-app

----------------------------------------

TITLE: Creating Next.js Project with Flow using Yarn
DESCRIPTION: Command to create a new Next.js project with Flow integration using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-flow with-flow-app

----------------------------------------

TITLE: Validating React Component Types with react-is
DESCRIPTION: Demonstrates how to use react-is to check if various React component types are valid element types.

LANGUAGE: javascript
CODE:
import React from "react";
import * as ReactIs from "react-is";

class ClassComponent extends React.Component {
  render() {
    return React.createElement("div");
  }
}

const FunctionComponent = () => React.createElement("div");

const ForwardRefComponent = React.forwardRef((props, ref) =>
  React.createElement(Component, { forwardedRef: ref, ...props })
);

const Context = React.createContext(false);

ReactIs.isValidElementType("div"); // true
ReactIs.isValidElementType(ClassComponent); // true
ReactIs.isValidElementType(FunctionComponent); // true
ReactIs.isValidElementType(ForwardRefComponent); // true
ReactIs.isValidElementType(Context.Provider); // true
ReactIs.isValidElementType(Context.Consumer); // true

----------------------------------------

TITLE: MSW Integration with Playwright
DESCRIPTION: Implementation example using MSW (Mock Service Worker) for API mocking in Playwright tests.

LANGUAGE: javascript
CODE:
import {
  test,
  expect,
  http,
  HttpResponse,
  passthrough,
} from 'next/experimental/testmode/playwright/msw'

test.use({
  mswHandlers: [
    [
      http.get('http://my-db/product/shoe', () => {
        return HttpResponse.json({
          title: 'A shoe',
        })
      }),
      http.all('*', () => {
        return passthrough()
      }),
    ],
    { scope: 'test' },
  ],
})

test('/product/shoe', async ({ page, msw }) => {
  msw.use(
    http.get('http://my-db/product/boot', () => {
      return HttpResponse.json({
        title: 'A boot',
      })
    })
  )

  await page.goto('/product/boot')

  await expect(page.locator('body')).toHaveText(/Boot/)
})

----------------------------------------

TITLE: Installing Environment Variables Example with NPX
DESCRIPTION: Creates a new Next.js application with environment variables configuration using NPX package manager.

LANGUAGE: bash
CODE:
npx create-next-app --example environment-variables environment-variables-app

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to create a local environment variables file from the example template

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Generating SSL Certificates for HTTP2 Server
DESCRIPTION: This command uses OpenSSL to generate self-signed SSL certificates for the HTTP2 server. It creates a private key and a certificate for localhost.

LANGUAGE: bash
CODE:
openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' \
  -keyout localhost-privkey.pem -out localhost-cert.pem

----------------------------------------

TITLE: Creating Next.js App with Yarn
DESCRIPTION: Command to create a new Next.js application with basic CSS example using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example basic-css basic-css-app

----------------------------------------

TITLE: Creating Next.js App with Bundle Analysis Example
DESCRIPTION: Commands to create a new Next.js application using the analyze-bundles example template. This sets up a project preconfigured for bundle analysis.

LANGUAGE: bash
CODE:
npx create-next-app --example analyze-bundles analyze-bundles-app

LANGUAGE: bash
CODE:
yarn create next-app --example analyze-bundles analyze-bundles-app

LANGUAGE: bash
CODE:
pnpm create next-app --example analyze-bundles analyze-bundles-app

----------------------------------------

TITLE: Installing Next.js App with Babel Macros using PNPM
DESCRIPTION: Command to create a new Next.js application with babel-macros configuration using PNPM create next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-babel-macros with-babel-macros-app

----------------------------------------

TITLE: Installing Next.js Blog Template with Yarn
DESCRIPTION: Command to create a new Next.js blog application using the Kontent.ai CMS template with Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example cms-kontent-ai cms-kontent-app

----------------------------------------

TITLE: Fetch Function Declaration
DESCRIPTION: Declares an empty fetch function that will be used as the default export.

LANGUAGE: javascript
CODE:
function fetch() {}

----------------------------------------

TITLE: Declaring and Exporting Variables in Next.js
DESCRIPTION: This snippet declares two constants 'dog' and 'cat', and exports them with different names. It demonstrates variable declaration and module exports in JavaScript.

LANGUAGE: javascript
CODE:
const dog = "dog";
const cat = "cat";

export { dog as DOG };
export { cat };
export { dog as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { cat as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

----------------------------------------

TITLE: Creating Next.js MDX App with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with MDX support. It employs the create next-app command and specifies the MDX example template.

LANGUAGE: bash
CODE:
yarn create next-app --example mdx mdx-app

----------------------------------------

TITLE: Basic Module Import
DESCRIPTION: Simple named import of 'baz' from a module file. This is a hoisted import statement with potential side effects.

LANGUAGE: javascript
CODE:
import { baz } from './module';

----------------------------------------

TITLE: Function Declarations and Exports in Next.js
DESCRIPTION: Demonstrates function declarations and exports in a Next.js module. This snippet shows how to define internal and external functions, and export them for use in other parts of the application.

LANGUAGE: javascript
CODE:
function internal() {
    return upper(foobar);
}

export function external1() {
    return internal() + foobar;
}

export function external2() {
    foobar += ".";
}

----------------------------------------

TITLE: Creating Next.js App with GraphQL Hooks using pnpm
DESCRIPTION: Command to create a new Next.js application with GraphQL Hooks using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-graphql-hooks with-graphql-hooks-app

----------------------------------------

TITLE: Detecting React Portals with react-is
DESCRIPTION: Demonstrates how to use react-is to identify React Portals and determine their type.

LANGUAGE: javascript
CODE:
import React from "react";
import ReactDOM from "react-dom";
import * as ReactIs from 'react-is';

const div = document.createElement("div");
const portal = ReactDOM.createPortal(<div />, div);

ReactIs.isPortal(portal); // true
ReactIs.typeOf(portal) === ReactIs.Portal; // true

----------------------------------------

TITLE: Bundle Analyzer with Custom Options
DESCRIPTION: Configuration with additional options to customize analyzer behavior, specifically disabling automatic report opening.

LANGUAGE: javascript
CODE:
const withBundleAnalyzer = require('@next/bundle-analyzer')({\n  enabled: process.env.ANALYZE === 'true',\n  openAnalyzer: false,\n})\nmodule.exports = withBundleAnalyzer({})

----------------------------------------

TITLE: Creating Next.js App with Builder.io CMS Example
DESCRIPTION: Commands to bootstrap a new Next.js application using the cms-builder-io example template. This can be done using npm, Yarn, or pnpm package managers.

LANGUAGE: bash
CODE:
npx create-next-app --example cms-builder-io cms-builder-io-app

LANGUAGE: bash
CODE:
yarn create next-app --example cms-builder-io cms-builder-io-app

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-builder-io cms-builder-io-app

----------------------------------------

TITLE: Running Jest Tests with PNPM
DESCRIPTION: Executes Jest tests in the Next.js project using PNPM test command.

LANGUAGE: bash
CODE:
pnpm test

----------------------------------------

TITLE: Creating Next.js App with Firebase Template using yarn
DESCRIPTION: Command to create a new Next.js application with Firebase integration using yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-firebase with-firebase-app

----------------------------------------

TITLE: Creating Next.js App with CORS API Routes using PNPM
DESCRIPTION: Command to create a new Next.js application with API routes and CORS support using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example api-routes-cors api-routes-cors-app

----------------------------------------

TITLE: Basic Next.js Babel Configuration
DESCRIPTION: Minimal .babelrc configuration that includes the next/babel preset required for Next.js applications. This is the base configuration needed when customizing Babel in a Next.js project.

LANGUAGE: json
CODE:
{
  "presets": ["next/babel"],
  "plugins": []
}

----------------------------------------

TITLE: Creating Next.js App with Yarn for Bug Reproduction
DESCRIPTION: This command uses Yarn to create a new Next.js app using the reproduction template. It's an alternative to npm for setting up a bug reproduction environment.

LANGUAGE: bash
CODE:
yarn create next-app --example reproduction-template reproduction-app

----------------------------------------

TITLE: Creating Next.js App with Emotion using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with Emotion integration using the 'with-emotion-swc' example template.

LANGUAGE: bash
CODE:
yarn create next-app --example with-emotion-swc with-emotion-swc-app

----------------------------------------

TITLE: Removing node-sass dependency using npm in Next.js project
DESCRIPTION: This command uninstalls the node-sass package using npm, resolving the duplicate Sass dependency issue in a Next.js project.

LANGUAGE: bash
CODE:
npm uninstall node-sass

----------------------------------------

TITLE: Creating Next.js Blog App with PNPM
DESCRIPTION: Command to bootstrap a new Next.js blog starter application using PNPM's create command

LANGUAGE: bash
CODE:
pnpm create next-app --example blog-starter blog-starter-app

----------------------------------------

TITLE: Creating Next.js MDX App with Yarn
DESCRIPTION: Command to create a new Next.js application with MDX pages support using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example mdx-pages mdx-pages-app

----------------------------------------

TITLE: Implementing nanoid Function for Nanoid
DESCRIPTION: Defines the main nanoid function to generate unique IDs using the default alphabet and configurable size.

LANGUAGE: javascript
CODE:
let nanoid = (size = 21)=>{
    fillPool((size -= 0));
    let id = '';
    for(let i = poolOffset - size; i < poolOffset; i++){
        id += urlAlphabet[pool[i] & 63];
    }
    return id;
};

----------------------------------------

TITLE: Importing Node.js Modules and Generating Random Value
DESCRIPTION: This snippet imports the 'child_process' and 'fs' modules from Node.js, and generates a random number for use in subsequent operations.

LANGUAGE: JavaScript
CODE:
import child_process from "node:child_process";
import fs, { readFileSync } from "node:fs";

const unknown = Math.random();

----------------------------------------

TITLE: Installing Custom Routes Proxying Example with NPX
DESCRIPTION: Command to create a new Next.js application with custom routes proxying using npx create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example custom-routes-proxying custom-routes-proxying-app

----------------------------------------

TITLE: Copying Environment Variables
DESCRIPTION: Creates a local environment file by copying the example template

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Reading Route Parameters in Next.js Client Components
DESCRIPTION: This example shows how to access route parameters in a Next.js Client Component using React's use function, which is necessary because Client Components cannot be async.

LANGUAGE: tsx
CODE:
'use client'

import { use } from 'react'

export default function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = use(params)
}

LANGUAGE: js
CODE:
'use client'

import { use } from 'react'

export default function Page({ params }) {
  const { slug } = use(params)
}

----------------------------------------

TITLE: Running Tests with Browser Visibility
DESCRIPTION: Command to run tests with visible browser window for debugging purposes

LANGUAGE: sh
CODE:
pnpm testonly-start test/e2e/app-dir/app/

----------------------------------------

TITLE: Configuring Dynamic Code Allowance in Next.js (TypeScript)
DESCRIPTION: This configuration snippet shows how to allow dynamic code evaluation for specific files or modules in Next.js. It uses the 'unstable_allowDynamic' option to specify files or patterns where dynamic evaluation is permitted.

LANGUAGE: typescript
CODE:
export const config = {
  unstable_allowDynamic: [
    '/lib/utilities.js', // allows a single file
    '**/node_modules/function-bind/**', // use a glob to allow anything in the function-bind 3rd party module
  ],
}

----------------------------------------

TITLE: Installing Next.js Expo TypeScript Project with PNPM
DESCRIPTION: Command to create a new Next.js project with Expo and TypeScript using pnpm create

LANGUAGE: bash
CODE:
pnpm create next-app --example with-expo-typescript with-expo-typescript-app

----------------------------------------

TITLE: Initializing Prismic Repository
DESCRIPTION: Command to create and initialize a new Prismic repository with predefined content models for Authors and Posts.

LANGUAGE: sh
CODE:
npx @slicemachine/init

----------------------------------------

TITLE: Function-Based Bundle Analyzer Configuration
DESCRIPTION: Configuration of bundle analyzer using a function approach in next.config.js, allowing access to build phase and default config.

LANGUAGE: javascript
CODE:
module.exports = (phase, defaultConfig) => {\n  return withBundleAnalyzer(defaultConfig)\n}

----------------------------------------

TITLE: Cleaning Up Disk Space in Next.js Development
DESCRIPTION: Command to clean up old artifacts, caches, and optimize git repository to recover disk space during Next.js development.

LANGUAGE: bash
CODE:
pnpm sweep

----------------------------------------

TITLE: Environment Setup Commands
DESCRIPTION: Commands for setting up environment variables and linking to Vercel project.

LANGUAGE: bash
CODE:
npx vercel link
npx vercel env pull

----------------------------------------

TITLE: Creating Next.js Blog App with Yarn
DESCRIPTION: Command to bootstrap a new Next.js blog starter application using Yarn's create command

LANGUAGE: bash
CODE:
yarn create next-app --example blog-starter blog-starter-app

----------------------------------------

TITLE: Creating Next.js App with MongoDB Template using Yarn
DESCRIPTION: Command to bootstrap a new Next.js application with MongoDB and Mongoose setup using Yarn package manager

LANGUAGE: bash
CODE:
yarn create next-app --example with-mongodb-mongoose with-mongodb-mongoose-app

----------------------------------------

TITLE: Creating Next.js App with Google Maps Embed using yarn
DESCRIPTION: This command uses yarn to create a new Next.js application with Google Maps Embed functionality.

LANGUAGE: bash
CODE:
yarn create next-app --example with-google-maps-embed with-google-maps-embed-app

----------------------------------------

TITLE: Upgrading Next.js to Version 10 using Bun
DESCRIPTION: Command to upgrade Next.js to version 10 using Bun package manager. This will update the next package in your project's dependencies.

LANGUAGE: bash
CODE:
bun add next@10

----------------------------------------

TITLE: Installing Next.js Apollo Server Example with PNPM
DESCRIPTION: Command to create a new Next.js application with Apollo Server integration using pnpm create.

LANGUAGE: bash
CODE:
pnpm create next-app --example api-routes-apollo-server api-routes-apollo-server-app

----------------------------------------

TITLE: Installing Redis Example with Yarn
DESCRIPTION: Command to create a new Next.js project with Redis integration using Yarn create next-app

LANGUAGE: bash
CODE:
yarn create next-app --example with-redis roadmap

----------------------------------------

TITLE: Module Relationship Diagram in Next.js
DESCRIPTION: This Mermaid diagram illustrates the relationships between different items in the module, including variable declarations and exports. It visually represents the module structure.

LANGUAGE: mermaid
CODE:
graph TD
    N0["Items: [ItemId(0, VarDeclarator(0)), ItemId(Export((&quot;dog&quot;, #2), &quot;DOG&quot;))]"]
    N1["Items: [ItemId(1, VarDeclarator(0)), ItemId(Export((&quot;cat&quot;, #2), &quot;cat&quot;))]"]
    N2["Items: [ItemId(ModuleEvaluation)]"]

----------------------------------------

TITLE: Implementing Top-Level Await in Next.js Module
DESCRIPTION: This code snippet demonstrates the use of top-level await in a JavaScript module. It simulates an asynchronous operation with a delay and logs the result. This approach allows for asynchronous operations at the module level without wrapping them in an async function.

LANGUAGE: javascript
CODE:
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

await delay(1000);

console.log('Done!');

----------------------------------------

TITLE: Installing Next.js Stripe Project with Yarn
DESCRIPTION: Command to create a new Next.js project with Stripe TypeScript template using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-stripe-typescript with-stripe-typescript-app

----------------------------------------

TITLE: Running Large Component Benchmark Test
DESCRIPTION: Command to run benchmark test for a stateless component that renders 10,000 list items. Executes 500 HTTP requests.

LANGUAGE: bash
CODE:
npm run bench:stateless-big

----------------------------------------

TITLE: Initializing Next.js Instance in JavaScript
DESCRIPTION: This snippet shows the correct way to initialize a Next.js instance in a custom server setup. It demonstrates both the incorrect way (without parameters) and the correct way (with a dev parameter).

LANGUAGE: javascript
CODE:
const app = next()

LANGUAGE: javascript
CODE:
const app = next({ dev: boolean })

----------------------------------------

TITLE: Creating Next.js App with Dynamic Import Example using npx
DESCRIPTION: This command uses npx to create a new Next.js application with dynamic import functionality. It utilizes the 'with-dynamic-import' example template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-dynamic-import with-dynamic-import-app

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the project locally for development and testing.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Installing Canary Next.js Release
DESCRIPTION: Command to install the canary version of Next.js through npm. This channel contains the latest features and bugfixes before stable release.

LANGUAGE: bash
CODE:
npm install next@canary

----------------------------------------

TITLE: Creating a Pull Request for Next.js
DESCRIPTION: GitHub CLI command to create a pull request for Next.js contributions, which automatically forks and sets up a remote branch.

LANGUAGE: bash
CODE:
gh pr create

----------------------------------------

TITLE: Initializing Next.js Project with Neo4j Integration using pnpm
DESCRIPTION: Command to create a new Next.js project with Neo4j integration using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-neo4j with-neo4j-app

----------------------------------------

TITLE: Installing Next.js REST API Example with NPX
DESCRIPTION: Creates a new Next.js application with REST API routes example using NPX command line tool

LANGUAGE: bash
CODE:
npx create-next-app --example api-routes-rest api-routes-rest-app

----------------------------------------

TITLE: Installing Next.js 12 and React 17 with bun
DESCRIPTION: Command to install Next.js version 12, React 17, and related packages using bun.

LANGUAGE: bash
CODE:
bun add next@12 react@17 react-dom@17 eslint-config-next@12

----------------------------------------

TITLE: Default PostCSS Configuration in Next.js
DESCRIPTION: The default PostCSS configuration used by Next.js, which can be customized by creating a postcss.config.json file.

LANGUAGE: json
CODE:
{
  "plugins": [
    "postcss-flexbugs-fixes",
    [
      "postcss-preset-env",
      {
        "autoprefixer": {
          "flexbox": "no-2009"
        },
        "stage": 3,
        "features": {
          "custom-properties": false
        }
      }
    ]
  ]
}

----------------------------------------

TITLE: Installing Next.js TakeShape Blog with PNPM
DESCRIPTION: Command to create a new Next.js application with TakeShape CMS integration using pnpm create

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-takeshape cms-takeshape-app

----------------------------------------

TITLE: Installing Next.js TakeShape Blog with NPX
DESCRIPTION: Command to create a new Next.js application with TakeShape CMS integration using npx create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example cms-takeshape cms-takeshape-app

----------------------------------------

TITLE: Importing CSS Using Root Stylesheet in Next.js
DESCRIPTION: Demonstrates the recommended way to import additional CSS files using @import in the root stylesheet. This approach ensures proper CSS resource loading and management by Next.js.

LANGUAGE: css
CODE:
/* Root stylesheet */
@import 'extra.css';

body {
  /* ... */
}

----------------------------------------

TITLE: Installing Next.js Apollo Server Example with NPX
DESCRIPTION: Command to create a new Next.js application with Apollo Server integration using npx create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example api-routes-apollo-server api-routes-apollo-server-app

----------------------------------------

TITLE: Creating Styled Grid Components in JavaScript
DESCRIPTION: Defines styled components for various grid properties like gridColumn, gridRow, gridAutoFlow, etc. using the 'style' utility from Material-UI.

LANGUAGE: JavaScript
CODE:
export const gridColumn = style({
    prop: 'gridColumn'
});

export const gridRow = style({
    prop: 'gridRow'
});

export const gridAutoFlow = style({
    prop: 'gridAutoFlow'
});

// ... other grid-related styled components

----------------------------------------

TITLE: Running Filtered Snapshot Tests with Nextest
DESCRIPTION: Command to run only snapshot tests using nextest's filter expressions. The filter allows running only test names containing specific substrings.

LANGUAGE: bash
CODE:
cargo nextest run -E 'test(snapshot)'

----------------------------------------

TITLE: Installing Next.js Apollo Server Example with Yarn
DESCRIPTION: Command to create a new Next.js application with Apollo Server integration using yarn create.

LANGUAGE: bash
CODE:
yarn create next-app --example api-routes-apollo-server api-routes-apollo-server-app

----------------------------------------

TITLE: Installing Next.js Project with Yarn
DESCRIPTION: Creates a new Next.js application with Nhost authentication and GraphQL setup using yarn create command.

LANGUAGE: bash
CODE:
yarn create next-app --example with-nhost-auth-realtime-graphql nhost-app

----------------------------------------

TITLE: Implementing beforeInteractive Script in Next.js App Router
DESCRIPTION: Example showing how to properly implement a beforeInteractive script in app/layout.jsx using the App Router. This approach loads scripts that need to be available globally across the application.

LANGUAGE: jsx
CODE:
import Script from 'next/script'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
      <Script
        src="https://example.com/script.js"
        strategy="beforeInteractive"
      />
    </html>
  )
}

----------------------------------------

TITLE: Using next/script Component with src Attribute in Next.js (JSX)
DESCRIPTION: This snippet demonstrates how to correctly use the next/script component with a src attribute to load an external script file.

LANGUAGE: jsx
CODE:
<Script src="https://example.com/analytics.js" />

----------------------------------------

TITLE: Copying Environment Variables Example File
DESCRIPTION: This command copies the example environment variables file to create a local configuration file.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Creating Next.js App with Linaria using PNPM
DESCRIPTION: This command uses PNPM to create a new Next.js application with Linaria styling. It utilizes the 'create next-app' command and specifies the 'with-linaria' example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-linaria with-linaria-app

----------------------------------------

TITLE: Using window.onbeforeunload to Persist App State in Next.js
DESCRIPTION: This code snippet shows how to use the window.onbeforeunload event to persist application state to local storage before page navigation. This is a recommended alternative to the removed Router.onAppUpdated hook.

LANGUAGE: javascript
CODE:
window.onbeforeunload = function (e) {
  // Get the application state (usually from a store like Redux)
  const appState = {}
  localStorage.setItem('app-state', JSON.stringify(appState))
}

----------------------------------------

TITLE: Fuzzponent CLI Options Configuration
DESCRIPTION: Comprehensive list of CLI options for configuring the component generation process, including depth, seed, output directory, component name length constraints, children count limits, and file extension settings.

LANGUAGE: text
CODE:
Options:
      --help       Show help                                           [boolean]
      --version    Show version number                                 [boolean]
  -d, --depth      component hierarchy depth                 [number] [required]
  -s, --seed       prng seed                                 [number] [required]
  -o, --outdir     the directory where components should be written
     [string] [default: "/Users/timneutkens/projects/next.js/bench/nested-deps"]
      --minLen     the smallest acceptable component name length
                                                          [number] [default: 18]
      --maxLen     the largest acceptable component name length
                                                          [number] [default: 24]
      --minChild   the smallest number of acceptable component children
                                                           [number] [default: 4]
      --maxChild   the largest number of acceptable component children
                                                          [number] [default: 80]
      --extension  extension to use for generated components
                                                       [string] [default: "jsx"]

----------------------------------------

TITLE: Configuring Environment Variables for Prepr
DESCRIPTION: Example of how to set up the environment variables for Prepr API access and preview mode.

LANGUAGE: bash
CODE:
PREPRIO_API=https://graphql.prepr.io/graphql
PREPRIO_PRODUCTION_TOKEN='your Production access token'
PREPRIO_PREVIEW_TOKEN='your Preview access token'
PREPRIO_PREVIEW_SECRET='your secret id'

----------------------------------------

TITLE: Installing Next.js Portal Example with NPX
DESCRIPTION: Command to create a new Next.js application with Portals example using NPX create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-portals with-portals-app

----------------------------------------

TITLE: Installing Next.js REST API Example with PNPM
DESCRIPTION: Creates a new Next.js application with REST API routes example using PNPM package manager

LANGUAGE: bash
CODE:
pnpm create next-app --example api-routes-rest api-routes-rest-app

----------------------------------------

TITLE: Async Cookies API Migration
DESCRIPTION: Examples showing how to migrate the cookies API to use async/await syntax in Next.js 15.

LANGUAGE: typescript
CODE:
import { cookies } from 'next/headers'

// Before
const cookieStore = cookies()
const token = cookieStore.get('token')

// After
const cookieStore = await cookies()
const token = cookieStore.get('token')

----------------------------------------

TITLE: Setting Environment Variables for Ghost CMS Integration
DESCRIPTION: Example of environment variables needed to connect Next.js with a Ghost CMS instance. These variables should be set in a .env.local file.

LANGUAGE: bash
CODE:
GHOST_API_URL=...
GHOST_API_KEY=...

----------------------------------------

TITLE: Linking Xata Workspace
DESCRIPTION: This command initializes and links the project with a Xata workspace.

LANGUAGE: sh
CODE:
xata init

----------------------------------------

TITLE: Module Evaluation
DESCRIPTION: Simple module evaluation string declaration

LANGUAGE: javascript
CODE:
"module evaluation";

----------------------------------------

TITLE: Running Stencil Component Tests
DESCRIPTION: Command to execute unit tests for the components.

LANGUAGE: bash
CODE:
npm test

----------------------------------------

TITLE: Creating Next.js App with Paste and TypeScript using yarn
DESCRIPTION: This command creates a new Next.js application with Paste and TypeScript using yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-paste-typescript with-paste-typescript-app

----------------------------------------

TITLE: Next.js Configuration Error Example
DESCRIPTION: Example of a terminal error message showing a common configuration typo where 'rewrites' is misspelled as 'rewritess'.

LANGUAGE: bash
CODE:
The root value has an unexpected property, rewritess, which is not in the list of allowed properties

----------------------------------------

TITLE: Installing Next.js with Algolia using bun
DESCRIPTION: Creates a new Next.js application with Algolia React InstantSearch integration using bunx create-next-app command.

LANGUAGE: bash
CODE:
bunx create-next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app

----------------------------------------

TITLE: Implementing Stylesheets in Next.js Custom Document Component
DESCRIPTION: Demonstrates the correct way to add stylesheets in Next.js using a custom Document component. This approach ensures proper stylesheet loading during server-side rendering and maintains compatibility with React Server Components. The functional component syntax is preferred over class syntax for future compatibility.

LANGUAGE: jsx
CODE:
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html>
      <Head>
        <link rel="stylesheet" href="..." />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}

----------------------------------------

TITLE: Creating Next.js App with React Hook Form using NPX
DESCRIPTION: Command to bootstrap a new Next.js application with React Hook Form integration using NPX create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-react-hook-form with-react-hook-form-app

----------------------------------------

TITLE: Creating Next.js App with CORS API Routes using NPX
DESCRIPTION: Command to create a new Next.js application with API routes and CORS support using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example api-routes-cors api-routes-cors-app

----------------------------------------

TITLE: Transforming Anonymous Components in JavaScript
DESCRIPTION: Example of transforming anonymous components into named components for Fast Refresh compatibility in JavaScript.

LANGUAGE: javascript
CODE:
export default function () {
  return <div>Hello World</div>
}

LANGUAGE: javascript
CODE:
export default function MyComponent() {
  return <div>Hello World</div>
}

----------------------------------------

TITLE: Updating getStaticProps for Preview Mode in Next.js
DESCRIPTION: This snippet shows how to update getStaticProps to support preview mode, including checking for preview status and modifying API requests.

LANGUAGE: javascript
CODE:
export async function getStaticProps(context) {
  // If context.preview is true, append "/preview" to the API endpoint
  // to request draft data instead of published data. This will vary
  // based on which headless CMS you're using.
  const res = await fetch(`https://.../${context.preview ? 'preview' : ''}`)
  // ...
}

----------------------------------------

TITLE: Installing Next.js Storyblok Blog with NPM
DESCRIPTION: Command to create a new Next.js application with Storyblok integration using NPM package manager.

LANGUAGE: bash
CODE:
npx create-next-app --example cms-storyblok cms-storyblok-app

----------------------------------------

TITLE: Creating Next.js App with React Hook Form using PNPM
DESCRIPTION: Command to bootstrap a new Next.js application with React Hook Form integration using PNPM create command.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-react-hook-form with-react-hook-form-app

----------------------------------------

TITLE: Installing NPM Dependencies Example in Next.js
DESCRIPTION: Demonstrates how to properly import and install an npm package (SWR) as a dependency.

LANGUAGE: javascript
CODE:
import useSWR from 'swr'

----------------------------------------

TITLE: Creating Next.js App with SSR Caching Example using NPX
DESCRIPTION: This command uses npx to create a new Next.js application with the ssr-caching example. It bootstraps a project named 'ssr-caching-app' using the create-next-app tool.

LANGUAGE: bash
CODE:
npx create-next-app --example ssr-caching ssr-caching-app

----------------------------------------

TITLE: Export Handling in Next.js Development Environment
DESCRIPTION: This snippet demonstrates how exports are handled in a Next.js development environment. It shows the export of variables 'a' and 'b', including re-exports from a special Turbopack variable assertion.

LANGUAGE: javascript
CODE:
const a = "a";
export { a };
export { a as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

const b = "b";
export { b };
export { b as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};


----------------------------------------

TITLE: Configuring GraphQL Mesh for PetStore API in YAML
DESCRIPTION: This YAML configuration file sets up GraphQL Mesh to translate the PetStore REST API to a GraphQL API. It specifies the source name, handler type, base URL, and path to the OpenAPI specification file.

LANGUAGE: yaml
CODE:
sources:
  - name: PetStore
    handler:
      newOpenapi:
        baseUrl: https://petstore.swagger.io/v2/
        oasFilePath: https://petstore.swagger.io/v2/swagger.json

----------------------------------------

TITLE: Creating Next.js App with Paste and TypeScript using npx
DESCRIPTION: This command creates a new Next.js application with Paste and TypeScript using npx and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-paste-typescript with-paste-typescript-app

----------------------------------------

TITLE: Creating Next.js App with React Native Web using Yarn
DESCRIPTION: Command to initialize a new Next.js application with React Native Web integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-react-native-web with-react-native-web-app

----------------------------------------

TITLE: Client Component Parameter Handling
DESCRIPTION: Shows how to use searchParams and params in a Client Component using React's use function.

LANGUAGE: tsx
CODE:
'use client'

import { use } from 'react'

export default function Page({
  params,
  searchParams,
}: {
  params: Promise<{ slug: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const { slug } = use(params)
  const { query } = use(searchParams)
}

LANGUAGE: jsx
CODE:
'use client'

import { use } from 'react'

export default function Page({ params, searchParams }) {
  const { slug } = use(params)
  const { query } = use(searchParams)
}

----------------------------------------

TITLE: Disabling SSR for Browser-API Components in Next.js
DESCRIPTION: Demonstrates how to disable server-side rendering for components that use browser-only APIs using dynamic imports.

LANGUAGE: jsx
CODE:
import dynamic from 'next/dynamic'

const DynamicComponentWithNoSSR = dynamic(
  () => import('../components/BrowserOnlyComponent'),
  { ssr: false }
)

export default function Page() {
  return (
    <div>
      <h1>My page</h1>
      <DynamicComponentWithNoSSR />
    </div>
  )
}

----------------------------------------

TITLE: Creating Next.js App with SVG Components using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with SVG component support. It utilizes the 'create-next-app' tool with the 'svg-components' example template.

LANGUAGE: bash
CODE:
yarn create next-app --example svg-components svg-components-app

----------------------------------------

TITLE: Creating Post Entry with GraphQL Mutation
DESCRIPTION: This GraphQL mutation creates a new Post entry in the Grafbase backend with a title, slug, and associated comment.

LANGUAGE: graphql
CODE:
mutation {
  postCreate(
    input: {
      title: "I love Next.js!"
      slug: "i-love-nextjs"
      comments: [{ create: { message: "me too!" } }]
    }
  ) {
    post {
      id
      slug
    }
  }
}

----------------------------------------

TITLE: Implementing Redirect in getStaticProps with TypeScript
DESCRIPTION: This snippet demonstrates how to properly implement a redirect in the getStaticProps function using TypeScript. It fetches data from the GitHub API and redirects to a 404 page if the data is not available.

LANGUAGE: tsx
CODE:
import type { InferGetStaticPropsType, GetStaticProps } from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getStaticProps = (async (context) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()

  if (!repo) {
    return {
      redirect: {
        permanent: false, // or true
        destination: '/404',
      },
    }
  }

  return { props: { repo } }
}) satisfies GetStaticProps<{
  repo: Repo
}>

export default function Page({
  repo,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  return repo.stargazers_count
}

----------------------------------------

TITLE: Configuring Enterspeed Blog List Schema
DESCRIPTION: JSON schema configuration for the blog list view in Enterspeed, defining how blog post data should be structured and displayed.

LANGUAGE: json
CODE:
{
  "sourceEntityTypes": ["blog"],
  "route": {
    "handles": ["blogList"]
  },
  "properties": {
    "blogListItems": {
      "type": "array",
      "input": {
        "$lookup": {
          "operator": "equals",
          "sourceEntityProperty": "originParentId",
          "matchValue": "{originId}"
        }
      },
      "items": {
        "type": "object",
        "properties": {
          "url": "{item.url}",
          "title": "{item.properties.title}",
          "featuredImage": "{item.properties.featuredImage}",
          "date": "{item.properties.date}",
          "excerpt": "{item.properties.excerpt}",
          "author": {
            "type": "object",
            "properties": {
              "name": "{item.properties.author.name}",
              "avatar": {
                "type": "object",
                "properties": {
                  "url": "{item.properties.author.avatar.url}"
                }
              }
            }
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Installing and Running Development Server with NPM
DESCRIPTION: Commands to install dependencies and start the development server using NPM package manager.

LANGUAGE: sh
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Creating Next.js App with CORS API Routes using Yarn
DESCRIPTION: Command to create a new Next.js application with API routes and CORS support using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example api-routes-cors api-routes-cors-app

----------------------------------------

TITLE: Using Built-in Next.js Font in JavaScript
DESCRIPTION: Example of transforming @next/font imports to use the built-in next/font in JavaScript.

LANGUAGE: javascript
CODE:
import { Inter } from '@next/font/google'

LANGUAGE: javascript
CODE:
import { Inter } from 'next/font/google'

----------------------------------------

TITLE: Creating Next.js App with SSR Caching Example using PNPM
DESCRIPTION: This command uses pnpm to create a new Next.js application with the ssr-caching example. It bootstraps a project named 'ssr-caching-app' using the create-next-app tool.

LANGUAGE: bash
CODE:
pnpm create next-app --example ssr-caching ssr-caching-app

----------------------------------------

TITLE: Creating Next.js Project with Fauna Integration using pnpm
DESCRIPTION: This command utilizes pnpm to initialize a new Next.js project with Fauna integration. It creates a new directory called 'with-fauna-app' containing the necessary project files.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-fauna with-fauna-app

----------------------------------------

TITLE: Declaring and Exporting Variables in JavaScript
DESCRIPTION: This snippet declares string variables 'dog' and 'cat', then exports constants 'DOG' and 'CHIMERA'. CHIMERA is created by concatenating 'cat' and 'dog' strings.

LANGUAGE: javascript
CODE:
const dog = "dog";

const cat = "cat";

export const DOG = dog;

export const CHIMERA = cat + dog;

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to copy the environment variables template file to create a local configuration.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Creating Next.js Project with Lingui using npm
DESCRIPTION: Command to create a new Next.js project with Lingui integration using npm package manager.

LANGUAGE: bash
CODE:
npx create-next-app --example with-lingui with-lingui-app

----------------------------------------

TITLE: Implementing getStaticPaths with Conflicting Paths in Next.js
DESCRIPTION: This snippet demonstrates a catch-all route with getStaticPaths that includes a conflicting path. The conflicting path '/hello/world' should be removed to resolve the error.

LANGUAGE: jsx
CODE:
export const getStaticProps = () => ({ props: {} })

export const getStaticPaths = () => ({
  paths: [
    '/hello/world', // <-- this conflicts with the /hello/world.js page, remove to resolve error
    '/another',
  ],
  fallback: false,
})

export default function CatchAllPage() {
  return 'Catch-all page'
}

----------------------------------------

TITLE: Creating Next.js PWA Project with pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js project with the progressive web app example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example progressive-web-app progressive-web-app

----------------------------------------

TITLE: Converting React Class Component to Function Component in Next.js
DESCRIPTION: Shows how to convert a class-based React component to a function component to make it compatible with Server Components.

LANGUAGE: jsx
CODE:
export default class Page extends React.Component {
  render() {
    return <p>Hello world</p>
  }
}

LANGUAGE: jsx
CODE:
export default function Page() {
  return <p>Hello world</p>
}

----------------------------------------

TITLE: Installing Turso CLI on macOS
DESCRIPTION: Command to install the Turso CLI on macOS using Homebrew.

LANGUAGE: bash
CODE:
brew install tursodatabase/tap/turso

----------------------------------------

TITLE: Creating Next.js App with API Routes Middleware using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with API routes middleware example.

LANGUAGE: bash
CODE:
yarn create next-app --example api-routes-middleware api-routes-middleware-app

----------------------------------------

TITLE: Using Sass Variables in Next.js App Router
DESCRIPTION: Example of importing and using Sass variables in a Next.js page component using the App Router.

LANGUAGE: jsx
CODE:
import variables from './variables.module.scss'

export default function Page() {
  return <h1 style={{ color: variables.primaryColor }}>Hello, Next.js!</h1>
}

----------------------------------------

TITLE: Implementing a Hybrid AMP Page with Conditional Rendering
DESCRIPTION: Example of creating a hybrid AMP page that serves both AMP and regular HTML versions. Uses the useAmp hook to conditionally render different components based on whether the page is being served as AMP or regular HTML.

LANGUAGE: jsx
CODE:
import { useAmp } from 'next/amp'

export const config = { amp: 'hybrid' }

function About(props) {
  const isAmp = useAmp()

  return (
    <div>
      <h3>My AMP About Page!</h3>
      {isAmp ? (
        <amp-img
          width="300"
          height="300"
          src="/my-img.jpg"
          alt="a cool image"
          layout="responsive"
        />
      ) : (
        <img width="300" height="300" src="/my-img.jpg" alt="a cool image" />
      )}
    </div>
  )
}

export default About

----------------------------------------

TITLE: Creating Next.js App with Server Side Rendered Portals using Yarn
DESCRIPTION: Command to bootstrap a Next.js application with Server Side Rendered Portals using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-portals-ssr with-portals-ssr-app

----------------------------------------

TITLE: Creating Next.js App with Styletron using NPX
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with Styletron integration.

LANGUAGE: bash
CODE:
npx create-next-app --example with-styletron with-styletron-app

----------------------------------------

TITLE: Configuring Next.js Custom Server for Production Mode
DESCRIPTION: This JavaScript snippet demonstrates how to configure a custom Next.js server to start in production mode when the NODE_ENV environment variable is set to 'production'. This helps prevent the 'Build Directory Not Writeable' error in production environments.

LANGUAGE: javascript
CODE:
const dev = process.env.NODE_ENV !== 'production'
const app = next({ dev })

----------------------------------------

TITLE: Creating Next.js Project with Plasmic Integration using npm
DESCRIPTION: Command to create a new Next.js project with Plasmic integration using npm. This sets up the project structure and installs necessary dependencies.

LANGUAGE: bash
CODE:
npx create-next-app --example cms-plasmic cms-plasmic-app

----------------------------------------

TITLE: Module Export Configuration
DESCRIPTION: Shows the module export configuration with multiple named exports and their corresponding part references.

LANGUAGE: javascript
CODE:
export { b } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export b"
};
export { a } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export a"
};
export { order } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export order"
};

----------------------------------------

TITLE: Installing Apollo Server and Client Auth Example with Yarn
DESCRIPTION: Command to create a new Next.js application using the Apollo Server and Client Auth example template with Yarn.

LANGUAGE: bash
CODE:
yarn create next-app --example api-routes-apollo-server-and-client-auth api-routes-apollo-server-and-client-auth-app

----------------------------------------

TITLE: Creating Next.js App with Legacy Image Component using pnpm
DESCRIPTION: This command uses pnpm to set up a new Next.js application with the legacy image component example.

LANGUAGE: bash
CODE:
pnpm create next-app --example image-legacy-component image-app

----------------------------------------

TITLE: Exporting Default Middleware Function in Next.js
DESCRIPTION: This snippet demonstrates how to export a default middleware function in Next.js. It's an alternative to named export and shows the basic structure of the middleware function.

LANGUAGE: javascript
CODE:
// Example of default export
export default function middleware(request) {
  // Middleware logic
}

----------------------------------------

TITLE: Defining getStaticPaths for a Blog Page in Next.js
DESCRIPTION: This snippet shows the implementation of getStaticPaths for a blog page with dynamic routes. It defines two static paths for the blog.

LANGUAGE: jsx
CODE:
export const getStaticPaths = () => ({
  paths: ['/blog/conflicting', '/blog/another'],
  fallback: false,
})

export default function Blog() {
  return 'Blog!'
}

----------------------------------------

TITLE: Creating Next.js App with Panda CSS using PNPM
DESCRIPTION: Command to create a new Next.js application with Panda CSS template using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example panda-css panda-css-app

----------------------------------------

TITLE: Installing Next.js with EdgeDB Template using PNPM
DESCRIPTION: Command to create a new Next.js application with EdgeDB template using pnpm create

LANGUAGE: bash
CODE:
pnpm create next-app --example with-edgedb with-edgedb-app

----------------------------------------

TITLE: Configuring VSCode for MDX Preview in Next.js Docs
DESCRIPTION: This JSON snippet configures VSCode to associate .mdx files with markdown for preview purposes. It should be added to the user's settings.json file.

LANGUAGE: json
CODE:
{
  "files.associations": {
    "*.mdx": "markdown"
  }
}

----------------------------------------

TITLE: Creating Next.js App with TinaCMS Template using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js project with the TinaCMS template. It sets up the same blog structure as the npm command, but uses Yarn as the package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example cms-tina cms-tina-app

----------------------------------------

TITLE: Creating Next.js App with API Routes Middleware using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with API routes middleware example.

LANGUAGE: bash
CODE:
pnpm create next-app --example api-routes-middleware api-routes-middleware-app

----------------------------------------

TITLE: Configuring Full URL Fetch Logging in Next.js
DESCRIPTION: Configure Next.js to log the full URL of fetch requests in development mode. Enables detailed logging of data fetching operations using the fetch API.

LANGUAGE: javascript
CODE:
module.exports = {
  logging: {
    fetches: {
      fullUrl: true,
    },
  },
}

----------------------------------------

TITLE: Generate dotCMS API Token using cURL
DESCRIPTION: Command to generate an authentication token for dotCMS demo site that expires in 10 days. The token is required for API access and should be stored in environment variables.

LANGUAGE: curl
CODE:
curl -H "Content-Type:application/json" --insecure  -X POST -d  '{ "user":"admin@dotcms.com", "password":"admin", "expirationDays": 10 }' http://demo.dotcms.com:8080/api/v1/authentication/api-token

----------------------------------------

TITLE: Creating Next.js App with Remove Console Example using npx
DESCRIPTION: This command uses npx to create a new Next.js application with the remove-console example. It initializes a project named 'remove-console-app' based on the remove-console template.

LANGUAGE: bash
CODE:
npx create-next-app --example remove-console remove-console-app

----------------------------------------

TITLE: Wrapping Client Component Loader for Performance Tracking in Next.js
DESCRIPTION: Defines a function that wraps the Next.js client component loader to measure and track load times and counts. It uses the performance API if available.

LANGUAGE: javascript
CODE:
export function wrapClientComponentLoader(ComponentMod) {
    if (!('performance' in globalThis)) {
        return ComponentMod.__next_app__;
    }
    return {
        require: (...args)=>{
            const startTime = performance.now();
            if (clientComponentLoadStart === 0) {
                clientComponentLoadStart = startTime;
            }
            try {
                clientComponentLoadCount += 1;
                return ComponentMod.__next_app__.require(...args);
            } finally{
                clientComponentLoadTimes += performance.now() - startTime;
            }
        },
        loadChunk: (...args)=>{
            const startTime = performance.now();
            try {
                clientComponentLoadCount += 1;
                return ComponentMod.__next_app__.loadChunk(...args);
            } finally{
                clientComponentLoadTimes += performance.now() - startTime;
            }
        }
    };
}

----------------------------------------

TITLE: Enhancing Console Output with Stack Traces
DESCRIPTION: Function that wraps console methods to add stack traces and formatting markers to console output for better debugging.

LANGUAGE: javascript
CODE:
const improveConsole = (name, stream, addStack)=>{
    const original = console[name];
    const stdio = process[stream];
    console[name] = (...args)=>{
        stdio.write(`TURBOPACK_OUTPUT_B\n`);
        original(...args);
        if (addStack) {
            const stack = new Error().stack?.replace(/^.+\n.+\n/, "") + "\n";
            stdio.write("TURBOPACK_OUTPUT_S\n");
            stdio.write(stack);
        }
        stdio.write("TURBOPACK_OUTPUT_E\n");
    };
};

----------------------------------------

TITLE: Creating Next.js App with FingerprintJS Pro using npx
DESCRIPTION: This command uses npx to create a new Next.js application with FingerprintJS Pro integration. It initializes the project with the necessary template and dependencies.

LANGUAGE: bash
CODE:
npx create-next-app --example with-fingerprintjs-pro with-fingerprintjs-pro-app

----------------------------------------

TITLE: Incorrect Usage of Next.js Link Component with Multiple Children
DESCRIPTION: This code snippet demonstrates the incorrect way of using the Next.js Link component by passing multiple children, which causes an error.

LANGUAGE: jsx
CODE:
import Link from 'next/link'

export default function Home() {
  return (
    <Link href="/about">
      <a>To About</a>
      <a>Second To About</a>
    </Link>
  )
}

----------------------------------------

TITLE: Creating Next.js MDX App with npx
DESCRIPTION: This command uses npx to create a new Next.js application with MDX support. It utilizes the create-next-app package and specifies the MDX example template.

LANGUAGE: bash
CODE:
npx create-next-app --example mdx mdx-app

----------------------------------------

TITLE: Object-based PostCSS Configuration in JavaScript
DESCRIPTION: An alternative object-based format for postcss.config.js that supports other non-Next.js tools in the same project.

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: {
    'postcss-flexbugs-fixes': {},
    'postcss-preset-env': {
      autoprefixer: {
        flexbox: 'no-2009',
      },
      stage: 3,
      features: {
        'custom-properties': false,
      },
    },
  },
}

----------------------------------------

TITLE: Testing Rate Limit API Response
DESCRIPTION: Example curl commands demonstrating the rate limit behavior, showing both a successful request and a rate-limited request with their respective headers

LANGUAGE: bash
CODE:
curl http://localhost:3000/api/user -I
HTTP/1.1 200 OK
X-RateLimit-Limit: 10
X-RateLimit-Remaining: 9

curl http://localhost:3000/api/user -I
HTTP/1.1 429 Too Many Requests
X-RateLimit-Limit: 10
X-RateLimit-Remaining: 0

----------------------------------------

TITLE: Testing Rate Limit API Response
DESCRIPTION: Example curl commands demonstrating the rate limit behavior, showing both a successful request and a rate-limited request with their respective headers

LANGUAGE: bash
CODE:
curl http://localhost:3000/api/user -I
HTTP/1.1 200 OK
X-RateLimit-Limit: 10
X-RateLimit-Remaining: 9

curl http://localhost:3000/api/user -I
HTTP/1.1 429 Too Many Requests
X-RateLimit-Limit: 10
X-RateLimit-Remaining: 0

----------------------------------------

TITLE: Using next/image Component with basePath in Next.js
DESCRIPTION: This example demonstrates how to use the next/image component in a Next.js application with basePath configured. The basePath needs to be manually added to the src attribute.

LANGUAGE: jsx
CODE:
import Image from 'next/image'

function Home() {
  return (
    <>
      <h1>My Homepage</h1>
      <Image
        src="/docs/me.png"
        alt="Picture of the author"
        width={500}
        height={500}
      />
      <p>Welcome to my homepage!</p>
    </>
  )
}

export default Home

----------------------------------------

TITLE: Bundle Analyzer with next-compose-plugins
DESCRIPTION: Integration of bundle analyzer with next-compose-plugins for managing multiple Next.js plugins together.

LANGUAGE: javascript
CODE:
const withPlugins = require('next-compose-plugins')\nconst withBundleAnalyzer = require('@next/bundle-analyzer')({\n  enabled: process.env.ANALYZE === 'true',\n})\n\nmodule.exports = withPlugins([\n  [withBundleAnalyzer],\n  // your other plugins here\n])

----------------------------------------

TITLE: Creating Next.js App with Layout Component Example using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application based on the layout-component example. It sets up the project structure and installs necessary dependencies.

LANGUAGE: bash
CODE:
yarn create next-app --example layout-component layout-component-app

----------------------------------------

TITLE: Activity Log Output Example
DESCRIPTION: Sample output from Temporal activity logging showing inventory reservation and payment processing.

LANGUAGE: text
CODE:
Reserving 2 of item B102
Charging user 123 for 2 of item B102

----------------------------------------

TITLE: Re-exporting Default Component and Data Fetching Functions in Next.js
DESCRIPTION: These snippets demonstrate how to correctly re-export the default component along with data fetching functions like getServerSideProps, getStaticProps, and getStaticPaths from other pages in Next.js.

LANGUAGE: jsx
CODE:
export { default, getServerSideProps } from './example-b'

LANGUAGE: jsx
CODE:
export { default, getStaticProps } from './example-b'

LANGUAGE: jsx
CODE:
export { default, getStaticProps, getStaticPaths } from './example-b/[dynamic]'

----------------------------------------

TITLE: Importing and Using Content Component in Next.js
DESCRIPTION: This snippet shows how to import a custom 'Content' component from a local file and use it in a Next.js component or page. It demonstrates the basic structure of component-based architecture in Next.js.

LANGUAGE: JavaScript
CODE:
import { Content } from './content'

<Content />

----------------------------------------

TITLE: Creating IPC Connection in JavaScript
DESCRIPTION: This function creates an IPC connection using a TCP socket. It handles packet queuing, sending, and receiving of messages.

LANGUAGE: JavaScript
CODE:
function createIpc(port) {
    const socket = createConnection(port, "127.0.0.1");
    const packetQueue = [];
    const recvPromiseResolveQueue = [];
    function pushPacket(packet) {
        const recvPromiseResolve = recvPromiseResolveQueue.shift();
        if (recvPromiseResolve != null) {
            recvPromiseResolve(JSON.parse(packet.toString("utf8")));
        } else {
            packetQueue.push(packet);
        }
    }
    // ... (rest of the function)
}

----------------------------------------

TITLE: Implementing Client-Side URL Updates in Next.js
DESCRIPTION: Shows how to implement shallow routing for client-side URL updates using window.history and Next.js hooks. Useful for maintaining SPA-like navigation without full page reloads.

LANGUAGE: typescript
CODE:
'use client'

import { useSearchParams } from 'next/navigation'

export default function SortProducts() {
  const searchParams = useSearchParams()

  function updateSorting(sortOrder: string) {
    const urlSearchParams = new URLSearchParams(searchParams.toString())
    urlSearchParams.set('sort', sortOrder)
    window.history.pushState(null, '', `?${urlSearchParams.toString()}`)
  }

  return (
    <>
      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>
      <button onClick={() => updateSorting('desc')}>Sort Descending</button>
    </>
  )
}

----------------------------------------

TITLE: Creating Next.js App with Mocha Using Yarn
DESCRIPTION: Command to create a new Next.js application with Mocha testing setup using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-mocha with-mocha-app

----------------------------------------

TITLE: Configuring View Transitions in Next.js Config
DESCRIPTION: Configuration setup in next.config.js to enable the experimental View Transitions API. This requires setting the viewTransition flag to true in the experimental options.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    viewTransition: true,
  },
}

module.exports = nextConfig

----------------------------------------

TITLE: Installing MDX Remote Example with npm
DESCRIPTION: Command to create a new Next.js application using the mdx-remote example template with npm.

LANGUAGE: bash
CODE:
npx create-next-app --example mdx-remote mdx-remote-app

----------------------------------------

TITLE: Installing Next.js Project with Yarn
DESCRIPTION: Command to create a new Next.js project using Yarn and the Docker Compose example template.

LANGUAGE: bash
CODE:
yarn create next-app --example with-docker-compose with-docker-compose-app

----------------------------------------

TITLE: Configuring Custom AMP Validator in Next.js
DESCRIPTION: Configuration example for setting up a custom AMP validator in next.config.js

LANGUAGE: js
CODE:
module.exports = {
  amp: {
    validator: './custom_validator.js',
  },
}

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to install dependencies and start the Next.js development server using either npm or yarn

LANGUAGE: bash
CODE:
npm install
npm run dev
# or
yarn install
yarn dev

----------------------------------------

TITLE: Installing with PNPM
DESCRIPTION: Command to create a new Next.js application with rate limiting using pnpm create

LANGUAGE: bash
CODE:
pnpm create next-app --example api-routes-rate-limit api-routes-rate-limit-app

----------------------------------------

TITLE: Exporting Icon Content Type in TypeScript
DESCRIPTION: This snippet shows how to export the contentType configuration for an icon in TypeScript, which sets the MIME type of the icon.

LANGUAGE: tsx
CODE:
export const contentType = 'image/png'

export default function Icon() {}

----------------------------------------

TITLE: Creating Next.js App with Firebase Hosting using Yarn
DESCRIPTION: Command to bootstrap a new Next.js application with Firebase Hosting integration using Yarn

LANGUAGE: bash
CODE:
yarn create next-app --example with-firebase-hosting with-firebase-hosting-app

----------------------------------------

TITLE: Using Imported Icons in JSX Components in Next.js
DESCRIPTION: This snippet demonstrates how to use the imported Cart and Search icons within JSX components. The icons are used as self-closing components, which is a common pattern for icon usage in React-based applications.

LANGUAGE: JSX
CODE:
<Cart />

<Search />

----------------------------------------

TITLE: Creating Prerender State in Next.js
DESCRIPTION: Initializes a prerender state object with debug skeleton flag and empty dynamic accesses array.

LANGUAGE: JavaScript
CODE:
function createPrerenderState(isDebugSkeleton) {
    return {
        isDebugSkeleton,
        dynamicAccesses: []
    };
}

----------------------------------------

TITLE: Installing Next.js 14 with PNPM
DESCRIPTION: Command to upgrade Next.js to version 14 using PNPM package manager. Installs Next.js, React 18, React DOM 18, and ESLint configuration.

LANGUAGE: bash
CODE:
pnpm i next@next-14 react@18 react-dom@18 && pnpm i eslint-config-next@next-14 -D

----------------------------------------

TITLE: Installing Next.js Project with Temporal using NPX
DESCRIPTION: Command to create a new Next.js project with Temporal integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-temporal next-temporal-app

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the application locally for development and testing.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Creating Next.js Image Component Example with pnpm
DESCRIPTION: This command utilizes pnpm to bootstrap a new Next.js project using the image-component example. It creates a project called 'image-app' with all the necessary configuration to showcase the Image Component functionality.

LANGUAGE: bash
CODE:
pnpm create next-app --example image-component image-app

----------------------------------------

TITLE: MDX Documentation Comment
DESCRIPTION: A documentation comment indicating that the content is generated and should be edited at the source, with instructions for using the PagesOnly component for router-specific content.

LANGUAGE: markdown
CODE:
{/* DO NOT EDIT. The content of this doc is generated from the source above. To edit the content of this page, navigate to the source page in your editor. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}

----------------------------------------

TITLE: Creating Next.js App with Basic Export using npm
DESCRIPTION: This command uses npx to run create-next-app, creating a new Next.js project with basic export configuration. It specifies the example to use and the name of the new application.

LANGUAGE: bash
CODE:
npx create-next-app --example basic-export basic-export-app

----------------------------------------

TITLE: Importing Button Component in MDX
DESCRIPTION: Demonstrates how to import a React component and use it within an MDX file. Shows both the import statement and component usage with JSX syntax.

LANGUAGE: javascript
CODE:
import Button from '../components/button.js'

LANGUAGE: jsx
CODE:
<Button>👋 Hello</Button>

----------------------------------------

TITLE: Installing MDX Dependencies for Next.js
DESCRIPTION: Commands for installing required MDX packages using npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install @next/mdx @mdx-js/loader @mdx-js/react

LANGUAGE: bash
CODE:
yarn add @next/mdx @mdx-js/loader @mdx-js/react

----------------------------------------

TITLE: Running Relay Compilation
DESCRIPTION: Commands to run Relay ahead-of-time compilation, which should be executed after any changes to components with Relay queries

LANGUAGE: bash
CODE:
npm run relay
# or
yarn relay
# or
pnpm relay

----------------------------------------

TITLE: Creating Next.js App with CXS using PNPM
DESCRIPTION: Command to create a new Next.js application with CXS styling using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-cxs with-cxs-app

----------------------------------------

TITLE: Cleaning the Next.js Project
DESCRIPTION: This command cleans the Next.js project, removing built files and dependencies. It's useful when a fresh build is needed.

LANGUAGE: bash
CODE:
pnpm clean

----------------------------------------

TITLE: Module Partitioning in JavaScript
DESCRIPTION: These snippets show how the module is partitioned for development and production. They include variable declarations, imports, exports, and assertions for TurboPack.

LANGUAGE: javascript
CODE:
const dog = "dog";
export { dog as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};


LANGUAGE: javascript
CODE:
import { a as dog } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
const cat = "cat";
const CHIMERA = cat + dog;
export { CHIMERA };
export { cat as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { CHIMERA as c } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};


LANGUAGE: javascript
CODE:
import { a as dog } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
const DOG = dog;
export { DOG };
export { DOG as d } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};


LANGUAGE: javascript
CODE:
"module evaluation";


LANGUAGE: javascript
CODE:
export { CHIMERA } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export CHIMERA"
};
export { DOG } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: "export DOG"
};


----------------------------------------

TITLE: Running swc-ast-explorer with Shell Input
DESCRIPTION: This snippet demonstrates how to use the swc-ast-explorer tool by piping JavaScript code into it via the command line. It uses echo to provide a simple console.log statement as input.

LANGUAGE: shell
CODE:
echo "console.log('hello')" | cargo run -p swc-ast-explorer

----------------------------------------

TITLE: Migrating ImageResponse Imports in JavaScript
DESCRIPTION: Example of transforming ImageResponse imports from next/server to next/og in JavaScript.

LANGUAGE: javascript
CODE:
import { ImageResponse } from 'next/server'

LANGUAGE: javascript
CODE:
import { ImageResponse } from 'next/og'

----------------------------------------

TITLE: Installing Next.js Shallow Routing Example with Yarn
DESCRIPTION: Creates a new Next.js application with shallow routing functionality using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-shallow-routing with-shallow-routing-app

----------------------------------------

TITLE: Configuring assetPrefix in Next.js Configuration
DESCRIPTION: This snippet demonstrates how to set up the assetPrefix in next.config.mjs based on the development phase. It uses the PHASE_DEVELOPMENT_SERVER constant to determine if the code is running in development mode and sets the assetPrefix accordingly.

LANGUAGE: javascript
CODE:
// @ts-check
import { PHASE_DEVELOPMENT_SERVER } from 'next/constants'

export default (phase) => {
  const isDev = phase === PHASE_DEVELOPMENT_SERVER
  /**
   * @type {import('next').NextConfig}
   */
  const nextConfig = {
    assetPrefix: isDev ? undefined : 'https://cdn.mydomain.com',
  }
  return nextConfig
}

----------------------------------------

TITLE: Creating Next.js Image Component Example with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js project based on the image-component example. It initializes a project named 'image-app' with all required setup for demonstrating the Image Component.

LANGUAGE: bash
CODE:
yarn create next-app --example image-component image-app

----------------------------------------

TITLE: Creating Next.js App with Fela using Yarn
DESCRIPTION: Command to create a new Next.js application with Fela integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-fela with-fela-app

----------------------------------------

TITLE: Error Handling and Loading State in Next.js Form Submission
DESCRIPTION: This code demonstrates how to handle errors and display loading states during form submission in a Next.js application. It uses React state to manage loading and error states.

LANGUAGE: typescript
CODE:
import React, { useState, FormEvent } from 'react'

export default function Page() {
  const [isLoading, setIsLoading] = useState<boolean>(false)
  const [error, setError] = useState<string | null>(null)

  async function onSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault()
    setIsLoading(true)
    setError(null) // Clear previous errors when a new request starts

    try {
      const formData = new FormData(event.currentTarget)
      const response = await fetch('/api/submit', {
        method: 'POST',
        body: formData,
      })

      if (!response.ok) {
        throw new Error('Failed to submit the data. Please try again.')
      }

      // Handle response if necessary
      const data = await response.json()
      // ...
    } catch (error) {
      // Capture the error message to display to the user
      setError(error.message)
      console.error(error)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div>
      {error && <div style={{ color: 'red' }}>{error}</div>}
      <form onSubmit={onSubmit}>
        <input type="text" name="name" />
        <button type="submit" disabled={isLoading}>
          {isLoading ? 'Loading...' : 'Submit'}
        </button>
      </form>
    </div>
  )
}

LANGUAGE: javascript
CODE:
import React, { useState } from 'react'

export default function Page() {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)

  async function onSubmit(event) {
    event.preventDefault()
    setIsLoading(true)
    setError(null) // Clear previous errors when a new request starts

    try {
      const formData = new FormData(event.currentTarget)
      const response = await fetch('/api/submit', {
        method: 'POST',
        body: formData,
      })

      if (!response.ok) {
        throw new Error('Failed to submit the data. Please try again.')
      }

      // Handle response if necessary
      const data = await response.json()
      // ...
    } catch (error) {
      // Capture the error message to display to the user
      setError(error.message)
      console.error(error)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div>
      {error && <div style={{ color: 'red' }}>{error}</div>}
      <form onSubmit={onSubmit}>
        <input type="text" name="name" />
        <button type="submit" disabled={isLoading}>
          {isLoading ? 'Loading...' : 'Submit'}
        </button>
      </form>
    </div>
  )
}

----------------------------------------

TITLE: Creating Next.js WebWorker Project with pnpm
DESCRIPTION: Command to create a new Next.js project with WebWorker support using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-web-worker with-web-worker-app

----------------------------------------

TITLE: Creating Next.js App with Catch All Routes using PNPM
DESCRIPTION: Command to create a new Next.js application with catch-all routes example using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example catch-all-routes catch-all-routes-app

----------------------------------------

TITLE: Declaring MIT License for formdata-polyfill in undici fetch body
DESCRIPTION: This comment declares the MIT License for the formdata-polyfill library used in undici's fetch body implementation. It credits Jimmy Wärting as the author.

LANGUAGE: JavaScript
CODE:
/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */

----------------------------------------

TITLE: Stripe Webhook Forwarding
DESCRIPTION: Command to start Stripe CLI webhook forwarding to local development server.

LANGUAGE: bash
CODE:
stripe listen --forward-to localhost:3000/api/webhooks

----------------------------------------

TITLE: Creating Span Error Handler
DESCRIPTION: Utility function to handle and record errors in spans, including support for bubbled errors and status code setting.

LANGUAGE: javascript
CODE:
const closeSpanWithError = (span, error)=>{
    if (isBubbledError(error) && error.bubble) {
        span.setAttribute('next.bubble', true);
    } else {
        if (error) {
            span.recordException(error);
        }
        span.setStatus({
            code: SpanStatusCode.ERROR,
            message: error == null ? void 0 : error.message
        });
    }
    span.end();
};

----------------------------------------

TITLE: Dynamic Function Calls and Imports in JavaScript
DESCRIPTION: Demonstrates various dynamic operations including spawning child processes, dynamic requires and imports, and file system operations. These operations use variables or expressions that cannot be determined at compile-time, making static analysis challenging.

LANGUAGE: JavaScript
CODE:
child_process.spawnSync(unknown);
child_process.spawnSync("node", unknown);
child_process.spawnSync("node", [unknown, unknown]);

require(unknown);

import(unknown);

fs.readFileSync(unknown);

----------------------------------------

TITLE: Configuring Browserslist in Next.js
DESCRIPTION: Default Browserslist configuration in package.json for Next.js, specifying minimum browser versions supported by the framework. Includes Chrome 64+, Edge 79+, Firefox 67+, Opera 51+, and Safari 12+.

LANGUAGE: json
CODE:
{
  "browserslist": [
    "chrome 64",
    "edge 79",
    "firefox 67",
    "opera 51",
    "safari 12"
  ]
}

----------------------------------------

TITLE: Installing Next.js Shallow Routing Example with PNPM
DESCRIPTION: Creates a new Next.js application with shallow routing functionality using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-shallow-routing with-shallow-routing-app

----------------------------------------

TITLE: Installing Next.js WordPress Example with pnpm
DESCRIPTION: Command to create a new Next.js application using the WordPress CMS example template with pnpm.

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-wordpress cms-wordpress-app

----------------------------------------

TITLE: Using HTTPS in Next.js Development
DESCRIPTION: Shows how to enable HTTPS for local development in Next.js, including options for custom certificates.

LANGUAGE: bash
CODE:
next dev --experimental-https

LANGUAGE: bash
CODE:
next dev --experimental-https --experimental-https-key ./certificates/localhost-key.pem --experimental-https-cert ./certificates/localhost.pem

----------------------------------------

TITLE: Creating Next.js App with npm for Bug Reproduction
DESCRIPTION: This command uses npx to create a new Next.js app using the reproduction template. It's used to set up a minimal environment for reproducing bugs in Next.js.

LANGUAGE: bash
CODE:
npx create-next-app --example reproduction-template reproduction-app

----------------------------------------

TITLE: Running Storybook for Next.js Dev Overlay
DESCRIPTION: Command to start the Storybook server for local development of the Next.js dev overlay UI components.

LANGUAGE: bash
CODE:
pnpm storybook

----------------------------------------

TITLE: Next.js MDX Configuration with Plugins
DESCRIPTION: Configuration setup with remark and rehype plugin support for enhanced MDX functionality.

LANGUAGE: javascript
CODE:
const withMDX = require('@next/mdx')({
  options: {
    remarkPlugins: [],
    rehypePlugins: [],
  },
})
module.exports = withMDX()

----------------------------------------

TITLE: Installing Next.js Auth0 App with Yarn
DESCRIPTION: Creates a new Next.js application with Auth0 integration using yarn create command.

LANGUAGE: bash
CODE:
yarn create next-app --example auth0 auth0-app

----------------------------------------

TITLE: TurboPack Module Integration
DESCRIPTION: Shows how modules are structured and connected using TurboPack's module system. Includes import assertions and part references.

LANGUAGE: javascript
CODE:
import { a as order } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
export { order as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

----------------------------------------

TITLE: Running Tests with pnpm
DESCRIPTION: This command runs the Jest tests in a Next.js project using pnpm.

LANGUAGE: bash
CODE:
pnpm test

----------------------------------------

TITLE: Hoisting User-Defined Exports
DESCRIPTION: Uses the hoist function to extract and export user-defined functions and configurations from the userland module.

LANGUAGE: JavaScript
CODE:
export default hoist(userland, 'default');
export const getStaticProps = hoist(userland, 'getStaticProps');
export const getStaticPaths = hoist(userland, 'getStaticPaths');
export const getServerSideProps = hoist(userland, 'getServerSideProps');
export const config = hoist(userland, 'config');
export const reportWebVitals = hoist(userland, 'reportWebVitals');
export const unstable_getStaticProps = hoist(userland, 'unstable_getStaticProps');
export const unstable_getStaticPaths = hoist(userland, 'unstable_getStaticPaths');
export const unstable_getStaticParams = hoist(userland, 'unstable_getStaticParams');
export const unstable_getServerProps = hoist(userland, 'unstable_getServerProps');
export const unstable_getServerSideProps = hoist(userland, 'unstable_getServerSideProps');

----------------------------------------

TITLE: Executing Dynamic Child Process in Node.js
DESCRIPTION: This snippet demonstrates the use of child_process.spawnSync() with a dynamic argument, which is flagged as a potential security risk (TP1005 lint warning).

LANGUAGE: JavaScript
CODE:
child_process.spawnSync(unknown);

----------------------------------------

TITLE: Implementing customAlphabet Function for Nanoid
DESCRIPTION: Defines the customAlphabet function to create a custom ID generator with a specified alphabet and size.

LANGUAGE: javascript
CODE:
let customAlphabet = (alphabet, size)=>customRandom(alphabet, size, random);

----------------------------------------

TITLE: Creating Next.js App with Styled-JSX using npx
DESCRIPTION: Command to create a new Next.js application with styled-jsx example using npx and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-styled-jsx with-styled-jsx-app

----------------------------------------

TITLE: Setting Body Size Limit for Server Actions in Next.js
DESCRIPTION: This code snippet shows how to configure the maximum size of the request body for Server Actions in Next.js. It uses the 'serverActions.bodySizeLimit' option to set the limit, which can be specified in bytes or as a string (e.g., '2mb').

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */

module.exports = {
  experimental: {
    serverActions: {
      bodySizeLimit: '2mb',
    },
  },
}

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Commands to install dependencies and start the Next.js development server using either NPM or Yarn.

LANGUAGE: bash
CODE:
npm install
npm run dev

# or

yarn install
yarn dev

----------------------------------------

TITLE: Creating Next.js App with Yoga Design System using npm
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with Yoga Design System integration.

LANGUAGE: bash
CODE:
npx create-next-app --example with-yoga with-yoga-app

----------------------------------------

TITLE: Creating a Next.js App with Public GitHub Example in Bash
DESCRIPTION: Shows how to create a new Next.js application using any public GitHub example. The command requires the GitHub repo URL and the project name.

LANGUAGE: bash
CODE:
npx create-next-app@latest --example "https://github.com/.../" [your-project-name]

----------------------------------------

TITLE: Creating Next.js App with Turso Template using PNPM
DESCRIPTION: Command to create a new Next.js application using the 'with-turso' example template via PNPM.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-turso with-turso-app

----------------------------------------

TITLE: Building WebAssembly Bindings for Next.js Integration
DESCRIPTION: Command to build WebAssembly bindings for integration with Next.js, using pnpm as the package manager.

LANGUAGE: sh
CODE:
pnpm build-wasm

----------------------------------------

TITLE: Tracking Dynamic Data Access in Next.js
DESCRIPTION: Tracks dynamic data access in Next.js, handling various scenarios such as cache callbacks, errors, and postponing.

LANGUAGE: JavaScript
CODE:
function trackDynamicDataAccessed(store, expression) {
    const pathname = getPathname(store.urlPathname);
    if (store.isUnstableCacheCallback) {
        throw new Error(`Route ${pathname} used "${expression}" inside a function cached with "unstable_cache(...)". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use "${expression}" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/app/api-reference/functions/unstable_cache`);
    } else if (store.dynamicShouldError) {
        throw new StaticGenBailoutError(`Route ${pathname} with \`dynamic = "error"\` couldn't be rendered statically because it used \`${expression}\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    } else if (store.prerenderState) {
        postponeWithTracking(store.prerenderState, expression, pathname);
    } else {
        store.revalidate = 0;
        if (store.isStaticGeneration) {
            const err = new DynamicServerError(`Route ${pathname} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`);
            store.dynamicUsageDescription = expression;
            store.dynamicUsageStack = err.stack;
            throw err;
        }
    }
}

----------------------------------------

TITLE: Development Module Part 1
DESCRIPTION: Variable declaration and export in development environment

LANGUAGE: javascript
CODE:
var a;
export { a as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

----------------------------------------

TITLE: Exporting Shared Object with Side Effect in JavaScript
DESCRIPTION: Declares and exports a 'shared' object with a property 'effect' that pushes the string 'b' to the 'order' array. This operation has side effects on the 'order' array.

LANGUAGE: javascript
CODE:
export const shared = {
    effect: order.push("b")
};

----------------------------------------

TITLE: Implementing customRandom Function for Nanoid
DESCRIPTION: Defines the customRandom function to generate random IDs using a custom alphabet and size.

LANGUAGE: javascript
CODE:
let customRandom = (alphabet, size, getRandom)=>{
    let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1;
    let step = Math.ceil((1.6 * mask * size) / alphabet.length);
    return ()=>{
        let id = '';
        while(true){
            let bytes = getRandom(step);
            let i = step;
            while(i--){
                id += alphabet[bytes[i] & mask] || '';
                if (id.length === size) return id;
            }
        }
    };
};

----------------------------------------

TITLE: Creating Next.js App with Passport and next-connect using Yarn
DESCRIPTION: Command to bootstrap a new Next.js application with Passport and next-connect authentication using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-passport-and-next-connect with-passport-and-next-connect-app

----------------------------------------

TITLE: Creating Next.js Project with Yarn
DESCRIPTION: Command to bootstrap a new Next.js project using the Umbraco Heartcore template with Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example cms-umbraco-heartcore cms-umbraco-heartcore-app

----------------------------------------

TITLE: JavaScript Next.js Config with Type Checking
DESCRIPTION: Example of adding TypeScript type checking to next.config.js using JSDoc comments for IDE support.

LANGUAGE: javascript
CODE:
// @ts-check

/** @type {import('next').NextConfig} */
const nextConfig = {
  /* config options here */
}

module.exports = nextConfig

----------------------------------------

TITLE: Creating Next.js Project with HLS.js using pnpm
DESCRIPTION: Command to create a new Next.js project with HLS.js integration using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-hls-js with-hls-js-app

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers. The server can be started using npm, yarn, pnpm, or bun.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Making React Class Component Client-Side in Next.js
DESCRIPTION: Demonstrates how to keep using a class component by marking it as a Client Component using the 'use client' directive.

LANGUAGE: jsx
CODE:
export default class Page extends React.Component {
  render() {
    return <p>Hello world</p>
  }
}

LANGUAGE: jsx
CODE:
'use client'

export default class Page extends React.Component {
  render() {
    return <p>Hello world</p>
  }
}

----------------------------------------

TITLE: Creating Next.js App with Custom Babel Config using npx
DESCRIPTION: This command uses npx to create a new Next.js application with a custom Babel configuration. It utilizes the 'with-custom-babel-config' example as a template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-custom-babel-config with-custom-babel-config-app

----------------------------------------

TITLE: Checking Dynamic API Usage in Next.js
DESCRIPTION: Determines if dynamic APIs were used based on the prerender state.

LANGUAGE: JavaScript
CODE:
function usedDynamicAPIs(prerenderState) {
    return prerenderState.dynamicAccesses.length > 0;
}

----------------------------------------

TITLE: Creating Next.js Project with Jest using npx
DESCRIPTION: This command uses npx to create a new Next.js project with Jest integration using the 'with-jest' example template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-jest with-jest-app

----------------------------------------

TITLE: Development Module Part 2
DESCRIPTION: Module import and console log in development environment

LANGUAGE: javascript
CODE:
import { a as a } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
console.log(a);
"module evaluation";

----------------------------------------

TITLE: Creating Image Secure Compute App with PNPM
DESCRIPTION: Command to create a new Next.js application with image secure compute template using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example image-secure-compute image-secure-compute-app

----------------------------------------

TITLE: Wildcard Path Matching Redirect
DESCRIPTION: Demonstrates wildcard path matching in redirects using the * syntax to match multiple path segments.

LANGUAGE: javascript
CODE:
module.exports = {
  async redirects() {
    return [
      {
        source: '/blog/:slug*',
        destination: '/news/:slug*',
        permanent: true,
      },
    ]
  },
}

----------------------------------------

TITLE: Installing Next.js Storyblok Blog with PNPM
DESCRIPTION: Command to create a new Next.js application with Storyblok integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-storyblok cms-storyblok-app

----------------------------------------

TITLE: Creating Next.js Blog Project with Comment Feature
DESCRIPTION: Initialize a new Next.js project with the blog-with-comment template using create-next-app command

LANGUAGE: bash
CODE:
npx create-next-app --example blog-with-comment blog-with-comment-app

----------------------------------------

TITLE: Using External URLs in CSS in Next.js
DESCRIPTION: This CSS snippet demonstrates how to use an external URL for a background image in a CSS class. It shows that URL imports are not limited to JavaScript and can be used in stylesheets as well.

LANGUAGE: css
CODE:
.className {
  background: url('https://example.com/assets/hero.jpg');
}

----------------------------------------

TITLE: Creating Next.js App with Middleware Matcher using PNPM
DESCRIPTION: Command to create a new Next.js application with middleware matcher example using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example middleware-matcher middleware-matcher-app

----------------------------------------

TITLE: Creating Next.js Project with HTTP2 Support using npm
DESCRIPTION: This command uses create-next-app to bootstrap a Next.js project with HTTP2 support using npm.

LANGUAGE: bash
CODE:
npx create-next-app --example with-http2 with-http2-app

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using different package managers. The server enables hot-reloading and development features at http://localhost:3000.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Running Turbo Static Analysis and Neo4j Visualization
DESCRIPTION: Commands for running the Turbo Static analyzer on specified directories and setting up Neo4j to visualize the results. The process includes generating a Cypher graph file and launching a containerized Neo4j instance.

LANGUAGE: bash
CODE:
# pass in the root folders you want to analyze. the system will recursively
# parse all rust code looking for turbo tasks functions
cargo run --release -- ../../../turbo ../../../next.js
# now you can load graph.cypherl into your database of choice, such as neo4j
docker run \
    --publish=7474:7474 --publish=7687:7687 \
    --volume=$HOME/neo4j/data:/data \
    neo4j

----------------------------------------

TITLE: Module Evaluation Placeholder in Next.js
DESCRIPTION: This snippet represents a placeholder for module evaluation in Next.js. It's a simple string that indicates where module evaluation would occur in the actual implementation.

LANGUAGE: javascript
CODE:
"module evaluation";


----------------------------------------

TITLE: Development Environment Setup Commands
DESCRIPTION: Set of commands to run the development environment including Temporal Server, Next.js dev server, and worker processes.

LANGUAGE: bash
CODE:
docker compose up

LANGUAGE: bash
CODE:
npm run dev

LANGUAGE: bash
CODE:
npm run build-worker.watch

LANGUAGE: bash
CODE:
npm run start-worker

----------------------------------------

TITLE: Creating Next.js Project with Firebase Cloud Messaging using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js project with Firebase Cloud Messaging integration. It utilizes the 'create next-app' command with a specific example template.

LANGUAGE: bash
CODE:
yarn create next-app --example with-firebase-cloud-messaging with-firebase-cloud-messaging-app

----------------------------------------

TITLE: Creating Next.js App with Sitecore XM Cloud Template using NPX
DESCRIPTION: Command to create a new Next.js application using the Sitecore XM Cloud template with NPX. This sets up the project structure and dependencies for a Sitecore-integrated Next.js app.

LANGUAGE: bash
CODE:
npx create-next-app --example cms-sitecore-xmcloud cms-sitecore-xmcloud-app

----------------------------------------

TITLE: Configuring serverComponentsHmrCache in Next.js JavaScript Config
DESCRIPTION: This snippet shows how to disable the serverComponentsHmrCache option in a Next.js JavaScript configuration file. It uses a JSDoc type annotation and sets the experimental option to false.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    serverComponentsHmrCache: false, // defaults to true
  },
}

module.exports = nextConfig

----------------------------------------

TITLE: Creating Next.js Project with HTTP2 Support using pnpm
DESCRIPTION: This command uses create-next-app to bootstrap a Next.js project with HTTP2 support using pnpm.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-http2 with-http2-app

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the project locally for development and testing.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Importing Router Hook for App Directory
DESCRIPTION: When working in the app directory, import useRouter from next/navigation instead of next/router to avoid mounting errors.

LANGUAGE: javascript
CODE:
import { useRouter } from 'next/navigation'

----------------------------------------

TITLE: Adding Movie Graph Model to Neo4j Database
DESCRIPTION: Command to add the movie graph model to the Neo4j database using the built-in movie-graph guide.

LANGUAGE: bash
CODE:
:play movie-graph

----------------------------------------

TITLE: Module Evaluation and Exports in JavaScript
DESCRIPTION: This snippet shows the structure of module evaluation and exports in a JavaScript environment. It includes import statements, variable manipulations, and export declarations.

LANGUAGE: javascript
CODE:
import { a as x } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
x = 3;
console.log(x);
"module evaluation";

----------------------------------------

TITLE: Creating Next.js Blog Project with npm
DESCRIPTION: This command uses npm to create a new Next.js blog project using the 'create-next-app' package. It specifies the 'blog' example and names the project 'my-blog'.

LANGUAGE: bash
CODE:
npx create-next-app --example blog my-blog

----------------------------------------

TITLE: Retrieving Client Component Loader Metrics in Next.js
DESCRIPTION: Exports a function to retrieve the current client component loader metrics, including start time, total load time, and load count. Optionally resets the metrics.

LANGUAGE: javascript
CODE:
export function getClientComponentLoaderMetrics(options = {}) {
    const metrics = clientComponentLoadStart === 0 ? undefined : {
        clientComponentLoadStart,
        clientComponentLoadTimes,
        clientComponentLoadCount
    };
    if (options.reset) {
        clientComponentLoadStart = 0;
        clientComponentLoadTimes = 0;
        clientComponentLoadCount = 0;
    }
    return metrics;
}

----------------------------------------

TITLE: Configuring onDemandEntries in Next.js Configuration File
DESCRIPTION: This code snippet demonstrates how to configure onDemandEntries in the next.config.js file. It sets the maxInactiveAge to control how long pages are kept in the buffer, and pagesBufferLength to specify how many pages should be kept simultaneously without being disposed.

LANGUAGE: javascript
CODE:
module.exports = {
  onDemandEntries: {
    // period (in ms) where the server will keep pages in the buffer
    maxInactiveAge: 25 * 1000,
    // number of pages that should be kept simultaneously without being disposed
    pagesBufferLength: 2,
  },
}

----------------------------------------

TITLE: Creating Next.js Project with Rosetta i18n Using pnpm
DESCRIPTION: Command to create a new Next.js project with Rosetta internationalization using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-i18n-rosetta with-i18n-rosetta-app

----------------------------------------

TITLE: Configuring Rewrites with Path Matching in Next.js
DESCRIPTION: This snippet demonstrates how to use path matching in rewrites, including wildcard and regex path matching. It shows how to capture and use parameters in the destination path.

LANGUAGE: javascript
CODE:
module.exports = {
  async rewrites() {
    return [
      {
        source: '/blog/:slug',
        destination: '/news/:slug',
      },
      {
        source: '/blog/:slug*',
        destination: '/news/:slug*',
      },
      {
        source: '/old-blog/:post(\\d{1,})',
        destination: '/blog/:post',
      },
    ]
  },
}

----------------------------------------

TITLE: Installing Next.js Blog Template with NPX
DESCRIPTION: Command to create a new Next.js blog project using the GraphCMS template with NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example cms-graphcms cms-graphcms-app

----------------------------------------

TITLE: Installing Radix UI Next.js Example with Yarn
DESCRIPTION: Creates a new Next.js application with Radix UI components using Yarn package manager. The command initializes a project named 'radix-ui-app' with pre-configured Radix UI examples.

LANGUAGE: bash
CODE:
yarn create next-app --example radix-ui radix-ui-app

----------------------------------------

TITLE: Configuring Sass Options in Next.js JavaScript Configuration
DESCRIPTION: This snippet demonstrates how to set up Sass options in a Next.js project using JavaScript. It configures additional data and sets the Sass implementation to 'sass-embedded'.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */

const sassOptions = {
  additionalData: `
    $var: red;
  `,
}

const nextConfig = {
  sassOptions: {
    ...sassOptions,
    implementation: 'sass-embedded',
  },
}

module.exports = nextConfig

----------------------------------------

TITLE: Creating Next.js App with Active Class Name Example using npx
DESCRIPTION: Command to create a new Next.js application using create-next-app with the active-class-name example template.

LANGUAGE: bash
CODE:
npx create-next-app --example active-class-name active-class-name-app

----------------------------------------

TITLE: Creating Next.js App with next-intl using npx
DESCRIPTION: Command to create a new Next.js application with the next-intl internationalization example using npx and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-i18n-next-intl with-i18n-next-intl-app

----------------------------------------

TITLE: Dynamic File Operations with Unknown Variables
DESCRIPTION: Example of problematic dynamic file operations using unknown variables, which could pose security risks and make code behavior unpredictable. The code shows various dynamic operations including require(), import(), fs.readFileSync(), and URL construction.

LANGUAGE: javascript
CODE:
require(unknown);

import(unknown);

fs.readFileSync(unknown);
readFileSync(unknown);

new URL(unknown, import.meta.url);

----------------------------------------

TITLE: Exporting Variables in JavaScript Module
DESCRIPTION: This snippet demonstrates how to export variables in a JavaScript module. It exports the variable 'y' which is assigned the value of 'x'.

LANGUAGE: javascript
CODE:
export const y = x;

----------------------------------------

TITLE: Complete Next.js App Directory MDX Configuration
DESCRIPTION: Full configuration setup for MDX in Next.js app directory including TypeScript support and plugins.

LANGUAGE: javascript
CODE:
const withMDX = require('@next/mdx')({
  options: {
    remarkPlugins: [],
    rehypePlugins: [],
  },
})

/** @type {import('next').NextConfig} */
const nextConfig = {
  pageExtensions: ['ts', 'tsx', 'js', 'jsx', 'md', 'mdx'],
  reactStrictMode: true,
}

module.exports = withMDX(nextConfig)

----------------------------------------

TITLE: Configuring Custom Cache Handler in Next.js Configuration
DESCRIPTION: This snippet demonstrates how to set up a custom cache handler in the Next.js configuration file. It specifies the path to the custom cache handler and disables the default in-memory caching.

LANGUAGE: javascript
CODE:
module.exports = {
  cacheHandler: require.resolve('./cache-handler.js'),
  cacheMaxMemorySize: 0, // disable default in-memory caching
}

----------------------------------------

TITLE: MongoDB Connection String Format
DESCRIPTION: Example format of a MongoDB Atlas connection string used for connecting to the database

LANGUAGE: text
CODE:
mongodb+srv://<username>:<password>@my-project-abc123.mongodb.net/test?retryWrites=true&w=majority

----------------------------------------

TITLE: Example Environment Variable Configuration
DESCRIPTION: This snippet shows the structure of the .env.local file with placeholders for DatoCMS API token and preview secret.

LANGUAGE: bash
CODE:
DATOCMS_API_TOKEN=...
DATOCMS_PREVIEW_SECRET=...

----------------------------------------

TITLE: Enabling authInterrupts in Next.js JavaScript Configuration
DESCRIPTION: This snippet shows how to enable the experimental authInterrupts option in a Next.js JavaScript configuration file. It sets the authInterrupts flag to true in the experimental section of the module.exports object.

LANGUAGE: javascript
CODE:
module.exports = {
  experimental: {
    authInterrupts: true,
  },
}

----------------------------------------

TITLE: Creating Next.js App with next-intl using Yarn
DESCRIPTION: Command to create a new Next.js application with the next-intl internationalization example using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-i18n-next-intl with-i18n-next-intl-app

----------------------------------------

TITLE: Exporting an Object with References in JavaScript
DESCRIPTION: This snippet creates and exports an object 'dogRef' containing references to the initial 'dog' value, and the getter and setter functions. It demonstrates how to bundle related functionality for export in JavaScript modules.

LANGUAGE: javascript
CODE:
export const dogRef = {
    initial: dog,
    get: getDog,
    set: setDog
};

----------------------------------------

TITLE: Importing Global CSS in Next.js Custom App
DESCRIPTION: This code shows how to import global CSS styles in a Next.js Custom App file (_app.js). It demonstrates the correct way to apply shared styles across all pages and components in a Next.js application.

LANGUAGE: jsx
CODE:
import '../styles.css'

// This default export is required in a new `pages/_app.js` file.
export default function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />
}

----------------------------------------

TITLE: Renaming Environment File
DESCRIPTION: Command to rename the example environment file to create the actual .env file.

LANGUAGE: sh
CODE:
mv .env.example .env

----------------------------------------

TITLE: Importing Dependencies for Nanoid
DESCRIPTION: Imports the required modules: crypto for cryptographic operations and urlAlphabet for the default alphabet used in ID generation.

LANGUAGE: javascript
CODE:
import crypto from 'crypto';
import { urlAlphabet } from './url-alphabet/index.js';

----------------------------------------

TITLE: Creating Next.js Blog Project with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js blog project using the 'create-next-app' package. It specifies the 'blog' example and names the project 'my-blog'.

LANGUAGE: bash
CODE:
yarn create next-app --example blog my-blog

----------------------------------------

TITLE: Running Bundle Analysis Build
DESCRIPTION: Command to run the build process with bundle analysis enabled via environment variable.

LANGUAGE: bash
CODE:
ANALYZE=true yarn build

----------------------------------------

TITLE: Configuring HTML Limited Bots in Next.js with JavaScript
DESCRIPTION: JavaScript configuration example for specifying user agents that should receive blocking metadata. Uses CommonJS module syntax to export the configuration with a pipe-separated string of bot names.

LANGUAGE: javascript
CODE:
module.exports = {
  htmlLimitedBots: 'MySpecialBot|MyAnotherSpecialBot|SimpleCrawler',
}

----------------------------------------

TITLE: Starting Development Server with Yarn
DESCRIPTION: Commands to install dependencies and start the Next.js development server using Yarn

LANGUAGE: bash
CODE:
yarn install
yarn dev

----------------------------------------

TITLE: Configuring Custom Extensions for Turbopack in Next.js
DESCRIPTION: This example illustrates how to configure custom file extensions for module resolution in Turbopack within a Next.js configuration. It shows how to specify a list of extensions to be resolved.

LANGUAGE: javascript
CODE:
module.exports = {
  experimental: {
    turbo: {
      resolveExtensions: [
        '.mdx',
        '.tsx',
        '.ts',
        '.jsx',
        '.js',
        '.mjs',
        '.json',
      ],
    },
  },
}

----------------------------------------

TITLE: Creating Next.js Project with Agility CMS Template - Yarn
DESCRIPTION: Command to bootstrap a new Next.js project using the Agility CMS template with Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example cms-agilitycms cms-agilitycms-app

----------------------------------------

TITLE: Creating Next.js App with Redis Cache Handler (Yarn)
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with Redis cache handler integration using Yarn.

LANGUAGE: bash
CODE:
yarn create next-app --example cache-handler-redis cache-handler-redis-app

----------------------------------------

TITLE: Specifying Root Directory for ESLint in Monorepo
DESCRIPTION: Shows how to configure the root directory for ESLint in a monorepo setup using the 'settings' property in .eslintrc.

LANGUAGE: javascript
CODE:
import { FlatCompat } from '@eslint/eslintrc'

const compat = new FlatCompat({
  // import.meta.dirname is available after Node.js v20.11.0
  baseDirectory: import.meta.dirname,
})

const eslintConfig = [
  ...compat.config({
    extends: ['next'],
    settings: {
      next: {
        rootDir: 'packages/my-app/',
      },
    },
  }),
]

export default eslintConfig

----------------------------------------

TITLE: Installing Next.js Apollo Redux Example with NPX
DESCRIPTION: Command to create a new Next.js application with Apollo and Redux integration using npx create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-apollo-and-redux with-apollo-and-redux-app

----------------------------------------

TITLE: Creating Next.js App with next-intl using pnpm
DESCRIPTION: Command to create a new Next.js application with the next-intl internationalization example using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-i18n-next-intl with-i18n-next-intl-app

----------------------------------------

TITLE: Defining Custom Document Class
DESCRIPTION: Creates a MyDocument class extending Next.js Document, overriding getInitialProps to add custom styles and implementing a custom render method.

LANGUAGE: JavaScript
CODE:
class MyDocument extends Document {
    static async getInitialProps(ctx) {
        const initialProps = await Document.getInitialProps(ctx);
        return {
            ...initialProps,
            styles: _jsxs(_Fragment, {
                children: [
                    initialProps.styles,
                    _jsx("style", {
                        dangerouslySetInnerHTML: {
                            __html: `html { background: hotpink; }`
                        }
                    })
                ]
            })
        };
    }
    render() {
        return _jsxs(Html, {
            children: [
                _jsx(Head, {}),
                _jsxs("body", {
                    children: [
                        _jsx(Main, {}),
                        _jsx(NextScript, {})
                    ]
                })
            ]
        });
    }
}

----------------------------------------

TITLE: Implementing random Function for Nanoid
DESCRIPTION: Defines the random function to generate random bytes using the managed pool.

LANGUAGE: javascript
CODE:
let random = (bytes)=>{
    fillPool((bytes -= 0));
    return pool.subarray(poolOffset - bytes, poolOffset);
};

----------------------------------------

TITLE: Defining Regenerator Runtime Globally in JavaScript
DESCRIPTION: Shows how to ensure that regeneratorRuntime is defined globally in both CommonJS and ECMAScript 2015 environments. This approach is useful when you need the runtime to be available throughout your entire application.

LANGUAGE: javascript
CODE:
// CommonJS
require("regenerator-runtime/runtime");

// ECMAScript 2015
import "regenerator-runtime/runtime";

----------------------------------------

TITLE: Configuring HTML Limited Bots in Next.js with TypeScript
DESCRIPTION: TypeScript configuration example for specifying user agents that should receive blocking metadata. The configuration uses a pipe-separated string of bot names to override the default Next.js bot list.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const config: NextConfig = {
  htmlLimitedBots: 'MySpecialBot|MyAnotherSpecialBot|SimpleCrawler',
}

export default config

----------------------------------------

TITLE: Creating Next.js Project with MSW using Yarn
DESCRIPTION: Command to bootstrap a new Next.js project with MSW integration using create-next-app with Yarn

LANGUAGE: bash
CODE:
yarn create next-app --example with-msw with-msw-app

----------------------------------------

TITLE: Installing AMP Example with NPX
DESCRIPTION: Command to create a new Next.js application with AMP integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example amp amp-app

----------------------------------------

TITLE: Generating Open Graph Images with External Data in Next.js (TypeScript)
DESCRIPTION: This advanced example demonstrates using generateImageMetadata with external data to create multiple Open Graph images for a dynamic route. It includes async functions and data fetching.

LANGUAGE: typescript
CODE:
import { ImageResponse } from 'next/og'
import { getCaptionForImage, getOGImages } from '@/app/utils/images'

export async function generateImageMetadata({
  params,
}: {
  params: { id: string }
}) {
  const images = await getOGImages(params.id)

  return images.map((image, idx) => ({
    id: idx,
    size: { width: 1200, height: 600 },
    alt: image.text,
    contentType: 'image/png',
  }))
}

export default async function Image({
  params,
  id,
}: {
  params: { id: string }
  id: number
}) {
  const productId = (await params).id
  const imageId = id
  const text = await getCaptionForImage(productId, imageId)

  return new ImageResponse(
    (
      <div
        style={
          {
            // ...
          }
        }
      >
        {text}
      </div>
    )
  )
}

----------------------------------------

TITLE: Installing Next.js Auth0 App with PNPM
DESCRIPTION: Creates a new Next.js application with Auth0 integration using pnpm create command.

LANGUAGE: bash
CODE:
pnpm create next-app --example auth0 auth0-app

----------------------------------------

TITLE: Initializing XState Inspector for Client-Side Only
DESCRIPTION: Client-side implementation of XState inspector initialization, ensuring it only runs in browser environment.

LANGUAGE: javascript
CODE:
if (typeof window !== "undefined") {
  inspect({
    /* options */
  });
}

----------------------------------------

TITLE: Setting Page Title in Next.js using next/head
DESCRIPTION: This code snippet demonstrates how to properly set a page title in a Next.js application using the Head component from next/head. It shows the correct implementation within a page or component.

LANGUAGE: jsx
CODE:
import Head from 'next/head'

export function Home() {
  return (
    <div>
      <Head>
        <title>My page title</title>
      </Head>
    </div>
  )
}

----------------------------------------

TITLE: Creating Next.js Project with Umbraco Template
DESCRIPTION: Commands to bootstrap a new Next.js project using the Umbraco CMS template with different package managers

LANGUAGE: bash
CODE:
npx create-next-app --example cms-umbraco umbraco-app

LANGUAGE: bash
CODE:
yarn create next-app --example cms-umbraco umbraco-app

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-umbraco umbraco-app

----------------------------------------

TITLE: TypeScript JSX Import Configuration
DESCRIPTION: Configuration for JSX import source in TypeScript/JavaScript config files.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "jsxImportSource": "theme-ui"
  }
}

----------------------------------------

TITLE: Installing Next.js Auth Example with Yarn
DESCRIPTION: Creates a new Next.js application with authentication using Yarn package manager

LANGUAGE: bash
CODE:
yarn create next-app --example auth auth-app

----------------------------------------

TITLE: Cloning Next.js Repository for Development
DESCRIPTION: GitHub CLI command to clone the Next.js repository, downloading only recent commits from the canary branch for faster cloning.

LANGUAGE: bash
CODE:
gh repo clone vercel/next.js -- --filter=blob:none --branch canary --single-branch

----------------------------------------

TITLE: Configuring Custom Build Directory in Next.js Configuration File
DESCRIPTION: This code snippet shows how to set a custom build directory named 'build' instead of the default '.next' folder in a Next.js project. It demonstrates the use of the distDir option in the next.config.js file.

LANGUAGE: javascript
CODE:
module.exports = {
  distDir: 'build',
}

----------------------------------------

TITLE: Creating Next.js App with Prepr CMS Template (pnpm)
DESCRIPTION: Command to create a new Next.js application using the Prepr CMS template with pnpm.

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-prepr cms-prepr-app

----------------------------------------

TITLE: Installing Next.js 12 and React 17 with yarn
DESCRIPTION: Command to install Next.js version 12, React 17, and related packages using yarn.

LANGUAGE: bash
CODE:
yarn add next@12 react@17 react-dom@17 eslint-config-next@12

----------------------------------------

TITLE: Using Global MDX Component
DESCRIPTION: Example of using an MDX component (Marker) that is globally provided and can be used directly in content without importing.

LANGUAGE: jsx
CODE:
<Marker />

----------------------------------------

TITLE: Creating Next.js Project with Kea using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js project with Kea integration. It utilizes the 'create next-app' command and specifies the 'with-kea' example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-kea with-kea-app

----------------------------------------

TITLE: Creating Static robots.txt in Next.js
DESCRIPTION: Static implementation of robots.txt file in the app directory root. Defines basic crawler rules and sitemap location.

LANGUAGE: txt
CODE:
User-Agent: *
Allow: /
Disallow: /private/

Sitemap: https://acme.com/sitemap.xml

----------------------------------------

TITLE: Installing Next.js Redux Template with Yarn
DESCRIPTION: Creates a new Next.js application with Redux Toolkit integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example with-redux with-redux-app

----------------------------------------

TITLE: Starting Development Server with PNPM
DESCRIPTION: Commands to install dependencies and start the Next.js development server using PNPM

LANGUAGE: bash
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Creating Next.js App with Yarn Workspaces using yarn
DESCRIPTION: Command to bootstrap a Next.js application with Yarn workspaces using yarn create next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-yarn-workspaces with-yarn-workspaces-app

----------------------------------------

TITLE: Forcing Component Remount with Fast Refresh in JavaScript
DESCRIPTION: This code snippet demonstrates how to force a component to remount and reset its state when using Fast Refresh. It uses a special comment directive that is local to the file.

LANGUAGE: javascript
CODE:
// @refresh reset

----------------------------------------

TITLE: Using cacheLife Profile in Components (TypeScript)
DESCRIPTION: Implementation example showing how to use a custom cache profile in a TypeScript component or function using the cacheLife directive and function.

LANGUAGE: typescript
CODE:
import { unstable_cacheLife as cacheLife } from 'next/cache'

export async function getCachedData() {
  'use cache'
  cacheLife('blog')
  const data = await fetch('/api/data')
  return data
}

----------------------------------------

TITLE: Creating Next.js App with Yarn Workspaces using pnpm
DESCRIPTION: Command to bootstrap a Next.js application with Yarn workspaces using pnpm create next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-yarn-workspaces with-yarn-workspaces-app

----------------------------------------

TITLE: Basic Next.js MDX Configuration
DESCRIPTION: Minimal configuration setup for MDX in next.config.js file.

LANGUAGE: javascript
CODE:
const withMDX = require('@next/mdx')()
module.exports = withMDX()

----------------------------------------

TITLE: Setting Apple Icon in HTML Head
DESCRIPTION: This snippet shows the HTML output for setting an Apple icon using the apple-icon file convention in Next.js. The href, type, and sizes attributes are dynamically generated based on the icon file.

LANGUAGE: html
CODE:
<link
  rel="apple-touch-icon"
  href="/apple-icon?<generated>"
  type="image/<generated>"
  sizes="<generated>"
/>

----------------------------------------

TITLE: Creating Next.js Project with Xata Integration using Yarn
DESCRIPTION: This command uses create-next-app to bootstrap a Next.js project with Xata integration using Yarn.

LANGUAGE: sh
CODE:
yarn create next-app --example with-xata with-xata-app

----------------------------------------

TITLE: Unsupported Async Webpack Configuration in Next.js
DESCRIPTION: Example of an unsupported asynchronous webpack configuration in next.config.js that returns a promise. This pattern is not supported in Next.js versions below 12.0.10 but is supported in newer versions.

LANGUAGE: javascript
CODE:
module.exports = {
  webpack: async function (config) {
    return config
  },
}

----------------------------------------

TITLE: Installing Next.js Project with Temporal using PNPM
DESCRIPTION: Command to create a new Next.js project with Temporal integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-temporal next-temporal-app

----------------------------------------

TITLE: Creating a Minimum Working Example of Next.js Link Component
DESCRIPTION: This TypeScript React snippet demonstrates how to use the Next.js Link component. It includes the import statement and a basic usage example.

LANGUAGE: tsx
CODE:
import Link from 'next/link'

export default function Page() {
  return <Link href="/about">About</Link>
}

----------------------------------------

TITLE: Creating Next.js App with Turso Template using Yarn
DESCRIPTION: Command to create a new Next.js application using the 'with-turso' example template via Yarn.

LANGUAGE: bash
CODE:
yarn create next-app --example with-turso with-turso-app

----------------------------------------

TITLE: Configuring cacheLife Profiles in Next.js Config (TypeScript)
DESCRIPTION: Example of setting up a custom 'blog' cache profile in next.config.ts with stale, revalidate, and expire parameters. Requires dynamicIO flag to be enabled.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    dynamicIO: true,
    cacheLife: {
      blog: {
        stale: 3600, // 1 hour
        revalidate: 900, // 15 minutes
        expire: 86400, // 1 day
      },
    },
  },
}

export default nextConfig

----------------------------------------

TITLE: Creating Next.js App with Polyfills using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js project with polyfills support.

LANGUAGE: bash
CODE:
yarn create next-app --example with-polyfills with-polyfills-app

----------------------------------------

TITLE: Installing Next.js 12 and React 17 with pnpm
DESCRIPTION: Command to install Next.js version 12, React 17, and related packages using pnpm.

LANGUAGE: bash
CODE:
pnpm up next@12 react@17 react-dom@17 eslint-config-next@12

----------------------------------------

TITLE: Configuring Next.js for Playwright Test Mode
DESCRIPTION: Updates next.config.js to enable experimental test proxy feature for Playwright integration.

LANGUAGE: javascript
CODE:
module.exports = {
  experimental: {
    testProxy: true,
  },
}

----------------------------------------

TITLE: Creating Next.js App with GraphQL Gateway using Yarn
DESCRIPTION: This bash command uses create-next-app with Yarn to bootstrap a new Next.js application with the GraphQL Gateway example.

LANGUAGE: bash
CODE:
yarn create next-app --example with-graphql-gateway with-graphql-gateway-app

----------------------------------------

TITLE: Using Font Definitions in Next.js Components
DESCRIPTION: Shows how to import and use font definitions in a Next.js component, applying different fonts to various elements.

LANGUAGE: tsx
CODE:
import { inter, lora, sourceCodePro700, greatVibes } from '../styles/fonts'

export default function Page() {
  return (
    <div>
      <p className={inter.className}>Hello world using Inter font</p>
      <p style={lora.style}>Hello world using Lora font</p>
      <p className={sourceCodePro700.className}>
        Hello world using Source_Sans_3 font with weight 700
      </p>
      <p className={greatVibes.className}>My title in Great Vibes font</p>
    </div>
  )
}

----------------------------------------

TITLE: Installing Next.js App with Babel Macros using Yarn
DESCRIPTION: Command to create a new Next.js application with babel-macros configuration using Yarn create next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-babel-macros with-babel-macros-app

----------------------------------------

TITLE: Upgrading Next.js to Version 10 using npm
DESCRIPTION: Command to upgrade Next.js to version 10 using npm package manager. This will update the next package in your project's dependencies.

LANGUAGE: bash
CODE:
npm i next@10

----------------------------------------

TITLE: Creating Todos Table in Turso Database
DESCRIPTION: SQL command to create a 'todos' table in the Turso database with 'id' and 'description' columns.

LANGUAGE: sql
CODE:
CREATE TABLE todos(id INTEGER PRIMARY KEY AUTOINCREMENT, description TEXT NOT NULL)

----------------------------------------

TITLE: Updating Scripts in package.json for Next.js
DESCRIPTION: Example of updated scripts in package.json for running Next.js commands.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  }
}

----------------------------------------

TITLE: Creating a Custom Unauthorized Page
DESCRIPTION: Example of creating a custom unauthorized.js file to display a login UI for unauthenticated users.

LANGUAGE: typescript
CODE:
import Login from '@/app/components/Login'

export default function UnauthorizedPage() {
  return (
    <main>
      <h1>401 - Unauthorized</h1>
      <p>Please log in to access this page.</p>
      <Login />
    </main>
  )
}

LANGUAGE: javascript
CODE:
import Login from '@/app/components/Login'

export default function UnauthorizedPage() {
  return (
    <main>
      <h1>401 - Unauthorized</h1>
      <p>Please log in to access this page.</p>
      <Login />
    </main>
  )
}

----------------------------------------

TITLE: Creating Next.js Project with Jest and Babel using PNPM
DESCRIPTION: Initializes a new Next.js project with Jest and Babel configuration using PNPM create command.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-jest-babel with-jest-babel-app

----------------------------------------

TITLE: Local Development Server Commands
DESCRIPTION: Commands to start the Next.js development server locally without Docker.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev

----------------------------------------

TITLE: Adding Cypress Open Command to package.json in Next.js
DESCRIPTION: This snippet demonstrates how to add the Cypress open command to the scripts section of package.json in a Next.js project.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "cypress:open": "cypress open"
  }
}

----------------------------------------

TITLE: Upgrading Next.js to Version 10 using pnpm
DESCRIPTION: Command to upgrade Next.js to version 10 using pnpm package manager. This will update the next package in your project's dependencies.

LANGUAGE: bash
CODE:
pnpm up next@10

----------------------------------------

TITLE: Creating Next.js App with Supabase Starter Template using yarn
DESCRIPTION: This command creates a new Next.js application using the Supabase Starter template. It uses yarn to execute the create-next-app command with the 'with-supabase' example.

LANGUAGE: bash
CODE:
yarn create next-app --example with-supabase with-supabase-app

----------------------------------------

TITLE: Incorrect React Hook Usage in Server Component
DESCRIPTION: Example showing incorrect implementation where useEffect hook is used in a Server Component without the required 'use client' directive.

LANGUAGE: jsx
CODE:
import { useEffect } from 'react'

export default function Example() {
  useEffect(() => {
    console.log('in useEffect')
  })
  return <p>Hello world</p>
}

----------------------------------------

TITLE: Installing Next.js Contentful Blog with Yarn
DESCRIPTION: Command to create a new Next.js project using the Contentful CMS template with Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example cms-contentful cms-contentful-app

----------------------------------------

TITLE: Using Viewport Export in JavaScript
DESCRIPTION: Example of migrating certain viewport metadata to a separate 'viewport' export in JavaScript.

LANGUAGE: javascript
CODE:
export const metadata = {
  title: 'My App',
  themeColor: 'dark',
  viewport: {
    width: 1,
  },
}

LANGUAGE: javascript
CODE:
export const metadata = {
  title: 'My App',
}

export const viewport = {
  width: 1,
  themeColor: 'dark',
}

----------------------------------------

TITLE: Connecting to Turso Database Shell
DESCRIPTION: Command to connect to the Turso database shell for executing SQL commands.

LANGUAGE: bash
CODE:
turso db shell <database-name>

----------------------------------------

TITLE: Setting Theme Color with Media Queries in Next.js Viewport
DESCRIPTION: Define different theme colors based on the user's color scheme preference using media queries in the viewport configuration.

LANGUAGE: typescript
CODE:
import type { Viewport } from 'next'

export const viewport: Viewport = {
  themeColor: [
    { media: '(prefers-color-scheme: light)', color: 'cyan' },
    { media: '(prefers-color-scheme: dark)', color: 'black' },
  ],
}

----------------------------------------

TITLE: Creating Next.js Project with Agility CMS Template - PNPM
DESCRIPTION: Command to bootstrap a new Next.js project using the Agility CMS template with PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-agilitycms cms-agilitycms-app

----------------------------------------

TITLE: Custom Image Loader Example in Next.js
DESCRIPTION: Example showing how to implement a custom loader function with the Legacy Image component

LANGUAGE: javascript
CODE:
import Image from 'next/legacy/image'

const myLoader = ({ src, width, quality }) => {
  return `https://example.com/${src}?w=${width}&q=${quality || 75}`
}

const MyImage = (props) => {
  return (
    <Image
      loader={myLoader}
      src="me.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}

----------------------------------------

TITLE: Running Next.js Development Server with npm
DESCRIPTION: These commands install dependencies and start the Next.js development server using npm.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Creating Next.js App with Playwright using npx
DESCRIPTION: This command uses npx to create a new Next.js application with Playwright integration. It utilizes the 'create-next-app' package and specifies the 'with-playwright' example template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-playwright with-playwright-app

----------------------------------------

TITLE: Configuring package.json for Debugging
DESCRIPTION: This JSON snippet shows how to update the dev script in package.json to include the --inspect flag for server-side debugging.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "NODE_OPTIONS='--inspect' next dev"
  }
}

----------------------------------------

TITLE: Synchronous Dynamic API Usage (Legacy)
DESCRIPTION: Example of synchronous params access that will trigger warnings in Next.js 15.

LANGUAGE: jsx
CODE:
function Page({ params }) {
  // direct access of `params.id`.
  return <p>ID: {params.id}</p>
}

----------------------------------------

TITLE: Installing Next.js 14 with Bun
DESCRIPTION: Command to upgrade Next.js to version 14 using Bun package manager. Installs Next.js, React 18, React DOM 18, and ESLint configuration.

LANGUAGE: bash
CODE:
bun add next@next-14 react@18 react-dom@18 && bun add eslint-config-next@next-14 -D

----------------------------------------

TITLE: Including Stencil Component via Script Tag
DESCRIPTION: Example of how to include the component using a CDN script tag in HTML. References an unpkg URL for the published component.

LANGUAGE: html
CODE:
<script src='https://unpkg.com/my-component@0.0.1/dist/mycomponent.js'></script>

----------------------------------------

TITLE: Transforming Page and Metadata Functions in TypeScript
DESCRIPTION: Example of transforming synchronous Page and generateMetadata functions to use async/await with dynamic params and searchParams in TypeScript.

LANGUAGE: typescript
CODE:
export default function Page({
  params,
  searchParams,
}: {
  params: { slug: string }
  searchParams: { [key: string]: string | string[] | undefined }
}) {
  const { value } = searchParams
  if (value === 'foo') {
    // ...
  }
}

export function generateMetadata({ params }: { params: { slug: string } }) {
  const { slug } = params
  return {
    title: `My Page - ${slug}`,
  }
}

LANGUAGE: typescript
CODE:
export default async function Page(props: {
  params: Promise<{ slug: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const searchParams = await props.searchParams
  const { value } = searchParams
  if (value === 'foo') {
    // ...
  }
}

export async function generateMetadata(props: {
  params: Promise<{ slug: string }>
}) {
  const params = await props.params
  const { slug } = params
  return {
    title: `My Page - ${slug}`,
  }
}

----------------------------------------

TITLE: Initializing Basic Route Handler in Next.js
DESCRIPTION: Creates a basic Route Handler with a GET endpoint that returns an empty response. This serves as the foundation for implementing draft mode functionality.

LANGUAGE: typescript
CODE:
export async function GET(request: Request) {
  return new Response('')
}

LANGUAGE: javascript
CODE:
export async function GET() {
  return new Response('')
}

----------------------------------------

TITLE: Duplicate Export Name Error in JavaScript Module
DESCRIPTION: Demonstrates an error case where a function is exported with the same name as an imported component, causing a duplicate binding error. The code attempts to import and export 'Table', creating a naming conflict.

LANGUAGE: javascript
CODE:
import { Table } from "./table"

export function Table() {
    console.log(Table)
}


----------------------------------------

TITLE: Running Development Tests
DESCRIPTION: Command to run tests in development mode (next dev) for specific test suite

LANGUAGE: sh
CODE:
pnpm test-dev test/e2e/app-dir/app/

----------------------------------------

TITLE: Installing Next.js Dependency
DESCRIPTION: Command to install the latest version of Next.js as a project dependency.

LANGUAGE: bash
CODE:
npm install next@latest

----------------------------------------

TITLE: Installing Dependencies and Running Next.js Locally
DESCRIPTION: Commands for setting up the project environment. This includes installing dependencies using npm and starting the Next.js development server.

LANGUAGE: shell
CODE:
# Install dependencies
npm install

# Run next locally at localhost:3000
npm run dev

----------------------------------------

TITLE: Upgrading React and React DOM using Yarn
DESCRIPTION: This command upgrades React and React DOM to their latest versions using Yarn.

LANGUAGE: bash
CODE:
yarn add react@latest react-dom@latest

----------------------------------------

TITLE: Creating Next.js App with Server Side Rendered Portals using npm
DESCRIPTION: Command to bootstrap a Next.js application with Server Side Rendered Portals using npm and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-portals-ssr with-portals-ssr-app

----------------------------------------

TITLE: Disabling Static Analysis in Next.js Builds
DESCRIPTION: Next.js configuration to disable TypeScript type checking and ESLint during builds, which can significantly reduce memory usage but may lead to undetected errors.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    // Warning: This allows production builds to successfully complete even if
    // your project has ESLint errors.
    ignoreDuringBuilds: true,
  },
  typescript: {
    // !! WARN !!
    // Dangerously allow production builds to successfully complete even if
    // your project has type errors.
    // !! WARN !!
    ignoreBuildErrors: true,
  },
}

export default nextConfig

----------------------------------------

TITLE: Creating Next.js App with Redis Cache Handler (npm)
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with Redis cache handler integration using npm.

LANGUAGE: bash
CODE:
npx create-next-app --example cache-handler-redis cache-handler-redis-app

----------------------------------------

TITLE: Installing MDX Dependencies
DESCRIPTION: Command to install required packages for using MDX with Next.js

LANGUAGE: bash
CODE:
npm install @next/mdx @mdx-js/loader @mdx-js/react @types/mdx

----------------------------------------

TITLE: Installing Next.js Canary Package
DESCRIPTION: Commands for installing the Next.js canary version using different package managers (npm, yarn, or pnpm). The canary channel provides daily updates with experimental features and bug fixes.

LANGUAGE: bash
CODE:
npm i next@canary
# or
yarn add next@canary
# or
pnpm i next@canary

----------------------------------------

TITLE: Static Generation without Data in Next.js
DESCRIPTION: Illustrates a Next.js page using Static Generation without fetching external data. This page will be pre-rendered at build time without any data dependencies.

LANGUAGE: javascript
CODE:
function About() {
  return <div>About</div>
}

export default About

----------------------------------------

TITLE: Installing Next.js Project with PNPM
DESCRIPTION: Creates a new Next.js project using PNPM's create next-app command with the hello-world example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example hello-world hello-world-app

----------------------------------------

TITLE: Packing and Unpacking Local Next.js Version for Testing
DESCRIPTION: Commands to pack a local Next.js version into a tarball and unpack it into a test project, supporting various options like release mode and skipping build steps.

LANGUAGE: bash
CODE:
pnpm pack-next --release && pnpm unpack-next path/to/project

pnpm pack-next --no-build --release && pnpm unpack-next path/to/project

pnpm patch-next path/to/project

pnpm patch-next --no-build --release path/to/project

----------------------------------------

TITLE: Correct Usage of next/script Outside next/head
DESCRIPTION: This code snippet shows the correct way to use the Script component in Next.js. The Script component is placed outside of the Head component, which is the recommended approach.

LANGUAGE: jsx
CODE:
import Script from 'next/script'
import Head from 'next/head'

export default function Index() {
  return (
    <>
      <Head>
        <title>Next.js</title>
      </Head>
      <Script src="/my-script.js" />
    </>
  )
}

----------------------------------------

TITLE: Creating Root Layout Component
DESCRIPTION: Example of a root layout component in Next.js, which wraps all pages and includes HTML structure.

LANGUAGE: typescript
CODE:
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <head>
        <meta charSet="UTF-8" />
        <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <title>React App</title>
        <meta name="description" content="Web site created..." />
      </head>
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Upgrading Next.js to Canary Version using Package Managers
DESCRIPTION: These commands demonstrate how to upgrade Next.js to the canary version using npm, yarn, pnpm, and bun. Use these when testing out the latest features and bug fixes in the canary release.

LANGUAGE: bash
CODE:
npm i next@canary

LANGUAGE: bash
CODE:
yarn add next@canary

LANGUAGE: bash
CODE:
pnpm add next@canary

LANGUAGE: bash
CODE:
bun add next@canary

----------------------------------------

TITLE: Importing Tailwind CSS Directives
DESCRIPTION: Global CSS configuration to import Tailwind CSS directives.

LANGUAGE: css
CODE:
@import 'tailwindcss';

----------------------------------------

TITLE: Fixed Math.random() Implementation with Suspense
DESCRIPTION: Corrected implementation using connection() and Suspense boundary to properly handle random value generation per request. The code separates the random logic into a dynamic component that runs client-side.

LANGUAGE: jsx
CODE:
import { connection } from 'next/server'

async function ProductsSkeleton() {
  ...
}

export default async function Page() {
  const products = await getCachedProducts();
  return <Suspense fallback={<ProductsSkeleton />}>
    <DynamicProductsView products={products} />
  </Suspense>
}

async function DynamicProductsView() {
  await connection();
  const randomSeed = Math.random()
  const randomizedProducts = randomize(products, randomSeed)
  return <ProductsView products={randomizedProducts} />
}

----------------------------------------

TITLE: Manual MacOS Disk Compression for Next.js Development
DESCRIPTION: Command to manually run APFS disk compression on macOS for Next.js development directories.

LANGUAGE: bash
CODE:
./scripts/macos-compress.sh

----------------------------------------

TITLE: Generating Component Tree with Fuzzponent CLI
DESCRIPTION: Command line example showing how to generate a dependency tree with 3020 files in the components directory using specific depth and seed values.

LANGUAGE: bash
CODE:
fuzzponent --depth 2 --seed 206 --outdir components

----------------------------------------

TITLE: Creating a Root Layout in Next.js App Router
DESCRIPTION: Set up a root layout file (layout.tsx) in the app directory to define the basic HTML structure for all pages in a Next.js application using the App Router.

LANGUAGE: tsx
CODE:
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}

----------------------------------------

TITLE: Enabling PPR in Next.js Config
DESCRIPTION: Configuration snippet showing how to enable the experimental Partial Prerendering Preview feature in next.config.js. This requires using the Next.js canary release for proper functionality.

LANGUAGE: javascript
CODE:
{
  experimental: {
    ppr: true
  }
}

----------------------------------------

TITLE: Using withRouter HOC in Next.js (JSX)
DESCRIPTION: This snippet demonstrates how to use the 'withRouter' Higher-Order Component in Next.js to access router information. It shows how to import 'withRouter', create a React component that uses the injected 'router' prop, and export the component wrapped with 'withRouter'.

LANGUAGE: jsx
CODE:
import { withRouter } from 'next/router'

class Page extends React.Component {
  render() {
    const { router } = this.props
    console.log(router)
    return <div>{router.pathname}</div>
  }
}

export default withRouter(Page)

----------------------------------------

TITLE: Creating Next.js App with Layout Component Example using npx
DESCRIPTION: This command uses npx to create a new Next.js application based on the layout-component example. It sets up the project structure and installs necessary dependencies.

LANGUAGE: bash
CODE:
npx create-next-app --example layout-component layout-component-app

----------------------------------------

TITLE: Handling Expected Errors in Server Actions (TypeScript)
DESCRIPTION: This snippet demonstrates how to handle expected errors in a server action using TypeScript. It shows creating a post and returning an error message if the operation fails.

LANGUAGE: typescript
CODE:
'use server'

export async function createPost(prevState: any, formData: FormData) {
  const title = formData.get('title')
  const content = formData.get('content')

  const res = await fetch('https://api.vercel.app/posts', {
    method: 'POST',
    body: { title, content },
  })
  const json = await res.json()

  if (!res.ok) {
    return { message: 'Failed to create post' }
  }
}

----------------------------------------

TITLE: Creating Next.js App with Orbit Components using npx
DESCRIPTION: This command uses npx to create a new Next.js application with Orbit components integration. It specifies the example template and the output directory name.

LANGUAGE: bash
CODE:
npx create-next-app --example with-orbit-components with-orbit-components-app

----------------------------------------

TITLE: Adding Google Analytics to a Single Next.js Page
DESCRIPTION: This code snippet demonstrates how to implement Google Analytics for a single route in a Next.js application. It uses the GoogleAnalytics component from @next/third-parties/google in a specific page file.

LANGUAGE: jsx
CODE:
import { GoogleAnalytics } from '@next/third-parties/google'

export default function Page() {
  return <GoogleAnalytics gaId="G-XYZ" />
}

----------------------------------------

TITLE: Compiling TypeScript Declaration Files for Next.js
DESCRIPTION: Command to compile declaration files from TypeScript for Next.js development.

LANGUAGE: bash
CODE:
pnpm types

----------------------------------------

TITLE: Server-side Rendering with getServerSideProps in Next.js
DESCRIPTION: Demonstrates how to use getServerSideProps for Server-side Rendering. This function fetches data on each request, allowing for dynamic content that's always up-to-date.

LANGUAGE: javascript
CODE:
function Page({ data }) {
  // Render data...
}

// This gets called on every request
export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch(`https://.../data`)
  const data = await res.json()

  // Pass data to the page via props
  return { props: { data } }
}

export default Page

----------------------------------------

TITLE: Including Stencil Component via Node Modules
DESCRIPTION: Example of how to include the component using local node_modules in HTML after npm installation.

LANGUAGE: html
CODE:
<script src='node_modules/my-component/dist/mycomponent.js'></script>

----------------------------------------

TITLE: Next.js Blog Post Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for a Next.js blog post, defining metadata like title, excerpt, cover image, date, author information, and OG image

LANGUAGE: markdown
CODE:
---
title: "Learn How to Pre-render Pages Using Static Generation with Next.js"
excerpt: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Praesent elementum facilisis leo vel fringilla est ullamcorper eget. At imperdiet dui accumsan sit amet nulla facilities morbi tempus."
coverImage: "/assets/blog/hello-world/cover.jpg"
date: "2020-03-16T05:35:07.322Z"
author:
  name: Tim Neutkens
  picture: "/assets/blog/authors/tim.jpeg"
ogImage:
  url: "/assets/blog/hello-world/cover.jpg"
---

----------------------------------------

TITLE: Problematic Math.random() Usage in Next.js Page
DESCRIPTION: Example showing incorrect implementation where Math.random() is called directly in a page component during prerendering.

LANGUAGE: jsx
CODE:
export default async function Page() {
  const products = await getCachedProducts()
  const randomSeed = Math.random()
  const randomizedProducts = randomize(products, randomSeed)
  return <ProductsView products={randomizedProducts} />
}

----------------------------------------

TITLE: Creating a Basic Next.js Page
DESCRIPTION: Demonstrates how to create a simple Next.js page component. This example shows a basic 'About' page that will be accessible at the '/about' route.

LANGUAGE: javascript
CODE:
function About() {
  return <div>About</div>
}

export default About

----------------------------------------

TITLE: Importing Compatible Router for Pages Directory
DESCRIPTION: For pages directory usage during migration, import from next/compat/router to prevent mounting errors while maintaining pages directory functionality.

LANGUAGE: javascript
CODE:
import { useRouter } from 'next/compat/router'

----------------------------------------

TITLE: Next.js App Directory MDX Components Setup
DESCRIPTION: Required MDX components configuration for the Next.js app directory.

LANGUAGE: javascript
CODE:
export function useMDXComponents(components) {
  return components
  // Allows customizing built-in components, e.g. to add styling.
  // return {
  //   h1: ({ children }) => <h1 style={{ fontSize: "100px" }}>{children}</h1>,
  //   ...components,
  // }
}

----------------------------------------

TITLE: Inspecting Next.js Page Props Using Browser DevTools
DESCRIPTION: Command to inspect the page props data passed to a Next.js page by parsing the __NEXT_DATA__ element content in browser developer tools.

LANGUAGE: bash
CODE:
JSON.parse(document.getElementById("__NEXT_DATA__").textContent)

----------------------------------------

TITLE: Adding SWC Binary Dependencies in package.json
DESCRIPTION: This JSON snippet adds optional dependencies for SWC binaries to the package.json file. It's a troubleshooting step for when the SWC binary fails to load during development.

LANGUAGE: json
CODE:
{
  "optionalDependencies": {
    "@next/swc-linux-x64-gnu": "canary",
    "@next/swc-win32-x64-msvc": "canary",
    "@next/swc-darwin-x64": "canary",
    "@next/swc-darwin-arm64": "canary"
  }
}

----------------------------------------

TITLE: Defining Scenarios in devlow-bench
DESCRIPTION: Basic structure for creating test scenarios using the describe() method. Shows how to define scenario names, properties, and execution functions.

LANGUAGE: javascript
CODE:
import { describe } from "devlow-bench";

describe(
  "my scenario",
  {
    /* property options */
  },
  async (
    {
      /* property values */
    }
  ) => {
    // run the scenario
  }
);

----------------------------------------

TITLE: Implementing Next.js Custom App Component with RSS and Font Preloading
DESCRIPTION: This code snippet defines a custom Next.js App component that includes RSS feed link and font preloading in the document head. It demonstrates how to extend the default Next.js application wrapper to include additional metadata and resource loading.

LANGUAGE: jsx
CODE:
export default function Nextra({ Component, pageProps }) {
  return (
    <>
      <Head>
        <link
          rel="alternate"
          type="application/rss+xml"
          title="RSS"
          href="/feed.xml"
        />
        <link
          rel="preload"
          href="/fonts/Inter-roman.latin.var.woff2"
          as="font"
          type="font/woff2"
          crossOrigin="anonymous"
        />
      </Head>
      <Component {...pageProps} />
    </>
  )
}

----------------------------------------

TITLE: Corrected Page Export Pattern
DESCRIPTION: Example showing the correct page export pattern after fixing the async conversion issues

LANGUAGE: jsx
CODE:
export * from '.../some-file'

----------------------------------------

TITLE: Installing AMP Example with Yarn
DESCRIPTION: Command to create a new Next.js application with AMP integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example amp amp-app

----------------------------------------

TITLE: Running Next.js Development Server with pnpm
DESCRIPTION: These commands install dependencies and start the Next.js development server using pnpm.

LANGUAGE: bash
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Configuring Next Dev Script with Turbopack
DESCRIPTION: Modifies the Next.js development script in package.json to enable Turbopack, which provides faster development builds and hot module replacement.

LANGUAGE: json
CODE:
"next dev --turbopack"

----------------------------------------

TITLE: Creating Next.js App with YouTube Embed Using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with YouTube embed functionality. It utilizes the 'with-youtube-embed' example template to set up the project structure and dependencies.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-youtube-embed with-youtube-embed-app

----------------------------------------

TITLE: Setting Cookies with NextResponse in TypeScript
DESCRIPTION: Demonstrates how to set a cookie on the response using the NextResponse.next() method and the cookies.set() function.

LANGUAGE: typescript
CODE:
// Given incoming request /home
let response = NextResponse.next()
// Set a cookie to hide the banner
response.cookies.set('show-banner', 'false')
// Response will have a `Set-Cookie:show-banner=false;path=/home` header
return response

----------------------------------------

TITLE: Setting Cookies with NextResponse in TypeScript
DESCRIPTION: Demonstrates how to set a cookie on the response using the NextResponse.next() method and the cookies.set() function.

LANGUAGE: typescript
CODE:
// Given incoming request /home
let response = NextResponse.next()
// Set a cookie to hide the banner
response.cookies.set('show-banner', 'false')
// Response will have a `Set-Cookie:show-banner=false;path=/home` header
return response

----------------------------------------

TITLE: Building Next.js Application with MongoDB and Mongoose
DESCRIPTION: Command to build the Next.js application that integrates MongoDB and Mongoose using pnpm. The command targets a specific filter for the build process.

LANGUAGE: shell
CODE:
pnpm run --filter @vercel/turbo-tracing-test-app build

----------------------------------------

TITLE: Creating Next.js App with GSAP using NPX
DESCRIPTION: Command to create a new Next.js application with GSAP integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-gsap with-gsap-app

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to create a local environment variables file from the example template.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Failed ESM Import Resolution in JavaScript
DESCRIPTION: JavaScript code snippet demonstrating a module import that fails due to a non-existent module path. The code attempts to import from 'does-not-exist/path' and use the imported value in console logs.

LANGUAGE: javascript
CODE:
import dne from "does-not-exist/path";

console.log(dne);
console.log({}[dne]);


----------------------------------------

TITLE: Server-side Data Fetching in Next.js
DESCRIPTION: This example shows the recommended approach of fetching data on the server side in Next.js. It demonstrates how to fetch data asynchronously and render it in a component.

LANGUAGE: tsx
CODE:
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}

----------------------------------------

TITLE: Markdown Frontmatter Configuration for Next.js Components Documentation
DESCRIPTION: Frontmatter metadata configuration for the Next.js components API reference page. Defines the title, description and source path for the documentation.

LANGUAGE: markdown
CODE:
---
title: Components
description: API Reference for Next.js built-in components in the Pages Router.
source: app/api-reference/components
---

----------------------------------------

TITLE: Next.js History API Integration - Sort Products
DESCRIPTION: Example of using the native History API pushState method to update URL parameters for sorting products without page reload.

LANGUAGE: typescript
CODE:
'use client'

import { useSearchParams } from 'next/navigation'

export default function SortProducts() {
  const searchParams = useSearchParams()

  function updateSorting(sortOrder: string) {
    const params = new URLSearchParams(searchParams.toString())
    params.set('sort', sortOrder)
    window.history.pushState(null, '', `?${params.toString()}`)
  }

  return (
    <>
      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>
      <button onClick={() => updateSorting('desc')}>Sort Descending</button>
    </>
  )
}

----------------------------------------

TITLE: Cache Control Headers for Static Assets
DESCRIPTION: Default caching headers configuration used by Next.js for assets in the public folder to prevent unsafe caching of potentially changing assets.

LANGUAGE: jsx
CODE:
Cache-Control: public, max-age=0

----------------------------------------

TITLE: Configuring robots.txt for unrestricted access in Next.js
DESCRIPTION: This snippet defines a robots.txt file that allows all user agents to access all parts of the website. It does not impose any restrictions on web crawlers.

LANGUAGE: plaintext
CODE:
User-Agent: *
Disallow:

----------------------------------------

TITLE: Adding Message Listener for HMR in JavaScript
DESCRIPTION: Function to add a callback to the eventCallbacks array for handling HMR messages.

LANGUAGE: javascript
CODE:
export function addMessageListener(cb) {
    eventCallbacks.push(cb);
}

----------------------------------------

TITLE: Installing Next.js Blog Template with NPM
DESCRIPTION: Command to create a new Next.js blog application using the Cosmic CMS template with NPM package manager

LANGUAGE: bash
CODE:
npx create-next-app --example cms-cosmic cms-cosmic-app

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Commands to run the Next.js application in development mode using either npm or yarn.

LANGUAGE: bash
CODE:
npm run dev

# or

yarn dev

----------------------------------------

TITLE: Creating Next.js App with Cookies Management using PNPM
DESCRIPTION: Command to create a new Next.js application with cookie management functionality using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-cookies-next with-cookies-next-app

----------------------------------------

TITLE: Configuring Annotation Mode in Next.js (JavaScript)
DESCRIPTION: JavaScript configuration for enabling opt-in annotation mode for the React Compiler.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    reactCompiler: {
      compilationMode: 'annotation',
    },
  },
}

module.exports = nextConfig

----------------------------------------

TITLE: Creating Next.js Project with Cloudflare Turnstile using pnpm
DESCRIPTION: Command to create a new Next.js project with Cloudflare Turnstile integration using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example cloudflare-turnstile cloudflare-turnstile-app

----------------------------------------

TITLE: Starting Development Server with Yarn
DESCRIPTION: Commands to install dependencies and start the Next.js development server using Yarn.

LANGUAGE: bash
CODE:
yarn install
yarn dev

----------------------------------------

TITLE: Updated Authorization Middleware in Next.js (TypeScript)
DESCRIPTION: An updated version of the authorization Middleware that complies with Next.js v12.2+ requirements. Instead of returning a JSON response, it redirects to a login page with the original path as a query parameter.

LANGUAGE: typescript
CODE:
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { isAuthValid } from './lib/auth'

export function middleware(request: NextRequest) {
  // Example function to validate auth
  if (isAuthValid(request)) {
    return NextResponse.next()
  }

  request.nextUrl.searchParams.set('from', request.nextUrl.pathname)
  request.nextUrl.pathname = '/login'

  return NextResponse.redirect(request.nextUrl)
}

----------------------------------------

TITLE: Updating useMemo Hook with Fast Refresh in JavaScript
DESCRIPTION: This example shows how Fast Refresh handles updates to Hooks with dependencies, specifically useMemo. It demonstrates that the Hook will re-run during Fast Refresh even if dependencies haven't changed.

LANGUAGE: javascript
CODE:
useMemo(() => x * 2, [x])

LANGUAGE: javascript
CODE:
useMemo(() => x * 10, [x])

----------------------------------------

TITLE: Custom AMP Component Version Integration in Next.js
DESCRIPTION: Shows how to specify a custom version of an AMP component using next/head. This example demonstrates manual script inclusion for the amp-timeago component.

LANGUAGE: jsx
CODE:
import Head from 'next/head'

export const config = { amp: true }

function MyAmpPage() {
  const date = new Date()

  return (
    <div>
      <Head>
        <script
          async
          key="amp-timeago"
          custom-element="amp-timeago"
          src="https://cdn.ampproject.org/v0/amp-timeago-0.1.js"
        />
      </Head>

      <p>Some time: {date.toJSON()}</p>
      <amp-timeago
        width="0"
        height="15"
        datetime={date.toJSON()}
        layout="responsive"
      >
        .
      </amp-timeago>
    </div>
  )
}

export default MyAmpPage

----------------------------------------

TITLE: Installing Dependencies (yarn)
DESCRIPTION: Command to install project dependencies using Yarn.

LANGUAGE: bash
CODE:
yarn install

----------------------------------------

TITLE: Creating Next.js App with Apollo Server and Client using Yarn
DESCRIPTION: Command to bootstrap a new Next.js application with Apollo server and client integration using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example api-routes-apollo-server-and-client api-routes-apollo-server-and-client-app

----------------------------------------

TITLE: Creating Next.js App with Custom Server using Yarn
DESCRIPTION: This command uses create-next-app to bootstrap a new Next.js project with a custom server configuration using Yarn.

LANGUAGE: bash
CODE:
yarn create next-app --example custom-server custom-server-app

----------------------------------------

TITLE: Creating Next.js SFCC Project with PNPM
DESCRIPTION: Command to create a new Next.js project with Salesforce Commerce Cloud integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-sfcc nextjs-sfcc-app

----------------------------------------

TITLE: Copying Environment Variables Configuration
DESCRIPTION: Command to copy the example environment variables file to create a local configuration.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Using Link Component with Opt-out Prefetching in Next.js
DESCRIPTION: Demonstrates how to use the Link component in Next.js with the option to disable automatic prefetching. By default, Link now prefetches pages in the background as they appear in view, improving application responsiveness.

LANGUAGE: jsx
CODE:
<Link prefetch={false}>

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to create a local environment variables file from the example template

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Starting Development Server with PNPM
DESCRIPTION: Commands to install dependencies and start the Next.js development server using PNPM.

LANGUAGE: bash
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Creating Next.js App with FingerprintJS Pro using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with FingerprintJS Pro integration. It sets up the project with the required template and dependencies.

LANGUAGE: bash
CODE:
yarn create next-app --example with-fingerprintjs-pro with-fingerprintjs-pro-app

----------------------------------------

TITLE: Creating Next.js App with Linaria using NPX
DESCRIPTION: This command uses NPX to create a new Next.js application with Linaria styling. It utilizes the 'create-next-app' package and specifies the 'with-linaria' example template.

LANGUAGE: bash
CODE:
npx create-next-app --example with-linaria with-linaria-app

----------------------------------------

TITLE: Creating Next.js App with Head Elements Example using npm
DESCRIPTION: This command uses npx to create a new Next.js application based on the head-elements example. It sets up a project named 'head-elements-app' with the necessary configuration for injecting head elements.

LANGUAGE: bash
CODE:
npx create-next-app --example head-elements head-elements-app

----------------------------------------

TITLE: Installing Sharp with npm
DESCRIPTION: Command to install Sharp package using npm package manager for Next.js image optimization

LANGUAGE: bash
CODE:
npm i sharp

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Commands to install dependencies and start the Next.js development server using either NPM or Yarn.

LANGUAGE: bash
CODE:
npm install
npm run dev

# or

yarn install
yarn dev

----------------------------------------

TITLE: Installing Next.js with tsParticles using Yarn
DESCRIPTION: Command to create a new Next.js application with tsParticles integration using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-particles with-particles-app

----------------------------------------

TITLE: Installing Next.js Apollo Redux Example with Yarn
DESCRIPTION: Command to create a new Next.js application with Apollo and Redux integration using yarn create next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-apollo-and-redux with-apollo-and-redux-app

----------------------------------------

TITLE: Creating Next.js Project with Enterspeed Template
DESCRIPTION: Commands to bootstrap a new Next.js project using the Enterspeed CMS template with different package managers.

LANGUAGE: bash
CODE:
npx create-next-app --example cms-enterspeed enterspeed-app

LANGUAGE: bash
CODE:
yarn create next-app --example cms-enterspeed enterspeed-app

LANGUAGE: bash
CODE:
pnpm create next-app -- --example cms-enterspeed enterspeed-app

----------------------------------------

TITLE: Installing Dependencies for Next.js Development
DESCRIPTION: Command to install project dependencies using pnpm for Next.js development.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Creating Next.js Project with Jest using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js project with Jest integration using the 'with-jest' example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-jest with-jest-app

----------------------------------------

TITLE: GitHub Pages URL Format for Deployed Next.js Application
DESCRIPTION: The URL format for accessing a Next.js application deployed to GitHub Pages. Replace placeholders with actual GitHub username and project name.

LANGUAGE: bash
CODE:
https://<github-user-name>.github.io/<github-project-name>/

----------------------------------------

TITLE: Creating Next.js App with Legacy Image Component using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with the legacy image component example.

LANGUAGE: bash
CODE:
yarn create next-app --example image-legacy-component image-app

----------------------------------------

TITLE: Creating Next.js App with Relay Modern using Yarn
DESCRIPTION: Command to create a new Next.js application with Relay Modern template using Yarn package manager

LANGUAGE: bash
CODE:
yarn create next-app --example with-relay-modern with-relay-modern-app

----------------------------------------

TITLE: Creating Next.js Project with Jest using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js project with Jest integration using the 'with-jest' example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-jest with-jest-app

----------------------------------------

TITLE: Installing Next.js WordPress Example with npm
DESCRIPTION: Command to create a new Next.js application using the WordPress CMS example template with npm.

LANGUAGE: bash
CODE:
npx create-next-app --example cms-wordpress cms-wordpress-app

----------------------------------------

TITLE: Publishing Canary Next.js Release
DESCRIPTION: Command for repository maintainers to publish a new canary version. Automatically determines version increment.

LANGUAGE: bash
CODE:
pnpm publish-canary

----------------------------------------

TITLE: Creating Next.js App with Internationalized Routing using npm
DESCRIPTION: Command to create a new Next.js application with internationalized routing template using npm and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example i18n-routing i18n-routing-app

----------------------------------------

TITLE: Installing React Multi-Carousel with PNPM
DESCRIPTION: Command to create a new Next.js application with react-multi-carousel using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-react-multi-carousel with-react-multi-carousel-app

----------------------------------------

TITLE: Creating Next.js MDX App with NPX
DESCRIPTION: Command to create a new Next.js application with MDX pages support using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example mdx-pages mdx-pages-app

----------------------------------------

TITLE: Installing Sharp with PNPM
DESCRIPTION: Command to install the sharp package using PNPM package manager

LANGUAGE: bash
CODE:
pnpm add sharp

----------------------------------------

TITLE: Rendering Tagged Posts Title in Next.js
DESCRIPTION: This snippet demonstrates how to use the TagName component within a JSX heading to display the current tag. It's likely part of a larger page component for showing posts with a specific tag.

LANGUAGE: JSX
CODE:
# Posts Tagged with "<TagName/>"

----------------------------------------

TITLE: Running Specific Benchmark Suite
DESCRIPTION: Command to run a specific benchmark suite, focusing on particular scenarios like Next.js canary Turbo RSC.

LANGUAGE: sh
CODE:
cargo bench -p turbopack-bench -- "bench_hydration/Next\.js canary Turbo RSC"

----------------------------------------

TITLE: Creating Image Secure Compute App with Yarn
DESCRIPTION: Command to create a new Next.js application with image secure compute template using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example image-secure-compute image-secure-compute-app

----------------------------------------

TITLE: Installing @next/plugin-rspack via Yarn
DESCRIPTION: Command to install the Rspack plugin using Yarn package manager.

LANGUAGE: bash
CODE:
yarn add @next/plugin-rspack

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to copy the example environment variables file to create a local configuration.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Valid Basic Config Export in Next.js
DESCRIPTION: Example showing correct basic config export.

LANGUAGE: javascript
CODE:
export const config = {}

----------------------------------------

TITLE: Creating and Exporting PagesRouteModule
DESCRIPTION: Instantiates a PagesRouteModule with the necessary configuration, components, and userland exports, then exports it for use in the Next.js application.

LANGUAGE: JavaScript
CODE:
export const routeModule = new PagesRouteModule({
    definition: {
        kind: RouteKind.PAGES,
        page: 'VAR_DEFINITION_PAGE',
        pathname: 'VAR_DEFINITION_PATHNAME',
        bundlePath: '',
        filename: ''
    },
    components: {
        App,
        Document
    },
    userland
});

----------------------------------------

TITLE: Implementing Interdependent JavaScript Functions
DESCRIPTION: This snippet defines three interdependent functions (c1_1, c1_2, c1_3) that call each other and use the previously defined d1 and d2 functions. These functions demonstrate circular dependencies.

LANGUAGE: javascript
CODE:
export function c1_1() {
    return c1_2();
}

function c1_2() {
    return c1_3(d1);
}

export function c1_3() {
    return c1_1(d2);
}

----------------------------------------

TITLE: Creating Next.js PWA Project with Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js project with the progressive web app example template.

LANGUAGE: bash
CODE:
yarn create next-app --example progressive-web-app progressive-web-app

----------------------------------------

TITLE: Identifying React Fragments with react-is
DESCRIPTION: Shows how to use react-is to check if a value is a React Fragment and determine its type.

LANGUAGE: javascript
CODE:
import React from "react";
import * as ReactIs from 'react-is';

ReactIs.isFragment(<></>); // true
ReactIs.typeOf(<></>) === ReactIs.Fragment; // true

----------------------------------------

TITLE: Installing Next.js App with Babel Macros using NPX
DESCRIPTION: Command to create a new Next.js application with babel-macros configuration using NPX create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-babel-macros with-babel-macros-app

----------------------------------------

TITLE: Async Server Component Implementation
DESCRIPTION: Correct implementation of params access in an async Server Component.

LANGUAGE: jsx
CODE:
async function Page({ params }) {
  // asynchronous access of `params.id`.
  const { id } = await params
  return <p>ID: {id}</p>
}

----------------------------------------

TITLE: GET Route Handler Implementation
DESCRIPTION: Exports a GET function that returns component type information using NextResponse.json()

LANGUAGE: javascript
CODE:
export function GET() {
    return NextResponse.json({
        clientComponent: typeof ClientComponent,
        myModuleClientComponent: typeof MyModuleClientComponent
    });
}

----------------------------------------

TITLE: Initializing Pool Variables for Nanoid
DESCRIPTION: Declares constants and variables used for managing the random byte pool, including the pool size multiplier and pool-related variables.

LANGUAGE: javascript
CODE:
const POOL_SIZE_MULTIPLIER = 128;
let pool, poolOffset;

----------------------------------------

TITLE: Creating Next.js App with SVG Components using pnpm
DESCRIPTION: This command uses pnpm to create a new Next.js application with SVG component support. It utilizes the 'create-next-app' tool with the 'svg-components' example template.

LANGUAGE: bash
CODE:
pnpm create next-app --example svg-components svg-components-app

----------------------------------------

TITLE: Identifying Context Components with react-is
DESCRIPTION: Shows how to use react-is to identify and type-check Context.Provider and Context.Consumer components.

LANGUAGE: javascript
CODE:
import React from "react";
import * as ReactIs from 'react-is';

const ThemeContext = React.createContext("blue");

ReactIs.isContextConsumer(<ThemeContext.Consumer />); // true
ReactIs.isContextProvider(<ThemeContext.Provider />); // true
ReactIs.typeOf(<ThemeContext.Provider />) === ReactIs.ContextProvider; // true
ReactIs.typeOf(<ThemeContext.Consumer />) === ReactIs.ContextConsumer; // true

----------------------------------------

TITLE: Defining Frontmatter in Next.js Markdown
DESCRIPTION: This snippet shows how to define frontmatter in a Next.js markdown file. It includes a title that can be used for page metadata or rendering.

LANGUAGE: markdown
CODE:
---
title: Hello World
---

----------------------------------------

TITLE: Creating Next.js Example README Template in Markdown
DESCRIPTION: Standard README template for Next.js examples that includes project description, deployment instructions, and setup commands using various package managers.

LANGUAGE: markdown
CODE:
# Example Name

Description

## Deploy your own

Deploy the example using [Vercel](https://vercel.com?utm_source=github&utm_medium=readme&utm_campaign=next-example) or preview live with [StackBlitz](https://stackblitz.com/github/vercel/next.js/tree/canary/examples/DIRECTORY_NAME)

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https://github.com/vercel/next.js/tree/canary/examples/DIRECTORY_NAME&project-name=DIRECTORY_NAME&repository-name=DIRECTORY_NAME)

## How to use

Execute [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app) with [npm](https://docs.npmjs.com/cli/init), [Yarn](https://yarnpkg.com/lang/en/docs/cli/create/), [pnpm](https://pnpm.io), or [Bun](https://bun.sh/docs/cli/bunx) to bootstrap the example:

----------------------------------------

TITLE: Effects Array Declaration
DESCRIPTION: Declares and exports an empty effects array for storing effect names

LANGUAGE: javascript
CODE:
export const effects = [];

----------------------------------------

TITLE: Console Log Statement in JavaScript
DESCRIPTION: Console log statement reading and outputting variable 'a'

LANGUAGE: javascript
CODE:
console.log(a);

----------------------------------------

TITLE: Creating Next.js Project with Cypress using PNPM
DESCRIPTION: Command to create a new Next.js project with Cypress testing configuration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-cypress with-cypress-app

----------------------------------------

TITLE: Installing @babel/runtime with yarn
DESCRIPTION: Command to install @babel/runtime package as a production dependency using yarn package manager.

LANGUAGE: sh
CODE:
yarn add @babel/runtime

----------------------------------------

TITLE: Creating Next.js App with Sitefinity CMS Template - NPX
DESCRIPTION: Command to create a new Next.js application using the cms-sitefinity template via npx

LANGUAGE: bash
CODE:
npx create-next-app --example cms-sitefinity cms-sitefinity-app

----------------------------------------

TITLE: Installing MacOS Disk Compression for Next.js Development
DESCRIPTION: Command to install a launch agent for automatic APFS disk compression on macOS for node_modules/ and target/ directories in Next.js development.

LANGUAGE: bash
CODE:
./scripts/LaunchAgents/install-macos-agents.sh

----------------------------------------

TITLE: Development Module Implementation
DESCRIPTION: Development version of the module with effects handling and exports

LANGUAGE: javascript
CODE:
const effects = [];
function effect(name) {
    effects.push(name);
}
export { effect };
export { effects };
export { effects as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};
export { effect as b } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

----------------------------------------

TITLE: Development Module Part 0
DESCRIPTION: Module import and variable assignment in development environment

LANGUAGE: javascript
CODE:
import { a as a } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -1
};
a = 1;

----------------------------------------

TITLE: EdgeDB Remote Migration Command
DESCRIPTION: Command to migrate remote EdgeDB instance schema using DSN connection string

LANGUAGE: bash
CODE:
edgedb migrate --dsn <your-instance-dsn> --tls-security insecure

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 by default.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Creating Next.js App with Paste and TypeScript using pnpm
DESCRIPTION: This command creates a new Next.js application with Paste and TypeScript using pnpm and create-next-app.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-paste-typescript with-paste-typescript-app

----------------------------------------

TITLE: Initializing AppRouteRouteModule Configuration
DESCRIPTION: Creates and configures a new AppRouteRouteModule instance with route definition parameters including kind, page, pathname, filename and bundle path. Sets up route module with userland code and page configuration.

LANGUAGE: javascript
CODE:
const routeModule = new AppRouteRouteModule({
    definition: {
        kind: RouteKind.APP_ROUTE,
        page: 'VAR_DEFINITION_PAGE',
        pathname: 'VAR_DEFINITION_PATHNAME',
        filename: 'VAR_DEFINITION_FILENAME',
        bundlePath: 'VAR_DEFINITION_BUNDLE_PATH'
    },
    resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',
    nextConfigOutput,
    userland
});

----------------------------------------

TITLE: Determining WebSocket Protocol in JavaScript
DESCRIPTION: Function to determine the appropriate WebSocket protocol (ws or wss) based on the asset prefix URL.

LANGUAGE: javascript
CODE:
function getSocketProtocol(assetPrefix) {
    let protocol = location.protocol;
    try {
        protocol = new URL(assetPrefix).protocol;
    } catch (_) {}
    return protocol === "http:" ? "ws" : "wss";
}

----------------------------------------

TITLE: Dev Module Part 0
DESCRIPTION: Initial module part that imports the base module.

LANGUAGE: javascript
CODE:
import './module';

----------------------------------------

TITLE: Creating Next.js App with Elasticsearch using Yarn
DESCRIPTION: Command to create a new Next.js application with Elasticsearch integration using Yarn create next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-elasticsearch with-elasticsearch-app

----------------------------------------

TITLE: Running Small Component Benchmark Test
DESCRIPTION: Command to run benchmark test for a simple stateless component that renders a single h1 element. Executes 3000 HTTP requests.

LANGUAGE: bash
CODE:
npm run bench:stateless

----------------------------------------

TITLE: Installing Dependencies for UI Kitten Compatibility
DESCRIPTION: Command to install necessary dependencies for transpiling packages like @ui-kitten/components

LANGUAGE: bash
CODE:
yarn add -D next-compose-plugins next-transpile-modules

----------------------------------------

TITLE: Defining a Getter Function in JavaScript
DESCRIPTION: This snippet defines a function 'getDog()' that returns the value of the 'dog' variable. It demonstrates the creation of a simple getter function in JavaScript.

LANGUAGE: javascript
CODE:
function getDog() {
    return dog;
}

----------------------------------------

TITLE: Connecting to HMR Server in JavaScript
DESCRIPTION: Function to establish and manage a WebSocket connection for HMR, including handling connection, messages, and disconnection.

LANGUAGE: javascript
CODE:
export function connectHMR(options) {
    const { timeout = 5 * 1000 } = options;
    function init() {
        if (source) source.close();
        console.log("[HMR] connecting...");
        function handleOnline() {
            const connected = {
                type: "turbopack-connected"
            };
            eventCallbacks.forEach((cb)=>{
                cb(connected);
            });
            if (options.log) console.log("[HMR] connected");
        }
        function handleMessage(event) {
            const message = {
                type: "turbopack-message",
                data: JSON.parse(event.data)
            };
            eventCallbacks.forEach((cb)=>{
                cb(message);
            });
        }
        function handleDisconnect() {
            source.close();
            setTimeout(init, timeout);
        }
        const { hostname, port } = location;
        const protocol = getSocketProtocol(options.assetPrefix || "");
        const assetPrefix = options.assetPrefix.replace(/^\/+/, "");
        let url = `${protocol}://${hostname}:${port}${assetPrefix ? `/${assetPrefix}` : ""}`;
        if (assetPrefix.startsWith("http")) {
            url = `${protocol}://${assetPrefix.split("://")[1]}`;
        }
        source = new window.WebSocket(`${url}${options.path}`);
        source.onopen = handleOnline;
        source.onerror = handleDisconnect;
        source.onmessage = handleMessage;
    }
    init();
}

----------------------------------------

TITLE: Dev Module Part 1 with TurboPack
DESCRIPTION: Module part with TurboPack-specific import assertions and variable exports.

LANGUAGE: javascript
CODE:
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 0
};
import { baz } from './module';
export { baz as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

----------------------------------------

TITLE: Installing Next.js Expo TypeScript Project with NPX
DESCRIPTION: Command to create a new Next.js project with Expo and TypeScript using npx create-next-app

LANGUAGE: bash
CODE:
npx create-next-app --example with-expo-typescript with-expo-typescript-app

----------------------------------------

TITLE: Module Production Configuration
DESCRIPTION: Production environment module configuration with optimized imports/exports and module evaluation logic.

LANGUAGE: javascript
CODE:
import { a as x } from "__TURBOPACK_PART__" assert {
    __turbopack_part__: -0
};
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 4
};
console.log(x);
console.log(x);
console.log(x);
"module evaluation";

----------------------------------------

TITLE: Running Vitest Tests with npm
DESCRIPTION: Command to execute Vitest tests using npm

LANGUAGE: bash
CODE:
npm test

----------------------------------------

TITLE: Initializing OpenTelemetry API
DESCRIPTION: Imports OpenTelemetry API and sets it up based on runtime environment (edge or node). Includes fallback to compiled version if main package is not available.

LANGUAGE: javascript
CODE:
let api;
if (process.env.NEXT_RUNTIME === 'edge') {
    api = require('@opentelemetry/api');
} else {
    try {
        api = require('@opentelemetry/api');
    } catch (err) {
        api = require('next/dist/compiled/@opentelemetry/api');
    }
}

----------------------------------------

TITLE: Creating Postponed Abort Signal in Next.js
DESCRIPTION: Creates an AbortSignal that is triggered when rendering is postponed in Next.js.

LANGUAGE: JavaScript
CODE:
function createPostponedAbortSignal(reason) {
    assertPostpone();
    const controller = new AbortController();
    try {
        React.unstable_postpone(reason);
    } catch (x) {
        controller.abort(x);
    }
    return controller.signal;
}

----------------------------------------

TITLE: Retrieving Environment Variables Without Defaults in JavaScript
DESCRIPTION: Defines and exports the getEnvWithoutDefaults function, which retrieves environment variables by parsing the global object without applying default values.

LANGUAGE: javascript
CODE:
export function getEnvWithoutDefaults() {
    return parseEnvironment(_globalThis);
}

----------------------------------------

TITLE: Configuring Next.js for Package Transpilation
DESCRIPTION: Configuration setup for Next.js to properly transpile external packages using next-compose-plugins and next-transpile-modules

LANGUAGE: javascript
CODE:
const { withExpo } = require("@expo/next-adapter");
const withPlugins = require("next-compose-plugins");
const withTM = require("next-transpile-modules")([
  // Add the name of your package here...
  "@ui-kitten/components",
]);

module.exports = withPlugins([withTM, [withExpo, { projectRoot: __dirname }]], {
  // ...
});

----------------------------------------

TITLE: Marking Dynamic Scope in Next.js
DESCRIPTION: Handles dynamic scope marking for different scenarios in Next.js, including error throwing and postponing.

LANGUAGE: JavaScript
CODE:
function markCurrentScopeAsDynamic(store, expression) {
    const pathname = getPathname(store.urlPathname);
    if (store.isUnstableCacheCallback) {
        return;
    } else if (store.dynamicShouldError) {
        throw new StaticGenBailoutError(`Route ${pathname} with \`dynamic = "error"\` couldn't be rendered statically because it used \`${expression}\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
    } else if (store.prerenderState) {
        postponeWithTracking(store.prerenderState, expression, pathname);
    } else {
        store.revalidate = 0;
        if (store.isStaticGeneration) {
            const err = new DynamicServerError(`Route ${pathname} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`);
            store.dynamicUsageDescription = expression;
            store.dynamicUsageStack = err.stack;
            throw err;
        }
    }
}

----------------------------------------

TITLE: Running Next.js in Development Mode with npm
DESCRIPTION: These commands install dependencies and start the Next.js development server using npm.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Retrieving Environment Variables with Defaults in JavaScript
DESCRIPTION: Defines and exports the getEnv function, which retrieves environment variables by parsing the global object and merging them with default values.

LANGUAGE: javascript
CODE:
export function getEnv() {
    var globalEnv = parseEnvironment(_globalThis);
    return Object.assign({}, DEFAULT_ENVIRONMENT, globalEnv);
}

----------------------------------------

TITLE: Creating IPC Communication Channel in Node.js
DESCRIPTION: Creates an IPC connection with packet-based communication protocol, including methods for sending/receiving messages and handling errors.

LANGUAGE: javascript
CODE:
function createIpc(port) {
    const socket = createConnection(port, "127.0.0.1");
    const packetQueue = [];
    const recvPromiseResolveQueue = [];
    function pushPacket(packet) {
        const recvPromiseResolve = recvPromiseResolveQueue.shift();
        if (recvPromiseResolve != null) {
            recvPromiseResolve(JSON.parse(packet.toString("utf8")));
        } else {
            packetQueue.push(packet);
        }
    }
    // ... rest of implementation

----------------------------------------

TITLE: Calling External Function in JavaScript
DESCRIPTION: Calls an external function and assigns its return value to a constant 'value'. This snippet demonstrates interaction with external code and variable assignment.

LANGUAGE: javascript
CODE:
const value = externalFunction();

----------------------------------------

TITLE: Creating Next.js App with Fela using PNPM
DESCRIPTION: Command to create a new Next.js application with Fela integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-fela with-fela-app

----------------------------------------

TITLE: Function Declaration
DESCRIPTION: Declares an empty named function 'a'

LANGUAGE: javascript
CODE:
function a() {}

----------------------------------------

TITLE: Creating Next.js App with Dynamic Import Example using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with dynamic import functionality. It utilizes the 'with-dynamic-import' example template.

LANGUAGE: bash
CODE:
yarn create next-app --example with-dynamic-import with-dynamic-import-app

----------------------------------------

TITLE: Declaring RouteKind Enum in JavaScript
DESCRIPTION: This snippet declares the RouteKind enum and exports it. It uses an IIFE to define the enum values for different types of routes in Next.js.

LANGUAGE: javascript
CODE:
export var RouteKind;

(function(RouteKind) {
    RouteKind["PAGES"] = "PAGES";
    RouteKind["PAGES_API"] = "PAGES_API";
    RouteKind["APP_PAGE"] = "APP_PAGE";
    RouteKind["APP_ROUTE"] = "APP_ROUTE";
})(RouteKind || (RouteKind = {}));

----------------------------------------

TITLE: Module Development Configuration
DESCRIPTION: Development environment module configuration showing imports/exports with TurboPack-specific assertions and variable handling.

LANGUAGE: javascript
CODE:
let x = 0;
export { x as a } from "__TURBOPACK_VAR__" assert {
    __turbopack_var__: true
};

----------------------------------------

TITLE: Importing Next.js Server Components
DESCRIPTION: Imports NextResponse from next/server for handling server-side responses.

LANGUAGE: javascript
CODE:
import { NextResponse } from 'next/server';

----------------------------------------

TITLE: Installing Next.js with Filbert using PNPM
DESCRIPTION: Command to create a new Next.js application with Filbert.js integration using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-filbert with-filbert-app

----------------------------------------

TITLE: Importing Next.js Document Components
DESCRIPTION: Imports the Document class and related components from Next.js, as well as JSX runtime functions from React.

LANGUAGE: JavaScript
CODE:
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import Document, { Html, Head, Main, NextScript } from 'next/document';

----------------------------------------

TITLE: Creating Next.js Project with HTTP2 Support using Yarn
DESCRIPTION: This command uses create-next-app to bootstrap a Next.js project with HTTP2 support using Yarn.

LANGUAGE: bash
CODE:
yarn create next-app --example with-http2 with-http2-app

----------------------------------------

TITLE: Running Cross-Bundler Benchmark Comparison
DESCRIPTION: Command to run Turbopack benchmarks against multiple bundlers for performance comparison.

LANGUAGE: sh
CODE:
cargo bench -p turbopack-bench -p turbopack-cli

----------------------------------------

TITLE: TurboPack Module Integration
DESCRIPTION: TurboPack-specific module configuration with part imports and exports handling.

LANGUAGE: javascript
CODE:
import "__TURBOPACK_PART__" assert {
    __turbopack_part__: 2
};
"module evaluation";

----------------------------------------

TITLE: Invalid JSON Structure Example
DESCRIPTION: Example of malformed JSON causing a parsing error due to invalid syntax at line 3. The error occurs due to an unexpected comment in JSON.

LANGUAGE: json
CODE:
{
  "nested": {
    "this-is": "invalid" // lint-staged will remove trailing commas, so here's a comment
  }
}

----------------------------------------

TITLE: Copying Environment Configuration File
DESCRIPTION: This command copies the example environment configuration file to create a local version for setting up the Google Maps API key.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Calculating Coverage for SST Files in Rust
DESCRIPTION: This code snippet demonstrates how to compute the coverage of SST (Static Sorted Table) files. The coverage represents the average number of SST files that need to be touched to determine if a key is missing.

LANGUAGE: rust
CODE:
// For a single SST file we can compute `(max_hash - min_hash) / u64::MAX` as the coverage of the SST file.
// We sum up all these coverages to get the total coverage.

let coverage = (max_hash - min_hash) as f64 / u64::MAX as f64;
total_coverage += coverage;

----------------------------------------

TITLE: Creating Next.js Project with PNPM
DESCRIPTION: Command to bootstrap a new Next.js project using the Umbraco Heartcore template with PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-umbraco-heartcore cms-umbraco-heartcore-app

----------------------------------------

TITLE: Component File References
DESCRIPTION: File path references to test components including ClientComponent, Error, and GlobalError components that demonstrate prop serialization behavior.

LANGUAGE: typescript
CODE:
app/client.tsx#ClientComponent
app/error.tsx#Error
app/global-error.tsx#GlobalError

----------------------------------------

TITLE: Identifying Next.js SWC Binary Package for Linux x64 GNU
DESCRIPTION: This code snippet defines the package name and target platform for the Next.js SWC binary. It specifies that this package is intended for x86_64 architecture running on Linux with the GNU toolchain.

LANGUAGE: Markdown
CODE:
# `@next/swc-linux-x64-gnu`

This is the **x86_64-unknown-linux-gnu** binary for `@next/swc`

----------------------------------------

TITLE: Creating Next.js App with GraphQL Hooks using yarn
DESCRIPTION: Command to create a new Next.js application with GraphQL Hooks using yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-graphql-hooks with-graphql-hooks-app

----------------------------------------

TITLE: Defining a Next.js Page Component in JavaScript
DESCRIPTION: This code defines a basic Next.js page component named 'Second'. It renders a heading with the text 'Second Page'.

LANGUAGE: JavaScript
CODE:
export default function Second() {
  return <h1>Second Page</h1>
}

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to create a local environment variables file from the example template.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: Frontmatter metadata for the assetPrefix documentation page, defining the title, description, and source path for the content.

LANGUAGE: markdown
CODE:
---
title: assetPrefix
description: Learn how to use the assetPrefix config option to configure your CDN.
source: app/api-reference/config/next-config-js/assetPrefix
---

----------------------------------------

TITLE: Installing Dependencies Command
DESCRIPTION: Command to install project dependencies using pnpm package manager.

LANGUAGE: shell
CODE:
pnpm install

----------------------------------------

TITLE: Creating Next.js App with Mux Video Example
DESCRIPTION: Commands to create a new Next.js application using the Mux Video example template. It shows how to use various package managers like npm, yarn, pnpm, and bun.

LANGUAGE: bash
CODE:
npx create-next-app --example with-mux-video with-mux-video-app

LANGUAGE: bash
CODE:
yarn create next-app --example with-mux-video with-mux-video-app

LANGUAGE: bash
CODE:
pnpm create next-app --example with-mux-video with-mux-video-app

LANGUAGE: bash
CODE:
bunx create-next-app --example with-mux-video with-mux-video-app

----------------------------------------

TITLE: Creating Next.js Project with Jest using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js project with Jest integration using the 'with-jest' example template.

LANGUAGE: bash
CODE:
yarn create next-app --example with-jest with-jest-app

----------------------------------------

TITLE: Blog Post Frontmatter in YAML
DESCRIPTION: YAML frontmatter section defining metadata for a blog post including title, excerpt, and publication date. The frontmatter is delimited by triple dashes and contains key-value pairs for post metadata.

LANGUAGE: yaml
CODE:
---
title: "A Long-expected Party"
excerpt: "Gandalf arrives in the Shire for Bilbo's Farewell Birthday Party.
Bilbo leaves the Shire permanently."
date: "2021-03-02"
---

----------------------------------------

TITLE: Next.js Info Command Output
DESCRIPTION: Shows the output of the 'next info' command, which displays system and package information for debugging.

LANGUAGE: bash
CODE:
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0
  Available memory (MB): 65536
  Available CPU cores: 10
Binaries:
  Node: 20.12.0
  npm: 10.5.0
  Yarn: 1.22.19
  pnpm: 9.6.0
Relevant Packages:
  next: 15.0.0-canary.115 // Latest available version is detected (15.0.0-canary.115).
  eslint-config-next: 14.2.5
  react: 19.0.0-rc
  react-dom: 19.0.0
  typescript: 5.5.4
Next.js Config:
  output: N/A

----------------------------------------

TITLE: Styling Components in Next.js Dev Overlay
DESCRIPTION: Example of styling a component in the Next.js dev overlay using CSS in template literals and exporting styles for injection.

LANGUAGE: tsx
CODE:
export function Component() {
  return (
    <div className="some-unique-class-name">
      <h1>Hello, Next.js!</h1>
    </div>
  )
}

export const COMPONENT_NAME_STYLES = `
  .some-unique-class-name {
    background-color: red;
  }
`

----------------------------------------

TITLE: Installing Next.js Project with NPX
DESCRIPTION: Creates a new Next.js application with Nhost authentication and GraphQL setup using npx create-next-app command.

LANGUAGE: bash
CODE:
npx create-next-app --example with-nhost-auth-realtime-graphql nhost-app

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to copy the example environment variables file to create a local configuration file.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to copy the example environment variables file to create a local configuration file. This is used to set up Mux API credentials.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Generating Dynamic Viewport Options in Next.js
DESCRIPTION: Use the generateViewport function to dynamically generate viewport options. This function should return a Viewport object containing one or more viewport fields.

LANGUAGE: typescript
CODE:
export function generateViewport({ params }) {
  return {
    themeColor: '...',
  }
}

----------------------------------------

TITLE: Starting Next.js Development Server - NPM
DESCRIPTION: Commands to install dependencies and start the Next.js development server using npm

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Extracting Default Messages for Translation
DESCRIPTION: This command extracts default messages from the source code for translation management. It generates an en.json file in the lang/ directory.

LANGUAGE: bash
CODE:
npm run i18n:extract

----------------------------------------

TITLE: Creating Next.js App with Page Transitions using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with the next-page-transitions example. It sets up the project structure and installs necessary dependencies.

LANGUAGE: bash
CODE:
yarn create next-app --example with-next-page-transitions with-next-page-transitions-app

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to create a local environment variables file from the example template.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Using unauthorized in Server Actions
DESCRIPTION: Example of using the unauthorized function in a Server Action to ensure only authenticated users can perform specific mutations.

LANGUAGE: typescript
CODE:
'use server'

import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateProfile(data: FormData) {
  const session = await verifySession()

  // If the user is not authenticated, return a 401
  if (!session) {
    unauthorized()
  }

  // Proceed with mutation
  // ...
}

LANGUAGE: javascript
CODE:
'use server'

import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateProfile(data) {
  const session = await verifySession()

  // If the user is not authenticated, return a 401
  if (!session) {
    unauthorized()
  }

  // Proceed with mutation
  // ...
}

----------------------------------------

TITLE: Implementing Convex Mutation Function in TypeScript
DESCRIPTION: Example of a mutation function that accepts string arguments and performs database operations. Shows how to insert data and return the modified record.

LANGUAGE: typescript
CODE:
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  args: {
    first: v.string(),
    second: v.string(),
  },

  handler: async (ctx, args) => {
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);
    return await ctx.db.get(id);
  },
});

----------------------------------------

TITLE: Installing Next.js with Vanilla Extract using NPX
DESCRIPTION: Command to create a new Next.js application with Vanilla Extract integration using NPX package runner.

LANGUAGE: bash
CODE:
npx create-next-app --example with-vanilla-extract with-vanilla-extract-app

----------------------------------------

TITLE: Creating Next.js App with OpenTelemetry using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with OpenTelemetry integration. It utilizes the 'create next-app' command and specifies the 'with-opentelemetry' example template.

LANGUAGE: bash
CODE:
yarn create next-app --example with-opentelemetry with-opentelemetry-app

----------------------------------------

TITLE: Copying Environment Variables Template
DESCRIPTION: Command to copy the example environment variables file to create a local configuration file for Firebase settings.

LANGUAGE: bash
CODE:
cp .env.local.example .env.local

----------------------------------------

TITLE: Configuring use cache in Next.js Config
DESCRIPTION: Configuration setup in next.config file to enable the use cache directive feature.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    useCache: true,
  },
}

export default nextConfig

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    useCache: true,
  },
}

module.exports = nextConfig

----------------------------------------

TITLE: Development Server Startup Commands
DESCRIPTION: Commands to install dependencies and start the Next.js development server using either NPM or Yarn.

LANGUAGE: bash
CODE:
npm install
npm run dev

# or

yarn install
yarn dev

----------------------------------------

TITLE: Creating Next.js Project with Clerk Authentication using pnpm
DESCRIPTION: This command uses pnpm to initialize a new Next.js project with Clerk authentication integration.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-clerk with-clerk-app

----------------------------------------

TITLE: Installing Next.js Redux Template with PNPM
DESCRIPTION: Creates a new Next.js application with Redux Toolkit integration using the PNPM package manager.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-redux with-redux-app

----------------------------------------

TITLE: Configuring Default Robot Access Rules
DESCRIPTION: Basic robots.txt configuration that allows all web crawlers to access the entire website. Uses standard robots.txt syntax with wildcard user-agent declaration and full site access permission.

LANGUAGE: txt
CODE:
User-agent: *
Allow: /

----------------------------------------

TITLE: Creating Next.js Configuration File
DESCRIPTION: Example of a Next.js configuration file (next.config.ts) with options for static export and build directory.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  output: 'export', // Outputs a Single-Page Application (SPA)
  distDir: 'build', // Changes the build output directory to `build`
}

export default nextConfig

----------------------------------------

TITLE: Generating Builder.io Space
DESCRIPTION: Command to create a new Builder.io space using the CLI. It requires a private key and a space name. The -d flag is used to create default content models.

LANGUAGE: bash
CODE:
cd cms-builder-io-app
builder create -k [private-key] -n [space-name] -d

----------------------------------------

TITLE: Starting Development Server with NPM
DESCRIPTION: Commands to install dependencies and start the Next.js development server using npm

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Creating Next.js App with Segment Analytics using npm
DESCRIPTION: Command to create a new Next.js application with Segment Analytics integration using npm and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-segment-analytics-pages-router with-segment-analytics-app

----------------------------------------

TITLE: Installing Next.js 14 with Yarn
DESCRIPTION: Command to upgrade Next.js to version 14 using Yarn package manager. Installs Next.js, React 18, React DOM 18, and ESLint configuration.

LANGUAGE: bash
CODE:
yarn add next@next-14 react@18 react-dom@18 && yarn add eslint-config-next@next-14 -D

----------------------------------------

TITLE: Arrow Function Assignment
DESCRIPTION: Assigns an empty arrow function to variable 'a'

LANGUAGE: javascript
CODE:
a = ()=>{};

----------------------------------------

TITLE: Creating Next.js App with Sitemap Example using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js application with sitemap generation functionality.

LANGUAGE: bash
CODE:
yarn create next-app --example with-sitemap with-sitemap-app

----------------------------------------

TITLE: Creating Next.js App with Service Worker using npm
DESCRIPTION: This command creates a new Next.js application with a service worker integration using npm and create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example with-service-worker with-service-worker-app

----------------------------------------

TITLE: Creating Next.js App with Sitefinity CMS Template - PNPM
DESCRIPTION: Command to create a new Next.js application using the cms-sitefinity template via pnpm

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-sitefinity cms-sitefinity-app

----------------------------------------

TITLE: Writing a Cypress Component Test for a Next.js Page
DESCRIPTION: This snippet demonstrates how to write a Cypress component test for a Next.js page component, checking for rendered content and links.

LANGUAGE: tsx
CODE:
import Page from '../../app/page'

describe('<Page />', () => {
  it('should render and display expected content', () => {
    // Mount the React component for the Home page
    cy.mount(<Page />)

    // The new page should contain an h1 with "Home"
    cy.get('h1').contains('Home')

    // Validate that a link with the expected URL is present
    // Following the link is better suited to an E2E test
    cy.get('a[href="/about"]').should('be.visible')
  })
})

----------------------------------------

TITLE: Running Vitest Tests with Yarn
DESCRIPTION: Command to execute Vitest tests using Yarn

LANGUAGE: bash
CODE:
yarn test

----------------------------------------

TITLE: Installing CSP Next.js App with Yarn
DESCRIPTION: Command to create a new Next.js application with strict CSP implementation using Yarn and create-next-app.

LANGUAGE: bash
CODE:
yarn create next-app --example with-strict-csp with-strict-csp-app

----------------------------------------

TITLE: Implementing NextTracerImpl Class
DESCRIPTION: Core tracer implementation providing span management, context propagation, and tracing functionality. Includes methods for creating, managing and closing spans with error handling.

LANGUAGE: javascript
CODE:
class NextTracerImpl {
    getTracerInstance() {
        return trace.getTracer('next.js', '0.0.1');
    }
    getContext() {
        return context;
    }
    // Additional methods omitted for brevity
}

----------------------------------------

TITLE: Installing Jest dependencies for Next.js
DESCRIPTION: Command to install Jest and related packages as dev dependencies for a Next.js project.

LANGUAGE: bash
CODE:
npm install -D jest jest-environment-jsdom @testing-library/react @testing-library/dom @testing-library/jest-dom ts-node

----------------------------------------

TITLE: Installing Dependencies and Starting Development Server with Yarn
DESCRIPTION: Commands to install project dependencies and start the Next.js development server using Yarn. This provides an alternative to npm for running the project locally.

LANGUAGE: bash
CODE:
yarn install
yarn dev

----------------------------------------

TITLE: Creating Next.js App with Styled Components using pnpm
DESCRIPTION: This command uses pnpm to initialize a new Next.js project with styled-components integration.

LANGUAGE: bash
CODE:
pnpm create next-app --example with-styled-components with-styled-components-app

----------------------------------------

TITLE: Wrapping Client Component Loader for Performance Tracking in Next.js
DESCRIPTION: Defines a function that wraps the Next.js client component loader to measure loading performance. It tracks the start time, count, and duration of component loads.

LANGUAGE: javascript
CODE:
export function wrapClientComponentLoader(ComponentMod) {
    if (!('performance' in globalThis)) {
        return ComponentMod.__next_app__;
    }
    return {
        require: (...args)=>{
            if (clientComponentLoadStart === 0) {
                clientComponentLoadStart = performance.now();
            }
            const startTime = performance.now();
            try {
                clientComponentLoadCount += 1;
                return ComponentMod.__next_app__.require(...args);
            } finally{
                clientComponentLoadTimes += performance.now() - startTime;
            }
        },
        loadChunk: (...args)=>{
            const startTime = performance.now();
            try {
                clientComponentLoadCount += 1;
                return ComponentMod.__next_app__.loadChunk(...args);
            } finally{
                clientComponentLoadTimes += performance.now() - startTime;
            }
        }
    };
}

----------------------------------------

TITLE: Sending Google Analytics Events in Next.js App Router
DESCRIPTION: Example of how to send Google Analytics events using the sendGAEvent function in a Next.js application with the App Router.

LANGUAGE: jsx
CODE:
'use client'

import { sendGAEvent } from '@next/third-parties/google'

export function EventButton() {
  return (
    <div>
      <button
        onClick={() => sendGAEvent('event', 'buttonClicked', { value: 'xyz' })}
      >
        Send Event
      </button>
    </div>
  )
}

----------------------------------------

TITLE: Installing Next.js Blog with NPX
DESCRIPTION: Command to create a new Next.js blog project with Sanity CMS using npx create-next-app.

LANGUAGE: bash
CODE:
npx create-next-app --example cms-sanity next-sanity-blog

----------------------------------------

TITLE: Creating Next.js Project with Turbopack using Yarn
DESCRIPTION: This command uses Yarn to create a new Next.js project with Turbopack integration. It utilizes the 'with-turbopack' example template.

LANGUAGE: bash
CODE:
yarn create next-app --example with-turbopack with-turbopack-app

----------------------------------------

TITLE: Retrieving Client Component Loading Metrics in Next.js
DESCRIPTION: Exports a function to retrieve the current client component loading metrics. It also provides an option to reset the metrics after retrieval.

LANGUAGE: javascript
CODE:
export function getClientComponentLoaderMetrics(options = {}) {
    const metrics = clientComponentLoadStart === 0 ? undefined : {
        clientComponentLoadStart,
        clientComponentLoadTimes,
        clientComponentLoadCount
    };
    if (options.reset) {
        clientComponentLoadStart = 0;
        clientComponentLoadTimes = 0;
        clientComponentLoadCount = 0;
    }
    return metrics;
}

----------------------------------------

TITLE: Implementing Google Tag Manager in Next.js App Router
DESCRIPTION: Example of how to add Google Tag Manager to all routes in a Next.js application using the App Router. The GoogleTagManager component is included in the root layout file.

LANGUAGE: tsx
CODE:
import { GoogleTagManager } from '@next/third-parties/google'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <GoogleTagManager gtmId="GTM-XYZ" />
      <body>{children}</body>
    </html>
  )
}

----------------------------------------

TITLE: Installing Next.js Blog with PNPM
DESCRIPTION: Command to create a new Next.js blog project with Sanity CMS using pnpm create.

LANGUAGE: bash
CODE:
pnpm create next-app --example cms-sanity next-sanity-blog

----------------------------------------

TITLE: Updating Xata Types
DESCRIPTION: This command generates and updates the TypeScript types for Xata integration.

LANGUAGE: sh
CODE:
xata codegen

----------------------------------------

TITLE: Logging to Console in JavaScript
DESCRIPTION: Outputs 'Hello' to the console using console.log(). This is a simple demonstration of basic console output in JavaScript.

LANGUAGE: javascript
CODE:
console.log("Hello");

----------------------------------------

TITLE: Implementing YouTube Embed in Next.js App Router
DESCRIPTION: Example of how to add a YouTube Embed to a page in a Next.js application using the App Router. The YouTubeEmbed component is used with various configuration options.

LANGUAGE: jsx
CODE:
import { YouTubeEmbed } from '@next/third-parties/google'

export default function Page() {
  return <YouTubeEmbed videoid="ogfYd705cRs" height={400} params="controls=0" />
}

----------------------------------------

TITLE: Configuring useCache in Next.js Configuration File
DESCRIPTION: This snippet demonstrates how to enable the useCache flag in the Next.js configuration file. It sets the useCache option to true in the experimental section of the next.config.ts file.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    useCache: true,
  },
}

export default nextConfig

----------------------------------------

TITLE: Installing and Running Multi-Zone Next.js Application with Yarn
DESCRIPTION: Commands to create a new Next.js app using the with-zones example, then install dependencies and run the 'home' and 'blog' apps separately using Yarn.

LANGUAGE: bash
CODE:
yarn create next-app --example with-zones with-zones-app

LANGUAGE: bash
CODE:
cd home
yarn && yarn dev

LANGUAGE: bash
CODE:
cd blog
yarn && yarn dev

----------------------------------------

TITLE: Setting External Object Property in JavaScript
DESCRIPTION: Sets a property of an external object using a setter. This demonstrates how to modify external object properties.

LANGUAGE: javascript
CODE:
externalObject.propertyWithSetter = 42;

----------------------------------------

TITLE: Displaying Self-Hosted Video from Vercel Blob in Next.js
DESCRIPTION: This snippet demonstrates how to fetch and display a self-hosted video from Vercel Blob in a Next.js application using the list function and React Suspense.

LANGUAGE: jsx
CODE:
import { Suspense } from 'react'
import { list } from '@vercel/blob'

export default function Page() {
  return (
    <Suspense fallback={<p>Loading video...</p>}>
      <VideoComponent fileName="my-video.mp4" />
    </Suspense>
  )
}

async function VideoComponent({ fileName }) {
  const { blobs } = await list({
    prefix: fileName,
    limit: 1,
  })
  const { url } = blobs[0]

  return (
    <video controls preload="none" aria-label="Video player">
      <source src={url} type="video/mp4" />
      Your browser does not support the video tag.
    </video>
  )
}

----------------------------------------

TITLE: Creating Next.js App with Convex using Yarn
DESCRIPTION: Command to bootstrap a new Next.js application with Convex integration using Yarn package manager.

LANGUAGE: bash
CODE:
yarn create next-app --example convex convex-app

----------------------------------------

TITLE: Implementing E2E Test with Puppeteer and Checkly
DESCRIPTION: This code snippet demonstrates how to set up an end-to-end test using Puppeteer within the Checkly environment. It checks if the browser title of a deployed preview contains a specific string.

LANGUAGE: javascript
CODE:
const assert = require('chai').assert;
const puppeteer = require('puppeteer');

const browser = await puppeteer.launch();
const page = await browser.newPage();

await page.goto(process.env.ENVIRONMENT_URL);
const title = await page.title();

assert.include(title, 'Guillermo Rauch');

await browser.close();

----------------------------------------

TITLE: Exporting Object with Shared Properties in JavaScript
DESCRIPTION: Creates and exports an object 'a' that includes the 'shared' object and an additional property. This demonstrates object creation and module exports.

LANGUAGE: javascript
CODE:
export const a = {
    shared,
    a: "aaaaaaaaaaa"
};

----------------------------------------

TITLE: Implementing Global Error Handling (TypeScript)
DESCRIPTION: This snippet shows how to create a global error handler using the global-error.js file in Next.js, which replaces the root layout when an error occurs.

LANGUAGE: typescript
CODE:
'use client' // Error boundaries must be Client Components

export default function GlobalError({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    // global-error must include html and body tags
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={() => reset()}>Try again</button>
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Filtering Benchmark Results by Bundler
DESCRIPTION: Command to filter benchmark results to specific bundlers like Turbopack CSR or Vite.

LANGUAGE: sh
CODE:
cargo bench -p turbopack-bench -p turbopack-cli -- "hmr_to_eval/(Turbopack CSR|Vite)"

----------------------------------------

TITLE: Inline Cache Profile Definition in Next.js Component
DESCRIPTION: Example of defining a custom cache profile inline within a component using object notation.

LANGUAGE: typescript
CODE:
'use cache'
import { unstable_cacheLife as cacheLife } from 'next/cache'

export default async function Page() {
  cacheLife({
    stale: 3600, // 1 hour
    revalidate: 900, // 15 minutes
    expire: 86400, // 1 day
  })

  return <div>Page</div>
}

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers. Runs the server locally which enables hot-reloading and development features.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Declaring and Modifying a Variable in JavaScript
DESCRIPTION: This snippet declares a 'dog' variable, initializes it with a string value, and then modifies it by appending an exclamation mark. It demonstrates basic variable manipulation in JavaScript.

LANGUAGE: javascript
CODE:
let dog = "dog";
dog += "!";
console.log(dog);

----------------------------------------

TITLE: Tracking Dynamic Fetch in Next.js
DESCRIPTION: Tracks dynamic fetch operations in Next.js, postponing rendering if necessary.

LANGUAGE: JavaScript
CODE:
function trackDynamicFetch(store, expression) {
    if (!store.prerenderState || store.isUnstableCacheCallback) return;
    postponeWithTracking(store.prerenderState, expression, store.urlPathname);
}

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the project locally for development and testing.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Sending HMR Messages in JavaScript
DESCRIPTION: Function to send data through the WebSocket connection if it's open and available.

LANGUAGE: javascript
CODE:
export function sendMessage(data) {
    if (!source || source.readyState !== source.OPEN) return;
    return source.send(data);
}

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Commands to install dependencies and start the Next.js development server

LANGUAGE: bash
CODE:
npm install
npm run dev

# or

yarn install
yarn dev

----------------------------------------

TITLE: Styling Storybook UI Components with CSS-in-JS
DESCRIPTION: This snippet contains CSS styles for various UI components used in the Storybook configuration page. It defines layout, spacing, and responsive design rules.

LANGUAGE: CSS
CODE:
.sb-container {
  margin-bottom: 48px;
}

.sb-section {
  width: 100%;
  display: flex;
  flex-direction: row;
  gap: 20px;
}

img {
  object-fit: cover;
}

.sb-section-title {
  margin-bottom: 32px;
}

.sb-section a:not(h1 a, h2 a, h3 a) {
  font-size: 14px;
}

.sb-section-item, .sb-grid-item {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.sb-section-item-heading {
  padding-top: 20px !important;
  padding-bottom: 5px !important;
  margin: 0 !important;
}
.sb-section-item-paragraph {
  margin: 0;
  padding-bottom: 10px;
}

.sb-chevron {
  margin-left: 5px;
}

.sb-features-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-gap: 32px 20px;
}

.sb-socials {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
}

.sb-socials p {
  margin-bottom: 10px;
}

.sb-explore-image {
  max-height: 32px;
  align-self: flex-start;
}

.sb-addon {
  width: 100%;
  display: flex;
  align-items: center;
  position: relative;
  background-color: #EEF3F8;
  border-radius: 5px;
  border: 1px solid rgba(0, 0, 0, 0.05);
  background: #EEF3F8;
  height: 180px;
  margin-bottom: 48px;
  overflow: hidden;
}

.sb-addon-text {
  padding-left: 48px;
  max-width: 240px;
}

.sb-addon-text h4 {
  padding-top: 0px;
}

.sb-addon-img {
  position: absolute;
  left: 345px;
  top: 0;
  height: 100%;
  width: 200%;
  overflow: hidden;
}

.sb-addon-img img {
  width: 650px;
  transform: rotate(-15deg);
  margin-left: 40px;
  margin-top: -72px;
  box-shadow: 0 0 1px rgba(255, 255, 255, 0);
  backface-visibility: hidden;
}

@media screen and (max-width: 800px) {
  .sb-addon-img {
    left: 300px;
  }
}

@media screen and (max-width: 600px) {
  .sb-section {
    flex-direction: column;
  }

  .sb-features-grid {
    grid-template-columns: repeat(1, 1fr);
  }

  .sb-socials {
    grid-template-columns: repeat(2, 1fr);
  }

  .sb-addon {
    height: 280px;
    align-items: flex-start;
    padding-top: 32px;
    overflow: hidden;
  }

  .sb-addon-text {
    padding-left: 24px;
  }

  .sb-addon-img {
    right: 0;
    left: 0;
    top: 130px;
    bottom: 0;
    overflow: hidden;
    height: auto;
    width: 124%;
  }

  .sb-addon-img img {
    width: 1200px;
    transform: rotate(-12deg);
    margin-left: 0;
    margin-top: 48px;
    margin-bottom: -40px;
    margin-left: -24px;
  }
}

----------------------------------------

TITLE: Resulting HTML Output for Link with basePath in Next.js
DESCRIPTION: This snippet shows the resulting HTML output when using next/link with basePath configured. The href attribute includes the basePath automatically.

LANGUAGE: html
CODE:
<a href="/docs/about">About Page</a>

----------------------------------------

TITLE: Requiring Non-Existent Module in JavaScript (CommonJS)
DESCRIPTION: This code snippet attempts to require a module that does not exist, which results in a 'Module not found' error. The code tries to import 'does-not-exist/path' and then log the result.

LANGUAGE: javascript
CODE:
const dne = require("does-not-exist/path");

console.log(dne);

----------------------------------------

TITLE: Configuring Next.js for unauthorized Function
DESCRIPTION: Enable the experimental 'authInterrupts' configuration option in next.config.js to use the unauthorized function.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    authInterrupts: true,
  },
}

export default nextConfig

LANGUAGE: javascript
CODE:
module.exports = {
  experimental: {
    authInterrupts: true,
  },
}

----------------------------------------

TITLE: Enabling authInterrupts in Next.js TypeScript Configuration
DESCRIPTION: This snippet demonstrates how to enable the experimental authInterrupts option in a Next.js TypeScript configuration file. It imports the NextConfig type and sets the authInterrupts flag to true in the experimental section.

LANGUAGE: typescript
CODE:
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    authInterrupts: true,
  },
}

export default nextConfig

----------------------------------------

TITLE: Updating Environment Variables for Next.js
DESCRIPTION: Example of updating Vite-specific environment variables to their Next.js equivalents in a configuration file.

LANGUAGE: javascript
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'export', // Outputs a Single-Page Application (SPA).
  distDir: './dist', // Changes the build output directory to `./dist/`.
  basePath: process.env.NEXT_PUBLIC_BASE_PATH, // Sets the base path to `/some-base-path`.
}

export default nextConfig

----------------------------------------

TITLE: Configuring Bitbucket Pipelines Cache for Next.js Builds
DESCRIPTION: This YAML configuration snippet demonstrates how to set up caching for Next.js builds in Bitbucket Pipelines. It defines a cache for the Next.js cache directory.

LANGUAGE: yaml
CODE:
definitions:
  caches:
    nextcache: .next/cache

----------------------------------------

TITLE: JavaScript Implementation Example
DESCRIPTION: Shows the JavaScript version of the cache implementation with user data and revalidation settings. Demonstrates the same functionality as the TypeScript example without type definitions.

LANGUAGE: jsx
CODE:
import { unstable_cache } from 'next/cache';

export default async function Page({ params } }) {
  const { userId } = await params
  const getCachedUser = unstable_cache(
    async () => {
      return { id: userId };
    },
    [userId], // add the user ID to the cache key
    {
      tags: ["users"],
      revalidate: 60,
    }
  );

  //...
}