TITLE: Accessing Moment Prototype
DESCRIPTION: The Moment prototype is exposed through moment.fn, allowing developers to extend functionality by adding custom methods. Methods on the prototype can be referenced as moment#method in documentation.

LANGUAGE: javascript
CODE:
moment.fn // access to Moment prototype
Moment.prototype.format // same as moment.fn.format and moment#format

----------------------------------------

TITLE: Initializing Current DateTime in Moment.js
DESCRIPTION: Shows various ways to create a Moment.js object for the current date and time. Includes the basic empty constructor call, undefined parameter handling, and empty array/object initialization (supported from version 2.14.0).

LANGUAGE: javascript
CODE:
moment();
moment(undefined);
// From 2.14.0 onward, also supported
moment([]);
moment({});

LANGUAGE: javascript
CODE:
var now = moment();

----------------------------------------

TITLE: Basic Date String Parsing in MomentJS
DESCRIPTION: Creates a moment object from a date string in ISO 8601 format. This is the basic usage pattern for string parsing in MomentJS.

LANGUAGE: javascript
CODE:
var day = moment("1995-12-25");

----------------------------------------

TITLE: Checking Daylight Saving Time using Moment.js in JavaScript
DESCRIPTION: This snippet demonstrates how to use the isDST() method in Moment.js to check if a specific date is in daylight saving time. It provides examples for dates that are and are not in DST, based on the 'en' locale.

LANGUAGE: javascript
CODE:
moment([2011, 2, 12]).isDST(); // false, March 12 2011 is not DST
moment([2011, 2, 14]).isDST(); // true, March 14 2011 is DST
// This example is for "en" locale: https://www.timeanddate.com/time/dst/2011.html

----------------------------------------

TITLE: Basic Moment.js Date Formatting Examples
DESCRIPTION: Demonstrates basic date formatting using Moment.js with various format patterns. Shows ISO 8601 format, custom date patterns, and handling invalid dates.

LANGUAGE: javascript
CODE:
moment().format();                                // "2014-09-08T08:02:17-05:00" (ISO 8601, no fractional seconds)
moment().format("dddd, MMMM Do YYYY, h:mm:ss a"); // "Sunday, February 14th 2010, 3:25:50 pm"
moment().format("ddd, hA");                       // "Sun, 3PM"
moment().format("[Today is] dddd");               // "Today is Sunday"
moment('gibberish').format('YYYY MM DD');         // "Invalid date"

----------------------------------------

TITLE: Preventing Moment.js Object Mutation Using Clone
DESCRIPTION: Demonstrates the proper way to avoid mutating the original moment object by using the clone() method before performing date operations. This preserves the original date while allowing operations on the copy.

LANGUAGE: javascript
CODE:
var a = moment('2016-01-01'); 
var b = a.clone().add(1, 'week'); 
a.format();
"2016-01-01T00:00:00-06:00"

----------------------------------------

TITLE: Creating Moment Objects
DESCRIPTION: Core methods for creating Moment.js date wrapper objects. The library provides different parsing modes including moment() for local time, moment.utc() for UTC time, moment.parseZone() for preserving input zones, and moment.tz() for timezone-specific parsing when using the moment-timezone plugin.

LANGUAGE: javascript
CODE:
moment() // local mode
moment.utc() // UTC mode
moment.parseZone() // preserve input zone
moment.tz() // timezone-specific parsing

----------------------------------------

TITLE: Setting UTC Mode in Moment.js
DESCRIPTION: Demonstrates how to set a moment object to UTC mode, changing the time representation from local time to UTC time. This affects how the time is displayed and calculated.

LANGUAGE: javascript
CODE:
var a = moment([2011, 0, 1, 8]);
a.hours(); // 8 PST
a.utc();
a.hours(); // 16 UTC

----------------------------------------

TITLE: Comparing Date Initialization in JavaScript and Moment.js
DESCRIPTION: Demonstrates the stricter initialization rules of Moment.js compared to the native Date constructor in JavaScript. While the Date constructor allows invalid dates, Moment.js returns 'Invalid date' for such cases.

LANGUAGE: javascript
CODE:
new Date(2013, 25, 14).toString(); // "Sat Feb 14 2015 00:00:00 GMT-0500 (EST)"
moment([2015, 25, 35]).format();   // 'Invalid date'

----------------------------------------

TITLE: Installing Moment.js via npm
DESCRIPTION: This snippet shows the npm command to install the Moment.js library as a dependency in a Node.js project.

LANGUAGE: bash
CODE:
npm install moment

----------------------------------------

TITLE: Converting Offset Date to UTC with Moment.js
DESCRIPTION: Shows how using moment.utc() to parse a date with a specified offset will convert the date to UTC, shifting the date and time accordingly.

LANGUAGE: javascript
CODE:
moment.utc('2016-01-01T00:00:00+02:00').format()

----------------------------------------

TITLE: Chaining Moment.js Date Manipulation Methods
DESCRIPTION: Demonstrates how to use multiple Moment.js manipulation methods in a chain to modify a date object. Shows adding days, subtracting months, and setting specific time components using the fluent interface pattern.

LANGUAGE: javascript
CODE:
moment().add(7, 'days').subtract(1, 'months').year(2009).hours(0).minutes(0).seconds(0);

----------------------------------------

TITLE: RFC 2822 Date Format Examples
DESCRIPTION: Shows various supported RFC 2822 date formats with different components and timezone specifications.

LANGUAGE: plaintext
CODE:
6 Mar 17 21:22 UT
6 Mar 17 21:22:23 UT
6 Mar 2017 21:22:23 GMT
06 Mar 2017 21:22:23 Z
Mon 06 Mar 2017 21:22:23 z
Mon, 06 Mar 2017 21:22:23 +0000

----------------------------------------

TITLE: ISO 8601 Date Format Examples
DESCRIPTION: Shows various supported ISO 8601 date formats including calendar dates, month dates, week dates, and ordinal dates.

LANGUAGE: plaintext
CODE:
2013-02-08  # A calendar date part
2013-02     # A month date part
2013-W06-5  # A week date part
2013-039    # An ordinal date part

20130208    # Basic (short) full date
201303      # Basic (short) year+month
2013        # Basic (short) year only
2013W065    # Basic (short) week, weekday
2013W06     # Basic (short) week only
2013050     # Basic (short) ordinal date (year + day-of-year)

----------------------------------------

TITLE: Parsing Date with Multiple Formats in MomentJS
DESCRIPTION: Demonstrates basic usage of parsing a date string against multiple possible format patterns. The function attempts to match the input string against each format in the array.

LANGUAGE: javascript
CODE:
moment("12-25-1995", ["MM-DD-YYYY", "YYYY-MM-DD"]);

----------------------------------------

TITLE: Timezone Offset Parsing Examples
DESCRIPTION: Demonstrates parsing dates with and without timezone offsets.

LANGUAGE: javascript
CODE:
moment("2010-10-20 4:30",       "YYYY-MM-DD HH:mm");   // parsed as 4:30 local time
moment("2010-10-20 4:30 +0000", "YYYY-MM-DD HH:mm Z"); // parsed as 4:30 UTC

----------------------------------------

TITLE: Escaping Characters in Moment.js Format Strings
DESCRIPTION: Shows how to escape characters in format strings using square brackets to treat them as literal text rather than format tokens.

LANGUAGE: javascript
CODE:
moment().format('[today] dddd'); // 'today Sunday'

----------------------------------------

TITLE: Parsing Dates in Specific Time Zones with moment.tz()
DESCRIPTION: Demonstrates how to parse dates in specific time zones using moment.tz(). Shows how the same timestamp parsed in different time zones results in different UTC times.

LANGUAGE: javascript
CODE:
var a = moment.tz("2013-11-18 11:55", "Asia/Taipei");
var b = moment.tz("2013-11-18 11:55", "America/Toronto");

a.format(); // 2013-11-18T11:55:00+08:00
b.format(); // 2013-11-18T11:55:00-05:00

a.utc().format(); // 2013-11-18T03:55Z
b.utc().format(); // 2013-11-18T16:55Z

----------------------------------------

TITLE: Adding Days to a Moment in JavaScript
DESCRIPTION: Demonstrates how to add 7 days to a moment object using the add() method.

LANGUAGE: javascript
CODE:
moment().add(7, 'days');

----------------------------------------

TITLE: Comparing Local and UTC Moment Objects in Moment.js
DESCRIPTION: This snippet demonstrates that despite different displays, moments created in local and UTC mode represent the same point in time. It shows how to create moments in both modes and compare their formatted output and timestamp values.

LANGUAGE: javascript
CODE:
var a = moment();
var b = moment.utc();
a.format();  // 2013-02-04T10:35:24-08:00
b.format();  // 2013-02-04T18:35:24+00:00
a.valueOf(); // 1360002924000
b.valueOf(); // 1360002924000

----------------------------------------

TITLE: Basic Date String Parsing in MomentJS
DESCRIPTION: Demonstrates basic date string parsing using a specific format pattern.

LANGUAGE: javascript
CODE:
moment("12-25-1995", "MM-DD-YYYY");

----------------------------------------

TITLE: Strict Mode DateTime Parsing
DESCRIPTION: Using strict mode for more precise date and time parsing with validation.

LANGUAGE: javascript
CODE:
moment('24/12/2019 09:15:00', "DD MM YYYY hh:mm:ss", true);

----------------------------------------

TITLE: Creating Moment Object from Unix Timestamp
DESCRIPTION: Creates a Moment.js object from a Unix timestamp representing seconds since the Unix Epoch. The timestamp is multiplied by 1000 internally to convert seconds to milliseconds.

LANGUAGE: javascript
CODE:
var day = moment.unix(1318781876);

----------------------------------------

TITLE: Creating Moment Object from JavaScript Date in Moment.js
DESCRIPTION: This snippet shows how to create a Moment.js object using a pre-existing native JavaScript Date object. It demonstrates that changes to the original Date object won't affect the Moment object, and vice versa.

LANGUAGE: javascript
CODE:
var day = new Date(2011, 9, 16);
var dayWrapper = moment(day);

----------------------------------------

TITLE: Retrieving Date/Time Components Using Moment.js get() Method
DESCRIPTION: The 'get' method in Moment.js allows retrieving specific date and time components from a Moment object. It accepts various units as arguments, including year, month, date, hour, minute, second, and millisecond. The method is case-insensitive and supports plural and short forms of unit names.

LANGUAGE: javascript
CODE:
moment().get('year');
moment().get('month');  // 0 to 11
moment().get('date');
moment().get('hour');
moment().get('minute');
moment().get('second');
moment().get('millisecond');

LANGUAGE: javascript
CODE:
moment().get(unit) === moment()[unit]()

----------------------------------------

TITLE: Including and Using Moment.js in HTML
DESCRIPTION: This snippet shows how to include the Moment.js library in an HTML file and use its basic functionality. It demonstrates loading the script and using the moment() function to format a date.

LANGUAGE: html
CODE:
<script src="moment.js"></script>
<script>
	moment().format();
</script>

----------------------------------------

TITLE: Converting Moment Object to ISO 8601 String in JavaScript
DESCRIPTION: Demonstrates how to convert a Moment.js object to an ISO 8601 formatted string. The method returns a UTC timestamp by default, matching the native JavaScript Date.toISOString() behavior. From version 2.20.0, passing true as an argument prevents UTC conversion.

LANGUAGE: javascript
CODE:
moment().toISOString() // 2013-02-04T22:44:30.652Z

----------------------------------------

TITLE: Setting Date/Time Components with Moment.js set() Method
DESCRIPTION: Demonstrates how to use the set() method in Moment.js to modify specific components of a date/time object. The method accepts either a string unit and integer value pair, or an object with multiple unit-value pairs. Supported units include year, month, date, hour, minute, second, and millisecond, with case-insensitive and plural/short form support.

LANGUAGE: javascript
CODE:
moment().set('year', 2013);
moment().set('month', 3);  // April
moment().set('date', 1);
moment().set('hour', 13);
moment().set('minute', 20);
moment().set('second', 30);
moment().set('millisecond', 123);

moment().set({'year': 2013, 'month': 3});

----------------------------------------

TITLE: Implicit Moment Cloning using Constructor
DESCRIPTION: Creates a clone of a moment object by passing an existing moment instance to the moment() constructor. This method creates an independent copy where modifications to the original don't affect the clone.

LANGUAGE: javascript
CODE:
var a = moment([2012]);
var b = moment(a);
a.year(2000);
b.year(); // 2012

----------------------------------------

TITLE: Checking Moment Object using isMoment() in JavaScript
DESCRIPTION: This snippet demonstrates the use of moment.isMoment() function to check if a variable is a Moment object. It shows examples with different types of inputs.

LANGUAGE: javascript
CODE:
moment.isMoment() // false
moment.isMoment(new Date()) // false
moment.isMoment(moment()) // true

----------------------------------------

TITLE: Using Shorthand Notation for Adding Time in MomentJS
DESCRIPTION: Shows how to use shorthand notation 'd' for days when adding time to a moment object.

LANGUAGE: javascript
CODE:
moment().add(7, 'd');

----------------------------------------

TITLE: Parsing Dates with Multiple Format Patterns in Moment.js
DESCRIPTION: Demonstrates how to parse date strings using an array of possible format patterns. The example shows two equivalent date strings being parsed with different format orders, both producing the same result. Moment.js will try each format until it finds a valid match.

LANGUAGE: javascript
CODE:
moment('12 March, 2016', ['DDMMMMY', 'MMMMDDY']).format()
"2016-03-12T00:00:00-06:00"
moment('March 12, 2016', ['DDMMMMY', 'MMMMDDY']).format()
"2016-03-12T00:00:00-06:00"

----------------------------------------

TITLE: Basic Calendar Format Configuration in MomentJS
DESCRIPTION: Demonstrates how to customize calendar output formats using an object configuration. Supports different format strings for same day, next day, next week, last day, last week, and other cases.

LANGUAGE: javascript
CODE:
moment().calendar(null, {
    sameDay: '[Today]',
    nextDay: '[Tomorrow]',
    nextWeek: 'dddd',
    lastDay: '[Yesterday]',
    lastWeek: '[Last] dddd',
    sameElse: 'DD/MM/YYYY'
});

----------------------------------------

TITLE: Parsing Dates with Time Zones in Moment.js
DESCRIPTION: Demonstrates using moment.tz to parse dates with different input formats and time zones. The constructor is DST aware and uses the correct offset for parsing.

LANGUAGE: javascript
CODE:
var a = moment.tz("2013-11-18 11:55", "America/Toronto");
var b = moment.tz("May 12th 2014 8PM", "MMM Do YYYY hA", "America/Toronto");
var c = moment.tz(1403454068850, "America/Toronto");
a.format(); // 2013-11-18T11:55:00-05:00
b.format(); // 2014-05-12T20:00:00-04:00
c.format(); // 2014-06-22T12:21:08-04:00

----------------------------------------

TITLE: Adding Large Time Values in MomentJS
DESCRIPTION: Demonstrates adding large time values, such as a million milliseconds or 360 days.

LANGUAGE: javascript
CODE:
moment().add(1000000, 'milliseconds'); // a million milliseconds
moment().add(360, 'days'); // 360 days

----------------------------------------

TITLE: Configuring French Locale in Moment.js
DESCRIPTION: Demonstrates how to configure a complete French locale including months, weekdays, date formats, relative time, and various parsing rules.

LANGUAGE: javascript
CODE:
moment.locale('fr', {
    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
    monthsParseExact : true,
    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Aujourd\'hui à] LT',
        nextDay : '[Demain à] LT',
        nextWeek : 'dddd [à] LT',
        lastDay : '[Hier à] LT',
        lastWeek : 'dddd [dernier à] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dans %s',
        past : 'il y a %s',
        s : 'quelques secondes',
        m : 'une minute',
        mm : '%d minutes',
        h : 'une heure',
        hh : '%d heures',
        d : 'un jour',
        dd : '%d jours',
        M : 'un mois',
        MM : '%d mois',
        y : 'un an',
        yy : '%d ans'
    },
    dayOfMonthOrdinalParse : /\d{1,2}(er|e)/,
    ordinal : function (number) {
        return number + (number === 1 ? 'er' : 'e');
    },
    meridiemParse : /PD|MD/,
    isPM : function (input) {
        return input.charAt(0) === 'M';
    },
    meridiem : function (hours, minutes, isLower) {
        return hours < 12 ? 'PD' : 'MD';
    },
    week : {
        dow : 1,
        doy : 4
    }
});

----------------------------------------

TITLE: Calculating Millisecond Difference in JavaScript using Moment.js
DESCRIPTION: Demonstrates how to use moment().diff() to calculate the difference between two dates in milliseconds.

LANGUAGE: javascript
CODE:
var a = moment([2007, 0, 29]);
var b = moment([2007, 0, 28]);
a.diff(b) // 86400000

----------------------------------------

TITLE: Locale-Specific Methods in Moment.js
DESCRIPTION: Provides an overview of various locale-specific methods available through the localeData object in Moment.js. These methods cover operations related to months, weekdays, date formatting, time representation, and more.

LANGUAGE: javascript
CODE:
localeData.months(aMoment);  // full month name of aMoment
localeData.monthsShort(aMoment);  // short month name of aMoment
localeData.monthsParse(longOrShortMonthString);  // returns month id (0 to 11) of input
localeData.weekdays(aMoment);  // full weekday name of aMoment
localeData.weekdaysShort(aMoment);  // short weekday name of aMoment
localeData.weekdaysMin(aMoment);  // min weekday name of aMoment
localeData.weekdaysParse(minShortOrLongWeekdayString);  // returns weekday id (0 to 6) of input
localeData.longDateFormat(dateFormat);  // returns the full format of abbreviated date-time formats LT, L, LL and so on
localeData.isPM(amPmString);  // returns true iff amPmString represents PM
localeData.meridiem(hours, minutes, isLower);  // returns am/pm string for particular time-of-day in upper/lower case
localeData.calendar(key, aMoment);  // returns a format that would be used for calendar representation. Key is one of 'sameDay', 'nextDay', 'lastDay', 'nextWeek', 'prevWeek', 'sameElse'
localeData.relativeTime(number, withoutSuffix, key, isFuture);  // returns relative time string, key is on of 's', 'm', 'mm', 'h', 'hh', 'd', 'dd', 'M', 'MM', 'y', 'yy'. Single letter when number is 1.
localeData.pastFuture(diff, relTime);  // convert relTime string to past or future string depending on diff
localeData.ordinal(number);  // convert number to ordinal string 1 -> 1st
localeData.preparse(str);  // called before parsing on every input string
localeData.postformat(str);  // called after formatting on every string
localeData.week(aMoment);  // returns week-of-year of aMoment
localeData.invalidDate();  // returns a translation of 'Invalid date'
localeData.firstDayOfWeek();  // 0-6 (Sunday to Saturday)
localeData.firstDayOfYear();  // 0-15 Used to determine first week of the year.

----------------------------------------

TITLE: Parsing Timezone Offsets with moment.parseZone() in JavaScript
DESCRIPTION: Demonstrates how to use moment.parseZone() to parse date strings with timezone offsets. The function keeps the resulting Moment object in a fixed-offset timezone based on the provided offset in the string.

LANGUAGE: javascript
CODE:
moment.parseZone("2013-01-01T00:00:00-13:00").utcOffset(); // -780 ("-13:00" in total minutes)
moment.parseZone('2013 01 01 05 -13:00', 'YYYY MM DD HH ZZ').utcOffset(); // -780  ("-13:00" in total minutes)
moment.parseZone('2013-01-01-13:00', ['DD MM YYYY ZZ', 'YYYY MM DD ZZ']).utcOffset(); // -780  ("-13:00" in total minutes);

----------------------------------------

TITLE: Importing and Using Moment.js with CommonJS Syntax
DESCRIPTION: This snippet demonstrates how to require the Moment.js library using CommonJS syntax and use its format method. It's the traditional way of importing modules in Node.js.

LANGUAGE: javascript
CODE:
var moment = require('moment'); // require
moment().format();

----------------------------------------

TITLE: Using Granularity with isAfter() in JavaScript
DESCRIPTION: Shows how to use the second parameter of isAfter() to limit the granularity of the comparison. This allows for comparing specific units of time such as years, months, or days.

LANGUAGE: javascript
CODE:
moment('2010-10-20').isAfter('2010-01-01', 'year'); // false
moment('2010-10-20').isAfter('2009-12-31', 'year'); // true

----------------------------------------

TITLE: Using Local Time Getters and Setters in MomentJS
DESCRIPTION: Demonstrates how MomentJS getter and setter methods map to native JavaScript Date object methods. Shows comparison between moment and native Date operations for seconds.

LANGUAGE: javascript
CODE:
moment().seconds(30).valueOf() === new Date().setSeconds(30);
moment().seconds()   === new Date().getSeconds();

----------------------------------------

TITLE: Basic Date Range Comparison in Moment.js
DESCRIPTION: Demonstrates basic usage of isBetween() method to check if a date falls between two other dates.

LANGUAGE: javascript
CODE:
moment('2010-10-20').isBetween('2010-10-19', '2010-10-25'); // true
moment('2010-10-20').isBetween('2010-10-19', undefined); // true, since moment(undefined) evaluates as moment()

----------------------------------------

TITLE: Defining Zone Object Structure in JavaScript
DESCRIPTION: Demonstrates the structure of a Zone object used in Moment Timezone with five key properties: name (unique identifier), abbrs (timezone abbreviations), untils (timestamp boundaries), offsets (timezone offsets in minutes), and population (rough population estimate for the zone's largest city).

LANGUAGE: javascript
CODE:
{
	name       : 'America/Los_Angeles',          // the unique identifier
	abbrs      : ['PDT', 'PST'],                 // the abbreviations
	untils     : [1414918800000, 1425808800000], // the timestamps in milliseconds
	offsets    : [420, 480],                     // the offsets in minutes
	population : 15000000                        // a rough population count for the largest city in this zone
}

----------------------------------------

TITLE: Preventing UUID Parsing as Date in MomentJS
DESCRIPTION: Shows how strict mode prevents incorrect parsing of UUIDs as dates, which can happen in non-strict mode due to partial matching.

LANGUAGE: javascript
CODE:
//UUID matches YYYYDDD because it starts with 7 digits
moment('5917238b-33ff-f849-cd63-80f4c9b37d0c', moment.ISO_8601).format()
"5917-08-26T00:00:00-05:00"
//strict mode fails because trailing data exists
moment('5917238b-33ff-f849-cd63-80f4c9b37d0c', moment.ISO_8601, true).format()
"Invalid date"

----------------------------------------

TITLE: Basic Time Difference Calculation in MomentJS
DESCRIPTION: Demonstrates the basic usage of moment().from() to calculate the difference between two dates using moment objects.

LANGUAGE: javascript
CODE:
var a = moment([2007, 0, 28]);
var b = moment([2007, 0, 29]);
a.from(b) // "a day ago"

----------------------------------------

TITLE: Using UTC Time Getters and Setters in MomentJS
DESCRIPTION: Shows how MomentJS UTC mode maps to native JavaScript Date UTC methods. Demonstrates getter and setter operations for seconds in UTC time.

LANGUAGE: javascript
CODE:
moment.utc().seconds(30).valueOf() === new Date().setUTCSeconds(30);
moment.utc().seconds()   === new Date().getUTCSeconds();

----------------------------------------

TITLE: Basic Time From Now Usage - JavaScript
DESCRIPTION: Demonstrates the basic usage of fromNow() method to display relative time from a specific date.

LANGUAGE: javascript
CODE:
moment([2007, 0, 29]).fromNow(); // 4 years ago

----------------------------------------

TITLE: Changing Locales Locally in Moment.js
DESCRIPTION: This snippet demonstrates how to change locales locally for specific moment instances using the locale() method. It shows the impact on date formatting and how global locale changes affect local instances.

LANGUAGE: javascript
CODE:
moment.locale('en'); // default the locale to English
var localLocale = moment();

localLocale.locale('fr'); // set this instance to use French
localLocale.format('LLLL'); // dimanche 15 juillet 2012 11:01
moment().format('LLLL'); // Sunday, July 15 2012 11:01 AM

moment.locale('es'); // change the global locale to Spanish
localLocale.format('LLLL'); // dimanche 15 juillet 2012 11:01
moment().format('LLLL'); // Domingo 15 Julio 2012 11:01

localLocale.locale(['tq', 'fr']); // set this instance to the first localization found
localLocale.format('LLLL'); // dimanche 15 juillet 2012 11:01
moment().format('LLLL'); // Sunday, July 15 2012 11:01 AM

localLocale.locale(false); // reset the instance locale
localLocale.format('LLLL'); // Domingo 15 Julio 2012 11:01
moment().format('LLLL'); // Domingo 15 Julio 2012 11:01

----------------------------------------

TITLE: Checking if Date is a Specific Day of the Week in MomentJS
DESCRIPTION: This example demonstrates how to use the day() method to check if a date falls on a specific day of the week. It checks if the current date is a Saturday (day 6 in MomentJS).

LANGUAGE: javascript
CODE:
moment().day() === 6;

----------------------------------------

TITLE: Basic Duration Humanization in JavaScript with Moment.js
DESCRIPTION: Demonstrates how to use moment.duration().humanize() to convert various time durations into human-readable strings. This method provides a simple way to display lengths of time in a user-friendly format.

LANGUAGE: javascript
CODE:
moment.duration(1, "minutes").humanize(); // a minute
moment.duration(2, "minutes").humanize(); // 2 minutes
moment.duration(24, "hours").humanize();  // a day

----------------------------------------

TITLE: Switching Locales in Moment.js
DESCRIPTION: Shows how to switch between different locales and how locale changes affect moment instances.

LANGUAGE: javascript
CODE:
moment.locale('fr');
moment(1316116057189).fromNow(); // il y a une heure
moment.locale('en');
moment(1316116057189).fromNow(); // an hour ago

----------------------------------------

TITLE: Date Range Order Comparison in Moment.js
DESCRIPTION: Shows how the order of arguments affects the result of isBetween() method. The smaller date should be the first argument.

LANGUAGE: javascript
CODE:
moment('2010-10-20').isBetween('2010-10-19', '2010-10-25'); // true
moment('2010-10-20').isBetween('2010-10-25', '2010-10-19'); // false

----------------------------------------

TITLE: Comparing Local and UTC Time Formatting in Moment.js
DESCRIPTION: This snippet demonstrates the difference in output between local time and UTC time when formatting moments. It shows how to create and format moments in both local and UTC modes.

LANGUAGE: javascript
CODE:
moment().format();     // 2013-02-04T10:35:24-08:00
moment.utc().format(); // 2013-02-04T18:35:24+00:00

----------------------------------------

TITLE: Creating Duration with Multiple Units in Moment.js
DESCRIPTION: Creates a duration object by specifying multiple units of time in an object. This allows for complex duration definitions with various time units.

LANGUAGE: javascript
CODE:
moment.duration({
    seconds: 2,
    minutes: 2,
    hours: 2,
    days: 2,
    weeks: 2,
    months: '2',
    years: '2'
});

----------------------------------------

TITLE: Converting Moment Object to Unix Timestamp in JavaScript using Moment.js
DESCRIPTION: This snippet demonstrates how to use the unix() method of a Moment.js object to convert a timestamp in milliseconds to a Unix timestamp in seconds. The resulting value is floored to the nearest second and does not include milliseconds.

LANGUAGE: javascript
CODE:
moment(1318874398806).unix(); // 1318874398

----------------------------------------

TITLE: Guessing User Timezone with Moment.js
DESCRIPTION: Demonstrates how to use moment.tz.guess() to detect the user's timezone, including how to ignore the cache. The function returns the IANA timezone identifier as a string.

LANGUAGE: javascript
CODE:
moment.tz.guess(); // America/Chicago
// suppose the client's timezone changes to Europe/Berlin
moment.tz.guess(); // America/Chicago
moment.tz.guess(true); // Europe/Berlin
moment.tz.guess(); // Europe/Berlin

----------------------------------------

TITLE: Comparing Moments with isAfter() in JavaScript
DESCRIPTION: Demonstrates basic usage of the isAfter() method to compare two moments. The method returns true if the first moment is after the second moment.

LANGUAGE: javascript
CODE:
moment('2010-10-20').isAfter('2010-10-19'); // true

----------------------------------------

TITLE: Setting Month Names Array in Moment.js
DESCRIPTION: This snippet demonstrates how to set an array of month names for the English locale in Moment.js. It uses the updateLocale method to define the months property with an array of full month names.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    months : [
        "January", "February", "March", "April", "May", "June", "July",
        "August", "September", "October", "November", "December"
    ]
});

----------------------------------------

TITLE: Creating Custom Locale in Moment.js
DESCRIPTION: Shows how to create a custom locale with specific settings in Moment.js using the locale() method.

LANGUAGE: javascript
CODE:
moment.locale('en-my-settings', {
    // customizations.
});

----------------------------------------

TITLE: DST-Aware Parsing in Moment.js
DESCRIPTION: Shows how moment.tz handles Daylight Saving Time (DST) correctly when parsing dates in different seasons.

LANGUAGE: javascript
CODE:
moment.tz("2013-12-01", "America/Los_Angeles").format(); // 2013-12-01T00:00:00-08:00
moment.tz("2013-06-01", "America/Los_Angeles").format(); // 2013-06-01T00:00:00-07:00

----------------------------------------

TITLE: ISO 8601 Time Format Examples
DESCRIPTION: Demonstrates various ISO 8601 time formats with different precision levels and separators.

LANGUAGE: plaintext
CODE:
2013-02-08T09            # An hour time part separated by a T
2013-02-08 09            # An hour time part separated by a space
2013-02-08 09:30         # An hour and minute time part
2013-02-08 09:30:26      # An hour, minute, and second time part
2013-02-08 09:30:26.123  # An hour, minute, second, and millisecond time part
2013-02-08 24:00:00.000  # hour 24, minute, second, millisecond equal 0 means next day at midnight

20130208T080910,123      # Short date and time up to ms, separated by comma
20130208T080910.123      # Short date and time up to ms
20130208T080910          # Short date and time up to seconds
20130208T0809            # Short date and time up to minutes
20130208T08              # Short date and time, hours only

----------------------------------------

TITLE: Checking if Date is Before Another Date in MomentJS
DESCRIPTION: This snippet demonstrates how to use the isBefore() method in MomentJS to check if one date is before another. It compares the current date with January 1st, 2012.

LANGUAGE: javascript
CODE:
moment().isBefore('2012-01-01');

----------------------------------------

TITLE: Converting Moment to Native Date in JavaScript
DESCRIPTION: Demonstrates how to convert a Moment.js object to a native JavaScript Date object using the toDate() method. Returns a copy of the underlying Date object, ensuring that modifications to the returned Date won't affect the original Moment instance.

LANGUAGE: javascript
CODE:
moment().toDate();

----------------------------------------

TITLE: Parsing ASP.NET Style Time Spans in Moment.js
DESCRIPTION: Demonstrates parsing ASP.NET style time spans to create duration objects. Supports formats like HH:mm:ss, d.HH:mm:ss, and partial seconds.

LANGUAGE: javascript
CODE:
moment.duration('23:59:59');
moment.duration('23:59:59.999');
moment.duration('7.23:59:59.999');
moment.duration('23:59'); // added in 2.3.0

----------------------------------------

TITLE: Creating Duration with Milliseconds in Moment.js
DESCRIPTION: Creates a duration object with a specified number of milliseconds using Moment.js. This is the basic way to create a duration object.

LANGUAGE: javascript
CODE:
moment.duration(100); // 100 milliseconds

----------------------------------------

TITLE: Accessing Creation Data with Moment.js in JavaScript
DESCRIPTION: Demonstrates how to use the creationData() method to retrieve the input parameters used to create a Moment.js object. The method returns an object containing the original input, format string, locale object, UTC flag, and strict parsing flag.

LANGUAGE: javascript
CODE:
moment("2013-01-02", "YYYY-MM-DD", true).creationData() === {
    input: "2013-01-02",
    format: "YYYY-MM-DD",
    locale: Locale obj,
    isUTC: false,
    strict: true
}

----------------------------------------

TITLE: Invalid Date Handling in moment.min() - JavaScript
DESCRIPTION: Shows how moment.min() handles invalid dates as arguments. When any argument is invalid, the result is an invalid moment object.

LANGUAGE: javascript
CODE:
moment.min(moment(), moment.invalid()).isValid() === false
moment.min(moment.invalid(), moment()).isValid() === false
moment.min([moment(), moment.invalid()]).isValid() === false
moment.min([moment.invalid(), moment()]).isValid() === false

----------------------------------------

TITLE: Explicit Moment Cloning using clone() Method
DESCRIPTION: Creates a clone of a moment object using the built-in clone() method. This approach provides the same functionality as the constructor method but with more explicit syntax.

LANGUAGE: javascript
CODE:
var a = moment([2012]);
var b = a.clone();
a.year(2000);
b.year(); // 2012

----------------------------------------

TITLE: Inclusive/Exclusive Date Range Comparison in Moment.js
DESCRIPTION: Shows how to use inclusivity parameters with isBetween() method. Uses brackets notation where [ means inclusive and ( means exclusive.

LANGUAGE: javascript
CODE:
moment('2016-10-30').isBetween('2016-10-30', '2016-12-30', undefined, '()'); //false
moment('2016-10-30').isBetween('2016-10-30', '2016-12-30', undefined, '[)'); //true
moment('2016-10-30').isBetween('2016-01-01', '2016-10-30', undefined, '()'); //false
moment('2016-10-30').isBetween('2016-01-01', '2016-10-30', undefined, '(]'); //true
moment('2016-10-30').isBetween('2016-10-30', '2016-10-30', undefined, '[]'); //true

----------------------------------------

TITLE: Getting and Setting Date of Month in MomentJS
DESCRIPTION: Methods to get or set the day of the month in MomentJS. Accepts values from 1-31 and will handle month rollovers automatically. The dates() method is deprecated as of version 2.16.0 in favor of date().

LANGUAGE: javascript
CODE:
moment().date(Number);
moment().date(); // Number

LANGUAGE: javascript
CODE:
moment().dates(Number);
moment().dates(); // Number

LANGUAGE: javascript
CODE:
// Bad date construction order
moment().date(day).month(month).year(year)

LANGUAGE: javascript
CODE:
// Good date construction order
moment().year(year).month(month).date(day)

----------------------------------------

TITLE: Getting and Setting Hours in Momentjs
DESCRIPTION: Methods to get or set the hour value in a moment object. Accepts values from 0 to 23, with values outside this range automatically adjusting the day. Both hour() and hours() are aliases of the same functionality.

LANGUAGE: javascript
CODE:
moment().hour(Number);
moment().hour(); // Number
moment().hours(Number);
moment().hours(); // Number

----------------------------------------

TITLE: Setting Day of Week with Numeric Values in Moment.js
DESCRIPTION: Demonstrates how to set the day of the week using numeric values in Moment.js. The method accepts values from -7 to 24, allowing for setting days in previous, current, and future weeks.

LANGUAGE: javascript
CODE:
moment().day(-7); // last Sunday (0 - 7)
moment().day(0); // this Sunday (0)
moment().day(7); // next Sunday (0 + 7)
moment().day(10); // next Wednesday (3 + 7)
moment().day(24); // 3 Wednesdays from now (3 + 7 + 7 + 7)

----------------------------------------

TITLE: Basic Moment Comparison using isBefore()
DESCRIPTION: Demonstrates basic date comparison using isBefore() method to check if one date comes before another.

LANGUAGE: javascript
CODE:
moment('2010-10-20').isBefore('2010-10-21'); // true

----------------------------------------

TITLE: Basic Maximum Usage with MomentJS
DESCRIPTION: Demonstrates how to use the max() function to clamp a server timestamp, preventing display of future-oriented humanized strings when server and client clocks are out of sync.

LANGUAGE: javascript
CODE:
var momentFromServer = moment(input);
var clampedMoment = momentFromServer.max();

----------------------------------------

TITLE: Setting Meridiem Function in MomentJS Locale (Current)
DESCRIPTION: Shows the current method for setting a custom meridiem function in MomentJS (version 2.12.0+). This allows defining how AM/PM values should be computed for a specific locale.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    meridiem : Function
});

----------------------------------------

TITLE: Cloning and Comparing Durations in Moment.js (JavaScript)
DESCRIPTION: This snippet demonstrates how to create a clone of a Moment.js duration object and compare it with the original after modification. It uses the clone() method to create a snapshot of the duration, then modifies the original to show the difference.

LANGUAGE: javascript
CODE:
var d1 = moment.duration();
var d2 = d1.clone();
d1.add(1, 'second');
d1.asMilliseconds() !== d2.asMilliseconds();

----------------------------------------

TITLE: Getting and Setting Minutes with Moment.js
DESCRIPTION: These methods allow you to get or set the minutes of a Moment.js object. They accept numbers from 0 to 59 and will bubble up to the hour if the range is exceeded. Both minute() and minutes() can be used interchangeably.

LANGUAGE: javascript
CODE:
moment().minute(Number);
moment().minute(); // Number
moment().minutes(Number);
moment().minutes(); // Number

----------------------------------------

TITLE: Setting Month by Name in MomentJS
DESCRIPTION: Demonstrates setting the month using month names, supported since version 2.1.0. Shows both full and abbreviated month name usage.

LANGUAGE: javascript
CODE:
moment().month("January");
moment().month("Feb");

----------------------------------------

TITLE: Setting Time Zone from ISO8601 String in Moment.js
DESCRIPTION: Sets the time zone by extracting offset information from an ISO8601 formatted string

LANGUAGE: javascript
CODE:
moment().zone("2013-03-07T07:00:00-08:00");

----------------------------------------

TITLE: Humanizing Durations with Suffixes in JavaScript using Moment.js
DESCRIPTION: Shows how to add suffixes to humanized durations by passing true as an argument to humanize(). This allows for creating oriented durations that indicate whether the time is in the future or past.

LANGUAGE: javascript
CODE:
moment.duration(1, "minutes").humanize(true); // in a minute

LANGUAGE: javascript
CODE:
moment.duration(-1, "minutes").humanize(true); // a minute ago

----------------------------------------

TITLE: Getting Quarter Value in MomentJS
DESCRIPTION: Demonstrates how to retrieve the current quarter (1-4) for a given date using MomentJS. Shows quarter transitions at the start and end of each quarter period.

LANGUAGE: javascript
CODE:
moment('2013-01-01T00:00:00.000').quarter() // 1
moment('2013-04-01T00:00:00.000').subtract(1, 'ms').quarter() // 1
moment('2013-04-01T00:00:00.000').quarter() // 2
moment('2013-07-01T00:00:00.000').subtract(1, 'ms').quarter() // 2
moment('2013-07-01T00:00:00.000').quarter() // 3
moment('2013-10-01T00:00:00.000').subtract(1, 'ms').quarter() // 3
moment('2013-10-01T00:00:00.000').quarter() // 4
moment('2014-01-01T00:00:00.000').subtract(1, 'ms').quarter() // 4

----------------------------------------

TITLE: Getting and Setting Year in Moment.js
DESCRIPTION: These methods allow you to get or set the year of a Moment.js object. The year can be set to any number between -270,000 and 270,000. Note that the 'years' method is deprecated as of version 2.6.0.

LANGUAGE: javascript
CODE:
moment().year(Number);
moment().year(); // Number
moment().years(Number);
moment().years(); // Number

----------------------------------------

TITLE: Calculating Days in Month using Moment.js in JavaScript
DESCRIPTION: This snippet demonstrates how to use the daysInMonth() method in Moment.js to get the number of days in a specific month. It shows examples for both a leap year (February 2012) and a regular month (January 2012).

LANGUAGE: javascript
CODE:
moment("2012-02", "YYYY-MM").daysInMonth() // 29
moment("2012-01", "YYYY-MM").daysInMonth() // 31

----------------------------------------

TITLE: Comparing Dates with isSameOrBefore in Moment.js
DESCRIPTION: Demonstrates basic usage of the isSameOrBefore() method to compare dates. The method returns true if the first date is before or the same as the second date, and false otherwise.

LANGUAGE: javascript
CODE:
moment('2010-10-20').isSameOrBefore('2010-10-21');  // true
moment('2010-10-20').isSameOrBefore('2010-10-20');  // true
moment('2010-10-20').isSameOrBefore('2010-10-19');  // false

----------------------------------------

TITLE: Granular Date Comparison in Moment.js
DESCRIPTION: Demonstrates using unit granularity (year) with isBetween() method to compare dates at different scales.

LANGUAGE: javascript
CODE:
moment('2010-10-20').isBetween('2010-01-01', '2012-01-01', 'year'); // false
moment('2010-10-20').isBetween('2009-12-31', '2012-01-01', 'year'); // true

----------------------------------------

TITLE: Default Behavior of isAfter() in JavaScript
DESCRIPTION: Illustrates the default behavior of isAfter() when called without arguments. It compares the moment to the current time, typically returning false unless the moment is set to a future time.

LANGUAGE: javascript
CODE:
moment().isAfter(); // false

----------------------------------------

TITLE: Setting Quarter Value in MomentJS
DESCRIPTION: Shows how to set the quarter value (1-4) for a given date using MomentJS. The method adjusts the date to the start of the specified quarter while maintaining time components.

LANGUAGE: javascript
CODE:
moment('2013-01-01T00:00:00.000').quarter(2) // '2013-04-01T00:00:00.000'
moment('2013-02-05T05:06:07.000').quarter(2).format() // '2013-05-05T05:06:07-07:00'

----------------------------------------

TITLE: Converting UTC to Local Time in MomentJS
DESCRIPTION: Demonstrates converting a UTC moment to local time using the local() method. The example shows how the hours value changes based on the timezone conversion.

LANGUAGE: javascript
CODE:
var a = moment.utc([2011, 0, 1, 8]);
a.hours(); // 8 UTC
a.local();
a.hours(); // 0 PST

----------------------------------------

TITLE: Converting Duration Units with moment.duration().as()
DESCRIPTION: Examples of converting duration values to different time units using the as() method. Accepts a string parameter specifying the target unit. Returns NaN for invalid durations. Supports hours, minutes, seconds, and milliseconds conversions.

LANGUAGE: javascript
CODE:
duration.as('hours');
duration.as('minutes');
duration.as('seconds');
duration.as('milliseconds');

----------------------------------------

TITLE: Setting UTC Offset with Time Preservation in Moment.js
DESCRIPTION: Illustrates the use of the optional second parameter in utcOffset() to preserve local time when changing the offset. This is useful for constructing moments with specific time zone offsets.

LANGUAGE: javascript
CODE:
moment([2016, 0, 1, 0, 0, 0]).utcOffset(-5, true) // Equivalent to "2016-01-01T00:00:00-05:00"

----------------------------------------

TITLE: Loading Bundled Locales
DESCRIPTION: Shows how to load all locales at once using a minified bundle file.

LANGUAGE: html
CODE:
<script src="moment.js"></script>
<script src="min/locales.js" charset="UTF-8"></script>

----------------------------------------

TITLE: Month and Day Granularity Comparison
DESCRIPTION: Demonstrates comparisons using month and day granularity levels, showing how larger units are included in the comparison.

LANGUAGE: javascript
CODE:
moment('2010-01-01').isSame('2011-01-01', 'month'); // false, different year
moment('2010-01-01').isSame('2010-02-01', 'day');   // false, different month

----------------------------------------

TITLE: Time From Now With and Without Suffix - JavaScript
DESCRIPTION: Shows how to display relative time both with and without the suffix by passing a boolean parameter to fromNow().

LANGUAGE: javascript
CODE:
moment([2007, 0, 29]).fromNow();     // 4 years ago
moment([2007, 0, 29]).fromNow(true); // 4 years

----------------------------------------

TITLE: Calculating Relative Time with Moment.js
DESCRIPTION: Demonstrates how to use the 'to' method to calculate the relative time between two moments. The method accepts various input types for the target time.

LANGUAGE: javascript
CODE:
var a = moment([2007, 0, 28]);
var b = moment([2007, 0, 29]);
a.to(b) // "in a day"

----------------------------------------

TITLE: Validating Duration Objects with moment.isDuration()
DESCRIPTION: Demonstrates how to use moment.isDuration() to check if a variable is a Moment.js duration object. The method returns true only for valid duration objects created using moment.duration(), and false for other types like Date objects, moment objects, or undefined values.

LANGUAGE: javascript
CODE:
moment.isDuration() // false
moment.isDuration(new Date()) // false
moment.isDuration(moment()) // false
moment.isDuration(moment.duration()) // true
moment.isDuration(moment.duration(2, 'minutes')) // true

----------------------------------------

TITLE: Setting Day of Week with String Names in Moment.js
DESCRIPTION: Shows how to set the day of the week using day names in Moment.js. This feature is available from version 2.1.0 and uses the moment's current locale for parsing.

LANGUAGE: javascript
CODE:
moment().day("Sunday");
moment().day("Monday");

----------------------------------------

TITLE: Era Configuration Object Structure
DESCRIPTION: Defines the structure of a single era configuration object, showing all available properties including start/end dates, offset values, and naming options.

LANGUAGE: javascript
CODE:
eras: [{
    since:  '0001-01-01', // the start of the era
    until:  +Infinity,    // the end of the era, can be +/-Infinity
    offset: 1,            // added to year to (mostly) avoid 0 era years
    name:   'Anno Domini',// full name of era
    narrow: 'AD',         // narrow name of era
    abbr:   'AD'          // abbreviated name of era
}]

----------------------------------------

TITLE: Updating Locale Properties in Moment.js
DESCRIPTION: Shows how to update specific properties of an existing locale while keeping others unchanged (introduced in v2.12.0).

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
  /**/
});

----------------------------------------

TITLE: Converting Moment Object to Array Using toArray() Method
DESCRIPTION: Demonstrates how to convert a Moment.js object into an array format that mirrors the parameters used in JavaScript's new Date() constructor. The returned array contains year, month, day, hour, minute, second, and millisecond values in order.

LANGUAGE: javascript
CODE:
moment().toArray(); // [2013, 1, 4, 14, 40, 16, 154];

----------------------------------------

TITLE: Calendar Format with Callback Function in MomentJS
DESCRIPTION: Shows how to use a callback function for dynamic calendar formatting based on the current context. The callback receives the current moment as an argument and can return different formats based on conditions.

LANGUAGE: javascript
CODE:
moment().calendar(null, {
  sameDay: function (now) {
    if (this.isBefore(now)) {
      return '[Will Happen Today]';
    } else {
      return '[Happened Today]';
    }
    /* ... */
  }
});

----------------------------------------

TITLE: Creating Basic Invalid Moment Object
DESCRIPTION: Demonstrates creating a basic invalid Moment object and checking its validity status using isValid() and format() methods. Shows how to verify the userInvalidated flag through parsingFlags().

LANGUAGE: javascript
CODE:
var m = moment.invalid();
m.isValid();                      // false
m.format();                       // 'Invalid date'
m.parsingFlags().userInvalidated; // true

----------------------------------------

TITLE: Checking Leap Years with MomentJS
DESCRIPTION: Demonstrates how to use the moment().isLeapYear() method to check if a specific year is a leap year. Returns true for leap years and false for non-leap years. The examples show checks for the years 2000 (leap year), 2001 (non-leap year), and 2100 (non-leap year despite being divisible by 100).

LANGUAGE: javascript
CODE:
moment([2000]).isLeapYear() // true
moment([2001]).isLeapYear() // false
moment([2100]).isLeapYear() // false

----------------------------------------

TITLE: Checking German Holidays with moment-feiertage Plugin in JavaScript
DESCRIPTION: This snippet demonstrates how to use the moment-feiertage plugin to check if a specific date is a holiday in certain German states. It returns an object containing information about the holiday status, name, and applicable states.

LANGUAGE: javascript
CODE:
var someDateInSomeStates = moment('2018-11-01').isHoliday(['BW', 'SH', 'TH']);
/* returns {
  allStates: false,
  holidayName: 'Allerheiligen',
  holidayStates: [ 'BW' ],
  testedStates: [ 'BW', 'SH', 'TH' ]
}*/

----------------------------------------

TITLE: Setting MeridiemParse Regular Expression in MomentJS
DESCRIPTION: Shows how to define a regular expression pattern for parsing AM/PM indicators in time strings. The pattern matches variations of 'am' and 'pm' with optional dots and 'm' suffix.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    meridiemParse : /[ap]\.?m?\.?/i
});

----------------------------------------

TITLE: Customizing Moment JSON Serialization
DESCRIPTION: Shows how to modify the toJSON function to preserve local timezone offset in the output string.

LANGUAGE: javascript
CODE:
moment.fn.toJSON = function() { return this.format(); }

----------------------------------------

TITLE: Calculating Floating Point Year Difference in JavaScript using Moment.js
DESCRIPTION: Demonstrates how to use moment().diff() with the 'years' unit and a third parameter to get a floating point result instead of an integer.

LANGUAGE: javascript
CODE:
var a = moment([2008, 9]);
var b = moment([2007, 0]);
a.diff(b, 'years');       // 1
a.diff(b, 'years', true); // 1.75

----------------------------------------

TITLE: Extracting Date Format with Moment.js Parse Date Format Plugin
DESCRIPTION: This snippet demonstrates how to use the moment-parseformat plugin to extract the format of a date/time string and then use that format with Moment.js. It requires the moment-parseformat plugin to be installed.

LANGUAGE: javascript
CODE:
var format = moment.parseFormat('Thursday, February 6th, 2014 9:20pm');
// dddd, MMMM Do, YYYY h:mma
moment().format(format); // format

----------------------------------------

TITLE: Getting and Setting Milliseconds in Moment.js
DESCRIPTION: These functions allow retrieving or modifying the millisecond component of a Moment.js object. They accept values from 0 to 999, with overflow bubbling up to seconds.

LANGUAGE: javascript
CODE:
moment().millisecond(Number);
moment().millisecond(); // Number
moment().milliseconds(Number);
moment().milliseconds(); // Number

----------------------------------------

TITLE: Configuring Week Settings Using moment.lang (Deprecated)
DESCRIPTION: Shows the deprecated method (before v2.8.1) for configuring week settings using moment.lang(). Included for historical reference but should not be used in new code.

LANGUAGE: javascript
CODE:
moment.lang('en', {
    week : {
        dow : Int,
        doy : Int
    }
});

----------------------------------------

TITLE: Formatting Dates with Moment.js Timezone
DESCRIPTION: Example of using Moment.js to format a date in a specific timezone (America/Los Angeles). Demonstrates the basic timezone formatting functionality after library initialization.

LANGUAGE: javascript
CODE:
moment().tz("America/Los_Angeles").format();

----------------------------------------

TITLE: Converting MomentJS Object to String
DESCRIPTION: Converts a Moment.js datetime object into a human-readable string format that matches JavaScript's native Date.toString() output format. Returns a timestamp string including day, date, time, and timezone information.

LANGUAGE: javascript
CODE:
moment().toString() // "Sat Apr 30 2016 16:59:46 GMT-0500"

----------------------------------------

TITLE: MomentJS valueOf() Method Declaration
DESCRIPTION: Shows the basic syntax for using moment().valueOf() method to get milliseconds since Unix Epoch.

LANGUAGE: javascript
CODE:
moment().valueOf();
+moment();

----------------------------------------

TITLE: Setting UTC Offset with Minutes in Moment.js
DESCRIPTION: Sets the UTC offset of a Moment object by providing the offset in minutes. This sets a fixed offset that won't change automatically.

LANGUAGE: javascript
CODE:
moment().utcOffset(120);

----------------------------------------

TITLE: Creating Moment Object with Partial Seconds
DESCRIPTION: Demonstrates creating a Moment.js object from a Unix timestamp that includes partial seconds. The precision of the partial seconds is preserved in the resulting moment object.

LANGUAGE: javascript
CODE:
var day = moment.unix(1318781876.721);

----------------------------------------

TITLE: Moment.js Locale Bug Demonstration
DESCRIPTION: Illustrates a bug where moment.locale() fails to load correctly in Browserify.

LANGUAGE: javascript
CODE:
var moment = require('moment');
moment.locale('cs');
console.log(moment.locale()); // en

----------------------------------------

TITLE: Setting Weekday Abbreviations Array in MomentJS
DESCRIPTION: Demonstrates how to set weekday abbreviations using an array of strings in MomentJS locale settings. This is the simplest approach for defining abbreviated weekday names.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    weekdaysShort : ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
});

----------------------------------------

TITLE: Supported Time Units for isBefore()
DESCRIPTION: Lists all supported time unit parameters that can be used with the isBefore() method for granular comparisons.

LANGUAGE: plaintext
CODE:
year month week isoWeek day hour minute second

----------------------------------------

TITLE: Converting Moment.js Object to Plain JavaScript Object in JavaScript
DESCRIPTION: This snippet demonstrates how to use the toObject() method of a Moment.js object to convert it into a plain JavaScript object. The resulting object contains properties for years, months, date, hours, minutes, seconds, and milliseconds.

LANGUAGE: javascript
CODE:
moment().toObject()  // {
                     //     years: 2015
                     //     months: 6
                     //     date: 26,
                     //     hours: 1,
                     //     minutes: 53,
                     //     seconds: 14,
                     //     milliseconds: 600
                     // }

----------------------------------------

TITLE: Parsing Durations with Mixed Signs in Moment.js
DESCRIPTION: Demonstrates parsing durations with mixed negative and positive signs, allowing for more complex duration representations.

LANGUAGE: javascript
CODE:
moment.duration('PT-6H3M')

----------------------------------------

TITLE: Creating Inherited Locale in Moment.js
DESCRIPTION: Shows how to create a locale that inherits properties from a parent locale using defineLocale() method (introduced in v2.12.0).

LANGUAGE: javascript
CODE:
moment.defineLocale('en-foo', {
  parentLocale: 'en',
  /* */
});

----------------------------------------

TITLE: Moment.js Duration Subtract Method Signatures
DESCRIPTION: Shows the available method signatures for the subtract() method in Moment.js durations. Supports subtracting using number and string combinations, plain numbers, Duration objects, or configuration objects.

LANGUAGE: javascript
CODE:
moment.duration().subtract(Number, String);
moment.duration().subtract(Number);
moment.duration().subtract(Duration);
moment.duration().subtract(Object);

----------------------------------------

TITLE: Basic Date Comparison with isSameOrAfter
DESCRIPTION: Demonstrates basic usage of isSameOrAfter() method to compare dates. Shows examples of comparing dates that are after, same as, and before the reference date.

LANGUAGE: javascript
CODE:
moment('2010-10-20').isSameOrAfter('2010-10-19'); // true
moment('2010-10-20').isSameOrAfter('2010-10-20'); // true
moment('2010-10-20').isSameOrAfter('2010-10-21'); // false

----------------------------------------

TITLE: Using inspect() Method in Moment.js
DESCRIPTION: Demonstrates various use cases of the inspect() method in Moment.js, including regular moments, UTC moments, parsed timezone moments, and invalid moments. The method returns a string that can be evaluated to recreate the same moment object.

LANGUAGE: javascript
CODE:
moment().inspect() // 'moment("2016-11-09T22:23:27.861")'
moment.utc().inspect() // 'moment.utc("2016-11-10T06:24:10.638+00:00")'
moment.parseZone('2016-11-10T06:24:12.958+05:00').inspect() // 'moment.parseZone("2016-11-10T06:24:12.958+05:00")'
moment(new Date('nope')).inspect() // 'moment.invalid(/* Invalid Date */)'\nmoment('blah', 'YYYY').inspect() // 'moment.invalid(/* blah */)')

----------------------------------------

TITLE: Customizing Humanize Output with Thresholds in Moment.js
DESCRIPTION: Illustrates how to customize the humanize() output by specifying relative time thresholds. This feature, added in version 2.25.0, allows for more precise control over the generated human-readable strings.

LANGUAGE: javascript
CODE:
moment.duration(-1, 'week').humanize(true, {d: 7, w: 4}); // a week ago
moment.duration(-1, 'week').humanize({d: 7, w: 4}); // a week

----------------------------------------

TITLE: Creating Current DateTime in MomentJS
DESCRIPTION: Creates a moment object representing the current date and time when no parameters are passed.

LANGUAGE: javascript
CODE:
moment();

----------------------------------------

TITLE: Clamping Moment to Date Range in MomentJS (JavaScript)
DESCRIPTION: Shows how to use 'min' and 'max' functions together to clamp a moment object to a specific date range. In this example, the range is set to the current week.

LANGUAGE: javascript
CODE:
var start  = moment().startOf('week');
var end    = moment().endOf('week');
var actual = moment().min(start).max(end);

----------------------------------------

TITLE: Accessing Locale Data in Moment.js
DESCRIPTION: This snippet shows how to access locale data for a specific moment instance using the localeData() method. It demonstrates changing the locale and accessing month names in different languages.

LANGUAGE: javascript
CODE:
var fr = moment().locale('fr');
fr.localeData().months(moment([2012, 0])) // "janvier"
fr.locale('en');
fr.localeData().months(moment([2012, 0])) // "January"

----------------------------------------

TITLE: Granular Date Comparison with Time Units
DESCRIPTION: Shows how to use isSameOrAfter() with a specific time unit granularity. The example demonstrates year-level comparisons, where the method checks the year component while ignoring more precise units.

LANGUAGE: javascript
CODE:
moment('2010-10-20').isSameOrAfter('2011-12-31', 'year'); // false
moment('2010-10-20').isSameOrAfter('2010-01-01', 'year'); // true
moment('2010-10-20').isSameOrAfter('2009-12-31', 'year'); // true

----------------------------------------

TITLE: Granular Date Comparison with Unit Parameter
DESCRIPTION: Shows how to compare dates with specific granularity by providing a time unit parameter. The comparison checks all units down to the specified level.

LANGUAGE: javascript
CODE:
moment('2010-10-20').isBefore('2010-12-31', 'year'); // false
moment('2010-10-20').isBefore('2011-01-01', 'year'); // true

----------------------------------------

TITLE: Creating UTC Moment Instance with Array
DESCRIPTION: Creates a moment instance in UTC timezone using an array of date components.

LANGUAGE: javascript
CODE:
moment.utc([2010, 1, 14, 15, 25, 50, 125]);

----------------------------------------

TITLE: Year Granularity Comparison
DESCRIPTION: Shows how to compare dates with year granularity, where only the year component is considered in the comparison.

LANGUAGE: javascript
CODE:
moment('2010-10-20').isSame('2009-12-31', 'year');  // false
moment('2010-10-20').isSame('2010-01-01', 'year');  // true
moment('2010-10-20').isSame('2010-12-31', 'year');  // true
moment('2010-10-20').isSame('2011-01-01', 'year');  // false

----------------------------------------

TITLE: Basic Relative Time Configuration in MomentJS
DESCRIPTION: Shows how to update the English locale with custom relative time strings. Defines translations for various time units in both singular and plural forms, along with future/past prefixes.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    relativeTime : {
        future: "in %s",
        past:   "%s ago",
        s  : 'a few seconds',
        ss : '%d seconds',
        m:  "a minute",
        mm: "%d minutes",
        h:  "an hour",
        hh: "%d hours",
        d:  "a day",
        dd: "%d days",
        w:  "a week",
        ww: "%d weeks",
        M:  "a month",
        MM: "%d months",
        y:  "a year",
        yy: "%d years"
    }
});

----------------------------------------

TITLE: Validating Moment Instances Created with Arrays
DESCRIPTION: Demonstrates validation of moment instances created with arrays, showing examples of invalid dates.

LANGUAGE: javascript
CODE:
moment([2010, 12]).isValid();     // false (not a real month)
moment([2010, 10, 31]).isValid(); // false (not a real day)
moment([2010, 1, 29]).isValid();  // false (not a leap year)

----------------------------------------

TITLE: Edge Case Date Range Comparison in Moment.js
DESCRIPTION: Demonstrates edge case where from and to dates are the same but inclusivity parameters differ.

LANGUAGE: javascript
CODE:
moment('2016-10-30').isBetween('2016-10-30', '2016-10-30', undefined, '(]'); //false

----------------------------------------

TITLE: Timezone Comparison
DESCRIPTION: Shows how timezone differences are handled in comparisons, using the timezone of the first moment as the reference.

LANGUAGE: javascript
CODE:
moment.tz("2018-11-09T10:00:00", "Australia/Sydney").isSame(moment.tz("2018-11-08T12:00:00", "UTC"), "day"); // false
moment.tz("2018-11-08T12:00:00", "UTC").isSame(moment.tz("2018-11-09T10:00:00", "Australia/Sydney"), "day"); // true

----------------------------------------

TITLE: Month Overflow Behavior Change in MomentJS
DESCRIPTION: Illustrates the difference in month overflow behavior before and after version 2.1.0. Shows how dates are clamped to the end of target month instead of overflowing to the next month.

LANGUAGE: javascript
CODE:
// before 2.1.0
moment([2012, 0, 31]).month(1).format("YYYY-MM-DD"); // 2012-03-02
// after 2.1.0
moment([2012, 0, 31]).month(1).format("YYYY-MM-DD"); // 2012-02-29

----------------------------------------

TITLE: Switching Between UTC and Local Time in Moment.js
DESCRIPTION: This snippet shows how to switch a moment object from UTC to local time using the local() method. It demonstrates creating a moment in UTC mode and then converting it to local time, affecting the hours value.

LANGUAGE: javascript
CODE:
var a = moment.utc([2011, 0, 1, 8]);
a.hours(); // 8 UTC
a.local();
a.hours(); // 0 PST

----------------------------------------

TITLE: Time to Now with No Prefix in Moment.js
DESCRIPTION: Shows how to use toNow() with the boolean parameter to control whether the relative time string includes the 'in' prefix. When true, returns just the time difference without prefix.

LANGUAGE: javascript
CODE:
moment([2007, 0, 29]).toNow();     // in 4 years
moment([2007, 0, 29]).toNow(true); // 4 years

----------------------------------------

TITLE: Detailed Numeric Range Values
DESCRIPTION: Demonstrates how to get a detailed object containing the numeric values for each unit of time difference by passing true as the third parameter.

LANGUAGE: javascript
CODE:
moment.preciseDiff(m1, m2, true); 
// {years : 0, months : 1, days : 2, hours : 3, minutes : 4, seconds : 5, firstDateWasLater : false}

----------------------------------------

TITLE: Checking Moment Object using instanceof in JavaScript
DESCRIPTION: This snippet shows how to use the instanceof operator to check if a variable is a Moment object. This method is available from version 2.11.0 of Moment.js.

LANGUAGE: javascript
CODE:
moment() instanceof moment // true

----------------------------------------

TITLE: Using Granularity with isSameOrBefore in Moment.js
DESCRIPTION: Shows how to use the second parameter of isSameOrBefore() to specify the granularity of the comparison. The granularity parameter limits the precision of the comparison to a specific unit of time.

LANGUAGE: javascript
CODE:
moment('2010-10-20').isSameOrBefore('2009-12-31', 'year'); // false
moment('2010-10-20').isSameOrBefore('2010-12-31', 'year'); // true
moment('2010-10-20').isSameOrBefore('2011-01-01', 'year'); // true

----------------------------------------

TITLE: Setting Time Zone Offset with String Format in Moment.js
DESCRIPTION: Sets the time zone offset using a string in hour:minute format

LANGUAGE: javascript
CODE:
moment().zone("-08:00");

----------------------------------------

TITLE: Equivalent Operation to moment.parseZone() in JavaScript
DESCRIPTION: Demonstrates an alternative approach to achieve the same result as moment.parseZone(). This method involves parsing the string with moment() and then using moment#utcOffset to set the timezone offset.

LANGUAGE: javascript
CODE:
var s = "2013-01-01T00:00:00-13:00";
moment(s).utcOffset(s);

----------------------------------------

TITLE: MomentJS Locale Not Found Error Message
DESCRIPTION: The error message displayed when attempting to use a locale that has not been loaded or is not bundled with the MomentJS installation. This typically occurs when setting a global locale that is not available.

LANGUAGE: plaintext
CODE:
Locale <key> not found. Did you forget to load it?

----------------------------------------

TITLE: Converting Timezone Data with moment.tz.pack()
DESCRIPTION: Demonstrates how to convert timezone data from an unpacked object format to a packed string format. The unpacked format contains detailed timezone information including name, abbreviations, offsets, transition timestamps and population, while the packed format provides a compressed string representation.

LANGUAGE: javascript
CODE:
var unpacked = {
	name       : 'Indian/Mauritius',
	abbrs      : ['LMT', 'MUT', 'MUST', 'MUT', 'MUST', 'MUT'],
	offsets    : [-230, -240, -300, -240, -300, -240],
	untils     : [-1988164200000, 403041600000, 417034800000, 1224972000000, 1238274000000, null],
	population : 150000
};
moment.tz.pack(unpacked); // "Indian/Mauritius|LMT MUT MUST|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0|15e4"

----------------------------------------

TITLE: Locale Resolution in Moment.js
DESCRIPTION: Examples of how Moment.js resolves locale selections including fallbacks and array-based locale specification.

LANGUAGE: javascript
CODE:
moment.locale('fr'); // 'fr'
moment.locale('tq'); // 'fr'
moment.locale(['tq', 'fr']); // 'fr'
moment.locale('en-nz'); // 'en'
moment.locale(['en-nz', 'en-au']); // 'en-au', not 'en'

----------------------------------------

TITLE: JSPM Module Import for Locales
DESCRIPTION: Example of importing MomentJS and locale files using JSPM module syntax.

LANGUAGE: javascript
CODE:
import * as moment from 'moment';
import 'moment/locale/fr';

----------------------------------------

TITLE: Demonstrating Zone Method Deprecation Notice
DESCRIPTION: Shows the deprecation warning message for the zone() method.

LANGUAGE: text
CODE:
moment().zone is deprecated, 
use moment().utcOffset instead.

----------------------------------------

TITLE: Removing Locale in Moment.js
DESCRIPTION: Demonstrates how to remove a previously defined locale by passing null as the second argument, with example showing fallback behavior.

LANGUAGE: javascript
CODE:
moment.locale('fr'); // 'fr'
moment.locale('en'); // 'en'
moment.locale('fr', null);
moment.locale('fr'); // 'en'

----------------------------------------

TITLE: Disabling Relative Time Templates in moment-shortformat
DESCRIPTION: Shows how to disable the use of relative time templates in the moment-shortformat plugin. By passing 'false' as an argument to the 'short' method, it returns only the time difference without 'ago' or 'in'.

LANGUAGE: javascript
CODE:
moment().subtract(1, 'hour').short(false);
// 1h

----------------------------------------

TITLE: Loading Custom Locale Bundle
DESCRIPTION: Loading a custom-built MomentJS bundle that includes specific locales.

LANGUAGE: html
CODE:
<script src="min/moment-with-locales.custom.js" charset="UTF-8"></script>

----------------------------------------

TITLE: Checking and Changing Locales in Moment.js
DESCRIPTION: Demonstrates how to check the current locale and change it to a different one using Moment.js. The method returns the current locale when called without parameters.

LANGUAGE: javascript
CODE:
moment.locale('en'); // set to english
moment.locale(); // returns 'en'
moment.locale('fr'); // set to french
moment.locale(); // returns 'fr'

----------------------------------------

TITLE: Using Callback Function for Weekday Names in Moment.js
DESCRIPTION: This example demonstrates how to use a callback function to define weekday names in Moment.js. The function receives the moment object and format as parameters, allowing for dynamic weekday name generation.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    weekdays : function (momentToFormat, format) {
        return weekdays[momentToFormat.day()];
    }
});

----------------------------------------

TITLE: Creating Moment Object from Unix Timestamp
DESCRIPTION: Creates a Moment.js object by passing a Unix timestamp in milliseconds. The timestamp represents the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC (Unix Epoch).

LANGUAGE: javascript
CODE:
var day = moment(1318781876406);

----------------------------------------

TITLE: Comparing Year vs Days Addition in Leap Years
DESCRIPTION: Shows how adding 1 year vs 365 days produces different results in leap years due to varying year lengths.

LANGUAGE: javascript
CODE:
moment('2016-01-01').add(1, 'year').format('LL')
"January 1, 2017"
moment('2016-01-01').add(365, 'day').format('LL')
"December 31, 2016"

----------------------------------------

TITLE: Formatting Distant Dates with moment-shortformat in JavaScript
DESCRIPTION: Illustrates how the moment-shortformat plugin handles dates that are far in the past or future. For such dates, it displays the date in a more traditional format instead of using relative time.

LANGUAGE: javascript
CODE:
moment().subtract(500, 'days').short();
// 5 Mar, 1970

----------------------------------------

TITLE: Running Moment.js Tests
DESCRIPTION: Commands to install dependencies and run tests for Moment.js locale development

LANGUAGE: bash
CODE:
npm install
grunt

----------------------------------------

TITLE: Accessing Locale Data in Moment.js
DESCRIPTION: Demonstrates how to retrieve locale data for the current locale or a specific locale using Moment.js. This snippet shows the basic usage of the moment.localeData() function.

LANGUAGE: javascript
CODE:
// get current locale
var currentLocaleData = moment.localeData();
var frLocaleData = moment.localeData('fr');

----------------------------------------

TITLE: Filtering Timezone Data for a Single Year in JavaScript using Moment.js
DESCRIPTION: This example shows how to use moment.tz.filterYears with a single year parameter, which is used as both the start and end year. It demonstrates the significant reduction in data points when filtering for just one year.

LANGUAGE: javascript
CODE:
var all    = { name : "America/Los_Angeles", abbrs : [...], offsets : [...] untils : []};
var subset = moment.tz.filterYears(all, 2012);
all.untils.length;    // 186
subset.untils.length; // 3

----------------------------------------

TITLE: Getting and Setting ISO Week Year in Moment.js
DESCRIPTION: Method for retrieving or modifying the ISO week-year of a Moment.js date object. When called with no parameters, it acts as a getter returning the ISO week-year as a number. When called with a parameter, it sets the ISO week-year to the specified value.

LANGUAGE: javascript
CODE:
moment().isoWeekYear(Number);

LANGUAGE: javascript
CODE:
moment().isoWeekYear(); // Number

----------------------------------------

TITLE: Modified JSON Serialization Result
DESCRIPTION: Demonstrates the result of JSON serialization after customizing the toJSON method, showing local timezone offset.

LANGUAGE: javascript
CODE:
JSON.stringify({
    postDate : moment()
}); // '{"postDate":"2013-02-04T14:44:30-08:00"}'

----------------------------------------

TITLE: Date Arithmetic in JavaScript and Moment.js
DESCRIPTION: Compares date arithmetic operations between native JavaScript Date object and Moment.js, showing Moment.js's more intuitive API.

LANGUAGE: javascript
CODE:
var a = new Date('4/30/2016'); 
a.setDate(a.getDate() + 1);

LANGUAGE: javascript
CODE:
moment('4/30/2016', 'MM/DD/YYYY').add(1, 'day')
//"2016-05-01T00:00:00-05:00"

----------------------------------------

TITLE: Moment.js Locale File References
DESCRIPTION: Example file paths for locale implementation and test files in the Moment.js codebase

LANGUAGE: plaintext
CODE:
moment/src/locale/fr.js
moment/src/test/locale/fr.js

----------------------------------------

TITLE: Setting Month Abbreviations Array in Moment.js
DESCRIPTION: This snippet shows how to set an array of month abbreviations for the English locale in Moment.js. It uses the updateLocale method to define short month names.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    monthsShort : [
        "Jan", "Feb", "Mar", "Apr", "May", "Jun",
        "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
    ]
});

----------------------------------------

TITLE: Setting Locale Invalid Date Message - Deprecated Method
DESCRIPTION: Illustrates the deprecated method (pre-2.8.1) using lang() method. This approach should not be used in modern applications.

LANGUAGE: javascript
CODE:
moment.lang('en', {
    invalidDate : String
});

----------------------------------------

TITLE: Custom Two Digit Year Parsing
DESCRIPTION: Example of customizing how two-digit years are interpreted.

LANGUAGE: javascript
CODE:
moment.parseTwoDigitYear = function(yearString) {
    return parseInt(yearString) + 2000;
}

----------------------------------------

TITLE: Current and Deprecated Methods for Checking Locale in Moment.js
DESCRIPTION: Illustrates the current method (moment.locale()) for checking the locale, available from version 2.8.1 onwards, and the deprecated method (moment.lang()) used in earlier versions.

LANGUAGE: javascript
CODE:
// From version 2.8.1 onward
moment.locale();

// Deprecated in version 2.8.1
moment.lang();

----------------------------------------

TITLE: Comparing Zone and UTCOffset Methods
DESCRIPTION: Demonstrates the difference between the deprecated zone() method and the new utcOffset() method, showing how the sign convention has changed. The zone() method returned inverted signs while utcOffset() uses actual UTC offset direction.

LANGUAGE: javascript
CODE:
moment().zone()
360
//is replaced by
moment().utcOffset()
-360

moment().zone(420)
//is replaced by 
moment().utcOffset(-420)

----------------------------------------

TITLE: Getting Month List in Current Locale
DESCRIPTION: Returns an array of full month names in the current locale using moment.months()

LANGUAGE: javascript
CODE:
moment.months();

LANGUAGE: javascript
CODE:
[ 'January',
  'February',
  'March',
  'April',
  'May',
  'June',
  'July',
  'August',
  'September',
  'October',
  'November',
  'December' ]

----------------------------------------

TITLE: Defining Month Abbreviations Function in Moment.js
DESCRIPTION: This example demonstrates how to use a callback function to define month abbreviations in Moment.js. The function allows for different abbreviations based on the format string.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    monthsShort : function (momentToFormat, format) {
        if (/^MMMM/.test(format)) {
            return nominative[momentToFormat.month()];
        } else {
            return subjective[momentToFormat.month()];
        }
    }
});

----------------------------------------

TITLE: Using moment-business for weekday operations in JavaScript
DESCRIPTION: This snippet demonstrates how to use the moment-business library to check if a day is a weekday and add business days to a date. It shows the import statement and two key functions: isWeekDay() and addWeekDays().

LANGUAGE: javascript
CODE:
import business from 'moment-business';

// true if the moment is Mon-Fri, false otherwise
business.isWeekDay(someMoment);

// Adds five work days to the Moment
business.addWeekDays(someMoment, 5);

----------------------------------------

TITLE: Handling Daylight Saving Time When Adding Hours in MomentJS
DESCRIPTION: Illustrates how adding hours can result in a different hour due to daylight saving time changes.

LANGUAGE: javascript
CODE:
var m = moment(new Date(2011, 2, 12, 5, 0, 0)); // the day before DST in the US
m.hours(); // 5
m.add(24, 'hours').hours(); // 6 (but you may have to set the timezone first)

----------------------------------------

TITLE: Creating and Using Recurring Date Intervals with moment-recur in JavaScript
DESCRIPTION: Demonstrates how to create length-based and calendar-based intervals using moment-recur, test date matches, generate next and previous dates in a series, and modify interval rules. The example shows usage of methods like recur(), every(), matches(), next(), forget(), and previous().

LANGUAGE: javascript
CODE:
var interval = moment( "01/01/2014" ).recur().every(2).days(); // Length Interval
interval.matches( "01/03/2014" ); // true
interval.next( 2, "L" ); // ["01/03/2014", "01/05/2014"]
interval.forget( "days" ); // Remove a rule
interval.dayOfMonth( 10 ); // Calendar Interval
interval.matches( "05/10/2014" ); // true
interval.previous( 2, "L" ); // ["12/10/2013", "11/10/2013"]

----------------------------------------

TITLE: Installing Grunt CLI for QUnit Development
DESCRIPTION: Instructions for setting up the development environment for QUnit using Node.js and Grunt. This snippet explains how to install the necessary dependencies to run Grunt tasks.

LANGUAGE: shell
CODE:
npm install -g grunt-cli

----------------------------------------

TITLE: Locale-Specific Weekday Ordering
DESCRIPTION: Shows how to get weekdays in locale-specific order using the boolean parameter, specifically demonstrating Arabic locale example

LANGUAGE: javascript
CODE:
moment.locale('ar');
moment.weekdays(true); // lists weekdays Saturday-Friday in Arabic
moment.weekdays(true, 2); //will result in Monday in Arabic

----------------------------------------

TITLE: Setting Weekday Names Array in Moment.js
DESCRIPTION: This snippet shows how to define an array of weekday names for the English locale in Moment.js. It uses the updateLocale method to set the weekdays property.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    weekdays : [
        "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
    ]
});

----------------------------------------

TITLE: Multiple Input Formats for Time Difference Calculation
DESCRIPTION: Shows different ways to pass date parameters to moment().from(), including arrays, Date objects, and strings.

LANGUAGE: javascript
CODE:
var a = moment([2007, 0, 28]);
var b = moment([2007, 0, 29]);
a.from(b);                     // "a day ago"
a.from([2007, 0, 29]);         // "a day ago"
a.from(new Date(2007, 0, 29)); // "a day ago"
a.from("2007-01-29");          // "a day ago"

----------------------------------------

TITLE: Demonstrating Moment.js Object Mutability
DESCRIPTION: Shows how Moment.js objects are mutable by default, where operations like add() modify the original object. This example demonstrates how adding one week to a moment object affects the original reference.

LANGUAGE: javascript
CODE:
var a = moment('2016-01-01'); 
var b = a.add(1, 'week'); 
a.format();
"2016-01-08T00:00:00-06:00"

----------------------------------------

TITLE: Creating Moment Instance with Partial Date Arrays
DESCRIPTION: Demonstrates creating moment instances with partial date information. Omitted values default to their minimum possible values.

LANGUAGE: javascript
CODE:
moment([2010]);        // January 1st
moment([2010, 6]);     // July 1st
moment([2010, 6, 10]); // July 10th

----------------------------------------

TITLE: Setting Calendar Format Strings in MomentJS
DESCRIPTION: Demonstrates how to configure specific calendar formatting strings for different relative dates (yesterday, today, tomorrow, etc). Each key corresponds to a specific temporal relationship to the current date.

LANGUAGE: javascript
CODE:
moment.locale('en', {
    calendar : {
        lastDay : '[Yesterday at] LT',
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        lastWeek : '[last] dddd [at] LT',
        nextWeek : 'dddd [at] LT',
        sameElse : 'L'
    }
});

----------------------------------------

TITLE: Format-Specific Month Abbreviations
DESCRIPTION: Demonstrates how to get month abbreviations with specific formatting considerations, using Dutch locale as an example

LANGUAGE: javascript
CODE:
moment.locale('nl');
moment.monthsShort(); // ['jan.', 'feb.', 'mrt.', ...]
moment.monthsShort('-MMM-'); // [ 'jan', 'feb', 'mrt', ...]

----------------------------------------

TITLE: Configuring Format and Standalone Weekday Names in Moment.js
DESCRIPTION: This snippet shows how to set up both standalone and format-specific weekday names in Moment.js, along with an isFormat regular expression. This feature is available from version 2.11.0 onwards.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    weekdays : {
        standalone: 'Воскресенье_Понедельник_Вторник_Среда_Четверг_Пятница_Суббота'.split('_'),
        format: 'Воскресенье_Понедельник_Вторник_Среду_Четверг_Пятницу_Субботу'.split('_'),
        isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
    }
});

----------------------------------------

TITLE: Basic Duration Locale Formatting in MomentJS
DESCRIPTION: Demonstrates how to format duration strings in different languages using the locale() method. Shows examples of one-minute duration formatted in English, French, and Spanish.

LANGUAGE: javascript
CODE:
moment.duration(1, "minutes").locale("en").humanize(); // a minute
moment.duration(1, "minutes").locale("fr").humanize(); // une minute
moment.duration(1, "minutes").locale("es").humanize(); // un minuto

----------------------------------------

TITLE: Setting Locale Ordinal Function - Current Version
DESCRIPTION: Demonstrates how to set the ordinal function in the English locale using moment.updateLocale() from version 2.12.0 onward. This function converts numbers to their ordinal form (1st, 2nd, 3rd, etc).

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    ordinal : function (number, token) {
        var b = number % 10;
        var output = (~~ (number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

----------------------------------------

TITLE: Configuring Month Names with Format and Standalone Forms in Moment.js
DESCRIPTION: This snippet illustrates how to define month names using an object with 'format' and 'standalone' forms, introduced in version 2.11.0. It also shows how to specify a custom format detection regular expression using the 'isFormat' property, available from version 2.14.0.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    months : {
         format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
         standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
         isFormat: /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?|MMMM?(\[[^\[\]]*\]|\s+)+D[oD]?/  // from 2.14.0
    }
});

----------------------------------------

TITLE: Using moment.tz.load() Function
DESCRIPTION: Demonstration of how to use the moment.tz.load() function to import a timezone data bundle into Moment.js. The function accepts an object containing version information, zone definitions, and timezone aliases.

LANGUAGE: javascript
CODE:
moment.tz.load({
	version : '2014e',
	zones : [...],
	links : [...]
})

----------------------------------------

TITLE: Combined Format and Index Options
DESCRIPTION: Shows how to combine both format and index parameters to get a specific month abbreviation

LANGUAGE: javascript
CODE:
moment.monthsShort('-MMM-', 3); // 'apr'

----------------------------------------

TITLE: Setting Long Date Formats with Automatic Lowercase Generation
DESCRIPTION: Shows how to configure long date formats while letting MomentJS automatically generate lowercase variants. Only uppercase format tokens are specified, and corresponding lowercase versions are created automatically by substituting short token variants.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    longDateFormat : {
        LT: "h:mm A",
        LTS: "h:mm:ss A",
        L: "MM/DD/YYYY",
        LL: "MMMM Do YYYY",
        LLL: "MMMM Do YYYY LT",
        LLLL: "dddd, MMMM Do YYYY LT"
    }
});

----------------------------------------

TITLE: Getting UTC Offset in Moment.js
DESCRIPTION: Retrieves the UTC offset of the current Moment object in minutes. The returned value can be negative or positive, representing the offset from UTC.

LANGUAGE: javascript
CODE:
moment().utcOffset(); // (-240, -120, -60, 0, 60, 120, 240, etc.)

----------------------------------------

TITLE: Retrieving Time Units from Duration Objects in Moment.js
DESCRIPTION: Demonstrates how to use the get() method on Moment.js duration objects to retrieve specific units of time such as hours, minutes, seconds, and milliseconds. This method serves as an alternative to the Duration#x() getters and accepts shorthand keys as arguments.

LANGUAGE: javascript
CODE:
duration.get('hours');
duration.get('minutes');
duration.get('seconds');
duration.get('milliseconds');

----------------------------------------

TITLE: Listing Available Locales in Moment.js
DESCRIPTION: Shows how to list all available locales that have been loaded in Moment.js. This feature is available from version 2.12.0 onwards.

LANGUAGE: javascript
CODE:
moment.locales()

----------------------------------------

TITLE: Basic Moment Comparison
DESCRIPTION: Demonstrates basic usage of isSame() to compare two dates for exact equality.

LANGUAGE: javascript
CODE:
moment('2010-10-20').isSame('2010-10-20'); // true

----------------------------------------

TITLE: Reverting Locale Updates in Moment.js
DESCRIPTION: Demonstrates how to revert locale updates by passing null to updateLocale() method.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', null);

----------------------------------------

TITLE: Configuring isPM Function in MomentJS Locale
DESCRIPTION: Demonstrates how to customize the logic for determining if a time string represents PM (post meridiem). The function checks if the first character of the input string (converted to lowercase) is 'p'.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    isPM : function (input) {
        return ((input + '').toLowerCase()[0] === 'p');
    }
});

----------------------------------------

TITLE: Equivalent Year Start Operation in MomentJS
DESCRIPTION: Shows the equivalent manual operation for setting a moment to the start of a year by explicitly setting each time unit to its starting value.

LANGUAGE: javascript
CODE:
moment().startOf('year');
moment().month(0).date(1).hours(0).minutes(0).seconds(0).milliseconds(0);

----------------------------------------

TITLE: Subtracting Durations in Moment.js
DESCRIPTION: Demonstrates how to subtract one duration from another using Moment.js. The example shows subtracting a 2-day duration from a 3-day duration, resulting in 1 day. The method mutates the original duration object.

LANGUAGE: javascript
CODE:
var a = moment.duration(3, 'd');
var b = moment.duration(2, 'd');
a.subtract(b).days(); // 1

----------------------------------------

TITLE: Converting Duration to Total Minutes in MomentJS
DESCRIPTION: Converts the entire duration to minutes, regardless of the original units. This method returns the total length of the duration expressed in minutes.

LANGUAGE: javascript
CODE:
moment.duration().asMinutes();

----------------------------------------

TITLE: Adding a Single Time Zone in Moment.js
DESCRIPTION: This snippet shows how to add a single time zone (America/Los_Angeles) to Moment Timezone using the moment.tz.add method. It uses a packed zone string that contains the time zone information.

LANGUAGE: javascript
CODE:
moment.tz.add('America/Los_Angeles|PST PDT|80 70|0101|1Lzm0 1zb0 Op0');

----------------------------------------

TITLE: Configuring Month Abbreviations with Standalone and Format Cases in Moment.js
DESCRIPTION: This snippet illustrates how to set month abbreviations using an object with 'standalone' and 'format' cases in Moment.js version 2.11.0 and later. It allows for different abbreviations in different grammatical cases.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    monthsShort : {
        format: 'янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек'.split('_'),
        standalone: 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_')
    }
});

----------------------------------------

TITLE: Configuring MomentJS Locale Calendar Settings
DESCRIPTION: Shows different methods of setting calendar formatting options in MomentJS locales across various versions. Demonstrates the evolution of the API from moment.lang() to moment.updateLocale().

LANGUAGE: javascript
CODE:
// From 2.12.0 onward
moment.updateLocale('en', {
    calendar : Object
});
// From 2.8.1 to 2.11.2
moment.locale('en', {
    calendar : Object
});

// Deprecated in 2.8.1
moment.lang('en', {
    calendar : Object
});

----------------------------------------

TITLE: Locale Change Effects on Existing Instances
DESCRIPTION: Demonstrates how changing global locale doesn't affect existing moment instances as of version 2.8.0.

LANGUAGE: javascript
CODE:
moment.locale('fr');
var m = moment(1316116057189);
m.fromNow(); // il y a une heure

moment.locale('en');
m.fromNow(); // il y a une heure
moment(1316116057189).fromNow(); // an hour ago

----------------------------------------

TITLE: Deprecated Locale Configuration - Pre 2.8.1
DESCRIPTION: Demonstrates the deprecated method of setting the ordinal function using moment.lang() for MomentJS versions before 2.8.1.

LANGUAGE: javascript
CODE:
moment.lang('en', {
    ordinal : Function
});

----------------------------------------

TITLE: Converting Fixed Offset to UTC in Moment.js
DESCRIPTION: Shows how to use the UTC method to convert a moment object from a fixed offset timezone to UTC. This is useful when working with specific timezone offsets and needing to standardize to UTC.

LANGUAGE: javascript
CODE:
moment.parseZone('2016-05-03T22:15:01+02:00').utc().format(); //"2016-05-03T20:15:01Z"

----------------------------------------

TITLE: Deprecated Add/Subtract Methods in Moment.js
DESCRIPTION: Shows the deprecated syntax for add() and subtract() methods in Moment.js. These methods with (period, number) parameter order are no longer recommended.

LANGUAGE: javascript
CODE:
moment().add(period, number) is deprecated. Please use moment().add(number, period)
moment().subtract(period, number) is deprecated. Please use moment().subtract(number, period)

----------------------------------------

TITLE: Setting Meridiem Function in MomentJS Locale (2.8.1-2.11.2)
DESCRIPTION: Demonstrates the method for setting a custom meridiem function in MomentJS for versions 2.8.1 to 2.11.2.

LANGUAGE: javascript
CODE:
moment.locale('en', {
    meridiem : Function
});

----------------------------------------

TITLE: Legacy Locale Configuration - Version 2.8.1 to 2.11.2
DESCRIPTION: Shows the syntax for setting the ordinal function using moment.locale() for MomentJS versions 2.8.1 to 2.11.2.

LANGUAGE: javascript
CODE:
moment.locale('en', {
    ordinal : Function
});

----------------------------------------

TITLE: Creating Invalid Durations in Moment.js
DESCRIPTION: Shows how to create invalid duration objects, which can be useful for error handling and edge cases in applications.

LANGUAGE: javascript
CODE:
moment.duration(NaN);
moment.duration(NaN, 'days');
moment.duration.invalid();

----------------------------------------

TITLE: Validating Date Objects with Moment.js in JavaScript
DESCRIPTION: The moment.isDate() function is used to determine if a given object is a native JavaScript Date object. It returns true for Date objects and false for other types, including Moment.js objects.

LANGUAGE: javascript
CODE:
moment.isDate(); // false
moment.isDate(new Date()); // true
moment.isDate(moment()); // false

----------------------------------------

TITLE: Invalid Date String Validation in MomentJS
DESCRIPTION: Demonstrates how to check if a date string is valid using moment's isValid() method. Returns false for unparseable date strings.

LANGUAGE: javascript
CODE:
moment("not a real date").isValid(); // false

----------------------------------------

TITLE: Calendar Quarters with Moment.js fquarter Method
DESCRIPTION: Illustrates how to use the fquarter method to get calendar quarters by setting January (month 1) as the starting month for the first quarter.

LANGUAGE: javascript
CODE:
moment("2013-01-01").fquarter(1);
// Q1 2013

----------------------------------------

TITLE: Setting Meridiem Function in MomentJS Locale (Deprecated)
DESCRIPTION: Shows the deprecated method (pre-2.8.1) for setting a custom meridiem function in MomentJS.

LANGUAGE: javascript
CODE:
moment.lang('en', {
    meridiem : Function
});

----------------------------------------

TITLE: Implementing No Rounding for Relative Time in MomentJS
DESCRIPTION: Shows how to implement a custom rounding function that retains the exact decimal values in relative time calculations, resulting in precise but potentially less readable time differences.

LANGUAGE: javascript
CODE:
var retainValue = function (value) {
    return value;
};
moment.relativeTimeRounding(retainValue);

var a = moment();
a.subtract({hours: 39});
a.toNow(); // == 'in 1.625 days', 'Round down towards the nearest year'

----------------------------------------

TITLE: Subtracting Days in Moment.js (JavaScript)
DESCRIPTION: Demonstrates how to subtract 7 days from the current moment using Moment.js. This mutates the original moment object.

LANGUAGE: javascript
CODE:
moment().subtract(7, 'days');

----------------------------------------

TITLE: Getting Minutes Component from MomentJS Duration
DESCRIPTION: Retrieves the minutes component (0-59) from a MomentJS duration object. This method returns only the minutes part, not the total duration in minutes.

LANGUAGE: javascript
CODE:
moment.duration().minutes();

----------------------------------------

TITLE: Deprecated and Current Syntax for Subtracting Seconds in Moment.js (JavaScript)
DESCRIPTION: Shows the deprecated syntax (pre-2.8.0) and the current syntax for subtracting 1 second from the current moment using Moment.js.

LANGUAGE: javascript
CODE:
moment().subtract('seconds', 1); // Deprecated in 2.8.0
moment().subtract(1, 'seconds');

----------------------------------------

TITLE: Loading Moment.js with System.js Basic Configuration
DESCRIPTION: Basic setup for loading Moment.js using System.js module loader with baseURL configuration to specify the path for moment.js.

LANGUAGE: javascript
CODE:
<script src="system.js"></script>
<script>
  System.config({
    baseURL: '/app'
  });

  System.import('moment.js');
 </script>

----------------------------------------

TITLE: Using Callback Functions for Calendar Formats
DESCRIPTION: Shows how to use a callback function instead of a static string for calendar formatting. The callback receives the current moment as an argument and can return dynamic formatting strings.

LANGUAGE: javascript
CODE:
function callback (now) {
    return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
}

----------------------------------------

TITLE: Configuring Week Settings Using moment.locale (Legacy)
DESCRIPTION: Shows the legacy method (v2.8.1 to v2.11.2) for configuring week settings using moment.locale(). Uses same parameters as updateLocale but with older method name.

LANGUAGE: javascript
CODE:
moment.locale('en', {
    week : {
        dow : Int,
        doy : Int
    }
});

----------------------------------------

TITLE: Generating Authors List for QUnit
DESCRIPTION: Grunt task to generate the list of authors, which should be added to AUTHORS.txt as part of the release process.

LANGUAGE: shell
CODE:
grunt authors

----------------------------------------

TITLE: Converting OLE Automation Date to MomentJS Date in JavaScript
DESCRIPTION: This snippet shows how to convert an OLE Automation date (represented as a number) to a MomentJS date object. The example uses the value 41493, which corresponds to August 7, 2013.

LANGUAGE: javascript
CODE:
moment.fromOADate(41493); // Wed Aug 07 2013 00:00:00 GMT-0600 (MDT)

----------------------------------------

TITLE: Setting Moment to End of Time Unit using endOf()
DESCRIPTION: Demonstrates how to use the endOf() method to set a moment to the end of a specified time unit. The example shows setting to the end of the year, which results in December 31st at 23:59:59.999 of the current year.

LANGUAGE: javascript
CODE:
moment().endOf("year"); // set the moment to 12-31 23:59:59.999 this year

----------------------------------------

TITLE: Configuring Minimal Weekday Abbreviations in Moment.js
DESCRIPTION: This snippet shows how to update the 'en' locale in Moment.js with custom minimal weekday abbreviations. It uses an array of two-letter abbreviations for each day of the week, which is useful for compact displays like calendar pickers.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    weekdaysMin : ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
});

----------------------------------------

TITLE: Customizing Calendar Format Function in MomentJS
DESCRIPTION: Implements a custom calendar format function that returns specific tokens based on the time difference between two dates. The function handles various time ranges including same day, next day, last week, this month, and next month scenarios. It calculates the difference in days and returns appropriate calendar tokens.

LANGUAGE: javascript
CODE:
moment.calendarFormat = function (myMoment, now) {
	var diff = myMoment.diff(now, 'days', true);
	var nextMonth = now.clone().add(1, 'month');

	var retVal =  diff < -6 ? 'sameElse' :
		diff < -1 ? 'lastWeek' :
		diff < 0 ? 'lastDay' :
		diff < 1 ? 'sameDay' :
		diff < 2 ? 'nextDay' :
		diff < 7 ? 'nextWeek' :
		// introduce thisMonth and nextMonth
		(myMoment.month() === now.month() && myMoment.year() === now.year()) ? 'thisMonth' :
		(nextMonth.month() === myMoment.month() && nextMonth.year() === myMoment.year()) ? 'nextMonth' : 'sameElse';
	return retVal;
};

----------------------------------------

TITLE: Updating Locale Era Settings in MomentJS
DESCRIPTION: Demonstrates how to configure era definitions for the English locale in MomentJS. Includes setting up both AD (Anno Domini) and BC (Before Christ) eras with their respective date ranges, offsets, and naming conventions.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    eras: [{
        since:  '0001-01-01',
        until:  +Infinity,
        offset: 1,
        name:   'Anno Domini',
        narrow: 'AD',
        abbr:   'AD'
    }, {
        until:   -Infinity,
        since:  '0000-12-31',
        offset: 1,
        name:   'Before Christ',
        narrow: 'BC',
        abbr:   'BC'
    }],
});

----------------------------------------

TITLE: Setting UTC Offset with String in Moment.js
DESCRIPTION: Shows how to set the UTC offset using a string representation. The function accepts various string formats for offset specification.

LANGUAGE: javascript
CODE:
// these are equivalent
moment().utcOffset("+08:00");
moment().utcOffset(8);
moment().utcOffset(480);

----------------------------------------

TITLE: Glued Hour and Minutes Parsing
DESCRIPTION: Parsing time strings where hours and minutes are combined without delimiter.

LANGUAGE: javascript
CODE:
moment("123", "hmm").format("HH:mm") === "01:23"
moment("1234", "hmm").format("HH:mm") === "12:34"

----------------------------------------

TITLE: Calculating Day Difference in JavaScript using Moment.js
DESCRIPTION: Shows how to use moment().diff() with a specified unit of measurement (days) to calculate the difference between two dates.

LANGUAGE: javascript
CODE:
var a = moment([2007, 0, 29]);
var b = moment([2007, 0, 28]);
a.diff(b, 'days') // 1

----------------------------------------

TITLE: Accessing Hours Component from Moment.js Duration
DESCRIPTION: Retrieves the hours component (0-23) from a Moment.js duration object. This method returns only the hour part of the duration, not the total duration in hours.

LANGUAGE: javascript
CODE:
moment.duration().hours();

----------------------------------------

TITLE: Configuring Week Settings Using moment.updateLocale (Current)
DESCRIPTION: Shows the current method (from v2.12.0) for setting the first day of week (dow) and first week of year (doy) using moment.updateLocale(). Includes parameters for locale name and week configuration object.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    week : {
        dow : Int,
        doy : Int
     }
});

----------------------------------------

TITLE: Adding Duration Objects in MomentJS
DESCRIPTION: Demonstrates how to add two duration objects together using the add() method. The example creates two durations of 1 day and 2 days respectively, then adds them to get a total of 3 days.

LANGUAGE: javascript
CODE:
var a = moment.duration(1, 'd');
var b = moment.duration(2, 'd');
a.add(b).days(); // 3

----------------------------------------

TITLE: String Representation of Date Range
DESCRIPTION: Demonstrates how to get a human-readable string representation of the precise difference between two dates using the preciseDiff method.

LANGUAGE: javascript
CODE:
moment("2014-01-01 12:00:00").preciseDiff("2015-03-04 16:05:06");
 // 1 year 2 months 3 days 4 hours 5 minutes 6 seconds

----------------------------------------

TITLE: Version-Specific Locale Configuration in MomentJS
DESCRIPTION: Shows the evolution of locale configuration methods across different MomentJS versions, from the deprecated moment.lang() to the current moment.updateLocale().

LANGUAGE: javascript
CODE:
// From 2.12.0 onward
moment.updateLocale('en', {
    meridiemParse : RegExp
    isPM : Function
});

// From 2.8.1 to 2.11.2
moment.locale('en', {
    meridiemParse : RegExp
    isPM : Function
});

// Deprecated in 2.8.1
moment.lang('en', {
    meridiemParse : RegExp
    isPM : Function
});

----------------------------------------

TITLE: Regional Week Configuration Examples
DESCRIPTION: Demonstrates practical examples of week configurations for different regions including ISO-8601/Europe, US/Canada, Arab countries, and a common alternative. Each example shows specific dow and doy values with explanatory comments.

LANGUAGE: javascript
CODE:
// ISO-8601, Europe
moment.updateLocale("en", { week: {
  dow: 1, // First day of week is Monday
  doy: 4  // First week of year must contain 4 January (7 + 1 - 4)
}});

// US, Canada
moment.updateLocale("en", { week: {
  dow: 0, // First day of week is Sunday
  doy: 6  // First week of year must contain 1 January (7 + 0 - 1)
}});

// Many Arab countries
moment.updateLocale("en", { week: {
  dow: 6, // First day of week is Saturday
  doy: 12 // First week of year must contain 1 January (7 + 6 - 1)
}});

// Also common
moment.updateLocale("en", { week: {
  dow: 1, // First day of week is Monday
  doy: 7  // First week of year must contain 1 January (7 + 1 - 1)
}});

----------------------------------------

TITLE: Creating Duration from Moment Difference
DESCRIPTION: Shows how to calculate the duration between two moment instances by combining moment.duration() with diff(). This creates a duration object that represents the time difference between the two moments, which can then be used for various duration-related operations.

LANGUAGE: javascript
CODE:
  var x = new moment()
  var y = new moment()
  var duration = moment.duration(x.diff(y))
  // returns duration object with the duration between x and y

----------------------------------------

TITLE: Getting and Setting Seconds in Moment.js
DESCRIPTION: Methods for getting and setting the seconds component of a moment object. Accepts values from 0-59 and automatically handles overflow into minutes. Both second() and seconds() are aliases of the same functionality.

LANGUAGE: javascript
CODE:
moment().second(Number);
moment().second(); // Number
moment().seconds(Number);
moment().seconds(); // Number

----------------------------------------

TITLE: Direct Format Object Usage in MomentJS Calendar (v2.25.0+)
DESCRIPTION: Demonstrates the simplified calendar format configuration introduced in version 2.25.0, allowing direct passing of format objects with both string and function values.

LANGUAGE: javascript
CODE:
moment().calendar({
    sameDay: '[Today]',
    nextDay: '[Tomorrow]',
    nextWeek: 'dddd',
    lastDay: '[Yesterday]',
    lastWeek: '[Last] dddd',
    sameElse: 'DD/MM/YYYY'
});

moment().calendar({
  sameDay: function (now) {
    if (this.isBefore(now)) {
      return '[Will Happen Today]';
    } else {
      return '[Happened Today]';
    }
    /* ... */
  }
});

----------------------------------------

TITLE: Parsing ISO 8601 Durations in Moment.js
DESCRIPTION: Creates duration objects by parsing ISO 8601 duration formats. This provides a standardized way to represent durations.

LANGUAGE: javascript
CODE:
moment.duration('P1Y2M3DT4H5M6S');
moment.duration('P1M');

----------------------------------------

TITLE: Using Unit Aliases with MomentJS get() Method
DESCRIPTION: Demonstrates how different unit aliases can be used interchangeably with the MomentJS get() method. This shows the flexibility of unit representation in MomentJS.

LANGUAGE: javascript
CODE:
var m = moment();
m.get('y');
m.get('year');
m.get('years');

----------------------------------------

TITLE: Getting Total Milliseconds of Moment.js Durations
DESCRIPTION: Shows how to use moment.duration().asMilliseconds() to get the total length of a duration in milliseconds. This method returns the entire duration converted to milliseconds.

LANGUAGE: javascript
CODE:
moment.duration(500).asMilliseconds(); // 500
moment.duration(1500).asMilliseconds(); // 1500
moment.duration(15000).asMilliseconds(); // 15000

----------------------------------------

TITLE: Strict Parsing with Time Zones in Moment.js
DESCRIPTION: Demonstrates how to use strict parsing with moment.tz, which requires the format and input to match exactly, including delimiters.

LANGUAGE: javascript
CODE:
moment.tz('It is 2012-05-25', 'YYYY-MM-DD', "America/Toronto").isValid();       // true 
moment.tz('It is 2012-05-25', 'YYYY-MM-DD', true, "America/Toronto").isValid(); // false
moment.tz('2012-05-25', 'YYYY-MM-DD', true, "America/Toronto").isValid();       // true
moment.tz('2012-05.25', 'YYYY-MM-DD', true, "America/Toronto").isValid();       // false

----------------------------------------

TITLE: Retrieving Milliseconds from Moment.js Durations
DESCRIPTION: Demonstrates how to use moment.duration().milliseconds() to get the number of milliseconds in a duration. This method returns a number between 0 and 999, representing the millisecond component of the duration.

LANGUAGE: javascript
CODE:
moment.duration(500).milliseconds(); // 500
moment.duration(1500).milliseconds(); // 500
moment.duration(15000).milliseconds(); // 0

----------------------------------------

TITLE: Installing moment-range via NPM
DESCRIPTION: NPM installation command for the moment-range plugin which adds date range functionality to MomentJS

LANGUAGE: bash
CODE:
npm install moment-range

----------------------------------------

TITLE: Setting Long Date Formats with Explicit Lowercase Variants
DESCRIPTION: Demonstrates how to configure long date formats in MomentJS using updateLocale method. Includes both uppercase and lowercase format variants for different date-time patterns. Uses format tokens like LT for time, L for date, and combined formats.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    longDateFormat : {
        LT: "h:mm A",
        LTS: "h:mm:ss A",
        L: "MM/DD/YYYY",
        l: "M/D/YYYY",
        LL: "MMMM Do YYYY",
        ll: "MMM D YYYY",
        LLL: "MMMM Do YYYY LT",
        lll: "MMM D YYYY LT",
        LLLL: "dddd, MMMM Do YYYY LT",
        llll: "ddd, MMM D YYYY LT"
    }
});

----------------------------------------

TITLE: Creating Timezone Links with MomentJS
DESCRIPTION: Demonstrates how to use moment.tz.createLinks() to identify and link timezone zones that share identical data. The function takes an unpacked bundle containing zones and links, and returns an optimized bundle where duplicate zones are replaced with links to a single source zone.

LANGUAGE: javascript
CODE:
var unlinked = {
    zones : [
        {name:"Zone/One",abbrs:["OST","ODT"],offsets:[60,120],untils:[403041600000,417034800000]},
        {name:"Zone/Two",abbrs:["OST","ODT"],offsets:[60,120],untils:[403041600000,417034800000]}
    ],
    links : [],
    version : "2014x-doc-example"
};

moment.tz.createLinks(unlinked);

{
    zones : [
        {name:"Zone/One",abbrs:["OST","ODT"],offsets:[60,120],untils:[403041600000,417034800000]}
    ],
    links : ["Zone/One|Zone/Two"],
    version : "2014x-doc-example"
}

----------------------------------------

TITLE: Getting Seconds Component with moment.duration().seconds()
DESCRIPTION: Retrieves the seconds component of a duration, returning a value between 0 and 59. This method returns only the seconds part of the duration, ignoring any larger units.

LANGUAGE: javascript
CODE:
moment.duration(500).seconds(); // 0
moment.duration(1500).seconds(); // 1
moment.duration(15000).seconds(); // 15

----------------------------------------

TITLE: Installing Twix via NPM
DESCRIPTION: Shows the NPM command to install the Twix plugin as a dependency in your project.

LANGUAGE: bash
CODE:
npm install twix

----------------------------------------

TITLE: Retrieving Time Zone Names with Moment.js
DESCRIPTION: Returns an array of strings containing all available IANA time zone names supported by Moment.js Timezone. The function requires the moment-timezone package to be installed and properly initialized.

LANGUAGE: javascript
CODE:
moment.tz.names(); // ["Africa/Abidjan", "Africa/Accra", "Africa/Addis_Ababa", ...]

----------------------------------------

TITLE: Filtering Timezone Data for Specific Year Range in JavaScript using Moment.js
DESCRIPTION: This snippet demonstrates how to use moment.tz.filterYears to reduce the size of timezone data by filtering years between 2012 and 2016. It shows the reduction in the number of data points (untils) after filtering.

LANGUAGE: javascript
CODE:
var all    = { name : "America/Los_Angeles", abbrs : [...], offsets : [...] untils : []};
var subset = moment.tz.filterYears(all, 2012, 2016);
all.untils.length;    // 186
subset.untils.length; // 11

----------------------------------------

TITLE: Retrieving Weeks from Moment.js Durations
DESCRIPTION: These methods allow you to get the number of weeks in a Moment.js duration. weeks() returns the number of weeks (0-4) while asWeeks() returns the total duration in weeks. Note that weeks are counted as a subset of days and don't reduce the day count.

LANGUAGE: javascript
CODE:
moment.duration().weeks();

LANGUAGE: javascript
CODE:
moment.duration().asWeeks();

----------------------------------------

TITLE: Long Format Twitter Timestamp with Hours
DESCRIPTION: Demonstrates how to format a timestamp in Twitter's long format style showing multiple hours ago.

LANGUAGE: javascript
CODE:
moment().subtract(5, 'hours').twitterLong();
// 5 hours

----------------------------------------

TITLE: Creating Duration with Specific Units in Moment.js
DESCRIPTION: Creates duration objects with specific units such as seconds, minutes, hours, days, weeks, months, and years. Demonstrates the flexibility of the duration creation method.

LANGUAGE: javascript
CODE:
moment.duration(2, 'seconds');
moment.duration(2, 'minutes');
moment.duration(2, 'hours');
moment.duration(2, 'days');
moment.duration(2, 'weeks');
moment.duration(2, 'months');
moment.duration(2, 'years');
moment.duration('2', 'years'); // from 2.25.0

----------------------------------------

TITLE: Creating Single Timezone Link in MomentJS
DESCRIPTION: Links a single timezone alias using moment.tz.link(). This example links 'US/Pacific' as an alias to 'America/Los_Angeles' timezone.

LANGUAGE: javascript
CODE:
moment.tz.link('America/Los_Angeles|US/Pacific');

----------------------------------------

TITLE: Converting Moment Duration to JSON
DESCRIPTION: Demonstrates how to serialize a Moment.js duration object to JSON format, which automatically converts the duration to an ISO8601 string representation. The example shows serializing a 5-minute duration object within a JavaScript object.

LANGUAGE: javascript
CODE:
JSON.stringify({
    postDuration : moment.duration(5, 'm')
}); // '{"postDuration":"PT5M"}'

----------------------------------------

TITLE: Short Format Twitter Timestamp
DESCRIPTION: Demonstrates the short format timestamp style using twitterShort() method for displaying days.

LANGUAGE: javascript
CODE:
moment().subtract(6, 'days').twitterShort();
// 6d

----------------------------------------

TITLE: Getting Years from Duration - MomentJS JavaScript
DESCRIPTION: Demonstrates two methods for retrieving years from a MomentJS duration. The years() method returns the number of complete years in the duration, while asYears() returns the total duration expressed in decimal years.

LANGUAGE: javascript
CODE:
moment.duration().years();

LANGUAGE: javascript
CODE:
moment.duration().asYears();

----------------------------------------

TITLE: Retrieving Timezone Abbreviations with Moment.js
DESCRIPTION: Demonstrates how to get the abbreviation for a given timestamp (in milliseconds) from a Zone object in Moment.js. The method returns different abbreviations based on whether daylight saving time is in effect for the given timestamp.

LANGUAGE: javascript
CODE:
moment.tz.zone('America/Los_Angeles').abbr(1403465838805); // PDT
moment.tz.zone('America/Los_Angeles').abbr(1388563200000); // PST

----------------------------------------

TITLE: Converting Duration to ISO 8601 String in Moment.js
DESCRIPTION: Demonstrates how to convert a Moment.js duration object to an ISO 8601 standard duration string. The output follows the format PnYnMnDTnHnMnS, where P stands for period, T separates date and time units, and other letters represent different time units (Y=year, M=month, D=day, H=hour, M=minute, S=second).

LANGUAGE: javascript
CODE:
moment.duration(1, 'd').toISOString() // "P1D"

----------------------------------------

TITLE: Formatting Duration with Moment.js Plugin
DESCRIPTION: Demonstrates how to format a duration of 123 minutes into hours and minutes using the moment-duration-format plugin. The plugin must be installed via npm before use.

LANGUAGE: javascript
CODE:
moment.duration(123, "minutes").format("h:mm");
// "2:03"

----------------------------------------

TITLE: Getting Specific Weekday
DESCRIPTION: Demonstrates how to get a specific weekday name by passing an index to moment.weekdays()

LANGUAGE: javascript
CODE:
moment.weekdays(3); // 'Wednesday'

----------------------------------------

TITLE: Converting Duration to Total Seconds with moment.duration().asSeconds()
DESCRIPTION: Converts the entire duration to a decimal number representing the total number of seconds. This method provides the full duration expressed in seconds, including fractional values.

LANGUAGE: javascript
CODE:
moment.duration(500).asSeconds(); // 0.5
moment.duration(1500).asSeconds(); // 1.5
moment.duration(15000).asSeconds(); // 15

----------------------------------------

TITLE: Converting MomentJS Date to OLE Automation Date in JavaScript
DESCRIPTION: This snippet demonstrates how to convert a MomentJS date object to an OLE Automation date, which is represented as a floating point number.

LANGUAGE: javascript
CODE:
moment().toOADate(); // a floating point number

----------------------------------------

TITLE: Using Moment Timezone with ECMAScript Modules or TypeScript
DESCRIPTION: This snippet shows how to import and use moment-timezone using ECMAScript native module format or in TypeScript.

LANGUAGE: javascript
CODE:
import moment from 'moment-timezone';
moment().tz("America/Los_Angeles").format();

----------------------------------------

TITLE: Custom Chinese Meridiem Implementation in MomentJS
DESCRIPTION: Example implementation of a custom meridiem function for Chinese locale that returns different time-of-day terms based on hour and minute values.

LANGUAGE: javascript
CODE:
moment.updateLocale('zh-cn', {
    meridiem : function (hour, minute, isLowercase) {
        if (hour < 9) {
            return "早上";
        } else if (hour < 11 && minute < 30) {
            return "上午";
        } else if (hour < 13 && minute < 30) {
            return "中午";
        } else if (hour < 18) {
            return "下午";
        } else {
            return "晚上";
        }
    }
});

----------------------------------------

TITLE: Adding Multiple Time Zones in Moment.js
DESCRIPTION: This snippet demonstrates how to add multiple time zones (America/Los_Angeles and America/New_York) to Moment Timezone using the moment.tz.add method. It passes an array of packed zone strings containing the time zone information.

LANGUAGE: javascript
CODE:
moment.tz.add([
	'America/Los_Angeles|PST PDT|80 70|0101|1Lzm0 1zb0 Op0',
	'America/New_York|EST EDT|50 40|0101|1Lz50 1zb0 Op0'
]);

----------------------------------------

TITLE: Installing moment-islamic-civil Plugin via npm
DESCRIPTION: This command installs the moment-islamic-civil plugin using npm, which adds Islamic Civil Calendar (Hijri) support to Moment.js based on civil calculations.

LANGUAGE: shell
CODE:
npm install moment-islamic-civil

----------------------------------------

TITLE: Loading Moment.js Timezone Scripts in HTML
DESCRIPTION: HTML script tags required to include Moment.js and its timezone data file in a web page. Both the core library and timezone data must be loaded for timezone functionality to work.

LANGUAGE: html
CODE:
<script src="moment.js"></script>
<script src="moment-timezone-with-data.js"></script>

----------------------------------------

TITLE: Serializing Moment Object to JSON with UTC
DESCRIPTION: Demonstrates the default JSON serialization of a Moment object which converts to an ISO8601 string adjusted to UTC.

LANGUAGE: javascript
CODE:
JSON.stringify({
    postDate : moment()
}); // '{"postDate":"2013-02-04T22:44:30.652Z"}'

----------------------------------------

TITLE: Localized Duration Suffixes in MomentJS
DESCRIPTION: Shows how to format durations with relative time suffixes in different languages. Includes examples of both future and past duration formatting with appropriate localized prefixes and suffixes.

LANGUAGE: javascript
CODE:
moment.duration(1, "minutes").locale("en").humanize(true); // in a minute
moment.duration(1, "minutes").locale("fr").humanize(true); // dans une minute
moment.duration(1, "minutes").locale("es").humanize(true); // en un minuto

moment.duration(-1, "minutes").locale("en").humanize(true); // a minute ago
moment.duration(-1, "minutes").locale("fr").humanize(true); // il y a une minute
moment.duration(-1, "minutes").locale("es").humanize(true); // hace un minuto

----------------------------------------

TITLE: Long Format Twitter Timestamp with Single Hour
DESCRIPTION: Shows smart pluralization in Twitter's long format style for a single hour ago.

LANGUAGE: javascript
CODE:
moment().subtract(1, 'hour').twitterLong();
// 1 hour

----------------------------------------

TITLE: Converting Between Time Zones with moment().tz()
DESCRIPTION: Shows how to convert moments between different time zones while maintaining the same UTC time. Demonstrates conversion from UTC to specific time zones.

LANGUAGE: javascript
CODE:
var a = moment.utc("2013-11-18 11:55").tz("Asia/Taipei");
var b = moment.utc("2013-11-18 11:55").tz("America/Toronto");

a.format(); // 2013-11-18T19:55:00+08:00
b.format(); // 2013-11-18T06:55:00-05:00

a.utc().format(); // 2013-11-18T11:55Z
b.utc().format(); // 2013-11-18T11:55Z

----------------------------------------

TITLE: Zone with Offset Output Format
DESCRIPTION: Example of the returned array format when including offset information, showing timezone names and their UTC offsets in minutes.

LANGUAGE: javascript
CODE:
[
   { name: "Asia/Shanghai", offset: -480 },
   { name: "Asia/Urumqi", offset: -360 }
]

----------------------------------------

TITLE: Accessing Time Zone Name in Moment.js
DESCRIPTION: This snippet demonstrates how to access the name of a time zone using Moment.js. The 'name' property returns the unique identifier for the time zone, such as 'America/Los_Angeles'.

LANGUAGE: javascript
CODE:
zone.name; // America/Los_Angeles

----------------------------------------

TITLE: Basic Usage of fquarter Method in Moment.js
DESCRIPTION: Demonstrates the simplest usage of the fquarter method on a moment object. It returns a formatted string representing the fiscal quarter, with April as the default starting month for the first quarter.

LANGUAGE: javascript
CODE:
moment("2013-01-01").fquarter();
// Q4 2012/13

----------------------------------------

TITLE: Parsing Strings with Offsets in Moment.js
DESCRIPTION: Demonstrates how moment.tz handles input strings containing offsets, converting the parsed moment to the target zone.

LANGUAGE: javascript
CODE:
var zone = "America/Los_Angeles";
moment.tz('2013-06-01T00:00:00',       zone).format(); // 2013-06-01T00:00:00-07:00
moment.tz('2013-06-01T00:00:00-04:00', zone).format(); // 2013-05-31T21:00:00-07:00
moment.tz('2013-06-01T00:00:00+00:00', zone).format(); // 2013-05-31T17:00:00-07:00

----------------------------------------

TITLE: Defining Locale with Unknown Parent in Moment.js
DESCRIPTION: Demonstrates defining a locale with a parent that hasn't been defined or loaded (feature added in v2.16.0).

LANGUAGE: javascript
CODE:
moment.defineLocale('fakeLocale', {parentLocale:'xyz'})

----------------------------------------

TITLE: Adding Moment.js Package to Meteor Project
DESCRIPTION: This command adds the Moment.js package to a Meteor project using the Atmosphere package manager. It allows developers to easily integrate Moment.js functionality into their Meteor applications for date and time manipulation.

LANGUAGE: shell
CODE:
meteor add momentjs:moment

----------------------------------------

TITLE: Advanced Date Transformation with Custom Patterns in MomentJS
DESCRIPTION: Shows advanced usage of transform function with custom pattern formats and strict mode parameter. The strict mode enforces exact pattern matching including non-alphabetic characters.

LANGUAGE: javascript
CODE:
moment().transform('+01MMYYYY', 'DD/MM/YYYY', false); // Tomorrow, same time
moment().transform('+01MMYYYY', 'DD/MM/YYYY', true); // Invalid date

----------------------------------------

TITLE: Parsing Ambiguous Times with Explicit Offsets in Moment.js Timezone
DESCRIPTION: Demonstrates how to parse ambiguous times during the fall DST transition by explicitly specifying the offset. This allows creation of moments for both instances of the duplicated hour.

LANGUAGE: javascript
CODE:
moment.tz("2012-11-04 01:00:00-04:00", "America/New_York"); // 2012-11-04T01:00:00-04:00
moment.tz("2012-11-04 01:00:00-05:00", "America/New_York"); // 2012-11-04T01:00:00-05:00

----------------------------------------

TITLE: Parsing ASP.NET JSON Date Format with Moment.js in JavaScript
DESCRIPTION: This snippet demonstrates how to use Moment.js to parse an ASP.NET JSON date string in the format '/Date(timestamp-offset)/'. It converts the string into a properly formatted date and time object.

LANGUAGE: javascript
CODE:
moment("/Date(1198908717056-0700)/"); // 2007-12-28T23:11:57.056-07:00

----------------------------------------

TITLE: Installing Moment.js via npm
DESCRIPTION: Command to install Moment.js using npm package manager.

LANGUAGE: shell
CODE:
npm install moment

----------------------------------------

TITLE: Using moment-taiwan Plugin for Taiwan Calendar Dates
DESCRIPTION: Demonstrates how to parse and format Taiwan calendar dates using the moment-taiwan plugin. Shows conversion between Taiwan calendar years and Gregorian calendar years, with the ability to get the Taiwan year using twYear() method.

LANGUAGE: javascript
CODE:
m = moment('104/01/01', 'tYY/MM/DD') // Parse a Taiwan date
m.format('tYY/MM/DD [is] YYYY/M/D') // 104/01/01 is 2015/01/01

m.twYear() // 104

----------------------------------------

TITLE: Formatting Time Zone Offsets and Abbreviations in Moment.js Timezone
DESCRIPTION: Shows how to format both time zone offsets and abbreviations using the 'Z z' tokens. It illustrates the difference between locations that observe daylight saving time and those that don't.

LANGUAGE: javascript
CODE:
// Denver observes DST
moment.tz([2012, 0], 'America/Denver').format('Z z');  // -07:00 MST
moment.tz([2012, 5], 'America/Denver').format('Z z');  // -06:00 MDT
// Phoenix does not observe DST
moment.tz([2012, 0], 'America/Phoenix').format('Z z'); // -07:00 MST
moment.tz([2012, 5], 'America/Phoenix').format('Z z'); // -07:00 MST

----------------------------------------

TITLE: Loading Timezone Data Bundle Structure in Moment.js
DESCRIPTION: Example structure of a timezone data bundle containing zone definitions and timezone aliases. The bundle includes timezone rules for Los Angeles and New York, along with their corresponding US timezone aliases.

LANGUAGE: javascript
CODE:
{
	version : '2014e',
	zones : [
		'America/Los_Angeles|PST PDT|80 70|0101|1Lzm0 1zb0 Op0',
		'America/New_York|EST EDT|50 40|0101|1Lz50 1zb0 Op0'
	],
	links : [
		'America/Los_Angeles|US/Pacific',
		'America/New_York|US/Eastern'
	]
}

----------------------------------------

TITLE: Formatting Time Zone Abbreviations in Moment.js Timezone
DESCRIPTION: Demonstrates how to format time zone abbreviations using the 'z' token in Moment.js Timezone. It shows examples for different locations and seasons, highlighting the change between standard time and daylight saving time.

LANGUAGE: javascript
CODE:
moment.tz([2012, 0], 'America/New_York').format('z');    // EST
moment.tz([2012, 5], 'America/New_York').format('z');    // EDT
moment.tz([2012, 0], 'America/Los_Angeles').format('z'); // PST
moment.tz([2012, 5], 'America/Los_Angeles').format('z'); // PDT

----------------------------------------

TITLE: Creating Timer with Moment.js Duration
DESCRIPTION: Demonstrates how to create a repeating 5-second timer using the moment-timer plugin. The timer leverages moment.duration and includes a loop option for continuous execution.

LANGUAGE: javascript
CODE:
var timer = moment.duration(5, "seconds").timer({loop: true}, function() {
  // Callback
});

----------------------------------------

TITLE: Customizing Long-Form Time Zone Names in Moment.js Timezone
DESCRIPTION: Shows how to override the zoneName function to provide custom long-form time zone names. This allows the use of the 'zz' formatting token to display full time zone names.

LANGUAGE: javascript
CODE:
var abbrs = {
    EST : 'Eastern Standard Time',
    EDT : 'Eastern Daylight Time',
    CST : 'Central Standard Time',
    CDT : 'Central Daylight Time',
    MST : 'Mountain Standard Time',
    MDT : 'Mountain Daylight Time',
    PST : 'Pacific Standard Time',
    PDT : 'Pacific Daylight Time',
};

moment.fn.zoneName = function () {
    var abbr = this.zoneAbbr();
    return abbrs[abbr] || abbr;
};

moment.tz([2012, 0], 'America/New_York').format('zz');    // Eastern Standard Time
moment.tz([2012, 5], 'America/New_York').format('zz');    // Eastern Daylight Time
moment.tz([2012, 0], 'America/Los_Angeles').format('zz'); // Pacific Standard Time
moment.tz([2012, 5], 'America/Los_Angeles').format('zz'); // Pacific Daylight Time

----------------------------------------

TITLE: Handling Invalid Moments with moment.max() in JavaScript
DESCRIPTION: Shows how moment.max() behaves when an invalid moment is included in the arguments. From version 2.10.5, if any argument is an invalid moment, the result is an invalid moment.

LANGUAGE: javascript
CODE:
moment.max(moment(), moment.invalid()).isValid() === false
moment.max(moment.invalid(), moment()).isValid() === false
moment.max([moment(), moment.invalid()]).isValid() === false
moment.max([moment.invalid(), moment()]).isValid() === false

----------------------------------------

TITLE: Formatting DST-Affected Date in Moment.js
DESCRIPTION: This snippet demonstrates how Moment.js handles a date-time that falls within the DST shift period. It shows that 2:30 AM on the day of a DST change may be represented differently due to the time shift.

LANGUAGE: javascript
CODE:
moment('2013-03-10 2:30', 'YYYY-MM-DD HH:mm').format(); //=> '2013-03-10T01:30:00-05:00'

----------------------------------------

TITLE: Required Dependencies for Moment Timezone
DESCRIPTION: Lists the core dependencies needed to use moment-timezone, including the minimum moment.js version requirement of 2.9.0 or higher.

LANGUAGE: text
CODE:
moment@2.9.0+
moment-timezone.js
moment-timezone data

----------------------------------------

TITLE: Basic Zone Lookup by Country
DESCRIPTION: Retrieves a list of timezone names for a specified country using ISO 3166-1 country code.

LANGUAGE: javascript
CODE:
moment.tz.zonesForCountry('US');

----------------------------------------

TITLE: Setting Weekday Abbreviations Using Callback Function in MomentJS
DESCRIPTION: Shows how to use a callback function to dynamically generate weekday abbreviations. The function receives the moment object and format as parameters, allowing for more flexible abbreviation generation.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    weekdaysShort : function (momentToFormat, format) {
        return weekdaysShort[momentToFormat.day()];
    }
});

----------------------------------------

TITLE: Installing Moment.js via NPM
DESCRIPTION: Command to install Moment.js package using NPM package manager.

LANGUAGE: bash
CODE:
npm install moment

----------------------------------------

TITLE: Installing Moment Timezone via npm in Node.js
DESCRIPTION: This snippet shows the npm command to install the moment-timezone package.

LANGUAGE: bash
CODE:
npm install moment-timezone

----------------------------------------

TITLE: Comparing Fixed Offset vs Locality-Based Timezone Identifiers
DESCRIPTION: Shows the difference between using fixed offset timezones (Etc/GMT+1) and locality-based timezones (Europe/Madrid). Demonstrates how POSIX compatibility affects the sign convention in Etc/GMT zones.

LANGUAGE: javascript
CODE:
moment().tz('Etc/GMT+1').format('YYYY-MM-DD HH:mm ZZ');
// '2014-12-18 11:22 -0100'
moment().tz('Europe/Madrid').format('YYYY-MM-DD HH:mm ZZ');
// '2014-12-18 13:22 +0100'

----------------------------------------

TITLE: Parsing Date Strings with Native JavaScript and Moment.js
DESCRIPTION: Demonstrates the difference in parsing date strings between native JavaScript Date object and Moment.js, especially for ambiguous date formats.

LANGUAGE: javascript
CODE:
var a = new Date('01/12/2016'); //December 1 2016 in DD/MM/YYYY format
//"Tue Jan 12 2016 00:00:00 GMT-0600 (Central Standard Time)"

LANGUAGE: javascript
CODE:
moment('01/12/2016', 'DD/MM/YYYY', true).format()
"2016-12-01T00:00:00-06:00"

----------------------------------------

TITLE: Installing moment-strftime Plugin via NPM
DESCRIPTION: Command to install the moment-strftime plugin using NPM package manager. This plugin extends MomentJS to support strftime formatting syntax.

LANGUAGE: bash
CODE:
npm install moment-strftime

----------------------------------------

TITLE: Importing Moment Timezone with Limited Data Range
DESCRIPTION: This snippet demonstrates how to import a pre-built bundle of moment-timezone with a smaller subset of data for a 10-year range.

LANGUAGE: javascript
CODE:
import moment from 'moment-timezone/builds/moment-timezone-with-data-10-year-range.js'; // or .min.js

----------------------------------------

TITLE: Retrieving Time Zone Names with Moment.js Timezone
DESCRIPTION: This snippet shows how to use the moment.tz.names() function to get an array of all available time zone names. The function returns a string array containing time zone identifiers.

LANGUAGE: javascript
CODE:
moment.tz.names(); // ["Africa/Abidjan", "Africa/Accra", "Africa/Addis_Ababa", ...]

----------------------------------------

TITLE: Handling Invalid Durations in Moment.js Humanize Function
DESCRIPTION: Demonstrates how Moment.js handles invalid durations when using the humanize() method. Invalid durations are converted to a localized version of 'Invalid Date'.

LANGUAGE: javascript
CODE:
moment.duration.invalid().humanize(); // Invalid Date

----------------------------------------

TITLE: IANA Time Zone Data Entry Example - zone1970.tab
DESCRIPTION: Example entry from IANA tzdb zone1970.tab showing how timezone regions are mapped to multiple countries.

LANGUAGE: plaintext
CODE:
CZ,SK	+5005+01426	Europe/Prague

----------------------------------------

TITLE: Configuring and Using Moment.js with RequireJS
DESCRIPTION: Sets up RequireJS configuration for Moment.js path and demonstrates usage of Moment Timezone functionality. Shows how to define module dependencies and create a timezone-aware date formatter.

LANGUAGE: javascript
CODE:
require.config({
    paths: {
        "moment": "path/to/moment"
    }
});
define(["path/to/moment-timezone-with-data"], function (moment) {
    moment().tz("America/Los_Angeles").format();
});

----------------------------------------

TITLE: Basic Base 60 Conversion in JavaScript
DESCRIPTION: Demonstrates basic usage of moment.tz.packBase60() to convert base 10 numbers to base 60 strings. Shows conversion of single-digit and multi-digit numbers.

LANGUAGE: javascript
CODE:
moment.tz.packBase60(9);    // 9
moment.tz.packBase60(10);   // a
moment.tz.packBase60(59);   // X
moment.tz.packBase60(1337); // mh

----------------------------------------

TITLE: Creating Moment Instance with Full Date Array
DESCRIPTION: Creates a moment instance using an array containing year, month, day, hour, minute, second, and millisecond values. Month values are zero-indexed (0-11).

LANGUAGE: javascript
CODE:
moment([2010, 1, 14, 15, 25, 50, 125]); // February 14th, 3:25:50.125 PM

----------------------------------------

TITLE: Parsing UTC Time with Moment.js
DESCRIPTION: Uses moment.utc() to parse a date string as a UTC date. The resulting date will have a UTC offset of +00:00.

LANGUAGE: javascript
CODE:
moment.utc('2016-01-01T23:35:01');

----------------------------------------

TITLE: Parsing Different Input Types with Time Zones in Moment.js
DESCRIPTION: Illustrates how moment.tz handles parsing of arrays, strings without offset, and objects, considering the specified time zone.

LANGUAGE: javascript
CODE:
var arr = [2013, 5, 1],
    str = "2013-12-01",
    obj = { year : 2013, month : 5, day : 1 };

moment.tz(arr, "America/Los_Angeles").format(); // 2013-06-01T00:00:00-07:00
moment.tz(str, "America/Los_Angeles").format(); // 2013-12-01T00:00:00-08:00
moment.tz(obj, "America/Los_Angeles").format(); // 2013-06-01T00:00:00-07:00

moment.tz(arr, "America/New_York").format();    // 2013-06-01T00:00:00-04:00
moment.tz(str, "America/New_York").format();    // 2013-12-01T00:00:00-05:00
moment.tz(obj, "America/New_York").format();    // 2013-06-01T00:00:00-04:00

----------------------------------------

TITLE: Querying Country-Zone Mappings in Moment.js
DESCRIPTION: JavaScript code demonstrating how to query timezone data for countries and vice versa using Moment Timezone's API methods.

LANGUAGE: javascript
CODE:
moment.tz.zonesForCountry('CZ'); // ["Europe/Prague"]
moment.tz.zonesForCountry('SK'); // ["Europe/Bratislava", "Europe/Prague"]

moment.tz.zone('Europe/Bratislava').countries(); // ["SK"]
moment.tz.zone('Europe/Prague').countries();     // ["CZ", "SK"]

----------------------------------------

TITLE: Defining Timezone Data Structure in JavaScript
DESCRIPTION: Shows the unpacked format of timezone data for Los Angeles between 2014-2018. The structure includes timezone name, abbreviations array, timestamp boundaries (untils), UTC offsets in minutes, population, and associated countries. Arrays of abbreviations, timestamps, and offsets work together to define timezone transitions.

LANGUAGE: javascript
CODE:
{
	name       : 'America/Los_Angeles',
	abbrs      : ['PST', 'PDT','PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST'],
	untils     : [1394359200000, 1414918800000, 1425808800000, 1446368400000, 1457863200000, 1478422800000, 1489312800000, 1509872400000, 1520762400000, 1541322000000, null],
	offsets    : [480, 420, 480, 420, 480, 420, 480, 420, 480, 420, 480],
	population : 15000000,
	countries  : ['US']
}

----------------------------------------

TITLE: Getting ISO Calendar Values with MomentJS
DESCRIPTION: Demonstrates how to use the isocalendar() method to get an array containing the ISO year, week number, day of week, and minutes since midnight for a given date.

LANGUAGE: javascript
CODE:
moment().isocalendar(); // [2012, 8, 5, 870]

----------------------------------------

TITLE: Parsing Timestamps and Date Objects in Moment.js
DESCRIPTION: Shows how moment.tz handles Unix timestamps and Date objects, which refer to specific points in time, ignoring the time zone offset during construction.

LANGUAGE: javascript
CODE:
var timestamp = 1403454068850,
    date = new Date(timestamp);

moment.tz(timestamp, "America/Los_Angeles").format(); // 2014-06-22T09:21:08-07:00
moment(timestamp).tz("America/Los_Angeles").format(); // 2014-06-22T09:21:08-07:00

moment.tz(date, "America/Los_Angeles").format();      // 2014-06-22T09:21:08-07:00
moment(date).tz("America/Los_Angeles").format();      // 2014-06-22T09:21:08-07:00

----------------------------------------

TITLE: Converting Quarters and Years to Months
DESCRIPTION: Demonstrates how Moment.js converts and rounds decimal values for quarters and years into equivalent month operations.

LANGUAGE: javascript
CODE:
moment().add(1.5, 'years') == moment().add(18, 'months')
moment().add(.8, 'years') == moment().add(9.6, 'months') == moment().add(10, 'months')
moment().add(1.5, 'quarters') == moment().add(4.5, 'months') == moment().add(5, 'months')

----------------------------------------

TITLE: Checking and Adding Timezone Zones with MomentJS
DESCRIPTION: Demonstrates how to check if a timezone zone exists using moment.tz.zone() and how to add a new zone. Returns null for non-existent zones and a Zone object for valid zones. Shows the process of adding a new zone and then verifying its existence.

LANGUAGE: javascript
CODE:
moment.tz.zone("UnloadedZone"); // null
moment.tz.add("UnloadedZone|UZ|0|0|");
moment.tz.zone("UnloadedZone"); // Zone { name : "UnloadedZone", ...}

----------------------------------------

TITLE: Installing moment-jalaali Plugin for Moment.js
DESCRIPTION: Command to install the moment-jalaali plugin using npm package manager.

LANGUAGE: bash
CODE:
npm install moment-jalaali

----------------------------------------

TITLE: Parsing Ambiguous Times During Fall DST Transition in Moment.js Timezone
DESCRIPTION: Shows how Moment.js Timezone handles parsing times that exist twice due to the fall back DST transition. The library always uses the earlier instance of a duplicated hour unless an offset is specified.

LANGUAGE: javascript
CODE:
moment.tz("2012-11-04 00:59:59", "America/New_York"); // 2012-11-04T00:59:59-04:00
moment.tz("2012-11-04 01:00:00", "America/New_York"); // 2012-11-04T01:00:00-04:00
moment.tz("2012-11-04 01:59:59", "America/New_York"); // 2012-11-04T01:59:59-04:00
moment.tz("2012-11-04 02:00:00", "America/New_York"); // 2012-11-04T02:00:00-05:00

----------------------------------------

TITLE: Accessing Internal Properties in Moment.js
DESCRIPTION: This snippet demonstrates the internal '_d' property of Moment objects, which holds a JavaScript Date. It's noted that this property may not accurately reflect the Moment's actual value due to epoch shifting, especially when using Moment TimeZone.

LANGUAGE: javascript
CODE:
moment._d

----------------------------------------

TITLE: Parsing and Formatting Hijri Dates with moment-hijri in JavaScript
DESCRIPTION: This snippet demonstrates how to parse a Hijri date and format it to show both Hijri and Gregorian calendars. It uses the 'iYYYY/iM/iD' format for Hijri dates.

LANGUAGE: javascript
CODE:
m = moment('1410/8/28', 'iYYYY/iM/iD'); // Parse a Hijri date.
m.format('iYYYY/iM/iD [is] YYYY/M/D'); // 1410/8/28 is 1990/3/25

----------------------------------------

TITLE: Using zoneAbbr() Method in Moment.js Timezone
DESCRIPTION: Demonstrates the usage of the zoneAbbr() method to get the time zone abbreviation directly, which is equivalent to using the 'z' formatting token.

LANGUAGE: javascript
CODE:
moment.tz([2012, 0], 'America/New_York').zoneAbbr(); // EST
moment.tz([2012, 5], 'America/New_York').zoneAbbr(); // EDT

----------------------------------------

TITLE: Converting Timezones with moment#tz in JavaScript
DESCRIPTION: Demonstrates how to use the moment#tz method to change timezones and update offsets. It shows the effect on the formatted output and how it impacts other operations like calculating the start of the day.

LANGUAGE: javascript
CODE:
moment("2013-11-18").tz("America/Toronto").format('Z'); // -05:00
moment("2013-11-18").tz("Europe/Berlin").format('Z');   // +01:00

LANGUAGE: javascript
CODE:
var m = moment.tz("2013-11-18 11:55", "America/Toronto");
m.format();                     // 2013-11-18T11:55:00-05:00
m.startOf("day").format();      // 2013-11-18T00:00:00-05:00
m.tz("Europe/Berlin").format(); // 2013-11-18T06:00:00+01:00
m.startOf("day").format();      // 2013-11-18T00:00:00+01:00

----------------------------------------

TITLE: Parsing Local Time with Moment.js
DESCRIPTION: Uses the basic moment() function to parse a date string in the context of the user's local time. The resulting date will have a UTC offset matching the local computer.

LANGUAGE: javascript
CODE:
moment('2016-01-01T23:35:01');

----------------------------------------

TITLE: Using Pseudo Locale in MomentJS (JavaScript)
DESCRIPTION: Demonstrates how to set and use the pseudo locale in MomentJS. This feature alters date and time outputs to make localized data easily identifiable during testing.

LANGUAGE: javascript
CODE:
moment.locale('x-pseudo');
moment().format('LLL'); //14 F~ébrú~árý 2010 15:25
moment().fromNow(); //'á ~féw ~sécó~ñds á~gó'
moment().calendar(); //'T~ódá~ý át 02:00'

----------------------------------------

TITLE: Creating MomentJS Date from ISO Calendar Array
DESCRIPTION: Shows how to reconstruct a moment object from an ISO calendar array containing year, week number, day of week, and minutes since midnight. Returns a formatted date string.

LANGUAGE: javascript
CODE:
moment.fromIsocalendar([2011, 51, 5, 870]).format('LLLL');
// "Friday, December 23 2011 2:30 PM"

----------------------------------------

TITLE: Retrieving Timezone Information with moment#tz in JavaScript
DESCRIPTION: Shows how to use the moment#tz method without arguments to retrieve the timezone name assigned to a moment instance. It also demonstrates the behavior when a timezone has not been set.

LANGUAGE: javascript
CODE:
var m = moment.tz("2013-11-18 11:55", "America/Toronto");
m.tz();  // America/Toronto
var m = moment.tz("2013-11-18 11:55");
m.tz() === undefined;  // true

----------------------------------------

TITLE: Converting Offset Date to Local Time with Moment.js
DESCRIPTION: Demonstrates how using moment() to parse a date with a specified offset will convert the date to the local timezone, potentially shifting the date and time.

LANGUAGE: javascript
CODE:
moment('2016-01-01T00:00:00+02:00').format()

----------------------------------------

TITLE: Formatting Time Zone Information with 'z' Token in Moment.js Timezone
DESCRIPTION: Illustrates that the 'z' formatting token doesn't always show the abbreviated time zone name. It can also display time offsets for regions where abbreviations are not available.

LANGUAGE: javascript
CODE:
moment.tz('America/Los_Angeles').format('z')  // "PDT"     (abbreviation)
moment.tz('Asia/Magadan').format('z')         // "+11"     (3-char offset)
moment.tz('Asia/Colombo').format('z')         // "+0530"   (5-char offset)

----------------------------------------

TITLE: Updating Changelog with Git Extras
DESCRIPTION: Command to update the changelog using git-extras before a QUnit release. This step is part of the release preparation process.

LANGUAGE: shell
CODE:
git changelog

----------------------------------------

TITLE: Updating Timezone while Preserving Local Time in JavaScript
DESCRIPTION: Demonstrates how to use the moment#tz method with a second boolean parameter to update only the timezone and offset while keeping the local time the same. This can result in pointing to a different moment in time if the offset changes.

LANGUAGE: javascript
CODE:
var m = moment.tz("2013-11-18 11:55", "America/Toronto");
m.format();                           // 2013-11-18T11:55:00-05:00
m.tz('Europe/Berlin', true).format()  // 2013-11-18T11:55:00+01:00

----------------------------------------

TITLE: Parsing Dates with Strict Mode in MomentJS
DESCRIPTION: Demonstrates how to use strict mode when parsing dates with MomentJS. Strict mode requires the input to exactly match the specified format, including separators.

LANGUAGE: javascript
CODE:
moment('01/01/2016', 'MM/DD/YYYY', true).format()
"2016-01-01T00:00:00-06:00"
moment('01/01/2016 some text', 'MM/DD/YYYY', true).format()
"Invalid date"

----------------------------------------

TITLE: Retrieving and Setting Moment.js Time Thresholds
DESCRIPTION: Demonstrates how to retrieve existing relative time thresholds and set new ones using moment.relativeTimeThreshold(). Supports units like seconds (s, ss), minutes (m), hours (h), days (d), weeks (w), and months (M). Each threshold defines when the duration transitions to the next unit of time.

LANGUAGE: javascript
CODE:
  // Retrieve existing thresholds
  moment.relativeTimeThreshold('ss'); // 44
  moment.relativeTimeThreshold('s');  // 45
  moment.relativeTimeThreshold('m');  // 45
  moment.relativeTimeThreshold('h');  // 22
  moment.relativeTimeThreshold('d');  // 26
  moment.relativeTimeThreshold('w');  // null (disabled)
  moment.relativeTimeThreshold('M');  // 11

  // Set new thresholds
  moment.relativeTimeThreshold('s', 40);
  moment.relativeTimeThreshold('ss', 3);
  moment.relativeTimeThreshold('m', 40);
  moment.relativeTimeThreshold('h', 20);
  moment.relativeTimeThreshold('d', 25);
  moment.relativeTimeThreshold('w', 4);  // enables weeks
  moment.relativeTimeThreshold('M', 10);

----------------------------------------

TITLE: Retrieving and Setting Moment.js Time Thresholds
DESCRIPTION: Demonstrates how to retrieve existing relative time thresholds and set new ones using moment.relativeTimeThreshold(). Supports units like seconds (s, ss), minutes (m), hours (h), days (d), weeks (w), and months (M). Each threshold defines when the duration transitions to the next unit of time.

LANGUAGE: javascript
CODE:
  // Retrieve existing thresholds
  moment.relativeTimeThreshold('ss'); // 44
  moment.relativeTimeThreshold('s');  // 45
  moment.relativeTimeThreshold('m');  // 45
  moment.relativeTimeThreshold('h');  // 22
  moment.relativeTimeThreshold('d');  // 26
  moment.relativeTimeThreshold('w');  // null (disabled)
  moment.relativeTimeThreshold('M');  // 11

  // Set new thresholds
  moment.relativeTimeThreshold('s', 40);
  moment.relativeTimeThreshold('ss', 3);
  moment.relativeTimeThreshold('m', 40);
  moment.relativeTimeThreshold('h', 20);
  moment.relativeTimeThreshold('d', 25);
  moment.relativeTimeThreshold('w', 4);  // enables weeks
  moment.relativeTimeThreshold('M', 10);

----------------------------------------

TITLE: Basic Locale Loading with Individual Script Tags
DESCRIPTION: Demonstrates loading individual locale files using script tags with proper charset specification for encoding support.

LANGUAGE: html
CODE:
<script src="moment.js"></script>
<script src="locale/fr.js" charset="UTF-8"></script>
<script src="locale/pt.js" charset="UTF-8"></script>
<script>
  moment.locale('fr');  // Set the default/global locale
  // ...
</script>

----------------------------------------

TITLE: Getting UTC Offset for Los Angeles Timezone
DESCRIPTION: Demonstrates how to get UTC offset for Los Angeles timezone at different timestamps. The offset varies between 420 and 480 minutes depending on daylight saving time.

LANGUAGE: javascript
CODE:
moment.tz.zone('America/Los_Angeles').utcOffset(1403465838805); // 420
moment.tz.zone('America/Los_Angeles').utcOffset(1388563200000); // 480

----------------------------------------

TITLE: Handling Trailing Data in MomentJS Parsing
DESCRIPTION: Shows how strict mode detects and rejects trailing data in date strings, which non-strict mode might ignore, leading to incorrect parsing.

LANGUAGE: javascript
CODE:
//wrong date is parsed because non-strict mode ignores data after format
moment('2016-12-31 11:32 PM').format('LT')
"11:32 AM"
//trailing data is noticed
moment('2016-12-31 11:32 PM', moment.ISO_8601, true).format('LT')
"Invalid date"

----------------------------------------

TITLE: Custom Relative Time Function Signature
DESCRIPTION: Demonstrates the function signature for custom relative time processing. The function accepts number, withoutSuffix, key, and isFuture parameters to generate dynamic relative time strings.

LANGUAGE: javascript
CODE:
function (number, withoutSuffix, key, isFuture) {
    return string;
}

----------------------------------------

TITLE: Filtering and Packing Timezone Data with Moment.js
DESCRIPTION: The filterLinkPack method takes an unpacked timezone bundle and compresses it by filtering to specific years, creating timezone links, and packing the data. It accepts three parameters: an UnpackedBundle object, a start year number, and an end year number, returning a compressed PackedBundle.

LANGUAGE: javascript
CODE:
moment.tz.filterLinkPack(UnpackedBundle, Number, Number); // PackedBundle

----------------------------------------

TITLE: Packed Timezone Data Example in JavaScript
DESCRIPTION: This snippet shows an example of packed timezone data for Los Angeles between 2014 and 2018. The data is represented as a single string with six sections separated by pipes, including the timezone name, abbreviation map, offset map, abbreviation/offset index, timestamp differences, and population.

LANGUAGE: javascript
CODE:
'America/Los_Angeles|PST PDT|80 70|01010101010|1Lzm0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0|15e6'

----------------------------------------

TITLE: Deprecation Warning for Moment.js Date Construction Fallback
DESCRIPTION: This code snippet represents a deprecation warning message in Moment.js. It indicates that the library's date construction is falling back to JavaScript's Date object, which is discouraged and will be removed in a future major release.

LANGUAGE: javascript
CODE:
Moment construction falls back to js Date. 
This is discouraged and will be removed in an upcoming major release.

----------------------------------------

TITLE: Loading Individual Locale in Moment.js
DESCRIPTION: Demonstrates how to import and use a specific locale (French) in Moment.js. Shows both CommonJS and ES6 import syntax for moment and locale loading.

LANGUAGE: javascript
CODE:
var moment = require('moment');
//or
// import moment from 'moment';

// import locale file(s)
import 'moment/locale/fr';

moment.locale('fr');
moment(1316116057189).fromNow(); // il y a 6 ans

----------------------------------------

TITLE: Configuring Floor Rounding for Relative Time in MomentJS
DESCRIPTION: Demonstrates how to modify the default rounding behavior to use Math.floor() for relative time calculations. Shows the impact on time threshold settings and relative time output formatting.

LANGUAGE: javascript
CODE:
var roundingDefault = moment.relativeTimeRounding();

// Round relative time evaluation down
moment.relativeTimeRounding(Math.floor);

moment.relativeTimeThreshold('s', 60);
moment.relativeTimeThreshold('m', 60);
moment.relativeTimeThreshold('h', 24);
moment.relativeTimeThreshold('d', 7);
moment.relativeTimeThreshold('w', 4);
moment.relativeTimeThreshold('M', 12);

var a = moment();
a.subtract({hours: 23, minutes: 59, seconds: 59});
a.toNow();  // == 'in 23 hours'  'Round down towards the nearest hour'

// back to default
moment.relativeTimeRounding(roundingDefault);

----------------------------------------

TITLE: Converting Packed Timezone Data with moment.tz.unpack()
DESCRIPTION: Demonstrates how to convert a packed timezone string into an unpacked object containing timezone information. The unpacked object includes the timezone name, abbreviations, UTC offsets, transition timestamps, and population data.

LANGUAGE: javascript
CODE:
var packed = "Indian/Mauritius|LMT MUT MUST|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0|15e4";

moment.tz.unpack(packed);
// {
//     name       : 'Indian/Mauritius',
//     abbrs      : ['LMT', 'MUT', 'MUST', 'MUT', 'MUST', 'MUT'],
//     offsets    : [-230, -240, -300, -240, -300, -240],
//     untils     : [-1988164200000, 403041600000, 417034800000, 1224972000000, 1238274000000, null],
//     population : 150000
// };

----------------------------------------

TITLE: Demonstrating Deprecated min() Function in Moment.js
DESCRIPTION: This snippet shows how the deprecated moment().min function compares to the new moment.max function, highlighting their equivalent behavior.

LANGUAGE: js
CODE:
moment('2016-01-01').min('2016-02-01').format()
"2016-02-01T00:00:00-06:00"
//is equivalent to
moment.max(moment('2016-01-01'), moment('2016-02-01')).format()
"2016-02-01T00:00:00-06:00"

----------------------------------------

TITLE: Setting Locale Invalid Date Message - Current Method
DESCRIPTION: Demonstrates the current recommended way to set custom invalid date message in Moment.js using updateLocale() method. This approach has been standard since version 2.12.0.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    invalidDate : String
});

----------------------------------------

TITLE: Using Twix Range Methods with Moment.js
DESCRIPTION: Demonstrates core Twix functionality including range creation, duration calculation, and formatting options. Shows how to create a time range and use various methods to check status, count intervals, and format output.

LANGUAGE: javascript
CODE:
var t = moment("1/25/1982 9:30 AM").twix("1/25/1982 1:30 PM");
t.isCurrent(); // false
t.count('minutes'); // 241
t.format();  // 'Jan 25, 1982, 9:30 AM - 1:30 PM'
t.simpleFormat("h:m"); // '9:30 - 1:30'

----------------------------------------

TITLE: Leading Zero Handling in Base 60 Conversion
DESCRIPTION: Demonstrates how moment.tz.packBase60() handles leading zeros before decimal points, showing they are dropped in the output.

LANGUAGE: javascript
CODE:
moment.tz.packBase60(1.1667, 1); // 1.a
moment.tz.packBase60(0.1667, 1); // .a

----------------------------------------

TITLE: Running MomentJS Locally with Grunt
DESCRIPTION: Starts a local web server for MomentJS development using Grunt. If errors occur, try using 'localhost' instead of '0.0.0.0'. The server will run on http://0.0.0.0:6060 or http://localhost:6060.

LANGUAGE: shell
CODE:
grunt server

Note: Switch to Localhost instead of 0.0.0.0 if seeing errors.

----------------------------------------

TITLE: Importing and Using Moment.js with ES6 Syntax
DESCRIPTION: This snippet shows how to import the Moment.js library using ES6 module syntax and use its format method. This is the modern way of importing modules in JavaScript environments that support ES6.

LANGUAGE: javascript
CODE:
import moment from 'moment';
moment().format();

----------------------------------------

TITLE: Zone List Output Format
DESCRIPTION: Example of the returned array format containing timezone names sorted alphabetically.

LANGUAGE: javascript
CODE:
["America/Adak", "America/Anchorage", ... "Pacific/Honolulu"]

----------------------------------------

TITLE: Optimizing Moment.js Locales with Webpack Plugin
DESCRIPTION: Webpack configuration to strip unnecessary Moment.js locales using moment-locales-webpack-plugin. This reduces bundle size by including only specified locales.

LANGUAGE: javascript
CODE:
// webpack.config.js
const MomentLocalesPlugin = require('moment-locales-webpack-plugin');

module.exports = {
    plugins: [
        // To strip all locales except "en"
        new MomentLocalesPlugin(),

        // Or: To strip all locales except "en", "es-us" and "ru"
        // ("en" is built into Moment and can't be removed)
        new MomentLocalesPlugin({
            localesToKeep: ['es-us', 'ru'],
        }),
    ],
};

----------------------------------------

TITLE: Installing Moment.js Package with Bower
DESCRIPTION: Command to install Moment.js as a project dependency using Bower package manager. The --save flag adds moment to the project's bower.json dependencies.

LANGUAGE: bash
CODE:
bower install --save moment

----------------------------------------

TITLE: Workaround for Moment.js Locale Bug in Browserify
DESCRIPTION: Shows how to correctly load a specific locale in Browserify to bypass the locale loading bug.

LANGUAGE: javascript
CODE:
var moment = require('moment');
require('moment/locale/cs');
console.log(moment.locale()); // cs

----------------------------------------

TITLE: Zone Lookup with Offsets
DESCRIPTION: Retrieves timezone information including UTC offsets for the current date and time by passing true as the second parameter.

LANGUAGE: javascript
CODE:
moment.tz.zonesForCountry('CN', true);

----------------------------------------

TITLE: Alternative Import Syntax for TypeScript
DESCRIPTION: Alternative import syntax for TypeScript when using synthetic default imports configuration.

LANGUAGE: javascript
CODE:
import moment from 'moment';

----------------------------------------

TITLE: Loading Moment.js with Different Locale Configurations
DESCRIPTION: Examples of different ways to load Moment.js with Require.js, including core-only loading, single locale loading, all locales loading, and async locale loading.

LANGUAGE: javascript
CODE:
// only needing core
define(['moment'], function (moment) {
	console.log(moment().format('LLLL'));  // 'Friday, June 24, 2016 1:42 AM'
});

// core with single locale
define(['moment', 'moment/locale/de'], function (moment) {
	moment.locale('de');
	console.log(moment().format('LLLL')); // 'Freitag, 24. Juni 2016 01:42'
});

// core with all locales
define(['moment/min/moment-with-locales'], function (moment) {
	moment.locale('de');
	console.log(moment().format('LLLL')); // 'Freitag, 24. Juni 2016 01:42'
});

// async load locale
define(['require', 'moment'], function(require, moment) {
  // Inside some module after the locale is detected. This is the
  // case where the locale is not known before module load time.
  require(['moment/locale/de'], function(localeModule) {
    // here the locale is loaded, but not yet in use
    console.log(moment().format('LLLL'));  // 'Friday, June 24, 2016 1:42 AM'

    moment.locale('de');
    // Use moment now that the locale has been properly set.
    console.log(moment().format('LLLL')); // 'Freitag, 24. Juni 2016 01:42'
  })
});

----------------------------------------

TITLE: Converting Moment.js Duration to Total Hours
DESCRIPTION: Converts a Moment.js duration object to its total length in hours. This method returns a floating-point number representing the entire duration expressed in hours.

LANGUAGE: javascript
CODE:
moment.duration().asHours();

----------------------------------------

TITLE: Rounding Date/Time with Moment.js Round Plugin in JavaScript
DESCRIPTION: This snippet demonstrates how to use the moment-round plugin to round, ceil, and floor date/time objects to various intervals. It shows examples of rounding to seconds, minutes, and hours.

LANGUAGE: javascript
CODE:
require('moment-round');
var m = new moment(); // 2015-06-18 15:30:19
m.round(5, 'seconds'); // 2015-06-18 15:30:20
m.ceil(3, 'minutes'); // 2015-06-18 15:33:00
m.floor(16, 'hours'); // 2015-06-18 00:00:00
m.ceil(21, 'hours'); // 2015-06-18 21:00:00
m.ceil(20, 'hours'); // 2015-06-19 00:00:00

----------------------------------------

TITLE: Configuring Moment.js as Global Module in System.js
DESCRIPTION: Configuration to load Moment.js as a global module using System.js meta configuration.

LANGUAGE: javascript
CODE:
System.config({
  meta: {
    'moment': { format: 'global' }
  }
});

----------------------------------------

TITLE: Disabling Moment.js Global Export
DESCRIPTION: Configuration to prevent Moment.js from creating a global moment object using the noGlobal option.

LANGUAGE: javascript
CODE:
require.config({
    config: {
        moment: {
            noGlobal: true
        }
    }
});

----------------------------------------

TITLE: Demonstrating Deprecated max() Function in Moment.js
DESCRIPTION: This snippet illustrates how the deprecated moment().max function compares to the new moment.min function, showing their equivalent behavior.

LANGUAGE: js
CODE:
moment('2016-01-01').max('2016-02-01').format()
"2016-01-01T00:00:00-06:00"
//is equivalent to
moment.min(moment('2016-01-01'), moment('2016-02-01')).format()
"2016-01-01T00:00:00-06:00"

----------------------------------------

TITLE: Configuring Require.js Package for Moment.js
DESCRIPTION: Basic configuration for loading Moment.js as a Require.js package. Specifies the package name, location relative to baseUrl, and main entry point.

LANGUAGE: javascript
CODE:
requirejs.config({
  packages: [{
    name: 'moment',
    // This location is relative to baseUrl. Choose bower_components
    // or node_modules, depending on how moment was installed.
    location: '[bower_components|node_modules]/moment',
    main: 'moment'
  }]
});

----------------------------------------

TITLE: Running QUnit Release Script
DESCRIPTION: Command to execute the release script for QUnit, specifying the remote repository. This is part of the release process using jquery-release.

LANGUAGE: shell
CODE:
node release.js --remote=jquery/qunit

----------------------------------------

TITLE: Loading All Locales in Moment.js with Browserify
DESCRIPTION: Demonstrates how to include all locales when using Moment.js with Browserify.

LANGUAGE: javascript
CODE:
var moment = require('moment');
require("moment/min/locales.min");
moment.locale('cs');
console.log(moment.locale()); // cs

----------------------------------------

TITLE: Basic Time Unit Operations with MomentJS startOf()
DESCRIPTION: Demonstrates setting a moment to the start of various time units including year, month, quarter, week, day, hour, minute, and second. Each operation sets the time to the beginning of the specified unit while zeroing out smaller units.

LANGUAGE: javascript
CODE:
moment().startOf('year');    // set to January 1st, 12:00 am this year
moment().startOf('month');   // set to the first of this month, 12:00 am
moment().startOf('quarter');  // set to the beginning of the current quarter, 1st day of months, 12:00 am
moment().startOf('week');    // set to the first day of this week, 12:00 am
moment().startOf('isoWeek'); // set to the first day of this week according to ISO 8601, 12:00 am
moment().startOf('day');     // set to 12:00 am today
moment().startOf('date');     // set to 12:00 am today
moment().startOf('hour');    // set to now, but with 0 mins, 0 secs, and 0 ms
moment().startOf('minute');  // set to now, but with 0 seconds and 0 milliseconds
moment().startOf('second');  // same as moment().milliseconds(0);

----------------------------------------

TITLE: Basic Time Unit Operations with MomentJS startOf()
DESCRIPTION: Demonstrates setting a moment to the start of various time units including year, month, quarter, week, day, hour, minute, and second. Each operation sets the time to the beginning of the specified unit while zeroing out smaller units.

LANGUAGE: javascript
CODE:
moment().startOf('year');    // set to January 1st, 12:00 am this year
moment().startOf('month');   // set to the first of this month, 12:00 am
moment().startOf('quarter');  // set to the beginning of the current quarter, 1st day of months, 12:00 am
moment().startOf('week');    // set to the first day of this week, 12:00 am
moment().startOf('isoWeek'); // set to the first day of this week according to ISO 8601, 12:00 am
moment().startOf('day');     // set to 12:00 am today
moment().startOf('date');     // set to 12:00 am today
moment().startOf('hour');    // set to now, but with 0 mins, 0 secs, and 0 ms
moment().startOf('minute');  // set to now, but with 0 seconds and 0 milliseconds
moment().startOf('second');  // same as moment().milliseconds(0);

----------------------------------------

TITLE: Loading All Locales in Moment.js
DESCRIPTION: Shows how to load all available locales at once using the moment-with-locales bundle. This approach eliminates the need to import individual locale files.

LANGUAGE: javascript
CODE:
import moment from 'moment/min/moment-with-locales';

moment.locale('de');
moment(1316116057189).fromNow(); // vor 6 Jahren

----------------------------------------

TITLE: DateTime Parsing with Potential Issues
DESCRIPTION: Example of date and time parsing that may yield unexpected results.

LANGUAGE: javascript
CODE:
moment('24/12/2019 09:15:00', "DD MM YYYY hh:mm:ss");

----------------------------------------

TITLE: Installing Moment.js via npm
DESCRIPTION: Command to install Moment.js using npm package manager.

LANGUAGE: bash
CODE:
npm install moment

----------------------------------------

TITLE: Installing MomentJS on Linux/UNIX
DESCRIPTION: Executes the compile script for installing MomentJS on Linux/UNIX systems.

LANGUAGE: shell
CODE:
./compile.sh

----------------------------------------

TITLE: Importing Moment Timezone Library without Preloaded Data
DESCRIPTION: This example shows how to import the moment-timezone library without any preloaded data, allowing for custom data loading.

LANGUAGE: javascript
CODE:
import moment from 'moment-timezone/moment-timezone.js'; // or .min.js
moment.tz.load(customData);

----------------------------------------

TITLE: Parsing ISO-8601 Dates with MomentJS
DESCRIPTION: Demonstrates how to parse ISO-8601 formatted date strings using MomentJS's ISO_8601 constant. Shows both direct parsing and using ISO_8601 within an array of format options.

LANGUAGE: javascript
CODE:
moment("2010-01-01T05:06:07", moment.ISO_8601);
moment("2010-01-01T05:06:07", ["YYYY", moment.ISO_8601]);

----------------------------------------

TITLE: Basic Moment.js Usage in TypeScript
DESCRIPTION: Example showing how to import and use Moment.js to format current date and time using require syntax.

LANGUAGE: javascript
CODE:
const moment = require('moment');

let now = moment().format('LLLL');

----------------------------------------

TITLE: Parsing Date String in Forgiving Mode with MomentJS (JavaScript)
DESCRIPTION: This snippet shows how forgiving mode in MomentJS handles a date string that doesn't match the expected format. It produces a wrong date instead of an 'Invalid date', which can be less obvious but potentially problematic.

LANGUAGE: javascript
CODE:
moment('01/12/2016', 'YYYY-MM-DD').format()
"2001-12-20T00:00:00-06:00"

----------------------------------------

TITLE: Converting Unix Timestamp to UTC Moment Object
DESCRIPTION: Creates a Moment.js object from a Unix timestamp and converts it to UTC mode using the .utc() method. This is necessary since moment.unix() creates objects in local mode by default.

LANGUAGE: javascript
CODE:
var day = moment.unix(1318781876).utc();

----------------------------------------

TITLE: Moment.js Locale Usage in TypeScript
DESCRIPTION: Example demonstrating how to import and switch between different locales in Moment.js.

LANGUAGE: javascript
CODE:
import * as moment from 'moment';
import 'moment/locale/pt-br';

console.log(moment.locale()); // en
moment.locale('fr');
console.log(moment.locale()); // fr
moment.locale('pt-br');
console.log(moment.locale()); // pt-br

----------------------------------------

TITLE: Basic Date Transformation Using Patterns in MomentJS
DESCRIPTION: Demonstrates basic date transformations using pattern strings to modify dates. Shows how to set specific times, add/subtract days, and modify to midnight.

LANGUAGE: javascript
CODE:
moment().transform('YYYY-MM-+01 00:00:00.000'); // Tonight at midnight
moment().transform('14:30:00.000'); // Today, 2:30 pm
moment().transform('YYYY-MM--30 00:00:00.000'); // 30 days ago

----------------------------------------

TITLE: Using Locale and Strictness Arguments with moment.parseZone() in JavaScript
DESCRIPTION: Shows how to use moment.parseZone() with additional arguments for locale and strictness. This allows for more precise parsing of date strings with specific formatting requirements.

LANGUAGE: javascript
CODE:
moment.parseZone("2013 01 01 -13:00", 'YYYY MM DD ZZ', true).utcOffset(); // -780  ("-13:00" in total minutes)
moment.parseZone("2013-01-01-13:00", 'YYYY MM DD ZZ', true).utcOffset(); // NaN (doesn't pass the strictness check)
moment.parseZone("2013 01 01 -13:00", 'YYYY MM DD ZZ', 'fr', true).utcOffset(); // -780 (with locale and strictness argument)
moment.parseZone("2013 01 01 -13:00", ['DD MM YYYY ZZ', 'YYYY MM DD ZZ'], 'fr', true).utcOffset(); // -780 (with locale and strictness argument alongside an array of formats)

----------------------------------------

TITLE: Setting Moment.js as Global for Specific Dependency
DESCRIPTION: System.js configuration to expose Moment.js as a global variable only for a specific dependency using meta configuration with globals.

LANGUAGE: javascript
CODE:
System.config({
  meta: {
    'path/to/global-file.js': {
      globals: {
        moment: 'moment'
      }
    }
  }
});

----------------------------------------

TITLE: Setting Locale Invalid Date Message - Legacy Method
DESCRIPTION: Shows the legacy method used between versions 2.8.1 and 2.11.2 for setting invalid date messages using locale() method.

LANGUAGE: javascript
CODE:
moment.locale('en', {
    invalidDate : String
});

----------------------------------------

TITLE: Creating Date with Current Month/Year in MomentJS
DESCRIPTION: Shows how to create moment objects with specific day and time while defaulting to current month and year.

LANGUAGE: javascript
CODE:
moment(5, "DD");  // this month, 5th day-of-month
moment("4 05:06:07", "DD hh:mm:ss");  // this month, 4th day-of-month, 05:06:07.000

----------------------------------------

TITLE: Checking Moment.js Date Validity and Overflow
DESCRIPTION: Shows how to check if a Moment.js date is valid using isValid() and how to determine which date unit overflowed using invalidAt(). The example creates an invalid date and checks its validity and overflow point.

LANGUAGE: javascript
CODE:
var m = moment("2011-10-10T10:20:90");
m.isValid(); // false
m.invalidAt(); // 5 for seconds

----------------------------------------

TITLE: Getting ISO Weeks in Year with Moment.js
DESCRIPTION: Returns the number of ISO weeks in the current moment's year. ISO weeks are defined by ISO 8601 and may differ from calendar weeks as they depend on which day is considered the start of the week and specific rules for the first and last weeks of the year.

LANGUAGE: javascript
CODE:
moment().isoWeeksInYear();

----------------------------------------

TITLE: Creating Date with Current Year in MomentJS
DESCRIPTION: Demonstrates creating moment objects with specific month and date while defaulting to current year.

LANGUAGE: javascript
CODE:
moment(3, "MM");  // this year, 3rd month (March)
moment("Apr 4 05:06:07", "MMM DD hh:mm:ss");  // this year, 4th April, 05:06:07.000

----------------------------------------

TITLE: Creating Time with Today's Date in MomentJS
DESCRIPTION: Demonstrates creating moment objects with specific time components while defaulting to today's date. Shows various ways to specify hours, minutes, seconds, and milliseconds.

LANGUAGE: javascript
CODE:
moment(5, "HH");  // today, 5:00:00.000
moment({hour: 5});  // today, 5:00:00.000
moment({hour: 5, minute: 10});  // today, 5:10.00.000
moment({hour: 5, minute: 10, seconds: 20});  // today, 5:10.20.000
moment({hour: 5, minute: 10, seconds: 20, milliseconds: 300});  // today, 5:10.20.300

----------------------------------------

TITLE: Checking if Date is After Another Date in MomentJS
DESCRIPTION: This code snippet demonstrates the use of the isAfter() method to determine if one date is after another. It compares the current date with January 1st, 2012.

LANGUAGE: javascript
CODE:
moment().isAfter('2012-01-01');

----------------------------------------

TITLE: Setting ISO Weekday Using Day Names in MomentJS
DESCRIPTION: Shows how to set the ISO weekday using day names instead of numbers. The day names are parsed according to the moment's current locale settings.

LANGUAGE: javascript
CODE:
moment().isoWeekday("Sunday");
moment().isoWeekday("Monday");

----------------------------------------

TITLE: Setting ISO Weekday Using Numbers in MomentJS
DESCRIPTION: Demonstrates setting the ISO weekday using numeric values where 1 represents Monday and 7 represents Sunday. The method accepts numbers and will adjust the date accordingly if the range is exceeded.

LANGUAGE: javascript
CODE:
moment().isoWeekday(1); // Monday
moment().isoWeekday(7); // Sunday

----------------------------------------

TITLE: Handling Ambiguous Timezone Offsets during DST Transition in JavaScript with MomentJS
DESCRIPTION: This code snippet shows how to handle ambiguous timezone offsets during daylight saving time transitions. It demonstrates parsing offsets for timestamps just before and after the DST change in New York.

LANGUAGE: javascript
CODE:
var zone = moment.tz.zone('America/New_York');
zone.parse(Date.UTC(2012, 2, 11, 1, 59)); // 300
zone.parse(Date.UTC(2012, 2, 11, 2, 0)); // 240

----------------------------------------

TITLE: Getting and Setting Week of Year in Moment.js
DESCRIPTION: These methods allow getting or setting the week of the year in Moment.js. The week() and weeks() methods are interchangeable. When setting the week, it returns a number representing the week of the year.

LANGUAGE: javascript
CODE:
moment().week(Number);
moment().week(); // Number
moment().weeks(Number);
moment().weeks(); // Number

----------------------------------------

TITLE: Getting and Setting ISO Week Number in MomentJS
DESCRIPTION: Methods to get or set the ISO week of the year. The isoWeek() and isoWeeks() functions follow the ISO week date standard while preserving the day of the week when setting values.

LANGUAGE: javascript
CODE:
moment().isoWeek(Number);
moment().isoWeek(); // Number
moment().isoWeeks(Number);
moment().isoWeeks(); // Number

----------------------------------------

TITLE: Parsing Timezone Offset for Specific Date in JavaScript using MomentJS
DESCRIPTION: This snippet demonstrates how to parse a timezone offset for a specific date and time in New York using MomentJS. It creates a UTC timestamp and uses the zone.parse() method to determine the offset.

LANGUAGE: javascript
CODE:
var zone = moment.tz.zone('America/New_York');
zone.parse(Date.UTC(2012, 2, 19, 8, 30)); // 240

----------------------------------------

TITLE: Getting and Setting Week Year in MomentJS
DESCRIPTION: The weekYear() method can be used in two ways: as a getter that returns the current week-year as a number, or as a setter that accepts a number parameter to set the week-year. The week-year may differ from the calendar year depending on locale settings and the first day of the week.

LANGUAGE: javascript
CODE:
moment().weekYear(Number);

LANGUAGE: javascript
CODE:
moment().weekYear(); // Number

----------------------------------------

TITLE: Retrieving Weeks In Year using Moment.js
DESCRIPTION: Gets the number of weeks in the current year based on locale settings. The result depends on the locale's week numbering system and week start day.

LANGUAGE: javascript
CODE:
moment().weeksInYear();

----------------------------------------

TITLE: Converting Fixed Offset to Local Time in MomentJS
DESCRIPTION: Shows how to convert a moment with a fixed timezone offset to local time. The example parses a timezone-aware string and converts it to local time.

LANGUAGE: javascript
CODE:
moment.parseZone('2016-05-03T22:15:01+02:00').local().format(); // "2016-05-03T15:15:01-05:00"

----------------------------------------

TITLE: Comparing Moment Instances with moment.max() in JavaScript
DESCRIPTION: Demonstrates how to use moment.max() to compare multiple moment instances and return the most future date. It also shows how to use it with an array of moments created from a list of friend's birthdays.

LANGUAGE: javascript
CODE:
var a = moment().subtract(1, 'day');
var b = moment().add(1, 'day');
moment.max(a, b);  // b

var friends = fetchFriends(); /* [{name: 'Dan', birthday: '11.12.1977'}, {name: 'Mary', birthday: '11.12.1986'}, {name: 'Stephan', birthday: '11.01.1993'}]*/
var friendsBirthDays = friends.map(function(friend){
    return moment(friend.birthday, 'DD.MM.YYYY');
});
moment.max(friendsBirthDays);  // '11.01.1993'

----------------------------------------

TITLE: Adding Multiple Time Units in MomentJS
DESCRIPTION: Illustrates two ways to add multiple time units: chaining add() calls and using an object literal.

LANGUAGE: javascript
CODE:
moment().add(7, 'days').add(1, 'months'); // with chaining
moment().add({days:7,months:1}); // with object literal

----------------------------------------

TITLE: Basic moment.min() Usage - JavaScript
DESCRIPTION: Demonstrates comparing two moment instances using moment.min() to find the earliest date. Shows both direct argument and array syntax.

LANGUAGE: javascript
CODE:
var a = moment().subtract(1, 'day');
var b = moment().add(1, 'day');
moment.min(a, b);  // a
moment.min([a, b]); // a

----------------------------------------

TITLE: Handling Month End Dates in MomentJS
DESCRIPTION: Shows how MomentJS handles adding months to dates that exceed the number of days in the resulting month.

LANGUAGE: javascript
CODE:
moment([2010, 0, 31]);                  // January 31
moment([2010, 0, 31]).add(1, 'months'); // February 28

----------------------------------------

TITLE: Handling Daylight Saving Time When Adding Days in MomentJS
DESCRIPTION: Shows how adding days maintains the same hour across daylight saving time changes.

LANGUAGE: javascript
CODE:
var m = moment(new Date(2011, 2, 12, 5, 0, 0)); // the day before DST in the US
m.hours(); // 5
m.add(1, 'days').hours(); // 5

----------------------------------------

TITLE: Using Durations to Add Time in MomentJS
DESCRIPTION: Demonstrates how to use a duration object to add time to a moment.

LANGUAGE: javascript
CODE:
var duration = moment.duration({'days' : 1});
moment([2012, 0, 31]).add(duration); // February 1

----------------------------------------

TITLE: Multiple Input Formats for MomentJS Maximum Function
DESCRIPTION: Shows various ways to pass different date formats to the max() function, including moment objects, date strings, formatted strings, and JavaScript Date objects.

LANGUAGE: javascript
CODE:
moment().max(moment().add(1, 'd'));
moment().max("2013-04-20T20:00:00+0800");
moment().max("Jan 1 2001", "MMM D YYYY");
moment().max(new Date(2012, 1, 8));

----------------------------------------

TITLE: Rounding Behavior with Decimal Values in Moment.js Subtract Method (JavaScript)
DESCRIPTION: Illustrates how Moment.js rounds decimal values when subtracting months and years. Decimal values are rounded to the nearest integer for days and months, while weeks, quarters, and years are converted to days or months before rounding.

LANGUAGE: javascript
CODE:
moment().subtract(1.5, 'months') == moment().subtract(2, 'months')
moment().subtract(.7, 'years') == moment().subtract(8, 'months') //.7*12 = 8.4, rounded to 8

----------------------------------------

TITLE: Changing Timezone Without Altering Time in Moment.js
DESCRIPTION: Illustrates how to use the UTC method with a boolean parameter to change the timezone to UTC without modifying the actual time value. This is useful for preserving the original time while changing the timezone context.

LANGUAGE: javascript
CODE:
moment.parseZone('2016-05-03T22:15:01+02:00').utc(true).format(); //"2016-05-03T22:15:01Z"

----------------------------------------

TITLE: Equivalent Hour Start Operation in MomentJS
DESCRIPTION: Demonstrates the equivalent manual operation for setting a moment to the start of an hour by zeroing out minutes, seconds, and milliseconds.

LANGUAGE: javascript
CODE:
moment().startOf('hour');
moment().minutes(0).seconds(0).milliseconds(0)

----------------------------------------

TITLE: Getting Time Zone Offset in Moment.js
DESCRIPTION: Retrieves the time zone offset in minutes from GMT

LANGUAGE: javascript
CODE:
moment().zone(); // (60, 120, 240, etc.)

----------------------------------------

TITLE: Setting Minimum Date in MomentJS (JavaScript)
DESCRIPTION: Demonstrates how to set a minimum date for a moment object using the deprecated 'min' function. It accepts various input formats including Moment objects, strings, numbers, Date objects, or arrays.

LANGUAGE: javascript
CODE:
moment().min("2013-04-20T20:00:00+0800");

----------------------------------------

TITLE: Time Difference Without Suffix in MomentJS
DESCRIPTION: Demonstrates how to get time difference without the relative suffix by passing true as the second parameter.

LANGUAGE: javascript
CODE:
var start = moment([2007, 0, 5]);
var end   = moment([2007, 0, 10]);
end.from(start);       // "in 5 days"
end.from(start, true); // "5 days"

----------------------------------------

TITLE: Preserving Time During Timezone Conversion in MomentJS
DESCRIPTION: Demonstrates using local(true) to change only the timezone while preserving the current time. This is useful when you want to maintain the same clock time while switching timezone context.

LANGUAGE: javascript
CODE:
moment.parseZone('2016-05-03T22:15:01+02:00').local(true).format(); //"2016-05-03T22:15:01-05:00"

----------------------------------------

TITLE: Basic Time to Now Usage in Moment.js
DESCRIPTION: Demonstrates the basic usage of toNow() method to display relative time from a date to the current moment. Returns a string with a 'in' prefix by default.

LANGUAGE: javascript
CODE:
moment([2007, 0, 29]).toNow(); // in 4 years

----------------------------------------

TITLE: Setting UTC Offset from ISO8601 String in Moment.js
DESCRIPTION: Demonstrates setting the UTC offset by passing an ISO8601 formatted string. The function extracts the offset information from the string.

LANGUAGE: javascript
CODE:
moment().utcOffset("2013-03-07T07:00:00+08:00");

----------------------------------------

TITLE: Comparing Date Math vs Time Math with Daylight Savings
DESCRIPTION: Demonstrates how adding 1 day vs 24 hours can yield different results due to daylight savings time transitions.

LANGUAGE: javascript
CODE:
//date math
moment('2016-03-12 13:00:00').add(1, 'day').format('LLL')
"March 13, 2016 1:00 PM"
//time math
moment('2016-03-12 13:00:00').add(24, 'hours').format('LLL')
"March 13, 2016 2:00 PM"

----------------------------------------

TITLE: Setting Time Zone Offset with Hours in Moment.js
DESCRIPTION: Demonstrates equivalent ways to set timezone offset using hours or minutes when value is between -16 and 16

LANGUAGE: javascript
CODE:
// these are equivalent
moment().zone(480);
moment().zone(8);

----------------------------------------

TITLE: Formatting Moment Objects in JavaScript
DESCRIPTION: These methods are recommended for outputting the value of a Moment object. They provide the correct representation of the date and time, accounting for any timezone adjustments or epoch shifting.

LANGUAGE: javascript
CODE:
moment.format()
moment.toString()
moment.toISOString()

----------------------------------------

TITLE: Using Different Input Types with Moment.js 'to' Method
DESCRIPTION: Shows various ways to specify the target time for the 'to' method, including Moment objects, arrays, Date objects, and strings.

LANGUAGE: javascript
CODE:
var a = moment([2007, 0, 28]);
var b = moment([2007, 0, 29]);
a.to(b);                     // "in a day"
a.to([2007, 0, 29]);         // "in a day"
a.to(new Date(2007, 0, 29)); // "in a day"
a.to("2007-01-29");          // "in a day"

----------------------------------------

TITLE: Converting Moment to Native Date in JavaScript
DESCRIPTION: This method is used to retrieve a native JavaScript Date object from a Moment object. It returns a properly shifted date, suitable for interaction with third-party APIs.

LANGUAGE: javascript
CODE:
moment.toDate()

----------------------------------------

TITLE: Customizing Output of Moment.js 'to' Method
DESCRIPTION: Demonstrates how to use the second parameter of the 'to' method to return the time difference without a suffix, useful for creating human-readable durations.

LANGUAGE: javascript
CODE:
var start = moment([2007, 0, 5]);
var end   = moment([2007, 0, 10]);
end.to(start);       // "5 days ago"
end.to(start, true); // "5 days"

----------------------------------------

TITLE: Supported ISO 8601 Date Formats in MomentJS
DESCRIPTION: This code block lists various ISO 8601 date formats supported by MomentJS. It includes examples of calendar dates, week dates, and different time part representations.

LANGUAGE: plaintext
CODE:
2013-02-08               # A calendar date part
2013-W06-5               # A week date part
2013-02-08T09            # An hour time part separated by a T
2013-02-08 09            # An hour time part separated by a space
2013-02-08 09:30:26      # An hour, minute, and second time part
2013-02-08 09+07:00      # +-HH:mm

----------------------------------------

TITLE: Checking if Date is Same or Before Another Date in MomentJS
DESCRIPTION: This example shows how to use the isSameOrBefore() method to check if a date is the same as or before another date. It compares the current date with January 1st, 2012.

LANGUAGE: javascript
CODE:
moment().isSameOrBefore('2012-01-01');

----------------------------------------

TITLE: Parsing Date String in Strict Mode with MomentJS (JavaScript)
DESCRIPTION: This snippet demonstrates how strict mode in MomentJS handles a date string that doesn't match the expected format. It results in an 'Invalid date' when the input doesn't match the specified format.

LANGUAGE: javascript
CODE:
moment('01/12/2016', 'YYYY-MM-DD', true).format()
"Invalid date"

----------------------------------------

TITLE: Checking if Date is Between Two Dates in MomentJS
DESCRIPTION: This snippet shows how to use the isBetween() method to check if a date falls between two other dates. It checks if the current date is between January 1st, 2012 and January 1st, 2013.

LANGUAGE: javascript
CODE:
moment().isBetween('2012-01-01', '2013-01-01');

----------------------------------------

TITLE: Format Selection Priority Examples in MomentJS
DESCRIPTION: Shows how MomentJS selects between multiple format options based on validity, strictness, and array order. Demonstrates format selection behavior with different date patterns.

LANGUAGE: javascript
CODE:
moment("29-06-1995", ["MM-DD-YYYY", "DD-MM", "DD-MM-YYYY"]); // uses the last format
moment("05-06-1995", ["MM-DD-YYYY", "DD-MM-YYYY"]);          // uses the first format

----------------------------------------

TITLE: Locale and Strict Parsing with Multiple Formats in MomentJS
DESCRIPTION: Examples of using locale and strict parsing options when parsing dates with multiple formats. Shows various combinations of locale and strictness parameters.

LANGUAGE: javascript
CODE:
moment("29-06-1995", ["MM-DD-YYYY", "DD-MM-YYYY"], 'fr');       // uses 'fr' locale
moment("29-06-1995", ["MM-DD-YYYY", "DD-MM-YYYY"], true);       // uses strict parsing
moment("05-06-1995", ["MM-DD-YYYY", "DD-MM-YYYY"], 'fr', true); // uses 'fr' locale and strict parsing

----------------------------------------

TITLE: Customizing Default Moment.js Format
DESCRIPTION: Demonstrates how to modify the default format in Moment.js and its behavior with parsing dates. Shows limitations when changing the default format.

LANGUAGE: javascript
CODE:
moment.defaultFormat = "DD.MM.YYYY HH:mm";
// parse with .toDate()
moment('20.07.2018 09:19').toDate() // Invalid date
// format the date string with the new defaultFormat then parse
moment('20.07.2018 09:19', moment.defaultFormat).toDate() // Fri Jul 20 2018 09:19:00 GMT+0300

----------------------------------------

TITLE: Using a Callback Function for Minimal Weekday Abbreviations in Moment.js
DESCRIPTION: This snippet demonstrates how to use a callback function to dynamically generate minimal weekday abbreviations in Moment.js. The function receives the moment object and format string as parameters, allowing for more flexible abbreviation generation based on context.

LANGUAGE: javascript
CODE:
moment.updateLocale('en', {
    weekdaysMin : function (momentToFormat, format) {
        return weekdaysMin[momentToFormat.day()];
    }
});

----------------------------------------

TITLE: Webpack Configuration for Moment Timezone Data Optimization
DESCRIPTION: Shows how to configure webpack.config.js to optimize moment-timezone bundle size using moment-timezone-data-webpack-plugin. Includes examples of filtering specific zones and limiting date ranges.

LANGUAGE: javascript
CODE:
// webpack.config.js
const MomentTimezoneDataPlugin = require('moment-timezone-data-webpack-plugin');
const currentYear = new Date().getFullYear();

module.exports = {
    plugins: [
        // To include only specific zones, use the matchZones option
        new MomentTimezoneDataPlugin({
            matchZones: /^America/
        }),

        // To keep all zones but limit data to specific years, use the year range options
        new MomentTimezoneDataPlugin({
            startYear: currentYear - 5,
            endYear: currentYear + 5,
        }),
    ],
};