TITLE: Creating a Test List File for Controlled Test Order (JavaScript)
DESCRIPTION: This code demonstrates how to create a test list file to control the order of test execution when parallelism is disabled.

LANGUAGE: javascript
CODE:
import { test } from '@playwright/test';
import featureBTests from './feature-b.spec.ts';
import featureATests from './feature-a.spec.ts';

test.describe(featureBTests);
test.describe(featureATests);

----------------------------------------

TITLE: Generating Tests with Playwright Codegen
DESCRIPTION: Command to run Playwright's codegen tool to generate tests for a specific URL.

LANGUAGE: bash
CODE:
npx playwright codegen demo.playwright.dev/todomvc

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="codegen demo.playwright.dev/todomvc"

LANGUAGE: bash
CODE:
playwright codegen demo.playwright.dev/todomvc

LANGUAGE: bash
CODE:
pwsh bin/Debug/netX/playwright.ps1 codegen demo.playwright.dev/todomvc

----------------------------------------

TITLE: Basic Assertion in Playwright
DESCRIPTION: Demonstrates a simple assertion using the expect function in Playwright.

LANGUAGE: javascript
CODE:
expect(success).toBeTruthy();

----------------------------------------

TITLE: Basic Login Form Interaction Example
DESCRIPTION: Shows how to locate and interact with a login form using role-based and label-based locators.

LANGUAGE: javascript
CODE:
await page.getByLabel('User Name').fill('John');

await page.getByLabel('Password').fill('secret-password');

await page.getByRole('button', { name: 'Sign in' }).click();

await expect(page.getByText('Welcome, John!')).toBeVisible();

LANGUAGE: python
CODE:
await page.get_by_label("User Name").fill("John")

await page.get_by_label("Password").fill("secret-password")

await page.get_by_role("button", name="Sign in").click()

await expect(page.get_by_text("Welcome, John!")).to_be_visible()

LANGUAGE: java
CODE:
page.getByLabel("User Name").fill("John");

page.getByLabel("Password").fill("secret-password");

page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Sign in")).click();

assertThat(page.getByText("Welcome, John!")).isVisible();

----------------------------------------

TITLE: Configuring Playwright for Global Setup with Authentication
DESCRIPTION: Shows how to configure Playwright to use global setup with authentication, including base URL and storage state settings.

LANGUAGE: typescript
CODE:
import { defineConfig } from '@playwright/test';
export default defineConfig({
  globalSetup: require.resolve('./global-setup'),
  use: {
    baseURL: 'http://localhost:3000/',
    storageState: 'state.json',
  },
});

----------------------------------------

TITLE: Basic WebKit Screenshot Example
DESCRIPTION: Simple script demonstrating how to launch WebKit browser, navigate to a page and take a screenshot using Playwright library.

LANGUAGE: javascript
CODE:
const { webkit } = require('playwright');

(async () => {
  const browser = await webkit.launch();
  const page = await browser.newPage();
  await page.goto('https://playwright.dev/');
  await page.screenshot({ path: `example.png` });
  await browser.close();
})();

----------------------------------------

TITLE: Making Assertions in Playwright Tests
DESCRIPTION: Shows how to use Playwright's assertion library to make both synchronous and asynchronous assertions. The example includes a generic assertion and an async assertion for checking page title.

LANGUAGE: javascript
CODE:
expect(success).toBeTruthy();

await expect(page).toHaveTitle(/Playwright/);

----------------------------------------

TITLE: Writing Basic Playwright Tests in JavaScript
DESCRIPTION: Demonstrates how to write simple Playwright tests, including navigation, element interaction, and assertions. The example shows two tests: one checking the page title and another interacting with a link and verifying content.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('has title', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Expect a title "to contain" a substring.
  await expect(page).toHaveTitle(/Playwright/);
});

test('get started link', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Click the get started link.
  await page.getByRole('link', { name: 'Get started' }).click();

  // Expects page to have a heading with the name of Installation.
  await expect(page.getByRole('heading', { name: 'Installation' })).toBeVisible();
});

----------------------------------------

TITLE: Modifying API Response in Playwright
DESCRIPTION: Shows how to intercept an API request, fetch the original response, modify it by adding new data, and fulfill the route with the modified response.

LANGUAGE: javascript
CODE:
test('gets the json from api and adds a new fruit', async ({ page }) => {
  await page.route('*/**/api/v1/fruits', async route => {
    const response = await route.fetch();
    const json = await response.json();
    json.push({ name: 'Loquat', id: 100 });
    await route.fulfill({ response, json });
  });
  await page.goto('https://demo.playwright.dev/api-mocking');
  await expect(page.getByText('Loquat', { exact: true })).toBeVisible();
});

----------------------------------------

TITLE: Launching Browser with Playwright - Multiple Languages
DESCRIPTION: Examples of launching a browser instance and navigating to a webpage using Playwright in different programming languages. Shows the basic setup pattern used across all Playwright implementations.

LANGUAGE: javascript
CODE:
const { chromium, firefox, webkit } = require('playwright');

(async () => {
  const browser = await chromium.launch();  // Or 'firefox' or 'webkit'.
  const page = await browser.newPage();
  await page.goto('http://example.com');
  // other actions...
  await browser.close();
})();

LANGUAGE: java
CODE:
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType chromium = playwright.chromium();
      Browser browser = chromium.launch();
      Page page = browser.newPage();
      page.navigate("http://example.com");
      // other actions...
      browser.close();
    }
  }
}

LANGUAGE: python
CODE:
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    chromium = playwright.chromium # or "firefox" or "webkit".
    browser = await chromium.launch()
    page = await browser.new_page()
    await page.goto("http://example.com")
    # other actions...
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

----------------------------------------

TITLE: Basic Playwright Configuration Setup
DESCRIPTION: Sets up basic configuration for Playwright tests including parallel execution, retries, reporters, and browser projects. Demonstrates common settings like test directory, parallel execution, CI-specific configurations, and web server setup.

LANGUAGE: javascript
CODE:
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  // Look for test files in the "tests" directory, relative to this configuration file.
  testDir: 'tests',

  // Run all tests in parallel.
  fullyParallel: true,

  // Fail the build on CI if you accidentally left test.only in the source code.
  forbidOnly: !!process.env.CI,

  // Retry on CI only.
  retries: process.env.CI ? 2 : 0,

  // Opt out of parallel tests on CI.
  workers: process.env.CI ? 1 : undefined,

  // Reporter to use
  reporter: 'html',

  use: {
    // Base URL to use in actions like `await page.goto('/')`.
    baseURL: 'http://localhost:3000',

    // Collect trace when retrying the failed test.
    trace: 'on-first-retry',
  },
  // Configure projects for major browsers.
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
  ],
  // Run your local dev server before starting the tests.
  webServer: {
    command: 'npm run start',
    url: 'http://localhost:3000',
    reuseExistingServer: !process.env.CI,
  },
});

----------------------------------------

TITLE: Asserting Element Visibility with Playwright in Java
DESCRIPTION: Shows how to assert the visibility of an element using a text locator.

LANGUAGE: java
CODE:
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

assertThat(page.locator("text=Installation")).isVisible();

----------------------------------------

TITLE: Creating Multiple Browser Contexts in a Single Test (Multi-language)
DESCRIPTION: Demonstrates how to create and use multiple browser contexts within a single test scenario, which is useful for testing multi-user functionality. Examples are provided for JavaScript (test and library), Java, Python (async and sync), and C#.

LANGUAGE: javascript
CODE:
import { test } from '@playwright/test';

test('admin and user', async ({ browser }) => {
  // Create two isolated browser contexts
  const adminContext = await browser.newContext();
  const userContext = await browser.newContext();

  // Create pages and interact with contexts independently
  const adminPage = await adminContext.newPage();
  const userPage = await userContext.newPage();
});

LANGUAGE: javascript
CODE:
const { chromium } = require('playwright');

// Create a Chromium browser instance
const browser = await chromium.launch();

// Create two isolated browser contexts
const userContext = await browser.newContext();
const adminContext = await browser.newContext();

// Create pages and interact with contexts independently
const adminPage = await adminContext.newPage();
const userPage = await userContext.newPage();

LANGUAGE: java
CODE:
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType chromium = playwright.chromium();
      // Create a Chromium browser instance
      Browser browser = chromium.launch();
      // Create two isolated browser contexts
      BrowserContext userContext = browser.newContext();
      BrowserContext adminContext = browser.newContext();
      // Create pages and interact with contexts independently
    }
  }
}

LANGUAGE: python
CODE:
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    # create a chromium browser instance
    chromium = playwright.chromium
    browser = await chromium.launch()

    # create two isolated browser contexts
    user_context = await browser.new_context()
    admin_context = await browser.new_context()

    # create pages and interact with contexts independently

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    # create a chromium browser instance
    chromium = playwright.chromium
    browser = chromium.launch()

    # create two isolated browser contexts
    user_context = browser.new_context()
    admin_context = browser.new_context()

    # create pages and interact with contexts independently

with sync_playwright() as playwright:
    run(playwright)

LANGUAGE: csharp
CODE:
using Microsoft.Playwright;
using System.Threading.Tasks;

class Program
{
    public static async Task Main()
    {
        using var playwright = await Playwright.CreateAsync();
        // Create a Chromium browser instance
        await using var browser = await playwright.Chromium.LaunchAsync();
        await using var userContext = await browser.NewContextAsync();
        await using var adminContext = await browser.NewContextAsync();
        // Create pages and interact with contexts independently.
    }
}

----------------------------------------

TITLE: Implementing Global Setup with Authentication in Playwright
DESCRIPTION: Demonstrates how to implement a global setup function that performs authentication and stores the session state for reuse in tests.

LANGUAGE: typescript
CODE:
import { chromium, type FullConfig } from '@playwright/test';

async function globalSetup(config: FullConfig) {
  const { baseURL, storageState } = config.projects[0].use;
  const browser = await chromium.launch();
  const page = await browser.newPage();
  await page.goto(baseURL!);
  await page.getByLabel('User Name').fill('user');
  await page.getByLabel('Password').fill('password');
  await page.getByText('Sign in').click();
  await page.context().storageState({ path: storageState as string });
  await browser.close();
}

export default globalSetup;

----------------------------------------

TITLE: Implementing Test Isolation in Playwright
DESCRIPTION: Demonstrates how Playwright achieves test isolation using browser contexts. Each test receives a fresh page instance, ensuring that tests don't interfere with each other.

LANGUAGE: javascript
CODE:
import { test } from '@playwright/test';

test('example test', async ({ page }) => {
  // "page" belongs to an isolated BrowserContext, created for this specific test.
});

test('another test', async ({ page }) => {
  // "page" in this second test is completely isolated from the first test.
});

----------------------------------------

TITLE: Configuring Workers in Playwright Config (JavaScript)
DESCRIPTION: This snippet shows how to limit the number of workers in the Playwright configuration file, using different settings for CI and local environments.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // Limit the number of workers on CI, use default locally
  workers: process.env.CI ? 2 : undefined,
});

----------------------------------------

TITLE: Capturing Basic Screenshot in Playwright
DESCRIPTION: This snippet shows how to capture a basic screenshot and save it to a file using Playwright. It demonstrates the simplest form of screenshot capture across different programming languages.

LANGUAGE: javascript
CODE:
await page.screenshot({ path: 'screenshot.png' });

LANGUAGE: python
CODE:
await page.screenshot(path="screenshot.png")

LANGUAGE: java
CODE:
page.screenshot(new Page.ScreenshotOptions()
      .setPath(Paths.get("screenshot.png")));

LANGUAGE: csharp
CODE:
await Page.ScreenshotAsync(new()
{
    Path = "screenshot.png",
});

----------------------------------------

TITLE: Custom Expect Message in Playwright
DESCRIPTION: Shows how to add a custom message to an expect assertion for better context in test reports.

LANGUAGE: javascript
CODE:
await expect(page.getByText('Name'), 'should be logged in').toBeVisible();

----------------------------------------

TITLE: Configuring Playwright Test with TestConfig
DESCRIPTION: Example of using TestConfig to set basic options like timeout, reporter, and test directory.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  timeout: 30000,
  globalTimeout: 600000,
  reporter: 'list',
  testDir: './tests',
});

----------------------------------------

TITLE: Monitoring Network Events in Playwright
DESCRIPTION: Shows how to subscribe to and monitor network requests and responses in Playwright.

LANGUAGE: javascript
CODE:
// Subscribe to 'request' and 'response' events.
page.on('request', request => console.log('>>', request.method(), request.url()));
page.on('response', response => console.log('<<', response.status(), response.url()));

await page.goto('https://example.com');

----------------------------------------

TITLE: Mocking API Request Response in Playwright
DESCRIPTION: Demonstrates how to intercept and mock API responses by fulfilling routes with custom JSON data. The example mocks a fruit API response and verifies the mocked data appears on the page.

LANGUAGE: javascript
CODE:
test("mocks a fruit and doesn't call api", async ({ page }) => {
  await page.route('*/**/api/v1/fruits', async route => {
    const json = [{ name: 'Strawberry', id: 21 }];
    await route.fulfill({ json });
  });
  await page.goto('https://demo.playwright.dev/api-mocking');
  await expect(page.getByText('Strawberry')).toBeVisible();
});

----------------------------------------

TITLE: Setup and Teardown for Playwright API Tests in JavaScript
DESCRIPTION: This code snippet shows how to use beforeAll and afterAll hooks to set up and tear down a test environment for API testing with Playwright.

LANGUAGE: javascript
CODE:
test.beforeAll(async ({ request }) => {
  // Create a new repository
  const response = await request.post('/user/repos', {
    data: {
      name: REPO
    }
  });
  expect(response.ok()).toBeTruthy();
});

test.afterAll(async ({ request }) => {
  // Delete the repository
  const response = await request.delete(`/repos/${USER}/${REPO}`);
  expect(response.ok()).toBeTruthy();
});

----------------------------------------

TITLE: Basic Playwright Usage in Java
DESCRIPTION: Demonstrates how to create a Playwright instance, launch a browser, navigate to a page, and print its title. This snippet uses Chromium as the browser.

LANGUAGE: java
CODE:
package org.example;

import com.microsoft.playwright.*;

public class App {
    public static void main(String[] args) {
        try (Playwright playwright = Playwright.create()) {
            Browser browser = playwright.chromium().launch();
            Page page = browser.newPage();
            page.navigate("https://playwright.dev");
            System.out.println(page.title());
        }
    }
}

----------------------------------------

TITLE: Configuring Playwright for API Testing in TypeScript
DESCRIPTION: This snippet demonstrates how to configure Playwright for API testing, including setting the base URL and authorization headers.

LANGUAGE: typescript
CODE:
import { defineConfig } from '@playwright/test';
export default defineConfig({
  use: {
    // All requests we send go to this API endpoint.
    baseURL: 'https://api.github.com',
    extraHTTPHeaders: {
      // We set this header per GitHub guidelines.
      'Accept': 'application/vnd.github.v3+json',
      // Add authorization token to all requests.
      // Assuming personal access token available in the environment.
      'Authorization': `token ${process.env.API_TOKEN}`,
    },
  }
});

----------------------------------------

TITLE: Debugging Playwright Tests
DESCRIPTION: Debug tests using the Playwright Inspector with various debugging options

LANGUAGE: bash
CODE:
npx playwright test --debug

LANGUAGE: bash
CODE:
npx playwright test example.spec.ts --debug

LANGUAGE: bash
CODE:
npx playwright test example.spec.ts:10 --debug

----------------------------------------

TITLE: Showing Playwright Test Reports
DESCRIPTION: Commands to display HTML test reports using different package managers.

LANGUAGE: bash
CODE:
npx playwright show-report

LANGUAGE: bash
CODE:
yarn playwright show-report

LANGUAGE: bash
CODE:
pnpm exec playwright show-report

----------------------------------------

TITLE: Test Isolation with BeforeEach Hook in Playwright
DESCRIPTION: Example showing how to use beforeEach hook to set up test isolation and handle authentication before each test run.

LANGUAGE: javascript
CODE:
import { test } from '@playwright/test';

test.beforeEach(async ({ page }) => {
  // Runs before each test and signs in each page.
  await page.goto('https://github.com/login');
  await page.getByLabel('Username or email address').fill('username');
  await page.getByLabel('Password').fill('password');
  await page.getByRole('button', { name: 'Sign in' }).click();
});

test('first', async ({ page }) => {
  // page is signed in.
});

test('second', async ({ page }) => {
  // page is signed in.
});

----------------------------------------

TITLE: Async Assertion with Locator in Playwright
DESCRIPTION: Shows an asynchronous assertion using a locator to check text content.

LANGUAGE: javascript
CODE:
await expect(page.getByTestId('status')).toHaveText('Submitted');

----------------------------------------

TITLE: Basic Playwright Library Usage in TypeScript
DESCRIPTION: Example showing how to launch Chromium browser, create a context with iPhone 11 device settings, navigate to a page and check its title using the Playwright library directly.

LANGUAGE: typescript
CODE:
import { chromium, devices } from 'playwright';
import assert from 'node:assert';

(async () => {
  // Setup
  const browser = await chromium.launch();
  const context = await browser.newContext(devices['iPhone 11']);
  const page = await context.newPage();

  // The actual interesting bit
  await context.route('**.jpg', route => route.abort());
  await page.goto('https://example.com/');

  assert(await page.title() === 'Example Domain');

  // Teardown
  await context.close();
  await browser.close();
})();

----------------------------------------

TITLE: Multiple Signed-in Roles Setup (JavaScript)
DESCRIPTION: Sets up authentication for multiple roles (admin and user) in separate files.

LANGUAGE: javascript
CODE:
import { test as setup, expect } from '@playwright/test';

const adminFile = 'playwright/.auth/admin.json';

setup('authenticate as admin', async ({ page }) => {
  await page.goto('https://github.com/login');
  await page.getByLabel('Username or email address').fill('admin');
  await page.getByLabel('Password').fill('password');
  await page.getByRole('button', { name: 'Sign in' }).click();
  await page.waitForURL('https://github.com/');
  await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();

  await page.context().storageState({ path: adminFile });
});

const userFile = 'playwright/.auth/user.json';

setup('authenticate as user', async ({ page }) => {
  await page.goto('https://github.com/login');
  await page.getByLabel('Username or email address').fill('user');
  await page.getByLabel('Password').fill('password');
  await page.getByRole('button', { name: 'Sign in' }).click();
  await page.waitForURL('https://github.com/');
  await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();

  await page.context().storageState({ path: userFile });
});

----------------------------------------

TITLE: Configuring Playwright for GitHub API Testing in Java
DESCRIPTION: Sets up the Playwright environment for GitHub API testing, including creating a Playwright instance, configuring API request context with headers and base URL, and defining setup and teardown methods.

LANGUAGE: java
CODE:
package org.example;

import com.microsoft.playwright.APIRequest;
import com.microsoft.playwright.APIRequestContext;
import com.microsoft.playwright.Playwright;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.TestInstance;

import java.util.HashMap;
import java.util.Map;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class TestGitHubAPI {
  private static final String API_TOKEN = System.getenv("GITHUB_API_TOKEN");

  private Playwright playwright;
  private APIRequestContext request;

  void createPlaywright() {
    playwright = Playwright.create();
  }

  void createAPIRequestContext() {
    Map<String, String> headers = new HashMap<>();
    // We set this header per GitHub guidelines.
    headers.put("Accept", "application/vnd.github.v3+json");
    // Add authorization token to all requests.
    // Assuming personal access token available in the environment.
    headers.put("Authorization", "token " + API_TOKEN);

    request = playwright.request().newContext(new APIRequest.NewContextOptions()
      // All requests we send go to this API endpoint.
      .setBaseURL("https://api.github.com")
      .setExtraHTTPHeaders(headers));
  }

  @BeforeAll
  void beforeAll() {
    createPlaywright();
    createAPIRequestContext();
  }

  void disposeAPIRequestContext() {
    if (request != null) {
      request.dispose();
      request = null;
    }
  }

  void closePlaywright() {
    if (playwright != null) {
      playwright.close();
      playwright = null;
    }
  }

  @AfterAll
  void afterAll() {
    disposeAPIRequestContext();
    closePlaywright();
  }
}

----------------------------------------

TITLE: Writing API Tests with Playwright in JavaScript
DESCRIPTION: This snippet demonstrates how to write API tests using Playwright, including creating and verifying issues in a GitHub repository.

LANGUAGE: javascript
CODE:
const REPO = 'test-repo-1';
const USER = 'github-username';

test('should create a bug report', async ({ request }) => {
  const newIssue = await request.post(`/repos/${USER}/${REPO}/issues`, {
    data: {
      title: '[Bug] report 1',
      body: 'Bug description',
    }
  });
  expect(newIssue.ok()).toBeTruthy();

  const issues = await request.get(`/repos/${USER}/${REPO}/issues`);
  expect(issues.ok()).toBeTruthy();
  expect(await issues.json()).toContainEqual(expect.objectContaining({
    title: '[Bug] report 1',
    body: 'Bug description'
  }));
});

test('should create a feature request', async ({ request }) => {
  const newIssue = await request.post(`/repos/${USER}/${REPO}/issues`, {
    data: {
      title: '[Feature] request 1',
      body: 'Feature description',
    }
  });
  expect(newIssue.ok()).toBeTruthy();

  const issues = await request.get(`/repos/${USER}/${REPO}/issues`);
  expect(issues.ok()).toBeTruthy();
  expect(await issues.json()).toContainEqual(expect.objectContaining({
    title: '[Feature] request 1',
    body: 'Feature description'
  }));
});

----------------------------------------

TITLE: Basic Playwright Test with NUnit
DESCRIPTION: Example showing basic test structure using NUnit framework with Playwright. Demonstrates navigation, clicking elements, and assertions.

LANGUAGE: csharp
CODE:
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Microsoft.Playwright;
using Microsoft.Playwright.NUnit;
using NUnit.Framework;

namespace PlaywrightTests;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class ExampleTest : PageTest
{
    [Test]
    public async Task HasTitle()
    {
        await Page.GotoAsync("https://playwright.dev");

        // Expect a title "to contain" a substring.
        await Expect(Page).ToHaveTitleAsync(new Regex("Playwright"));
    }

    [Test]
    public async Task GetStartedLink()
    {
        await Page.GotoAsync("https://playwright.dev");

        // Click the get started link.
        await Page.GetByRole(AriaRole.Link, new() { Name = "Get started" }).ClickAsync();

        // Expects page to have a heading with the name of Installation.
        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = "Installation" })).ToBeVisibleAsync();
    } 
}

----------------------------------------

TITLE: Using Test Hooks in Playwright
DESCRIPTION: Shows how to use test hooks like describe, beforeEach, and afterEach to structure tests and set up common test conditions. The example demonstrates navigating to a starting URL before each test in a group.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test.describe('navigation', () => {
  test.beforeEach(async ({ page }) => {
    // Go to the starting url before each test.
    await page.goto('https://playwright.dev/');
  });

  test('main navigation', async ({ page }) => {
    // Assertions use the expect API.
    await expect(page).toHaveURL('https://playwright.dev/');
  });
});

----------------------------------------

TITLE: Soft Assertions in Playwright
DESCRIPTION: Demonstrates the use of soft assertions that don't terminate test execution on failure.

LANGUAGE: javascript
CODE:
await expect.soft(page.getByTestId('status')).toHaveText('Success');
await expect.soft(page.getByTestId('eta')).toHaveText('1 day');

await page.getByRole('link', { name: 'next page' }).click();
await expect.soft(page.getByRole('heading', { name: 'Make another order' })).toBeVisible();

----------------------------------------

TITLE: Basic Playwright Test Structure in Python
DESCRIPTION: Demonstrates basic test structure with Playwright including navigation, element interaction and assertions. Shows two test examples - one checking page title and another interacting with a link.

LANGUAGE: python
CODE:
import re
from playwright.sync_api import Page, expect

def test_has_title(page: Page):
    page.goto("https://playwright.dev/")

    # Expect a title "to contain" a substring.
    expect(page).to_have_title(re.compile("Playwright"))

def test_get_started_link(page: Page):
    page.goto("https://playwright.dev/")

    # Click the get started link.
    page.get_by_role("link", name="Get started").click()

    # Expects page to have a heading with the name of Installation.
    expect(page.get_by_role("heading", name="Installation")).to_be_visible()

----------------------------------------

TITLE: Creating Isolated Browser Contexts in Playwright Tests (JavaScript)
DESCRIPTION: Demonstrates how Playwright automatically creates isolated browser contexts for each test when using the Playwright Test Runner. Each test receives its own context and page, ensuring complete isolation between tests.

LANGUAGE: javascript
CODE:
import { test } from '@playwright/test';

test('example test', async ({ page, context }) => {
  // "context" is an isolated BrowserContext, created for this specific test.
  // "page" belongs to this context.
});

test('another test', async ({ page, context }) => {
  // "context" and "page" in this second test are completely
  // isolated from the first test.
});

----------------------------------------

TITLE: Element Interaction in Python
DESCRIPTION: Demonstrates different ways to interact with page elements using Playwright's Locator API in Python.

LANGUAGE: python
CODE:
# Create a locator.
get_started = page.get_by_role("link", name="Get started")

# Click it.
get_started.click()

LANGUAGE: python
CODE:
page.get_by_role("link", name="Get started").click()

----------------------------------------

TITLE: Basic Playwright Test Example
DESCRIPTION: Example test file showing basic Playwright usage including page navigation, element interaction, and assertions using the Playwright Pytest plugin.

LANGUAGE: python
CODE:
import re
from playwright.sync_api import Page, expect

def test_has_title(page: Page):
    page.goto("https://playwright.dev/")

    # Expect a title "to contain" a substring.
    expect(page).to_have_title(re.compile("Playwright"))

def test_get_started_link(page: Page):
    page.goto("https://playwright.dev/")

    # Click the get started link.
    page.get_by_role("link", name="Get started").click()

    # Expects page to have a heading with the name of Installation.
    expect(page.get_by_role("heading", name="Installation")).to_be_visible()

----------------------------------------

TITLE: Configuring Playwright Projects for Multiple Browsers
DESCRIPTION: This snippet demonstrates how to set up Playwright projects for various browsers, including desktop and mobile devices, as well as branded browsers like Microsoft Edge and Google Chrome.

LANGUAGE: javascript
CODE:
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },

    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },

    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },

    /* Test against mobile viewports. */
    {
      name: 'Mobile Chrome',
      use: { ...devices['Pixel 5'] },
    },
    {
      name: 'Mobile Safari',
      use: { ...devices['iPhone 12'] },
    },

    /* Test against branded browsers. */
    {
      name: 'Microsoft Edge',
      use: {
        ...devices['Desktop Edge'],
        channel: 'msedge'
      },
    },
    {
      name: 'Google Chrome',
      use: {
        ...devices['Desktop Chrome'],
        channel: 'chrome'
      },
    },
  ],
});

----------------------------------------

TITLE: Implementing PlaywrightDevPage in JavaScript
DESCRIPTION: Creates a PlaywrightDevPage class to encapsulate common operations on the playwright.dev page. It includes methods for navigation, clicking links, and locating elements.

LANGUAGE: javascript
CODE:
const { expect } = require('@playwright/test');

exports.PlaywrightDevPage = class PlaywrightDevPage {

  /**
   * @param {import('@playwright/test').Page} page
   */
  constructor(page) {
    this.page = page;
    this.getStartedLink = page.locator('a', { hasText: 'Get started' });
    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });
    this.pomLink = page.locator('li', {
      hasText: 'Guides',
    }).locator('a', {
      hasText: 'Page Object Model',
    });
    this.tocList = page.locator('article div.markdown ul > li > a');
  }

  async goto() {
    await this.page.goto('https://playwright.dev');
  }

  async getStarted() {
    await this.getStartedLink.first().click();
    await expect(this.gettingStartedHeader).toBeVisible();
  }

  async pageObjectModel() {
    await this.getStarted();
    await this.pomLink.click();
  }
};

----------------------------------------

TITLE: Sending API Requests from UI Tests with Playwright
DESCRIPTION: This code demonstrates how to send API requests from UI tests using Playwright, including setting up the API context and creating an issue via API before checking it in the UI.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

const REPO = 'test-repo-1';
const USER = 'github-username';

// Request context is reused by all tests in the file.
let apiContext;

test.beforeAll(async ({ playwright }) => {
  apiContext = await playwright.request.newContext({
    // All requests we send go to this API endpoint.
    baseURL: 'https://api.github.com',
    extraHTTPHeaders: {
      // We set this header per GitHub guidelines.
      'Accept': 'application/vnd.github.v3+json',
      // Add authorization token to all requests.
      // Assuming personal access token available in the environment.
      'Authorization': `token ${process.env.API_TOKEN}`,
    },
  });
});

test.afterAll(async ({ }) => {
  // Dispose all responses.
  await apiContext.dispose();
});

test('last created issue should be first in the list', async ({ page }) => {
  const newIssue = await apiContext.post(`/repos/${USER}/${REPO}/issues`, {
    data: {
      title: '[Feature] request 1',
    }
  });
  expect(newIssue.ok()).toBeTruthy();

  await page.goto(`https://github.com/${USER}/${REPO}/issues`);
  const firstIssue = page.locator(`a[data-hovercard-type='issue']`).first();
  await expect(firstIssue).toHaveText('[Feature] request 1');
});

----------------------------------------

TITLE: Creating Authentication Directory (PowerShell)
DESCRIPTION: Creates a directory for storing authentication data and adds it to .gitignore using PowerShell commands.

LANGUAGE: powershell
CODE:
New-Item -ItemType Directory -Force -Path playwright\.auth
Add-Content -path .gitignore "`r`nplaywright/.auth"

----------------------------------------

TITLE: Basic Playwright Asynchronous Usage
DESCRIPTION: Example showing asynchronous browser automation with Playwright using asyncio

LANGUAGE: python
CODE:
import asyncio
from playwright.async_api import async_playwright

async def main():
    async with async_playwright() as p:
        browser = await p.chromium.launch()
        page = await browser.new_page()
        await page.goto("https://playwright.dev")
        print(await page.title())
        await browser.close()

asyncio.run(main())

----------------------------------------

TITLE: Extending Playwright Test with Custom Fixtures
DESCRIPTION: Demonstrates how to extend Playwright Test by defining custom fixtures and options.

LANGUAGE: js
CODE:
const base = require('@playwright/test');
const { TodoPage } = require('./todo-page');

exports.test = base.test.extend({
  defaultItem: ['Do stuff', { option: true }],

  todoPage: async ({ page, defaultItem }, use) => {
    const todoPage = new TodoPage(page);
    await todoPage.goto();
    await todoPage.addToDo(defaultItem);
    await use(todoPage);
    await todoPage.removeAll();
  },
});

----------------------------------------

TITLE: Declaring a Basic Test in Playwright
DESCRIPTION: Shows how to declare a basic test using the test function from Playwright Test. The test navigates to a page and checks its title.

LANGUAGE: js
CODE:
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }) => {
  await page.goto('https://playwright.dev/');
  const name = await page.innerText('.navbar__title');
  expect(name).toBe('Playwright');
});

----------------------------------------

TITLE: Filling Text Input Fields with Playwright
DESCRIPTION: Demonstrates how to fill various types of text input fields including regular text, date, time, and datetime inputs using Playwright's fill method.

LANGUAGE: javascript
CODE:
// Text input
await page.getByRole('textbox').fill('Peter');

// Date input
await page.getByLabel('Birth date').fill('2020-02-02');

// Time input
await page.getByLabel('Appointment time').fill('13:15');

// Local datetime input
await page.getByLabel('Local time').fill('2020-03-02T05:15');

----------------------------------------

TITLE: Advanced Playwright Configuration Settings
DESCRIPTION: Shows advanced configuration options including output directory specification, global setup/teardown paths, and test timeout settings.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // Folder for test artifacts such as screenshots, videos, traces, etc.
  outputDir: 'test-results',

  // path to the global setup files.
  globalSetup: require.resolve('./global-setup'),

  // path to the global teardown files.
  globalTeardown: require.resolve('./global-teardown'),

  // Each test is given 30 seconds.
  timeout: 30000,

});

----------------------------------------

TITLE: JUnit Basic Test Setup with Playwright
DESCRIPTION: Example showing how to integrate Playwright with JUnit 5, including test lifecycle management with @BeforeAll, @AfterAll, @BeforeEach, and @AfterEach annotations. Demonstrates browser automation tests with shared browser instance and isolated contexts per test.

LANGUAGE: java
CODE:
package org.example;

import com.microsoft.playwright.Browser;
import com.microsoft.playwright.BrowserContext;
import com.microsoft.playwright.Page;
import com.microsoft.playwright.Playwright;
import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class TestExample {
  static Playwright playwright;
  static Browser browser;

  BrowserContext context;
  Page page;

  @BeforeAll
  static void launchBrowser() {
    playwright = Playwright.create();
    browser = playwright.chromium().launch();
  }

  @AfterAll
  static void closeBrowser() {
    playwright.close();
  }

  @BeforeEach
  void createContextAndPage() {
    context = browser.newContext();
    page = context.newPage();
  }

  @AfterEach
  void closeContext() {
    context.close();
  }

  @Test
  void shouldClickButton() {
    page.navigate("data:text/html,<script>var result;</script><button onclick='result=\"Clicked\"'>Go</button>");
    page.locator("button").click();
    assertEquals("Clicked", page.evaluate("result"));
  }

  @Test
  void shouldCheckTheBox() {
    page.setContent("<input id='checkbox' type='checkbox'></input>");
    page.locator("input").check();
    assertTrue((Boolean) page.evaluate("() => window['checkbox'].checked"));
  }

  @Test
  void shouldSearchWiki() {
    page.navigate("https://www.wikipedia.org/");
    page.locator("input[name=\"search\"]").click();
    page.locator("input[name=\"search\"]").fill("playwright");
    page.locator("input[name=\"search\"]").press("Enter");
    assertEquals("https://en.wikipedia.org/wiki/Playwright", page.url());
  }
}

----------------------------------------

TITLE: WebSocket Handling in Playwright
DESCRIPTION: Illustrates how to inspect and monitor WebSocket connections in Playwright.

LANGUAGE: javascript
CODE:
page.on('websocket', ws => {
  console.log(`WebSocket opened: ${ws.url()}>`);
  ws.on('framesent', event => console.log(event.payload));
  ws.on('framereceived', event => console.log(event.payload));
  ws.on('close', () => console.log('WebSocket closed'));
});

----------------------------------------

TITLE: Creating and Navigating Pages in Playwright
DESCRIPTION: This snippet demonstrates how to create a new page, navigate to a URL, interact with page elements, and retrieve the current URL.

LANGUAGE: javascript
CODE:
// Create a page.
const page = await context.newPage();

// Navigate explicitly, similar to entering a URL in the browser.
await page.goto('http://example.com');
// Fill an input.
await page.locator('#search').fill('query');

// Navigate implicitly by clicking a link.
await page.locator('#submit').click();
// Expect a new url.
console.log(page.url());

LANGUAGE: java
CODE:
// Create a page.
Page page = context.newPage();

// Navigate explicitly, similar to entering a URL in the browser.
page.navigate("http://example.com");
// Fill an input.
page.locator("#search").fill("query");

// Navigate implicitly by clicking a link.
page.locator("#submit").click();
// Expect a new url.
System.out.println(page.url());

LANGUAGE: python
CODE:
page = await context.new_page()

# Navigate explicitly, similar to entering a URL in the browser.
await page.goto('http://example.com')
# Fill an input.
await page.locator('#search').fill('query')

# Navigate implicitly by clicking a link.
await page.locator('#submit').click()
# Expect a new url.
print(page.url)

LANGUAGE: csharp
CODE:
// Create a page.
var page = await context.NewPageAsync();

// Navigate explicitly, similar to entering a URL in the browser.
await page.GotoAsync("http://example.com");
// Fill an input.
await page.Locator("#search").FillAsync("query");

// Navigate implicitly by clicking a link.
await page.Locator("#submit").ClickAsync();
// Expect a new url.
Console.WriteLine(page.Url);

----------------------------------------

TITLE: Locating Elements Inside Frames in Playwright
DESCRIPTION: Demonstrates how to locate and interact with elements inside an iframe using Playwright's frameLocator method. This snippet shows how to fill a username field inside a frame.

LANGUAGE: javascript
CODE:
// Locate element inside frame
const username = await page.frameLocator('.frame-class').getByLabel('User Name');
await username.fill('John');

LANGUAGE: java
CODE:
// Locate element inside frame
Locator username = page.frameLocator(".frame-class").getByLabel("User Name");
username.fill("John");

LANGUAGE: python
CODE:
# Locate element inside frame
username = await page.frame_locator('.frame-class').get_by_label('User Name')
await username.fill('John')

LANGUAGE: csharp
CODE:
// Locate element inside frame
var username = await page.FrameLocator(".frame-class").GetByLabel("User Name");
await username.FillAsync("John");

----------------------------------------

TITLE: Navigating to a URL in Playwright
DESCRIPTION: Shows how to navigate to a specific URL using Playwright in both JavaScript and Python. This is typically the first step in most tests.

LANGUAGE: javascript
CODE:
await page.goto('https://playwright.dev/');

LANGUAGE: python
CODE:
page.goto("https://playwright.dev/")

----------------------------------------

TITLE: Validating API Postconditions in UI Tests with Playwright
DESCRIPTION: This code shows how to validate API postconditions in UI tests using Playwright, including creating an issue via UI and then verifying it via API.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

const REPO = 'test-repo-1';
const USER = 'github-username';

// Request context is reused by all tests in the file.
let apiContext;

test.beforeAll(async ({ playwright }) => {
  apiContext = await playwright.request.newContext({
    // All requests we send go to this API endpoint.
    baseURL: 'https://api.github.com',
    extraHTTPHeaders: {
      // We set this header per GitHub guidelines.
      'Accept': 'application/vnd.github.v3+json',
      // Add authorization token to all requests.
      // Assuming personal access token available in the environment.
      'Authorization': `token ${process.env.API_TOKEN}`,
    },
  });
});

test.afterAll(async ({ }) => {
  // Dispose all responses.
  await apiContext.dispose();
});

test('last created issue should be on the server', async ({ page }) => {
  await page.goto(`https://github.com/${USER}/${REPO}/issues`);
  await page.getByText('New Issue').click();
  await page.getByRole('textbox', { name: 'Title' }).fill('Bug report 1');
  await page.getByRole('textbox', { name: 'Comment body' }).fill('Bug description');
  await page.getByText('Submit new issue').click();
  const issueId = new URL(page.url()).pathname.split('/').pop();

  const newIssue = await apiContext.get(
      `https://api.github.com/repos/${USER}/${REPO}/issues/${issueId}`
  );
  expect(newIssue.ok()).toBeTruthy();
  expect(newIssue.json()).toEqual(expect.objectContaining({
    title: 'Bug report 1'
  }));
});

----------------------------------------

TITLE: Evaluating JavaScript in Page Context (Multiple Languages)
DESCRIPTION: Demonstrates how to use the page.evaluate method to execute JavaScript in the browser context and retrieve results. Examples are provided for JavaScript, Java, Python, and C#.

LANGUAGE: javascript
CODE:
const href = await page.evaluate(() => document.location.href);

LANGUAGE: java
CODE:
String href = (String) page.evaluate("document.location.href");

LANGUAGE: python
CODE:
href = await page.evaluate('() => document.location.href')

LANGUAGE: csharp
CODE:
var href = await page.EvaluateAsync<string>("document.location.href");

----------------------------------------

TITLE: Configuring Recording Options in Playwright
DESCRIPTION: Settings for capturing screenshots, recording videos, and traces during test execution.

LANGUAGE: typescript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    screenshot: 'only-on-failure',
    trace: 'on-first-retry',
    video: 'on-first-retry'
  },
});

----------------------------------------

TITLE: Basic Tracing Example
DESCRIPTION: Demonstrates basic trace recording workflow including starting tracing with screenshots and snapshots, performing actions, and saving the trace file.

LANGUAGE: javascript
CODE:
const browser = await chromium.launch();
const context = await browser.newContext();
await context.tracing.start({ screenshots: true, snapshots: true });
const page = await context.newPage();
await page.goto('https://playwright.dev');
await context.tracing.stop({ path: 'trace.zip' });

LANGUAGE: java
CODE:
Browser browser = chromium.launch();
BrowserContext context = browser.newContext();
context.tracing().start(new Tracing.StartOptions()
  .setScreenshots(true)
  .setSnapshots(true));
Page page = context.newPage();
page.navigate("https://playwright.dev");
context.tracing().stop(new Tracing.StopOptions()
  .setPath(Paths.get("trace.zip")));

----------------------------------------

TITLE: Creating a Page and Taking a Screenshot in Python (Sync)
DESCRIPTION: This example shows how to create a new page, navigate to a URL, and take a screenshot using Playwright in Python with synchronous code.

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = webkit.launch()
    context = browser.new_context()
    page = context.new_page()
    page.goto("https://example.com")
    page.screenshot(path="screenshot.png")
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

----------------------------------------

TITLE: Creating a Page and Taking a Screenshot in JavaScript
DESCRIPTION: This example demonstrates how to create a new page, navigate to a URL, and take a screenshot using Playwright in JavaScript.

LANGUAGE: javascript
CODE:
const { webkit } = require('playwright');  // Or 'chromium' or 'firefox'.

(async () => {
  const browser = await webkit.launch();
  const context = await browser.newContext();
  const page = await context.newPage();
  await page.goto('https://example.com');
  await page.screenshot({ path: 'screenshot.png' });
  await browser.close();
})();

----------------------------------------

TITLE: Configuring Basic Web Server in Playwright
DESCRIPTION: Basic configuration for launching a local development web server during Playwright tests. Includes settings for command, URL, server reuse, and output handling.

LANGUAGE: typescript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // Run your local dev server before starting the tests
  webServer: {
    command: 'npm run start',
    url: 'http://localhost:3000',
    reuseExistingServer: !process.env.CI,
    stdout: 'ignore',
    stderr: 'pipe',
  },
});

----------------------------------------

TITLE: Managing Browser Contexts - Multiple Languages
DESCRIPTION: Example demonstrating how to create and manage browser contexts, which provide isolated browser sessions.

LANGUAGE: javascript
CODE:
(async () => {
  const browser = await playwright.firefox.launch();  // Or 'chromium' or 'webkit'.
  // Create a new incognito browser context.
  const context = await browser.newContext();
  // Create a new page in a pristine context.
  const page = await context.newPage();
  await page.goto('https://example.com');

  // Gracefully close up everything
  await context.close();
  await browser.close();
})();

LANGUAGE: python
CODE:
browser = playwright.firefox.launch() # or "chromium" or "webkit".
# create a new incognito browser context.
context = browser.new_context()
# create a new page in a pristine context.
page = context.new_page()
page.goto("https://example.com")

# gracefully close up everything
context.close()
browser.close()

----------------------------------------

TITLE: Installing Playwright Test Runner using npm init
DESCRIPTION: This snippet demonstrates how to install Playwright Test using the npm init command. It creates a configuration file and optionally adds examples, a GitHub Action workflow, and a first test file.

LANGUAGE: Shell
CODE:
# Run from your project's root directory
npm init playwright@latest
# Or create a new project
npm init playwright@latest new-project

----------------------------------------

TITLE: Combined UI and API Testing
DESCRIPTION: Demonstrates how to combine UI interactions with API verifications. Creates issues through the UI and verifies them via API calls.

LANGUAGE: python
CODE:
def test_last_created_issue_should_be_on_the_server(api_request_context: APIRequestContext, page: Page) -> None:
    page.goto(f"https://github.com/{GITHUB_USER}/{GITHUB_REPO}/issues")
    page.locator("text=New issue").click()
    page.locator("[aria-label='Title']").fill("Bug report 1")
    page.locator("[aria-label='Comment body']").fill("Bug description")
    page.locator("text=Submit new issue").click()
    issue_id = page.url.split("/")[-1]

    new_issue = api_request_context.get(f"https://github.com/{GITHUB_USER}/{GITHUB_REPO}/issues/{issue_id}")
    assert new_issue.ok
    assert new_issue.json()["title"] == "[Bug] report 1"
    assert new_issue.json()["body"] == "Bug description"

----------------------------------------

TITLE: Configuring Playwright Test Execution
DESCRIPTION: This section shows how to configure various aspects of Playwright test execution, such as running tests in headed mode, specifying projects, controlling parallelization, and choosing reporters.

LANGUAGE: bash
CODE:
npx playwright test --headed

LANGUAGE: bash
CODE:
npx playwright test --project=chromium

LANGUAGE: bash
CODE:
npx playwright test --workers=1

LANGUAGE: bash
CODE:
npx playwright test --reporter=dot

----------------------------------------

TITLE: Emulating Mobile Safari with Geolocation in Playwright
DESCRIPTION: This TypeScript snippet shows how to use Playwright to emulate Mobile Safari on an iPhone 13 Pro, set geolocation, navigate to Google Maps, perform an action, and take a screenshot.

LANGUAGE: TypeScript
CODE:
import { test, devices } from '@playwright/test';

test.use({
  ...devices['iPhone 13 Pro'],
  locale: 'en-US',
  geolocation: { longitude: 12.492507, latitude: 41.889938 },
  permissions: ['geolocation'],
})

test('Mobile and geolocation', async ({ page }) => {
  await page.goto('https://maps.google.com');
  await page.getByText('Your location').click();
  await page.waitForRequest(/.*preview\/pwa/);
  await page.screenshot({ path: 'colosseum-iphone.png' });
});

----------------------------------------

TITLE: Configuring Single Reporter in Playwright Config
DESCRIPTION: Shows how to specify a single reporter in the Playwright configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: 'line',
});

----------------------------------------

TITLE: Installing Playwright Pytest Plugin via Package Managers
DESCRIPTION: Commands for installing the Playwright Pytest plugin using either PyPI or Anaconda package managers.

LANGUAGE: bash
CODE:
pip install pytest-playwright

LANGUAGE: bash
CODE:
conda config --add channels conda-forge
conda config --add channels microsoft
conda install pytest-playwright

----------------------------------------

TITLE: Basic Playwright Test Structure in Java
DESCRIPTION: Demonstrates a complete Playwright test in Java, including browser launch, navigation, assertions, and element interactions.

LANGUAGE: java
CODE:
package org.example;

import java.util.regex.Pattern;
import com.microsoft.playwright.*;
import com.microsoft.playwright.options.AriaRole;

import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class App {
    public static void main(String[] args) {
        try (Playwright playwright = Playwright.create()) {
            Browser browser = playwright.chromium().launch();
            Page page = browser.newPage();
            page.navigate("https://playwright.dev");

            // Expect a title "to contain" a substring.
            assertThat(page).hasTitle(Pattern.compile("Playwright"));

            // create a locator
            Locator getStarted = page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName("Get Started"));

            // Expect an attribute "to be strictly equal" to the value.
            assertThat(getStarted).hasAttribute("href", "/docs/intro");

            // Click the get started link.
            getStarted.click();

            // Expects page to have a heading with the name of Installation.
            assertThat(page.getByRole(AriaRole.HEADING,
               new Page.GetByRoleOptions().setName("Installation"))).isVisible();
        }
    }
}

----------------------------------------

TITLE: Implementing Playwright Tests with JUnit in Java
DESCRIPTION: Example class demonstrating Playwright test setup with JUnit 5, including browser initialization, context management, and sample test cases. Shows how to organize tests using @BeforeAll, @AfterAll, @BeforeEach, and @AfterEach annotations.

LANGUAGE: java
CODE:
package org.example;

import com.microsoft.playwright.Browser;
import com.microsoft.playwright.BrowserContext;
import com.microsoft.playwright.Page;
import com.microsoft.playwright.Playwright;
import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class TestExample {
  // Shared between all tests in this class.
  static Playwright playwright;
  static Browser browser;

  // New instance for each test method.
  BrowserContext context;
  Page page;

  @BeforeAll
  static void launchBrowser() {
    playwright = Playwright.create();
    browser = playwright.chromium().launch();
  }

  @AfterAll
  static void closeBrowser() {
    playwright.close();
  }

  @BeforeEach
  void createContextAndPage() {
    context = browser.newContext();
    page = context.newPage();
  }

  @AfterEach
  void closeContext() {
    context.close();
  }

  @Test
  void shouldClickButton() {
    page.navigate("data:text/html,<script>var result;</script><button onclick='result=\"Clicked\"'>Go</button>");
    page.locator("button").click();
    assertEquals("Clicked", page.evaluate("result"));
  }

  @Test
  void shouldCheckTheBox() {
    page.setContent("<input id='checkbox' type='checkbox'></input>");
    page.locator("input").check();
    assertTrue((Boolean) page.evaluate("() => window['checkbox'].checked"));
  }

  @Test
  void shouldSearchWiki() {
    page.navigate("https://www.wikipedia.org/");
    page.locator("input[name=\"search\"]").click();
    page.locator("input[name=\"search\"]").fill("playwright");
    page.locator("input[name=\"search\"]").press("Enter");
    assertEquals("https://en.wikipedia.org/wiki/Playwright", page.url());
  }
}

----------------------------------------

TITLE: Basic Page Accessibility Scan in TypeScript
DESCRIPTION: Demonstrates how to perform a basic accessibility scan of an entire webpage using axe-core with Playwright. The test navigates to a page and verifies there are no accessibility violations.

LANGUAGE: typescript
CODE:
import { test, expect } from '@playwright/test';
import AxeBuilder from '@axe-core/playwright';

test.describe('homepage', () => {
  test('should not have any automatically detectable accessibility issues', async ({ page }) => {
    await page.goto('https://your-site.com/');

    const accessibilityScanResults = await new AxeBuilder({ page }).analyze();

    expect(accessibilityScanResults.violations).toEqual([]);
  });
});

----------------------------------------

TITLE: Conditionally Skipping a Test in Playwright
DESCRIPTION: Demonstrates how to conditionally skip a test based on a runtime condition. In this example, the test is skipped if the browser is Firefox.

LANGUAGE: javascript
CODE:
test('skip this test', async ({ page, browserName }) => {
  test.skip(browserName === 'firefox', 'Still working on it');
});

----------------------------------------

TITLE: Handling Electron Window Events
DESCRIPTION: Shows how to wait for and handle window events in an Electron application using waitForEvent method.

LANGUAGE: javascript
CODE:
const windowPromise = electronApp.waitForEvent('window');
await mainWindow.click('button');
const window = await windowPromise;

----------------------------------------

TITLE: TestNG Integration with Playwright
DESCRIPTION: Example demonstrating Playwright integration with TestNG, including test lifecycle management and browser automation tests. Shows setup with @BeforeClass, @AfterClass, @BeforeMethod, and @AfterMethod annotations.

LANGUAGE: java
CODE:
package org.example;

import com.microsoft.playwright.Browser;
import com.microsoft.playwright.BrowserContext;
import com.microsoft.playwright.Page;
import com.microsoft.playwright.Playwright;
import org.testng.annotations.*;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

public class TestExample {
  Playwright playwright;
  Browser browser;

  BrowserContext context;
  Page page;

  @BeforeClass
  void launchBrowser() {
    playwright = Playwright.create();
    browser = playwright.chromium().launch();
  }

  @AfterClass
  void closeBrowser() {
    playwright.close();
  }

  @BeforeMethod
  void createContextAndPage() {
    context = browser.newContext();
    page = context.newPage();
  }

  @AfterMethod
  void closeContext() {
    context.close();
  }

  @Test
  void shouldClickButton() {
    page.navigate("data:text/html,<script>var result;</script><button onclick='result=\"Clicked\"'>Go</button>");
    page.locator("button").click();
    assertEquals("Clicked", page.evaluate("result"));
  }

  @Test
  void shouldCheckTheBox() {
    page.setContent("<input id='checkbox' type='checkbox'></input>");
    page.locator("input").check();
    assertTrue((Boolean) page.evaluate("() => window['checkbox'].checked"));
  }

  @Test
  void shouldSearchWiki() {
    page.navigate("https://www.wikipedia.org/");
    page.locator("input[name=\"search\"]").click();
    page.locator("input[name=\"search\"]").fill("playwright");
    page.locator("input[name=\"search\"]").press("Enter");
    assertEquals("https://en.wikipedia.org/wiki/Playwright", page.url());
  }
}

----------------------------------------

TITLE: Mocking Network Requests in JavaScript
DESCRIPTION: Example of how to mock network requests using Playwright's route method in JavaScript.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test.beforeEach(async ({ context }) => {
  // Block any css requests for each test in this file.
  await context.route(/.css$/, route => route.abort());
});

test('loads page without css', async ({ page }) => {
  await page.goto('https://playwright.dev');
  // ... test goes here
});

----------------------------------------

TITLE: Interacting with Page Elements in Playwright
DESCRIPTION: Demonstrates how to create a locator and use it to interact with page elements. The example shows both a multi-step approach and a concise one-liner for clicking a link.

LANGUAGE: javascript
CODE:
// Create a locator.
const getStarted = page.getByRole('link', { name: 'Get started' });

// Click it.
await getStarted.click();

// One-liner alternative
await page.getByRole('link', { name: 'Get started' }).click();

----------------------------------------

TITLE: Reusing Authentication State in Playwright
DESCRIPTION: This code demonstrates how to reuse authentication state between APIRequestContext and BrowserContext in Playwright, including saving and loading storage state.

LANGUAGE: javascript
CODE:
const requestContext = await request.newContext({
  httpCredentials: {
    username: 'user',
    password: 'passwd'
  }
});
await requestContext.get(`https://api.example.com/login`);
// Save storage state into the file.
await requestContext.storageState({ path: 'state.json' });

// Create a new context with the saved storage state.
const context = await browser.newContext({ storageState: 'state.json' });

----------------------------------------

TITLE: Using Environment Variables in Global Setup for Playwright Tests
DESCRIPTION: Demonstrates how to set and use environment variables in global setup for Playwright tests.

LANGUAGE: typescript
CODE:
import type { FullConfig } from '@playwright/test';

async function globalSetup(config: FullConfig) {
  process.env.FOO = 'some data';
  // Or a more complicated data structure as JSON:
  process.env.BAR = JSON.stringify({ some: 'data' });
}

export default globalSetup;

----------------------------------------

TITLE: Manually Creating Browser Contexts in Playwright (Multi-language)
DESCRIPTION: Shows how to manually create browser contexts and pages in Playwright when not using the test runner. Examples are provided for JavaScript, Java, Python (async and sync), and C#.

LANGUAGE: javascript
CODE:
const browser = await chromium.launch();
const context = await browser.newContext();
const page = await context.newPage();

LANGUAGE: java
CODE:
Browser browser = chromium.launch();
BrowserContext context = browser.newContext();
Page page = context.newPage();

LANGUAGE: python
CODE:
browser = await playwright.chromium.launch()
context = await browser.new_context()
page = await context.new_page()

LANGUAGE: python
CODE:
browser = playwright.chromium.launch()
context = browser.new_context()
page = context.new_page()

LANGUAGE: csharp
CODE:
using var playwright = await Playwright.CreateAsync();
var browser = await playwright.Chromium.LaunchAsync();
var context = await browser.NewContextAsync();
var page = await context.NewPageAsync();

----------------------------------------

TITLE: Basic Locator Usage
DESCRIPTION: Basic example of using a locator to find and click a button element

LANGUAGE: javascript
CODE:
await page.getByRole('button').click();

LANGUAGE: python
CODE:
await page.get_by_role("button").click()

LANGUAGE: java
CODE:
page.getByRole(AriaRole.BUTTON).click();

LANGUAGE: csharp
CODE:
await page.GetByRole(AriaRole.Button).ClickAsync();

----------------------------------------

TITLE: Parameterized Tests with Hooks in Playwright
DESCRIPTION: Shows how to implement before and after hooks with parameterized tests, both globally and per iteration

LANGUAGE: javascript
CODE:
test.beforeEach(async ({ page }) => {
  // ...
});

test.afterEach(async ({ page }) => {
  // ...
});

[
  { name: 'Alice', expected: 'Hello, Alice!' },
  { name: 'Bob', expected: 'Hello, Bob!' },
  { name: 'Charlie', expected: 'Hello, Charlie!' },
].forEach(({ name, expected }) => {
  test(`testing with ${name}`, async ({ page }) => {
    await page.goto(`https://example.com/greet?name=${name}`);
    await expect(page.getByRole('heading')).toHaveText(expected);
  });
});

----------------------------------------

TITLE: Basic FrameLocator Usage in Multiple Languages
DESCRIPTION: Demonstrates how to use FrameLocator to interact with elements inside an iframe across different programming languages.

LANGUAGE: javascript
CODE:
const locator = page.locator('#my-frame').contentFrame().getByText('Submit');
await locator.click();

LANGUAGE: java
CODE:
Locator locator = page.locator("#my-frame").contentFrame().getByText("Submit");
locator.click();

LANGUAGE: python
CODE:
locator = page.locator("#my-frame").content_frame.get_by_text("Submit")
await locator.click()

LANGUAGE: csharp
CODE:
var locator = page.Locator("#my-frame").ContentFrame.GetByText("Submit");
await locator.ClickAsync();

----------------------------------------

TITLE: Configuring Global Setup and Teardown Options in Playwright
DESCRIPTION: Shows how to configure global setup and teardown options in the Playwright configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  globalSetup: require.resolve('./global-setup'),
  globalTeardown: require.resolve('./global-teardown'),
});

----------------------------------------

TITLE: Waiting for Network Request in Playwright
DESCRIPTION: This snippet demonstrates how to wait for a specific network request using Playwright's waitForRequest method. It waits for a request matching a URL pattern before navigating to a page.

LANGUAGE: javascript
CODE:
// Start waiting for request before goto. Note no await.
const requestPromise = page.waitForRequest('**/*logo*.png');
await page.goto('https://wikipedia.org');
const request = await requestPromise;
console.log(request.url());

LANGUAGE: java
CODE:
// The callback lambda defines scope of the code that is expected to
// trigger request.
Request request = page.waitForRequest("**/*logo*.png", () -> {
  page.navigate("https://wikipedia.org");
});
System.out.println(request.url());

LANGUAGE: python
CODE:
async with page.expect_request("**/*logo*.png") as first:
  await page.goto("https://wikipedia.org")
first_request = await first.value
print(first_request.url)

LANGUAGE: csharp
CODE:
var waitForRequestTask = page.WaitForRequestAsync("**/*logo*.png");
await page.GotoAsync("https://wikipedia.org");
var request = await waitForRequestTask;
Console.WriteLine(request.Url);

----------------------------------------

TITLE: Launching and Using a Browser Instance with Playwright
DESCRIPTION: This snippet demonstrates how to launch a browser instance, create a new page, navigate to a URL, and close the browser using Playwright. Examples are provided for JavaScript, Java, Python (async and sync), and C#.

LANGUAGE: javascript
CODE:
const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.

(async () => {
  const browser = await chromium.launch();
  const page = await browser.newPage();
  await page.goto('https://example.com');
  // other actions...
  await browser.close();
})();

LANGUAGE: java
CODE:
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType chromium = playwright.chromium();
      Browser browser = chromium.launch();
      Page page = browser.newPage();
      page.navigate("https://example.com");
      // other actions...
      browser.close();
    }
  }
}

LANGUAGE: python
CODE:
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = await chromium.launch()
    page = await browser.new_page()
    await page.goto("https://example.com")
    # other actions...
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = chromium.launch()
    page = browser.new_page()
    page.goto("https://example.com")
    # other actions...
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

LANGUAGE: csharp
CODE:
using Microsoft.Playwright;
using System.Threading.Tasks;

class BrowserTypeExamples
{
    public static async Task Run()
    {
        using var playwright = await Playwright.CreateAsync();
        var chromium = playwright.Chromium;
        var browser = await chromium.LaunchAsync();
        var page = await browser.NewPageAsync();
        await page.GotoAsync("https://www.bing.com");
        // other actions
        await browser.CloseAsync();
    }
}

----------------------------------------

TITLE: Configuring Project Dependencies in Playwright
DESCRIPTION: Demonstrates how to set up project dependencies for global setup and teardown in the Playwright configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  testDir: './tests',
  // ...
  projects: [
    {
      name: 'setup db',
      testMatch: /global\.setup\.ts/,
    },
    {
      name: 'chromium with db',
      use: { ...devices['Desktop Chrome'] },
      dependencies: ['setup db'],
    },
  ]
});

----------------------------------------

TITLE: Test Filtering Configuration in Playwright
DESCRIPTION: Demonstrates how to configure test file filtering using glob patterns or regular expressions to include or exclude specific test files from execution.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // Glob patterns or regular expressions to ignore test files.
  testIgnore: '*test-assets',

  // Glob patterns or regular expressions that match test files.
  testMatch: '*todo-tests/*.spec.ts',
});

----------------------------------------

TITLE: Asserting Page URL in JavaScript
DESCRIPTION: Demonstrates how to use the PageAssertions class to assert the page URL in a Playwright test using JavaScript.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('navigates to login', async ({ page }) => {
  // ...
  await page.getByText('Sign in').click();
  await expect(page).toHaveURL(/.*\/login/);
});

----------------------------------------

TITLE: Running Sharded Playwright Tests in Bash
DESCRIPTION: Demonstrates how to run Playwright tests split into four shards using command line arguments.

LANGUAGE: bash
CODE:
npx playwright test --shard=1/4
npx playwright test --shard=2/4
npx playwright test --shard=3/4
npx playwright test --shard=4/4

----------------------------------------

TITLE: Implementing PlaywrightDevPage in TypeScript
DESCRIPTION: TypeScript version of the PlaywrightDevPage class with type annotations for better type safety and intellisense support.

LANGUAGE: typescript
CODE:
import { expect, type Locator, type Page } from '@playwright/test';

export class PlaywrightDevPage {
  readonly page: Page;
  readonly getStartedLink: Locator;
  readonly gettingStartedHeader: Locator;
  readonly pomLink: Locator;
  readonly tocList: Locator;

  constructor(page: Page) {
    this.page = page;
    this.getStartedLink = page.locator('a', { hasText: 'Get started' });
    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });
    this.pomLink = page.locator('li', {
      hasText: 'Guides',
    }).locator('a', {
      hasText: 'Page Object Model',
    });
    this.tocList = page.locator('article div.markdown ul > li > a');
  }

  async goto() {
    await this.page.goto('https://playwright.dev');
  }

  async getStarted() {
    await this.getStartedLink.first().click();
    await expect(this.gettingStartedHeader).toBeVisible();
  }

  async pageObjectModel() {
    await this.getStarted();
    await this.pomLink.click();
  }
}

----------------------------------------

TITLE: Creating Browser Instance and Page - Multiple Languages
DESCRIPTION: Basic example of launching a browser, creating a new page, navigating to a URL and closing the browser in different programming languages.

LANGUAGE: javascript
CODE:
const { firefox } = require('playwright');  // Or 'chromium' or 'webkit'.

(async () => {
  const browser = await firefox.launch();
  const page = await browser.newPage();
  await page.goto('https://example.com');
  await browser.close();
})();

LANGUAGE: java
CODE:
import com.microsoft.playwright.*;

public class Example {
 public static void main(String[] args) {
   try (Playwright playwright = Playwright.create()) {
     BrowserType firefox = playwright.firefox();
     Browser browser = firefox.launch();
     Page page = browser.newPage();
     page.navigate("https://example.com");
     browser.close();
   }
 }
}

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    firefox = playwright.firefox
    browser = firefox.launch()
    page = browser.new_page()
    page.goto("https://example.com")
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

LANGUAGE: csharp
CODE:
using Microsoft.Playwright;

using var playwright = await Playwright.CreateAsync();
var firefox = playwright.Firefox;
var browser = await firefox.LaunchAsync(new() { Headless = false });
var page = await browser.NewPageAsync();
await page.GotoAsync("https://www.bing.com");
await browser.CloseAsync();

----------------------------------------

TITLE: Authentication State Management in Playwright
DESCRIPTION: Demonstrates how to manage and reuse authentication state between API requests and browser contexts using storage state.

LANGUAGE: csharp
CODE:
var requestContext = await Playwright.APIRequest.NewContextAsync(new()
{
    HttpCredentials = new()
    {
        Username = "user",
        Password = "passwd"
    },
});
await requestContext.GetAsync("https://api.example.com/login");
var state = await requestContext.StorageStateAsync();

var context = await Browser.NewContextAsync(new() { StorageState = state });

----------------------------------------

TITLE: Asserting Page URL in Python (Sync)
DESCRIPTION: Shows how to use the PageAssertions class to assert the page URL in a synchronous Playwright test using Python.

LANGUAGE: python
CODE:
import re
from playwright.sync_api import Page, expect

def test_navigates_to_login_page(page: Page) -> None:
    # ..
    page.get_by_text("Sign in").click()
    expect(page).to_have_url(re.compile(r".*/login"))

----------------------------------------

TITLE: Using Specific Browser Channels in Java
DESCRIPTION: Launch browsers with specific channels in Playwright Java.

LANGUAGE: java
CODE:
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setChannel("chromium"));
      Page page = browser.newPage();
      // ...
    }
  }
}

----------------------------------------

TITLE: Configuring Playwright for Multiple Browsers
DESCRIPTION: Configure Playwright to run tests on multiple browsers and devices.

LANGUAGE: javascript
CODE:
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    /* Test against desktop browsers */
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },
    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },
    /* Test against mobile viewports. */
    {
      name: 'Mobile Chrome',
      use: { ...devices['Pixel 5'] },
    },
    {
      name: 'Mobile Safari',
      use: { ...devices['iPhone 12'] },
    },
    /* Test against branded browsers. */
    {
      name: 'Google Chrome',
      use: { ...devices['Desktop Chrome'], channel: 'chrome' }, // or 'chrome-beta'
    },
    {
      name: 'Microsoft Edge',
      use: { ...devices['Desktop Edge'], channel: 'msedge' }, // or 'msedge-dev'
    },
  ],
});

----------------------------------------

TITLE: Using Test Steps in Playwright
DESCRIPTION: Shows how to use test steps to organize and report test execution in Playwright Test.

LANGUAGE: js
CODE:
test('test', async ({ page }) => {
  await test.step('Log in', async () => {
    // ...
  });

  await test.step('Outer step', async () => {
    // ...
    await test.step('Inner step', async () => {
      // ...
    });
  });
});

----------------------------------------

TITLE: Waiting for Specific URL After Navigation in Playwright
DESCRIPTION: Demonstrates how to wait for a specific URL after triggering a navigation action. This is useful when clicking an element might trigger multiple navigations.

LANGUAGE: javascript
CODE:
await page.getByText('Click me').click();
await page.waitForURL('**/login');

LANGUAGE: java
CODE:
page.getByText("Click me").click();
page.waitForURL("**/login");

LANGUAGE: python
CODE:
await page.get_by_text("Click me").click()
await page.wait_for_url("**/login")

LANGUAGE: csharp
CODE:
await page.GetByText("Click me").ClickAsync();
await page.WaitForURL("**/login");

----------------------------------------

TITLE: Authenticate with API Request (JavaScript)
DESCRIPTION: Demonstrates how to authenticate using an API request instead of UI interaction.

LANGUAGE: javascript
CODE:
import { test as setup } from '@playwright/test';

const authFile = 'playwright/.auth/user.json';

setup('authenticate', async ({ request }) => {
  await request.post('https://github.com/login', {
    form: {
      'user': 'user',
      'password': 'password'
    }
  });
  await request.storageState({ path: authFile });
});

----------------------------------------

TITLE: Filtering Locators
DESCRIPTION: Example of filtering locators to narrow down element selection based on text content and other elements

LANGUAGE: javascript
CODE:
await rowLocator
    .filter({ hasText: 'text in column 1' })
    .filter({ has: page.getByRole('button', { name: 'column 2 button' }) })
    .screenshot();

LANGUAGE: python
CODE:
await row_locator.filter(has_text="text in column 1").filter(
    has=page.get_by_role("button", name="column 2 button")
).screenshot()

LANGUAGE: java
CODE:
rowLocator
    .filter(new Locator.FilterOptions().setHasText("text in column 1"))
    .filter(new Locator.FilterOptions().setHas(
        page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("column 2 button"))
    ))
    .screenshot();

LANGUAGE: csharp
CODE:
await rowLocator
    .Filter(new() { HasText = "text in column 1" })
    .Filter(new() {
        Has = page.GetByRole(AriaRole.Button, new() { Name = "column 2 button" } )
    })
    .ScreenshotAsync();

----------------------------------------

TITLE: Installing Browsers via C# API
DESCRIPTION: Install browsers programmatically using the Playwright C# API.

LANGUAGE: csharp
CODE:
var exitCode = Microsoft.Playwright.Program.Main(new[] {"install"});
if (exitCode != 0)
{
    throw new Exception($"Playwright exited with code {exitCode}");
}

----------------------------------------

TITLE: Basic Playwright Browser Automation in C#
DESCRIPTION: Example demonstrating how to navigate to a website and take a screenshot using Playwright in C#

LANGUAGE: csharp
CODE:
using Microsoft.Playwright;

using var playwright = await Playwright.CreateAsync();
await using var browser = await playwright.Chromium.LaunchAsync();
var page = await browser.NewPageAsync();
await page.GotoAsync("https://playwright.dev/dotnet");
await page.ScreenshotAsync(new()
{
    Path = "screenshot.png"
});

----------------------------------------

TITLE: First Playwright Script in Java
DESCRIPTION: Demonstrates a simple Playwright script that navigates to a website using WebKit browser and takes a screenshot. It shows how to create a Playwright instance, launch a browser, and interact with a page.

LANGUAGE: java
CODE:
package org.example;

import com.microsoft.playwright.*;
import java.nio.file.Paths;

public class App {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      Browser browser = playwright.webkit().launch();
      Page page = browser.newPage();
      page.navigate("https://playwright.dev/");
      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get("example.png")));
    }
  }
}

----------------------------------------

TITLE: WCAG Compliance Testing
DESCRIPTION: Example of how to configure axe to specifically test for WCAG A and AA compliance violations using tag filtering.

LANGUAGE: javascript
CODE:
test('should not have any automatically detectable WCAG A or AA violations', async ({ page }) => {
  await page.goto('https://your-site.com/');

  const accessibilityScanResults = await new AxeBuilder({ page })
      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])
      .analyze();

  expect(accessibilityScanResults.violations).toEqual([]);
});

----------------------------------------

TITLE: Custom Fixture Implementation
DESCRIPTION: Example of creating custom test fixtures with Playwright test framework

LANGUAGE: typescript
CODE:
import { test as base } from '@playwright/test';
import { TodoPage } from './todo-page';

// Declare the types of your fixtures.
type MyFixtures = {
  todoPage: TodoPage;
};

// Extend base test by providing "todoPage".
export const test = base.extend<MyFixtures>({
  todoPage: async ({ page }, use) => {
    // Set up the fixture.
    const todoPage = new TodoPage(page);
    await todoPage.goto();
    await todoPage.addToDo('item1');
    await todoPage.addToDo('item2');

    // Use the fixture value in the test.
    await use(todoPage);

    // Clean up the fixture.
    await todoPage.removeAll();
  },
});
export { expect } from '@playwright/test';

----------------------------------------

TITLE: Configuring Playwright Project Dependencies
DESCRIPTION: This snippet demonstrates how to set up project dependencies in Playwright, allowing certain projects to run only after a setup project has completed.

LANGUAGE: javascript
CODE:
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'setup',
      testMatch: '**/*.setup.ts',
    },
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
      dependencies: ['setup'],
    },
    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
      dependencies: ['setup'],
    },
    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
      dependencies: ['setup'],
    },
  ],
});

----------------------------------------

TITLE: Testing Inactivity Monitoring
DESCRIPTION: Shows how to test an inactivity monitoring feature by manipulating time to simulate user inactivity periods. Includes examples of fast-forwarding time and checking logout behavior.

LANGUAGE: html
CODE:
<div id="remaining-time" data-testid="remaining-time"></div>
<script>
  const endTime = Date.now() + 5 * 60_000;
  const renderTime = () => {
    const diffInSeconds = Math.round((endTime - Date.now()) / 1000);
    if (diffInSeconds <= 0) {
      document.getElementById('remaining-time').textContent =
        'You have been logged out due to inactivity.';
    } else {
      document.getElementById('remaining-time').textContent =
        `You will be logged out in ${diffInSeconds} seconds.`;
    }
    setTimeout(renderTime, 1000);
  };
  renderTime();
</script>
<button type="button">Interaction</button>

LANGUAGE: javascript
CODE:
await page.clock.install();
await page.goto('http://localhost:3333');
await page.getByRole('button').click();

await page.clock.fastForward('05:00');

await expect(page.getByText('You have been logged out due to inactivity.')).toBeVisible();

----------------------------------------

TITLE: Running Playwright Tests via CLI
DESCRIPTION: This section demonstrates various ways to run Playwright tests using the command-line interface, including running all tests, specific files, and tests matching certain criteria.

LANGUAGE: bash
CODE:
npx playwright test

LANGUAGE: bash
CODE:
npx playwright test tests/todo-page.spec.ts

LANGUAGE: bash
CODE:
npx playwright test tests/todo-page/ tests/landing-page/

LANGUAGE: bash
CODE:
npx playwright test my-spec my-spec-2

LANGUAGE: bash
CODE:
npx playwright test my-spec.ts:42

LANGUAGE: bash
CODE:
npx playwright test -g "add a todo item"

----------------------------------------

TITLE: Creating APIRequestContext with Options
DESCRIPTION: Creates a new APIRequestContext instance with configurable options including client certificates, user agent, HTTP headers, authentication, proxy settings, and timeout configurations. The context can be initialized with storage state for maintaining logged-in sessions.

LANGUAGE: typescript
CODE:
interface APIRequestNewContextOptions {
  clientCertificates?: ClientCertificate[];
  userAgent?: string;
  extraHTTPHeaders?: Record<string, string>;
  failOnStatusCode?: boolean;
  httpCredentials?: HttpCredentials;
  proxy?: ProxySettings;
  ignoreHTTPSErrors?: boolean;
  maxRedirects?: number;
  timeout?: number;
  baseURL?: string;
  storageState?: string | {
    cookies: Array<{
      name: string;
      value: string;
      domain: string;
      path: string;
      expires: number;
      httpOnly: boolean;
      secure: boolean;
      sameSite: 'Strict' | 'Lax' | 'None';
    }>;
    origins: Array<{
      origin: string;
      localStorage: Array<{
        name: string;
        value: string;
      }>;
    }>;
  };
}

----------------------------------------

TITLE: Recording and Using HAR Files in Playwright
DESCRIPTION: Demonstrates how to record network requests to a HAR file and then use that HAR file to mock API responses in subsequent test runs.

LANGUAGE: javascript
CODE:
test('records or updates the HAR file', async ({ page }) => {
  await page.routeFromHAR('./hars/fruit.har', {
    url: '*/**/api/v1/fruits',
    update: true,
  });
  await page.goto('https://demo.playwright.dev/api-mocking');
  await expect(page.getByText('Strawberry')).toBeVisible();
});

----------------------------------------

TITLE: WebSocket State Methods - Multiple Languages
DESCRIPTION: Core methods for checking WebSocket state and properties, including connection status and URL information.

LANGUAGE: typescript
CODE:
const isClosed = webSocket.isClosed(); // Returns boolean
const url = webSocket.url(); // Returns string

----------------------------------------

TITLE: Splitting Tests into Playwright Projects
DESCRIPTION: This snippet shows how to split tests into different projects using file matching patterns, allowing for different configurations like retry attempts for different test subsets.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  timeout: 60000, // Timeout is shared between all tests.
  projects: [
    {
      name: 'Smoke',
      testMatch: /.*smoke.spec.ts/,
      retries: 0,
    },
    {
      name: 'Default',
      testIgnore: /.*smoke.spec.ts/,
      retries: 2,
    },
  ],
});

----------------------------------------

TITLE: Creating a Page and Taking a Screenshot in Python (Async)
DESCRIPTION: This example demonstrates how to create a new page, navigate to a URL, and take a screenshot using Playwright in Python with async/await syntax.

LANGUAGE: python
CODE:
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    webkit = playwright.webkit
    browser = await webkit.launch()
    context = await browser.new_context()
    page = await context.new_page()
    await page.goto("https://example.com")
    await page.screenshot(path="screenshot.png")
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)
asyncio.run(main())

----------------------------------------

TITLE: Mocking Third-Party API Responses in Playwright
DESCRIPTION: Demonstrates how to mock external API responses using Playwright's Network API to control test data.

LANGUAGE: javascript
CODE:
await page.route('**/api/fetch_data_third_party_dependency', route => route.fulfill({
  status: 200,
  body: testData,
}));
await page.goto('https://example.com');

----------------------------------------

TITLE: Intercepting Network Requests with Playwright
DESCRIPTION: This TypeScript snippet illustrates how to use Playwright to set up request routing for a page, logging all network requests before allowing them to continue.

LANGUAGE: TypeScript
CODE:
import { test } from '@playwright/test';

test('Intercept network requests', async ({ page }) => {
  // Log and continue all network requests
  await page.route('**', route => {
    console.log(route.request().url());
    route.continue();
  });
  await page.goto('http://todomvc.com');
});

----------------------------------------

TITLE: Defining Error Class in Playwright for Python
DESCRIPTION: The Error class is a custom exception class in Playwright that extends the built-in Exception class. It is raised when operations are terminated abnormally, such as when a browser closes during page evaluation.

LANGUAGE: python
CODE:
class Error(Exception):
    def __init__(self, message):
        self.message = message
        self.name = None
        self.stack = None

----------------------------------------

TITLE: Creating a Page and Taking a Screenshot in C#
DESCRIPTION: This example demonstrates how to create a new page, navigate to a URL, and take a screenshot using Playwright in C#.

LANGUAGE: csharp
CODE:
using Microsoft.Playwright;
using System.Threading.Tasks;

class PageExamples
{
    public static async Task Run()
    {
        using var playwright = await Playwright.CreateAsync();
        await using var browser = await playwright.Webkit.LaunchAsync();
        var page = await browser.NewPageAsync();
        await page.GotoAsync("https://www.theverge.com");
        await page.ScreenshotAsync(new() { Path = "theverge.png" });
    }
}

----------------------------------------

TITLE: Installing Playwright Dependencies
DESCRIPTION: Commands to install Playwright and its dependencies across different programming languages

LANGUAGE: bash
CODE:
# Install NPM packages
npm ci

# Install Playwright browsers and dependencies
npx playwright install --with-deps

LANGUAGE: bash
CODE:
pip install playwright
playwright install --with-deps

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install --with-deps"

LANGUAGE: bash
CODE:
dotnet build
pwsh bin/Debug/netX/playwright.ps1 install --with-deps

----------------------------------------

TITLE: Scanning Specific Page Elements
DESCRIPTION: Shows how to configure axe to scan only specific parts of a page, particularly useful for testing dynamic content like navigation menus that appear after user interaction.

LANGUAGE: javascript
CODE:
test('navigation menu should not have automatically detectable accessibility violations', async ({
  page,
}) => {
  await page.goto('https://your-site.com/');

  await page.getByRole('button', { name: 'Navigation Menu' }).click();

  await page.locator('#navigation-menu-flyout').waitFor();

  const accessibilityScanResults = await new AxeBuilder({ page })
      .include('#navigation-menu-flyout')
      .analyze();

  expect(accessibilityScanResults.violations).toEqual([]);
});

----------------------------------------

TITLE: Using PlaywrightDevPage in JavaScript Tests
DESCRIPTION: Demonstrates how to use the PlaywrightDevPage class in Playwright tests, including navigating to pages and asserting content.

LANGUAGE: javascript
CODE:
const { test, expect } = require('@playwright/test');
const { PlaywrightDevPage } = require('./playwright-dev-page');

test('getting started should contain table of contents', async ({ page }) => {
  const playwrightDev = new PlaywrightDevPage(page);
  await playwrightDev.goto();
  await playwrightDev.getStarted();
  await expect(playwrightDev.tocList).toHaveText([
    `How to install Playwright`,
    `What's Installed`,
    `How to run the example test`,
    `How to open the HTML test report`,
    `Write tests using web first assertions, page fixtures and locators`,
    `Run single test, multiple tests, headed mode`,
    `Generate tests with Codegen`,
    `See a trace of your tests`
  ]);
});

test('should show Page Object Model article', async ({ page }) => {
  const playwrightDev = new PlaywrightDevPage(page);
  await playwrightDev.goto();
  await playwrightDev.pageObjectModel();
  await expect(page.locator('article')).toContainText('Page Object Model is a common pattern');
});

----------------------------------------

TITLE: Handling WebErrors in Python (Async) with Playwright
DESCRIPTION: Illustrates how to use the WebError class in Python with async syntax to log uncaught exceptions and navigate to a page with an error.

LANGUAGE: python
CODE:
# Log all uncaught errors to the terminal
context.on("weberror", lambda web_error: print(f"uncaught exception: {web_error.error}"))

# Navigate to a page with an exception.
await page.goto("data:text/html,<script>throw new Error('test')</script>")

----------------------------------------

TITLE: Handling Page Load Event in JavaScript
DESCRIPTION: This example shows how to listen for the 'load' event on a page using Playwright in JavaScript.

LANGUAGE: javascript
CODE:
page.once('load', () => console.log('Page loaded!'));

----------------------------------------

TITLE: Basic Playwright Test with Page Fixture
DESCRIPTION: Basic example showing usage of built-in page fixture for browser automation testing

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  await expect(page).toHaveTitle(/Playwright/);
});

----------------------------------------

TITLE: Basic Playwright Test with Page Fixture
DESCRIPTION: Basic example showing usage of built-in page fixture for browser automation testing

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  await expect(page).toHaveTitle(/Playwright/);
});

----------------------------------------

TITLE: Interacting with Checkboxes and Radio Buttons in Playwright
DESCRIPTION: Shows how to check/uncheck checkboxes and select radio buttons using Playwright's setChecked method. Also includes an example of asserting the checked state.

LANGUAGE: javascript
CODE:
// Check the checkbox
await page.getByLabel('I agree to the terms above').check();

// Assert the checked state
expect(page.getByLabel('Subscribe to newsletter')).toBeChecked();

// Select the radio button
await page.getByLabel('XL').check();

----------------------------------------

TITLE: Basic Test Suite Structure with Hooks in Playwright
DESCRIPTION: Example showing a basic test suite structure with beforeAll/afterAll hooks and multiple test cases.

LANGUAGE: javascript
CODE:
import { test } from '@playwright/test';

test.describe('suite', () => {
  test.beforeAll(async () => { /* ... */ });
  test('first good', async ({ page }) => { /* ... */ });
  test('second flaky', async ({ page }) => { /* ... */ });
  test('third good', async ({ page }) => { /* ... */ });
  test.afterAll(async () => { /* ... */ });
});

----------------------------------------

TITLE: Creating and Using GitHub API Requests with Playwright in Python (Async)
DESCRIPTION: This snippet demonstrates how to create an APIRequestContext, make POST and DELETE requests to the GitHub API, and handle responses using Playwright's async API in Python.

LANGUAGE: python
CODE:
import os
import asyncio
from playwright.async_api import async_playwright, Playwright

REPO = "test-repo-1"
USER = "github-username"
API_TOKEN = os.getenv("GITHUB_API_TOKEN")

async def run(playwright: Playwright):
    browser = await playwright.chromium.launch()
    context = await browser.new_context(base_url="https://api.github.com")
    api_request_context = context.request
    page = await context.new_page()

    response = await api_request_context.post(
        "/user/repos",
        headers={
            "Accept": "application/vnd.github.v3+json",
            "Authorization": f"token {API_TOKEN}",
        },
        data={"name": REPO},
    )
    assert response.ok
    assert response.json()["name"] == REPO

    response = await api_request_context.delete(
        f"/repos/{USER}/{REPO}",
        headers={
            "Accept": "application/vnd.github.v3+json",
            "Authorization": f"token {API_TOKEN}",
        },
    )
    assert response.ok
    assert await response.body() == '{"status": "ok"}'

async def main():
    async with async_playwright() as playwright:
        await run(playwright)

asyncio.run(main())

----------------------------------------

TITLE: Advanced Screenshot Comparison in Playwright (JavaScript)
DESCRIPTION: Shows various usage examples of toMatchSnapshot, including passing options for customization, configuring image matching threshold, and structuring snapshot files.

LANGUAGE: javascript
CODE:
// Basic usage.
expect(await page.screenshot()).toMatchSnapshot('landing-page.png');

// Pass options to customize the snapshot comparison and have a generated name.
expect(await page.screenshot()).toMatchSnapshot('landing-page.png', {
  maxDiffPixels: 27, // allow no more than 27 different pixels.
});

// Configure image matching threshold.
expect(await page.screenshot()).toMatchSnapshot('landing-page.png', { threshold: 0.3 });

// Bring some structure to your snapshot files by passing file path segments.
expect(await page.screenshot()).toMatchSnapshot(['landing', 'step2.png']);
expect(await page.screenshot()).toMatchSnapshot(['landing', 'step3.png']);

----------------------------------------

TITLE: Installing Default Browsers with Playwright CLI
DESCRIPTION: Use the Playwright CLI to install the default browsers supported by Playwright.

LANGUAGE: bash
CODE:
npx playwright install

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install"

LANGUAGE: bash
CODE:
playwright install

LANGUAGE: bash
CODE:
pwsh bin/Debug/netX/playwright.ps1 install

----------------------------------------

TITLE: Configuring Playwright Projects for Multiple Environments
DESCRIPTION: This snippet demonstrates how to set up Playwright projects for different environments (staging and production) with different configurations like base URL and retry attempts.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  timeout: 60000, // Timeout is shared between all tests.
  projects: [
    {
      name: 'staging',
      use: {
        baseURL: 'staging.example.com',
      },
      retries: 2,
    },
    {
      name: 'production',
      use: {
        baseURL: 'production.example.com',
      },
      retries: 0,
    },
  ],
});

----------------------------------------

TITLE: Selecting Options from Dropdown in Playwright
DESCRIPTION: Illustrates how to select single or multiple options from a dropdown menu using Playwright's selectOption method. Options can be selected by value, label, or index.

LANGUAGE: javascript
CODE:
// Single selection matching the value or label
await page.getByLabel('Choose a color').selectOption('blue');

// Single selection matching the label
await page.getByLabel('Choose a color').selectOption({ label: 'Blue' });

// Multiple selected items
await page.getByLabel('Choose multiple colors').selectOption(['red', 'green', 'blue']);

----------------------------------------

TITLE: Basic Download Handling in JavaScript
DESCRIPTION: Demonstrates the basic approach to handle file downloads by waiting for the download event and saving the file to a specified location.

LANGUAGE: javascript
CODE:
// Start waiting for download before clicking. Note no await.
const downloadPromise = page.waitForEvent('download');
await page.getByText('Download file').click();
const download = await downloadPromise;

// Wait for the download process to complete and save the downloaded file somewhere.
await download.saveAs('/path/to/save/at/' + download.suggestedFilename());

----------------------------------------

TITLE: Handling TimeoutError in Java with Playwright
DESCRIPTION: Shows TimeoutError handling in Java using try-with-resources and try-catch blocks. Includes custom timeout configuration for element click operation.

LANGUAGE: java
CODE:
package org.example;

import com.microsoft.playwright.*;

public class TimeoutErrorExample {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      Browser browser = playwright.firefox().launch();
      BrowserContext context = browser.newContext();
      Page page = context.newPage();
      try {
        page.locator("text=Example").click(new Locator.ClickOptions().setTimeout(100));
      } catch (TimeoutError e) {
        System.out.println("Timeout!");
      }
    }
  }
}

----------------------------------------

TITLE: Drawing Square with Mouse Movement - C#
DESCRIPTION: Demonstrates mouse movement in C# to draw a 100x100 pixel square using the Page.Mouse API with async methods.

LANGUAGE: csharp
CODE:
await Page.Mouse.MoveAsync(0, 0);
await Page.Mouse.DownAsync();
await Page.Mouse.MoveAsync(0, 100);
await Page.Mouse.MoveAsync(100, 100);
await Page.Mouse.MoveAsync(100, 0);
await Page.Mouse.MoveAsync(0, 0);
await Page.Mouse.UpAsync();

----------------------------------------

TITLE: Accessing Frame Objects in Playwright
DESCRIPTION: Shows how to access frame objects using various methods such as frame name, URL pattern, or other selectors. The example demonstrates filling a username input field within the accessed frame.

LANGUAGE: javascript
CODE:
// Get frame using the frame's name attribute
const frame = page.frame('frame-login');

// Get frame using frame's URL
const frame = page.frame({ url: /.*domain.*/ });

// Interact with the frame
await frame.fill('#username-input', 'John');

LANGUAGE: java
CODE:
// Get frame using the frame"s name attribute
Frame frame = page.frame("frame-login");

// Get frame using frame"s URL
Frame frame = page.frameByUrl(Pattern.compile(".*domain.*"));

// Interact with the frame
frame.fill("#username-input", "John");

LANGUAGE: python
CODE:
# Get frame using the frame's name attribute
frame = page.frame('frame-login')

# Get frame using frame's URL
frame = page.frame(url=r'.*domain.*')

# Interact with the frame
frame.fill('#username-input', 'John')

LANGUAGE: csharp
CODE:
// Create a page.
var page = await context.NewPageAsync();

// Get frame using the frame's name attribute
var frame = page.Frame("frame-login");

// Get frame using frame's URL
var frame = page.FrameByUrl("*domain.");

// Get frame using any other selector
var frameElementHandle = await page.EvaluateAsync("window.frames[1]");
var frame = await frameElementHandle.ContentFrameAsync();

// Interact with the frame
await frame.FillAsync("#username-input", "John");

----------------------------------------

TITLE: Parallelizing Tests in a Single File (JavaScript)
DESCRIPTION: This code demonstrates how to configure tests in a single file to run in parallel using the test.describe.configure method.

LANGUAGE: javascript
CODE:
import { test } from '@playwright/test';

test.describe.configure({ mode: 'parallel' });

test('runs in parallel 1', async ({ page }) => { /* ... */ });
test('runs in parallel 2', async ({ page }) => { /* ... */ });

----------------------------------------

TITLE: Handling TimeoutError in Python Async with Playwright
DESCRIPTION: Shows TimeoutError handling in Python using async/await pattern with Playwright's async API. Includes custom timeout configuration and proper browser cleanup.

LANGUAGE: python
CODE:
import asyncio
from playwright.async_api import async_playwright, TimeoutError as PlaywrightTimeoutError, Playwright

async def run(playwright: Playwright):
    browser = await playwright.chromium.launch()
    page = await browser.new_page()
    try:
      await page.locator("text=Example").click(timeout=100)
    except PlaywrightTimeoutError:
      print("Timeout!")
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)

asyncio.run(main())

----------------------------------------

TITLE: Drawing Square with Mouse Movement - JavaScript
DESCRIPTION: Demonstrates how to use the page.mouse API to trace a 100x100 pixel square by moving the mouse cursor and using down/up events.

LANGUAGE: javascript
CODE:
await page.mouse.move(0, 0);
await page.mouse.down();
await page.mouse.move(0, 100);
await page.mouse.move(100, 100);
await page.mouse.move(100, 0);
await page.mouse.move(0, 0);
await page.mouse.up();

----------------------------------------

TITLE: Download Handling in Java
DESCRIPTION: Shows how to handle file downloads in Java using Playwright by waiting for the download event and saving the file.

LANGUAGE: java
CODE:
// Wait for the download to start
Download download = page.waitForDownload(() -> {
    // Perform the action that initiates download
    page.getByText("Download file").click();
});

// Wait for the download process to complete and save the downloaded file somewhere
download.saveAs(Paths.get("/path/to/save/at/", download.suggestedFilename()));

----------------------------------------

TITLE: Configuring TestOptions in Playwright Config
DESCRIPTION: Example of setting TestOptions in the Playwright configuration file. This snippet demonstrates how to configure headless mode, viewport size, HTTPS error handling, and video recording.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';
export default defineConfig({
  use: {
    headless: false,
    viewport: { width: 1280, height: 720 },
    ignoreHTTPSErrors: true,
    video: 'on-first-retry',
  },
});

----------------------------------------

TITLE: Configuring Custom Expect Instance in Playwright
DESCRIPTION: Demonstrates creating a pre-configured expect instance with custom timeout and soft assertion settings.

LANGUAGE: javascript
CODE:
const slowExpect = expect.configure({ timeout: 10000 });
await slowExpect(locator).toHaveText('Submit');

const softExpect = expect.configure({ soft: true });
await softExpect(locator).toHaveText('Submit');

----------------------------------------

TITLE: Configuring GitHub Actions for Playwright Tests in Python
DESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to run Playwright tests for a Python project. It includes steps for checking out the repository, setting up Python, installing dependencies, running tests, and uploading test traces.

LANGUAGE: yml
CODE:
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Ensure browsers are installed
      run: python -m playwright install --with-deps
    - name: Run your tests
      run: pytest --tracing=retain-on-failure
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-traces
        path: test-results/

----------------------------------------

TITLE: Setting FormData Fields in C#
DESCRIPTION: Shows how to create a FormData object and set various fields, including file uploads, using C# in Playwright.

LANGUAGE: csharp
CODE:
var multipart = Context.APIRequest.CreateFormData();
// Only name and value are set.
multipart.Set("firstName", "John");
// Name, value, filename and Content-Type are set.
multipart.Set("profilePicture", new FilePayload()
{
    Name = "john.jpg",
    MimeType = "image/jpeg",
    Buffer = File.ReadAllBytes("john.jpg")
});
multipart.Set("age", 30);
await Page.APIRequest.PostAsync("https://localhost/submit", new() { Multipart = multipart });

----------------------------------------

TITLE: Pressing Keys and Taking Screenshots in Playwright
DESCRIPTION: This code snippet demonstrates how to use the Keyboard API to press various keys and take screenshots after each action. It navigates to a keycode information website and performs a series of key presses.

LANGUAGE: javascript
CODE:
const page = await browser.newPage();
await page.goto('https://keycode.info');
await page.keyboard.press('A');
await page.screenshot({ path: 'A.png' });
await page.keyboard.press('ArrowLeft');
await page.screenshot({ path: 'ArrowLeft.png' });
await page.keyboard.press('Shift+O');
await page.screenshot({ path: 'O.png' });
await browser.close();

LANGUAGE: java
CODE:
Page page = browser.newPage();
page.navigate("https://keycode.info");
page.keyboard().press("A");
page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get("A.png")));
page.keyboard().press("ArrowLeft");
page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get("ArrowLeft.png")));
page.keyboard().press("Shift+O");
page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get("O.png")));
browser.close();

LANGUAGE: python
CODE:
page = await browser.new_page()
await page.goto("https://keycode.info")
await page.keyboard.press("a")
await page.screenshot(path="a.png")
await page.keyboard.press("ArrowLeft")
await page.screenshot(path="arrow_left.png")
await page.keyboard.press("Shift+O")
await page.screenshot(path="o.png")
await browser.close()

LANGUAGE: csharp
CODE:
await page.GotoAsync("https://keycode.info");
await page.Keyboard.PressAsync("A");
await page.ScreenshotAsync(new() { Path = "A.png" });
await page.Keyboard.PressAsync("ArrowLeft");
await page.ScreenshotAsync(new() { Path = "ArrowLeft.png" });
await page.Keyboard.PressAsync("Shift+O");
await page.ScreenshotAsync(new() { Path = "O.png" });
await browser.CloseAsync();

----------------------------------------

TITLE: Writing API Tests for GitHub Issue Creation in Java
DESCRIPTION: Demonstrates how to write API tests for creating issues in a GitHub repository using Playwright. Includes tests for creating bug reports and feature requests, and validating the created issues.

LANGUAGE: java
CODE:
package org.example;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.microsoft.playwright.APIRequest;
import com.microsoft.playwright.APIRequestContext;
import com.microsoft.playwright.APIResponse;
import com.microsoft.playwright.Playwright;
import com.microsoft.playwright.options.RequestOptions;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class TestGitHubAPI {
  private static final String REPO = "test-repo-2";
  private static final String USER = System.getenv("GITHUB_USER");
  private static final String API_TOKEN = System.getenv("GITHUB_API_TOKEN");

  private Playwright playwright;
  private APIRequestContext request;

  // ...

  @Test
  void shouldCreateBugReport() {
    Map<String, String> data = new HashMap<>();
    data.put("title", "[Bug] report 1");
    data.put("body", "Bug description");
    APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",
      RequestOptions.create().setData(data));
    assertTrue(newIssue.ok());

    APIResponse issues = request.get("/repos/" + USER + "/" + REPO + "/issues");
    assertTrue(issues.ok());
    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);
    JsonObject issue = null;
    for (JsonElement item : json) {
      JsonObject itemObj = item.getAsJsonObject();
      if (!itemObj.has("title")) {
        continue;
      }
      if ("[Bug] report 1".equals(itemObj.get("title").getAsString())) {
        issue = itemObj;
        break;
      }
    }
    assertNotNull(issue);
    assertEquals("Bug description", issue.get("body").getAsString(), issue.toString());
  }

  @Test
  void shouldCreateFeatureRequest() {
    Map<String, String> data = new HashMap<>();
    data.put("title", "[Feature] request 1");
    data.put("body", "Feature description");
    APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",
      RequestOptions.create().setData(data));
    assertTrue(newIssue.ok());

    APIResponse issues = request.get("/repos/" + USER + "/" + REPO + "/issues");
    assertTrue(issues.ok());
    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);
    JsonObject issue = null;
    for (JsonElement item : json) {
      JsonObject itemObj = item.getAsJsonObject();
      if (!itemObj.has("title")) {
        continue;
      }
      if ("[Feature] request 1".equals(itemObj.get("title").getAsString())) {
        issue = itemObj;
        break;
      }
    }
    assertNotNull(issue);
    assertEquals("Feature description", issue.get("body").getAsString(), issue.toString());
  }
}

----------------------------------------

TITLE: Executing Playwright Java Program with Maven
DESCRIPTION: Shows the Maven command to compile and run the Playwright Java program. This command will download necessary dependencies and browser binaries.

LANGUAGE: bash
CODE:
mvn compile exec:java -D exec.mainClass="org.example.App"

----------------------------------------

TITLE: Debugging Individual Tests
DESCRIPTION: Commands to debug specific test functions using Playwright Inspector across different shells.

LANGUAGE: bash
CODE:
PWDEBUG=1 pytest -s -k test_get_started_link

LANGUAGE: batch
CODE:
set PWDEBUG=1
pytest -s -k test_get_started_link

LANGUAGE: powershell
CODE:
$env:PWDEBUG=1
pytest -s -k test_get_started_link

----------------------------------------

TITLE: File Upload Handling in Java
DESCRIPTION: Shows file upload implementation using FileChooser in Java. Demonstrates waiting for file chooser and setting file path.

LANGUAGE: java
CODE:
FileChooser fileChooser = page.waitForFileChooser(() -> page.getByText("Upload file").click());
fileChooser.setFiles(Paths.get("myfile.pdf"));

----------------------------------------

TITLE: Pressing Uppercase A in Playwright
DESCRIPTION: This code snippet shows how to press the uppercase 'A' key using the Keyboard API in Playwright. It demonstrates two equivalent ways to achieve this.

LANGUAGE: javascript
CODE:
await page.keyboard.press('Shift+KeyA');
// or
await page.keyboard.press('Shift+A');

LANGUAGE: java
CODE:
page.keyboard().press("Shift+KeyA");
// or
page.keyboard().press("Shift+A");

LANGUAGE: python
CODE:
await page.keyboard.press("Shift+KeyA")
# or
await page.keyboard.press("Shift+A")

LANGUAGE: csharp
CODE:
await page.Keyboard.PressAsync("Shift+KeyA");
// or
await page.Keyboard.PressAsync("Shift+A");

----------------------------------------

TITLE: Handling Dialog Events in Java with Playwright
DESCRIPTION: This snippet shows how to handle dialog events in a Playwright script using Java. It creates a Playwright instance, launches a Chromium browser, sets up a dialog event listener, and triggers an alert.

LANGUAGE: java
CODE:
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType chromium = playwright.chromium();
      Browser browser = chromium.launch();
      Page page = browser.newPage();
      page.onDialog(dialog -> {
        System.out.println(dialog.message());
        dialog.dismiss();
      });
      page.evaluate("alert('1')");
      browser.close();
    }
  }
}

----------------------------------------

TITLE: Overriding TestOptions in a Test File
DESCRIPTION: Example of overriding TestOptions for a specific test file using the Test.use method. This snippet shows how to set a custom viewport size for tests in a particular file.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

// Run tests in this file with portrait-like viewport.
test.use({ viewport: { width: 600, height: 900 } });

test('my portrait test', async ({ page }) => {
  // ...
});

----------------------------------------

TITLE: Debug Test With Page Pause
DESCRIPTION: Adds a pause point in the test execution for debugging purposes using page.pause() method

LANGUAGE: javascript
CODE:
await page.pause();

LANGUAGE: python
CODE:
await page.pause()

LANGUAGE: java
CODE:
page.pause();

LANGUAGE: csharp
CODE:
await page.PauseAsync();

----------------------------------------

TITLE: Configuring Serial Mode for Tests (JavaScript)
DESCRIPTION: This code shows how to configure a group of tests to run in serial mode, including setup and teardown steps.

LANGUAGE: javascript
CODE:
import { test, type Page } from '@playwright/test';

// Annotate entire file as serial.
test.describe.configure({ mode: 'serial' });

let page: Page;

test.beforeAll(async ({ browser }) => {
  page = await browser.newPage();
});

test.afterAll(async () => {
  await page.close();
});

test('runs first', async () => {
  await page.goto('https://playwright.dev/');
});

test('runs second', async () => {
  await page.getByText('Get Started').click();
});

----------------------------------------

TITLE: File Upload Handling in Python (Async)
DESCRIPTION: Demonstrates asynchronous file upload handling in Python using async context manager for FileChooser.

LANGUAGE: python
CODE:
async with page.expect_file_chooser() as fc_info:
    await page.get_by_text("Upload file").click()
file_chooser = await fc_info.value
await file_chooser.set_files("myfile.pdf")

----------------------------------------

TITLE: Creating JSHandle with Page.evaluateHandle in Multiple Languages
DESCRIPTION: Demonstrates how to create a JSHandle object representing the window object using Page.evaluateHandle method in different programming languages.

LANGUAGE: javascript
CODE:
const windowHandle = await page.evaluateHandle(() => window);
// ...

LANGUAGE: java
CODE:
JSHandle windowHandle = page.evaluateHandle("() => window");
// ...

LANGUAGE: python
CODE:
window_handle = await page.evaluate_handle("window")
# ...

LANGUAGE: csharp
CODE:
var windowHandle = await page.EvaluateHandleAsync("() => window");

----------------------------------------

TITLE: Updating Battery Status Mock in Playwright
DESCRIPTION: This snippet shows how to create a dynamic mock for the Battery API that can be updated during the test. It implements a BatteryMock class with methods to update the battery level and charging status, and demonstrates testing UI updates.

LANGUAGE: javascript
CODE:
test('update battery status (no golden)', async ({ page }) => {
  await page.addInitScript(() => {
    // Mock class that will notify corresponding listeners when battery status changes.
    class BatteryMock {
      level = 0.10;
      charging = false;
      chargingTime = 1800;
      dischargingTime = Infinity;
      _chargingListeners = [];
      _levelListeners = [];
      addEventListener(eventName, listener) {
        if (eventName === 'chargingchange')
          this._chargingListeners.push(listener);
        if (eventName === 'levelchange')
          this._levelListeners.push(listener);
      }
      // Will be called by the test.
      _setLevel(value) {
        this.level = value;
        this._levelListeners.forEach(cb => cb());
      }
      _setCharging(value) {
        this.charging = value;
        this._chargingListeners.forEach(cb => cb());
      }
    }
    const mockBattery = new BatteryMock();
    // Override the method to always return mock battery info.
    window.navigator.getBattery = async () => mockBattery;
    // Save the mock object on window for easier access.
    window.mockBattery = mockBattery;
  });

  await page.goto('/');
  await expect(page.locator('.battery-percentage')).toHaveText('10%');

  // Update level to 27.5%
  await page.evaluate(() => window.mockBattery._setLevel(0.275));
  await expect(page.locator('.battery-percentage')).toHaveText('27.5%');
  await expect(page.locator('.battery-status')).toHaveText('Battery');

  // Emulate connected adapter
  await page.evaluate(() => window.mockBattery._setCharging(true));
  await expect(page.locator('.battery-status')).toHaveText('Adapter');
  await expect(page.locator('.battery-fully')).toHaveText('00:30');
});

----------------------------------------

TITLE: Locator Chaining and Filtering in Playwright
DESCRIPTION: Shows best practices for using chained locators and filters to precisely target elements.

LANGUAGE: javascript
CODE:
await page
    .getByRole('listitem')
    .filter({ hasText: 'Product 2' })
    .getByRole('button', { name: 'Add to cart' })
    .click();

----------------------------------------

TITLE: Creating and Using a New Browser Context in Python (Sync)
DESCRIPTION: Shows how to create a new incognito browser context, create a page, navigate to a URL, and close the context using synchronous Python.

LANGUAGE: python
CODE:
# create a new incognito browser context
context = browser.new_context()
# create a new page inside context.
page = context.new_page()
page.goto("https://example.com")
# dispose context once it is no longer needed.
context.close()

----------------------------------------

TITLE: Capturing Accessibility Snapshot in Java
DESCRIPTION: This snippet shows how to capture and print the accessibility snapshot in Java.

LANGUAGE: java
CODE:
String snapshot = page.accessibility().snapshot();
System.out.println(snapshot);

----------------------------------------

TITLE: Object Reference Comparison with toBe
DESCRIPTION: Demonstrates using toBe() for comparing object references and primitive values.

LANGUAGE: javascript
CODE:
const value = { prop: 1 };
expect(value).toBe(value);
expect(value).not.toBe({});
expect(value.prop).toBe(1);

----------------------------------------

TITLE: Handling Console Messages in Java
DESCRIPTION: Examples of listening for console messages, handling errors, and accessing console message arguments in Java using Playwright.

LANGUAGE: java
CODE:
// Listen for all console messages and print them to the standard output.
page.onConsoleMessage(msg -> System.out.println(msg.text()));

// Listen for all console messages and print errors to the standard output.
page.onConsoleMessage(msg -> {
  if ("error".equals(msg.type()))
    System.out.println("Error text: " + msg.text());
});

// Get the next console message
ConsoleMessage msg = page.waitForConsoleMessage(() -> {
  // Issue console.log inside the page
  page.evaluate("console.log('hello', 42, { foo: 'bar' });");
});

// Deconstruct console.log arguments
msg.args().get(0).jsonValue(); // hello
msg.args().get(1).jsonValue(); // 42

----------------------------------------

TITLE: Setting Base URL in Playwright Config
DESCRIPTION: Example of configuring the base URL for tests in the Playwright configuration file. This setting is used as the prefix for relative URLs in navigation actions.

LANGUAGE: javascript
CODE:
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  use: {
    /* Base URL to use in actions like `await page.goto('/')`. */
    baseURL: 'http://localhost:3000',
  },
});

----------------------------------------

TITLE: Installing Playwright via VS Code Command Palette
DESCRIPTION: Use the VS Code command palette to install Playwright by typing 'Install Playwright' and selecting 'Test: Install Playwright'.

LANGUAGE: bash
CODE:
Install Playwright

----------------------------------------

TITLE: Emulating Devices in Playwright
DESCRIPTION: Shows how to use predefined device settings to emulate specific devices in Playwright tests and scripts.

LANGUAGE: javascript
CODE:
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'chromium',
      use: {
        ...devices['Desktop Chrome'],
      },
    },
    {
      name: 'Mobile Safari',
      use: {
        ...devices['iPhone 13'],
      },
    },
  ],
});

LANGUAGE: javascript
CODE:
const { chromium, devices } = require('playwright');
const browser = await chromium.launch();

const iphone13 = devices['iPhone 13'];
const context = await browser.newContext({
  ...iphone13,
});

----------------------------------------

TITLE: Running Playwright Codegen in Python
DESCRIPTION: Command to start the Playwright test generator in Python targeting a specific URL

LANGUAGE: bash
CODE:
playwright codegen demo.playwright.dev/todomvc

----------------------------------------

TITLE: Basic Value Assertion in Playwright Tests
DESCRIPTION: Demonstrates how to use the basic expect assertion to compare values in Playwright tests.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('assert a value', async ({ page }) => {
  const value = 1;
  expect(value).toBe(2);
});

----------------------------------------

TITLE: Performing Drag and Drop Operations in Playwright
DESCRIPTION: Demonstrates how to perform drag and drop operations using Playwright's dragTo method, as well as a manual approach using lower-level mouse operations.

LANGUAGE: javascript
CODE:
// Using dragTo method
await page.locator('#item-to-be-dragged').dragTo(page.locator('#item-to-drop-at'));

// Manual drag and drop
await page.locator('#item-to-be-dragged').hover();
await page.mouse.down();
await page.locator('#item-to-drop-at').hover();
await page.mouse.up();

----------------------------------------

TITLE: Creating and Using GitHub API Requests with Playwright in Python (Sync)
DESCRIPTION: This snippet shows how to create an APIRequestContext, make POST and DELETE requests to the GitHub API, and handle responses using Playwright's synchronous API in Python.

LANGUAGE: python
CODE:
import os
from playwright.sync_api import sync_playwright

REPO = "test-repo-1"
USER = "github-username"
API_TOKEN = os.getenv("GITHUB_API_TOKEN")

with sync_playwright() as p:
    browser = p.chromium.launch()
    context = browser.new_context(base_url="https://api.github.com")
    api_request_context = context.request
    page = context.new_page()

    response = api_request_context.post(
        "/user/repos",
        headers={
            "Accept": "application/vnd.github.v3+json",
            "Authorization": f"token {API_TOKEN}",
        },
        data={"name": REPO},
    )
    assert response.ok
    assert response.json()["name"] == REPO

    response = api_request_context.delete(
        f"/repos/{USER}/{REPO}",
        headers={
            "Accept": "application/vnd.github.v3+json",
            "Authorization": f"token {API_TOKEN}",
        },
    )
    assert response.ok
    assert await response.body() == '{"status": "ok"}'

----------------------------------------

TITLE: Download Handling in C#
DESCRIPTION: Demonstrates download handling in C# using async/await pattern and task-based asynchronous programming.

LANGUAGE: csharp
CODE:
// Start the task of waiting for the download before clicking
var waitForDownloadTask = page.WaitForDownloadAsync();
await page.GetByText("Download file").ClickAsync();
var download = await waitForDownloadTask;

// Wait for the download process to complete and save the downloaded file somewhere
await download.SaveAsAsync("/path/to/save/at/" + download.SuggestedFilename);

----------------------------------------

TITLE: Running Playwright Codegen in JavaScript
DESCRIPTION: Command to start the Playwright test generator targeting a specific URL using npx

LANGUAGE: bash
CODE:
npx playwright codegen demo.playwright.dev/todomvc

----------------------------------------

TITLE: File Upload Handling in C#
DESCRIPTION: Demonstrates file upload implementation using FileChooser in C#. Shows waiting for file chooser and setting files asynchronously.

LANGUAGE: csharp
CODE:
var fileChooser = await page.RunAndWaitForFileChooserAsync(async () =>
{
    await page.GetByText("Upload file").ClickAsync();
});
await fileChooser.SetFilesAsync("temp.txt");

----------------------------------------

TITLE: Selecting and Deleting Text with Keyboard in Playwright
DESCRIPTION: This code snippet demonstrates how to use the Keyboard API to type text, select a portion of it using Shift and arrow keys, and then delete the selected text. It's implemented in multiple languages.

LANGUAGE: javascript
CODE:
await page.keyboard.type('Hello World!');
await page.keyboard.press('ArrowLeft');

await page.keyboard.down('Shift');
for (let i = 0; i < ' World'.length; i++)
  await page.keyboard.press('ArrowLeft');
await page.keyboard.up('Shift');

await page.keyboard.press('Backspace');
// Result text will end up saying 'Hello!'

LANGUAGE: java
CODE:
page.keyboard().type("Hello World!");
page.keyboard().press("ArrowLeft");
page.keyboard().down("Shift");
for (int i = 0; i < " World".length(); i++)
  page.keyboard().press("ArrowLeft");
page.keyboard().up("Shift");
page.keyboard().press("Backspace");
// Result text will end up saying "Hello!"

LANGUAGE: python
CODE:
await page.keyboard.type("Hello World!")
await page.keyboard.press("ArrowLeft")
await page.keyboard.down("Shift")
for i in range(6):
    await page.keyboard.press("ArrowLeft")
await page.keyboard.up("Shift")
await page.keyboard.press("Backspace")
# result text will end up saying "Hello!"

LANGUAGE: csharp
CODE:
await page.Keyboard.TypeAsync("Hello World!");
await page.Keyboard.PressAsync("ArrowLeft");

await page.Keyboard.DownAsync("Shift");
for (int i = 0; i < " World".Length; i++)
    await page.Keyboard.PressAsync("ArrowLeft");

await page.Keyboard.UpAsync("Shift");

await page.Keyboard.PressAsync("Backspace");
// Result text will end up saying "Hello!"

----------------------------------------

TITLE: Setting Screenshot Options in Playwright Config
DESCRIPTION: Example of configuring automatic screenshot capture after tests in the Playwright configuration file. This snippet sets the screenshot mode to 'only-on-failure'.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    screenshot: 'only-on-failure',
  },
});

----------------------------------------

TITLE: Installing Playwright with Package Managers
DESCRIPTION: Commands to install Playwright using different package managers (npm, yarn, pnpm).

LANGUAGE: bash
CODE:
npm init playwright@latest

LANGUAGE: bash
CODE:
yarn create playwright

LANGUAGE: bash
CODE:
pnpm create playwright

----------------------------------------

TITLE: Run Playwright Test in Debug Mode
DESCRIPTION: Command to run Playwright tests in debug mode with different environment configurations

LANGUAGE: bash
CODE:
npx playwright test --debug

LANGUAGE: bash
CODE:
PWDEBUG=1 pytest -s

LANGUAGE: batch
CODE:
set PWDEBUG=1
pytest -s

LANGUAGE: powershell
CODE:
$env:PWDEBUG=1
pytest -s

----------------------------------------

TITLE: Implementing Pan Gesture in Playwright
DESCRIPTION: Shows how to emulate a pan gesture by dispatching touchstart, touchmove, and touchend events to move a map interface. Includes calculating touch coordinates and handling touch point movement across multiple steps.

LANGUAGE: javascript
CODE:
async function pan(locator: Locator, deltaX?: number, deltaY?: number, steps?: number) {
  const { centerX, centerY } = await locator.evaluate((target: HTMLElement) => {
    const bounds = target.getBoundingClientRect();
    const centerX = bounds.left + bounds.width / 2;
    const centerY = bounds.top + bounds.height / 2;
    return { centerX, centerY };
  });

  const touches = [{
    identifier: 0,
    clientX: centerX,
    clientY: centerY,
  }];
  await locator.dispatchEvent('touchstart',
      { touches, changedTouches: touches, targetTouches: touches });

  steps = steps ?? 5;
  deltaX = deltaX ?? 0;
  deltaY = deltaY ?? 0;
  for (let i = 1; i <= steps; i++) {
    const touches = [{
      identifier: 0,
      clientX: centerX + deltaX * i / steps,
      clientY: centerY + deltaY * i / steps,
    }];
    await locator.dispatchEvent('touchmove',
        { touches, changedTouches: touches, targetTouches: touches });
  }

  await locator.dispatchEvent('touchend');
}

----------------------------------------

TITLE: Writing Data to AndroidSocket in JavaScript
DESCRIPTION: Asynchronous method to write data to the AndroidSocket. The data parameter should be a Buffer containing the information to be sent.

LANGUAGE: js
CODE:
await AndroidSocket.write(dataBuffer);

----------------------------------------

TITLE: Using Page Fixture for Web Interaction
DESCRIPTION: Demonstrates a complete example of using the page fixture to navigate, fill forms, and click buttons in a web application.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }) => {
  await page.goto('/signin');
  await page.getByLabel('User Name').fill('user');
  await page.getByLabel('Password').fill('password');
  await page.getByText('Sign in').click();
  // ...
});

----------------------------------------

TITLE: Creating a Page and Taking a Screenshot in Java
DESCRIPTION: This example shows how to create a new page, navigate to a URL, and take a screenshot using Playwright in Java.

LANGUAGE: java
CODE:
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType webkit = playwright.webkit();
      Browser browser = webkit.launch();
      BrowserContext context = browser.newContext();
      Page page = context.newPage();
      page.navigate("https://example.com");
      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get("screenshot.png")));
      browser.close();
    }
  }
}

----------------------------------------

TITLE: Handling Dialog Events in Python (Sync) with Playwright
DESCRIPTION: This snippet shows how to handle dialog events in a Playwright script using Python's sync API. It creates a sync Playwright instance, launches a Chromium browser, sets up a dialog event listener, and triggers an alert.

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright, Playwright

def handle_dialog(dialog):
    print(dialog.message)
    dialog.dismiss()

def run(playwright: Playwright):
    chromium = playwright.chromium
    browser = chromium.launch()
    page = browser.new_page()
    page.on("dialog", handle_dialog)
    page.evaluate("alert('1')")
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

----------------------------------------

TITLE: Global Timeout Configuration in Python
DESCRIPTION: Shows how to set global timeout settings for all Playwright assertions in Python using expect.set_options()

LANGUAGE: python
CODE:
from playwright.sync_api import expect

expect.set_options(timeout=10_000)

----------------------------------------

TITLE: Interacting with Android UI Elements in JavaScript
DESCRIPTION: Examples of methods for interacting with UI elements on an Android device, such as tapping, dragging, and filling input fields.

LANGUAGE: javascript
CODE:
await androidDevice.tap({ text: 'Submit' });

await androidDevice.drag({ text: 'Drag me' }, { x: 100, y: 200 });

await androidDevice.fill({ resourceId: 'input-field' }, 'Hello, Android!');

----------------------------------------

TITLE: Setting Up and Tearing Down GitHub Test Repository in Java
DESCRIPTION: Shows how to create a test repository before running API tests and delete it afterwards using Playwright's API request context. This ensures a clean test environment for each test run.

LANGUAGE: java
CODE:
public class TestGitHubAPI {
  // ...

  void createTestRepository() {
    APIResponse newRepo = request.post("/user/repos",
      RequestOptions.create().setData(Collections.singletonMap("name", REPO)));
    assertTrue(newRepo.ok(), newRepo.text());
  }

  @BeforeAll
  void beforeAll() {
    createPlaywright();
    createAPIRequestContext();
    createTestRepository();
  }

  void deleteTestRepository() {
    if (request != null) {
      APIResponse deletedRepo = request.delete("/repos/" + USER + "/" + REPO);
      assertTrue(deletedRepo.ok());
    }
  }
  // ...

  @AfterAll
  void afterAll() {
    deleteTestRepository();
    disposeAPIRequestContext();
    closePlaywright();
  }
}

----------------------------------------

TITLE: Configuring Emulation Options in Playwright
DESCRIPTION: Setup for device emulation including color scheme, geolocation, locale, permissions, timezone, and viewport settings.

LANGUAGE: typescript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    colorScheme: 'dark',
    geolocation: { longitude: 12.492507, latitude: 41.889938 },
    locale: 'en-GB',
    permissions: ['geolocation'],
    timezoneId: 'Europe/Paris',
    viewport: { width: 1280, height: 720 },
  },
});

----------------------------------------

TITLE: Annotating Tests in Playwright
DESCRIPTION: Demonstrates how to add detailed annotations to tests, including a type and description. This example shows annotating a test with an issue URL.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('test login page', {
  annotation: {
    type: 'issue',
    description: 'https://github.com/microsoft/playwright/issues/23180',
  },
}, async ({ page }) => {
  // ...
});

----------------------------------------

TITLE: Performing Mouse Clicks in Playwright
DESCRIPTION: Demonstrates various types of mouse clicks including single click, double click, right click, and clicks with modifier keys using Playwright's click method.

LANGUAGE: javascript
CODE:
// Generic click
await page.getByRole('button').click();

// Double click
await page.getByText('Item').dblclick();

// Right click
await page.getByText('Item').click({ button: 'right' });

// Shift + click
await page.getByText('Item').click({ modifiers: ['Shift'] });

// Ctrl + click on Windows and Linux
// Meta + click on macOS
await page.getByText('Item').click({ modifiers: ['ControlOrMeta'] });

// Hover over element
await page.getByText('Item').hover();

// Click the top left corner
await page.getByText('Item').click({ position: { x: 0, y: 0 } });

----------------------------------------

TITLE: Focusing a Test in Playwright
DESCRIPTION: Demonstrates how to focus on a specific test using the .only() method. When focused tests are present, only those tests will run in the entire project.

LANGUAGE: javascript
CODE:
test.only('focus this test', async ({ page }) => {
  // Run only focused tests in the entire project.
});

----------------------------------------

TITLE: Handling AndroidDevice Events in JavaScript
DESCRIPTION: Examples of event handlers for the 'close' and 'webView' events on an AndroidDevice instance.

LANGUAGE: javascript
CODE:
androidDevice.on('close', (device) => {
  console.log('Device connection closed');
});

androidDevice.on('webView', (webView) => {
  console.log('New WebView detected');
});

----------------------------------------

TITLE: Fetching and Modifying Response in Playwright
DESCRIPTION: Shows how to fetch a response, modify it, and then fulfill the route with the modified response using Route.fetch and Route.fulfill methods.

LANGUAGE: javascript
CODE:
await page.route('https://dog.ceo/api/breeds/list/all', async route => {
  const response = await route.fetch();
  const json = await response.json();
  json.message['big_red_dog'] = [];
  await route.fulfill({ response, json });
});

----------------------------------------

TITLE: Response Class Methods - Multiple Languages
DESCRIPTION: Core response handling methods including body access, header manipulation, and status checking. Methods are implemented across JavaScript, Python, and C# with slight variations.

LANGUAGE: javascript
CODE:
// Example method signatures:

async Response.allHeaders() // Returns Object<string, string>
async Response.body() // Returns Buffer
async Response.json() // Returns Serializable
async Response.text() // Returns string
Response.status() // Returns int
Response.statusText() // Returns string
Response.url() // Returns string

----------------------------------------

TITLE: Handling Dialog Events in C# with Playwright
DESCRIPTION: This snippet demonstrates how to handle dialog events in a Playwright script using C#. It creates a Playwright instance, launches a Chromium browser, sets up a dialog event listener, and triggers an alert.

LANGUAGE: csharp
CODE:
using Microsoft.Playwright;
using System.Threading.Tasks;

class DialogExample
{
    public static async Task Run()
    {
        using var playwright = await Playwright.CreateAsync();
        await using var browser = await playwright.Chromium.LaunchAsync();
        var page = await browser.NewPageAsync();

        page.Dialog += async (_, dialog) =>
        {
            System.Console.WriteLine(dialog.Message);
            await dialog.DismissAsync();
        };

        await page.EvaluateAsync("alert('1');");
    }
}

----------------------------------------

TITLE: Configuring Retries in Playwright Config
DESCRIPTION: Configuration example showing how to set up test retries in the Playwright config file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // Give failing tests 3 retry attempts
  retries: 3,
});

----------------------------------------

TITLE: Capturing Accessibility Snapshot in C#
DESCRIPTION: This snippet demonstrates how to capture and serialize the accessibility snapshot in C#.

LANGUAGE: csharp
CODE:
var accessibilitySnapshot = await page.Accessibility.SnapshotAsync();
Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(accessibilitySnapshot));

----------------------------------------

TITLE: Signing in Before Each Test (Java)
DESCRIPTION: Demonstrates how to sign in programmatically before each test in Java.

LANGUAGE: java
CODE:
Page page = context.newPage();
page.navigate("https://github.com/login");
page.getByLabel("Username or email address").fill("username");
page.getByLabel("Password").fill("password");
page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName("Sign in"))
    .click();

----------------------------------------

TITLE: Tagging Tests in Playwright
DESCRIPTION: Demonstrates how to tag tests for filtering and organization. Tags can be added using an object or by including @-prefixed tags in the test title.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('test login page', {
  tag: '@fast',
}, async ({ page }) => {
  // ...
});

test('test full report @slow', async ({ page }) => {
  // ...
});

----------------------------------------

TITLE: Handling WebErrors in Java with Playwright
DESCRIPTION: Shows how to set up a WebError handler in Java to log uncaught exceptions and navigate to a page that throws an error.

LANGUAGE: java
CODE:
// Log all uncaught errors to the terminal
context.onWebError(webError -> {
  System.out.println("Uncaught exception: " + webError.error());
});

// Navigate to a page with an exception.
page.navigate("data:text/html,<script>throw new Error('Test')</script>");

----------------------------------------

TITLE: Playwright Config with Screenshot Options
DESCRIPTION: Configuration file showing how to set global screenshot comparison options in Playwright config.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';
export default defineConfig({
  expect: {
    toHaveScreenshot: { maxDiffPixels: 100 },
  },
});

----------------------------------------

TITLE: Runtime Retry Detection in Playwright Tests
DESCRIPTION: Example showing how to detect retries at runtime using TestInfo.retry property.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('my test', async ({ page }, testInfo) => {
  if (testInfo.retry)
    await cleanSomeCachesOnTheServer();
  // ...
});

----------------------------------------

TITLE: Capturing Accessibility Snapshot in Python (Async)
DESCRIPTION: This snippet demonstrates capturing and printing the accessibility snapshot using async Python.

LANGUAGE: python
CODE:
snapshot = await page.accessibility.snapshot()
print(snapshot)

----------------------------------------

TITLE: Device Emulation in Playwright
DESCRIPTION: Examples demonstrating how to use Playwright's device emulation capabilities to test websites with different device profiles. Shows implementation across multiple languages.

LANGUAGE: javascript
CODE:
const { webkit, devices } = require('playwright');
const iPhone = devices['iPhone 6'];

(async () => {
  const browser = await webkit.launch();
  const context = await browser.newContext({
    ...iPhone
  });
  const page = await context.newPage();
  await page.goto('http://example.com');
  // other actions...
  await browser.close();
})();

LANGUAGE: csharp
CODE:
using Microsoft.Playwright;
using System.Threading.Tasks;

class PlaywrightExample
{
    public static async Task Main()
    {
        using var playwright = await Playwright.CreateAsync();
        await using var browser = await playwright.Webkit.LaunchAsync();
        await using var context = await browser.NewContextAsync(playwright.Devices["iPhone 6"]);

        var page = await context.NewPageAsync();
        await page.GotoAsync("https://www.theverge.com");
        // other actions...
    }
}

----------------------------------------

TITLE: Global Timeout Configuration in C#
DESCRIPTION: Demonstrates setting global timeout configuration in C# for different test frameworks (MSTest, NUnit, xUnit)

LANGUAGE: csharp
CODE:
using Microsoft.Playwright;
using Microsoft.Playwright.NUnit;
using NUnit.Framework;

namespace PlaywrightTests;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class Tests : PageTest
{
    [OneTimeSetUp]
    public void GlobalSetup()
    {
        SetDefaultExpectTimeout(10_000);
    }
    // ...
}

----------------------------------------

TITLE: Video Recording with Browser Context in JS Library
DESCRIPTION: Shows how to set up video recording when manually creating a browser context using the Playwright JavaScript library.

LANGUAGE: javascript
CODE:
const context = await browser.newContext({ recordVideo: { dir: 'videos/' } });
// Make sure to await close, so that videos are saved.
await context.close();

----------------------------------------

TITLE: Page Reuse Between Tests in Playwright
DESCRIPTION: Example showing how to reuse a single Page object across multiple tests using beforeAll and afterAll hooks.

LANGUAGE: javascript
CODE:
const { test } = require('@playwright/test');

test.describe.configure({ mode: 'serial' });

/** @type {import('@playwright/test').Page} */
let page;

test.beforeAll(async ({ browser }) => {
  page = await browser.newPage();
});

test.afterAll(async () => {
  await page.close();
});

test('runs first', async () => {
  await page.goto('https://playwright.dev/');
});

test('runs second', async () => {
  await page.getByText('Get Started').click();
});

LANGUAGE: typescript
CODE:
import { test, type Page } from '@playwright/test';

test.describe.configure({ mode: 'serial' });

let page: Page;

test.beforeAll(async ({ browser }) => {
  page = await browser.newPage();
});

test.afterAll(async () => {
  await page.close();
});

test('runs first', async () => {
  await page.goto('https://playwright.dev/');
});

test('runs second', async () => {
  await page.getByText('Get Started').click();
});

----------------------------------------

TITLE: Page Navigation and Element Interaction
DESCRIPTION: Examples of basic page navigation and element interactions using Playwright locators.

LANGUAGE: csharp
CODE:
await Page.GotoAsync("https://playwright.dev");

// Create a locator.
var getStarted = Page.GetByRole(AriaRole.Link, new() { Name = "Get started" });

// Click it.
await getStarted.ClickAsync();

----------------------------------------

TITLE: Configuring Conditional Reporters in Playwright Config
DESCRIPTION: Shows how to set up different reporters for CI and local environments in the Playwright configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // Concise 'dot' for CI, default 'list' when running locally
  reporter: process.env.CI ? 'dot' : 'list',
});

----------------------------------------

TITLE: Running Tagged Tests in Playwright
DESCRIPTION: Demonstrates how to run tests with specific tags using the --grep command line option.

LANGUAGE: bash
CODE:
npx playwright test --grep @fast

LANGUAGE: powershell
CODE:
npx playwright test --grep "@fast"

LANGUAGE: batch
CODE:
npx playwright test --grep @fast

----------------------------------------

TITLE: Testing Status Change with Playwright Assertions in C#
DESCRIPTION: Demonstrates how to use Playwright assertions in a C# test to check if an element's status text changes to 'Submitted' after clicking a button.

LANGUAGE: csharp
CODE:
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;

namespace PlaywrightTests;

[TestClass]
public class ExampleTests : PageTest
{
    [TestMethod]
    public async Task StatusBecomesSubmitted()
    {
        await Page.GetByRole(AriaRole.Button, new() { Name = "Submit" }).ClickAsync();
        await Expect(Page.Locator(".status")).ToHaveTextAsync("Submitted");
    }
}

----------------------------------------

TITLE: Basic Component Test Example in React
DESCRIPTION: Example showing how to mount a React component and test click event handling

LANGUAGE: javascript
CODE:
test('event should work', async ({ mount }) => {
  let clicked = false;

  // Mount a component. Returns locator pointing to the component.
  const component = await mount(
    <Button title="Submit" onClick={() => { clicked = true }}></Button>
  );

  // As with any Playwright test, assert locator text.
  await expect(component).toContainText('Submit');

  // Perform locator click. This will trigger the event.
  await component.click();

  // Assert that respective events have been fired.
  expect(clicked).toBeTruthy();
});

----------------------------------------

TITLE: Playwright Test with Path Mapping
DESCRIPTION: Example test file showing usage of path mapping imports in Playwright tests.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';
import { username, password } from '@myhelper/credentials';

test('example', async ({ page }) => {
  await page.getByLabel('User Name').fill(username);
  await page.getByLabel('Password').fill(password);
});

----------------------------------------

TITLE: Setting Up Test Isolation in Playwright Java
DESCRIPTION: Demonstrates how to create a new BrowserContext for test isolation in Playwright.

LANGUAGE: java
CODE:
Browser browser = playwright.chromium().launch();
BrowserContext context = browser.newContext();
Page page = context.newPage();

----------------------------------------

TITLE: Example Test Using Authenticated State (JavaScript)
DESCRIPTION: Demonstrates a test that uses the pre-authenticated state.

LANGUAGE: javascript
CODE:
import { test } from '@playwright/test';

test('test', async ({ page }) => {
  // page is authenticated
});

----------------------------------------

TITLE: Configuring Multiple Reporters in Playwright Config
DESCRIPTION: Demonstrates how to configure multiple reporters simultaneously in the Playwright configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [
    ['list'],
    ['json', {  outputFile: 'test-results.json' }]
  ],
});

----------------------------------------

TITLE: Handling Request Redirects
DESCRIPTION: Examples showing how to handle and inspect request redirects across different programming languages.

LANGUAGE: javascript
CODE:
const response = await page.goto('http://example.com');
console.log(response.request().redirectedFrom().url()); // 'http://example.com'

LANGUAGE: java
CODE:
Response response = page.navigate("http://example.com");
System.out.println(response.request().redirectedFrom().url()); // "http://example.com"

LANGUAGE: python
CODE:
response = await page.goto("http://example.com")
print(response.request.redirected_from.url) # "http://example.com"

LANGUAGE: csharp
CODE:
var response = await page.GotoAsync("http://www.microsoft.com");
Console.WriteLine(response.Request.RedirectedFrom?.Url); // http://www.microsoft.com

----------------------------------------

TITLE: Fulfilling a Route Request with Custom Response in Playwright
DESCRIPTION: Demonstrates how to fulfill a route's request with a custom response using the Route.fulfill method.

LANGUAGE: javascript
CODE:
await page.route('**/*', async route => {
  await route.fulfill({
    status: 404,
    contentType: 'text/plain',
    body: 'Not Found!'
  });
});

----------------------------------------

TITLE: Conditionally Skipping Test Groups in Playwright
DESCRIPTION: Demonstrates how to conditionally skip a group of tests based on a browser condition. This example runs the tests only in Chromium.

LANGUAGE: javascript
CODE:
test.describe('chromium only', () => {
  test.skip(({ browserName }) => browserName !== 'chromium', 'Chromium only!');

  test.beforeAll(async () => {
    // This hook is only run in Chromium.
  });

  test('test 1', async ({ page }) => {
    // This test is only run in Chromium.
  });

  test('test 2', async ({ page }) => {
    // This test is only run in Chromium.
  });
});

----------------------------------------

TITLE: Handling Dialog Events in JavaScript with Playwright
DESCRIPTION: This snippet demonstrates how to handle dialog events in a Playwright script using JavaScript. It launches a Chromium browser, creates a new page, sets up a dialog event listener, and triggers an alert.

LANGUAGE: javascript
CODE:
const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.

(async () => {
  const browser = await chromium.launch();
  const page = await browser.newPage();
  page.on('dialog', async dialog => {
    console.log(dialog.message());
    await dialog.dismiss();
  });
  await page.evaluate(() => alert('1'));
  await browser.close();
})();

----------------------------------------

TITLE: Viewing Test Reports
DESCRIPTION: Open the HTML test report showing detailed test results and statistics

LANGUAGE: bash
CODE:
npx playwright show-report

----------------------------------------

TITLE: Using a Custom Reporter in Playwright Config
DESCRIPTION: Shows how to use a custom reporter in the Playwright configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: './my-awesome-reporter.ts',
});

----------------------------------------

TITLE: Handling API Responses with Playwright in Python (Sync)
DESCRIPTION: This snippet shows how to use the APIResponse class in Playwright with synchronous Python. It demonstrates making a GET request, asserting response properties, and handling JSON data.

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    context = playwright.request.new_context()
    response = context.get("https://example.com/user/repos")
    assert response.ok
    assert response.status == 200
    assert response.headers["content-type"] == "application/json; charset=utf-8"
    assert response.json()["name"] == "foobar"
    assert response.body() == '{"status": "ok"}'

----------------------------------------

TITLE: Handling Request Frame Access
DESCRIPTION: Examples demonstrating how to access and handle the frame that initiated a request across different programming languages.

LANGUAGE: javascript
CODE:
const frameUrl = request.frame().url();

LANGUAGE: java
CODE:
String frameUrl = request.frame().url();

LANGUAGE: python
CODE:
frame_url = request.frame.url

LANGUAGE: csharp
CODE:
var frameUrl = request.Frame.Url;

----------------------------------------

TITLE: Setting Global Test Run Timeout
DESCRIPTION: Configures a global timeout for the entire test run to prevent excess resource usage

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  globalTimeout: 3_600_000,
});

----------------------------------------

TITLE: Implementing a Custom Reporter in Playwright
DESCRIPTION: Demonstrates how to create a custom reporter class implementing the Reporter interface in Playwright.

LANGUAGE: javascript
CODE:
import type {
  FullConfig, FullResult, Reporter, Suite, TestCase, TestResult
} from '@playwright/test/reporter';

class MyReporter implements Reporter {
  onBegin(config: FullConfig, suite: Suite) {
    console.log(`Starting the run with ${suite.allTests().length} tests`);
  }

  onTestBegin(test: TestCase, result: TestResult) {
    console.log(`Starting test ${test.title}`);
  }

  onTestEnd(test: TestCase, result: TestResult) {
    console.log(`Finished test ${test.title}: ${result.status}`);
  }

  onEnd(result: FullResult) {
    console.log(`Finished the run: ${result.status}`);
  }
}

export default MyReporter;

----------------------------------------

TITLE: WebView2 Test Example in JavaScript
DESCRIPTION: Demonstrates a simple test case for WebView2 automation using Playwright.

LANGUAGE: javascript
CODE:
import { test, expect } from './webView2Test';

test('test WebView2', async ({ page }) => {
  await page.goto('https://playwright.dev');
  const getStarted = page.getByText('Get Started');
  await expect(getStarted).toBeVisible();
});

----------------------------------------

TITLE: Testing Chrome Extensions with Playwright (Python)
DESCRIPTION: This snippet demonstrates how to use the previously defined fixtures to test Chrome extensions in Playwright using Python. It includes examples of testing the extension's effect on a web page and accessing the extension's popup page.

LANGUAGE: python
CODE:
from playwright.sync_api import expect, Page


def test_example_test(page: Page) -> None:
    page.goto("https://example.com")
    expect(page.locator("body")).to_contain_text("Changed by my-extension")


def test_popup_page(page: Page, extension_id: str) -> None:
    page.goto(f"chrome-extension://{extension_id}/popup.html")
    expect(page.locator("body")).to_have_text("my-extension popup")

----------------------------------------

TITLE: Running Playwright Projects
DESCRIPTION: This snippet shows how to run all Playwright projects and how to run a specific project using the command line.

LANGUAGE: bash
CODE:
npx playwright test

npx playwright test --project=firefox

----------------------------------------

TITLE: Configuring Trace Recording for CI in JavaScript
DESCRIPTION: Configure Playwright to record traces on the first retry of failed tests in CI environments. This is done in the Playwright configuration file.

LANGUAGE: js
CODE:
import { defineConfig } from '@playwright/test';
export default defineConfig({
  retries: 1,
  use: {
    trace: 'on-first-retry',
  },
});

----------------------------------------

TITLE: Configuring Fully Parallel Mode (JavaScript)
DESCRIPTION: This configuration snippet shows how to enable fully parallel mode for all tests in the Playwright configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  fullyParallel: true,
});

----------------------------------------

TITLE: Video Recording Setup in Java
DESCRIPTION: Demonstrates how to configure video recording in Java, including directory setup and video size configuration.

LANGUAGE: java
CODE:
context = browser.newContext(new Browser.NewContextOptions().setRecordVideoDir(Paths.get("videos/")));
// Make sure to close, so that videos are saved.
context.close();

----------------------------------------

TITLE: Configuring GitHub Actions Reporter in Playwright
DESCRIPTION: Shows how to set up the GitHub Actions reporter for CI environments in the Playwright configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // 'github' for GitHub Actions CI to generate annotations, plus a concise 'dot'
  // default 'list' when running locally
  reporter: process.env.CI ? 'github' : 'list',
});

----------------------------------------

TITLE: Running Basic Playwright Tests
DESCRIPTION: Execute all Playwright tests in headless mode using the default configuration

LANGUAGE: bash
CODE:
npx playwright test

----------------------------------------

TITLE: Configuring Expect Timeout
DESCRIPTION: Shows how to configure the timeout for expect assertions globally in the config file

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  expect: {
    timeout: 10_000,
  },
});

----------------------------------------

TITLE: Limiting Failures in Playwright Config (JavaScript)
DESCRIPTION: This configuration snippet demonstrates how to set a maximum number of allowed failures before stopping the test run, with different settings for CI and local environments.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // Limit the number of failures on CI to save resources
  maxFailures: process.env.CI ? 10 : undefined,
});

----------------------------------------

TITLE: Running Playwright Tests with Pytest CLI
DESCRIPTION: Basic command for running Playwright tests using Pytest with browser and display mode options.

LANGUAGE: bash
CODE:
pytest --browser webkit --headed

----------------------------------------

TITLE: Basic Test Parameterization in Playwright
DESCRIPTION: Demonstrates how to create parameterized tests using forEach loop with different test data sets

LANGUAGE: javascript
CODE:
[
  { name: 'Alice', expected: 'Hello, Alice!' },
  { name: 'Bob', expected: 'Hello, Bob!' },
  { name: 'Charlie', expected: 'Hello, Charlie!' },
].forEach(({ name, expected }) => {
  test(`testing with ${name}`, async ({ page }) => {
    await page.goto(`https://example.com/greet?name=${name}`);
    await expect(page.getByRole('heading')).toHaveText(expected);
  });
});

----------------------------------------

TITLE: Handling WebSocket Events - JavaScript/Python
DESCRIPTION: Implementation of WebSocket event handling including frame reception, sending, and error handling. Provides methods for monitoring WebSocket lifecycle and frame traffic.

LANGUAGE: typescript
CODE:
// Example event handlers
webSocket.on('close', (ws) => { /* handle close */ });
webSocket.on('frameReceived', ({ payload }) => { /* handle received frame */ });
webSocket.on('frameSent', ({ payload }) => { /* handle sent frame */ });
webSocket.on('socketError', (error) => { /* handle error */ });

----------------------------------------

TITLE: Running Playwright Tests in Headed Mode
DESCRIPTION: Execute tests with visible browser windows for visual monitoring of test execution

LANGUAGE: bash
CODE:
npx playwright test --headed

----------------------------------------

TITLE: Skipping Tagged Tests in Playwright
DESCRIPTION: Shows how to skip tests with specific tags using the --grep-invert command line option.

LANGUAGE: bash
CODE:
npx playwright test --grep-invert @fast

LANGUAGE: powershell
CODE:
npx playwright test --grep-invert "@fast"

LANGUAGE: batch
CODE:
npx playwright test --grep-invert @fast

----------------------------------------

TITLE: JavaScript TestError Class Properties
DESCRIPTION: Definition of the TestError class properties that provide detailed information about errors occurring during test execution. Includes error cause, message, stack trace, thrown value, source location, and code snippet information.

LANGUAGE: javascript
CODE:
class TestError {
  cause?: TestError;        // Error cause (v1.49+)
  message?: string;        // Error message
  stack?: string;         // Error stack trace
  value?: string;         // Thrown value for non-Error objects
  location?: Location;    // Error source code location
  snippet?: string;       // Highlighted source code snippet
}

----------------------------------------

TITLE: Expect Assertions Configuration in Playwright
DESCRIPTION: Configures expect assertion library settings including timeout values and screenshot comparison parameters for visual testing.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  expect: {
    // Maximum time expect() should wait for the condition to be met.
    timeout: 5000,

    toHaveScreenshot: {
      // An acceptable amount of pixels that could be different, unset by default.
      maxDiffPixels: 10,
    },

    toMatchSnapshot: {
      // An acceptable ratio of pixels that are different to the
      // total amount of pixels, between 0 and 1.
      maxDiffPixelRatio: 0.1,
    },
  },

});

----------------------------------------

TITLE: Configuring HTML Reporter in Playwright Config
DESCRIPTION: Shows how to set up the HTML reporter with custom options in the Playwright configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [['html', { open: 'never' }]],
});

----------------------------------------

TITLE: Capturing Accessibility Snapshot in JavaScript
DESCRIPTION: This snippet demonstrates how to capture and log the entire accessibility tree using the snapshot method in JavaScript.

LANGUAGE: javascript
CODE:
const snapshot = await page.accessibility.snapshot();
console.log(snapshot);

----------------------------------------

TITLE: Polling Assertion in Playwright
DESCRIPTION: Shows how to use expect.poll for creating a polling assertion that checks an API status.

LANGUAGE: javascript
CODE:
await expect.poll(async () => {
  const response = await page.request.get('https://api.example.com');
  return response.status();
}, {
  message: 'make sure API eventually succeeds',
  timeout: 10000,
}).toBe(200);

----------------------------------------

TITLE: Retrieving Suite Title
DESCRIPTION: Returns the title of the suite. The title varies depending on the suite type (root, project, file, or describe group).

LANGUAGE: js
CODE:
Suite.title

----------------------------------------

TITLE: Asserting API Response in Playwright Tests (JavaScript)
DESCRIPTION: Demonstrates how to use the expect function to assert that an API response is OK in a Playwright test using JavaScript.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('navigates to login', async ({ page }) => {
  // ...
  const response = await page.request.get('https://playwright.dev');
  await expect(response).toBeOK();
});

----------------------------------------

TITLE: Managing Multiple Pages in Playwright
DESCRIPTION: This snippet shows how to create multiple pages within a browser context and retrieve all pages associated with that context.

LANGUAGE: javascript
CODE:
// Create two pages
const pageOne = await context.newPage();
const pageTwo = await context.newPage();

// Get pages of a browser context
const allPages = context.pages();

LANGUAGE: java
CODE:
// Create two pages
Page pageOne = context.newPage();
Page pageTwo = context.newPage();

// Get pages of a browser context
List<Page> allPages = context.pages();

LANGUAGE: python
CODE:
# create two pages
page_one = await context.new_page()
page_two = await context.new_page()

# get pages of a browser context
all_pages = context.pages

LANGUAGE: csharp
CODE:
// Create two pages
var pageOne = await context.NewPageAsync();
var pageTwo = await context.NewPageAsync();

// Get pages of a browser context
var allPages = context.Pages;

----------------------------------------

TITLE: Configuring Project Dependencies in Playwright
DESCRIPTION: This snippet shows how to configure project dependencies in Playwright, allowing for global setup actions to be run before specific test projects.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'setup',
      testMatch: /global.setup\.ts/,
    },
    {
      name: 'chromium',
      use: devices['Desktop Chrome'],
      dependencies: ['setup'],
    },
    {
      name: 'firefox',
      use: devices['Desktop Firefox'],
      dependencies: ['setup'],
    },
    {
      name: 'webkit',
      use: devices['Desktop Safari'],
      dependencies: ['setup'],
    },
  ],
});

----------------------------------------

TITLE: Playwright Config for Authenticated Tests (JavaScript)
DESCRIPTION: Configures Playwright to use the authenticated state for all tests.

LANGUAGE: javascript
CODE:
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    { name: 'setup', testMatch: /.*\.setup\.ts/ },
    {
      name: 'chromium',
      use: {
        ...devices['Desktop Chrome'],
        storageState: 'playwright/.auth/user.json',
      },
      dependencies: ['setup'],
    },
    {
      name: 'firefox',
      use: {
        ...devices['Desktop Firefox'],
        storageState: 'playwright/.auth/user.json',
      },
      dependencies: ['setup'],
    },
  ],
});

----------------------------------------

TITLE: Configuring Playwright Test Build Options
DESCRIPTION: Example of configuring Playwright's transpiler using the build property.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  build: {
    external: ['**/*bundle.js'],
  },
});

----------------------------------------

TITLE: Retrieving Parent Suite
DESCRIPTION: Returns the parent suite. This property is missing for the root suite.

LANGUAGE: js
CODE:
Suite.parent

----------------------------------------

TITLE: Using Base URL in Playwright Tests
DESCRIPTION: Example test case demonstrating how to use relative paths with configured base URL.

LANGUAGE: typescript
CODE:
import { test } from '@playwright/test';

test('test', async ({ page }) => {
  // This will navigate to http://localhost:3000/login
  await page.goto('./login');
});

----------------------------------------

TITLE: Attaching Downloaded Files to Test Reports
DESCRIPTION: Demonstrates how to attach files from the filesystem to test reports using TestInfo.attach method.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';
import { download } from './my-custom-helpers';

test('basic test', async ({}, testInfo) => {
  const tmpPath = await download('a');
  await testInfo.attach('downloaded', { path: tmpPath });
});

----------------------------------------

TITLE: Finding Focused Node in Python Accessibility Snapshot
DESCRIPTION: This snippet demonstrates how to find and print the name of the focused node in the accessibility snapshot using Python.

LANGUAGE: python
CODE:
def find_focused_node(node):
    if node.get("focused"):
        return node
    for child in (node.get("children") or []):
        found_node = find_focused_node(child)
        if found_node:
            return found_node
    return None

snapshot = page.accessibility.snapshot()
node = find_focused_node(snapshot)
if node:
    print(node["name"])

----------------------------------------

TITLE: Configuring Input Options
DESCRIPTION: Defines behavior options for input operations like clicking, typing, etc

LANGUAGE: text
CODE:
strict - requires single element match
timeout - maximum time to wait for operation
noWaitAfter - opt out of waiting for navigation
force - bypass actionability checks

----------------------------------------

TITLE: Accessing WorkerInfo Parallel Index
DESCRIPTION: Defines the parallelIndex property which represents the worker's index between 0 and workers-1. Available through process.env.TEST_PARALLEL_INDEX.

LANGUAGE: typescript
CODE:
type WorkerInfo = {
  parallelIndex: number
}

----------------------------------------

TITLE: Error Handling in Playwright
DESCRIPTION: Examples showing how to handle common Playwright errors, particularly timeout errors, across different programming languages.

LANGUAGE: javascript
CODE:
try {
  await page.locator('.foo').waitFor();
} catch (e) {
  if (e instanceof playwright.errors.TimeoutError) {
    // Do something if this is a timeout.
  }
}

LANGUAGE: python
CODE:
try:
  await page.wait_for_selector(".foo")
except TimeoutError as e:
  pass
  # do something if this is a timeout.

----------------------------------------

TITLE: Handling New Pages in Playwright
DESCRIPTION: This snippet demonstrates how to handle new pages created by actions like clicking on links with target="_blank" attributes.

LANGUAGE: javascript
CODE:
// Start waiting for new page before clicking. Note no await.
const pagePromise = context.waitForEvent('page');
await page.getByText('open new tab').click();
const newPage = await pagePromise;
// Interact with the new page normally.
await newPage.getByRole('button').click();
console.log(await newPage.title());

LANGUAGE: java
CODE:
// Get page after a specific action (e.g. clicking a link)
Page newPage = context.waitForPage(() -> {
  page.getByText("open new tab").click(); // Opens a new tab
});
// Interact with the new page normally
newPage.getByRole(AriaRole.BUTTON).click();
System.out.println(newPage.title());

LANGUAGE: python
CODE:
# Get page after a specific action (e.g. clicking a link)
async with context.expect_page() as new_page_info:
    await page.get_by_text("open new tab").click() # Opens a new tab
new_page = await new_page_info.value

# Interact with the new page normally
await new_page.get_by_role("button").click()
print(await new_page.title())

LANGUAGE: csharp
CODE:
// Get page after a specific action (e.g. clicking a link)
var newPage = await context.RunAndWaitForPageAsync(async () =>
{
    await page.GetByText("open new tab").ClickAsync();
});
// Interact with the new page normally
await newPage.GetByRole(AriaRole.Button).ClickAsync();
Console.WriteLine(await newPage.TitleAsync());

----------------------------------------

TITLE: Debugging Specific Test Files
DESCRIPTION: Commands to debug specific test files using Playwright Inspector across different shells.

LANGUAGE: bash
CODE:
PWDEBUG=1 pytest -s test_example.py

LANGUAGE: batch
CODE:
set PWDEBUG=1
pytest -s test_example.py

LANGUAGE: powershell
CODE:
$env:PWDEBUG=1
pytest -s test_example.py

----------------------------------------

TITLE: Opening a Trace File with Playwright CLI
DESCRIPTION: Use the Playwright CLI to open a saved trace file locally. Replace 'path/to/trace.zip' with the actual path to your trace file.

LANGUAGE: bash
CODE:
npx playwright show-trace path/to/trace.zip

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="show-trace trace.zip"

LANGUAGE: bash
CODE:
playwright show-trace trace.zip

LANGUAGE: bash
CODE:
pwsh bin/Debug/netX/playwright.ps1 show-trace trace.zip

----------------------------------------

TITLE: Drawing Square with Mouse Movement - Python (Async)
DESCRIPTION: Demonstrates asynchronous mouse movement in Python to draw a 100x100 pixel square using the page.mouse API.

LANGUAGE: python
CODE:
await page.mouse.move(0, 0)
await page.mouse.down()
await page.mouse.move(0, 100)
await page.mouse.move(100, 100)
await page.mouse.move(100, 0)
await page.mouse.move(0, 0)
await page.mouse.up()

----------------------------------------

TITLE: Configuring Web Server for Playwright Tests
DESCRIPTION: Example of configuring a development web server to run during tests.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';
export default defineConfig({
  webServer: {
    command: 'npm run start',
    url: 'http://localhost:3000',
    timeout: 120 * 1000,
    reuseExistingServer: !process.env.CI,
  },
  use: {
    baseURL: 'http://localhost:3000/',
  },
});

----------------------------------------

TITLE: Configuring Base URL with Web Server in Playwright
DESCRIPTION: Example showing how to configure both web server and base URL settings for simplified URL handling in tests.

LANGUAGE: typescript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // Rest of your config...

  // Run your local dev server before starting the tests
  webServer: {
    command: 'npm run start',
    url: 'http://localhost:3000',
    reuseExistingServer: !process.env.CI,
  },
  use: {
    baseURL: 'http://localhost:3000',
  },
});

----------------------------------------

TITLE: Configuring List Reporter with Step Rendering in Playwright
DESCRIPTION: Demonstrates how to enable step rendering for the list reporter in the Playwright configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [['list', { printSteps: true }]],
});

----------------------------------------

TITLE: Evaluating JSHandle in Python
DESCRIPTION: Shows how to use the evaluate method on a JSHandle to retrieve the innerText of a tweet's retweet count element in Python.

LANGUAGE: python
CODE:
tweet_handle = await page.query_selector(".tweet .retweets")
assert await tweet_handle.evaluate("node => node.innerText") == "10 retweets"

----------------------------------------

TITLE: Handling Page Load Event in C#
DESCRIPTION: This example demonstrates how to listen for the 'load' event on a page using Playwright in C#.

LANGUAGE: csharp
CODE:
page.Load += (_, _) => Console.WriteLine("Page loaded!");

----------------------------------------

TITLE: Configuring Expect Assertions in Playwright Test
DESCRIPTION: Example of configuring timeout and screenshot comparison options for expect assertions.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  expect: {
    timeout: 10000,
    toMatchSnapshot: {
      maxDiffPixels: 10,
    },
  },
});

----------------------------------------

TITLE: Increasing Download Timeout for Slow Networks
DESCRIPTION: Increase the connection timeout when downloading Playwright browsers on slow networks.

LANGUAGE: bash
CODE:
PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000 npx playwright install

LANGUAGE: batch
CODE:
set PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT=120000
npx playwright install

LANGUAGE: powershell
CODE:
$Env:PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT="120000"
npx playwright install

----------------------------------------

TITLE: Event-Based Download Handling
DESCRIPTION: Shows alternative approaches to handle downloads using event listeners across different programming languages.

LANGUAGE: javascript
CODE:
page.on('download', download => download.path().then(console.log));

LANGUAGE: java
CODE:
page.onDownload(download -> System.out.println(download.path()));

LANGUAGE: python
CODE:
async def handle_download(download):
    print(await download.path())
page.on("download", handle_download)

LANGUAGE: csharp
CODE:
page.Download += (sender, download) => Console.WriteLine(download.Url);

----------------------------------------

TITLE: Serial Mode Test Configuration in Playwright
DESCRIPTION: Example demonstrating how to configure tests to run in serial mode using test.describe.serial.

LANGUAGE: javascript
CODE:
import { test } from '@playwright/test';

test.describe.configure({ mode: 'serial' });

test.beforeAll(async () => { /* ... */ });
test('first good', async ({ page }) => { /* ... */ });
test('second flaky', async ({ page }) => { /* ... */ });
test('third good', async ({ page }) => { /* ... */ });

----------------------------------------

TITLE: Using Custom Fixtures in Tests (JavaScript)
DESCRIPTION: This snippet shows how to use the custom dbUserName fixture in a test file.

LANGUAGE: javascript
CODE:
// Important: import our fixtures.
import { test, expect } from '../playwright/fixtures';

test('test', async ({ dbUserName }) => {
  // Use the user name in the test.
});

----------------------------------------

TITLE: Form Data Submission with RequestOptions in Java
DESCRIPTION: Shows how to submit form data using application/x-www-form-urlencoded encoding.

LANGUAGE: java
CODE:
context.request().post("https://example.com/signup", RequestOptions.create().setForm(
  FormData.create()
    .set("firstName", "John")
    .set("lastName", "Doe")));

----------------------------------------

TITLE: Defining Location Class Properties in JavaScript
DESCRIPTION: This snippet defines the properties of the Location class, including file path, line number, and column number. These properties are used to specify the exact location of TestCase or Suite definitions in the source code.

LANGUAGE: js
CODE:
class Location {
  file: string;  // Path to the source file
  line: number;  // Line number in the source file
  column: number;  // Column number in the source file
}

----------------------------------------

TITLE: Running Tests with Multiple Tags in Playwright
DESCRIPTION: Demonstrates how to run tests containing either of two tags using a logical OR operator in the grep command.

LANGUAGE: bash
CODE:
npx playwright test --grep "@fast|@slow"

LANGUAGE: powershell
CODE:
npx playwright test --grep --% "@fast^|@slow"

LANGUAGE: batch
CODE:
npx playwright test --grep "@fast^|@slow"

----------------------------------------

TITLE: Handling File Downloads with Playwright in C#
DESCRIPTION: Shows how to handle file downloads using Playwright in C#, including waiting for the download event and saving the file.

LANGUAGE: csharp
CODE:
// Start the task of waiting for the download before clicking
var waitForDownloadTask = page.WaitForDownloadAsync();
await page.GetByText("Download file").ClickAsync();
var download = await waitForDownloadTask;

// Wait for the download process to complete and save the downloaded file somewhere
await download.SaveAsAsync("/path/to/save/at/" + download.SuggestedFilename);

----------------------------------------

TITLE: Evaluating JSHandle in JavaScript
DESCRIPTION: Shows how to use the evaluate method on a JSHandle to retrieve the innerText of a tweet's retweet count element.

LANGUAGE: javascript
CODE:
const tweetHandle = await page.$('.tweet .retweets');
expect(await tweetHandle.evaluate(node => node.innerText)).toBe('10 retweets');

----------------------------------------

TITLE: Registering Custom Selector Engine in Java
DESCRIPTION: This snippet demonstrates how to create and register a custom tag name selector engine in Java using Playwright. It defines the engine script and shows how to use the custom selector.

LANGUAGE: java
CODE:
// Must be a script that evaluates to a selector engine instance.  The script is evaluated in the page context.
String createTagNameEngine = "{
" +
  "  // Returns the first element matching given selector in the root's subtree.
" +
  "  query(root, selector) {
" +
  "    return root.querySelector(selector);
" +
  "  },
" +
  "
" +
  "  // Returns all elements matching given selector in the root's subtree.
" +
  "  queryAll(root, selector) {
" +
  "    return Array.from(root.querySelectorAll(selector));
" +
  "  }
" +
  "}";

// Register the engine. Selectors will be prefixed with "tag=".
playwright.selectors().register("tag", createTagNameEngine);

// Now we can use "tag=" selectors.
Locator button = page.locator("tag=button");
button.click();

// We can combine it with built-in locators.
page.locator("tag=div").getByText("Click me").click();

// We can use it in any methods supporting selectors.
int buttonCount = (int) page.locator("tag=button").count();

----------------------------------------

TITLE: Running Selenium Hub and Node in Docker
DESCRIPTION: Commands to run Selenium Hub and Node in separate Docker containers, setting up the necessary network and environment variables.

LANGUAGE: bash
CODE:
docker run -d -p 4442-4444:4442-4444 --name selenium-hub selenium/hub:4.25.0

LANGUAGE: bash
CODE:
docker run -d -p 5555:5555 \
    --shm-size="2g" \
    -e SE_EVENT_BUS_HOST=<selenium-hub-ip> \
    -e SE_EVENT_BUS_PUBLISH_PORT=4442 \
    -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 \
    -e SE_NODE_GRID_URL="http://<selenium-hub-ip>:4444"
    selenium/node-chromium:4.25.0

----------------------------------------

TITLE: Adding Runtime Annotations in Playwright
DESCRIPTION: Demonstrates how to add annotations to a test at runtime using test.info().annotations. This example adds the browser version as an annotation.

LANGUAGE: javascript
CODE:
test('example test', async ({ page, browser }) => {
  test.info().annotations.push({
    type: 'browser version',
    description: browser.version(),
  });

  // ...
});

----------------------------------------

TITLE: Mocking WebSocket Communications in Playwright
DESCRIPTION: Shows how to intercept WebSocket connections and mock the communication by handling messages and sending custom responses.

LANGUAGE: javascript
CODE:
await page.routeWebSocket('wss://example.com/ws', ws => {
  ws.onMessage(message => {
    if (message === 'request')
      ws.send('response');
  });
});

----------------------------------------

TITLE: Interacting with Chrome DevTools Protocol using CDPSession in Python (Sync)
DESCRIPTION: This snippet demonstrates how to create a new CDP session, enable animations, listen for animation events, get and set playback rates using the Chrome DevTools Protocol in Python with synchronous syntax.

LANGUAGE: python
CODE:
client = page.context.new_cdp_session(page)
client.send("Animation.enable")
client.on("Animation.animationCreated", lambda: print("animation created!"))
response = client.send("Animation.getPlaybackRate")
print("playback rate is " + str(response["playbackRate"]))
client.send("Animation.setPlaybackRate", {
    "playbackRate": response["playbackRate"] / 2
})

----------------------------------------

TITLE: Video Recording in Python
DESCRIPTION: Shows both synchronous and asynchronous approaches to video recording configuration in Python.

LANGUAGE: python
CODE:
context = await browser.new_context(record_video_dir="videos/")
# Make sure to await close, so that videos are saved.
await context.close()

LANGUAGE: python
CODE:
context = browser.new_context(record_video_dir="videos/")
# Make sure to close, so that videos are saved.
context.close()

----------------------------------------

TITLE: Adding and Removing Event Listeners in Playwright
DESCRIPTION: This snippet demonstrates how to add and remove event listeners for network requests in Playwright. It shows listening for 'request' and 'requestfinished' events, and then removing a specific listener.

LANGUAGE: javascript
CODE:
page.on('request', request => console.log(`Request sent: ${request.url()}`));
const listener = request => console.log(`Request finished: ${request.url()}`);
page.on('requestfinished', listener);
await page.goto('https://wikipedia.org');

page.off('requestfinished', listener);
await page.goto('https://www.openstreetmap.org/');

LANGUAGE: java
CODE:
page.onRequest(request -> System.out.println("Request sent: " + request.url()));
Consumer<Request> listener = request -> System.out.println("Request finished: " + request.url());
page.onRequestFinished(listener);
page.navigate("https://wikipedia.org");

// Remove previously added listener, each on* method has corresponding off*
page.offRequestFinished(listener);
page.navigate("https://www.openstreetmap.org/");

LANGUAGE: python
CODE:
def print_request_sent(request):
  print("Request sent: " + request.url)

def print_request_finished(request):
  print("Request finished: " + request.url)

page.on("request", print_request_sent)
page.on("requestfinished", print_request_finished)
await page.goto("https://wikipedia.org")

page.remove_listener("requestfinished", print_request_finished)
await page.goto("https://www.openstreetmap.org/")

LANGUAGE: csharp
CODE:
page.Request += (_, request) => Console.WriteLine("Request sent: " + request.Url);
void listener(object sender, IRequest request)
{
    Console.WriteLine("Request finished: " + request.Url);
};
page.RequestFinished += listener;
await page.GotoAsync("https://wikipedia.org");

// Remove previously added listener.
page.RequestFinished -= listener;
await page.GotoAsync("https://www.openstreetmap.org/");

----------------------------------------

TITLE: Running Playwright Tests with Selenium Remote URL
DESCRIPTION: Commands to run Playwright tests using Selenium Grid, setting the SELENIUM_REMOTE_URL environment variable.

LANGUAGE: bash
CODE:
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 npx playwright test

LANGUAGE: bash
CODE:
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 pytest --browser chromium

LANGUAGE: bash
CODE:
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 mvn test

LANGUAGE: bash
CODE:
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 dotnet test

----------------------------------------

TITLE: Using fixme in beforeEach Hook in Playwright
DESCRIPTION: Shows how to use the fixme annotation within a beforeEach hook to conditionally skip test setup and execution based on a condition.

LANGUAGE: javascript
CODE:
test.beforeEach(async ({ page, isMobile }) => {
  test.fixme(isMobile, 'Settings page does not work in mobile yet');

  await page.goto('http://localhost:3000/settings');
});

test('user profile', async ({ page }) => {
  await page.getByText('My Profile').click();
  // ...
});

----------------------------------------

TITLE: Registering Custom Selector Engine in JavaScript
DESCRIPTION: Example of registering a custom selector engine that queries elements based on a tag name using JavaScript in Playwright.

LANGUAGE: javascript
CODE:
const { selectors, firefox } = require('@playwright/test');  // Or 'chromium' or 'webkit'.

(async () => {
  // Must be a function that evaluates to a selector engine instance.
  const createTagNameEngine = () => ({
    // Returns the first element matching given selector in the root's subtree.
    query(root, selector) {
      return root.querySelector(selector);
    },

    // Returns all elements matching given selector in the root's subtree.
    queryAll(root, selector) {
      return Array.from(root.querySelectorAll(selector));
    }
  });

  // Register the engine. Selectors will be prefixed with "tag=".
  await selectors.register('tag', createTagNameEngine);

  const browser = await firefox.launch();
  const page = await browser.newPage();
  await page.setContent(`<div><button>Click me</button></div>`);

  // Use the selector prefixed with its name.
  const button = page.locator('tag=button');
  // We can combine it with built-in locators.
  await page.locator('tag=div').getByText('Click me').click();
  // Can use it in any methods supporting selectors.
  const buttonCount = await page.locator('tag=button').count();

  await browser.close();
})();

----------------------------------------

TITLE: Getting Properties of JSHandle in JavaScript
DESCRIPTION: Shows how to use the getProperties method on a JSHandle to retrieve window and document objects.

LANGUAGE: javascript
CODE:
const handle = await page.evaluateHandle(() => ({ window, document }));
const properties = await handle.getProperties();
const windowHandle = properties.get('window');
const documentHandle = properties.get('document');
await handle.dispose();

----------------------------------------

TITLE: Secure Docker Configuration for Web Scraping
DESCRIPTION: Docker run commands with security configurations for web scraping scenarios using a non-root user and seccomp profile.

LANGUAGE: bash
CODE:
docker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright:v%%VERSION%%-noble /bin/bash

----------------------------------------

TITLE: Capturing Element Screenshot in Playwright
DESCRIPTION: This snippet demonstrates how to capture a screenshot of a specific element on the page. It uses a locator to identify the element (in this case, an element with the class 'header') and then takes a screenshot of just that element.

LANGUAGE: javascript
CODE:
await page.locator('.header').screenshot({ path: 'screenshot.png' });

LANGUAGE: java
CODE:
page.locator(".header").screenshot(new Locator.ScreenshotOptions().setPath(Paths.get("screenshot.png")));

LANGUAGE: python
CODE:
await page.locator(".header").screenshot(path="screenshot.png")

LANGUAGE: csharp
CODE:
await page.Locator(".header").ScreenshotAsync(new() { Path = "screenshot.png" });

----------------------------------------

TITLE: Handling File Downloads with Playwright in JavaScript
DESCRIPTION: Demonstrates how to wait for a download event, initiate a download, and save the downloaded file using Playwright in JavaScript.

LANGUAGE: javascript
CODE:
// Start waiting for download before clicking. Note no await.
const downloadPromise = page.waitForEvent('download');
await page.getByText('Download file').click();
const download = await downloadPromise;

// Wait for the download process to complete and save the downloaded file somewhere.
await download.saveAs('/path/to/save/at/' + download.suggestedFilename());

----------------------------------------

TITLE: Configuring Multiple Web Servers in Playwright
DESCRIPTION: Advanced configuration example showing how to set up multiple web servers with different configurations for frontend and backend services.

LANGUAGE: typescript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  webServer: [
    {
      command: 'npm run start',
      url: 'http://localhost:3000',
      name: 'Frontend',
      timeout: 120 * 1000,
      reuseExistingServer: !process.env.CI,
    },
    {
      command: 'npm run backend',
      url: 'http://localhost:3333',
      name: 'Backend',
      timeout: 120 * 1000,
      reuseExistingServer: !process.env.CI,
    }
  ],
  use: {
    baseURL: 'http://localhost:3000',
  },
});

----------------------------------------

TITLE: Basic Pytest Fixture Usage
DESCRIPTION: Template for using Playwright fixtures in Pytest functions.

LANGUAGE: python
CODE:
def test_my_app_is_working(fixture_name):
    pass
    # Test using fixture_name
    # ...

----------------------------------------

TITLE: Recording a Trace in C#
DESCRIPTION: Use the BrowserContext API to programmatically start and stop trace recording in a C# Playwright script, with examples for different test frameworks.

LANGUAGE: csharp
CODE:
namespace PlaywrightTests;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class Tests : PageTest
{
    [SetUp]
    public async Task Setup()
    {
        await Context.Tracing.StartAsync(new()
        {
            Title = TestContext.CurrentContext.Test.ClassName + "." + TestContext.CurrentContext.Test.Name,
            Screenshots = true,
            Snapshots = true,
            Sources = true
        });
    }

    [TearDown]
    public async Task TearDown()
    {
        await Context.Tracing.StopAsync(new()
        {
            Path = Path.Combine(
                TestContext.CurrentContext.WorkDirectory,
                "playwright-traces",
                $"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}.zip"
            )
        });
    }

    [Test]
    public async Task TestYourOnlineShop()
    {
        // ..
    }
}

----------------------------------------

TITLE: Running Playwright Docker Containers for Testing
DESCRIPTION: Commands to run Playwright Docker containers for end-to-end testing scenarios with root user access.

LANGUAGE: bash
CODE:
docker run -it --rm --ipc=host mcr.microsoft.com/playwright:v%%VERSION%%-noble /bin/bash

----------------------------------------

TITLE: Running Playwright Tests in Headed Mode (PowerShell)
DESCRIPTION: Commands to run Playwright tests in headed mode, opening a browser window for each test, using PowerShell.

LANGUAGE: powershell
CODE:
$env:HEADED="1"
dotnet test

----------------------------------------

TITLE: Annotating Test Groups in Playwright
DESCRIPTION: Shows how to annotate entire groups of tests and apply multiple annotations to a single test.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test.describe('report tests', {
  annotation: { type: 'category', description: 'report' },
}, () => {
  test('test report header', async ({ page }) => {
    // ...
  });

  test('test full report', {
    annotation: [
      { type: 'issue', description: 'https://github.com/microsoft/playwright/issues/23180' },
      { type: 'performance', description: 'very slow test!' },
    ],
  }, async ({ page }) => {
    // ...
  });
});

----------------------------------------

TITLE: Running Playwright Tests
DESCRIPTION: Commands to execute Playwright tests using different package managers.

LANGUAGE: bash
CODE:
npx playwright test

LANGUAGE: bash
CODE:
yarn playwright test

LANGUAGE: bash
CODE:
pnpm exec playwright test

----------------------------------------

TITLE: Setting Fixed Time in Playwright
DESCRIPTION: Shows how to set a fixed time for Date.now and new Date() using the setFixedTime method. Time can be specified as a Date object, current timestamp, or a string.

LANGUAGE: javascript
CODE:
await page.clock.setFixedTime(Date.now());
await page.clock.setFixedTime(new Date('2020-02-02'));
await page.clock.setFixedTime('2020-02-02');

LANGUAGE: python
CODE:
await page.clock.set_fixed_time(datetime.datetime.now())
await page.clock.set_fixed_time(datetime.datetime(2020, 2, 2))
await page.clock.set_fixed_time("2020-02-02")

LANGUAGE: java
CODE:
page.clock().setFixedTime(new Date());
page.clock().setFixedTime(new SimpleDateFormat("yyy-MM-dd").parse("2020-02-02"));
page.clock().setFixedTime("2020-02-02");

LANGUAGE: csharp
CODE:
await page.Clock.SetFixedTimeAsync(DateTime.Now);
await page.Clock.SetFixedTimeAsync(new DateTime(2020, 2, 2));
await page.Clock.SetFixedTimeAsync("2020-02-02");

----------------------------------------

TITLE: Launch Browser in Debug Mode
DESCRIPTION: Launches browser in non-headless mode with slow motion option for debugging purposes

LANGUAGE: javascript
CODE:
await chromium.launch({ headless: false, slowMo: 100 });

LANGUAGE: java
CODE:
chromium.launch(new BrowserType.LaunchOptions()
  .setHeadless(false)
  .setSlowMo(100));

LANGUAGE: python
CODE:
await chromium.launch(headless=False, slow_mo=100)

LANGUAGE: csharp
CODE:
await using var browser = await playwright.Chromium.LaunchAsync(new()
{
    Headless = false,
    SlowMo = 100
});

----------------------------------------

TITLE: Test Steps with Attachments
DESCRIPTION: Example showing how to use test steps with attachments and skip conditions

LANGUAGE: js
CODE:
test('some test', async ({ page, isMobile }) => {
  // Note the new "step" argument:
  await test.step('here is my step', async step => {
    step.skip(isMobile, 'not relevant on mobile layouts');

    // ...
    await step.attach('my attachment', { body: 'some text' });
    // ...
  });
});

----------------------------------------

TITLE: Configuring Color Scheme and Media in Playwright
DESCRIPTION: Shows how to set color scheme and media settings for Playwright tests and browser contexts.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    colorScheme: 'dark',
  },
});

LANGUAGE: javascript
CODE:
const context = await browser.newContext({
  colorScheme: 'dark' // or 'light'
});

const page = await browser.newPage({
  colorScheme: 'dark' // or 'light'
});

await page.emulateMedia({ colorScheme: 'dark' });

await page.emulateMedia({ media: 'print' });

----------------------------------------

TITLE: Launching Playwright UI Mode
DESCRIPTION: Command to start Playwright in UI Mode for interactive test exploration and debugging

LANGUAGE: bash
CODE:
npx playwright test --ui

----------------------------------------

TITLE: Configuring Network Options in Playwright
DESCRIPTION: Network-related configuration including download handling, HTTP headers, authentication, HTTPS errors, offline mode, and proxy settings.

LANGUAGE: typescript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    acceptDownloads: false,
    extraHTTPHeaders: {
      'X-My-Header': 'value',
    },
    httpCredentials: {
      username: 'user',
      password: 'pass',
    },
    ignoreHTTPSErrors: true,
    offline: true,
    proxy: {
      server: 'http://myproxy.com:3128',
      bypass: 'localhost',
    },
  },
});

----------------------------------------

TITLE: Package.json Scripts for Manual Compilation
DESCRIPTION: NPM scripts configuration for manual TypeScript compilation workflow.

LANGUAGE: json
CODE:
{
  "scripts": {
    "pretest": "tsc --incremental -p tests/tsconfig.json",
    "test": "playwright test -c tests-out"
  }
}

----------------------------------------

TITLE: Print Dialog Detection Implementation
DESCRIPTION: Illustrates how to detect when a print dialog is triggered using window.print() override and Promise-based detection mechanism.

LANGUAGE: javascript
CODE:
await page.goto('<url>');

await page.evaluate('(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()');
await page.getByText('Print it!').click();

await page.waitForFunction('window.waitForPrintDialog');

LANGUAGE: java
CODE:
page.navigate("<url>");

page.evaluate("(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()");
page.getByText("Print it!").click();

page.waitForFunction("window.waitForPrintDialog");

LANGUAGE: python
CODE:
await page.goto("<url>")

await page.evaluate("(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()");
await page.get_by_text("Print it!").click()

await page.wait_for_function("window.waitForPrintDialog")

LANGUAGE: csharp
CODE:
await Page.GotoAsync("<url>");

await Page.EvaluateAsync("(() => {window.waitForPrintDialog = new Promise(f => window.print = f);})()");
await Page.GetByText("Print it!").ClickAsync();

await Page.WaitForFunctionAsync("window.waitForPrintDialog");

----------------------------------------

TITLE: Handling Popups in Playwright
DESCRIPTION: This snippet shows how to handle popup windows created by actions like clicking on links with target="_blank" attributes.

LANGUAGE: javascript
CODE:
// Start waiting for popup before clicking. Note no await.
const popupPromise = page.waitForEvent('popup');
await page.getByText('open the popup').click();
const popup = await popupPromise;
// Interact with the new popup normally.
await popup.getByRole('button').click();
console.log(await popup.title());

LANGUAGE: java
CODE:
// Get popup after a specific action (e.g., click)
Page popup = page.waitForPopup(() -> {
  page.getByText("open the popup").click();
});
// Interact with the popup normally
popup.getByRole(AriaRole.BUTTON).click();
System.out.println(popup.title());

LANGUAGE: python
CODE:
# Get popup after a specific action (e.g., click)
async with page.expect_popup() as popup_info:
    await page.get_by_text("open the popup").click()
popup = await popup_info.value

# Interact with the popup normally
await popup.get_by_role("button").click()
print(await popup.title())

LANGUAGE: csharp
CODE:
// Get popup after a specific action (e.g., click)
var popup = await page.RunAndWaitForPopupAsync(async () =>
{
    await page.GetByText("open the popup").ClickAsync();
});
// Interact with the popup normally
await popup.GetByRole(AriaRole.Button).ClickAsync();
Console.WriteLine(await popup.TitleAsync());

----------------------------------------

TITLE: Configuring Static Port for UI Mode
DESCRIPTION: Command to run Playwright UI Mode with a specific port and host binding for external access

LANGUAGE: bash
CODE:
npx playwright test --ui-port=8080 --ui-host=0.0.0.0

----------------------------------------

TITLE: Installing Playwright Dependencies in .NET
DESCRIPTION: Steps to create a new console project, add Playwright package, and install required browser dependencies using .NET CLI commands

LANGUAGE: bash
CODE:
# Create project
dotnet new console -n PlaywrightDemo
cd PlaywrightDemo

# Add project dependency
dotnet add package Microsoft.Playwright
# Build the project
dotnet build
# Install required browsers - replace netX with actual output folder name, e.g. net8.0.
pwsh bin/Debug/netX/playwright.ps1 install

# If the pwsh command does not work (throws TypeNotFound), make sure to use an up-to-date version of PowerShell.
dotnet tool update --global PowerShell

----------------------------------------

TITLE: Asserting Page URL in C#
DESCRIPTION: Demonstrates how to use the PageAssertions class to assert the page URL in a Playwright test using C#.

LANGUAGE: csharp
CODE:
using System.Text.RegularExpressions;
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;

namespace PlaywrightTests;

[TestClass]
public class ExampleTests : PageTest
{
    [TestMethod]
    public async Task NavigateToLoginPage()
    {
        await Page.GetByRole(AriaRole.Button, new() { Name = "Sign In" }).ClickAsync();
        await Expect(Page).ToHaveURLAsync(new Regex(".*/login"));
    }
}

----------------------------------------

TITLE: Using Per-Browser Download Hosts
DESCRIPTION: Specify different download hosts for each browser in Playwright.

LANGUAGE: bash
CODE:
PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3 PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 npx playwright install

LANGUAGE: batch
CODE:
set PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST=http://203.0.113.3
set PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1
npx playwright install

LANGUAGE: powershell
CODE:
$Env:PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST="http://203.0.113.3"
$Env:PLAYWRIGHT_DOWNLOAD_HOST="http://192.0.2.1"
npx playwright install

----------------------------------------

TITLE: Using legacy text locator in Playwright
DESCRIPTION: Example of using the legacy text locator to click an element containing specific text.

LANGUAGE: javascript
CODE:
await page.locator('text=Log in').click();

LANGUAGE: java
CODE:
page.locator("text=Log in").click();

LANGUAGE: python
CODE:
await page.locator("text=Log in").click()

LANGUAGE: csharp
CODE:
await page.Locator("text=Log in").ClickAsync();

----------------------------------------

TITLE: Parallel Test Execution Setup with JUnit
DESCRIPTION: Implementation of parallel test execution using JUnit 5, with test fixtures class and inheritance pattern. Shows how to maintain thread-safe Playwright instances when running tests concurrently.

LANGUAGE: java
CODE:
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class TestFixtures {
  Playwright playwright;
  Browser browser;

  @BeforeAll
  void launchBrowser() {
    playwright = Playwright.create();
    browser = playwright.chromium().launch();
  }

  @AfterAll
  void closeBrowser() {
    playwright.close();
  }

  BrowserContext context;
  Page page;

  @BeforeEach
  void createContextAndPage() {
    context = browser.newContext();
    page = context.newPage();
  }

  @AfterEach
  void closeContext() {
    context.close();
  }
}

----------------------------------------

TITLE: Running UI Mode in Docker/Codespaces
DESCRIPTION: Commands to run Playwright UI Mode in Docker or GitHub Codespaces environments by binding to external interface

LANGUAGE: bash
CODE:
npx playwright test --ui-host=0.0.0.0

----------------------------------------

TITLE: Initializing and Controlling Electron Application with Playwright
DESCRIPTION: Demonstrates launching an Electron app, evaluating expressions in the main process context, interacting with windows, and handling app lifecycle. Shows core functionality like screenshot capture and event handling.

LANGUAGE: javascript
CODE:
const { _electron: electron } = require('playwright');

(async () => {
  // Launch Electron app.
  const electronApp = await electron.launch({ args: ['main.js'] });

  // Evaluation expression in the Electron context.
  const appPath = await electronApp.evaluate(async ({ app }) => {
    // This runs in the main Electron process, parameter here is always
    // the result of the require('electron') in the main app script.
    return app.getAppPath();
  });
  console.log(appPath);

  // Get the first window that the app opens, wait if necessary.
  const window = await electronApp.firstWindow();
  // Print the title.
  console.log(await window.title());
  // Capture a screenshot.
  await window.screenshot({ path: 'intro.png' });
  // Direct Electron console to Node terminal.
  window.on('console', console.log);
  // Click button.
  await window.click('text=Click me');
  // Exit app.
  await electronApp.close();
})();

----------------------------------------

TITLE: Publishing HTML Report to Azure Storage in GitHub Actions
DESCRIPTION: This YAML snippet shows how to upload the Playwright HTML report to Azure Storage using a service principal for authentication. It includes environment variables for Azure credentials and uses azcopy to transfer the report files.

LANGUAGE: yml
CODE:
- name: Upload HTML report to Azure
  shell: bash
  run: |
    REPORT_DIR='run-${{ github.run_id }}-${{ github.run_attempt }}'
    azcopy cp --recursive "./playwright-report/*" "https://<STORAGE_ACCOUNT_NAME>.blob.core.windows.net/$web/$REPORT_DIR"
    echo "::notice title=HTML report url::https://<STORAGE_ACCOUNT_NAME>.z1.web.core.windows.net/$REPORT_DIR/index.html"
  env:
    AZCOPY_AUTO_LOGIN_TYPE: SPN
    AZCOPY_SPA_APPLICATION_ID: '${{ secrets.AZCOPY_SPA_APPLICATION_ID }}'
    AZCOPY_SPA_CLIENT_SECRET: '${{ secrets.AZCOPY_SPA_CLIENT_SECRET }}'
    AZCOPY_TENANT_ID: '${{ secrets.AZCOPY_TENANT_ID }}'

----------------------------------------

TITLE: Updating Playwright and Installing New Browsers
DESCRIPTION: Update Playwright to the latest version and install new browser versions.

LANGUAGE: bash
CODE:
# Update playwright
npm install -D @playwright/test@latest

# Install new browsers
npx playwright install

----------------------------------------

TITLE: Taking Screenshot with Playwright
DESCRIPTION: Example script demonstrating how to navigate to a website and take a screenshot using WebKit browser

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    browser = p.webkit.launch()
    page = browser.new_page()
    page.goto("https://playwright.dev/")
    page.screenshot(path="example.png")
    browser.close()

----------------------------------------

TITLE: Setting Navigation Timeouts
DESCRIPTION: Configures maximum time to wait for navigation operations, with different default values per language

LANGUAGE: text
CODE:
Python/Java/C#: defaults to 30 seconds
JavaScript: defaults to 0 (no timeout)
Use navigationTimeout option in config or setDefaultNavigationTimeout() methods

----------------------------------------

TITLE: Running Basic Playwright Tests
DESCRIPTION: Basic command to run all Playwright tests using pytest, which executes tests in headless mode on Chromium by default.

LANGUAGE: bash
CODE:
pytest

----------------------------------------

TITLE: Registering Custom Selector Engine in C#
DESCRIPTION: Example of registering a custom selector engine that queries elements based on a tag name using C# in Playwright.

LANGUAGE: csharp
CODE:
using Microsoft.Playwright;

using var playwright = await Playwright.CreateAsync();
// Script that evaluates to a selector engine instance. The script is evaluated in the page context.
await playwright.Selectors.RegisterAsync("tag", new()
{
    Script = @"{
    // Returns the first element matching given selector in the root's subtree.
    query(root, selector) {
        return root.querySelector(selector);
      },
      // Returns all elements matching given selector in the root's subtree.
      queryAll(root, selector) {
        return Array.from(root.querySelectorAll(selector));
      }
    }"
});

await using var browser = await playwright.Chromium.LaunchAsync();
var page = await browser.NewPageAsync();
await page.SetContentAsync("<div><button>Click me</button></div>");
// Use the selector prefixed with its name.
var button = page.Locator("tag=button");
// Combine it with built-in locators.
await page.Locator("tag=div").GetByText("Click me").ClickAsync();
// Can use it in any methods supporting selectors.
int buttonCount = await page.Locator("tag=button").CountAsync();

----------------------------------------

TITLE: Checking Installed Playwright Version
DESCRIPTION: View the currently installed version of Playwright.

LANGUAGE: bash
CODE:
npx playwright --version

----------------------------------------

TITLE: Implementing Playwright Tests with JUnit in Java
DESCRIPTION: This snippet demonstrates how to create a JUnit test class using Playwright fixtures. It includes three test methods that interact with web pages using Playwright's Page object.

LANGUAGE: java
CODE:
package org.example;

import com.microsoft.playwright.Page;
import com.microsoft.playwright.junit.UsePlaywright;
import org.junit.jupiter.api.Test;

import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;

@UsePlaywright
public class TestExample {
  @Test
  void shouldClickButton(Page page) {
    page.navigate("data:text/html,<script>var result;</script><button onclick='result=\"Clicked\"'>Go</button>");
    page.locator("button").click();
    assertEquals("Clicked", page.evaluate("result"));
  }

  @Test
  void shouldCheckTheBox(Page page) {
    page.setContent("<input id='checkbox' type='checkbox'></input>");
    page.locator("input").check();
    assertEquals(true, page.evaluate("window['checkbox'].checked"));
  }

  @Test
  void shouldSearchWiki(Page page) {
    page.navigate("https://www.wikipedia.org/");
    page.locator("input[name=\"search\"]").click();
    page.locator("input[name=\"search\"]").fill("playwright");
    page.locator("input[name=\"search\"]").press("Enter");
    assertThat(page).hasURL("https://en.wikipedia.org/wiki/Playwright");
  }
}

----------------------------------------

TITLE: Complete Electron Application Automation Example
DESCRIPTION: Demonstrates a complete example of launching an Electron app, evaluating expressions in the Electron context, capturing screenshots, handling console events, and interacting with UI elements

LANGUAGE: javascript
CODE:
const { _electron: electron } = require('playwright');

(async () => {
  // Launch Electron app.
  const electronApp = await electron.launch({ args: ['main.js'] });

  // Evaluation expression in the Electron context.
  const appPath = await electronApp.evaluate(async ({ app }) => {
    // This runs in the main Electron process, parameter here is always
    // the result of the require('electron') in the main app script.
    return app.getAppPath();
  });
  console.log(appPath);

  // Get the first window that the app opens, wait if necessary.
  const window = await electronApp.firstWindow();
  // Print the title.
  console.log(await window.title());
  // Capture a screenshot.
  await window.screenshot({ path: 'intro.png' });
  // Direct Electron console to Node terminal.
  window.on('console', console.log);
  // Click button.
  await window.click('text=Click me');
  // Exit app.
  await electronApp.close();
})();

----------------------------------------

TITLE: GitHub Actions Job for Merging Playwright Reports
DESCRIPTION: YAML configuration for a GitHub Actions job that merges sharded Playwright test reports into a single HTML report.

LANGUAGE: yaml
CODE:
jobs:
  merge-reports:
    if: ${{ !cancelled() }}
    needs: [playwright-tests]

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm ci

    - name: Download blob reports from GitHub Actions Artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-blob-reports
        pattern: blob-report-*
        merge-multiple: true

    - name: Merge into HTML Report
      run: npx playwright merge-reports --reporter html ./all-blob-reports

    - name: Upload HTML report
      uses: actions/upload-artifact@v4
      with:
        name: html-report--attempt-${{ github.run_attempt }}
        path: playwright-report
        retention-days: 14

----------------------------------------

TITLE: Getting Video Path - Java
DESCRIPTION: Retrieves the filesystem path of the recorded video in Java.

LANGUAGE: java
CODE:
System.out.println(page.video().path());

----------------------------------------

TITLE: Configuring Blob Reporter with Custom Output File in Playwright
DESCRIPTION: Demonstrates how to specify a custom output file for the blob reporter in the Playwright configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [['blob', { outputFile: `./blob-report/report-${os.platform()}.zip` }]],
});

----------------------------------------

TITLE: Session Storage Handling (JavaScript)
DESCRIPTION: Demonstrates how to save and load session storage for authentication purposes.

LANGUAGE: javascript
CODE:
// Get session storage and store as env variable
const sessionStorage = await page.evaluate(() => JSON.stringify(sessionStorage));
fs.writeFileSync('playwright/.auth/session.json', sessionStorage, 'utf-8');

// Set session storage in a new context
const sessionStorage = JSON.parse(fs.readFileSync('playwright/.auth/session.json', 'utf-8'));
await context.addInitScript(storage => {
  if (window.location.hostname === 'example.com') {
    for (const [key, value] of Object.entries(storage))
      window.sessionStorage.setItem(key, value);
  }
}, sessionStorage);

----------------------------------------

TITLE: Example Playwright Tests in C#
DESCRIPTION: Sample end-to-end tests demonstrating page navigation, title verification, and element interaction using different test runners.

LANGUAGE: csharp
CODE:
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Microsoft.Playwright;
using Microsoft.Playwright.NUnit;
using NUnit.Framework;

namespace PlaywrightTests;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class ExampleTest : PageTest
{
    [Test]
    public async Task HasTitle()
    {
        await Page.GotoAsync("https://playwright.dev");

        // Expect a title "to contain" a substring.
        await Expect(Page).ToHaveTitleAsync(new Regex("Playwright"));
    }

    [Test]
    public async Task GetStartedLink()
    {
        await Page.GotoAsync("https://playwright.dev");

        // Click the get started link.
        await Page.GetByRole(AriaRole.Link, new() { Name = "Get started" }).ClickAsync();

        // Expects page to have a heading with the name of Installation.
        await Expect(Page.GetByRole(AriaRole.Heading, new() { Name = "Installation" })).ToBeVisibleAsync();
    } 
}

----------------------------------------

TITLE: Filter Visible Elements
DESCRIPTION: Example showing how to filter Locators to only match visible elements

LANGUAGE: js
CODE:
test('some test', async ({ page }) => {
  // Ignore invisible todo items.
  const todoItems = page.getByTestId('todo-item').filter({ visible: true });
  // Check there are exactly 3 visible ones.
  await expect(todoItems).toHaveCount(3);
});

----------------------------------------

TITLE: Running All Playwright Tests in C#
DESCRIPTION: Command to run all Playwright tests using the dotnet CLI.

LANGUAGE: bash
CODE:
dotnet test

----------------------------------------

TITLE: Handling TimeoutError in C# with Playwright
DESCRIPTION: Demonstrates TimeoutError handling in C# using async/await pattern with try-catch block. Uses the using statement for proper resource disposal.

LANGUAGE: csharp
CODE:
using Microsoft.Playwright;

using var playwright = await Playwright.CreateAsync();
await using var browser = await playwright.Chromium.LaunchAsync();
var page = await browser.NewPageAsync();
try
{
    await page.ClickAsync("text=Example", new() { Timeout = 100 });
}
catch (TimeoutException)
{
    Console.WriteLine("Timeout!");
}

----------------------------------------

TITLE: Configuring GitHub Actions for Playwright Tests in C#
DESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to run Playwright tests for a C# project. It includes steps for checking out the repository, setting up .NET, building the project, installing Playwright browsers, and running tests.

LANGUAGE: yml
CODE:
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Build & Install
      run: dotnet build
    - name: Ensure browsers are installed
      run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps
    - name: Run your tests
      run: dotnet test

----------------------------------------

TITLE: Registering Custom Selector Engine in Python
DESCRIPTION: This snippet shows how to create and register a custom tag name selector engine in Python using Playwright. It includes both async and sync versions of the implementation.

LANGUAGE: python
CODE:
tag_selector = """
    // Must evaluate to a selector engine instance.
    {
      // Returns the first element matching given selector in the root's subtree.
      query(root, selector) {
        return root.querySelector(selector);
      },

      // Returns all elements matching given selector in the root's subtree.
      queryAll(root, selector) {
        return Array.from(root.querySelectorAll(selector));
      }
    }"""

# register the engine. selectors will be prefixed with "tag=".
await playwright.selectors.register("tag", tag_selector)

# now we can use "tag=" selectors.
button = page.locator("tag=button")
await button.click()

# we can combine it with built-in locators.
await page.locator("tag=div").get_by_text("click me").click()

# we can use it in any methods supporting selectors.
button_count = await page.locator("tag=button").count()

LANGUAGE: python
CODE:
tag_selector = """
    // Must evaluate to a selector engine instance.
    {
      // Returns the first element matching given selector in the root's subtree.
      query(root, selector) {
        return root.querySelector(selector);
      },

      // Returns all elements matching given selector in the root's subtree.
      queryAll(root, selector) {
        return Array.from(root.querySelectorAll(selector));
      }
    }"""

# register the engine. selectors will be prefixed with "tag=".
playwright.selectors.register("tag", tag_selector)

# now we can use "tag=" selectors.
button = page.locator("tag=button")
button.click()

# we can combine it with built-in locators.
page.locator("tag=div").get_by_text("click me").click()

# we can use it in any methods supporting selectors.
button_count = page.locator("tag=button").count()

----------------------------------------

TITLE: Creating and Using a New Browser Context in Java
DESCRIPTION: Shows how to create a new incognito browser context, create a page, navigate to a URL, and close the context in Java.

LANGUAGE: java
CODE:
// Create a new incognito browser context
BrowserContext context = browser.newContext();
// Create a new page inside context.
Page page = context.newPage();
page.navigate("https://example.com");
// Dispose context once it is no longer needed.
context.close();

----------------------------------------

TITLE: Configuring HTML Reporter with Custom Output Folder in Playwright
DESCRIPTION: Demonstrates how to specify a custom output folder for the HTML reporter in the Playwright configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [['html', { outputFolder: 'my-report' }]],
});

----------------------------------------

TITLE: Merging Playwright Test Reports
DESCRIPTION: Command to merge blob reports from multiple shards into a single HTML report using Playwright's merge-reports utility.

LANGUAGE: bash
CODE:
npx playwright merge-reports --reporter html ./all-blob-reports

----------------------------------------

TITLE: Running Playwright Codegen in C#
DESCRIPTION: Command to start the Playwright test generator in C# using PowerShell targeting a specific URL

LANGUAGE: bash
CODE:
pwsh bin/Debug/net8.0/playwright.ps1 codegen demo.playwright.dev/todomvc

----------------------------------------

TITLE: Evaluating Asynchronous JavaScript in Page Context (Multiple Languages)
DESCRIPTION: Shows how to evaluate asynchronous JavaScript functions in the browser context using page.evaluate. The example demonstrates fetching a URL and returning its status code.

LANGUAGE: javascript
CODE:
const status = await page.evaluate(async () => {
  const response = await fetch(location.href);
  return response.status;
});

LANGUAGE: java
CODE:
int status = (int) page.evaluate("async () => {\n" +
  "  const response = await fetch(location.href);\n" +
  "  return response.status;\n" +
  "}");

LANGUAGE: python
CODE:
status = await page.evaluate("""async () => {
  response = await fetch(location.href)
  return response.status
}""")

LANGUAGE: csharp
CODE:
int status = await page.EvaluateAsync<int>(@"async () => {
  const response = await fetch(location.href);
  return response.status;
}");

----------------------------------------

TITLE: Handling JSON Messages in WebSocket Communication in JavaScript
DESCRIPTION: This example shows how to handle JSON messages in WebSocket communication, parsing incoming messages and sending JSON responses.

LANGUAGE: javascript
CODE:
await page.routeWebSocket('wss://example.com/ws', ws => {
  ws.onMessage(message => {
    const json = JSON.parse(message);
    if (json.request === 'question')
      ws.send(JSON.stringify({ response: 'answer' }));
  });
});

----------------------------------------

TITLE: Running Specific Test Files
DESCRIPTION: Execute specific test files or tests matching certain patterns

LANGUAGE: bash
CODE:
npx playwright test landing-page.spec.ts

LANGUAGE: bash
CODE:
npx playwright test tests/todo-page/ tests/landing-page/

LANGUAGE: bash
CODE:
npx playwright test landing login

LANGUAGE: bash
CODE:
npx playwright test -g "add a todo item"

----------------------------------------

TITLE: Interacting with Chrome DevTools Protocol using CDPSession in JavaScript
DESCRIPTION: This snippet demonstrates how to create a new CDP session, enable animations, listen for animation events, get and set playback rates using the Chrome DevTools Protocol in JavaScript.

LANGUAGE: javascript
CODE:
const client = await page.context().newCDPSession(page);
await client.send('Animation.enable');
client.on('Animation.animationCreated', () => console.log('Animation created!'));
const response = await client.send('Animation.getPlaybackRate');
console.log('playback rate is ' + response.playbackRate);
await client.send('Animation.setPlaybackRate', {
  playbackRate: response.playbackRate / 2
});

----------------------------------------

TITLE: Emulating Geolocation in Playwright
DESCRIPTION: Demonstrates how to set and change geolocation settings in Playwright tests and browser contexts.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    geolocation: { longitude: 12.492507, latitude: 41.889938 },
    permissions: ['geolocation'],
  },
});

LANGUAGE: javascript
CODE:
test.use({
  geolocation: { longitude: 41.890221, latitude: 12.492348 },
  permissions: ['geolocation'],
});

test('my test with geolocation', async ({ page, context }) => {
  await context.setGeolocation({ longitude: 48.858455, latitude: 2.294474 });
});

----------------------------------------

TITLE: Headers Handling Methods - Playwright Response
DESCRIPTION: Methods for accessing and manipulating HTTP headers from responses, including support for multiple header values and case-insensitive header matching.

LANGUAGE: javascript
CODE:
async Response.headersArray() // Returns Array<{name: string, value: string}>
async Response.headerValue(name) // Returns null|string
async Response.headerValues(name) // Returns Array<string>

----------------------------------------

TITLE: Setting Test Timeout in Playwright Config
DESCRIPTION: Configures the global test timeout in playwright.config.ts. Sets a 120 second timeout for all tests.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  timeout: 120_000,
});

----------------------------------------

TITLE: Registering Custom Selector Engine in Python (Sync)
DESCRIPTION: Example of registering a custom selector engine that queries elements based on a tag name using Python with synchronous syntax in Playwright.

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright, Playwright

def run(playwright: Playwright):
    tag_selector = """
      {
          // Returns the first element matching given selector in the root's subtree.
          query(root, selector) {
              return root.querySelector(selector);
          },
          // Returns all elements matching given selector in the root's subtree.
          queryAll(root, selector) {
              return Array.from(root.querySelectorAll(selector));
          }
      }"""

    # Register the engine. Selectors will be prefixed with "tag=".
    playwright.selectors.register("tag", tag_selector)
    browser = playwright.chromium.launch()
    page = browser.new_page()
    page.set_content('<div><button>Click me</button></div>')

    # Use the selector prefixed with its name.
    button = page.locator('tag=button')
    # Combine it with built-in locators.
    page.locator('tag=div').get_by_text('Click me').click()
    # Can use it in any methods supporting selectors.
    button_count = page.locator('tag=button').count()
    print(button_count)
    browser.close()

with sync_playwright() as playwright:
    run(playwright)

----------------------------------------

TITLE: Configuring Playwright for Test List Execution (JavaScript)
DESCRIPTION: This configuration snippet shows how to disable parallelism and specify a test list file for controlled test execution order.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  workers: 1,
  testMatch: 'test.list.ts',
});

----------------------------------------

TITLE: Running Playwright Tests on Specific Browser (PowerShell)
DESCRIPTION: Commands to run Playwright tests on a specific browser (WebKit) using environment variable in PowerShell.

LANGUAGE: powershell
CODE:
$env:BROWSER="webkit"
dotnet test

----------------------------------------

TITLE: Setting Viewport Size in Playwright
DESCRIPTION: Demonstrates how to configure viewport size for browser contexts and individual pages in Playwright.

LANGUAGE: javascript
CODE:
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'chromium',
      use: {
        ...devices['Desktop Chrome'],
        viewport: { width: 1280, height: 720 },
      },
    },
  ]
});

LANGUAGE: javascript
CODE:
const context = await browser.newContext({
  viewport: { width: 1280, height: 1024 }
});

await page.setViewportSize({ width: 1600, height: 1200 });

const context = await browser.newContext({
  viewport: { width: 2560, height: 1440 },
  deviceScaleFactor: 2,
});

----------------------------------------

TITLE: Testing Status Change with Playwright Assertions in Python (Sync)
DESCRIPTION: Demonstrates how to use Playwright assertions in a synchronous Python test to check if an element's status text changes to 'Submitted' after clicking a button.

LANGUAGE: python
CODE:
from playwright.sync_api import Page, expect

def test_status_becomes_submitted(page: Page) -> None:
    # ..
    page.locator("#submit-button").click()
    expect(page.locator(".status")).to_have_text("Submitted")

----------------------------------------

TITLE: Configuring Other Browser Options in Playwright
DESCRIPTION: Additional browser configuration including action timeout, browser selection, CSP bypass, channel selection, headless mode, and test ID attribute.

LANGUAGE: typescript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    actionTimeout: 0,
    browserName: 'chromium',
    bypassCSP: true,
    channel: 'chrome',
    headless: false,
    testIdAttribute: 'pw-test-id',
  },
});

----------------------------------------

TITLE: Running Playwright Tests with Multiple Configurations
DESCRIPTION: Commands to run Playwright tests on multiple browsers or configurations using runsettings files.

LANGUAGE: bash
CODE:
dotnet test --settings:chromium.runsettings
dotnet test --settings:firefox.runsettings
dotnet test --settings:webkit.runsettings

----------------------------------------

TITLE: Setting Additional Selenium Headers
DESCRIPTION: Commands to set additional Selenium headers using the SELENIUM_REMOTE_HEADERS environment variable.

LANGUAGE: bash
CODE:
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS="{'Authorization':'Basic b64enc'}" npx playwright test

LANGUAGE: bash
CODE:
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS="{'Authorization':'Basic b64enc'}" pytest --browser chromium

LANGUAGE: bash
CODE:
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS="{'Authorization':'Basic b64enc'}" mvn test

LANGUAGE: bash
CODE:
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_HEADERS="{'Authorization':'Basic b64enc'}" dotnet test

----------------------------------------

TITLE: Emulating Devices in Playwright Codegen
DESCRIPTION: Command to run Playwright's codegen tool while emulating a specific device.

LANGUAGE: bash
CODE:
npx playwright codegen --device="iPhone 13" playwright.dev

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args='codegen --device="iPhone 13" playwright.dev'

LANGUAGE: bash
CODE:
playwright codegen --device="iPhone 13" playwright.dev

LANGUAGE: bash
CODE:
pwsh bin/Debug/netX/playwright.ps1 codegen --device="iPhone 13" playwright.dev

----------------------------------------

TITLE: Adding Initialization Scripts (Multiple Languages)
DESCRIPTION: Demonstrates how to add initialization scripts that run before page load using page.addInitScript. This example shows how to replace Math.random() with a constant value.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';
import path from 'path';

test.beforeEach(async ({ page }) => {
  // Add script for every test in the beforeEach hook.
  // Make sure to correctly resolve the script path.
  await page.addInitScript({ path: path.resolve(__dirname, '../mocks/preload.js') });
});

LANGUAGE: java
CODE:
// In your test, assuming the "preload.js" file is in the "mocks" directory.
page.addInitScript(Paths.get("mocks/preload.js"));

LANGUAGE: python
CODE:
# In your test, assuming the "preload.js" file is in the "mocks" directory.
await page.add_init_script(path="mocks/preload.js")

LANGUAGE: csharp
CODE:
// In your test, assuming the "preload.js" file is in the "mocks" directory.
await Page.AddInitScriptAsync(scriptPath: "mocks/preload.js");

----------------------------------------

TITLE: Adding Inline Initialization Scripts (JavaScript)
DESCRIPTION: Shows how to add an inline initialization script function with an argument, which is more convenient for short or one-off scripts.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

// Add script for every test in the beforeEach hook.
test.beforeEach(async ({ page }) => {
  const value = 42;
  await page.addInitScript(value => {
    Math.random = () => value;
  }, value);
});

----------------------------------------

TITLE: Pulling Playwright Docker Images
DESCRIPTION: Commands to pull official Playwright Docker images for different programming languages from Microsoft Artifact Registry.

LANGUAGE: bash
CODE:
docker pull mcr.microsoft.com/playwright:v%%VERSION%%-noble

LANGUAGE: bash
CODE:
docker pull mcr.microsoft.com/playwright/python:v%%VERSION%%-noble

LANGUAGE: bash
CODE:
docker pull mcr.microsoft.com/playwright/dotnet:v%%VERSION%%-noble

LANGUAGE: bash
CODE:
docker pull mcr.microsoft.com/playwright/java:v%%VERSION%%-noble

----------------------------------------

TITLE: GitHub Actions Workflow for Sharded Playwright Tests
DESCRIPTION: YAML configuration for running sharded Playwright tests in GitHub Actions, including test execution and report merging.

LANGUAGE: yaml
CODE:
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  playwright-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Run Playwright tests
      run: npx playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

    - name: Upload blob report to GitHub Actions Artifacts
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: blob-report-${{ matrix.shardIndex }}
        path: blob-report
        retention-days: 1

----------------------------------------

TITLE: Emulating Viewport Size in Playwright Codegen
DESCRIPTION: Command to run Playwright's codegen tool with a specific viewport size.

LANGUAGE: bash
CODE:
npx playwright codegen --viewport-size="800,600" playwright.dev

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="codegen --viewport-size='800,600' playwright.dev"

LANGUAGE: bash
CODE:
playwright codegen --viewport-size="800,600" playwright.dev

LANGUAGE: bash
CODE:
pwsh bin/Debug/netX/playwright.ps1 codegen --viewport-size="800,600" playwright.dev

----------------------------------------

TITLE: Running Clock for Specified Duration in Playwright
DESCRIPTION: Shows how to advance the clock and fire all time-related callbacks using the runFor method. Time can be specified in milliseconds or as a human-readable string.

LANGUAGE: javascript
CODE:
await page.clock.runFor(1000);
await page.clock.runFor('30:00');

LANGUAGE: python
CODE:
await page.clock.run_for(1000);
await page.clock.run_for("30:00")

LANGUAGE: java
CODE:
page.clock().runFor(1000);
page.clock().runFor("30:00");

LANGUAGE: csharp
CODE:
await page.Clock.RunForAsync(1000);
await page.Clock.RunForAsync("30:00");

----------------------------------------

TITLE: Creating a JSHandle in Playwright
DESCRIPTION: Demonstrates how to obtain a JSHandle referencing the window object in the browser.

LANGUAGE: javascript
CODE:
const jsHandle = await page.evaluateHandle('window');
//  Use jsHandle for evaluations.

LANGUAGE: java
CODE:
JSHandle jsHandle = page.evaluateHandle("window");
//  Use jsHandle for evaluations.

LANGUAGE: python
CODE:
js_handle = await page.evaluate_handle('window')
#  Use jsHandle for evaluations.

LANGUAGE: csharp
CODE:
var jsHandle = await page.EvaluateHandleAsync("window");
//  Use jsHandle for evaluations.

----------------------------------------

TITLE: Running Playwright Tests with Multiple Workers (xUnit)
DESCRIPTION: Command to run Playwright tests with multiple workers using xUnit.

LANGUAGE: bash
CODE:
dotnet test -- xUnit.MaxParallelThreads=5

----------------------------------------

TITLE: Running Multiple Playwright Instances in Separate Threads
DESCRIPTION: This code demonstrates how to create and run multiple Playwright instances, each in its own thread. It launches a browser for each instance and takes a screenshot of the Playwright website.

LANGUAGE: java
CODE:
package org.example;

import com.microsoft.playwright.*;

import java.nio.file.Paths;

import static java.util.Arrays.asList;

public class PlaywrightThread extends Thread {
  private final String browserName;

  private PlaywrightThread(String browserName) {
    this.browserName = browserName;
  }

  public static void main(String[] args) throws InterruptedException {
    // Create separate playwright thread for each browser.
    for (String browserName: asList("chromium", "webkit", "firefox")) {
      Thread thread = new PlaywrightThread(browserName);
      thread.start();
    }
  }

  @Override
  public void run() {
    try (Playwright playwright = Playwright.create()) {
      BrowserType browserType = getBrowserType(playwright, browserName);
      Browser browser = browserType.launch();
      Page page = browser.newPage();
      page.navigate("https://playwright.dev/");
      page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get("user-agent-" + browserName + ".png")));
    }
  }

  private static BrowserType getBrowserType(Playwright playwright, String browserName) {
    switch (browserName) {
      case "chromium":
        return playwright.chromium();
      case "webkit":
        return playwright.webkit();
      case "firefox":
        return playwright.firefox();
      default:
        throw new IllegalArgumentException();
    }
  }
}

----------------------------------------

TITLE: GitHub Actions Workflow Configuration
DESCRIPTION: GitHub Actions workflow configuration for running Playwright tests on push/pull requests

LANGUAGE: yml
CODE:
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    - name: Run Playwright tests
      run: npx playwright test

----------------------------------------

TITLE: Pattern Matching with Object Comparison
DESCRIPTION: Demonstrates complex pattern matching using objectContaining and other matchers.

LANGUAGE: javascript
CODE:
expect({
  list: [1, 2, 3],
  obj: { prop: 'Hello world!', another: 'some other value' },
  extra: 'extra',
}).toEqual(expect.objectContaining({
  list: expect.arrayContaining([2, 3]),
  obj: expect.objectContaining({ prop: expect.stringContaining('Hello') }),
}));

----------------------------------------

TITLE: Handling AndroidSocket Close Event in JavaScript
DESCRIPTION: Event listener for when the AndroidSocket is closed. This event is emitted when the socket connection is terminated.

LANGUAGE: js
CODE:
AndroidSocket.on('close', () => {
  // Handle socket close
});

----------------------------------------

TITLE: Type Hints for Playwright Page Objects
DESCRIPTION: Example showing proper type hints for Playwright Page objects in test functions.

LANGUAGE: python
CODE:
from playwright.sync_api import Page

def test_visit_admin_dashboard(page: Page):
    page.goto("/admin")
    # ...

----------------------------------------

TITLE: Recording Traces with NUnit in Playwright .NET
DESCRIPTION: This snippet demonstrates how to set up trace recording for NUnit tests using Playwright. It shows how to start tracing in the Setup method and stop it in the TearDown method, saving the trace as a zip file.

LANGUAGE: csharp
CODE:
namespace PlaywrightTests;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class Tests : PageTest
{
    [SetUp]
    public async Task Setup()
    {
        await Context.Tracing.StartAsync(new()
        {
            Title = $"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}",
            Screenshots = true,
            Snapshots = true,
            Sources = true
        });
    }

    [TearDown]
    public async Task TearDown()
    {
        await Context.Tracing.StopAsync(new()
        {
            Path = Path.Combine(
                TestContext.CurrentContext.WorkDirectory,
                "playwright-traces",
                $"{TestContext.CurrentContext.Test.ClassName}.{TestContext.CurrentContext.Test.Name}.zip"
            )
        });
    }

    [Test]
    public async Task GetStartedLink()
    {
        // ..
    }
}

----------------------------------------

TITLE: Configuring GitHub Actions for Playwright Tests in Java
DESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to run Playwright tests for a Java project. It includes steps for checking out the repository, setting up Java, building the project, installing Playwright browsers, and running tests.

LANGUAGE: yml
CODE:
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    - name: Build & Install
      run: mvn -B install -D skipTests --no-transfer-progress
    - name: Ensure browsers are installed
      run: mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install --with-deps"
    - name: Run tests
      run: mvn test

----------------------------------------

TITLE: Using CSS locator in Playwright
DESCRIPTION: Example of using a CSS locator to click a button element.

LANGUAGE: javascript
CODE:
await page.locator('css=button').click();

LANGUAGE: java
CODE:
page.locator("css=button").click();

LANGUAGE: python
CODE:
await page.locator("css=button").click()

LANGUAGE: csharp
CODE:
await page.Locator("css=button").ClickAsync();

----------------------------------------

TITLE: Implementing Custom Reporter in TypeScript
DESCRIPTION: Example of a custom reporter class implementation in TypeScript. It shows type definitions and the structure of a Playwright reporter with TypeScript support.

LANGUAGE: typescript
CODE:
import type {
  Reporter, FullConfig, Suite, TestCase, TestResult, FullResult
} from '@playwright/test/reporter';

class MyReporter implements Reporter {
  constructor(options: { customOption?: string } = {}) {
    console.log(`my-awesome-reporter setup with customOption set to ${options.customOption}`);
  }

  onBegin(config: FullConfig, suite: Suite) {
    console.log(`Starting the run with ${suite.allTests().length} tests`);
  }

  onTestBegin(test: TestCase) {
    console.log(`Starting test ${test.title}`);
  }

  onTestEnd(test: TestCase, result: TestResult) {
    console.log(`Finished test ${test.title}: ${result.status}`);
  }

  onEnd(result: FullResult) {
    console.log(`Finished the run: ${result.status}`);
  }
}
export default MyReporter;

----------------------------------------

TITLE: Violation Fingerprinting for Known Issues
DESCRIPTION: Implements a pattern for tracking known accessibility violations using fingerprints. Creates a custom record type to match violations based on rule ID and target selector.

LANGUAGE: java
CODE:
public class HomepageTests {
  @Test
  shouldOnlyHaveAccessibilityViolationsMatchingKnownFingerprints() throws Exception {
    page.navigate("https://your-site.com/");

    AxeResults accessibilityScanResults = new AxeBuilder(page).analyze();

    List<ViolationFingerprint> violationFingerprints = fingerprintsFromScanResults(accessibilityScanResults);

    assertEquals(Arrays.asList(
      new ViolationFingerprint("aria-roles", "[span[role=\"invalid\"]]"),
      new ViolationFingerprint("color-contrast", "[li:nth-child(2) > span]"),
      new ViolationFingerprint("label", "[input]")
    ), violationFingerprints);
  }

  public record ViolationFingerprint(String ruleId, String target) { }

  public List<ViolationFingerprint> fingerprintsFromScanResults(AxeResults results) {
    return results.getViolations().stream()
      .flatMap(violation -> violation.getNodes().stream()
        .map(node -> new ViolationFingerprint(
          violation.getId(),
          node.getTarget().toString()
        )))
      .collect(Collectors.toList());
  }
}

----------------------------------------

TITLE: Opening Playwright Trace in .NET
DESCRIPTION: This command demonstrates how to open a recorded Playwright trace using the Playwright CLI. It specifies the path to the trace zip file and uses the 'show-trace' command to launch the trace viewer.

LANGUAGE: bash
CODE:
pwsh bin/Debug/net8.0/playwright.ps1 show-trace bin/Debug/net8.0/playwright-traces/PlaywrightTests.ExampleTest.GetStartedLink.zip

----------------------------------------

TITLE: Setting up Test Fixtures for Chrome Extensions (JavaScript)
DESCRIPTION: This snippet shows how to create test fixtures in Playwright for loading Chrome extensions and retrieving the extension ID. It uses TypeScript and is designed for use with Playwright Test.

LANGUAGE: javascript
CODE:
import { test as base, chromium, type BrowserContext } from '@playwright/test';
import path from 'path';

export const test = base.extend<{
  context: BrowserContext;
  extensionId: string;
}>({
  context: async ({ }, use) => {
    const pathToExtension = path.join(__dirname, 'my-extension');
    const context = await chromium.launchPersistentContext('', {
      channel: 'chromium',
      args: [
        `--disable-extensions-except=${pathToExtension}`,
        `--load-extension=${pathToExtension}`,
      ],
    });
    await use(context);
    await context.close();
  },
  extensionId: async ({ context }, use) => {
    /*
    // for manifest v2:
    let [background] = context.backgroundPages()
    if (!background)
      background = await context.waitForEvent('backgroundpage')
    */

    // for manifest v3:
    let [background] = context.serviceWorkers();
    if (!background)
      background = await context.waitForEvent('serviceworker');

    const extensionId = background.url().split('/')[2];
    await use(extensionId);
  },
});
export const expect = test.expect;

----------------------------------------

TITLE: Inserting Non-ASCII Text with Keyboard in Playwright
DESCRIPTION: This code snippet shows how to insert non-ASCII text using the Keyboard API's insertText method in Playwright. This method only dispatches the 'input' event, without keydown, keyup, or keypress events.

LANGUAGE: javascript
CODE:
page.keyboard.insertText('嗨');

LANGUAGE: java
CODE:
page.keyboard().insertText("嗨");

LANGUAGE: python
CODE:
await page.keyboard.insert_text("嗨")

LANGUAGE: csharp
CODE:
await page.Keyboard.PressAsync("嗨");

----------------------------------------

TITLE: Custom Expect Message Implementation in Python
DESCRIPTION: Demonstrates how to add custom error messages to Playwright assertions using the expect function. Shows both the assertion syntax and resulting error output format.

LANGUAGE: python
CODE:
expect(page.get_by_text("Name"), "should be logged in").to_be_visible()

LANGUAGE: bash
CODE:
    def test_foobar(page: Page) -> None:
>       expect(page.get_by_text("Name"), "should be logged in").to_be_visible()
E       AssertionError: should be logged in
E       Actual value: None
E       Call log:
E       LocatorAssertions.to_be_visible with timeout 5000ms
E       waiting for get_by_text("Name")
E       waiting for get_by_text("Name")

tests/test_foobar.py:22: AssertionError

----------------------------------------

TITLE: Asserting API Response is OK in Playwright Tests (Python Async)
DESCRIPTION: Illustrates how to use the to_be_ok() method to assert that an API response status code is within the 200-299 range in asynchronous Python.

LANGUAGE: python
CODE:
from playwright.async_api import expect

# ...
await expect(response).to_be_ok()

----------------------------------------

TITLE: Accessing Service Workers in Playwright
DESCRIPTION: Demonstrates how to wait for and access Service Workers when a page triggers their registration. The code shows waiting for the Service Worker event and ensuring proper activation.

LANGUAGE: javascript
CODE:
const serviceWorkerPromise = context.waitForEvent('serviceworker');
await page.goto('/example-with-a-service-worker.html');
const serviceworker = await serviceWorkerPromise;

----------------------------------------

TITLE: Recording a Trace Locally in JavaScript
DESCRIPTION: Enable trace recording during local test runs by setting the --trace flag to 'on' when running Playwright tests.

LANGUAGE: bash
CODE:
npx playwright test --trace on

----------------------------------------

TITLE: CSS matching by text in Playwright
DESCRIPTION: Examples of using CSS pseudo-classes to match elements by their text content.

LANGUAGE: javascript
CODE:
await page.locator('article:has-text("Playwright")').click();
await page.locator('#nav-bar :text("Home")').click();

LANGUAGE: java
CODE:
page.locator("article:has-text(\"Playwright\")").click();
page.locator("#nav-bar :text('Home')").click();

LANGUAGE: python
CODE:
await page.locator("article:has-text(\"Playwright\")").click()
await page.locator("#nav-bar :text('Home')").click()

LANGUAGE: csharp
CODE:
await page.Locator("article:has-text(\"Playwright\")").ClickAsync();
await page.Locator("#nav-bar :text('Home')").ClickAsync();

----------------------------------------

TITLE: Asserting Page Title with Playwright in Java
DESCRIPTION: Shows how to use Playwright's assertThat method to check the page title using a regex pattern.

LANGUAGE: java
CODE:
import java.util.regex.Pattern;
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

assertThat(page).hasTitle(Pattern.compile("Playwright"));

----------------------------------------

TITLE: Conditional Test Step Skip
DESCRIPTION: Demonstrates conditional test step skipping with an optional description using TestStepInfo.skip method.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('my test', async ({ page, isMobile }) => {
  await test.step('check desktop expectations', async step => {
    step.skip(isMobile, 'not present in the mobile layout');
    // step body below will not run
    // ...
  });
});

----------------------------------------

TITLE: Configuring Video Recording in Playwright Test Config
DESCRIPTION: Demonstrates how to configure video recording options in the Playwright test configuration file. Shows settings for recording modes and video dimensions.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';
export default defineConfig({
  use: {
    video: 'on-first-retry',
  },
});

----------------------------------------

TITLE: Java Implementation of Aria Snapshot Testing
DESCRIPTION: Illustrates accessibility snapshot testing implementation in Java using Playwright

LANGUAGE: java
CODE:
page.navigate("https://playwright.dev/");
assertThat(page.locator("banner")).matchesAriaSnapshot("""
  - banner:
    - heading /Playwright enables reliable end-to-end/ [level=1]
    - link "Get started"
    - link "Star microsoft/playwright on GitHub"
    - link /[\\d]+k\\+ stargazers on GitHub/
""");

----------------------------------------

TITLE: Getting Video Path - Python Sync
DESCRIPTION: Retrieves the filesystem path of the recorded video using Python's synchronous syntax.

LANGUAGE: python
CODE:
print(page.video.path())

----------------------------------------

TITLE: Custom Dockerfile for Node.js Playwright
DESCRIPTION: Dockerfile configuration for creating a custom Playwright image with Node.js.

LANGUAGE: dockerfile
CODE:
FROM node:20-bookworm

RUN npx -y playwright@%%VERSION%% install --with-deps

----------------------------------------

TITLE: Per-Assertion Timeout Configuration
DESCRIPTION: Shows how to set timeouts for individual assertions in both Python and C#

LANGUAGE: python
CODE:
from playwright.sync_api import expect

def test_foobar(page: Page) -> None:
    expect(page.get_by_text("Name")).to_be_visible(timeout=10_000)

LANGUAGE: csharp
CODE:
await Expect(Page.GetByText("Name")).ToBeVisibleAsync(new() { Timeout = 10_000 });

----------------------------------------

TITLE: Running Parallel Playwright Tests with JUnit in Java
DESCRIPTION: This snippet shows how to set up multiple test classes to run in parallel using JUnit and Playwright. It includes two test classes with different test methods.

LANGUAGE: java
CODE:
@UsePlaywright
class Test1 {
  @Test
  void shouldClickButton(Page page) {
    page.navigate("data:text/html,<script>var result;</script><button onclick='result=\"Clicked\"'>Go</button>");
    page.locator("button").click();
    assertEquals("Clicked", page.evaluate("result"));
  }

  @Test
  void shouldCheckTheBox(Page page) {
    page.setContent("<input id='checkbox' type='checkbox'></input>");
    page.locator("input").check();
    assertEquals(true, page.evaluate("window['checkbox'].checked"));
  }

  @Test
  void shouldSearchWiki(Page page) {
    page.navigate("https://www.wikipedia.org/");
    page.locator("input[name=\"search\"]").click();
    page.locator("input[name=\"search\"]").fill("playwright");
    page.locator("input[name=\"search\"]").press("Enter");
    assertThat(page).hasURL("https://en.wikipedia.org/wiki/Playwright");
  }
}

@UsePlaywright
class Test2 {
  @Test
  void shouldReturnInnerHTML(Page page) {
    page.setContent("<div>hello</div>");
    assertEquals("hello", page.innerHTML("css=div"));
  }

  @Test
  void shouldClickButton(Page page) {
    Page popup = page.waitForPopup(() -> {
      page.evaluate("window.open('about:blank');");
    });
    assertEquals("about:blank", popup.url());
  }
}

----------------------------------------

TITLE: Handling WebView2 Initialization in C#
DESCRIPTION: Waits for the WebView2 control to be fully initialized before proceeding with automation.

LANGUAGE: csharp
CODE:
this.webView.CoreWebView2InitializationCompleted += (_, e) =>
{
    if (e.IsSuccess)
    {
        Console.WriteLine("WebView2 initialized");
    }
};

----------------------------------------

TITLE: Synchronous Aria Snapshot Testing in Python
DESCRIPTION: Shows how to implement accessibility snapshot testing using Python's synchronous API

LANGUAGE: python
CODE:
page.goto('https://playwright.dev/')
expect(page.query_selector('banner')).to_match_aria_snapshot("""
  - banner:
    - heading /Playwright enables reliable end-to-end/ [level=1]
    - link "Get started"
    - link "Star microsoft/playwright on GitHub"
    - link /[\\d]+k\\+ stargazers on GitHub/
""")

----------------------------------------

TITLE: Using XPath locator in Playwright
DESCRIPTION: Example of using an XPath locator to click a button element.

LANGUAGE: javascript
CODE:
await page.locator('xpath=//button').click();

LANGUAGE: java
CODE:
page.locator("xpath=//button").click();

LANGUAGE: python
CODE:
await page.locator("xpath=//button").click()

LANGUAGE: csharp
CODE:
await page.Locator("xpath=//button").ClickAsync();

----------------------------------------

TITLE: Running Tests on Specific Browser
DESCRIPTION: Commands to run tests on a specific browser or multiple browsers using the --browser flag.

LANGUAGE: bash
CODE:
pytest --browser webkit

LANGUAGE: bash
CODE:
pytest --browser webkit --browser firefox

----------------------------------------

TITLE: Using BrowserName Fixture for Test Annotations
DESCRIPTION: Demonstrates how to use the browserName fixture to conditionally skip a test based on the browser being used.

LANGUAGE: javascript
CODE:
test('skip this test in Firefox', async ({ page, browserName }) => {
  test.skip(browserName === 'firefox', 'Still working on it');
  // ...
});

----------------------------------------

TITLE: WebView2 Test Setup in Python
DESCRIPTION: Configures the test environment for WebView2 automation using Playwright in Python.

LANGUAGE: python
CODE:
import os
import socket
import tempfile
import pytest
from pathlib import Path
from playwright.sync_api import Playwright, Browser, BrowserContext
import subprocess

EXECUTABLE_PATH = (
    Path(__file__).parent
    / ".."
    / "webview2-app"
    / "bin"
    / "Debug"
    / "net8.0-windows"
    / "webview2.exe"
)


@pytest.fixture(scope="session")
def data_dir():
    with tempfile.TemporaryDirectory(
        prefix="playwright-webview2-tests", ignore_cleanup_errors=True
    ) as tmpdirname:
        yield tmpdirname


@pytest.fixture(scope="session")
def webview2_process_cdp_port(data_dir: str):
    cdp_port = _find_free_port()
    process = subprocess.Popen(
        [EXECUTABLE_PATH],
        env={
            **dict(os.environ),
            "WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS": f"--remote-debugging-port={cdp_port}",
            "WEBVIEW2_USER_DATA_FOLDER": data_dir,
        },
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True,
    )
    while True:
        line = process.stdout.readline()
        if "WebView2 initialized" in line:
            break
    yield cdp_port
    process.terminate()


@pytest.fixture(scope="session")
def browser(playwright: Playwright, webview2_process_cdp_port: int):
    browser = playwright.chromium.connect_over_cdp(
        f"http://127.0.0.1:{webview2_process_cdp_port}"
    )
    yield browser


@pytest.fixture(scope="function")
def context(browser: Browser):
    context = browser.contexts[0]
    yield context


@pytest.fixture(scope="function")
def page(context: BrowserContext):
    page = context.pages[0]
    yield page


def _find_free_port(port=9000, max_port=65535):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    while port <= max_port:
        try:
            sock.bind(("", port))
            sock.close()
            return port
        except OSError:
            port += 1
    raise IOError("no free ports")

----------------------------------------

TITLE: Logging Uncaught Exceptions with WebError in JavaScript
DESCRIPTION: Demonstrates how to use the WebError class to log uncaught exceptions in a browser context and navigate to a page with an intentional error.

LANGUAGE: javascript
CODE:
// Log all uncaught errors to the terminal
context.on('weberror', webError => {
  console.log(`Uncaught exception: "${webError.error()}"`);
});

// Navigate to a page with an exception.
await page.goto('data:text/html,<script>throw new Error("Test")</script>');

----------------------------------------

TITLE: Basic Screenshot Test in Playwright
DESCRIPTION: Basic example of implementing a visual comparison test using Playwright's toHaveScreenshot assertion.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('example test', async ({ page }) => {
  await page.goto('https://playwright.dev');
  await expect(page).toHaveScreenshot();
});

----------------------------------------

TITLE: Attaching Screenshots to Test Steps
DESCRIPTION: Shows how to attach screenshots to test steps using TestStepInfo.attach method with binary data.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }) => {
  await page.goto('https://playwright.dev');
  await test.step('check page rendering', async step => {
    const screenshot = await page.screenshot();
    await step.attach('screenshot', { body: screenshot, contentType: 'image/png' });
  });
});

----------------------------------------

TITLE: Using TestStep.titlePath() Method in JavaScript
DESCRIPTION: This snippet shows how to use the titlePath() method of a TestStep object to retrieve a list of step titles from the root step down to the current step.

LANGUAGE: js
CODE:
const testStep = new TestStep();
const titlePath = testStep.titlePath();
console.log(titlePath); // Array of step titles from root to current step

----------------------------------------

TITLE: Connecting to WebView2 with Playwright in Multiple Languages
DESCRIPTION: Demonstrates how to connect Playwright to a running WebView2 instance using CDP in JavaScript, Java, Python, and C#.

LANGUAGE: javascript
CODE:
const browser = await playwright.chromium.connectOverCDP('http://localhost:9222');
const context = browser.contexts()[0];
const page = context.pages()[0];

LANGUAGE: java
CODE:
Browser browser = playwright.chromium().connectOverCDP("http://localhost:9222");
BrowserContext context = browser.contexts().get(0);
Page page = context.pages().get(0);

LANGUAGE: python
CODE:
browser = playwright.chromium.connect_over_cdp("http://localhost:9222")
context = browser.contexts[0]
page = context.pages[0]

LANGUAGE: csharp
CODE:
var browser = await playwright.Chromium.ConnectOverCDPAsync("http://localhost:9222");
var context = browser.Contexts[0];
var page = context.Pages[0];

----------------------------------------

TITLE: Getting Video Path - Python Async
DESCRIPTION: Retrieves the filesystem path of the recorded video using Python's async syntax.

LANGUAGE: python
CODE:
print(await page.video.path())

----------------------------------------

TITLE: List Item Filtering Example
DESCRIPTION: Demonstrates how to filter list items using locator chaining and text matching.

LANGUAGE: javascript
CODE:
const rowLocator = page.getByRole('listitem');

await rowLocator
    .filter({ hasText: 'Mary' })
    .filter({ has: page.getByRole('button', { name: 'Say goodbye' }) })
    .screenshot({ path: 'screenshot.png' });

LANGUAGE: python
CODE:
row_locator = page.get_by_role("listitem")

await row_locator.filter(has_text="Mary").filter(
    has=page.get_by_role("button", name="Say goodbye")
).screenshot(path="screenshot.png")

----------------------------------------

TITLE: Configuring JUnit Reporter with Output File in Playwright
DESCRIPTION: Demonstrates how to configure the JUnit reporter with a custom output file in the Playwright configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [['junit', { outputFile: 'results.xml' }]],
});

----------------------------------------

TITLE: Playwright Element Actionability Table
DESCRIPTION: Table showing which actionability checks are performed for different Playwright locator methods

LANGUAGE: markdown
CODE:
| Action | [Visible] | [Stable] | [Receives Events] | [Enabled] | [Editable] |
| :- | :-: | :-: | :-: | :-: | :-: |
| [`method: Locator.check`] | Yes | Yes | Yes | Yes | - |
| [`method: Locator.click`] | Yes | Yes | Yes | Yes | - |

----------------------------------------

TITLE: Setting up Playwright Build Configuration in CMake
DESCRIPTION: Configures the build environment for the Playwright executable including private include directories, source files, compiler definitions, and library dependencies. Sets up Windows-specific configurations and handles Cairo platform support.

LANGUAGE: cmake
CODE:
set(Playwright_PRIVATE_INCLUDE_DIRECTORIES
    ${CMAKE_BINARY_DIR}
    ${WebCore_PRIVATE_FRAMEWORK_HEADERS_DIR}
)

set(Playwright_SOURCES
    Common.cpp
    MainWindow.cpp
    PlaywrightLib.rc
    WebKitBrowserWindow.cpp
    WinMain.cpp
    stdafx.cpp
)

set(Playwright_PRIVATE_DEFINITIONS _UNICODE)
set(Playwright_PRIVATE_LIBRARIES
    WebKit::WTF
    comctl32
    shlwapi
    user32
)

list(APPEND Playwright_PRIVATE_DEFINITIONS ENABLE_WEBKIT)
list(APPEND Playwright_SOURCES
    WebKitBrowserWindow.cpp
)
list(APPEND Playwright_PRIVATE_LIBRARIES
    WebKit::WebKit
)

WEBKIT_EXECUTABLE_DECLARE(Playwright)
WEBKIT_EXECUTABLE(Playwright)

set_target_properties(Playwright PROPERTIES WIN32_EXECUTABLE ON)
if (${WTF_PLATFORM_WIN_CAIRO})
    target_compile_definitions(Playwright PRIVATE WIN_CAIRO)
endif ()

----------------------------------------

TITLE: Getting WebView Package Identifier in JavaScript
DESCRIPTION: This method returns the package identifier of the WebView. It is a synchronous method that returns a string value representing the package identifier.

LANGUAGE: js
CODE:
method: AndroidWebView.pkg
- returns: <[string]>

----------------------------------------

TITLE: Appending FormData Fields in Java
DESCRIPTION: Shows how to append multiple values to a FormData object, including file uploads, using the append method in Java.

LANGUAGE: java
CODE:
import com.microsoft.playwright.options.FormData;
// ...
FormData form = FormData.create()
    // Only name and value are set.
    .append("firstName", "John")
    // Name and value are set, filename and Content-Type are inferred from the file path.
    .append("attachment", Paths.get("pic.jpg"))
    // Name, value, filename and Content-Type are set.
    .append("attachment", new FilePayload("table.csv", "text/csv", Files.readAllBytes(Paths.get("my-tble.csv"))));
page.request().post("http://localhost/submit", RequestOptions.create().setForm(form));

----------------------------------------

TITLE: Configuring GitHub Actions for Playwright Tests in JavaScript
DESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to run Playwright tests for a JavaScript project. It includes steps for checking out the repository, setting up Node.js, installing dependencies, running tests, and uploading test reports.

LANGUAGE: yml
CODE:
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    - name: Run Playwright tests
      run: npx playwright test
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

----------------------------------------

TITLE: Logging Failed Network Requests in Multiple Languages
DESCRIPTION: Examples showing how to log failed network requests using request failure event handlers across different programming languages.

LANGUAGE: javascript
CODE:
page.on('requestfailed', request => {
  console.log(request.url() + ' ' + request.failure().errorText);
});

LANGUAGE: java
CODE:
page.onRequestFailed(request -> {
  System.out.println(request.url() + " " + request.failure());
});

LANGUAGE: python
CODE:
page.on("requestfailed", lambda request: print(request.url + " " + request.failure))

LANGUAGE: csharp
CODE:
page.RequestFailed += (_, request) =>
{
    Console.WriteLine(request.Failure);
};

----------------------------------------

TITLE: Customizing BrowserContext Options in NUnit with Playwright
DESCRIPTION: Example of overriding the ContextOptions method in an NUnit test class to customize BrowserContext options such as color scheme, viewport size, and base URL.

LANGUAGE: csharp
CODE:
using Microsoft.Playwright.NUnit;

namespace PlaywrightTests;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class MyTest : PageTest
{
    [Test]
    public async Task TestWithCustomContextOptions()
    {
        // The following Page (and BrowserContext) instance has the custom colorScheme, viewport and baseURL set:
        await Page.GotoAsync("/login");
    }

    public override BrowserNewContextOptions ContextOptions()
    {
        return new BrowserNewContextOptions()
        {
            ColorScheme = ColorScheme.Light,
            ViewportSize = new()
            {
                Width = 1920,
                Height = 1080
            },
            BaseURL = "https://github.com",
        };
    }
}

----------------------------------------

TITLE: Configuring Sirv for Single-Page App Mode
DESCRIPTION: Modification to the package.json start script to enable single-page app mode in sirv, allowing it to respond to any path.

LANGUAGE: javascript
CODE:
"start": "sirv public --single"

----------------------------------------

TITLE: Retrieving WebView Process PID in JavaScript
DESCRIPTION: This method returns the process PID (Process ID) of the WebView. It is a synchronous method that returns an integer value.

LANGUAGE: js
CODE:
method: AndroidWebView.pid
- returns: <[int]>

----------------------------------------

TITLE: Using ElementHandle for DOM Interaction in Playwright
DESCRIPTION: Demonstrates using ElementHandle to interact with DOM elements. Note that this approach is discouraged in favor of using Locator objects.

LANGUAGE: javascript
CODE:
const handle = await page.$('text=Submit');
// ...
await handle.hover();
await handle.click();

LANGUAGE: java
CODE:
ElementHandle handle = page.querySelector("text=Submit");
handle.hover();
handle.click();

LANGUAGE: python
CODE:
handle = await page.query_selector("text=Submit")
await handle.hover()
await handle.click()

LANGUAGE: csharp
CODE:
var handle = await page.QuerySelectorAsync("text=Submit");
await handle.HoverAsync();
await handle.ClickAsync();

----------------------------------------

TITLE: Project Directory Structure
DESCRIPTION: Example directory structure showing recommended TypeScript configuration file placement.

LANGUAGE: txt
CODE:
src/
    source.ts

tests/
    tsconfig.json  # test-specific tsconfig
    example.spec.ts

tsconfig.json  # generic tsconfig for all typescript sources

playwright.config.ts

----------------------------------------

TITLE: TypeScript Watch Mode Command
DESCRIPTION: Shell command for running TypeScript compiler in watch mode during local development.

LANGUAGE: sh
CODE:
npx tsc -p tsconfig.json --noEmit -w

----------------------------------------

TITLE: Testing Suite File List - Playwright Page Module
DESCRIPTION: List of test files with timeout failures covering page navigation, events, workers, and other core page functionality tests in Playwright's test suite

LANGUAGE: plaintext
CODE:
page/frame-hierarchy.spec.ts › should send "framenavigated" when navigating on anchor URLs [timeout]
page/interception.spec.ts › should disable memory cache when intercepting [timeout]
page/interception.spec.ts › should intercept worker requests when enabled after worker creation [timeout]
page/page-add-init-script.spec.ts › init script should run only once in popup [timeout]
page/page-basic.spec.ts › page.close should work with window.close [timeout]
page/page-basic.spec.ts › should provide access to the opener page [timeout]
page/page-basic.spec.ts › should return null if parent page has been closed [timeout]
page/page-event-console.spec.ts › should trigger correct Log [timeout]
page/page-event-pageerror.spec.ts › should contain sourceURL [timeout]
page/page-event-pageerror.spec.ts › should contain the Error.name property [timeout]

----------------------------------------

TITLE: Writing GitHub Issue API Tests
DESCRIPTION: Implements test cases for creating bug reports and feature requests using GitHub's API. Includes verification of created issues through API responses.

LANGUAGE: python
CODE:
def test_should_create_bug_report(api_request_context: APIRequestContext) -> None:
    data = {
        "title": "[Bug] report 1",
        "body": "Bug description",
    }
    new_issue = api_request_context.post(f"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues", data=data)
    assert new_issue.ok

    issues = api_request_context.get(f"/repos/{GITHUB_USER}/{GITHUB_REPO}/issues")
    assert issues.ok
    issues_response = issues.json()
    issue = list(filter(lambda issue: issue["title"] == "[Bug] report 1", issues_response))[0]
    assert issue
    assert issue["body"] == "Bug description"

----------------------------------------

TITLE: Basic POST Request with RequestOptions in Java
DESCRIPTION: Demonstrates how to create a basic POST request with query parameters and data using RequestOptions.

LANGUAGE: java
CODE:
context.request().post(
  "https://example.com/submit",
  RequestOptions.create()
    .setQueryParam("page", 1)
    .setData("My data"));

----------------------------------------

TITLE: TypeScript Path Mapping Configuration
DESCRIPTION: TSConfig setup for path mapping with baseUrl configuration.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@myhelper/*": ["packages/myhelper/*"]
    }
  }
}

----------------------------------------

TITLE: Debugging Playwright Tests with Inspector (Bash)
DESCRIPTION: Command to debug Playwright tests using the Playwright Inspector in Bash.

LANGUAGE: bash
CODE:
PWDEBUG=1 dotnet test

----------------------------------------

TITLE: Test Fixtures in Python
DESCRIPTION: Shows how to use pytest fixtures with Playwright for setup and teardown operations.

LANGUAGE: python
CODE:
import pytest
from playwright.sync_api import Page, expect

@pytest.fixture(scope="function", autouse=True)
def before_each_after_each(page: Page):
    
    print("before the test runs")

    # Go to the starting url before each test.
    page.goto("https://playwright.dev/")
    yield
    
    print("after the test runs")

def test_main_navigation(page: Page):
    # Assertions use the expect API.
    expect(page).to_have_url("https://playwright.dev/")

----------------------------------------

TITLE: Installing Firefox Beta Channel
DESCRIPTION: Command to install the beta version of Firefox browser using Puppeteer's browser installer.

LANGUAGE: sh
CODE:
npx -y @puppeteer/browsers install firefox@beta

----------------------------------------

TITLE: Creating and Managing GitHub Issues via API
DESCRIPTION: Implements test methods for creating bug reports and feature requests through GitHub's API, with validation of the created issues.

LANGUAGE: csharp
CODE:
public async Task ShouldCreateBugReport()
{
    var data = new Dictionary<string, string>
    {
        { "title", "[Bug] report 1" },
        { "body", "Bug description" }
    };
    var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });
    await Expect(newIssue).ToBeOKAsync();

    var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");
    await Expect(newIssue).ToBeOKAsync();
    var issuesJsonResponse = await issues.JsonAsync();
    JsonElement? issue = null;
    foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())
    {
        if (issueObj.TryGetProperty("title", out var title) == true)
        {
            if (title.GetString() == "[Bug] report 1")
            {
                issue = issueObj;
            }
        }
    }
    Assert.IsNotNull(issue);
    Assert.AreEqual("Bug description", issue?.GetProperty("body").GetString());
}

----------------------------------------

TITLE: Running Playwright Tests
DESCRIPTION: Command to execute Playwright tests using Pytest in headless mode.

LANGUAGE: bash
CODE:
pytest

----------------------------------------

TITLE: Configuring Reporter via Command Line in Playwright Test
DESCRIPTION: Demonstrates how to specify a reporter using the command line option in Playwright Test.

LANGUAGE: bash
CODE:
npx playwright test --reporter=line

----------------------------------------

TITLE: Updating Playwright Installation
DESCRIPTION: Command to update Playwright and its Pytest plugin to the latest versions.

LANGUAGE: bash
CODE:
pip install pytest-playwright playwright -U

----------------------------------------

TITLE: Setting Custom Binary Path for Bidi
DESCRIPTION: Environment variable configuration to specify a custom browser binary path for Bidi testing.

LANGUAGE: sh
CODE:
BIDIPATH='/Users/myself/Downloads/chrome-mac-arm64/Google Chrome for Testing.app/Contents/MacOS/Google Chrome for Testing'

----------------------------------------

TITLE: Implementing Image Comparison Tests in Playwright
DESCRIPTION: This snippet demonstrates how to set up and run image comparison tests using Playwright. It includes tests for strict and non-strict comparison modes, as well as tests for ignoring specific differences like caret position.

LANGUAGE: JavaScript
CODE:
it('should compare images', async ({ page }) => {
  await test.step('strict mode', async () => {
    expect(await page.compareScreenshot('a.png', 'a.png')).toBe(true);
    expect(await page.compareScreenshot('a.png', 'b.png')).toBe(false);
  });

  await test.step('strict mode with custom threshold', async () => {
    expect(await page.compareScreenshot('a.png', 'a.png', { threshold: 0.5 })).toBe(true);
    expect(await page.compareScreenshot('a.png', 'b.png', { threshold: 0.5 })).toBe(false);
  });

  await test.step('strict mode with antialiasing', async () => {
    expect(await page.compareScreenshot('antialiasing-off.png', 'antialiasing-on.png', { strict: true })).toBe(false);
    expect(await page.compareScreenshot('antialiasing-off.png', 'antialiasing-on.png', { strict: false })).toBe(true);
  });

  await test.step('ignore caret', async () => {
    expect(await page.compareScreenshot('caret-off.png', 'caret-on.png', { strict: true })).toBe(false);
    expect(await page.compareScreenshot('caret-off.png', 'caret-on.png', { strict: false, ignoreCaret: true })).toBe(true);
  });
});

----------------------------------------

TITLE: Getting Video Path - JavaScript
DESCRIPTION: Retrieves the filesystem path of the recorded video in JavaScript.

LANGUAGE: javascript
CODE:
console.log(await page.video().path());

----------------------------------------

TITLE: Basic ElementHandle Usage
DESCRIPTION: Example showing basic element interaction using ElementHandle

LANGUAGE: javascript
CODE:
const hrefElement = await page.$('a');
await hrefElement.click();

LANGUAGE: java
CODE:
ElementHandle hrefElement = page.querySelector("a");
hrefElement.click();

----------------------------------------

TITLE: Converting Between FrameLocator and Locator
DESCRIPTION: Demonstrates how to convert between FrameLocator and Locator objects using the owner method.

LANGUAGE: javascript
CODE:
const frameLocator = page.locator('iframe[name="embedded"]').contentFrame();
// ...
const locator = frameLocator.owner();
await expect(locator).toBeVisible();

LANGUAGE: java
CODE:
FrameLocator frameLocator = page.locator("iframe[name=\"embedded\"]").contentFrame();
// ...
Locator locator = frameLocator.owner();
assertThat(locator).isVisible();

LANGUAGE: python
CODE:
frame_locator = page.locator("iframe[name=\"embedded\"]").content_frame
# ...
locator = frame_locator.owner
await expect(locator).to_be_visible()

LANGUAGE: csharp
CODE:
var frameLocator = Page.Locator("iframe[name=\"embedded\"]").ContentFrame;
// ...
var locator = frameLocator.Owner;
await Expect(locator).ToBeVisibleAsync();

----------------------------------------

TITLE: Running Playwright Tests in Headed Mode
DESCRIPTION: Command to run tests with visible browser window using the --headed flag.

LANGUAGE: bash
CODE:
pytest --headed

----------------------------------------

TITLE: React Scheduler Production License Header
DESCRIPTION: License header for the scheduler.production.min.js file, indicating copyright ownership by Facebook and affiliates, and specifying the MIT license.

LANGUAGE: JavaScript
CODE:
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

----------------------------------------

TITLE: Building for Production
DESCRIPTION: Command to compile and minify the project for production deployment.

LANGUAGE: sh
CODE:
npm run build

----------------------------------------

TITLE: Creating a Custom Fixture for Database User Isolation (JavaScript)
DESCRIPTION: This code creates a custom fixture that isolates database users between parallel workers, using the workerIndex to create unique usernames.

LANGUAGE: javascript
CODE:
import { test as baseTest, expect } from '@playwright/test';
// Import project utils for managing users in the test database.
import { createUserInTestDatabase, deleteUserFromTestDatabase } from './my-db-utils';

export * from '@playwright/test';
export const test = baseTest.extend<{}, { dbUserName: string }>({
  // Returns db user name unique for the worker.
  dbUserName: [async ({ }, use) => {
    // Use workerIndex as a unique identifier for each worker.
    const userName = `user-${test.info().workerIndex}`;
    // Initialize user in the database.
    await createUserInTestDatabase(userName);
    await use(userName);
    // Clean up after the tests are done.
    await deleteUserFromTestDatabase(userName);
  }, { scope: 'worker' }],
});

----------------------------------------

TITLE: Generating Istanbul Report from JavaScript Coverage in Playwright
DESCRIPTION: This code snippet demonstrates how to use Playwright's JavaScript coverage API to generate an Istanbul coverage report for a page load. It launches a Chromium browser, navigates to a page, collects coverage data, and converts it to the Istanbul format.

LANGUAGE: javascript
CODE:
const { chromium } = require('playwright');
const v8toIstanbul = require('v8-to-istanbul');

(async () => {
  const browser = await chromium.launch();
  const page = await browser.newPage();
  await page.coverage.startJSCoverage();
  await page.goto('https://chromium.org');
  const coverage = await page.coverage.stopJSCoverage();
  for (const entry of coverage) {
    const converter = v8toIstanbul('', 0, { source: entry.source });
    await converter.load();
    converter.applyCoverage(entry.functions);
    console.log(JSON.stringify(converter.toIstanbul()));
  }
  await browser.close();
})();

----------------------------------------

TITLE: Installing Azure CLI
DESCRIPTION: Command to install the Azure Command Line Interface using Homebrew.

LANGUAGE: bash
CODE:
brew update && brew install azure-cli

----------------------------------------

TITLE: Running Vue Development Server
DESCRIPTION: Starts the development server with hot-reload functionality for local development.

LANGUAGE: bash
CODE:
npm run serve

----------------------------------------

TITLE: Asserting Page URL in Python (Async)
DESCRIPTION: Demonstrates how to use the PageAssertions class to assert the page URL in an async Playwright test using Python.

LANGUAGE: python
CODE:
import re
from playwright.async_api import Page, expect

async def test_navigates_to_login_page(page: Page) -> None:
    # ..
    await page.get_by_text("Sign in").click()
    await expect(page).to_have_url(re.compile(r".*/login"))

----------------------------------------

TITLE: BoundingBox Usage Example
DESCRIPTION: Shows how to use boundingBox method to get element coordinates

LANGUAGE: javascript
CODE:
const box = await elementHandle.boundingBox();
await page.mouse.click(box.x + box.width / 2, box.y + box.height / 2);

----------------------------------------

TITLE: Reusing Signed-in State (Java)
DESCRIPTION: Shows how to save and reuse authenticated state in Java Playwright tests.

LANGUAGE: java
CODE:
context.storageState(new BrowserContext.StorageStateOptions().setPath(Paths.get("state.json")));

BrowserContext context = browser.newContext(
  new Browser.NewContextOptions().setStorageStatePath(Paths.get("state.json")));

----------------------------------------

TITLE: Hermetic Installation of Playwright Browsers
DESCRIPTION: Install Playwright browsers in a local folder for hermetic builds.

LANGUAGE: bash
CODE:
# Places binaries to node_modules/playwright-core/.local-browsers
PLAYWRIGHT_BROWSERS_PATH=0 npx playwright install

LANGUAGE: batch
CODE:
# Places binaries to node_modules\playwright-core\.local-browsers
set PLAYWRIGHT_BROWSERS_PATH=0
npx playwright install

LANGUAGE: powershell
CODE:
# Places binaries to node_modules\playwright-core\.local-browsers
$Env:PLAYWRIGHT_BROWSERS_PATH=0
npx playwright install

----------------------------------------

TITLE: Publishing Azure Function
DESCRIPTION: Command to publish the function to Azure Functions using the Core Tools CLI.

LANGUAGE: bash
CODE:
func azure functionapp publish folio-flakiness-dashboard --javascript

----------------------------------------

TITLE: Deploying Svelte App to Surge
DESCRIPTION: Commands to install Surge globally, build the Svelte app, and deploy it to the Surge hosting platform.

LANGUAGE: bash
CODE:
npm install -g surge
npm run build
surge public my-project.surge.sh

----------------------------------------

TITLE: Debugging and UI Mode in Playwright Tests
DESCRIPTION: This section covers commands for running Playwright tests in debug mode with the Playwright Inspector and in interactive UI mode with built-in watch functionality.

LANGUAGE: bash
CODE:
npx playwright test --debug

LANGUAGE: bash
CODE:
npx playwright test --ui

----------------------------------------

TITLE: Attaching Screenshots to Test Reports
DESCRIPTION: Shows how to attach screenshots to test reports using TestInfo.attach method with binary data.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }, testInfo) => {
  await page.goto('https://playwright.dev');
  const screenshot = await page.screenshot();
  await testInfo.attach('screenshot', { body: screenshot, contentType: 'image/png' });
});

----------------------------------------

TITLE: Service Worker Registration in HTML
DESCRIPTION: HTML code showing how to register a Service Worker on a webpage.

LANGUAGE: html
CODE:
<!-- filename: index.html -->
<script>
  window.registrationPromise = navigator.serviceWorker.register('/transparent-service-worker.js');
</script>

----------------------------------------

TITLE: Building Svelte App for Production
DESCRIPTION: Command to create an optimized production build of the Svelte application.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Typing Text with Keyboard in Playwright
DESCRIPTION: This code snippet demonstrates how to use the Keyboard API's type method to input text. It shows how to type instantly and how to simulate slower typing by adding a delay between keystrokes.

LANGUAGE: javascript
CODE:
await page.keyboard.type('Hello'); // Types instantly
await page.keyboard.type('World', { delay: 100 }); // Types slower, like a user

LANGUAGE: java
CODE:
// Types instantly
page.keyboard().type("Hello");
// Types slower, like a user
page.keyboard().type("World", new Keyboard.TypeOptions().setDelay(100));

LANGUAGE: python
CODE:
await page.keyboard.type("Hello") # types instantly
await page.keyboard.type("World", delay=100) # types slower, like a user

LANGUAGE: csharp
CODE:
await page.Keyboard.TypeAsync("Hello"); // types instantly
await page.Keyboard.TypeAsync("World", new() { Delay = 100 }); // types slower, like a user

----------------------------------------

TITLE: Handling File Downloads with Playwright in Python (Sync)
DESCRIPTION: Demonstrates synchronous file download handling using Playwright in Python, including waiting for the download and saving the file.

LANGUAGE: python
CODE:
# Start waiting for the download
with page.expect_download() as download_info:
    # Perform the action that initiates download
    page.get_by_text("Download file").click()
download = download_info.value

# Wait for the download process to complete and save the downloaded file somewhere
download.save_as("/path/to/save/at/" + download.suggested_filename)

----------------------------------------

TITLE: Creating Authentication Directory (Bash)
DESCRIPTION: Creates a directory for storing authentication data and adds it to .gitignore.

LANGUAGE: bash
CODE:
mkdir -p playwright/.auth
echo $'\nplaywright/.auth' >> .gitignore

----------------------------------------

TITLE: Pausing Clock at Specific Time in Playwright
DESCRIPTION: Demonstrates how to advance the clock to a specific time and pause it using the pauseAt method. Time can be specified as a Date object or a string.

LANGUAGE: javascript
CODE:
await page.clock.pauseAt(new Date('2020-02-02'));
await page.clock.pauseAt('2020-02-02');

LANGUAGE: python
CODE:
await page.clock.pause_at(datetime.datetime(2020, 2, 2))
await page.clock.pause_at("2020-02-02")

LANGUAGE: java
CODE:
SimpleDateFormat format = new SimpleDateFormat("yyy-MM-dd");
page.clock().pauseAt(format.parse("2020-02-02"));
page.clock().pauseAt("2020-02-02");

LANGUAGE: csharp
CODE:
await page.Clock.PauseAtAsync(DateTime.Parse("2020-02-02"));
await page.Clock.PauseAtAsync("2020-02-02");

----------------------------------------

TITLE: Starting Svelte Development Server with Rollup
DESCRIPTION: Command to start the development server using Rollup, which allows for live reloading during development.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Starting React Development Server with npm
DESCRIPTION: Runs the React application in development mode, allowing for live reloading and displaying lint errors in the console. The app becomes accessible at http://localhost:3000 in the browser.

LANGUAGE: bash
CODE:
npm start

----------------------------------------

TITLE: Running Playwright Tests on Specific Browser (Batch)
DESCRIPTION: Commands to run Playwright tests on a specific browser (WebKit) using environment variable in Batch.

LANGUAGE: batch
CODE:
set BROWSER=webkit
dotnet test

----------------------------------------

TITLE: Using React locator in Playwright
DESCRIPTION: Example of using the experimental React locator to find elements by component name.

LANGUAGE: javascript
CODE:
await page.locator('_react=BookItem').click();

LANGUAGE: java
CODE:
page.locator("_react=BookItem").click();

LANGUAGE: python
CODE:
await page.locator("_react=BookItem").click()

LANGUAGE: csharp
CODE:
await page.Locator("_react=BookItem").ClickAsync();

----------------------------------------

TITLE: Ejecting from Create React App Configuration
DESCRIPTION: Removes the single build dependency and copies all configuration files and transitive dependencies into the project. This allows for full control over the build process but is irreversible.

LANGUAGE: bash
CODE:
npm run eject

----------------------------------------

TITLE: Evaluating JSHandle in C#
DESCRIPTION: Demonstrates the usage of the EvaluateAsync method on a JSHandle to get the innerText of a tweet's retweet count element in C#.

LANGUAGE: csharp
CODE:
var tweetHandle = await page.QuerySelectorAsync(".tweet .retweets");
Assert.AreEqual("10 retweets", await tweetHandle.EvaluateAsync("node => node.innerText"));

----------------------------------------

TITLE: Appending FormData Fields in C#
DESCRIPTION: Demonstrates how to create a FormData object and append multiple fields, including file uploads, using C# in Playwright.

LANGUAGE: csharp
CODE:
var multipart = Context.APIRequest.CreateFormData();
// Only name and value are set.
multipart.Append("firstName", "John");
// Name, value, filename and Content-Type are set.
multipart.Append("attachment", new FilePayload()
{
    Name = "pic.jpg",
    MimeType = "image/jpeg",
    Buffer = File.ReadAllBytes("john.jpg")
});
// Name, value, filename and Content-Type are set.
multipart.Append("attachment", new FilePayload()
{
    Name = "table.csv",
    MimeType = "text/csv",
    Buffer = File.ReadAllBytes("my-tble.csv")
});
await Page.APIRequest.PostAsync("https://localhost/submit", new() { Multipart = multipart });

----------------------------------------

TITLE: Authentication Setup for Shared Account (JavaScript)
DESCRIPTION: Sets up authentication for a shared account to be used across all tests.

LANGUAGE: javascript
CODE:
import { test as setup, expect } from '@playwright/test';
import path from 'path';

const authFile = path.join(__dirname, '../playwright/.auth/user.json');

setup('authenticate', async ({ page }) => {
  await page.goto('https://github.com/login');
  await page.getByLabel('Username or email address').fill('username');
  await page.getByLabel('Password').fill('password');
  await page.getByRole('button', { name: 'Sign in' }).click();
  await page.waitForURL('https://github.com/');
  await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();

  await page.context().storageState({ path: authFile });
});

----------------------------------------

TITLE: Handling TimeoutError in JavaScript with Playwright
DESCRIPTION: Demonstrates how to catch and handle TimeoutError when clicking an element with a custom timeout in JavaScript. Uses async/await pattern with try-catch block.

LANGUAGE: javascript
CODE:
const playwright = require('playwright');

(async () => {
  const browser = await playwright.chromium.launch();
  const context = await browser.newContext();
  const page = await context.newPage();
  try {
    await page.locator('text=Foo').click({
      timeout: 100,
    });
  } catch (error) {
    if (error instanceof playwright.errors.TimeoutError)
      console.log('Timeout!');
  }
  await browser.close();
})();

----------------------------------------

TITLE: Building React Production Bundle with npm
DESCRIPTION: Creates a production-ready build of the React application in the 'build' folder. This process includes bundling, optimizing, and minifying the code for optimal performance.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Running Playwright Tests in Headed Mode (Batch)
DESCRIPTION: Commands to run Playwright tests in headed mode, opening a browser window for each test, using Batch.

LANGUAGE: batch
CODE:
set HEADED=1
dotnet test

----------------------------------------

TITLE: Tapping on Android Screen in JavaScript
DESCRIPTION: Simulates a tap at a specific point on an Android device screen. The method takes x and y coordinates for the tap location.

LANGUAGE: js
CODE:
await androidInput.tap({ x: tapX, y: tapY });

----------------------------------------

TITLE: Opening Trace in Python
DESCRIPTION: Demonstrates how to open a saved trace using the Playwright CLI in Python. It uses the playwright command to show the trace file.

LANGUAGE: bash
CODE:
playwright show-trace trace.zip

----------------------------------------

TITLE: Capturing Full Page Screenshot in Playwright
DESCRIPTION: This snippet demonstrates how to capture a full page screenshot, which includes the entire scrollable area of the page. It uses the 'fullPage' or 'full_page' option to achieve this across different programming languages.

LANGUAGE: javascript
CODE:
await page.screenshot({ path: 'screenshot.png', fullPage: true });

LANGUAGE: java
CODE:
page.screenshot(new Page.ScreenshotOptions()
  .setPath(Paths.get("screenshot.png"))
  .setFullPage(true));

LANGUAGE: python
CODE:
await page.screenshot(path="screenshot.png", full_page=True)

LANGUAGE: csharp
CODE:
await Page.ScreenshotAsync(new()
{
    Path = "screenshot.png",
    FullPage = true,
});

----------------------------------------

TITLE: Setting FormData Fields in Java
DESCRIPTION: Illustrates how to set various types of fields in a FormData object, including file uploads, using Java in Playwright.

LANGUAGE: java
CODE:
import com.microsoft.playwright.options.FormData;
// ...
FormData form = FormData.create()
    // Only name and value are set.
    .set("firstName", "John")
    // Name and value are set, filename and Content-Type are inferred from the file path.
    .set("profilePicture1", Paths.get("john.jpg"))
    // Name, value, filename and Content-Type are set.
    .set("profilePicture2", new FilePayload("john.jpg", "image/jpeg", Files.readAllBytes(Paths.get("john.jpg"))))
    .set("age", 30);
page.request().post("http://localhost/submit", RequestOptions.create().setForm(form));

----------------------------------------

TITLE: WebView2 Test Setup in JavaScript
DESCRIPTION: Sets up a test environment for WebView2 automation, including process management and CDP connection.

LANGUAGE: javascript
CODE:
import { test as base } from '@playwright/test';
import fs from 'fs';
import os from 'os';
import path from 'path';
import childProcess from 'child_process';

const EXECUTABLE_PATH = path.join(
    __dirname,
    '../../webview2-app/bin/Debug/net8.0-windows/webview2.exe',
);

export const test = base.extend({
  browser: async ({ playwright }, use, testInfo) => {
    const cdpPort = 10000 + testInfo.workerIndex;
    // Make sure that the executable exists and is executable
    fs.accessSync(EXECUTABLE_PATH, fs.constants.X_OK);
    const userDataDir = path.join(
        fs.realpathSync.native(os.tmpdir()),
        `playwright-webview2-tests/user-data-dir-${testInfo.workerIndex}`,
    );
    const webView2Process = childProcess.spawn(EXECUTABLE_PATH, [], {
      shell: true,
      env: {
        ...process.env,
        WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS: `--remote-debugging-port=${cdpPort}`,
        WEBVIEW2_USER_DATA_FOLDER: userDataDir,
      }
    });
    await new Promise<void>(resolve => webView2Process.stdout.on('data', data => {
      if (data.toString().includes('WebView2 initialized'))
        resolve();
    }));
    const browser = await playwright.chromium.connectOverCDP(`http://127.0.0.1:${cdpPort}`);
    await use(browser);
    await browser.close();
    childProcess.execSync(`taskkill /pid ${webView2Process.pid} /T /F`);
    fs.rmdirSync(userDataDir, { recursive: true });
  },
  context: async ({ browser }, use) => {
    const context = browser.contexts()[0];
    await use(context);
  },
  page: async ({ context }, use) => {
    const page = context.pages()[0];
    await use(page);
  },
});

export { expect } from '@playwright/test';

----------------------------------------

TITLE: Handling Console Messages in JavaScript
DESCRIPTION: Examples of listening for console messages, handling errors, and accessing console message arguments in JavaScript using Playwright.

LANGUAGE: javascript
CODE:
// Listen for all console logs
page.on('console', msg => console.log(msg.text()));

// Listen for all console events and handle errors
page.on('console', msg => {
  if (msg.type() === 'error')
    console.log(`Error text: "${msg.text()}"`);
});

// Get the next console log
const msgPromise = page.waitForEvent('console');
await page.evaluate(() => {
  console.log('hello', 42, { foo: 'bar' });  // Issue console.log inside the page
});
const msg = await msgPromise;

// Deconstruct console log arguments
await msg.args()[0].jsonValue(); // hello
await msg.args()[1].jsonValue(); // 42

----------------------------------------

TITLE: Recording Traces in Java
DESCRIPTION: Illustrates how to record traces in Java using the BrowserContext.tracing API. It includes launching a browser, creating a context, starting tracing, navigating to a page, and saving the trace.

LANGUAGE: java
CODE:
Browser browser = browserType.launch();
BrowserContext context = browser.newContext();

// Start tracing before creating / navigating a page.
context.tracing().start(new Tracing.StartOptions()
  .setScreenshots(true)
  .setSnapshots(true)
  .setSources(true));

Page page = context.newPage();
page.navigate("https://playwright.dev");

// Stop tracing and export it into a zip archive.
context.tracing().stop(new Tracing.StopOptions()
  .setPath(Paths.get("trace.zip")));

----------------------------------------

TITLE: Installing Dependencies for Svelte App
DESCRIPTION: Commands to navigate to the project directory and install the necessary dependencies using npm.

LANGUAGE: bash
CODE:
cd svelte-app
npm install

----------------------------------------

TITLE: Accessing Playwright Test CLI Help
DESCRIPTION: This command shows how to access the help documentation for the Playwright Test CLI, which provides information on all available options and their usage.

LANGUAGE: bash
CODE:
npx playwright test --help

----------------------------------------

TITLE: WebView2 Test Example in Java
DESCRIPTION: Shows how to set up and run a WebView2 test using Playwright in Java.

LANGUAGE: java
CODE:
package com.example;

import com.microsoft.playwright.Browser;
import com.microsoft.playwright.BrowserContext;
import com.microsoft.playwright.Locator;
import com.microsoft.playwright.Page;
import com.microsoft.playwright.Playwright;
import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

import java.io.IOException;

public class TestExample {
  // Shared between all tests in this class.
  static WebView2Process webview2Process;
  static Playwright playwright;
  static Browser browser;
  static BrowserContext context;
  static Page page;

  @BeforeAll
  static void launchBrowser() throws IOException {
    playwright = Playwright.create();
    webview2Process = new WebView2Process();
    browser = playwright.chromium().connectOverCDP("http://127.0.0.1:" + webview2Process.cdpPort);
    context = browser.contexts().get(0);
    page = context.pages().get(0);
  }

  @AfterAll
  static void closeBrowser() {
    webview2Process.dispose();
  }

  @Test
  public void shouldClickButton() {
    page.navigate("https://playwright.dev");
    Locator gettingStarted = page.getByText("Get started");
    assertThat(gettingStarted).isVisible();
  }
}

----------------------------------------

TITLE: Recording Traces with xUnit in Playwright .NET
DESCRIPTION: This snippet illustrates how to set up trace recording for xUnit tests using Playwright. It starts tracing in the InitializeAsync method and stops it in the DisposeAsync method, saving the trace as a zip file. It also includes a custom attribute to capture test names.

LANGUAGE: csharp
CODE:
using System.Reflection;
using Microsoft.Playwright;
using Microsoft.Playwright.Xunit;
using Xunit.Sdk;

namespace PlaywrightTests;

[WithTestName]
public class UnitTest1 : PageTest
{
    public override async Task InitializeAsync()
    {
        await base.InitializeAsync().ConfigureAwait(false);
        await Context.Tracing.StartAsync(new()
        {
            Title = $"{WithTestNameAttribute.CurrentClassName}.{WithTestNameAttribute.CurrentTestName}",
            Screenshots = true,
            Snapshots = true,
            Sources = true
        });
    }

    public override async Task DisposeAsync()
    {
        await Context.Tracing.StopAsync(new()
        {
            Path = Path.Combine(
                Environment.CurrentDirectory,
                "playwright-traces",
               $"{WithTestNameAttribute.CurrentClassName}.{WithTestNameAttribute.CurrentTestName}.zip"
            )
        });
        await base.DisposeAsync().ConfigureAwait(false);
    }

    [Fact]
    public async Task GetStartedLink()
    {
        // ...
        await Page.GotoAsync("https://playwright.dev/dotnet/docs/intro");
    }
}

public class WithTestNameAttribute : BeforeAfterTestAttribute
{
    public static string CurrentTestName = string.Empty;
    public static string CurrentClassName = string.Empty;

    public override void Before(MethodInfo methodInfo)
    {
        CurrentTestName = methodInfo.Name;
        CurrentClassName = methodInfo.DeclaringType!.Name;
    }

    public override void After(MethodInfo methodInfo)
    {
    }
}

----------------------------------------

TITLE: Running Tests in UI Mode
DESCRIPTION: Commands to run Playwright tests in UI mode for enhanced debugging capabilities.

LANGUAGE: bash
CODE:
npx playwright test --ui

LANGUAGE: bash
CODE:
yarn playwright test --ui

LANGUAGE: bash
CODE:
pnpm exec playwright test --ui

----------------------------------------

TITLE: Drawing Square with Mouse Movement - Python (Sync)
DESCRIPTION: Shows synchronous mouse movement in Python to draw a 100x100 pixel square using the page.mouse API.

LANGUAGE: python
CODE:
page.mouse.move(0, 0)
page.mouse.down()
page.mouse.move(0, 100)
page.mouse.move(100, 100)
page.mouse.move(100, 0)
page.mouse.move(0, 0)
page.mouse.up()

----------------------------------------

TITLE: TodoPage Implementation
DESCRIPTION: Page Object Model implementation for Todo application interactions

LANGUAGE: typescript
CODE:
import type { Page, Locator } from '@playwright/test';

export class TodoPage {
  private readonly inputBox: Locator;
  private readonly todoItems: Locator;

  constructor(public readonly page: Page) {
    this.inputBox = this.page.locator('input.new-todo');
    this.todoItems = this.page.getByTestId('todo-item');
  }

  async goto() {
    await this.page.goto('https://demo.playwright.dev/todomvc/');
  }

  async addToDo(text: string) {
    await this.inputBox.fill(text);
    await this.inputBox.press('Enter');
  }

  async remove(text: string) {
    const todo = this.todoItems.filter({ hasText: text });
    await todo.hover();
    await todo.getByLabel('Delete').click();
  }

  async removeAll() {
    while ((await this.todoItems.count()) > 0) {
      await this.todoItems.first().hover();
      await this.todoItems.getByLabel('Delete').first().click();
    }
  }
}

----------------------------------------

TITLE: Getting Properties of JSHandle in Java
DESCRIPTION: Demonstrates how to use the getProperties method on a JSHandle to retrieve window and document objects in Java.

LANGUAGE: java
CODE:
JSHandle handle = page.evaluateHandle("() => ({ window, document })");
Map<String, JSHandle> properties = handle.getProperties();
JSHandle windowHandle = properties.get("window");
JSHandle documentHandle = properties.get("document");
handle.dispose();

----------------------------------------

TITLE: Configuring Blob Reporter in Playwright Config
DESCRIPTION: Shows how to configure the blob reporter in the Playwright configuration file for CI environments.

LANGUAGE: javascript
CODE:
export default defineConfig({
  testDir: './tests',
  reporter: process.env.CI ? 'blob' : 'html',
});

----------------------------------------

TITLE: Creating External Store in Svelte with TypeScript
DESCRIPTION: Demonstrates how to create a simple external store in Svelte to preserve component state during Hot Module Replacement (HMR). The store uses Svelte's writable store pattern to maintain state outside of components.

LANGUAGE: typescript
CODE:
// store.ts
// An extremely simple external store
import { writable } from 'svelte/store'
export default writable(0)

----------------------------------------

TITLE: Component Test Installation Commands
DESCRIPTION: Package manager commands for installing Playwright's component testing functionality

LANGUAGE: bash
CODE:
npm init playwright@latest -- --ct
yarn create playwright --ct
pnpm create playwright --ct

----------------------------------------

TITLE: Starting Development Server
DESCRIPTION: Command to start the development server with hot-reload functionality enabled.

LANGUAGE: sh
CODE:
npm run dev

----------------------------------------

TITLE: Attaching Files from Custom Downloads
DESCRIPTION: Demonstrates how to attach downloaded files to test steps using TestStepInfo.attach method with file paths.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';
import { download } from './my-custom-helpers';

test('basic test', async ({}) => {
  await test.step('check download behavior', async step => {
    const tmpPath = await download('a');
    await step.attach('downloaded', { path: tmpPath });
  });
});

----------------------------------------

TITLE: Asserting API Response in Playwright Tests (Java)
DESCRIPTION: Shows how to use the assertThat function to check if an API response is OK in a Playwright test using Java.

LANGUAGE: java
CODE:
// ...
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class TestPage {
  // ...
  @Test
  void navigatesToLoginPage() {
    // ...
    APIResponse response = page.request().get("https://playwright.dev");
    assertThat(response).isOK();
  }
}

----------------------------------------

TITLE: Triggering Select-All with Keyboard in Playwright
DESCRIPTION: This code snippet demonstrates how to trigger the select-all action using the Keyboard API in Playwright. It uses the 'ControlOrMeta' key, which resolves to 'Control' on Windows/Linux and 'Meta' on macOS.

LANGUAGE: javascript
CODE:
await page.keyboard.press('ControlOrMeta+A');

LANGUAGE: java
CODE:
page.keyboard().press("ControlOrMeta+A");

LANGUAGE: python
CODE:
await page.keyboard.press("ControlOrMeta+A")

LANGUAGE: csharp
CODE:
await page.Keyboard.PressAsync("ControlOrMeta+A");

----------------------------------------

TITLE: Running Playwright Tests
DESCRIPTION: Command to execute the Playwright tests using dotnet test runner.

LANGUAGE: bash
CODE:
dotnet test

----------------------------------------

TITLE: Waiting for Service Worker Activation
DESCRIPTION: Implementation-agnostic method to wait for a Service Worker to be fully activated before proceeding with operations.

LANGUAGE: javascript
CODE:
await page.evaluate(async () => {
  const registration = await window.navigator.serviceWorker.getRegistration();
  if (registration.active?.state === 'activated')
    return;
  await new Promise(res =>
    window.navigator.serviceWorker.addEventListener('controllerchange', res),
  );
});

----------------------------------------

TITLE: Installing Vue CLI Project Dependencies
DESCRIPTION: Installs all required node modules and dependencies for the Vue CLI project.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Project-Level Parameterization Configuration
DESCRIPTION: Demonstrates how to set up project-level parameterization using Playwright configuration

LANGUAGE: typescript
CODE:
import { defineConfig } from '@playwright/test';
import type { TestOptions } from './my-test';

export default defineConfig<TestOptions>({
  projects: [
    {
      name: 'alice',
      use: { person: 'Alice' },
    },
    {
      name: 'bob',
      use: { person: 'Bob' },
    },
  ]
});

----------------------------------------

TITLE: Installing Azure Functions Core Tools
DESCRIPTION: Commands to install Azure Functions Core Tools version 4 using Homebrew, including steps for upgrading from previous versions.

LANGUAGE: bash
CODE:
brew tap azure/functions
brew install azure-functions-core-tools@4
# if upgrading on a machine that has 2.x or 3.x installed:
brew link --overwrite azure-functions-core-tools@4

----------------------------------------

TITLE: Equivalent Playwright Test Example
DESCRIPTION: Shows the equivalent test implementation using Playwright Test, demonstrating improved syntax and built-in assertions.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test.describe('Playwright homepage', () => {
  test('contains hero title', async ({ page }) => {
    await page.goto('https://playwright.dev/');
    const titleLocator = page.locator('.hero__title');
    await expect(titleLocator).toContainText(
        'Playwright enables reliable end-to-end testing'
    );
  });
});

----------------------------------------

TITLE: Handling Console Events in Electron Main Process
DESCRIPTION: Shows how to capture and process console messages from the Electron main process. Demonstrates accessing console arguments and converting them to JSON values.

LANGUAGE: javascript
CODE:
electronApp.on('console', async msg => {
  const values = [];
  for (const arg of msg.args())
    values.push(await arg.jsonValue());
  console.log(...values);
});
await electronApp.evaluate(() => console.log('hello', 5, { foo: 'bar' }));

----------------------------------------

TITLE: Interacting with Chrome DevTools Protocol using CDPSession in C#
DESCRIPTION: This snippet shows how to create a new CDP session, enable runtime, listen for animation events, get and set playback rates using the Chrome DevTools Protocol in C#.

LANGUAGE: csharp
CODE:
var client = await Page.Context.NewCDPSessionAsync(Page);
await client.SendAsync("Runtime.enable");
client.Event("Animation.animationCreated").OnEvent += (_, _) => Console.WriteLine("Animation created!");
var response = await client.SendAsync("Animation.getPlaybackRate");
var playbackRate = response.Value.GetProperty("playbackRate").GetDouble();
Console.WriteLine("playback rate is " + playbackRate);
await client.SendAsync("Animation.setPlaybackRate", new() { { "playbackRate", playbackRate / 2 } });

----------------------------------------

TITLE: Launching Browser in Non-Headless Mode with Playwright
DESCRIPTION: Shows how to launch a browser in non-headless mode with slow motion option for debugging purposes. This can be useful for visualizing the automation process.

LANGUAGE: java
CODE:
playwright.firefox().launch(new BrowserType.LaunchOptions().setHeadless(false).setSlowMo(50));

----------------------------------------

TITLE: Running Playwright Test Suites
DESCRIPTION: Commands for running library tests in different browsers and test runner tests.

LANGUAGE: bash
CODE:
# fast path runs all tests in Chromium
npm run ctest

# slow path runs all tests in three browsers
npm run test

----------------------------------------

TITLE: Installing NPM Dependencies
DESCRIPTION: Commands to navigate to the project directory and install Node.js dependencies which will be published with the function.

LANGUAGE: bash
CODE:
cd utils/flakiness-dashboard/
npm install

----------------------------------------

TITLE: CSV-Driven Test Generation in Playwright
DESCRIPTION: Shows how to generate tests dynamically using data from a CSV file using the csv-parse library

LANGUAGE: typescript
CODE:
import fs from 'fs';
import path from 'path';
import { test } from '@playwright/test';
import { parse } from 'csv-parse/sync';

const records = parse(fs.readFileSync(path.join(__dirname, 'input.csv')), {
  columns: true,
  skip_empty_lines: true
});

for (const record of records) {
  test(`foo: ${record.test_case}`, async ({ page }) => {
    console.log(record.test_case, record.some_value, record.some_other_value);
  });
}

----------------------------------------

TITLE: Julia SSIM Color-Weighted Calculation
DESCRIPTION: This code snippet from the ImageQualityIndexes.jl package in Julia shows how SSIM is computed as a weighted combination of per-channel SSIM values, rather than using only the luma channel.

LANGUAGE: Julia
CODE:
ssim(img1, img2) = mean(ssim(c1, c2) for (c1, c2) in zip(channelview(img1), channelview(img2)))

----------------------------------------

TITLE: Using the 'not' Method in API Response Assertions (Java)
DESCRIPTION: Demonstrates how to use the 'not()' method to invert an assertion in Playwright tests with Java, checking that a response is not OK.

LANGUAGE: java
CODE:
assertThat(response).not().isOK();

----------------------------------------

TITLE: Handling API Responses with Playwright in Python (Async)
DESCRIPTION: This snippet demonstrates how to use the APIResponse class in Playwright with asynchronous Python. It shows making a GET request, asserting response properties, and handling JSON data.

LANGUAGE: python
CODE:
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    context = await playwright.request.new_context()
    response = await context.get("https://example.com/user/repos")
    assert response.ok
    assert response.status == 200
    assert response.headers["content-type"] == "application/json; charset=utf-8"
    assert response.json()["name"] == "foobar"
    assert await response.body() == '{"status": "ok"}'


async def main():
    async with async_playwright() as playwright:
        await run(playwright)

asyncio.run(main())

----------------------------------------

TITLE: Evaluating JSHandle in Java
DESCRIPTION: Demonstrates the usage of the evaluate method on a JSHandle to get the innerText of a tweet's retweet count element in Java.

LANGUAGE: java
CODE:
ElementHandle tweetHandle = page.querySelector(".tweet .retweets");
assertEquals("10 retweets", tweetHandle.evaluate("node => node.innerText"));

----------------------------------------

TITLE: FrameLocator Strictness Handling
DESCRIPTION: Shows how to handle multiple frame scenarios and proper frame selection to avoid strictness errors.

LANGUAGE: javascript
CODE:
// Throws if there are several frames in DOM:
await page.locator('.result-frame').contentFrame().getByRole('button').click();

// Works because we explicitly tell locator to pick the first frame:
await page.locator('.result-frame').contentFrame().first().getByRole('button').click();

LANGUAGE: python
CODE:
# Throws if there are several frames in DOM:
page.locator('.result-frame').content_frame.get_by_role('button').click()

# Works because we explicitly tell locator to pick the first frame:
page.locator('.result-frame').first.content_frame.get_by_role('button').click()

LANGUAGE: java
CODE:
// Throws if there are several frames in DOM:
page.locator(".result-frame").contentFrame().getByRole(AriaRole.BUTTON).click();

// Works because we explicitly tell locator to pick the first frame:
page.locator(".result-frame").first().contentFrame().getByRole(AriaRole.BUTTON).click();

LANGUAGE: csharp
CODE:
// Throws if there are several frames in DOM:
await page.Locator(".result-frame").ContentFrame.GetByRole(AriaRole.Button).ClickAsync();

// Works because we explicitly tell locator to pick the first frame:
await page.Locator(".result-frame").First.ContentFrame.getByRole(AriaRole.Button).ClickAsync();

----------------------------------------

TITLE: Generating Self-Signed Client Certificate
DESCRIPTION: Creates a self-signed client certificate that will be considered invalid by the server. Includes generation of private key, certificate signing request, and self-signed certificate.

LANGUAGE: bash
CODE:
mkdir -p client/self-signed
openssl req \
	-newkey rsa:4096 \
	-keyout client/self-signed/key.pem \
	-out client/self-signed/csr.pem \
	-nodes \
	-days 365 \
	-subj "/CN=Bob"

# sign with self-signed/key.pem
openssl x509 \
	-req \
	-in client/self-signed/csr.pem \
	-signkey client/self-signed/key.pem \
	-out client/self-signed/cert.pem \
	-days 365

----------------------------------------

TITLE: Configuring Test-Level Timeouts
DESCRIPTION: Shows how to set timeouts for individual tests using test.setTimeout() and test.slow()

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('slow test', async ({ page }) => {
  test.slow(); // Easy way to triple the default timeout
  // ...
});

test('very slow test', async ({ page }) => {
  test.setTimeout(120_000);
  // ...
});

----------------------------------------

TITLE: Configuring Playwright Project in CMake for macOS
DESCRIPTION: Sets up the Playwright project configuration, including directory paths, source files, include directories, libraries, and linker flags. It also defines custom commands for compiling NIB files and creates the main executable target.

LANGUAGE: CMake
CODE:
set(PLAYWRIGHT_DIR "${TOOLS_DIR}/Playwright/mac")

add_definitions("-include Playwright_Prefix.pch -DWEBCORE_EXPORT=")

set(Playwright_SOURCES
    ${PLAYWRIGHT_DIR}/AppDelegate.m
    ${PLAYWRIGHT_DIR}/BrowserWindowController.m
    ${PLAYWRIGHT_DIR}/main.m
    ${TOOLS_DIR}/Playwright/MBToolbarItem.m
)

set(Playwright_INCLUDE_DIRECTORIES
    ${CMAKE_SOURCE_DIR}/Source
    ${FORWARDING_HEADERS_DIR}
    ${PLAYWRIGHT_DIR}
)

set(Playwright_LIBRARIES
    WebKit
)

set(CMAKE_EXE_LINKER_FLAGS "-framework Cocoa")

set(EXECUTABLE_NAME Playwright)
set(PRODUCT_NAME Playwright)

set(Playwright_Contents_Directory ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Playwright.app/Contents)
make_directory(${Playwright_Contents_Directory}/Resources)
add_custom_command(OUTPUT ${Playwright_Contents_Directory}/Resources/BrowserWindow.nib
    COMMAND ibtool --compile ${Playwright_Contents_Directory}/Resources/BrowserWindow.nib ${PLAYWRIGHT_DIR}/BrowserWindow.xib VERBATIM)
add_custom_command(OUTPUT ${Playwright_Contents_Directory}/Resources/MainMenu.nib
    COMMAND ibtool --compile ${Playwright_Contents_Directory}/Resources/MainMenu.nib ${PLAYWRIGHT_DIR}/MainMenu.xib VERBATIM)
add_custom_target(PlaywrightNibs ALL DEPENDS
    ${Playwright_Contents_Directory}/Resources/BrowserWindow.nib
    ${Playwright_Contents_Directory}/Resources/MainMenu.nib
)

include_directories(${Playwright_INCLUDE_DIRECTORIES})
add_executable(Playwright MACOSX_BUNDLE ${Playwright_SOURCES})
set_target_properties(Playwright PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${PLAYWRIGHT_DIR}/Info.plist)
target_link_libraries(Playwright ${Playwright_LIBRARIES})
add_dependencies(Playwright PlaywrightNibs)

----------------------------------------

TITLE: Using Locator Filter for Visible Elements
DESCRIPTION: Example of using the Locator.filter method to match only visible elements

LANGUAGE: csharp
CODE:
// Ignore invisible todo items.
var todoItems = Page.GetByTestId("todo-item").Filter(new() { Visible = true });
// Check there are exactly 3 visible ones.
await Expect(todoItems).ToHaveCountAsync(3);

----------------------------------------

TITLE: Connecting to AndroidWebView and Returning a Page in JavaScript
DESCRIPTION: This method connects to the WebView and returns a regular Playwright Page object for interaction. It is an asynchronous method that returns a Promise resolving to a Page object.

LANGUAGE: js
CODE:
async method: AndroidWebView.page
- returns: <[Page]>

----------------------------------------

TITLE: Verifying API Calls with Playwright
DESCRIPTION: This snippet demonstrates how to log and verify API calls made by the page. It uses Page.exposeFunction to pass messages from the page to the test code and compares the logged calls with expected results.

LANGUAGE: javascript
CODE:
test('log battery calls', async ({ page }) => {
  const log = [];
  // Expose function for pushing messages to the Node.js script.
  await page.exposeFunction('logCall', msg => log.push(msg));
  await page.addInitScript(() => {
    const mockBattery = {
      level: 0.75,
      charging: true,
      chargingTime: 1800,
      dischargingTime: Infinity,
      // Log addEventListener calls.
      addEventListener: (name, cb) => logCall(`addEventListener:${name}`)
    };
    // Override the method to always return mock battery info.
    window.navigator.getBattery = async () => {
      logCall('getBattery');
      return mockBattery;
    };
  });

  await page.goto('/');
  await expect(page.locator('.battery-percentage')).toHaveText('75%');

  // Compare actual calls with golden.
  expect(log).toEqual([
    'getBattery',
    'addEventListener:chargingchange',
    'addEventListener:levelchange'
  ]);
});

----------------------------------------

TITLE: Testing Status Change with Playwright Assertions in JavaScript
DESCRIPTION: Demonstrates how to use Playwright assertions to test if an element's status text changes to 'Submitted' after clicking a button.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('status becomes submitted', async ({ page }) => {
  // ...
  await page.locator('#submit-button').click();
  await expect(page.locator('.status')).toHaveText('Submitted');
});

----------------------------------------

TITLE: Referencing Playwright Firefox Browser Package in Markdown
DESCRIPTION: This snippet shows the package name for the Playwright Firefox browser installation package. It is used to automatically install Firefox for use with Playwright.

LANGUAGE: markdown
CODE:
# @playwright/browser-firefox

----------------------------------------

TITLE: Configuring Action and Navigation Timeouts
DESCRIPTION: Sets up timeouts for individual actions and navigation operations in the config

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    actionTimeout: 10 * 1000,
    navigationTimeout: 30 * 1000,
  },
});

----------------------------------------

TITLE: Registering Custom Selector Engine in JavaScript
DESCRIPTION: This snippet shows how to create a custom tag name selector engine in JavaScript using Playwright. It defines the engine functions and demonstrates how to register and use the custom selector.

LANGUAGE: javascript
CODE:
import { test as base } from '@playwright/test';

export { expect } from '@playwright/test';

// Must be a function that evaluates to a selector engine instance.
const createTagNameEngine = () => ({
  // Returns the first element matching given selector in the root's subtree.
  query(root, selector) {
    return root.querySelector(selector);
  },

  // Returns all elements matching given selector in the root's subtree.
  queryAll(root, selector) {
    return Array.from(root.querySelectorAll(selector));
  }
});

export const test = base.extend<{}, { selectorRegistration: void }>({
  // Register selectors once per worker.
  selectorRegistration: [async ({ playwright }, use) => {
    // Register the engine. Selectors will be prefixed with "tag=".
    await playwright.selectors.register('tag', createTagNameEngine);
    await use();
  }, { scope: 'worker', auto: true }],
});

LANGUAGE: javascript
CODE:
import { test, expect } from './baseTest';

test('selector engine test', async ({ page }) => {
  // Now we can use 'tag=' selectors.
  const button = page.locator('tag=button');
  await button.click();

  // We can combine it with built-in locators.
  await page.locator('tag=div').getByText('Click me').click();

  // We can use it in any methods supporting selectors.
  await expect(page.locator('tag=button')).toHaveCount(3);
});

----------------------------------------

TITLE: Dragging on Android Screen in JavaScript
DESCRIPTION: Performs a drag operation between two points on an Android device screen. The method takes start and end coordinates, as well as the number of steps for the drag animation.

LANGUAGE: js
CODE:
await androidInput.drag({ from: { x: startX, y: startY }, to: { x: endX, y: endY }, steps: numberOfSteps });

----------------------------------------

TITLE: Accessing Error Properties in Playwright for Python
DESCRIPTION: The Error class has three main properties: message (a string containing the error message), name (an optional string representing the name of the error), and stack (an optional string containing the error stack trace).

LANGUAGE: python
CODE:
error = Error("An error occurred")
print(error.message)  # Outputs: An error occurred
print(error.name)  # Outputs: None (unless set)
print(error.stack)  # Outputs: None (unless set)

----------------------------------------

TITLE: Floating Point Comparison with toBeCloseTo
DESCRIPTION: Shows how to compare floating point numbers for approximate equality.

LANGUAGE: javascript
CODE:
expect(0.1 + 0.2).not.toBe(0.3);
expect(0.1 + 0.2).toBeCloseTo(0.3, 5);

----------------------------------------

TITLE: Configuring Default Pytest Options
DESCRIPTION: Example pytest.ini configuration file to set default browser and display settings.

LANGUAGE: ini
CODE:
# content of pytest.ini
[pytest]
# Run firefox with UI
addopts = --headed --browser firefox

----------------------------------------

TITLE: Configuring Browser in RunSettings XML
DESCRIPTION: XML configuration for specifying the browser in a runsettings file for Playwright tests.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
  <RunSettings>
    <Playwright>
      <BrowserName>chromium</BrowserName>
    </Playwright>
  </RunSettings>

----------------------------------------

TITLE: Declaring Test Hooks in Playwright
DESCRIPTION: Demonstrates how to declare beforeAll, afterAll, beforeEach, and afterEach hooks in Playwright Test.

LANGUAGE: js
CODE:
test.beforeAll(async () => {
  console.log('Before tests');
});

test.afterAll(async () => {
  console.log('After tests');
});

test.beforeEach(async ({ page }) => {
  console.log(`Running ${test.info().title}`);
  await page.goto('https://my.start.url/');
});

test.afterEach(async ({ page }) => {
  console.log(`Finished ${test.info().title} with status ${test.info().status}`);
});

----------------------------------------

TITLE: Handling Worker Events in C#
DESCRIPTION: Demonstrates how to handle worker creation and destruction events, and how to list current workers on a page using C#.

LANGUAGE: csharp
CODE:
page.Worker += (_, worker) =>
{
    Console.WriteLine($"Worker created: {worker.Url}");
    worker.Close += (_, _) => Console.WriteLine($"Worker closed {worker.Url}");
};

Console.WriteLine("Current Workers:");
foreach(var pageWorker in page.Workers)
{
    Console.WriteLine($"\tWorker: {pageWorker.Url}");
}

----------------------------------------

TITLE: Manual TypeScript Compilation Config
DESCRIPTION: TSConfig setup for manual TypeScript compilation of tests.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "target": "ESNext",
        "module": "commonjs",
        "moduleResolution": "Node",
        "sourceMap": true,
        "outDir": "../tests-out",
    }
}

----------------------------------------

TITLE: Handling WebErrors in Python (Sync) with Playwright
DESCRIPTION: Shows how to use the WebError class in Python with synchronous syntax to log uncaught exceptions and navigate to a page with an error.

LANGUAGE: python
CODE:
# Log all uncaught errors to the terminal
context.on("weberror", lambda web_error: print(f"uncaught exception: {web_error.error}"))

# Navigate to a page with an exception.
page.goto("data:text/html,<script>throw new Error('test')</script>")

----------------------------------------

TITLE: Running Playwright Tests with Multiple Workers (MSTest)
DESCRIPTION: Command to run Playwright tests with multiple workers using MSTest.

LANGUAGE: bash
CODE:
dotnet test -- MSTest.Parallelize.Workers=5

----------------------------------------

TITLE: Adding Annotations to Tests in Playwright
DESCRIPTION: Shows how to add annotations to tests in Playwright Test. Annotations provide additional metadata for tests.

LANGUAGE: js
CODE:
import { test, expect } from '@playwright/test';

test('basic test', {
  annotation: {
    type: 'issue',
    description: 'https://github.com/microsoft/playwright/issues/23180',
  },
}, async ({ page }) => {
  await page.goto('https://playwright.dev/');
  // ...
});

----------------------------------------

TITLE: Asserting API Response in Playwright Tests (Python Async)
DESCRIPTION: Illustrates how to use the expect function to assert that an API response is OK in an asynchronous Playwright test using Python.

LANGUAGE: python
CODE:
from playwright.async_api import Page, expect

async def test_navigates_to_login_page(page: Page) -> None:
    # ..
    response = await page.request.get('https://playwright.dev')
    await expect(response).to_be_ok()

----------------------------------------

TITLE: Handling WebErrors in C# with Playwright
DESCRIPTION: Demonstrates how to set up a WebError handler in C# to log uncaught exceptions in a browser context.

LANGUAGE: csharp
CODE:
// Log all uncaught errors to the terminal
context.WebError += (_, webError) =>
{
  Console.WriteLine("Uncaught exception: " + webError.Error);
};

----------------------------------------

TITLE: Uninstalling All Playwright Browsers
DESCRIPTION: Remove all installed Playwright browsers, including those from other installations.

LANGUAGE: bash
CODE:
npx playwright uninstall --all

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="uninstall --all"

LANGUAGE: bash
CODE:
playwright uninstall --all

LANGUAGE: bash
CODE:
pwsh bin/Debug/netX/playwright.ps1 uninstall --all

----------------------------------------

TITLE: Mocking WebSocket Communication in JavaScript
DESCRIPTION: This snippet demonstrates how to mock WebSocket communication by responding to a 'request' message with a 'response' message using Playwright's WebSocketRoute.

LANGUAGE: javascript
CODE:
await page.routeWebSocket('wss://example.com/ws', ws => {
  ws.onMessage(message => {
    if (message === 'request')
      ws.send('response');
  });
});

----------------------------------------

TITLE: Launching Browser with Debug Options
DESCRIPTION: Example showing how to launch Firefox browser in non-headless mode with slow motion execution

LANGUAGE: python
CODE:
firefox.launch(headless=False, slow_mo=50)

----------------------------------------

TITLE: Running Tests with Multiple Required Tags in Playwright
DESCRIPTION: Shows how to run tests that contain multiple required tags using regex lookaheads for a logical AND operation.

LANGUAGE: bash
CODE:
npx playwright test --grep "(?=.*@fast)(?=.*@slow)"

----------------------------------------

TITLE: Managing Browser Binary Locations
DESCRIPTION: Specify custom locations for Playwright browser binaries.

LANGUAGE: bash
CODE:
PLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers npx playwright install

LANGUAGE: batch
CODE:
set PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\pw-browsers
npx playwright install

LANGUAGE: powershell
CODE:
$Env:PLAYWRIGHT_BROWSERS_PATH="$Env:USERPROFILE\pw-browsers"
npx playwright install

----------------------------------------

TITLE: Continuing a Route Request with Modified Headers in Playwright
DESCRIPTION: Shows how to continue a route's request while modifying headers using the Route.continue method.

LANGUAGE: javascript
CODE:
await page.route('**/*', async (route, request) => {
  const headers = {
    ...request.headers(),
    foo: 'foo-value', // set "foo" header
    bar: undefined, // remove "bar" header
  };
  await route.continue({ headers });
});

----------------------------------------

TITLE: BeforeUnload Dialog Handling
DESCRIPTION: Shows how to handle beforeunload dialogs when closing a page with runBeforeUnload option enabled. Includes type checking and dialog dismissal.

LANGUAGE: javascript
CODE:
page.on('dialog', async dialog => {
  assert(dialog.type() === 'beforeunload');
  await dialog.dismiss();
});
await page.close({ runBeforeUnload: true });

LANGUAGE: java
CODE:
page.onDialog(dialog -> {
  assertEquals("beforeunload", dialog.type());
  dialog.dismiss();
});
page.close(new Page.CloseOptions().setRunBeforeUnload(true));

LANGUAGE: python
CODE:
def handle_dialog(dialog):
    assert dialog.type == 'beforeunload'
    dialog.dismiss()

page.on('dialog', lambda: handle_dialog)
page.close(run_before_unload=True)

LANGUAGE: csharp
CODE:
Page.Dialog += async (_, dialog) =>
{
    Assert.AreEqual("beforeunload", dialog.Type);
    await dialog.DismissAsync();
};
await Page.CloseAsync(new() { RunBeforeUnload = true });

----------------------------------------

TITLE: Dumping Frame Tree Example
DESCRIPTION: Example showing how to recursively traverse and dump the frame tree structure including URLs using different programming languages.

LANGUAGE: JavaScript
CODE:
const { firefox } = require('playwright');  // Or 'chromium' or 'webkit'.

(async () => {
  const browser = await firefox.launch();
  const page = await browser.newPage();
  await page.goto('https://www.google.com/chrome/browser/canary.html');
  dumpFrameTree(page.mainFrame(), '');
  await browser.close();

  function dumpFrameTree(frame, indent) {
    console.log(indent + frame.url());
    for (const child of frame.childFrames())
      dumpFrameTree(child, indent + '  ');
  }
})();

LANGUAGE: Java
CODE:
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      BrowserType firefox = playwright.firefox();
      Browser browser = firefox.launch();
      Page page = browser.newPage();
      page.navigate("https://www.google.com/chrome/browser/canary.html");
      dumpFrameTree(page.mainFrame(), "");
      browser.close();
    }
  }
  static void dumpFrameTree(Frame frame, String indent) {
    System.out.println(indent + frame.url());
    for (Frame child : frame.childFrames()) {
      dumpFrameTree(child, indent + "  ");
    }
  }
}

----------------------------------------

TITLE: Playwright with Pyinstaller Bundle Configuration
DESCRIPTION: Commands to bundle Playwright with Pyinstaller for different shell environments

LANGUAGE: bash
CODE:
PLAYWRIGHT_BROWSERS_PATH=0 playwright install chromium
pyinstaller -F main.py

LANGUAGE: batch
CODE:
set PLAYWRIGHT_BROWSERS_PATH=0
playwright install chromium
pyinstaller -F main.py

LANGUAGE: powershell
CODE:
$env:PLAYWRIGHT_BROWSERS_PATH="0"
playwright install chromium
pyinstaller -F main.py

----------------------------------------

TITLE: Customizing Browser Launch Options with RunSettings XML
DESCRIPTION: Example of a RunSettings XML file for customizing Browser launch options, including browser name, headless mode, and browser channel.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<RunSettings>
  <Playwright>
    <BrowserName>chromium</BrowserName>
    <LaunchOptions>
      <Headless>false</Headless>
      <Channel>msedge</Channel>
    </LaunchOptions>
  </Playwright>
</RunSettings>

----------------------------------------

TITLE: Handling File Downloads with Playwright in Java
DESCRIPTION: Shows how to wait for a download event, initiate a download, and save the downloaded file using Playwright in Java.

LANGUAGE: java
CODE:
// Wait for the download to start
Download download = page.waitForDownload(() -> {
    // Perform the action that initiates download
    page.getByText("Download file").click();
});

// Wait for the download process to complete and save the downloaded file somewhere
download.saveAs(Paths.get("/path/to/save/at/", download.suggestedFilename()));

----------------------------------------

TITLE: Registering Custom Selector Engine in Python (Async)
DESCRIPTION: Example of registering a custom selector engine that queries elements based on a tag name using Python with async syntax in Playwright.

LANGUAGE: python
CODE:
import asyncio
from playwright.async_api import async_playwright, Playwright

async def run(playwright: Playwright):
    tag_selector = """
      {
          // Returns the first element matching given selector in the root's subtree.
          query(root, selector) {
              return root.querySelector(selector);
          },
          // Returns all elements matching given selector in the root's subtree.
          queryAll(root, selector) {
              return Array.from(root.querySelectorAll(selector));
          }
      }"""

    # Register the engine. Selectors will be prefixed with "tag=".
    await playwright.selectors.register("tag", tag_selector)
    browser = await playwright.chromium.launch()
    page = await browser.new_page()
    await page.set_content('<div><button>Click me</button></div>')

    # Use the selector prefixed with its name.
    button = await page.query_selector('tag=button')
    # Combine it with built-in locators.
    await page.locator('tag=div').get_by_text('Click me').click()
    # Can use it in any methods supporting selectors.
    button_count = await page.locator('tag=button').count()
    print(button_count)
    await browser.close()

async def main():
    async with async_playwright() as playwright:
        await run(playwright)

asyncio.run(main())

----------------------------------------

TITLE: Skipping Browser Downloads in Java
DESCRIPTION: Configure Playwright to skip browser downloads when browsers are managed separately.

LANGUAGE: bash
CODE:
PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 mvn test

LANGUAGE: batch
CODE:
set PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
mvn test

LANGUAGE: powershell
CODE:
$Env:PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
mvn test

----------------------------------------

TITLE: File Upload Handling in Python (Sync)
DESCRIPTION: Shows synchronous file upload handling in Python using context manager for FileChooser.

LANGUAGE: python
CODE:
with page.expect_file_chooser() as fc_info:
    page.get_by_text("Upload file").click()
file_chooser = fc_info.value
file_chooser.set_files("myfile.pdf")

----------------------------------------

TITLE: Installing Playwright via conda
DESCRIPTION: Commands to install Playwright using conda package manager including required channel configuration

LANGUAGE: bash
CODE:
conda config --add channels conda-forge
conda config --add channels microsoft
conda install playwright
playwright install

----------------------------------------

TITLE: Customizing Browser Launch Options via CLI
DESCRIPTION: Example of customizing Browser launch options using command-line arguments, including browser name, headless mode, and browser channel.

LANGUAGE: bash
CODE:
dotnet test -- Playwright.BrowserName=chromium Playwright.LaunchOptions.Headless=false Playwright.LaunchOptions.Channel=msedge

----------------------------------------

TITLE: Installing Dependencies with Root Privileges and Proxy
DESCRIPTION: Install Playwright dependencies using root privileges when behind a proxy.

LANGUAGE: bash
CODE:
sudo HTTPS_PROXY=https://192.0.2.1 npx playwright install-deps

----------------------------------------

TITLE: Defining PlaywrightException Class in Java
DESCRIPTION: This snippet defines the PlaywrightException class in Java. It extends RuntimeException and is thrown when Playwright operations are terminated abnormally, such as when a browser closes during page evaluation.

LANGUAGE: java
CODE:
class PlaywrightException extends RuntimeException {
    // Class implementation
}

----------------------------------------

TITLE: Using Locator for DOM Interaction in Playwright
DESCRIPTION: Shows the recommended approach of using Locator objects to interact with DOM elements, which ensures up-to-date element location on each use.

LANGUAGE: javascript
CODE:
const locator = page.getByText('Submit');
// ...
await locator.hover();
await locator.click();

LANGUAGE: java
CODE:
Locator locator = page.getByText("Submit");
locator.hover();
locator.click();

LANGUAGE: python
CODE:
locator = page.get_by_text("Submit")
await locator.hover()
await locator.click()

LANGUAGE: csharp
CODE:
var locator = page.GetByText("Submit");
await locator.HoverAsync();
await locator.ClickAsync();

----------------------------------------

TITLE: Tagging Test Groups in Playwright
DESCRIPTION: Shows how to tag entire groups of tests and apply multiple tags to a single test.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test.describe('group', {
  tag: '@report',
}, () => {
  test('test report header', async ({ page }) => {
    // ...
  });

  test('test full report', {
    tag: ['@slow', '@vrt'],
  }, async ({ page }) => {
    // ...
  });
});

----------------------------------------

TITLE: Maven POM Configuration for Playwright
DESCRIPTION: Provides the necessary Maven configuration in pom.xml to include Playwright as a dependency and set up the Java compiler for the project.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.example</groupId>
  <artifactId>examples</artifactId>
  <version>0.1-SNAPSHOT</version>
  <name>Playwright Client Examples</name>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  <dependencies>
    <dependency>
      <groupId>com.microsoft.playwright</groupId>
      <artifactId>playwright</artifactId>
      <version>%%VERSION%%</version>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.10.1</version>
        <!-- References to interface static methods are allowed only at source level 1.8 or above -->
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>

----------------------------------------

TITLE: Modifying Network Requests in Playwright
DESCRIPTION: Demonstrates how to modify outgoing network requests by deleting headers or changing the HTTP method.

LANGUAGE: javascript
CODE:
// Delete header
await page.route('**/*', async route => {
  const headers = route.request().headers();
  delete headers['X-Secret'];
  await route.continue({ headers });
});

// Continue requests as POST.
await page.route('**/*', route => route.continue({ method: 'POST' }));

----------------------------------------

TITLE: Testing Status Change with Playwright Assertions in Python (Async)
DESCRIPTION: Shows how to use Playwright assertions in an asynchronous Python test to verify if an element's status text changes to 'Submitted' after clicking a button.

LANGUAGE: python
CODE:
from playwright.async_api import Page, expect

async def test_status_becomes_submitted(page: Page) -> None:
    # ..
    await page.locator("#submit-button").click()
    await expect(page.locator(".status")).to_have_text("Submitted")

----------------------------------------

TITLE: Multiple Browser Contexts Example
DESCRIPTION: Demonstration of using multiple browser contexts for multi-user testing scenarios.

LANGUAGE: python
CODE:
from playwright.sync_api import Page, BrowserContext
from pytest_playwright.pytest_playwright import CreateContextCallback

def test_foo(page: Page, new_context: CreateContextCallback) -> None:
    page.goto("https://example.com")
    context = new_context()
    page2 = context.new_page()
    # page and page2 are in different contexts

----------------------------------------

TITLE: Capturing Accessibility Snapshot in Python (Sync)
DESCRIPTION: This snippet shows how to capture and print the accessibility snapshot using synchronous Python.

LANGUAGE: python
CODE:
snapshot = page.accessibility.snapshot()
print(snapshot)

----------------------------------------

TITLE: Building and Installing Browsers
DESCRIPTION: Commands to build the project and install required browsers using PowerShell script.

LANGUAGE: bash
CODE:
dotnet build

LANGUAGE: bash
CODE:
pwsh bin/Debug/net8.0/playwright.ps1 install

----------------------------------------

TITLE: Running Tests in Parallel
DESCRIPTION: Command to run tests in parallel using pytest-xdist with specified number of processes.

LANGUAGE: bash
CODE:
pytest --numprocesses 2

----------------------------------------

TITLE: Using N-th element locator in Playwright
DESCRIPTION: Examples of using the nth= locator to select specific elements from a list.

LANGUAGE: javascript
CODE:
await page.locator('button').locator('nth=0').click();
await page.locator('button').locator('nth=-1').click();

LANGUAGE: java
CODE:
page.locator("button").locator("nth=0").click();
page.locator("button").locator("nth=-1").click();

LANGUAGE: python
CODE:
await page.locator("button").locator("nth=0").click()
await page.locator("button").locator("nth=-1").click()

LANGUAGE: csharp
CODE:
await page.Locator("button").Locator("nth=0").ClickAsync();
await page.Locator("button").Locator("nth=-1").ClickAsync();

----------------------------------------

TITLE: Testing Status Change with Playwright Assertions in Java
DESCRIPTION: Shows how to use Playwright assertions in a Java test to verify if an element's status text changes to 'Submitted' after clicking a button.

LANGUAGE: java
CODE:
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class TestExample {
  // ...
  @Test
  void statusBecomesSubmitted() {
    // ...
    page.locator("#submit-button").click();
    assertThat(page.locator(".status")).hasText("Submitted");
  }
}

----------------------------------------

TITLE: Initializing WebView2 with CDP Debugging Port in C#
DESCRIPTION: Configures WebView2 to listen for incoming CDP connections by setting the remote debugging port.

LANGUAGE: csharp
CODE:
await this.webView.EnsureCoreWebView2Async(await CoreWebView2Environment.CreateAsync(null, null, new CoreWebView2EnvironmentOptions()
{
  AdditionalBrowserArguments = "--remote-debugging-port=9222",
})).ConfigureAwait(false);

----------------------------------------

TITLE: Implementing Touch Event Simulation in Playwright
DESCRIPTION: The tap method dispatches touchstart and touchend events at specified coordinates. It requires the browser context to be initialized with hasTouch=true and operates in CSS pixels relative to the viewport.

LANGUAGE: typescript
CODE:
async tap(x: number, y: number): Promise<void> {
  // Dispatches touchstart and touchend events
  // x: X coordinate in CSS pixels relative to viewport
  // y: Y coordinate in CSS pixels relative to viewport
}

----------------------------------------

TITLE: Installing Playwright Dependencies
DESCRIPTION: Commands to add Playwright package references for different test runners.

LANGUAGE: bash
CODE:
dotnet add package Microsoft.Playwright.NUnit

----------------------------------------

TITLE: Focusing Elements in Playwright
DESCRIPTION: Shows how to focus an element using Playwright's focus method, which is useful for pages that handle focus events.

LANGUAGE: javascript
CODE:
await page.getByLabel('Password').focus();

----------------------------------------

TITLE: Configuring Web Server Timeout in Playwright
DESCRIPTION: Configuration example showing how to set custom timeout values for web server startup in Playwright tests.

LANGUAGE: typescript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  // Rest of your config...

  // Run your local dev server before starting the tests
  webServer: {
    command: 'npm run start',
    url: 'http://localhost:3000',
    reuseExistingServer: !process.env.CI,
    timeout: 120 * 1000,
  },
});

----------------------------------------

TITLE: Opposite Condition Assertions
DESCRIPTION: Examples showing how to assert the opposite condition using the not property

LANGUAGE: javascript
CODE:
await expect(locator).not.toContainText('error');

----------------------------------------

TITLE: Configuring NUnit with RunSettings XML
DESCRIPTION: Example of a RunSettings XML file for NUnit, including test worker configuration, environment variables for debugging, and Playwright options.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<RunSettings>
  <!-- NUnit adapter -->  
  <NUnit>
    <NumberOfTestWorkers>24</NumberOfTestWorkers>
  </NUnit>
  <!-- General run configuration -->
  <RunConfiguration>
    <EnvironmentVariables>
      <!-- For debugging selectors, it's recommend to set the following environment variable -->
      <DEBUG>pw:api</DEBUG>
    </EnvironmentVariables>
  </RunConfiguration>
  <!-- Playwright -->  
  <Playwright>
    <BrowserName>chromium</BrowserName>
    <ExpectTimeout>5000</ExpectTimeout>
    <LaunchOptions>
      <Headless>false</Headless>
      <Channel>msedge</Channel>
    </LaunchOptions>
  </Playwright>
</RunSettings>

----------------------------------------

TITLE: Initializing Playwright Logger with Custom Configuration
DESCRIPTION: Example showing how to initialize Playwright with a custom logger configuration. The logger is configured to only log API-related messages and outputs them to console with the name prefix.

LANGUAGE: javascript
CODE:
const { chromium } = require('playwright');  // Or 'firefox' or 'webkit'.

(async () => {
  const browser = await chromium.launch({
    logger: {
      isEnabled: (name, severity) => name === 'api',
      log: (name, severity, message, args) => console.log(`${name} ${message}`)
    }
  });
  // ...
})();

----------------------------------------

TITLE: Creating New Test Project with Test Runners
DESCRIPTION: Commands to create a new test project using different .NET test runners (MSTest, NUnit, or xUnit).

LANGUAGE: bash
CODE:
dotnet new nunit -n PlaywrightTests
cd PlaywrightTests

----------------------------------------

TITLE: Recording a Trace in Python
DESCRIPTION: Enable trace recording for Python tests using the --tracing flag with pytest.

LANGUAGE: bash
CODE:
pytest --tracing on

----------------------------------------

TITLE: Installing Playwright via pip
DESCRIPTION: Commands to install Playwright and its browser dependencies using pip package manager

LANGUAGE: bash
CODE:
pip install --upgrade pip
pip install playwright
playwright install

----------------------------------------

TITLE: Getting Properties of JSHandle in Python
DESCRIPTION: Shows how to use the get_properties method on a JSHandle to retrieve window and document objects in Python.

LANGUAGE: python
CODE:
handle = await page.evaluate_handle("({ window, document })")
properties = await handle.get_properties()
window_handle = properties.get("window")
document_handle = properties.get("document")
await handle.dispose()

----------------------------------------

TITLE: Running Specific Test Files
DESCRIPTION: Commands to run individual test files or multiple test files by specifying their paths.

LANGUAGE: bash
CODE:
pytest test_login.py

LANGUAGE: bash
CODE:
pytest tests/test_todo_page.py tests/test_landing_page.py

LANGUAGE: bash
CODE:
pytest -k test_add_a_todo_item

----------------------------------------

TITLE: WebView2 Process Management in Java
DESCRIPTION: Manages the WebView2 process for testing, including CDP port allocation and process lifecycle.

LANGUAGE: java
CODE:
package com.example;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

public class WebView2Process {
  public int cdpPort;
  private Path _dataDir;
  private Process _process;
  private Path _executablePath = Path.of("../webview2-app/bin/Debug/net8.0-windows/webview2.exe");

  public WebView2Process() throws IOException {
    cdpPort = nextFreePort();
    _dataDir = Files.createTempDirectory("pw-java-webview2-tests-");

    if (!Files.exists(_executablePath)) {
      throw new RuntimeException("Executable not found: " + _executablePath);
    }
    ProcessBuilder pb = new ProcessBuilder().command(_executablePath.toAbsolutePath().toString());
    Map<String, String> envMap = pb.environment();
    envMap.put("WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS", "--remote-debugging-port=" + cdpPort);
    envMap.put("WEBVIEW2_USER_DATA_FOLDER", _dataDir.toString());
    _process = pb.start();
    // wait until "WebView2 initialized" got printed
    BufferedReader reader = new BufferedReader(new InputStreamReader(_process.getInputStream()));
    while (true) {
      String line = reader.readLine();
      if (line == null) {
        throw new RuntimeException("WebView2 process exited");
      }
      if (line.contains("WebView2 initialized")) {
        break;
      }
    }
  }

  private static final AtomicInteger nextUnusedPort = new AtomicInteger(9000);

  private static boolean available(int port) {
    try (ServerSocket ignored = new ServerSocket(port)) {
      return true;
    } catch (IOException ignored) {
      return false;
    }
  }

  static int nextFreePort() {
    for (int i = 0; i < 100; i++) {
      int port = nextUnusedPort.getAndIncrement();
      if (available(port)) {
        return port;
      }
    }
    throw new RuntimeException("Cannot find free port: " + nextUnusedPort.get());
  }

  public void dispose() {
    _process.destroy();
    try {
      _process.waitFor();
    } catch (InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
}

----------------------------------------

TITLE: Updating Playwright
DESCRIPTION: Commands to update Playwright to the latest version and install dependencies.

LANGUAGE: bash
CODE:
npm install -D @playwright/test@latest
# Also download new browser binaries and their dependencies:
npx playwright install --with-deps

LANGUAGE: bash
CODE:
yarn add --dev @playwright/test@latest
# Also download new browser binaries and their dependencies:
yarn playwright install --with-deps

LANGUAGE: bash
CODE:
pnpm install --save-dev @playwright/test@latest
# Also download new browser binaries and their dependencies:
pnpm exec playwright install --with-deps

----------------------------------------

TITLE: Customizing Playwright Options with JUnit in Java
DESCRIPTION: This snippet demonstrates how to customize Playwright options for JUnit tests. It shows how to set browser launch options, context options, and API request options.

LANGUAGE: java
CODE:
import com.microsoft.playwright.junit.Options;
import com.microsoft.playwright.junit.OptionsFactory;
import com.microsoft.playwright.junit.UsePlaywright;

@UsePlaywright(MyTest.CustomOptions.class)
public class MyTest {

  public static class CustomOptions implements OptionsFactory {
    @Override
    public Options getOptions() {
      return new Options()
          .setHeadless(false)
          .setContextOption(new Browser.NewContextOptions()
              .setBaseURL("https://github.com"))
          .setApiRequestOptions(new APIRequest.NewContextOptions()
              .setBaseURL("https://playwright.dev"));
    }
  }

  @Test
  public void testWithCustomOptions(Page page, APIRequestContext request) {
    page.navigate("/");
    assertThat(page).hasURL(Pattern.compile("github"));

    APIResponse response = request.get("/");
    assertTrue(response.text().contains("Playwright"));
  }
}

----------------------------------------

TITLE: Getting Properties of JSHandle in C#
DESCRIPTION: Demonstrates how to use the GetPropertiesAsync method on a JSHandle to retrieve window and document objects in C#.

LANGUAGE: csharp
CODE:
var handle = await page.EvaluateHandleAsync("() => ({ window, document }");
var properties = await handle.GetPropertiesAsync();
var windowHandle = properties["window"];
var documentHandle = properties["document"];
await handle.DisposeAsync();

----------------------------------------

TITLE: Playwright Test Framework Example
DESCRIPTION: Equivalent test implementation using Playwright Test framework showing simplified syntax with built-in fixtures and assertions.

LANGUAGE: typescript
CODE:
import { expect, test, devices } from '@playwright/test';

test.use(devices['iPhone 11']);

test('should be titled', async ({ page, context }) => {
  await context.route('**.jpg', route => route.abort());
  await page.goto('https://example.com/');

  await expect(page).toHaveTitle('Example');
});

----------------------------------------

TITLE: Grouping Tests in Playwright
DESCRIPTION: Shows how to group related tests using test.describe(). This allows for logical organization and scoping of before/after hooks.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test.describe('two tests', () => {
  test('one', async ({ page }) => {
    // ...
  });

  test('two', async ({ page }) => {
    // ...
  });
});

----------------------------------------

TITLE: Initializing Chrome Extension in Playwright (Python Async)
DESCRIPTION: This snippet shows how to launch a persistent browser context with a Chrome extension in Playwright using Python with async/await syntax. It covers loading the extension and accessing its background page.

LANGUAGE: python
CODE:
import asyncio
from playwright.async_api import async_playwright, Playwright

path_to_extension = "./my-extension"
user_data_dir = "/tmp/test-user-data-dir"


async def run(playwright: Playwright):
    context = await playwright.chromium.launch_persistent_context(
        user_data_dir,
        channel="chromium",
        args=[
            f"--disable-extensions-except={path_to_extension}",
            f"--load-extension={path_to_extension}",
        ],
    )

    if len(context.background_pages) == 0:
        background_page = await context.wait_for_event('backgroundpage')
    else:
        background_page = context.background_pages[0]

    # Test the background page as you would any other page.
    await context.close()


async def main():
    async with async_playwright() as playwright:
        await run(playwright)


asyncio.run(main())

----------------------------------------

TITLE: Getting Video Path - C#
DESCRIPTION: Retrieves the filesystem path of the recorded video in C#.

LANGUAGE: csharp
CODE:
Console.WriteLine(await page.Video.GetPathAsync());

----------------------------------------

TITLE: Basic Dialog Acceptance Implementation
DESCRIPTION: Demonstrates how to handle basic browser dialogs by registering a dialog handler that automatically accepts dialogs before triggering an action.

LANGUAGE: javascript
CODE:
page.on('dialog', dialog => dialog.accept());
await page.getByRole('button').click();

LANGUAGE: java
CODE:
page.onDialog(dialog -> dialog.accept());
page.getByRole(AriaRole.BUTTON).click();

LANGUAGE: python
CODE:
page.on("dialog", lambda dialog: dialog.accept())
page.get_by_role("button").click()

LANGUAGE: csharp
CODE:
Page.Dialog += async (_, dialog) =>
{
    await dialog.AcceptAsync();
};
await Page.GetByRole(AriaRole.Button).ClickAsync();

----------------------------------------

TITLE: Handling CDPSessionEvent in C#
DESCRIPTION: The CDPSessionEvent class represents a named event returned by the CDPSession.event method. It provides an onEvent event that can be used to handle the event when it is raised, and an eventName property to identify the event.

LANGUAGE: csharp
CODE:
class CDPSessionEvent
{
    event Action<JsonElement?> onEvent;
    string eventName { get; }
}

----------------------------------------

TITLE: Running Tests on Multiple Browsers in Python
DESCRIPTION: Execute Playwright tests on multiple browsers using Python.

LANGUAGE: bash
CODE:
pytest test_login.py --browser webkit --browser firefox

----------------------------------------

TITLE: Fast Forwarding Time in Playwright
DESCRIPTION: Demonstrates how to advance the clock by jumping forward in time using the fastForward method. This can be done using milliseconds or a human-readable string format.

LANGUAGE: javascript
CODE:
await page.clock.fastForward(1000);
await page.clock.fastForward('30:00');

LANGUAGE: python
CODE:
await page.clock.fast_forward(1000)
await page.clock.fast_forward("30:00")

LANGUAGE: java
CODE:
page.clock().fastForward(1000);
page.clock().fastForward("30:00");

LANGUAGE: csharp
CODE:
await page.Clock.FastForwardAsync(1000);
await page.Clock.FastForwardAsync("30:00");

----------------------------------------

TITLE: Installing Browsers Behind a Proxy
DESCRIPTION: Install Playwright browsers when behind a proxy server.

LANGUAGE: bash
CODE:
HTTPS_PROXY=https://192.0.2.1 npx playwright install

LANGUAGE: bash
CODE:
set HTTPS_PROXY=https://192.0.2.1
npx playwright install

LANGUAGE: powershell
CODE:
$Env:HTTPS_PROXY="https://192.0.2.1"
npx playwright install

----------------------------------------

TITLE: Capturing Screenshot into Buffer with Playwright
DESCRIPTION: This snippet shows how to capture a screenshot into a buffer instead of saving it directly to a file. It then demonstrates how to convert the buffer to a base64 encoded string, which can be useful for further processing or transmission.

LANGUAGE: javascript
CODE:
const buffer = await page.screenshot();
console.log(buffer.toString('base64'));

LANGUAGE: java
CODE:
byte[] buffer = page.screenshot();
System.out.println(Base64.getEncoder().encodeToString(buffer));

LANGUAGE: python
CODE:
screenshot_bytes = await page.screenshot()
print(base64.b64encode(screenshot_bytes).decode())

LANGUAGE: csharp
CODE:
var bytes = await page.ScreenshotAsync();
Console.WriteLine(Convert.ToBase64String(bytes));

----------------------------------------

TITLE: Configuring Test Projects in Playwright Test
DESCRIPTION: Example of setting up multiple test projects with different configurations.

LANGUAGE: javascript
CODE:
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    { name: 'chromium', use: devices['Desktop Chrome'] }
  ]
});

----------------------------------------

TITLE: Recording a Trace Programmatically in Python
DESCRIPTION: Use the BrowserContext API to programmatically start and stop trace recording in a Python Playwright script.

LANGUAGE: python
CODE:
browser = chromium.launch()
context = browser.new_context()

# Start tracing before creating / navigating a page.
context.tracing.start(screenshots=True, snapshots=True, sources=True)

page = context.new_page()
page.goto("https://playwright.dev")

# Stop tracing and export it into a zip archive.
context.tracing.stop(path = "trace.zip")

----------------------------------------

TITLE: Handling Page Load Event in Java
DESCRIPTION: This example demonstrates how to listen for the 'load' event on a page using Playwright in Java.

LANGUAGE: java
CODE:
page.onLoad(p -> System.out.println("Page loaded!"));

----------------------------------------

TITLE: Configuring Browser Channels in C# RunSettings
DESCRIPTION: Set up specific browser channels for Playwright tests in C# using RunSettings.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<RunSettings>
  <Playwright>
    <BrowserName>chromium</BrowserName>
    <LaunchOptions>
      <Channel>chromium</Channel>
    </LaunchOptions>
  </Playwright>
</RunSettings>

----------------------------------------

TITLE: Starting Selenium Node with Grid URL
DESCRIPTION: Command to start a Selenium node, setting the SE_NODE_GRID_URL environment variable to point to the Selenium hub.

LANGUAGE: bash
CODE:
SE_NODE_GRID_URL="http://<selenium-hub-ip>:4444" java -jar selenium-server-<version>.jar node

----------------------------------------

TITLE: Opening Playwright HTML Test Report
DESCRIPTION: Command to open the HTML report showing test results, including pass/fail status, duration, and access to trace recordings.

LANGUAGE: bash
CODE:
npx playwright show-report

----------------------------------------

TITLE: Asserting API Response is OK in Playwright Tests (Python Sync)
DESCRIPTION: Shows how to use the to_be_ok() method to assert that an API response status code is within the 200-299 range in synchronous Python.

LANGUAGE: python
CODE:
import re
from playwright.sync_api import expect

# ...
expect(response).to_be_ok()

----------------------------------------

TITLE: Text Content Snapshot Test
DESCRIPTION: Example of using Playwright for text-based snapshot testing.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('example test', async ({ page }) => {
  await page.goto('https://playwright.dev');
  expect(await page.textContent('.hero__title')).toMatchSnapshot('hero.txt');
});

----------------------------------------

TITLE: Pressing Keys on Android Device in JavaScript
DESCRIPTION: Simulates pressing a specific key on an Android device. The key to be pressed is specified using the AndroidKey enum.

LANGUAGE: js
CODE:
await androidInput.press(AndroidKey.ENTER);

----------------------------------------

TITLE: Testing Against Mobile Viewports in Python
DESCRIPTION: Run Playwright tests on mobile device viewports using Python.

LANGUAGE: bash
CODE:
pytest test_login.py --device="iPhone 13"

----------------------------------------

TITLE: Interacting with Elements After Navigation in Playwright
DESCRIPTION: Shows how to navigate to a page and interact with an element. Playwright automatically waits for the element to become actionable before performing the click action.

LANGUAGE: javascript
CODE:
// Navigate and click element
// Click will auto-wait for the element
await page.goto('https://example.com');
await page.getByText('Example Domain').click();

LANGUAGE: java
CODE:
// Navigate and click element
// Click will auto-wait for the element
page.navigate("https://example.com");
page.getByText("Example Domain").click();

LANGUAGE: python
CODE:
# Navigate and click element
# Click will auto-wait for the element
await page.goto("https://example.com")
await page.get_by_text("example domain").click()

LANGUAGE: csharp
CODE:
// Navigate and click element
// Click will auto-wait for the element
await page.GotoAsync("https://example.com");
await page.GetByText("Example Domain").ClickAsync();

----------------------------------------

TITLE: Recording Traces with Pytest in Python
DESCRIPTION: Shows how to use the --tracing flag with pytest to record Playwright traces. It explains the different tracing options available.

LANGUAGE: bash
CODE:
pytest --tracing on

----------------------------------------

TITLE: Recording a Trace in Java
DESCRIPTION: Use the BrowserContext API to programmatically start and stop trace recording in a Java Playwright script.

LANGUAGE: java
CODE:
Browser browser = browserType.launch();
BrowserContext context = browser.newContext();

// Start tracing before creating / navigating a page.
context.tracing().start(new Tracing.StartOptions()
  .setScreenshots(true)
  .setSnapshots(true)
  .setSources(true));

Page page = context.newPage();
page.navigate("https://playwright.dev");

// Stop tracing and export it into a zip archive.
context.tracing().stop(new Tracing.StopOptions()
  .setPath(Paths.get("trace.zip")));

----------------------------------------

TITLE: Complex Service Worker Implementation
DESCRIPTION: Advanced Service Worker implementation demonstrating caching, request rewriting, and response generation.

LANGUAGE: javascript
CODE:
self.addEventListener('install', function(event) {
  event.waitUntil(
      caches.open('v1').then(function(cache) {
      // 1. Pre-fetches and caches /addressbook.json
        return cache.add('/addressbook.json');
      })
  );
});

self.addEventListener('fetch', event => {
  event.respondWith(
      (async () => {
        // 1. Try to first serve directly from caches
        const response = await caches.match(event.request);
        if (response)
          return response;

        // 2. Re-write request for /foo to /bar
        if (event.request.url.endsWith('foo'))
          return fetch('./bar');

        // 3. Prevent tracker.js from being retrieved, and returns a placeholder response
        if (event.request.url.endsWith('tracker.js')) {
          return new Response('console.log("no trackers!")', {
            status: 200,
            headers: { 'Content-Type': 'text/javascript' },
          });
        }

        // 4. Otherwise, fallthrough, perform the fetch and respond
        return fetch(event.request);
      })()
  );
});

self.addEventListener('activate', event => {
  event.waitUntil(clients.claim());
});

----------------------------------------

TITLE: Closing AndroidSocket Connection in JavaScript
DESCRIPTION: Asynchronous method to close the AndroidSocket connection. This should be called when the communication is complete.

LANGUAGE: js
CODE:
await AndroidSocket.close();

----------------------------------------

TITLE: Setting Custom Root Certificates for Proxy
DESCRIPTION: Configure custom root certificates when using a proxy for Playwright installation.

LANGUAGE: bash
CODE:
export NODE_EXTRA_CA_CERTS="/path/to/cert.pem"

LANGUAGE: batch
CODE:
set NODE_EXTRA_CA_CERTS="C:\certs\root.crt"

LANGUAGE: powershell
CODE:
$Env:NODE_EXTRA_CA_CERTS="C:\certs\root.crt"

----------------------------------------

TITLE: Testing Battery Status Display with Playwright
DESCRIPTION: This snippet demonstrates how to set up a test case for checking battery status display using the mocked Battery API. It includes setting up the mock before each test and verifying the UI elements.

LANGUAGE: javascript
CODE:
// Configure mock API before each test.
test.beforeEach(async ({ page }) => {
  await page.addInitScript(() => {
    const mockBattery = {
      level: 0.90,
      charging: true,
      chargingTime: 1800, // seconds
      dischargingTime: Infinity,
      addEventListener: () => { }
    };
    // Override the method to always return mock battery info.
    window.navigator.getBattery = async () => mockBattery;
  });
});

test('show battery status', async ({ page }) => {
  await page.goto('/');
  await expect(page.locator('.battery-percentage')).toHaveText('90%');
  await expect(page.locator('.battery-status')).toHaveText('Adapter');
  await expect(page.locator('.battery-fully')).toHaveText('00:30');
});

----------------------------------------

TITLE: Running Playwright Tests with Tracing Enabled
DESCRIPTION: Command to run Playwright tests with tracing explicitly enabled, useful for local debugging when not using UI Mode.

LANGUAGE: bash
CODE:
npx playwright test --trace on

----------------------------------------

TITLE: Adding Custom Matcher in Playwright
DESCRIPTION: Shows how to extend Playwright assertions by adding a custom matcher using expect.extend.

LANGUAGE: javascript
CODE:
export const expect = baseExpect.extend({
  async toHaveAmount(locator: Locator, expected: number, options?: { timeout?: number }) {
    const assertionName = 'toHaveAmount';
    let pass: boolean;
    let matcherResult: any;
    try {
      await baseExpect(locator).toHaveAttribute('data-amount', String(expected), options);
      pass = true;
    } catch (e: any) {
      matcherResult = e.matcherResult;
      pass = false;
    }

    const message = pass
      ? () => this.utils.matcherHint(assertionName, undefined, undefined, { isNot: this.isNot }) +
          '\n\n' +
          `Locator: ${locator}\n` +
          `Expected: not ${this.utils.printExpected(expected)}\n` +
          (matcherResult ? `Received: ${this.utils.printReceived(matcherResult.actual)}` : '')
      : () =>  this.utils.matcherHint(assertionName, undefined, undefined, { isNot: this.isNot }) +
          '\n\n' +
          `Locator: ${locator}\n` +
          `Expected: ${this.utils.printExpected(expected)}\n` +
          (matcherResult ? `Received: ${this.utils.printReceived(matcherResult.actual)}` : '');

    return {
      message,
      pass,
      name: assertionName,
      expected,
      actual: matcherResult?.actual,
    };
  },
});

----------------------------------------

TITLE: Implementing waitForAngular in Playwright
DESCRIPTION: A polyfill implementation of Protractor's waitForAngular functionality using Playwright's page evaluation capabilities. Requires Protractor as a dependency.

LANGUAGE: javascript
CODE:
async function waitForAngular(page) {
  const clientSideScripts = require('protractor/built/clientsidescripts.js');

  async function executeScriptAsync(page, script, ...scriptArgs) {
    await page.evaluate(`
      new Promise((resolve, reject) => {
        const callback = (errMessage) => {
          if (errMessage)
            reject(new Error(errMessage));
          else
            resolve();
        };
        (function() {${script}}).apply(null, [...${JSON.stringify(scriptArgs)}, callback]);
      })
    `);
  }

  await executeScriptAsync(page, clientSideScripts.waitForAngular, '');
}

----------------------------------------

TITLE: Finding Focused Node in JavaScript Accessibility Snapshot
DESCRIPTION: This snippet shows how to find and log the name of the focused node in the accessibility snapshot using JavaScript.

LANGUAGE: javascript
CODE:
const snapshot = await page.accessibility.snapshot();
const node = findFocusedNode(snapshot);
console.log(node && node.name);

function findFocusedNode(node) {
  if (node.focused)
    return node;
  for (const child of node.children || []) {
    const foundNode = findFocusedNode(child);
    if (foundNode)
      return foundNode;
  }
  return null;
}

----------------------------------------

TITLE: Downloading Browsers from Custom Artifact Repository
DESCRIPTION: Configure Playwright to download browsers from a custom artifact repository.

LANGUAGE: bash
CODE:
PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1 npx playwright install

LANGUAGE: batch
CODE:
set PLAYWRIGHT_DOWNLOAD_HOST=http://192.0.2.1
npx playwright install

LANGUAGE: powershell
CODE:
$Env:PLAYWRIGHT_DOWNLOAD_HOST="http://192.0.2.1"
npx playwright install

----------------------------------------

TITLE: Using Specific Browser Channels in JavaScript
DESCRIPTION: Configure Playwright to use specific browser channels like Chrome Beta.

LANGUAGE: javascript
CODE:
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'], channel: 'chromium' },
    },
  ],
});

----------------------------------------

TITLE: Recording a Trace Programmatically in JavaScript
DESCRIPTION: Use the BrowserContext API to programmatically start and stop trace recording in a Playwright script.

LANGUAGE: js
CODE:
const browser = await chromium.launch();
const context = await browser.newContext();

// Start tracing before creating / navigating a page.
await context.tracing.start({ screenshots: true, snapshots: true });

const page = await context.newPage();
await page.goto('https://playwright.dev');

// Stop tracing and export it into a zip archive.
await context.tracing.stop({ path: 'trace.zip' });

----------------------------------------

TITLE: Asserting API Response is OK in Playwright Tests (Java)
DESCRIPTION: Demonstrates how to use the isOK() method to assert that an API response status code is within the 200-299 range in Java.

LANGUAGE: java
CODE:
assertThat(response).isOK();

----------------------------------------

TITLE: Simplified waitForAngular Implementation for Angular 2+
DESCRIPTION: A simplified version of waitForAngular polyfill that works specifically for Angular 2+ applications without requiring Protractor dependency.

LANGUAGE: javascript
CODE:
async function waitForAngular(page) {
  await page.evaluate(async () => {
    // @ts-expect-error
    if (window.getAllAngularTestabilities) {
      // @ts-expect-error
      await Promise.all(window.getAllAngularTestabilities().map(whenStable));
      // @ts-expect-error
      async function whenStable(testability) {
        return new Promise(res => testability.whenStable(res));
      }
    }
  });
}

----------------------------------------

TITLE: Alternative Screenshot Comparison in Playwright (JavaScript)
DESCRIPTION: Demonstrates the usage of toMatchSnapshot with options object, including examples of customizing comparison, setting threshold, and specifying snapshot name.

LANGUAGE: javascript
CODE:
// Basic usage and the file name is derived from the test name.
expect(await page.screenshot()).toMatchSnapshot();

// Pass options to customize the snapshot comparison and have a generated name.
expect(await page.screenshot()).toMatchSnapshot({
  maxDiffPixels: 27, // allow no more than 27 different pixels.
});

// Configure image matching threshold and snapshot name.
expect(await page.screenshot()).toMatchSnapshot({
  name: 'landing-page.png',
  threshold: 0.3,
});

----------------------------------------

TITLE: Installing System Dependencies with Playwright CLI
DESCRIPTION: Install system dependencies required by Playwright browsers using the CLI.

LANGUAGE: bash
CODE:
npx playwright install-deps

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install-deps"

LANGUAGE: bash
CODE:
playwright install-deps

LANGUAGE: bash
CODE:
pwsh bin/Debug/netX/playwright.ps1 install-deps

----------------------------------------

TITLE: Running Tests on Specific Browsers in C#
DESCRIPTION: Execute Playwright tests on specific browsers using C#.

LANGUAGE: bash
CODE:
dotnet test -- Playwright.BrowserName=webkit

----------------------------------------

TITLE: Implementing Pinch Gesture in Playwright
DESCRIPTION: Demonstrates how to emulate a pinch gesture by controlling two touch points moving toward or away from each other. Used for zooming in/out on a map interface with configurable distance and steps.

LANGUAGE: javascript
CODE:
async function pinch(locator: Locator,
  arg: { deltaX?: number, deltaY?: number, steps?: number, direction?: 'in' | 'out' }) {
  const { centerX, centerY } = await locator.evaluate((target: HTMLElement) => {
    const bounds = target.getBoundingClientRect();
    const centerX = bounds.left + bounds.width / 2;
    const centerY = bounds.top + bounds.height / 2;
    return { centerX, centerY };
  });

  const deltaX = arg.deltaX ?? 50;
  const steps = arg.steps ?? 5;
  const stepDeltaX = deltaX / (steps + 1);

  const touches = [
    {
      identifier: 0,
      clientX: centerX - (arg.direction === 'in' ? deltaX : stepDeltaX),
      clientY: centerY,
    },
    {
      identifier: 1,
      clientX: centerX + (arg.direction === 'in' ? deltaX : stepDeltaX),
      clientY: centerY,
    },
  ];
  await locator.dispatchEvent('touchstart',
      { touches, changedTouches: touches, targetTouches: touches });

  for (let i = 1; i <= steps; i++) {
    const offset = (arg.direction === 'in' ? (deltaX - i * stepDeltaX) : (stepDeltaX * (i + 1)));
    const touches = [
      {
        identifier: 0,
        clientX: centerX - offset,
        clientY: centerY,
      },
      {
        identifier: 0,
        clientX: centerX + offset,
        clientY: centerY,
      },
    ];
    await locator.dispatchEvent('touchmove',
        { touches, changedTouches: touches, targetTouches: touches });
  }

  await locator.dispatchEvent('touchend', { touches: [], changedTouches: [], targetTouches: [] });
}

----------------------------------------

TITLE: Accessing Suite Location
DESCRIPTION: Returns the location in the source where the suite is defined. This property is missing for root and project suites.

LANGUAGE: js
CODE:
Suite.location

----------------------------------------

TITLE: Testing Multiple Roles Together (JavaScript)
DESCRIPTION: Shows how to test multiple authenticated roles in a single test.

LANGUAGE: javascript
CODE:
import { test } from '@playwright/test';

test('admin and user', async ({ browser }) => {
  const adminContext = await browser.newContext({ storageState: 'playwright/.auth/admin.json' });
  const adminPage = await adminContext.newPage();

  const userContext = await browser.newContext({ storageState: 'playwright/.auth/user.json' });
  const userPage = await userContext.newPage();

  // ... interact with both adminPage and userPage ...

  await adminContext.close();
  await userContext.close();
});

----------------------------------------

TITLE: Retrieving Suite Entries
DESCRIPTION: Returns an array of test cases and suites directly defined in this suite, in their declaration order. Use the 'type' property to differentiate between entry types.

LANGUAGE: js
CODE:
Suite.entries

----------------------------------------

TITLE: Installing Browsers and Dependencies Together
DESCRIPTION: Install both browsers and their system dependencies in a single command.

LANGUAGE: bash
CODE:
npx playwright install --with-deps chromium

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install --with-deps chromium"

LANGUAGE: bash
CODE:
playwright install --with-deps chromium

LANGUAGE: bash
CODE:
pwsh bin/Debug/netX/playwright.ps1 install --with-deps chromium

----------------------------------------

TITLE: Accessing Project Configuration
DESCRIPTION: Returns the configuration of the project this suite belongs to, or undefined for the root suite.

LANGUAGE: js
CODE:
Suite.project()

----------------------------------------

TITLE: Routing Service Worker Requests
DESCRIPTION: Example showing how to specifically route requests made by Service Workers while allowing other requests to continue normally.

LANGUAGE: javascript
CODE:
await context.route('**', async route => {
  if (route.request().serviceWorker()) {
    // NB: calling route.request().frame() here would THROW
    return route.fulfill({
      contentType: 'text/plain',
      status: 200,
      body: 'from sw',
    });
  } else {
    return route.continue();
  }
});

----------------------------------------

TITLE: Debugging Playwright Tests with Inspector (PowerShell)
DESCRIPTION: Commands to debug Playwright tests using the Playwright Inspector in PowerShell.

LANGUAGE: powershell
CODE:
$env:PWDEBUG=1
dotnet test

----------------------------------------

TITLE: Authentication Fixture for Per-Worker Account (JavaScript)
DESCRIPTION: Sets up a fixture to provide unique authenticated accounts for each worker process.

LANGUAGE: javascript
CODE:
import { test as baseTest, expect } from '@playwright/test';
import fs from 'fs';
import path from 'path';

export * from '@playwright/test';
export const test = baseTest.extend<{}, { workerStorageState: string }>({
  storageState: ({ workerStorageState }, use) => use(workerStorageState),

  workerStorageState: [async ({ browser }, use) => {
    const id = test.info().parallelIndex;
    const fileName = path.resolve(test.info().project.outputDir, `.auth/${id}.json`);

    if (fs.existsSync(fileName)) {
      await use(fileName);
      return;
    }

    const page = await browser.newPage({ storageState: undefined });
    const account = await acquireAccount(id);

    await page.goto('https://github.com/login');
    await page.getByLabel('Username or email address').fill(account.username);
    await page.getByLabel('Password').fill(account.password);
    await page.getByRole('button', { name: 'Sign in' }).click();
    await page.waitForURL('https://github.com/');
    await expect(page.getByRole('button', { name: 'View profile and more' })).toBeVisible();

    await page.context().storageState({ path: fileName });
    await page.close();
    await use(fileName);
  }, { scope: 'worker' }],
});

----------------------------------------

TITLE: TestResult Properties Type Definitions - JavaScript
DESCRIPTION: Type definitions for the TestResult class properties including attachments, annotations, duration, errors, steps and other test execution details. These properties provide comprehensive information about test execution results.

LANGUAGE: typescript
CODE:
interface TestResult {
  attachments: Array<{
    name: string,
    contentType: string,
    path?: string,
    body?: Buffer
  }>,
  annotations: Array<{
    type: string,
    description?: string,
    location?: Location
  }>,
  duration: number,
  error?: TestError,
  errors: TestError[],
  retry: number,
  startTime: Date,
  status: "passed" | "failed" | "timedOut" | "skipped" | "interrupted",
  stderr: Array<string | Buffer>,
  stdout: Array<string | Buffer>,
  steps: TestStep[],
  workerIndex: number,
  parallelIndex: number
}

----------------------------------------

TITLE: Running Tests on Specific Browsers
DESCRIPTION: Execute Playwright tests on a specific browser or project.

LANGUAGE: bash
CODE:
npx playwright test --project=firefox

----------------------------------------

TITLE: Using the 'not' Property in API Response Assertions (JavaScript)
DESCRIPTION: Shows how to use the 'not' property to invert an assertion in Playwright tests, checking that a response is not OK.

LANGUAGE: javascript
CODE:
await expect(response).not.toBeOK();

----------------------------------------

TITLE: Running Specific Playwright Tests
DESCRIPTION: Commands to run specific Playwright tests using filters based on class names or test titles.

LANGUAGE: bash
CODE:
dotnet test --filter "ExampleTest"

dotnet test --filter "ExampleTest1|ExampleTest2"

dotnet test --filter "Name~GetStartedLink"

----------------------------------------

TITLE: Accessing All Tests in a Suite
DESCRIPTION: Returns the list of all test cases in this suite and its descendants, as opposed to the 'tests' property which only includes direct child tests.

LANGUAGE: js
CODE:
Suite.allTests()

----------------------------------------

TITLE: Running Playwright Tests on Specific Browser (Bash)
DESCRIPTION: Command to run Playwright tests on a specific browser (WebKit) using environment variable in Bash.

LANGUAGE: bash
CODE:
BROWSER=webkit dotnet test

----------------------------------------

TITLE: Unconditional Test Step Skip
DESCRIPTION: Shows how to skip a test step unconditionally using TestStepInfo.skip method.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('my test', async ({ page }) => {
  await test.step('check expectations', async step => {
    step.skip();
    // step body below will not run
    // ...
  });
});

----------------------------------------

TITLE: Installing Playwright Canary Release via NPM
DESCRIPTION: Command to install the latest canary release of Playwright Test using NPM. This installs the @next version which contains the newest unreleased features and changes.

LANGUAGE: bash
CODE:
npm install -D @playwright/test@next

----------------------------------------

TITLE: Test Authentication with IndexedDB
DESCRIPTION: Example showing how to save and restore IndexedDB storage state for authentication

LANGUAGE: js
CODE:
import { test as setup, expect } from '@playwright/test';
import path from 'path';

const authFile = path.join(__dirname, '../playwright/.auth/user.json');

setup('authenticate', async ({ page }) => {
  await page.goto('/');
  // ... perform authentication steps ...

  // make sure to save indexedDB
  await page.context().storageState({ path: authFile, indexedDB: true });
});

----------------------------------------

TITLE: Configure Git Information Capture
DESCRIPTION: Example showing how to configure git information capture in the test config

LANGUAGE: js
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  captureGitInfo: { commit: true, diff: true }
});

----------------------------------------

TITLE: Creating Global Teardown Test in Playwright
DESCRIPTION: Demonstrates how to create a global teardown test file for database cleanup in Playwright.

LANGUAGE: javascript
CODE:
import { test as teardown } from '@playwright/test';

teardown('delete database', async ({ }) => {
  console.log('deleting test database...');
  // Delete the database
});

----------------------------------------

TITLE: Running Playwright Tests with Multiple Workers (NUnit)
DESCRIPTION: Command to run Playwright tests with multiple workers using NUnit.

LANGUAGE: bash
CODE:
dotnet test -- NUnit.NumberOfTestWorkers=5

----------------------------------------

TITLE: FullProject Class Properties in Playwright JavaScript
DESCRIPTION: Defines the structure and properties of the FullProject class used in Playwright testing framework. This class provides runtime access to test project configuration through TestInfo.project and WorkerInfo.project.

LANGUAGE: javascript
CODE:
class FullProject {
  dependencies: Array<string>; // Project dependencies
  grep: RegExp|Array<RegExp>; // Test filtering patterns
  grepInvert: null|RegExp|Array<RegExp>; // Inverted test filtering
  metadata: Metadata; // Project metadata
  name: string; // Project name
  snapshotDir: string; // Snapshot directory path
  outputDir: string; // Output directory path
  repeatEach: number; // Number of times to repeat each test
  retries: number; // Number of retry attempts
  teardown: string|undefined; // Teardown project name
  testDir: string; // Test directory path
  testIgnore: string|RegExp|Array<string|RegExp>; // Patterns to ignore
  testMatch: string|RegExp|Array<string|RegExp>; // Patterns to match
  timeout: number; // Test timeout in milliseconds
  use: Fixtures; // Project-specific fixtures
}

----------------------------------------

TITLE: Enabling Detailed Logging for Playwright
DESCRIPTION: Commands to enable detailed logging for Playwright's connection to Selenium Grid using the DEBUG environment variable.

LANGUAGE: bash
CODE:
DEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 npx playwright test

LANGUAGE: bash
CODE:
DEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 pytest --browser chromium

LANGUAGE: bash
CODE:
DEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 mvn test

LANGUAGE: bash
CODE:
DEBUG=pw:browser* SELENIUM_REMOTE_URL=http://internal.grid:4444 dotnet test

----------------------------------------

TITLE: Skipping a Test in Playwright
DESCRIPTION: Shows how to mark a test as skipped using the .skip() method. Skipped tests are not executed during the test run.

LANGUAGE: javascript
CODE:
test.skip('skip this test', async ({ page }) => {
  // This test is not run
});

----------------------------------------

TITLE: Using Web-First Assertions in Playwright Tests
DESCRIPTION: Example of using web-first assertions to check element text in a Playwright test

LANGUAGE: csharp
CODE:
using System.Threading.Tasks;
using Microsoft.Playwright.NUnit;
using NUnit.Framework;

namespace PlaywrightTests;

[TestFixture]
public class ExampleTests : PageTest
{
    [Test]
    public async Task StatusBecomesSubmitted()
    {
        await Expect(Page.Locator(".status")).ToHaveTextAsync("Submitted");
    }
}

----------------------------------------

TITLE: Running Playwright Tests with Launch Configuration
DESCRIPTION: Command to run Playwright tests on a specific browser (WebKit) using launch configuration options.

LANGUAGE: bash
CODE:
dotnet test -- Playwright.BrowserName=webkit

----------------------------------------

TITLE: Using Browser Fixture in Playwright Test
DESCRIPTION: Shows how to use the browser fixture in a beforeAll hook. The browser fixture provides a shared Browser instance for all tests in the same worker.

LANGUAGE: javascript
CODE:
test.beforeAll(async ({ browser }) => {
  const page = await browser.newPage();
  // ...
});

----------------------------------------

TITLE: Debugging Playwright Tests with Inspector (Batch)
DESCRIPTION: Commands to debug Playwright tests using the Playwright Inspector in Batch.

LANGUAGE: batch
CODE:
set PWDEBUG=1
dotnet test

----------------------------------------

TITLE: TestInfoError Class Structure
DESCRIPTION: Core structure of the TestInfoError class showing its main properties for handling test execution errors. The class includes properties for error cause (added in v1.49), error message, stack trace, and thrown value handling.

LANGUAGE: javascript
CODE:
class TestInfoError {
  cause?: TestInfoError;     // Error cause for chained errors (v1.49+)
  message?: string;         // Error message when Error is thrown
  stack?: string;          // Error stack trace when Error is thrown
  value?: string;          // Value thrown for non-Error throws
}

----------------------------------------

TITLE: Basic Puppeteer Automation Example
DESCRIPTION: Shows a basic Puppeteer script for launching a browser, navigating to a page, and taking a screenshot.

LANGUAGE: javascript
CODE:
const puppeteer = require('puppeteer');

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.setViewport({ width: 1280, height: 800 });
  await page.goto('https://playwright.dev/', {
    waitUntil: 'networkidle2',
  });
  await page.screenshot({ path: 'example.png' });
  await browser.close();
})();

----------------------------------------

TITLE: Event Waiting Utilities - Java Implementation
DESCRIPTION: Methods for waiting on specific WebSocket events with optional predicates and timeouts. Includes frame reception and sending monitors.

LANGUAGE: java
CODE:
WebSocketFrame frame = webSocket.waitForFrameReceived(new WaitForFrameReceivedOptions()
    .setPredicate(frame -> /* predicate logic */)
    .setTimeout(5000));

WebSocketFrame sentFrame = webSocket.waitForFrameSent(new WaitForFrameSentOptions()
    .setPredicate(frame -> /* predicate logic */)
    .setTimeout(5000));

----------------------------------------

TITLE: Emulating Geolocation, Language, and Timezone in Playwright Codegen
DESCRIPTION: Command to run Playwright's codegen tool with specific geolocation, language, and timezone settings.

LANGUAGE: bash
CODE:
npx playwright codegen --timezone="Europe/Rome" --geolocation="41.890221,12.492348" --lang="it-IT" bing.com/maps

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args='codegen --timezone="Europe/Rome" --geolocation="41.890221,12.492348" --lang="it-IT" bing.com/maps'

LANGUAGE: bash
CODE:
playwright codegen --timezone="Europe/Rome" --geolocation="41.890221,12.492348" --lang="it-IT" bing.com/maps

LANGUAGE: bash
CODE:
pwsh bin/Debug/netX/playwright.ps1 codegen --timezone="Europe/Rome" --geolocation="41.890221,12.492348" --lang="it-IT" bing.com/maps

----------------------------------------

TITLE: Using Page Fixture in Playwright Test
DESCRIPTION: Demonstrates how to use the page fixture in a basic Playwright test. The page fixture provides a Page object that is available to the test.

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('basic test', async ({ page }) => {
  // ...
});

----------------------------------------

TITLE: Using Page.waitForTimeout() for Event Dispatching
DESCRIPTION: This snippet illustrates the use of Page.waitForTimeout() to ensure events are dispatched while pausing program execution. It navigates to a page, sets up an event listener, and then waits for a specified time while allowing events to be processed.

LANGUAGE: java
CODE:
page.onResponse(response -> System.out.println(response.url()));
page.navigate("https://playwright.dev");
System.out.println("-- did navigate --");
// Block current thread for 60s and ensure the events are dispatched.
page.waitForTimeout(60_000);

----------------------------------------

TITLE: Puppeteer Test Example with Jest
DESCRIPTION: Demonstrates a test example using Puppeteer with Jest testing framework.

LANGUAGE: javascript
CODE:
import puppeteer from 'puppeteer';

describe('Playwright homepage', () => {
  let browser;
  let page;

  beforeAll(async () => {
    browser = await puppeteer.launch();
    page = await browser.newPage();
  });

  it('contains hero title', async () => {
    await page.goto('https://playwright.dev/');
    await page.waitForSelector('.hero__title');
    const text = await page.$eval('.hero__title', e => e.textContent);
    expect(text).toContain('Playwright enables reliable end-to-end testing');
  });

  afterAll(() => browser.close());
});

----------------------------------------

TITLE: Using Vue locator in Playwright
DESCRIPTION: Example of using the experimental Vue locator to find elements by component name.

LANGUAGE: javascript
CODE:
await page.locator('_vue=book-item').click();

LANGUAGE: java
CODE:
page.locator("_vue=book-item").click();

LANGUAGE: python
CODE:
await page.locator("_vue=book-item").click()

LANGUAGE: csharp
CODE:
await page.Locator("_vue=book-item").ClickAsync();

----------------------------------------

TITLE: Blocking WebSocket Messages in Both Directions in JavaScript
DESCRIPTION: This example shows how to block certain messages in both directions (from page to server and vice versa) using Playwright's WebSocketRoute.

LANGUAGE: javascript
CODE:
await page.routeWebSocket('/ws', ws => {
  const server = ws.connectToServer();
  ws.onMessage(message => {
    if (message !== 'blocked-from-the-page')
      server.send(message);
  });
  server.onMessage(message => {
    if (message !== 'blocked-from-the-server')
      ws.send(message);
  });
});

----------------------------------------

TITLE: WebView2 Test Setup in C#
DESCRIPTION: Sets up the test environment for WebView2 automation using Playwright in C#.

LANGUAGE: csharp
CODE:
using System.Diagnostics;
using Microsoft.Playwright;
using Microsoft.Playwright.MSTest;

namespace PlaywrightTests;

[TestClass]
public class ExampleTest : PlaywrightTest
{
    public IBrowser Browser { get; internal set; } = null!;
    public IBrowserContext Context { get; internal set; } = null!;
    public IPage Page { get; internal set; } = null!;
    private Process? _webView2Process = null;
    private string _userDataDir = null!;
    private string _executablePath = Path.Join(Directory.GetCurrentDirectory(), @"..\..\..\..\webview2-app\bin\Debug\net8.0-windows\webview2.exe");

    [TestInitialize]
    public async Task BrowserTestInitialize()
    {
        var cdpPort = 10000 + WorkerIndex;
        Assert.IsTrue(File.Exists(_executablePath), "Make sure that the executable exists");
        _userDataDir = Path.Join(Path.GetTempPath(), $"playwright-webview2-tests/user-data-dir-{WorkerIndex}");
        // WebView2 does some lazy cleanups on shutdown so we can't clean it up after each test
        if (Directory.Exists(_userDataDir))
        {
            Directory.Delete(_userDataDir, true);
        }
        _webView2Process = Process.Start(new ProcessStartInfo(_executablePath)
        {
            EnvironmentVariables =
        {
            ["WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS"] = $"--remote-debugging-port={cdpPort}",
            ["WEBVIEW2_USER_DATA_FOLDER"] = _userDataDir,
        },
            RedirectStandardOutput = true,
        });
        while (!_webView2Process!.HasExited)
        {
            var output = await _webView2Process!.StandardOutput.ReadLineAsync();
            if (_webView2Process!.HasExited)
            {
                throw new Exception("WebView2 process exited unexpectedly");
            }
            if (output != null && output.Contains("WebView2 initialized"))
            {
                break;
            }
        }
        var cdpAddress = $"http://127.0.0.1:{cdpPort}";
        Browser = await Playwright.Chromium.ConnectOverCDPAsync(cdpAddress);
        Context = Browser.Contexts[0];
        Page = Context.Pages[0];
    }

    [TestCleanup]
    public async Task BrowserTestCleanup()
    {
        _webView2Process!.Kill(true);
        await Browser.CloseAsync();
    }
}

----------------------------------------

TITLE: Configuring Global Teardown in Playwright
DESCRIPTION: Illustrates how to configure global teardown using project dependencies in the Playwright configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  testDir: './tests',
  // ...
  projects: [
    {
      name: 'setup db',
      testMatch: /global\.setup\.ts/,
      teardown: 'cleanup db',
    },
    {
      name: 'cleanup db',
      testMatch: /global\.teardown\.ts/,
    },
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
      dependencies: ['setup db'],
    },
  ]
});

----------------------------------------

TITLE: Scrolling in Playwright
DESCRIPTION: Shows various ways to perform scrolling operations in Playwright, including automatic scrolling, manual scrolling using scrollIntoViewIfNeeded, and programmatic scrolling.

LANGUAGE: javascript
CODE:
// Automatic scrolling
await page.getByRole('button').click();

// Manual scrolling
await page.getByText('Footer text').scrollIntoViewIfNeeded();

// Scrolling with mouse wheel
await page.getByTestId('scrolling-container').hover();
await page.mouse.wheel(0, 10);

// Programmatic scrolling
await page.getByTestId('scrolling-container').evaluate(e => e.scrollTop += 100);

----------------------------------------

TITLE: Mocking Read-Only Browser APIs in Playwright
DESCRIPTION: This snippet shows how to mock read-only browser APIs by using Object.defineProperty to override the property on the navigator object's prototype.

LANGUAGE: javascript
CODE:
await page.addInitScript(() => {
  Object.defineProperty(Object.getPrototypeOf(navigator), 'cookieEnabled', { value: false });
});

----------------------------------------

TITLE: Interacting with Chrome DevTools Protocol using CDPSession in Java
DESCRIPTION: This snippet demonstrates how to create a new CDP session, enable runtime, listen for animation events, get and set playback rates using the Chrome DevTools Protocol in Java.

LANGUAGE: java
CODE:
CDPSession client = page.context().newCDPSession(page);
client.send("Runtime.enable");

client.on("Animation.animationCreated", (event) -> System.out.println("Animation created!"));

JsonObject response = client.send("Animation.getPlaybackRate");
double playbackRate = response.get("playbackRate").getAsDouble();
System.out.println("playback rate is " + playbackRate);

JsonObject params = new JsonObject();
params.addProperty("playbackRate", playbackRate / 2);
client.send("Animation.setPlaybackRate", params);

----------------------------------------

TITLE: C# Aria Snapshot Testing Implementation
DESCRIPTION: Shows how to implement accessibility snapshot testing in C# using Playwright's async API

LANGUAGE: csharp
CODE:
await page.GotoAsync("https://playwright.dev/");
await Expect(page.Locator("banner")).ToMatchAriaSnapshotAsync(@"
  - banner:
    - heading ""Playwright enables reliable end-to-end testing for modern web apps."" [level=1]
    - link ""Get started""
    - link ""Star microsoft/playwright on GitHub""
    - link /[\\d]+k\\+ stargazers on GitHub/
");

----------------------------------------

TITLE: Creating Global Setup Test in Playwright
DESCRIPTION: Shows how to create a global setup test file for database initialization in Playwright.

LANGUAGE: javascript
CODE:
import { test as setup } from '@playwright/test';

setup('create new database', async ({ }) => {
  console.log('creating new database...');
  // Initialize the database
});

----------------------------------------

TITLE: Video Recording in C#
DESCRIPTION: Demonstrates video recording configuration in C# including directory setup and video size settings.

LANGUAGE: csharp
CODE:
var context = await browser.NewContextAsync(new()
{
    RecordVideoDir = "videos/",
    RecordVideoSize = new RecordVideoSize() { Width = 640, Height = 480 }
});
// Make sure to close, so that videos are saved.
await context.CloseAsync();

----------------------------------------

TITLE: Basic Playwright Synchronous Usage
DESCRIPTION: Example showing synchronous browser automation with Playwright including page navigation and title extraction

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright

with sync_playwright() as p:
    browser = p.chromium.launch()
    page = browser.new_page()
    page.goto("https://playwright.dev")
    print(page.title())
    browser.close()

----------------------------------------

TITLE: Initializing Chrome Extension in Playwright (JavaScript)
DESCRIPTION: This snippet demonstrates how to launch a persistent browser context with a Chrome extension in Playwright using JavaScript. It includes loading the extension and accessing its background page.

LANGUAGE: javascript
CODE:
const { chromium } = require('playwright');

(async () => {
  const pathToExtension = require('path').join(__dirname, 'my-extension');
  const userDataDir = '/tmp/test-user-data-dir';
  const browserContext = await chromium.launchPersistentContext(userDataDir, {
    channel: 'chromium',
    args: [
      `--disable-extensions-except=${pathToExtension}`,
      `--load-extension=${pathToExtension}`
    ]
  });
  let [backgroundPage] = browserContext.backgroundPages();
  if (!backgroundPage)
    backgroundPage = await browserContext.waitForEvent('backgroundpage');

  // Test the background page as you would any other page.
  await browserContext.close();
})();

----------------------------------------

TITLE: Basic Aria Snapshot Testing in JavaScript
DESCRIPTION: Demonstrates how to perform basic accessibility snapshot testing using Playwright's toMatchAriaSnapshot method in JavaScript

LANGUAGE: javascript
CODE:
await page.goto('https://playwright.dev/');
await expect(page.getByRole('banner')).toMatchAriaSnapshot(`
  - banner:
    - heading /Playwright enables reliable end-to-end/ [level=1]
    - link "Get started"
    - link "Star microsoft/playwright on GitHub"
    - link /[\\d]+k\\+ stargazers on GitHub/
`);

----------------------------------------

TITLE: GitHub Actions TypeScript Integration
DESCRIPTION: GitHub Actions workflow configuration showing how to run TypeScript type checks alongside Playwright tests.

LANGUAGE: yaml
CODE:
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    ...
    - name: Run type checks
      run: npx tsc -p tsconfig.json --noEmit
    - name: Run Playwright tests
      run: npx playwright test

----------------------------------------

TITLE: Running Playwright Tests in Headed Mode (Bash)
DESCRIPTION: Command to run Playwright tests in headed mode, opening a browser window for each test, using Bash.

LANGUAGE: bash
CODE:
HEADED=1 dotnet test

----------------------------------------

TITLE: Configuring Multi-Platform Driver Bundling in XML
DESCRIPTION: Project file configurations for bundling Playwright drivers for multiple platforms

LANGUAGE: xml
CODE:
<PropertyGroup>
  <PlaywrightPlatform>all</PlaywrightPlatform>
</PropertyGroup>

LANGUAGE: xml
CODE:
<PropertyGroup>
  <PlaywrightPlatform>osx;linux</PlaywrightPlatform>
</PropertyGroup>

----------------------------------------

TITLE: Source File Reference Documentation
DESCRIPTION: Maps the relevant source files and their origins from the axe-core test suite. The implicit-role.js file contains test cases for ARIA role detection, while accessible-text.js contains tests for computing accessible text content.

LANGUAGE: plaintext
CODE:
implicit-role.js -> /test/commons/aria/implicit-role.js
accessible-text.js -> /test/commons/aria/accessible-text.js

----------------------------------------

TITLE: Installing Dependencies for Specific Browsers
DESCRIPTION: Install system dependencies for a specific browser like Chromium.

LANGUAGE: bash
CODE:
npx playwright install-deps chromium

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install-deps chromium"

LANGUAGE: bash
CODE:
playwright install-deps chromium

LANGUAGE: bash
CODE:
pwsh bin/Debug/netX/playwright.ps1 install-deps chromium

----------------------------------------

TITLE: Testing with Playwright Component Testing Example
DESCRIPTION: Equivalent test implementation using Playwright's Component Testing framework, demonstrating the migration path from Testing Library.

LANGUAGE: javascript
CODE:
const { test, expect } = require('@playwright/experimental-ct-react');

test('sign in', async ({ mount }) => {
  // Setup the page.
  const component = await mount(<SignInPage />);

  // Perform actions.
  await component.getByLabel('Username').fill('John');
  await component.getByLabel('Password').fill('secret');
  await component.getByRole('button', { name: 'Sign in' }).click();

  // Verify signed in state by waiting until "Welcome" message appears.
  await expect(component.getByText('Welcome, John')).toBeVisible();
});

----------------------------------------

TITLE: Creating and Sending FormData in Java
DESCRIPTION: Demonstrates how to create a FormData object, set key-value pairs, and send it via an API request using Playwright in Java.

LANGUAGE: java
CODE:
import com.microsoft.playwright.options.FormData;
// ...
FormData form = FormData.create()
    .set("firstName", "John")
    .set("lastName", "Doe")
    .set("age", 30);
page.request().post("http://localhost/submit", RequestOptions.create().setForm(form));

----------------------------------------

TITLE: Basic Playwright Test with JUnit Fixture in Java
DESCRIPTION: This snippet shows a simple JUnit test class using the Playwright Page fixture. It demonstrates how to navigate to a website and assert the page title.

LANGUAGE: java
CODE:
@UsePlaywright
public class TestExample {

  @Test
  void basicTest(Page page) {
    page.navigate("https://playwright.dev/");

    assertThat(page).hasTitle(Pattern.compile("Playwright"));
  }
}

----------------------------------------

TITLE: Basic Android Automation Example in Playwright
DESCRIPTION: Demonstrates core Android automation capabilities including device connection, WebView manipulation, and Chrome browser automation. Shows how to take screenshots, interact with WebView elements, and control Chrome browser instances.

LANGUAGE: javascript
CODE:
const { _android: android } = require('playwright');

(async () => {
  // Connect to the device.
  const [device] = await android.devices();
  console.log(`Model: ${device.model()}`);
  console.log(`Serial: ${device.serial()}`);
  // Take screenshot of the whole device.
  await device.screenshot({ path: 'device.png' });

  {
    // --------------------- WebView -----------------------

    // Launch an application with WebView.
    await device.shell('am force-stop org.chromium.webview_shell');
    await device.shell('am start org.chromium.webview_shell/.WebViewBrowserActivity');
    // Get the WebView.
    const webview = await device.webView({ pkg: 'org.chromium.webview_shell' });

    // Fill the input box.
    await device.fill({
      res: 'org.chromium.webview_shell:id/url_field',
    }, 'github.com/microsoft/playwright');
    await device.press({
      res: 'org.chromium.webview_shell:id/url_field',
    }, 'Enter');

    // Work with WebView's page as usual.
    const page = await webview.page();
    await page.waitForNavigation({ url: /.*microsoft\/playwright.*/ });
    console.log(await page.title());
  }

  {
    // --------------------- Browser -----------------------

    // Launch Chrome browser.
    await device.shell('am force-stop com.android.chrome');
    const context = await device.launchBrowser();

    // Use BrowserContext as usual.
    const page = await context.newPage();
    await page.goto('https://webkit.org/');
    console.log(await page.evaluate(() => window.location.href));
    await page.screenshot({ path: 'page.png' });

    await context.close();
  }

  // Close the device.
  await device.close();
})();

----------------------------------------

TITLE: Using Custom Browser Locations in Tests
DESCRIPTION: Run Playwright tests using custom browser binary locations.

LANGUAGE: bash
CODE:
PLAYWRIGHT_BROWSERS_PATH=$HOME/pw-browsers npx playwright test

LANGUAGE: batch
CODE:
set PLAYWRIGHT_BROWSERS_PATH=%USERPROFILE%\pw-browsers
npx playwright test

LANGUAGE: powershell
CODE:
$Env:PLAYWRIGHT_BROWSERS_PATH="$Env:USERPROFILE\pw-browsers"
npx playwright test

----------------------------------------

TITLE: Testing with Testing Library React Example
DESCRIPTION: Example showing how to test a sign-in page using Testing Library with React, including setup, user interactions, and assertions.

LANGUAGE: javascript
CODE:
import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';

test('sign in', async () => {
  // Setup the page.
  const user = userEvent.setup();
  render(<SignInPage />);

  // Perform actions.
  await user.type(screen.getByLabelText('Username'), 'John');
  await user.type(screen.getByLabelText('Password'), 'secret');
  await user.click(screen.getByRole('button', { name: 'Sign in' }));

  // Verify signed in state by waiting until "Welcome" message appears.
  expect(await screen.findByText('Welcome, John')).toBeInTheDocument();
});

----------------------------------------

TITLE: Handling TimeoutError in Python Sync with Playwright
DESCRIPTION: Demonstrates TimeoutError handling using Playwright's synchronous API in Python. Uses context manager pattern for resource management.

LANGUAGE: python
CODE:
from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError

with sync_playwright() as p:
    browser = p.chromium.launch()
    page = browser.new_page()
    try:
      page.locator("text=Example").click(timeout=100)
    except PlaywrightTimeoutError:
      print("Timeout!")
    browser.close()

----------------------------------------

TITLE: Uploading Files in Playwright
DESCRIPTION: Demonstrates various ways to upload files, including single file, multiple files, directories, and uploading from memory buffer using Playwright's setInputFiles method.

LANGUAGE: javascript
CODE:
// Select one file
await page.getByLabel('Upload file').setInputFiles(path.join(__dirname, 'myfile.pdf'));

// Select multiple files
await page.getByLabel('Upload files').setInputFiles([
  path.join(__dirname, 'file1.txt'),
  path.join(__dirname, 'file2.txt'),
]);

// Select a directory
await page.getByLabel('Upload directory').setInputFiles(path.join(__dirname, 'mydir'));

// Remove all the selected files
await page.getByLabel('Upload file').setInputFiles([]);

// Upload buffer from memory
await page.getByLabel('Upload file').setInputFiles({
  name: 'file.txt',
  mimeType: 'text/plain',
  buffer: Buffer.from('this is test')
});

----------------------------------------

TITLE: Typing Characters and Using Keyboard Shortcuts in Playwright
DESCRIPTION: Shows how to type characters sequentially and use keyboard shortcuts for various actions using Playwright's pressSequentially and press methods.

LANGUAGE: javascript
CODE:
// Press keys one by one
await page.locator('#area').pressSequentially('Hello World!');

// Hit Enter
await page.getByText('Submit').press('Enter');

// Dispatch Control+Right
await page.getByRole('textbox').press('Control+ArrowRight');

// Press $ sign on keyboard
await page.getByRole('textbox').press('$');

----------------------------------------

TITLE: Running Selenium Standalone in Docker
DESCRIPTION: Command to run Selenium Standalone in a Docker container, exposing the necessary port and setting the SE_NODE_GRID_URL environment variable.

LANGUAGE: bash
CODE:
docker run -d -p 4444:4444 --shm-size="2g" -e SE_NODE_GRID_URL="http://localhost:4444" selenium/standalone-chromium:latest

----------------------------------------

TITLE: Component Test Setup HTML Template
DESCRIPTION: Base HTML template required for component testing with mounting point and script reference

LANGUAGE: html
CODE:
<html lang="en">
  <body>
    <div id="root"></div>
    <script type="module" src="./index.ts"></script>
  </body>
</html>

----------------------------------------

TITLE: Drawing Square with Mouse Movement - Java
DESCRIPTION: Shows how to use the page.mouse() API in Java to trace a 100x100 pixel square through mouse movements and clicks.

LANGUAGE: java
CODE:
page.mouse().move(0, 0);
page.mouse().down();
page.mouse().move(0, 100);
page.mouse().move(100, 100);
page.mouse().move(100, 0);
page.mouse().move(0, 0);
page.mouse().up();

----------------------------------------

TITLE: Using Handles as Parameters in Playwright
DESCRIPTION: Demonstrates creating an array in the page, initializing it with data, and returning a handle to this array. The handle is then used in subsequent evaluations.

LANGUAGE: javascript
CODE:
// Create new array in page.
const myArrayHandle = await page.evaluateHandle(() => {
  window.myArray = [1];
  return myArray;
});

// Get the length of the array.
const length = await page.evaluate(a => a.length, myArrayHandle);

// Add one more element to the array using the handle
await page.evaluate(arg => arg.myArray.push(arg.newElement), {
  myArray: myArrayHandle,
  newElement: 2
});

// Release the object when it's no longer needed.
await myArrayHandle.dispose();

LANGUAGE: java
CODE:
// Create new array in page.
JSHandle myArrayHandle = page.evaluateHandle("() => {\n" +
  "  window.myArray = [1];\n" +
  "  return myArray;\n" +
  "}");

// Get the length of the array.
int length = (int) page.evaluate("a => a.length", myArrayHandle);

// Add one more element to the array using the handle
Map<String, Object> arg = new HashMap<>();
arg.put("myArray", myArrayHandle);
arg.put("newElement", 2);
page.evaluate("arg => arg.myArray.add(arg.newElement)", arg);

// Release the object when it is no longer needed.
myArrayHandle.dispose();

LANGUAGE: python
CODE:
# Create new array in page.
my_array_handle = await page.evaluate_handle("""() => {
  window.myArray = [1];
  return myArray;
}""")

# Get current length of the array.
length = await page.evaluate("a => a.length", my_array_handle)

# Add one more element to the array using the handle
await page.evaluate("(arg) => arg.myArray.push(arg.newElement)", {
  'myArray': my_array_handle,
  'newElement': 2
})

# Release the object when it's no longer needed.
await my_array_handle.dispose()

LANGUAGE: csharp
CODE:
// Create new array in page.
var myArrayHandle = await page.EvaluateHandleAsync(@"() => {
    window.myArray = [1];
    return myArray;
}");

// Get the length of the array.
var length = await page.EvaluateAsync<int>("a => a.length", myArrayHandle);

// Add one more element to the array using the handle
await page.EvaluateAsync("arg => arg.myArray.add(arg.newElement)",
    new { myArray = myArrayHandle, newElement = 2 });

// Release the object when it is no longer needed.
await myArrayHandle.DisposeAsync();

----------------------------------------

TITLE: Opening a Remote Trace File
DESCRIPTION: Open a remote trace file directly using its URL. This is useful for viewing traces from CI runs without manually downloading the file.

LANGUAGE: bash
CODE:
npx playwright show-trace https://example.com/trace.zip

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="show-trace https://example.com/trace.zip"

LANGUAGE: bash
CODE:
playwright show-trace https://example.com/trace.zip

LANGUAGE: bash
CODE:
pwsh bin/Debug/netX/playwright.ps1 show-trace https://example.com/trace.zip

----------------------------------------

TITLE: Setting Additional Selenium Capabilities
DESCRIPTION: Commands to set additional Selenium capabilities using the SELENIUM_REMOTE_CAPABILITIES environment variable.

LANGUAGE: bash
CODE:
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES="{'mygrid:options':{os:'windows',username:'John',password:'secure'}}" npx playwright test

LANGUAGE: bash
CODE:
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES="{'mygrid:options':{os:'windows',username:'John',password:'secure'}}" pytest --browser chromium

LANGUAGE: bash
CODE:
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES="{'mygrid:options':{os:'windows',username:'John',password:'secure'}}" mvn test

LANGUAGE: bash
CODE:
SELENIUM_REMOTE_URL=http://<selenium-hub-ip>:4444 SELENIUM_REMOTE_CAPABILITIES="{'mygrid:options':{os:'windows',username:'John',password:'secure'}}" dotnet test

----------------------------------------

TITLE: Configuring Basic Options in Playwright
DESCRIPTION: Configuration for setting base URL and storage state in Playwright tests using the use object.

LANGUAGE: typescript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  use: {
    // Base URL to use in actions like `await page.goto('/')`.
    baseURL: 'http://localhost:3000',

    // Populates context with given storage state.
    storageState: 'state.json',
  },
});

----------------------------------------

TITLE: Interacting with Chrome DevTools Protocol using CDPSession in Python (Async)
DESCRIPTION: This snippet shows how to create a new CDP session, enable animations, listen for animation events, get and set playback rates using the Chrome DevTools Protocol in Python with async/await syntax.

LANGUAGE: python
CODE:
client = await page.context.new_cdp_session(page)
await client.send("Animation.enable")
client.on("Animation.animationCreated", lambda: print("animation created!"))
response = await client.send("Animation.getPlaybackRate")
print("playback rate is " + str(response["playbackRate"]))
await client.send("Animation.setPlaybackRate", {
    "playbackRate": response["playbackRate"] / 2
})

----------------------------------------

TITLE: Waiting for Popup Window in Playwright
DESCRIPTION: This snippet shows how to wait for a popup window to open in Playwright. It waits for the 'popup' event before clicking a button that triggers the popup, then navigates the new window.

LANGUAGE: javascript
CODE:
// Start waiting for popup before clicking. Note no await.
const popupPromise = page.waitForEvent('popup');
await page.getByText('open the popup').click();
const popup = await popupPromise;
await popup.goto('https://wikipedia.org');

LANGUAGE: java
CODE:
// The callback lambda defines scope of the code that is expected to
// create popup window.
Page popup = page.waitForPopup(() -> {
  page.getByText("open the popup").click();
});
popup.navigate("https://wikipedia.org");

LANGUAGE: python
CODE:
async with page.expect_popup() as popup:
  await page.get_by_text("open the popup").click()
child_page = await popup.value
await child_page.goto("https://wikipedia.org")

LANGUAGE: csharp
CODE:
var popup = await page.RunAndWaitForPopupAsync(async =>
{
    await page.GetByText("open the popup").ClickAsync();
});
await popup.GotoAsync("https://wikipedia.org");

----------------------------------------

TITLE: Saving Authenticated State in Playwright Codegen
DESCRIPTION: Command to run Playwright's codegen tool and save the authenticated state.

LANGUAGE: bash
CODE:
npx playwright codegen github.com/microsoft/playwright --save-storage=auth.json

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="codegen github.com/microsoft/playwright  --save-storage=auth.json"

LANGUAGE: bash
CODE:
playwright codegen github.com/microsoft/playwright --save-storage=auth.json

LANGUAGE: bash
CODE:
pwsh bin/Debug/netX/playwright.ps1 codegen github.com/microsoft/playwright --save-storage=auth.json

----------------------------------------

TITLE: Defining Navigation Wait Until States
DESCRIPTION: Specifies when to consider a navigation operation successful based on page load states

LANGUAGE: text
CODE:
domcontentloaded - when DOMContentLoaded event is fired
load - when the load event is fired
networkidle - when there are no network connections for at least 500ms
commit - when network response is received and document loading begins

----------------------------------------

TITLE: Configuring Playwright Trace Settings in TypeScript
DESCRIPTION: Configuration file that sets up trace recording for failed test retries. It enables tracing on the first retry and configures different retry counts for CI versus local environments.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';
export default defineConfig({
  retries: process.env.CI ? 2 : 0, // set to 2 when running on CI
  // ...
  use: {
    trace: 'on-first-retry', // record traces on first retry of each test
  },
});

----------------------------------------

TITLE: Generating Library to Package Map for Ubuntu:bionic using Bash
DESCRIPTION: This bash command runs a script to generate a map of browser libraries to package names for the Ubuntu:bionic distribution. The results are saved to a file named 'RUN_RESULT'.

LANGUAGE: bash
CODE:
./run.sh ubuntu:bionic

----------------------------------------

TITLE: Setting up Test Fixtures for Chrome Extensions (Python)
DESCRIPTION: This snippet demonstrates how to create test fixtures in Playwright for loading Chrome extensions and retrieving the extension ID using Python. It's designed for use with pytest.

LANGUAGE: python
CODE:
from typing import Generator
from pathlib import Path
from playwright.sync_api import Playwright, BrowserContext
import pytest


@pytest.fixture()
def context(playwright: Playwright) -> Generator[BrowserContext, None, None]:
    path_to_extension = Path(__file__).parent.joinpath("my-extension")
    context = playwright.chromium.launch_persistent_context(
        "",
        channel="chromium",
        args=[
            f"--disable-extensions-except={path_to_extension}",
            f"--load-extension={path_to_extension}",
        ],
    )
    yield context
    context.close()


@pytest.fixture()
def extension_id(context) -> Generator[str, None, None]:
    # for manifest v2:
    # background = context.background_pages[0]
    # if not background:
    #     background = context.wait_for_event("backgroundpage")

    # for manifest v3:
    background = context.service_workers[0]
    if not background:
        background = context.wait_for_event("serviceworker")

    extension_id = background.url.split("/")[2]
    yield extension_id

----------------------------------------

TITLE: Configuring HTML Reporter with External Attachments in Playwright
DESCRIPTION: Shows how to set up the HTML reporter with an external attachments base URL in the Playwright configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [['html', { attachmentsBaseURL: 'https://external-storage.com/' }]],
});

----------------------------------------

TITLE: Testing Element Status with LocatorAssertions
DESCRIPTION: Basic example showing how to assert element status after clicking a button

LANGUAGE: javascript
CODE:
import { test, expect } from '@playwright/test';

test('status becomes submitted', async ({ page }) => {
  // ...
  await page.getByRole('button').click();
  await expect(page.locator('.status')).toHaveText('Submitted');
});

----------------------------------------

TITLE: Opening Trace in Java
DESCRIPTION: Shows how to open a saved trace using the Playwright CLI in Java. It uses Maven to execute the Playwright CLI and open the trace file.

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="show-trace trace.zip"

----------------------------------------

TITLE: Installing and Building Playwright for Bidi Testing
DESCRIPTION: Series of commands to clone Playwright repository, build the project, install Chromium, and run Bidi tests specifically for Firefox beta.

LANGUAGE: sh
CODE:
git clone https://github.com/microsoft/playwright.git
cd playwright
npm run build # call `npm run watch` for watch mode
npx playwright install chromium
npm run biditest -- --project='bidi-firefox-beta-*'

----------------------------------------

TITLE: Emulating Color Scheme in Playwright Codegen
DESCRIPTION: Command to run Playwright's codegen tool with a specific color scheme.

LANGUAGE: bash
CODE:
npx playwright codegen --color-scheme=dark playwright.dev

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="codegen --color-scheme=dark playwright.dev"

LANGUAGE: bash
CODE:
playwright codegen --color-scheme=dark playwright.dev

LANGUAGE: bash
CODE:
pwsh bin/Debug/netX/playwright.ps1 codegen --color-scheme=dark playwright.dev

----------------------------------------

TITLE: Configuring JSON Reporter with Output File in Playwright
DESCRIPTION: Shows how to set up the JSON reporter with a custom output file in the Playwright configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [['json', { outputFile: 'results.json' }]],
});

----------------------------------------

TITLE: Testing Element Status in Java
DESCRIPTION: Example showing status assertion in Java after clicking a button

LANGUAGE: java
CODE:
// ...
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class TestLocator {
  // ...
  @Test
  void statusBecomesSubmitted() {
    // ...
    page.getByRole(AriaRole.BUTTON).click();
    assertThat(page.locator(".status")).hasText("Submitted");
  }
}

----------------------------------------

TITLE: Saving and Restoring Storage State with IndexedDB
DESCRIPTION: Example of saving and restoring storage state including IndexedDB content

LANGUAGE: csharp
CODE:
// Save storage state into the file. Make sure to include IndexedDB.
await context.StorageStateAsync(new()
{
    Path = "../../../playwright/.auth/state.json",
    IndexedDB = true
});

// Create a new context with the saved storage state.
var context = await browser.NewContextAsync(new()
{
    StorageStatePath = "../../../playwright/.auth/state.json"
});

----------------------------------------

TITLE: Security and Connection Methods - Playwright Response
DESCRIPTION: Methods for accessing security details and server connection information from responses.

LANGUAGE: javascript
CODE:
async Response.securityDetails() // Returns security information object
async Response.serverAddr() // Returns {ipAddress: string, port: int}

----------------------------------------

TITLE: Loading Authenticated State in Playwright Codegen
DESCRIPTION: Command to run Playwright's codegen tool and load a previously saved authenticated state.

LANGUAGE: bash
CODE:
npx playwright codegen --load-storage=auth.json github.com/microsoft/playwright

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="codegen --load-storage=auth.json github.com/microsoft/playwright"

LANGUAGE: bash
CODE:
playwright codegen --load-storage=auth.json github.com/microsoft/playwright

LANGUAGE: bash
CODE:
pwsh bin/Debug/netX/playwright.ps1 codegen --load-storage=auth.json github.com/microsoft/playwright

----------------------------------------

TITLE: Assertions in Python
DESCRIPTION: Shows how to use Playwright's assertion API to verify page state and content.

LANGUAGE: python
CODE:
import re
from playwright.sync_api import expect

expect(page).to_have_title(re.compile("Playwright"))

----------------------------------------

TITLE: Handling AndroidSocket Data Event in JavaScript
DESCRIPTION: Event listener for when data is available to read from the AndroidSocket. The event provides a Buffer containing the received data.

LANGUAGE: js
CODE:
AndroidSocket.on('data', (buffer) => {
  // Process received data
});

----------------------------------------

TITLE: Implementing SearchPage in C#
DESCRIPTION: C# implementation of the SearchPage class, demonstrating how to create page object models in Playwright for .NET.

LANGUAGE: csharp
CODE:
using System.Threading.Tasks;
using Microsoft.Playwright;

namespace BigEcommerceApp.Tests.Models;

public class SearchPage
{
  private readonly IPage _page;
  private readonly ILocator _searchTermInput;

  public SearchPage(IPage page)
  {
    _page = page;
    _searchTermInput = page.Locator("[aria-label='Enter your search term']");
  }

  public async Task GotoAsync()
  {
    await _page.GotoAsync("https://bing.com");
  }

  public async Task SearchAsync(string text)
  {
    await _searchTermInput.FillAsync(text);
    await _searchTermInput.PressAsync("Enter");
  }
}

----------------------------------------

TITLE: Negative Assertion Using .not Modifier
DESCRIPTION: Shows how to assert that a value does not match an expected condition using the .not modifier.

LANGUAGE: javascript
CODE:
const value = 1;
expect(value).not.toBe(2);

----------------------------------------

TITLE: Viewing Supported Browsers with Playwright CLI
DESCRIPTION: List all supported browsers that can be installed using the Playwright CLI.

LANGUAGE: bash
CODE:
npx playwright install --help

LANGUAGE: bash
CODE:
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install --help"

LANGUAGE: bash
CODE:
playwright install --help

LANGUAGE: bash
CODE:
pwsh bin/Debug/netX/playwright.ps1 install --help

----------------------------------------

TITLE: Navigation Examples in JavaScript and Python
DESCRIPTION: Shows how to perform page navigation in both JavaScript and Python using Playwright's goto method.

LANGUAGE: javascript
CODE:
await page.goto('https://playwright.dev/');

LANGUAGE: python
CODE:
page.goto("https://playwright.dev/")

----------------------------------------

TITLE: Using ElementHandle in Playwright
DESCRIPTION: Shows how to create an ElementHandle, assert its bounding box, and check its attributes. Note that using Locator objects is generally preferred over ElementHandle.

LANGUAGE: javascript
CODE:
// Get the element handle
const elementHandle = page.waitForSelector('#box');

// Assert bounding box for the element
const boundingBox = await elementHandle.boundingBox();
expect(boundingBox.width).toBe(100);

// Assert attribute for the element
const classNames = await elementHandle.getAttribute('class');
expect(classNames.includes('highlighted')).toBeTruthy();

LANGUAGE: java
CODE:
// Get the element handle
JSHandle jsHandle = page.waitForSelector("#box");
ElementHandle elementHandle = jsHandle.asElement();

// Assert bounding box for the element
BoundingBox boundingBox = elementHandle.boundingBox();
assertEquals(100, boundingBox.width);

// Assert attribute for the element
String classNames = elementHandle.getAttribute("class");
assertTrue(classNames.contains("highlighted"));

LANGUAGE: python
CODE:
# Get the element handle
element_handle = page.wait_for_selector('#box')

# Assert bounding box for the element
bounding_box = await element_handle.bounding_box()
assert bounding_box.width == 100

# Assert attribute for the element
class_names = await element_handle.get_attribute('class')
assert 'highlighted' in class_names

LANGUAGE: csharp
CODE:
// Get the element handle
var jsHandle = await page.WaitForSelectorAsync("#box");
var elementHandle = jsHandle as ElementHandle;

// Assert bounding box for the element
var boundingBox = await elementHandle.BoundingBoxAsync();
Assert.AreEqual(100, boundingBox.Width);

// Assert attribute for the element
var classNames = await elementHandle.GetAttributeAsync("class");
Assert.True(classNames.Contains("highlighted"));

----------------------------------------

TITLE: Implementing SearchPage in Python (Async)
DESCRIPTION: Asynchronous Python implementation of the SearchPage class for performing search operations on a web page.

LANGUAGE: python
CODE:
class SearchPage:
    def __init__(self, page):
        self.page = page
        self.search_term_input = page.locator('[aria-label="Enter your search term"]')

    async def navigate(self):
        await self.page.goto("https://bing.com")

    async def search(self, text):
        await self.search_term_input.fill(text)
        await self.search_term_input.press("Enter")

----------------------------------------

TITLE: Manual File Payload Upload in Java
DESCRIPTION: Shows how to manually construct and upload a file payload using FilePayload class.

LANGUAGE: java
CODE:
FilePayload filePayload = new FilePayload("members.csv", "text/csv",
  "Alice, 33\nJohn, 35\n".getBytes(StandardCharsets.UTF_8));
APIResponse response = context.request().post("https://example.com/upload_members",
  RequestOptions.create().setMultipart(FormData.create().set("membersList", filePayload)));

----------------------------------------

TITLE: Testing Against Branded Browsers in Python
DESCRIPTION: Execute Playwright tests on specific branded browsers like Microsoft Edge.

LANGUAGE: bash
CODE:
pytest test_login.py --browser-channel msedge

----------------------------------------

TITLE: Transparent Service Worker Implementation
DESCRIPTION: Example of a basic Service Worker that acts as a transparent proxy, simply executing and forwarding requests from the page.

LANGUAGE: javascript
CODE:
self.addEventListener('fetch', event => {
  // actually make the request
  const responsePromise = fetch(event.request);
  // send it back to the page
  event.respondWith(responsePromise);
});

self.addEventListener('activate', event => {
  event.waitUntil(clients.claim());
});

----------------------------------------

TITLE: Evaluating JavaScript in Browser Context with Playwright
DESCRIPTION: This TypeScript code demonstrates how to use Playwright to navigate to example.com and execute a script in the page context to retrieve page dimensions and device scale factor.

LANGUAGE: TypeScript
CODE:
import { test } from '@playwright/test';

test('Evaluate in browser context', async ({ page }) => {
  await page.goto('https://www.example.com/');
  const dimensions = await page.evaluate(() => {
    return {
      width: document.documentElement.clientWidth,
      height: document.documentElement.clientHeight,
      deviceScaleFactor: window.devicePixelRatio
    }
  });
  console.log(dimensions);
});

----------------------------------------

TITLE: Implementing SearchPage in Java
DESCRIPTION: Creates a SearchPage class in Java to encapsulate operations on a search page, including navigation and performing searches.

LANGUAGE: java
CODE:
package models;

import com.microsoft.playwright;

public class SearchPage {
  private final Page page;
  private final Locator searchTermInput;

  public SearchPage(Page page) {
    this.page = page;
    this.searchTermInput = page.locator("[aria-label='Enter your search term']");
  }

  public void navigate() {
    page.navigate("https://bing.com");
  }

  public void search(String text) {
    searchTermInput.fill(text);
    searchTermInput.press("Enter");
  }
}

----------------------------------------

TITLE: Launching Specific Browsers in Java
DESCRIPTION: Launch and use specific browsers in Playwright Java tests.

LANGUAGE: java
CODE:
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      // Launch chromium, firefox or webkit.
      Browser browser = playwright.chromium().launch();
      Page page = browser.newPage();
      // ...
    }
  }
}

----------------------------------------

TITLE: Basic Navigation to URL in Playwright
DESCRIPTION: Demonstrates how to navigate to a URL using Playwright in different programming languages. The code waits for the page's load event to fire after navigation.

LANGUAGE: javascript
CODE:
// Navigate the page
await page.goto('https://example.com');

LANGUAGE: java
CODE:
// Navigate the page
page.navigate("https://example.com");

LANGUAGE: python
CODE:
# Navigate the page
await page.goto("https://example.com")

LANGUAGE: csharp
CODE:
// Navigate the page
await page.GotoAsync("https://example.com");

----------------------------------------

TITLE: Linting Vue Project Files
DESCRIPTION: Runs the linter to check and fix code style issues in the project files.

LANGUAGE: bash
CODE:
npm run lint

----------------------------------------

TITLE: Creating Battery API Mock in Playwright
DESCRIPTION: This snippet shows how to create a mock for the Battery API using Page.addInitScript in Playwright. It sets up a mock battery object with predefined values and overrides the navigator.getBattery method.

LANGUAGE: javascript
CODE:
await page.addInitScript(() => {
  const mockBattery = {
    level: 0.75,
    charging: true,
    chargingTime: 1800,
    dischargingTime: Infinity,
    addEventListener: () => { }
  };
  // Override the method to always return mock battery info.
  window.navigator.getBattery = async () => mockBattery;
});

----------------------------------------

TITLE: Configuring Browser Channel in Playwright Config
DESCRIPTION: Example of specifying a browser channel for tests in the Playwright configuration file. This snippet demonstrates how to use the Microsoft Edge browser channel.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  projects: [
    {
      name: 'Microsoft Edge',
      use: {
        ...devices['Desktop Edge'],
        channel: 'msedge'
      },
    },
  ]
});

----------------------------------------

TITLE: Launching Browsers Based on Environment Variables in Java
DESCRIPTION: Launch different browsers in Java based on environment variables.

LANGUAGE: java
CODE:
import com.microsoft.playwright.*;

public class Example {
  public static void main(String[] args) {
    try (Playwright playwright = Playwright.create()) {
      Browser browser = null;
      String browserName = System.getenv("BROWSER");
      if (browserName.equals("chromium")) {
        browser = playwright.chromium().launch();
      } else if (browserName.equals("firefox")) {
        browser = playwright.firefox().launch();
      } else if (browserName.equals("webkit")) {
        browser = playwright.webkit().launch();
      }
      Page page = browser.newPage();
      // ...
    }
  }
}

----------------------------------------

TITLE: Testing Chrome Extensions with Playwright (JavaScript)
DESCRIPTION: This snippet shows how to use the previously defined fixtures to test Chrome extensions in Playwright. It includes examples of testing the extension's effect on a web page and accessing the extension's popup page.

LANGUAGE: javascript
CODE:
import { test, expect } from './fixtures';

test('example test', async ({ page }) => {
  await page.goto('https://example.com');
  await expect(page.locator('body')).toHaveText('Changed by my-extension');
});

test('popup page', async ({ page, extensionId }) => {
  await page.goto(`chrome-extension://${extensionId}/popup.html`);
  await expect(page.locator('body')).toHaveText('my-extension popup');
});

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install all project dependencies using npm package manager.

LANGUAGE: sh
CODE:
npm install

----------------------------------------

TITLE: Configuring API Request Context for GitHub API
DESCRIPTION: Sets up an API request context with authentication headers and base URL for GitHub API testing. Uses pytest fixtures to manage the request context lifecycle.

LANGUAGE: python
CODE:
import os
from typing import Generator

import pytest
from playwright.sync_api import Playwright, APIRequestContext

GITHUB_API_TOKEN = os.getenv("GITHUB_API_TOKEN")
assert GITHUB_API_TOKEN, "GITHUB_API_TOKEN is not set"

@pytest.fixture(scope="session")
def api_request_context(
    playwright: Playwright,
) -> Generator[APIRequestContext, None, None]:
    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"token {GITHUB_API_TOKEN}",
    }
    request_context = playwright.request.new_context(
        base_url="https://api.github.com", extra_http_headers=headers
    )
    yield request_context
    request_context.dispose()

----------------------------------------

TITLE: Handling Console Messages in Python (Async)
DESCRIPTION: Examples of asynchronously listening for console messages, handling errors, and accessing console message arguments in Python using Playwright.

LANGUAGE: python
CODE:
# Listen for all console logs
page.on("console", lambda msg: print(msg.text))

# Listen for all console events and handle errors
page.on("console", lambda msg: print(f"error: {msg.text}") if msg.type == "error" else None)

# Get the next console log
async with page.expect_console_message() as msg_info:
    # Issue console.log inside the page
    await page.evaluate("console.log('hello', 42, { foo: 'bar' })")
msg = await msg_info.value

# Deconstruct print arguments
await msg.args[0].json_value() # hello
await msg.args[1].json_value() # 42

----------------------------------------

TITLE: Reusing Authentication State in Java with Playwright
DESCRIPTION: Demonstrates how to retrieve and reuse authentication state between APIRequestContext and BrowserContext in Playwright for Java.

LANGUAGE: java
CODE:
APIRequestContext requestContext = playwright.request().newContext(
  new APIRequest.NewContextOptions().setHttpCredentials("user", "passwd"));
requestContext.get("https://api.example.com/login");
// Save storage state into a variable.
String state = requestContext.storageState();

// Create a new context with the saved storage state.
BrowserContext context = browser.newContext(new Browser.NewContextOptions().setStorageState(state));

----------------------------------------

TITLE: Asserting Page URL in Java
DESCRIPTION: Shows how to use the PageAssertions class to assert the page URL in a Playwright test using Java.

LANGUAGE: java
CODE:
// ...
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class TestPage {
  // ...
  @Test
  void navigatesToLoginPage() {
    // ...
    page.getByText("Sign in").click();
    assertThat(page).hasURL(Pattern.compile(".*/login"));
  }
}

----------------------------------------

TITLE: Deploying Svelte App to Vercel
DESCRIPTION: Commands to install Vercel CLI globally and deploy the Svelte application to Vercel hosting platform.

LANGUAGE: bash
CODE:
npm install -g vercel
cd public
vercel deploy --name my-project

----------------------------------------

TITLE: Preparing Server State via API Calls in Java with Playwright
DESCRIPTION: Demonstrates how to create a new issue via API and then navigate to the issues list to verify its presence using Playwright's LocatorAssertions.

LANGUAGE: java
CODE:
public class TestGitHubAPI {
  @Test
  void lastCreatedIssueShouldBeFirstInTheList() {
    Map<String, String> data = new HashMap<>();
    data.put("title", "[Feature] request 1");
    data.put("body", "Feature description");
    APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",
      RequestOptions.create().setData(data));
    assertTrue(newIssue.ok());

    page.navigate("https://github.com/" + USER + "/" + REPO + "/issues");
    Locator firstIssue = page.locator("a[data-hovercard-type='issue']").first();
    assertThat(firstIssue).hasText("[Feature] request 1");
  }
}

----------------------------------------

TITLE: Recording Traces Manually in Python (Async)
DESCRIPTION: Demonstrates how to manually start and stop tracing in Python using the async API. It includes creating a browser context, starting tracing, navigating to a page, and saving the trace.

LANGUAGE: python
CODE:
browser = await chromium.launch()
context = await browser.new_context()

# Start tracing before creating / navigating a page.
await context.tracing.start(screenshots=True, snapshots=True, sources=True)

page = await context.new_page()
await page.goto("https://playwright.dev")

# Stop tracing and export it into a zip archive.
await context.tracing.stop(path = "trace.zip")

----------------------------------------

TITLE: Targeted Component Accessibility Testing
DESCRIPTION: Shows how to scan specific page elements for accessibility issues after user interaction. Includes waiting for dynamic content and constraining the scan to specific DOM elements.

LANGUAGE: java
CODE:
public class HomepageTests {
  @Test
  void navigationMenuFlyoutShouldNotHaveAutomaticallyDetectableAccessibilityViolations() throws Exception {
    page.navigate("https://your-site.com/");

    page.locator("button[aria-label=\"Navigation Menu\"]").click();

    page.locator("#navigation-menu-flyout").waitFor();

    AxeResults accessibilityScanResults = new AxeBuilder(page)
      .include(Arrays.asList("#navigation-menu-flyout"))
      .analyze();

    assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());
  }
}

----------------------------------------

TITLE: File Upload with Multipart Form Data in Java
DESCRIPTION: Demonstrates how to upload files using multipart/form-data encoding with a file path.

LANGUAGE: java
CODE:
Path path = Paths.get("members.csv");
APIResponse response = context.request().post("https://example.com/upload_members",
  RequestOptions.create().setMultipart(FormData.create().set("membersList", path)));

----------------------------------------

TITLE: Removing TypeScript Setup Script
DESCRIPTION: Command to remove the TypeScript setup script if not needed in the Svelte project.

LANGUAGE: bash
CODE:
rm scripts/setupTypeScript.js

----------------------------------------

TITLE: React Production License Header
DESCRIPTION: License header for the react.production.min.js file, indicating copyright ownership by Facebook and affiliates, and specifying the MIT license.

LANGUAGE: JavaScript
CODE:
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

----------------------------------------

TITLE: Registering Custom Selector Engine in C#
DESCRIPTION: This snippet demonstrates how to create and register a custom tag name selector engine in C# using Playwright. It defines the engine script and shows how to use the custom selector.

LANGUAGE: csharp
CODE:
// Register the engine. Selectors will be prefixed with "tag=".
// The script is evaluated in the page context.
await playwright.Selectors.Register("tag", new() {
  Script = @"
  // Must evaluate to a selector engine instance.
  {
    // Returns the first element matching given selector in the root's subtree.
    query(root, selector) {
      return root.querySelector(selector);
    },

    // Returns all elements matching given selector in the root's subtree.
    queryAll(root, selector) {
      return Array.from(root.querySelectorAll(selector));
    }
  }"
});

// Now we can use "tag=" selectors.
await page.Locator("tag=button").ClickAsync();

// We can combine it with built-in locators.
await page.Locator("tag=div").GetByText("Click me").ClickAsync();

----------------------------------------

TITLE: Reusable Accessibility Test Fixture
DESCRIPTION: Demonstrates creating a reusable test fixture for sharing common Axe-Core configuration across multiple tests. Includes pre-configured rule tags and element exclusions.

LANGUAGE: java
CODE:
class AxeTestFixtures extends TestFixtures {
 AxeBuilder makeAxeBuilder() {
   return new AxeBuilder(page)
     .withTags(new String[]{"wcag2a", "wcag2aa", "wcag21a", "wcag21aa"})
     .exclude("#commonly-reused-element-with-known-issue");
 }
}

----------------------------------------

TITLE: Describing Playwright-Core Package in Markdown
DESCRIPTION: A simple markdown snippet that introduces the playwright-core package and its relationship to the full Playwright library. It mentions that this is a no-browser flavor of Playwright.

LANGUAGE: markdown
CODE:
# playwright-core

This package contains the no-browser flavor of [Playwright](http://github.com/microsoft/playwright).

----------------------------------------

TITLE: Setting Up TypeScript for Svelte Project
DESCRIPTION: Command to run the provided script for setting up a TypeScript development environment in the Svelte project.

LANGUAGE: bash
CODE:
node scripts/setupTypeScript.js

----------------------------------------

TITLE: React DOM Production License Header
DESCRIPTION: License header for the react-dom.production.min.js file, indicating copyright ownership by Facebook and affiliates, and specifying the MIT license.

LANGUAGE: JavaScript
CODE:
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

----------------------------------------

TITLE: Multi-chunk Tracing Example
DESCRIPTION: Shows how to record multiple trace chunks within the same browser context, allowing separate trace files for different sets of actions.

LANGUAGE: javascript
CODE:
await context.tracing.start({ screenshots: true, snapshots: true });
const page = await context.newPage();
await page.goto('https://playwright.dev');

await context.tracing.startChunk();
await page.getByText('Get Started').click();
await context.tracing.stopChunk({ path: 'trace1.zip' });

await context.tracing.startChunk();
await page.goto('http://example.com');
await context.tracing.stopChunk({ path: 'trace2.zip' });

LANGUAGE: python
CODE:
await context.tracing.start(screenshots=True, snapshots=True)
page = await context.new_page()
await page.goto("https://playwright.dev")

await context.tracing.start_chunk()
await page.get_by_text("Get Started").click()
await context.tracing.stop_chunk(path = "trace1.zip")

await context.tracing.start_chunk()
await page.goto("http://example.com")
await context.tracing.stop_chunk(path = "trace2.zip")

----------------------------------------

TITLE: WebView2 Test Example in Python
DESCRIPTION: Demonstrates a simple test case for WebView2 using Playwright in Python.

LANGUAGE: python
CODE:
from playwright.sync_api import Page, expect


def test_webview2(page: Page):
    page.goto("https://playwright.dev")
    get_started = page.get_by_text("Get Started")
    expect(get_started).to_be_visible()

----------------------------------------

TITLE: Generating Server SSL Certificate
DESCRIPTION: Creates a self-signed server certificate for localhost and local.playwright domains. Generates both private key and certificate files with a 365-day validity period using RSA 4096-bit encryption.

LANGUAGE: bash
CODE:
openssl req \
	-x509 \
	-newkey rsa:4096 \
	-keyout server/server_key.pem \
	-out server/server_cert.pem \
	-nodes \
	-days 365 \
	-subj "/CN=localhost/O=Client\ Certificate\ Demo" \
	-addext "subjectAltName=DNS:localhost,DNS:local.playwright"

----------------------------------------

TITLE: Serving Modernizr Test Page in Bash
DESCRIPTION: Command to serve the Modernizr test page from a remote HTTPS origin for updating test expectations. This is necessary because localhost results may differ from remote server results.

LANGUAGE: bash
CODE:
serve tests/assets/modernizr/index.html

----------------------------------------

TITLE: Test Isolation Example in Python
DESCRIPTION: Demonstrates test isolation using Playwright's page fixture and browser contexts.

LANGUAGE: python
CODE:
from playwright.sync_api import Page

def test_example_test(page: Page):
  pass
  # "page" belongs to an isolated BrowserContext, created for this specific test.

def test_another_test(page: Page):
  pass
  # "page" in this second test is completely isolated from the first test.

----------------------------------------

TITLE: Describing Playwright WebKit Package in Markdown
DESCRIPTION: This markdown snippet introduces the playwright-webkit package, explains its relation to the main Playwright library, and provides a recommendation for end-to-end testing using @playwright/test.

LANGUAGE: markdown
CODE:
# playwright-webkit

This package contains the [WebKit](https://www.webkit.org/) flavor of the [Playwright](http://github.com/microsoft/playwright) library. If you want to write end-to-end tests, we recommend [@playwright/test](https://playwright.dev/docs/intro).

----------------------------------------

TITLE: Configuring Default Robot Access Rules
DESCRIPTION: Basic robots.txt configuration that specifies access rules for web crawlers. The configuration allows all user agents (*) full access to the site with no disallowed paths.

LANGUAGE: robotstxt
CODE:
User-agent: *
Disallow:

----------------------------------------

TITLE: Recording Traces Manually in Python (Sync)
DESCRIPTION: Shows how to manually start and stop tracing in Python using the synchronous API. It covers creating a browser context, starting tracing, navigating to a page, and saving the trace.

LANGUAGE: python
CODE:
browser = chromium.launch()
context = browser.new_context()

# Start tracing before creating / navigating a page.
context.tracing.start(screenshots=True, snapshots=True, sources=True)

page = context.new_page()
page.goto("https://playwright.dev")

# Stop tracing and export it into a zip archive.
context.tracing.stop(path = "trace.zip")

----------------------------------------

TITLE: React JSX Runtime Production License Header
DESCRIPTION: License header for the react-jsx-runtime.production.min.js file, indicating copyright ownership by Facebook and affiliates, and specifying the MIT license.

LANGUAGE: JavaScript
CODE:
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

----------------------------------------

TITLE: Building Vue Project for Production
DESCRIPTION: Compiles and minifies the Vue project for production deployment.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Building PrintDeps.exe for Windows Dependency Analysis
DESCRIPTION: Instructions for building the PrintDeps tool using Visual Studio 2019. The output binary is committed to 'bin/PrintDeps.exe' and bundled in every npm package.

LANGUAGE: markdown
CODE:
## Build instructions

Open `PrintDeps.sln` solution in Visual Studio 2019 and build `x64/Release` configuration. We
currently commit output binary into `bin/PrintDeps.exe` and bundle it in every npm.

----------------------------------------

TITLE: Using Specific Browser Channels in Python
DESCRIPTION: Run Playwright tests with specific browser channels in Python.

LANGUAGE: bash
CODE:
pytest test_login.py --browser-channel chromium

----------------------------------------

TITLE: Azure CLI Login
DESCRIPTION: Command to authenticate with Azure CLI, which will open a popup for login.

LANGUAGE: bash
CODE:
az login

----------------------------------------

TITLE: Running Tests with Custom Browser Build
DESCRIPTION: Command to run tests using a custom browser executable by specifying the path through environment variables.

LANGUAGE: bash
CODE:
CRPATH=<path-to-executable> npm run ctest

----------------------------------------

TITLE: Creating Svelte Project from Template using Degit
DESCRIPTION: Commands to create a new Svelte project using the sveltejs/template and degit. This sets up the initial project structure.

LANGUAGE: bash
CODE:
npx degit sveltejs/template svelte-app
cd svelte-app

----------------------------------------

TITLE: Checking Node.js Version for Playwright Development
DESCRIPTION: Verifies that Node.js version 20 or later is installed, which is required for Playwright development.

LANGUAGE: bash
CODE:
node --version

----------------------------------------

TITLE: Setting Up Playwright Development Environment
DESCRIPTION: Commands to clone the repository, install dependencies, and start the development build process with continuous watching.

LANGUAGE: bash
CODE:
git clone https://github.com/microsoft/playwright
cd playwright
npm ci
npm run watch
npx playwright install

----------------------------------------

TITLE: Configuring Default Web Crawler Access in robots.txt
DESCRIPTION: Basic robots.txt configuration that allows all user agents full access to the website. The file uses standard robots.txt syntax to define crawler permissions with no restrictions.

LANGUAGE: robotstxt
CODE:
User-agent: *
Disallow:

----------------------------------------

TITLE: Specifying Black Package Version for Playwright
DESCRIPTION: This line defines the required version of the 'black' package for the Playwright project. It specifies that version 24.3.0 of black is needed.

LANGUAGE: plaintext
CODE:
black==24.3.0

----------------------------------------

TITLE: Configuring Video Size in Test Config
DESCRIPTION: Example of setting custom video dimensions in the Playwright test configuration file.

LANGUAGE: javascript
CODE:
import { defineConfig } from '@playwright/test';
export default defineConfig({
  use: {
    video: {
      mode: 'on-first-retry',
      size: { width: 640, height: 480 }
    }
  },
});

----------------------------------------

TITLE: Generating Trusted Client Certificate
DESCRIPTION: Creates a server-signed client certificate including generation of private key, certificate signing request, and final certificate. Also exports to PFX format with password protection for client use.

LANGUAGE: bash
CODE:
mkdir -p client/trusted
# generate server-signed (valid) certifcate
openssl req \
	-newkey rsa:4096 \
	-keyout client/trusted/key.pem \
	-out client/trusted/csr.pem \
	-nodes \
	-days 365 \
	-subj "/CN=Alice"

# sign with server_cert.pem
openssl x509 \
	-req \
	-in client/trusted/csr.pem \
	-CA server/server_cert.pem \
	-CAkey server/server_key.pem \
	-out client/trusted/cert.pem \
	-set_serial 01 \
	-days 365
# create pfx
openssl pkcs12 -export -out client/trusted/cert.pfx -inkey client/trusted/key.pem -in client/trusted/cert.pem -passout pass:secure

----------------------------------------

TITLE: Installing Playwright Test Runner manually
DESCRIPTION: This snippet shows how to manually install Playwright Test by adding the dependency and installing supported browsers using npm and npx commands.

LANGUAGE: Shell
CODE:
npm i -D @playwright/test
# install supported browsers
npx playwright install

----------------------------------------

TITLE: Test Hooks Implementation
DESCRIPTION: Example showing how to use test hooks (SetUp/TearDown) with Playwright tests for environment setup and cleanup.

LANGUAGE: csharp
CODE:
using System.Threading.Tasks;
using Microsoft.Playwright.NUnit;
using NUnit.Framework;

namespace PlaywrightTests;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class ExampleTest : PageTest
{
    [Test]
    public async Task MainNavigation()
    {
        // Assertions use the expect API.
        await Expect(Page).ToHaveURLAsync("https://playwright.dev/");
    }

    [SetUp]
    public async Task SetUp()
    {
        await Page.GotoAsync("https://playwright.dev");
    }
}

----------------------------------------

TITLE: Configuring Custom Reporter in Playwright Config
DESCRIPTION: Example of how to configure and use a custom reporter in the Playwright configuration file.

LANGUAGE: typescript
CODE:
import { defineConfig } from '@playwright/test';

export default defineConfig({
  reporter: [['./my-awesome-reporter.ts', { customOption: 'some value' }]],
});

----------------------------------------

TITLE: Running React Tests with npm
DESCRIPTION: Launches the test runner in interactive watch mode, allowing developers to run and monitor tests for the React application.

LANGUAGE: bash
CODE:
npm test