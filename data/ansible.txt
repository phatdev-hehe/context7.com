TITLE: Basic Ansible Playbook Structure in YAML
DESCRIPTION: Example showing two plays targeting web and database servers with specific tasks for each. Demonstrates how to update Apache on web servers and PostgreSQL on database servers.

LANGUAGE: yaml
CODE:
---
- name: Update web servers
  hosts: webservers
  remote_user: root

  tasks:
  - name: Ensure apache is at the latest version
    ansible.builtin.yum:
      name: httpd
      state: latest

  - name: Write the apache config file
    ansible.builtin.template:
      src: /srv/httpd.j2
      dest: /etc/httpd.conf

- name: Update db servers
  hosts: databases
  remote_user: root

  tasks:
  - name: Ensure postgresql is at the latest version
    ansible.builtin.yum:
      name: postgresql
      state: latest

  - name: Ensure that postgresql is started
    ansible.builtin.service:
      name: postgresql
      state: started

----------------------------------------

TITLE: Error Handling with Rescue Block in Ansible YAML
DESCRIPTION: Shows how to implement error handling using a rescue block that executes when tasks in the main block fail. The rescue block provides error recovery functionality.

LANGUAGE: YAML
CODE:
tasks:
  - name: Handle the error
    block:
      - name: Print a message
        ansible.builtin.debug:
          msg: 'I execute normally'

      - name: Force a failure
        ansible.builtin.command: /bin/false

      - name: Never print this
        ansible.builtin.debug:
          msg: 'I never execute, due to the above task failing, :-('
    rescue:
      - name: Print when errors
        ansible.builtin.debug:
          msg: 'I caught an error, can do stuff here to fix it, :-)'

----------------------------------------

TITLE: Referencing a Variable in a Playbook Task
DESCRIPTION: Example of using Jinja2 syntax to reference a variable within an Ansible task.

LANGUAGE: yaml
CODE:
ansible.builtin.template:
  src: foo.cfg.j2
  dest: '{{ remote_install_path }}/foo.cfg'

----------------------------------------

TITLE: Creating a Basic Ansible Playbook in YAML
DESCRIPTION: This snippet shows the structure of a simple Ansible playbook that pings hosts and prints a "Hello world" message. It demonstrates the use of plays, tasks, and modules within a playbook.

LANGUAGE: yaml
CODE:
---
- name: My first play
  hosts: all
  tasks:
   - name: Ping my hosts
     ansible.builtin.ping:

   - name: Print message
     ansible.builtin.debug:
       msg: Hello world

----------------------------------------

TITLE: Registering a Variable from Task Output
DESCRIPTION: Example of using the 'register' keyword to store task output in a variable.

LANGUAGE: yaml
CODE:
- name: Run a shell command and register its output as a variable
  ansible.builtin.shell: /usr/bin/foo
  register: foo_result
  ignore_errors: true

- name: Run a shell command using output of the previous task
  ansible.builtin.shell: /usr/bin/bar
  when: foo_result.rc == 5

----------------------------------------

TITLE: Printing all available Ansible facts
DESCRIPTION: A task that prints all available Ansible facts using the ansible.builtin.debug module.

LANGUAGE: yaml
CODE:
- name: Print all available facts
  ansible.builtin.debug:
    var: ansible_facts

----------------------------------------

TITLE: Installing Ansible using pip
DESCRIPTION: This command installs Ansible using the pip package manager. It's the first step in setting up an Ansible environment.

LANGUAGE: bash
CODE:
pip install ansible

----------------------------------------

TITLE: Installing Ansible with pipx
DESCRIPTION: Commands to install the full Ansible package or minimal ansible-core using pipx package manager.

LANGUAGE: console
CODE:
$ pipx install --include-deps ansible

$ pipx install ansible-core

$ pipx install ansible-core==2.12.3

----------------------------------------

TITLE: YAML example for Ansible module documentation
DESCRIPTION: An example of the YAML format used in the DOCUMENTATION block of Ansible modules.

LANGUAGE: yaml
CODE:
EXAMPLES = r'''
- name: Ensure foo is installed
  namespace.collection.modulename:
    name: foo
    state: present
'''

----------------------------------------

TITLE: Handling External Library Dependencies in Ansible Modules
DESCRIPTION: Pattern for safely importing external libraries in Ansible modules with proper error handling and user feedback. Demonstrates try/except block with proper error messaging.

LANGUAGE: python
CODE:
import traceback

from ansible.module_utils.basic import missing_required_lib

LIB_IMP_ERR = None
try:
    import foo
    HAS_LIB = True
except:
    HAS_LIB = False
    LIB_IMP_ERR = traceback.format_exc()

----------------------------------------

TITLE: Executing Ansible Ad Hoc Command
DESCRIPTION: This snippet shows the basic syntax for running an Ansible ad hoc command. It includes placeholders for the pattern (target hosts), module, and module options.

LANGUAGE: bash
CODE:
$ ansible [pattern] -m [module] -a "[module options]"

----------------------------------------

TITLE: Installing Windows Updates - YAML
DESCRIPTION: Example of installing Windows critical and security updates using win_updates module, with automatic reboot handling.

LANGUAGE: yaml
CODE:
- name: Install all critical and security updates
  win_updates:
    category_names:
    - CriticalUpdates
    - SecurityUpdates
    state: installed
  register: update_result

- name: Reboot host if required
  win_reboot:
  when: update_result.reboot_required

----------------------------------------

TITLE: Referencing Collection Content Using FQCN in Ansible Playbook (YAML)
DESCRIPTION: This snippet demonstrates how to reference collection content using its Fully Qualified Collection Name (FQCN) in an Ansible playbook. It shows calling a module from a collection.

LANGUAGE: yaml
CODE:
- name: Reference a collection content using its FQCN
  hosts: all
  tasks:

    - name: Call a module using FQCN
      my_namespace.my_collection.my_module:
        option1: value

----------------------------------------

TITLE: Implementing Exponential Backoff in Ansible
DESCRIPTION: Creates an exponential backoff retry mechanism using wait_for_connection with loop and power function mapping.

LANGUAGE: yaml
CODE:
- name: try wait_for_connection up to 10 times with exponential delay
  ansible.builtin.wait_for_connection:
    delay: '{{ item | int }}'
    timeout: 1
  loop: '{{ range(1, 11) | map("pow", 2) }}'
  loop_control:
    extended: true
  ignore_errors: "{{ not ansible_loop.last }}"
  register: result
  when: result is not defined or result is failed

----------------------------------------

TITLE: Setting up IIS Website with DSC in Ansible
DESCRIPTION: Comprehensive example of how to set up an IIS website using DSC in Ansible.

LANGUAGE: yaml
CODE:
- name: Install xWebAdministration module
  win_psmodule:
    name: xWebAdministration
    state: present

- name: Install IIS features that are required
  win_dsc:
    resource_name: WindowsFeature
    Name: '{{ item }}'
    Ensure: Present
  loop:
  - Web-Server
  - Web-Asp-Net45

- name: Setup web content
  win_dsc:
    resource_name: File
    DestinationPath: C:\inetpub\IISSite\index.html
    Type: File
    Contents: |
      <html>
      <head><title>IIS Site</title></head>
      <body>This is the body</body>
      </html>
    Ensure: present

- name: Create new website
  win_dsc:
    resource_name: xWebsite
    Name: NewIISSite
    State: Started
    PhysicalPath: C:\inetpub\IISSite\index.html
    BindingInfo:
    - Protocol: https
      Port: 8443
      CertificateStoreName: My
      CertificateThumbprint: C676A89018C4D5902353545343634F35E6B3A659
      HostName: DSCTest
      IPAddress: '*'
      SSLFlags: 1
    - Protocol: http
      Port: 8080
      IPAddress: '*'
    AuthenticationInfo:
      Anonymous: false
      Basic: true
      Digest: false
      Windows: true

----------------------------------------

TITLE: Iterating over a list of hashes with loop
DESCRIPTION: Example of using loop to iterate over a list of hashes to add users with different group assignments.

LANGUAGE: yaml+jinja
CODE:
- name: Add several users
  ansible.builtin.user:
    name: "{{ item.name }}"
    state: present
    groups: "{{ item.groups }}"
  loop:
    - { name: 'testuser1', groups: 'wheel' }
    - { name: 'testuser2', groups: 'root' }

----------------------------------------

TITLE: Verifying Python Module with Local Arguments
DESCRIPTION: Example of testing an Ansible module locally using a JSON arguments file to pass parameters directly to the module, bypassing the Ansible execution framework.

LANGUAGE: json
CODE:
{
    "ANSIBLE_MODULE_ARGS": {
        "name": "hello",
        "new": true
    }
}

----------------------------------------

TITLE: Basic YAML List Structure
DESCRIPTION: Demonstrates how to create a simple list in YAML format, showing proper indentation and list item notation using dashes.

LANGUAGE: yaml
CODE:
---
# A list of tasty fruits
- Apple
- Orange
- Strawberry
- Mango
...

----------------------------------------

TITLE: Rolling Update Playbook
DESCRIPTION: Playbook implementing zero-downtime rolling updates with pre-tasks for disabling monitoring and load balancing, and post-tasks for re-enabling services.

LANGUAGE: yaml
CODE:
- hosts: webservers
  user: root
  serial: 1

  pre_tasks:
  - name: disable nagios alerts for this host webserver service
    nagios:
      action: disable_alerts
      host: "{{ inventory_hostname }}"
      services: webserver
    delegate_to: "{{ item }}"
    loop: "{{ groups.monitoring }}"

  - name: disable the server in haproxy
    shell: echo "disable server myapplb/{{ inventory_hostname }}" | socat stdio /var/lib/haproxy/stats
    delegate_to: "{{ item }}"
    loop: "{{ groups.lbservers }}"

----------------------------------------

TITLE: Basic SELinux Conditional Task in Ansible
DESCRIPTION: Example of using a when clause to conditionally configure SELinux for MySQL based on SELinux status

LANGUAGE: yaml
CODE:
tasks:
  - name: Configure SELinux to start mysql on any port
    ansible.posix.seboolean:
      name: mysql_connect_any
      state: true
      persistent: true
    when: ansible_selinux.status == "enabled"

----------------------------------------

TITLE: Running Ansible Ad-hoc Commands
DESCRIPTION: Example of running an ad-hoc command to install a package using the apt module with privilege escalation.

LANGUAGE: bash
CODE:
ansible localhost -m ansible.builtin.apt -a "name=apache2 state=present" -b -K

----------------------------------------

TITLE: Ansible Role Directory Structure
DESCRIPTION: Shows the standard directory structure created for a new Ansible role, including directories for defaults, files, handlers, meta, tasks, templates, tests and vars.

LANGUAGE: text
CODE:
role_name/
    README.md
    defaults/
        main.yml
    files/
    handlers/
        main.yml
    meta/
        main.yml
    tasks/
        main.yml
    templates/
    tests/
        inventory
        test.yml
    vars/
        main.yml

----------------------------------------

TITLE: Error Handling in Python Plugins
DESCRIPTION: Example showing proper error handling in Ansible plugins using AnsibleError and to_native for string compatibility across Python versions.

LANGUAGE: python
CODE:
from ansible.module_utils.common.text.converters import to_native

try:
    cause_an_exception()
except Exception as e:
    raise AnsibleError('Something happened, this was original exception: %s' % to_native(e))

----------------------------------------

TITLE: Running an Ansible Playbook from Command Line
DESCRIPTION: This command demonstrates how to run an Ansible playbook using the ansible-playbook command. It specifies the inventory file and the playbook to be executed.

LANGUAGE: bash
CODE:
ansible-playbook -i inventory.ini playbook.yaml

----------------------------------------

TITLE: Using String Matching Tests in Ansible Playbooks
DESCRIPTION: Demonstrates how to use match, search, and regex tests for string comparison in Ansible tasks.

LANGUAGE: yaml
CODE:
vars:
  url: "https://example.com/users/foo/resources/bar"

tasks:
    - debug:
        msg: "matched pattern 1"
      when: url is match("https://example.com/users/.*/resources")

    - debug:
        msg: "matched pattern 2"
      when: url is search("users/.*/resources/.*")

    - debug:
        msg: "matched pattern 3"
      when: url is search("users")

    - debug:
        msg: "matched pattern 4"
      when: url is regex("example\.com/\w+/foo")

----------------------------------------

TITLE: Basic Module Defaults Example in Ansible YAML
DESCRIPTION: Demonstrates basic usage of module_defaults to set default file permissions for multiple file creation tasks.

LANGUAGE: yaml
CODE:
- hosts: localhost
  module_defaults:
    ansible.builtin.file:
      owner: root
      group: root
      mode: 0755
  tasks:
    - name: Create file1
      ansible.builtin.file:
        state: touch
        path: /tmp/file1

    - name: Create file2
      ansible.builtin.file:
        state: touch
        path: /tmp/file2

    - name: Create file3
      ansible.builtin.file:
        state: touch
        path: /tmp/file3

----------------------------------------

TITLE: Verifying Ansible Inventory
DESCRIPTION: This command uses ansible-inventory to list and verify the contents of the inventory file.

LANGUAGE: bash
CODE:
ansible-inventory -i inventory.ini --list

----------------------------------------

TITLE: Block with Always Section in Ansible YAML
DESCRIPTION: Demonstrates the use of an always section in a block that executes regardless of the success or failure of the main block tasks.

LANGUAGE: YAML
CODE:
tasks:
  - name: Always do X
    block:
      - name: Print a message
        ansible.builtin.debug:
          msg: 'I execute normally'

      - name: Force a failure
        ansible.builtin.command: /bin/false

      - name: Never print this
        ansible.builtin.debug:
          msg: 'I never execute :-('
    always:
      - name: Always do this
        ansible.builtin.debug:
          msg: "This always executes, :-)"

----------------------------------------

TITLE: Finding Mount Points in Ansible
DESCRIPTION: Uses selectattr to filter and find the appropriate mount point for a given path using Ansible mount facts.

LANGUAGE: yaml
CODE:
- hosts: all
  gather_facts: True
  vars:
     path: /var/lib/cache
  tasks:
  - name: The mount point for {{path}}, found using the Ansible mount facts, [-1] is the same as the 'last' filter
    ansible.builtin.debug:
     msg: "{{(ansible_facts.mounts | selectattr('mount', 'in', path) | list | sort(attribute='mount'))[-1]['mount']}}"

----------------------------------------

TITLE: Configuring Cisco Router DNS Playbook
DESCRIPTION: Basic playbook that configures hostname and DNS servers on Cisco IOS XE devices using ansible.netcommon.network_cli connection.

LANGUAGE: yaml
CODE:
---
- name: configure cisco routers
  hosts: routers
  connection: ansible.netcommon.network_cli
  gather_facts: no
  vars:
    dns: "8.8.8.8 8.8.4.4"

  tasks:
   - name: configure hostname
     cisco.ios.ios_config:
       lines: hostname {{ inventory_hostname }}

   - name: configure DNS
     cisco.ios.ios_config:
       lines: ip name-server {{dns}}

----------------------------------------

TITLE: Pinging Ansible Host Group
DESCRIPTION: This command pings the 'myhosts' group defined in the inventory file to check connectivity.

LANGUAGE: bash
CODE:
ansible myhosts -m ping -i inventory.ini

----------------------------------------

TITLE: Defining Inventory in Ansible
DESCRIPTION: This snippet demonstrates how to define inventory in Ansible using a plain text file. It shows how to group servers and list their hostnames.

LANGUAGE: text
CODE:
[webservers]
www1.example.com
www2.example.com

[dbservers]
db0.example.com
db1.example.com

----------------------------------------

TITLE: Ignoring Command Failures in Ansible
DESCRIPTION: Shows how to use ignore_errors to continue playbook execution even when a command fails.

LANGUAGE: yaml
CODE:
- name: Do not count this as a failure
  ansible.builtin.command: /bin/false
  ignore_errors: true

----------------------------------------

TITLE: Managing Ansible Galaxy Roles
DESCRIPTION: Commands for installing and listing Ansible Galaxy roles.

LANGUAGE: bash
CODE:
ansible-galaxy role install example.role

LANGUAGE: bash
CODE:
ansible-galaxy role list

----------------------------------------

TITLE: Handler Notifications with Loops in Ansible
DESCRIPTION: Shows how to use loops with handlers to trigger multiple dynamic notifications based on template changes.

LANGUAGE: yaml
CODE:
tasks:
- name: Template services
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: /etc/systemd/system/{{ item }}.service
  notify: Restart {{ item }}
  loop:
    - memcached
    - apache

handlers:
  - name: Restart memcached
    ansible.builtin.service:
      name: memcached
      state: restarted

  - name: Restart apache
    ansible.builtin.service:
      name: apache
      state: restarted

----------------------------------------

TITLE: Configuring Ansible for WinRM Authentication
DESCRIPTION: YAML configuration examples for different WinRM authentication methods in Ansible, including Basic, NTLM, Kerberos, and CredSSP.

LANGUAGE: yaml
CODE:
# Basic Authentication
ansible_user: LocalUsername
ansible_password: Password

# psrp
ansible_connection: psrp
ansible_psrp_auth: basic

# winrm
ansible_connection: winrm
ansible_winrm_transport: basic

LANGUAGE: yaml
CODE:
# NTLM Authentication
ansible_user: LocalUsername
ansible_password: Password

# psrp
ansible_connection: psrp
ansible_psrp_auth: negotiate  # or ntlm to only use NTLM

# winrm
ansible_connection: winrm
ansible_winrm_transport: ntlm

LANGUAGE: yaml
CODE:
# Kerberos Authentication
ansible_user: username@MY.DOMAIN.COM
ansible_password: Password

# psrp
ansible_connection: psrp
ansible_psrp_auth: negotiate  # or kerberos to disable ntlm fallback

# winrm
ansible_connection: winrm
ansible_winrm_transport: kerberos

LANGUAGE: yaml
CODE:
# CredSSP Authentication
ansible_user: Username
ansible_password: Password

# psrp
ansible_connection: psrp
ansible_psrp_auth: credssp

# winrm
ansible_connection: winrm
ansible_winrm_transport: credssp

----------------------------------------

TITLE: Ansible Playbook Host Pattern
DESCRIPTION: Basic YAML syntax for specifying target hosts in an Ansible playbook.

LANGUAGE: yaml
CODE:
- name: <play_name>
  hosts: <pattern>

----------------------------------------

TITLE: Defining Variables in a Playbook
DESCRIPTION: Example of defining variables directly within a playbook play.

LANGUAGE: yaml
CODE:
- hosts: webservers
  vars:
    http_port: 80

----------------------------------------

TITLE: Extended YAML Inventory with Multiple Groups
DESCRIPTION: YAML inventory example showing hosts in multiple groups including geographic and environment-based groups

LANGUAGE: yaml
CODE:
ungrouped:
  hosts:
    mail.example.com:
webservers:
  hosts:
    foo.example.com:
    bar.example.com:
dbservers:
  hosts:
    one.example.com:
    two.example.com:
    three.example.com:
east:
  hosts:
    foo.example.com:
    one.example.com:
    two.example.com:
west:
  hosts:
    bar.example.com:
    three.example.com:
prod:
  hosts:
    foo.example.com:
    one.example.com:
    two.example.com:
test:
  hosts:
    bar.example.com:
    three.example.com:

----------------------------------------

TITLE: Importing AnsibleModule from Basic Module Utils
DESCRIPTION: Example showing how to import the main AnsibleModule class from Ansible's basic module utilities. This is a common starting point for developing Ansible modules.

LANGUAGE: python
CODE:
from ansible.module_utils.basic import AnsibleModule

----------------------------------------

TITLE: Iterating over a dictionary with dict2items filter
DESCRIPTION: Example of using loop with the dict2items filter to iterate over a dictionary.

LANGUAGE: yaml+jinja
CODE:
- name: Using dict2items
  ansible.builtin.debug:
    msg: "{{ item.key }} - {{ item.value }}"
  loop: "{{ tag_data | dict2items }}"
  vars:
    tag_data:
      Environment: dev
      Application: payment

----------------------------------------

TITLE: Defining Group Variables in Ansible Inventory
DESCRIPTION: This example demonstrates how to set variables for all hosts in a group using YAML format in an Ansible inventory.

LANGUAGE: yaml
CODE:
webservers:
  hosts:
    alpha.example.org:
    beta.example.org:
    192.0.2.50:
  vars:
    http_port: 80

----------------------------------------

TITLE: Using File Lookup in Ansible YAML
DESCRIPTION: Demonstrates how to use the file lookup plugin to read the contents of a file into a variable.

LANGUAGE: YAML+Jinja
CODE:
vars:
  file_contents: "{{ lookup('file', 'path/to/file.txt') }}"

----------------------------------------

TITLE: Creating a Template for Ansible with Cobbler Variables
DESCRIPTION: This text snippet shows a Jinja2 template that uses variables populated by Cobbler through Ansible's dynamic inventory.

LANGUAGE: text
CODE:
# file: /srv/motd.j2
Welcome, I am templated with a value of a={{ a }}, b={{ b }}, and c={{ c }}

----------------------------------------

TITLE: Role Dependencies Example
DESCRIPTION: Demonstrates how to define role dependencies in the meta/main.yml file of a role.

LANGUAGE: yaml
CODE:
# roles/myapp/meta/main.yml
---
dependencies:
  - role: common
    vars:
      some_parameter: 3
  - role: apache
    vars:
      apache_port: 80
  - role: postgres
    vars:
      dbname: blarg
      other_parameter: 12

----------------------------------------

TITLE: Delegating Tasks in Ansible Playbook
DESCRIPTION: This snippet demonstrates how to delegate specific tasks to a different machine (127.0.0.1) while managing webservers. It shows the use of delegate_to for taking servers out of and adding them back to a load balancer pool.

LANGUAGE: yaml
CODE:
---
- hosts: webservers
  serial: 5

  tasks:
    - name: Take out of load balancer pool
      ansible.builtin.command: /usr/bin/take_out_of_pool {{ inventory_hostname }}
      delegate_to: 127.0.0.1

    - name: Actual steps would go here
      ansible.builtin.yum:
        name: acme-web-stack
        state: latest

    - name: Add back to load balancer pool
      ansible.builtin.command: /usr/bin/add_back_to_pool {{ inventory_hostname }}
      delegate_to: 127.0.0.1

----------------------------------------

TITLE: Rebooting Servers with Ansible Ad Hoc Command
DESCRIPTION: This example demonstrates how to reboot all servers in the 'atlanta' group using an Ansible ad hoc command. It uses the default command module to execute the reboot command.

LANGUAGE: bash
CODE:
$ ansible atlanta -a "/sbin/reboot"

----------------------------------------

TITLE: Creating and navigating to an Ansible project directory
DESCRIPTION: This command creates a new directory for the Ansible project and changes the current working directory to it. This helps organize the project files and makes it easier to manage source control.

LANGUAGE: bash
CODE:
mkdir ansible_quickstart && cd ansible_quickstart

----------------------------------------

TITLE: Accessing Ansible Module Documentation
DESCRIPTION: Commands for accessing module documentation and listing all available modules using ansible-doc tool.

LANGUAGE: shell
CODE:
ansible-doc yum
ansible-doc -l

----------------------------------------

TITLE: Installing Ansible with pip
DESCRIPTION: Commands to install Ansible packages using pip for the current user, including full package and minimal core versions.

LANGUAGE: console
CODE:
$ python3 -m pip install --user ansible

$ python3 -m pip install --user ansible-core

$ python3 -m pip install --user ansible-core==2.12.3

----------------------------------------

TITLE: Using YAML Anchors and Aliases in Ansible
DESCRIPTION: Demonstrates how to use YAML anchors and aliases to share variable values across different parts of an Ansible playbook.

LANGUAGE: yaml
CODE:
---
# ...
vars:
  app1:
    jvm: &jvm_opts
      opts: '-Xms1G -Xmx2G'
      port: 1000
      path: /usr/lib/app1
  app2:
    jvm:
      <<: *jvm_opts
      path: /usr/lib/app2
# ...

----------------------------------------

TITLE: Creating a Test Playbook for Localhost in YAML
DESCRIPTION: This snippet shows the content of a test_localhost.yml playbook file. It defines a simple play that runs on localhost and prints a message.

LANGUAGE: yaml
CODE:
---
- name: test localhost
  hosts: localhost
  gather_facts: true
  tasks:
    - name: Print message
      ansible.builtin.debug:
        msg: "Hello World"

----------------------------------------

TITLE: Encrypting String Variables with Ansible Vault
DESCRIPTION: Demonstrates how to encrypt a string variable using ansible-vault encrypt_string command with a password file.

LANGUAGE: bash
CODE:
ansible-vault encrypt_string --vault-password-file a_password_file 'foobar' --name 'the_secret'

----------------------------------------

TITLE: Basic vars_prompt Usage in Ansible Playbook
DESCRIPTION: Demonstrates a simple implementation of vars_prompt to ask for a username and password. The username is displayed, while the password input is hidden.

LANGUAGE: yaml
CODE:
---
- hosts: all
  vars_prompt:

    - name: username
      prompt: What is your username?
      private: false

    - name: password
      prompt: What is your password?

  tasks:

    - name: Print a message
      ansible.builtin.debug:
        msg: 'Logging in as {{ username }}'

----------------------------------------

TITLE: Structuring RST Documentation Headers for Ansible Concepts
DESCRIPTION: ReStructuredText (RST) formatting for the main documentation header and includes directive for Ansible basic concepts documentation.

LANGUAGE: rst
CODE:
.. _basic_concepts:

****************
Ansible concepts
****************

These concepts are common to all uses of Ansible.
You should understand them before using Ansible or reading the documentation.

.. contents::
   :local:

.. include:: /shared_snippets/basic_concepts.txt

----------------------------------------

TITLE: Rebooting Servers with Parallel Forks
DESCRIPTION: This command reboots servers in the 'atlanta' group using 10 parallel forks, which can speed up execution for larger groups of hosts.

LANGUAGE: bash
CODE:
$ ansible atlanta -a "/sbin/reboot" -f 10

----------------------------------------

TITLE: Extended Network Playbook
DESCRIPTION: Advanced playbook that demonstrates configuration changes by updating the hostname and displaying the modified configuration.

LANGUAGE: yaml
CODE:
---
- name: Network Getting Started First Playbook Extended
  hosts: all
  connection: ansible.netcommon.network_cli
  tasks:
    - name: Get config for VyOS devices
      vyos.vyos.vyos_facts:
        gather_subset: all

    - name: Display the config
      debug:
        msg: "The hostname is {{ ansible_net_hostname }} and the OS is {{ ansible_net_version }}"

    - name: Update the hostname
      vyos.vyos.vyos_system:
        host_name: vyos-changed

    - name: Get changed config for VyOS devices
      vyos.vyos.vyos_facts:
        gather_subset: all

    - name: Display the changed config
      debug:
        msg: "The new hostname is {{ ansible_net_hostname }} and the OS is {{ ansible_net_version }}"

----------------------------------------

TITLE: Enumerating hosts in a group
DESCRIPTION: Jinja template example showing how to enumerate all hosts within a group.

LANGUAGE: jinja
CODE:
{% for host in groups['app_servers'] %}
   # something that applies to all app servers.
{% endfor %}

----------------------------------------

TITLE: Checking Module Path Configuration in Ansible
DESCRIPTION: Command to view current configuration settings for module paths in Ansible using ansible-config dump command with grep.

LANGUAGE: text
CODE:
ansible-config dump |grep DEFAULT_MODULE_PATH

----------------------------------------

TITLE: Mocking AnsibleModule.run_command in Python
DESCRIPTION: This snippet demonstrates how to mock the AnsibleModule.run_command method for testing modules that execute external commands.

LANGUAGE: python
CODE:
with patch.object(basic.AnsibleModule, 'run_command') as run_command:
    run_command.return_value = 0, '', ''  # successful execution, no output
    with self.assertRaises(AnsibleExitJson) as result:
        my_module.main()
        self.assertFalse(result.exception.args[0]['changed'])
# Check that run_command has been called
run_command.assert_called_once_with('/usr/bin/command args')
self.assertEqual(run_command.call_count, 1)
self.assertFalse(run_command.called)

----------------------------------------

TITLE: Basic Ansible Playbook Module Usage
DESCRIPTION: Simple example of using the command module in an Ansible playbook to execute a reboot command.

LANGUAGE: yaml
CODE:
- name: reboot the servers
  command: /sbin/reboot -t now

----------------------------------------

TITLE: Retrying a task until a condition is met
DESCRIPTION: Example of using the until keyword to retry a task until a certain condition is met.

LANGUAGE: yaml
CODE:
- name: Retry a task until a certain condition is met
  ansible.builtin.shell: /usr/bin/foo
  register: result
  until: result.stdout.find("all systems go") != -1
  retries: 5
  delay: 10

----------------------------------------

TITLE: Defining a List Variable in YAML
DESCRIPTION: Example of defining a variable as a list using YAML syntax.

LANGUAGE: yaml
CODE:
region:
  - northeast
  - southeast
  - midwest

----------------------------------------

TITLE: Testing Task Results in Ansible
DESCRIPTION: Demonstrates how to check the status of task results using various result tests in Ansible.

LANGUAGE: yaml
CODE:
tasks:

  - shell: /usr/bin/foo
    register: result
    ignore_errors: True

  - debug:
      msg: "it failed"
    when: result is failed

  - debug:
      msg: "it changed"
    when: result is changed

  - debug:
      msg: "it succeeded in Ansible >= 2.1"
    when: result is succeeded

  - debug:
      msg: "it succeeded"
    when: result is success

  - debug:
      msg: "it was skipped"
    when: result is skipped

----------------------------------------

TITLE: Collection Requirements File
DESCRIPTION: YAML configuration for installing collections with signature verification requirements

LANGUAGE: yaml
CODE:
collections:
  - name: ns.coll
    version: 1.0.0
    signatures:
      - https://examplehost.com/detached_signature.asc
      - file:///path/to/local/detached_signature.asc

----------------------------------------

TITLE: Handler Tasks Definition in YAML
DESCRIPTION: Defines reusable handler tasks for restarting services like Apache and MySQL.

LANGUAGE: yaml
CODE:
# restarts.yml
- name: Restart apache
  ansible.builtin.service:
    name: apache
    state: restarted

- name: Restart mysql
  ansible.builtin.service:
    name: mysql
    state: restarted

----------------------------------------

TITLE: Gathering Facts with Ansible Ad Hoc Command
DESCRIPTION: This command shows how to use the setup module to gather facts about all managed nodes in the inventory.

LANGUAGE: bash
CODE:
$ ansible all -m ansible.builtin.setup

----------------------------------------

TITLE: Defining a Simple Variable in YAML
DESCRIPTION: Example of defining a simple key-value variable using YAML syntax.

LANGUAGE: yaml
CODE:
remote_install_path: /opt/my_app_config

----------------------------------------

TITLE: Complete Block Error Handling in Ansible YAML
DESCRIPTION: Shows a comprehensive example using block, rescue, and always sections together for complex error handling scenarios.

LANGUAGE: YAML
CODE:
tasks:
  - name: Attempt and graceful roll back demo
    block:
      - name: Print a message
        ansible.builtin.debug:
          msg: 'I execute normally'

      - name: Force a failure
        ansible.builtin.command: /bin/false

      - name: Never print this
        ansible.builtin.debug:
          msg: 'I never execute, due to the above task failing, :-('
    rescue:
      - name: Print when errors
        ansible.builtin.debug:
          msg: 'I caught an error'

      - name: Force a failure in middle of recovery! >:-)
        ansible.builtin.command: /bin/false

      - name: Never print this
        ansible.builtin.debug:
          msg: 'I also never execute :-('
    always:
      - name: Always do this
        ansible.builtin.debug:
          msg: "This always executes"

----------------------------------------

TITLE: Importing AnsibleModule in Python for Ansible Modules
DESCRIPTION: This snippet shows how to import the AnsibleModule class from ansible.module_utils.basic. This is a fundamental import for creating Ansible modules.

LANGUAGE: python
CODE:
from ansible.module_utils.basic import AnsibleModule

----------------------------------------

TITLE: Reusing Environment Settings as Variables in Ansible
DESCRIPTION: Shows how to define environment settings as variables and reuse them in tasks within an Ansible playbook.

LANGUAGE: yaml
CODE:
- hosts: all
  remote_user: root

  # create a variable named "proxy_env" that is a dictionary
  vars:
    proxy_env:
      http_proxy: http://proxy.example.com:8080

  tasks:

    - name: Install cobbler
      ansible.builtin.package:
        name: cobbler
        state: present
      environment: "{{ proxy_env }}"

----------------------------------------

TITLE: Using Roles in a Playbook
DESCRIPTION: Shows how to include roles in a playbook using the 'roles' option at the play level.

LANGUAGE: yaml
CODE:
---
- hosts: webservers
  roles:
    - common
    - webservers

----------------------------------------

TITLE: Upgrading Collection to Latest Version
DESCRIPTION: Command to upgrade an existing collection to the latest version available on Galaxy

LANGUAGE: bash
CODE:
ansible-galaxy collection install my_namespace.my_collection --upgrade

----------------------------------------

TITLE: Running a command as a specific user with become
DESCRIPTION: Demonstrates how to use become to run a command as a specific user (apache in this case).

LANGUAGE: YAML
CODE:
- name: Run a command as the apache user
  command: somecommand
  become: true
  become_user: apache

----------------------------------------

TITLE: Hashing and encrypting strings
DESCRIPTION: Use various filters for hashing and encrypting strings

LANGUAGE: jinja2
CODE:
{{ 'test1' | hash('sha1') }}
{{ 'test1' | hash('md5') }}
{{ 'test2' | checksum }}
{{ 'passwordsaresecret' | password_hash('sha512') }}
{{ 'secretpassword' | password_hash('sha256', 'mysecretsalt') }}

----------------------------------------

TITLE: Referencing specific facts in Jinja templates
DESCRIPTION: Examples of how to reference specific facts in Jinja templates or playbooks.

LANGUAGE: jinja
CODE:
{{ ansible_facts['devices']['xvda']['model'] }}

LANGUAGE: jinja
CODE:
{{ ansible_facts['nodename'] }}

----------------------------------------

TITLE: Importing Multiple Playbooks in YAML
DESCRIPTION: Demonstrates how to statically import multiple playbooks into a main playbook using import_playbook statements.

LANGUAGE: yaml
CODE:
- import_playbook: webservers.yml
- import_playbook: databases.yml

----------------------------------------

TITLE: Generating Certificate and Key with OpenSSL
DESCRIPTION: Bash script using OpenSSL to generate a certificate and private key suitable for WinRM certificate authentication.

LANGUAGE: bash
CODE:
# Set the username to the name of the user the certificate will be mapped to
USERNAME="local-user"

cat > openssl.conf << EOL
distinguished_name = req_distinguished_name

[req_distinguished_name]
[v3_req_client]
extendedKeyUsage = clientAuth
subjectAltName = otherName:1.3.6.1.4.1.311.20.2.3;UTF8:${USERNAME}@localhost
EOL

openssl req \
    -new \
    -sha256 \
    -subj "/CN=${USERNAME}" \
    -newkey rsa:2048 \
    -nodes \
    -keyout cert.key \
    -out cert.csr \
    -config openssl.conf \
    -reqexts v3_req_client

openssl x509 \
    -req \
    -in cert.csr \
    -sha256 \
    -out cert.pem \
    -days 365 \
    -extfile openssl.conf \
    -extensions v3_req_client \
    -key cert.key

rm openssl.conf cert.csr

----------------------------------------

TITLE: Running Ansible Unit Tests for a Single File
DESCRIPTION: Command to run unit tests for a specific Ansible module (e.g., 'apt') using Docker.

LANGUAGE: shell
CODE:
ansible-test units --docker -v apt

----------------------------------------

TITLE: Copying Files with Ansible Ad Hoc Command
DESCRIPTION: This command demonstrates how to use the copy module to transfer a file from the control node to all servers in the 'atlanta' group.

LANGUAGE: bash
CODE:
$ ansible atlanta -m ansible.builtin.copy -a "src=/etc/hosts dest=/tmp/hosts"

----------------------------------------

TITLE: Creating Ansible Inventory in YAML Format
DESCRIPTION: This snippet shows how to create an Ansible inventory in YAML format, demonstrating the use of unique names for managed nodes and the ansible_host field.

LANGUAGE: yaml
CODE:
all:
  children:
    myhosts:
      hosts:
        vm01:
          ansible_host: 192.0.2.50
        vm02:
          ansible_host: 192.0.2.51
        vm03:
          ansible_host: 192.0.2.52

----------------------------------------

TITLE: Using Check Mode with Ansible Ad Hoc Command
DESCRIPTION: This example demonstrates how to use check mode (-C) with an ad hoc command to simulate changes without actually modifying the managed nodes.

LANGUAGE: bash
CODE:
$  ansible all -m copy -a "content=foo dest=/root/bar.txt" -C

----------------------------------------

TITLE: Basic Role Directory Structure
DESCRIPTION: Shows the standard directory structure for an Ansible role, including tasks, handlers, vars, defaults, and other key directories.

LANGUAGE: text
CODE:
# playbooks
site.yml
webservers.yml
fooservers.yml

----------------------------------------

TITLE: Testing Paths in Ansible
DESCRIPTION: Demonstrates various path tests available in Ansible for checking file system properties.

LANGUAGE: yaml
CODE:
- debug:
    msg: "path is a directory"
  when: mypath is directory

- debug:
    msg: "path is a file"
  when: mypath is file

- debug:
    msg: "path is a symlink"
  when: mypath is link

- debug:
    msg: "path already exists"
  when: mypath is exists

- debug:
    msg: "path is {{ (mypath is abs)|ternary('absolute','relative')}}"

- debug:
    msg: "path is the same file as path2"
  when: mypath is same_file(path2)

- debug:
    msg: "path is a mount"
  when: mypath is mount

- debug:
    msg: "path is a directory"
  when: mypath is directory
  vars:
     mypath: /my/path

- debug:
    msg: "path is a file"
  when: "'/my/path' is file"

----------------------------------------

TITLE: Reading UTF-8 File Content in Python 2/3
DESCRIPTION: Example of reading UTF-8 encoded file content in a way that works in both Python 2 and 3. Uses the to_text function to handle conversion.

LANGUAGE: python
CODE:
from ansible.module_utils.common.text.converters import to_text

with open('filename-with-utf8-data.txt', 'rb') as my_file:
    b_data = my_file.read()
    try:
        data = to_text(b_data, errors='surrogate_or_strict')
    except UnicodeError:
        # Handle the exception gracefully -- usually by displaying a good
        # user-centric error message that can be traced back to this piece
        # of code.
        pass

----------------------------------------

TITLE: Listing Installed Ansible Collections
DESCRIPTION: This command lists all installed Ansible collections, showing their locations and version information. Collections without version information are displayed with a '*'.

LANGUAGE: shell
CODE:
# /home/astark/.ansible/collections/ansible_collections
Collection                 Version
-------------------------- -------
cisco.aci                  0.0.5
cisco.mso                  0.0.4
sandwiches.ham             *
splunk.es                  0.0.5

# /usr/share/ansible/collections/ansible_collections
Collection        Version
----------------- -------
fortinet.fortios  1.0.6
pureport.pureport 0.0.8
sensu.sensu_go    1.3.0

----------------------------------------

TITLE: Generating Certificate with PowerShell
DESCRIPTION: PowerShell script to generate a self-signed certificate for WinRM authentication and export it as PEM and PFX files.

LANGUAGE: powershell
CODE:
# Set the username to the name of the user the certificate will be mapped to
$username = 'local-user'

$clientParams = @{
    CertStoreLocation = 'Cert:\CurrentUser\My'
    NotAfter          = (Get-Date).AddYears(1)
    Provider          = 'Microsoft Software Key Storage Provider'
    Subject           = "CN=$username"
    TextExtension     = @("2.5.29.37={text}1.3.6.1.5.5.7.3.2","2.5.29.17={text}upn=$username@localhost")
    Type              = 'Custom'
}
$cert = New-SelfSignedCertificate @clientParams
$certKeyName = [System.Security.Cryptography.X509Certificates.RSACertificateExtensions]::GetRSAPrivateKey(
    $cert).Key.UniqueName

# Exports the public cert.pem and key cert.pfx
Set-Content -Path "cert.pem" -Value @(
    "-----BEGIN CERTIFICATE-----"
    [Convert]::ToBase64String($cert.RawData) -replace ".{64}", "$&`n"
    "-----END CERTIFICATE-----"
)
$certPfxBytes = $cert.Export('Pfx', '')
[System.IO.File]::WriteAllBytes("$pwd\cert.pfx", $certPfxBytes)

# Removes the private key and cert from the store after exporting
$keyPath = [System.IO.Path]::Combine($env:AppData, 'Microsoft', 'Crypto', 'Keys', $certKeyName)
Remove-Item -LiteralPath "Cert:\CurrentUser\My\$($cert.Thumbprint)" -Force
Remove-Item -LiteralPath $keyPath -Force

----------------------------------------

TITLE: Ansible Playbook for Writing Hostname
DESCRIPTION: Demonstrates how to use the template module to write a server's hostname to a file using a Jinja2 template

LANGUAGE: yaml
CODE:
---
- name: Write hostname
  hosts: all
  tasks:
  - name: write hostname using jinja2
    ansible.builtin.template:
       src: templates/test.j2
       dest: /tmp/hostname

----------------------------------------

TITLE: Check Mode Task Configuration - YAML
DESCRIPTION: Shows how to configure tasks to always or never run in check mode using the check_mode parameter. Includes examples of forcing task execution and preventing changes.

LANGUAGE: yaml
CODE:
tasks:
  - name: This task will always make changes to the system
    ansible.builtin.command: /something/to/run --even-in-check-mode
    check_mode: false

  - name: This task will never make changes to the system
    ansible.builtin.lineinfile:
      line: "important config"
      dest: /path/to/myconfig.conf
      state: present
    check_mode: true
    register: changes_to_important_config

----------------------------------------

TITLE: Displaying Sample Ansible Directory Layout
DESCRIPTION: Shows the recommended directory structure for organizing Ansible files, including inventory, group_vars, host_vars, playbooks, and roles.

LANGUAGE: console
CODE:
production                # inventory file for production servers
staging                   # inventory file for staging environment

group_vars/
   group1.yml             # here we assign variables to particular groups
   group2.yml
host_vars/
   hostname1.yml          # here we assign variables to particular systems
   hostname2.yml

library/                  # if any custom modules, put them here (optional)
module_utils/             # if any custom module_utils to support modules, put them here (optional)
filter_plugins/           # if any custom filter plugins, put them here (optional)

site.yml                  # main playbook
webservers.yml            # playbook for webserver tier
dbservers.yml             # playbook for dbserver tier
tasks/                    # task files included from playbooks
    webservers-extra.yml  # <-- avoids confusing playbook with task files

----------------------------------------

TITLE: Mapping Certificate to Local Windows Account
DESCRIPTION: PowerShell script to map a certificate to a local Windows account for WinRM authentication.

LANGUAGE: powershell
CODE:
# Will prompt for the password of the user.
$credential = Get-Credential local-user

$cert = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new("cert.pem")
$certChain = [System.Security.Cryptography.X509Certificates.X509Chain]::new()
[void]$certChain.Build($cert)
$caThumbprint = $certChain.ChainElements.Certificate[-1].Thumbprint

$certMapping = @{
    Path       = 'WSMan:\localhost\ClientCertificate'
    Subject    = $cert.GetNameInfo('UpnName', $false)
    Issuer     = $caThumbprint
    Credential = $credential
    Force      = $true
}
New-Item @certMapping

----------------------------------------

TITLE: Running Playbook in Check Mode - Console Command
DESCRIPTION: Demonstrates how to execute an Ansible playbook in check mode using the --check flag to simulate changes without actually making them.

LANGUAGE: console
CODE:
ansible-playbook foo.yml --check

----------------------------------------

TITLE: Executing Ad-hoc Ansible Commands
DESCRIPTION: Shows how to run ad-hoc Ansible commands for tasks like pinging hosts or rebooting servers.

LANGUAGE: shell
CODE:
ansible boston -i production -m ping
ansible boston -i production -m command -a '/sbin/reboot'

----------------------------------------

TITLE: Installing Ansible on Fedora Linux
DESCRIPTION: Commands for installing the full ansible package, minimal ansible-core package, and collections on Fedora Linux using dnf package manager.

LANGUAGE: bash
CODE:
$ sudo dnf install ansible

LANGUAGE: bash
CODE:
$ sudo dnf install ansible-core

LANGUAGE: bash
CODE:
$ sudo dnf install ansible-collection-community-general

----------------------------------------

TITLE: Setting Stdout Callback Plugin in Ansible.cfg
DESCRIPTION: This snippet demonstrates how to set the stdout callback plugin in the Ansible configuration file. It shows two examples: setting the 'dense' plugin and a custom 'mycallback' plugin.

LANGUAGE: ini
CODE:
stdout_callback = dense

LANGUAGE: ini
CODE:
stdout_callback = mycallback

----------------------------------------

TITLE: Generating Ansible Unit Test Coverage Report
DESCRIPTION: Commands to run unit tests with coverage data collection and generate an HTML coverage report.

LANGUAGE: shell
CODE:
ansible-test units --coverage apt
ansible-test coverage html

----------------------------------------

TITLE: Upgrading Ansible with pipx
DESCRIPTION: Command to upgrade an existing Ansible installation to the latest version using pipx.

LANGUAGE: console
CODE:
$ pipx upgrade --include-injected ansible

----------------------------------------

TITLE: Handling Unicode Filenames in Python 2/3
DESCRIPTION: Example of working with Unicode filenames in a cross-compatible way, using to_bytes for filesystem operations.

LANGUAGE: python
CODE:
import os.path

from ansible.module_utils.common.text.converters import to_bytes

filename = u'/var/tmp/くらとみ.txt'
f = open(to_bytes(filename), 'wb')
mtime = os.path.getmtime(to_bytes(filename))
b_filename = os.path.expandvars(to_bytes(filename))
if os.path.exists(to_bytes(filename)):
    pass

----------------------------------------

TITLE: Basic Kerberos Configuration with DNS Lookup
DESCRIPTION: Simple Kerberos configuration file that uses DNS to lookup the KDC automatically.

LANGUAGE: ini
CODE:
[libdefaults]
    default_realm = MY.DOMAIN.COM
    dns_lookup_kdc = true

----------------------------------------

TITLE: Running All Sanity Tests in Docker Container
DESCRIPTION: Command to run all Ansible sanity tests using a Docker container.

LANGUAGE: shell
CODE:
ansible-test sanity --docker

----------------------------------------

TITLE: Basic Handler Implementation in Ansible
DESCRIPTION: Example showing basic handler implementation for Apache service management with tasks that notify the handler when configuration changes occur.

LANGUAGE: yaml
CODE:
---
- name: Verify apache installation
  hosts: webservers
  vars:
    http_port: 80
    max_clients: 200
  remote_user: root
  tasks:
    - name: Ensure apache is at the latest version
      ansible.builtin.yum:
        name: httpd
        state: latest

    - name: Write the apache config file
      ansible.builtin.template:
        src: /srv/httpd.j2
        dest: /etc/httpd.conf
      notify:
        - Restart apache

    - name: Ensure apache is running
      ansible.builtin.service:
        name: httpd
        state: started

  handlers:
    - name: Restart apache
      ansible.builtin.service:
        name: httpd
        state: restarted

----------------------------------------

TITLE: Adding Tags to Plays in YAML
DESCRIPTION: Example of adding tags to entire plays in an Ansible playbook YAML file. Shows tagging one play with 'ntp' and another with 'filesharing'.

LANGUAGE: yaml
CODE:
- hosts: all
  tags: ntp
  tasks:
  - name: Install ntp
    ansible.builtin.yum:
      name: ntp
      state: present

  - name: Configure ntp
    ansible.builtin.template:
      src: ntp.conf.j2
      dest: /etc/ntp.conf
    notify:
    - restart ntpd

  - name: Enable and run ntpd
    ansible.builtin.service:
      name: ntpd
      state: started
      enabled: true

- hosts: fileservers
  tags: filesharing
  tasks:
  # ...

----------------------------------------

TITLE: Registered Variables in Ansible Conditionals
DESCRIPTION: Demonstrates registering command output and using it in subsequent conditional tasks

LANGUAGE: yaml
CODE:
- name: Test play
  hosts: all

  tasks:
      - name: Register a variable
        ansible.builtin.shell: cat /etc/motd
        register: motd_contents

      - name: Use the variable in conditional statement
        ansible.builtin.shell: echo "motd contains the word hi"
        when: motd_contents.stdout.find('hi') != -1

----------------------------------------

TITLE: Implementing Authentication Token Handler in Python
DESCRIPTION: Example of handling authentication tokens in httpapi plugins with login and update_auth methods.

LANGUAGE: python
CODE:
def update_auth(self, response, response_text):
    cookie = response.info().get('Set-Cookie')
    if cookie:
        return {'Cookie': cookie}

    return None

def login(self, username, password):
    login_path = '/my/login/path'
    data = {'user': username, 'password': password}

    response = self.send_request(data, path=login_path)
    try:
        self.connection._auth = {'X-api-token': response['token']}
    except KeyError:
        raise AnsibleAuthenticationFailure(message="Failed to acquire login token.")

def logout(self):
    logout_path = '/my/logout/path'
    self.send_request(None, path=logout_path)

    # Clean up tokens
    self.connection._auth = None

----------------------------------------

TITLE: Running Ansible Unit Tests with Specific Python Version
DESCRIPTION: Command to run unit tests using a specific Python version (e.g., 2.7) in a Docker container.

LANGUAGE: shell
CODE:
ansible-test units --docker -v --python 2.7 apt

----------------------------------------

TITLE: Using Shell Module in Ad Hoc Command
DESCRIPTION: This example shows how to use the shell module instead of the default command module, which is necessary for commands that require shell-specific syntax.

LANGUAGE: bash
CODE:
$ ansible raleigh -m ansible.builtin.shell -a 'echo $TERM'

----------------------------------------

TITLE: Managing Users with Ansible Ad Hoc Commands
DESCRIPTION: These commands show how to use the user module to create and remove user accounts on managed nodes using Ansible ad hoc commands.

LANGUAGE: bash
CODE:
$ ansible all -m ansible.builtin.user -a "name=foo password=<encrypted password here>"

$ ansible all -m ansible.builtin.user -a "name=foo state=absent"

----------------------------------------

TITLE: Getting Role Information
DESCRIPTION: Command to view detailed information about a specific role using the ansible-galaxy CLI.

LANGUAGE: bash
CODE:
$ ansible-galaxy role info username.role_name

----------------------------------------

TITLE: Complete Example of Ansible Module Unit Test in Python
DESCRIPTION: This snippet provides a complete example of a unit test for an Ansible module, including mocks for exit_json, fail_json, and get_bin_path.

LANGUAGE: python
CODE:
import json

from units.compat import unittest
from units.compat.mock import patch
from ansible.module_utils import basic
from ansible.module_utils.common.text.converters import to_bytes
from ansible.modules.namespace import my_module


def set_module_args(args):
    """prepare arguments so that they will be picked up during module creation"""
    args = json.dumps({'ANSIBLE_MODULE_ARGS': args})
    basic._ANSIBLE_ARGS = to_bytes(args)


class AnsibleExitJson(Exception):
    """Exception class to be raised by module.exit_json and caught by the test case"""
    pass


class AnsibleFailJson(Exception):
    """Exception class to be raised by module.fail_json and caught by the test case"""
    pass


def exit_json(*args, **kwargs):
    """function to patch over exit_json; package return data into an exception"""
    if 'changed' not in kwargs:
        kwargs['changed'] = False
    raise AnsibleExitJson(kwargs)


def fail_json(*args, **kwargs):
    """function to patch over fail_json; package return data into an exception"""
    kwargs['failed'] = True
    raise AnsibleFailJson(kwargs)


def get_bin_path(self, arg, required=False):
    """Mock AnsibleModule.get_bin_path"""
    if arg.endswith('my_command'):
        return '/usr/bin/my_command'
    else:
        if required:
            fail_json(msg='%r not found !' % arg)


class TestMyModule(unittest.TestCase):

    def setUp(self):
        self.mock_module_helper = patch.multiple(basic.AnsibleModule,
                                                 exit_json=exit_json,
                                                 fail_json=fail_json,
                                                 get_bin_path=get_bin_path)
        self.mock_module_helper.start()
        self.addCleanup(self.mock_module_helper.stop)

    def test_module_fail_when_required_args_missing(self):
        with self.assertRaises(AnsibleFailJson):
            set_module_args({})
            my_module.main()


    def test_ensure_command_called(self):
        set_module_args({
            'param1': 10,
            'param2': 'test',
        })

        with patch.object(basic.AnsibleModule, 'run_command') as mock_run_command:
            stdout = 'configuration updated'
            stderr = ''
            rc = 0
            mock_run_command.return_value = rc, stdout, stderr  # successful execution

            with self.assertRaises(AnsibleExitJson) as result:
                my_module.main()
            self.assertFalse(result.exception.args[0]['changed']) # ensure result is changed

        mock_run_command.assert_called_once_with('/usr/bin/my_command --value 10 --name test')

----------------------------------------

TITLE: Installing ansible-builder for Ansible Execution Environment
DESCRIPTION: This command installs only ansible-builder using pip3, which is useful if you want to build Execution Environments without testing them.

LANGUAGE: bash
CODE:
pip3 install ansible-builder

----------------------------------------

TITLE: Defining Complex Unsafe Variables in Ansible
DESCRIPTION: Illustrates how to use the !unsafe tag with complex data structures like arrays and hashes in Ansible playbooks.

LANGUAGE: yaml
CODE:
---
my_unsafe_array:
  - !unsafe 'unsafe element'
  - 'safe element'

my_unsafe_hash:
  unsafe_key: !unsafe 'unsafe value'

----------------------------------------

TITLE: Writing Simple Function-Based Unit Test in Python
DESCRIPTION: Example of a basic function-based unit test in Python using the pytest framework. The test checks a simple addition operation.

LANGUAGE: python
CODE:
def test_add():
    a = 10
    b = 23
    c = 33
    assert a + b == c

----------------------------------------

TITLE: Setting Custom Async Directory
DESCRIPTION: Example of setting custom async directory for tasks using ansible_async_dir variable

LANGUAGE: yaml
CODE:
tasks:
  - dnf:
      name: '*'
      state: latest
    async: 300
    poll: 5
    vars:
      ansible_async_dir: /path/to/my/custom/dir

----------------------------------------

TITLE: Basic INI Format Inventory Example
DESCRIPTION: Shows a basic INI format inventory file with ungrouped hosts and server groups

LANGUAGE: text
CODE:
mail.example.com

[webservers]
foo.example.com
bar.example.com

[dbservers]
one.example.com
two.example.com
three.example.com

----------------------------------------

TITLE: Installing Collection from Galaxy
DESCRIPTION: Basic command to install an Ansible collection from Galaxy server using ansible-galaxy

LANGUAGE: bash
CODE:
ansible-galaxy collection install my_namespace.my_collection

----------------------------------------

TITLE: Iterating over a simple list with loop
DESCRIPTION: Example of using loop to iterate over a simple list of strings to add multiple users.

LANGUAGE: yaml+jinja
CODE:
- name: Add several users
  ansible.builtin.user:
    name: "{{ item }}"
    state: present
    groups: "wheel"
  loop:
     - testuser1
     - testuser2

----------------------------------------

TITLE: Using undef() Function in Templates
DESCRIPTION: Examples of using the undef() function to create undefined variables in templates with optional hints

LANGUAGE: yaml
CODE:
vars:
  old: "{{ undef }}"
  new: "{{ undef() }}"
  new_with_hint: "{{ undef(hint='You must override this variable') }}"

----------------------------------------

TITLE: Creating and using dynamic custom facts
DESCRIPTION: Playbook example demonstrating how to create and use dynamic custom facts with facts.d.

LANGUAGE: yaml
CODE:
- hosts: webservers
  tasks:

    - name: Create directory for ansible custom facts
      ansible.builtin.file:
        state: directory
        recurse: true
        path: /etc/ansible/facts.d

    - name: Install custom ipmi fact
      ansible.builtin.copy:
        src: ipmi.fact
        dest: /etc/ansible/facts.d

    - name: Re-read facts after adding custom fact
      ansible.builtin.setup:
        filter: ansible_local

----------------------------------------

TITLE: Rebooting Servers with Different User
DESCRIPTION: This example shows how to run an Ansible ad hoc command as a specific user, which is useful when the default user doesn't have the necessary permissions.

LANGUAGE: bash
CODE:
$ ansible atlanta -a "/sbin/reboot" -f 10 -u username

----------------------------------------

TITLE: Performing Truthiness Checks in Ansible
DESCRIPTION: Demonstrates how to use truthy and falsy tests in Ansible tasks, including optional boolean conversion.

LANGUAGE: yaml
CODE:
- debug:
    msg: "Truthy"
  when: value is truthy
  vars:
    value: "some string"

- debug:
    msg: "Falsy"
  when: value is falsy
  vars:
    value: ""

- debug:
    msg: "Truthy"
  when: value is truthy(convert_bool=True)
  vars:
    value: "yes"

- debug:
    msg: "Falsy"
  when: value is falsy(convert_bool=True)
  vars:
    value: "off"

----------------------------------------

TITLE: Installing Roles
DESCRIPTION: Basic role installation command using ansible-galaxy.

LANGUAGE: bash
CODE:
$ ansible-galaxy role install namespace.role_name

----------------------------------------

TITLE: Basic YAML Format Inventory Example
DESCRIPTION: Shows the equivalent inventory structure in YAML format

LANGUAGE: yaml
CODE:
ungrouped:
  hosts:
    mail.example.com:
webservers:
  hosts:
    foo.example.com:
    bar.example.com:
dbservers:
  hosts:
    one.example.com:
    two.example.com:
    three.example.com:

----------------------------------------

TITLE: Dictionary Key Extraction in Python
DESCRIPTION: Python implementation for extracting keys from a dictionary matching elements from a list.

LANGUAGE: python
CODE:
chains = [1, 2]
for chain in chains:
    for config in chains_config[chain]['configs']:
        print(config['type'])

----------------------------------------

TITLE: Using the 'now()' Function in Ansible Templates
DESCRIPTION: Demonstrates how to use the 'now()' function in Ansible templates to get the current time in UTC with custom formatting. The function accepts two optional parameters: 'utc' for UTC time and 'fmt' for custom date-time formatting using strftime strings.

LANGUAGE: python
CODE:
dtg: "Current time (UTC): {{ now(utc=true,fmt='%Y-%m-%d %H:%M:%S') }}"

----------------------------------------

TITLE: Copying Standalone Role to Collection
DESCRIPTION: Demonstrates how to copy a standalone role into a collection's roles directory, renaming it if necessary to avoid hyphens.

LANGUAGE: bash
CODE:
$ mkdir mynamespace/mycollection/roles/my_role/
$ cp -r /path/to/standalone/role/mynamespace/my_role/* mynamespace/mycollection/roles/my_role/

----------------------------------------

TITLE: Running Playbook with Vault Password File - Bash
DESCRIPTION: Example command showing how to run a playbook with an encrypted vars file and a vault password file.

LANGUAGE: bash
CODE:
ansible-playbook --extra-vars @secrets.enc --vault-password-file secrets.pass

----------------------------------------

TITLE: Role Argument Specification
DESCRIPTION: Shows an example of a role argument specification defined in meta/argument_specs.yml, including various parameter types and structures.

LANGUAGE: yaml
CODE:
# roles/myapp/meta/argument_specs.yml
---
argument_specs:
  # roles/myapp/tasks/main.yml entry point
  main:
    short_description: Main entry point for the myapp role
    description:
      - This is the main entrypoint for the C(myapp) role.
      - Here we can describe what this entrypoint does in lengthy words.
      - Every new list item is a new paragraph. You can have multiple sentences
        per paragraph.
    author:
      - Daniel Ziegenberg
    options:
      myapp_int:
        type: "int"
        required: false
        default: 42
        description:
          - "The integer value, defaulting to 42."
          - "This is a second paragraph."

      myapp_str:
        type: "str"
        required: true
        description: "The string value"

      myapp_list:
        type: "list"
        elements: "str"
        required: true
        description: "A list of string values."
        version_added: 1.3.0

      myapp_list_with_dicts:
        type: "list"
        elements: "dict"
        required: false
        default:
          - myapp_food_kind: "meat"
            myapp_food_boiling_required: true
            myapp_food_preparation_time: 60
          - myapp_food_kind: "fruits"
            myapp_food_preparation_time: 5
        description: "A list of dicts with a defined structure and with default a value."
        options:
          myapp_food_kind:
            type: "str"
            choices:
              - "vegetables"
              - "fruits"
              - "grains"
              - "meat"
            required: false
            description: "A string value with a limited list of allowed choices."

          myapp_food_boiling_required:
            type: "bool"
            required: false
            default: false
            description: "Whether the kind of food requires boiling before consumption."

          myapp_food_preparation_time:
            type: int
            required: true
            description: "Time to prepare a dish in minutes."

      myapp_dict_with_suboptions:
        type: "dict"
        required: false
        default:
          myapp_host: "bar.foo"
          myapp_exclude_host: true
          myapp_path: "/etc/myapp"
        description: "A dict with a defined structure and default values."
        options:
          myapp_host:
            type: "str"
            choices:
              - "foo.bar"
              - "bar.foo"
              - "ansible.foo.bar"
            required: true
            description: "A string value with a limited list of allowed choices."

          myapp_exclude_host:
            type: "bool"
            required: true
            description: "A boolean value."

          myapp_path:
            type: "path"
            required: true
            description: "A path value."

          original_name:
            type: list
            elements: "str"
            required: false
            description: "An optional list of string values."

  # roles/myapp/tasks/alternate.yml entry point
  alternate:
    short_description: Alternate entry point for the myapp role
    description:
      - This is the alternate entrypoint for the C(myapp) role.
    version_added: 1.2.0
    options:
      myapp_int:
        type: "int"
        required: false
        default: 1024
        description: "The integer value, defaulting to 1024."

----------------------------------------

TITLE: Demonstrating Secure Conditional Usage in Ansible Playbooks
DESCRIPTION: This snippet illustrates the proper way to handle conditionals with untrusted data in Ansible playbooks, addressing the security issue CVE-2023-5764. It shows how to avoid using embedded templates in conditionals when working with module results or vars marked as unsafe.

LANGUAGE: yaml
CODE:
- name: task with a module result (always untrusted by Ansible)
  shell: echo "hi mom"
  register: untrusted_result

# don't do it this way...
# - name: insecure conditional with embedded template consulting untrusted data
#   assert:
#     that: '"hi mom" is in {{ untrusted_result.stdout }}'

- name: securely access untrusted values directly as Jinja variables instead
  assert:
    that: '"hi mom" is in untrusted_result.stdout'

----------------------------------------

TITLE: Site Deployment Playbook in YAML
DESCRIPTION: Main site deployment playbook that configures and deploys the entire application stack including common configuration, database servers, web servers, load balancers, and monitoring nodes.

LANGUAGE: yaml
CODE:
---
# This playbook deploys the whole application stack in this site.

# Apply common configuration to all hosts
- hosts: all

  roles:
  - common

# Configure and deploy database servers.
- hosts: dbservers

  roles:
  - db

# Configure and deploy the web servers.
- hosts: webservers

  roles:
  - base-apache
  - web

# Configure and deploy the load balancer(s).
- hosts: lbservers

  roles:
  - haproxy

# Configure and deploy the Nagios monitoring node(s).
- hosts: monitoring

  roles:
  - base-apache
  - nagios

----------------------------------------

TITLE: Creating Main Playbook in YAML
DESCRIPTION: Demonstrates how to create a main playbook (site.yml) that imports other playbooks for different server types.

LANGUAGE: yaml
CODE:
---
# file: site.yml
- import_playbook: webservers.yml
- import_playbook: dbservers.yml

----------------------------------------

TITLE: Installing Required Python Packages for Ansible Documentation Testing
DESCRIPTION: This command installs the necessary Python packages for running documentation tests in Ansible. The '--user' flag is used for installing packages in the user's home directory, but should be omitted when using a virtual environment.

LANGUAGE: bash
CODE:
pip install --user -r test/lib/ansible_test/_data/requirements/sanity.txt

----------------------------------------

TITLE: Rebooting Servers with Privilege Escalation
DESCRIPTION: This command demonstrates how to use privilege escalation (become) to run a command as root, with an option to prompt for the become password.

LANGUAGE: bash
CODE:
$ ansible atlanta -a "/sbin/reboot" -f 10 -u username --become [--ask-become-pass]

----------------------------------------

TITLE: Complex Arguments in Ansible Playbook
DESCRIPTION: Example of using YAML syntax to pass complex arguments to the service module in an Ansible playbook.

LANGUAGE: yaml
CODE:
- name: restart webserver
  service:
    name: httpd
    state: restarted

----------------------------------------

TITLE: Restructuring Ansible Module for Better Testability in Python
DESCRIPTION: This snippet demonstrates how to restructure an Ansible module to separate argument specification, module setup, and main execution for improved testability.

LANGUAGE: python
CODE:
argument_spec = dict(
    # module function variables
    state=dict(choices=['absent', 'present', 'rebooted', 'restarted'], default='present'),
    apply_immediately=dict(type='bool', default=False),
    wait=dict(type='bool', default=False),
    wait_timeout=dict(type='int', default=600),
    allocated_storage=dict(type='int', aliases=['size']),
    db_instance_identifier=dict(aliases=["id"], required=True),
)

def setup_module_object():
    module = AnsibleAWSModule(
        argument_spec=argument_spec,
        required_if=required_if,
        mutually_exclusive=[['old_instance_id', 'source_db_instance_identifier',
                             'db_snapshot_identifier']],
    )
    return module

def main():
    module = setup_module_object()
    validate_parameters(module)
    conn = setup_client(module)
    return_dict = run_task(module, conn)
    module.exit_json(**return_dict)

----------------------------------------

TITLE: Enabling Inventory Plugins in Ansible Configuration
DESCRIPTION: This snippet shows how to enable specific inventory plugins in the ansible.cfg file. It demonstrates the default list of enabled plugins and how to add custom or collection-based plugins.

LANGUAGE: ini
CODE:
[inventory]
enable_plugins = host_list, script, auto, yaml, ini, toml

LANGUAGE: ini
CODE:
[inventory]
enable_plugins = host_list, script, auto, yaml, ini, toml, namespace.collection_name.inventory_plugin_name

LANGUAGE: ini
CODE:
[inventory]
enable_plugins = host_list, script, auto, yaml, ini, toml, my_plugin

----------------------------------------

TITLE: Creating a New Collection
DESCRIPTION: Shows the command to initialize a new Ansible collection using ansible-galaxy.

LANGUAGE: bash
CODE:
$ ansible-galaxy collection init mynamespace.mycollection

----------------------------------------

TITLE: Defining Collections Search Order in Ansible Role (YAML)
DESCRIPTION: This snippet demonstrates how to control the collections search order within an Ansible role using the 'collections' keyword in the role's meta/main.yml file. It specifies a list of collections to search for tasks inside the role.

LANGUAGE: yaml
CODE:
# myrole/meta/main.yml
collections:
  - my_namespace.first_collection
  - my_namespace.second_collection
  - other_namespace.other_collection

----------------------------------------

TITLE: Windows module debugging setup
DESCRIPTION: Code to add at the start of a module for local debugging on a Windows host.

LANGUAGE: powershell
CODE:
# Set $ErrorActionPreference to what's set during Ansible execution
$ErrorActionPreference = "Stop"

# Set the first argument as the path to a JSON file that contains the module args
$args = @("$($pwd.Path)\args.json")

# Or instead of an args file, set $complex_args to the pre-processed module args
$complex_args = @{
    _ansible_check_mode = $false
    _ansible_diff = $false
    path = "C:\temp"
    state = "present"
}

# Import any C# utils referenced with '#AnsibleRequires -CSharpUtil' or 'using Ansible.;
# The $_csharp_utils entries should be the context of the C# util files and not the path
Import-Module -Name "$($pwd.Path)\powershell\Ansible.ModuleUtils.AddType.psm1"
$_csharp_utils = @(
    [System.IO.File]::ReadAllText("$($pwd.Path)\csharp\Ansible.Basic.cs")
)
Add-CSharpType -References $_csharp_utils -IncludeDebugInfo

# Import any PowerShell modules referenced with '#Requires -Module`
Import-Module -Name "$($pwd.Path)\powershell\Ansible.ModuleUtils.Legacy.psm1"

# End of the setup code and start of the module code
#!powershell

----------------------------------------

TITLE: Running Ansible Playbook with Common Options
DESCRIPTION: Example of running ansible-playbook with inventory file, SSH settings, forks, timeout, tags, modules path and privilege escalation options.

LANGUAGE: bash
CODE:
ansible-playbook -i /path/to/my_inventory_file -u my_connection_user -k -f 3 -T 30 -t my_tag -M /path/to/my_modules -b -K my_playbook.yml

----------------------------------------

TITLE: Demonstrating Secure Conditional Evaluation in Ansible YAML
DESCRIPTION: Shows how to securely access untrusted values in conditionals, avoiding embedded templates that could lead to template injection vulnerabilities.

LANGUAGE: yaml
CODE:
- name: task with a module result (always untrusted by Ansible)
  shell: echo "hi mom"
  register: untrusted_result

# don't do it this way...
# - name: insecure conditional with embedded template consulting untrusted data
#   assert:
#     that: '"hi mom" is in {{ untrusted_result.stdout }}'

- name: securely access untrusted values directly as Jinja variables instead
  assert:
    that: '"hi mom" is in untrusted_result.stdout'

----------------------------------------

TITLE: JSON queries with json_query filter
DESCRIPTION: Use the json_query filter to extract data from complex JSON structures

LANGUAGE: yaml+jinja
CODE:
- name: Display all cluster names
  ansible.builtin.debug:
    var: item
  loop: "{{ domain_definition | community.general.json_query('domain.cluster[*].name') }}"

- name: Display all server names
  ansible.builtin.debug:
    var: item
  loop: "{{ domain_definition | community.general.json_query('domain.server[*].name') }}"

- name: Display all ports from cluster1
  ansible.builtin.debug:
    var: item
  loop: "{{ domain_definition | community.general.json_query(server_name_cluster1_query) }}"
  vars:
    server_name_cluster1_query: "domain.server[?cluster=='cluster1'].port"

----------------------------------------

TITLE: C# module utility import
DESCRIPTION: Importing a C# module utility in an Ansible Windows module.

LANGUAGE: powershell
CODE:
#AnsibleRequires -CSharpUtil Ansible.Basic

----------------------------------------

TITLE: Using Collections Keyword in Ansible Playbook (YAML+Jinja)
DESCRIPTION: This snippet shows how to use the 'collections' keyword in an Ansible playbook to control the collections search order for modules and action plugins. It demonstrates importing a role, running a module without specifying FQCN, and using a lookup plugin with a filter.

LANGUAGE: yaml+jinja
CODE:
- name: Run a play using the collections keyword
  hosts: all
  collections:
    - my_namespace.my_collection

  tasks:

    - name: Import a role
      ansible.builtin.import_role:
        name: role1

    - name: Run a module not specifying FQCN
      my_module:
        option1: value

    - name: Run a debug task
      ansible.builtin.debug:
        msg: '{{ lookup("my_namespace.my_collection.lookup1", "param1")| my_namespace.my_collection.filter1 }}'

----------------------------------------

TITLE: Installing Ansible on Arch Linux
DESCRIPTION: Commands for installing both full ansible package and minimal ansible-core package on Arch Linux using pacman package manager.

LANGUAGE: bash
CODE:
$ sudo pacman -S ansible

LANGUAGE: bash
CODE:
$ sudo pacman -S ansible-core

----------------------------------------

TITLE: Creating Basic YAML Inventory for Network Devices
DESCRIPTION: Demonstrates how to structure a basic YAML inventory file for network devices, including leafs, spines, and webservers. The inventory uses groups and subgroups to organize devices logically.

LANGUAGE: yaml
CODE:
---

leafs:
  hosts:
    leaf01:
      ansible_host: 10.16.10.11
    leaf02:
      ansible_host: 10.16.10.12

spines:
  hosts:
    spine01:
      ansible_host: 10.16.10.13
    spine02:
      ansible_host: 10.16.10.14

network:
  children:
    leafs:
    spines:

webservers:
  hosts:
    webserver01:
      ansible_host: 10.16.10.15
    webserver02:
      ansible_host: 10.16.10.16

datacenter:
  children:
    network:
    webservers:

----------------------------------------

TITLE: Mocking Module Exit Functions in Python
DESCRIPTION: This snippet shows how to mock the exit_json function of an Ansible module to raise an exception instead of exiting, allowing for better testing of module behavior.

LANGUAGE: python
CODE:
class AnsibleExitJson(Exception):
    """Exception class to be raised by module.exit_json and caught by the test case"""
    pass

# you may also do the same to fail json
module = MagicMock()
module.exit_json.side_effect = AnsibleExitJson(Exception)
with self.assertRaises(AnsibleExitJson) as result:
    results = my_module.test_this_function(module, argument)
module.fail_json.assert_not_called()
assert results["changed"] == True

----------------------------------------

TITLE: Setting Custom Async Directory in Ansible Tasks
DESCRIPTION: Example showing how to configure a custom async directory for tasks using the ansible_async_dir variable instead of ANSIBLE_ASYNC_DIR environment variable.

LANGUAGE: yaml
CODE:
tasks:
  - dnf:
      name: '*'
      state: latest
    async: 300
    poll: 5
    vars:
      ansible_async_dir: /path/to/my/custom/dir

----------------------------------------

TITLE: Set Theory Tests in Ansible
DESCRIPTION: Demonstrates how to use subset and superset tests for list comparisons in Ansible tasks.

LANGUAGE: yaml
CODE:
vars:
    a: [1,2,3,4,5]
    b: [2,3]
tasks:
    - debug:
        msg: "A includes B"
      when: a is superset(b)

    - debug:
        msg: "B is included in A"
      when: b is subset(a)

----------------------------------------

TITLE: Cloning and Setting Up PR Testing Environment
DESCRIPTION: Shell commands for cloning Ansible and setting up a PR testing environment

LANGUAGE: shell-session
CODE:
git clone https://github.com/ansible/ansible.git ansible-pr-testing
cd ansible-pr-testing

----------------------------------------

TITLE: Initializing Ansible Test Environment in Bash
DESCRIPTION: This snippet shows how to initialize the Ansible test environment by sourcing the env-setup script and running the ansible-test command with help option.

LANGUAGE: shell
CODE:
source hacking/env-setup
ansible-test --help

----------------------------------------

TITLE: Invoking Playbook from Collection (Shell)
DESCRIPTION: This snippet demonstrates how to invoke a playbook distributed within a collection using the ansible-playbook command. It shows the syntax for specifying the collection namespace, name, and playbook.

LANGUAGE: shell
CODE:
ansible-playbook my_namespace.my_collection.playbook1 -i ./myinventory

----------------------------------------

TITLE: Regular expression operations
DESCRIPTION: Use regex_search, regex_findall, and regex_replace filters for regex operations

LANGUAGE: yaml+jinja
CODE:
{{ 'server1/database42' | regex_search('database[0-9]+') }}
{{ 'Some DNS servers are 8.8.8.8 and 8.8.4.4' | regex_findall('\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b') }}
{{ 'ansible' | regex_replace('^a.*i(.*)$', 'a\\1') }}

----------------------------------------

TITLE: Verifying Collection Integrity with ansible-galaxy in Bash
DESCRIPTION: This command verifies that the content of an installed collection matches the content on the server. It requires the collection to be installed in a configured collection path and exist on a configured galaxy server.

LANGUAGE: bash
CODE:
ansible-galaxy collection verify my_namespace.my_collection

----------------------------------------

TITLE: Using YAML Filter in Ansible Variable Assignment
DESCRIPTION: Demonstrates how to use the 'to_yaml' filter to convert a variable to YAML format in an Ansible playbook. This snippet shows the basic syntax for applying a filter to a variable.

LANGUAGE: YAML+Jinja
CODE:
vars:
   yaml_string: "{{ some_variable|to_yaml }}"

----------------------------------------

TITLE: Running POSIX Integration Tests in Docker
DESCRIPTION: This command runs all POSIX platform integration tests executed by the CI system in a Fedora 34 container.

LANGUAGE: shell
CODE:
ansible-test integration shippable/ --docker fedora34

----------------------------------------

TITLE: Providing default values with the default filter
DESCRIPTION: Use the default filter to provide fallback values for undefined variables

LANGUAGE: jinja2
CODE:
{{ some_variable | default(5) }}

----------------------------------------

TITLE: Using loop_control to limit output with label
DESCRIPTION: Example of using loop_control with the label directive to limit the displayed output of a loop.

LANGUAGE: yaml+jinja
CODE:
- name: Create servers
  digital_ocean:
    name: "{{ item.name }}"
    state: present
  loop:
    - name: server1
      disks: 3gb
      ram: 15Gb
      network:
        nic01: 100Gb
        nic02: 10Gb
        # ...
  loop_control:
    label: "{{ item.name }}"

----------------------------------------

TITLE: Initializing a New Ansible Collection
DESCRIPTION: Use the ansible-galaxy command to create a new collection skeleton. This command sets up the basic directory structure for a collection named 'my_namespace.my_collection'.

LANGUAGE: bash
CODE:
ansible_collections#> ansible-galaxy collection init my_namespace.my_collection

----------------------------------------

TITLE: Running Ansible Unit Tests with Docker
DESCRIPTION: Command to run all Ansible unit tests using Docker container. This ensures a consistent testing environment.

LANGUAGE: shell
CODE:
cd /path/to/ansible/source
source hacking/env-setup
ansible-test units --docker -v

----------------------------------------

TITLE: Network Facts and Backup Playbook
DESCRIPTION: Ansible playbook that demonstrates gathering facts from network devices and creating configuration backups across multiple platforms

LANGUAGE: yaml
CODE:
- name: "Demonstrate connecting to switches"
  hosts: switches
  gather_facts: no

  tasks:
    - name: Gather facts (eos)
      arista.eos.eos_facts:
      when: ansible_network_os == 'arista.eos.eos'

    - name: Gather facts (ios)
      cisco.ios.ios_facts:
      when: ansible_network_os == 'cisco.ios.ios'

    - name: Gather facts (vyos)
      vyos.vyos.vyos_facts:
      when: ansible_network_os == 'vyos.vyos.vyos'

    - name: Display some facts
      debug:
        msg: "The hostname is {{ ansible_net_hostname }} and the OS is {{ ansible_net_version }}"

----------------------------------------

TITLE: Ignoring Unreachable Host Errors in Playbooks
DESCRIPTION: Shows how to use ignore_unreachable at the playbook level to handle unreachable hosts.

LANGUAGE: yaml
CODE:
- hosts: all
  ignore_unreachable: true
  tasks:
  - name: This executes, fails, and the failure is ignored
    ansible.builtin.command: /bin/true

  - name: This executes, fails, and ends the play for this host
    ansible.builtin.command: /bin/true
    ignore_unreachable: false

----------------------------------------

TITLE: Running PEP 8 Compliance Check with ansible-test
DESCRIPTION: Command to run PEP 8 style compliance check locally using ansible-test. This command allows checking specific files or directories for compliance with PEP 8 guidelines.

LANGUAGE: shell
CODE:
ansible-test sanity --test pep8 [file-or-directory-path-to-check] ...

----------------------------------------

TITLE: Using Vault Password Client Script - Bash
DESCRIPTION: Example commands demonstrating how to use a vault password client script for password retrieval and script execution.

LANGUAGE: bash
CODE:
ansible-playbook --vault-id dev@contrib-scripts/vault/vault-keyring-client.py

LANGUAGE: bash
CODE:
contrib-scripts/vault/vault-keyring-client.py --vault-id dev

----------------------------------------

TITLE: Running Specific Module Test in Container
DESCRIPTION: This command runs integration tests for the 'ping' module on a Ubuntu 18.04 container.

LANGUAGE: shell
CODE:
ansible-test integration ping --docker ubuntu1804

----------------------------------------

TITLE: Combining hashes/dictionaries
DESCRIPTION: Use the combine filter to merge dictionaries

LANGUAGE: jinja2
CODE:
{{ {'a':1, 'b':2} | combine({'b':3}) }}

LANGUAGE: jinja2
CODE:
{{ a | combine(b, c, d) }}
{{ [a, b, c, d] | combine }}

----------------------------------------

TITLE: Python Module Utils Example
DESCRIPTION: Demonstrates how to use module_utils in a Python module within a collection, showing proper import statements and basic structure.

LANGUAGE: python
CODE:
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.common.text.converters import to_text

from ansible.module_utils.six.moves.urllib.parse import urlencode, quote_plus
from ansible.module_utils.six.moves.urllib.error import HTTPError
from ansible_collections.community.test_collection.plugins.module_utils.qradar import QRadarRequest

argspec = dict(
    name=dict(required=True, type='str'),
    state=dict(choices=['present', 'absent'], required=True),
)

module = AnsibleModule(
    argument_spec=argspec,
    supports_check_mode=True
)

qradar_request = QRadarRequest(
    module,
    headers={"Content-Type": "application/json"},
    not_rest_data_keys=['state']
)

----------------------------------------

TITLE: Enabling Debugger via Environment Variable
DESCRIPTION: Example of how to enable the task debugger using an environment variable when running a playbook.

LANGUAGE: shell
CODE:
ANSIBLE_ENABLE_TASK_DEBUGGER=True ansible-playbook -i hosts site.yml

----------------------------------------

TITLE: Setting Up ansible-core for Testing
DESCRIPTION: Commands for cloning ansible-core repository and setting up the environment for testing.

LANGUAGE: shell
CODE:
git clone https://github.com/ansible/ansible ~/dev/ansible
cd ~/dev/ansible
source hacking/env-setup

----------------------------------------

TITLE: Enabling NX-API on NXOS Device
DESCRIPTION: Task to enable HTTP/HTTPS access for NX-API on a Cisco NXOS device.

LANGUAGE: yaml
CODE:
- name: Enable NX-API
  cisco.nxos.nxos_nxapi:
    enable_http: yes
    enable_https: yes
  when: ansible_network_os == 'cisco.nxos.nxos'

----------------------------------------

TITLE: Asynchronous Task with Status Checking in Ansible Playbook
DESCRIPTION: Execute an asynchronous task and later check its status using the async_status module. This pattern allows for running tasks in the background and synchronizing at a later point in the playbook.

LANGUAGE: yaml
CODE:
- name: Run an async task
  ansible.builtin.yum:
    name: docker-io
    state: present
  async: 1000
  poll: 0
  register: yum_sleeper

- name: Check on an async task
  async_status:
    jid: "{{ yum_sleeper.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 100
  delay: 10

----------------------------------------

TITLE: Enabling Debugger on a Task in YAML
DESCRIPTION: Example of setting the debugger keyword on an individual Ansible task to enable debugging when the task fails.

LANGUAGE: yaml
CODE:
- name: Execute a command
  ansible.builtin.command: "false"
  debugger: on_failed

----------------------------------------

TITLE: Running Ansible Sanity Tests
DESCRIPTION: Commands to run the failed sanity tests locally

LANGUAGE: shell-session
CODE:
ansible-test sanity --test pep8
ansible-test sanity --test validate-modules

----------------------------------------

TITLE: Using Inventory Plugins with Command Line
DESCRIPTION: This snippet demonstrates how to use an inventory plugin by providing an inventory source with the -i flag in the command line.

LANGUAGE: bash
CODE:
ansible hostname -i inventory_source -m ansible.builtin.ping

----------------------------------------

TITLE: Installing Ansible on OpenSUSE
DESCRIPTION: Command for installing Ansible on OpenSUSE Tumbleweed/Leap using zypper package manager.

LANGUAGE: bash
CODE:
$ sudo zypper install ansible

----------------------------------------

TITLE: Converting with_sequence to loop in Ansible
DESCRIPTION: Demonstrates replacing with_sequence using loop, the range function, and the format filter. This allows generation of sequences with custom formatting.

LANGUAGE: yaml+jinja
CODE:
- name: with_sequence
  ansible.builtin.debug:
    msg: "{{ item }}"
  with_sequence: start=0 end=4 stride=2 format=testuser%02x

- name: with_sequence -> loop
  ansible.builtin.debug:
    msg: "{{ 'testuser%02x' | format(item) }}"
  loop: "{{ range(0, 4 + 1, 2)|list }}"

----------------------------------------

TITLE: Creating Mock RDS Client with Side Effects in Python
DESCRIPTION: This snippet creates a mock RDS client with predefined side effects to simulate various instance states for testing.

LANGUAGE: python
CODE:
rds_client_double = MagicMock()
rds_client_double.describe_db_instances.side_effect = [
    simple_instance_list('rebooting', {"a": "b", "c": "d"}),
    simple_instance_list('available', {"c": "d", "e": "f"}),
    simple_instance_list('rebooting', {"a": "b"}),
    simple_instance_list('rebooting', {"e": "f", "g": "h"}),
    simple_instance_list('rebooting', {}),
    simple_instance_list('available', {"g": "h", "i": "j"}),
    simple_instance_list('rebooting', {"i": "j", "k": "l"}),
    simple_instance_list('available', {}),
    simple_instance_list('available', {}),
]

----------------------------------------

TITLE: Backup NXOS Config via NX-API
DESCRIPTION: Task to backup current switch configuration using NX-API connection method with proxy environment variables.

LANGUAGE: yaml
CODE:
- name: Backup current switch config (nxos)
  cisco.nxos.nxos_config:
    backup: yes
  register: backup_nxos_location
  environment: "{{ proxy_env }}"
  when: ansible_network_os == 'cisco.nxos.nxos'

----------------------------------------

TITLE: Defining mandatory values
DESCRIPTION: Use the mandatory filter to require certain variables to be defined

LANGUAGE: jinja2
CODE:
{{ variable | mandatory }}

----------------------------------------

TITLE: Cloning the community.general Git Repository
DESCRIPTION: Clones the community.general collection repository into the appropriate directory within the Ansible collections structure.

LANGUAGE: shell
CODE:
cd ~/dev/ansible/collections/ansible_collections/community
git clone git@github.com:ansible-collections/community.general.git general

----------------------------------------

TITLE: Asynchronous Playbook Task with Polling in Ansible
DESCRIPTION: Define an asynchronous task in a playbook with a 45-second timeout, polling every 5 seconds. This configuration helps avoid connection timeouts for longer-running tasks.

LANGUAGE: yaml
CODE:
- name: Simulate long running op (15 sec), wait for up to 45 sec, poll every 5 sec
  ansible.builtin.command: /bin/sleep 15
  async: 45
  poll: 5

----------------------------------------

TITLE: Syslog Facility Configuration
DESCRIPTION: Example showing how to configure syslog facility in old and new module styles

LANGUAGE: python
CODE:
# Old module_replacer way
import syslog
syslog.openlog(NAME, 0, syslog.LOG_USER)

# New Ansiballz way
import syslog
facility_name = module._syslog_facility
facility = getattr(syslog, facility_name, syslog.LOG_USER)
syslog.openlog(NAME, 0, facility)

----------------------------------------

TITLE: Enabling Debugger at Multiple Levels in YAML
DESCRIPTION: Example showing how to set the debugger keyword at both the play and task level, demonstrating that the task-level setting overrides the play-level setting.

LANGUAGE: yaml
CODE:
- name: Play
  hosts: all
  debugger: never
  tasks:
    - name: Execute a command
      ansible.builtin.command: "false"
      debugger: on_failed

----------------------------------------

TITLE: Specifying Multiple Arguments with local_action in Ansible
DESCRIPTION: This snippet shows how to specify multiple arguments when using local_action, demonstrated with a task that sends a summary email.

LANGUAGE: yaml
CODE:
---
# ...

  tasks:
    - name: Send summary mail
      local_action:
        module: community.general.mail
        subject: "Summary Mail"
        to: "{{ mail_recipient }}"
        body: "{{ mail_body }}"
      run_once: True

----------------------------------------

TITLE: Defining Group Variables in YAML
DESCRIPTION: Examples of defining group variables for different groups (atlanta, webservers, all) in YAML format. These variables can be used in playbooks and templates.

LANGUAGE: yaml
CODE:
---
# file: group_vars/atlanta
ntp: ntp-atlanta.example.com
backup: backup-atlanta.example.com

LANGUAGE: yaml
CODE:
---
# file: group_vars/webservers
apacheMaxRequestsPerChild: 3000
apacheMaxClients: 900

LANGUAGE: yaml
CODE:
---
# file: group_vars/all
ntp: ntp-boston.example.com
backup: backup-boston.example.com

----------------------------------------

TITLE: Renaming a Module in Ansible Core using Symbolic Link
DESCRIPTION: This bash command demonstrates how to create a symbolic link to rename the 'stat' module to 'fileinfo' while maintaining backwards compatibility in the Ansible main repository.

LANGUAGE: bash
CODE:
ln -s stat.py _fileinfo.py

----------------------------------------

TITLE: JSON structure for Ansible inventory script replacing static inventory
DESCRIPTION: Skeleton example of the JSON structure required when replacing a static inventory file with an inventory script.

LANGUAGE: json
CODE:
{
    "_meta": {
      "hostvars": {}
    },
    "all": {
      "children": [
        "ungrouped"
      ]
    },
    "ungrouped": {
      "children": [
      ]
    }
}

----------------------------------------

TITLE: Upgrading Ansible with pip
DESCRIPTION: Command to upgrade existing Ansible installation using pip.

LANGUAGE: console
CODE:
$ python3 -m pip install --upgrade --user ansible

----------------------------------------

TITLE: Setting environment variables at play level
DESCRIPTION: Example of setting environment variables for an entire play using the 'environment' keyword.

LANGUAGE: yaml
CODE:
hosts: servers
environment:
  PATH: "{{ ansible_env.PATH }}:/thingy/bin"
  SOME: value

----------------------------------------

TITLE: Running Destructive Integration Tests in Docker
DESCRIPTION: This command runs destructive integration tests in a Fedora 34 Docker container, which is recommended to protect the host system.

LANGUAGE: shell
CODE:
ansible-test integration destructive/ --docker fedora34

----------------------------------------

TITLE: Module Argument Specification
DESCRIPTION: Example showing how to define module arguments using AnsibleModule's argument_spec

LANGUAGE: python
CODE:
module = AnsibleModule(argument_spec=dict(
    top_level=dict(
        type='dict',
        options=dict(
            second_level=dict(
                default=True,
                type='bool',
            )
        )
    )
))

----------------------------------------

TITLE: Basic Network Playbook
DESCRIPTION: Initial playbook that retrieves and displays network device configuration using the vyos_facts module.

LANGUAGE: yaml
CODE:
---
- name: Network Getting Started First Playbook
  hosts: all
  connection: ansible.netcommon.network_cli
  tasks:
    - name: Get config for VyOS devices
      vyos.vyos.vyos_facts:
        gather_subset: all

    - name: Display the config
      debug:
        msg: "The hostname is {{ ansible_net_hostname }} and the OS is {{ ansible_net_version }}"

----------------------------------------

TITLE: Publishing a Collection to Galaxy
DESCRIPTION: Command to publish an Ansible collection tarball to Galaxy using ansible-galaxy.

LANGUAGE: bash
CODE:
ansible-galaxy collection publish path/to/my_namespace-my_collection-1.0.0.tar.gz

----------------------------------------

TITLE: Displaying Ansible Role Directory Structure
DESCRIPTION: This code block illustrates the standard directory structure for Ansible roles. It shows the hierarchy of folders and files typically found within a role, including common components like tasks, handlers, templates, and variables.

LANGUAGE: text
CODE:
roles/
    common/               # this hierarchy represents a "role"
        tasks/            #
            main.yml      #  <-- tasks file can include smaller files if warranted
        handlers/         #
            main.yml      #  <-- handlers file
        templates/        #  <-- files for use with the template resource
            ntp.conf.j2   #  <------- templates end in .j2
        files/            #
            bar.txt       #  <-- files for use with the copy resource
            foo.sh        #  <-- script files for use with the script resource
        vars/             #
            main.yml      #  <-- variables associated with this role
        defaults/         #
            main.yml      #  <-- default lower priority variables for this role
        meta/             #
            main.yml      #  <-- role dependencies
        library/          # roles can also include custom modules
        module_utils/     # roles can also include custom module_utils
        lookup_plugins/   # or other types of plugins, like lookup in this case

    webtier/              # same kind of structure as "common" was above, done for the webtier role
    monitoring/           # ""
    fooapp/               # ""

----------------------------------------

TITLE: Documenting Ansible Plugins in Python
DESCRIPTION: Demonstrates the traditional method of documenting Ansible plugins using Python variables containing YAML-formatted strings. This approach embeds documentation directly in the Python file.

LANGUAGE: python
CODE:
DOCUMENTATION = r'''
  description: something
  options:
    option_name:
      description: describe this config option
      default: default value for this config option
      env:
        - name: NAME_OF_ENV_VAR
      ini:
        - section: section_of_ansible.cfg_where_this_config_option_is_defined
          key: key_used_in_ansible.cfg
      vars:
        - name: name_of_ansible_var
        - name: name_of_second_var
          version_added: X.x
      required: True/False
      type: boolean/float/integer/list/none/path/pathlist/pathspec/string/tmppath
      version_added: X.x
'''

EXAMPLES = r'''
  # TODO: write examples
'''

----------------------------------------

TITLE: WinRM Troubleshooting Commands
DESCRIPTION: PowerShell and Bash commands for testing WinRM connections and diagnosing common issues.

LANGUAGE: powershell
CODE:
# Test HTTP connection
winrs -r:http://server:5985/wsman -u:Username -p:Password ipconfig

# Test HTTPS connection
winrs -r:https://server:5986/wsman -u:Username -p:Password -ssl ipconfig

LANGUAGE: bash
CODE:
# Verify hostname resolution
dig +search server

# Test WinRM port connectivity
nc -zv server 5985  # HTTP
nc -zv server 5986  # HTTPS

# Test HTTPS certificate
echo '' | openssl s_client -connect server:5986

----------------------------------------

TITLE: Delegating Facts in Ansible Playbook
DESCRIPTION: This snippet demonstrates how to delegate fact gathering to specific machines and assign those facts to the delegated hosts using delegate_facts: true.

LANGUAGE: yaml
CODE:
---
- hosts: app_servers

  tasks:
    - name: Gather facts from db servers
      ansible.builtin.setup:
      delegate_to: "{{ item }}"
      delegate_facts: true
      loop: "{{ groups['dbservers'] }}"

----------------------------------------

TITLE: Managing Local Users and Groups - YAML
DESCRIPTION: Example of creating local Windows users and groups with access control setup for a specific folder.

LANGUAGE: yaml
CODE:
- name: Create local group to contain new users
  win_group:
    name: LocalGroup
    description: Allow access to C:\Development folder

- name: Create local user
  win_user:
    name: '{{ item.name }}'
    password: '{{ item.password }}'
    groups: LocalGroup
    update_password: false
    password_never_expires: true
  loop:
  - name: User1
    password: Password1
  - name: User2
    password: Password2

----------------------------------------

TITLE: Deprecating a Module in a Collection using YAML Configuration
DESCRIPTION: This YAML snippet shows how to add a deprecation entry for a module named 'old_cloud' in a collection's meta/runtime.yml file. It specifies the removal version and warning text for users.

LANGUAGE: yaml
CODE:
plugin_routing:
    modules:
        old_cloud:
            deprecation:
                removal_version: 2.0.0
                warning_text: Use foo.bar.new_cloud instead.

----------------------------------------

TITLE: PowerShell Module Example
DESCRIPTION: Shows how to implement a PowerShell module in a collection with proper requirements and module structure.

LANGUAGE: powershell
CODE:
#!powershell
#AnsibleRequires -CSharpUtil Ansible.Basic
#AnsibleRequires -PowerShell ansible_collections.community.test_collection.plugins.module_utils.hyperv

$spec = @{
    name = @{ required = $true; type = "str" }
    state = @{ required = $true; choices = @("present", "absent") }
}
$module = [Ansible.Basic.AnsibleModule]::Create($args, $spec)

Invoke-HyperVFunction -Name $module.Params.name

$module.ExitJson()

----------------------------------------

TITLE: Installing Ansible documentation dependencies
DESCRIPTION: Installs either the unpinned or tested documentation dependencies using pip.

LANGUAGE: bash
CODE:
pip install -r tests/requirements.in -c tests/requirements.txt # Installs tested dependency versions.
pip install -r tests/requirements.in # Installs the unpinned dependency versions.

----------------------------------------

TITLE: Conditional templating based on group membership
DESCRIPTION: Example of using group_names to create conditional templates based on host group membership.

LANGUAGE: jinja
CODE:
{% if 'webserver' in group_names %}
   # some part of a configuration file that only applies to webservers
{% endif %}

----------------------------------------

TITLE: Replacing WeOS 4 Configuration
DESCRIPTION: Task example showing how to replace the entire configuration of a WeOS 4 device using a configuration file with exact matching and full config replacement.

LANGUAGE: yaml
CODE:
- name: Replace configuration with file on ansible host (WeOS 4)
  ansible.netcommon.cli_config:
    config: "{{ lookup('file', 'westermo.conf') }}"
    replace: "yes"
    diff_match: exact
    diff_replace: config
  when: ansible_network_os == 'community.network.weos4'

----------------------------------------

TITLE: Verifying Specific Collection Version in Bash
DESCRIPTION: This command verifies a specific version of a collection. It's useful for pre-release or non-latest versions.

LANGUAGE: bash
CODE:
ansible-galaxy collection verify my_namespace.my_collection:1.0.0

----------------------------------------

TITLE: Using Ansible-Vault for Sensitive Variables in YAML
DESCRIPTION: Demonstrates how to use ansible-vault to encrypt sensitive information like passwords in a YAML inventory file. This ensures that sensitive data is securely stored within the inventory.

LANGUAGE: yaml
CODE:
vyos: # this is a group in yaml inventory, but you can also do under a host
  vars:
    ansible_connection: ansible.netcommon.network_cli
    ansible_network_os: vyos.vyos.vyos
    ansible_user: my_vyos_user
    ansible_password:  !vault |
         $ANSIBLE_VAULT;1.2;AES256;my_user
         66386134653765386232383236303063623663343437643766386435663632343266393064373933
         3661666132363339303639353538316662616638356631650a316338316663666439383138353032
         63393934343937373637306162366265383461316334383132626462656463363630613832313562
         3837646266663835640a313164343535316666653031353763613037656362613535633538386539
         65656439626166666363323435613131643066353762333232326232323565376635

----------------------------------------

TITLE: JSON structure for Ansible inventory script with _meta section
DESCRIPTION: Example of using the _meta section in an Ansible inventory script output to improve performance for large numbers of hosts.

LANGUAGE: json
CODE:
{

    # results of inventory script as above go here
    # ...

    "_meta": {
        "hostvars": {
            "host001": {
                "var001" : "value"
            },
            "host002": {
                "var002": "value"
            }
        }
    }
}

----------------------------------------

TITLE: Creating an Ansible Collection from a Custom Template
DESCRIPTION: Initialize a collection using a custom skeleton template. This command allows specifying a custom skeleton path and passing extra variables from a JSON file.

LANGUAGE: bash
CODE:
ansible_collections#> ansible-galaxy collection init --collection-skeleton /path/to/my/namespace/skeleton --extra-vars "@my_vars_file.json" my_namespace.my_collection

----------------------------------------

TITLE: ICX Config Backup Task in Ansible
DESCRIPTION: Example task showing how to backup the configuration of an ICX switch using the community.network.icx_config module with conditional execution based on network OS.

LANGUAGE: yaml
CODE:
- name: Backup current switch config (icx)
  community.network.icx_config:
    backup: yes
  register: backup_icx_location
  when: ansible_network_os == 'community.network.icx'

----------------------------------------

TITLE: Verifying Collections from requirements.yml in Bash
DESCRIPTION: This command verifies collections listed in a requirements.yml file. Dependencies in the file are not included and should be verified separately.

LANGUAGE: bash
CODE:
ansible-galaxy collection verify -r requirements.yml

----------------------------------------

TITLE: Setting Up WinRM HTTPS Listener in PowerShell
DESCRIPTION: PowerShell script to create a self-signed certificate, set up an HTTPS listener for WinRM, and open the firewall port for HTTPS.

LANGUAGE: powershell
CODE:
# Create self signed certificate
$certParams = @{
    CertStoreLocation = 'Cert:\LocalMachine\My'
    DnsName           = $env:COMPUTERNAME
    NotAfter          = (Get-Date).AddYears(1)
    Provider          = 'Microsoft Software Key Storage Provider'
    Subject           = "CN=$env:COMPUTERNAME"
}
$cert = New-SelfSignedCertificate @certParams

# Create HTTPS listener
$httpsParams = @{
    ResourceURI = 'winrm/config/listener'
    SelectorSet = @{
        Transport = "HTTPS"
        Address   = "*"
    }
    ValueSet = @{
        CertificateThumbprint = $cert.Thumbprint
        Enabled               = $true
    }
}
New-WSManInstance @httpsParams

# Opens port 5986 for all profiles
$firewallParams = @{
    Action      = 'Allow'
    Description = 'Inbound rule for Windows Remote Management via WS-Management. [TCP 5986]'
    Direction   = 'Inbound'
    DisplayName = 'Windows Remote Management (HTTPS-In)'
    LocalPort   = 5986
    Profile     = 'Any'
    Protocol    = 'TCP'
}
New-NetFirewallRule @firewallParams

----------------------------------------

TITLE: Passing Single Vault Password in Ansible Playbook Execution
DESCRIPTION: Demonstrates how to provide a single vault password when running an Ansible playbook, either by prompting for input or reading from a file.

LANGUAGE: bash
CODE:
ansible-playbook --ask-vault-pass site.yml

LANGUAGE: bash
CODE:
ansible-playbook --vault-password-file /path/to/my/vault-password-file site.yml

LANGUAGE: bash
CODE:
ansible-playbook --vault-password-file my-vault-password-client.py

----------------------------------------

TITLE: Configuring L3 Interface using Cisco IOS Resource Module
DESCRIPTION: This snippet demonstrates how to use the cisco.ios.ios_l3_interfaces module to configure an L3 interface on a Cisco IOS device. It shows the basic structure of the task and how different states affect the configuration.

LANGUAGE: yaml
CODE:
- name: configure l3 interface
  cisco.ios.ios_l3_interfaces:
    config: "{{ config }}"
    state: <state>

----------------------------------------

TITLE: Runtime Configuration Example
DESCRIPTION: Demonstrates how to configure runtime.yml for collection metadata, including version requirements and plugin routing.

LANGUAGE: yaml
CODE:
plugin_routing:
  inventory:
    kubevirt:
      redirect: community.general.kubevirt
    my_inventory:
      tombstone:
        removal_version: "2.0.0"
        warning_text: my_inventory has been removed. Please use other_inventory instead.
  modules:
    my_module:
      deprecation:
        removal_date: "2021-11-30"
        warning_text: my_module will be removed in a future release of this collection. Use another.collection.new_module instead.
      redirect: another.collection.new_module
    podman_image:
      redirect: containers.podman.podman_image

----------------------------------------

TITLE: Git Repository Setup Commands - Bash
DESCRIPTION: Series of git commands for setting up repository remotes and creating a working branch.

LANGUAGE: bash
CODE:
$ cd ~/ansible_collections/NAMESPACE/COLLECTION_NAME
$ git status
$ git remote -v
$ git remote add upstream https://github.com/ansible-collections/COLLECTION_REPO.git
$ git fetch upstream
$ git rebase upstream/main
$ git checkout -b name_of_my_branch

----------------------------------------

TITLE: Complex YAML Data Structures
DESCRIPTION: Illustrates nested data structures combining lists and dictionaries for more complex configurations.

LANGUAGE: yaml
CODE:
# Employee records
- martin:
    name: Martin D'vloper
    job: Developer
    skills:
      - python
      - perl
      - pascal
- tabitha:
    name: Tabitha Bitumen
    job: Developer
    skills:
      - lisp
      - fortran
      - erlang

----------------------------------------

TITLE: Listing Ansible Collections in Custom Paths
DESCRIPTION: This command demonstrates how to list collections in custom paths using the -p option. Multiple search paths can be specified by separating them with a colon.

LANGUAGE: shell
CODE:
> ansible-galaxy collection list -p '/opt/ansible/collections:/etc/ansible/collections'

# /opt/ansible/collections/ansible_collections
Collection      Version
--------------- -------
sandwiches.club 1.7.2

# /etc/ansible/collections/ansible_collections
Collection     Version
-------------- -------
sandwiches.pbj 1.2.0

# /home/astark/.ansible/collections/ansible_collections
Collection                 Version
-------------------------- -------
cisco.aci                  0.0.5
cisco.mso                  0.0.4
fortinet.fortios           1.0.1
sandwiches.ham             *
splunk.es                  0.0.5

# /usr/share/ansible/collections/ansible_collections
Collection        Version
----------------- -------
fortinet.fortios  1.0.6
pureport.pureport 0.0.8
sensu.sensu_go    1.3.0

----------------------------------------

TITLE: Enabling eAPI on Arista EOS Switch using Ansible
DESCRIPTION: Ansible task to enable eAPI (HTTP and HTTPS) on an Arista EOS switch. This task uses the arista.eos.eos_eapi module and requires privilege escalation.

LANGUAGE: yaml
CODE:
- name: Enable eAPI
  arista.eos.eos_eapi:
    enable_http: yes
    enable_https: yes
  become: true
  become_method: enable
  when: ansible_network_os == 'arista.eos.eos'

----------------------------------------

TITLE: Installing Software Using Chocolatey and Package Managers - YAML
DESCRIPTION: Examples of installing 7-Zip using three different methods: Chocolatey package manager, Windows package installer (MSI), and direct command execution.

LANGUAGE: yaml
CODE:
# Install/uninstall with chocolatey
- name: Ensure 7-Zip is installed through Chocolatey
  win_chocolatey:
    name: 7zip
    state: present

- name: Ensure 7-Zip is not installed through Chocolatey
  win_chocolatey:
    name: 7zip
    state: absent

# Install/uninstall with win_package
- name: Download the 7-Zip package
  win_get_url:
    url: https://www.7-zip.org/a/7z1701-x64.msi
    dest: C:\temp\7z.msi

- name: Ensure 7-Zip is installed through win_package
  win_package:
    path: C:\temp\7z.msi
    state: present

----------------------------------------

TITLE: Setting Module Arguments for Testing in Python
DESCRIPTION: This snippet shows how to set module arguments for testing Ansible modules using the set_module_args function.

LANGUAGE: python
CODE:
import json
from units.modules.utils import set_module_args
from ansible.module_utils.common.text.converters import to_bytes

def test_already_registered(self):
    set_module_args({
        'activationkey': 'key',
        'username': 'user',
        'password': 'pass',
    })

----------------------------------------

TITLE: Using FQCNs for Various Collection Contents in Ansible Playbook (YAML+Jinja)
DESCRIPTION: This snippet shows how to reference different types of collection contents using their FQCNs in an Ansible playbook. It includes examples of importing a role, calling a module, and using a lookup plugin with a filter.

LANGUAGE: yaml+jinja
CODE:
- name: Reference collections contents using their FQCNs
  hosts: all
  tasks:

    - name: Import a role
      ansible.builtin.import_role:
        name: my_namespace.my_collection.role1

    - name: Call a module
      my_namespace.mycollection.my_module:
        option1: value

    - name: Call a debug task
      ansible.builtin.debug:
        msg: '{{ lookup("my_namespace.my_collection.lookup1", "param1") | my_namespace.my_collection.filter1 }}'

----------------------------------------

TITLE: Configuring CLI Connection for Arista EOS in Ansible
DESCRIPTION: YAML configuration for setting up CLI connection to Arista EOS devices using SSH. Includes settings for authentication, privilege escalation, and SSH proxy command for bastion host access.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: arista.eos.eos
ansible_user: myuser
ansible_password: !vault...
ansible_become: true
ansible_become_method: enable
ansible_become_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Removing Collection
DESCRIPTION: Commands to remove an installed collection from the filesystem

LANGUAGE: bash
CODE:
rm -rf ~/.ansible/collections/ansible_collections/community/general
rm -rf ./venv/lib/python3.9/site-packages/ansible_collections/community/general

----------------------------------------

TITLE: Configuring CLI Connection for Cisco NXOS
DESCRIPTION: YAML configuration for establishing CLI connections to NXOS devices using SSH. Includes authentication, privilege escalation, and bastion host settings.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: cisco.nxos.nxos
ansible_user: myuser
ansible_password: !vault...
ansible_become: true
ansible_become_method: enable
ansible_become_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Installing WinRM Python Dependencies for Ansible
DESCRIPTION: Commands to install the required Python packages for using WinRM with Ansible, using either pipx or pip.

LANGUAGE: shell
CODE:
pipx inject "pypsrp<=1.0.0"  # for psrp
pipx inject "pywinrm>=0.4.0"  # for winrm

LANGUAGE: shell
CODE:
pip3 install "pypsrp<=1.0.0"  # for psrp
pip3 install "pywinrm>=0.4.0"  # for winrm

----------------------------------------

TITLE: Encrypted Network Password Configuration
DESCRIPTION: Example showing how to store encrypted network device passwords using Ansible Vault

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: vyos.vyos.vyos
ansible_user: my_vyos_user
ansible_ssh_pass: !vault |
                 $ANSIBLE_VAULT;1.1;AES256
                 39336231636137663964343966653162353431333566633762393034646462353062633264303765
                 6331643066663534383564343537343334633031656538370a333737656236393835383863306466
                 62633364653238323333633337313163616566383836643030336631333431623631396364663533
                 3665626431626532630a353564323566316162613432373738333064366130303637616239396438
                 9853

----------------------------------------

TITLE: Indicating Task Change Status in Ansible Module Output
DESCRIPTION: Demonstrates how modules return a boolean value to indicate if changes were made to the target system.

LANGUAGE: yaml
CODE:
"changed": true

----------------------------------------

TITLE: Building full Ansible community package documentation
DESCRIPTION: Builds all module documentation for the Ansible community package plus all reStructuredText files.

LANGUAGE: bash
CODE:
make webdocs

----------------------------------------

TITLE: Implementing Metaclass Boilerplate with Future Imports in Python
DESCRIPTION: This example demonstrates the full recommended boilerplate for Python files in Ansible, including future imports and the metaclass definition. It also shows how this affects class definitions, ensuring they are new-style classes in Python 2.

LANGUAGE: python
CODE:
from __future__ import absolute_import, division, print_function
__metaclass__ = type

class Foo:
    # This is a new-style class even on Python 2 because of the __metaclass__
    pass

----------------------------------------

TITLE: Running 'show version' Command on ERIC_ECCLI Devices with Ansible
DESCRIPTION: This task example shows how to execute the 'show version' command on ERIC_ECCLI devices using the community.network.eric_eccli_command module. It includes a conditional check to ensure the task runs only on ERIC_ECCLI devices.

LANGUAGE: yaml
CODE:
- name: run show version on remote devices (eric_eccli)
  community.network.eric_eccli_command:
     commands: show version
  when: ansible_network_os == 'community.network.eric_eccli'

----------------------------------------

TITLE: Applying no_log to an entire play
DESCRIPTION: Example of using the 'no_log' attribute at the play level to hide all output.

LANGUAGE: yaml
CODE:
- hosts: all
  no_log: True

----------------------------------------

TITLE: Generating Basic Ansible Configuration File
DESCRIPTION: Command to generate a default ansible.cfg file containing all disabled settings. This creates a configuration file that can be modified to override Ansible's default behavior.

LANGUAGE: console
CODE:
$ ansible-config init --disabled > ansible.cfg

----------------------------------------

TITLE: Complex configuration validation with block/rescue
DESCRIPTION: Example of implementing complex configuration validation using block/rescue and backups.

LANGUAGE: yaml
CODE:
- name: maintain config and backout if validation after change fails
  block:
    - name: do the actual update, works with copy, lineinfile and any action that allows for `backup`.
      template: src=template.j2 dest=/x/y/z backup=yes moreoptions=stuff
      register: updated

    - name: run validation, this will change a lot as needed. We assume it returns an error when not passing, use `failed_when` if otherwise.
      shell: run_validation_commmand
      become: true
      become_user: requiredbyapp
      environment:
        WEIRD_REQUIREMENT: 1
      when: updated is changed
  rescue:
    - name: restore backup file to original, in the hope the previous configuration was working.
      copy:
         remote_src: true
         dest: /x/y/z
         src: "{{ updated['backup_file'] }}"
      when: updated is changed
  always:
    - name: We choose to always delete backup, but could copy or move, or only delete in rescue.
      file:
         path: "{{ updated['backup_file'] }}"
         state: absent
      when: updated is changed

----------------------------------------

TITLE: Testing Module in Ansible Playbook
DESCRIPTION: YAML playbook example demonstrating how to integrate and test a custom module, including registering and displaying the module's output.

LANGUAGE: yaml
CODE:
- name: test my new module
  hosts: localhost
  tasks:
  - name: run the new module
    my_test:
      name: 'hello'
      new: true
    register: testout
  - name: dump test output
    debug:
      msg: '{{ testout }}'

----------------------------------------

TITLE: NETCONF Inventory Configuration
DESCRIPTION: Example inventory configuration for Junos devices using NETCONF connection.

LANGUAGE: ini
CODE:
[junos:vars]
ansible_connection=ansible.netcommon.netconf
ansible_network_os=junipernetworks.junos.junos
ansible_user=myuser
ansible_password=!vault |

----------------------------------------

TITLE: Accessing the first host in a group
DESCRIPTION: Example of accessing variables from the first host in a group using Jinja2 templating.

LANGUAGE: jinja2
CODE:
{{ hostvars[groups['webservers'][0]]['ansible_eth0']['ipv4']['address'] }}

----------------------------------------

TITLE: Setting User Connection in Ansible Inventory
DESCRIPTION: Shows how to configure connection settings and users for specific hosts in an Ansible inventory file.

LANGUAGE: text
CODE:
other1.example.com     ansible_connection=ssh        ansible_user=myuser
other2.example.com     ansible_connection=ssh        ansible_user=myotheruser

----------------------------------------

TITLE: Python imports for Ansible modules
DESCRIPTION: The proper way to import the AnsibleModule class in Ansible modules.

LANGUAGE: python
CODE:
from module_utils.basic import AnsibleModule

----------------------------------------

TITLE: Manual SSH Connection to Network Device
DESCRIPTION: Commands to manually connect to a VyOS router and view its configuration.

LANGUAGE: bash
CODE:
ssh my_vyos_user@vyos.example.net
show config
exit

----------------------------------------

TITLE: Indicating Task Failure in Ansible Module Output
DESCRIPTION: Shows how modules return a boolean value to indicate if the task failed or not.

LANGUAGE: yaml
CODE:
"failed": false

----------------------------------------

TITLE: Referencing facts from other hosts
DESCRIPTION: Example of referencing facts from one system when configuring another system.

LANGUAGE: jinja
CODE:
{{ hostvars['asdf.example.com']['ansible_facts']['os_family'] }}

----------------------------------------

TITLE: Importing String Types for Python 2/3 Compatibility in Ansible
DESCRIPTION: This snippet demonstrates how to import and use string type classes from ansible.module_utils.six for type checking that works across Python versions.

LANGUAGE: Python
CODE:
from ansible.module_utils.six import string_types, binary_type, text_type

# Use this instead of isinstance(s, basestring)
isinstance(s, string_types)

# Or this for more specific type checking
isinstance(s, (binary_type, text_type))

----------------------------------------

TITLE: Executing RouterOS Command Task in YAML
DESCRIPTION: Task definition for displaying resource statistics on RouterOS devices using the community.network.routeros_command module. Includes conditional execution based on network OS type.

LANGUAGE: yaml
CODE:
- name: Display resource statistics (routeros)
  community.network.routeros_command:
    commands: /system resource print
  register: routeros_resources
  when: ansible_network_os == 'community.network.routeros'

----------------------------------------

TITLE: Configuring CLI Group Variables for Dell OS9 in Ansible
DESCRIPTION: This YAML snippet demonstrates how to set up group variables for connecting to Dell OS9 devices using CLI over SSH. It includes settings for network_cli connection, OS type, authentication, privilege escalation, and bastion host configuration.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: dellemc.os9.os9
ansible_user: myuser
ansible_password: !vault...
ansible_become: true
ansible_become_method: enable
ansible_become_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Adding Tags to Blocks in YAML
DESCRIPTION: Example of adding tags to a block of tasks in an Ansible playbook YAML file. Shows tagging a block of NTP-related tasks with the 'ntp' tag.

LANGUAGE: yaml
CODE:
# myrole/tasks/main.yml
- name: ntp tasks
  tags: ntp
  block:
  - name: Install ntp
    ansible.builtin.yum:
      name: ntp
      state: present

  - name: Configure ntp
    ansible.builtin.template:
      src: ntp.conf.j2
      dest: /etc/ntp.conf
    notify:
    - restart ntpd

  - name: Enable and run ntpd
    ansible.builtin.service:
      name: ntpd
      state: started
      enabled: true

- name: Install NFS utils
  ansible.builtin.yum:
    name:
    - nfs-utils
    - nfs-util-lib
    state: present
  tags: filesharing

----------------------------------------

TITLE: Returning Module Invocation Details in Ansible Output
DESCRIPTION: Demonstrates how modules return information about how they were invoked, including module arguments.

LANGUAGE: yaml
CODE:
"invocation": {
        "module_args": {
            "_original_basename": "foo.txt",
            "attributes": null,
            "backup": true,
            "checksum": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
            "content": null,
            "delimiter": null,
            "dest": "./foo.txt",
            "directory_mode": null,
            "follow": false,
            "force": true,
            "group": null,
            "local_follow": null,
            "mode": "666",
            "owner": null,
            "regexp": null,
            "remote_src": null,
            "selevel": null,
            "serole": null,
            "setype": null,
            "seuser": null,
            "src": "/Users/foo/.ansible/tmp/ansible-tmp-1596115458.110205-105717464505158/source",
            "unsafe_writes": null,
            "validate": null
        }

----------------------------------------

TITLE: Defining Table of Contents in reStructuredText for Ansible Installation Guide
DESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It includes links to introduction, distribution-specific installation, and configuration pages.

LANGUAGE: restructuredtext
CODE:
.. toctree::
   :maxdepth: 2

   intro_installation
   installation_distros
   intro_configuration

----------------------------------------

TITLE: Offline Verification of Signed Collection in Bash
DESCRIPTION: This command verifies a signed collection offline using previously saved signature data.

LANGUAGE: bash
CODE:
ansible-galaxy collection verify my_namespace.my_collection --offline --keyring ~/.ansible/pubring.kbx

----------------------------------------

TITLE: Gathering FRR Facts with Ansible Task
DESCRIPTION: This YAML snippet shows an Ansible task for gathering FRR facts using the frr.frr.frr_facts module. It specifies the gather_subset to collect configuration and hardware information.

LANGUAGE: yaml
CODE:
- name: Gather FRR facts
  frr.frr.frr_facts:
    gather_subset:
     - config
     - hardware

----------------------------------------

TITLE: Configuring environment variables for raw module on z/OS UNIX
DESCRIPTION: Shows how to set necessary environment variables when using the ansible.builtin.raw module on z/OS UNIX. This is required because the raw module ignores remote environment settings by default.

LANGUAGE: yaml
CODE:
ansible.builtin.raw: |
    export _BPXK_AUTOCVT: "ON" ;
    export _CEE_RUNOPTS: "FILETAG(AUTOCVT,AUTOTAG) POSIX(ON)" ;
    export _TAG_REDIR_ERR: "txt" ;
    export _TAG_REDIR_IN: "txt" ;
    export _TAG_REDIR_OUT: "txt" ;
    echo "hello world!"

----------------------------------------

TITLE: Adding Variables to YAML Inventory
DESCRIPTION: Expands the basic YAML inventory by adding variables such as ansible_host, ansible_network_os, and ansible_user to each device. This allows for more detailed configuration and reduces the need for command-line flags.

LANGUAGE: yaml
CODE:
---

leafs:
  hosts:
    leaf01:
      ansible_host: 10.16.10.11
      ansible_network_os: vyos.vyos.vyos
      ansible_user: my_vyos_user
    leaf02:
      ansible_host: 10.16.10.12
      ansible_network_os: vyos.vyos.vyos
      ansible_user: my_vyos_user

spines:
  hosts:
    spine01:
      ansible_host: 10.16.10.13
      ansible_network_os: vyos.vyos.vyos
      ansible_user: my_vyos_user
    spine02:
      ansible_host: 10.16.10.14
      ansible_network_os: vyos.vyos.vyos
      ansible_user: my_vyos_user

network:
  children:
    leafs:
    spines:

webservers:
  hosts:
    webserver01:
      ansible_host: 10.16.10.15
      ansible_user: my_server_user
    webserver02:
      ansible_host: 10.16.10.16
      ansible_user: my_server_user

datacenter:
  children:
    network:
    webservers:

----------------------------------------

TITLE: First Ansible Network Command
DESCRIPTION: Command to retrieve network device configuration using Ansible's network_cli connection and vyos_facts module.

LANGUAGE: bash
CODE:
ansible all -i vyos.example.net, -c ansible.netcommon.network_cli -u my_vyos_user -k -m vyos.vyos.vyos_facts -e ansible_network_os=vyos.vyos.vyos

----------------------------------------

TITLE: Basic Module Test Implementation
DESCRIPTION: YAML tasks implementing basic test cases for the abstract_service_info module

LANGUAGE: yaml
CODE:
- name: Fetch info from abstract service
  abstract_service_info:
    host: 127.0.0.1
    port: 1234
  register: result

- name: Test the output
  assert:
    that:
      - result.version == '1.0.0'

----------------------------------------

TITLE: Enabling Debugger as a Strategy in YAML
DESCRIPTION: Example of how to enable the debugger as a strategy at the play level in a playbook.

LANGUAGE: yaml
CODE:
- hosts: test
  strategy: debug
  tasks:
    - name: Example task
      debug:
        msg: "This is a debug message"

----------------------------------------

TITLE: Updating Legacy Exception Handling in Python
DESCRIPTION: Demonstrates the migration from using ansible.module_utils.pycompat24.get_exception to modern Python exception handling with 'as' keyword. Shows both the legacy approach using get_exception() and the updated syntax that should be used instead.

LANGUAGE: python
CODE:
# Unfixed code:
try:
    raise IOError('test')
except IOError:
    e = get_exception()
    do_something(e)
except:
    e = get_exception()
    do_something_else(e)

# After fixing:
try:
    raise IOError('test')
except IOErrors as e:
    do_something(e)
except Exception as e:
    do_something_else(e)

----------------------------------------

TITLE: Displaying Modified Collection Files in Bash
DESCRIPTION: This command shows the output when a collection contains modified content. It lists the altered files under the collection name.

LANGUAGE: bash
CODE:
ansible-galaxy collection verify my_namespace.my_collection
Collection my_namespace.my_collection contains modified content in the following files:
my_namespace.my_collection
    plugins/inventory/my_inventory.py
    plugins/modules/my_module.py

----------------------------------------

TITLE: Configuring CLI Group Variables for IronWare in Ansible
DESCRIPTION: This YAML snippet demonstrates how to set up group variables for connecting to IronWare devices using CLI in Ansible. It includes configurations for network connection, authentication, privilege escalation, and SSH proxy command for bastion host access.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: community.network.ironware
ansible_user: myuser
ansible_password: !vault...
ansible_become: true
ansible_become_method: enable
ansible_become_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Disabling Host Key Checking
DESCRIPTION: Configuration options for disabling SSH host key checking in Ansible through either config file or environment variable.

LANGUAGE: text
CODE:
[defaults]
host_key_checking = False

LANGUAGE: bash
CODE:
$ export ANSIBLE_HOST_KEY_CHECKING=False

----------------------------------------

TITLE: Installing Development Version from GitHub
DESCRIPTION: Commands for installing and setting up Ansible development version from GitHub source.

LANGUAGE: console
CODE:
$ python3 -m pip install --user https://github.com/ansible/ansible/archive/devel.tar.gz

$ git clone https://github.com/ansible/ansible.git
$ cd ./ansible
$ source ./hacking/env-setup
$ python3 -m pip install --user -r ./requirements.txt
$ git pull --rebase

----------------------------------------

TITLE: Setting Remote User in Ansible Playbook
DESCRIPTION: Demonstrates how to specify a remote user for Ansible connections in a playbook configuration. Uses the remote_user parameter to define an admin user for webserver updates.

LANGUAGE: yaml
CODE:
---
- name: update webservers
  hosts: webservers
  remote_user: admin

  tasks:
  - name: thing to do first in this playbook

  # ...

----------------------------------------

TITLE: Recommendations for Hosts in Collection Playbooks (YAML+Jinja)
DESCRIPTION: This snippet provides recommendations for specifying the 'hosts' directive in playbooks distributed within collections. It shows examples of using 'all', 'localhost', and a variable with a default value to make the playbook more flexible and reusable.

LANGUAGE: yaml+jinja
CODE:
- hosts: all  # Use --limit or customized inventory to restrict hosts targeted

- hosts: localhost  # For things you want to restrict to the control node

- hosts: '{{target|default("webservers")}}'  # Assumes inventory provides a 'webservers' group, but can also use ``-e 'target=host1,host2'``

----------------------------------------

TITLE: Backing Up IronWare Switch Configuration in Ansible
DESCRIPTION: This YAML task uses the community.network.ironware_config module to backup the current configuration of an IronWare switch. It registers the backup location and only executes when the network OS is identified as IronWare.

LANGUAGE: yaml
CODE:
- name: Backup current switch config (ironware)
  community.network.ironware_config:
    backup: yes
  register: backup_ironware_location
  when: ansible_network_os == 'community.network.ironware'

----------------------------------------

TITLE: Backing up Cisco IOS Configuration
DESCRIPTION: Ansible task that creates a backup of the current switch configuration when the network OS is cisco.ios.ios.

LANGUAGE: yaml
CODE:
- name: Backup current switch config (ios)
  cisco.ios.ios_config:
    backup: yes
  register: backup_ios_location
  when: ansible_network_os == 'cisco.ios.ios'

----------------------------------------

TITLE: Running Asynchronous Task with Polling in Ansible
DESCRIPTION: Execute a long-running operation asynchronously with a 30-minute timeout, polling for status every 60 seconds. This approach allows Ansible to monitor the task's progress.

LANGUAGE: bash
CODE:
$ ansible all -B 1800 -P 60 -a "/usr/bin/long_running_operation --do-stuff"

----------------------------------------

TITLE: Role-Based Tasks Configuration
DESCRIPTION: Tasks definition for the system_demo role that configures hostname and DNS servers on network devices.

LANGUAGE: yaml
CODE:
---
- name: configure hostname
  cisco.ios.ios_config:
    lines: hostname {{ inventory_hostname }}

- name: configure DNS
  cisco.ios.ios_config:
    lines: ip name-server {{dns}}

----------------------------------------

TITLE: PostgreSQL Setup Test Implementation
DESCRIPTION: YAML tasks for setting up PostgreSQL database for testing

LANGUAGE: yaml
CODE:
- name: Install required packages
  package:
    name:
      - apt-utils
      - postgresql
      - postgresql-common
      - python3-psycopg2

- name: Initialize PostgreSQL
  shell: . /usr/share/postgresql-common/maintscripts-functions && set_system_locale && /usr/bin/pg_createcluster -u postgres 12 main
  args:
    creates: /etc/postgresql/12/

- name: Start PostgreSQL service
  ansible.builtin.service:
    name: postgresql
    state: started

----------------------------------------

TITLE: Running Integration Tests in Ubuntu 18.04 Container
DESCRIPTION: This command runs all CI integration test targets for POSIX platforms in a Ubuntu 18.04 container.

LANGUAGE: shell
CODE:
ansible-test integration shippable/ --docker ubuntu1804

----------------------------------------

TITLE: Dictionary Iteration Using items() Method
DESCRIPTION: Shows how to iterate over dictionary key-value pairs using the items() method, which is compatible with Python 3. This is the simpler, more straightforward approach.

LANGUAGE: python
CODE:
for KEY, VALUE in DICT.items():
   pass

----------------------------------------

TITLE: Configuring NOS Group Variables in Ansible
DESCRIPTION: Example configuration for group_vars/nos.yml showing required connection parameters for NOS devices including network CLI connection, OS type, authentication, and optional bastion host configuration.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: community.network.nos
ansible_user: myuser
ansible_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Setting Inventory Cache Plugin via Environment Variable in Shell
DESCRIPTION: Sets the ANSIBLE_INVENTORY_CACHE_PLUGIN environment variable to use the jsonfile cache plugin for inventory caching.

LANGUAGE: shell
CODE:
export ANSIBLE_INVENTORY_CACHE_PLUGIN=jsonfile

----------------------------------------

TITLE: Defining Host-Specific Variables in Ansible Inventory
DESCRIPTION: This snippet shows how to set variables for specific hosts in an Ansible inventory using YAML format.

LANGUAGE: yaml
CODE:
all:
  hosts:
    mail.example.com:
      ansible_port: 5555
      ansible_host: 192.0.2.50

----------------------------------------

TITLE: Enabling Vars Plugins in Ansible Configuration
DESCRIPTION: This snippet demonstrates how to enable vars plugins in the Ansible configuration file. It shows how to specify both built-in and collection-based vars plugins.

LANGUAGE: ini
CODE:
[defaults]
vars_plugins_enabled = host_group_vars,namespace.collection_name.vars_plugin_name

----------------------------------------

TITLE: Accessing host facts in a Jinja2 template
DESCRIPTION: Example of accessing host facts within a Jinja2 template after populating them with a play.

LANGUAGE: jinja2
CODE:
{% for host in groups['db_servers'] %}
   {{ hostvars[host]['ansible_eth0']['ipv4']['address'] }}
{% endfor %}

----------------------------------------

TITLE: Configuring Collection-based Inventory Cache Plugin in ansible.cfg
DESCRIPTION: Sets the cache_plugin option in the [inventory] section of ansible.cfg to use a cache plugin from a collection using its fully qualified name.

LANGUAGE: ini
CODE:
[inventory]
cache_plugin=collection_namespace.collection_name.cache_plugin

----------------------------------------

TITLE: Direct Assignment in Ansible Tasks and Plugins
DESCRIPTION: Illustrates direct assignment of options to action plugins, modules, and other plugin types in Ansible.

LANGUAGE: yaml
CODE:
- debug: msg='this is a direct assignment option to an action plugin'

- ping:
    data: also a direct assignment

LANGUAGE: text
CODE:
lookup('plugin', direct1='value', direct2='value2')

'value_directly_assigned'|filter('another directly assigned')

'direct value' is testplugin

----------------------------------------

TITLE: Enabling NETCONF on CloudEngine OS using Ansible
DESCRIPTION: Task to enable NETCONF on a CloudEngine OS device using the ce_config module with CLI connection.

LANGUAGE: yaml
CODE:
- name: Enable NETCONF
  connection: ansible.netcommon.network_cli
  community.network.ce_config:
    lines:
      - snetconf server enable
  when: ansible_network_os == 'community.network.ce'

----------------------------------------

TITLE: Multiple Failure Conditions
DESCRIPTION: Shows how to combine multiple conditions to determine task failure using failed_when.

LANGUAGE: yaml
CODE:
- name: Check if a file exists in temp and fail task if it does
  ansible.builtin.command: ls /tmp/this_should_not_be_here
  register: result
  failed_when:
    - result.rc == 0
    - '"No such" not in result.stderr'

----------------------------------------

TITLE: Building Ansible Collection Documentation
DESCRIPTION: Execute the build script to generate the HTML documentation for your Ansible collection.

LANGUAGE: shell
CODE:
./build.sh

----------------------------------------

TITLE: Setting Environment Variables for a Task in Ansible
DESCRIPTION: Demonstrates how to set an environment variable (http_proxy) for a specific task in an Ansible playbook.

LANGUAGE: yaml
CODE:
- hosts: all
  remote_user: root

  tasks:

    - name: Install cobbler
      ansible.builtin.package:
        name: cobbler
        state: present
      environment:
        http_proxy: http://proxy.example.com:8080

----------------------------------------

TITLE: Templating Changes in Playbooks
DESCRIPTION: Example showing how templating syntax needs to be updated in Ansible 6. Arithmetic operations must now be performed inside Jinja templates.

LANGUAGE: yaml
CODE:
- name: Prior to 2.13
  debug:
    msg: '[1] + {{ [2] }}'

- name: 2.13 and forward
  debug:
    msg: '{{ [1] + [2] }}'

----------------------------------------

TITLE: Returning Command Standard Output in Ansible Module Output
DESCRIPTION: Illustrates how modules that execute commands return the command's standard output.

LANGUAGE: yaml
CODE:
"stdout": "foo!"

----------------------------------------

TITLE: Enabling Inventory Caching in ansible.cfg
DESCRIPTION: Enables inventory caching by setting the cache option to True in the [inventory] section of ansible.cfg.

LANGUAGE: ini
CODE:
[inventory]
cache=True

----------------------------------------

TITLE: Ansible version structure
DESCRIPTION: JSON structure showing the format of the ansible_version variable.

LANGUAGE: json
CODE:
{
    "ansible_version": {
        "full": "2.10.1",
        "major": 2,
        "minor": 10,
        "revision": 1,
        "string": "2.10.1"
    }
}

----------------------------------------

TITLE: Multiple Handler Notifications in Ansible
DESCRIPTION: Demonstrates how to notify multiple handlers from a single task and the order of handler execution based on their definition.

LANGUAGE: yaml
CODE:
tasks:
- name: Template configuration file
  ansible.builtin.template:
    src: template.j2
    dest: /etc/foo.conf
  notify:
    - Restart apache
    - Restart memcached

handlers:
  - name: Restart memcached
    ansible.builtin.service:
      name: memcached
      state: restarted

  - name: Restart apache
    ansible.builtin.service:
      name: apache
      state: restarted

----------------------------------------

TITLE: Enabling Fact Cache Plugin via Environment Variable in Shell
DESCRIPTION: Sets the ANSIBLE_CACHE_PLUGIN environment variable to use the jsonfile cache plugin for fact caching.

LANGUAGE: shell
CODE:
export ANSIBLE_CACHE_PLUGIN=jsonfile

----------------------------------------

TITLE: Downloading a Specific Version of an Ansible Collection
DESCRIPTION: This command downloads a specific version (1.0.0) of an Ansible collection.

LANGUAGE: bash
CODE:
ansible-galaxy collection download my_namespace.my_collection:1.0.0

----------------------------------------

TITLE: Specifying Strategy in Ansible Playbook
DESCRIPTION: This YAML snippet demonstrates how to specify a strategy plugin directly in an Ansible playbook. It uses the 'debug' strategy and includes tasks for copying a file and installing a package, along with a handler to restart a service.

LANGUAGE: yaml
CODE:
- hosts: all
  strategy: debug
  tasks:
    - copy:
        src: myhosts 
        dest: /etc/hosts
      notify: restart_tomcat

    - package:
        name: tomcat
        state: present

  handlers:
    - name: restart_tomcat
      service:
        name: tomcat
        state: restarted

----------------------------------------

TITLE: Enabling PowerShell Remoting on Windows Host
DESCRIPTION: This PowerShell command enables PowerShell Remoting on a Windows host, which is required for running Windows integration tests.

LANGUAGE: powershell
CODE:
Enable-PSRemoting -Force

----------------------------------------

TITLE: RST Table of Contents Configuration
DESCRIPTION: ReStructuredText directive setting up local table of contents with depth 2

LANGUAGE: rst
CODE:
.. contents::
   :local:
   :depth: 2

----------------------------------------

TITLE: Executing Ansible Playbook with Start-at-Task Option
DESCRIPTION: This command demonstrates how to start executing an Ansible playbook at a specific task using the --start-at-task option. It's useful for resuming playbook execution from a particular point, often after a previous failure.

LANGUAGE: shell
CODE:
ansible-playbook playbook.yml --start-at-task="install packages"

----------------------------------------

TITLE: Running Integration Tests with ansible-test
DESCRIPTION: Executes integration tests for an Ansible collection using Docker. Examples show running all integration tests or tests in a specific directory.

LANGUAGE: shell
CODE:
ansible-test integration --docker fedora35 -v

LANGUAGE: shell
CODE:
ansible-test integration --docker fedora35 -v connection_bar

----------------------------------------

TITLE: Implementing HTTP API Request Handler in Python
DESCRIPTION: Implementation of send_request method for httpapi plugins to handle HTTP requests with authentication headers.

LANGUAGE: python
CODE:
from ansible.module_utils.six.moves.urllib.error import HTTPError

def send_request(self, data, path, method='POST'):
    # Fixed headers for requests
    headers = {'Content-Type': 'application/json'}
    try:
        response, response_content = self.connection.send(path, data, method=method, headers=headers)
    except HTTPError as exc:
        return exc.code, exc.read()

    # handle_response (defined separately) will take the format returned by the device
    # and transform it into something more suitable for use by modules.
    # This may be JSON text to Python dictionaries, for example.
    return handle_response(response_content)

----------------------------------------

TITLE: Configuring Boolean Variables in When Conditionals
DESCRIPTION: Example showing how to handle string boolean values in when conditionals using the bool filter

LANGUAGE: yaml
CODE:
vars:
  teardown: 'false'

tasks:
  - include_tasks: teardown.yml
    when: teardown | bool

  - include_tasks: provision.yml
    when: not teardown | bool

----------------------------------------

TITLE: Indicating Task Skip Status in Ansible Module Output
DESCRIPTION: Shows how modules return a boolean value to indicate if the task was skipped.

LANGUAGE: yaml
CODE:
"skipped": true

----------------------------------------

TITLE: Running Windows Integration Tests
DESCRIPTION: This command runs the Windows integration tests that are executed by the CI system, using a predefined Windows inventory.

LANGUAGE: shell
CODE:
ansible-test windows-integration -v shippable/

----------------------------------------

TITLE: Using AnsibleModule Basic Class
DESCRIPTION: The main class for Ansible modules that provides core functionality and utilities. Contains params for module parameters, debug and logging capabilities, and command execution methods.

LANGUAGE: python
CODE:
ansible.module_utils.basic.AnsibleModule

----------------------------------------

TITLE: Using PsDscRunAsCredential in Ansible
DESCRIPTION: Example of how to use PsDscRunAsCredential to run DSC as a different user in Ansible.

LANGUAGE: yaml
CODE:
- name: Use win_dsc with PsDscRunAsCredential to run as a different user
  win_dsc:
    resource_name: Registry
    Ensure: Present
    Key: HKEY_CURRENT_USER\ExampleKey
    ValueName: TestValue
    ValueData: TestData
    PsDscRunAsCredential_username: '{{ ansible_user }}'
    PsDscRunAsCredential_password: '{{ ansible_password }}'
  no_log: true

----------------------------------------

TITLE: Executing EXOS-API Command in Ansible YAML
DESCRIPTION: Example YAML task to retrieve the EXOS OS version using the exos_command module via EXOS-API. The task is conditionally executed based on the ansible_network_os variable.

LANGUAGE: yaml
CODE:
- name: Retrieve EXOS OS version
  community.network.exos_command:
    commands: show version
  when: ansible_network_os == 'community.network.exos'

----------------------------------------

TITLE: Global Group Variables Configuration
DESCRIPTION: Group variables applied to all servers defining HTTP port and NTP server settings.

LANGUAGE: yaml
CODE:
---
httpd_port: 80
ntpserver: 192.0.2.23

----------------------------------------

TITLE: Custom Fileglob Variable Generation in Ansible
DESCRIPTION: Creates a custom list of fileglobs based on a variable using Python argument list unpacking.

LANGUAGE: yaml
CODE:
- hosts: all
  vars:
    mygroups:
      - prod
      - web
  tasks:
    - name: Copy a glob of files based on a list of groups
      copy:
        src: "{{ item }}"
        dest: "/tmp/{{ item }}"
      loop: '{{ q("fileglob", *globlist) }}'
      vars:
        globlist: '{{ mygroups | map("regex_replace", "^(.*)$", "files/\1/*.conf") | list }}'

----------------------------------------

TITLE: Setting ANSIBLE_LOAD_CALLBACK_PLUGINS Environment Variable
DESCRIPTION: This shell command demonstrates how to set the ANSIBLE_LOAD_CALLBACK_PLUGINS environment variable, which is an alternative way to enable bin_ansible_callbacks for ad hoc commands.

LANGUAGE: shell
CODE:
export ANSIBLE_LOAD_CALLBACK_PLUGINS=1

----------------------------------------

TITLE: Checking Library Dependencies in Ansible Module Main Function
DESCRIPTION: Example of how to check for required library dependencies in the main function of an Ansible module and fail gracefully if dependencies are missing.

LANGUAGE: python
CODE:
if not HAS_LIB:
    module.fail_json(msg=missing_required_lib("foo"),
                     exception=LIB_IMP_ERR)

----------------------------------------

TITLE: Defining Collection Dependencies in YAML
DESCRIPTION: Example of specifying Git repository dependencies in galaxy.yml for local development and testing.

LANGUAGE: yaml
CODE:
dependencies: {'git@github.com:organization/repo_name.git': 'devel'}

----------------------------------------

TITLE: Creating Tables in reStructuredText
DESCRIPTION: Shows how to create accessible tables with headers and descriptive titles in Ansible documentation using reStructuredText.

LANGUAGE: restructuredtext
CODE:
.. table:: File descriptions

  +----------+----------------------------+
  |File      |Purpose                     |
  +==========+============================+
  |foo.txt   |foo configuration settings  |
  +----------+----------------------------+
  |bar.txt   |bar configuration settings  |
  +----------+----------------------------+

----------------------------------------

TITLE: Python Display Import Example
DESCRIPTION: Updated code for importing the Display class in Ansible 2.8

LANGUAGE: python
CODE:
from ansible.utils.display import Display
display = Display()

----------------------------------------

TITLE: Enabling Debugger as a Strategy in ansible.cfg
DESCRIPTION: Example of how to enable the debugger as the default strategy in the ansible.cfg configuration file.

LANGUAGE: ini
CODE:
[defaults]
strategy = debug

----------------------------------------

TITLE: AWS Region Module Defaults Configuration
DESCRIPTION: Shows how to set default AWS region for multiple EC2-related modules using module_defaults.

LANGUAGE: yaml
CODE:
- hosts: localhost
  vars:
    my_region: us-west-2
  module_defaults:
    amazon.aws.ec2:
      region: '{{ my_region }}'
    community.aws.ec2_instance_info:
      region: '{{ my_region }}'
    amazon.aws.ec2_vpc_net_info:
      region: '{{ my_region }}'

----------------------------------------

TITLE: Combining items from multiple lists
DESCRIPTION: Use zip and zip_longest filters to combine elements from multiple lists

LANGUAGE: yaml+jinja
CODE:
- name: Give me list combo of two lists
  ansible.builtin.debug:
    msg: "{{ [1,2,3,4,5,6] | zip(['a','b','c','d','e','f']) | list }}"

- name: Give me the shortest combo of two lists
  ansible.builtin.debug:
    msg: "{{ [1,2,3] | zip(['a','b','c','d','e','f']) | list }}"

- name: Give me the longest combo of three lists, fill with X
  ansible.builtin.debug:
    msg: "{{ [1,2,3] | zip_longest(['a','b','c','d','e','f'], [21, 22, 23], fillvalue='X') | list }}"

----------------------------------------

TITLE: Navigating to Ansible Temporary Directory
DESCRIPTION: Commands to access the temporary directory containing the module files, including optional SSH access for remote debugging.

LANGUAGE: shell
CODE:
$ ssh remotehost  # only if not debugging against localhost
$ cd /home/badger/.ansible/tmp/ansible-tmp-1461434734.35-235318071810595

----------------------------------------

TITLE: Ansible Playbook Webserver Example
DESCRIPTION: Example of targeting the webservers group in an Ansible playbook.

LANGUAGE: yaml
CODE:
- name: restart webservers
  hosts: webservers

----------------------------------------

TITLE: Configuring NX-API Connection for Cisco NXOS
DESCRIPTION: YAML configuration for establishing NX-API connections to NXOS devices using HTTP/HTTPS. Includes authentication and proxy settings.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.httpapi
ansible_network_os: cisco.nxos.nxos
ansible_user: myuser
ansible_password: !vault...
proxy_env:
  http_proxy: http://proxy.example.com:8080

----------------------------------------

TITLE: Defining Changed Status in Tasks
DESCRIPTION: Examples of using changed_when to customize when a task reports as changed.

LANGUAGE: yaml
CODE:
- name: Report 'changed' when the return code is not equal to 2
  ansible.builtin.shell: /usr/bin/billybass --mode="take me to the river"
  register: bass_result
  changed_when: "bass_result.rc != 2"

- name: This will never report 'changed' status
  ansible.builtin.shell: wall 'beep'
  changed_when: False

----------------------------------------

TITLE: Installing Custom DSC Resource with win_psmodule
DESCRIPTION: Example of how to install a custom DSC resource using the win_psmodule Ansible module.

LANGUAGE: yaml
CODE:
- name: Install xWebAdministration DSC resource
  win_psmodule:
    name: xWebAdministration
    state: present

----------------------------------------

TITLE: Using Test Plugins with Parameters in Ansible Tasks
DESCRIPTION: Shows how to pass both positional and named parameters to test plugins. Includes examples of using match, truthy, and version tests with different parameter types.

LANGUAGE: YAML+Jinja
CODE:
tasks:
- name: pass a positional parameter to match test
  action: dostuff
  when: myurl is match("https://example.com/users/.*/resources")

- name: pass named parameter to truthy test
  action: dostuff
  when: myvariable is truthy(convert_bool=True)

- name: pass both types to 'version' test
  action: dostuff
  when: sample_semver_var is version('2.0.0-rc.1+build.123', 'lt', version_type='semver')

----------------------------------------

TITLE: Requirements File Example
DESCRIPTION: YAML-formatted requirements file showing various ways to specify roles including from Galaxy, Git repositories, and web URLs.

LANGUAGE: yaml
CODE:
# from galaxy
- name: yatesr.timezone

# from locally cloned Git repository
- src: git+file:///home/bennojoy/nginx

# from GitHub
- src: https://github.com/bennojoy/nginx

# from GitHub, overriding the name and specifying a specific tag
- name: nginx_role
  src: https://github.com/bennojoy/nginx
  version: main

----------------------------------------

TITLE: Cloning and Configuring Collection Repository in Bash
DESCRIPTION: Commands for cloning the forked collection repository, navigating to the directory, and checking out the PR branch for testing.

LANGUAGE: bash
CODE:
git clone https://github.com/AUTHOR_ACC/COLLECTION_REPO.git ~/ansible_collections/NAMESPACE/COLLECTION_NAME

LANGUAGE: bash
CODE:
cd ~/ansible_collections/NAMESPACE/COLLECTION_NAME

LANGUAGE: bash
CODE:
git checkout pr_branch

----------------------------------------

TITLE: Dynamic Handler Include Example in YAML
DESCRIPTION: Shows how to include and trigger handler tasks dynamically using include_tasks.

LANGUAGE: yaml
CODE:
- name: Trigger an included (dynamic) handler
  hosts: localhost
  handlers:
    - name: Restart services
      include_tasks: restarts.yml
  tasks:
    - command: "true"
      notify: Restart services

----------------------------------------

TITLE: Backing Up Dell OS9 Switch Configuration in Ansible
DESCRIPTION: This YAML task uses the dellemc.os9.os9_config module to backup the current configuration of a Dell OS9 switch. It conditionally executes based on the network OS and registers the backup location.

LANGUAGE: yaml
CODE:
- name: Backup current switch config (dellos9)
  dellemc.os9.os9_config:
    backup: yes
  register: backup_dellos9_location
  when: ansible_network_os == 'dellemc.os9.os9'

----------------------------------------

TITLE: JSONARGS Module Example
DESCRIPTION: Example showing how JSONARGS modules handle argument string replacement

LANGUAGE: python
CODE:
json_arguments = """<<INCLUDE_ANSIBLE_MODULE_JSON_ARGS>>"""

----------------------------------------

TITLE: Generating Native .NET Images for VM Performance
DESCRIPTION: Ansible task to generate native .NET images for CPU optimization in VM/cloud instances. This task helps prevent high CPU usage during boot by pre-processing the NGEN queue in golden images.

LANGUAGE: yaml
CODE:
- name: generate native .NET images for CPU
  win_dotnet_ngen:

----------------------------------------

TITLE: Aborting Plays with any_errors_fatal
DESCRIPTION: Demonstrates using any_errors_fatal to stop play execution on all hosts after the first failure.

LANGUAGE: yaml
CODE:
- hosts: somehosts
  any_errors_fatal: true
  roles:
    - myrole

- hosts: somehosts
  tasks:
    - block:
        - include_tasks: mytasks.yml
      any_errors_fatal: true

----------------------------------------

TITLE: Making variables optional with omit
DESCRIPTION: Use the special omit value to make module parameters optional

LANGUAGE: yaml+jinja
CODE:
- name: Touch files with an optional mode
  ansible.builtin.file:
    dest: "{{ item.path }}"
    state: touch
    mode: "{{ item.mode | default(omit) }}"
  loop:
    - path: /tmp/foo
    - path: /tmp/bar
    - path: /tmp/baz
      mode: "0444"

----------------------------------------

TITLE: Setting Up Cobbler Profiles and Systems for Ansible
DESCRIPTION: This bash snippet demonstrates how to set up Cobbler profiles and systems with management classes and metadata for use with Ansible.

LANGUAGE: bash
CODE:
cobbler profile add --name=webserver --distro=CentOS6-x86_64
cobbler profile edit --name=webserver --mgmt-classes="webserver" --ksmeta="a=2 b=3"
cobbler system edit --name=foo --dns-name="foo.example.com" --mgmt-classes="atlanta" --ksmeta="c=4"
cobbler system edit --name=bar --dns-name="bar.example.com" --mgmt-classes="atlanta" --ksmeta="c=5"

----------------------------------------

TITLE: Manual KDC Realm Configuration
DESCRIPTION: Detailed Kerberos configuration with manually specified KDC realms and domain mappings.

LANGUAGE: ini
CODE:
[libdefaults]
    default_realm = MY.DOMAIN.COM
    dns_lookup_kdc = false

[realms]
    MY.DOMAIN.COM = {
        kdc = domain-controller1.my.domain.com
        kdc = domain-controller2.my.domain.com
    }

[domain_realm]
    .my.domain.com = MY.DOMAIN.COM
    my.domain.com = MY.DOMAIN.COM

----------------------------------------

TITLE: Providing Default Values in vars_prompt
DESCRIPTION: Shows how to set a default value for a vars_prompt variable that can be overridden by user input. This is useful for variables that change infrequently.

LANGUAGE: yaml
CODE:
vars_prompt:

  - name: release_version
    prompt: Product release version
    default: "1.0"

----------------------------------------

TITLE: Windows integration test example
DESCRIPTION: Example of an integration test for a Windows module, including check mode and idempotency checks.

LANGUAGE: yaml
CODE:
- name: remove a file (check mode)
  win_file:
    path: C:\temp
    state: absent
  register: remove_file_check
  check_mode: true

- name: get result of remove a file (check mode)
  win_command: powershell.exe "if (Test-Path -Path 'C:\temp') { 'true' } else { 'false' }"
  register: remove_file_actual_check

- name: assert remove a file (check mode)
  assert:
    that:
    - remove_file_check is changed
    - remove_file_actual_check.stdout == 'true\r\n'

- name: remove a file
  win_file:
    path: C:\temp
    state: absent
  register: remove_file

- name: get result of remove a file
  win_command: powershell.exe "if (Test-Path -Path 'C:\temp') { 'true' } else { 'false' }"
  register: remove_file_actual

- name: assert remove a file
  assert:
    that:
    - remove_file is changed
    - remove_file_actual.stdout == 'false\r\n'

- name: remove a file (idempotent)
  win_file:
    path: C:\temp
    state: absent
  register: remove_file_again

- name: assert remove a file (idempotent)
  assert:
    that:
    - not remove_file_again is changed

----------------------------------------

TITLE: Using Items Lookup in Ansible Loop
DESCRIPTION: Shows how to use the items lookup plugin in a loop to iterate over a list of values.

LANGUAGE: YAML+Jinja
CODE:
tasks:
  - name: count to 3
    debug: msg={{ item }}
    with_items: [1, 2, 3]

----------------------------------------

TITLE: Role Dependencies in meta/main.yml
DESCRIPTION: Example of defining role dependencies and metadata in meta/main.yml file.

LANGUAGE: yaml
CODE:
---
dependencies:
  - geerlingguy.java

galaxy_info:
  author: geerlingguy
  description: Elasticsearch for Linux.
  company: "Midwestern Mac, LLC"
  license: "license (BSD, MIT)"
  min_ansible_version: 2.4
  galaxy_tags:
    - web
    - system
    - monitoring
    - logging
    - lucene
    - elk
    - elasticsearch

----------------------------------------

TITLE: ReStructuredText Document Structure for Ansible Collection Removal Process
DESCRIPTION: ReStructuredText formatted documentation that defines the structure and content for the Ansible collection removal process. Includes section headers, lists, and reference links.

LANGUAGE: restructuredtext
CODE:
*****************************************************
Ansible Community Package Collections Removal Process
*****************************************************

.. contents::
   :local:

Overview
========

Sometimes the Ansible community removes a collection from the Ansible package for stability, legal, or security reasons.

----------------------------------------

TITLE: RST Header and Contents Definition
DESCRIPTION: ReStructuredText markup defining the document header and table of contents configuration

LANGUAGE: rst
CODE:
.. _core_roadmap_2.16:

*****************
Ansible-core 2.16
*****************

.. contents::
   :local:

----------------------------------------

TITLE: Displaying Standalone Role Directory Structure
DESCRIPTION: Shows the typical directory structure of a standalone Ansible role, highlighting directories that will change when migrating to a collection.

LANGUAGE: bash
CODE:
role/
├── defaults
├── files
├── handlers
├── library
├── meta
├── module_utils
├── [*_plugins]
├── tasks
├── templates
├── tests
└── vars

----------------------------------------

TITLE: Displaying Collection Directory Structure
DESCRIPTION: Illustrates the directory structure of an Ansible collection, showing where roles and plugins are located within the collection.

LANGUAGE: bash
CODE:
mynamespace/
└── mycollection/
  ├── docs/
  ├── galaxy.yml
  ├── plugins/
  │   ├── modules/
  │   │   └── module1.py
  │   ├── inventory/
  │   └── .../
  ├── README.md
  ├── roles/
  │   ├── role1/
  │   ├── role2/
  │   └── .../
  ├── playbooks/
  │   ├── files/
  │   ├── vars/
  │   ├── templates/
  │   └── tasks/
  └── tests/

----------------------------------------

TITLE: Handling Special Characters in vars_prompt
DESCRIPTION: Shows how to allow special characters in prompted values by using the 'unsafe' option. This is necessary when input may contain characters that could cause templating errors.

LANGUAGE: yaml
CODE:
vars_prompt:
  - name: my_password_with_weird_chars
    prompt: Enter password
    unsafe: true
    private: true

----------------------------------------

TITLE: Defining Table of Contents in reStructuredText for Ansible Core Documentation
DESCRIPTION: This snippet demonstrates how to structure the table of contents for various sections of the Ansible Core documentation using reStructuredText directives. It organizes content into logical sections such as getting started, installation, usage, contributing, and reference materials.

LANGUAGE: reStructuredText
CODE:
.. toctree::
   :maxdepth: 2
   :caption: Ansible getting started

   getting_started/index

.. toctree::
   :maxdepth: 2
   :caption: Installation, Upgrade & Configuration

   installation_guide/index
   porting_guides/core_porting_guides

.. toctree::
   :maxdepth: 2
   :caption: Using Ansible Core

   inventory_guide/index
   command_guide/index
   playbook_guide/index
   vault_guide/index
   module_plugin_guide/index
   collections_guide/index
   os_guide/index
   tips_tricks/index

.. toctree::
   :maxdepth: 2
   :caption: Contributing to Ansible Core

   community/index
   community/contributions
   community/advanced_index
   dev_guide/style_guide/index

.. toctree::
   :maxdepth: 2
   :caption: Extending Ansible

   dev_guide/index

.. toctree::
   :maxdepth: 2
   :caption: Ansible Galaxy

   galaxy/user_guide.rst
   galaxy/dev_guide.rst

.. toctree::
   :maxdepth: 1
   :caption: Reference & Appendices

   collections/index
   collections/all_plugins
   reference_appendices/playbooks_keywords
   reference_appendices/common_return_values
   reference_appendices/config
   reference_appendices/general_precedence
   reference_appendices/YAMLSyntax
   reference_appendices/python_3_support
   reference_appendices/interpreter_discovery
   reference_appendices/release_and_maintenance
   reference_appendices/test_strategies
   dev_guide/testing/sanity/index
   reference_appendices/faq
   reference_appendices/glossary
   reference_appendices/module_utils
   reference_appendices/special_variables
   reference_appendices/tower
   reference_appendices/automationhub
   reference_appendices/logging

.. toctree::
   :maxdepth: 2
   :caption: Roadmaps

   roadmap/ansible_core_roadmap_index.rst

----------------------------------------

TITLE: URL encoding and splitting
DESCRIPTION: Use urlencode and urlsplit filters for URL operations

LANGUAGE: jinja2
CODE:
{{ 'Trollhättan' | urlencode }}
{{ "http://user:password@www.acme.com:9000/dir/index.html?query=term#fragment" | urlsplit('hostname') }}

----------------------------------------

TITLE: Creating Azure VM with DSC in Ansible
DESCRIPTION: Example of how to use DSC to create an Azure VM in Ansible.

LANGUAGE: yaml
CODE:
- name: Install xAzure DSC resources
  win_psmodule:
    name: xAzure
    state: present

- name: Create virtual machine in Azure
  win_dsc:
    resource_name: xAzureVM
    ImageName: a699494373c04fc0bc8f2bb1389d6106__Windows-Server-2012-R2-201409.01-en.us-127GB.vhd
    Name: DSCHOST01
    ServiceName: ServiceName
    StorageAccountName: StorageAccountName
    InstanceSize: Medium
    Windows: true
    Ensure: Present
    Credential_username: '{{ ansible_user }}'
    Credential_password: '{{ ansible_password }}'

----------------------------------------

TITLE: Creating Files and Directories with DSC in Ansible
DESCRIPTION: Examples of how to use DSC to create files and directories in Ansible.

LANGUAGE: yaml
CODE:
- name: Create file with some text
  win_dsc:
    resource_name: File
    DestinationPath: C:\temp\file
    Contents: |
        Hello
        World
    Ensure: Present
    Type: File

- name: Create directory that is hidden is set with the System attribute
  win_dsc:
    resource_name: File
    DestinationPath: C:\temp\hidden-directory
    Attributes: Hidden,System
    Ensure: Present
    Type: Directory

----------------------------------------

TITLE: Converting with_flattened to loop in Ansible
DESCRIPTION: Shows how to replace with_flattened using loop and the flatten filter. The flatten filter is used without specifying levels to flatten all nested lists.

LANGUAGE: yaml+jinja
CODE:
- name: with_flattened
  ansible.builtin.debug:
    msg: "{{ item }}"
  with_flattened: "{{ items }}"

- name: with_flattened -> loop
  ansible.builtin.debug:
    msg: "{{ item }}"
  loop: "{{ items|flatten }}"

----------------------------------------

TITLE: Running Code Coverage Tests
DESCRIPTION: Example commands for running code coverage tests with ansible-test and generating reports.

LANGUAGE: shell
CODE:
ansible-test coverage erase
ansible-test units --coverage apt
ansible-test integration --coverage aws_lambda
ansible-test coverage html

----------------------------------------

TITLE: Configuring Ansible Strategy in ansible.cfg
DESCRIPTION: This snippet shows how to set the default Ansible strategy in the ansible.cfg configuration file. It sets the strategy to 'linear'.

LANGUAGE: ini
CODE:
[defaults]
strategy=linear

----------------------------------------

TITLE: Managing File Permissions with Ansible
DESCRIPTION: These examples show how to use the file module to change file permissions, ownership, and create or delete directories on remote hosts.

LANGUAGE: bash
CODE:
$ ansible webservers -m ansible.builtin.file -a "dest=/srv/foo/a.txt mode=600"
$ ansible webservers -m ansible.builtin.file -a "dest=/srv/foo/b.txt mode=600 owner=mdehaan group=mdehaan"
$ ansible webservers -m ansible.builtin.file -a "dest=/path/to/c mode=755 owner=mdehaan group=mdehaan state=directory"
$ ansible webservers -m ansible.builtin.file -a "dest=/path/to/c state=absent"

----------------------------------------

TITLE: Running PostgreSQL Info Integration Test
DESCRIPTION: Specific example of running integration tests for the postgresql_info module using a Fedora 34 container. Shows practical application of the test command structure.

LANGUAGE: bash
CODE:
ansible-test integration postgresql_info --docker fedora34

----------------------------------------

TITLE: Creating and Asserting PostgreSQL User in Ansible Integration Test
DESCRIPTION: This code snippet demonstrates an integration test for the postgresql_user module. It creates a user, checks the module's output, and verifies the actual system state using a database query.

LANGUAGE: yaml
CODE:
- name: Create PostgreSQL user and store module's output to the result variable
  community.postgresql.postgresql_user:
    name: test_user
  register: result

- name: Check the module returns what we expect
  assert:
    that:
      - result is changed

- name: Check actual system state with another module, in other words, that the user exists
  community.postgresql.postgresql_query:
    query: SELECT * FROM pg_authid WHERE rolename = 'test_user'
  register: query_result

- name: We expect it returns one row, check it
  assert:
    that:
      - query_result.rowcount == 1

----------------------------------------

TITLE: Writing Text to File in Python 2/3
DESCRIPTION: Example of writing text content to a file in a way that works in both Python 2 and 3. Uses the to_bytes function for conversion.

LANGUAGE: python
CODE:
from ansible.module_utils.common.text.converters import to_bytes

with open('filename.txt', 'wb') as my_file:
    my_file.write(to_bytes(some_text_string))

----------------------------------------

TITLE: Ignoring Lookup Errors in Ansible
DESCRIPTION: Shows how to configure a lookup plugin to ignore errors when a file is not found.

LANGUAGE: YAML+Jinja
CODE:
- name: if this file does not exist, I do not care .. file plugin itself warns anyway ...
  debug: msg="{{ lookup('file', '/nosuchfile', errors='ignore') }}"

----------------------------------------

TITLE: Converting with_dict to loop in Ansible
DESCRIPTION: Shows two options for replacing with_dict using loop. Option 1 uses the dict2items filter, while option 2 uses the dictsort filter. Both allow iteration over dictionary key-value pairs.

LANGUAGE: yaml+jinja
CODE:
- name: with_dict
  ansible.builtin.debug:
    msg: "{{ item.key }} - {{ item.value }}"
  with_dict: "{{ dictionary }}"

- name: with_dict -> loop (option 1)
  ansible.builtin.debug:
    msg: "{{ item.key }} - {{ item.value }}"
  loop: "{{ dictionary|dict2items }}"

- name: with_dict -> loop (option 2)
  ansible.builtin.debug:
    msg: "{{ item.0 }} - {{ item.1 }}"
  loop: "{{ dictionary|dictsort }}"

----------------------------------------

TITLE: Importing Playbook from Collection in Ansible Playbook (YAML)
DESCRIPTION: This snippet shows how to import a playbook from a collection within another Ansible playbook using the ansible.builtin.import_playbook module. It demonstrates the syntax for specifying the collection namespace, name, and playbook.

LANGUAGE: yaml
CODE:
- name: Import a playbook
  ansible.builtin.import_playbook: my_namespace.my_collection.playbookX

----------------------------------------

TITLE: Configuring Default Shell for Windows SSH
DESCRIPTION: PowerShell commands to set and reset the default shell between PowerShell and CMD for OpenSSH on Windows.

LANGUAGE: powershell
CODE:
# Set default to powershell.exe
$shellParams = @{
    Path         = 'HKLM:\SOFTWARE\OpenSSH'
    Name         = 'DefaultShell'
    Value        = 'C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe'
    PropertyType = 'String'
    Force        = $true
}
New-ItemProperty @shellParams

# Set default back to cmd.exe
Remove-ItemProperty -Path HKLM:\SOFTWARE\OpenSSH -Name DefaultShell

----------------------------------------

TITLE: Implementing Custom CLI Parser Plugin in Python
DESCRIPTION: Example of a custom cli_parser plugin implementation for parsing command output in Ansible collections.

LANGUAGE: python
CODE:
from ansible_collections.ansible.netcommon.plugins.module_utils.cli_parser.cli_parserbase import (
    CliParserBase,
)

class CliParser(CliParserBase):
    """ Sample cli_parser plugin
    """

    # Use the follow extension when loading a template
    DEFAULT_TEMPLATE_EXTENSION = "txt"
    # Provide the contents of the template to the parse function
    PROVIDE_TEMPLATE_CONTENTS = True

    def myparser(text, template_contents):
      # parse the text using the template contents
      return {...}

    def parse(self, *_args, **kwargs):
        """ Standard entry point for a cli_parse parse execution

        :return: Errors or parsed text as structured data
        :rtype: dict

        :example:

        The parse function of a parser should return a dict:
        {"errors": [a list of errors]}
        or
        {"parsed": obj}
        """
        template_contents = kwargs["template_contents"]
        text = self._task_args.get("text")
        try:
            parsed = myparser(text, template_contents)
        except Exception as exc:
            msg = "Custom parser returned an error while parsing. Error: {err}"
            return {"errors": [msg.format(err=to_native(exc))]}
        return {"parsed": parsed}

----------------------------------------

TITLE: Converting with_nested/with_cartesian to loop in Ansible
DESCRIPTION: Demonstrates replacing with_nested and with_cartesian using loop and the product filter. This allows creation of the Cartesian product of multiple lists.

LANGUAGE: yaml+jinja
CODE:
- name: with_nested
  ansible.builtin.debug:
    msg: "{{ item.0 }} - {{ item.1 }}"
  with_nested:
    - "{{ list_one }}"
    - "{{ list_two }}"

- name: with_nested -> loop
  ansible.builtin.debug:
    msg: "{{ item.0 }} - {{ item.1 }}"
  loop: "{{ list_one|product(list_two)|list }}"

----------------------------------------

TITLE: Installing Python Dependencies for Ansible Collection Documentation
DESCRIPTION: Install the required Python packages for building the documentation site. It's recommended to use a virtual environment for isolation.

LANGUAGE: shell
CODE:
pip install -r requirements.txt

----------------------------------------

TITLE: Displaying Ansible Role Directory Structure
DESCRIPTION: Shows the complete directory structure for Ansible roles with comments explaining the purpose of each directory. Includes core role components like tasks, handlers, templates, and variable definitions, as well as advanced features like custom modules and plugins.

LANGUAGE: text
CODE:
roles/
    common/               # this hierarchy represents a "role"
        tasks/            #
            main.yml      #  <-- tasks file can include smaller files if warranted
        handlers/         #
            main.yml      #  <-- handlers file
        templates/        #  <-- files for use with the template resource
            ntp.conf.j2   #  <------- templates end in .j2
        files/            #
            bar.txt       #  <-- files for use with the copy resource
            foo.sh        #  <-- script files for use with the script resource
        vars/             #
            main.yml      #  <-- variables associated with this role
        defaults/         #
            main.yml      #  <-- default lower priority variables for this role
        meta/             #
            main.yml      #  <-- role dependencies and optional Galaxy info
        library/          # roles can also include custom modules
        module_utils/     # roles can also include custom module_utils
        lookup_plugins/   # or other types of plugins, like lookup in this case

    webtier/              # same kind of structure as "common" was above, done for the webtier role
    monitoring/           # ""
    fooapp/               # ""

----------------------------------------

TITLE: Installing OpenSSH Server on Windows
DESCRIPTION: PowerShell commands to install and configure the OpenSSH server on Windows Server 2022 and later. Sets up the service, configures firewall rules, and sets PowerShell as the default shell.

LANGUAGE: powershell
CODE:
Get-WindowsCapability -Name OpenSSH.Server* -Online |
    Add-WindowsCapability -Online
Set-Service -Name sshd -StartupType Automatic -Status Running

$firewallParams = @{
    Name        = 'sshd-Server-In-TCP'
    DisplayName = 'Inbound rule for OpenSSH Server (sshd) on TCP port 22'
    Action      = 'Allow'
    Direction   = 'Inbound'
    Enabled     = 'True'  # This is not a boolean but an enum
    Profile     = 'Any'
    Protocol    = 'TCP'
    LocalPort   = 22
}
New-NetFirewallRule @firewallParams

$shellParams = @{
    Path         = 'HKLM:\SOFTWARE\OpenSSH'
    Name         = 'DefaultShell'
    Value        = 'C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe'
    PropertyType = 'String'
    Force        = $true
}
New-ItemProperty @shellParams

----------------------------------------

TITLE: Installing and Running Abstract Service
DESCRIPTION: YAML tasks for installing and running an abstract service using package manager and systemd

LANGUAGE: yaml
CODE:
- name: Install abstract service
  package:
    name: abstract_service

- name: Run the service
  systemd:
    name: abstract_service
    state: started

----------------------------------------

TITLE: Conditional Template Security Example in YAML
DESCRIPTION: Demonstrates the secure way to handle conditional expressions with untrusted data after CVE-2023-5764 fix in ansible-core 2.15.7. Shows both the insecure pattern to avoid and the recommended secure approach.

LANGUAGE: yaml
CODE:
- name: task with a module result (always untrusted by Ansible)
  shell: echo "hi mom"
  register: untrusted_result

# don't do it this way...
# - name: insecure conditional with embedded template consulting untrusted data
#   assert:
#     that: '"hi mom" is in {{ untrusted_result.stdout }}'

- name: securely access untrusted values directly as Jinja variables instead
  assert:
    that: '"hi mom" is in untrusted_result.stdout'

----------------------------------------

TITLE: Testing Await Resource Function in Python
DESCRIPTION: This snippet demonstrates how to test an await_resource function using the mock RDS client and assertions.

LANGUAGE: python
CODE:
rds_i.await_resource(rds_client_double, "some-instance", "available", mod_mock,
                     await_pending=1)
assert(len(sleeper_double.mock_calls) > 5), "await_pending didn't wait enough"

----------------------------------------

TITLE: Changelog Fragment Example - Minor Changes
DESCRIPTION: YAML format for documenting minor feature additions or enhancements in an Ansible collection changelog fragment.

LANGUAGE: yaml
CODE:
minor_changes:
  - nmcli - adds \"routes6\" and \"route_metric6\" parameters for supporting IPv6 routes (https://github.com/ansible-collections/community.general/issues/4059).

----------------------------------------

TITLE: YAML Dictionary Structure
DESCRIPTION: Shows how to create a basic dictionary/hash structure in YAML with key-value pairs.

LANGUAGE: yaml
CODE:
# An employee record
martin:
  name: Martin D'vloper
  job: Developer
  skill: Elite

----------------------------------------

TITLE: Running Sanity Tests with ansible-test
DESCRIPTION: Executes all sanity tests for an Ansible collection using Docker. This command should be run from the root directory of the collection.

LANGUAGE: shell
CODE:
ansible-test sanity --docker default -v

----------------------------------------

TITLE: Disabling fact gathering in a play
DESCRIPTION: YAML snippet showing how to disable fact gathering at the play level for improved performance.

LANGUAGE: yaml
CODE:
- hosts: whatever
  gather_facts: false

----------------------------------------

TITLE: Retrieving VyOS Version Information with Ansible Task
DESCRIPTION: This YAML snippet shows an Ansible task to retrieve version information from a VyOS device. It uses the vyos_command module and is conditionally executed based on the network OS.

LANGUAGE: yaml
CODE:
- name: Retrieve VyOS version info
  vyos.vyos.vyos_command:
    commands: show version
  when: ansible_network_os == 'vyos.vyos.vyos'

----------------------------------------

TITLE: Configuring Inventory Cache Plugin in ansible.cfg
DESCRIPTION: Sets the cache_plugin option in the [inventory] section of ansible.cfg to use the jsonfile cache plugin for inventory caching.

LANGUAGE: ini
CODE:
[inventory]
cache_plugin=jsonfile

----------------------------------------

TITLE: YAML Flow Collections
DESCRIPTION: Demonstrates abbreviated inline syntax for YAML dictionaries and lists.

LANGUAGE: yaml
CODE:
---
martin: {name: Martin D'vloper, job: Developer, skill: Elite}
fruits: ['Apple', 'Orange', 'Strawberry', 'Mango']

----------------------------------------

TITLE: Implementing parse method for Ansible inventory plugin
DESCRIPTION: Example structure of the parse method, which does the bulk of the work in an inventory plugin.

LANGUAGE: python
CODE:
NAME = 'myplugin'

def parse(self, inventory, loader, path, cache=True):

    # call base method to ensure properties are available for use with other helper methods
    super(InventoryModule, self).parse(inventory, loader, path, cache)

    # this method will parse 'common format' inventory sources and
    # update any options declared in DOCUMENTATION as needed
    config = self._read_config_data(path)

    # example consuming options from inventory source
    mysession = apilib.session(user=self.get_option('api_user'),
                               password=self.get_option('api_pass'),
                               server=self.get_option('api_server')
    )


    # make requests to get data to feed into inventory
    mydata = mysession.getitall()

    #parse data and create inventory objects:
    for colo in mydata:
        for server in mydata[colo]['servers']:
            self.inventory.add_host(server['name'])
            self.inventory.set_variable(server['name'], 'ansible_host', server['external_ip'])

----------------------------------------

TITLE: Managing Encrypted Files Operations
DESCRIPTION: Shows various operations for managing encrypted files including viewing, editing, and decrypting.

LANGUAGE: bash
CODE:
ansible-vault view foo.yml bar.yml baz.yml

LANGUAGE: bash
CODE:
ansible-vault edit foo.yml

LANGUAGE: bash
CODE:
ansible-vault decrypt foo.yml bar.yml baz.yml

----------------------------------------

TITLE: Handling Task Failure in Ansible Integration Test
DESCRIPTION: This code snippet shows how to test a task that is expected to fail. It uses the ignore_errors option and checks the returned error message using the assert module.

LANGUAGE: yaml
CODE:
- name: Task to fail
  abstract_module:
      ...
  register: result

- name: Check the task fails and its error message
  assert:
    that:
      - result is failed
      - result.msg == 'Message we expect'

----------------------------------------

TITLE: Using Collections Keyword in Playbooks
DESCRIPTION: Shows an alternative way to reference collection roles in playbooks using the collections keyword.

LANGUAGE: yaml
CODE:
---
- name: example role by FQCN
  hosts: some_host_pattern
  collections:
    - mynamespace.mycollection
  tasks:
    - name: import role from a collection
      import_role:
        name: my_role

----------------------------------------

TITLE: Database Servers Group Variables
DESCRIPTION: Group variables specific to database servers defining MySQL service configuration, ports, and database credentials.

LANGUAGE: yaml
CODE:
---
mysqlservice: mysqld
mysql_port: 3306
dbuser: root
dbname: foodb
upassword: usersecret

----------------------------------------

TITLE: Creating Changelog Fragment for Major Changes
DESCRIPTION: Example YAML format for documenting major changes in ansible-test related to cloud plugin container support.

LANGUAGE: yaml
CODE:
major_changes:
  - ansible-test - all cloud plugins which use containers can now be used with all POSIX and Windows hosts. Previously the plugins did not work with Windows at all, and support for hosts created with the "--remote" option was inconsistent (https://github.com/ansible/ansible/pull/74216).

----------------------------------------

TITLE: Percent Formatting with Byte Strings in Python 3
DESCRIPTION: Example of using percent formatting with byte strings, which is necessary in Python 3.5+ as byte strings lack the format() method.

LANGUAGE: python
CODE:
b_command_line = b'ansible-playbook --become-user %s -K %s' % (user, playbook_file)

----------------------------------------

TITLE: Ansible Host Alias Configuration
DESCRIPTION: Example of defining a host alias with custom variables in inventory.

LANGUAGE: yaml
CODE:
atlanta:
  hosts:
    host1:
      http_port: 80
      maxRequestsPerChild: 808
      ansible_host: 127.0.0.2

----------------------------------------

TITLE: Discovering data types
DESCRIPTION: Use the type_debug filter to display the underlying Python type of a variable

LANGUAGE: jinja2
CODE:
{{ myvar | type_debug }}

----------------------------------------

TITLE: Executing CLI Command on CloudEngine OS using Ansible
DESCRIPTION: Example task for retrieving the CE OS version using the ce_command module with CLI connection.

LANGUAGE: yaml
CODE:
- name: Retrieve CE OS version
  community.network.ce_command:
    commands: display version
  when: ansible_network_os == 'community.network.ce'

----------------------------------------

TITLE: Formatting data as JSON or YAML
DESCRIPTION: Use to_json and to_yaml filters to format data structures

LANGUAGE: jinja2
CODE:
{{ some_variable | to_json }}
{{ some_variable | to_yaml }}

LANGUAGE: jinja2
CODE:
{{ some_variable | to_nice_json }}
{{ some_variable | to_nice_yaml }}

LANGUAGE: jinja2
CODE:
{{ some_variable | to_nice_json(indent=2) }}
{{ some_variable | to_nice_yaml(indent=8) }}

LANGUAGE: jinja2
CODE:
{{ some_variable | to_yaml(indent=8, width=1337) }}
{{ some_variable | to_nice_yaml(indent=8, width=1337) }}

----------------------------------------

TITLE: Searching Roles with ansible-galaxy CLI
DESCRIPTION: Example of using ansible-galaxy CLI to search for roles by author and keyword.

LANGUAGE: bash
CODE:
$ ansible-galaxy role search elasticsearch --author geerlingguy

----------------------------------------

TITLE: Updating Module Utils Imports in Collections
DESCRIPTION: Shows how to update Python import statements for custom module utilities when migrating to a collection, using the FQCN.

LANGUAGE: python
CODE:
from ansible_collections.{namespace}.{collectionname}.plugins.module_utils.{util} import {something}

----------------------------------------

TITLE: JSON structure for Ansible inventory script output
DESCRIPTION: Example of the expected JSON output format for an Ansible inventory script when called with --list argument.

LANGUAGE: json
CODE:
{
    "group001": {
        "hosts": ["host001", "host002"],
        "vars": {
            "var1": true
        },
        "children": ["group002"]
    },
    "group002": {
        "hosts": ["host003","host004"],
        "vars": {
            "var2": 500
        },
        "children":[]
    }

}

----------------------------------------

TITLE: Defining DateTime in Ansible for DSC
DESCRIPTION: Examples of how to define DateTime objects for use with DSC in Ansible.

LANGUAGE: yaml
CODE:
# As UTC-0 (No timezone)
DateTime: '2019-02-22T13:57:31.2311892+00:00'

# As UTC+4
DateTime: '2019-02-22T17:57:31.2311892+04:00'

# As UTC-4
DateTime: '2019-02-22T09:57:31.2311892-04:00'

----------------------------------------

TITLE: Cloning Ansible Core for documentation build
DESCRIPTION: Clones the required parts of Ansible Core for building the documentation.

LANGUAGE: bash
CODE:
python3 docs/bin/clone-core.py

----------------------------------------

TITLE: Iterating Dictionary Items in Python2 and Python3 Compatible Ansible Template
DESCRIPTION: Shows how to iterate over dictionary items (key-value pairs) in a way that's compatible with both Python2 and Python3. Uses the 'items()' method and 'list' filter for compatibility.

LANGUAGE: yaml+jinja
CODE:
vars:
  hosts:
    testhost1: 127.0.0.2
    testhost2: 127.0.0.3
tasks:
  - debug:
      msg: '{{ item }}'
    # Only works with Python 2
    #loop: "{{ hosts.iteritems() }}"
    # Works with both Python 2 and Python 3
    loop: "{{ hosts.items() | list }}"

----------------------------------------

TITLE: Configuring Additional Interpreter Variables for BSD in Ansible Inventory
DESCRIPTION: Sets interpreter variables for Python, Perl, and other languages on BSD hosts in the Ansible inventory file. This is useful when using plugins that require specific interpreter paths.

LANGUAGE: ini
CODE:
[freebsd:vars]
ansible_python_interpreter=/usr/local/bin/python
ansible_perl_interpreter=/usr/local/bin/perl

----------------------------------------

TITLE: Initializing Collection Changelogs
DESCRIPTION: Command to initialize changelog generation for an Ansible collection repository.

LANGUAGE: bash
CODE:
antsibull-changelog init <path/to/your/collection>

----------------------------------------

TITLE: Using Code-Block Directive for Command Snippets in RST
DESCRIPTION: Shows how to use the RST code-block directive to format code or command snippets in documentation.

LANGUAGE: rst
CODE:
.. code-block:: rst

   .. code-block:: bash

     ssh my_vyos_user@vyos.example.net
     show config

----------------------------------------

TITLE: Named Blocks Implementation in Ansible 2.3
DESCRIPTION: Demonstrates the new named blocks feature in Ansible 2.3, allowing better organization and readability of playbook blocks with error handling.

LANGUAGE: yaml
CODE:
- name: Block test case
  hosts: localhost
  tasks:
   - name: Attempt to setup foo
     block:
       - debug: msg='I execute normally'
       - command: /bin/false
       - debug: msg='I never execute, cause ERROR!'
     rescue:
       - debug: msg='I caught an error'
       - command: /bin/false
       - debug: msg='I also never execute :-('
     always:
       - debug: msg="this always executes"

----------------------------------------

TITLE: Implementing Safe Optional Module Utilities in Python
DESCRIPTION: Proper implementation of optional module utilities using try/except block to handle import failures gracefully on older Ansible versions.

LANGUAGE: python
CODE:
try:
    from ansible.module_utils.common.respawn import respawn_module
except ImportError:
    respawn_module = None
...
if needs_respawn:
    if respawn_module:
        respawn_module(target)
    else:
        module.fail_json('respawn is not available in Ansible < 2.11, ensure that foopkg is installed')

----------------------------------------

TITLE: Executing CLI Commands on WeOS 4
DESCRIPTION: Task example demonstrating how to execute CLI commands on WeOS 4 devices using the cli_command module to retrieve version information.

LANGUAGE: yaml
CODE:
- name: Get version information (WeOS 4)
  ansible.netcommon.cli_command:
    commands: "show version"
  register: show_ver
  when: ansible_network_os == 'community.network.weos4'

----------------------------------------

TITLE: Correcting Spelling Errors Automatically
DESCRIPTION: Command to automatically correct detected spelling errors in the documentation using codespell and nox.

LANGUAGE: bash
CODE:
nox -s spelling -- -w

----------------------------------------

TITLE: Highlighting Menu Items in RST Documentation
DESCRIPTION: Demonstrates how to format menu procedures in RST to highlight important GUI elements using bold text.

LANGUAGE: rst
CODE:
1. On the **File** menu, click **Open**.
2. Type a name in the **username** field.
3. In the **Open** dialog box, click **Save**.
4. On the toolbar, click the **Open File** icon.

----------------------------------------

TITLE: Dynamic Include Task Attribute Inheritance - Pre-2.5
DESCRIPTION: Example showing how task attributes (tags) were inherited by included tasks in Ansible 2.4

LANGUAGE: yaml
CODE:
- include_tasks: "{{ ansible_distribution }}.yml"
  tags:
    - distro_include

LANGUAGE: yaml
CODE:
- block:
    - debug:
        msg: "In included file"

    - apt:
        name: nginx
        state: latest

----------------------------------------

TITLE: Running Validate-Modules Test for Ansible Module Documentation
DESCRIPTION: This command runs the validate-modules test using ansible-test to ensure that the module documentation matches the argument_spec. It checks a specific module named 'mymodule'.

LANGUAGE: bash
CODE:
ansible-test sanity --test validate-modules mymodule

----------------------------------------

TITLE: Creating Module Test Directory Structure
DESCRIPTION: Commands to create directory structure for module-specific tests

LANGUAGE: bash
CODE:
mkdir -p tests/integration/targets/abstract_service_info/tasks
mkdir -p tests/integration/targets/abstract_service_info/meta

----------------------------------------

TITLE: Returning Command Standard Output as List in Ansible Module Output
DESCRIPTION: Demonstrates how modules return command standard output as a list of lines.

LANGUAGE: yaml
CODE:
"stdout_lines": [
"foo!"
]

----------------------------------------

TITLE: Defining Test Dependencies
DESCRIPTION: YAML configuration specifying test dependencies in meta/main.yml

LANGUAGE: yaml
CODE:
dependencies:
  - setup_abstract_service

----------------------------------------

TITLE: Running Ansible Navigator with Custom EE Against Remote Hosts
DESCRIPTION: This command demonstrates how to run a playbook using ansible-navigator with a custom Execution Environment (postgresql_ee) against remote hosts defined in an inventory file.

LANGUAGE: bash
CODE:
ansible-navigator run test_remote.yml -i inventory --execution-environment-image postgresql_ee:latest --mode stdout --pull-policy missing --enable-prompts -u student -k -K

----------------------------------------

TITLE: Directory Structure Rules for Ansible Project
DESCRIPTION: Specifies the allowed file extensions in the lib/ansible directory, including C#, PowerShell, and Python source files. All content must be contained within the lib/ansible directory structure.

LANGUAGE: markdown
CODE:
lib - All content must reside in the lib/ansible directory.

lib/ansible - Only source code with one of the following extensions is allowed:
  *.cs - C#
  *.ps1 - PowerShell
  *.psm1 - PowerShell
  *.py - Python

----------------------------------------

TITLE: Jinja Variable Access Example - Ansible 2.8
DESCRIPTION: Example showing simplified variable access in Jinja templates for Ansible 2.8 versus 2.7

LANGUAGE: yaml
CODE:
{{ foo.bar.baz | default('DEFAULT') }}

----------------------------------------

TITLE: Proper Error Handling in Ansible Python Code
DESCRIPTION: Demonstrates the preferred approach to validation and error handling in Ansible code, using conditional statements and explicit exception raising instead of assert statements. This ensures consistent behavior when Python is run with optimizations enabled.

LANGUAGE: python
CODE:
# Bad - Don't use this
assert condition, "error message"

# Good - Use this instead
if not condition:
    raise AnsibleAssertionError("error message")

# For modules - Use this
if not condition:
    module.fail_json(msg="error message")

----------------------------------------

TITLE: Comparing Versions in Ansible Playbooks
DESCRIPTION: Shows how to use the version test for comparing version numbers in Ansible, including different version types and operators.

LANGUAGE: yaml
CODE:
"{{ ansible_facts['distribution_version'] is version('12.04', '>=') }}"

{{ sample_version_var is version('1.0', operator='lt', strict=True) }}

"{{ sample_semver_var is version('2.0.0-rc.1+build.123', 'lt', version_type='semver') }}"

"{{ '2.14.0rc1' is version('2.14.0', 'lt', version_type='pep440') }}"

vars:
    my_version: 1.2.3

tasks:
    - debug:
        msg: "my_version is higher than 1.0.0"
      when: my_version is version('1.0.0', '>')

----------------------------------------

TITLE: Checking Ansible Version
DESCRIPTION: Command to verify the installed version of Ansible, which must be 2.10 or higher.

LANGUAGE: bash
CODE:
ansible --version

----------------------------------------

TITLE: Listing Ansible Tasks and Hosts
DESCRIPTION: Demonstrates how to list tasks that would run or hosts that would be affected by an Ansible command without actually executing it.

LANGUAGE: shell
CODE:
# confirm what task names would be run if I ran this command and said "just ntp tasks"
ansible-playbook -i production webservers.yml --tags ntp --list-tasks

# confirm what hostnames might be communicated with if I said "limit to boston"
ansible-playbook -i production webservers.yml --limit boston --list-hosts

----------------------------------------

TITLE: Make Command Reference for Documentation Build
DESCRIPTION: Reference to the make command used for building single HTML documentation in the Ansible docs directory.

LANGUAGE: rst
CODE:
``make singlehtmldocs``

----------------------------------------

TITLE: Demonstrating Boolean Keyword Bug Fix in YAML
DESCRIPTION: Example of a bug fix for boolean keywords in YAML. Previously, random strings would return 'False', now they raise an error if not a proper boolean.

LANGUAGE: yaml
CODE:
diff: yes-

----------------------------------------

TITLE: Importing Future Features in Python for Ansible
DESCRIPTION: This code snippet demonstrates the recommended future import boilerplate for Ansible Python files. It imports absolute_import, division, and print_function from __future__ to ensure compatibility between Python 2 and 3.

LANGUAGE: python
CODE:
from __future__ import (absolute_import, division, print_function)

----------------------------------------

TITLE: Date and time operations
DESCRIPTION: Use to_datetime and strftime filters for date and time operations

LANGUAGE: jinja2
CODE:
{{ ("2016-08-14 20:00:12" | to_datetime) - ("2015-12-25" | to_datetime('%Y-%m-%d')) }}
{{ '%Y-%m-%d' | strftime }}
{{ '%H:%M:%S' | strftime(utc=True) }}

----------------------------------------

TITLE: Returning Command Error Output as List in Ansible Module Output
DESCRIPTION: Shows how modules return command error output as a list of lines.

LANGUAGE: yaml
CODE:
"stderr_lines": [
        "ls: doesntexist: No such file or directory"
        ]

----------------------------------------

TITLE: Setting Ansible Strategy via Environment Variable
DESCRIPTION: This snippet demonstrates how to set the Ansible strategy using an environment variable. It sets the strategy to 'free'.

LANGUAGE: shell
CODE:
export ANSIBLE_STRATEGY=free

----------------------------------------

TITLE: Configuring eAPI Connection for Arista EOS in Ansible
DESCRIPTION: YAML configuration for setting up eAPI connection to Arista EOS devices using HTTP/HTTPS. Includes settings for authentication, privilege escalation, and web proxy configuration.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.httpapi
ansible_network_os: arista.eos.eos
ansible_user: myuser
ansible_password: !vault...
ansible_become: true
ansible_become_method: enable
proxy_env:
  http_proxy: http://proxy.example.com:8080

----------------------------------------

TITLE: Generating encrypted passwords for the user module
DESCRIPTION: Example of generating encrypted passwords using an Ansible ad-hoc command.

LANGUAGE: shell
CODE:
ansible all -i localhost, -m debug -a "msg={{ 'mypassword' | password_hash('sha512', 'mysecretsalt') }}"

----------------------------------------

TITLE: Defining Bundled Code Metadata in Python
DESCRIPTION: Structure for _BUNDLED_METADATA variable that tracks bundled package information including PyPI name, version, and version constraints. Used to verify bundled code is up to date with upstream releases.

LANGUAGE: python
CODE:
_BUNDLED_METADATA = {
    "pypi_name": "package_name",
    "version": "x.y.z",
    "version_constraints": ">=x.y.z,<a.b.c"  # Optional PEP440 specifier
}

----------------------------------------

TITLE: Configuring SSH Password Mechanism in YAML
DESCRIPTION: Sets the SSH password mechanism to sshpass using a YAML variable in Ansible playbooks or inventory files.

LANGUAGE: yaml
CODE:
ansible_ssh_password_mechanism: sshpass

----------------------------------------

TITLE: Checking Asynchronous Job Status in Ansible
DESCRIPTION: Use the async_status module to check the status of a previously executed asynchronous job. This command requires the job ID returned from the original asynchronous task.

LANGUAGE: bash
CODE:
$ ansible web1.example.com -m async_status -a "jid=488359678239.2844"

----------------------------------------

TITLE: Running Commands in Ansible Modules
DESCRIPTION: Method to execute commands within an Ansible module context. Part of the AnsibleModule class.

LANGUAGE: python
CODE:
AnsibleModule.run_command()

----------------------------------------

TITLE: Native Parser YAML Template
DESCRIPTION: Template for parsing network interface output using the native parsing engine

LANGUAGE: yaml
CODE:
---
- example: Ethernet1/1 is up
  getval: '(?P<name>\S+) is (?P<oper_state>\S+)'
  result:
    "{{ name }}":
      name: "{{ name }}"
      state:
        operating: "{{ oper_state }}"
  shared: true

- example: admin state is up, Dedicated Interface
  getval: 'admin state is (?P<admin_state>\S+),'
  result:
    "{{ name }}":
      name: "{{ name }}"
      state:
        admin: "{{ admin_state }}"

----------------------------------------

TITLE: Copying Azure Requirements for Integration Tests
DESCRIPTION: Command to copy the Azure requirements file from the packaging directory to the integration test directory, ensuring test dependencies are in sync.

LANGUAGE: bash
CODE:
cp packaging/requirements/requirements-azure.txt test/lib/ansible_test/_data/requirements/integration.cloud.azure.txt

----------------------------------------

TITLE: Configuring Host Group Vars Plugin Execution Stage
DESCRIPTION: This code snippet shows how to configure the execution stage for the host_group_vars plugin in the Ansible configuration file. It sets the plugin to run at the inventory stage.

LANGUAGE: ini
CODE:
[vars_host_group_vars]
stage = inventory

----------------------------------------

TITLE: Defining RST Document Structure for Ansible Developer Guide
DESCRIPTION: RST markup defining the structure and table of contents for the Ansible developer guide documentation, including section references and external links.

LANGUAGE: rst
CODE:
.. _developer_guide:\n\n***************\nDeveloper Guide\n***************\n\n.. toctree::\n   :maxdepth: 2\n\n   developing_locally\n   developing_modules\n   developing_modules_general\n   developing_modules_checklist\n   developing_modules_best_practices\n   developing_python_3\n   debugging\n   developing_modules_documenting\n   sidecar\n   developing_modules_general_windows\n   developing_modules_in_groups\n   testing\n   module_lifecycle\n   developing_plugins\n   developing_inventory\n   developing_core\n   developing_program_flow_modules\n   developing_api\n   developing_rebasing\n   developing_module_utilities\n   developing_collections_path\n   developing_collections\n   migrating_roles\n   collections_galaxy_meta\n   overview_architecture

----------------------------------------

TITLE: Adding comments to files
DESCRIPTION: Use the comment filter to add comments to files in various styles

LANGUAGE: jinja2
CODE:
{{ "Plain style (default)" | comment }}
{{ "C style" | comment('c') }}
{{ "C block style" | comment('cblock') }}
{{ "Erlang style" | comment('erlang') }}
{{ "XML style" | comment('xml') }}
{{ "My Special Case" | comment(decoration="! ") }}
{{ "Custom style" | comment('plain', prefix='#######\n#', postfix='#\n#######\n   ###\n    #') }}

----------------------------------------

TITLE: Returning Difference Information in Ansible Module Output
DESCRIPTION: Illustrates how modules can return detailed information about changes made, including before and after states.

LANGUAGE: yaml
CODE:
"diff": [
        {
            "after": "",
            "after_header": "foo.txt (content)",
            "before": "",
            "before_header": "foo.txt (content)"
        },
        {
            "after_header": "foo.txt (file attributes)",
            "before_header": "foo.txt (file attributes)"
        }

----------------------------------------

TITLE: Targeting Specific OS Groups in Plays
DESCRIPTION: Demonstrates how to target specific operating system groups in subsequent plays after group_by categorization.

LANGUAGE: yaml
CODE:
- hosts: os_CentOS
  tasks:
    - # tasks here

- hosts: os_Ubuntu
  tasks:
    - # tasks here

----------------------------------------

TITLE: Backing Up Arista EOS Switch Configuration using eAPI
DESCRIPTION: Ansible task to backup the current configuration of an Arista EOS switch using the eAPI connection. The task uses the arista.eos.eos_config module, includes proxy environment settings, and is conditional based on the network OS.

LANGUAGE: yaml
CODE:
- name: Backup current switch config (eos)
  arista.eos.eos_config:
    backup: yes
  register: backup_eos_location
  environment: "{{ proxy_env }}"
  when: ansible_network_os == 'arista.eos.eos'

----------------------------------------

TITLE: Installing Prerequisites with DNF for Ansible Execution Environment
DESCRIPTION: This command installs the necessary packages (podman, python3, and python3-pip) using the DNF package manager to set up an Ansible Execution Environment.

LANGUAGE: bash
CODE:
sudo dnf install -y podman python3 python3-pip

----------------------------------------

TITLE: Git Release Commit and Tag Operations
DESCRIPTION: Commands for committing changes, creating tags, and pushing the release to upstream repository.

LANGUAGE: bash
CODE:
git commit -a -m "Release VERSION commit"
git push origin release_branch

LANGUAGE: bash
CODE:
git checkout main
git pull --rebase upstream main

LANGUAGE: bash
CODE:
git tag -n    # see current tags and their comments
git tag -a NEW_VERSION -m "comment here"    # the comment can be, for example,  "community.postgresql: 1.2.0"
git push upstream NEW_VERSION

----------------------------------------

TITLE: Rebasing Branch Against Upstream in Git
DESCRIPTION: This snippet demonstrates how to rebase your branch against the upstream devel branch. It pulls changes from the upstream remote and replays your branch's changes on top of them.

LANGUAGE: shell
CODE:
$ git pull --rebase upstream devel

----------------------------------------

TITLE: Running Unit Tests with ansible-test
DESCRIPTION: Executes unit tests for an Ansible collection using Docker. Multiple variations are shown for running tests on different Python versions or specific test files.

LANGUAGE: shell
CODE:
ansible-test units --docker default -v

LANGUAGE: shell
CODE:
ansible-test units --docker default -v --python 3.6

LANGUAGE: shell
CODE:
ansible-test units --docker default -v --python 3.6 tests/unit/plugins/module_utils/foo/test_bar.py

----------------------------------------

TITLE: Including OS-Specific Variables
DESCRIPTION: Shows how to include operating system specific variables using include_vars module with conditional logic.

LANGUAGE: yaml
CODE:
- name: Include variables based on OS
  ansible.builtin.include_vars:
    file: "group_vars/os_{{ ansible_facts['distribution'] }}.yml"

----------------------------------------

TITLE: OpenBSD Facts Structure in Ansible 2.2
DESCRIPTION: Shows the old format of OpenBSD distribution facts in Ansible 2.2, where version and release values were reversed.

LANGUAGE: bash
CODE:
"ansible_distribution": "OpenBSD"
"ansible_distribution_release": "6.0",
"ansible_distribution_version": "release",

----------------------------------------

TITLE: Creating Role Argument Specs in YAML for Ansible Collections
DESCRIPTION: To document a role in an Ansible collection, create a file named 'meta/argument_specs.yml' in your role directory. This file specifies the role's argument specifications.

LANGUAGE: yaml
CODE:
meta/argument_specs.yml

----------------------------------------

TITLE: Installing Ansible Collection with Version Range
DESCRIPTION: Shows how to install an Ansible collection within a specific version range using greater than or equal to and less than operators.

LANGUAGE: bash
CODE:
ansible-galaxy collection install 'my_namespace.my_collection:>=1.0.0,<2.0.0'

----------------------------------------

TITLE: Initializing Sphinx Documentation for Ansible Collections
DESCRIPTION: Use antsibull-docs to initialize Sphinx-based documentation for your Ansible collection. This command creates a documentation structure in the specified destination directory.

LANGUAGE: shell
CODE:
antsibull-docs sphinx-init --use-current --dest-dir dest namespace.name

----------------------------------------

TITLE: Configuring Python Interpreter Fallback for BSD in Ansible Inventory
DESCRIPTION: Sets up a fallback list of Python interpreter paths for BSD hosts, allowing Ansible to find the correct Python binary even if meta-ports are not installed.

LANGUAGE: ini
CODE:
ansible_interpreter_python_fallback=["/usr/local/bin/python", "/usr/local/bin/python3", "/usr/local/bin/python3.11"]

----------------------------------------

TITLE: Displaying Backup File Path in Ansible Module Output
DESCRIPTION: Shows how modules that implement file backups return the path to the created backup file.

LANGUAGE: yaml
CODE:
"backup_file": "./foo.txt.32729.2020-07-30@06:24:19~"

----------------------------------------

TITLE: Analyzing Code Coverage Data for Incidental Coverage
DESCRIPTION: This script analyzes downloaded code coverage data to identify which portions of the code are covered by each test, focusing on incidental coverage.

LANGUAGE: shell
CODE:
source hacking/env-setup
hacking/azp/incidental.py 14075/

----------------------------------------

TITLE: Retrieving CNOS OS Version Using Ansible Task
DESCRIPTION: This YAML snippet shows an Ansible task for retrieving the OS version from a CNOS device. It uses the community.network.cnos_command module to execute the 'show version' command when the network OS is identified as CNOS.

LANGUAGE: yaml
CODE:
- name: Retrieve CNOS OS version
  community.network.cnos_command:
    commands: show version
  when: ansible_network_os == 'community.network.cnos'

----------------------------------------

TITLE: Git Commit and Push Commands - Bash
DESCRIPTION: Commands for committing changes and pushing them to the remote repository, including changelog fragment testing.

LANGUAGE: bash
CODE:
$ git add /path/to/changed/file
$ git commit -m "module_name_you_fixed: fix crash when ..."
$ git push origin name_of_my_branch
$ ansible-test sanity changelogs/fragments/ --docker -v
$ git add changelogs/fragments/myfragment.yml
$ git commit -m "Add changelog fragment"
$ git push origin name_of_my_branch

----------------------------------------

TITLE: RST Documentation Structure for Ansible Core 2.13 Roadmap
DESCRIPTION: ReStructuredText markup defining the structure and content of the Ansible Core 2.13 roadmap documentation, including section headers, content organization, and release schedule details.

LANGUAGE: rst
CODE:
.. _core_roadmap_2_13:

*****************
Ansible-core 2.13
*****************

.. contents::
   :local:

Release Schedule
================

Expected
--------

PRs must be raised well in advance of the dates below to have a chance of being included in this ansible-core release.

----------------------------------------

TITLE: Downloading Code Coverage Data from Azure Pipelines
DESCRIPTION: This script downloads code coverage data from Azure Pipelines for local analysis. It requires a run number and can include additional options for artifacts and run metadata.

LANGUAGE: shell
CODE:
hacking/azp/download.py 14075 --artifacts --run-metadata -v

----------------------------------------

TITLE: Moving Modules to Collection Plugins Directory
DESCRIPTION: Shows how to move modules from a standalone role's library directory to the collection's plugins/modules directory.

LANGUAGE: bash
CODE:
$ mv -r mynamespace/mycollection/roles/my_role/library/* mynamespace/mycollection/plugins/modules/

----------------------------------------

TITLE: Conditional Task Example with Tags
DESCRIPTION: Example play showing tag inheritance for fact gathering tasks in Ansible 2.8

LANGUAGE: yaml
CODE:
- name: Configure Webservers
  hosts: webserver
  tags:
    - webserver
  tasks:
    - name: Install nginx
      package:
        name: nginx
      tags:
        - nginx

----------------------------------------

TITLE: Importing Custom Shared Code in Ansible Modules
DESCRIPTION: Demonstrates how to import custom shared code from a local module_utils directory. This allows for code reuse across multiple custom modules.

LANGUAGE: python
CODE:
from ansible.module_utils.my_shared_code import MySharedCodeClient

----------------------------------------

TITLE: Defining Release Schedule in RST
DESCRIPTION: This RST code block defines the release schedule for Ansible 3.0, including important dates and milestones.

LANGUAGE: rst
CODE:
:2020-12-16: Finalize rules for net-new collections submitted for the ansible release.
:2021-01-27: Final day for new collections to be **reviewed and approved**. They MUST be
    submitted prior to this to give reviewers a chance to look them over and for collection owners
    to fix any problems.
:2021-02-02: Ansible-3.0.0-beta1 -- feature freeze [1]_
:2021-02-09: Ansible-3.0.0-rc1 -- final freeze [2]_ [3]_
:2021-02-16: Release of Ansible-3.0.0
:2021-03-09: Release of Ansible-3.1.0 (bugfix + compatible features: every three weeks)

----------------------------------------

TITLE: Ansible Version Information
DESCRIPTION: Displays the version of Ansible where the deprecation was identified

LANGUAGE: plaintext
CODE:
%(version)s

----------------------------------------

TITLE: Initializing Python Package for Ansible Collection
DESCRIPTION: An empty __init__.py file is required to initialize the namespace and allow Python to import the files in the collection.

LANGUAGE: python
CODE:
__init__.py

----------------------------------------

TITLE: Extracting a Zip File with DSC in Ansible
DESCRIPTION: Example of how to use DSC to extract a zip file in Ansible.

LANGUAGE: yaml
CODE:
- name: Extract a zip file
  win_dsc:
    resource_name: Archive
    Destination: C:\temp\output
    Path: C:\temp\zip.zip
    Ensure: Present

----------------------------------------

TITLE: Retrieving Ansible Facts from Windows Hosts
DESCRIPTION: This command uses the Ansible setup module to gather facts from Windows hosts. It demonstrates how to collect system information from Windows machines managed by Ansible.

LANGUAGE: bash
CODE:
ansible windows -m setup

----------------------------------------

TITLE: Cloning Collection Repository - Bash Commands
DESCRIPTION: Commands for cloning a forked collection repository using either HTTPS or SSH protocols.

LANGUAGE: bash
CODE:
$ git clone https://github.com/YOURACC/COLLECTION_REPO.git ~/ansible_collections/NAMESPACE/COLLECTION_NAME

LANGUAGE: bash
CODE:
$ git clone git@github.com:YOURACC/COLLECTION_REPO.git ~/ansible_collections/NAMESPACE/COLLECTION_NAME

----------------------------------------

TITLE: Checking Branch Status in Git
DESCRIPTION: This snippet shows how to check the status of your branch before and after rebasing. It demonstrates that the branch is initially up-to-date with the origin remote and then shows the diverged state after rebasing.

LANGUAGE: shell
CODE:
$ git status
On branch YOUR_BRANCH
Your branch is up-to-date with 'origin/YOUR_BRANCH'.
nothing to commit, working tree clean

LANGUAGE: shell
CODE:
$ git status
On branch YOUR_BRANCH
Your branch and 'origin/YOUR_BRANCH' have diverged,
and have 4 and 1 different commits each, respectively.
  (use "git pull" to merge the remote branch into yours)
nothing to commit, working tree clean

----------------------------------------

TITLE: String Formatting for Python 2.6 Compatibility
DESCRIPTION: Example of using str.format() method in a way that is compatible with Python 2.6 and later versions.

LANGUAGE: python
CODE:
# Use this instead
new_string = "Dear {0}, Welcome to {1}".format(username, location)

----------------------------------------

TITLE: Building Ansible-Podman SELinux Module
DESCRIPTION: Command to build the SELinux module for Ansible-Podman integration

LANGUAGE: bash
CODE:
./build.sh

----------------------------------------

TITLE: Task Success/Failure Test Change
DESCRIPTION: Demonstrates how the succeeded/failed test behavior changed in Ansible 2.4, where both rc and failed values are considered when determining task state.

LANGUAGE: yaml
CODE:
- command: /bin/false
  register: result
  failed_when: no

- debug:
    msg: 'This is printed on 2.3'
  when: result|failed

- debug:
    msg: 'This is printed on 2.4'
  when: result|succeeded

- debug:
    msg: 'This is always printed'
  when: result.rc != 0

----------------------------------------

TITLE: Transforming strings into lists
DESCRIPTION: Use the split filter to transform a string into a list

LANGUAGE: jinja2
CODE:
{{ fruits | split(',') }}

----------------------------------------

TITLE: Network Module Python Import Changes
DESCRIPTION: Example showing changes to network module utility imports in Python code

LANGUAGE: python
CODE:
# Old in 2.4
from ansible.module_utils.vyos import get_config, load_config

# New in 2.5
from ansible.module_utils.network.vyos.vyos import get_config, load_config

----------------------------------------

TITLE: Enabling NETCONF on IOS-XR
DESCRIPTION: Task example for enabling NETCONF on IOS-XR devices using the iosxr_netconf module via CLI connection.

LANGUAGE: yaml
CODE:
- name: Enable NETCONF
  connection: ansible.netcommon.network_cli
  cisco.iosxr.iosxr_netconf:
  when: ansible_network_os == 'cisco.iosxr.iosxr'

----------------------------------------

TITLE: Configuring SSH Password Mechanism in ansible.cfg
DESCRIPTION: Sets the password mechanism for SSH connections to use sshpass instead of SSH_ASKPASS in the ansible.cfg file.

LANGUAGE: ini
CODE:
[ssh_connection]
password_mechanism = sshpass

----------------------------------------

TITLE: Removing Devel-Only Tooling from Stable Branch
DESCRIPTION: Commands to remove development-specific files and workflows from a newly created stable branch in the ansible-documentation repository.

LANGUAGE: bash
CODE:
# Remove the following workflow files, the tagger script, and tagger requirements.
git rm -r .github/workflows/pip-compile-dev.yml .github/workflows/pip-compile-docs.yml .github/workflows/reusable-pip-compile.yml .github/workflows/tag.yml .github/workflows/build-package-docs.yaml hacking/tagger tests/tag.*

----------------------------------------

TITLE: Configuring Dell OS10 Group Variables in Ansible YAML
DESCRIPTION: Example YAML configuration for Dell OS10 group variables in Ansible. It sets up network CLI connection, OS type, user credentials, enable mode, and SSH proxy command for bastion host access.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: dellemc.os10.os10
ansible_user: myuser
ansible_password: !vault...
ansible_become: true
ansible_become_method: enable
ansible_become_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Installing Python on OpenBSD using Ansible Raw Module
DESCRIPTION: Uses the Ansible raw module to install Python 3.11 on an OpenBSD host. This is a bootstrapping step to enable full Ansible functionality on the managed node.

LANGUAGE: bash
CODE:
ansible -m raw -a "pkg_add -I python%3.11" myopenbsdhost

----------------------------------------

TITLE: Complex Chained Lookups and Filters in Ansible
DESCRIPTION: Demonstrates a complex example combining multiple lookups, filters, and nested loops.

LANGUAGE: YAML+Jinja
CODE:
tasks:
  - name: Complicated chained lookups and filters
    debug: msg="find the answer here:\n{{ lookup('url', 'https://google.com/search/?q=' + item|urlencode)|join(' ') }}"
    with_nested:
      - "{{ lookup('consul_kv', 'bcs/' + lookup('file', '/the/question') + ', host=localhost, port=2000')|shuffle }}"
      - "{{ lookup('sequence', 'end=42 start=2 step=2')|map('log', 4)|list) }}"
      - ['a', 'c', 'd', 'c']

----------------------------------------

TITLE: Moving Non-Module Plugins to Collection
DESCRIPTION: Demonstrates how to move non-module plugins, such as filter plugins, to the appropriate directory in a collection.

LANGUAGE: bash
CODE:
$ mv -r mynamespace/mycollection/roles/my_role/filter_plugins/* mynamespace/mycollection/plugins/filter/

----------------------------------------

TITLE: Checking Windows user privileges with become
DESCRIPTION: Task to check Windows user privileges when using become.

LANGUAGE: YAML
CODE:
- name: Check my username
  ansible.windows.win_whoami:
  become: true

----------------------------------------

TITLE: RestructuredText Redirect for Module Defaults Documentation
DESCRIPTION: A simple RST directive that marks the page as orphaned and provides a redirect link to the module_defaults documentation section.

LANGUAGE: rst
CODE:
:orphan:

Module defaults
===============

This page has moved to :ref:`module_defaults`.

----------------------------------------

TITLE: Building Minimal Ansible Core Documentation
DESCRIPTION: Command to build minimal Ansible Core documentation using nox.

LANGUAGE: bash
CODE:
nox -s make

----------------------------------------

TITLE: Tombstoning a Module in a Collection using YAML Configuration
DESCRIPTION: This YAML snippet demonstrates how to add a tombstone entry for a removed module named 'old_cloud' in a collection's meta/runtime.yml file, specifying the removal version and warning text.

LANGUAGE: yaml
CODE:
plugin_routing:
    modules:
        old_cloud:
            tombstone:
                removal_version: 2.0.0
                warning_text: Use foo.bar.new_cloud instead.

----------------------------------------

TITLE: Template Lookup Pattern Change in Ansible 2.4
DESCRIPTION: Example showing the change in backslash escaping rules for template lookups between Ansible 2.3 and 2.4. The new version requires manual escaping of backslashes.

LANGUAGE: yaml
CODE:
- debug:
    msg: '{{ lookup("template", "template.j2") }}'

LANGUAGE: jinja2
CODE:
{{ "name surname" | regex_replace("^[^\\s]+\\s+(.*)", "\\1") }}

----------------------------------------

TITLE: Checking Spelling in Documentation
DESCRIPTION: Command to check for common spelling mistakes in the documentation source using codespell and nox.

LANGUAGE: bash
CODE:
nox -s spelling

----------------------------------------

TITLE: ReStructuredText Redirect Declaration
DESCRIPTION: RST markup that declares this page as orphaned and redirects to the conditionals section in playbooks documentation.

LANGUAGE: rst
CODE:
:orphan:

************
Conditionals
************

This page has moved to :ref:`playbooks_conditionals`.

----------------------------------------

TITLE: Updating Dependency Lock Files
DESCRIPTION: Command to update the dependency lock files in the tests/ directory using nox.

LANGUAGE: bash
CODE:
nox -s pip-compile

----------------------------------------

TITLE: Linux Cgroup Configuration for Containers
DESCRIPTION: Commands for configuring cgroup hierarchy on Linux systems to support container testing with ansible-test.

LANGUAGE: shell
CODE:
mkdir /sys/fs/cgroup/systemd
mount cgroup -t cgroup /sys/fs/cgroup/systemd -o none,name=systemd,xattr
chown -R {user}:{group} /sys/fs/cgroup/systemd

----------------------------------------

TITLE: Configuring NETCONF Inventory Variables for IOS-XR
DESCRIPTION: Example configuration for NETCONF-based connection to IOS-XR devices using netconf connection type.

LANGUAGE: ini
CODE:
[iosxr:vars]
ansible_connection=ansible.netcommon.netconf
ansible_network_os=cisco.iosxr.iosxr
ansible_user=myuser
ansible_password=!vault |
ansible_ssh_common_args='-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Using iconv with shell module to handle EBCDIC output on z/OS UNIX
DESCRIPTION: Demonstrates using the ansible.builtin.shell module with iconv to convert command output from EBCDIC to ASCII encoding. This is useful when z/OS programs return EBCDIC-encoded output.

LANGUAGE: yaml
CODE:
ansible.builtin.shell: "some_pgm | iconv -f ibm-1047 -t iso8859-1"

----------------------------------------

TITLE: Using become with su and flags for a non-login shell
DESCRIPTION: Shows how to use become with the su method and flags to run a command as nobody when the shell is set to nologin.

LANGUAGE: YAML
CODE:
- name: Run a command as nobody
  command: somecommand
  become: true
  become_method: su
  become_user: nobody
  become_flags: '-s /bin/sh'

----------------------------------------

TITLE: PowerShell Module Example Using Collection Module Utils
DESCRIPTION: Shows a PowerShell module using both default Ansible module_utils and those provided by a collection.

LANGUAGE: powershell
CODE:
#!powershell
#AnsibleRequires -CSharpUtil Ansible.Basic
#AnsibleRequires -PowerShell ansible_collections.ansible_example.community.plugins.module_utils.hyperv

$spec = @{
    name = @{ required = $true; type = "str" }
    state = @{ required = $true; choices = @("present", "absent") }
}
$module = [Ansible.Basic.AnsibleModule]::Create($args, $spec)

Invoke-HyperVFunction -Name $module.Params.name

$module.ExitJson()

----------------------------------------

TITLE: PowerShell module utility import
DESCRIPTION: Importing a PowerShell module utility in an Ansible Windows module.

LANGUAGE: powershell
CODE:
#Requires -Module Ansible.ModuleUtils.Legacy

----------------------------------------

TITLE: Synchronizing Dependency Lock Files Without Upgrades
DESCRIPTION: Command to synchronize dependency lock files with base requirements files without changing transitive dependencies.

LANGUAGE: bash
CODE:
nox -s pip-compile -- --no-upgrade

----------------------------------------

TITLE: RST Documentation Redirect for Windows Performance
DESCRIPTION: A reStructuredText (RST) markup snippet that creates an orphaned page redirecting to the Windows performance documentation section.

LANGUAGE: rst
CODE:
:orphan:

Windows performance
===================

This page has moved to :ref:`windows_performance`.

----------------------------------------

TITLE: Using become to run a service task as root
DESCRIPTION: Example of using become to run a task that requires root privileges to manage a system service.

LANGUAGE: YAML
CODE:
- name: Ensure the httpd service is running
  service:
    name: httpd
    state: started
  become: true

----------------------------------------

TITLE: Implementing Async Service Restart in Ansible 2.3
DESCRIPTION: Example of using the async keyword with service action plugin, which was not possible in Ansible 2.2. This allows asynchronous execution of service operations.

LANGUAGE: yaml
CODE:
- name: Install nginx asynchronously
  service:
    name: nginx
    state: restarted
  async: 45

----------------------------------------

TITLE: Using 'path' Type in Ansible Module Argument Specification
DESCRIPTION: Demonstrates how to use the 'path' type in an Ansible module's argument_spec to automatically handle path expansion. This replaces manual calls to os.path.expanduser and ensures proper handling of shell variables and tilde characters.

LANGUAGE: python
CODE:
argument_spec = {
    "my_path": {"type": "path"}
}

----------------------------------------

TITLE: RST Documentation Redirect for Ansible Ad-Hoc Commands
DESCRIPTION: A reStructuredText directive that marks the page as orphaned and creates a redirect to the introduction to ad-hoc commands documentation section.

LANGUAGE: rst
CODE:
:orphan:

*******************************
Introduction to ad hoc commands
*******************************

This page has moved to :ref:`intro_adhoc`.

----------------------------------------

TITLE: Creating Release Tags with Custom Remote
DESCRIPTION: Command to create release tags specifying a custom remote name for the upstream repository.

LANGUAGE: bash
CODE:
nox -s tag -- --remote <name> tag

----------------------------------------

TITLE: Setting Up Local Ansible Development Environment
DESCRIPTION: Shell commands for setting up a local development environment to test Ansible

LANGUAGE: shell-session
CODE:
source hacking/env-setup

----------------------------------------

TITLE: Enabling NETCONF Connection in Ansible Playbook
DESCRIPTION: Task to enable NETCONF on a Juniper device using the junos_netconf module with network_cli connection.

LANGUAGE: yaml
CODE:
- name: Enable NETCONF
  connection: ansible.netcommon.network_cli
  junipernetworks.junos.junos_netconf:
  when: ansible_network_os == 'junipernetworks.junos.junos'

----------------------------------------

TITLE: Defining Table of Contents in reStructuredText for Ansible Guide
DESCRIPTION: This snippet defines the table of contents for the Ansible guide using reStructuredText syntax. It includes links to introduction pages for BSD, Windows, and z/OS.

LANGUAGE: reStructuredText
CODE:
.. toctree::
   :maxdepth: 2

   intro_bsd
   intro_windows
   intro_zos

----------------------------------------

TITLE: Running Commands on Windows Hosts with win_shell and win_powershell in Ansible
DESCRIPTION: Demonstrates how to use the ansible.windows.win_shell and ansible.windows.win_powershell modules to run commands on Windows hosts with PowerShell and UTF-8 output support. This change is due to updates in the SSH connection plugin for Windows support.

LANGUAGE: yaml
CODE:
- name: Run with win_shell
  ansible.windows.win_shell: Write-Host "Hello, Café"

- name: Run with win_powershell
  ansible.windows.win_powershell:
    script: Write-Host "Hello, Café"

----------------------------------------

TITLE: Importing from __init__.py in Collections
DESCRIPTION: Demonstrates how to import from an __init__.py file within a collection.

LANGUAGE: python
CODE:
from ansible_collections.ansible_example.community.plugins.callback.__init__ import CustomBaseClass

----------------------------------------

TITLE: PowerShell Script Reference
DESCRIPTION: Reference to a PowerShell script name that is discussed in the warning documentation. The script configures WinRM for Ansible connectivity but has security concerns.

LANGUAGE: powershell
CODE:
ConfigureRemotingForAnsible.ps1

LANGUAGE: powershell
CODE:
Enable-PSRemoting

----------------------------------------

TITLE: RST Documentation Structure for Ansible Vault
DESCRIPTION: ReStructuredText markup defining the documentation structure for Ansible vault guide, including a table of contents and important note about inclusive language.

LANGUAGE: rst
CODE:
.. _vault_guide_index:

############################################
Protecting sensitive data with Ansible vault
############################################

.. note::

    **Making Open Source More Inclusive**

    Red Hat is committed to replacing problematic language in our code, documentation, and web properties. We are beginning with these four terms: master, slave, blacklist, and whitelist. We ask that you open an issue or pull request if you come upon a term that we have missed. For more details, see `our CTO Chris Wright's message <https://www.redhat.com/en/blog/making-open-source-more-inclusive-eradicating-problematic-language>`_.

.. toctree::
   :maxdepth: 2

   vault
   vault_managing_passwords
   vault_encrypting_content
   vault_using_encrypted_content

----------------------------------------

TITLE: Creating Release Tags with Custom Core Repository Path
DESCRIPTION: Command to create release tags specifying a custom path for the Ansible core repository.

LANGUAGE: bash
CODE:
nox -s tag -- --core <path> tag

----------------------------------------

TITLE: Configuring Manifest Directives in galaxy.yml
DESCRIPTION: Example of how to use manifest directives in galaxy.yml to control which files are included or excluded from the collection tarball.

LANGUAGE: yaml
CODE:
manifest:
  directives:
    - recursive-exclude playbooks/sensitive **
    - global-exclude *.tar.gz

----------------------------------------

TITLE: Conditionals with Embedded Templates
DESCRIPTION: Conditionals with embedded templates now fail if they reference untrusted data due to security mitigations. Rewrite such conditionals to directly access untrusted values as Jinja variables instead.

LANGUAGE: yaml
CODE:
- name: task with a module result (always untrusted by Ansible)
  shell: echo "hi mom"
  register: untrusted_result

# don't do it this way...
# - name: insecure conditional with embedded template consulting untrusted data
#   assert:
#     that: '"hi mom" is in {{ untrusted_result.stdout }}'

- name: securely access untrusted values directly as Jinja variables instead
  assert:
    that: '"hi mom" is in untrusted_result.stdout'

----------------------------------------

TITLE: Running Ansible Playbooks with Various Options
DESCRIPTION: Demonstrates different ways to run Ansible playbooks using command-line options for targeting specific hosts, tags, or limits.

LANGUAGE: shell
CODE:
ansible-playbook -i production site.yml
ansible-playbook -i production site.yml --tags ntp
ansible-playbook -i production webservers.yml
ansible-playbook -i production webservers.yml --limit boston
ansible-playbook -i production webservers.yml --limit boston[0:9]
ansible-playbook -i production webservers.yml --limit boston[10:19]

----------------------------------------

TITLE: Defining a Simple YAML Inventory File in Ansible
DESCRIPTION: An example of a basic YAML inventory file structure used in Ansible to define hosts and groups.

LANGUAGE: YAML
CODE:
all:
  hosts:
    mail.example.com:
  children:
    webservers:
      hosts:
        foo.example.com:
        bar.example.com:
    dbservers:
      hosts:
        one.example.com:
        two.example.com:
        three.example.com:

----------------------------------------

TITLE: Listing Python Package Dependencies for Ansible Formatters
DESCRIPTION: This snippet lists the Python packages and their specific versions required for the Ansible project's formatting tools. It includes packages like black, isort, and their dependencies.

LANGUAGE: plaintext
CODE:
# This file was autogenerated by uv via the following command:
#    uv pip compile --universal --output-file tests/formatters.txt tests/formatters.in
black==24.10.0
    # via -r tests/formatters.in
click==8.1.8
    # via black
colorama==0.4.6 ; platform_system == 'Windows'
    # via click
isort==5.13.2
    # via -r tests/formatters.in
mypy-extensions==1.0.0
    # via black
packaging==24.2
    # via black
pathspec==0.12.1
    # via black
platformdirs==4.3.6
    # via black

----------------------------------------

TITLE: Fetching and Checking Out PR Code
DESCRIPTION: Git commands for fetching and checking out a specific PR for testing

LANGUAGE: shell-session
CODE:
git fetch origin refs/pull/XXXX/head:testing_PRXXXX
git checkout testing_PRXXXX

----------------------------------------

TITLE: Backup NXOS Config via CLI
DESCRIPTION: Task to backup current switch configuration using CLI connection method.

LANGUAGE: yaml
CODE:
- name: Backup current switch config (nxos)
  cisco.nxos.nxos_config:
    backup: yes
  register: backup_nxos_location
  when: ansible_network_os == 'cisco.nxos.nxos'

----------------------------------------

TITLE: Custom Failure Conditions with failed_when
DESCRIPTION: Examples of using failed_when to define custom failure conditions based on command output or return codes.

LANGUAGE: yaml
CODE:
- name: Fail task when the command error output prints FAILED
  ansible.builtin.command: /usr/bin/example-command -x -y -z
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"

----------------------------------------

TITLE: Configuring System Settings via NETCONF
DESCRIPTION: Example task demonstrating system configuration using NETCONF connection, including hostname and domain settings.

LANGUAGE: yaml
CODE:
- name: Configure hostname and domain-name
  cisco.iosxr.iosxr_system:
    hostname: iosxr01
    domain_name: test.example.com
    domain_search:
      - ansible.com
      - redhat.com
      - cisco.com

----------------------------------------

TITLE: Setting up Python virtual environment for Ansible docs
DESCRIPTION: Creates a Python virtual environment and activates it for working on Ansible documentation.

LANGUAGE: bash
CODE:
python3 -m venv ./venv
source ./venv/bin/activate

----------------------------------------

TITLE: PostgreSQL Info Module Test
DESCRIPTION: YAML tasks implementing tests for the postgresql_info module

LANGUAGE: yaml
CODE:
- name: Test postgresql_info module
  become: true
  become_user: postgres
  community.postgresql.postgresql_info:
    login_user: postgres
    login_db: postgres
  register: result

- name: Check the module returns what we expect
  assert:
    that:
      - result is not changed
      - result.version.major == 12
      - result.version.minor == 8

----------------------------------------

TITLE: Package Dependencies List
DESCRIPTION: Detailed listing of Python package dependencies with their exact versions and dependency relationships. Each package entry includes version constraints and references to dependent packages.

LANGUAGE: txt
CODE:
# This file was autogenerated by uv via the following command:\n#    uv pip compile --universal --output-file tests/requirements.txt tests/requirements.in\naiofiles==24.1.0\n    # via\n    #   antsibull-core\n    #   antsibull-fileutils\naiohappyeyeballs==2.6.1\n    # via aiohttp\naiohttp==3.11.14\n    # via\n    #   antsibull-core\n    #   antsibull-docs

----------------------------------------

TITLE: ReStructuredText Documentation Structure
DESCRIPTION: Defines the document structure using ReStructuredText formatting, including a title, section headers, and table of contents tree.

LANGUAGE: rst
CODE:
.. _community_steering_committee:

************************************
Ansible Community Steering Committee
************************************

This section focuses on the guidelines and membership of the Ansible Community Steering Committee.

.. toctree::
   :maxdepth: 1

   community_steering_committee
   steering_committee_membership
   steering_committee_past_members
   community_topics_workflow

----------------------------------------

TITLE: Adding Images with Alt Text in reStructuredText
DESCRIPTION: Shows how to add images with alternative text for accessibility in Ansible documentation using reStructuredText.

LANGUAGE: restructuredtext
CODE:
.. image:: path/networkdiag.png
   :width: 400
   :alt: SpiffyCorp network diagram

----------------------------------------

TITLE: Example Module Warning Change (YAML)
DESCRIPTION: Example showing new YAML format for suppressing warnings in command/shell modules

LANGUAGE: yaml
CODE:
- name: Execute command
  command: somecommand
  warn: false # Deprecated parameter

----------------------------------------

TITLE: Retrieving ENOS OS Version with Ansible Task
DESCRIPTION: This YAML snippet shows an Ansible task for retrieving the ENOS OS version using the community.network.enos_command module. The task is conditional based on the ansible_network_os variable.

LANGUAGE: yaml
CODE:
- name: Retrieve ENOS OS version
  community.network.enos_command:
    commands: show version
  when: ansible_network_os == 'community.network.enos'

----------------------------------------

TITLE: Using group_by Module for OS-Based Tasks
DESCRIPTION: Example showing how to use group_by module to categorize systems based on operating system for targeted execution.

LANGUAGE: yaml
CODE:
- name: Create group of all hosts by OS
  ansible.builtin.group_by:
    key: os_{{ ansible_facts['distribution'] }}

----------------------------------------

TITLE: Running Ansible Ad-hoc Command with Community EE Minimal Image
DESCRIPTION: Example of running an Ansible ad-hoc command against localhost using the community-ee-minimal execution environment image with ansible-navigator.

LANGUAGE: bash
CODE:
ansible-navigator exec "ansible localhost -m setup" --execution-environment-image ghcr.io/ansible-community/community-ee-minimal:latest --mode stdout

----------------------------------------

TITLE: Adding Code Blocks in Markdown
DESCRIPTION: Demonstrates how to add code blocks with syntax highlighting in Markdown for Ansible documentation.

LANGUAGE: markdown
CODE:
```text
docs/
    index.md
    user-guide/getting-started.md
    user-guide/configuration-options.md
    license.md
```

----------------------------------------

TITLE: Executing CLI Command on Junos Device
DESCRIPTION: YAML task for retrieving Junos OS version using the CLI connection method. Demonstrates basic command execution using junipernetworks.junos.junos_command module.

LANGUAGE: yaml
CODE:
- name: Retrieve Junos OS version
  junipernetworks.junos.junos_command:
    commands: show version
  when: ansible_network_os == 'junipernetworks.junos.junos'

----------------------------------------

TITLE: Defining Environment Variables in Ansible Group Variables
DESCRIPTION: Illustrates how to store environment settings in a group_vars file for reuse across multiple Ansible playbooks.

LANGUAGE: yaml
CODE:
---
# file: group_vars/boston

ntp_server: ntp.bos.example.com
backup: bak.bos.example.com
proxy_env:
  http_proxy: http://proxy.bos.example.com:8080
  https_proxy: http://proxy.bos.example.com:8080

----------------------------------------

TITLE: Enabling NETCONF on Junos Device
DESCRIPTION: YAML task for enabling NETCONF on a Junos device using the CLI connection. Required before using NETCONF-based connections.

LANGUAGE: yaml
CODE:
- name: Enable NETCONF
  connection: ansible.netcommon.network_cli
  junipernetworks.junos.junos_netconf:
  when: ansible_network_os == 'junipernetworks.junos.junos'

----------------------------------------

TITLE: Building Ansible core documentation
DESCRIPTION: Builds all the reStructuredText files for Ansible core documentation with minimal module documentation.

LANGUAGE: bash
CODE:
make coredocs

----------------------------------------

TITLE: Validating custom facts
DESCRIPTION: Shell command to validate custom facts added through facts.d.

LANGUAGE: shell
CODE:
ansible <hostname> -m ansible.builtin.setup -a "filter=ansible_local"

----------------------------------------

TITLE: Using Untested Dependencies for Documentation Build
DESCRIPTION: Example of using untested dependencies by setting the PINNED environment variable to false when running nox.

LANGUAGE: bash
CODE:
PINNED=false nox -s "checkers(docs-build)"

----------------------------------------

TITLE: Defining Ansible Inventory in YAML
DESCRIPTION: This snippet shows the content of a hosts.yml inventory file. It defines a group named 'webservers' with a single host.

LANGUAGE: yaml
CODE:
all:
  children:
    webservers:
      hosts:
        webserver01:
          ansible_host: 192.0.2.50

----------------------------------------

TITLE: Handling Import Errors in Base Classes
DESCRIPTION: Shows two approaches for handling import errors when the imported library is used in a base class definition. This ensures the code remains functional even when the library is not available.

LANGUAGE: python
CODE:
if not ANOTHER_LIBRARY_IMPORT_ERROR:
    class CustomThing(UsefulThing):
        pass

LANGUAGE: python
CODE:
try:
    from another_library import UsefulThing
except ImportError:
    class UsefulThing:
        pass
    ...

----------------------------------------

TITLE: Defining Section Headings in reStructuredText
DESCRIPTION: Demonstrates the standard heading notations used in Ansible documentation for different levels of sections.

LANGUAGE: restructuredtext
CODE:
###############
Developer guide
###############

*******************
Ansible style guide
*******************

Mechanical guidelines
=====================

Internal navigation
-------------------

Adding anchors
^^^^^^^^^^^^^^

Paragraph that needs a title
""""""""""""""""""""""""""""

----------------------------------------

TITLE: Importing Future Annotations in Python for Ansible
DESCRIPTION: This code snippet defines the standard import statement to be included at the beginning of Python files in the Ansible project. It enables the use of forward references in type annotations.

LANGUAGE: python
CODE:
from __future__ import annotations

----------------------------------------

TITLE: Verifying Documentation Build
DESCRIPTION: Command to verify the documentation build process using nox.

LANGUAGE: bash
CODE:
nox -s "checkers(docs-build)"

----------------------------------------

TITLE: RST Directory Structure Definition
DESCRIPTION: RST file defining the documentation structure for Ansible command line tools using toctree directive.

LANGUAGE: rst
CODE:
.. toctree::
   :maxdepth: 1

   ../cli/ansible.rst
   ../cli/ansible-config.rst
   ../cli/ansible-console.rst
   ../cli/ansible-doc.rst
   ../cli/ansible-galaxy.rst
   ../cli/ansible-inventory.rst
   ../cli/ansible-playbook.rst
   ../cli/ansible-pull.rst
   ../cli/ansible-vault.rst

----------------------------------------

TITLE: Adding Internal Links in Markdown
DESCRIPTION: Shows how to create internal links to other pages and specific sections within Ansible documentation using Markdown.

LANGUAGE: markdown
CODE:
[configuration](/configuration)

[dependency](/configuration/#dependency)

----------------------------------------

TITLE: Configuring Enabled Callback Plugins in Ansible.cfg
DESCRIPTION: This snippet shows how to enable multiple callback plugins in the Ansible configuration file. It demonstrates enabling timer, mail, profile_roles, and a custom callback from a collection.

LANGUAGE: ini
CODE:
#callbacks_enabled = timer, mail, profile_roles, collection_namespace.collection_name.custom_callback

----------------------------------------

TITLE: Using local_action in Ansible Playbook
DESCRIPTION: This snippet shows the shorthand syntax (local_action) for delegating tasks to 127.0.0.1. It performs the same operations as the previous example but with a more concise syntax.

LANGUAGE: yaml
CODE:
---
# ...

  tasks:
    - name: Take out of load balancer pool
      local_action: ansible.builtin.command /usr/bin/take_out_of_pool {{ inventory_hostname }}

# ...

    - name: Add back to load balancer pool
      local_action: ansible.builtin.command /usr/bin/add_back_to_pool {{ inventory_hostname }}

----------------------------------------

TITLE: Generating Contextual Description Reminders in Liquid
DESCRIPTION: A template that generates personalized messages to notify contributors about providing detailed descriptions. Uses Liquid templating to access user context and conditionally display different messages for pull requests versus issues.

LANGUAGE: liquid
CODE:
Thanks for your contribution, @{{ ctx.member.user.login }}! Please make sure that your {{ ctx.TYPE }} includes sufficient and meaningful details in the description.
{% if ctx.TYPE == "pull request" %}
PR descriptions provide important context and allow other developers and our future selves to understand a change's rationale and what it actually fixes or accomplishes.
{% else %}
Issue descriptions are important so others can fully understand and reproduce the issue.
{% endif %}

----------------------------------------

TITLE: Building reST files with sphinx-build
DESCRIPTION: Uses sphinx-build utility to build one or more reStructuredText files, providing more detailed syntax feedback.

LANGUAGE: bash
CODE:
sphinx-build [options] sourcedir outdir [filenames...]

----------------------------------------

TITLE: Defining Metaclass Boilerplate in Python
DESCRIPTION: This snippet shows the recommended boilerplate to include at the top of Python files in Ansible. It sets the __metaclass__ to type, ensuring that all classes defined in the file are new-style classes, even in Python 2.

LANGUAGE: python
CODE:
__metaclass__ = type

----------------------------------------

TITLE: Configuring Free Strategy in Ansible Playbook
DESCRIPTION: Example of setting the free strategy in a playbook to allow each host to run independently until the end of the play.

LANGUAGE: yaml
CODE:
- hosts: all
  strategy: free
  tasks:
  # ...

----------------------------------------

TITLE: Apache License 2.0 Boilerplate Notice
DESCRIPTION: Standard license notice template to be included in source files, with placeholders for copyright year and owner information.

LANGUAGE: text
CODE:
Copyright {yyyy} {name of copyright owner}

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

----------------------------------------

TITLE: Implementing Main Function in Python Ansible Module
DESCRIPTION: Example of how to structure the main function in an Ansible module to allow for unit testing by using a conditional execution block.

LANGUAGE: python
CODE:
if __name__ == '__main__':
    main()

----------------------------------------

TITLE: Configuring RestructuredText Documentation Tree
DESCRIPTION: Defines the documentation structure using toctree directives to organize Ansible's documentation into logical sections including getting started guides, installation instructions, usage guides, and reference materials.

LANGUAGE: restructuredtext
CODE:
.. toctree::
   :maxdepth: 2
   :caption: Ansible getting started

   getting_started/index
   getting_started_ee/index

----------------------------------------

TITLE: Generating random MAC addresses
DESCRIPTION: Use the random_mac filter to generate random MAC addresses

LANGUAGE: yaml+jinja
CODE:
"{{ '52:54:00' | community.general.random_mac }}"
# => '52:54:00:ef:1c:03'

"{{ '52:54:00' | community.general.random_mac(seed=inventory_hostname) }}"

----------------------------------------

TITLE: Testing Ansible modules with test-module.py
DESCRIPTION: Examples of using the test-module.py script to run Ansible modules locally for testing and debugging purposes.

LANGUAGE: bash
CODE:
$ ./hacking/test-module.py -m lib/ansible/modules/command.py -a "echo hi"

LANGUAGE: bash
CODE:
$ ./hacking/test-module.py -m module \
    -a '{"parent": {"child": [{"item": "first", "val": "foo"}, {"item": "second", "val": "bar"}]}}'

----------------------------------------

TITLE: RST Documentation Redirect for Ansible Privilege Escalation
DESCRIPTION: ReStructuredText markup that creates a documentation page with an orphan directive and redirects to the playbooks privilege escalation section.

LANGUAGE: rst
CODE:
:orphan:

******************************************
Understanding privilege escalation: become
******************************************

This page has moved to :ref:`playbooks_privilege_escalation`.

----------------------------------------

TITLE: Redirecting a Module in a Collection using YAML Configuration
DESCRIPTION: This YAML snippet shows how to add a redirect entry for a module named 'old_cloud' to 'foo.bar.new_cloud' in a collection's meta/runtime.yml file, optionally including deprecation information.

LANGUAGE: yaml
CODE:
plugin_routing:
    modules:
        old_cloud:
            redirect: foo.bar.new_cloud
            deprecation:
                removal_version: 2.0.0
                warning_text: Use foo.bar.new_cloud instead.

----------------------------------------

TITLE: Backing Up Dell OS10 Switch Configuration with Ansible YAML
DESCRIPTION: Example Ansible task in YAML for backing up the current configuration of a Dell OS10 switch. It uses the dellemc.os10.os10_config module and registers the backup location.

LANGUAGE: yaml
CODE:
- name: Backup current switch config (dellos10)
  dellemc.os10.os10_config:
    backup: yes
  register: backup_dellos10_location
  when: ansible_network_os == 'dellemc.os10.os10'

----------------------------------------

TITLE: Debugging Facts in Ansible
DESCRIPTION: Task to display all available Ansible facts for system inspection

LANGUAGE: yaml
CODE:
- name: Show facts available on the system
  ansible.builtin.debug:
    var: ansible_facts

----------------------------------------

TITLE: Adding a Row to the Settings by Platform Table
DESCRIPTION: Example of how to add a new row for a platform to the settings_by_platform table in Ansible documentation. The table summarizes connection options for each network platform.

LANGUAGE: text
CODE:
+-------------------+-------------------------+-------------+---------+---------+----------+
| My OS             | ``myos``                | ✓           | ✓       |         | ✓        |

----------------------------------------

TITLE: Running final tests for documentation PR
DESCRIPTION: Executes the automated tests that are run on documentation pull requests, including cleaning, building, and checking reStructuredText files.

LANGUAGE: bash
CODE:
make clean -C docs/docsite
python tests/checkers.py docs-build
python tests/checkers.py rstcheck

----------------------------------------

TITLE: Restructured Text Document Structure
DESCRIPTION: RST formatting for the Ansible User Guide documentation page, including orphan directive, section headers, and reference links.

LANGUAGE: rst
CODE:
:orphan:

.. _user_guide_index:

##########
User Guide
##########

.. note::

    **Making Open Source More Inclusive**

    Red Hat is committed to replacing problematic language in our code, documentation, and web properties. We are beginning with these four terms: master, slave, blacklist, and whitelist. We ask that you open an issue or pull request if you come upon a term that we have missed. For more details, see `our CTO Chris Wright's message <https://www.redhat.com/en/blog/making-open-source-more-inclusive-eradicating-problematic-language>`_.

Welcome to the Ansible User Guide!
This guide is now deprecated to improve navigation and organization.
You can find all the user guide content in the following sections:

* :ref:`inventory_guide_index`
* :ref:`command_guide_index`
* :ref:`playbook_guide_index`
* :ref:`vault_guide_index`
* :ref:`modules_plugins_index`
* :ref:`collections_index`
* :ref:`os_guide_index`
* :ref:`tips_tricks_index`

----------------------------------------

TITLE: Generating Spelling Dependencies with uv for Ansible
DESCRIPTION: This snippet shows the command used to generate the spelling dependencies file using the uv tool. It compiles the dependencies from a source file and outputs them to a specific file.

LANGUAGE: plaintext
CODE:
# This file was autogenerated by uv via the following command:\n#    uv pip compile --universal --output-file tests/spelling.txt tests/spelling.in

----------------------------------------

TITLE: RST Documentation Redirect
DESCRIPTION: ReStructuredText directive for marking a page as orphaned and creating a documentation redirect to the playbook strategies section.

LANGUAGE: rst
CODE:
:orphan:

Controlling playbook execution: strategies and more
===================================================

This page has moved to :ref:`playbooks_strategies`.

----------------------------------------

TITLE: Configuring CLI Connection for EXOS in Ansible YAML
DESCRIPTION: Example YAML configuration for group_vars to set up CLI connection to EXOS devices. Includes settings for connection type, network OS, user authentication, and SSH proxy command for bastion host access.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: community.network.exos
ansible_user: myuser
ansible_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Configuring reStructuredText Table of Contents for Ansible Roadmaps
DESCRIPTION: Sets up a table of contents tree using reStructuredText directives to organize Ansible roadmap documentation. Uses toctree directive with maxdepth=1 and glob options to include roadmap index files.

LANGUAGE: rst
CODE:
.. _roadmaps:

Roadmaps
===============

.. toctree::
   :maxdepth: 1
   :glob:

   ansible_roadmap_index
   ansible_core_roadmap_index
   old_roadmap_index

----------------------------------------

TITLE: Configuring AWS EC2 Inventory Plugin with Constructed Features
DESCRIPTION: This YAML configuration demonstrates how to use the AWS EC2 inventory plugin with constructed features. It shows how to create dynamic groups based on EC2 tags and how to compose host variables.

LANGUAGE: yaml
CODE:
# demo.aws_ec2.yml
plugin: amazon.aws.aws_ec2
regions:
  - us-east-1
  - us-east-2
keyed_groups:
  - key: tags.Name
    prefix: tag_Name_
    separator: ""
  - key: tags.Role
    prefix: role
groups:
  development: "'devel' in (tags|list)"
  private_only: "public_ip_address is not defined"
compose:
  ansible_host: public_ip_address|default(private_ip_address)
  some_inventory_wide_string: '"Yes, you need both types of quotes here"'

----------------------------------------

TITLE: Specifying Codespell Dependency for Ansible Spelling Checks
DESCRIPTION: This snippet specifies the codespell package as a dependency for spelling checks in the Ansible project. It includes the version number and indicates that it was sourced from the spelling.in file.

LANGUAGE: plaintext
CODE:
codespell==2.3.0\n    # via -r tests/spelling.in

----------------------------------------

TITLE: Handling Import Errors in Ansible Modules
DESCRIPTION: Example of how to properly handle import errors in Ansible modules. This approach ensures that users receive actionable error messages when required libraries are missing.

LANGUAGE: python
CODE:
import traceback

from ansible.module_utils.basic import missing_required_lib

try:
    import another_library
except ImportError:
    HAS_ANOTHER_LIBRARY = False
    ANOTHER_LIBRARY_IMPORT_ERROR = traceback.format_exc()
else:
    HAS_ANOTHER_LIBRARY = True
    ANOTHER_LIBRARY_IMPORT_ERROR = None

LANGUAGE: python
CODE:
module = AnsibleModule(...)

if not HAS_ANOTHER_LIBRARY:
    module.fail_json(
        msg=missing_required_lib('another_library'),
        exception=ANOTHER_LIBRARY_IMPORT_ERROR)

----------------------------------------

TITLE: Updating BOTMETA.yml for Content Migration in Ansible Collections
DESCRIPTION: Example YAML configuration for updating BOTMETA.yml when migrating content between Ansible collections. This configuration informs ansibullbot about the migration and helps redirect issues and PRs to the new repository.

LANGUAGE: yaml
CODE:
$modules/monitoring/grafana/grafana_plugin.py:
    migrated_to: community.grafana
$modules/monitoring/grafana/grafana_dashboard.py:
    migrated_to: community.grafana
$modules/monitoring/grafana/grafana_datasource.py:
    migrated_to: community.grafana
$plugins/callback/grafana_annotations.py:
    maintainers: $team_grafana
    labels: monitoring grafana
    migrated_to: community.grafana
$plugins/doc_fragments/grafana.py:
    maintainers: $team_grafana
    labels: monitoring grafana
    migrated_to: community.grafana

----------------------------------------

TITLE: Handling Lookup Errors with Warning in Ansible
DESCRIPTION: Demonstrates how to configure a lookup plugin to issue a warning instead of failing when a file is not found.

LANGUAGE: YAML+Jinja
CODE:
- name: if this file does not exist, let me know, but continue
  debug: msg="{{ lookup('file', '/nosuchfile', errors='warn') }}"

----------------------------------------

TITLE: Removed Collections
DESCRIPTION: Several collections were removed from Ansible 10, including community.azure, community.sap, gluster.gluster, hpe.nimble, and various netapp collections.



----------------------------------------

TITLE: Implementing Unit Tests for Python Function in Ansible Collection
DESCRIPTION: This Python code demonstrates how to write unit tests for the convert_to_supported function using pytest in an Ansible collection context.

LANGUAGE: python
CODE:
# -*- coding: utf-8 -*-

from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

from datetime import timedelta
from decimal import Decimal

import pytest

from ansible_collections.community.mycollection.plugins.modules.my_module import (
    convert_to_supported,
)

@pytest.mark.parametrize('test_input, expected', [
    (timedelta(0, 43200), '12:00:00'),
    (Decimal('1.01'), 1.01),
    ('string', 'string'),
    (None, None),
    (1, 1),
])
def test_convert_to_supported(test_input, expected):
    assert convert_to_supported(test_input) == expected

def test_convert_to_supported_exception():
    with pytest.raises(ValueError, match=r"too cool"):
        convert_to_supported(42)

----------------------------------------

TITLE: Defining Footnotes in RST
DESCRIPTION: This RST code block defines footnotes explaining the freeze dates and collection update policies.

LANGUAGE: rst
CODE:
.. [1] No new modules or major features accepted after this date. In practice this means we will freeze the semver collection versions to compatible release versions. For example, if the version of community.crypto on this date was community-crypto-2.1.0; ansible-3.0.0 could ship with community-crypto-2.1.1.  It would not ship with community-crypto-2.2.0.

.. [2] After this date only changes blocking a release are accepted.  Accepted changes require creating a new rc and may slip the final release date.
.. [3] Collections will only be updated to a new version if a blocker is approved.  Collection owners should discuss any blockers at a community meeting (before this freeze) to decide whether to bump the version of the collection for a fix. See the `Community meeting agenda <https://github.com/ansible/community/issues/539>`_.

----------------------------------------

TITLE: Retrieving and Updating VLANs on Cisco IOS Device
DESCRIPTION: This example demonstrates how to use the cisco.ios.ios_vlans module to retrieve the current VLAN configuration, store it locally, and then merge updated configurations back to the device.

LANGUAGE: yaml
CODE:
- name: Gather VLAN information as structured data
  cisco.ios.ios_facts:
     gather_subset:
      - '!all'
      - '!min'
     gather_network_resources:
     - 'vlans'

- name: Store VLAN facts to host_vars
  copy:
    content: "{{ ansible_network_resources | to_nice_yaml }}"
    dest: "{{ playbook_dir }}/host_vars/{{ inventory_hostname }}"

- name: Make VLAN config changes by updating stored facts on the control node.
  cisco.ios.ios_vlans:
    config: "{{ vlans }}"
    state: merged
  tags: update_config

----------------------------------------

TITLE: Python Package Dependencies List with Version Pinning
DESCRIPTION: A comprehensive list of Python package dependencies with exact version numbers and their dependency relationships, generated by uv pip compile. Each package entry includes version constraints and indicates which parent packages require it.

LANGUAGE: plaintext
CODE:
# This file was autogenerated by uv via the following command:\n#    uv pip compile --universal --output-file tests/typing.txt tests/typing.in\nargcomplete==3.5.3\n    # via nox\ncertifi==2025.1.31\n    # via requests\ncffi==1.17.1\n    # via\n    #   cryptography\n    #   pynacl\ncharset-normalizer==3.4.1\n    # via requests\nclick==8.1.8\n    # via\n    #   typer\n    #   typer-slim\ncodeowners==0.7.0\n    # via -r tests/../hacking/pr_labeler/requirements.txt\ncolorama==0.4.6 ; sys_platform == 'win32' or platform_system == 'Windows'\n    # via\n    #   click\n    #   colorlog\ncolorlog==6.9.0\n    # via nox\ncryptography==44.0.0\n    # via pyjwt\ndeprecated==1.2.18\n    # via pygithub\ndistlib==0.3.9\n    # via virtualenv\nfilelock==3.17.0\n    # via virtualenv\ngitdb==4.0.12\n    # via gitpython\ngitpython==3.1.44\n    # via -r tests/tag.in\nidna==3.10\n    # via requests\njinja2==3.1.5\n    # via -r tests/../hacking/pr_labeler/requirements.txt\nmarkdown-it-py==3.0.0\n    # via rich\nmarkupsafe==3.0.2\n    # via jinja2\nmdurl==0.1.2\n    # via markdown-it-py\nmypy==1.14.1\n    # via -r tests/typing.in\nmypy-extensions==1.0.0\n    # via mypy\nnox==2024.10.9\n    # via -r tests/typing.in\npackaging==24.2\n    # via\n    #   -r tests/tag.in\n    #   nox\nplatformdirs==4.3.6\n    # via virtualenv\npycparser==2.22\n    # via cffi\npygithub==2.5.0\n    # via -r tests/../hacking/pr_labeler/requirements.txt\npygments==2.19.1\n    # via rich\npyjwt==2.10.1\n    # via pygithub\npynacl==1.5.0\n    # via pygithub\nrequests==2.32.3\n    # via pygithub\nrich==13.9.4\n    # via typer\nshellingham==1.5.4\n    # via typer\nsmmap==5.0.2\n    # via gitdb\ntyper==0.15.1\n    # via -r tests/tag.in\ntyper-slim==0.15.1\n    # via -r tests/../hacking/pr_labeler/requirements.txt\ntypes-docutils==0.21.0.20241128\n    # via -r tests/typing.in\ntyping-extensions==4.12.2\n    # via\n    #   codeowners\n    #   mypy\n    #   pygithub\n    #   typer\n    #   typer-slim\nurllib3==2.3.0\n    # via\n    #   pygithub\n    #   requests\nvirtualenv==20.29.1\n    # via nox\nwrapt==1.17.2\n    # via deprecated

----------------------------------------

TITLE: Importing PowerShell or C# module utils from collections in Ansible 2.8
DESCRIPTION: The syntax for importing PowerShell or C# module utils from collections in Ansible 2.8. This syntax is deprecated in 2.9.

LANGUAGE: powershell
CODE:
#AnsibleRequires -CSharpUtil AnsibleCollections.namespace_name.collection_name.util_filename
#AnsibleRequires -PowerShell AnsibleCollections.namespace_name.collection_name.util_filename

----------------------------------------

TITLE: Defining Table of Contents in reStructuredText
DESCRIPTION: This RST directive creates a local table of contents for the document.

LANGUAGE: rst
CODE:
.. contents::
   :local:

----------------------------------------

TITLE: Sphinx Documentation Reference Directive
DESCRIPTION: A restructuredText (rst) directive that indicates this is an orphaned page and provides a reference link to the main command line tools documentation.

LANGUAGE: rst
CODE:
:orphan:

Working with command line tools
===============================

This page has moved to :ref:`command_line_tools`.

----------------------------------------

TITLE: Executing Modified Ansible Module
DESCRIPTION: Command to execute the modified module code with the debug directory in the Python path.

LANGUAGE: shell
CODE:
$ python AnsiballZ_ping.py execute

----------------------------------------

TITLE: Strict Error Handling in Ansible Lookups
DESCRIPTION: Shows the default behavior of lookup plugins, which is to fail the task when an error occurs.

LANGUAGE: YAML+Jinja
CODE:
- name: if this file does not exist, FAIL (this is the default)
  debug: msg="{{ lookup('file', '/nosuchfile', errors='strict') }}"

----------------------------------------

TITLE: Running Multiple Asynchronous Tasks with Batching in Ansible
DESCRIPTION: Execute multiple asynchronous tasks while limiting concurrent execution using batching. This approach demonstrates how to process a list of items asynchronously in controlled batches.

LANGUAGE: yaml
CODE:
#####################
# main.yml
#####################
- name: Run items asynchronously in batch of two items
  vars:
    sleep_durations:
      - 1
      - 2
      - 3
      - 4
      - 5
    durations: "{{ item }}"
  include_tasks: execute_batch.yml
  loop: "{{ sleep_durations | batch(2) | list }}"

#####################
# execute_batch.yml
#####################
- name: Async sleeping for batched_items
  ansible.builtin.command: sleep {{ async_item }}
  async: 45
  poll: 0
  loop: "{{ durations }}"
  loop_control:
    loop_var: "async_item"
  register: async_results

- name: Check sync status
  async_status:
    jid: "{{ async_result_item.ansible_job_id }}"
  loop: "{{ async_results.results }}"
  loop_control:
    loop_var: "async_result_item"
  register: async_poll_results
  until: async_poll_results.finished
  retries: 30

----------------------------------------

TITLE: Returning Command Error Output in Ansible Module Output
DESCRIPTION: Demonstrates how modules that execute commands return the command's error output.

LANGUAGE: yaml
CODE:
"stderr": "ls: foo: No such file or directory"

----------------------------------------

TITLE: Git Operations for Collection Release
DESCRIPTION: Basic git commands for managing the release process, including branch checkout and upstream synchronization.

LANGUAGE: bash
CODE:
git status
git checkout main     # if needed

LANGUAGE: bash
CODE:
git pull --rebase upstream main

LANGUAGE: bash
CODE:
git checkout -b release_branch

----------------------------------------

TITLE: RST Note Block
DESCRIPTION: A note block in RST format encouraging contributions to the documentation.

LANGUAGE: rst
CODE:
.. note::

   Any improvements to the resources listed in this document or to the document itself are very welcome! Please submit an issue or pull request in the corresponding GitHub repository.

----------------------------------------

TITLE: RST Table Definition for Past Chairpersons
DESCRIPTION: ReStructuredText table listing past Steering Committee chairpersons with their GitHub handles and service periods

LANGUAGE: rst
CODE:
.. table:: Steering Committee past chairpersons

  +------------------+-----------+-------------------+
  | Name             | GitHub    | Years of service  |
  +==================+===========+===================+
  | Tadej Borovšak   | tadeboro  | 2021-2022         |
  +------------------+-----------+-------------------+

----------------------------------------

TITLE: Creating Table of Contents for Older Ansible Roadmaps in reStructuredText
DESCRIPTION: This snippet defines a table of contents (toctree) in reStructuredText format, listing older Ansible roadmap documents. It sets the maximum depth to 1, uses glob for file matching, and provides a caption for the section.

LANGUAGE: reStructuredText
CODE:
.. toctree::
   :maxdepth: 1
   :glob:
   :caption: Older Roadmaps

   ROADMAP_2_9
   ROADMAP_2_8
   ROADMAP_2_7
   ROADMAP_2_6
   ROADMAP_2_5

----------------------------------------

TITLE: Connecting with Multiple User Options in Ansible Ad Hoc Command
DESCRIPTION: Demonstrates how Ansible resolves conflicting user options in an ad hoc command, with the last defined value taking precedence.

LANGUAGE: shell
CODE:
ansible -u mike -m ping myhost -u carol

----------------------------------------

TITLE: Specifying UV Package Version Requirement
DESCRIPTION: Package requirement specification generated by UV pip-compile command, defining the UV package version 0.4.28 as a direct dependency from pip-compile.in file.

LANGUAGE: plaintext
CODE:
# This file was autogenerated by uv via the following command:
#    uv pip compile --universal --output-file tests/pip-compile.txt tests/pip-compile.in
uv==0.4.28
    # via -r tests/pip-compile.in

----------------------------------------

TITLE: Configuring CLI Inventory Variables for IOS-XR
DESCRIPTION: Example configuration for CLI-based connection to IOS-XR devices using network_cli connection type. Includes settings for authentication and bastion host access.

LANGUAGE: ini
CODE:
[iosxr:vars]
ansible_connection=ansible.netcommon.network_cli
ansible_network_os=cisco.iosxr.iosxr
ansible_user=myuser
ansible_password=!vault...
ansible_ssh_common_args='-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Using Unsafe Variables in Ansible Playbooks
DESCRIPTION: Shows how to define and use unsafe variables within an Ansible playbook to prevent templating errors.

LANGUAGE: yaml
CODE:
---
hosts: all
vars:
  my_unsafe_variable: !unsafe 'unsafe % value'
tasks:
    ...

----------------------------------------

TITLE: Validating Interface State with Ansible Utils Module
DESCRIPTION: Ansible tasks that validate the interface data against defined criteria using the ansible.utils.validate module with jsonschema engine and display non-compliant interfaces.

LANGUAGE: yaml
CODE:
- name: Validate interface admin state
  ansible.utils.validate:
    data: "{{ nxos_pyats_show_interface['parsed'] }}"
    criteria:
      - "{{ lookup('file',  './criteria/nxos_show_interface_admin_criteria.json') | from_json }}"
    engine: ansible.utils.jsonschema
  ignore_errors: true
  register: result

- name: Print the interface names that do not satisfy the desired state
  ansible.builtin.debug:
    msg: "{{ item['data_path'].split('.')[0] }}"
  loop: "{{ result['errors'] }}"
  when: "'errors' in result"

----------------------------------------

TITLE: Release Summary Fragment Template
DESCRIPTION: YAML template for release summary changelog fragments

LANGUAGE: yaml
CODE:
release_summary: |-
  Write some text here that should appear as the release summary for this version.
  The format is reStructuredText, but not a list as for regular changelog fragments.
  This text will be inserted into the changelog.

----------------------------------------

TITLE: RST Documentation Section Headers
DESCRIPTION: Section headers in RST format defining the structure of the Ansible ecosystem development resources documentation.

LANGUAGE: rst
CODE:
.. _ecosystem_project_dev_resources:

***********************************************
Ansible Ecosystem Project Development Resources
***********************************************

----------------------------------------

TITLE: Example Method Path Change (Python)
DESCRIPTION: Example showing AnsibleModule method path changes after argument validation refactoring

LANGUAGE: python
CODE:
# Old:
_check_mutually_exclusive() 

# New:
ansible.module_utils.common.validation.check_mutually_exclusive

----------------------------------------

TITLE: Cloning Ansible Core Repository for Documentation
DESCRIPTION: Command to clone required parts of the ansible/ansible repository for documentation purposes.

LANGUAGE: bash
CODE:
nox -s clone-core

----------------------------------------

TITLE: Sphinx Documentation Redirect - RST
DESCRIPTION: ReStructuredText directive for marking an orphaned page and setting up a redirect to the variables and facts documentation section.

LANGUAGE: rst
CODE:
:orphan:

************************************************
Discovering variables: facts and magic variables
************************************************

This page has moved to :ref:`vars_and_facts`.

----------------------------------------

TITLE: Overriding Connection Type in Ansible Playbook Tasks
DESCRIPTION: Illustrates how connection types can be set at the play level and overridden at the task level in an Ansible playbook.

LANGUAGE: yaml
CODE:
- hosts: all
  connection: ssh
  tasks:
    - name: This task uses ssh.
      ping:

    - name: This task uses paramiko.
      connection: paramiko
      ping:

----------------------------------------

TITLE: Configuring NETCONF Connection for CloudEngine OS in Ansible Inventory
DESCRIPTION: Example inventory configuration for using NETCONF connection with CloudEngine OS devices. Specifies connection type, network OS, credentials, and SSH options.

LANGUAGE: ini
CODE:
[ce:vars]
ansible_connection=ansible.netcommon.netconf
ansible_network_os=community.network.ce
ansible_user=myuser
ansible_password=!vault |
ansible_ssh_common_args='-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Using Httpapi Plugin with Arista EOS in Ansible Playbook
DESCRIPTION: This snippet demonstrates how to use an Httpapi plugin for an Arista network device in an Ansible playbook. It assumes the inventory variable ansible_network_os is set to 'eos' to trigger the appropriate plugin.

LANGUAGE: yaml
CODE:
- hosts: leaf01
  connection: httpapi
  gather_facts: false
  tasks:

    - name: type a simple arista command
      eos_command:
        commands:
          - show version | json
      register: command_output

    - name: print command output to terminal window
      debug:
        var: command_output.stdout[0]["version"]

----------------------------------------

TITLE: Installing Specific Version of Ansible Collection
DESCRIPTION: Demonstrates how to install a specific beta version of an Ansible collection using the exact version match operator.

LANGUAGE: bash
CODE:
ansible-galaxy collection install my_namespace.my_collection:==1.0.0-beta.1

----------------------------------------

TITLE: Defining Table of Contents in reStructuredText for Ansible Advanced Contributor Guide
DESCRIPTION: This snippet defines the structure of the Advanced Contributor Guide using reStructuredText syntax. It creates a table of contents with links to specific sections of the guide.

LANGUAGE: reStructuredText
CODE:
.. _advanced_community_guide:

**********************************************
Advanced Contributor Guide
**********************************************

This guide focuses on contributors who are committers, GitHub admins, release managers, or Ansible ecosystem project developers.

.. toctree::
   :maxdepth: 1

   committer_guidelines
   release_managers
   github_admins
   ecosystem_project_resources

----------------------------------------

TITLE: Generating Dependency List with UV
DESCRIPTION: This command uses the UV tool to compile and generate a list of Python dependencies for the Ansible PR labeler.

LANGUAGE: Shell
CODE:
uv pip compile --universal --output-file tests/pr_labeler.txt tests/pr_labeler.in

----------------------------------------

TITLE: Setting Up WinRM HTTP Listener in PowerShell
DESCRIPTION: PowerShell script to enable WinRM, set up an HTTP listener, open the firewall port, and allow local user accounts to be used with WinRM.

LANGUAGE: powershell
CODE:
# Enables the WinRM service and sets up the HTTP listener
Enable-PSRemoting -Force

# Opens port 5985 for all profiles
$firewallParams = @{
    Action      = 'Allow'
    Description = 'Inbound rule for Windows Remote Management via WS-Management. [TCP 5985]'
    Direction   = 'Inbound'
    DisplayName = 'Windows Remote Management (HTTP-In)'
    LocalPort   = 5985
    Profile     = 'Any'
    Protocol    = 'TCP'
}
New-NetFirewallRule @firewallParams

# Allows local user accounts to be used with WinRM
# This can be ignored if using domain accounts
$tokenFilterParams = @{
    Path         = 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System'
    Name         = 'LocalAccountTokenFilterPolicy'
    Value        = 1
    PropertyType = 'DWORD'
    Force        = $true
}
New-ItemProperty @tokenFilterParams

----------------------------------------

TITLE: Checking ReStructuredText Syntax
DESCRIPTION: Command to check for syntax errors in ReStructuredText source files using nox.

LANGUAGE: bash
CODE:
nox -s "checkers(rstcheck)"

----------------------------------------

TITLE: Downloading Ansible Collection from Local Source Directory
DESCRIPTION: These commands download an Ansible collection from a local source directory or Git repository.

LANGUAGE: bash
CODE:
ansible-galaxy collection download /path/to/collection

LANGUAGE: bash
CODE:
ansible-galaxy collection download git+file:///path/to/collection/.git

----------------------------------------

TITLE: Iterating over hosts in a group using Jinja2
DESCRIPTION: Example of using Jinja2 templating to iterate over hosts in a group within a template file.

LANGUAGE: jinja2
CODE:
{% for host in groups['db_servers'] %}
    {{ host }}
{% endfor %}

----------------------------------------

TITLE: Creating VLAN on CloudEngine OS using NETCONF in Ansible
DESCRIPTION: Example task for creating a VLAN on a CloudEngine OS device using the ce_vlan module with NETCONF connection.

LANGUAGE: yaml
CODE:
- name: Create a vlan, id is 50(ce)
  community.network.ce_vlan:
    vlan_id: 50
    name: WEB
  when: ansible_network_os == 'community.network.ce'

----------------------------------------

TITLE: Setting SSH Password Mechanism via Environment Variable
DESCRIPTION: Exports an environment variable to set the SSH password mechanism to sshpass for Ansible connections.

LANGUAGE: shell
CODE:
export ANSIBLE_SSH_PASSWORD_MECHANISM=sshpass

----------------------------------------

TITLE: Implementing caching in Ansible inventory plugin
DESCRIPTION: Example of how to implement caching in an Ansible inventory plugin using the Cacheable base class.

LANGUAGE: python
CODE:
def parse(self, inventory, loader, path, cache=True):
    super(InventoryModule, self).parse(inventory, loader, path)

    self.load_cache_plugin()
    cache_key = self.get_cache_key(path)

    # cache may be True or False at this point to indicate if the inventory is being refreshed
    # get the user's cache option too to see if we should save the cache if it is changing
    user_cache_setting = self.get_option('cache')

    # read if the user has caching enabled and the cache isn't being refreshed
    attempt_to_read_cache = user_cache_setting and cache
    # update if the user has caching enabled and the cache is being refreshed; update this value to True if the cache has expired below
    cache_needs_update = user_cache_setting and not cache

    # attempt to read the cache if inventory isn't being refreshed and the user has caching enabled
    if attempt_to_read_cache:
        try:
            results = self._cache[cache_key]
        except KeyError:
            # This occurs if the cache_key is not in the cache or if the cache_key expired, so the cache needs to be updated
            cache_needs_update = True
    if not attempt_to_read_cache or cache_needs_update:
        # parse the provided inventory source
        results = self.get_inventory()
    if cache_needs_update:
        self._cache[cache_key] = results

    # submit the parsed data to the inventory object (add_host, set_variable, etc)
    self.populate(results)

----------------------------------------

TITLE: Implementing caching in Ansible inventory plugin
DESCRIPTION: Example of how to implement caching in an Ansible inventory plugin using the Cacheable base class.

LANGUAGE: python
CODE:
def parse(self, inventory, loader, path, cache=True):
    super(InventoryModule, self).parse(inventory, loader, path)

    self.load_cache_plugin()
    cache_key = self.get_cache_key(path)

    # cache may be True or False at this point to indicate if the inventory is being refreshed
    # get the user's cache option too to see if we should save the cache if it is changing
    user_cache_setting = self.get_option('cache')

    # read if the user has caching enabled and the cache isn't being refreshed
    attempt_to_read_cache = user_cache_setting and cache
    # update if the user has caching enabled and the cache is being refreshed; update this value to True if the cache has expired below
    cache_needs_update = user_cache_setting and not cache

    # attempt to read the cache if inventory isn't being refreshed and the user has caching enabled
    if attempt_to_read_cache:
        try:
            results = self._cache[cache_key]
        except KeyError:
            # This occurs if the cache_key is not in the cache or if the cache_key expired, so the cache needs to be updated
            cache_needs_update = True
    if not attempt_to_read_cache or cache_needs_update:
        # parse the provided inventory source
        results = self.get_inventory()
    if cache_needs_update:
        self._cache[cache_key] = results

    # submit the parsed data to the inventory object (add_host, set_variable, etc)
    self.populate(results)

----------------------------------------

TITLE: Changelog Fragment Example - Major Changes
DESCRIPTION: YAML format for documenting major non-breaking changes in an Ansible collection changelog fragment.

LANGUAGE: yaml
CODE:
major_changes:
  - bitbucket_* modules - client_id is no longer marked as \"no_log=true\". If you relied on its value not showing up in logs and output, mark the whole task with \"no_log: true\" (https://github.com/ansible-collections/community.general/pull/2045).

----------------------------------------

TITLE: Installing Collection from Tarball
DESCRIPTION: Install a collection from a local tarball file with custom installation path

LANGUAGE: bash
CODE:
ansible-galaxy collection install my_namespace-my_collection-1.0.0.tar.gz -p ./collections

----------------------------------------

TITLE: Linting and Formatting Python Scripts
DESCRIPTION: Command to lint, type check, and format Python scripts in the repository using nox.

LANGUAGE: bash
CODE:
nox -s lint

----------------------------------------

TITLE: Configuring Meraki Organization Task in Ansible YAML
DESCRIPTION: Example task showing how to configure a Meraki organization using the cisco.meraki.meraki_organization module. Requires API authentication key and organization name, with delegation to localhost.

LANGUAGE: yaml
CODE:
cisco.meraki.meraki_organization:
    auth_key: abc12345
    org_name: YourOrg
    state: present
  delegate_to: localhost

----------------------------------------

TITLE: ReStructuredText Document Structure
DESCRIPTION: RST markup defining the documentation structure including title, note block, and table of contents tree

LANGUAGE: rst
CODE:
.. _modules_plugins_index:

#################################
Using Ansible modules and plugins
#################################

.. note::

    **Making Open Source More Inclusive**

    Red Hat is committed to replacing problematic language in our code, documentation, and web properties. We are beginning with these four terms: master, slave, blacklist, and whitelist. We ask that you open an issue or pull request if you come upon a term that we have missed. For more details, see `our CTO Chris Wright's message <https://www.redhat.com/en/blog/making-open-source-more-inclusive-eradicating-problematic-language>`_.

.. toctree::
   :maxdepth: 2

   modules_intro
   modules_support
   plugin_filtering_config
   ../plugins/plugins
   modules_plugins_index

----------------------------------------

TITLE: Executing VOSS Command in Ansible YAML Task
DESCRIPTION: This snippet shows how to create an Ansible task to retrieve system information from a VOSS device. It uses the community.network.voss_command module to execute the 'show sys-info' command when the network OS is identified as VOSS.

LANGUAGE: yaml
CODE:
- name: Retrieve VOSS info
  community.network.voss_command:
    commands: show sys-info
  when: ansible_network_os == 'community.network.voss'

----------------------------------------

TITLE: Handler Execution Order Example in YAML
DESCRIPTION: Demonstrates the changed behavior in handler execution order when using include_role tasks in ansible-core 2.15. Shows how conditional handlers are processed differently compared to previous versions.

LANGUAGE: yaml
CODE:
- include_role:
    name: foo
  vars:
    invocation: 1

- block:
   - include_role:
       name: foo
     vars:
       invocation: 2
  when: inventory_hostname == "bar"

- meta: flush_handlers

----------------------------------------

TITLE: Iterating Dictionary Keys in Python 3
DESCRIPTION: Shows the proper way to iterate over dictionary keys in Python 3, where dict.iterkeys() has been removed. This method is both more concise and works across Python versions.

LANGUAGE: python
CODE:
for KEY in DICT:
    pass

----------------------------------------

TITLE: Creating Changelog Fragment for New Playbooks
DESCRIPTION: Example YAML format for documenting new playbooks added to Ansible collections.

LANGUAGE: yaml
CODE:
add object.playbook:
  - name: wipe_server
    description: Wipes a server

----------------------------------------

TITLE: Creating NETVISOR Access List Task in Ansible
DESCRIPTION: Example task for creating an access list on NETVISOR using the community.network.pn_access_list module. Demonstrates conditional execution based on network OS type.

LANGUAGE: yaml
CODE:
- name: Create access list
  community.network.pn_access_list:
    pn_name: "foo"
    pn_scope: "local"
    state: "present"
  register: acc_list
  when: ansible_network_os == 'community.network.netvisor'

----------------------------------------

TITLE: Selecting Spelling Corrections Interactively
DESCRIPTION: Command to interactively select corrections when codespell suggests multiple options for spelling errors.

LANGUAGE: bash
CODE:
nox -s spelling -- -w -i 3

----------------------------------------

TITLE: Writing Tasks for NTP Configuration in YAML
DESCRIPTION: Example of tasks in a role's main.yml file for installing, configuring, and running NTP service.

LANGUAGE: yaml
CODE:
---
# file: roles/common/tasks/main.yml

- name: be sure ntp is installed
  yum:
    name: ntp
    state: present
  tags: ntp

- name: be sure ntp is configured
  template:
    src: ntp.conf.j2
    dest: /etc/ntp.conf
  notify:
    - restart ntpd
  tags: ntp

- name: be sure ntpd is running and enabled
  ansible.builtin.service:
    name: ntpd
    state: started
    enabled: true
  tags: ntp

----------------------------------------

TITLE: Demonstrating Secure Conditional Evaluation in Ansible Tasks
DESCRIPTION: Example showing the proper way to handle conditionals with untrusted data in Ansible tasks, addressing CVE-2023-5764 security issue. Demonstrates how to securely access untrusted values using direct Jinja variables instead of embedded templates.

LANGUAGE: yaml
CODE:
- name: task with a module result (always untrusted by Ansible)
  shell: echo "hi mom"
  register: untrusted_result

# don't do it this way...
# - name: insecure conditional with embedded template consulting untrusted data
#   assert:
#     that: '"hi mom" is in {{ untrusted_result.stdout }}'

- name: securely access untrusted values directly as Jinja variables instead
  assert:
    that: '"hi mom" is in untrusted_result.stdout'

----------------------------------------

TITLE: Importing Optional Python module_utils in Ansible Modules
DESCRIPTION: Demonstrates how to optionally import Python module_utils in Ansible modules, allowing for fallback behavior if the import fails. This enables modules to use module_utils that may not be present in all Ansible versions or collections.

LANGUAGE: python
CODE:
try:
    from ansible.module_utils.some_util import some_function
except ImportError:
    # Fallback behavior if the import fails
    def some_function():
        pass

----------------------------------------

TITLE: Boolean Conditional Handling in Ansible Tasks
DESCRIPTION: Shows how to properly handle string boolean values in conditions using the |bool filter, as bare variables in conditionals are deprecated.

LANGUAGE: yaml
CODE:
vars:
  teardown: 'false'

tasks:
  - include_tasks: teardown.yml
    when: teardown | bool

  - include_tasks: provision.yml
    when: not teardown | bool

----------------------------------------

TITLE: Current Steering Committee Members Table Structure
DESCRIPTION: ReStructuredText table defining the current members of the Ansible Steering Committee, including their names, GitHub handles, forum usernames and start years.

LANGUAGE: rst
CODE:
.. table:: Current Steering committee members

  +------------------+---------------+--------------+-------------+
  | Name             | GitHub        | Forum        | Start year  |
  +==================+===============+==============+=============+
  | Alexei Znamensky | russoz        | russoz       | 2022        |
  +------------------+---------------+--------------+-------------+
  | Alicia Cozine    | acozine       | acozine      | 2021        |
  +------------------+---------------+--------------+-------------+

----------------------------------------

TITLE: Configuring Cobbler Integration with Ansible
DESCRIPTION: This snippet shows how to configure the Cobbler integration in Ansible by creating a cobbler.ini file. It specifies the Cobbler server location and caching settings.

LANGUAGE: ini
CODE:
[cobbler]

# Set Cobbler's hostname or IP address
host = http://127.0.0.1/cobbler_api

# API calls to Cobbler can be slow. For this reason, we cache the results of an API
# call. Set this to the path you want cache files to be written to. Two files
# will be written to this directory:
#   - ansible-cobbler.cache
#   - ansible-cobbler.index

cache_path = /tmp

# The number of seconds a cache file is considered valid. After this many
# seconds, a new API call will be made, and the cache file will be updated.

cache_max_age = 900

----------------------------------------

TITLE: Creating Stable Branch for Ansible Documentation
DESCRIPTION: Commands to create a new stable branch in the ansible-documentation repository. This process involves checking out from the upstream devel branch and pushing the new branch.

LANGUAGE: bash
CODE:
# Make sure your checkout is up to date.
git fetch upstream

# Create a new stable branch against the devel branch.
git checkout -b stable-2.18 upstream/devel

# Push the new stable branch to the repository.
git push upstream stable-2.18

----------------------------------------

TITLE: Defining Arrays in Ansible for DSC
DESCRIPTION: Examples of how to define different types of arrays for use with DSC in Ansible.

LANGUAGE: yaml
CODE:
# [string[]]
ValueData: entry1, entry2, entry3
ValueData:
- entry1
- entry2
- entry3

# [UInt32[]]
ReturnCode: 0,3010
ReturnCode:
- 0
- 3010

# [CimInstance[]]BindingInfo == DSC_WebBindingInformation
BindingInfo:
- Protocol: https
  Port: 443
  CertificateStoreName: My
  CertificateThumbprint: C676A89018C4D5902353545343634F35E6B3A659
  HostName: DSCTest
  IPAddress: '*'
  SSLFlags: 1
- Protocol: http
  Port: 80
  IPAddress: '*'

----------------------------------------

TITLE: Example of Lazy Variable Evaluation in Task
DESCRIPTION: Shows how variables are now evaluated lazily only when needed, impacting expressions with undefined variables.

LANGUAGE: yaml
CODE:
- assert:
    that:
      - some_defined_dict_with_undefined_values is undefined
    vars:
      dict_value: 1
      some_defined_dict_with_undefined_values:
        key1: value1
        key2: '{{ dict_value }}'
        key3: '{{ undefined_dict_value }}'

----------------------------------------

TITLE: Converting PFX to PEM Private Key with OpenSSL
DESCRIPTION: Bash command using OpenSSL to convert a PFX file to a PEM private key for use with Ansible.

LANGUAGE: bash
CODE:
openssl pkcs12 \
    -in cert.pfx \
    -nocerts \
    -nodes \
    -passin pass: |
    sed -ne '/-BEGIN PRIVATE KEY-/,/-END PRIVATE KEY-/p' > cert.key

----------------------------------------

TITLE: Legacy Network Module Configuration in Ansible 2.2
DESCRIPTION: Shows the deprecated top-level connection arguments style used in Ansible 2.2 for networking modules.

LANGUAGE: yaml
CODE:
- name: example of using top-level options for connection properties
  ios_command:
    commands: show version
    host: "{{ inventory_hostname }}"
    username: cisco
    password: cisco
    authorize: yes
    auth_pass: cisco

----------------------------------------

TITLE: Configuring Inventory Cache Plugin in YAML Configuration
DESCRIPTION: Sets the cache_plugin option for the aws_ec2 inventory plugin in a YAML configuration file.

LANGUAGE: yaml
CODE:
# dev.aws_ec2.yaml
plugin: aws_ec2
cache_plugin: jsonfile

----------------------------------------

TITLE: Defining Execution Environment Dependencies
DESCRIPTION: Creates an execution-environment.yml file that specifies the dependencies to be included in the Execution Environment image, including the community.postgresql collection.

LANGUAGE: yaml
CODE:
---
dependencies:
  galaxy: requirements.yml
  python: requirements.txt
  system: bindep.txt
additional_build_steps:
  prepend: |
    RUN pip3 install --upgrade pip setuptools
  append:
    - RUN pip3 install --upgrade pip

collections:
  - name: community.postgresql
    version: 2.3.1
    signatures:
      - -----BEGIN PGP SIGNATURE-----

        iQIzBAABCgAdFiEELe+uEig9LdnO1kQoMuZEYIBPYtgFAmO4TAsACgkQMuZEYIBP
        YtjgzA/+OAoQJZ4hhcRJyAzn5HnQkrdgvkBbEzkvxKsxKw/8Tq7c8G77/OVRY8Aa
        WDpCVmVYVAcq/1azQ49Qc5JHfaYHgDFk7SqdLt6tq9Pqwf6kDQi+SjbEOoiW5RXa
        FPo/h60E/Nbb5sWstNVAaBqmOHhk8WBCdRyXq+6qrFgvEJp/uDd92AZ2YMM5qVR1
        L+zFbStZhxhyfxVF+Xeaywss6E9I0MbScvqr6KmPuUBELyG5N96pCe7rqFBjhEqQ
        Tz6fgMZJkYvqXr/XsaJKV0VX1xvA3EE95RKQ7YJNL5QFnulAvxaRLGgQFWAMqN9O
        xrYjuEQPKnzNMf8hJFtyRU4JvqngqEWkVcvY43aqjIgbjRpx5D7n5vwJK8/a6G+F
        nXWWE1ZtJ5sDQjRWMylSjcvJKKKLV5jZS9Uc2JbKvuWgDSV6nfwu9vVOHItJ1DZk
        JMZmGh06XtVhopUx0VjXIUj4ePkXU6sOcS1rPw0mvr07DK8/aNkrOKXn+vdZmzQb
        D3t1hOfZ+rV+3MZWwGMrlSR7lgtR9XDtgSq7QANrPbIqXuuP2Psy/xGRDnglsQe8
        iqLMdjsUPPJW6X2PWTDrwgHq96pNsKT8JeyCxeJ9fCN7JIe+bxACxOLO8ZCQqoXM
        gA7uHaVlTY0CYA1MHJ/qzNuTH4XZYZIq5bLXCyp9mpBZuLHi0F0=
        =QXzp
        -----END PGP SIGNATURE-----

----------------------------------------

TITLE: Module Defaults Group Configuration Example
DESCRIPTION: Demonstrates the usage of module default groups with collection-defined groups.

LANGUAGE: yaml
CODE:
- hosts: localhost
  module_defaults:
    group/ns.coll.my_group:
      option_name: option_value
  tasks:
    - ns.coll.sample_module:
    - another.collection.another_module:

----------------------------------------

TITLE: Displaying Deprecated Component Call
DESCRIPTION: Placeholder for showing the specific deprecated call line that triggered the notice

LANGUAGE: plaintext
CODE:
%(line)s

----------------------------------------

TITLE: Defining Git-based Collections in requirements.yml (YAML)
DESCRIPTION: Shows how to specify a collection from a Git repository in the requirements.yml file. The version key can refer to a branch or a git commit-ish object.

LANGUAGE: yaml
CODE:
collections:
  - name: https://github.com/organization/repo_name.git
    type: git
    version: devel

----------------------------------------

TITLE: Jinja Variable Access Example - Ansible 2.7
DESCRIPTION: Example showing more complex variable access required in Ansible 2.7

LANGUAGE: yaml
CODE:
{{ ((foo | default({})).bar | default({})).baz | default('DEFAULT') }}

----------------------------------------

TITLE: Importing Certificate to Windows Certificate Store
DESCRIPTION: PowerShell script to import a certificate into the LocalMachine\TrustedPeople and Root certificate stores on a Windows host.

LANGUAGE: powershell
CODE:
$cert = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new("cert.pem")

$store = Get-Item -LiteralPath Cert:\LocalMachine\TrustedPeople
$store.Open('ReadWrite')
$store.Add($cert)
$store.Dispose()

$store = Get-Item -LiteralPath Cert:\LocalMachine\Root
$store.Open('ReadWrite')
$store.Add($cert)
$store.Dispose()

----------------------------------------

TITLE: RestructuredText Documentation for Ansible Steering Committee Guidelines
DESCRIPTION: RestructuredText formatted documentation that defines the complete governance structure and processes for the Ansible Community Steering Committee membership, including section headings, nested lists, and reference links.

LANGUAGE: rst
CODE:
.. _community_steering_guidelines:\n\nSteering Committee membership guidelines\n==========================================\n\nThis document describes the expectations and policies related to membership in the :ref:`Ansible Community Steering Committee <steering_responsibilities>` (hereinafter the Committee).\n\n.. contents:: Topics:\n\n.. _steering_expectations:\n\nExpectations of a Steering Committee member\n-------------------------------------------\n\nAs a Committee member, you agree to:\n\n#. Abide by the :ref:`code_of_conduct` in all your interactions with the Community.\n#. Be a Community ambassador by representing its needs within the Committee and throughout the decision making process.\n#. Asynchronously participate in discussions and voting on the `Community Topics <https://forum.ansible.com/tags/c/project/7/community-wg>`_.

----------------------------------------

TITLE: Configuring WeOS 4 Group Variables in Ansible
DESCRIPTION: Example group variables configuration for WeOS 4 devices including connection type, network OS, credentials and SSH proxy settings.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: community.network.weos4
ansible_user: myuser
ansible_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Importing Role to Galaxy
DESCRIPTION: Command to import a role from a GitHub repository to Ansible Galaxy, showing the import process output.

LANGUAGE: bash
CODE:
$ ansible-galaxy role import github_user github_repo

LANGUAGE: text
CODE:
    Successfully submitted import request 41
    Starting import 41: role_name=myrole repo=githubuser/ansible-role-repo ref=
    Retrieving GitHub repo githubuser/ansible-role-repo
    Accessing branch: devel
    Parsing and validating meta/main.yml
    Parsing galaxy_tags
    Parsing platforms
    Adding dependencies
    Parsing and validating README.md
    Adding repo tags as role versions
    Import completed
    Status SUCCESS : warnings=0 errors=0

----------------------------------------

TITLE: Running Windows Commands and Scripts - YAML
DESCRIPTION: Examples of executing commands using win_shell and win_command modules with different execution contexts.

LANGUAGE: yaml
CODE:
- name: Run a command under PowerShell
  win_shell: Get-Service -Name service | Stop-Service

- name: Run a command under cmd
  win_shell: mkdir C:\temp
  args:
    executable: cmd.exe

- name: Run a multiple shell commands
  win_shell: |
    New-Item -Path C:\temp -ItemType Directory
    Remove-Item -Path C:\temp -Force -Recurse
    $path_info = Get-Item -Path C:\temp
    $path_info.FullName

----------------------------------------

TITLE: Configuring Remotes for Ansible Repository in Git
DESCRIPTION: This snippet demonstrates how to view existing remotes and add the upstream remote for the Ansible repository. It shows the initial state with only the origin remote and the final state with both origin and upstream remotes configured.

LANGUAGE: shell
CODE:
$ git remote -v
origin  git@github.com:YOUR_GITHUB_USERNAME/ansible.git (fetch)
origin  git@github.com:YOUR_GITHUB_USERNAME/ansible.git (push)

LANGUAGE: shell
CODE:
$ git remote add upstream https://github.com/ansible/ansible.git

LANGUAGE: shell
CODE:
$ git remote -v
origin  git@github.com:YOUR_GITHUB_USERNAME/ansible.git (fetch)
origin  git@github.com:YOUR_GITHUB_USERNAME/ansible.git (push)
upstream        https://github.com/ansible/ansible.git (fetch)
upstream        https://github.com/ansible/ansible.git (push)

----------------------------------------

TITLE: Jinja Test Syntax Migration - Pre-2.5
DESCRIPTION: Example showing deprecated filter-style syntax for Jinja tests in Ansible 2.4

LANGUAGE: yaml
CODE:
when:
    - result | failed
    - not result | success

----------------------------------------

TITLE: PowerShell Delegation Test Script
DESCRIPTION: PowerShell function to test if a user account is allowed to delegate credentials.

LANGUAGE: powershell
CODE:
Function Test-IsDelegatable {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory)]
        [string]
        $UserName
    )

    $NOT_DELEGATED = 0x00100000

    $searcher = [ADSISearcher]"(&(objectClass=user)(objectCategory=person)(sAMAccountName=$UserName))"
    $res = $searcher.FindOne()
    if (-not $res) {
        Write-Error -Message "Failed to find user '$UserName'"
    }
    else {
        $uac = $res.Properties.useraccountcontrol[0]
        $memberOf = @($res.Properties.memberof)

        $isSensitive = [bool]($uac -band $NOT_DELEGATED)
        $isProtectedUser = [bool]($memberOf -like 'CN=Protected Users,*').Count

        -not ($isSensitive -or $isProtectedUser)
    }
}

Test-IsDelegatable -UserName username

----------------------------------------

TITLE: Running Ansible Tests - Bash Commands
DESCRIPTION: Commands for running various Ansible test suites including integration, sanity, and unit tests using ansible-test.

LANGUAGE: bash
CODE:
$ ansible-test integration name_of_test_subdirectory --docker -v
$ ansible-test integration test_mysql_user --docker -v
$ ansible-test sanity path/to/changed_file.py --docker -v
$ ansible-test units tests/unit/plugins/test_myclass.py --docker

----------------------------------------

TITLE: RST Release Phase Note
DESCRIPTION: ReStructuredText note directive describing beta and release candidate schedule details.

LANGUAGE: rst
CODE:
.. note:: The beta and release candidate schedules allow for up to 3 releases on a weekly schedule depending on the necessity of creating a release.

----------------------------------------

TITLE: Travis Notification Configuration
DESCRIPTION: Configuration in .travis.yml to enable notifications to Galaxy when builds complete.

LANGUAGE: text
CODE:
notifications:
    webhooks: https://galaxy.ansible.com/api/v1/notifications/

----------------------------------------

TITLE: Executing NOS Command Task in Ansible
DESCRIPTION: Example task demonstrating how to execute a show version command on NOS devices and register the output, with conditional execution based on network OS type.

LANGUAGE: yaml
CODE:
- name: Get version information (nos)
  community.network.nos_command:
    commands: "show version"
  register: show_ver
  when: ansible_network_os == 'community.network.nos'

----------------------------------------

TITLE: Updating Core Branch Reference in Ansible Documentation
DESCRIPTION: Command to update the ansible-core-branch.txt file with the new stable branch version. This file is used by scripts to determine which core branch to clone.

LANGUAGE: bash
CODE:
sed -i 's/devel/stable-2.18/g' docs/ansible-core-branch.txt

----------------------------------------

TITLE: RST Note Directive
DESCRIPTION: ReStructuredText note directive for indicating dates may change.

LANGUAGE: rst
CODE:
.. note:: Dates subject to change.

----------------------------------------

TITLE: Installing Dependencies with pipx
DESCRIPTION: Commands for installing additional Python dependencies using pipx inject, with examples for argcomplete and requirements files.

LANGUAGE: console
CODE:
$ pipx inject ansible argcomplete

$ pipx inject --include-apps ansible argcomplete

$ pipx runpip ansible install -r ~/.ansible/collections/ansible_collections/azure/azcollection/requirements.txt

----------------------------------------

TITLE: Importing Platform-Specific Tasks in Role
DESCRIPTION: Demonstrates how to import platform-specific tasks within a role's main tasks file using conditional statements.

LANGUAGE: yaml
CODE:
# roles/example/tasks/main.yml
- name: Install the correct web server for RHEL
  import_tasks: redhat.yml
  when: ansible_facts['os_family']|lower == 'redhat'

- name: Install the correct web server for Debian
  import_tasks: debian.yml
  when: ansible_facts['os_family']|lower == 'debian'

# roles/example/tasks/redhat.yml
- name: Install web server
  ansible.builtin.yum:
    name: "httpd"
    state: present

# roles/example/tasks/debian.yml
- name: Install web server
  ansible.builtin.apt:
    name: "apache2"
    state: present

----------------------------------------

TITLE: Setting a fact for the first host in a group
DESCRIPTION: Example of setting a fact for the first host in a group and accessing its variables.

LANGUAGE: yaml
CODE:
- set_fact: headnode={{ groups['webservers'][0] }}

- debug: msg={{ hostvars[headnode].ansible_eth0.ipv4.address }}

----------------------------------------

TITLE: Configuring Network Connection in Ansible Group Variables
DESCRIPTION: This YAML snippet demonstrates how to set up group variables for network automation using Ansible. It specifies the connection type, network operating system, and privilege escalation settings.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: cisco.ios.ios
ansible_become: true
ansible_become_method: enable

----------------------------------------

TITLE: Configuring VyOS Group Variables in YAML for Ansible
DESCRIPTION: This snippet demonstrates how to set up group variables for VyOS devices in Ansible. It includes connection type, network OS, user credentials, and SSH common arguments for bastion host access.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: vyos.vyos.vyos
ansible_user: myuser
ansible_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: RST Section Headers and Contents
DESCRIPTION: ReStructuredText formatting for document title, section headers, and table of contents.

LANGUAGE: rst
CODE:
.. _core_roadmap_2.19:

*****************
Ansible-core 2.19
*****************

.. contents::
   :local:

----------------------------------------

TITLE: Converting with_random_choice to random filter in Ansible
DESCRIPTION: Shows how to replace with_random_choice using the random filter without a loop. This simplifies the task of selecting a random item from a list.

LANGUAGE: yaml+jinja
CODE:
- name: with_random_choice
  ansible.builtin.debug:
    msg: "{{ item }}"
  with_random_choice: "{{ my_list }}"

- name: with_random_choice -> loop (No loop is needed here)
  ansible.builtin.debug:
    msg: "{{ my_list|random }}"
  tags: random

----------------------------------------

TITLE: Hashing Prompted Values in Ansible
DESCRIPTION: Demonstrates how to hash a prompted value using SHA-512 encryption. This is useful for securely storing passwords or other sensitive information.

LANGUAGE: yaml
CODE:
vars_prompt:

  - name: my_password2
    prompt: Enter password2
    private: true
    encrypt: sha512_crypt
    confirm: true
    salt_size: 7

----------------------------------------

TITLE: Debugging Python Interpreter Discovery on BSD with Ansible Playbook
DESCRIPTION: A playbook that demonstrates how to debug the Python interpreter discovery process on BSD systems, showing the discovered Python path and relevant variables.

LANGUAGE: yaml
CODE:
# playbook.yml
- hosts: test_11
  gather_facts: false
  tasks:
    - command: which python
      register: result
    - debug:
        var: result.stdout
    - debug:
        msg: |-
          {% for i in _vars %}
          {{ i }}:
            {{ lookup('vars', i)|to_nice_yaml|indent(2) }}
          {% endfor %}
      vars:
        _vars: "{{ query('varnames', '.*python.*') }}"

----------------------------------------

TITLE: Configuring FRR Connection in Ansible group_vars
DESCRIPTION: This YAML snippet demonstrates how to configure the connection settings for FRR in an Ansible group_vars file. It includes settings for the connection type, network OS, user authentication, and SSH proxy command for bastion host access.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: frr.frr.frr
ansible_user: frruser
ansible_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Using Basic Test Plugin in Ansible Variables and Tasks
DESCRIPTION: Demonstrates how to use test plugins with the 'is' statement in variables and conditional tasks. Shows basic syntax for test plugin usage in templating context.

LANGUAGE: YAML+Jinja
CODE:
vars:
  is_ready: '{{ task_result is success }}'

tasks:
- name: conditionals are always in 'template' context
  action: dostuff
  when: task_result is failed

----------------------------------------

TITLE: Defining Contents Section in RST
DESCRIPTION: This RST directive creates a local table of contents for the document.

LANGUAGE: rst
CODE:
.. contents::
   :local:

----------------------------------------

TITLE: Network Module Connection Arguments - Pre-2.5
DESCRIPTION: Example showing deprecated top-level connection arguments for network modules

LANGUAGE: yaml
CODE:
- name: example of using top-level options for connection properties
  ios_command:
    commands: show version
    host: "{{ inventory_hostname }}"
    username: cisco
    password: cisco
    authorize: yes
    auth_pass: cisco

----------------------------------------

TITLE: Using become flags for Windows tasks
DESCRIPTION: Examples of using become_flags with Windows tasks for different logon scenarios.

LANGUAGE: YAML
CODE:
- name: copy a file from a fileshare with custom credentials
  ansible.windows.win_copy:
    src: \\server\share\data\file.txt
    dest: C:\temp\file.txt
    remote_src: true
  vars:
    ansible_become: true
    ansible_become_method: runas
    ansible_become_user: DOMAIN\user
    ansible_become_password: Password01
    ansible_become_flags: logon_type=new_credentials logon_flags=netcredentials_only

- name: run a command under a batch logon
  ansible.windows.win_whoami:
  become: true
  become_flags: logon_type=batch

- name: run a command and not load the user profile
  ansible.windows.win_whomai:
  become: true
  become_flags: logon_flags=

----------------------------------------

TITLE: Defining Collections in requirements.yml (YAML)
DESCRIPTION: Example of how to define collections in a requirements.yml file. Shows both simple and detailed collection specifications including name, version, and source options.

LANGUAGE: yaml
CODE:
---
collections:
# With just the collection name
- my_namespace.my_collection

# With the collection name, version, and source options
- name: my_namespace.my_other_collection
  version: ">=1.2.0" # Version range identifiers (default: ``*``)
  source: ... # The Galaxy URL to pull the collection from (default: ``--api-server`` from cmdline)

----------------------------------------

TITLE: Configuring CLI Connection for CloudEngine OS in Ansible Inventory
DESCRIPTION: Example inventory configuration for using CLI connection with CloudEngine OS devices. Specifies connection type, network OS, credentials, and SSH options.

LANGUAGE: ini
CODE:
[ce:vars]
ansible_connection=ansible.netcommon.network_cli
ansible_network_os=community.network.ce
ansible_user=myuser
ansible_password=!vault...
ansible_ssh_common_args='-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Installing antsibull-changelog Tool
DESCRIPTION: Command to install the antsibull-changelog package using pip package manager.

LANGUAGE: bash
CODE:
pip install antsibull-changelog

----------------------------------------

TITLE: Using --vault-id Without Specifying a Vault ID in Ansible
DESCRIPTION: Demonstrates the use of the --vault-id option without specifying a vault ID, which is equivalent to --ask-vault-pass or --vault-password-file options.

LANGUAGE: bash
CODE:
ansible-playbook --vault-id dev-password site.yml

LANGUAGE: bash
CODE:
ansible-playbook --vault-id @prompt site.yml

LANGUAGE: bash
CODE:
ansible-playbook --vault-id my-vault-password-client.py

----------------------------------------

TITLE: Dynamic Include Task Attribute Inheritance - Post-2.5
DESCRIPTION: Example showing how task attributes must be explicitly specified in included files in Ansible 2.5

LANGUAGE: yaml
CODE:
- include_tasks: "{{ ansible_distribution }}.yml"
  tags:
    - distro_include

LANGUAGE: yaml
CODE:
- block:
    - debug:
        msg: "In included file"

    - apt:
        name: nginx
        state: latest
  tags:
    - distro_include

----------------------------------------

TITLE: Disabling UAC on Windows
DESCRIPTION: Tasks to disable User Account Control (UAC) on Windows and reboot the system.

LANGUAGE: YAML
CODE:
- name: turn UAC off
  win_regedit:
    path: HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\policies\system
    name: EnableLUA
    data: 0
    type: dword
    state: present
  register: uac_result

- name: reboot after disabling UAC
  win_reboot:
  when: uac_result is changed

----------------------------------------

TITLE: Encrypted Variable Output Format
DESCRIPTION: Shows the YAML format of an encrypted variable after encryption.

LANGUAGE: yaml
CODE:
the_secret: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      62313365396662343061393464336163383764373764613633653634306231386433626436623361
      6134333665353966363534333632666535333761666131620a663537646436643839616531643561
      63396265333966386166373632626539326166353965363262633030333630313338646335303630
      3438626666666137650a353638643435666633633964366338633066623234616432373231333331
      6564

----------------------------------------

TITLE: Configuring NETCONF Connection in Junos Inventory
DESCRIPTION: INI configuration for setting up NETCONF-based connection to Junos devices via Ansible. Includes settings for connection type, network OS, authentication, and SSH proxy configuration.

LANGUAGE: ini
CODE:
[junos:vars]
ansible_connection=ansible.netcommon.netconf
ansible_network_os=junipernetworks.junos.junos
ansible_user=myuser
ansible_password=!vault |
ansible_ssh_common_args='-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Creating a Basic Ansible Inventory in INI Format
DESCRIPTION: This snippet demonstrates how to create a simple Ansible inventory file in INI format, defining a group called 'myhosts' with three IP addresses.

LANGUAGE: ini
CODE:
[myhosts]
192.0.2.50
192.0.2.51
192.0.2.52

----------------------------------------

TITLE: Passing Multiple Vault Passwords in Ansible Playbook Execution
DESCRIPTION: Illustrates how to provide multiple vault passwords when a playbook requires variables or files encrypted with different vault IDs.

LANGUAGE: bash
CODE:
ansible-playbook --vault-id dev@dev-password --vault-id prod@prompt site.yml

----------------------------------------

TITLE: Importing PowerShell or C# module utils from collections in Ansible 2.9
DESCRIPTION: The new syntax for importing PowerShell or C# module utils from collections in Ansible 2.9. This replaces the deprecated 2.8 syntax.

LANGUAGE: powershell
CODE:
#AnsibleRequires -CSharpUtil ansible_collections.namespace_name.collection_name.plugins.module_utils.util_filename
#AnsibleRequires -PowerShell ansible_collections.namespace_name.collection_name.plugins.module_utils.util_filename

----------------------------------------

TITLE: Configuring CLI Connection in Junos Inventory
DESCRIPTION: INI configuration for setting up CLI-based connection to Junos devices via Ansible. Includes settings for connection type, network OS, authentication, and SSH proxy configuration.

LANGUAGE: ini
CODE:
[junos:vars]
ansible_connection=ansible.netcommon.network_cli
ansible_network_os=junipernetworks.junos.junos
ansible_user=myuser
ansible_password=!vault...
ansible_ssh_common_args='-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Creating Collection Directory Structure - Bash Commands
DESCRIPTION: Creates the required directory structure for Ansible collections in the home directory using mkdir command.

LANGUAGE: bash
CODE:
$ mkdir -p ~/ansible_collections/NAMESPACE/COLLECTION_NAME

----------------------------------------

TITLE: Defining RST Table Styles for Network Platform Options
DESCRIPTION: This HTML snippet defines custom styles for the network platform options table, adding delimiters between header columns.

LANGUAGE: html
CODE:
<style>
/* Style for this single table.  Add delimiters between header columns */
table#network-platform-table thead tr th.head {
  border-left-width: 1px;
  border-left-color: rgb(225, 228, 229);
  border-left-style: solid;
}
</style>

----------------------------------------

TITLE: Validating Changelog Fragments
DESCRIPTION: Optional command to validate the format and content of changelog fragments.

LANGUAGE: bash
CODE:
antsibull-changelog lint

----------------------------------------

TITLE: Encrypted Variable with Vault ID Example - YAML
DESCRIPTION: Example showing the structure of an encrypted variable in YAML format with a vault ID 'dev' in the header.

LANGUAGE: yaml
CODE:
my_encrypted_var: !vault |
          $ANSIBLE_VAULT;1.2;AES256;dev
          30613233633461343837653833666333643061636561303338373661313838333565653635353162
          3263363434623733343538653462613064333634333464660a663633623939393439316636633863
          61636237636537333938306331383339353265363239643939666639386530626330633337633833
          6664656334373166630a363736393262666465663432613932613036303963343263623137386239
          6330

----------------------------------------

TITLE: Conditionals with Embedded Templates
DESCRIPTION: Example of securely accessing untrusted values in conditionals without using embedded templates, which can fail due to security mitigations in Ansible 9.

LANGUAGE: yaml
CODE:
- name: task with a module result (always untrusted by Ansible)
  shell: echo "hi mom"
  register: untrusted_result

# don't do it this way...
# - name: insecure conditional with embedded template consulting untrusted data
#   assert:
#     that: '"hi mom" is in {{ untrusted_result.stdout }}'

- name: securely access untrusted values directly as Jinja variables instead
  assert:
    that: '"hi mom" is in untrusted_result.stdout'

----------------------------------------

TITLE: Configuring IOS Group Variables in Ansible
DESCRIPTION: Example configuration for ios.yml group variables file that sets up network CLI connection, authentication, privilege escalation, and SSH proxy settings for Cisco IOS devices.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: cisco.ios.ios
ansible_user: myuser
ansible_password: !vault...
ansible_become: true
ansible_become_method: enable
ansible_become_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Tagging a file as UTF-8 using Ansible command module on z/OS UNIX
DESCRIPTION: Uses the ansible.builtin.command module to tag a file as UTF-8 encoded on a z/OS UNIX system. This is necessary because Ansible modules do not automatically handle file tagging on z/OS.

LANGUAGE: yaml
CODE:
- name: Tag my_file.txt as UTF-8.
  ansible.builtin.command: chtag -tc iso8859-1 my_file.txt

----------------------------------------

TITLE: Using Test Plugins with List Operations in Ansible
DESCRIPTION: Demonstrates using test plugins with the select family of filters (select, reject, selectattr, rejectattr) for list manipulation and filtering.

LANGUAGE: YAML+Jinja
CODE:
# give me only defined variables from a list of variables, using 'defined' test
good_vars: "{{ all_vars|select('defined') }}"

# this uses the 'equalto' test to filter out non 'fixed' type of addresses from a list
only_fixed_addresses:  "{{ all_addresses|selectattr('type', 'equalto', 'fixed') }}"

# this does the opposite of the previous one
only_fixed_addresses:  "{{ all_addresses|rejectattr('type', 'equalto', 'fixed') }}"

----------------------------------------

TITLE: Testing individual reST file for errors
DESCRIPTION: Uses rstcheck to test a single reStructuredText file for errors.

LANGUAGE: bash
CODE:
rstcheck changed_file.rst

----------------------------------------

TITLE: Using Vault ID with Password Source - Bash
DESCRIPTION: Example of the command pattern for specifying a vault ID label and password source.

LANGUAGE: bash
CODE:
--vault-id label@source

----------------------------------------

TITLE: File Common Arguments Example
DESCRIPTION: Example showing how to handle common file arguments in a module

LANGUAGE: python
CODE:
argument_spec = {
  'path': {
    'type': 'str',
    'required': True,
  },
}

module = AnsibleModule(argument_spec, add_file_common_args=True)
changed = False

# TODO do something with module.params['path'], like update its contents

# Ensure that module.params['path'] satisfies the file options supplied by the user
file_args = module.load_file_common_arguments(module.params)
changed = module.set_fs_attributes_if_different(file_args, changed)

module.exit_json(changed=changed)

----------------------------------------

TITLE: Executing CLI Commands on IOS-XR
DESCRIPTION: Example task showing how to execute CLI commands on IOS-XR devices using the iosxr_command module.

LANGUAGE: yaml
CODE:
- name: Retrieve IOS-XR version
  cisco.iosxr.iosxr_command:
    commands: show version
  when: ansible_network_os == 'cisco.iosxr.iosxr'

----------------------------------------

TITLE: Ansible Delegation Configuration
DESCRIPTION: YAML configuration for enabling Kerberos delegation in Ansible inventory for different connection types.

LANGUAGE: yaml
CODE:
# psrp
ansible_psrp_negotiate_delegate: true

# winrm
ansible_winrm_kerberos_delegation: true

# ssh
ansible_ssh_common_args: -o GSSAPIDelegateCredentials=yes

----------------------------------------

TITLE: Hiding sensitive task output
DESCRIPTION: Example of using the 'no_log' attribute to hide sensitive information in task output.

LANGUAGE: yaml
CODE:
- name: secret task
  shell: /usr/bin/do_something --value={{ secret_value }}
  no_log: True

----------------------------------------

TITLE: Configuring Collection-based Cache Plugin in ansible.cfg
DESCRIPTION: Configures a cache plugin from a collection using its fully qualified name in the ansible.cfg file.

LANGUAGE: ini
CODE:
[defaults]
fact_caching = namespace.collection_name.cache_plugin_name

----------------------------------------

TITLE: RST Documentation Redirect for Ansible Variables
DESCRIPTION: A reStructuredText (RST) directive that marks this document as orphaned and creates a redirect to the variables section of Ansible playbooks documentation.

LANGUAGE: rst
CODE:
:orphan:

***************
Using Variables
***************

This page has moved to :ref:`playbooks_variables`.

----------------------------------------

TITLE: String Encoding in Python Plugins
DESCRIPTION: Example showing how to convert strings to unicode type for Jinja2 compatibility in Ansible plugins.

LANGUAGE: python
CODE:
from ansible.module_utils.common.text.converters import to_text
result_string = to_text(result_string)

----------------------------------------

TITLE: Configuring Dell OS6 Group Variables in Ansible
DESCRIPTION: Example configuration for Dell OS6 group variables including network connection, authentication, privilege escalation, and SSH proxy settings.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: dellemc.os6.os6
ansible_user: myuser
ansible_password: !vault...
ansible_become: true
ansible_become_method: enable
ansible_become_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Check Mode Task Control - YAML
DESCRIPTION: Demonstrates how to skip tasks or ignore errors in check mode using the ansible_check_mode variable.

LANGUAGE: yaml
CODE:
tasks:

  - name: This task will be skipped in check mode
    ansible.builtin.git:
      repo: ssh://git@github.com/mylogin/hello.git
      dest: /home/mylogin/hello
    when: not ansible_check_mode

  - name: This task will ignore errors in check mode
    ansible.builtin.git:
      repo: ssh://git@github.com/mylogin/hello.git
      dest: /home/mylogin/hello
    ignore_errors: "{{ ansible_check_mode }}"

----------------------------------------

TITLE: YAML Multiline Strings
DESCRIPTION: Demonstrates different ways to handle multiline strings in YAML using literal and folded block scalars.

LANGUAGE: yaml
CODE:
include_newlines: |
            exactly as you see
            will appear these three
            lines of poetry

fold_newlines: >
            this is really a
            single line of text
            despite appearances

----------------------------------------

TITLE: Granting SeTcbPrivilege to Ansible user on Windows
DESCRIPTION: Task to grant the SeTcbPrivilege to the Ansible user on a Windows host.

LANGUAGE: YAML
CODE:
- name: grant the ansible user the SeTcbPrivilege right
  ansible.windows.win_user_right:
    name: SeTcbPrivilege
    users: '{{ansible_user}}'
    action: add

----------------------------------------

TITLE: RST Redirect for Ansible Roles Documentation
DESCRIPTION: ReStructuredText markup for creating a documentation redirect page. Uses :orphan: directive to mark the page as standalone and includes a reference link to the main roles documentation.

LANGUAGE: rst
CODE:
:orphan:

*****
Roles
*****

This page has moved to :ref:`playbooks_reuse_roles`.

----------------------------------------

TITLE: Iterating Over Dictionary Values in Python 3
DESCRIPTION: This snippet demonstrates the direct method of iterating over dictionary values in Python 3 using the values() method. It's a straightforward replacement for the removed dict.itervalues method.

LANGUAGE: python
CODE:
for VALUE in DICT.values():
   pass

----------------------------------------

TITLE: SSH Config for Bastion Host
DESCRIPTION: Example SSH configuration for using NETCONF through a jump host.

LANGUAGE: ini
CODE:
Host *
  proxycommand ssh -o StrictHostKeyChecking=no -W %h:%p jumphost-username@jumphost.fqdn.com
  StrictHostKeyChecking no

----------------------------------------

TITLE: Configuring Inventory Plugin Caching
DESCRIPTION: This YAML configuration shows how to set up caching for an inventory plugin, specifically for the AWS EC2 plugin. It demonstrates setting cache type, timeout, and connection details.

LANGUAGE: yaml
CODE:
# demo.aws_ec2.yml
plugin: amazon.aws.aws_ec2
cache: true
cache_plugin: ansible.builtin.jsonfile
cache_timeout: 7200
cache_connection: /tmp/aws_inventory
cache_prefix: aws_ec2

----------------------------------------

TITLE: Defining Webservers Playbook in YAML
DESCRIPTION: Shows the structure of a playbook (webservers.yml) that applies roles to the webservers group.

LANGUAGE: yaml
CODE:
---
# file: webservers.yml
- hosts: webservers
  roles:
    - common
    - webtier

----------------------------------------

TITLE: Dynamic variable composition in Jinja2
DESCRIPTION: Example of dynamically composing variable names using string concatenation in Jinja2.

LANGUAGE: jinja2
CODE:
{{ hostvars[inventory_hostname]['ansible_' ~ which_interface]['ipv4']['address'] }}

----------------------------------------

TITLE: Converting with_subelements to loop in Ansible
DESCRIPTION: Shows how to replace with_subelements using loop and the subelements filter. This allows iteration over nested elements within list items.

LANGUAGE: yaml+jinja
CODE:
- name: with_subelements
  ansible.builtin.debug:
    msg: "{{ item.0.name }} - {{ item.1 }}"
  with_subelements:
    - "{{ users }}"
    - mysql.hosts

- name: with_subelements -> loop
  ansible.builtin.debug:
    msg: "{{ item.0.name }} - {{ item.1 }}"
  loop: "{{ users|subelements('mysql.hosts') }}"

----------------------------------------

TITLE: RST Directive for Orphaned Document
DESCRIPTION: RST directive indicating this document should be treated as orphaned, meaning it won't be included in the main table of contents.

LANGUAGE: rst
CODE:
:orphan:

----------------------------------------

TITLE: NETCONF Task with Custom SSH Key
DESCRIPTION: Example showing NETCONF configuration with a custom private key file path variable.

LANGUAGE: yaml
CODE:
- name: configure interface while providing different private key file path
  junipernetworks.junos.netconf_config:
    backup: yes
  register: backup_junos_location
  vars:
    ansible_private_key_file: /home/admin/.ssh/newprivatekeyfile

----------------------------------------

TITLE: Basic Block Structure with Task Grouping in Ansible YAML
DESCRIPTION: Demonstrates how to group tasks within a block with common conditions and privilege escalation directives. Shows inheritance of when conditions and become directives by all tasks in the block.

LANGUAGE: YAML
CODE:
tasks:
  - name: Install, configure, and start Apache
    when: ansible_facts['distribution'] == 'CentOS'
    block:
      - name: Install httpd and memcached
        ansible.builtin.yum:
          name:
          - httpd
          - memcached
          state: present

      - name: Apply the foo config template
        ansible.builtin.template:
          src: templates/src.j2
          dest: /etc/foo.conf

      - name: Start service bar and enable it
        ansible.builtin.service:
          name: bar
          state: started
          enabled: True
    become: true
    become_user: root
    ignore_errors: true

----------------------------------------

TITLE: Basic Block Structure with Task Grouping in Ansible YAML
DESCRIPTION: Demonstrates how to group tasks within a block with common conditions and privilege escalation directives. Shows inheritance of when conditions and become directives by all tasks in the block.

LANGUAGE: YAML
CODE:
tasks:
  - name: Install, configure, and start Apache
    when: ansible_facts['distribution'] == 'CentOS'
    block:
      - name: Install httpd and memcached
        ansible.builtin.yum:
          name:
          - httpd
          - memcached
          state: present

      - name: Apply the foo config template
        ansible.builtin.template:
          src: templates/src.j2
          dest: /etc/foo.conf

      - name: Start service bar and enable it
        ansible.builtin.service:
          name: bar
          state: started
          enabled: True
    become: true
    become_user: root
    ignore_errors: true

----------------------------------------

TITLE: Creating Encrypted Files with Ansible Vault
DESCRIPTION: Demonstrates how to create a new encrypted file using ansible-vault create command.

LANGUAGE: bash
CODE:
ansible-vault create --vault-id test@multi_password_file foo.yml

----------------------------------------

TITLE: Adding Upstream Remote for Forked Repository
DESCRIPTION: Adds the original community.general repository as a remote named 'upstream' when working with a forked repository.

LANGUAGE: shell
CODE:
cd ~/dev/ansible/collections/ansible_collections/community/general
git remote add upstream git@github.com:ansible-collections/community.general.git

----------------------------------------

TITLE: Testing List Contents in Ansible
DESCRIPTION: Shows how to use the contains test and any/all tests for checking list contents in Ansible tasks.

LANGUAGE: yaml
CODE:
vars:
  lacp_groups:
    - master: lacp0
      network: 10.65.100.0/24
      gateway: 10.65.100.1
      dns4:
        - 10.65.100.10
        - 10.65.100.11
      interfaces:
        - em1
        - em2

    - master: lacp1
      network: 10.65.120.0/24
      gateway: 10.65.120.1
      dns4:
        - 10.65.100.10
        - 10.65.100.11
      interfaces:
          - em3
          - em4

tasks:
  - debug:
      msg: "{{ (lacp_groups|selectattr('interfaces', 'contains', 'em1')|first).master }}"

vars:
  mylist:
      - 1
      - "{{ 3 == 3 }}"
      - True
  myotherlist:
      - False
      - True
tasks:
  - debug:
      msg: "all are true!"
    when: mylist is all

  - debug:
      msg: "at least one is true"
    when: myotherlist is any

----------------------------------------

TITLE: Configuring Ansible Collection Ignore Entries
DESCRIPTION: Example ignore entries for an Ansible collection, showing how to ignore specific shellcheck errors, module validation issues, and Python import compatibility problems.

LANGUAGE: text
CODE:
roles/my_role/files/my_script.sh shellcheck:SC2154 # ignore undefined variable
plugins/modules/my_module.py validate-modules:missing-gplv3-license # ignore license check
plugins/modules/my_module.py import-3.8 # needs update to support collections.abc on Python 3.8+

----------------------------------------

TITLE: Configuring NETVISOR Group Variables in Ansible
DESCRIPTION: Configuration settings for connecting to NETVISOR devices using network_cli connection. Includes settings for authentication, network OS specification, and SSH proxy configuration through a bastion host.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: community.netcommon.netvisor
ansible_user: myuser
ansible_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Installing Python on FreeBSD using Ansible Raw Module
DESCRIPTION: Uses the Ansible raw module to install Python on a FreeBSD host. This is a bootstrapping step to enable full Ansible functionality on the managed node.

LANGUAGE: bash
CODE:
ansible -m raw -a "pkg install -y python" myfreebsdhost

----------------------------------------

TITLE: File Module Deprecated Usage Example
DESCRIPTION: Example showing deprecated usage of the file module with src parameter, and the recommended alternative approach for creating directories.

LANGUAGE: bash
CODE:
$ ansible localhost -m file -a 'path=/var/lib src=/tmp/ state=directory'
$ ansible localhost -m file -a 'path=/tmp/lib state=directory'

----------------------------------------

TITLE: Step Mode Interaction Example
DESCRIPTION: This snippet illustrates the interactive prompt presented when running an Ansible playbook in step mode. It shows the options available to the user for each task: execute (y), skip (n), or continue without further prompts (c).

LANGUAGE: shell
CODE:
Perform task: configure ssh (y/n/c):

----------------------------------------

TITLE: Task Throttling Example
DESCRIPTION: Example of using the throttle keyword to limit the number of workers for CPU-intensive tasks.

LANGUAGE: yaml
CODE:
tasks:
- command: /path/to/cpu_intensive_command
  throttle: 1

----------------------------------------

TITLE: Incorrect Usage of Underscore Variable in Python Loop
DESCRIPTION: This snippet demonstrates the incorrect use of underscore (_) as a loop variable in a Python for loop. This approach should be avoided in Ansible codebase.

LANGUAGE: python
CODE:
for _ in range(0, retries):
    success = retry_thing()
    if success:
        break

----------------------------------------

TITLE: Fetching and Parsing Network Interface State with Ansible
DESCRIPTION: Ansible playbook that connects to a Cisco NXOS device, fetches interface state data using cli_parse module with pyats parser, and structures the output.

LANGUAGE: yaml
CODE:
---
- hosts: nxos
  connection: ansible.netcommon.network_cli
  gather_facts: false
  vars:
    ansible_network_os: cisco.nxos.nxos
    ansible_user: "changeme"
    ansible_password: "changeme"

  tasks:
  - name: "Fetch interface state and parse with pyats"
    ansible.utils.cli_parse:
      command: show interface
      parser:
        name: ansible.netcommon.pyats
    register: nxos_pyats_show_interface

  - name: print structured interface state data
    ansible.builtin.debug:
      msg: "{{ nxos_pyats_show_interface['parsed'] }}"

----------------------------------------

TITLE: Setting up Ansible development environment
DESCRIPTION: Instructions for setting up the Ansible development environment using the 'env-setup' script and installing prerequisites with pip.

LANGUAGE: bash
CODE:
$ source ./hacking/env-setup

LANGUAGE: bash
CODE:
$ easy_install pip               # if pip is not already available
$ pip install -r requirements.txt

----------------------------------------

TITLE: OpenBSD Facts Structure in Ansible 2.3
DESCRIPTION: Shows the corrected format of OpenBSD distribution facts in Ansible 2.3, with proper version and release values.

LANGUAGE: bash
CODE:
"ansible_distribution": "OpenBSD",
"ansible_distribution_release": "release",
"ansible_distribution_version": "6.0",

----------------------------------------

TITLE: Building an Ansible Collection Tarball
DESCRIPTION: Command to build an Ansible collection tarball from the current directory.

LANGUAGE: bash
CODE:
collection_dir#> ansible-galaxy collection build

----------------------------------------

TITLE: Including Roles Dynamically
DESCRIPTION: Demonstrates how to include roles dynamically within the tasks section of a play using 'include_role'.

LANGUAGE: yaml
CODE:
---
- hosts: webservers
  tasks:
    - name: Print a message
      ansible.builtin.debug:
        msg: "this task runs before the example role"

    - name: Include the example role
      include_role:
        name: example

    - name: Print a message
      ansible.builtin.debug:
        msg: "this task runs after the example role"

----------------------------------------

TITLE: Ansible Code Paths for Mypy Type Checking
DESCRIPTION: Lists the main code paths in Ansible that are subjected to Mypy static type checking. Includes paths for control node verification and paths specifically for managed node Python versions.

LANGUAGE: markdown
CODE:
lib/ansible/
test/lib/ansible_test/_internal/

lib/ansible/modules/
lib/ansible/module_utils/

----------------------------------------

TITLE: CLI Parse Task with Native Parser
DESCRIPTION: Task using cli_parse module with the native parsing engine

LANGUAGE: yaml
CODE:
- name: "Run command and parse with native"
  ansible.utils.cli_parse:
    command: show interface
    parser:
      name: ansible.netcommon.native
    set_fact: interfaces

----------------------------------------

TITLE: Installing Ansible Unit Test Dependencies
DESCRIPTION: Command to install required dependencies for running Ansible unit tests using a specific Python version.

LANGUAGE: shell
CODE:
ansible-test units --python 2.7 --requirements apache2_module

----------------------------------------

TITLE: Deprecated Old-Style Vars Plugins
DESCRIPTION: Old style vars plugins using 'get_host_vars' or 'get_group_vars' entrypoints are deprecated. Plugins should be updated to inherit from BaseVarsPlugin and define a 'get_vars' method.



----------------------------------------

TITLE: Serial Execution with Fixed Batch Size
DESCRIPTION: Demonstration of using serial keyword to control batch size for rolling updates, executing tasks on 3 hosts at a time.

LANGUAGE: yaml
CODE:
---
- name: test play
  hosts: webservers
  serial: 3
  gather_facts: False

  tasks:
    - name: first task
      command: hostname
    - name: second task
      command: hostname

----------------------------------------

TITLE: Transforming lists into dictionaries
DESCRIPTION: Use the items2dict filter to transform a list into a dictionary

LANGUAGE: jinja2
CODE:
{{ tags | items2dict }}

LANGUAGE: jinja2
CODE:
{{ fruits | items2dict(key_name='fruit', value_name='color') }}

----------------------------------------

TITLE: Referencing ConfigureRemotingForAnsible.ps1 in Ansible Projects
DESCRIPTION: This snippet shows the required location and filename for the ConfigureRemotingForAnsible.ps1 script in Ansible projects. The script is essential for configuring remote connections and must be maintained as a regular file in the specified path.

LANGUAGE: plaintext
CODE:
examples/scripts/ConfigureRemotingForAnsible.ps1

----------------------------------------

TITLE: Running Ansible Playbook with Community EE Minimal Image
DESCRIPTION: Command to run a simple test playbook against localhost using the community-ee-minimal execution environment image with ansible-navigator.

LANGUAGE: bash
CODE:
ansible-navigator run test_localhost.yml --execution-environment-image ghcr.io/ansible-community/community-ee-minimal:latest --mode stdout

----------------------------------------

TITLE: Backing Up SLX-OS Switch Configuration in Ansible YAML
DESCRIPTION: Example Ansible task for backing up the current configuration of an SLX-OS switch. It uses the community.network.slxos_config module and registers the backup location.

LANGUAGE: yaml
CODE:
- name: Backup current switch config (slxos)
  community.network.slxos_config:
    backup: yes
  register: backup_slxos_location
  when: ansible_network_os == 'community.network.slxos'

----------------------------------------

TITLE: Demonstrating Template Expression Changes in Ansible 2.13
DESCRIPTION: Example showing how template expressions must be rewritten in Ansible 2.13 to perform arithmetic and concatenation operations within Jinja templates rather than outside them.

LANGUAGE: yaml
CODE:
- name: Prior to 2.13
  debug:
    msg: '[1] + {{ [2] }}'

- name: 2.13 and forward
  debug:
    msg: '{{ [1] + [2] }}'

----------------------------------------

TITLE: Using itervalues from ansible.module_utils.six for Dictionary Iteration
DESCRIPTION: This snippet shows how to use the itervalues function from ansible.module_utils.six to iterate over dictionary values. This approach provides compatibility across Python versions in Ansible projects.

LANGUAGE: python
CODE:
from ansible.module_utils.six import itervalues

for VALUE in itervalues(DICT):
    pass

----------------------------------------

TITLE: Using Environment Variables with Node Version Manager in Ansible
DESCRIPTION: Shows how to set environment variables for using Node Version Manager (nvm) in an Ansible playbook, including PATH modification.

LANGUAGE: yaml+jinja
CODE:
---
### A playbook demonstrating a common npm workflow:
# - Check for package.json in the application directory
# - If package.json exists:
#   * Run npm prune
#   * Run npm install

- hosts: application
  become: false

  vars:
    node_app_dir: /var/local/my_node_app

  environment:
    NVM_DIR: /var/local/nvm
    PATH: /var/local/nvm/versions/node/v4.2.1/bin:{{ ansible_env.PATH }}

  tasks:
  - name: Check for package.json
    ansible.builtin.stat:
      path: '{{ node_app_dir }}/package.json'
    register: packagejson

  - name: Run npm prune
    ansible.builtin.command: npm prune
    args:
      chdir: '{{ node_app_dir }}'
    when: packagejson.stat.exists

  - name: Run npm install
    community.general.npm:
      path: '{{ node_app_dir }}'
    when: packagejson.stat.exists

----------------------------------------

TITLE: Handling Import Errors in Ansible Plugins
DESCRIPTION: Demonstrates the proper way to handle import errors in Ansible plugins. This method allows for raising an AnsibleError with a clear message about missing libraries.

LANGUAGE: python
CODE:
try:
    import another_library
except ImportError as imp_exc:
    ANOTHER_LIBRARY_IMPORT_ERROR = imp_exc
else:
    ANOTHER_LIBRARY_IMPORT_ERROR = None

LANGUAGE: python
CODE:
if ANOTHER_LIBRARY_IMPORT_ERROR:
    raise AnsibleError('another_library must be installed to use this plugin') from ANOTHER_LIBRARY_IMPORT_ERROR

----------------------------------------

TITLE: Inspecting Execution Environment Containerfile
DESCRIPTION: Views the contents of the generated Containerfile to inspect the Execution Environment configuration.

LANGUAGE: bash
CODE:
less context/Containerfile

----------------------------------------

TITLE: Diff Mode Execution - Console Command
DESCRIPTION: Shows how to run an Ansible playbook with both check and diff mode to see detailed change information for a specific host.

LANGUAGE: console
CODE:
ansible-playbook foo.yml --check --diff --limit foo.example.com

----------------------------------------

TITLE: Demonstrating Lazy Variable Evaluation in Ansible YAML
DESCRIPTION: Illustrates how variables are now evaluated lazily in ansible-core 2.14, only when actually used. This example shows how the 'undefined' test behaves differently with a dictionary containing undefined values.

LANGUAGE: yaml
CODE:
- assert:
    that:
      - some_defined_dict_with_undefined_values is undefined
  vars:
    dict_value: 1
    some_defined_dict_with_undefined_values:
      key1: value1
      key2: '{{ dict_value }}'
      key3: '{{ undefined_dict_value }}'

----------------------------------------

TITLE: Importing Display Singleton in Python for Ansible 2.8+
DESCRIPTION: This snippet shows the correct way to import and initialize the Display singleton in Ansible projects version 2.8 and later. It eliminates the need for try/except blocks previously used when importing from __main__.

LANGUAGE: python
CODE:
from ansible.utils.display import Display
display = Display()

----------------------------------------

TITLE: Multiple Conditions with Ansible Facts
DESCRIPTION: Example showing how to combine multiple conditions using logical operators

LANGUAGE: yaml
CODE:
tasks:
  - name: Shut down CentOS 6 and Debian 7 systems
    ansible.builtin.command: /sbin/shutdown -t now
    when: (ansible_facts['distribution'] == "CentOS" and ansible_facts['distribution_major_version'] == "6") or
          (ansible_facts['distribution'] == "Debian" and ansible_facts['distribution_major_version'] == "7")

----------------------------------------

TITLE: Installing Roles and Collections from requirements.yml (Bash)
DESCRIPTION: Command to install both roles and collections defined in a requirements.yml file using ansible-galaxy.

LANGUAGE: bash
CODE:
$ ansible-galaxy install -r requirements.yml

----------------------------------------

TITLE: Displaying Ansible Ping Results for Multiple Hosts in JSON Format
DESCRIPTION: This snippet shows the output of an Ansible ping command executed against three different IP addresses. It demonstrates successful connections, including the discovered Python interpreter path and a 'pong' response for each host.

LANGUAGE: json
CODE:
{
    "192.0.2.50": {
        "ansible_facts": {
            "discovered_interpreter_python": "/usr/bin/python3"
        },
        "changed": false,
        "ping": "pong"
    },
    "192.0.2.51": {
        "ansible_facts": {
            "discovered_interpreter_python": "/usr/bin/python3"
        },
        "changed": false,
        "ping": "pong"
    },
    "192.0.2.52": {
        "ansible_facts": {
            "discovered_interpreter_python": "/usr/bin/python3"
        },
        "changed": false,
        "ping": "pong"
    }
}

----------------------------------------

TITLE: RST Documentation Redirect
DESCRIPTION: ReStructuredText directive indicating an orphaned page and providing a redirect reference to the playbooks_prompts section.

LANGUAGE: rst
CODE:
:orphan:

**************************
Interactive input: prompts
**************************

This page has moved to :ref:`playbooks_prompts`.

----------------------------------------

TITLE: RST Table of Contents Configuration
DESCRIPTION: ReStructuredText directive configuring the table of contents for Ansible porting guides. Sets maximum depth to 1 and uses glob pattern for file inclusion.

LANGUAGE: rst
CODE:
.. toctree::
   :maxdepth: 1
   :glob:

   porting_guide_11
   porting_guide_10
   porting_guide_9
   porting_guide_8
   porting_guide_7
   porting_guide_6
   porting_guide_5
   porting_guide_4
   porting_guide_3
   porting_guide_2.10
   porting_guide_2.9
   porting_guide_2.8
   porting_guide_2.7
   porting_guide_2.6
   porting_guide_2.5
   porting_guide_2.4
   porting_guide_2.3
   porting_guide_2.0

----------------------------------------

TITLE: Converting with_items to loop in Ansible
DESCRIPTION: Shows how to replace with_items using loop and the flatten filter. The flatten filter is used to ensure the loop works correctly with nested lists.

LANGUAGE: yaml+jinja
CODE:
- name: with_items
  ansible.builtin.debug:
    msg: "{{ item }}"
  with_items: "{{ items }}"

- name: with_items -> loop
  ansible.builtin.debug:
    msg: "{{ item }}"
  loop: "{{ items|flatten(levels=1) }}"

----------------------------------------

TITLE: Ansible Shell Configuration Tasks
DESCRIPTION: Ansible tasks to configure the default shell for Windows SSH connections and reset connections after changes.

LANGUAGE: yaml
CODE:
- name: set the default shell to PowerShell
  ansible.windows.win_regedit:
    path: HKLM:\SOFTWARE\OpenSSH
    name: DefaultShell
    data: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
    type: string
    state: present

- name: reset SSH connection after shell change
  ansible.builtin.meta: reset_connection

- name: set the default shell to cmd
  ansible.windows.win_regedit:
    path: HKLM:\SOFTWARE\OpenSSH
    name: DefaultShell
    state: absent

- name: reset SSH connection after shell change
  ansible.builtin.meta: reset_connection

----------------------------------------

TITLE: Variable Inheritance and Override in Ansible Playbook
DESCRIPTION: Demonstrates how variables can be set at the play level and overridden in tasks and blocks within an Ansible playbook.

LANGUAGE: yaml
CODE:
- hosts: cloud
  gather_facts: false
  become: true
  vars:
    ansible_become_user: admin
  tasks:
    - name: This task uses admin as the become user.
      dnf:
        name: some-service
        state: latest
    - block:
        - name: This task uses service-admin as the become user.
          # a task to configure the new service
        - name: This task also uses service-admin as the become user, defined in the block.
          # second task to configure the service
      vars:
        ansible_become_user: service-admin
    - name: This task (outside of the block) uses admin as the become user again.
      service:
        name: some-service
        state: restarted

----------------------------------------

TITLE: Running Validate-Modules Test with Docker for Ansible Module Documentation
DESCRIPTION: This command runs the validate-modules test using ansible-test within a Docker container. It uses an image that has all requirements pre-installed, simplifying the testing process for the 'mymodule' module.

LANGUAGE: bash
CODE:
ansible-test sanity --docker --test validate-modules mymodule

----------------------------------------

TITLE: JSON Schema Criteria Definition for Interface Validation
DESCRIPTION: JSON schema that defines the validation criteria for network interfaces, specifically checking if the admin_state is 'up'.

LANGUAGE: json
CODE:
{
      "type" : "object",
      "patternProperties": {
              "^.*": {
                      "type": "object",
                      "properties": {
                              "admin_state": {
                                      "type": "string",
                                      "pattern": "up"
                              }
                      }
              }
      }
}

----------------------------------------

TITLE: Converting with_together to loop in Ansible
DESCRIPTION: Demonstrates replacing with_together using loop and the zip filter. This allows iterating over multiple lists in parallel. Includes an example with complex data using nested lists.

LANGUAGE: yaml+jinja
CODE:
- name: with_together
  ansible.builtin.debug:
    msg: "{{ item.0 }} - {{ item.1 }}"
  with_together:
    - "{{ list_one }}"
    - "{{ list_two }}"

- name: with_together -> loop
  ansible.builtin.debug:
    msg: "{{ item.0 }} - {{ item.1 }}"
  loop: "{{ list_one|zip(list_two)|list }}"

- name: with_together -> loop
  ansible.builtin.debug:
    msg: "{{ item.0 }} - {{ item.1 }} - {{ item.2 }}"
  loop: "{{ data[0]|zip(*data[1:])|list }}"
  vars:
    data:
      - ['a', 'b', 'c']
      - ['d', 'e', 'f']
      - ['g', 'h', 'i']

----------------------------------------

TITLE: Module Facts Return Structure
DESCRIPTION: Python code example showing the proper way to return facts from an Ansible module using the ansible_facts dictionary.

LANGUAGE: python
CODE:
module.exit_json(changed=False, ansible_facts=dict(my_new_fact=value_of_fact))

----------------------------------------

TITLE: Optimizing PowerShell Assembly Performance using NGEN
DESCRIPTION: PowerShell function that uses the .NET Native Image Generator (NGEN) to optimize PowerShell assemblies, reducing startup time by approximately 10x. The script dynamically locates NGEN and processes Microsoft.PowerShell assemblies to create native images.

LANGUAGE: powershell
CODE:
function Optimize-Assemblies {
    param (
        [string]$assemblyFilter = "Microsoft.PowerShell.",
        [string]$activity = "Native Image Installation"
    )

    try {
        # Get the path to the ngen executable dynamically
        $ngenPath = [System.IO.Path]::Combine([Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory(), "ngen.exe")

        # Check if ngen.exe exists
        if (-Not (Test-Path $ngenPath)) {
            Write-Host "Ngen.exe not found at $ngenPath. Make sure .NET Framework is installed."
            return
        }

        # Get a list of loaded assemblies
        $assemblies = [AppDomain]::CurrentDomain.GetAssemblies()

        # Filter assemblies based on the provided filter
        $filteredAssemblies = $assemblies | Where-Object { $_.FullName -ilike "$assemblyFilter*" }

        if ($filteredAssemblies.Count -eq 0) {
            Write-Host "No matching assemblies found for optimization."
            return
        }

        foreach ($assembly in $filteredAssemblies) {
            # Get the name of the assembly
            $name = [System.IO.Path]::GetFileName($assembly.Location)

            # Display progress
            Write-Progress -Activity $activity -Status "Optimizing $name"

            # Use Ngen to install the assembly
            Start-Process -FilePath $ngenPath -ArgumentList "install `"$($assembly.Location)`"" -Wait -WindowStyle Hidden
        }

        Write-Host "Optimization complete."
    } catch {
        Write-Host "An error occurred: $_"
    }
}

# Optimize PowerShell assemblies:
Optimize-Assemblies -assemblyFilter "Microsoft.PowerShell."

----------------------------------------

TITLE: Remote Testing in Rolling Updates
DESCRIPTION: This snippet demonstrates how to incorporate remote testing into a rolling update process using delegation.

LANGUAGE: yaml
CODE:
---

- hosts: webservers
  serial: 5

  pre_tasks:
    - name: take out of load balancer pool
      ansible.builtin.command: /usr/bin/take_out_of_pool {{ inventory_hostname }}
      delegate_to: 127.0.0.1

  roles:
    - common
    - webserver

  tasks:
    - ansible.builtin.script: /srv/qa_team/app_testing_script.sh --server {{ inventory_hostname }}
      delegate_to: testing_server

  post_tasks:
    - name: add back to load balancer pool
      ansible.builtin.command: /usr/bin/add_back_to_pool {{ inventory_hostname }}
      delegate_to: 127.0.0.1

----------------------------------------

TITLE: Displaying HTML Blockquote in reStructuredText
DESCRIPTION: This snippet demonstrates how to include raw HTML within a reStructuredText document to display a blockquote with a specific CSS class. It's used to highlight a quote related to the importance of thorough documentation.

LANGUAGE: rst
CODE:
.. raw:: html

   <blockquote class="note info">

   "If you don't find it in the index, look very carefully through the entire catalogue."
    ― Sears, Roebuck and Co., 1897 Sears Roebuck & Co. Catalogue

.. raw:: html

   </blockquote>

----------------------------------------

TITLE: Defining Ansible 2.5 Release Timeline in YAML
DESCRIPTION: YAML-formatted timeline for Ansible 2.5 release, including freeze dates and release candidate schedule.

LANGUAGE: yaml
CODE:
Ansible 2.5:
  Core Engine Freeze and Module Freeze: "22 January 2018"
  Core and Curated Module Freeze: "22 January 2018"
  Community Module Freeze: "7 February 2018"
  Release Candidate 1: "21 February, 2018"
  Target Release: "March 2018"
  Service Release schedule: "every 2-3 weeks"

----------------------------------------

TITLE: Directory Structure Example for Ansible Templates
DESCRIPTION: Shows the basic directory structure for organizing Ansible template files

LANGUAGE: console
CODE:
├── hostname.yml
├── templates
    └── test.j2

----------------------------------------

TITLE: Implementing Correct Specific Imports in Python
DESCRIPTION: Corrected examples showing how to replace wildcard imports with specific imports. These snippets demonstrate importing specific names from ansible.module_utils.six and ansible.module_utils.basic.

LANGUAGE: python
CODE:
from ansible.module_utils import six
if isinstance(variable, six.string_types):
    do_something(variable)

from ansible.module_utils.basic import AnsibleModule
module = AnsibleModule()

----------------------------------------

TITLE: Configuring RST Orphan Page with Windows FAQ Redirect
DESCRIPTION: RST markup for a standalone documentation page that redirects users from the Windows FAQ to the main Windows documentation section.

LANGUAGE: rst
CODE:
:orphan:

Windows Frequently Asked Questions
==================================

This page has moved to :ref:`working_with_windows`.

----------------------------------------

TITLE: Using bulk variables for task arguments
DESCRIPTION: Example of setting all task arguments from a dictionary variable, which can introduce security risks.

LANGUAGE: yaml
CODE:
#...
vars:
  usermod_args:
    name: testuser
    state: present
    update_password: always
tasks:
- user: '{{ usermod_args }}'

----------------------------------------

TITLE: Documenting Ansible Plugins in YAML
DESCRIPTION: Shows the equivalent documentation format using an adjacent YAML file. This method separates the documentation from the plugin code, making it easier to manage documentation for multiple plugins in a single file or for plugins written in non-Python languages.

LANGUAGE: yaml
CODE:
DOCUMENTATION:
  description: something
  options:
    option_name:
      description: describe this config option
      default: default value for this config option
      env:
        - name: NAME_OF_ENV_VAR
      ini:
        - section: section_of_ansible.cfg_where_this_config_option_is_defined
          key: key_used_in_ansible.cfg
      vars:
        - name: name_of_ansible_var
        - name: name_of_second_var
          version_added: X.x
      required: True/False
      type: boolean/float/integer/list/none/path/pathlist/pathspec/string/tmppath
      version_added: X.x

EXAMPLES: # TODO: write examples

----------------------------------------

TITLE: Verifying Network Device Configuration with Arista EOS
DESCRIPTION: This playbook uses the arista.eos.eos_l3_interfaces module to gather Layer 3 interface configurations and verify that they haven't changed. It demonstrates how to use facts gathered from one module as input for another.

LANGUAGE: yaml
CODE:
- name: Example of facts being pushed right back to device.
  hosts: arista
  gather_facts: false
  tasks:
    - name: grab arista eos facts
      arista.eos.eos_facts:
        gather_subset: min
        gather_network_resources: l3_interfaces

- name: Ensure that the IP address information is accurate.
  arista.eos.eos_l3_interfaces:
    config: "{{ ansible_network_resources['l3_interfaces'] }}"
    register: result

- name: Ensure config did not change.
  assert:
    that: not result.changed

----------------------------------------

TITLE: Block Level Module Defaults in Ansible
DESCRIPTION: Shows how to use module_defaults within a block to set default debug messages.

LANGUAGE: yaml
CODE:
- block:
    - name: Print a message
      ansible.builtin.debug:
        msg: "Different message"
  module_defaults:
    ansible.builtin.debug:
      msg: "Default message"

----------------------------------------

TITLE: Listing a Specific Ansible Collection
DESCRIPTION: This command lists all instances of a specific collection by providing its fully qualified collection name (FQCN) to the ansible-galaxy collection list command.

LANGUAGE: shell
CODE:
> ansible-galaxy collection list fortinet.fortios

# /home/astark/.ansible/collections/ansible_collections
Collection       Version
---------------- -------
fortinet.fortios 1.0.1

# /usr/share/ansible/collections/ansible_collections
Collection       Version
---------------- -------
fortinet.fortios 1.0.6

----------------------------------------

TITLE: Multiple Interface Status Check with Conditionals
DESCRIPTION: Example showing how to check status of multiple interfaces simultaneously using multiple commands and wait_for conditions. The task evaluates two different interface statuses from separate command outputs.

LANGUAGE: yaml
CODE:
---
- name: wait for interfaces to be admin enabled
  arista.eos.eos_command:
      commands:
          - show interface Ethernet4 | json
          - show interface Ethernet5 | json
      wait_for:
          - "result[0].interfaces.Ethernet4.interfaceStatus eq connected"
          - "result[1].interfaces.Ethernet5.interfaceStatus eq connected"

----------------------------------------

TITLE: Running Ansible Navigator with Custom EE Against Localhost
DESCRIPTION: This command demonstrates how to run a playbook using ansible-navigator with a custom Execution Environment (postgresql_ee) against localhost.

LANGUAGE: bash
CODE:
ansible-navigator run test_localhost.yml --execution-environment-image postgresql_ee --mode stdout --pull-policy missing --container-options='--user=0'

----------------------------------------

TITLE: Exception Handling in Python 2/3
DESCRIPTION: Example of catching exceptions in a way that is compatible with both Python 2 and 3, using the 'as' keyword.

LANGUAGE: python
CODE:
try:
    a = 2/0
except ValueError as e:
    module.fail_json(msg="Tried to divide by zero: %s" % e)

----------------------------------------

TITLE: Run Once Task Configuration
DESCRIPTION: Examples of using run_once to execute a task on a single host while applying results to all hosts.

LANGUAGE: yaml
CODE:
---
  tasks:
    - command: /opt/application/upgrade_db.py
      run_once: true

----------------------------------------

TITLE: Specifying Local Connection in Ansible Playbook
DESCRIPTION: This YAML snippet shows how to specify a local connection for a single play within a playbook, while other plays may use the default remote connection.

LANGUAGE: yaml
CODE:
---
- hosts: 127.0.0.1
  connection: local

----------------------------------------

TITLE: Jinja Test Syntax Migration - Post-2.5
DESCRIPTION: Example showing new test-style syntax for Jinja tests in Ansible 2.5

LANGUAGE: yaml
CODE:
when:
    - result is failed
    - results is not successful

----------------------------------------

TITLE: Conditional Command Output in Ansible Network Module
DESCRIPTION: Example of using wait_for condition to check interface status. The task waits for Ethernet4 interface to be in 'connected' state by evaluating JSON output from show command.

LANGUAGE: yaml
CODE:
---
- name: wait for interface to be admin enabled
  arista.eos.eos_command:
      commands:
          - show interface Ethernet4 | json
      wait_for:
          - "result[0].interfaces.Ethernet4.interfaceStatus eq connected"

----------------------------------------

TITLE: Creating an Inventory Directory for Ansible
DESCRIPTION: This command creates a directory named 'inventory' to store Ansible inventory files.

LANGUAGE: bash
CODE:
mkdir inventory

----------------------------------------

TITLE: Using undef() Function in Ansible Templates
DESCRIPTION: Demonstrates the usage of the new undef() function for creating undefined variables in templates, including the ability to add custom hints.

LANGUAGE: yaml
CODE:
vars:
  old: "{{ undef }}"
  new: "{{ undef() }}"
  new_with_hint: "{{ undef(hint='You must override this variable') }}"

----------------------------------------

TITLE: Ignoring Unreachable Host Errors in Tasks
DESCRIPTION: Demonstrates using ignore_unreachable at the task level to continue execution when hosts become unreachable.

LANGUAGE: yaml
CODE:
- name: This executes, fails, and the failure is ignored
  ansible.builtin.command: /bin/true
  ignore_unreachable: true

- name: This executes, fails, and ends the play for this host
  ansible.builtin.command: /bin/true

----------------------------------------

TITLE: RST Version Added Directive
DESCRIPTION: ReStructuredText directive indicating feature addition in version 2.8

LANGUAGE: rst
CODE:
.. versionadded:: 2.8

----------------------------------------

TITLE: Network Interface Command Output Example
DESCRIPTION: Sample output from a network device show interface command

LANGUAGE: console
CODE:
Ethernet1/1 is up
admin state is up, Dedicated Interface
  Hardware: 100/1000/10000 Ethernet, address: 5254.005a.f8bd (bia 5254.005a.f8bd)
  MTU 1500 bytes, BW 1000000 Kbit, DLY 10 usec
  reliability 255/255, txload 1/255, rxload 1/255
  Encapsulation ARPA, medium is broadcast
  Port mode is access
  full-duplex, auto-speed

----------------------------------------

TITLE: Verifying Ansible Execution Environment Setup
DESCRIPTION: These commands verify the installation of ansible-navigator and ansible-builder by checking their versions. This step ensures that the Execution Environment setup is complete and ready for use.

LANGUAGE: bash
CODE:
ansible-navigator --version
ansible-builder --version

----------------------------------------

TITLE: Importing String Conversion Functions in Ansible
DESCRIPTION: This snippet shows how to import string conversion functions from ansible.module_utils.common.text.converters, which provide safe ways to convert between string types.

LANGUAGE: Python
CODE:
from ansible.module_utils.common.text.converters import to_text, to_bytes, to_native

# Use these functions for string type conversion
text_string = to_text(some_string)
byte_string = to_bytes(some_string)
native_string = to_native(some_string)

----------------------------------------

TITLE: Configuring CNOS Group Variables in Ansible YAML
DESCRIPTION: This snippet demonstrates how to set up group variables for CNOS devices in Ansible. It includes connection type, network OS, user credentials, privilege escalation, and SSH proxy command for bastion host access.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: community.network.cnos
ansible_user: myuser
ansible_password: !vault...
ansible_become: true
ansible_become_method: enable
ansible_become_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Setting Environment Variables at Play Level in Ansible
DESCRIPTION: Demonstrates how to set environment variables at the play level, affecting all tasks within the play.

LANGUAGE: yaml
CODE:
- hosts: testing

  roles:
     - php
     - nginx

  environment:
    http_proxy: http://proxy.example.com:8080

----------------------------------------

TITLE: Creating Package Version Branch in package-doc-builds Repository
DESCRIPTION: Commands to create a new branch for a specific Ansible package version in the package-doc-builds repository. This is necessary for building docs for new package versions on Read the Docs.

LANGUAGE: bash
CODE:
# Make sure your checkout is up to date.
git fetch upstream

# Create the new package version branch against the devel branch.
git checkout -b 11 upstream/devel

# Push the new package version branch to the repository.
git push upstream 11

----------------------------------------

TITLE: Configuring Command Timeout in Ansible Configuration File
DESCRIPTION: This snippet demonstrates how to set the command_timeout option to 30 seconds in the [persistent_connection] section of the Ansible configuration file (ansible.cfg). This setting applies globally to all Ansible operations.

LANGUAGE: ini
CODE:
[persistent_connection]
command_timeout = 30

----------------------------------------

TITLE: Setting Environment Variables for Ruby Installation in Ansible
DESCRIPTION: Demonstrates setting environment variables at the task level for installing a specific Ruby version using rbenv in an Ansible playbook.

LANGUAGE: yaml+jinja
CODE:
---
- name: Install ruby 2.3.1
  ansible.builtin.command: rbenv install {{ rbenv_ruby_version }}
  args:
    creates: '{{ rbenv_root }}/versions/{{ rbenv_ruby_version }}/bin/ruby'
  vars:
    rbenv_root: /usr/local/rbenv
    rbenv_ruby_version: 2.3.1
  environment:
    CONFIGURE_OPTS: '--disable-install-doc'
    RBENV_ROOT: '{{ rbenv_root }}'
    PATH: '{{ rbenv_root }}/bin:{{ rbenv_root }}/shims:{{ rbenv_plugins }}/ruby-build/bin:{{ ansible_env.PATH }}'

----------------------------------------

TITLE: Standard Allowed Shebangs for Ansible Executables
DESCRIPTION: List of approved shebang lines for executable files in the Ansible project. Ansible modules must specifically use #!/usr/bin/python and should not be executable.

LANGUAGE: sh
CODE:
#!/bin/sh

LANGUAGE: bash
CODE:
#!/bin/bash -eu

LANGUAGE: bash
CODE:
#!/bin/bash -eux

LANGUAGE: make
CODE:
#!/usr/bin/make

LANGUAGE: python
CODE:
#!/usr/bin/env python

LANGUAGE: bash
CODE:
#!/usr/bin/env bash

LANGUAGE: python
CODE:
#!/usr/bin/python

----------------------------------------

TITLE: Configuring RouterOS Group Variables in YAML
DESCRIPTION: Example configuration for RouterOS group variables showing connection settings, authentication, and SSH options. Includes settings for network CLI connection, user credentials, privilege escalation, and bastion host configuration.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: community.network.routeros
ansible_user: myuser
ansible_password: !vault...
ansible_become: true
ansible_become_method: enable
ansible_become_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Running ad-hoc command to display raw facts
DESCRIPTION: An ad-hoc Ansible command to display raw fact information for a host in inventory.

LANGUAGE: shell
CODE:
ansible <hostname> -m ansible.builtin.setup

----------------------------------------

TITLE: Ansible Playbook Execution Output
DESCRIPTION: This snippet shows the expected output when running the example Ansible playbook. It includes the play and task names, execution status, and a summary of the results.

LANGUAGE: text
CODE:
PLAY [My first play] ****************************************************

TASK [Gathering Facts] *************************************************
ok: [192.0.2.50]
ok: [192.0.2.51]
ok: [192.0.2.52]

TASK [Ping my hosts] ***************************************************
ok: [192.0.2.50]
ok: [192.0.2.51]
ok: [192.0.2.52]

TASK [Print message] ***************************************************
ok: [192.0.2.50] => {
    "msg": "Hello world"
}
ok: [192.0.2.51] => {
    "msg": "Hello world"
}
ok: [192.0.2.52] => {
    "msg": "Hello world"
}

PLAY RECAP ***************************************************************
192.0.2.50                : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
192.0.2.51                : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
192.0.2.52                : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0

----------------------------------------

TITLE: Grouping Inventory by Platform in YAML
DESCRIPTION: Shows how to group devices by platform in a YAML inventory, allowing for easy specification of platform-specific variables. This approach is useful for managing multiple device types or operating systems.

LANGUAGE: yaml
CODE:
---

leafs:
  hosts:
    leaf01:
      ansible_host: 10.16.10.11
    leaf02:
      ansible_host: 10.16.10.12

spines:
  hosts:
    spine01:
      ansible_host: 10.16.10.13
    spine02:
      ansible_host: 10.16.10.14

network:
  children:
    leafs:
    spines:
  vars:
    ansible_connection: ansible.netcommon.network_cli
    ansible_network_os: vyos.vyos.vyos
    ansible_user: my_vyos_user

webservers:
  hosts:
    webserver01:
      ansible_host: 10.16.10.15
    webserver02:
      ansible_host: 10.16.10.16
  vars:
    ansible_user: my_server_user

datacenter:
  children:
    network:
    webservers:

----------------------------------------

TITLE: Using hostvars to access variables from other hosts
DESCRIPTION: Example of using hostvars to access variables or facts from other hosts in a playbook.

LANGUAGE: jinja
CODE:
{{ hostvars['test.example.com']['ansible_facts']['distribution'] }}

----------------------------------------

TITLE: Changelog Fragment Example - New Plugin Documentation
DESCRIPTION: YAML format for documenting new Jinja2 plugins, roles and playbooks in an Ansible collection changelog fragment.

LANGUAGE: yaml
CODE:
add plugin.filter:
  - name: to_time_unit
    description: Converts a time expression to a given unit

add plugin.test:
  - name: asn1time
    description: Check whether the given string is an ASN.1 time

add object.role:
  - name: nginx
    description: A nginx installation role

add object.playbook:
  - name: wipe_server
    description: Wipes a server

----------------------------------------

TITLE: Setting Persistent Command Timeout Using Environment Variable
DESCRIPTION: This snippet shows how to set the ANSIBLE_PERSISTENT_COMMAND_TIMEOUT environment variable to 30 seconds. This setting applies to all Ansible commands in the current shell session.

LANGUAGE: bash
CODE:
$export ANSIBLE_PERSISTENT_COMMAND_TIMEOUT=30

----------------------------------------

TITLE: Creating Tables in Markdown
DESCRIPTION: Demonstrates how to create accessible tables with headers and descriptive titles in Ansible documentation using Markdown.

LANGUAGE: markdown
CODE:
#### File descriptions

  |File       |Purpose                     |
  |---------- | -------------------------- |
  |foo.txt    | foo configuration settings |
  |bar.txt    | bar configuration settings |

----------------------------------------

TITLE: Loading Ansible Module Parameters
DESCRIPTION: Function to load parameters for Ansible modules. Located in the basic module utilities.

LANGUAGE: python
CODE:
ansible.module_utils.basic._load_params()

----------------------------------------

TITLE: Multiple Inventory Command Example
DESCRIPTION: Example showing how to target multiple inventory sources from command line

LANGUAGE: bash
CODE:
ansible-playbook get_logs.yml -i staging -i production

----------------------------------------

TITLE: Finding IP addresses for hosts in a group
DESCRIPTION: Jinja template example demonstrating how to find all IP addresses in a group using groups and hostvars.

LANGUAGE: jinja
CODE:
{% for host in groups['app_servers'] %}
   {{ hostvars[host]['ansible_facts']['eth0']['ipv4']['address'] }}
{% endfor %}

----------------------------------------

TITLE: YAML Boolean Values
DESCRIPTION: Shows various ways to represent boolean values in YAML.

LANGUAGE: yaml
CODE:
create_key: true
needs_agent: false
knows_oop: True
likes_emacs: TRUE
uses_cvs: false

----------------------------------------

TITLE: Using become for network device enable mode
DESCRIPTION: Demonstrates how to use become to enter enable mode on a network device for a specific task.

LANGUAGE: YAML
CODE:
- name: Gather facts (eos)
  arista.eos.eos_facts:
    gather_subset:
      - "!hardware"
  become: true
  become_method: enable

----------------------------------------

TITLE: Adding Local Table of Contents in reStructuredText
DESCRIPTION: Shows how to add a local table of contents to an Ansible documentation page using reStructuredText.

LANGUAGE: restructuredtext
CODE:
.. contents::
   :local:

----------------------------------------

TITLE: Advanced Pattern Combination Example
DESCRIPTION: Example of combining multiple pattern types to target specific host groups with inclusions and exclusions.

LANGUAGE: yaml
CODE:
webservers:dbservers:&staging:!phoenix

----------------------------------------

TITLE: Defining Static Groups of Dynamic Groups in Ansible Inventory
DESCRIPTION: This text snippet shows how to define static groups that include dynamic child groups in an Ansible inventory file.

LANGUAGE: text
CODE:
[tag_Name_staging_foo]

[tag_Name_staging_bar]

[staging:children]
tag_Name_staging_foo
tag_Name_staging_bar

----------------------------------------

TITLE: Asynchronous Playbook Task without Polling in Ansible
DESCRIPTION: Configure an asynchronous task in a playbook with a 45-second timeout and no polling. This 'fire and forget' approach allows the playbook to continue execution without waiting for the task to complete.

LANGUAGE: yaml
CODE:
- name: Simulate long running op, allow to run for 45 sec, fire and forget
  ansible.builtin.command: /bin/sleep 15
  async: 45
  poll: 0

----------------------------------------

TITLE: Running Ansible Commands with Python 3 Interpreter
DESCRIPTION: Example commands showing how to run Ansible commands and playbooks while explicitly specifying Python 3 as the interpreter.

LANGUAGE: shell
CODE:
$ ansible localhost-py3 -m ping
$ ansible-playbook sample-playbook.yml

----------------------------------------

TITLE: Changing Directory to Collection Path
DESCRIPTION: Command to change the current directory to the collection path for running sanity tests.

LANGUAGE: shell
CODE:
cd ~/ansible_collections/<NAMESPACE>/<COLLECTION_NAME>

----------------------------------------

TITLE: RST Documentation Structure for Ansible Sanity Tests
DESCRIPTION: ReStructuredText documentation defining the structure and available sanity tests for Ansible testing. Includes test options for both Collections and Core testing.

LANGUAGE: rst
CODE:
.. _all_sanity_tests:

Sanity Tests
============

The following sanity tests are available as ``--test`` options for ``ansible-test sanity`` when testing Ansible Collections.
This list is also available using ``ansible-test sanity --list-tests --allow-disabled``.

For information on how to run these tests, see :ref:`sanity testing guide <testing_sanity>`.

.. toctree::
   :maxdepth: 1

   action-plugin-docs
   ansible-doc
   changelog
   compile
   empty-init
   ignores
   import
   line-endings
   no-assert
   no-basestring
   no-dict-iteritems
   no-dict-iterkeys
   no-dict-itervalues
   no-get-exception
   no-illegal-filenames
   no-main-display
   no-smart-quotes
   no-unicode-literals
   pep8
   pslint
   pylint
   replace-urlopen
   runtime-metadata
   shebang
   shellcheck
   symlinks
   use-argspec-type-path
   use-compat-six
   validate-modules
   yamllint

Additional tests are available when testing Ansible Core:

.. toctree::
   :maxdepth: 1

   ansible-requirements
   bin-symlinks
   boilerplate
   integration-aliases
   mypy
   no-unwanted-files
   obsolete-files
   package-data
   pymarkdown
   release-names
   required-and-default-attributes
   test-constraints

----------------------------------------

TITLE: Basic Ansible Ad-hoc Command Pattern
DESCRIPTION: Basic syntax for running an ad-hoc Ansible command with a pattern to target specific hosts.

LANGUAGE: bash
CODE:
ansible <pattern> -m <module_name> -a "<module options>"

----------------------------------------

TITLE: Installing ansible-navigator for Ansible Execution Environment
DESCRIPTION: This command installs ansible-navigator using pip3. ansible-navigator allows running Execution Environments on the command line and includes ansible-builder for building EEs.

LANGUAGE: bash
CODE:
pip3 install ansible-navigator

----------------------------------------

TITLE: Setting Strategy in Ansible Configuration
DESCRIPTION: Configuration example showing how to set a global strategy in ansible.cfg under the defaults section.

LANGUAGE: ini
CODE:
[defaults]
strategy = free

----------------------------------------

TITLE: Running Ansible from Source with Python 3
DESCRIPTION: Commands to run Ansible from source code using Python 3, including environment setup and example commands for running modules and playbooks.

LANGUAGE: shell
CODE:
$ source ./hacking/env-setup
$ python3 $(which ansible) localhost -m ping
$ python3 $(which ansible-playbook) sample-playbook.yml

----------------------------------------

TITLE: Returning Command Return Code in Ansible Module Output
DESCRIPTION: Illustrates how modules that execute commands return the command's return code.

LANGUAGE: yaml
CODE:
"rc": 257

----------------------------------------

TITLE: Running validate-modules Sanity Test in Ansible
DESCRIPTION: Commands to set up and run the validate-modules sanity test in Ansible. Requires changing to the Ansible source directory and setting up the environment before running the test.

LANGUAGE: shell
CODE:
cd /path/to/ansible/source
source hacking/env-setup
ansible-test sanity --test validate-modules

----------------------------------------

TITLE: Verifying Signed Collection with Keyring in Bash
DESCRIPTION: This command verifies a signed installed collection using a specified keyring file.

LANGUAGE: bash
CODE:
ansible-galaxy collection verify my_namespace.my_collection  --keyring ~/.ansible/pubring.kbx

----------------------------------------

TITLE: Listing Collections in Community EE Base Image
DESCRIPTION: Command to display the collections included in the community-ee-base execution environment image using ansible-navigator.

LANGUAGE: bash
CODE:
ansible-navigator collections --execution-environment-image ghcr.io/ansible-community/community-ee-base:latest

----------------------------------------

TITLE: Comparing Lookup and Query Functions in Ansible
DESCRIPTION: Shows the equivalence between using lookup() with wantlist=True and the shorthand query/q() function. Both examples demonstrate looping over lookup results.

LANGUAGE: yaml+jinja
CODE:
block:
  - debug:
      msg: "{{ item }}"
    loop: "{{ lookup('ns.col.lookup_items', wantlist=True) }}"

  - debug:
      msg: "{{ item }}"
    loop: "{{ q('ns.col.lookup_items') }}"

----------------------------------------

TITLE: Installing Ansible with Python 3 via pip
DESCRIPTION: Installation command to install Ansible using Python 3's pip package manager and verify the Python version.

LANGUAGE: shell
CODE:
$ pip3 install ansible
$ ansible --version | grep "python version"

----------------------------------------

TITLE: Changelog Template for Major Releases
DESCRIPTION: YAML template for initializing changelog file after major version releases

LANGUAGE: yaml
CODE:
ancestor: X.0.0
releases: {}

----------------------------------------

TITLE: RST Documentation Header for Sanity Tests
DESCRIPTION: ReStructuredText header and directive for orphaned documentation page about sanity test documentation requirements.

LANGUAGE: rst
CODE:
:orphan:

sanity-docs
===========

Documentation for each ``ansible-test sanity`` test is required.

----------------------------------------

TITLE: Setting group variables for network devices
DESCRIPTION: Shows how to set group variables including become settings for network devices.

LANGUAGE: YAML
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: arista.eos.eos
ansible_user: myuser
ansible_become: true
ansible_become_method: enable

----------------------------------------

TITLE: Building Execution Environment Container Image
DESCRIPTION: Uses ansible-builder to build a container image for the Execution Environment, tagging it as 'postgresql_ee'.

LANGUAGE: bash
CODE:
ansible-builder build --tag postgresql_ee

----------------------------------------

TITLE: Enabling Debugger for a Play in YAML
DESCRIPTION: Example of setting the debugger keyword at the play level to enable debugging for skipped tasks within the play.

LANGUAGE: yaml
CODE:
- name: My play
  hosts: all
  debugger: on_skipped
  tasks:
    - name: Execute a command
      ansible.builtin.command: "true"
      when: False

----------------------------------------

TITLE: Accessing original ansible_host when using delegate_to
DESCRIPTION: Example of accessing the original ansible_host variable when using task delegation.

LANGUAGE: yaml
CODE:
original_host: "{{ hostvars[inventory_hostname]['ansible_host'] }}"

----------------------------------------

TITLE: Adding constructed features to Ansible inventory plugin
DESCRIPTION: Example of how to implement constructed features in an Ansible inventory plugin using the Constructable base class.

LANGUAGE: python
CODE:
def add_host(self, hostname, host_vars):
    self.inventory.add_host(hostname, group='all')

    for var_name, var_value in host_vars.items():
        self.inventory.set_variable(hostname, var_name, var_value)

    strict = self.get_option('strict')

    # Add variables created by the user's Jinja2 expressions to the host
    self._set_composite_vars(self.get_option('compose'), host_vars, hostname, strict=True)

    # Create user-defined groups using variables and Jinja2 conditionals
    self._add_host_to_composed_groups(self.get_option('groups'), host_vars, hostname, strict=strict)
    self._add_host_to_keyed_groups(self.get_option('keyed_groups'), host_vars, hostname, strict=strict)

----------------------------------------

TITLE: Updating Pull Request with Force Push in Git
DESCRIPTION: This snippet shows how to update your pull request on GitHub after rebasing. It uses a force push with the --force-with-lease option to safely update the remote branch.

LANGUAGE: shell
CODE:
$ git push --force-with-lease

----------------------------------------

TITLE: Installing Ansible Collections from Git Repositories using ansible-galaxy
DESCRIPTION: These commands demonstrate how to install Ansible collections from various git repository sources using the ansible-galaxy command-line tool. Examples include installing from a specific branch, private repository, and local repository.

LANGUAGE: bash
CODE:
# Install a collection in a repository using the latest commit on the branch 'devel'
ansible-galaxy collection install git+https://github.com/organization/repo_name.git,devel

# Install a collection from a private GitHub repository
ansible-galaxy collection install git@github.com:organization/repo_name.git

# Install a collection from a local git repository
ansible-galaxy collection install git+file:///home/user/path/to/repo_name.git

----------------------------------------

TITLE: Configuring Future Imports for Ansible Test Internal Code
DESCRIPTION: Specifies the required __future__ import statement that must be included in ansible-test's _internal code. This import enables annotation type hints in Python.

LANGUAGE: python
CODE:
from __future__ import annotations

----------------------------------------

TITLE: RST Directive for Become Plugins Section
DESCRIPTION: ReStructuredText directive defining the become_plugins reference label

LANGUAGE: rst
CODE:
.. _become_plugins:

----------------------------------------

TITLE: Removed Python Support
DESCRIPTION: Python 2.7 and 3.6 are no longer supported as remote versions. Python 3.7+ is now required for target execution.



----------------------------------------

TITLE: Configuring VOSS Group Variables in Ansible YAML
DESCRIPTION: This snippet demonstrates how to set up group variables for VOSS devices in Ansible. It includes settings for connection type, network OS, user authentication, privilege escalation, and SSH proxy configuration.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: community.network.voss
ansible_user: myuser
ansible_become: true
ansible_become_method: enable
ansible_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: Complex YAML argument structure for Ansible module testing
DESCRIPTION: Example of a complex YAML structure that can be used as an argument when testing Ansible modules with test-module.py.

LANGUAGE: yaml
CODE:
parent:
  child:
    - item: first
      val: foo
    - item: second
      val: boo

----------------------------------------

TITLE: Adding Images with Alt Text in Markdown
DESCRIPTION: Demonstrates how to add images with alternative text for accessibility in Ansible documentation using Markdown.

LANGUAGE: markdown
CODE:
![SpiffyCorp network diagram](path/networkdiag.png)

----------------------------------------

TITLE: Configuring Toctree for Ansible Plugin Indexes in reStructuredText
DESCRIPTION: This snippet configures a toctree directive in reStructuredText to generate indexes for all Ansible plugins. It sets the maximum depth to 1, adds a caption, and uses a globbing pattern to include all files starting with 'index_'.

LANGUAGE: reStructuredText
CODE:
.. toctree::
   :maxdepth: 1
   :caption: Plugin indexes
   :glob:

   index_*

----------------------------------------

TITLE: Custom Role Skeleton Initialization
DESCRIPTION: Demonstrates how to initialize a role using a custom skeleton directory structure as a template.

LANGUAGE: bash
CODE:
$ ansible-galaxy init --role-skeleton=/path/to/skeleton role_name

----------------------------------------

TITLE: Defining Table of Contents for Ansible Core Porting Guides in reStructuredText
DESCRIPTION: This code snippet defines a table of contents for Ansible Core porting guides using reStructuredText syntax. It includes a title, introductory text, and a list of porting guide documents for different versions.

LANGUAGE: rst
CODE:
.. _core_porting_guides:

***************************
Ansible Core Porting Guides
***************************

This section lists porting guides that can help you in updating playbooks, plugins and other parts of your Ansible infrastructure from one version of ``ansible-core`` to the next.

Please note that this is not a complete list. If you believe any extra information would be useful in these pages, you can edit by clicking `Edit on GitHub` on the top right, or raising an issue.

.. toctree::
   :maxdepth: 1
   :glob:

   porting_guide_core_2.19
   porting_guide_core_2.18
   porting_guide_core_2.17
   porting_guide_core_2.16
   porting_guide_core_2.15
   porting_guide_core_2.14
   porting_guide_core_2.13
   porting_guide_core_2.12
   porting_guide_core_2.11
   porting_guide_base_2.10

----------------------------------------

TITLE: Creating a Unit Test File in Ansible Collection
DESCRIPTION: This bash command creates a new file for unit tests in the appropriate directory of an Ansible collection.

LANGUAGE: bash
CODE:
touch tests/units/plugins/modules/test_my_module.py

----------------------------------------

TITLE: Installing Ansible-Podman SELinux Module
DESCRIPTION: Command to insert and enable the built SELinux module using semodule with root privileges

LANGUAGE: bash
CODE:
sudo semodule -i ansible-podman.pp

----------------------------------------

TITLE: Creating Basic INI Inventory for Network Devices
DESCRIPTION: Shows how to create an equivalent inventory structure using INI format. This format is an alternative to YAML and uses a different syntax for defining groups and hosts.

LANGUAGE: ini
CODE:
[leafs]
leaf01
leaf02

[spines]
spine01
spine02

[network:children]
leafs
spines

[webservers]
webserver01
webserver02

[datacenter:children]
network
webservers

----------------------------------------

TITLE: Retrieving Recent Coverage Test Run URLs in Python
DESCRIPTION: This script retrieves the URLs and statuses of the most recent coverage test runs from Azure Pipelines. It takes an optional branch name parameter, defaulting to 'devel'.

LANGUAGE: shell
CODE:
hacking/azp/get_recent_coverage_runs.py <optional branch name>

----------------------------------------

TITLE: Role Variables Definition
DESCRIPTION: Variables definition file for the system_demo role containing DNS server configuration.

LANGUAGE: yaml
CODE:
---
dns: "8.8.8.8 8.8.4.4"

----------------------------------------

TITLE: Defining a Dictionary Variable in YAML
DESCRIPTION: Example of defining a variable as a dictionary using YAML syntax.

LANGUAGE: yaml
CODE:
foo:
  field1: one
  field2: two

----------------------------------------

TITLE: Enabling Inventory Caching in YAML Configuration
DESCRIPTION: Enables inventory caching for the aws_ec2 plugin in a YAML configuration file.

LANGUAGE: yaml
CODE:
# dev.aws_ec2.yaml
plugin: aws_ec2
cache: True

----------------------------------------

TITLE: Iterating Changed Files with Jinja2 Template
DESCRIPTION: A template loop that iterates through a list of changed files and displays them as bullet points. Uses Jinja2/Liquid template syntax to dynamically generate the list.

LANGUAGE: jinja2
CODE:
{% for file in changed_files %}
- {{ file }}
{% endfor %}

----------------------------------------

TITLE: Role-Based Playbook Implementation
DESCRIPTION: Modified playbook that uses the system_demo role instead of direct tasks and variables.

LANGUAGE: yaml
CODE:
---
- name: configure cisco routers
  hosts: routers
  connection: ansible.netcommon.network_cli
  gather_facts: false

  roles:
    - system_demo

----------------------------------------

TITLE: Running backport_of_line_adder.py Script in Bash
DESCRIPTION: Demonstrates how to execute the backport_of_line_adder.py script to add a reference line to a new backport PR. The script can be run with manual input or with automatic deduction of the original PR.

LANGUAGE: bash
CODE:
./backport_of_line_adder.py <backport> <original PR>

LANGUAGE: bash
CODE:
./backport_of_line_adder.py 12345 auto

----------------------------------------

TITLE: Azure Pipelines Error Output Example
DESCRIPTION: Example showing how Azure Pipelines reports test failures in GitHub comments

LANGUAGE: text
CODE:
The test `ansible-test sanity --test pep8` failed with the following errors:

lib/ansible/modules/network/foo/bar.py:509:17: E265 block comment should start with '# '

The test `ansible-test sanity --test validate-modules` failed with the following error:
lib/ansible/modules/network/foo/bar.py:0:0: E307 version_added should be 2.4. Currently 2.3

----------------------------------------

TITLE: Accessing custom facts in templates
DESCRIPTION: Example of accessing custom facts created with facts.d in a Jinja template.

LANGUAGE: jinja
CODE:
{{ ansible_local['preferences']['general']['asdf'] }}

----------------------------------------

TITLE: API Authentication Module Defaults Example
DESCRIPTION: Demonstrates setting default authentication parameters for multiple URI module calls to an API.

LANGUAGE: yaml
CODE:
- hosts: localhost
  module_defaults:
    ansible.builtin.uri:
      force_basic_auth: true
      user: some_user
      password: some_password
  tasks:
    - name: Interact with a web service
      ansible.builtin.uri:
        url: http://some.api.host/v1/whatever1

    - name: Interact with a web service
      ansible.builtin.uri:
        url: http://some.api.host/v1/whatever2

    - name: Interact with a web service
      ansible.builtin.uri:
        url: http://some.api.host/v1/whatever3

----------------------------------------

TITLE: Generating Dependency File with uv for Ansible Project
DESCRIPTION: This command uses uv to compile and generate a universal dependency file for the Ansible project. It outputs the result to tests/tag.txt based on the input file tests/tag.in.

LANGUAGE: Shell
CODE:
uv pip compile --universal --output-file tests/tag.txt tests/tag.in

----------------------------------------

TITLE: Creating a Test Playbook for Remote Hosts in YAML
DESCRIPTION: This snippet shows the content of a test_remote.yml playbook file. It defines a play that runs on the 'webservers' group and prints a message.

LANGUAGE: yaml
CODE:
---
- name: test remote connection
  hosts: webservers
  gather_facts: true
  tasks:
    - name: Print message
      ansible.builtin.debug:
        msg: "Hello World"

----------------------------------------

TITLE: Using FQCN in Playbooks
DESCRIPTION: Demonstrates how to use the Fully Qualified Collection Name (FQCN) to reference a role in a playbook after migrating it to a collection.

LANGUAGE: yaml
CODE:
---
- name: example role by FQCN
  hosts: some_host_pattern
  tasks:
    - name: import FQCN role from a collection
      import_role:
        name: mynamespace.mycollection.my_role

----------------------------------------

TITLE: Adding Internal Links in reStructuredText
DESCRIPTION: Demonstrates how to create internal links using the :ref: syntax in Ansible documentation.

LANGUAGE: restructuredtext
CODE:
:ref:`unique_page`
:ref:`this page <unique_page>`

----------------------------------------

TITLE: Testing Vault Encryption in Ansible Variables
DESCRIPTION: Shows how to check if a variable contains vault-encrypted data using the vault_encrypted test.

LANGUAGE: yaml
CODE:
vars:
  variable: !vault |
    $ANSIBLE_VAULT;1.2;AES256;dev
    61323931353866666336306139373937316366366138656131323863373866376666353364373761
    3539633234313836346435323766306164626134376564330a373530313635343535343133316133
    36643666306434616266376434363239346433643238336464643566386135356334303736353136
    6565633133366366360a326566323363363936613664616364623437336130623133343530333739
    3039

tasks:
  - debug:
      msg: '{{ (variable is vault_encrypted) | ternary("Vault encrypted", "Not vault encrypted") }}'

----------------------------------------

TITLE: Accessing environment variables on the control node
DESCRIPTION: Example of accessing environment variables from the control node using the 'env' lookup plugin.

LANGUAGE: yaml
CODE:
---
# ...
  vars:
     local_home: "{{ lookup('env','HOME') }}"

----------------------------------------

TITLE: Configuring RST Document Structure
DESCRIPTION: RST directives for setting up the document structure including title, note block, and table of contents tree.

LANGUAGE: rst
CODE:
.. _ansible_community_guide:

***********************
Ansible Community Guide
***********************

.. note::

    **Making Open Source More Inclusive**

.. _community_toc:

.. toctree::
   :maxdepth: 2

   getting_started
   contributor_path

----------------------------------------

TITLE: Configuring Ansible for WinRM Certificate Authentication
DESCRIPTION: Example of Ansible host variables configuration for using certificate authentication with PSRP and WinRM connections.

LANGUAGE: yaml
CODE:
# psrp
ansible_connection: psrp
ansible_psrp_auth: certificate
ansible_psrp_certificate_pem: /path/to/certificate/public_key.pem
ansible_psrp_certificate_key_pem: /path/to/certificate/private_key.pem

# winrm
ansible_connection: winrm
ansible_winrm_transport: certificate
ansible_winrm_cert_pem: /path/to/certificate/public_key.pem
ansible_winrm_cert_key_pem: /path/to/certificate/private_key.pem

----------------------------------------

TITLE: Creating Collection Directory Structure in Bash
DESCRIPTION: Creates the required directory structure for testing Ansible collections in the user's home directory. Shows examples for both community.general and ansible.posix collections.

LANGUAGE: bash
CODE:
mkdir -p ~/ansible_collections/NAMESPACE/COLLECTION_NAME

LANGUAGE: bash
CODE:
mkdir -p ~/ansible_collections/community/general

LANGUAGE: bash
CODE:
mkdir -p ~/ansible_collections/ansible/posix

----------------------------------------

TITLE: Adding Syntax Highlighting to Code Blocks in reStructuredText
DESCRIPTION: Shows how to add syntax highlighting to code blocks using Pygments lexers in Ansible documentation.

LANGUAGE: restructuredtext
CODE:
.. code-block:: python

   def my_beautiful_python_code():
      pass

----------------------------------------

TITLE: Overriding Host Variable with undef() in Ansible Playbook
DESCRIPTION: This YAML snippet demonstrates how to use the undef() function in an Ansible playbook to override a host variable for a specific block of tasks. It shows the structure of a playbook with module defaults and a block using undef().

LANGUAGE: yaml
CODE:
---
- hosts: localhost
  gather_facts: no
  module_defaults:
    group/ns.col.auth: "{{ vaulted_credentials | default({}) }}"
  tasks:
    - ns.col.module1:
    - ns.col.module2:

    - name: override host variable
      vars:
        vaulted_credentials: "{{ undef() }}"
      block:
        - ns.col.module1:

----------------------------------------

TITLE: Testing Module Setup Function in Python
DESCRIPTION: This snippet shows how to test the module setup function of a restructured Ansible module.

LANGUAGE: python
CODE:
def test_rds_module_setup_fails_if_db_instance_identifier_parameter_missing():
    # db_instance_identifier parameter is missing
    set_module_args({
        'state': 'absent',
        'apply_immediately': 'True',
     })

    with self.assertRaises(AnsibleFailJson) as result:
        my_module.setup_json

----------------------------------------

TITLE: ReStructuredText Orphan Page Directive with Reference Link
DESCRIPTION: A ReStructuredText document that marks the page as orphaned (not in the TOC) and provides a redirect reference to the modules and plugins documentation section.

LANGUAGE: restructuredtext
CODE:
:orphan:

Working With Modules
====================

This page has moved to :ref:`modules_plugins_index`.

----------------------------------------

TITLE: Configuring Galaxy Server List in ansible.cfg
DESCRIPTION: Example of how to configure the Galaxy server list and API token in the ansible.cfg file for secure authentication.

LANGUAGE: ini
CODE:
[galaxy]
server_list = release_galaxy

[galaxy_server.release_galaxy]
url=https://galaxy.ansible.com/
token=abcdefghijklmnopqrtuvwxyz

----------------------------------------

TITLE: Git Branch Management Commands
DESCRIPTION: Commands for checking git status, creating and managing release branches and tags

LANGUAGE: bash
CODE:
git status
git checkout main
git pull --rebase upstream main
git branch stable-X main
git push upstream stable-X
git checkout -b update_repo

----------------------------------------

TITLE: Python shebang and UTF-8 encoding for Ansible modules
DESCRIPTION: The proper shebang and encoding declaration for Ansible module Python files.

LANGUAGE: python
CODE:
#!/usr/bin/python
# -*- coding: utf-8 -*-

----------------------------------------

TITLE: Defining a Sample Python Function for Unit Testing
DESCRIPTION: This snippet shows a Python function that converts various data types. It will be used as an example for writing unit tests.

LANGUAGE: python
CODE:
def convert_to_supported(val):
    """Convert unsupported types to appropriate."""
    if isinstance(val, decimal.Decimal):
        return float(val)

    if isinstance(val, datetime.timedelta):
        return str(val)

    if val == 42:
        raise ValueError("This number is just too cool for us ;)")

    return val

----------------------------------------

TITLE: Running Ansible Collection Unit Tests with Docker
DESCRIPTION: This bash command demonstrates how to run unit tests for an Ansible collection module using ansible-test with Docker.

LANGUAGE: bash
CODE:
ansible-test units tests/unit/plugins/modules/test_my_module.py --docker

----------------------------------------

TITLE: Defining RST Orphan and Redirect for Ansible BSD Documentation
DESCRIPTION: RST markup that declares an orphan page and redirects users to the new BSD documentation location using a reference directive.

LANGUAGE: rst
CODE:
:orphan:

Ansible and BSD
===============

This page has moved to :ref:`working_with_bsd`.

----------------------------------------

TITLE: Configuring EXOS-API Connection in Ansible YAML
DESCRIPTION: Example YAML configuration for group_vars to set up EXOS-API connection to EXOS devices. Includes settings for connection type, network OS, user authentication, and proxy environment variables for web proxy access.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.httpapi
ansible_network_os: community.network.exos
ansible_user: myuser
ansible_password: !vault...
proxy_env:
  http_proxy: http://proxy.example.com:8080

----------------------------------------

TITLE: Changelog Fragment Creation in YAML
DESCRIPTION: YAML template for creating changelog fragments with release summary information.

LANGUAGE: yaml
CODE:
release_summary: |-
  Write some text here that should appear as the release summary for this version.
  The format is reStructuredText, but not a list as for regular changelog fragments.
  This text will be inserted into the changelog.

LANGUAGE: yaml
CODE:
release_summary: |-
  This is the minor release of the ``community.mysql`` collection.
  This changelog contains all changes to the modules and plugins in this collection
  that have been made after the previous release.

----------------------------------------

TITLE: Implementing verify_file method for Ansible inventory plugin
DESCRIPTION: Example of the verify_file method from the virtualbox inventory plugin, used to quickly determine if a file is usable by the plugin.

LANGUAGE: python
CODE:
def verify_file(self, path):
    ''' return true/false if this is possibly a valid file for this plugin to consume '''
    valid = False
    if super(InventoryModule, self).verify_file(path):
        # base class verifies that file exists and is readable by current user
        if path.endswith(('virtualbox.yaml', 'virtualbox.yml', 'vbox.yaml', 'vbox.yml')):
            valid = True
    return valid

----------------------------------------

TITLE: Changelog Generation Command
DESCRIPTION: Command to generate collection changelogs using antsibull-changelog

LANGUAGE: bash
CODE:
antsibull-changelog release

----------------------------------------

TITLE: Copyright and license declaration for Ansible modules
DESCRIPTION: The standard copyright and license declaration to include at the top of Ansible module files.

LANGUAGE: python
CODE:
#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright: Contributors to the Ansible project
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

----------------------------------------

TITLE: RST Documentation Redirect for Windows Usage
DESCRIPTION: ReStructuredText markup that creates an orphaned page and redirects to the Windows usage documentation section using a Sphinx reference.

LANGUAGE: rst
CODE:
:orphan:

Using Ansible and Windows
=========================

This page has moved to :ref:`windows_usage`.

----------------------------------------

TITLE: Querying Failed Logon Attempts on Windows
DESCRIPTION: This PowerShell command retrieves the most recent failed logon attempt from the Windows Security event log. It helps diagnose credential rejection issues by providing detailed error information.

LANGUAGE: powershell
CODE:
Get-WinEvent -FilterHashtable @{LogName = 'Security'; Id = 4625} |
    Select-Object -First 1 -ExpandProperty Message

----------------------------------------

TITLE: Basic Ansible Test Integration Command
DESCRIPTION: Generic command structure for running integration tests using Docker containers. The command requires specifying a target test name and optionally a Docker distribution.

LANGUAGE: text
CODE:
ansible-test integration <target_name> --docker <distro>

----------------------------------------

TITLE: Building a single reST page with make
DESCRIPTION: Uses the make utility to build a single reStructuredText file into HTML.

LANGUAGE: bash
CODE:
make htmlsingle rst=path/to/your_file.rst

----------------------------------------

TITLE: Release Tag Management Commands
DESCRIPTION: Git commands for viewing, creating and pushing release tags

LANGUAGE: bash
CODE:
git tag -n    # see current tags and their comments
git tag -a NEW_VERSION -m "comment here"    # the comment can be, for example, "community.foo: 2.0.0"
git push upstream NEW_VERSION

----------------------------------------

TITLE: Setting Python Interpreter for FreeBSD and OpenBSD in Ansible Inventory
DESCRIPTION: Configures the ansible_python_interpreter variable in the inventory file to specify the correct Python binary location for FreeBSD and OpenBSD hosts.

LANGUAGE: ini
CODE:
[freebsd:vars]
ansible_python_interpreter=/usr/local/bin/python
[openbsd:vars]
ansible_python_interpreter=/usr/local/bin/python3

----------------------------------------

TITLE: RST Documentation Redirect for Ansible Collections
DESCRIPTION: ReStructuredText markup that creates an orphaned page with a redirect to the collections documentation index.

LANGUAGE: rst
CODE:
:orphan:

*****************
Using collections
*****************

This page has moved to :ref:`collections_index`.

----------------------------------------

TITLE: Basic NETCONF Backup Task
DESCRIPTION: Task demonstrating how to backup switch configuration using NETCONF.

LANGUAGE: yaml
CODE:
- name: Backup current switch config
  junipernetworks.junos.netconf_config:
    backup: yes
  register: backup_junos_location

----------------------------------------

TITLE: Creating Directory Structure for Setup Target
DESCRIPTION: Command to create the initial directory structure for the setup target in an abstract service example

LANGUAGE: bash
CODE:
mkdir -p tests/integration/targets/setup_abstract_service/tasks

----------------------------------------

TITLE: RST Table of Contents Structure
DESCRIPTION: ReStructuredText table of contents tree defining the structure of the Ansible collections contributor documentation.

LANGUAGE: rst
CODE:
.. toctree::
   :maxdepth: 2

   collection_development_process
   reporting_collections
   create_pr_quick_start
   collection_contributors/test_index
   collection_contributors/collection_reviewing
   collection_contributors/collection_requirements
   maintainers
   contributing_maintained_collections
   steering/steering_index
   documentation_contributions
   other_tools_and_programs

----------------------------------------

TITLE: Managing Packages with Ansible Ad Hoc Commands
DESCRIPTION: These examples demonstrate how to use the yum module to install, update, or remove packages on managed nodes using Ansible ad hoc commands.

LANGUAGE: bash
CODE:
$ ansible webservers -m ansible.builtin.yum -a "name=acme state=present"
$ ansible webservers -m ansible.builtin.yum -a "name=acme-1.5 state=present"
$ ansible webservers -m ansible.builtin.yum -a "name=acme state=latest"
$ ansible webservers -m ansible.builtin.yum -a "name=acme state=absent"

----------------------------------------

TITLE: Installing Kerberos Dependencies on Various OS
DESCRIPTION: Commands for installing Kerberos and related dependencies on different Linux distributions and FreeBSD.

LANGUAGE: bash
CODE:
$ sudo dnf install krb5-devel krb5-libs krb5-workstation python3-devel

LANGUAGE: bash
CODE:
$ sudo apt-get install krb5-user libkrb5-dev python3-dev

LANGUAGE: bash
CODE:
$ sudo pacman -S krb5

LANGUAGE: bash
CODE:
$ sudo pkg install heimdal

----------------------------------------

TITLE: RST Documentation Redirect Reference
DESCRIPTION: ReStructuredText directive that marks page as orphaned and redirects to playbooks_tests documentation section

LANGUAGE: rst
CODE:
:orphan:

*****
Tests
*****

This page has moved to :ref:`playbooks_tests`.

----------------------------------------

TITLE: Configuring Cisco IOS Interface Shutdown with Ansible
DESCRIPTION: This YAML snippet demonstrates how to use the cisco.ios.ios_config module to shut down a Cisco IOS interface using long-form commands. It specifies the full interface name and shutdown command to avoid issues with abbreviated commands.

LANGUAGE: yaml
CODE:
---
- hosts: all
  gather_facts: no
  tasks:
    - cisco.ios.ios_config:
        lines:
          - shutdown
        parents: interface GigabitEthernet1/0/11

----------------------------------------

TITLE: RST Reference Label
DESCRIPTION: A reference label for the onboarding toolkit section in RST format.

LANGUAGE: rst
CODE:
.. _onboarding_toolkit:

----------------------------------------

TITLE: Identifying Affected Component Path
DESCRIPTION: Shows the file path of the component containing the deprecated functionality

LANGUAGE: plaintext
CODE:
%(path)s

----------------------------------------

TITLE: Managing Services with Ansible Ad Hoc Commands
DESCRIPTION: These examples demonstrate how to use the service module to start, restart, or stop services on managed nodes using Ansible ad hoc commands.

LANGUAGE: bash
CODE:
$ ansible webservers -m ansible.builtin.service -a "name=httpd state=started"
$ ansible webservers -m ansible.builtin.service -a "name=httpd state=restarted"
$ ansible webservers -m ansible.builtin.service -a "name=httpd state=stopped"

----------------------------------------

TITLE: Asserting Service State in Ansible
DESCRIPTION: This snippet demonstrates how to assert the desired state of a service using Ansible's service module.

LANGUAGE: yaml
CODE:
tasks:
  - ansible.builtin.service:
      name: foo
      state: started
      enabled: true

----------------------------------------

TITLE: Configuring Network Inventory Groups
DESCRIPTION: Example inventory file showing how to organize network devices into groups with connection and authentication variables for different platforms like EOS, IOS and VyOS.

LANGUAGE: ini
CODE:
[all:vars]
ansible_connection=ansible.netcommon.network_cli
ansible_user=ansible

[switches:children]
eos
ios
vyos

[eos]
veos01 ansible_host=veos-01.example.net
veos02 ansible_host=veos-02.example.net
veos03 ansible_host=veos-03.example.net
veos04 ansible_host=veos-04.example.net

[eos:vars]
ansible_become=yes
ansible_become_method=enable
ansible_network_os=arista.eos.eos
ansible_user=my_eos_user
ansible_password=my_eos_password

----------------------------------------

TITLE: Creating Changelog Fragment for Breaking Changes
DESCRIPTION: Example YAML format for documenting breaking changes in ansible-test that affect cloud test plugins.

LANGUAGE: yaml
CODE:
breaking_changes:
  - ansible-test - automatic installation of requirements for cloud test plugins no longer occurs. The affected test plugins are "aws", "azure", "cs", "hcloud", "nios", "opennebula", "openshift" and "vcenter". Collections should instead use one of the supported integration test requirements files, such as the "tests/integration/requirements.txt" file (https://github.com/ansible/ansible/pull/75605).

----------------------------------------

TITLE: Analyzing Incidental Coverage for Multiple Plugins
DESCRIPTION: This command uses the incidental.py script to report on incidental code coverage for multiple plugins, such as all filter plugins, by iterating through plugin files.

LANGUAGE: shell
CODE:
find lib/ansible/plugins/filter -name '*.py' -not -name __init__.py -exec hacking/azp/incidental.py 14075/ --plugin-path '{}' ';'

----------------------------------------

TITLE: Galaxy Role Skeleton Configuration
DESCRIPTION: Configuration settings in ansible.cfg for specifying a custom role skeleton and files to ignore during initialization.

LANGUAGE: text
CODE:
[galaxy]
role_skeleton = /path/to/skeleton
role_skeleton_ignore = ^.git$,^.*/.git_keep$

----------------------------------------

TITLE: Platform-Independent Network Commands
DESCRIPTION: Example showing how to use platform-independent modules like cli_command to simplify playbooks across different network platforms

LANGUAGE: yaml
CODE:
- hosts: network
  gather_facts: false
  connection: ansible.netcommon.network_cli

  tasks:
    - name: Run cli_command on Arista
      ansible.netcommon.cli_command:
        command: show ip int br
      when: ansible_network_os == 'arista.eos.eos'

----------------------------------------

TITLE: Dictionary Iteration Using Six's iteritems()
DESCRIPTION: Demonstrates dictionary iteration using ansible.module_utils.six's iteritems() function, which provides a compatible interface across Python 2 and 3. This approach is recommended when backwards compatibility is needed.

LANGUAGE: python
CODE:
from ansible.module_utils.six import iteritems

for KEY, VALUE in iteritems(DICT):
    pass

----------------------------------------

TITLE: Changelog Fragment Example - Breaking Changes
DESCRIPTION: YAML format for documenting breaking changes in an Ansible collection changelog fragment.

LANGUAGE: yaml
CODE:
breaking_changes:
  - ec2_instance - instance wait for state behavior no longer waits for the instance monitoring status to become OK when launching a new instance. If plays require the old behavior, the action will need to specify \"state: started\" (https://github.com/ansible-collections/amazon.aws/pull/481).

----------------------------------------

TITLE: RST Documentation Redirect Reference
DESCRIPTION: ReStructuredText markup that marks the page as orphaned and redirects to the playbooks error handling documentation section.

LANGUAGE: rst
CODE:
:orphan:

***************************
Error handling in playbooks
***************************

This page has moved to :ref:`playbooks_error_handling`.

----------------------------------------

TITLE: Backing up Junos Configuration via NETCONF
DESCRIPTION: YAML task for backing up the current configuration of a Junos device using NETCONF connection. Uses junipernetworks.junos.junos_config module with backup feature.

LANGUAGE: yaml
CODE:
- name: Backup current switch config (junos)
  junipernetworks.junos.junos_config:
    backup: yes
  register: backup_junos_location
  when: ansible_network_os == 'junipernetworks.junos.junos'

----------------------------------------

TITLE: Displaying Ansible Ping Results in YAML
DESCRIPTION: Shows the successful ping responses from three different hosts (192.0.2.50-52). Each response includes the discovered Python interpreter path and ping confirmation.

LANGUAGE: yaml
CODE:
192.0.2.50 | SUCCESS => {
  "ansible_facts": {
    "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
    }
192.0.2.51 | SUCCESS => {
  "ansible_facts": {
    "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
    }
192.0.2.52 | SUCCESS => {
  "ansible_facts": {
    "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
    }

----------------------------------------

TITLE: Using Podman for Dependency Updates
DESCRIPTION: Command to use root-less podman with a Python 3.10 image to run the pip-compile nox session for updating dependencies.

LANGUAGE: bash
CODE:
podman run --rm --tty --volume "$(pwd):/mnt:z" --workdir /mnt docker.io/library/python:3.10 bash -c 'pip install nox ; nox -s pip-compile'

----------------------------------------

TITLE: Defining Table of Contents in reStructuredText for Ansible Contributors Guide
DESCRIPTION: This snippet defines the table of contents for the Ansible-core Contributors Guide using reStructuredText syntax. It includes links to various sections such as reporting bugs, documentation contributions, and development processes.

LANGUAGE: rst
CODE:
.. toctree::
   :maxdepth: 2

   reporting_bugs_and_features
   documentation_contributions
   development_process
   other_tools_and_programs

----------------------------------------

TITLE: ReStructuredText Directive for Documentation Redirect
DESCRIPTION: Uses Sphinx documentation syntax to mark page as orphaned and create a redirect reference to the Blocks documentation section.

LANGUAGE: rst
CODE:
:orphan:

******
Blocks
******

This page has moved to :ref:`playbooks_blocks`.

----------------------------------------

TITLE: SSH Key Management Commands
DESCRIPTION: Shell commands for managing SSH keys and agents for Ansible connections. Shows how to start ssh-agent and add private keys.

LANGUAGE: bash
CODE:
$ ssh-agent bash
$ ssh-add ~/.ssh/id_rsa

LANGUAGE: bash
CODE:
$ ssh-agent bash
$ ssh-add ~/.ssh/keypair.pem

----------------------------------------

TITLE: Installing Ansible on Ubuntu
DESCRIPTION: Commands for configuring PPA and installing Ansible on Ubuntu systems using apt package manager.

LANGUAGE: bash
CODE:
$ sudo apt update
$ sudo apt install software-properties-common
$ sudo add-apt-repository --yes --update ppa:ansible/ansible
$ sudo apt install ansible

----------------------------------------

TITLE: Documentation Directory Path Reference
DESCRIPTION: Reference to the documentation directory path where the build process occurs.

LANGUAGE: rst
CODE:
``docs/docsite/``

----------------------------------------

TITLE: RST Redirect Documentation
DESCRIPTION: ReStructuredText markup for a documentation page that redirects users to the playbooks_reuse section. The :orphan: directive indicates this page is not included in the main toctree.

LANGUAGE: rst
CODE:
:orphan:

**************************
Re-using Ansible artifacts
**************************

This page has moved to :ref:`playbooks_reuse`.

----------------------------------------

TITLE: Adding Notes and Warnings in reStructuredText
DESCRIPTION: These RST directives add note and warning blocks to the document, providing important information about the release schedule.

LANGUAGE: rst
CODE:
.. note:: Dates subject to change.
.. note:: We plan to post weekly alpha releases to the `PyPI ansible project <https://pypi.org/project/ansible/>`_ for testing.

.. warning::
    We initially were going to have feature freeze on 2020-08-18. We tried this but decided to
    change course.  Instead, we'll enter feature freeze when ansible-2.10.0 beta1 is released.

----------------------------------------

TITLE: Running Remote Scripts for Testing
DESCRIPTION: This snippet demonstrates how to push and execute scripts on remote hosts for testing purposes.

LANGUAGE: yaml
CODE:
tasks:
  - ansible.builtin.script: test_script1
  - ansible.builtin.script: test_script2 --parameter value --parameter2 value

----------------------------------------

TITLE: Initializing Ansible inventory plugin class in Python
DESCRIPTION: Basic structure for creating an Ansible inventory plugin class, inheriting from BaseInventoryPlugin.

LANGUAGE: python
CODE:
from ansible.plugins.inventory import BaseInventoryPlugin

class InventoryModule(BaseInventoryPlugin):

    NAME = 'myplugin'  # used internally by Ansible, it should match the file name but not required

----------------------------------------

TITLE: Iterating Dictionary Keys in Python2 and Python3 Compatible Ansible Template
DESCRIPTION: Demonstrates how to iterate over dictionary keys in a way that's compatible with both Python2 and Python3. Uses the 'list' filter to ensure compatibility.

LANGUAGE: yaml+jinja
CODE:
vars:
  hosts:
    testhost1: 127.0.0.2
    testhost2: 127.0.0.3
tasks:
  - debug:
      msg: '{{ item }}'
    # Only works with Python 2
    #loop: "{{ hosts.keys() }}"
    # Works with both Python 2 and Python 3
    loop: "{{ hosts.keys() | list }}"

----------------------------------------

TITLE: Generating Static Dependencies for Ansible Tests
DESCRIPTION: This snippet shows the command used to generate the static dependencies file for Ansible's test suite using the uv tool. It specifies ruff as a dependency with version 0.8.6.

LANGUAGE: plaintext
CODE:
# This file was autogenerated by uv via the following command:
#    uv pip compile --universal --output-file tests/static.txt tests/static.in
ruff==0.8.6
    # via -r tests/static.in

----------------------------------------

TITLE: Generating Complete Ansible Configuration with Plugins
DESCRIPTION: Command to generate a comprehensive ansible.cfg file that includes all default settings plus available plugins. This creates a more complete configuration file with all possible options.

LANGUAGE: console
CODE:
$ ansible-config init --disabled -t all > ansible.cfg

----------------------------------------

TITLE: Variable-Based Playbook Imports in YAML
DESCRIPTION: Shows how to import playbooks dynamically using variables, either through extra-vars or vars keyword.

LANGUAGE: yaml
CODE:
- import_playbook: "/path/to/{{ import_from_extra_var }}"
- import_playbook: "{{ import_from_vars }}"
  vars:
    import_from_vars: /path/to/one_playbook.yml

----------------------------------------

TITLE: Delegating Tasks to Localhost in Ansible
DESCRIPTION: Example showing how to delegate a task to localhost using delegate_to directive. This pattern is commonly used when performing local operations while processing remote host data.

LANGUAGE: yaml
CODE:
- hosts: all
  tasks:
    - name: check that i have log file for all hosts on my local machine
      stat: path=/var/log/hosts/{{inventory_hostname}}.log
      delegate_to: localhost

----------------------------------------

TITLE: Handler Listen Directive in Ansible
DESCRIPTION: Demonstrates the use of the 'listen' keyword to group multiple handlers under a single notification topic.

LANGUAGE: yaml
CODE:
tasks:
  - name: Restart everything
    command: echo "this task will restart the web services"
    notify: "restart web services"

handlers:
  - name: Restart memcached
    service:
      name: memcached
      state: restarted
    listen: "restart web services"

  - name: Restart apache
    service:
      name: apache
      state: restarted
    listen: "restart web services"

----------------------------------------

TITLE: Defining Table of Contents for ansible-core Roadmaps in reStructuredText
DESCRIPTION: This snippet defines a table of contents (toctree) for ansible-core roadmap documents using reStructuredText syntax. It specifies the maximum depth, glob pattern for including files, and a caption for the table of contents.

LANGUAGE: restructuredtext
CODE:
.. toctree::
   :maxdepth: 1
   :glob:
   :caption: ansible-core Roadmaps

   ROADMAP_2_19
   ROADMAP_2_18
   ROADMAP_2_17
   ROADMAP_2_16
   ROADMAP_2_15
   ROADMAP_2_14
   ROADMAP_2_13
   ROADMAP_2_12
   ROADMAP_2_11
   ROADMAP_2_10

----------------------------------------

TITLE: Conditional Test Execution in Ansible Playbook
DESCRIPTION: Example of using conditional statements in integration test playbooks to skip tests based on specific distributions.

LANGUAGE: yaml
CODE:
when: ansible_distribution in ('Ubuntu')

----------------------------------------

TITLE: RST Documentation for Ansible 4.0 Release Schedule
DESCRIPTION: RestructuredText formatted documentation containing the release schedule, version policies, and important deadlines for Ansible 4.0 project release. Includes detailed notes about collection reviews, version freezes, and maintenance policies.

LANGUAGE: restructuredtext
CODE:
.. _ansible_4_roadmap:

===================
Ansible project 4.0
===================

This release schedule includes dates for the `ansible <https://pypi.org/project/ansible/>`_ package, with a few dates for the `ansible-core <https://pypi.org/project/ansible-core/>`_ package as well. All dates are subject to change.

----------------------------------------

TITLE: Using Special Tags in YAML
DESCRIPTION: Example of using special tags 'always' and 'never' in an Ansible playbook YAML file. Shows tasks that will always run or never run by default.

LANGUAGE: yaml
CODE:
tasks:
- name: Print a message
  ansible.builtin.debug:
    msg: "Always runs"
  tags:
  - always

- name: Print a message
  ansible.builtin.debug:
    msg: "runs when you use specify tag1, all(default) or tagged"
  tags:
  - tag1

- name: Print a message
  ansible.builtin.debug:
    msg: "always runs unless you explicitly skip, like if you use ``--skip-tags tag2``"
  tags:
     - always
     - tag2

----------------------------------------

TITLE: Configuring ERIC_ECCLI Group Variables in Ansible YAML
DESCRIPTION: This snippet demonstrates how to set up group variables for ERIC_ECCLI devices in Ansible. It includes connection type, network OS, user credentials, and SSH proxy command for bastion host access.

LANGUAGE: yaml
CODE:
ansible_connection: ansible.netcommon.network_cli
ansible_network_os: community.network.eric_eccli
ansible_user: myuser
ansible_password: !vault...
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q bastion01"'

----------------------------------------

TITLE: RST Table Definition for Past Committee Members
DESCRIPTION: ReStructuredText table listing past Steering Committee members with their GitHub handles and service periods

LANGUAGE: rst
CODE:
.. table:: Steering Committee past members

  +------------------+-----------+-------------------+
  | Name             | GitHub    | Years of service  |
  +==================+===========+===================+
  | Brad Thornton    | cidrblock | 2021-2024         |
  +------------------+-----------+-------------------+
  | Jill Rouleau     | jillr     | 2021-2022         |
  +------------------+-----------+-------------------+
  | Tadej Borovšak   | tadeboro  | 2021-2022         |
  +------------------+-----------+-------------------+
  | Toshio Kuratomi  | abadger   | 2021              |
  +------------------+-----------+-------------------+
  | Dylan Silva      | thaumos   | 2021-2025         |
  +------------------+-----------+-------------------+

----------------------------------------

TITLE: Ternary filter for conditional values
DESCRIPTION: Use the ternary filter to define different values based on a condition

LANGUAGE: jinja2
CODE:
{{ (status == 'needs_restart') | ternary('restart', 'continue') }}

LANGUAGE: jinja2
CODE:
{{ enabled | ternary('no shutdown', 'shutdown', omit) }}

----------------------------------------

TITLE: Running Specific Makefile Target for Documentation
DESCRIPTION: Example of running a specific Makefile target using nox, including cleaning and building a single HTML page.

LANGUAGE: bash
CODE:
nox -s make -- clean htmlsingle rst=community/documentation_contributions.rst

----------------------------------------

TITLE: Jinja2 Template for Hostname
DESCRIPTION: Simple Jinja2 template that displays the server's hostname using Ansible facts

LANGUAGE: yaml
CODE:
My name is {{ ansible_facts['hostname'] }}