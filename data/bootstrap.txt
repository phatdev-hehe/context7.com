TITLE: Adding Viewport Meta Tag for Responsive Design
DESCRIPTION: This snippet demonstrates how to add the viewport meta tag to ensure proper rendering and touch zooming on all devices.

LANGUAGE: html
CODE:
<meta name="viewport" content="width=device-width, initial-scale=1">

----------------------------------------

TITLE: Including Bootstrap via CDN with Bundled JS
DESCRIPTION: HTML code to include Bootstrap's compiled CSS and bundled JS from jsDelivr CDN with SRI hash verification

LANGUAGE: html
CODE:
<link href="{{< param "cdn.css" >}}" rel="stylesheet" integrity="{{< param "cdn.css_hash" >}}" crossorigin="anonymous">
<script src="{{< param "cdn.js_bundle" >}}" integrity="{{< param "cdn.js_bundle_hash" >}}" crossorigin="anonymous"></script>

----------------------------------------

TITLE: Including Bootstrap CSS and JS via CDN
DESCRIPTION: This snippet demonstrates how to include Bootstrap's CSS and JavaScript (including Popper for positioning dropdowns, popovers, and tooltips) using CDN links in an HTML file.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap demo</title>
    <link href="{{< param "cdn.css" >}}" rel="stylesheet" integrity="{{< param "cdn.css_hash" >}}" crossorigin="anonymous">
  </head>
  <body>
    <h1>Hello, world!</h1>
    <script src="{{< param "cdn.js_bundle" >}}" integrity="{{< param "cdn.js_bundle_hash" >}}" crossorigin="anonymous"></script>
  </body>
</html>

----------------------------------------

TITLE: Including Popper and Bootstrap JS Separately
DESCRIPTION: This snippet shows how to include Popper and Bootstrap's JavaScript separately, which is useful if you don't need all Bootstrap components that require Popper.

LANGUAGE: html
CODE:
<script src="{{< param "cdn.popper" >}}" integrity="{{< param "cdn.popper_hash" >}}" crossorigin="anonymous"></script>
<script src="{{< param "cdn.js" >}}" integrity="{{< param "cdn.js_hash" >}}" crossorigin="anonymous"></script>

----------------------------------------

TITLE: Creating Basic HTML Structure for Bootstrap
DESCRIPTION: This snippet shows how to create a basic HTML5 structure with the necessary viewport meta tag for responsive behavior in mobile devices.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap demo</title>
  </head>
  <body>
    <h1>Hello, world!</h1>
  </body>
</html>

----------------------------------------

TITLE: Custom Validation Form Example
DESCRIPTION: Sample form with custom Bootstrap validation styles using the novalidate attribute and JavaScript validation. Shows usage of :invalid/:valid styles with custom feedback messages.

LANGUAGE: html
CODE:
<form class="row g-3 needs-validation" novalidate>
  <div class="col-md-4">
    <label for="validationCustom01" class="form-label">First name</label>
    <input type="text" class="form-control" id="validationCustom01" value="Mark" required>
    <div class="valid-feedback">
      Looks good!
    </div>
  </div>
  <!-- Additional form fields -->
</form>

----------------------------------------

TITLE: Setting HTML5 Doctype for Bootstrap
DESCRIPTION: This snippet shows the required HTML5 doctype declaration for proper Bootstrap styling and functionality.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  ...
</html>

----------------------------------------

TITLE: Installing Bootstrap via npm
DESCRIPTION: Command to install Bootstrap using npm package manager

LANGUAGE: sh
CODE:
npm install bootstrap@{{< param "current_version" >}}

----------------------------------------

TITLE: Basic Navbar Implementation
DESCRIPTION: Example of a basic responsive Bootstrap navbar with brand, navigation links and form elements.

LANGUAGE: HTML
CODE:
<nav class="navbar navbar-expand-lg bg-body-tertiary">
  <div class="container-fluid">
    <a class="navbar-brand" href="#">Navbar</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="#">Home</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#">Link</a>
        </li>
      </ul>
      <form class="d-flex" role="search">
        <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
        <button class="btn btn-outline-success" type="submit">Search</button>
      </form>
    </div>
  </div>
</nav>

----------------------------------------

TITLE: Creating Complex Form Layouts with Bootstrap Grid
DESCRIPTION: Illustrates how to create a more complex form layout using Bootstrap's grid system and form classes.

LANGUAGE: HTML
CODE:
<form class="row g-3">
  <div class="col-md-6">
    <label for="inputEmail4" class="form-label">Email</label>
    <input type="email" class="form-control" id="inputEmail4">
  </div>
  <div class="col-md-6">
    <label for="inputPassword4" class="form-label">Password</label>
    <input type="password" class="form-control" id="inputPassword4">
  </div>
  <!-- More form fields -->
  <div class="col-12">
    <button type="submit" class="btn btn-primary">Sign in</button>
  </div>
</form>

----------------------------------------

TITLE: Creating Button Variants in HTML
DESCRIPTION: Shows how to create different button variants using Bootstrap's predefined classes.

LANGUAGE: HTML
CODE:
<button type="button" class="btn btn-primary">Primary</button>
<button type="button" class="btn btn-secondary">Secondary</button>
<button type="button" class="btn btn-success">Success</button>
<button type="button" class="btn btn-danger">Danger</button>
<button type="button" class="btn btn-warning">Warning</button>
<button type="button" class="btn btn-info">Info</button>
<button type="button" class="btn btn-light">Light</button>
<button type="button" class="btn btn-dark">Dark</button>
<button type="button" class="btn btn-link">Link</button>

----------------------------------------

TITLE: Implementing Default Bootstrap Container
DESCRIPTION: Basic implementation of Bootstrap's default container class that provides responsive fixed-width containment with automatic breakpoint adjustments.

LANGUAGE: html
CODE:
<div class="container">
  <!-- Content here -->
</div>

----------------------------------------

TITLE: Rendering Basic Button in HTML
DESCRIPTION: Demonstrates the use of the base .btn class to create a simple button.

LANGUAGE: HTML
CODE:
<button type="button" class="btn">Base class</button>

----------------------------------------

TITLE: Basic Card Example in HTML
DESCRIPTION: Demonstrates a basic card structure with an image, title, text, and button.

LANGUAGE: HTML
CODE:
<div class="card" style="width: 18rem;">
  {{< placeholder width="100%" height="180" class="card-img-top" text="Image cap" >}}
  <div class="card-body">
    <h5 class="card-title">Card title</h5>
    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
    <a href="#" class="btn btn-primary">Go somewhere</a>
  </div>
</div>

----------------------------------------

TITLE: Creating Basic Form Structure with Bootstrap
DESCRIPTION: Demonstrates how to create a simple form structure using Bootstrap classes for margin and form controls.

LANGUAGE: HTML
CODE:
<div class="mb-3">
  <label for="formGroupExampleInput" class="form-label">Example label</label>
  <input type="text" class="form-control" id="formGroupExampleInput" placeholder="Example input placeholder">
</div>
<div class="mb-3">
  <label for="formGroupExampleInput2" class="form-label">Another label</label>
  <input type="text" class="form-control" id="formGroupExampleInput2" placeholder="Another input placeholder">
</div>

----------------------------------------

TITLE: Implementing Visually Hidden Content in HTML with Bootstrap
DESCRIPTION: This snippet demonstrates how to use the .visually-hidden class to create content that is hidden visually but remains accessible to assistive technologies. It's useful for providing additional context to non-visual users.

LANGUAGE: html
CODE:
<p class="text-danger">
  <span class="visually-hidden">Danger: </span>
  This action is not reversible
</p>

----------------------------------------

TITLE: Aligning Items in Flex Containers
DESCRIPTION: Shows how to align flex items along the cross axis using Bootstrap's align-items utility classes.

LANGUAGE: HTML
CODE:
<div class="d-flex align-items-start">...</div>
<div class="d-flex align-items-end">...</div>
<div class="d-flex align-items-center">...</div>
<div class="d-flex align-items-baseline">...</div>
<div class="d-flex align-items-stretch">...</div>

----------------------------------------

TITLE: Importing Bootstrap Sass Components Selectively
DESCRIPTION: This snippet demonstrates how to selectively import Bootstrap Sass components to optimize file size. It shows the structure of the bootstrap.scss file and suggests commenting out or deleting unused components.

LANGUAGE: scss
CODE:
{{< scss-docs name="import-stack" file="scss/bootstrap.scss" >}}

----------------------------------------

TITLE: Creating Basic Button Group in HTML with Bootstrap
DESCRIPTION: Demonstrates how to create a basic button group using Bootstrap classes. The buttons are wrapped in a div with the 'btn-group' class, and each button has the 'btn' and 'btn-primary' classes applied.

LANGUAGE: HTML
CODE:
<div class="btn-group" role="group" aria-label="Basic example">
  <button type="button" class="btn btn-primary">Left</button>
  <button type="button" class="btn btn-primary">Middle</button>
  <button type="button" class="btn btn-primary">Right</button>
</div>

----------------------------------------

TITLE: Importing Bootstrap CSS and JavaScript in Webpack
DESCRIPTION: JavaScript code to import Bootstrap's CSS and all of its JavaScript components in the Webpack entry point.

LANGUAGE: javascript
CODE:
// Import our custom CSS
import '../scss/styles.scss'

// Import all of Bootstrap's JS
import * as bootstrap from 'bootstrap'

----------------------------------------

TITLE: Installing Bootstrap with Package Managers
DESCRIPTION: Commands to install Bootstrap using various package managers like npm, yarn, Composer, and NuGet.

LANGUAGE: shell
CODE:
npm install bootstrap@v5.3.3
yarn add bootstrap@v5.3.3
composer require twbs/bootstrap:5.3.3
Install-Package bootstrap
Install-Package bootstrap.sass

----------------------------------------

TITLE: Basic Form Controls Example in Bootstrap
DESCRIPTION: Example showing basic email input and textarea implementation with Bootstrap form control classes.

LANGUAGE: html
CODE:
<div class="mb-3">
  <label for="exampleFormControlInput1" class="form-label">Email address</label>
  <input type="email" class="form-control" id="exampleFormControlInput1" placeholder="name@example.com">
</div>
<div class="mb-3">
  <label for="exampleFormControlTextarea1" class="form-label">Example textarea</label>
  <textarea class="form-control" id="exampleFormControlTextarea1" rows="3"></textarea>
</div>

----------------------------------------

TITLE: Exploring Compiled Bootstrap Directory Structure
DESCRIPTION: Shows the complete directory structure of a compiled Bootstrap distribution, including CSS files (with grid, reboot, utilities variants) and JavaScript files (with bundles and source maps).

LANGUAGE: text
CODE:
bootstrap/
├── css/
│   ├── bootstrap-grid.css
│   ├── bootstrap-grid.css.map
│   ├── bootstrap-grid.min.css
│   ├── bootstrap-grid.min.css.map
│   ├── bootstrap-grid.rtl.css
│   ├── bootstrap-grid.rtl.css.map
│   ├── bootstrap-grid.rtl.min.css
│   ├── bootstrap-grid.rtl.min.css.map
│   ├── bootstrap-reboot.css
│   ├── bootstrap-reboot.css.map
│   ├── bootstrap-reboot.min.css
│   ├── bootstrap-reboot.min.css.map
│   ├── bootstrap-reboot.rtl.css
│   ├── bootstrap-reboot.rtl.css.map
│   ├── bootstrap-reboot.rtl.min.css
│   ├── bootstrap-reboot.rtl.min.css.map
│   ├── bootstrap-utilities.css
│   ├── bootstrap-utilities.css.map
│   ├── bootstrap-utilities.min.css
│   ├── bootstrap-utilities.min.css.map
│   ├── bootstrap-utilities.rtl.css
│   ├── bootstrap-utilities.rtl.css.map
│   ├── bootstrap-utilities.rtl.min.css
│   ├── bootstrap-utilities.rtl.min.css.map
│   ├── bootstrap.css
│   ├── bootstrap.css.map
│   ├── bootstrap.min.css
│   ├── bootstrap.min.css.map
│   ├── bootstrap.rtl.css
│   ├── bootstrap.rtl.css.map
│   ├── bootstrap.rtl.min.css
│   └── bootstrap.rtl.min.css.map
└── js/
    ├── bootstrap.bundle.js
    ├── bootstrap.bundle.js.map
    ├── bootstrap.bundle.min.js
    ├── bootstrap.bundle.min.js.map
    ├── bootstrap.esm.js
    ├── bootstrap.esm.js.map
    ├── bootstrap.esm.min.js
    ├── bootstrap.esm.min.js.map
    ├── bootstrap.js
    ├── bootstrap.js.map
    ├── bootstrap.min.js
    └── bootstrap.min.js.map

----------------------------------------

TITLE: Importing Partial Bootstrap Sass
DESCRIPTION: Shows how to selectively import specific Bootstrap Sass components and utilities.

LANGUAGE: scss
CODE:
// Custom.scss
// Option B: Include parts of Bootstrap

// 1. Include functions first (so you can manipulate colors, SVGs, calc, etc)
@import "../node_modules/bootstrap/scss/functions";

// 2. Include any default variable overrides here

// 3. Include remainder of required Bootstrap stylesheets
@import "../node_modules/bootstrap/scss/variables";
@import "../node_modules/bootstrap/scss/variables-dark";

// 4. Include any default map overrides here

// 5. Include remainder of required parts
@import "../node_modules/bootstrap/scss/maps";
@import "../node_modules/bootstrap/scss/mixins";
@import "../node_modules/bootstrap/scss/root";

// 6. Optionally include any other parts as needed
@import "../node_modules/bootstrap/scss/utilities";
@import "../node_modules/bootstrap/scss/reboot";
@import "../node_modules/bootstrap/scss/type";
@import "../node_modules/bootstrap/scss/images";
@import "../node_modules/bootstrap/scss/containers";
@import "../node_modules/bootstrap/scss/grid";
@import "../node_modules/bootstrap/scss/helpers";

// 7. Optionally include utilities API last
@import "../node_modules/bootstrap/scss/utilities/api";

// 8. Add additional custom code here

----------------------------------------

TITLE: Implementing Button Sizes in HTML
DESCRIPTION: Demonstrates how to create larger and smaller buttons using Bootstrap's size classes.

LANGUAGE: HTML
CODE:
<button type="button" class="btn btn-primary btn-lg">Large button</button>
<button type="button" class="btn btn-secondary btn-lg">Large button</button>

LANGUAGE: HTML
CODE:
<button type="button" class="btn btn-primary btn-sm">Small button</button>
<button type="button" class="btn btn-secondary btn-sm">Small button</button>

----------------------------------------

TITLE: Form Validation JavaScript
DESCRIPTION: JavaScript code that handles custom form validation by preventing form submission and showing validation feedback.

LANGUAGE: javascript
CODE:
(() => {
  'use strict'

  const forms = document.querySelectorAll('.needs-validation')

  Array.from(forms).forEach(form => {
    form.addEventListener('submit', event => {
      if (!form.checkValidity()) {
        event.preventDefault()
        event.stopPropagation()
      }

      form.classList.add('was-validated')
    }, false)
  })
})()

----------------------------------------

TITLE: Defining Root CSS Variables in Bootstrap
DESCRIPTION: This snippet shows the default CSS variables available globally in Bootstrap, defined in the :root selector. These variables are used for theme colors, breakpoints, and font stacks.

LANGUAGE: css
CODE:
:root,
[data-bs-theme=light] {([^}]*)}

----------------------------------------

TITLE: Basic Bootstrap Grid Example
DESCRIPTION: Example showing basic three-column grid layout using Bootstrap's container, row and column classes

LANGUAGE: HTML
CODE:
<div class="container text-center">
  <div class="row">
    <div class="col">
      Column
    </div>
    <div class="col">
      Column
    </div>
    <div class="col">
      Column
    </div>
  </div>
</div>

----------------------------------------

TITLE: Customizing Bootstrap SCSS Variables
DESCRIPTION: This snippet shows a table of key Sass variables used to customize Bootstrap's global options. Each variable is listed with its default value, possible values, and a description of its effect on the framework.

LANGUAGE: scss
CODE:
$spacer: 1rem;
$enable-dark-mode: true;
$enable-rounded: true;
$enable-shadows: false;
$enable-gradients: false;
$enable-transitions: true;
$enable-reduced-motion: true;
$enable-grid-classes: true;
$enable-cssgrid: false;
$enable-container-classes: true;
$enable-caret: true;
$enable-button-pointers: true;
$enable-rfs: true;
$enable-validation-icons: true;
$enable-negative-margins: false;
$enable-deprecation-messages: true;
$enable-important-utilities: true;
$enable-smooth-scroll: true;

----------------------------------------

TITLE: Basic Bootstrap Grid Example
DESCRIPTION: Example showing basic three-column grid layout using Bootstrap's container, row and column classes

LANGUAGE: HTML
CODE:
<div class="container text-center">
  <div class="row">
    <div class="col">
      Column
    </div>
    <div class="col">
      Column
    </div>
    <div class="col">
      Column
    </div>
  </div>
</div>

----------------------------------------

TITLE: Basic Modal Structure in HTML
DESCRIPTION: Shows the basic HTML structure for a Bootstrap modal with header, body, and footer sections.

LANGUAGE: HTML
CODE:
<div class="modal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Modal title</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Modal body text goes here.</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Save changes</button>
      </div>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Creating Basic Input Groups with Bootstrap
DESCRIPTION: Demonstrates how to create basic input groups with text add-ons, buttons, and various input types using Bootstrap classes.

LANGUAGE: HTML
CODE:
<div class="input-group mb-3">
  <span class="input-group-text" id="basic-addon1">@</span>
  <input type="text" class="form-control" placeholder="Username" aria-label="Username" aria-describedby="basic-addon1">
</div>

<div class="input-group mb-3">
  <input type="text" class="form-control" placeholder="Recipient's username" aria-label="Recipient's username" aria-describedby="basic-addon2">
  <span class="input-group-text" id="basic-addon2">@example.com</span>
</div>

<div class="mb-3">
  <label for="basic-url" class="form-label">Your vanity URL</label>
  <div class="input-group">
    <span class="input-group-text" id="basic-addon3">https://example.com/users/</span>
    <input type="text" class="form-control" id="basic-url" aria-describedby="basic-addon3 basic-addon4">
  </div>
  <div class="form-text" id="basic-addon4">Example help text goes outside the input group.</div>
</div>

<div class="input-group mb-3">
  <span class="input-group-text">$</span>
  <input type="text" class="form-control" aria-label="Amount (to the nearest dollar)">
  <span class="input-group-text">.00</span>
</div>

<div class="input-group mb-3">
  <input type="text" class="form-control" placeholder="Username" aria-label="Username">
  <span class="input-group-text">@</span>
  <input type="text" class="form-control" placeholder="Server" aria-label="Server">
</div>

<div class="input-group">
  <span class="input-group-text">With textarea</span>
  <textarea class="form-control" aria-label="With textarea"></textarea>
</div>

----------------------------------------

TITLE: Enabling Dark Mode in HTML
DESCRIPTION: This snippet shows how to enable dark mode across an entire project by adding the data-bs-theme attribute to the HTML element.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en" data-bs-theme="dark">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap demo</title>
    <link href="{{< param "cdn.css" >}}" rel="stylesheet" integrity="{{< param "cdn.css_hash" >}}" crossorigin="anonymous">
  </head>
  <body>
    <h1>Hello, world!</h1>
    <script src="{{< param "cdn.js_bundle" >}}" integrity="{{< param "cdn.js_bundle_hash" >}}" crossorigin="anonymous"></script>
  </body>
</html>

----------------------------------------

TITLE: Defining Text Color Utility in CSS
DESCRIPTION: This CSS snippet shows how a text color utility class (specifically .text-primary) is defined using CSS variables. It demonstrates the use of RGB values and opacity for flexible color manipulation.

LANGUAGE: css
CODE:
.text-primary {
  --bs-text-opacity: 1;
  color: rgba(var(--bs-primary-rgb), var(--bs-text-opacity)) !important;
}

----------------------------------------

TITLE: Using CSS Variables for Page Styling in Bootstrap
DESCRIPTION: This example shows how to use Bootstrap's CSS variables to reset the page's font and link styles. It demonstrates the flexibility of CSS variables compared to Sass variables.

LANGUAGE: css
CODE:
body {
  font: 1rem/1.5 var(--bs-font-sans-serif);
}
a {
  color: var(--bs-blue);
}

----------------------------------------

TITLE: Implementing Basic Bootstrap Accordion
DESCRIPTION: Basic accordion implementation with three collapsible items. The first item is expanded by default using .show class and appropriate aria attributes.

LANGUAGE: HTML
CODE:
<div class="accordion" id="accordionExample">
  <div class="accordion-item">
    <h2 class="accordion-header">
      <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
        Accordion Item #1
      </button>
    </h2>
    <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
      <div class="accordion-body">
        <strong>This is the first item's accordion body.</strong> It is shown by default...
      </div>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Grid Sass Variables Configuration
DESCRIPTION: Core Sass variables that control the Bootstrap grid system's columns, gutters and breakpoints

LANGUAGE: SCSS
CODE:
$grid-columns:      12;
$grid-gutter-width: 1.5rem;
$grid-row-columns:  6;

----------------------------------------

TITLE: Grid Cards Layout in HTML
DESCRIPTION: Shows how to use Bootstrap's grid system to layout cards in rows and columns.

LANGUAGE: HTML
CODE:
<div class="row row-cols-1 row-cols-md-2 g-4">
  <div class="col">
    <div class="card">
      {{< placeholder width="100%" height="140" class="card-img-top" text="Image cap" >}}
      <div class="card-body">
        <h5 class="card-title">Card title</h5>
        <p class="card-text">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
      </div>
    </div>
  </div>
  <!-- Additional card columns... -->
</div>

----------------------------------------

TITLE: Focusing Input in Modal with JavaScript
DESCRIPTION: Demonstrates how to focus an input element when a modal is shown using the 'shown.bs.modal' event.

LANGUAGE: JavaScript
CODE:
const myModal = document.getElementById('myModal')
const myInput = document.getElementById('myInput')

myModal.addEventListener('shown.bs.modal', () => {
  myInput.focus()
})

----------------------------------------

TITLE: Creating a Basic Bootstrap Carousel in HTML
DESCRIPTION: This snippet demonstrates how to create a basic carousel with three slides, including previous/next controls. The carousel requires manual initialization using JavaScript.

LANGUAGE: HTML
CODE:
<div id="carouselExample" class="carousel slide">
  <div class="carousel-inner">
    <div class="carousel-item active">
      <img src="..." class="d-block w-100" alt="...">
    </div>
    <div class="carousel-item">
      <img src="..." class="d-block w-100" alt="...">
    </div>
    <div class="carousel-item">
      <img src="..." class="d-block w-100" alt="...">
    </div>
  </div>
  <button class="carousel-control-prev" type="button" data-bs-target="#carouselExample" data-bs-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Previous</span>
  </button>
  <button class="carousel-control-next" type="button" data-bs-target="#carouselExample" data-bs-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="visually-hidden">Next</span>
  </button>
</div>

----------------------------------------

TITLE: Disabled Fieldset Form Example
DESCRIPTION: Shows how to disable an entire form section using fieldset. Includes various form controls like inputs, select menus, and checkboxes in disabled state.

LANGUAGE: html
CODE:
<form>
  <fieldset disabled>
    <legend>Disabled fieldset example</legend>
    <div class="mb-3">
      <label for="disabledTextInput" class="form-label">Disabled input</label>
      <input type="text" id="disabledTextInput" class="form-control" placeholder="Disabled input">
    </div>
    <div class="mb-3">
      <label for="disabledSelect" class="form-label">Disabled select menu</label>
      <select id="disabledSelect" class="form-select">
        <option>Disabled select</option>
      </select>
    </div>
    <div class="mb-3">
      <div class="form-check">
        <input class="form-check-input" type="checkbox" id="disabledFieldsetCheck" disabled>
        <label class="form-check-label" for="disabledFieldsetCheck">
          Can't check this
        </label>
      </div>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
  </fieldset>
</form>

----------------------------------------

TITLE: Grid Sass Mixins
DESCRIPTION: Sass mixins used to generate semantic grid column CSS

LANGUAGE: SCSS
CODE:
// Creates a wrapper for a series of columns
@include make-row();

// Make the element grid-ready (applying everything but the width)
@include make-col-ready();

// Without optional size values, the mixin will create equal columns
@include make-col();
@include make-col($size, $columns: $grid-columns);

// Offset with margins
@include make-col-offset($size, $columns: $grid-columns);

----------------------------------------

TITLE: Defining Bootstrap Alert CSS Variables
DESCRIPTION: This SCSS code defines CSS variables for Bootstrap alerts, allowing for enhanced real-time customization of alert styles.

LANGUAGE: scss
CODE:
--#{$prefix}alert-bg: transparent;
--#{$prefix}alert-padding-x: #{$alert-padding-x};
--#{$prefix}alert-padding-y: #{$alert-padding-y};
--#{$prefix}alert-margin-bottom: #{$alert-margin-bottom};
--#{$prefix}alert-color: inherit;
--#{$prefix}alert-border-color: transparent;
--#{$prefix}alert-border: #{$alert-border-width} solid var(--#{$prefix}alert-border-color);
--#{$prefix}alert-border-radius: #{$alert-border-radius};
--#{$prefix}alert-link-color: inherit;

----------------------------------------

TITLE: Basic Spacing Utility Classes in SCSS
DESCRIPTION: Core spacing utility class definitions showing margin and padding implementations. Demonstrates the basic structure of Bootstrap's spacing utilities.

LANGUAGE: scss
CODE:
.mt-0 {
  margin-top: 0 !important;
}

.ms-1 {
  margin-left: ($spacer * .25) !important;
}

.px-2 {
  padding-left: ($spacer * .5) !important;
  padding-right: ($spacer * .5) !important;
}

.p-3 {
  padding: $spacer !important;
}

----------------------------------------

TITLE: Implementing Responsive Bootstrap Containers
DESCRIPTION: Examples of responsive container implementations that are 100% wide until reaching their specified breakpoints, then adopt max-width constraints.

LANGUAGE: html
CODE:
<div class="container-sm">100% wide until small breakpoint</div>
<div class="container-md">100% wide until medium breakpoint</div>
<div class="container-lg">100% wide until large breakpoint</div>
<div class="container-xl">100% wide until extra large breakpoint</div>
<div class="container-xxl">100% wide until extra extra large breakpoint</div>

----------------------------------------

TITLE: Bootstrap Grid Breakpoints Variable Definition
DESCRIPTION: Sass map defining Bootstrap's default breakpoint ranges in _variables.scss file.

LANGUAGE: scss
CODE:
// X-Small devices (portrait phones, less than 576px)
// No media query for `xs` since this is the default in Bootstrap

// Small devices (landscape phones, 576px and up)
@media (min-width: 576px) { ... }

// Medium devices (tablets, 768px and up)
@media (min-width: 768px) { ... }

// Large devices (desktops, 992px and up)
@media (min-width: 992px) { ... }

// X-Large devices (large desktops, 1200px and up)
@media (min-width: 1200px) { ... }

// XX-Large devices (larger desktops, 1400px and up)
@media (min-width: 1400px) { ... }

----------------------------------------

TITLE: Bootstrap SCSS Import
DESCRIPTION: Importing Bootstrap's complete SCSS package in styles.scss

LANGUAGE: scss
CODE:
// Import all of Bootstrap's CSS
@import "bootstrap/scss/bootstrap";

----------------------------------------

TITLE: Configuring Webpack for Bootstrap Project
DESCRIPTION: Basic Webpack configuration for a Bootstrap project, including entry point, output, development server settings, and plugins.

LANGUAGE: javascript
CODE:
'use strict'

const path = require('path')
const HtmlWebpackPlugin = require('html-webpack-plugin')

module.exports = {
  mode: 'development',
  entry: './src/js/main.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist')
  },
  devServer: {
    static: path.resolve(__dirname, 'dist'),
    port: 8080,
    hot: true
  },
  plugins: [
    new HtmlWebpackPlugin({ template: './src/index.html' })
  ]
}

----------------------------------------

TITLE: Static Backdrop Modal in HTML
DESCRIPTION: Demonstrates how to create a modal with a static backdrop that doesn't close when clicked outside.

LANGUAGE: HTML
CODE:
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="staticBackdropLabel">Modal title</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        ...
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Understood</button>
      </div>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Importing Complete Bootstrap Sass
DESCRIPTION: Example of importing all Bootstrap Sass files into a custom.scss file.

LANGUAGE: scss
CODE:
// Custom.scss
// Option A: Include all of Bootstrap

// Include any default variable overrides here (though functions won't be available)

@import "../node_modules/bootstrap/scss/bootstrap";

// Then add additional custom code here

----------------------------------------

TITLE: Triggering Modal with Button in HTML
DESCRIPTION: Shows how to create a button that triggers a modal using data attributes.

LANGUAGE: HTML
CODE:
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
  Launch demo modal
</button>

----------------------------------------

TITLE: Responsive Sticky Top Position in Bootstrap
DESCRIPTION: Shows how to implement responsive sticky positioning at the top of the viewport using Bootstrap's breakpoint-specific classes. Includes variations for small, medium, large, extra-large, and extra-extra-large viewports.

LANGUAGE: html
CODE:
<div class="sticky-sm-top">Stick to the top on viewports sized SM (small) or wider</div>
<div class="sticky-md-top">Stick to the top on viewports sized MD (medium) or wider</div>
<div class="sticky-lg-top">Stick to the top on viewports sized LG (large) or wider</div>
<div class="sticky-xl-top">Stick to the top on viewports sized XL (extra-large) or wider</div>
<div class="sticky-xxl-top">Stick to the top on viewports sized XXL (extra-extra-large) or wider</div>

----------------------------------------

TITLE: Creating Project Structure with npm and Webpack
DESCRIPTION: Commands to create the project folder, initialize npm, and install necessary dependencies for a Webpack project with Bootstrap.

LANGUAGE: bash
CODE:
mkdir my-project && cd my-project
npm init -y
npm i --save-dev webpack webpack-cli webpack-dev-server html-webpack-plugin
npm i --save bootstrap @popperjs/core
npm i --save-dev autoprefixer css-loader postcss-loader sass sass-loader style-loader

----------------------------------------

TITLE: Basic Floating Label Input Implementation in HTML
DESCRIPTION: Demonstrates the basic structure for creating a floating label input using Bootstrap classes. Requires a form-floating wrapper, input with form-control class, and a label element.

LANGUAGE: HTML
CODE:
<div class="form-floating mb-3">
  <input type="email" class="form-control" id="floatingInput" placeholder="name@example.com">
  <label for="floatingInput">Email address</label>
</div>

----------------------------------------

TITLE: Implementing Bootstrap Badges with Headings in HTML
DESCRIPTION: Demonstrates how to use badges with different heading levels in Bootstrap. Badges scale to match the size of the parent element using relative font sizing and em units.

LANGUAGE: html
CODE:
<h1>Example heading <span class="badge text-bg-secondary">New</span></h1>
<h2>Example heading <span class="badge text-bg-secondary">New</span></h2>
<h3>Example heading <span class="badge text-bg-secondary">New</span></h3>
<h4>Example heading <span class="badge text-bg-secondary">New</span></h4>
<h5>Example heading <span class="badge text-bg-secondary">New</span></h5>
<h6>Example heading <span class="badge text-bg-secondary">New</span></h6>

----------------------------------------

TITLE: Defining Vertical Alignment Utilities in SCSS
DESCRIPTION: This SCSS code snippet defines the vertical alignment utilities in Bootstrap's utilities API. It specifies the property, values, and class name format for the vertical-align property.

LANGUAGE: SCSS
CODE:
"vertical-align": (
  property: vertical-align,
  class: align,
  values: baseline top middle bottom text-bottom text-top
),

----------------------------------------

TITLE: Initializing Bootstrap Collapse with JavaScript
DESCRIPTION: This snippet demonstrates how to manually enable the collapse functionality on elements with the 'collapse' class using JavaScript.

LANGUAGE: javascript
CODE:
const collapseElementList = document.querySelectorAll('.collapse')
const collapseList = [...collapseElementList].map(collapseEl => new bootstrap.Collapse(collapseEl))

----------------------------------------

TITLE: Basic Dropdown Button HTML
DESCRIPTION: Simple dropdown button implementation with default styling.

LANGUAGE: html
CODE:
<div class="dropdown">
  <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
    Dropdown button
  </button>
  <ul class="dropdown-menu">
    <li><a class="dropdown-item" href="#">Action</a></li>
    <li><a class="dropdown-item" href="#">Another action</a></li>
    <li><a class="dropdown-item" href="#">Something else here</a></li>
  </ul>
</div>

----------------------------------------

TITLE: Native Font Stack Definition
DESCRIPTION: Bootstrap's system font stack definition that provides optimized font rendering across different operating systems and devices.

LANGUAGE: scss
CODE:
$font-family-sans-serif:
  system-ui,
  -apple-system,
  "Segoe UI",
  Roboto,
  "Helvetica Neue",
  "Noto Sans",
  "Liberation Sans",
  Arial,
  sans-serif,
  "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji" !default;

----------------------------------------

TITLE: Adding Borders with Bootstrap CSS Classes
DESCRIPTION: Demonstrates how to add borders to elements using Bootstrap's border utility classes.

LANGUAGE: html
CODE:
<span class="border"></span>
<span class="border-top"></span>
<span class="border-end"></span>
<span class="border-bottom"></span>
<span class="border-start"></span>

----------------------------------------

TITLE: Importing Bootstrap SCSS
DESCRIPTION: SCSS import statement to include all of Bootstrap's CSS styles

LANGUAGE: scss
CODE:
// Import all of Bootstrap's CSS
@import "bootstrap/scss/bootstrap";

----------------------------------------

TITLE: Initializing Popovers in JavaScript
DESCRIPTION: Demonstrates how to initialize all popovers on a page by selecting elements with the 'data-bs-toggle="popover"' attribute.

LANGUAGE: javascript
CODE:
const popoverTriggerList = document.querySelectorAll('[data-bs-toggle="popover"]')
const popoverList = [...popoverTriggerList].map(popoverTriggerEl => new bootstrap.Popover(popoverTriggerEl))

----------------------------------------

TITLE: Creating Outlined Styles Button Group in HTML with Bootstrap
DESCRIPTION: Illustrates how to create a button group with outlined buttons using Bootstrap classes. The 'btn-outline-primary' class is applied to each button for an outlined appearance.

LANGUAGE: HTML
CODE:
<div class="btn-group" role="group" aria-label="Basic outlined example">
  <button type="button" class="btn btn-outline-primary">Left</button>
  <button type="button" class="btn btn-outline-primary">Middle</button>
  <button type="button" class="btn btn-outline-primary">Right</button>
</div>

----------------------------------------

TITLE: CSS Variables Root Definition
DESCRIPTION: Example of CSS root variables defined in Bootstrap for common body styles.

LANGUAGE: scss
CODE:
:root { /* Example code removed for brevity */ }

----------------------------------------

TITLE: Using Bootstrap Plugins with jQuery
DESCRIPTION: Shows how to use Bootstrap plugins with jQuery when it's available. This includes initializing plugins, configuring them, and triggering methods using jQuery syntax.

LANGUAGE: javascript
CODE:
// to enable tooltips with the default configuration
$('[data-bs-toggle="tooltip"]').tooltip()

// to initialize tooltips with given configuration
$('[data-bs-toggle="tooltip"]').tooltip({
  boundary: 'clippingParents',
  customClass: 'myClass'
})

// to trigger the `show` method
$('#myTooltip').tooltip('show')

----------------------------------------

TITLE: Floating Labels with Input Groups in HTML
DESCRIPTION: Demonstrates how to combine floating labels with input groups in Bootstrap, including handling form validation feedback.

LANGUAGE: HTML
CODE:
<div class="input-group has-validation">
  <span class="input-group-text">@</span>
  <div class="form-floating is-invalid">
    <input type="text" class="form-control is-invalid" id="floatingInputGroup2" placeholder="Username" required>
    <label for="floatingInputGroup2">Username</label>
  </div>
  <div class="invalid-feedback">
    Please choose a username.
  </div>
</div>

----------------------------------------

TITLE: Basic Pagination Implementation in Bootstrap
DESCRIPTION: Basic pagination navigation with previous/next links and numbered pages. Uses nav element with ARIA labels for accessibility.

LANGUAGE: html
CODE:
<nav aria-label="Page navigation example">
  <ul class="pagination">
    <li class="page-item"><a class="page-link" href="#">Previous</a></li>
    <li class="page-item"><a class="page-link" href="#">1</a></li>
    <li class="page-item"><a class="page-link" href="#">2</a></li>
    <li class="page-item"><a class="page-link" href="#">3</a></li>
    <li class="page-item"><a class="page-link" href="#">Next</a></li>
  </ul>
</nav>

----------------------------------------

TITLE: Split Button Dropdown HTML
DESCRIPTION: Implementation of a split button dropdown with separate action and toggle buttons.

LANGUAGE: html
CODE:
<div class="btn-group">
  <button type="button" class="btn btn-danger">Danger</button>
  <button type="button" class="btn btn-danger dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
    <span class="visually-hidden">Toggle Dropdown</span>
  </button>
  <ul class="dropdown-menu">
    <li><a class="dropdown-item" href="#">Action</a></li>
    <li><a class="dropdown-item" href="#">Another action</a></li>
    <li><a class="dropdown-item" href="#">Something else here</a></li>
    <li><hr class="dropdown-divider"></li>
    <li><a class="dropdown-item" href="#">Separated link</a></li>
  </ul>
</div>

----------------------------------------

TITLE: Implementing Bootstrap Opacity Classes in HTML
DESCRIPTION: Example showing how to apply Bootstrap opacity utility classes to create elements with different transparency levels. Classes range from opacity-0 (fully transparent) to opacity-100 (fully opaque).

LANGUAGE: html
CODE:
<div class="opacity-100">...</div>
<div class="opacity-75">...</div>
<div class="opacity-50">...</div>
<div class="opacity-25">...</div>
<div class="opacity-0">...</div>

----------------------------------------

TITLE: Configuring Accordion CSS Variables
DESCRIPTION: CSS variables used for real-time customization of accordion styling.

LANGUAGE: SCSS
CODE:
--#{$prefix}accordion-color: #{$accordion-color};
--#{$prefix}accordion-bg: #{$accordion-bg};
--#{$prefix}accordion-transition: #{$accordion-transition};
--#{$prefix}accordion-border-color: #{$accordion-border-color};
--#{$prefix}accordion-border-width: #{$accordion-border-width};
--#{$prefix}accordion-border-radius: #{$accordion-border-radius};
--#{$prefix}accordion-inner-border-radius: #{$accordion-inner-border-radius};

----------------------------------------

TITLE: Customizing Gutter Sizes in Bootstrap SCSS
DESCRIPTION: Shows how to customize gutter sizes by modifying the $gutters Sass map, which is inherited from the $spacers map. This allows for fine-tuning of gutter widths across the grid system.

LANGUAGE: scss
CODE:
$grid-gutter-width: 1.5rem;
$gutters: (
  0: 0,
  1: $spacer * .25,
  2: $spacer * .5,
  3: $spacer,
  4: $spacer * 1.5,
  5: $spacer * 3,
);

----------------------------------------

TITLE: Basic Bootstrap Progress Bar Implementation
DESCRIPTION: Basic implementation of Bootstrap progress bars showing different percentage completions using the new v5.3.0 markup structure with proper ARIA attributes.

LANGUAGE: HTML
CODE:
<div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar" style="width: 0%"></div>
</div>

----------------------------------------

TITLE: Applying Position Values in HTML
DESCRIPTION: Demonstrates the usage of quick positioning classes in HTML. These classes are not responsive but provide a simple way to set an element's position.

LANGUAGE: html
CODE:
<div class="position-static">...</div>
<div class="position-relative">...</div>
<div class="position-absolute">...</div>
<div class="position-fixed">...</div>
<div class="position-sticky">...</div>

----------------------------------------

TITLE: Creating Flex Containers with Bootstrap Classes
DESCRIPTION: Demonstrates how to create flex containers using Bootstrap's display utility classes.

LANGUAGE: HTML
CODE:
<div class="d-flex p-2">I'm a flexbox container!</div>

LANGUAGE: HTML
CODE:
<div class="d-inline-flex p-2">I'm an inline flexbox container!</div>

----------------------------------------

TITLE: Vertically Centered Modal in HTML
DESCRIPTION: Demonstrates how to create a vertically centered modal using the 'modal-dialog-centered' class.

LANGUAGE: HTML
CODE:
<div class="modal-dialog modal-dialog-centered">
  ...
</div>

----------------------------------------

TITLE: Implementing Default Custom Select in Bootstrap
DESCRIPTION: Demonstrates how to create a basic custom select menu using Bootstrap's .form-select class. This example shows a default select with options.

LANGUAGE: HTML
CODE:
<select class="form-select" aria-label="Default select example">
  <option selected>Open this select menu</option>
  <option value="1">One</option>
  <option value="2">Two</option>
  <option value="3">Three</option>
</select>

----------------------------------------

TITLE: Floating Label Select Implementation in HTML
DESCRIPTION: Demonstrates how to create a floating label select input using Bootstrap classes. Works similarly to other inputs but always shows the label in its floated state.

LANGUAGE: HTML
CODE:
<div class="form-floating">
  <select class="form-select" id="floatingSelect" aria-label="Floating label select example">
    <option selected>Open this select menu</option>
    <option value="1">One</option>
    <option value="2">Two</option>
    <option value="3">Three</option>
  </select>
  <label for="floatingSelect">Works with selects</label>
</div>

----------------------------------------

TITLE: Creating a Basic Popover with HTML
DESCRIPTION: Shows how to create a button that triggers a popover using Bootstrap's data attributes.

LANGUAGE: html
CODE:
<button type="button" class="btn btn-lg btn-danger" data-bs-toggle="popover" data-bs-title="Popover title" data-bs-content="And here's some amazing content. It's very engaging. Right?">Click to toggle popover</button>

----------------------------------------

TITLE: Installing Bootstrap via yarn
DESCRIPTION: Command to install Bootstrap using yarn package manager

LANGUAGE: sh
CODE:
yarn add bootstrap@{{< param "current_version" >}}

----------------------------------------

TITLE: JavaScript for Color Mode Toggling
DESCRIPTION: This JavaScript code allows users to toggle between color modes, initially deferring to the system color mode but providing an option to override it.

LANGUAGE: javascript
CODE:
(() => {
  'use strict'

  const getStoredTheme = () => localStorage.getItem('theme')
  const setStoredTheme = theme => localStorage.setItem('theme', theme)

  const getPreferredTheme = () => {
    const storedTheme = getStoredTheme()
    if (storedTheme) {
      return storedTheme
    }

    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
  }

  const setTheme = theme => {
    if (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      document.documentElement.setAttribute('data-bs-theme', 'dark')
    } else {
      document.documentElement.setAttribute('data-bs-theme', theme)
    }
  }

  setTheme(getPreferredTheme())

  const showActiveTheme = (theme, focus = false) => {
    const themeSwitcher = document.querySelector('#bd-theme')

    if (!themeSwitcher) {
      return
    }

    const themeSwitcherText = document.querySelector('#bd-theme-text')
    const activeThemeIcon = document.querySelector('.theme-icon-active use')
    const btnToActive = document.querySelector(`[data-bs-theme-value="${theme}"]`)
    const svgOfActiveBtn = btnToActive.querySelector('svg use').getAttribute('href')

    document.querySelectorAll('[data-bs-theme-value]').forEach(element => {
      element.classList.remove('active')
      element.setAttribute('aria-pressed', 'false')
    })

    btnToActive.classList.add('active')
    btnToActive.setAttribute('aria-pressed', 'true')
    activeThemeIcon.setAttribute('href', svgOfActiveBtn)
    const themeSwitcherLabel = `${themeSwitcherText.textContent} (${btnToActive.dataset.bsThemeValue})`
    themeSwitcher.setAttribute('aria-label', themeSwitcherLabel)

    if (focus) {
      themeSwitcher.focus()
    }
  }

  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    const storedTheme = getStoredTheme()
    if (storedTheme !== 'light' && storedTheme !== 'dark') {
      setTheme(getPreferredTheme())
    }
  })

  window.addEventListener('DOMContentLoaded', () => {
    showActiveTheme(getPreferredTheme())

    document.querySelectorAll('[data-bs-theme-value]')
      .forEach(toggle => {
        toggle.addEventListener('click', () => {
          const theme = toggle.getAttribute('data-bs-theme-value')
          setStoredTheme(theme)
          setTheme(theme)
          showActiveTheme(theme, true)
        })
      })
  })
})()

----------------------------------------

TITLE: Justifying Content in Flex Containers
DESCRIPTION: Demonstrates how to align flex items along the main axis using Bootstrap's justify-content utility classes.

LANGUAGE: HTML
CODE:
<div class="d-flex justify-content-start">...</div>
<div class="d-flex justify-content-end">...</div>
<div class="d-flex justify-content-center">...</div>
<div class="d-flex justify-content-between">...</div>
<div class="d-flex justify-content-around">...</div>
<div class="d-flex justify-content-evenly">...</div>

----------------------------------------

TITLE: Basic Tooltip HTML Structure
DESCRIPTION: Example HTML markup showing required attributes for basic tooltip implementation.

LANGUAGE: html
CODE:
<button type="button" class="btn btn-secondary" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Tooltip on top">
  Tooltip on top
</button>

----------------------------------------

TITLE: Defining Background Color CSS Classes
DESCRIPTION: This CSS snippet defines the structure of a background color utility class in Bootstrap, using CSS variables for color and opacity.

LANGUAGE: css
CODE:
.bg-success {
  --bs-bg-opacity: 1;
  background-color: rgba(var(--bs-success-rgb), var(--bs-bg-opacity)) !important;
}

----------------------------------------

TITLE: Handling Asynchronous Transitions in Bootstrap
DESCRIPTION: Shows how to properly handle asynchronous transitions in Bootstrap components. This example demonstrates listening for the completion of a collapse transition and the correct way to chain carousel slide transitions.

LANGUAGE: javascript
CODE:
const myCollapseEl = document.querySelector('#myCollapse')

myCollapseEl.addEventListener('shown.bs.collapse', event => {
  // Action to execute once the collapsible area is expanded
})

const myCarouselEl = document.querySelector('#myCarousel')
const carousel = bootstrap.Carousel.getInstance(myCarouselEl) // Retrieve a Carousel instance

myCarouselEl.addEventListener('slid.bs.carousel', event => {
  carousel.to('2') // Will slide to the slide 2 as soon as the transition to slide 1 is finished
})

carousel.to('1') // Will start sliding to the slide 1 and returns to the caller
carousel.to('2') // !! Will be ignored, as the transition to the slide 1 is not finished !!

----------------------------------------

TITLE: Implementing Vertical Gutters in Bootstrap Grid
DESCRIPTION: Shows how to use .gy-* classes to control vertical gutter widths within a row when columns wrap to new lines. Includes an example with overflow handling.

LANGUAGE: html
CODE:
<div class="container overflow-hidden text-center">
  <div class="row gy-5">
    <div class="col-6">
      <div class="p-3">Custom column padding</div>
    </div>
    <div class="col-6">
      <div class="p-3">Custom column padding</div>
    </div>
    <div class="col-6">
      <div class="p-3">Custom column padding</div>
    </div>
    <div class="col-6">
      <div class="p-3">Custom column padding</div>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Advanced Link Utilities in Bootstrap
DESCRIPTION: Shows how to combine colored links with Bootstrap's link utilities for customizing offset, underline opacity, and hover effects.

LANGUAGE: html
CODE:
<p><a href="#" class="link-primary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Primary link</a></p>
<p><a href="#" class="link-secondary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Secondary link</a></p>
<p><a href="#" class="link-success link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Success link</a></p>
<p><a href="#" class="link-danger link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Danger link</a></p>
<p><a href="#" class="link-warning link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Warning link</a></p>
<p><a href="#" class="link-info link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Info link</a></p>
<p><a href="#" class="link-light link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Light link</a></p>
<p><a href="#" class="link-dark link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">Dark link</a></p>
<p><a href="#" class="link-body-emphasis link-offset-2 link-underline-opacity-25 link-underline-opacity-75-hover">Emphasis link</a></p>

----------------------------------------

TITLE: Card with Header and Footer in HTML
DESCRIPTION: Shows how to add a header and footer to a card, along with body content.

LANGUAGE: HTML
CODE:
<div class="card">
  <div class="card-header">
    Featured
  </div>
  <div class="card-body">
    <h5 class="card-title">Special title treatment</h5>
    <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
    <a href="#" class="btn btn-primary">Go somewhere</a>
  </div>
</div>

----------------------------------------

TITLE: Offcanvas Event Handling Example
DESCRIPTION: Example showing how to listen for offcanvas events

LANGUAGE: javascript
CODE:
const myOffcanvas = document.getElementById('myOffcanvas')
myOffcanvas.addEventListener('hidden.bs.offcanvas', event => {
  // do something...
})

----------------------------------------

TITLE: Initializing Scrollspy via JavaScript
DESCRIPTION: This snippet shows how to initialize Scrollspy using JavaScript. It creates a new ScrollSpy instance on the body element, targeting a specific navbar.

LANGUAGE: javascript
CODE:
const scrollSpy = new bootstrap.ScrollSpy(document.body, {
  target: '#navbar-example'
})

----------------------------------------

TITLE: Demonstrating Horizontal Alignment in Bootstrap Columns
DESCRIPTION: This example illustrates how to use justify-content-* classes to horizontally align columns within a row. It shows various alignment options including start, center, end, around, between, and evenly.

LANGUAGE: HTML
CODE:
<div class="container text-center">
  <div class="row justify-content-start">
    <div class="col-4">
      One of two columns
    </div>
    <div class="col-4">
      One of two columns
    </div>
  </div>
  <!-- More rows with different justification classes -->
</div>

----------------------------------------

TITLE: Implementing Navbar Scrollspy in HTML
DESCRIPTION: This snippet demonstrates how to implement a basic navbar with Scrollspy functionality. It includes a navbar with dropdown menu and a scrollable content area with corresponding sections.

LANGUAGE: html
CODE:
<nav id="navbar-example2" class="navbar bg-body-tertiary px-3 mb-3">
  <a class="navbar-brand" href="#">Navbar</a>
  <ul class="nav nav-pills">
    <li class="nav-item">
      <a class="nav-link" href="#scrollspyHeading1">First</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" href="#scrollspyHeading2">Second</a>
    </li>
    <li class="nav-item dropdown">
      <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false">Dropdown</a>
      <ul class="dropdown-menu">
        <li><a class="dropdown-item" href="#scrollspyHeading3">Third</a></li>
        <li><a class="dropdown-item" href="#scrollspyHeading4">Fourth</a></li>
        <li><hr class="dropdown-divider"></li>
        <li><a class="dropdown-item" href="#scrollspyHeading5">Fifth</a></li>
      </ul>
    </li>
  </ul>
</nav>
<div data-bs-spy="scroll" data-bs-target="#navbar-example2" data-bs-root-margin="0px 0px -40%" data-bs-smooth-scroll="true" class="scrollspy-example bg-body-tertiary p-3 rounded-2" tabindex="0">
  <h4 id="scrollspyHeading1">First heading</h4>
  <p>...</p>
  <h4 id="scrollspyHeading2">Second heading</h4>
  <p>...</p>
  <h4 id="scrollspyHeading3">Third heading</h4>
  <p>...</p>
  <h4 id="scrollspyHeading4">Fourth heading</h4>
  <p>...</p>
  <h4 id="scrollspyHeading5">Fifth heading</h4>
  <p>...</p>
</div>

----------------------------------------

TITLE: Applying Clearfix in HTML with Bootstrap
DESCRIPTION: Demonstrates how to apply the clearfix utility class to a parent element in HTML to clear floated content.

LANGUAGE: html
CODE:
<div class="clearfix">...</div>

----------------------------------------

TITLE: Initializing Bootstrap Alerts with JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Bootstrap alert elements using JavaScript. It selects all elements with the 'alert' class and creates an array of Alert instances.

LANGUAGE: javascript
CODE:
const alertList = document.querySelectorAll('.alert')
const alerts = [...alertList].map(element => new bootstrap.Alert(element))

----------------------------------------

TITLE: Creating and Closing Bootstrap Alerts
DESCRIPTION: This code shows how to create a Bootstrap Alert instance and use the 'close' method to dismiss the alert programmatically.

LANGUAGE: javascript
CODE:
const bsAlert = new bootstrap.Alert('#myAlert')

// Basic usage:
const alert = bootstrap.Alert.getOrCreateInstance('#myAlert')
alert.close()

----------------------------------------

TITLE: Custom Class Name Utility Example
DESCRIPTION: Demonstrates how to customize class names for utilities using the class option

LANGUAGE: scss
CODE:
$utilities: (
  "opacity": (
    property: opacity,
    class: o,
    values: (
      0: 0,
      25: .25,
      50: .5,
      75: .75,
      100: 1,
    )
  )
);

----------------------------------------

TITLE: Creating Disabled Buttons in HTML
DESCRIPTION: Shows how to create disabled buttons using the disabled attribute or class.

LANGUAGE: HTML
CODE:
<button type="button" class="btn btn-primary" disabled>Primary button</button>
<button type="button" class="btn btn-secondary" disabled>Button</button>
<button type="button" class="btn btn-outline-primary" disabled>Primary button</button>
<button type="button" class="btn btn-outline-secondary" disabled>Button</button>

LANGUAGE: HTML
CODE:
<a class="btn btn-primary disabled" role="button" aria-disabled="true">Primary link</a>
<a class="btn btn-secondary disabled" role="button" aria-disabled="true">Link</a>

----------------------------------------

TITLE: Responsive Sticky Bottom Position in Bootstrap
DESCRIPTION: Shows how to implement responsive sticky positioning at the bottom of the viewport using Bootstrap's breakpoint-specific classes. Includes variations for small, medium, large, extra-large, and extra-extra-large viewports.

LANGUAGE: html
CODE:
<div class="sticky-sm-bottom">Stick to the bottom on viewports sized SM (small) or wider</div>
<div class="sticky-md-bottom">Stick to the bottom on viewports sized MD (medium) or wider</div>
<div class="sticky-lg-bottom">Stick to the bottom on viewports sized LG (large) or wider</div>
<div class="sticky-xl-bottom">Stick to the bottom on viewports sized XL (extra-large) or wider</div>
<div class="sticky-xxl-bottom">Stick to the bottom on viewports sized XXL (extra-extra-large) or wider</div>

----------------------------------------

TITLE: Basic Bootstrap Checkbox Implementation
DESCRIPTION: Example of standard Bootstrap checkboxes using form-check classes with default and checked states.

LANGUAGE: HTML
CODE:
<div class="form-check">
  <input class="form-check-input" type="checkbox" value="" id="checkDefault">
  <label class="form-check-label" for="checkDefault">
    Default checkbox
  </label>
</div>
<div class="form-check">
  <input class="form-check-input" type="checkbox" value="" id="checkChecked" checked>
  <label class="form-check-label" for="checkChecked">
    Checked checkbox
  </label>
</div>

----------------------------------------

TITLE: Displaying Inline Elements with Bootstrap Classes
DESCRIPTION: This snippet demonstrates how to use Bootstrap classes to display elements inline with background colors.

LANGUAGE: HTML
CODE:
<div class="d-inline p-2 text-bg-primary">d-inline</div>
<div class="d-inline p-2 text-bg-dark">d-inline</div>

----------------------------------------

TITLE: Implementing List Group JavaScript Behavior
DESCRIPTION: Shows how to use JavaScript to create tabbable panes within a list group for dynamic content switching.

LANGUAGE: JavaScript
CODE:
const triggerTabList = document.querySelectorAll('#myTab a')
triggerTabList.forEach(triggerEl => {
  const tabTrigger = new bootstrap.Tab(triggerEl)

  triggerEl.addEventListener('click', event => {
    event.preventDefault()
    tabTrigger.show()
  })
})

----------------------------------------

TITLE: Implementing Checkbox Button Group in HTML with Bootstrap
DESCRIPTION: Demonstrates how to create a button group with checkbox-like behavior using Bootstrap classes and input elements. Each checkbox is hidden and associated with a label styled as a button.

LANGUAGE: HTML
CODE:
<div class="btn-group" role="group" aria-label="Basic checkbox toggle button group">
  <input type="checkbox" class="btn-check" id="btncheck1" autocomplete="off">
  <label class="btn btn-outline-primary" for="btncheck1">Checkbox 1</label>

  <input type="checkbox" class="btn-check" id="btncheck2" autocomplete="off">
  <label class="btn btn-outline-primary" for="btncheck2">Checkbox 2</label>

  <input type="checkbox" class="btn-check" id="btncheck3" autocomplete="off">
  <label class="btn btn-outline-primary" for="btncheck3">Checkbox 3</label>
</div>

----------------------------------------

TITLE: Setting Flex Direction with Bootstrap Classes
DESCRIPTION: Shows how to control the direction of flex items using Bootstrap's flex direction utility classes.

LANGUAGE: HTML
CODE:
<div class="d-flex flex-row mb-3">
  <div class="p-2">Flex item 1</div>
  <div class="p-2">Flex item 2</div>
  <div class="p-2">Flex item 3</div>
</div>
<div class="d-flex flex-row-reverse">
  <div class="p-2">Flex item 1</div>
  <div class="p-2">Flex item 2</div>
  <div class="p-2">Flex item 3</div>
</div>

----------------------------------------

TITLE: Horizontal Centering Example in HTML
DESCRIPTION: Example showing how to center block-level content horizontally using the mx-auto utility class with a specific width.

LANGUAGE: html
CODE:
<div class="mx-auto p-2" style="width: 200px;">
  Centered element
</div>

----------------------------------------

TITLE: Implementing Multiple Select in Bootstrap
DESCRIPTION: Demonstrates how to create a multiple select menu using Bootstrap's form-select class and the multiple attribute. This allows users to select multiple options.

LANGUAGE: HTML
CODE:
<select class="form-select" multiple aria-label="Multiple select example">
  <option selected>Open this select menu</option>
  <option value="1">One</option>
  <option value="2">Two</option>
  <option value="3">Three</option>
</select>

----------------------------------------

TITLE: Creating Custom Bootstrap Callout Component - HTML
DESCRIPTION: Basic HTML structure for a custom callout component that follows Bootstrap's base-modifier pattern.

LANGUAGE: html
CODE:
<div class="callout">...</div>

----------------------------------------

TITLE: Link Opacity Examples in HTML
DESCRIPTION: Demonstrates the usage of Bootstrap classes for adjusting link opacity with static and hover states.

LANGUAGE: HTML
CODE:
<p><a class="link-opacity-10" href="#">Link opacity 10</a></p>
<p><a class="link-opacity-25" href="#">Link opacity 25</a></p>
<p><a class="link-opacity-50" href="#">Link opacity 50</a></p>
<p><a class="link-opacity-75" href="#">Link opacity 75</a></p>
<p><a class="link-opacity-100" href="#">Link opacity 100</a></p>

----------------------------------------

TITLE: Basic Bootstrap Table Structure
DESCRIPTION: Demonstrates the most basic table markup using Bootstrap's .table class.

LANGUAGE: HTML
CODE:
<table class="table">
  <thead>
    <tr>
      <th scope="col">#</th>
      <th scope="col">First</th>
      <th scope="col">Last</th>
      <th scope="col">Handle</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row">1</th>
      <td>Mark</td>
      <td>Otto</td>
      <td>@mdo</td>
    </tr>
    <!-- More rows... -->
  </tbody>
</table>

----------------------------------------

TITLE: Implementing Active and Disabled List Items
DESCRIPTION: Shows how to add active and disabled states to list group items using Bootstrap classes.

LANGUAGE: HTML
CODE:
<ul class="list-group">
  <li class="list-group-item active" aria-current="true">An active item</li>
  <li class="list-group-item">A second item</li>
  <li class="list-group-item">A third item</li>
  <li class="list-group-item">A fourth item</li>
  <li class="list-group-item disabled" aria-disabled="true">A disabled item</li>
</ul>

----------------------------------------

TITLE: Implementing Form Grid Layout in Bootstrap
DESCRIPTION: Shows how to create a two-column form layout using Bootstrap's grid system classes.

LANGUAGE: HTML
CODE:
<div class="row">
  <div class="col">
    <input type="text" class="form-control" placeholder="First name" aria-label="First name">
  </div>
  <div class="col">
    <input type="text" class="form-control" placeholder="Last name" aria-label="Last name">
  </div>
</div>

----------------------------------------

TITLE: Generating Dynamic robots.txt with Hugo for Bootstrap Project
DESCRIPTION: This snippet uses Hugo templating to create a robots.txt file. It checks if the site is on Netlify and in production to determine whether to allow or disallow crawling. The sitemap URL is also included.

LANGUAGE: Hugo Template
CODE:
# www.robotstxt.org

{{- $isNetlify := eq (getenv "NETLIFY") "true" -}}
{{- $allowCrawling := and (not $isNetlify) hugo.IsProduction -}}

{{ if $allowCrawling }}
# Allow crawling of all content
{{- end }}
User-agent: *
Disallow:{{ if not $allowCrawling }} /{{ end }}
Sitemap: {{ "/sitemap.xml" | absURL }}

----------------------------------------

TITLE: Implementing Horizontal Form Layout in Bootstrap
DESCRIPTION: Shows how to create a horizontal form layout using Bootstrap's grid and form classes.

LANGUAGE: HTML
CODE:
<form>
  <div class="row mb-3">
    <label for="inputEmail3" class="col-sm-2 col-form-label">Email</label>
    <div class="col-sm-10">
      <input type="email" class="form-control" id="inputEmail3">
    </div>
  </div>
  <!-- More form fields -->
  <button type="submit" class="btn btn-primary">Sign in</button>
</form>

----------------------------------------

TITLE: Creating Horizontal Stack Layout in Bootstrap
DESCRIPTION: This snippet shows how to create a horizontal stack layout using the .hstack class. It includes three horizontally stacked items with gap utility for spacing.

LANGUAGE: html
CODE:
<div class="hstack gap-3">
  <div class="p-2">First item</div>
  <div class="p-2">Second item</div>
  <div class="p-2">Third item</div>
</div>

----------------------------------------

TITLE: Implementing Segmented Buttons in Input Groups with Bootstrap
DESCRIPTION: Demonstrates how to create input groups with segmented buttons using Bootstrap classes and data attributes.

LANGUAGE: HTML
CODE:
<div class="input-group mb-3">
  <button type="button" class="btn btn-outline-secondary">Action</button>
  <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
    <span class="visually-hidden">Toggle Dropdown</span>
  </button>
  <ul class="dropdown-menu">
    <li><a class="dropdown-item" href="#">Action</a></li>
    <li><a class="dropdown-item" href="#">Another action</a></li>
    <li><a class="dropdown-item" href="#">Something else here</a></li>
    <li><hr class="dropdown-divider"></li>
    <li><a class="dropdown-item" href="#">Separated link</a></li>
  </ul>
  <input type="text" class="form-control" aria-label="Text input with segmented dropdown button">
</div>

----------------------------------------

TITLE: Custom Divider Breadcrumb Example
DESCRIPTION: Shows how to customize breadcrumb dividers using CSS custom properties with a '>' symbol.

LANGUAGE: html
CODE:
<nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="#">Home</a></li>
    <li class="breadcrumb-item active" aria-current="page">Library</li>
  </ol>
</nav>

----------------------------------------

TITLE: Arranging Elements with Edge Positioning in HTML
DESCRIPTION: Shows how to use edge positioning utilities to arrange elements. The format is {property}-{position}, where property is top, start, bottom, or end, and position is 0, 50, or 100.

LANGUAGE: html
CODE:
<div class="position-relative">
  <div class="position-absolute top-0 start-0"></div>
  <div class="position-absolute top-0 end-0"></div>
  <div class="position-absolute top-50 start-50"></div>
  <div class="position-absolute bottom-50 end-50"></div>
  <div class="position-absolute bottom-0 start-0"></div>
  <div class="position-absolute bottom-0 end-0"></div>
</div>

----------------------------------------

TITLE: Creating a Basic Close Button in HTML
DESCRIPTION: This snippet demonstrates how to create a basic close button using Bootstrap's .btn-close class. It includes an aria-label for accessibility.

LANGUAGE: html
CODE:
<button type="button" class="btn-close" aria-label="Close"></button>

----------------------------------------

TITLE: Demonstrating Object Fit Classes in HTML
DESCRIPTION: This snippet shows how to apply different object-fit classes to placeholder images, demonstrating various resizing behaviors.

LANGUAGE: html
CODE:
{{< placeholder width="140" height="120" class="object-fit-contain border rounded" text="Object fit contain" markup="img" color="#868e96" background="#dee2e6" >}}
{{< placeholder width="140" height="120" class="object-fit-cover border rounded" text="Object fit cover" markup="img" color="#868e96" background="#dee2e6" >}}
{{< placeholder width="140" height="120" class="object-fit-fill border rounded" text="Object fit fill" markup="img" color="#868e96" background="#dee2e6" >}}
{{< placeholder width="140" height="120" class="object-fit-scale border rounded" text="Object fit scale down" markup="img" color="#868e96" background="#dee2e6" >}}
{{< placeholder width="140" height="120" class="object-fit-none border rounded" text="Object fit none" markup="img" color="#868e96" background="#dee2e6" >}}

----------------------------------------

TITLE: Text Alignment Examples in HTML
DESCRIPTION: Demonstrates responsive text alignment classes for start, center, and end alignment across different viewport sizes.

LANGUAGE: html
CODE:
<p class="text-start">Start aligned text on all viewport sizes.</p>
<p class="text-center">Center aligned text on all viewport sizes.</p>
<p class="text-end">End aligned text on all viewport sizes.</p>

<p class="text-sm-end">End aligned text on viewports sized SM (small) or wider.</p>
<p class="text-md-end">End aligned text on viewports sized MD (medium) or wider.</p>
<p class="text-lg-end">End aligned text on viewports sized LG (large) or wider.</p>
<p class="text-xl-end">End aligned text on viewports sized XL (extra large) or wider.</p>
<p class="text-xxl-end">End aligned text on viewports sized XXL (extra extra large) or wider.</p>

----------------------------------------

TITLE: SCSS for Bootstrap Stacks
DESCRIPTION: This SCSS code defines the styles for .vstack and .hstack classes used in Bootstrap's stack utilities.

LANGUAGE: scss
CODE:
.vstack {
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
  align-self: stretch;
}

.hstack {
  display: flex;
  flex-direction: row;
  align-items: center;
  align-self: stretch;
}

----------------------------------------

TITLE: Creating Basic Range Input with Bootstrap
DESCRIPTION: Demonstrates how to create a basic range input using Bootstrap's form-range class. This example includes a label and the custom styled range input.

LANGUAGE: html
CODE:
<label for="customRange1" class="form-label">Example range</label>
<input type="range" class="form-range" id="customRange1">

----------------------------------------

TITLE: Displaying Various Aspect Ratios in HTML
DESCRIPTION: This example shows how to use different aspect ratio classes provided by Bootstrap, including 1:1, 4:3, 16:9, and 21:9.

LANGUAGE: html
CODE:
<div class="ratio ratio-1x1">
  <div>1x1</div>
</div>
<div class="ratio ratio-4x3">
  <div>4x3</div>
</div>
<div class="ratio ratio-16x9">
  <div>16x9</div>
</div>
<div class="ratio ratio-21x9">
  <div>21x9</div>
</div>

----------------------------------------

TITLE: Implementing Row Columns Gutters in Bootstrap Grid
DESCRIPTION: Shows how to apply gutter classes to row columns, combining responsive row columns with responsive gutter classes for flexible layouts.

LANGUAGE: html
CODE:
<div class="container text-center">
  <div class="row row-cols-2 row-cols-lg-5 g-2 g-lg-3">
    <div class="col">
      <div class="p-3">Row column</div>
    </div>
    <div class="col">
      <div class="p-3">Row column</div>
    </div>
    <div class="col">
      <div class="p-3">Row column</div>
    </div>
    <div class="col">
      <div class="p-3">Row column</div>
    </div>
    <div class="col">
      <div class="p-3">Row column</div>
    </div>
    <div class="col">
      <div class="p-3">Row column</div>
    </div>
    <div class="col">
      <div class="p-3">Row column</div>
    </div>
    <div class="col">
      <div class="p-3">Row column</div>
    </div>
    <div class="col">
      <div class="p-3">Row column</div>
    </div>
    <div class="col">
      <div class="p-3">Row column</div>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Wrapping Flex Items
DESCRIPTION: Shows how to control flex item wrapping using Bootstrap's flex-wrap utility classes.

LANGUAGE: HTML
CODE:
<div class="d-flex flex-nowrap">
  ...
</div>

LANGUAGE: HTML
CODE:
<div class="d-flex flex-wrap">
  ...
</div>

LANGUAGE: HTML
CODE:
<div class="d-flex flex-wrap-reverse">
  ...
</div>

----------------------------------------

TITLE: Customizing Focus Ring Color with CSS Variables
DESCRIPTION: Shows how to modify the focus ring color using CSS variables directly in the HTML.

LANGUAGE: html
CODE:
<a href="#" class="d-inline-flex focus-ring py-1 px-2 text-decoration-none border rounded-2" style="--bs-focus-ring-color: rgba(var(--bs-success-rgb), .25)">
  Green focus ring
</a>

----------------------------------------

TITLE: Creating Custom Popovers with CSS Variables
DESCRIPTION: Shows how to customize the appearance of popovers using CSS variables and a custom class.

LANGUAGE: scss
CODE:
.custom-popover {
  --bs-popover-max-width: 200px;
  --bs-popover-border-color: var(--bd-violet-bg);
  --bs-popover-header-bg: var(--bd-violet-bg);
  --bs-popover-header-color: var(--bs-white);
  --bs-popover-body-padding-x: 1rem;
  --bs-popover-body-padding-y: .5rem;
}

----------------------------------------

TITLE: Demonstrating Shadow Utilities in HTML
DESCRIPTION: This example shows how to apply different shadow classes to div elements, including no shadow, small shadow, regular shadow, and larger shadow. Each div also includes padding, margin, background, and rounded corner classes.

LANGUAGE: html
CODE:
<div class="shadow-none p-3 mb-5 bg-body-tertiary rounded">No shadow</div>
<div class="shadow-sm p-3 mb-5 bg-body-tertiary rounded">Small shadow</div>
<div class="shadow p-3 mb-5 bg-body-tertiary rounded">Regular shadow</div>
<div class="shadow-lg p-3 mb-5 bg-body-tertiary rounded">Larger shadow</div>

----------------------------------------

TITLE: Creating Vertical Button Group in HTML with Bootstrap
DESCRIPTION: Shows how to create a vertical button group using Bootstrap's 'btn-group-vertical' class. This example includes various button types and nested dropdowns with different positioning.

LANGUAGE: HTML
CODE:
<div class="btn-group-vertical" role="group" aria-label="Vertical button group">
  <div class="btn-group" role="group">
    <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
      Dropdown
    </button>
    <ul class="dropdown-menu">
      <li><a class="dropdown-item" href="#">Dropdown link</a></li>
      <li><a class="dropdown-item" href="#">Dropdown link</a></li>
    </ul>
  </div>
  <button type="button" class="btn btn-primary">Button</button>
  <button type="button" class="btn btn-primary">Button</button>
  <div class="btn-group dropstart" role="group">
    <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
      Dropdown
    </button>
    <ul class="dropdown-menu">
      <li><a class="dropdown-item" href="#">Dropdown link</a></li>
      <li><a class="dropdown-item" href="#">Dropdown link</a></li>
    </ul>
  </div>
  <div class="btn-group dropend" role="group">
    <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
      Dropdown
    </button>
    <ul class="dropdown-menu">
      <li><a class="dropdown-item" href="#">Dropdown link</a></li>
      <li><a class="dropdown-item" href="#">Dropdown link</a></li>
    </ul>
  </div>
  <div class="btn-group dropup" role="group">
    <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
      Dropdown
    </button>
    <ul class="dropdown-menu">
      <li><a class="dropdown-item" href="#">Dropdown link</a></li>
      <li><a class="dropdown-item" href="#">Dropdown link</a></li>
    </ul>
  </div>
</div>

----------------------------------------

TITLE: Implementing Inline Form Layout in Bootstrap
DESCRIPTION: Shows how to create an inline form layout using Bootstrap's row-cols-* classes and gutter modifiers.

LANGUAGE: HTML
CODE:
<form class="row row-cols-lg-auto g-3 align-items-center">
  <div class="col-12">
    <label class="visually-hidden" for="inlineFormInputGroupUsername">Username</label>
    <div class="input-group">
      <div class="input-group-text">@</div>
      <input type="text" class="form-control" id="inlineFormInputGroupUsername" placeholder="Username">
    </div>
  </div>
  <!-- More form fields -->
  <div class="col-12">
    <button type="submit" class="btn btn-primary">Submit</button>
  </div>
</form>

----------------------------------------

TITLE: Floating Label Textarea Implementation in HTML
DESCRIPTION: Shows how to create a floating label textarea using Bootstrap classes. Similar structure to input, but uses a textarea element instead.

LANGUAGE: HTML
CODE:
<div class="form-floating">
  <textarea class="form-control" placeholder="Leave a comment here" id="floatingTextarea2" style="height: 100px"></textarea>
  <label for="floatingTextarea2">Comments</label>
</div>

----------------------------------------

TITLE: Implementing Basic Vertical Rule in HTML
DESCRIPTION: This snippet demonstrates how to create a basic vertical rule using the 'vr' class in Bootstrap.

LANGUAGE: html
CODE:
<div class="vr"></div>

----------------------------------------

TITLE: Using Bootstrap Badges with Buttons in HTML
DESCRIPTION: Shows how to incorporate badges into buttons to provide a counter. This example creates a button with a notification count.

LANGUAGE: html
CODE:
<button type="button" class="btn btn-primary">
  Notifications <span class="badge text-bg-secondary">4</span>
</button>

----------------------------------------

TITLE: Custom Color with CSS Variables
DESCRIPTION: Demonstrates how to customize the link color using CSS variables

LANGUAGE: html
CODE:
<a class="icon-link icon-link-hover" style="--bs-link-hover-color-rgb: 25, 135, 84;" href="#">
  Icon link
  <svg class="bi" aria-hidden="true"><use xlink:href="#arrow-right"></use></svg>
</a>

----------------------------------------

TITLE: Practical Example of Clearfix Usage in Bootstrap
DESCRIPTION: Illustrates a practical use case of the clearfix utility to maintain proper layout with floated buttons within a container.

LANGUAGE: html
CODE:
<div class="bg-info clearfix">
  <button type="button" class="btn btn-secondary float-start">Example Button floated left</button>
  <button type="button" class="btn btn-secondary float-end">Example Button floated right</button>
</div>

----------------------------------------

TITLE: Custom Tooltip SCSS Variables
DESCRIPTION: SCSS variables for customizing tooltip appearance using CSS custom properties.

LANGUAGE: scss
CODE:
--#{$prefix}tooltip-max-width: #{$tooltip-max-width};
--#{$prefix}tooltip-padding-x: #{$tooltip-padding-x};
--#{$prefix}tooltip-padding-y: #{$tooltip-padding-y};
--#{$prefix}tooltip-font-family: #{$tooltip-font-family};

----------------------------------------

TITLE: Implementing Basic Focus Ring in HTML
DESCRIPTION: Demonstrates the basic usage of the .focus-ring class on a link element to create a custom focus ring.

LANGUAGE: html
CODE:
<a href="#" class="d-inline-flex focus-ring py-1 px-2 text-decoration-none border rounded-2">
  Custom focus ring
</a>

----------------------------------------

TITLE: Creating Vertical Stack Layout in Bootstrap
DESCRIPTION: This snippet demonstrates how to create a vertical stack layout using the .vstack class. It includes three stacked items with gap utility for spacing.

LANGUAGE: html
CODE:
<div class="vstack gap-3">
  <div class="p-2">First item</div>
  <div class="p-2">Second item</div>
  <div class="p-2">Third item</div>
</div>

----------------------------------------

TITLE: Markdown Icons Template Usage
DESCRIPTION: Template code for rendering icon library listings using markdown and shortcodes. The code includes conditional logic for displaying different types of icon sets.

LANGUAGE: markdown
CODE:
{{< markdown >}}
{{< icons.inline >}}
{{- $type := .Get "type" | default "preferred" -}}

{{- range (index .Site.Data.icons $type) }}
- [{{ .name }}]({{ .website }})
{{- end }}
{{< /icons.inline >}}
{{< /markdown >}}

----------------------------------------

TITLE: Implementing Toggle Buttons with JavaScript
DESCRIPTION: Demonstrates how to create toggle buttons using the Button plugin and data attributes.

LANGUAGE: HTML
CODE:
<button type="button" class="btn" data-bs-toggle="button">Toggle button</button>
<button type="button" class="btn active" data-bs-toggle="button" aria-pressed="true">Active toggle button</button>
<button type="button" class="btn" disabled data-bs-toggle="button">Disabled toggle button</button>

----------------------------------------

TITLE: Customizing Popover Container in JavaScript
DESCRIPTION: Demonstrates how to specify a custom container for a popover to avoid rendering problems in complex components.

LANGUAGE: javascript
CODE:
const popover = new bootstrap.Popover('.example-popover', {
  container: 'body'
})

----------------------------------------

TITLE: Applying Table Variants in Bootstrap
DESCRIPTION: Shows how to apply contextual classes to color tables, rows, or cells.

LANGUAGE: HTML
CODE:
<!-- On tables -->
<table class="table-primary">...</table>
<table class="table-secondary">...</table>
<!-- More variants... -->

<!-- On rows -->
<tr class="table-primary">...</tr>
<tr class="table-secondary">...</tr>
<!-- More variants... -->

<!-- On cells (`td` or `th`) -->
<tr>
  <td class="table-primary">...</td>
  <td class="table-secondary">...</td>
  <!-- More variants... -->
</tr>

----------------------------------------

TITLE: Implementing Input Groups with Multiple Addons in Bootstrap
DESCRIPTION: Shows how to create input groups with multiple addons, including mixed checkbox and radio input versions.

LANGUAGE: HTML
CODE:
<div class="input-group mb-3">
  <span class="input-group-text">$</span>
  <span class="input-group-text">0.00</span>
  <input type="text" class="form-control" aria-label="Dollar amount (with dot and two decimal places)">
</div>

<div class="input-group">
  <input type="text" class="form-control" aria-label="Dollar amount (with dot and two decimal places)">
  <span class="input-group-text">$</span>
  <span class="input-group-text">0.00</span>
</div>

----------------------------------------

TITLE: RTL Starter Template for Bootstrap
DESCRIPTION: This is a modified RTL starter template for Bootstrap, demonstrating the required HTML structure and CSS inclusion for RTL support.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="ar" dir="rtl">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="{{< param "cdn.css_rtl" >}}" integrity="{{< param "cdn.css_rtl_hash" >}}" crossorigin="anonymous">

    <title>مرحبًا بالعالم!</title>
  </head>
  <body>
    <h1>مرحبًا بالعالم!</h1>

    <!-- Optional JavaScript; choose one of the two! -->

    <!-- Option 1: Bootstrap Bundle with Popper -->
    <script src="{{< param "cdn.js_bundle" >}}" integrity="{{< param "cdn.js_bundle_hash" >}}" crossorigin="anonymous"></script>

    <!-- Option 2: Separate Popper and Bootstrap JS -->
    <!--
    <script src="{{< param "cdn.popper" >}}" integrity="{{< param "cdn.popper_hash" >}}" crossorigin="anonymous"></script>
    <script src="{{< param "cdn.js" >}}" integrity="{{< param "cdn.js_hash" >}}" crossorigin="anonymous"></script>
    -->
  </body>
</html>

----------------------------------------

TITLE: Creating a Disabled Close Button in HTML
DESCRIPTION: This example shows how to create a disabled close button by adding the 'disabled' attribute to the button element.

LANGUAGE: html
CODE:
<button type="button" class="btn-close" disabled aria-label="Close"></button>

----------------------------------------

TITLE: JavaScript Tooltip Instance Creation
DESCRIPTION: Example of creating a tooltip instance programmatically and configuring boundaries.

LANGUAGE: javascript
CODE:
const tooltip = new bootstrap.Tooltip('#example', {
  boundary: document.body // or document.querySelector('#boundary')
})

----------------------------------------

TITLE: Adding Button Addons to Input Groups in Bootstrap
DESCRIPTION: Demonstrates how to add button addons to input groups using Bootstrap classes.

LANGUAGE: HTML
CODE:
<div class="input-group mb-3">
  <button class="btn btn-outline-secondary" type="button" id="button-addon1">Button</button>
  <input type="text" class="form-control" placeholder="" aria-label="Example text with button addon" aria-describedby="button-addon1">
</div>

<div class="input-group mb-3">
  <input type="text" class="form-control" placeholder="Recipient's username" aria-label="Recipient's username" aria-describedby="button-addon2">
  <button class="btn btn-outline-secondary" type="button" id="button-addon2">Button</button>
</div>

----------------------------------------

TITLE: Single Breakpoint Media Query Mixins
DESCRIPTION: Sass mixins for targeting specific breakpoint ranges in Bootstrap.

LANGUAGE: scss
CODE:
@include media-breakpoint-only(xs) { ... }
@include media-breakpoint-only(sm) { ... }
@include media-breakpoint-only(md) { ... }
@include media-breakpoint-only(lg) { ... }
@include media-breakpoint-only(xl) { ... }
@include media-breakpoint-only(xxl) { ... }

----------------------------------------

TITLE: Using Popover Methods in JavaScript
DESCRIPTION: Demonstrates how to use various popover methods, including getInstance, setContent, and show.

LANGUAGE: javascript
CODE:
// getOrCreateInstance example
const popover = bootstrap.Popover.getOrCreateInstance('#example') // Returns a Bootstrap popover instance

// setContent example
popover.setContent({
  '.popover-header': 'another title',
  '.popover-body': 'another content'
})

----------------------------------------

TITLE: Using RFS Font Size Mixin in SCSS
DESCRIPTION: Demonstrates how to use the font-size mixin to create responsive font sizing. The mixin generates calc() functions combining rem and viewport units.

LANGUAGE: scss
CODE:
.title {
  @include font-size(4rem);
}

LANGUAGE: css
CODE:
.title {
  font-size: calc(1.525rem + 3.3vw);
}

@media (min-width: 1200px) {
  .title {
    font-size: 4rem;
  }
}

----------------------------------------

TITLE: Implementing 16:9 Aspect Ratio for YouTube Video Embed in HTML
DESCRIPTION: This snippet demonstrates how to use the Bootstrap ratio helper class to maintain a 16:9 aspect ratio for an embedded YouTube video iframe.

LANGUAGE: html
CODE:
<div class="ratio ratio-16x9">
  <iframe src="https://www.youtube.com/embed/zpOULjyy-n8?rel=0" title="YouTube video" allowfullscreen></iframe>
</div>

----------------------------------------

TITLE: Running Bootstrap Documentation Locally
DESCRIPTION: Steps to run Bootstrap documentation locally, including installing dependencies and starting the local server.

LANGUAGE: shell
CODE:
npm install
npm run test
npm run docs-serve

----------------------------------------

TITLE: Customizing Font Stack for RTL in SCSS
DESCRIPTION: This SCSS snippet shows how to modify the font stack to include Arabic fonts for RTL layouts using RTLCSS directives.

LANGUAGE: scss
CODE:
$font-family-sans-serif:
  Helvetica Neue #{"/* rtl:insert:Arabic */"},
  // Cross-platform generic font family (default user interface font)
  system-ui,
  // Safari for macOS and iOS (San Francisco)
  -apple-system,
  // Chrome < 56 for macOS (San Francisco)
  BlinkMacSystemFont,
  // Windows
  "Segoe UI",
  // Android
  Roboto,
  // Basic web fallback
  Arial,
  // Linux
  "Noto Sans",
  // Sans serif fallback
  sans-serif,
  // Emoji fonts
  "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji" !default;

----------------------------------------

TITLE: Initializing Offcanvas via JavaScript
DESCRIPTION: JavaScript code to manually initialize offcanvas components

LANGUAGE: javascript
CODE:
const offcanvasElementList = document.querySelectorAll('.offcanvas')
const offcanvasList = [...offcanvasElementList].map(offcanvasEl => new bootstrap.Offcanvas(offcanvasEl))

----------------------------------------

TITLE: Responsive Utility Generation
DESCRIPTION: Shows how to create responsive utilities that work across all breakpoints

LANGUAGE: scss
CODE:
$utilities: (
  "opacity": (
    property: opacity,
    responsive: true,
    values: (
      0: 0,
      25: .25,
      50: .5,
      75: .75,
      100: 1,
    )
  )
);

----------------------------------------

TITLE: Demonstrating Height Utilities in Bootstrap HTML
DESCRIPTION: This example illustrates the usage of Bootstrap's height utilities to set element heights relative to their parent container. It showcases 25%, 50%, 75%, 100%, and auto heights.

LANGUAGE: html
CODE:
<div style="height: 100px;">
  <div class="h-25 d-inline-block" style="width: 120px;">Height 25%</div>
  <div class="h-50 d-inline-block" style="width: 120px;">Height 50%</div>
  <div class="h-75 d-inline-block" style="width: 120px;">Height 75%</div>
  <div class="h-100 d-inline-block" style="width: 120px;">Height 100%</div>
  <div class="h-auto d-inline-block" style="width: 120px;">Height auto</div>
</div>

----------------------------------------

TITLE: Creating Actionable List Items with Links and Buttons
DESCRIPTION: Demonstrates how to create clickable list items using <a> and <button> elements with Bootstrap classes.

LANGUAGE: HTML
CODE:
<div class="list-group">
  <a href="#" class="list-group-item list-group-item-action active" aria-current="true">
    The current link item
  </a>
  <a href="#" class="list-group-item list-group-item-action">A second link item</a>
  <a href="#" class="list-group-item list-group-item-action">A third link item</a>
  <a href="#" class="list-group-item list-group-item-action">A fourth link item</a>
  <a class="list-group-item list-group-item-action disabled" aria-disabled="true">A disabled link item</a>
</div>

----------------------------------------

TITLE: Creating Basic Nav Component in HTML
DESCRIPTION: Demonstrates how to create a basic nav component using Bootstrap classes. The nav is built with flexbox and provides a foundation for building navigation components.

LANGUAGE: HTML
CODE:
<ul class="nav">
  <li class="nav-item">
    <a class="nav-link active" aria-current="page" href="#">Active</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" href="#">Link</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" href="#">Link</a>
  </li>
  <li class="nav-item">
    <a class="nav-link disabled" aria-disabled="true">Disabled</a>
  </li>
</ul>

----------------------------------------

TITLE: Implementing Horizontal Overflow Classes in HTML
DESCRIPTION: This code demonstrates the use of overflow-x classes to control horizontal content overflow. These classes are specifically designed to affect the overflow of content horizontally.

LANGUAGE: html
CODE:
<div class="overflow-x-auto">...</div>
<div class="overflow-x-hidden">...</div>
<div class="overflow-x-visible">...</div>
<div class="overflow-x-scroll">...</div>

----------------------------------------

TITLE: Basic Figure Implementation in Bootstrap
DESCRIPTION: Demonstrates the basic usage of Bootstrap's figure component with an image and caption using .figure, .figure-img, and .figure-caption classes.

LANGUAGE: html
CODE:
<figure class="figure">
  {{< placeholder width="400" height="300" class="figure-img img-fluid rounded" >}}
  <figcaption class="figure-caption">A caption for the above image.</figcaption>
</figure>

----------------------------------------

TITLE: Adjusting Border Width with Bootstrap CSS Classes
DESCRIPTION: Shows how to change border width using Bootstrap's border-width utility classes.

LANGUAGE: html
CODE:
<span class="border border-1"></span>
<span class="border border-2"></span>
<span class="border border-3"></span>
<span class="border border-4"></span>
<span class="border border-5"></span>

----------------------------------------

TITLE: Defining Display Utilities in Sass
DESCRIPTION: This snippet shows the Sass code that defines the display utilities in Bootstrap's utilities API.

LANGUAGE: CSS
CODE:
"display": (
  responsive: true,
  print: true,
  property: display,
  class: d,
  values: inline inline-block block grid inline-grid table table-row table-cell flex inline-flex none
)

----------------------------------------

TITLE: Including RTL CSS in HTML
DESCRIPTION: This snippet shows how to include the RTL version of Bootstrap's compiled and minified CSS in an HTML file.

LANGUAGE: html
CODE:
<link rel="stylesheet" href="{{< param "cdn.css_rtl" >}}" integrity="{{< param "cdn.css_rtl_hash" >}}" crossorigin="anonymous">

----------------------------------------

TITLE: Applying Vertical Overflow Classes in HTML
DESCRIPTION: This snippet shows how to use overflow-y classes to manage vertical content overflow. These classes are designed to specifically affect the overflow of content vertically.

LANGUAGE: html
CODE:
<div class="overflow-y-auto">...</div>
<div class="overflow-y-hidden">...</div>
<div class="overflow-y-visible">...</div>
<div class="overflow-y-scroll">...</div>

----------------------------------------

TITLE: Applying Border Radius with Bootstrap CSS Classes
DESCRIPTION: Illustrates how to apply different border radius styles using Bootstrap's utility classes.

LANGUAGE: html
CODE:
<img class="rounded" src="..." alt="...">
<img class="rounded-top" src="..." alt="...">
<img class="rounded-end" src="..." alt="...">
<img class="rounded-bottom" src="..." alt="...">
<img class="rounded-start" src="..." alt="...">
<img class="rounded-circle" src="..." alt="...">
<img class="rounded-pill" src="..." alt="...">

----------------------------------------

TITLE: Configuring Sass Import Stack
DESCRIPTION: Example showing the correct order for importing Bootstrap Sass files including the new _maps.scss file

LANGUAGE: scss
CODE:
// Functions come first
@import "functions";

// Optional variable overrides here
$custom-color: #df711b;
$custom-theme-colors: (
  "custom": $custom-color
);

// Variables come next
@import "variables";

// Optional Sass map overrides here
$theme-colors: map-merge($theme-colors, $custom-theme-colors);

// Followed by our default maps
@import "maps";

// Rest of our imports
@import "mixins";
@import "utilities";
@import "root";
@import "reboot";
// etc

----------------------------------------

TITLE: Min-width Media Query Mixins
DESCRIPTION: Sass mixins for applying styles at minimum viewport widths using Bootstrap's breakpoint system.

LANGUAGE: scss
CODE:
// Source mixins

// No media query necessary for xs breakpoint as it's effectively `@media (min-width: 0) { ... }`
@include media-breakpoint-up(sm) { ... }
@include media-breakpoint-up(md) { ... }
@include media-breakpoint-up(lg) { ... }
@include media-breakpoint-up(xl) { ... }
@include media-breakpoint-up(xxl) { ... }

// Usage

// Example: Hide starting at `min-width: 0`, and then show at the `sm` breakpoint
.custom-class {
  display: none;
}
@include media-breakpoint-up(sm) {
  .custom-class {
    display: block;
  }
}

----------------------------------------

TITLE: Bootstrap Project File Structure
DESCRIPTION: Shows the recommended file structure for a Bootstrap project using npm as package manager.

LANGUAGE: text
CODE:
your-project/
├── scss/
│   └── custom.scss
└── node_modules/
│   └── bootstrap/
│       ├── js/
│       └── scss/
└── index.html

----------------------------------------

TITLE: Bootstrap Opacity Utility Example with Additional Styling
DESCRIPTION: Comprehensive example demonstrating opacity utilities combined with other Bootstrap classes for styling, including background colors, padding, margins, and rounded corners.

LANGUAGE: html
CODE:
<div class="bd-example d-sm-flex">
  <div class="opacity-100 p-3 m-2 bg-primary text-light fw-bold rounded">100%</div>
  <div class="opacity-75 p-3 m-2 bg-primary text-light fw-bold rounded">75%</div>
  <div class="opacity-50 p-3 m-2 bg-primary text-light fw-bold rounded">50%</div>
  <div class="opacity-25 p-3 m-2 bg-primary text-light fw-bold rounded">25%</div>
  <div class="opacity-0 p-3 m-2 bg-primary text-light fw-bold rounded">0%</div>
</div>

----------------------------------------

TITLE: Defining Border CSS Variables in Bootstrap
DESCRIPTION: Shows the CSS variables used for border styling in Bootstrap's root stylesheet.

LANGUAGE: css
CODE:
:root,
[data-bs-theme="light"] {
  --bs-border-color: #dee2e6;
  --bs-border-color-translucent: rgba(0, 0, 0, 0.175);
  --bs-border-width: 1px;
  --bs-border-style: solid;
  --bs-border-radius: 0.375rem;
  --bs-border-radius-sm: 0.25rem;
  --bs-border-radius-lg: 0.5rem;
  --bs-border-radius-xl: 1rem;
  --bs-border-radius-xxl: 2rem;
  --bs-border-radius-2xl: var(--bs-border-radius-xxl);
  --bs-border-radius-pill: 50rem;
}

----------------------------------------

TITLE: Handling Popover Events in JavaScript
DESCRIPTION: Shows how to listen for and handle popover events, such as when a popover is hidden.

LANGUAGE: javascript
CODE:
const myPopoverTrigger = document.getElementById('myPopover')
myPopoverTrigger.addEventListener('hidden.bs.popover', () => {
  // do something...
})

----------------------------------------

TITLE: Implementing Custom Callout Styles - SCSS
DESCRIPTION: SCSS implementation showing base and modifier classes for a custom callout component, demonstrating Bootstrap's component architecture pattern.

LANGUAGE: scss
CODE:
// Base class
.callout {}

// Modifier classes
.callout-info {}
.callout-warning {}
.callout-danger {}

----------------------------------------

TITLE: Configuring Vite Build Tool
DESCRIPTION: Vite configuration file setup with development server settings and build output directory configuration

LANGUAGE: javascript
CODE:
import { resolve } from 'path'

export default {
  root: resolve(__dirname, 'src'),
  build: {
    outDir: '../dist'
  },
  server: {
    port: 8080
  }
}

----------------------------------------

TITLE: Horizontal Stack with Vertical Rule in Bootstrap
DESCRIPTION: This snippet shows a horizontal stack with a vertical rule (vr) between items and auto margin utility applied.

LANGUAGE: html
CODE:
<div class="hstack gap-3">
  <div class="p-2">First item</div>
  <div class="p-2 ms-auto">Second item</div>
  <div class="vr"></div>
  <div class="p-2">Third item</div>
</div>

----------------------------------------

TITLE: CSS Button Component Structure
DESCRIPTION: Shows Bootstrap's approach to component architecture using base classes and modifiers for buttons.

LANGUAGE: CSS
CODE:
.btn { /* Base styles */ 
  display: inline-block;
  padding: 6px 12px;
  border-width: 1px;
}

.btn-primary { /* Modifier styles */
  color: #fff;
  background-color: #007bff;
  border-color: #007bff;
}

----------------------------------------

TITLE: Initializing Modal with JavaScript
DESCRIPTION: Shows how to create a modal instance using JavaScript.

LANGUAGE: JavaScript
CODE:
const myModal = new bootstrap.Modal(document.getElementById('myModal'), options)
// or
const myModalAlternative = new bootstrap.Modal('#myModal', options)

----------------------------------------

TITLE: Installing Dependencies with NPM
DESCRIPTION: Commands to install Parcel bundler, Bootstrap, and Popper.js dependencies

LANGUAGE: sh
CODE:
npm i --save-dev parcel
npm i --save bootstrap @popperjs/core

----------------------------------------

TITLE: Text Wrapping Examples in HTML
DESCRIPTION: Shows how to use text-wrap and text-nowrap classes to control text wrapping behavior.

LANGUAGE: html
CODE:
<div class="badge text-bg-primary text-wrap" style="width: 6rem;">
  This text should wrap.
</div>

<div class="text-nowrap bg-body-secondary border" style="width: 8rem;">
  This text should overflow the parent.
</div>

----------------------------------------

TITLE: Creating HTML Template for Webpack
DESCRIPTION: Basic HTML template that Webpack will use to generate the final HTML file, including Bootstrap classes for demonstration.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap w/ Webpack</title>
  </head>
  <body>
    <div class="container py-4 px-3 mx-auto">
      <h1>Hello, Bootstrap and Webpack!</h1>
      <button class="btn btn-primary">Primary button</button>
    </div>
  </body>
</html>

----------------------------------------

TITLE: Controlling Flex Item Growth and Shrinking
DESCRIPTION: Demonstrates how to control flex item growth and shrinking using Bootstrap's flex-grow and flex-shrink utility classes.

LANGUAGE: HTML
CODE:
<div class="d-flex">
  <div class="p-2 flex-grow-1">Flex item</div>
  <div class="p-2">Flex item</div>
  <div class="p-2">Third flex item</div>
</div>

LANGUAGE: HTML
CODE:
<div class="d-flex">
  <div class="p-2 w-100">Flex item</div>
  <div class="p-2 flex-shrink-1">Flex item</div>
</div>

----------------------------------------

TITLE: Creating Vertical Pills Navigation in HTML
DESCRIPTION: Demonstrates how to create a vertical pills navigation using Bootstrap classes. This example includes both the navigation buttons and the associated content panes.

LANGUAGE: HTML
CODE:
<div class="d-flex align-items-start">
  <div class="nav flex-column nav-pills me-3" id="v-pills-tab" role="tablist" aria-orientation="vertical">
    <button class="nav-link active" id="v-pills-home-tab" data-bs-toggle="pill" data-bs-target="#v-pills-home" type="button" role="tab" aria-controls="v-pills-home" aria-selected="true">Home</button>
    <button class="nav-link" id="v-pills-profile-tab" data-bs-toggle="pill" data-bs-target="#v-pills-profile" type="button" role="tab" aria-controls="v-pills-profile" aria-selected="false">Profile</button>
    <button class="nav-link" id="v-pills-messages-tab" data-bs-toggle="pill" data-bs-target="#v-pills-messages" type="button" role="tab" aria-controls="v-pills-messages" aria-selected="false">Messages</button>
    <button class="nav-link" id="v-pills-settings-tab" data-bs-toggle="pill" data-bs-target="#v-pills-settings" type="button" role="tab" aria-controls="v-pills-settings" aria-selected="false">Settings</button>
  </div>
  <div class="tab-content" id="v-pills-tabContent">
    <div class="tab-pane fade show active" id="v-pills-home" role="tabpanel" aria-labelledby="v-pills-home-tab" tabindex="0">...</div>
    <div class="tab-pane fade" id="v-pills-profile" role="tabpanel" aria-labelledby="v-pills-profile-tab" tabindex="0">...</div>
    <div class="tab-pane fade" id="v-pills-messages" role="tabpanel" aria-labelledby="v-pills-messages-tab" tabindex="0">...</div>
    <div class="tab-pane fade" id="v-pills-settings" role="tabpanel" aria-labelledby="v-pills-settings-tab" tabindex="0">...</div>
  </div>
</div>

----------------------------------------

TITLE: Creating Project Files Structure
DESCRIPTION: Shell commands to create the necessary project directories and files

LANGUAGE: sh
CODE:
mkdir {src,src/js,src/scss}
touch src/index.html src/js/main.js src/scss/styles.scss

----------------------------------------

TITLE: Configuring npm Scripts for Webpack
DESCRIPTION: npm scripts for starting the Webpack development server and building the project for production.

LANGUAGE: json
CODE:
{
  "scripts": {
    "start": "webpack serve",
    "build": "webpack build --mode=production",
    "test": "echo \"Error: no test specified\" && exit 1"
  }
}

----------------------------------------

TITLE: Configuring Shadow Utilities in SCSS
DESCRIPTION: This SCSS snippet shows how shadow utilities are declared in Bootstrap's utilities API. It defines the property, values, and class names for shadow utilities.

LANGUAGE: scss
CODE:
{{< scss-docs name="utils-shadow" file="scss/_utilities.scss" >}}

----------------------------------------

TITLE: Hiding Elements on Different Screen Sizes
DESCRIPTION: This snippet illustrates how to use Bootstrap classes to hide elements on specific screen sizes.

LANGUAGE: HTML
CODE:
<div class="d-lg-none">hide on lg and wider screens</div>
<div class="d-none d-lg-block">hide on screens smaller than lg</div>

----------------------------------------

TITLE: Compiling Sass using CLI
DESCRIPTION: Commands for installing Sass globally and watching/compiling Sass files.

LANGUAGE: shell
CODE:
# Install Sass globally
npm install -g sass

# Watch your custom Sass for changes and compile it to CSS
sass --watch ./scss/custom.scss ./css/custom.css

----------------------------------------

TITLE: Fixed Top Position in Bootstrap
DESCRIPTION: Demonstrates how to position an element fixed at the top of the viewport using Bootstrap's fixed-top class. The element will span the full width of the viewport and remain fixed regardless of scrolling.

LANGUAGE: html
CODE:
<div class="fixed-top">...</div>

----------------------------------------

TITLE: Configuring Webpack Loaders for Bootstrap
DESCRIPTION: Complete Webpack configuration including loaders for processing Sass, CSS, and other necessary configurations for Bootstrap.

LANGUAGE: javascript
CODE:
'use strict'

const path = require('path')
const autoprefixer = require('autoprefixer')
const HtmlWebpackPlugin = require('html-webpack-plugin')

module.exports = {
  mode: 'development',
  entry: './src/js/main.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist')
  },
  devServer: {
    static: path.resolve(__dirname, 'dist'),
    port: 8080,
    hot: true
  },
  plugins: [
    new HtmlWebpackPlugin({ template: './src/index.html' })
  ],
  module: {
    rules: [
      {
        test: /\.(scss)$/,
        use: [
          {
            loader: 'style-loader'
          },
          {
            loader: 'css-loader'
          },
          {
            loader: 'postcss-loader',
            options: {
              postcssOptions: {
                plugins: [
                  autoprefixer
                ]
              }
            }
          },
          {
            loader: 'sass-loader'
          }
        ]
      }
    ]
  }
}

----------------------------------------

TITLE: Implementing Growing Spinner in HTML
DESCRIPTION: Creates a growing spinner as an alternative to the border spinner for indicating loading states.

LANGUAGE: HTML
CODE:
<div class="spinner-grow" role="status">
  <span class="visually-hidden">Loading...</span>
</div>

----------------------------------------

TITLE: Applying Vertical Alignment to Table Cells in HTML
DESCRIPTION: This example shows how to use Bootstrap's vertical alignment classes with table cells. It creates a table with a fixed height and applies different alignment classes to each cell.

LANGUAGE: HTML
CODE:
<table style="height: 100px;">
  <tbody>
    <tr>
      <td class="align-baseline">baseline</td>
      <td class="align-top">top</td>
      <td class="align-middle">middle</td>
      <td class="align-bottom">bottom</td>
      <td class="align-text-top">text-top</td>
      <td class="align-text-bottom">text-bottom</td>
    </tr>
  </tbody>
</table>

----------------------------------------

TITLE: Basic HTML Template with Custom Bootstrap CSS
DESCRIPTION: Example HTML file structure showing how to include compiled custom Bootstrap CSS.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Custom Bootstrap</title>
    <link href="/css/custom.css" rel="stylesheet">
  </head>
  <body>
    <h1>Hello, world!</h1>
  </body>
</html>

----------------------------------------

TITLE: Extracting CSS with mini-css-extract-plugin in Webpack
DESCRIPTION: Webpack configuration changes to extract CSS into a separate file using mini-css-extract-plugin for production optimization.

LANGUAGE: javascript
CODE:
const miniCssExtractPlugin = require('mini-css-extract-plugin')

module.exports = {
  // ...
  plugins: [
    new HtmlWebpackPlugin({ template: './src/index.html' }),
    new miniCssExtractPlugin()
  ],
  module: {
    rules: [
      {
        test: /\.(scss)$/,
        use: [
          {
            loader: miniCssExtractPlugin.loader
          },
          // ... other loaders
        ]
      }
    ]
  }
}

----------------------------------------

TITLE: Creating Custom Color Modes
DESCRIPTION: This example shows how to create a custom 'blue theme' color mode by overriding CSS variables.

LANGUAGE: scss
CODE:
[data-bs-theme="blue"] {
  --bs-body-color: var(--bs-white);
  --bs-body-color-rgb: #{to-rgb($white)};
  --bs-body-bg: var(--bs-blue);
  --bs-body-bg-rgb: #{to-rgb($blue)};
  --bs-tertiary-bg: #{$blue-600};

  .dropdown-menu {
    --bs-dropdown-bg: #{mix($blue-500, $blue-600)};
    --bs-dropdown-link-active-bg: #{$blue-700};
  }

  .btn-secondary {
    --bs-btn-bg: #{mix($gray-600, $blue-400, .5)};
    --bs-btn-border-color: #{rgba($white, .25)};
    --bs-btn-hover-bg: #{darken(mix($gray-600, $blue-400, .5), 5%)};
    --bs-btn-hover-border-color: #{rgba($white, .25)};
    --bs-btn-active-bg: #{darken(mix($gray-600, $blue-400, .5), 10%)};
    --bs-btn-active-border-color: #{rgba($white, .5)};
    --bs-btn-focus-border-color: #{rgba($white, .5)};
    --bs-btn-focus-box-shadow: 0 0 0 .25rem rgba(255, 255, 255, .2);
  }
}

----------------------------------------

TITLE: Customized Grid with CSS Variables
DESCRIPTION: Shows how to customize the grid system using CSS variables to control columns, rows, and gap sizes.

LANGUAGE: html
CODE:
<div class="grid text-center" style="--bs-columns: 4; --bs-gap: 5rem;">
  <div class="g-col-2">.g-col-2</div>
  <div class="g-col-2">.g-col-2</div>
</div>

----------------------------------------

TITLE: Implementing Asynchronous Tests in Bootstrap with Jasmine
DESCRIPTION: Example of an asynchronous unit test for tooltip functionality, demonstrating Promise-based testing and event handling. Shows how to test UI components with animation settings and DOM manipulation.

LANGUAGE: javascript
CODE:
it('should show a tooltip without the animation', () => {
  return new Promise(resolve => {
    fixtureEl.innerHTML = '<a href="#" rel="tooltip" title="Another tooltip"></a>'

    const tooltipEl = fixtureEl.querySelector('a')
    const tooltip = new Tooltip(tooltipEl, {
      animation: false
    })

    tooltipEl.addEventListener('shown.bs.tooltip', () => {
      const tip = document.querySelector('.tooltip')

      expect(tip).not.toBeNull()
      expect(tip.classList.contains('fade')).toEqual(false)
      resolve()
    })

    tooltip.show()
  })
})

----------------------------------------

TITLE: Importing and Initializing Bootstrap Modal Component
DESCRIPTION: This snippet demonstrates how to import and initialize a specific Bootstrap component (Modal) using the default export from the dist files. It shows the correct syntax for importing and creating a new instance of the Modal.

LANGUAGE: js
CODE:
import Modal from 'bootstrap/js/dist/modal'
const modal = new Modal(document.getElementById('myModal'))

----------------------------------------

TITLE: Responsive Grid Layout in Bootstrap
DESCRIPTION: Demonstrates a responsive grid that adjusts from two columns on small devices to three columns on medium and larger viewports.

LANGUAGE: html
CODE:
<div class="grid text-center">
  <div class="g-col-6 g-col-md-4">.g-col-6 .g-col-md-4</div>
  <div class="g-col-6 g-col-md-4">.g-col-6 .g-col-md-4</div>
  <div class="g-col-6 g-col-md-4">.g-col-6 .g-col-md-4</div>
</div>

----------------------------------------

TITLE: Creating Bordered Tables in Bootstrap
DESCRIPTION: Demonstrates how to add borders to all sides of the table and cells using .table-bordered.

LANGUAGE: HTML
CODE:
<table class="table table-bordered">
  <!-- Table content -->
</table>

----------------------------------------

TITLE: Implementing Basic Card Placeholders in Bootstrap
DESCRIPTION: Example showing how to create a loading state for a card component using Bootstrap placeholders. Demonstrates both the standard card and its placeholder version with loading indicators.

LANGUAGE: html
CODE:
<div class="card">
  <img src="..." class="card-img-top" alt="...">

  <div class="card-body">
    <h5 class="card-title">Card title</h5>
    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
    <a href="#" class="btn btn-primary">Go somewhere</a>
  </div>
</div>

<div class="card" aria-hidden="true">
  <img src="..." class="card-img-top" alt="...">
  <div class="card-body">
    <h5 class="card-title placeholder-glow">
      <span class="placeholder col-6"></span>
    </h5>
    <p class="card-text placeholder-glow">
      <span class="placeholder col-7"></span>
      <span class="placeholder col-4"></span>
      <span class="placeholder col-4"></span>
      <span class="placeholder col-6"></span>
      <span class="placeholder col-8"></span>
    </p>
    <a class="btn btn-primary disabled placeholder col-6" aria-disabled="true"></a>
  </div>
</div>

----------------------------------------

TITLE: Handling Bootstrap Alert Events
DESCRIPTION: This snippet demonstrates how to listen for the 'closed.bs.alert' event, which fires when an alert has been closed and CSS transitions have completed.

LANGUAGE: javascript
CODE:
const myAlert = document.getElementById('myAlert')
myAlert.addEventListener('closed.bs.alert', event => {
  // do something, for instance, explicitly move focus to the most appropriate element,
  // so it doesn't get lost/reset to the start of the page
  // document.getElementById('...').focus()
})

----------------------------------------

TITLE: Bootstrap JavaScript Integration
DESCRIPTION: JavaScript configuration for importing Bootstrap's CSS and JS components

LANGUAGE: javascript
CODE:
// Import our custom CSS
import '../scss/styles.scss'

// Import all of Bootstrap's JS
import * as bootstrap from 'bootstrap'

----------------------------------------

TITLE: Creating Input Groups with Dropdowns in Bootstrap
DESCRIPTION: Shows how to incorporate dropdown menus into input groups using Bootstrap classes and data attributes.

LANGUAGE: HTML
CODE:
<div class="input-group mb-3">
  <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</button>
  <ul class="dropdown-menu">
    <li><a class="dropdown-item" href="#">Action</a></li>
    <li><a class="dropdown-item" href="#">Another action</a></li>
    <li><a class="dropdown-item" href="#">Something else here</a></li>
    <li><hr class="dropdown-divider"></li>
    <li><a class="dropdown-item" href="#">Separated link</a></li>
  </ul>
  <input type="text" class="form-control" aria-label="Text input with dropdown button">
</div>

----------------------------------------

TITLE: Link Underline Customization Examples in HTML
DESCRIPTION: Shows how to use Bootstrap classes to customize link underline offset, opacity, and hover effects.

LANGUAGE: HTML
CODE:
<p><a href="#">Default link</a></p>
<p><a class="link-offset-1" href="#">Offset 1 link</a></p>
<p><a class="link-offset-2" href="#">Offset 2 link</a></p>
<p><a class="link-offset-3" href="#">Offset 3 link</a></p>

----------------------------------------

TITLE: Bootstrap Alert Sass Variables
DESCRIPTION: This SCSS snippet defines Sass variables for customizing Bootstrap alerts, including padding, margin, font size, and border properties.

LANGUAGE: scss
CODE:
$alert-padding-y:               $spacer;
$alert-padding-x:               $spacer;
$alert-margin-bottom:           1rem;
$alert-border-radius:           $border-radius;
$alert-link-font-weight:        $font-weight-bold;
$alert-border-width:            $border-width;
$alert-dismissible-padding-r:   $alert-padding-x * 3; // 3x covers width of x plus default padding on either side

----------------------------------------

TITLE: Modifying Border Opacity with CSS Variables
DESCRIPTION: Demonstrates how to adjust border opacity using CSS variables and Bootstrap classes.

LANGUAGE: html
CODE:
<div class="border border-success p-2 mb-2">This is default success border</div>
<div class="border border-success p-2" style="--bs-border-opacity: .5;">This is 50% opacity success border</div>

----------------------------------------

TITLE: Using RFS with Important Flag in SCSS
DESCRIPTION: Demonstrates adding !important to RFS values using the padding mixin.

LANGUAGE: scss
CODE:
.selector {
  @include padding(2.5rem !important);
}

----------------------------------------

TITLE: NPM Script Configuration for Parcel
DESCRIPTION: Package.json script configuration for running Parcel development server

LANGUAGE: json
CODE:
{
   "scripts": {
     "start": "parcel serve src/index.html --public-url / --dist-dir dist",
     "test": "echo \"Error: no test specified\" && exit 1"
   }
}

----------------------------------------

TITLE: Disabled Floating Label Inputs in HTML
DESCRIPTION: Shows how to create disabled floating label inputs for various form elements including text input, textarea, and select.

LANGUAGE: HTML
CODE:
<div class="form-floating mb-3">
  <input type="email" class="form-control" id="floatingInputDisabled" placeholder="name@example.com" disabled>
  <label for="floatingInputDisabled">Email address</label>
</div>

----------------------------------------

TITLE: Implementing Dark Variant Close Buttons in HTML
DESCRIPTION: This snippet demonstrates how to create dark variant close buttons using the data-bs-theme="dark" attribute on a parent div.

LANGUAGE: html
CODE:
<div data-bs-theme="dark">
  <button type="button" class="btn-close" aria-label="Close"></button>
  <button type="button" class="btn-close" disabled aria-label="Close"></button>
</div>

----------------------------------------

TITLE: Using RFS Functions with Media Queries in SCSS
DESCRIPTION: Shows how to use RFS functions (rfs-fluid-value) with Bootstrap's responsive breakpoint mixins.

LANGUAGE: scss
CODE:
.selector {
  @include media-breakpoint-down(lg) {
    padding: rfs-fluid-value(2rem);
    font-size: rfs-fluid-value(1.125rem);
  }
}

LANGUAGE: css
CODE:
@media (max-width: 991.98px) {
  .selector {
    padding: calc(1.325rem + 0.9vw);
    font-size: 1.125rem; /* 1.125rem is small enough, so RFS won't rescale this */
  }
}

----------------------------------------

TITLE: Declaring Color Variables in SCSS
DESCRIPTION: This SCSS snippet shows the declaration of color variables used in Bootstrap's theming system.

LANGUAGE: scss
CODE:
{{< scss-docs name="color-variables" file="scss/_variables.scss" >}}

{{< scss-docs name="theme-color-variables" file="scss/_variables.scss" >}}

{{< scss-docs name="variable-gradient" file="scss/_variables.scss" >}}

----------------------------------------

TITLE: Demonstrating Width Utilities in Bootstrap HTML
DESCRIPTION: This snippet shows how to use Bootstrap's width utilities to set element widths relative to their parent container. It includes examples for 25%, 50%, 75%, 100%, and auto widths.

LANGUAGE: html
CODE:
<div class="w-25 p-3">Width 25%</div>
<div class="w-50 p-3">Width 50%</div>
<div class="w-75 p-3">Width 75%</div>
<div class="w-100 p-3">Width 100%</div>
<div class="w-auto p-3">Width auto</div>

----------------------------------------

TITLE: Defining CSS Variables for Close Button in SCSS
DESCRIPTION: This SCSS snippet shows the CSS variables used for customizing the close button component in Bootstrap.

LANGUAGE: scss
CODE:
{{< scss-docs name="close-css-vars" file="scss/_close.scss" >}}

----------------------------------------

TITLE: Defining Focus Ring Utilities in SCSS
DESCRIPTION: Shows the SCSS code for defining focus ring utilities in the utilities API.

LANGUAGE: scss
CODE:
"focus-ring": (
  property: outline,
  values: none
),
"focus-ring-width": (
  property: --#{$prefix}focus-ring-width,
  class: focus-ring,
  values: (
    0: 0,
    1: .125rem,
    2: .25rem,
    3: .375rem,
    4: .5rem,
    5: .75rem
  )
),

----------------------------------------

TITLE: Bootstrap Radio Button Implementation
DESCRIPTION: Example of radio button inputs using Bootstrap's form-check classes, showing default and checked states.

LANGUAGE: HTML
CODE:
<div class="form-check">
  <input class="form-check-input" type="radio" name="radioDefault" id="radioDefault1">
  <label class="form-check-label" for="radioDefault1">
    Default radio
  </label>
</div>
<div class="form-check">
  <input class="form-check-input" type="radio" name="radioDefault" id="radioDefault2" checked>
  <label class="form-check-label" for="radioDefault2">
    Default checked radio
  </label>
</div>

----------------------------------------

TITLE: Adding Gutters to Form Layout in Bootstrap
DESCRIPTION: Demonstrates how to add gutters to a form layout using Bootstrap's gutter modifier classes.

LANGUAGE: HTML
CODE:
<div class="row g-3">
  <div class="col">
    <input type="text" class="form-control" placeholder="First name" aria-label="First name">
  </div>
  <div class="col">
    <input type="text" class="form-control" placeholder="Last name" aria-label="Last name">
  </div>
</div>

----------------------------------------

TITLE: Using Max-Width Utility in Bootstrap HTML
DESCRIPTION: This snippet demonstrates the use of Bootstrap's max-width utility class to constrain an element's width to 100% of its parent container, even when its content would naturally exceed that width.

LANGUAGE: html
CODE:
<div style="width: 50%; height: 100px;">
  <div class="mw-100" style="width: 200%;">Max-width 100%</div>
</div>

----------------------------------------

TITLE: Defining Sass Variables for Close Button in SCSS
DESCRIPTION: This SCSS snippet shows the Sass variables used for customizing the close button component in Bootstrap.

LANGUAGE: scss
CODE:
{{< scss-docs name="close-variables" file="scss/_variables.scss" >}}

----------------------------------------

TITLE: Bootstrap Form Variables Configuration
DESCRIPTION: SCSS variables for customizing form controls, labels, and file inputs in Bootstrap.

LANGUAGE: scss
CODE:
$form-label-*
$form-text-*
$form-file-*

----------------------------------------

TITLE: Demonstrating Background Color Classes in HTML
DESCRIPTION: This snippet showcases various background color utility classes in Bootstrap, including contextual colors and subtle variations.

LANGUAGE: html
CODE:
<div class="p-3 mb-2 bg-{{ .name }}{{ if .contrast_color }} text-{{ .contrast_color }}{{ else }} text-white{{ end }}">.bg-{{ .name }}</div>
<div class="p-3 mb-2 bg-{{ .name }}-subtle text-{{ .name }}-emphasis">.bg-{{ .name }}-subtle</div>

----------------------------------------

TITLE: Demonstrating Text Selection Utility Classes in HTML
DESCRIPTION: This snippet shows how to use Bootstrap classes to control text selection behavior. It includes examples for selecting all text, default selection, and preventing selection.

LANGUAGE: html
CODE:
<p class="user-select-all">This paragraph will be entirely selected when clicked by the user.</p>
<p class="user-select-auto">This paragraph has default select behavior.</p>
<p class="user-select-none">This paragraph will not be selectable when clicked by the user.</p>

----------------------------------------

TITLE: Defining Position Values in SCSS
DESCRIPTION: Shows the Sass map that declares default position utility values. These values are used to generate the positioning utilities.

LANGUAGE: scss
CODE:
$position-values: (
  0: 0,
  50: 50%,
  100: 100%
);

----------------------------------------

TITLE: Hover Effect Icon Link Implementation
DESCRIPTION: Demonstrates the icon-link-hover class that adds movement to the icon on hover

LANGUAGE: html
CODE:
<a class="icon-link icon-link-hover" href="#">
  Icon link
  <svg class="bi" aria-hidden="true"><use xlink:href="#arrow-right"></use></svg>
</a>

----------------------------------------

TITLE: Toast JavaScript Initialization
DESCRIPTION: Code to initialize toast components via JavaScript with optional configuration.

LANGUAGE: javascript
CODE:
const toastElList = document.querySelectorAll('.toast')
const toastList = [...toastElList].map(toastEl => new bootstrap.Toast(toastEl, option))

----------------------------------------

TITLE: Implementing Basic Visibility Controls with Bootstrap Classes
DESCRIPTION: Demonstrates the basic usage of Bootstrap visibility classes to show and hide elements while maintaining their space in the layout. Elements with .invisible remain in the document flow but are hidden both visually and from assistive technologies.

LANGUAGE: html
CODE:
<div class="visible">...</div>
<div class="invisible">...</div>

----------------------------------------

TITLE: Applying Responsive Object Fit Classes in HTML
DESCRIPTION: This example demonstrates the use of responsive object-fit classes that apply different behaviors at various breakpoints.

LANGUAGE: html
CODE:
{{< placeholder width="140" height="80" class="object-fit-sm-contain border rounded" text="Contain on sm" markup="img" color="#868e96" background="#dee2e6" >}}
{{< placeholder width="140" height="80" class="object-fit-md-contain border rounded" text="Contain on md" markup="img" color="#868e96" background="#dee2e6" >}}
{{< placeholder width="140" height="80" class="object-fit-lg-contain border rounded" text="Contain on lg" markup="img" color="#868e96" background="#dee2e6" >}}
{{< placeholder width="140" height="80" class="object-fit-xl-contain border rounded" text="Contain on xl" markup="img" color="#868e96" background="#dee2e6" >}}
{{< placeholder width="140" height="80" class="object-fit-xxl-contain border rounded" text="Contain on xxl" markup="img" color="#868e96" background="#dee2e6" >}}

----------------------------------------

TITLE: Defining CSS Variables for Border Spinner
DESCRIPTION: CSS variables used for customizing the appearance of border spinners.

LANGUAGE: CSS
CODE:
--#{$prefix}spinner-width: #{$spinner-width};
--#{$prefix}spinner-height: #{$spinner-height};
--#{$prefix}spinner-vertical-align: #{$spinner-vertical-align};
--#{$prefix}spinner-border-width: #{$spinner-border-width};
--#{$prefix}spinner-animation-speed: #{$spinner-animation-speed};
--#{$prefix}spinner-animation-name: spinner-border;

----------------------------------------

TITLE: Basic Offcanvas Structure in HTML
DESCRIPTION: Example showing the basic structure of an offcanvas component with header and body sections

LANGUAGE: html
CODE:
<div class="offcanvas offcanvas-start show" tabindex="-1" id="offcanvas" aria-labelledby="offcanvasLabel">
  <div class="offcanvas-header">
    <h5 class="offcanvas-title" id="offcanvasLabel">Offcanvas</h5>
    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
  </div>
  <div class="offcanvas-body">
    Content for the offcanvas goes here. You can place just about any Bootstrap component or custom elements here.
  </div>
</div>

----------------------------------------

TITLE: Using Max-Height Utility in Bootstrap HTML
DESCRIPTION: This example shows how to use Bootstrap's max-height utility class to limit an element's height to 100% of its parent container, even when its content would naturally exceed that height.

LANGUAGE: html
CODE:
<div style="height: 100px;">
  <div class="mh-100" style="width: 100px; height: 200px;">Max-height 100%</div>
</div>

----------------------------------------

TITLE: Implementing LTR and RTL Simultaneously in SCSS
DESCRIPTION: This SCSS snippet demonstrates how to use RTLCSS String Maps to implement both LTR and RTL styles on the same page.

LANGUAGE: scss
CODE:
/* rtl:begin:options: {
  "autoRename": true,
  "stringMap":[ {
    "name": "ltr-rtl",
    "priority": 100,
    "search": ["ltr"],
    "replace": ["rtl"],
    "options": {
      "scope": "*",
      "ignoreCase": false
    }
  } ]
} */
.ltr {
  @import "../node_modules/bootstrap/scss/bootstrap";
}
/*rtl:end:options*/

----------------------------------------

TITLE: Defining Background Utilities in SCSS
DESCRIPTION: This SCSS snippet demonstrates how background utilities are declared in Bootstrap's utilities API.

LANGUAGE: scss
CODE:
{{< scss-docs name="utils-bg-color" file="scss/_utilities.scss" >}}

----------------------------------------

TITLE: Styling Placeholder Variables in Bootstrap
DESCRIPTION: Sass variables for customizing placeholder appearance including opacity, animation properties, and wave effect settings.

LANGUAGE: scss
CODE:
$placeholder-opacity-max: .5 !default;
$placeholder-opacity-min: .2 !default;
$placeholder-animation-wave-count: 2 !default;
$placeholder-animation-wave-offset: .2s !default;

----------------------------------------

TITLE: Floating Labels in Grid Layout with HTML
DESCRIPTION: Shows how to integrate floating label inputs within Bootstrap's grid system for responsive layouts.

LANGUAGE: HTML
CODE:
<div class="row g-2">
  <div class="col-md">
    <div class="form-floating">
      <input type="email" class="form-control" id="floatingInputGrid" placeholder="name@example.com" value="mdo@example.com">
      <label for="floatingInputGrid">Email address</label>
    </div>
  </div>
  <div class="col-md">
    <div class="form-floating">
      <select class="form-select" id="floatingSelectGrid">
        <option selected>Open this select menu</option>
        <option value="1">One</option>
        <option value="2">Two</option>
        <option value="3">Three</option>
      </select>
      <label for="floatingSelectGrid">Works with selects</label>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Creating Sized Custom Selects in Bootstrap
DESCRIPTION: Shows how to create large and small custom select menus using Bootstrap's form-select-lg and form-select-sm classes. These classes allow for consistent sizing with text inputs.

LANGUAGE: HTML
CODE:
<select class="form-select form-select-lg mb-3" aria-label="Large select example">
  <option selected>Open this select menu</option>
  <option value="1">One</option>
  <option value="2">Two</option>
  <option value="3">Three</option>
</select>

<select class="form-select form-select-sm" aria-label="Small select example">
  <option selected>Open this select menu</option>
  <option value="1">One</option>
  <option value="2">Two</option>
  <option value="3">Three</option>
</select>

----------------------------------------

TITLE: Extracting SVG Files in Webpack Configuration
DESCRIPTION: Webpack configuration to extract inline SVG files as separate assets for better Content Security Policy compliance.

LANGUAGE: javascript
CODE:
module.exports = {
  // ...
  module: {
    rules: [
      {
        mimetype: 'image/svg+xml',
        scheme: 'data',
        type: 'asset/resource',
        generator: {
          filename: 'icons/[hash].svg'
        }
      },
      // ... other rules
    ]
  }
}

----------------------------------------

TITLE: Initializing Button Plugin with JavaScript
DESCRIPTION: Shows how to create a button instance and use its methods programmatically.

LANGUAGE: JavaScript
CODE:
const bsButton = new bootstrap.Button('#myButton')

// Example: Toggle all buttons
document.querySelectorAll('.btn').forEach(buttonElement => {
  const button = bootstrap.Button.getOrCreateInstance(buttonElement)
  button.toggle()
})

----------------------------------------

TITLE: Implementing Text Color Utilities in HTML
DESCRIPTION: This snippet demonstrates how to use Bootstrap's text color utility classes to colorize text elements. It includes examples of standard color classes, emphasis variants, and body text colors.

LANGUAGE: html
CODE:
<p class="text-{{ .name }}{{ with .contrast_color }} bg-{{ . }}{{ end }}">.text-{{ .name }}</p>
<p class="text-{{ .name }}-emphasis">.text-{{ .name }}-emphasis</p>

<p class="text-body">.text-body</p>
<p class="text-body-emphasis">.text-body-emphasis</p>
<p class="text-body-secondary">.text-body-secondary</p>
<p class="text-body-tertiary">.text-body-tertiary</p>

<p class="text-black bg-white">.text-black</p>
<p class="text-white bg-dark">.text-white</p>
<p class="text-black-50 bg-white">.text-black-50</p>
<p class="text-white-50 bg-dark">.text-white-50</p>

----------------------------------------

TITLE: Ordering Flex Items
DESCRIPTION: Demonstrates how to change the visual order of flex items using Bootstrap's order utility classes.

LANGUAGE: HTML
CODE:
<div class="d-flex flex-nowrap">
  <div class="order-3 p-2">First flex item</div>
  <div class="order-2 p-2">Second flex item</div>
  <div class="order-1 p-2">Third flex item</div>
</div>

----------------------------------------

TITLE: HTML Button Components in Bootstrap
DESCRIPTION: Demonstrates the implementation of Bootstrap's documentation-specific button styles including primary, accent, and light variants.

LANGUAGE: html
CODE:
<button class="btn btn-bd-primary">Primary button</button>
<button class="btn btn-bd-accent">Accent button</button>
<button class="btn btn-bd-light">Light button</button>

----------------------------------------

TITLE: Defining Object Fit Utilities in SCSS
DESCRIPTION: This SCSS snippet shows how object fit utilities are defined in Bootstrap's utilities API, allowing for customization and extension of these classes.

LANGUAGE: scss
CODE:
{{< scss-docs name="utils-object-fit" file="scss/_utilities.scss" >}}

----------------------------------------

TITLE: Customizing Buttons with CSS Variables
DESCRIPTION: Demonstrates how to use CSS variables to customize button styles.

LANGUAGE: CSS
CODE:
.btn-custom {
  --bs-btn-color: var(--bs-white);
  --bs-btn-bg: var(--bd-violet);
  --bs-btn-border-color: var(--bd-violet);
  --bs-btn-hover-color: var(--bs-white);
  --bs-btn-hover-bg: #{shade-color($bd-violet, 10%)};
  --bs-btn-hover-border-color: #{shade-color($bd-violet, 10%)};
  --bs-btn-focus-shadow-rgb: var(--bd-violet-rgb);
  --bs-btn-active-color: var(--bs-btn-hover-color);
  --bs-btn-active-bg: #{shade-color($bd-violet, 20%)};
  --bs-btn-active-border-color: #{shade-color($bd-violet, 20%)};
}

----------------------------------------

TITLE: Basic Utility API Example with Opacity
DESCRIPTION: Shows how to define opacity utilities in the $utilities map and the resulting CSS output

LANGUAGE: scss
CODE:
$utilities: (
  "opacity": (
    property: opacity,
    values: (
      0: 0,
      25: .25,
      50: .5,
      75: .75,
      100: 1,
    )
  )
);

LANGUAGE: css
CODE:
.opacity-0 { opacity: 0; }
.opacity-25 { opacity: .25; }
.opacity-50 { opacity: .5; }
.opacity-75 { opacity: .75; }
.opacity-100 { opacity: 1; }

----------------------------------------

TITLE: Basic Utility API Example with Opacity
DESCRIPTION: Shows how to define opacity utilities in the $utilities map and the resulting CSS output

LANGUAGE: scss
CODE:
$utilities: (
  "opacity": (
    property: opacity,
    values: (
      0: 0,
      25: .25,
      50: .5,
      75: .75,
      100: 1,
    )
  )
);

LANGUAGE: css
CODE:
.opacity-0 { opacity: 0; }
.opacity-25 { opacity: .25; }
.opacity-50 { opacity: .5; }
.opacity-75 { opacity: .75; }
.opacity-100 { opacity: 1; }

----------------------------------------

TITLE: Navbar CSS Variables Configuration
DESCRIPTION: SCSS variables and CSS custom properties used for styling Bootstrap navbars.

LANGUAGE: SCSS
CODE:
--#{$prefix}navbar-padding-x: #{$navbar-padding-x};
--#{$prefix}navbar-padding-y: #{$navbar-padding-y};
--#{$prefix}navbar-color: #{$navbar-light-color};
--#{$prefix}navbar-hover-color: #{$navbar-light-hover-color};
--#{$prefix}navbar-disabled-color: #{$navbar-light-disabled-color};
--#{$prefix}navbar-active-color: #{$navbar-light-active-color};
--#{$prefix}navbar-brand-padding-y: #{$navbar-brand-padding-y};
--#{$prefix}navbar-brand-margin-end: #{$navbar-brand-margin-end};
--#{$prefix}navbar-brand-font-size: #{$navbar-brand-font-size};
--#{$prefix}navbar-brand-color: #{$navbar-light-brand-color};
--#{$prefix}navbar-brand-hover-color: #{$navbar-light-brand-hover-color};
--#{$prefix}navbar-nav-link-padding-x: #{$navbar-nav-link-padding-x};

----------------------------------------

TITLE: SCSS Color Variable Definition
DESCRIPTION: Shows how to define a custom CSS color variable using SCSS syntax.

LANGUAGE: scss
CODE:
.test {
  --color: blue;
}

----------------------------------------

TITLE: Customizing Focus Ring Offset and Blur with CSS Variables
DESCRIPTION: Demonstrates how to modify the focus ring's offset and blur using CSS variables.

LANGUAGE: html
CODE:
<a href="#" class="d-inline-flex focus-ring py-1 px-2 text-decoration-none border rounded-2" style="--bs-focus-ring-x: 10px; --bs-focus-ring-y: 10px; --bs-focus-ring-blur: 4px">
  Blurry offset focus ring
</a>

----------------------------------------

TITLE: Basic Breadcrumb Navigation HTML Examples
DESCRIPTION: Demonstrates three variations of breadcrumb navigation using ordered lists with different levels of depth.

LANGUAGE: html
CODE:
<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item active" aria-current="page">Home</li>
  </ol>
</nav>

<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="#">Home</a></li>
    <li class="breadcrumb-item active" aria-current="page">Library</li>
  </ol>
</nav>

<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="#">Home</a></li>
    <li class="breadcrumb-item"><a href="#">Library</a></li>
    <li class="breadcrumb-item active" aria-current="page">Data</li>
  </ol>
</nav>

----------------------------------------

TITLE: Bootstrap Form Control Variables
DESCRIPTION: SCSS variables used for customizing form checks and switches in Bootstrap.

LANGUAGE: SCSS
CODE:
{{< scss-docs name="form-check-variables" file="scss/_variables.scss" >}}
{{< scss-docs name="form-switch-variables" file="scss/_variables.scss" >}}

----------------------------------------

TITLE: HTML Test Example
DESCRIPTION: Shows a simple test div implementation within Bootstrap's example shortcode wrapper.

LANGUAGE: html
CODE:
<div class="test">This is a test.</div>

----------------------------------------

TITLE: Defining Visibility Utility Classes in SCSS
DESCRIPTION: SCSS implementation of the visibility utility classes. Sets visibility property with !important flag to ensure styles take precedence.

LANGUAGE: scss
CODE:
// Class
.visible {
  visibility: visible !important;
}
.invisible {
  visibility: hidden !important;
}

----------------------------------------

TITLE: Defining Box Shadow Variables in SCSS
DESCRIPTION: This SCSS snippet defines variables for different shadow sizes used in Bootstrap. It includes variables for no shadow, small shadow, regular shadow, and large shadow.

LANGUAGE: scss
CODE:
{{< scss-docs name="box-shadow-variables" file="scss/_variables.scss" >}}

----------------------------------------

TITLE: Using Vertical Rule with Stacks in HTML
DESCRIPTION: This snippet demonstrates how to use a vertical rule within a horizontal stack layout in Bootstrap.

LANGUAGE: html
CODE:
<div class="hstack gap-3">
  <div class="p-2">First item</div>
  <div class="p-2 ms-auto">Second item</div>
  <div class="vr"></div>
  <div class="p-2">Third item</div>
</div>

----------------------------------------

TITLE: Removing Borders with Bootstrap CSS Classes
DESCRIPTION: Shows how to remove borders from elements using Bootstrap's border utility classes.

LANGUAGE: html
CODE:
<span class="border border-0"></span>
<span class="border border-top-0"></span>
<span class="border border-end-0"></span>
<span class="border border-bottom-0"></span>
<span class="border border-start-0"></span>

----------------------------------------

TITLE: Setting Min and Max Values for Bootstrap Range Input
DESCRIPTION: Demonstrates how to set custom minimum and maximum values for a range input using the min and max attributes. This example sets a range from 0 to 5.

LANGUAGE: html
CODE:
<label for="customRange2" class="form-label">Example range</label>
<input type="range" class="form-range" min="0" max="5" id="customRange2">

----------------------------------------

TITLE: Font Size Variables in SCSS
DESCRIPTION: Default font-related Sass variables defining font sizes and properties.

LANGUAGE: scss
CODE:
$font-family-sans-serif:      system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", "Noto Sans", "Liberation Sans", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji" !default;
$font-family-monospace:       SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace !default;
$font-family-base:            var(--#{$prefix}font-sans-serif) !default;
$font-size-root:              null !default;
$font-size-base:              1rem !default;
$font-size-sm:                $font-size-base * .875 !default;
$font-size-lg:                $font-size-base * 1.25 !default;

----------------------------------------

TITLE: Using Clearfix Mixin in SCSS with Bootstrap
DESCRIPTION: Shows how to use the clearfix mixin in SCSS to apply clearfix functionality to a custom element.

LANGUAGE: scss
CODE:
.element {
  @include clearfix;
}

----------------------------------------

TITLE: Changing Border Color with Bootstrap CSS Classes
DESCRIPTION: Illustrates how to change border colors using Bootstrap's theme color utilities.

LANGUAGE: html
CODE:
<span class="border border-primary"></span>
<span class="border border-secondary"></span>
<span class="border border-success"></span>
<span class="border border-danger"></span>
<span class="border border-warning"></span>
<span class="border border-info"></span>
<span class="border border-light"></span>
<span class="border border-dark"></span>
<span class="border border-black"></span>
<span class="border border-white"></span>

----------------------------------------

TITLE: Sass Variables for Bootstrap Range Input Customization
DESCRIPTION: References Sass variables used for customizing range inputs in Bootstrap. These variables are defined in the _variables.scss file.

LANGUAGE: scss
CODE:
{{< scss-docs name="form-range-variables" file="scss/_variables.scss" >}}

----------------------------------------

TITLE: Implementing Responsive Aspect Ratio in SCSS
DESCRIPTION: This SCSS code shows how to create a responsive aspect ratio that changes from 4:3 to 2:1 at the medium breakpoint using a media query.

LANGUAGE: scss
CODE:
.ratio-4x3 {
  @include media-breakpoint-up(md) {
    --bs-aspect-ratio: 50%; // 2x1
  }
}

----------------------------------------

TITLE: Defining Sizing Utilities in Bootstrap SCSS
DESCRIPTION: This SCSS code defines the sizing utilities in Bootstrap's utility API. It includes configurations for width, height, and their variations (max, min, viewport-relative) with predefined values and responsive breakpoints.

LANGUAGE: scss
CODE:
"width": (
  property: width,
  class: w,
  values: (
    25: 25%,
    50: 50%,
    75: 75%,
    100: 100%,
    auto: auto
  )
),
"max-width": (
  property: max-width,
  class: mw,
  values: (
    100: 100%
  )
),
"viewport-width": (
  property: width,
  class: vw,
  values: (
    100: 100vw
  )
),
"min-viewport-width": (
  property: min-width,
  class: min-vw,
  values: (
    100: 100vw
  )
),
"height": (
  property: height,
  class: h,
  values: (
    25: 25%,
    50: 50%,
    75: 75%,
    100: 100%,
    auto: auto
  )
),
"max-height": (
  property: max-height,
  class: mh,
  values: (
    100: 100%
  )
),
"viewport-height": (
  property: height,
  class: vh,
  values: (
    100: 100vh
  )
),
"min-viewport-height": (
  property: min-height,
  class: min-vh,
  values: (
    100: 100vh
  )
)

----------------------------------------

TITLE: SCSS Display Heading Variables
DESCRIPTION: SCSS variables controlling display heading styles including font sizes, weights and line heights

LANGUAGE: scss
CODE:
$display-font-sizes: (
  1: 5rem,
  2: 4.5rem,
  3: 4rem,
  4: 3.5rem,
  5: 3rem,
  6: 2.5rem
);

$display-font-weight: 300;
$display-line-height: $headings-line-height;

----------------------------------------

TITLE: Defining Float Utilities in SCSS
DESCRIPTION: This SCSS snippet from Bootstrap's utilities API defines the float utility classes, including their responsive variations and values.

LANGUAGE: scss
CODE:
"float": (
  responsive: true,
  property: float,
  values: (
    start: left,
    end: right,
    none: none,
  )
),

----------------------------------------

TITLE: Bootstrap Form Sass Variables
DESCRIPTION: Core Sass variables shared between buttons and form components used for consistent styling and customization.

LANGUAGE: scss
CODE:
{{< scss-docs name="input-btn-variables" file="scss/_variables.scss" >}}

----------------------------------------

TITLE: Centering Elements with Transform Utility in HTML
DESCRIPTION: Demonstrates how to center elements using the .translate-middle class in combination with edge positioning utilities. This applies translateX(-50%) and translateY(-50%) transformations.

LANGUAGE: html
CODE:
<div class="position-relative">
  <div class="position-absolute top-0 start-0 translate-middle"></div>
  <div class="position-absolute top-0 start-50 translate-middle"></div>
  <div class="position-absolute top-0 start-100 translate-middle"></div>
  <div class="position-absolute top-50 start-0 translate-middle"></div>
  <div class="position-absolute top-50 start-50 translate-middle"></div>
  <div class="position-absolute top-50 start-100 translate-middle"></div>
  <div class="position-absolute top-100 start-0 translate-middle"></div>
  <div class="position-absolute top-100 start-50 translate-middle"></div>
  <div class="position-absolute top-100 start-100 translate-middle"></div>
</div>

----------------------------------------

TITLE: Basic Colored Links Implementation in Bootstrap
DESCRIPTION: Demonstrates the implementation of colored links using Bootstrap's .link-* classes with different theme colors. Includes a special emphasis link that adapts to color modes.

LANGUAGE: html
CODE:
<p><a href="#" class="link-primary">Primary link</a></p>
<p><a href="#" class="link-secondary">Secondary link</a></p>
<p><a href="#" class="link-success">Success link</a></p>
<p><a href="#" class="link-danger">Danger link</a></p>
<p><a href="#" class="link-warning">Warning link</a></p>
<p><a href="#" class="link-info">Info link</a></p>
<p><a href="#" class="link-light">Light link</a></p>
<p><a href="#" class="link-dark">Dark link</a></p>
<p><a href="#" class="link-body-emphasis">Emphasis link</a></p>

----------------------------------------

TITLE: Form Control Sizing in Bootstrap
DESCRIPTION: Demonstrates different form control sizes using .form-control-lg and .form-control-sm classes.

LANGUAGE: html
CODE:
<input class="form-control form-control-lg" type="text" placeholder=".form-control-lg" aria-label=".form-control-lg example">
<input class="form-control" type="text" placeholder="Default input" aria-label="default input example">
<input class="form-control form-control-sm" type="text" placeholder=".form-control-sm" aria-label=".form-control-sm example">

----------------------------------------

TITLE: Figure Sass Variables in Bootstrap
DESCRIPTION: References the Sass variables used for configuring figure styles in Bootstrap's _variables.scss file.

LANGUAGE: scss
CODE:
{{< scss-docs name="figure-variables" file="scss/_variables.scss" >}}

----------------------------------------

TITLE: Disabling Bootstrap Range Input
DESCRIPTION: Shows how to create a disabled range input by adding the disabled attribute. This gives the input a grayed out appearance and prevents interaction.

LANGUAGE: html
CODE:
<label for="disabledRange" class="form-label">Disabled range</label>
<input type="range" class="form-range" id="disabledRange" disabled>

----------------------------------------

TITLE: Applying Object Fit Classes to Video Elements in HTML
DESCRIPTION: This snippet shows how to apply object-fit classes to <video> elements for different resizing behaviors.

LANGUAGE: html
CODE:
<video src="..." class="object-fit-contain" autoplay></video>
<video src="..." class="object-fit-cover" autoplay></video>
<video src="..." class="object-fit-fill" autoplay></video>
<video src="..." class="object-fit-scale" autoplay></video>
<video src="..." class="object-fit-none" autoplay></video>

----------------------------------------

TITLE: Importing Bootstrap Toast as ES Module in HTML
DESCRIPTION: Demonstrates how to import and use the Bootstrap Toast component as an ES module in HTML. This method allows for modular usage of Bootstrap components in modern browsers.

LANGUAGE: html
CODE:
<script type="module">
  import { Toast } from 'bootstrap.esm.min.js'

  Array.from(document.querySelectorAll('.toast'))
    .forEach(toastNode => new Toast(toastNode))
</script>

----------------------------------------

TITLE: Defining Keyframes for Spinner Animations in CSS
DESCRIPTION: CSS keyframes used to create the spinning animation for border spinners.

LANGUAGE: CSS
CODE:
@keyframes spinner-border {
  to { transform: rotate(360deg) #{"/* rtl:ignore */"}; }
}

----------------------------------------

TITLE: Bootstrap Display Headings Usage
DESCRIPTION: Implementation of Bootstrap's display heading classes for larger, more prominent headings

LANGUAGE: html
CODE:
<h1 class="display-1">Display 1</h1>
<h1 class="display-2">Display 2</h1>
<h1 class="display-3">Display 3</h1>
<h1 class="display-4">Display 4</h1>
<h1 class="display-5">Display 5</h1>
<h1 class="display-6">Display 6</h1>

----------------------------------------

TITLE: Defining Interaction Utilities in SCSS
DESCRIPTION: This SCSS snippet defines the interaction utilities in Bootstrap's utility API. It includes classes for user selection and pointer events.

LANGUAGE: scss
CODE:
"user-select": (
  property: user-select,
  values: all auto none
),
"pointer-events": (
  property: pointer-events,
  class: pe,
  values: none auto,
),
"pe": (
  property: pointer-events,
  values: none auto,
),

----------------------------------------

TITLE: Implementing Basic Border Spinner in HTML
DESCRIPTION: Creates a basic border spinner to indicate a loading state. Includes a visually hidden text for accessibility.

LANGUAGE: HTML
CODE:
<div class="spinner-border" role="status">
  <span class="visually-hidden">Loading...</span>
</div>

----------------------------------------

TITLE: Configuring Badge Sass Variables in SCSS
DESCRIPTION: Defines the Sass variables used for customizing badge styles in Bootstrap. These variables control various aspects of badge appearance.

LANGUAGE: scss
CODE:
$badge-font-size:                   .75em;
$badge-font-weight:                 $font-weight-bold;
$badge-color:                       $white;
$badge-padding-x:                   .65em;
$badge-padding-y:                   .35em;
$badge-border-radius:               $border-radius;

----------------------------------------

TITLE: Card CSS Variables
DESCRIPTION: Lists the CSS variables used for customizing card styles.

LANGUAGE: CSS
CODE:
--#{$prefix}card-spacer-y: #{$card-spacer-y};
--#{$prefix}card-spacer-x: #{$card-spacer-x};
--#{$prefix}card-title-spacer-y: #{$card-title-spacer-y};
--#{$prefix}card-border-width: #{$card-border-width};
--#{$prefix}card-border-color: #{$card-border-color};
--#{$prefix}card-border-radius: #{$card-border-radius};
--#{$prefix}card-box-shadow: #{$card-box-shadow};
--#{$prefix}card-inner-border-radius: #{$card-inner-border-radius};
--#{$prefix}card-cap-padding-y: #{$card-cap-padding-y};
--#{$prefix}card-cap-padding-x: #{$card-cap-padding-x};
--#{$prefix}card-cap-bg: #{$card-cap-bg};
--#{$prefix}card-cap-color: #{$card-cap-color};
--#{$prefix}card-height: #{$card-height};
--#{$prefix}card-color: #{$card-color};
--#{$prefix}card-bg: #{$card-bg};
--#{$prefix}card-img-overlay-padding: #{$card-img-overlay-padding};
--#{$prefix}card-group-margin: #{$card-group-margin};

----------------------------------------

TITLE: Defining Aspect Ratio Map in SCSS
DESCRIPTION: This SCSS snippet shows the default $ratio-aspect-ratios map used by Bootstrap to define various aspect ratio classes.

LANGUAGE: scss
CODE:
$aspect-ratios: (
  "1x1": 100%,
  "4x3": calc(3 / 4 * 100%),
  "16x9": calc(9 / 16 * 100%),
  "21x9": calc(9 / 21 * 100%)
);

----------------------------------------

TITLE: Demonstrating Responsive Float Utilities in HTML
DESCRIPTION: This example illustrates the use of Bootstrap's responsive float utility classes, which apply different float behaviors based on viewport size.

LANGUAGE: html
CODE:
<div class="float-sm-end">Float end on viewports sized SM (small) or wider</div><br>
<div class="float-md-end">Float end on viewports sized MD (medium) or wider</div><br>
<div class="float-lg-end">Float end on viewports sized LG (large) or wider</div><br>
<div class="float-xl-end">Float end on viewports sized XL (extra large) or wider</div><br>
<div class="float-xxl-end">Float end on viewports sized XXL (extra extra large) or wider</div><br>

----------------------------------------

TITLE: Custom Component with Stretched Link in Bootstrap
DESCRIPTION: This example shows how to create a custom component with a stretched link. The .position-relative class is added to the parent element to ensure the link doesn't stretch outside of it.

LANGUAGE: html
CODE:
<div class="d-flex position-relative">
  {{< placeholder width="144" height="144" class="flex-shrink-0 me-3" text="false" title="Generic placeholder image" >}}
  <div>
    <h5 class="mt-0">Custom component with stretched link</h5>
    <p>This is some placeholder content for the custom component. It is intended to mimic what some real-world content would look like, and we're using it here to give the component a bit of body and size.</p>
    <a href="#" class="stretched-link">Go somewhere</a>
  </div>
</div>

----------------------------------------

TITLE: Customizing Font Weight for RTL in SCSS
DESCRIPTION: This SCSS snippet demonstrates how to use RTLCSS value directives to customize font weight for RTL layouts.

LANGUAGE: scss
CODE:
$font-weight-bold: 700 #{/* rtl:600 */} !default;

----------------------------------------

TITLE: Using New Color Utilities in Bootstrap
DESCRIPTION: Example of using new color utility classes for background, text, and border in Bootstrap 5.3.0+.

LANGUAGE: HTML
CODE:
<div class="p-3 text-primary-emphasis bg-primary-subtle border border-primary-subtle rounded-3">
  Example element with utilities
</div>

----------------------------------------

TITLE: Controlling Display for Print
DESCRIPTION: This example demonstrates how to use Bootstrap classes to control element visibility when printing.

LANGUAGE: HTML
CODE:
<div class="d-print-none">Screen Only (Hide on print only)</div>
<div class="d-none d-print-block">Print Only (Hide on screen only)</div>
<div class="d-none d-lg-block d-print-block">Hide up to large on screen, but always show on print</div>

----------------------------------------

TITLE: Implementing Fluid Bootstrap Container
DESCRIPTION: Implementation of a fluid container that spans the full viewport width at all breakpoints.

LANGUAGE: html
CODE:
<div class="container-fluid">
  ...
</div>

----------------------------------------

TITLE: Grid Gap Example in HTML
DESCRIPTION: Demonstration of gap utilities in a CSS Grid layout, showing spacing between grid items.

LANGUAGE: html
CODE:
<div style="grid-template-columns: 1fr 1fr;" class="d-grid gap-3">
  <div class="p-2">Grid item 1</div>
  <div class="p-2">Grid item 2</div>
  <div class="p-2">Grid item 3</div>
  <div class="p-2">Grid item 4</div>
</div>

----------------------------------------

TITLE: Using Sass Color Variables in Bootstrap
DESCRIPTION: Example of using Sass color variables in custom CSS rules.

LANGUAGE: SCSS
CODE:
.alpha { color: $purple; }
.beta {
  color: $yellow-300;
  background-color: $indigo-900;
}

----------------------------------------

TITLE: Defining Z-index Levels Map in SCSS
DESCRIPTION: This SCSS map defines the available z-index values for utilities. It can be customized to change the available values and generated utilities.

LANGUAGE: SCSS
CODE:
{{< scss-docs name="zindex-levels-map" file="scss/_variables.scss" >}}

----------------------------------------

TITLE: Applying Text Opacity in HTML
DESCRIPTION: This HTML example demonstrates how to apply different levels of opacity to text using Bootstrap's utility classes and inline styles.

LANGUAGE: html
CODE:
<div class="text-primary">This is default primary text</div>
<div class="text-primary" style="--bs-text-opacity: .5;">This is 50% opacity primary text</div>

<div class="text-primary">This is default primary text</div>
<div class="text-primary text-opacity-75">This is 75% opacity primary text</div>
<div class="text-primary text-opacity-50">This is 50% opacity primary text</div>
<div class="text-primary text-opacity-25">This is 25% opacity primary text</div>

----------------------------------------

TITLE: Demonstrating Vertical Alignment in Bootstrap Columns
DESCRIPTION: This snippet shows how to use flexbox alignment utilities to vertically align columns within a row. It includes examples for aligning items at the start, center, and end of the container.

LANGUAGE: HTML
CODE:
<div class="container text-center">
  <div class="row align-items-start">
    <div class="col">
      One of three columns
    </div>
    <div class="col">
      One of three columns
    </div>
    <div class="col">
      One of three columns
    </div>
  </div>
</div>

----------------------------------------

TITLE: Defining Z-index Variables in SCSS for Bootstrap Components
DESCRIPTION: This SCSS snippet defines z-index variables for various Bootstrap components. It sets specific z-index values for elements like dropdown, sticky, fixed, modal-backdrop, modal, popover, and tooltip to control their layering order.

LANGUAGE: SCSS
CODE:
{{< scss-docs name="zindex-stack" file="scss/_variables.scss" >}}

----------------------------------------

TITLE: Custom Transform Effect with CSS Variables
DESCRIPTION: Shows how to customize the hover transform effect using CSS variables

LANGUAGE: html
CODE:
<a class="icon-link icon-link-hover" style="--bs-icon-link-transform: translate3d(0, -.125rem, 0);" href="#">
  <svg class="bi" aria-hidden="true"><use xlink:href="#clipboard"></use></svg>
  Icon link
</a>

----------------------------------------

TITLE: Defining Color Variables in SCSS
DESCRIPTION: This SCSS snippet shows the definition of color variables used in Bootstrap's theming system. It includes theme colors, grayscale colors, and RGB color definitions.

LANGUAGE: scss
CODE:
// Color variables
$blue:    #0d6efd;
$indigo:  #6610f2;
$purple:  #6f42c1;
// ... other color definitions ...

// Theme color variables
$primary:       $blue;
$secondary:     $gray-600;
$success:       $green;
// ... other theme color assignments ...

// Grayscale colors
$white:    #fff;
$gray-100: #f8f9fa;
$gray-200: #e9ecef;
// ... other grayscale definitions ...

----------------------------------------

TITLE: Aligning Spinner with Flexbox in HTML
DESCRIPTION: Demonstrates how to center-align a spinner using flexbox utilities.

LANGUAGE: HTML
CODE:
<div class="d-flex justify-content-center">
  <div class="spinner-border" role="status">
    <span class="visually-hidden">Loading...</span>
  </div>
</div>

----------------------------------------

TITLE: Declaring Gradient Mixins in SCSS
DESCRIPTION: This SCSS snippet shows the declaration of mixins used for creating custom gradients in Bootstrap.

LANGUAGE: scss
CODE:
{{< scss-docs name="gradient-bg-mixin" file="scss/mixins/_gradients.scss" >}}

{{< scss-docs name="gradient-mixins" file="scss/mixins/_gradients.scss" >}}

----------------------------------------

TITLE: Utility Classes for Link Styling
DESCRIPTION: Shows how to use Bootstrap's utility classes to modify link appearance

LANGUAGE: html
CODE:
<a class="icon-link icon-link-hover link-success link-underline-success link-underline-opacity-25" href="#">
  Icon link
  <svg class="bi" aria-hidden="true"><use xlink:href="#arrow-right"></use></svg>
</a>

----------------------------------------

TITLE: Basic Color Background Examples with Contrasting Text
DESCRIPTION: Demonstrates the usage of text-bg-* utility classes to create background colors with automatically contrasting text colors for each theme color.

LANGUAGE: html
CODE:
<div class="text-bg-{{ .name }} p-3">{{ .name | title }} with contrasting color</div>

----------------------------------------

TITLE: Defining Theme Color Map in SCSS
DESCRIPTION: This SCSS snippet demonstrates the creation of a theme color map, which is used to generate color-based utilities in Bootstrap.

LANGUAGE: scss
CODE:
{{< scss-docs name="theme-colors-map" file="scss/_variables.scss" >}}

----------------------------------------

TITLE: Horizontal Stack for Inline Form in Bootstrap
DESCRIPTION: This snippet demonstrates using .hstack to create an inline form with input, buttons, and a vertical rule.

LANGUAGE: html
CODE:
<div class="hstack gap-3">
  <input class="form-control me-auto" type="text" placeholder="Add your item here..." aria-label="Add your item here...">
  <button type="button" class="btn btn-secondary">Submit</button>
  <div class="vr"></div>
  <button type="button" class="btn btn-outline-danger">Reset</button>
</div>

----------------------------------------

TITLE: SCSS Variables for Form Validation
DESCRIPTION: SCSS variables and mixins used for styling form validation states and feedback.

LANGUAGE: scss
CODE:
--#{$prefix}form-valid-color: #{$form-valid-color};
--#{$prefix}form-valid-border-color: #{$form-valid-border-color};
--#{$prefix}form-invalid-color: #{$form-invalid-color};
--#{$prefix}form-invalid-border-color: #{$form-invalid-border-color};

----------------------------------------

TITLE: Sass Utilities Configuration
DESCRIPTION: SCSS configuration for link utilities defined in the utilities API.

LANGUAGE: SCSS
CODE:
"utils-links": "scss/_utilities.scss"

----------------------------------------

TITLE: Defining Color Maps in SCSS
DESCRIPTION: This SCSS snippet demonstrates how color maps are defined in Bootstrap. These maps are used to generate utility classes and component modifiers.

LANGUAGE: scss
CODE:
// Theme colors map
$theme-colors: (
  "primary":    $primary,
  "secondary":  $secondary,
  "success":    $success,
  // ... other theme color mappings ...
);

// RGB colors map
$theme-colors-rgb: map-loop($theme-colors, to-rgb, "$value");

// Utilities API color map
$utilities-colors: $theme-colors-rgb;
$utilities-text-colors: map-merge(
  $utilities-colors,
  (
    "black": to-rgb($black),
    "white": to-rgb($white),
    "body": to-rgb($body-color)
  )
);

----------------------------------------

TITLE: SVG Divider Configuration SCSS
DESCRIPTION: Shows how to use an SVG icon as a breadcrumb divider using SCSS variables.

LANGUAGE: scss
CODE:
$breadcrumb-divider: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='8' height='8'><path d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='#{$breadcrumb-divider-color}'/></svg>");

----------------------------------------

TITLE: Defining Collapse Transition SCSS Variables
DESCRIPTION: This SCSS snippet shows the variables used for defining collapse transition properties in Bootstrap.

LANGUAGE: scss
CODE:
{{< scss-docs name="collapse-transition" file="scss/_variables.scss" >}}

----------------------------------------

TITLE: Negative Margin Example in SCSS
DESCRIPTION: Example of a negative margin utility class implementation. Shows how negative margins can be used when enabled in the Sass configuration.

LANGUAGE: scss
CODE:
.mt-n1 {
  margin-top: -0.25rem !important;
}

----------------------------------------

TITLE: Creating Flexible Vertical Rule in HTML
DESCRIPTION: This example shows how to create a vertical rule that scales its height in a flex layout.

LANGUAGE: html
CODE:
<div class="d-flex" style="height: 200px;">
  <div class="vr"></div>
</div>

----------------------------------------

TITLE: Creating Custom Container with Sass Mixin
DESCRIPTION: Sass mixin for creating custom containers with configurable padding and standard container behavior.

LANGUAGE: scss
CODE:
// Source mixin
@mixin make-container($padding-x: $container-padding-x) {
  width: 100%;
  padding-right: $padding-x;
  padding-left: $padding-x;
  margin-right: auto;
  margin-left: auto;
}

// Usage
.custom-container {
  @include make-container();
}

----------------------------------------

TITLE: Adjusting Step Increment for Bootstrap Range Input
DESCRIPTION: Shows how to change the step increment of a range input using the step attribute. This example sets a step of 0.5, doubling the number of possible values.

LANGUAGE: html
CODE:
<label for="customRange3" class="form-label">Example range</label>
<input type="range" class="form-range" min="0" max="5" step="0.5" id="customRange3">

----------------------------------------

TITLE: Demonstrating Z-index Levels in HTML
DESCRIPTION: This snippet shows how to use z-index utilities to stack elements on top of one another. It requires a position value other than static, which can be set using custom styles or Bootstrap's position utilities.

LANGUAGE: HTML
CODE:
<div class="z-3 position-absolute p-5 rounded-3"><span>z-3</span></div>
<div class="z-2 position-absolute p-5 rounded-3"><span>z-2</span></div>
<div class="z-1 position-absolute p-5 rounded-3"><span>z-1</span></div>
<div class="z-0 position-absolute p-5 rounded-3"><span>z-0</span></div>
<div class="z-n1 position-absolute p-5 rounded-3"><span>z-n1</span></div>

----------------------------------------

TITLE: Dropdown JavaScript Initialization
DESCRIPTION: JavaScript code to initialize dropdowns using Bootstrap's Dropdown plugin.

LANGUAGE: javascript
CODE:
const dropdownElementList = document.querySelectorAll('.dropdown-toggle')
const dropdownList = [...dropdownElementList].map(dropdownToggleEl => new bootstrap.Dropdown(dropdownToggleEl))

----------------------------------------

TITLE: Max-width Media Query Mixins
DESCRIPTION: Sass mixins for applying styles at maximum viewport widths using Bootstrap's breakpoint system.

LANGUAGE: scss
CODE:
// No media query necessary for xs breakpoint as it's effectively `@media (max-width: 0) { ... }`
@include media-breakpoint-down(sm) { ... }
@include media-breakpoint-down(md) { ... }
@include media-breakpoint-down(lg) { ... }
@include media-breakpoint-down(xl) { ... }
@include media-breakpoint-down(xxl) { ... }

// Example: Style from medium breakpoint and down
@include media-breakpoint-down(md) {
  .custom-class {
    display: block;
  }
}

----------------------------------------

TITLE: Implementing Input Group Wrapping in Bootstrap
DESCRIPTION: Shows how to disable the default wrapping behavior of input groups using the .flex-nowrap class.

LANGUAGE: HTML
CODE:
<div class="input-group flex-nowrap">
  <span class="input-group-text" id="addon-wrapping">@</span>
  <input type="text" class="form-control" placeholder="Username" aria-label="Username" aria-describedby="addon-wrapping">
</div>

----------------------------------------

TITLE: Basic Icon Link Implementation in HTML
DESCRIPTION: Demonstrates the basic usage of icon link with an icon placed before the text using the .icon-link class

LANGUAGE: html
CODE:
<a class="icon-link" href="#">
  <svg class="bi" aria-hidden="true"><use xlink:href="#box-seam"></use></svg>
  Icon link
</a>

----------------------------------------

TITLE: Importing Bootstrap JavaScript
DESCRIPTION: JavaScript import statements showing different ways to import Bootstrap's JS components

LANGUAGE: javascript
CODE:
// Import all of Bootstrap's JS
import * as bootstrap from 'bootstrap'

// Or import individual components
import Alert from 'bootstrap/js/dist/alert'

// or, specify which plugins you need:
import { Tooltip, Toast, Popover } from 'bootstrap'

----------------------------------------

TITLE: Right-Aligned Figure Caption in Bootstrap
DESCRIPTION: Shows how to align a figure caption to the right using Bootstrap's text utility class text-end.

LANGUAGE: html
CODE:
<figure class="figure">
  {{< placeholder width="400" height="300" class="figure-img img-fluid rounded" >}}
  <figcaption class="figure-caption text-end">A caption for the above image.</figcaption>
</figure>

----------------------------------------

TITLE: SCSS Mixin Usage for Visually Hidden Elements
DESCRIPTION: Demonstrates how to use the visually-hidden and visually-hidden-focusable as SCSS mixins for custom implementations.

LANGUAGE: scss
CODE:
.visually-hidden-title {
  @include visually-hidden;
}

.skip-navigation {
  @include visually-hidden-focusable;
}

----------------------------------------

TITLE: Declaring Z-index Utilities in SCSS
DESCRIPTION: This snippet shows how z-index utilities are declared in the utilities API in scss/_utilities.scss. It demonstrates how to use the utilities API for z-index.

LANGUAGE: SCSS
CODE:
{{< scss-docs name="utils-zindex" file="scss/_utilities.scss" >}}

----------------------------------------

TITLE: Icon Link with Right-Aligned Icon
DESCRIPTION: Shows how to place an icon after the link text

LANGUAGE: html
CODE:
<a class="icon-link" href="#">
  Icon link
  <svg class="bi" aria-hidden="true"><use xlink:href="#arrow-right"></use></svg>
</a>

----------------------------------------

TITLE: Using RFS Custom Property Mixin in SCSS
DESCRIPTION: Shows how to apply RFS scaling to custom CSS properties using the rfs() mixin.

LANGUAGE: scss
CODE:
.selector {
  @include rfs(4rem, border-radius);
}

----------------------------------------

TITLE: Color Background with Badges Component
DESCRIPTION: Shows how to apply text-bg-* utilities to Bootstrap badges for colored backgrounds with contrasting text.

LANGUAGE: html
CODE:
<span class="badge text-bg-primary">Primary</span>
<span class="badge text-bg-info">Info</span>

----------------------------------------

TITLE: Creating Visually Hidden Focusable Elements in HTML with Bootstrap
DESCRIPTION: This example shows how to use the .visually-hidden-focusable class to create interactive controls that are visually hidden but become visible when focused. This is commonly used for skip links in accessibility implementations.

LANGUAGE: html
CODE:
<a class="visually-hidden-focusable" href="#content">Skip to main content</a>

----------------------------------------

TITLE: Horizontal Stack with Auto Margin in Bootstrap
DESCRIPTION: This example demonstrates a horizontal stack with auto margin utility applied to the second item for spacing.

LANGUAGE: html
CODE:
<div class="hstack gap-3">
  <div class="p-2">First item</div>
  <div class="p-2 ms-auto">Second item</div>
  <div class="p-2">Third item</div>
</div>

----------------------------------------

TITLE: Sticky Top Position in Bootstrap
DESCRIPTION: Illustrates how to make an element stick to the top of the viewport after scrolling past it using Bootstrap's sticky-top class.

LANGUAGE: html
CODE:
<div class="sticky-top">...</div>

----------------------------------------

TITLE: Removing Gutters in Bootstrap Grid
DESCRIPTION: Demonstrates how to remove gutters between columns using the .g-0 class, which eliminates negative margins from .row and horizontal padding from immediate child columns.

LANGUAGE: html
CODE:
<div class="row g-0 text-center">
  <div class="col-sm-6 col-md-8">.col-sm-6 .col-md-8</div>
  <div class="col-6 col-md-4">.col-6 .col-md-4</div>
</div>

----------------------------------------

TITLE: Color Background with Cards Component
DESCRIPTION: Demonstrates the application of text-bg-* utilities to Bootstrap cards, showing how to create colored cards with proper text contrast.

LANGUAGE: html
CODE:
<div class="card text-bg-primary mb-3" style="max-width: 18rem;">
  <div class="card-header">Header</div>
  <div class="card-body">
    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
  </div>
</div>
<div class="card text-bg-info mb-3" style="max-width: 18rem;">
  <div class="card-header">Header</div>
  <div class="card-body">
    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
  </div>
</div>

----------------------------------------

TITLE: Illustrating Pointer Events Utility Classes in HTML
DESCRIPTION: This example demonstrates the use of Bootstrap classes to control pointer events on elements. It shows how to prevent clicks on links and how to override inherited pointer-events properties.

LANGUAGE: html
CODE:
<p><a href="#" class="pe-none" tabindex="-1" aria-disabled="true">This link</a> can not be clicked.</p>
<p><a href="#" class="pe-auto">This link</a> can be clicked (this is default behavior).</p>
<p class="pe-none"><a href="#" tabindex="-1" aria-disabled="true">This link</a> can not be clicked because the <code>pointer-events</code> property is inherited from its parent. However, <a href="#" class="pe-auto">this link</a> has a <code>pe-auto</code> class and can be clicked.</p>

----------------------------------------

TITLE: Defining Root Focus Variables in SCSS
DESCRIPTION: Lists the SCSS variables used to define the default focus ring properties at the root level.

LANGUAGE: scss
CODE:
--bs-focus-ring-width: #{$focus-ring-width};
--bs-focus-ring-opacity: #{$focus-ring-opacity};
--bs-focus-ring-color: #{$focus-ring-color};

----------------------------------------

TITLE: Sizing Input Groups in Bootstrap
DESCRIPTION: Demonstrates how to adjust the size of input groups using Bootstrap's sizing classes.

LANGUAGE: HTML
CODE:
<div class="input-group input-group-sm mb-3">
  <span class="input-group-text" id="inputGroup-sizing-sm">Small</span>
  <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-sm">
</div>

<div class="input-group mb-3">
  <span class="input-group-text" id="inputGroup-sizing-default">Default</span>
  <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
</div>

<div class="input-group input-group-lg">
  <span class="input-group-text" id="inputGroup-sizing-lg">Large</span>
  <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-lg">
</div>

----------------------------------------

TITLE: Generating SRI Hash via OpenSSL
DESCRIPTION: Shell command to generate SRI hash for Bootstrap JavaScript files using OpenSSL

LANGUAGE: sh
CODE:
openssl dgst -sha384 -binary bootstrap.min.js | openssl base64 -A

----------------------------------------

TITLE: Card Group Layout in HTML
DESCRIPTION: Demonstrates how to create a group of cards with equal width and height.

LANGUAGE: HTML
CODE:
<div class="card-group">
  <div class="card">
    {{< placeholder width="100%" height="180" class="card-img-top" text="Image cap" >}}
    <div class="card-body">
      <h5 class="card-title">Card title</h5>
      <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
      <p class="card-text"><small class="text-body-secondary">Last updated 3 mins ago</small></p>
    </div>
  </div>
  <!-- Additional cards... -->
</div>

----------------------------------------

TITLE: Defining Focus Ring Variables in SCSS
DESCRIPTION: Lists the SCSS variables used to customize the focus ring styles across the project.

LANGUAGE: scss
CODE:
$focus-ring-width:      0.25rem;
$focus-ring-opacity:    .25;
$focus-ring-color:      rgba($primary, $focus-ring-opacity);
$focus-ring-blur:       0;
$focus-ring-box-shadow: 0 0 $focus-ring-blur $focus-ring-width $focus-ring-color;

----------------------------------------

TITLE: Adding Checkboxes and Radios to Input Groups in Bootstrap
DESCRIPTION: Shows how to incorporate checkboxes and radio buttons into Bootstrap input groups.

LANGUAGE: HTML
CODE:
<div class="input-group mb-3">
  <div class="input-group-text">
    <input class="form-check-input mt-0" type="checkbox" value="" aria-label="Checkbox for following text input">
  </div>
  <input type="text" class="form-control" aria-label="Text input with checkbox">
</div>

<div class="input-group">
  <div class="input-group-text">
    <input class="form-check-input mt-0" type="radio" value="" aria-label="Radio button for following text input">
  </div>
  <input type="text" class="form-control" aria-label="Text input with radio button">
</div>

----------------------------------------

TITLE: Creating Striped Rows in Bootstrap Tables
DESCRIPTION: Demonstrates how to add zebra-striping to table rows using the .table-striped class.

LANGUAGE: HTML
CODE:
<table class="table table-striped">
  <!-- Table content -->
</table>

----------------------------------------

TITLE: Installing Bootstrap via Ruby Bundler
DESCRIPTION: Ruby gem configuration for installing Bootstrap using Bundler

LANGUAGE: ruby
CODE:
gem 'bootstrap', '~> {{< param current_ruby_version >}}'

----------------------------------------

TITLE: Live Toast Example with JavaScript
DESCRIPTION: Interactive toast example with trigger button and toast container, including JavaScript initialization.

LANGUAGE: html
CODE:
<button type="button" class="btn btn-primary" id="liveToastBtn">Show live toast</button>

<div class="toast-container position-fixed bottom-0 end-0 p-3">
  <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
      <img src="..." class="rounded me-2" alt="...">
      <strong class="me-auto">Bootstrap</strong>
      <small>11 mins ago</small>
      <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
    <div class="toast-body">
      Hello, world! This is a toast message.
    </div>
  </div>
</div>

----------------------------------------

TITLE: Displaying Bootstrap Primary Logo HTML
DESCRIPTION: HTML markup for displaying the main Bootstrap logo with proper dimensions and responsive image handling.

LANGUAGE: html
CODE:
<div class="bd-brand-item px-2 py-5 mb-3 border rounded-3">
  <img class="d-block img-fluid mx-auto" src="/docs/{{< param docs_version >}}/assets/brand/bootstrap-logo.svg" alt="Bootstrap" width="256" height="204">
</div>

----------------------------------------

TITLE: Creating Input Groups with Multiple Inputs in Bootstrap
DESCRIPTION: Demonstrates how to create input groups with multiple input fields using Bootstrap classes.

LANGUAGE: HTML
CODE:
<div class="input-group">
  <span class="input-group-text">First and last name</span>
  <input type="text" aria-label="First name" class="form-control">
  <input type="text" aria-label="Last name" class="form-control">
</div>

----------------------------------------

TITLE: Installing Bootstrap via NuGet
DESCRIPTION: PowerShell commands for installing Bootstrap packages through NuGet

LANGUAGE: powershell
CODE:
Install-Package bootstrap
Install-Package bootstrap.sass

----------------------------------------

TITLE: Preventing Default Behavior in Bootstrap Modal Event
DESCRIPTION: Illustrates how to use event prevention in Bootstrap's JavaScript events. This example shows how to stop a modal from being shown by using the preventDefault() method on the 'show.bs.modal' event.

LANGUAGE: javascript
CODE:
const myModal = document.querySelector('#myModal')

myModal.addEventListener('show.bs.modal', event => {
  return event.preventDefault() // stops modal from being shown
})

----------------------------------------

TITLE: Creating Project Structure with Shell Commands
DESCRIPTION: Shell commands to create the initial project structure including directories and files

LANGUAGE: shell
CODE:
mkdir my-project && cd my-project
npm init -y

LANGUAGE: shell
CODE:
mkdir {src,src/js,src/scss}
touch src/index.html src/js/main.js src/scss/styles.scss vite.config.js

----------------------------------------

TITLE: Implementing Custom File Inputs in Bootstrap Input Groups
DESCRIPTION: Demonstrates how to create custom file input elements within input groups using Bootstrap classes.

LANGUAGE: HTML
CODE:
<div class="input-group mb-3">
  <label class="input-group-text" for="inputGroupFile01">Upload</label>
  <input type="file" class="form-control" id="inputGroupFile01">
</div>

----------------------------------------

TITLE: Running Bootstrap Documentation Locally
DESCRIPTION: Steps to set up and run the Bootstrap documentation locally using Hugo.

LANGUAGE: markdown
CODE:
1. Run through the [tooling setup](#tooling-setup) above to install all dependencies.
2. From the root `/bootstrap` directory, run `npm run docs-serve` in the command line.
3. Open `http://localhost:9001/` in your browser, and voilà.

----------------------------------------

TITLE: Installing Bootstrap Dependencies with npm
DESCRIPTION: Command to install local dependencies for Bootstrap development after navigating to the root directory.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Changing Display with Bootstrap Utilities
DESCRIPTION: Use Bootstrap's display utilities to responsively toggle common values of the display property. These can be combined with the grid system, content, or components for viewport-specific visibility.

LANGUAGE: css
CODE:
.d-flex

LANGUAGE: css
CODE:
.d-sm-flex

----------------------------------------

TITLE: HTML Template Setup with Bootstrap
DESCRIPTION: Basic HTML template with Bootstrap container and button components

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap w/ Vite</title>
    <script type="module" src="./js/main.js"></script>
  </head>
  <body>
    <div class="container py-4 px-3 mx-auto">
      <h1>Hello, Bootstrap and Vite!</h1>
      <button class="btn btn-primary">Primary button</button>
    </div>
  </body>
</html>

----------------------------------------

TITLE: Creating Auto-sizing Form Layout in Bootstrap
DESCRIPTION: Demonstrates how to create an auto-sizing form layout using Bootstrap's flexbox utilities and col-auto class.

LANGUAGE: HTML
CODE:
<form class="row gy-2 gx-3 align-items-center">
  <div class="col-auto">
    <label class="visually-hidden" for="autoSizingInput">Name</label>
    <input type="text" class="form-control" id="autoSizingInput" placeholder="Jane Doe">
  </div>
  <!-- More form fields -->
  <div class="col-auto">
    <button type="submit" class="btn btn-primary">Submit</button>
  </div>
</form>

----------------------------------------

TITLE: Defining Root Focus Variables in Bootstrap CSS
DESCRIPTION: This snippet demonstrates how the focus variables are reassigned to :root level CSS variables. These can be customized in real-time and include options for x and y offsets.

LANGUAGE: scss
CODE:
{{< scss-docs name="root-focus-variables" file="scss/_root.scss" >}}

----------------------------------------

TITLE: Basic Bootstrap Form Example
DESCRIPTION: Shows a standard Bootstrap form implementation with email input, password field, checkbox and submit button. Demonstrates core form styling classes and structure.

LANGUAGE: html
CODE:
<form>
  <div class="mb-3">
    <label for="exampleInputEmail1" class="form-label">Email address</label>
    <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">
    <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
  </div>
  <div class="mb-3">
    <label for="exampleInputPassword1" class="form-label">Password</label>
    <input type="password" class="form-control" id="exampleInputPassword1">
  </div>
  <div class="mb-3 form-check">
    <input type="checkbox" class="form-check-input" id="exampleCheck1">
    <label class="form-check-label" for="exampleCheck1">Check me out</label>
  </div>
  <button type="submit" class="btn btn-primary">Submit</button>
</form>

----------------------------------------

TITLE: Basic Bootstrap Form Example
DESCRIPTION: Shows a standard Bootstrap form implementation with email input, password field, checkbox and submit button. Demonstrates core form styling classes and structure.

LANGUAGE: html
CODE:
<form>
  <div class="mb-3">
    <label for="exampleInputEmail1" class="form-label">Email address</label>
    <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">
    <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
  </div>
  <div class="mb-3">
    <label for="exampleInputPassword1" class="form-label">Password</label>
    <input type="password" class="form-control" id="exampleInputPassword1">
  </div>
  <div class="mb-3 form-check">
    <input type="checkbox" class="form-check-input" id="exampleCheck1">
    <label class="form-check-label" for="exampleCheck1">Check me out</label>
  </div>
  <button type="submit" class="btn btn-primary">Submit</button>
</form>

----------------------------------------

TITLE: NPM Script Configuration
DESCRIPTION: Package.json script configuration for starting Vite development server

LANGUAGE: json
CODE:
{
  "scripts": {
    "start": "vite",
    "test": "echo \"Error: no test specified\" && exit 1"
  }
}

----------------------------------------

TITLE: Creating Sized Select with Bootstrap
DESCRIPTION: Shows how to create a select menu with a specific size using Bootstrap's form-select class and the size attribute. This example displays three options at a time.

LANGUAGE: HTML
CODE:
<select class="form-select" size="3" aria-label="Size 3 select example">
  <option selected>Open this select menu</option>
  <option value="1">One</option>
  <option value="2">Two</option>
  <option value="3">Three</option>
</select>

----------------------------------------

TITLE: Running Bootstrap npm Scripts
DESCRIPTION: Table of primary npm scripts for developing Bootstrap, including compiling CSS and JavaScript, building documentation, and running tests.

LANGUAGE: markdown
CODE:
| Task | Description |
| --- | --- |
| `npm start` | Compiles CSS and JavaScript, builds the documentation, and starts a local server. |
| `npm run dist` | Creates the `dist/` directory with compiled files. Uses [Sass](https://sass-lang.com/), [Autoprefixer](https://github.com/postcss/autoprefixer), and [terser](https://github.com/terser/terser). |
| `npm test` | Runs tests locally after running `npm run dist` |
| `npm run docs-serve` | Builds and runs the documentation locally. |

----------------------------------------

TITLE: Generating Custom Color Utilities in Bootstrap
DESCRIPTION: SCSS code to generate custom color utilities using Bootstrap's utility API and extended Sass maps.

LANGUAGE: SCSS
CODE:
@import "bootstrap/scss/functions";
@import "bootstrap/scss/variables";
@import "bootstrap/scss/variables-dark";
@import "bootstrap/scss/maps";
@import "bootstrap/scss/mixins";
@import "bootstrap/scss/utilities";

$all-colors: map-merge-multiple($blues, $indigos, $purples, $pinks, $reds, $oranges, $yellows, $greens, $teals, $cyans);

$utilities: map-merge(
  $utilities,
  (
    "color": map-merge(
      map-get($utilities, "color"),
      (
        values: map-merge(
          map-get(map-get($utilities, "color"), "values"),
          (
            $all-colors
          ),
        ),
      ),
    ),
  )
);

@import "bootstrap/scss/utilities/api";

----------------------------------------

TITLE: Defining Focus Ring Variables in Bootstrap Sass
DESCRIPTION: This snippet shows the Sass variables used to define default values for Bootstrap's custom :focus styles. These variables can be customized before compilation.

LANGUAGE: scss
CODE:
{{< scss-docs name="focus-ring-variables" file="scss/_variables.scss" >}}

----------------------------------------

TITLE: Creating Project Structure with Shell Commands
DESCRIPTION: Shell commands to create the initial project structure and npm initialization

LANGUAGE: sh
CODE:
mkdir my-project && cd my-project
npm init -y

----------------------------------------

TITLE: Implementing Disabled Select in Bootstrap
DESCRIPTION: Demonstrates how to create a disabled select menu using Bootstrap's form-select class and the disabled attribute. This gives the select a grayed-out appearance and removes pointer events.

LANGUAGE: HTML
CODE:
<select class="form-select" aria-label="Disabled select example" disabled>
  <option selected>Open this select menu</option>
  <option value="1">One</option>
  <option value="2">Two</option>
  <option value="3">Three</option>
</select>

----------------------------------------

TITLE: Link Color Customization Example
DESCRIPTION: Example showing how to customize link color opacity using CSS variables.

LANGUAGE: html
CODE:
<a href="#" style="--bs-link-opacity: .5">This is an example link</a>

----------------------------------------

TITLE: Vertical Stack for Buttons in Bootstrap
DESCRIPTION: This example uses .vstack to create a vertical stack of buttons with gap and column utilities for layout.

LANGUAGE: html
CODE:
<div class="vstack gap-2 col-md-5 mx-auto">
  <button type="button" class="btn btn-secondary">Save changes</button>
  <button type="button" class="btn btn-outline-secondary">Cancel</button>
</div>

----------------------------------------

TITLE: Basic HTML Template with Bootstrap
DESCRIPTION: Initial HTML template that includes Bootstrap CSS and JS file references

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap w/ Parcel</title>
    <link rel="stylesheet" href="scss/styles.scss">
    <script type="module" src="js/main.js"></script>
  </head>
  <body>
    <div class="container py-4 px-3 mx-auto">
      <h1>Hello, Bootstrap and Parcel!</h1>
      <button class="btn btn-primary">Primary button</button>
    </div>
  </body>
</html>

----------------------------------------

TITLE: Bootstrap Source Code Directory Structure
DESCRIPTION: Illustrates the directory structure of Bootstrap's source code distribution, including the dist folder for compiled assets, site documentation, and source files for SCSS and JavaScript.

LANGUAGE: text
CODE:
bootstrap/
├── dist/
│   ├── css/
│   └── js/
├── site/
│   └──content/
│      └── docs/
│          └── {{< param docs_version >}}/
│              └── examples/
├── js/
└── scss/

----------------------------------------

TITLE: Rendering Bootstrap Version Grid with Hugo Template
DESCRIPTION: A Hugo template that generates a responsive grid layout showing Bootstrap documentation versions. Uses list-group components to display version links, with special highlighting for the latest version. Includes sorting by version groups and individual versions within each group.

LANGUAGE: html
CODE:
{{< list-versions.inline >}}
<div class="row">
  {{- range $release := sort (index $.Site.Data "docs-versions") "group" "desc" }}
  <div class="col-md-6 col-lg-4 col-xl mb-4">
    <h2>{{ $release.group }}</h2>
    <p>{{ $release.description }}</p>
    {{- $versions := sort $release.versions "" "desc" -}}
    {{- range $i, $version := $versions }}
      {{- $len := len $versions -}}
      {{ if (eq $i 0) }}<div class="list-group">{{ end }}
        <a class="list-group-item list-group-item-action py-2 text-primary{{ if (eq $version $.Site.Params.docs_version) }} d-flex justify-content-between align-items-center{{ end }}" href="{{ urls.JoinPath $release.baseurl $version "/" }}">
          {{ $version }}
          {{ if (eq $version $.Site.Params.docs_version) -}}
          <span class="badge text-bg-primary">Latest</span>
          {{- end }}
        </a>
      {{ if (eq (add $i 1) $len) }}</div>{{ end }}
    {{ end -}}
  </div>
  {{ end -}}
</div>
{{< /list-versions.inline >}}

----------------------------------------

TITLE: Refreshing Scrollspy Elements in JavaScript
DESCRIPTION: This code demonstrates how to refresh Scrollspy instances when DOM elements are added or removed. It selects all elements with the 'data-bs-spy="scroll"' attribute and refreshes their Scrollspy instances.

LANGUAGE: javascript
CODE:
const dataSpyList = document.querySelectorAll('[data-bs-spy="scroll"]')
dataSpyList.forEach(dataSpyEl => {
  bootstrap.ScrollSpy.getInstance(dataSpyEl).refresh()
})

----------------------------------------

TITLE: Disabled Form Input Example
DESCRIPTION: Demonstrates how to create disabled form inputs using the disabled attribute. Shows single input implementation.

LANGUAGE: html
CODE:
<input class="form-control" id="disabledInput" type="text" placeholder="Disabled input here..." disabled>

----------------------------------------

TITLE: Browserslist Configuration for Bootstrap
DESCRIPTION: Contents of the .browserslistrc file defining supported browser versions for Bootstrap's autoprefixer configuration.

LANGUAGE: text
CODE:
{{< rf.inline >}}
{{- readFile ".browserslistrc" | chomp | htmlEscape -}}
{{< /rf.inline >}}

----------------------------------------

TITLE: Overriding Bootstrap's Box-sizing
DESCRIPTION: This CSS snippet shows how to override Bootstrap's global box-sizing setting for specific elements when necessary.

LANGUAGE: css
CODE:
.selector-for-some-widget {
  box-sizing: content-box;
}

----------------------------------------

TITLE: SCSS Divider Configuration
DESCRIPTION: Demonstrates how to configure breadcrumb dividers using SCSS variables with the quote function.

LANGUAGE: scss
CODE:
$breadcrumb-divider: quote(">");

----------------------------------------

TITLE: Additional Icons Template
DESCRIPTION: Shortcode implementation for displaying additional icon options using markdown and inline templating.

LANGUAGE: markdown
CODE:
{{< markdown >}}
{{< icons.inline type="more" />}}
{{< /markdown >}}

----------------------------------------

TITLE: Code Element Example
DESCRIPTION: Example showing proper usage of inline code elements with HTML escaping.

LANGUAGE: html
CODE:
For example, <code>&lt;section&gt;</code> should be wrapped as inline.

----------------------------------------

TITLE: Between Breakpoints Media Query Example
DESCRIPTION: Example of using Bootstrap's media query mixin to target styles between specific breakpoints.

LANGUAGE: scss
CODE:
@include media-breakpoint-between(md, xl) { ... }

// Example
// Apply styles starting from medium devices and up to extra large devices
@media (min-width: 768px) and (max-width: 1199.98px) { ... }

----------------------------------------

TITLE: Defining Badge CSS Variables in SCSS
DESCRIPTION: Shows the local CSS variables used for badges in Bootstrap 5.2.0+. These variables allow for enhanced real-time customization of badge styles.

LANGUAGE: scss
CODE:
--#{$prefix}badge-padding-x: #{$badge-padding-x};
--#{$prefix}badge-padding-y: #{$badge-padding-y};
@include rfs($badge-font-size, --#{$prefix}badge-font-size);
--#{$prefix}badge-font-weight: #{$badge-font-weight};
--#{$prefix}badge-color: #{$badge-color};
--#{$prefix}badge-border-radius: #{$badge-border-radius};

----------------------------------------

TITLE: Fixed Bottom Position in Bootstrap
DESCRIPTION: Shows how to position an element fixed at the bottom of the viewport using Bootstrap's fixed-bottom class. The element will span the full width of the viewport and remain fixed regardless of scrolling.

LANGUAGE: html
CODE:
<div class="fixed-bottom">...</div>

----------------------------------------

TITLE: CSS Z-Index Scale Example
DESCRIPTION: Demonstrates Bootstrap's z-index hierarchy for component elements, where 0 is default, 1 is hover, 2 is active/focused, and 3 is focus state.

LANGUAGE: CSS
CODE:
z-index: 0; /* default state */
z-index: 1; /* :hover state */
z-index: 2; /* :active/.active state */
z-index: 3; /* :focus state */

----------------------------------------

TITLE: Using title or data-bs-title Attributes for Bootstrap Tooltips in HTML
DESCRIPTION: This snippet demonstrates the flexibility in using either 'title' or 'data-bs-title' attributes for Bootstrap tooltips in HTML. It explains that when 'title' is used, Popper automatically replaces it with 'data-bs-title' during the rendering process.

LANGUAGE: HTML
CODE:
<element title="Tooltip content"></element>

LANGUAGE: HTML
CODE:
<element data-bs-title="Tooltip content"></element>

----------------------------------------

TITLE: Rendering Translation Links with Hugo Template
DESCRIPTION: A Hugo template snippet that generates an unordered list of translation links using data from Site.Data.translations. Each link includes the translation's URL, language code, and description.

LANGUAGE: html
CODE:
{{< translations.inline >}}
<ul>
{{ range .Site.Data.translations -}}
  <li><a href="{{ .url }}" hreflang="{{ .code }}" lang="{{ .code }}">{{ .description }} ({{ .name }})</a></li>
{{ end -}}
</ul>
{{< /translations.inline >}}

----------------------------------------

TITLE: HTML Implementation of Visually Hidden Elements
DESCRIPTION: Examples showing how to use the .visually-hidden and .visually-hidden-focusable classes for creating accessible but visually hidden elements.

LANGUAGE: html
CODE:
<h2 class="visually-hidden">Title for screen readers</h2>
<a class="visually-hidden-focusable" href="#content">Skip to main content</a>
<div class="visually-hidden-focusable">A container with a <a href="#">focusable element</a>.</div>

----------------------------------------

TITLE: Stacked Progress Bar Example
DESCRIPTION: New markup structure for stacked progress bars using progress-stacked class

LANGUAGE: html
CODE:
<!-- Previous markup -->
<div class="progress">
  <div class="progress-bar" role="progressbar" aria-label="Segment one" style="width: 15%" aria-valuenow="15" aria-valuemin="0" aria-valuemax="100"></div>
  <div class="progress-bar bg-success" role="progressbar" aria-label="Segment two" style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"></div>
  <div class="progress-bar bg-info" role="progressbar" aria-label="Segment three" style="width: 20%" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100"></div>
</div>

<!-- New markup -->
<div class="progress-stacked">
  <div class="progress" role="progressbar" aria-label="Segment one" aria-valuenow="15" aria-valuemin="0" aria-valuemax="100" style="width: 15%">
    <div class="progress-bar"></div>
  </div>
  <div class="progress" role="progressbar" aria-label="Segment two" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100" style="width: 30%">
    <div class="progress-bar bg-success"></div>
  </div>
  <div class="progress" role="progressbar" aria-label="Segment three" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100" style="width: 20%">
    <div class="progress-bar bg-info"></div>
  </div>
</div>

----------------------------------------

TITLE: Aligning Content in Flex Containers
DESCRIPTION: Shows how to align flex items together on the cross axis using Bootstrap's align-content utility classes.

LANGUAGE: HTML
CODE:
<div class="d-flex align-content-start flex-wrap">
  ...
</div>

LANGUAGE: HTML
CODE:
<div class="d-flex align-content-end flex-wrap">...</div>

LANGUAGE: HTML
CODE:
<div class="d-flex align-content-center flex-wrap">...</div>

LANGUAGE: HTML
CODE:
<div class="d-flex align-content-between flex-wrap">...</div>

LANGUAGE: HTML
CODE:
<div class="d-flex align-content-around flex-wrap">...</div>

LANGUAGE: HTML
CODE:
<div class="d-flex align-content-stretch flex-wrap">...</div>

----------------------------------------

TITLE: Rendering Team Member List in HTML with Hugo Templating
DESCRIPTION: This snippet generates a list of Bootstrap team members using Hugo templating. It iterates through the core-team data and creates a list group with each member's GitHub avatar, name, and username.

LANGUAGE: html
CODE:
{{< team.inline >}}
<div class="list-group mb-3">
  {{- range (index $.Site.Data "core-team") }}
    <a class="list-group-item list-group-item-action d-flex align-items-center" href="https://github.com/{{ .user }}">
      <img src="https://github.com/{{ .user }}.png" alt="@{{ .user }}" width="32" height="32" class="rounded me-2" loading="lazy">
      <span>
        <strong>{{ .name }}</strong> @{{ .user }}
      </span>
    </a>
  {{ end -}}
</div>
{{< /team.inline >}}

----------------------------------------

TITLE: Displaying Block Elements with Bootstrap Classes
DESCRIPTION: This example shows how to use Bootstrap classes to display elements as blocks with background colors.

LANGUAGE: HTML
CODE:
<span class="d-block p-2 text-bg-primary">d-block</span>
<span class="d-block p-2 text-bg-dark">d-block</span>

----------------------------------------

TITLE: HTML Example with Abbreviation
DESCRIPTION: Demonstrates the use of the HTML abbreviation element within Bootstrap's documentation example wrapper.

LANGUAGE: html
CODE:
<div class="bd-example">
  The <abbr title="HyperText Markup Language">HTML</abbr> abbreviation element.
</div>

----------------------------------------

TITLE: Declaring Position Utilities in SCSS
DESCRIPTION: Demonstrates how position utilities are declared in the utilities API. This allows for easy customization and extension of the positioning system.

LANGUAGE: scss
CODE:
"position": (
  property: position,
  values: static relative absolute fixed sticky
),
"top": (
  property: top,
  values: $position-values
),
"bottom": (
  property: bottom,
  values: $position-values
),
"start": (
  property: left,
  class: start,
  values: $position-values
),
"end": (
  property: right,
  class: end,
  values: $position-values
),
"translate-middle": (
  property: transform,
  class: translate-middle,
  values: (
    null: translate(-50%, -50%),
    x: translateX(-50%),
    y: translateY(-50%),
  )
),

----------------------------------------

TITLE: Declaring Position Utilities in SCSS
DESCRIPTION: Demonstrates how position utilities are declared in the utilities API. This allows for easy customization and extension of the positioning system.

LANGUAGE: scss
CODE:
"position": (
  property: position,
  values: static relative absolute fixed sticky
),
"top": (
  property: top,
  values: $position-values
),
"bottom": (
  property: bottom,
  values: $position-values
),
"start": (
  property: left,
  class: start,
  values: $position-values
),
"end": (
  property: right,
  class: end,
  values: $position-values
),
"translate-middle": (
  property: transform,
  class: translate-middle,
  values: (
    null: translate(-50%, -50%),
    x: translateX(-50%),
    y: translateY(-50%),
  )
),

----------------------------------------

TITLE: Displaying Bootstrap Black and White Logos HTML
DESCRIPTION: HTML structure for showing both black and white versions of the Bootstrap logo side by side with responsive layout.

LANGUAGE: html
CODE:
<div class="bd-brand-logos d-sm-flex text-center bg-light rounded-3 overflow-hidden w-100 mb-3">
  <div class="bd-brand-item w-100 px-2 py-5">
    <img src="/docs/{{< param docs_version >}}/assets/brand/bootstrap-logo-black.svg" alt="Bootstrap" width="128" height="102" loading="lazy">
  </div>
  <div class="bd-brand-item w-100 px-2 py-5 inverse">
    <img src="/docs/{{< param docs_version >}}/assets/brand/bootstrap-logo-white.svg" alt="Bootstrap" width="128" height="102" loading="lazy">
  </div>
</div>

----------------------------------------

TITLE: Using Import Maps for Bootstrap and Popper in HTML
DESCRIPTION: Shows how to set up import maps to resolve module specifiers for Bootstrap and Popper, enabling their use as ES modules in the browser. This approach is necessary for proper module resolution.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="{{< param "cdn.css" >}}" rel="stylesheet" integrity="{{< param "cdn.css_hash" >}}" crossorigin="anonymous">
    <title>Hello, modularity!</title>
  </head>
  <body>
    <h1>Hello, modularity!</h1>
    <button id="popoverButton" type="button" class="btn btn-primary btn-lg" data-bs-toggle="popover" title="ESM in Browser" data-bs-content="Bang!">Custom popover</button>

    <script async src="https://cdn.jsdelivr.net/npm/es-module-shims@1/dist/es-module-shims.min.js" crossorigin="anonymous"></script>
    <script type="importmap">
    {
      "imports": {
        "@popperjs/core": "{{< param "cdn.popper_esm" >}}",
        "bootstrap": "https://cdn.jsdelivr.net/npm/bootstrap@{{< param "current_version" >}}/dist/js/bootstrap.esm.min.js"
      }
    }
    </script>
    <script type="module">
      import * as bootstrap from 'bootstrap'

      new bootstrap.Popover(document.getElementById('popoverButton'))
    </script>
  </body>
</html>

----------------------------------------

TITLE: No Divider Configuration SCSS
DESCRIPTION: Shows how to remove breadcrumb dividers by setting the SCSS variable to none.

LANGUAGE: scss
CODE:
$breadcrumb-divider: none;

----------------------------------------

TITLE: Creating a Bootstrap Collapse Instance
DESCRIPTION: This code shows how to create a collapse instance with custom options using the constructor.

LANGUAGE: javascript
CODE:
const bsCollapse = new bootstrap.Collapse('#myCollapse', {
  toggle: false
})

----------------------------------------

TITLE: Rendering Documentation Footer with GitHub Links
DESCRIPTION: A footer element combining HTML horizontal rule styling and Markdown links to GitHub issues and discussions. Uses site parameters to populate repository URLs.

LANGUAGE: html
CODE:
<hr class="my-5">

_See something wrong or out of date here? Please [open an issue on GitHub]({{ .Site.Params.repo }}/issues/new/choose). Need help troubleshooting? [Search or start a discussion]({{ .Site.Params.repo }}/discussions) on GitHub._

----------------------------------------

TITLE: Positioning Bootstrap Badges in HTML
DESCRIPTION: Demonstrates how to position badges in the corner of a link or button using utility classes. Includes an example with a visually hidden text for accessibility.

LANGUAGE: html
CODE:
<button type="button" class="btn btn-primary position-relative">
  Inbox
  <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
    99+
    <span class="visually-hidden">unread messages</span>
  </span>
</button>

----------------------------------------

TITLE: Cloning Bootstrap Repository with Git
DESCRIPTION: Command to clone the Bootstrap repository using Git.

LANGUAGE: shell
CODE:
git clone https://github.com/twbs/bootstrap.git

----------------------------------------

TITLE: Adding Event Listener to Bootstrap Collapse
DESCRIPTION: This snippet demonstrates how to add an event listener to a collapse element for the 'hidden.bs.collapse' event.

LANGUAGE: javascript
CODE:
const myCollapsible = document.getElementById('myCollapsible')
myCollapsible.addEventListener('hidden.bs.collapse', event => {
  // do something...
})

----------------------------------------

TITLE: YAML Front Matter Configuration for 404 Page
DESCRIPTION: YAML configuration block that sets up the page metadata, layout, and search engine behavior for a 404 error page.

LANGUAGE: yaml
CODE:
---
title: "404 - File not found"
layout: 404
description: ""
url: /404.html
robots: noindex,follow
sitemap:
  disable: true
---

----------------------------------------

TITLE: Configuring Bootstrap Components with Data Attributes in HTML
DESCRIPTION: Demonstrates how to use data attributes to pass options to Bootstrap components. It shows the conversion from camelCase to kebab-case and introduces the experimental data-bs-config attribute for JSON-based configuration.

LANGUAGE: html
CODE:
<div data-bs-animation="{value}"></div>

LANGUAGE: html
CODE:
<div data-bs-custom-class="beautifier"></div>

LANGUAGE: html
CODE:
<div data-bs-config='{"delay":0, "title":123}' data-bs-title="456"></div>

LANGUAGE: html
CODE:
<div data-bs-delay='{"show":0,"hide":150}'></div>

----------------------------------------

TITLE: Bootstrap 404 Error Page HTML Layout
DESCRIPTION: HTML markup for a centered 404 error message using Bootstrap's typography and spacing utility classes.

LANGUAGE: html
CODE:
<div class="text-center py-5">
  <h1 class="display-1">404</h1>
  <h2>File not found</h2>
</div>

----------------------------------------

TITLE: Creating Button Toolbar in HTML with Bootstrap
DESCRIPTION: Shows how to create a button toolbar by combining multiple button groups. Utility classes are used for spacing, and different button styles are applied to each group.

LANGUAGE: HTML
CODE:
<div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
  <div class="btn-group me-2" role="group" aria-label="First group">
    <button type="button" class="btn btn-primary">1</button>
    <button type="button" class="btn btn-primary">2</button>
    <button type="button" class="btn btn-primary">3</button>
    <button type="button" class="btn btn-primary">4</button>
  </div>
  <div class="btn-group me-2" role="group" aria-label="Second group">
    <button type="button" class="btn btn-secondary">5</button>
    <button type="button" class="btn btn-secondary">6</button>
    <button type="button" class="btn btn-secondary">7</button>
  </div>
  <div class="btn-group" role="group" aria-label="Third group">
    <button type="button" class="btn btn-info">8</button>
  </div>
</div>

----------------------------------------

TITLE: Implementing Synchronous Tests in Bootstrap with Jasmine
DESCRIPTION: Example of synchronous unit tests for the getInstance method, demonstrating proper test structure and assertions using Jasmine's expect functionality. Shows both negative and positive test cases for instance retrieval.

LANGUAGE: javascript
CODE:
describe('getInstance', () => {
  it('should return null if there is no instance', () => {
    // Make assertion
    expect(Tab.getInstance(fixtureEl)).toBeNull()
  })

  it('should return this instance', () => {
    fixtureEl.innerHTML = '<div></div>'

    const divEl = fixtureEl.querySelector('div')
    const tab = new Tab(divEl)

    // Make assertion
    expect(Tab.getInstance(divEl)).toEqual(tab)
  })
})

----------------------------------------

TITLE: Creating a Media Object with Flex Utilities
DESCRIPTION: Demonstrates how to recreate the media object component using Bootstrap's flex utilities.

LANGUAGE: HTML
CODE:
<div class="d-flex">
  <div class="flex-shrink-0">
    <img src="..." alt="...">
  </div>
  <div class="flex-grow-1 ms-3">
    This is some content from a media component. You can replace this with any content and adjust it as needed.
  </div>
</div>

----------------------------------------

TITLE: Implementing Hoverable Rows in Bootstrap Tables
DESCRIPTION: Shows how to enable a hover state on table rows using the .table-hover class.

LANGUAGE: HTML
CODE:
<table class="table table-hover">
  <!-- Table content -->
</table>

----------------------------------------

TITLE: Implementing Nested Button Group with Dropdown in HTML using Bootstrap
DESCRIPTION: Demonstrates how to create a nested button group with a dropdown menu using Bootstrap classes. The dropdown is created within a button group, which is itself part of a larger button group.

LANGUAGE: HTML
CODE:
<div class="btn-group" role="group" aria-label="Button group with nested dropdown">
  <button type="button" class="btn btn-primary">1</button>
  <button type="button" class="btn btn-primary">2</button>

  <div class="btn-group" role="group">
    <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
      Dropdown
    </button>
    <ul class="dropdown-menu">
      <li><a class="dropdown-item" href="#">Dropdown link</a></li>
      <li><a class="dropdown-item" href="#">Dropdown link</a></li>
    </ul>
  </div>
</div>

----------------------------------------

TITLE: Bootstrap Package Directory Structure
DESCRIPTION: Directory structure of the Bootstrap package, showing the organization of CSS and JS files.

LANGUAGE: text
CODE:
bootstrap/
├── css/
│   ├── bootstrap-grid.css
│   ├── bootstrap-grid.css.map
│   ├── bootstrap-grid.min.css
│   ├── bootstrap-grid.min.css.map
│   ├── bootstrap-grid.rtl.css
│   ├── bootstrap-grid.rtl.css.map
│   ├── bootstrap-grid.rtl.min.css
│   ├── bootstrap-grid.rtl.min.css.map
│   ├── bootstrap-reboot.css
│   ├── bootstrap-reboot.css.map
│   ├── bootstrap-reboot.min.css
│   ├── bootstrap-reboot.min.css.map
│   ├── bootstrap-reboot.rtl.css
│   ├── bootstrap-reboot.rtl.css.map
│   ├── bootstrap-reboot.rtl.min.css
│   ├── bootstrap-reboot.rtl.min.css.map
│   ├── bootstrap-utilities.css
│   ├── bootstrap-utilities.css.map
│   ├── bootstrap-utilities.min.css
│   ├── bootstrap-utilities.min.css.map
│   ├── bootstrap-utilities.rtl.css
│   ├── bootstrap-utilities.rtl.css.map
│   ├── bootstrap-utilities.rtl.min.css
│   ├── bootstrap-utilities.rtl.min.css.map
│   ├── bootstrap.css
│   ├── bootstrap.css.map
│   ├── bootstrap.min.css
│   ├── bootstrap.min.css.map
│   ├── bootstrap.rtl.css
│   ├── bootstrap.rtl.css.map
│   ├── bootstrap.rtl.min.css
│   └── bootstrap.rtl.min.css.map
└── js/
    ├── bootstrap.bundle.js
    ├── bootstrap.bundle.js.map
    ├── bootstrap.bundle.min.js
    ├── bootstrap.bundle.min.js.map
    ├── bootstrap.esm.js
    ├── bootstrap.esm.js.map
    ├── bootstrap.esm.min.js
    ├── bootstrap.esm.min.js.map
    ├── bootstrap.js
    ├── bootstrap.js.map
    ├── bootstrap.min.js
    └── bootstrap.min.js.map

----------------------------------------

TITLE: Importing Bootstrap Sass in Webpack Project
DESCRIPTION: SCSS code to import all of Bootstrap's source Sass into the project.

LANGUAGE: scss
CODE:
// Import all of Bootstrap's CSS
@import "bootstrap/scss/bootstrap";

----------------------------------------

TITLE: Including Bootstrap via CDN with Separate Popper
DESCRIPTION: HTML code to include Bootstrap's compiled CSS and JS with separate Popper dependency from jsDelivr CDN

LANGUAGE: html
CODE:
<script src="{{< param "cdn.popper" >}}" integrity="{{< param "cdn.popper_hash" >}}" crossorigin="anonymous"></script>
<script src="{{< param "cdn.js" >}}" integrity="{{< param "cdn.js_hash" >}}" crossorigin="anonymous"></script>

----------------------------------------

TITLE: Adding Indicators to Bootstrap Carousel in HTML
DESCRIPTION: This example shows how to add indicators to the carousel, allowing users to jump directly to a particular slide.

LANGUAGE: HTML
CODE:
<div id="carouselExampleIndicators" class="carousel slide">
  <div class="carousel-indicators">
    <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
    <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
    <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
  </div>
  <div class="carousel-inner">
    <!-- Carousel items here -->
  </div>
  <!-- Previous/Next controls here -->
</div>

----------------------------------------

TITLE: Updated Progress Bar Markup
DESCRIPTION: New markup structure for progress bars moving role and aria attributes to outer element

LANGUAGE: html
CODE:
<!-- Previous markup -->
<div class="progress">
  <div class="progress-bar" role="progressbar" aria-label="Basic example" style="width: 25%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
</div>

<!-- New markup -->
<div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar" style="width: 25%"></div>
</div>

----------------------------------------

TITLE: Initializing Bootstrap Tooltips with JavaScript
DESCRIPTION: Basic initialization code to enable tooltips on a page by selecting elements with data-bs-toggle="tooltip" attribute.

LANGUAGE: javascript
CODE:
const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))

----------------------------------------

TITLE: Initializing Bootstrap Carousel with JavaScript
DESCRIPTION: This snippet shows how to manually initialize a Bootstrap Carousel using JavaScript, including setting custom options like interval and touch support.

LANGUAGE: JavaScript
CODE:
const myCarouselElement = document.querySelector('#myCarousel')

const carousel = new bootstrap.Carousel(myCarouselElement, {
  interval: 2000,
  touch: false
})

----------------------------------------

TITLE: JavaScript Plugin Initialization
DESCRIPTION: New syntax for initializing Bootstrap plugins using CSS selectors

LANGUAGE: javascript
CODE:
const modal = new bootstrap.Modal('#myModal')
const dropdown = new bootstrap.Dropdown('[data-bs-toggle="dropdown"]')

----------------------------------------

TITLE: Modal Event Listener in JavaScript
DESCRIPTION: Demonstrates how to add an event listener to a modal for the 'hidden.bs.modal' event.

LANGUAGE: JavaScript
CODE:
const myModalEl = document.getElementById('myModal')
myModalEl.addEventListener('hidden.bs.modal', event => {
  // do something...
})

----------------------------------------

TITLE: Scrollable Modal in HTML
DESCRIPTION: Shows how to create a scrollable modal by adding the 'modal-dialog-scrollable' class.

LANGUAGE: HTML
CODE:
<div class="modal-dialog modal-dialog-scrollable">
  ...
</div>

----------------------------------------

TITLE: Customizing Bootstrap's Sanitizer
DESCRIPTION: Demonstrates how to customize Bootstrap's built-in sanitizer for Tooltips and Popovers. This includes adding new elements and attributes to the allowList and using a custom sanitizer function.

LANGUAGE: javascript
CODE:
const myDefaultAllowList = bootstrap.Tooltip.Default.allowList

// To allow table elements
myDefaultAllowList.table = []

// To allow td elements and data-bs-option attributes on td elements
myDefaultAllowList.td = ['data-bs-option']

// You can push your custom regex to validate your attributes.
// Be careful about your regular expressions being too lax
const myCustomRegex = /^data-my-app-[\w-]+/
myDefaultAllowList['*'].push(myCustomRegex)

const yourTooltipEl = document.querySelector('#yourTooltip')
const tooltip = new bootstrap.Tooltip(yourTooltipEl, {
  sanitizeFn(content) {
    return DOMPurify.sanitize(content)
  }
})

----------------------------------------

TITLE: Basic Three Column Grid Layout in Bootstrap
DESCRIPTION: Creates three equal-width columns using Bootstrap's CSS Grid system with the .g-col-4 class.

LANGUAGE: html
CODE:
<div class="grid text-center">
  <div class="g-col-4">.g-col-4</div>
  <div class="g-col-4">.g-col-4</div>
  <div class="g-col-4">.g-col-4</div>
</div>

----------------------------------------

TITLE: Implementing Small Spinner in Button in HTML
DESCRIPTION: Shows how to use a small spinner within a button to indicate an action is processing.

LANGUAGE: HTML
CODE:
<button class="btn btn-primary" type="button" disabled>
  <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
  <span class="visually-hidden" role="status">Loading...</span>
</button>

----------------------------------------

TITLE: Creating Custom Select Inputs in Bootstrap Input Groups
DESCRIPTION: Shows how to implement custom select inputs within input groups using Bootstrap classes.

LANGUAGE: HTML
CODE:
<div class="input-group mb-3">
  <label class="input-group-text" for="inputGroupSelect01">Options</label>
  <select class="form-select" id="inputGroupSelect01">
    <option selected>Choose...</option>
    <option value="1">One</option>
    <option value="2">Two</option>
    <option value="3">Three</option>
  </select>
</div>

----------------------------------------

TITLE: Bootstrap Pagination SCSS Variables
DESCRIPTION: SCSS variables used for customizing pagination components in Bootstrap.

LANGUAGE: scss
CODE:
--#{$prefix}pagination-padding-x: #{$pagination-padding-x};
--#{$prefix}pagination-padding-y: #{$pagination-padding-y};
--#{$prefix}pagination-font-size: #{$pagination-font-size};
--#{$prefix}pagination-color: #{$pagination-color};
--#{$prefix}pagination-bg: #{$pagination-bg};
--#{$prefix}pagination-border-width: #{$pagination-border-width};
--#{$prefix}pagination-border-color: #{$pagination-border-color};
--#{$prefix}pagination-border-radius: #{$pagination-border-radius};
--#{$prefix}pagination-hover-color: #{$pagination-hover-color};
--#{$prefix}pagination-hover-bg: #{$pagination-hover-bg};
--#{$prefix}pagination-hover-border-color: #{$pagination-hover-border-color};
--#{$prefix}pagination-focus-color: #{$pagination-focus-color};
--#{$prefix}pagination-focus-bg: #{$pagination-focus-bg};
--#{$prefix}pagination-focus-box-shadow: #{$pagination-focus-box-shadow};
--#{$prefix}pagination-active-color: #{$pagination-active-color};
--#{$prefix}pagination-active-bg: #{$pagination-active-bg};
--#{$prefix}pagination-active-border-color: #{$pagination-active-border-color};
--#{$prefix}pagination-disabled-color: #{$pagination-disabled-color};
--#{$prefix}pagination-disabled-bg: #{$pagination-disabled-bg};
--#{$prefix}pagination-disabled-border-color: #{$pagination-disabled-border-color};

----------------------------------------

TITLE: Pagination with Icons in Bootstrap
DESCRIPTION: Implementation of pagination using icons instead of text, with proper ARIA attributes for accessibility.

LANGUAGE: html
CODE:
<nav aria-label="Page navigation example">
  <ul class="pagination">
    <li class="page-item">
      <a class="page-link" href="#" aria-label="Previous">
        <span aria-hidden="true">&laquo;</span>
      </a>
    </li>
    <li class="page-item"><a class="page-link" href="#">1</a></li>
    <li class="page-item"><a class="page-link" href="#">2</a></li>
    <li class="page-item"><a class="page-link" href="#">3</a></li>
    <li class="page-item">
      <a class="page-link" href="#" aria-label="Next">
        <span aria-hidden="true">&raquo;</span>
      </a>
    </li>
  </ul>
</nav>

----------------------------------------

TITLE: Progress Bar with Width Utilities
DESCRIPTION: Example showing how to use Bootstrap utility classes to set progress bar width without inline styles.

LANGUAGE: HTML
CODE:
<div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar w-75"></div>
</div>

----------------------------------------

TITLE: Bootstrap Name Usage Example HTML
DESCRIPTION: HTML markup demonstrating correct and incorrect usage of the Bootstrap brand name with visual indicators.

LANGUAGE: html
CODE:
<div class="bd-brand-logos d-sm-flex text-center border rounded-3 overflow-hidden w-100 mb-3">
  <div class="bd-brand-item w-100 px-2 py-5">
    <div class="h3">Bootstrap</div>
    <strong class="text-success">Correct</strong>
  </div>
  <div class="bd-brand-item w-100 px-2 py-5">
    <div class="h3 text-body-secondary">BootStrap</div>
    <strong class="text-danger">Incorrect</strong>
  </div>
</div>

----------------------------------------

TITLE: Implementing Horizontal Gutters in Bootstrap Grid
DESCRIPTION: Demonstrates how to use the .gx-* classes to control horizontal gutter widths in a Bootstrap grid layout. Includes an example with increased padding to prevent overflow.

LANGUAGE: html
CODE:
<div class="container px-4 text-center">
  <div class="row gx-5">
    <div class="col">
     <div class="p-3">Custom column padding</div>
    </div>
    <div class="col">
      <div class="p-3">Custom column padding</div>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Creating Custom 2:1 Aspect Ratio in HTML
DESCRIPTION: This snippet demonstrates how to create a custom 2:1 aspect ratio using the CSS variable --bs-aspect-ratio.

LANGUAGE: html
CODE:
<div class="ratio" style="--bs-aspect-ratio: 50%;">
  <div>2x1</div>
</div>

----------------------------------------

TITLE: Implementing Horizontal & Vertical Gutters in Bootstrap Grid
DESCRIPTION: Demonstrates the use of .g-* classes to control both horizontal and vertical grid gutters simultaneously. Uses a smaller gutter width to avoid overflow issues.

LANGUAGE: html
CODE:
<div class="container text-center">
  <div class="row g-2">
    <div class="col-6">
      <div class="p-3">Custom column padding</div>
    </div>
    <div class="col-6">
      <div class="p-3">Custom column padding</div>
    </div>
    <div class="col-6">
      <div class="p-3">Custom column padding</div>
    </div>
    <div class="col-6">
      <div class="p-3">Custom column padding</div>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Initializing Bootstrap Plugins with JavaScript
DESCRIPTION: Demonstrates how to initialize Bootstrap plugins programmatically using JavaScript. This includes examples of initializing with default and custom configurations, as well as retrieving plugin instances.

LANGUAGE: javascript
CODE:
const myModalEl = document.querySelector('#myModal')
const modal = new bootstrap.Modal(myModalEl) // initialized with defaults

const configObject = { keyboard: false }
const modal1 = new bootstrap.Modal(myModalEl, configObject) // initialized with no keyboard

bootstrap.Popover.getInstance(myPopoverEl)

bootstrap.Popover.getOrCreateInstance(myPopoverEl, configObject)

----------------------------------------

TITLE: Initializing Bootstrap Plugins with JavaScript
DESCRIPTION: Demonstrates how to initialize Bootstrap plugins programmatically using JavaScript. This includes examples of initializing with default and custom configurations, as well as retrieving plugin instances.

LANGUAGE: javascript
CODE:
const myModalEl = document.querySelector('#myModal')
const modal = new bootstrap.Modal(myModalEl) // initialized with defaults

const configObject = { keyboard: false }
const modal1 = new bootstrap.Modal(myModalEl, configObject) // initialized with no keyboard

bootstrap.Popover.getInstance(myPopoverEl)

bootstrap.Popover.getOrCreateInstance(myPopoverEl, configObject)

----------------------------------------

TITLE: Defining Dark Mode CSS Variables in Bootstrap
DESCRIPTION: This snippet demonstrates the CSS variables specific to Bootstrap's built-in dark mode. These variables are scoped to the [data-bs-theme=dark] selector.

LANGUAGE: css
CODE:
[data-bs-theme=dark] {([^}]*)}

----------------------------------------

TITLE: Defining Overflow Utilities in Sass
DESCRIPTION: This SCSS code defines the overflow utilities in Bootstrap's utility API. It specifies the CSS properties, class name, and values for generating the overflow utility classes.

LANGUAGE: scss
CODE:
"overflow": (
  responsive: true,
  property: overflow,
  values: auto hidden visible scroll,
),
"overflow-x": (
  responsive: true,
  property: overflow-x,
  values: auto hidden visible scroll,
),
"overflow-y": (
  responsive: true,
  property: overflow-y,
  values: auto hidden visible scroll,
)

----------------------------------------

TITLE: Applying Vertical Alignment to Inline Elements in HTML
DESCRIPTION: This snippet demonstrates how to use Bootstrap's vertical alignment classes with inline span elements. It shows examples of baseline, top, middle, bottom, text-top, and text-bottom alignments.

LANGUAGE: HTML
CODE:
<span class="align-baseline">baseline</span>
<span class="align-top">top</span>
<span class="align-middle">middle</span>
<span class="align-bottom">bottom</span>
<span class="align-text-top">text-top</span>
<span class="align-text-bottom">text-bottom</span>

----------------------------------------

TITLE: Viewport-Relative Sizing in Bootstrap HTML
DESCRIPTION: This code snippet illustrates how to use Bootstrap's viewport-relative sizing utilities to set element dimensions based on the viewport size. It includes examples for minimum and full viewport width and height.

LANGUAGE: html
CODE:
<div class="min-vw-100">Min-width 100vw</div>
<div class="min-vh-100">Min-height 100vh</div>
<div class="vw-100">Width 100vw</div>
<div class="vh-100">Height 100vh</div>

----------------------------------------

TITLE: Implementing Text Truncation in HTML with Bootstrap
DESCRIPTION: This snippet demonstrates how to use the .text-truncate class in Bootstrap for both block-level and inline-level elements. It requires display: inline-block or display: block to function properly.

LANGUAGE: html
CODE:
<!-- Block level -->
<div class="row">
  <div class="col-2 text-truncate">
    This text is quite long, and will be truncated once displayed.
  </div>
</div>

<!-- Inline level -->
<span class="d-inline-block text-truncate" style="max-width: 150px;">
  This text is quite long, and will be truncated once displayed.
</span>

----------------------------------------

TITLE: Creating a Card with Stretched Link in Bootstrap
DESCRIPTION: This example demonstrates how to create a Bootstrap card with a stretched link, making the entire card clickable. The .stretched-link class is applied to the button inside the card.

LANGUAGE: html
CODE:
<div class="card" style="width: 18rem;">
  {{< placeholder width="100%" height="180" class="card-img-top" text="false" title="Card image cap" >}}
  <div class="card-body">
    <h5 class="card-title">Card with stretched link</h5>
    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
    <a href="#" class="btn btn-primary stretched-link">Go somewhere</a>
  </div>
</div>