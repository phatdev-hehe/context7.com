TITLE: SQL Composition with SQL Wrapper
DESCRIPTION: Introduction of SQL wrapper object in Odoo 17.0 for safer SQL composition and injection prevention.

LANGUAGE: python
CODE:
from odoo.tools import SQL

# Using the SQL wrapper for safer SQL composition
sql = SQL("SELECT * FROM table WHERE field = %s", params)

----------------------------------------

TITLE: Basic Odoo Model Definition in Python
DESCRIPTION: Demonstrates the minimal code required to define an Odoo model class that will create a database table. Uses the models.Model base class and requires _name attribute.

LANGUAGE: python
CODE:
from odoo import models

class TestModel(models.Model):
    _name = "test_model"

----------------------------------------

TITLE: Defining a Basic Controller with Route in Odoo
DESCRIPTION: This snippet demonstrates how to create a basic controller by inheriting from odoo.http.Controller and defining a route using the @route decorator. It shows the structure for handling a specific URL with public authentication.

LANGUAGE: python
CODE:
class MyController(odoo.http.Controller):
    @route('/some_url', auth='public')
    def handler(self):
        return stuff()

----------------------------------------

TITLE: Computed Field with Relational Dependencies in Odoo
DESCRIPTION: This example shows how to create a computed field that depends on a related field. The 'description' field is computed based on the name of the related partner.

LANGUAGE: python
CODE:
description = fields.Char(compute="_compute_description")
partner_id = fields.Many2one("res.partner")

@api.depends("partner_id.name")
def _compute_description(self):
    for record in self:
        record.description = "Test for partner %s" % record.partner_id.name

----------------------------------------

TITLE: SQL Injection Prevention Examples
DESCRIPTION: Shows proper and improper ways to construct SQL queries to avoid injection vulnerabilities in Python.

LANGUAGE: python
CODE:
# better
self.env.cr.execute('SELECT DISTINCT child_id '
           'FROM account_account_consol_rel '
           'WHERE parent_id IN %s',
           (tuple(ids),))

----------------------------------------

TITLE: Basic Odoo Module Manifest Structure
DESCRIPTION: Example structure for the __manifest__.py file showing the minimal required configuration for an Odoo module, including the name and base dependency.

LANGUAGE: python
CODE:
{
    "name": "Real Estate",
    "depends": ["base"],
    "application": True
}

----------------------------------------

TITLE: Configuring Connection Parameters for Odoo API
DESCRIPTION: Sets up the connection parameters (URL, database, username, password) needed to connect to the Odoo API. Shows examples for both a local server and requesting a test database from demo.odoo.com.

LANGUAGE: python
CODE:
url = <insert server URL>
db = <insert database name>
username = 'admin'
password = <insert password for your admin user (default: admin)>

LANGUAGE: python
CODE:
import xmlrpc.client
info = xmlrpc.client.ServerProxy('https://demo.odoo.com/start').start()
url, db, username, password = info['host'], info['database'], info['user'], info['password']

----------------------------------------

TITLE: Defining Model Fields
DESCRIPTION: Example of defining fields on an Odoo model class

LANGUAGE: python
CODE:
from odoo import models, fields
class AModel(models.Model):
    _name = 'a.model.name'
    field1 = fields.Char()
    field2 = fields.Integer(string="Field Label")

----------------------------------------

TITLE: Defining Odoo Module Manifest in Python
DESCRIPTION: This snippet demonstrates the structure of an Odoo module manifest file (__manifest__.py). It includes essential fields such as name, version, dependencies, and data files. The manifest is a Python dictionary containing metadata about the module.

LANGUAGE: python
CODE:
{
    'name': "A Module",
    'version': '1.0',
    'depends': ['base'],
    'author': "Author Name",
    'category': 'Category',
    'description': """
    Description text
    """,
    # data files always loaded at installation
    'data': [
        'views/mymodule_view.xml',
    ],
    # data files containing optionally loaded demonstration data
    'demo': [
        'demo/demo_data.xml',
    ],
}

----------------------------------------

TITLE: Writing a Basic Python Test Case
DESCRIPTION: Shows an example of a simple test case using TransactionCase in Odoo.

LANGUAGE: python
CODE:
class TestModelA(TransactionCase):
    def test_some_action(self):
        record = self.env['model.a'].create({'field': 'value'})
        record.some_action()
        self.assertEqual(
            record.field,
            expected_field_value)

----------------------------------------

TITLE: Defining a Python Constraint in an Odoo Model
DESCRIPTION: Shows how to define a Python constraint using the @api.constrains decorator to validate field values.

LANGUAGE: python
CODE:
from odoo.exceptions import ValidationError

@api.constrains('age')
def _check_something(self):
    for record in self:
        if record.age > 20:
            raise ValidationError("Your record is too old: %s" % record.age)
    # all records passed the test, don't return anything

----------------------------------------

TITLE: Defining Basic Action for Odoo Model in XML
DESCRIPTION: Creates an action to access a model's list and form views. Specifies the model name, action name, and available view modes.

LANGUAGE: xml
CODE:
<record id="test_model_action" model="ir.actions.act_window">
    <field name="name">Test action</field>
    <field name="res_model">test_model</field>
    <field name="view_mode">list,form</field>
</record>

----------------------------------------

TITLE: Safe Content Creation with Markup
DESCRIPTION: Shows how to safely create HTML content using MarkupSafe to automatically escape user-provided content.

LANGUAGE: python
CODE:
def get_name(self, to_html=False):
    if to_html:
        return Markup("<strong>%s</strong>") % self.name  # escape the name
    else:
        return self.name

----------------------------------------

TITLE: Defining a Computed Field in Python for Odoo
DESCRIPTION: This snippet demonstrates how to create a computed field in an Odoo model. It defines a 'total' field that is computed based on the 'amount' field, using the @api.depends decorator to specify dependencies.

LANGUAGE: python
CODE:
from odoo import api, fields, models

class TestComputed(models.Model):
    _name = "test.computed"

    total = fields.Float(compute="_compute_total")
    amount = fields.Float()

    @api.depends("amount")
    def _compute_total(self):
        for record in self:
            record.total = 2.0 * record.amount

----------------------------------------

TITLE: Calling Methods on Odoo Models via XML-RPC
DESCRIPTION: Shows how to call methods on Odoo models using the 'execute_kw' RPC function. Includes examples of searching for records, reading record data, and creating new records.

LANGUAGE: python
CODE:
models = xmlrpc.client.ServerProxy('{}/xmlrpc/2/object'.format(url))
models.execute_kw(db, uid, password, 'res.partner', 'search', [[['is_company', '=', True]]], {'limit': 1})

----------------------------------------

TITLE: Defining a Basic Owl Component in Odoo
DESCRIPTION: Shows how to define a simple Owl component with a template and state in Odoo. The component increments a counter when clicked.

LANGUAGE: javascript
CODE:
import { Component, xml, useState } from "@odoo/owl";

class MyComponent extends Component {
    static template = xml`
        <div t-on-click="increment">
            <t t-esc="state.value">
        </div>
    `;

    setup() {
        this.state = useState({ value: 1 });
    }

    increment() {
        this.state.value++;
    }
}

----------------------------------------

TITLE: Defining Access Rights in CSV (Odoo)
DESCRIPTION: Example of a CSV file used to define access rights for a model in Odoo. It shows how to specify permissions for different operations (read, write, create, unlink) for a specific user group.

LANGUAGE: csv
CODE:
id,name,model_id/id,group_id/id,perm_read,perm_write,perm_create,perm_unlink
access_test_model,access_test_model,model_test_model,base.group_user,1,0,0,0

----------------------------------------

TITLE: XSS Prevention in QWeb Templates
DESCRIPTION: Demonstrates secure and insecure ways to handle content rendering in QWeb templates to prevent XSS attacks.

LANGUAGE: javascript
CODE:
QWeb.render('secure_template', {
    message: "You have an important notification on the product:",
    subject: product.name
})

LANGUAGE: xml
CODE:
<div t-name="secure_template">
    <div id="information-bar">
        <div class="info"><t t-esc="message" /></div>
        <div class="subject"><t t-esc="subject" /></div>
    </div>
</div>

----------------------------------------

TITLE: Implementing Python Constraints in Odoo
DESCRIPTION: This snippet shows how to implement Python constraints in Odoo using the @api.constrains decorator. It demonstrates the structure of a constraint method and how to raise a ValidationError.

LANGUAGE: python
CODE:
from odoo.exceptions import ValidationError

@api.constrains('date_end')
def _check_date_end(self):
    for record in self:
        if record.date_end < fields.Date.today():
            raise ValidationError("The end date cannot be set in the past")

----------------------------------------

TITLE: Model Inheritance Example
DESCRIPTION: Demonstration of classical inheritance in Odoo models

LANGUAGE: python
CODE:
class Inheritance0(models.Model):
    _name = 'inheritance.0'
    _description = 'Inheritance Zero'
    name = fields.Char()

class Inheritance1(models.Model):
    _name = 'inheritance.1'
    _inherit = 'inheritance.0'
    _description = 'Inheritance One'

----------------------------------------

TITLE: Defining a Minimal Odoo Model in Python
DESCRIPTION: Demonstrates how to define a minimal Odoo model class with just a name.

LANGUAGE: python
CODE:
from odoo import models
class MinimalModel(models.Model):
    _name = 'test.model'

----------------------------------------

TITLE: Defining an Odoo Model with Fields in Python
DESCRIPTION: Shows how to define an Odoo model with fields like Char and required attributes.

LANGUAGE: python
CODE:
from odoo import models, fields

class LessMinimalModel(models.Model):
    _name = 'test.model2'

    name = fields.Char(required=True)

----------------------------------------

TITLE: Extending BooleanField Component in JavaScript for Odoo
DESCRIPTION: This snippet demonstrates how to create a new widget component by extending the BooleanField to display 'Late!' in red when the checkbox is checked. It includes the class definition and component registration.

LANGUAGE: javascript
CODE:
import { registry } from "@web/core/registry";
import { BooleanField } from "@web/views/fields/boolean/boolean_field";
import { Component, xml } from "@odoo/owl";

class LateOrderBooleanField extends BooleanField {
   static template = "my_module.LateOrderBooleanField";
}

registry.category("fields").add("late_boolean", LateOrderBooleanField);

----------------------------------------

TITLE: Setting Default Values for Odoo Model Fields in Python
DESCRIPTION: Demonstrates how to set default values for fields using Python literals or functions. Shows examples for string and datetime fields.

LANGUAGE: python
CODE:
name = fields.Char(default="Unknown")
last_seen = fields.Datetime("Last Seen", default=fields.Datetime.now)

----------------------------------------

TITLE: Displaying Odoo Module Directory Structure in Bash
DESCRIPTION: This snippet shows the typical directory structure of an Odoo module using a bash tree-like representation. It includes the main module folder, models directory, data directory, and key files like __init__.py and __manifest__.py.

LANGUAGE: bash
CODE:
module
├── models
│   ├── *.py
│   └── __init__.py
├── data
│   └── *.xml
├── __init__.py
└── __manifest__.py

----------------------------------------

TITLE: Service Registration Example
DESCRIPTION: Example showing how to register a service that displays periodic notifications.

LANGUAGE: javascript
CODE:
import { registry } from "./core/registry";

const serviceRegistry = registry.category("services");

const myService = {
    dependencies: ["notification"],
    start(env, { notification }) {
        let counter = 1;
        setInterval(() => {
            notification.add(`Tick Tock ${counter++}`);
        }, 5000);
    }
};

serviceRegistry.add("myService", myService);

----------------------------------------

TITLE: Using Translations in Javascript
DESCRIPTION: Example of using the _t function to handle translations in Javascript code

LANGUAGE: javascript
CODE:
import { _t } from "@web/core/l10n/translation";

class SomeComponent extends Component {
    static exampleString = _t("this should be translated");
    ...
    someMethod() {
        const str = _t("some text");
    }
}

----------------------------------------

TITLE: Unsafe Public Method Example in Python
DESCRIPTION: Demonstrates the risks of public methods that can be executed via RPC calls without proper access controls.

LANGUAGE: python
CODE:
# this method is public and its arguments can not be trusted
def action_done(self):
    if self.state == "draft" and self.env.user.has_group('base.manager'):
        self._set_state("done")

# this method is private and can only be called from other python methods
def _set_state(self, new_state):
    self.sudo().write({"state": new_state})

----------------------------------------

TITLE: Implementing One2many Relationship in Python
DESCRIPTION: Example of creating a One2many relationship that is the inverse of a Many2one relationship. This allows access to all related records from the parent record.

LANGUAGE: python
CODE:
test_ids = fields.One2many("test_model", "partner_id", string="Tests")

----------------------------------------

TITLE: Implementing Many2one Relationship in Python
DESCRIPTION: Example of creating a Many2one relationship to res.partner model. This allows linking one record to another record in a different model, commonly used for dropdown selections in forms.

LANGUAGE: python
CODE:
partner_id = fields.Many2one("res.partner", string="Partner")

----------------------------------------

TITLE: JSON-RPC Implementation for Odoo Integration
DESCRIPTION: Demonstrates JSON-RPC implementation for Odoo server communication using Python's urllib.request and json libraries. Includes authentication and note creation functionality.

LANGUAGE: python
CODE:
import json
import random
import urllib.request

HOST = 'localhost'
PORT = 8069
DB = 'openacademy'
USER = 'admin'
PASS = 'admin'

def json_rpc(url, method, params):
    data = {
        "jsonrpc": "2.0",
        "method": method,
        "params": params,
        "id": random.randint(0, 1000000000),
    }
    req = urllib.request.Request(url=url, data=json.dumps(data).encode(), headers={
        "Content-Type":"application/json",
    })
    reply = json.loads(urllib.request.urlopen(req).read().decode('UTF-8'))
    if reply.get("error"):
        raise Exception(reply["error"])
    return reply["result"]

def call(url, service, method, *args):
    return json_rpc(url, "call", {"service": service, "method": method, "args": args})

# log in the given database
url = "http://%s:%s/jsonrpc" % (HOST, PORT)
uid = call(url, "common", "login", DB, USER, PASS)

# create a new note
args = {
    'color': 8,
    'memo': 'This is another note',
    'create_uid': uid,
}
note_id = call(url, "object", "execute", DB, uid, PASS, 'note.note', 'create', args)

----------------------------------------

TITLE: Creating Custom View Renderer in JavaScript
DESCRIPTION: Defines a custom view renderer class (BeautifulRenderer) that will be responsible for visually representing the view's data.

LANGUAGE: javascript
CODE:
import { Component } from "@odoo/owl";
export class BeautifulRenderer extends Component {
    static template = "my_module.Renderer";
}

----------------------------------------

TITLE: Using Service in Component
DESCRIPTION: Shows how to use a service within a component using the useService hook

LANGUAGE: javascript
CODE:
import { useService } from "@web/core/utils/hooks";

class MyComponent extends Component {
  setup() {
    const rpc = useService("rpc");

    onWillStart(async () => {
      this.someValue = await rpc(...);
    });
  }
}

----------------------------------------

TITLE: View Inheritance in Odoo XML
DESCRIPTION: Demonstrates how to extend existing views in Odoo using XML inheritance and xpath expressions.

LANGUAGE: xml
CODE:
<record id="inherited_model_view_form" model="ir.ui.view">
    <field name="name">inherited.model.form.inherit.test</field>
    <field name="model">inherited.model</field>
    <field name="inherit_id" ref="inherited.inherited_model_view_form"/>
    <field name="arch" type="xml">
        <xpath expr="//field[@name='description']" position="after">
          <field name="new_field"/>
        </xpath>
    </field>
</record>

----------------------------------------

TITLE: Basic QWeb Template Structure
DESCRIPTION: Demonstrates the basic structure of a QWeb template using the placeholder <t> element and the t-if directive.

LANGUAGE: xml
CODE:
<t t-if="condition">
    <p>Test</p>
</t>

----------------------------------------

TITLE: XML-RPC Basic Authentication and Note Creation in Python
DESCRIPTION: Demonstrates how to authenticate with Odoo server and create a new note using XML-RPC. Uses the xmlrpc.client library to establish connection and execute remote procedures.

LANGUAGE: python
CODE:
import xmlrpc.client

root = 'http://%s:%d/xmlrpc/' % (HOST, PORT)

uid = xmlrpc.client.ServerProxy(root + 'common').login(DB, USER, PASS)
print("Logged in as %s (uid: %d)" % (USER, uid))

# Create a new note
sock = xmlrpc.client.ServerProxy(root + 'object')
args = {
    'color' : 8,
    'memo' : 'This is a note',
    'create_uid': uid,
}
note_id = sock.execute(DB, uid, PASS, 'note.note', 'create', args)

----------------------------------------

TITLE: CRUD Method Override in Odoo
DESCRIPTION: Shows how to extend CRUD methods in Odoo models while maintaining parent functionality through super() calls.

LANGUAGE: python
CODE:
from odoo import fields, models

class TestModel(models.Model):
    _name = "test_model"
    _description = "Test Model"

    ...

    @api.model
    def create(self, vals):
        # Do some business logic, modify vals...
        ...
        # Then call super to execute the parent method
        return super().create(vals)

----------------------------------------

TITLE: Computing Field Values
DESCRIPTION: Example of computed field implementation using @api.depends decorator

LANGUAGE: python
CODE:
from odoo import api
total = fields.Float(compute='_compute_total')

@api.depends('value', 'tax')
def _compute_total(self):
    for record in self:
        record.total = record.value + record.value * record.tax

----------------------------------------

TITLE: Authenticating with the Odoo API
DESCRIPTION: Demonstrates how to authenticate with the Odoo API by calling the 'authenticate' method on the 'common' endpoint. Returns a user ID (uid) used for subsequent authenticated calls.

LANGUAGE: python
CODE:
common = xmlrpc.client.ServerProxy('{}/xmlrpc/2/common'.format(url))
uid = common.authenticate(db, username, password, {})

----------------------------------------

TITLE: Implementing Basic Service Example
DESCRIPTION: Demonstrates how to create a simple service that displays notifications periodically

LANGUAGE: javascript
CODE:
import { registry } from "@web/core/registry";

const myService = {
    dependencies: ["notification"],
    start(env, { notification }) {
        let counter = 1;
        setInterval(() => {
            notification.add(`Tick Tock ${counter++}`);
        }, 5000);
    }
};

registry.category("services").add("myService", myService);

----------------------------------------

TITLE: Odoo Model with Basic Field Definition
DESCRIPTION: Shows how to define a model with a basic character field. Includes model name, description and field definition using the fields module.

LANGUAGE: python
CODE:
from odoo import fields, models

class TestModel(models.Model):
    _name = "test_model"
    _description = "Test Model"

    name = fields.Char()

----------------------------------------

TITLE: Implementing Basic List View in Odoo XML
DESCRIPTION: Basic list view definition showing how to display fields in a tabular format. Uses the list root element to define columns.

LANGUAGE: xml
CODE:
<list string="Tests">
    <field name="name"/>
    <field name="last_seen"/>
</list>

----------------------------------------

TITLE: Error Class Filtering in JavaScript
DESCRIPTION: Example showing how to properly catch and filter errors by class type in JavaScript try/catch blocks.

LANGUAGE: javascript
CODE:
try {
  doStuff();
} catch (e) {
  if (!(e instanceof MyErrorClass)) {
    throw e; // caught an error we can't handle, rethrow
  }
  // handle MyErrorClass
}

----------------------------------------

TITLE: Adding Conditional Rendering to Odoo Kanban View
DESCRIPTION: Shows how to use the t-if directive for conditional rendering in a Kanban view. It also demonstrates accessing field values using the 'record' object.

LANGUAGE: xml
CODE:
<kanban>
    <field name="state"/>
    <templates>
        <t t-name="kanban-box">
            <div>
                <field name="name"/>
                <div t-if="record.state.raw_value == 'new'">
                    This is new!
                </div>
            </div>
        </t>
    </templates>
</kanban>

----------------------------------------

TITLE: Defining a Computed Field in an Odoo Model
DESCRIPTION: Demonstrates how to define a computed field in an Odoo model using the @api.depends decorator.

LANGUAGE: python
CODE:
from odoo import models, fields, api

class ComputedModel(models.Model):
    _name = 'test.computed'

    name = fields.Char(compute='_compute_name')
    value = fields.Integer()

    @api.depends('value')
    def _compute_name(self):
        for record in self:
            record.name = "Record with value %s" % record.value

----------------------------------------

TITLE: Basic Module Import in Odoo Javascript
DESCRIPTION: Example showing how to import a module using the @web prefix from the web/static/src directory structure.

LANGUAGE: javascript
CODE:
import { memoize } from "@web/core/utils/functions";

----------------------------------------

TITLE: Creating Custom Models and Fields via XML-RPC
DESCRIPTION: Demonstrates how to create custom models and fields dynamically using the 'ir.model' and 'ir.model.fields' models. Includes creating a custom model, adding a custom field, and creating/reading a record.

LANGUAGE: python
CODE:
id = models.execute_kw(db, uid, password, 'ir.model', 'create', [{
    'name': "Custom Model",
    'model': "x_custom",
    'state': 'manual',
}])
models.execute_kw(db, uid, password, 'ir.model.fields', 'create', [{
    'model_id': id,
    'name': 'x_name',
    'ttype': 'char',
    'state': 'manual',
    'required': True,
}])
record_id = models.execute_kw(db, uid, password, 'x_custom', 'create', [{'x_name': "test record"}])
models.execute_kw(db, uid, password, 'x_custom', 'read', [[record_id]])

----------------------------------------

TITLE: Database Table Structure Query
DESCRIPTION: SQL command to check the structure of an estate_property table showing columns, types, and constraints.

LANGUAGE: sql
CODE:
\d estate_property;

----------------------------------------

TITLE: Overriding an Existing Controller in Odoo
DESCRIPTION: This example shows how to extend an existing controller by inheriting from it and overriding its methods. It demonstrates the proper way to keep the route visible and add functionality before calling the parent method.

LANGUAGE: python
CODE:
class Extension(MyController):
    @route()
    def handler(self):
        do_before()
        return super(Extension, self).handler()

----------------------------------------

TITLE: Script Load Error Handling with Promises
DESCRIPTION: Demonstrates proper error handling when loading external scripts using Promises and event listeners.

LANGUAGE: javascript
CODE:
const scriptEl = document.createElement("script");
scriptEl.src = "https://example.com/third_party_script.js";
return new Promise((resolve, reject) => {
  scriptEl.addEventListener("error", reject);
  scriptEl.addEventListener("load", resolve);
  document.head.append(scriptEl);
});

----------------------------------------

TITLE: Registering Owl Component in JavaScript
DESCRIPTION: JavaScript implementation of the Owl component and registration in the public_components registry

LANGUAGE: javascript
CODE:
import { Component } from "@odoo/owl";
import { registry } from "@web/core/registry"

export class YourComponent extends Component {
    static template = "your_module.YourComponent";
    static props = {};
}

registry.category("public_components").add("your_module.YourComponent", YourComponent);

----------------------------------------

TITLE: Implementing Action Method in Odoo Model
DESCRIPTION: This Python code defines a model class with an action method 'action_do_something'. The method is called when the corresponding button in the view is clicked, and it updates the 'name' field of the records.

LANGUAGE: python
CODE:
from odoo import fields, models

class TestAction(models.Model):
    _name = "test.action"

    name = fields.Char()

    def action_do_something(self):
        for record in self:
            record.name = "Something"
        return True

----------------------------------------

TITLE: Creating Basic QWeb Report Template in XML
DESCRIPTION: Minimal template example for creating a report with header and footer using the web.external_layout template. Shows basic structure and field access.

LANGUAGE: xml
CODE:
<template id="report_invoice">
    <t t-call="web.html_container">
        <t t-foreach="docs" t-as="o">
            <t t-call="web.external_layout">
                <div class="page">
                    <h2>Report title</h2>
                    <p>This object's name is <span t-field="o.name"/></p>
                </div>
            </t>
        </t>
    </t>
</template>

----------------------------------------

TITLE: Implementing useAutofocus Hook in JavaScript Component
DESCRIPTION: Demonstrates how to use the useAutofocus hook to automatically focus an input element when it appears in the DOM.

LANGUAGE: javascript
CODE:
import { useAutofocus } from "@web/core/utils/hooks";

class Comp {
  setup() {
    this.inputRef = useAutofocus();
  }
  static template = "Comp";
}

LANGUAGE: xml
CODE:
<t t-name="Comp">
  <input t-ref="autofocus" type="text"/>
</t>

----------------------------------------

TITLE: Defining SQL Constraints in Odoo Models
DESCRIPTION: This snippet demonstrates how to define SQL constraints in Odoo models using the _sql_constraints attribute. It shows the structure of the constraint definition and provides an example.

LANGUAGE: python
CODE:
_sql_constraints = [
    (name, sql_definition, message),
    # ...
]

----------------------------------------

TITLE: Extending Kanban Controller in JavaScript
DESCRIPTION: Extends the KanbanController class and registers a custom kanban view in the views registry. This snippet demonstrates how to create a custom version of a kanban view with additional functionality.

LANGUAGE: javascript
CODE:
import { KanbanController } from "@web/views/kanban/kanban_controller";
import { kanbanView } from "@web/views/kanban/kanban_view";
import { registry } from "@web/core/registry";

class CustomKanbanController extends KanbanController {
    static template = "my_module.CustomKanbanView";

    // Your logic here, override or insert new methods...
    // if you override setup(), don't forget to call super.setup()
}

export const customKanbanView = {
    ...kanbanView, // contains the default Renderer/Controller/Model
    Controller: CustomKanbanController,
};

// Register it to the views registry
registry.category("views").add("custom_kanban", customKanbanView);

----------------------------------------

TITLE: Creating Custom JavaScript Methods for Snippet Options
DESCRIPTION: Demonstrates how to create custom JavaScript methods for snippet options

LANGUAGE: javascript
CODE:
/** @odoo-module */

import options from 'web_editor.snippets.options';

const AirproofSnippet = options.Class.extend({
   // Built-in method example
   start: function() {
      //...
   }
   // Custom method example
   customMethodName: function() {
      //...
   }
});

options.registry.AirproofSnippet = AirproofSnippet;

export default AirproofSnippet;

----------------------------------------

TITLE: Adding Action Button to Odoo Form View
DESCRIPTION: This snippet shows how to add an action button to the header of an Odoo form view. The button is linked to a Python method named 'action_do_something'.

LANGUAGE: xml
CODE:
<form>
    <header>
        <button name="action_do_something" type="object" string="Do Something"/>
    </header>
    <sheet>
        <field name="name"/>
    </sheet>
</form>

----------------------------------------

TITLE: Calling Sub-templates in QWeb
DESCRIPTION: Shows how to call sub-templates using the t-call directive in QWeb.

LANGUAGE: xml
CODE:
<t t-call="other-template">
    <t t-set="var" t-value="1"/>
</t>

----------------------------------------

TITLE: Asset Bundle Operations in Python
DESCRIPTION: Examples of various asset bundle operations including prepend, before, after, include, remove, and replace directives for managing assets in Odoo manifest files.

LANGUAGE: python
CODE:
'web.assets_common': [
    ('prepend', 'my_addon/static/src/css/bootstrap_overridden.scss'),
    ('before', 'web/static/src/css/bootstrap_overridden.scss', 'my_addon/static/src/css/bootstrap_overridden.scss'),
    ('after', 'web/static/src/css/list_view.scss', 'my_addon/static/src/css/list_view.scss'),
    ('include', 'web._primary_variables'),
    ('remove', 'web/static/src/js/boot.js'),
    ('replace', 'web/static/src/js/boot.js', 'my_addon/static/src/js/boot.js'),
]

----------------------------------------

TITLE: Defining an Owl Component Template in XML
DESCRIPTION: Demonstrates how to define the template for an Owl component in a separate XML file for better organization and translation support.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<templates xml:space="preserve">

<t t-name="myaddon.MyComponent">
  <div t-on-click="increment">
    <t t-esc="state.value"/>
  </div>
</t>

</templates>

----------------------------------------

TITLE: Defining Test Models in Odoo Python
DESCRIPTION: This snippet defines two Odoo models: TestModel and TestModelLine. It sets up a One2many relationship between them and defines basic fields for demonstration purposes.

LANGUAGE: python
CODE:
from odoo import fields, models

class TestModel(models.Model):
    _name = "test_model"
    _description = "Test Model"

    description = fields.Char()
    line_ids = fields.One2many("test_model_line", "model_id")


class TestModelLine(models.Model):
    _name = "test_model_line"
    _description = "Test Model Line"

    model_id = fields.Many2one("test_model")
    field_1 = fields.Char()
    field_2 = fields.Char()
    field_3 = fields.Char()

----------------------------------------

TITLE: Using Lazy Translation in Python for Odoo Modules
DESCRIPTION: Demonstrates the use of LazyTranslate for delayed translation lookup in Python. This is useful for declaring translatable properties in class methods or global variables.

LANGUAGE: python
CODE:
from odoo.tools import LazyTranslate
_lt = LazyTranslate(__name__)
LAZY_TEXT = _lt("some text")

----------------------------------------

TITLE: Using Lazy Translation in JavaScript for Odoo
DESCRIPTION: Shows how to use _lt for lazy translation evaluation in JavaScript, ensuring translations are looked up when used rather than when the file is read.

LANGUAGE: javascript
CODE:
var core = require('web.core');
var _lt = core._lt;
var map_title = {
    access_error: _lt('Access Error'),
    missing_error: _lt('Missing Record'),
};

----------------------------------------

TITLE: Linking Action to Button in Odoo View
DESCRIPTION: This XML snippet demonstrates how to link an action to a button in an Odoo view using the 'type="action"' attribute and referencing the action's external identifier.

LANGUAGE: xml
CODE:
<button type="action" name="%(test.test_model_action)d" string="My Action"/>

----------------------------------------

TITLE: Defining an Odoo record in XML
DESCRIPTION: Example of defining an Odoo record using the recommended XML format with proper attribute ordering and naming conventions.

LANGUAGE: xml
CODE:
<record id="view_id" model="ir.ui.view">
    <field name="name">view.name</field>
    <field name="model">object_name</field>
    <field name="priority" eval="16"/>
    <field name="arch" type="xml">
        <list>
            <field name="my_field_1"/>
            <field name="my_field_2" string="My Label" widget="statusbar" statusbar_visible="draft,sent,progress,done" />
        </list>
    </field>
</record>

----------------------------------------

TITLE: QWeb Dynamic Attributes
DESCRIPTION: Shows how to compute attributes dynamically using t-att directives in QWeb.

LANGUAGE: xml
CODE:
<div t-att-a="42"/>

<t t-foreach="[1, 2, 3]" t-as="item">
    <li t-attf-class="row {{ (item_index % 2 === 0) ? 'even' : 'odd' }}">
        <t t-out="item"/>
    </li>
</t>

----------------------------------------

TITLE: Defining Asset Bundles in Python Manifest
DESCRIPTION: Example of declaring asset bundles in a module's __manifest__.py file. Shows how to group different types of assets (XML, JS, CSS) into named bundles with glob pattern support.

LANGUAGE: python
CODE:
'assets': {
    'web.assets_backend': [
        'web/static/src/xml/**/*',
    ],
    'web.assets_common': [
        'web/static/lib/bootstrap/**/*',
        'web/static/src/js/boot.js',
        'web/static/src/js/webclient.js',
        'web/static/src/xml/webclient.xml',
    ],
    'web.qunit_suite_tests': [
        'web/static/src/js/webclient_tests.js',
    ],
}

----------------------------------------

TITLE: Handling Dynamic Variables in Odoo Translations
DESCRIPTION: Demonstrates the correct way to include dynamic variables in translatable strings, using them as parameters in the translation function call.

LANGUAGE: python
CODE:
_("Scheduled meeting with %s", invitee.name)

----------------------------------------

TITLE: Class Patching in JavaScript
DESCRIPTION: Demonstrates how to patch both static and prototype methods of a JavaScript class.

LANGUAGE: javascript
CODE:
class MyClass {
  static myStaticFn() {...}
  myPrototypeFn() {...}
}

// this will patch static properties!!!
patch(MyClass, {
  myStaticFn() {...},
});

// this is probably the usual case: patching a class method
patch(MyClass.prototype, {
  myPrototypeFn() {...},
});

----------------------------------------

TITLE: Creating Client Action Component in JavaScript for Odoo
DESCRIPTION: This snippet demonstrates how to create an OWL component for a client action in Odoo. It imports necessary modules, defines the component class, and registers it in the actions registry.

LANGUAGE: javascript
CODE:
import { registry } from "@web/core/registry";

import { Component } from  "@odoo/owl";

class MyClientAction extends Component {
    static template = "my_module.clientaction";
}

// remember the tag name we put in the first step
registry.category("actions").add("my_module.MyClientAction", MyClientAction);

----------------------------------------

TITLE: Basic Model Inheritance Example in Python
DESCRIPTION: Demonstrates the basic structure for inheriting and extending an existing Odoo model's functionality using model inheritance.

LANGUAGE: python
CODE:
from odoo import models

class InheritedModel(models.Model):
    _inherit = "inherited.model"

    def inherited_action(self):
        return super().inherited_action()

----------------------------------------

TITLE: Accessing Predefined Registries in Odoo Web Client
DESCRIPTION: Shows how to access predefined registries for fields, services, and views using the registry.category() method. This is a common pattern for extending Odoo's web client functionality.

LANGUAGE: javascript
CODE:
import { registry } from "@web/core/registry";

const fieldRegistry = registry.category("fields");
const serviceRegistry = registry.category("services");
const viewRegistry = registry.category("views");

----------------------------------------

TITLE: Defining an Onchange Method in an Odoo Model
DESCRIPTION: Demonstrates how to define an onchange method to update fields dynamically in a form view.

LANGUAGE: python
CODE:
@api.onchange('amount', 'unit_price')
def _onchange_price(self):
    # set auto-changing field
    self.price = self.amount * self.unit_price
    # Can optionally return a warning and domains
    return {
        'warning': {
            'title': "Something bad happened",
            'message': "It was very bad indeed",
        }
    }

----------------------------------------

TITLE: Custom Paper Format Configuration in XML
DESCRIPTION: Definition of custom paper format for reports with specific dimensions and settings. Shows configuration of page size, margins, and print options.

LANGUAGE: xml
CODE:
<record id="paperformat_frenchcheck" model="report.paperformat">
    <field name="name">French Bank Check</field>
    <field name="default" eval="True"/>
    <field name="format">custom</field>
    <field name="page_height">80</field>
    <field name="page_width">175</field>
    <field name="orientation">Portrait</field>
    <field name="margin_top">3</field>
    <field name="margin_bottom">3</field>
    <field name="margin_left">3</field>
    <field name="margin_right">3</field>
    <field name="header_line" eval="False"/>
    <field name="header_spacing">3</field>
    <field name="dpi">80</field>
</record>

----------------------------------------

TITLE: Adding Discussion Threads to a Model
DESCRIPTION: Extends the Courses model to include Odoo's mail thread functionality.

LANGUAGE: python
CODE:
class Courses(models.Model):
    _name = 'academy.courses'
    _inherit = 'mail.thread'

    name = fields.Char()
    teacher_id = fields.Many2one('academy.teachers', string="Teacher")

----------------------------------------

TITLE: Defining Shape Colors in SCSS
DESCRIPTION: Shows how to declare and customize shape colors using SCSS. Includes examples of switching color mapping and adding extra color mappings.

LANGUAGE: scss
CODE:
'Zigs/06': ('position': bottom, 'size': 30px 100%, 'colors': (4, 5), 'repeat-x': true),

LANGUAGE: scss
CODE:
$o-bg-shapes: change-shape-colors-mapping('web_editor', 'Zigs/06', (4: 3, 5: rgb(187, 27, 152)))

LANGUAGE: scss
CODE:
$o-bg-shapes: change-shape-colors-mapping('web_editor', 'Zigs/06', (4: 3, 5: 1));

LANGUAGE: scss
CODE:
$o-bg-shapes: add-extra-shape-colors-mapping('web_editor', 'Zigs/06', 'second', (4: 3, 5: 1));

----------------------------------------

TITLE: Python QWeb Rendering
DESCRIPTION: Demonstrates how to render QWeb templates in Python using the HttpRequest.render method.

LANGUAGE: python
CODE:
response = http.request.render('my-template', {
    'context_value': 42
})

----------------------------------------

TITLE: Defining Company-Dependent Fields in Python for Odoo
DESCRIPTION: Demonstrates how to create company-dependent fields and compute display information based on the current company context.

LANGUAGE: python
CODE:
from odoo import api, fields, models

class Record(models.Model):
    _name = 'record.public'

    info = fields.Text()
    company_info = fields.Text(company_dependent=True)
    display_info = fields.Text(string='Infos', compute='_compute_display_info')

    @api.depends_context('company')
    def _compute_display_info(self):
        for record in self:
            record.display_info = record.info + record.company_info

----------------------------------------

TITLE: Implementing Multi-Company Security Rules in Odoo XML
DESCRIPTION: Defines security rules for shared and company-restricted records to ensure proper multi-company access control.

LANGUAGE: xml
CODE:
<!-- Shareable Records -->
<record model="ir.rule" id="record_shared_company_rule">
    <field name="name">Shared Record: multi-company</field>
    <field name="model_id" ref="model_record_shared"/>
    <field name="global" eval="True"/>
    <field name="domain_force">
        ['|', ('company_id', '=', False), ('company_id', 'in', company_ids)]
    </field>
</record>

LANGUAGE: xml
CODE:
<!-- Company-restricted Records -->
<record model="ir.rule" id="record_restricted_company_rule">
    <field name="name">Restricted Record: multi-company</field>
    <field name="model_id" ref="model_record_restricted"/>
    <field name="global" eval="True"/>
    <field name="domain_force">
        [('company_id', 'in', company_ids)]
    </field>
</record>

----------------------------------------

TITLE: Initializing a Simple Odoo Web Module
DESCRIPTION: Defines a basic Odoo web module with a HomePage widget that logs a message to the console when loaded.

LANGUAGE: javascript
CODE:
odoo.oepetstore = function(instance, local) {
    var _t = instance.web._t,
        _lt = instance.web._lt;
    var QWeb = instance.web.qweb;

    local.HomePage = instance.Widget.extend({
        start: function() {
            console.log("pet store home page loaded");
        },
    });

    instance.web.client_actions.add(
        'petstore.homepage', 'instance.oepetstore.HomePage');
}

----------------------------------------

TITLE: Styling a Custom Odoo Form Widget
DESCRIPTION: Provides CSS styling for a custom color field widget in Odoo.

LANGUAGE: css
CODE:
.oe_field_color_content {
    height: 20px;
    width: 50px;
    border: 1px solid black;
}

----------------------------------------

TITLE: Defining SQL View Model in Odoo Python
DESCRIPTION: Basic structure for creating a SQL view model class in Odoo. Sets up the model with required attributes including _auto=False to prevent database storage and _rec_name for navigation breadcrumb display.

LANGUAGE: python
CODE:
from odoo import fields, models


class ModuleReport(models.Model):
    _name = 'module.report'
    _description = "Module Report"
    _rec_name = 'module_field'
    _auto = False

----------------------------------------

TITLE: SCSS Default Flag Usage Example
DESCRIPTION: Complete example showing proper variable definition using !default flag and its usage in components.

LANGUAGE: scss
CODE:
$foo: red !default;

LANGUAGE: scss
CODE:
$foo: blue !default; // -> Already defined, line ignored.
$bar: black !default; // -> Not defined yet, value assigned.

LANGUAGE: scss
CODE:
.component {
   color: $foo; // -> 'color: red;'
   background: $bar; // -> 'background: black;'
}

----------------------------------------

TITLE: QWeb Conditional Rendering
DESCRIPTION: Illustrates conditional rendering in QWeb using t-if, t-elif, and t-else directives.

LANGUAGE: xml
CODE:
<div>
    <p t-if="user.birthday == today()">Happy birthday!</p>
    <p t-elif="user.login == 'root'">Welcome master!</p>
    <p t-else="">Welcome!</p>
</div>

----------------------------------------

TITLE: Using 'search' in Odoo XML Data
DESCRIPTION: Example of using the 'search' attribute to find records dynamically in Odoo XML data declarations.

LANGUAGE: xml
CODE:
<odoo>
  <record id="id1" model="account.move.line">
    <field name="account_id" search="[
      ('user_type_id', '=', ref('account.data_account_type_direct_costs')),
      ('company_id', '=', obj().env.company.id)]
    "/>
  </record>
</odoo>

----------------------------------------

TITLE: Basic Object Patching in JavaScript
DESCRIPTION: Demonstrates how to patch a simple object by overriding its method using the patch utility from Odoo's web framework.

LANGUAGE: javascript
CODE:
import { patch } from "@web/core/utils/patch";

const object = {
  field: "a field",
  fn() {
    // do something
  },
};

patch(object, {
  fn() {
    // do things
  },
});

----------------------------------------

TITLE: Creating a Custom Odoo Form Widget
DESCRIPTION: Implements a custom form widget for Odoo that displays and edits a color value.

LANGUAGE: javascript
CODE:
local.FieldColor = instance.web.form.AbstractField.extend({
    events: {
        'change input': function (e) {
            if (!this.get('effective_readonly')) {
                this.internal_set_value($(e.currentTarget).val());
            }
        }
    },
    init: function() {
        this._super.apply(this, arguments);
        this.set("value", "");
    },
    start: function() {
        this.on("change:effective_readonly", this, function() {
            this.display_field();
            this.render_value();
        });
        this.display_field();
        return this._super();
    },
    display_field: function() {
        this.$el.html(QWeb.render("FieldColor", {widget: this}));
    },
    render_value: function() {
        if (this.get("effective_readonly")) {
            this.$(".oe_field_color_content").css("background-color", this.get("value") || "#FFFFFF");
        } else {
            this.$("input").val(this.get("value") || "#FFFFFF");
        }
    },
});
instance.web.form.widgets.add('color', 'instance.oepetstore.FieldColor');

----------------------------------------

TITLE: Defining an Odoo Model
DESCRIPTION: Creates a Teachers model with name and biography fields.

LANGUAGE: python
CODE:
from odoo import models, fields, api

class Teachers(models.Model):
    _name = 'academy.teachers'

    name = fields.Char()
    biography = fields.Html()

----------------------------------------

TITLE: Running Odoo Server Configuration
DESCRIPTION: Example shell script showing common command line arguments for running the Odoo server with specific configuration options.

LANGUAGE: xml
CODE:
./odoo-bin --addons-path=../enterprise,addons --db-filter=<database> -d <database> --without-demo=all -i website --dev=xml

----------------------------------------

TITLE: Get Results Response Format
DESCRIPTION: JSON-RPC2 response format containing status and extracted document data results.

LANGUAGE: javascript
CODE:
{
    "jsonrpc": "2.0",
    "id": string,
    "result": {
        "status": string,
        "status_msg": string,
        "results": [
            {
                "full_text_annotation": string,
                "feature_1_name": feature_1_result,
                "feature_2_name": feature_2_result,
                ...
            },
            ...
        ]
    }
}

----------------------------------------

TITLE: Custom View Controller Template in XML
DESCRIPTION: Defines the XML template for the custom view controller, which includes a Layout component and renders the view's Renderer component.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">
    <t t-name="my_module.View">
        <Layout display="props.display" className="'h-100 overflow-auto'">
            <t t-component="props.Renderer" records="model.records" propsYouWant="'Hello world'"/>
        </Layout>
    </t>
</templates>

----------------------------------------

TITLE: Implementing Many2many Relationship in Python
DESCRIPTION: Example of creating a Many2many relationship to account.tax model. This allows multiple records to be linked to multiple other records, commonly used for tag-like features.

LANGUAGE: python
CODE:
tax_ids = fields.Many2many("account.tax", string="Taxes")

----------------------------------------

TITLE: Implementing Odoo Button Types in XML Views
DESCRIPTION: Demonstrates the implementation of both object and action type buttons in Odoo XML views. The object type button calls a method directly on the model, while the action type button loads and executes an ir.actions record.

LANGUAGE: xml
CODE:
<button type="object" name="action_create_new" string="Create document"/>
<button type="action" name="addon.action_create_view" string="Create and Edit"/>

----------------------------------------

TITLE: Implementing Mail Alias Support
DESCRIPTION: Example adding mail alias functionality to allow creation of records via email.

LANGUAGE: python
CODE:
def _get_alias_model_name(self, vals):
    return 'business.expense'

def _get_alias_values(self):
    values = super(BusinessTrip, self)._get_alias_values()
    values['alias_defaults'] = {'trip_id': self.id}
    values['alias_contact'] = 'followers'
    return values

----------------------------------------

TITLE: Enabling Header Overlay in Odoo Website Pages
DESCRIPTION: This XML snippet shows how to enable the header overlay feature for an Odoo website page, making the header background transparent and positioning it on top of the page content.

LANGUAGE: xml
CODE:
<field name="header_overlay" eval="True"/>

----------------------------------------

TITLE: Basic Odoo Page Layout Structure
DESCRIPTION: Default XML structure for an Odoo webpage layout showing the main wrapwrap container with header, main content and footer sections.

LANGUAGE: xml
CODE:
<div id="wrapwrap">
   <header/>
      <main>
         <div id="wrap" class="oe_structure">
            <!-- Page Content -->
         </div>
      </main>
   <footer/>
</div>

----------------------------------------

TITLE: Creating Custom View Controller in JavaScript
DESCRIPTION: Defines a custom view controller class (BeautifulController) that sets up the model and renders the view using a Layout component.

LANGUAGE: javascript
CODE:
import { Layout } from "@web/search/layout";
import { useService } from "@web/core/utils/hooks";
import { Component, onWillStart, useState} from "@odoo/owl";

export class BeautifulController extends Component {
    static template = "my_module.View";
    static components = { Layout };

    setup() {
        this.orm = useService("orm");

        this.model = useState(
            new this.props.Model(
                this.orm,
                this.props.resModel,
                this.props.fields,
                this.props.archInfo,
                this.props.domain
            )
        );

        onWillStart(async () => {
            await this.model.load();
        });
    }
}

----------------------------------------

TITLE: Adding Items to the Systray in Javascript
DESCRIPTION: How to register a new component to be displayed in the systray

LANGUAGE: javascript
CODE:
import { registry } from "@web/core/registry"
class MySystrayComponent extends Component {
    ...
}
registry.category("systray").add("MySystrayComponent", MySystrayComponent, { sequence: 1 });

----------------------------------------

TITLE: Adding a Systray Item in Odoo Web Client
DESCRIPTION: Shows how to add a systray item to the Odoo web client's navbar. Systray items are components displayed on the right side of the navbar, often used for notifications or quick actions.

LANGUAGE: javascript
CODE:
import { registry } from "@web/core/registry";

class MySystrayItem extends Component {
    // some component ...
}

registry.category("systray").add("myAddon.myItem", {
    Component: MySystrayItem,
});

----------------------------------------

TITLE: QWeb Data Output
DESCRIPTION: Shows how to output data in QWeb using the t-out directive, which automatically HTML-escapes its input.

LANGUAGE: xml
CODE:
<p><t t-out="value"/></p>

----------------------------------------

TITLE: ORM-Based Odoo Upgrade Migration Script
DESCRIPTION: Alternative upgrade script implementation using Odoo's ORM to update partner names through the upgrade utils library, demonstrating object-oriented database access.

LANGUAGE: python
CODE:
import logging
from odoo.upgrade import util

_logger = logging.getLogger(__name__)


def migrate(cr, version):
    env = util.env(cr)

    partners = env["res.partner"].search([])
    for partner in partners:
        partner.name += "!"

    _logger.info("Updated %s partners", len(partners))

----------------------------------------

TITLE: Creating Dropdown Menu in Odoo XML
DESCRIPTION: XML configuration for creating a dropdown menu with parent menu declaration and child menu items.

LANGUAGE: xml
CODE:
<record id="menu_services" model="website.menu">
    <field name="name">Services</field>
    <field name="website_id">1</field>
    <field name="parent_id" search="[
        ('url', '=', '/default-main-menu'),
        ('website_id', '=', 1)]"/>
    <field name="sequence" type="int">...</field>
</record>

LANGUAGE: xml
CODE:
<record id="menu_services_item_1" model="website.menu">
    <field name="name">Item 1</field>
    <field name="url">/dropdown/item-1</field>
    <field name="website_id">1</field>
    <field name="parent_id" ref="website_airproof.menu_services"/>
    <field name="sequence" type="int">...</field>
</record>

----------------------------------------

TITLE: Creating Module Directory Structure for Importable Module
DESCRIPTION: Shows the basic directory structure needed for an importable Odoo module using only XML files

LANGUAGE: bash
CODE:
estate
├── actions
│   └── *.xml
├── models
│   └── *.xml
├── security
│   └── ir.model.access.csv
│   └── estate_security.xml
├── views
│   └── *.xml
├── __init__.py
└── __manifest__.py

----------------------------------------

TITLE: Declaring Custom View in XML
DESCRIPTION: Shows how to declare the custom view type in an XML record, specifying the model and arch for the view.

LANGUAGE: xml
CODE:
<record id="my_beautiful_view" model="ir.ui.view">
  <field name="name">my_view</field>
  <field name="model">my_model</field>
  <field name="arch" type="xml">
      <beautiful fieldFromTheArch="res.partner"/>
  </field>
</record>

----------------------------------------

TITLE: Python imports ordering
DESCRIPTION: Example of proper imports ordering in Python files for Odoo modules.

LANGUAGE: python
CODE:
# 1 : imports of python lib
import base64
import re
import time
from datetime import datetime
# 2 : imports of odoo
import odoo
from odoo import Command, _, api, fields, models # alphabetically ordered
from odoo.tools.safe_eval import safe_eval as eval
# 3 : imports from odoo addons
from odoo.addons.web.controllers.main import login_redirect
from odoo.addons.website.models.website import slug

----------------------------------------

TITLE: Implementing useSpellCheck Hook for Input Elements
DESCRIPTION: Demonstrates how to use the useSpellCheck hook to enable spellchecking on focus for input elements and contenteditable divs.

LANGUAGE: javascript
CODE:
import { useSpellCheck } from "@web/core/utils/hooks";

class Comp {
  setup() {
    this.simpleRef = useSpellCheck();
    this.customRef = useSpellCheck({ refName: "custom" });
    this.nodeRef = useSpellCheck({ refName: "container" });
  }
  static template = "Comp";
}

LANGUAGE: xml
CODE:
<t t-name="Comp">
  <input t-ref="spellcheck" type="text"/>
  <textarea t-ref="custom"/>
  <div t-ref="container">
    <input type="text" spellcheck="false"/>
    <div contenteditable="true"/>
  </div>
</t>

----------------------------------------

TITLE: Defining Basic Snippet Structure in XML
DESCRIPTION: Shows the basic XML structure for defining a custom snippet template

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <template id="s_airproof_snippet" name="...">
        <section class="s_airproof_snippet">
            <!-- Content -->
        </section>
    </template>
</odoo>

----------------------------------------

TITLE: Window Action Example - Python
DESCRIPTION: Sample code showing how to open customer records in list and form views using window actions

LANGUAGE: python
CODE:
{
    "type": "ir.actions.act_window",
    "res_model": "res.partner",
    "views": [[False, "list"], [False, "form"]],
    "domain": [["customer", "=", true]],
}

----------------------------------------

TITLE: Configuring Form Actions in Odoo
DESCRIPTION: Examples of different form actions available in Odoo through the data-model_name attribute. Includes options for email, job applications, customer creation, tickets, opportunities, and tasks.

LANGUAGE: xml
CODE:
<form data-model_name="mail.mail">

LANGUAGE: xml
CODE:
<form data-model_name="hr.applicant">

LANGUAGE: xml
CODE:
<form data-model_name="res.partner">

LANGUAGE: xml
CODE:
<form data-model_name="helpdesk.ticket">

LANGUAGE: xml
CODE:
<form data-model_name="crm.lead">

LANGUAGE: xml
CODE:
<form data-model_name="project.task">

----------------------------------------

TITLE: Scaffolding Odoo Module using odoo-bin
DESCRIPTION: Command to scaffold a new Odoo module structure using the odoo-bin executable.

LANGUAGE: bash
CODE:
$ odoo-bin scaffold my_module ~/src/user/

----------------------------------------

TITLE: Implementing usePosition Hook for Element Positioning
DESCRIPTION: Shows how to use the usePosition hook to position an element relative to another with automatic updates on window resize/scroll.

LANGUAGE: javascript
CODE:
import { usePosition } from "@web/core/position_hook";
import { Component, xml } from "@odoo/owl";

class MyPopover extends Component {
  static template = xml`
    <div t-ref="popper">
      I am positioned through a wonderful hook!
    </div>
  `;

  setup() {
    // Here, the reference is the target props, which is an HTMLElement
    usePosition(this.props.target);
  }
}

----------------------------------------

TITLE: QWeb Loops
DESCRIPTION: Demonstrates how to use the t-foreach directive for iteration in QWeb templates.

LANGUAGE: xml
CODE:
<t t-foreach="[1, 2, 3]" t-as="i">
    <p><t t-out="i"/></p>
</t>

----------------------------------------

TITLE: Importing Test Modules in Python
DESCRIPTION: Demonstrates how to import test modules in the __init__.py file.

LANGUAGE: python
CODE:
from . import test_foo, test_bar

----------------------------------------

TITLE: Setting Translatable Content with t-set in Odoo XML
DESCRIPTION: Illustrates how to set translatable content using t-set in Odoo XML. This method allows for translatable text between XML tags.

LANGUAGE: xml
CODE:
<t t-set="additional_title">My Page Title Shown in the Browser Tab</t>

----------------------------------------

TITLE: Executing SQL Transactions in Odoo.sh Database
DESCRIPTION: Shows how to use SQL transactions for safe database operations in Odoo.sh. It emphasizes the importance of using BEGIN and COMMIT/ROLLBACK statements to ensure data integrity and provide a safety net for potentially destructive operations.

LANGUAGE: sql
CODE:
odoo-addons-master-1=> BEGIN;
BEGIN
odoo-addons-master-1=> UPDATE res_users SET password = '***';
UPDATE 457
odoo-addons-master-1=> ROLLBACK;
ROLLBACK

LANGUAGE: sql
CODE:
odoo-addons-master-1=> BEGIN;
BEGIN
odoo-addons-master-1=> UPDATE res_users SET password = '***' WHERE id = 1;
UPDATE 1
odoo-addons-master-1=> COMMIT;
COMMIT

----------------------------------------

TITLE: Defining Client Action in XML for Odoo
DESCRIPTION: This snippet shows how to define a client action in Odoo's XML format. It creates a record in the 'ir.actions.client' model, specifying the name and tag of the action.

LANGUAGE: xml
CODE:
<record model="ir.actions.client" id="my_client_action">
    <field name="name">My Client Action</field>
    <field name="tag">my_module.MyClientAction</field>
</record>

----------------------------------------

TITLE: Adding X2many Fields in Odoo XML Data
DESCRIPTION: Example of adding One2many or Many2many field data using Command methods in Odoo XML declarations.

LANGUAGE: xml
CODE:
<odoo>
  <record id="id1" model="tutorial.example">
    <field name="related_ids" eval="[
        Command.create({
            'name': 'My name',
        }),
        Command.create({
            'name': 'Your name',
        }),
        Command.link(ref('model.xml_id')),
    ]"/>
  </record>
</odoo>

----------------------------------------

TITLE: Owl Component Error Handling
DESCRIPTION: Example showing error handling within an Owl component using onError hook and Promise rejection.

LANGUAGE: javascript
CODE:
import { Component, onError } from "@odoo/owl";
class MyComponent extends Component {
  setup() {
    onError((error) => {
      // implementation of this method is left as an exercise for the reader
      this.removeErroringSubcomponent();
      Promise.reject(error); // create a rejected Promise without passing it anywhere
    });
  }
}

----------------------------------------

TITLE: Defining Default Values for Odoo Model Fields
DESCRIPTION: Shows how to define default values for fields in an Odoo model, including using lambda functions.

LANGUAGE: python
CODE:
name = fields.Char(default="Unknown")
user_id = fields.Many2one('res.users', default=lambda self: self.env.user)

----------------------------------------

TITLE: Adding Component to Portal Template in XML
DESCRIPTION: XML template modification to integrate the Owl component into the portal homepage

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <template id="your_module.portal_my_home" inherit_id="portal.portal_my_home">
        <xpath expr="//*[hasclass('o_portal_my_home')]" position="before">
            <owl-component name="your_module.YourComponent" />
        </xpath>
    </template>
</odoo>

----------------------------------------

TITLE: Adding a User Menu Item in Odoo Web Client
DESCRIPTION: Demonstrates how to add an item to the user menu in Odoo's web client. User menu items appear when clicking on the user's name in the top right corner of the interface.

LANGUAGE: javascript
CODE:
import { registry } from "@web/core/registry";

registry.category("user_menuitems").add("my item", (env) => {
    return {
        description: env._t("Technical Settings"),
        callback: () => { env.services.action_manager.doAction(3); },
        hide: (Math.random() < 0.5),
    };
});

----------------------------------------

TITLE: Implementing Controller for Standalone Owl App in Odoo
DESCRIPTION: Creates an HTTP controller that renders the standalone Owl application view. It includes session information for the frontend.

LANGUAGE: python
CODE:
from odoo.http import request, route, Controller

class YourController(Controller):
    @route("/your_module/standalone_app", auth="public")
    def standalone_app(self):
        return request.render(
            'your_module.standalone_app',
            {
                'session_info': request.env['ir.http'].get_frontend_session_info(),
            }
        )

----------------------------------------

TITLE: Using 'eval' in Odoo XML Data
DESCRIPTION: Example of using the 'eval' attribute to compute values in Odoo XML data declarations.

LANGUAGE: xml
CODE:
<odoo>
  <record id="id1" model="tutorial.example">
    <field name="year" eval="datetime.now().year+1"/>
  </record>
</odoo>

----------------------------------------

TITLE: Standard Commit Message Structure
DESCRIPTION: Template showing the recommended format for commit messages, including tag, module name, short description and detailed explanation.

LANGUAGE: text
CODE:
[TAG] module: describe your change in a short sentence (ideally < 50 chars)

Long version of the change description, including the rationale for the change,
or a summary of the feature being introduced.

Please spend a lot more time describing WHY the change is being done rather
than WHAT is being changed. This is usually easy to grasp by actually reading
the diff. WHAT should be explained only if there are technical choices
or decision involved. In that case explain WHY this decision was taken.

End the message with references, such as task or bug numbers, PR numbers, and
OPW tickets, following the suggested format:
task-123 (related to task)
Fixes #123  (close related issue on Github)
Closes #123  (close related PR on Github)
opw-123 (related to ticket)

----------------------------------------

TITLE: Implementing IoT Device Driver in Python
DESCRIPTION: Example of implementing a Driver class to handle communication with a specific type of IoT device. Includes initialization and device support detection.

LANGUAGE: python
CODE:
from odoo.addons.hw_drivers.driver import Driver

class DriverName(Driver):
    connection_type = 'ConnectionType'

    def __init__(self, identifier, device):
        super(NewDriver, self).__init__(identifier, device)
        self.device_type = 'DeviceType'
        self.device_connection = 'DeviceConnection'
        self.device_name = 'DeviceName'

    @classmethod
    def supported(cls, device):
        ...

----------------------------------------

TITLE: Opening Custom Powerbox Programmatically
DESCRIPTION: Example demonstrating how to programmatically open the Powerbox with custom categories and commands by using the open method on the editor's powerbox instance.

LANGUAGE: javascript
CODE:
this.odooEditor.powerbox.open(
    [{
        name: _t('Document'),
        category: _t('Documentation'),
        description: _t("Add this text to your mailing's documentation"),
        fontawesome: 'fa-book',
        priority: 1, // This is the only command in its category anyway.
    }],
    [{
        name: _t('Documentation'),
        priority: 300,
    }]
);

----------------------------------------

TITLE: Defining Python Test Module Structure
DESCRIPTION: Shows the recommended file structure for Python test modules in Odoo.

LANGUAGE: text
CODE:
your_module
├── ...
├── tests
|   ├── __init__.py
|   ├── test_bar.py
|   └── test_foo.py

----------------------------------------

TITLE: Setting Background Images in Odoo
DESCRIPTION: This snippet demonstrates how to set a background image for a section in Odoo using inline CSS. It uses the image URL format for attachments.

LANGUAGE: xml
CODE:
<section style="background-image: url('/web/image/website_airproof.img_about_01');"></section>

----------------------------------------

TITLE: Applying Gradient to Section in Odoo XML
DESCRIPTION: This snippet demonstrates how to add a gradient background to a section using inline CSS in the style attribute. The gradient is defined using the linear-gradient function with specific color stops.

LANGUAGE: xml
CODE:
<section class="s_text_image" data-snippet="s_text_image" data-name="Text - Image" style="background-image: linear-gradient(135deg, rgb(255, 204, 51) 0%, rgb(226, 51, 255) 100%) !important;">
    <!-- Content -->
</section>

----------------------------------------

TITLE: Creating an Odoo Menu and Action
DESCRIPTION: Defines XML records to add a menu item and window action for the Teachers model.

LANGUAGE: xml
CODE:
<odoo>
    <record id="action_academy_teachers" model="ir.actions.act_window">
        <field name="name">Academy teachers</field>
        <field name="res_model">academy.teachers</field>
    </record>

    <menuitem sequence="0" id="menu_academy" name="Academy"/>
    <menuitem id="menu_academy_content" parent="menu_academy"
                name="Academy Content"/>
    <menuitem id="menu_academy_content_teachers"
                parent="menu_academy_content"
                action="action_academy_teachers"/>
</odoo>

----------------------------------------

TITLE: Defining Function Calls in Odoo XML Data Files
DESCRIPTION: Shows how to use the 'function' tag to call methods on models with parameters. Demonstrates different ways of providing parameters using 'eval' and 'value' elements.

LANGUAGE: xml
CODE:
<odoo>
    <data noupdate="1">
        <record id="partner_1" model="res.partner">
            <field name="name">Odude</field>
        </record>

        <function model="res.partner" name="send_inscription_notice"
            eval="[[ref('partner_1'), ref('partner_2')]]" />

        <function model="res.users" name="send_vip_inscription_notice">
            <function eval="[[('vip','=',True)]]" model="res.partner" name="search"/>
        </function>
    </data>

    <record id="model_form_view" model="ir.ui.view">
        ...
    </record>
</odoo>

----------------------------------------

TITLE: Writing a Basic JavaScript QUnit Test
DESCRIPTION: Shows an example of a simple QUnit test for JavaScript code in Odoo.

LANGUAGE: javascript
CODE:
QUnit.module('py_utils');

QUnit.test('simple arithmetic', function (assert) {
    assert.expect(2);

    var result = pyUtils.py_eval("1 + 2");
    assert.strictEqual(result, 3, "should properly evaluate sum");
    result = pyUtils.py_eval("42 % 5");
    assert.strictEqual(result, 2, "should properly evaluate modulo operator");
});

----------------------------------------

TITLE: Using assertQueryCount for Performance Testing
DESCRIPTION: Shows how to use assertQueryCount to test database query performance in Odoo.

LANGUAGE: python
CODE:
with self.assertQueryCount(11):
    do_something()

----------------------------------------

TITLE: Basic Manifest File Structure for Localization Module
DESCRIPTION: Example manifest file structure for an Odoo accounting localization module, defining dependencies, data files, and demo data.

LANGUAGE: python
CODE:
{
    "name": "COUNTRY - Accounting",
    "version": "1.0.0",
    "category": "Accounting/Localizations/Account Charts",
    "license": "LGPL-3",
    "depends": [
        "account",
    ],
    "data": [
        "data/other_data.xml",
        "views/xxxmodel_views.xml",
    ],
    "demo": [
        "demo/demo_company.xml",
    ]
}

----------------------------------------

TITLE: Applying Gradient to Text in Odoo XML
DESCRIPTION: This snippet shows how to apply a gradient to text using a font tag with the text-gradient class. The gradient is defined in the style attribute using the linear-gradient function.

LANGUAGE: xml
CODE:
<h2>
    <font class="text-gradient" style="background-image: linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%);">A Section Subtitle</font>
</h2>

----------------------------------------

TITLE: Applying Multiple Classes to a Field in Odoo XML
DESCRIPTION: This snippet demonstrates how to apply multiple CSS classes to a field element in Odoo XML. It combines inline styling, left floating, and avatar display for an image field.

LANGUAGE: xml
CODE:
<field name="fname" class="oe_inline oe_left oe_avatar"/>

----------------------------------------

TITLE: Adding Website Support to Controller
DESCRIPTION: Modifies the controller to use the website layout and render a template.

LANGUAGE: python
CODE:
class Academy(http.Controller):

     @http.route('/academy/academy/', auth='public', website=True)
     def index(self, **kw):
         Teachers = http.request.env['academy.teachers']
         return http.request.render('academy.index', {
             'teachers': Teachers.search([])
         })

----------------------------------------

TITLE: Documenting PaymentMethod Class in Odoo's Payment Module
DESCRIPTION: This snippet documents the PaymentMethod class from Odoo's payment module. It includes two methods: _get_compatible_payment_methods for retrieving compatible payment methods, and _get_from_code for getting a payment method from its code.

LANGUAGE: Python
CODE:
.. autoclass:: odoo.addons.payment.models.payment_method.PaymentMethod()

   .. automethod:: _get_compatible_payment_methods
   .. automethod:: _get_from_code

----------------------------------------

TITLE: Starting a Tour from Python Test
DESCRIPTION: Shows how to start a tour from a Python test using HTTPCase.

LANGUAGE: python
CODE:
def test_your_test(self):
    # Optional Setup
    self.start_tour("/web", "your_tour_name", login="admin")
    # Optional verifications

----------------------------------------

TITLE: Creating New Text Field Component in JavaScript for Odoo
DESCRIPTION: This JavaScript code creates a new MyTextField component that displays text in red. It includes the component definition, props, and registration in the fields registry.

LANGUAGE: javascript
CODE:
import { standardFieldProps } from "@web/views/fields/standard_field_props";
import { Component, xml } from "@odoo/owl";
import { registry } from "@web/core/registry";

export class MyTextField extends Component {
   static template = xml`
      <input t-att-id="props.id" class="text-danger" t-att-value="props.value" onChange.bind="onChange" />
   `;
   static props = { ...standardFieldProps };
   static supportedTypes = ["char"];

   /**
   * @param {boolean} newValue
   */
   onChange(newValue) {
      this.props.update(newValue);
   }
}

registry.category("fields").add("my_text_field", MyTextField);

----------------------------------------

TITLE: Adding Custom Snippet to Snippets List
DESCRIPTION: Demonstrates how to add a custom snippet to the list of available snippets in the Website Builder

LANGUAGE: xml
CODE:
<template id="snippets" inherit_id="website.snippets" name="Airproof - Custom Snippets">
    <xpath expr="//*[@id='default_snippets']" position="before">
        <t id="x_theme_snippets">
            <div id="x_theme_snippets_category" class="o_panel">
                <div class="o_panel_header">Theme</div>
                <div class="o_panel_body">
                    <t t-snippet="website_airproof.s_airproof_snippet" t-thumbnail="/website_airproof/static/src/img/wbuilder/s_airproof_snippet.svg">
                        <keywords>Snippet</keywords>
                    </t>
                </div>
            </div>
        </t>
    </xpath>
</template>

----------------------------------------

TITLE: Show Mobile Notification
DESCRIPTION: Displays a system notification with title and message that appears in the device's notification area.

LANGUAGE: javascript
CODE:
mobile.showNotification({'title': 'Simple Notification', 'message': 'This is a test for a simple notification'})

----------------------------------------

TITLE: Using 'function' in Odoo XML Data
DESCRIPTION: Example of using the 'function' tag to execute Python code when loading data in Odoo.

LANGUAGE: xml
CODE:
<function model="tutorial.example" name="action_validate">
    <value eval="[ref('demo_invoice_1')]"/>
</function>

----------------------------------------

TITLE: Scaffolding a New Odoo Module
DESCRIPTION: Uses the Odoo scaffold command to create a new module directory and basic files.

LANGUAGE: console
CODE:
$ ./odoo-bin scaffold Academy my-modules

----------------------------------------

TITLE: Implementing Help Attribute in Odoo XML Button
DESCRIPTION: This snippet demonstrates how to add a tooltip message to a button in Odoo using the 'help' attribute. The example shows a button with an icon that, when hovered over, displays a 'Revoke' tooltip.

LANGUAGE: xml
CODE:
<button type="object" name="remove" icon="fa-trash" help="Revoke"/>

----------------------------------------

TITLE: Search View Filters
DESCRIPTION: Example of defining search filters and fields in a search view

LANGUAGE: xml
CODE:
<search>
    <field name="name" string="My Custom Name"/>
    <filter string="My orders" domain="[('user_id', '=', uid)]"/>
    <filter string="Category" context="{'group_by': 'category_id'}"/>
</search>

----------------------------------------

TITLE: Creating PO File for Odoo Module Translation
DESCRIPTION: Shows the structure of a PO file used for translating Odoo modules. This example includes a msgid and msgstr for a custom snippet translation.

LANGUAGE: po
CODE:
#. module: website_airproof
#: model_terms:ir.ui.view,arch_db:website_airproof.s_custom_snippet
msgid "..."
msgstr "..."

----------------------------------------

TITLE: Vibrate Mobile Device
DESCRIPTION: Triggers device vibration for a specified duration in milliseconds.

LANGUAGE: javascript
CODE:
mobile.methods.vibrate({'duration': 100});

----------------------------------------

TITLE: Embedding Video Content in Odoo
DESCRIPTION: This code shows how to embed a video as content in Odoo. It uses the 'media_iframe_video' class and includes placeholder elements for editing mode.

LANGUAGE: xml
CODE:
<div class="media_iframe_video" data-oe-expression="...">
    <div class="css_editable_mode_display">&nbsp;</div>
    <div class="media_iframe_video_size" contenteditable="false">&nbsp;</div>
    <iframe src="..."
        frameborder="0"
        contenteditable="false"
        allowfullscreen="allowfullscreen"/>
</div>

----------------------------------------

TITLE: Customizing Product Display in Shop
DESCRIPTION: Creates an inherited view to hide prices for free products in the shop.

LANGUAGE: xml
CODE:
<template id="product_item_hide_no_price" inherit_id="website_sale.products_item">
    <xpath expr="//div[hasclass('product_price')]/b" position="attributes">
        <attribute name="t-if">product.price &gt; 0</attribute>
    </xpath>
</template>

----------------------------------------

TITLE: Defining Button Context in Odoo XML Views
DESCRIPTION: This snippet demonstrates how to use the 'context' attribute when defining a button in an Odoo XML view. The context is specified as a Python expression that evaluates to a dictionary, allowing additional data to be passed when the button action is triggered.

LANGUAGE: xml
CODE:
<button name="button_confirm" type="object" context="{'BUSINESS_KEY': ANY}" string="LABEL"/>

----------------------------------------

TITLE: JavaScript QWeb Rendering
DESCRIPTION: Shows how to render QWeb templates in JavaScript using the core.qweb.render method.

LANGUAGE: javascript
CODE:
var result = core.qweb.render('template-name', {
    context_value: 42
});

----------------------------------------

TITLE: Adding Custom Widget to Field in Odoo XML View
DESCRIPTION: This XML snippet shows how to use the custom 'late_boolean' widget for a field in an Odoo view definition.

LANGUAGE: xml
CODE:
<field name="somefield" widget="late_boolean"/>

----------------------------------------

TITLE: Declaring Company Logo in Odoo
DESCRIPTION: This code shows how to declare a company logo in Odoo. It sets the logo field of the default website record with the image file.

LANGUAGE: xml
CODE:
<record id="website.default_website" model="website">
    <field name="logo" type="base64" file="website_airproof/static/src/img/content/logo.png"/>
</record>

----------------------------------------

TITLE: Component Patching Example
DESCRIPTION: Demonstrates how to patch an Owl component's setup method.

LANGUAGE: javascript
CODE:
patch(MyComponent.prototype, {
  setup() {
    useMyHook();
  },
});

----------------------------------------

TITLE: Tagging Python Tests
DESCRIPTION: Demonstrates how to tag Python tests for selective execution.

LANGUAGE: python
CODE:
@tagged('-standard', 'nice')
class NiceTest(TransactionCase):
    ...

----------------------------------------

TITLE: Updating Module Manifest with Template
DESCRIPTION: Python manifest update to include the template file in the module's data section

LANGUAGE: python
CODE:
{
    # ...
    'data': [
        'views/templates.xml',
    ]
}

----------------------------------------

TITLE: Onchange Method in Odoo
DESCRIPTION: This example shows how to define an onchange method in Odoo. The method updates the 'name' and 'description' fields when the 'partner_id' field changes in a form view.

LANGUAGE: python
CODE:
from odoo import api, fields, models

class TestOnchange(models.Model):
    _name = "test.onchange"

    name = fields.Char(string="Name")
    description = fields.Char(string="Description")
    partner_id = fields.Many2one("res.partner", string="Partner")

    @api.onchange("partner_id")
    def _onchange_partner_id(self):
        self.name = "Document for %s" % (self.partner_id.name)
        self.description = "Default description for %s" % (self.partner_id.name)

----------------------------------------

TITLE: Setting Variables in QWeb
DESCRIPTION: Demonstrates how to set variables within QWeb templates using the t-set directive.

LANGUAGE: xml
CODE:
<t t-set="foo" t-value="2 + 1"/>
<t t-out="foo"/>

<t t-set="foo">
    <li>ok</li>
</t>
<t t-out="foo"/>

----------------------------------------

TITLE: Show Snackbar with Action
DESCRIPTION: Displays a snackbar message with an optional action button. Returns true if user clicks action button, false if dismissed automatically.

LANGUAGE: javascript
CODE:
mobile.methods.showSnackBar({'message': 'Message is deleted', 'btn_text': 'Undo'}).then(function(result){
    if(result){
        // Do undo operation
    }else{
        // Snack Bar dismissed
    }
});

----------------------------------------

TITLE: PostgreSQL User Creation (Linux/Mac)
DESCRIPTION: Commands to create a PostgreSQL user and database for Odoo installation on Linux/Mac systems.

LANGUAGE: console
CODE:
$ sudo -u postgres createuser -d -R -S $USER
$ createdb $USER

----------------------------------------

TITLE: Defining Snippet Options in XML
DESCRIPTION: Shows how to define options for a custom snippet using various option types

LANGUAGE: xml
CODE:
<template id="s_airproof_snippet_options" inherit_id="website.snippet_options" name="Airproof - Snippets Options">
   <xpath expr="." position="inside">
      <div data-selector=".s_airproof_snippet">
         <we-select string="Layout">
            <we-button data-select-class="">Default</we-button>
            <we-button data-select-class="s_airproof_snippet_portrait">Portrait</we-button>
            <we-button data-select-class="s_airproof_snippet_square">Square</we-button>
            <we-button data-select-class="s_airproof_snippet_landscape">Landscape</we-button>
         </we-select>
         <we-title>Space</we-title>
         <we-button-group string="Before">
            <we-button data-select-class="mt-0">1</we-button>
            <we-button data-select-class="mt-3">2</we-button>
            <we-button data-select-class="mt-5">3</we-button>
         </we-button-group>
      </div>
   </xpath>
</template>

----------------------------------------

TITLE: Python Device Action Handler
DESCRIPTION: Implementation of the action handler method in a Python driver to process device commands.

LANGUAGE: python
CODE:
def action(self, data):
    ...

----------------------------------------

TITLE: Using the Notebook Component
DESCRIPTION: Demonstrates how to use the Notebook component to create tabbed interfaces.

LANGUAGE: xml
CODE:
<Notebook orientation="'vertical'">
  <t t-set-slot="page_1" title="'Page 1'" isVisible="true">
    <h1>My First Page</h1>
    <p>It's time to build Owl components. Did you read the documentation?</p>
  </t>
  <t t-set-slot="page_2" title="'2nd page'" isVisible="true">
    <p>Wise owl's silent flight. Through the moonlit forest deep, guides my path to code</p>
  </t>
</Notebook>

----------------------------------------

TITLE: Adding Information to the Session in Python
DESCRIPTION: How to extend the session_info method to add custom data to the session

LANGUAGE: python
CODE:
from odoo import models
from odoo.http import request

class IrHttp(models.AbstractModel):
    _inherit = 'ir.http'

    def session_info(self):
        result = super(IrHttp, self).session_info()
        result['some_key'] = get_some_value_from_db()
        return result

----------------------------------------

TITLE: JavaScript Event Listener Implementation
DESCRIPTION: Example of setting up an event listener for IoT device value changes in JavaScript.

LANGUAGE: javascript
CODE:
iot_device.add_listener(this._onValueChange.bind(this));

_onValueChange: function (result) {
    ...
}

----------------------------------------

TITLE: OpenAcademy Session Management with XML-RPC
DESCRIPTION: Example solution showing how to list sessions and create new ones using XML-RPC. Includes functionality to search for courses and create associated sessions.

LANGUAGE: python
CODE:
import functools
import xmlrpc.client
HOST = 'localhost'
PORT = 8069
DB = 'openacademy'
USER = 'admin'
PASS = 'admin'
ROOT = 'http://%s:%d/xmlrpc/' % (HOST,PORT)

# 1. Login
uid = xmlrpc.client.ServerProxy(ROOT + 'common').login(DB,USER,PASS)
print("Logged in as %s (uid:%d)" % (USER,uid))

call = functools.partial(
    xmlrpc.client.ServerProxy(ROOT + 'object').execute,
    DB, uid, PASS)

# 2. Read the sessions
sessions = call('openacademy.session','search_read', [], ['name','seats'])
for session in sessions:
    print("Session %s (%s seats)" % (session['name'], session['seats']))
# 3.create a new session
session_id = call('openacademy.session', 'create', {
    'name' : 'My session',
    'course_id' : 2,
})

----------------------------------------

TITLE: Installing PostgreSQL on Debian/Ubuntu for Odoo
DESCRIPTION: Command to install PostgreSQL server on Debian-based systems as a dependency for Odoo.

LANGUAGE: console
CODE:
$ sudo apt install postgresql -y

----------------------------------------

TITLE: Custom Field Declaration XML
DESCRIPTION: Example of declaring a custom field in Odoo by creating a record linked to an existing model.

LANGUAGE: xml
CODE:
<record id="x_post_category" model="ir.model.fields">
   <field name="name">x_post_category</field>
   <field name="field_description">...</field>
   <field name="ttype">html</field>
   <field name="state">manual</field>
   <field name="index">0</field>
   <field name="model_id" ref="website_blog.model_blog_post"/>
</record>

----------------------------------------

TITLE: Implementing IoT Device Interface in Python
DESCRIPTION: Example of implementing an Interface class to detect and manage IoT devices of a specific connection type. The get_devices method returns information about detected devices.

LANGUAGE: python
CODE:
from odoo.addons.hw_drivers.interface import Interface

class InterfaceName(Interface):
    connection_type = 'ConnectionType'

    def get_devices(self):
        return {
            'device_identifier_1': {...},
            ...
        }

----------------------------------------

TITLE: Using the ActionSwiper Component
DESCRIPTION: Example of using the ActionSwiper component to add swipe actions to an element.

LANGUAGE: xml
CODE:
<ActionSwiper
  onRightSwipe="
    {
      action: '() => Delete item',
      icon: 'fa-delete',
      bgColor: 'bg-danger',
    }"
  onLeftSwipe="
    {
      action: '() => Star item',
      icon: 'fa-star',
      bgColor: 'bg-warning',
    }"
>
  <div>
    Swipable item
  </div>
</ActionSwiper>

----------------------------------------

TITLE: Object Patching with Super Keyword
DESCRIPTION: Shows how to access the original method using the super keyword when patching an object's function.

LANGUAGE: javascript
CODE:
patch(object, {
  fn() {
    super.fn(...arguments);
    // do other things
  },
});

----------------------------------------

TITLE: Deactivating Default Odoo Website Pages
DESCRIPTION: These snippets show how to deactivate default pages (homepage and contact page) in an Odoo website by setting their 'active' field to False.

LANGUAGE: xml
CODE:
<record id="website.homepage" model="ir.ui.view">
    <field name="active" eval="False"/>
</record>

LANGUAGE: xml
CODE:
<record id="website.contactus" model="ir.ui.view">
    <field name="active" eval="False"/>
</record>

----------------------------------------

TITLE: Rendering Odoo Custom Icon in HTML
DESCRIPTION: Demonstrates how to use the 'oi' class along with a specific icon class to render an Odoo custom icon. This example shows the usage of the 'oi-odoo' icon.

LANGUAGE: html
CODE:
<i class="oi oi-odoo"/>

----------------------------------------

TITLE: Defining default_group_by Attribute in Odoo ORM Field
DESCRIPTION: The 'default_group_by' attribute specifies the field name for default record grouping when no explicit grouping is defined in the action or search view. It is an optional string attribute with a default value of an empty string.

LANGUAGE: python
CODE:
default_group_by = fields.Char(string="Default Group By", default='')

----------------------------------------

TITLE: Multiple Object Patching
DESCRIPTION: Demonstrates the correct way to apply the same patch to multiple objects using a factory function.

LANGUAGE: javascript
CODE:
const obj1 = {
  method() {
    doSomething();
  },
};

const obj2 = {
  method() {
    doThings();
  },
};

function createExtensionObj() {
  return {
    method() {
      super.method();
      doCommonThings();
    },
  };
}

patch(obj1, createExtensionObj());
patch(obj2, createExtensionObj());

----------------------------------------

TITLE: Show Toast Message in Mobile Device
DESCRIPTION: Displays a simple popup toast message on the mobile device. The toast only fills the space required for the message while keeping the current activity visible and interactive.

LANGUAGE: javascript
CODE:
mobile.methods.showToast({'message': 'Message sent'});

----------------------------------------

TITLE: Getters and Setters Patching
DESCRIPTION: Example of patching object getters and setters while maintaining access to original implementations.

LANGUAGE: javascript
CODE:
patch(object, {
  get number() {
    return super.number / 2;
  },
  set number(value) {
    super.number = value;
  },
});

----------------------------------------

TITLE: Creating Basic Theme Module Structure
DESCRIPTION: Example of a basic directory structure for an Odoo theme module named 'website_airproof'.

LANGUAGE: xml
CODE:
website_airproof

----------------------------------------

TITLE: Creating Custom Mega Menu Template in Odoo XML
DESCRIPTION: XML code for defining a custom mega menu template and adding it to the Website Builder options.

LANGUAGE: xml
CODE:
<template id="s_mega_menu_airproof" name="Airproof" groups="base.group_user">
    <section class="s_mega_menu_airproof o_cc o_cc1 pt40">
        <!-- Content -->
    </section>
</template>

LANGUAGE: xml
CODE:
<template id="snippet_options" inherit_id="website.snippet_options" name="Airproof - Mega Menu Options">
    <xpath expr="//*[@data-name='mega_menu_template_opt']/*" position="before">
        <t t-set="_label">Airproof</t>
        <we-button t-att-data-select-label="_label"
            data-select-template="website_airproof.s_mega_menu_airproof"
            data-img="/website_airproof/static/src/img/builder/header_opt.svg"
            t-out="_label"/>
    </xpath>
</template>

----------------------------------------

TITLE: Defining 'name' Attribute in Odoo
DESCRIPTION: The 'name' attribute is used to specify the method to call for 'object' type or the action to load for 'action' type. It can be an XMLID or a formatted string.

LANGUAGE: python
CODE:
.. attribute:: name
   :noindex:

   The method to call if the `type` is `object`. The :term:`XMLID <external identifier>` of the
   action to load if the `type` is `action`, either in raw format or in `%(XMLID)d` format.

   :requirement: Optional
   :type: str
   :default: `''`

----------------------------------------

TITLE: Defining a QWeb Template for Odoo Web
DESCRIPTION: Creates a simple QWeb template for rendering HTML content in an Odoo web module.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">
    <t t-name="HomePageTemplate">
        <div style="background-color: red;">This is some simple HTML</div>
    </t>
</templates>

----------------------------------------

TITLE: Registry Field Component Registration
DESCRIPTION: Example demonstrating how to register a custom field component in the fields registry.

LANGUAGE: javascript
CODE:
import { Component } from "@odoo/owl";
import { registry } from "./core/registry";

class MyFieldChar extends Component {
    // some code
}

registry.category("fields").add("my_field_char", MyFieldChar);

----------------------------------------

TITLE: Adding Custom Powerbox Command in Mass Mailing
DESCRIPTION: Example showing how to add a new 'Document' command to a custom 'Documentation' category in the Powerbox for the mass_mailing module by overriding _getPowerboxOptions.

LANGUAGE: javascript
CODE:
_getPowerboxOptions: function () {
    const options = this._super();
    // (existing code before the return statement)
    options.categories.push({
        name: _t('Documentation'),
        priority: 300,
    });
    options.commands.push({
        name: _t('Document'),
        category: _t('Documentation'),
        description: _t("Add this text to your mailing's documentation"),
        fontawesome: 'fa-book',
        priority: 1, // This is the only command in its category anyway.
    });
    return options;
}

----------------------------------------

TITLE: Defining Root Component Template in XML for Odoo Standalone Owl App
DESCRIPTION: Creates an XML template for the root component of a standalone Owl application in Odoo. The template simply renders 'Hello, World!'.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">
    <t t-name="your_module.Root">
        Hello, World!
    </t>
</templates>

----------------------------------------

TITLE: Resource Cleanup with Try/Finally
DESCRIPTION: Demonstrates proper resource cleanup using try/finally blocks to prevent memory leaks.

LANGUAGE: javascript
CODE:
eventTarget.addEventListener("event", handler);
try {
  someFunction();
} finally {
  eventTarget.removeEventListener("event", handler);
}

----------------------------------------

TITLE: Cloning Git Repository and Creating Branch in Bash
DESCRIPTION: Commands to clone the GitHub repository and create a new development branch.

LANGUAGE: bash
CODE:
$ mkdir ~/src
$ cd ~/src
$ git clone https://github.com/odoo/odoo-addons.git
$ cd ~/src/odoo-addons
$ git checkout -b feature-1 master

----------------------------------------

TITLE: Setting Button Icon in Odoo XML View
DESCRIPTION: Demonstrates how to set a Font Awesome icon for an Odoo button using the icon attribute. The example shows configuration of a trash icon for a remove action button.

LANGUAGE: xml
CODE:
<button type="object" name="remove" icon="fa-trash"/>

----------------------------------------

TITLE: Switch Device Account
DESCRIPTION: Switches between different accounts configured on the mobile device.

LANGUAGE: javascript
CODE:
mobile.methods.switchAccount();

----------------------------------------

TITLE: Implementing BaseModel.init() Override in Odoo
DESCRIPTION: Method to populate SQL view by overriding BaseModel.init(). Uses tools.drop_view_if_exists to prevent conflicts and executes SQL query to create or replace the view.

LANGUAGE: python
CODE:
def init(self):
    tools.drop_view_if_exists(self.env.cr, self._table)
    self.env.cr.execute("""CREATE or REPLACE VIEW %s as (
                         SELECT
                            %s
                         FROM
                            %s
      )""" % (self._table, self._select(), self._from()))

----------------------------------------

TITLE: Adding Custom Gradient to Odoo Website Builder Palette
DESCRIPTION: This XML snippet demonstrates how to add a custom gradient to the Website Builder palette. It extends the existing colorpicker view by adding a new gradient option to the predefined_gradients section.

LANGUAGE: xml
CODE:
<record id="colorpicker" model="ir.ui.view">
   <field name="key">website_airproof.colorpicker</field>
   <field name="name">Custom Gradients</field>
   <field name="type">qweb</field>
   <field name="inherit_id" ref="web_editor.colorpicker"/>
   <field name="arch" type="xml">
      <xpath expr="//div[@data-name='predefined_gradients']/t[@t-set='gradients']" position="after">
         <t t-set="gradients" t-value="gradients + ['linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)']" />
      </xpath>
   </field>
</record>

----------------------------------------

TITLE: Creating Odoo Module Structure - Python File Paths
DESCRIPTION: Defines the required file structure for a new Odoo module, including the initialization and manifest files in the estate directory.

LANGUAGE: plaintext
CODE:
/home/$USER/src/tutorials/estate/__init__.py
/home/$USER/src/tutorials/estate/__manifest__.py

----------------------------------------

TITLE: Setting Default Company in Odoo Models
DESCRIPTION: Demonstrates how to set a default company for a model with a required company_id field.

LANGUAGE: python
CODE:
from odoo import api, fields, models

class Record(models.Model):
    _name = 'record.restricted'
    _check_company_auto = True

    company_id = fields.Many2one(
        'res.company', required=True, default=lambda self: self.env.company
    )
    other_record_id = fields.Many2one('other.record', check_company=True)

----------------------------------------

TITLE: Pushing Changes to Remote Git Repository
DESCRIPTION: Git commands to stage, commit, and push changes to the remote repository.

LANGUAGE: bash
CODE:
$ git add my_module
$ git commit -m "My first module"
$ git push https HEAD:feature-1

----------------------------------------

TITLE: Declaring Images in Odoo XML
DESCRIPTION: This snippet demonstrates how to declare an image in the database for use in Odoo. It creates an attachment record with the image file, making it available in the Website Builder's media gallery.

LANGUAGE: xml
CODE:
<record id="img_about_01" model="ir.attachment">
    <field name="name">About Image 01</field>
    <field name="datas" type="base64" file="website_airproof/static/src/img/content/img_about_01.jpg"/>
    <field name="res_model">ir.ui.view</field>
    <field name="public" eval="True"/>
</record>

----------------------------------------

TITLE: Installing PostgreSQL on Fedora for Odoo
DESCRIPTION: Series of commands to install and configure PostgreSQL server on Fedora-based systems.

LANGUAGE: console
CODE:
$ sudo dnf install -y postgresql-server
$ sudo postgresql-setup --initdb --unit postgresql
$ sudo systemctl enable postgresql
$ sudo systemctl start postgresql

----------------------------------------

TITLE: Using Lazy Translation for Runtime Evaluation in Odoo
DESCRIPTION: Demonstrates the use of lazy translation (_lt) for content that should be evaluated at runtime rather than at server launch or when a JavaScript file is read.

LANGUAGE: python
CODE:
ERROR_MESSAGE = {
  'access_error': _lt('Access Error'),
  'missing_error': _lt('Missing Record'),
}

class Record(models.Model):

  def _raise_error(self, code):
    # translation lookup executed at error rendering
    raise UserError(ERROR_MESSAGE[code])

----------------------------------------

TITLE: Implementing Mega Menu in Odoo XML
DESCRIPTION: XML configuration for creating a mega menu with custom content and styling options.

LANGUAGE: xml
CODE:
<record id="menu_mega_menu" model="website.menu">
    <field name="name">Mega Menu</field>
    <field name="parent_id" search="[
        ('url', '=', '/default-main-menu'),
        ('website_id', '=', 1)]"/>
    <field name="website_id">1</field>
    <field name="sequence" type="int">..</field>
    <field name="is_mega_menu" eval="True"/>
    <field name="mega_menu_classes">...</field>
    <field name="mega_menu_content" type="html">
        <section class="s_mega_menu_multi_menus py-4 o_colored_level o_cc o_cc1">
            <!-- Mega menu content structure -->
        </section>
    </field>
</record>

----------------------------------------

TITLE: Patch Removal Example
DESCRIPTION: Shows how to remove a patch using the returned unpatch function.

LANGUAGE: javascript
CODE:
const unpatch = patch(object, { ... });
// test stuff here
unpatch();

----------------------------------------

TITLE: Pushing Changes to GitHub from Odoo.sh Online Editor
DESCRIPTION: Series of Git commands to stage, commit, and push changes made in the Odoo.sh online editor to a GitHub repository.

LANGUAGE: bash
CODE:
cd ~/src/user
git add
git commit
git push https HEAD:<branch>

----------------------------------------

TITLE: Using Font Awesome Icons in Odoo
DESCRIPTION: This snippet shows how to use Font Awesome icons in Odoo. It demonstrates basic icon usage and how to apply size and style modifiers.

LANGUAGE: xml
CODE:
<span class="fa fa-picture-o"/>

LANGUAGE: xml
CODE:
<span class="fa fa-2x fa-picture-o rounded-circle"/>

LANGUAGE: xml
CODE:
<span class="fa fa-2x fa-picture-o"/>

----------------------------------------

TITLE: Installing Odoo Package on Debian/Ubuntu
DESCRIPTION: Commands to install downloaded Odoo package and resolve dependencies on Debian-based systems.

LANGUAGE: console
CODE:
# dpkg -i <path_to_installation_package> # this probably fails with missing dependencies
# apt-get install -f # should install the missing dependencies
# dpkg -i <path_to_installation_package>

----------------------------------------

TITLE: Creating and Using a Registry in JavaScript
DESCRIPTION: Demonstrates how to create a new registry, add a key-value pair, and retrieve a value. This snippet shows the basic usage of the Registry class from @web/core/registry.

LANGUAGE: javascript
CODE:
import { Registry } from "@web/core/registry";

const myRegistry = new Registry();

myRegistry.add("hello", "odoo");

console.log(myRegistry.get("hello"));

----------------------------------------

TITLE: Creating Custom Theme Page in Odoo XML
DESCRIPTION: This code shows how to create a custom theme page in Odoo. It defines various fields like name, URL, and content structure. The noupdate attribute is used to prevent overwriting user changes.

LANGUAGE: xml
CODE:
<odoo>
   <data noupdate="1">
      <record id="page_about_us" model="website.page">
            <field name="name">About us</field>
            <field name="is_published" eval="True"/>
            <field name="key">website_airproof.page_about_us</field>
            <field name="url">/about-us</field>
            <field name="website_id" eval="1" />
            <field name="type">qweb</field>
            <field name="arch" type="xml">
               <t t-name="website_airproof.page_about_us">
                  <t t-call="website.layout">
                     <div id="wrap" class="oe_structure">
                        <!-- Content -->
                     </div>
                  </t>
               </t>
            </field>
      </record>
   </data>
</odoo>

----------------------------------------

TITLE: Defining PaymentTransaction Class in Python for Odoo
DESCRIPTION: This snippet defines the PaymentTransaction class within the Odoo payment module. It includes various methods for computing references, handling notifications, processing payments, and managing transaction states.

LANGUAGE: Python
CODE:
class PaymentTransaction():
    def _compute_reference(self):
        pass

    def _compute_reference_prefix(self):
        pass

    def _get_specific_create_values(self):
        pass

    def _get_specific_processing_values(self):
        pass

    def _get_specific_rendering_values(self):
        pass

    def _get_tx_from_notification_data(self):
        pass

    def _handle_notification_data(self):
        pass

    def _process_notification_data(self):
        pass

    def _send_capture_request(self):
        pass

    def _send_payment_request(self):
        pass

    def _send_refund_request(self):
        pass

    def _send_void_request(self):
        pass

    def _set_authorized(self):
        pass

    def _set_canceled(self):
        pass

    def _set_done(self):
        pass

    def _set_error(self):
        pass

    def _set_pending(self):
        pass

----------------------------------------

TITLE: Implementing _table_query Property in Odoo
DESCRIPTION: Alternative method for populating SQL view using _table_query property. Used when view depends on context, particularly useful in multi-company and multi-currency environments.

LANGUAGE: python
CODE:
@property
def _table_query(self):
    return 'SELECT %s FROM %s' % (self._select(), self._from())

----------------------------------------

TITLE: Cloning Odoo Repositories with Git (Windows)
DESCRIPTION: Commands for cloning both Odoo Community and Enterprise repositories using either HTTPS or SSH protocols on Windows systems.

LANGUAGE: doscon
CODE:
C:\> git clone https://github.com/odoo/odoo.git
C:\> git clone https://github.com/odoo/enterprise.git

----------------------------------------

TITLE: Creating Custom SVG Shape
DESCRIPTION: Example of creating a custom SVG shape file for use in Odoo websites.

LANGUAGE: xml
CODE:
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="86" height="100">\n    <polygon points="0 25, 43 0, 86 25, 86 75, 43 100, 0 75" style="fill: #3AADAA;"/>\n</svg>

----------------------------------------

TITLE: Installing Odoo Package on Fedora
DESCRIPTION: Commands to install downloaded Odoo package and enable service on Fedora-based systems.

LANGUAGE: console
CODE:
$ sudo dnf localinstall odoo_{CURRENT_MAJOR_BRANCH}.latest.noarch.rpm
$ sudo systemctl enable odoo
$ sudo systemctl start odoo

----------------------------------------

TITLE: Setting up the Odoo Tutorial Environment
DESCRIPTION: Instructions for cloning the official Odoo tutorials repository, adding it to the addons path, and installing the necessary modules for the tutorial.

LANGUAGE: rst
CODE:
#. Clone the `official Odoo tutorials repository <https://github.com/odoo/tutorials>`_ and switch to
   the branch `{CURRENT_MAJOR_BRANCH}`.
#. Add the cloned repository to your :option:`--addons-path <odoo-bin --addons-path>`.
#. Start a new Odoo database and install the modules `awesome_owl` (for chapter 1) and `awesome_dashboard`
   (for chapter 2).

----------------------------------------

TITLE: Keyboard Input Documentation
DESCRIPTION: Documentation syntax for keyboard input command

LANGUAGE: text
CODE:
Enter

----------------------------------------

TITLE: Documenting 'name' Attribute in Odoo Fields (RST)
DESCRIPTION: Describes the 'name' attribute for Odoo fields. It specifies that the attribute is mandatory and of string type, representing the name of the field to be rendered.

LANGUAGE: rst
CODE:
.. attribute:: name
   :noindex:

   The name of the field to render.

   :requirement: Mandatory
   :type: str

----------------------------------------

TITLE: Running Odoo Server (Windows)
DESCRIPTION: Command to start the Odoo server from source with basic configuration on Windows systems, including database credentials.

LANGUAGE: doscon
CODE:
C:\> cd CommunityPath/
C:\> python odoo-bin -r dbuser -w dbpassword --addons-path=addons -d mydb

----------------------------------------

TITLE: Basic SCSS Variable Definition Example
DESCRIPTION: Demonstrates the basic definition of an SCSS variable in a library file.

LANGUAGE: scss
CODE:
$foo: red;

----------------------------------------

TITLE: RST Image Directive for Added Product
DESCRIPTION: Defines an image directive for displaying an added product example with alignment and alt text.

LANGUAGE: rst
CODE:
.. image:: product_catalog/added-product.png
   :align: center
   :alt: A product card for a product that has been added.

----------------------------------------

TITLE: Configuring Multi-Company Views in Odoo XML
DESCRIPTION: Shows how to hide the company field in views for users without multi-company access.

LANGUAGE: xml
CODE:
<record model="ir.ui.view" id="record_form_view">
    <field name="name">record.restricted.form</field>
    <field name="model">record.restricted</field>
    <field name="arch" type="xml">
        <form>
            <sheet>
                <group>
                    <group>
                        <field name="company_id" groups="base.group_multi_company"/>
                        <field name="other_record_id"/>
                    </group>
                </group>
            </sheet>
        </form>
    </field>
</record>

----------------------------------------

TITLE: Implementing useBus Hook for Event Handling
DESCRIPTION: Shows how to use the useBus hook to add and clear event listeners on a bus, ensuring proper cleanup on component unmount.

LANGUAGE: javascript
CODE:
import { useBus } from "@web/core/utils/hooks";

class MyComponent {
  setup() {
    useBus(this.env.bus, "some-event", event => {
      console.log(event);
    });
  }
}

----------------------------------------

TITLE: Defining AccountTax Model Documentation Structure in ReStructuredText
DESCRIPTION: ReStructuredText markup defining the documentation structure for Odoo's AccountTax model, including all available tax configuration fields like name, type, amount, and various calculation parameters.

LANGUAGE: restructuredtext
CODE:
.. _reference/account_tax:

=====
Taxes
=====

.. automodel:: odoo.addons.account.models.account_tax.AccountTax
    :main:

    .. autofield:: name
    .. autofield:: type_tax_use
    .. autofield:: tax_scope
    .. autofield:: amount_type
    .. autofield:: active
    .. autofield:: children_tax_ids
    .. autofield:: sequence
    .. autofield:: amount
    .. autofield:: description
    .. autofield:: price_include
    .. autofield:: include_base_amount
    .. autofield:: is_base_affected
    .. autofield:: analytic
    .. autofield:: invoice_repartition_line_ids
    .. autofield:: refund_repartition_line_ids
    .. autofield:: tax_group_id
    .. autofield:: tax_exigibility
    .. autofield:: cash_basis_transition_account_id

----------------------------------------

TITLE: Using Appropriate HTML Tags Instead of Custom CSS
DESCRIPTION: Shows how to use appropriate HTML tags instead of adding custom CSS rules for basic layout properties.

LANGUAGE: css
CODE:
span.element {
   display: block;
   /* replace <span> with <div> instead
      to get 'display: block' by default */
}

----------------------------------------

TITLE: Installing Additional Dependencies on Debian/Ubuntu
DESCRIPTION: Commands to install required Python packages xlwt and num2words on Debian-based systems.

LANGUAGE: console
CODE:
$ sudo pip3 install xlwt
$ sudo pip3 install num2words

----------------------------------------

TITLE: Defining Delete Attribute in Odoo View
DESCRIPTION: RST documentation snippet defining the delete attribute which controls whether records can be deleted through the Action dropdown menu in Odoo views. The attribute is optional, accepts a boolean value, and defaults to True.

LANGUAGE: rst
CODE:
.. attribute:: delete
   :noindex:

   Disable/enable record deletion on the view through the :guilabel:`Action` dropdown.

   :requirement: Optional
   :type: bool
   :default: `True`

----------------------------------------

TITLE: RST Note Block for Additional Fields
DESCRIPTION: Documentation note explaining how to access additional packaging fields

LANGUAGE: rst
CODE:
.. note::
   Access additional fields in the :guilabel:`Packaging` table below by clicking the |adjust| icon
   to the far-right of the column titles in the :guilabel:`Packaging` section, and selecting the
   desired options from the drop-down menu that appears.

----------------------------------------

TITLE: Creating an Onboarding Tour XML Record
DESCRIPTION: Demonstrates how to create an XML record for an onboarding tour in Odoo.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="your_tour" model="web_tour.tour">
        <field name="name">your_tour</field>
        <field name="sequence">10</field>
        <field name="rainbow_man_message">Congrats, that was a great tour</field>
    </record>
</odoo>

----------------------------------------

TITLE: Calculating Prorated Revenue Formula in CRM Forecast
DESCRIPTION: Mathematical formula for calculating prorated revenue in the CRM Forecast report. The formula multiplies Expected Revenue by Probability to determine the Prorated Revenue for opportunities.

LANGUAGE: math
CODE:
\text{Expected Revenue} \times \text{Probability} = \text{Prorated Revenue}

----------------------------------------

TITLE: Parse Document Request Format
DESCRIPTION: JSON-RPC2 request format for submitting documents to be parsed. Includes account token, version, document data and optional user information.

LANGUAGE: javascript
CODE:
{
    "jsonrpc": "2.0",
    "method": "call",
    "params": {
        "account_token": string,
        "version": int,
        "documents": [string],
        "dbuuid": string,
        "webhook_url": string,
        "user_infos": {
            "user_company_vat": string,
            "user_company_name": string,
            "user_company_country_code": string,
            "user_lang": string,
            "user_email": string,
            "purchase_order_regex": string,
            "perspective": string,
        },
    },
    "id": string,
}

----------------------------------------

TITLE: Running Odoo Server Commands in Container Shell
DESCRIPTION: Illustrates various Odoo server commands that can be executed within the container shell. These include using the Odoo shell, installing modules, updating modules, and running tests. The commands demonstrate key operations for Odoo development and maintenance.

LANGUAGE: bash
CODE:
$  odoo-bin shell

LANGUAGE: bash
CODE:
$  odoo-bin -i sale --without-demo=all --stop-after-init

LANGUAGE: bash
CODE:
$  odoo-bin -u sale --stop-after-init

LANGUAGE: bash
CODE:
$  odoo-bin -i sale --test-enable --log-level=test --stop-after-init

----------------------------------------

TITLE: Configuring List View Order in Odoo XML
DESCRIPTION: Demonstrates how to set custom ordering for list views using the default_order attribute. Shows ordering by sequence ascending and name descending. The attribute accepts a comma-separated list of field names with optional 'desc' modifier.

LANGUAGE: xml
CODE:
<list default_order="sequence,name desc">
    ...
</list>

----------------------------------------

TITLE: RST Documentation for Odoo Work Center Time Off
DESCRIPTION: Documentation in RST format describing the configuration and usage of work center time off functionality in Odoo manufacturing, including setup instructions and management of alternative work centers.

LANGUAGE: rst
CODE:
====================
Work center time off
====================

.. |MO| replace:: :abbr:`MO (manufacturing order)`

In Odoo, *work centers* are used to carry out manufacturing operations at specific locations.
However, if a work center cannot be used for some reason, work orders begin to pile up at the work
center until it is operational again.

----------------------------------------

TITLE: Registering a Tour for Integration Testing
DESCRIPTION: Shows how to register a tour for integration testing in Odoo.

LANGUAGE: javascript
CODE:
import tour from 'web_tour.tour';
tour.register('rental_product_configurator_tour', {
    url: '/web',  // Here, you can specify any other starting url
}, [
    // Your sequence of steps
]);

----------------------------------------

TITLE: Ensuring Multi-Company Consistency in Odoo Models
DESCRIPTION: Shows how to set up a model for multi-company consistency checks using _check_company_auto and check_company attributes.

LANGUAGE: python
CODE:
from odoo import fields, models

class Record(models.Model):
    _name = 'record.shareable'
    _check_company_auto = True

    company_id = fields.Many2one('res.company')
    other_record_id = fields.Many2one('other.record', check_company=True)

----------------------------------------

TITLE: Using Invisible Attribute in Odoo XML
DESCRIPTION: This snippet demonstrates how to use the 'invisible' attribute in an Odoo XML view to conditionally hide a field based on another field's value.

LANGUAGE: xml
CODE:
<form>
    <field name="description" invisible="not is_partner"/>
</form>

----------------------------------------

TITLE: Computed Field Definition
DESCRIPTION: Example of defining a computed field that calculates total area

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="field_real_estate_property_total_area" model="ir.model.fields">
        <field name="model_id" ref="estate.model_real_estate_property" />
        <field name="name">x_total_area</field>
        <field name="field_description">Total Area</field>
        <field name="ttype">float</field>
        <field name="depends">x_living_area,x_garden_area</field>
        <field name="compute"><![CDATA[
for property in self:
    property['x_total_area'] = property.x_living_area + property.x_garden_area
        ]]></field>
    </record>
</odoo>

----------------------------------------

TITLE: Documenting 'string' Attribute for Odoo Fields in reStructuredText
DESCRIPTION: This snippet defines the 'string' attribute for Odoo fields using reStructuredText documentation format. It specifies that the attribute is optional, of type string, and defaults to the 'string' attribute of the model's field if not explicitly set.

LANGUAGE: reStructuredText
CODE:
.. attribute:: string
   :noindex:

   The label of the field.

   :requirement: Optional
   :type: str
   :default: The `string` attribute of the model's field

----------------------------------------

TITLE: Configuring At Confirmation Reservation Method in Odoo
DESCRIPTION: This RST snippet demonstrates how to navigate to the Operations Types configuration in Odoo and set the reservation method to 'at confirmation' for a specific operation type.

LANGUAGE: rst
CODE:
To set the reservation method to *at confirmation*, navigate to :menuselection:`Inventory app -->\nConfiguration --> Operations Types`. Then, select the desired :guilabel:`Operation Type` to\nconfigure, or create a new one by clicking :guilabel:`New`.\n\nIn the :guilabel:`General` tab on the operation type form, locate the :guilabel:`Reservation Method`\nfield, and select :guilabel:`At Confirmation`.

----------------------------------------

TITLE: Documenting 'string' Attribute for Odoo Fields in reStructuredText
DESCRIPTION: This snippet defines the 'string' attribute for Odoo fields using reStructuredText documentation format. It specifies that the attribute is optional, of type string, and defaults to the 'string' attribute of the model's field if not explicitly set.

LANGUAGE: reStructuredText
CODE:
.. attribute:: string
   :noindex:

   The label of the field.

   :requirement: Optional
   :type: str
   :default: The `string` attribute of the model's field

----------------------------------------

TITLE: Product Details Table
DESCRIPTION: Example table showing product details with HSN codes and GST calculations

LANGUAGE: rst
CODE:
+---------------------------------------------------------------------------------------------------+
|                                     **Product Details**                                           |
+=======================+==============+==================+==============+==============+===========+
| **Product Name**      | **HSN Code** | **Tax Excluded** | **Quantity** | **GST Rate** | **Total** |
+-----------------------+--------------+------------------+--------------+--------------+-----------+
| Product A             |  123456      |  1,000           |  1           |  18%         |  1,180    |

----------------------------------------

TITLE: Implementing usePager Hook for View Pagination
DESCRIPTION: Demonstrates how to use the usePager hook to manage pagination in a view's control panel with state management.

LANGUAGE: javascript
CODE:
import { usePager } from "@web/search/pager_hook";

class CustomView {
  setup() {
    const state = owl.hooks.useState({
      offset: 0,
      limit: 80,
      total: 50,
    });
    usePager(() => {
      return {
        offset: this.state.offset,
        limit: this.state.limit,
        total: this.state.total,
        onUpdate: (newState) => {
          Object.assign(this.state, newState);
        },
      };
    });
  }
}

----------------------------------------

TITLE: JavaScript Device Proxy Implementation
DESCRIPTION: Code for creating a DeviceProxy object to facilitate communication between the browser and IoT device.

LANGUAGE: javascript
CODE:
var DeviceProxy = require('iot.DeviceProxy');

var iot_device = new DeviceProxy({
    iot_ip: iot_ip,
    identifier: device_identifier
});

----------------------------------------

TITLE: Implementing Related Fields in Odoo Python
DESCRIPTION: This snippet shows two equivalent ways to implement a related field in Odoo: using the 'related' attribute and using a computed field with depends decorator.

LANGUAGE: python
CODE:
partner_id = fields.Many2one("res.partner", string="Partner")
description = fields.Char(related="partner_id.name")

LANGUAGE: python
CODE:
partner_id = fields.Many2one("res.partner", string="Partner")
description = fields.Char(compute="_compute_description")

@api.depends("partner_id.name")
def _compute_description(self):
    for record in self:
        record.description = record.partner_id.name

----------------------------------------

TITLE: Creating a Sales Order with At Confirmation Reservation in Odoo
DESCRIPTION: This RST snippet outlines the steps to create a new sales order in Odoo, add products, and confirm the order to trigger the 'at confirmation' reservation method.

LANGUAGE: rst
CODE:
To see the *at confirmation* reservation method in action, create a new |SO| by navigating to\n:menuselection:`Sales app --> New`.\n\nAdd a customer in the :guilabel:`Customer` field. Then, in the :guilabel:`Order Lines` tab, click\n:guilabel:`Add a product`, and select a product to add to the quotation from the drop-down menu.\nFinally, in the :guilabel:`Quantity` column, adjust the desired quantity of the product to sell.\n\nOnce ready, click :guilabel:`Confirm` to confirm the sales order.\n\nClick the :guilabel:`📈 (area graph)` icon on the product line to reveal the product's\n:guilabel:`Availability` tooltip, which reveals the :guilabel:`Reserved` number of units for this\norder.

----------------------------------------

TITLE: Generating SEPA Direct Debit XML File in Odoo Accounting
DESCRIPTION: This snippet shows the process of generating a SEPA Direct Debit XML file in Odoo Accounting. The XML file follows the PAIN.008.001.02 specifications and can be uploaded to online banking interfaces for batch payment processing.

LANGUAGE: xml
CODE:
<!-- SEPA Direct Debit XML file (PAIN.008.001.02 format) -->
<Document>
  <!-- XML content generated by Odoo -->
</Document>

----------------------------------------

TITLE: Tax Report Example Table
DESCRIPTION: Example table showing TDS/TCS tax report calculations across different branches with shared PAN numbers

LANGUAGE: rst
CODE:
.. list-table::
   :header-rows: 1
   :widths: 10 20 10 20 15

   * - **Branch**
     - **Customer**
     - **Invoice**
     - **Transaction Amount (₹)**
     - **PAN Number**
   * - IN - MH
     - XYZ Enterprise - GJ
     - Invoice 1
     - ₹50,000
     - ABCPX1234E
   * - IN - MH
     - XYZ Enterprise - GJ
     - Invoice 2
     - ₹30,000
     - ABCPX1234E

----------------------------------------

TITLE: URL Action Example - Python
DESCRIPTION: Sample code showing how to open a URL via Odoo action

LANGUAGE: python
CODE:
{
    "type": "ir.actions.act_url",
    "url": "https://odoo.com",
    "target": "self",
}

----------------------------------------

TITLE: JavaScript Device Action Example
DESCRIPTION: Shows how to trigger an action on an IoT device from JavaScript code.

LANGUAGE: javascript
CODE:
iot_device.action(data);

----------------------------------------

TITLE: Installing Odoo Upgrade Utils via Pip
DESCRIPTION: This snippet shows how to install the Odoo Upgrade Utils library using pip. This method is useful for platforms where Odoo is not managed directly by the user.

LANGUAGE: console
CODE:
$ python3 -m pip install git+https://github.com/odoo/upgrade-util@master

----------------------------------------

TITLE: Odoo Module Manifest with Data Declarations
DESCRIPTION: Example manifest file (__manifest__.py) for an Odoo module, showing how to declare data and demo files.

LANGUAGE: python
CODE:
# -*- coding: utf-8 -*-

{
    "name": "Real Estate",
    "depends": [
        ...
    ],
    "data": [
        "security/ir.model.access.csv",  # CSV and XML files are loaded at the same place
        "views/estate_property_offer_views.xml",  # Views are data too
        "data/master_data.xml",  # Split the data in multiple files depending on the model
    ],
    "demo": [
        "demo/demo_data.xml",
    ]
    "application": True,
}

----------------------------------------

TITLE: Calculating Forecasted Quantity in Odoo Inventory Management
DESCRIPTION: This RST snippet shows the equation used to calculate the forecasted quantity of a product in Odoo's Forecasted Report, considering on-hand, incoming, and outgoing quantities.

LANGUAGE: rst
CODE:
Additionally, the :guilabel:`Forecasted` quantity is calculated at the top of the page, by adding\nthe :guilabel:`On Hand` and :guilabel:`Incoming` quantity, and subtracting the\n:guilabel:`Outgoing` quantity, as shown below:\n\n.. image:: at_confirmation/at-confirmation-forecasted-equation.png\n   :align: center\n   :alt: Forecasted quantity equation from the Forecasted Report page.

----------------------------------------

TITLE: Image Reference for Field Tips and Placeholders
DESCRIPTION: RST image directive showing field tips and placeholders interface.

LANGUAGE: RST
CODE:
.. image:: sign/tip-placeholder.png
   :alt: Tip and placeholder example in Odoo Sign

----------------------------------------

TITLE: Client Action Example - Python
DESCRIPTION: Example of client-side action definition for Point of Sale interface

LANGUAGE: python
CODE:
{
    "type": "ir.actions.client",
    "tag": "pos.ui"
}

----------------------------------------

TITLE: XPath Template for View Modification
DESCRIPTION: Structure for an XPath-based template modification showing how to extend standard Odoo templates.

LANGUAGE: xml
CODE:
<template id="layout" inherit_id="website.layout" name="Welcome Message">
   <xpath expr="//header" position="before">
      <!-- Content -->
   </xpath>
</template>

----------------------------------------

TITLE: Using Regular Images in Odoo Templates
DESCRIPTION: This code shows how to use a declared image in Odoo XML templates. It references the image using its ID from the attachment record.

LANGUAGE: xml
CODE:
<img src="/web/image/website_airproof.img_about_01" alt=""/>

----------------------------------------

TITLE: Calculating Average Cost in Odoo
DESCRIPTION: Formula used to compute the new average cost when products are received in the warehouse. This calculation is automatically performed by Odoo when new products arrive.

LANGUAGE: Python
CODE:
avg_cost = ((old_qty * old_avg_cost) + (incoming_qty * purchase_price)) / final_qty

----------------------------------------

TITLE: Configuring Employment Hero API URL for New Zealand Payroll in Odoo
DESCRIPTION: Specifies the correct Payroll URL to use when configuring the Employment Hero API for New Zealand in Odoo. This is a crucial step for ensuring the payroll integration functions correctly for New Zealand businesses.

LANGUAGE: rst
CODE:
.. important::
   To :ref:`configure the Employment Hero API <employment_hero/configuration>` for **New Zealand**,
   use the following value as :guilabel:`Payroll URL`: `https://api.nzpayroll.co.nz/`.

----------------------------------------

TITLE: Image Reference for Reminder Settings
DESCRIPTION: RST image directive showing reminder configuration interface.

LANGUAGE: RST
CODE:
.. image:: sign/reminder.png
   :alt: Set the number of days between reminders

----------------------------------------

TITLE: Using Custom Text Field Widget in Odoo XML View
DESCRIPTION: This XML snippet demonstrates how to use the custom 'my_text_field' widget for a field in an Odoo view definition.

LANGUAGE: xml
CODE:
<field name="somefield" widget="my_text_field"/>

----------------------------------------

TITLE: Custom Hook Definition
DESCRIPTION: Example showing how to create a custom hook that provides current time functionality.

LANGUAGE: javascript
CODE:
function useCurrentTime() {
    const state = useState({ now: new Date() });
    const update = () => state.now = new Date();
    let timer;
    onWillStart(() => timer = setInterval(update, 1000));
    onWillUnmount(() => clearInterval(timer));
    return state;
}

----------------------------------------

TITLE: Improving Readability of Utility Classes in HTML
DESCRIPTION: Demonstrates how to improve the readability of multiple utility classes in HTML attributes.

LANGUAGE: html
CODE:
<myComponent
   t-att-class="{
      o_myComponent_disabled: props.readonly,
      o_myComponent_active: props.active
   }"
   class="myComponent card position-absolute d-flex d-lg-block border px-3 px-lg-2"
/>

----------------------------------------

TITLE: Odoo Module Directory Structure
DESCRIPTION: Example directory structure for an Odoo module named 'estate', showing common folders and files.

LANGUAGE: bash
CODE:
estate
├── data
│   └── master_data.xml
├── demo
│   └── demo_data.xml
├── models
│   ├── *.py
│   └── __init__.py
├── security
│   └── ir.model.access.csv
├── views
│   └── estate_property_offer_views.xml
├── __init__.py
└── __manifest__.py

----------------------------------------

TITLE: Setting up DKIM CNAME Record for Odoo
DESCRIPTION: This code snippet demonstrates the CNAME record to be added to the DNS settings for enabling DKIM (DomainKeys Identified Mail) authentication with Odoo's email servers.

LANGUAGE: bash
CODE:
odoo._domainkey IN CNAME odoo._domainkey.odoo.com.

----------------------------------------

TITLE: Journal Entry with Outstanding Account - Second Entry
DESCRIPTION: The journal entry created when reconciling the bank statement with the check payment, moving the amount from Outstanding Receipts to Bank account.

LANGUAGE: text
CODE:
+---------------------+-------------------+----------+----------+
| Account             | Statement Match   | Debit    | Credit   |
+=====================+===================+==========+==========+
| Outstanding Receipts|        X          |          | 100.00   |
+---------------------+-------------------+----------+----------+
| Bank                |                   | 100.00   |          |
+---------------------+-------------------+----------+----------+

----------------------------------------

TITLE: RST Documentation Menu Navigation
DESCRIPTION: ReStructuredText markup for documenting menu navigation paths and options in Odoo Marketing Automation.

LANGUAGE: rst
CODE:
.. menuselection:: Marketing Automation app --> Reporting

----------------------------------------

TITLE: Implementing Basic Mail Thread Model
DESCRIPTION: Example showing how to add mail thread functionality to a business trip model with chatter integration.

LANGUAGE: python
CODE:
class BusinessTrip(models.Model):
    _name = 'business.trip'
    _inherit = ['mail.thread']
    _description = 'Business Trip'

    name = fields.Char()
    partner_id = fields.Many2one('res.partner', 'Responsible')
    guest_ids = fields.Many2many('res.partner', 'Participants')

----------------------------------------

TITLE: Defining a Client Action in XML
DESCRIPTION: How to create an ir.actions.client record for a client action

LANGUAGE: xml
CODE:
<record id="my_client_action" model="ir.actions.client">
    <field name="name">Some Name</field>
    <field name="tag">my-custom-action</field>
</record>

----------------------------------------

TITLE: Implementing Search View in Odoo XML
DESCRIPTION: Basic search view definition showing how to add searchable fields. Used to filter content in other views.

LANGUAGE: xml
CODE:
<search string="Tests">
    <field name="name"/>
    <field name="last_seen"/>
</search>

----------------------------------------

TITLE: Configuring Email Alias in Odoo CRM
DESCRIPTION: This RST snippet demonstrates the navigation path and options for configuring an email alias for a sales team in Odoo CRM. It includes instructions for setting the alias name and access permissions.

LANGUAGE: rst
CODE:
To create or update a sales teams' email alias, navigate to :menuselection:`CRM app -->
Configuration --> Sales Teams`. Click on a team from the list to open the team's details page.

.. image:: email_manual/email-alias.png
   :align: center
   :alt: The sales team details page, focused on the email alias section.

In the :guilabel:`Email Alias` field, enter a name for the email alias, or edit the existing name.
In the :guilabel:`Accept Emails From` field, use the drop-down menu to choose who is allowed to send
messages to this email alias:

- :guilabel:`Everyone`: messages are accepted from any email address.
- :guilabel:`Authenticated Partners`: only accepts messages from email addresses associated with a
  a partner (contact or customer) record.
- :guilabel:`Followers only`: only accepts messages from those who are following a record related to
  the team, such as a lead or opportunity. Messages are also accepted from team members.
- :guilabel:`Authenticated Employees`: only accepts messages from email addresses that are connected
  to a record in the *Employees* app.

----------------------------------------

TITLE: Re-order Configuration
DESCRIPTION: Steps to enable the Order Again functionality in the customer portal for previous orders.

LANGUAGE: text
CODE:
Website --> Configuration --> Settings --> Shop - Checkout Process\nEnable: Re-order From Portal

----------------------------------------

TITLE: Defining Reference Label in RST for Mail Plugins Pricing Section
DESCRIPTION: This RST code snippet creates a reference label for the pricing section of the Mail Plugins documentation.

LANGUAGE: rst
CODE:
.. _mail_plugins/pricing:

----------------------------------------

TITLE: List View XML Structure
DESCRIPTION: Basic structure for defining a list/tree view in Odoo

LANGUAGE: xml
CODE:
<list>
    <field name="field_name" string="My Custom Name"/>
    <field name="amount"/> 
</list>

----------------------------------------

TITLE: Adding Decorations to Odoo List View
DESCRIPTION: This snippet shows how to add color decorations to a list view in Odoo. It applies a green color to rows where 'is_partner' is True.

LANGUAGE: xml
CODE:
<list decoration-success="is_partner==True">
    <field name="name"/>
</list>

----------------------------------------

TITLE: Exporting Translatable Terms in Python for Odoo Modules
DESCRIPTION: Demonstrates how to wrap literal strings for translation in Python using odoo.api.Environment._ and odoo.tools.translate._. This allows Odoo to identify and export these strings for translation.

LANGUAGE: python
CODE:
title = self.env._("Bank Accounts")

# old API for backward-compatibility
from odoo.tools import _
title = _("Bank Accounts")

----------------------------------------

TITLE: Running Odoo without Demo Data
DESCRIPTION: Command to start Odoo server without loading demo data for specified modules. Uses the --without-demo option.

LANGUAGE: console
CODE:
$ ./odoo-bin --addons-path=... -d db -i account --without-demo=all

----------------------------------------

TITLE: RST Documentation Structure
DESCRIPTION: ReStructuredText documentation defining subcontracting lead time concepts and configurations in Odoo, including text substitutions for common abbreviations.

LANGUAGE: rst
CODE:
===============================
Basic subcontracting lead times
===============================

.. |PO| replace:: :abbr:`PO (Purchase Order)`
.. |RfQ| replace:: :abbr:`RfQ (Request for Quotation)`

----------------------------------------

TITLE: Add to Cart Action Configuration
DESCRIPTION: Instructions for configuring the behavior when customers click the Add to Cart button. Options include staying on the product page, redirecting to cart, or showing a dialog box.

LANGUAGE: text
CODE:
Website --> Configuration --> Settings --> Shop - Checkout Process

----------------------------------------

TITLE: Address Validation Configuration
DESCRIPTION: RST markup showing the address validation process in AvaTax integration

LANGUAGE: rst
CODE:
.. image:: avatax/validate-address.png
   :align: center
   :alt: Validate address pop-up window in Odoo with "Save Validated" button and "Validated
         Address" highlighted.

----------------------------------------

TITLE: Efficient Use of HTML Tags and Utility Classes
DESCRIPTION: Shows an efficient approach to styling titles and subtitles using appropriate HTML tags and minimal custom CSS.

LANGUAGE: html
CODE:
<h5 class="o_module_custom_title">
   Hello There!
</h5>

<div class="o_module_custom_subtitle">
   <b><small>I'm a subtitle.</small></b>
</div>

LANGUAGE: css
CODE:
.o_module_custom_title {
   animation: 1s linear 1s mycustomAnimation;
}

.o_module_custom_subtitle {
   animation: 2s linear 1s mycustomAnimation;
}

----------------------------------------

TITLE: Customizing Search Behavior in Odoo XML
DESCRIPTION: This snippet demonstrates how to customize the search behavior for a field in Odoo. It uses a filter_domain to search on both 'name' and 'description' fields.

LANGUAGE: xml
CODE:
<search string="Test">
    <field name="description" string="Name and description"
           filter_domain="['|', ('name', 'ilike', self), ('description', 'ilike', self)]"/>
</search>

----------------------------------------

TITLE: Linking to Payment Terminal Configuration Guides
DESCRIPTION: RST directives for linking to specific configuration guides for different payment terminal brands supported by Odoo POS.

LANGUAGE: rst
CODE:
- :doc:`Adyen configuration <terminals/adyen>`
- :doc:`Ingenico configuration <terminals/ingenico>`
- :doc:`Mercado Pago configuration <terminals/mercado_pago>`
- :doc:`Razorpay configuration <terminals/razorpay>`
- :doc:`SIX configuration <terminals/six>`
- :doc:`Stripe configuration <terminals/stripe>`
- :doc:`Tyro configuration <terminals/tyro>`
- :doc:`Viva Wallet configuration <terminals/viva_wallet>`
- :doc:`Worldline configuration <terminals/worldline>`

----------------------------------------

TITLE: Using QWeb Template in Odoo Widget
DESCRIPTION: Demonstrates how to use a QWeb template within an Odoo widget to render content.

LANGUAGE: javascript
CODE:
local.HomePage = instance.Widget.extend({
    template: "HomePageTemplate",
    start: function() {
        ...
    },
});

----------------------------------------

TITLE: Configuring Many2one and Many2many Property Fields in Odoo
DESCRIPTION: This snippet demonstrates the setup process for Many2one and Many2many property fields in Odoo. It includes steps for selecting a model, matching all records, and filtering results.

LANGUAGE: rst
CODE:
To set it up, click :guilabel:`Search a Model` in the :guilabel:`Model` field, select the
model. Match all records by clicking :guilabel:`## Record(s)`, or filter the results by
clicking :guilabel:`+ Add Filter` and show the records by clicking :guilabel:`## Record(s)`.

----------------------------------------

TITLE: Razorpay Terminal Configuration in RST
DESCRIPTION: RST markup documentation detailing the steps to configure Razorpay payment terminals in Odoo, including locating credentials and setting up payment methods

LANGUAGE: rst
CODE:
========
Razorpay
========

Connecting a Razorpay payment terminal allows you to offer a fluid payment flow to your customers
and ease the work of your cashiers.

.. seealso::
   :doc:`Use Razorpay as apayment provider. <../../../../finance/payment_providers/razorpay>`

Configuration
=============

.. _razorpay/credentials:

Locate your Razorpay credentials
--------------------------------

`Create a Razorpay account <https://razorpay.com/docs/payments/easy-create-account/>`_ and set it up
on their website.

You need the following credentials to set up the payment method in Odoo:

- `API key <https://razorpay.com/docs/payments/dashboard/account-settings/api-keys/>`_
- Razorpay username
- Razorpay device serial number

----------------------------------------

TITLE: RST Important Block for Feature Requirements
DESCRIPTION: Documentation block highlighting required feature enablement for packaging reservation

LANGUAGE: rst
CODE:
.. important::
   To see the :guilabel:`Reserve Packaging` field, the :guilabel:`Product Packaging` feature
   **must** be enabled. To enable this feature, go to :menuselection:`Inventory app -->
   Configuration --> Settings`, scroll to the :guilabel:`Products` section, tick the
   :guilabel:`Product Packagings` checkbox, and click :guilabel:`Save`.

----------------------------------------

TITLE: Avoiding Redundant CSS Display Properties
DESCRIPTION: Demonstrates how to avoid redundant CSS display properties by relying on browser defaults for common HTML elements.

LANGUAGE: css
CODE:
div.element {
   display: block;
   /* not needed 99% of the time */
}

----------------------------------------

TITLE: Production Database Upgrade Command
DESCRIPTION: Command to upgrade a production Odoo database on an on-premise installation. The database will be unavailable during the upgrade process.

LANGUAGE: console
CODE:
$ python <(curl -s https://upgrade.odoo.com/upgrade) production -d <your db name> -t <target version>

----------------------------------------

TITLE: Embedding YouTube Video in RST Documentation
DESCRIPTION: ReStructuredText directive for embedding a YouTube video with specific alignment and dimensions

LANGUAGE: rst
CODE:
.. youtube:: QuNsa9n9PMg
    :align: right
    :width: 700
    :height: 394

----------------------------------------

TITLE: XML Data with 'noupdate' Flag in Odoo
DESCRIPTION: Example of using the 'noupdate' flag in Odoo XML data declarations to prevent updates during module upgrades.

LANGUAGE: xml
CODE:
<odoo noupdate="1">
  <record id="id1" model="model">
    <field name="fieldA" eval="True"/>
  </record>
</odoo>

----------------------------------------

TITLE: Defining Table of Contents for Odoo Shop Features in reStructuredText
DESCRIPTION: This snippet defines a table of contents for Odoo shop features documentation using reStructuredText syntax. It specifies the toctree directive with the 'titlesonly' option and lists the relative paths to various shop feature documentation pages.

LANGUAGE: reStructuredText
CODE:
:nosearch:

=============
Shop features
=============

.. toctree::
   :titlesonly:

   shop/sales_order
   shop/barcode
   shop/serial_numbers
   shop/ship_later
   shop/customer_display

----------------------------------------

TITLE: Creating Subscription Quotations in Odoo
DESCRIPTION: This snippet describes the process of creating a new subscription quotation in Odoo, either by selecting a subscription plan or manually filling out the quotation with recurrence details and recurrent products.

LANGUAGE: restructuredtext
CODE:
To create a new subscription, click on :guilabel:`New` from the *Subscription* or the :doc:`Sales
</applications/sales>` app. You can either:

- Select a :doc:`subscription plan </applications/sales/subscriptions/plans>` to prefill the
  quotation instantly, or
- Fill out the quotation normally, making sure to select a recurrence and an end date if necessary
  and adding :doc:`recurrent products </applications/sales/subscriptions/products>`.

----------------------------------------

TITLE: Odoo RST Documentation for Manufacturing Costs
DESCRIPTION: ReStructuredText documentation explaining Odoo's manufacturing cost calculation system, including component costs, work center costs, employee costs, and BoM configuration.

LANGUAGE: rst
CODE:
=========================
Manufacturing order costs
=========================

.. |MO| replace:: :abbr:`MO (Manufacturing Order)`
.. |MOs| replace:: :abbr:`MOs (Manufacturing Orders)`
.. |POs| replace:: :abbr:`POs (Purchase Orders)`
.. |BoM| replace:: :abbr:`BoM (Bill of Materials)`
.. |BoMs| replace:: :abbr:`BoMs (Bills of Materials)`

The ability to accurately calculate the cost of manufacturing a product is critical when determining
product profitability...

----------------------------------------

TITLE: Incorrect SCSS Variable Override Example
DESCRIPTION: Shows an incorrect way to override SCSS variables that should be avoided in Odoo.

LANGUAGE: scss
CODE:
$foo: blue; // -> Don't!

----------------------------------------

TITLE: Querying Odoo Users with Python in Odoo.sh Console
DESCRIPTION: Python code snippet demonstrating how to query user data from the Odoo database using the Odoo Shell console in Odoo.sh.

LANGUAGE: python
CODE:
env['res.users'].search_read([], ['name', 'email', 'login'])
[{'id': 2,
'login': 'admin',
'name': 'Administrator',
'email': 'admin@example.com'}]

----------------------------------------

TITLE: Adding a Git submodule
DESCRIPTION: This command adds a Git submodule to your repository. It specifies the branch, repository URL, and local path for the submodule.

LANGUAGE: bash
CODE:
$ git submodule add -b <branch> <git@yourprovider.com>:<username/repository.git> <path>

----------------------------------------

TITLE: RST Formatting Directive
DESCRIPTION: RST replacement directive for plus icon image in the documentation

LANGUAGE: rst
CODE:
.. |plus| replace:: :icon:`fa-plus` :guilabel:`(plus)` icon

----------------------------------------

TITLE: Registering Payments Documentation in RST
DESCRIPTION: Documentation structure in reStructuredText format covering payment methods, registration processes, reconciliation procedures, and batch payment handling in Odoo.

LANGUAGE: restructuredtext
CODE:
========
Payments
========

In Odoo, payments can either be automatically linked to an invoice or bill or be stand-alone records
for use at a later date:

- If a payment is **linked to an invoice or bill**, it reduces/settles the amount due on the
  invoice. Multiple payments on the same invoice are possible.

- If a payment is **not linked to an invoice or bill**, the customer has an outstanding credit with
  the company, or the company has an outstanding debit with a vendor.

----------------------------------------

TITLE: Displaying Email Referral Pop-up in RST
DESCRIPTION: This RST code snippet demonstrates how to format and display an image of the email referral pop-up window in the documentation.

LANGUAGE: rst
CODE:
.. image:: share_jobs/email.png
   :align: center
   :alt: Referral email pop-up window with the email message inside it.

----------------------------------------

TITLE: Activating Debug Mode via URL Parameters
DESCRIPTION: Different URL parameters that can be appended to activate various levels of debug mode in Odoo. Includes parameters for regular debug mode, assets debugging, and test assets.

LANGUAGE: plaintext
CODE:
?debug=1           // Activate regular debug mode\n?debug=0           // Deactivate debug mode\n?debug=assets       // Activate debug mode with assets\n?debug=tests        // Activate debug mode with tests assets

----------------------------------------

TITLE: Checking out a Git branch
DESCRIPTION: This command switches to the specified branch in your Git repository. It's used before adding a submodule to ensure you're on the correct branch.

LANGUAGE: bash
CODE:
$ git checkout <branch>

----------------------------------------

TITLE: Implementing IP Address Change Handler in Odoo.sh
DESCRIPTION: A Python controller implementation that handles IP address change notifications in Odoo.sh. The controller creates a route that receives old and new IP addresses as parameters and can be used to trigger custom actions when IP changes occur.

LANGUAGE: python
CODE:
class IPChangeController(http.Controller):

    @http.route('/_odoo.sh/ip-change', auth='public')
    def ip_change(self, old=None, new=None):
        _logger.info("IP address changed from %s to %s", old, new)
        # Then perform whatever action required for your use case, e.g., update an
        # ir.config_parameter, send an email, contact an external firewall service's API, ...
        return 'ok'

----------------------------------------

TITLE: Defining CSV Data in Odoo
DESCRIPTION: Illustrates the structure of CSV data files in Odoo, using the example of defining country states. The first row lists fields, and subsequent rows define records.

LANGUAGE: csv
CODE:
id,country_id:id,name,code
state_us_1,base.us,Alabama,AL
state_us_2,base.us,Alaska,AK
state_us_3,base.us,Arizona,AZ
state_us_4,base.us,Arkansas,AR
state_us_5,base.us,California,CA
state_us_6,base.us,Colorado,CO
state_us_7,base.us,Connecticut,CT
state_us_8,base.us,Delaware,DE
state_us_9,base.us,Florida,FL
state_us_10,base.us,Georgia,GA

----------------------------------------

TITLE: Time-based Pricing Configuration
DESCRIPTION: Instructions for setting up time-based pricing for subscription products, including pricing periods and pricelist integration.

LANGUAGE: restructuredtext
CODE:
.. note::
   :guilabel:`Daily` and :guilabel:`Hourly` periods **cannot** be used on recurring products.

.. note::
   There is *no limit* to how many lines can be added to the :guilabel:`Time-based pricing` table.

----------------------------------------

TITLE: Configuring robots.txt in Odoo
DESCRIPTION: Example of adding a custom instruction to the robots.txt file to disallow crawling of a specific page.

LANGUAGE: text
CODE:
Disallow: /about-us

----------------------------------------

TITLE: Configuring Attendance Tolerance Settings in RST
DESCRIPTION: RST code snippet demonstrating how to configure tolerance settings for extra hours and grace periods in the Odoo Attendances application.

LANGUAGE: rst
CODE:
- :guilabel:`Tolerance Time In Favor Of Company`: enter the amount of time, in minutes, that is
  **not** counted towards an employee's overtime. When an employee checks out, and the extra time
  logged is below the specified minutes, the extra time is **not** counted as overtime for the
  employee.
- :guilabel:`Tolerance Time In Favor Of Employee`: enter the amount of time, in minutes, that an
  employee is given, that does **not** adversely affect their attendance if they log less time
  than their working hours. When an employee checks out, and the total time logged for the day is
  less than their specified working hours and less than this specified grace period, they are
  **not** penalized for their reduced hours.

----------------------------------------

TITLE: Running Odoo Server (Linux/Mac)
DESCRIPTION: Command to start the Odoo server from source with basic configuration on Linux/Mac systems.

LANGUAGE: console
CODE:
$ cd /CommunityPath
$ python3 odoo-bin --addons-path=addons -d mydb

----------------------------------------

TITLE: Running Odoo with Custom GeoIP Database Path
DESCRIPTION: Command line example showing how to start Odoo with a custom path to the GeoIP city database file

LANGUAGE: bash
CODE:
./odoo-bin --geoip-city-db= ~/Downloads/GeoLite2-City.mmdb

----------------------------------------

TITLE: Updating Odoo Modules via Command Line in Odoo.sh
DESCRIPTION: Command to update specific Odoo modules using the odoo-bin executable. This is useful when changes to database-stored data need to be applied.

LANGUAGE: bash
CODE:
$ odoo-bin -u <comma-separated module names> --stop-after-init

----------------------------------------

TITLE: Odoo Event Ticket Sales Documentation in RST
DESCRIPTION: Documentation in RST format detailing the configuration and processes for selling event tickets through Odoo's Events module, including both sales order and website integration methods.

LANGUAGE: rst
CODE:
==================
Sell event tickets
==================

Odoo *Events* provides users with the ability to create custom event tickets (and ticket tiers),
with various price points.

It *also* allows them to sell event tickets in two different ways: via standard sales orders, and
online through an integrated website.

Odoo also simplifies the ticket-purchasing process by providing plenty of payment method options.

----------------------------------------

TITLE: Report Navigation Instructions in RST
DESCRIPTION: RST formatted documentation detailing the navigation steps and available features for Live Chat reports in Odoo, including view options, filtering, and data export capabilities.

LANGUAGE: rst
CODE:
.. note::
   The *Live Chat Ratings Report* can also be accessed through the :guilabel:`Report` menu. For more
   information on this report, and on the *Live Chat* rating process, see :doc:`Live Chat Ratings
   <../livechat/ratings>`.

To access a drop-down menu of all the available reports, navigate to :menuselection:`Live Chat app
--> Report`.

----------------------------------------

TITLE: RST Example Code Block - Worktime Rate Example
DESCRIPTION: Example of using note directive to explain work time rate calculation

LANGUAGE: rst
CODE:
.. note::
   If the working hours are not consistent each week, and the hours are on a bi-weekly schedule instead, click the :guilabel:`Switch to 2 week calendar` button at the top of the new default working hours form. This changes the :guilabel:`Working Hours` tab to display two weeks of working times that can be adjusted.

----------------------------------------

TITLE: Moving GeoIP Database Files
DESCRIPTION: Shell commands for moving downloaded GeoLite2 database files to the correct system directory for Odoo GeoIP functionality

LANGUAGE: bash
CODE:
mv ~/Downloads/GeoLite2-City.mmdb /usr/share/GeoIP/
mv ~/Downloads/GeoLite2-Country.mmdb /usr/share/GeoIP/

----------------------------------------

TITLE: Testing GeoIP with XML Template
DESCRIPTION: XML template code for displaying the country name of the current visitor's IP address in an Odoo webpage

LANGUAGE: xml
CODE:
<h1 class="text-center" t-esc="request.geoip.country.name or 'geoip failure'"/>

----------------------------------------

TITLE: RST Table of Contents Structure
DESCRIPTION: ReStructuredText markup defining the documentation structure and navigation hierarchy for Odoo.sh documentation.

LANGUAGE: rst
CODE:
:nosearch:

=======
Odoo.sh
=======


.. toctree::

    odoo_sh/overview
    odoo_sh/getting_started
    odoo_sh/advanced

----------------------------------------

TITLE: Structuring XML Data Files in Odoo
DESCRIPTION: Demonstrates the basic structure of an XML data file in Odoo, including the root element and operation elements. Also shows how to use the 'noupdate' flag for one-time data application.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <operation/>
    ...
</odoo>

LANGUAGE: xml
CODE:
<odoo>
    <data noupdate="1">
        <!-- Only loaded when installing the module (odoo-bin -i module) -->
        <operation/>
    </data>

    <!-- (Re)Loaded at install and update (odoo-bin -i/-u) -->
    <operation/>
</odoo>

----------------------------------------

TITLE: Recurrence Period Configuration in Odoo Subscriptions
DESCRIPTION: Instructions for configuring recurrence periods like Monthly, Quarterly, Weekly, etc. in Odoo Subscriptions app. The configuration can be accessed through the Subscriptions app's Configuration menu.

LANGUAGE: restructuredtext
CODE:
.. important::
   The unit :guilabel:`Days` *cannot* be used as a recurrence period on subscriptions. The daily
   recurrence is meant for rentals, and **cannot** be added on recurring subscription sales orders.

   This limitation is there to avoid sales orders that would generate daily invoices.

----------------------------------------

TITLE: Resizing Barcode in ZPL for Odoo Labels
DESCRIPTION: This code example shows how to resize a barcode by modifying the ^BY command in ZPL. It reduces the bar width from 3 to 2 to shrink the barcode proportionally.

LANGUAGE: xml
CODE:
^XA^CI28
...
^FO100,160^BY2
...
^XZ

----------------------------------------

TITLE: Configuring Hidden Toctree in Sphinx Documentation
DESCRIPTION: Sets up a hidden table of contents tree (toctree) in Sphinx documentation with specific directives for depth control and visibility. Includes a link to Spanish enterprise documentation.

LANGUAGE: rst
CODE:
:nosearch:
:orphan:

.. toctree::
   :maxdepth: 4
   :hidden:

   enterprise_es

----------------------------------------

TITLE: Adding Odoo Repository on Debian/Ubuntu
DESCRIPTION: Commands to add the Odoo Community repository and install Odoo on Debian-based systems.

LANGUAGE: console
CODE:
$ wget -q -O - https://nightly.odoo.com/odoo.key | sudo gpg --dearmor -o /usr/share/keyrings/odoo-archive-keyring.gpg
$ echo 'deb [signed-by=/usr/share/keyrings/odoo-archive-keyring.gpg] https://nightly.odoo.com/{CURRENT_MAJOR_BRANCH}/nightly/deb/ ./' | sudo tee /etc/apt/sources.list.d/odoo.list
$ sudo apt-get update && sudo apt-get install odoo

----------------------------------------

TITLE: Configuring Odoo Documentation Root Structure
DESCRIPTION: Sets up the root structure for Odoo documentation using reStructuredText directives. Disables search functionality and creates a table of contents pointing to the overview introduction section.

LANGUAGE: rst
CODE:
:nosearch:

========
Overview
========

.. toctree::
   :titlesonly:

   overview/introduction

----------------------------------------

TITLE: Git Update Commands for Odoo Source Installation
DESCRIPTION: Terminal commands to update an Odoo installation that was originally installed from Github repositories. These commands fetch and apply the latest changes while preserving local modifications.

LANGUAGE: bash
CODE:
git fetch\ngit rebase --autostash

----------------------------------------

TITLE: Target Record Code for Webhooks - Odoo
DESCRIPTION: Code sample showing how to use the webhook payload context variable to determine target records for automation. The webhook content is available as a 'payload' dictionary containing GET parameters or POST JSON body.

LANGUAGE: python
CODE:
record = env['custom.model'].search([('id', '=', payload.get('record_id'))])

----------------------------------------

TITLE: Adjusting Margin in ZPL for Odoo Product Labels
DESCRIPTION: This snippet demonstrates how to adjust the margin in ZPL code to fit long product names on a single line. It modifies the ^FT command to change the starting position of the text.

LANGUAGE: xml
CODE:
^XA^CI28
^FT0,80^A0N,40,30^FD[E-COM11] Cabinet with Doors (wood: Cherry, handles: brass)^FS
...
^XZ

----------------------------------------

TITLE: Configuring Sphinx Documentation Tree
DESCRIPTION: A reStructuredText directive configuring the documentation tree. Sets maximum depth to 4 levels, hides the tree from search/navigation, and includes partnership_fr document.

LANGUAGE: rst
CODE:
:nosearch:
:orphan:

.. toctree::
   :maxdepth: 4
   :hidden:

   partnership_fr

----------------------------------------

TITLE: Accessing PostgreSQL Database Shell in Odoo.sh Container
DESCRIPTION: Demonstrates how to access the PostgreSQL database shell (psql) within an Odoo.sh container. This allows direct interaction with the database for querying and management tasks.

LANGUAGE: bash
CODE:
odoo@odoo-addons-master-1.odoo.sh:~$ psql

----------------------------------------

TITLE: Displaying Odoo.sh Project Directory Structure
DESCRIPTION: Shows the directory structure of an Odoo.sh project, including source code, data, and log locations.

LANGUAGE: plaintext
CODE:
.
├── home
│    └── odoo
│         ├── src
│         │    ├── odoo                Odoo Community source code
│         │    │    └── odoo-bin       Odoo server executable
│         │    ├── enterprise          Odoo Enterprise source code
│         │    ├── themes              Odoo Themes source code
│         │    └── user                Your repository branch source code
│         ├── data
│         │    ├── filestore           database attachments, as well as the files of binary fields
│         │    └── sessions            visitors and users sessions
│         └── logs
│              ├── install.log         Database installation logs
│              ├── odoo.log            Running server logs
│              ├── update.log          Database updates logs
│              └── pip.log             Python packages installation logs

----------------------------------------

TITLE: Adding Odoo Repository on Fedora
DESCRIPTION: Commands to add the Odoo Community repository, install and enable Odoo service on Fedora-based systems.

LANGUAGE: console
CODE:
$ sudo dnf config-manager --add-repo=https://nightly.odoo.com/{CURRENT_MAJOR_BRANCH}/nightly/rpm/odoo.repo
$ sudo dnf install -y odoo
$ sudo systemctl enable odoo
$ sudo systemctl start odoo

----------------------------------------

TITLE: Translation Usage Example
DESCRIPTION: Example showing how to translate strings in Javascript code using the env._t function.

LANGUAGE: javascript
CODE:
const someString = this.env._t('some text');

----------------------------------------

TITLE: Configuring Language Selector in Odoo Website XML
DESCRIPTION: This XML snippet demonstrates how to configure the language selector in the Odoo website builder. It allows setting the selector to either a dropdown, inline format, or none.

LANGUAGE: xml
CODE:
<image alt="Add a language selector menu." src="translate/language-selector.png"/>

----------------------------------------

TITLE: Rotating Barcode Elements in ZPL for Odoo Labels
DESCRIPTION: This snippet illustrates how to rotate barcode elements in ZPL by changing the ^BC command's first parameter. It rotates the barcode 270 degrees by changing ^BCN to ^BCB.

LANGUAGE: xml
CODE:
^XA^CI28
...
^BCB,100,Y,N,N
...
^XZ

----------------------------------------

TITLE: Configuring Odoo Documentation Toctree in RST
DESCRIPTION: ReStructuredText directives for configuring documentation navigation. Sets the toctree maximum depth to 4, hides it from navigation, marks the document as orphan, and includes a link to terms_of_sale documentation.

LANGUAGE: rst
CODE:
:nosearch:
:orphan:

.. toctree::
   :maxdepth: 4
   :hidden:

   terms_of_sale

----------------------------------------

TITLE: Committing and pushing changes with submodule
DESCRIPTION: These commands commit the changes made by adding the submodule and push them to the remote repository. Replace <remote> and <branch> with your specific values.

LANGUAGE: bash
CODE:
$ git commit -a && git push -u <remote> <branch>

----------------------------------------

TITLE: Git Reset Command for Odoo Source Installation
DESCRIPTION: Alternative command to discard local changes and reset to the official version when updating Odoo from Github source.

LANGUAGE: bash
CODE:
git reset --hard

----------------------------------------

TITLE: Configuring Exim Mail Routing for Odoo Gateway
DESCRIPTION: Configuration snippet for setting up Exim mail routing to forward all incoming emails to the Odoo mailgate script for processing in the database.

LANGUAGE: text
CODE:
*: |/odoo-directory/addons/mail/static/scripts/odoo-mailgate.py -d <database-name> -u <userid> -p <password>

----------------------------------------

TITLE: Removing Odoo Domain Constraint for On-Premise Setup
DESCRIPTION: Code to be removed from login.ts file to disable the odoo.com domain restriction for on-premise installations

LANGUAGE: plaintext
CODE:
if (!/^https:\/\/([^\/?]*\.)?odoo\.com(\/|$)/.test(validatedUrl)) {
        return notify("The URL must be a subdomain of odoo.com");
   }

----------------------------------------

TITLE: Defining Reference Label in RST for Lead Generation Section
DESCRIPTION: This RST code snippet creates a reference label for the lead generation section of the Mail Plugins documentation.

LANGUAGE: rst
CODE:
.. _mail_plugins/lead-generation:

----------------------------------------

TITLE: Configuring Sphinx Documentation for Odoo
DESCRIPTION: This snippet sets up a hidden table of contents (toctree) for the Odoo documentation. It specifies a maximum depth of 4 and includes a reference to an 'enterprise' document.

LANGUAGE: reStructuredText
CODE:
:nosearch:
:orphan:

.. toctree::
   :maxdepth: 4
   :hidden:

   enterprise

----------------------------------------

TITLE: Configuring Authorized Redirect URI for OAuth
DESCRIPTION: Example of the redirect URI format required for Google OAuth configuration. The URI must include the database domain followed by the auth_oauth/signin path.

LANGUAGE: text
CODE:
https://mydomain.odoo.com/auth_oauth/signin

----------------------------------------

TITLE: Updating Database to Odoo Enterprise
DESCRIPTION: This command updates the specified database to use Odoo Enterprise by installing the web_enterprise module.

LANGUAGE: console
CODE:
$ python3 /usr/bin/odoo-bin -d <database_name> -i web_enterprise --stop-after-init

----------------------------------------

TITLE: Configuring Database Filter in Odoo
DESCRIPTION: Configuration sample for filtering database names with a regular expression pattern to only show databases beginning with 'mycompany'

LANGUAGE: ini
CODE:
[options]
dbfilter = ^mycompany.*$

----------------------------------------

TITLE: Adding a Service to the Service Registry in Odoo
DESCRIPTION: Demonstrates how to define a service and add it to the service registry. Services in Odoo are used to provide functionality across the web client.

LANGUAGE: javascript
CODE:
import { registry } from "@web/core/registry";

const myService = {
    dependencies: [...],
    start(env, deps) {
        // some code here
    }
};

registry.category("services").add("myService", myService);

----------------------------------------

TITLE: Defining RST Tabs for Powerbox Commands in Odoo Editor
DESCRIPTION: This RST code snippet demonstrates how to create tabbed content for different categories of powerbox commands in the Odoo rich-text editor documentation.

LANGUAGE: rst
CODE:
.. tabs::
   .. tab:: Structure

      .. list-table::
         :widths: 20 80
         :header-rows: 1
         :stub-columns: 1

         * - Command
           - Use
         * - :guilabel:`Separator`
           - Insert a horizontal rule separator.
         * - :guilabel:`2 columns`
           - Convert into 2 columns.
         * - :guilabel:`3 columns`
           - Convert into 3 columns.
         * - :guilabel:`4 columns`
           - Convert into 4 columns.
         * - :guilabel:`Table`
           - Insert a table.
         * - :guilabel:`Bulleted list`
           - Create a bulleted list.
         * - :guilabel:`Numbered list`
           - Create a numbered list.
         * - :guilabel:`Checklist`
           - Create a checklist.
         * - :guilabel:`Quote`
           - Add a blockquote section.
         * - :guilabel:`Code`
           - Add a code section.

----------------------------------------

TITLE: Creating Internal Links in RST for Mail Plugins Documentation
DESCRIPTION: This RST code snippet demonstrates how to create internal links to other sections of the documentation, specifically for Outlook and Gmail plugins.

LANGUAGE: rst
CODE:
:doc:`Outlook <mail_plugins/outlook>` and :doc:`Gmail
<mail_plugins/gmail>`

----------------------------------------

TITLE: Documentation File Path Mapping Configuration
DESCRIPTION: Configuration file that maps source documentation file paths to their new destinations, organizing content into a more logical structure. Each line represents a move operation with source and destination paths separated by spaces.

LANGUAGE: plaintext
CODE:
# administration

administration/install.rst administration/on_premise.rst
administration/install/deploy.rst administration/on_premise/deploy.rst
administration/install/email_gateway.rst administration/on_premise/email_gateway.rst

----------------------------------------

TITLE: Journal Entry with Reconciliation Bypass
DESCRIPTION: The single journal entry created when using the reconciliation bypass method, moving the amount directly from Account Receivable to Bank account.

LANGUAGE: text
CODE:
+----------------------+-------------------+----------+----------+
| Account              | Statement Match   | Debit    | Credit   |
+======================+===================+==========+==========+
| Account Receivable   | X                 |          | 100.00   |
+----------------------+-------------------+----------+----------+
| Bank                 |                   | 100.00   |          |
+----------------------+-------------------+----------+----------+

----------------------------------------

TITLE: Exporting SAF-T Report in Odoo Accounting
DESCRIPTION: Instructions for exporting the SAF-T report in XML format from the Odoo Accounting module. This snippet shows the menu path and button to click for generating the report.

LANGUAGE: xml
CODE:
<menuselection>Accounting --> Reports --> General Ledger</menuselection>

----------------------------------------

TITLE: Displaying Attendance Overview Dashboard in RST
DESCRIPTION: RST code snippet showing how to structure and format the description of the Odoo Attendances overview dashboard, including view options and highlighted elements.

LANGUAGE: rst
CODE:
.. image:: attendances/overview.png
   :align: center
   :alt: The overview dashboard presenting the information for the week, with the current day
         highlighted.

Any entries that have errors appear in red, indicating they need to be resolved by a user with the
proper :ref:`access rights <attendances/access-rights>` and/or are :ref:`approvers
<attendances/approvers>` for the employee(s) with the errors.

----------------------------------------

TITLE: Defining Table of Contents for Supply Chain Documentation in RST
DESCRIPTION: This RST code snippet defines the table of contents for Odoo's supply chain documentation. It includes sections for inventory, manufacturing, purchasing, barcode, quality, maintenance, PLM, and repairs.

LANGUAGE: rst
CODE:
:nosearch:

============
Supply Chain
============

.. toctree::

   inventory_and_mrp/inventory
   inventory_and_mrp/manufacturing
   inventory_and_mrp/purchase
   inventory_and_mrp/barcode
   inventory_and_mrp/quality
   inventory_and_mrp/maintenance
   inventory_and_mrp/plm
   inventory_and_mrp/repairs

----------------------------------------

TITLE: Creating Internal Link in RST for In-App Purchases Documentation
DESCRIPTION: This RST code snippet demonstrates how to create an internal link to the In-App Purchases documentation within the Mail Plugins documentation.

LANGUAGE: rst
CODE:
:doc:`../../essentials/in_app_purchase`

----------------------------------------

TITLE: Defining RST Table for Payment Provider Features
DESCRIPTION: This RST code snippet defines a table listing various online payment providers and their supported features in Odoo.

LANGUAGE: rst
CODE:
.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: auto

   * -
     - Payment flow from
     - :ref:`Tokenization <payment_providers/tokenization>`
     - :ref:`Manual capture <payment_providers/manual_capture>`
     - :ref:`Refunds <payment_providers/refunds>`
     - :ref:`Express checkout <payment_providers/express_checkout>`
   * - :doc:`Adyen <payment_providers/adyen>`
     - Odoo
     - |V|
     - Full and partial
     - Full and partial
     -
   * - :doc:`Amazon Payment Services <payment_providers/amazon_payment_services>`
     - The provider's website
     -
     -
     -
     -
   * - :doc:`AsiaPay <payment_providers/asiapay>`
     - The provider's website
     -
     -
     -
     -

----------------------------------------

TITLE: Downloading Authorize.Net Excel Import Template
DESCRIPTION: This code snippet demonstrates how to provide a downloadable Excel template for importing Authorize.Net statements into Odoo.

LANGUAGE: python
CODE:
:download:`Download the Excel import template. <authorize/authorize-net-magic-sheet.xlsx>`

----------------------------------------

TITLE: Important Notice About User Approver Rights
DESCRIPTION: Critical information about required administrator rights for various HR approval roles.

LANGUAGE: markdown
CODE:
The users that appear in the drop-down menu for the Approvers section **must** have Administrator rights set for the corresponding human resources role.

- For Expenses: must have Team Approver, All Approver, or Administrator rights
- For Time Off: must have Officer or Administrator rights
- For Timesheets: must have Manager, Officer, or Administrator rights

----------------------------------------

TITLE: Class Constructor Patching Workaround
DESCRIPTION: Shows the recommended approach to patch class initialization logic since constructors cannot be directly patched.

LANGUAGE: javascript
CODE:
class MyClass {
  constructor() {
    this.setup();
  }
  setup() {
    this.number = 1;
  }
}

patch(MyClass.prototype, {
  setup() {
    super.setup(...arguments);
    this.doubleNumber = this.number * 2;
  },
});

----------------------------------------

TITLE: Demonstrating RST Tip Directive for Drag and Drop Functionality
DESCRIPTION: This RST code snippet shows how to create a tip box explaining the drag and drop functionality in the Odoo rich-text editor.

LANGUAGE: rst
CODE:
.. tip::
   Hover over any element in the text (header, table, clipboard, etc.) to reveal the
   :icon:`fa-sort` :guilabel:`(drag)` icon. Click and hold the icon to drag and drop the element
   elsewhere in the text.

----------------------------------------

TITLE: Inserting an Image in RST for Procurement Expenses Report
DESCRIPTION: This RST code inserts an image showing the filters and groups drop-down menu for the procurement expenses report, with alignment and alt text specified.

LANGUAGE: rst
CODE:
.. figure:: procurement_expenses_report/filters-groups.png
   :align: center
   :alt: The drop-down menu of filters, group by and comparison options for the procurement expenses
         report.

   The filter for Q2, comparison for **Previous Period**, and group-by for **Vendor** and **Product
   Category** were selected.

----------------------------------------

TITLE: Configuring Webhooks URL for Mercado Pago in Odoo
DESCRIPTION: This snippet demonstrates the format for the webhook URL that needs to be configured in Mercado Pago to receive notifications in Odoo. It includes the base URL of the Odoo database followed by a specific endpoint for Mercado Pago notifications.

LANGUAGE: text
CODE:
https://mycompany.odoo.com/pos_mercado_pago/notification

----------------------------------------

TITLE: Configuring Xendit Webhook URL in Odoo
DESCRIPTION: This snippet demonstrates the format for the webhook URL to be entered in the Xendit Dashboard. It combines the Odoo database URL with the Xendit-specific endpoint.

LANGUAGE: python
CODE:
"https://example.odoo.com/payment/xendit/webhook"

----------------------------------------

TITLE: Displaying Job Sharing Options in RST
DESCRIPTION: This RST code snippet shows how to format and display an image of the various sharing options available for each job position.

LANGUAGE: rst
CODE:
.. image:: share_jobs/share.png
   :align: center
   :alt: The various sharing icons that appear for each job.

----------------------------------------

TITLE: Displaying Job Position Information in RST
DESCRIPTION: This RST code snippet shows how to format and display information about job positions, including an image and a list of details.

LANGUAGE: rst
CODE:
.. image:: share_jobs/jobs.png
   :align: center
   :alt: The 'View Jobs' screen, displaying all current open job positions. All information is
         displayed on the card.

Each job position card contains the following information:

- The title of the job position. This information is taken from the *Job Position* field of the job
  form.
- The number of :guilabel:`Open Positions` being recruited. This information is taken from the
  *Expected New Employees* field of the *Recruitment* tab of the job form.
- The points a user earns when an applicant applies for the position.
- The job description detailing the job position. This information is taken from the *Job Position*
  tab of the job form.

----------------------------------------

TITLE: Defining Table of Contents for Project Management in reStructuredText
DESCRIPTION: This snippet creates a table of contents (toc) for the project management documentation. It uses the 'toctree' directive with the 'titlesonly' option to list only the titles of the included documents. The 'management/approvals' page is included in the toc.

LANGUAGE: reStructuredText
CODE:
.. toctree::
   :titlesonly:

   management/approvals

----------------------------------------

TITLE: Calculating New Time Off Allocation After Schedule Change
DESCRIPTION: Formula for adjusting an employee's time off allocation when their working schedule changes

LANGUAGE: plaintext
CODE:
New Time Off Allocation = max(min(Computed Allocation, Max Allocation) + Leaves Taken, Leaves Taken)

----------------------------------------

TITLE: Journal Entry with Outstanding Account - First Entry
DESCRIPTION: The journal entry created when recording a check payment using the outstanding account method, moving the amount from Account Receivable to Outstanding Receipts.

LANGUAGE: text
CODE:
+----------------------+-------------------+----------+----------+
| Account              | Statement Match   | Debit    | Credit   |
+======================+===================+==========+==========+
| Account Receivable   |                   |          | 100.00   |
+----------------------+-------------------+----------+----------+
| Outstanding Receipts |                   | 100.00   |          |
+----------------------+-------------------+----------+----------+

----------------------------------------

TITLE: Documenting Attendance Log Details in RST
DESCRIPTION: RST code snippet detailing the structure and content of the attendance log details section, including main details and check-in/check-out information.

LANGUAGE: rst
CODE:
The detailed attendance log contains the following information:

Main details
~~~~~~~~~~~~

- :guilabel:`Employee`: the name of the employee.
- :guilabel:`Check In`: the date and time the employee checked in.
- :guilabel:`Check Out`: the date and time the employee checked out. This only appears if the
  employee has checked out.
- :guilabel:`Worked Hours`: the total amount of time the employee logged for the day, in an hour and
  minute format (HH:MM). This value calculates all the checks in and check outs for the day, if the
  employee checked in and out multiple times.
- :guilabel:`Extra Hours`: any extra hours the employee logged that is beyond their expected working
  hours.

Check in/check out details
~~~~~~~~~~~~~~~~~~~~~~~~~~

The following information appears for both the :guilabel:`Check In` and :guilabel:`Check Out`
sections.

- :guilabel:`Mode`: the method with which the attendance information was gathered.
  :guilabel:`Systray` is displayed if the employee logged in and out :ref:`directly from the
  database <attendances/check-in>`, :guilabel:`Manual` is displayed if the employee logged in and
  out :ref:`using an attendance kiosk <attendances/kiosk-mode-entry>`.
- :guilabel:`IP Address`: the IP address for the computer the employee used to log in or out.
- :guilabel:`Browser`: the web browser the employee used to log in or out.
- :guilabel:`Localization`: the city and country associated with the computer's IP address.
- :guilabel:`GPS Coordinates`: the specific coordinates when the user logged in or out. To view the
  specific coordinates on a map, click the :guilabel:`→ View on Maps` button beneath the
  :guilabel:`GPS Coordinates`. This opens a map in a new browser tab, with the specific location
  pointed out.

----------------------------------------

TITLE: Create Device Contact
DESCRIPTION: Creates a new contact in the device's contact list with the provided contact details including name, phone numbers, address and image.

LANGUAGE: javascript
CODE:
var contact = {
    'name': 'Michel Fletcher',
    'mobile': '9999999999',
    'phone': '7954856587',
    'fax': '765898745',
    'email': 'michel.fletcher@agrolait.example.com',
    'website': 'http://www.agrolait.com',
    'street': '69 rue de Namur',
    'street2': false,
    'country_id': [21, 'Belgium'],
    'state_id': false,
    'city': 'Wavre',
    'zip': '1300',
    'parent_id': [8, 'Agrolait'],
    'function': 'Analyst',
    'image': '<<BASE 64 Image Data>>'
}

mobile.methods.addContact(contact);

----------------------------------------

TITLE: Creating Table of Contents for Change Management in reStructuredText
DESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It includes links to documentation pages for managing changes, specifically engineering change orders, ECO types, and version control in Odoo.

LANGUAGE: reStructuredText
CODE:
=================
Change management
=================

.. toctree::
   :titlesonly:

   manage_changes/engineering_change_orders
   manage_changes/eco_type
   manage_changes/version_control

----------------------------------------

TITLE: Calculating Withholding Tax
DESCRIPTION: Formula for calculating the final withholding tax amount on bonuses like thirteenth month pay

LANGUAGE: plaintext
CODE:
Tax = Gross Bonus * Applicable Tax Rate - Reduction (if applicable)

----------------------------------------

TITLE: Configuring Products and Categories with AvaTax Categories
DESCRIPTION: RST markup demonstrating product and category configurations in Odoo's AvaTax integration

LANGUAGE: rst
CODE:
.. image:: avatax/avatax-category.png
   :align: center
   :alt: Specify AvaTax Category on products.

.. image:: avatax/override-avatax-product-category.png
   :align: center
   :alt: Override product categories as needed.

----------------------------------------

TITLE: Widget Implementation Code for Third-party Website
DESCRIPTION: HTML code snippet for implementing the Odoo Live Chat widget on non-Odoo websites. This code needs to be placed in the <head> tag of the website.

LANGUAGE: html
CODE:
<head>
    <!-- Live chat widget code goes here -->
</head>

----------------------------------------

TITLE: Configuring RST Substitutions for Maintenance Terms
DESCRIPTION: RST directives defining abbreviation substitutions for maintenance terminology (MTBF and MTTR)

LANGUAGE: rst
CODE:
.. |MTBF| replace:: :abbr:`MTBF (Mean Time Between Failure)`
.. |MTTR| replace:: :abbr:`MTTR (Mean Time To Repair)`

----------------------------------------

TITLE: Creating a Spreadsheet Template in Odoo
DESCRIPTION: Instructions for saving a spreadsheet as a template in Odoo. This process involves opening a spreadsheet, selecting 'File' from the menu bar, then 'Save as template', and confirming the template name.

LANGUAGE: reStructuredText
CODE:
From the menu bar, click :menuselection:`File -->
Save as template`. Modify the default :guilabel:`Template Name` if needed and click
:guilabel:`Confirm`.

----------------------------------------

TITLE: AvaTax Integration List Table Structure
DESCRIPTION: RST markup showing available AvaTax modules and their descriptions in Odoo

LANGUAGE: rst
CODE:
.. list-table::
   :header-rows: 1
   :widths: 25 25 50

   * - Name
     - Technical name
     - Description
   * - :guilabel:`Avatax`
     - `account_avatax`
     - Default *AvaTax* module. This module adds the base *AvaTax* features for tax calculation.

----------------------------------------

TITLE: ReStructuredText Documentation for Odoo Website Pages
DESCRIPTION: RST formatted documentation detailing the creation and management of Odoo website pages, including page types, publishing workflow, URL redirections, and page properties configuration.

LANGUAGE: rst
CODE:
=====
Pages
=====

Odoo allows you to create pages for your website and customize their content and appearance to your
needs.

.. _website/page_type:

**Static** pages have stable content, such as the homepage. You can manually create new ones, define
their URLs, adapt their properties, etc.

----------------------------------------

TITLE: Patching Existing Classes in Javascript
DESCRIPTION: Example of how to patch an existing class to modify its behavior

LANGUAGE: javascript
CODE:
import { Hamster } from "@web/core/hamster"
import { patch } from "@web/core/utils/patch";

patch(Hamster.prototype, {
    sleep() {
        super.sleep(...arguments);
        console.log("zzzz");
    },
});

----------------------------------------

TITLE: RST Documentation Structure
DESCRIPTION: RST formatted documentation outlining marketing campaign metric functionality. Includes section headers, images, notes, tips and navigation paths.

LANGUAGE: rst
CODE:
================
Campaign metrics
================

*Campaign metrics* are detailed statistics and analytics within a marketing campaign, measuring its
success and effectiveness. Triggered marketing activities populate relevant activity blocks with
real-time metrics, in the campaign detail form.

----------------------------------------

TITLE: RST Table of Contents Definition for Warehouse Operations
DESCRIPTION: ReStructuredText directive defining a table of contents tree for warehouse operation documentation pages. Includes configuration for titlesonly and glob pattern matching.

LANGUAGE: rst
CODE:
.. toctree::
   :titlesonly:
   :glob:

   operations/adjustments
   operations/receipts_deliveries
   operations/process_transfers
   operations/transfers_scratch
   operations/barcode_nomenclature
   operations/gs1_nomenclature
   operations/gs1_usage

----------------------------------------

TITLE: Configuring Dynamic Variables for WhatsApp Template
DESCRIPTION: Shows an example of how to configure dynamic variables for a WhatsApp template in Odoo. Each variable corresponds to a placeholder in the message body.

LANGUAGE: python
CODE:
# Example variable configuration
{
    'body - {{1}}': {'Sample Value': 'Azure Interior', 'Type': 'Field of Model', 'Field': 'Partner'},
    'body - {{2}}': {'Sample Value': 'INV/2022/00001', 'Type': 'Field of Model', 'Field': 'Number'},
    'body - {{3}}': {'Sample Value': 'My Company', 'Type': 'Field of Model', 'Field': 'Company'},
    'body - {{4}}': {'Sample Value': '$', 'Type': 'Field of Model', 'Field': 'Currency > Symbol'},
    'body - {{5}}': {'Sample Value': '4000', 'Type': 'Field of Model', 'Field': 'Amount'},
    'body - {{6}}': {'Sample Value': 'https://..', 'Type': 'Portal link', 'Field': ''}
}

----------------------------------------

TITLE: Defining RST Image for Online Payment Form
DESCRIPTION: This RST code snippet defines an image showing an example of an online payment form in Odoo.

LANGUAGE: rst
CODE:
.. image:: payment_providers/online-payment.png
   :alt: Online payment form

----------------------------------------

TITLE: Enabling Asynchronous Email Sending in Odoo eCommerce
DESCRIPTION: This snippet outlines the steps to enable asynchronous email sending for Odoo eCommerce to optimize performance during high traffic periods. It involves installing a module, setting a system parameter, and ensuring a scheduled action is enabled.

LANGUAGE: python
CODE:
# Steps to enable asynchronous email sending:

# 1. Enable developer mode
# 2. Install 'Sales - Async Emails' module
# 3. Set system parameter
sale_async_emails = True

# 4. Enable scheduled action 'Sales: Send pending emails'
# (No code required, done through UI)

----------------------------------------

TITLE: RST Figure Directive
DESCRIPTION: RST figure directive with caption for Knowledge bookmark icon

LANGUAGE: rst
CODE:
.. figure:: help_center/help-center-knowledge-bookmark-icon.png
   :alt: View of a message in Helpdesk focusing on the Knowledge bookmark icon.

   The Knowledge app is represented by the bookmark icon.

----------------------------------------

TITLE: RST Documentation Structure - Replenishment Guide
DESCRIPTION: ReStructuredText documentation defining the structure and content for Odoo's replenishment documentation, including section headers, link definitions, and content organization.

LANGUAGE: rst
CODE:
=============
Replenishment
=============

.. |MTO| replace:: :abbr:`MTO (Make to Oder)`
.. |PO| replace:: :abbr:`PO (Purchase Order)`
.. |MO| replace:: :abbr:`MO (Manufacturing Order)`
.. |POs| replace:: :abbr:`POs (Purchase Orders)`
.. |MOs| replace:: :abbr:`MOs (Manufacturing Orders)`
.. |SO| replace:: :abbr:`SO (Sales Order)`

----------------------------------------

TITLE: Note About Skills Management Access
DESCRIPTION: Important note regarding user access rights required for managing employee skills in Odoo.

LANGUAGE: markdown
CODE:
Only users with 'Officer: Manage all employees' or 'Administrator' rights for the Employees app can add or edit skills.

----------------------------------------

TITLE: Time Condition Configuration Example
DESCRIPTION: Configuration example for setting up holiday routing (July 4th) using the Time Condition element in Axivox

LANGUAGE: plaintext
CODE:
Hour/Minute: 0:0 to 23:59
Day of the week: All to All
Day of the month: From 4 to 4
Month: July

----------------------------------------

TITLE: Configuring Gelato Webhook URL in RST
DESCRIPTION: Example of the correct URL format for configuring the Gelato webhook in the Odoo database. This snippet demonstrates how to structure the webhook URL by appending '/gelato/webhook' to the Odoo database URL.

LANGUAGE: rst
CODE:
.. example::
   `https://stealthywood.odoo.com/gelato/webhook`

----------------------------------------

TITLE: Parse Document Response Format
DESCRIPTION: JSON-RPC2 response format containing status code, status message and document token for successful requests.

LANGUAGE: javascript
CODE:
{
    "jsonrpc": "2.0",
    "id": string,
    "result": {
        "status": string,
        "status_msg": string,
        "document_token": string,
    }
}

----------------------------------------

TITLE: RST Documentation Directives
DESCRIPTION: ReStructuredText directives for configuring the documentation page display and navigation options

LANGUAGE: rst
CODE:
:nosearch:\n:show-content:\n:hide-page-toc:\n:show-toc:\n\n===========\nMaintenance\n===========

----------------------------------------

TITLE: ReStructuredText Title and Substitutions
DESCRIPTION: Defines document title and text substitutions for common terms used throughout the documentation

LANGUAGE: rst
CODE:
==================\nPurchase templates\n==================\n\n.. |Pts| replace:: Purchase templates\n.. |pt| replace:: purchase template\n.. |RFQ| replace:: :abbr:`RFQ (request for quotation)`\n.. |RFQs| replace:: :abbr:`RFQs (requests for quotation)`

----------------------------------------

TITLE: ReStructured Text Documentation for Event Tracks
DESCRIPTION: Complete documentation in RST format describing the Odoo Events track management system including configuration, creation, management and publication of event tracks

LANGUAGE: rst
CODE:
============
Event tracks
============

Odoo *Events* provides the ability to create, schedule, and manage talks, lectures, demonstrations,
presentations, etc., which known as *Tracks* in Odoo.

The Odoo *Events* application also has an option to allow event attendees to propose talks (tracks)
for an event, which can then be approved (or disapproved).

Configuration
=============

First, there are some settings that need to be enabled, in order to get the most out of event
tracks.

----------------------------------------

TITLE: Image Reference for Signature Status
DESCRIPTION: RST image directive showing signature status visualization.

LANGUAGE: RST
CODE:
.. image:: sign/signature-status.png
   :alt: Signature status

----------------------------------------

TITLE: Defining Table of Contents for Odoo Shop Floor Documentation in reStructuredText
DESCRIPTION: This snippet defines a table of contents for the Odoo Shop Floor documentation using reStructuredText syntax. It includes a title and links to two subsections: shop floor overview and shop floor tracking.

LANGUAGE: reStructuredText
CODE:
:nosearch:

==========
Shop Floor
==========

.. toctree::
   :titlesonly:

   shop_floor/shop_floor_overview
   shop_floor/shop_floor_tracking

----------------------------------------

TITLE: Product Form Configuration Guidelines
DESCRIPTION: Important configuration requirements for subscription products in Odoo, including invoicing policy settings and recurring product setup.

LANGUAGE: restructuredtext
CODE:
.. important::
   When creating a physical subscription product in the Odoo **Sales** application, the
   :guilabel:`Invoicing Policy` must be set to :guilabel:`Ordered quantities`.

   Setting it to :guilabel:`Delivered quantities` causes issues with invoice creation, and disrupts
   the subscription process.

----------------------------------------

TITLE: Configuring RST Table of Contents for Odoo Services
DESCRIPTION: ReStructuredText toctree directive that defines the documentation structure for Odoo services modules, linking to individual service documentation pages.

LANGUAGE: rst
CODE:
.. toctree::

    services/project
    services/timesheets
    services/planning
    services/field_service
    services/helpdesk

----------------------------------------

TITLE: ReStructuredText Image Directive
DESCRIPTION: Includes image files in the documentation with alt text for accessibility

LANGUAGE: rst
CODE:
.. image:: purchase_templates/purchase-agreements-setting.png\n   :alt: The Purchase agreements setting in the Purchase app.\n\n.. image:: purchase_templates/rfq-smart-button.png\n   :alt: The RFQ smart button on a purchase template.

----------------------------------------

TITLE: Manually Creating Opportunities in Odoo CRM
DESCRIPTION: This RST snippet outlines the process of manually creating an opportunity in Odoo CRM. It covers navigation, required fields, and optional information such as expected revenue and priority.

LANGUAGE: rst
CODE:
To manually create an opportunity, navigate to :menuselection:`CRM app --> Sales --> My Pipeline`.
At the top-left of the page, click :guilabel:`New` to create a new opportunity Kanban card. In the
:guilabel:`Organization/Contact` field, enter the name of the company the opportunity is for.

Choose a name, and enter it in the :guilabel:`Opportunity` field. *This is a required field.* When
manually creating an opportunity, it is helpful to add a name that relates to the details of the
opportunity.

.. example::
   In the example below, the opportunity is named `5 VP Chairs`. This identifies the product the
   customer is interested in, as well as the potential number of products.

   .. image:: email_manual/opportunity-example.png
      :align: center
      :alt: An example of an opportunity in the CRM pipeline.

Enter the contact information for the opportunity in the :guilabel:`Email` and :guilabel:`Phone`
fields.

In the :guilabel:`Expected Revenue` field, enter an estimated value for the opportunity.

.. note::
   The information in the :guilabel:`Expected Revenue` and priority fields can be used to track
   performance for individual salespeople, and on a team basis. See
   :doc:`../performance/expected_revenue_report` and :doc:`../track_leads/lead_scoring` for more
   information.

Then, use the |st-o| :guilabel:`(star)` icons to assign a priority.

- |st-o| |st-o| |st-o|: low priority
- |st| |st-o| |st-o|: medium priority
- |st| |st| |st-o|: high priority
- |st| |st| |st|: very high priority

.. note::
   Assigning a priority changes the order of leads in Kanban view, with higher priority leads
   displayed first.

Once all the necessary information has been entered, click :guilabel:`Add`.

.. image:: email_manual/create-opportunities.png
   :align: center
   :alt: The CRM pipeline with a newly created opportunity.

----------------------------------------

TITLE: Image Reference for SMS Verification
DESCRIPTION: RST image directive showing SMS verification interface.

LANGUAGE: RST
CODE:
.. image:: sign/sms-verification.png
   :alt: Add a hash to your document

----------------------------------------

TITLE: Confirming Subscription Quotations in Odoo
DESCRIPTION: This snippet explains how to confirm a subscription quotation in Odoo, either by sending it to the customer via email or confirming it immediately. It also mentions the Customer Preview feature for viewing the customer portal.

LANGUAGE: restructuredtext
CODE:
Send the quotation to the customer for confirmation by clicking on :guilabel:`Send by email`, or
confirm it immediately by clicking on :guilabel:`Confirm`.

.. tip::
   Click on :guilabel:`Customer Preview` to preview the customer portal where the customer can view
   their quotation, sign and pay it, and communicate with you.

----------------------------------------

TITLE: Using External Python Library in Odoo Module
DESCRIPTION: Python code demonstrating how to use an external library (Unidecode) in an Odoo module.

LANGUAGE: python
CODE:
from unidecode import unidecode

@api.model
def create(self, values):
    if 'name' in values:
        values['name'] = unidecode(values['name'])
    return super(my_module, self).create(values)

def write(self, values):
    if 'name' in values:
        values['name'] = unidecode(values['name'])
    return super(my_module, self).write(values)

----------------------------------------

TITLE: Python Domain Formula Examples
DESCRIPTION: Example formulas for the 'Odoo Domain' computation engine targeting account.move.line objects with various subformulas like sum, sum_if_pos, sum_if_neg, and count_rows.

LANGUAGE: python
CODE:
sum
sum_if_pos
sum_if_neg
count_rows
-sum

----------------------------------------

TITLE: Defining Table of Contents in RST for Mail Plugins Documentation
DESCRIPTION: This RST code snippet defines the table of contents for the Mail Plugins documentation, including links to Outlook and Gmail specific pages.

LANGUAGE: rst
CODE:
.. toctree::
   :titlesonly:

   mail_plugins/outlook
   mail_plugins/gmail

----------------------------------------

TITLE: Image Reference for Signing Order
DESCRIPTION: RST image directive showing signing order configuration interface.

LANGUAGE: RST
CODE:
.. image:: sign/specify-signing-order.png
   :alt: Toggle the switch to specify the signing order.

----------------------------------------

TITLE: Regular Expression Pattern for Phone Number Validation
DESCRIPTION: Examples of regular expressions used for validating and routing phone numbers in the Axivox dispatcher element

LANGUAGE: plaintext
CODE:
02\d+ - validates numbers starting with 02
00\d+ - validates all numbers beginning with 00
0052\d+ - validates all numbers beginning with 0052 (Mexico)
001716\d+ - validates numbers beginning with 001716 (USA + Western NY)

----------------------------------------

TITLE: Defining Table of Contents for Odoo Finance Documentation in reStructuredText
DESCRIPTION: This snippet defines the table of contents for the Odoo Finance module documentation using reStructuredText syntax. It includes references to submodules such as accounting, expenses, payment providers, and fiscal localizations.

LANGUAGE: rst
CODE:
:nosearch:

=======
Finance
=======

.. toctree::

    finance/accounting
    finance/expenses
    finance/payment_providers
    finance/fiscal_localizations

----------------------------------------

TITLE: Creating See Also Section in RST for Mail Plugins Documentation
DESCRIPTION: This RST code snippet demonstrates how to create a 'See Also' section in the Mail Plugins documentation, providing links to related documentation and tutorials.

LANGUAGE: rst
CODE:
.. seealso::
   - :doc:`../../essentials/in_app_purchase`
   - `Odoo Tutorials: Lead Enrichment <https://www.odoo.com/r/p73>`_

----------------------------------------

TITLE: Adding Placeholders in WhatsApp Template Body
DESCRIPTION: Demonstrates how to add placeholder variables in a WhatsApp message template body. These placeholders can be dynamically replaced with actual values when sending messages.

LANGUAGE: python
CODE:
Dear {{1}},

| Here is your invoice *{{2}}* from *{{3}}* for a total of *{{4}}{{5}}*.
| To review your invoice or pay online: {{6}}

Thank you

----------------------------------------

TITLE: Using Spreadsheet Templates in Odoo
DESCRIPTION: Steps to create a new spreadsheet using an existing template in Odoo. This can be done through the Documents app or via the Configuration menu.

LANGUAGE: reStructuredText
CODE:
To create a new spreadsheet using a template, open the Documents app and click
:menuselection:`New --> Spreadsheet`. Select the relevant template and click :guilabel:`Create`.

Alternatively, go to :menuselection:`Documents --> Configuration --> Spreadsheet Templates` then,
on the line of the relevant template, click :icon:`fa-plus` :guilabel:`New spreadsheet`.

----------------------------------------

TITLE: Using Python Debugger in Odoo.sh Environment
DESCRIPTION: Explains how to set up and use Python debuggers (pdb, pudb, or ipdb) in the Odoo.sh environment. It includes instructions for installing debuggers and inserting breakpoints in the code. This is crucial for troubleshooting and development in the Odoo.sh platform.

LANGUAGE: bash
CODE:
$  pip install pudb --user

LANGUAGE: bash
CODE:
$  pip install ipdb --user

LANGUAGE: python
CODE:
import sys
if sys.__stdin__.isatty():
    import pdb; pdb.set_trace()

LANGUAGE: bash
CODE:
$ odoo-bin shell

----------------------------------------

TITLE: Configuring Hidden Table of Contents in reStructuredText for Odoo Documentation
DESCRIPTION: This snippet sets up a hidden table of contents (toctree) in reStructuredText format. It specifies a maximum depth of 4 levels and includes a reference to a 'terms_of_sale_fr' document.

LANGUAGE: reStructuredText
CODE:
.. toctree::
   :maxdepth: 4
   :hidden:

   terms_of_sale_fr

----------------------------------------

TITLE: Defining Table of Contents for Odoo Productivity Modules in reStructuredText
DESCRIPTION: This code snippet defines a table of contents in reStructuredText format for various productivity-related modules in Odoo. It includes links to documentation for documents, sign, spreadsheet, knowledge, calendar, discuss, data cleaning, WhatsApp, VoIP, and to-do functionality.

LANGUAGE: rst
CODE:
:nosearch:

============
Productivity
============


.. toctree::

    productivity/documents
    productivity/sign
    productivity/spreadsheet
    productivity/knowledge
    productivity/calendar
    productivity/discuss
    productivity/data_cleaning
    productivity/whatsapp
    productivity/voip
    productivity/to_do

----------------------------------------

TITLE: Creating Note Block in RST for Mail Plugins Documentation
DESCRIPTION: This RST code snippet demonstrates how to create a note block in the Mail Plugins documentation, providing additional information about credit usage and privacy policy.

LANGUAGE: rst
CODE:
.. note::
   - If you are out of credits, the only information populated when clicking on the suggested
     company is its website link and logo.
   - Check out the `Lead Generation IAP service Privacy Policy
     <https://iap.odoo.com/privacy#header_3>`_.

----------------------------------------

TITLE: Naive Bayes Probability Formula for Lead Scoring
DESCRIPTION: Mathematical formula showing how Odoo calculates lead scoring probability using the naive Bayes model. The equation calculates the probability of a successful lead given certain conditions.

LANGUAGE: math
CODE:
P(A | B) = \frac{P(A) \times P(B | A)}{P(B)}

----------------------------------------

TITLE: HTML to Plain Text Conversion Example
DESCRIPTION: Example demonstrating how the Scrap HTML action converts HTML formatted text to plain text format.

LANGUAGE: html
CODE:
<h1>John Doe</h1>
<p>Lorem ipsum dolor sit <a href="https://example.com">amet</a>.</p>

LANGUAGE: text
CODE:
**John Doe** Lorem ipsum dolor sit amet [1] .[1] https://example.com

----------------------------------------

TITLE: Configuring Sphinx Documentation for Odoo Project
DESCRIPTION: This snippet sets up the Sphinx documentation configuration for the Odoo project. It excludes the document from search results, marks it as an orphan, and configures a hidden table of contents with a maximum depth of 4, including a link to the enterprise_pt_BR document.

LANGUAGE: reStructuredText
CODE:
:nosearch:
:orphan:

.. toctree::
   :maxdepth: 4
   :hidden:

   enterprise_pt_BR

----------------------------------------

TITLE: Defining RST Table of Contents for Products and Prices
DESCRIPTION: RestructuredText directive that creates a table of contents for product and pricing related documentation sections. Uses the titlesonly option to create a clean navigation structure.

LANGUAGE: rst
CODE:
:nosearch:

=================
Products & Prices
=================

.. toctree::
   :titlesonly:

   products_prices/products
   products_prices/prices
   products_prices/returns
   products_prices/ewallets_giftcards
   products_prices/loyalty_discount

----------------------------------------

TITLE: Creating Server Action in Python
DESCRIPTION: Example showing Python code execution as a server action type in Odoo Marketing Automation. This is mentioned in the context of server action configuration though no specific code is provided in the text.



----------------------------------------

TITLE: URL Regex Pattern for Live Chat Channel
DESCRIPTION: Example of regex pattern for routing live chat based on website URL paths. Only requires the path from root domain, not the full URL.

LANGUAGE: text
CODE:
/helpdesk/support

----------------------------------------

TITLE: Live Chat Ticket Creation Command
DESCRIPTION: Command used within live chat conversations to create a new helpdesk ticket. The chat transcript is automatically added to the ticket description.

LANGUAGE: text
CODE:
/ticket

----------------------------------------

TITLE: Cloning Odoo Repositories with Git (Linux/Mac)
DESCRIPTION: Commands for cloning both Odoo Community and Enterprise repositories using either HTTPS or SSH protocols on Linux/Mac systems.

LANGUAGE: console
CODE:
$ git clone https://github.com/odoo/odoo.git
$ git clone https://github.com/odoo/enterprise.git

----------------------------------------

TITLE: Defining RST Documentation Structure for Odoo Invoicing
DESCRIPTION: A reStructuredText (RST) table of contents that defines the documentation structure for Odoo's invoicing methods. Uses the titlesonly directive to create a clean navigation structure.

LANGUAGE: rst
CODE:
:nosearch:

================
Invoicing Method
================

.. toctree::
   :titlesonly:

   invoicing/invoicing_policy
   invoicing/down_payment
   invoicing/proforma
   invoicing/time_materials
   invoicing/milestone
   invoicing/expense

----------------------------------------

TITLE: RST Documentation - Work Entries Overview
DESCRIPTION: Contains RST documentation for Odoo work entries, covering dashboard navigation, entry creation, and conflict management.

LANGUAGE: rst
CODE:
============
Work entries
============

Work entries are created automatically in the *Payroll* app, based on the employee's :ref:`salary structure type <payroll/structure-types>`, and from the *Planning*, *Attendances*, and *Time Off* applications.

----------------------------------------

TITLE: Computing Datetime Field Using Python - Odoo
DESCRIPTION: Python expression example for computing a custom datetime field value when a task's priority is set to high. This code is used within an Update Record automation action.

LANGUAGE: python
CODE:
datetime.now()

----------------------------------------

TITLE: Creating RST Documentation with Image References
DESCRIPTION: RST markup for documenting image references and structural elements in Odoo's helpdesk SLA documentation.

LANGUAGE: rst
CODE:
.. image:: sla/sla-enable.png
   :alt: View of a team page in Helpdesk focusing on the SLA Policies setting.

.. image:: sla/sla-create-new.png
   :alt: View of a new SLA policy record with all the relevant information entered.

----------------------------------------

TITLE: RST Table of Contents for Odoo Optimization
DESCRIPTION: ReStructuredText directive defining the table of contents structure for Odoo optimization documentation pages.

LANGUAGE: rst
CODE:
:nosearch:

=============================
Optimize your Day-to-Day work
=============================

.. toctree::
   :titlesonly:

   optimize/partner_autocomplete
   optimize/gamification
   optimize/utilize_activities
   optimize/lead_enrichment

----------------------------------------

TITLE: Displaying Translated Text in Odoo Website
DESCRIPTION: This XML snippet shows an image tag used to display how translated text appears in the Odoo website translation mode. Translated strings are highlighted in green, while untranslated ones are in yellow.

LANGUAGE: xml
CODE:
<image alt="Entering the translation mode" src="translate/translated-text.png"/>

----------------------------------------

TITLE: Replace Add to Cart with Contact Us Button
DESCRIPTION: Steps to replace the Add to Cart button with a Contact Us button by setting zero price and configuring the redirect URL.

LANGUAGE: text
CODE:
Website --> Configuration --> Settings --> Shop - Products\nEnable: Prevent Sale of Zero Priced Product\nSet: Button url field

----------------------------------------

TITLE: Importing Serial Numbers Format Example
DESCRIPTION: Example format for importing multiple serial numbers in Odoo's Import Serials/Lots window. Each serial number should be on a separate line.

LANGUAGE: txt
CODE:
124
125

----------------------------------------

TITLE: NGINX HTTPS Proxy Configuration for Odoo
DESCRIPTION: Complete NGINX configuration for SSL termination and reverse proxy setup for Odoo server

LANGUAGE: nginx
CODE:
#odoo server
upstream odoo {
  server 127.0.0.1:8069;
}
upstream odoochat {
  server 127.0.0.1:8072;
}
map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

# http -> https
server {
  listen 80;
  server_name odoo.mycompany.com;
  rewrite ^(.*) https://$host$1 permanent;
}

server {
  listen 443 ssl;
  server_name odoo.mycompany.com;
  proxy_read_timeout 720s;
  proxy_connect_timeout 720s;
  proxy_send_timeout 720s;

  # SSL parameters
  ssl_certificate /etc/ssl/nginx/server.crt;
  ssl_certificate_key /etc/ssl/nginx/server.key;
  ssl_session_timeout 30m;
  ssl_protocols TLSv1.2;
  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
  ssl_prefer_server_ciphers off;

  # log
  access_log /var/log/nginx/odoo.access.log;
  error_log /var/log/nginx/odoo.error.log;

  # Redirect websocket requests to odoo gevent port
  location /websocket {
    proxy_pass http://odoochat;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_set_header X-Forwarded-Host $http_host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Real-IP $remote_addr;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
    proxy_cookie_flags session_id samesite=lax secure;  # requires nginx 1.19.8
  }

  # Redirect requests to odoo backend server
  location / {
    # Add Headers for odoo proxy mode
    proxy_set_header X-Forwarded-Host $http_host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_redirect off;
    proxy_pass http://odoo;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
    proxy_cookie_flags session_id samesite=lax secure;  # requires nginx 1.19.8
  }

  # common gzip
  gzip_types text/css text/scss text/plain text/xml application/xml application/json application/javascript;
  gzip on;
}

----------------------------------------

TITLE: Image Reference for Sign Hash
DESCRIPTION: RST image directive showing signature hash security frame.

LANGUAGE: RST
CODE:
.. image:: sign/sign-hash.png
   :alt: Adding the visual security frame to a signature.

----------------------------------------

TITLE: Defining Table of Contents for Odoo Integrations in reStructuredText
DESCRIPTION: This snippet defines a table of contents using reStructuredText syntax, listing various Odoo integration topics. It includes references to documentation for mail plugins, Unsplash, geolocation, Google Translate, and barcode lookup integrations.

LANGUAGE: reStructuredText
CODE:
============
Integrations
============

.. toctree::

   integrations/mail_plugins
   integrations/unsplash
   integrations/geolocation
   integrations/google_translate
   integrations/barcodelookup

----------------------------------------

TITLE: Account Code Prefix Formulas
DESCRIPTION: Examples of formulas using the 'Prefix of Account Codes' engine to match accounts by their code prefixes, including credit/debit filtering and tag matching.

LANGUAGE: python
CODE:
21
21 + 10 - 5
21 + 10\(101, 102) - 5\(57)
21D + 10\(101, 102)C - 5\(57)
tag(my_module.my_tag)
tag(my_module.my_tag) + tag(42) + 10

----------------------------------------

TITLE: RST Documentation for Payment Providers Configuration
DESCRIPTION: Structured documentation explaining the setup and configuration of payment providers in Odoo's eCommerce platform, including SEPA Direct Debit, Authorize.net, PayPal, and gift card functionality.

LANGUAGE: rst
CODE:
=================
Payment providers
=================

Odoo supports a multitude of online
:doc:`payment providers </applications/finance/payment_providers>` for your website, allowing your
customers to pay with their preferred payment methods.

.. seealso::
   - :doc:`/applications/sales/sales/products_prices/ewallets_giftcards`
   - :doc:`../checkout_payment_shipping/checkout`

Configuration
=============

To set up payment providers on the eCommerce app, go to :menuselection:`Website --> Configuration
--> Payment Providers`. From here, :guilabel:`Activate` the payment providers you wish to have
available on your shop, and configure them according to your needs.

----------------------------------------

TITLE: RST Image Directive for Filter Sidebar
DESCRIPTION: Defines an image directive for displaying the filter sidebar interface with alignment and alt text.

LANGUAGE: rst
CODE:
.. image:: product_catalog/filter-sidebar.png
   :align: center
   :alt: The filter sidebar in the product catalog.

----------------------------------------

TITLE: RST Table of Contents Structure
DESCRIPTION: ReStructuredText markup defining a table of contents with titlesonly directive and three child pages related to warehouse functionality.

LANGUAGE: rst
CODE:
:nosearch:

======================
Warehouses and storage
======================

.. toctree::
   :titlesonly:

   warehouses_storage/inventory_management
   warehouses_storage/replenishment
   warehouses_storage/reporting

----------------------------------------

TITLE: Structuring Advanced RST Documentation with TocTree
DESCRIPTION: ReStructuredText markup for creating a table of contents with specific documentation sections for advanced Odoo features. Uses the titlesonly directive to generate a cleaner navigation structure.

LANGUAGE: rst
CODE:
:nosearch:

========
Advanced
========

.. toctree::
   :titlesonly:

   advanced/analyze
   advanced/vendor_costs_report
   advanced/procurement_expenses_report

----------------------------------------

TITLE: Time Off Type Configuration Example
DESCRIPTION: Example configuration showing basic structure of time off types in rst format, including setup options for requests, allocations and validation requirements.

LANGUAGE: rst
CODE:
Time Off Requests section
*************************

- :guilabel:`Approval`: select what specific kind of approval is required for the time off type. The options are:

  - :guilabel:`No Validation`: No approvals are required when requesting this type of time off.
  - :guilabel:`By Time Off Officer`: Only the specified :ref:`Time Off Officer` is required to approve.
  - :guilabel:`By Employee's Approver`: Only the employee's specified approver for time off is required.
  - :guilabel:`By Employee's Approver and Time Off Officer`: Both approvers are required.

----------------------------------------

TITLE: RST Markup for Features Documentation
DESCRIPTION: ReStructuredText markup defining the documentation structure for Odoo's Features building blocks, including Table of Content and Call to Action components. Contains section headers, references, notes, and image inclusions.

LANGUAGE: rst
CODE:
========
Features
========

The :guilabel:`Features` :doc:`building blocks <../building_blocks>` allow you to list multiple
items next to each other.

The :ref:`Table of Content <features/table_of_content>` and the :ref:`Call to Action
<features/call_to_action>` blocks are presented below.

.. note::
   To add a building block, click :guilabel:`Edit`, select the desired building block under the
   :guilabel:`Blocks` tab, and drag and drop it onto the page. To access its settings, click it and
   go to the :guilabel:`Customize` tab, where the available options depend on the type of block
   selected.

.. _features/table_of_content:

Table of content
================

The :guilabel:`Table of Content` block is used to list many different items grouped under several
headings. A clickable index is available to navigate quickly between the different categories.

.. image:: features/table-of-content.png
   :alt: The default Table of Content block

.. _features/call_to_action:

Call to action
==============

The :guilabel:`Call to Action` block is used to prompt visitors to take a specific action, such
as signing up for a newsletter or contacting you.

.. image:: features/call-to-action.png
   :alt: The default Call to Action block

To change the button's link, select it, go to the :guilabel:`Customize` tab's :guilabel:`Inline
Text` section and replace `/contactus` with another URL.

----------------------------------------

TITLE: RST Table of Contents Structure for Product Management
DESCRIPTION: ReStructuredText markup defining the documentation structure and navigation for product management topics using toctree directive.

LANGUAGE: rst
CODE:
:nosearch:

==================
Product management
==================

.. toctree::
   :titlesonly:

   product_management/configure
   product_management/product_tracking
   product_management/inventory_valuation

----------------------------------------

TITLE: PostgreSQL Network Access Configuration
DESCRIPTION: Configuration for allowing PostgreSQL connections from localhost and specific network range

LANGUAGE: text
CODE:
# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
host    all             all             192.168.1.0/24          md5

----------------------------------------

TITLE: RST Image Directive for Catalog Button
DESCRIPTION: Defines an image directive for displaying the catalog button interface element with alignment and alt text.

LANGUAGE: rst
CODE:
.. image:: product_catalog/catalog-button.png
   :align: center
   :alt: The "Catalog" button on the "Order Lines" tab of a sales quotation.

----------------------------------------

TITLE: Defining Table of Contents for Odoo Sales Documentation in reStructuredText
DESCRIPTION: This snippet defines a table of contents for the Sales module documentation in Odoo using reStructuredText format. It includes links to various sales-related sub-modules and features.

LANGUAGE: rst
CODE:
:nosearch:

=====
Sales
=====


.. toctree::

    sales/crm
    sales/sales
    sales/point_of_sale
    sales/subscriptions
    sales/rental
    sales/members

----------------------------------------

TITLE: Displaying Social Media Block in RST
DESCRIPTION: This RST code snippet shows how to include an image of the social media building block and its settings in the documentation. It uses the 'image' directive to display the image file and provides an alternative text for accessibility.

LANGUAGE: rst
CODE:
.. image:: inner_content/social-media-block.png
   :alt: The social media building block and its settings

----------------------------------------

TITLE: RST Documentation for Odoo Removal Strategies
DESCRIPTION: ReStructuredText documentation that explains warehouse removal strategies, their configuration, and required features in Odoo. Includes detailed tables and setup instructions for various removal strategies.

LANGUAGE: rst
CODE:
==================
Removal strategies
==================

For companies with warehouses, *removal strategies* determine **which** products are taken from the
warehouse, and **when**. For example, for perishable products, prioritizing the picking of goods
with the nearest expiration date helps minimize food spoilage.

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * -
     - :doc:`FIFO <removal_strategies/fifo>`
     - :doc:`LIFO <removal_strategies/lifo>`
     - :doc:`FEFO <removal_strategies/fefo>`
     - :doc:`Closest Location <removal_strategies/closest_location>`
     - :doc:`Least Packages <removal_strategies/least_packages>`

----------------------------------------

TITLE: RST Substitutions for Order Abbreviations
DESCRIPTION: Defines reStructuredText substitutions for common order-related abbreviations used throughout the documentation.

LANGUAGE: rst
CODE:
.. |SO| replace:: :abbr:`SO (sales order)`
.. |SOs| replace:: :abbr:`SOs (sales orders)`
.. |BoM| replace:: :abbr:`BoM (bill of materials)`
.. |RfQ| replace:: :abbr:`RfQ (request for quotation)`

----------------------------------------

TITLE: Allocation Configuration in RST
DESCRIPTION: ReStructuredText markup defining abbreviations for common terms used in Odoo manufacturing documentation (SO, MO, RfQ).

LANGUAGE: rst
CODE:
.. |SO| replace:: :abbr:`SO (sales order)`
.. |SOs| replace:: :abbr:`SOs (sales orders)`
.. |MO| replace:: :abbr:`MO (manufacturing order)`
.. |MOs| replace:: :abbr:`MOs (manufacturing orders)`
.. |RfQ| replace:: :abbr:`RfQ (request for quotation)`

----------------------------------------

TITLE: RST Navigation Card Structure
DESCRIPTION: ReStructuredText markup defining navigation cards for different sections of the Marketing Automation documentation.

LANGUAGE: rst
CODE:
.. cards::

   .. card:: Audience targeting
      :target: marketing_automation/target_audience

      Configure the target audience for a campaign.

----------------------------------------

TITLE: Configuring RST Documentation Structure for Payment Providers
DESCRIPTION: RST markup defining the documentation structure for payment providers, including a table of contents directive pointing to wire transfer documentation.

LANGUAGE: rst
CODE:
:nosearch:

=================
Payment providers
=================

.. toctree::
   :titlesonly:

   payment_providers/wire_transfer

----------------------------------------

TITLE: Configuring One-Step Receipt and Delivery in RST
DESCRIPTION: RST markup for documentation describing Odoo warehouse configuration and operations for one-step receipt and delivery processes.

LANGUAGE: rst
CODE:
=============================
One-step receipt and delivery
=============================

.. |PO| replace:: :abbr:`PO (Purchase Order)`
.. |SO| replace:: :abbr:`SO (Sales Order)`
.. |RfQ| replace:: :abbr:`RfQ (Request for Quotation)`

In Odoo *Inventory*, both incoming and outgoing shipments are configured to process in one step, by
default. This means purchases will be received directly into stock, and deliveries will be moved
directly from stock to customers.

----------------------------------------

TITLE: Installing Odoo Enterprise Debian Package
DESCRIPTION: This command installs the Odoo Enterprise Debian package, which should replace the existing Community package.

LANGUAGE: console
CODE:
$ sudo dpkg -i <path_to_enterprise_deb>

----------------------------------------

TITLE: RST Documentation Structure for Products
DESCRIPTION: ReStructuredText markup defining the documentation structure for Odoo product features. Includes a title and table of contents with links to pricelist, reordering, and temporary reordering documentation.

LANGUAGE: rst
CODE:
:nosearch:

========
Products
========

.. toctree::
   :titlesonly:

   products/pricelist
   products/reordering
   products/temporary_reordering

----------------------------------------

TITLE: Studio Documentation Structure in RST
DESCRIPTION: ReStructuredText markup defining the documentation structure for Odoo Studio, including table of contents and feature descriptions.

LANGUAGE: rst
CODE:
======
Studio
======

.. toctree::
   :titlesonly:

   studio/fields
   studio/views
   studio/models_modules_apps
   studio/automated_actions
   studio/pdf_reports
   studio/approval_rules

----------------------------------------

TITLE: Configuring RST Documentation Template for Odoo Legal Pages
DESCRIPTION: RST configuration directives for setting up the legal documentation template. Includes custom CSS application, page TOC hiding, and toctree configuration for child legal document pages.

LANGUAGE: rst
CODE:
:show-content:
:hide-page-toc:
:custom-css: legal.css
:orphan:

=====
Legal
=====

.. toctree::
    :hidden:

    legal/cla
    legal/licenses
    legal/terms

----------------------------------------

TITLE: RST Table of Contents for Odoo Picking Methods
DESCRIPTION: ReStructuredText markup defining a table of contents for Odoo picking methods documentation, including batch, cluster, and wave picking methods.

LANGUAGE: rst
CODE:
:nosearch:

===============
Picking methods
===============

.. toctree::
   :titlesonly:

   picking_methods/batch
   picking_methods/cluster
   picking_methods/wave

----------------------------------------

TITLE: Configuring RST Table of Contents for Odoo Documentation
DESCRIPTION: ReStructuredText directive that defines a table of contents tree for Odoo's getting started documentation. Uses the titlesonly option to show only top-level headings and lists key documentation sections.

LANGUAGE: rst
CODE:
:nosearch:

===========
Get started
===========

.. toctree::
   :titlesonly:

   getting_started/create
   getting_started/branches
   getting_started/builds
   getting_started/status
   getting_started/settings
   getting_started/online-editor
   getting_started/first_module

----------------------------------------

TITLE: RST Tip Block for Barcode Integration
DESCRIPTION: Documentation tip explaining how packaging works with Odoo Barcode functionality

LANGUAGE: rst
CODE:
.. tip::
   Packaging can be used in conjunction with Odoo :ref:`Barcode <inventory/barcode/software>`. When
   receiving products from suppliers, scanning the packaging barcode automatically adds the number
   of units in the packaging to the internal count of the product.

----------------------------------------

TITLE: Configuring RST Table of Contents for Advanced Odoo Documentation
DESCRIPTION: RestructuredText markup defining a table of contents structure for advanced Odoo documentation sections. Uses the toctree directive with titlesonly option to create a clean navigation menu.

LANGUAGE: rst
CODE:
:nosearch:

========
Advanced
========

.. toctree::
   :titlesonly:

   advanced/after_sales
   advanced/close_tickets
   advanced/track_and_bill

----------------------------------------

TITLE: Image Directives in RST
DESCRIPTION: ReStructuredText directives for displaying images in the documentation, including allocation buttons, reports, and labels.

LANGUAGE: rst
CODE:
.. image:: allocation/allocation-button.png
   :align: center
   :alt: The Allocation smart button at the top of an MO.

.. image:: allocation/product-reception-report.png
   :align: center
   :alt: The MRP Reception Report for an MO containing finished products.

.. image:: allocation/component-reception-report.png
   :align: center
   :alt: The MRP Reception Report for an MO containing components.

.. image:: allocation/assigned-labels.png
   :align: center
   :alt: The assignment labels generated by clicking Print Labels or Print Label.

----------------------------------------

TITLE: Example Commit Messages
DESCRIPTION: Real-world examples of properly formatted commit messages showing different types of changes and their descriptions.

LANGUAGE: text
CODE:
[REF] models: use `parent_path` to implement parent_store

This replaces the former modified preorder tree traversal (MPTT) with the
fields `parent_left`/`parent_right`[...]

[FIX] account: remove frenglish

[...]

Closes #22793
Fixes #22769

[FIX] website: remove unused alert div, fixes look of input-group-btn

Bootstrap's CSS depends on the input-group-btn
element being the first/last child of its parent.
This was not the case because of the invisible
and useless alert.

----------------------------------------

TITLE: Updating Odoo XML View
DESCRIPTION: XML code to add the new field to the form view.

LANGUAGE: xml
CODE:
<field name="start_datetime"/>

----------------------------------------

TITLE: Odoo RST Documentation
DESCRIPTION: ReStructuredText documentation for Odoo vendor bills management, including detailed configuration steps, bill creation workflows and batch processing instructions.

LANGUAGE: rst
CODE:
===================
Manage vendor bills
===================

.. _inventory/purchase/manage_deals/manage:

.. |PO| replace:: :abbr:`PO (Purchase Order)`
.. |POs| replace:: :abbr:`POs (Purchase Orders)`
.. |RfQ| replace:: :abbr:`RfQ (Request for Quotation)`
.. |RfQs| replace:: :abbr:`RfQs (Requests for Quotation)`

----------------------------------------

TITLE: Defining Table of Contents for Odoo User Documentation in reStructuredText
DESCRIPTION: This snippet defines the table of contents for Odoo's user documentation using reStructuredText. It includes directives for page formatting and a toctree listing various application categories.

LANGUAGE: rst
CODE:
:nosearch:
:show-content:
:hide-page-toc:
:show-toc:


=========
User Docs
=========

Discover our user guides and configuration tutorials per application.


.. toctree::
    :maxdepth: 2

    applications/essentials
    applications/finance
    applications/sales
    applications/websites
    applications/inventory_and_mrp
    applications/hr
    applications/marketing
    applications/services
    applications/productivity
    applications/studio
    applications/general

----------------------------------------

TITLE: Subcontracted Product Valuation Formula
DESCRIPTION: Mathematical formula showing how to calculate the total valuation of a subcontracted product based on components cost, manufacturing cost, shipping, dropshipping, and other associated costs.

LANGUAGE: math
CODE:
P = C + M + S + D + x

----------------------------------------

TITLE: Configuring Postfix Mail Aliases for Odoo Gateway
DESCRIPTION: Configuration snippet for setting up Postfix mail aliases to forward incoming emails to the Odoo mailgate script. This allows automatic processing of emails in the Odoo database.

LANGUAGE: text
CODE:
email@address: "|/odoo-directory/addons/mail/static/scripts/odoo-mailgate.py -d <database-name> -u <userid> -p <password>"

----------------------------------------

TITLE: RestructuredText Odoo Documentation Format
DESCRIPTION: RestructuredText markup for documenting Odoo's Pass-Fail quality check functionality, including directives for abbreviations, section headers, images, and cross-references.

LANGUAGE: restructuredtext
CODE:
=========================
Pass - Fail quality check
=========================

.. |MO| replace:: :abbr:`MO (Manufacturing Order)`
.. |QCP| replace:: :abbr:`QCP (Quality Control Point)`
.. |QCPs| replace:: :abbr:`QCP (Quality Control Points)`

----------------------------------------

TITLE: Adding Redirect Entry Text Format
DESCRIPTION: Shows the format for adding redirect entries when moving .rst files to a new location in the redirects folder.

LANGUAGE: text
CODE:
applications/websites/website/configuration/unsplash.rst applications/general/integrations/unsplash.rst

----------------------------------------

TITLE: Flashing IoT Box SD Card with balenaEtcher
DESCRIPTION: This snippet shows the URL used to flash the IoT box's SD card with the latest image using balenaEtcher. It's part of the image update process for IoT boxes.

LANGUAGE: bash
CODE:
http://nightly.odoo.com/master/iotbox/iotbox-latest.zip

----------------------------------------

TITLE: Documentation File Structure Example
DESCRIPTION: Demonstrates the recommended folder structure for organizing documentation files and media assets.

LANGUAGE: text
CODE:
├── section
│   └── doc_filename
│   │   └── screenshot-tips.gif
│   │   └── awesome-filename.png
│   └── doc_filename.rst

----------------------------------------

TITLE: Stopping Odoo Service on Linux
DESCRIPTION: This command stops the Odoo service on a Linux system using the system service manager.

LANGUAGE: console
CODE:
$ sudo service odoo stop

----------------------------------------

TITLE: RST Directives Configuration for Documentation
DESCRIPTION: Sets up RST replacement directives for common abbreviations and icons used throughout the documentation

LANGUAGE: rst
CODE:
.. |PO| replace:: :abbr:`PO (Purchase Order)`
.. |SO| replace:: :abbr:`SO (Sales Order)`
.. |DO| replace:: :abbr:`DO (Delivery Order)`
.. |list| replace:: :icon:`fa-list` :guilabel:`(list)`

----------------------------------------

TITLE: Configuring Git User Settings
DESCRIPTION: Command for setting global git configuration variables for user name and email.

LANGUAGE: text
CODE:
git config --global <var> <value>

----------------------------------------

TITLE: Inserting Dynamic Placeholder in Odoo Email Template
DESCRIPTION: Example of using a dynamic placeholder to reference a customer's name from the Sales Order model in an Odoo email template.

LANGUAGE: xml
CODE:
{{ object.partner_id }}

----------------------------------------

TITLE: Configuring Sphinx Documentation Tree Structure
DESCRIPTION: Sphinx documentation configuration that sets up a hidden table of contents with maximum depth of 4 levels and includes a terms of sale document in German. Uses restructuredtext directives to control documentation structure.

LANGUAGE: restructuredtext
CODE:
:nosearch:
:orphan:

.. toctree::
   :maxdepth: 4
   :hidden:

   terms_of_sale_de

----------------------------------------

TITLE: ReStructuredText Documentation for Odoo Documents
DESCRIPTION: Complete documentation covering Odoo Documents configuration, workspace management, document handling, workflow actions, and AI-powered digitization features.

LANGUAGE: reStructuredText
CODE:
=========
Documents
=========

**Odoo Documents** allows you to store, view, and manage files within Odoo.

.. seealso::
   - `Odoo Documents: product page <https://www.odoo.com/app/documents>`_

----------------------------------------

TITLE: Defining Dynamic Content Template for Blog Posts
DESCRIPTION: Shows how to create a custom dynamic content template for blog posts

LANGUAGE: xml
CODE:
<template id="dynamic_filter_template_blog_post_airproof" name="...">
   <div t-foreach="records" t-as="data" class="s_blog_posts_post">
      <t t-set="record" t-value="data['_record']"/>
      <!-- Content -->
   </div>
</template>

----------------------------------------

TITLE: External Value Engine Formulas
DESCRIPTION: Formulas for the 'External Value' engine to handle manual and carryover values with subformulas for rounding and editability.

LANGUAGE: python
CODE:
sum
most_recent
editable;rounding=2

----------------------------------------

TITLE: Odoo Documentation Build Instructions
DESCRIPTION: Step-by-step instructions for building the documentation locally and accessing the built documentation in a web browser.

LANGUAGE: markdown
CODE:
1. In a terminal, navigate to the root directory of the documentation and build it `make`.
   Additional commands are available with `make help`.
2. Open the file `documentation/_build/html/index.html` in your web browser.
3. See [this guide](https://www.odoo.com/documentation/latest/contributing/documentation.html)
   for more detailed instructions.

----------------------------------------

TITLE: Configuring Sphinx Documentation for Odoo
DESCRIPTION: This snippet configures Sphinx documentation settings for Odoo. It disables search functionality, marks the page as an orphan, and sets up a hidden table of contents with a maximum depth of 4, including a reference to 'enterprise_nl'.

LANGUAGE: reStructuredText
CODE:
:nosearch:
:orphan:

.. toctree::
   :maxdepth: 4
   :hidden:

   enterprise_nl

----------------------------------------

TITLE: Adding Odoo Upgrade Utils to requirements.txt for Odoo.sh
DESCRIPTION: This snippet demonstrates how to add the Odoo Upgrade Utils library to the requirements.txt file for use with Odoo.sh. This is the recommended method for installing the library on Odoo.sh platforms.

LANGUAGE: python
CODE:
odoo_upgrade @ git+https://github.com/odoo/upgrade-util@master

----------------------------------------

TITLE: Creating Table of Contents for Odoo Terms and Conditions in reStructuredText
DESCRIPTION: This snippet creates a table of contents for Odoo's terms and conditions documentation using reStructuredText directives. It includes a title, a 'nosearch' option, and links to specific term documents.

LANGUAGE: restructuredtext
CODE:
:nosearch:

====================
Terms and Conditions
====================

.. toctree::
    :titlesonly:

    terms/odoo_sh_terms
    terms/enterprise
    terms/partnership
    terms/terms_of_sale

----------------------------------------

TITLE: Building Odoo Documentation Requirements
DESCRIPTION: List of system requirements and dependencies needed to build Odoo documentation locally, including specific Python versions and optional repository dependencies.

LANGUAGE: markdown
CODE:
- Git
- Python 3.6, 3.7, or 3.8
- Python dependencies listed in the file `requirements.txt`
- Make
- A local copy of the [odoo/odoo repository](https://github.com/odoo/odoo) (optional)
- A local copy of the [odoo/upgrade-util repository](https://github.com/odoo/upgrade-util) (optional)

----------------------------------------

TITLE: Implementing Form View in Odoo XML
DESCRIPTION: Form view definition showing structure elements like groups and notebooks for creating and editing single records. Includes sheet organization and multiple field groups.

LANGUAGE: xml
CODE:
<form string="Test">
    <sheet>
        <group>
            <group>
                <field name="name"/>
            </group>
            <group>
                <field name="last_seen"/>
            </group>
        </group>
        <notebook>
            <page string="Description">
                <field name="description"/>
            </page>
        </notebook>
    </sheet>
</form>

----------------------------------------

TITLE: Importing and Using Odoo Upgrade Utils in Python
DESCRIPTION: This snippet shows how to import and use the Odoo Upgrade Utils library in a Python upgrade script. It demonstrates the basic structure of an upgrade script using the library.

LANGUAGE: python
CODE:
from odoo.upgrade import util


def migrate(cr, version):
   # Rest of the script

----------------------------------------

TITLE: Buy Now Button Configuration
DESCRIPTION: Instructions for enabling the Buy Now button that allows customers to skip the cart and go directly to checkout.

LANGUAGE: text
CODE:
Website --> Configuration --> Settings --> Shop—Checkout Process\nEnable: Buy Now

----------------------------------------

TITLE: Specifying Python Package Requirements
DESCRIPTION: Defines exact dependency versions for Python packages using pip requirements format. Includes Pillow for image processing, mock for testing, and sphinx-lint for documentation quality checks.

LANGUAGE: pip
CODE:
Pillow==9.0.1
mock==5.0.1
sphinx-lint==0.6.7

----------------------------------------

TITLE: Creating RST Table for Contribution Types
DESCRIPTION: ReStructuredText table defining different contribution types for Odoo, their descriptions, relevant resources, and target audiences. The table uses list-table directive with header rows and specified column widths.

LANGUAGE: rst
CODE:
.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 20 35 25 20

   * - Contribution
     - Description
     - Resources
     - Target Audience
   * - Join the community
     - Participate in discussions on the forums, help answer questions, and assist other members of
       the Odoo community.
     - * `Odoo forums <https://www.odoo.com/forum>`_
     - Anyone interested in Odoo

----------------------------------------

TITLE: Creating a Basic Kanban View in Odoo XML
DESCRIPTION: Demonstrates the minimal structure required for a Kanban view in Odoo. It includes the kanban root element, templates section, and a basic field display.

LANGUAGE: xml
CODE:
<kanban>
    <templates>
        <t t-name="kanban-box">
            <div>
                <field name="name"/>
            </div>
        </t>
    </templates>
</kanban>

----------------------------------------

TITLE: Configuring Toctree for Odoo Documentation in reStructuredText
DESCRIPTION: This snippet configures a toctree for Odoo documentation. It sets options to hide the toctree, mark the page as orphaned, and includes a reference to an enterprise documentation file with a maximum depth of 4.

LANGUAGE: reStructuredText
CODE:
:nosearch:
:orphan:

.. toctree::
   :maxdepth: 4
   :hidden:

   enterprise_de

----------------------------------------

TITLE: Installing web_enterprise Module on Linux Source Installation
DESCRIPTION: This command installs the web_enterprise module for a source-based Odoo installation on Linux.

LANGUAGE: console
CODE:
$ -d <database_name> -i web_enterprise --stop-after-init

----------------------------------------

TITLE: Documentation Build Date RST Directive
DESCRIPTION: RST directives and header that displays the last documentation build date. Uses sphinx variables |version| and |today| to show version number and build date.

LANGUAGE: rst
CODE:
:orphan:
:nosearch:

===============
Last build date
===============

The last time the documentation was built in version |version| was on |today|.

----------------------------------------

TITLE: Get Results Request Format
DESCRIPTION: JSON-RPC2 request format for retrieving parsed document results using the document token.

LANGUAGE: javascript
CODE:
{
    "jsonrpc": "2.0",
    "method": "call",
    "params": {
        "version": int,
        "document_token": int,
        "account_token": string,
    },
    "id": string,
}

----------------------------------------

TITLE: Configuring Sphinx Toctree for Odoo Documentation
DESCRIPTION: ReStructuredText directives for configuring the documentation table of contents. Sets up a hidden toctree with maximum depth of 4 levels and includes a reference to enterprise_fr documentation.

LANGUAGE: rst
CODE:
:nosearch:
:orphan:

.. toctree::
   :maxdepth: 4
   :hidden:

   enterprise_fr

----------------------------------------

TITLE: Updating Database to Odoo Enterprise on Windows
DESCRIPTION: This command updates the specified database to use Odoo Enterprise by installing the web_enterprise module on a Windows system.

LANGUAGE: console
CODE:
$ ..\python\python.exe odoo-bin -d <database_name> -i web_enterprise --stop-after-init

----------------------------------------

TITLE: Chart of Accounts Category Structure RST
DESCRIPTION: Defines the main categories and numeric prefixes used in the Canadian Chart of Accounts system

LANGUAGE: rst
CODE:
- Receivable (1): balance of money due to business
- Payable (2): short-term obligations to creditors
- Equity (3,9): shareholders' return after liquidation
- Assets (1): items with economic value
- Liability (2): financial debts and obligations
- Income (4,6): net profit after expenses
- Expenses (6): operational costs

----------------------------------------

TITLE: Defining AccountFiscalPosition Model Fields in RST
DESCRIPTION: ReStructuredText documentation defining the fields and structure of the AccountFiscalPosition model in Odoo's accounting module. Lists all available fields including sequence, name, account mappings, tax mappings, and various filtering criteria.

LANGUAGE: rst
CODE:
.. _reference/account_fiscal_position:

===============
Fiscal Position
===============

.. automodel:: odoo.addons.account.models.partner.AccountFiscalPosition
    :main:

    .. autofield:: sequence
    .. autofield:: name
    .. autofield:: account_ids
    .. autofield:: tax_ids
    .. autofield:: note
    .. autofield:: auto_apply
    .. autofield:: vat_required
    .. autofield:: country_id
    .. autofield:: country_group_id
    .. autofield:: state_ids
    .. autofield:: zip_from
    .. autofield:: zip_to

----------------------------------------

TITLE: Configuring Sphinx Documentation Tree Structure
DESCRIPTION: Sphinx toctree directive configuration that defines a hidden documentation structure. Sets maximum depth to 4 levels and includes the terms_of_sale_es document.

LANGUAGE: rst
CODE:
:nosearch:
:orphan:

.. toctree::
   :maxdepth: 4
   :hidden:

   terms_of_sale_es

----------------------------------------

TITLE: Configuring Payment Terminals in Odoo POS Settings
DESCRIPTION: Instructions for enabling payment terminals in Odoo POS settings. Users need to navigate to the application settings and check the box for their specific terminal in the Payment Terminals section.

LANGUAGE: rst
CODE:
.. image:: terminals/payment-terminals.png
   :alt: checkbox in the settings to enable a payment terminal

----------------------------------------

TITLE: ReStructuredText Table of Contents for Web Framework
DESCRIPTION: ReStructuredText markup defining the documentation structure and navigation for Odoo web framework documentation, using toctree directive with titlesonly option.

LANGUAGE: rst
CODE:
:nosearch:
:hide-page-toc:

=============
Web framework
=============

.. toctree::
   :titlesonly:

   frontend/framework_overview
   frontend/assets
   frontend/javascript_modules
   frontend/owl_components
   frontend/registries
   frontend/services
   frontend/hooks
   frontend/patching_code
   frontend/error_handling
   frontend/javascript_reference
   frontend/mobile
   frontend/qweb
   frontend/odoo_editor

----------------------------------------

TITLE: Documentation Dependencies Requirements File
DESCRIPTION: Specifies the exact versions of Python packages required for documentation generation. Centers around Sphinx documentation generator and its extensions, with additional support for syntax highlighting and CSS preprocessing.

LANGUAGE: plaintext
CODE:
docutils==0.17.0
libsass==0.20.1
pygments~=2.6.1
pygments-csv-lexer~=0.1
sphinx==4.3.2
sphinxcontrib-applehelp==1.0.4
sphinxcontrib-devhelp==1.0.2
sphinxcontrib-htmlhelp==2.0.1
sphinxcontrib-serializinghtml==1.1.5
sphinxcontrib-qthelp==1.0.3
sphinx-tabs==3.4.5  # Compatibility with docutils==0.17.0

----------------------------------------

TITLE: Creating Custom View Arch Parser in JavaScript
DESCRIPTION: Defines a custom arch parser class (BeautifulArchParser) that parses the XML arch of the view to extract relevant information.

LANGUAGE: javascript
CODE:
import { XMLParser } from "@web/core/utils/xml";

export class BeautifulArchParser extends XMLParser {
    parse(arch) {
        const xmlDoc = this.parseXML(arch);
        const fieldFromTheArch = xmlDoc.getAttribute("fieldFromTheArch");
        return {
            fieldFromTheArch,
        };
    }
}

----------------------------------------

TITLE: Configuring Argentina Electronic Invoice Credentials
DESCRIPTION: Code snippet showing how to configure the AFIP environment and certificate for electronic invoicing in Argentina

LANGUAGE: python
CODE:
# Select AFIP environment
self.env['ir.config_parameter'].sudo().set_param('l10n_ar.afip.ws.env', 'prod') # or 'test'

# Upload AFIP certificate
certificate = self.env['l10n_ar.afip.certificate'].create({
    'crt': certificate_content,
    'key': private_key_content,
    'company_id': company.id,
})

----------------------------------------

TITLE: Configuring Sphinx Documentation Structure with Toctree Directive
DESCRIPTION: RST configuration that sets up the documentation structure using Sphinx directives. Defines document properties and creates a table of contents tree with maxdepth of 3 levels, including key Odoo reference sections.

LANGUAGE: rst
CODE:
:nosearch:
:show-content:
:show-toc:
:hide-page-toc:

=========
Reference
=========

.. toctree::
   :maxdepth: 3

   reference/backend
   reference/frontend
   reference/user_interface
   reference/standard_modules
   reference/cli
   reference/upgrades
   reference/external_api
   reference/extract_api

----------------------------------------

TITLE: Setting up Odoo Tutorial Environment
DESCRIPTION: Instructions for setting up the development environment by cloning the Odoo tutorials repository, configuring the addons path, and installing required modules.

LANGUAGE: rst
CODE:
#. Clone the `official Odoo tutorials repository <https://github.com/odoo/tutorials>`_ and switch to
   the branch `{CURRENT_MAJOR_BRANCH}`.
#. Add the cloned repository to your :option:`--addons-path <odoo-bin --addons-path>`.
#. Start a new Odoo database and install the modules for each chapter that you want to work on:
   `awesome_clicker` (for chapter 1), `awesome_fields` (for chapter 2), `awesome_gallery` (for chapter 3) or `awesome_kanban` (for chapter 4).

----------------------------------------

TITLE: Defining Advanced Documentation Structure in RST
DESCRIPTION: A reStructuredText toctree directive that defines the structure and navigation for advanced Odoo documentation sections. Includes links to containers, submodules, and frequent technical questions documentation.

LANGUAGE: rst
CODE:
:nosearch:

========
Advanced
========

.. toctree::
   :titlesonly:

   advanced/containers
   advanced/submodules
   advanced/frequent_technical_questions

----------------------------------------

TITLE: Loading Country States Data in CSV (Odoo)
DESCRIPTION: Example of a CSV file used to load country states data in Odoo. It demonstrates the structure for defining external identifiers, references, and model fields.

LANGUAGE: csv
CODE:
"id","country_id:id","name","code"
state_au_1,au,"Australian Capital Territory","ACT"
state_au_2,au,"New South Wales","NSW"
state_au_3,au,"Northern Territory","NT"
state_au_4,au,"Queensland","QLD"
...

----------------------------------------

TITLE: Setting Odoo System Parameter for Azure OAuth
DESCRIPTION: This snippet shows how to set up a required system parameter in Odoo for Azure OAuth authentication. It involves creating a new system parameter with a specific key and value.

LANGUAGE: python
CODE:
# In Odoo, go to Settings -> Technical -> System Parameters
# Create a new parameter with:
Key = "auth_oauth.authorization_header"
Value = "1"

----------------------------------------

TITLE: Defining Odoo Documentation Structure with reStructuredText
DESCRIPTION: This snippet uses reStructuredText to create a table of contents for the Odoo documentation. It includes directives for disabling search and defining the main documentation sections.

LANGUAGE: reStructuredText
CODE:
:nosearch:

==================
Odoo Documentation
==================


.. toctree::

    applications
    administration
    developer
    contributing

----------------------------------------

TITLE: Creating Menu Item for Odoo Action in XML
DESCRIPTION: Defines a menu item that links to a previously defined action, allowing access to the model's views.

LANGUAGE: xml
CODE:
<menuitem id="test_model_menu_action" action="test_model_action"/>

----------------------------------------

TITLE: ReStructuredText Table of Contents
DESCRIPTION: A ReStructuredText directive defining the documentation structure for Odoo general settings sections.

LANGUAGE: rst
CODE:
.. toctree::

    general/apps_modules
    general/users
    general/companies
    general/multi_company
    general/iot
    general/email_communication
    general/integrations
    general/developer_mode

----------------------------------------

TITLE: Tax Report XML Structure
DESCRIPTION: Example XML structure for defining a tax report in an Odoo localization module.

LANGUAGE: xml
CODE:
<odoo>
    <record id="tax_report" model="account.report">
        <field name="name">Tax Report</field>
        <field name="root_report_id" ref="account.generic_tax_report"/>
        <field name="country_id" ref="base.XX"/>
    </record>
</odoo>

----------------------------------------

TITLE: Calculating Legal Time Off Entitlement
DESCRIPTION: Formula for calculating an employee's legal time off entitlement based on months worked in the previous year

LANGUAGE: plaintext
CODE:
Days = (Months worked * 2 / 6) * 5

----------------------------------------

TITLE: Configuring Sphinx toctree for Odoo Documentation
DESCRIPTION: Sets up a table of contents tree (toctree) for Sphinx documentation. It specifies a maximum depth of 4, enables numbering, and includes a 'partnership' document. The ':nosearch:' and ':orphan:' directives are used to exclude this page from search results and suppress warnings about it not being included in any toctree.

LANGUAGE: reStructuredText
CODE:
:nosearch:
:orphan:

.. toctree::
   :maxdepth: 4
   :numbered:

   partnership

----------------------------------------

TITLE: Custom Kanban View Template in XML
DESCRIPTION: Defines a custom XML template for the kanban view by inheriting from the default KanbanView template and adding a new div element before the Layout component.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<templates>
    <t t-name="my_module.CustomKanbanView" t-inherit="web.KanbanView">
        <xpath expr="//Layout" position="before">
            <div>
                Hello world !
            </div>
        </xpath>
    </t>
</templates>

----------------------------------------

TITLE: Configuring Redirect Rule Format
DESCRIPTION: Demonstrates the basic format for redirect rules in .txt files. Rules consist of the old file path and new file path, with an optional comment.

LANGUAGE: text
CODE:
path/to/old/file.rst path/to/new/file.rst  # optional comment

----------------------------------------

TITLE: Creating XPath Template Extension in XML
DESCRIPTION: XML code snippet showing how to extend a kanban view template using XPath to add a new div before the renderer component.

LANGUAGE: xml
CODE:
<xpath expr="//t[@t-component='props.Renderer']" position="before">
   ...
</xpath>

----------------------------------------

TITLE: Generating Table of Contents in RST for Odoo Setup Documentation
DESCRIPTION: This RST code snippet creates a table of contents for the Odoo setup documentation. It uses the 'toctree' directive with 'titlesonly' and 'glob' options to include specific setup-related pages.

LANGUAGE: rst
CODE:
:nosearch:

=====
Setup
=====

.. toctree::
   :titlesonly:
   :glob:

   setup/device_troubleshooting
   setup/hardware
   setup/software

----------------------------------------

TITLE: Example Redirect Rules
DESCRIPTION: Shows real-world examples of redirect rules for different scenarios including file renames, moves, and merges.

LANGUAGE: text
CODE:
contributing/documentation/guidelines.rst contributing/documentation/rst_guidelines.rst
developer/misc/guidelines.rst contributing/develop/guidelines.rst  # Move all guidelines in contributing/
administration/install/odoo_sh.rst administration/odoo_sh.rst  # Move all information related to Odoo.sh on a single page

----------------------------------------

TITLE: Defining Tax Repartition Model Fields in RST
DESCRIPTION: RST documentation defining the key fields of the AccountTaxRepartitionLine model including factor percentage, repartition type, document type, account references, tax references, tag IDs and tax closing usage.

LANGUAGE: rst
CODE:
.. automodel:: odoo.addons.account.models.account_tax.AccountTaxRepartitionLine
    :main:

    .. autofield:: factor_percent
    .. autofield:: repartition_type
    .. autofield:: document_type
    .. autofield:: account_id
    .. autofield:: tax_id
    .. autofield:: tag_ids
    .. autofield:: use_in_tax_closing

----------------------------------------

TITLE: Apache License 2.0 Boilerplate Notice
DESCRIPTION: Standard boilerplate notice template for applying the Apache License 2.0 to software projects. Includes copyright notice and conditions text that should be included in project files.

LANGUAGE: text
CODE:
Copyright {yyyy} {name of copyright owner}

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

----------------------------------------

TITLE: RST Table of Contents for Accounting Documentation
DESCRIPTION: ReStructuredText markup defining the documentation structure for Odoo accounting components. Uses toctree directive to organize documentation sections.

LANGUAGE: rst
CODE:
:nosearch:

==========
Accounting
==========

.. toctree::
    :titlesonly:

    account/account_account_tag
    account/account_account
    account/account_fiscal_position
    account/account_group
    account/account_report
    account/account_report_line
    account/account_tax
    account/account_tax_repartition

----------------------------------------

TITLE: RST Documentation Structure with References
DESCRIPTION: RST documentation file containing section references, admonitions, and replacements for manufacturing-related abbreviations. The document outlines continuous improvement workflows in Odoo.

LANGUAGE: rst
CODE:
.. |MO| replace:: :abbr:`MO (Manufacturing Order)`
.. |MOs| replace:: :abbr:`MOs (Manufacturing Orders)`
.. |BoM| replace:: :abbr:`BoM (Bill of Materials)`
.. |ECO| replace:: :abbr:`ECO (Engineering Change Order)`
.. |QCP| replace:: :abbr:`QCP (Quality Control Point)`
.. |PLM| replace:: :abbr:`PLM (Product Lifecycle Management)`
.. |BoMs| replace:: :abbr:`BoMs (Bills of Materials)`

----------------------------------------

TITLE: Directory Structure Changes Documentation
DESCRIPTION: Documents file path changes across administration, contributing, developer and support sections, with comments indicating reasons for changes.

LANGUAGE: plaintext
CODE:
# administration/

administration/odoo_sh/documentation.rst administration/odoo_sh.rst # moved during doc-apocalypse (#945)

# contributing/

contributing/documentation/introduction_guide.rst contributing/documentation.rst  # flatten hierarchy: introduction_guide --> ../

# developer/

developer/misc/api/upgrade.rst administration/upgrade/process.rst  # removed incorrect page
developer/webservices/upgrade.rst administration/upgrade/process.rst  # removed incorrect page

# others

support/user_doc.rst contributing/documentation/introduction_guide.rst  # removed in forward-port of #544 (b109c3af)

----------------------------------------

TITLE: Calculating Forecasted Stock in Odoo MPS
DESCRIPTION: This equation demonstrates how the Forecasted Stock is calculated in the Master Production Schedule, considering Forecasted Demand and Suggested Replenishment.

LANGUAGE: restructuredtext
CODE:
.. math::
   \text{Forecasted Demand} + \text{Suggested Replenishment} = \text{Forecasted Stock}

----------------------------------------

TITLE: RST Card Definition for Mailing Lists
DESCRIPTION: RST card definition showing navigation options for mailing lists functionality

LANGUAGE: rst
CODE:
.. card:: Mailing lists
   :target: email_marketing/mailing_lists

   Silo contacts into specific mailing lists.

----------------------------------------

TITLE: Displaying Nested Articles in Odoo Knowledge using RST
DESCRIPTION: This RST code snippet shows a table of commands available in the Odoo Knowledge app, including the 'Index' command for displaying nested articles.

LANGUAGE: rst
CODE:
.. tabs::

      .. list-table::
         :widths: 20 80
         :header-rows: 1
         :stub-columns: 1

         * - Command
           - Use
         * - :guilabel:`Index`
           - Show nested articles: Display the child pages of the parent article.
         * - :guilabel:`Item Kanban`
           - Insert a Kanban view and create items.
         * - :guilabel:`Item Cards`
           - Insert a Card view and create items.
         * - :guilabel:`Item List`
           - Insert a List view and create items.
         * - :guilabel:`Item Calendar`
           - Insert a Calendar view and create items.

----------------------------------------

TITLE: Managing Spreadsheet Templates in Odoo
DESCRIPTION: Instructions for managing templates, including copying, editing, and deleting. These actions are performed through the Configuration menu in the Documents app.

LANGUAGE: reStructuredText
CODE:
Manage templates by going to :menuselection:`Documents --> Configuration --> Spreadsheet Templates`.
Remove the :guilabel:`My Templates` :ref:`filter <search/preconfigured-filters>` to view all
templates in the database.

Various actions are possible:

- Copy an existing template by clicking :icon:`fa-clone` :guilabel:`Make a copy` at the right of
  the screen. The new template appears at the bottom of the list. Click the :guilabel:`Name` to
  edit it.

- Edit an existing template (including one you just copied) by clicking :icon:`fa-pencil`
  :guilabel:`Edit`, then making the required changes. Modifications are
  automatically saved.

- Delete a template by ticking the checkbox next to it, clicking :icon:`fa-cog`
  :guilabel:`Actions`, then :guilabel:`Delete`.

----------------------------------------

TITLE: RST Documentation Structure
DESCRIPTION: ReStructuredText format defining the documentation structure for Odoo lead acquisition features with a table of contents directive.

LANGUAGE: rst
CODE:
:nosearch:

=============
Acquire leads
=============

.. toctree::
   :titlesonly:

   acquire_leads/convert
   acquire_leads/opportunities_form
   acquire_leads/email_manual
   acquire_leads/send_quotes
   acquire_leads/lead_mining

----------------------------------------

TITLE: RST Table of Contents for Pricing Documentation
DESCRIPTION: ReStructuredText directive defining the documentation structure for pricing management topics in Odoo.

LANGUAGE: rst
CODE:
:nosearch:

===================
Manage your pricing
===================

.. toctree::
   :titlesonly:

   prices/pricing
   prices/currencies
   prices/discounts

----------------------------------------

TITLE: RST Documentation Structure for Odoo Helpdesk Time Tracking
DESCRIPTION: Structured documentation with sections covering configuration, prepaid services, and post-paid services billing in Odoo Helpdesk. Includes detailed steps for enabling features, creating products, and managing timesheets.

LANGUAGE: rst
CODE:
===================
Track and bill time
===================

Odoo *Helpdesk* provides teams with the ability to track the amount of hours spent working on a
ticket, and to bill a customer for that time.

----------------------------------------

TITLE: Defining Table of Contents in ReStructuredText for Odoo Overview
DESCRIPTION: This snippet defines a table of contents (toc) for the overview section of the Odoo documentation. It uses the 'titlesonly' option and includes a link to the time off module overview.

LANGUAGE: restructuredtext
CODE:
:nosearch:

========
Overview
========

.. toctree::
   :titlesonly:

   overview/time_off

----------------------------------------

TITLE: RST Table of Contents Configuration
DESCRIPTION: ReStructuredText toctree directive defining the configuration documentation structure for Odoo. Uses titlesonly option to display only top-level headings.

LANGUAGE: rst
CODE:
.. toctree::
   :titlesonly:

   configuration/domain_names
   configuration/address_autocomplete
   configuration/google_search_console
   configuration/cookies_bar
   configuration/translate
   configuration/multi_website
   configuration/spam_protection
   configuration/cdn

----------------------------------------

TITLE: Configuring Table of Contents and Document Properties in reStructuredText
DESCRIPTION: This snippet sets up the table of contents and document properties for the Odoo project documentation. It uses the 'toctree' directive to specify the maximum depth and hidden status of the table of contents, and includes a reference to the 'partnership_es' document.

LANGUAGE: reStructuredText
CODE:
:nosearch:
:orphan:

.. toctree::
   :maxdepth: 4
   :hidden:

   partnership_es

----------------------------------------

TITLE: RST Example Block
DESCRIPTION: ReStructuredText directive providing a detailed example of lead time calculation for a bicycle retailer scenario.

LANGUAGE: rst
CODE:
.. example::
   Bike retailer *Mike's Bikes* works with a subcontractor — *Bike Friends* — to produce units of
   their *Tricycle* product.

   On average, Bike Friends requires three days to manufacture a tricycle, plus an additional two
   days to deliver it to Mike's Bikes.

   As a result, Mike's Bikes sets a delivery lead time of five days for tricycles manufactured by
   Bike Friends: three days for manufacturing, plus two days for delivery.

----------------------------------------

TITLE: Calculating First In First Out (FIFO) in Odoo
DESCRIPTION: Example of how unit cost and inventory value are calculated using the First In First Out (FIFO) method in Odoo. This snippet shows the calculations performed at each step of inventory movement.

LANGUAGE: python
CODE:
# When receiving four products for $16 each:

# Inventory value calculation
inventory_value = 80 + (4 * 16)  # $144

# Unit cost calculation
unit_cost = 144 / 12  # $12

# When delivering ten products
incoming_value = (-8 * 10) + (-2 * 16)  # -112
inventory_value = 144 - 112  # $32
unit_cost = 32 / 2  # $16

# Receive two products for $6
inventory_value = 32 + 12  # $44
unit_cost = 44 / 4  # $11

----------------------------------------

TITLE: Setting Default Incoterm in Odoo Configuration
DESCRIPTION: This snippet demonstrates the menu path to access the configuration settings for setting a default Incoterm in Odoo. It specifies the location of the Default Incoterm field within the Customer Invoices section of the Accounting/Invoicing settings.

LANGUAGE: python
CODE:
Accounting/Invoicing --> Configuration --> Settings

----------------------------------------

TITLE: Demonstrating Internal Transfer Accounting Entries in Odoo RST
DESCRIPTION: This RST code snippet shows the accounting entries for a $1000 internal transfer from Bank A to Bank B in Odoo. It illustrates how the internal transfer account is used to balance the transactions in both bank journals.

LANGUAGE: rst
CODE:
.. example::
   Take, for example, a transfer of $1000 from Bank A to Bank B:

   - Bank journal (Bank A)

     .. list-table::
        :header-rows: 1
        :stub-columns: 1

        * - **Account**
          - **Debit**
          - **Credit**
        * - Bank A account
          -
          - $1,000
        * - **Internal transfer account**
          - **$1,000**
          -

   - Bank journal (Bank B)


     .. list-table::
        :header-rows: 1
        :stub-columns: 1

        * - **Account**
          - **Debit**
          - **Credit**
        * - Bank B account
          - $1,000
          -
        * - **Internal transfer account**
          -
          - **$1,000**

----------------------------------------

TITLE: RST Documentation Structure for IAP Services
DESCRIPTION: ReStructuredText documentation detailing Odoo's In-app Purchases system, including service descriptions, credit management, and usage instructions.

LANGUAGE: rst
CODE:
======================
In-app purchases (IAP)
======================

.. |IAP| replace:: :abbr:`IAP (In-app purchases)`

In-app purchases (IAP) are optional services that enhance Odoo databases. Each service provides its
own specific features and functionality.

----------------------------------------

TITLE: Defining Table of Contents for Odoo Essentials in reStructuredText
DESCRIPTION: This snippet defines a table of contents for Odoo essentials documentation using reStructuredText syntax. It includes links to various essential topics within the Odoo ecosystem.

LANGUAGE: restructuredtext
CODE:
===============
Odoo essentials
===============

.. toctree::

   essentials/activities
   essentials/reporting
   essentials/search
   essentials/html_editor
   essentials/contacts
   essentials/export_import_data
   essentials/in_app_purchase
   essentials/keyboard_shortcuts

----------------------------------------

TITLE: Documenting PaymentProvider Class Methods in Python for Odoo
DESCRIPTION: This snippet outlines the structure of the PaymentProvider class documentation in Odoo. It includes method references for computing feature support, getting compatible providers, handling redirect forms, validation, tokenization, and inline form building.

LANGUAGE: Python
CODE:
class PaymentProvider():
    def _compute_feature_support_fields(self):
        pass

    def _get_compatible_providers(self):
        pass

    def _get_redirect_form_view(self):
        pass

    def _get_validation_amount(self):
        pass

    def _get_validation_currency(self):
        pass

    def _is_tokenization_required(self):
        pass

    def _should_build_inline_form(self):
        pass

    def _get_removal_values(self):
        pass

----------------------------------------

TITLE: Defining RST Table of Contents for Payment Documentation
DESCRIPTION: RST directive for creating a table of contents that links to payment-related documentation pages including payment methods, providers, tokens, and transactions.

LANGUAGE: rst
CODE:
.. toctree::
   :titlesonly:

   payment/payment_method
   payment/payment_provider
   payment/payment_token
   payment/payment_transaction

----------------------------------------

TITLE: Defining AccountReport Model in Odoo
DESCRIPTION: This snippet shows the structure of the AccountReport model in Odoo's account module. It includes various fields and filters that can be applied to the report.

LANGUAGE: python
CODE:
class AccountReport(models.Model):
    name = fields.Char()
    line_ids = fields.One2many()
    column_ids = fields.One2many()
    root_report_id = fields.Many2one()
    country_id = fields.Many2one()
    only_tax_exigible = fields.Boolean()
    availability_condition = fields.Char()
    load_more_limit = fields.Integer()
    search_bar = fields.Boolean()
    default_opening_date_filter = fields.Char()
    filter_multi_company = fields.Boolean()
    filter_date_range = fields.Boolean()
    filter_show_draft = fields.Boolean()
    filter_unreconciled = fields.Boolean()
    filter_unfold_all = fields.Boolean()
    filter_period_comparison = fields.Boolean()
    filter_growth_comparison = fields.Boolean()
    filter_journals = fields.Boolean()
    filter_analytic = fields.Boolean()
    filter_hierarchy = fields.Boolean()
    filter_account_type = fields.Boolean()
    filter_partner = fields.Boolean()
    filter_fiscal_position = fields.Boolean()

----------------------------------------

TITLE: Documenting AccountAccount Model Fields in RST
DESCRIPTION: ReStructuredText documentation that defines the structure and fields of the AccountAccount model in Odoo. Documents essential fields including name, currency_id, code, account_type, reconcile status, notes, tax IDs and tag IDs.

LANGUAGE: rst
CODE:
.. _reference/account_account:

=======
Account
=======

.. automodel:: odoo.addons.account.models.account_account.AccountAccount
    :main:

    .. autofield:: name
    .. autofield:: currency_id
    .. autofield:: code
    .. autofield:: account_type
    .. autofield:: reconcile
    .. autofield:: note
    .. autofield:: tax_ids
    .. autofield:: tag_ids

----------------------------------------

TITLE: Calculating Average Cost (AVCO) in Odoo
DESCRIPTION: Example of how unit cost and inventory value are calculated using the Average Cost (AVCO) method in Odoo. This snippet demonstrates the mathematical operations performed at each step of inventory movement.

LANGUAGE: python
CODE:
# When receiving four products for $16 each:

# Inventory value calculation
inventory_value = 80 + (4 * 16)  # $144

# Unit cost calculation
unit_cost = 144 / 12  # $12

# When delivering ten products
inventory_value = 144 + (-10 * 12)  # $24

# Receive two products for $6 each
inventory_value = 24 + (2 * 6)  # $36
unit_cost = 36 / 4  # $9

----------------------------------------

TITLE: Calculating Average Cost (AVCO) in Odoo
DESCRIPTION: Example of how unit cost and inventory value are calculated using the Average Cost (AVCO) method in Odoo. This snippet demonstrates the mathematical operations performed at each step of inventory movement.

LANGUAGE: python
CODE:
# When receiving four products for $16 each:

# Inventory value calculation
inventory_value = 80 + (4 * 16)  # $144

# Unit cost calculation
unit_cost = 144 / 12  # $12

# When delivering ten products
inventory_value = 144 + (-10 * 12)  # $24

# Receive two products for $6 each
inventory_value = 24 + (2 * 6)  # $36
unit_cost = 36 / 4  # $9

----------------------------------------

TITLE: RST Documentation Structure for Task Management
DESCRIPTION: ReStructuredText markup defining the documentation structure for task management features in Odoo. Uses toctree directive to organize child pages.

LANGUAGE: rst
CODE:
:nosearch:

===============
Task management
===============

.. toctree::
   :titlesonly:

   tasks/task_stages_statuses
   tasks/task_creation
   tasks/recurring_tasks
   tasks/sub-tasks
   tasks/task_dependencies

----------------------------------------

TITLE: RST Documentation Structure for Task Management
DESCRIPTION: ReStructuredText markup defining the documentation structure for task management features in Odoo. Uses toctree directive to organize child pages.

LANGUAGE: rst
CODE:
:nosearch:

===============
Task management
===============

.. toctree::
   :titlesonly:

   tasks/task_stages_statuses
   tasks/task_creation
   tasks/recurring_tasks
   tasks/sub-tasks
   tasks/task_dependencies

----------------------------------------

TITLE: RST Note and Example Blocks
DESCRIPTION: RST markup for creating note and example blocks with specific formatting and indentation in the documentation.

LANGUAGE: rst
CODE:
.. note::
   Unless otherwise indicated, multiple selections can be made for each field.

.. example::
   A support team needs to address urgent issues for VIP customers within one business day.

----------------------------------------

TITLE: Image Reference for Itsme Identification
DESCRIPTION: RST image directive showing Itsme identification interface.

LANGUAGE: RST
CODE:
.. image:: sign/itsme-identification.png
   :alt: select customer identified with itsme®

----------------------------------------

TITLE: RST Documentation Structure for Product Management
DESCRIPTION: ReStructuredText markup defining the documentation structure for Odoo product management, including a table of contents with links to product-related documentation sections.

LANGUAGE: rst
CODE:
:nosearch:

====================
Manage your products
====================

.. toctree::
   :titlesonly:

   products/import
   products/variants
   products/product_images

----------------------------------------

TITLE: Configuring Automatic Payments for Subscriptions in Odoo
DESCRIPTION: This snippet details how to set up automatic payments for subscriptions in Odoo, including requiring pre-payment and selecting payment providers with tokenization features.

LANGUAGE: restructuredtext
CODE:
You can require the customer to set an automatic payment method and pre-pay the subscription's first
occurrence before they can confirm their quotation. To do so, go to the :guilabel:`Other Info` tab
of the quotation and check the :guilabel:`Payment` option in the :guilabel:`Online confirmation`
field.

If you leave :guilabel:`Payment` unchecked, the customer doesn't have to pre-pay to start the
subscription. This means that the payment is not automatic and that the customer must pay each
invoice manually.

.. important::
   If the online confirmation requires a pre-payment, your customer can select only the
   :ref:`payment providers <payment_providers/supported_providers>` that have the :ref:`tokenization
   feature <payment_providers/tokenization>`. This ensures that the customer is automatically
   charged at each new period.

----------------------------------------

TITLE: Defining Table of Contents for Odoo Reporting Documentation in reStructuredText
DESCRIPTION: This snippet creates a table of contents for Odoo's reporting documentation using reStructuredText syntax. It includes links to various reporting modules such as forecast, stock, locations, moves history, and aging.

LANGUAGE: rst
CODE:
:nosearch:

=========
Reporting
=========

.. toctree::
   :titlesonly:

   reporting/forecast
   reporting/stock
   reporting/locations
   reporting/moves_history
   reporting/aging

----------------------------------------

TITLE: Defining RST Documentation Structure for Quality Control
DESCRIPTION: RestructuredText markup defining the table of contents structure for quality control documentation, using toctree directive with titlesonly option.

LANGUAGE: rst
CODE:
:nosearch:

======================
Quality control basics
======================

.. toctree::
   :titlesonly:

   quality_management/quality_control_points
   quality_management/quality_alerts
   quality_management/quality_checks
   quality_management/failure_locations

----------------------------------------

TITLE: Adding Mail Chatter to Form View
DESCRIPTION: XML view definition to add chatter widget to a form view with options for attachments and reloading.

LANGUAGE: xml
CODE:
<record id="business_trip_form" model="ir.ui.view">
    <field name="name">business.trip.form</field>
    <field name="model">business.trip</field>
    <field name="arch" type="xml">
        <form string="Business Trip">
            <!-- Form view content -->
            <chatter open_attachments="True"/>
        </form>
    </field>
</record>

----------------------------------------

TITLE: Field Aggregator Attribute Update
DESCRIPTION: Renaming of group_operator attribute to aggregator in Field class for version 17.2.

LANGUAGE: python
CODE:
# Old usage:
field = fields.Float(group_operator='sum')

# New usage:
field = fields.Float(aggregator='sum')

----------------------------------------

TITLE: Deprecation Notice - name_get Method
DESCRIPTION: Documentation of the deprecation of name_get method in favor of display_name field in Odoo 16.4.

LANGUAGE: python
CODE:
# Deprecated:
name_get()

# New usage:
record.display_name

----------------------------------------

TITLE: Setting Required Fields in Odoo XML
DESCRIPTION: Demonstrates how to use the 'required' attribute in Odoo XML field definitions. It shows both a simple boolean value and a conditional Python expression to determine if a field is required.

LANGUAGE: xml
CODE:
<field name="fname_a" required="True"/>
<field name="fname_b" required="fname_c != 3"/>

----------------------------------------

TITLE: Setting Readonly Field Attributes in Odoo XML
DESCRIPTION: Demonstrates how to set the readonly attribute for Odoo fields using both static boolean values and dynamic Python expressions. Shows two examples: one with a simple True value and another with a complex condition based on field references.

LANGUAGE: xml
CODE:
<field name="fname_a" readonly="True"/>
<field name="fname_b" readonly="name_a in [fname_b, parent.fname_d]"/>

----------------------------------------

TITLE: Defining Button Text in Odoo XML Views
DESCRIPTION: This snippet demonstrates how to use the 'string' attribute to set the text of a button in an Odoo XML view. The 'string' attribute defines the button's text when there is no icon, or serves as alt text for the icon if present.

LANGUAGE: xml
CODE:
<button type="object" name="action_create_new" string="Create document"/>

----------------------------------------

TITLE: Setting Translatable String with t-attf- in Odoo XML
DESCRIPTION: Demonstrates how to set a translatable string using t-attf- attribute in Odoo XML. This method is preferred over t-att- for creating translatable strings.

LANGUAGE: xml
CODE:
<div t-attf-title="Hello #{user.name}" />

----------------------------------------

TITLE: Using Custom Shape in XML Pages
DESCRIPTION: Example of how to use a custom shape in XML pages, including optional color redefinition.

LANGUAGE: xml
CODE:
<section class="..." data-oe-shape-data="{'shape': 'illustration/hexagons/01', 'colors': 'c4': '#8595A2', 'c5': 'rgba(0, 255, 0)'}">\n    <div class="o_we_shape o_illustration_hexagons_01"/>\n    <div class="container">\n        <!-- Content -->\n    </div>\n</section>

----------------------------------------

TITLE: Replacing Default 404 Page Content in Odoo
DESCRIPTION: This XML snippet demonstrates how to replace the content of the default 404 page in Odoo using XPath. It sets a custom title and allows for custom content.

LANGUAGE: xml
CODE:
<template id="404" inherit_id="http_routing.404">
    <xpath expr="//*[@id='wrap']" position="replace">
        <t t-set="additional_title" t-value="'404 - Not found'"/>

        <div id="wrap" class="oe_structure">
            <!-- Content -->
        </div>
    </xpath>
</template>

----------------------------------------

TITLE: Adding Background Video in Odoo
DESCRIPTION: This snippet demonstrates how to add a background video to a section in Odoo. It uses the 'o_background_video' class and 'data-bg-video-src' attribute to specify the video source.

LANGUAGE: xml
CODE:
<section class="o_background_video" data-bg-video-src="...">
    <!-- Content -->
</section>

----------------------------------------

TITLE: Website Background Color Configuration
DESCRIPTION: SCSS configuration for defining website background colors using Odoo's color palette system.

LANGUAGE: scss
CODE:
$o-color-palettes: map-merge($o-color-palettes,
   (
      'airproof': (
         'o-cc1-bg':                     'o-color-5',
         'o-cc5-bg':                     'o-color-1',
      ),
    )
);

----------------------------------------

TITLE: Implementing Form Success Handling in Odoo
DESCRIPTION: Examples of handling form submission success through redirection or message display. Includes configuration for success page redirection and custom success message implementation.

LANGUAGE: xml
CODE:
<form data-success-mode="redirect" data-success-page="/contactus-thank-you">

LANGUAGE: xml
CODE:
<form data-success-mode="message">

LANGUAGE: xml
CODE:
<div class="s_website_form_end_message d-none">
     <div class="oe_structure">
          <section class="s_text_block pt64 pb64" data-snippet="s_text_block">
               <div class="container">
                     <h2 class="text-center">This is a success!</h2>
               </div>
          </section>
     </div>
</div>

----------------------------------------

TITLE: Implementing Appearance Animation in Odoo XML
DESCRIPTION: Example of implementing an appearance animation on a column element. The animation fades in from bottom with customizable duration, delay, and intensity parameters.

LANGUAGE: xml
CODE:
<div class="col-lg-6 o_animate o_anim_fade_in o_animate_both_scroll o_anim_from_bottom" style="--wanim-intensity: 100; animation-duration: 2s; animation-delay: 1s;">
    <h2>A Section Subtitle</h2>
    <p>Write one or two paragraphs describing your product or services.</p>
</div>

----------------------------------------

TITLE: Defining Client Action Template in XML for Odoo
DESCRIPTION: This snippet shows the XML template definition for the client action. It creates a simple 'Hello world' message using Odoo's templating system.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<templates xml:space="preserve">
    <t t-name="awesome_tshirt.clientaction">
        Hello world
    </t>
</templates>

----------------------------------------

TITLE: RST Section Headers
DESCRIPTION: Section header formatting for major features of the Chatter documentation using RST syntax.

LANGUAGE: rst
CODE:
=======
Chatter
=======

Chatter thread
==============

Add followers
=============

Manage followers
----------------

----------------------------------------

TITLE: RST Section Headers
DESCRIPTION: Section header formatting for major features of the Chatter documentation using RST syntax.

LANGUAGE: rst
CODE:
=======
Chatter
=======

Chatter thread
==============

Add followers
=============

Manage followers
----------------