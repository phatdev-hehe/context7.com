TITLE: Automating Chrome Search with Puppeteer in TypeScript
DESCRIPTION: This example demonstrates how to use Puppeteer to automate a search on developer.chrome.com, including launching a browser, navigating to a page, performing a search, clicking results, and extracting content. The script showcases core Puppeteer features like page navigation, element selection, typing, and content extraction.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  // Launch the browser and open a new blank page
  const browser = await puppeteer.launch();
  const page = await browser.newPage();

  // Navigate the page to a URL
  await page.goto('https://developer.chrome.com/');

  // Set screen size
  await page.setViewport({width: 1080, height: 1024});

  // Type into search box
  await page.type('.devsite-search-field', 'automate beyond recorder');

  // Wait and click on first result
  const searchResultSelector = '.devsite-result-item-link';
  await page.waitForSelector(searchResultSelector);
  await page.click(searchResultSelector);

  // Locate the full title with a unique string
  const textSelector = await page.waitForSelector(
    'text/Customize and automate',
  );
  const fullTitle = await textSelector?.evaluate(el => el.textContent);

  // Print the full title
  console.log('The title of this blog post is "%s".', fullTitle);

  await browser.close();
})();

----------------------------------------

TITLE: Launching Browser Instance with Puppeteer in TypeScript
DESCRIPTION: Function signature for launching a new browser instance in Puppeteer. Takes optional LaunchOptions as parameters and returns a Promise that resolves to a Browser instance.

LANGUAGE: typescript
CODE:
launch: (options?: PuppeteerCore.LaunchOptions) => Promise<PuppeteerCore.Browser>;

----------------------------------------

TITLE: Creating Locator with Selector in Puppeteer (TypeScript)
DESCRIPTION: This snippet shows the signature for creating a locator using a selector. It allows querying the page for elements using various selector types, including CSS selectors and Puppeteer-specific selectors.

LANGUAGE: typescript
CODE:
class Page {
  locator<Selector extends string>(
    selector: Selector,
  ): Locator<NodeFor<Selector>>;
}

----------------------------------------

TITLE: Creating a Page with Puppeteer in TypeScript
DESCRIPTION: This example demonstrates how to use a Browser instance to create a new Page, navigate to a URL, and then close the browser. It shows the basic workflow of using Puppeteer to automate browser actions.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();
const page = await browser.newPage();
await page.goto('https://example.com');
await browser.close();

----------------------------------------

TITLE: Basic Puppeteer Usage Example in TypeScript
DESCRIPTION: Demonstrates how to use Puppeteer to launch a browser, navigate to a web page, interact with elements, and extract content. This example includes launching Chrome, navigating to a URL, typing into a search box, clicking a result, and extracting text content.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';
// Or import puppeteer from 'puppeteer-core';

// Launch the browser and open a new blank page
const browser = await puppeteer.launch();
const page = await browser.newPage();

// Navigate the page to a URL.
await page.goto('https://developer.chrome.com/');

// Set screen size.
await page.setViewport({width: 1080, height: 1024});

// Type into search box.
await page.locator('.devsite-search-field').fill('automate beyond recorder');

// Wait and click on first result.
await page.locator('.devsite-result-item-link').click();

// Locate the full title with a unique string.
const textSelector = await page
  .locator('text/Customize and automate')
  .waitHandle();
const fullTitle = await textSelector?.evaluate(el => el.textContent);

// Print the full title.
console.log('The title of this blog post is "%s".', fullTitle);

await browser.close();

----------------------------------------

TITLE: Automating Chrome Search with Puppeteer in TypeScript
DESCRIPTION: Example script that demonstrates launching a browser, navigating to developer.chrome.com, performing a search, clicking results, and extracting content using Puppeteer. Shows core features including page navigation, viewport setting, element selection, and interaction.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  // Launch the browser and open a new blank page
  const browser = await puppeteer.launch();
  const page = await browser.newPage();

  // Navigate the page to a URL
  await page.goto('https://developer.chrome.com/');

  // Set screen size
  await page.setViewport({width: 1080, height: 1024});

  // Type into search box
  await page.type('.devsite-search-field', 'automate beyond recorder');

  // Wait and click on first result
  const searchResultSelector = '.devsite-result-item-link';
  await page.waitForSelector(searchResultSelector);
  await page.click(searchResultSelector);

  // Locate the full title with a unique string
  const textSelector = await page.waitForSelector(
    'text/Customize and automate',
  );
  const fullTitle = await textSelector?.evaluate(el => el.textContent);

  // Print the full title
  console.log('The title of this blog post is "%s".', fullTitle);

  await browser.close();
})();

----------------------------------------

TITLE: Clicking an Element Using Locators in Puppeteer
DESCRIPTION: Demonstrates how to use a locator to click a button element. The locator automatically handles visibility, viewport position, and stability checks before performing the action.

LANGUAGE: typescript
CODE:
// 'button' is a CSS selector.
await page.locator('button').click();

----------------------------------------

TITLE: Defining Page.goto() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.goto() method in Puppeteer. It takes a URL string and optional GoToOptions, returning a Promise that resolves to an HTTPResponse or null.

LANGUAGE: typescript
CODE:
class Page {
  goto(url: string, options?: GoToOptions): Promise<HTTPResponse | null>;
}

----------------------------------------

TITLE: Basic Puppeteer Usage Example in TypeScript
DESCRIPTION: Demonstrates how to use Puppeteer to launch a browser, navigate to a webpage, interact with elements, and extract content. It includes launching a browser, setting viewport size, filling a search box, clicking a result, and extracting text content.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';
// Or import puppeteer from 'puppeteer-core';

// Launch the browser and open a new blank page
const browser = await puppeteer.launch();
const page = await browser.newPage();

// Navigate the page to a URL.
await page.goto('https://developer.chrome.com/');

// Set screen size.
await page.setViewport({width: 1080, height: 1024});

// Type into search box.
await page.locator('.devsite-search-field').fill('automate beyond recorder');

// Wait and click on first result.
await page.locator('.devsite-result-item-link').click();

// Locate the full title with a unique string.
const textSelector = await page
  .locator('text/Customize and automate')
  .waitHandle();
const fullTitle = await textSelector?.evaluate(el => el.textContent);

// Print the full title.
console.log('The title of this blog post is "%s".', fullTitle);

await browser.close();

----------------------------------------

TITLE: Testing Chrome Extension Background Page with Puppeteer
DESCRIPTION: Example demonstrating how to launch Chrome with a specific extension and access its background page. This code is for Manifest V2 extensions that use background pages.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';
import path from 'path';

const pathToExtension = path.join(process.cwd(), 'my-extension');
const browser = await puppeteer.launch({
  args: [
    `--disable-extensions-except=${pathToExtension}`,
    `--load-extension=${pathToExtension}`,
  ],
});
const backgroundPageTarget = await browser.waitForTarget(
  target => target.type() === 'background_page',
);
const backgroundPage = await backgroundPageTarget.page();
// Test the background page as you would any other page.
await browser.close();

----------------------------------------

TITLE: Custom Wait Function with MutationObserver
DESCRIPTION: Demonstrates using a custom function with MutationObserver to wait for a canvas element to appear on the page.

LANGUAGE: typescript
CODE:
await page
  .locator(() => {
    let resolve!: (node: HTMLCanvasElement) => void;
    const promise = new Promise(res => {
      return (resolve = res);
    });
    const observer = new MutationObserver(records => {
      for (const record of records) {
        if (record.target instanceof HTMLCanvasElement) {
          resolve(record.target);
        }
      }
    });
    observer.observe(document);
    return promise;
  })
  .wait();

----------------------------------------

TITLE: Launching Browser with Puppeteer in TypeScript
DESCRIPTION: Demonstrates how to launch a new browser instance and create a new page using Puppeteer.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

const page = await browser.newPage();

// ...

----------------------------------------

TITLE: Generating PDF from Web Page using Puppeteer
DESCRIPTION: Demonstrates how to launch a Puppeteer browser instance, navigate to a web page, and generate a PDF file. The example shows generating a PDF from Hacker News, waiting for network activity to complete before PDF generation.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch();
const page = await browser.newPage();
await page.goto('https://news.ycombinator.com', {
  waitUntil: 'networkidle2',
});
// Saves the PDF to hn.pdf.
await page.pdf({
  path: 'hn.pdf',
});

await browser.close();

----------------------------------------

TITLE: Using interceptResolutionState in Puppeteer Request Interception
DESCRIPTION: This example demonstrates how to use the interceptResolutionState method for finer-grained introspection in request interception handlers.

LANGUAGE: typescript
CODE:
page.on('request', interceptedRequest => {
  const {action} = interceptedRequest.interceptResolutionState();
  if (action === InterceptResolutionAction.AlreadyHandled) return;

  return new Promise(resolve => {
    setTimeout(() => {
      const {action} = interceptedRequest.interceptResolutionState();
      if (action === InterceptResolutionAction.AlreadyHandled) {
        resolve();
        return;
      }
      interceptedRequest.continue();
      resolve();
    }, 500);
  });
});
page.on('request', async interceptedRequest => {
  if (
    interceptedRequest.interceptResolutionState().action ===
    InterceptResolutionAction.AlreadyHandled
  )
    return;

  await someLongAsyncOperation();
  if (
    interceptedRequest.interceptResolutionState().action ===
    InterceptResolutionAction.AlreadyHandled
  )
    return;
  interceptedRequest.continue();
});

----------------------------------------

TITLE: Installing Puppeteer with npm
DESCRIPTION: Commands to install Puppeteer or Puppeteer-core using npm. Puppeteer includes a compatible Chrome download, while Puppeteer-core is installed as a library without Chrome.

LANGUAGE: bash
CODE:
npm i puppeteer # Downloads compatible Chrome during installation.
npm i puppeteer-core # Alternatively, install as a library, without downloading Chrome.

----------------------------------------

TITLE: Using ElementHandle.autofill for Credit Card Form
DESCRIPTION: Example demonstrating how to use the autofill method to populate credit card form fields including card number, name, expiry date, and CVC.

LANGUAGE: typescript
CODE:
// Select an input on the credit card form.
const name = await page.waitForSelector('form #name');
// Trigger autofill with the desired data.
await name.autofill({
  creditCard: {
    number: '4444444444444444',
    name: 'John Smith',
    expiryMonth: '01',
    expiryYear: '2030',
    cvc: '123',
  },
});

----------------------------------------

TITLE: Capturing Full Page Screenshot with Puppeteer in TypeScript
DESCRIPTION: Demonstrates how to launch a browser, navigate to a page, and capture a full page screenshot using Page.screenshot(). The code waits for network activity to settle before taking the screenshot.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch();
const page = await browser.newPage();
await page.goto('https://news.ycombinator.com', {
  waitUntil: 'networkidle2',
});
await page.screenshot({
  path: 'hn.png',
});

await browser.close();

----------------------------------------

TITLE: Installing Puppeteer with npm
DESCRIPTION: This snippet shows how to install Puppeteer using npm. It provides two options: installing Puppeteer with a compatible Chrome version, or installing Puppeteer-core as a library without Chrome.

LANGUAGE: bash
CODE:
npm i puppeteer # Downloads compatible Chrome during installation.
npm i puppeteer-core # Alternatively, install as a library, without downloading Chrome.

----------------------------------------

TITLE: Launching a Browser with Puppeteer in TypeScript
DESCRIPTION: This snippet demonstrates how to launch a browser instance using Puppeteer and create a new page. It requires the puppeteer package to be imported.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

const page = await browser.newPage();

// ...

----------------------------------------

TITLE: Capturing Full Page Screenshot with Puppeteer in TypeScript
DESCRIPTION: Demonstrates how to launch a browser, navigate to a webpage, and capture a full page screenshot using Page.screenshot(). The code waits for network activity to complete before taking the screenshot.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch();
const page = await browser.newPage();
await page.goto('https://news.ycombinator.com', {
  waitUntil: 'networkidle2',
});
await page.screenshot({
  path: 'hn.png',
});

await browser.close();

----------------------------------------

TITLE: Defining Page Click Method - TypeScript
DESCRIPTION: TypeScript class definition showing the signature of the Page.click() method, which takes a selector string and optional click options.

LANGUAGE: typescript
CODE:
class Page {
  click(selector: string, options?: Readonly<ClickOptions>): Promise<void>;
}

----------------------------------------

TITLE: Disconnecting and Reconnecting to a Browser in TypeScript
DESCRIPTION: This example shows how to disconnect from a Browser instance, store its WebSocket endpoint, and then reconnect to it later. This is useful for scenarios where you need to maintain a persistent browser session across different script executions.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();
// Store the endpoint to be able to reconnect to the browser.
const browserWSEndpoint = browser.wsEndpoint();
// Disconnect puppeteer from the browser.
await browser.disconnect();

// Use the endpoint to reestablish a connection
const browser2 = await puppeteer.connect({browserWSEndpoint});
// Close the browser.
await browser2.close();

----------------------------------------

TITLE: Evaluating JavaScript Function in Puppeteer (TypeScript)
DESCRIPTION: Demonstrates how to launch a browser, create a page, navigate to a site, and evaluate a simple JavaScript function using Puppeteer. The function adds two numbers and returns the result.

LANGUAGE: typescript
CODE:
// Import puppeteer
import puppeteer from 'puppeteer';

(async () => {
  // Launch the browser
  const browser = await puppeteer.launch();

  // Create a page
  const page = await browser.newPage();

  // Go to your site
  await page.goto('YOUR_SITE');

  // Evaluate JavaScript
  const three = await page.evaluate(() => {
    return 1 + 2;
  });

  console.log(three);

  // Close browser.
  await browser.close();
})();

----------------------------------------

TITLE: Launching Puppeteer in Non-Headless Mode
DESCRIPTION: Demonstrates how to launch Puppeteer with headless mode disabled for visual debugging.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({headless: false});

----------------------------------------

TITLE: Automating Web Interactions with Puppeteer in TypeScript
DESCRIPTION: This example demonstrates how to use Puppeteer to automate web interactions. It launches a browser, navigates to a webpage, interacts with elements, and extracts information. The script performs a search, clicks on a result, and retrieves the title of a blog post.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';
// Or import puppeteer from 'puppeteer-core';

// Launch the browser and open a new blank page
const browser = await puppeteer.launch();
const page = await browser.newPage();

// Navigate the page to a URL.
await page.goto('https://developer.chrome.com/');

// Set screen size.
await page.setViewport({width: 1080, height: 1024});

// Type into search box.
await page.locator('.devsite-search-field').fill('automate beyond recorder');

// Wait and click on first result.
await page.locator('.devsite-result-item-link').click();

// Locate the full title with a unique string.
const textSelector = await page
  .locator('text/Customize and automate')
  .waitHandle();
const fullTitle = await textSelector?.evaluate(el => el.textContent);

// Print the full title.
console.log('The title of this blog post is "%s".', fullTitle);

await browser.close();

----------------------------------------

TITLE: Using Custom Query Handlers in Puppeteer
DESCRIPTION: Demonstrates how to use a custom query handler (in this case, for React components) in Puppeteer selectors.

LANGUAGE: typescript
CODE:
await page.locator('::-p-react-component(MyComponent)').click();
// OR used in conjunction with other selectors.
await page.locator('.side-bar ::-p-react-component(MyComponent)').click();

----------------------------------------

TITLE: Testing Chrome Extension Service Worker and Popup with Puppeteer (Manifest V3)
DESCRIPTION: Example demonstrating how to test a Manifest V3 extension's service worker and popup. Shows how to launch Chrome with the extension, access the service worker, trigger popup opening, and get a handle to the popup page for testing.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';
import path from 'path';

const pathToExtension = path.join(process.cwd(), 'my-extension');
const browser = await puppeteer.launch({
  args: [
    `--disable-extensions-except=${pathToExtension}`,
    `--load-extension=${pathToExtension}`,
  ],
});

const workerTarget = await browser.waitForTarget(
  // Assumes that there is only one service worker created by the extension and its URL ends with background.js.
  target =>
    target.type() === 'service_worker' &&
    target.url().endsWith('background.js'),
);

const worker = await workerTarget.worker();

// Open a popup (available for Canary channels).
await worker.evaluate('chrome.action.openPopup();');

const popupTarget = await browser.waitForTarget(
  // Assumes that there is only one page with the URL ending with popup.html and that is the popup created by the extension.
  target => target.type() === 'page' && target.url().endsWith('popup.html'),
);

const popupPage = popupTarget.asPage();

// Test the popup page as you would any other page.

await browser.close();

----------------------------------------

TITLE: Launching Browser Process in Puppeteer with TypeScript
DESCRIPTION: Function signature for launching a browser process in Puppeteer. Takes LaunchOptions as a parameter and returns a Process object. This is the core function for initializing a new browser instance in Puppeteer automation.

LANGUAGE: typescript
CODE:
export declare function launch(opts: LaunchOptions): Process;

----------------------------------------

TITLE: Launching Chrome Headless Shell with Puppeteer
DESCRIPTION: Shows how to launch Chrome in chrome-headless-shell mode, which offers better performance for automation tasks but with limited feature set compared to regular Chrome.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({headless: 'shell'});

----------------------------------------

TITLE: Using Frame.select() for Single and Multiple Selections
DESCRIPTION: Examples demonstrating how to use Frame.select() for both single and multiple selections in a select element. Shows usage with both single value selection and multiple value selection scenarios.

LANGUAGE: typescript
CODE:
frame.select('select#colors', 'blue'); // single selection
frame.select('select#colors', 'red', 'green', 'blue'); // multiple selections

----------------------------------------

TITLE: Handling HTTP Redirects in TypeScript
DESCRIPTION: Example demonstrating how to access the redirect chain for a request that has been redirected.

LANGUAGE: typescript
CODE:
const response = await page.goto('http://example.com');
const chain = response.request().redirectChain();
console.log(chain.length); // 1
console.log(chain[0].url()); // 'http://example.com'

----------------------------------------

TITLE: Launching Puppeteer in Non-Headless Mode
DESCRIPTION: Demonstrates how to launch Puppeteer in non-headless mode for visual debugging of browser automation.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({headless: false});

----------------------------------------

TITLE: Installing Puppeteer via NPM
DESCRIPTION: Command to install Puppeteer in a project using npm package manager. This will automatically download Chrome for Testing browser.

LANGUAGE: bash
CODE:
npm i puppeteer

----------------------------------------

TITLE: Evaluating JavaScript as a String in Puppeteer
DESCRIPTION: Shows an alternative method of evaluating JavaScript by providing the function body as a string. This approach can be useful but requires careful consideration of type safety, especially in TypeScript.

LANGUAGE: typescript
CODE:
// Evaluate JavaScript
const three = await page.evaluate(`
    1 + 2
`);

----------------------------------------

TITLE: Using waitForSelector in Puppeteer
DESCRIPTION: Demonstrates how to use waitForSelector, a lower-level API compared to locators, to wait for an element to be available in the DOM and perform actions on it.

LANGUAGE: typescript
CODE:
// Import puppeteer
import puppeteer from 'puppeteer';

// Launch the browser.
const browser = await puppeteer.launch();

// Create a page.
const page = await browser.newPage();

// Go to your site.
await page.goto('YOUR_SITE');

// Query for an element handle.
const element = await page.waitForSelector('div > .class-name');

// Do something with element...
await element.click(); // Just an example.

// Dispose of handle.
await element.dispose();

// Close browser.
await browser.close();

----------------------------------------

TITLE: Setting Locator Timeouts in Puppeteer
DESCRIPTION: Shows how to set a timeout for a locator action, which will throw a TimeoutError if the element is not found or preconditions are not met within the specified time.

LANGUAGE: typescript
CODE:
// Time out after 3 sec.
await page.locator('button').setTimeout(3000).click();

----------------------------------------

TITLE: Handling Page Load Events in Puppeteer
DESCRIPTION: Shows how to listen for and handle a page load event using the Page class.

LANGUAGE: typescript
CODE:
page.once('load', () => console.log('Page loaded!'));

----------------------------------------

TITLE: Waiting for Element Visibility Using Locators in Puppeteer
DESCRIPTION: Shows how to use a locator to wait for an element with a specific CSS class to become visible before proceeding.

LANGUAGE: typescript
CODE:
// '.loading' is a CSS selector.
await page.locator('.loading').wait();

----------------------------------------

TITLE: Waiting for Element Visibility Using Locators in Puppeteer
DESCRIPTION: Shows how to use a locator to wait for an element with a specific CSS class to become visible before proceeding.

LANGUAGE: typescript
CODE:
// '.loading' is a CSS selector.
await page.locator('.loading').wait();

----------------------------------------

TITLE: Defining Page.waitForSelector Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.waitForSelector method. It defines the method parameters and return type.

LANGUAGE: typescript
CODE:
class Page {
  waitForSelector<Selector extends string>(
    selector: Selector,
    options?: WaitForSelectorOptions,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}

----------------------------------------

TITLE: Returning Values from Locators in Puppeteer
DESCRIPTION: Demonstrates how to use the map function with a locator to return a JavaScript value, in this case checking if a button is enabled.

LANGUAGE: typescript
CODE:
const enabled = await page
  .locator('button')
  .map(button => !button.disabled)
  .wait();

----------------------------------------

TITLE: Handling Locator Events in Puppeteer
DESCRIPTION: Demonstrates how to listen for the Action event on a locator, which fires when the locator is about to perform an action after meeting all preconditions.

LANGUAGE: typescript
CODE:
let willClick = false;
await page
  .locator('button')
  .on(LocatorEvent.Action, () => {
    willClick = true;
  })
  .click();

----------------------------------------

TITLE: Creating Browser Context Example - TypeScript
DESCRIPTION: Example showing how to create a new browser context, open a page within it, navigate to a URL, and properly close the context when done.

LANGUAGE: typescript
CODE:
// Create a new browser context
const context = await browser.createBrowserContext();
// Create a new page inside context.
const page = await context.newPage();
// ... do stuff with page ...
await page.goto('https://example.com');
// Dispose context once it's no longer needed.
await context.close();

----------------------------------------

TITLE: Creating a Page with Browser in TypeScript
DESCRIPTION: Demonstrates how to use a Browser instance to create a Page, navigate to a URL, and close the browser.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();
const page = await browser.newPage();
await page.goto('https://example.com');
await browser.close();

----------------------------------------

TITLE: Defining Browser Class in TypeScript
DESCRIPTION: This snippet defines the abstract Browser class, which extends EventEmitter and emits BrowserEvents. It represents a browser instance that can be connected to or launched by Puppeteer.

LANGUAGE: typescript
CODE:
export declare abstract class Browser extends EventEmitter<BrowserEvents>

----------------------------------------

TITLE: Launching Headful Chrome in Puppeteer (TypeScript)
DESCRIPTION: Demonstrates how to launch Chrome in headful mode (with GUI) by setting the headless option to false.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({headless: false});

----------------------------------------

TITLE: Waiting for a Custom Condition Using Function Locators in Puppeteer
DESCRIPTION: Demonstrates how to use a function locator to wait for a custom condition, such as detecting a new HTMLCanvasElement using MutationObserver.

LANGUAGE: typescript
CODE:
await page
  .locator(() => {
    let resolve!: (node: HTMLCanvasElement) => void;
    const promise = new Promise(res => {
      return (resolve = res);
    });
    const observer = new MutationObserver(records => {
      for (const record of records) {
        if (record.target instanceof HTMLCanvasElement) {
          resolve(record.target);
        }
      }
    });
    observer.observe(document);
    return promise;
  })
  .wait();

----------------------------------------

TITLE: Using Tracing API in Puppeteer
DESCRIPTION: Example showing how to start and stop a trace while navigating to a webpage. The trace is saved to a JSON file that can be opened in Chrome DevTools or timeline viewer.

LANGUAGE: typescript
CODE:
await page.tracing.start({path: 'trace.json'});
await page.goto('https://www.google.com');
await page.tracing.stop();

----------------------------------------

TITLE: Using Text Selectors in Puppeteer
DESCRIPTION: Demonstrates how to use text selectors to find elements containing specific text, even within shadow roots, and how to handle special characters in the search text.

LANGUAGE: typescript
CODE:
// Click a button inside a div element that has Checkout as the inner text.
await page.locator('div ::-p-text(Checkout)').click();
// You need to escape CSS selector syntax such '(', ')' if it is part of the your search text ('Checkout (2 items)').
await page.locator(':scope >>> ::-p-text(Checkout \\(2 items\\))').click();
// or use quotes escaping any quotes that are part of the search text ('He said: "Hello"').
await page.locator(':scope >>> ::-p-text("He said: \\"Hello\\"")').click();

----------------------------------------

TITLE: Using Prefixed Selector Syntax in Puppeteer
DESCRIPTION: Shows examples of using the legacy prefixed selector syntax for various non-CSS selectors in Puppeteer, including text, XPath, ARIA, and pierce selectors.

LANGUAGE: typescript
CODE:
// Same as ::-p-text("My text").
await page.locator('text/My text').click();
// Same as ::-p-xpath(//h2).
await page.locator('xpath///h2').click();
// Same as ::-p-aria(My label).
await page.locator('aria/My label').click();

await page.locator('pierce/div').click();

----------------------------------------

TITLE: Implementing Asynchronous Multiple Intercept Handlers in Puppeteer
DESCRIPTION: This example demonstrates asynchronous handlers working together, with the first handler continuing the request after a delay and the second handler performing an async operation before attempting to continue the request.

LANGUAGE: typescript
CODE:
page.on('request', interceptedRequest => {
  if (interceptedRequest.isInterceptResolutionHandled()) return;

  return new Promise(resolve => {
    setTimeout(() => {
      if (interceptedRequest.isInterceptResolutionHandled()) {
        resolve();
        return;
      }
      interceptedRequest.continue();
      resolve();
    }, 500);
  });
});
page.on('request', async interceptedRequest => {
  if (interceptedRequest.isInterceptResolutionHandled()) return;

  await someLongAsyncOperation();
  if (interceptedRequest.isInterceptResolutionHandled()) return;
  interceptedRequest.continue();
});

----------------------------------------

TITLE: Using Page.evaluate() with TypeScript Generics for Better Type Inference
DESCRIPTION: This example demonstrates how to use TypeScript generics with Page.evaluate() to get better type inference for the returned value.

LANGUAGE: typescript
CODE:
const aHandle = await page.evaluate(() => 2);

----------------------------------------

TITLE: Implementing Slow Motion in Puppeteer
DESCRIPTION: Shows how to slow down Puppeteer operations using slowMo option for better visualization of automation steps.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({
  headless: false,
  slowMo: 250, // slow down by 250ms
});

----------------------------------------

TITLE: Drawing Square with Mouse Movements
DESCRIPTION: Example showing how to use page.mouse to trace a 100x100 square by moving the mouse and controlling button states.

LANGUAGE: typescript
CODE:
// Using 'page.mouse' to trace a 100x100 square.
await page.mouse.move(0, 0);
await page.mouse.down();
await page.mouse.move(0, 100);
await page.mouse.move(100, 100);
await page.mouse.move(100, 0);
await page.mouse.move(0, 0);
await page.mouse.up();

----------------------------------------

TITLE: Capturing Element Screenshot with Puppeteer in TypeScript
DESCRIPTION: Shows how to capture a screenshot of a specific DOM element using ElementHandle.screenshot(). The code waits for the element to be available and automatically scrolls it into view if hidden.

LANGUAGE: typescript
CODE:
const fileElement = await page.waitForSelector('div');
await fileElement.screenshot({
  path: 'div.png',
});

----------------------------------------

TITLE: Applying Filters to Locators in Puppeteer
DESCRIPTION: Shows how to add extra conditions to a locator using a JavaScript function, clicking a button only if its innerText matches a specific value.

LANGUAGE: typescript
CODE:
await page
  .locator('button')
  .filter(button => button.innerText === 'My button')
  .click();

----------------------------------------

TITLE: Evaluating a Promise-Returning Function with Page.evaluate()
DESCRIPTION: This example demonstrates how to use Page.evaluate() with a function that returns a Promise. The method waits for the promise to resolve and returns its value.

LANGUAGE: typescript
CODE:
const result = await frame.evaluate(() => {
  return Promise.resolve(8 * 7);
});
console.log(result); // prints "56"

----------------------------------------

TITLE: Page Class Declaration
DESCRIPTION: Basic class declaration showing Page extends EventEmitter

LANGUAGE: typescript
CODE:
export declare abstract class Page extends EventEmitter<PageEvents>

----------------------------------------

TITLE: Page Class Declaration
DESCRIPTION: Basic class declaration showing Page extends EventEmitter

LANGUAGE: typescript
CODE:
export declare abstract class Page extends EventEmitter<PageEvents>

----------------------------------------

TITLE: Page Class Declaration
DESCRIPTION: Basic class declaration showing Page extends EventEmitter

LANGUAGE: typescript
CODE:
export declare abstract class Page extends EventEmitter<PageEvents>

----------------------------------------

TITLE: Using Page.type() Method in Puppeteer
DESCRIPTION: This example demonstrates how to use the Page.type() method in Puppeteer. It shows typing text instantly and with a delay to simulate user input.

LANGUAGE: typescript
CODE:
await page.type('#mytextarea', 'Hello');
// Types instantly
await page.type('#mytextarea', 'World', {delay: 100});
// Types slower, like a user

----------------------------------------

TITLE: Using Page.type() Method in Puppeteer
DESCRIPTION: This example demonstrates how to use the Page.type() method in Puppeteer. It shows typing text instantly and with a delay to simulate user input.

LANGUAGE: typescript
CODE:
await page.type('#mytextarea', 'Hello');
// Types instantly
await page.type('#mytextarea', 'World', {delay: 100});
// Types slower, like a user

----------------------------------------

TITLE: Connecting Puppeteer to a Chrome Extension Tab
DESCRIPTION: This snippet demonstrates how to import Puppeteer's browser-specific modules, create a new tab, connect Puppeteer using ExtensionTransport, and perform operations on the page. It showcases the core steps needed to integrate Puppeteer in a Chrome extension environment.

LANGUAGE: typescript
CODE:
import {
  connect,
  ExtensionTransport,
} from 'puppeteer-core/lib/esm/puppeteer/puppeteer-core-browser.js';

// Create a tab or find a tab to attach to.
const tab = await chrome.tabs.create({
  url,
});
// Connect Puppeteer using the ExtensionTransport.connectTab.
const browser = await connect({
  transport: await ExtensionTransport.connectTab(tab.id),
});
// You will have a single page on the browser object, which corresponds
// to the tab you connected the transport to.
const [page] = await browser.pages();
// Perform the usual operations with Puppeteer page.
console.log(await page.evaluate('document.title'));
browser.disconnect();

----------------------------------------

TITLE: Defining Page.frames() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the frames() method for the Page class in Puppeteer. The method returns an array of Frame objects representing all frames attached to the page.

LANGUAGE: typescript
CODE:
class Page {
  abstract frames(): Frame[];
}

----------------------------------------

TITLE: Launching Headful Chrome with Puppeteer
DESCRIPTION: Demonstrates how to launch Chrome in headful mode (with visible UI) by setting the headless option to false.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({headless: false});

----------------------------------------

TITLE: Adding File Reading Function to Page Using Puppeteer
DESCRIPTION: This example shows how to add a 'readfile' function to the page's window object using Page.exposeFunction(). It uses the fs module to read file contents asynchronously.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';
import fs from 'node:fs';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  page.on('console', msg => console.log(msg.text()));
  await page.exposeFunction('readfile', async filePath => {
    return new Promise((resolve, reject) => {
      fs.readFile(filePath, 'utf8', (err, text) => {
        if (err) reject(err);
        else resolve(text);
      });
    });
  });
  await page.evaluate(async () => {
    // use window.readfile to read contents of a file
    const content = await window.readfile('/etc/hosts');
    console.log(content);
  });
  await browser.close();
})();

----------------------------------------

TITLE: Listening to Network Requests and Responses in Puppeteer (TypeScript)
DESCRIPTION: This code snippet demonstrates how to set up event listeners for network requests and responses in Puppeteer. It logs the URL of each request and response to the console.

LANGUAGE: typescript
CODE:
const page = await browser.newPage();
page.on('request', request => {
  console.log(request.url());
});

page.on('response', response => {
  console.log(response.url());
});

----------------------------------------

TITLE: Enable Browser Process Logging
DESCRIPTION: Demonstrates how to enable browser process logging for debugging browser crashes or launch issues.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({
  dumpio: true,
});

----------------------------------------

TITLE: Optimizing TypeScript Experience with Page.evaluate()
DESCRIPTION: This snippet demonstrates how to get the best TypeScript experience by passing the type of pageFunction as a generic.

LANGUAGE: typescript
CODE:
const aHandle = await page.evaluate(() => 2);

----------------------------------------

TITLE: Implementing Element Drag Functionality in Puppeteer TypeScript
DESCRIPTION: Method signature for dragging an element to a target point or another element. The method accepts either coordinates (Point) or another ElementHandle as the target parameter and returns a Promise that may contain drag data when drag interception is enabled.

LANGUAGE: typescript
CODE:
class ElementHandle {
  drag(
    this: ElementHandle<Element>,
    target: Point | ElementHandle<Element>,
  ): Promise<Protocol.Input.DragData | void>;
}

----------------------------------------

TITLE: Handling Promises in Puppeteer's evaluate Function
DESCRIPTION: Shows how Puppeteer automatically awaits promises returned from the evaluate function. This example demonstrates creating a delay using a promise within the page context.

LANGUAGE: typescript
CODE:
await page.evaluate(() => {
  // wait for 100ms.
  return new Promise(resolve => setTimeout(resolve, 100));
});
// Execution continues here once the Promise created in the page context resolves.

----------------------------------------

TITLE: Defining ElementHandle.click Method in TypeScript
DESCRIPTION: This snippet defines the click method for the ElementHandle class in Puppeteer. The method scrolls the element into view if needed, then uses Page.mouse to click in the center of the element. It throws an error if the element is detached from the DOM.

LANGUAGE: typescript
CODE:
class ElementHandle {
  click(
    this: ElementHandle<Element>,
    options?: Readonly<ClickOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Registering Custom Query Handler for Vue Components in Puppeteer
DESCRIPTION: Shows how to create a custom query handler for locating Vue components, which can be useful for framework-specific element selection.

LANGUAGE: typescript
CODE:
Puppeteer.registerCustomQueryHandler('vue', {
  queryOne: (element, name) => {
    const walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT);
    do {
      const currentNode = walker.currentNode;
      if (
        currentNode.__vnode?.ctx?.type?.name.toLowerCase() ===
        name.toLocaleLowerCase()
      ) {
        return currentNode;
      }
    } while (walker.nextNode());

    return null;
  },
});

----------------------------------------

TITLE: Overriding Navigator.languages Using Page.evaluateOnNewDocument in JavaScript
DESCRIPTION: This example demonstrates how to use Page.evaluateOnNewDocument to override the navigator.languages property before the page loads. It includes both the preload script and the Puppeteer script to evaluate it.

LANGUAGE: javascript
CODE:
// preload.js

// overwrite the `languages` property to use a custom getter
Object.defineProperty(navigator, 'languages', {
  get: function () {
    return ['en-US', 'en', 'bn'];
  },
});

// In your puppeteer script, assuming the preload.js file is
// in same folder of our script.
const preloadFile = fs.readFileSync('./preload.js', 'utf8');
await page.evaluateOnNewDocument(preloadFile);

----------------------------------------

TITLE: Setting Cookies with Puppeteer in TypeScript
DESCRIPTION: This snippet shows how to set cookies directly in the browser's storage using Puppeteer. It launches a browser and sets two cookies for the localhost domain with specific attributes. Finally, it prints all available cookies.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

// Sets two cookies for the localhost domain.
await browser.setCookie(
  {
    name: 'cookie1',
    value: '1',
    domain: 'localhost',
    path: '/',
    sameParty: false,
    expires: -1,
    httpOnly: false,
    secure: false,
    sourceScheme: 'NonSecure',
  },
  {
    name: 'cookie2',
    value: '2',
    domain: 'localhost',
    path: '/',
    sameParty: false,
    expires: -1,
    httpOnly: false,
    secure: false,
    sourceScheme: 'NonSecure',
  },
);

console.log(await browser.cookies()); // print available cookies.

----------------------------------------

TITLE: Capturing Element Screenshot with Puppeteer in TypeScript
DESCRIPTION: Shows how to capture a screenshot of a specific DOM element using ElementHandle.screenshot(). The code waits for the element to be available and automatically scrolls it into view if hidden.

LANGUAGE: typescript
CODE:
const fileElement = await page.waitForSelector('div');
await fileElement.screenshot({
  path: 'div.png',
});

----------------------------------------

TITLE: Element Visibility Wait in Puppeteer
DESCRIPTION: Shows how to wait for an element to become visible using Puppeteer's locator API.

LANGUAGE: typescript
CODE:
await page.locator('.loading').wait();

----------------------------------------

TITLE: Defining Frame.focus() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Frame.focus() method. It takes a selector string as a parameter and returns a Promise that resolves to void. The method focuses the first element that matches the provided selector.

LANGUAGE: typescript
CODE:
class Frame {
  focus(selector: string): Promise<void>;
}

----------------------------------------

TITLE: Getting Cookies with Puppeteer in TypeScript
DESCRIPTION: This snippet demonstrates how to retrieve cookies from the browser's default context using Puppeteer. It launches a browser, creates a new page, navigates to a website, sets a cookie using script evaluation, and then prints all available cookies.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

const page = await browser.newPage();

await page.goto('https://example.com');

// In this example, we set a cookie using script evaluation.
// Cookies can be set by the page/server in various ways.
await page.evaluate(() => {
  document.cookie = 'myCookie = MyCookieValue';
});

console.log(await browser.cookies()); // print available cookies.

----------------------------------------

TITLE: Using Page.waitForSelector with Navigation Example
DESCRIPTION: Example demonstrating how to use waitForSelector across multiple page navigations to detect when an image element appears on different websites.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';
(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  let currentURL;
  page
    .waitForSelector('img')
    .then(() => console.log('First URL with image: ' + currentURL));
  for (currentURL of [
    'https://example.com',
    'https://google.com',
    'https://bbc.com',
  ]) {
    await page.goto(currentURL);
  }
  await browser.close();
})();

----------------------------------------

TITLE: Handling Navigation with Page.click() in TypeScript
DESCRIPTION: This example demonstrates the correct pattern for using Page.click() when it triggers a navigation event, avoiding race conditions with page.waitForNavigation().

LANGUAGE: typescript
CODE:
const [response] = await Promise.all([
  page.waitForNavigation(waitOptions),
  page.click(selector, clickOptions),
]);

----------------------------------------

TITLE: Registering Custom Query Handlers in Puppeteer
DESCRIPTION: Shows how to register a custom query handler for selecting elements based on React components, allowing for more application-specific selectors.

LANGUAGE: typescript
CODE:
Puppeteer.registerCustomQueryHandler('react-component', {
  queryOne: (elementOrDocument, selector) => {
    // Dummy example just delegates to querySelector but you can find your
    // React component because this callback runs in the page context.
    return elementOrDocument.querySelector(`[id="${CSS.escape(selector)}"]`);
  },
  queryAll: (elementOrDocument, selector) => {
    // Dummy example just delegates to querySelector but you can find your
    // React component because this callback runs in the page context.
    return elementOrDocument.querySelectorAll(`[id="${CSS.escape(selector)}"]`);
  },
});

----------------------------------------

TITLE: Implementing Slow Motion in Puppeteer
DESCRIPTION: Shows how to slow down Puppeteer operations by adding a delay to help visualize automation steps.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({
  headless: false,
  slowMo: 250, // slow down by 250ms
});

----------------------------------------

TITLE: Using Browser Contexts in Puppeteer with TypeScript
DESCRIPTION: This snippet demonstrates how to create and use browser contexts for isolating automation tasks. It shows creating multiple pages within a context and closing the entire context.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

const context = await browser.createBrowserContext();

const page1 = await context.newPage();
const page2 = await context.newPage();

await context.close();

----------------------------------------

TITLE: Migrated Puppeteer E2E Test Example in TypeScript
DESCRIPTION: Complete example of a Puppeteer E2E test migrated from Protractor, demonstrating navigation, form interaction, and assertions.

LANGUAGE: typescript
CODE:
import {setupBrowserHooks, getBrowserState} from './utils';

describe('Puppeteer Demo', function () {
  setupBrowserHooks();
  it('should add one and two', function () {
    const {page} = getBrowserState();
    await page.goto('https://juliemr.github.io/protractor-demo/');

    await page.locator('.form-inline > input:nth-child(1)').fill('1');
    await page.locator('.form-inline > input:nth-child(2)').fill('2');
    await page.locator('#gobutton').fill('2');

    const result = await page
      .locator('.table tbody td:last-of-type')
      .map(header => header.innerText)
      .wait();

    expect(result).toEqual('3');
  });
});

----------------------------------------

TITLE: Testing Chrome Extension Background Page with Puppeteer (Manifest V2)
DESCRIPTION: Example showing how to launch Chrome with a specific extension and get a handle to its background page. Uses Puppeteer to initialize the browser with extension loading arguments and waits for the background page target to be available.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';
import path from 'path';

const pathToExtension = path.join(process.cwd(), 'my-extension');
const browser = await puppeteer.launch({
  args: [
    `--disable-extensions-except=${pathToExtension}`,
    `--load-extension=${pathToExtension}`,
  ],
});
const backgroundPageTarget = await browser.waitForTarget(
  target => target.type() === 'background_page',
);
const backgroundPage = await backgroundPageTarget.page();
// Test the background page as you would any other page.
await browser.close();

----------------------------------------

TITLE: Multiple Synchronous Intercept Handlers in Puppeteer (TypeScript)
DESCRIPTION: This example shows two synchronous handlers working together. The first handler continues the request, while the second handler checks if the request has already been handled before attempting to abort it.

LANGUAGE: typescript
CODE:
page.on('request', interceptedRequest => {
  if (interceptedRequest.isInterceptResolutionHandled()) return;
  interceptedRequest.continue();
});

page.on('request', interceptedRequest => {
  if (interceptedRequest.isInterceptResolutionHandled()) return;
  interceptedRequest.abort();
});

----------------------------------------

TITLE: Pulling Puppeteer Docker Images
DESCRIPTION: Commands to pull Puppeteer Docker images from the GitHub Container Registry. Shows how to pull the latest version and a specific version.

LANGUAGE: bash
CODE:
docker pull ghcr.io/puppeteer/puppeteer:latest # pulls the latest
docker pull ghcr.io/puppeteer/puppeteer:16.1.0 # pulls the image that contains Puppeteer v16.1.0

----------------------------------------

TITLE: Initializing Custom Chrome Browser in Puppeteer
DESCRIPTION: Launch Puppeteer with a specific Chrome executable path instead of the default bundled version.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});

----------------------------------------

TITLE: Using Puppeteer for Browser Automation in TypeScript
DESCRIPTION: Example of using Puppeteer to launch a browser, create a new page, navigate to a URL, and perform actions. This demonstrates typical usage of the PuppeteerNode class.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();

----------------------------------------

TITLE: Implementing Naive Request Interception in Puppeteer
DESCRIPTION: This snippet demonstrates a basic request interceptor that aborts all image requests ending with .png or .jpg and continues all other requests.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.setRequestInterception(true);
  page.on('request', interceptedRequest => {
    if (interceptedRequest.isInterceptResolutionHandled()) return;
    if (
      interceptedRequest.url().endsWith('.png') ||
      interceptedRequest.url().endsWith('.jpg')
    )
      interceptedRequest.abort();
    else interceptedRequest.continue();
  });
  await page.goto('https://example.com');
  await browser.close();
})();

----------------------------------------

TITLE: Defining WaitForOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the WaitForOptions interface used in Puppeteer. It includes optional properties for controlling wait behavior such as timeout, abort signal, and lifecycle events.

LANGUAGE: typescript
CODE:
export interface WaitForOptions {
  signal?: AbortSignal;
  timeout?: number;
  waitUntil?: PuppeteerLifeCycleEvent | PuppeteerLifeCycleEvent[];
}

----------------------------------------

TITLE: Complete Puppeteer Test Example
DESCRIPTION: Full example of a Puppeteer test demonstrating page navigation, element interaction, and assertions.

LANGUAGE: typescript
CODE:
import {setupBrowserHooks, getBrowserState} from './utils';

describe('Puppeteer Demo', function () {
  setupBrowserHooks();
  it('should add one and two', function () {
    const {page} = getBrowserState();
    await page.goto('https://juliemr.github.io/protractor-demo/');

    await page.locator('.form-inline > input:nth-child(1)').fill('1');
    await page.locator('.form-inline > input:nth-child(2)').fill('2');
    await page.locator('#gobutton').fill('2');

    const result = await page
      .locator('.table tbody td:last-of-type')
      .map(header => header.innerText)
      .wait();

    expect(result).toEqual('3');
  });
});

----------------------------------------

TITLE: Implementing Network Request Logging in Puppeteer with TypeScript
DESCRIPTION: Sets up event listeners for network requests and responses in Puppeteer. The code captures all network activity on a page and logs the URLs for both requests and responses. Uses the 'request' and 'response' events provided by Puppeteer's Page API.

LANGUAGE: typescript
CODE:
const page = await browser.newPage();
page.on('request', request => {
  console.log(request.url());
});

page.on('response', response => {
  console.log(response.url());
});

----------------------------------------

TITLE: Handling Navigation with Frame.click() in TypeScript
DESCRIPTION: This example demonstrates the correct pattern for using Frame.click() when it triggers navigation, avoiding race conditions by using Promise.all() with page.waitForNavigation().

LANGUAGE: typescript
CODE:
const [response] = await Promise.all([
  page.waitForNavigation(waitOptions),
  frame.click(selector, clickOptions),
]);

----------------------------------------

TITLE: Defining Frame.waitForSelector method signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Frame.waitForSelector method. It specifies the method's parameters and return type, including generic types for selector strings and element handles.

LANGUAGE: typescript
CODE:
class Frame {
  waitForSelector<Selector extends string>(
    selector: Selector,
    options?: WaitForSelectorOptions,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}

----------------------------------------

TITLE: Executing JavaScript in Puppeteer with TypeScript
DESCRIPTION: Demonstrates how to launch a browser, create a page, navigate to a site, and evaluate JavaScript using Puppeteer. The example shows a simple calculation (1 + 2) executed in the page context.

LANGUAGE: typescript
CODE:
// Import puppeteer
import puppeteer from 'puppeteer';

(async () => {
  // Launch the browser
  const browser = await puppeteer.launch();

  // Create a page
  const page = await browser.newPage();

  // Go to your site
  await page.goto('YOUR_SITE');

  // Evaluate JavaScript
  const three = await page.evaluate(() => {
    return 1 + 2;
  });

  console.log(three);

  // Close browser.
  await browser.close();
})();

----------------------------------------

TITLE: Screenshot Method Base64 Encoding Implementation
DESCRIPTION: TypeScript implementation of Page.screenshot() method that returns a base64 encoded string of the captured screenshot. The method takes ScreenshotOptions with mandatory base64 encoding parameter.

LANGUAGE: typescript
CODE:
class Page {
  screenshot(
    options: Readonly<ScreenshotOptions> & {
      encoding: 'base64';
    },
  ): Promise<string>;
}

----------------------------------------

TITLE: Element Hover Interaction in Puppeteer
DESCRIPTION: Demonstrates hovering over an element using Puppeteer's locator API with automatic viewport and visibility checks.

LANGUAGE: typescript
CODE:
await page.locator('div').hover();

----------------------------------------

TITLE: Logging Pending Protocol Calls
DESCRIPTION: Shows how to log pending protocol calls for debugging unresolved async operations.

LANGUAGE: typescript
CODE:
console.log(browser.debugInfo.pendingProtocolErrors);

----------------------------------------

TITLE: Hovering Over an Element Using Locators in Puppeteer
DESCRIPTION: Illustrates how to use a locator to hover over a div element. The locator automatically checks for visibility, viewport position, and stability before performing the action.

LANGUAGE: typescript
CODE:
await page.locator('div').hover();

----------------------------------------

TITLE: Configuring Locators in Puppeteer
DESCRIPTION: Demonstrates how to configure a locator to disable various preconditions before performing an action, such as clicking a button without waiting for visibility or stability.

LANGUAGE: typescript
CODE:
// Clicks on a button without waiting for any preconditions.
await page
  .locator('button')
  .setEnsureElementIsInTheViewport(false)
  .setVisibility(null)
  .setWaitForEnabled(false)
  .setWaitForStableBoundingBox(false)
  .click();

----------------------------------------

TITLE: Using Puppeteer for Browser Automation in TypeScript
DESCRIPTION: Example of using Puppeteer to launch a browser, create a new page, navigate to a URL, and perform actions.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();

----------------------------------------

TITLE: Getting Cookies in Puppeteer with TypeScript
DESCRIPTION: Demonstrates how to retrieve cookies from the browser's default context by first setting a cookie via script evaluation and then accessing it through Puppeteer's API.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

const page = await browser.newPage();

await page.goto('https://example.com');

// In this example, we set a cookie using script evaluation.
// Cookies can be set by the page/server in various ways.
await page.evaluate(() => {
  document.cookie = 'myCookie = MyCookieValue';
});

console.log(await browser.cookies()); // print available cookies.

----------------------------------------

TITLE: Initializing Browsers with WebDriver BiDi in Puppeteer
DESCRIPTION: Example showing how to launch Firefox and Chrome browsers using Puppeteer with WebDriver BiDi protocol. Firefox uses WebDriver BiDi by default, while Chrome requires explicit protocol specification.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const firefoxBrowser = await puppeteer.launch({
  browser: 'firefox', // WebDriver BiDi is used by default.
});
const page = await firefoxBrowser.newPage();
...
await firefoxBrowser.close();

const chromeBrowser = await puppeteer.launch({
  browser: 'chrome',
  protocol: 'webDriverBiDi', // CDP would be used by default for Chrome.
});
const page = await chromeBrowser.newPage();
...
await chromeBrowser.close();

----------------------------------------

TITLE: Launching Browser with Custom Arguments in TypeScript
DESCRIPTION: Example showing how to launch a browser instance while filtering out specific default arguments using the ignoreDefaultArgs option.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({
  ignoreDefaultArgs: ['--mute-audio'],
});

----------------------------------------

TITLE: Using waitForSelector with Puppeteer Example
DESCRIPTION: Complete example demonstrating how to use waitForSelector to detect when an image element appears on different web pages. The code launches a browser, navigates through multiple URLs, and logs when an image is found.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  let currentURL;
  page
    .mainFrame()
    .waitForSelector('img')
    .then(() => console.log('First URL with image: ' + currentURL));

  for (currentURL of [
    'https://example.com',
    'https://google.com',
    'https://bbc.com',
  ]) {
    await page.goto(currentURL);
  }
  await browser.close();
})();

----------------------------------------

TITLE: Using KnownDevices for Device Emulation in Puppeteer with TypeScript
DESCRIPTION: This example demonstrates how to use the KnownDevices variable to emulate an iPhone 15 Pro in Puppeteer. It shows the process of launching a browser, creating a new page, applying the device emulation, and navigating to a website.

LANGUAGE: typescript
CODE:
import {KnownDevices} from 'puppeteer';
const iPhone = KnownDevices['iPhone 15 Pro'];

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.emulate(iPhone);
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();

----------------------------------------

TITLE: Configuring Rollup for Puppeteer Browser Build in JavaScript
DESCRIPTION: This configuration for Rollup shows how to set up a build process for creating a browser-compatible version of a Puppeteer script. It includes settings for ESM output, external dependencies, and browser-targeted resolution.

LANGUAGE: javascript
CODE:
import {nodeResolve} from '@rollup/plugin-node-resolve';

export default {
  input: 'main.mjs',
  output: {
    format: 'esm',
    dir: 'out',
  },
  // If you do not need to use WebDriver BiDi protocol,
  // exclude chromium-bidi/lib/cjs/bidiMapper/BidiMapper.js to minimize the bundle size.
  external: ['chromium-bidi/lib/cjs/bidiMapper/BidiMapper.js'],
  plugins: [
    nodeResolve({
      // Indicate that we target a browser environment.
      browser: true,
      // Exclude any dependencies except for puppeteer-core.
      // `npm install puppeteer-core` # To install puppeteer-core if needed.
      resolveOnly: ['puppeteer-core'],
    }),
  ],
};

----------------------------------------

TITLE: Example Usage of emulateVisionDeficiency in Puppeteer
DESCRIPTION: Demonstrates how to use the emulateVisionDeficiency method to simulate different vision deficiencies and capture screenshots. Shows simulation of achromatopsia, deuteranopia, blurred vision, and reduced contrast.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://v8.dev/blog/10-years');

  await page.emulateVisionDeficiency('achromatopsia');
  await page.screenshot({path: 'achromatopsia.png'});

  await page.emulateVisionDeficiency('deuteranopia');
  await page.screenshot({path: 'deuteranopia.png'});

  await page.emulateVisionDeficiency('blurredVision');
  await page.screenshot({path: 'blurred-vision.png'});

  await page.emulateVisionDeficiency('reducedContrast');
  await page.screenshot({path: 'reduced-contrast.png'});

  await browser.close();
})();

----------------------------------------

TITLE: Implementing Page.$ Method in Typescript
DESCRIPTION: Type definition for the Page.$ method that finds and returns the first element matching a selector. The method accepts a selector string and returns a Promise that resolves to either an ElementHandle of the matching element or null if no match is found. This is a shortcut for Page.mainFrame().$(selector).

LANGUAGE: typescript
CODE:
class Page {
  $<Selector extends string>(
    selector: Selector,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}

----------------------------------------

TITLE: Uploading Files with Puppeteer in TypeScript
DESCRIPTION: This snippet demonstrates how to upload a file using Puppeteer. It waits for a file input element to be available on the page, then uses the uploadFile method to select and upload a local file.

LANGUAGE: typescript
CODE:
const fileElement = await page.waitForSelector('input[type=file]');
await fileElement.uploadFile(['./path-to-local-file']);

----------------------------------------

TITLE: Example Usage of Page.emulate for iPhone Emulation
DESCRIPTION: Demonstrates how to use Page.emulate() to emulate an iPhone 15 Pro device, including browser launch, page creation, and device emulation before navigation.

LANGUAGE: typescript
CODE:
import {KnownDevices} from 'puppeteer';
const iPhone = KnownDevices['iPhone 15 Pro'];

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.emulate(iPhone);
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();

----------------------------------------

TITLE: Example Usage of emulateVisionDeficiency in Puppeteer
DESCRIPTION: Demonstrates how to use the emulateVisionDeficiency method to simulate different vision deficiencies and capture screenshots. Shows simulation of achromatopsia, deuteranopia, blurred vision, and reduced contrast.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://v8.dev/blog/10-years');

  await page.emulateVisionDeficiency('achromatopsia');
  await page.screenshot({path: 'achromatopsia.png'});

  await page.emulateVisionDeficiency('deuteranopia');
  await page.screenshot({path: 'deuteranopia.png'});

  await page.emulateVisionDeficiency('blurredVision');
  await page.screenshot({path: 'blurred-vision.png'});

  await page.emulateVisionDeficiency('reducedContrast');
  await page.screenshot({path: 'reduced-contrast.png'});

  await browser.close();
})();

----------------------------------------

TITLE: JavaScript and CSS Coverage Usage Example
DESCRIPTION: Example demonstrating how to enable JavaScript and CSS coverage, navigate to a page, collect coverage data, and calculate the percentage of code used. Uses async/await pattern with Promise.all for concurrent operations.

LANGUAGE: typescript
CODE:
// Enable both JavaScript and CSS coverage
await Promise.all([
  page.coverage.startJSCoverage(),
  page.coverage.startCSSCoverage(),
]);
// Navigate to page
await page.goto('https://example.com');
// Disable both JavaScript and CSS coverage
const [jsCoverage, cssCoverage] = await Promise.all([
  page.coverage.stopJSCoverage(),
  page.coverage.stopCSSCoverage(),
]);
let totalBytes = 0;
let usedBytes = 0;
const coverage = [...jsCoverage, ...cssCoverage];
for (const entry of coverage) {
  totalBytes += entry.text.length;
  for (const range of entry.ranges) usedBytes += range.end - range.start - 1;
}
console.log(`Bytes used: ${(usedBytes / totalBytes) * 100}%`);

----------------------------------------

TITLE: Closing a Browser with Puppeteer in TypeScript
DESCRIPTION: This snippet shows how to gracefully close a browser instance using the browser.close() method after launching it and creating a new page.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

const page = await browser.newPage();

await browser.close();

----------------------------------------

TITLE: Passing ElementHandle as Argument to Page.evaluate()
DESCRIPTION: This example shows how to pass ElementHandle instances (including JSHandles) as arguments to the pageFunction in Page.evaluate().

LANGUAGE: typescript
CODE:
const bodyHandle = await page.$('body');
const html = await page.evaluate(body => body.innerHTML, bodyHandle);
await bodyHandle.dispose();

----------------------------------------

TITLE: IFrame Text Extraction Example
DESCRIPTION: Example demonstrating how to find a specific iframe by name and extract text content from an element within it.

LANGUAGE: typescript
CODE:
const frame = page.frames().find(frame => frame.name() === 'myframe');
const text = await frame.$eval('.selector', element => element.textContent);
console.log(text);

----------------------------------------

TITLE: Deleting Cookies in Puppeteer with TypeScript
DESCRIPTION: Demonstrates how to delete specific cookies from the browser's storage using Puppeteer's deleteCookie method with detailed cookie specifications.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

// Deletes two cookies for the localhost domain.
await browser.deleteCookie(
  {
    name: 'cookie1',
    value: '1',
    domain: 'localhost',
    path: '/',
    sameParty: false,
    expires: -1,
    httpOnly: false,
    secure: false,
    sourceScheme: 'NonSecure',
  },
  {
    name: 'cookie2',
    value: '2',
    domain: 'localhost',
    path: '/',
    sameParty: false,
    expires: -1,
    httpOnly: false,
    secure: false,
    sourceScheme: 'NonSecure',
  },
);

console.log(await browser.cookies()); // print available cookies.

----------------------------------------

TITLE: Setting Viewport and Navigating to a Page with Puppeteer
DESCRIPTION: This example demonstrates how to create a new page, set its viewport, and navigate to a URL using Puppeteer. It sets a viewport of 640x480 pixels with a device scale factor of 1.

LANGUAGE: typescript
CODE:
const page = await browser.newPage();
await page.setViewport({
  width: 640,
  height: 480,
  deviceScaleFactor: 1,
});
await page.goto('https://example.com');

----------------------------------------

TITLE: Testing Chrome Extension Service Worker with Puppeteer
DESCRIPTION: Example showing how to access a Manifest V3 extension's service worker and popup window. This code demonstrates launching Chrome with an extension, accessing its service worker, and opening/testing the popup.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';
import path from 'path';

const pathToExtension = path.join(process.cwd(), 'my-extension');
const browser = await puppeteer.launch({
  args: [
    `--disable-extensions-except=${pathToExtension}`,
    `--load-extension=${pathToExtension}`,
  ],
});

const workerTarget = await browser.waitForTarget(
  // Assumes that there is only one service worker created by the extension and its URL ends with background.js.
  target =>
    target.type() === 'service_worker' &&
    target.url().endsWith('background.js'),
);

const worker = await workerTarget.worker();

// Open a popup (available for Canary channels).
await worker.evaluate('chrome.action.openPopup();');

const popupTarget = await browser.waitForTarget(
  // Assumes that there is only one page with the URL ending with popup.html and that is the popup created by the extension.
  target => target.type() === 'page' && target.url().endsWith('popup.html'),
);

const popupPage = popupTarget.asPage();

// Test the popup page as you would any other page.

await browser.close();

----------------------------------------

TITLE: Uploading Files with Puppeteer in TypeScript
DESCRIPTION: This snippet demonstrates how to upload a file using Puppeteer. It waits for a file input element to be available on the page, then uses the uploadFile method to select and upload a local file.

LANGUAGE: typescript
CODE:
const fileElement = await page.waitForSelector('input[type=file]');
await fileElement.uploadFile(['./path-to-local-file']);

----------------------------------------

TITLE: TypeScript Usage with Explicit Element Type
DESCRIPTION: Example showing how to properly type the element parameter when using Page.$eval with TypeScript to access element-specific properties.

LANGUAGE: typescript
CODE:
const searchValue = await page.$eval(
  '#search',
  (el: HTMLInputElement) => el.value,
);

----------------------------------------

TITLE: Implementing Synchronous Multiple Intercept Handlers in Puppeteer
DESCRIPTION: This example shows two synchronous handlers working together, where the first handler continues the request and the second handler checks if the request has already been handled before attempting to abort.

LANGUAGE: typescript
CODE:
page.on('request', interceptedRequest => {
  if (interceptedRequest.isInterceptResolutionHandled()) return;
  interceptedRequest.continue();
});

page.on('request', interceptedRequest => {
  if (interceptedRequest.isInterceptResolutionHandled()) return;
  interceptedRequest.abort();
});

----------------------------------------

TITLE: Scrolling an Element Using Locators in Puppeteer
DESCRIPTION: Demonstrates how to use a locator to scroll a div element by specific pixel values horizontally and vertically using mouse wheel events.

LANGUAGE: typescript
CODE:
// Scroll the div element by 10px horizontally
// and by 20 px vertically.
await page.locator('div').scroll({
  scrollLeft: 10,
  scrollTop: 20,
});

----------------------------------------

TITLE: Generating PDF with Puppeteer Page Class
DESCRIPTION: TypeScript class method signature for generating PDFs from web pages. The method accepts optional PDFOptions and returns a Promise resolving to a Uint8Array containing the PDF data.

LANGUAGE: typescript
CODE:
class Page {
  abstract pdf(options?: PDFOptions): Promise<Uint8Array>;
}

----------------------------------------

TITLE: Managing Browser Contexts in Puppeteer
DESCRIPTION: Demonstrates how to create and manage isolated browser contexts for separate automation tasks with independent cookies and storage.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

const context = await browser.createBrowserContext();

const page1 = await context.newPage();
const page2 = await context.newPage();

await context.close();

----------------------------------------

TITLE: Enable Browser Process Logging
DESCRIPTION: Demonstrates how to enable browser process logging by setting dumpio option.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({
  dumpio: true,
});

----------------------------------------

TITLE: Deleting Cookies with Puppeteer in TypeScript
DESCRIPTION: This snippet demonstrates how to delete specific cookies from the browser's storage using Puppeteer. It launches a browser and deletes two cookies for the localhost domain. After deletion, it prints all remaining cookies.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

// Deletes two cookies for the localhost domain.
await browser.deleteCookie(
  {
    name: 'cookie1',
    value: '1',
    domain: 'localhost',
    path: '/',
    sameParty: false,
    expires: -1,
    httpOnly: false,
    secure: false,
    sourceScheme: 'NonSecure',
  },
  {
    name: 'cookie2',
    value: '2',
    domain: 'localhost',
    path: '/',
    sameParty: false,
    expires: -1,
    httpOnly: false,
    secure: false,
    sourceScheme: 'NonSecure',
  },
);

console.log(await browser.cookies()); // print available cookies.

----------------------------------------

TITLE: Example of Zooming with Mouse Wheel in Puppeteer
DESCRIPTION: Demonstrates how to use the mouse wheel method to zoom into an element on a webpage by moving the mouse to the element's center and simulating a wheel event.

LANGUAGE: typescript
CODE:
await page.goto(
  'https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366',
);

const elem = await page.$('div');
const boundingBox = await elem.boundingBox();
await page.mouse.move(
  boundingBox.x + boundingBox.width / 2,
  boundingBox.y + boundingBox.height / 2,
);

await page.mouse.wheel({deltaY: -100});

----------------------------------------

TITLE: Generating PDF from Web Page using Puppeteer in TypeScript
DESCRIPTION: This code snippet demonstrates how to use Puppeteer to launch a browser, navigate to a webpage, and save it as a PDF file. It uses the Page.pdf() method to generate the PDF, which by default waits for fonts to be loaded.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch();
const page = await browser.newPage();
await page.goto('https://news.ycombinator.com', {
  waitUntil: 'networkidle2',
});
// Saves the PDF to hn.pdf.
await page.pdf({
  path: 'hn.pdf',
});

await browser.close();

----------------------------------------

TITLE: Using ElementHandle.$eval to Extract Text from Elements in Puppeteer
DESCRIPTION: This example demonstrates how to use the ElementHandle.$eval method to extract text content from specific elements within a tweet. It queries for '.like' and '.retweets' elements and retrieves their inner text.

LANGUAGE: typescript
CODE:
const tweetHandle = await page.$('.tweet');
expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');
expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');

----------------------------------------

TITLE: Defining Page.waitForSelector Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the method signature for waitForSelector, which returns a Promise resolving to an ElementHandle or null.

LANGUAGE: typescript
CODE:
class Page {
  waitForSelector<Selector extends string>(
    selector: Selector,
    options?: WaitForSelectorOptions,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}

----------------------------------------

TITLE: Creating and Using a Page in Puppeteer
DESCRIPTION: Demonstrates how to create a new page, navigate to a URL, and take a screenshot using Puppeteer.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://example.com');
  await page.screenshot({path: 'screenshot.png'});
  await browser.close();
})();

----------------------------------------

TITLE: Defining ElementHandle.click Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.click() method. It takes an optional ClickOptions parameter and returns a Promise<void>. The method scrolls the element into view if needed and uses Page.mouse to click in the center of the element.

LANGUAGE: typescript
CODE:
class ElementHandle {
  click(
    this: ElementHandle<Element>,
    options?: Readonly<ClickOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Creating Browser Context Example in Puppeteer
DESCRIPTION: Example demonstrating how to create a new browser context, create a page within that context, and navigate to a URL. Shows the practical usage of createBrowserContext() in a typical Puppeteer automation script.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();
// Create a new browser context.
const context = await browser.createBrowserContext();
// Create a new page in a pristine context.
const page = await context.newPage();
// Do stuff
await page.goto('https://example.com');

----------------------------------------

TITLE: Intercepting and Responding to Requests with Puppeteer in TypeScript
DESCRIPTION: Example of using Page.setRequestInterception() and the 'request' event to intercept all requests and respond with a 404 status. This demonstrates how to use HTTPRequest.respond() in practice.

LANGUAGE: typescript
CODE:
await page.setRequestInterception(true);
page.on('request', request => {
  request.respond({
    status: 404,
    contentType: 'text/plain',
    body: 'Not Found!',
  });
});

----------------------------------------

TITLE: Filling an Input Field Using Locators in Puppeteer
DESCRIPTION: Shows how to use a locator to fill an input field. The locator automatically detects the input type and chooses an appropriate method to fill it out with the provided value.

LANGUAGE: typescript
CODE:
// 'input' is a CSS selector.
await page.locator('input').fill('value');

----------------------------------------

TITLE: Dialog Event Handling Example
DESCRIPTION: Example showing how to handle dialog events in Puppeteer, including launching a browser, creating a new page, setting up a dialog event listener, and triggering an alert.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  page.on('dialog', async dialog => {
    console.log(dialog.message());
    await dialog.dismiss();
    await browser.close();
  });
  page.evaluate(() => alert('1'));
})();

----------------------------------------

TITLE: Defining Metrics Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for the Metrics object that contains optional numeric properties tracking various browser metrics like heap size, event listeners, DOM metrics, and timing measurements.

LANGUAGE: typescript
CODE:
export interface Metrics {
  Documents?: number;
  Frames?: number;
  JSEventListeners?: number;
  JSHeapTotalSize?: number;
  JSHeapUsedSize?: number;
  LayoutCount?: number;
  LayoutDuration?: number;
  Nodes?: number;
  RecalcStyleCount?: number;
  RecalcStyleDuration?: number;
  ScriptDuration?: number;
  TaskDuration?: number;
  Timestamp?: number;
}

----------------------------------------

TITLE: Evaluating JavaScript String in Puppeteer (TypeScript)
DESCRIPTION: Shows an alternative method of evaluating JavaScript in Puppeteer by providing a function body as a string. This approach adds two numbers directly in the string.

LANGUAGE: typescript
CODE:
// Evaluate JavaScript
const three = await page.evaluate(`
    1 + 2
`);

----------------------------------------

TITLE: Defining Page.type Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the signature of the Page.type() method which takes a selector, text string, and optional keyboard options.

LANGUAGE: typescript
CODE:
class Page {
  type(
    selector: string,
    text: string,
    options?: Readonly<KeyboardTypeOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Handling Navigation with Page Click - TypeScript
DESCRIPTION: Example showing the correct pattern for handling click events that trigger navigation, using Promise.all to avoid race conditions.

LANGUAGE: typescript
CODE:
const [response] = await Promise.all([
  page.waitForNavigation(waitOptions),
  page.click(selector, clickOptions),
]);

----------------------------------------

TITLE: Connecting to Browser using Puppeteer in TypeScript
DESCRIPTION: This snippet demonstrates how to import Puppeteer's browser-specific entrypoint and connect to a browser instance using a WebSocket URL. It also shows how to count open pages and disconnect from the browser.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer-core/lib/esm/puppeteer/puppeteer-core-browser.js';

const browser = await puppeteer.connect({
  browserWSEndpoint: wsUrl,
});

alert('Browser has ' + (await browser.pages()).length + ' pages');

browser.disconnect();

----------------------------------------

TITLE: Basic Usage Examples of Page.$eval
DESCRIPTION: Examples showing common usage patterns of Page.$eval to extract values from elements like input values, link href attributes, and HTML content.

LANGUAGE: typescript
CODE:
const searchValue = await page.$eval('#search', el => el.value);
const preloadHref = await page.$eval('link[rel=preload]', el => el.href);
const html = await page.$eval('.main-container', el => el.outerHTML);

----------------------------------------

TITLE: Using BrowserContext.waitForTarget to Find a New Window Target in TypeScript
DESCRIPTION: This example demonstrates how to use the waitForTarget method to find a target for a page opened via window.open. It waits for a target with a specific URL to appear.

LANGUAGE: typescript
CODE:
await page.evaluate(() => window.open('https://www.example.com/'));
const newWindowTarget = await browserContext.waitForTarget(
  target => target.url() === 'https://www.example.com/',
);

----------------------------------------

TITLE: Pressing Uppercase Letter Example
DESCRIPTION: Shows how to press an uppercase letter 'A' using the Shift modifier key.

LANGUAGE: typescript
CODE:
await page.keyboard.down('Shift');
await page.keyboard.press('KeyA');
await page.keyboard.up('Shift');

----------------------------------------

TITLE: File Selection Example with Puppeteer
DESCRIPTION: Demonstrates how to wait for and handle a file chooser dialog, including triggering the file selection and accepting a file. Shows the common pattern of using Promise.all for concurrent operations.

LANGUAGE: typescript
CODE:
const [fileChooser] = await Promise.all([
  page.waitForFileChooser(),
  page.click('#upload-file-button'), // some button that triggers file selection
]);
await fileChooser.accept(['/tmp/myfile.pdf']);

----------------------------------------

TITLE: Creating and Using BrowserContext - TypeScript
DESCRIPTION: Example demonstrating how to create a new browser context, open a page within it, perform operations, and properly dispose of the context.

LANGUAGE: typescript
CODE:
// Create a new browser context
const context = await browser.createBrowserContext();
// Create a new page inside context.
const page = await context.newPage();
// ... do stuff with page ...
await page.goto('https://example.com');
// Dispose context once it's no longer needed.
await context.close();

----------------------------------------

TITLE: Using BrowserContext.waitForTarget to Find a New Window Target in TypeScript
DESCRIPTION: This example demonstrates how to use the waitForTarget method to find a target for a page opened via window.open. It waits for a target with a specific URL to appear.

LANGUAGE: typescript
CODE:
await page.evaluate(() => window.open('https://www.example.com/'));
const newWindowTarget = await browserContext.waitForTarget(
  target => target.url() === 'https://www.example.com/',
);

----------------------------------------

TITLE: Defining Page.evaluate() Method Signature in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the Page.evaluate() method in Puppeteer. It defines the method's parameters and return type, including support for generic types.

LANGUAGE: typescript
CODE:
class Page {
  evaluate<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}

----------------------------------------

TITLE: Defining ScreenshotOptions Interface in TypeScript
DESCRIPTION: This code snippet defines the ScreenshotOptions interface in TypeScript. It includes various optional properties that can be used to customize screenshot capture behavior in Puppeteer.

LANGUAGE: typescript
CODE:
export interface ScreenshotOptions

----------------------------------------

TITLE: Asynchronous Intercept Handlers in Puppeteer (TypeScript)
DESCRIPTION: This snippet demonstrates asynchronous handlers working together. It shows how to handle request interception with asynchronous operations while ensuring proper resolution checks.

LANGUAGE: typescript
CODE:
page.on('request', interceptedRequest => {
  if (interceptedRequest.isInterceptResolutionHandled()) return;

  return new Promise(resolve => {
    setTimeout(() => {
      if (interceptedRequest.isInterceptResolutionHandled()) {
        resolve();
        return;
      }
      interceptedRequest.continue();
      resolve();
    }, 500);
  });
});
page.on('request', async interceptedRequest => {
  if (interceptedRequest.isInterceptResolutionHandled()) return;

  await someLongAsyncOperation();
  if (interceptedRequest.isInterceptResolutionHandled()) return;
  interceptedRequest.continue();
});

----------------------------------------

TITLE: Defining Frame.$eval() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Frame.$eval() method. It defines the method with generic types for selector, parameters, and function, allowing for flexible usage while maintaining type safety.

LANGUAGE: typescript
CODE:
class Frame {
  $eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<
      NodeFor<Selector>,
      Params
    >,
  >(
    selector: Selector,
    pageFunction: string | Func,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}

----------------------------------------

TITLE: Using PredefinedNetworkConditions in Puppeteer TypeScript
DESCRIPTION: This example demonstrates how to use PredefinedNetworkConditions with Puppeteer. It shows how to launch a browser, create a new page, and emulate different network conditions while navigating to a website.

LANGUAGE: typescript
CODE:
import {PredefinedNetworkConditions} from 'puppeteer';
(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.emulateNetworkConditions(PredefinedNetworkConditions['Slow 3G']);
  await page.goto('https://www.google.com');
  await page.emulateNetworkConditions(PredefinedNetworkConditions['Fast 3G']);
  await page.goto('https://www.google.com');
  await page.emulateNetworkConditions(PredefinedNetworkConditions['Slow 4G']); // alias to Fast 3G.
  await page.goto('https://www.google.com');
  await page.emulateNetworkConditions(PredefinedNetworkConditions['Fast 4G']);
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();

----------------------------------------

TITLE: JSHandle Usage Example in Puppeteer
DESCRIPTION: Example showing how to create a JSHandle instance that references the window object in a webpage using Page.evaluateHandle().

LANGUAGE: typescript
CODE:
const windowHandle = await page.evaluateHandle(() => window);

----------------------------------------

TITLE: Using Page.waitForNavigation with Page.click in TypeScript
DESCRIPTION: This example demonstrates how to use waitForNavigation in conjunction with a click action. It waits for navigation to complete after clicking a link, using Promise.all to handle both async operations.

LANGUAGE: typescript
CODE:
const [response] = await Promise.all([
  page.waitForNavigation(), // The promise resolves after navigation has finished
  page.click('a.my-link'), // Clicking the link will indirectly cause a navigation
]);

----------------------------------------

TITLE: Taking Base64 Encoded Screenshot with ElementHandle
DESCRIPTION: Method signature for taking a screenshot of an element and returning it as a base64 encoded string. The method requires the element to be attached to the DOM and will scroll it into view if needed.

LANGUAGE: typescript
CODE:
class ElementHandle {
  screenshot(
    options: Readonly<ScreenshotOptions> & {
      encoding: 'base64';
    },
  ): Promise<string>;
}

----------------------------------------

TITLE: Basic Request Interception in Puppeteer (TypeScript)
DESCRIPTION: This snippet demonstrates a basic request interceptor that aborts all image requests ending with .png or .jpg while allowing other requests to continue.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.setRequestInterception(true);
  page.on('request', interceptedRequest => {
    if (interceptedRequest.isInterceptResolutionHandled()) return;
    if (
      interceptedRequest.url().endsWith('.png') ||
      interceptedRequest.url().endsWith('.jpg')
    )
      interceptedRequest.abort();
    else interceptedRequest.continue();
  });
  await page.goto('https://example.com');
  await browser.close();
})();

----------------------------------------

TITLE: Implementing ElementHandle.press Method in TypeScript
DESCRIPTION: Method signature for the ElementHandle.press() function that focuses an element and simulates keyboard press events. Takes a key parameter specifying which key to press and optional KeyPressOptions. The method returns a Promise that resolves when the key press simulation is complete.

LANGUAGE: typescript
CODE:
class ElementHandle {
  press(key: KeyInput, options?: Readonly<KeyPressOptions>): Promise<void>;
}

----------------------------------------

TITLE: Implementing One-Time Event Listener in TypeScript
DESCRIPTION: TypeScript implementation of the EventEmitter.once() method, which registers a one-time event listener that automatically removes itself after being triggered once. The method accepts an event type and handler function, returning the EventEmitter instance for method chaining.

LANGUAGE: typescript
CODE:
class EventEmitter {
  once<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    handler: Handler<EventsWithWildcard<Events>[Key]>,
  ): this;
}

----------------------------------------

TITLE: Initializing Custom Chrome Browser in Puppeteer
DESCRIPTION: Launches Puppeteer with a custom Chrome executable path instead of the default bundled version.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({executablePath: '/path/to/Chrome'});

----------------------------------------

TITLE: Text Selection Example using Keyboard API
DESCRIPTION: Demonstrates how to use keyboard commands to type text, select part of it using Shift key, and delete the selection.

LANGUAGE: typescript
CODE:
await page.keyboard.type('Hello World!');
await page.keyboard.press('ArrowLeft');

await page.keyboard.down('Shift');
for (let i = 0; i < ' World'.length; i++)
  await page.keyboard.press('ArrowLeft');
await page.keyboard.up('Shift');

await page.keyboard.press('Backspace');
// Result text will end up saying 'Hello!'

----------------------------------------

TITLE: Initializing Browser Instance with Puppeteer Launch Function in TypeScript
DESCRIPTION: Function signature for launching a new browser instance using Puppeteer. Takes optional LaunchOptions parameter and returns a Promise that resolves to a Browser instance.

LANGUAGE: typescript
CODE:
launch: (options?: PuppeteerCore.LaunchOptions) => Promise<PuppeteerCore.Browser>;

----------------------------------------

TITLE: Passing Arguments to Puppeteer's evaluate Function
DESCRIPTION: Illustrates how to pass arguments to the function being evaluated in the page context. Both primitive values and JSHandles can be passed as arguments.

LANGUAGE: typescript
CODE:
const three = await page.evaluate(
  (a, b) => {
    return a + b; // 1 + 2
  },
  1,
  2
);

----------------------------------------

TITLE: Intercepting and Responding to Requests with Puppeteer in TypeScript
DESCRIPTION: This example demonstrates how to use Page.setRequestInterception() and the request event to intercept all requests and respond with a 404 status. It shows the practical application of the HTTPRequest.respond() method.

LANGUAGE: typescript
CODE:
await page.setRequestInterception(true);
page.on('request', request => {
  request.respond({
    status: 404,
    contentType: 'text/plain',
    body: 'Not Found!',
  });
});

----------------------------------------

TITLE: Defining ElementHandle.dragAndDrop Method in TypeScript
DESCRIPTION: This code snippet defines the signature of the dragAndDrop method for the ElementHandle class. It takes a target ElementHandle and optional options object with a delay property. The method returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class ElementHandle {
  dragAndDrop(
    this: ElementHandle<Element>,
    target: ElementHandle<Node>,
    options?: {
      delay: number;
    },
  ): Promise<void>;
}

----------------------------------------

TITLE: Disconnecting and Reconnecting to Browser in TypeScript
DESCRIPTION: Shows how to disconnect from a Browser instance, store its endpoint, and then reconnect to it using the stored endpoint.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();
// Store the endpoint to be able to reconnect to the browser.
const browserWSEndpoint = browser.wsEndpoint();
// Disconnect puppeteer from the browser.
await browser.disconnect();

// Use the endpoint to reestablish a connection
const browser2 = await puppeteer.connect({browserWSEndpoint});
// Close the browser.
await browser2.close();

----------------------------------------

TITLE: Using Keyboard.type Method in Puppeteer
DESCRIPTION: This example demonstrates how to use the Keyboard.type method in Puppeteer. It shows typing text instantly and with a delay to simulate user-like typing.

LANGUAGE: typescript
CODE:
await page.keyboard.type('Hello'); // Types instantly
await page.keyboard.type('World', {delay: 100}); // Types slower, like a user

----------------------------------------

TITLE: Page.$ Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the Page.$ method signature. The method accepts a selector string and returns a Promise that resolves to either an ElementHandle of the matching node or null if no element is found.

LANGUAGE: typescript
CODE:
class Page {
  $<Selector extends string>(
    selector: Selector,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}

----------------------------------------

TITLE: Page.$ Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the Page.$ method signature. The method accepts a selector string and returns a Promise that resolves to either an ElementHandle of the matching node or null if no element is found.

LANGUAGE: typescript
CODE:
class Page {
  $<Selector extends string>(
    selector: Selector,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}

----------------------------------------

TITLE: Unsubscribing from Page Events in Puppeteer
DESCRIPTION: Demonstrates how to unsubscribe from page events using the EventEmitter.off() method.

LANGUAGE: typescript
CODE:
function logRequest(interceptedRequest) {
  console.log('A request was made:', interceptedRequest.url());
}
page.on('request', logRequest);
// Sometime later...
page.off('request', logRequest);

----------------------------------------

TITLE: Handling Dialog Events with Puppeteer in TypeScript
DESCRIPTION: This example demonstrates how to use Puppeteer to launch a browser, create a new page, and handle dialog events. It shows how to log the dialog message and dismiss the dialog.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  page.on('dialog', async dialog => {
    console.log(dialog.message());
    await dialog.dismiss();
    await browser.close();
  });
  page.evaluate(() => alert('1'));
})();

----------------------------------------

TITLE: Defining Browser.newPage() Method in TypeScript
DESCRIPTION: This code snippet defines the abstract newPage() method in the Browser class. The method creates a new Page object in the default browser context and returns a Promise that resolves to the newly created Page.

LANGUAGE: typescript
CODE:
class Browser {
  abstract newPage(): Promise<Page>;
}

----------------------------------------

TITLE: Using Page.waitForSelector Across Page Navigations in TypeScript
DESCRIPTION: This example demonstrates how to use the Page.waitForSelector method across multiple page navigations. It waits for an 'img' selector on different URLs and logs the first URL where an image is found.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';
(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  let currentURL;
  page
    .waitForSelector('img')
    .then(() => console.log('First URL with image: ' + currentURL));
  for (currentURL of [
    'https://example.com',
    'https://google.com',
    'https://bbc.com',
  ]) {
    await page.goto(currentURL);
  }
  await browser.close();
})();

----------------------------------------

TITLE: Handling WebWorker Lifecycle Events in TypeScript
DESCRIPTION: Demonstrates how to listen for 'workercreated' and 'workerdestroyed' events on a page object, and how to iterate through existing workers.

LANGUAGE: ts
CODE:
page.on('workercreated', worker =>
  console.log('Worker created: ' + worker.url()),
);
page.on('workerdestroyed', worker =>
  console.log('Worker destroyed: ' + worker.url()),
);

console.log('Current workers:');
for (const worker of page.workers()) {
  console.log('  ' + worker.url());
}

----------------------------------------

TITLE: Defining Page.goto Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.goto() method. It takes a URL string and optional GoToOptions, returning a Promise that resolves to an HTTPResponse or null.

LANGUAGE: typescript
CODE:
class Page {
  goto(url: string, options?: GoToOptions): Promise<HTTPResponse | null>;
}

----------------------------------------

TITLE: Creating Locator with Function in Puppeteer (TypeScript)
DESCRIPTION: This snippet demonstrates the signature for creating a locator using a function in Puppeteer. It allows for more complex element selection logic by providing a function that returns an Awaitable value.

LANGUAGE: typescript
CODE:
class Page {
  locator<Ret>(func: () => Awaitable<Ret>): Locator<Ret>;
}

----------------------------------------

TITLE: Implementing FileChooser Accept Method in TypeScript
DESCRIPTION: Method signature for accepting file chooser requests in Puppeteer. Takes an array of file paths as input and returns a Promise that resolves when the operation is complete. File paths can be absolute or relative to the current working directory.

LANGUAGE: typescript
CODE:
class FileChooser {
  accept(paths: string[]): Promise<void>;
}

----------------------------------------

TITLE: Defining Page.waitForFunction Method Signature in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature of the Page.waitForFunction method. It defines the method's parameters and return type, including generic type parameters for flexibility.

LANGUAGE: typescript
CODE:
class Page {
  waitForFunction<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    options?: FrameWaitForFunctionOptions,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}

----------------------------------------

TITLE: Using Frame.$eval Method Example
DESCRIPTION: Simple example showing how to use Frame.$eval to retrieve the value of a search input element within a frame.

LANGUAGE: typescript
CODE:
const searchValue = await frame.$eval('#search', el => el.value);

----------------------------------------

TITLE: Adding Style Tag with URL - TypeScript Implementation
DESCRIPTION: Method signature for adding a style tag with URL to a page. Returns a Promise resolving to an ElementHandle of the injected link element.

LANGUAGE: typescript
CODE:
class Page {
  addStyleTag(
    options: FrameAddStyleTagOptions,
  ): Promise<ElementHandle<HTMLLinkElement>>;
}

----------------------------------------

TITLE: Using CDPSession for Animation Control
DESCRIPTION: Example demonstrating how to create a CDP session, enable animation controls, listen for animation events, and modify playback rate using the Chrome DevTools Protocol.

LANGUAGE: typescript
CODE:
const client = await page.createCDPSession();
await client.send('Animation.enable');
client.on('Animation.animationCreated', () =>
  console.log('Animation created!'),
);
const response = await client.send('Animation.getPlaybackRate');
console.log('playback rate is ' + response.playbackRate);
await client.send('Animation.setPlaybackRate', {
  playbackRate: response.playbackRate / 2,
});

----------------------------------------

TITLE: Defining Page.waitForFunction Method Signature in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature of the Page.waitForFunction method. It defines the method's parameters and return type, including generic type parameters for flexibility.

LANGUAGE: typescript
CODE:
class Page {
  waitForFunction<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    options?: FrameWaitForFunctionOptions,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}

----------------------------------------

TITLE: Creating Selector-based Locator in Puppeteer
DESCRIPTION: Creates a locator for elements matching the provided selector string. Supports CSS selectors, Puppeteer-specific selectors including text, ARIA, XPath, and shadow DOM queries.

LANGUAGE: typescript
CODE:
class Frame {
  locator<Selector extends string>(
    selector: Selector,
  ): Locator<NodeFor<Selector>>;
}

----------------------------------------

TITLE: Using Page.waitForFileChooser with File Upload
DESCRIPTION: Example demonstrating how to use waitForFileChooser to handle file selection programmatically. Shows waiting for the file chooser, triggering a file selection button click, and accepting a specific file.

LANGUAGE: typescript
CODE:
const [fileChooser] = await Promise.all([
  page.waitForFileChooser(),
  page.click('#upload-file-button'),
  // some button that triggers file selection
]);
await fileChooser.accept(['/tmp/myfile.pdf']);

----------------------------------------

TITLE: Defining Page.setViewport Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.setViewport method. It takes a Viewport object or null as a parameter and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Page {
  abstract setViewport(viewport: Viewport | null): Promise<void>;
}

----------------------------------------

TITLE: Initializing Puppeteer with WebDriver BiDi for Firefox and Chrome
DESCRIPTION: Example demonstrating how to launch Firefox and Chrome browsers using Puppeteer with WebDriver BiDi protocol. Firefox uses WebDriver BiDi by default, while Chrome requires explicit protocol specification.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const firefoxBrowser = await puppeteer.launch({
  browser: 'firefox', // WebDriver BiDi is used by default.
});
const page = await firefoxBrowser.newPage();
...
await firefoxBrowser.close();

const chromeBrowser = await puppeteer.launch({
  browser: 'chrome',
  protocol: 'webDriverBiDi', // CDP would be used by default for Chrome.
});
const page = await chromeBrowser.newPage();
...
await chromeBrowser.close();

----------------------------------------

TITLE: Defining Browser.target() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the abstract target() method in the Browser class. It returns a Target object associated with the default browser context.

LANGUAGE: typescript
CODE:
class Browser {
  abstract target(): Target;
}

----------------------------------------

TITLE: Using TypeScript Generics with Page.evaluateHandle for ElementHandle
DESCRIPTION: Shows how to use TypeScript generics to specify that Page.evaluateHandle will return an ElementHandle instead of a JSHandle.

LANGUAGE: typescript
CODE:
const button = await page.evaluateHandle<ElementHandle>(...);

----------------------------------------

TITLE: Configuring Multiple Browser Downloads in Puppeteer
DESCRIPTION: Configuration file setup for downloading both Chrome and Firefox browsers. Sets Chrome download to default behavior and enables Firefox download which is disabled by default.

LANGUAGE: javascript
CODE:
/**
 * @type {import("puppeteer").Configuration}
 */
module.exports = {
  // Download Chrome (default `skipDownload: false`).
  chrome: {
    skipDownload: false,
  },
  // Download Firefox (default `skipDownload: true`).
  firefox: {
    skipDownload: false,
  },
};

----------------------------------------

TITLE: Defining Page.setDefaultTimeout Method in TypeScript
DESCRIPTION: Abstract method definition for setting the default timeout value for all operations on a Puppeteer page. Takes a single numeric parameter specifying the timeout duration in milliseconds and returns void.

LANGUAGE: typescript
CODE:
class Page {
  abstract setDefaultTimeout(timeout: number): void;
}

----------------------------------------

TITLE: Setting Cookies in Puppeteer with TypeScript
DESCRIPTION: Shows how to directly set multiple cookies in the browser's storage using Puppeteer's setCookie method, including detailed cookie configuration options.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

// Sets two cookies for the localhost domain.
await browser.setCookie(
  {
    name: 'cookie1',
    value: '1',
    domain: 'localhost',
    path: '/',
    sameParty: false,
    expires: -1,
    httpOnly: false,
    secure: false,
    sourceScheme: 'NonSecure',
  },
  {
    name: 'cookie2',
    value: '2',
    domain: 'localhost',
    path: '/',
    sameParty: false,
    expires: -1,
    httpOnly: false,
    secure: false,
    sourceScheme: 'NonSecure',
  },
);

console.log(await browser.cookies()); // print available cookies.

----------------------------------------

TITLE: Implementing Mouse Wheel Zoom Example in Puppeteer
DESCRIPTION: Example showing how to use the mouse.wheel() method to zoom into an element by first navigating to a page, finding an element, calculating its center position, and then triggering a wheel event.

LANGUAGE: typescript
CODE:
await page.goto(
  'https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366',
);

const elem = await page.$('div');
const boundingBox = await elem.boundingBox();
await page.mouse.move(
  boundingBox.x + boundingBox.width / 2,
  boundingBox.y + boundingBox.height / 2,
);

await page.mouse.wheel({deltaY: -100});

----------------------------------------

TITLE: Defining Page.close() Method Signature in TypeScript
DESCRIPTION: This code snippet defines the signature of the Page.close() method in the Page class. It accepts an optional options parameter with a runBeforeUnload property and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Page {
  abstract close(options?: {runBeforeUnload?: boolean}): Promise<void>;
}

----------------------------------------

TITLE: Basic ElementHandle Usage Example
DESCRIPTION: Demonstrates how to use ElementHandle to interact with a page element, including creating a browser instance, navigating to a page, selecting an element, and clicking it.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://example.com');
  const hrefElement = await page.$('a');
  await hrefElement.click();
  // ...
})();

----------------------------------------

TITLE: Dumping Accessibility Tree Example
DESCRIPTION: Example demonstrating how to capture and log the entire accessibility tree of a page using the snapshot method.

LANGUAGE: typescript
CODE:
const snapshot = await page.accessibility.snapshot();
console.log(snapshot);

----------------------------------------

TITLE: Defining setBypassServiceWorker Method in Puppeteer's Page Class
DESCRIPTION: This snippet shows the TypeScript signature for the setBypassServiceWorker method in the Page class. It takes a boolean parameter to toggle ignoring of service workers for each request and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Page {
  abstract setBypassServiceWorker(bypass: boolean): Promise<void>;
}

----------------------------------------

TITLE: Using Page.$$eval() with Explicit Type for Element Array
DESCRIPTION: This example shows how to provide an explicit type for the elements array when using Page.$$eval() in TypeScript, which may be necessary for more specific element types.

LANGUAGE: typescript
CODE:
await page.$$eval('input', elements => {
  return elements.map(e => e.value);
});

----------------------------------------

TITLE: Defining Puppeteer Configuration Interface in TypeScript
DESCRIPTION: TypeScript interface declaration that specifies all configurable options for Puppeteer. Includes settings for browser selection, file paths, experimental features, and logging levels.

LANGUAGE: typescript
CODE:
export interface Configuration

----------------------------------------

TITLE: Passing Arguments to Page.waitForFunction in Puppeteer
DESCRIPTION: This example shows how to pass arguments from Node.js to the pageFunction in Page.waitForFunction. It waits for an element with a specific selector to appear in the page.

LANGUAGE: typescript
CODE:
const selector = '.foo';
await page.waitForFunction(
  selector => !!document.querySelector(selector),
  {},
  selector,
);

----------------------------------------

TITLE: Using Page.waitForDevicePrompt with Bluetooth Device Selection
DESCRIPTION: Example showing how to wait for a device prompt and select a specific Bluetooth device. Uses Promise.all to handle both the prompt wait and triggering click action simultaneously.

LANGUAGE: typescript
CODE:
const [devicePrompt] = Promise.all([
  page.waitForDevicePrompt(),
  page.click('#connect-bluetooth'),
]);
await devicePrompt.select(
  await devicePrompt.waitForDevice(({name}) => name.includes('My Device')),
);

----------------------------------------

TITLE: Using Frame Navigation with Click Events in TypeScript
DESCRIPTION: Example demonstrating how to use waitForNavigation in conjunction with Promise.all to handle navigation triggered by clicking a link. Shows proper synchronization of navigation and click events.

LANGUAGE: typescript
CODE:
const [response] = await Promise.all([
  // The navigation promise resolves after navigation has finished
  frame.waitForNavigation(),
  // Clicking the link will indirectly cause a navigation
  frame.click('a.my-link'),
]);

----------------------------------------

TITLE: Defining BrowserContext Class - TypeScript
DESCRIPTION: TypeScript class declaration for BrowserContext that extends EventEmitter to handle browser context events.

LANGUAGE: typescript
CODE:
export declare abstract class BrowserContext extends EventEmitter<BrowserContextEvents>

----------------------------------------

TITLE: Launching Default Headless Chrome with Puppeteer
DESCRIPTION: Demonstrates the default and explicit way to launch Chrome in the new headless mode. Both approaches are equivalent.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch();
// Equivalent to
const browser = await puppeteer.launch({headless: true});

----------------------------------------

TITLE: Implementing Frame Navigation in Puppeteer TypeScript
DESCRIPTION: Abstract method definition for navigating a frame to a specified URL. Returns a Promise that resolves to the main resource response or null. Includes options for configuring waiting behavior and handles various navigation scenarios including redirects.

LANGUAGE: typescript
CODE:
class Frame {
  abstract goto(
    url: string,
    options?: GoToOptions,
  ): Promise<HTTPResponse | null>;
}

----------------------------------------

TITLE: Defining Puppeteer Configuration Interface in TypeScript
DESCRIPTION: TypeScript interface declaration that defines the structure for Puppeteer configuration options. This interface includes properties for browser selection, cache directory settings, executable paths, and various experimental features.

LANGUAGE: typescript
CODE:
export interface Configuration

----------------------------------------

TITLE: Using JSHandle as Argument in Page.evaluateHandle
DESCRIPTION: Shows how to pass a JSHandle instance as an argument to the pageFunction in Page.evaluateHandle and process the result.

LANGUAGE: typescript
CODE:
const aHandle = await page.evaluateHandle(() => document.body);
const resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);
console.log(await resultHandle.jsonValue());
await resultHandle.dispose();

----------------------------------------

TITLE: Defining Mouse.reset() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the abstract reset() method in the Mouse class. The method resets the mouse to its default state with no buttons pressed and position at (0,0). It returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Mouse {
  abstract reset(): Promise<void>;
}

----------------------------------------

TITLE: Mouse Class Definition in TypeScript
DESCRIPTION: Abstract class definition for the Mouse class that operates in main-frame CSS pixels relative to the viewport.

LANGUAGE: typescript
CODE:
export declare abstract class Mouse

----------------------------------------

TITLE: Basic Page.$eval Usage Examples
DESCRIPTION: Examples showing how to use Page.$eval to extract values from different elements using CSS selectors.

LANGUAGE: typescript
CODE:
const searchValue = await page.$eval('#search', el => el.value);
const preloadHref = await page.$eval('link[rel=preload]', el => el.href);
const html = await page.$eval('.main-container', el => el.outerHTML);

----------------------------------------

TITLE: Defining Page.setCookie() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.setCookie() method. It takes an array of CookieParam objects as arguments and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Page {
  abstract setCookie(...cookies: CookieParam[]): Promise<void>;
}

----------------------------------------

TITLE: Creating Window Handle Example in TypeScript
DESCRIPTION: Example showing how to create a JSHandle instance referencing the window object using page.evaluateHandle().

LANGUAGE: typescript
CODE:
const windowHandle = await page.evaluateHandle(() => window);

----------------------------------------

TITLE: Adding md5 function to page using Puppeteer
DESCRIPTION: This example demonstrates how to add an md5 function to the page using Page.exposeFunction(). It uses the crypto module to compute MD5 hashes.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';
import crypto from 'crypto';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  page.on('console', msg => console.log(msg.text()));
  await page.exposeFunction('md5', text =>
    crypto.createHash('md5').update(text).digest('hex'),
  );
  await page.evaluate(async () => {
    // use window.md5 to compute hashes
    const myString = 'PUPPETEER';
    const myHash = await window.md5(myString);
    console.log(`md5 of ${myString} is ${myHash}`);
  });
  await browser.close();
})();

----------------------------------------

TITLE: Defining SystemOptions Interface in TypeScript for Puppeteer
DESCRIPTION: Declares the SystemOptions interface with properties for configuring browser launch options. It includes browser selection, release channel, and optional platform specification.

LANGUAGE: typescript
CODE:
export interface SystemOptions {
  browser: Browser;
  channel: ChromeReleaseChannel;
  platform?: BrowserPlatform;
}

----------------------------------------

TITLE: Accessing Redirect Chain in Puppeteer HTTP Requests
DESCRIPTION: Example of retrieving the redirect chain for an HTTP request in Puppeteer, demonstrating usage for both redirected and non-redirected requests.

LANGUAGE: typescript
CODE:
const response = await page.goto('http://example.com');
const chain = response.request().redirectChain();
console.log(chain.length); // 1
console.log(chain[0].url()); // 'http://example.com'

LANGUAGE: typescript
CODE:
const response = await page.goto('https://google.com');
const chain = response.request().redirectChain();
console.log(chain.length); // 0

----------------------------------------

TITLE: Installing Puppeteer with npm
DESCRIPTION: Commands for installing Puppeteer or Puppeteer-core using npm. The first command installs Puppeteer with a compatible Chrome version, while the second installs only the library without Chrome.

LANGUAGE: bash
CODE:
npm i puppeteer # Downloads compatible Chrome during installation.
npm i puppeteer-core # Alternatively, install as a library, without downloading Chrome.

----------------------------------------

TITLE: Defining Locator.click() Method in TypeScript
DESCRIPTION: This snippet defines the click() method for the Locator class in Puppeteer. It accepts optional LocatorClickOptions and returns a Promise<void>. The method is used to click on a located element in the browser.

LANGUAGE: typescript
CODE:
class Locator {
  click<ElementType extends Element>(
    this: Locator<ElementType>,
    options?: Readonly<LocatorClickOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining Frame Class in TypeScript for Puppeteer
DESCRIPTION: The TypeScript signature for the Frame class, which extends EventEmitter with FrameEvents.

LANGUAGE: typescript
CODE:
export declare abstract class Frame extends EventEmitter<FrameEvents>

----------------------------------------

TITLE: Viewport Interface Definition in TypeScript
DESCRIPTION: TypeScript interface defining viewport configuration options for Puppeteer browser automation. Includes properties for controlling viewport dimensions, device scale factor, touch events, mobile emulation, and orientation.

LANGUAGE: typescript
CODE:
export interface Viewport

----------------------------------------

TITLE: Defining EventEmitter.on() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the EventEmitter.on() method. It defines how to bind an event listener to a specific event type, using generic types for flexibility across different event types.

LANGUAGE: typescript
CODE:
class EventEmitter {
  on<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    handler: Handler<EventsWithWildcard<Events>[Key]>,
  ): this;
}

----------------------------------------

TITLE: Defining HTTPResponse Class in TypeScript
DESCRIPTION: Abstract class declaration for HTTPResponse in Puppeteer. This class represents responses received by the Page class.

LANGUAGE: typescript
CODE:
export declare abstract class HTTPResponse

----------------------------------------

TITLE: Page Event Handling Example
DESCRIPTION: Example demonstrating how to handle page load events and request monitoring

LANGUAGE: typescript
CODE:
page.once('load', () => console.log('Page loaded!'));

LANGUAGE: typescript
CODE:
function logRequest(interceptedRequest) {
  console.log('A request was made:', interceptedRequest.url());
}
page.on('request', logRequest);
// Sometime later...
page.off('request', logRequest);

----------------------------------------

TITLE: Defining EventEmitter.on() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the EventEmitter.on() method. It defines how to bind an event listener to a specific event type, using generic types for flexibility across different event types.

LANGUAGE: typescript
CODE:
class EventEmitter {
  on<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    handler: Handler<EventsWithWildcard<Events>[Key]>,
  ): this;
}

----------------------------------------

TITLE: Connecting to a Running Browser with Puppeteer in TypeScript
DESCRIPTION: This snippet demonstrates how to connect to an already running browser instance using Puppeteer's connect method. It requires a WebSocket endpoint URL for the connection.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.connect({
  browserWSEndpoint: 'ws://127.0.0.1:9222/...',
});

const page = await browser.newPage();

browser.disconnect();

----------------------------------------

TITLE: Defining EventEmitter Class in TypeScript
DESCRIPTION: The TypeScript signature for the EventEmitter class. It extends Record<EventType, unknown> and implements CommonEventEmitter with EventsWithWildcard.

LANGUAGE: typescript
CODE:
export declare class EventEmitter<Events extends Record<EventType, unknown>> implements CommonEventEmitter<EventsWithWildcard<Events>>

----------------------------------------

TITLE: Enabling DevTools for Debugging
DESCRIPTION: Shows how to enable DevTools for debugging client-side code in Puppeteer.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({devtools: true});

----------------------------------------

TITLE: Implementing Locator.fill Method in TypeScript
DESCRIPTION: TypeScript class definition for the Locator.fill method. The method takes a value parameter and optional action options, returning a Promise that resolves when the input is filled. It automatically determines the input type at runtime and uses the appropriate fill method.

LANGUAGE: typescript
CODE:
class Locator {
  fill<ElementType extends Element>(
    this: Locator<ElementType>,
    value: string,
    options?: Readonly<ActionOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining PuppeteerError Base Class in TypeScript
DESCRIPTION: Class declaration for PuppeteerError that extends the standard Error class. This class serves as the base for all Puppeteer-specific errors. The constructor is marked internal and should not be directly instantiated by third-party code.

LANGUAGE: typescript
CODE:
export declare class PuppeteerError extends Error

----------------------------------------

TITLE: Logging Pending Protocol Calls
DESCRIPTION: Shows how to log pending protocol calls for debugging unresolved async operations.

LANGUAGE: typescript
CODE:
console.log(browser.debugInfo.pendingProtocolErrors);

----------------------------------------

TITLE: Defining Keyboard.type Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Keyboard.type method. It takes a text string and optional KeyboardTypeOptions, and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Keyboard {
  abstract type(
    text: string,
    options?: Readonly<KeyboardTypeOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining ElementHandle.$() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.$() method. It takes a selector as a parameter and returns a Promise that resolves to an ElementHandle or null.

LANGUAGE: typescript
CODE:
class ElementHandle {
  $<Selector extends string>(
    selector: Selector,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}

----------------------------------------

TITLE: Adding readfile function to page using Puppeteer
DESCRIPTION: This example shows how to add a readfile function to the page using Page.exposeFunction(). It uses the fs module to read file contents asynchronously.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';
import fs from 'node:fs';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  page.on('console', msg => console.log(msg.text()));
  await page.exposeFunction('readfile', async filePath => {
    return new Promise((resolve, reject) => {
      fs.readFile(filePath, 'utf8', (err, text) => {
        if (err) reject(err);
        else resolve(text);
      });
    });
  });
  await page.evaluate(async () => {
    // use window.readfile to read contents of a file
    const content = await window.readfile('/etc/hosts');
    console.log(content);
  });
  await browser.close();
})();

----------------------------------------

TITLE: Rollup Configuration for Browser-Compatible Puppeteer Build
DESCRIPTION: Rollup configuration setup for bundling Puppeteer for browser usage. Includes essential settings for browser targeting, dependency resolution, and bundle optimization with specific exclusions for WebDriver BiDi protocol.

LANGUAGE: javascript
CODE:
import {nodeResolve} from '@rollup/plugin-node-resolve';

export default {
  input: 'main.mjs',
  output: {
    format: 'esm',
    dir: 'out',
  },
  external: ['chromium-bidi/lib/cjs/bidiMapper/BidiMapper.js'],
  plugins: [
    nodeResolve({
      browser: true,
      resolveOnly: ['puppeteer-core'],
    }),
  ],
};

----------------------------------------

TITLE: Defining Mouse.click() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the click() method in the Mouse class. It simulates a mouse click at the specified coordinates with optional configuration options. The method returns a Promise that resolves when the click operation is complete.

LANGUAGE: typescript
CODE:
class Mouse {
  abstract click(
    x: number,
    y: number,
    options?: Readonly<MouseClickOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining LaunchOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for LaunchOptions that extends ConnectOptions, specifying the complete set of configuration options available when launching a browser instance with Puppeteer.

LANGUAGE: typescript
CODE:
export interface LaunchOptions extends ConnectOptions

----------------------------------------

TITLE: Implementing Browser.close() method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the close() method for the Browser class in Puppeteer. The method is asynchronous and returns a Promise that resolves to void. It closes the current browser instance and all associated pages.

LANGUAGE: typescript
CODE:
class Browser {
  abstract close(): Promise<void>;
}

----------------------------------------

TITLE: Customizing Puppeteer Cache Directory
DESCRIPTION: Configuration to change the default browser cache location from global ~/.cache/puppeteer to a project-specific directory using path.join.

LANGUAGE: javascript
CODE:
const {join} = require('path');

/**
 * @type {import("puppeteer").Configuration}
 */
module.exports = {
  // Changes the cache location for Puppeteer.
  cacheDirectory: join(__dirname, '.cache', 'puppeteer'),
};

----------------------------------------

TITLE: Connecting to Browser with Puppeteer TypeScript Function
DESCRIPTION: Function signature for connecting to an existing browser instance using Puppeteer. The function accepts ConnectOptions as a parameter and returns a Promise that resolves to a Browser instance.

LANGUAGE: typescript
CODE:
connect: (options: PuppeteerCore.ConnectOptions) => Promise<PuppeteerCore.Browser>;

----------------------------------------

TITLE: Defining TracingOptions Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for TracingOptions that defines the structure for configuring tracing behavior in Puppeteer. Includes optional properties for specifying tracing categories, output path, and screenshot settings.

LANGUAGE: typescript
CODE:
export interface TracingOptions

----------------------------------------

TITLE: Connecting to Browser with Puppeteer TypeScript Function
DESCRIPTION: Function signature for connecting to an existing browser instance using Puppeteer. The function accepts ConnectOptions as a parameter and returns a Promise that resolves to a Browser instance.

LANGUAGE: typescript
CODE:
connect: (options: PuppeteerCore.ConnectOptions) => Promise<PuppeteerCore.Browser>;

----------------------------------------

TITLE: Defining Device Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the Device interface for Puppeteer. It includes two properties: userAgent of type string and viewport of type Viewport.

LANGUAGE: typescript
CODE:
export interface Device
{
  userAgent: string;
  viewport: Viewport;
}

----------------------------------------

TITLE: Implementing Frame.evaluateHandle Method in TypeScript
DESCRIPTION: TypeScript class definition for Frame.evaluateHandle() method that evaluates JavaScript expressions within a frame context. The method accepts a function or string to execute and additional parameters, returning a Promise that resolves to a HandleFor type containing the evaluation result.

LANGUAGE: typescript
CODE:
class Frame {
  evaluateHandle<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}

----------------------------------------

TITLE: Defining HTTPResponse.json Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the json() method of the HTTPResponse class. The method returns a Promise that resolves to any JSON-parseable value.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  json(): Promise<any>;
}

----------------------------------------

TITLE: Querying Elements with ElementHandle.$$ Method in Typescript
DESCRIPTION: Method signature for ElementHandle.$$() which accepts a selector string and optional query options. Returns a Promise that resolves to an array of ElementHandle objects matching the selector within the current element's context.

LANGUAGE: typescript
CODE:
class ElementHandle {
  $$<Selector extends string>(
    selector: Selector,
    options?: QueryOptions,
  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;
}

----------------------------------------

TITLE: Using Page.evaluate() with ElementHandle Arguments in TypeScript
DESCRIPTION: This example shows how to pass ElementHandle instances (including JSHandles) as arguments to the pageFunction in Page.evaluate(). It demonstrates retrieving the innerHTML of a body element.

LANGUAGE: typescript
CODE:
const bodyHandle = await page.$('body');
const html = await page.evaluate(body => body.innerHTML, bodyHandle);
await bodyHandle.dispose();

----------------------------------------

TITLE: Using Keyboard.sendCharacter Method in TypeScript
DESCRIPTION: This example demonstrates how to use the sendCharacter method to send a Chinese character to a page. It uses the page.keyboard object to access the method.

LANGUAGE: typescript
CODE:
page.keyboard.sendCharacter('嗨');

----------------------------------------

TITLE: Defining HTTPResponse.text Method in TypeScript
DESCRIPTION: TypeScript class definition showing the text() method signature in the HTTPResponse class. This method returns a Promise that resolves to the UTF-8 text representation of the HTTP response body.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  text(): Promise<string>;
}

----------------------------------------

TITLE: Defining CookieParam Interface in TypeScript
DESCRIPTION: This snippet defines the CookieParam interface used for setting cookies in Puppeteer. It includes various properties such as domain, expires, httpOnly, name, and value, among others, with their respective types and optionality.

LANGUAGE: typescript
CODE:
export interface CookieParam

----------------------------------------

TITLE: Using Page.evaluate() with a Promise-returning Function in TypeScript
DESCRIPTION: This example demonstrates how to use Page.evaluate() with a function that returns a Promise. The method waits for the promise to resolve and returns its value.

LANGUAGE: typescript
CODE:
const result = await frame.evaluate(() => {
  return Promise.resolve(8 * 7);
});
console.log(result); // prints "56"

----------------------------------------

TITLE: Defining CookieParam Interface in TypeScript
DESCRIPTION: This snippet defines the CookieParam interface used for setting cookies in Puppeteer. It includes various properties such as domain, expires, httpOnly, name, and value, among others, with their respective types and optionality.

LANGUAGE: typescript
CODE:
export interface CookieParam

----------------------------------------

TITLE: Defining Page.mainFrame Method in TypeScript
DESCRIPTION: Abstract class definition showing the mainFrame() method signature which returns the main Frame object of a Page instance. This is a core Puppeteer API method for accessing the primary frame content.

LANGUAGE: typescript
CODE:
class Page {
  abstract mainFrame(): Frame;
}

----------------------------------------

TITLE: Defining NetworkConditions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for NetworkConditions that allows configuring network parameters like download speed, upload speed, and latency for browser automation.

LANGUAGE: typescript
CODE:
export interface NetworkConditions

----------------------------------------

TITLE: Launching Browser with Puppeteer in TypeScript
DESCRIPTION: Method signature for launching a browser instance using Puppeteer's BrowserLauncher class. Takes optional LaunchOptions parameter and returns a Promise that resolves to a Browser instance.

LANGUAGE: typescript
CODE:
class BrowserLauncher {
  launch(options?: LaunchOptions): Promise<Browser>;
}

----------------------------------------

TITLE: Defining CommonEventEmitter.on() Method Signature in TypeScript
DESCRIPTION: This code snippet defines the TypeScript interface for the CommonEventEmitter.on() method. It specifies the method signature with generic types for event keys and handlers.

LANGUAGE: typescript
CODE:
interface CommonEventEmitter {
  on<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): this;
}

----------------------------------------

TITLE: Device Emulation Example with iPhone
DESCRIPTION: Demonstrates how to use Page.emulate() to simulate an iPhone device, including browser launch, page creation, device emulation, and navigation.

LANGUAGE: typescript
CODE:
import {KnownDevices} from 'puppeteer';
const iPhone = KnownDevices['iPhone 15 Pro'];

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.emulate(iPhone);
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();

----------------------------------------

TITLE: Defining HTTPResponse Abstract Class - TypeScript
DESCRIPTION: Abstract class declaration for HTTPResponse in Puppeteer that represents HTTP responses received by the Page class. This class is marked as internal and should not be instantiated directly.

LANGUAGE: typescript
CODE:
export declare abstract class HTTPResponse

----------------------------------------

TITLE: Defining ElementHandle.contentFrame Method for HTMLIFrameElement in TypeScript
DESCRIPTION: This snippet defines the contentFrame method for ElementHandle specifically for HTMLIFrameElements. It returns a Promise that resolves to a Frame object.

LANGUAGE: typescript
CODE:
class ElementHandle {
  abstract contentFrame(this: ElementHandle<HTMLIFrameElement>): Promise<Frame>;
}

----------------------------------------

TITLE: Filling Form Inputs with Puppeteer
DESCRIPTION: Shows how to fill form inputs using Puppeteer's locator API. Automatically detects input type and handles both <select> and <input> elements with appropriate validation checks.

LANGUAGE: typescript
CODE:
await page.locator('input').fill('value');

----------------------------------------

TITLE: Using DeviceRequestPrompt in Puppeteer
DESCRIPTION: Demonstrates how to use the DeviceRequestPrompt class to wait for a device prompt, select a specific device, and respond to the prompt in a Puppeteer script.

LANGUAGE: typescript
CODE:
const [devicePrompt] = Promise.all([
  page.waitForDevicePrompt(),
  page.click('#connect-bluetooth'),
]);
await devicePrompt.select(
  await devicePrompt.waitForDevice(({name}) => name.includes('My Device')),
);

----------------------------------------

TITLE: Text Selection Example Using Keyboard API
DESCRIPTION: Demonstrates how to use the keyboard API to type text, select part of it using Shift key, and delete the selection.

LANGUAGE: typescript
CODE:
await page.keyboard.type('Hello World!');
await page.keyboard.press('ArrowLeft');

await page.keyboard.down('Shift');
for (let i = 0; i < ' World'.length; i++)
  await page.keyboard.press('ArrowLeft');
await page.keyboard.up('Shift');

await page.keyboard.press('Backspace');
// Result text will end up saying 'Hello!'

----------------------------------------

TITLE: Defining PuppeteerNode.launch Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the launch method of the PuppeteerNode class. It takes an optional LaunchOptions parameter and returns a Promise that resolves to a Browser instance.

LANGUAGE: typescript
CODE:
class PuppeteerNode {
  launch(options?: LaunchOptions): Promise<Browser>;
}

----------------------------------------

TITLE: Defining CDPSession Class in TypeScript
DESCRIPTION: Abstract class definition for CDPSession that extends EventEmitter with CDPSessionEvents type parameter.

LANGUAGE: typescript
CODE:
export declare abstract class CDPSession extends EventEmitter<CDPSessionEvents>

----------------------------------------

TITLE: Defining ConnectOptions Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for ConnectOptions that defines various browser configuration parameters and connection options used in Puppeteer.

LANGUAGE: typescript
CODE:
export interface ConnectOptions

----------------------------------------

TITLE: Defining CDPSession Class in TypeScript
DESCRIPTION: Abstract class definition for CDPSession that extends EventEmitter with CDPSessionEvents type parameter.

LANGUAGE: typescript
CODE:
export declare abstract class CDPSession extends EventEmitter<CDPSessionEvents>

----------------------------------------

TITLE: Selector Query Example with Arguments - TypeScript
DESCRIPTION: Example showing how to pass arguments from Node.js to the waitForFunction predicate to check for element existence.

LANGUAGE: typescript
CODE:
const selector = '.foo';
await frame.waitForFunction(
  selector => !!document.querySelector(selector),
  {}, // empty options object
  selector,
);

----------------------------------------

TITLE: Defining CustomQueryHandler Interface in TypeScript
DESCRIPTION: TypeScript interface that defines the structure for custom query handlers in Puppeteer. Contains two optional methods: queryAll for finding multiple nodes and queryOne for finding a single node matching a selector.

LANGUAGE: typescript
CODE:
export interface CustomQueryHandler

----------------------------------------

TITLE: Extracting Text from an IFrame in Puppeteer using TypeScript
DESCRIPTION: An example showing how to find a specific frame by name and extract text content from an element within that frame.

LANGUAGE: typescript
CODE:
const frame = page.frames().find(frame => frame.name() === 'myframe');
const text = await frame.$eval('.selector', element => element.textContent);
console.log(text);

----------------------------------------

TITLE: Defining BrowserContext.close Method in TypeScript
DESCRIPTION: Abstract method definition for closing a browser context in Puppeteer. The method returns a Promise that resolves to void and closes all associated pages. Note that the default browser context cannot be closed.

LANGUAGE: typescript
CODE:
class BrowserContext {
  abstract close(): Promise<void>;
}

----------------------------------------

TITLE: Defining Puppeteer.connect() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Puppeteer.connect() method. It takes ConnectOptions as a parameter and returns a Promise that resolves to a Browser instance.

LANGUAGE: typescript
CODE:
class Puppeteer {
  connect(options: ConnectOptions): Promise<Browser>;
}

----------------------------------------

TITLE: Creating Chrome DevTools Protocol Session in Puppeteer
DESCRIPTION: This snippet shows the signature of the createCDPSession() method in the Page class. It returns a Promise that resolves to a CDPSession object, allowing interaction with the Chrome DevTools Protocol.

LANGUAGE: typescript
CODE:
class Page {
  abstract createCDPSession(): Promise<CDPSession>;
}

----------------------------------------

TITLE: CustomQueryHandler Property Types
DESCRIPTION: Type definitions for the queryAll and queryOne methods of the CustomQueryHandler interface. These methods accept a Node and selector string as parameters and return either an Iterable of Nodes or a single Node/null respectively.

LANGUAGE: typescript
CODE:
(node: Node, selector: string) => Iterable<Node>

LANGUAGE: typescript
CODE:
(node: Node, selector: string) => Node | null

----------------------------------------

TITLE: Defining BrowserLauncher.launch() Method in TypeScript
DESCRIPTION: This code snippet defines the launch() method within the BrowserLauncher class. It takes an optional LaunchOptions parameter and returns a Promise that resolves to a Browser object.

LANGUAGE: typescript
CODE:
class BrowserLauncher {
  launch(options?: LaunchOptions): Promise<Browser>;
}

----------------------------------------

TITLE: Defining Frame.select() Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the signature of the select() method in the Frame class. The method accepts a selector string and variable number of value strings, returning a Promise of selected values.

LANGUAGE: typescript
CODE:
class Frame {
  select(selector: string, ...values: string[]): Promise<string[]>;
}

----------------------------------------

TITLE: Using KnownDevices for Page Emulation in Puppeteer
DESCRIPTION: An example demonstrating how to use the KnownDevices variable to emulate an iPhone 15 Pro device in Puppeteer. This code snippet shows how to launch a browser, create a new page, apply the device emulation, and navigate to a website.

LANGUAGE: typescript
CODE:
import {KnownDevices} from 'puppeteer';
const iPhone = KnownDevices['iPhone 15 Pro'];

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.emulate(iPhone);
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();

----------------------------------------

TITLE: Defining HTTPResponse.text() Method in TypeScript
DESCRIPTION: This snippet defines the text() method for the HTTPResponse class. The method returns a Promise that resolves to a string representation of the response body in UTF-8 encoding.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  text(): Promise<string>;
}

----------------------------------------

TITLE: Adding HTMLStyleElement to Frame in Puppeteer
DESCRIPTION: This method adds a HTMLStyleElement into the frame with the desired URL. It returns a Promise that resolves to an ElementHandle of the loaded <style> element.

LANGUAGE: typescript
CODE:
class Frame {
  addStyleTag(
    options: Omit<FrameAddStyleTagOptions, 'url'>,
  ): Promise<ElementHandle<HTMLStyleElement>>;
}

----------------------------------------

TITLE: Defining Frame.select() Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the signature of the select() method in the Frame class. The method accepts a selector string and variable number of value strings, returning a Promise of selected values.

LANGUAGE: typescript
CODE:
class Frame {
  select(selector: string, ...values: string[]): Promise<string[]>;
}

----------------------------------------

TITLE: Defining Connection.fromSession() Method in TypeScript
DESCRIPTION: This code snippet defines the static fromSession() method for the Connection class. It takes a CDPSession as a parameter and returns either a Connection object or undefined.

LANGUAGE: typescript
CODE:
class Connection {
  static fromSession(session: CDPSession): Connection | undefined;
}

----------------------------------------

TITLE: Basic Text Typing Example with Delay Options
DESCRIPTION: Demonstrates typing text into an element both instantly and with a delay to simulate user typing.

LANGUAGE: typescript
CODE:
await elementHandle.type('Hello'); // Types instantly
await elementHandle.type('World', {delay: 100}); // Types slower, like a user

----------------------------------------

TITLE: Text Selection Implementation
DESCRIPTION: Example demonstrating how to select content between nodes using document.getSelection() and range operations.

LANGUAGE: typescript
CODE:
await page.evaluate(
  (from, to) => {
    const selection = from.getRootNode().getSelection();
    const range = document.createRange();
    range.setStartBefore(from);
    range.setEndAfter(to);
    selection.removeAllRanges();
    selection.addRange(range);
  },
  fromJSHandle,
  toJSHandle
);

----------------------------------------

TITLE: Defining TargetType Enum in TypeScript for Puppeteer
DESCRIPTION: TypeScript enumeration that defines the possible target types in Puppeteer. Target types include background pages, browser instances, service workers, shared workers, webviews, and standard pages.

LANGUAGE: typescript
CODE:
export declare enum TargetType {
  BACKGROUND_PAGE = "background_page",
  BROWSER = "browser",
  OTHER = "other",
  PAGE = "page",
  SERVICE_WORKER = "service_worker",
  SHARED_WORKER = "shared_worker",
  WEBVIEW = "webview"
}

----------------------------------------

TITLE: Querying Frame Elements with Frame.$$ Method in TypeScript
DESCRIPTION: Method signature for Frame.$$ that enables querying multiple elements within a frame using selectors. Returns a promise resolving to an array of ElementHandle objects representing the matching elements. Supports CSS selectors, Puppeteer-specific selectors, and combined queries across shadow roots.

LANGUAGE: typescript
CODE:
class Frame {
  $$<Selector extends string>(
    selector: Selector,
    options?: QueryOptions,
  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;
}

----------------------------------------

TITLE: Defining PDFOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the PDFOptions interface used for configuring PDF generation in Puppeteer. It includes various optional properties for customizing the PDF output.

LANGUAGE: typescript
CODE:
export interface PDFOptions

----------------------------------------

TITLE: Defining ElementHandle.boxModel() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the boxModel() method of the ElementHandle class. The method returns a Promise that resolves to either a BoxModel object or null.

LANGUAGE: typescript
CODE:
class ElementHandle {
  boxModel(): Promise<BoxModel | null>;
}

----------------------------------------

TITLE: Defining Awaitable Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the Awaitable type, which is a union type representing either a value of type T or a Promise-like object that resolves to T. This type is useful for functions that can handle both synchronous and asynchronous inputs.

LANGUAGE: typescript
CODE:
export type Awaitable<T> = T | PromiseLike<T>;

----------------------------------------

TITLE: Defining Page.click() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.click() method in Puppeteer. It defines the method parameters and return type.

LANGUAGE: typescript
CODE:
class Page {
  click(selector: string, options?: Readonly<ClickOptions>): Promise<void>;
}

----------------------------------------

TITLE: Defining Page.cookies() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.cookies() method. It's an abstract method in the Page class that takes optional URL parameters and returns a Promise resolving to an array of Cookie objects.

LANGUAGE: typescript
CODE:
class Page {
  abstract cookies(...urls: string[]): Promise<Cookie[]>;
}

----------------------------------------

TITLE: Defining PuppeteerError Class in TypeScript
DESCRIPTION: This code snippet defines the PuppeteerError class, which extends the built-in Error class. It serves as the base class for all Puppeteer-specific errors. The class is exported and declared using TypeScript syntax.

LANGUAGE: typescript
CODE:
export declare class PuppeteerError extends Error

----------------------------------------

TITLE: Using JavaScript and CSS Coverage in Puppeteer
DESCRIPTION: Demonstrates how to use JavaScript and CSS coverage to calculate the percentage of initially executed code on a web page. It includes starting and stopping coverage, navigating to a page, and calculating used bytes.

LANGUAGE: typescript
CODE:
// Enable both JavaScript and CSS coverage
await Promise.all([
  page.coverage.startJSCoverage(),
  page.coverage.startCSSCoverage(),
]);
// Navigate to page
await page.goto('https://example.com');
// Disable both JavaScript and CSS coverage
const [jsCoverage, cssCoverage] = await Promise.all([
  page.coverage.stopJSCoverage(),
  page.coverage.stopCSSCoverage(),
]);
let totalBytes = 0;
let usedBytes = 0;
const coverage = [...jsCoverage, ...cssCoverage];
for (const entry of coverage) {
  totalBytes += entry.text.length;
  for (const range of entry.ranges) usedBytes += range.end - range.start - 1;
}
console.log(`Bytes used: ${(usedBytes / totalBytes) * 100}%`);

----------------------------------------

TITLE: Defining CommonEventEmitter.off Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the off() method of CommonEventEmitter. The method removes event listeners for specified event types, with an optional handler parameter. Returns the event emitter instance for method chaining.

LANGUAGE: typescript
CODE:
interface CommonEventEmitter {
  off<Key extends keyof Events>(
    type: Key,
    handler?: Handler<Events[Key]>,
  ): this;
}

----------------------------------------

TITLE: Defining Permission Type in TypeScript for Puppeteer
DESCRIPTION: A TypeScript type definition that lists all available browser permissions that can be requested or managed through Puppeteer. Includes permissions for hardware access, sensors, clipboard operations, and various browser features.

LANGUAGE: typescript
CODE:
export type Permission =
  | 'accelerometer'
  | 'ambient-light-sensor'
  | 'background-sync'
  | 'camera'
  | 'clipboard-read'
  | 'clipboard-sanitized-write'
  | 'clipboard-write'
  | 'geolocation'
  | 'gyroscope'
  | 'idle-detection'
  | 'keyboard-lock'
  | 'magnetometer'
  | 'microphone'
  | 'midi-sysex'
  | 'midi'
  | 'notifications'
  | 'payment-handler'
  | 'persistent-storage'
  | 'pointer-lock';

----------------------------------------

TITLE: Defining Device Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the Device interface for Puppeteer. It includes two properties: userAgent as a string and viewport of type Viewport.

LANGUAGE: typescript
CODE:
export interface Device {
  userAgent: string;
  viewport: Viewport;
}

----------------------------------------

TITLE: Defining CommonEventEmitter.off Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the off() method of CommonEventEmitter. The method removes event listeners for specified event types, with an optional handler parameter. Returns the event emitter instance for method chaining.

LANGUAGE: typescript
CODE:
interface CommonEventEmitter {
  off<Key extends keyof Events>(
    type: Key,
    handler?: Handler<Events[Key]>,
  ): this;
}

----------------------------------------

TITLE: Defining Permission Type in TypeScript for Puppeteer
DESCRIPTION: A TypeScript type definition that enumerates all possible browser permission values that can be requested or managed in Puppeteer. This includes permissions for hardware access (like camera and microphone), sensors (accelerometer, gyroscope), and various browser features (clipboard, notifications).

LANGUAGE: typescript
CODE:
export type Permission =
  | 'accelerometer'
  | 'ambient-light-sensor'
  | 'background-sync'
  | 'camera'
  | 'clipboard-read'
  | 'clipboard-sanitized-write'
  | 'clipboard-write'
  | 'geolocation'
  | 'gyroscope'
  | 'idle-detection'
  | 'keyboard-lock'
  | 'magnetometer'
  | 'microphone'
  | 'midi-sysex'
  | 'midi'
  | 'notifications'
  | 'payment-handler'
  | 'persistent-storage'
  | 'pointer-lock';

----------------------------------------

TITLE: Defining Keyboard.sendCharacter Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript definition of the sendCharacter method in the Keyboard class. It takes a single character as input and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Keyboard {
  abstract sendCharacter(char: string): Promise<void>;
}

----------------------------------------

TITLE: Setting Page Geolocation Example in TypeScript
DESCRIPTION: Example showing how to set a page's geolocation coordinates using latitude and longitude values.

LANGUAGE: typescript
CODE:
await page.setGeolocation({latitude: 59.95, longitude: 30.31667});

----------------------------------------

TITLE: Using Page.$$eval() with Generic Return Type
DESCRIPTION: This example demonstrates how to use a generic type to specify the expected return type from Page.$$eval() when the TypeScript compiler cannot infer it automatically.

LANGUAGE: typescript
CODE:
const allInputValues = await page.$$eval('input', elements =>
  elements.map(e => e.textContent),
);

----------------------------------------

TITLE: Defining CookieData Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for CookieData that specifies all possible properties for setting browser cookies. This includes standard cookie properties like domain, name, and value, as well as advanced properties like partitionKey and Chrome-specific features.

LANGUAGE: typescript
CODE:
export interface CookieData

----------------------------------------

TITLE: Keyboard Class Definition in TypeScript
DESCRIPTION: Abstract class definition for the Keyboard class in Puppeteer.

LANGUAGE: typescript
CODE:
export declare abstract class Keyboard

----------------------------------------

TITLE: Setting Clipboard Permissions
DESCRIPTION: Example showing how to set clipboard read/write permissions for the browser context.

LANGUAGE: typescript
CODE:
await browser
  .defaultBrowserContext()
  .overridePermissions('<your origin>', ['clipboard-read', 'clipboard-write']);

----------------------------------------

TITLE: Uninstalling Browser in Puppeteer - TypeScript Function Signature
DESCRIPTION: Function signature for the uninstall operation that removes installed browser instances. Takes UninstallOptions as a parameter and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
export declare function uninstall(options: UninstallOptions): Promise<void>;

----------------------------------------

TITLE: Defining CustomQueryHandler Interface in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the CustomQueryHandler interface with two optional properties: queryAll and queryOne. These properties are functions that allow for custom node selection based on a given selector.

LANGUAGE: typescript
CODE:
export interface CustomQueryHandler {
  queryAll?: (node: Node, selector: string) => Iterable<Node>;
  queryOne?: (node: Node, selector: string) => Node | null;
}

----------------------------------------

TITLE: Using Page.select for Single and Multiple Selections
DESCRIPTION: Examples showing how to use Page.select() for both single and multiple option selections in a <select> element.

LANGUAGE: typescript
CODE:
page.select('select#colors', 'blue'); // single selection
page.select('select#colors', 'red', 'green', 'blue'); // multiple selections

----------------------------------------

TITLE: Defining Frame.hover() Method in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the hover() method in the Frame class. The method takes a selector string as a parameter and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Frame {
  hover(selector: string): Promise<void>;
}

----------------------------------------

TITLE: Defining Frame.click() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Frame.click() method. It takes a selector string and optional ClickOptions, returning a Promise<void>.

LANGUAGE: typescript
CODE:
class Frame {
  click(selector: string, options?: Readonly<ClickOptions>): Promise<void>;
}

----------------------------------------

TITLE: Form Input and Submission with Puppeteer
DESCRIPTION: Shows how to type text into an input field and submit a form by pressing Enter using ElementHandle methods.

LANGUAGE: typescript
CODE:
const elementHandle = await page.$('input');
await elementHandle.type('some text');
await elementHandle.press('Enter');

----------------------------------------

TITLE: Frame.type Method Signature in TypeScript
DESCRIPTION: TypeScript class method signature showing the Frame.type() method definition with its parameters and return type.

LANGUAGE: typescript
CODE:
class Frame {
  type(
    selector: string,
    text: string,
    options?: Readonly<KeyboardTypeOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining Page.url() Method in TypeScript
DESCRIPTION: This code snippet defines the url() method on the Page class in TypeScript. The method returns a string representing the page's URL.

LANGUAGE: typescript
CODE:
class Page {
  url(): string;
}

----------------------------------------

TITLE: Defining CDPSession Class in TypeScript
DESCRIPTION: Class declaration showing CDPSession extending EventEmitter with CDPSessionEvents type parameter.

LANGUAGE: typescript
CODE:
export declare abstract class CDPSession extends EventEmitter<CDPSessionEvents>

----------------------------------------

TITLE: Defining Browser.defaultBrowserContext Method in TypeScript
DESCRIPTION: Abstract method definition in the Browser class that returns the default BrowserContext. The default browser context is a special context that cannot be closed and is always available.

LANGUAGE: typescript
CODE:
class Browser {
  abstract defaultBrowserContext(): BrowserContext;
}

----------------------------------------

TITLE: Defining DeviceRequestPrompt Class in TypeScript
DESCRIPTION: Declares the DeviceRequestPrompt class exported from Puppeteer. This class is used to respond to device requests from web pages.

LANGUAGE: typescript
CODE:
export declare class DeviceRequestPrompt

----------------------------------------

TITLE: Defining CDPSession Class in TypeScript
DESCRIPTION: Class declaration showing CDPSession extending EventEmitter with CDPSessionEvents type parameter.

LANGUAGE: typescript
CODE:
export declare abstract class CDPSession extends EventEmitter<CDPSessionEvents>

----------------------------------------

TITLE: Implementing Touchscreen Tap Method in Typescript - Puppeteer
DESCRIPTION: TypeScript class definition for the Touchscreen.tap() method that simulates touch events. The method takes x and y coordinates as parameters and returns a Promise that resolves to void. It's used to simulate touch interactions at specific screen coordinates.

LANGUAGE: typescript
CODE:
class Touchscreen {
  tap(x: number, y: number): Promise<void>;
}

----------------------------------------

TITLE: Using Page.select for Single and Multiple Selections
DESCRIPTION: Examples demonstrating how to use Page.select method for both single and multiple option selections in a select element.

LANGUAGE: typescript
CODE:
page.select('select#colors', 'blue'); // single selection
page.select('select#colors', 'red', 'green', 'blue'); // multiple selections

----------------------------------------

TITLE: Defining BrowserContext.setCookie() Method in TypeScript
DESCRIPTION: This code snippet defines the setCookie() method in the BrowserContext class. It takes an array of CookieData objects as parameters and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class BrowserContext {
  abstract setCookie(...cookies: CookieData[]): Promise<void>;
}

----------------------------------------

TITLE: Defining ResponseForRequest Interface in TypeScript
DESCRIPTION: TypeScript interface definition for ResponseForRequest that specifies the structure of HTTP response data. It includes properties for body content, content type, headers, and status code. The headers property supports multiple header values through string arrays.

LANGUAGE: typescript
CODE:
export interface ResponseForRequest {
  body: string | Uint8Array;
  contentType: string;
  headers?: Record<string, string | string[] | unknown>;
  status: number;
}

----------------------------------------

TITLE: Viewport Size Change Monitor Example
DESCRIPTION: Example demonstrating how to use waitForFunction to monitor viewport size changes in a browser page.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');
  page.setViewport({width: 50, height: 50});
  await watchDog;
  await browser.close();
})();

----------------------------------------

TITLE: Defining Frame.goto() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Frame.goto() method in the Frame class. It takes a URL string and optional GoToOptions, returning a Promise that resolves to an HTTPResponse or null.

LANGUAGE: typescript
CODE:
class Frame {
  abstract goto(
    url: string,
    options?: GoToOptions,
  ): Promise<HTTPResponse | null>;
}

----------------------------------------

TITLE: Using HTTPRequest.continue() to Modify Request Headers in Puppeteer
DESCRIPTION: This example demonstrates how to use the HTTPRequest.continue() method to intercept and modify request headers in Puppeteer. It shows enabling request interception and setting up an event listener to modify headers.

LANGUAGE: typescript
CODE:
await page.setRequestInterception(true);
page.on('request', request => {
  // Override headers
  const headers = Object.assign({}, request.headers(), {
    foo: 'bar', // set "foo" header
    origin: undefined, // remove "origin" header
  });
  request.continue({headers});
});

----------------------------------------

TITLE: Defining FrameEvents Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for FrameEvents that extends Record type to map EventType to unknown values. This interface is used to type frame-related events in Puppeteer's event handling system.

LANGUAGE: typescript
CODE:
export interface FrameEvents extends Record<EventType, unknown>

----------------------------------------

TITLE: Basic Text Typing Example with Puppeteer
DESCRIPTION: Demonstrates basic usage of ElementHandle.type() with different typing speeds using the delay option.

LANGUAGE: typescript
CODE:
await elementHandle.type('Hello'); // Types instantly
await elementHandle.type('World', {delay: 100}); // Types slower, like a user

----------------------------------------

TITLE: Defining BrowserContextOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the BrowserContextOptions interface, which is used to configure browser contexts in Puppeteer. It includes optional properties for download behavior, proxy bypass list, and proxy server settings.

LANGUAGE: typescript
CODE:
export interface BrowserContextOptions {
  downloadBehavior?: DownloadBehavior;
  proxyBypassList?: string[];
  proxyServer?: string;
}

----------------------------------------

TITLE: Defining BrowserContextOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the BrowserContextOptions interface, which is used to configure browser contexts in Puppeteer. It includes optional properties for download behavior, proxy bypass list, and proxy server settings.

LANGUAGE: typescript
CODE:
export interface BrowserContextOptions {
  downloadBehavior?: DownloadBehavior;
  proxyBypassList?: string[];
  proxyServer?: string;
}

----------------------------------------

TITLE: Defining BrowserContextOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the BrowserContextOptions interface, which is used to configure browser contexts in Puppeteer. It includes optional properties for download behavior, proxy bypass list, and proxy server settings.

LANGUAGE: typescript
CODE:
export interface BrowserContextOptions {
  downloadBehavior?: DownloadBehavior;
  proxyBypassList?: string[];
  proxyServer?: string;
}

----------------------------------------

TITLE: Using Puppeteer.registerCustomQueryHandler in JavaScript
DESCRIPTION: This example demonstrates how to import Puppeteer, register a custom query handler named 'text', and then use it to select an element on a page. The custom handler can be used by prepending the selection string with the registered name.

LANGUAGE: javascript
CODE:
import {Puppeteer}, puppeteer from 'puppeteer';

Puppeteer.registerCustomQueryHandler('text', { … });
const aHandle = await page.$('text/…');

----------------------------------------

TITLE: Using HTTPRequest.continue() to Modify Request Headers in Puppeteer
DESCRIPTION: This example demonstrates how to use the HTTPRequest.continue() method to intercept and modify request headers in Puppeteer. It shows enabling request interception and setting up an event listener to modify headers.

LANGUAGE: typescript
CODE:
await page.setRequestInterception(true);
page.on('request', request => {
  // Override headers
  const headers = Object.assign({}, request.headers(), {
    foo: 'bar', // set "foo" header
    origin: undefined, // remove "origin" header
  });
  request.continue({headers});
});

----------------------------------------

TITLE: Using Page.waitForFrame with Frame Name Check
DESCRIPTION: Example showing how to use waitForFrame method to wait for a frame with a specific name using an async predicate function.

LANGUAGE: typescript
CODE:
const frame = await page.waitForFrame(async frame => {
  return frame.name() === 'Test';
});

----------------------------------------

TITLE: Defining Mouse.reset() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the abstract reset() method in the Mouse class. The method resets the mouse to its default state with no buttons pressed and position at (0,0). It returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Mouse {
  abstract reset(): Promise<void>;
}

----------------------------------------

TITLE: Implementing SecurityDetails.validTo Method in TypeScript
DESCRIPTION: Method signature for getting the certificate expiration timestamp. Returns a Unix timestamp number indicating when the security certificate's validity period ends.

LANGUAGE: typescript
CODE:
class SecurityDetails {
  validTo(): number;
}

----------------------------------------

TITLE: Declaring DeviceRequestPromptDevice Class in TypeScript
DESCRIPTION: Class declaration for DeviceRequestPromptDevice which represents a device in a request prompt. This class contains properties for device ID and name, and is marked as internal with restricted construction access.

LANGUAGE: typescript
CODE:
export declare class DeviceRequestPromptDevice

----------------------------------------

TITLE: Declaring SecurityDetails Class in TypeScript
DESCRIPTION: This snippet shows the TypeScript declaration for the SecurityDetails class in Puppeteer. The class represents security details of responses received over secure connections.

LANGUAGE: typescript
CODE:
export declare class SecurityDetails

----------------------------------------

TITLE: Defining Touchscreen.touchMove Method in TypeScript
DESCRIPTION: TypeScript class method definition for touchMove that handles touch movement events. Takes x and y coordinates as parameters and returns a Promise that resolves to void. Note that actual touch events may be throttled by browsers like Chrome for optimization.

LANGUAGE: typescript
CODE:
class Touchscreen {
  touchMove(x: number, y: number): Promise<void>;
}

----------------------------------------

TITLE: Defining WaitTimeoutOptions Interface in TypeScript
DESCRIPTION: Interface definition for WaitTimeoutOptions that specifies two optional properties: a signal for canceling wait operations and a timeout value in milliseconds. The timeout property defaults to 30,000ms and can be modified using Page.setDefaultTimeout().

LANGUAGE: typescript
CODE:
export interface WaitTimeoutOptions

----------------------------------------

TITLE: Logging Focused Node's Name in TypeScript
DESCRIPTION: This example shows how to capture the accessibility snapshot, find the focused node, and log its name. It includes a recursive function to search for the focused node in the tree.

LANGUAGE: typescript
CODE:
const snapshot = await page.accessibility.snapshot();
const node = findFocusedNode(snapshot);
console.log(node && node.name);

function findFocusedNode(node) {
  if (node.focused) return node;
  for (const child of node.children || []) {
    const foundNode = findFocusedNode(child);
    return foundNode;
  }
  return null;
}

----------------------------------------

TITLE: Retrieving Active Targets in Puppeteer BrowserContext
DESCRIPTION: Method signature for retrieving all active targets within a Puppeteer browser context. The method returns an array of Target objects representing active pages, extensions, and other targetable resources in the context.

LANGUAGE: typescript
CODE:
class BrowserContext {
  abstract targets(): Target[];
}

----------------------------------------

TITLE: Using Frame.select for Single and Multiple Selections - TypeScript
DESCRIPTION: Examples demonstrating how to use Frame.select() for both single and multiple value selections in a <select> element.

LANGUAGE: typescript
CODE:
frame.select('select#colors', 'blue'); // single selection
frame.select('select#colors', 'red', 'green', 'blue'); // multiple selections

----------------------------------------

TITLE: Defining Frame.isDetached Method in TypeScript - Puppeteer
DESCRIPTION: TypeScript class definition showing the isDetached() method signature in the Frame class. The method returns a boolean indicating whether the frame has been detached from its parent.

LANGUAGE: typescript
CODE:
class Frame {
  isDetached(): boolean;
}

----------------------------------------

TITLE: Defining EventEmitter Class in TypeScript
DESCRIPTION: This snippet shows the TypeScript declaration of the EventEmitter class. It extends Record<EventType, unknown> and implements CommonEventEmitter with EventsWithWildcard.

LANGUAGE: typescript
CODE:
export declare class EventEmitter<Events extends Record<EventType, unknown>> implements CommonEventEmitter<EventsWithWildcard<Events>>

----------------------------------------

TITLE: ElementHandle.type Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the type() method signature with its parameters and return type.

LANGUAGE: typescript
CODE:
class ElementHandle {
  type(text: string, options?: Readonly<KeyboardTypeOptions>): Promise<void>;
}

----------------------------------------

TITLE: ElementHandle.type Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the type() method signature with its parameters and return type.

LANGUAGE: typescript
CODE:
class ElementHandle {
  type(text: string, options?: Readonly<KeyboardTypeOptions>): Promise<void>;
}

----------------------------------------

TITLE: Defining BrowserEvents Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the BrowserEvents interface, which extends Record<EventType, unknown>. It includes properties for various browser events such as disconnected, targetchanged, targetcreated, and targetdestroyed.

LANGUAGE: typescript
CODE:
export interface BrowserEvents extends Record<EventType, unknown> {
  disconnected: undefined;
  targetchanged: Target;
  targetcreated: Target;
  targetdestroyed: Target;
}

----------------------------------------

TITLE: Implementing hasPostData Method in HTTPRequest Class - TypeScript
DESCRIPTION: Abstract method definition for checking if an HTTP request contains POST data. Returns a boolean indicating whether the request includes POST data. Important for determining if POST data exists before attempting to access it via postData() or fetchPostData() methods.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract hasPostData(): boolean;
}

----------------------------------------

TITLE: Adding Link Element with Frame.addStyleTag
DESCRIPTION: Method signature for adding an HTMLLinkElement to a frame with a specified URL. Takes FrameAddStyleTagOptions and returns a Promise resolving to an ElementHandle of the created link element.

LANGUAGE: typescript
CODE:
class Frame {
  addStyleTag(
    options: FrameAddStyleTagOptions,
  ): Promise<ElementHandle<HTMLLinkElement>>;
}

----------------------------------------

TITLE: Defining EvaluateFuncWith Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the EvaluateFuncWith type, which is a generic function type used in Puppeteer for evaluation purposes. It takes two type parameters V and T, and returns an Awaitable<unknown>.

LANGUAGE: typescript
CODE:
export type EvaluateFuncWith<V, T extends unknown[]> = (
  ...params: [V, ...InnerParams<T>]
) => Awaitable<unknown>;

----------------------------------------

TITLE: Defining Page.waitForNavigation Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the waitForNavigation method in the Page class. It accepts optional WaitForOptions and returns a Promise that resolves to an HTTPResponse or null.

LANGUAGE: typescript
CODE:
class Page {
  waitForNavigation(options?: WaitForOptions): Promise<HTTPResponse | null>;
}

----------------------------------------

TITLE: Defining AutofillData Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the AutofillData interface for Puppeteer. It includes a single property 'creditCard' which is an object containing credit card information fields. This interface is likely used for autofilling credit card data in web forms.

LANGUAGE: typescript
CODE:
export interface AutofillData

----------------------------------------

TITLE: Running Basic Puppeteer Tests
DESCRIPTION: Basic commands for running all platform-applicable tests and building code before testing local changes.

LANGUAGE: bash
CODE:
npm test

npm run build --workspace=@puppeteer-test/test && npm test

----------------------------------------

TITLE: Defining getDefaultNavigationTimeout Method in Puppeteer's Page Class
DESCRIPTION: This code snippet defines the getDefaultNavigationTimeout() method in the Page class of Puppeteer. The method returns the maximum navigation time in milliseconds as a number.

LANGUAGE: typescript
CODE:
class Page {
  abstract getDefaultNavigationTimeout(): number;
}

----------------------------------------

TITLE: Defining KnownDevices TypeScript Signature for Puppeteer
DESCRIPTION: The TypeScript signature for the KnownDevices variable, which is a readonly record of device names mapped to Device objects. It includes a comprehensive list of mobile and tablet devices for emulation purposes.

LANGUAGE: typescript
CODE:
KnownDevices: Readonly<
  Record<
    | 'Blackberry PlayBook'
    | 'Blackberry PlayBook landscape'
    | 'BlackBerry Z30'
    | 'BlackBerry Z30 landscape'
    | 'Galaxy Note 3'
    | 'Galaxy Note 3 landscape'
    | 'Galaxy Note II'
    | 'Galaxy Note II landscape'
    | 'Galaxy S III'
    | 'Galaxy S III landscape'
    | 'Galaxy S5'
    | 'Galaxy S5 landscape'
    | 'Galaxy S8'
    | 'Galaxy S8 landscape'
    | 'Galaxy S9+'
    | 'Galaxy S9+ landscape'
    | 'Galaxy Tab S4'
    | 'Galaxy Tab S4 landscape'
    | 'iPad'
    | 'iPad landscape'
    | 'iPad (gen 6)'
    | 'iPad (gen 6) landscape'
    | 'iPad (gen 7)'
    | 'iPad (gen 7) landscape'
    | 'iPad Mini'
    | 'iPad Mini landscape'
    | 'iPad Pro'
    | 'iPad Pro landscape'
    | 'iPad Pro 11'
    | 'iPad Pro 11 landscape'
    | 'iPhone 4'
    | 'iPhone 4 landscape'
    | 'iPhone 5'
    | 'iPhone 5 landscape'
    | 'iPhone 6'
    | 'iPhone 6 landscape'
    | 'iPhone 6 Plus'
    | 'iPhone 6 Plus landscape'
    | 'iPhone 7'
    | 'iPhone 7 landscape'
    | 'iPhone 7 Plus'
    | 'iPhone 7 Plus landscape'
    | 'iPhone 8'
    | 'iPhone 8 landscape'
    | 'iPhone 8 Plus'
    | 'iPhone 8 Plus landscape'
    | 'iPhone SE'
    | 'iPhone SE landscape'
    | 'iPhone X'
    | 'iPhone X landscape'
    | 'iPhone XR'
    | 'iPhone XR landscape'
    | 'iPhone 11'
    | 'iPhone 11 landscape'
    | 'iPhone 11 Pro'
    | 'iPhone 11 Pro landscape'
    | 'iPhone 11 Pro Max'
    | 'iPhone 11 Pro Max landscape'
    | 'iPhone 12'
    | 'iPhone 12 landscape'
    | 'iPhone 12 Pro'
    | 'iPhone 12 Pro landscape'
    | 'iPhone 12 Pro Max'
    | 'iPhone 12 Pro Max landscape'
    | 'iPhone 12 Mini'
    | 'iPhone 12 Mini landscape'
    | 'iPhone 13'
    | 'iPhone 13 landscape'
    | 'iPhone 13 Pro'
    | 'iPhone 13 Pro landscape'
    | 'iPhone 13 Pro Max'
    | 'iPhone 13 Pro Max landscape'
    | 'iPhone 13 Mini'
    | 'iPhone 13 Mini landscape'
    | 'iPhone 14'
    | 'iPhone 14 landscape'
    | 'iPhone 14 Plus'
    | 'iPhone 14 Plus landscape'
    | 'iPhone 14 Pro'
    | 'iPhone 14 Pro landscape'
    | 'iPhone 14 Pro Max'
    | 'iPhone 14 Pro Max landscape'
    | 'iPhone 15'
    | 'iPhone 15 landscape'
    | 'iPhone 15 Plus'
    | 'iPhone 15 Plus landscape'
    | 'iPhone 15 Pro'
    | 'iPhone 15 Pro landscape'
    | 'iPhone 15 Pro Max'
    | 'iPhone 15 Pro Max landscape'
    | 'JioPhone 2'
    | 'JioPhone 2 landscape'
    | 'Kindle Fire HDX'
    | 'Kindle Fire HDX landscape'
    | 'LG Optimus L70'
    | 'LG Optimus L70 landscape'
    | 'Microsoft Lumia 550'
    | 'Microsoft Lumia 950'
    | 'Microsoft Lumia 950 landscape'
    | 'Nexus 10'
    | 'Nexus 10 landscape'
    | 'Nexus 4'
    | 'Nexus 4 landscape'
    | 'Nexus 5'
    | 'Nexus 5 landscape'
    | 'Nexus 5X'
    | 'Nexus 5X landscape'
    | 'Nexus 6'
    | 'Nexus 6 landscape'
    | 'Nexus 6P'
    | 'Nexus 6P landscape'
    | 'Nexus 7'
    | 'Nexus 7 landscape'
    | 'Nokia Lumia 520'
    | 'Nokia Lumia 520 landscape'
    | 'Nokia N9'
    | 'Nokia N9 landscape'
    | 'Pixel 2'
    | 'Pixel 2 landscape'
    | 'Pixel 2 XL'
    | 'Pixel 2 XL landscape'
    | 'Pixel 3'
    | 'Pixel 3 landscape'
    | 'Pixel 4'
    | 'Pixel 4 landscape'
    | 'Pixel 4a (5G)'
    | 'Pixel 4a (5G) landscape'
    | 'Pixel 5'
    | 'Pixel 5 landscape'
    | 'Moto G4'
    | 'Moto G4 landscape',
    Device
  >
>;

----------------------------------------

TITLE: Using ElementHandle.select() Method in TypeScript
DESCRIPTION: This example demonstrates how to use the ElementHandle.select() method for both single and multiple selections in a <select> element.

LANGUAGE: typescript
CODE:
handle.select('blue'); // single selection
handle.select('red', 'green', 'blue'); // multiple selections

----------------------------------------

TITLE: Defining Frame.frameElement Method in TypeScript
DESCRIPTION: TypeScript class definition showing the frameElement() method signature in the Frame class. This method returns a Promise that resolves to either a HandleFor<HTMLIFrameElement> or null, representing the frame element associated with the current frame if it exists.

LANGUAGE: typescript
CODE:
class Frame {
  frameElement(): Promise<HandleFor<HTMLIFrameElement> | null>;
}

----------------------------------------

TITLE: Running Specific Browser Tests
DESCRIPTION: Commands for running tests in Chrome headful mode or with custom browser executables.

LANGUAGE: bash
CODE:
npm run test:chrome:headful

BINARY=<path-to-executable> npm run test:chrome:headless # Or npm run test:firefox

----------------------------------------

TITLE: Defining Page.focus Method in TypeScript
DESCRIPTION: TypeScript class definition showing the Page.focus method signature. The method takes a selector string parameter and returns a Promise that resolves when the element is focused.

LANGUAGE: typescript
CODE:
class Page {
  focus(selector: string): Promise<void>;
}

----------------------------------------

TITLE: Implementing Touchscreen Tap Method in Puppeteer
DESCRIPTION: TypeScript class definition for the Touchscreen.tap() method that simulates touch events. The method takes x and y coordinates as parameters and returns a Promise that resolves when the touch events are complete.

LANGUAGE: typescript
CODE:
class Touchscreen {
  tap(x: number, y: number): Promise<void>;
}

----------------------------------------

TITLE: Implementing CDPSession Detachment in TypeScript
DESCRIPTION: Abstract method definition for detaching a Chrome DevTools Protocol session from its target. The method returns a Promise that resolves when the session is successfully detached, after which the session becomes inactive and cannot emit events or send messages.

LANGUAGE: typescript
CODE:
class CDPSession {
  abstract detach(): Promise<void>;
}

----------------------------------------

TITLE: Defining setDragInterception Method in Puppeteer Page Class
DESCRIPTION: TypeScript class definition showing the setDragInterception method signature. The method takes a boolean parameter to enable/disable drag interception and returns a Promise<void>. This API is now obsolete and users should use ElementHandle drag APIs or Page.mouse instead.

LANGUAGE: typescript
CODE:
class Page {
  abstract setDragInterception(enabled: boolean): Promise<void>;
}

----------------------------------------

TITLE: Defining ElementHandle.boundingBox Method in TypeScript
DESCRIPTION: Method signature for boundingBox() which returns a Promise containing either a BoundingBox object or null. Returns null if the element is not part of the layout (e.g., when display: none is set).

LANGUAGE: typescript
CODE:
class ElementHandle {
  boundingBox(): Promise<BoundingBox | null>;
}

----------------------------------------

TITLE: Using Asynchronous Function with Page.waitForFunction in Puppeteer
DESCRIPTION: This example demonstrates using an asynchronous function with Page.waitForFunction(). It fetches data from the GitHub API, creates an image element, waits for 3 seconds, and then removes the image.

LANGUAGE: typescript
CODE:
const username = 'github-username';
await page.waitForFunction(
  async username => {
    const githubResponse = await fetch(
      `https://api.github.com/users/${username}`,
    );
    const githubUser = await githubResponse.json();
    // show the avatar
    const img = document.createElement('img');
    img.src = githubUser.avatar_url;
    // wait 3 seconds
    await new Promise((resolve, reject) => setTimeout(resolve, 3000));
    img.remove();
  },
  {},
  username,
);

----------------------------------------

TITLE: Defining Credentials Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the Credentials interface in TypeScript for Puppeteer. It includes two properties: username and password, both of type string.

LANGUAGE: typescript
CODE:
export interface Credentials

----------------------------------------

TITLE: Using Page.queryObjects to Find Map Instances in Puppeteer
DESCRIPTION: This example demonstrates how to use Page.queryObjects to find all instances of Map objects in the JavaScript heap. It creates a Map, gets a handle to the Map prototype, queries for all Map instances, and counts them.

LANGUAGE: ts
CODE:
// Create a Map object
await page.evaluate(() => (window.map = new Map()));
// Get a handle to the Map object prototype
const mapPrototype = await page.evaluateHandle(() => Map.prototype);
// Query all map instances into an array
const mapInstances = await page.queryObjects(mapPrototype);
// Count amount of map objects in heap
const count = await page.evaluate(maps => maps.length, mapInstances);
await mapInstances.dispose();
await mapPrototype.dispose();

----------------------------------------

TITLE: Defining Tracing.start() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the start() method of the Tracing class. It takes an optional TracingOptions parameter and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Tracing {
  start(options?: TracingOptions): Promise<void>;
}

----------------------------------------

TITLE: Defining ExperimentsConfiguration Type in TypeScript
DESCRIPTION: Defines a TypeScript type for experimental configuration options in Puppeteer. Currently implemented as an empty Record<string, never> type, serving as a placeholder for future experimental features.

LANGUAGE: typescript
CODE:
export type ExperimentsConfiguration = Record<string, never>;

----------------------------------------

TITLE: Handling Page Request Event in JavaScript
DESCRIPTION: Example of attaching an event listener to the 'request' event on a Puppeteer page object to handle HTTP requests.

LANGUAGE: javascript
CODE:
page.on('request', request => ...)

----------------------------------------

TITLE: Defining Connection Class in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the Connection class, which extends EventEmitter for CDPSessionEvents. It includes the class signature and shows that it inherits from EventEmitter.

LANGUAGE: typescript
CODE:
export declare class Connection extends EventEmitter<CDPSessionEvents>

----------------------------------------

TITLE: Defining BoxModel Interface in TypeScript
DESCRIPTION: TypeScript interface definition for BoxModel that specifies the box model properties of an element. It includes properties for border, content, margin, padding dimensions as Quad types, and width/height as numbers.

LANGUAGE: typescript
CODE:
export interface BoxModel

----------------------------------------

TITLE: Defining Credentials Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the Credentials interface in TypeScript for Puppeteer. It includes two properties: username and password, both of type string.

LANGUAGE: typescript
CODE:
export interface Credentials

----------------------------------------

TITLE: Building Puppeteer Packages in Bash
DESCRIPTION: Command to build all Puppeteer packages.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Defining GoToOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for GoToOptions that extends WaitForOptions. Contains optional properties for configuring referer and referrerPolicy headers during page navigation.

LANGUAGE: typescript
CODE:
export interface GoToOptions extends WaitForOptions

----------------------------------------

TITLE: Defining setBypassCSP Method in Page Class (TypeScript)
DESCRIPTION: This code snippet shows the TypeScript signature for the setBypassCSP method in the Page class. It takes a boolean parameter to enable or disable CSP bypassing and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Page {
  abstract setBypassCSP(enabled: boolean): Promise<void>;
}

----------------------------------------

TITLE: Defining LaunchOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for Puppeteer's LaunchOptions, which specifies configuration options when launching a browser instance. This interface includes properties for process management, environment configuration, and signal handling.

LANGUAGE: typescript
CODE:
export interface LaunchOptions

----------------------------------------

TITLE: FileChooser Class Definition in TypeScript
DESCRIPTION: TypeScript class declaration for FileChooser, defining the core file chooser functionality in Puppeteer.

LANGUAGE: typescript
CODE:
export declare class FileChooser

----------------------------------------

TITLE: Defining TouchHandle Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for TouchHandle which exposes methods to manipulate touch events. The interface provides functionality for ending touch events and moving touch points to new coordinates.

LANGUAGE: typescript
CODE:
export interface TouchHandle

----------------------------------------

TITLE: Defining GeolocationOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for GeolocationOptions that specifies the structure for geolocation data. Contains properties for latitude, longitude, and optional accuracy values with specific numerical constraints.

LANGUAGE: typescript
CODE:
export interface GeolocationOptions

----------------------------------------

TITLE: Declaring TargetType Enum in TypeScript
DESCRIPTION: Defines an enumeration of possible target types in Puppeteer that represent different contexts like pages, workers, and browser instances. Used for identifying and managing different types of targets during browser automation.

LANGUAGE: typescript
CODE:
export declare enum TargetType {
  BACKGROUND_PAGE = "background_page",
  BROWSER = "browser",
  OTHER = "other",
  PAGE = "page",
  SERVICE_WORKER = "service_worker",
  SHARED_WORKER = "shared_worker",
  WEBVIEW = "webview"
}

----------------------------------------

TITLE: Defining GeolocationOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for GeolocationOptions that specifies the structure for geolocation data. Contains properties for latitude, longitude, and optional accuracy values with specific numerical constraints.

LANGUAGE: typescript
CODE:
export interface GeolocationOptions

----------------------------------------

TITLE: Defining JSHandle.dispose Method in TypeScript
DESCRIPTION: This code snippet shows the signature of the dispose() method in the JSHandle class. The method is asynchronous and returns a Promise that resolves to void. It is used to release the object referenced by the handle for garbage collection.

LANGUAGE: typescript
CODE:
class JSHandle {
  abstract dispose(): Promise<void>;
}

----------------------------------------

TITLE: Implementing ElementHandle Focus Method in TypeScript
DESCRIPTION: TypeScript class definition showing the focus() method signature for ElementHandle class in Puppeteer. The method returns a Promise that resolves to void and is used to programmatically focus an HTML element in the browser.

LANGUAGE: typescript
CODE:
class ElementHandle {
  focus(): Promise<void>;
}

----------------------------------------

TITLE: Defining MouseOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for MouseOptions that specifies configuration parameters for mouse interactions in Puppeteer. It includes optional properties for button selection and click count (deprecated).

LANGUAGE: typescript
CODE:
export interface MouseOptions

----------------------------------------

TITLE: Defining MouseOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for MouseOptions that specifies configuration parameters for mouse interactions in Puppeteer. It includes optional properties for button selection and click count (deprecated).

LANGUAGE: typescript
CODE:
export interface MouseOptions

----------------------------------------

TITLE: Defining Coverage.stopJSCoverage Method in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the stopJSCoverage() method in the Coverage class. It returns a Promise that resolves to an array of JSCoverageEntry objects, representing coverage reports for all scripts.

LANGUAGE: typescript
CODE:
class Coverage {
  stopJSCoverage(): Promise<JSCoverageEntry[]>;
}

----------------------------------------

TITLE: Setting Extra HTTP Headers in Puppeteer Using TypeScript
DESCRIPTION: TypeScript class method signature for setting additional HTTP headers on a Page object. The method takes a Record of string key-value pairs representing the headers and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Page {
  abstract setExtraHTTPHeaders(headers: Record<string, string>): Promise<void>;
}

----------------------------------------

TITLE: Defining Metrics Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the Metrics interface for Puppeteer. It includes various optional numeric properties that represent different aspects of page metrics, such as document count, frame count, heap sizes, and durations for various operations.

LANGUAGE: typescript
CODE:
export interface Metrics {
  Documents?: number;
  Frames?: number;
  JSEventListeners?: number;
  JSHeapTotalSize?: number;
  JSHeapUsedSize?: number;
  LayoutCount?: number;
  LayoutDuration?: number;
  Nodes?: number;
  RecalcStyleCount?: number;
  RecalcStyleDuration?: number;
  ScriptDuration?: number;
  TaskDuration?: number;
  Timestamp?: number;
}

----------------------------------------

TITLE: Defining Target Class in TypeScript
DESCRIPTION: Abstract class declaration for the Target class that represents a CDP target. This class is marked as internal and should not be instantiated directly or extended by third-party code.

LANGUAGE: typescript
CODE:
export declare abstract class Target

----------------------------------------

TITLE: Implementing EventEmitter.off Method in TypeScript
DESCRIPTION: Method signature for removing event listeners from an EventEmitter. The method takes an event type and an optional handler function as parameters, and returns the EventEmitter instance for method chaining.

LANGUAGE: typescript
CODE:
class EventEmitter {
  off<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    handler?: Handler<EventsWithWildcard<Events>[Key]>,
  ): this;
}

----------------------------------------

TITLE: Method Signature for Page.emulateVisionDeficiency in TypeScript
DESCRIPTION: TypeScript class definition showing the method signature for emulateVisionDeficiency. The method accepts an optional type parameter specifying the vision deficiency to simulate.

LANGUAGE: typescript
CODE:
class Page {
  abstract emulateVisionDeficiency(
    type?: Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type'],
  ): Promise<void>;
}

----------------------------------------

TITLE: Keyboard Class Definition in TypeScript
DESCRIPTION: Abstract class declaration for the Puppeteer Keyboard class that handles virtual keyboard operations.

LANGUAGE: typescript
CODE:
export declare abstract class Keyboard

----------------------------------------

TITLE: Method Signature for Page.emulateVisionDeficiency in TypeScript
DESCRIPTION: TypeScript class definition showing the method signature for emulateVisionDeficiency. The method accepts an optional type parameter specifying the vision deficiency to simulate.

LANGUAGE: typescript
CODE:
class Page {
  abstract emulateVisionDeficiency(
    type?: Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type'],
  ): Promise<void>;
}

----------------------------------------

TITLE: Implementing Browser WebSocket Endpoint in TypeScript
DESCRIPTION: Abstract class definition for Browser containing the wsEndpoint method that returns the WebSocket URL in the format 'ws://HOST:PORT/devtools/browser/<id>'. This method is used to get the connection endpoint for browser debugging and automation.

LANGUAGE: typescript
CODE:
class Browser {
  abstract wsEndpoint(): string;
}

----------------------------------------

TITLE: Defining InnerParams Generic Type in TypeScript
DESCRIPTION: Implements a mapped type that iterates over array elements and applies FlattenHandle transformation to each element. Uses generic type parameter T extending unknown[] to work with any array type.

LANGUAGE: typescript
CODE:
export type InnerParams<T extends unknown[]> = {
  [K in keyof T]: FlattenHandle<T[K]>;
};

----------------------------------------

TITLE: Defining Page.waitForFunction Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.waitForFunction method. It defines the method's generic types, parameters, and return type.

LANGUAGE: typescript
CODE:
class Page {
  waitForFunction<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    options?: FrameWaitForFunctionOptions,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}

----------------------------------------

TITLE: Defining JSHandle.jsonValue Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the JSHandle.jsonValue() method. It returns a Promise that resolves to a serializable representation of the referenced object.

LANGUAGE: typescript
CODE:
class JSHandle {
  abstract jsonValue(): Promise<T>;
}

----------------------------------------

TITLE: Using Page.waitForNavigation with Page.click in TypeScript
DESCRIPTION: This example demonstrates how to use waitForNavigation in conjunction with a click action. It waits for navigation to complete after clicking a link, using Promise.all to handle both async operations.

LANGUAGE: typescript
CODE:
const [response] = await Promise.all([
  page.waitForNavigation(), // The promise resolves after navigation has finished
  page.click('a.my-link'), // Clicking the link will indirectly cause a navigation
]);

----------------------------------------

TITLE: Defining FrameAddScriptTagOptions Interface in TypeScript
DESCRIPTION: TypeScript interface that specifies the available options when adding a script tag to a frame in Puppeteer. Provides options for script content, path, URL, type, and ID configuration.

LANGUAGE: typescript
CODE:
export interface FrameAddScriptTagOptions {
  content?: string;  // JavaScript to be injected into the frame
  id?: string;      // Sets the id of the script
  path?: string;    // Path to a JavaScript file to be injected
  type?: string;    // Sets the type of the script (e.g. 'module' for ES2015)
  url?: string;     // URL of the script to be added
}

----------------------------------------

TITLE: Defining MediaFeature Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the MediaFeature interface used in Puppeteer for emulating media features. It specifies two properties: 'name' for the feature name and 'value' for the feature value.

LANGUAGE: typescript
CODE:
export interface MediaFeature

----------------------------------------

TITLE: Retrieving Viewport Settings in Puppeteer using TypeScript
DESCRIPTION: Method signature for Page.viewport() that returns the current viewport settings. The viewport can either be explicitly set through Page.setViewport() or use the default viewport from ConnectOptions.defaultViewport. Returns either a Viewport object or null.

LANGUAGE: typescript
CODE:
class Page {
  abstract viewport(): Viewport | null;
}

----------------------------------------

TITLE: Declaring 'offline' Property in InternalNetworkConditions Interface
DESCRIPTION: This snippet shows the declaration of the 'offline' property within the InternalNetworkConditions interface. The property is of type boolean and has no default value specified.

LANGUAGE: typescript
CODE:
offline: boolean

----------------------------------------

TITLE: Defining Generic Event Handler Type in TypeScript
DESCRIPTION: Defines a generic Handler type that takes an event parameter of type T (defaulting to unknown) and returns void. This type is used for creating event handler functions throughout the Puppeteer framework.

LANGUAGE: typescript
CODE:
export type Handler<T = unknown> = (event: T) => void;

----------------------------------------

TITLE: Defining JSHandle.jsonValue Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the JSHandle.jsonValue() method. It returns a Promise that resolves to a serializable representation of the referenced object.

LANGUAGE: typescript
CODE:
class JSHandle {
  abstract jsonValue(): Promise<T>;
}

----------------------------------------

TITLE: Defining VisibilityOption Type in TypeScript for Puppeteer
DESCRIPTION: Defines a type alias that specifies possible visibility states when waiting for elements in Puppeteer. The type can be 'hidden', 'visible', or null, where null disables visibility checks.

LANGUAGE: typescript
CODE:
export type VisibilityOption = 'hidden' | 'visible' | null;

----------------------------------------

TITLE: Adding Style Element with Frame.addStyleTag
DESCRIPTION: Method signature for adding an HTMLStyleElement to a frame. Takes options parameter excluding the URL property and returns a Promise resolving to an ElementHandle of the created style element.

LANGUAGE: typescript
CODE:
class Frame {
  addStyleTag(
    options: Omit<FrameAddStyleTagOptions, 'url'>,
  ): Promise<ElementHandle<HTMLStyleElement>>;
}

----------------------------------------

TITLE: Copying Selected Content to Clipboard in Puppeteer
DESCRIPTION: Demonstrates how to copy selected content to the clipboard and read it back. This example includes bringing the page to the front and using the clipboard API.

LANGUAGE: ts
CODE:
// The clipboard api does not allow you to copy, unless the tab is focused.
await page.bringToFront();
await page.evaluate(() => {
  // Copy the selected content to the clipboard
  document.execCommand('copy');
  // Obtain the content of the clipboard as a string
  return navigator.clipboard.readText();
});

----------------------------------------

TITLE: Defining Mouse.dragEnter() Method in TypeScript
DESCRIPTION: This snippet defines the dragEnter() method in the Mouse class. It takes a target point and drag data as parameters, and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Mouse {
  abstract dragEnter(
    target: Point,
    data: Protocol.Input.DragData,
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining Page.$$eval() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.$$eval() method in Puppeteer. It defines the method with generic types for selector, parameters, and function.

LANGUAGE: typescript
CODE:
class Page {
  $$eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<
      Array<NodeFor<Selector>>,
      Params
    > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,
  >(
    selector: Selector,
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}

----------------------------------------

TITLE: Defining CommonEventEmitter.removeAllListeners() Method Signature in TypeScript
DESCRIPTION: This code snippet defines the signature of the removeAllListeners() method in the CommonEventEmitter interface. The method takes an optional 'event' parameter of type 'keyof Events' and returns 'this'.

LANGUAGE: typescript
CODE:
interface CommonEventEmitter {
  removeAllListeners(event?: keyof Events): this;
}

----------------------------------------

TITLE: Defining NodeFor Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the NodeFor type in Puppeteer. It uses a generic type parameter ComplexSelector extending string and utilizes the ParseSelector type to parse the complex selector.

LANGUAGE: typescript
CODE:
export type NodeFor<ComplexSelector extends string> =
  ParseSelector<ComplexSelector>;

----------------------------------------

TITLE: Implementing hover() Method in Puppeteer Locator Class
DESCRIPTION: TypeScript method signature for the hover() function in Puppeteer's Locator class. The method accepts optional ActionOptions and returns a Promise that resolves when the hover action is complete. It's used to programmatically trigger hover events on DOM elements.

LANGUAGE: typescript
CODE:
class Locator {
  hover<ElementType extends Element>(
    this: Locator<ElementType>,
    options?: Readonly<ActionOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Implementing Browser WebSocket Endpoint in TypeScript
DESCRIPTION: Abstract class definition for Browser that implements the wsEndpoint method. The method returns a string containing the WebSocket URL used to connect to the browser instance through the Chrome DevTools Protocol.

LANGUAGE: typescript
CODE:
class Browser {
  abstract wsEndpoint(): string;
}

----------------------------------------

TITLE: Defining CommonEventEmitter.once Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the CommonEventEmitter.once method. The method takes an event type and handler function as parameters and returns the instance itself. It's designed for one-time event handling where the handler is automatically removed after the first event emission.

LANGUAGE: typescript
CODE:
interface CommonEventEmitter {
  once<Key extends keyof Events>(
    type: Key,
    handler: Handler<Events[Key]>,
  ): this;
}

----------------------------------------

TITLE: Defining InterceptResolutionState Interface in TypeScript
DESCRIPTION: This code snippet defines the InterceptResolutionState interface in TypeScript. It includes two properties: 'action' of type InterceptResolutionAction, and an optional 'priority' of type number.

LANGUAGE: typescript
CODE:
export interface InterceptResolutionState

----------------------------------------

TITLE: Defining MouseWheelOptions Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for MouseWheelOptions that specifies optional deltaX and deltaY number properties for controlling mouse wheel behavior.

LANGUAGE: typescript
CODE:
export interface MouseWheelOptions

----------------------------------------

TITLE: Retrieving Response Body using HTTPResponse.content in TypeScript
DESCRIPTION: Abstract method definition for retrieving HTTP response body as a buffer. Returns a Promise that resolves to a Uint8Array. Note that the response buffer might be re-encoded by the browser based on HTTP headers or other heuristics, potentially leading to incorrect encoding.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  abstract content(): Promise<Uint8Array>;
}

----------------------------------------

TITLE: Defining ElementHandle.touchEnd Method in TypeScript
DESCRIPTION: This code snippet defines the touchEnd() method for the ElementHandle class. The method takes no parameters and returns a Promise that resolves to void. It is used to simulate the end of a touch event on an element.

LANGUAGE: typescript
CODE:
class ElementHandle {
  touchEnd(this: ElementHandle<Element>): Promise<void>;
}

----------------------------------------

TITLE: Handling Page Request Event in Puppeteer
DESCRIPTION: Example of attaching an event listener to handle HTTP requests made by a page in Puppeteer.

LANGUAGE: typescript
CODE:
page.on('request', request => ...)

----------------------------------------

TITLE: Defining PuppeteerNode.connect Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the connect() method of the PuppeteerNode class. It takes ConnectOptions as a parameter and returns a Promise resolving to a Browser instance.

LANGUAGE: typescript
CODE:
class PuppeteerNode {
  connect(options: ConnectOptions): Promise<Browser>;
}

----------------------------------------

TITLE: Defining Coverage Class Signature in TypeScript
DESCRIPTION: Declares the Coverage class export in TypeScript.

LANGUAGE: typescript
CODE:
export declare class Coverage

----------------------------------------

TITLE: Implementing File Upload Method in Puppeteer ElementHandle Class
DESCRIPTION: TypeScript method signature for uploading files to an HTML input element. Takes multiple file paths as arguments and returns a Promise. The method operates on ElementHandle instances specifically bound to HTMLInputElement elements.

LANGUAGE: typescript
CODE:
class ElementHandle {
  abstract uploadFile(
    this: ElementHandle<HTMLInputElement>,
    ...paths: string[]
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining Dialog.accept() Method in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the signature of the Dialog.accept() method in Puppeteer. It accepts an optional promptText parameter for prompt dialogs and returns a Promise that resolves when the dialog has been accepted.

LANGUAGE: typescript
CODE:
class Dialog {
  accept(promptText?: string): Promise<void>;
}

----------------------------------------

TITLE: Declaring DeviceRequestPromptDevice Class in TypeScript
DESCRIPTION: This snippet defines the DeviceRequestPromptDevice class. The class represents a device in a request prompt and has two properties: id and name. The constructor is marked as internal, indicating that third-party code should not instantiate it directly or create subclasses.

LANGUAGE: typescript
CODE:
export declare class DeviceRequestPromptDevice

----------------------------------------

TITLE: Authenticating HTTP Requests in Puppeteer
DESCRIPTION: The authenticate method is used to provide credentials for HTTP authentication. It takes a Credentials object or null as a parameter and returns a Promise<void>. Passing null disables authentication. Note that using this method enables request interception, which may affect performance.

LANGUAGE: typescript
CODE:
class Page {
  abstract authenticate(credentials: Credentials | null): Promise<void>;
}

----------------------------------------

TITLE: Defining MouseMoveOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the MouseMoveOptions interface for Puppeteer. It includes a single optional property 'steps' of type number, which determines the number of movements to make from the current mouse position to the new one. The default value for 'steps' is 1.

LANGUAGE: typescript
CODE:
export interface MouseMoveOptions {
  steps?: number;
}

----------------------------------------

TITLE: Defining CSSCoverageOptions Interface in TypeScript
DESCRIPTION: This snippet defines the CSSCoverageOptions interface for configuring CSS coverage options in Puppeteer. It includes a single optional property 'resetOnNavigation' of type boolean.

LANGUAGE: typescript
CODE:
export interface CSSCoverageOptions

----------------------------------------

TITLE: Defining NewDocumentScriptEvaluation Interface in TypeScript
DESCRIPTION: This snippet defines the NewDocumentScriptEvaluation interface in TypeScript. It contains a single property 'identifier' of type string, which is likely used for identifying new document script evaluations in Puppeteer.

LANGUAGE: typescript
CODE:
export interface NewDocumentScriptEvaluation {
  identifier: string;
}

----------------------------------------

TITLE: Defining Page.hover() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.hover() method. It takes a selector string as a parameter and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Page {
  hover(selector: string): Promise<void>;
}

----------------------------------------

TITLE: Defining Browser.pages() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Browser.pages() method. It returns a Promise that resolves to an array of Page objects, representing all open pages across all browser contexts.

LANGUAGE: typescript
CODE:
class Browser {
  pages(): Promise<Page[]>;
}

----------------------------------------

TITLE: Defining Frame.$$eval() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature of the Frame.$$eval() method. It defines a generic method that evaluates a function on an array of elements matching a given selector in the frame.

LANGUAGE: typescript
CODE:
class Frame {
  $$eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<
      Array<NodeFor<Selector>>,
      Params
    > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,
  >(
    selector: Selector,
    pageFunction: string | Func,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}

----------------------------------------

TITLE: Implementing Page.setOfflineMode Method in TypeScript
DESCRIPTION: Abstract class method definition for setting offline mode in Puppeteer's Page class. Takes a boolean parameter to enable/disable offline mode and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Page {
  abstract setOfflineMode(enabled: boolean): Promise<void>;
}

----------------------------------------

TITLE: Basic Usage Examples of Page.$$eval()
DESCRIPTION: Demonstrates common usage patterns including counting elements and extracting text content from multiple elements.

LANGUAGE: typescript
CODE:
// get the amount of divs on the page
const divCount = await page.$$eval('div', divs => divs.length);

// get the text content of all the `.options` elements:
const options = await page.$$eval('div > span.options', options => {
  return options.map(option => option.textContent);
});

----------------------------------------

TITLE: Fetching POST Data using HTTPRequest Class in TypeScript
DESCRIPTION: Defines the abstract fetchPostData method in the HTTPRequest class that returns a Promise resolving to either a string containing the POST data or undefined. This method is used to retrieve POST data from browser requests asynchronously.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract fetchPostData(): Promise<string | undefined>;
}

----------------------------------------

TITLE: Defining InterceptResolutionState Interface in TypeScript
DESCRIPTION: TypeScript interface definition for InterceptResolutionState that contains an action property of type InterceptResolutionAction and an optional priority property of type number.

LANGUAGE: typescript
CODE:
export interface InterceptResolutionState

----------------------------------------

TITLE: Initializing CDP Session in Puppeteer Page Class
DESCRIPTION: Class method signature for creating a Chrome DevTools Protocol session. Returns a Promise that resolves to a CDPSession object which can be used for low-level browser debugging and automation.

LANGUAGE: typescript
CODE:
class Page {
  abstract createCDPSession(): Promise<CDPSession>;
}

----------------------------------------

TITLE: Defining Connection.session() Method in TypeScript
DESCRIPTION: This code snippet defines the session() method within the Connection class. It takes a sessionId as a parameter and returns either a CDPSession object or null.

LANGUAGE: typescript
CODE:
class Connection {
  session(sessionId: string): CDPSession | null;
}

----------------------------------------

TITLE: Connecting to Browser Tab with ExtensionTransport in TypeScript
DESCRIPTION: Static method that creates a connection to a browser tab using its ID. Returns a Promise that resolves to an ExtensionTransport instance for communication with the specified tab.

LANGUAGE: typescript
CODE:
class ExtensionTransport {
  static connectTab(tabId: number): Promise<ExtensionTransport>;
}

----------------------------------------

TITLE: Defining InnerParams Generic Type in TypeScript
DESCRIPTION: Creates a mapped type that iterates over an array's elements and applies FlattenHandle transformation to each element. Used for parameter handling in Puppeteer's internal operations.

LANGUAGE: typescript
CODE:
export type InnerParams<T extends unknown[]> = {
  [K in keyof T]: FlattenHandle<T[K]>;
};

----------------------------------------

TITLE: Defining PageEvent Enum in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the PageEvent enum for Puppeteer. It declares all possible events that a page instance can emit, such as 'close', 'console', 'dialog', etc. Each event is associated with a string value.

LANGUAGE: typescript
CODE:
export declare const enum PageEvent

----------------------------------------

TITLE: Fetching POST Data using HTTPRequest Class in TypeScript
DESCRIPTION: Defines the abstract fetchPostData method in the HTTPRequest class that returns a Promise resolving to either a string containing the POST data or undefined. This method is used to retrieve POST data from browser requests asynchronously.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract fetchPostData(): Promise<string | undefined>;
}

----------------------------------------

TITLE: Defining Page.hover() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.hover() method. It takes a selector string as a parameter and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Page {
  hover(selector: string): Promise<void>;
}

----------------------------------------

TITLE: Implementing CPU Throttling in Puppeteer with TypeScript
DESCRIPTION: Method signature for emulating CPU throttling in Puppeteer. Takes a numeric factor parameter where 1 represents normal speed, 2 represents 2x slowdown, etc. Returns a Promise that resolves when throttling is applied.

LANGUAGE: typescript
CODE:
class Page {
  abstract emulateCPUThrottling(factor: number | null): Promise<void>;
}

----------------------------------------

TITLE: Setting Page Content in Puppeteer using TypeScript
DESCRIPTION: Method signature for setting HTML content of a page. Takes HTML markup as a string parameter and optional WaitForOptions. Returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Page {
  setContent(html: string, options?: WaitForOptions): Promise<void>;
}

----------------------------------------

TITLE: Setting Page Content in Puppeteer using TypeScript
DESCRIPTION: Method signature for setting HTML content of a page. Takes HTML markup as a string parameter and optional WaitForOptions. Returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Page {
  setContent(html: string, options?: WaitForOptions): Promise<void>;
}

----------------------------------------

TITLE: Defining FrameWaitForFunctionOptions Interface in TypeScript
DESCRIPTION: TypeScript interface that specifies configuration options for frame wait functions. Includes optional properties for polling strategy, abort signal, and timeout duration.

LANGUAGE: typescript
CODE:
export interface FrameWaitForFunctionOptions

----------------------------------------

TITLE: Defining Mouse Wheel Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the abstract wheel method signature for the Mouse class in Puppeteer.

LANGUAGE: typescript
CODE:
class Mouse {
  abstract wheel(options?: Readonly<MouseWheelOptions>): Promise<void>;
}

----------------------------------------

TITLE: Defining Browser.browserContexts() Method in TypeScript
DESCRIPTION: This code snippet defines the browserContexts() method in the Browser class. It returns an array of BrowserContext objects, representing all open browser contexts.

LANGUAGE: typescript
CODE:
class Browser {
  abstract browserContexts(): BrowserContext[];
}

----------------------------------------

TITLE: Connecting to a Tab using ExtensionTransport in TypeScript
DESCRIPTION: This code snippet defines the static method connectTab on the ExtensionTransport class. It takes a tabId as a parameter and returns a Promise that resolves to an ExtensionTransport instance.

LANGUAGE: typescript
CODE:
class ExtensionTransport {
  static connectTab(tabId: number): Promise<ExtensionTransport>;
}

----------------------------------------

TITLE: Defining BrowserContextEvents Interface in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the BrowserContextEvents interface, which extends Record<EventType, unknown> and specifies three properties related to target events. Each property is of type Target.

LANGUAGE: typescript
CODE:
export interface BrowserContextEvents extends Record<EventType, unknown> {
  targetchanged: Target;
  targetcreated: Target;
  targetdestroyed: Target;
}

----------------------------------------

TITLE: Retrieving Web Worker URL - TypeScript Implementation
DESCRIPTION: Class method definition for retrieving the URL of a web worker instance. The method returns a string representing the URL where the web worker script is located.

LANGUAGE: typescript
CODE:
class WebWorker {
  url(): string;
}

----------------------------------------

TITLE: Defining JSHandle.toString() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the toString() method for the JSHandle class in Puppeteer. The method returns a string representation of the JSHandle object, which is useful for debugging purposes.

LANGUAGE: typescript
CODE:
class JSHandle {
  abstract toString(): string;
}

----------------------------------------

TITLE: Defining AwaitableIterable Type in TypeScript for Puppeteer
DESCRIPTION: This code defines the AwaitableIterable type, which is a union type of Iterable<T> and AsyncIterable<T>. It allows for both synchronous and asynchronous iterable objects to be used interchangeably in Puppeteer's API.

LANGUAGE: typescript
CODE:
export type AwaitableIterable<T> = Iterable<T> | AsyncIterable<T>;

----------------------------------------

TITLE: Implementing JavaScript Coverage Stop Method in Puppeteer
DESCRIPTION: TypeScript class definition for the Coverage class showing the stopJSCoverage method signature. The method returns a Promise that resolves to an array of JSCoverageEntry objects, providing coverage reports for all tracked scripts except anonymous ones. Scripts with sourceURLs are included in the coverage report.

LANGUAGE: typescript
CODE:
class Coverage {
  stopJSCoverage(): Promise<JSCoverageEntry[]>;
}

----------------------------------------

TITLE: Defining Frame.content() Method in Puppeteer using TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the Frame.content() method in Puppeteer. The method is defined within the Frame class and returns a Promise that resolves to a string containing the full HTML contents of the frame, including the DOCTYPE.

LANGUAGE: typescript
CODE:
class Frame {
  content(): Promise<string>;
}

----------------------------------------

TITLE: Defining Page.createPDFStream Method in TypeScript
DESCRIPTION: This snippet defines the createPDFStream method in the Page class. It takes optional PDFOptions and returns a Promise that resolves to a ReadableStream of Uint8Array.

LANGUAGE: typescript
CODE:
class Page {
  abstract createPDFStream(
    options?: PDFOptions,
  ): Promise<ReadableStream<Uint8Array>>;
}

----------------------------------------

TITLE: Defining ElementHandle.autofill Method in TypeScript
DESCRIPTION: Class definition showing the signature of the ElementHandle.autofill method that takes AutofillData as a parameter and returns a Promise.

LANGUAGE: typescript
CODE:
class ElementHandle {
  abstract autofill(data: AutofillData): Promise<void>;
}

----------------------------------------

TITLE: Defining General ElementHandle.contentFrame Method in TypeScript
DESCRIPTION: This snippet defines a more general version of the contentFrame method for ElementHandle. It returns a Promise that resolves to either a Frame object or null.

LANGUAGE: typescript
CODE:
class ElementHandle {
  abstract contentFrame(): Promise<Frame | null>;
}

----------------------------------------

TITLE: Defining LocatorScrollOptions Interface in TypeScript
DESCRIPTION: This snippet defines the LocatorScrollOptions interface, which extends ActionOptions and includes optional properties for scrollLeft and scrollTop. These properties allow specifying scroll positions for locator-based scrolling operations in Puppeteer.

LANGUAGE: typescript
CODE:
export interface LocatorScrollOptions extends ActionOptions {
  scrollLeft?: number;
  scrollTop?: number;
}

----------------------------------------

TITLE: Implementing Keyboard Press Method in Puppeteer TypeScript
DESCRIPTION: Abstract class definition for the Keyboard.press() method that simulates pressing and releasing a key. The method accepts a key input and optional parameters for customizing the press behavior including text generation and delay between keydown and keyup events.

LANGUAGE: typescript
CODE:
class Keyboard {
  abstract press(
    key: KeyInput,
    options?: Readonly<KeyPressOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining Mouse Wheel Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the abstract wheel method signature that handles mousewheel events with optional MouseWheelOptions parameter.

LANGUAGE: typescript
CODE:
class Mouse {
  abstract wheel(options?: Readonly<MouseWheelOptions>): Promise<void>;
}

----------------------------------------

TITLE: Dumping Frame Tree in Puppeteer using TypeScript
DESCRIPTION: An example of how to dump the frame tree of a page using Puppeteer. It demonstrates navigation and recursive frame traversal.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://www.google.com/chrome/browser/canary.html');
  dumpFrameTree(page.mainFrame(), '');
  await browser.close();

  function dumpFrameTree(frame, indent) {
    console.log(indent + frame.url());
    for (const child of frame.childFrames()) {
      dumpFrameTree(child, indent + '  ');
    }
  }
})();

----------------------------------------

TITLE: Frame.type Usage Examples in TypeScript
DESCRIPTION: Examples showing how to use Frame.type() method for both instant and delayed typing simulation. The delay option can be used to simulate realistic user typing speeds.

LANGUAGE: typescript
CODE:
await frame.type('#mytextarea', 'Hello'); // Types instantly
await frame.type('#mytextarea', 'World', {delay: 100}); // Types slower, like a user

----------------------------------------

TITLE: Defining setEnsureElementIsInTheViewport Method in TypeScript
DESCRIPTION: TypeScript method signature for configuring viewport behavior in Puppeteer's Locator class. The method creates a new locator instance by cloning the current one and specifies whether the element should be automatically scrolled into viewport if not already visible.

LANGUAGE: typescript
CODE:
class Locator {
  setEnsureElementIsInTheViewport<ElementType extends Element>(
    this: Locator<ElementType>,
    value: boolean,
  ): Locator<ElementType>;
}

----------------------------------------

TITLE: Defining Frame.addScriptTag Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Frame.addScriptTag method. It takes FrameAddScriptTagOptions as a parameter and returns a Promise resolving to an ElementHandle of an HTMLScriptElement.

LANGUAGE: typescript
CODE:
class Frame {
  addScriptTag(
    options: FrameAddScriptTagOptions,
  ): Promise<ElementHandle<HTMLScriptElement>>;
}

----------------------------------------

TITLE: Implementing Keyboard Press Method in Puppeteer TypeScript
DESCRIPTION: Abstract class definition for the Keyboard.press() method that simulates pressing and releasing a key. The method accepts a key input and optional parameters for customizing the press behavior including text generation and delay between keydown and keyup events.

LANGUAGE: typescript
CODE:
class Keyboard {
  abstract press(
    key: KeyInput,
    options?: Readonly<KeyPressOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Using DeviceRequestPrompt with Bluetooth Device Selection
DESCRIPTION: Example demonstrating how to wait for a device prompt, filter devices by name, and select a specific device in Puppeteer.

LANGUAGE: typescript
CODE:
const [devicePrompt] = Promise.all([
  page.waitForDevicePrompt(),
  page.click('#connect-bluetooth'),
]);
await devicePrompt.select(
  await devicePrompt.waitForDevice(({name}) => name.includes('My Device')),
);

----------------------------------------

TITLE: Defining ElementHandle.hover() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the hover() method of the ElementHandle class. The method takes no parameters and returns a Promise<void>. It scrolls the element into view if needed, then uses Page.mouse to hover over the center of the element.

LANGUAGE: typescript
CODE:
class ElementHandle {
  hover(this: ElementHandle<Element>): Promise<void>;
}

----------------------------------------

TITLE: Retrieving and Interacting with ElementHandle using Page.evaluateHandle
DESCRIPTION: Demonstrates how Page.evaluateHandle can return an ElementHandle when the pageFunction returns a reference to an element, allowing direct interaction.

LANGUAGE: typescript
CODE:
const button = await page.evaluateHandle(() =>
  document.querySelector('button')
);
// can call `click` because `button` is an `ElementHandle`
await button.click();

----------------------------------------

TITLE: Frame.type Usage Examples in TypeScript
DESCRIPTION: Examples showing how to use Frame.type() method for both instant and delayed typing simulation. The delay option can be used to simulate realistic user typing speeds.

LANGUAGE: typescript
CODE:
await frame.type('#mytextarea', 'Hello'); // Types instantly
await frame.type('#mytextarea', 'World', {delay: 100}); // Types slower, like a user

----------------------------------------

TITLE: TypeScript Frame.waitForFunction Method Signature
DESCRIPTION: Method signature showing the generic types and parameters for the Frame.waitForFunction method that evaluates a function in the frame context.

LANGUAGE: typescript
CODE:
class Frame {
  waitForFunction<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    options?: FrameWaitForFunctionOptions,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}

----------------------------------------

TITLE: Defining Touchscreen.touchEnd Method in TypeScript
DESCRIPTION: This code snippet defines the touchEnd() method for the Touchscreen class in Puppeteer. The method dispatches a 'touchend' event on the first active touch and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Touchscreen {
  touchEnd(): Promise<void>;
}

----------------------------------------

TITLE: Defining Locator.wait() Method in TypeScript
DESCRIPTION: This code snippet defines the wait() method for the Locator class in Puppeteer. It takes an optional ActionOptions parameter and returns a Promise of type T. The method waits for the locator to get a serialized value from the page, which must be JSON-serializable.

LANGUAGE: typescript
CODE:
class Locator {
  wait(options?: Readonly<ActionOptions>): Promise<T>;
}

----------------------------------------

TITLE: Method Signature for Page.emulateNetworkConditions
DESCRIPTION: TypeScript class definition showing the signature of the emulateNetworkConditions method in the Page class.

LANGUAGE: typescript
CODE:
class Page {
  abstract emulateNetworkConditions(
    networkConditions: NetworkConditions | null,
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining Touchscreen.touchEnd Method in TypeScript
DESCRIPTION: This code snippet defines the touchEnd() method for the Touchscreen class in Puppeteer. The method dispatches a 'touchend' event on the first active touch and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Touchscreen {
  touchEnd(): Promise<void>;
}

----------------------------------------

TITLE: Implementing Locator Race Method in TypeScript
DESCRIPTION: Static method definition for racing multiple locators in parallel. Takes an array of locators as input and returns a single Locator that resolves to the first successful match.

LANGUAGE: typescript
CODE:
class Locator {
  static race<Locators extends readonly unknown[] | []>(
    locators: Locators,
  ): Locator<AwaitedLocator<Locators[number]>>;
}

----------------------------------------

TITLE: Defining LowerCasePaperFormat Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines a TypeScript type called LowerCasePaperFormat. It represents a union of string literals for various paper formats, including standard letter sizes and A-series paper sizes, all in lowercase.

LANGUAGE: typescript
CODE:
export type LowerCasePaperFormat =
  | 'letter'
  | 'legal'
  | 'tabloid'
  | 'ledger'
  | 'a0'
  | 'a1'
  | 'a2'
  | 'a3'
  | 'a4'
  | 'a5'
  | 'a6';

----------------------------------------

TITLE: Defining SecurityDetails Class in TypeScript
DESCRIPTION: This snippet shows the TypeScript declaration for the SecurityDetails class in Puppeteer. The class is exported and represents security details of a response received over a secure connection.

LANGUAGE: typescript
CODE:
export declare class SecurityDetails

----------------------------------------

TITLE: ElementHandle Select Usage Examples
DESCRIPTION: Examples demonstrating single and multiple option selection using the select method. Shows both single value selection and multiple value selection syntax.

LANGUAGE: typescript
CODE:
handle.select('blue'); // single selection
handle.select('red', 'green', 'blue'); // multiple selections

----------------------------------------

TITLE: Defining setEnsureElementIsInTheViewport Method in TypeScript
DESCRIPTION: TypeScript method signature for configuring viewport behavior in Puppeteer's Locator class. The method creates a new locator instance by cloning the current one and specifies whether the element should be automatically scrolled into viewport if not already visible.

LANGUAGE: typescript
CODE:
class Locator {
  setEnsureElementIsInTheViewport<ElementType extends Element>(
    this: Locator<ElementType>,
    value: boolean,
  ): Locator<ElementType>;
}

----------------------------------------

TITLE: Defining WaitForNetworkIdleOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for WaitForNetworkIdleOptions that extends WaitTimeoutOptions. It includes optional properties for controlling network idle detection with concurrency and idle time settings.

LANGUAGE: typescript
CODE:
export interface WaitForNetworkIdleOptions extends WaitTimeoutOptions

----------------------------------------

TITLE: Defining BrowserLauncher.executablePath Method in TypeScript
DESCRIPTION: This code snippet defines the abstract executablePath method in the BrowserLauncher class. It takes optional parameters for the Chrome release channel and path validation, and returns a string representing the executable path.

LANGUAGE: typescript
CODE:
class BrowserLauncher {
  abstract executablePath(
    channel?: ChromeReleaseChannel,
    validatePath?: boolean,
  ): string;
}

----------------------------------------

TITLE: Implementing Fill Method in Puppeteer Locator Class
DESCRIPTION: TypeScript method signature for the Locator.fill() method. This method takes a value string and optional action options, returning a Promise that resolves when the fill operation is complete. It automatically determines the input type at runtime and applies the appropriate fill strategy.

LANGUAGE: typescript
CODE:
class Locator {
  fill<ElementType extends Element>(
    this: Locator<ElementType>,
    value: string,
    options?: Readonly<ActionOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Specifying CreditCard Property Type in AutofillData Interface
DESCRIPTION: This code snippet shows the type definition for the 'creditCard' property of the AutofillData interface. It includes fields for card number, name, expiry date, and CVC. This structure follows the Autofill.CreditCard type from the Chrome DevTools Protocol.

LANGUAGE: typescript
CODE:
{ number: string; name: string; expiryMonth: string; expiryYear: string; cvc: string; }

----------------------------------------

TITLE: Defining Frame.evaluate() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the evaluate() method for the Frame class in Puppeteer. It uses generic types to allow flexible parameter and return types, similar to Page.evaluate().

LANGUAGE: typescript
CODE:
class Frame {
  evaluate<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}

----------------------------------------

TITLE: Clipboard Operations with Mouse
DESCRIPTION: Example showing how to interact with the clipboard API after bringing the page to front.

LANGUAGE: typescript
CODE:
// The clipboard api does not allow you to copy, unless the tab is focused.
await page.bringToFront();
await page.evaluate(() => {
  // Copy the selected content to the clipboard
  document.execCommand('copy');
  // Obtain the content of the clipboard as a string
  return navigator.clipboard.readText();
});

----------------------------------------

TITLE: Defining Mapper Type in TypeScript
DESCRIPTION: Generic type definition for a mapper function that transforms values from one type to another. The function can return either the direct value or a Promise of the value through the Awaitable type.

LANGUAGE: typescript
CODE:
export type Mapper<From, To> = (value: From) => Awaitable<To>;

----------------------------------------

TITLE: Defining CDPSession.id() Method in TypeScript
DESCRIPTION: This code snippet defines the abstract id() method in the CDPSession class. The method returns a string representing the session's id.

LANGUAGE: typescript
CODE:
class CDPSession {
  abstract id(): string;
}

----------------------------------------

TITLE: Defining Touchscreen.touchStart() Method in TypeScript
DESCRIPTION: This code snippet defines the touchStart() method in the Touchscreen class. It takes x and y coordinates as parameters and returns a Promise resolving to a TouchHandle.

LANGUAGE: typescript
CODE:
class Touchscreen {
  abstract touchStart(x: number, y: number): Promise<TouchHandle>;
}

----------------------------------------

TITLE: Defining Locator.scroll() Method in TypeScript
DESCRIPTION: This snippet defines the scroll() method for the Locator class in Puppeteer. It takes optional LocatorScrollOptions and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Locator {
  scroll<ElementType extends Element>(
    this: Locator<ElementType>,
    options?: Readonly<LocatorScrollOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining PaperFormat Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the PaperFormat type as a union of uppercase, capitalized, and lowercase paper format strings. It references the LowerCasePaperFormat type for the base format names.

LANGUAGE: typescript
CODE:
export type PaperFormat =
  | Uppercase<LowerCasePaperFormat>
  | Capitalize<LowerCasePaperFormat>
  | LowerCasePaperFormat;

----------------------------------------

TITLE: Defining setWaitForEnabled Method for Locator Class in TypeScript
DESCRIPTION: This code snippet defines the setWaitForEnabled method for the Locator class in Puppeteer. The method creates a new locator instance by cloning the current one and specifying whether to wait for input elements to become enabled before actions like click and fill.

LANGUAGE: typescript
CODE:
class Locator {
  setWaitForEnabled<NodeType extends Node>(
    this: Locator<NodeType>,
    value: boolean,
  ): Locator<NodeType>;
}

----------------------------------------

TITLE: Defining JSCoverageEntry Interface in TypeScript
DESCRIPTION: This code snippet defines the JSCoverageEntry interface, which extends the CoverageEntry interface. It includes an optional property 'rawScriptCoverage' of type Protocol.Profiler.ScriptCoverage, representing raw V8 script coverage entry.

LANGUAGE: typescript
CODE:
export interface JSCoverageEntry extends CoverageEntry

----------------------------------------

TITLE: Defining Browser.waitForTarget Method in TypeScript
DESCRIPTION: TypeScript class method signature for Browser.waitForTarget that accepts a predicate function and optional configuration to wait for a matching target.

LANGUAGE: typescript
CODE:
class Browser {
  waitForTarget(
    predicate: (x: Target) => boolean | Promise<boolean>,
    options?: WaitForTargetOptions,
  ): Promise<Target>;
}

----------------------------------------

TITLE: Defining Predicate Type in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the Predicate type, which is a generic function type used for type checking or asynchronous boolean evaluations. It can either be a type guard or a function returning a boolean or a Promise of a boolean.

LANGUAGE: typescript
CODE:
export type Predicate<From, To extends From = From> =
  | ((value: From) => value is To)
  | ((value: From) => Awaitable<boolean>);

----------------------------------------

TITLE: Defining Predicate Type in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the Predicate type, which is a generic function type used for type checking or asynchronous boolean evaluations. It can either be a type guard or a function returning a boolean or a Promise of a boolean.

LANGUAGE: typescript
CODE:
export type Predicate<From, To extends From = From> =
  | ((value: From) => value is To)
  | ((value: From) => Awaitable<boolean>);

----------------------------------------

TITLE: Defining Browser.isConnected() Method in TypeScript
DESCRIPTION: This code snippet defines the isConnected() method in the Browser class. The method returns a boolean indicating whether Puppeteer is connected to the browser instance.

LANGUAGE: typescript
CODE:
class Browser {
  isConnected(): boolean;
}

----------------------------------------

TITLE: Implementing Frame.evaluateHandle Method in TypeScript
DESCRIPTION: TypeScript class definition for Frame.evaluateHandle method that evaluates JavaScript expressions within a frame context. The method accepts a page function and arguments, returning a Promise that resolves to a HandleFor type containing the evaluation result.

LANGUAGE: typescript
CODE:
class Frame {
  evaluateHandle<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}

----------------------------------------

TITLE: Defining FirefoxSettings Interface in TypeScript
DESCRIPTION: Interface declaration for FirefoxSettings that specifies configuration options for Firefox browser instances in Puppeteer. Includes properties for download base URL, version specification, and download behavior control.

LANGUAGE: typescript
CODE:
export interface FirefoxSettings

----------------------------------------

TITLE: Selecting Content Between Nodes in Puppeteer
DESCRIPTION: Example of how to select all content between two nodes using the DocumentOrShadowRoot.getSelection() functionality. This is an alternative to mouse-based text selection.

LANGUAGE: ts
CODE:
await page.evaluate(
  (from, to) => {
    const selection = from.getRootNode().getSelection();
    const range = document.createRange();
    range.setStartBefore(from);
    range.setEndAfter(to);
    selection.removeAllRanges();
    selection.addRange(range);
  },
  fromJSHandle,
  toJSHandle
);

----------------------------------------

TITLE: Defining RemoteAddress Interface in TypeScript
DESCRIPTION: TypeScript interface that represents a remote network address with optional IP address (string) and port number properties. This interface can be used to specify network endpoint information.

LANGUAGE: typescript
CODE:
export interface RemoteAddress

----------------------------------------

TITLE: Defining BoundingBox Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the BoundingBox interface in TypeScript for Puppeteer. It extends the Point interface and includes properties for width and height of an element in pixels.

LANGUAGE: typescript
CODE:
export interface BoundingBox extends Point

----------------------------------------

TITLE: Defining ConsoleMessage.args() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the args() method for the ConsoleMessage class in Puppeteer. The method returns an array of JSHandle objects, which represent arguments passed to the console.

LANGUAGE: typescript
CODE:
class ConsoleMessage {
  args(): JSHandle[];
}

----------------------------------------

TITLE: Defining BrowserLauncher.defaultArgs() Method in TypeScript
DESCRIPTION: This code snippet defines the abstract defaultArgs() method in the BrowserLauncher class. It takes a LaunchOptions object as a parameter and returns an array of strings.

LANGUAGE: typescript
CODE:
class BrowserLauncher {
  abstract defaultArgs(object: LaunchOptions): string[];
}

----------------------------------------

TITLE: Get Default Executable Path
DESCRIPTION: Method to retrieve the default executable path without any parameters. Returns a string representing the path to the Chrome executable.

LANGUAGE: typescript
CODE:
class PuppeteerNode {
  executablePath(): string;
}

----------------------------------------

TITLE: Defining MouseOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for MouseOptions that specifies configuration parameters for mouse events in Puppeteer. Contains optional properties for button type and click count, with button defaulting to 'left' and clickCount defaulting to 1.

LANGUAGE: typescript
CODE:
export interface MouseOptions

----------------------------------------

TITLE: Defining TouchError Class in TypeScript - Puppeteer
DESCRIPTION: Defines the TouchError class that extends PuppeteerError. This error is thrown when attempting to manipulate a non-existent touch event in Puppeteer's touch simulation.

LANGUAGE: typescript
CODE:
export declare class TouchError extends PuppeteerError

----------------------------------------

TITLE: Implementing Mouse Drag Method in Puppeteer TypeScript
DESCRIPTION: Abstract class definition for Mouse drag functionality in Puppeteer. The method takes start and target points as parameters and returns a Promise containing drag data. This enables programmatic simulation of drag operations in browser automation.

LANGUAGE: typescript
CODE:
class Mouse {
  abstract drag(start: Point, target: Point): Promise<Protocol.Input.DragData>;
}

----------------------------------------

TITLE: Defining ElementHandle.boundingBox() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the boundingBox() method of the ElementHandle class. The method returns a Promise that resolves to either a BoundingBox object or null.

LANGUAGE: typescript
CODE:
class ElementHandle {
  boundingBox(): Promise<BoundingBox | null>;
}

----------------------------------------

TITLE: Defining Touchscreen Class in TypeScript
DESCRIPTION: Abstract class declaration for the Touchscreen class in Puppeteer. This class is marked as internal and should not be instantiated directly by third-party code.

LANGUAGE: typescript
CODE:
export declare abstract class Touchscreen

----------------------------------------

TITLE: Implementing Mouse Drag Method in Puppeteer TypeScript
DESCRIPTION: Abstract class definition for Mouse drag functionality in Puppeteer. The method takes start and target points as parameters and returns a Promise containing drag data. This enables programmatic simulation of drag operations in browser automation.

LANGUAGE: typescript
CODE:
class Mouse {
  abstract drag(start: Point, target: Point): Promise<Protocol.Input.DragData>;
}

----------------------------------------

TITLE: Defining BoundingBox Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the BoundingBox interface in TypeScript for Puppeteer. It extends the Point interface and includes properties for width and height of an element in pixels.

LANGUAGE: typescript
CODE:
export interface BoundingBox extends Point

----------------------------------------

TITLE: Defining Browser.deleteCookie() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Browser.deleteCookie() method. It removes cookies from the default BrowserContext and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Browser {
  deleteCookie(...cookies: Cookie[]): Promise<void>;
}

----------------------------------------

TITLE: Defining Mouse.down() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the Mouse.down() method in the Mouse class. It takes an optional Readonly<MouseOptions> parameter and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Mouse {
  abstract down(options?: Readonly<MouseOptions>): Promise<void>;
}

----------------------------------------

TITLE: Implementing Element Visibility Check in Puppeteer
DESCRIPTION: TypeScript class method signature for checking element visibility in Puppeteer. Returns a Promise resolving to a boolean indicating whether the element meets visibility criteria including computed styles, non-empty bounding client rect, and appropriate visibility property.

LANGUAGE: typescript
CODE:
class ElementHandle {
  isVisible(): Promise<boolean>;
}

----------------------------------------

TITLE: Implementing Frame.hover Method in Puppeteer TypeScript
DESCRIPTION: Method signature for hovering over an element in a frame using a CSS selector. The method returns a Promise that resolves when the hover action is complete and throws an exception if no matching element is found.

LANGUAGE: typescript
CODE:
class Frame {
  hover(selector: string): Promise<void>;
}

----------------------------------------

TITLE: Defining TargetFilterCallback Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the TargetFilterCallback type as a function that takes a Target object as input and returns a boolean. It's used for filtering targets in Puppeteer operations.

LANGUAGE: typescript
CODE:
export type TargetFilterCallback = (target: Target) => boolean;

----------------------------------------

TITLE: Defining HTTPRequest.failure Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the abstract failure() method that returns either null or an object containing error text for failed requests.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract failure(): {
    errorText: string;
  } | null;
}

----------------------------------------

TITLE: Defining TargetFilterCallback Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the TargetFilterCallback type as a function that takes a Target object as input and returns a boolean. It's used for filtering targets in Puppeteer operations.

LANGUAGE: typescript
CODE:
export type TargetFilterCallback = (target: Target) => boolean;

----------------------------------------

TITLE: Defining HTTPRequest.abort() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the abort() method of the HTTPRequest class. The method aborts a request and can optionally take an error code and priority parameter.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abort(errorCode?: ErrorCode, priority?: number): Promise<void>;
}

----------------------------------------

TITLE: Defining Page.$eval Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the signature of the Page.$eval method with generic type parameters for selector, function parameters, and return type.

LANGUAGE: typescript
CODE:
class Page {
  $eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<
      NodeFor<Selector>,
      Params
    >,
  >(
    selector: Selector,
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}

----------------------------------------

TITLE: Defining Page.emulate Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the emulate method signature that takes a Device parameter and returns a Promise.

LANGUAGE: typescript
CODE:
class Page {
  emulate(device: Device): Promise<void>;
}

----------------------------------------

TITLE: Defining HTTPRequest.interceptResolutionState() Method in TypeScript
DESCRIPTION: This snippet defines the interceptResolutionState() method in the HTTPRequest class. The method returns an InterceptResolutionState object, which describes the current resolution action and priority for request interception.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  interceptResolutionState(): InterceptResolutionState;
}

----------------------------------------

TITLE: Defining Page.browser Method in TypeScript
DESCRIPTION: Abstract class definition showing the Page.browser() method signature which returns a Browser instance. This method allows accessing the parent browser object from any page instance.

LANGUAGE: typescript
CODE:
class Page {
  abstract browser(): Browser;
}

----------------------------------------

TITLE: Defining Page.emulate Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the emulate method signature that takes a Device parameter and returns a Promise.

LANGUAGE: typescript
CODE:
class Page {
  emulate(device: Device): Promise<void>;
}

----------------------------------------

TITLE: Defining DownloadPolicy Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the DownloadPolicy type as a union of string literals. It specifies four possible values: 'deny', 'allow', 'allowAndName', and 'default'. This type is likely used to control how Puppeteer handles file downloads during browser automation.

LANGUAGE: typescript
CODE:
export type DownloadPolicy = 'deny' | 'allow' | 'allowAndName' | 'default';

----------------------------------------

TITLE: Defining setDefaultNavigationTimeout Method for Page Class in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the setDefaultNavigationTimeout method in the Page class. It takes a single parameter 'timeout' of type number and returns void.

LANGUAGE: typescript
CODE:
class Page {
  abstract setDefaultNavigationTimeout(timeout: number): void;
}

----------------------------------------

TITLE: Defining ScreenshotClip Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the ScreenshotClip interface, which extends the BoundingBox interface. It includes an optional 'scale' property of type number with a default value of 1.

LANGUAGE: typescript
CODE:
export interface ScreenshotClip extends BoundingBox {
    scale?: number;
}

----------------------------------------

TITLE: Using ElementHandle.toElement Method in TypeScript
DESCRIPTION: This example demonstrates how to use the toElement method to convert an ElementHandle<Element> to an ElementHandle<HTMLAnchorElement>. It first selects an element with a class name, then converts it to an anchor element.

LANGUAGE: typescript
CODE:
const element: ElementHandle<Element> = await page.$('.class-name-of-anchor');
// DO NOT DISPOSE `element`, this will be always be the same handle.
const anchor: ElementHandle<HTMLAnchorElement> = await element.toElement('a');

----------------------------------------

TITLE: Defining Quad Type in TypeScript
DESCRIPTION: Defines a Quad type as a tuple of four Point coordinates. This type is commonly used in Puppeteer for representing rectangular regions or geometric transformations in the browser viewport.

LANGUAGE: typescript
CODE:
export type Quad = [Point, Point, Point, Point];

----------------------------------------

TITLE: Defining ElementHandle.dragOver Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.dragOver method. The method is marked as obsolete and should not be used, as dragover will automatically be performed during dragging.

LANGUAGE: typescript
CODE:
class ElementHandle {
  dragOver(
    this: ElementHandle<Element>,
    data?: Protocol.Input.DragData,
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining Target.url Abstract Method in TypeScript
DESCRIPTION: Abstract method definition for retrieving a target's URL in Puppeteer. The method is defined within the Target class and returns a string representing the URL of the target.

LANGUAGE: typescript
CODE:
class Target {
  abstract url(): string;
}

----------------------------------------

TITLE: Defining Frame.$() Method Signature in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the Frame.$() method in Puppeteer. It defines the method as part of the Frame class, accepting a selector parameter and returning a Promise that resolves to an ElementHandle or null.

LANGUAGE: typescript
CODE:
class Frame {
  $<Selector extends string>(
    selector: Selector,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}

----------------------------------------

TITLE: Defining CDPSessionEvent Namespace in TypeScript
DESCRIPTION: TypeScript namespace declaration for CDPSessionEvent that contains event definitions for the CDPSession class. The namespace includes SessionAttached and SessionDetached events.

LANGUAGE: typescript
CODE:
export declare namespace CDPSessionEvent

----------------------------------------

TITLE: Defining ElementHandle.toElement Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the toElement method in the ElementHandle class. It takes a generic type parameter K which extends keyof HTMLElementTagNameMap or keyof SVGElementTagNameMap, and returns a promise resolving to a HandleFor<ElementFor<K>>.

LANGUAGE: typescript
CODE:
class ElementHandle {
  toElement<K extends keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap>(
    tagName: K,
  ): Promise<HandleFor<ElementFor<K>>>;
}

----------------------------------------

TITLE: Defining TouchHandle Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for TouchHandle that defines the structure for managing touch events in Puppeteer. This interface provides methods for handling touch interactions including ending touches and moving touch points.

LANGUAGE: typescript
CODE:
export interface TouchHandle

----------------------------------------

TITLE: Defining Point Interface in TypeScript
DESCRIPTION: TypeScript interface definition for a Point object that contains x and y coordinate properties as numbers. This interface is used throughout Puppeteer for position-related operations.

LANGUAGE: typescript
CODE:
export interface Point {
    x: number;
    y: number;
}

----------------------------------------

TITLE: Defining Locator.scroll() Method in TypeScript
DESCRIPTION: This snippet defines the scroll() method for the Locator class in Puppeteer. It allows scrolling of a located element with optional scroll options.

LANGUAGE: typescript
CODE:
class Locator {
  scroll<ElementType extends Element>(
    this: Locator<ElementType>,
    options?: Readonly<LocatorScrollOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Declaring JSCoverage Class in TypeScript
DESCRIPTION: TypeScript declaration for the JSCoverage class. This class is marked as internal and should not be instantiated directly or extended by third-party code.

LANGUAGE: typescript
CODE:
export declare class JSCoverage

----------------------------------------

TITLE: Implementing Device Request Prompt Filter in TypeScript
DESCRIPTION: Method signature for waitForDevice that accepts a filter function and optional timeout options. The method returns a Promise resolving to a DeviceRequestPromptDevice that matches the filter criteria.

LANGUAGE: typescript
CODE:
class DeviceRequestPrompt {
  waitForDevice(
    filter: (device: DeviceRequestPromptDevice) => boolean,
    options?: WaitTimeoutOptions,
  ): Promise<DeviceRequestPromptDevice>;
}

----------------------------------------

TITLE: Frame Tree Traversal Example
DESCRIPTION: Example showing how to recursively dump the frame tree structure of a page by traversing main frame and child frames.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://www.google.com/chrome/browser/canary.html');
  dumpFrameTree(page.mainFrame(), '');
  await browser.close();

  function dumpFrameTree(frame, indent) {
    console.log(indent + frame.url());
    for (const child of frame.childFrames()) {
      dumpFrameTree(child, indent + '  ');
    }
  }
})();

----------------------------------------

TITLE: Defining CDPSessionEvent Namespace in TypeScript
DESCRIPTION: TypeScript namespace declaration for CDPSessionEvent that contains event definitions for the CDPSession class. The namespace includes SessionAttached and SessionDetached events.

LANGUAGE: typescript
CODE:
export declare namespace CDPSessionEvent

----------------------------------------

TITLE: Retrieving Active Targets in Puppeteer BrowserContext - TypeScript
DESCRIPTION: Method signature for getting all active targets within a browser context. The method returns an array of Target objects representing active pages, extensions, or other targetable entities.

LANGUAGE: typescript
CODE:
class BrowserContext {
  abstract targets(): Target[];
}

----------------------------------------

TITLE: Closing Browser Instance in Puppeteer
DESCRIPTION: Shows how to properly close a browser instance after use to free up system resources.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();

const page = await browser.newPage();

await browser.close();

----------------------------------------

TITLE: Defining Connection Constructor in TypeScript
DESCRIPTION: This code snippet defines the constructor for the Connection class. It takes parameters for URL, transport, delay, timeout, and rawErrors. The transport parameter is of type ConnectionTransport, which is likely defined elsewhere in the project.

LANGUAGE: typescript
CODE:
class Connection {
  constructor(
    url: string,
    transport: ConnectionTransport,
    delay?: number,
    timeout?: number,
    rawErrors?: boolean,
  );
}

----------------------------------------

TITLE: Defining Point Interface in TypeScript
DESCRIPTION: TypeScript interface definition for a Point object that contains x and y coordinate properties as numbers. This interface is used throughout Puppeteer for position-related operations.

LANGUAGE: typescript
CODE:
export interface Point {
    x: number;
    y: number;
}

----------------------------------------

TITLE: Defining URL Method in Puppeteer Connection Class
DESCRIPTION: TypeScript class definition showing the url() method signature in the Connection class. This method returns a string representing the connection URL.

LANGUAGE: typescript
CODE:
class Connection {
  url(): string;
}

----------------------------------------

TITLE: Defining Page.setViewport Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.setViewport method. It takes a Viewport object or null as a parameter and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Page {
  abstract setViewport(viewport: Viewport | null): Promise<void>;
}

----------------------------------------

TITLE: Implementing Page.setDragInterception Method in TypeScript
DESCRIPTION: Abstract class definition for the Page class showing the setDragInterception method signature. The method takes a boolean parameter to enable/disable drag interception and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Page {
  abstract setDragInterception(enabled: boolean): Promise<void>;
}

----------------------------------------

TITLE: ElementHandle.$$eval Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the method signature with generic types for selector, parameters, and function evaluation.

LANGUAGE: typescript
CODE:
class ElementHandle {
  $$eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<
      Array<NodeFor<Selector>>,
      Params
    > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,
  >(
    selector: Selector,
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}

----------------------------------------

TITLE: Defining Page.waitForFrame Method in TypeScript
DESCRIPTION: TypeScript class method signature for Page.waitForFrame that accepts a URL string or predicate function and optional timeout options, returning a Promise of Frame.

LANGUAGE: typescript
CODE:
class Page {
  waitForFrame(
    urlOrPredicate: string | ((frame: Frame) => Awaitable<boolean>),
    options?: WaitTimeoutOptions,
  ): Promise<Frame>;
}

----------------------------------------

TITLE: Defining MouseButton Enum in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the MouseButton enum as a readonly object with string literals for different mouse buttons. It includes Left, Right, Middle, Back, and Forward buttons, which can be used for mouse interactions in Puppeteer.

LANGUAGE: typescript
CODE:
MouseButton: Readonly<{
  Left: 'left';
  Right: 'right';
  Middle: 'middle';
  Back: 'back';
  Forward: 'forward';
}>;

----------------------------------------

TITLE: Defining stopCSSCoverage Method in Coverage Class (TypeScript)
DESCRIPTION: This snippet shows the signature of the stopCSSCoverage() method in the Coverage class. It returns a Promise that resolves to an array of CoverageEntry objects for all stylesheets.

LANGUAGE: typescript
CODE:
class Coverage {
  stopCSSCoverage(): Promise<CoverageEntry[]>;
}

----------------------------------------

TITLE: Defining WaitForTargetOptions Interface in TypeScript
DESCRIPTION: This code snippet defines the WaitForTargetOptions interface in TypeScript. It includes two optional properties: 'signal' for cancelling wait operations, and 'timeout' for setting maximum wait time.

LANGUAGE: typescript
CODE:
export interface WaitForTargetOptions

----------------------------------------

TITLE: Implementing Frame.$$ Method in TypeScript with Puppeteer
DESCRIPTION: Type definition for the Frame.$$ method that queries elements matching a selector within a frame. The method accepts a selector string and optional query options, returning a promise that resolves to an array of ElementHandle objects.

LANGUAGE: typescript
CODE:
class Frame {
  $$<Selector extends string>(
    selector: Selector,
    options?: QueryOptions,
  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;
}

----------------------------------------

TITLE: Defining TimeoutError Class in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the TimeoutError class that extends PuppeteerError. It is used to represent errors that occur when operations in Puppeteer timeout, such as page.waitForSelector or puppeteer.launch.

LANGUAGE: typescript
CODE:
export declare class TimeoutError extends PuppeteerError

----------------------------------------

TITLE: Defining TouchHandle.end() Method Signature in TypeScript
DESCRIPTION: This code snippet defines the signature of the end() method for the TouchHandle interface in Puppeteer. The method dispatches a touchend event and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
interface TouchHandle {
  end(): Promise<void>;
}

----------------------------------------

TITLE: Defining TimeoutError Class in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the TimeoutError class that extends PuppeteerError. It is used to represent errors that occur when operations in Puppeteer timeout, such as page.waitForSelector or puppeteer.launch.

LANGUAGE: typescript
CODE:
export declare class TimeoutError extends PuppeteerError

----------------------------------------

TITLE: Defining TimeoutError Class in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the TimeoutError class that extends PuppeteerError. It is used to represent errors that occur when operations in Puppeteer timeout, such as page.waitForSelector or puppeteer.launch.

LANGUAGE: typescript
CODE:
export declare class TimeoutError extends PuppeteerError

----------------------------------------

TITLE: Unregistering Custom Query Handlers in Puppeteer (TypeScript)
DESCRIPTION: This method is used to unregister all custom query handlers that have been previously registered with Puppeteer. It takes no parameters and returns void. This can be useful when you want to reset the query handlers to their default state.

LANGUAGE: typescript
CODE:
class Puppeteer {
  static clearCustomQueryHandlers(): void;
}

----------------------------------------

TITLE: Defining TracingOptions Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for TracingOptions that defines configuration options for tracing in Puppeteer. Contains optional properties for specifying categories (string array), path (string), and screenshots (boolean).

LANGUAGE: typescript
CODE:
export interface TracingOptions

----------------------------------------

TITLE: Unregistering Custom Query Handlers in Puppeteer (TypeScript)
DESCRIPTION: This method is used to unregister all custom query handlers that have been previously registered with Puppeteer. It takes no parameters and returns void. This can be useful when you want to reset the query handlers to their default state.

LANGUAGE: typescript
CODE:
class Puppeteer {
  static clearCustomQueryHandlers(): void;
}

----------------------------------------

TITLE: Defining Browser.isConnected() Method in TypeScript
DESCRIPTION: This code snippet defines the isConnected() method for the Browser class in Puppeteer. The method returns a boolean indicating whether Puppeteer is connected to the browser instance.

LANGUAGE: typescript
CODE:
class Browser {
  isConnected(): boolean;
}

----------------------------------------

TITLE: Defining Page.setGeolocation() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the setGeolocation method in the Page class. It takes GeolocationOptions as a parameter and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Page {
  abstract setGeolocation(options: GeolocationOptions): Promise<void>;
}

----------------------------------------

TITLE: Defining Frame.$$eval() method signature in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the Frame.$$eval() method. It demonstrates the method's generic types and parameters.

LANGUAGE: typescript
CODE:
class Frame {
  $$eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<
      Array<NodeFor<Selector>>,
      Params
    > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,
  >(
    selector: Selector,
    pageFunction: string | Func,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}

----------------------------------------

TITLE: Defining Target.type Abstract Method in TypeScript
DESCRIPTION: Abstract method definition for Target.type() that returns a TargetType enum value. This method is used to identify the type of browser target (e.g. page, background page, extension, etc).

LANGUAGE: typescript
CODE:
class Target {
  abstract type(): TargetType;
}

----------------------------------------

TITLE: Defining CookieSameSite Type in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the CookieSameSite type as a union of string literals representing possible 'SameSite' cookie attributes. It includes 'Strict', 'Lax', and 'None' as valid options.

LANGUAGE: typescript
CODE:
export type CookieSameSite = 'Strict' | 'Lax' | 'None';

----------------------------------------

TITLE: Defining ElementHandle.dragAndDrop Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the signature of the dragAndDrop method for the ElementHandle class in Puppeteer. It takes a target ElementHandle and optional options as parameters, and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class ElementHandle {
  dragAndDrop(
    this: ElementHandle<Element>,
    target: ElementHandle<Node>,
    options?: {
      delay: number;
    },
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining Target.type Abstract Method in TypeScript
DESCRIPTION: Abstract method definition for Target.type() that returns a TargetType enum value. This method is used to identify the type of browser target (e.g. page, background page, extension, etc).

LANGUAGE: typescript
CODE:
class Target {
  abstract type(): TargetType;
}

----------------------------------------

TITLE: Implementing Page.$$ Method in Puppeteer TypeScript
DESCRIPTION: TypeScript class definition for the Page.$$ method in Puppeteer. This method accepts a selector string and optional query options, returning a Promise that resolves to an array of ElementHandle objects. It serves as a shortcut for Page.mainFrame().$$(selector).

LANGUAGE: typescript
CODE:
class Page {
  $$<Selector extends string>(
    selector: Selector,
    options?: QueryOptions,
  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;
}

----------------------------------------

TITLE: Accessing Browser Instance from BrowserContext in TypeScript
DESCRIPTION: Abstract method definition for retrieving the Browser instance associated with a BrowserContext. This method is implemented by concrete BrowserContext classes to return the parent Browser object that created this context.

LANGUAGE: typescript
CODE:
class BrowserContext {
  abstract browser(): Browser;
}

----------------------------------------

TITLE: Implementing CDPSession.id Method in TypeScript
DESCRIPTION: This code snippet shows the abstract method signature for the id() method in the CDPSession class. The method returns a string representing the session's id.

LANGUAGE: typescript
CODE:
class CDPSession {
  abstract id(): string;
}

----------------------------------------

TITLE: Using Frame.waitForSelector in Puppeteer Script
DESCRIPTION: Example demonstrating how to use waitForSelector to detect when an image element appears on different web pages. The script navigates through multiple URLs and logs when the first image is found on each page.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  let currentURL;
  page
    .mainFrame()
    .waitForSelector('img')
    .then(() => console.log('First URL with image: ' + currentURL));

  for (currentURL of [
    'https://example.com',
    'https://google.com',
    'https://bbc.com',
  ]) {
    await page.goto(currentURL);
  }
  await browser.close();
})();

----------------------------------------

TITLE: Defining CommonEventEmitter.listenerCount Method in TypeScript
DESCRIPTION: This snippet defines the listenerCount method for the CommonEventEmitter interface. It takes an event parameter of type 'keyof Events' and returns a number representing the count of listeners for that event.

LANGUAGE: typescript
CODE:
interface CommonEventEmitter {
  listenerCount(event: keyof Events): number;
}

----------------------------------------

TITLE: TypeScript Usage with Generic Return Type
DESCRIPTION: Example demonstrating how to explicitly specify the return type using TypeScript generics with Page.$eval.

LANGUAGE: typescript
CODE:
const searchValue = await page.$eval<string>(
  '#search',
  (el: HTMLInputElement) => el.value,
);

----------------------------------------

TITLE: Form Input and Submit Example
DESCRIPTION: Shows how to type text into an input field and submit the form by pressing Enter.

LANGUAGE: typescript
CODE:
const elementHandle = await page.$('input');
await elementHandle.type('some text');
await elementHandle.press('Enter');

----------------------------------------

TITLE: Defining Tracing Class in TypeScript
DESCRIPTION: TypeScript class declaration for the Puppeteer Tracing functionality that exposes the tracing audit interface.

LANGUAGE: typescript
CODE:
export declare class Tracing

----------------------------------------

TITLE: Setting Browser Permissions in Puppeteer
DESCRIPTION: Shows how to configure permissions for specific domains in a browser context, such as enabling geolocation access.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();
const context = browser.defaultBrowserContext();

await context.overridePermissions('https://html5demos.com', ['geolocation']);

----------------------------------------

TITLE: Defining LocatorEvent Enum in TypeScript
DESCRIPTION: Declares an enumeration for events that can be emitted by a locator instance. Currently implements the 'action' event which is emitted before performing operations on located elements.

LANGUAGE: typescript
CODE:
export declare enum LocatorEvent

----------------------------------------

TITLE: Defining LocatorEvent Enum in TypeScript
DESCRIPTION: Declares an enumeration for events that can be emitted by a locator instance. Currently implements the 'action' event which is emitted before performing operations on located elements.

LANGUAGE: typescript
CODE:
export declare enum LocatorEvent

----------------------------------------

TITLE: Defining Frame.setContent() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the setContent() method in the Frame class. It takes an HTML string and optional WaitForOptions, and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Frame {
  abstract setContent(html: string, options?: WaitForOptions): Promise<void>;
}

----------------------------------------

TITLE: Defining Puppeteer.registerCustomQueryHandler Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the registerCustomQueryHandler static method of the Puppeteer class. It takes a name string and a CustomQueryHandler object as parameters and returns void.

LANGUAGE: typescript
CODE:
class Puppeteer {
  static registerCustomQueryHandler(
    name: string,
    queryHandler: CustomQueryHandler,
  ): void;
}

----------------------------------------

TITLE: Defining Frame.setContent() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the setContent() method in the Frame class. It takes an HTML string and optional WaitForOptions, and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Frame {
  abstract setContent(html: string, options?: WaitForOptions): Promise<void>;
}

----------------------------------------

TITLE: Defining Page.viewport() Method in TypeScript
DESCRIPTION: Abstract class definition for the Page.viewport() method that returns either the viewport settings previously set via Page.setViewport() or the default viewport from ConnectOptions.defaultViewport.

LANGUAGE: typescript
CODE:
class Page {
  abstract viewport(): Viewport | null;
}

----------------------------------------

TITLE: Defining Page.cookies() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.cookies() method in the Page class. It accepts variable number of URL strings as parameters and returns a Promise resolving to an array of Cookie objects.

LANGUAGE: typescript
CODE:
class Page {
  abstract cookies(...urls: string[]): Promise<Cookie[]>;
}

----------------------------------------

TITLE: Defining Page.close() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.close() method in the Page class. The method accepts an optional options object with a runBeforeUnload property and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Page {
  abstract close(options?: {runBeforeUnload?: boolean}): Promise<void>;
}

----------------------------------------

TITLE: Defining Mouse.dragEnter() Method in TypeScript
DESCRIPTION: This code snippet defines the dragEnter() method in the Mouse class. It takes a target point and drag data as parameters, and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Mouse {
  abstract dragEnter(
    target: Point,
    data: Protocol.Input.DragData,
  ): Promise<void>;
}

----------------------------------------

TITLE: Retrieving Certificate Subject Name in Puppeteer TypeScript
DESCRIPTION: Method signature for getting the subject name from a security certificate. This method is part of the SecurityDetails class and returns the name of the entity to which the certificate was issued.

LANGUAGE: typescript
CODE:
class SecurityDetails {
  subjectName(): string;
}

----------------------------------------

TITLE: Creating Locator with Selector in Puppeteer (TypeScript)
DESCRIPTION: This snippet shows the signature for creating a locator using a selector in Puppeteer. It allows querying the page for elements using various selector types, including CSS selectors and Puppeteer-specific selectors.

LANGUAGE: typescript
CODE:
class Page {
  locator<Selector extends string>(
    selector: Selector,
  ): Locator<NodeFor<Selector>>;
}

----------------------------------------

TITLE: Defining BrowserLauncher Abstract Class in TypeScript
DESCRIPTION: This snippet defines the abstract class BrowserLauncher, which is used to create and launch browser instances in Puppeteer. The class is marked as internal and should not be instantiated or extended by third-party code.

LANGUAGE: typescript
CODE:
export declare abstract class BrowserLauncher

----------------------------------------

TITLE: Defining Page.pdf() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.pdf() method in Puppeteer. It generates a PDF of the page with the 'print' CSS media type and returns a Promise resolving to a Uint8Array.

LANGUAGE: typescript
CODE:
class Page {
  abstract pdf(options?: PDFOptions): Promise<Uint8Array>;
}

----------------------------------------

TITLE: Defining BrowserLauncher Abstract Class in TypeScript
DESCRIPTION: This snippet defines the abstract class BrowserLauncher, which is used to create and launch browser instances in Puppeteer. The class is marked as internal and should not be instantiated or extended by third-party code.

LANGUAGE: typescript
CODE:
export declare abstract class BrowserLauncher

----------------------------------------

TITLE: Unregistering Custom Query Handler in Puppeteer TypeScript
DESCRIPTION: Static method signature for unregistering a custom query handler in Puppeteer. Takes a string parameter 'name' representing the handler to unregister and returns void.

LANGUAGE: typescript
CODE:
class Puppeteer {
  static unregisterCustomQueryHandler(name: string): void;
}

----------------------------------------

TITLE: Defining BrowserContext.deleteCookie() Method in TypeScript
DESCRIPTION: This code snippet defines the deleteCookie() method in the BrowserContext class. It takes an array of Cookie objects as parameters and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class BrowserContext {
  deleteCookie(...cookies: Cookie[]): Promise<void>;
}

----------------------------------------

TITLE: Defining ProtocolError Class in TypeScript
DESCRIPTION: Class declaration for ProtocolError that extends PuppeteerError. It includes two readonly properties: code (number | undefined) and originalMessage (string) for handling protocol-level errors in Puppeteer.

LANGUAGE: typescript
CODE:
export declare class ProtocolError extends PuppeteerError

----------------------------------------

TITLE: Defining BrowserContext.overridePermissions Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the overridePermissions method in the BrowserContext class. It takes an origin string and an array of Permission objects as parameters, and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class BrowserContext {
  abstract overridePermissions(
    origin: string,
    permissions: Permission[],
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining JSHandle.evaluateHandle Method in TypeScript
DESCRIPTION: TypeScript class method definition for evaluateHandle that takes a function or string and additional parameters, returning a Promise with a HandleFor type. The method evaluates a given function with the current handle as its first argument.

LANGUAGE: typescript
CODE:
class JSHandle {
  evaluateHandle<
    Params extends unknown[],
    Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}

----------------------------------------

TITLE: Checking Page Closure Status in Puppeteer (TypeScript)
DESCRIPTION: This method is part of the Page class in Puppeteer and indicates whether the page has been closed. It returns a boolean value, where true means the page is closed and false means it's still open.

LANGUAGE: typescript
CODE:
class Page {
  abstract isClosed(): boolean;
}

----------------------------------------

TITLE: Implementing Cache Control Method in Puppeteer TypeScript
DESCRIPTION: Abstract method definition for setCacheEnabled that controls whether HTTP requests should use caching. Takes an optional boolean parameter that defaults to true and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Page {
  abstract setCacheEnabled(enabled?: boolean): Promise<void>;
}

----------------------------------------

TITLE: Defining ScreenshotOptions Interface in TypeScript
DESCRIPTION: This snippet defines the ScreenshotOptions interface in TypeScript, which is used to configure screenshot capture in Puppeteer. It includes various optional properties for customizing the screenshot process.

LANGUAGE: typescript
CODE:
export interface ScreenshotOptions

----------------------------------------

TITLE: Creating a Locator with Selector in Puppeteer (TypeScript)
DESCRIPTION: This snippet shows the signature for creating a locator using a selector string. It returns a Locator object typed with NodeFor<Selector>.

LANGUAGE: typescript
CODE:
class Frame {
  locator<Selector extends string>(
    selector: Selector,
  ): Locator<NodeFor<Selector>>;
}

----------------------------------------

TITLE: Defining CoverageEntry Interface in TypeScript
DESCRIPTION: This code snippet defines the CoverageEntry interface, which is used to represent a single entry in a coverage report. It includes properties for covered ranges, content text, and the URL of the style sheet or script.

LANGUAGE: typescript
CODE:
export interface CoverageEntry

----------------------------------------

TITLE: Defining Browser.version() Method in TypeScript
DESCRIPTION: This code snippet defines the abstract version() method in the Browser class. It returns a Promise that resolves to a string representing the browser's name and version.

LANGUAGE: typescript
CODE:
class Browser {
  abstract version(): Promise<string>;
}

----------------------------------------

TITLE: Retrieving Dialog Type in Puppeteer TypeScript
DESCRIPTION: TypeScript class definition showing the Dialog.type() method that returns the type of a browser dialog. Returns a Protocol.Page.DialogType value representing the dialog type.

LANGUAGE: typescript
CODE:
class Dialog {
  type(): Protocol.Page.DialogType;
}

----------------------------------------

TITLE: Setting Browser Cookies in Puppeteer using TypeScript
DESCRIPTION: Abstract method definition for setting cookies in a BrowserContext. The method accepts one or more CookieData objects as parameters and returns a Promise that resolves to void. This allows programmatic control over browser cookies within a Puppeteer session.

LANGUAGE: typescript
CODE:
class BrowserContext {
  abstract setCookie(...cookies: CookieData[]): Promise<void>;
}

----------------------------------------

TITLE: Defining CoverageEntry Interface in TypeScript
DESCRIPTION: This code snippet defines the CoverageEntry interface, which is used to represent a single entry in a coverage report. It includes properties for covered ranges, content text, and the URL of the style sheet or script.

LANGUAGE: typescript
CODE:
export interface CoverageEntry

----------------------------------------

TITLE: Retrieving Dialog Type in Puppeteer TypeScript
DESCRIPTION: TypeScript class definition showing the Dialog.type() method that returns the type of a browser dialog. Returns a Protocol.Page.DialogType value representing the dialog type.

LANGUAGE: typescript
CODE:
class Dialog {
  type(): Protocol.Page.DialogType;
}

----------------------------------------

TITLE: Using $$eval with Puppeteer in TypeScript
DESCRIPTION: Practical example demonstrating how to use $$eval to extract text content from multiple elements matching a selector.

LANGUAGE: typescript
CODE:
const feedHandle = await page.$('.feed');
expect(
  await feedHandle.$$eval('.tweet', nodes => nodes.map(n => n.innerText)),
).toEqual(['Hello!', 'Hi!']);

----------------------------------------

TITLE: Defining stopCSSCoverage Method in Coverage Class (TypeScript)
DESCRIPTION: This snippet shows the signature of the stopCSSCoverage() method in the Coverage class. It returns a Promise that resolves to an array of CoverageEntry objects, representing coverage reports for all stylesheets.

LANGUAGE: typescript
CODE:
class Coverage {
  stopCSSCoverage(): Promise<CoverageEntry[]>;
}

----------------------------------------

TITLE: Defining SecurityDetails.protocol() Method in TypeScript
DESCRIPTION: This code snippet defines the protocol() method for the SecurityDetails class in Puppeteer. The method returns a string representing the security protocol being used, such as "TLS 1.2".

LANGUAGE: typescript
CODE:
class SecurityDetails {
  protocol(): string;
}

----------------------------------------

TITLE: Declaring Accessibility Class in TypeScript
DESCRIPTION: TypeScript class declaration for Puppeteer's Accessibility class that provides access to the browser's accessibility tree. This class is meant to be used internally and should not be instantiated directly by third-party code.

LANGUAGE: typescript
CODE:
export declare class Accessibility

----------------------------------------

TITLE: Defining EvaluateFunc Generic Type in TypeScript
DESCRIPTION: Defines a generic type EvaluateFunc that takes an array of unknown types as a parameter. The type represents functions that accept inner parameters and return an Awaitable unknown value. It is used for evaluation functions in Puppeteer.

LANGUAGE: typescript
CODE:
export type EvaluateFunc<T extends unknown[]> = (
  ...params: InnerParams<T>
) => Awaitable<unknown>;

----------------------------------------

TITLE: ExecutablePath Method with LaunchOptions
DESCRIPTION: Method overload that returns the default executable path based on provided LaunchOptions.

LANGUAGE: typescript
CODE:
class PuppeteerNode {
  executablePath(options: LaunchOptions): string;
}

----------------------------------------

TITLE: Defining Quad Type using TypeScript in Puppeteer
DESCRIPTION: This snippet defines the Quad type as an array of four Point objects. It's used to represent quadrilateral shapes in Puppeteer, likely for operations involving page elements or regions.

LANGUAGE: typescript
CODE:
export type Quad = [Point, Point, Point, Point];

----------------------------------------

TITLE: ScreencastOptions Interface Definition in TypeScript
DESCRIPTION: TypeScript interface declaration for ScreencastOptions that defines configuration parameters for screen recording. Contains optional properties for controlling aspects like color palette, cropping, frame rate, quality, and output format.

LANGUAGE: typescript
CODE:
export interface ScreencastOptions

----------------------------------------

TITLE: Defining PuppeteerNode Class in TypeScript
DESCRIPTION: Declaration of the PuppeteerNode class, which extends the Puppeteer class and is used in Node environments for Puppeteer operations.

LANGUAGE: typescript
CODE:
export declare class PuppeteerNode extends Puppeteer

----------------------------------------

TITLE: Retrieving Browser User Agent in Puppeteer - TypeScript
DESCRIPTION: Abstract method definition for retrieving the browser's original user agent string. This method returns a Promise that resolves to a string containing the user agent. Individual pages can override this user agent using Page.setUserAgent().

LANGUAGE: typescript
CODE:
class Browser {
  abstract userAgent(): Promise<string>;
}

----------------------------------------

TITLE: Defining Page.queryObjects Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.queryObjects method. It takes a JSHandle of a prototype and returns a Promise resolving to a JSHandle of an array of objects with that prototype.

LANGUAGE: typescript
CODE:
class Page {
  abstract queryObjects<Prototype>(
    prototypeHandle: JSHandle<Prototype>,
  ): Promise<JSHandle<Prototype[]>>;
}

----------------------------------------

TITLE: Retrieving Abort Error Reason for HTTP Request in Puppeteer (TypeScript)
DESCRIPTION: This method returns the most recent reason for aborting an HTTP request in Puppeteer. It is part of the HTTPRequest class and returns either a Protocol.Network.ErrorReason or null.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abortErrorReason(): Protocol.Network.ErrorReason | null;
}

----------------------------------------

TITLE: Example Usage of Page.waitForFrame
DESCRIPTION: Demonstrates how to use the waitForFrame method to wait for a frame with a specific name. The example uses an async predicate function to check the frame's name.

LANGUAGE: typescript
CODE:
const frame = await page.waitForFrame(async frame => {
  return frame.name() === 'Test';
});

----------------------------------------

TITLE: Defining Locator.waitHandle() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the waitHandle() method in the Locator class. It waits for the locator to get a handle from the page and returns a Promise that resolves to a HandleFor<T>.

LANGUAGE: typescript
CODE:
class Locator {
  waitHandle(options?: Readonly<ActionOptions>): Promise<HandleFor<T>>;
}

----------------------------------------

TITLE: Defining CookieData Interface in TypeScript
DESCRIPTION: This snippet defines the CookieData interface, which is used as a parameter object for setting cookies in Puppeteer's browser-level cookies API. It includes various properties such as domain, name, value, and optional properties like expires, httpOnly, and sameSite.

LANGUAGE: typescript
CODE:
export interface CookieData

----------------------------------------

TITLE: Removing Injected Scripts in Puppeteer TypeScript
DESCRIPTION: Method signature for removing scripts that were previously injected into new page contexts. Takes a string identifier parameter that specifies which script to remove and returns a Promise that resolves when the script is removed.

LANGUAGE: typescript
CODE:
class Page {
  abstract removeScriptToEvaluateOnNewDocument(
    identifier: string,
  ): Promise<void>;
}

----------------------------------------

TITLE: Declaring ScreenRecorder Class TypeScript Definition
DESCRIPTION: TypeScript class declaration showing ScreenRecorder extending PassThrough stream. The class provides screen recording capabilities with internal constructor access and includes a stop() method to end recording.

LANGUAGE: typescript
CODE:
export declare class ScreenRecorder extends PassThrough

----------------------------------------

TITLE: Defining DownloadPolicy Type in TypeScript
DESCRIPTION: TypeScript type definition specifying the allowed download policy values in Puppeteer. The policy can be set to 'deny' to block downloads, 'allow' to permit downloads, 'allowAndName' for downloads with naming control, or 'default' for browser default behavior.

LANGUAGE: typescript
CODE:
export type DownloadPolicy = 'deny' | 'allow' | 'allowAndName' | 'default';

----------------------------------------

TITLE: Declaring ScreenRecorder Class TypeScript Definition
DESCRIPTION: TypeScript class declaration showing ScreenRecorder extending PassThrough stream. The class provides screen recording capabilities with internal constructor access and includes a stop() method to end recording.

LANGUAGE: typescript
CODE:
export declare class ScreenRecorder extends PassThrough

----------------------------------------

TITLE: Defining Target.browserContext() Method in TypeScript
DESCRIPTION: This code snippet defines the browserContext() method for the Target class in Puppeteer. The method returns a BrowserContext object, which represents the browser context the target belongs to.

LANGUAGE: typescript
CODE:
class Target {
  abstract browserContext(): BrowserContext;
}

----------------------------------------

TITLE: Retrieving Browser Instance from Target in Puppeteer (TypeScript)
DESCRIPTION: This code snippet defines the abstract browser() method in the Target class. It returns the Browser instance that the target belongs to. This method is useful for accessing the parent browser of a specific target.

LANGUAGE: typescript
CODE:
class Target {
  abstract browser(): Browser;
}

----------------------------------------

TITLE: Defining Browser.targets() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the abstract targets() method in the Browser class. It returns an array of Target objects, representing all active targets across all browser contexts.

LANGUAGE: typescript
CODE:
class Browser {
  abstract targets(): Target[];
}

----------------------------------------

TITLE: Implementing JavaScript Status Check in Puppeteer TypeScript
DESCRIPTION: Abstract method definition for checking JavaScript enabled status on a Puppeteer page. Returns a boolean indicating whether JavaScript is enabled (true) or disabled (false) for the page instance.

LANGUAGE: typescript
CODE:
class Page {
  abstract isJavaScriptEnabled(): boolean;
}

----------------------------------------

TITLE: Implementing SecurityDetails.issuer() Method in TypeScript
DESCRIPTION: This code snippet defines the SecurityDetails class with the issuer() method. The method returns a string representing the name of the issuer of the certificate.

LANGUAGE: typescript
CODE:
class SecurityDetails {
  issuer(): string;
}

----------------------------------------

TITLE: Implementing HTTPRequest hasPostData Method in TypeScript
DESCRIPTION: Abstract method definition for checking if an HTTP request contains POST data. Returns true when the request has POST data, even if the data might not be readily available in decoded form due to size limitations. In such cases, HTTPRequest.fetchPostData() should be used instead of HTTPRequest.postData().

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract hasPostData(): boolean;
}

----------------------------------------

TITLE: Usage Examples of waitForResponse
DESCRIPTION: Demonstrates different ways to use the waitForResponse method, including waiting for a specific URL, using a predicate function for status code checking, and checking response content.

LANGUAGE: typescript
CODE:
const firstResponse = await page.waitForResponse(
  'https://example.com/resource',
);
const finalResponse = await page.waitForResponse(
  response =>
    response.url() === 'https://example.com' && response.status() === 200,
);
const finalResponse = await page.waitForResponse(async response => {
  return (await response.text()).includes('<html>');
});
return finalResponse.ok();

----------------------------------------

TITLE: Defining Page.reload() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.reload() method. It takes an optional WaitForOptions parameter and returns a Promise that resolves to an HTTPResponse or null.

LANGUAGE: typescript
CODE:
class Page {
  abstract reload(options?: WaitForOptions): Promise<HTTPResponse | null>;
}

----------------------------------------

TITLE: Implementing Browser Disconnect Method in TypeScript - Puppeteer
DESCRIPTION: Abstract method definition for disconnecting Puppeteer from a browser instance while leaving the browser process running. Returns a Promise that resolves when the disconnection is complete.

LANGUAGE: typescript
CODE:
class Browser {
  abstract disconnect(): Promise<void>;
}

----------------------------------------

TITLE: Defining ElementHandle.scrollIntoView Method in TypeScript
DESCRIPTION: This code snippet defines the scrollIntoView method for the ElementHandle class. The method scrolls the element into view using either the automation protocol client or by calling element.scrollIntoView. It takes no parameters and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class ElementHandle {
  scrollIntoView(this: ElementHandle<Element>): Promise<void>;
}

----------------------------------------

TITLE: Defining FrameAddStyleTagOptions Interface in TypeScript
DESCRIPTION: This snippet defines the FrameAddStyleTagOptions interface, which is used to specify options when adding a style tag to a frame in Puppeteer. It includes optional properties for raw CSS content, file path, and URL.

LANGUAGE: typescript
CODE:
export interface FrameAddStyleTagOptions

----------------------------------------

TITLE: Defining FlattenHandle Type in TypeScript for Puppeteer
DESCRIPTION: This code defines a conditional type FlattenHandle that extracts the inner type U from a HandleOr<U> type, or returns never if T is not a HandleOr type. It's used in Puppeteer to simplify working with handle types.

LANGUAGE: typescript
CODE:
export type FlattenHandle<T> = T extends HandleOr<infer U> ? U : never;

----------------------------------------

TITLE: Defining ElementHandle.touchMove Method in TypeScript
DESCRIPTION: Method signature for touchMove which scrolls an element into view and moves a touch point to its center. It accepts an optional TouchHandle parameter and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class ElementHandle {
  touchMove(this: ElementHandle<Element>, touch?: TouchHandle): Promise<void>;
}

----------------------------------------

TITLE: Retrieving Pages in Puppeteer BrowserContext
DESCRIPTION: Abstract method that returns a Promise resolving to an array of Page objects representing all visible pages in the browser context. Non-visible pages like background_page are not included in the results.

LANGUAGE: typescript
CODE:
class BrowserContext {
  abstract pages(): Promise<Page[]>;
}

----------------------------------------

TITLE: Defining Page.evaluate() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.evaluate() method. It defines the method's generic types and parameters.

LANGUAGE: typescript
CODE:
class Page {
  evaluate<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}

----------------------------------------

TITLE: Retrieving Request Override Settings in Puppeteer TypeScript
DESCRIPTION: Method signature showing how to access the ContinueRequestOverrides object from an HTTPRequest instance. This method returns configuration options that will be applied when request interception is allowed to continue without being explicitly aborted or responded to.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  continueRequestOverrides(): ContinueRequestOverrides;
}

----------------------------------------

TITLE: Defining Dialog Class Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Dialog class in Puppeteer. It is an abstract class, indicating that it cannot be instantiated directly.

LANGUAGE: typescript
CODE:
export declare abstract class Dialog

----------------------------------------

TITLE: Defining DebugInfo Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the DebugInfo type that includes an array of protocol errors. This interface is used for debugging purposes in Puppeteer.

LANGUAGE: typescript
CODE:
export interface DebugInfo

----------------------------------------

TITLE: Defining SnapshotOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the SnapshotOptions interface used in Puppeteer for configuring accessibility snapshots. It includes options for including iframes, pruning uninteresting nodes, and specifying a root node.

LANGUAGE: typescript
CODE:
export interface SnapshotOptions

----------------------------------------

TITLE: Defining Frame.waitForNavigation Method Signature in TypeScript
DESCRIPTION: Abstract class definition showing the waitForNavigation method signature that waits for frame navigation events. Takes optional WaitForOptions parameter and returns a Promise resolving to HTTPResponse or null.

LANGUAGE: typescript
CODE:
class Frame {
  abstract waitForNavigation(
    options?: WaitForOptions,
  ): Promise<HTTPResponse | null>;
}

----------------------------------------

TITLE: Implementing SecurityDetails.validFrom Method in TypeScript
DESCRIPTION: Method signature for SecurityDetails.validFrom() which returns a Unix timestamp representing when the SSL/TLS certificate becomes valid. The method returns a number type representing the timestamp.

LANGUAGE: typescript
CODE:
class SecurityDetails {
  validFrom(): number;
}

----------------------------------------

TITLE: Defining Page.title Method in TypeScript
DESCRIPTION: TypeScript class definition showing the Page.title() method signature. This method returns a Promise that resolves to a string containing the page title. It serves as a shortcut to accessing the title of the page's main frame.

LANGUAGE: typescript
CODE:
class Page {
  title(): Promise<string>;
}

----------------------------------------

TITLE: Configuring Puppeteer Cache Directory
DESCRIPTION: Example showing how to configure Puppeteer's cache directory using a configuration file

LANGUAGE: javascript
CODE:
const {join} = require('path');

/**
 * @type {import("puppeteer").Configuration}
 */
module.exports = {
  cacheDirectory: join(__dirname, '.cache', 'puppeteer'),
};

----------------------------------------

TITLE: Implementing SecurityDetails.validFrom Method in TypeScript
DESCRIPTION: Method signature for SecurityDetails.validFrom() which returns a Unix timestamp representing when the SSL/TLS certificate becomes valid. The method returns a number type representing the timestamp.

LANGUAGE: typescript
CODE:
class SecurityDetails {
  validFrom(): number;
}

----------------------------------------

TITLE: Target.worker Method Definition in TypeScript
DESCRIPTION: Defines the worker() method on Target class that returns a Promise resolving to either a WebWorker instance or null. The method returns null if the target type is not 'service_worker' or 'shared_worker'.

LANGUAGE: typescript
CODE:
class Target {
  worker(): Promise<WebWorker | null>;
}

----------------------------------------

TITLE: JSHandle Class Method Definition in TypeScript
DESCRIPTION: TypeScript class definition showing the getProperties method signature that returns a Promise containing a Map of string keys to JSHandle values.

LANGUAGE: typescript
CODE:
class JSHandle {
  getProperties(): Promise<Map<string, JSHandle>>;
}

----------------------------------------

TITLE: Defining EventType in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the EventType type as a union of string and symbol. It's used in Puppeteer for flexible event handling, allowing events to be identified by either string names or unique symbols.

LANGUAGE: typescript
CODE:
export type EventType = string | symbol;

----------------------------------------

TITLE: Defining setExtraHTTPHeaders Method in TypeScript
DESCRIPTION: Abstract method definition for setting extra HTTP headers in Puppeteer's Page class. Takes a Record of string key-value pairs representing headers and returns a Promise that resolves to void. All header values must be strings and header names are automatically lowercased.

LANGUAGE: typescript
CODE:
class Page {
  abstract setExtraHTTPHeaders(headers: Record<string, string>): Promise<void>;
}

----------------------------------------

TITLE: Adding Style Tag in Puppeteer Page Class (TypeScript)
DESCRIPTION: This snippet defines the addStyleTag method in the Page class. It adds a <link> or <style> tag to the page with the specified options. It returns a Promise resolving to an ElementHandle of the injected element.

LANGUAGE: typescript
CODE:
class Page {
  addStyleTag(
    options: Omit<FrameAddStyleTagOptions, 'url'>,
  ): Promise<ElementHandle<HTMLStyleElement>>;
}

----------------------------------------

TITLE: Defining FlattenHandle Generic Type in TypeScript
DESCRIPTION: A TypeScript utility type that extracts the inner type U from a HandleOr<U> type using conditional types. Used in Puppeteer to unwrap handle types.

LANGUAGE: typescript
CODE:
export type FlattenHandle<T> = T extends HandleOr<infer U> ? U : never;

----------------------------------------

TITLE: Defining Locator Class in TypeScript
DESCRIPTION: Abstract class definition for the Locator class that extends EventEmitter with LocatorEvents. The class is generic with type parameter T.

LANGUAGE: typescript
CODE:
export declare abstract class Locator<T> extends EventEmitter<LocatorEvents>

----------------------------------------

TITLE: Creating a Locator with Function in Puppeteer (TypeScript)
DESCRIPTION: This snippet demonstrates the signature for creating a locator using a function. It returns a Locator object typed with the return type of the provided function.

LANGUAGE: typescript
CODE:
class Frame {
  locator<Ret>(func: () => Awaitable<Ret>): Locator<Ret>;
}

----------------------------------------

TITLE: Defining ExtensionTransport.send() Method in TypeScript
DESCRIPTION: This code snippet defines the send() method for the ExtensionTransport class. The method takes a single string parameter 'message' and returns void.

LANGUAGE: typescript
CODE:
class ExtensionTransport {
  send(message: string): void;
}

----------------------------------------

TITLE: Defining Moveable Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the Moveable interface for Puppeteer. The interface includes a single method, move(), which is used to move a resource when 'using'.

LANGUAGE: typescript
CODE:
export interface Moveable

----------------------------------------

TITLE: Defining SupportedWebDriverCapability Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the SupportedWebDriverCapability type by excluding 'unhandledPromptBehavior' and 'acceptInsecureCerts' from the Session.CapabilityRequest type. It's used to specify supported WebDriver capabilities in the Puppeteer project.

LANGUAGE: typescript
CODE:
export type SupportedWebDriverCapability = Exclude<
  Session.CapabilityRequest,
  'unhandledPromptBehavior' | 'acceptInsecureCerts'
>;

----------------------------------------

TITLE: Defining Locator Class in TypeScript
DESCRIPTION: Abstract class definition for the Locator class that extends EventEmitter with LocatorEvents. The class is generic with type parameter T.

LANGUAGE: typescript
CODE:
export declare abstract class Locator<T> extends EventEmitter<LocatorEvents>

----------------------------------------

TITLE: Configuring Chrome Launch for WSL
DESCRIPTION: Demonstrates how to launch Chrome without extensions on Windows Subsystem for Linux

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({
  ignoreDefaultArgs: ['--disable-extensions'],
});

----------------------------------------

TITLE: Implementing SecurityDetails.validTo Method in TypeScript
DESCRIPTION: Method signature for SecurityDetails.validTo() which returns a Unix timestamp representing when the security certificate expires. The method returns a number value corresponding to the certificate's end of validity period.

LANGUAGE: typescript
CODE:
class SecurityDetails {
  validTo(): number;
}

----------------------------------------

TITLE: Defining SerializedAXNode Interface in TypeScript
DESCRIPTION: TypeScript interface definition for SerializedAXNode that represents accessibility properties of a DOM node. This interface includes properties for ARIA attributes, states, and relationships between nodes.

LANGUAGE: typescript
CODE:
export interface SerializedAXNode

----------------------------------------

TITLE: Defining KeyPressOptions Type in TypeScript for Puppeteer
DESCRIPTION: Type definition that combines KeyDownOptions and KeyboardTypeOptions interfaces using intersection type to create a comprehensive set of options for keyboard press operations in Puppeteer.

LANGUAGE: typescript
CODE:
export type KeyPressOptions = KeyDownOptions & KeyboardTypeOptions;

----------------------------------------

TITLE: Adding HTMLLinkElement to Frame in Puppeteer
DESCRIPTION: This method adds a HTMLLinkElement into the frame with the desired URL. It returns a Promise that resolves to an ElementHandle of the loaded <link> element.

LANGUAGE: typescript
CODE:
class Frame {
  addStyleTag(
    options: FrameAddStyleTagOptions,
  ): Promise<ElementHandle<HTMLLinkElement>>;
}

----------------------------------------

TITLE: Implementing Target.opener Method in TypeScript
DESCRIPTION: Abstract method definition for retrieving the parent target that opened the current target. The method returns either a Target object for child targets or undefined for top-level targets.

LANGUAGE: typescript
CODE:
class Target {
  abstract opener(): Target | undefined;
}

----------------------------------------

TITLE: Defining ElementFor Type for HTML and SVG Elements in TypeScript
DESCRIPTION: This type definition maps HTML and SVG element tag names to their corresponding element types. It uses conditional types to determine whether the provided tag name is an HTML or SVG element, and returns the appropriate element type from the respective tag name map.

LANGUAGE: typescript
CODE:
export type ElementFor<
  TagName extends keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap,
> = TagName extends keytype HTMLElementTagNameMap
  ? HTMLElementTagNameMap[TagName]
  : TagName extends keyof SVGElementTagNameMap
    ? SVGElementTagNameMap[TagName]
    : never;

----------------------------------------

TITLE: Defining HTTPRequest.initiator() Method in TypeScript
DESCRIPTION: This code snippet defines the initiator() method within the HTTPRequest class. The method returns the initiator of the request, which is of type Protocol.Network.Initiator or undefined.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract initiator(): Protocol.Network.Initiator | undefined;
}

----------------------------------------

TITLE: Defining Awaitable Generic Type in TypeScript
DESCRIPTION: A TypeScript type definition that creates a union type combining both direct values and Promise-like values. This allows functions to accept either synchronous values or promises that resolve to that value type.

LANGUAGE: typescript
CODE:
export type Awaitable<T> = T | PromiseLike<T>;

----------------------------------------

TITLE: Defining Page.waitForResponse Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the waitForResponse method in the Page class. It defines the method parameters and return type.

LANGUAGE: typescript
CODE:
class Page {
  waitForResponse(
    urlOrPredicate: string | AwaitablePredicate<HTTPResponse>,
    options?: WaitTimeoutOptions,
  ): Promise<HTTPResponse>;
}

----------------------------------------

TITLE: Defining MouseMoveOptions Interface in TypeScript
DESCRIPTION: Interface definition for mouse movement options in Puppeteer. Includes an optional 'steps' property that controls the granularity of mouse movement between points, defaulting to 1.

LANGUAGE: typescript
CODE:
export interface MouseMoveOptions

----------------------------------------

TITLE: Defining FrameAddStyleTagOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the FrameAddStyleTagOptions interface used in Puppeteer for adding style tags to frames. It includes optional properties for specifying CSS content, file path, or URL.

LANGUAGE: typescript
CODE:
export interface FrameAddStyleTagOptions {
  content?: string;
  path?: string;
  url?: string;
}

----------------------------------------

TITLE: Defining FileFormat Type Alias in TypeScript
DESCRIPTION: TypeScript type definition that creates a union type of supported file formats for media operations. Restricts values to 'gif', 'webm', or 'mp4' strings.

LANGUAGE: typescript
CODE:
export type FileFormat = 'gif' | 'webm' | 'mp4';

----------------------------------------

TITLE: Using Tracing in Puppeteer with TypeScript
DESCRIPTION: Demonstrates how to start and stop tracing for a page in Puppeteer. It starts tracing, navigates to a URL, and then stops tracing, saving the result to a file.

LANGUAGE: typescript
CODE:
await page.tracing.start({path: 'trace.json'});
await page.goto('https://www.google.com');
await page.tracing.stop();

----------------------------------------

TITLE: Retrieving Security Protocol Using SecurityDetails Class in TypeScript
DESCRIPTION: Method signature for retrieving the security protocol (e.g., 'TLS 1.2') from a SecurityDetails instance. Returns a string representing the protocol name.

LANGUAGE: typescript
CODE:
class SecurityDetails {
  protocol(): string;
}

----------------------------------------

TITLE: JSHandle Unknown Property Access Implementation
DESCRIPTION: TypeScript implementation of getProperty method for untyped property access. Returns a Promise resolving to a JSHandle containing an unknown value type.

LANGUAGE: typescript
CODE:
class JSHandle {
  getProperty(propertyName: string): Promise<JSHandle<unknown>>;
}

----------------------------------------

TITLE: Travis CI Configuration
DESCRIPTION: Example Travis CI configuration for running Puppeteer tests

LANGUAGE: yaml
CODE:
language: node_js
node_js: node
services: xvfb
script:
  - npm test

----------------------------------------

TITLE: Defining HTTPRequest Class in TypeScript
DESCRIPTION: Abstract class definition for HTTPRequest in Puppeteer, representing an HTTP request sent by a page.

LANGUAGE: typescript
CODE:
export declare abstract class HTTPRequest

----------------------------------------

TITLE: Using Page.waitForDevicePrompt with Bluetooth Device Selection
DESCRIPTION: Example showing how to use waitForDevicePrompt to handle a Bluetooth device connection request. The code demonstrates waiting for a device prompt while clicking a button, then selecting a specific device based on its name.

LANGUAGE: typescript
CODE:
const [devicePrompt] = Promise.all([
  page.waitForDevicePrompt(),
  page.click('#connect-bluetooth'),
]);
await devicePrompt.select(
  await devicePrompt.waitForDevice(({name}) => name.includes('My Device')),
);

----------------------------------------

TITLE: Implementing WebWorker Function Evaluation in TypeScript
DESCRIPTION: TypeScript class method definition for evaluating functions within a web worker context. The method accepts a function or string to evaluate along with parameters, and returns a promise resolving to the function's result. Complex return values may be truncated due to serialization limitations.

LANGUAGE: typescript
CODE:
class WebWorker {
  evaluate<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(func: Func | string, ...args: Params): Promise<Awaited<ReturnType<Func>>>;
}

----------------------------------------

TITLE: Defining JSCoverageEntry Interface in TypeScript
DESCRIPTION: This snippet defines the JSCoverageEntry interface, which extends CoverageEntry and includes an optional rawScriptCoverage property of type Protocol.Profiler.ScriptCoverage.

LANGUAGE: typescript
CODE:
export interface JSCoverageEntry extends CoverageEntry

----------------------------------------

TITLE: Defining Page.evaluateOnNewDocument Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.evaluateOnNewDocument method. It defines the method's parameters and return type, using generics for flexible function types.

LANGUAGE: typescript
CODE:
class Page {
  abstract evaluateOnNewDocument<
    Params extends unknown[],
    Func extends (...args: Params) => unknown = (...args: Params) => unknown,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<NewDocumentScriptEvaluation>;
}

----------------------------------------

TITLE: Defining WaitForSelectorOptions Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for WaitForSelectorOptions that specifies configuration parameters for Puppeteer's element selection waiting functionality. Includes options for visibility, timeout duration, hidden state, and abort signal handling.

LANGUAGE: typescript
CODE:
export interface WaitForSelectorOptions

----------------------------------------

TITLE: Defining ErrorCode Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the ErrorCode type as a union of string literals representing different error scenarios that can occur during Puppeteer operations. It includes network-related errors, access issues, and general failure states.

LANGUAGE: typescript
CODE:
export type ErrorCode =
  | 'aborted'
  | 'accessdenied'
  | 'addressunreachable'
  | 'blockedbyclient'
  | 'blockedbyresponse'
  | 'connectionaborted'
  | 'connectionclosed'
  | 'connectionfailed'
  | 'connectionrefused'
  | 'connectionreset'
  | 'internetdisconnected'
  | 'namenotresolved'
  | 'timedout'
  | 'failed';

----------------------------------------

TITLE: Adding Style Tag with URL in Puppeteer Page Class (TypeScript)
DESCRIPTION: This overload of the addStyleTag method in the Page class specifically handles adding a <link> tag with a URL. It takes FrameAddStyleTagOptions as a parameter and returns a Promise resolving to an ElementHandle of the injected <link> element.

LANGUAGE: typescript
CODE:
class Page {
  addStyleTag(
    options: FrameAddStyleTagOptions,
  ): Promise<ElementHandle<HTMLLinkElement>>;
}

----------------------------------------

TITLE: Defining WaitForSelectorOptions Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for WaitForSelectorOptions that specifies configuration parameters for Puppeteer's element selection waiting functionality. Includes options for visibility, timeout duration, hidden state, and abort signal handling.

LANGUAGE: typescript
CODE:
export interface WaitForSelectorOptions

----------------------------------------

TITLE: Implementing ConsoleMessage.text Method in TypeScript
DESCRIPTION: Definition of the text() method in the ConsoleMessage class that returns the string content of a console message. This method provides access to the raw text of messages logged to the browser's console.

LANGUAGE: typescript
CODE:
class ConsoleMessage {
  text(): string;
}

----------------------------------------

TITLE: Checking Download Capability in Puppeteer
DESCRIPTION: TypeScript function signature for checking if browser downloads are possible. Takes InstallOptions as a parameter and returns a Promise resolving to a boolean indicating download capability.

LANGUAGE: typescript
CODE:
export declare function canDownload(options: InstallOptions): Promise<boolean>;

----------------------------------------

TITLE: Defining ResourceType Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the ResourceType type in Puppeteer. It is a type alias that uses the lowercase version of Protocol.Network.ResourceType. This type is used to represent different resource types for HTTP requests as interpreted by the rendering engine.

LANGUAGE: typescript
CODE:
export type ResourceType = Lowercase<Protocol.Network.ResourceType>;

----------------------------------------

TITLE: Starting dbus Service in Docker Container
DESCRIPTION: Command to start the dbus service inside a Docker container before launching a Puppeteer application. This can help avoid warnings in the browser console.

LANGUAGE: bash
CODE:
sudo service dbus start

----------------------------------------

TITLE: Defining ComputeExecutablePathOptions Interface in TypeScript
DESCRIPTION: This snippet defines the ComputeExecutablePathOptions interface, which is used to configure options for computing the executable path of a browser in Puppeteer. It includes properties for specifying the browser, build ID, cache directory, and platform.

LANGUAGE: typescript
CODE:
export interface ComputeExecutablePathOptions

----------------------------------------

TITLE: Defining SystemOptions Interface in TypeScript
DESCRIPTION: This snippet defines the SystemOptions interface used for configuring browser launch options in Puppeteer. It includes properties for specifying the browser type, release channel, and platform.

LANGUAGE: typescript
CODE:
export interface SystemOptions

----------------------------------------

TITLE: Getting Request URL in Puppeteer TypeScript
DESCRIPTION: Abstract method signature for retrieving the URL of an HTTP request. This method is part of the HTTPRequest class and returns the request URL as a string.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract url(): string;
}

----------------------------------------

TITLE: Implementing Dialog Accept Method in Puppeteer TypeScript
DESCRIPTION: Method signature for accepting dialog prompts in Puppeteer. Takes an optional promptText parameter for prompt-type dialogs and returns a Promise that resolves when the dialog has been accepted.

LANGUAGE: typescript
CODE:
class Dialog {
  accept(promptText?: string): Promise<void>;
}

----------------------------------------

TITLE: Defining HTTPRequest.abortErrorReason Method in TypeScript
DESCRIPTION: Method signature for retrieving the most recent abort error reason from an HTTP request. Returns either a Protocol.Network.ErrorReason or null if no error reason is available.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abortErrorReason(): Protocol.Network.ErrorReason | null;
}

----------------------------------------

TITLE: Handling Click Navigation Pattern - TypeScript
DESCRIPTION: Demonstrates the correct pattern for handling click events that trigger navigation, using Promise.all to avoid race conditions between click and navigation events.

LANGUAGE: typescript
CODE:
const [response] = await Promise.all([
  page.waitForNavigation(waitOptions),
  frame.click(selector, clickOptions),
]);

----------------------------------------

TITLE: Defining KeyInput Type for Puppeteer in TypeScript
DESCRIPTION: This code snippet defines the KeyInput type, which is a union of string literals representing all valid keys that can be passed to user input functions in Puppeteer. It includes numeric keys, letter keys, function keys, special characters, and various other input keys.

LANGUAGE: typescript
CODE:
export type KeyInput =
  | '0'
  | '1'
  | '2'
  | '3'
  | '4'
  | '5'
  | '6'
  | '7'
  | '8'
  | '9'
  | 'Power'
  | 'Eject'
  | 'Abort'
  | 'Help'
  | 'Backspace'
  | 'Tab'
  | 'Numpad5'
  | 'NumpadEnter'
  | 'Enter'
  | '\r'
  | '\n'
  | 'ShiftLeft'
  | 'ShiftRight'
  | 'ControlLeft'
  | 'ControlRight'
  | 'AltLeft'
  | 'AltRight'
  | 'Pause'
  | 'CapsLock'
  | 'Escape'
  | 'Convert'
  | 'NonConvert'
  | 'Space'
  | 'Numpad9'
  | 'PageUp'
  | 'Numpad3'
  | 'PageDown'
  | 'End'
  | 'Numpad1'
  | 'Home'
  | 'Numpad7'
  | 'ArrowLeft'
  | 'Numpad4'
  | 'Numpad8'
  | 'ArrowUp'
  | 'ArrowRight'
  | 'Numpad6'
  | 'Numpad2'
  | 'ArrowDown'
  | 'Select'
  | 'Open'
  | 'PrintScreen'
  | 'Insert'
  | 'Numpad0'
  | 'Delete'
  | 'NumpadDecimal'
  | 'Digit0'
  | 'Digit1'
  | 'Digit2'
  | 'Digit3'
  | 'Digit4'
  | 'Digit5'
  | 'Digit6'
  | 'Digit7'
  | 'Digit8'
  | 'Digit9'
  | 'KeyA'
  | 'KeyB'
  | 'KeyC'
  | 'KeyD'
  | 'KeyE'
  | 'KeyF'
  | 'KeyG'
  | 'KeyH'
  | 'KeyI'
  | 'KeyJ'
  | 'KeyK'
  | 'KeyL'
  | 'KeyM'
  | 'KeyN'
  | 'KeyO'
  | 'KeyP'
  | 'KeyQ'
  | 'KeyR'
  | 'KeyS'
  | 'KeyT'
  | 'KeyU'
  | 'KeyV'
  | 'KeyW'
  | 'KeyX'
  | 'KeyY'
  | 'KeyZ'
  | 'MetaLeft'
  | 'MetaRight'
  | 'ContextMenu'
  | 'NumpadMultiply'
  | 'NumpadAdd'
  | 'NumpadSubtract'
  | 'NumpadDivide'
  | 'F1'
  | 'F2'
  | 'F3'
  | 'F4'
  | 'F5'
  | 'F6'
  | 'F7'
  | 'F8'
  | 'F9'
  | 'F10'
  | 'F11'
  | 'F12'
  | 'F13'
  | 'F14'
  | 'F15'
  | 'F16'
  | 'F17'
  | 'F18'
  | 'F19'
  | 'F20'
  | 'F21'
  | 'F22'
  | 'F23'
  | 'F24'
  | 'NumLock'
  | 'ScrollLock'
  | 'AudioVolumeMute'
  | 'AudioVolumeDown'
  | 'AudioVolumeUp'
  | 'MediaTrackNext'
  | 'MediaTrackPrevious'
  | 'MediaStop'
  | 'MediaPlayPause'
  | 'Semicolon'
  | 'Equal'
  | 'NumpadEqual'
  | 'Comma'
  | 'Minus'
  | 'Period'
  | 'Slash'
  | 'Backquote'
  | 'BracketLeft'
  | 'Backslash'
  | 'BracketRight'
  | 'Quote'
  | 'AltGraph'
  | 'Props'
  | 'Cancel'
  | 'Clear'
  | 'Shift'
  | 'Control'
  | 'Alt'
  | 'Accept'
  | 'ModeChange'
  | ' '
  | 'Print'
  | 'Execute'
  | '\u0000'
  | 'a'
  | 'b'
  | 'c'
  | 'd'
  | 'e'
  | 'f'
  | 'g'
  | 'h'
  | 'i'
  | 'j'
  | 'k'
  | 'l'
  | 'm'
  | 'n'
  | 'o'
  | 'p'
  | 'q'
  | 'r'
  | 's'
  | 't'
  | 'u'
  | 'v'
  | 'w'
  | 'x'
  | 'y'
  | 'z'
  | 'Meta'
  | '*'
  | '+'
  | '-'
  | '/'
  | ';'
  | '='
  | ','
  | '.'
  | '`'
  | '['
  | '\\'
  | ']'
  | "'"
  | 'Attn'
  | 'CrSel'
  | 'ExSel'
  | 'EraseEof'
  | 'Play'
  | 'ZoomOut'
  | ')'
  | '!'
  | '@'
  | '#'
  | '$'
  | '%'
  | '^'
  | '&'
  | '('
  | 'A'
  | 'B'
  | 'C'
  | 'D'
  | 'E'
  | 'F'
  | 'G'
  | 'H'
  | 'I'
  | 'J'
  | 'K'
  | 'L'
  | 'M'
  | 'N'
  | 'O'
  | 'P'
  | 'Q'
  | 'R'
  | 'S'
  | 'T'
  | 'U'
  | 'V'
  | 'W'
  | 'X'
  | 'Y'
  | 'Z'
  | ':'
  | '<'
  | '_'
  | '>'
  | '?'
  | '~'
  | '{'
  | '|'
  | '}'
  | '"'
  | 'SoftLeft'
  | 'SoftRight'
  | 'Camera'
  | 'Call'
  | 'EndCall'
  | 'VolumeDown'
  | 'VolumeUp';

----------------------------------------

TITLE: Using Page.emulateNetworkConditions() with Predefined Network Conditions in TypeScript
DESCRIPTION: This example demonstrates how to use the Page.emulateNetworkConditions() method with predefined network conditions. It imports PredefinedNetworkConditions, launches a browser, creates a new page, emulates slow 3G network conditions, and navigates to a website.

LANGUAGE: typescript
CODE:
import {PredefinedNetworkConditions} from 'puppeteer';
const slow3G = PredefinedNetworkConditions['Slow 3G'];

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.emulateNetworkConditions(slow3G);
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();

----------------------------------------

TITLE: Defining QueryOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the QueryOptions interface for Puppeteer. It includes a single property 'isolate' of type boolean, which determines whether to run queries in isolation.

LANGUAGE: typescript
CODE:
export interface QueryOptions

----------------------------------------

TITLE: Defining WaitForTargetOptions Interface in TypeScript
DESCRIPTION: This snippet defines the WaitForTargetOptions interface used in Puppeteer. It includes two optional properties: 'signal' for cancelling the waitFor call, and 'timeout' for setting the maximum wait time.

LANGUAGE: typescript
CODE:
export interface WaitForTargetOptions

----------------------------------------

TITLE: Defining Mapper Type in TypeScript
DESCRIPTION: Generic type definition for a mapper function that transforms values from type From to type To. The function can return either the value directly or a Promise of the value, utilizing the Awaitable type.

LANGUAGE: typescript
CODE:
export type Mapper<From, To> = (value: From) => Awaitable<To>;

----------------------------------------

TITLE: Defining Viewport Interface in TypeScript for Puppeteer
DESCRIPTION: This TypeScript interface defines the Viewport configuration for Puppeteer. It includes properties for width, height, device scale factor, touch support, mobile emulation, and orientation.

LANGUAGE: typescript
CODE:
export interface Viewport

----------------------------------------

TITLE: Connection Class Definition in TypeScript
DESCRIPTION: Defines the Connection class that extends EventEmitter to handle Chrome DevTools Protocol session events. The class is used for managing connections and communication in Puppeteer.

LANGUAGE: typescript
CODE:
export declare class Connection extends EventEmitter<CDPSessionEvents>

----------------------------------------

TITLE: Defining CDP WebSocket Endpoint RegExp Pattern in TypeScript
DESCRIPTION: TypeScript constant declaration that defines a regular expression pattern used to match or validate Chrome DevTools Protocol WebSocket endpoints. This is a crucial component for establishing WebSocket connections in Puppeteer's CDP implementation.

LANGUAGE: typescript
CODE:
CDP_WEBSOCKET_ENDPOINT_REGEX: RegExp;

----------------------------------------

TITLE: Defining ConnectionTransport Interface in TypeScript
DESCRIPTION: Defines a TypeScript interface for connection transport handling with optional event handlers for message and close events, plus methods for sending messages and closing the connection.

LANGUAGE: typescript
CODE:
export interface ConnectionTransport {
  onclose?: () => void;
  onmessage?: (message: string) => void;
  close(): void;
  send(message: string): void;
}

----------------------------------------

TITLE: ElementHandle Class Method Definition in TypeScript
DESCRIPTION: TypeScript class definition showing the signature of the waitForSelector method in the ElementHandle class. The method accepts a selector string and optional configuration options.

LANGUAGE: typescript
CODE:
class ElementHandle {
  waitForSelector<Selector extends string>(
    selector: Selector,
    options?: WaitForSelectorOptions,
  ): Promise<ElementHandle<NodeFor<Selector>> | null>;
}

----------------------------------------

TITLE: Launching Default Headless Mode in Puppeteer (TypeScript)
DESCRIPTION: Demonstrates the default way to launch Puppeteer in headless mode. Both examples are equivalent, with the headless option being true by default.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch();
// Equivalent to
const browser = await puppeteer.launch({headless: true});

----------------------------------------

TITLE: Defining Moveable.move() Method in TypeScript
DESCRIPTION: This code snippet defines the move() method in the Moveable interface. The method takes no parameters and returns the instance of the object (this), allowing for method chaining.

LANGUAGE: typescript
CODE:
interface Moveable {
  move(): this;
}

----------------------------------------

TITLE: Defining HTTPResponse.json Method in TypeScript
DESCRIPTION: Defines the json() method on HTTPResponse class that returns a Promise resolving to the JSON representation of the response body. Will throw an error if the response cannot be parsed via JSON.parse.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  json(): Promise<any>;
}

----------------------------------------

TITLE: Initializing CLI Class Constructor - TypeScript
DESCRIPTION: Constructor signature for the CLI class that handles initialization with optional configuration parameters. Supports cache path configuration, script naming, prefix commands, and browser pinning settings. Also accepts an optional readline interface.

LANGUAGE: typescript
CODE:
class CLI {
  constructor(
    opts?:
      | string
      | {
          cachePath?: string;
          scriptName?: string;
          prefixCommand?: {
            cmd: string;
            description: string;
          };
          allowCachePathOverride?: boolean;
          pinnedBrowsers?: Partial<
            Record<
              Browser,
              {
                buildId: string;
                skipDownload: boolean;
              }
            >
          >;
        },
    rl?: readline.Interface,
  );
}

----------------------------------------

TITLE: Defining ElementHandle.uploadFile Method in TypeScript
DESCRIPTION: TypeScript class method definition for uploading files to an HTML input element. Takes file paths as arguments and returns a Promise. The method is specifically typed to work with HTMLInputElement elements.

LANGUAGE: typescript
CODE:
class ElementHandle {
  abstract uploadFile(
    this: ElementHandle<HTMLInputElement>,
    ...paths: string[]
  ): Promise<void>;
}

----------------------------------------

TITLE: Implementing Dialog.defaultValue Method in TypeScript
DESCRIPTION: A TypeScript class method definition that retrieves the default value of a prompt dialog. Returns an empty string if the dialog is not a prompt type.

LANGUAGE: typescript
CODE:
class Dialog {
  defaultValue(): string;
}

----------------------------------------

TITLE: Defining KeyboardTypeOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the KeyboardTypeOptions interface for Puppeteer. It includes an optional 'delay' property of type number, which can be used to specify timing between keystrokes.

LANGUAGE: typescript
CODE:
export interface KeyboardTypeOptions {
  delay?: number;
}

----------------------------------------

TITLE: Defining Page.emulateTimezone Method in TypeScript
DESCRIPTION: TypeScript class definition for the Page.emulateTimezone() method that enables timezone emulation. The method accepts an optional timezone ID parameter and returns a Promise. Timezone IDs should match those in ICU's metaZones.txt specification.

LANGUAGE: typescript
CODE:
class Page {
  abstract emulateTimezone(timezoneId?: string): Promise<void>;
}

----------------------------------------

TITLE: Checking Service Worker Bypass Status in Puppeteer (TypeScript)
DESCRIPTION: This method returns a boolean indicating whether service workers are being bypassed for the current page. It takes no parameters and returns true if service workers are bypassed, false otherwise.

LANGUAGE: typescript
CODE:
class Page {
  abstract isServiceWorkerBypassed(): boolean;
}

----------------------------------------

TITLE: Defining Mouse.dragOver() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the dragOver() method for the Mouse class in Puppeteer. It takes a target point and drag data as parameters and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Mouse {
  abstract dragOver(
    target: Point,
    data: Protocol.Input.DragData,
  ): Promise<void>;
}

----------------------------------------

TITLE: Computing Executable Path in Puppeteer - TypeScript Function Definition
DESCRIPTION: TypeScript function signature for computeExecutablePath that takes ComputeExecutablePathOptions as a parameter and returns a string representing the executable path.

LANGUAGE: typescript
CODE:
export declare function computeExecutablePath(
  options: ComputeExecutablePathOptions,
): string;

----------------------------------------

TITLE: Declaring Puppeteer Variable in TypeScript
DESCRIPTION: This code snippet declares the puppeteer variable with a specific type from the PuppeteerCore namespace. It defines puppeteer as an instance of PuppeteerNode, which likely provides access to Puppeteer's core functionality for Node.js environments.

LANGUAGE: typescript
CODE:
puppeteer: PuppeteerCore.PuppeteerNode;

----------------------------------------

TITLE: Installing Puppeteer Angular Schematic
DESCRIPTION: Command to add Puppeteer-based e2e tests to an Angular project using the Angular CLI.

LANGUAGE: bash
CODE:
ng add @puppeteer/ng-schematics

----------------------------------------

TITLE: Dialog Class Definition in TypeScript
DESCRIPTION: Abstract class declaration for Dialog in Puppeteer framework.

LANGUAGE: typescript
CODE:
export declare abstract class Dialog

----------------------------------------

TITLE: Implementing CLI Run Method in TypeScript
DESCRIPTION: Definition of the run method in the CLI class. The method accepts an array of strings as command line arguments and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class CLI {
  run(argv: string[]): Promise<void>;
}

----------------------------------------

TITLE: Defining KeyDownOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the KeyDownOptions interface used in Puppeteer. It includes two deprecated properties: 'commands' and 'text', both of which are now automatically handled and should not be used.

LANGUAGE: typescript
CODE:
export interface KeyDownOptions

----------------------------------------

TITLE: ElementHandle Select Method Signature
DESCRIPTION: TypeScript class definition showing the select method signature that accepts variable string arguments and returns a Promise of selected values.

LANGUAGE: typescript
CODE:
class ElementHandle {
  select(...values: string[]): Promise<string[]>;
}

----------------------------------------

TITLE: Implementing Device Selection in Puppeteer TypeScript
DESCRIPTION: Method signature for selecting a device from a DeviceRequestPrompt. Takes a DeviceRequestPromptDevice parameter and returns a Promise that resolves when the selection is complete.

LANGUAGE: typescript
CODE:
class DeviceRequestPrompt {
  select(device: DeviceRequestPromptDevice): Promise<void>;
}

----------------------------------------

TITLE: Dumping Entire Accessibility Tree in TypeScript
DESCRIPTION: This example demonstrates how to capture and log the entire accessibility tree using the snapshot() method.

LANGUAGE: typescript
CODE:
const snapshot = await page.accessibility.snapshot();
console.log(snapshot);

----------------------------------------

TITLE: Defining InstallOptions Interface in TypeScript
DESCRIPTION: Declares the InstallOptions interface with properties for configuring browser installation. It includes options for specifying the download URL, browser type, build ID, cache directory, and various other installation parameters.

LANGUAGE: typescript
CODE:
export interface InstallOptions

----------------------------------------

TITLE: Checking Redirect Chain for Non-Redirecting Website in Puppeteer
DESCRIPTION: This example shows how to check the redirect chain for a website without any redirects using Puppeteer. It demonstrates that the chain is empty for a direct request.

LANGUAGE: typescript
CODE:
const response = await page.goto('https://google.com');
const chain = response.request().redirectChain();
console.log(chain.length); // 0

----------------------------------------

TITLE: Defining JSHandle.evaluate() Method Signature in TypeScript
DESCRIPTION: This code snippet defines the signature of the evaluate() method for the JSHandle class in Puppeteer. The method takes a function or string as its first parameter, followed by additional arguments, and returns a Promise.

LANGUAGE: typescript
CODE:
class JSHandle {
  evaluate<
    Params extends unknown[],
    Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}

----------------------------------------

TITLE: Defining ElementHandle.$eval Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.$eval method. It defines the method with generic types for the selector, parameters, and function, allowing for flexible usage with different element types and return values.

LANGUAGE: typescript
CODE:
class ElementHandle {
  $eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<
      NodeFor<Selector>,
      Params
    >,
  >(
    selector: Selector,
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}

----------------------------------------

TITLE: Implementing Locator Clone Method in TypeScript
DESCRIPTION: Type definition for the clone() method in Puppeteer's Locator class. The method creates and returns a new copy of the Locator instance with type parameter T.

LANGUAGE: typescript
CODE:
class Locator {
  clone(): Locator<T>;
}

----------------------------------------

TITLE: Defining ElementScreenshotOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the ElementScreenshotOptions interface, which extends ScreenshotOptions and adds an optional scrollIntoView property of type boolean with a default value of true.

LANGUAGE: typescript
CODE:
export interface ElementScreenshotOptions extends ScreenshotOptions

----------------------------------------

TITLE: Defining Locator.waitHandle Method in TypeScript
DESCRIPTION: Method signature for waitHandle() in the Locator class. The method accepts optional ActionOptions parameter and returns a Promise that resolves to a HandleFor<T> type.

LANGUAGE: typescript
CODE:
class Locator {
  waitHandle(options?: Readonly<ActionOptions>): Promise<HandleFor<T>>;
}

----------------------------------------

TITLE: Defining Page.setBypassCSP Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.setBypassCSP method. It takes a boolean parameter to enable or disable CSP bypassing and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Page {
  abstract setBypassCSP(enabled: boolean): Promise<void>;
}

----------------------------------------

TITLE: Detecting Browser Platform Function Signature in TypeScript
DESCRIPTION: This code snippet defines the signature of the detectBrowserPlatform() function. It returns either a BrowserPlatform or undefined, allowing detection of the current browser platform in Puppeteer.

LANGUAGE: typescript
CODE:
export declare function detectBrowserPlatform(): BrowserPlatform | undefined;

----------------------------------------

TITLE: Defining Page.setDefaultTimeout Method in TypeScript
DESCRIPTION: Abstract method definition for setting the default timeout value for all operations on a page. Takes a timeout parameter in milliseconds and returns void.

LANGUAGE: typescript
CODE:
class Page {
  abstract setDefaultTimeout(timeout: number): void;
}

----------------------------------------

TITLE: Defining ElementHandle.$eval Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.$eval method. It defines the method with generic types for the selector, parameters, and function, allowing for flexible usage with different element types and return values.

LANGUAGE: typescript
CODE:
class ElementHandle {
  $eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<NodeFor<Selector>, Params> = EvaluateFuncWith<
      NodeFor<Selector>,
      Params
    >,
  >(
    selector: Selector,
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}

----------------------------------------

TITLE: Basic Puppeteer E2E Test Structure
DESCRIPTION: TypeScript code demonstrating the basic structure of a Puppeteer E2E test, including setup and element interaction.

LANGUAGE: typescript
CODE:
import {setupBrowserHooks, getBrowserState} from './utils';

describe('<Test Name>', function () {
  setupBrowserHooks();
  it('is running', async function () {
    const {page} = getBrowserState();
    // Query elements
    await page
      .locator('my-component')
      // Click on the element once found
      .click();
  });
});

----------------------------------------

TITLE: Defining Accessibility.snapshot() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Accessibility.snapshot() method. It takes an optional SnapshotOptions parameter and returns a Promise that resolves to a SerializedAXNode or null.

LANGUAGE: typescript
CODE:
class Accessibility {
  snapshot(options?: SnapshotOptions): Promise<SerializedAXNode | null>;
}

----------------------------------------

TITLE: Defining Process.kill() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the kill() method for the Process class in Puppeteer. The method takes no parameters and returns void, indicating it terminates the process without returning any value.

LANGUAGE: typescript
CODE:
class Process {
  kill(): void;
}

----------------------------------------

TITLE: Defining Browser Enum Types in TypeScript for Puppeteer
DESCRIPTION: TypeScript enumeration that defines the supported browser types in Puppeteer. Includes string literal values for Chrome, ChromeDriver, Chrome Headless Shell, Chromium, and Firefox browsers.

LANGUAGE: typescript
CODE:
export declare enum Browser {
  CHROME = "chrome",
  CHROMEDRIVER = "chromedriver",
  CHROMEHEADLESSSHELL = "chrome-headless-shell",
  CHROMIUM = "chromium",
  FIREFOX = "firefox"
}

----------------------------------------

TITLE: Defining DownloadBehavior Interface in TypeScript
DESCRIPTION: This snippet defines the DownloadBehavior interface in TypeScript. It specifies two properties: downloadPath (optional) for setting the default download path, and policy for controlling download behavior.

LANGUAGE: typescript
CODE:
export interface DownloadBehavior

----------------------------------------

TITLE: Cancelling Device Request Prompt in Puppeteer using TypeScript
DESCRIPTION: This code snippet demonstrates the signature of the cancel() method in the DeviceRequestPrompt class. The method is asynchronous and returns a Promise that resolves to void, indicating the completion of the cancellation operation.

LANGUAGE: typescript
CODE:
class DeviceRequestPrompt {
  cancel(): Promise<void>;
}

----------------------------------------

TITLE: Defining BrowserContext.waitForTarget Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature of the waitForTarget method in the BrowserContext class. It waits for a target matching a given predicate to appear and returns it.

LANGUAGE: typescript
CODE:
class BrowserContext {
  waitForTarget(
    predicate: (x: Target) => boolean | Promise<boolean>,
    options?: WaitForTargetOptions,
  ): Promise<Target>;
}

----------------------------------------

TITLE: Defining InternalNetworkConditions Interface in TypeScript
DESCRIPTION: This snippet defines the InternalNetworkConditions interface, which extends the NetworkConditions interface. It includes a single property 'offline' of type boolean.

LANGUAGE: typescript
CODE:
export interface InternalNetworkConditions extends NetworkConditions

----------------------------------------

TITLE: Defining BrowserContext.waitForTarget Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature of the waitForTarget method in the BrowserContext class. It waits for a target matching a given predicate to appear and returns it.

LANGUAGE: typescript
CODE:
class BrowserContext {
  waitForTarget(
    predicate: (x: Target) => boolean | Promise<boolean>,
    options?: WaitForTargetOptions,
  ): Promise<Target>;
}

----------------------------------------

TITLE: Defining ConnectionTransport Interface in TypeScript
DESCRIPTION: This snippet defines the ConnectionTransport interface with optional onclose and onmessage properties, and close() and send() methods. It represents the structure for implementing connection transport in Puppeteer.

LANGUAGE: typescript
CODE:
export interface ConnectionTransport {
  onclose?: () => void;
  onmessage?: (message: string) => void;
  close(): void;
  send(message: string): void;
}

----------------------------------------

TITLE: Starting dbus Service in Docker
DESCRIPTION: Command to start the dbus service inside the Docker container, which may be needed to prevent browser console warnings in certain scenarios.

LANGUAGE: bash
CODE:
sudo service dbus start

----------------------------------------

TITLE: Defining HTTPResponse.headers() Method in TypeScript
DESCRIPTION: This code snippet defines the headers() method for the HTTPResponse class in Puppeteer. The method returns an object containing HTTP headers associated with the response, with all header names in lower-case.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  abstract headers(): Record<string, string>;
}

----------------------------------------

TITLE: Migrated Puppeteer E2E Test Example
DESCRIPTION: Complete TypeScript example of a Puppeteer E2E test migrated from Protractor, demonstrating navigation, element interaction, and assertions.

LANGUAGE: typescript
CODE:
import {setupBrowserHooks, getBrowserState} from './utils';

describe('Puppeteer Demo', function () {
  setupBrowserHooks();
  it('should add one and two', function () {
    const {page} = getBrowserState();
    await page.goto('https://juliemr.github.io/protractor-demo/');

    await page.locator('.form-inline > input:nth-child(1)').fill('1');
    await page.locator('.form-inline > input:nth-child(2)').fill('2');
    await page.locator('#gobutton').fill('2');

    const result = await page
      .locator('.table tbody td:last-of-type')
      .map(header => header.innerText)
      .wait();

    expect(result).toEqual('3');
  });
});

----------------------------------------

TITLE: Formatting Puppeteer Code in Bash
DESCRIPTION: Command to automatically fix style and formatting issues in Puppeteer code.

LANGUAGE: bash
CODE:
npm run format

----------------------------------------

TITLE: Defining makeProgressCallback Function in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the makeProgressCallback function, which creates a progress tracking callback for browser downloads. It takes a Browser object and a buildId string as parameters and returns a function that accepts downloadedBytes and totalBytes as arguments.

LANGUAGE: typescript
CODE:
export declare function makeProgressCallback(
  browser: Browser,
  buildId: string,
): (downloadedBytes: number, totalBytes: number) => void;

----------------------------------------

TITLE: Defining Process.waitForLineOutput() Method in TypeScript
DESCRIPTION: This code snippet defines the waitForLineOutput() method for the Process class. It takes a RegExp parameter for matching output and an optional timeout parameter. The method returns a Promise that resolves to a string.

LANGUAGE: typescript
CODE:
class Process {
  waitForLineOutput(regex: RegExp, timeout?: number): Promise<string>;
}

----------------------------------------

TITLE: Disabling HTTP First Mode in Chrome
DESCRIPTION: Shows how to disable the HttpsFirstBalancedModeAutoEnable feature in Chrome when launching Puppeteer

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({
  args: ['--disable-features=HttpsFirstBalancedModeAutoEnable'],
});

----------------------------------------

TITLE: Defining Browser.createBrowserContext Method in TypeScript
DESCRIPTION: TypeScript class definition showing the signature of the createBrowserContext method that creates new browser contexts with optional BrowserContextOptions.

LANGUAGE: typescript
CODE:
class Browser {
  abstract createBrowserContext(
    options?: BrowserContextOptions,
  ): Promise<BrowserContext>;
}

----------------------------------------

TITLE: Declaring BrowserPlatform Enum in TypeScript
DESCRIPTION: Enum definition that specifies platform identifiers for browser downloads. Includes values for Linux (x86 and ARM), macOS (x86 and ARM), and Windows (32-bit and 64-bit) platforms.

LANGUAGE: typescript
CODE:
export declare enum BrowserPlatform

----------------------------------------

TITLE: Defining WebWorker.evaluate() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature of the evaluate() method in the WebWorker class. It demonstrates the method's generic type parameters and return type.

LANGUAGE: typescript
CODE:
class WebWorker {
  evaluate<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(func: Func | string, ...args: Params): Promise<Awaited<ReturnType<Func>>>;
}

----------------------------------------

TITLE: Defining ChromeReleaseChannel Enum in TypeScript
DESCRIPTION: Typescript enumeration that defines the available Chrome release channels: BETA, CANARY, DEV, and STABLE. Each enum member corresponds to a string value representing the channel name.

LANGUAGE: typescript
CODE:
export declare enum ChromeReleaseChannel

----------------------------------------

TITLE: Defining Connection.url() Method in Typescript for Puppeteer
DESCRIPTION: This code snippet defines the url() method for the Connection class in Puppeteer. The method returns a string representing the URL of the connection.

LANGUAGE: typescript
CODE:
class Connection {
  url(): string;
}

----------------------------------------

TITLE: Using ElementHandle.toElement Method Example
DESCRIPTION: Demonstrates how to convert a generic ElementHandle to a typed ElementHandle for an anchor element. Shows the practical usage of type conversion while maintaining the same underlying handle.

LANGUAGE: typescript
CODE:
const element: ElementHandle<Element> = await page.$('.class-name-of-anchor');
// DO NOT DISPOSE `element`, this will be always be the same handle.
const anchor: ElementHandle<HTMLAnchorElement> = await element.toElement('a');

----------------------------------------

TITLE: Listing Chrome for Testing Required System Packages for openSUSE/Fedora
DESCRIPTION: This snippet provides a link to the JSON file containing required system packages for Chrome for Testing on openSUSE/Fedora Linux systems.

LANGUAGE: markdown
CODE:
https://source.chromium.org/chromium/chromium/src/+/main:chrome/installer/linux/rpm/dist_package_provides.json

----------------------------------------

TITLE: Obsolete Drop Implementation with DragData
DESCRIPTION: Deprecated method signature for handling drops with optional drag data. This version is no longer supported and should not be used in new code.

LANGUAGE: typescript
CODE:
class ElementHandle {
  drop(
    this: ElementHandle<Element>,
    data?: Protocol.Input.DragData,
  ): Promise<void>;
}

----------------------------------------

TITLE: Version 2.8.0 Release Notes
DESCRIPTION: This release adds support for Firefox ARM64 downloads.

LANGUAGE: Markdown
CODE:
## [2.8.0](https://github.com/puppeteer/puppeteer/compare/browsers-v2.7.1...browsers-v2.8.0) (2025-03-05)

### Features

* add firefox arm64 downloads ([#13646](https://github.com/puppeteer/puppeteer/issues/13646)) ([92ca975](https://github.com/puppeteer/puppeteer/commit/92ca975ffc90968c6759be0481459ecc56f4606c))

----------------------------------------

TITLE: Defining KeyInput Type for Puppeteer in TypeScript
DESCRIPTION: This TypeScript code defines the KeyInput type, which is a union of string literals representing all valid keys that can be passed to Puppeteer's user input functions, such as keyboard.press. It includes numeric keys, function keys, special characters, and various control keys.

LANGUAGE: typescript
CODE:
export type KeyInput =
  | '0'
  | '1'
  | '2'
  | '3'
  | '4'
  | '5'
  | '6'
  | '7'
  | '8'
  | '9'
  | 'Power'
  | 'Eject'
  | 'Abort'
  | 'Help'
  | 'Backspace'
  | 'Tab'
  | 'Numpad5'
  | 'NumpadEnter'
  | 'Enter'
  | '\r'
  | '\n'
  | 'ShiftLeft'
  | 'ShiftRight'
  | 'ControlLeft'
  | 'ControlRight'
  | 'AltLeft'
  | 'AltRight'
  | 'Pause'
  | 'CapsLock'
  | 'Escape'
  | 'Convert'
  | 'NonConvert'
  | 'Space'
  | 'Numpad9'
  | 'PageUp'
  | 'Numpad3'
  | 'PageDown'
  | 'End'
  | 'Numpad1'
  | 'Home'
  | 'Numpad7'
  | 'ArrowLeft'
  | 'Numpad4'
  | 'Numpad8'
  | 'ArrowUp'
  | 'ArrowRight'
  | 'Numpad6'
  | 'Numpad2'
  | 'ArrowDown'
  | 'Select'
  | 'Open'
  | 'PrintScreen'
  | 'Insert'
  | 'Numpad0'
  | 'Delete'
  | 'NumpadDecimal'
  | 'Digit0'
  | 'Digit1'
  | 'Digit2'
  | 'Digit3'
  | 'Digit4'
  | 'Digit5'
  | 'Digit6'
  | 'Digit7'
  | 'Digit8'
  | 'Digit9'
  | 'KeyA'
  | 'KeyB'
  | 'KeyC'
  | 'KeyD'
  | 'KeyE'
  | 'KeyF'
  | 'KeyG'
  | 'KeyH'
  | 'KeyI'
  | 'KeyJ'
  | 'KeyK'
  | 'KeyL'
  | 'KeyM'
  | 'KeyN'
  | 'KeyO'
  | 'KeyP'
  | 'KeyQ'
  | 'KeyR'
  | 'KeyS'
  | 'KeyT'
  | 'KeyU'
  | 'KeyV'
  | 'KeyW'
  | 'KeyX'
  | 'KeyY'
  | 'KeyZ'
  | 'MetaLeft'
  | 'MetaRight'
  | 'ContextMenu'
  | 'NumpadMultiply'
  | 'NumpadAdd'
  | 'NumpadSubtract'
  | 'NumpadDivide'
  | 'F1'
  | 'F2'
  | 'F3'
  | 'F4'
  | 'F5'
  | 'F6'
  | 'F7'
  | 'F8'
  | 'F9'
  | 'F10'
  | 'F11'
  | 'F12'
  | 'F13'
  | 'F14'
  | 'F15'
  | 'F16'
  | 'F17'
  | 'F18'
  | 'F19'
  | 'F20'
  | 'F21'
  | 'F22'
  | 'F23'
  | 'F24'
  | 'NumLock'
  | 'ScrollLock'
  | 'AudioVolumeMute'
  | 'AudioVolumeDown'
  | 'AudioVolumeUp'
  | 'MediaTrackNext'
  | 'MediaTrackPrevious'
  | 'MediaStop'
  | 'MediaPlayPause'
  | 'Semicolon'
  | 'Equal'
  | 'NumpadEqual'
  | 'Comma'
  | 'Minus'
  | 'Period'
  | 'Slash'
  | 'Backquote'
  | 'BracketLeft'
  | 'Backslash'
  | 'BracketRight'
  | 'Quote'
  | 'AltGraph'
  | 'Props'
  | 'Cancel'
  | 'Clear'
  | 'Shift'
  | 'Control'
  | 'Alt'
  | 'Accept'
  | 'ModeChange'
  | ' '
  | 'Print'
  | 'Execute'
  | '\u0000'
  | 'a'
  | 'b'
  | 'c'
  | 'd'
  | 'e'
  | 'f'
  | 'g'
  | 'h'
  | 'i'
  | 'j'
  | 'k'
  | 'l'
  | 'm'
  | 'n'
  | 'o'
  | 'p'
  | 'q'
  | 'r'
  | 's'
  | 't'
  | 'u'
  | 'v'
  | 'w'
  | 'x'
  | 'y'
  | 'z'
  | 'Meta'
  | '*'
  | '+'
  | '-'
  | '/'
  | ';'
  | '='
  | ','
  | '.'
  | '`'
  | '['
  | '\\'
  | ']'
  | "'"
  | 'Attn'
  | 'CrSel'
  | 'ExSel'
  | 'EraseEof'
  | 'Play'
  | 'ZoomOut'
  | ')'
  | '!'
  | '@'
  | '#'
  | '$'
  | '%'
  | '^'
  | '&'
  | '('
  | 'A'
  | 'B'
  | 'C'
  | 'D'
  | 'E'
  | 'F'
  | 'G'
  | 'H'
  | 'I'
  | 'J'
  | 'K'
  | 'L'
  | 'M'
  | 'N'
  | 'O'
  | 'P'
  | 'Q'
  | 'R'
  | 'S'
  | 'T'
  | 'U'
  | 'V'
  | 'W'
  | 'X'
  | 'Y'
  | 'Z'
  | ':'
  | '<'
  | '_'
  | '>'
  | '?'
  | '~'
  | '{'
  | '|'
  | '}'
  | '"'
  | 'SoftLeft'
  | 'SoftRight'
  | 'Camera'
  | 'Call'
  | 'EndCall'
  | 'VolumeDown'
  | 'VolumeUp';

----------------------------------------

TITLE: Building Puppeteer for Examples
DESCRIPTION: Command to build a version of Puppeteer that will be used with the example scripts

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Installing Puppeteer Dependencies
DESCRIPTION: Command to install all required package dependencies for Puppeteer examples

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Using Browser.createBrowserContext in Puppeteer
DESCRIPTION: Example demonstrating how to create a new browser context, create a page within that context, and navigate to a URL. Shows the complete workflow from browser launch to page navigation.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

const browser = await puppeteer.launch();
// Create a new browser context.
const context = await browser.createBrowserContext();
// Create a new page in a pristine context.
const page = await context.newPage();
// Do stuff
await page.goto('https://example.com');

----------------------------------------

TITLE: Defining EventsWithWildcard Generic Type in TypeScript
DESCRIPTION: A TypeScript type definition that extends a Record of events to include a wildcard ('*') event handler. The wildcard handler can receive any event type defined in the original Events record.

LANGUAGE: typescript
CODE:
export type EventsWithWildcard<Events extends Record<EventType, unknown>> =
  Events & {
    '*': Events[keyof Events];
  };

----------------------------------------

TITLE: Defining executablePath Function Signature in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the TypeScript signature for the executablePath function in Puppeteer. The function can be called with three different parameter configurations: a ChromeReleaseChannel, LaunchOptions, or no parameters. In all cases, it returns a string representing the executable path.

LANGUAGE: typescript
CODE:
executablePath: {
    (channel: PuppeteerCore.ChromeReleaseChannel): string;
    (options: PuppeteerCore.LaunchOptions): string;
    (): string;
}

----------------------------------------

TITLE: Defining PuppeteerNode Default Arguments Method in TypeScript
DESCRIPTION: Method signature for defaultArgs() that returns an array of default browser launch arguments. Takes optional LaunchOptions parameter to configure browser settings.

LANGUAGE: typescript
CODE:
class PuppeteerNode {
  defaultArgs(options?: LaunchOptions): string[];
}

----------------------------------------

TITLE: Defining executablePath Function Signature in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the TypeScript signature for the executablePath function in Puppeteer. The function can be called with three different parameter configurations: a ChromeReleaseChannel, LaunchOptions, or no parameters. In all cases, it returns a string representing the executable path.

LANGUAGE: typescript
CODE:
executablePath: {
    (channel: PuppeteerCore.ChromeReleaseChannel): string;
    (options: PuppeteerCore.LaunchOptions): string;
    (): string;
}

----------------------------------------

TITLE: Launching Chrome with GPU Acceleration in Headless Mode
DESCRIPTION: Example of launching Chrome with GPU acceleration enabled in headless mode using Puppeteer.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({
  headless: 'shell',
  args: ['--enable-gpu'],
});

----------------------------------------

TITLE: Defining removeScriptToEvaluateOnNewDocument Method in Puppeteer's Page Class
DESCRIPTION: This code snippet defines the removeScriptToEvaluateOnNewDocument method in the Page class. It takes a string identifier as a parameter and returns a Promise that resolves to void. The method is used to remove a script that was previously injected into the page using Page.evaluateOnNewDocument.

LANGUAGE: typescript
CODE:
class Page {
  abstract removeScriptToEvaluateOnNewDocument(
    identifier: string,
  ): Promise<void>;
}

----------------------------------------

TITLE: Version 2.7.1 Release Notes
DESCRIPTION: This release fixes an issue with closing the readline interface.

LANGUAGE: Markdown
CODE:
## [2.7.1](https://github.com/puppeteer/puppeteer/compare/browsers-v2.7.0...browsers-v2.7.1) (2025-02-05)

### Bug Fixes

* close the readline interface ([#13558](https://github.com/puppeteer/puppeteer/issues/13558)) ([7073519](https://github.com/puppeteer/puppeteer/commit/70735190449247774d273e11968d2b07f6c5accd))

----------------------------------------

TITLE: Defining Keyboard.sendCharacter Method in TypeScript
DESCRIPTION: Abstract class definition for the Keyboard class showing the sendCharacter method signature. The method takes a character string and returns a Promise.

LANGUAGE: typescript
CODE:
class Keyboard {
  abstract sendCharacter(char: string): Promise<void>;
}

----------------------------------------

TITLE: UninstallOptions Interface Definition in TypeScript
DESCRIPTION: Interface definition specifying the configuration options available when uninstalling a browser instance in Puppeteer. The interface includes properties for browser selection, build identification, cache directory management, and platform specification.

LANGUAGE: typescript
CODE:
export interface UninstallOptions

----------------------------------------

TITLE: Running Puppeteer Tests in Bash
DESCRIPTION: Command to run all Puppeteer tests.

LANGUAGE: bash
CODE:
npm test

----------------------------------------

TITLE: Creating New Page in BrowserContext - TypeScript
DESCRIPTION: Abstract method definition for creating a new Page instance within a BrowserContext. Returns a Promise that resolves to a Page object.

LANGUAGE: typescript
CODE:
class BrowserContext {
  abstract newPage(): Promise<Page>;
}

----------------------------------------

TITLE: JSHandle Generic Property Access Implementation
DESCRIPTION: TypeScript implementation of getProperty method with generic type parameters for strongly-typed property access. Returns a Promise resolving to a HandleFor wrapper of the property value.

LANGUAGE: typescript
CODE:
class JSHandle {
  getProperty<K extends keyof T>(
    propertyName: HandleOr<K>,
  ): Promise<HandleFor<T[K]>>;
}

----------------------------------------

TITLE: Defining CDPSessionEvents Interface in TypeScript
DESCRIPTION: This snippet defines the CDPSessionEvents interface, which extends CDPEvents and includes a Record type for additional event types. It also specifies two properties: sessionattached and sessiondetached, both of type CDPSession.

LANGUAGE: typescript
CODE:
export interface CDPSessionEvents extends CDPEvents, Record<EventType, unknown> {
  sessionattached: CDPSession;
  sessiondetached: CDPSession;
}

----------------------------------------

TITLE: Retrieving Frame URL in Puppeteer TypeScript
DESCRIPTION: Abstract method definition for retrieving a frame's URL in Puppeteer. The method takes no parameters and returns the frame's current URL as a string.

LANGUAGE: typescript
CODE:
class Frame {
  abstract url(): string;
}

----------------------------------------

TITLE: Defining Puppeteer.registerCustomQueryHandler Method Signature in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the registerCustomQueryHandler method in the Puppeteer class. It takes a name string and a CustomQueryHandler object as parameters and returns void.

LANGUAGE: typescript
CODE:
class Puppeteer {
  static registerCustomQueryHandler(
    name: string,
    queryHandler: CustomQueryHandler,
  ): void;
}

----------------------------------------

TITLE: Defining Page.addScriptTag Method Signature in TypeScript
DESCRIPTION: Defines the signature of the addScriptTag method in the Page class. It takes FrameAddScriptTagOptions as a parameter and returns a Promise resolving to an ElementHandle of HTMLScriptElement.

LANGUAGE: typescript
CODE:
class Page {
  addScriptTag(
    options: FrameAddScriptTagOptions,
  ): Promise<ElementHandle<HTMLScriptElement>>;
}

----------------------------------------

TITLE: Defining PuppeteerLifeCycleEvent Type in TypeScript
DESCRIPTION: TypeScript type definition that enumerates the possible lifecycle events in Puppeteer. Includes 'load' for window load event, 'domcontentloaded' for DOM completion, 'networkidle0' for complete network quiet, and 'networkidle2' for near-complete network quiet with threshold of 2 connections.

LANGUAGE: typescript
CODE:
export type PuppeteerLifeCycleEvent =
  /**
   * Waits for the 'load' event.
   */
  | 'load'
  /**
   * Waits for the 'DOMContentLoaded' event.
   */
  | 'domcontentloaded'
  /**
   * Waits till there are no more than 0 network connections for at least `500`
   * ms.
   */
  | 'networkidle0'
  /**
   * Waits till there are no more than 2 network connections for at least `500`
   * ms.
   */
  | 'networkidle2';

----------------------------------------

TITLE: Retrieving Frame URL in Puppeteer TypeScript
DESCRIPTION: Abstract method definition for retrieving a frame's URL in Puppeteer. The method takes no parameters and returns the frame's current URL as a string.

LANGUAGE: typescript
CODE:
class Frame {
  abstract url(): string;
}

----------------------------------------

TITLE: Defining CDPSessionEvents Interface in TypeScript
DESCRIPTION: This snippet defines the CDPSessionEvents interface, which extends CDPEvents and includes a Record type for additional event types. It also specifies two properties: sessionattached and sessiondetached, both of type CDPSession.

LANGUAGE: typescript
CODE:
export interface CDPSessionEvents extends CDPEvents, Record<EventType, unknown> {
  sessionattached: CDPSession;
  sessiondetached: CDPSession;
}

----------------------------------------

TITLE: Defining CDPSessionEvents Interface in TypeScript
DESCRIPTION: This snippet defines the CDPSessionEvents interface, which extends CDPEvents and includes a Record type for additional event types. It also specifies two properties: sessionattached and sessiondetached, both of type CDPSession.

LANGUAGE: typescript
CODE:
export interface CDPSessionEvents extends CDPEvents, Record<EventType, unknown> {
  sessionattached: CDPSession;
  sessiondetached: CDPSession;
}

----------------------------------------

TITLE: Version 2.9.0 Release Notes
DESCRIPTION: This release adds support for the dumpio option and extra arguments when launching browsers.

LANGUAGE: Markdown
CODE:
## [2.9.0](https://github.com/puppeteer/puppeteer/compare/browsers-v2.8.0...browsers-v2.9.0) (2025-03-31)

### Features

* support dumpio option on launch ([#13656](https://github.com/puppeteer/puppeteer/issues/13656)) ([332af85](https://github.com/puppeteer/puppeteer/commit/332af850bc42fd4df1b4e8ae210f502fb8098f71))
* support extra args to launch ([#13658](https://github.com/puppeteer/puppeteer/issues/13658)) ([844f013](https://github.com/puppeteer/puppeteer/commit/844f0134d231ed013e8b3f537d9336e6cd0a8e4b))

----------------------------------------

TITLE: Defining ContinueRequestOverrides Interface in TypeScript
DESCRIPTION: TypeScript interface that defines optional properties for overriding HTTP request parameters in Puppeteer. Includes headers, method, postData, and URL modifications for request interception.

LANGUAGE: typescript
CODE:
export interface ContinueRequestOverrides

----------------------------------------

TITLE: Defining Page.addScriptTag Method Signature in TypeScript
DESCRIPTION: Defines the signature of the addScriptTag method in the Page class. It takes FrameAddScriptTagOptions as a parameter and returns a Promise resolving to an ElementHandle of HTMLScriptElement.

LANGUAGE: typescript
CODE:
class Page {
  addScriptTag(
    options: FrameAddScriptTagOptions,
  ): Promise<ElementHandle<HTMLScriptElement>>;
}

----------------------------------------

TITLE: Configuring Sandbox Permissions on Windows
DESCRIPTION: PowerShell command to set permissions for Chrome sandbox on Windows.

LANGUAGE: powershell
CODE:
icacls "%USERPROFILE%/.cache/puppeteer/chrome" /grant *S-1-15-2-1:(OI)(CI)(RX)

----------------------------------------

TITLE: Defining HTTPResponse.remoteAddress() Method in TypeScript
DESCRIPTION: This code snippet defines the remoteAddress() method in the HTTPResponse class. The method returns a RemoteAddress object containing the IP address and port number used for the remote server connection.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  abstract remoteAddress(): RemoteAddress;
}

----------------------------------------

TITLE: Cloning Puppeteer Repository in Bash
DESCRIPTION: Commands to clone the Puppeteer repository and navigate to the project directory.

LANGUAGE: bash
CODE:
git clone https://github.com/puppeteer/puppeteer
cd puppeteer

----------------------------------------

TITLE: Basic CLI Usage with npx
DESCRIPTION: Demonstrates how to use npx to run the @puppeteer/browsers CLI and access help documentation for various commands.

LANGUAGE: bash
CODE:
# This will install and run the @puppeteer/browsers package.
# If it is already installed in the current directory, the installed
# version will be used.
npx @puppeteer/browsers --help

----------------------------------------

TITLE: Defining HandleOr Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the HandleOr type, which is a union type that can be either a HandleFor<T>, a JSHandle<T>, or the original type T. It's used in Puppeteer to flexibly handle different representations of values.

LANGUAGE: typescript
CODE:
export type HandleOr<T> = HandleFor<T> | JSHandle<T> | T;

----------------------------------------

TITLE: Defining Process.hasClosed() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the hasClosed() method for the Process class in Puppeteer. The method returns a Promise<void>, indicating it's an asynchronous operation that resolves when the process has closed.

LANGUAGE: typescript
CODE:
class Process {
  hasClosed(): Promise<void>;
}

----------------------------------------

TITLE: Cloning Puppeteer Repository in Bash
DESCRIPTION: Commands to clone the Puppeteer repository and navigate to the project directory.

LANGUAGE: bash
CODE:
git clone https://github.com/puppeteer/puppeteer
cd puppeteer

----------------------------------------

TITLE: Defining JSON Structure for Puppeteer Test Coverage
DESCRIPTION: This JSON structure defines test coverage data, including a URL, text ranges, and the actual JavaScript code being analyzed. It's likely used by Puppeteer to track which parts of the code are executed during tests.

LANGUAGE: JSON
CODE:
[
  {
    "url": "http://localhost:<PORT>/jscoverage/involved.html",
    "ranges": [
      {
        "start": 0,
        "end": 35
      },
      {
        "start": 50,
        "end": 100
      },
      {
        "start": 107,
        "end": 141
      },
      {
        "start": 148,
        "end": 168
      },
      {
        "start": 203,
        "end": 204
      },
      {
        "start": 238,
        "end": 251
      },
      {
        "start": 259,
        "end": 298
      }
    ],
    "text": "\nfunction foo() {\n  if (1 > 2)\n    console.log(1);\n  if (1 < 2)\n    console.log(2);\n  let x = 1 > 2 ? 'foo' : 'bar';\n  let y = 1 < 2 ? 'foo' : 'bar';\n  let p = {a:1 > 2?function(){console.log('unused');}:function(){console.log('unused');}};\n  let z = () => {};\n  let q = () => {};\n  q();\n}\n\nfoo();\n"
  }
]

----------------------------------------

TITLE: Creating Pages with BrowserContext.newPage in TypeScript
DESCRIPTION: Abstract method signature for creating a new Page instance within a BrowserContext. Returns a Promise that resolves to a Page object, allowing for asynchronous page creation.

LANGUAGE: typescript
CODE:
class BrowserContext {
  abstract newPage(): Promise<Page>;
}

----------------------------------------

TITLE: Defining ScreenRecorder.stop Method in TypeScript
DESCRIPTION: This code snippet defines the stop() method for the ScreenRecorder class. The method is asynchronous and returns a Promise that resolves to void, indicating the completion of stopping the recorder.

LANGUAGE: typescript
CODE:
class ScreenRecorder {
  stop(): Promise<void>;
}

----------------------------------------

TITLE: Defining Touchscreen Abstract Class in TypeScript
DESCRIPTION: Abstract class declaration for the Touchscreen class that manages touch events. The class is marked as internal and should not be instantiated directly or extended by third-party code.

LANGUAGE: typescript
CODE:
export declare abstract class Touchscreen

----------------------------------------

TITLE: Launching Puppeteer with No Sandbox on Heroku
DESCRIPTION: Example of launching Puppeteer with no sandbox mode on Heroku.

LANGUAGE: typescript
CODE:
puppeteer.launch({ args: ['--no-sandbox'] });

----------------------------------------

TITLE: Defining SerializedAXNode.elementHandle() Method in TypeScript
DESCRIPTION: This code snippet defines the elementHandle() method for the SerializedAXNode interface. The method returns a Promise that resolves to an ElementHandle or null. It is used to get an ElementHandle for the AXNode if available, with a note that it might return an error if the underlying DOM element has been disposed.

LANGUAGE: typescript
CODE:
interface SerializedAXNode {
  elementHandle(): Promise<ElementHandle | null>;
}

----------------------------------------

TITLE: Browser Management Commands
DESCRIPTION: Commands for managing installed browsers, including clearing all installations and listing installed browsers.

LANGUAGE: bash
CODE:
npx @puppeteer/browsers clear
npx @puppeteer/browsers list

----------------------------------------

TITLE: Retrieving Child Frames Method in Puppeteer TypeScript
DESCRIPTION: Definition of the childFrames() method in the Frame class that returns an array of child Frame objects. This method allows access to nested frames within a parent frame in the browser context.

LANGUAGE: typescript
CODE:
class Frame {
  abstract childFrames(): Frame[];
}

----------------------------------------

TITLE: Defining Process.hasClosed() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the hasClosed() method for the Process class in Puppeteer. The method returns a Promise that resolves to void, indicating when the process has closed.

LANGUAGE: typescript
CODE:
class Process {
  hasClosed(): Promise<void>;
}

----------------------------------------

TITLE: Defining FirefoxSettings Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for Firefox browser configuration in Puppeteer. Contains optional properties for customizing browser download location, version selection, and installation behavior.

LANGUAGE: typescript
CODE:
export interface FirefoxSettings

----------------------------------------

TITLE: Defining Locator.map() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Locator.map() method. It takes a mapper function as a parameter and returns a new Locator with the mapped type.

LANGUAGE: typescript
CODE:
class Locator {
  map<To>(mapper: Mapper<T, To>): Locator<To>;
}

----------------------------------------

TITLE: Defining Browser.process() Method in TypeScript
DESCRIPTION: This code snippet defines the abstract process() method in the Browser class. It returns either a ChildProcess object or null, with null being returned when the instance was connected via Puppeteer.connect().

LANGUAGE: typescript
CODE:
class Browser {
  abstract process(): ChildProcess | null;
}

----------------------------------------

TITLE: Defining Accessibility Class Signature in TypeScript
DESCRIPTION: TypeScript class declaration for the Accessibility class in Puppeteer. This class provides functionality for accessing and manipulating the browser's accessibility tree used by assistive technologies.

LANGUAGE: typescript
CODE:
export declare class Accessibility

----------------------------------------

TITLE: Defining CookieSourceScheme Type in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the CookieSourceScheme type as a union of three string literals: 'Unset', 'NonSecure', and 'Secure'. The 'Unset' value allows protocol clients to emulate legacy cookie scope for the scheme, which is a temporary feature.

LANGUAGE: typescript
CODE:
export type CookieSourceScheme = 'Unset' | 'NonSecure' | 'Secure';

----------------------------------------

TITLE: Defining Accessibility Snapshot Method in TypeScript
DESCRIPTION: Class definition showing the signature of the accessibility snapshot method that captures the current state of the accessibility tree.

LANGUAGE: typescript
CODE:
class Accessibility {
  snapshot(options?: SnapshotOptions): Promise<SerializedAXNode | null>;
}

----------------------------------------

TITLE: Defining GoToOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for GoToOptions that extends WaitForOptions. Includes optional properties for referer and referrerPolicy which override HTTP headers set via page.setExtraHTTPHeaders().

LANGUAGE: typescript
CODE:
export interface GoToOptions extends WaitForOptions

----------------------------------------

TITLE: Implementing Page Screenshot with Base64 Encoding in TypeScript
DESCRIPTION: Screenshot method implementation that captures a page screenshot and returns it as a base64 encoded string. Takes ScreenshotOptions with required base64 encoding parameter.

LANGUAGE: typescript
CODE:
class Page {
  screenshot(
    options: Readonly<ScreenshotOptions> & {
      encoding: 'base64';
    },
  ): Promise<string>;
}

----------------------------------------

TITLE: Running Mocha Runner Tests
DESCRIPTION: Commands to run tests for Mocha Runner itself and to run tests using Mocha Runner. It also shows how to specify a particular test suite.

LANGUAGE: bash
CODE:
npm test

LANGUAGE: bash
CODE:
npm run build && npm run test

LANGUAGE: bash
CODE:
npm run build && npm run test -- --test-suite chrome-headless

----------------------------------------

TITLE: Implementing Locator.filter Method in TypeScript
DESCRIPTION: Defines the filter() method signature for the Locator class. The method creates an expectation that is evaluated against located values and retries if expectations don't match. It accepts a predicate function and returns a new Locator instance.

LANGUAGE: typescript
CODE:
class Locator {
  filter<S extends T>(predicate: Predicate<T, S>): Locator<S>;
}

----------------------------------------

TITLE: Defining ElementFor Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the ElementFor type, which is a conditional type that maps HTML and SVG element tag names to their corresponding element types. It uses TypeScript's mapped types and conditional types to achieve this mapping.

LANGUAGE: typescript
CODE:
export type ElementFor<
  TagName extends keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap,
> = TagName extends keyof HTMLElementTagNameMap
  ? HTMLElementTagNameMap[TagName]
  : TagName extends keyof SVGElementTagNameMap
    ? SVGElementTagNameMap[TagName]
    : never;

----------------------------------------

TITLE: Defining CSSCoverage.start() Method Signature in TypeScript
DESCRIPTION: This snippet defines the signature of the start() method in the CSSCoverage class. The method takes an optional options object with a resetOnNavigation property and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class CSSCoverage {
  start(options?: {resetOnNavigation?: boolean}): Promise<void>;
}

----------------------------------------

TITLE: Defining LocatorScrollOptions Interface in TypeScript
DESCRIPTION: This code snippet defines the LocatorScrollOptions interface, which extends ActionOptions. It includes optional properties for scrollLeft and scrollTop values.

LANGUAGE: typescript
CODE:
export interface LocatorScrollOptions extends ActionOptions
{
  scrollLeft?: number;
  scrollTop?: number;
}

----------------------------------------

TITLE: Implementing JSHandle.remoteObject Method in TypeScript
DESCRIPTION: Abstract method definition in the JSHandle class that returns a Protocol.Runtime.RemoteObject. This method provides access to the underlying Chrome DevTools Protocol remote object that backs the JSHandle instance.

LANGUAGE: typescript
CODE:
class JSHandle {
  abstract remoteObject(): Protocol.Runtime.RemoteObject;
}

----------------------------------------

TITLE: Running Flaky Tests with Environment Variables
DESCRIPTION: Commands demonstrating how to use environment variables to debug flaky tests. It shows how to specify tests using patterns and control the number of test reruns.

LANGUAGE: bash
CODE:
PUPPETEER_DEFLAKE_TESTS="[navigation.spec] navigation Page.goto should navigate to empty page with networkidle0" npm run test:chrome:headless

LANGUAGE: bash
CODE:
PUPPETEER_DEFLAKE_TESTS="[navigation.spec] *" npm run test:chrome:headless

LANGUAGE: bash
CODE:
PUPPETEER_DEFLAKE_RETRIES=1000 PUPPETEER_DEFLAKE_TESTS="[navigation.spec] *" npm run test:chrome:headless

----------------------------------------

TITLE: Defining FileFormat Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines a TypeScript type alias named FileFormat. It specifies three string literal types representing different video file formats: 'gif', 'webm', and 'mp4'. This type is likely used in Puppeteer for constraining and validating file format options in video-related operations.

LANGUAGE: typescript
CODE:
export type FileFormat = 'gif' | 'webm' | 'mp4';

----------------------------------------

TITLE: Defining ElementHandle.backendNodeId() Method in TypeScript
DESCRIPTION: This code snippet defines the backendNodeId() method in the ElementHandle class. The method returns a Promise that resolves to a number representing the DOM.BackendNodeId for the element when connected using Chrome DevTools Protocol.

LANGUAGE: typescript
CODE:
class ElementHandle {
  abstract backendNodeId(): Promise<number>;
}

----------------------------------------

TITLE: Initializing CSSCoverage Class in Puppeteer (TypeScript)
DESCRIPTION: This code snippet shows the constructor signature for the CSSCoverage class in Puppeteer. It takes a CDPSession object as a parameter, which is likely used for communication with the Chrome DevTools Protocol.

LANGUAGE: typescript
CODE:
class CSSCoverage {
  constructor(client: CDPSession);
}

----------------------------------------

TITLE: Defining EvaluateFunc Type in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the EvaluateFunc type, which is a generic function type that takes a variable number of parameters and returns an Awaitable<unknown>. It uses the InnerParams type to define the parameter types and Awaitable for the return type.

LANGUAGE: typescript
CODE:
export type EvaluateFunc<T extends unknown[]> = (
  ...params: InnerParams<T>
) => Awaitable<unknown>;

----------------------------------------

TITLE: Adding MD5 Function to Page Using Puppeteer
DESCRIPTION: This example demonstrates how to add an 'md5' function to the page's window object using Page.exposeFunction(). It uses the crypto module to compute MD5 hashes.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';
import crypto from 'crypto';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  page.on('console', msg => console.log(msg.text()));
  await page.exposeFunction('md5', text =>
    crypto.createHash('md5').update(text).digest('hex'),
  );
  await page.evaluate(async () => {
    // use window.md5 to compute hashes
    const myString = 'PUPPETEER';
    const myHash = await window.md5(myString);
    console.log(`md5 of ${myString} is ${myHash}`);
  });
  await browser.close();
})();

----------------------------------------

TITLE: Defining CDPEvents Type Mapping in TypeScript
DESCRIPTION: Creates a mapped type that extracts the first parameter type from each CDP event in the ProtocolMapping.Events interface. This type is used to strongly type CDP event handlers in Puppeteer.

LANGUAGE: typescript
CODE:
export type CDPEvents = {
  [Property in keyof ProtocolMapping.Events]: ProtocolMapping.Events[Property][0];
};

----------------------------------------

TITLE: Defining clearPermissionOverrides Method in TypeScript for Puppeteer's BrowserContext
DESCRIPTION: This snippet shows the TypeScript signature for the clearPermissionOverrides() method in the BrowserContext class. The method is abstract and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class BrowserContext {
  abstract clearPermissionOverrides(): Promise<void>;
}

----------------------------------------

TITLE: Obsolete Frame.name() Method Definition in Puppeteer
DESCRIPTION: The deprecated Frame.name() method signature that returns the frame's name attribute as a string. This value is only calculated once when the frame is created and doesn't update if the attribute changes.

LANGUAGE: typescript
CODE:
class Frame {
  name(): string;
}

----------------------------------------

TITLE: Finding Focused Node in Accessibility Tree
DESCRIPTION: Example showing how to find and log the name of the currently focused node in the accessibility tree using recursive traversal.

LANGUAGE: typescript
CODE:
const snapshot = await page.accessibility.snapshot();
const node = findFocusedNode(snapshot);
console.log(node && node.name);

function findFocusedNode(node) {
  if (node.focused) return node;
  for (const child of node.children || []) {
    const foundNode = findFocusedNode(child);
    return foundNode;
  }
  return null;
}

----------------------------------------

TITLE: Defining CommonEventEmitter.emit() Method Signature in TypeScript
DESCRIPTION: This code snippet defines the signature of the emit() method for the CommonEventEmitter interface. It uses generic types to ensure type safety when emitting events. The method takes a type parameter and an event object, returning a boolean value.

LANGUAGE: typescript
CODE:
interface CommonEventEmitter {
  emit<Key extends keyof Events>(type: Key, event: Events[Key]): boolean;
}

----------------------------------------

TITLE: Implementing Mouse Down Method in Puppeteer TypeScript
DESCRIPTION: Abstract method definition for pressing the mouse in Puppeteer. Takes optional MouseOptions parameter and returns a Promise that resolves to void. Used to simulate mouse press events in browser automation.

LANGUAGE: typescript
CODE:
class Mouse {
  abstract down(options?: Readonly<MouseOptions>): Promise<void>;
}

----------------------------------------

TITLE: Defining ActionOptions Interface in TypeScript
DESCRIPTION: Interface definition for ActionOptions that specifies configuration parameters for Puppeteer locator actions. Currently includes an optional AbortSignal property to enable action cancellation.

LANGUAGE: typescript
CODE:
export interface ActionOptions

----------------------------------------

TITLE: Defining CookieSameSite Type in TypeScript
DESCRIPTION: TypeScript type definition that specifies the allowed values for a cookie's SameSite attribute. The type allows three possible string literals: 'Strict', 'Lax', or 'None', following the cookie specification standard.

LANGUAGE: typescript
CODE:
export type CookieSameSite = 'Strict' | 'Lax' | 'None';

----------------------------------------

TITLE: Declaring ExtensionTransport Class in TypeScript
DESCRIPTION: This snippet defines the ExtensionTransport class, which implements the ConnectionTransport interface. It's used for establishing connections via chrome.debugger API when Puppeteer runs in an extension.

LANGUAGE: typescript
CODE:
export declare class ExtensionTransport implements ConnectionTransport

----------------------------------------

TITLE: Defining HTTPRequest Response Method in TypeScript
DESCRIPTION: Abstract method definition for retrieving the HTTPResponse object associated with an HTTP request. Returns either an HTTPResponse object or null if the response hasn't been received.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract response(): HTTPResponse | null;
}

----------------------------------------

TITLE: Defining SessionAttached Event Type in TypeScript
DESCRIPTION: Defines the string literal type for the CDP session attached event. This constant is used to strongly type event handling when a CDP session becomes attached.

LANGUAGE: typescript
CODE:
SessionAttached: 'sessionattached';

----------------------------------------

TITLE: Defining CommonEventEmitter Interface in TypeScript
DESCRIPTION: TypeScript interface definition for a generic event emitter that handles events with type safety. The interface is parameterized with an Events type that must extend Record<EventType, unknown>.

LANGUAGE: typescript
CODE:
export interface CommonEventEmitter<Events extends Record<EventType, unknown>>

----------------------------------------

TITLE: Defining CommonEventEmitter Interface in TypeScript
DESCRIPTION: TypeScript interface definition for a generic event emitter that handles events with type safety. The interface is parameterized with an Events type that must extend Record<EventType, unknown>.

LANGUAGE: typescript
CODE:
export interface CommonEventEmitter<Events extends Record<EventType, unknown>>

----------------------------------------

TITLE: Defining WebWorker Close Method in TypeScript
DESCRIPTION: TypeScript class definition showing the close() method signature for the WebWorker class. The method returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class WebWorker {
  close(): Promise<void>;
}

----------------------------------------

TITLE: Defining ActionResult Type in TypeScript for Puppeteer
DESCRIPTION: A TypeScript type definition that specifies the possible action results for request interception in Puppeteer. This type is used to ensure type safety when handling request interception responses, limiting values to 'continue', 'abort', or 'respond'.

LANGUAGE: typescript
CODE:
export type ActionResult = 'continue' | 'abort' | 'respond';

----------------------------------------

TITLE: Defining CookiePriority Type in TypeScript
DESCRIPTION: Declares a union type for cookie priority levels following the draft specification at https://tools.ietf.org/html/draft-west-cookie-priority-00. The type allows for three priority levels: Low, Medium, and High.

LANGUAGE: typescript
CODE:
export type CookiePriority = 'Low' | 'Medium' | 'High';

----------------------------------------

TITLE: Querying Installed Browsers with Puppeteer TypeScript Function
DESCRIPTION: Function signature for getInstalledBrowsers that returns metadata about browsers installed in the cache directory. Takes GetInstalledBrowsersOptions as input and returns a Promise resolving to an array of InstalledBrowser objects.

LANGUAGE: typescript
CODE:
export declare function getInstalledBrowsers(
  options: GetInstalledBrowsersOptions,
): Promise<InstalledBrowser[]>;

----------------------------------------

TITLE: Defining HTTPResponse.url Method in TypeScript
DESCRIPTION: Abstract class definition for HTTPResponse showing the url() method that returns the response URL as a string. This is a core method used to obtain the final URL of an HTTP response in Puppeteer.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  abstract url(): string;
}

----------------------------------------

TITLE: Defining ConnectionTransport.send Interface Method in TypeScript
DESCRIPTION: TypeScript interface definition for the ConnectionTransport.send method that takes a string message parameter and returns void. This method is used for sending messages through Puppeteer's connection transport layer.

LANGUAGE: typescript
CODE:
interface ConnectionTransport {
  send(message: string): void;
}

----------------------------------------

TITLE: TypeScript Example with Input Elements
DESCRIPTION: Shows how to use Page.$$eval() with input elements, demonstrating explicit typing of the elements parameter.

LANGUAGE: typescript
CODE:
await page.$$eval('input', elements => {
  return elements.map(e => e.value);
});

----------------------------------------

TITLE: Defining ChromeReleaseChannel Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines a TypeScript type called ChromeReleaseChannel. It represents the different release channels available for Chrome, including stable, beta, canary, and dev versions.

LANGUAGE: typescript
CODE:
export type ChromeReleaseChannel =
  | 'chrome'
  | 'chrome-beta'
  | 'chrome-canary'
  | 'chrome-dev';

----------------------------------------

TITLE: Defining InternalNetworkConditions Interface in TypeScript
DESCRIPTION: This snippet defines the InternalNetworkConditions interface, which extends the NetworkConditions interface. It includes a boolean property 'offline'.

LANGUAGE: typescript
CODE:
export interface InternalNetworkConditions extends NetworkConditions
{
    offline: boolean;
}

----------------------------------------

TITLE: Defining ElementHandle.backendNodeId() Method in TypeScript
DESCRIPTION: This snippet defines the backendNodeId() method for the ElementHandle class. When connected using Chrome DevTools Protocol, it returns a DOM.BackendNodeId for the element as a Promise resolving to a number.

LANGUAGE: typescript
CODE:
class ElementHandle {
  abstract backendNodeId(): Promise<number>;
}

----------------------------------------

TITLE: Defining BrowserContext.close() Method in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the close() method of the BrowserContext class. The method is asynchronous and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class BrowserContext {
  abstract close(): Promise<void>;
}

----------------------------------------

TITLE: Defining CDPSessionEvent.SessionDetached Variable in TypeScript
DESCRIPTION: This code snippet defines the SessionDetached property of the CDPSessionEvent object as a string constant 'sessiondetached'. This is used to represent the event when a CDP (Chrome DevTools Protocol) session is detached.

LANGUAGE: typescript
CODE:
SessionDetached: 'sessiondetached';

----------------------------------------

TITLE: Defining BrowserContext.overridePermissions Method in TypeScript
DESCRIPTION: Type definition for the overridePermissions method that sets permissions for a specific origin within a browser context. Takes an origin string and array of permissions as parameters.

LANGUAGE: typescript
CODE:
class BrowserContext {
  abstract overridePermissions(
    origin: string,
    permissions: Permission[],
  ): Promise<void>;
}

----------------------------------------

TITLE: Setting Browser Cookies in Puppeteer TypeScript
DESCRIPTION: Method signature for setting cookies in the default browser context. This method accepts a spread array of CookieData objects and returns a Promise that resolves to void. It acts as a shortcut to browser.defaultBrowserContext().setCookie().

LANGUAGE: typescript
CODE:
class Browser {
  setCookie(...cookies: CookieData[]): Promise<void>;
}

----------------------------------------

TITLE: Defining ConnectOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for browser connection options. Contains properties for configuring browser connections, viewport settings, security options, and protocol behaviors.

LANGUAGE: typescript
CODE:
export interface ConnectOptions

----------------------------------------

TITLE: Implementing EventEmitter.emit Method in TypeScript
DESCRIPTION: Method signature for emitting events in an EventEmitter class. Takes an event type and event data as parameters, returns a boolean indicating if any listeners were called. Supports wildcard event handling through EventsWithWildcard type.

LANGUAGE: typescript
CODE:
class EventEmitter {
  emit<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    event: EventsWithWildcard<Events>[Key],
  ): boolean;
}

----------------------------------------

TITLE: Implementing HTTPResponse.ok Method in TypeScript
DESCRIPTION: Defines the ok() method on the HTTPResponse class that returns a boolean indicating if the response status code is in the successful range (200-299).

LANGUAGE: typescript
CODE:
class HTTPResponse {
  ok(): boolean;
}

----------------------------------------

TITLE: Implementing EventEmitter.emit Method in TypeScript
DESCRIPTION: Method signature for emitting events in an EventEmitter class. Takes an event type and event data as parameters, returns a boolean indicating if any listeners were called. Supports wildcard event handling through EventsWithWildcard type.

LANGUAGE: typescript
CODE:
class EventEmitter {
  emit<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    event: EventsWithWildcard<Events>[Key],
  ): boolean;
}

----------------------------------------

TITLE: Retrieving Browser Instance for a Page in Puppeteer (TypeScript)
DESCRIPTION: This code snippet shows the signature of the Page.browser() method in Puppeteer. It is an abstract method within the Page class that returns a Browser instance.

LANGUAGE: typescript
CODE:
class Page {
  abstract browser(): Browser;
}

----------------------------------------

TITLE: Retrieving Browser Instance for a Page in Puppeteer (TypeScript)
DESCRIPTION: This code snippet shows the signature of the Page.browser() method in Puppeteer. It is an abstract method within the Page class that returns a Browser instance.

LANGUAGE: typescript
CODE:
class Page {
  abstract browser(): Browser;
}

----------------------------------------

TITLE: Implementing HTTPRequest.initiator Method in TypeScript
DESCRIPTION: Abstract method definition for retrieving the initiator of an HTTP request. Returns a Protocol.Network.Initiator object or undefined, representing the entity that initiated the network request.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract initiator(): Protocol.Network.Initiator | undefined;
}

----------------------------------------

TITLE: Defining BrowserContextEvent Enum in TypeScript
DESCRIPTION: TypeScript enum declaration for browser context events in Puppeteer. Defines three main events: TargetChanged (for URL changes), TargetCreated (for new target creation), and TargetDestroyed (for target removal).

LANGUAGE: typescript
CODE:
export declare const enum BrowserContextEvent

----------------------------------------

TITLE: Defining AwaitablePredicate Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the AwaitablePredicate type, which is a generic function type. It takes a value of type T and returns an Awaitable<boolean>. This type is likely used for creating predicate functions that can be used in asynchronous operations within Puppeteer.

LANGUAGE: typescript
CODE:
export type AwaitablePredicate<T> = (value: T) => Awaitable<boolean>;

----------------------------------------

TITLE: Defining HTTPRequest.frame() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the abstract frame() method for the HTTPRequest class in Puppeteer. The method returns either a Frame object or null, representing the frame that initiated the request or null if navigating to error pages.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract frame(): Frame | null;
}

----------------------------------------

TITLE: Defining HTTPResponse Buffer Method in TypeScript
DESCRIPTION: TypeScript class definition showing the buffer() method signature which returns a Promise resolving to a Buffer. This method retrieves the response body as a buffer, though there are potential encoding issues to be aware of due to browser re-encoding based on HTTP headers or heuristics.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  buffer(): Promise<Buffer>;
}

----------------------------------------

TITLE: Defining ActionOptions Interface in TypeScript
DESCRIPTION: This code snippet defines the ActionOptions interface, which contains an optional 'signal' property of type AbortSignal. This interface is likely used to configure actions in the Puppeteer library, allowing for abort signaling.

LANGUAGE: typescript
CODE:
export interface ActionOptions {
  signal?: AbortSignal;
}

----------------------------------------

TITLE: Logging Failed Requests with Puppeteer
DESCRIPTION: Example showing how to use the page.on('requestfailed') event handler with the failure() method to log URLs and error messages of failed requests.

LANGUAGE: typescript
CODE:
page.on('requestfailed', request => {
  console.log(request.url() + ' ' + request.failure().errorText);
});

----------------------------------------

TITLE: Defining HTTPResponse.headers() Method in TypeScript
DESCRIPTION: This code snippet defines the abstract headers() method in the HTTPResponse class. The method returns an object containing HTTP headers associated with the response, where all header names are in lower-case.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  abstract headers(): Record<string, string>;
}

----------------------------------------

TITLE: Installing Dependencies for Docusaurus Website
DESCRIPTION: Command to install all required npm dependencies for the website.

LANGUAGE: bash
CODE:
$ npm install

----------------------------------------

TITLE: Implementing CDPSession.send Method in TypeScript
DESCRIPTION: Abstract method definition for sending CDP commands in Puppeteer. The method takes a command method name, optional parameters, and command options, returning a Promise with the command's return type. It uses generic types to ensure type safety across different CDP commands.

LANGUAGE: typescript
CODE:
class CDPSession {
  abstract send<T extends keyof ProtocolMapping.Commands>(
    method: T,
    params?: ProtocolMapping.Commands[T]['paramsType'][0],
    options?: CommandOptions,
  ): Promise<ProtocolMapping.Commands[T]['returnType']>;
}

----------------------------------------

TITLE: Declaring DeviceRequestPrompt Class in TypeScript
DESCRIPTION: Class declaration for DeviceRequestPrompt which handles device request prompts in Puppeteer.

LANGUAGE: typescript
CODE:
export declare class DeviceRequestPrompt

----------------------------------------

TITLE: Defining CommonEventEmitter.emit() Method Signature in TypeScript
DESCRIPTION: This code snippet defines the TypeScript interface for the CommonEventEmitter.emit() method. It specifies the method signature with generic types for event keys and corresponding event types.

LANGUAGE: typescript
CODE:
interface CommonEventEmitter {
  emit<Key extends keyof Events>(type: Key, event: Events[Key]): boolean;
}

----------------------------------------

TITLE: Defining CookiePartitionKey Interface in TypeScript
DESCRIPTION: This snippet defines the CookiePartitionKey interface in TypeScript. It includes two properties: hasCrossSiteAncestor and sourceOrigin, which are used to represent aspects of cookie partitioning in Chrome.

LANGUAGE: typescript
CODE:
export interface CookiePartitionKey

----------------------------------------

TITLE: Test Implementation Example with .only Modifier
DESCRIPTION: Example showing how to run a specific test using Mocha's .only modifier with async/await and test state management.

LANGUAGE: typescript
CODE:
it.only('should work', async function() {
  const {server, page} = await getTestState();
  const response = await page.goto(server.EMPTY_PAGE);
  expect(response.ok).toBe(true);
});

----------------------------------------

TITLE: Defining HTTPRequest.postData() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the postData() method in the HTTPRequest class. The method returns the request's post body as a string if it exists, or undefined if there is no post body.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract postData(): string | undefined;
}

----------------------------------------

TITLE: Defining BrowserEvent Enum in TypeScript
DESCRIPTION: Declaration of the BrowserEvent enumeration that defines all possible events a Puppeteer browser instance can emit. These events include browser disconnection and target lifecycle events (creation, destruction, and URL changes).

LANGUAGE: typescript
CODE:
export declare const enum BrowserEvent

----------------------------------------

TITLE: Defining ConsoleMessageType in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the ConsoleMessageType as a union type in TypeScript. It includes all possible console message types supported by Puppeteer, such as 'log', 'debug', 'info', and more specialized types like 'startGroup' and 'profileEnd'.

LANGUAGE: typescript
CODE:
export type ConsoleMessageType =
  | 'log'
  | 'debug'
  | 'info'
  | 'error'
  | 'warn'
  | 'dir'
  | 'dirxml'
  | 'table'
  | 'trace'
  | 'clear'
  | 'startGroup'
  | 'startGroupCollapsed'
  | 'endGroup'
  | 'assert'
  | 'profile'
  | 'profileEnd'
  | 'count'
  | 'timeEnd'
  | 'verbose';

----------------------------------------

TITLE: Initializing JSCoverage Start Method in TypeScript
DESCRIPTION: TypeScript class definition showing the start() method signature for JSCoverage. The method accepts an optional configuration object with boolean flags for controlling coverage behavior including reset on navigation, anonymous script reporting, raw script coverage inclusion, and block coverage usage.

LANGUAGE: typescript
CODE:
class JSCoverage {
  start(options?: {
    resetOnNavigation?: boolean;
    reportAnonymousScripts?: boolean;
    includeRawScriptCoverage?: boolean;
    useBlockCoverage?: boolean;
  }): Promise<void>;
}

----------------------------------------

TITLE: Defining startJSCoverage Method in Coverage Class (TypeScript)
DESCRIPTION: This snippet shows the method signature for startJSCoverage in the Coverage class. It accepts an optional JSCoverageOptions parameter and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Coverage {
  startJSCoverage(options?: JSCoverageOptions): Promise<void>;
}

----------------------------------------

TITLE: Updating Base URL in E2E Test Utility
DESCRIPTION: TypeScript code to update the base URL in the E2E test utility file to match the custom port.

LANGUAGE: typescript
CODE:
const baseUrl = 'http://localhost:8080';

----------------------------------------

TITLE: Retrieving Frame Content in Puppeteer using TypeScript
DESCRIPTION: Method signature for retrieving the full HTML contents of a frame in Puppeteer. Returns a Promise that resolves to a string containing the complete HTML content including DOCTYPE declaration.

LANGUAGE: typescript
CODE:
class Frame {
  content(): Promise<string>;
}

----------------------------------------

TITLE: Defining Cookie Interface in TypeScript
DESCRIPTION: TypeScript interface definition for Cookie object that extends CookieData interface. Represents a complete cookie object with properties like domain, expires, httpOnly, name, path, secure, session, size, and various Chrome-specific properties.

LANGUAGE: typescript
CODE:
export interface Cookie extends CookieData

----------------------------------------

TITLE: Installing Puppeteer Dependencies in Bash
DESCRIPTION: Commands to install project dependencies, with an option to download Firefox by default.

LANGUAGE: bash
CODE:
npm install
# Or to download Firefox by default
PUPPETEER_BROWSER=firefox npm install

----------------------------------------

TITLE: Defining BrowserEvent Enum in TypeScript
DESCRIPTION: TypeScript enum declaration for all possible browser events in Puppeteer. This enum includes events for browser disconnection, target changes, creation, and destruction. Each event is represented as a string literal.

LANGUAGE: typescript
CODE:
export declare const enum BrowserEvent

----------------------------------------

TITLE: Defining HandleFor Conditional Type in TypeScript
DESCRIPTION: Defines a generic type HandleFor that maps Node types to ElementHandle and all other types to JSHandle. This type helps Puppeteer determine the appropriate handle type based on the input type parameter.

LANGUAGE: typescript
CODE:
export type HandleFor<T> = T extends Node ? ElementHandle<T> : JSHandle<T>;

----------------------------------------

TITLE: Defining Cookie Interface in TypeScript
DESCRIPTION: TypeScript interface definition for Cookie object that extends CookieData interface. Represents a complete cookie object with properties like domain, expires, httpOnly, name, path, secure, session, size, and various Chrome-specific properties.

LANGUAGE: typescript
CODE:
export interface Cookie extends CookieData

----------------------------------------

TITLE: Defining Page.type() Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.type() method in Puppeteer. It defines the method parameters and return type.

LANGUAGE: typescript
CODE:
class Page {
  type(
    selector: string,
    text: string,
    options?: Readonly<KeyboardTypeOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining LocatorEvents Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the LocatorEvents interface, which extends Record<EventType, unknown>. It includes a single property 'action' of type undefined.

LANGUAGE: typescript
CODE:
export interface LocatorEvents extends Record<EventType, unknown> {
  action: undefined;
}

----------------------------------------

TITLE: Defining ConsoleMessageLocation Interface in TypeScript
DESCRIPTION: Interface declaration for ConsoleMessageLocation that specifies the structure for console message location data. It includes optional properties for column number, line number, and URL of the resource where the console message originated.

LANGUAGE: typescript
CODE:
export interface ConsoleMessageLocation

----------------------------------------

TITLE: Defining HandleFor Conditional Type in TypeScript
DESCRIPTION: Defines a generic type HandleFor that maps Node types to ElementHandle and all other types to JSHandle. This type helps Puppeteer determine the appropriate handle type based on the input type parameter.

LANGUAGE: typescript
CODE:
export type HandleFor<T> = T extends Node ? ElementHandle<T> : JSHandle<T>;

----------------------------------------

TITLE: Defining LocatorEvents Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the LocatorEvents interface, which extends Record<EventType, unknown>. It includes a single property 'action' of type undefined.

LANGUAGE: typescript
CODE:
export interface LocatorEvents extends Record<EventType, unknown> {
  action: undefined;
}

----------------------------------------

TITLE: Implementing EventEmitter.once Method in TypeScript
DESCRIPTION: TypeScript implementation of the EventEmitter.once() method. This method registers a one-time event listener that automatically removes itself after the first event trigger. It accepts an event type and handler function as parameters and returns the EventEmitter instance for method chaining.

LANGUAGE: typescript
CODE:
class EventEmitter {
  once<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    handler: Handler<EventsWithWildcard<Events>[Key]>,
  ): this;
}

----------------------------------------

TITLE: Starting Local Development Server
DESCRIPTION: Command to start a local development server that opens a browser window and supports live updates.

LANGUAGE: bash
CODE:
$ npm start

----------------------------------------

TITLE: Retrieving WebWorker URL in Puppeteer using TypeScript
DESCRIPTION: This code snippet demonstrates the signature of the WebWorker.url() method in Puppeteer. The method returns the URL of the web worker as a string.

LANGUAGE: typescript
CODE:
class WebWorker {
  url(): string;
}

----------------------------------------

TITLE: Defining CDPSession Connection Method in TypeScript
DESCRIPTION: Abstract method definition that returns the underlying connection for a CDP session. The method may return either a Connection instance or undefined if no connection exists.

LANGUAGE: typescript
CODE:
class CDPSession {
  abstract connection(): Connection | undefined;
}

----------------------------------------

TITLE: Defining BrowserContext.cookies Method in TypeScript
DESCRIPTION: Abstract class method declaration for retrieving all cookies from a browser context. Returns a Promise that resolves to an array of Cookie objects.

LANGUAGE: typescript
CODE:
class BrowserContext {
  abstract cookies(): Promise<Cookie[]>;
}

----------------------------------------

TITLE: Defining BrowserContext.cookies Method in TypeScript
DESCRIPTION: Abstract class method declaration for retrieving all cookies from a browser context. Returns a Promise that resolves to an array of Cookie objects.

LANGUAGE: typescript
CODE:
class BrowserContext {
  abstract cookies(): Promise<Cookie[]>;
}

----------------------------------------

TITLE: Defining SupportedBrowser Type in TypeScript
DESCRIPTION: TypeScript type definition that enumerates the browsers supported by Puppeteer using a union type. Currently specifies 'chrome' and 'firefox' as the only valid options.

LANGUAGE: typescript
CODE:
export type SupportedBrowser = 'chrome' | 'firefox';

----------------------------------------

TITLE: Implementing FileChooser.isMultiple Method in TypeScript
DESCRIPTION: Method signature for checking if a file chooser allows multiple file selection. Returns a boolean indicating whether the file input element has the 'multiple' attribute enabled.

LANGUAGE: typescript
CODE:
class FileChooser {
  isMultiple(): boolean;
}

----------------------------------------

TITLE: Browser Installation Examples
DESCRIPTION: Various examples of installing specific browser versions and drivers using @puppeteer/browsers CLI, including Chrome for Testing and ChromeDriver installations.

LANGUAGE: sh
CODE:
# Download the latest available Chrome for Testing binary corresponding to the Stable channel.
npx @puppeteer/browsers install chrome@stable

# Download a specific Chrome for Testing version.
npx @puppeteer/browsers install chrome@116.0.5793.0

# Download the latest Chrome for Testing version for the given milestone.
npx @puppeteer/browsers install chrome@117

# Download the latest available ChromeDriver version corresponding to the Canary channel.
npx @puppeteer/browsers install chromedriver@canary

# Download a specific ChromeDriver version.
npx @puppeteer/browsers install chromedriver@116.0.5793.0

# On Ubuntu/Debian and only for Chrome, install the browser and required system dependencies.
# If the browser version has already been installed, the command
# will still attempt to install system dependencies.
# Requires root privileges.
npx puppeteer browsers install chrome --install-deps

----------------------------------------

TITLE: Retrieving Child Process in Puppeteer Browser Class
DESCRIPTION: Abstract method definition for getting the browser's associated Node.js ChildProcess instance. Returns null if the browser was connected to via Puppeteer.connect() rather than launched directly.

LANGUAGE: typescript
CODE:
class Browser {
  abstract process(): ChildProcess | null;
}

----------------------------------------

TITLE: Configuring Multiple Browser Downloads in Puppeteer
DESCRIPTION: Configuration file setup to enable downloading both Chrome and Firefox browsers for Puppeteer usage. Requires v23.0.0 or later.

LANGUAGE: javascript
CODE:
/**
 * @type {import("puppeteer").Configuration}
 */
module.exports = {
  // Download Chrome (default `skipDownload: false`).
  chrome: {
    skipDownload: false,
  },
  // Download Firefox (default `skipDownload: true`).
  firefox: {
    skipDownload: false,
  },
};

----------------------------------------

TITLE: Defining Connection.dispose() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the dispose() method for the Connection class in Puppeteer. The method is used to clean up and release resources associated with the connection. It doesn't take any parameters and doesn't return any value (void).

LANGUAGE: typescript
CODE:
class Connection {
  dispose(): void;
}

----------------------------------------

TITLE: Defining LaunchOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for LaunchOptions that extends ConnectOptions, providing configuration options for launching browser instances in Puppeteer. This interface includes properties for controlling browser behavior, debugging, environment settings, and execution parameters.

LANGUAGE: typescript
CODE:
export interface LaunchOptions extends ConnectOptions

----------------------------------------

TITLE: Defining CDPEvents Type Mapping in TypeScript
DESCRIPTION: Creates a mapped type that extracts event data types from the ProtocolMapping.Events interface. This type maps each CDP event name to its corresponding event payload type, using the first type parameter of the event definition.

LANGUAGE: typescript
CODE:
export type CDPEvents = {
  [Property in keyof ProtocolMapping.Events]: ProtocolMapping.Events[Property][0];
};

----------------------------------------

TITLE: Checking HTTP Response Success with Puppeteer TypeScript
DESCRIPTION: Method signature for HTTPResponse.ok() which returns a boolean indicating if the response status code is in the successful range (200-299).

LANGUAGE: typescript
CODE:
class HTTPResponse {
  ok(): boolean;
}

----------------------------------------

TITLE: Converting Cookie Partition Keys - TypeScript Function Signature
DESCRIPTION: Function signature for converting cookie partition keys between Puppeteer and CDP formats. Takes a CookiePartitionKey, string, or undefined as input and returns a Protocol.Network.CookiePartitionKey or undefined.

LANGUAGE: typescript
CODE:
export declare function convertCookiesPartitionKeyFromPuppeteerToCdp(
  partitionKey: CookiePartitionKey | string | undefined,
): Protocol.Network.CookiePartitionKey | undefined;

----------------------------------------

TITLE: Defining LaunchOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for LaunchOptions that extends ConnectOptions, providing configuration options for launching browser instances in Puppeteer. This interface includes properties for controlling browser behavior, debugging, environment settings, and execution parameters.

LANGUAGE: typescript
CODE:
export interface LaunchOptions extends ConnectOptions

----------------------------------------

TITLE: Defining Connection.send() Method in TypeScript
DESCRIPTION: This code snippet defines the send() method for the Connection class in TypeScript. It's a generic method that takes a command method, optional parameters, and options, and returns a Promise with the command's return type.

LANGUAGE: typescript
CODE:
class Connection {
  send<T extends keyof ProtocolMapping.Commands>(
    method: T,
    params?: ProtocolMapping.Commands[T]['paramsType'][0],
    options?: CommandOptions,
  ): Promise<ProtocolMapping.Commands[T]['returnType']>;
}

----------------------------------------

TITLE: Defining Connection.session() Method in TypeScript
DESCRIPTION: This code snippet defines the session() method for the Connection class in Puppeteer. It takes a sessionId as a parameter and returns either a CDPSession object or null.

LANGUAGE: typescript
CODE:
class Connection {
  session(sessionId: string): CDPSession | null;
}

----------------------------------------

TITLE: Defining ProfileOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for profile configuration options. Includes path property as string and preferences property as a record of string keys with unknown values.

LANGUAGE: typescript
CODE:
export interface ProfileOptions

----------------------------------------

TITLE: Defining setDefaultNavigationTimeout Method in Typescript
DESCRIPTION: This snippet shows the TypeScript signature for the setDefaultNavigationTimeout method in the Page class. It takes a single parameter 'timeout' of type number and returns void.

LANGUAGE: typescript
CODE:
class Page {
  abstract setDefaultNavigationTimeout(timeout: number): void;
}

----------------------------------------

TITLE: Implementing HTTPResponse.frame Method in TypeScript
DESCRIPTION: Defines the abstract frame() method in the HTTPResponse class that returns either a Frame object or null. This method is used to retrieve the frame that initiated the HTTP response, returning null when navigating to error pages.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  abstract frame(): Frame | null;
}

----------------------------------------

TITLE: Retrieving Navigation Timeout in Puppeteer using TypeScript
DESCRIPTION: A TypeScript class method that returns the default navigation timeout value for a Page instance. This method returns a number representing the maximum time in milliseconds allowed for navigation operations.

LANGUAGE: typescript
CODE:
class Page {
  abstract getDefaultNavigationTimeout(): number;
}

----------------------------------------

TITLE: Retrieving Dialog Message in Puppeteer (TypeScript)
DESCRIPTION: This code snippet demonstrates the signature of the Dialog.message() method in Puppeteer. It returns a string containing the message displayed in the dialog.

LANGUAGE: typescript
CODE:
class Dialog {
  message(): string;
}

----------------------------------------

TITLE: Defining EventEmitter.emit() Method in TypeScript
DESCRIPTION: This code snippet defines the emit() method for the EventEmitter class in TypeScript. It takes a type parameter and an event parameter, and returns a boolean indicating whether there are any listeners for the event.

LANGUAGE: typescript
CODE:
class EventEmitter {
  emit<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    event: EventsWithWildcard<Events>[Key],
  ): boolean;
}

----------------------------------------

TITLE: Retrieving Frame Title in Puppeteer with TypeScript
DESCRIPTION: Type definition for the Frame.title() method that returns a Promise resolving to the frame's title string. This method is part of the Frame class in Puppeteer's API.

LANGUAGE: typescript
CODE:
class Frame {
  title(): Promise<string>;
}

----------------------------------------

TITLE: Retrieving Frame Title in Puppeteer with TypeScript
DESCRIPTION: Type definition for the Frame.title() method that returns a Promise resolving to the frame's title string. This method is part of the Frame class in Puppeteer's API.

LANGUAGE: typescript
CODE:
class Frame {
  title(): Promise<string>;
}

----------------------------------------

TITLE: Defining HTTPResponse.url() Method in TypeScript
DESCRIPTION: This code snippet defines the url() method for the HTTPResponse class in Puppeteer. The method returns the URL of the response as a string.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  abstract url(): string;
}

----------------------------------------

TITLE: Retrieving Dialog Message in Puppeteer (TypeScript)
DESCRIPTION: This code snippet demonstrates the signature of the Dialog.message() method in Puppeteer. It returns a string containing the message displayed in the dialog.

LANGUAGE: typescript
CODE:
class Dialog {
  message(): string;
}

----------------------------------------

TITLE: Defining resolveBuildId Function in TypeScript
DESCRIPTION: This function resolves a build ID for a given browser, platform, and tag combination. It takes three parameters: browser (of type Browser), platform (of type BrowserPlatform), and tag (a string). The function returns a Promise that resolves to a string representing the build ID.

LANGUAGE: typescript
CODE:
export declare function resolveBuildId(
  browser: Browser,
  platform: BrowserPlatform,
  tag: string,
): Promise<string>;

----------------------------------------

TITLE: Implementing ConsoleMessage.stackTrace Method in TypeScript
DESCRIPTION: Method signature for retrieving the stack trace locations of a console message. Returns an array of ConsoleMessageLocation objects that represent the stack trace where the console message was generated.

LANGUAGE: typescript
CODE:
class ConsoleMessage {
  stackTrace(): ConsoleMessageLocation[];
}

----------------------------------------

TITLE: Defining InterceptResolutionAction Enum in TypeScript
DESCRIPTION: This code snippet defines the InterceptResolutionAction enum, which contains various actions that can be taken when intercepting network requests in Puppeteer. The enum includes options such as aborting, continuing, or responding to requests.

LANGUAGE: typescript
CODE:
export declare enum InterceptResolutionAction

----------------------------------------

TITLE: Constructing CLI Instance in TypeScript
DESCRIPTION: This code snippet shows the constructor signature for the CLI class in Puppeteer. It includes optional parameters for configuration and a readline interface.

LANGUAGE: typescript
CODE:
class CLI {
  constructor(
    opts?:
      | string
      | {
          cachePath?: string;
          scriptName?: string;
          prefixCommand?: {
            cmd: string;
            description: string;
          };
          allowCachePathOverride?: boolean;
          pinnedBrowsers?: Partial<
            Record<
              Browser,
              {
                buildId: string;
                skipDownload: boolean;
              }
            >
          >;
        },
    rl?: readline.Interface,
  );
}

----------------------------------------

TITLE: Defining LowerCasePaperFormat Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines a TypeScript type called LowerCasePaperFormat. It represents a union of string literals for various standard paper sizes, including letter, legal, tabloid, ledger, and A-series formats (A0 to A6). This type is likely used in Puppeteer for specifying paper formats in printing or PDF generation functions.

LANGUAGE: typescript
CODE:
export type LowerCasePaperFormat =
  | 'letter'
  | 'legal'
  | 'tabloid'
  | 'ledger'
  | 'a0'
  | 'a1'
  | 'a2'
  | 'a3'
  | 'a4'
  | 'a5'
  | 'a6';

----------------------------------------

TITLE: Page.emulateMediaFeatures Method Signature
DESCRIPTION: TypeScript class method signature for emulating media features on a page. Takes an optional array of MediaFeature objects and returns a Promise.

LANGUAGE: typescript
CODE:
class Page {
  abstract emulateMediaFeatures(features?: MediaFeature[]): Promise<void>;
}

----------------------------------------

TITLE: Retrieving Browser Instance in Puppeteer TypeScript
DESCRIPTION: Abstract method definition for retrieving the Browser instance associated with a BrowserContext. The method returns the parent Browser object that contains this context.

LANGUAGE: typescript
CODE:
class BrowserContext {
  abstract browser(): Browser;
}

----------------------------------------

TITLE: Defining Puppeteer.connect() Method Signature in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the Puppeteer.connect() method. It takes ConnectOptions as a parameter and returns a Promise that resolves to a Browser instance.

LANGUAGE: typescript
CODE:
class Puppeteer {
  connect(options: ConnectOptions): Promise<Browser>;
}

----------------------------------------

TITLE: Defining Frame.childFrames() Method in TypeScript
DESCRIPTION: This code snippet defines the childFrames() method in the Frame class. It returns an array of Frame objects, representing the child frames of the current frame.

LANGUAGE: typescript
CODE:
class Frame {
  abstract childFrames(): Frame[];
}

----------------------------------------

TITLE: Declaring CLI Class in TypeScript
DESCRIPTION: TypeScript class declaration for the CLI class that provides command line interface functionality in Puppeteer

LANGUAGE: typescript
CODE:
export declare class CLI

----------------------------------------

TITLE: Defining ElementHandle.clickablePoint Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.clickablePoint() method. It returns a Promise resolving to a Point, representing the middle point within an element or a specific offset if provided.

LANGUAGE: typescript
CODE:
class ElementHandle {
  clickablePoint(offset?: Offset): Promise<Point>;
}

----------------------------------------

TITLE: Declaring CLI Class in TypeScript
DESCRIPTION: TypeScript class declaration for the CLI class that provides command line interface functionality in Puppeteer

LANGUAGE: typescript
CODE:
export declare class CLI

----------------------------------------

TITLE: Defining Browser.version() Method in TypeScript
DESCRIPTION: This code snippet defines the abstract version() method in the Browser class. It returns a Promise that resolves to a string representing the browser's name and version.

LANGUAGE: typescript
CODE:
class Browser {
  abstract version(): Promise<string>;
}

----------------------------------------

TITLE: Defining KeyPressOptions Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the KeyPressOptions type as an intersection of KeyDownOptions and KeyboardTypeOptions. It combines the options available for both key down and keyboard typing operations in Puppeteer.

LANGUAGE: typescript
CODE:
export type KeyPressOptions = KeyDownOptions & KeyboardTypeOptions;

----------------------------------------

TITLE: Defining ExperimentsConfiguration Type in TypeScript
DESCRIPTION: Defines a TypeScript type for experimental configuration options in Puppeteer. Currently implemented as an empty Record type that maps string keys to never, indicating no experimental options are currently available.

LANGUAGE: typescript
CODE:
export type ExperimentsConfiguration = Record<string, never>;

----------------------------------------

TITLE: Defining Page.evaluateOnNewDocument Method Signature in TypeScript
DESCRIPTION: This code snippet shows the TypeScript signature for the Page.evaluateOnNewDocument method. It defines the method's parameters and return type, allowing for flexible function types and arguments.

LANGUAGE: typescript
CODE:
class Page {
  abstract evaluateOnNewDocument<
    Params extends unknown[],
    Func extends (...args: Params) => unknown = (...args: Params) => unknown,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<NewDocumentScriptEvaluation>;
}

----------------------------------------

TITLE: Installing and Unpacking Browser in Puppeteer
DESCRIPTION: Downloads and unpacks a browser archive based on provided InstallOptions. Returns a Promise that resolves to an InstalledBrowser instance containing information about the installed browser.

LANGUAGE: typescript
CODE:
export declare function install(
  options: InstallOptions & {
    unpack?: true;
  },
): Promise<InstalledBrowser>;

----------------------------------------

TITLE: Defining LocatorClickOptions Type in TypeScript
DESCRIPTION: Declares a TypeScript type that combines ClickOptions and ActionOptions interfaces to provide configuration options for click operations in Puppeteer's Locator API.

LANGUAGE: typescript
CODE:
export type LocatorClickOptions = ClickOptions & ActionOptions;

----------------------------------------

TITLE: Installing and Unpacking Browser in Puppeteer
DESCRIPTION: Downloads and unpacks a browser archive based on provided InstallOptions. Returns a Promise that resolves to an InstalledBrowser instance containing information about the installed browser.

LANGUAGE: typescript
CODE:
export declare function install(
  options: InstallOptions & {
    unpack?: true;
  },
): Promise<InstalledBrowser>;

----------------------------------------

TITLE: Implementing Locator setWaitForStableBoundingBox Method in TypeScript
DESCRIPTION: Method signature for setWaitForStableBoundingBox that creates a new locator instance by cloning the current one and configuring whether to wait for stable bounding box between animation frames. Takes a boolean parameter and returns a new Locator instance.

LANGUAGE: typescript
CODE:
class Locator {
  setWaitForStableBoundingBox<ElementType extends Element>(
    this: Locator<ElementType>,
    value: boolean,
  ): Locator<ElementType>;
}

----------------------------------------

TITLE: Defining LocatorClickOptions Type in TypeScript
DESCRIPTION: Declares a TypeScript type that combines ClickOptions and ActionOptions interfaces to provide configuration options for click operations in Puppeteer's Locator API.

LANGUAGE: typescript
CODE:
export type LocatorClickOptions = ClickOptions & ActionOptions;

----------------------------------------

TITLE: Defining NodeFor Generic Type in TypeScript
DESCRIPTION: Declares a generic type NodeFor that takes a ComplexSelector string type parameter and uses ParseSelector type to process it. This type is used for type-safe element selection in Puppeteer.

LANGUAGE: typescript
CODE:
export type NodeFor<ComplexSelector extends string> =
  ParseSelector<ComplexSelector>;

----------------------------------------

TITLE: Defining Tracing.stop() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the stop() method for the Tracing class in Puppeteer. The method stops a trace that was previously started with the start method and returns a Promise that resolves to a buffer containing the trace data.

LANGUAGE: typescript
CODE:
class Tracing {
  stop(): Promise<Uint8Array | undefined>;
}

----------------------------------------

TITLE: Implementing Dialog Dismiss Method in Puppeteer TypeScript
DESCRIPTION: TypeScript class definition showing the Dialog.dismiss() method signature. This method returns a Promise that resolves when the dialog has been successfully dismissed.

LANGUAGE: typescript
CODE:
class Dialog {
  dismiss(): Promise<void>;
}

----------------------------------------

TITLE: Implementing Dialog Dismiss Method in Puppeteer TypeScript
DESCRIPTION: TypeScript class definition showing the Dialog.dismiss() method signature. This method returns a Promise that resolves when the dialog has been successfully dismissed.

LANGUAGE: typescript
CODE:
class Dialog {
  dismiss(): Promise<void>;
}

----------------------------------------

TITLE: Defining EventEmitter.off() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the EventEmitter.off() method. It removes an event listener from firing. The method takes an event type and an optional handler function as parameters, and returns the EventEmitter instance for method chaining.

LANGUAGE: typescript
CODE:
class EventEmitter {
  off<Key extends keyof EventsWithWildcard<Events>>(
    type: Key,
    handler?: Handler<EventsWithWildcard<Events>[Key]>,
  ): this;
}

----------------------------------------

TITLE: Defining ElementHandle.press Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.press() method. It takes a key parameter of type KeyInput and an optional options parameter of type Readonly<KeyPressOptions>, returning a Promise<void>.

LANGUAGE: typescript
CODE:
class ElementHandle {
  press(key: KeyInput, options?: Readonly<KeyPressOptions>): Promise<void>;
}

----------------------------------------

TITLE: Defining CSSCoverageOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the CSSCoverageOptions interface for Puppeteer. It includes an optional boolean property 'resetOnNavigation' to determine whether CSS coverage should be reset on every navigation.

LANGUAGE: typescript
CODE:
export interface CSSCoverageOptions {
  resetOnNavigation?: boolean;
}

----------------------------------------

TITLE: Defining NetworkConditions Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the NetworkConditions interface used in Puppeteer to simulate various network conditions. It includes three numeric properties: download speed, latency, and upload speed, all measured in appropriate units.

LANGUAGE: typescript
CODE:
export interface NetworkConditions {
  download: number;
  latency: number;
  upload: number;
}

----------------------------------------

TITLE: Defining AwaitedLocator Generic Type in TypeScript
DESCRIPTION: A TypeScript type utility that extracts the element type S from a Locator<S> type using conditional types. Used to infer the wrapped element type from a Puppeteer Locator instance.

LANGUAGE: typescript
CODE:
export type AwaitedLocator<T> = T extends Locator<infer S> ? S : never;

----------------------------------------

TITLE: Using Puppeteer.registerCustomQueryHandler in JavaScript
DESCRIPTION: This example demonstrates how to import Puppeteer, register a custom query handler named 'text', and then use it to select an element on a page. The custom handler is used by prepending the selection string with 'text/'.

LANGUAGE: javascript
CODE:
import {Puppeteer}, puppeteer from 'puppeteer';

Puppeteer.registerCustomQueryHandler('text', { … });
const aHandle = await page.$('text/…');

----------------------------------------

TITLE: Defining HTTPRequest.respond Method Signature in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the HTTPRequest.respond() method. It takes a partial ResponseForRequest object and an optional priority number, returning a Promise<void>.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  respond(
    response: Partial<ResponseForRequest>,
    priority?: number,
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining Page.deleteCookie() Method in TypeScript for Puppeteer
DESCRIPTION: This snippet shows the TypeScript signature for the Page.deleteCookie() method in Puppeteer. It takes an array of DeleteCookiesRequest objects as parameters and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Page {
  abstract deleteCookie(...cookies: DeleteCookiesRequest[]): Promise<void>;
}

----------------------------------------

TITLE: Defining AwaitablePredicate Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the AwaitablePredicate type as a generic function that takes a value of type T and returns an Awaitable<boolean>. It's used in the Puppeteer project for asynchronous predicate functions.

LANGUAGE: typescript
CODE:
export type AwaitablePredicate<T> = (value: T) => Awaitable<boolean>;

----------------------------------------

TITLE: Running Puppeteer Docker Container
DESCRIPTION: Command to run the Puppeteer Docker container with necessary system capabilities for Chrome sandbox. Executes a smoke test script and includes the SYS_ADMIN capability for secure browser operation.

LANGUAGE: bash
CODE:
docker run -i --init --rm --cap-add=SYS_ADMIN --name puppeteer-chrome puppeteer-chrome-linux node -e "`cat test/smoke-test.js`"

----------------------------------------

TITLE: Defining HTTPResponse Status Method in TypeScript
DESCRIPTION: Abstract class definition for HTTPResponse with a status() method that returns the numeric HTTP status code of the response. The method is a core part of Puppeteer's HTTP response handling functionality.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  abstract status(): number;
}

----------------------------------------

TITLE: Cleaning Puppeteer Artifacts in Bash
DESCRIPTION: Commands to remove stale artifacts from the Puppeteer project, with an option to specify a particular package.

LANGUAGE: bash
CODE:
npm run clean
# or specify the package
npm run clean --workspace <package>

----------------------------------------

TITLE: Implementing ElementHandle.screenshot() for Base64 Encoding in TypeScript
DESCRIPTION: This snippet defines the signature for the ElementHandle.screenshot() method that returns a base64-encoded string. It takes options as a parameter, including ScreenshotOptions and a required 'base64' encoding.

LANGUAGE: typescript
CODE:
class ElementHandle {
  screenshot(
    options: Readonly<ScreenshotOptions> & {
      encoding: 'base64';
    },
  ): Promise<string>;
}

----------------------------------------

TITLE: Defining Page.emulateTimezone() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript definition of the Page.emulateTimezone() method in the Page class. It takes an optional timezoneId parameter and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Page {
  abstract emulateTimezone(timezoneId?: string): Promise<void>;
}

----------------------------------------

TITLE: Defining EvaluateFuncWith Generic Type in TypeScript
DESCRIPTION: Defines a generic type EvaluateFuncWith that takes two type parameters: V and T. The type represents a function that accepts a value of type V and spread parameters from T, returning an Awaitable unknown value.

LANGUAGE: typescript
CODE:
export type EvaluateFuncWith<V, T extends unknown[]> = (
  ...params: [V, ...InnerParams<T>]
) => Awaitable<unknown>;

----------------------------------------

TITLE: Deploying Website without SSH
DESCRIPTION: Command to deploy the website using GitHub username authentication.

LANGUAGE: bash
CODE:
$ GIT_USER=<Your GitHub username> npm run deploy

----------------------------------------

TITLE: Defining ClickOptions Interface in TypeScript for Puppeteer
DESCRIPTION: This snippet defines the ClickOptions interface which extends MouseClickOptions. It includes an optional 'offset' property of type Offset, representing the clickable point's offset relative to the top-left corner of the border box.

LANGUAGE: typescript
CODE:
export interface ClickOptions extends MouseClickOptions

----------------------------------------

TITLE: Defining Page.exposeFunction method in Puppeteer
DESCRIPTION: This snippet shows the TypeScript signature for the Page.exposeFunction method in Puppeteer. It defines the method parameters and return type.

LANGUAGE: typescript
CODE:
class Page {
  abstract exposeFunction(
    name: string,
    pptrFunction:
      | Function
      | {
          default: Function;
        },
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining EventType Type in TypeScript
DESCRIPTION: Declares a type alias EventType that can be either a string or symbol value. This type is used throughout Puppeteer for event handling and type safety when working with events.

LANGUAGE: typescript
CODE:
export type EventType = string | symbol;

----------------------------------------

TITLE: Running E2E Tests
DESCRIPTION: Command to execute the Puppeteer E2E tests in an Angular project.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Defining CSSCoverage.stop() Method in TypeScript
DESCRIPTION: This snippet shows the signature of the stop() method in the CSSCoverage class. The method returns a Promise that resolves to an array of CoverageEntry objects.

LANGUAGE: typescript
CODE:
class CSSCoverage {
  stop(): Promise<CoverageEntry[]>;
}

----------------------------------------

TITLE: Implementing FileChooser Cancel Method in TypeScript - Puppeteer
DESCRIPTION: Definition of the cancel() method in the FileChooser class that returns a Promise resolving to void. This method is used to dismiss a file chooser dialog without making any file selections.

LANGUAGE: typescript
CODE:
class FileChooser {
  cancel(): Promise<void>;
}

----------------------------------------

TITLE: Defining ElementHandle.touchEnd Method in TypeScript
DESCRIPTION: This code snippet defines the touchEnd method for the ElementHandle class. The method takes no parameters and returns a Promise that resolves to void. It is used to simulate the end of a touch event on an element.

LANGUAGE: typescript
CODE:
class ElementHandle {
  touchEnd(this: ElementHandle<Element>): Promise<void>;
}

----------------------------------------

TITLE: Defining enqueueInterceptAction Method for HTTPRequest Class in TypeScript
DESCRIPTION: This snippet defines the enqueueInterceptAction method for the HTTPRequest class. The method adds an asynchronous request handler to the processing queue. These handlers are not guaranteed to execute in any specific order but will resolve before the request interception is finalized.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  enqueueInterceptAction(
    pendingHandler: () => void | PromiseLike<unknown>,
  ): void;
}

----------------------------------------

TITLE: Retrieving Page URL in Puppeteer
DESCRIPTION: Method signature for getting the current URL of a Puppeteer page. This is a shortcut method that internally calls page.mainFrame().url() and returns the URL as a string.

LANGUAGE: typescript
CODE:
class Page {
  url(): string;
}

----------------------------------------

TITLE: Server-Side Debugging Example
DESCRIPTION: Demonstrates how to add debugging breakpoints in server-side code.

LANGUAGE: typescript
CODE:
debugger;
await page.click('a[target=_blank]');

----------------------------------------

TITLE: Defining ResourceType Type in TypeScript for Puppeteer
DESCRIPTION: Defines a type alias that represents the resource types for HTTP requests. It uses the Protocol.Network.ResourceType from the underlying Chrome DevTools Protocol and converts it to lowercase.

LANGUAGE: typescript
CODE:
export type ResourceType = Lowercase<Protocol.Network.ResourceType>;

----------------------------------------

TITLE: Defining Page.waitForDevicePrompt Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the signature of the waitForDevicePrompt method that returns a Promise resolving to a DeviceRequestPrompt object. The method accepts optional WaitTimeoutOptions parameter.

LANGUAGE: typescript
CODE:
class Page {
  abstract waitForDevicePrompt(
    options?: WaitTimeoutOptions,
  ): Promise<DeviceRequestPrompt>;
}

----------------------------------------

TITLE: Version-specific Package Execution
DESCRIPTION: Examples of running specific versions of @puppeteer/browsers using npx, including latest and pinned versions.

LANGUAGE: bash
CODE:
# Always install and use the latest version from the registry.
npx @puppeteer/browsers@latest --help
# Always use a specifc version.
npx @puppeteer/browsers@2.4.1 --help
# Always install the latest version and automatically confirm the installation.
npx --yes @puppeteer/browsers@latest --help

----------------------------------------

TITLE: Defining Mouse.click() Method in Puppeteer TypeScript
DESCRIPTION: This code snippet defines the signature of the Mouse.click() method in Puppeteer. It takes x and y coordinates as required parameters and an optional MouseClickOptions object. The method returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Mouse {
  abstract click(
    x: number,
    y: number,
    options?: Readonly<MouseClickOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Defining Frame.focus() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the signature of the Frame.focus() method in the Frame class. The method takes a selector string as a parameter and returns a Promise that resolves to void. It focuses the first element that matches the provided selector.

LANGUAGE: typescript
CODE:
class Frame {
  focus(selector: string): Promise<void>;
}

----------------------------------------

TITLE: Defining ErrorCode Union Type in TypeScript
DESCRIPTION: Defines a union type of string literals representing various error conditions that can occur during browser automation with Puppeteer. Includes network errors, access issues, and general failure states.

LANGUAGE: typescript
CODE:
export type ErrorCode =
  | 'aborted'
  | 'accessdenied'
  | 'addressunreachable'
  | 'blockedbyclient'
  | 'blockedbyresponse'
  | 'connectionaborted'
  | 'connectionclosed'
  | 'connectionfailed'
  | 'connectionrefused'
  | 'connectionreset'
  | 'internetdisconnected'
  | 'namenotresolved'
  | 'timedout'
  | 'failed';

----------------------------------------

TITLE: Defining BrowserPlatform Enum in TypeScript
DESCRIPTION: Enum declaration for BrowserPlatform that defines platform identifiers used to specify operating system and architecture combinations for browser downloads. Includes values for Linux, Mac, and Windows platforms with different architectures.

LANGUAGE: typescript
CODE:
export declare enum BrowserPlatform

----------------------------------------

TITLE: Defining Page.waitForNetworkIdle Method in TypeScript
DESCRIPTION: This code snippet defines the waitForNetworkIdle method in the Page class of Puppeteer. It takes an optional WaitForNetworkIdleOptions parameter and returns a Promise that resolves when the network becomes idle.

LANGUAGE: typescript
CODE:
class Page {
  waitForNetworkIdle(options?: WaitForNetworkIdleOptions): Promise<void>;
}

----------------------------------------

TITLE: Defining BrowserLauncher.executablePath Method in TypeScript
DESCRIPTION: Abstract method declaration for retrieving browser executable path. Takes optional parameters for Chrome release channel and path validation, returning the executable path as a string.

LANGUAGE: typescript
CODE:
class BrowserLauncher {
  abstract executablePath(
    channel?: ChromeReleaseChannel,
    validatePath?: boolean,
  ): string;
}

----------------------------------------

TITLE: Browser Installation Examples
DESCRIPTION: Examples of installing different browser versions and types using the CLI.

LANGUAGE: sh
CODE:
# Download the latest available Chrome for Testing binary corresponding to the Stable channel.
npx @puppeteer/browsers install chrome@stable

# Download a specific Chrome for Testing version.
npx @puppeteer/browsers install chrome@116.0.5793.0

# Download the latest Chrome for Testing version for the given milestone.
npx @puppeteer/browsers install chrome@117

# Download the latest available ChromeDriver version corresponding to the Canary channel.
npx @puppeteer/browsers install chromedriver@canary

# Download a specific ChromeDriver version.
npx @puppeteer/browsers install chromedriver@116.0.5793.0

# On Ubuntu/Debian and only for Chrome, install the browser and required system dependencies.
# If the browser version has already been installed, the command
# will still attempt to install system dependencies.
# Requires root privileges.
npx puppeteer browsers install chrome --install-deps

----------------------------------------

TITLE: Defining Network Conditions Types in TypeScript
DESCRIPTION: Type definition for PredefinedNetworkConditions, which includes preset configurations for Slow 3G, Fast 3G, Slow 4G, and Fast 4G network conditions.

LANGUAGE: typescript
CODE:
PredefinedNetworkConditions: Readonly<{
  'Slow 3G': NetworkConditions;
  'Fast 3G': NetworkConditions;
  'Slow 4G': NetworkConditions;
  'Fast 4G': NetworkConditions;
}>;

----------------------------------------

TITLE: Defining Network Conditions Types in TypeScript
DESCRIPTION: Type definition for PredefinedNetworkConditions, which includes preset configurations for Slow 3G, Fast 3G, Slow 4G, and Fast 4G network conditions.

LANGUAGE: typescript
CODE:
PredefinedNetworkConditions: Readonly<{
  'Slow 3G': NetworkConditions;
  'Fast 3G': NetworkConditions;
  'Slow 4G': NetworkConditions;
  'Fast 4G': NetworkConditions;
}>;

----------------------------------------

TITLE: CLI Help Commands
DESCRIPTION: Examples showing how to access help documentation for different CLI commands.

LANGUAGE: bash
CODE:
npx @puppeteer/browsers --help # help for all commands
npx @puppeteer/browsers install --help # help for the install command
npx @puppeteer/browsers launch --help # help for the launch command
npx @puppeteer/browsers clear --help # help for the clear command
npx @puppeteer/browsers list --help # help for the list command

----------------------------------------

TITLE: Defining JSHandle.evaluateHandle Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the evaluateHandle method of the JSHandle class. It takes a function or string as the first argument, followed by additional parameters, and returns a Promise resolving to a HandleFor type.

LANGUAGE: typescript
CODE:
class JSHandle {
  evaluateHandle<
    Params extends unknown[],
    Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>,
  >(
    pageFunction: Func | string,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}

----------------------------------------

TITLE: Implementing Page Metrics Method in TypeScript
DESCRIPTION: Abstract class definition for the Page class showing the metrics() method signature. The method returns a Promise that resolves to a Metrics object containing various page performance measurements and statistics.

LANGUAGE: typescript
CODE:
class Page {
  abstract metrics(): Promise<Metrics>;
}

----------------------------------------

TITLE: Implementing HTTPRequest Navigation Check in TypeScript
DESCRIPTION: Abstract method declaration that determines if the current HTTP request is responsible for frame navigation. Returns a boolean indicating whether the request is driving navigation.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract isNavigationRequest(): boolean;
}

----------------------------------------

TITLE: Watching a Puppeteer Package Build in Bash
DESCRIPTION: Command to continuously build a single package in the Puppeteer project, with an example for the main puppeteer package.

LANGUAGE: bash
CODE:
npm run build --watch --workspace <package> # e.g. puppeteer

----------------------------------------

TITLE: Using PredefinedNetworkConditions in Puppeteer
DESCRIPTION: Example demonstrating how to use PredefinedNetworkConditions to emulate different network speeds when navigating to web pages using Puppeteer. Shows usage of all predefined network conditions.

LANGUAGE: typescript
CODE:
import {PredefinedNetworkConditions} from 'puppeteer';
(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.emulateNetworkConditions(PredefinedNetworkConditions['Slow 3G']);
  await page.goto('https://www.google.com');
  await page.emulateNetworkConditions(PredefinedNetworkConditions['Fast 3G']);
  await page.goto('https://www.google.com');
  await page.emulateNetworkConditions(PredefinedNetworkConditions['Slow 4G']); // alias to Fast 3G.
  await page.goto('https://www.google.com');
  await page.emulateNetworkConditions(PredefinedNetworkConditions['Fast 4G']);
  await page.goto('https://www.google.com');
  // other actions...
  await browser.close();
})();

----------------------------------------

TITLE: Defining trimCache Function Signature in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the signature of the trimCache function in Puppeteer. The function takes no parameters and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
trimCache: () => Promise<void>;

----------------------------------------

TITLE: Building a Single Puppeteer Package in Bash
DESCRIPTION: Command to build a single package in the Puppeteer project, with an example for the main puppeteer package.

LANGUAGE: bash
CODE:
npm run build --workspace <package> # e.g. puppeteer

----------------------------------------

TITLE: Defining ProtocolLifeCycleEvent Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the ProtocolLifeCycleEvent type as a union of string literals representing various lifecycle events in Puppeteer. It includes events for page load completion, DOM content loading, and network idle states.

LANGUAGE: typescript
CODE:
export type ProtocolLifeCycleEvent =
  | 'load'
  | 'DOMContentLoaded'
  | 'networkIdle'
  | 'networkAlmostIdle';

----------------------------------------

TITLE: Defining defaultArgs Function Signature in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the signature of the defaultArgs function in Puppeteer. It takes an optional parameter of type PuppeteerCore.LaunchOptions and returns an array of strings.

LANGUAGE: typescript
CODE:
defaultArgs: (options?: PuppeteerCore.LaunchOptions) => string[]

----------------------------------------

TITLE: Defining CLI.run() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the run() method for the CLI class in Puppeteer. It takes an array of strings as input and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class CLI {
  run(argv: string[]): Promise<void>;
}

----------------------------------------

TITLE: Declaring HTTPRequest.postData() Method in TypeScript
DESCRIPTION: This code snippet shows the TypeScript declaration of the postData() method in the HTTPRequest class. The method returns the request's post body as a string if it exists, or undefined otherwise.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract postData(): string | undefined;
}

----------------------------------------

TITLE: Dockerfile for Puppeteer on Linux
DESCRIPTION: Dockerfile example for setting up a Linux environment to run Puppeteer with Chrome.

LANGUAGE: dockerfile
CODE:
FROM node:14-slim

# Install latest chrome dev package and fonts to support major charsets (Chinese, Japanese, Arabic, Hebrew, Thai and a few others)
# Note: this installs the necessary libs to make the bundled version of Chrome for Testing that Puppeteer
# installs, work.
RUN apt-get update \
    && apt-get install -y wget gnupg \
    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' \
    && apt-get update \
    && apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 \
      --no-install-recommends \
    && rm -rf /var/lib/apt/lists/*

# If running Docker >= 1.13.0 use docker run's --init arg to reap zombie processes, otherwise
# uncomment the following lines to have `dumb-init` as PID 1
# ADD https://github.com/Yelp/dumb-init/releases/download/v1.2.2/dumb-init_1.2.2_x86_64 /usr/local/bin/dumb-init
# RUN chmod +x /usr/local/bin/dumb-init
# ENTRYPOINT ["dumb-init", "--"]

# Uncomment to skip the Chrome for Testing download when installing puppeteer. If you do,
# you'll need to launch puppeteer with:
#     browser.launch({executablePath: 'google-chrome-stable'})
# ENV PUPPETEER_SKIP_DOWNLOAD true

# Install puppeteer so it's available in the container.
RUN npm init -y &&  \
    npm i puppeteer \
    # Add user so we don't need --no-sandbox.
    # same layer as npm install to keep re-chowned files from using up several hundred MBs more space
    && groupadd -r pptruser && useradd -r -g pptruser -G audio,video pptruser \
    && mkdir -p /home/pptruser/Downloads \
    && chown -R pptruser:pptruser /home/pptruser \
    && chown -R pptruser:pptruser /node_modules \
    && chown -R pptruser:pptruser /package.json \
    && chown -R pptruser:pptruser /package-lock.json

# Run everything after as non-privileged user.
USER pptruser

CMD ["google-chrome-stable"]

----------------------------------------

TITLE: Connecting Puppeteer to Browser - TypeScript Implementation
DESCRIPTION: TypeScript class method signature for connecting Puppeteer to an existing browser instance. Takes ConnectOptions as a parameter and returns a Promise resolving to a Browser instance.

LANGUAGE: typescript
CODE:
class PuppeteerNode {
  connect(options: ConnectOptions): Promise<Browser>;
}

----------------------------------------

TITLE: Deleting Cookies in Puppeteer Browser Class
DESCRIPTION: TypeScript class method signature for deleting cookies from the default browser context. This method accepts a variable number of Cookie objects as parameters and returns a Promise that resolves to void. It serves as a shortcut for browser.defaultBrowserContext().deleteCookie().

LANGUAGE: typescript
CODE:
class Browser {
  deleteCookie(...cookies: Cookie[]): Promise<void>;
}

----------------------------------------

TITLE: Command-specific Help Documentation
DESCRIPTION: Shows how to access help documentation for specific commands within the @puppeteer/browsers CLI.

LANGUAGE: bash
CODE:
npx @puppeteer/browsers --help # help for all commands
npx @puppeteer/browsers install --help # help for the install command
npx @puppeteer/browsers launch --help # help for the launch command
npx @puppeteer/browsers clear --help # help for the clear command
npx @puppeteer/browsers list --help # help for the list command

----------------------------------------

TITLE: Defining PuppeteerNode Class in TypeScript
DESCRIPTION: Declaration of the PuppeteerNode class, extending the Puppeteer class for Node-specific behavior.

LANGUAGE: typescript
CODE:
export declare class PuppeteerNode extends Puppeteer

----------------------------------------

TITLE: Clearing Permission Overrides in Puppeteer's Default Browser Context
DESCRIPTION: This example demonstrates how to clear overridden permissions in the default browser context using Puppeteer. It first overrides permissions for a specific URL, then clears all permission overrides.

LANGUAGE: typescript
CODE:
const context = browser.defaultBrowserContext();
context.overridePermissions('https://example.com', ['clipboard-read']);
// do stuff ..
context.clearPermissionOverrides();

----------------------------------------

TITLE: Defining Page.goBack() Method in Typescript
DESCRIPTION: This snippet shows the typescript signature for the Page.goBack() method in Puppeteer. It takes an optional WaitForOptions parameter and returns a Promise that resolves to an HTTPResponse or null.

LANGUAGE: typescript
CODE:
class Page {
  abstract goBack(options?: WaitForOptions): Promise<HTTPResponse | null>;
}

----------------------------------------

TITLE: Writing Browser Metadata in Puppeteer TypeScript
DESCRIPTION: Method signature for writing metadata to an installed browser instance. Takes a Metadata parameter and returns void.

LANGUAGE: typescript
CODE:
class InstalledBrowser {
  writeMetadata(metadata: Metadata): void;
}

----------------------------------------

TITLE: Defining HTTPRequest.resourceType() Method in TypeScript
DESCRIPTION: This code snippet defines the resourceType() method for the HTTPRequest class in Puppeteer. The method returns a ResourceType, which represents how the rendering engine perceives the request's resource type.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract resourceType(): ResourceType;
}

----------------------------------------

TITLE: Listing Chrome for Testing System Requirements Links in Markdown
DESCRIPTION: This snippet provides links to Chrome for Testing system requirements for Windows, MacOS, and Linux (Debian/Ubuntu and openSUSE/Fedora) using Markdown syntax.

LANGUAGE: markdown
CODE:
- [Windows](https://support.google.com/chrome/a/answer/7100626?hl=en#:~:text=the%20specified%20criteria.-,Windows,-To%20use%20Chrome), x64 architecture
- [MacOS](https://support.google.com/chrome/a/answer/7100626?hl=en#:~:text=Not%20yet%20scheduled-,Mac,-To%20use%20Chrome), x64 and arm64 architectures
- [Debian/Ubuntu Linux](https://support.google.com/chrome/a/answer/7100626?hl=en#:~:text=10.15%20or%20later-,Linux,-To%20use%20Chrome), with x64 architecture
  - Required system packages https://source.chromium.org/chromium/chromium/src/+/main:chrome/installer/linux/debian/dist_package_versions.json
- [openSUSE/Fedora Linux](https://support.google.com/chrome/a/answer/7100626?hl=en#:~:text=10.15%20or%20later-,Linux,-To%20use%20Chrome), with x64 architecture
  - Required system packages https://source.chromium.org/chromium/chromium/src/+/main:chrome/installer/linux/rpm/dist_package_provides.json

----------------------------------------

TITLE: Defining Tracing Class Signature in TypeScript
DESCRIPTION: Declares the Tracing class export in TypeScript.

LANGUAGE: typescript
CODE:
export declare class Tracing

----------------------------------------

TITLE: Declaring ConsoleMessage Class in TypeScript
DESCRIPTION: TypeScript class declaration for ConsoleMessage. This class is marked as internal and should not be instantiated directly or extended by third-party code.

LANGUAGE: typescript
CODE:
export declare class ConsoleMessage

----------------------------------------

TITLE: Building Single Puppeteer Package in Bash
DESCRIPTION: Command to build a single Puppeteer package, which automatically builds all dependent packages.

LANGUAGE: bash
CODE:
npm run build --workspace <package> # e.g. puppeteer

----------------------------------------

TITLE: Connecting to Running Browser with Puppeteer
DESCRIPTION: Demonstrates how to connect to an existing browser instance using WebSocket endpoint URL and manage the connection.

LANGUAGE: typescript
CODE:
const browser = await puppeteer.connect({
  browserWSEndpoint: 'ws://127.0.0.1:9222/...'
});

const page = await browser.newPage();

browser.disconnect();

----------------------------------------

TITLE: Retrieving Console Message Location in Puppeteer using TypeScript
DESCRIPTION: Method definition for retrieving the location information of a console message in Puppeteer. Returns a ConsoleMessageLocation object containing details about where the console message originated.

LANGUAGE: typescript
CODE:
class ConsoleMessage {
  location(): ConsoleMessageLocation;
}

----------------------------------------

TITLE: Defining Page.setCacheEnabled Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.setCacheEnabled method. It is an abstract method that takes an optional boolean parameter and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Page {
  abstract setCacheEnabled(enabled?: boolean): Promise<void>;
}

----------------------------------------

TITLE: Defining ProtocolError Class in TypeScript
DESCRIPTION: This snippet defines the ProtocolError class, which extends PuppeteerError. It is used to represent errors that occur in the protocol layer of Puppeteer.

LANGUAGE: typescript
CODE:
export declare class ProtocolError extends PuppeteerError

----------------------------------------

TITLE: Defining HTTPResponse Buffer Method in TypeScript
DESCRIPTION: TypeScript class method definition for HTTPResponse.buffer() that returns a Promise resolving to a Buffer containing the response body. The method might be affected by browser re-encoding based on HTTP headers or heuristics.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  buffer(): Promise<Buffer>;
}

----------------------------------------

TITLE: Initializing Process Class Constructor in TypeScript
DESCRIPTION: Constructor signature for the Process class that accepts LaunchOptions parameter. This constructor is used to create new instances of the Process class with specified launch configuration options.

LANGUAGE: typescript
CODE:
class Process {
  constructor(opts: LaunchOptions);
}

----------------------------------------

TITLE: Capturing Console Output from Browser
DESCRIPTION: Demonstrates how to capture and log console output from the browser to Node.js environment.

LANGUAGE: typescript
CODE:
page.on('console', msg => console.log('PAGE LOG:', msg.text()));

await page.evaluate(() => console.log(`url is ${location.href}`));

----------------------------------------

TITLE: Defining DebugInfo Interface in TypeScript
DESCRIPTION: This code snippet defines the DebugInfo interface in TypeScript. It includes a single property 'pendingProtocolErrors' which is an array of Error objects. This interface is likely used for debugging purposes in the puppeteer project.

LANGUAGE: typescript
CODE:
export interface DebugInfo {
  pendingProtocolErrors: Error[];
}

----------------------------------------

TITLE: Defining InstallOptions Interface in TypeScript
DESCRIPTION: Interface definition for browser installation configuration in Puppeteer. Specifies options for browser downloads, installation paths, platform targeting, and progress tracking.

LANGUAGE: typescript
CODE:
export interface InstallOptions

----------------------------------------

TITLE: Debug Protocol Traffic Logging
DESCRIPTION: Various commands to enable and filter debug logging for DevTools protocol traffic.

LANGUAGE: bash
CODE:
# Basic verbose logging
env DEBUG="puppeteer:*" node script.js

# Prevent truncating of long messages
env DEBUG="puppeteer:*" env DEBUG_MAX_STRING_LENGTH=null node script.js

# Protocol traffic can be rather noisy. This example filters out all Network domain messages
env DEBUG="puppeteer:*" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '"Network'

# Filter out all protocol messages but keep all other logging
env DEBUG="puppeteer:*,-puppeteer:protocol:*" node script.js

----------------------------------------

TITLE: Using Browser.waitForTarget() to Find a New Window Target in TypeScript
DESCRIPTION: This example demonstrates how to use the waitForTarget() method to find a target for a page opened via window.open(). It waits for a target with a specific URL to appear.

LANGUAGE: typescript
CODE:
await page.evaluate(() => window.open('https://www.example.com/'));
const newWindowTarget = await browser.waitForTarget(
  target => target.url() === 'https://www.example.com/',
);

----------------------------------------

TITLE: Defining setJavaScriptEnabled Method in Puppeteer's Page Class
DESCRIPTION: This code snippet shows the TypeScript signature for the setJavaScriptEnabled method in the Page class. It takes a boolean parameter to enable or disable JavaScript on the page and returns a Promise<void>.

LANGUAGE: typescript
CODE:
class Page {
  abstract setJavaScriptEnabled(enabled: boolean): Promise<void>;
}

----------------------------------------

TITLE: Checking Browser Download Capability in Puppeteer
DESCRIPTION: Function signature for canDownload that determines if browser download is possible based on provided installation options. Returns a Promise resolving to a boolean indicating download capability.

LANGUAGE: typescript
CODE:
export declare function canDownload(options: InstallOptions): Promise<boolean>;

----------------------------------------

TITLE: Pulling Puppeteer Docker Images
DESCRIPTION: Commands for pulling Puppeteer Docker images from GitHub Container Registry. Shows how to pull both the latest version and a specific version of Puppeteer.

LANGUAGE: bash
CODE:
docker pull ghcr.io/puppeteer/puppeteer:latest # pulls the latest
docker pull ghcr.io/puppeteer/puppeteer:16.1.0 # pulls the image that contains Puppeteer v16.1.0

----------------------------------------

TITLE: Retrieving Page Frames in Puppeteer using TypeScript
DESCRIPTION: Abstract method definition for retrieving all frames attached to a Puppeteer page. Returns an array of Frame objects representing each frame in the page hierarchy.

LANGUAGE: typescript
CODE:
class Page {
  abstract frames(): Frame[];
}

----------------------------------------

TITLE: Get Executable Path with Launch Options
DESCRIPTION: Method to retrieve the default executable path based on provided launch options. Takes LaunchOptions as a parameter and returns a string path.

LANGUAGE: typescript
CODE:
class PuppeteerNode {
  executablePath(options: LaunchOptions): string;
}

----------------------------------------

TITLE: Installing Puppeteer Angular Schematic
DESCRIPTION: Command to add Puppeteer-based e2e tests to an Angular project using ng add.

LANGUAGE: bash
CODE:
ng add @puppeteer/ng-schematics

----------------------------------------

TITLE: Defining ConnectionTransport.close Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the close() method for the ConnectionTransport interface in Puppeteer. The method takes no parameters and returns void, indicating it closes the connection transport without returning any value.

LANGUAGE: typescript
CODE:
interface ConnectionTransport {
  close(): void;
}

----------------------------------------

TITLE: Using emulateMediaType to Change CSS Media Type in Puppeteer
DESCRIPTION: This example demonstrates how to use the emulateMediaType method to change the CSS media type of a page. It shows checking media queries before and after changing the media type to 'print', and then resetting it to null.

LANGUAGE: typescript
CODE:
await page.evaluate(() => matchMedia('screen').matches);
// → true
await page.evaluate(() => matchMedia('print').matches);
// → false

await page.emulateMediaType('print');
await page.evaluate(() => matchMedia('screen').matches);
// → false
await page.evaluate(() => matchMedia('print').matches);
// → true

await page.emulateMediaType(null);
await page.evaluate(() => matchMedia('screen').matches);
// → true
await page.evaluate(() => matchMedia('print').matches);
// → false

----------------------------------------

TITLE: Defining Page.queryObjects Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the method signature for queryObjects, which takes a JSHandle of a prototype and returns a Promise of JSHandle containing an array of matching objects.

LANGUAGE: typescript
CODE:
class Page {
  abstract queryObjects<Prototype>(
    prototypeHandle: JSHandle<Prototype>,
  ): Promise<JSHandle<Prototype[]>>;
}

----------------------------------------

TITLE: Using emulateMediaType to Change CSS Media Type in Puppeteer
DESCRIPTION: This example demonstrates how to use the emulateMediaType method to change the CSS media type of a page. It shows checking media queries before and after changing the media type to 'print', and then resetting it to null.

LANGUAGE: typescript
CODE:
await page.evaluate(() => matchMedia('screen').matches);
// → true
await page.evaluate(() => matchMedia('print').matches);
// → false

await page.emulateMediaType('print');
await page.evaluate(() => matchMedia('screen').matches);
// → false
await page.evaluate(() => matchMedia('print').matches);
// → true

await page.emulateMediaType(null);
await page.evaluate(() => matchMedia('screen').matches);
// → true
await page.evaluate(() => matchMedia('print').matches);
// → false

----------------------------------------

TITLE: Get Executable Path for Chrome Release Channel
DESCRIPTION: Method to retrieve the default executable path for a specified Chrome release channel. Takes a ChromeReleaseChannel parameter and returns a string path.

LANGUAGE: typescript
CODE:
class PuppeteerNode {
  executablePath(channel: ChromeReleaseChannel): string;
}

----------------------------------------

TITLE: Launching Chrome without Sandbox
DESCRIPTION: Example of launching Chrome without sandbox mode (not recommended for untrusted content).

LANGUAGE: typescript
CODE:
const browser = await puppeteer.launch({
  args: ['--no-sandbox', '--disable-setuid-sandbox'],
});

----------------------------------------

TITLE: Defining ExtensionTransport.close() Method in TypeScript
DESCRIPTION: This code snippet defines the close() method for the ExtensionTransport class. The method takes no parameters and returns void, indicating it doesn't return any value after execution.

LANGUAGE: typescript
CODE:
class ExtensionTransport {
  close(): void;
}

----------------------------------------

TITLE: Basic Page Navigation Example
DESCRIPTION: Example showing how to create a page, navigate to a URL and take a screenshot

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://example.com');
  await page.screenshot({path: 'screenshot.png'});
  await browser.close();
})();

----------------------------------------

TITLE: Basic Page Navigation Example
DESCRIPTION: Example showing how to create a page, navigate to a URL and take a screenshot

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer';

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto('https://example.com');
  await page.screenshot({path: 'screenshot.png'});
  await browser.close();
})();

----------------------------------------

TITLE: Querying Installed Browsers in Puppeteer using TypeScript
DESCRIPTION: Function signature for getInstalledBrowsers that takes GetInstalledBrowsersOptions as a parameter and returns a Promise resolving to an array of InstalledBrowser objects. This function is used to retrieve metadata about browsers that are installed in the Puppeteer cache directory.

LANGUAGE: typescript
CODE:
export declare function getInstalledBrowsers(
  options: GetInstalledBrowsersOptions,
): Promise<InstalledBrowser[]>;

----------------------------------------

TITLE: Implementing Mouse Drop Operation in Puppeteer TypeScript
DESCRIPTION: Abstract method definition for performing drag and drop operations in Puppeteer. Takes a target point and drag data as parameters and returns a Promise that resolves when the operation completes.

LANGUAGE: typescript
CODE:
class Mouse {
  abstract drop(target: Point, data: Protocol.Input.DragData): Promise<void>;
}

----------------------------------------

TITLE: Defining Page.isClosed() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the isClosed() method for the Page class in Puppeteer. The method is abstract and returns a boolean value indicating whether the page has been closed.

LANGUAGE: typescript
CODE:
class Page {
  abstract isClosed(): boolean;
}

----------------------------------------

TITLE: Implementing JSHandle.asElement Method in TypeScript
DESCRIPTION: Abstract method definition for converting a JSHandle instance to an ElementHandle. Returns either null or the handle itself if it represents a DOM Node element.

LANGUAGE: typescript
CODE:
class JSHandle {
  abstract asElement(): ElementHandle<Node> | null;
}

----------------------------------------

TITLE: Defining GetInstalledBrowsersOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for GetInstalledBrowsersOptions that specifies the configuration options for getting installed browsers. Contains a cacheDir property of type string that specifies the path to the root of the cache directory.

LANGUAGE: typescript
CODE:
export interface GetInstalledBrowsersOptions

----------------------------------------

TITLE: Implementing ResourceType Method in HTTPRequest Class
DESCRIPTION: Abstract method definition for retrieving the resource type of an HTTP request. This method returns a ResourceType enum value that indicates how the rendering engine categorized the requested resource.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract resourceType(): ResourceType;
}

----------------------------------------

TITLE: Computing Chrome System Path in TypeScript
DESCRIPTION: Function that returns the system-wide Chrome installation path based on the provided release channel. It searches known installation locations and throws an error if Chrome is not found at the expected path.

LANGUAGE: typescript
CODE:
export declare function computeSystemExecutablePath(
  options: SystemOptions,
): string;

----------------------------------------

TITLE: Implementing Page.workers Method in TypeScript
DESCRIPTION: Abstract class definition for the Page class showing the workers() method signature that returns an array of WebWorker instances. This method retrieves all dedicated WebWorkers associated with the page, but does not include ServiceWorkers.

LANGUAGE: typescript
CODE:
class Page {
  abstract workers(): WebWorker[];
}

----------------------------------------

TITLE: Implementing Page.workers Method in TypeScript
DESCRIPTION: Abstract class definition for the Page class showing the workers() method signature that returns an array of WebWorker instances. This method retrieves all dedicated WebWorkers associated with the page, but does not include ServiceWorkers.

LANGUAGE: typescript
CODE:
class Page {
  abstract workers(): WebWorker[];
}

----------------------------------------

TITLE: Defining JSHandle.dispose() Method in TypeScript
DESCRIPTION: This code snippet defines the dispose() method for the JSHandle class. The method is asynchronous and returns a Promise that resolves to void. It is used to release the object referenced by the handle for garbage collection.

LANGUAGE: typescript
CODE:
class JSHandle {
  abstract dispose(): Promise<void>;
}

----------------------------------------

TITLE: Defining ChromeReleaseChannel Enum in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines an enumeration for Chrome release channels in TypeScript. It includes four channels: BETA, CANARY, DEV, and STABLE, each associated with a string value.

LANGUAGE: typescript
CODE:
export declare enum ChromeReleaseChannel

----------------------------------------

TITLE: Frame.waitForFunction Method Signature - TypeScript
DESCRIPTION: Type definition for the Frame.waitForFunction method that allows waiting for a function to evaluate to truthy in a frame context.

LANGUAGE: typescript
CODE:
class Frame {
  waitForFunction<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    pageFunction: Func | string,
    options?: FrameWaitForFunctionOptions,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}

----------------------------------------

TITLE: Process Class Definition in TypeScript
DESCRIPTION: Defines the Process class structure used for managing browser processes in Puppeteer. The class provides functionality for process control including initialization, monitoring, and termination.

LANGUAGE: typescript
CODE:
export declare class Process

----------------------------------------

TITLE: Waiting for Device Prompt Usage
DESCRIPTION: Example of how to use Page.waitForDevicePrompt method that was added in v13.2.0

LANGUAGE: JavaScript
CODE:
const prompt = await page.waitForDevicePrompt();

----------------------------------------

TITLE: Defining uninstall() Function Signature in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the signature of the uninstall() function in Puppeteer. It takes an UninstallOptions object as a parameter and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
export declare function uninstall(options: UninstallOptions): Promise<void>;

----------------------------------------

TITLE: Implementing HTTPRequest Method Getter in TypeScript
DESCRIPTION: Abstract method definition in the HTTPRequest class that returns the HTTP method used for the request. This method is part of Puppeteer's HTTP request handling functionality and returns standard HTTP methods like GET, POST, etc.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract method(): string;
}

----------------------------------------

TITLE: Implementing HTTPRequest Method Getter in TypeScript
DESCRIPTION: Abstract method definition in the HTTPRequest class that returns the HTTP method used for the request. This method is part of Puppeteer's HTTP request handling functionality and returns standard HTTP methods like GET, POST, etc.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract method(): string;
}

----------------------------------------

TITLE: Defining JSHandle.asElement() Method in TypeScript
DESCRIPTION: This snippet defines the asElement() method for the JSHandle class in Puppeteer. The method returns either null or an ElementHandle<Node> if the handle is an instance of ElementHandle.

LANGUAGE: typescript
CODE:
class JSHandle {
  abstract asElement(): ElementHandle<Node> | null;
}

----------------------------------------

TITLE: Creating Browser Profile in Puppeteer using TypeScript
DESCRIPTION: Function signature for creating a browser profile in Puppeteer. Takes a Browser instance and ProfileOptions as parameters and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
export declare function createProfile(
  browser: Browser,
  opts: ProfileOptions,
): Promise<void>;

----------------------------------------

TITLE: Defining UninstallOptions Interface in TypeScript
DESCRIPTION: Interface that specifies the configuration options for uninstalling a browser in Puppeteer. Contains properties for browser instance, build ID, cache directory location, and optional platform specification.

LANGUAGE: typescript
CODE:
export interface UninstallOptions

----------------------------------------

TITLE: Basic CLI Usage with NPX
DESCRIPTION: Examples of using npx to run the @puppeteer/browsers CLI with different commands and version specifications.

LANGUAGE: bash
CODE:
# This will install and run the @puppeteer/browsers package.
# If it is already installed in the current directory, the installed
version will be used.
npx @puppeteer/browsers --help

----------------------------------------

TITLE: Importing Puppeteer Core
DESCRIPTION: Example of importing the puppeteer-core package for cases when connecting to remote browsers or managing browsers manually.

LANGUAGE: typescript
CODE:
import puppeteer from 'puppeteer-core';

----------------------------------------

TITLE: Defining Keyboard.up Method in TypeScript
DESCRIPTION: Abstract class definition for the Keyboard class with the up() method that dispatches keyup events. The method takes a KeyInput parameter representing the key to release and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Keyboard {
  abstract up(key: KeyInput): Promise<void>;
}

----------------------------------------

TITLE: Defining Keyboard.up Method in TypeScript
DESCRIPTION: Abstract class definition for the Keyboard class with the up() method that dispatches keyup events. The method takes a KeyInput parameter representing the key to release and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Keyboard {
  abstract up(key: KeyInput): Promise<void>;
}

----------------------------------------

TITLE: CSS Coverage Range Configuration in JSON
DESCRIPTION: JSON configuration specifying URL endpoint and CSS coverage ranges for analysis, including charset declarations, namespace definitions, font-face rules, and media queries.

LANGUAGE: json
CODE:
[
  {
    "url": "http://localhost:<PORT>/csscoverage/involved.html",
    "ranges": [
      {
        "start": 149,
        "end": 297
      },
      {
        "start": 306,
        "end": 323
      },
      {
        "start": 327,
        "end": 433
      }
    ],
    "text": "\n@charset \"utf-8\";\n@namespace svg url(http://www.w3.org/2000/svg);\n@font-face {\n  font-family: \"Example Font\";\n  src: url(\"./Dosis-Regular.ttf\");\n}\n\n#fluffy {\n  border: 1px solid black;\n  z-index: 1;\n  /* -webkit-disabled-property: rgb(1, 2, 3) */\n  -lol-cats: \"dogs\" /* non-existing property */\n}\n\n@media (min-width: 1px) {\n  span {\n    -webkit-border-radius: 10px;\n    font-family: \"Example Font\";\n    animation: 1s identifier;\n  }\n}\n"
  }
]

----------------------------------------

TITLE: Declaring InstalledBrowser Class in TypeScript
DESCRIPTION: This snippet shows the TypeScript declaration of the InstalledBrowser class. The class is exported and its constructor is marked as internal, meaning third-party code should not call it directly or create subclasses.

LANGUAGE: typescript
CODE:
export declare class InstalledBrowser

----------------------------------------

TITLE: Installing Puppeteer Browsers via CLI
DESCRIPTION: Command line instruction to download and install configured browsers for Puppeteer.

LANGUAGE: bash
CODE:
npx puppeteer browsers install

----------------------------------------

TITLE: Configuring Test Server Port in Angular JSON
DESCRIPTION: JSON configuration to specify a custom port for the E2E test server in angular.json file.

LANGUAGE: json
CODE:
{
  "e2e": {
    "builder": "@puppeteer/ng-schematics:puppeteer",
    "options": {
      "commands": [...],
      "devServerTarget": "sandbox:serve",
      "testRunner": "<TestRunner>",
      "port": 8080
    },
    ...
}

----------------------------------------

TITLE: Retrieving Frame Name or ID using Puppeteer in TypeScript
DESCRIPTION: This code snippet demonstrates the recommended alternative to the obsolete Frame.name() method. It uses the frameElement() method to get the frame element, then evaluates it to retrieve the name or id attribute.

LANGUAGE: typescript
CODE:
const element = await frame.frameElement();
const nameOrId = await element.evaluate(frame => frame.name ?? frame.id);

----------------------------------------

TITLE: Retrieving Frame Name or ID using Puppeteer in TypeScript
DESCRIPTION: This code snippet demonstrates the recommended alternative to the obsolete Frame.name() method. It uses the frameElement() method to get the frame element, then evaluates it to retrieve the name or id attribute.

LANGUAGE: typescript
CODE:
const element = await frame.frameElement();
const nameOrId = await element.evaluate(frame => frame.name ?? frame.id);

----------------------------------------

TITLE: Defining WebDriver BiDi WebSocket Endpoint Regex in TypeScript
DESCRIPTION: This snippet declares a constant named WEBDRIVER_BIDI_WEBSOCKET_ENDPOINT_REGEX of type RegExp. It is likely used to match and validate WebDriver BiDi WebSocket endpoint URLs in the Puppeteer project.

LANGUAGE: typescript
CODE:
WEBDRIVER_BIDI_WEBSOCKET_ENDPOINT_REGEX: RegExp;

----------------------------------------

TITLE: Defining Process.close() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the close() method for the Process class in Puppeteer. The method returns a Promise that resolves to void, indicating an asynchronous operation that doesn't return a value.

LANGUAGE: typescript
CODE:
class Process {
  close(): Promise<void>;
}

----------------------------------------

TITLE: Running Puppeteer Unit Tests in Bash
DESCRIPTION: Command to run Puppeteer unit tests using the Node test runner (requires Node 20+).

LANGUAGE: bash
CODE:
npm run unit

----------------------------------------

TITLE: Building Docker Image for Puppeteer
DESCRIPTION: Command to build a Docker image for running Puppeteer with Chrome on Linux. The image name is set to 'puppeteer-chrome-linux'.

LANGUAGE: bash
CODE:
docker build -t puppeteer-chrome-linux .

----------------------------------------

TITLE: Defining Process.waitForLineOutput() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the waitForLineOutput() method in the Process class. It takes a RegExp parameter for matching output and an optional timeout parameter, returning a Promise resolving to a string.

LANGUAGE: typescript
CODE:
class Process {
  waitForLineOutput(regex: RegExp, timeout?: number): Promise<string>;
}

----------------------------------------

TITLE: Installing Chromium on Amazon Linux EC2 Instance
DESCRIPTION: Commands to install Chromium on an Amazon Linux EC2 instance for running Puppeteer tests.

LANGUAGE: bash
CODE:
sudo amazon-linux-extras install epel -y
sudo yum install -y chromium

----------------------------------------

TITLE: Defining Page.createPDFStream Method in TypeScript
DESCRIPTION: Abstract method definition for creating a PDF stream from a page. Returns a Promise that resolves to a ReadableStream of Uint8Array data. Accepts optional PDFOptions parameter for customizing the PDF generation.

LANGUAGE: typescript
CODE:
class Page {
  abstract createPDFStream(
    options?: PDFOptions,
  ): Promise<ReadableStream<Uint8Array>>;
}

----------------------------------------

TITLE: Defining DeleteCookiesRequest Interface in TypeScript
DESCRIPTION: TypeScript interface that defines the structure for cookie deletion requests. It includes optional properties for domain, path, URL, and partition key specification, along with a required name property for identifying cookies to remove.

LANGUAGE: typescript
CODE:
export interface DeleteCookiesRequest

----------------------------------------

TITLE: Defining Protocol Type in TypeScript for Puppeteer
DESCRIPTION: TypeScript type definition that specifies the supported protocol types in Puppeteer. The type can be either 'cdp' (Chrome DevTools Protocol) or 'webDriverBiDi' (WebDriver BiDirectional Protocol).

LANGUAGE: typescript
CODE:
export type ProtocolType = 'cdp' | 'webDriverBiDi';

----------------------------------------

TITLE: Defining Protocol Type in TypeScript for Puppeteer
DESCRIPTION: TypeScript type definition that specifies the supported protocol types in Puppeteer. The type can be either 'cdp' (Chrome DevTools Protocol) or 'webDriverBiDi' (WebDriver BiDirectional Protocol).

LANGUAGE: typescript
CODE:
export type ProtocolType = 'cdp' | 'webDriverBiDi';

----------------------------------------

TITLE: Defining CDP WebSocket Endpoint Regex in TypeScript
DESCRIPTION: Declares a constant named CDP_WEBSOCKET_ENDPOINT_REGEX of type RegExp. This regular expression is likely used to identify and validate Chrome DevTools Protocol WebSocket endpoint URLs.

LANGUAGE: typescript
CODE:
CDP_WEBSOCKET_ENDPOINT_REGEX: RegExp;

----------------------------------------

TITLE: Defining ElementHandle.touchStart() Method in TypeScript
DESCRIPTION: This snippet defines the touchStart() method for the ElementHandle class. The method scrolls the element into view if needed, and then starts a touch in the center of the element. It returns a Promise that resolves to a TouchHandle representing the touch that was started.

LANGUAGE: typescript
CODE:
class ElementHandle {
  touchStart(this: ElementHandle<Element>): Promise<TouchHandle>;
}

----------------------------------------

TITLE: Implementing JSHandle.remoteObject Method in TypeScript
DESCRIPTION: Abstract method definition in the JSHandle class that provides access to the Protocol.Runtime.RemoteObject backing the handle. This method allows direct access to the Chrome DevTools Protocol runtime object representation.

LANGUAGE: typescript
CODE:
class JSHandle {
  abstract remoteObject(): Protocol.Runtime.RemoteObject;
}

----------------------------------------

TITLE: Defining BoxModel Interface in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the BoxModel interface for Puppeteer. It includes properties for various aspects of an element's box model, such as border, content, margin, padding, width, and height.

LANGUAGE: typescript
CODE:
export interface BoxModel {
  border: Quad;
  content: Quad;
  height: number;
  margin: Quad;
  padding: Quad;
  width: number;
}

----------------------------------------

TITLE: Defining CookieSourceScheme Type in TypeScript
DESCRIPTION: TypeScript type definition that represents the source scheme of cookie origins with three possible values: 'Unset' for legacy cookie scope emulation, 'NonSecure' for non-secure origins, and 'Secure' for secure origins. The 'Unset' option is marked as temporary and will be removed in future versions.

LANGUAGE: typescript
CODE:
export type CookieSourceScheme = 'Unset' | 'NonSecure' | 'Secure';

----------------------------------------

TITLE: Defining Browser.cookies() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Browser.cookies() method. It returns a Promise that resolves to an array of Cookie objects from the default BrowserContext.

LANGUAGE: typescript
CODE:
class Browser {
  cookies(): Promise<Cookie[]>;
}

----------------------------------------

TITLE: Implementing Target.asPage Method in TypeScript
DESCRIPTION: Abstract class definition for Target showing the asPage() method signature. The method returns a Promise that resolves to a Page object, allowing forceful creation of a page from any target type.

LANGUAGE: typescript
CODE:
class Target {
  abstract asPage(): Promise<Page>;
}

----------------------------------------

TITLE: Defining Browser.cookies() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Browser.cookies() method. It returns a Promise that resolves to an array of Cookie objects from the default BrowserContext.

LANGUAGE: typescript
CODE:
class Browser {
  cookies(): Promise<Cookie[]>;
}

----------------------------------------

TITLE: Implementing Locator Clone Method in TypeScript
DESCRIPTION: Method signature for cloning a Locator instance in Puppeteer. The clone() method returns a new Locator instance of the same type T as the original.

LANGUAGE: typescript
CODE:
class Locator {
  clone(): Locator<T>;
}

----------------------------------------

TITLE: Downloading Browser Archive in Puppeteer
DESCRIPTION: Downloads a browser archive without unpacking it based on provided InstallOptions. Returns a Promise that resolves to a string containing the absolute path to the downloaded archive.

LANGUAGE: typescript
CODE:
export declare function install(
  options: InstallOptions & {
    unpack: false;
  },
): Promise<string>;

----------------------------------------

TITLE: Defining Browser.setCookie() Method in TypeScript
DESCRIPTION: This code snippet defines the setCookie() method for the Browser class in Puppeteer. It sets cookies in the default BrowserContext and returns a Promise.

LANGUAGE: typescript
CODE:
class Browser {
  setCookie(...cookies: CookieData[]): Promise<void>;
}

----------------------------------------

TITLE: Defining ChromeSettings Interface in TypeScript
DESCRIPTION: Interface declaration for ChromeSettings that specifies configuration options for Chrome browser downloads and versioning in Puppeteer. Includes properties for download URL, version specification, and download skip options.

LANGUAGE: typescript
CODE:
export interface ChromeSettings

----------------------------------------

TITLE: Defining JSCoverage.stop Method Signature in TypeScript
DESCRIPTION: TypeScript class definition showing the stop() method signature for the JSCoverage class. The method returns a Promise that resolves to an array of JSCoverageEntry objects containing JavaScript coverage data.

LANGUAGE: typescript
CODE:
class JSCoverage {
  stop(): Promise<JSCoverageEntry[]>;
}

----------------------------------------

TITLE: Defining ChromeSettings Interface in TypeScript
DESCRIPTION: Interface declaration for ChromeSettings that specifies configuration options for Chrome browser downloads and versioning in Puppeteer. Includes properties for download URL, version specification, and download skip options.

LANGUAGE: typescript
CODE:
export interface ChromeSettings

----------------------------------------

TITLE: Defining ChromeReleaseChannel Type in TypeScript
DESCRIPTION: TypeScript type definition that enumerates the possible Chrome browser release channels: stable, beta, canary, and dev versions. This type is used to specify which version of Chrome should be launched or controlled by Puppeteer.

LANGUAGE: typescript
CODE:
export type ChromeReleaseChannel =
  | 'chrome'
  | 'chrome-beta'
  | 'chrome-canary'
  | 'chrome-dev';

----------------------------------------

TITLE: Implementing Cache Cleanup Method in PuppeteerNode - TypeScript
DESCRIPTION: Method signature for trimCache() that removes non-current browser binaries from the cache directory. The method returns a Promise that resolves to void and uses PUPPETEER_REVISIONS or configuration.browserRevision to determine current browser version.

LANGUAGE: typescript
CODE:
class PuppeteerNode {
  trimCache(): Promise<void>;
}

----------------------------------------

TITLE: Implementing Cache Cleanup Method in PuppeteerNode - TypeScript
DESCRIPTION: Method signature for trimCache() that removes non-current browser binaries from the cache directory. The method returns a Promise that resolves to void and uses PUPPETEER_REVISIONS or configuration.browserRevision to determine current browser version.

LANGUAGE: typescript
CODE:
class PuppeteerNode {
  trimCache(): Promise<void>;
}

----------------------------------------

TITLE: Defining Mouse.move() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the signature of the Mouse.move() method in the Mouse class. It takes x and y coordinates as required parameters and an optional options object. The method returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Mouse {
  abstract move(
    x: number,
    y: number,
    options?: Readonly<MouseMoveOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Implementing FileChooser Cancel Method in TypeScript
DESCRIPTION: Implementation of the cancel() method in the FileChooser class that closes a file chooser dialog without file selection. Returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class FileChooser {
  cancel(): Promise<void>;
}

----------------------------------------

TITLE: Implementing CDPSession.send Method in TypeScript
DESCRIPTION: Abstract method definition for sending commands through Chrome DevTools Protocol. Takes a method name, optional parameters, and command options, returning a promise with the command result. Uses generic types to ensure type safety across protocol commands.

LANGUAGE: typescript
CODE:
class CDPSession {
  abstract send<T extends keyof ProtocolMapping.Commands>(
    method: T,
    params?: ProtocolMapping.Commands[T]['paramsType'][0],
    options?: CommandOptions,
  ): Promise<ProtocolMapping.Commands[T]['returnType']>;
}

----------------------------------------

TITLE: Defining CommandOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for CommandOptions that specifies configuration parameters for command execution. Currently contains a timeout property of type number.

LANGUAGE: typescript
CODE:
export interface CommandOptions {
  timeout: number;
}

----------------------------------------

TITLE: Frame Class Definition in TypeScript
DESCRIPTION: Abstract class definition for Frame that extends EventEmitter with FrameEvents type parameter.

LANGUAGE: typescript
CODE:
export declare abstract class Frame extends EventEmitter<FrameEvents>

----------------------------------------

TITLE: Frame Class Definition in TypeScript
DESCRIPTION: Abstract class definition for Frame that extends EventEmitter with FrameEvents type parameter.

LANGUAGE: typescript
CODE:
export declare abstract class Frame extends EventEmitter<FrameEvents>

----------------------------------------

TITLE: JSHandle Class Method Signature
DESCRIPTION: TypeScript signature for the getProperties method that returns a Promise containing a Map of string keys to JSHandle values.

LANGUAGE: typescript
CODE:
class JSHandle {
  getProperties(): Promise<Map<string, JSHandle>>;
}

----------------------------------------

TITLE: Defining CommandOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for CommandOptions that specifies configuration parameters for command execution. Currently contains a timeout property of type number.

LANGUAGE: typescript
CODE:
export interface CommandOptions {
  timeout: number;
}

----------------------------------------

TITLE: Implementing HTTPResponse.fromCache Method in TypeScript
DESCRIPTION: Abstract method declaration for checking if an HTTP response was served from browser cache. Returns a boolean indicating whether the response came from either disk cache or memory cache.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  abstract fromCache(): boolean;
}

----------------------------------------

TITLE: Defining CookiePartitionKey Interface in TypeScript
DESCRIPTION: This snippet defines the CookiePartitionKey interface, which includes two properties: hasCrossSiteAncestor and sourceOrigin. It represents the structure of a cookie partition key used in Chrome.

LANGUAGE: typescript
CODE:
export interface CookiePartitionKey

----------------------------------------

TITLE: Converting Cookie Partition Keys - TypeScript Function Signature
DESCRIPTION: Function signature for converting cookie partition keys from Puppeteer format to CDP format. Takes a partition key parameter that can be a CookiePartitionKey object, string, or undefined, and returns a Protocol.Network.CookiePartitionKey or undefined.

LANGUAGE: typescript
CODE:
export declare function convertCookiesPartitionKeyFromPuppeteerToCdp(
  partitionKey: CookiePartitionKey | string | undefined,
): Protocol.Network.CookiePartitionKey | undefined;

----------------------------------------

TITLE: Evaluating a String in Page Context with Puppeteer
DESCRIPTION: Demonstrates how to use Page.evaluateHandle with a string argument to evaluate and return a handle to the document object.

LANGUAGE: typescript
CODE:
const aHandle = await page.evaluateHandle('document');

----------------------------------------

TITLE: Coverage Class Declaration in TypeScript
DESCRIPTION: TypeScript class declaration for the Coverage class in Puppeteer.

LANGUAGE: typescript
CODE:
export declare class Coverage

----------------------------------------

TITLE: Defining HTTPRequest.responseForRequest Method in TypeScript
DESCRIPTION: TypeScript class method definition showing the responseForRequest() method of the HTTPRequest class. This method returns the ResponseForRequest object that would be used if the request interception is allowed to proceed (i.e., abort() is not called).

LANGUAGE: typescript
CODE:
class HTTPRequest {
  responseForRequest(): Partial<ResponseForRequest> | null;
}

----------------------------------------

TITLE: Defining VisibilityOption Type in TypeScript
DESCRIPTION: Defines a union type that represents element visibility states used in Puppeteer's element handling methods. The type can be 'hidden', 'visible', or null, where null disables visibility checks.

LANGUAGE: typescript
CODE:
export type VisibilityOption = 'hidden' | 'visible' | null;

----------------------------------------

TITLE: Initializing CSS Coverage in Puppeteer TypeScript
DESCRIPTION: Method signature for starting CSS coverage analysis. Takes optional CSSCoverageOptions parameter which defaults to having resetOnNavigation set to true. Returns a Promise that resolves when coverage tracking begins.

LANGUAGE: typescript
CODE:
class Coverage {
  startCSSCoverage(options?: CSSCoverageOptions): Promise<void>;
}

----------------------------------------

TITLE: Defining isIntersectingViewport Method for ElementHandle in TypeScript
DESCRIPTION: This code snippet defines the isIntersectingViewport method for the ElementHandle class. It checks if an element is visible in the current viewport, with a special case for SVG elements. The method accepts an optional threshold parameter.

LANGUAGE: typescript
CODE:
class ElementHandle {
  isIntersectingViewport(
    this: ElementHandle<Element>,
    options?: {
      threshold?: number;
    },
  ): Promise<boolean>;
}

----------------------------------------

TITLE: Linting Puppeteer Code in Bash
DESCRIPTION: Command to manually check Puppeteer code for style and formatting issues.

LANGUAGE: bash
CODE:
npm run lint

----------------------------------------

TITLE: Defining ElementHandle.$$ Method in TypeScript
DESCRIPTION: TypeScript class definition showing the signature of the ElementHandle.$$ method. The method accepts a selector string and optional query options, returning a Promise that resolves to an array of ElementHandle objects matching the selector.

LANGUAGE: typescript
CODE:
class ElementHandle {
  $$<Selector extends string>(
    selector: Selector,
    options?: QueryOptions,
  ): Promise<Array<ElementHandle<NodeFor<Selector>>>>;
}

----------------------------------------

TITLE: Defining ElementHandle.focus() Method in TypeScript
DESCRIPTION: This code snippet defines the focus() method for the ElementHandle class in Puppeteer. The method calls the focus function on the element and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class ElementHandle {
  focus(): Promise<void>;
}

----------------------------------------

TITLE: Running E2E Tests with Puppeteer
DESCRIPTION: Command to execute E2E tests using Puppeteer in an Angular project.

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Defining ElementHandle.clickablePoint() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the ElementHandle.clickablePoint() method. It returns a Promise resolving to a Point, representing the middle point within an element or a specific offset if provided.

LANGUAGE: typescript
CODE:
class ElementHandle {
  clickablePoint(offset?: Offset): Promise<Point>;
}

----------------------------------------

TITLE: Defining Frame.page() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the page() method in the Frame class. The method returns the Page object associated with the frame.

LANGUAGE: typescript
CODE:
class Frame {
  abstract page(): Page;
}

----------------------------------------

TITLE: Implementing ElementHandle.tap Method in TypeScript - Puppeteer
DESCRIPTION: Method signature for the tap() function in the ElementHandle class. This method returns a Promise that resolves when the tap action is complete. It automatically scrolls the element into view if needed and uses Touchscreen.tap() to simulate the touch interaction at the element's center. Throws an error if the element is detached from DOM.

LANGUAGE: typescript
CODE:
class ElementHandle {
  tap(this: ElementHandle<Element>): Promise<void>;
}

----------------------------------------

TITLE: Initializing CSSCoverage Class in TypeScript
DESCRIPTION: Constructor definition for the CSSCoverage class that takes a CDPSession parameter. The CSSCoverage class is used to track CSS coverage in Puppeteer.

LANGUAGE: typescript
CODE:
class CSSCoverage {
  constructor(client: CDPSession);
}

----------------------------------------

TITLE: Defining Frame.page() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the page() method in the Frame class. The method returns the Page object associated with the frame.

LANGUAGE: typescript
CODE:
class Frame {
  abstract page(): Page;
}

----------------------------------------

TITLE: Running Puppeteer Docker Container
DESCRIPTION: Command to run a Puppeteer script inside a Docker container with necessary system capabilities. Requires SYS_ADMIN capability and init process management.

LANGUAGE: bash
CODE:
docker run -i --init --cap-add=SYS_ADMIN --rm ghcr.io/puppeteer/puppeteer:latest node -e "$(cat path/to/script.js)"

----------------------------------------

TITLE: Defining Frame.parentFrame() Method in TypeScript
DESCRIPTION: This code snippet defines the parentFrame() method in the Frame class. The method returns the parent frame if it exists, or null for detached and main frames.

LANGUAGE: typescript
CODE:
class Frame {
  abstract parentFrame(): Frame | null;
}

----------------------------------------

TITLE: Method Signature Definition in TypeScript
DESCRIPTION: Defines the TypeScript signature for the Page.$$eval() method, showing its generic type parameters and function parameters.

LANGUAGE: typescript
CODE:
class Page {
  $$eval<
    Selector extends string,
    Params extends unknown[],
    Func extends EvaluateFuncWith<
      Array<NodeFor<Selector>>,
      Params
    > = EvaluateFuncWith<Array<NodeFor<Selector>>, Params>,
  >(
    selector: Selector,
    pageFunction: Func | string,
    ...args: Params
  ): Promise<Awaited<ReturnType<Func>>>;
}

----------------------------------------

TITLE: Defining KnownDevices Variable in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the KnownDevices variable as a readonly record of device names mapped to Device objects. It includes a wide range of mobile and tablet devices with both portrait and landscape orientations.

LANGUAGE: typescript
CODE:
KnownDevices: Readonly<
  Record<
    | 'Blackberry PlayBook'
    | 'Blackberry PlayBook landscape'
    | 'BlackBerry Z30'
    | 'BlackBerry Z30 landscape'
    | 'Galaxy Note 3'
    | 'Galaxy Note 3 landscape'
    | 'Galaxy Note II'
    | 'Galaxy Note II landscape'
    | 'Galaxy S III'
    | 'Galaxy S III landscape'
    | 'Galaxy S5'
    | 'Galaxy S5 landscape'
    | 'Galaxy S8'
    | 'Galaxy S8 landscape'
    | 'Galaxy S9+'
    | 'Galaxy S9+ landscape'
    | 'Galaxy Tab S4'
    | 'Galaxy Tab S4 landscape'
    | 'iPad'
    | 'iPad landscape'
    | 'iPad (gen 6)'
    | 'iPad (gen 6) landscape'
    | 'iPad (gen 7)'
    | 'iPad (gen 7) landscape'
    | 'iPad Mini'
    | 'iPad Mini landscape'
    | 'iPad Pro'
    | 'iPad Pro landscape'
    | 'iPad Pro 11'
    | 'iPad Pro 11 landscape'
    | 'iPhone 4'
    | 'iPhone 4 landscape'
    | 'iPhone 5'
    | 'iPhone 5 landscape'
    | 'iPhone 6'
    | 'iPhone 6 landscape'
    | 'iPhone 6 Plus'
    | 'iPhone 6 Plus landscape'
    | 'iPhone 7'
    | 'iPhone 7 landscape'
    | 'iPhone 7 Plus'
    | 'iPhone 7 Plus landscape'
    | 'iPhone 8'
    | 'iPhone 8 landscape'
    | 'iPhone 8 Plus'
    | 'iPhone 8 Plus landscape'
    | 'iPhone SE'
    | 'iPhone SE landscape'
    | 'iPhone X'
    | 'iPhone X landscape'
    | 'iPhone XR'
    | 'iPhone XR landscape'
    | 'iPhone 11'
    | 'iPhone 11 landscape'
    | 'iPhone 11 Pro'
    | 'iPhone 11 Pro landscape'
    | 'iPhone 11 Pro Max'
    | 'iPhone 11 Pro Max landscape'
    | 'iPhone 12'
    | 'iPhone 12 landscape'
    | 'iPhone 12 Pro'
    | 'iPhone 12 Pro landscape'
    | 'iPhone 12 Pro Max'
    | 'iPhone 12 Pro Max landscape'
    | 'iPhone 12 Mini'
    | 'iPhone 12 Mini landscape'
    | 'iPhone 13'
    | 'iPhone 13 landscape'
    | 'iPhone 13 Pro'
    | 'iPhone 13 Pro landscape'
    | 'iPhone 13 Pro Max'
    | 'iPhone 13 Pro Max landscape'
    | 'iPhone 13 Mini'
    | 'iPhone 13 Mini landscape'
    | 'iPhone 14'
    | 'iPhone 14 landscape'
    | 'iPhone 14 Plus'
    | 'iPhone 14 Plus landscape'
    | 'iPhone 14 Pro'
    | 'iPhone 14 Pro landscape'
    | 'iPhone 14 Pro Max'
    | 'iPhone 14 Pro Max landscape'
    | 'iPhone 15'
    | 'iPhone 15 landscape'
    | 'iPhone 15 Plus'
    | 'iPhone 15 Plus landscape'
    | 'iPhone 15 Pro'
    | 'iPhone 15 Pro landscape'
    | 'iPhone 15 Pro Max'
    | 'iPhone 15 Pro Max landscape'
    | 'JioPhone 2'
    | 'JioPhone 2 landscape'
    | 'Kindle Fire HDX'
    | 'Kindle Fire HDX landscape'
    | 'LG Optimus L70'
    | 'LG Optimus L70 landscape'
    | 'Microsoft Lumia 550'
    | 'Microsoft Lumia 950'
    | 'Microsoft Lumia 950 landscape'
    | 'Nexus 10'
    | 'Nexus 10 landscape'
    | 'Nexus 4'
    | 'Nexus 4 landscape'
    | 'Nexus 5'
    | 'Nexus 5 landscape'
    | 'Nexus 5X'
    | 'Nexus 5X landscape'
    | 'Nexus 6'
    | 'Nexus 6 landscape'
    | 'Nexus 6P'
    | 'Nexus 6P landscape'
    | 'Nexus 7'
    | 'Nexus 7 landscape'
    | 'Nokia Lumia 520'
    | 'Nokia Lumia 520 landscape'
    | 'Nokia N9'
    | 'Nokia N9 landscape'
    | 'Pixel 2'
    | 'Pixel 2 landscape'
    | 'Pixel 2 XL'
    | 'Pixel 2 XL landscape'
    | 'Pixel 3'
    | 'Pixel 3 landscape'
    | 'Pixel 4'
    | 'Pixel 4 landscape'
    | 'Pixel 4a (5G)'
    | 'Pixel 4a (5G) landscape'
    | 'Pixel 5'
    | 'Pixel 5 landscape'
    | 'Moto G4'
    | 'Moto G4 landscape',
    Device
  >
>;

----------------------------------------

TITLE: Defining FrameAddScriptTagOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for configuring script tag injection in Puppeteer frames. Provides options for specifying script content directly, loading from file path, URL, setting script type and ID.

LANGUAGE: typescript
CODE:
export interface FrameAddScriptTagOptions {
  content?: string;    // JavaScript to be injected into the frame
  id?: string;         // Sets the id of the script
  path?: string;       // Path to a JavaScript file to be injected
  type?: string;       // Sets the type of the script (use 'module' for ES2015)
  url?: string;        // URL of the script to be added
}

----------------------------------------

TITLE: Using Page.evaluate() with a String Argument
DESCRIPTION: This example shows how to pass a string instead of a function to Page.evaluate(). However, using functions is recommended for better debugging and TypeScript support.

LANGUAGE: typescript
CODE:
const aHandle = await page.evaluate('1 + 2');

----------------------------------------

TITLE: Declaring HTTPRequest.headers() Method in TypeScript
DESCRIPTION: This snippet defines the headers() method in the HTTPRequest class. It returns a Record<string, string> containing HTTP headers associated with the request. All header names are lowercase.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract headers(): Record<string, string>;
}

----------------------------------------

TITLE: Using Page.evaluate() with a String Argument
DESCRIPTION: This example shows how to pass a string instead of a function to Page.evaluate(). However, using functions is recommended for better debugging and TypeScript support.

LANGUAGE: typescript
CODE:
const aHandle = await page.evaluate('1 + 2');

----------------------------------------

TITLE: Declaring HTTPRequest.headers() Method in TypeScript
DESCRIPTION: This snippet defines the headers() method in the HTTPRequest class. It returns a Record<string, string> containing HTTP headers associated with the request. All header names are lowercase.

LANGUAGE: typescript
CODE:
class HTTPRequest {
  abstract headers(): Record<string, string>;
}

----------------------------------------

TITLE: Defining CSSCoverage Class Signature in TypeScript
DESCRIPTION: This snippet defines the signature of the CSSCoverage class in TypeScript. It shows that the class is exported and declared.

LANGUAGE: typescript
CODE:
export declare class CSSCoverage

----------------------------------------

TITLE: Defining CSSCoverage Class Signature in TypeScript
DESCRIPTION: This snippet defines the signature of the CSSCoverage class in TypeScript. It shows that the class is exported and declared.

LANGUAGE: typescript
CODE:
export declare class CSSCoverage

----------------------------------------

TITLE: Using Page.evaluate() with a String Expression in TypeScript
DESCRIPTION: This example shows how to use Page.evaluate() with a string expression instead of a function. However, using functions is recommended for better debugging and TypeScript support.

LANGUAGE: typescript
CODE:
const aHandle = await page.evaluate('1 + 2');

----------------------------------------

TITLE: Defining HTTPResponse.securityDetails() Method in TypeScript
DESCRIPTION: This code snippet defines the securityDetails() method for the HTTPResponse class in Puppeteer. The method returns SecurityDetails if the response was received over a secure connection, or null otherwise.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  abstract securityDetails(): SecurityDetails | null;
}

----------------------------------------

TITLE: Defining HTTPResponse.statusText() Method in TypeScript
DESCRIPTION: This code snippet defines the statusText() method within the HTTPResponse class. The method returns a string representing the status text of the HTTP response, which is typically 'OK' for successful requests.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  abstract statusText(): string;
}

----------------------------------------

TITLE: Defining HTTPResponse.statusText() Method in TypeScript
DESCRIPTION: This code snippet defines the statusText() method within the HTTPResponse class. The method returns a string representing the status text of the HTTP response, which is typically 'OK' for successful requests.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  abstract statusText(): string;
}

----------------------------------------

TITLE: Defining setTimeout() Method for Locator Class in TypeScript
DESCRIPTION: This code snippet defines the setTimeout() method for the Locator class in Puppeteer. It creates a new locator instance by cloning the current one and setting a total timeout for locator actions. Passing 0 disables the timeout.

LANGUAGE: typescript
CODE:
class Locator {
  setTimeout(timeout: number): Locator<T>;
}

----------------------------------------

TITLE: Defining Keyboard.down() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Keyboard.down() method. It takes a key input and optional key down options, and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Keyboard {
  abstract down(
    key: KeyInput,
    options?: Readonly<KeyDownOptions>,
  ): Promise<void>;
}

----------------------------------------

TITLE: Formatting Puppeteer Code in Bash
DESCRIPTION: Command to automatically fix style and formatting issues in Puppeteer code using ESLint and Prettier.

LANGUAGE: bash
CODE:
npm run format

----------------------------------------

TITLE: Implementing Locator Race Method in TypeScript
DESCRIPTION: Static method definition for racing between multiple locators in Puppeteer. The method takes an array of locators and returns a new Locator that resolves to the first successful match while ensuring only one element receives the action.

LANGUAGE: typescript
CODE:
class Locator {
  static race<Locators extends readonly unknown[] | []>(
    locators: Locators,
  ): Locator<AwaitedLocator<Locators[number]>>;
}

----------------------------------------

TITLE: Version-Specific CLI Usage
DESCRIPTION: Examples of specifying particular versions when using the CLI with npx.

LANGUAGE: bash
CODE:
# Always install and use the latest version from the registry.
npx @puppeteer/browsers@latest --help
# Always use a specifc version.
npx @puppeteer/browsers@2.4.1 --help
# Always install the latest version and automatically confirm the installation.
npx --yes @puppeteer/browsers@latest --help

----------------------------------------

TITLE: Defining setVisibility() Method for Locator Class in TypeScript
DESCRIPTION: This code snippet defines the setVisibility() method for the Locator class in Puppeteer. It creates a new locator instance by cloning the current one with the visibility property changed to the specified value.

LANGUAGE: typescript
CODE:
class Locator {
  setVisibility<NodeType extends Node>(
    this: Locator<NodeType>,
    visibility: VisibilityOption,
  ): Locator<NodeType>;
}

----------------------------------------

TITLE: Defining SessionAttached Event Type in TypeScript
DESCRIPTION: Defines the 'sessionattached' event type constant used in Puppeteer's CDP session event handling system. This type definition ensures type safety when working with CDP session event listeners.

LANGUAGE: typescript
CODE:
SessionAttached: 'sessionattached';

----------------------------------------

TITLE: Customizing Puppeteer Cache Directory
DESCRIPTION: Configuration to change the default browser cache location from ~/.cache/puppeteer to a project-specific directory. Applicable for Puppeteer v19.0.0 and later.

LANGUAGE: javascript
CODE:
const {join} = require('path');

/**
 * @type {import("puppeteer").Configuration}
 */
module.exports = {
  // Changes the cache location for Puppeteer.
  cacheDirectory: join(__dirname, '.cache', 'puppeteer'),
};

----------------------------------------

TITLE: Defining MouseClickOptions Interface in TypeScript
DESCRIPTION: TypeScript interface definition for MouseClickOptions that extends MouseOptions. It specifies configuration options for mouse click operations including click count and delay between press and release.

LANGUAGE: typescript
CODE:
export interface MouseClickOptions extends MouseOptions

----------------------------------------

TITLE: Defining Page.content() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the content() method for the Page class in Puppeteer. The method returns a Promise that resolves to a string containing the full HTML contents of the page, including the DOCTYPE.

LANGUAGE: typescript
CODE:
class Page {
  content(): Promise<string>;
}

----------------------------------------

TITLE: Defining Page.content() Method in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the content() method for the Page class in Puppeteer. The method returns a Promise that resolves to a string containing the full HTML contents of the page, including the DOCTYPE.

LANGUAGE: typescript
CODE:
class Page {
  content(): Promise<string>;
}

----------------------------------------

TITLE: Checking Service Worker Response in Puppeteer TypeScript
DESCRIPTION: Abstract method definition that determines whether an HTTP response was served by a service worker. Returns a boolean value indicating if the response originated from a service worker.

LANGUAGE: typescript
CODE:
class HTTPResponse {
  abstract fromServiceWorker(): boolean;
}

----------------------------------------

TITLE: Defining Page.deleteCookie Method in TypeScript
DESCRIPTION: Abstract class definition for the Page.deleteCookie method that deletes specified cookies. The method accepts an array of DeleteCookiesRequest objects and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Page {
  abstract deleteCookie(...cookies: DeleteCookiesRequest[]): Promise<void>;
}

----------------------------------------

TITLE: Defining Page.focus() Method in TypeScript
DESCRIPTION: This snippet shows the TypeScript signature for the Page.focus() method. It takes a selector string as a parameter and returns a Promise that resolves to void.

LANGUAGE: typescript
CODE:
class Page {
  focus(selector: string): Promise<void>;
}

----------------------------------------

TITLE: Defining Page.goForward() Method in TypeScript for Puppeteer
DESCRIPTION: This snippet shows the TypeScript signature for the Page.goForward() method in the Page class of Puppeteer. It takes an optional WaitForOptions parameter and returns a Promise that resolves to an HTTPResponse or null.

LANGUAGE: typescript
CODE:
class Page {
  abstract goForward(options?: WaitForOptions): Promise<HTTPResponse | null>;
}

----------------------------------------

TITLE: Defining Page.goForward() Method in TypeScript for Puppeteer
DESCRIPTION: This snippet shows the TypeScript signature for the Page.goForward() method in the Page class of Puppeteer. It takes an optional WaitForOptions parameter and returns a Promise that resolves to an HTTPResponse or null.

LANGUAGE: typescript
CODE:
class Page {
  abstract goForward(options?: WaitForOptions): Promise<HTTPResponse | null>;
}

----------------------------------------

TITLE: Defining Page.target() Method in TypeScript
DESCRIPTION: This code snippet defines the signature of the Page.target() method in the Page class. The method returns a Target object and is marked as abstract, indicating it should be implemented by subclasses.

LANGUAGE: typescript
CODE:
class Page {
  abstract target(): Target;
}

----------------------------------------

TITLE: Defining SupportedWebDriverCapabilities Interface in TypeScript
DESCRIPTION: This snippet defines the SupportedWebDriverCapabilities interface, which includes optional properties for alwaysMatch and firstMatch capabilities. These properties use the SupportedWebDriverCapability type.

LANGUAGE: typescript
CODE:
export interface SupportedWebDriverCapabilities {
  alwaysMatch?: SupportedWebDriverCapability;
  firstMatch?: SupportedWebDriverCapability[];
}

----------------------------------------

TITLE: Page.waitForFileChooser Method Signature
DESCRIPTION: TypeScript class definition showing the method signature for waitForFileChooser. The method accepts optional WaitTimeoutOptions and returns a Promise resolving to a FileChooser object.

LANGUAGE: typescript
CODE:
class Page {
  abstract waitForFileChooser(
    options?: WaitTimeoutOptions,
  ): Promise<FileChooser>;
}

----------------------------------------

TITLE: Defining PDFMargin Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for PDF margin configuration. Provides optional properties for specifying margins on all sides of a PDF document, supporting both string and numeric values for flexible margin definitions.

LANGUAGE: typescript
CODE:
export interface PDFMargin

----------------------------------------

TITLE: Defining PDFMargin Interface in TypeScript
DESCRIPTION: TypeScript interface declaration for PDF margin configuration. Provides optional properties for specifying margins on all sides of a PDF document, supporting both string and numeric values for flexible margin definitions.

LANGUAGE: typescript
CODE:
export interface PDFMargin

----------------------------------------

TITLE: Building Static Website Content
DESCRIPTION: Command to generate static website content in the build directory for hosting.

LANGUAGE: bash
CODE:
$ npm run build

----------------------------------------

TITLE: Defining SupportedBrowser Type in TypeScript for Puppeteer
DESCRIPTION: This code snippet defines the SupportedBrowser type as a union of string literals 'chrome' and 'firefox', representing the browsers supported by Puppeteer. This type can be used throughout the Puppeteer codebase to ensure type safety when referring to supported browsers.

LANGUAGE: typescript
CODE:
export type SupportedBrowser = 'chrome' | 'firefox';

----------------------------------------

TITLE: Generating Single E2E Test File with Puppeteer Angular Schematic
DESCRIPTION: Command to create a single E2E test file using the Puppeteer Angular Schematic.

LANGUAGE: bash
CODE:
ng generate @puppeteer/ng-schematics:e2e "<TestName>"

----------------------------------------

TITLE: Defining WebWorker.evaluateHandle Method in TypeScript
DESCRIPTION: Type definition for the evaluateHandle method that executes functions in a web worker context and returns a handle to the result. The method accepts a function or string to evaluate along with optional parameters and returns a Promise resolving to a HandleFor type containing the function's return value.

LANGUAGE: typescript
CODE:
class WebWorker {
  evaluateHandle<
    Params extends unknown[],
    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,
  >(
    func: Func | string,
    ...args: Params
  ): Promise<HandleFor<Awaited<ReturnType<Func>>>>;
}

----------------------------------------

TITLE: Configuring Custom Port for E2E Tests in Angular JSON
DESCRIPTION: JSON configuration to specify a custom port for running E2E tests to avoid conflicts with the dev server.

LANGUAGE: json
CODE:
{
  "e2e": {
    "builder": "@puppeteer/ng-schematics:puppeteer",
    "options": {
      "commands": [...],
      "devServerTarget": "sandbox:serve",
      "testRunner": "<TestRunner>",
      "port": 8080
    },
    ...
}

----------------------------------------

TITLE: Defining getVersionComparator Function in TypeScript for Puppeteer
DESCRIPTION: This function returns a version comparator for the specified browser. It takes a Browser parameter and returns a function that compares two version strings. The returned function can be used to sort browser versions.

LANGUAGE: typescript
CODE:
export declare function getVersionComparator(
  browser: Browser,
): (a: string, b: string) => number;

----------------------------------------

TITLE: Running Node.js with Debugging
DESCRIPTION: Command to run Node.js with debugging enabled for server-side code inspection.

LANGUAGE: bash
CODE:
node --inspect-brk path/to/script.js

----------------------------------------

TITLE: Debug Protocol Traffic Commands
DESCRIPTION: Various commands for debugging DevTools protocol traffic using environment variables.

LANGUAGE: bash
CODE:
# Basic verbose logging
env DEBUG="puppeteer:*" node script.js

# Prevent truncating of long messages
env DEBUG="puppeteer:*" env DEBUG_MAX_STRING_LENGTH=null node script.js

# Protocol traffic can be rather noisy. This example filters out all Network domain messages
env DEBUG="puppeteer:*" env DEBUG_COLORS=true node script.js 2>&1 | grep -v '"Network'

# Filter out all protocol messages but keep all other logging
env DEBUG="puppeteer:*,-puppeteer:protocol:*" node script.js

----------------------------------------

TITLE: Listing Firefox System Requirements Link in Markdown
DESCRIPTION: This snippet provides a link to Firefox system requirements and mentions additional utilities required for Linux using Markdown syntax.

LANGUAGE: markdown
CODE:
- https://www.mozilla.org/en-US/firefox/system-requirements/
- The `xz` or `bzip2` utilities are required to unpack Firefox versions for Linux.

----------------------------------------

TITLE: FileChooser Cancel Method Change
DESCRIPTION: Example of synchronous FileChooser.cancel() usage changed in v13.6.0

LANGUAGE: JavaScript
CODE:
const fileChooser = await page.waitForFileChooser();
fileChooser.cancel(); // Now synchronous

----------------------------------------

TITLE: Deploying Website with SSH
DESCRIPTION: Command to deploy the website using SSH authentication.

LANGUAGE: bash
CODE:
$ USE_SSH=true npm run deploy