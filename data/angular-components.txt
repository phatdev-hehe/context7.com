TITLE: Creating a Basic Component Harness
DESCRIPTION: Example of creating a minimal harness for a popup component by extending ComponentHarness and implementing the hostSelector property.

LANGUAGE: TypeScript
CODE:
class MyPopupHarness extends ComponentHarness {
  static hostSelector = 'my-popup';
}

----------------------------------------

TITLE: Testing Issue Report Selector Without Harnesses
DESCRIPTION: Traditional approach to testing a component without using component harnesses, showing manual DOM manipulation and change detection.

LANGUAGE: typescript
CODE:
describe('issue-report-selector', () => {
  let fixture: ComponentFixture<IssueReportSelector>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [IssueReportSelectorModule],
      declarations: [IssueReportSelector],
    }).compileComponents();

    fixture = TestBed.createComponent(IssueReportSelector);
    fixture.detectChanges();
  });

  it('should switch to bug report template', async () => {
    expect(fixture.debugElement.query('bug-report-form')).toBeNull();
    const selectTrigger = fixture.debugElement.query(By.css('.mat-select-trigger'));
    selectTrigger.triggerEventHandler('click', {});
    fixture.detectChanges();
    await fixture.whenStable();
    const options = document.querySelectorAll('.mat-select-panel mat-option');
    options[1].click(); // Click the second option, "Bug".
    fixture.detectChanges();
    await fixture.whenStable();
    expect(fixture.debugElement.query('bug-report-form')).not.toBeNull();
  });
});

----------------------------------------

TITLE: Loading Child Harnesses with getChildLoader
DESCRIPTION: Shows how to load harnesses for components within a specific section of the DOM using getChildLoader.

LANGUAGE: typescript
CODE:
it('should work', async () => {
  const footerLoader = await loader.getChildLoader('.footer');
  const footerButton = await footerLoader.getHarness(MatButtonHarness);
});

----------------------------------------

TITLE: Implementing Linear Stepper with Single Form in Angular
DESCRIPTION: Demonstrates how to create a linear stepper using a single form in Angular Material. The example shows form group and form array usage, along with step control and navigation buttons.

LANGUAGE: html
CODE:
<form [formGroup]="formGroup">
  <mat-stepper formArrayName="formArray" linear>
    <mat-step formGroupName="0" [stepControl]="formArray.get([0])">
      ...
      <div>
        <button matButton matStepperNext type="button">Next</button>
      </div>
    </mat-step>
    <mat-step formGroupName="1" [stepControl]="formArray.get([1])">
      ...
      <div>
        <button matButton matStepperPrevious type="button">Back</button>
        <button matButton matStepperNext type="button">Next</button>
      </div>
    </mat-step>
    ...
  </mat-stepper>
</form>

----------------------------------------

TITLE: Implementing Flat Tree Structure in Angular Material
DESCRIPTION: Basic structure for implementing a flat tree where nodes are rendered as siblings in sequence. This pattern is ideal for easier styling and scrolling implementations.

LANGUAGE: html
CODE:
<mat-tree>
  <mat-tree-node> parent node </mat-tree-node>
  <mat-tree-node> -- child node1 </mat-tree-node>
  <mat-tree-node> -- child node2 </mat-tree-node>
</mat-tree>

----------------------------------------

TITLE: Implementing Linear Stepper with Multiple Forms in Angular
DESCRIPTION: Shows how to create a linear stepper using separate forms for each step in Angular Material. This approach uses vertical orientation and demonstrates form group usage for individual steps.

LANGUAGE: html
CODE:
<mat-stepper orientation="vertical" linear>
  <mat-step [stepControl]="formGroup1">
    <form [formGroup]="formGroup1">
      ...
    </form>
  </mat-step>
  <mat-step [stepControl]="formGroup2">
    <form [formGroup]="formGroup2">
      ...
    </form>
  </mat-step>
</mat-stepper>

----------------------------------------

TITLE: Setting Default Floating Label Behavior in Angular Material
DESCRIPTION: This code snippet shows how to configure the default floating label behavior for all form fields in an Angular application. It sets the floatLabel option to 'always' using a global provider.

LANGUAGE: typescript
CODE:
@NgModule({
  providers: [
    {provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: {floatLabel: 'always'}}
  ]
})

----------------------------------------

TITLE: Implementing Focus Trap in HTML
DESCRIPTION: Example of using cdkTrapFocus directive to contain keyboard focus within a dialog element.

LANGUAGE: html
CODE:
<div class="my-inner-dialog-content" cdkTrapFocus>
  <!-- Tab and Shift + Tab will not leave this element. -->
</div>

----------------------------------------

TITLE: Connecting Drop Lists in Angular CDK Drag and Drop
DESCRIPTION: Demonstrates how to connect multiple cdkDropList instances using the cdkDropListConnectedTo property or by referencing the id of another drop container.

LANGUAGE: HTML
CODE:
<!-- This is valid -->
<div cdkDropList #listOne="cdkDropList" [cdkDropListConnectedTo]="[listTwo]"></div>
<div cdkDropList #listTwo="cdkDropList" [cdkDropListConnectedTo]="[listOne]"></div>

<!-- This is valid as well -->
<div cdkDropList id="list-one" [cdkDropListConnectedTo]="['list-two']"></div>
<div cdkDropList id="list-two" [cdkDropListConnectedTo]="['list-one']"></div>

----------------------------------------

TITLE: Implementing a Dialog Component in Angular
DESCRIPTION: Shows how to create a dialog component that can close itself and return a result.

LANGUAGE: typescript
CODE:
@Component({/* ... */})
export class YourDialog {
  constructor(public dialogRef: MatDialogRef<YourDialog>) { }

  closeDialog() {
    this.dialogRef.close('Pizza!');
  }
}

----------------------------------------

TITLE: Configuring Default Form Field Appearance in Angular
DESCRIPTION: This code snippet demonstrates how to set a default appearance for all form fields in an Angular application using a global provider. It configures the default appearance to 'outline'.

LANGUAGE: typescript
CODE:
@NgModule({
  providers: [
    {provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: {appearance: 'outline'}}
  ]
})

----------------------------------------

TITLE: Configuring Global Error State Matcher in Angular
DESCRIPTION: Example showing how to set up a global ErrorStateMatcher provider in an Angular module to show input errors when the input is dirty and invalid. This configuration applies to all inputs in the application.

LANGUAGE: typescript
CODE:
@NgModule({
  providers: [
    {provide: ErrorStateMatcher, useClass: ShowOnDirtyErrorStateMatcher}
  ]
})

----------------------------------------

TITLE: Toggling Angular Material Menu Programmatically with TypeScript
DESCRIPTION: Demonstrates how to programmatically open a menu using the MatMenuTrigger in an Angular component. This snippet shows the use of ViewChild to access the trigger and call the openMenu() method.

LANGUAGE: typescript
CODE:
class MyComponent {
  @ViewChild(MatMenuTrigger) trigger: MatMenuTrigger;

  someMethod() {
    this.trigger.openMenu();
  }
}

----------------------------------------

TITLE: Implementing Virtual Scrolling with cdkVirtualFor in Angular
DESCRIPTION: Demonstrates basic usage of cdkVirtualFor directive within a cdk-virtual-scroll-viewport to efficiently render large lists of items. The itemSize property must be set on the viewport.

LANGUAGE: html
CODE:
<!-- example(cdk-virtual-scroll-overview) -->

----------------------------------------

TITLE: Creating a Static Chip Set as an Unordered List in Angular Material
DESCRIPTION: Demonstrates how to create a static chip set that mimics an unordered list using mat-chip-set and mat-chip elements with appropriate ARIA roles.

LANGUAGE: html
CODE:
<mat-chip-set role="list">
  <mat-chip role="listitem"> Sugar </mat-chip>
  <mat-chip role="listitem"> Spice </mat-chip>
  <mat-chip role="listitem"> Everything Nice </mat-chip>
</mat-chip-set>

----------------------------------------

TITLE: Opening a Dialog with MatDialog in Angular
DESCRIPTION: Demonstrates how to open a dialog using the MatDialog service and handle the dialog result.

LANGUAGE: typescript
CODE:
let dialogRef = dialog.open(UserProfileComponent, {
  height: '400px',
  width: '600px',
});

dialogRef.afterClosed().subscribe(result => {
  console.log(`Dialog result: ${result}`); // Pizza!
});

dialogRef.close('Pizza!');

----------------------------------------

TITLE: Binding Accessibility Labels in Angular Material Slide Toggle
DESCRIPTION: Demonstrates how to bind dynamic accessibility labels to a mat-slide-toggle component using Angular's property binding syntax. This ensures proper accessibility for users of assistive technologies when the label text is determined dynamically.

LANGUAGE: html
CODE:
<mat-slide-toggle [aria-label]="isSubscribedToEmailsMessage">
</mat-slide-toggle>

----------------------------------------

TITLE: Opening and Managing Dialog References
DESCRIPTION: Demonstrates opening a dialog with configuration options and handling dialog references for managing state and events.

LANGUAGE: typescript
CODE:
const dialogRef = dialog.open(UserProfileComponent, {
  height: '400px',
  width: '600px',
  panelClass: 'my-dialog',
});

LANGUAGE: typescript
CODE:
dialogRef.closed.subscribe(result => {
  console.log(`Dialog result: ${result}`); // Pizza!
});

dialogRef.close('Pizza!');

LANGUAGE: typescript
CODE:
@Component({/* ... */})
export class YourDialog {
  constructor(public dialogRef: DialogRef<string>) {}

  closeDialog() {
    this.dialogRef.close('Pizza!');
  }
}

----------------------------------------

TITLE: Initializing Basic mat-table in HTML
DESCRIPTION: Shows how to set up a basic mat-table component in an Angular template, including data binding and column definitions.

LANGUAGE: html
CODE:
<table mat-table [dataSource]="myDataArray">
  ...
</table>

----------------------------------------

TITLE: Using Theme Variables in Custom Components with Angular Material
DESCRIPTION: This example shows how to use CSS variables defined by the Angular Material theme in custom components, applying themed colors and typography to create consistent styling.

LANGUAGE: scss
CODE:
:host {
  background: var(--mat-sys-primary-container);
  color: var(--mat-sys-on-primary-container);
  border: 1px solid var(--mat-sys-outline-variant);
  font: var(--mat-sys-body-large);
}

----------------------------------------

TITLE: Setting Global Snackbar Configuration in Angular
DESCRIPTION: Example of providing global default options for snackbar using dependency injection

LANGUAGE: typescript
CODE:
@NgModule({
  providers: [
    {provide: MAT_SNACK_BAR_DEFAULT_OPTIONS, useValue: {duration: 2500}}
  ]
})

----------------------------------------

TITLE: Testing Component Interaction with Button Harness
DESCRIPTION: Example of using MatButtonHarness to test button interactions and component state changes.

LANGUAGE: typescript
CODE:
it('should mark confirmed when ok button clicked', async () => {
  const okButton = await loader.getHarness(MatButtonHarness.with({selector: '.confirm'});
  expect(fixture.componentInstance.confirmed).toBe(false);
  expect(await okButton.isDisabled()).toBe(false);
  await okButton.click();
  expect(fixture.componentInstance.confirmed).toBe(true);
});

----------------------------------------

TITLE: Creating Basic Sidenav Layout in Angular
DESCRIPTION: Demonstrates how to create a basic sidenav layout with a left-positioned sidenav and explicit content using Angular Material components.

LANGUAGE: html
CODE:
<mat-sidenav-container>
  <mat-sidenav>Start</mat-sidenav>
  <mat-sidenav-content>Main</mat-sidenav-content>
</mat-sidenav-container>

----------------------------------------

TITLE: Implementing Custom Telephone Input Component in Angular
DESCRIPTION: This snippet defines a custom MyTelInput component that segments a US telephone number into three parts. It uses Angular's FormBuilder to create a form group for the input fields.

LANGUAGE: typescript
CODE:
class MyTel {
  constructor(public area: string, public exchange: string, public subscriber: string) {}
}

@Component({
  selector: 'example-tel-input',
  template: `
    <div role="group" [formGroup]="parts">
      <input class="area" formControlName="area" maxlength="3">
      <span>&ndash;</span>
      <input class="exchange" formControlName="exchange" maxlength="3">
      <span>&ndash;</span>
      <input class="subscriber" formControlName="subscriber" maxlength="4">
    </div>
  `,
  styles: [`
    div {
      display: flex;
    }
    input {
      border: none;
      background: none;
      padding: 0;
      outline: none;
      font: inherit;
      text-align: center;
      color: currentColor;
    }
  `],
})
export class MyTelInput {
  parts: FormGroup;

  @Input()
  get value(): MyTel | null {
    let n = this.parts.value;
    if (n.area.length == 3 && n.exchange.length == 3 && n.subscriber.length == 4) {
      return new MyTel(n.area, n.exchange, n.subscriber);
    }
    return null;
  }
  set value(tel: MyTel | null) {
    tel = tel || new MyTel('', '', '');
    this.parts.setValue({area: tel.area, exchange: tel.exchange, subscriber: tel.subscriber});
  }

  constructor(fb: FormBuilder) {
    this.parts =  fb.group({
      'area': '',
      'exchange': '',
      'subscriber': '',
    });
  }
}

----------------------------------------

TITLE: Implementing Nested Tree Structure in Angular CDK
DESCRIPTION: Shows how to create a nested tree structure where child nodes are placed inside their parent nodes using node outlets. This approach is better for representing visual hierarchies.

LANGUAGE: html
CODE:
<cdk-tree>
  <cdk-nested-tree-node>
    parent node
    <cdk-nested-tree-node> -- child node1 </cdk-nested-tree-node>
    <cdk-nested-tree-node> -- child node2 </cdk-nested-tree-node>
  </cdk-nested-tree-node>
</cdk-tree>

----------------------------------------

TITLE: Creating Tab Navigation Bar in Angular Material
DESCRIPTION: Shows how to implement tab-based navigation using mat-tab-nav-bar for routing between views.

LANGUAGE: html
CODE:
<nav mat-tab-nav-bar>\n  <a mat-tab-link\n     *ngFor=\"let link of links\"\n     [active]=\"activeLink == link\"\n     (click)=\"activeLink = link\">\n    {{link}}\n  </a>\n</nav>

----------------------------------------

TITLE: Supporting Light and Dark Mode in Angular Material Theme
DESCRIPTION: This example shows how to set up an Angular Material theme that supports both light and dark modes based on the user's system preferences, using the color-scheme CSS property.

LANGUAGE: scss
CODE:
@use '@angular/material' as mat;

html {
  color-scheme: light dark;
  @include mat.theme((
    color: mat.$violet-palette,
    typography: Roboto,
    density: 0
  ));
}

----------------------------------------

TITLE: Sharing Data with Custom Snackbar Component in Angular
DESCRIPTION: Demonstrates how to pass data to a custom snackbar component and access it using dependency injection

LANGUAGE: typescript
CODE:
snackBar.openFromComponent(MessageArchivedComponent, {
  data: 'some data'
});

----------------------------------------

TITLE: Configuring Snackbar Duration in Angular
DESCRIPTION: Example of opening a snackbar with a custom duration using configuration object

LANGUAGE: typescript
CODE:
snackBar.open('Message archived', 'Undo', {
  duration: 3000
});

----------------------------------------

TITLE: Applying Basic Theme with Violet Palette in Angular Material
DESCRIPTION: This snippet demonstrates how to create a basic theme using the violet color palette, Roboto font, and standard density for Angular Material components. It applies the theme to the entire application and sets up light/dark mode support.

LANGUAGE: scss
CODE:
@use '@angular/material' as mat;

html {
  color-scheme: light dark;
  @include mat.theme((
    color: mat.$violet-palette,
    typography: Roboto,
    density: 0
  ));
}

----------------------------------------

TITLE: Implementing Basic Table Sorting in Angular Material
DESCRIPTION: Basic example showing how to add sorting functionality to table headers using matSort and mat-sort-header directives. The headers will emit matSortChange events when users trigger sorting through mouse clicks or keyboard actions.

LANGUAGE: html
CODE:
<table matSort (matSortChange)="sortData($event)">
  <tr>
    <th mat-sort-header="id">ID</th>
    <th mat-sort-header="name">Name</th>
  </tr>
</table>

----------------------------------------

TITLE: Implementing Window-Based Scrolling for Virtual Viewport in Angular
DESCRIPTION: Demonstrates how to use the window as the scrolling element for a cdk-virtual-scroll-viewport, which can improve mobile user experience.

LANGUAGE: html
CODE:
<!-- example(cdk-virtual-scroll-window-scrolling) -->

----------------------------------------

TITLE: Implementing A11y Styling in SCSS
DESCRIPTION: Examples of using a11y Sass mixins for visually hidden elements and high contrast mode.

LANGUAGE: scss
CODE:
@use '@angular/cdk';

@include cdk.a11y-visually-hidden();

LANGUAGE: scss
CODE:
@use '@angular/cdk';

button {
  @include cdk.high-contrast {
    outline: solid 1px;
  }
}

----------------------------------------

TITLE: Adding Delay to Tooltip in Angular Material
DESCRIPTION: This snippet demonstrates how to add show and hide delays to the tooltip using matTooltipShowDelay and matTooltipHideDelay inputs.

LANGUAGE: html
CODE:
<!-- example(tooltip-delay) -->

----------------------------------------

TITLE: Creating Sidenav Layout with Multiple Sidenavs in Angular
DESCRIPTION: Shows how to create a sidenav layout with both left and right sidenavs, along with implicit content, using Angular Material components.

LANGUAGE: html
CODE:
<mat-sidenav-container>
  <mat-sidenav>Start</mat-sidenav>
  <mat-sidenav position="end">End</mat-sidenav>
  <section>Main</section>
</mat-sidenav-container>

----------------------------------------

TITLE: Passing Data to Bottom Sheet
DESCRIPTION: Example of passing data to a bottom sheet component during initialization.

LANGUAGE: typescript
CODE:
const bottomSheetRef = bottomSheet.open(HobbitSheet, {
  data: { names: ['Frodo', 'Bilbo'] },
});

----------------------------------------

TITLE: Implementing Accessible Sorting in Angular Material
DESCRIPTION: Example showing how to implement accessible sorting using the sortActionDescription input and LiveAnnouncer service for screen reader support.

LANGUAGE: typescript
CODE:
import { LiveAnnouncer } from '@angular/cdk/a11y';

@Component({
  ...
})
export class TableSortComponent {
  constructor(private _liveAnnouncer: LiveAnnouncer) {}

  announceSortChange(sortState: Sort) {
    if (sortState.direction) {
      this._liveAnnouncer.announce(`Sorted ${sortState.direction}ending`);
    } else {
      this._liveAnnouncer.announce('Sorting cleared');
    }
  }
}

----------------------------------------

TITLE: Opening Bottom Sheet in Angular
DESCRIPTION: Demonstrates how to open a bottom sheet using the MatBottomSheet service with configuration options.

LANGUAGE: typescript
CODE:
const bottomSheetRef = bottomSheet.open(SocialShareComponent, {
  ariaLabel: 'Share on social media'
});

----------------------------------------

TITLE: Basic Ripple Implementation in Angular
DESCRIPTION: Basic implementation of the matRipple directive to create a ripple effect container. The ripple color can be customized using the matRippleColor input.

LANGUAGE: html
CODE:
<div matRipple [matRippleColor]="myColor">
  <ng-content></ng-content>
</div>

----------------------------------------

TITLE: Implementing Google Maps Directions Component in Angular
DESCRIPTION: Angular component implementation that demonstrates how to use MapDirectionsService to request and display route directions between two points on a Google Map.

LANGUAGE: typescript
CODE:
// google-maps-demo.component.ts
import {Component} from '@angular/core';
import {GoogleMap, MapDirectionsRenderer, MapDirectionsService} from '@angular/google-maps';

@Component({
  selector: 'google-map-demo',
  templateUrl: 'google-map-demo.html',
    imports: [GoogleMap, MapDirectionsRenderer],
})
export class GoogleMapDemo {
  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};
  zoom = 4;

  readonly directionsResults$: Observable<google.maps.DirectionsResult|undefined>;

  constructor(mapDirectionsService: MapDirectionsService) {
    const request: google.maps.DirectionsRequest = {
      destination: {lat: 12, lng: 4},
      origin: {lat: 14, lng: 8},
      travelMode: google.maps.TravelMode.DRIVING
    };
    this.directionsResults$ = mapDirectionsService.route(request).pipe(map(response => response.result));
  }
}

----------------------------------------

TITLE: Creating a Chip Listbox in Angular Material
DESCRIPTION: Demonstrates how to create a chip listbox for selecting shirt sizes using mat-chip-listbox and mat-chip-option elements.

LANGUAGE: html
CODE:
<mat-chip-listbox aria-label="select a shirt size">
  <mat-chip-option> Small </mat-chip-option>
  <mat-chip-option> Medium </mat-chip-option>
  <mat-chip-option> Large </mat-chip-option>
</mat-chip-listbox>

----------------------------------------

TITLE: Customizing Timepicker Options in Angular
DESCRIPTION: Demonstrates how to customize the timepicker dropdown options using the interval input or by providing a custom set of options.

LANGUAGE: typescript
CODE:
import {MAT_TIMEPICKER_CONFIG} from '../timepicker';

{
  provide: MAT_TIMEPICKER_CONFIG,
  useValue: {interval: '90 minutes'},
}

----------------------------------------

TITLE: Implementing CDK Accordion with Accessibility in HTML
DESCRIPTION: This snippet demonstrates how to implement a CDK accordion component with proper accessibility attributes. It includes the recommended ARIA roles and attributes for the accordion trigger and body elements.

LANGUAGE: html
CODE:
<!-- example(cdk-accordion-overview) -->

----------------------------------------

TITLE: Creating a Disabled Chip Row in Angular Material
DESCRIPTION: Illustrates how to create a disabled chip row using the 'disabled' Input property on a mat-chip-row element.

LANGUAGE: html
CODE:
<mat-chip-row disabled>Orange</mat-chip-row>

----------------------------------------

TITLE: Creating Simple Lists with Angular Material
DESCRIPTION: Demonstrates how to create a basic list using the mat-list and mat-list-item components in Angular Material.

LANGUAGE: html
CODE:
<mat-list>
 <mat-list-item>Pepper</mat-list-item>
 <mat-list-item>Salt</mat-list-item>
 <mat-list-item>Paprika</mat-list-item>
</mat-list>

----------------------------------------

TITLE: Customizing Date Range Colors with SCSS
DESCRIPTION: Example showing how to customize the colors of the date range selection using SCSS mixins

LANGUAGE: scss
CODE:
@use '@angular/material' as mat;

@include mat.datepicker-date-range-colors(hotpink, teal, yellow, purple);

----------------------------------------

TITLE: Implementing SelectionModel in Angular Collections
DESCRIPTION: Demonstrates basic usage of SelectionModel utility for managing selections in a list. Shows initialization with multiple selection enabled, adding/removing selections, toggling values, checking selection status, sorting, and subscribing to changes.

LANGUAGE: javascript
CODE:
const model = new SelectionModel(
  true,   // multiple selection or not
  [2,1,3] // initial selected values
);

// select a value
model.select(4);
console.log(model.selected.length) //->  4

// deselect a value
model.deselect(4);
console.log(model.selected.length) //->  3

// toggle a value
model.toggle(4);
console.log(model.selected.length) //->  4

// check for selection
console.log(model.isSelected(4)) //-> true

// sort the selections
console.log(model.sort()) //-> [1,2,3,4]

// listen for changes
model.changed.subscribe(s => console.log(s));

----------------------------------------

TITLE: Configuring Global Dialog Defaults in Angular
DESCRIPTION: Demonstrates how to set global default options for all dialogs in an Angular application.

LANGUAGE: typescript
CODE:
@NgModule({
  providers: [
    {provide: MAT_DIALOG_DEFAULT_OPTIONS, useValue: {hasBackdrop: false}}
  ]
})

----------------------------------------

TITLE: Basic Tree Node Template with Data Binding
DESCRIPTION: Simple tree node template showing data binding using matNodeDef directive to access node data properties.

LANGUAGE: html
CODE:
<mat-tree-node *matNodeDef="let node">
  {{node.key}}: {{node.value}}
</mat-tree-node>

----------------------------------------

TITLE: Implementing Accessible Button Toggle with Icon in Angular Material
DESCRIPTION: Shows how to create an accessible button toggle with an icon, using aria-label for dynamic accessibility labels. The example demonstrates proper binding of accessibility attributes for screen readers.

LANGUAGE: html
CODE:
<mat-button-toggle [aria-label]="alertsEnabled ? 'Disable alerts' : 'Enable alerts'">
  <mat-icon>notifications</mat-icon>
</mat-button-toggle>

----------------------------------------

TITLE: Configuring MatCheckbox Click Behavior in Angular
DESCRIPTION: Configuration example showing how to customize the checkbox click behavior by providing MAT_CHECKBOX_DEFAULT_OPTIONS through dependency injection. Sets the click action to 'noop' for custom implementation.

LANGUAGE: typescript
CODE:
providers: [
  {provide: MAT_CHECKBOX_DEFAULT_OPTIONS, useValue: { clickAction: 'noop' } as MatCheckboxDefaultOptions}
]

----------------------------------------

TITLE: Implementing Focus Regions in HTML
DESCRIPTION: Example showing how to define explicit focus regions with start, end, and initial focus points.

LANGUAGE: html
CODE:
<a mat-list-item routerLink cdkFocusRegionStart>Focus region start</a>
<a mat-list-item routerLink>Link</a>
<a mat-list-item routerLink cdkFocusInitial>Initially focused</a>
<a mat-list-item routerLink cdkFocusRegionEnd>Focus region end</a>

----------------------------------------

TITLE: Implementing Lazy Rendering for Angular Material Menu
DESCRIPTION: Shows how to use lazy rendering for menu content using ng-template with the matMenuContent attribute. This approach defers the initialization of menu items until the menu is opened.

LANGUAGE: html
CODE:
<mat-menu #appMenu="matMenu">
  <ng-template matMenuContent>
    <button mat-menu-item>Settings</button>
    <button mat-menu-item>Help</button>
  </ng-template>
</mat-menu>

<button matIconButton [matMenuTriggerFor]="appMenu">
  <mat-icon>more_vert</mat-icon>
</button>

----------------------------------------

TITLE: Testing Issue Report Selector With Harnesses
DESCRIPTION: Modern approach to testing using component harnesses, demonstrating cleaner and more maintainable test code.

LANGUAGE: typescript
CODE:
describe('issue-report-selector', () => {
  let fixture: ComponentFixture<IssueReportSelector>;
  let loader: HarnessLoader;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [IssueReportSelectorModule],
      declarations: [IssueReportSelector],
    }).compileComponents();

    fixture = TestBed.createComponent(IssueReportSelector);
    fixture.detectChanges();
    loader = TestbedHarnessEnvironment.loader(fixture);
  });

  it('should switch to bug report template', async () => {
    expect(fixture.debugElement.query('bug-report-form')).toBeNull();
    const select = await loader.getHarness(MatSelectHarness);
    await select.open();
    const bugOption = await select.getOption({text: 'Bug'});
    await bugOption.click();
    expect(fixture.debugElement.query('bug-report-form')).not.toBeNull();
  });
});

----------------------------------------

TITLE: Creating a Chip Grid with Input in Angular Material
DESCRIPTION: Shows how to create a chip grid with an input field for entering sandwich fillings, using mat-chip-grid, mat-chip-row, and input elements with various bindings and event handlers.

LANGUAGE: html
CODE:
<mat-form-field>
  <mat-chip-grid #myChipGrid [(ngModel)]="mySelection"
    aria-label="enter sandwich fillings">
    @for (filling of fillings; track filling) {
      <mat-chip-row (removed)="remove(filling)">
        {{filling.name}}
        <button matChipRemove>
          <mat-icon>cancel</mat-icon>
        </button>
      </mat-chip-row>
    }
  </mat-chip-grid>
  <input [matChipInputFor]="myChipGrid"
          [matChipInputSeparatorKeyCodes]="separatorKeysCodes"
          (matChipInputTokenEnd)="add($event)"
          aria-label="Add sandwich fillings..." />
</mat-form-field>

----------------------------------------

TITLE: Generating Navigation Component
DESCRIPTION: Command to create a component with Material Design toolbar and responsive sidenav.

LANGUAGE: bash
CODE:
ng generate @angular/material:navigation <component-name>

----------------------------------------

TITLE: Implementing Basic Date Range Input in HTML
DESCRIPTION: Example showing the basic setup of a date range input with start and end date fields

LANGUAGE: html
CODE:
<mat-date-range-input>
  <input matStartDate placeholder="Start date">
  <input matEndDate placeholder="End date">
</mat-date-range-input>

----------------------------------------

TITLE: Tree Node Toggle Implementation
DESCRIPTION: Example of adding expand/collapse functionality to tree nodes using matTreeNodeToggle directive with recursive option.

LANGUAGE: html
CODE:
<mat-tree-node *matNodeDef="let node">
  <button matTreeNodeToggle aria-label="toggle tree node" [matTreeNodeToggleRecursive]="true">
    <mat-icon>expand</mat-icon>
  </button>
  {{node.value}}
</mat-tree-node>

----------------------------------------

TITLE: Using MediaMatcher in Angular Component for Responsive Design
DESCRIPTION: This snippet demonstrates how to inject and use MediaMatcher in an Angular component to detect screen orientation. It checks if the screen is in landscape mode and calls appropriate methods based on the result.

LANGUAGE: typescript
CODE:
@Component({ ... }) 
export class MyWidget {  
  constructor(mm: MediaMatcher) {
    mm.matchMedia('(orientation: landscape)').matches ? 
      this.setLandscapeMode() :
      this.setPortraitMode();
  }
}

----------------------------------------

TITLE: Using LiveAnnouncer in TypeScript
DESCRIPTION: Example of using LiveAnnouncer service to make announcements for screen readers.

LANGUAGE: typescript
CODE:
@Component({...})
export class MyComponent {

 constructor(liveAnnouncer: LiveAnnouncer) {
   liveAnnouncer.announce("Hey Google");
 }
}

----------------------------------------

TITLE: Configuring Advanced Theme with Separate Color Palettes in Angular Material
DESCRIPTION: This example shows how to create a more advanced theme configuration with separate primary and tertiary color palettes, explicit light theme type, and custom typography settings for Angular Material components.

LANGUAGE: scss
CODE:
@use '@angular/material' as mat;

html {
  @include mat.theme((
    color: (
      primary: mat.$violet-palette,
      tertiary: mat.$orange-palette,
      theme-type: light,
    ),
    typography: Roboto,
    density: 0
  ));
}

----------------------------------------

TITLE: Implementing Google Maps in Angular Component
DESCRIPTION: This snippet demonstrates how to create an Angular component that uses the GoogleMap component. It includes methods for handling map click and mousemove events, and updates the center and display coordinates accordingly.

LANGUAGE: typescript
CODE:
// google-maps-demo.component.ts
import {Component} from '@angular/core';
import {GoogleMap} from '@angular/google-maps';

@Component({
  selector: 'google-map-demo',
  templateUrl: 'google-map-demo.html',
  imports: [GoogleMap],
})
export class GoogleMapDemo {

  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};
  zoom = 4;
  display: google.maps.LatLngLiteral;

  moveMap(event: google.maps.MapMouseEvent) {
    this.center = (event.latLng.toJSON());
  }

  move(event: google.maps.MapMouseEvent) {
    this.display = event.latLng.toJSON();
  }
}

----------------------------------------

TITLE: Configuring MapCircle Component in TypeScript
DESCRIPTION: Demonstrates how to set up a component that uses GoogleMap and MapCircle. Includes component configuration with center coordinates, zoom level, and circle properties.

LANGUAGE: typescript
CODE:
// google-maps-demo.component.ts
import {Component} from '@angular/core';
import {GoogleMap, MapCircle} from '@angular/google-maps';

@Component({
  selector: 'google-map-demo',
  templateUrl: 'google-map-demo.html',
    imports: [GoogleMap, MapCircle],
})
export class GoogleMapDemo {
  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};
  zoom = 4;

  circleCenter: google.maps.LatLngLiteral = {lat: 10, lng: 15};
  radius = 3;
}

----------------------------------------

TITLE: Demonstrating Basic Card Structure in Angular Material
DESCRIPTION: This snippet shows the basic structure of a mat-card component with its various sections including header, content, image, actions, and footer.

LANGUAGE: html
CODE:
<mat-card>
  <mat-card-header></mat-card-header>
  <mat-card-content></mat-card-content>
  <img mat-card-image>
  <mat-card-actions></mat-card-actions>
  <mat-card-footer></mat-card-footer>
</mat-card>

----------------------------------------

TITLE: Connecting Date Range Picker with Input
DESCRIPTION: Example demonstrating how to connect a date range picker component with the range input using the rangePicker property

LANGUAGE: html
CODE:
<mat-date-range-input [rangePicker]="picker">
  <input matStartDate placeholder="Start date">
  <input matEndDate placeholder="End date">
</mat-date-range-input>

<mat-date-range-picker #picker></mat-date-range-picker>

----------------------------------------

TITLE: Applying Multiple Themes in Angular Material
DESCRIPTION: This snippet demonstrates how to apply multiple themes in an Angular Material application, with a global theme and a context-specific theme for a container element.

LANGUAGE: scss
CODE:
@use '@angular/material' as mat;

html {
  @include mat.theme((
    color: mat.$violet-palette,
    typography: Roboto,
    density: 0,
  ));
}

.example-bright-container {
  @include mat.theme((
    color: mat.$cyan-palette,
  ));
}

----------------------------------------

TITLE: Installing Angular Material with CLI
DESCRIPTION: Command to install Angular Material, CDK, and Angular Animations using ng add.

LANGUAGE: bash
CODE:
ng add @angular/material

----------------------------------------

TITLE: Implementing Row Selection in mat-table
DESCRIPTION: Demonstrates how to add a selection column to mat-table for row selection functionality.

LANGUAGE: html
CODE:
<ng-container matColumnDef="select">
  <th mat-header-cell *matHeaderCellDef>
    <mat-checkbox (change)="$event ? toggleAllRows() : null"
                  [checked]="selection.hasValue() && isAllSelected()"
                  [indeterminate]="selection.hasValue() && !isAllSelected()">
    </mat-checkbox>
  </th>
  <td mat-cell *matCellDef="let row">
    <mat-checkbox (click)="$event.stopPropagation()"
                  (change)="$event ? selection.toggle(row) : null"
                  [checked]="selection.isSelected(row)">
    </mat-checkbox>
  </td>
</ng-container>

----------------------------------------

TITLE: Creating TemplatePortal in Angular HTML and TypeScript
DESCRIPTION: Demonstrates how to create a TemplatePortal from an ng-template in Angular. It includes both the HTML template definition and the TypeScript code to create the TemplatePortal instance.

LANGUAGE: html
CODE:
<ng-template #templatePortalContent>Some content here</ng-template>

LANGUAGE: typescript
CODE:
@ViewChild('templatePortalContent') templatePortalContent: TemplateRef<unknown>;

ngAfterViewInit() {
  this.templatePortal = new TemplatePortal(
    this.templatePortalContent,
    this._viewContainerRef
  );
}

----------------------------------------

TITLE: Manually Controlling Tooltip in Angular Material
DESCRIPTION: This snippet demonstrates how to manually show and hide the tooltip using the show and hide directive methods.

LANGUAGE: html
CODE:
<!-- example(tooltip-manual) -->

----------------------------------------

TITLE: Implementing Linear Mode in Custom Stepper with Angular
DESCRIPTION: This example shows how to implement linear mode in the custom stepper, which requires completing previous steps before proceeding. It includes both HTML and TypeScript code.

LANGUAGE: html
CODE:
<app-custom-stepper linear>
  <cdk-step editable="false" [completed]="completed">
    <input type="text" name="a" value="Cannot proceed to next step" />
    <button (click)="completeStep()">Complete step</button>
  </cdk-step>
  <cdk-step editable="false">
    <input type="text" name="b" value="b" />
  </cdk-step>
</app-custom-stepper>

LANGUAGE: typescript
CODE:
export class AppComponent {
  completed = false;

  completeStep(): void {
    this.completed = true;
  }
}

----------------------------------------

TITLE: Implementing Indeterminate Progress Bar in Angular Material
DESCRIPTION: Shows how to use an indeterminate progress bar for operations where the completion time is unknown. In this mode, the 'value' property is ignored.

LANGUAGE: html
CODE:
<!-- example(progress-bar-indeterminate) -->

----------------------------------------

TITLE: Handling Bottom Sheet Focus Restoration
DESCRIPTION: Example of managing focus restoration after bottom sheet dismissal using afterDismissed() observable.

LANGUAGE: typescript
CODE:
const bottomSheetRef = bottomSheet.open(FileTypeChooser);
bottomSheetRef.afterDismissed().subscribe(() => {
  // Restore focus to an appropriate element for the user's workflow here.
});

----------------------------------------

TITLE: Styling Dialog Components
DESCRIPTION: Shows various approaches for styling dialog components including component-level styles and custom containers.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'my-dialog',
  styles: [`
    :host {
      display: block;
      background: #fff;
      border-radius: 8px;
      padding: 16px;
    }
  `]
})
class MyDialog {}

LANGUAGE: typescript
CODE:
import {CdkDialogContainer} from '@angular/cdk/dialog';

@Component({
  selector: 'my-dialog-container',
  styles: [`
    :host {
      display: block;
      background: #fff;
      border-radius: 8px;
      padding: 16px;
    }
  `]
})
class MyDialogContainer extends CdkDialogContainer {}

----------------------------------------

TITLE: Managing Bottom Sheet Events
DESCRIPTION: Shows how to handle bottom sheet lifecycle events and dismissal using MatBottomSheetRef.

LANGUAGE: typescript
CODE:
bottomSheetRef.afterDismissed().subscribe(() => {
  console.log('Bottom sheet has been dismissed.');
});

bottomSheetRef.dismiss();

----------------------------------------

TITLE: Implementing Extended FAB Button in Angular Material
DESCRIPTION: Example showing how to create an extended Floating Action Button (FAB) with both an icon and text label. The extended attribute allows the FAB to expand into a rounded rectangle shape.

LANGUAGE: html
CODE:
<button matFab extended>
  <mat-icon>home</mat-icon>
  Home
</button>

----------------------------------------

TITLE: Basic Progress Spinner Implementation - Angular Material
DESCRIPTION: Basic implementation of the mat-progress-spinner component. This snippet demonstrates the most basic usage of the progress spinner component in Angular Material.

LANGUAGE: html
CODE:
<mat-progress-spinner>

----------------------------------------

TITLE: Defining Angular Material Dialog Type Definitions and API
DESCRIPTION: Contains type definitions, classes, interfaces and configuration options for the Angular Material Dialog system. Includes core dialog functionality like opening, closing, positioning and animation configurations.

LANGUAGE: typescript
CODE:
import { CdkDialogContainer } from '@angular/cdk/dialog';
import { ComponentPortal } from '@angular/cdk/portal';
import { ComponentRef } from '@angular/core';
import { ComponentType } from '@angular/cdk/overlay';
import { Dialog } from '@angular/cdk/dialog';
import { DialogRef } from '@angular/cdk/dialog';
import { Direction } from '@angular/cdk/bidi';
import { EventEmitter } from '@angular/core';
import { FocusOrigin } from '@angular/cdk/a11y';
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/dialog';
import * as i1_2 from '@angular/cdk/bidi';
import * as i2 from '@angular/cdk/overlay';
import * as i3 from '@angular/cdk/portal';
import * as i5 from '@angular/cdk/scrolling';
import { InjectionToken } from '@angular/core';
import { Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { OnChanges } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';
import { ScrollStrategy } from '@angular/cdk/overlay';
import { SimpleChanges } from '@angular/core';
import { Subject } from 'rxjs';
import { TemplateRef } from '@angular/core';
import { ViewContainerRef } from '@angular/core';

export type AutoFocusTarget = 'dialog' | 'first-tabbable' | 'first-heading';

export function _closeDialogVia<R>(ref: MatDialogRef<R>, interactionType: FocusOrigin, result?: R): void;

export const _defaultParams: {
    params: {
        enterAnimationDuration: string;
        exitAnimationDuration: string;
    };
};

export interface DialogPosition {
    bottom?: string;
    left?: string;
    right?: string;
    top?: string;
}

export type DialogRole = 'dialog' | 'alertdialog';

----------------------------------------

TITLE: Adding Meta Section Icons to List Items in Angular Material
DESCRIPTION: Demonstrates how to add meta icons to list items using the matListItemMeta directive for displaying icons in the meta section.

LANGUAGE: html
CODE:
<mat-list>
  @for (message of messages; track message) {
    <mat-list-item>
      <div matListItemMeta>
        <mat-icon>folder</mat-icon>
      </div>
      <h3 matListItemTitle>{{message.from}}</h3>
      <p matListItemLine>
        <span>{{message.subject}}</span>
        <span class="demo-2"> -- {{message.content}}</span>
      </p>
    </mat-list-item>
  }
</mat-list>

----------------------------------------

TITLE: Implementing Directionality in an Angular Component
DESCRIPTION: This snippet demonstrates how to inject and use the Directionality service in an Angular component to respond to changes in text direction. It shows setting up a subscription to direction changes and cleaning it up on component destruction.

LANGUAGE: typescript
CODE:
@Component({ ... })
export class MyWidget implements OnDestroy {

  /** Whether the widget is in RTL mode or not. */
  private isRtl: boolean;

  /** Subscription to the Directionality change EventEmitter. */
  private _dirChangeSubscription = Subscription.EMPTY;

  constructor(dir: Directionality) {
    this.isRtl = dir.value === 'rtl';

    this._dirChangeSubscription = dir.change.subscribe(() => {
      this.flipDirection();
    });
  }

  ngOnDestroy() {
    this._dirChangeSubscription.unsubscribe();
  }
}

----------------------------------------

TITLE: Adding a Remove Button to a Chip Option in Angular Material
DESCRIPTION: Demonstrates how to add a remove button to a chip option using the matChipRemove attribute and implementing the 'removed' Output.

LANGUAGE: html
CODE:
 <mat-chip-option>
  Orange
  <button matChipRemove aria-label="Remove orange">
    <mat-icon>cancel</mat-icon>
  </button>
</mat-chip-option>

----------------------------------------

TITLE: Creating a Basic Chip Set in Angular Material
DESCRIPTION: Shows how to create a basic chip set without any specific accessibility pattern using mat-chip-set and mat-chip elements.

LANGUAGE: html
CODE:
<mat-chip-set>
  <mat-chip> John </mat-chip>
  <mat-chip> Paul </mat-chip>
  <mat-chip> James </mat-chip>
</mat-chip-set>

----------------------------------------

TITLE: Configuring Fullscreen Overlay Container
DESCRIPTION: Shows how to enable FullscreenOverlayContainer in an Angular module for proper fullscreen mode support

LANGUAGE: typescript
CODE:
@NgModule({
  providers: [{provide: OverlayContainer, useClass: FullscreenOverlayContainer}],
  // ...
})
export class MyModule { }

----------------------------------------

TITLE: Creating Empty Sidenav Container in Angular
DESCRIPTION: Demonstrates how to create an empty sidenav container with no sidenavs and implicit empty content using Angular Material.

LANGUAGE: html
CODE:
<mat-sidenav-container></mat-sidenav-container>

----------------------------------------

TITLE: Implementing Complex Navigation Lists in Angular Material
DESCRIPTION: Demonstrates creating more complex navigation lists with additional elements like buttons within list items.

LANGUAGE: html
CODE:
<mat-nav-list>
  @for (link of links; track link) {
    <mat-list-item [activated]="link.isActive">
       <a matListItemTitle href="...">{{ link }}</a>
       <button matIconButton (click)="showInfo(link)" matListItemMeta>
          <mat-icon>info</mat-icon>
       </button>
    </mat-list-item>
  }
</mat-nav-list>

----------------------------------------

TITLE: Implementing Multiple Row Toolbar in Angular Material
DESCRIPTION: Example showing how to create a toolbar with multiple rows using <mat-toolbar-row> elements within a <mat-toolbar> container.

LANGUAGE: html
CODE:
<mat-toolbar-row>
  First Row
</mat-toolbar-row>
<mat-toolbar-row>
  Second Row
</mat-toolbar-row>

----------------------------------------

TITLE: Creating Action Lists with Angular Material
DESCRIPTION: Shows how to use mat-action-list for lists where each item performs an action, using button elements with the mat-list-item attribute.

LANGUAGE: html
CODE:
<mat-action-list>
  <button mat-list-item (click)="save()">Save</button>
  <button mat-list-item (click)="undo()">Undo</button>
</mat-action-list>

----------------------------------------

TITLE: Implementing Dynamic Height Tabs in Angular Material
DESCRIPTION: Demonstrates how to configure tabs with dynamic height that animates according to the active tab's content.

LANGUAGE: html
CODE:
<mat-tab-group dynamicHeight>\n  <mat-tab label=\"Short tab\">\n    <div class=\"small-content\">Small content</div>\n  </mat-tab>\n</mat-tab-group>

----------------------------------------

TITLE: CdkTable with Fixed Layout and TrackBy (HTML)
DESCRIPTION: This snippet shows how to use the fixedLayout and trackBy properties to improve performance in CdkTable.

LANGUAGE: html
CODE:
<table cdk-table [dataSource]="dataSource" fixedLayout [trackBy]="myTrackById">

----------------------------------------

TITLE: Using Inset Dividers in Angular Material Lists
DESCRIPTION: Demonstrates the use of inset dividers in a material list to separate content into sections. It includes examples of folder and note items with conditional rendering of dividers.

LANGUAGE: html
CODE:
<mat-list>
   <h3 mat-subheader>Folders</h3>
   @for (folder of folders; track folder) {
      <mat-list-item>
         <mat-icon mat-list-icon>folder</mat-icon>
         <h4 mat-line>{{folder.name}}</h4>
         <p mat-line class="demo-2">{{folder.updated}}</p>
         @if (!$last) {
            <mat-divider [inset]="true"></mat-divider>
         }
      </mat-list-item>
   }
   <mat-divider></mat-divider>
   <h3 mat-subheader>Notes</h3>
   @for (note of notes; track node) {
      <mat-list-item>
         <mat-icon mat-list-icon>note</mat-icon>
         <h4 mat-line>{{note.name}}</h4>
         <p mat-line class="demo-2"> {{note.updated}} </p>
      </mat-list-item>
   }
</mat-list>

----------------------------------------

TITLE: Attaching Autocomplete Panel to Custom Element
DESCRIPTION: Demonstrates how to attach an autocomplete panel to a custom container element using matAutocompleteOrigin and matAutocompleteConnectedTo directives.

LANGUAGE: html
CODE:
<div class="custom-wrapper-example" matAutocompleteOrigin #origin="matAutocompleteOrigin">
  <input
    matInput
    [formControl]="myControl"
    [matAutocomplete]="auto"
    [matAutocompleteConnectedTo]="origin">
</div>

<mat-autocomplete #auto="matAutocomplete">
  @for (option of options; track option) {
    <mat-option [value]="option">{{option}}</mat-option>
  }
</mat-autocomplete>

----------------------------------------

TITLE: Google Maps Component Template in Angular
DESCRIPTION: This HTML template shows how to use the google-map component in an Angular template. It sets the map's height, width, center, and zoom, and binds click and mousemove events. It also displays the current latitude and longitude.

LANGUAGE: html
CODE:
<!-- google-maps-demo.component.html -->
<google-map
  height="400px"
  width="750px"
  [center]="center"
  [zoom]="zoom"
  (mapClick)="moveMap($event)"
  (mapMousemove)="move($event)" />

<div>Latitude: {{display?.lat}}</div>
<div>Longitude: {{display?.lng}}</div>

----------------------------------------

TITLE: Implementing Flat Tree Structure in Angular CDK
DESCRIPTION: Demonstrates the basic structure of a flat tree where nodes are rendered as siblings in sequence. This approach is better for styling and scrolling implementations.

LANGUAGE: html
CODE:
<cdk-tree>
  <cdk-tree-node> parent node </cdk-tree-node>
  <cdk-tree-node> -- child node1 </cdk-tree-node>
  <cdk-tree-node> -- child node2 </cdk-tree-node>
</cdk-tree>

----------------------------------------

TITLE: Configuring Stepper Global Options in Angular
DESCRIPTION: Demonstrates how to configure global options for the Material stepper, such as disabling default indicator types and enabling error display. This is done by providing values for STEPPER_GLOBAL_OPTIONS in the application's root module.

LANGUAGE: typescript
CODE:
@NgModule({
  providers: [
    {
      provide: STEPPER_GLOBAL_OPTIONS,
      useValue: { displayDefaultIndicatorType: false }
    }
  ]
})

LANGUAGE: typescript
CODE:
@NgModule({
  providers: [
    {
      provide: STEPPER_GLOBAL_OPTIONS,
      useValue: { showError: true }
    }
  ]
})

----------------------------------------

TITLE: Programmatic Ripple Control in TypeScript
DESCRIPTION: Implementation of programmatic ripple control using MatRipple reference. Shows how to launch centered and persistent ripples.

LANGUAGE: typescript
CODE:
class MyComponent {

  /** Reference to the directive instance of the ripple. */
  @ViewChild(MatRipple) ripple: MatRipple;

  /** Shows a centered and persistent ripple. */
  launchRipple() {
    const rippleRef = this.ripple.launch({
      persistent: true,
      centered: true
    });

    // Fade out the ripple later.
    rippleRef.fadeOut();
  }
}

----------------------------------------

TITLE: Structuring Card Header in Angular Material
DESCRIPTION: This snippet demonstrates how to structure a card header using predefined elements such as title, subtitle, and avatar image.

LANGUAGE: html
CODE:
<mat-card-header>
  <mat-card-title></mat-card-title>
  <mat-card-subtitle></mat-card-subtitle>
  <img mat-card-avatar>
</mat-card-header>

----------------------------------------

TITLE: Controlling Badge Visibility in Angular Material
DESCRIPTION: This example demonstrates how to programmatically toggle the visibility of a badge using the matBadgeHidden attribute.

LANGUAGE: html
CODE:
<span matBadge="4" [matBadgeHidden]="hidden">
  Notifications
</span>


----------------------------------------

TITLE: Using MapRectangle in Angular HTML Template
DESCRIPTION: This snippet shows how to use the MapRectangle component in an Angular HTML template. It demonstrates the integration of the GoogleMap component with the MapRectangle, setting properties for height, width, center, zoom, and bounds.

LANGUAGE: html
CODE:
<!-- google-maps-demo.component.html -->
<google-map height="400px" width="750px" [center]="center" [zoom]="zoom">
  <map-rectangle [bounds]="bounds" />
</google-map>

----------------------------------------

TITLE: Defining Row Templates in CdkTable (HTML)
DESCRIPTION: This snippet shows how to define header, data, and footer row templates for the CdkTable, specifying which columns to include.

LANGUAGE: html
CODE:
<tr cdk-header-row *cdkHeaderRowDef="['username', 'age', 'title']"></tr>
<tr cdk-row *cdkRowDef="let row; columns: ['username', 'age', 'title']"></tr>
<tr cdk-footer-row *cdkFooterRowDef="['username', 'age', 'title']"></tr>

----------------------------------------

TITLE: Binding Listbox Value in Angular CDK
DESCRIPTION: Shows how to bind the listbox value using [cdkListboxValue] for input and (cdkListboxValueChange) for output. This allows two-way binding of the selected values.

LANGUAGE: HTML
CODE:
<ul cdkListbox [cdkListboxValue]="selectedColors" (cdkListboxValueChange)="onSelectionChange($event)">
  <li cdkOption="red">Red</li>
  <li cdkOption="green">Green</li>
  <li cdkOption="blue">Blue</li>
</ul>

----------------------------------------

TITLE: MapTransitLayer HTML Template Implementation
DESCRIPTION: HTML template configuration for displaying the Google Map with transit layer. Shows how to set map dimensions and bind center and zoom properties.

LANGUAGE: html
CODE:
<!-- google-maps-demo.component.html -->
<google-map height="400px" width="750px" [center]="center" [zoom]="zoom">
  <map-transit-layer />
</google-map>

----------------------------------------

TITLE: Creating Lists with Multiple Sections in Angular Material
DESCRIPTION: Demonstrates how to create lists with multiple sections using matSubheader for subheaders and mat-divider for dividers between sections.

LANGUAGE: html
CODE:
<mat-list>
   <h3 matSubheader>Folders</h3>
   @for (folder of folders; track folder) {
     <mat-list-item>
        <mat-icon matListIcon>folder</mat-icon>
        <h4 matListItemTitle>{{folder.name}}</h4>
        <p matListItemLine class="demo-2"> {{folder.updated}} </p>
     </mat-list-item>
   }
   <mat-divider></mat-divider>
   <h3 matSubheader>Notes</h3>
   @for (note of notes; track note) {
     <mat-list-item>
        <mat-icon matListIcon>note</mat-icon>
        <h4 matListItemTitle>{{note.name}}</h4>
        <p matListItemLine class="demo-2"> {{note.updated}} </p>
     </mat-list-item>
   }
</mat-list>

----------------------------------------

TITLE: Implementing Accessible MatCheckbox in Angular Templates
DESCRIPTION: Example of implementing an accessible checkbox using aria-label binding for dynamic labels. Shows proper binding syntax without attr prefix.

LANGUAGE: html
CODE:
<mat-checkbox [aria-label]="isSubscribedToEmailsMessage">
</mat-checkbox>

----------------------------------------

TITLE: Importing Dialog Styles with SCSS
DESCRIPTION: Shows two methods for including required Dialog structural styles - either importing prebuilt CSS or using the cdk.overlay mixin.

LANGUAGE: scss
CODE:
@import '@angular/cdk/overlay-prebuilt.css';

LANGUAGE: scss
CODE:
@use '@angular/cdk' as cdk;

@include cdk.overlay();

----------------------------------------

TITLE: Passing Data to Angular Material Menu with Lazy Rendering
DESCRIPTION: Illustrates how to pass context data to a lazily rendered menu using matMenuTriggerData. This allows a single menu instance to be rendered with different data sets based on the trigger that opened it.

LANGUAGE: html
CODE:
<mat-menu #appMenu="matMenu">
  <ng-template matMenuContent let-name="name">
    <button mat-menu-item>Settings</button>
    <button mat-menu-item>Log off {{name}}</button>
  </ng-template>
</mat-menu>

<button matIconButton [matMenuTriggerFor]="appMenu" [matMenuTriggerData]="{name: 'Sally'}">
  <mat-icon>more_vert</mat-icon>
</button>

<button matIconButton [matMenuTriggerFor]="appMenu" [matMenuTriggerData]="{name: 'Bob'}">
  <mat-icon>more_vert</mat-icon>
</button>

----------------------------------------

TITLE: Configuring YouTube Player API Loading in Angular Module
DESCRIPTION: Example of configuring the YouTube Player API loading behavior at the module level using dependency injection. Shows how to disable automatic API loading using the YOUTUBE_PLAYER_CONFIG token.

LANGUAGE: typescript
CODE:
import {NgModule} from '@angular/core';
import {YouTubePlayer, YOUTUBE_PLAYER_CONFIG} from '@angular/youtube-player';

@NgModule({
  imports: [YouTubePlayer],
  providers: [{
    provide: YOUTUBE_PLAYER_CONFIG,
    useValue: {
      loadApi: false
    }
  }]
})
export class YourApp {}

----------------------------------------

TITLE: Creating a Range Slider with Angular Material
DESCRIPTION: This example shows how to create a range slider by using both matSliderStartThumb and matSliderEndThumb inputs within a mat-slider component.

LANGUAGE: html
CODE:
<mat-slider>
  <input matSliderStartThumb>
  <input matSliderEndThumb>
</mat-slider>

----------------------------------------

TITLE: Testing Server-side Rendering of Angular Components
DESCRIPTION: Bazel test command to verify if all components would render correctly on the server.

LANGUAGE: bash
CODE:
yarn bazel test src/universal-app:prerender_test

----------------------------------------

TITLE: Creating Submenu Trigger in Angular CDK
DESCRIPTION: Demonstrates how to create a submenu trigger by combining cdkMenuItem and cdkMenuTriggerFor directives.

LANGUAGE: html
CODE:
<button cdkMenuItem [cdkMenuTriggerFor]="submenu">File</button>

----------------------------------------

TITLE: Positioning Tooltip in Angular Material
DESCRIPTION: This example shows how to position the tooltip using the matTooltipPosition input.

LANGUAGE: html
CODE:
<!-- example(tooltip-position) -->

----------------------------------------

TITLE: Implementing Multi-line Lists with Angular Material
DESCRIPTION: Demonstrates creating two-line and three-line list items using the matListItemLine attribute for each line of content.

LANGUAGE: html
CODE:
<!-- two line list -->
<mat-list>
  @for (message of messages; track message) {
    <mat-list-item>
      <h3 matListItemTitle>{{message.from}}</h3>
      <p matListItemLine>
        <span>{{message.subject}}</span>
        <span class="demo-2"> -- {{message.content}}</span>
      </p>
    </mat-list-item>
  }
</mat-list>

<!-- three line list -->
<mat-list>
  @for (message of messages; track message) {
    <mat-list-item>
      <h3 matListItemTitle>{{message.from}}</h3>
      <p matListItemLine>{{message.subject}}</p>
      <p matListItemLine class="demo-2">{{message.content}}</p>
    </mat-list-item>
  }
</mat-list>

----------------------------------------

TITLE: Defining Test Harnesses for Angular Material Option Components
DESCRIPTION: TypeScript declarations for testing utilities used with Angular Material option and option group components. Includes harness classes that extend CDK testing functionality with specific methods for interacting with Material option elements during tests.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { ComponentHarnessConstructor } from '@angular/cdk/testing';
import { ContentContainerComponentHarness } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

// @public
export class MatOptgroupHarness extends ComponentHarness {
    getLabelText(): Promise<string>;
    getOptions(filter?: OptionHarnessFilters): Promise<MatOptionHarness[]>;
    static hostSelector: string;
    isDisabled(): Promise<boolean>;
    static with<T extends MatOptgroupHarness>(this: ComponentHarnessConstructor<T>, options?: OptgroupHarnessFilters): HarnessPredicate<T>;
}

// @public
export class MatOptionHarness extends ContentContainerComponentHarness {
    click(): Promise<void>;
    getText(): Promise<string>;
    static hostSelector: string;
    isActive(): Promise<boolean>;
    isDisabled(): Promise<boolean>;
    isMultiple(): Promise<boolean>;
    isSelected(): Promise<boolean>;
    static with<T extends MatOptionHarness>(this: ComponentHarnessConstructor<T>, options?: OptionHarnessFilters): HarnessPredicate<T>;
}

// @public (undocumented)
export interface OptgroupHarnessFilters extends BaseHarnessFilters {
    // (undocumented)
    labelText?: string | RegExp;
}

// @public (undocumented)
export interface OptionHarnessFilters extends BaseHarnessFilters {
    // (undocumented)
    isSelected?: boolean;
    // (undocumented)
    text?: string | RegExp;
}

----------------------------------------

TITLE: Nested Tree Node Template with Outlet
DESCRIPTION: Demonstrates how to implement a nested tree node template with cdkTreeNodeOutlet for rendering child nodes.

LANGUAGE: html
CODE:
<cdk-nested-tree-node *cdkNodeDef="let node">
  {{node.value}}
  <ng-container cdkTreeNodeOutlet></ng-container>
</cdk-nested-tree-node>

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to start the Angular development server, which will compile and serve the application for local testing.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Disabling Options and Listbox in CDK for Angular
DESCRIPTION: Shows how to disable individual options using cdkOptionDisabled and the entire listbox using cdkListboxDisabled in Angular CDK.

LANGUAGE: HTML
CODE:
<ul cdkListbox [cdkListboxDisabled]="isListboxDisabled">
  <li cdkOption="red">Red</li>
  <li cdkOption="green" [cdkOptionDisabled]="isGreenDisabled">Green</li>
  <li cdkOption="blue">Blue</li>
</ul>

----------------------------------------

TITLE: Flat Tree Node with Padding
DESCRIPTION: Demonstrates how to implement padding in flat tree nodes using cdkTreeNodePadding directive.

LANGUAGE: html
CODE:
<cdk-tree-node *cdkNodeDef="let node" cdkNodePadding>
  {{node.value}}
</cdk-tree-node>

----------------------------------------

TITLE: Creating Custom Theme for Angular Material 2
DESCRIPTION: Demonstrates how to create a custom theme by defining primary, accent, and warn palettes, and combining them into a theme object.

LANGUAGE: scss
CODE:
@use '@angular/material' as mat;

$my-primary: mat.m2-define-palette(mat.$m2-indigo-palette, 500);
$my-accent: mat.m2-define-palette(mat.$m2-pink-palette, A200, A100, A400);

// The "warn" palette is optional and defaults to red if not specified.
$my-warn: mat.m2-define-palette(mat.$m2-red-palette);

$my-theme: mat.m2-define-light-theme((
 color: (
   primary: $my-primary,
   accent: $my-accent,
   warn: $my-warn,
 ),
 typography: mat.m2-define-typography-config(),
 density: 0,
));

----------------------------------------

TITLE: Implementing Determinate Progress Bar in Angular Material
DESCRIPTION: Demonstrates the usage of a determinate progress bar where the percentage of completion is known. This is the default mode and the progress is represented by the 'value' property.

LANGUAGE: html
CODE:
<!-- example(progress-bar-determinate) -->

----------------------------------------

TITLE: Implementing MatDialogHarness Class in TypeScript
DESCRIPTION: This class extends ContentContainerComponentHarness and provides methods for interacting with Material Dialog components in tests. It includes methods for getting dialog content, actions, and attributes.

LANGUAGE: typescript
CODE:
export class MatDialogHarness extends ContentContainerComponentHarness<MatDialogSection | string> {
    protected _actions: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement | null>;
    close(): Promise<void>;
    protected _content: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement | null>;
    getActionsText(): Promise<string>;
    getAriaDescribedby(): Promise<string | null>;
    getAriaLabel(): Promise<string | null>;
    getAriaLabelledby(): Promise<string | null>;
    getContentText(): Promise<string>;
    getId(): Promise<string | null>;
    getRole(): Promise<DialogRole | null>;
    getText(): Promise<string>;
    getTitleText(): Promise<string>;
    static hostSelector: string;
    protected _title: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement | null>;
    static with<T extends MatDialogHarness>(this: ComponentHarnessConstructor<T>, options?: DialogHarnessFilters): HarnessPredicate<T>;
}

----------------------------------------

TITLE: Implementing Multi-line Lists in Angular Material
DESCRIPTION: Shows how to create multi-line list items using matListItemTitle and matListItemLine directives for improved accessibility and formatting.

LANGUAGE: html
CODE:
<mat-list>
  <mat-list-item>
    <span matListItemTitle>Pepper</span>
    <span matListItemLine>Produced by a plant</span>
  </mat-list-item>
  <mat-list-item>
    <span matListItemTitle>Salt</span>
    <span matListItemLine>Extracted from sea water</span>
  </mat-list-item>
  <mat-list-item>
    <span matListItemTitle>Paprika</span>
    <span matListItemLine>Produced by dried and ground red peppers</span>
  </mat-list-item>
</mat-list>

----------------------------------------

TITLE: Styling Toolbar Content with CSS Flex
DESCRIPTION: CSS styles for positioning toolbar content using flexbox, including a spacer for pushing content to opposite ends.

LANGUAGE: css
CODE:
.example-spacer {
  flex: 1 1 auto;
}

----------------------------------------

TITLE: Setting Up Custom Typography in Angular Material Theme
DESCRIPTION: This snippet demonstrates how to configure custom typography settings in an Angular Material theme, including separate font families for plain and brand text, and custom font weights for different text styles.

LANGUAGE: scss
CODE:
@use '@angular/material' as mat;

html {
  @include mat.theme((
    color: mat.$violet-palette,
    typography: (
      plain-family: Roboto,
      brand-family: Open Sans,
      bold-weight: 900,
      medium-weight: 500,
      regular-weight: 300,
    ),
    density: 0,
  ));
}

----------------------------------------

TITLE: Improving Accessibility for Custom Form Field Control
DESCRIPTION: This snippet shows how to improve accessibility by adding ARIA attributes to the custom form field control, linking it to the label provided by the parent mat-form-field.

LANGUAGE: typescript
CODE:
export class MyTelInput implements MatFormFieldControl<MyTel> {
  ...

  constructor(...
              @Optional() public parentFormField: MatFormField) {
  ...
}

@Component({
  selector: 'example-tel-input',
  template: `
    <div role="group" [formGroup]="parts"
         [attr.aria-describedby]="describedBy"
         [attr.aria-labelledby]="parentFormField?.getLabelId()">
      ...
    </div>
  `,
  ...
})

----------------------------------------

TITLE: Customizing System Tokens in Angular Material Theme
DESCRIPTION: This snippet demonstrates how to override specific system-level tokens in an Angular Material theme using the mat.theme-overrides mixin, allowing for fine-grained customization of theme variables.

LANGUAGE: scss
CODE:
@use '@angular/material' as mat;

html {
  color-scheme: light dark;
  @include mat.theme((
    color: mat.$violet-palette,
    typography: Roboto,
    density: 0
  ));

  .example-orange-primary-container {
    @include mat.theme-overrides((
      primary-container: #84ffff
    ));
  }
}

----------------------------------------

TITLE: Implementing Fixed Size Virtual Scrolling with Buffer in Angular
DESCRIPTION: Demonstrates the use of FixedSizeVirtualScrollStrategy with buffer parameters to optimize rendering performance for fixed-size items.

LANGUAGE: html
CODE:
<!-- example(cdk-virtual-scroll-fixed-buffer) -->

----------------------------------------

TITLE: Rendering MapPolyline in Angular Template
DESCRIPTION: This HTML template code shows how to use the GoogleMap and MapPolyline components in an Angular template. It sets the map's height, width, center, and zoom, and adds a polyline using the vertices defined in the component.

LANGUAGE: html
CODE:
<!-- google-maps-demo.component.html -->
<google-map height="400px" width="750px" [center]="center" [zoom]="zoom">
  <map-polyline [path]="vertices" />
</google-map>

----------------------------------------

TITLE: Basic Usage of Angular Material Paginator
DESCRIPTION: Demonstrates the basic HTML structure for using the <mat-paginator> component in Angular Material.

LANGUAGE: html
CODE:
<mat-paginator>

----------------------------------------

TITLE: Defining MatSelectHarness Class in TypeScript for Angular Material Testing
DESCRIPTION: This code snippet defines the MatSelectHarness class, which extends MatFormFieldControlHarness. It provides methods for interacting with and querying Angular Material select components, including opening/closing the select, getting options and option groups, and checking various states of the select.

LANGUAGE: typescript
CODE:
export class MatSelectHarness extends MatFormFieldControlHarness {
    blur(): Promise<void>;
    clickOptions(filter?: OptionHarnessFilters): Promise<void>;
    close(): Promise<void>;
    focus(): Promise<void>;
    getOptionGroups(filter?: Omit<OptgroupHarnessFilters, 'ancestor'>): Promise<MatOptgroupHarness[]>;
    getOptions(filter?: Omit<OptionHarnessFilters, 'ancestor'>): Promise<MatOptionHarness[]>;
    getValueText(): Promise<string>;
    // (undocumented)
    static hostSelector: string;
    isDisabled(): Promise<boolean>;
    isEmpty(): Promise<boolean>;
    isFocused(): Promise<boolean>;
    isMultiple(): Promise<boolean>;
    isOpen(): Promise<boolean>;
    isRequired(): Promise<boolean>;
    isValid(): Promise<boolean>;
    open(): Promise<void>;
    static with<T extends MatSelectHarness>(this: ComponentHarnessConstructor<T>, options?: SelectHarnessFilters): HarnessPredicate<T>;
}

----------------------------------------

TITLE: Implementing MapInfoWindow in Angular TypeScript Component
DESCRIPTION: This snippet shows how to implement the MapInfoWindow component in an Angular TypeScript file. It demonstrates importing necessary modules, setting up the component, and defining methods for adding markers and opening the info window.

LANGUAGE: typescript
CODE:
// google-maps-demo.component.ts
import {Component, ViewChild} from '@angular/core';
import {GoogleMap, MapInfoWindow, MapMarker} from '@angular/google-maps';

@Component({
  selector: 'google-map-demo',
  templateUrl: 'google-map-demo.html',
  imports: [GoogleMap, MapInfoWindow, MapMarker],
})
export class GoogleMapDemo {
  @ViewChild(MapInfoWindow) infoWindow: MapInfoWindow;

  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};
  markerPositions: google.maps.LatLngLiteral[] = [];
  zoom = 4;

  addMarker(event: google.maps.MapMouseEvent) {
    this.markerPositions.push(event.latLng.toJSON());
  }

  openInfoWindow(marker: MapMarker) {
    this.infoWindow.open(marker);
  }
}

----------------------------------------

TITLE: Removing HammerJS Script Import
DESCRIPTION: Example of removing HammerJS script import from index.html file.

LANGUAGE: html
CODE:
<script src="https://my-cdn.io/hammer.min.js"></script>

----------------------------------------

TITLE: Positioning Toolbar Content with Flex Layout
DESCRIPTION: Demonstrates how to position toolbar content using flex layout, with title on the left and actions on the right.

LANGUAGE: html
CODE:
<mat-toolbar>
  <span>My Application</span>
  <span class="example-spacer"></span>
  <button mat-button>Action 1</button>
  <button mat-button>Action 2</button>
</mat-toolbar>

----------------------------------------

TITLE: Implementing MapInfoWindow in Angular HTML Template
DESCRIPTION: This snippet demonstrates how to use the MapInfoWindow component in an Angular HTML template. It shows the setup of a Google Map with markers and an info window, including event bindings for adding markers and opening the info window.

LANGUAGE: html
CODE:
<!-- google-maps-demo.component.html -->
<google-map
  height="400px"
  width="750px"
  [center]="center"
  [zoom]="zoom"
  (mapClick)="addMarker($event)">
    @for (position of markerPositions; track position) {
      <map-advanced-marker
        #marker="mapAdvancedMarker"
        [position]="position"
        (mapClick)="openInfoWindow(marker)" />
    }
    <map-info-window>Info Window content</map-info-window>
</google-map>

----------------------------------------

TITLE: Defining MatRadioGroupHarness Class in TypeScript
DESCRIPTION: This class extends ComponentHarness and provides methods for interacting with and querying the state of a radio group in tests. It includes methods for checking radio buttons, getting the checked radio button, and retrieving various properties of the radio group.

LANGUAGE: typescript
CODE:
export class MatRadioGroupHarness extends ComponentHarness {
    checkRadioButton(filter?: RadioButtonHarnessFilters): Promise<void>;
    protected static _checkRadioGroupName(harness: MatRadioGroupHarness, name: string): Promise<boolean>;
    getCheckedRadioButton(): Promise<MatRadioButtonHarness | null>;
    getCheckedValue(): Promise<string | null>;
    getId(): Promise<string | null>;
    getName(): Promise<string | null>;
    getRadioButtons(filter?: RadioButtonHarnessFilters): Promise<MatRadioButtonHarness[]>;
    static hostSelector: string;
    static with<T extends MatRadioGroupHarness>(this: ComponentHarnessConstructor<T>, options?: RadioGroupHarnessFilters): HarnessPredicate<T>;
}

----------------------------------------

TITLE: Implementing RTL-Mirrored Icon in Angular Material
DESCRIPTION: Example showing how to implement a mirrored icon for RTL (Right-to-Left) layouts using the mat-icon-rtl-mirror CSS class. Used when certain icons need to be flipped in RTL contexts.

LANGUAGE: html
CODE:
<mat-icon class="mat-icon-rtl-mirror" svgIcon="thumb-up"></mat-icon>

----------------------------------------

TITLE: Defining MatTooltip Class in Angular
DESCRIPTION: This snippet defines the MatTooltip class, which implements the core functionality of the tooltip directive. It includes methods for showing, hiding, and toggling the tooltip, as well as various configuration options.

LANGUAGE: typescript
CODE:
export class MatTooltip implements OnDestroy, AfterViewInit {
    constructor(...args: unknown[]);
    protected _addOffset(position: ConnectedPosition): ConnectedPosition;
    protected _dir: Directionality;
    get disabled(): boolean;
    set disabled(value: BooleanInput);
    _getOrigin(): {
        main: OriginConnectionPosition;
        fallback: OriginConnectionPosition;
    };
    _getOverlayPosition(): {
        main: OverlayConnectionPosition;
        fallback: OverlayConnectionPosition;
    };
    hide(delay?: number): void;
    get hideDelay(): number;
    set hideDelay(value: NumberInput);
    _isTooltipVisible(): boolean;
    get message(): string;
    set message(value: string | null | undefined);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    _overlayRef: OverlayRef | null;
    get position(): TooltipPosition;
    set position(value: TooltipPosition);
    get positionAtOrigin(): boolean;
    set positionAtOrigin(value: BooleanInput);
    show(delay?: number, origin?: {
        x: number;
        y: number;
    }): void;
    get showDelay(): number;
    set showDelay(value: NumberInput);
    toggle(origin?: {
        x: number;
        y: number;
    }): void;
    get tooltipClass(): string | string[] | Set<string> | {
        [key: string]: any;
    };
    set tooltipClass(value: string | string[] | Set<string> | {
        [key: string]: any;
    });
    _tooltipInstance: TooltipComponent | null;
    touchGestures: TooltipTouchGestures;
    static ɵdir: i0.ɵɵDirectiveDeclaration<MatTooltip, "[matTooltip]", ["matTooltip"], { "position": { "alias": "matTooltipPosition"; "required": false; }; "positionAtOrigin": { "alias": "matTooltipPositionAtOrigin"; "required": false; }; "disabled": { "alias": "matTooltipDisabled"; "required": false; }; "showDelay": { "alias": "matTooltipShowDelay"; "required": false; }; "hideDelay": { "alias": "matTooltipHideDelay"; "required": false; }; "touchGestures": { "alias": "matTooltipTouchGestures"; "required": false; }; "message": { "alias": "matTooltip"; "required": false; }; "tooltipClass": { "alias": "matTooltipClass"; "required": false; }; }, {}, never, never, true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MatTooltip, never>;
}

----------------------------------------

TITLE: Configuring Sort Order and Behavior in Angular Material
DESCRIPTION: Example demonstrating how to customize sort order and behavior using matSortStart and matSortDisableClear directives. Shows configuration for both global and individual header settings.

LANGUAGE: html
CODE:
<table matSort matSortStart="desc" matSortDisableClear>
  <tr>
    <th mat-sort-header="id" start="desc" disableClear="true">ID</th>
    <th mat-sort-header="name">Name</th>
  </tr>
</table>

----------------------------------------

TITLE: Google Maps Directions Template in Angular
DESCRIPTION: HTML template that renders the Google Map with directions using the MapDirectionsRenderer component and async pipe for handling the directions observable.

LANGUAGE: html
CODE:
<!-- google-maps-demo.component.html -->
<google-map height="400px" width="750px" [center]="center" [zoom]="zoom">
  @if (directionsResults$ | async; as directionsResults) {
    <map-directions-renderer [directions]="directionsResults" />
  }
</google-map>

----------------------------------------

TITLE: Defining RadioButtonHarnessFilters Interface in TypeScript
DESCRIPTION: This interface extends BaseHarnessFilters and defines additional filter options specific to radio buttons, including checked state, label text, and name.

LANGUAGE: typescript
CODE:
export interface RadioButtonHarnessFilters extends BaseHarnessFilters {
    checked?: boolean;
    label?: string | RegExp;
    name?: string;
}

----------------------------------------

TITLE: Defining Angular Material Radio Components and Interfaces
DESCRIPTION: TypeScript definitions for Angular Material Radio components including the MatRadioButton, MatRadioGroup, and supporting interfaces. Includes injection tokens, event emitters, and component configuration options.

LANGUAGE: typescript
CODE:
import { AfterContentInit } from '@angular/core';
import { AfterViewInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { DoCheck } from '@angular/core';
import { ElementRef } from '@angular/core';
import { EventEmitter } from '@angular/core';
import { FocusOrigin } from '@angular/cdk/a11y';
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/bidi';
import { InjectionToken } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';
import { QueryList } from '@angular/core';

export const MAT_RADIO_DEFAULT_OPTIONS: InjectionToken<MatRadioDefaultOptions>;

export function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions;

export const MAT_RADIO_GROUP: InjectionToken<MatRadioGroup>;

export const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any;

export class MatRadioButton implements OnInit, AfterViewInit, DoCheck, OnDestroy {
    constructor(...args: unknown[]);
    ariaDescribedby: string;
    ariaLabel: string;
    ariaLabelledby: string;
    readonly change: EventEmitter<MatRadioChange>;
    get checked(): boolean;
    set checked(value: boolean);
    get color(): ThemePalette;
    set color(newValue: ThemePalette);
    get disabled(): boolean;
    set disabled(value: boolean);
    get disabledInteractive(): boolean;
    set disabledInteractive(value: boolean);
    disableRipple: boolean;
    protected _elementRef: ElementRef<any>;
    focus(options?: FocusOptions, origin?: FocusOrigin): void;
    id: string;
    _inputElement: ElementRef<HTMLInputElement>;
    get inputId(): string;
    _isRippleDisabled(): boolean;
    get labelPosition(): 'before' | 'after';
    set labelPosition(value: "before" | "after");
    _markForCheck(): void;
    name: string;
    static ngAcceptInputType_checked: unknown;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_disabledInteractive: unknown;
    static ngAcceptInputType_disableRipple: unknown;
    static ngAcceptInputType_required: unknown;
    static ngAcceptInputType_tabIndex: unknown;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    _noopAnimations: boolean;
    _onInputInteraction(event: Event): void;
    _onTouchTargetClick(event: Event): void;
    radioGroup: MatRadioGroup;
    get required(): boolean;
    set required(value: boolean);
    _rippleTrigger: ElementRef<HTMLElement>;
    protected _setDisabled(value: boolean): void;
    tabIndex: number;
    get value(): any;
    set value(value: any);
    static ɵcmp: i0.ɵɵComponentDeclaration<MatRadioButton, "mat-radio-button", ["matRadioButton"], { "id": { "alias": "id"; "required": false; }; "name": { "alias": "name"; "required": false; }; "ariaLabel": { "alias": "aria-label"; "required": false; }; "ariaLabelledby": { "alias": "aria-labelledby"; "required": false; }; "ariaDescribedby": { "alias": "aria-describedby"; "required": false; }; "disableRipple": { "alias": "disableRipple"; "required": false; }; "tabIndex": { "alias": "tabIndex"; "required": false; }; "checked": { "alias": "checked"; "required": false; }; "value": { "alias": "value"; "required": false; }; "labelPosition": { "alias": "labelPosition"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "required": { "alias": "required"; "required": false; }; "color": { "alias": "color"; "required": false; }; "disabledInteractive": { "alias": "disabledInteractive"; "required": false; }; }, { "change": "change"; }, never, ["*"], true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MatRadioButton, never>;
}

export class MatRadioChange<T = any> {
    constructor(
    source: MatRadioButton,
    value: T);
    source: MatRadioButton;
    value: T;
}

export interface MatRadioDefaultOptions {
    color: ThemePalette;
    disabledInteractive?: boolean;
}

export class MatRadioGroup implements AfterContentInit, OnDestroy, ControlValueAccessor {
    constructor(...args: unknown[]);
    readonly change: EventEmitter<MatRadioChange>;
    _checkSelectedRadioButton(): void;
    color: ThemePalette;
    _controlValueAccessorChangeFn: (value: any) => void;
    get disabled(): boolean;
    set disabled(value: boolean);
    get disabledInteractive(): boolean;
    set disabledInteractive(value: boolean);
    _emitChangeEvent(): void;
    get labelPosition(): 'before' | 'after';
    set labelPosition(v: "before" | "after");
    _markRadiosForCheck(): void;
    get name(): string;
    set name(value: string);
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_disabledInteractive: unknown;
    static ngAcceptInputType_required: unknown;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    onTouched: () => any;
    _radios: QueryList<MatRadioButton>;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    get required(): boolean;
    set required(value: boolean);
    get selected(): MatRadioButton | null;
    set selected(selected: MatRadioButton | null);
    setDisabledState(isDisabled: boolean): void;
    _touch(): void;
    get value(): any;
    set value(newValue: any);
    writeValue(value: any): void;
    static ɵdir: i0.ɵɵDirectiveDeclaration<MatRadioGroup, "mat-radio-group", ["matRadioGroup"], { "color": { "alias": "color"; "required": false; }; "name": { "alias": "name"; "required": false; }; "labelPosition": { "alias": "labelPosition"; "required": false; }; "value": { "alias": "value"; "required": false; }; "selected": { "alias": "selected"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "required": { "alias": "required"; "required": false; }; "disabledInteractive": { "alias": "disabledInteractive"; "required": false; }; }, { "change": "change"; }, ["_radios"], never, true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MatRadioGroup, never>;
}

export class MatRadioModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<MatRadioModule, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<MatRadioModule>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<MatRadioModule, never, [typeof MatCommonModule, typeof MatRippleModule, typeof MatRadioGroup, typeof MatRadioButton], [typeof MatCommonModule, typeof MatRadioGroup, typeof MatRadioButton]>;
}

----------------------------------------

TITLE: Defining RadioGroupHarnessFilters Interface in TypeScript
DESCRIPTION: This interface extends BaseHarnessFilters and defines additional filter options specific to radio groups, including the name of the radio group.

LANGUAGE: typescript
CODE:
export interface RadioGroupHarnessFilters extends BaseHarnessFilters {
    name?: string;
}

----------------------------------------

TITLE: Defining Multiple Themes in Angular Material 2
DESCRIPTION: Example of how to define and apply multiple themes in a single file, using media queries to switch between them.

LANGUAGE: scss
CODE:
@use '@angular/material' as mat;

// Define a dark theme
$dark-theme: mat.m2-define-dark-theme((
 color: (
   primary: mat.m2-define-palette(mat.$m2-pink-palette),
   accent: mat.m2-define-palette(mat.$m2-blue-grey-palette),
 ),
  // Only include `typography` and `density` in the default dark theme.
  typography: mat.m2-define-typography-config(),
  density: 0,
));

// Define a light theme
$light-theme: mat.m2-define-light-theme((
 color: (
   primary: mat.m2-define-palette(mat.$m2-indigo-palette),
   accent: mat.m2-define-palette(mat.$m2-pink-palette),
 ),
));

// Apply the dark theme by default
@include mat.core-theme($dark-theme);
@include mat.button-theme($dark-theme);

// Apply the light theme only when the user prefers light themes.
@media (prefers-color-scheme: light) {
 // Use the `-color` mixins to only apply color styles without reapplying the same
 // typography and density styles.
 @include mat.core-color($light-theme);
 @include mat.button-color($light-theme);
}

----------------------------------------

TITLE: Running Angular Development Server
DESCRIPTION: Starts the Angular development server on port 4200 with auto-reload capabilities

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Creating Inset Divider in Angular Material
DESCRIPTION: Demonstrates how to create an inset divider using the [inset] attribute.

LANGUAGE: html
CODE:
<mat-divider [inset]="true"></mat-divider>

----------------------------------------

TITLE: Customizing Component Tokens in Angular Material
DESCRIPTION: This example shows how to use the component-specific overrides mixin to customize individual tokens for an Angular Material component, in this case modifying the Card component's styles.

LANGUAGE: scss
CODE:
html {
  @include mat.card-overrides((
    elevated-container-color: red,
    elevated-container-shape: 32px,
    title-text-size: 2rem,
  ));
}

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Builds the Angular project and outputs artifacts to the dist directory

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Defining Angular Material Divider Testing Types and Harness
DESCRIPTION: Defines the testing harness and types for Angular Material's divider component. Includes a DividerHarnessFilters interface and MatDividerHarness class with methods for testing divider orientation and inset properties.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

// @public (undocumented)
export interface DividerHarnessFilters extends BaseHarnessFilters {
}

// @public
export class MatDividerHarness extends ComponentHarness {
    // (undocumented)
    getOrientation(): Promise<'horizontal' | 'vertical'>;
    // (undocumented)
    static hostSelector: string;
    // (undocumented)
    isInset(): Promise<boolean>;
    // (undocumented)
    static with(options?: DividerHarnessFilters): HarnessPredicate<MatDividerHarness>;
}

----------------------------------------

TITLE: Customizing Typography in Angular Material 2
DESCRIPTION: Demonstrates how to create a custom typography configuration and apply it to a theme.

LANGUAGE: scss
CODE:
@use '@angular/material' as mat;

$my-custom-typography-config: mat.m2-define-typography-config(
  $headline-1: mat.m2-define-typography-level(112px, 112px, 300, $letter-spacing: -0.05em),
  $headline-2: mat.m2-define-typography-level(56px, 56px, 400, $letter-spacing: -0.02em),
  $headline-3: mat.m2-define-typography-level(45px, 48px, 400, $letter-spacing: -0.005em),
  $headline-4: mat.m2-define-typography-level(34px, 40px, 400),
  $headline-5: mat.m2-define-typography-level(24px, 32px, 400),
  // ...
);

----------------------------------------

TITLE: Creating a Disabled Chip in Angular Material
DESCRIPTION: Demonstrates how to create a disabled chip using the 'disabled' Input property on a mat-chip element.

LANGUAGE: html
CODE:
<mat-chip disabled>Orange</mat-chip>

----------------------------------------

TITLE: Angular Material Expansion Constants and Tokens
DESCRIPTION: Defines constants and injection tokens used for expansion panel configuration, including animation timing and default options.

LANGUAGE: typescript
CODE:
export const EXPANSION_PANEL_ANIMATION_TIMING = "225ms cubic-bezier(0.4,0.0,0.2,1)";

export const MAT_ACCORDION: InjectionToken<MatAccordionBase>;

export const MAT_EXPANSION_PANEL: InjectionToken<MatExpansionPanelBase>;

export const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS: InjectionToken<MatExpansionPanelDefaultOptions>;

----------------------------------------

TITLE: Implementing Menu Trigger in Angular CDK
DESCRIPTION: Example showing how to create a menu trigger using cdkMenuTriggerFor directive that references a template containing the menu content.

LANGUAGE: html
CODE:
<button [cdkMenuTriggerFor]="menu">Open</button>
<ng-template #menu>
  <div cdkMenu>....</div>
</ng-template>

----------------------------------------

TITLE: Adding Avatars to List Items in Angular Material
DESCRIPTION: Shows how to include avatar images in list items using the matListItemAvatar attribute on an img tag.

LANGUAGE: html
CODE:
<mat-list>
  @for (message of messages; track message) {
    <mat-list-item>
      <img matListItemAvatar src="..." alt="...">
      <h3 matListItemTitle>{{message.from}}</h3>
      <p matListItemLine>
        <span>{{message.subject}}</span>
        <span class="demo-2"> -- {{message.content}}</span>
      </p>
    </mat-list-item>
  }
</mat-list>

----------------------------------------

TITLE: Configuring Custom Density in Angular Material Theme
DESCRIPTION: This example shows how to set a custom density value in an Angular Material theme, which affects the spacing and layout of components. The density is set to -2, resulting in a more compact layout.

LANGUAGE: scss
CODE:
@use '@angular/material' as mat;

html {
  @include mat.theme((
    color: mat.$violet-palette,
    typography: Roboto,
    density: -2,
  ));
}

----------------------------------------

TITLE: Installing Angular Material via Angular CLI
DESCRIPTION: Command to add Angular Material to an Angular project using the ng add command. This installs Angular Material, CDK, and Angular Animations.

LANGUAGE: bash
CODE:
ng add @angular/material

----------------------------------------

TITLE: MatStepperIntl Provider Factory Definition
DESCRIPTION: Factory provider definition for MatStepperIntl service that handles stepper internationalization. Includes the provider configuration and factory function.

LANGUAGE: typescript
CODE:
export const MAT_STEPPER_INTL_PROVIDER: {
    provide: typeof MatStepperIntl;
    deps: Optional[][];
    useFactory: typeof MAT_STEPPER_INTL_PROVIDER_FACTORY;
};

export function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl): MatStepperIntl;

----------------------------------------

TITLE: Defining MatPaginatorHarness in TypeScript for Angular Material Testing
DESCRIPTION: This code snippet defines the MatPaginatorHarness class, which extends ComponentHarness. It provides methods for interacting with and testing the Angular Material paginator component, including navigation, page size manipulation, and state querying.

LANGUAGE: TypeScript
CODE:
// @public
export class MatPaginatorHarness extends ComponentHarness {
    getPageSize(): Promise<number>;
    getRangeLabel(): Promise<string>;
    goToFirstPage(): Promise<void>;
    goToLastPage(): Promise<void>;
    goToNextPage(): Promise<void>;
    goToPreviousPage(): Promise<void>;
    static hostSelector: string;
    isNextPageDisabled(): Promise<boolean>;
    // (undocumented)
    isPreviousPageDisabled(): Promise<boolean>;
    // (undocumented)
    _rangeLabel: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement>;
    // (undocumented)
    _select: _angular_cdk_testing.AsyncFactoryFn<MatSelectHarness | null>;
    setPageSize(size: number): Promise<void>;
    static with<T extends MatPaginatorHarness>(this: ComponentHarnessConstructor<T>, options?: PaginatorHarnessFilters): HarnessPredicate<T>;
}

----------------------------------------

TITLE: MatStep Component Class Definition
DESCRIPTION: Core implementation of an individual step within the material stepper, extending CdkStep with additional styling and error state functionality.

LANGUAGE: typescript
CODE:
export class MatStep extends CdkStep implements ErrorStateMatcher, AfterContentInit, OnDestroy {
    color: ThemePalette;
    isErrorState(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean;
    _lazyContent: MatStepContent;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    _portal: TemplatePortal;
    stepLabel: MatStepLabel;
}

----------------------------------------

TITLE: Accessing Sidenav Container Scroll Events in Angular
DESCRIPTION: Shows how to react to scrolling events inside a <mat-sidenav-container> by accessing the underlying CdkScrollable instance in Angular Material.

LANGUAGE: typescript
CODE:
class YourComponent implements AfterViewInit {
  @ViewChild(MatSidenavContainer) sidenavContainer: MatSidenavContainer;

  ngAfterViewInit() {
    this.sidenavContainer.scrollable.elementScrolled().subscribe(() => /* react to scrolling */);
  }
}

----------------------------------------

TITLE: Configuring Global Bottom Sheet Defaults
DESCRIPTION: Demonstrates how to set default configuration options for all bottom sheets in an application.

LANGUAGE: typescript
CODE:
@NgModule({
  providers: [
    {provide: MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, useValue: {hasBackdrop: false}}
  ]
})

----------------------------------------

TITLE: Using Compare Function in CDK Listbox for Angular
DESCRIPTION: Demonstrates how to use a custom comparison function for complex object values in a CDK listbox using the cdkListboxCompareWith input.

LANGUAGE: HTML
CODE:
<ul cdkListbox [cdkListboxValue]="selectedColors" [cdkListboxCompareWith]="compareColors">
  <li cdkOption="red">Red</li>
  <li cdkOption="green">Green</li>
  <li cdkOption="blue">Blue</li>
</ul>

----------------------------------------

TITLE: Nested Tree Node Template with Node Outlet
DESCRIPTION: Template for nested tree nodes that includes matTreeNodeOutlet to specify where child nodes should be rendered.

LANGUAGE: html
CODE:
<mat-nested-tree-node *matNodeDef="let node">
  {{node.value}}
  <ng-container matTreeNodeOutlet></ng-container>
</mat-nested-tree-node>

----------------------------------------

TITLE: Displaying Basic Tooltip in Angular
DESCRIPTION: This snippet demonstrates how to use the basic tooltip component in Angular Material.

LANGUAGE: html
CODE:
<!-- example(tooltip-overview) -->

----------------------------------------

TITLE: Defining Angular CDK Layout Module Classes and Interfaces
DESCRIPTION: TypeScript declarations for the Angular CDK Layout module, including BreakpointObserver, MediaMatcher, LayoutModule classes and related interfaces. Provides functionality for responsive layout and media query handling.

LANGUAGE: typescript
CODE:
import * as i0 from '@angular/core';
import { Observable } from 'rxjs';
import { OnDestroy } from '@angular/core';

// @public
export class BreakpointObserver implements OnDestroy {
    constructor(...args: unknown[]);
    isMatched(value: string | readonly string[]): boolean;
    ngOnDestroy(): void;
    observe(value: string | readonly string[]): Observable<BreakpointState>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<BreakpointObserver, never>;
    // (undocumented)
    static ɵprov: i0.ɵɵInjectableDeclaration<BreakpointObserver>;
}

// @public (undocumented)
export const Breakpoints: {
    XSmall: string;
    Small: string;
    Medium: string;
    Large: string;
    XLarge: string;
    Handset: string;
    Tablet: string;
    Web: string;
    HandsetPortrait: string;
    TabletPortrait: string;
    WebPortrait: string;
    HandsetLandscape: string;
    TabletLandscape: string;
    WebLandscape: string;
};

// @public
export interface BreakpointState {
    breakpoints: {
        [key: string]: boolean;
    };
    matches: boolean;
}

// @public (undocumented)
export class LayoutModule {
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<LayoutModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<LayoutModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<LayoutModule, never, never, never>;
}

// @public
export class MediaMatcher {
    constructor(...args: unknown[]);
    matchMedia(query: string): MediaQueryList;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<MediaMatcher, never>;
    // (undocumented)
    static ɵprov: i0.ɵɵInjectableDeclaration<MediaMatcher>;
}

----------------------------------------

TITLE: Implementing Input Coercion in Angular Component
DESCRIPTION: Demonstrates usage of coerceBooleanProperty, coerceNumberProperty, and coerceElement utility functions in an Angular directive. Shows how to handle type conversion for disabled state, delay timing, and element references while providing a cleaner API for consumers.

LANGUAGE: typescript
CODE:
import {Directive, ElementRef} from '@angular/core';
import {
  coerceBooleanProperty,
  BooleanInput,
  NumberInput,
  coerceNumberProperty,
  coerceElement,
} from '@angular/cdk/coercion';

@Directive({
  selector: 'my-button',
  host: {
    '[disabled]': 'disabled',
    '(click)': 'greet()',
  }
})
class MyButton {
  // Using `coerceBooleanProperty` allows for the disabled value of a button to be set as
  // `<my-button disabled></my-button>` instead of `<my-button [disabled]="true"></my-button>`.
  // It also allows for a string to be passed like `<my-button disabled="true"></my-button>`.
  @Input()
  get disabled() { return this._disabled; }
  set disabled(value: BooleanInput) {
    this._disabled = coerceBooleanProperty(value);
  }
  private _disabled = false;

  // `coerceNumberProperty` turns any value coming in from the view into a number, allowing the
  // consumer to use a shorthand string while storing the parsed number in memory. E.g. the consumer can write:
  // `<my-button greetDelay="500"></my-button>` instead of `<my-button [greetDelay]="500"></my-button>`.
  // The second parameter specifies a fallback value to be used if the value can't be
  // parsed to a number.
  @Input()
  get greetDelay() { return this._greetDelay; }
  set greetDelay(value: NumberInput) {
    this._greetDelay = coerceNumberProperty(value, 0);
  }
  private _greetDelay = 0;

  greet() {
    setTimeout(() => alert('Hello!'), this.greetDelay);
  }

  // `coerceElement` allows you to accept either an `ElementRef`
  // or a raw DOM node and to always return a DOM node.
  getElement(elementOrRef: ElementRef<HTMLElement> | HTMLElement): HTMLElement {
    return coerceElement(elementOrRef);
  }
}

----------------------------------------

TITLE: Implementing MapGeocoder in Angular Component
DESCRIPTION: Example of how to use MapGeocoder service in an Angular component to geocode an address. Shows dependency injection and subscription to geocoding results.

LANGUAGE: typescript
CODE:
// google-maps-demo.component.ts
import {Component} from '@angular/core';
import {MapGeocoder} from '@angular/google-maps';

@Component({
  selector: 'google-map-demo',
  templateUrl: 'google-map-demo.html',
})
export class GoogleMapDemo {
  constructor(geocoder: MapGeocoder) {
    geocoder.geocode({
      address: '1600 Amphitheatre Parkway, Mountain View, CA'
    }).subscribe(({results}) => {
      console.log(results);
    });
  }
}

----------------------------------------

TITLE: Defining Keyboard Key Codes in TypeScript
DESCRIPTION: Exports constant values representing keyboard key codes for use in keyboard event handling. Includes letter keys (A-Z), number keys (0-9), function keys (F1-F12), special characters, modifier keys, and numpad keys. Also includes a utility function hasModifierKey() for checking modifier key states.

LANGUAGE: typescript
CODE:
// @public (undocumented)
export const A = 65;

// @public (undocumented)
export const ALT = 18;

// @public (undocumented)
export const APOSTROPHE = 192;

// Additional key codes...

// @public
export function hasModifierKey(event: KeyboardEvent, ...modifiers: ModifierKey[]): boolean;

// @public (undocumented)
export type ModifierKey = 'altKey' | 'shiftKey' | 'ctrlKey' | 'metaKey';

----------------------------------------

TITLE: Implementing Multiple Selection in CDK Listbox for Angular
DESCRIPTION: Demonstrates how to enable multiple selection in a CDK listbox by adding the cdkListboxMultiple attribute to the listbox element.

LANGUAGE: HTML
CODE:
<ul cdkListbox cdkListboxMultiple>
  <li cdkOption="red">Red</li>
  <li cdkOption="green">Green</li>
  <li cdkOption="blue">Blue</li>
</ul>

----------------------------------------

TITLE: Implementing Vertical Divider in Angular Material
DESCRIPTION: Shows how to create a vertical divider using the [vertical] attribute.

LANGUAGE: html
CODE:
<mat-divider [vertical]="true"></mat-divider>

----------------------------------------

TITLE: Implementing Element Locator Methods in a Component Harness
DESCRIPTION: Example of implementing methods to locate trigger and content elements in a popup component harness.

LANGUAGE: TypeScript
CODE:
class MyPopupHarness extends ComponentHarness {
  static hostSelector = 'my-popup';

  /** Gets the trigger element */
  getTriggerElement = this.locatorFor('button');

  /** Gets the content element. */
  getContentElement = this.locatorForOptional('.my-popup-content');
}

----------------------------------------

TITLE: Virtual Scrolling with Parent Tag Requirements in Angular
DESCRIPTION: Demonstrates how to implement virtual scrolling for elements with specific parent tag requirements, such as <tr> or <li>.

LANGUAGE: html
CODE:
<!-- example(cdk-virtual-scroll-dl) -->

----------------------------------------

TITLE: Creating ComponentPortal in Angular TypeScript
DESCRIPTION: Shows how to create a ComponentPortal from a component type in an Angular component's TypeScript file. ComponentPortal is used to create a portal from a component class.

LANGUAGE: typescript
CODE:
ngAfterViewInit() {
  this.userSettingsPortal = new ComponentPortal(UserSettingsComponent);
}

----------------------------------------

TITLE: Defining MatMenuHarness and MatMenuItemHarness Classes in TypeScript
DESCRIPTION: This snippet defines two main classes, MatMenuHarness and MatMenuItemHarness, which extend ContentContainerComponentHarness. These classes provide methods for interacting with and testing Angular Material menu components, including opening/closing menus, clicking items, and checking various states.

LANGUAGE: typescript
CODE:
// @public
export class MatMenuHarness extends ContentContainerComponentHarness<string> {
    blur(): Promise<void>;
    clickItem(itemFilter: Omit<MenuItemHarnessFilters, 'ancestor'>, ...subItemFilters: Omit<MenuItemHarnessFilters, 'ancestor'>[]): Promise<void>;
    close(): Promise<void>;
    focus(): Promise<void>;
    getItems(filters?: Omit<MenuItemHarnessFilters, 'ancestor'>): Promise<MatMenuItemHarness[]>;
    // (undocumented)
    protected getRootHarnessLoader(): Promise<HarnessLoader>;
    getTriggerText(): Promise<string>;
    static hostSelector: string;
    isDisabled(): Promise<boolean>;
    isFocused(): Promise<boolean>;
    isOpen(): Promise<boolean>;
    open(): Promise<void>;
    static with<T extends MatMenuHarness>(this: ComponentHarnessConstructor<T>, options?: MenuHarnessFilters): HarnessPredicate<T>;
}

// @public (undocumented)
export class MatMenuItemHarness extends ContentContainerComponentHarness<string> {
    blur(): Promise<void>;
    click(): Promise<void>;
    focus(): Promise<void>;
    getSubmenu(): Promise<MatMenuHarness | null>;
    getText(): Promise<string>;
    hasSubmenu(): Promise<boolean>;
    static hostSelector: string;
    isDisabled(): Promise<boolean>;
    isFocused(): Promise<boolean>;
    static with<T extends MatMenuItemHarness>(this: ComponentHarnessConstructor<T>, options?: MenuItemHarnessFilters): HarnessPredicate<T>;
}

----------------------------------------

TITLE: Creating DomPortal in Angular HTML and TypeScript
DESCRIPTION: Shows how to create a DomPortal from a native DOM element in Angular. It includes both the HTML element definition and the TypeScript code to create the DomPortal instance.

LANGUAGE: html
CODE:
<div #domPortalContent>Some content here</div>

LANGUAGE: typescript
CODE:
@ViewChild('domPortalContent') domPortalContent: ElementRef<HTMLElement>;
ngAfterViewInit() {
  this.domPortal = new DomPortal(this.domPortalContent);
}

----------------------------------------

TITLE: Updating NgModule GestureConfig Provider
DESCRIPTION: Example of how GestureConfig was previously configured in NgModule, which needs to be updated or removed in v9.

LANGUAGE: typescript
CODE:
import {GestureConfig} from '@angular/material/core';

@NgModule({
  ...
  providers: [
    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}
  ],
})
export class AppModule {}

----------------------------------------

TITLE: Implementing MapMarkerClusterer in Angular Component
DESCRIPTION: Shows how to use MapMarkerClusterer in an Angular component. It includes imports, component configuration, and methods for adding markers dynamically.

LANGUAGE: typescript
CODE:
// google-map-demo.component.ts
import {Component} from '@angular/core';
import {GoogleMap, MapMarkerClusterer, MapAdvancedMarker} from '@angular/google-maps';

@Component({
  selector: 'google-map-demo',
  templateUrl: 'google-map-demo.html',
  imports: [GoogleMap, MapMarkerClusterer, MapAdvancedMarker],
})
export class GoogleMapDemo {
  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};
  zoom = 4;
  markerPositions: google.maps.LatLngLiteral[] = [];

  addMarker(event: google.maps.MapMouseEvent) {
    this.markerPositions.push(event.latLng.toJSON());
  }
}

----------------------------------------

TITLE: Defining Option Values in CDK Listbox for Angular
DESCRIPTION: Shows how to assign values to options in a CDK listbox. Each option can have an explicit value, or use an empty string as a default value if not specified.

LANGUAGE: HTML
CODE:
<ul cdkListbox>
  <li cdkOption="red">Red</li>
  <li cdkOption="green">Green</li>
  <li cdkOption>No color preference</li>
</ul>

----------------------------------------

TITLE: Defining Angular Material Card Module API
DESCRIPTION: Comprehensive TypeScript definitions for Angular Material's card component module. Includes class definitions for card components, directives for card elements, configuration interfaces, and module declarations. Contains imports from Angular core and CDK.

LANGUAGE: typescript
CODE:
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/bidi';
import { InjectionToken } from '@angular/core';

export const MAT_CARD_CONFIG: InjectionToken<MatCardConfig>;

export class MatCard {
    constructor(...args: unknown[]);
    appearance: MatCardAppearance;
    static ɵcmp: i0.ɵɵComponentDeclaration<MatCard, "mat-card", ["matCard"], { "appearance": { "alias": "appearance"; "required": false; }; }, {}, never, ["*"], true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MatCard, never>;
}

export class MatCardActions {
    align: 'start' | 'end';
    static ɵdir: i0.ɵɵDirectiveDeclaration<MatCardActions, "mat-card-actions", ["matCardActions"], { "align": { "alias": "align"; "required": false; }; }, {}, never, never, true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MatCardActions, never>;
}

export type MatCardAppearance = 'outlined' | 'raised';

export interface MatCardConfig {
    appearance?: MatCardAppearance;
}

// Additional class definitions follow similar pattern...

----------------------------------------

TITLE: Adding Icons to List Items in Angular Material
DESCRIPTION: Shows how to add icons to list items using the matListItemIcon attribute with the mat-icon component.

LANGUAGE: html
CODE:
<mat-list>
  @for (message of messages; track message) {
    <mat-list-item>
      <mat-icon matListItemIcon>folder</mat-icon>
      <h3 matListItemTitle>{{message.from}}</h3>
      <p matListItemLine>
        <span>{{message.subject}}</span>
        <span class="demo-2"> -- {{message.content}}</span>
      </p>
    </mat-list-item>
  }
</mat-list>

----------------------------------------

TITLE: Using CdkPortalOutlet in Angular HTML Template
DESCRIPTION: Demonstrates how to use CdkPortalOutlet to add a portal outlet to an Angular template. It shows how to attach a previously created portal to the outlet.

LANGUAGE: html
CODE:
<!-- Attaches the `userSettingsPortal` from the previous example. -->
<ng-template [cdkPortalOutlet]="userSettingsPortal"></ng-template>

----------------------------------------

TITLE: Implementing Horizontal Orientation in CDK Listbox for Angular
DESCRIPTION: Shows how to set a horizontal orientation for a CDK listbox using the cdkListboxOrientation input, affecting keyboard navigation.

LANGUAGE: HTML
CODE:
<ul cdkListbox cdkListboxOrientation="horizontal">
  <li cdkOption="red">Red</li>
  <li cdkOption="green">Green</li>
  <li cdkOption="blue">Blue</li>
</ul>

----------------------------------------

TITLE: Adding Material Slide Toggle to HTML Template
DESCRIPTION: HTML code snippet demonstrating how to add a Material slide toggle component to an Angular component's template.

LANGUAGE: html
CODE:
<mat-slide-toggle>Toggle me!</mat-slide-toggle>

----------------------------------------

TITLE: Defining Column Templates in CdkTable (HTML)
DESCRIPTION: This snippet demonstrates how to define a column template for the CdkTable, including header, cell, and footer templates.

LANGUAGE: html
CODE:
<ng-container cdkColumnDef="username">
  <th cdk-header-cell *cdkHeaderCellDef> User name </th>
  <td cdk-cell *cdkCellDef="let row"> {{row.a}} </td>
  <td cdk-footer-cell *cdkFooterCellDef> User name </td>
</ng-container>

----------------------------------------

TITLE: Using Predefined Breakpoints with BreakpointObserver in TypeScript
DESCRIPTION: Example of using Angular Material's predefined breakpoints with BreakpointObserver to detect handset layouts.

LANGUAGE: typescript
CODE:
breakpointObserver.observe([
  Breakpoints.HandsetLandscape,
  Breakpoints.HandsetPortrait
]).subscribe(result => {
  if (result.matches) {
    this.activateHandsetLayout();
  }
});

----------------------------------------

TITLE: Using mat-text-column for Simple String Columns
DESCRIPTION: Shows how to use the mat-text-column for columns that only display simple string values.

LANGUAGE: html
CODE:
<mat-text-column name="score"></mat-text-column>

----------------------------------------

TITLE: Using cdkCopyToClipboardAttempts Input in Angular HTML
DESCRIPTION: Shows how to use the cdkCopyToClipboardAttempts input to automatically attempt copying text a specified number of times when using the cdkCopyToClipboard directive.

LANGUAGE: html
CODE:
<button [cdkCopyToClipboard]="longText" [cdkCopyToClipboardAttempts]="5">Copy text</button>

----------------------------------------

TITLE: Complete CdkTable Example with Three Columns (HTML)
DESCRIPTION: This snippet provides a complete example of a CdkTable with three columns (username, age, and title), including column definitions and row templates.

LANGUAGE: html
CODE:
<table cdk-table [dataSource]="dataSource">
  <!-- User name Definition -->
  <ng-container cdkColumnDef="username">
    <th cdk-header-cell *cdkHeaderCellDef> User name </th>
    <td cdk-cell *cdkCellDef="let row"> {{row.username}} </td>
  </ng-container>

  <!-- Age Definition -->
  <ng-container cdkColumnDef="age">
    <th cdk-header-cell *cdkHeaderCellDef> Age </th>
    <td cdk-cell *cdkCellDef="let row"> {{row.age}} </td>
  </ng-container>

  <!-- Title Definition -->
  <ng-container cdkColumnDef="title">
    <th cdk-header-cell *cdkHeaderCellDef> Title </th>
    <td cdk-cell *cdkCellDef="let row"> {{row.title}} </td>
  </ng-container>

  <!-- Header and Row Declarations -->
  <tr cdk-header-row *cdkHeaderRowDef="['username', 'age', 'title']"></tr>
  <tr cdk-row *cdkRowDef="let row; columns: ['username', 'age', 'title']"></tr>
</table>

----------------------------------------

TITLE: Installing Text Field Autofill CSS with Angular CDK
DESCRIPTION: SCSS mixin implementation for adding required CSS hooks for autofill state changes. This is necessary when not using Angular Material's mat-core mixin.

LANGUAGE: scss
CODE:
@use '@angular/cdk';

@include cdk.text-field-autofill();

----------------------------------------

TITLE: Complete CdkTable Example with Three Columns (HTML)
DESCRIPTION: This snippet provides a complete example of a CdkTable with three columns (username, age, and title), including column definitions and row templates.

LANGUAGE: html
CODE:
<table cdk-table [dataSource]="dataSource">
  <!-- User name Definition -->
  <ng-container cdkColumnDef="username">
    <th cdk-header-cell *cdkHeaderCellDef> User name </th>
    <td cdk-cell *cdkCellDef="let row"> {{row.username}} </td>
  </ng-container>

  <!-- Age Definition -->
  <ng-container cdkColumnDef="age">
    <th cdk-header-cell *cdkHeaderCellDef> Age </th>
    <td cdk-cell *cdkCellDef="let row"> {{row.age}} </td>
  </ng-container>

  <!-- Title Definition -->
  <ng-container cdkColumnDef="title">
    <th cdk-header-cell *cdkHeaderCellDef> Title </th>
    <td cdk-cell *cdkCellDef="let row"> {{row.title}} </td>
  </ng-container>

  <!-- Header and Row Declarations -->
  <tr cdk-header-row *cdkHeaderRowDef="['username', 'age', 'title']"></tr>
  <tr cdk-row *cdkRowDef="let row; columns: ['username', 'age', 'title']"></tr>
</table>

----------------------------------------

TITLE: Defining Angular Material Progress Bar Component and Types
DESCRIPTION: Contains the complete TypeScript definitions for the Material Progress Bar component including the main MatProgressBar class, configuration interfaces, injection tokens, and module declarations. Includes component properties, event emitters, and Angular decorators.

LANGUAGE: typescript
CODE:
import { AfterViewInit } from '@angular/core';
import { ElementRef } from '@angular/core';
import { EventEmitter } from '@angular/core';
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/bidi';
import { InjectionToken } from '@angular/core';
import { OnDestroy } from '@angular/core';

export const MAT_PROGRESS_BAR_DEFAULT_OPTIONS: InjectionToken<MatProgressBarDefaultOptions>;

export const MAT_PROGRESS_BAR_LOCATION: InjectionToken<MatProgressBarLocation>;

export function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation;

export class MatProgressBar implements AfterViewInit, OnDestroy {
    constructor(...args: unknown[]);
    readonly animationEnd: EventEmitter<ProgressAnimationEnd>;
    get bufferValue(): number;
    set bufferValue(v: number);
    get color(): string | null | undefined;
    set color(value: string | null | undefined);
    readonly _elementRef: ElementRef<HTMLElement>;
    _getBufferBarFlexBasis(): string;
    _getPrimaryBarTransform(): string;
    _isIndeterminate(): boolean;
    _isNoopAnimation: boolean;
    get mode(): ProgressBarMode;
    set mode(value: ProgressBarMode);
    static ngAcceptInputType_bufferValue: unknown;
    static ngAcceptInputType_value: unknown;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    get value(): number;
    set value(v: number);
    static ɵcmp: i0.ɵɵComponentDeclaration<MatProgressBar, "mat-progress-bar", ["matProgressBar"], { "color": { "alias": "color"; "required": false; }; "value": { "alias": "value"; "required": false; }; "bufferValue": { "alias": "bufferValue"; "required": false; }; "mode": { "alias": "mode"; "required": false; }; }, { "animationEnd": "animationEnd"; }, never, never, true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MatProgressBar, never>;
}

export interface MatProgressBarDefaultOptions {
    color?: ThemePalette;
    mode?: ProgressBarMode;
}

export interface MatProgressBarLocation {
    getPathname: () => string;
}

export class MatProgressBarModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<MatProgressBarModule, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<MatProgressBarModule>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<MatProgressBarModule, never, [typeof MatProgressBar], [typeof MatProgressBar, typeof MatCommonModule]>;
}

export interface ProgressAnimationEnd {
    value: number;
}

export type ProgressBarMode = 'determinate' | 'indeterminate' | 'buffer' | 'query';

----------------------------------------

TITLE: CdkTable with Event and Class Binding (HTML)
DESCRIPTION: This snippet demonstrates how to add event and property bindings to CdkTable row elements for header and data rows.

LANGUAGE: html
CODE:
<tr cdk-header-row *cdkHeaderRowDef="['age', 'username']"
    (click)="handleHeaderRowClick(row)">
</tr>

<tr cdk-row *cdkRowDef="let row; columns: ['age', 'username']"
    [class.can-vote]="row.age >= 18"
    (click)="handleRowClick(row)">
</tr>

----------------------------------------

TITLE: Copying Text Programmatically with Angular CDK Clipboard Service
DESCRIPTION: Shows how to use the Clipboard service to programmatically copy a small amount of text to the clipboard using the copy method.

LANGUAGE: typescript
CODE:
import {Clipboard} from '@angular/cdk/clipboard';

class HeroProfile {
  constructor(private clipboard: Clipboard) {}

  copyHeroName() {
    this.clipboard.copy('Alphonso');
  }
}

----------------------------------------

TITLE: Checking Viewport Size with BreakpointObserver in TypeScript
DESCRIPTION: Demonstrates how to use the isMatched method to check the current viewport size against a media query threshold.

LANGUAGE: typescript
CODE:
const isSmallScreen = breakpointObserver.isMatched('(max-width: 599px)');

----------------------------------------

TITLE: Defining Row Templates for mat-table
DESCRIPTION: Illustrates how to define row templates for mat-table, including header and data rows.

LANGUAGE: html
CODE:
<tr mat-header-row *matHeaderRowDef="columnsToDisplay"></tr>
<tr mat-row *matRowDef="let myRowData; columns: columnsToDisplay"></tr>

----------------------------------------

TITLE: Using Custom Form Field Control in Angular Template
DESCRIPTION: This HTML snippet demonstrates how to use the custom form field control within a mat-form-field, including placeholder, prefix, and hint.

LANGUAGE: html
CODE:
<mat-form-field>
  <example-tel-input placeholder="Phone number" required></example-tel-input>
  <mat-icon matPrefix>phone</mat-icon>
  <mat-hint>Include area code</mat-hint>
</mat-form-field>

----------------------------------------

TITLE: Alternative CdkTable Template Without Native Table Elements (HTML)
DESCRIPTION: This snippet shows an alternative approach to creating a CdkTable without using native HTML table elements, providing more control over styling.

LANGUAGE: html
CODE:
<cdk-table [dataSource]="dataSource">
  <!-- User name Definition -->
  <ng-container cdkColumnDef="username">
    <cdk-header-cell *cdkHeaderCellDef> User name </cdk-header-cell>
    <cdk-cell *cdkCellDef="let row"> {{row.username}} </cdk-cell>
  </ng-container>

  <!-- Age Definition -->
  <ng-container cdkColumnDef="age">
    <cdk-header-cell *cdkHeaderCellDef> Age </cdk-header-cell>
    <cdk-cell *cdkCellDef="let row"> {{row.age}} </cdk-cell>
  </ng-container>

  <!-- Title Definition -->
  <ng-container cdkColumnDef="title">
    <cdk-header-cell *cdkHeaderCellDef> Title </cdk-header-cell>
    <cdk-cell *cdkCellDef="let row"> {{row.title}} </cdk-cell>
  </ng-container>

  <!-- Header and Row Declarations -->
  <cdk-header-row *cdkHeaderRowDef="['username', 'age', 'title']"></cdk-header-row>
  <cdk-row *cdkRowDef="let row; columns: ['username', 'age', 'title']"></cdk-row>
</cdk-table>

----------------------------------------

TITLE: Implementing Custom Virtual Scroll Strategy in Angular
DESCRIPTION: Shows how to create and use a custom VirtualScrollStrategy for more complex scrolling scenarios.

LANGUAGE: html
CODE:
<!-- example(cdk-virtual-scroll-custom-strategy) -->

----------------------------------------

TITLE: Using Context Variables in cdkVirtualFor with Angular
DESCRIPTION: Shows how to use context variables provided by cdkVirtualFor, such as index, count, first, last, even, and odd, within the template.

LANGUAGE: html
CODE:
<!-- example(cdk-virtual-scroll-context) -->

----------------------------------------

TITLE: Accessing Elements Outside Component Host in a Harness
DESCRIPTION: Example of using documentRootLocatorFactory to access elements outside the component's host element in a popup harness.

LANGUAGE: TypeScript
CODE:
class MyPopupHarness extends ComponentHarness {
  static hostSelector = 'my-popup';

  /** Gets a `HarnessLoader` whose root element is the popup's content element. */
  async getHarnessLoaderForContent(): Promise<HarnessLoader> {
    const rootLocator = this.documentRootLocatorFactory();
    return rootLocator.harnessLoaderFor('my-popup-content');
  }
}

----------------------------------------

TITLE: Copying Large Text with Angular CDK Clipboard Service
DESCRIPTION: Demonstrates how to copy larger amounts of text using the beginCopy method of the Clipboard service. This method returns a PendingCopy object that needs to be managed and destroyed after use.

LANGUAGE: typescript
CODE:
import {Clipboard} from '@angular/cdk/clipboard';

class HeroProfile {
  lifetimeAchievements: string;

  constructor(private clipboard: Clipboard) {}

  copyAchievements() {
    const pending = this.clipboard.beginCopy(this.lifetimeAchievements);
    let remainingAttempts = 3;
    const attempt = () => {
      const result = pending.copy();
      if (!result && --remainingAttempts) {
        setTimeout(attempt);
      } else {
        // Remember to destroy when you're done!
        pending.destroy();
      }
    };
    attempt();
  }
}

----------------------------------------

TITLE: Enabling Tick Marks on Angular Material Slider
DESCRIPTION: This example shows how to enable tick marks along the thumb track of the slider using the showTickMarks attribute.

LANGUAGE: html
CODE:
<mat-slider showTickMarks>
  <input matSliderThumb>
</mat-slider>

----------------------------------------

TITLE: Defining MapDirectionsResponse Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the MapDirectionsResponse, which wraps the Google Maps directions API response with status and result properties.

LANGUAGE: typescript
CODE:
export interface MapDirectionsResponse {
  status: google.maps.DirectionsStatus;
  result?: google.maps.DirectionsResult;
}

----------------------------------------

TITLE: Observing Layout Changes with BreakpointObserver in TypeScript
DESCRIPTION: Shows how to observe viewport size changes using the observe method, which returns an observable that emits when crossing breakpoints.

LANGUAGE: typescript
CODE:
const layoutChanges = breakpointObserver.observe([
  '(orientation: portrait)',
  '(orientation: landscape)',
]);

layoutChanges.subscribe(result => {
  updateMyLayoutForOrientationChange();
});

----------------------------------------

TITLE: Creating a Basic Listbox with CDK in Angular HTML
DESCRIPTION: Demonstrates how to create a basic listbox using the cdkListbox and cdkOption directives. This example shows the structure of a typical listbox with selectable options.

LANGUAGE: HTML
CODE:
<ul cdkListbox>
  <li cdkOption="red">Red</li>
  <li cdkOption="green">Green</li>
  <li cdkOption="blue">Blue</li>
</ul>

----------------------------------------

TITLE: Creating a Disabled Chip Option in Angular Material
DESCRIPTION: Shows how to create a disabled chip option using the 'disabled' Input property on a mat-chip-option element.

LANGUAGE: html
CODE:
<mat-chip-option disabled>Orange</mat-chip-option>

----------------------------------------

TITLE: Implementing Template-Driven Forms with CDK Listbox in Angular
DESCRIPTION: Shows how to use CDK Listbox with template-driven forms in Angular, demonstrating the integration with ngModel for form control.

LANGUAGE: HTML
CODE:
<ul cdkListbox [(ngModel)]="selectedColors" name="colors">
  <li cdkOption="red">Red</li>
  <li cdkOption="green">Green</li>
  <li cdkOption="blue">Blue</li>
</ul>

----------------------------------------

TITLE: Implementing MapGroundOverlay in HTML Template
DESCRIPTION: HTML template that sets up a Google Map with specific dimensions and binds the ground overlay properties defined in the component.

LANGUAGE: html
CODE:
<!-- google-maps-demo.component.html -->
<google-map height="400px" width="750px" [center]="center" [zoom]="zoom">
  <map-ground-overlay [url]="imageUrl" [bounds]="imageBounds" />
</google-map>

----------------------------------------

TITLE: Configuring Angular Material MDC Theme
DESCRIPTION: Sass configuration for setting up theming and typography for MDC-based components using Material Design styles

LANGUAGE: scss
CODE:
@use '@angular/material' as mat;
@use '@angular/material-experimental' as mat-experimental;

$my-primary: mat.define-palette(mat.$indigo-palette);
$my-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);
$my-theme: mat.define-light-theme((
  color: (
    primary: $my-primary,
    accent: $my-accent
  ),
  typography: mat-experimental.define-mdc-typography-config(),
  density: 0
));

@include mat-experimental.all-mdc-component-themes($my-theme);

----------------------------------------

TITLE: Installing Angular CDK with CLI
DESCRIPTION: Command to install only the Angular Component Dev Kit using ng add.

LANGUAGE: bash
CODE:
ng add @angular/cdk

----------------------------------------

TITLE: Defining Angular Material Table Testing Types and Harnesses
DESCRIPTION: TypeScript code defining the complete API for Angular Material table testing harnesses. Includes interfaces and classes for testing tables, rows, cells and related components with type definitions and method signatures.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { ComponentHarnessConstructor } from '@angular/cdk/testing';
import { ContentContainerComponentHarness } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

// @public
export interface CellHarnessFilters extends BaseHarnessFilters {
    columnName?: string | RegExp;
    text?: string | RegExp;
}

// @public
export class MatCellHarness extends _MatCellHarnessBase {
    static hostSelector: string;
    static with(options?: CellHarnessFilters): HarnessPredicate<MatCellHarness>;
}

// @public (undocumented)
export abstract class _MatCellHarnessBase extends ContentContainerComponentHarness {
    // (undocumented)
    protected static _getCellPredicate<T extends MatCellHarness>(type: ComponentHarnessConstructor<T>, options: CellHarnessFilters): HarnessPredicate<T>;
    getColumnName(): Promise<string>;
    getText(): Promise<string>;
}

// @public
export class MatFooterCellHarness extends _MatCellHarnessBase {
    static hostSelector: string;
    static with(options?: CellHarnessFilters): HarnessPredicate<MatFooterCellHarness>;
}

// @public
export class MatFooterRowHarness extends _MatRowHarnessBase<typeof MatFooterCellHarness, MatFooterCellHarness> {
    // (undocumented)
    protected _cellHarness: typeof MatFooterCellHarness;
    static hostSelector: string;
    static with<T extends MatFooterRowHarness>(this: ComponentHarnessConstructor<T>, options?: RowHarnessFilters): HarnessPredicate<T>;
}

// @public
export class MatHeaderCellHarness extends _MatCellHarnessBase {
    static hostSelector: string;
    static with(options?: CellHarnessFilters): HarnessPredicate<MatHeaderCellHarness>;
}

// @public
export class MatHeaderRowHarness extends _MatRowHarnessBase<typeof MatHeaderCellHarness, MatHeaderCellHarness> {
    // (undocumented)
    protected _cellHarness: typeof MatHeaderCellHarness;
    static hostSelector: string;
    static with<T extends MatHeaderRowHarness>(this: ComponentHarnessConstructor<T>, options?: RowHarnessFilters): HarnessPredicate<T>;
}

// @public
export class MatRowHarness extends _MatRowHarnessBase<typeof MatCellHarness, MatCellHarness> {
    // (undocumented)
    protected _cellHarness: typeof MatCellHarness;
    static hostSelector: string;
    static with<T extends MatRowHarness>(this: ComponentHarnessConstructor<T>, options?: RowHarnessFilters): HarnessPredicate<T>;
}

// @public (undocumented)
export abstract class _MatRowHarnessBase<CellType extends ComponentHarnessConstructor<Cell> & {
    with: (options?: CellHarnessFilters) => HarnessPredicate<Cell>;
}, Cell extends _MatCellHarnessBase> extends ComponentHarness {
    // (undocumented)
    protected abstract _cellHarness: CellType;
    getCells(filter?: CellHarnessFilters): Promise<Cell[]>;
    getCellTextByColumnName(): Promise<MatRowHarnessColumnsText>;
    getCellTextByIndex(filter?: CellHarnessFilters): Promise<string[]>;
}

// @public
export interface MatRowHarnessColumnsText {
    // (undocumented)
    [columnName: string]: string;
}

// @public
export class MatTableHarness extends ContentContainerComponentHarness<string> {
    getCellTextByColumnName(): Promise<MatTableHarnessColumnsText>;
    getCellTextByIndex(): Promise<string[][]>;
    getFooterRows(filter?: RowHarnessFilters): Promise<MatFooterRowHarness[]>;
    getHeaderRows(filter?: RowHarnessFilters): Promise<MatHeaderRowHarness[]>;
    getRows(filter?: RowHarnessFilters): Promise<MatRowHarness[]>;
    // (undocumented)
    _headerRowHarness: typeof MatHeaderRowHarness;
    static hostSelector: string;
    // (undocumented)
    _rowHarness: typeof MatRowHarness;
    static with<T extends MatTableHarness>(this: ComponentHarnessConstructor<T>, options?: TableHarnessFilters): HarnessPredicate<T>;
}

// @public
export interface MatTableHarnessColumnsText {
    // (undocumented)
    [columnName: string]: {
        text: string[];
        headerText: string[];
        footerText: string[];
    };
}

// @public
export interface RowHarnessFilters extends BaseHarnessFilters {
}

// @public
export interface TableHarnessFilters extends BaseHarnessFilters {
}

----------------------------------------

TITLE: Using Custom Stepper Component in Angular Template
DESCRIPTION: This HTML snippet demonstrates how to use the custom stepper component in an Angular template, including defining steps and using custom step components.

LANGUAGE: html
CODE:
<app-custom-stepper>
  <cdk-step><p>This is any content of "Step 1"</p></cdk-step>
  <cdk-step><p>This is any content of "Step 2"</p></cdk-step>
</app-custom-stepper>

LANGUAGE: html
CODE:
<app-custom-stepper>
  @for (step of mySteps; track step) {
    <cdk-step>
      <my-step-component [step]="$index"></my-step-component>
    </cdk-step>
  }
</app-custom-stepper>

----------------------------------------

TITLE: Implementing Reactive Forms with CDK Listbox in Angular
DESCRIPTION: Demonstrates the use of CDK Listbox with reactive forms in Angular, showing how to bind the listbox to a FormControl.

LANGUAGE: HTML
CODE:
<ul cdkListbox [formControl]="colorsControl">
  <li cdkOption="red">Red</li>
  <li cdkOption="green">Green</li>
  <li cdkOption="blue">Blue</li>
</ul>

----------------------------------------

TITLE: Implementing MapMarker in Angular Component
DESCRIPTION: This TypeScript code demonstrates how to implement the MapMarker component in an Angular component. It sets up the necessary imports, defines the component structure, and includes logic for adding markers to the map.

LANGUAGE: typescript
CODE:
// google-map-demo.component.ts
import {Component} from '@angular/core';
import {GoogleMap, MapMarker} from '@angular/google-maps';

@Component({
  selector: 'google-map-demo',
  templateUrl: 'google-map-demo.html',
  imports: [GoogleMap, MapMarker],
})
export class GoogleMapDemo {
  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};
  zoom = 4;
  markerOptions: google.maps.MarkerOptions = {draggable: false};
  markerPositions: google.maps.LatLngLiteral[] = [];

  addMarker(event: google.maps.MapMouseEvent) {
    this.markerPositions.push(event.latLng.toJSON());
  }
}

----------------------------------------

TITLE: Implementing Custom Stepper Component in TypeScript
DESCRIPTION: This snippet shows how to create a custom stepper component by extending CdkStepper. It includes the component decorator and a method to handle step selection.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'app-custom-stepper',
  templateUrl: './custom-stepper.component.html',
  styleUrl: './custom-stepper.component.css',
  // This custom stepper provides itself as CdkStepper so that it can be recognized
  // by other components.
  providers: [{ provide: CdkStepper, useExisting: CustomStepperComponent }]
})
export class CustomStepperComponent extends CdkStepper {
  onClick(index: number): void {
    this.selectedIndex = index;
  }
}

----------------------------------------

TITLE: Using Active Descendant in CDK Listbox for Angular
DESCRIPTION: Demonstrates how to use the aria-activedescendant strategy for focus management in a CDK listbox by setting useActiveDescendant to true.

LANGUAGE: HTML
CODE:
<ul cdkListbox useActiveDescendant="true">
  <li cdkOption="red">Red</li>
  <li cdkOption="green">Green</li>
  <li cdkOption="blue">Blue</li>
</ul>

----------------------------------------

TITLE: Generating Address Form Component
DESCRIPTION: Command to generate a new component with Material Design form controls for shipping address.

LANGUAGE: bash
CODE:
ng generate @angular/material:address-form <component-name>

----------------------------------------

TITLE: Implementing Harness Classes for Angular Material Chips in TypeScript
DESCRIPTION: This snippet defines various harness classes for different chip components, extending ComponentHarness or ContentContainerComponentHarness. Each class provides methods for interacting with and testing specific chip functionalities.

LANGUAGE: typescript
CODE:
export class MatChipAvatarHarness extends ComponentHarness {
    static hostSelector: string;
    static with<T extends MatChipAvatarHarness>(this: ComponentHarnessConstructor<T>, options?: ChipAvatarHarnessFilters): HarnessPredicate<T>;
}

export class MatChipEditInputHarness extends ComponentHarness {
    static hostSelector: string;
    setValue(value: string): Promise<void>;
    static with<T extends MatChipEditInputHarness>(this: ComponentHarnessConstructor<T>, options?: ChipEditInputHarnessFilters): HarnessPredicate<T>;
}

// ... (other harness classes omitted for brevity)

export class MatChipSetHarness extends ComponentHarness {
    getChips(filter?: ChipHarnessFilters): Promise<MatChipHarness[]>;
    static hostSelector: string;
    static with<T extends MatChipSetHarness>(this: ComponentHarnessConstructor<T>, options?: ChipSetHarnessFilters): HarnessPredicate<T>;
}

----------------------------------------

TITLE: Using MapMarker in Angular Template
DESCRIPTION: This HTML template shows how to use the MapMarker component within a GoogleMap component. It sets up the map with specified dimensions, center, and zoom level, and adds markers based on user clicks.

LANGUAGE: html
CODE:
<!-- google-map-demo.component.html -->
<google-map
  height="400px"
  width="750px"
  [center]="center"
  [zoom]="zoom"
  (mapClick)="addMarker($event)">
    @for (position of markerPositions; track position) {
      <map-marker [position]="position" [options]="markerOptions" />
    }
</google-map>

----------------------------------------

TITLE: YouTube Player Component Template Examples
DESCRIPTION: Collection of HTML template examples showing different ways to configure the YouTube player component, including API loading, placeholder settings, and internationalization options.

LANGUAGE: html
CODE:
<youtube-player videoId="mVjYG9TSN88" loadApi="false"/>
<youtube-player videoId="mVjYG9TSN88" disablePlaceholder/>
<youtube-player videoId="mVjYG9TSN88" placeholderImageQuality="standard"/>
<youtube-player videoId="mVjYG9TSN88" placeholderImageQuality="high"/>
<youtube-player videoId="mVjYG9TSN88" placeholderImageQuality="low"/>
<youtube-player videoId="mVjYG9TSN88" placeholderButtonLabel="Afspil video"/>

----------------------------------------

TITLE: Customizing Typeahead Labels in CDK Listbox for Angular
DESCRIPTION: Demonstrates how to set custom typeahead labels for options in a CDK listbox using the cdkOptionTypeaheadLabel attribute.

LANGUAGE: HTML
CODE:
<ul cdkListbox>
  <li cdkOption="red" cdkOptionTypeaheadLabel="Red color">🔴 Red</li>
  <li cdkOption="green" cdkOptionTypeaheadLabel="Green color">🟢 Green</li>
  <li cdkOption="blue" cdkOptionTypeaheadLabel="Blue color">🔵 Blue</li>
</ul>

----------------------------------------

TITLE: Accessing Bottom Sheet Data
DESCRIPTION: Shows how to inject and access data passed to a bottom sheet component using MAT_BOTTOM_SHEET_DATA token.

LANGUAGE: typescript
CODE:
import {Component, Inject} from '@angular/core';
import {MAT_BOTTOM_SHEET_DATA} from '../bottom-sheet';

@Component({
  selector: 'hobbit-sheet',
  template: 'passed in {{ data.names }}',
})
export class HobbitSheet {
  constructor(@Inject(MAT_BOTTOM_SHEET_DATA) public data: {names: string[]}) { }
}

----------------------------------------

TITLE: Using cdkDropListGroup in Angular CDK Drag and Drop
DESCRIPTION: Shows how to use the cdkDropListGroup directive to automatically connect an unknown number of drop lists.

LANGUAGE: HTML
CODE:
<div cdkDropListGroup>
  <!-- All lists in here will be connected. -->
  @for (list of lists; track list) {
    <div cdkDropList></div>
  }
</div>

----------------------------------------

TITLE: Using MapMarkerClusterer in Angular Template
DESCRIPTION: Demonstrates the HTML template for using MapMarkerClusterer. It shows how to set up a Google Map with marker clustering and dynamically add markers on click events.

LANGUAGE: html
CODE:
<google-map
  height="400px"
  width="750px"
  [center]="center"
  [zoom]="zoom"
  (mapClick)="addMarker($event)">
  <map-marker-clusterer>
    @for (markerPosition of markerPositions; track $index) {
      <map-advanced-marker [position]="markerPosition"/>
    }
  </map-marker-clusterer>
</google-map>

----------------------------------------

TITLE: Initializing Basic YouTube Player Component in Angular
DESCRIPTION: Basic example of implementing a YouTube player component using Angular. Shows how to import the necessary dependencies and create a component that displays a YouTube video using a specific video ID.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {YouTubePlayer} from '@angular/youtube-player';

@Component({
  imports: [YouTubePlayer],
  template: '<youtube-player videoId="mVjYG9TSN88"/>',
  selector: 'youtube-player-example',
})
export class YoutubePlayerExample {}

----------------------------------------

TITLE: Migrating from Material 2 to Material 3 Themes
DESCRIPTION: Example of how to update a component's theme mixin to support both Material 2 and Material 3 themes during migration.

LANGUAGE: scss
CODE:
@use '@angular/material' as mat;

@mixin my-comp-theme($theme) {
  @if (mat.get-theme-version($theme) == 1) {
    // Add your new M3 styles here.
  } @else {
    // Keep your old M2 styles here.
  }
}

----------------------------------------

TITLE: Defining MatTestDialogOpenerModule Class in TypeScript
DESCRIPTION: This class defines the module for MatTestDialogOpener. It's likely used for configuring and providing the test dialog opener in Angular applications.

LANGUAGE: typescript
CODE:
export class MatTestDialogOpenerModule {}

----------------------------------------

TITLE: CdkTable with Row Recycling (HTML)
DESCRIPTION: This snippet demonstrates how to enable row recycling in CdkTable to improve performance by caching and reusing row elements.

LANGUAGE: html
CODE:
<table cdk-table [dataSource]="dataSource" recycleRows>

----------------------------------------

TITLE: Checking Element Disability in TypeScript
DESCRIPTION: Method to determine if an HTML element is disabled.

LANGUAGE: typescript
CODE:
isDisabled(element: HTMLElement): boolean

----------------------------------------

TITLE: Implementing MapTrafficLayer in Angular Component
DESCRIPTION: This snippet demonstrates how to use the MapTrafficLayer component in an Angular component. It imports necessary modules and sets up basic map configuration.

LANGUAGE: typescript
CODE:
// google-maps-demo.component.ts
import {Component} from '@angular/core';
import {GoogleMap, MapTrafficLayer} from '@angular/google-maps';

@Component({
  selector: 'google-map-demo',
  templateUrl: 'google-map-demo.html',
  imports: [GoogleMap, MapTrafficLayer],
})
export class GoogleMapDemo {
  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};
  zoom = 4;
}

----------------------------------------

TITLE: Implementing User Interaction Methods in a Component Harness
DESCRIPTION: Example of implementing methods for toggling and checking the open state of a popup component harness.

LANGUAGE: TypeScript
CODE:
class MyPopupHarness extends ComponentHarness {
  static hostSelector = 'my-popup';

  protected getTriggerElement = this.locatorFor('button');
  protected getContentElement = this.locatorForOptional('.my-popup-content');

  /** Toggles the open state of the popup. */
  async toggle() {
    const trigger = await this.getTriggerElement();
    return trigger.click();
  }

  /** Checks if the popup us open. */
  async isOpen() {
    const content = await this.getContentElement();
    return !!content;
  }
}

----------------------------------------

TITLE: Implementing Built-in Scroll Strategy in Angular Overlay
DESCRIPTION: Demonstrates how to configure an overlay with a built-in scroll strategy using OverlayConfig. The example shows using the 'block' strategy which prevents scrolling while the overlay is open.

LANGUAGE: typescript
CODE:
let overlayConfig = new OverlayConfig({
  scrollStrategy: overlay.scrollStrategies.block()
});

this._overlay.create(overlayConfig).attach(yourPortal);

----------------------------------------

TITLE: Setting Google Maps API Key for Angular Components Dev App
DESCRIPTION: This bash command demonstrates how to set the GOOGLE_MAPS_KEY environment variable in .bashrc or .zshrc files. This allows developers to use a personal Google Maps API key for development without committing secrets.

LANGUAGE: bash
CODE:
export GOOGLE_MAPS_KEY=<api-key>

----------------------------------------

TITLE: Connecting a Timepicker to an Input in Angular
DESCRIPTION: Demonstrates how to connect a timepicker to an input field using the matTimepicker binding and an optional toggle button.

LANGUAGE: html
CODE:
<input [matTimepicker]="picker">
<mat-timepicker-toggle [for]="picker"></mat-timepicker-toggle>
<mat-timepicker #picker></mat-timepicker>

----------------------------------------

TITLE: Implementing MapKmlLayer in HTML Template
DESCRIPTION: Shows how to use the MapKmlLayer component in an Angular template. Demonstrates setting up the google-map component with dimensions and binding the KML layer URL.

LANGUAGE: html
CODE:
<!-- google-maps-demo.component.html -->
<google-map height="400px" width="750px" [center]="center" [zoom]="zoom">
  <map-kml-layer [url]="kmlUrl" />
</google-map>

----------------------------------------

TITLE: Using MapPolygon in Angular Template
DESCRIPTION: This HTML template shows how to use the MapPolygon component within a Google Map in an Angular application. It sets up a Google Map with specified dimensions, center, and zoom level, and includes a MapPolygon component with the defined vertices.

LANGUAGE: html
CODE:
<!-- google-maps-demo.component.html -->
<google-map height="400px" width="750px" [center]="center" [zoom]="zoom">
  <map-polygon [paths]="vertices" />
</google-map>

----------------------------------------

TITLE: Using Append-Only Mode in Virtual Scrolling with Angular
DESCRIPTION: Demonstrates the use of appendOnly mode in virtual scrolling to improve performance for nontrivial item rendering.

LANGUAGE: html
CODE:
<!-- example(cdk-virtual-scroll-append-only) -->

----------------------------------------

TITLE: Defining MatSelect Component
DESCRIPTION: This snippet shows the class definition for the MatSelect component, which is the main class for the mat-select element.

LANGUAGE: typescript
CODE:
export class MatSelect implements AfterContentInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, MatFormFieldControl<any> {
    // ... (properties and methods)
}

----------------------------------------

TITLE: Committing changes for Angular Material contributions
DESCRIPTION: This command commits changes to the local Git repository when contributing to Angular Material. The -a option automatically adds and removes edited files.

LANGUAGE: shell
CODE:
git commit -a

----------------------------------------

TITLE: Configuring Date Adapter for Angular Material Timepicker
DESCRIPTION: Demonstrates how to configure a date adapter for the timepicker, using the provideDateFnsAdapter as an example.

LANGUAGE: typescript
CODE:
import {provideDateFnsAdapter} from '@angular/material-date-fns-adapter';

bootstrapApplication(MyApp, {
  providers: [provideDateFnsAdapter()]
});

----------------------------------------

TITLE: Implementing MapCircle in HTML Template
DESCRIPTION: Shows how to use the map-circle directive within a google-map component template, including setting map dimensions and binding circle properties.

LANGUAGE: html
CODE:
<!-- google-maps-demo.component.html -->
<google-map height="400px" width="750px" [center]="center" [zoom]="zoom">
  <map-circle [center]="circleCenter" [radius]="radius" />
</google-map>

----------------------------------------

TITLE: Disabling Git Hooks for Angular Components Development
DESCRIPTION: These bash commands show how to disable Git hooks by setting the HUSKY environment variable to 0 in .zshrc or .bashrc files. This is useful for developers who don't want automatic commit message validation or formatting to run.

LANGUAGE: bash
CODE:
# .zshrc
export HUSKY=0

# .bashrc
export HUSKY=0

----------------------------------------

TITLE: Defining MatSlideToggleHarness Class in TypeScript
DESCRIPTION: This code snippet defines the MatSlideToggleHarness class, which extends ComponentHarness. It provides methods for interacting with and querying the state of Angular Material slide toggle components in tests.

LANGUAGE: typescript
CODE:
export class MatSlideToggleHarness extends ComponentHarness {
    blur(): Promise<void>;
    check(): Promise<void>;
    focus(): Promise<void>;
    getAriaLabel(): Promise<string | null>;
    getAriaLabelledby(): Promise<string | null>;
    getLabelText(): Promise<string>;
    getName(): Promise<string | null>;
    // (undocumented)
    static hostSelector: string;
    isChecked(): Promise<boolean>;
    isDisabled(): Promise<boolean>;
    isFocused(): Promise<boolean>;
    isRequired(): Promise<boolean>;
    isValid(): Promise<boolean>;
    // (undocumented)
    _nativeElement: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement>;
    toggle(): Promise<void>;
    uncheck(): Promise<void>;
    static with<T extends MatSlideToggleHarness>(this: ComponentHarnessConstructor<T>, options?: SlideToggleHarnessFilters): HarnessPredicate<T>;
}

----------------------------------------

TITLE: Setting Individual Google Maps Options in Angular
DESCRIPTION: Example of setting individual Google Maps options using separate property bindings in Angular component.

LANGUAGE: html
CODE:
<google-map [center]="center" [zoom]="zoom" />

LANGUAGE: typescript
CODE:
center: google.maps.LatLngLiteral = {lat: 40, lng: -20};
zoom = 4;

----------------------------------------

TITLE: Running Angular Unit Tests
DESCRIPTION: Command to execute unit tests using Karma test runner.

LANGUAGE: markdown
CODE:
Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

----------------------------------------

TITLE: Setting Locale for Angular Material Timepicker
DESCRIPTION: Shows how to set the locale for the timepicker using the MAT_DATE_LOCALE injection token or the DateAdapter's setLocale method.

LANGUAGE: typescript
CODE:
bootstapApplication(MyApp, {
  providers: [{provide: MAT_DATE_LOCALE, useValue: 'en-GB'}],
});

----------------------------------------

TITLE: Configuring Optional and Editable Steps in Angular CDK Stepper
DESCRIPTION: Shows how to configure optional and editable steps in a linear stepper using Angular CDK. It demonstrates setting the 'optional' and 'editable' attributes on CdkStep.

LANGUAGE: typescript
CODE:
<cdk-stepper linear>
  <cdk-step [stepControl]="firstFormGroup">
    <!-- Required step -->
  </cdk-step>
  <cdk-step [stepControl]="secondFormGroup" optional>
    <!-- Optional step -->
  </cdk-step>
  <cdk-step [stepControl]="thirdFormGroup" editable="false">
    <!-- Non-editable step -->
  </cdk-step>
</cdk-stepper>

----------------------------------------

TITLE: Running Angular End-to-End Tests
DESCRIPTION: Command to run end-to-end tests. Requires installation of an e2e testing package.

LANGUAGE: markdown
CODE:
Run `ng e2e` to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.

----------------------------------------

TITLE: Installing Dependencies for Angular Components in package.json
DESCRIPTION: This JSON snippet shows how to update the dependencies in package.json to point to artifact URLs for testing Pull Request changes. It demonstrates using direct URLs to .tgz files for @angular/cdk and @angular/material packages.

LANGUAGE: json
CODE:
"dependencies": {
  "@angular/cdk": "https://<...>.circle-artifacts.com<...>/cdk-pr12345-a1b2c3d.tgz",
  "@angular/material": "https://<...>.circle-artifacts.com<...>/material-pr12345-a1b2c3d.tgz"
}

----------------------------------------

TITLE: Creating Title Group in Angular Material Card
DESCRIPTION: This snippet shows how to use mat-card-title-group to combine title, subtitle, and image into a single section within a card.

LANGUAGE: html
CODE:
<mat-card-title-group>
  <mat-card-title></mat-card-title>
  <mat-card-subtitle></mat-card-subtitle>
  <img mat-card-sm-image>
  <!-- or -->
  <img mat-card-md-image>
  <!-- or -->
  <img mat-card-lg-image>
</mat-card-title-group>

----------------------------------------

TITLE: Generating Material 3 Theme
DESCRIPTION: Command to generate Material 3 color palettes and theme file with optional high contrast overrides.

LANGUAGE: bash
CODE:
ng generate @angular/material:theme-color

----------------------------------------

TITLE: Configuring Angular JSON for MDC Web Sass
DESCRIPTION: Angular configuration to include node_modules in Sass include paths for MDC Web Sass files

LANGUAGE: json
CODE:
"styles": [
  "src/styles.scss"
],
"stylePreprocessorOptions": {
  "includePaths": [
    "node_modules/"
  ]
}

----------------------------------------

TITLE: Conditional Tree Node Templates
DESCRIPTION: Example of using multiple node templates with conditional rendering based on node properties.

LANGUAGE: html
CODE:
<mat-tree-node *matNodeDef="let node" matTreeNodePadding>
  {{node.value}}
</mat-tree-node>
<mat-tree-node *matNodeDef="let node; when: isSpecial" matTreeNodePadding>
  [ A special node {{node.value}} ]
</mat-tree-node>

----------------------------------------

TITLE: Installing Dependencies and Upgrading Components for Angular Docs Site
DESCRIPTION: Commands to install project dependencies and upgrade Angular components examples. This is part of the deployment process for both development and production environments.

LANGUAGE: bash
CODE:
> yarn install
> yarn upgrade @angular/components-examples

----------------------------------------

TITLE: Conditional Tree Node Templates
DESCRIPTION: Example of using multiple node templates with conditional rendering based on node properties.

LANGUAGE: html
CODE:
<mat-tree-node *matNodeDef="let node" matTreeNodePadding>
  {{node.value}}
</mat-tree-node>
<mat-tree-node *matNodeDef="let node; when: isSpecial" matTreeNodePadding>
  [ A special node {{node.value}} ]
</mat-tree-node>

----------------------------------------

TITLE: Generating Drag and Drop Component
DESCRIPTION: Command to generate a component using CDK drag and drop directives.

LANGUAGE: bash
CODE:
ng generate @angular/cdk:drag-drop <component-name>

----------------------------------------

TITLE: Generating Table Component
DESCRIPTION: Command to create a component with Material Design data table supporting sorting and pagination.

LANGUAGE: bash
CODE:
ng generate @angular/material:table <component-name>

----------------------------------------

TITLE: Using Input Transforms for Boolean Attributes
DESCRIPTION: Shows how to use input transform functions to coerce boolean values for component and directive inputs in Angular.

LANGUAGE: typescript
CODE:
import {Input, booleanAttribute} from '@angular/core';

@Input({transform: booleanAttribute}) disabled: boolean = false;

----------------------------------------

TITLE: Defining Angular Material Datepicker Testing API in TypeScript
DESCRIPTION: This code snippet defines the API for Angular Material's datepicker testing utilities. It includes interfaces, enums, and classes for various datepicker components and their corresponding harnesses.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

// @public
export interface CalendarCellHarnessFilters extends BaseHarnessFilters {
    active?: boolean;
    disabled?: boolean;
    inComparisonRange?: boolean;
    inPreviewRange?: boolean;
    inRange?: boolean;
    selected?: boolean;
    text?: string | RegExp;
    today?: boolean;
}

// @public
export interface CalendarHarnessFilters extends BaseHarnessFilters {
}

// @public
export enum CalendarView {
    // (undocumented)
    MONTH = 0,
    // (undocumented)
    MULTI_YEAR = 2,
    // (undocumented)
    YEAR = 1
}

// @public
export interface DatepickerInputHarnessFilters extends BaseHarnessFilters {
    placeholder?: string | RegExp;
    value?: string | RegExp;
}

// @public
export interface DatepickerToggleHarnessFilters extends BaseHarnessFilters {
}

// @public
export interface DateRangeInputHarnessFilters extends BaseHarnessFilters {
    value?: string | RegExp;
}

// @public
export class MatCalendarCellHarness extends ComponentHarness {
    blur(): Promise<void>;
    focus(): Promise<void>;
    getAriaLabel(): Promise<string>;
    getText(): Promise<string>;
    // (undocumented)
    static hostSelector: string;
    hover(): Promise<void>;
    isActive(): Promise<boolean>;
    isComparisonRangeEnd(): Promise<boolean>;
    isComparisonRangeStart(): Promise<boolean>;
    isDisabled(): Promise<boolean>;
    isInComparisonRange(): Promise<boolean>;
    isInPreviewRange(): Promise<boolean>;
    isInRange(): Promise<boolean>;
    isPreviewRangeEnd(): Promise<boolean>;
    isPreviewRangeStart(): Promise<boolean>;
    isRangeEnd(): Promise<boolean>;
    isRangeStart(): Promise<boolean>;
    isSelected(): Promise<boolean>;
    isToday(): Promise<boolean>;
    mouseAway(): Promise<void>;
    select(): Promise<void>;
    static with(options?: CalendarCellHarnessFilters): HarnessPredicate<MatCalendarCellHarness>;
}

// @public
export class MatCalendarHarness extends ComponentHarness {
    changeView(): Promise<void>;
    getCells(filter?: CalendarCellHarnessFilters): Promise<MatCalendarCellHarness[]>;
    getCurrentView(): Promise<CalendarView>;
    getCurrentViewLabel(): Promise<string>;
    // (undocumented)
    static hostSelector: string;
    next(): Promise<void>;
    previous(): Promise<void>;
    selectCell(filter?: CalendarCellHarnessFilters): Promise<void>;
    static with(options?: CalendarHarnessFilters): HarnessPredicate<MatCalendarHarness>;
}

// @public
export class MatDatepickerInputHarness extends MatDatepickerInputHarnessBase implements DatepickerTrigger {
    closeCalendar(): Promise<void>;
    getCalendar(filter?: CalendarHarnessFilters): Promise<MatCalendarHarness>;
    hasCalendar(): Promise<boolean>;
    // (undocumented)
    static hostSelector: string;
    isCalendarOpen(): Promise<boolean>;
    openCalendar(): Promise<void>;
    static with(options?: DatepickerInputHarnessFilters): HarnessPredicate<MatDatepickerInputHarness>;
}

// @public
export class MatDatepickerToggleHarness extends DatepickerTriggerHarnessBase {
    // (undocumented)
    static hostSelector: string;
    isCalendarOpen(): Promise<boolean>;
    isDisabled(): Promise<boolean>;
    // (undocumented)
    protected _openCalendar(): Promise<void>;
    static with(options?: DatepickerToggleHarnessFilters): HarnessPredicate<MatDatepickerToggleHarness>;
}

// @public
export class MatDateRangeInputHarness extends DatepickerTriggerHarnessBase {
    getEndInput(): Promise<MatEndDateHarness>;
    getSeparator(): Promise<string>;
    getStartInput(): Promise<MatStartDateHarness>;
    getValue(): Promise<string>;
    // (undocumented)
    static hostSelector: string;
    isCalendarOpen(): Promise<boolean>;
    isDisabled(): Promise<boolean>;
    isRequired(): Promise<boolean>;
    // (undocumented)
    protected _openCalendar(): Promise<void>;
    static with(options?: DateRangeInputHarnessFilters): HarnessPredicate<MatDateRangeInputHarness>;
}

// @public
export class MatEndDateHarness extends MatDatepickerInputHarnessBase {
    // (undocumented)
    static hostSelector: string;
    static with(options?: DatepickerInputHarnessFilters): HarnessPredicate<MatEndDateHarness>;
}

// @public
export class MatStartDateHarness extends MatDatepickerInputHarnessBase {
    // (undocumented)
    static hostSelector: string;
    static with(options?: DatepickerInputHarnessFilters): HarnessPredicate<MatStartDateHarness>;
}

----------------------------------------

TITLE: Generating Dashboard Component
DESCRIPTION: Command to create a component with Material Design card grid layout.

LANGUAGE: bash
CODE:
ng generate @angular/material:dashboard <component-name>

----------------------------------------

TITLE: Running Server-side Angular Application
DESCRIPTION: Command to start a local server for the universal app. Note that live reload is not supported.

LANGUAGE: bash
CODE:
yarn universal-app

----------------------------------------

TITLE: Importing MatSlideToggleModule in Angular Component
DESCRIPTION: TypeScript code snippet showing how to import and include the MatSlideToggleModule in an Angular component or module. This is necessary to use the slide toggle component.

LANGUAGE: typescript
CODE:
import { MatSlideToggleModule } from '@angular/material/slide-toggle';

@Component ({
  imports: [
    MatSlideToggleModule,
  ]
})
class AppComponent {}

----------------------------------------

TITLE: Preferring Focused Components in HTML
DESCRIPTION: Shows how to create more granular, focused components instead of complex, configurable ones. This approach improves maintainability and readability.

LANGUAGE: html
CODE:
<mat-button>Basic button</mat-button>
<mat-fab>FAB</mat-fab>
<mat-icon-button>pony</mat-icon-button>

----------------------------------------

TITLE: Defining Angular Material Tree Testing API Types and Classes
DESCRIPTION: Defines the core testing harness classes and interfaces for Angular Material Tree components. Includes MatTreeHarness for tree component testing and MatTreeNodeHarness for individual node testing, along with supporting types and filters.

LANGUAGE: typescript
CODE:
import * as _angular_cdk_testing from '@angular/cdk/testing';
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { ContentContainerComponentHarness } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

// @public
export class MatTreeHarness extends ComponentHarness {
    getNodes(filter?: TreeNodeHarnessFilters): Promise<MatTreeNodeHarness[]>;
    getTreeStructure(): Promise<TextTree>;
    static hostSelector: string;
    static with(options?: TreeHarnessFilters): HarnessPredicate<MatTreeHarness>;
}

// @public
export class MatTreeNodeHarness extends ContentContainerComponentHarness<string> {
    collapse(): Promise<void>;
    expand(): Promise<void>;
    getLevel(): Promise<number>;
    getText(): Promise<string>;
    static hostSelector: string;
    isDisabled(): Promise<boolean>;
    isExpandable(): Promise<boolean>;
    isExpanded(): Promise<boolean>;
    toggle(): Promise<void>;
    // (undocumented)
    _toggle: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement | null>;
    static with(options?: TreeNodeHarnessFilters): HarnessPredicate<MatTreeNodeHarness>;
}

// @public (undocumented)
export type TextTree = {
    text?: string;
    children?: TextTree[];
};

// @public
export interface TreeHarnessFilters extends BaseHarnessFilters {
}

// @public
export interface TreeNodeHarnessFilters extends BaseHarnessFilters {
    disabled?: boolean;
    expanded?: boolean;
    level?: number;
    text?: string | RegExp;
}

----------------------------------------

TITLE: Installing Angular Material Experimental Package
DESCRIPTION: Command to install the Angular Material Experimental package using npm

LANGUAGE: bash
CODE:
npm i @angular/material-experimental

----------------------------------------

TITLE: Supporting High-Contrast Mode in CSS
DESCRIPTION: Shows how to add support for Windows high-contrast mode in Angular Material components using CSS mixins.

LANGUAGE: scss
CODE:
@include cdk-high-contrast(active, off) {
  .unicorn-motocycle {
    border: 1px solid #fff !important;
  }
}

----------------------------------------

TITLE: Indeterminate Spinner Implementation - Angular Material
DESCRIPTION: Implementation of the mat-spinner component, which is an alias for mat-progress-spinner in indeterminate mode. Used for showing indefinite progress states.

LANGUAGE: html
CODE:
<mat-spinner>

----------------------------------------

TITLE: Using Angular Material Checkbox Component
DESCRIPTION: HTML template example showing how to use the experimental checkbox component

LANGUAGE: html
CODE:
<mat-checkbox [checked]="isChecked">Check me</mat-checkbox>

----------------------------------------

TITLE: Defining Angular Material Tree Components and Interfaces in TypeScript
DESCRIPTION: This code snippet defines various Angular Material Tree components, classes, and interfaces. It includes imports from Angular core and CDK, and exports classes for tree nodes, data sources, and other tree-related utilities.

LANGUAGE: typescript
CODE:
import { AfterContentInit } from '@angular/core';
import { CdkNestedTreeNode } from '@angular/cdk/tree';
import { CdkTree } from '@angular/cdk/tree';
import { CdkTreeNode } from '@angular/cdk/tree';
import { CdkTreeNodeDef } from '@angular/cdk/tree';
import { CdkTreeNodeOutlet } from '@angular/cdk/tree';
import { CdkTreeNodePadding } from '@angular/cdk/tree';
import { CdkTreeNodeToggle } from '@angular/cdk/tree';
import { CollectionViewer } from '@angular/cdk/collections';
import { DataSource } from '@angular/cdk/collections';
import { FlatTreeControl } from '@angular/cdk/tree';
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/tree';
import * as i1_2 from '@angular/cdk/bidi';
import { Observable } from 'rxjs';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';
import { TreeControl } from '@angular/cdk/tree';
import { ViewContainerRef } from '@angular/core';

// @public
export class MatNestedTreeNode<T, K = T> extends CdkNestedTreeNode<T, K> implements AfterContentInit, OnDestroy, OnInit {
    // ... (class implementation details)
}

// @public
export class MatTree<T, K = T> extends CdkTree<T, K> {
    // ... (class implementation details)
}

// @public @deprecated
export class MatTreeFlatDataSource<T, F, K = F> extends DataSource<F> {
    // ... (class implementation details)
}

// ... (other class and interface definitions)

----------------------------------------

TITLE: Defining Angular Material Toolbar API in TypeScript
DESCRIPTION: This code snippet defines the API for Angular Material Toolbar component. It includes class definitions for MatToolbar, MatToolbarModule, and MatToolbarRow, along with their respective properties, methods, and Angular-specific decorators. It also includes import statements and a utility function.

LANGUAGE: typescript
CODE:
import { AfterViewInit } from '@angular/core';
import { ElementRef } from '@angular/core';
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/bidi';
import { QueryList } from '@angular/core';

// @public (undocumented)
export class MatToolbar implements AfterViewInit {
    constructor(...args: unknown[]);
    color?: string | null;
    // (undocumented)
    protected _elementRef: ElementRef<any>;
    // (undocumented)
    ngAfterViewInit(): void;
    _toolbarRows: QueryList<MatToolbarRow>;
    // (undocumented)
    static ɵcmp: i0.ɵɵComponentDeclaration<MatToolbar, "mat-toolbar", ["matToolbar"], { "color": { "alias": "color"; "required": false; }; }, {}, ["_toolbarRows"], ["*", "mat-toolbar-row"], true, never>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<MatToolbar, never>;
}

// @public (undocumented)
export class MatToolbarModule {
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<MatToolbarModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<MatToolbarModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<MatToolbarModule, never, [typeof MatCommonModule, typeof MatToolbar, typeof MatToolbarRow], [typeof MatToolbar, typeof MatToolbarRow, typeof MatCommonModule]>;
}

// @public (undocumented)
export class MatToolbarRow {
    // (undocumented)
    static ɵdir: i0.ɵɵDirectiveDeclaration<MatToolbarRow, "mat-toolbar-row", ["matToolbarRow"], {}, {}, never, never, true, never>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<MatToolbarRow, never>;
}

// @public
export function throwToolbarMixedModesError(): void;

----------------------------------------

TITLE: Defining Badge Testing API in TypeScript
DESCRIPTION: This code snippet defines the API for testing Angular Material badges. It includes imports from @angular/cdk/testing, a BadgeHarnessFilters interface, and the MatBadgeHarness class with various methods for interacting with and querying badge components.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

// @public (undocumented)
export interface BadgeHarnessFilters extends BaseHarnessFilters {
    // (undocumented)
    text?: string | RegExp;
}

// @public
export class MatBadgeHarness extends ComponentHarness {
    getPosition(): Promise<MatBadgePosition>;
    getSize(): Promise<MatBadgeSize>;
    getText(): Promise<string>;
    // (undocumented)
    static hostSelector: string;
    isDisabled(): Promise<boolean>;
    isHidden(): Promise<boolean>;
    isOverlapping(): Promise<boolean>;
    static with(options?: BadgeHarnessFilters): HarnessPredicate<MatBadgeHarness>;
}

----------------------------------------

TITLE: TypeScript Angular Material List API Definitions
DESCRIPTION: Comprehensive type definitions and component declarations for Angular Material's list components including MatList, MatListItem, MatSelectionList and related interfaces. Includes injection tokens, base classes, and component configurations.

LANGUAGE: typescript
CODE:
import { AfterViewInit } from '@angular/core';
import { BooleanInput } from '@angular/cdk/coercion';
import { ControlValueAccessor } from '@angular/forms';
import { ElementRef } from '@angular/core';
import { EventEmitter } from '@angular/core';
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/bidi';
import * as i12 from '@angular/material/divider';
import * as i2 from '@angular/cdk/observers';
import { InjectionToken } from '@angular/core';
import { MatDivider } from '@angular/material/divider';
import { NgZone } from '@angular/core';
import { OnChanges } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';
import { QueryList } from '@angular/core';
import { SelectionModel } from '@angular/cdk/collections';
import { SimpleChanges } from '@angular/core';

export const MAT_LIST: InjectionToken<MatList>;
export const MAT_LIST_CONFIG: InjectionToken<MatListConfig>;
export const MAT_NAV_LIST: InjectionToken<MatNavList>;
export const MAT_SELECTION_LIST_VALUE_ACCESSOR: any;

// Additional class and interface definitions follow...

----------------------------------------

TITLE: Importing Angular Material Checkbox Module
DESCRIPTION: TypeScript code showing how to import and configure the experimental checkbox module in an Angular module

LANGUAGE: typescript
CODE:
import {MatCheckboxModule} from '@angular/material/checkbox';

@NgModule({
  declarations: [MyComponent],
  imports: [MatCheckboxModule],
})
export class MyModule {}

----------------------------------------

TITLE: Importing and Defining Angular Material Form Field API
DESCRIPTION: This snippet defines the main imports and exports for the Angular Material form field module. It includes various Angular core imports, custom types, and class definitions for form field components.

LANGUAGE: typescript
CODE:
import { AbstractControlDirective } from '@angular/forms';
import { AfterContentChecked } from '@angular/core';
import { AfterContentInit } from '@angular/core';
import { AfterViewInit } from '@angular/core';
import { BooleanInput } from '@angular/cdk/coercion';
import { ElementRef } from '@angular/core';
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/bidi';
import * as i2 from '@angular/cdk/observers';
import { InjectionToken } from '@angular/core';
import { NgControl } from '@angular/forms';
import { Observable } from 'rxjs';
import { OnDestroy } from '@angular/core';
import { QueryList } from '@angular/core';

export type FloatLabelType = 'always' | 'auto';

export function getMatFormFieldDuplicatedHintError(align: string): Error;

export function getMatFormFieldMissingControlError(): Error;

export function getMatFormFieldPlaceholderConflictError(): Error;

export const MAT_ERROR: InjectionToken<MatError>;

export const MAT_FORM_FIELD: InjectionToken<MatFormField>;

export const MAT_FORM_FIELD_DEFAULT_OPTIONS: InjectionToken<MatFormFieldDefaultOptions>;

export const MAT_PREFIX: InjectionToken<MatPrefix>;

export const MAT_SUFFIX: InjectionToken<MatSuffix>;

----------------------------------------

TITLE: Defining Angular Material Tabs Testing API
DESCRIPTION: Comprehensive TypeScript definitions for Angular Material's tabs testing harnesses. Includes harness classes for tab groups, individual tabs, tab links, and navigation bars, along with their associated filter interfaces. These classes extend Angular CDK's base testing utilities and provide methods for interacting with and testing tab components.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { ComponentHarnessConstructor } from '@angular/cdk/testing';
import { ContentContainerComponentHarness } from '@angular/cdk/testing';
import { HarnessLoader } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

// @public
export class MatTabGroupHarness extends ComponentHarness {
    getSelectedTab(): Promise<MatTabHarness>;
    getTabs(filter?: TabHarnessFilters): Promise<MatTabHarness[]>;
    static hostSelector: string;
    selectTab(filter?: TabHarnessFilters): Promise<void>;
    static with<T extends MatTabGroupHarness>(this: ComponentHarnessConstructor<T>, options?: TabGroupHarnessFilters): HarnessPredicate<T>;
}

// @public
export class MatTabHarness extends ContentContainerComponentHarness<string> {
    getAriaLabel(): Promise<string | null>;
    getAriaLabelledby(): Promise<string | null>;
    getLabel(): Promise<string>;
    protected getRootHarnessLoader(): Promise<HarnessLoader>;
    getTextContent(): Promise<string>;
    static hostSelector: string;
    isDisabled(): Promise<boolean>;
    isSelected(): Promise<boolean>;
    select(): Promise<void>;
    static with<T extends MatTabHarness>(this: ComponentHarnessConstructor<T>, options?: TabHarnessFilters): HarnessPredicate<T>;
}

// @public
export class MatTabLinkHarness extends ComponentHarness {
    click(): Promise<void>;
    getLabel(): Promise<string>;
    static hostSelector: string;
    isActive(): Promise<boolean>;
    isDisabled(): Promise<boolean>;
    static with<T extends MatTabLinkHarness>(this: ComponentHarnessConstructor<T>, options?: TabLinkHarnessFilters): HarnessPredicate<T>;
}

// @public
export class MatTabNavBarHarness extends ComponentHarness {
    clickLink(filter?: TabLinkHarnessFilters): Promise<void>;
    getActiveLink(): Promise<MatTabLinkHarness>;
    getLinks(filter?: TabLinkHarnessFilters): Promise<MatTabLinkHarness[]>;
    getPanel(): Promise<MatTabNavPanelHarness>;
    static hostSelector: string;
    static with<T extends MatTabNavBarHarness>(this: ComponentHarnessConstructor<T>, options?: TabNavBarHarnessFilters): HarnessPredicate<T>;
}

// @public
export interface TabGroupHarnessFilters extends BaseHarnessFilters {
    selectedTabLabel?: string | RegExp;
}

// @public
export interface TabHarnessFilters extends BaseHarnessFilters {
    label?: string | RegExp;
    selected?: boolean;
}

// @public
export interface TabLinkHarnessFilters extends BaseHarnessFilters {
    label?: string | RegExp;
}

// @public
export interface TabNavBarHarnessFilters extends BaseHarnessFilters {
}

// @public
export interface TabNavPanelHarnessFilters extends BaseHarnessFilters {
}

----------------------------------------

TITLE: Implementing Harness Predicate Filters
DESCRIPTION: Example of implementing 'with' methods to create HarnessPredicate instances for filtering menu and menu item harnesses.

LANGUAGE: TypeScript
CODE:
interface MyMenuHarnessFilters extends BaseHarnessFilters {
  /** Filters based on the trigger text for the menu. */
  triggerText?: string | RegExp;
}

interface MyMenuItemHarnessFilters extends BaseHarnessFilters {
  /** Filters based on the text of the menu item. */
  text?: string | RegExp;
}

class MyMenuHarness extends ComponentHarness {
  static hostSelector = 'my-menu';

  /** Creates a `HarnessPredicate` used to locate a particular `MyMenuHarness`. */
  static with(options: MyMenuHarnessFilters): HarnessPredicate<MyMenuHarness> {
    return new HarnessPredicate(MyMenuHarness, options)
        .addOption('trigger text', options.triggerText,
            (harness, text) => HarnessPredicate.stringMatches(harness.getTriggerText(), text));
  }

  protected getPopupHarness = this.locatorFor(MyPopupHarness);

  /** Gets the text of the menu trigger. */
  async getTriggerText(): Promise<string> {
    const popupHarness = await this.getPopupHarness();
    return popupHarness.getTriggerText();
  }

  ...
}

class MyMenuItemHarness extends ComponentHarness {
  static hostSelector = 'my-menu-item';

  /** Creates a `HarnessPredicate` used to locate a particular `MyMenuItemHarness`. */
  static with(options: MyMenuItemHarnessFilters): HarnessPredicate<MyMenuItemHarness> {
    return new HarnessPredicate(MyMenuItemHarness, options)
        .addOption('text', options.text,
            (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text));
  }

  /** Gets the text of the menu item. */
  async getText(): Promise<string> {
    const host = await this.host();
    return host.text();
  }
}

----------------------------------------

TITLE: Updating pull request branch for Angular Material
DESCRIPTION: These commands rebase the local branch and force push to GitHub, updating the pull request with suggested changes for Angular Material.

LANGUAGE: shell
CODE:
git rebase upstream/main -i
git push -f

----------------------------------------

TITLE: Defining DialogHarnessFilters Interface in TypeScript
DESCRIPTION: This snippet defines the DialogHarnessFilters interface, which extends BaseHarnessFilters. It's used for filtering dialog harnesses in tests.

LANGUAGE: typescript
CODE:
export interface DialogHarnessFilters extends BaseHarnessFilters {}

----------------------------------------

TITLE: Configuring Badge Size in Angular Material
DESCRIPTION: This snippet illustrates how to set the size of a badge using the matBadgeSize attribute. The badge can be set to 'small', 'medium', or 'large'.

LANGUAGE: html
CODE:
<span matBadge="4" matBadgeSize="large">
  Notifications
</span>


----------------------------------------

TITLE: Creating a new Git branch for Angular Material contributions
DESCRIPTION: This command creates a new Git branch for making changes to Angular Material. It's part of the process for submitting a pull request.

LANGUAGE: shell
CODE:
git checkout -b my-fix-branch main

----------------------------------------

TITLE: Importing Dependencies for Angular Material Chips Testing in TypeScript
DESCRIPTION: This snippet shows the import statements for the necessary dependencies from Angular CDK testing module and defines the module's exports.

LANGUAGE: typescript
CODE:
import * as _angular_cdk_testing from '@angular/cdk/testing';
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { ComponentHarnessConstructor } from '@angular/cdk/testing';
import { ContentContainerComponentHarness } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';
import { TestKey } from '@angular/cdk/testing';

----------------------------------------

TITLE: Importing Angular Material Tabs Core Dependencies
DESCRIPTION: Core imports required for Angular Material tabs functionality including lifecycle hooks, subjects, portals and Angular core dependencies.

LANGUAGE: typescript
CODE:
import { AfterContentChecked } from '@angular/core';
import { AfterContentInit } from '@angular/core';
import { AfterViewInit } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { CdkPortal } from '@angular/cdk/portal';
import { CdkPortalOutlet } from '@angular/cdk/portal';
import { ChangeDetectorRef } from '@angular/core';
import { Direction } from '@angular/cdk/bidi';
import { ElementRef } from '@angular/core';
import { EventEmitter } from '@angular/core';
import { FocusableOption } from '@angular/cdk/a11y';
import { FocusOrigin } from '@angular/cdk/a11y';

----------------------------------------

TITLE: Example Placeholder for Angular Material Paginator
DESCRIPTION: Placeholder for an example of the paginator component, likely to be replaced with actual code in the documentation.

LANGUAGE: html
CODE:
<!-- example(paginator-overview) -->

----------------------------------------

TITLE: Defining Card Harness Testing Interfaces and Classes in TypeScript
DESCRIPTION: Defines the testing infrastructure for Angular Material Cards, including harness filters interface, card harness class with testing methods, and card section enum. Enables programmatic testing of card components including accessing title, subtitle, and content text.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarnessConstructor } from '@angular/cdk/testing';
import { ContentContainerComponentHarness } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

export interface CardHarnessFilters extends BaseHarnessFilters {
    subtitle?: string | RegExp;
    text?: string | RegExp;
    title?: string | RegExp;
}

export class MatCardHarness extends ContentContainerComponentHarness<MatCardSection> {
    getSubtitleText(): Promise<string>;
    getText(): Promise<string>;
    getTitleText(): Promise<string>;
    static hostSelector: string;
    static with<T extends MatCardHarness>(this: ComponentHarnessConstructor<T>, options?: CardHarnessFilters): HarnessPredicate<T>;
}

export enum MatCardSection {
    ACTIONS = ".mat-mdc-card-actions",
    CONTENT = ".mat-mdc-card-content",
    FOOTER = ".mat-mdc-card-footer",
    HEADER = ".mat-mdc-card-header"
}

----------------------------------------

TITLE: Configuring Robots.txt for Angular Material Components Documentation
DESCRIPTION: This robots.txt file specifies the sitemap location for the Angular Material Components documentation and sets crawling permissions for web robots. It allows unrestricted access to all pages on the site.

LANGUAGE: plaintext
CODE:
Sitemap: https://material.angular.io/sitemap.xml
User-agent: *
Disallow:

----------------------------------------

TITLE: Defining Angular Material Badge API in TypeScript
DESCRIPTION: TypeScript definitions for the Angular Material Badge component including the main MatBadge class, its module, and supporting types. The code defines the public API surface with properties for customizing badge appearance, position, and behavior.

LANGUAGE: typescript
CODE:
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/a11y';
import * as i1_2 from '@angular/cdk/bidi';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';

// @public
export class MatBadge implements OnInit, OnDestroy {
    constructor(...args: unknown[]);
    get color(): ThemePalette;
    set color(value: ThemePalette);
    get content(): string | number | undefined | null;
    set content(newContent: string | number | undefined | null);
    get description(): string;
    set description(newDescription: string);
    disabled: boolean;
    getBadgeElement(): HTMLElement | undefined;
    hidden: boolean;
    isAbove(): boolean;
    isAfter(): boolean;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_hidden: unknown;
    static ngAcceptInputType_overlap: unknown;
    ngOnDestroy(): void;
    ngOnInit(): void;
    overlap: boolean;
    position: MatBadgePosition;
    size: MatBadgeSize;
    static ɵdir: i0.ɵɵDirectiveDeclaration<MatBadge, "[matBadge]", never, { "color": { "alias": "matBadgeColor"; "required": false; }; "overlap": { "alias": "matBadgeOverlap"; "required": false; }; "disabled": { "alias": "matBadgeDisabled"; "required": false; }; "position": { "alias": "matBadgePosition"; "required": false; }; "content": { "alias": "matBadge"; "required": false; }; "description": { "alias": "matBadgeDescription"; "required": false; }; "size": { "alias": "matBadgeSize"; "required": false; }; "hidden": { "alias": "matBadgeHidden"; "required": false; }; }, {}, never, never, true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MatBadge, never>;
}

export class MatBadgeModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<MatBadgeModule, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<MatBadgeModule>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<MatBadgeModule, never, [typeof i1.A11yModule, typeof MatCommonModule, typeof MatBadge, typeof _MatBadgeStyleLoader], [typeof MatBadge, typeof MatCommonModule]>;
}

export type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after' | 'before' | 'after' | 'above' | 'below';

export type MatBadgeSize = 'small' | 'medium' | 'large';

----------------------------------------

TITLE: Defining MatSnackBarHarness Test Harness in TypeScript
DESCRIPTION: Defines a test harness class for Angular Material's Snackbar component. The harness extends ContentContainerComponentHarness and provides methods for interacting with and testing snackbar functionality including dismissal, message retrieval, and action handling.

LANGUAGE: typescript
CODE:
import { AriaLivePoliteness } from '@angular/cdk/a11y';
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ContentContainerComponentHarness } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

// @public
export class MatSnackBarHarness extends ContentContainerComponentHarness<string> {
    dismissWithAction(): Promise<void>;
    getActionDescription(): Promise<string>;
    getAriaLive(): Promise<AriaLivePoliteness>;
    getMessage(): Promise<string>;
    // @deprecated
    getRole(): Promise<'alert' | 'status' | null>;
    hasAction(): Promise<boolean>;
    static hostSelector: string;
    isDismissed(): Promise<boolean>;
    static with(options?: SnackBarHarnessFilters): HarnessPredicate<MatSnackBarHarness>;
}

// @public
export interface SnackBarHarnessFilters extends BaseHarnessFilters {
}

// (No @packageDocumentation comment for this package)

----------------------------------------

TITLE: Implementing Radio Menu Items
DESCRIPTION: Demonstrates how to create mutually exclusive menu items using cdkMenuItemRadio directive.

LANGUAGE: html
CODE:
<button cdkMenuItemRadio
        [cdkMenuItemChecked]="size === 'small'"
        (cdkMenuItemTriggered)="size = 'small'">
  Small
</button>

----------------------------------------

TITLE: Configuring Overlay Dimensions
DESCRIPTION: Shows how to configure an overlay's size using the create method's configuration object

LANGUAGE: typescript
CODE:
const overlayRef = overlay.create({
  height: '400px',
  width: '600px',
});

----------------------------------------

TITLE: Defining MatToolbarHarness Class in TypeScript for Angular Material Testing
DESCRIPTION: This code snippet defines the MatToolbarHarness class, which extends ContentContainerComponentHarness for testing mat-toolbar components. It includes methods for getting row text, checking for multiple rows, and creating instances with specific filters.

LANGUAGE: typescript
CODE:
export class MatToolbarHarness extends ContentContainerComponentHarness<MatToolbarSection> {
    getRowsAsText(): Promise<string[]>;
    hasMultipleRows(): Promise<boolean>;
    // (undocumented)
    static hostSelector: string;
    static with(options?: ToolbarHarnessFilters): HarnessPredicate<MatToolbarHarness>;
}

----------------------------------------

TITLE: Defining Angular Material Form Field Testing API in TypeScript
DESCRIPTION: This code snippet defines the API for Angular Material's form field testing utilities. It includes imports from @angular/cdk/testing, interfaces for harness filters, and classes for form field, error, and control harnesses.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { ComponentHarnessConstructor } from '@angular/cdk/testing';
import { ContentContainerComponentHarness } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

// @public
export interface ErrorHarnessFilters extends BaseHarnessFilters {
    text?: string | RegExp;
}

// @public
export type FormFieldControlHarness = MatInputHarness | MatSelectHarness | MatDatepickerInputHarness | MatDateRangeInputHarness;

// @public
export interface FormFieldHarnessFilters extends BaseHarnessFilters {
    floatingLabelText?: string | RegExp;
    hasErrors?: boolean;
    isValid?: boolean;
}

// @public
export class MatErrorHarness extends ComponentHarness {
    // (undocumented)
    protected static _getErrorPredicate<T extends MatErrorHarness>(type: ComponentHarnessConstructor<T>, options: ErrorHarnessFilters): HarnessPredicate<T>;
    getText(): Promise<string>;
    // (undocumented)
    static hostSelector: string;
    static with<T extends MatErrorHarness>(this: ComponentHarnessConstructor<T>, options?: ErrorHarnessFilters): HarnessPredicate<T>;
}

// @public
export abstract class MatFormFieldControlHarness extends ComponentHarness {
}

// @public (undocumented)
export class MatFormFieldHarness extends ComponentHarness {
    getAppearance(): Promise<'fill' | 'outline'>;
    getControl(): Promise<FormFieldControlHarness | null>;
    getControl<X extends MatFormFieldControlHarness>(type: ComponentHarnessConstructor<X>): Promise<X | null>;
    getControl<X extends MatFormFieldControlHarness>(type: HarnessPredicate<X>): Promise<X | null>;
    getErrors(filter?: ErrorHarnessFilters): Promise<MatErrorHarness[]>;
    getLabel(): Promise<string | null>;
    getPrefixText(): Promise<string>;
    getSuffixText(): Promise<string>;
    getTextErrors(): Promise<string[]>;
    getTextHints(): Promise<string[]>;
    getThemeColor(): Promise<'primary' | 'accent' | 'warn'>;
    hasErrors(): Promise<boolean>;
    hasLabel(): Promise<boolean>;
    // (undocumented)
    static hostSelector: string;
    isAutofilled(): Promise<boolean>;
    isControlDirty(): Promise<boolean | null>;
    isControlPending(): Promise<boolean | null>;
    isControlTouched(): Promise<boolean | null>;
    isControlValid(): Promise<boolean | null>;
    isDisabled(): Promise<boolean>;
    isLabelFloating(): Promise<boolean>;
    static with<T extends MatFormFieldHarness>(this: ComponentHarnessConstructor<T>, options?: FormFieldHarnessFilters): HarnessPredicate<T>;
}

----------------------------------------

TITLE: Implementing Simple Divider in Angular Material
DESCRIPTION: Creates a basic horizontal or vertical line separator styled with Material theme.

LANGUAGE: html
CODE:
<mat-divider></mat-divider>

----------------------------------------

TITLE: Defining MatTooltipHarness Class in TypeScript
DESCRIPTION: Defines the MatTooltipHarness class, which extends ComponentHarness to provide testing utilities for Angular Material tooltips. It includes methods for interacting with and querying the state of tooltips.

LANGUAGE: typescript
CODE:
// @public
export class MatTooltipHarness extends ComponentHarness {
    getTooltipText(): Promise<string>;
    hide(): Promise<void>;
    // (undocumented)
    static hostSelector: string;
    isDisabled(): Promise<boolean>;
    isOpen(): Promise<boolean>;
    show(): Promise<void>;
    static with<T extends MatTooltipHarness>(this: ComponentHarnessConstructor<T>, options?: TooltipHarnessFilters): HarnessPredicate<T>;
}

----------------------------------------

TITLE: Defining MatTooltipHarness Class in TypeScript
DESCRIPTION: Defines the MatTooltipHarness class, which extends ComponentHarness to provide testing utilities for Angular Material tooltips. It includes methods for interacting with and querying the state of tooltips.

LANGUAGE: typescript
CODE:
// @public
export class MatTooltipHarness extends ComponentHarness {
    getTooltipText(): Promise<string>;
    hide(): Promise<void>;
    // (undocumented)
    static hostSelector: string;
    isDisabled(): Promise<boolean>;
    isOpen(): Promise<boolean>;
    show(): Promise<void>;
    static with<T extends MatTooltipHarness>(this: ComponentHarnessConstructor<T>, options?: TooltipHarnessFilters): HarnessPredicate<T>;
}

----------------------------------------

TITLE: Defining Angular Material Snackbar API Types and Interfaces
DESCRIPTION: Comprehensive TypeScript declarations for Angular Material's Snackbar component including injection tokens, services, containers, and configuration interfaces. Includes imports from Angular core and CDK dependencies.

LANGUAGE: typescript
CODE:
import { AfterViewInit } from '@angular/core';
import { AriaLivePoliteness } from '@angular/cdk/a11y';
import { BasePortalOutlet } from '@angular/cdk/portal';
import { CdkPortalOutlet } from '@angular/cdk/portal';
import { ComponentPortal } from '@angular/cdk/portal';
import { ComponentRef } from '@angular/core';
import { ComponentType } from '@angular/cdk/overlay';
import { Direction } from '@angular/cdk/bidi';
import { DomPortal } from '@angular/cdk/portal';
import { ElementRef } from '@angular/core';
import { EmbeddedViewRef } from '@angular/core';
import { FocusOrigin } from '@angular/cdk/a11y';
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/bidi';
import * as i2 from '@angular/cdk/overlay';
import * as i3 from '@angular/cdk/portal';
import { InjectionToken } from '@angular/core';
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';
import { OverlayRef } from '@angular/cdk/overlay';
import { Subject } from 'rxjs';
import { TemplatePortal } from '@angular/cdk/portal';
import { TemplateRef } from '@angular/core';
import { ViewContainerRef } from '@angular/core';

export const MAT_SNACK_BAR_DATA: InjectionToken<any>;
export const MAT_SNACK_BAR_DEFAULT_OPTIONS: InjectionToken<MatSnackBarConfig<any>>;
export function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig;

export class MatSnackBar implements OnDestroy {
    constructor(...args: unknown[]);
    dismiss(): void;
    handsetCssClass: string;
    ngOnDestroy(): void;
    open(message: string, action?: string, config?: MatSnackBarConfig): MatSnackBarRef<TextOnlySnackBar>;
    get _openedSnackBarRef(): MatSnackBarRef<any> | null;
    set _openedSnackBarRef(value: MatSnackBarRef<any> | null);
    openFromComponent<T, D = any>(component: ComponentType<T>, config?: MatSnackBarConfig<D>): MatSnackBarRef<T>;
    openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig): MatSnackBarRef<EmbeddedViewRef<any>>;
    simpleSnackBarComponent: typeof SimpleSnackBar;
    snackBarContainerComponent: typeof MatSnackBarContainer;
    static ɵfac: i0.ɵɵFactoryDeclaration<MatSnackBar, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MatSnackBar>;
}

----------------------------------------

TITLE: Handling Snackbar Events and Dismissal in Angular
DESCRIPTION: Shows how to subscribe to snackbar events and manually dismiss the snackbar using MatSnackBarRef

LANGUAGE: typescript
CODE:
snackBarRef.afterDismissed().subscribe(() => {
  console.log('The snackbar was dismissed');
});


snackBarRef.onAction().subscribe(() => {
  console.log('The snackbar action was triggered!');
});

snackBarRef.dismiss();

----------------------------------------

TITLE: Defining TooltipComponent Class in Angular
DESCRIPTION: This snippet defines the TooltipComponent class, which represents the actual tooltip element. It includes methods for showing and hiding the tooltip, as well as handling animations and interactions.

LANGUAGE: typescript
CODE:
export class TooltipComponent implements OnDestroy {
    constructor(...args: unknown[]);
    afterHidden(): Observable<void>;
    _cancelPendingAnimations(): void;
    protected _elementRef: ElementRef<HTMLElement>;
    _handleAnimationEnd({ animationName }: AnimationEvent): void;
    _handleBodyInteraction(): void;
    _handleMouseLeave({ relatedTarget }: MouseEvent): void;
    hide(delay: number): void;
    _isMultiline: boolean;
    isVisible(): boolean;
    _markForCheck(): void;
    message: string;
    _mouseLeaveHideDelay: number;
    ngOnDestroy(): void;
    protected _onShow(): void;
    show(delay: number): void;
    _tooltip: ElementRef<HTMLElement>;
    tooltipClass: string | string[] | Set<string> | {
        [key: string]: any;
    };
    _triggerElement: HTMLElement;
    static ɵcmp: i0.ɵɵComponentDeclaration<TooltipComponent, "mat-tooltip-component", never, {}, {}, never, never, true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<TooltipComponent, never>;
}

----------------------------------------

TITLE: Creating Custom Snackbar Component with Injected Data in Angular
DESCRIPTION: Shows how to create a custom snackbar component that receives injected data

LANGUAGE: typescript
CODE:
import {Component, Inject} from '@angular/core';
import {MAT_SNACK_BAR_DATA} from '../snack-bar';

@Component({
  selector: 'your-snackbar',
  template: 'passed in {{ data }}',
})
export class MessageArchivedComponent {
  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: string) { }
}

----------------------------------------

TITLE: Defining Angular Material Slider Module
DESCRIPTION: This code snippet defines the Angular module for the Material Slider component, including its dependencies and exports.

LANGUAGE: TypeScript
CODE:
export class MatSliderModule {
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<MatSliderModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<MatSliderModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<MatSliderModule, never, [typeof MatCommonModule, typeof MatRippleModule, typeof MatSlider, typeof MatSliderThumb, typeof MatSliderRangeThumb, typeof MatSliderVisualThumb], [typeof MatSlider, typeof MatSliderThumb, typeof MatSliderRangeThumb]>;
}

----------------------------------------

TITLE: Defining Angular Material Sidenav Type Declarations
DESCRIPTION: TypeScript declarations for Angular Material's sidenav module including imports, components, and services. Contains class definitions for MatDrawer, MatSidenav, their containers, and related utilities.

LANGUAGE: typescript
CODE:
import { AfterContentInit } from '@angular/core';
import { AfterViewInit } from '@angular/core';
import { BooleanInput } from '@angular/cdk/coercion';
import { CdkScrollable } from '@angular/cdk/scrolling';
import { DoCheck } from '@angular/core';
import { ElementRef } from '@angular/core';
import { EventEmitter } from '@angular/core';
import { FocusOrigin } from '@angular/cdk/a11y';
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/bidi';
import * as i5 from '@angular/cdk/scrolling';
import { InjectionToken } from '@angular/core';
import { NumberInput } from '@angular/cdk/coercion';
import { Observable } from 'rxjs';
import { OnDestroy } from '@angular/core';
import { QueryList } from '@angular/core';
import { Subject } from 'rxjs';

export const MAT_DRAWER_DEFAULT_AUTOSIZE: InjectionToken<boolean>;

export function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean;

export class MatDrawer implements AfterViewInit, OnDestroy {
    constructor(...args: unknown[]);
    readonly _animationEnd: Subject<unknown>;
    readonly _animationStarted: Subject<unknown>;
    get autoFocus(): AutoFocusTarget | string | boolean;
    set autoFocus(value: AutoFocusTarget | string | BooleanInput);
    close(): Promise<MatDrawerToggleResult>;
    readonly closedStart: Observable<void>;
    readonly _closedStream: Observable<void>;
    _closeViaBackdropClick(): Promise<MatDrawerToggleResult>;
    _container?: MatDrawerContainer | null | undefined;
    _content: ElementRef<HTMLElement>;
    get disableClose(): boolean;
    set disableClose(value: BooleanInput);
    _getWidth(): number;
    get mode(): MatDrawerMode;
    set mode(value: MatDrawerMode);
    readonly _modeChanged: Subject<void>;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    readonly onPositionChanged: EventEmitter<void>;
    open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult>;
    get opened(): boolean;
    set opened(value: BooleanInput);
    readonly openedChange: EventEmitter<boolean>;
    readonly openedStart: Observable<void>;
    readonly _openedStream: Observable<void>;
    get position(): 'start' | 'end';
    set position(value: 'start' | 'end');
    toggle(isOpen?: boolean, openedVia?: FocusOrigin): Promise<MatDrawerToggleResult>;
}

export const matDrawerAnimations: {
    readonly transformDrawer: any;
};

----------------------------------------

TITLE: Styling for Selection Column Overflow
DESCRIPTION: CSS styling to allow proper overflow for the selection column in mat-table.

LANGUAGE: css
CODE:
.mat-column-select {
  overflow: initial;
}

----------------------------------------

TITLE: Implementing Linear Stepper in Angular CDK
DESCRIPTION: Demonstrates how to implement a linear stepper using Angular CDK. It shows two approaches: using a single form for the entire stepper and using separate forms for each step.

LANGUAGE: typescript
CODE:
// Using a single form for the entire stepper
<form [formGroup]="formGroup">
  <cdk-stepper linear>
    <cdk-step [stepControl]="formGroup.get('firstCtrl')">
      <!-- First step content -->
      <button type="button" cdkStepperNext>Next</button>
    </cdk-step>
    <cdk-step [stepControl]="formGroup.get('secondCtrl')">
      <!-- Second step content -->
      <button type="button" cdkStepperPrevious>Previous</button>
      <button type="button" cdkStepperNext>Next</button>
    </cdk-step>
    <!-- More steps... -->
  </cdk-stepper>
</form>

// Using a form for each individual step
<cdk-stepper linear>
  <cdk-step [stepControl]="firstFormGroup">
    <form [formGroup]="firstFormGroup">
      <!-- First step content -->
      <button cdkStepperNext>Next</button>
    </form>
  </cdk-step>
  <cdk-step [stepControl]="secondFormGroup">
    <form [formGroup]="secondFormGroup">
      <!-- Second step content -->
      <button cdkStepperPrevious>Previous</button>
      <button cdkStepperNext>Next</button>
    </form>
  </cdk-step>
  <!-- More steps... -->
</cdk-stepper>

----------------------------------------

TITLE: Defining Angular Material Slider Classes and Interfaces
DESCRIPTION: This code snippet defines the main classes and interfaces for the Angular Material Slider component, including MatSlider, MatSliderThumb, MatSliderRangeThumb, and related interfaces.

LANGUAGE: TypeScript
CODE:
export class MatSlider implements AfterViewInit, OnDestroy, _MatSlider {
    constructor(...args: unknown[]);
    // ... (properties and methods)
}

export class MatSliderThumb implements _MatSliderThumb, OnDestroy, ControlValueAccessor {
    constructor(...args: unknown[]);
    // ... (properties and methods)
}

export class MatSliderRangeThumb extends MatSliderThumb implements _MatSliderRangeThumb {
    constructor(...args: unknown[]);
    // ... (properties and methods)
}

export interface MatSliderDragEvent {
    parent: _MatSlider;
    source: _MatSliderThumb;
    value: number;
}

----------------------------------------

TITLE: Typescript Imports and Dependencies for Material Expansion Panel
DESCRIPTION: Core imports and dependencies required for the Angular Material expansion panel functionality. Includes imports from @angular/core, @angular/cdk/accordion, and other essential modules.

LANGUAGE: typescript
CODE:
import { AfterContentInit } from '@angular/core';
import { AfterViewInit } from '@angular/core';
import { CdkAccordion } from '@angular/cdk/accordion';
import { CdkAccordionItem } from '@angular/cdk/accordion';
import { ElementRef } from '@angular/core';
import { EventEmitter } from '@angular/core';
import { FocusableOption } from '@angular/cdk/a11y';
import { FocusOrigin } from '@angular/cdk/a11y';
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/bidi';
import * as i2 from '@angular/cdk/accordion';
import * as i3 from '@angular/cdk/portal';
import { InjectionToken } from '@angular/core';
import { OnChanges } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { QueryList } from '@angular/core';
import { SimpleChanges } from '@angular/core';
import { Subject } from 'rxjs';
import { TemplatePortal } from '@angular/cdk/portal';
import { TemplateRef } from '@angular/core';

----------------------------------------

TITLE: Defining MatSelectConfig Interface
DESCRIPTION: This snippet shows the interface definition for MatSelectConfig, which defines the configuration options for MatSelect.

LANGUAGE: typescript
CODE:
export interface MatSelectConfig {
    canSelectNullableOptions?: boolean;
    disableOptionCentering?: boolean;
    hideSingleSelectionIndicator?: boolean;
    overlayPanelClass?: string | string[];
    panelWidth?: string | number | null;
    typeaheadDebounceInterval?: number;
}

----------------------------------------

TITLE: Defining SelectHarnessFilters Interface in TypeScript for Angular Material Testing
DESCRIPTION: This code snippet defines the SelectHarnessFilters interface, which extends BaseHarnessFilters. It includes an optional 'disabled' property of type boolean, used for filtering select components in testing scenarios.

LANGUAGE: typescript
CODE:
export interface SelectHarnessFilters extends BaseHarnessFilters {
    disabled?: boolean;
}

----------------------------------------

TITLE: Structuring Dialog Content in Angular Material
DESCRIPTION: Demonstrates the use of Angular Material dialog-specific directives to structure dialog content.

LANGUAGE: html
CODE:
<h2 mat-dialog-title>Delete all elements?</h2>
<mat-dialog-content>This will delete all elements that are currently on this page and cannot be undone.</mat-dialog-content>
<mat-dialog-actions>
  <button matButton mat-dialog-close>Cancel</button>
  <!-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -->
  <button matButton [mat-dialog-close]="true">Delete</button>
</mat-dialog-actions>

----------------------------------------

TITLE: Defining MatRadioButtonHarness Class in TypeScript
DESCRIPTION: This class extends ComponentHarness and provides methods for interacting with and querying the state of a radio button in tests. It includes methods for checking, focusing, and retrieving various properties of the radio button.

LANGUAGE: typescript
CODE:
export class MatRadioButtonHarness extends ComponentHarness {
    blur(): Promise<void>;
    check(): Promise<void>;
    // (undocumented)
    protected _clickLabel: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement>;
    focus(): Promise<void>;
    getId(): Promise<string | null>;
    getLabelText(): Promise<string>;
    getName(): Promise<string | null>;
    getValue(): Promise<string | null>;
    static hostSelector: string;
    isChecked(): Promise<boolean>;
    isDisabled(): Promise<boolean>;
    isFocused(): Promise<boolean>;
    isRequired(): Promise<boolean>;
    // (undocumented)
    protected _textLabel: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement>;
    static with<T extends MatRadioButtonHarness>(this: ComponentHarnessConstructor<T>, options?: RadioButtonHarnessFilters): HarnessPredicate<T>;
}

----------------------------------------

TITLE: Defining PaginatorHarnessFilters Interface in TypeScript for Angular Material Testing
DESCRIPTION: This code snippet defines the PaginatorHarnessFilters interface, which extends BaseHarnessFilters. It is used to specify filtering options when querying for MatPaginatorHarness instances in tests.

LANGUAGE: TypeScript
CODE:
// @public
export interface PaginatorHarnessFilters extends BaseHarnessFilters {
}

----------------------------------------

TITLE: Implementing MatTestDialogOpener Class in TypeScript
DESCRIPTION: This class is used for opening dialogs in tests. It implements OnDestroy and provides methods for creating dialog instances with specific components and configurations.

LANGUAGE: typescript
CODE:
export class MatTestDialogOpener<T = unknown, R = unknown> implements OnDestroy {
    constructor(...args: unknown[]);
    closedResult: R | undefined;
    protected static component: ComponentType<unknown> | undefined;
    protected static config: MatDialogConfig | undefined;
    dialog: MatDialog;
    dialogRef: MatDialogRef<T, R>;
    ngOnDestroy(): void;
    static withComponent<T = unknown, R = unknown>(component: ComponentType<T>, config?: MatDialogConfig): ComponentType<MatTestDialogOpener<T, R>>;
}

----------------------------------------

TITLE: Binding Accessibility Attributes in Angular Material Radio Button
DESCRIPTION: This snippet demonstrates how to bind dynamic accessibility attributes to a mat-radio-button component in Angular. It shows the correct way to bind the aria-label attribute without using the attr. prefix.

LANGUAGE: html
CODE:
<mat-radio-button [aria-label]="getMultipleChoiceAnswer()">
</mat-radio-button>

----------------------------------------

TITLE: Implementing Content Change Detection with cdkObserveContent in Angular HTML
DESCRIPTION: This snippet demonstrates how to use the cdkObserveContent directive in an Angular template. It observes changes to the content within a div element and triggers a method when mutations are detected. The directive is applied to a wrapper div that contains projected content.

LANGUAGE: html
CODE:
<div class="projected-content-wrapper" (cdkObserveContent)="projectContentChanged()">
  <ng-content></ng-content>
</div>

----------------------------------------

TITLE: Defining MenuHarnessFilters and MenuItemHarnessFilters Interfaces in TypeScript
DESCRIPTION: This snippet defines two interfaces, MenuHarnessFilters and MenuItemHarnessFilters, which extend BaseHarnessFilters. These interfaces are used for filtering menu and menu item harnesses during testing, allowing for specific selection criteria.

LANGUAGE: typescript
CODE:
// @public
export interface MenuHarnessFilters extends BaseHarnessFilters {
    triggerText?: string | RegExp;
}

// @public
export interface MenuItemHarnessFilters extends BaseHarnessFilters {
    hasSubmenu?: boolean;
    text?: string | RegExp;
}

----------------------------------------

TITLE: Defining MatProgressSpinnerHarness in TypeScript for Angular Material Testing
DESCRIPTION: This code snippet defines the MatProgressSpinnerHarness class, which extends ComponentHarness. It provides methods to interact with and test progress spinner components, including getting the mode and value. It also includes a static method for creating harness predicates.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { ComponentHarnessConstructor } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

// @public
export class MatProgressSpinnerHarness extends ComponentHarness {
    getMode(): Promise<ProgressSpinnerMode>;
    getValue(): Promise<number | null>;
    static hostSelector: string;
    static with<T extends MatProgressSpinnerHarness>(this: ComponentHarnessConstructor<T>, options?: ProgressSpinnerHarnessFilters): HarnessPredicate<T>;
}

// @public
export interface ProgressSpinnerHarnessFilters extends BaseHarnessFilters {
}

----------------------------------------

TITLE: Implementing Arrow Key Counter Directive using Angular CDK KeyCodes in TypeScript
DESCRIPTION: This snippet demonstrates how to create an Angular directive that counts arrow key presses using keycode constants from @angular/cdk/keycodes. It imports specific arrow key constants and uses them in a keypress event handler.

LANGUAGE: typescript
CODE:
import {Directive} from '@angular/core';
import {UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';

@Directive({
  selector: '[count-arrows]'
  host: {
    (keypress): 'handleKeyPress($event)'
  }
})
export class ArrowCounterDirective {
  arrowPressCount = 0;

  handleKeyPress(event: KeyboardEvent) {
    if ([UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW].includes(event.keyCode)) {
      this.arrowPresscount++;
    }
  }
}

----------------------------------------

TITLE: Defining MatDividerModule in TypeScript
DESCRIPTION: Declares the Angular module for MatDivider with its dependencies and exports. Includes module metadata, factory, and injector declarations.

LANGUAGE: typescript
CODE:
export class MatDividerModule {
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<MatDividerModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<MatDividerModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<MatDividerModule, never, [typeof MatCommonModule, typeof MatDivider], [typeof MatDivider, typeof MatCommonModule]>;
}

----------------------------------------

TITLE: Defining MatDialogSection Enum in TypeScript
DESCRIPTION: This enum defines the different sections of a Material Dialog, including ACTIONS, CONTENT, and TITLE. It's used for targeting specific parts of the dialog in tests.

LANGUAGE: typescript
CODE:
export enum MatDialogSection {
    ACTIONS = ".mat-mdc-dialog-actions",
    CONTENT = ".mat-mdc-dialog-content",
    TITLE = ".mat-mdc-dialog-title"
}

----------------------------------------

TITLE: Configuring Global Defaults for Angular Material Chips
DESCRIPTION: Shows how to specify global configuration defaults for the chips module using the MAT_CHIPS_DEFAULT_OPTIONS token in the NgModule providers.

LANGUAGE: typescript
CODE:
@NgModule({
  providers: [
    {
      provide: MAT_CHIPS_DEFAULT_OPTIONS,
      useValue: {
        separatorKeyCodes: [COMMA, SPACE]
      }
    }
  ]
})

----------------------------------------

TITLE: Defining Button Testing API in TypeScript
DESCRIPTION: This snippet defines the API for testing Angular Material buttons. It includes types for button appearance and variant, interfaces for harness filters, and a MatButtonHarness class for interacting with buttons in tests.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarnessConstructor } from '@angular/cdk/testing';
import { ContentContainerComponentHarness } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

// @public
export type ButtonAppearance = 'text' | 'filled' | 'elevated' | 'outlined' | 'tonal';

// @public
export interface ButtonHarnessFilters extends BaseHarnessFilters {
    appearance?: ButtonAppearance;
    disabled?: boolean;
    text?: string | RegExp;
    variant?: ButtonVariant;
}

// @public
export type ButtonVariant = 'basic' | 'icon' | 'fab' | 'mini-fab';

// @public
export class MatButtonHarness extends ContentContainerComponentHarness {
    blur(): Promise<void>;
    click(relativeX: number, relativeY: number): Promise<void>;
    click(location: 'center'): Promise<void>;
    click(): Promise<void>;
    focus(): Promise<void>;
    getAppearance(): Promise<ButtonAppearance | null>;
    getText(): Promise<string>;
    getVariant(): Promise<ButtonVariant>;
    // (undocumented)
    static hostSelector: string;
    isDisabled(): Promise<boolean>;
    isFocused(): Promise<boolean>;
    static with<T extends MatButtonHarness>(this: ComponentHarnessConstructor<T>, options?: ButtonHarnessFilters): HarnessPredicate<T>;
}

----------------------------------------

TITLE: Implementing LiveAnnouncer in Angular Component
DESCRIPTION: Demonstrates how to inject and use LiveAnnouncer service in an Angular component to announce messages for screen readers. The example shows basic initialization and usage of the announce method.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'my-component'
  providers: [LiveAnnouncer]
})
export class MyComponent {

  constructor(liveAnnouncer: LiveAnnouncer) {
    liveAnnouncer.announce("Hey Google");
  }
}

----------------------------------------

TITLE: Importing Angular Material Autocomplete Dependencies
DESCRIPTION: TypeScript imports required for the Angular Material autocomplete component implementation, including core Angular dependencies and CDK modules.

LANGUAGE: typescript
CODE:
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { AfterContentInit } from '@angular/core';
import { AfterViewChecked } from '@angular/core';
import { AfterViewInit } from '@angular/core';
import { ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ElementRef } from '@angular/core';
import { EventEmitter } from '@angular/core';
import { FocusableOption } from '@angular/cdk/a11y';
import { FocusOrigin } from '@angular/cdk/a11y';
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/bidi';
import * as i2 from '@angular/cdk/overlay';
import * as i5 from '@angular/cdk/scrolling';
import { InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import { OnChanges } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';
import { Overlay } from '@angular/cdk/overlay';
import { QueryList } from '@angular/core';
import { ScrollStrategy } from '@angular/cdk/overlay';
import { SimpleChanges } from '@angular/core';
import { Subject } from 'rxjs';
import { TemplateRef } from '@angular/core';

----------------------------------------

TITLE: Defining Angular Material Animation Constants
DESCRIPTION: Defines animation curve and duration constants for Angular Material components.

LANGUAGE: TypeScript
CODE:
export class AnimationCurves {
    static ACCELERATION_CURVE: string;
    static DECELERATION_CURVE: string;
    static SHARP_CURVE: string;
    static STANDARD_CURVE: string;
}

export class AnimationDurations {
    static COMPLEX: string;
    static ENTERING: string;
    static EXITING: string;
}

----------------------------------------

TITLE: Loading Button Harnesses with MatButtonHarness
DESCRIPTION: Demonstrates how to load button harnesses using getAllHarnesses and getHarness methods.

LANGUAGE: typescript
CODE:
import {MatButtonHarness} from '@angular/material/button/testing';

...

it('should work', async () => {
  const buttons = await loader.getAllHarnesses(MatButtonHarness); // length: 3
  const firstButton = await loader.getHarness(MatButtonHarness); // === buttons[0]
});

----------------------------------------

TITLE: Initializing ListKeyManager in Angular TypeScript
DESCRIPTION: The ListKeyManager class manages focus in a list of items based on keyboard interaction. It provides properties and methods for handling active items, wrapping, and keyboard navigation.

LANGUAGE: typescript
CODE:
class ListKeyManager {
  activeItemIndex: number;
  activeItem: any;
  tabOut: Observable<void>;

  withWrap(): this {
    // Turns on wrapping mode
  }

  setActiveItem(index: number): void {
    // Sets the active item to the item at the specified index
  }

  onKeydown(event: KeyboardEvent): void {
    // Sets the active item depending on the key event passed in
  }

  setFirstItemActive(): void {
    // Sets the active item to the first enabled item in the list
  }

  setLastItemActive(): void {
    // Sets the active item to the last enabled item in the list
  }

  setNextItemActive(): void {
    // Sets the active item to the next enabled item in the list
  }

  setPreviousItemActive(): void {
    // Sets the active item to a previous enabled item in the list
  }
}

----------------------------------------

TITLE: Implementing AutofillMonitor Class in TypeScript for Angular CDK
DESCRIPTION: Defines the AutofillMonitor class which provides methods to monitor and stop monitoring elements for autofill events. It implements OnDestroy for cleanup.

LANGUAGE: typescript
CODE:
export class AutofillMonitor implements OnDestroy {
    constructor(...args: unknown[]);
    monitor(element: Element): Observable<AutofillEvent>;
    monitor(element: ElementRef<Element>): Observable<AutofillEvent>;
    // (undocumented)
    ngOnDestroy(): void;
    stopMonitoring(element: Element): void;
    stopMonitoring(element: ElementRef<Element>): void;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<AutofillMonitor, never>;
    // (undocumented)
    static ɵprov: i0.ɵɵInjectableDeclaration<AutofillMonitor>;
}

----------------------------------------

TITLE: Defining Angular Material Icon Testing API in TypeScript
DESCRIPTION: Defines the complete API surface for Angular Material's icon testing utilities including imports, classes, interfaces and enums. Contains implementations for FakeMatIconRegistry, MatIconHarness, and related testing infrastructure.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { DomSanitizer } from '@angular/platform-browser';
import { ErrorHandler } from '@angular/core';
import { HarnessPredicate } from '@angular/cdk/testing';
import { HttpClient } from '@angular/common/http';
import * as i0 from '@angular/core';
import { Observable } from 'rxjs';
import { OnDestroy } from '@angular/core';
import { SafeHtml } from '@angular/platform-browser';
import { SafeResourceUrl } from '@angular/platform-browser';

// @public
export class FakeMatIconRegistry implements PublicApi<MatIconRegistry>, OnDestroy {
    // (undocumented)
    addSvgIcon(): this;
    // (undocumented)
    addSvgIconInNamespace(): this;
    // (undocumented)
    addSvgIconLiteral(): this;
    // (undocumented)
    addSvgIconLiteralInNamespace(): this;
    // (undocumented)
    addSvgIconResolver(): this;
    // (undocumented)
    addSvgIconSet(): this;
    // (undocumented)
    addSvgIconSetInNamespace(): this;
    // (undocumented)
    addSvgIconSetLiteral(): this;
    // (undocumented)
    addSvgIconSetLiteralInNamespace(): this;
    // (undocumented)
    classNameForFontAlias(alias: string): string;
    // (undocumented)
    getDefaultFontSetClass(): string[];
    // (undocumented)
    getNamedSvgIcon(): Observable<SVGElement>;
    // (undocumented)
    getSvgIconFromUrl(): Observable<SVGElement>;
    // (undocumented)
    ngOnDestroy(): void;
    // (undocumented)
    registerFontClassAlias(): this;
    // (undocumented)
    setDefaultFontSetClass(): this;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<FakeMatIconRegistry, never>;
    // (undocumented)
    static ɵprov: i0.ɵɵInjectableDeclaration<FakeMatIconRegistry>;
}

// @public
export interface IconHarnessFilters extends BaseHarnessFilters {
    name?: string | RegExp;
    namespace?: string | null | RegExp;
    type?: IconType;
}

// @public
export enum IconType {
    // (undocumented)
    FONT = 1,
    // (undocumented)
    SVG = 0
}

// @public
export class MatIconHarness extends ComponentHarness {
    getName(): Promise<string | null>;
    getNamespace(): Promise<string | null>;
    getType(): Promise<IconType>;
    static hostSelector: string;
    isInline(): Promise<boolean>;
    static with(options?: IconHarnessFilters): HarnessPredicate<MatIconHarness>;
}

// @public
export class MatIconTestingModule {
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<MatIconTestingModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<MatIconTestingModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<MatIconTestingModule, never, never, never>;
}

----------------------------------------

TITLE: Initializing FocusKeyManager in Angular Components
DESCRIPTION: ListKeyManager is a utility class that handles keyboard-based focus management for lists of items in Angular components. It provides functionality to manage focus states based on keyboard interactions.

LANGUAGE: typescript
CODE:
ListKeyManager

----------------------------------------

TITLE: Defining CdkTable Component
DESCRIPTION: Defines the CdkTable component, which is the core of the CDK Table module. It implements various lifecycle hooks and provides methods for managing table data and rendering.

LANGUAGE: typescript
CODE:
export class CdkTable<T> implements AfterContentInit, AfterContentChecked, CollectionViewer, OnDestroy, OnInit {
    constructor(...args: unknown[]);
    addColumnDef(columnDef: CdkColumnDef): void;
    addFooterRowDef(footerRowDef: CdkFooterRowDef): void;
    addHeaderRowDef(headerRowDef: CdkHeaderRowDef): void;
    addRowDef(rowDef: CdkRowDef<T>): void;
    // ... (other methods and properties)
}

----------------------------------------

TITLE: Defining Button Toggle Testing Interfaces and Classes in TypeScript
DESCRIPTION: This code snippet defines interfaces and classes for testing Angular Material's button toggle components. It includes filters for button toggle groups and individual toggles, as well as harness classes with methods for interacting with and querying the state of button toggles.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

// @public
export interface ButtonToggleGroupHarnessFilters extends BaseHarnessFilters {
    disabled?: boolean;
}

// @public
export interface ButtonToggleHarnessFilters extends BaseHarnessFilters {
    checked?: boolean;
    disabled?: boolean;
    name?: string | RegExp;
    text?: string | RegExp;
}

// @public
export class MatButtonToggleGroupHarness extends ComponentHarness {
    getAppearance(): Promise<MatButtonToggleAppearance>;
    getToggles(filter?: ButtonToggleHarnessFilters): Promise<MatButtonToggleHarness[]>;
    static hostSelector: string;
    isDisabled(): Promise<boolean>;
    isVertical(): Promise<boolean>;
    static with(options?: ButtonToggleGroupHarnessFilters): HarnessPredicate<MatButtonToggleGroupHarness>;
}

// @public
export class MatButtonToggleHarness extends ComponentHarness {
    blur(): Promise<void>;
    check(): Promise<void>;
    focus(): Promise<void>;
    getAppearance(): Promise<MatButtonToggleAppearance>;
    getAriaLabel(): Promise<string | null>;
    getAriaLabelledby(): Promise<string | null>;
    getName(): Promise<string | null>;
    getText(): Promise<string>;
    static hostSelector: string;
    isChecked(): Promise<boolean>;
    isDisabled(): Promise<boolean>;
    isFocused(): Promise<boolean>;
    toggle(): Promise<void>;
    uncheck(): Promise<void>;
    static with(options?: ButtonToggleHarnessFilters): HarnessPredicate<MatButtonToggleHarness>;
}

----------------------------------------

TITLE: Invalid Sidenav Layout with Duplicate Start Position in Angular
DESCRIPTION: Shows an invalid sidenav layout where two sidenavs are given the same 'start' position, which is not allowed in Angular Material.

LANGUAGE: html
CODE:
<mat-sidenav-container>
  <mat-sidenav>Start</mat-sidenav>
  <mat-sidenav position="start">Start 2</mat-sidenav>
</mat-sidenav-container>

----------------------------------------

TITLE: Importing Angular CDK Menu Dependencies
DESCRIPTION: Core imports required for the Angular CDK Menu module, including Angular core dependencies and RxJS observables.

LANGUAGE: typescript
CODE:
import { AfterContentInit } from '@angular/core';
import { ComponentRef } from '@angular/core';
import { DoCheck } from '@angular/core';
import { ElementRef } from '@angular/core';
import { EmbeddedViewRef } from '@angular/core';
import { EnvironmentInjector } from '@angular/core';
import { EventEmitter } from '@angular/core';
import * as i0 from '@angular/core';
import { InjectionToken } from '@angular/core';
import { Injector } from '@angular/core';
import { Location as Location_2 } from '@angular/common';
import { NgIterable } from '@angular/core';
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { OnChanges } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';

----------------------------------------

TITLE: Implementing FocusableOption Interface in TypeScript
DESCRIPTION: Interface definition for options that can receive direct browser focus, extending ListKeyManagerOption.

LANGUAGE: typescript
CODE:
interface FocusableOption extends ListKeyManagerOption {
  focus(): void;
}

----------------------------------------

TITLE: CDK Drag & Drop Module API Definition
DESCRIPTION: Core TypeScript definition file containing interfaces, classes, and injection tokens for Angular CDK's drag and drop system. Includes all necessary imports and exports for drag/drop functionality.

LANGUAGE: typescript
CODE:
import { AfterViewInit } from '@angular/core';
import { ElementRef } from '@angular/core';
import { EventEmitter } from '@angular/core';
import * as i0 from '@angular/core';
import { InjectionToken } from '@angular/core';
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { OnChanges } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';
import { Renderer2 } from '@angular/core';
import { SimpleChanges } from '@angular/core';
import { Subject } from 'rxjs';
import { Subscription } from 'rxjs';
import { TemplateRef } from '@angular/core';
import { ViewContainerRef } from '@angular/core';

// @public
export const CDK_DRAG_CONFIG: InjectionToken<DragDropConfig>;

// @public
export const CDK_DRAG_HANDLE: InjectionToken<CdkDragHandle>;

// @public
export const CDK_DRAG_PARENT: InjectionToken<CdkDrag<any>>;

// @public
export const CDK_DRAG_PLACEHOLDER: InjectionToken<CdkDragPlaceholder<any>>;

// @public
export const CDK_DRAG_PREVIEW: InjectionToken<CdkDragPreview<any>>;

// @public
export const CDK_DROP_LIST: InjectionToken<CdkDropList<any>>;

// @public
export const CDK_DROP_LIST_GROUP: InjectionToken<CdkDropListGroup<unknown>>;

// Additional interface and class definitions follow...

----------------------------------------

TITLE: Algorithm and Clustering Interfaces
DESCRIPTION: Type definitions for marker clustering algorithms and related interfaces

LANGUAGE: typescript
CODE:
interface Algorithm_2 {
    calculate: ({ markers, map }: AlgorithmInput) => AlgorithmOutput;
}

export interface AlgorithmInput {
    map: google.maps.Map;
    mapCanvasProjection: google.maps.MapCanvasProjection;
    markers: Marker[];
}

export interface AlgorithmOutput {
    changed?: boolean;
    clusters: Cluster[];
}

----------------------------------------

TITLE: Defining SlideToggleHarnessFilters Interface in TypeScript
DESCRIPTION: This code snippet defines the SlideToggleHarnessFilters interface, which extends BaseHarnessFilters. It specifies the filter options that can be used when querying for MatSlideToggleHarness instances.

LANGUAGE: typescript
CODE:
export interface SlideToggleHarnessFilters extends BaseHarnessFilters {
    checked?: boolean;
    disabled?: boolean;
    label?: string | RegExp;
    name?: string;
}

----------------------------------------

TITLE: Defining ListKeyManagerOption Interface in TypeScript
DESCRIPTION: Interface definition for options that can be managed by ListKeyManager, including optional disabled state and label getter.

LANGUAGE: typescript
CODE:
interface ListKeyManagerOption {
  disabled?: boolean;
  getLabel?(): string;
}

----------------------------------------

TITLE: Defining Direction Type and Directionality Class in Angular CDK
DESCRIPTION: This snippet defines the Direction type as a union of 'ltr' and 'rtl', and the Directionality class which implements OnDestroy. It provides functionality for handling text direction in Angular applications.

LANGUAGE: typescript
CODE:
export type Direction = 'ltr' | 'rtl';

export class Directionality implements OnDestroy {
    constructor(...args: unknown[]);
    readonly change: EventEmitter<Direction>;
    ngOnDestroy(): void;
    get value(): Direction;
    readonly valueSignal: i0.WritableSignal<Direction>;
    static ɵfac: i0.ɵɵFactoryDeclaration<Directionality, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<Directionality>;
}

----------------------------------------

TITLE: Defining Grid List Testing Types and Harnesses in TypeScript
DESCRIPTION: Defines the testing harness interfaces and classes for Angular Material's grid list component. Includes harness filters, component harnesses for grid list and grid tiles, and related types for testing grid-based layouts.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { ContentContainerComponentHarness } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

// @public
export interface GridListHarnessFilters extends BaseHarnessFilters {
}

// @public
export interface GridTileHarnessFilters extends BaseHarnessFilters {
    footerText?: string | RegExp;
    headerText?: string | RegExp;
}

// @public
export class MatGridListHarness extends ComponentHarness {
    getColumns(): Promise<number>;
    getTileAtPosition({ row, column, }: {
        row: number;
        column: number;
    }): Promise<MatGridTileHarness>;
    getTiles(filters?: GridTileHarnessFilters): Promise<MatGridTileHarness[]>;
    static hostSelector: string;
    static with(options?: GridListHarnessFilters): HarnessPredicate<MatGridListHarness>;
}

// @public
export class MatGridTileHarness extends ContentContainerComponentHarness<MatGridTileSection> {
    getColspan(): Promise<number>;
    getFooterText(): Promise<string | null>;
    getHeaderText(): Promise<string | null>;
    getRowspan(): Promise<number>;
    hasAvatar(): Promise<boolean>;
    hasFooter(): Promise<boolean>;
    hasHeader(): Promise<boolean>;
    static hostSelector: string;
    static with(options?: GridTileHarnessFilters): HarnessPredicate<MatGridTileHarness>;
}

// @public
export enum MatGridTileSection {
    // (undocumented)
    FOOTER = ".mat-grid-tile-footer",
    // (undocumented)
    HEADER = ".mat-grid-tile-header"
}

----------------------------------------

TITLE: Defining ToolbarHarnessFilters Interface in TypeScript for Angular Material Testing
DESCRIPTION: This code snippet defines the ToolbarHarnessFilters interface, which extends BaseHarnessFilters and includes an optional text property for filtering toolbars in tests.

LANGUAGE: typescript
CODE:
export interface ToolbarHarnessFilters extends BaseHarnessFilters {
    text?: string | RegExp;
}

----------------------------------------

TITLE: Live Announcer Service
DESCRIPTION: Service for announcing messages to screen readers using ARIA live regions.

LANGUAGE: typescript
CODE:
export class LiveAnnouncer implements OnDestroy {
    constructor(...args: unknown[]);
    announce(message: string): Promise<void>;
    announce(message: string, politeness?: AriaLivePoliteness): Promise<void>;
    announce(message: string, duration?: number): Promise<void>;
    announce(message: string, politeness?: AriaLivePoliteness, duration?: number): Promise<void>;
    clear(): void;
    ngOnDestroy(): void;
}

----------------------------------------

TITLE: Angular Google Maps Base Imports
DESCRIPTION: Core Angular and Google Maps type imports for the package

LANGUAGE: typescript
CODE:
/// <reference types="google.maps" />

import { AfterContentInit } from '@angular/core';
import { EventEmitter } from '@angular/core';
import * as i0 from '@angular/core';
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { OnChanges } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';
import { QueryList } from '@angular/core';
import { SimpleChanges } from '@angular/core';

----------------------------------------

TITLE: Implementing Lazy Loaded Tabs in Angular Material
DESCRIPTION: Example of implementing lazy loading for tab content using ng-template with matTabContent attribute.

LANGUAGE: html
CODE:
<mat-tab label=\"First\">\n  <ng-template matTabContent>\n    Content 1 - Loaded lazily\n  </ng-template>\n</mat-tab>

----------------------------------------

TITLE: Focus Trap Implementation
DESCRIPTION: Class that manages focus trapping within a DOM element to ensure focus remains within specified boundaries.

LANGUAGE: typescript
CODE:
export class FocusTrap {
    constructor(_element: HTMLElement, _checker: InteractivityChecker, _ngZone: NgZone, _document: Document, deferAnchors?: boolean,
    _injector?: Injector | undefined);
    attachAnchors(): boolean;
    destroy(): void;
    get enabled(): boolean;
    set enabled(value: boolean);
    focusFirstTabbableElement(options?: FocusOptions): boolean;
    focusLastTabbableElement(options?: FocusOptions): boolean;
    hasAttached(): boolean;
}

----------------------------------------

TITLE: Defining MatToolbarSection Enum in TypeScript for Angular Material Testing
DESCRIPTION: This code snippet defines the MatToolbarSection enum, which includes a ROW constant used for selecting toolbar rows in tests.

LANGUAGE: typescript
CODE:
export enum MatToolbarSection {
    // (undocumented)
    ROW = ".mat-toolbar-row"
}

----------------------------------------

TITLE: Defining Angular CDK Accordion Core Components in TypeScript
DESCRIPTION: Declares the core accordion components and types including the injection token, main accordion class, accordion item directive, and module. Implements functionality for expandable/collapsible accordion panels with single or multiple expansion support.

LANGUAGE: typescript
CODE:
import { EventEmitter } from '@angular/core';
import * as i0 from '@angular/core';
import { InjectionToken } from '@angular/core';
import { OnChanges } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';
import { SimpleChanges } from '@angular/core';
import { Subject } from 'rxjs';

// @public
export const CDK_ACCORDION: InjectionToken<CdkAccordion>;

// @public
export class CdkAccordion implements OnDestroy, OnChanges {
    closeAll(): void;
    readonly id: string;
    multi: boolean;
    // (undocumented)
    static ngAcceptInputType_multi: unknown;
    // (undocumented)
    ngOnChanges(changes: SimpleChanges): void;
    // (undocumented)
    ngOnDestroy(): void;
    openAll(): void;
    readonly _openCloseAllActions: Subject<boolean>;
    readonly _stateChanges: Subject<SimpleChanges>;
    // (undocumented)
    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkAccordion, "cdk-accordion, [cdkAccordion]", ["cdkAccordion"], { "multi": { "alias": "multi"; "required": false; }; }, {}, never, never, true, never>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkAccordion, never>;
}

// @public
export class CdkAccordionItem implements OnInit, OnDestroy {
    constructor(...args: unknown[]);
    // (undocumented)
    accordion: CdkAccordion;
    close(): void;
    readonly closed: EventEmitter<void>;
    readonly destroyed: EventEmitter<void>;
    disabled: boolean;
    get expanded(): boolean;
    set expanded(expanded: boolean);
    readonly expandedChange: EventEmitter<boolean>;
    // (undocumented)
    protected _expansionDispatcher: UniqueSelectionDispatcher;
    readonly id: string;
    // (undocumented)
    static ngAcceptInputType_disabled: unknown;
    // (undocumented)
    static ngAcceptInputType_expanded: unknown;
    ngOnDestroy(): void;
    // (undocumented)
    ngOnInit(): void;
    open(): void;
    readonly opened: EventEmitter<void>;
    toggle(): void;
    // (undocumented)
    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkAccordionItem, "cdk-accordion-item, [cdkAccordionItem]", ["cdkAccordionItem"], { "expanded": { "alias": "expanded"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; }, { "closed": "closed"; "opened": "opened"; "destroyed": "destroyed"; "expandedChange": "expandedChange"; }, never, never, true, never>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkAccordionItem, never>;
}

// @public (undocumented)
export class CdkAccordionModule {
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkAccordionModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<CdkAccordionModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<CdkAccordionModule, never, [typeof CdkAccordion, typeof CdkAccordionItem], [typeof CdkAccordion, typeof CdkAccordionItem]>;
}

----------------------------------------

TITLE: Defining TestbedHarnessEnvironmentOptions Interface in TypeScript
DESCRIPTION: Declares the TestbedHarnessEnvironmentOptions interface which specifies options for the TestbedHarnessEnvironment. It includes a queryFn property for custom element selection.

LANGUAGE: typescript
CODE:
export interface TestbedHarnessEnvironmentOptions {
    queryFn: (selector: string, root: Element) => Iterable<Element> | ArrayLike<Element>;
}

----------------------------------------

TITLE: Loading Google Fonts for Angular Material Typography
DESCRIPTION: This HTML snippet demonstrates how to load the Roboto font family with specific weights from Google Fonts, which can be used in an Angular Material theme's typography configuration.

LANGUAGE: html
CODE:
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">

----------------------------------------

TITLE: Defining TooltipHarnessFilters Interface in TypeScript
DESCRIPTION: Declares the TooltipHarnessFilters interface, which extends BaseHarnessFilters. This interface is used to specify filters for selecting tooltip harnesses.

LANGUAGE: typescript
CODE:
// @public
export interface TooltipHarnessFilters extends BaseHarnessFilters {
}

----------------------------------------

TITLE: Defining MatProgressBarHarness and ProgressBarHarnessFilters in TypeScript
DESCRIPTION: Declares a test harness class for Angular Material's progress bar component along with its filter interface. The harness provides methods to query the progress bar's mode and value, with support for filtered component selection.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { ComponentHarnessConstructor } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

// @public
export class MatProgressBarHarness extends ComponentHarness {
    getMode(): Promise<string | null>;
    getValue(): Promise<number | null>;
    // (undocumented)
    static hostSelector: string;
    static with<T extends MatProgressBarHarness>(this: ComponentHarnessConstructor<T>, options?: ProgressBarHarnessFilters): HarnessPredicate<T>;
}

// @public
export interface ProgressBarHarnessFilters extends BaseHarnessFilters {
}

----------------------------------------

TITLE: Defining TestElement Interface for Angular Component Testing
DESCRIPTION: This snippet defines the TestElement interface, which represents an element in the context of component testing. It provides methods for interacting with and querying the element, such as clicking, sending keys, and getting attributes.

LANGUAGE: typescript
CODE:
// @public
export interface TestElement {
    blur(): Promise<void>;
    clear(): Promise<void>;
    click(modifiers?: ModifierKeys): Promise<void>;
    click(location: 'center', modifiers?: ModifierKeys): Promise<void>;
    click(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;
    dispatchEvent(name: string, data?: Record<string, EventData>): Promise<void>;
    focus(): Promise<void>;
    getAttribute(name: string): Promise<string | null>;
    getCssValue(property: string): Promise<string>;
    getDimensions(): Promise<ElementDimensions>;
    getProperty<T = any>(name: string): Promise<T>;
    hasClass(name: string): Promise<boolean>;
    hover(): Promise<void>;
    isFocused(): Promise<boolean>;
    matchesSelector(selector: string): Promise<boolean>;
    mouseAway(): Promise<void>;
    rightClick(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;
    selectOptions(...optionIndexes: number[]): Promise<void>;
    sendKeys(...keys: (string | TestKey)[]): Promise<void>;
    sendKeys(modifiers: ModifierKeys, ...keys: (string | TestKey)[]): Promise<void>;
    setContenteditableValue?(value: string): Promise<void>;
    setInputValue(value: string): Promise<void>;
    text(options?: TextOptions): Promise<string>;
}

----------------------------------------

TITLE: Creating Navigation Lists with Angular Material
DESCRIPTION: Illustrates how to use mat-nav-list for creating navigation lists with anchor tags and the mat-list-item attribute.

LANGUAGE: html
CODE:
<mat-nav-list>
  @for (link of list; track link) {
    <a mat-list-item href="..." [activated]="link.isActive">{{ link }}</a>
  }
</mat-nav-list>

----------------------------------------

TITLE: Importing Angular Material Tooltip Dependencies
DESCRIPTION: This snippet shows the import statements for various Angular and CDK dependencies used in the tooltip implementation.

LANGUAGE: typescript
CODE:
import { AfterViewInit } from '@angular/core';
import { BooleanInput } from '@angular/cdk/coercion';
import { ConnectedPosition } from '@angular/cdk/overlay';
import { Directionality } from '@angular/cdk/bidi';
import { ElementRef } from '@angular/core';
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/a11y';
import * as i1_2 from '@angular/cdk/bidi';
import * as i2 from '@angular/cdk/overlay';
import * as i5 from '@angular/cdk/scrolling';
import { InjectionToken } from '@angular/core';
import { NumberInput } from '@angular/cdk/coercion';
import { Observable } from 'rxjs';
import { OnDestroy } from '@angular/core';
import { OriginConnectionPosition } from '@angular/cdk/overlay';
import { Overlay } from '@angular/cdk/overlay';
import { OverlayConnectionPosition } from '@angular/cdk/overlay';
import { OverlayRef } from '@angular/cdk/overlay';
import { ScrollStrategy } from '@angular/cdk/overlay';

----------------------------------------

TITLE: Defining ComponentHarness and Related Classes for Angular Testing
DESCRIPTION: This snippet defines the ComponentHarness abstract class and related interfaces. ComponentHarness is a key concept in Angular's component testing framework, providing a way to interact with components in tests.

LANGUAGE: typescript
CODE:
// @public
export abstract class ComponentHarness {
    constructor(locatorFactory: LocatorFactory);
    protected documentRootLocatorFactory(): LocatorFactory;
    protected forceStabilize(): Promise<void>;
    host(): Promise<TestElement>;
    // (undocumented)
    protected readonly locatorFactory: LocatorFactory;
    protected locatorFor<T extends (HarnessQuery<any> | string)[]>(...queries: T): AsyncFactoryFn<LocatorFnResult<T>>;
    protected locatorForAll<T extends (HarnessQuery<any> | string)[]>(...queries: T): AsyncFactoryFn<LocatorFnResult<T>[]>;
    protected locatorForOptional<T extends (HarnessQuery<any> | string)[]>(...queries: T): AsyncFactoryFn<LocatorFnResult<T> | null>;
    protected waitForTasksOutsideAngular(): Promise<void>;
}

// @public
export interface ComponentHarnessConstructor<T extends ComponentHarness> {
    // (undocumented)
    new (locatorFactory: LocatorFactory): T;
    hostSelector: string;
}

----------------------------------------

TITLE: Removing HammerJS Package Dependency
DESCRIPTION: Example of removing the HammerJS dependency from package.json file.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "hammerjs": "..."
  }
}

----------------------------------------

TITLE: Defining Angular Material Timepicker Testing Harnesses
DESCRIPTION: TypeScript definitions for three main testing harness classes (MatTimepickerHarness, MatTimepickerInputHarness, MatTimepickerToggleHarness) and their supporting interfaces. These harnesses provide methods for interacting with and testing timepicker components in Angular applications.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { ComponentHarnessConstructor } from '@angular/cdk/testing';
import { ContentContainerComponentHarness } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

export class MatTimepickerHarness extends ComponentHarness {
    getOptions(filters?: Omit<OptionHarnessFilters, 'ancestor'>): Promise<MatOptionHarness[]>;
    protected _getPanelSelector(): Promise<string>;
    static hostSelector: string;
    isOpen(): Promise<boolean>;
    selectOption(filters: OptionHarnessFilters): Promise<void>;
    static with<T extends MatTimepickerHarness>(this: ComponentHarnessConstructor<T>, options?: TimepickerHarnessFilters): HarnessPredicate<T>;
}

export class MatTimepickerInputHarness extends ComponentHarness {
    blur(): Promise<void>;
    closeTimepicker(): Promise<void>;
    focus(): Promise<void>;
    getPlaceholder(): Promise<string>;
    getTimepicker(filter?: TimepickerHarnessFilters): Promise<MatTimepickerHarness>;
    getValue(): Promise<string>;
    static hostSelector: string;
    isDisabled(): Promise<boolean>;
    isFocused(): Promise<boolean>;
    isRequired(): Promise<boolean>;
    isTimepickerOpen(): Promise<boolean>;
    openTimepicker(): Promise<MatTimepickerHarness>;
    setValue(newValue: string): Promise<void>;
    static with<T extends MatTimepickerInputHarness>(this: ComponentHarnessConstructor<T>, options?: TimepickerInputHarnessFilters): HarnessPredicate<T>;
}

export class MatTimepickerToggleHarness extends ComponentHarness {
    static hostSelector: string;
    isDisabled(): Promise<boolean>;
    isTimepickerOpen(): Promise<boolean>;
    openTimepicker(): Promise<void>;
    static with(options?: TimepickerToggleHarnessFilters): HarnessPredicate<MatTimepickerToggleHarness>;
}

export interface TimepickerHarnessFilters extends BaseHarnessFilters {
}

export interface TimepickerInputHarnessFilters extends BaseHarnessFilters {
    placeholder?: string | RegExp;
    value?: string | RegExp;
}

export interface TimepickerToggleHarnessFilters extends BaseHarnessFilters {
}

----------------------------------------

TITLE: Implementing MapPolyline in Angular Component
DESCRIPTION: This TypeScript code defines an Angular component that sets up a Google Map with a polyline. It imports necessary modules, defines the component, and sets up the map center, zoom, and polyline vertices.

LANGUAGE: typescript
CODE:
// google-maps-demo.component.ts
import {Component} from '@angular/core';
import {GoogleMap, MapPolyline} from '@angular/google-maps';

@Component({
  selector: 'google-map-demo',
  templateUrl: 'google-map-demo.html',
  imports: [GoogleMap, MapPolyline],
})
export class GoogleMapDemo {
  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};
  zoom = 4;

  vertices: google.maps.LatLngLiteral[] = [
    {lat: 13, lng: 13},
    {lat: -13, lng: 0},
    {lat: 13, lng: -13},
  ];
}

----------------------------------------

TITLE: Defining Angular Material Menu API in TypeScript
DESCRIPTION: This code snippet defines the core components, interfaces, and tokens for the Angular Material Menu module. It includes MatMenu, MatMenuItem, MatMenuTrigger, and various supporting types and constants.

LANGUAGE: typescript
CODE:
import { AfterContentInit } from '@angular/core';
import { AfterViewInit } from '@angular/core';
import { Direction } from '@angular/cdk/bidi';
import { EventEmitter } from '@angular/core';
import { FocusableOption } from '@angular/cdk/a11y';
import { FocusOrigin } from '@angular/cdk/a11y';
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/bidi';
import * as i2 from '@angular/cdk/overlay';
import * as i5 from '@angular/cdk/scrolling';
import { InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';
import { Overlay } from '@angular/cdk/overlay';
import { QueryList } from '@angular/core';
import { ScrollStrategy } from '@angular/cdk/overlay';
import { Subject } from 'rxjs';
import { TemplateRef } from '@angular/core';

// @public @deprecated (undocumented)
export const fadeInItems: any;

// @public
export const MAT_MENU_CONTENT: InjectionToken<MatMenuContent>;

// @public
export const MAT_MENU_DEFAULT_OPTIONS: InjectionToken<MatMenuDefaultOptions>;

// @public
export const MAT_MENU_PANEL: InjectionToken<MatMenuPanel<any>>;

// @public
export const MAT_MENU_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;

// @public @deprecated
export const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER: {
    provide: InjectionToken<() => ScrollStrategy>;
    deps: (typeof Overlay)[];
    useFactory: typeof MAT_MENU_SCROLL_STRATEGY_FACTORY;
};

// @public (undocumented)
export class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {
    // ... (class implementation details)
}

// @public @deprecated
export const matMenuAnimations: {
    readonly transformMenu: any;
    readonly fadeInItems: any;
};

// @public
export class MatMenuContent implements OnDestroy {
    // ... (class implementation details)
}

// @public
export interface MatMenuDefaultOptions {
    // ... (interface properties)
}

// @public
export class MatMenuItem implements FocusableOption, AfterViewInit, OnDestroy {
    // ... (class implementation details)
}

// @public (undocumented)
export class MatMenuModule {
    // ... (class implementation details)
}

// @public
export interface MatMenuPanel<T = any> {
    // ... (interface properties and methods)
}

// @public
export class MatMenuTrigger implements AfterContentInit, OnDestroy {
    // ... (class implementation details)
}

// @public @deprecated
export const MENU_PANEL_TOP_PADDING = 8;

// @public
export type MenuCloseReason = void | 'click' | 'keydown' | 'tab';

// @public (undocumented)
export type MenuPositionX = 'before' | 'after';

// @public (undocumented)
export type MenuPositionY = 'above' | 'below';

// @public @deprecated (undocumented)
export const transformMenu: any;

----------------------------------------

TITLE: Defining TextFieldModule in TypeScript for Angular CDK
DESCRIPTION: Defines the TextFieldModule which likely combines the autofill and textarea autosize functionalities into a single module for use in Angular applications.

LANGUAGE: typescript
CODE:
export class TextFieldModule {
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<TextFieldModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<TextFieldModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<TextFieldModule, never, [typeof CdkAutofill, typeof CdkTextareaAutosize], [typeof CdkAutofill, typeof CdkTextareaAutosize]>;
}

----------------------------------------

TITLE: Tree Node Toggle Implementation
DESCRIPTION: Shows how to add expand/collapse functionality to tree nodes using cdkTreeNodeToggle directive.

LANGUAGE: html
CODE:
<cdk-tree-node *cdkNodeDef="let node">
  <button cdkTreeNodeToggle aria-label="toggle tree node" [cdkTreeNodeToggleRecursive]="true">
    <mat-icon>expand</mat-icon>
  </button>
  {{node.value}}
</cdk-tree-node>

----------------------------------------

TITLE: Defining Angular Material List Testing API Types and Harnesses
DESCRIPTION: Comprehensive TypeScript definitions for Angular Material list testing utilities. Includes harness classes for different list types (action, navigation, selection), filter interfaces, and helper enums for list item sections and types. These harnesses enable programmatic interaction with list components during testing.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { ComponentHarnessConstructor } from '@angular/cdk/testing';
import { ContentContainerComponentHarness } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

export interface ActionListHarnessFilters extends BaseHarnessFilters {}

export interface ActionListItemHarnessFilters extends BaseListItemHarnessFilters {}

export interface BaseListItemHarnessFilters extends BaseHarnessFilters {
    fullText?: string | RegExp;
    secondaryText?: string | RegExp | null;
    tertiaryText?: string | RegExp | null;
    text?: string | RegExp;
    title?: string | RegExp;
}

export interface ListHarnessFilters extends BaseHarnessFilters {}

export interface ListItemHarnessFilters extends BaseListItemHarnessFilters {}

export interface ListOptionHarnessFilters extends BaseListItemHarnessFilters {
    selected?: boolean;
}

export class MatActionListHarness extends MatListHarnessBase<typeof MatActionListItemHarness, MatActionListItemHarness, ActionListItemHarnessFilters> {
    static hostSelector: string;
    _itemHarness: typeof MatActionListItemHarness;
    static with<T extends MatActionListHarness>(this: ComponentHarnessConstructor<T>, options?: ActionListHarnessFilters): HarnessPredicate<T>;
}

// ... additional class and interface definitions

----------------------------------------

TITLE: Importing Angular CDK Scrolling Components
DESCRIPTION: This snippet shows the import statements for various Angular core and RxJS dependencies used in the scrolling module.

LANGUAGE: TypeScript
CODE:
import { AfterContentInit } from '@angular/core';
import { DoCheck } from '@angular/core';
import { ElementRef } from '@angular/core';
import { EventEmitter } from '@angular/core';
import * as i0 from '@angular/core';
import { InjectionToken } from '@angular/core';
import { NgIterable } from '@angular/core';
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { OnChanges } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';
import { Subject } from 'rxjs';
import { Subscription } from 'rxjs';
import { TemplateRef } from '@angular/core';
import { TrackByFunction } from '@angular/core';

----------------------------------------

TITLE: Initializing Google Maps Dynamic Import API in HTML
DESCRIPTION: Script for dynamically loading the Google Maps JavaScript API in the application's index.html. This approach allows for lazy loading of the Maps API when needed.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<body>
  ...
  <script>
    (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({      v: "weekly",
      key: YOUR_API_KEY_GOES_HERE
    });
  </script>
</body>
</html>

----------------------------------------

TITLE: Defining MatFormFieldControlHarness Class in TypeScript
DESCRIPTION: Defines an abstract class that extends ComponentHarness for testing Angular Material form field controls. This class serves as a base harness for implementing form field control testing utilities.

LANGUAGE: typescript
CODE:
import { ComponentHarness } from '@angular/cdk/testing';

// @public
export abstract class MatFormFieldControlHarness extends ComponentHarness {
}

----------------------------------------

TITLE: Loading MarkerClusterer Library in HTML
DESCRIPTION: Demonstrates how to include the MarkerClusterer library script in an HTML file. This is necessary for using the MapMarkerClusterer component.

LANGUAGE: html
CODE:
<script src="https://unpkg.com/@googlemaps/markerclusterer/dist/index.min.js"></script>

----------------------------------------

TITLE: Defining MatFormFieldControl Abstract Class in Angular
DESCRIPTION: This snippet defines the MatFormFieldControl abstract class, which serves as a base for custom form field controls in Angular Material. It includes abstract properties and methods that must be implemented by concrete form field controls.

LANGUAGE: typescript
CODE:
export abstract class MatFormFieldControl<T> {
    readonly autofilled?: boolean;
    readonly controlType?: string;
    readonly disableAutomaticLabeling?: boolean;
    readonly disabled: boolean;
    readonly empty: boolean;
    readonly errorState: boolean;
    readonly focused: boolean;
    readonly id: string;
    readonly ngControl: NgControl | AbstractControlDirective | null;
    abstract onContainerClick(event: MouseEvent): void;
    readonly placeholder: string;
    readonly required: boolean;
    abstract setDescribedByIds(ids: string[]): void;
    readonly shouldLabelFloat: boolean;
    readonly stateChanges: Observable<void>;
    readonly userAriaDescribedBy?: string;
    value: T | null;
    static ɵdir: i0.ɵɵDirectiveDeclaration<MatFormFieldControl<any>, never, never, {}, {}, never, never, true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MatFormFieldControl<any>, never>;
}

----------------------------------------

TITLE: Angular CDK Portal Module Definitions
DESCRIPTION: TypeScript declarations for Angular CDK's portal system including Portal, PortalOutlet, and various implementations. Contains class definitions, interfaces, and Angular decorators for managing dynamic content projection.

LANGUAGE: typescript
CODE:
import { ApplicationRef } from '@angular/core';
import { ComponentRef } from '@angular/core';
import { ElementRef } from '@angular/core';
import { EmbeddedViewRef } from '@angular/core';
import { EventEmitter } from '@angular/core';
import * as i0 from '@angular/core';
import { Injector } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';
import { TemplateRef } from '@angular/core';
import { ViewContainerRef } from '@angular/core';

export abstract class BasePortalOutlet implements PortalOutlet {
    attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;
    attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;
    attach(portal: any): any;
    abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;
    readonly attachDomPortal: null | ((portal: DomPortal) => any);
    protected _attachedPortal: Portal<any> | null;
    abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;
    detach(): void;
    dispose(): void;
    hasAttached(): boolean;
    setDisposeFn(fn: () => void): void;
}

export class ComponentPortal<T> extends Portal<ComponentRef<T>> {
    constructor(component: ComponentType<T>, viewContainerRef?: ViewContainerRef | null, injector?: Injector | null, projectableNodes?: Node[][] | null);
    component: ComponentType<T>;
    injector?: Injector | null;
    projectableNodes?: Node[][] | null;
    viewContainerRef?: ViewContainerRef | null;
}

export interface ComponentType<T> {
    new (...args: any[]): T;
}

export class DomPortal<T = HTMLElement> extends Portal<T> {
    constructor(element: T | ElementRef<T>);
    readonly element: T;
}

export class DomPortalOutlet extends BasePortalOutlet {
    constructor(outletElement: Element, _appRef?: ApplicationRef | undefined, _defaultInjector?: Injector | undefined);
    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;
    attachDomPortal: (portal: DomPortal) => void;
    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;
    dispose(): void;
    outletElement: Element;
}

----------------------------------------

TITLE: Defining MatDivider Component in TypeScript
DESCRIPTION: Defines the MatDivider component class with vertical and inset boolean properties. Includes Angular component metadata and factory declarations.

LANGUAGE: typescript
CODE:
export class MatDivider {
    get inset(): boolean;
    set inset(value: BooleanInput);
    get vertical(): boolean;
    set vertical(value: BooleanInput);
    // (undocumented)
    static ɵcmp: i0.ɵɵComponentDeclaration<MatDivider, "mat-divider", never, { "vertical": { "alias": "vertical"; "required": false; }; "inset": { "alias": "inset"; "required": false; }; }, {}, never, never, true, never>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<MatDivider, never>;
}

----------------------------------------

TITLE: Defining Angular Material Chips Injection Tokens
DESCRIPTION: This snippet defines injection tokens used in Angular Material Chips for dependency injection.

LANGUAGE: TypeScript
CODE:
export const MAT_CHIP: InjectionToken<unknown>;

export const MAT_CHIP_AVATAR: InjectionToken<unknown>;

export const MAT_CHIP_LISTBOX_CONTROL_VALUE_ACCESSOR: any;

export const MAT_CHIP_REMOVE: InjectionToken<unknown>;

export const MAT_CHIP_TRAILING_ICON: InjectionToken<unknown>;

export const MAT_CHIPS_DEFAULT_OPTIONS: InjectionToken<MatChipsDefaultOptions>;

----------------------------------------

TITLE: Defining Platform-Related Functions and Classes in TypeScript
DESCRIPTION: This code snippet defines various utility functions and classes for platform detection, DOM manipulation, and event handling in Angular CDK. It includes methods for getting event targets, detecting RTL scroll axis, and checking browser support for different features.

LANGUAGE: typescript
CODE:
import * as i0 from '@angular/core';

// @public
export function _getEventTarget<T extends EventTarget>(event: Event): T | null;

// @public
export function _getFocusedElementPierceShadowDom(): HTMLElement | null;

// @public
export function getRtlScrollAxisType(): RtlScrollAxisType;

// @public
export function _getShadowRoot(element: HTMLElement): ShadowRoot | null;

// @public (undocumented)
export function getSupportedInputTypes(): Set<string>;

// @public
export function _isTestEnvironment(): boolean;

// @public
export function normalizePassiveListenerOptions(options: AddEventListenerOptions): AddEventListenerOptions | boolean;

// @public
export class Platform {
    constructor(..._args: unknown[]);
    ANDROID: boolean;
    BLINK: boolean;
    EDGE: boolean;
    FIREFOX: boolean;
    IOS: boolean;
    isBrowser: boolean;
    SAFARI: boolean;
    TRIDENT: boolean;
    WEBKIT: boolean;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<Platform, never>;
    // (undocumented)
    static ɵprov: i0.ɵɵInjectableDeclaration<Platform>;
}

// @public (undocumented)
export class PlatformModule {
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<PlatformModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<PlatformModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<PlatformModule, never, never, never>;
}

// @public
export enum RtlScrollAxisType {
    INVERTED = 2,
    NEGATED = 1,
    NORMAL = 0
}

// @public
export function supportsPassiveEventListeners(): boolean;

// @public
export function supportsScrollBehavior(): boolean;

// @public
export function _supportsShadowDom(): boolean;

----------------------------------------

TITLE: Defining Interfaces for Angular Material Chips Testing in TypeScript
DESCRIPTION: This snippet defines various interfaces for chip component harness filters, extending BaseHarnessFilters with specific properties for different chip types.

LANGUAGE: typescript
CODE:
export interface ChipAvatarHarnessFilters extends BaseHarnessFilters {}

export interface ChipEditInputHarnessFilters extends BaseHarnessFilters {}

export interface ChipGridHarnessFilters extends BaseHarnessFilters {
    disabled?: boolean;
}

export interface ChipHarnessFilters extends BaseHarnessFilters {
    disabled?: boolean;
    text?: string | RegExp;
}

export interface ChipInputHarnessFilters extends BaseHarnessFilters {
    disabled?: boolean;
    placeholder?: string | RegExp;
    value?: string | RegExp;
}

export interface ChipListboxHarnessFilters extends BaseHarnessFilters {
    disabled?: boolean;
}

export interface ChipOptionHarnessFilters extends ChipHarnessFilters {
    selected?: boolean;
}

export interface ChipRemoveHarnessFilters extends BaseHarnessFilters {}

export interface ChipRowHarnessFilters extends ChipHarnessFilters {}

export interface ChipSetHarnessFilters extends BaseHarnessFilters {}

----------------------------------------

TITLE: Defining Angular Material Button Toggle API
DESCRIPTION: TypeScript definitions for Angular Material's button toggle component including injection tokens, main classes (MatButtonToggle, MatButtonToggleGroup), interfaces, and module declarations. This code establishes the component's public API surface.

LANGUAGE: typescript
CODE:
import { AfterContentInit } from '@angular/core';
import { AfterViewInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Direction } from '@angular/cdk/bidi';
import { ElementRef } from '@angular/core';
import { EventEmitter } from '@angular/core';
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/bidi';
import { InjectionToken } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';
import { QueryList } from '@angular/core';

export const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS: InjectionToken<MatButtonToggleDefaultOptions>;

export const MAT_BUTTON_TOGGLE_GROUP: InjectionToken<MatButtonToggleGroup>;

export function MAT_BUTTON_TOGGLE_GROUP_DEFAULT_OPTIONS_FACTORY(): MatButtonToggleDefaultOptions;

export const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any;

export class MatButtonToggle implements OnInit, AfterViewInit, OnDestroy {
    constructor(...args: unknown[]);
    get appearance(): MatButtonToggleAppearance;
    set appearance(value: MatButtonToggleAppearance);
    ariaLabel: string;
    ariaLabelledby: string | null;
    _buttonElement: ElementRef<HTMLButtonElement>;
    get buttonId(): string;
    buttonToggleGroup: MatButtonToggleGroup;
    readonly change: EventEmitter<MatButtonToggleChange>;
    get checked(): boolean;
    set checked(value: boolean);
    get disabled(): boolean;
    set disabled(value: boolean);
    get disabledInteractive(): boolean;
    set disabledInteractive(value: boolean);
    disableRipple: boolean;
    focus(options?: FocusOptions): void;
    _getButtonName(): string | null;
    id: string;
    isSingleSelector(): boolean;
    _markForCheck(): void;
    name: string;
    static ngAcceptInputType_checked: unknown;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_disabledInteractive: unknown;
    static ngAcceptInputType_disableRipple: unknown;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    _onButtonClick(): void;
    get tabIndex(): number | null;
    set tabIndex(value: number | null);
    value: any;
}

----------------------------------------

TITLE: Configuring MapKmlLayer Component in TypeScript
DESCRIPTION: Demonstrates how to set up a component that uses the MapKmlLayer with Google Maps in Angular. Shows the basic configuration including center coordinates, zoom level, and KML URL definition.

LANGUAGE: typescript
CODE:
// google-maps-demo.component.ts
import {Component} from '@angular/core';
import {GoogleMap, MapKmlLayer} from '@angular/google-maps';

@Component({
  selector: 'google-map-demo',
  templateUrl: 'google-map-demo.html',
  imports: [GoogleMap, MapKmlLayer],
})
export class GoogleMapDemo {
  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};
  zoom = 4;

  kmlUrl = 'https://developers.google.com/maps/documentation/javascript/examples/kml/westcampus.kml';
}

----------------------------------------

TITLE: Angular Material Bottom Sheet Core API Definitions
DESCRIPTION: Defines the core types, classes and interfaces for the Angular Material bottom sheet component. Includes imports, type definitions, injection tokens, and primary service and container implementations.

LANGUAGE: typescript
CODE:
import { CdkDialogContainer } from '@angular/cdk/dialog';
import { ComponentRef } from '@angular/core';
import { ComponentType } from '@angular/cdk/portal';
import { DialogRef } from '@angular/cdk/dialog';
import { Direction } from '@angular/cdk/bidi';
import { EventEmitter } from '@angular/core';
import * as i0 from '@angular/core';
import * as i1 from '@angular/cdk/dialog';
import * as i1_2 from '@angular/cdk/bidi';
import * as i3 from '@angular/cdk/portal';
import { InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import { OnDestroy } from '@angular/core';
import { ScrollStrategy } from '@angular/cdk/overlay';
import { TemplateRef } from '@angular/core';
import { ViewContainerRef } from '@angular/core';

export type AutoFocusTarget = 'dialog' | 'first-tabbable' | 'first-heading';

export const MAT_BOTTOM_SHEET_DATA: InjectionToken<any>;

export const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS: InjectionToken<MatBottomSheetConfig<any>>;

export class MatBottomSheet implements OnDestroy {
    constructor(...args: unknown[]);
    dismiss<R = any>(result?: R): void;
    ngOnDestroy(): void;
    open<T, D = any, R = any>(component: ComponentType<T>, config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;
    open<T, D = any, R = any>(template: TemplateRef<T>, config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;
    get _openedBottomSheetRef(): MatBottomSheetRef<any> | null;
    set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null);
    static ɵfac: i0.ɵɵFactoryDeclaration<MatBottomSheet, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MatBottomSheet>;
}

export const matBottomSheetAnimations: {
    readonly bottomSheetState: any;
};

export class MatBottomSheetConfig<D = any> {
    ariaLabel?: string | null;
    ariaModal?: boolean;
    autoFocus?: AutoFocusTarget | string | boolean;
    backdropClass?: string;
    closeOnNavigation?: boolean;
    data?: D | null;
    direction?: Direction;
    disableClose?: boolean;
    hasBackdrop?: boolean;
    height?: string;
    maxHeight?: number | string;
    minHeight?: number | string;
    panelClass?: string | string[];
    restoreFocus?: boolean;
    scrollStrategy?: ScrollStrategy;
    viewContainerRef?: ViewContainerRef;
}

export class MatBottomSheetContainer extends CdkDialogContainer implements OnDestroy {
    constructor(...args: unknown[]);
    protected _animationsDisabled: boolean;
    _animationState: 'void' | 'visible' | 'hidden';
    _animationStateChanged: EventEmitter<{
        toState: "visible" | "hidden";
        phase: "start" | "done";
    }>;
    enter(): void;
    exit(): void;
    protected _handleAnimationEvent(isStart: boolean, animationName: string): void;
    ngOnDestroy(): void;
    static ɵcmp: i0.ɵɵComponentDeclaration<MatBottomSheetContainer, "mat-bottom-sheet-container", never, {}, {}, never, never, true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MatBottomSheetContainer, never>;
}

export class MatBottomSheetModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<MatBottomSheetModule, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<MatBottomSheetModule>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<MatBottomSheetModule, never, [typeof i1.DialogModule, typeof MatCommonModule, typeof i3.PortalModule, typeof MatBottomSheetContainer], [typeof MatBottomSheetContainer, typeof MatCommonModule]>;
}

export class MatBottomSheetRef<T = any, R = any> {
    constructor(_ref: DialogRef<R, T>, config: MatBottomSheetConfig, containerInstance: MatBottomSheetContainer);
    afterDismissed(): Observable<R | undefined>;
    afterOpened(): Observable<void>;
    backdropClick(): Observable<MouseEvent>;
    get componentRef(): ComponentRef<T> | null;
    containerInstance: MatBottomSheetContainer;
    disableClose: boolean | undefined;
    dismiss(result?: R): void;
    get instance(): T;
    keydownEvents(): Observable<KeyboardEvent>;
}

----------------------------------------

TITLE: Implementing SharedResizeObserver Class in TypeScript for Angular CDK
DESCRIPTION: Defines a SharedResizeObserver class that implements OnDestroy interface. It provides functionality to observe element resizing through the observe() method which returns an Observable of ResizeObserverEntry arrays.

LANGUAGE: typescript
CODE:
import * as i0 from '@angular/core';
import { Observable } from 'rxjs';
import { OnDestroy } from '@angular/core';

// @public
export class SharedResizeObserver implements OnDestroy {
    constructor();
    // (undocumented)
    ngOnDestroy(): void;
    observe(target: Element, options?: ResizeObserverOptions): Observable<ResizeObserverEntry[]>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<SharedResizeObserver, never>;
    // (undocumented)
    static ɵprov: i0.ɵɵInjectableDeclaration<SharedResizeObserver>;
}

----------------------------------------

TITLE: Implementing Fluent APIs in TypeScript
DESCRIPTION: Demonstrates how to create a fluent or builder-pattern style API using the 'this' return type for methods in TypeScript.

LANGUAGE: typescript
CODE:
class ConfigBuilder {
  withName(name: string): this {
    this.config.name = name;
    return this;
  }
}

----------------------------------------

TITLE: Angular Material Autocomplete Testing Harness Definition
DESCRIPTION: Defines the testing harness interfaces and classes for Angular Material's autocomplete component. Includes filters for harness lookup, and methods for interacting with autocomplete functionality like entering text, selecting options, and checking component state.

LANGUAGE: typescript
CODE:
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { ComponentHarnessConstructor } from '@angular/cdk/testing';
import { ContentContainerComponentHarness } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

// @public
export interface AutocompleteHarnessFilters extends BaseHarnessFilters {
    disabled?: boolean;
    value?: string | RegExp;
}

// @public (undocumented)
export class MatAutocompleteHarness extends ComponentHarness {
    blur(): Promise<void>;
    clear(): Promise<void>;
    enterText(value: string): Promise<void>;
    focus(): Promise<void>;
    getOptionGroups(filters?: Omit<OptgroupHarnessFilters, 'ancestor'>): Promise<MatOptgroupHarness[]>;
    getOptions(filters?: Omit<OptionHarnessFilters, 'ancestor'>): Promise<MatOptionHarness[]>;
    protected _getPanelSelector(): Promise<string>;
    getValue(): Promise<string>;
    static hostSelector: string;
    isDisabled(): Promise<boolean>;
    isFocused(): Promise<boolean>;
    isOpen(): Promise<boolean>;
    selectOption(filters: OptionHarnessFilters): Promise<void>;
    static with<T extends MatAutocompleteHarness>(this: ComponentHarnessConstructor<T>, options?: AutocompleteHarnessFilters): HarnessPredicate<T>;
}

----------------------------------------

TITLE: Defining Angular CDK Dialog API Types and Classes
DESCRIPTION: TypeScript declarations for the Angular CDK Dialog module, including classes like CdkDialogContainer, Dialog, and interfaces like DialogConfig. Contains comprehensive type definitions, injection tokens, and service implementations for dialog functionality.

LANGUAGE: typescript
CODE:
import { AfterContentInit } from '@angular/core';
import { AfterViewInit } from '@angular/core';
import * as _angular_cdk_portal from '@angular/cdk/portal';
import { ChangeDetectorRef } from '@angular/core';
// ... additional imports

export type AutoFocusTarget = 'dialog' | 'first-tabbable' | 'first-heading';

export class CdkDialogContainer<C extends DialogConfig = DialogConfig> extends BasePortalOutlet implements OnDestroy {
    constructor(...args: unknown[]);
    _addAriaLabelledBy(id: string): void;
    _ariaLabelledByQueue: string[];
    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;
    attachDomPortal: (portal: DomPortal) => void;
    attachTemplatePortal<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;
    // ... additional methods and properties
}

export const DEFAULT_DIALOG_CONFIG: InjectionToken<DialogConfig<unknown, unknown, _angular_cdk_portal.BasePortalOutlet>>;

export class Dialog implements OnDestroy {
    constructor(...args: unknown[]);
    readonly afterAllClosed: Observable<void>;
    get afterOpened(): Subject<DialogRef<any, any>>;
    closeAll(): void;
    // ... additional methods
}

// ... additional declarations

----------------------------------------

TITLE: Writing JsDoc Comments for Public APIs
DESCRIPTION: Illustrates how to write comprehensive JsDoc comments for public APIs, including descriptions for methods, parameters, and return values.

LANGUAGE: typescript
CODE:
/**
 * Opens a modal dialog containing the given component.
 * @param component Type of the component to load into the dialog.
 * @param config Dialog configuration options.
 * @returns Reference to the newly-opened dialog.
 */
open<T>(component: ComponentType<T>, config?: MatDialogConfig): MatDialogRef<T> { ... }

----------------------------------------

TITLE: Angular Material Autocomplete Class Definition
DESCRIPTION: Main autocomplete component class with its properties, methods and lifecycle hooks. Implements autocomplete functionality with options, groups, and panel management.

LANGUAGE: typescript
CODE:
export class MatAutocomplete implements AfterContentInit, OnDestroy {
    constructor(...args: unknown[]);
    protected _animationsDisabled: boolean;
    ariaLabel: string;
    ariaLabelledby: string;
    autoActiveFirstOption: boolean;
    autoSelectActiveOption: boolean;
    set classList(value: string | string[]);
    _classList: string | string[];
    readonly closed: EventEmitter<void>;
    protected _color: ThemePalette;
    protected _defaults: MatAutocompleteDefaultOptions;
    disableRipple: boolean;
    displayWith: ((value: any) => string) | null;
    _emitSelectEvent(option: MatOption): void;
    _getPanelAriaLabelledby(labelId: string | null): string | null;
    _getScrollTop(): number;
    get hideSingleSelectionIndicator(): boolean;
    set hideSingleSelectionIndicator(value: boolean);
    id: string;
    readonly inertGroups: boolean;
    get isOpen(): boolean;
    _isOpen: boolean;
    _keyManager: ActiveDescendantKeyManager<MatOption>;
}

----------------------------------------

TITLE: Defining MapGeocoder Response Interface in TypeScript
DESCRIPTION: TypeScript interface definition for the MapGeocoder response that includes the geocoding status and results array from Google Maps API.

LANGUAGE: typescript
CODE:
export interface MapGeocoderResponse {
  status: google.maps.GeocoderStatus;
  results: google.maps.GeocoderResult[];
}

----------------------------------------

TITLE: Defining CDK Tree Module and Components in TypeScript
DESCRIPTION: This snippet defines the core classes and interfaces for the CDK tree module, including CdkTree, CdkTreeNode, and various tree controls. It also includes directives for tree node manipulation and styling.

LANGUAGE: typescript
CODE:
import { AfterContentChecked } from '@angular/core';
import { AfterContentInit } from '@angular/core';
import { AfterViewInit } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { ElementRef } from '@angular/core';
import { EventEmitter } from '@angular/core';
import * as i0 from '@angular/core';
import { InjectionToken } from '@angular/core';
import { IterableDiffer } from '@angular/core';
import { IterableDiffers } from '@angular/core';
import { Observable } from 'rxjs';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';
import { QueryList } from '@angular/core';
import { Subject } from 'rxjs';
import { TemplateRef } from '@angular/core';
import { TrackByFunction } from '@angular/core';
import { ViewContainerRef } from '@angular/core';

// @public @deprecated
export abstract class BaseTreeControl<T, K = T> implements TreeControl<T, K> {
    collapse(dataNode: T): void;
    collapseAll(): void;
    collapseDescendants(dataNode: T): void;
    dataNodes: T[];
    expand(dataNode: T): void;
    abstract expandAll(): void;
    expandDescendants(dataNode: T): void;
    expansionModel: SelectionModel<K>;
    getChildren: (dataNode: T) => Observable<T[]> | T[] | undefined | null;
    abstract getDescendants(dataNode: T): T[];
    getLevel: (dataNode: T) => number;
    isExpandable: (dataNode: T) => boolean;
    isExpanded(dataNode: T): boolean;
    toggle(dataNode: T): void;
    toggleDescendants(dataNode: T): void;
    trackBy?: (dataNode: T) => K;
    // (undocumented)
    protected _trackByValue(value: T | K): K;
}

// @public
export const CDK_TREE_NODE_OUTLET_NODE: InjectionToken<{}>;

// @public
export class CdkNestedTreeNode<T, K = T> extends CdkTreeNode<T, K> implements AfterContentInit, OnDestroy {
    constructor(...args: unknown[]);
    protected _children: T[];
    protected _clear(): void;
    // (undocumented)
    protected _differs: IterableDiffers;
    // (undocumented)
    ngAfterContentInit(): void;
    // (undocumented)
    ngOnDestroy(): void;
    nodeOutlet: QueryList<CdkTreeNodeOutlet>;
    // (undocumented)
    protected _type: 'flat' | 'nested';
    protected updateChildrenNodes(children?: T[]): void;
    // (undocumented)
    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkNestedTreeNode<any, any>, "cdk-nested-tree-node", ["cdkNestedTreeNode"], {}, {}, ["nodeOutlet"], never, true, never>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkNestedTreeNode<any, any>, never>;
}

// @public
export class CdkTree<T, K = T> implements AfterContentChecked, AfterContentInit, AfterViewInit, CollectionViewer, OnDestroy, OnInit {
    constructor(...args: unknown[]);
    childrenAccessor?: (dataNode: T) => T[] | Observable<T[]>;
    collapse(dataNode: T): void;
    collapseAll(): void;
    collapseDescendants(dataNode: T): void;
    get dataSource(): DataSource<T> | Observable<T[]> | T[];
    set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]);
    expand(dataNode: T): void;
    expandAll(): void;
    expandDescendants(dataNode: T): void;
    expansionKey?: (dataNode: T) => K;
    _getChildrenAccessor(): ((dataNode: T) => T[] | Observable<T[]> | null | undefined) | undefined;
    _getDirectChildren(dataNode: T): Observable<T[]>;
    // (undocumented)
    _getExpansionModel(): SelectionModel<K>;
    _getLevel(node: T): number | undefined;
    _getLevelAccessor(): ((dataNode: T) => number) | undefined;
    _getNodeChildren(node: CdkTreeNode<T, K>): Observable<CdkTreeNode<T, K>[]>;
    _getNodeDef(data: T, i: number): CdkTreeNodeDef<T>;
    _getNodeParent(node: CdkTreeNode<T, K>): CdkTreeNode<T, K> | null | undefined;
    _getPositionInSet(dataNode: T): number;
    _getSetSize(dataNode: T): number;
    insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T): void;
    isExpanded(dataNode: T): boolean;
    _keyManager: TreeKeyManagerStrategy<CdkTreeNode<T, K>>;
    levelAccessor?: (dataNode: T) => number;
    // (undocumented)
    ngAfterContentChecked(): void;
    // (undocumented)
    ngAfterContentInit(): void;
    // (undocumented)
    ngAfterViewInit(): void;
    // (undocumented)
    ngOnDestroy(): void;
    // (undocumented)
    ngOnInit(): void;
    _nodeDefs: QueryList<CdkTreeNodeDef<T>>;
    // (undocumented)
    _nodeOutlet: CdkTreeNodeOutlet;
    _registerNode(node: CdkTreeNode<T, K>): void;
    renderNodeChanges(data: readonly T[], dataDiffer?: IterableDiffer<T>, viewContainer?: ViewContainerRef, parentData?: T): void;
    protected _sendKeydownToKeyManager(event: KeyboardEvent): void;
    _setNodeTypeIfUnset(newType: 'flat' | 'nested'): void;
    toggle(dataNode: T): void;
    toggleDescendants(dataNode: T): void;
    trackBy: TrackByFunction<T>;
    // @deprecated
    treeControl?: TreeControl<T, K>;
    _unregisterNode(node: CdkTreeNode<T, K>): void;
    readonly viewChange: BehaviorSubject<{
        start: number;
        end: number;
    }>;
    // (undocumented)
    static ɵcmp: i0.ɵɵComponentDeclaration<CdkTree<any, any>, "cdk-tree", ["cdkTree"], { "dataSource": { "alias": "dataSource"; "required": false; }; "treeControl": { "alias": "treeControl"; "required": false; }; "levelAccessor": { "alias": "levelAccessor"; "required": false; }; "childrenAccessor": { "alias": "childrenAccessor"; "required": false; }; "trackBy": { "alias": "trackBy"; "required": false; }; "expansionKey": { "alias": "expansionKey"; "required": false; }; }, {}, ["_nodeDefs"], never, true, never>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTree<any, any>, never>;
}

// @public (undocumented)
export class CdkTreeModule {
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTreeModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<CdkTreeModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<CdkTreeModule, never, [typeof CdkNestedTreeNode, typeof CdkTreeNodeDef, typeof CdkTreeNodePadding, typeof CdkTreeNodeToggle, typeof CdkTree, typeof CdkTreeNode, typeof CdkTreeNodeOutlet], [typeof CdkNestedTreeNode, typeof CdkTreeNodeDef, typeof CdkTreeNodePadding, typeof CdkTreeNodeToggle, typeof CdkTree, typeof CdkTreeNode, typeof CdkTreeNodeOutlet]>;
}

// @public
export class CdkTreeNode<T, K = T> implements OnDestroy, OnInit, TreeKeyManagerItem {
    constructor(...args: unknown[]);
    activate(): void;
    readonly activation: EventEmitter<T>;
    collapse(): void;
    get data(): T;
    set data(value: T);
    // (undocumented)
    protected _data: T;
    readonly _dataChanges: Subject<void>;
    protected readonly _destroyed: Subject<void>;
    // (undocumented)
    _elementRef: ElementRef<HTMLElement>;
    // (undocumented)
    _emitExpansionState(expanded: boolean): void;
    expand(): void;
    readonly expandedChange: EventEmitter<boolean>;
    focus(): void;
    // (undocumented)
    _focusItem(): void;
    _getAriaExpanded(): string | null;
    // (undocumented)
    getChildren(): CdkTreeNode<T, K>[] | Observable<CdkTreeNode<T, K>[]>;
    // (undocumented)
    getLabel(): string;
    // (undocumented)
    getParent(): CdkTreeNode<T, K> | null;
    _getPositionInSet(): number;
    _getSetSize(): number;
    isDisabled: boolean;
    get isExpandable(): boolean;
    set isExpandable(isExpandable: boolean);
    _isExpandable(): boolean;
    // (undocumented)
    get isExpanded(): boolean;
    set isExpanded(isExpanded: boolean);
    // (undocumented)
    get isLeafNode(): boolean;
    // (undocumented)
    get level(): number;
    makeFocusable(): void;
    static mostRecentTreeNode: CdkTreeNode<any> | null;
    // (undocumented)
    static ngAcceptInputType_isDisabled: unknown;
    // (undocumented)
    static ngAcceptInputType_isExpandable: unknown;
    // (undocumented)
    ngOnDestroy(): void;
    // (undocumented)
    ngOnInit(): void;
    // @deprecated
    get role(): 'treeitem' | 'group';
    set role(_role: 'treeitem' | 'group');
    // (undocumented)
    _setActiveItem(): void;
    // (undocumented)
    protected _tabindex: number | null;
    // (undocumented)
    protected _tree: CdkTree<T, K>;
    // (undocumented)
    protected readonly _type: 'flat' | 'nested';
    typeaheadLabel: string | null;
    unfocus(): void;
    // (undocumented)
    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkTreeNode<any, any>, "cdk-tree-node", ["cdkTreeNode"], { "role": { "alias": "role"; "required": false; }; "isExpandable": { "alias": "isExpandable"; "required": false; }; "isExpanded": { "alias": "isExpanded"; "required": false; }; "isDisabled": { "alias": "isDisabled"; "required": false; }; "typeaheadLabel": { "alias": "cdkTreeNodeTypeaheadLabel"; "required": false; }; }, { "activation": "activation"; "expandedChange": "expandedChange"; }, never, never, true, never>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTreeNode<any, any>, never>;
}

// @public
export class CdkTreeNodeDef<T> {
    constructor(...args: unknown[]);
    template: TemplateRef<any>;
    when: (index: number, nodeData: T) => boolean;
    // (undocumented)
    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkTreeNodeDef<any>, "[cdkTreeNodeDef]", never, { "when": { "alias": "cdkTreeNodeDefWhen"; "required": false; }; }, {}, never, never, true, never>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTreeNodeDef<any>, never>;
}

// @public
export class CdkTreeNodeOutlet {
    constructor(...args: unknown[]);
    // (undocumented)
    _node?: {} | null | undefined;
    // (undocumented)
    viewContainer: ViewContainerRef;
    // (undocumented)
    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkTreeNodeOutlet, "[cdkTreeNodeOutlet]", never, {}, {}, never, never, true, never>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTreeNodeOutlet, never>;
}

// @public
export class CdkTreeNodeOutletContext<T> {
    $implicit: T;
    constructor(data: T);
    count?: number;
    index?: number;
    level: number;
}

// @public
export class CdkTreeNodePadding<T, K = T> implements OnDestroy {
    constructor(...args: unknown[]);
    get indent(): number | string;
    set indent(indent: number | string);
    // (undocumented)
    _indent: number;
    indentUnits: string;
    get level(): number;
    set level(value: number);
    // (undocumented)
    _level: number;
    // (undocumented)
    static ngAcceptInputType_level: unknown;
    // (undocumented)
    ngOnDestroy(): void;
    _paddingIndent(): string | null;
    protected _setIndentInput(indent: number | string): void;
    protected _setLevelInput(value: number): void;
    // (undocumented)
    _setPadding(forceChange?: boolean): void;
    // (undocumented)
    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkTreeNodePadding<any, any>, "[cdkTreeNodePadding]", never, { "level": { "alias": "cdkTreeNodePadding"; "required": false; }; "indent": { "alias": "cdkTreeNodePaddingIndent"; "required": false; }; }, {}, never, never, true, never>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTreeNodePadding<any, any>, never>;
}

// @public
export class CdkTreeNodeToggle<T, K = T> {
    constructor(...args: unknown[]);
    // (undocumented)
    static ngAcceptInputType_recursive: unknown;
    recursive: boolean;
    // (undocumented)
    _toggle(): void;
    // (undocumented)
    protected _tree: CdkTree<T, K>;
    // (undocumented)
    protected _treeNode: CdkTreeNode<T, K>;
    // (undocumented)
    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkTreeNodeToggle<any, any>, "[cdkTreeNodeToggle]", never, { "recursive": { "alias": "cdkTreeNodeToggleRecursive"; "required": false; }; }, {}, never, never, true, never>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTreeNodeToggle<any, any>, never>;
}

// @public @deprecated
export class FlatTreeControl<T, K = T> extends BaseTreeControl<T, K> {
    constructor(getLevel: (dataNode: T) => number, isExpandable: (dataNode: T) => boolean, options?: FlatTreeControlOptions<T, K> | undefined);
    expandAll(): void;
    getDescendants(dataNode: T): T[];
    // (undocumented)
    getLevel: (dataNode: T) => number;
    // (undocumented)
    isExpandable: (dataNode: T) => boolean;
    // (undocumented)
    options?: FlatTreeControlOptions<T, K> | undefined;
}

// @public
export interface FlatTreeControlOptions<T, K> {
    // (undocumented)
    trackBy?: (dataNode: T) => K;
}

// @public
export function getMultipleTreeControlsError(): Error;

// @public
export function getTreeControlMissingError(): Error;

// @public
export function getTreeMissingMatchingNodeDefError(): Error;

// @public
export function getTreeMultipleDefaultNodeDefsError(): Error;

// @public
export function getTreeNoValidDataSourceError(): Error;

// @public @deprecated
export class NestedTreeControl<T, K = T> extends BaseTreeControl<T, K> {
    constructor(getChildren: (dataNode: T) => Observable<T[]> | T[] | undefined | null, options?: NestedTreeControlOptions<T, K> | undefined);
    expandAll(): void;
    // (undocumented)
    getChildren: (dataNode: T) => Observable<T[]> | T[] | undefined | null;
    getDescendants(dataNode: T): T[];
    protected _getDescendants(descendants: T[], dataNode: T): void;
    // (undocumented)
    options?: NestedTreeControlOptions<T, K> | undefined;
}

// @public
export interface NestedTreeControlOptions<T, K> {
    isExpandable?: (dataNode: T) => boolean;
    // (undocumented)
    trackBy?: (dataNode: T) => K;
}

// @public @deprecated
export interface TreeControl<T, K = T> {
    collapse(dataNode: T): void;
    collapseAll(): void;
    collapseDescendants(dataNode: T): void;
    dataNodes: T[];
    expand(dataNode: T): void;
    expandAll(): void;
    expandDescendants(dataNode: T): void;
    expansionModel: SelectionModel<K>;
    readonly getChildren: (dataNode: T) => Observable<T[]> | T[] | undefined | null;
    getDescendants(dataNode: T): any[];
    readonly getLevel: (dataNode: T) => number;
    readonly isExpandable: (dataNode: T) => boolean;
    isExpanded(dataNode: T): boolean;
    toggle(dataNode: T): void;
    toggleDescendants(dataNode: T): void;
}

----------------------------------------

TITLE: Type Definitions and Coercion Functions in Angular CDK
DESCRIPTION: A collection of utility functions and type definitions for coercing various data types in Angular applications. Includes functions for converting values to arrays, booleans, numbers, CSS pixel values, and DOM elements, along with type definitions for boolean and number inputs.

LANGUAGE: typescript
CODE:
import { ElementRef } from '@angular/core';

export type BooleanInput = string | boolean | null | undefined;

export function coerceArray<T>(value: T | T[]): T[];
export function coerceArray<T>(value: T | readonly T[]): readonly T[];

export function coerceBooleanProperty(value: any): boolean;

export function coerceCssPixelValue(value: any): string;

export function coerceElement<T>(elementOrRef: ElementRef<T> | T): T;

export function coerceNumberProperty(value: any): number;
export function coerceNumberProperty<D>(value: any, fallback: D): number | D;

export function coerceStringArray(value: any, separator?: string | RegExp): string[];

export function _isNumberValue(value: any): boolean;

export type NumberInput = string | number | null | undefined;

----------------------------------------

TITLE: Using Harness Predicates for Specific Component Selection
DESCRIPTION: Examples of using the 'with' method to create harness predicates for filtering and selecting specific components.

LANGUAGE: typescript
CODE:
it('should work', async () => {
  // Harness for mat-button whose id is 'more-info'.
  const info = await loader.getHarness(MatButtonHarness.with({selector: '#more-info'}));
  // Harness for mat-button whose text is 'Cancel'.
  const cancel = await loader.getHarness(MatButtonHarness.with({text: 'Cancel'}));
  // Harness for mat-button with class 'confirm' and whose text is either 'Ok' or 'Okay'.
  const okButton = await loader.getHarness(
      MatButtonHarness.with({selector: '.confirm', text: /^(Ok|Okay)$/}));
});

----------------------------------------

TITLE: Defining TestbedHarnessEnvironment Class in TypeScript
DESCRIPTION: Declares the TestbedHarnessEnvironment class which extends HarnessEnvironment<Element>. It provides methods for creating test environments, elements, and loaders for component harnesses in Angular testbed.

LANGUAGE: typescript
CODE:
export class TestbedHarnessEnvironment extends HarnessEnvironment<Element> {
    protected constructor(rawRootElement: Element, _fixture: ComponentFixture<unknown>, options?: TestbedHarnessEnvironmentOptions);
    protected createEnvironment(element: Element): HarnessEnvironment<Element>;
    protected createTestElement(element: Element): TestElement;
    static documentRootLoader(fixture: ComponentFixture<unknown>, options?: TestbedHarnessEnvironmentOptions): HarnessLoader;
    forceStabilize(): Promise<void>;
    protected getAllRawElements(selector: string): Promise<Element[]>;
    protected getDocumentRoot(): Element;
    static getNativeElement(el: TestElement): Element;
    static harnessForFixture<T extends ComponentHarness>(fixture: ComponentFixture<unknown>, harnessType: ComponentHarnessConstructor<T>, options?: TestbedHarnessEnvironmentOptions): Promise<T>;
    static loader(fixture: ComponentFixture<unknown>, options?: TestbedHarnessEnvironmentOptions): HarnessLoader;
    waitForTasksOutsideAngular(): Promise<void>;
}

----------------------------------------

TITLE: Defining Angular CDK Clipboard Core Components in TypeScript
DESCRIPTION: Defines the core components, services, and interfaces for the Angular CDK Clipboard module, including CdkCopyToClipboard directive, Clipboard service, and related configurations. Includes injection tokens, event emitters, and module declarations.

LANGUAGE: typescript
CODE:
import { EventEmitter } from '@angular/core';
import * as i0 from '@angular/core';
import { InjectionToken } from '@angular/core';
import { OnDestroy } from '@angular/core';

// @public
export const CDK_COPY_TO_CLIPBOARD_CONFIG: InjectionToken<CdkCopyToClipboardConfig>;

// @public
export class CdkCopyToClipboard implements OnDestroy {
    constructor(...args: unknown[]);
    attempts: number;
    readonly copied: EventEmitter<boolean>;
    copy(attempts?: number): void;
    // (undocumented)
    ngOnDestroy(): void;
    text: string;
    // (undocumented)
    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkCopyToClipboard, "[cdkCopyToClipboard]", never, { "text": { "alias": "cdkCopyToClipboard"; "required": false; }; "attempts": { "alias": "cdkCopyToClipboardAttempts"; "required": false; }; }, { "copied": "cdkCopyToClipboardCopied"; }, never, never, true, never>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkCopyToClipboard, never>;
}

// @public
export interface CdkCopyToClipboardConfig {
    attempts?: number;
}

// @public
class Clipboard_2 {
    constructor(...args: unknown[]);
    beginCopy(text: string): PendingCopy;
    copy(text: string): boolean;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<Clipboard_2, never>;
    // (undocumented)
    static ɵprov: i0.ɵɵInjectableDeclaration<Clipboard_2>;
}
export { Clipboard_2 as Clipboard }

// @public (undocumented)
export class ClipboardModule {
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<ClipboardModule, never>;
    // (undocumented)
    static ɵinj: i0.ɵɵInjectorDeclaration<ClipboardModule>;
    // (undocumented)
    static ɵmod: i0.ɵɵNgModuleDeclaration<ClipboardModule, never, [typeof CdkCopyToClipboard], [typeof CdkCopyToClipboard]>;
}

// @public
export class PendingCopy {
    constructor(text: string, _document: Document);
    copy(): boolean;
    destroy(): void;
}

----------------------------------------

TITLE: Defining Checkbox Testing Harness API in TypeScript
DESCRIPTION: Defines the testing harness API for Angular Material checkbox components. Includes interfaces for filter options and a harness class with methods for interacting with and querying checkbox state.

LANGUAGE: typescript
CODE:
import * as _angular_cdk_testing from '@angular/cdk/testing';
import { BaseHarnessFilters } from '@angular/cdk/testing';
import { ComponentHarness } from '@angular/cdk/testing';
import { ComponentHarnessConstructor } from '@angular/cdk/testing';
import { HarnessPredicate } from '@angular/cdk/testing';

// @public
export interface CheckboxHarnessFilters extends BaseHarnessFilters {
    checked?: boolean;
    disabled?: boolean;
    label?: string | RegExp;
    name?: string;
}

// @public
export class MatCheckboxHarness extends ComponentHarness {
    blur(): Promise<void>;
    check(): Promise<void>;
    focus(): Promise<void>;
    getAriaLabel(): Promise<string | null>;
    getAriaLabelledby(): Promise<string | null>;
    getLabelText(): Promise<string>;
    getName(): Promise<string | null>;
    getValue(): Promise<string | null>;
    // (undocumented)
    static hostSelector: string;
    // (undocumented)
    _input: _angular_cdk_testing.AsyncFactoryFn<_angular_cdk_testing.TestElement>;
    isChecked(): Promise<boolean>;
    isDisabled(): Promise<boolean>;
    isFocused(): Promise<boolean>;
    isIndeterminate(): Promise<boolean>;
    isRequired(): Promise<boolean>;
    isValid(): Promise<boolean>;
    toggle(): Promise<void>;
    uncheck(): Promise<void>;
    static with<T extends MatCheckboxHarness>(this: ComponentHarnessConstructor<T>, options?: CheckboxHarnessFilters): HarnessPredicate<T>;
}

----------------------------------------

TITLE: Defining SeleniumWebDriverElement Class in TypeScript
DESCRIPTION: Implements TestElement interface for Selenium WebDriver. Provides methods for interacting with web elements, including clicking, sending keys, and retrieving attributes.

LANGUAGE: typescript
CODE:
export class SeleniumWebDriverElement implements TestElement {
    constructor(element: () => webdriver.WebElement, _stabilize: () => Promise<void>);
    blur(): Promise<void>;
    clear(): Promise<void>;
    click(modifiers?: ModifierKeys): Promise<void>;
    click(location: 'center', modifiers?: ModifierKeys): Promise<void>;
    click(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;
    dispatchEvent(name: string, data?: Record<string, EventData>): Promise<void>;
    readonly element: () => webdriver.WebElement;
    focus(): Promise<void>;
    getAttribute(name: string): Promise<string | null>;
    getCssValue(property: string): Promise<string>;
    getDimensions(): Promise<ElementDimensions>;
    getProperty<T = any>(name: string): Promise<T>;
    hasClass(name: string): Promise<boolean>;
    hover(): Promise<void>;
    isFocused(): Promise<boolean>;
    matchesSelector(selector: string): Promise<boolean>;
    mouseAway(): Promise<void>;
    rightClick(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;
    selectOptions(...optionIndexes: number[]): Promise<void>;
    sendKeys(...keys: (string | TestKey)[]): Promise<void>;
    sendKeys(modifiers: ModifierKeys, ...keys: (string | TestKey)[]): Promise<void>;
    setContenteditableValue(value: string): Promise<void>;
    setInputValue(newValue: string): Promise<void>;
    text(options?: TextOptions): Promise<string>;
}

----------------------------------------

TITLE: Creating a Menu Harness with Sub-Component Harnesses
DESCRIPTION: Example of creating a harness for a menu component that uses sub-harnesses for popup and menu items.

LANGUAGE: TypeScript
CODE:
class MyMenuHarness extends ComponentHarness {
  static hostSelector = 'my-menu';

  protected getPopupHarness = this.locatorFor(MyPopupHarness);

  /** Gets the currently shown menu items (empty list if menu is closed). */
  getItems = this.locatorForAll(MyMenuItemHarness);

  /** Toggles open state of the menu. */
  async toggle() {
    const popupHarness = await this.getPopupHarness();
    return popupHarness.toggle();
  }
}

class MyMenuItemHarness extends ComponentHarness {
  static hostSelector = 'my-menu-item';
}

----------------------------------------

TITLE: Implementing CdkAutofill Directive in TypeScript for Angular CDK
DESCRIPTION: Defines the CdkAutofill directive which emits autofill events. It implements OnDestroy and OnInit for lifecycle management.

LANGUAGE: typescript
CODE:
export class CdkAutofill implements OnDestroy, OnInit {
    constructor(...args: unknown[]);
    readonly cdkAutofill: EventEmitter<AutofillEvent>;
    // (undocumented)
    ngOnDestroy(): void;
    // (undocumented)
    ngOnInit(): void;
    // (undocumented)
    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkAutofill, "[cdkAutofill]", never, {}, { "cdkAutofill": "cdkAutofill"; }, never, never, true, never>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkAutofill, never>;
}

----------------------------------------

TITLE: Initializing A11y Module
DESCRIPTION: Core accessibility module that provides features like focus monitoring, trap focus, and ARIA live announcements.

LANGUAGE: typescript
CODE:
export class A11yModule {
    constructor();
    static ɵfac: i0.ɵɵFactoryDeclaration<A11yModule, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<A11yModule>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<A11yModule, never, [typeof ObserversModule, typeof CdkAriaLive, typeof CdkTrapFocus, typeof CdkMonitorFocus], [typeof CdkAriaLive, typeof CdkTrapFocus, typeof CdkMonitorFocus]>;
}

----------------------------------------

TITLE: Running Angular Development Server
DESCRIPTION: Command to start the Angular development server. The server will run on http://localhost:4200/ and automatically reload on file changes.

LANGUAGE: markdown
CODE:
Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.

----------------------------------------

TITLE: Defining CdkColumnDef Directive
DESCRIPTION: Defines the CdkColumnDef directive, which is used to define column properties in a CDK table.

LANGUAGE: typescript
CODE:
export class CdkColumnDef implements CanStick {
    constructor(...args: unknown[]);
    cell: CdkCellDef;
    _columnCssClassName: string[];
    cssClassFriendlyName: string;
    footerCell: CdkFooterCellDef;
    hasStickyChanged(): boolean;
    headerCell: CdkHeaderCellDef;
    // ... (other methods and properties)
}

----------------------------------------

TITLE: Exporting VERSION constant in Angular CDK
DESCRIPTION: Defines and exports the VERSION constant from @angular/cdk package, importing the Version type from @angular/core. This export allows consumers to check the current version of the CDK package.

LANGUAGE: typescript
CODE:
import { Version } from '@angular/core';

// @public
export const VERSION: Version;

----------------------------------------

TITLE: Integrating Timepicker with Angular Forms
DESCRIPTION: Shows how to integrate the timepicker with Angular's forms module, allowing it to act as a ControlValueAccessor and Validator.

LANGUAGE: typescript
CODE:
// Example code not provided in the original text

----------------------------------------

TITLE: Defining CdkFixedSizeVirtualScroll Class
DESCRIPTION: This class implements the fixed-size virtual scrolling strategy for Angular CDK. It handles item size, buffer size, and scroll strategy.

LANGUAGE: TypeScript
CODE:
export class CdkFixedSizeVirtualScroll implements OnChanges {
    get itemSize(): number;
    set itemSize(value: NumberInput);
    _itemSize: number;
    get maxBufferPx(): number;
    set maxBufferPx(value: NumberInput);
    _maxBufferPx: number;
    get minBufferPx(): number;
    set minBufferPx(value: NumberInput);
    _minBufferPx: number;
    ngOnChanges(): void;
    _scrollStrategy: FixedSizeVirtualScrollStrategy;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkFixedSizeVirtualScroll, "cdk-virtual-scroll-viewport[itemSize]", never, { "itemSize": { "alias": "itemSize"; "required": false; }; "minBufferPx": { "alias": "minBufferPx"; "required": false; }; "maxBufferPx": { "alias": "maxBufferPx"; "required": false; }; }, {}, never, never, true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkFixedSizeVirtualScroll, never>;
}

----------------------------------------

TITLE: Indeterminate Progress Spinner Alternative - Angular Material
DESCRIPTION: Explicit implementation of an indeterminate progress spinner using the mode attribute. Functionally equivalent to the mat-spinner component.

LANGUAGE: html
CODE:
<mat-progress-spinner mode="indeterminate">

----------------------------------------

TITLE: Defining Angular CDK Private Components and Services in TypeScript
DESCRIPTION: Declares two main classes: _CdkPrivateStyleLoader for loading styles and _VisuallyHiddenLoader component. Includes Angular dependency injector declarations and component metadata.

LANGUAGE: typescript
CODE:
import * as i0 from '@angular/core';
import { Type } from '@angular/core';

// @public
export class _CdkPrivateStyleLoader {
    load(loader: Type<unknown>): void;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<_CdkPrivateStyleLoader, never>;
    // (undocumented)
    static ɵprov: i0.ɵɵInjectableDeclaration<_CdkPrivateStyleLoader>;
}

// @public
export class _VisuallyHiddenLoader {
    // (undocumented)
    static ɵcmp: i0.ɵɵComponentDeclaration<_VisuallyHiddenLoader, "ng-component", ["cdkVisuallyHidden"], {}, {}, never, never, true, never>;
    // (undocumented)
    static ɵfac: i0.ɵɵFactoryDeclaration<_VisuallyHiddenLoader, never>;
}

----------------------------------------

TITLE: Implementing MapTransitLayer Component in TypeScript
DESCRIPTION: TypeScript component setup for integrating Google Maps transit layer. Demonstrates importing necessary modules and setting up basic map configuration with center coordinates and zoom level.

LANGUAGE: typescript
CODE:
// google-maps-demo.component.ts
import {Component} from '@angular/core';
import {GoogleMap, MapTransitLayer} from '@angular/google-maps';

@Component({
  selector: 'google-map-demo',
  templateUrl: 'google-map-demo.html',
  imports: [GoogleMap, MapTransitLayer],
})
export class GoogleMapDemo {
  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};
  zoom = 4;
}

----------------------------------------

TITLE: Passing Data to a Dialog Component in Angular
DESCRIPTION: Shows how to pass data to a dialog component when opening it and how to access that data within the component.

LANGUAGE: typescript
CODE:
let dialogRef = dialog.open(YourDialog, {
  data: { name: 'austin' },
});

import {Component, Inject} from '@angular/core';
import {MAT_DIALOG_DATA} from '../dialog';

@Component({
  selector: 'your-dialog',
  template: 'passed in {{ data.name }}',
})
export class YourDialog {
  constructor(@Inject(MAT_DIALOG_DATA) public data: {name: string}) { }
}

----------------------------------------

TITLE: Importing Angular CDK Overlay Dependencies
DESCRIPTION: Core imports required for the Angular CDK Overlay module including Angular core dependencies and RxJS observables.

LANGUAGE: typescript
CODE:
import { AfterContentInit } from '@angular/core';
import { ComponentRef } from '@angular/core';
import { DoCheck } from '@angular/core';
import { ElementRef } from '@angular/core';
import { EmbeddedViewRef } from '@angular/core';
import { EnvironmentInjector } from '@angular/core';
import { EventEmitter } from '@angular/core';
import * as i0 from '@angular/core';
import { Injector } from '@angular/core';
import { Location as Location_2 } from '@angular/common';
import { NgIterable } from '@angular/core';
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { OnChanges } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { OnInit } from '@angular/core';
import { Renderer2 } from '@angular/core';
import { SimpleChanges } from '@angular/core';
import { Subject } from 'rxjs';
import { Subscription } from 'rxjs';
import { TemplateRef } from '@angular/core';
import { TrackByFunction } from '@angular/core';
import { Type } from '@angular/core';
import { ViewContainerRef } from '@angular/core';

----------------------------------------

TITLE: Implementing MapPolygon in Angular Component
DESCRIPTION: This TypeScript code demonstrates how to implement the MapPolygon component in an Angular application. It defines a component that sets up a Google Map with a polygon shape. The component imports necessary modules, sets the map's center and zoom, and defines the vertices for the polygon.

LANGUAGE: typescript
CODE:
// google-maps-demo.component.ts
import {Component} from '@angular/core';
import {GoogleMap, MapPolygon} from '@angular/google-maps';

@Component({
  selector: 'google-map-demo',
  templateUrl: 'google-map-demo.html',
  imports: [GoogleMap, MapPolygon],
})
export class GoogleMapDemo {
  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};
  zoom = 4;

  vertices: google.maps.LatLngLiteral[] = [
    {lat: 13, lng: 13},
    {lat: -13, lng: 0},
    {lat: 13, lng: -13},
  ];
}

----------------------------------------

TITLE: Implementing Row Selection Logic in TypeScript
DESCRIPTION: Shows the TypeScript implementation for handling row selection in a mat-table component.

LANGUAGE: typescript
CODE:
isAllSelected() {
  const numSelected = this.selection.selected.length;
  const numRows = this.dataSource.data.length;
  return numSelected == numRows;
}

toggleAllRows() {
  this.isAllSelected() ?
      this.selection.clear() :
      this.dataSource.data.forEach(row => this.selection.select(row));
}

----------------------------------------

TITLE: Defining Angular CDK Observer Components and Services
DESCRIPTION: Declares the core classes and interfaces for the Angular CDK observers package, including CdkObserveContent directive, ContentObserver service, MutationObserverFactory, and ObserversModule. The code defines the public API surface with TypeScript declarations.

LANGUAGE: typescript
CODE:
import { AfterContentInit } from '@angular/core';
import { ElementRef } from '@angular/core';
import { EventEmitter } from '@angular/core';
import * as i0 from '@angular/core';
import { Observable } from 'rxjs';
import { OnDestroy } from '@angular/core';

// @public
export class CdkObserveContent implements AfterContentInit, OnDestroy {
    constructor(...args: unknown[]);
    get debounce(): number;
    set debounce(value: NumberInput);
    get disabled(): boolean;
    set disabled(value: boolean);
    readonly event: EventEmitter<MutationRecord[]>;
    static ngAcceptInputType_disabled: unknown;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkObserveContent, "[cdkObserveContent]", ["cdkObserveContent"], { "disabled": { "alias": "cdkObserveContentDisabled"; "required": false; }; "debounce": { "alias": "debounce"; "required": false; }; }, { "event": "cdkObserveContent"; }, never, never, true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkObserveContent, never>;
}

// @public
export class ContentObserver implements OnDestroy {
    constructor(...args: unknown[]);
    ngOnDestroy(): void;
    observe(element: Element): Observable<MutationRecord[]>;
    observe(element: ElementRef<Element>): Observable<MutationRecord[]>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContentObserver, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ContentObserver>;
}

// @public
export class MutationObserverFactory {
    create(callback: MutationCallback): MutationObserver | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<MutationObserverFactory, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MutationObserverFactory>;
}

// @public (undocumented)
export class ObserversModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<ObserversModule, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<ObserversModule>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<ObserversModule, never, [typeof CdkObserveContent], [typeof CdkObserveContent]>;
}

----------------------------------------

TITLE: Generating Tree Component
DESCRIPTION: Command to generate a component using Material Design tree for nested folder structure.

LANGUAGE: bash
CODE:
ng generate @angular/material:tree <component-name>

----------------------------------------

TITLE: Angular CDK Menu Core Class Definitions
DESCRIPTION: Core class definitions for menu components including CdkMenu, CdkMenuBar, CdkMenuItem, and related menu item types.

LANGUAGE: typescript
CODE:
export class CdkMenu extends CdkMenuBase implements AfterContentInit, OnDestroy {
    constructor();
    readonly closed: EventEmitter<void>;
    _handleKeyEvent(event: KeyboardEvent): void;
    readonly isInline: boolean;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    readonly orientation = "vertical";
}

----------------------------------------

TITLE: MapHeatmapLayer Template Implementation
DESCRIPTION: HTML template showing how to integrate the Google Map component with a heatmap layer. Demonstrates binding of map properties and heatmap configuration using Angular property binding syntax.

LANGUAGE: html
CODE:
<google-map height="400px" width="750px" [center]="center" [zoom]="zoom">
  <map-heatmap-layer [data]="heatmapData" [options]="heatmapOptions" />
</google-map>

----------------------------------------

TITLE: Defining UnitTestElement Class in TypeScript
DESCRIPTION: Declares the UnitTestElement class which implements the TestElement interface. It provides methods for interacting with and querying DOM elements in unit tests.

LANGUAGE: typescript
CODE:
export class UnitTestElement implements TestElement {
    constructor(element: Element, _stabilize: () => Promise<void>);
    blur(): Promise<void>;
    clear(): Promise<void>;
    click(modifiers?: ModifierKeys): Promise<void>;
    click(location: 'center', modifiers?: ModifierKeys): Promise<void>;
    click(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;
    dispatchEvent(name: string, data?: Record<string, EventData>): Promise<void>;
    readonly element: Element;
    focus(): Promise<void>;
    getAttribute(name: string): Promise<string | null>;
    getCssValue(property: string): Promise<string>;
    getDimensions(): Promise<ElementDimensions>;
    getProperty<T = any>(name: string): Promise<T>;
    hasClass(name: string): Promise<boolean>;
    hover(): Promise<void>;
    isFocused(): Promise<boolean>;
    matchesSelector(selector: string): Promise<boolean>;
    mouseAway(): Promise<void>;
    rightClick(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;
    selectOptions(...optionIndexes: number[]): Promise<void>;
    sendKeys(...keys: (string | TestKey)[]): Promise<void>;
    sendKeys(modifiers: ModifierKeys, ...keys: (string | TestKey)[]): Promise<void>;
    setContenteditableValue(value: string): Promise<void>;
    setInputValue(value: string): Promise<void>;
    text(options?: TextOptions): Promise<string>;
}

----------------------------------------

TITLE: Angular CDK Listbox Component Implementation
DESCRIPTION: TypeScript class definitions and interfaces for Angular CDK's listbox implementation. Includes CdkListbox component with selection management, keyboard navigation, and form control capabilities, along with CdkOption for individual listbox options.

LANGUAGE: typescript
CODE:
import { AfterContentInit } from '@angular/core';
import { ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from '@angular/core';
import { Injector } from '@angular/core';
import { NgZone } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { QueryList } from '@angular/core';
import { Signal } from '@angular/core';
import { Subject } from 'rxjs';

export class CdkListbox<T = unknown> implements AfterContentInit, OnDestroy, ControlValueAccessor {
    constructor();
    protected readonly changeDetectorRef: ChangeDetectorRef;
    get compareWith(): undefined | ((o1: T, o2: T) => boolean);
    set compareWith(fn: undefined | ((o1: T, o2: T) => boolean));
    deselect(option: CdkOption<T>): void;
    deselectValue(value: T): void;
    protected readonly destroyed: Subject<void>;
    get disabled(): boolean;
    set disabled(value: boolean);
    protected readonly element: HTMLElement;
    get enabledTabIndex(): number | null | undefined;
    set enabledTabIndex(value: number | null | undefined);
    focus(): void;
    protected _getAriaActiveDescendant(): string | null | undefined;
    protected _getTabIndex(): number | null | undefined;
    protected _handleFocus(): void;
    protected _handleFocusIn(): void;
    protected _handleFocusOut(event: FocusEvent): void;
    protected _handleKeydown(event: KeyboardEvent): void;
    get id(): string;
    set id(value: string);
    isActive(option: CdkOption<T>): boolean;
    isSelected(option: CdkOption<T>): boolean;
    isValueSelected(value: T): boolean;
    protected listKeyManager: ActiveDescendantKeyManager<CdkOption<T>>;
    get multiple(): boolean;
    set multiple(value: boolean);
    get navigateDisabledOptions(): boolean;
    set navigateDisabledOptions(skip: boolean);
    get navigationWrapDisabled(): boolean;
    set navigationWrapDisabled(wrap: boolean);
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_multiple: unknown;
    static ngAcceptInputType_navigateDisabledOptions: unknown;
    static ngAcceptInputType_navigationWrapDisabled: unknown;
    static ngAcceptInputType_useActiveDescendant: unknown;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    protected readonly ngZone: NgZone;
    protected options: QueryList<CdkOption<T>>;
    get orientation(): "horizontal" | "vertical";
    set orientation(value: 'horizontal' | 'vertical');
    registerOnChange(fn: (value: readonly T[]) => void): void;
    registerOnTouched(fn: () => {}): void;
    select(option: CdkOption<T>): void;
    protected selectionModel: ListboxSelectionModel<T>;
    selectValue(value: T): void;
    _setActiveOption(option: CdkOption<T>): void;
    setAllSelected(isSelected: boolean): void;
    setDisabledState(isDisabled: boolean): void;
    toggle(option: CdkOption<T>): void;
    toggleValue(value: T): void;
    protected triggerOption(option: CdkOption<T> | null): void;
    protected triggerRange(trigger: CdkOption<T> | null, from: number, to: number, on: boolean): void;
    get useActiveDescendant(): boolean;
    set useActiveDescendant(value: boolean);
    get value(): readonly T[];
    set value(value: readonly T[]);
    readonly valueChange: Subject<ListboxValueChangeEvent<T>>;
    writeValue(value: readonly T[]): void;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkListbox<any>, "[cdkListbox]", ["cdkListbox"], {}, {}, ["options"], never, true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkListbox<any>, never>;
}

export class CdkListboxModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkListboxModule, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<CdkListboxModule>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<CdkListboxModule, never, [typeof CdkListbox, typeof CdkOption], [typeof CdkListbox, typeof CdkOption]>;
}

export class CdkOption<T = unknown> implements ListKeyManagerOption, Highlightable, OnDestroy {
    readonly _clicked: Subject<MouseEvent>;
    deselect(): void;
    protected destroyed: Subject<void>;
    get disabled(): boolean;
    set disabled(value: boolean);
    readonly element: HTMLElement;
    get enabledTabIndex(): number | null | undefined;
    set enabledTabIndex(value: number | null | undefined);
    focus(): void;
    getLabel(): string;
    protected _getTabIndex(): number | null | undefined;
    protected _handleFocus(): void;
    get id(): string;
    set id(value: string);
    isActive(): boolean;
    isSelected(): boolean;
    protected readonly listbox: CdkListbox<T>;
    static ngAcceptInputType_disabled: unknown;
    ngOnDestroy(): void;
    select(): void;
    setActiveStyles(): void;
    setInactiveStyles(): void;
    toggle(): void;
    typeaheadLabel: string | null;
    value: T;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkOption<any>, "[cdkOption]", ["cdkOption"], {}, {}, never, never, true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<CdkOption<any>, never>;
}

export interface ListboxValueChangeEvent<T> {
    readonly listbox: CdkListbox<T>;
    readonly option: CdkOption<T> | null;
    readonly value: readonly T[];
}

----------------------------------------

TITLE: Implementing MapHeatmapLayer Component in TypeScript
DESCRIPTION: Angular component implementation that demonstrates how to set up a Google Map with a heatmap layer. Includes configuration for center coordinates, zoom level, heatmap options, and an array of geographic data points for the heatmap visualization.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {GoogleMap, MapHeatmapLayer} from '@angular/google-maps';

@Component({
  selector: 'google-map-demo',
  templateUrl: 'google-map-demo.html',
  imports: [GoogleMap, MapHeatmapLayer],
})
export class GoogleMapDemo {
  center = {lat: 37.774546, lng: -122.433523};
  zoom = 12;
  heatmapOptions = {radius: 5};
  heatmapData = [
    {lat: 37.782, lng: -122.447},
    {lat: 37.782, lng: -122.445},
    {lat: 37.782, lng: -122.443},
    {lat: 37.782, lng: -122.441},
    {lat: 37.782, lng: -122.439},
    {lat: 37.782, lng: -122.437},
    {lat: 37.782, lng: -122.435},
    {lat: 37.785, lng: -122.447},
    {lat: 37.785, lng: -122.445},
    {lat: 37.785, lng: -122.443},
    {lat: 37.785, lng: -122.441},
    {lat: 37.785, lng: -122.439},
    {lat: 37.785, lng: -122.437},
    {lat: 37.785, lng: -122.435}
  ];
}

----------------------------------------

TITLE: Defining API Types and Interfaces for Angular CDK Testing
DESCRIPTION: This snippet defines various types and interfaces used in Angular CDK testing, including AsyncFactoryFn, AsyncOptionPredicate, AsyncPredicate, and AutoChangeDetectionStatus. These are essential for creating flexible and type-safe testing utilities.

LANGUAGE: typescript
CODE:
// @public
export type AsyncFactoryFn<T> = () => Promise<T>;

// @public
export type AsyncOptionPredicate<T, O> = (item: T, option: O) => Promise<boolean>;

// @public
export type AsyncPredicate<T> = (item: T) => Promise<boolean>;

// @public
export interface AutoChangeDetectionStatus {
    isDisabled: boolean;
    onDetectChangesNow?: () => void;
}

----------------------------------------

TITLE: Implementing Core Collection Classes in TypeScript for Angular CDK
DESCRIPTION: Defines core collection management classes and interfaces including ArrayDataSource, DataSource, SelectionModel, and various view repeater strategies. Includes implementations for data binding, selection management, and view recycling.

LANGUAGE: typescript
CODE:
import * as i0 from '@angular/core';
import { InjectionToken } from '@angular/core';
import { IterableChangeRecord } from '@angular/core';
import { IterableChanges } from '@angular/core';
import { Observable } from 'rxjs';
import { OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import { TemplateRef } from '@angular/core';
import { ViewContainerRef } from '@angular/core';

export class ArrayDataSource<T> extends DataSource<T> {
    constructor(_data: readonly T[] | Observable<readonly T[]>);
    connect(): Observable<readonly T[]>;
    disconnect(): void;
}

export interface CollectionViewer {
    viewChange: Observable<ListRange>;
}

export abstract class DataSource<T> {
    abstract connect(collectionViewer: CollectionViewer): Observable<readonly T[]>;
    abstract disconnect(collectionViewer: CollectionViewer): void;
}

export class SelectionModel<T> {
    constructor(_multiple?: boolean, initiallySelectedValues?: T[], _emitChanges?: boolean, compareWith?: ((o1: T, o2: T) => boolean) | undefined);
    readonly changed: Subject<SelectionChange<T>>;
    clear(flushEvent?: boolean): boolean;
    compareWith?: ((o1: T, o2: T) => boolean) | undefined;
    deselect(...values: T[]): boolean;
    hasValue(): boolean;
    isEmpty(): boolean;
    isMultipleSelection(): boolean;
    isSelected(value: T): boolean;
    select(...values: T[]): boolean;
    get selected(): T[];
    setSelection(...values: T[]): boolean;
    sort(predicate?: (a: T, b: T) => number): void;
    toggle(value: T): boolean;
}

----------------------------------------

TITLE: Running Unit Tests
DESCRIPTION: Executes unit tests using the Karma test runner

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Implementing MatFormFieldControl Properties and Methods
DESCRIPTION: This set of snippets demonstrates the implementation of various properties and methods required by the MatFormFieldControl interface, including state management and accessibility features.

LANGUAGE: typescript
CODE:
stateChanges = new Subject<void>();

set value(tel: MyTel | null) {
  ...
  this.stateChanges.next();
}

ngOnDestroy() {
  this.stateChanges.complete();
}

static nextId = 0;

@HostBinding() id = `example-tel-input-${MyTelInput.nextId++}`;

@Input()
get placeholder() {
  return this._placeholder;
}
set placeholder(plh) {
  this._placeholder = plh;
  this.stateChanges.next();
}
private _placeholder: string;

ngControl: NgControl = null;

focused = false;

onFocusIn(event: FocusEvent) {
  if (!this.focused) {
    this.focused = true;
    this.stateChanges.next();
  }
}

onFocusOut(event: FocusEvent) {
  if (!this._elementRef.nativeElement.contains(event.relatedTarget as Element)) {
    this.touched = true;
    this.focused = false;
    this.onTouched();
    this.stateChanges.next();
  }
}

get empty() {
  let n = this.parts.value;
  return !n.area && !n.exchange && !n.subscriber;
}

@HostBinding('class.floating')
get shouldLabelFloat() {
  return this.focused || !this.empty;
}

@Input()
get required() {
  return this._required;
}
set required(req: BooleanInput) {
  this._required = coerceBooleanProperty(req);
  this.stateChanges.next();
}
private _required = false;

@Input()
get disabled(): boolean { return this._disabled; }
set disabled(value: BooleanInput) {
  this._disabled = coerceBooleanProperty(value);
  this._disabled ? this.parts.disable() : this.parts.enable();
  this.stateChanges.next();
}
private _disabled = false;

get errorState(): boolean {
  return this.parts.invalid && this.touched;
}

controlType = 'example-tel-input';

setDescribedByIds(ids: string[]) {
  const controlElement = this._elementRef.nativeElement
    .querySelector('.example-tel-input-container')!;
  controlElement.setAttribute('aria-describedby', ids.join(' '));
}

onContainerClick(event: MouseEvent) {
  if ((event.target as Element).tagName.toLowerCase() != 'input') {
    this._elementRef.nativeElement.querySelector('input').focus();
  }
}

----------------------------------------

TITLE: Using MapBicyclingLayer in Angular Template
DESCRIPTION: This HTML snippet shows how to use the MapBicyclingLayer component within a Google Map in an Angular template. It sets the map's height, width, center, and zoom level.

LANGUAGE: html
CODE:
<!-- google-maps-demo.component.html -->
<google-map height="400px" width="750px" [center]="center" [zoom]="zoom">
  <map-bicycling-layer />
</google-map>

----------------------------------------

TITLE: Localizing Stepper Labels in Angular
DESCRIPTION: Shows how to localize stepper labels by providing a custom subclass of MatStepperIntl with translated values in the application's root module.

LANGUAGE: typescript
CODE:
@NgModule({
  imports: [MatStepperModule],
  providers: [
    {provide: MatStepperIntl, useClass: MyIntl},
  ],
})
export class MyApp {}

----------------------------------------

TITLE: Implementing Bi-directionality in Custom Angular Component
DESCRIPTION: This snippet demonstrates how to use the Directionality injectable from @angular/cdk/bidi to read and react to text direction changes in a custom Angular component. It shows how to access the current direction and subscribe to direction changes.

LANGUAGE: typescript
CODE:
@Component({ /* ... */ })
export class MyCustomComponent {
  private dir: Direction;

  constructor(directionality: Directionality) {
    this.dir = directionality.value;

    directionality.change.subscribe(() => {
      this.dir = directionality.value;
    });
  }
}

----------------------------------------

TITLE: MapAdvancedMarker Template Implementation
DESCRIPTION: HTML template that sets up a Google Map with advanced markers. It configures the map dimensions, binds center and zoom properties, and implements click handling for adding markers. Uses Angular's for loop to render multiple markers.

LANGUAGE: html
CODE:
<google-map
  mapId="yourMapId"
  height="400px"
  width="750px"
  [center]="center"
  [zoom]="zoom"
  (mapClick)="addAdvancedMarker($event)">
    @for (position of advancedMarkerPositions; track position) {
      <map-advanced-marker [position]="position" [options]="advancedMarkerOptions" />
    }
</google-map>

----------------------------------------

TITLE: Using DataSource with cdkVirtualFor in Angular
DESCRIPTION: Shows how to use a DataSource to provide data for cdkVirtualFor, allowing for more complex data management scenarios.

LANGUAGE: html
CODE:
<!-- example(cdk-virtual-scroll-data-source) -->

----------------------------------------

TITLE: Defining Column Templates for mat-table
DESCRIPTION: Demonstrates how to define column templates for a mat-table, including header and cell content.

LANGUAGE: html
CODE:
<ng-container matColumnDef="score">
  <th mat-header-cell *matHeaderCellDef> Score </th>
  <td mat-cell *matCellDef="let user"> {{user.score}} </td>
</ng-container>

----------------------------------------

TITLE: Defining DateFilterFn Generic Type
DESCRIPTION: Defines a generic type for date filter functions, which take a date of type D or null and return a boolean.

LANGUAGE: TypeScript
CODE:
export type DateFilterFn<D> = (date: D | null) => boolean;

----------------------------------------

TITLE: Using DeprecatedMapMarkerClusterer in Angular HTML Template
DESCRIPTION: This HTML snippet shows how to use the DeprecatedMapMarkerClusterer component in an Angular template. It sets up a Google Map with clickable functionality to add markers, which are then clustered using the DeprecatedMapMarkerClusterer.

LANGUAGE: html
CODE:
<!-- google-map-demo.component.html -->
<google-map
  height="400px"
  width="750px"
  [center]="center"
  [zoom]="zoom"
  (mapClick)="addMarker($event)">
    <deprecated-map-marker-clusterer [imagePath]="markerClustererImagePath">
      @for (position of markerPositions; track position) {
        <map-marker [position]="position" />
      }
    </deprecated-map-marker-clusterer>
</google-map>

----------------------------------------

TITLE: Implementing Focus Trap with cdkTrapFocus - Angular HTML
DESCRIPTION: Demonstrates how to use the cdkTrapFocus directive to constrain Tab key focus within a dialog element. This creates an accessible modal dialog where keyboard focus remains trapped within the specified container element. The directive is part of A11yModule.

LANGUAGE: html
CODE:
<div class="my-inner-dialog-content" cdkTrapFocus>
  <!-- Tab and Shift + Tab will not leave this element. -->
</div>

----------------------------------------

TITLE: Implementing DeprecatedMapMarkerClusterer in Angular TypeScript
DESCRIPTION: This TypeScript code demonstrates how to set up a component using the DeprecatedMapMarkerClusterer. It includes imports, component configuration, and methods for adding markers to the map.

LANGUAGE: typescript
CODE:
// google-map-demo.component.ts
import {Component} from '@angular/core';
import {GoogleMap, MapMarker, DeprecatedMapMarkerClusterer} from '@angular/google-maps';

@Component({
  selector: 'google-map-demo',
  templateUrl: 'google-map-demo.html',
  imports: [GoogleMap, MapMarker, DeprecatedMapMarkerClusterer],
})
export class GoogleMapDemo {
  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};
  zoom = 4;
  markerPositions: google.maps.LatLngLiteral[] = [];
  markerClustererImagePath =
      'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m';

  addMarker(event: google.maps.MapMouseEvent) {
    this.markerPositions.push(event.latLng.toJSON());
  }
}

----------------------------------------

TITLE: Defining AutofillEvent Interface in TypeScript for Angular CDK
DESCRIPTION: Defines the AutofillEvent interface, which represents an autofill event with a target element and a boolean indicating if it's autofilled.

LANGUAGE: typescript
CODE:
export type AutofillEvent = {
    target: Element;
    isAutofilled: boolean;
};

----------------------------------------

TITLE: Cleaning up after merged Angular Material pull request
DESCRIPTION: These commands delete the remote and local branches, and update the main branch after a pull request has been merged into Angular Material.

LANGUAGE: shell
CODE:
git push my-fork --delete my-fix-branch
git checkout main -f
git branch -D my-fix-branch
git pull --ff upstream main

----------------------------------------

TITLE: Styling Input Autofill State with Angular CDK
DESCRIPTION: SCSS mixin usage for customizing the background and text color of autofilled input fields. The mixin takes a background color and an optional text color parameter.

LANGUAGE: scss
CODE:
@use '@angular/cdk';

// Set custom autofill inputs to have no background and red text.
input.custom-autofill {
  @include cdk.text-field-autofill-color(transparent, red);
}

----------------------------------------

TITLE: Defining BidiModule and Dir Classes in Angular CDK
DESCRIPTION: This snippet defines the BidiModule class and the Dir class, which implement bidirectional text support in Angular. The Dir class implements Directionality, AfterContentInit, and OnDestroy interfaces, providing functionality for handling text direction changes.

LANGUAGE: typescript
CODE:
export class BidiModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<BidiModule, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<BidiModule>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<BidiModule, never, [typeof Dir], [typeof Dir]>;
}

export class Dir implements Directionality, AfterContentInit, OnDestroy {
    readonly change: EventEmitter<Direction>;
    get dir(): Direction;
    set dir(value: Direction | 'auto');
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    _rawDir: string;
    get value(): Direction;
    readonly valueSignal: i0.WritableSignal<Direction>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<Dir, "[dir]", ["dir"], { "dir": { "alias": "dir"; "required": false; }; }, { "change": "dirChange"; }, never, never, true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<Dir, never>;
}

----------------------------------------

TITLE: Configuring Parent Element Scrolling for Virtual Viewport in Angular
DESCRIPTION: Shows how to set up a parent element as the scrolling container for a cdk-virtual-scroll-viewport using cdkVirtualScrollingElement.

LANGUAGE: html
CODE:
<!-- example(cdk-virtual-scroll-parent-scrolling) -->

----------------------------------------

TITLE: Implementing Menu Item with Custom Action
DESCRIPTION: Shows how to create a menu item with custom action using cdkMenuItemTriggered output event.

LANGUAGE: html
CODE:
<button cdkMenuItem (cdkMenuItemTriggered)="reset()">Reset</button>

----------------------------------------

TITLE: Empty TypeScript Package Documentation Block
DESCRIPTION: An empty TypeScript code block indicating no package documentation comment exists for this package

LANGUAGE: typescript
CODE:
// (No @packageDocumentation comment for this package)

----------------------------------------

TITLE: Configuring Template Cache Size for cdkVirtualFor in Angular
DESCRIPTION: Demonstrates how to adjust the template cache size for cdkVirtualFor to optimize memory usage and rendering performance.

LANGUAGE: html
CODE:
<!-- example(cdk-virtual-scroll-template-cache) -->

----------------------------------------

TITLE: Styling Drag and Drop Animations in Angular CDK
DESCRIPTION: CSS example for animating items as they're being sorted and after they've been dropped in a drag-and-drop list.

LANGUAGE: CSS
CODE:
/* Animate items as they're being sorted. */
.cdk-drop-list-dragging .cdk-drag {
  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

/* Animate an item that has been dropped. */
.cdk-drag-animating {
  transition: transform 300ms cubic-bezier(0, 0, 0.2, 1);
}

----------------------------------------

TITLE: Creating Custom Scroll Strategy in Angular
DESCRIPTION: Shows how to implement a custom scroll strategy by creating a class that implements the ScrollStrategy interface and applying it to an overlay configuration.

LANGUAGE: typescript
CODE:
// Your custom scroll strategy.
export class CustomScrollStrategy implements ScrollStrategy {
  // your implementation
}

overlayConfig.scrollStrategy = new CustomScrollStrategy();
this._overlay.create(overlayConfig).attach(yourPortal);

----------------------------------------

TITLE: Creating CdkPortal in Angular HTML Template
DESCRIPTION: Demonstrates how to create a CdkPortal using an ng-template or *cdkPortal directive in an Angular HTML template. CdkPortal is used to capture template content as a portal.

LANGUAGE: html
CODE:
<ng-template cdkPortal>
  <p>The content of this template is captured by the portal.</p>
</ng-template>

<!-- OR -->

<!-- This result here is identical to the syntax above -->
<p *cdkPortal>
  The content of this template is captured by the portal.
</p>

----------------------------------------

TITLE: Creating and Attaching Overlay Content
DESCRIPTION: Demonstrates how to create an overlay reference and attach content using a ComponentPortal

LANGUAGE: typescript
CODE:
const overlayRef = overlay.create();
const userProfilePortal = new ComponentPortal(UserProfile);
overlayRef.attach(userProfilePortal);

----------------------------------------

TITLE: Defining a Sass Palette for Angular Material 2
DESCRIPTION: Example of defining a custom color palette using Sass maps, including contrast colors for accessibility.

LANGUAGE: scss
CODE:
$m2-indigo-palette: (
 50: #e8eaf6,
 100: #c5cae9,
 200: #9fa8da,
 300: #7986cb,
 // ... continues to 900
 contrast: (
   50: rgba(black, 0.87),
   100: rgba(black, 0.87),
   200: rgba(black, 0.87),
   300: white,
   // ... continues to 900
 )
);

----------------------------------------

TITLE: Using BreakpointObserver in Angular Component
DESCRIPTION: This snippet demonstrates how to inject and use BreakpointObserver in an Angular component to respond to screen size changes. It observes the Handset breakpoint and calls different methods based on whether the breakpoint matches or not.

LANGUAGE: typescript
CODE:
@Component({ ... })
export class MyWidget {
  isHandset: Observable<BreakpointState>;

  constructor(bm: BreakpointObserver) {
    bm.observe(Handset).subscribe((state: BreakpointState) => {
      if (state.matches) {
        this.makeEverythingFitOnSmallScreen();
      } else {
        this.expandEverythingToFillTheScreen();
      }
    });
  }
}

----------------------------------------

TITLE: Configuring Angular Material Slider with Custom Values
DESCRIPTION: This snippet demonstrates how to create a basic slider with custom minimum, maximum, and step values. It also shows how to set an initial value for the slider.

LANGUAGE: html
CODE:
<mat-slider min="1" max="5" step="0.5">
  <input matSliderThumb value="1.5">
</mat-slider>

----------------------------------------

TITLE: Checking Element Tabbability in TypeScript
DESCRIPTION: Method to check if an HTML element can be reached via the Tab key, assuming it has already been checked for focusability.

LANGUAGE: typescript
CODE:
isTabbable(element: HTMLElement): boolean

----------------------------------------

TITLE: Implementing MapBicyclingLayer in Angular Component
DESCRIPTION: This snippet demonstrates how to import and use the MapBicyclingLayer component in an Angular component. It sets up a basic map configuration with center coordinates and zoom level.

LANGUAGE: typescript
CODE:
// google-maps-demo.component.ts
import {Component} from '@angular/core';
import {GoogleMap, MapBicyclingLayer} from '@angular/google-maps';

@Component({
  selector: 'google-map-demo',
  templateUrl: 'google-map-demo.html',
  imports: [GoogleMap, MapBicyclingLayer],
})
export class GoogleMapDemo {
  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};
  zoom = 4;
}

----------------------------------------

TITLE: Checking Element Focusability in TypeScript
DESCRIPTION: Method to determine if an HTML element can be focused by the user.

LANGUAGE: typescript
CODE:
isFocusable(element: HTMLElement): boolean

----------------------------------------

TITLE: Accessing Angular CLI Help
DESCRIPTION: Displays help information for Angular CLI commands and usage

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Checking Element Visibility in TypeScript
DESCRIPTION: Method to check if an HTML element is visible, considering display and visibility properties but not overflow or viewport positioning.

LANGUAGE: typescript
CODE:
isVisible(element: HTMLElement): boolean

----------------------------------------

TITLE: Cluster Style and Options Interfaces
DESCRIPTION: Interfaces defining styling and configuration options for map clusters

LANGUAGE: typescript
CODE:
export interface ClusterIconStyle {
    anchorIcon?: [number, number];
    anchorText?: [number, number];
    backgroundPosition?: string;
    className?: string;
    fontFamily?: string;
    fontStyle?: string;
    fontWeight?: string;
    height: number;
    textColor?: string;
    textDecoration?: string;
    textLineHeight?: number;
    textSize?: number;
    url?: string;
    width: number;
}

export interface ClusterOptions {
    markers?: Marker[];
    position?: google.maps.LatLng | google.maps.LatLngLiteral;
}

----------------------------------------

TITLE: Applying Default Background and Text Colors in Angular Material
DESCRIPTION: This CSS snippet applies the theme's surface background and on-surface text colors as default styles across the application, using CSS variables defined by the Angular Material theme.

LANGUAGE: scss
CODE:
body {
  background: var(--mat-sys-surface);
  color: var(--mat-sys-on-surface);
}

----------------------------------------

TITLE: Configuring Horizontal Virtual Scrolling in Angular
DESCRIPTION: Shows how to set up horizontal virtual scrolling by changing the orientation of the cdk-virtual-scroll-viewport and adjusting CSS for horizontal layout.

LANGUAGE: html
CODE:
<!-- example(cdk-virtual-scroll-horizontal) -->

----------------------------------------

TITLE: Deploying Angular Components Documentation Site
DESCRIPTION: Commands for deploying the Angular Components documentation site to development and production environments. These steps should be executed after installing dependencies and upgrading components.

LANGUAGE: bash
CODE:
# Development
> yarn publish-dev

# Production
> yarn publish-prod

----------------------------------------

TITLE: Running E2E Tests
DESCRIPTION: Executes end-to-end tests using the configured testing platform

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Generating Angular Components and Other Structures
DESCRIPTION: Angular CLI command for generating new components, directives, pipes, services, classes, guards, interfaces, enums, and modules.

LANGUAGE: markdown
CODE:
Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

----------------------------------------

TITLE: Attaching Data to Drag and Drop Elements in Angular CDK
DESCRIPTION: Demonstrates how to associate arbitrary data with cdkDrag and cdkDropList elements using cdkDragData and cdkDropListData properties.

LANGUAGE: HTML
CODE:
@for (list of lists; track list) {
  <div cdkDropList [cdkDropListData]="list" (cdkDropListDropped)="drop($event)">
    @for (item of list; track item) {
      <div cdkDrag [cdkDragData]="item"></div>
    }
  </div>
}

----------------------------------------

TITLE: Generating Angular Components
DESCRIPTION: CLI command for scaffolding new Angular components and other artifacts like directives, services, and modules

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Customizing Navigation Options in CDK Listbox for Angular
DESCRIPTION: Shows how to customize keyboard navigation options in a CDK listbox, including disabling navigation wrap and allowing navigation through disabled options.

LANGUAGE: HTML
CODE:
<ul cdkListbox cdkListboxNavigationWrapDisabled cdkListboxNavigatesDisabledOptions>
  <li cdkOption="red">Red</li>
  <li cdkOption="green" cdkOptionDisabled>Green</li>
  <li cdkOption="blue">Blue</li>
</ul>

----------------------------------------

TITLE: Initializing TestBed and HarnessLoader for Component Testing
DESCRIPTION: Sets up the testing environment by configuring TestBed and creating a HarnessLoader instance for a UserProfile component.

LANGUAGE: typescript
CODE:
import {HarnessLoader} from '@angular/cdk/testing';
import {TestbedHarnessEnvironment} from '@angular/cdk/testing/testbed';

let loader: HarnessLoader;

describe('my-component', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({imports: [MyModule], declarations: [UserProfile]})
        .compileComponents();
    fixture = TestBed.createComponent(UserProfile);
    loader = TestbedHarnessEnvironment.loader(fixture);
  });
}

----------------------------------------

TITLE: Applying Theme to Angular Material 2 Components
DESCRIPTION: Shows how to apply a custom theme to Angular Material components using Sass mixins.

LANGUAGE: scss
CODE:
@use '@angular/material' as mat;

// ... theme definition ...

// Emit theme-dependent styles for common features used across multiple components.
@include mat.core-theme($my-theme);

// Emit styles for MatButton based on `$my-theme`. Because the configuration
// passed to `m2-define-light-theme` omits typography, `button-theme` will not
// emit any typography styles.
@include mat.button-theme($my-theme);

// Include the theme mixins for other components you use here.

----------------------------------------

TITLE: Defining YouTube Player Component and Module in TypeScript
DESCRIPTION: Implements a YouTube Player component for Angular with comprehensive API integration. Includes player controls, event handling, configuration options, and placeholder management. Contains type definitions for player states, quality settings, and configuration options.

LANGUAGE: typescript
CODE:
/// <reference types="youtube" />

import { AfterViewInit } from '@angular/core';
import { ElementRef } from '@angular/core';
import * as i0 from '@angular/core';
import { InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import { OnChanges } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { SimpleChanges } from '@angular/core';

// @public
export type PlaceholderImageQuality = 'high' | 'standard' | 'low';

// @public
export const YOUTUBE_PLAYER_CONFIG: InjectionToken<YouTubePlayerConfig>;

// @public
export class YouTubePlayer implements AfterViewInit, OnChanges, OnDestroy {
    constructor(...args: unknown[]);
    readonly apiChange: Observable<YT.PlayerEvent>;
    disableCookies: boolean;
    disablePlaceholder: boolean;
    endSeconds: number | undefined;
    readonly error: Observable<YT.OnErrorEvent>;
    getAvailablePlaybackRates(): number[];
    getAvailableQualityLevels(): YT.SuggestedVideoQuality[];
    getCurrentTime(): number;
    getDuration(): number;
    getPlaybackQuality(): YT.SuggestedVideoQuality;
    getPlaybackRate(): number;
    getPlayerState(): YT.PlayerState | undefined;
    getVideoEmbedCode(): string;
    getVideoLoadedFraction(): number;
    getVideoUrl(): string;
    getVolume(): number;
    protected _hasPlaceholder: boolean;
    get height(): number;
    set height(height: number | undefined);
    protected _isLoading: boolean;
    isMuted(): boolean;
    protected _load(playVideo: boolean): void;
    loadApi: boolean;
    mute(): void;
    static ngAcceptInputType_disableCookies: unknown;
    static ngAcceptInputType_disablePlaceholder: unknown;
    static ngAcceptInputType_endSeconds: number | undefined;
    static ngAcceptInputType_height: unknown;
    static ngAcceptInputType_loadApi: unknown;
    static ngAcceptInputType_showBeforeIframeApiLoads: unknown;
    static ngAcceptInputType_startSeconds: number | undefined;
    static ngAcceptInputType_width: unknown;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    pauseVideo(): void;
    placeholderButtonLabel: string;
    placeholderImageQuality: PlaceholderImageQuality;
    readonly playbackQualityChange: Observable<YT.OnPlaybackQualityChangeEvent>;
    readonly playbackRateChange: Observable<YT.OnPlaybackRateChangeEvent>;
    playerVars: YT.PlayerVars | undefined;
    playVideo(): void;
    readonly ready: Observable<YT.PlayerEvent>;
    requestFullscreen(options?: FullscreenOptions): Promise<void>;
    seekTo(seconds: number, allowSeekAhead: boolean): void;
    setPlaybackRate(playbackRate: number): void;
    setVolume(volume: number): void;
    protected _shouldShowPlaceholder(): boolean;
    showBeforeIframeApiLoads: boolean;
    startSeconds: number | undefined;
    readonly stateChange: Observable<YT.OnStateChangeEvent>;
    stopVideo(): void;
    suggestedQuality: YT.SuggestedVideoQuality | undefined;
    unMute(): void;
    videoId: string | undefined;
    get width(): number;
    set width(width: number | undefined);
    youtubeContainer: ElementRef<HTMLElement>;
    static ɵcmp: i0.ɵɵComponentDeclaration<YouTubePlayer, "youtube-player", never, { "videoId": { "alias": "videoId"; "required": false; }; "height": { "alias": "height"; "required": false; }; "width": { "alias": "width"; "required": false; }; "startSeconds": { "alias": "startSeconds"; "required": false; }; "endSeconds": { "alias": "endSeconds"; "required": false; }; "suggestedQuality": { "alias": "suggestedQuality"; "required": false; }; "playerVars": { "alias": "playerVars"; "required": false; }; "disableCookies": { "alias": "disableCookies"; "required": false; }; "loadApi": { "alias": "loadApi"; "required": false; }; "disablePlaceholder": { "alias": "disablePlaceholder"; "required": false; }; "showBeforeIframeApiLoads": { "alias": "showBeforeIframeApiLoads"; "required": false; }; "placeholderButtonLabel": { "alias": "placeholderButtonLabel"; "required": false; }; "placeholderImageQuality": { "alias": "placeholderImageQuality"; "required": false; }; }, { "ready": "ready"; "stateChange": "stateChange"; "error": "error"; "apiChange": "apiChange"; "playbackQualityChange": "playbackQualityChange"; "playbackRateChange": "playbackRateChange"; }, never, never, true, never>;
    static ɵfac: i0.ɵɵFactoryDeclaration<YouTubePlayer, never>;
}

// @public
export interface YouTubePlayerConfig {
    disablePlaceholder?: boolean;
    loadApi?: boolean;
    placeholderButtonLabel?: string;
    placeholderImageQuality?: PlaceholderImageQuality;
}

// @public (undocumented)
export class YouTubePlayerModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<YouTubePlayerModule, never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<YouTubePlayerModule>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<YouTubePlayerModule, never, [typeof YouTubePlayer], [typeof YouTubePlayer]>;
}

----------------------------------------

TITLE: Defining DIR_DOCUMENT Injection Token in Angular CDK
DESCRIPTION: This snippet defines the DIR_DOCUMENT injection token, which is used for dependency injection of the Document object in the context of bidirectional text support.

LANGUAGE: typescript
CODE:
export const DIR_DOCUMENT: InjectionToken<Document>;

----------------------------------------

TITLE: Providing Custom Component as MatFormFieldControl
DESCRIPTION: This snippet shows how to provide the custom component as an implementation of MatFormFieldControl interface, which allows it to work with mat-form-field.

LANGUAGE: typescript
CODE:
@Component({
  ...
  providers: [{provide: MatFormFieldControl, useExisting: MyTelInput}],
})
export class MyTelInput implements MatFormFieldControl<MyTel> {
  ...
}

----------------------------------------

TITLE: Importing Overlay Styles in SCSS
DESCRIPTION: Imports the required structural styles for CDK overlays when using CDK standalone without Angular Material

LANGUAGE: scss
CODE:
@import '@angular/cdk/overlay-prebuilt.css';

----------------------------------------

TITLE: Generating Material 3 Custom Theme with Angular CLI
DESCRIPTION: Command to generate a new Material 3 theme palette using the Angular CLI and Material's theme-color schematic.

LANGUAGE: shell
CODE:
ng generate @angular/material:theme-color

----------------------------------------

TITLE: Implementing AutoSizeVirtualScrollStrategy in Angular Components
DESCRIPTION: This snippet demonstrates how to use the 'autosize' directive with cdk-virtual-scroll-viewport for handling items with different sizes. It includes the basic usage and configuration of minBufferPx and maxBufferPx properties.

LANGUAGE: html
CODE:
<cdk-virtual-scroll-viewport autosize>
  ...
</cdk-virtual-scroll-viewport>

LANGUAGE: html
CODE:
<cdk-virtual-scroll-viewport autosize minBufferPx="50" maxBufferPx="100">
  ...
</cdk-virtual-scroll-viewport>

----------------------------------------

TITLE: Setting Sidenav Width with CSS in Angular
DESCRIPTION: Demonstrates how to set a fixed width for a sidenav using CSS in Angular Material.

LANGUAGE: css
CODE:
mat-sidenav {
  width: 200px;
}

----------------------------------------

TITLE: Implementing Multiple Selection Mode with Angular Templates
DESCRIPTION: Demonstrates how to handle dynamic multiple selection mode changes using Angular's template syntax.

LANGUAGE: html
CODE:
@if (isMultiple) {
  <mat-select multiple>
    ...
  </mat-select>
} @else {
  <mat-select>
    ...
  </mat-select>
}

----------------------------------------

TITLE: Configuring Error State Matcher in Angular Module
DESCRIPTION: Shows how to set up a global error state matcher to display input errors when the input is dirty and invalid.

LANGUAGE: typescript
CODE:
@NgModule({
  providers: [
    {provide: ErrorStateMatcher, useClass: ShowOnDirtyErrorStateMatcher}
  ]
})

----------------------------------------

TITLE: Coercing Data to Observable in TypeScript for Angular CDK
DESCRIPTION: This function coerces input data of type T or Observable<T> into an Observable<T>. It's part of the Angular CDK's private coercion utilities.

LANGUAGE: typescript
CODE:
import { Observable } from 'rxjs';

// @public
export function coerceObservable<T>(data: T | Observable<T>): Observable<T>;

----------------------------------------

TITLE: Implementing Buffer Progress Bar in Angular Material
DESCRIPTION: Illustrates the buffer mode of the progress bar, used to indicate activity or loading from the server. The 'value' property determines the primary bar progress, while 'bufferValue' shows additional buffering progress.

LANGUAGE: html
CODE:
<!-- example(progress-bar-buffer) -->

----------------------------------------

TITLE: Global Ripple Configuration Setup
DESCRIPTION: Configuration of global ripple options including animation duration and disabled state using MAT_RIPPLE_GLOBAL_OPTIONS provider.

LANGUAGE: typescript
CODE:
const globalRippleConfig: RippleGlobalOptions = {
  disabled: true,
  animation: {
    enterDuration: 300,
    exitDuration: 0
  }
};

@NgModule({
  providers: [
    {provide: MAT_RIPPLE_GLOBAL_OPTIONS, useValue: globalRippleConfig}
  ]
})

----------------------------------------

TITLE: Custom Ripple Trigger Implementation
DESCRIPTION: Example of separating the ripple container from its trigger element using matRippleTrigger directive.

LANGUAGE: html
CODE:
<div>
  <div matRipple [matRippleTrigger]="trigger" class="my-ripple-container">
    <!-- This is the ripple container, but not the trigger element for ripples. -->
  </div>

  <div #trigger></div>
</div>

----------------------------------------

TITLE: Basic Tree Node Template Definition
DESCRIPTION: Shows how to define a basic tree node template using cdkNodeDef directive with data binding.

LANGUAGE: html
CODE:
<cdk-tree-node *cdkNodeDef="let node">
  {{node.key}}: {{node.value}}
</cdk-tree-node>

----------------------------------------

TITLE: Implementing Accessibility in Angular CDK Stepper
DESCRIPTION: Demonstrates how to implement accessibility features in an Angular CDK Stepper, including proper ARIA roles and attributes for tab-like behavior.

LANGUAGE: typescript
CODE:
<cdk-stepper role="tablist">
  <cdk-step>
    <ng-template cdkStepLabel>
      <button role="tab" [attr.aria-selected]="isSelected">Step 1</button>
    </ng-template>
    <div role="tabpanel">
      <!-- Step content -->
    </div>
  </cdk-step>
  <!-- More steps... -->
</cdk-stepper>