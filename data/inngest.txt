TITLE: Creating Inngest Functions in TypeScript, Python, and Go
DESCRIPTION: Demonstrates how to create Inngest Functions with event triggers, flow control, and steps in TypeScript, Python, and Go. The functions handle system synchronization with throttling and error retry mechanisms.

LANGUAGE: typescript
CODE:
inngest.createFunction({
    id: "sync-systems",
    // Easily add Throttling with Flow Control
    throttle: { limit: 3, period: "1min"},
  },
  // A Function is triggered by events
  { event: "auto/sync.request" },
  async ({ step }) => {
    // step is retried if it throws an error
    const data = await step.run("get-data", async () => {
      return getDataFromExternalSource();
    });

    // Steps can reuse data from previous ones
    await step.run("save-data", async () => {
      return db.syncs.insertOne(data);
    });
  }
);

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="sync-systems",
    # A Function is triggered by events
    trigger=inngest.TriggerEvent(event="auto/sync.request"),
    # Easily add Throttling with Flow Control
    throttle=inngest.Throttle(
        count=2, period=datetime.timedelta(minutes=1)
    ),
)
def sync_systems(ctx: inngest.Context, step: inngest.StepSync) -> None:
    # step is retried if it throws an error
    data = step.run("Get data", get_data_from_external_source)

    # Steps can reuse data from previous ones
    step.run("Save data", db.syncs.insert_one, data)

LANGUAGE: go
CODE:
inngestgo.CreateFunction(
	inngestgo.FunctionOpts{ID: "sync-systems", },
	// Functions are triggered by events
	inngestgo.EventTrigger("auto/sync.request", nil),
	func(ctx context.Context, input inngestgo.Input[SyncRequestEvent]) (any, error) {
		// step is retried if it throws an error
		data, err := step.Run(ctx, "get-data", func(ctx context.Context) (any, error) {
			return getDataFromExternalSource()
		})
		if err != nil {
			return nil, err
		}

		// steps can reuse data from previous ones
		_, err = step.Run(ctx, "save-data", func(ctx context.Context) (any, error) {
			return db.Syncs.InsertOne(data.(DataType))
		})
		if err != nil {
			return nil, err
		}

		return nil, nil
	},
)

----------------------------------------

TITLE: Handling AI Image Generation Errors with TypeScript
DESCRIPTION: Example showing how to implement fallback logic between different AI image generation services using try/catch blocks with automatic retries. If DALL-E generation fails, the code falls back to Midjourney.

LANGUAGE: typescript
CODE:
const transcoding = inngest.createFunction(
  { id: "generate-result" },
  { event: "prompt.created" },
  async ({ event, step }) => {
    let imageURL: string | null = null
    let via: "dall-e" | "midjourney"

    try {
      imageURL = await step.run("generate-image-dall-e", () => {
        // open api call to generate image...
      })
      via = "dall-e"
    } catch (err) {
      imageURL = await step.run("generate-image-midjourney", () => {
        // midjourney call to generate image...
      })
      via = "midjourney"
    }

    await step.run("notify-user", () => {
      return pusher.trigger(event.data.channelID, "image-result", {
        imageURL,
        via,
      })
    })
  }
)

----------------------------------------

TITLE: Implementing RAG Workflow with Inngest in TypeScript
DESCRIPTION: This code snippet demonstrates a RAG (Retrieval-Augmented Generation) workflow using Inngest. It queries a vector database, retrieves a transcript from S3, generates a summary using GPT-4, and saves the result. The function uses Inngest steps for automatic retries on failure.

LANGUAGE: typescript
CODE:
export const summarizeContent = inngest.createFunction(
  { name: 'Summarize content via GPT-4', id: 'summarize-content' },
  { event: 'ai/summarize.content' },
  async ({ event, step, attempt }) => {
    const results = await step.run('query-vectordb', async () => {
      return {
        matches: [
          {
            id: 'vec3',
            score: 0,
            values: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3],
            text: casual.sentences(3),
          },
          {
            id: 'vec4',
            score: 0.0799999237,
            values: [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4],
            text: casual.sentences(3),
          },
          {
            id: 'vec2',
            score: 0.0800000429,
            values: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2],
            text: casual.sentences(3),
          },
        ],
        namespace: 'ns1',
        usage: { readUnits: 6 },
      };
    });

    const transcript = await step.run('read-s3-file', async () => {
      return casual.sentences(10);
    });

    // We can globally share throttle limited functions like this using invoke
    const completion = await step.invoke('generate-summary-via-gpt-4', {
      function: chatCompletion,
      data: {
        messages: [
          {
            role: 'system',
            content:
              'You are a helpful assistant that summaries content for product launches.',
          },
          {
            role: 'user',
            content: `Question: Summarize my content: \n${transcript}. \nInformation: ${results.matches
              .map((m) => m.text)
              .join('. ')}`,
          },
        ],
      },
    });
    // You might use the response like this:
    const summary = completion.choices[0].message.content;

    await step.run('save-to-db', async () => {
      return casual.uuid;
    });

    await step.run('websocket-push-to-client', async () => {
      return casual.uuid;
    });
    return { success: true, summaryId: casual.uuid };
  }
);

----------------------------------------

TITLE: Creating a Complex Function with Inngest in TypeScript
DESCRIPTION: This code snippet demonstrates how to create a complex function using Inngest's TypeScript SDK. It shows how to define a function that imports integration data, fetches a list, sleeps for a specified duration, and processes items in parallel with independent retries for each step.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { name: "Import integration data" },
  { event: "app/integration.connected" },
  async ({ event, step }) => {
    // Steps are retried independently
    const list = await step.run("Fetch data", async () =>
      await getList(event.data.id)
    )
    // Sleep, delay, whatever
    await step.sleep("3d")

    // Run work in parallel - *reliably* w/ retries
    await Promise.all(
      list.map(item =>
        step.run("Process item", async () => await doSomething(item))
      )
    )
  }
)

----------------------------------------

TITLE: Implementing Chained LLMs with Inngest and TypeScript
DESCRIPTION: This code snippet demonstrates how to create a chained LLM function using Inngest. It includes steps for summarizing input, generating a title, and saving results to a database. The function is triggered by an event and can be easily deployed to various platforms.

LANGUAGE: javascript
CODE:
import { Inngest } from "inngest";
// https://www.inngest.com/docs/learn/serving-inngest-functions#setting-up-the-api
import { serve } from "inngest/next";

const inngest = new Inngest({ name: "Chained LLM app" });

export const chain = inngest.createFunction(
  { name: "Summarize chat and documents" },
  { event: "api/chat.submitted" },
  async ({ event, step }) => {
    const llm = new OpenAI();

    // `step.run` creates a new reliable step which retries automatically, and
    // only runs once on success.  It returns data which is stored in function
    // state automatically.
    const output = await step.run("Summarize input", async () => {
      const prompt = `You are an executive assistant.
      You must summarize the given document accurately within 4 paragraphs.`;
      return await llm.createCompletion({
        model: "gpt-3.5-turbo",
        prompt: `${prompt}: ${event.data.input}`,
      });
    });

    const title = await step.run("Generate a title", async () => {
      const prompt = `You are a business leader who writes reports
on different topics.  Given the following report, generate a title
which introduces the report in under 100 words`;

      // Uses output from the previous LLM call, stored automatically
      // in function memory!
      return await llm.createCompletion({
        model: "gpt-3.5-turbo",
        prompt: `${prompt}: ${output}`,
      });
    });

    // Save the generated content to the database, and return it to be captured
    // as the final function state.
    await step.run("Save to DB", async () => {
      await db.summaries.create({ output, title, requestID: event.data.requestID });
    });

    return { output, title };
  },
);

// Create an HTTP handler that serves your chained functions.  This function
// will be called any time the `api/chat.submitted` event is received.
//
// It can be hosted anywhere: Vercel, Netlify, Cloudflare, Fly.io, Railway, etc.
export const handler = serve(inngest, [chain]);

// You can trigger this function by sending an event.  This is a single HTTP
// POST.
await inngest.send({
  name: "api/chat.submitted", // matches the event name in createFunction
  data: {
    requestID: "ef2fc16e-5f9b-48fb-a996-e3adbf1accb9",
    input: "<Add any data you want summarized here>",
  }
});

----------------------------------------

TITLE: Implementing a Billing Function Using a Workflow Engine in TypeScript
DESCRIPTION: This code snippet demonstrates how to implement a billing function using a workflow engine. It showcases the use of workflow primitives such as step.run and step.sleep to create a reliable, retriable process for charging customers and handling payment failures.

LANGUAGE: typescript
CODE:
async ({ event, step }) => {
  // Wait until the next billing date.
  await step.sleepUntil(event.data.invoiceDate);

  for (let i = 0; i < 3; i++) {
    const charge = await step.run("Attempt charge", async () => {
      // Note: This throws an error and retries automatically if the charge
      // cannot be attempted.  If a charge is attempted, the returning
      // object will specify whether the charge is successful.
      return await lib.stripe.charges.create({
        user: event.data.accountId,
        amount: event.data.amount,
      });
    });

    if (charge.success) {
      // Run two steps in parallel, both enqueued for reliability.
      // Note that both steps finish before the function continues, and the output
      // of both steps is available to the function in the future.
      const [update, send] = await Promise.all([
        step.run("Update DB", async () => {
          return await db.payments.upsert(charge)
        }),
        step.run("Send receipt", async () => {
          return await resend.emails.send({
            to: event.user.email,
            subject: "Your receipt for Inngest",
          })
        })
      ]);
      // Done.  Return the charge for observability.
      return charge;
    }

    // Wait 24 hours and retry.
    await step.sleep("24h");
  }

  // If we're here, we've retried 3 times and we haven't been able to
  // succeed with a payment. Handle the failure.
  await step.run("Handle permanently failed payment", async () => {
    lib.accounts.suspend(event.data.accountId);
  });
};

----------------------------------------

TITLE: Generating and Storing Embeddings for Hacker News Stories in TypeScript
DESCRIPTION: Functions to generate embeddings for Hacker News stories using OpenAI's API and store them in a PostgreSQL database with pgvector extension.

LANGUAGE: typescript
CODE:
async function generateEmbedding(text: string): Promise<number[]> {
  const response = await openai.embeddings.create({
    model: "text-embedding-ada-002",
    input: text,
  });
  return response.data[0].embedding;
}

export async function storeStory(story: Story): Promise<void> {
  // [...]

  // Generate embedding from title and content
  const embedding = await generateEmbedding(`${story.title} ${story.content}`);

  // Insert new story into `stories` db table
  await client.query(
    "INSERT INTO stories (title, content, date, comments, embedding, interest_id) VALUES ($1, $2, $3::date, $4, $5::vector, $6)",
    [
      story.title,
      story.content,
      story.date,
      story.comments,
      `[${embedding.join(",")}]`,
      story.interest_id,
    ]
  );
}

----------------------------------------

TITLE: Implementing Durable Function with Steps in TypeScript
DESCRIPTION: Example of an Inngest function implementing a contact import process using multiple steps. Shows how to structure durable execution with parse-csv, normalize-raw-csv, and input-contacts steps.

LANGUAGE: typescript
CODE:
const fn = inngest.createFunction(
  { id: "import-contacts" },
  { event: "contacts/csv.uploaded" },
  // The function handler:
  async ({ event, step }) => {
    const rows = await step.run("parse-csv", async () => {
      return await parseCsv(event.data.fileURI);
    });

    const normalizedRows = await step.run("normalize-raw-csv", async () => {
      const normalizedColumnMapping = getNormalizedColumnNames();
      return normalizeRows(rows, normalizedColumnMapping);
    });

    const results = await step.run("input-contacts", async () => {
      return await importContacts(normalizedRows);
    });

    return { results };
  }
);

----------------------------------------

TITLE: Implementing Basic Order Processing Workflow with Durable Functions
DESCRIPTION: Demonstrates a basic order processing workflow using Inngest's SDK to create durable function steps for payment processing, inventory checking, shipment scheduling, and notification sending.

LANGUAGE: jsx
CODE:
const orderProcessingWorkflow = inngest.createFunction(
  { id: "Order Processing" },
  { event: "order.placed" },
  async ({ step, event }) => {
    const paymentConfirmation = await step.run("process-payment", () =>
      processPayment(event.data.orderDetails)
    );

    const inventoryStatus = await step.run("check-inventory", () =>
      checkInventory(event.data.orderDetails.items)
    );

     const shipmentDetails = await step.run("schedule-shipment", () =>
      scheduleShipment(event.data.orderDetails)
    );

    await step.run("send-notification", () =>
      sendNotification(
        event.data.customerId,
        "Order Received",
        shipmentDetails.status
      )
    );
  }
);

----------------------------------------

TITLE: Orchestrating Complete Writer Pipeline with Inngest in TypeScript
DESCRIPTION: Demonstrates the full writer pipeline implementation using Inngest, including site indexing, outline creation, article writing, publishing, and email notifications with event deduplication.

LANGUAGE: typescript
CODE:
export const writerPipeline = client.createPipeline(
  { id: "writer-pipeline" },
  { event: Events.WRITER_PIPELINE },
  async ({ event, step }) => {
    const { keywords, url, targetAudience, customerId } = event.data as WriterPipelineRequest;

    const [siteResult, ...outlineResults] = await Promise.all([
      step.invoke("index-site", async () => {
        function:
      }),
      ...keywords.map(async (keyword) => {
        return step.invoke(`write-outline-${keyword}`, {
          function: writeOutline,
          data: { keyword },
        });
      })
    ]);

    const articles = await Promise.all(
      outlineResults.map(async (outline, index) => {
        return step.invoke(`write-article-${index}`, {
          function: writeArticle,
          data: { outline, keywords, targetAudience},
        });
      })
    );

    await step.run("publish-articles", async () => {
      return publishArticles(articles);
    });

    await step.sendEvent(Events.SEND_EMAILS, {
        data: {
          customerId,
        articles,
      },
      // Deduplication key
      id: `send-emails-${customerId}`,
    });

    return {
      siteResult,
      articles,
    };
  }
);

----------------------------------------

TITLE: Implementing Multi-Step Contact Import Workflow with Inngest in TypeScript
DESCRIPTION: This code snippet demonstrates how to create a complex, multi-step workflow for importing and enriching contacts using Inngest's TypeScript SDK. It includes steps for validating uploads, enriching data, waiting for user review, and inserting contacts into a CRM database.

LANGUAGE: typescript
CODE:
import { inngest } from "./client";

inngest.createFunction(
  { name: "Contacts Import and enrichment" },
  { event: "api/contact_list.uploaded" },
  async ({ event, step }) => {
    const { isValid, errors } = await step.run("Validate upload contents", async () => {
      // Download the csv file, validate columns and data in each row
      const { isValid, errors } = downloadAndValidateCSV(event.data.filename);
      return { isValid, errors };
    });

    if (!isValid) {
      return await step.run("Notify user of invalid contents", async () =>
        await sendContactsImportFailedEmail(event.user.id, errors)
      );
    }

    // Enrichment may fail at times due to networking blip
    await step.run("Enrich contracts information", async () => {
      // Call a third party API service to enriches each contact's info
      // then uploads the data to an object store when complete
    });

    const listReviewedEvent = await step.waitForEvent("api/contact_list.reviewed", {
      timeout: "7d",
      match: "data.upload_id", // data.upload_id is in both events and must match to proceed
    })

    if (listReviewedEvent.data.is_approved === false) {
      return await step.run("Delete uploaded contact lists", () => { /* ...*/ });
    }

    const { totalUsersAdded } = await step.run("Create contacts in CRM", async () => {
      const contacts = await downloadEnrichedContactList(event.data.filename);
      const filteredContacts = applyFilters(listReviewedEvent.data.filters);
      return await insertContactsIntoCRMDatabase(event.data.account_id, filteredContacts);
    });

    await step.run("Notify user of successful import", async () =>
      await sendContactsImportSuccessEmail(event.user.id, totalUsersAdded)
    );
  }
)

----------------------------------------

TITLE: Using step.ai.wrap() with Vercel AI SDK and Type Casting for Complex Overloads
DESCRIPTION: Demonstrates how to use step.ai.wrap() with the Vercel AI SDK when dealing with complex function overloads, requiring type casting to ensure compatibility.

LANGUAGE: typescript
CODE:
import { generateText as vercelGenerateText } from "ai";
import { openai as vercelOpenAI } from "@ai-sdk/openai";

export const vercelWrapSchema = inngest.createFunction(
  { id: "vercel-wrap-generate-object" },
  { event: "vercel/wrap.generate.object" },
  async ({ event, step }) => {
    //
    // Calling generateObject directly is fine
    await vercelGenerateObject({
      model: vercelOpenAI("gpt-4o-mini"),
      schema: z.object({
        recipe: z.object({
          name: z.string(),
          ingredients: z.array(
            z.object({ name: z.string(), amount: z.string() }),
          ),
          steps: z.array(z.string()),
        }),
      }),
      prompt: "Generate a lasagna recipe.",
    });

    //
    // step.ai.wrap requires type casting
    await step.ai.wrap(
      "vercel-openai-generateObject",
      vercelGenerateObject,
      {
        model: vercelOpenAI("gpt-4o-mini"),
        schema: z.object({
          recipe: z.object({
            name: z.string(),
            ingredients: z.array(
              z.object({ name: z.string(), amount: z.string() }),
            ),
            steps: z.array(z.string()),
          }),
        }),
        prompt: "Generate a lasagna recipe.",
      } as any,
    );
  },
);

----------------------------------------

TITLE: Implementing Parallel Steps in TypeScript with Inngest
DESCRIPTION: Demonstrates how to run multiple steps in parallel using Promise.all() in an Inngest function. Shows a post-payment flow that simultaneously sends an email confirmation and updates user data.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";

const inngest = new Inngest({ id: "signup-flow" });

export const fn = inngest.createFunction(
  { id: "post-payment-flow" },
  { event: "stripe/charge.created" },
  async ({ event, step }) => {
    const sendEmail = step.run("confirmation-email", async () => {
      const emailID = await sendEmail(event.data.email);
      return emailID;
    });

    const updateUser = step.run("update-user", async () => {
      return db.updateUserWithCharge(event);
    });

    const [emailID, updates] = await Promise.all([sendEmail, updateUser]);

    return { emailID, updates };
  }
);

----------------------------------------

TITLE: Creating Event-Driven Function in TypeScript with Inngest
DESCRIPTION: Demonstrates how to create a typed background function that responds to auth/signup events using Inngest. The function handles new user signups by adding the user to Stripe and sending a welcome email. Shows type generation and event handling patterns.

LANGUAGE: typescript
CODE:
import { createFunction } from "inngest";
// Import the type for the event you want to listen to.  This fully types
// the arguments to your function.  The types are generated by running
// `npx inngest-cli types ts`.
import { AuthSignup } from '../__generated__/inngest';
import { addToStripe, sendWelcomeEmail } from '../lib/';

export const newPR = createFunction<AuthSignup>("New PR", "auth/signup", async ({ event }) => {
  // This function is triggered any time the `auth/signup` event is received.
  await addToStripe(event.data.user_id);
  await sendWelcomeEmail(event);
});

----------------------------------------

TITLE: Implementing System Synchronization Steps in Multiple Languages
DESCRIPTION: Examples showing how to implement system synchronization using Inngest steps across different languages. Steps provide retry capabilities and result persistence, with examples of data fetching and saving operations.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "sync-systems" },
  { event: "auto/sync.request" },
  async ({ step }) => {
    // By wrapping code in step.run, the code will be retried if it throws an error and when successfuly.
    // It's result is saved to prevent unnecessary re-execution
    const data = await step.run("get-data", async () => {
      return getDataFromExternalSource();
    });

    // Can also be retried up to 4 times
    await step.run("save-data", async () => {
      return db.syncs.insertOne(data);
    });
  },
);

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="sync-systems",
    trigger=inngest.TriggerEvent(event="auto/sync.request"),
)
def sync_systems(ctx: inngest.Context, step: inngest.StepSync) -> None:
    # By wrapping code in step.run, the code will be retried if it throws an error and when successfuly.
    # It's result is saved to prevent unnecessary re-execution
    data = step.run("Get data", get_data_from_external_source)

    # Can also be retried up to 4 times
    step.run("Save data", db.syncs.insert_one, data)

LANGUAGE: go
CODE:
inngestgo.CreateFunction(
	inngestgo.FunctionOpts{ID: "sync-systems"},
	inngestgo.EventTrigger("auto/sync.request", nil),
	func(ctx context.Context, input inngestgo.Input[SyncRequestEvent]) (any, error) {
		// By wrapping code in step.run, the code will be retried if it throws an error and when successfuly.
		// It's result is saved to prevent unnecessary re-execution
		data, err := step.Run(ctx, "get-data", func(ctx context.Context) (any, error) {
			return getDataFromExternalSource()
		})
		if err != nil {
			return nil, err
		}

		// can also be retried up to 4 times
		_, err = step.Run(ctx, "save-data", func(ctx context.Context) (any, error) {
			return db.Syncs.InsertOne(data.(DataType))
		})
		if err != nil {
			return nil, err
		}

		return nil, nil
	},
)

----------------------------------------

TITLE: Implementing User Onboarding Workflow with Inngest in TypeScript
DESCRIPTION: This code snippet demonstrates how to create a user onboarding workflow using Inngest. It includes steps for sending welcome emails, waiting for user actions, and sending follow-up emails based on user behavior.

LANGUAGE: typescript
CODE:
export const userCreated = inngest.createFunction(
  { id: "user-created" },
  { event: "user/created" },
  async ({ event, step }) => {
    const { email } = event.user;

    await step.run("send-welcome-email", async () => {
      return sendEmail({
        to: email,
        subject: "Welcome to our app!",
        body: "<p>Thanks for signing up!</p>",
      });
    });

    const completedAction = await step.waitForEvent("user/created.document", {
      timeout: "1m",
      if: "event.user.email == async.user.email",
    });

    if (!completedAction) {
      await step.run("send-nudge-email", async () => {
        return sendEmail({
          to: email,
          subject: "How can we help!",
          body: "<p>What can we do better? We are always here to help you suceed.</p>",
        });
      });
    } else {
      await step.run("send-congrats-email", async () => {
        return sendEmail({
          to: email,
          subject: "You did it!",
          body: "<p>We are so glad figured it out! It's challenging to do anything in this rough and tumble world so congrats on that.</p>",
        });
      });
    }
  }
);

----------------------------------------

TITLE: Processing CSV Uploads with Multi-Step Workflow in TypeScript using Inngest
DESCRIPTION: Implementation of a multi-step workflow for processing CSV contact uploads. The function handles file validation, data enrichment, CRM integration, and user notifications. Each step runs independently with built-in retry capabilities.

LANGUAGE: typescript
CODE:
import { inngest } from "./client";

inngest.createFunction(
  { id: "process-contacts-csv-upload" },
  { event: "api/contact_list.uploaded" },
  async ({ event, step }) => {
    const { isValid, errors } = await step.run(
      "validate-upload-contents",
      async () => {
        const uploadFilename = event.data.filename;
        // Download the csv file from object storage, validate columns and data in each row
      }
    );
    if (!isValid) {
      return await step.run(
        "notify-user-of-invalid-contents",
        async () => await sendContactsImportFailedEmail(event.user.id, errors)
      );
    }
    await step.run("enrich-address-information", async () => {
      // Call a third party API service to enriches each contact's address information
      // with zip codes, etc., then uploads the enriched data to the object store
    });
    const { totalUsersAdded } = await step.run(
      "create-contacts-in-crm",
      async () => {
        // Download the enriched file and insert into contacts into the database
      }
    );
    await step.run(
      "notify-user-of-successful-import",
      async () =>
        await sendContactsImportSuccessEmail(event.user.id, totalUsersAdded)
    );
  }
);

----------------------------------------

TITLE: Creating and Triggering Background Job in TypeScript
DESCRIPTION: This snippet shows how to create a background job function that sends an email to new signups and performs future tasks. It also demonstrates how to trigger the function by sending an event.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";
const inngest = new Inngest({ id: "signup-flow" });

export const sendSignUpEmail = inngest.createFunction(
  { id: "send-signup-email" },
  { event: "app/user.created" },
  ({ event, step }) => {
    await step.run("send-the-user-a-signup-email", async () => {
      await sesclient.clientsendEmail({
        to: event.data.user_email,
        subject: "Welcome to Inngest!"
        message: "...",
      });
    });
    await step.sleepUntil("wait-for-the-future", "2023-02-01T16:30:00");

    await step.run("do-some-work-in-the-future", async () => {
      // Code here runs in the future automatically.
    });
  }
);

LANGUAGE: typescript
CODE:
await inngest.send({
  name: "app/user.created", // This matches the event used in `createFunction`
  data: {
    email: "test@example.com",
    // any data you want to send
  },
});

----------------------------------------

TITLE: Implementing Durable Execution with Inngest in TypeScript
DESCRIPTION: This code snippet demonstrates how to create a durable function using Inngest's SDK. It shows a handler function that provisions a new account for a user, breaking down the process into individual steps that can be executed incrementally and persistently.

LANGUAGE: typescript
CODE:
function handler({ event, step }) {
  const account = await step.run('create-account', () => {/* ... */})
  const trial = await step.run('start-trial', () => {/* ... */})
  const email = await step.run('send-welcome-message', () => {/* ... */})
}

----------------------------------------

TITLE: Implementing Article Writing Function with Rate Limiting in TypeScript
DESCRIPTION: Defines an Inngest function for writing articles, including rate limiting and concurrency control to manage LLM token usage and ensure efficient processing.

LANGUAGE: typescript
CODE:
export const writeArticle = client.createFunction(
  { id: "write-article" },
  {
    event: Events.WRITE_ARTICLE,
    concurrency: {
      limit: 5,
    },
    rateLimit: {
      // Avoid hitting tokens per minute rate limits
      limit: 10,
      period: "1 minute",
    },
  },
  async ({ event, step }) => {
    const { outline, keywords, targetAudience, customerId } =
      event.data as CreateArticleRequest;

    const article = await step.run("write-article", async () => {
      return writeArticle(outline, keywords, targetAudience);
    });

    const [linkedArticle, image] = await Promise.all([
      step.run("insert-links", async () => {
        return insertRelatedLinks(article, customerId);
      }),

      step.run("generate-image", async () => {
        return generateCustomImage(article);
      }),
    ]);

    return {
      content: linkedArticle,
      image,
    };
  }
);

----------------------------------------

TITLE: Inngest Workflow for Video Processing in Next.js API Route
DESCRIPTION: This code defines an Inngest workflow for processing uploaded videos, including status updates, Mux asset creation, transcript generation, and AI-powered metadata suggestions.

LANGUAGE: typescript
CODE:
await step.run("Update Tip Status", async () => {
  return await sanityWriteClient
    .patch(event.data.tipId)
    .set({
      state: "processing",
    })
    .commit();
});

const newMuxAsset = await step.run("Create a Mux Asset", async () => {
  const videoResource = await getVideoResource(event.data.videoResourceId);
  const { originalMediaUrl, muxAsset, duration } = videoResource;
  return await createMuxAsset({
    originalMediaUrl,
    muxAsset,
    duration,
  });
});

await step.run("Sync Asset with Sanity", async () => {
  const videoResource = await getVideoResource(event.data.videoResourceId);
  const { duration: assetDuration, ...muxAsset } = newMuxAsset;

  return await sanityWriteClient
    .patch(videoResource._id)
    .set({
      duration: assetDuration,
      muxAsset,
    })
    .commit();
});

await step.run("Initiate Transcript Order via Deepgram", async () => {
  const videoResource = await getVideoResource(event.data.videoResourceId);
  const { originalMediaUrl, _id } = videoResource;
  return await fetch(
    `https://deepgram-wrangler.skillstack.workers.dev/transcript?videoUrl=${originalMediaUrl}&videoResourceId=${_id}`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    }
  );
});

const transcript = await step.waitForEvent("tip/video.transcript.created", {
  match: "data.videoResourceId",
  timeout: "1h",
});

await step.run("Update Video Resource with Transcript", async () => {
  return await sanityWriteClient
    .patch(event.data.videoResourceId)
    .set({
      transcript: {
        text: transcript.data.transcript.text,
        srt: transcript.data.transcript.srt,
      },
    })
    .commit();
});

await step.run("Notify SRT is Ready to Add to Mux Asset", async () => {
  return await inngest.send({
    name: "tip/video.srt.ready",
    data: {
      muxAssetId: newMuxAsset.muxAssetId,
      videoResourceId: event.data.videoResourceId,
      srt: transcript.data.transcript.srt,
    },
  });
});

await step.run("Send Transcript for LLM Suggestions", async () => {
  fetch(
    `https://deepgram-wrangler.skillstack.workers.dev/tipMetadataLLM?videoResourceId=${event.data.videoResourceId}`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        transcript: transcript.data.transcript.text,
        tipId: event.data.tipId,
      }),
    }
  );
  await sleep(1000);
  return "Transcript sent to LLM";
});

const llmResponse = await step.waitForEvent(
  "tip/video.llm.suggestions.created",
  {
    match: "data.videoResourceId",
    timeout: "1h",
  }
);

if (llmResponse) {
  await step.run("Update Tip with Generated Text", async () => {
    const title = llmResponse.data.llmSuggestions?.titles?.[0];
    const body = llmResponse.data.llmSuggestions?.body;
    const description = llmResponse.data.llmSuggestions?.descriptions?.[0];
    return await sanityWriteClient
      .patch(event.data.tipId)
      .set({
        title,
        description,
        body,
        state: "reviewing",
      })
      .commit();
  });
  return { llmSuggestions: llmResponse.data.llmSuggestions, transcript };
} else {
  return { transcript, llmSuggestions: null };
}

----------------------------------------

TITLE: Creating Scheduled Functions with Timezone Support in TypeScript
DESCRIPTION: This snippet shows how to create a scheduled function using Inngest in TypeScript. It demonstrates setting up a weekly digest function that runs at a specific time in the Paris timezone, loads users from a database, and implements a fan-out pattern for processing.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";

const inngest = new Inngest({ id: "signup-flow" });

// This weekly digest function will run at 12:00pm on Friday in the Paris timezone
export const prepareWeeklyDigest = inngest.createFunction(
  { id: "prepare-weekly-digest" },
  { cron: "TZ=Europe/Paris 0 12 * * 5" },
  async ({ step }) => {
    // Load all the users from your database:
    const users = await step.run(
      "load-users",
      async () => await db.load("SELECT * FROM users")
    );

    // 💡 Since we want to send a weekly digest to each one of these users
    // it may take a long time to iterate through each user and send an email.

    // Instead, we'll use this scheduled function to send an event to Inngest
    // for each user then handle the actual sending of the email in a separate
    // function triggered by that event.

    // ✨ This is known as a "fan-out" pattern ✨

    // 1️⃣ First, we'll create an event object for every user return in the query:
    const events = users.map((user) => {
      return {
        name: "app/send.weekly.digest",
        data: {
          user_id: user.id,
          email: user.email,
        },
      };
    });

    // 2️⃣ Now, we'll send all events in a single batch:
    await step.sendEvent("send-digest-events", events);

    // This function can now quickly finish and the rest of the logic will
    // be handled in the function below ⬇️
  }
);

// This is a regular Inngest function that will send the actual email for
// every event that is received (see the above function's inngest.send())

// Since we are "fanning out" with events, these functions can all run in parallel
export const sendWeeklyDigest = inngest.createFunction(
  { id: "send-weekly-digest-email" },
  { event: "app/send.weekly.digest" },
  async ({ event }) => {
    // 3️⃣ We can now grab the email and user id from the event payload
    const { email, user_id } = event.data;

    // 4️⃣ Finally, we send the email itself:
    await email.send("weekly_digest", email, user_id);

    // 🎇 That's it! - We've used two functions to reliably perform a scheduled
    // task for a large list of users!
  }
);

----------------------------------------

TITLE: Implementing Contact Import Workflow with Inngest
DESCRIPTION: Implementation of the contact import workflow using Inngest's Workflow Kit. Defines actions for OpenAI calls, data conversion, enrichment, and database storage with automatic retries and throttling.

LANGUAGE: typescript
CODE:
import { Engine, EngineAction } from "@inngest/workflow-kit";
import { inngest } from "../client";

export const actions: EngineAction[] = [
  // other actions ...
  {
    kind: "save",
    name: "Save contacts",
    description: "save contact information to the database",
    handler: async ({ state, step }) => {
      await step.run("save-contacts-to-database", async () => {
        const contacts = JSON.parse(state.get("contacts"));
        await sql.query(
          `INSERT INTO contacts (Name,Position,Company,Email,Decider,Ranking) VALUES ${contacts
            .map((contact: any) => {
              return `('${contact.Name}', '${contact.Position}', '${contact.Company}', '${contact.Email}', ${contact.Decider}, ${contact.Ranking})`;
            })
            .join()}`
        );
      });
    },
  }
];

const workflowEngine = new Engine({
  actions,
  loader: (event) => {
    return event.data.workflowInstance;
  },
});

export default inngest.createFunction(
  { id: "import-contacts" },
  { event: "contact.process" },
  async ({ event, step }) => {
    await workflowEngine.run({ event, step });
  }
);

----------------------------------------

TITLE: Implementing Signup Drip Campaign with Inngest in JavaScript
DESCRIPTION: This code snippet demonstrates how to create a signup drip campaign using Inngest. It includes sending a welcome email, waiting for user engagement, sending power user tips, and offering a free trial based on user actions and status.

LANGUAGE: javascript
CODE:
const signupDripCampaign = inngest.createFunction(
  { id: "signup-drip-campaign" },
  { event: "app/signup.completed" },
  async ({ event, step }) => {
    const { user } = event.data;
    const { email, first_name } = user
    const welcome = "Welcome to ACME";

    const { id: emailId } = await step.run("welcome-email", async () => {
      return await sendEmail(
        email,
        welcome,
        <div>
          <h1>Welcome to ACME, {user.firstName}</h1>
        </div>
      );
    });

    // Wait up to 3 days for the user open the email and click any link in it
    const clickEvent = await step.waitForEvent("wait-for-engagement", {
      event: "resend/email.clicked",
      if: `async.data.email_id == ${emailId}`,
      timeout: "3 days",
    });

    // if the user clicked the email, send them power user tips
    if (clickEvent) {
      await step.sleep("delay-power-tips-email", "1 day");
      await step.run("send-power-user-tips", async () => {
        await sendEmail(
          email,
          "Supercharge your ACME experience",
          <h1>
            Hello {firstName}, here are tips to get the most out of ACME
          </h1>
        );
      });

      // wait one more day before sending the trial offer
      await step.sleep("delay-trial-email", "1 day");
    }

    // check that the user is not already on the pro plan
    const dbUser = db.users.byEmail(email);

    if (dbUser.plan !== "pro") {
      // send them a free trial offer
      await step.run("trial-offer-email", async () => {
        await sendEmail(
          email,
          "Free ACME Pro trial",
          <h1>
            Hello {firstName}, try our Pro features for 30 days for free
          </h1>
        );
      });
    }
  }
);

----------------------------------------

TITLE: Implementing Product Image Import Function in TypeScript
DESCRIPTION: Example of an Inngest function that handles product image importing and processing. The function copies images to S3 and resizes them using step-based execution for automatic retries on failure.

LANGUAGE: typescript
CODE:
import { inngest } from "./client";

export default inngest.createFunction(
  // config
  { id: "import-product-images" },
  // trigger (event or cron)
  { event: "shop/product.imported" },
  // handler function
  async ({ event, step }) => {
    // Here goes the business logic
    // By wrapping code in steps, it will be retried automatically on failure
    const s3Urls = await step.run("copy-images-to-s3", async () => {
      return copyAllImagesToS3(event.data.imageURLs);
    });
    // You can include numerous steps in your function
    await step.run('resize-images', async () => {
      await resizer.bulk({ urls: s3Urls, quality: 0.9, maxWidth: 1024 });
    })
  };
);

----------------------------------------

TITLE: Implementing Fan-Out Pattern with Inngest in TypeScript
DESCRIPTION: This code snippet demonstrates how to implement the fan-out pattern using Inngest. It includes two functions: a scheduled cron job that dispatches multiple notifications, and an event-triggered function that sends individual Slack notifications. The cron job fetches notifications and triggers parallel execution by sending multiple events.

LANGUAGE: typescript
CODE:
import { inngest } from "./client";

const inngest = new Inngest({ id: "scheduling-backend" });

// A scheduled function uses the current time to find notifications to send
const slackCron = inngest.createFunction(
  { id: "slack-notification-cron" },
  { cron: "0 9,12 * * MON,FRI" },
  async () => {
    const notifications = await getNotificationsToRun();

    const events = notifications.map((notification) => ({
      name: "app/notification.dispatched",
      data: { notification },
    }));

    // Send an array of events to Inngest, triggering many jobs in parallel.
    await inngest.send(events);

    return `${notifications.length} notifications dispatched`;
  }
);

// A function runs for every app/notification.dispatched event to
// post the notification to Slack
const postSlackNotification = inngest.createFunction(
  { id: "send-slack-notification" },
  { event: "app/notification.dispatched" },
  async ({ event }) => {
    const reportData = getAccountReportData(event.data.notification.accountId);

    await app.client.chat.postMessage({
      channel: event.data.notification.slackChannelId,
      blocks: generateReportSlackBlocks(reportData),
      // ...
    });
  }
);

----------------------------------------

TITLE: Basic Inngest Function Creation in TypeScript
DESCRIPTION: Basic example of creating an Inngest function that responds to a shop product import event. Shows the minimal required configuration with id and event trigger.

LANGUAGE: typescript
CODE:
import { inngest } from "./client";

export default inngest.createFunction(
  { id: "import-product-images" },
  { event: "shop/product.imported" },
  async ({ event, step, runId }) => {
    // Your function code
  }
);

----------------------------------------

TITLE: Implementing Agentic Workflow with Inngest and Weaviate
DESCRIPTION: TypeScript code demonstrating the implementation of an agentic workflow using Inngest's createFunction and step APIs, combined with Weaviate queries for data retrieval.

LANGUAGE: typescript
CODE:
import { openai } from "inngest";
import { inngest } from "./inngest-client";
import { weaviate } from "./weaviate-client";

export const generateMeal = inngest.createFunction(
  { id: "generate-meal", concurrency: 10 },
  { event: "meal.generate" },
  async ({ event, step }) => {
    // retrieve the input parameters from our trigger event
    const { participantsCount, preferences, cuisine_type } = event.data;

    // Query relevant recipes based on cusine type preference
    let relevantRecipes = await step.run("query-recipes", async () => {
      const collection = weaviate.collections.get(
        "Thefoodprocessorcuisinetype"
      );
      const query = cuisine_type;
      const result = await collection.query.nearText(query, {
        limit: 10,
      });
      return result.objects.map((r) => r.properties.recipe).join(`\n`);
    });

    const allergiesAnalysis = await step.ai.infer("Allergies analysis", {
      model: openai({ model: "gpt-4" }),
      body: {
        messages: [
          {
            role: "system",
            content:
              'Given the following list meal requirements, return a list of allergies, if not allergies, return "not allergies"',
          },
          {
            role: "user",
            content: preferences.join(", "),
          },
        ],
        temperature: 0.7,
      },
    });
    // ...
  }
);

----------------------------------------

TITLE: Creating an Event-Driven User Onboarding Workflow in TypeScript
DESCRIPTION: This code snippet illustrates how to create an event-driven user onboarding workflow using a workflow engine. It demonstrates automatic function execution based on events, event waiting, and automatic cancellation based on specific events.

LANGUAGE: typescript
CODE:
import { lib } from "src/lib";
import { inngest } from "src/inngest/client"

export default inngest.createFunction(
  {
    id: "user-onboarding",
    name: "User onboarding campaign"
    cancelOn: [
      // Automatically cancel this function any time the user is deleted.  This prevents
      // developers from having to pass or store workflow run IDs around, or handle state
      // checking within functions.
      {
        event: "app/user.deleted",
        if: "event.data.userId == async.data.userId",
      },
    ]
  },
  { event: "app/user.signup" }, // Automatically run instantly any time this event is received
  async ({ event, step }) => {
    // Wait for the `app/user.profile.completed` event to be received with the same user
    // ID for up to 24 hours.  Whenever the event is received, this function will be
    // resumed and `profileComplete` will hold the received event data.  If this times out
    // the variable will be `null`.
    const profileComplete = await step.waitForEvent(
      "app/user.profile.completed",
      {
        timeout: "24h",
        if: `async.data.userId == "${event.data.userId}"`,
      }
    );

    if (profileComplete === null) {
      await step.run("send-followup", async () => {
        // Send the user a followup.
      });
    }
  }
);

----------------------------------------

TITLE: Implementing Workflow Execution with Inngest
DESCRIPTION: TypeScript implementation of workflow execution logic using Inngest. Handles loading workflow data from Sanity and processing different action types sequentially.

LANGUAGE: typescript
CODE:
export const newAccount = inngest.createFunction(
  {id: 'new-account', name: 'New Account Created'},
  {event: 'marketing/new-account'},
  async ({event, step}) => {
    const {accountId = 'default'} = event.data

    const workflow = await step.run('load workflow from sanity', async () => {
      return sanityClient.fetch(
        `*[_type == "workflow" && trigger == "new-account" && accountId == "${accountId}"][0]{title, _id, _type, trigger, accountId, "actions": actions[]}`
      )
    })

    let shouldContinue = Boolean(workflow)

    while (shouldContinue && workflow.actions.length > 0) {
      const action = workflow.actions.shift()
      switch (action._type) {
        case 'delay':
          await step.sleep(`${action.duration}${action.unit}`)
          break
        case 'sendEmail':
          const sendToAddress = event.data[action.to]
          await step.run('send email', async () => {
            return sendEmail({
              to: sendToAddress,
              template: action.template,
              accountId,
            })
          })
          break
        case 'filter':
          shouldContinue = await step.run('filter', async () => {
            return (
              action.field &&
              event.data[action.field as string] === action.value
            )
          })
          break
        case 'slack':
          await step.run('send slack message', async () => {
            return postInSlack({
              channelId: action.channel,
              accountId,
              notificationType: event.data.status,
            })
          })
          break
        default:
          shouldContinue = false
      }
    }

    return {status: 'complete', workflow: workflow.title, accountId}
  },
)

----------------------------------------

TITLE: Implementing Top-Level Async Logic in Inngest TypeScript SDK v3.0
DESCRIPTION: Demonstrates the new capability to use top-level await keywords outside of steps in v3.0. Shows how to create a function that handles user signup events with async database operations, highlighting the improved promise handling while maintaining deterministic execution.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "signup-flow", name: "Signup flow" },
  { event: "app/user.created" },
  async ({ event, step }) => {
    // Top-level awaits are now allowed.  Note that, for determinism, it's
    // still recommended to use `step.run` to handle async logic.  step.run
    // runs code exactly once and retries on error.
    await db.connect();
  }

----------------------------------------

TITLE: Implementing Event-Level Idempotency
DESCRIPTION: Demonstrates how to set unique event IDs to prevent duplicate event processing across multiple languages. Uses a cart checkout example to show idempotency key implementation.

LANGUAGE: typescript
CODE:
const cartId = 'CGo5Q5ekAxilN92d27asEoDO';
await inngest.send({
  id: `checkout-completed-${cartId}`, // <-- This is the idempotency key
  name: 'cart/checkout.completed',
  data: {
    email: 'taylor@example.com',
    cartId: cartId
  }
})

LANGUAGE: go
CODE:
cart_id := "CGo5Q5ekAxilN92d27asEoDO"
await inngest.Send(context.Background(), inngest.Event{
  ID: fmt.Sprintf("checkout-completed-%s", cart_id), // <-- This is the idempotency key
  Name: "cart/checkout.completed",
  Data: map[string]any{"email": "taylor@example.com", "cart_id": cart_id},
})

LANGUAGE: python
CODE:
cart_id = 'CGo5Q5ekAxilN92d27asEoDO'
await inngest.send({
  id: f'checkout-completed-{cart_id}', // <-- This is the idempotency key
  name: 'cart/checkout.completed',
  data: {
    email: 'taylor@example.com',
    cart_id: cart_id
  }
})

----------------------------------------

TITLE: Using AgentKit for Single Model Call in Inngest Function
DESCRIPTION: Demonstrates how to use AgentKit to create an agent and run a single model call within an Inngest function. This example creates a writer agent using OpenAI's GPT-4 model.

LANGUAGE: typescript
CODE:
import { Agent, agenticOpenai as openai, createAgent } from "@inngest/agent-kit";
export default inngest.createFunction(
  { id: "summarize-contents" },
  { event: "app/ticket.created" },
  async ({ event, step }) => {

    // Create a new agent with a system prompt (you can add optional tools, too)
    const writer = createAgent({
      name: "writer",
      system: "You are an expert writer.  You write readable, concise, simple content.",
      model: openai({ model: "gpt-4o", step }),
    });

    // Run the agent with an input.  This automatically uses steps
    // to call your AI model.
    const { output } = await writer.run("Write a tweet on how AI works");
  }
);

----------------------------------------

TITLE: Implementing Site Indexing Functions in TypeScript
DESCRIPTION: Defines two Inngest functions for indexing pages: one for individual pages and another for entire sites. These functions crawl and store content in a vector database for later use in content generation.

LANGUAGE: typescript
CODE:
export const indexPage = client.createFunction(
  { id: "index-page" },
  { event: Events.INDEX_PAGE },
  async ({ event, step }) => {
    const { pageUrl } = event.data;

    const page = await step.run("get-page-content", async () => {
      return getPageContent(pageUrl);
    });

    await step.run("index-page", async () => {
      return saveToPinecone({ page });
    });
  }
);

export const indexSite = client.createFunction(
  { id: "index-site" },
  { event: Events.INDEX_SITE },
  async ({ event, step }) => {
    const { url } = event.data;

    const pages = await step.run("find-pages", async () => {
      return findPagesToIndex(url);
    });

    await Promise.all(
      pages.map(async (page) => {
        return step.invoke(`index-page-${page.url}`, {
          function: indexPage,
          data: {
            pageUrl: page.url,
          },
        });
      })
    );
  }
);

----------------------------------------

TITLE: Configuring and Running Workflow Engine in Inngest Function
DESCRIPTION: This snippet demonstrates how to set up a workflow Engine with actions and a loader, and use it within an Inngest Function. It shows the creation of the Engine instance and its usage in the function to run a workflow when a specific event is triggered.

LANGUAGE: tsx
CODE:
import { Engine, type Workflow } from "@inngest/workflow-kit";

import { inngest } from "./client";
import { actions } from "./actions";
import { loadWorkflowInstanceFromEvent } from "./loaders";

const workflowEngine = new Engine({
  actions: actionsWithHandlers,
  loader: (event) => {
    return loadWorkflowInstanceFromEvent(event);
  },
});

export default inngest.createFunction(
  { id: "blog-post-workflow" },
  { event: "blog-post.updated" },
  async ({ event, step }) => {
    // When `run` is called,
    //  the loader function is called with access to the event
    await workflowEngine.run({ event, step });
  }
);

----------------------------------------

TITLE: Creating AI Workflow Network with AgentKit in TypeScript
DESCRIPTION: Demonstrates how to use AgentKit to create a network of AI agents for classifying and summarizing blog posts. It showcases the Network class, agent configuration, and workflow orchestration using Inngest steps.

LANGUAGE: typescript
CODE:
import { Network, agenticOpenai } from "@inngest/agent-kit";
import { navigator, classifier, summarizer } from "./src/agents";

export default inngest.createFunction(
  { id: "summarizer" },
  { event: "api/summary.requested" },
  async ({ event, step }) => {

    // Create a network of agents with separate tasks and instructions to solve
    // a specific task, using Inngest steps for orchestration
    const network = new Network({
      agents: [navigator, classifier, summarizer],
      defaultModel: agenticOpenai({ model: "gpt-4o", step }),
    })

    const input = "Classify then summarize the latest 10 blog posts on https://www.deeplearning.ai/blog/"

    const result = await network.run(input, ({ network }) => {
      // Use an agent which figures out the specific agent to call based off of the network's history.
      return defaultRoutingAgent;
    });

  },
);

----------------------------------------

TITLE: Basic Welcome Email Function - Go
DESCRIPTION: Simple Inngest function in Go that sends a welcome email when a user signs up.

LANGUAGE: go
CODE:
import (
    "github.com/inngest/inngest-go"
)

inngestgo.CreateFunction(
    inngestgo.FunctionOpts{
        ID: "activation-email",
    },
    inngestgo.EventTrigger("app/user.created"),
    func(ctx *inngestgo.Context) (any, error) {
        if err := sendEmail(ctx.Event.Data["user"].(map[string]interface{})["email"].(string), "welcome"); err != nil {
            return err
        }
        return nil, nil
    },
)

----------------------------------------

TITLE: Using RetryAtError in Go Inngest Functions
DESCRIPTION: Demonstrates the use of RetryAtError in Go to control when Inngest should retry a function or step, useful for handling rate limits or temporary failures.

LANGUAGE: go
CODE:
import (
  "github.com/inngest/inngestgo"
  "github.com/inngest/inngestgo/step"
)

// Register the function
inngestgo.CreateFunction(
    &inngest.FunctionOptions{
        ID: "send-user-email",
    },
    inngest.FunctionTrigger{
        Event: "user/created",
    },
    SendUserEmail,
)

func SendUserEmail(ctx *inngest.FunctionContext) (any, error) {
    // Run a step which emails the user.  This automatically retries on error.
    // This returns the fully typed result of the lambda.
    result, err := step.Run(ctx, "on-user-created", func(ctx context.Context) (bool, error) {
      // Run any code inside a step.
      result, err := emails.Send(emails.Opts{})
      return result, err
    })
    if err != nil {
      // This step retried 5 times by default and permanently failed.
      // We delay the next retry attempt by 5 hours
      return nil, inngestgo.RetryAtError(err, time.Now().Add(5*time.Hour))
    }

    return nil, nil
}

----------------------------------------

TITLE: Implementing onFunctionRun Middleware in TypeScript
DESCRIPTION: Example implementation of Inngest middleware showing onFunctionRun lifecycle hooks including input transformation, execution phases, and output handling. Contains all possible lifecycle methods that can be implemented.

LANGUAGE: typescript
CODE:
const myMiddleware = new InngestMiddleware({
  name: "My Middleware",
  init({ client, fn }) {
    return {
      onFunctionRun({ ctx, fn, steps }) {
        return {
          transformInput({ ctx, fn, steps }) {
            // ...
            return {
              // All returns are optional
              ctx: { /* extend fn input */ },
              steps: steps.map(({ data }) => { /* transform step data */ })
            }
          },
          beforeMemoization() {
            // ...
          },
          afterMemoization() {
            // ...
          },
          beforeExecution() {
            // ...
          },
          afterExecution() {
            // ...
          },
          transformOutput({ result, step }) {
            // ...
            return {
              // All returns are optional
              result: {
                // Transform data before it goes back to Inngest
                data: transformData(result.data)
              }
            }
          },
          finished({ result }) {
            // ...
          },
          beforeResponse() {
            // ...
          },
        };
      },
    };
  },
});

----------------------------------------

TITLE: Using step.ai.infer() for OpenAI API Call in Inngest Function
DESCRIPTION: Shows how to use step.ai.infer() to make an API call to OpenAI within an Inngest function. This method offloads the inference request to Inngest's infrastructure and provides AI observability.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  { id: "summarize-contents" },
  { event: "app/ticket.created" },
  async ({ event, step }) => {

    // This calls your model's chat endpoint, adding AI observability,
    // metrics, datasets, and monitoring to your calls.
    const response = await step.ai.infer("call-openai", {
      model: step.ai.models.openai({ model: "gpt-4o" }),
      // body is the model request, which is strongly typed depending on the model
      body: {
        messages: [{
          role: "assistant",
          content: "Write instructions for improving short term memory",
        }],
      },
    });

    // The response is also strongly typed depending on the model.
    return response.choices;
  }
);

----------------------------------------

TITLE: Implementing Parallel Localized Content Generation
DESCRIPTION: Creates multiple parallel AI completion calls to generate localized content for different target languages while maintaining proper context and formatting.

LANGUAGE: typescript
CODE:
const localizedContent = targetLanguages.map(async (lang: string) =>\n    step.ai.wrap("generate-campaign-concept", createCompletion, {\n    model: model,\n    messages: [\n        {\n        role: "user",\n        content: `\n        ${MARKETING_EXPERT_PROMPT}\n        Adapt the following campaign concept for ${lang} market:\n        ${campaignConcept.choices[0].message.content}\n        \n        Consider cultural nuances, local preferences, and idiomatic expressions.\n        Provide:\n        1. Headline\n        2. Main copy\n        3. Call to action\n        4. Social media snippets (3 variations)\n        \n        Ensure the content feels native to ${lang} speakers while maintaining the core message and keeping technical terms in English.\n        `,\n        },\n    ],\n    temperature: model.includes("deepseek") ? 0.6 : 1,\n    })\n);\n\nawait Promise.all(localizedContent);

----------------------------------------

TITLE: Configuring Workflow Engine with TypeScript
DESCRIPTION: Demonstrates setting up a workflow engine with custom actions and a loader pattern for retrieving workflow configurations. Uses Inngest's durable functions for workflow management with features like automatic retries and waits.

LANGUAGE: typescript
CODE:
import { Engine } from "@inngest/workflow-kit";
import { inngest } from "./inngest/client";

const workflowEngine = new Engine({
  actions: [
    {
      kind: "add_ToC",
      name: "Add a Table of Content",
      description: "Add a Table of Content",
      handler: async ({ event, step, workflowAction }) => {
        await step.run("generate-toc-for-article", async () => {
          // await openai.chat.completions.create({ /* ... */ })
        });
      },
    },
  ],
  loader: async function (event) {
    return loadWorkflowFromDatabase(event)
  },
});

export default inngest.createFunction(
  { id: "blog-post-workflow" },
  [{ event: "blog-post.updated" }],
  async ({ event, step }) => {
    await workflowEngine.run({ event, step });
  }
);

----------------------------------------

TITLE: Implementing Product Image Import Function in Python
DESCRIPTION: Python implementation of an Inngest function that processes product images. Uses function decorators and async/await pattern to handle image copying to S3 and resizing operations.

LANGUAGE: python
CODE:
import inngest
from src.inngest.client import inngest_client

@inngest_client.create_function(
    # config
    id="import-product-images",
    # trigger (event or cron)
    trigger=inngest.Trigger(event="shop/product.imported")
)
async def import_product_images(ctx: inngest.Context, step: inngest.Step):
    # Here goes the business logic
    # By wrapping code in steps, it will be retried automatically on failure
    s3_urls = await step.run(
        "copy-images-to-s3",
        lambda: copy_all_images_to_s3(ctx.event.data["imageURLs"])
    )

    # You can include numerous steps in your function
    await step.run(
        "resize-images",
        lambda: resizer.bulk(
            urls=s3_urls,
            quality=0.9,
            max_width=1024
        )
    )

----------------------------------------

TITLE: Implementing Audio Processing Workflow in TypeScript
DESCRIPTION: TypeScript implementation of a long-running audio processing workflow using Inngest. The function handles audio transcoding, transcript generation, and AI summarization with persistent state management.

LANGUAGE: typescript
CODE:
import { inngest } from "./client";

export const processAudio = inngest.createFunction(
  { id: "process-audio" },
  { event: "podcast/audio.uploaded" },
  async ({ event, step }) => {
    const newFileURL = await step.run('transcode-audio', async () => {
      const filename = await download(event.data.url);
      return await transcode(filename, 'aac');
    });

    const transcript = await step.run('generate-transcript', async () => {
      // ... business logic omitted for sake of example ...
    });
    const summary = await step.run('summarize-with-ai', async () => {
      // ...
    });

    await step.run('save-to-db', async () => {
      // ...
    })
  }
);

----------------------------------------

TITLE: Implementing Function Chaining with Inngest in Python
DESCRIPTION: Demonstrates how to create two Inngest functions where one function (fn_2) invokes another (fn_1) and processes its output. The example shows function definition, trigger setup, and the invoke step implementation.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="fn-1",
    trigger=inngest.TriggerEvent(event="app/fn-1"),
)
async def fn_1(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    return "Hello!"

@inngest_client.create_function(
    fn_id="fn-2",
    trigger=inngest.TriggerEvent(event="app/fn-2"),
)
async def fn_2(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    output = await step.invoke(
        "invoke",
        function=fn_1,
    )

    # Prints "Hello!"
    print(output)

----------------------------------------

TITLE: Implementing Failure Handlers in TypeScript for Inngest Functions
DESCRIPTION: This snippet demonstrates two methods to handle function failures in Inngest using TypeScript. The first method uses an onFailure handler for a specific function, while the second listens for the inngest/function.failed system event to catch all failures in the Inngest environment.

LANGUAGE: typescript
CODE:
/* Option 1: give the inngest function an `onFailure` handler. */
inngest.createFunction(
  {
    id: "update-subscription",
    retries: 5,
    onFailure: async ({ event, error }) => {
      // if the subscription check fails after all retries, unsubscribe the user
      await unsubscribeUser(event.data.userId);
    },
  },
  { event: "user/subscription.check" },
  async ({ event }) => { /* ... */ },
);
/* Option 2: Listens for the [`inngest/function.failed`](/docs/reference/functions/handling-failures#the-inngest-function-failed-event) system event to catch all failures in the inngest environment*/
inngest.createFunction(
  { id: "handle-any-fn-failure" },
  { event: "inngest/function.failed" },
  async ({ event }) => { /* ... */ },
);

----------------------------------------

TITLE: Creating Dynamic Email Campaigns with Inngest in TypeScript
DESCRIPTION: Illustrates a complex workflow for creating customized email drip campaigns using Inngest's event-driven functions and waitForEvent() method.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  { id: "onboarding-email-drip-campaign" },
  { event: "app/account.created" },
  async ({ event, step }) => {
    await step.run("send-welcome-email", async () => {
      await sendEmail(event.user.email, "welcome");
    });

    const onboardingCompleted = await step.waitForEvent("wait-for-onboarding", {
      event: "app/onboarding.completed",
      timeout: "3d",
      match: "data.userId",
    });

    if (!onboardingCompleted) {
      await step.run("send-onboarding-nudge-email", async () => {
        await sendEmail(event.user.email, "onboarding_nudge");
      });
    } else {
      await step.run("send-tips-email", async () => {
        await sendEmail(event.user.email, "new_user_tips");
      });
    }
  }
);

----------------------------------------

TITLE: Multi-Step Email Sequence - TypeScript
DESCRIPTION: Enhanced function that sends a welcome email and conditionally sends a reminder if no post is created within 24 hours.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  { id: "activation-email" },
  { event: "app/user.created" },
  async ({ event, step }) => {
    await step.run("send-welcome-email", async () => {
      return await sendEmail({ email: event.user.email, template: "welcome" });
    });

    const postCreated = await step.waitForEvent("wait-for-post-creation", {
      event: "app/post.created",
      match: "data.user.id",
      timeout: "24h",
    });

    if (!postCreated) {
      await step.run("send-reminder-email", async () => {
        return await sendEmail({
          email: event.user.email,
          template: "reminder",
        });
      });
    }
  }
);

----------------------------------------

TITLE: Advanced Event Matching for AI-Powered Blog Post Generation with Inngest
DESCRIPTION: Demonstrates a complex AI-driven workflow using Inngest's waitForEvent() with advanced event matching to generate and select blog post topics.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  { id: "generate-blog-post-with-ai" },
  { event: "ai/post.generator.requested" },
  async ({ event, step }) => {
    const generatedTopics = await step.run("generate-topic-ideas", async () => {
      const completion = await openai.createCompletion({
        model: "text-davinci-003",
        prompt: helpers.topicIdeaPromptWrapper(event.data.prompt),
        n: 3,
      });
      return {
        completionId: completion.data.id,
        topics: completion.data.choices,
      };
    });

    await step.run("send-user-topics", () => {
      pusher.sendToUser(event.data.userId, "topics_generated", {
        sessionId: event.data.sessionId,
        completionId: generatedTopics.completionId,
        topics: generatedTopics.topics,
      });
    });

    const topicSelected = await step.waitForEvent("wait-for-topic-selection", {
      event: "ai/post.topic.selected",
      timeout: "5m",
      if: `async.data.completionId == "${generatedTopics.completionId}"`,
    });

    if (topicSelected) {
      await step.run("generate-blog-post-draft", async () => {
        const completion = await openai.createCompletion({
          model: "text-davinci-003",
          prompt: helpers.blogPostPromptWrapper(topicSelected.data.prompt),
        });
        await blog.saveDraft(completion.data.choices[0]);
      });
    }
  }
);

----------------------------------------

TITLE: Defining Public Workflow Actions in TypeScript
DESCRIPTION: Demonstrates how to define public workflow actions that will be exposed to the frontend. Uses PublicEngineAction type to specify action metadata including kind, name, and description.

LANGUAGE: typescript
CODE:
import { type PublicEngineAction } from "@inngest/workflow-kit";

export const actionsDefinition: PublicEngineAction[] = [
  {
    kind: "grammar_review",
    name: "Perform a grammar review",
    description: "Use OpenAI for grammar fixes",
  },
];

----------------------------------------

TITLE: Using step.ai.wrap() with Vercel AI SDK and JSON Serializable Arguments
DESCRIPTION: Shows how to use step.ai.wrap() with the Vercel AI SDK, ensuring that arguments are JSON serializable for easier editing and rerunning of steps in the dev server.

LANGUAGE: typescript
CODE:
import { generateText as vercelGenerateText } from "ai";
import { openai as vercelOpenAI } from "@ai-sdk/openai";

export const vercelWrapGenerateText = inngest.createFunction(
  { id: "vercel-wrap-generate-text" },
  { event: "vercel/wrap.generate.text" },
  async ({ event, step }) => {
    //
    // Will work but you will not be able to edit the prompt and rerun the step in the dev server.
    await step.ai.wrap(
      "vercel-openai-generateText",
      vercelGenerateText,
      {
        model: vercelOpenAI("gpt-4o-mini"),
        prompt: "Write a haiku about recursion in programming.",
      },
    );

    //
    // Will work and you will be able to edit the prompt and rerun the step in the dev server because
    // the arguments to step.ai.wrap are JSON serializable.
    const args = {
      model: "gpt-4o-mini",
      prompt: "Write a haiku about recursion in programming.",
    };

    const gen = ({ model, prompt }: { model: string; prompt: string }) =>
      vercelGenerateText({
        model: vercelOpenAI(model),
        prompt,
      });

    await step.ai.wrap("using-vercel-ai", gen, args);
  },
);

----------------------------------------

TITLE: Implementing Scheduled Functions with Timezone Support in Go
DESCRIPTION: This snippet demonstrates creating a scheduled function using Inngest in Go. It sets up a weekly digest function that runs at a specific time in the Paris timezone, loads users from a database, and implements a fan-out pattern for processing.

LANGUAGE: go
CODE:
package main

import (
	"context"

	"github.com/inngest/inngest-go"
	"github.com/inngest/inngest-go/step"
)

func init() {
	// This weekly digest function will run at 12:00pm on Friday in the Paris timezone
	inngestgo.CreateFunction(
		inngestgo.FunctionOpts{ID: "prepare-weekly-digest", Name: "Prepare Weekly Digest"},
		inngestgo.CronTrigger("TZ=Europe/Paris 0 12 * * 5"),
		func(ctx context.Context, input inngestgo.Input[any]) (any, error) {
			// Load all the users from your database:
			users, err := step.Run("load-users", func() ([]*User, error) {
				return loadUsers()
			})
			if err != nil {
				return nil, err
			}

			// 💡 Since we want to send a weekly digest to each one of these users
			// it may take a long time to iterate through each user and send an email.

			// Instead, we'll use this scheduled function to send an event to Inngest
			// for each user then handle the actual sending of the email in a separate
			// function triggered by that event.

			// ✨ This is known as a "fan-out" pattern ✨

			// 1️⃣ First, we'll create an event object for every user return in the query:
			events := make([]inngestgo.Event, len(users))
			for i, user := range users {
				events[i] = inngestgo.Event{
					Name: "app/send.weekly.digest",
					Data: map[string]interface{}{
						"user_id": user.ID,
						"email":   user.Email,
					},
				}
			}

			// 2️⃣ Now, we'll send all events in a single batch:
			err = step.SendEvent("send-digest-events", events)
			if err != nil {
				return nil, err
			}

			// This function can now quickly finish and the rest of the logic will
			// be handled in the function below ⬇️
			return nil, nil
		},
	)

	// This is a regular Inngest function that will send the actual email for
	// every event that is received (see the above function's inngest.send())

	// Since we are "fanning out" with events, these functions can all run in parallel
	inngestgo.CreateFunction(
		inngestgo.FunctionOpts{ID: "send-weekly-digest-email"},
		inngestgo.EventTrigger("app/send.weekly.digest", nil),
		func(ctx context.Context, input inngestgo.Input) (any, error) {
			// 3️⃣ We can now grab the email and user id from the event payload
			email := input.Event.Data["email"].(string)
			userID := input.Event.Data["user_id"].(string)

			// 4️⃣ Finally, we send the email itself:
			err := email.Send("weekly_digest", email, userID)
			if err != nil {
				return nil, err
			}

			// 🎇 That's it! - We've used two functions to reliably perform a scheduled
			// task for a large list of users!
			return nil, nil
		},
	)
}

----------------------------------------

TITLE: Complex Event Handling with waitForEvent
DESCRIPTION: Shows how to use waitForEvent with TypeScript for complex event workflows, including timeout handling and event matching.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  { id: "onboarding-drip-campaign" },
  { event: "user/new.signup" },
  async ({ event, step }) => {
    await step.run("send-welcome-email", async () => {
      return await email.send("welcome", event.data.email);
    });

    const accountSetupCompleted = await step.waitForEvent(
      "wait-for-setup-complete",
      {
        event: "user/account.setup.completed",
        timeout: "2d",
        match: "data.user_id",
      }
    );

    if (!accountSetupCompleted) {
      await step.run("send-setup-account-guide", async () => {
        return await email.send("account_setup_guide", event.data.email);
      });
    }
  }
);

----------------------------------------

TITLE: Initializing Writer Pipeline Function in TypeScript
DESCRIPTION: Defines the main writer pipeline function using Inngest, which orchestrates the entire content generation process including indexing, outline creation, and article writing.

LANGUAGE: typescript
CODE:
export const writerPipeline = client.createFunction(
  { id: "writer-pipeline" },
  { event: Events.WRITER_PIPELINE },
  async ({ event, step }) => {
    const { keywords, url, targetAudience } = event.data;

    // Index the blog | Write blog post outlines
    // Write the blog post
    // Publish the blog post
    // Send notifications
  }
);

----------------------------------------

TITLE: Configuring Event Batching in Inngest (TypeScript)
DESCRIPTION: Demonstrates how to set up event batching for an Inngest function in TypeScript. It includes configuration for batch size, timeout, and optional key-based batching.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  {
    id: "record-api-calls",
    batchEvents: {
      maxSize: 100,
      timeout: "5s",
      key: "event.data.user_id", // Optional: batch events by user ID
    },
  },
  { event: "log/api.call" },
  async ({ events, step }) => {
    // NOTE: Use the `events` argument, which is an array of event payloads
    const attrs = events.map((evt) => {
      return {
        user_id: evt.data.user_id,
        endpoint: evt.data.endpoint,
        timestamp: toDateTime(evt.ts),
      };
    });

    const result = await step.run("record-data-to-db", async () => {
      return db.bulkWrite(attrs);
    });

    return { success: true, recorded: result.length };
  }
);

----------------------------------------

TITLE: Implementing Workflow Action Handlers with OpenAI Integration
DESCRIPTION: Implementation of workflow action handlers using OpenAI for content generation and management tasks.

LANGUAGE: typescript
CODE:
import OpenAI from "openai";
import { type EngineAction, type WorkflowAction } from "@inngest/workflow-kit";

export const actions: EngineAction[] = [
  {
    ...actionsDefinition[0],
    handler: async ({ event, step, workflowAction }) => {
      const supabase = createClient();

      const blogPost = await step.run("load-blog-post", async () =>
        loadBlogPost(event.data.id)
      );

      const aiRevision = await step.run("add-toc-to-article", async () => {
        const openai = new OpenAI({
          apiKey: process.env["OPENAI_API_KEY"],
        });

        const prompt = `Please update the below markdown article...`;

        const response = await openai.chat.completions.create({
          model: process.env["OPENAI_MODEL"] || "gpt-3.5-turbo",
          messages: [
            {
              role: "system",
              content: "You are an AI that make text editing changes.",
            },
            {
              role: "user",
              content: prompt,
            },
          ],
        });

        return response.choices[0]?.message?.content || "";
      });

      await step.run("save-ai-revision", async () => {
        await supabase
          .from("blog_posts")
          .update({
            markdown_ai_revision: aiRevision,
            status: "under review",
          })
          .eq("id", event.data.id)
          .select("*");
      });
    },
  },
];

----------------------------------------

TITLE: Building Workflow Editor UI with React Components
DESCRIPTION: Shows how to implement a workflow editor UI using Inngest's prebuilt React components. Includes provider setup, editor configuration, and sidebar positioning with support for database integration.

LANGUAGE: jsx
CODE:
import * as React from 'react'
import {
  Provider,
  Editor,
  Sidebar
} from "@inngest/workflow-kit";
import { actions, trigger } from "@lib/inngest/workflow"

export default function Editor({ workflow }) {
  // `workflow` is loaded from the database
  return (
    <Provider
      workflow={workflow}
      trigger={trigger}
      availableActions={actions}
      onChange={(updatedWorkflow) => {
        // save to database...
      }}
    >
      <Editor>
        <Sidebar position="right"></Sidebar>
      </Editor>
    </Provider>;
  )
}

----------------------------------------

TITLE: Implementing Throttling for Multi-tenant AI Workflows in Python
DESCRIPTION: This code snippet demonstrates how to use Inngest to create a function with throttling for multi-tenant AI workflows. It includes configuration for limiting invocations per user and shows the structure of an AI workflow with multiple steps.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="import_contacts",
    trigger=inngest.TriggerEvent(event="user/process-contacts"),
    throttle=Throttle(
    	key="event.data.user_id",
       limit=10,
       period=datetime.timedelta(seconds=60),
     ),
)
async def fn(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    contacts = await step.run("load_contacts", load_contacts)

    sanitized_contacts = await step.run(
"sanitize_contacts",
sanitize_contacts,
contacts
    )

    await step.run("embed_contacts", embed_contacts, sanitized_contacts)


# load_contacts, sanitize_contacts, embed_contacts...

----------------------------------------

TITLE: Implementing Custom Logging Middleware in Inngest
DESCRIPTION: This example demonstrates how to create a custom logging middleware for Inngest. It shows how to integrate with existing loggers and customize logging behavior for Inngest functions.

LANGUAGE: typescript
CODE:
new InngestMiddleware({
  name: "Inngest: Logger",
  init({ client }) {
    return {
      onFunctionRun(arg) {
        const { ctx } = arg;
        const metadata = {
          runID: ctx.runId,
          eventName: ctx.event.name,
          functionName: arg.fn.name,
        };

        let providedLogger: Logger = client["logger"];
        // create a child logger if the provided logger has child logger implementation
        try {
          if ("child" in providedLogger) {
            type ChildLoggerFn = (
              metadata: Record<string, unknown>
            ) => Logger;
            providedLogger = (providedLogger.child as ChildLoggerFn)(metadata)
          }
        } catch (err) {
          console.error('failed to create "childLogger" with error: ', err);
          // no-op
        }
        const logger = new ProxyLogger(providedLogger);

        return {
          transformInput() {
            return {
              ctx: {
                /**
                 * The passed in logger from the user.
                 * Defaults to a console logger if not provided.
                 */
                logger,
              },
            };
          },
          beforeExecution() {
            logger.enable();
          },
          transformOutput({ result: { error } }) {
            if (error) {
              logger.error(error);
            }
          },
          async beforeResponse() {
            await logger.flush();
          },
        };
      },
    };
  },
})

----------------------------------------

TITLE: Implementing Durable Functions with Inngest in Python
DESCRIPTION: Demonstrates various ways to use step.run to create durable functions, including handling arguments, keyword arguments with functools.partial, and accessing scoped variables. The example shows how to create functions with different parameter patterns and integrate them with Inngest's durable execution framework.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="my_function",
    trigger=inngest.TriggerEvent(event="app/my_function"),
)
async def fn(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    # Pass a function to step.run
    await step.run("my_fn", my_fn)

    # Args are passed after the function
    await step.run("my_fn_with_args", my_fn_with_args, 1, "a")

    # Kwargs require functools.partial
    await step.run(
        "my_fn_with_args_and_kwargs",
        functools.partial(my_fn_with_args_and_kwargs, 1, b="a"),
    )

    # Defining functions like this gives you easy access to scoped variables
    def use_scoped_variable() -> None:
        print(ctx.event.data["user_id"])

    await step.run("use_scoped_variable", use_scoped_variable)

async def my_fn() -> None:
    pass

async def my_fn_with_args(a: int, b: str) -> None:
    pass

async def my_fn_with_args_and_kwargs(a: int, *, b: str) -> None:
    pass

----------------------------------------

TITLE: Managing Concurrency per User in Inngest
DESCRIPTION: Implementation of concurrency control to limit each user to a single concurrent API call using Inngest.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  {
    id: "ai-generate-summary",
    concurrency: {
      scope: "fn",
      key: "event.data.user_id",
      limit: 1,
    }
  },
  { event: "ai/summary.requested" },
  async ({ event, step }) => {
    /* call OpenAI */
  }
);

----------------------------------------

TITLE: Basic Step Implementation in TypeScript
DESCRIPTION: Demonstrates the basic structure of an Inngest step in TypeScript, showing how to use step.run() for executing discrete tasks.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  { id: "import-product-images" },
  { event: "shop/product.imported" },
  async ({ event, step }) => {
    const uploadedImageURLs = await step.run(
      "copy-images-to-s3",
      async () => {
        return copyAllImagesToS3(event.data.imageURLs);
    });
  }
);

----------------------------------------

TITLE: Adding Configuration to TypeScript Middleware
DESCRIPTION: Shows how to create a configurable middleware in TypeScript by using a factory function that accepts options and returns the middleware instance.

LANGUAGE: typescript
CODE:
export const createMyMiddleware = (logEventOutput: string) => {
  return new InngestMiddleware({
    name: "My Middleware",
    init() {
      return {
        onFunctionRun({ ctx, fn, steps }) {
          if (ctx.event.name === logEventOutput) {
            return {
              transformOutput({ result, step }) {
                console.log(
                  `${logEventOutput} output: ${JSON.stringify(result)}`
                );
              },
            };
          }

          return {};
        },
      };
    },
  });
};

----------------------------------------

TITLE: Basic Concurrency Configuration
DESCRIPTION: Demonstrates how to set a basic concurrency limit on a function to control the maximum number of concurrent step executions. The limit is set to 10 concurrent steps.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  {
    id: "generate-ai-summary",
    concurrency: 10,
  },
  { event: "ai/summary.requested" },
  async ({ event, step }) => {
    // Your function handler here
  }
);

LANGUAGE: go
CODE:
inngest.CreateFunction(
  &inngestgo.FunctionOpts{
    Name: "generate-ai-summary",
    Concurrency: []inngest.Concurrency{
      {
        Limit: 10,
      }
    },
  },
  inngestgo.EventTrigger("ai/summary.requested", nil),
  func(ctx context.Context, input inngestgo.Input) (any, error) {
    // Your function handler here
    return nil, nil
  },
)

LANGUAGE: python
CODE:
@inngest.create_function(
    fn_id="generate-ai-summary",
    concurrency=[
      inngest.Concurrency(
          limit=10,
      )
    ]
)
async def first_function(event, step):
    # Your function handler here
    pass

----------------------------------------

TITLE: Adding Configuration to Python Middleware
DESCRIPTION: Demonstrates how to add configuration options to Python middleware using the Factory pattern with a factory class method.

LANGUAGE: python
CODE:
import inngest

class MyMiddleware(inngest.Middleware):
    def __init__(
        self,
        client: inngest.Inngest,
        raw_request: object,
    ) -> None:
        #  ...

    @classmethod
    def factory(
        cls,
        secret_key: typing.Union[bytes, str],
    ) -> typing.Callable[[inngest.Inngest, object], MyMiddleware]:
        def _factory(
            client: inngest.Inngest,
            raw_request: object,
        ) -> MyMiddleware:
            return cls(
                client,
                raw_request,
                secret_key,
            )

        return _factory

    async def before_send_events( self, events: list[inngest.Event]) -> None:
        # called before an event is sent from within a Function or Step
        print(f"Sending {len(events)} events")

    async def after_send_events(self, result: inngest.SendEventsResult) -> None:
        # called after an event is sent from within a Function or Step
        print("Done sending events")

----------------------------------------

TITLE: Creating Inngest Client in App Router
DESCRIPTION: Code to create an Inngest client in Next.js App Router.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";

// Create a client to send and receive events
export const inngest = new Inngest({ id: "my-app" });

----------------------------------------

TITLE: Using step.ai.wrap for AI SDK Integration in TypeScript
DESCRIPTION: Shows how to use the step.ai.wrap API to integrate an existing AI SDK (in this case, Vercel's AI SDK) with Inngest's steps and AI observability features. This example demonstrates wrapping the generateText function for enhanced monitoring and reliability.

LANGUAGE: typescript
CODE:
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

export default inngest.createFunction(
  { id: "summarize-contents" },
  { event: "app/ticket.created" },
  async ({ event, step }) => {

    // This calls `generateText` with the given arguments, adding AI observability,
    // metrics, datasets, and monitoring to your calls.
    const { text } = await step.ai.wrap("using-vercel-ai", generateText, {
      model: openai("gpt-4-turbo"),
      prompt: "What is love?"
    });

  }
);

----------------------------------------

TITLE: Implementing Cancellable Reminder Function in TypeScript
DESCRIPTION: TypeScript implementation of a cancellable reminder function using Inngest. Demonstrates event-based cancellation with sleep and notification steps.

LANGUAGE: typescript
CODE:
const scheduleReminder = inngest.createFunction(
  {
    id: "schedule-reminder",
    cancelOn: [{ event: "tasks/deleted", if: "event.data.id == async.data.id" }],
  }
  { event: "tasks/reminder.created" },
  async ({ event, step }) => {
    // Step 1
    await step.sleepUntil('sleep-until-remind-at-time', event.data.remindAt);
    // Step 2
    await step.run('send-reminder-push', async ({}) => {
      await pushNotificationService.push(event.data.userId, event.data.reminderBody)
    })
  }
  // ...
);

----------------------------------------

TITLE: Implementing Prisma Middleware in Inngest
DESCRIPTION: This example shows how to create middleware that adds a Prisma client to all Inngest functions. It demonstrates using the onFunctionRun hook to inject the Prisma client into the function context.

LANGUAGE: typescript
CODE:
import { PrismaClient } from "@prisma/client";

const prismaMiddleware = new InngestMiddleware({
  name: "Prisma Middleware",
  init() {
    const prisma = new PrismaClient();

    return {
      onFunctionRun(ctx) {
        return {
          transformInput(ctx) {
            return {
              // Anything passed via `ctx` will be merged with the function's arguments
              ctx: {
                prisma,
              },
            };
          },
        };
      },
    };
  },
});

----------------------------------------

TITLE: Using step.ai.wrap() with Vercel AI SDK in Inngest Function
DESCRIPTION: Illustrates how to use step.ai.wrap() to integrate the Vercel AI SDK into an Inngest function. This method adds AI observability to existing AI SDK calls.

LANGUAGE: typescript
CODE:
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

export default inngest.createFunction(
  { id: "summarize-contents" },
  { event: "app/ticket.created" },
  async ({ event, step }) => {

    // This calls `generateText` with the given arguments, adding AI observability,
    // metrics, datasets, and monitoring to your calls.
    const { text } = await step.ai.wrap("using-vercel-ai", generateText, {
      model: openai("gpt-4-turbo"),
      prompt: "What is love?"
    });

  }
);

----------------------------------------

TITLE: Basic Step Execution in Inngest Function
DESCRIPTION: Example of creating an Inngest function that uses step.run() to process product images by copying them to S3 storage.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  { id: "import-product-images" },
  { event: "shop/product.imported" },
  async ({ event, step }) => {
    const uploadedImageURLs = await step.run("copy-images-to-s3", async () => {
      return copyAllImagesToS3(event.data.imageURLs);
    });
  }
);

----------------------------------------

TITLE: Implementing Custom Middleware in Inngest with Python
DESCRIPTION: This snippet demonstrates how to create a custom middleware class in Inngest. It shows methods for intercepting before and after event sending, and how to initialize the Inngest client with the custom middleware.

LANGUAGE: python
CODE:
class MyMiddleware(inngest.Middleware):
    async def before_send_events( self, events: list[inngest.Event]) -> None:
        print(f"Sending {len(events)} events")

    async def after_send_events(self, result: inngest.SendEventsResult) -> None:
        print("Done sending events")

inngest_client = inngest.Inngest(
    app_id="my_app",
    middleware=[MyMiddleware],
)

----------------------------------------

TITLE: Serving Inngest Functions with Next.js App Router
DESCRIPTION: This code snippet shows how to serve Inngest functions using the Next.js App Router. It imports the required modules and exports GET, POST, and PUT methods that serve the Inngest client and functions.

LANGUAGE: typescript
CODE:
import { serve } from "inngest/next";
import { client } from "../../inngest/client";
import { firstFunction, anotherFunction } from "../../inngest/functions";

export const { GET, POST, PUT } = serve({
  client: client,
  functions: [
    firstFunction,
    anotherFunction
  ]
});

----------------------------------------

TITLE: Implementing Cancellable Reminder Function in TypeScript
DESCRIPTION: TypeScript implementation of a cancellable reminder function using Inngest. Shows how to create a function that sleeps until a specified time and can be cancelled by a deletion event.

LANGUAGE: typescript
CODE:
const scheduleReminder = inngest.createFunction(
  {
    id: "schedule-reminder",
    cancelOn: [{
      event: "tasks/reminder.deleted",
      if: "async.data.reminderId == event.data.reminderId",
    }],
  }
  { event: "tasks/reminder.created" },
  async ({ event, step }) => {
    await step.sleepUntil('sleep-until-remind-at-time', event.data.remindAt);
    await step.run('send-reminder-push', async ({}) => {
      await pushNotificationService.push(event.data.userId, event.data.reminderBody)
    })
  }
);

----------------------------------------

TITLE: Implementing Cloudflare Workers AI Middleware in Inngest
DESCRIPTION: This snippet demonstrates how to create middleware for accessing Cloudflare Workers AI within Inngest functions. It uses the InngestMiddleware class to inject the AI object into the function context.

LANGUAGE: typescript
CODE:
import { InngestMiddleware } from "inngest";

interface Env {
  // If you set another name in wrangler.toml as the value for 'binding',
  // replace "AI" with the variable name you defined.
  AI: Ai;
}

export const cloudflareMiddleware = new InngestMiddleware({
  name: "Inngest: Workers AI",
  init: () => {
    return {
      onFunctionRun: ({ reqArgs }) => {
        const [ctx] = reqArgs as [Request, Env];
        const ai = ctx.env.AI

        return {
          transformInput: () => {
            return { ctx: { ai } };
          },
        };
      },
    };
  },
});

----------------------------------------

TITLE: Defining Inngest Workflow for OpenAI Linear Bot
DESCRIPTION: This snippet defines an Inngest workflow for the OpenAI Linear Bot. It creates a FunctionInvoker instance to handle the chat process and can be cancelled if a cancellation event is received.

LANGUAGE: typescript
CODE:
export const aibot = inngest.createFunction(
    {
        name: "OpenAI Linear Bot",
        cancelOn: [
            // Cancel this function if we receive a cancellation event with the same request ID can .
            // This prevents wasted execution and increased costs.
            {
                event: "api/chat.cancelled",
                if: "event.data.requestId == async.data.requestId",
            },
        ],
    },
    {event: "api/chat.started"},
    async ({event, step}) => {
        const invoker = new FunctionInvoker({
            openai,
            functions,
            requestId: event.data.requestId,
            });

        const messages = await invoker.start(event.data.messages as AIMessage[], step);
        return messages;
    }
);

----------------------------------------

TITLE: Implementing Product Image Import Function in Go
DESCRIPTION: Go implementation of an Inngest function for handling product image importing and processing. The function demonstrates error handling and step-based execution for copying images to S3 and resizing them.

LANGUAGE: go
CODE:
import (
  "github.com/inngest/inngestgo"
  "github.com/inngest/inngestgo/step"
)

inngestgo.CreateFunction(
  // config
  &inngestgo.FunctionOpts{
    ID: "import-product-images",
  },
  // trigger (event or cron)
  inngestgo.EventTrigger("shop/product.imported", nil),
  // handler function
  func(ctx context.Context, input inngestgo.Input) (any, error) {
    // Here goes the business logic
    // By wrapping code in steps, it will be retried automatically on failure
    s3Urls, err := step.Run("copy-images-to-s3", func() ([]string, error) {
      return copyAllImagesToS3(input.Event.Data["imageURLs"].([]string))
    })
    if err != nil {
      return nil, err
    }

    // You can include numerous steps in your function
    _, err = step.Run("resize-images", func() (any, error) {
      return nil, resizer.Bulk(ResizerOpts{
        URLs:     s3Urls,
        Quality:  0.9,
        MaxWidth: 1024,
      })
    })
    if err != nil {
      return nil, err
    }

    return nil, nil
  },
)

----------------------------------------

TITLE: Creating and Triggering Background Job in Go
DESCRIPTION: This snippet demonstrates how to create a background job function in Go that sends an email to new signups and performs future tasks. It also shows how to trigger the function by sending an event.

LANGUAGE: go
CODE:
import (
    "time"
    "github.com/inngest/inngest-go"
    "github.com/inngest/inngest-go/step"
)

inngestgo.CreateFunction(
    inngest.FunctionOpts{
        ID: "send-signup-email",
    },
    inngest.TriggerEvent("app/user.created"),
    func(ctx *inngest.Context) error {
        _, err := step.Run("send-the-user-a-signup-email", func(ctx *inngest.StepContext) (any, error) {
            return nil, sesclient.SendEmail(&ses.SendEmailInput{
                To:      ctx.Event.Data["user_email"].(string),
                Subject: "Welcome to Inngest!",
                Message: "...",
            })
        })
        if err != nil {
            return err, nil
        }

        step.Sleep("wait-for-the-future", 4 * time.Hour)

        _, err = step.Run("do-some-work-in-the-future", func(ctx *inngest.StepContext) error {
            // Code here runs in the future automatically.
            return nil, nil
        })
        return err, nil
    },
)

LANGUAGE: go
CODE:
_, err := inngestgo.Send(context.Background(), inngestgo.Event{
    Name: "app/user.created", // This matches the event used in `createFunction`
    Data: map[string]interface{}{
        "email": "test@example.com",
        // any data you want to send
    },
})

----------------------------------------

TITLE: Configuring Dependency Injection Middleware with TypeScript (v3.34.0+)
DESCRIPTION: Implementation of dependency injection using the built-in dependencyInjectionMiddleware to add an OpenAI client to all Inngest functions. This approach provides type inference for injected dependencies.

LANGUAGE: typescript
CODE:
import { dependencyInjectionMiddleware } from "inngest";
import OpenAI from 'openai';

const openai = new OpenAI();

const inngest = new Inngest({
  id: 'my-app',
  middleware: [
    dependencyInjectionMiddleware({ openai }),
  ],
});

----------------------------------------

TITLE: Simple Concurrency Limit in Inngest Function
DESCRIPTION: Demonstrates setting a basic concurrency limit of 10 concurrent executions for a function that syncs contacts.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  {
    id: "sync-contacts",
    concurrency: {
      limit: 10,
    },
  }
  // ...
);

----------------------------------------

TITLE: Initializing Inngest Client - Basic Configuration
DESCRIPTION: Basic setup of the Inngest client with configuration options for both v2 and v3 versions. The client is used to configure the application and enable function creation and event sending.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";

const inngest = new Inngest({
  id: "my-application",
});

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";

const inngest = new Inngest({
  name: "My application",
});

----------------------------------------

TITLE: Pausing Execution for a Given Time in TypeScript
DESCRIPTION: Demonstrates using step.sleep() to pause function execution for a specific duration in TypeScript. This example shows how to delay execution for 2 days after a user signup event.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  { id: "send-delayed-email" },
  { event: "app/user.signup" },
  async ({ event, step }) => {
    await step.sleep("wait-a-couple-of-days", "2d");
    // Do something else
  }
);

----------------------------------------

TITLE: Implementing Debounced Function Handler in Inngest
DESCRIPTION: Example of creating a debounced function in Inngest that handles webhook events. The function is configured to delay execution for 5 minutes after receiving events with matching account IDs, using the last received event as input data.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  {
    id: "handle-webhook",
    debounce: {
      key: "event.data.account_id",
      period: "5m",
    },
  },
  { event: "intercom/company.updated" },
  async ({ event, step }) => {
    // This function will only be scheduled 5m after events have stopped being received with the same
    // `event.data.account_id` field.
    //
    // `event` will be the last event in the series received.
  }
);

----------------------------------------

TITLE: Implementing Simple Rollbacks in Inngest Function (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how to implement simple rollbacks in an Inngest function. It includes a non-critical step and a critical step with a rollback mechanism.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "add-data" },
  { event: "app/row.data.added" },
  async ({ event, step }) => {
    // ignore the error - this step is fine if it fails
    await step
      .run("non-critical-step", () => {
        return updateMetric();
      })
      .catch();

    // Add a rollback to a step
    await step
      .run("create-row", async () => {
        const row = await createRow(event.data.rowId);
        await addDetail(event.data.entry);
      })
      .catch((err) =>
        step.run("rollback-row-creation", async () => {
          await removeRow(event.data.rowId);
        }),
      );
  },
);

----------------------------------------

TITLE: Waiting for Events in Go with Inngest
DESCRIPTION: Demonstrates how to use step.waitForEvent() in Go to pause function execution until a specific event is received, with timeout and conditional matching options.

LANGUAGE: go
CODE:
func AccountCreated(ctx context.Context, input inngestgo.Input[AccountCreatedEvent]) (any, error) {
  opened, err = step.waitForEvent(ctx, "wait-for-open", opts.WaitForEventOpts{
      Event: "email/mail.opened",
      If:	inngestgo.StrPtr(fmt.Sprintf("async.data.id == %s", strconv.Quote("my-id"))),
      Timeout: 24 * time.Hour,
  })

  if err == step.ErrEventNotReceived {
		step.Run(ctx, "follow-up-email", func(ctx context.Context) (any, error) {
			// ...
			return true, nil
		})
		return nil, nil
	}

  // ...

  return nil, nil
}

----------------------------------------

TITLE: Installing and Configuring Encryption Middleware in TypeScript
DESCRIPTION: Shows how to install the @inngest/middleware-encryption package and configure it with Inngest in TypeScript. It includes initializing the middleware and using it with the Inngest client.

LANGUAGE: typescript
CODE:
import { encryptionMiddleware } from "@inngest/middleware-encryption";

// Initialize the middleware
const mw = encryptionMiddleware({
  // your encryption key string should not be hard coded
  key: process.env.MY_ENCRYPTION_KEY,
});

// Use the middleware with Inngest
const inngest = new Inngest({
  id: "my-app",
  middleware: [mw],
});

----------------------------------------

TITLE: Configuring Throttling in Go
DESCRIPTION: Implementation of throttling configuration for Inngest functions in Go. Configures throttling with a limit of 1 execution per 5 seconds, with a burst capacity of 2, keyed by user_id.

LANGUAGE: go
CODE:
inngestgo.CreateFunction(
  &inngestgo.FunctionOpts{
    ID: "unique-function-id",
    Throttle: &inngestgo.Throttle{
      Limit: 1,
      Period: 5 * time.Second,
      Key: inngestgo.StrPtr("event.data.user_id"),
      Burst: 2,
    },
  },
  inngestgo.EventTrigger("ai/summary.requested", nil),
  func(ctx context.Context, input inngestgo.Input) (any, error) {
    // This function will be throttled to 1 run per 5 seconds for a given event payload with matching user_id
    return nil, nil
  },
)

----------------------------------------

TITLE: Creating Type-Safe Event Handler Function
DESCRIPTION: Demonstrates creating a function that handles user signup events with full type safety for event data access.

LANGUAGE: typescript
CODE:
import { inngest } from "./client";

export default inngest.createFunction(
  { id: "send-welcome-email" },
  { event: "user/new.signup" },
  async ({ event }) => {
    return await email.send("welcome", event.data.email);
  }
);

----------------------------------------

TITLE: Sending Inngest Event with All Fields
DESCRIPTION: Example showing how to send an Inngest event with both required and optional fields including name, data, user object, timestamp, and version information. The event represents a user signup action via Google authentication.

LANGUAGE: javascript
CODE:
await inngest.send({
  name: "api/user.signup",
  data: { method: "google_auth" },
  user: { id: "1JDydig4HHBJCiaGu2a9" },
  ts: new Date().valueOf(), // = 1663702869305
  v: "2022-09-20.1",
})

----------------------------------------

TITLE: Loop Example in TypeScript
DESCRIPTION: Demonstrates an Inngest function that imports products from a Shopify store, iterating over all pages and combining products into a single array. It shows how to properly structure loops and handle non-deterministic logic within steps.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  { id: "shopify-product-import"},
  { event: "shopify/import.requested" },
  async ({ event, step }) => {
    const allProducts = []
    let cursor = null
    let hasMore = true

    // Use the event's "data" to pass key info like IDs
    // Note: in this example is deterministic across multiple requests
    // If the returned results must stay in the same order, wrap the db call in step.run()
    const session = await database.getShopifySession(event.data.storeId)

    while (hasMore) {
      const page = await step.run(`fetch-products-${pageNumber}`, async () => {
        return await shopify.rest.Product.all({
          session,
          since_id: cursor,
        })
      })
      // Combine all of the data into a single list
      allProducts.push(...page.products)
      if (page.products.length === 50) {
        cursor = page.products[49].id
      } else {
        hasMore = false
      }
    }

    // Now we have the entire list of products within allProducts!
  }
)

----------------------------------------

TITLE: Handling Step Errors in TypeScript Inngest Functions
DESCRIPTION: Demonstrates how to handle StepError in TypeScript Inngest functions, allowing for error recovery or alternative actions after step failures.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "send-weather-forecast" },
  { event: "weather/forecast.requested" },
  async ({ event, step }) => {
    let data;

    try {
      data = await step.run('get-public-weather-data', async () => {
        return await fetch('https://api.weather.com/data');
      });
    } catch (err) {
      // err will be an instance of StepError
      // Handle the error by recovering with a different step
      data = await step.run('use-backup-weather-api', async () => {
        return await fetch('https://api.stormwaters.com/data');
      });
    }
    // ...
  }
);

----------------------------------------

TITLE: Slack Notification Failure Handler in TypeScript
DESCRIPTION: Implementation of a failure handler that sends notifications to Slack when a Shopify product sync function fails. Uses the Slack Web API to post messages to a specific channel.

LANGUAGE: typescript
CODE:
import { client } from "@slack/web-api";
import { inngest } from "./client";

export default inngest.createFunction(
  {
    id: "sync-shopify-products",
    // Your handler should be an async function:
    onFailure: async ({ error, event }) => {
      const originalEvent = event.data.event;

      // Post a message to the Engineering team's alerts channel in Slack:
      const result = await client.chat.postMessage({
        token: process.env.SLACK_TOKEN,
        channel: "C12345",
        blocks: [
          {
            type: "section",
            text: {
              type: "mrkdwn",
              text: `Sync Shopify function failed for Store ${
                originalEvent.storeId
              }: ${error.toString()}`,
            },
          },
        ],
      });

      return result;
    },
  },
  { event: "shop/product_sync.requested" },
  async ({ event, step, runId }) => {
    // This is the main function handler's code
    const products = await step.run("fetch-products", async () => {
      const storeId = event.data.storeId;
      // The function might fail here or...
    });
    await step.run("save-products", async () => {
      // The function might fail here after the maximum number of retries
    });
  }
);

----------------------------------------

TITLE: Installing and Configuring Sentry Middleware for Inngest in Python
DESCRIPTION: This snippet demonstrates how to import and configure the SentryMiddleware in Python for use with Inngest. It includes initializing Sentry and adding the middleware to the Inngest client.

LANGUAGE: python
CODE:
import inngest
from inngest.experimental.sentry_middleware import SentryMiddleware

import sentry_sdk

# Initialize Sentry as usual wherever is appropriate
sentry_sdk.init(
    traces_sample_rate=1.0,
    profiles_sample_rate=1.0,
)

inngest_client = inngest.Inngest(
    app_id="my-app",
    middleware=[SentryMiddleware],
)

----------------------------------------

TITLE: Triggering Inngest Function from Fastify Route
DESCRIPTION: Creates a GET route in Fastify that sends an event to trigger the Inngest function.

LANGUAGE: typescript
CODE:
import Fastify from "fastify";
import { fastifyPlugin } from "inngest/fastify";
import { inngest, functions } from "./src/inngest"

const fastify = Fastify({
  logger: true,
});
fastify.register(fastifyPlugin, { client: inngest, functions, options: {} });

// Create a new route:
fastify.get("/api/hello", async function (request, reply) {
  await inngest.send({
    name: "test/hello.world",
    data: {
      email: "testUser@example.com",
    },
  });
  return { message: "Event sent!" };
})

fastify.listen({ port: 3000 }, function (err, address) {
  if (err) {
    fastify.log.error(err);
    process.exit(1);
  }
});

----------------------------------------

TITLE: Invoking Inngest Functions with step.invoke() in TypeScript
DESCRIPTION: Demonstrates how to create and invoke Inngest functions using step.invoke(). It shows the creation of a computeSquare function and its invocation within a mainFunction.

LANGUAGE: typescript
CODE:
// Some function we'll call
const computeSquare = inngest.createFunction(
  { id: "compute-square" },
  { event: "calculate/square" },
  async ({ event }) => {
    return { result: event.data.number * event.data.number }; // Result typed as { result: number }
  }
);

// In this function, we'll call `computeSquare`
const mainFunction = inngest.createFunction(
  { id: "main-function" },
  { event: "main/event" },
  async ({ step }) => {
    const square = await step.invoke("compute-square-value", {
      function: computeSquare,
      data: { number: 4 }, // input data is typed, requiring input if it's needed
    });

    return `Square of 4 is ${square.result}.`; // square.result is typed as number
  }
);

----------------------------------------

TITLE: Sending User Signup Event in TypeScript
DESCRIPTION: This code snippet demonstrates how to send a user signup event to Inngest using TypeScript. It handles a POST request to the /signup route, creates a user, and sends an event to Inngest with user data.

LANGUAGE: typescript
CODE:
import { inngest } from '../inngest/client';

export async function POST(request: Request) {
  // NOTE - this code is simplified for the of the example:
  const { email, password } = await request.json();
  const user = await createUser({ email, password });
  await createSession(user.id);

  // Send an event to Inngest
  await inngest.send({
    name: 'app/user.signup',
    data: {
      user: {
        id: user.id,
        email: user.email,
      },
    },
  });

  redirect('https://myapp.com/dashboard');
}

----------------------------------------

TITLE: Configuring Middleware in TypeScript for Inngest Client and Function
DESCRIPTION: This snippet demonstrates how to register middleware at both the Inngest client and function levels in TypeScript. It shows the order of middleware execution and how to create a function with specific middleware.

LANGUAGE: typescript
CODE:
const inngest = new Inngest({
  id: "my-app",
  middleware: [
    logMiddleware, // This is executed first
    errorMiddleware, // This is executed second
  ],
});

inngest.createFunction(
  {
    id: "example",
    middleware: [
      dbSetupMiddleware, // This is executed third
      datadogMiddleware, // This is executed fourth
    ],
  },
  { event: "test" },
  async () => {
    // ...
  }
);

----------------------------------------

TITLE: Customizing Retry Times in Inngest Functions
DESCRIPTION: This example demonstrates how to customize retry times in Inngest functions based on external API responses, using the RetryAfterError to specify when the function should be retried.

LANGUAGE: typescript
CODE:
import { RetryAfterError } from 'inngest';

inngest.createFunction(
  { id: "send-welcome-notification" },
  { event: "app/user.created" },
  async ({ event, step }) => {

    const msg = await step.run('send-message', async () => {
      const { success, retryAfter, message } = await twilio.messages.create({
        to: event.data.user.phoneNumber,
        body: "Welcome to our service!",
      });

      if (!success && retryAfter) {
        throw new RetryAfterError("Hit Twilio rate limit", retryAfter);
      }
      
      return { message };
    });
    
  },
);

LANGUAGE: go
CODE:
inngestgo.CreateFunction(
	inngestgo.FunctionOpts{ID: "send-welcome-notification"},
	inngestgo.EventTrigger("user.created", nil),
	func(ctx context.Context, input inngestgo.Input[SignedUpEvent]) (any, error) {
		success, retryAfter, err := twilio.Messages.Create(twilio.MessageOpts{
			To:   input.Event.Data.User.PhoneNumber,
			Body: "Welcome to our service!",
		})
		if err != nil {
			return nil, err
		}

		if !success && retryAfter != nil {
			return nil, inngestgo.RetryAtError(fmt.Errorf("Hit Twilio rate limit"), *retryAfter)
		}

		return nil, nil
	}
)

LANGUAGE: python
CODE:
import inngest
from src.inngest.client import inngest_client

@inngest_client.create_function(
    fn_id="send-welcome-notification",
    trigger=inngest.TriggerEvent(event="user.created"),
)
def send_welcome_notification(ctx: inngest.Context, step: inngest.StepSync) -> None:
	success, retryAfter, err = twilio.Messages.Create(twilio.MessageOpts{
		To:   ctx.event.data["user"]["phoneNumber"],
		Body: "Welcome to our service!",
	})

	if not success and retryAfter is not None:
		raise inngest.RetryAfterError("Hit Twilio rate limit", retryAfter)

----------------------------------------

TITLE: Basic Inngest Connection Setup - TypeScript
DESCRIPTION: Demonstrates how to set up a basic connection to Inngest using TypeScript, including function creation and connection establishment.

LANGUAGE: typescript
CODE:
import { Inngest } from 'inngest'
import { connect } from 'inngest/connect';
import { ConnectionState } from 'inngest/components/connect/types';

const inngest = new Inngest({
  id: 'my-app'
});

const handleSignupFunction = inngest.createFunction(
  { id: 'handle-signup' },
  { event: 'user.created'}
  async ({ event, step }) => {
    console.log('Function called', event);
  }
);

(async () => {
  const connection = await connect({
    apps: [{ client: inngest, functions: [handleSignupFunction] }]
  });

  console.log('Worker: connected', connection);
})();

----------------------------------------

TITLE: Creating and Triggering Background Job in Python
DESCRIPTION: This snippet illustrates how to create a background job function in Python that sends an email to new signups and performs future tasks. It also demonstrates how to trigger the function by sending an event.

LANGUAGE: python
CODE:
import inngest

inngest_client = inngest.Inngest(
    app_id="my-app",
)

@inngest_client.create_function(
    fn_id="send-signup-email",
    trigger=inngest.TriggerEvent(event="app/user.created")
)
async def send_signup_email(ctx: inngest.Context, step: inngest.Step):
    async def send_email():
        await sesclient.send_email(
            to=ctx.event.data["user_email"],
            subject="Welcome to Inngest!",
            message="..."
        )

    await step.run("send-the-user-a-signup-email", send_email)

    await step.sleep_until("wait-for-the-future", "2023-02-01T16:30:00")

    async def future_work():
        # Code here runs in the future automatically
        pass

    await step.run("do-some-work-in-the-future", future_work)

LANGUAGE: python
CODE:
from src.inngest.client import inngest_client

await inngest_client.send(
    name="app/user.created",  # This matches the event used in `create_function`
    data={
        "email": "test@example.com",
        # any data you want to send
    }
)

----------------------------------------

TITLE: Implementing Cancellable Reminder Function in Python
DESCRIPTION: Python implementation of a cancellable reminder function using Inngest. Shows configuration of cancellation triggers and multi-step function execution.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="schedule-reminder",
    trigger=inngest.TriggerEvent(event="tasks/reminder.created"),
    cancel=[inngest.Cancel(
                event="tasks/deleted",
                if_exp="event.data.id == async.data.id"
            )],
)
async def fn(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    # Step 1
    await step.sleep_until(
        "sleep-until-remind-at-time",
         ctx.event.data["remind_at"],
    )

    # Step 2
    await step.run("send-reminder-push", send_reminder_push)



async def send_reminder_push() -> None:
    pass

----------------------------------------

TITLE: Using RetryAfterError in TypeScript Inngest Functions
DESCRIPTION: Demonstrates the use of RetryAfterError to control when Inngest should retry a function or step, useful for handling rate limits or temporary failures.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "send-welcome-sms" },
  { event: "app/user.created" },
  async ({ event, step }) => {
    const { success, retryAfter } = await twilio.messages.create({
      to: event.data.user.phoneNumber,
      body: "Welcome to our service!",
    });

    if (!success && retryAfter) {
      throw new RetryAfterError("Hit Twilio rate limit", retryAfter);
    }
  }
);

----------------------------------------

TITLE: Intercom Webhook Synchronization with Rate Limiting
DESCRIPTION: Implementation of rate-limited synchronization for Intercom company data. Includes fetching company data from Intercom and updating it in a database, with rate limiting of 1 execution per 4 hours per company.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  {
    id: "synchronize-data",
    rateLimit: {
      key: "event.data.company_id",
      limit: 1,
      period: "4h",
    },
  },
  { event: "intercom/company.updated" },
  async ({ event, step }) => {
    const company = await step.run(
      "fetch-latest-company-data-from-intercom",
      async () => {
        return await client.companies.find({
          companyId: event.data.company_id,
        });
      }
    );

    await step.run("update-company-data-in-database", async () => {
      return await database.companies.upsert({ id: company.id }, company);
    });
  }
);

----------------------------------------

TITLE: Implementing Paginated Product Import with Inngest
DESCRIPTION: Shows how to create an Inngest function that iterates through paginated Shopify product data, combining results into a single array with automatic retries.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  { id: "shopify-product-import", concurrency: 10 },
  { event: "shopify/import.requested" },
  async ({ event, step }) => {
    const allProducts = []
    let cursor = null
    let hasMore = true

    // Use the event's "data" to pass key info like IDs
    const session = await database.getShopifySession(event.data.storeId)

    while (hasMore) {
      // step.run will be retried automatically if the request fails
      const page = await step.run("fetch-products", async () => {
        return await shopify.rest.Product.all({
          session,
          since_id: cursor,
        })
      })
      // Combine all of the data into a single list
      allProducts.push(...page.products)
      if (page.products.length === 50) {
        cursor = page.products[49].id
      } else {
        hasMore = false
      }
    }

    // Now we have the entire list of products within allProducts!
  }
)

----------------------------------------

TITLE: Loop Example in Go
DESCRIPTION: Shows an Inngest function in Go that imports products from a Shopify store, iterating over all pages and combining products into a single array. It demonstrates how to properly structure loops and handle non-deterministic logic within steps.

LANGUAGE: go
CODE:
inngest.CreateFunction(
	"shopify-product-import",
	inngest.EventTrigger("shopify/import.requested"),
	func(ctx context.Context, event inngest.Event) error {
		var allProducts []Product
		var cursor *string
		hasMore := true

		// Use the event's "data" to pass key info like IDs
		// Note: in this example is deterministic across multiple requests
		// If the returned results must stay in the same order, wrap the db call in step.run()
		session, err := database.GetShopifySession(event.Data["storeId"].(string))
		if err != nil {
			return err
		}

		for hasMore {
			if page, err := step.Run(fmt.Sprintf("fetch-products-%v", cursor), func() error {
				return shopify.Product.All(&shopify.ProductListOptions{
					Session: session,
					SinceID: cursor,
				})
			}); err != nil {
				return err
			}

			// Combine all of the data into a single list
			allProducts = append(allProducts, page.Products...)

			if len(page.Products) == 50 {
				id := page.Products[49].ID
				cursor = &id
			} else {
				hasMore = false
			}
		}

		// Now we have the entire list of products within allProducts!
		return nil
	},
)

----------------------------------------

TITLE: Implementing Fallback Mechanism in Inngest Function (TypeScript)
DESCRIPTION: This snippet demonstrates how to create an Inngest function that attempts to generate an image using DALL-E, falling back to Midjourney if it fails. It also includes a step to notify the user of the result.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "generate-result" },
  { event: "prompt.created" },
  async ({ event, step }) => {
    // try one AI model, if it fails, try another
    let imageURL: string | null = null;
    let via: "dall-e" | "midjourney";

    try {
      imageURL = await step.run("generate-image-dall-e", () => {
        // open api call to generate image...
      });
      via = "dall-e";
    } catch (err) {
      imageURL = await step.run("generate-image-midjourney", () => {
        // midjourney call to generate image...
      });
      via = "midjourney";
    }

    await step.run("notify-user", () => {
      return pusher.trigger(event.data.channelID, "image-result", {
        imageURL,
        via,
      });
    });
  },
);

----------------------------------------

TITLE: Basic Rate Limiting Configuration in Inngest
DESCRIPTION: Demonstrates basic setup of rate limiting for an Inngest function using company ID as the limiting key. The function is limited to 1 execution per 4 hours per company ID.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  {
    id: "synchronize-data",
    rateLimit: {
      key: "event.data.company_id",
      limit: 1,
      period: "4h",
    },
  },
  { event: "intercom/company.updated" },
  async ({ event, step }) => {
    // This function will be rate limited
    // It will only run 1 once per 4 hours for a given event payload with matching company_id
  }
);

----------------------------------------

TITLE: Creating Function References with Inngest
DESCRIPTION: Demonstrates creating local and cross-app function references using referenceFunction, including type definitions and optional schema validation using Zod.

LANGUAGE: typescript
CODE:
// @/inngest/compute.ts
import { referenceFunction } from "inngest";
import { z } from "zod";
import { type computePi } from "@/inngest/computePi";

// Create a local reference to a function without importing dependencies
export const computePi = referenceFunction<typeof computePi>({
  functionId: "compute-pi",
});

// Create a reference to a function in another application
export const computeSquare = referenceFunction({
  appId: "my-python-app",
  functionId: "compute-square",
  // Schemas are optional, but provide types for your call if specified
  schemas: {
    data: z.object({
      number: z.number(),
    }),
    return: z.object({
      result: z.number(),
    }),
  },
});

----------------------------------------

TITLE: Example TypeScript Error JSON Output
DESCRIPTION: This JSON represents the serialized output of a NonRetriableError thrown in TypeScript, showing the structure of error information in Inngest.

LANGUAGE: json
CODE:
{
  "name": "NonRetriableError",
  "message": "Failed to import data",
  "stack": "NonRetriableError: Failed to import data\n    at V1InngestExecution.userFnToRun (/opt/render/project/src/build/inngest/ai.js:143:15) ..."
}

----------------------------------------

TITLE: Implementing Multi-Step Retries in Inngest Functions
DESCRIPTION: This code demonstrates how to implement retries in multi-step Inngest functions, where each step has its own set of retries and is executed independently.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "sync-systems" },
  { event: "auto/sync.request" },
  async ({ step }) => {
    // Can be retried up to 4 times
    const data = await step.run("get-data", async () => {
      return getDataFromExternalSource();
    });

    // Can also be retried up to 4 times
    await step.run("save-data", async () => {
      return db.syncs.insertOne(data);
    });
  },
);

LANGUAGE: go
CODE:
inngestgo.CreateFunction(
	inngestgo.FunctionOpts{ID: "sync-systems"},
	inngestgo.EventTrigger("auto/sync.request", nil),
	func(ctx context.Context, input inngestgo.Input[SyncRequestEvent]) (any, error) {
		// can be retried up to 4 times
		data, err := step.Run(ctx, "get-data", func(ctx context.Context) (any, error) {
			return getDataFromExternalSource()
		})
		if err != nil {
			return nil, err
		}

		// can also be retried up to 4 times
		_, err = step.Run(ctx, "save-data", func(ctx context.Context) (any, error) {
			return db.Syncs.InsertOne(data.(DataType))
		})
		if err != nil {
			return nil, err
		}

		return nil, nil
	},
)

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="sync-systems",
    trigger=inngest.TriggerEvent(event="auto/sync.request"),
)
def sync_systems(ctx: inngest.Context, step: inngest.StepSync) -> None:
    # Can be retried up to 4 times
    data = step.run("Get data", get_data_from_external_source)

    # Can also be retried up to 4 times
    step.run("Save data", db.syncs.insert_one, data)

----------------------------------------

TITLE: Configuring Throttling in TypeScript
DESCRIPTION: Implementation of throttling configuration for Inngest functions in TypeScript. Sets up throttling with a limit of 1 execution per 5 seconds, with a burst capacity of 2, keyed by user_id.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  {
    id: "unique-function-id",
    throttle: {
      limit: 1,
      period: "5s",
      burst: 2,
      key: "event.data.user_id",
    },
  }
  { event: "ai/summary.requested" },
  async ({ event, step }) => {
  }
);

----------------------------------------

TITLE: Rate Limited Email Notifications for Service Alerts
DESCRIPTION: Implementation of rate-limited email notifications for service alerts. Limits email sending to once per hour per user and service combination to prevent notification spam.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  {
    id: "send-check-failed-notification",
    rateLimit: {
      // Don't send duplicate emails to the same user for the same service over 1 hour
      key: `event.data.user_id + "-" + event.data.service_id`,
      limit: 1,
      period: "1h",
    },
  },
  { event: "service/check.failed" },
  async ({ event, step }) => {
    await step.run("send-alert-email", async () => {
      return await resend.emails.send({
        from: "notifications@myco.com",
        to: event.user.email,
        subject: `ALERT: ${event.data.issue}`,
        text: `Dear user, ...`,
      });
    });
  }
);

----------------------------------------

TITLE: Implementing Sleep Function in Inngest (TypeScript v3)
DESCRIPTION: Demonstrates various ways to use the step.sleep() function in Inngest v3, including Temporal.Duration, string formats, and milliseconds.

LANGUAGE: typescript
CODE:
// Sleep for 30 minutes
const thirtyMins = Temporal.Duration.from({ minutes: 5 });
await step.sleep("wait-with-temporal", thirtyMins);

await step.sleep("wait-with-string", "30m");
await step.sleep("wait-with-string-alt", "30 minutes");
await step.sleep("wait-with-ms", 30 * 60 * 1000);

----------------------------------------

TITLE: Defining Event Types with Zod Schema
DESCRIPTION: Implementation of event payload type definitions using Zod schema validation. Demonstrates how to define individual events and event maps with type safety.

LANGUAGE: typescript
CODE:
import { EventSchemas, Inngest, type LiteralZodEventSchema } from "inngest";
import { z } from "zod";

const productPurchasedEvent = z.object({
  name: z.literal("shop/product.purchased"),
  data: z.object({ productId: z.string() }),
});

const productViewedEvent = z.object({
  name: z.literal("shop/product.viewed"),
  data: z.object({ productId: z.string() }),
}) satisfies LiteralZodEventSchema;

const eventsMap = {
  "app/account.created": {
    data: z.object({
      userId: z.string(),
    }),
  },
  "app/subscription.started": {
    data: z.object({
      userId: z.string(),
      planId: z.string(),
    }),
  },
};

export const inngest = new Inngest({
  schemas: new EventSchemas()
    .fromZod([productPurchasedEvent, productViewedEvent])
    .fromZod(eventsMap),
});

----------------------------------------

TITLE: Fetching Subscription Token from Client
DESCRIPTION: Client-side code to fetch a subscription token from the server.

LANGUAGE: typescript
CODE:
import { subscribe } from "@inngest/realtime";

const token = await fetch("/api/get-subscribe-token", {
  method: "POST",
  credentials: "include",
}).then(res => res.json());

----------------------------------------

TITLE: Sending Event - Go
DESCRIPTION: Example of sending an event using the Inngest Go client with cart checkout data.

LANGUAGE: go
CODE:
package main

import "github.com/inngest/inngest-go"

func main() {
  inngestgo.Send(context.Background(), inngestgo.Event{
    Name: "storefront/cart.checkout.completed",
    Data: map[string]any{
      "cartId": "ed12c8bde",
      "itemIds": []string{"9f08sdh84", "sdf098487", "0fnun498n"},
      "account": map[string]any{
        "id": 123,
        "email": "test@example.com",
      },
    },
  })
}

----------------------------------------

TITLE: Sending Welcome Email with Clerk Webhook Event in TypeScript
DESCRIPTION: This function sends a welcome email when a 'clerk/user.created' event occurs. It extracts user data from the Clerk event payload and uses it to send a personalized welcome email.

LANGUAGE: typescript
CODE:
const sendWelcomeEmail = inngest.createFunction(
  { id: 'send-welcome-email' },
  { event: 'clerk/user.created' },
  async ({ event }) => {
    const { user } = event.data;
    const { first_name } = user;
    const email = user.email_addresses.find(e =>
      e.id === user.primary_email_address_id
    ).email;
    await emails.sendWelcomeEmail({ email, first_name });
  }
)

----------------------------------------

TITLE: Waiting for Events in TypeScript with Inngest
DESCRIPTION: Demonstrates how to use step.waitForEvent() in TypeScript to pause function execution until a specific event is received, with timeout and matching options.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  { id: "send-onboarding-nudge-email" },
  { event: "app/account.created" },
  async ({ event, step }) => {
    const onboardingCompleted = await step.waitForEvent(
      "wait-for-onboarding-completion",
      { event: "app/onboarding.completed", timeout: "3d", match: "data.userId" }
    );
    if (!onboardingCompleted) {
      // if no event is received within 3 days, onboardingCompleted will be null
    } else {
      // if the event is received, onboardingCompleted will be the event payload object
    }
  }
);

----------------------------------------

TITLE: Configuring Debounce in Go
DESCRIPTION: Implementation of debounce functionality for an Inngest function using Go. Shows how to configure debounce settings including period, timeout, and key.

LANGUAGE: go
CODE:
inngestgo.CreateFunction(
  &inngestgo.FunctionOpts{
    ID: "handle-webhook",
    Debounce: &inngestgo.Debounce{
      Key: "event.data.account_id",
      Period: "5m",
      Timeout: "10m",
    },
  },
  inngestgo.EventTrigger("intercom/company.updated", nil),
  func(ctx context.Context, input inngestgo.Input) (any, error) {
    // This function will only be scheduled 5 minutes after events are no longer received with the same
    // `event.data.account_id` field.
    //
    // `event` will be the last event in the series received.
    return nil, nil
  },
)

----------------------------------------

TITLE: Using step.sleepUntil() - Version 3
DESCRIPTION: Examples of using step.sleepUntil() in version 3 of the API. Shows usage with different datetime formats including Date objects, ISO strings, and Temporal API objects. Demonstrates common use cases like waiting until specific dates, end of week, and timezone-aware scheduling.

LANGUAGE: typescript
CODE:
// Sleep until the new year
await step.sleepUntil("happy-new-year", "2024-01-01");

// Sleep until September ends
await step.sleepUntil("wake-me-up", "2023-09-30T11:59:59");

// Sleep until the end of the this week
const date = dayjs().endOf("week").toDate();
await step.sleepUntil("wait-for-end-of-the-week", date);

// Sleep until tea time in London
const teaTime = Temporal.ZonedDateTime.from("2025-05-01T16:00:00+01:00[Europe/London]");
await step.sleepUntil("british-tea-time", teaTime);

// Sleep until the end of the day
const now = Temporal.Now.instant();
const endOfDay = now.round({ smallestUnit: "day", roundingMode: "ceil" });
await step.sleepUntil("done-for-today", endOfDay);

----------------------------------------

TITLE: Implementing Event Batching in Inngest (Go)
DESCRIPTION: Shows how to implement event batching for an Inngest function in Go. It includes configuration and handling of batched events, demonstrating bulk database operations.

LANGUAGE: go
CODE:
inngestgo.CreateFunction(
  &inngestgo.FunctionOpts{
    ID: "record-api-calls",
    BatchEvents: &inngest.EventBatchConfig{
      MaxSize: 100,
      Timeout: "5s",
      Key: "event.data.user_id", // Optional: batch events by user ID
    },
  },
  inngestgo.EventTrigger("log/api.call"),
  func(ctx context.Context, events []*inngestgo.Event, step inngestgo.StepFunction) (any, error) {
    // NOTE: Use the events argument, which is an array of event payloads
    attrs := make([]interface{}, len(events))
    for i, evt := range events {
      attrs[i] = map[string]interface{}{
        "user_id":   evt.Data["user_id"],
        "endpoint":  evt.Data["endpoint"], 
        "timestamp": toDateTime(evt.Ts),
      }
    }

    var result []interface{}
    _, err := step.Run(ctx, "record-data-to-db", func(ctx context.Context) (interface{}, error) {
      return nil, db.BulkWrite(attrs)
    })
    if err != nil {
      return err, nil
    }

    return nil, map[string]interface{}{
      "success":  true,
      "recorded": len(result),
    }
  },
)

----------------------------------------

TITLE: Python FastAPI Implementation
DESCRIPTION: Example of implementing Inngest with Python FastAPI framework

LANGUAGE: python
CODE:
import inngest
import fastapi
import inngest.fast_api

inngest_client = inngest.Inngest(app_id="fast_api_example")

@inngest_client.create_function(
    fn_id="hello-world",
    trigger=inngest.TriggerEvent(event="say-hello"),
)
async def hello(ctx: inngest.Context, step: inngest.Step) -> str:
    return "Hello world!"

app = fastapi.FastAPI()

inngest.fast_api.serve(
    app,
    inngest_client,
    [hello],
)

----------------------------------------

TITLE: Creating Inngest Client in Pages Router
DESCRIPTION: Code to create an Inngest client and set up the API endpoint in Next.js Pages Router.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";
import { serve } from "inngest/next";

// Create a client to send and receive events
export const inngest = new Inngest({ id: "my-app" });

// Create an API that serves zero functions
export default serve({
  client: inngest,
  functions: [
    /* your functions will be passed here later! */
  ],
});

----------------------------------------

TITLE: Implementing Inngest Function for User Backfill
DESCRIPTION: TypeScript code defining an Inngest function that runs a backfill script for a user based on the event data received from Retool.

LANGUAGE: typescript
CODE:
import { runBackfillForUser } from "../lib/backfill-scripts";
import { inngest } from "./client";

export default inngest.createFunction(
  { id: "run-backfill-for-user" }, // The name displayed in the Inngest dashboard
  { event: "retool/backfill.requested" }, // The event triggger
  async ({ event }) => {
    const result = await runBackfillForUser(event.data.user_id);

    return {
      status: result.ok ? 200 : 500,
      message: `Ran backfill for user ${event.data.user_id}`,
    };
  }
);

----------------------------------------

TITLE: Basic Inngest Function Creation in Python
DESCRIPTION: Shows the basic structure for creating an Inngest function using the create_function decorator with a simple event trigger.

LANGUAGE: python
CODE:
import inngest

@inngest_client.create_function(
    fn_id="import-product-images",
    trigger=inngest.TriggerEvent(event="shop/product.imported"),
)
async def fn(ctx: inngest.Context, step: inngest.Step):
    # Your function code

----------------------------------------

TITLE: Data Import Error Handling with Go
DESCRIPTION: Implementation of error handling for data imports in Go, including cleanup logic for failed imports. Uses Go's native error handling patterns with Inngest's step.Run functionality.

LANGUAGE: go
CODE:
inngestgo.CreateFunction(
	inngestgo.FunctionOpts{ID: "import-account-data"},
	inngestgo.EventTrigger("app/account.connected", nil),
	func (
		ctx context.Context,
		input inngestgo.Input[AccountConnectedEvent]
	) (any, error) {
		data, err := step.Run(
			ctx,
			"import-data",
			func(ctx context.Context) (bool, error) {
				return result, err
			}
		)
		if err != nil {
			_, cleanupErr := step.Run(
				ctx,
				"cleanup-failed-import",
				func(ctx context.Context) (bool, error) {
					return result, err
				}
			)
			return nil, errors.Join(cleanupErr, err)
		}
		return nil, nil
	}
}

----------------------------------------

TITLE: Initializing Inngest Middleware in TypeScript
DESCRIPTION: Creates a new middleware instance using the InngestMiddleware class and registers it with the Inngest client. This snippet demonstrates the basic structure of middleware initialization.

LANGUAGE: typescript
CODE:
// Create a new middleware
const myMiddleware = new InngestMiddleware({
  name: "My Middleware",
  init: () => {
      return {};
  },
});

// Register it on the client
const inngest = new Inngest({
  id: "my-app",
  middleware: [myMiddleware],
});

----------------------------------------

TITLE: Running Steps in Parallel with Inngest in Python
DESCRIPTION: This example demonstrates how to run two steps in parallel using the Inngest client. It defines a function triggered by an event, which then executes two parallel steps: updating a user and sending an email.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="my-function",
    trigger=inngest.TriggerEvent(event="my-event"),
)
async def fn(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    user_id = ctx.event.data["user_id"]

    (updated_user, sent_email) = await step.parallel(
        (
            lambda: step.run("update-user", update_user, user_id),
            lambda: step.run("send-email", send_email, user_id),
        )
    )

----------------------------------------

TITLE: Invoking Referenced Functions
DESCRIPTION: Shows how to invoke a referenced function using step.invoke() with proper typing and data passing.

LANGUAGE: typescript
CODE:
// @/inngest/someFn.ts
import { computeSquare } from "@/inngest/compute"; // import the referenece

// square.result is typed as a number
const square = await step.invoke("compute-square-value", {
  function: computeSquare,
  data: { number: 4 }, // input data is typed, requiring input if it's needed
});

----------------------------------------

TITLE: Initializing Inngest Serve Handler (v2)
DESCRIPTION: Example showing how to initialize the serve() API handler in Inngest v2. This version uses a different function signature, taking the client and function array as separate arguments.

LANGUAGE: typescript
CODE:
import { serve } from "inngest/next"; // or your preferred framework
import { inngest } from "./client";
import {
  importProductImages,
  sendSignupEmail,
  summarizeText,
} from "./functions";

serve(inngest, [sendSignupEmail, summarizeText, importProductImages]);

----------------------------------------

TITLE: Implementing Errors as Values in Python using Result Type
DESCRIPTION: This snippet shows how to implement errors as values in Python using a Result type, similar to Rust's approach, using the 'result' library.

LANGUAGE: python
CODE:
import result

def get_user(user_id: str) -> result.Result[User, Exception]:
    rows = users.find(user_id=user_id)
    if len(rows) == 0:
        return result.Error(Exception("user not found"))

    return result.Ok(rows[0])

def rename_user(user_id: str, name: str) -> result.Result[User, Exception]:
    # Consume the function
    match get_user(user_id):
        case result.Ok(user):
            pass
        case result.Err(err):
            return result.Err(err)

    user.name = name
    return result.Ok(user)

----------------------------------------

TITLE: Delayed Email Campaign in TypeScript
DESCRIPTION: Multi-step Inngest function that sends welcome email followed by a trial offer after 3 days.

LANGUAGE: tsx
CODE:
const sendOnboardingEmails = inngest.createFunction(
  { id: 'onboarding-emails' },
  { event: 'app/signup.completed' },
  async ({ event, step }) => {
    const { user } = event.data
	  const { email, first_name } = user

    await step.run('welcome-email', async () => {
      await sendEmail(email, "Welcome to ACME", (
        <div>
          <h1>Welcome to ACME, {firstName}</h1>
        </div>
      ));
    })

   await step.sleep('wait-3-days', '3 days')

   await step.run('trial-offer-email', async () => {
     await sendEmail(email, "Free ACME Pro trial", (
        <div>
          <h1>Hello {firstName}, try our Pro features for 30 days for free</h1>
        </div>
      ));
    })
  }
)

----------------------------------------

TITLE: Sync Step Parallelism in Python with Inngest
DESCRIPTION: Demonstrates synchronous parallel step execution in Python using inngest.StepSync

LANGUAGE: python
CODE:
@client.create_function(
  fn_id="my-fn",
  trigger=inngest.TriggerEvent(event="my-event"),
)
def fn(
  ctx: inngest.Context,
  step: inngest.StepSync,
) -> None:
  user_id = ctx.event.data["user_id"]

  (updated_user, sent_email) = step.parallel(
    (
      lambda: step.run("update-user", update_user, user_id),
      lambda: step.run("send-email", send_email, user_id),
    )
  )

----------------------------------------

TITLE: Implementing Failure Handlers in Python for Inngest Functions
DESCRIPTION: This snippet shows two approaches to handle function failures in Inngest using Python. It demonstrates using an on_failure handler for a specific function and listening to the inngest/function.failed system event for handling all failures in the Inngest environment.

LANGUAGE: python
CODE:
# Option 1: give the inngest function an [`on_failure`] handler.
async def update_subscription_failed(ctx: inngest.Context, step: inngest.Step):
    # if the subscription check fails after all retries, unsubscribe the user
    await unsubscribe_user(ctx.data.userId)

@inngest_client.create_function(
    fn_id="update-subscription",
    retries=5,
    on_failure=update_subscription_failed,
    trigger=TriggerEvent(event="user/subscription.check"))
async def update_subscription(ctx: Context, step: Step):
    pass # ...


# Option 2: Listens for the [inngest/function.failed](/docs/reference/functions/handling-failures#the-inngest-function-failed-event)
# system event to catch all failures in the inngest environment
@inngest_client.create_function(
    fn_id="global_failure_handler",
    trigger=[
        TriggerEvent(event="inngest/function.failed"),
        #TriggerEvent(event="inngest/function.cancelled")
    ],
)
async def global_failure_handler(ctx: Context, step: Step):
    pass # handle all failures, e.g. to send to sentry

----------------------------------------

TITLE: Using Injected Dependencies in Inngest Functions
DESCRIPTION: Example showing how to access and use the injected OpenAI client within an Inngest function handler. The function demonstrates creating a chat completion using the injected client.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { name: "user-create" },
  { event: "app/user.create" },
  async ({ openai }) => {
    const chatCompletion = await openai.chat.completions.create({
      messages: [{ role: "user", content: "Say this is a test" }],
      model: "gpt-3.5-turbo",
    });

    // ...
  },
);

----------------------------------------

TITLE: Implementing Multiple Triggers in Inngest
DESCRIPTION: Shows how to configure an Inngest function with multiple triggers including event triggers and cron schedules. The example demonstrates handling user creation/update events and a daily morning schedule.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "resync-user-data" },
  [
    { event: "user.created" },
    { event: "user.updated" },
    { cron: "0 5 * * *" }, // Every morning at 5am
  ],
  async ({ event, step }) => {
    // ...
  },
);

LANGUAGE: go
CODE:
inngestgo.CreateFunction(
	inngestgo.FunctionOpts{ID: "resync-user-data"},
	inngestgo.MultipleTriggers{
		inngestgo.EventTrigger("user.created", nil),
		inngestgo.EventTrigger("user.updated", nil),
		inngestgo.CronTrigger("0 5 * * *", nil),
	},
	func(ctx context.Context, input inngestgo.Input) (any, error) {
		// ...
	},
)

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="resync-user-data",
    trigger=[
        inngest.TriggerEvent(event="user.created"),
        inngest.TriggerEvent(event="user.updated"),
        inngest.TriggerCron(cron="0 5 * * *")
    ],
)
def my_handler(ctx: inngest.Context) -> None:
     # ...

----------------------------------------

TITLE: Basic FastAPI App Setup
DESCRIPTION: Creates a minimal FastAPI application

LANGUAGE: python
CODE:
from fastapi import FastAPI

app = FastAPI()

----------------------------------------

TITLE: Serving Inngest Functions with Express.js
DESCRIPTION: JavaScript code showing how to serve Inngest functions using Express.js, including setting up the route and passing the Inngest signing key.

LANGUAGE: javascript
CODE:
import { serve } from "inngest/express"
import runBackfillForUser from "../inngest/runBackfillForUser"

app.use("/api/inngest", serve("My API", process.env.INNGEST_SIGNING_KEY, [
  runBackfillForUser,
]))
// your existing routes...
app.get("/api/whatever", ...)
app.post("/api/something_else", ...)

----------------------------------------

TITLE: Video Rendering Process - JavaScript/Inngest
DESCRIPTION: Manages the core video rendering process using remote workers, handling render settings and progress updates through a queue system.

LANGUAGE: javascript
CODE:
const { videoFileURL, renderTime } = await step.run(
  'render-video-to-s3',
  async () => {
    const outKey = await getVideoOutKey(videoId)

    const userBundle = bundles.find((p) => p.key === updatedVideo.user.bundle)

    if (!userBundle) {
      throw new NonRetriableError('no bundle assigned to user')
    }

    await dbConnect()

    const video = await VideoModel.findOne({
      _id: videoId
    }).populate('user')

    if (!video) {
      throw new NonRetriableError('no video found')
    }

    const renderer = await determineRenderer(video, attempt)

    const constantRateFactor = determineRemotionConstantRateFactor(
      video.user.bundle
    )

    const renderPriority = await determineQueuePriority(video.user.bundle)

    logger.info(
      `Rendering Remotion video with renderer ${renderer} and crf ${constantRateFactor}`
    )

    const renderedVideo = await renderVideo({
      videoId: videoId,
      priority: renderPriority,
      renderOptions: {
        crf: constantRateFactor,
        concurrency: determineRemotionConcurrency(video),
        ...(video.hdr && {
          colorSpace: 'bt2020-ncl'
        })
      },
      inputPropsOverride: {
        ...video.videoSettings,
        videoFormat: video.videoFormat
      },
      renderer,
      audioURL: croppedMp3Url,
      startTime: 0,
      endTime: video.videoDuration,
      outKey,
      onProgress: async (progress) => {
        await VideoModel.updateOne(
          {
            _id: videoId
          },
          { $set: { renderProgress: progress, status: 'processing' } }
        )
      }
    })

    return renderedVideo
  }
)

----------------------------------------

TITLE: Handling Errors in Go Inngest Functions
DESCRIPTION: Demonstrates error handling in Go Inngest functions, where all errors returned are automatically handled and retried by Inngest.

LANGUAGE: go
CODE:
import (
  "github.com/inngest/inngestgo"
  "github.com/inngest/inngestgo/step"
)

// Register the function
inngestgo.CreateFunction(
    &inngest.FunctionOptions{
        ID: "send-user-email",
    },
    inngest.FunctionTrigger{
        Event: "user/created",
    },
    SendUserEmail,
)

func SendUserEmail(ctx *inngest.FunctionContext) (any, error) {
    // Run a step which emails the user.  This automatically retries on error.
    // This returns the fully typed result of the lambda.
    result, err := step.Run(ctx, "on-user-created", func(ctx context.Context) (bool, error) {
      // Run any code inside a step.
      result, err := emails.Send(emails.Opts{})
      return result, err
    })
    if err != nil {
      // This step retried 5 times by default and permanently failed.
      return nil, err
    }

    return nil, nil
}

----------------------------------------

TITLE: Customizing Retry Count in Inngest Functions
DESCRIPTION: This snippet shows how to configure the number of retries for an Inngest function by specifying the 'retries' option in the function configuration.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  {
    id: "click-recorder",
    retries: 10, // choose how many retries you'd like
  },
  { event: "app/button.clicked" },
  async ({ event, step, attempt }) => { /* ... */ },
);

LANGUAGE: go
CODE:
inngestgo.CreateFunction(
	inngestgo.FunctionOpts{
		ID:      "click-recorder",
		Retries: 10, // choose how many retries you'd like
	},
	inngestgo.EventTrigger("app/button.clicked", nil),
	func(ctx context.Context, input inngestgo.Input[ButtonClickedEvent]) (any, error) {
		// ...
	},
)

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="click-recorder",
    retries=10,  # choose how many retries you'd like
    trigger=inngest.TriggerEvent(event="app/button.clicked"),
)
def click_recorder(ctx: inngest.Context) -> None:
    # ...

----------------------------------------

TITLE: Implementing Fan-out Functions in TypeScript
DESCRIPTION: This snippet shows how to implement two functions (sendWelcomeEmail and startStripeTrial) that are triggered by the same 'app/user.signup' event, demonstrating the fan-out pattern in TypeScript.

LANGUAGE: typescript
CODE:
const sendWelcomeEmail = inngest.createFunction(
  { id: 'send-welcome-email' },
  { event: 'app/user.signup' },
  async ({ event, step }) => {
    await step.run('send-email', async () => {
      await sendEmail({ email: event.data.user.email, template: 'welcome');
    });
  }
)

const startStripeTrial = inngest.createFunction(
  { id: 'start-stripe-trial' },
  { event: 'app/user.signup' },
  async ({ event }) => {
    const customer = await step.run('create-customer', async () => {
      return await stripe.customers.create({ email: event.data.user.email });
    });
    await step.run('create-subscription', async () => {
      return await stripe.subscriptions.create({
        customer: customer.id,
        items: [{ price: 'price_1MowQULkdIwHu7ixraBm864M' }],
        trial_period_days: 14,
      });
    });
  }
)

----------------------------------------

TITLE: Basic Step Implementation in Go
DESCRIPTION: Shows how to implement basic steps in Go using the Inngest SDK, including error handling and step identification.

LANGUAGE: go
CODE:
inngestgo.CreateFunction(
  &inngestgo.FunctionOpts{
    ID: "import-product-images",
  },
  inngestgo.EventTrigger("shop/product.imported", nil),
  func(ctx context.Context, input inngestgo.Input) (any, error) {
    s3Urls, err := step.Run("copy-images-to-s3", func() ([]string, error) {
      return copyAllImagesToS3(input.Event.Data["imageURLs"].([]string))
    })
    if err != nil {
      return nil, err
    }
    return nil, nil
  },
)

----------------------------------------

TITLE: Async Step Parallelism in Python with Inngest
DESCRIPTION: Shows how to implement parallel steps in Python using async/await pattern with inngest.Step and step.parallel()

LANGUAGE: python
CODE:
@client.create_function(
  fn_id="my-fn",
  trigger=inngest.TriggerEvent(event="my-event"),
)
async def fn(
  ctx: inngest.Context,
  step: inngest.Step,
) -> None:
  user_id = ctx.event.data["user_id"]

  (updated_user, sent_email) = await step.parallel(
    (
      lambda: step.run("update-user", update_user, user_id),
      lambda: step.run("send-email", send_email, user_id),
    )
  )

----------------------------------------

TITLE: Sentry Error Tracking Implementation in TypeScript
DESCRIPTION: Example showing how to capture and track all function failures using Sentry's Node.js library. Includes error reconstruction and custom metadata handling.

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/node";
import { inngest } from "./client";

Sentry.init({
  dsn: "https://examplePublicKey@o0.ingest.sentry.io/0",
});

export default inngest.createFunction(
  {
    name: "Send failures to Sentry",
    id: "send-failed-function-errors-to-sentry"
  },
  { event: "inngest/function.failed" },
  async ({ event, step }) => {

    // The error is serialized as JSON, so we must re-construct it for Sentry's error handling:
    const error = event.data.error;
    const reconstructedEvent = new Error(error.message);
    // Set the name in the newly created event:
    // You can even customize the name here if you'd like,
    // e.g. `Function Failure: ${event.} - ${error.name}`
    reconstructedEvent.name = error.name;

    // Add the stack trace to the error:
    reconstructedEvent.stack = error.stack;

    // Capture the error with Sentry and append any additional tags or metadata:
    Sentry.captureException(reconstructedEvent,{
      extra: {
        function_id,
      },
    });

    // Flush the Sentry queue to ensure the error is sent:
    return await Sentry.flush();
  }
);

----------------------------------------

TITLE: Implementing waitForEvent in TypeScript with Inngest
DESCRIPTION: Example showing how to implement a workflow that pauses execution while waiting for a specific event. The function sends a welcome email and waits up to 24 hours for a function creation event matching the same user ID.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { name: "Onboarding flow" },
  { event: "auth/user.created" }, // The event that causes this function to run
  async ({ event, step }) => {
    await step.run("Send welcome email", () => { sendEmail() });

    // Wait for the 'app/function.created' event that has the same user ID
    // for up to 24 hours.
    const fn = await step.waitForEvent(
      "app/function.created",
      {
        if: "async.data.user_id == event.data.user_id",
        timeout: "24h",
      }
    );

    if (fn === null) {
      // The user didn't create a function within 24 hours.  Follow up.
    }
);

----------------------------------------

TITLE: Configuring Debounce in Python
DESCRIPTION: Python implementation of debounce functionality in Inngest. Shows how to use the decorator pattern to configure debounce with period, timeout, and key settings.

LANGUAGE: python
CODE:
@inngest.create_function(
    fn_id="handle-webhook",
    debounce=inngest.Debounce(
        key="event.data.account_id",
        period=datetime.timedelta(minutes=5),
        timeout=datetime.timedelta(minutes=10)
    ),
    trigger=inngest.Trigger(event="intercom/company.updated")
)
async def handle_webhook(ctx: inngest.Context):
    // This function will only be scheduled 5 minutes after events are no longer received with the same
    // `event.data.account_id` field.
    //
    // `event` will be the last event in the series received.
    pass

----------------------------------------

TITLE: Defining BaseEvent Class for Pydantic-Inngest Integration in Python
DESCRIPTION: Creates a base class that all event classes will inherit from, providing methods to convert between Pydantic models and Inngest Event objects. This class sets up the foundation for type-safe event handling.

LANGUAGE: python
CODE:
import inngest
import pydantic
import typing

TEvent = typing.TypeVar("TEvent", bound="BaseEvent")

class BaseEvent(pydantic.BaseModel):
    data: pydantic.BaseModel
    id: str = ""
    name: typing.ClassVar[str]
    ts: int = 0

    @classmethod
    def from_event(cls: type[TEvent], event: inngest.Event) -> TEvent:
        return cls.model_validate(event.model_dump(mode="json"))

    def to_event(self) -> inngest.Event:
        return inngest.Event(
            name=self.name,
            data=self.data.model_dump(mode="json"),
            id=self.id,
            ts=self.ts,
        )

----------------------------------------

TITLE: Implementing Fan-out Functions in Go
DESCRIPTION: This snippet shows how to implement two functions (sendWelcomeEmail and startStripeTrial) that are triggered by the same 'app/user.signup' event, demonstrating the fan-out pattern in Go.

LANGUAGE: go
CODE:
import (
    "github.com/inngest/inngest-go"
    "github.com/inngest/inngest-go/step"
)

func sendWelcomeEmail() *inngest.Function {
    return inngestgo.CreateFunction(
        inngest.FunctionOpts{
            ID: "send-welcome-email",
        },
        inngest.TriggerEvent("app/user.signup"),
        func(ctx *inngest.Context) error {
            _, err := step.Run("send-email", func(ctx *inngest.StepContext) (any, error) {
                return sendEmail(&SendEmailInput{
                    Email:    ctx.Event.Data["user"].(map[string]interface{})["email"].(string),
                    Template: "welcome",
                })
            })
            return err, nil
        },
    )
}

func startStripeTrial() *inngest.Function {
    return inngestgo.CreateFunction(
        inngest.FunctionOpts{
            ID: "start-stripe-trial",
        },
        inngest.TriggerEvent("app/user.signup"),
        func(ctx *inngest.Context) (any, error) {
            customer, err := step.Run("create-customer", func(ctx *inngest.StepContext) (any, error) {
                return nil, stripe.Customers.Create(&stripe.CustomerParams{
                    Email: ctx.Event.Data["user"].(map[string]interface{})["email"].(string),
                })
            })
            if err != nil {
                return err, nil
            }

            _, err = step.Run("create-subscription", func(ctx *inngest.StepContext) (any, error) {
                return nil, stripe.Subscriptions.Create(&stripe.SubscriptionParams{
                    Customer:        customer.ID,
                    Items:          []*stripe.SubscriptionItemsParams{{Price: "price_1MowQULkdIwHu7ixraBm864M"}},
                    TrialPeriodDays: 14,
                })
            })
            return err, nil
        },
    )
}

----------------------------------------

TITLE: Implementing Event Waiting in Inngest v2
DESCRIPTION: Example showing how to wait for events using step.waitForEvent() in Inngest v2. Shows the legacy syntax for invoice approval and subscription creation waiting.

LANGUAGE: typescript
CODE:
// Wait 7 days for an approval and match invoice IDs
const approval = await step.waitForEvent("app/invoice.approved", {
  timeout: "7d",
  match: "data.invoiceId",
});

// Wait 30 days for a user to start a subscription
// on the pro plan
const subscription = await step.waitForEvent("app/subscription.created", {
  timeout: "30d",
  if: "event.data.userId == async.data.userId && async.data.billing_plan == 'pro'",
});

----------------------------------------

TITLE: Configuring Debounced Function with Inngest
DESCRIPTION: JavaScript implementation of a debounced function using Inngest, demonstrating how to configure debouncing period and key for event handling.

LANGUAGE: js
CODE:
const generateIdeasFunction = inngest.createFunction(
  {
    id: "generate-ideas-via-open-ai",
    debounce: {
      period: "1m",
      key: "event.data.blog_post_id",
    },
  },
  { event: "blog/draft.saved" },
  async ({ event, step }) => {
    /* call OpenAI */
  },
);

----------------------------------------

TITLE: Custom Fetch Configuration in TypeScript
DESCRIPTION: Shows how to properly bind a custom fetch function when initializing Inngest to avoid 'Illegal invocation' errors.

LANGUAGE: typescript
CODE:
new Inngest({
  fetch: fetch.bind(globalThis),
});

----------------------------------------

TITLE: Audio Processing for Video Render - JavaScript/FFMPEG
DESCRIPTION: Processes audio files by cropping and converting to MP3 format using FFMPEG. Handles temporary file creation, audio manipulation, and storage upload.

LANGUAGE: javascript
CODE:
const croppedMp3Url = await step.run(
  'trim-audio-and-convert-to-mp3',
  async () => {
    // create temporary file
    const tempFilePath = `${os.tmpdir()}/${videoId}.mp3`

    await execa(`ffmpeg`, [
      '-i',
      updatedVideo.audioFileURL, // ffmpeg will grab input from URL
      '-map',
      '0:a',
      '-map_metadata',
      '-1',
      '-ab',
      '320k',
      '-f',
      'aac',
      '-ss',
      String(updatedVideo.regionStartTime), // start time
      '-to',
      String(updatedVideo.regionEndTime), // end time
      tempFilePath
    ])

    const croppedAudioS3Key = await getAudioFileKey(videoId)

    // upload mp3 to file storage
    const mp3URL = await uploadFile({
      Key: croppedAudioS3Key,
      Body: fs.createReadStream(tempFilePath)
    })

    // remove temp file
    await unlink(tempFilePath)

    await dbConnect()

    await VideoModel.updateOne(
      { _id: videoId },
      { $set: { croppedAudioFileURL: mp3URL } }
    )

    return mp3URL
  }
)

----------------------------------------

TITLE: Initializing Inngest Middleware in Python
DESCRIPTION: Creates a custom middleware class by inheriting from inngest.Middleware and registers it with the Inngest client. This snippet shows the basic structure of middleware initialization in Python.

LANGUAGE: python
CODE:
import inngest

class MyMiddleware(inngest.Middleware):
    def __init__(
        self,
        client: inngest.Inngest,
        raw_request: object,
    ) -> None:
        #  ...

    async def before_send_events( self, events: list[inngest.Event]) -> None:
        print(f"Sending {len(events)} events")

    async def after_send_events(self, result: inngest.SendEventsResult) -> None:
        print("Done sending events")

inngest_client = inngest.Inngest(
    app_id="my_app",
    middleware=[MyMiddleware],
)

----------------------------------------

TITLE: Delaying Jobs with TypeScript in Inngest
DESCRIPTION: Example showing how to delay job execution using step.sleep() method in TypeScript. The function demonstrates waiting for 1 hour before executing further code.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";

const inngest = new Inngest({ id: "signup-flow" });

export const fn = inngest.createFunction(
  { id: "send-signup-email" },
  { event: "app/user.created" },
  async ({ event, step }) => {
    await step.sleep("wait-a-moment", "1 hour");
    await step.run("do-some-work-in-the-future", async () => {
      // This runs after 1 hour
    });
  }
);

----------------------------------------

TITLE: Chunking Jobs with Parallel Steps in TypeScript
DESCRIPTION: Example of chunking large text processing jobs using parallel steps in Inngest, specifically for summarizing text in chunks using OpenAI APIs

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";

const inngest = new Inngest({ id: "signup-flow" });

export const fn = inngest.createFunction(
  { id: "summarize-text" },
  { event: "app/text.summarize" },
  async ({ event, step }) => {
    const chunks = splitTextIntoChunks(event.data.text);

    const summaries = await Promise.all(
      chunks.map((chunk) =>
        step.run("summarize-chunk", () => summarizeChunk(chunk))
      )
    );

    await step.run("summarize-summaries", () => summarizeSummaries(summaries));
  }
);

----------------------------------------

TITLE: Pausing Execution for a Given Time in Go
DESCRIPTION: Illustrates using step.Sleep() to pause function execution for a specific duration in Go. This example shows sleeping for one second within an account creation function.

LANGUAGE: go
CODE:
func AccountCreated(ctx context.Context, input inngestgo.Input[AccountCreatedEvent]) (any, error) {
  // Sleep for a second, minute, hour, week across server restarts.
  step.Sleep(ctx, "initial-delay", time.Second)

  // ...

  return nil, nil
}

----------------------------------------

TITLE: Dynamically Building Parallel Steps in Inngest with Python
DESCRIPTION: This snippet shows how to dynamically build a tuple of parallel steps in Inngest. It iterates over a list of user IDs from the event data, creating a step function for each user ID to update their information.

LANGUAGE: python
CODE:
@client.create_function(
    fn_id="my-function",
    trigger=inngest.TriggerEvent(event="my-event"),
)
async def fn(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    parallel_steps = tuple[typing.Callable[[], typing.Awaitable[bool]]]()
    for user_id in ctx.event.data["user_ids"]:
        parallel_steps += tuple(
            [
                functools.partial(
                    step.run,
                    f"get-user-{user_id}",
                    functools.partial(update_user, user_id),
                )
            ]
        )

    updated_users = await step.parallel(parallel_steps)

----------------------------------------

TITLE: Defining Basic JSON Event Payload Structure for Inngest
DESCRIPTION: Demonstrates the structure of a basic JSON event payload for Inngest, including required 'name' and 'data' properties, as well as optional 'user' information.

LANGUAGE: json
CODE:
{
  "name": "billing/invoice.paid",
  "data": {
    "customerId": "cus_NffrFeUfNV2Hib",
    "invoiceId": "in_1J5g2n2eZvKYlo2C0Z1Z2Z3Z",
    "amount": 1000,
    "metadata": {
      "accountId": "acct_1J5g2n2eZvKYlo2C0Z1Z2Z3Z",
      "accountName": "Acme.ai"
    }
  },
  "user": {
    "email": "taylor@example.com"
  }
}

----------------------------------------

TITLE: Scheduling Future Work with Inngest Function for Dinner Reservation Reminder
DESCRIPTION: This code example demonstrates how to use step.sleepUntil to schedule a step in the future at a specific time, used here for sending a dinner reservation reminder.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "send-reminder" },
  { event: "dinner_reservation.created" },
  async ({ event, step }) => {
    const reservationAt = new Date(event.data.reservationTimestamp);
    const dayBefore = new Date(reservationAt - 24 * 60 * 60 * 1000);
    await step.sleepUntil(dayBefore)

    await step.run("send-reminder-text-message", async () =>
      await sendSMSReminder(event.user.phone, event.data)
    )
  }
)

----------------------------------------

TITLE: Multi-Step Error Handling with Database Provisioning
DESCRIPTION: Example demonstrating error handling across multiple steps in a database provisioning workflow, including rollback functionality if seeding fails.

LANGUAGE: typescript
CODE:
const sync = inngest.createFunction(
  { id: "provision-database" },
  { event: "auto/sync.request" },
  async ({ event, step }) => {
    const { databaseID, seedDataSetID } = event.data;

    try {
      const databaseURL = await step.run("create-database", async () => {
        return await infra.createDatabase(databaseID);
      });

      await step.run("seed-database", async () => {
        const db = await postgres.connect(databaseURL)
        const seedData = await db.seedDataSets.find(seedDataSetID)
        return await infra.insertSeedData(db, seedData)
      })
    } catch (err) {
      if (err.stepId === "seed-database") {
        await step.run("remove-database", async () => {
          return await infra.removeDatabase(databaseID);
        })
      }
    }
  }
)

----------------------------------------

TITLE: Setting Up Event Batching in Inngest (Python)
DESCRIPTION: Illustrates the configuration and implementation of event batching for an Inngest function in Python. It shows how to process multiple events in a single function execution.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="record-api-calls",
    trigger=inngest.TriggerEvent(event="log/api.call"),
    batch_events=inngest.Batch(
        max_size=100,
        timeout=datetime.timedelta(seconds=5),
        key="event.data.user_id"  # Optional: batch events by user ID
    ),
)
async def record_api_calls(ctx: inngest.Context, step: inngest.Step):
    # NOTE: Use the events from ctx, which is an array of event payloads
    attrs = [
        {
            "user_id": evt.data.user_id,
            "endpoint": evt.data.endpoint,
            "timestamp": to_datetime(evt.ts)
        }
        for evt in ctx.events
    ]

    async def record_data():
        return await db.bulk_write(attrs)

    result = await step.run("record-data-to-db", record_data)

    return {"success": True, "recorded": len(result)}

----------------------------------------

TITLE: Delaying Jobs with Python in Inngest
DESCRIPTION: Example showing how to delay job execution using step.sleep() method in Python. The function demonstrates waiting for 4 hours before executing further code.

LANGUAGE: python
CODE:
import inngest
from src.inngest.client import inngest_client
from datetime import timedelta

@inngest_client.create_function(
    fn_id="send-signup-email", 
    trigger=inngest.TriggerEvent(event="app/user.created")
)
async def send_signup_email(ctx: inngest.Context, step: inngest.Step):
    
    await step.sleep("wait-for-the-future", timedelta(hours=4))

    async def future_work():
        # Code here runs in the future automatically
        pass

    await step.run("do-some-work-in-the-future", future_work)

----------------------------------------

TITLE: Scheduling Jobs at Specific Times with Python in Inngest
DESCRIPTION: Example demonstrating how to schedule jobs for specific times using step.sleep_until() method in Python. Shows scheduling using ISO timestamp string.

LANGUAGE: python
CODE:
import inngest
from src.inngest.client import inngest_client

inngest_client = inngest.Inngest(
    app_id="my-app",
)

@inngest_client.create_function(
    fn_id="send-signup-email", 
    trigger=inngest.TriggerEvent(event="app/user.created")
)
async def send_signup_email(ctx: inngest.Context, step: inngest.Step):
    async def send_email():
        await sesclient.send_email(
            to=ctx.event.data["user_email"],
            subject="Welcome to Inngest!",
            message="..."
        )
    
    await step.run("send-the-user-a-signup-email", send_email)
    
    await step.sleep_until("wait-for-the-future", "2023-02-01T16:30:00")

    async def future_work():
        # Code here runs in the future automatically
        pass

    await step.run("do-some-work-in-the-future", future_work)

----------------------------------------

TITLE: Implementing Delayed Execution Handler
DESCRIPTION: Demonstrates how to create a function that processes scheduled events using sleepUntil for delayed execution. The function pauses until the specified time before executing the scheduled task.

LANGUAGE: typescript
CODE:
import { inngest } from "./client";

const delayed = inngest.createFunction(
  { id: "schedule-post" },
  { event: "blog/post.scheduled" },
  async ({ event, step }) => {
    const at = new Date(event.data.scheduleAt);

    // Use the built-in `sleepUntil` tool to sleep until the time in the event.
    // This function will pause then resume running the code below at the given time.
    await step.sleepUntil("wait-for-scheduled", at);

    await step.run("publish-post", () => {
      // Any code here runs at the time in the event.
      schedulePost(event.data.postID);
    });
  }
);

----------------------------------------

TITLE: Implementing Sleep Function in Inngest Python
DESCRIPTION: This snippet demonstrates how to use the sleep function within an Inngest Python function. It shows the function definition, trigger setup, and usage of the sleep method with a datetime.timedelta object.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="my_function",
    trigger=inngest.TriggerEvent(event="app/my_function"),
)
async def fn(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    await step.sleep("zzz", datetime.timedelta(seconds=2))

----------------------------------------

TITLE: Implementing a Function to Fetch Inngest Runs
DESCRIPTION: Defines a reusable TypeScript function that queries the Inngest API to fetch runs for a given event ID, using the signing key for authentication.

LANGUAGE: typescript
CODE:
async function getRuns(eventId) {
  const response = await fetch(`https://api.inngest.com/v1/events/${eventId}/runs`, {
    headers: {
      Authorization: `Bearer ${process.env.INNGEST_SIGNING_KEY}`,
    },
  });
  const json = await response.json();
  return json.data;
}

----------------------------------------

TITLE: Specifying Lifecycles and Hooks in TypeScript Middleware
DESCRIPTION: Shows how to define lifecycles and hooks in TypeScript middleware, including conditional hook registration based on event triggers.

LANGUAGE: typescript
CODE:
new InngestMiddleware({
  name: "Example Middleware",
  async init() {
    return {
      onFunctionRun({ ctx, fn, steps }) {
        // Register a hook only if this event is the trigger
        if (ctx.event.name === "app/user.created") {
          return {
            beforeExecution() {
              console.log("Function executing with user created event");
            },
          };
        }

        // Register no hooks if the trigger was not `app/user.created`
        return {};
      },
    };
  },
});

----------------------------------------

TITLE: Implementing Actions Middleware in Inngest
DESCRIPTION: This code defines the createActionsMiddleware function, which creates middleware to wrap a set of functions in step tooling. It allows direct invocation of these functions instead of using step.run().

LANGUAGE: typescript
CODE:
import { InngestMiddleware, StepOptionsOrId } from "inngest";

/**
 * Create a middleware that wraps a set of functions in step tooling, allowing
 * them to be invoked directly instead of using `step.run()`.
 *
 * This is useful for providing a set of common actions to a particular function
 * or to all functions created by a client.
 */
export const createActionsMiddleware = <T extends Actions>(rawActions: T) => {
  return new InngestMiddleware({
    name: "Inngest: Actions",
    init: () => {
      return {
        onFunctionRun: () => {
          return {
            transformInput: ({ ctx: { step } }) => {
              const action: FilterActions<T> = Object.entries(
                rawActions
              ).reduce((acc, [key, value]) => {
                if (typeof value !== "function") {
                  return acc;
                }

                const action = (
                  idOrOptions: StepOptionsOrId,
                  ...args: unknown[]
                ) => {
                  return step.run(idOrOptions, () => value(...args));
                };

                return {
                  ...acc,
                  [key]: action,
                };
              }, {} as FilterActions<T>);

              return {
                ctx: { action },
              };
            },
          };
        },
      };
    },
  });
};

type Actions = Record<string, unknown>;

/**
 * Filter out all keys from `T` where the associated value does not match type
 * `U`.
 */
type KeysNotOfType<T, U> = {
  [P in keyof T]: T[P] extends U ? never : P;
}[keyof T];

/**
 * Given a set of generic objects, extract any top-level functions and
 * appropriately shim their types.
 *
 * We use this type to allow users to spread a set of functions into the
 * middleware without having to worry about non-function properties.
 */
type FilterActions<Fns extends Record<string, any>> = {
  [K in keyof Omit<Fns, KeysNotOfType<Fns, (...args: any[]) => any>>]: (
    idOrOptions: StepOptionsOrId,
    ...args: Parameters<Fns[K]>
  ) => Promise<Awaited<ReturnType<Fns[K]>>>;
};

----------------------------------------

TITLE: Implementing Inngest Handler for RedwoodJS in TypeScript
DESCRIPTION: This snippet demonstrates how to set up an Inngest client, create an event-driven function, and serve it using the RedwoodJS handler. It includes initializing the Inngest client, defining a function triggered by a user creation event, and exporting the handler for use in a RedwoodJS application.

LANGUAGE: typescript
CODE:
import { Inngest } from 'inngest'
import { serve } from 'inngest/redwood'

const inngest = new Inngest({ id: 'my-redwood-app' });

const userAlert = inngest.createFunction(
  { id: 'new-user-alert' },
  { event: 'app/user.created' },
  async ({ event }) => {
    console.log(`New user @${event.data.username} created!`)
  }
)

export const handler = serve({
  client: inngest,
  functions: [userAlert],
  servePath: "/api/inngest",
});

----------------------------------------

TITLE: Throwing Standard Errors in Python Inngest Functions
DESCRIPTION: Shows how to throw standard errors in Python Inngest functions and steps, which are automatically handled and retried by Inngest.

LANGUAGE: python
CODE:
@client.create_function(
    fn_id="import-item-data",
    retries=0,
    trigger=inngest.TriggerEvent(event="store/import.requested"),
)
async def fn_async(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:

    def foo() -> None:
        raise ValueError("foo")

    # a retry will be attempted
    await step.run("foo", foo)

----------------------------------------

TITLE: Publishing Data with Inngest Realtime (Typed Channels)
DESCRIPTION: Shows how to create typed channels and topics, and publish data using these typed structures.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";
import { realtimeMiddleware, channel, topic } from "@inngest/realtime";

const inngest = new Inngest({
  id: "my-app",
  // Whenever you create your app, include the `realtimeMiddleware()`
  middleware: [realtimeMiddleware()],
});

// create a channel for each user, given a user ID.  a channel is a namespace
// for one or more topics of streams.
const userChannel = channel((userId: string) => `user:${userId}`)
  // Add a specific topic, eg. "ai" for all AI data within the user's channel
  .addTopic(
    topic("ai").schema(
      z.object({
        response: z.string(),
        // Transforms are supported for realtime data
        success: z.number().transform(Boolean),
      })
    )
  );

// we can also create global channels that do not require input
const logsChannel = channel("logs").addTopic(topic("info").type<string>());

inngest.createFunction(
  { id: "some-task" },
  { event: "ai/ai.requested" },
  async ({ event, step, publish }) => {
    // Publish data to the given channel, on the given topic.
    await publish(
      userChannel(event.data.userId).ai({
        response: "an llm response here",
        success: true,
      })
    );

    await publish(logsChannel().info("All went well"))
  }
);

----------------------------------------

TITLE: Creating Subscription Token (Express)
DESCRIPTION: Example of creating a subscription token in an Express endpoint, scoped to a user's channel and specific topics.

LANGUAGE: typescript
CODE:
import { getSubscriptionToken } from "@inngest/realtime";
import { getAuth } from "src/auth"; // this could be any auth provider
import { inngest } from "src/inngest";

app.post("/get-subscribe-token", async (req, res) => {
  const { userId } = getAuth(req)

  const token = await getSubscriptionToken(inngest, {
    channel: `user:${userId}`,
    topics: ["ai"],
  })

  res.json({ token })
})

----------------------------------------

TITLE: Installing Inngest CLI with Bash
DESCRIPTION: Curl command to download and install the Inngest CLI, moving it to the /usr/local/bin directory for system-wide access.

LANGUAGE: bash
CODE:
curl -sfL https://cli.inngest.com/install.sh | sh && sudo mv ./inngest /usr/local/bin/inngest

----------------------------------------

TITLE: Implementing File Management Tools - TypeScript
DESCRIPTION: Extends the agent with file management capabilities by adding createOrUpdateFiles tool that interfaces with E2B Sandbox filesystem API.

LANGUAGE: typescript
CODE:
import { createAgent, anthropic, createTool } from "@inngest/agent-kit"

const agent = createAgent({
    name: "Coding Agent",
    description: "An expert coding agent",
    system: `You are a coding agent help the user to achieve the described task.

    When running commands, keep in mind that the terminal is non-interactive, remind to use the '-y' flag when running commands.

    Once the task completed, you should return the following information:
    <task_summary>
    </task_summary>

    Think step-by-step before you start the task.
    `,
    model: anthropic({
    model: "claude-3-5-sonnet-latest",
    max_tokens: 4096,
    }),
    tools: [
    createTool({
        name: "createOrUpdateFiles",
        description: "Create or update files in the sandbox",
        parameters: z.object({
        files: z.array(
            z.object({
            path: z.string(),
            content: z.string(),
            })
        ),
        }),
        handler: async ({ files }, { network }) => {
        const sandbox = getSandbox(network);
        try {
            await Promise.all(
                files.map((file) => sandbox?.files.write(file.path, file.content)
            );
            return `Files created or updated: ${files.map((f) => f.path).join(", ")}`;
        } catch (e) {
            console.error("error", e);
            return "Error: " + e;
        }
        },
    }),
    ]
})

----------------------------------------

TITLE: Using NoRetryError in Go Inngest Functions
DESCRIPTION: Demonstrates the use of NoRetryError in Go to prevent Inngest from retrying a function when the error is not expected to be resolved by retrying.

LANGUAGE: go
CODE:
import (
  "github.com/inngest/inngestgo"
  "github.com/inngest/inngestgo/step"
)

// Register the function
inngestgo.CreateFunction(
    &inngest.FunctionOptions{
        ID: "send-user-email",
    },
    inngest.FunctionTrigger{
        Event: "user/created",
    },
    SendUserEmail,
)

func SendUserEmail(ctx *inngest.FunctionContext) (any, error) {
    // Run a step which emails the user.  This automatically retries on error.
    // This returns the fully typed result of the lambda.
    result, err := step.Run(ctx, "on-user-created", func(ctx context.Context) (bool, error) {
      // Run any code inside a step.
      result, err := emails.Send(emails.Opts{})
      return result, err
    })
    if err != nil {
      // This step retried 5 times by default and permanently failed.
      // we return a NoRetryError to prevent Inngest from retrying the function
      return nil, inngestgo.NoRetryError(err)
    }

    return nil, nil
}

----------------------------------------

TITLE: Creating Next.js Workflow Editor Page
DESCRIPTION: Next.js page component that loads and renders the workflow editor with necessary props and configurations.

LANGUAGE: tsx
CODE:
import { AutomationEditor } from "@/components/automation-editor";
import { createClient } from "@/lib/supabase/server";
import { notFound } from "next/navigation";

export const runtime = "edge";

export default async function Automation({
  params,
}: {
  params: { id: string };
}) {
  const supabase = createClient();
  const { data: workflow } = await supabase
    .from("workflows")
    .select("*")
    .eq("id", params.id!)
    .single();
  if (workflow) {
    return <AutomationEditor workflow={workflow} />;
  } else {
    notFound();
  }
}

----------------------------------------

TITLE: Using NonRetriableError in Python Inngest Functions
DESCRIPTION: Shows how to use NonRetriableError in Python to prevent Inngest from retrying a function or step when the error is not expected to be resolved by retrying.

LANGUAGE: python
CODE:
@client.create_function(
    fn_id="import-item-data",
    retries=0,
    trigger=inngest.TriggerEvent(event="store/import.requested"),
)
async def fn_async(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    def step_1() -> None:
        raise inngest.NonRetriableError("non-retriable-step-error")

    step.run("step_1", step_1)

----------------------------------------

TITLE: Simple Function Example in Go
DESCRIPTION: Illustrates a simple Inngest function in Go with multiple steps, explaining the execution model and how to properly structure steps to avoid repeated execution of non-deterministic logic.

LANGUAGE: go
CODE:
import (
    "fmt"
    "github.com/inngest/inngest-go"
    "github.com/inngest/inngest-go/step"
)

inngestgo.CreateFunction(
	inngestgo.FunctionOpts{ID: "simple-function"},
	inngestgo.EventTrigger("test/simple.function", nil),
	func(ctx context.Context, input inngestgo.Input) (any, error) {
		fmt.Println("hello")

		_, err := step.Run("a", func() error {
			fmt.Println("a")
			return nil
		})
		if err != nil {
			return nil, err
		}

		_, err = step.Run("b", func() error {
			fmt.Println("b")
			return nil
		})
		if err != nil {
			return nil, err
		}

		_, err = step.Run("c", func() error {
			fmt.Println("c")
			return nil
		})
		if err != nil {
			return nil, err
		}

		return nil, nil
	},
)

LANGUAGE: go
CODE:
import (
    "fmt"
    "github.com/inngest/inngest-go"
    "github.com/inngest/inngest-go/step"
)

inngest.CreateFunction(
	"simple-function",
	inngest.EventTrigger("test/simple.function"),
	func(ctx context.Context, step inngest.Step) error {
		if _, err := step.Run("hello", func() error {
			fmt.Println("hello")
			return nil
		}); err != nil {
			return err
		}

		if _, err := step.Run("a", func() error {
			fmt.Println("a")
			return nil
		}); err != nil {
			return err
		}

		if _, err := step.Run("b", func() error {
			fmt.Println("b")
			return nil
		}); err != nil {
			return err
		}

		if _, err := step.Run("c", func() error {
			fmt.Println("c")
			return nil
		}); err != nil {
			return err
		}

		return nil
	},
)

----------------------------------------

TITLE: Running Inngest Website in Development Mode
DESCRIPTION: Command to start the Inngest website in development mode, which enables automatic rebuilding and page refreshing on code changes. The app will be accessible at http://localhost:3000.

LANGUAGE: sh
CODE:
$ pnpm dev

----------------------------------------

TITLE: Fan-out Image Processing with Inngest Events
DESCRIPTION: Demonstrates how to use Inngest to fan out image processing tasks by sending events for each image, allowing for parallel processing with higher concurrency.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "shopify-product-import", concurrency: 10 },
  { event: "shopify/import.requested" },
  async ({ event, step }) => {
    // --- See first code snippet above for the setup ---

    for (let product of allProducts) {
      // Fetch all images from each product
      const response = await step.run("fetch-images-product", async () => {
        return await shopify.rest.Image.all({
          session: session,
          product_id: product.id,
        })
      })
      // Turn the image list into a series of events to send
      const events = response.images.map((image) => ({
        name: "shopify/copy.image",
        data: {
          imageId: image.id,
          imageUrl: image.src,
          storeId: event.data.storeId,
          productId: product.id,
        },
      }))
      // Now, we send events in bulk to Inngest
      await step.sendEvent(events)
    }
  }
)

----------------------------------------

TITLE: Implementing Event Waiting in Inngest v3
DESCRIPTION: Example showing how to wait for events using step.waitForEvent() in Inngest v3. Demonstrates waiting for invoice approval and subscription creation with custom matching conditions.

LANGUAGE: typescript
CODE:
// Wait 7 days for an approval and match invoice IDs
const approval = await step.waitForEvent("wait-for-approval", {
  event: "app/invoice.approved",
  timeout: "7d",
  match: "data.invoiceId",
});

// Wait 30 days for a user to start a subscription
// on the pro plan
const subscription = await step.waitForEvent("wait-for-subscription", {
  event: "app/subscription.created",
  timeout: "30d",
  if: "event.data.userId == async.data.userId && async.data.billing_plan == 'pro'",
});

----------------------------------------

TITLE: Implementing Conditional Steps in Agentic Workflow
DESCRIPTION: TypeScript code showing how to implement conditional steps in an agentic workflow based on the results of previous steps, using Inngest and Weaviate.

LANGUAGE: typescript
CODE:
import { openai } from "inngest";
import { inngest } from "./inngest-client";
import { weaviate } from "./weaviate-client";

export const generateMeal = inngest.createFunction(
  { id: "generate-meal", concurrency: 10 },
  { event: "meal.generate" },
  async ({ event, step }) => {
    // retrieve the input parameters from our trigger event
    const { participantsCount, preferences, cuisine_type } = event.data;

    // Query relevant recipes based on cusine type preference
    let relevantRecipes = await step.run("query-recipes", async () => {
      // ...
    });

    // Look for allergies in the food preferences
    const allergiesAnalysis = await step.ai.infer("Allergies analysis", {
      // ...
    });

    let ingredientsAlternatives: any[] = [];

    // run a conditional step based on `allergiesAnalysis` result
    if (allergiesAnalysis.choices[0].message.content !== "not allergies") {
      // Query relevant recipes based on cusine type preference
      ingredientsAlternatives = await step.run(
        "query-ingredients-alternatives",
        async () => {
          const collection = client.collections.get(
            "Thefoodprocessoringredientsalternatives"
          );
          const query = allergiesAnalysis.choices[0].message.content!;
          const result = await collection.query.nearText(query, {
            limit: 10,
          });
          return result.objects;
        }
      );
    }
    // ...
  }
);

----------------------------------------

TITLE: Value Expression Examples for Keys in JavaScript for Inngest
DESCRIPTION: Shows how to use value expressions to create keys for concurrency, rate limiting, debounce, or idempotency in Inngest. Examples include using a single field and concatenating multiple fields.

LANGUAGE: javascript
CODE:
// Use the user's id as a concurrency key
"event.data.id" // => "1234"

// Concatenate two strings together to create a unique key
`event.data.userId + "-" + event.type` // => "user_1234-signup"

----------------------------------------

TITLE: Sending Events in Inngest Function using Python
DESCRIPTION: This code snippet demonstrates how to create an Inngest function that sends an event. It uses the @inngest_client.create_function decorator to define the function and its trigger. The function then uses the step.send_event method to send a new event named 'foo'.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="my_function",
    trigger=inngest.TriggerEvent(event="app/my_function"),
)
async def fn(
    ctx: inngest.Context,
    step: inngest.Step,
) -> list[str]:
    return await step.send_event("send", inngest.Event(name="foo"))

----------------------------------------

TITLE: Type-Safe Event Sending in Next.js API
DESCRIPTION: Example of sending typed events from a Next.js API route with proper type checking for event payload.

LANGUAGE: typescript
CODE:
import type { NextApiRequest, NextApiResponse } from "next";
import { inngest } from "../../inngest/client";

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const user = createNewUser(req.body.email, req.body.password, req.body.name);

  await inngest.send({
    name: "user/new.signup",
    data: {
      email: user.email,
      name: user.name,
    }
  });
  res.status(200).json({ success: true });
}

----------------------------------------

TITLE: Searching for Errors Using CEL Expression
DESCRIPTION: This CEL expression demonstrates how to search for specific errors in Inngest, matching the error name and message.

LANGUAGE: cel
CODE:
output.name == "NonRetriableError" && output.message == "Failed to import data"

----------------------------------------

TITLE: Implementing Cancellable Reminder Function in Python
DESCRIPTION: Python implementation of a cancellable reminder function using Inngest. Demonstrates function creation with sleep_until and cancellation configuration.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="schedule-reminder",
    trigger=inngest.TriggerEvent(event="tasks/reminder.created"),
    cancel=[inngest.Cancel(
                event="tasks/reminder.deleted",
                if_exp="async.data.reminderId == event.data.reminderId"
            )],
)
async def fn(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    await step.sleep_until(
        "sleep-until-remind-at-time",
         ctx.event.data["remind_at"],
    )
    await step.run("send-reminder-push", send_reminder_push)

async def send_reminder_push() -> None:
    pass

----------------------------------------

TITLE: Defining Inngest Function in App Router
DESCRIPTION: Code to define an Inngest function in Next.js App Router.

LANGUAGE: typescript
CODE:
import { inngest } from "./client";

export const helloWorld = inngest.createFunction(
  { id: "hello-world" },
  { event: "test/hello.world" },
  async ({ event, step }) => {
    await step.sleep("wait-a-moment", "1s");
    return { message: `Hello ${event.data.email}!` };
  },
);

----------------------------------------

TITLE: Return Value Serialization Example
DESCRIPTION: Shows how return values from step.run() are automatically serialized as JSON, including handling of ObjectId and Date objects.

LANGUAGE: typescript
CODE:
const output = await step.run("create-user", () => {
  return { id: new ObjectId(), createdAt: new Date() };
});
/*
{
  "id": "647731d1759aa55be43b975d",
  "createdAt": "2023-05-31T11:39:18.097Z"
}
*/

----------------------------------------

TITLE: Configuring Start Timeout for Inngest Function in TypeScript
DESCRIPTION: This snippet demonstrates how to set a 'timeouts.start' property to cancel a function if it takes longer than 10 seconds to start. It includes creating a function to schedule reminders and send push notifications.

LANGUAGE: typescript
CODE:
const scheduleReminder = inngest.createFunction(
  {
    id: "schedule-reminder",
    timeouts: {
      // If the run takes longer than 10s to start, cancel the run.
      start: "10s",
    },
  }
  { event: "tasks/reminder.created" },
  async ({ event, step }) => {
    await step.run('send-reminder-push', async () => {
      await pushNotificationService.push(event.data.reminder)
    })
  }
  // ...
);

----------------------------------------

TITLE: Loop Example in Python
DESCRIPTION: Illustrates an Inngest function in Python that imports products from a Shopify store, iterating over all pages and combining products into a single array. It shows how to properly structure loops and handle non-deterministic logic within steps.

LANGUAGE: python
CODE:
@inngest.create_function(
    id="shopify-product-import",
    trigger=inngest.TriggerEvent(event="shopify/import.requested")
)
async def shopify_product_import(ctx: inngest.Context, step: inngest.Step):
    all_products = []
    cursor = None
    has_more = True

    # Use the event's "data" to pass key info like IDs
    # Note: in this example is deterministic across multiple requests
    # If the returned results must stay in the same order, wrap the db call in step.run()
    session = await database.get_shopify_session(ctx.event.data["store_id"])

    while has_more:
        page = await step.run(f"fetch-products-{cursor}", lambda: shopify.Product.all(
            session=session,
            since_id=cursor
        ))
        # Combine all of the data into a single list
        all_products.extend(page.products)
        if len(page.products) == 50:
            cursor = page.products[49].id
        else:
            has_more = False

    # Now we have the entire list of products within all_products!

----------------------------------------

TITLE: Testing Deployed Inngest Endpoint on Modal
DESCRIPTION: Uses curl to send a request to the deployed Inngest endpoint on Modal to verify successful deployment.

LANGUAGE: sh
CODE:
$ curl https://test-fast-api-fastapi-app.modal.run/api/inngest

----------------------------------------

TITLE: Inngest Cancellation Event Payload Structure
DESCRIPTION: Example JSON payload structure for an Inngest function cancellation event, showing the format of the data received when a function is cancelled.

LANGUAGE: json
CODE:
{
  "name": "inngest/function.cancelled",
  "data": {
    "error": {
      "error": "function cancelled",
      "message": "function cancelled",
      "name": "Error"
    },
    "event": {
      "data": {
        "importId": "bdce1b1b-6e3a-43e6-84c2-2deb559cdde6"
      },
      "id": "01JDJK451Y9KFGE5TTM2FHDEDN",
      "name": "contacts/import.requested",
      "ts": 1732558407003,
      "user": {}
    },
    "events": [
      {
        "data": {
          "importId": "bdce1b1b-6e3a-43e6-84c2-2deb559cdde6"
        },
        "id": "01JDJK451Y9KFGE5TTM2FHDEDN",
        "name": "contacts/import.requested",
        "ts": 1732558407003,
        "user": {}
      }
    ],
    "function_id": "newsletter-app-import-all-contacts",
    "run_id": "01JDJKGTGDVV4DTXHY6XYB7BKK"
  },
  "id": "01JDJKH1S5P2YER8PKXPZJ1YZJ",
  "ts": 1732570023717
}

----------------------------------------

TITLE: Defining Workflow Schema in Sanity
DESCRIPTION: TypeScript schema definition for workflows in Sanity CMS. Defines the structure for workflows including title, trigger, accountId, and an array of possible actions.

LANGUAGE: typescript
CODE:
import {defineField, defineType} from 'sanity'

export default defineType({
    name: 'workflow',
    type: 'document',
    title: 'Workflow',
    fields: [
        defineField({
            name: 'title',
            title: 'Title',
            type: 'string',
            validation: (Rule) => Rule.required(),
        }),
        defineField({
            name: 'trigger',
            title: 'Trigger',
            type: 'string',
            validation: (Rule) => Rule.required(),
        }),
        defineField({
            name: 'accountId',
            title: 'Account ID',
            type: 'string',
            validation: (Rule) => Rule.required(),
        }),
        defineField({
            name: 'actions',
            title: 'Actions',
            type: 'array',
            of: [{type: 'delay'}, {type:'filter'}, {type: 'sendEmail'}, {type: 'slack'}]
        })
    ]
})

----------------------------------------

TITLE: Implementing onSendEvent Middleware in TypeScript
DESCRIPTION: Example implementation of Inngest middleware showing onSendEvent lifecycle hooks for handling event sending operations. Includes methods for transforming input before sending events and handling output after events are sent.

LANGUAGE: typescript
CODE:
const myMiddleware = new InngestMiddleware({
  name: "My Middleware",
  init: ({ client, fn }) => {
    return {
      onSendEvent() {
        return {
          transformInput({ payloads }) {
            // ...
          },
          transformOutput() {
            // ...
          },
        };
      },
    };
  },
});

----------------------------------------

TITLE: Configuring Priority in Python for Inngest Function
DESCRIPTION: This snippet illustrates how to set up priority for an Inngest function in Python. It uses a decorator to configure the function with the same priority logic as the other examples.

LANGUAGE: python
CODE:
@inngest.create_function(
  id="ai-generate-summary",
  priority=inngest.Priority(
    run="event.data.account_type == 'enterprise' ? 120 : 0",
  ),
  trigger=inngest.Trigger(event="ai/summary.requested")
)
async def ai_generate_summary(ctx: inngest.Context):
    # This function will be prioritized based on the account type

----------------------------------------

TITLE: Implementing Sleep Until in Inngest Python Function
DESCRIPTION: Example of using sleep_until in an Inngest function to pause execution until a specified datetime. The function accepts a step_id and a datetime object to determine when execution should resume.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="my_function",
    trigger=inngest.TriggerEvent(event="app/my_function"),
)
async def fn(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    await step.sleep_until(
        "zzz",
        datetime.datetime.now() + datetime.timedelta(seconds=2),
    )

----------------------------------------

TITLE: Configuring Start and Finish Timeouts for Inngest Function in TypeScript
DESCRIPTION: This snippet demonstrates how to set both 'timeouts.start' and 'timeouts.finish' properties in TypeScript. It cancels the function if it takes longer than 10 seconds to start or 30 seconds to finish after starting.

LANGUAGE: typescript
CODE:
const scheduleReminder = inngest.createFunction(
  {
    id: "schedule-reminder",
    timeouts: {
      // If the run takes longer than 10s to start, cancel the run.
      start: "10s",
      // And if the run takes longer than 30s to finish after starting, cancel the run.
      finish: "30s",
    },
  }
  { event: "tasks/reminder.created" },
  async ({ event, step }) => {
    await step.run('send-reminder-push', async () => {
      await pushNotificationService.push(event.data.reminder)
    })
  }
  // ...
);

----------------------------------------

TITLE: Installing @inngest/test Package
DESCRIPTION: Commands for installing the @inngest/test package using different package managers.

LANGUAGE: shell
CODE:
npm install -D @inngest/test

yarn add -D @inngest/test

pnpm add -D @inngest/test

bun add -d @inngest/test

deno add --dev @inngest/test
# or with JSR...
deno add --dev jsr:@inngest/test

----------------------------------------

TITLE: HTTP API Event Sending - cURL
DESCRIPTION: Example of sending events via HTTP API using cURL for systems without SDK support.

LANGUAGE: bash
CODE:
curl -X POST https://inn.gs/e/$INNGEST_EVENT_KEY \
  -H 'Content-Type: application/json' \
  --data '{
    "name": "user.signup",
    "data": {
      "userId": "645ea8289ad09eac29230442"
    }
  }'

----------------------------------------

TITLE: Creating Chat Completion Function with Enhanced Searchable Output in Inngest
DESCRIPTION: This improved version of the chat completion function returns the entire LLM completion object, enabling more powerful search patterns.

LANGUAGE: ts
CODE:
export const chatCompletion = inngest.createFunction(
  {
    name: "Create chat completion",
    id: "create-chat-completion",
    throttle: {
      limit: 5,
      period: "60s"
    },
  },
  { event: "ai/chat.completion" },
  async ({ event, step }) => {
    const completion = await openai.chat.completions.create({
      messages: event.data.messages,
      model: "gpt-3.5-turbo",
    });
    return completion;
  }
);

----------------------------------------

TITLE: Parallel Product Import with Promise.all and Inngest
DESCRIPTION: Shows how to use Promise.all with Inngest steps to perform parallel product imports, including a final step to send a completion notification.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "shopify-product-import", concurrency: 10 },
  { event: "shopify/import.requested" },
  async ({ event, step }) => {
    // --- See first code snippet above for the setup ---

    // Since step.run return a Promise, we iterate over all products
    // creating an array of step.run Promises - Inngest can handle it all!
    await Promise.all(
      allProducts.map((product) =>
        step.run("import-product", async () => {
          await database.upsertProduct({
            storeId: event.data.storeId,
            product,
          })
        })
      )
    )

    // Tell the user the import has been completed
    await step.run("import-completed-notification", async () => {
      const user = await database.getUser(event.data.userId)
      await sentEmail(user.email, "import_completed")
    })
  }
)

----------------------------------------

TITLE: Configuring Priority in Go for Inngest Function
DESCRIPTION: This snippet shows how to configure priority for an Inngest function in Go. It uses the same logic as the TypeScript example, prioritizing enterprise accounts.

LANGUAGE: go
CODE:
inngestgo.CreateFunction(
  &inngestgo.FunctionOpts{
    ID: "ai-generate-summary",
    Priority: &inngest.Priority{
      Run: inngestgo.StrPtr("event.data.account_type == 'enterprise' ? 120 : 0"),
    },
  },
  inngestgo.EventTrigger("ai/summary.requested", nil),
  func(ctx context.Context, input inngestgo.Input) (any, error) {
    // This function will be prioritized based on the account type
    return nil, nil
  },
)

----------------------------------------

TITLE: Creating and Serving Inngest App in Node.js
DESCRIPTION: This snippet demonstrates how to create an Inngest app called 'example-app' with one function using Node.js. It shows the usage of the Inngest client and the serve API handler.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";
import { serve } from "inngest/next"; // or your preferred framework
import { sendSignupEmail } from "./functions";

const inngest = new Inngest({ id: "example-app" });

serve({
  client: inngest,
  functions: [sendSignupEmail],
});

----------------------------------------

TITLE: Using Generic Input Type with Custom Event Data in Go
DESCRIPTION: Demonstrates how to use the updated Input type with generic parameters for custom event data structures. Shows implementation of a function that handles typed event data through Input parameter.

LANGUAGE: go
CODE:
type MyEventData struct {
	Message string `json:"message"`
}

_, err = inngestgo.CreateFunction(
	client,
	inngestgo.FunctionOpts{ID: "my-fn"},
	inngestgo.EventTrigger("my-event", nil),
	func(
		ctx context.Context,
		input inngestgo.Input[MyEventData],
	) (any, error) {
		fmt.Println(input.Event.Data.Message)
		return nil, nil
	},
)

----------------------------------------

TITLE: Creating Common Actions Middleware for Inngest Functions
DESCRIPTION: This snippet shows how to create middleware that provides common actions as steps to all Inngest functions. It wraps these actions in step.run() for cleaner function code.

LANGUAGE: typescript
CODE:
/**
 * Pass to a client to provide a set of actions as steps to all functions, or to
 * a function to provide a set of actions as steps only to that function.
 */
const inngest = new Inngest({
  id: "my-app",
  middleware: [
    createActionsMiddleware({
      getUser(id: string) {
        return db.user.get(id);
      },
    }),
  ],
});

inngest.createFunction(
  { id: "user-data-dump" },
  { event: "app/data.requested" },
  async ({ event, action: { getUser } }) => {
    // The first parameter is the step's options or ID
    const user = await getUser("get-user-details", event.data.userId);
  }
);

----------------------------------------

TITLE: Multi-tenant Concurrency with Keys
DESCRIPTION: Shows how to implement per-tenant concurrency limits using key expressions. This creates virtual queues for each unique key value to manage concurrent executions separately.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  {
    id: "generate-ai-summary",
    concurrency: [
      {
        key: "event.data.account_id",
        limit: 10,
      },
    ],
  },
  { event: "ai/summary.requested" },
  async ({ event, step }) => {
  }
);

LANGUAGE: go
CODE:
inngest.CreateFunction(
  &inngestgo.FunctionOpts{
    Name: "generate-ai-summary",
    Concurrency: []inngest.Concurrency{
      {
        Scope: "fn",
        Key:   "event.data.account_id",
        Limit: 10,
      }
    },
  },
  inngestgo.EventTrigger("ai/summary.requested", nil),
  func(ctx context.Context, input inngestgo.Input) (any, error) {
    return nil, nil
  },
)

----------------------------------------

TITLE: Multi-line Function Run Search in Inngest
DESCRIPTION: This snippet shows how to use multi-line search queries in the Function run search box. Each new line is implicitly joined with an '&&' operator.

LANGUAGE: txt
CODE:
event.data.organizationId == "org_ab1fd2"
output.verified == false

----------------------------------------

TITLE: Processing arXiv Search Results
DESCRIPTION: Implements paper content retrieval and formatting from arXiv search results, including PDF processing and content extraction.

LANGUAGE: typescript
CODE:
const papersContents = await step.run("search-arxiv", async () => {\n    if (\n    generateSearchQuery.choices[0].message.content.includes(\n        "<search_query>"\n    )\n    ) {\n    console.log("found search query!");\n    let searchQuery = (\n        generateSearchQuery.choices[0].message.content as string\n    ).match(/<search_query>(.*?)<\/search_query>/s)?.[1];\n    // remove quotes and line breaks\n    searchQuery = searchQuery?.replace(/["\n]/g, "");\n    console.log("search query:", searchQuery);\n    if (searchQuery) {\n        try {\n        let results = await searchArxiv(searchQuery, MAX_RESULTS);\n        console.log("results:", results);\n        const papersContents = [];\n        for (const result of results) {\n            let content = "";\n            try {\n            content = await getPaperContent(\n                result.link.replace("/abs/", "/pdf/")\n            );\n            } catch (error) {\n            console.error("Error getting paper content", error);\n            }\n            papersContents.push(`\n                ------------------------------\n                Title: ${result.title}\n                Authors: ${result.authors.join(", ")}\n                Summary: ${result.summary}\n                Content: \n ${content}\n                ------------------------------\n                `);\n        }\n        return papersContents.join("\n\n");\n        } catch (error) {\n        console.error("Error calling tool", error);\n        }\n    }\n    }\n});

----------------------------------------

TITLE: Defining GenericEvent Type with Custom Event Data in Go
DESCRIPTION: Shows the updated way to define GenericEvent types without user type parameters, using only event data type as a generic parameter.

LANGUAGE: go
CODE:
type MyEventData struct {
	Message string `json:"message"`
}

type MyEvent = inngestgo.GenericEvent[MyEventData]

----------------------------------------

TITLE: Configuring Production-Only Cron Jobs in JavaScript
DESCRIPTION: Example showing how to conditionally render cron jobs based on the environment, allowing for production-only execution while maintaining manual trigger capability in other environments.

LANGUAGE: javascript
CODE:
process.env.NODE_ENV === "production" ? { cron: "* * *" } : { event: "dev/manualXYZ" }

----------------------------------------

TITLE: Implementing Simple Rollbacks in Inngest Function (Go)
DESCRIPTION: This Go snippet shows how to implement simple rollbacks in an Inngest function. It includes a non-critical step and a critical step with error handling and a rollback mechanism.

LANGUAGE: go
CODE:
inngestgo.CreateFunction(
	inngestgo.FunctionOpts{ID: "add-data"},
	inngestgo.EventTrigger("app/row.data.added", nil),
	func(ctx context.Context, input inngestgo.Input[RowDataAddedEvent]) (any, error) {
		_, _ = step.Run(ctx, "non-critical-step", func(ctx context.Context) (any, error) {
			return updateMetric()
		})

		_, err := step.Run(ctx, "create-row", func(ctx context.Context) (any, error) {
			_, err := createRow(input.Event.Data.RowID)
			if err != nil {
				return nil, err
			}
			return addDetail(input.Event.Data.Entry)
		})
		if err != nil {
			_, err = step.Run(ctx, "rollback-row-creation", func(ctx context.Context) (any, error) {
				return removeRow(input.Event.Data.RowID)
			})
			if err != nil {
				return nil, err
			}
		}

		return nil, nil
	},
)

----------------------------------------

TITLE: Implementing Weekly Email Activity Handler in Python
DESCRIPTION: Python implementation of a function that processes individual user email events. Triggered by app/weekly-email-activity.send events.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="weekly-activity-send-email",
    trigger=inngest.TriggerEvent(event="app/weekly-email-activity.send")
)
async def send_reminder(ctx: inngest.Context, step: inngest.Step):
    async def load_data():
        return await load_user_data(ctx.event.data["user"]["id"])
    
    data = await step.run("load-user-data", load_data)

    async def send():
        return await send_email(ctx.event.data["user"], data)
    
    await step.run("email-user", send)

----------------------------------------

TITLE: Creating an Inngest Function for Database Events
DESCRIPTION: Demonstrates how to create an Inngest function that responds to database insert events by generating and storing embeddings for new books. The function showcases step-based execution and error handling.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "create-embedding-for-new-book" },
  { event: "db/books.inserted" },
  async ({ event, step }) => {
    const embedding = await step.run("create-embedding", async () => {
      const metadata = generateMetadata(event.data.new);
      return await createEmbedding(metadata);
    });
    await step.run("insert-embedding", async () => {
      const id = event.data.new.id.data;
      return await sql`UPDATE SET embedding = ${embedding} WHERE id = ${id}`
    })
  }
)

----------------------------------------

TITLE: Throwing Standard Errors in TypeScript Inngest Functions
DESCRIPTION: Demonstrates how to throw standard errors in Inngest functions and steps, which are automatically handled and retried by Inngest.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  { id: "import-item-data" },
  { event: "store/import.requested" },
  async ({ event }) => {

    // throwing a standard error
    if (!event.itemId) {
      throw new Error("Item ID is required");
    }

    // throwing an error within a step
    const item = await step.run('fetch-item', async () => {
      const response = await fetch(`https://api.ecommerce.com/items/${event.itemId}`);
      if (response.status === 500) {
        throw new Error("Failed to fetch item from ecommerce API");
      }
      // ...
    });
  }
);

----------------------------------------

TITLE: Composing Writer Pipeline with Parallel Processing in TypeScript
DESCRIPTION: Demonstrates how to compose multiple Inngest functions into a single pipeline, using parallel processing for site indexing and outline creation.

LANGUAGE: typescript
CODE:
export const writerPipeline = client.createPipeline(
  { id: "writer-pipeline" },
  { event: Events.WRITER_PIPELINE },
  async ({ event, step }) => {
    const { keywords, url } = event.data as WriterPipelineRequest;

    const [siteResult, ...outlineResults] = await Promise.all([
      step.invoke("index-site", async () => {
        function: indexSite,
  data: { url },
      }),
      ...keywords.map(async (keyword) => {
        return step.invoke(`write-outline-${keyword}`, {
          function: writeOutline,
          data: { keyword },
        });
      })
    ]);

    // Write the article
    // Publish the article
    // Send notifications
  }
);

----------------------------------------

TITLE: Creating New Inngest Client
DESCRIPTION: Shows how to create a new Inngest client using the NewClient function, which replaces the deprecated DefaultClient. AppID is now a required field.

LANGUAGE: go
CODE:
client, err := inngest.NewClient(inngest.ClientOpts{AppID: "my-app"})

----------------------------------------

TITLE: Delaying Jobs with Go in Inngest
DESCRIPTION: Example showing how to delay job execution using step.Sleep() method in Go. The function demonstrates waiting for 4 hours before executing further code.

LANGUAGE: go
CODE:
import (
    "time"
    "github.com/inngest/inngest-go"
    "github.com/inngest/inngest-go/step"
)

inngestgo.CreateFunction(
    inngest.FunctionOpts{
        ID: "send-signup-email",
    },
    inngest.TriggerEvent("app/user.created"),
    func(ctx *inngest.Context) error {
        // business logic

        step.Sleep("wait-for-the-future", 4 * time.Hour)

        _, err = step.Run("do-some-work-in-the-future", func(ctx *inngest.StepContext) (any, error) {
            // Code here runs in the future automatically.
            return nil, nil
        })
        return err, nil
    },
)

----------------------------------------

TITLE: Sending Events to Inngest from Next.js API Route
DESCRIPTION: This snippet demonstrates how to send events to Inngest from a Next.js API route. It shows the process of capturing user signup data and sending it as an event to trigger background functions.

LANGUAGE: javascript
CODE:
import { Inngest } from "inngest";

export default async function handler(req, res) {
  const { email, password, signupReason } = req.body;
  const result = await createNewUser(email, password);

  // Send an event over to Inngest to trigger your function
  const inngest = new Inngest({ eventKey: process.env.INNGEST_EVENT_KEY });
  await inngest.send({
    name: "user.signup",
    data: { signupReason },
    user: { email },
  });

  res.status(200).json({ success: true });
}

----------------------------------------

TITLE: Creating and Serving Inngest App in Python (FastAPI)
DESCRIPTION: This snippet demonstrates how to create an Inngest app using Python with FastAPI. It sets up logging, creates an Inngest client, defines an async function, and serves the app using FastAPI.

LANGUAGE: python
CODE:
import logging
import inngest
import fastapi
import inngest.fast_api


logger = logging.getLogger("uvicorn.inngest")
logger.setLevel(logging.DEBUG)

inngest_client = inngest.Inngest(app_id="fast_api_example", logger=logger)

@inngest_client.create_function(
    fn_id="hello-world",
    trigger=inngest.TriggerEvent(event="say-hello"),
)
async def hello(
    ctx: inngest.Context,
    step: inngest.Step,
) -> str:
    return "Hello world!"

app = fastapi.FastAPI()

inngest.fast_api.serve(
    app,
    inngest_client,
    [hello],
)

----------------------------------------

TITLE: Docker Compose Configuration for Inngest
DESCRIPTION: Example Docker Compose configuration that includes both an app service and the Inngest Dev Server service. It sets up the necessary environment variables and port mappings for local development.

LANGUAGE: yaml
CODE:
services:
  app:
    build: ./app
    environment:
      - INNGEST_DEV=1
      - INNGEST_BASE_URL=http://inngest:8288
    ports:
      - '3000:3000'
  inngest:
    image: inngest/inngest:v0.27.0
    command: 'inngest dev -u http://app:3000/api/inngest'
    ports:
      - '8288:8288'

----------------------------------------

TITLE: Sending Welcome and Delayed Follow-up Emails with Clerk Webhook Event in TypeScript
DESCRIPTION: This function sends a welcome email immediately and a follow-up email after 3 days when a 'clerk/user.created' event occurs. It uses step.run() for automatic retries and step.sleep() for the delay.

LANGUAGE: typescript
CODE:
const sendWelcomeEmail = inngest.createFunction(
  { id: 'send-welcome-email' },
  { event: 'clerk/user.created' },
  async ({ event, step }) => {
    const { user } = event.data;
    const { first_name } = user;
    const email = user.email_addresses.find(e =>
      e.id === user.primary_email_address_id
    ).email;

    // Wrapping each distinct task in step.run() ensures that each
    // will be retried automatically on error and will not be re-run
    await step.run('welcome-email', async () => {
      await emails.sendWelcomeEmail({ email, first_name })
    });

    // wait 3 days before second email
    await step.sleep('wait-3-days', '3 days');

    await step.run('trial-offer-email', async () => {
      await emails.sendTrialOfferEmail({ email, first_name })
    });
  }
)

----------------------------------------

TITLE: Winston Logger Configuration with Inngest
DESCRIPTION: Example of configuring Winston logger with Datadog integration and passing it to the Inngest client.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";
import winston from "winston";

/// Assuming we're deploying to Vercel.
/// Other providers likely have their own pre-defined environment variables you can use.
const env = process.env.VERCEL_ENV || "development";
const ddTransportOps = {
  host: "http-intake.logs.datadoghq.com",
  path: `/api/v2/logs?dd-api-key=${process.env.DD_API_KEY}&ddsource=nextjs&service=inngest&ddtags=env:${env}`,
  ssl: true,
};

const logger = winston.createLogger({
  level: "info",
  exitOnError: false,
  format: winston.format.json(),
  transports: [
    new winston.transports.Console(),
    new winston.transports.Http(ddTransportOps),
  ],
});

// Pass `logger` to the Inngest client, and this winston logger will be accessible within functions
export const inngest = new Inngest({
  id: "my-awesome-app",
  logger: logger,
  // ...
});

----------------------------------------

TITLE: Defining Inngest Function with Pydantic Event Handling in Python
DESCRIPTION: Creates an Inngest function that uses the Pydantic event model for type-safe event handling. It demonstrates how to convert the received Inngest Event to a Pydantic model within the function.

LANGUAGE: python
CODE:
@client.create_function(
    fn_id="handle-upvoted-post",
    trigger=inngest.TriggerEvent(event=PostUpvotedEvent.name),
)
def fn(
    ctx: inngest.Context,
    step: inngest.StepSync,
) -> None:
    event = PostUpvotedEvent.from_event(ctx.event)

----------------------------------------

TITLE: Initializing Basic Agent with Prompt - TypeScript
DESCRIPTION: Sets up the initial coding agent with basic prompt structure using AgentKit's createAgent function, configuring the system prompt and Claude model settings.

LANGUAGE: typescript
CODE:
import { createAgent, anthropic } from "@inngest/agent-kit"

const agent = createAgent({
    name: "Coding Agent",
    description: "An expert coding agent",
    system: `You are a coding agent help the user to achieve the described task.

    When running commands, keep in mind that the terminal is non-interactive, remind to use the '-y' flag when running commands.

    Once the task completed, you should return the following information:
    <task_summary>
    </task_summary>

    Think step-by-step before you start the task.
    `,
    model: anthropic({
    model: "claude-3-5-sonnet-latest",
    max_tokens: 4096,
}),  
})

----------------------------------------

TITLE: Mocking Sleep and WaitForEvent Steps
DESCRIPTION: Examples of mocking sleep and waitForEvent steps in Inngest function tests.

LANGUAGE: typescript
CODE:
const myFunction = inngest.createFunction(
  { id: "my-function" },
  { event: "user.created" },
  async ({ event, step }) => {
    await step.sleep("one-day-delay", "1d");
    return { message: "success" };
  }
)

t.execute({
  steps: [
    {
      id: "one-day-delay",
      handler() {}, // no return value necessary
    },
  ],
});

----------------------------------------

TITLE: Structuring Inngest Event Data in Retool
DESCRIPTION: Demonstrates how to structure the JSON body for an Inngest event in a Retool resource query, including event name and custom data fields.

LANGUAGE: json
CODE:
{ "user_id": "{{runBackfillForm.data.userId}}", "agent_id": "{{current_user.email}}" }

----------------------------------------

TITLE: Incorrect Nested Steps Implementation
DESCRIPTION: Example showing incorrect implementation of nested steps in Inngest.

LANGUAGE: typescript
CODE:
await step.run("a", async () => {
  const someValue = "...";
  await step.run("b", () => {
    return use(someValue);
  });
});

----------------------------------------

TITLE: Initializing Minimal Inngest Go Application
DESCRIPTION: Demonstrates the basic setup of an Inngest application including client creation, function definition, and server initialization. Shows the new structure required in v0.8.

LANGUAGE: go
CODE:
import (
	"context"
	"net/http"

	"github.com/inngest/inngestgo"
)

func main() {
	client, err := inngestgo.NewClient(inngestgo.ClientOpts{AppID: "my-app"})
	if err != nil {
		panic(err)
	}

	_, err = inngestgo.CreateFunction(
		client,
		inngestgo.FunctionOpts{ID: "my-fn"},
		inngestgo.EventTrigger("my-event", nil),
		func(
			ctx context.Context,
			input inngestgo.Input[inngestgo.GenericEvent[any, any]],
		) (any, error) {
			return "Hello, world!", nil
		},
	)
	if err != nil {
		panic(err)
	}

	_ = http.ListenAndServe(":8080", client.Serve())
}

----------------------------------------

TITLE: Using Cloudflare Workers AI in Inngest Functions
DESCRIPTION: This example shows how to use the Cloudflare Workers AI middleware within an Inngest function. It demonstrates accessing the 'ai' object to run a language model.

LANGUAGE: typescript
CODE:
import { inngest } from "./client";

export default inngest.createFunction(
  { id: "hello-world" },
  { event: "demo/event.sent" },
  async ({ ai }) => {
    // `ai` is typed and can be used directly or within a step
    const response = await ai.run("@cf/meta/llama-2-7b-chat-int8", {
      prompt: "What is the origin of the phrase Hello, World",
    });
  }
);

----------------------------------------

TITLE: Pausing Execution Until a Given Date in Python
DESCRIPTION: Shows how to use step.sleep_until() to pause function execution until a specific date and time in Python. This example demonstrates sleeping until 2 seconds from the current time.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="my_function",
    trigger=inngest.TriggerEvent(event="app/my_function"),
)
async def fn(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    await step.sleep_until(
        "zzz",
        datetime.datetime.now() + datetime.timedelta(seconds=2),
    )

----------------------------------------

TITLE: Triggering a Scheduled Function with Timestamp in TypeScript using Inngest
DESCRIPTION: This code shows how to trigger a scheduled function by sending an event with a future timestamp. It uses the inngest.send() method to dispatch an event with a payload containing user data and a message, along with a timestamp set 5 minutes in the future.

LANGUAGE: typescript
CODE:
await inngest.send({
  name: "notifications/reminder.scheduled",
  data: {
    user: { email: "johnny.utah@fbi.gov" }
    message: "Don't forget to catch the wave at 3pm",
  },
  // Include the timestamp for 5 minutes in the future:
  ts: Date.now() + 5 * 60 * 1000,
});

----------------------------------------

TITLE: Configuring Debounce in TypeScript
DESCRIPTION: Example showing how to set up debounce for an Inngest function in TypeScript. Demonstrates configuration of debounce period, timeout, and key based on account ID.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  {
    id: "handle-webhook",
    debounce: {
      key: "event.data.account_id",
      period: "5m",
      timeout: "10m",
    },
  },
  { event: "intercom/company.updated" },
  async ({ event, step }) => {
    // This function will only be scheduled 5 minutes after events are no longer received with the same
    // `event.data.account_id` field.
    //
    // `event` will be the last event in the series received.
  }
);

----------------------------------------

TITLE: Type Union Event Definition
DESCRIPTION: Demonstrates how to define event types using TypeScript unions for strongly typed event handling.

LANGUAGE: typescript
CODE:
import { EventSchemas, Inngest } from "inngest";

type AppAccountCreated = {
  name: "app/account.created";
  data: {
    userId: string;
  };
};

type AppSubscriptionStarted = {
  name: "app/subscription.started";
  data: {
    userId: string;
    planId: string;
  };
};

type Events = AppAccountCreated | AppSubscriptionStarted;

export const inngest = new Inngest({
  schemas: new EventSchemas().fromUnion<Events>(),
});

----------------------------------------

TITLE: Querying Available Jobs with Lock Prevention
DESCRIPTION: JavaScript function to query and update the status of available jobs in the queue, using SKIP LOCKED to prevent race conditions.

LANGUAGE: js
CODE:
async function getQueueItem(jobType) {
  return await sql`
    UPDATE debounce_job_queue
    SET status = 'PROCESSING'
    WHERE id = (
      SELECT id FROM debounce_job_queue
      WHERE status = 'QUEUED' and scheduled_at <= now() + INTERVAL '2 minute'
      ORDER BY scheduled_at ASC
      FOR UPDATE SKIP LOCKED
      LIMIT 1
    )
    RETURNING id, payload;
  `;
}

----------------------------------------

TITLE: Creating Stripe Trial Subscription with Clerk and Inngest
DESCRIPTION: Implements a function to create a Stripe customer and start a 14-day trial subscription when a new user signs up through Clerk. The function runs in parallel with other clerk/user.created event handlers.

LANGUAGE: typescript
CODE:
const createTrial = inngest.createFunction(
  { name: "Create trial", id: "create-trial" },
  { event: "clerk/user.created" },
  async ({ event, step }) => {
    const name = event.data.first_name + " " + event.data.last_name;
    const email = event.data.email_addresses[0].email_address;

    const customer = await step.run('create-customer', async () => {
      return await stripe.customers.create({
        name,
        email,
      });
    })

    await step.run('create-subscription', async () => {
      return await stripe.subscriptions.create({
        customer: customer.id,
        items: [
          {
            price: 'price_1MowQULkdIwHu7ixraBm864M',
          },
        ],
        trial_period_days: 14,
      });
    })
  }
)

----------------------------------------

TITLE: Example Payload for Inngest Function Cancellation Event in JSON
DESCRIPTION: This JSON snippet illustrates the structure of the 'inngest/function.cancelled' event payload. It includes details about the cancelled function, such as the error message, original event data, function ID, and run ID. The payload also contains timestamps and unique identifiers for the cancellation event itself.

LANGUAGE: json
CODE:
{
  "name": "inngest/function.cancelled",
  "data": {
    "error": {
      "error": "function cancelled",
      "message": "function cancelled",
      "name": "Error"
    },
    "event": {
      "data": {
        "content": "Yost LLC explicabo eos",
        "transcript": "s3://product-ideas/carber-vac-release.txt",
        "userId": "bdce1b1b-6e3a-43e6-84c2-2deb559cdde6"
      },
      "id": "01JDJK451Y9KFGE5TTM2FHDEDN",
      "name": "integrations/export.requested",
      "ts": 1732558407003,
      "user": {}
    },
    "events": [
      {
        "data": {
          "content": "Yost LLC explicabo eos",
          "transcript": "s3://product-ideas/carber-vac-release.txt",
          "userId": "bdce1b1b-6e3a-43e6-84c2-2deb559cdde6"
        },
        "id": "01JDJK451Y9KFGE5TTM2FHDEDN",
        "name": "integrations/export.requested",
        "ts": 1732558407003
      }
    ],
    "function_id": "demo-app-export",
    "run_id": "01JDJKGTGDVV4DTXHY6XYB7BKK"
  },
  "id": "01JDJKH1S5P2YER8PKXPZJ1YZJ",
  "ts": 1732570023717
}

----------------------------------------

TITLE: Defining Middleware Hooks in Python for Inngest SDK
DESCRIPTION: This snippet demonstrates the structure and arguments for various middleware hooks in the Inngest Python SDK. It includes hooks for transforming input and output, handling memoization, execution, and event sending.

LANGUAGE: python
CODE:
def transform_input(ctx: Context, function: Function, steps: StepMemos):
    # Implementation here

def before_memoization():
    # Implementation here

def after_memoization():
    # Implementation here

def before_execution():
    # Implementation here

def after_execution():
    # Implementation here

def transform_output(result: TransformOutputResult):
    # Implementation here

def before_response():
    # Implementation here

def before_send_events(events: list[Event]):
    # Implementation here

def after_send_events(result: SendEventsResult):
    # Implementation here

----------------------------------------

TITLE: Configuring Streaming in Inngest Serve Handler
DESCRIPTION: Demonstrates how to enable streaming responses in the Inngest serve handler configuration. The streaming option can be set to false (default), "allow" for automatic detection, or "force" for override mode.

LANGUAGE: typescript
CODE:
serve({
  client: inngest,
  functions: [...fns],
  streaming: "allow",
});

----------------------------------------

TITLE: Implementing Sharding Decision Logic in Go
DESCRIPTION: This code snippet shows the implementation of the sharding decision logic in Go. It determines whether to use the sharded cluster based on the account ID and current time, allowing for a gradual rollout of the sharding feature.

LANGUAGE: Go
CODE:
func (s *Service) Client(accountID string) redis.UniversalClient {
    if s.isSharded(accountID) {
        return s.shardedClient
    }
    return s.oldClient
}

func (s *Service) RollOutSharding(t time.Time, accountID string) bool {
    if t.Before(time.Date(2023, 6, 28, 16, 0, 0, 0, time.UTC)) {
        return false
    }
    if t.Before(time.Date(2023, 6, 28, 17, 0, 0, 0, time.UTC)) {
        return accountID == "acc_inngest"
    }
    if t.Before(time.Date(2023, 6, 29, 16, 0, 0, 0, time.UTC)) {
        return !s.isEnterprise(accountID)
    }
    return true
}

----------------------------------------

TITLE: Writing a Function to Handle Clerk User Creation Event
DESCRIPTION: This snippet demonstrates how to write an Inngest function that responds to a 'clerk/user.created' event. It sends a welcome email to the newly created user using the Resend email service.

LANGUAGE: javascript
CODE:
inngest.createFunction(
  { name: "Send welcome email", id: "send-welcome-email" },
  { event: "clerk/user.created" },
  async ({ event, step }) => {
    const emailAddress = event.data.email_addresses[0].email_address;
    await step.run('send-email', async () => {
      return await resend.emails.send({
        to: emailAddress,
        from: "noreply@inngest.com",
        subject: "Welcome to Inngest!",
        react: WelcomeEmail(),
      })
    });
  }
)

----------------------------------------

TITLE: Creating and Serving Inngest App in Python (Flask)
DESCRIPTION: This snippet shows how to create an Inngest app using Python with Flask. It sets up logging, creates an Inngest client, defines a function, and serves the app using Flask.

LANGUAGE: python
CODE:
import logging
import inngest
from src.flask import app
import inngest.flask

logger = logging.getLogger(f"{app.logger.name}.inngest")
logger.setLevel(logging.DEBUG)

inngest_client = inngest.Inngest(app_id="flask_example", logger=logger)

@inngest_client.create_function(
    fn_id="hello-world",
    trigger=inngest.TriggerEvent(event="say-hello"),
)
def hello(
    ctx: inngest.Context,
    step: inngest.StepSync,
) -> str:

inngest.flask.serve(
    app,
    inngest_client,
    [hello],
)

app.run(port=8000)

----------------------------------------

TITLE: Initializing InngestTestEngine
DESCRIPTION: Basic setup for testing Inngest functions using InngestTestEngine with Jest.

LANGUAGE: typescript
CODE:
import { InngestTestEngine } from "@inngest/test";
import { helloWorld } from "./helloWorld";

describe("helloWorld function", () => {
  const t = new InngestTestEngine({
    function: helloWorld,
  });
});

----------------------------------------

TITLE: Installing Next.js Dependencies
DESCRIPTION: Command to install Next.js as a project dependency

LANGUAGE: bash
CODE:
npm install next

----------------------------------------

TITLE: Dynamic Value Expression Examples in JavaScript for Inngest
DESCRIPTION: Demonstrates how to use expressions to return dynamic values in Inngest, such as for function run priority. Examples include conditional returns based on event data.

LANGUAGE: javascript
CODE:
// Return a 0 priority if the billing plan is enterprise, otherwise return 1800
`event.data.billingPlan == 'enterprise' ? 0 : 1800`

// Return a value based on multiple conditions
`event.data.billingPlan == 'enterprise' && event.data.requestNumber < 10 ? 0 : 1800`

----------------------------------------

TITLE: Using RetryAfterError in Python Inngest Functions
DESCRIPTION: Shows how to use RetryAfterError in Python to control when Inngest should retry a function or step, useful for handling rate limits or temporary failures.

LANGUAGE: python
CODE:
@client.create_function(
    fn_id="import-item-data",
    retries=0,
    trigger=inngest.TriggerEvent(event="store/import.requested"),
)
async def fn_async(
        ctx: inngest.Context,
    step: inngest.Step,
) -> None:
  def step_1() -> None:
      raise inngest.RetryAfterError("rate-limit-hit", 1000) # delay in milliseconds

  step.run("step_1", step_1)

----------------------------------------

TITLE: Node.js Environment Configuration
DESCRIPTION: Environment variable configuration for connecting a Node.js application to a self-hosted Inngest server.

LANGUAGE: plaintext
CODE:
INNGEST_EVENT_KEY=<YOUR_EVENT_KEY> \
  INNGEST_SIGNING_KEY=<YOUR_SIGNING_KEY> \
  INNGEST_DEV=0 \
  INNGEST_BASE_URL=http://localhost:8288 \
  node ./server.js

----------------------------------------

TITLE: Combined Concurrency Controls
DESCRIPTION: Demonstrates how to combine multiple concurrency limits with different scopes. Shows setting both account-level and function-level concurrency limits simultaneously.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  {
    id: "unique-function-id",
    concurrency: [
      {
         scope: "account",
         key: `"openai"`,
         limit: 10,
      },
      {
         scope: "fn",
         key: "event.data.account_id",
         limit: 1,
      },
    ],
  },
  { event: "ai/summary.requested" },
  async ({ event, step }) => {
  }
);

----------------------------------------

TITLE: Using Prisma Middleware in Inngest Functions
DESCRIPTION: This snippet demonstrates how to use the Prisma middleware within an Inngest function. It shows how to access the prisma client directly in the function's input.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { name: "Example" },
  { event: "app/user.loggedin" },
  async ({ prisma }) => {
    await prisma.auditTrail.create(/* ... */);
  }
);

----------------------------------------

TITLE: Configuring Case Study Metadata in JavaScript
DESCRIPTION: Export configuration for case study page including company details, quotes, and image assets. This setup defines the metadata used throughout the case study presentation.

LANGUAGE: javascript
CODE:
export const title = 'Streamlining dynamic video generation'
export const companyName = 'SoundCloud'
export const logo = '/assets/customers/soundcloud-logo-white.svg'
export const logoScale = 1.5;
export const quote = {
  text: `I wanted to find a solution that would let us just write the code, not manage the infrastructure around queues, concurrency, retries, error handling, prioritization... I don't think that developers should be even configuring and managing queues themselves in 2024.`,
  attribution: {
    name: 'Matthew Drooker',
    title: 'CTO',
  },
  avatar: '/assets/customers/soundcloud-matthew-drooker.jpg',
}
export const companyURL = 'https://soundcloud.com'
export const companyDescription = 'SoundCloud empowers artists and fans to connect and share through music'
export const ogImage = '/assets/customers/case-study/og-image-soundcloud.png'

----------------------------------------

TITLE: Handling Non-Retriable Errors in Inngest Functions
DESCRIPTION: This snippet shows how to use non-retriable errors in Inngest functions to bypass remaining retries and fail the step or function when a permanent error occurs.

LANGUAGE: typescript
CODE:
import { NonRetriableError } from "inngest";

inngest.createFunction(
  { id: "user-weekly-digest" },
  { event: "user/weekly.digest.requested" },
  async ({ event, step }) => {
    const user = await step
      .run("get-user-email", () => {
        return db.users.findOne(event.data.userId);
      })
      .catch((err) => {
        if (err.name === "UserNotFoundError") {
          throw new NonRetriableError("User no longer exists; stopping");
        }

        throw err;
      });

    await step.run("send-digest", () => {
      return sendDigest(user.email);
    });
  },
);

LANGUAGE: go
CODE:
inngestgo.CreateFunction(
	inngestgo.FunctionOpts{ID: "user-weekly-digest"},
	inngestgo.EventTrigger("user/weekly.digest.requested", nil),
	func(ctx context.Context, input inngestgo.Input[WeeklyDigestRequestedEvent]) (any, error) {
		user, err := step.Run(ctx, "get-user-email", func(ctx context.Context) (any, error) {
			return db.Users.FindOne(input.Event.Data.UserID)
		})
		if err != nil {
			if stepErr, ok := err.(step.StepError); ok && stepErr.Name == "UserNotFoundError" {
				return nil, inngestgo.NoRetryError(fmt.Errorf("User no longer exists; stopping"))
			}
			return nil, err
		}

		_, err = step.Run(ctx, "send-digest", func(ctx context.Context) (any, error) {
			return sendDigest(user.(UserType).Email)
		})
		if err != nil {
			return nil, err
		}

		return nil, nil
	},
)

LANGUAGE: python
CODE:
from inngest.errors import NonRetriableError

@inngest_client.create_function(
    fn_id="user-weekly-digest",
    trigger=inngest.TriggerEvent(event="user/weekly.digest.requested"),
)
def user_weekly_digest(ctx: inngest.Context, step: inngest.StepSync) -> None:
    try:
        user = step.run("get-user-email", db.users.find_one, ctx.event.data["userId"])
    except Exception as err:
        if err.name == "UserNotFoundError":
            raise NonRetriableError("User no longer exists; stopping")
        raise

    step.run("send-digest", send_digest, user["email"])

----------------------------------------

TITLE: Disabling Production Mode in Inngest SDK using FLASK_ENV (Python)
DESCRIPTION: This code snippet demonstrates how to disable production mode in the Inngest SDK based on the FLASK_ENV environment variable. It creates an Inngest instance with production mode enabled only when FLASK_ENV is set to 'production'.

LANGUAGE: python
CODE:
import inngest

inngest.Inngest(
    app_id="my_flask_app",
    is_production=os.environ.get("FLASK_ENV") == "production",
)

----------------------------------------

TITLE: Basic Failure Handler Implementation in TypeScript
DESCRIPTION: Basic example showing how to implement an onFailure handler for an Inngest function that runs when the main function fails after maximum retries.

LANGUAGE: typescript
CODE:
import { inngest } from "./client";

export default inngest.createFunction(
  {
    id: "import-product-images",
    onFailure: async ({ error, event, step }) => {
      // This is the failure handler which can be used to
      // send an alert, notification, or whatever you need to do
    },
  },
  { event: "shop/product.imported" },
  async ({ event, step, runId }) => {
    // This is the main function handler's code
  }
);

----------------------------------------

TITLE: Throwing a NonRetriableError in TypeScript
DESCRIPTION: This snippet demonstrates how to throw a custom NonRetriableError in TypeScript, which can be useful for error handling and searching in Inngest.

LANGUAGE: typescript
CODE:
throw new NonRetriableError("Failed to import data");

----------------------------------------

TITLE: Basic Function Reference Usage
DESCRIPTION: Shows the simplest way to reference a function within the same app using just the functionId.

LANGUAGE: typescript
CODE:
import { referenceFunction } from "inngest";

await step.invoke("start-process", {
  function: referenceFunction({
    functionId: "some-fn",
  }),
});

----------------------------------------

TITLE: Implementing a Function to Poll for Inngest Run Completion
DESCRIPTION: Defines a TypeScript function that polls the Inngest API until a run is completed, throwing an error if the run fails or is cancelled.

LANGUAGE: typescript
CODE:
async function getRunOutput(eventId) {
  let runs = await getRuns(eventId);
  while (runs[0].status !== "Completed") {
    await new Promise((resolve) => setTimeout(resolve, 1000));
    runs = await getRuns(eventId);
    if (runs[0].status === "Failed" || runs[0].status === "Cancelled") {
      throw new Error(`Function run ${runs[0].status}`);
    }
  }
  return runs[0];
}

----------------------------------------

TITLE: Verifying Stripe Webhook Signature in Inngest Function
DESCRIPTION: This snippet demonstrates how to verify the Stripe webhook signature within an Inngest function before processing the event data. It throws a non-retriable error if verification fails.

LANGUAGE: javascript
CODE:
inngest.createFunction(
  { id: "stripe/charge.updated" },
  { event: "stripe/charge.updated" },
  async ({ attempt, event, step }) => {
    if (!verifySig(event.data.raw, event.data.sig, stripeSecret)) {
      throw new NonRetriableError("failed signature verification");
    }

    // Now it's safe to use the event data.
    const data = JSON.parse(event.data.raw);
  }
);

----------------------------------------

TITLE: Creating Subscription Token (Next.js App Router)
DESCRIPTION: Example of creating a subscription token in a Next.js app router endpoint, scoped to a user's channel and specific topics.

LANGUAGE: typescript
CODE:
import { getSubscriptionToken } from "@inngest/realtime";
import { auth } from "src/auth"; // this could be any auth provider
import { inngest } from "src/inngest";

// ex. /api/get-subscribe-token
export async function POST() {
  const { userId } = await auth()

  const token = await getSubscriptionToken(inngest, {
    channel: `user:${userId}`,
    topics: ["ai"],
  })

  return NextResponse.json({ token }, { status: 200 })
}

----------------------------------------

TITLE: Starting Inngest Dev Server with Modal Endpoint
DESCRIPTION: Starts the Inngest Dev Server, specifying the FastAPI app's Inngest endpoint on Modal for synchronization.

LANGUAGE: sh
CODE:
npx inngest-cli@latest dev -u https://test-fast-api-fastapi-app.modal.run/api/inngest --no-discovery

----------------------------------------

TITLE: Inngest Function Handler Interface
DESCRIPTION: Example showing the structure of an Inngest function handler with its available parameters including event, events, step, runId, logger, and attempt.

LANGUAGE: typescript
CODE:
function handler({ event, events, step, runId, logger, attempt }) {/* ... */}

----------------------------------------

TITLE: Configuring Inngest Client with Event Keys in JavaScript
DESCRIPTION: Demonstrates two methods of configuring the Inngest client with Event Keys - using environment variables (recommended) or passing the key explicitly to the constructor. Shows how to initialize the client and send events.

LANGUAGE: jsx
CODE:
// Recommended: Set an INNGEST_EVENT_KEY environment variable for automatic configuration:
const inngest = new Inngest({ name: "Your app name" });

// Or you can pass the eventKey explicitly to the constructor:
const inngest = new Inngest({ name: "Your app name", eventKey: "xyz..." });

// With the Event Key, you're now ready to send data:
await inngest.send({ ... })

----------------------------------------

TITLE: Configuring Rate Limiting in TypeScript for Inngest
DESCRIPTION: This snippet demonstrates how to configure rate limiting for an Inngest function in TypeScript. It sets a limit of 1 run per 4 hours for a given company_id.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  {
    id: "synchronize-data",
    rateLimit: {
      limit: 1,
      period: "4h",
      key: "event.data.company_id",
    },
  },
  { event: "intercom/company.updated" },
  async ({ event, step }) => {
    // This function will be rate limited
    // It will only run once per 4 hours for a given event payload with matching company_id
  }
);

----------------------------------------

TITLE: Configuring Middleware in Python for Inngest Client and Function
DESCRIPTION: This snippet illustrates how to set up middleware for both the Inngest client and a specific function in Python. It demonstrates the order of middleware execution and how to create a function with custom middleware.

LANGUAGE: python
CODE:
inngest_client = inngest.Inngest(
    app_id="my_app",
    middleware=[
        LogMiddleware, # This is executed first
        ErrorMiddleware # This is executed second
    ],
)

# ...


@inngest_client.create_function(
    fn_id="import-product-images",
    trigger=inngest.TriggerEvent(event="shop/product.imported"),
    middleware=[
        DbSetupMiddleware, # This is executed third
        DatadogMiddleware # This is executed fourth
    ],
)
async def fn(ctx: inngest.Context, step: inngest.Step):
    # ...

----------------------------------------

TITLE: OpenAI o1 Prompt Configuration for Contact Import Workflow
DESCRIPTION: Configuration of the prompt used to instruct OpenAI's o1 model in generating a workflow for contact import processing. Defines available actions and desired outcomes for contact processing.

LANGUAGE: typescript
CODE:
const prompt = (contactsFileContent: string) => `
Considering the following available actions:
${actions
  .filter(({ kind }) => kind !== "openaiCall")
  .map(({ kind, description }) => `- ${description}, name: ${kind}\n`)}

and, given the below CSV file (between \`\`\`), recommend the best steps by balancing existing actions and using custom openai calls (do not use deprecated models) to successfully:
    - parse the contact information and remove any typos
    - enrich the contacts data
    - label them a decider and rank them as a good Sales target to sale software to based on the provided property
    - rework the CSV file to match the provided column to the following: Name, Position, Company, Email and the ranking and decider columns
    - save the contacts to the database

Return a JSON array made of steps to execute. When a step is a model call, provide the "model" for model name and "prompt" for the prompt with "{data}" as a placeholder for the provided data; When the step is an action, provide the action name.

\`\`\`
${contactsFileContent}
\`\`\`
`;

----------------------------------------

TITLE: Syncing New User to Database with Clerk Webhook Event in TypeScript
DESCRIPTION: This function syncs a new user to the database when a 'clerk/user.created' event occurs. It extracts user data from the Clerk event payload and inserts it into the database.

LANGUAGE: typescript
CODE:
const syncUser = inngest.createFunction(
  { id: 'sync-user-from-clerk' },
  { event: 'clerk/user.created' },
  async ({ event }) => {
    // The event payload's data will be the Clerk User json object
    const { user } = event.data;
    const { id, first_name, last_name } = user;
    const email = user.email_addresses.find(e =>
      e.id === user.primary_email_address_id
    ).email;
    await database.users.insert({ id, email, first_name, last_name });
  }
)

----------------------------------------

TITLE: Initializing Inngest Client in Python
DESCRIPTION: This snippet demonstrates how to import and initialize the Inngest client in a Python application. It creates an instance of the Inngest client with a specified app_id.

LANGUAGE: python
CODE:
import inngest

inngest_client = inngest.Inngest(
    app_id="flask_example",
)

----------------------------------------

TITLE: Importing Components for Inngest Documentation in JSX
DESCRIPTION: This code snippet imports various components and icons used for rendering the documentation page. It includes Card components for displaying feature sections and icons for visual representation.

LANGUAGE: jsx
CODE:
import { CardGroup, Card, CodeGroup, Callout } from "src/shared/Docs/mdx";
import { RiArrowGoBackLine, RiErrorWarningLine } from "@remixicon/react";

import ReplayIcon from 'src/shared/Icons/Replay';

export const description = 'Learn how to handle errors and failures in your Inngest functions.'

----------------------------------------

TITLE: Example Workflow Instance JSON Structure
DESCRIPTION: Demonstrates the structure of a workflow instance object that defines a sequence of social media post generation actions. Shows how actions are connected using edges and includes basic metadata.

LANGUAGE: json
CODE:
{
  "name": "Generate social posts",
  "edges": [
    {
      "to": "1",
      "from": "$source"
    },
    {
      "to": "2",
      "from": "1"
    }
  ],
  "actions": [
    {
      "id": "1",
      "kind": "generate_tweet_posts",
      "name": "Generate Twitter posts"
    },
    {
      "id": "2",
      "kind": "generate_linkedin_posts",
      "name": "Generate LinkedIn posts"
    }
  ]
}

----------------------------------------

TITLE: Creating Next.js Project with App Router
DESCRIPTION: Command to create a new Next.js project using the App Router configuration.

LANGUAGE: shell
CODE:
npx create-next-app@latest --ts --eslint --tailwind --src-dir --app --import-alias='@/*' inngest-guide

----------------------------------------

TITLE: Advanced Event Sending Patterns
DESCRIPTION: Demonstrates various event sending patterns including single events, multiple events, user data encryption, and custom event metadata.

LANGUAGE: typescript
CODE:
// Send a single event
await inngest.send({
  name: "app/post.created",
  data: { postId: "01H08SEAXBJFJNGTTZ5TAWB0BD" }
});

// Send an array of events
await inngest.send([
  {
    name: "app/invoice.created",
    data: { invoiceId: "645e9e024befa68763f5b500" }
  },
  {
    name: "app/invoice.created",
    data: { invoiceId: "645e9e08f29fb563c972b1f7" }
  },
]);

// Send user data that will be encrypted at rest
await inngest.send({
  name: "app/account.created",
  data: { billingPlan: "pro" },
  user: {
    external_id: "6463da8211cdbbcb191dd7da",
    email: "test@example.com"
  }
});

// Specify the idempotency id, version, and timestamp
await inngest.send({
  // Use an id specific to the event type & payload
  id: "cart-checkout-completed-ed12c8bde",
  name: "storefront/cart.checkout.completed",
  data: { cartId: "ed12c8bde" },
  user: { external_id: "6463da8211cdbbcb191dd7da" },
  ts: 1684274328198,
  v: "2024-05-15.1"
});

----------------------------------------

TITLE: Utilizing step.ai.infer for Offloaded AI Inference in TypeScript
DESCRIPTION: Illustrates the usage of step.ai.infer API to offload AI inference requests through Inngest's gateway. This example shows how to make a call to OpenAI's GPT-4 model with built-in AI observability, metrics, and monitoring.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  { id: "summarize-contents" },
  { event: "app/ticket.created" },
  async ({ event, step }) => {

    // This calls your model's chat endpoint, adding AI observability,
    // metrics, datasets, and monitoring to your calls.
    const response = await step.ai.infer("call-openai", {
      model: openai({ model: "gpt-4o" }),
      // body is the model request, which is strongly typed depending on the model
      body: {
        messages: [{
          role: "assistant",
          content: "Write instructions for improving short term memory",
        }],
      },
    });

    // The response is also strongly typed depending on the model.
    return response.choices;
  }
);

----------------------------------------

TITLE: Example Event Payloads for Reminder Creation and Deletion
DESCRIPTION: JSON examples showing the event payload structure for both reminder creation and deletion events, demonstrating the matching reminderId field used for cancellation.

LANGUAGE: json
CODE:
{
  "name": "tasks/reminder.created",
  "data": {
    "userId": "user_123",
    "reminderId": "reminder_0987654321",
    "reminderBody": "Pick up Jane from the airport"
  }
}

LANGUAGE: json
CODE:
{
  "name": "tasks/reminder.deleted",
  "data": {
    "userId": "user_123",
    "reminderId": "reminder_0987654321"
  }
}

----------------------------------------

TITLE: Sending Events to Inngest Dev Server via HTTP
DESCRIPTION: Example of sending an event to the Inngest dev server using a curl HTTP request to the local endpoint.

LANGUAGE: shell
CODE:
curl -X POST -v "http://localhost:8288/e/123" \
  -d '{
    "name": "user.avatar.uploaded",
    "data": { "url": "https://a-bucket.s3.us-west-2.amazonaws.com/..." }
  }'

----------------------------------------

TITLE: Basic Welcome Email Function - Python
DESCRIPTION: Simple Inngest function in Python that sends a welcome email when a user signs up.

LANGUAGE: python
CODE:
import inngest
from src.inngest.client import inngest_client

@inngest_client.create_function(
    fn_id="activation-email",
    trigger=inngest.TriggerEvent(event="app/user.created"),
)
async def fn(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    await sendEmail({ email: ctx.event.user.email, template: "welcome" })

----------------------------------------

TITLE: Implementing Job Enqueue with Debouncing in Node.js
DESCRIPTION: JavaScript function using @vercel/postgres to enqueue jobs with debouncing logic, including creation of deterministic debounce keys and handling of duplicate jobs.

LANGUAGE: jsx
CODE:
import { crypto } from "node:crypto";
import { sql } from "@vercel/postgres";
async function enqueue(jobType, payload, delay = 0) {
  const json = JSON.stringify(payload);
  const debounceKey = crypto
    .createHash("sha256")
    .update(jobType + json)
    .digest("hex");
  return await sql`
		INSERT INTO debounce_job_queue (
			job_type, status, payload, scheduled_at, debounce_key
		)
		VALUES (
			'${jobType}', 'QUEUED', '${json}',
			now() + INTERVAL '${delay} seconds', ${debounceKey}
		)
		-- If the item is already QUEUED, update the scheduled at w/ the delay
		ON CONFLICT (debounce_key, status) WHERE status = 'QUEUED'
		DO UPDATE SET scheduled_at = now() + INTERVAL '${delay} seconds';
	`;
}

----------------------------------------

TITLE: Configuring Inngest Client with Branch Environment in Python
DESCRIPTION: Example showing how to initialize the Inngest client with branch environment configuration using Python. Shows basic client setup with environment variable configuration.

LANGUAGE: python
CODE:
import inngest

inngest_client = inngest.Inngest(
    app_id="flask_example",
  env=os.getenv("BRANCH"),
)

----------------------------------------

TITLE: Implementing Parallel Event Processing with Inngest in TypeScript
DESCRIPTION: This code snippet demonstrates how to create multiple functions that subscribe to the same event using Inngest. It shows three functions (funcA, funcB, and funcC) that run in parallel when the 'app/user.created' event is received.

LANGUAGE: typescript
CODE:
import { inngest } from "@/inngest";

const funcA = inngest.createFunction(
  { id: "a" },
  { event: "app/user.created" },
  ({ event }) => {
    /* Your logic runs on signup here */
  }
);

const funcB = inngest.createFunction(
  { id: "b" },
  { event: "app/user.created" },
  ({ event }) => {
    /* And this function runs in parallel on signup */
  }
);

const funcC = inngest.createFunction(
  { id: "c" },
  { event: "app/user.created" },
  ({ event }) => {
    /* This function _also_ runs at the same time */
  }
);

----------------------------------------

TITLE: Publishing Data with Inngest Realtime (Minimal Example)
DESCRIPTION: Demonstrates how to set up Inngest with realtime middleware and publish data to a user's channel on a specific topic.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";
import { realtimeMiddleware } from "@inngest/realtime";

const inngest = new Inngest({
  id: "my-app",
  // Whenever you create your app, include the `realtimeMiddleware()`
  middleware: [realtimeMiddleware()],
});

inngest.createFunction(
  { id: "some-task" },
  { event: "ai/ai.requested" },
  async ({ event, step, publish }) => {

    // Publish data to a user's channel, on the given topic.  Channel names are custom
    // and act as a container for a group of topics.  Each topic is a stream of data.
    await publish({
      channel: `user:${event.data.userId}`,
      topic: "ai",
      data: {
        response: "an llm response here",
        success: true,
      },
    });
  }
);

----------------------------------------

TITLE: Advanced Order Processing with Event Waiting
DESCRIPTION: Shows how to implement a more complex order processing workflow that includes waiting for shipment confirmation events using step.waitForEvent, with timeout handling and conditional notifications.

LANGUAGE: jsx
CODE:
const orderProcessingWorkflow = inngest.createFunction(
  { id: "Order Processing" },
  { event: "order.placed" },
  async ({ step, event }) => {
    const paymentConfirmation = await step.run("process-payment", () =>
      processPayment(event.data.orderDetails)
    );

    const inventoryStatus = await step.run("check-inventory", () =>
      checkInventory(event.data.orderDetails.items)
    );

    await step.run("schedule-shipment", () =>
      scheduleShipment(event.data.orderDetails)
    );

    await step.run("notify-customer", () =>
      sendNotification(event.data.customerId, "Order Received")
    );

    const shipment = await step.waitForEvent("wait-for-shipment-confirmation", {
      event: "shipment/create",
      timeout: "7d",
      if: "event.data.id == async.data.orderId",
    });

    if (shipment) {
      await step.run("send-notification", () =>
        sendNotification(event.data.customerId, "Order Shipped")
      );
    }
  }
);

----------------------------------------

TITLE: Using Realtime.Token Type Helper
DESCRIPTION: Shows how to use the Realtime.Token type helper for typing backend outputs when generating tokens.

LANGUAGE: typescript
CODE:
import { type Realtime } from "@inngest/realtime";
import { type userChannel } from "./channels";

type UserAiToken = Realtime.Token<typeof userChannel, ["ai"]>;

----------------------------------------

TITLE: Demonstrating Logger Execution Context in Inngest Functions
DESCRIPTION: Shows how logger statements behave differently based on their location inside or outside step functions due to memoization and execution patterns.

LANGUAGE: typescript
CODE:
async ({ event, step }) => {
  logger.info("something") // this can be run three times

  await step.run("fn", () => {
    logger.info("something else") // this will always be run once
  })

  await step.run(...)
}

----------------------------------------

TITLE: Email Activity Handler Function in TypeScript
DESCRIPTION: TypeScript implementation of a function that processes individual user email events. Triggered by app/weekly-email-activity.send events.

LANGUAGE: typescript
CODE:
export const sendReminder = inngest.createFunction(
  { id: "weekly-activity-send-email" },
  { event: "app/weekly-email-activity.send" },
  async ({ event, step }) => {
    const data = await step.run("load-user-data", async () => {
      return loadUserData(event.data.user.id);
    });

    await step.run("email-user", async () => {
      return sendEmail(event.data.user, data);
    });
  }
);

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Installs required Python packages including FastAPI, Inngest, and Uvicorn

LANGUAGE: shell
CODE:
pip install fastapi inngest uvicorn

----------------------------------------

TITLE: Adding Function to serve() in Pages Router
DESCRIPTION: Code to add the Inngest function to the serve() handler in Next.js Pages Router.

LANGUAGE: typescript
CODE:
export default serve({
  client: inngest,
  functions: [
    helloWorld, // <-- This is where you'll always add your new functions
  ],
});

----------------------------------------

TITLE: Importing Components for Neon Integration Documentation
DESCRIPTION: This code snippet imports necessary components from a shared documentation module, likely used for rendering the documentation page.

LANGUAGE: javascript
CODE:
import { Callout, ImageTheme } from "src/shared/Docs/mdx";

----------------------------------------

TITLE: Referencing Inngest Functions in TypeScript
DESCRIPTION: Shows how to create a reference to an Inngest function in another application and how to use it. Also demonstrates referencing local functions without direct import.

LANGUAGE: typescript
CODE:
// @/inngest/computeSquare.ts
import { referenceFunction } from "inngest";
import { z } from "zod";

// Create a reference to a function in another application.
export const computeSquare = referenceFunction({
  appId: "my-python-app",
  functionId: "compute-square",
  // Schemas are optional, but provide types for your call if specified
  schemas: {
    data: z.object({
      number: z.number(),
    }),
    return: z.object({
      result: z.number(),
    }),
  },
});

LANGUAGE: typescript
CODE:
import { computeSquare } from "@/inngest/computeSquare";

// square.result is typed as a number
const square = await step.invoke("compute-square-value", {
  function: computeSquare,
  data: { number: 4 }, // input data is typed, requiring input if it's needed
});

LANGUAGE: typescript
CODE:
import { inngest, referenceFunction } from "inngest";
import { type computeSquare } from "@/inngest/computeSquare"; // Import only the type

const mainFunction = inngest.createFunction(
  { id: "main-function" },
  { event: "main/event" },
  async ({ step }) => {
    const square = await step.invoke("compute-square-value", {
      function: referenceFunction<typeof computeSquare>({
        functionId: "compute-square",
      }),
      data: { number: 4 }, // input data is still typed
    });

    return `Square of 4 is ${square.result}.`; // square.result is typed as number
  }
);

----------------------------------------

TITLE: Importing Components for Inngest Documentation
DESCRIPTION: This snippet imports various React components and icons used to structure the documentation page. It includes imports from shared components, custom icons, and the Remix icon library.

LANGUAGE: javascript
CODE:
import { CardGroup, Card, Button } from "src/shared/Docs/mdx";
import PythonIcon from 'src/shared/Icons/Python';
import GoIcon from 'src/shared/Icons/Go';
import {
  RiCloudLine,
  RiNextjsFill,
  RiNodejsFill,
  RiGitPullRequestFill,
  RiGuideFill,
} from "@remixicon/react";
import InngestIcon from 'src/shared/Icons/InngestIcon';

export const hidePageSidebar = true;

----------------------------------------

TITLE: Transforming Clerk Webhook Payload to Inngest Event Format
DESCRIPTION: This snippet demonstrates how to transform a raw Clerk webhook payload into the Inngest event format. It shows the structure of both the original payload and the transformed event.

LANGUAGE: json
CODE:
{
  "type": "user.created",
  "object": "event",
  "data": {
    "created_at": 1654012591514,
    "external_id": "567772",
    "first_name": "Example",
    "id": "user_29w83sxmDNGwOuEthce5gg56FcC",
    "last_name": "Example",
    "last_sign_in_at": 1654012591514,
    "object": "user",
    "primary_email_address_id": "idn_29w83yL7CwVlJXylYLxcslromF1",
    // ... simplified for example
  },
}

LANGUAGE: json
CODE:
{
  "name": "clerk/user.created",
  "data": {
    "created_at": 1654012591514,
    "external_id": "567772",
    "first_name": "Example",
    "id": "user_29w83sxmDNGwOuEthce5gg56FcC",
    "last_name": "Example",
    "last_sign_in_at": 1654012591514,
    "object": "user",
    "primary_email_address_id": "idn_29w83yL7CwVlJXylYLxcslromF1",
    // ... simplified for example
  }
}

----------------------------------------

TITLE: Preserving Stack Traces in TypeScript Inngest Functions
DESCRIPTION: Shows best practices for preserving stack traces in TypeScript Inngest functions when working with Promises, which is crucial for debugging errors in production.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "update-recent-usage" },
  { event: "app/update-recent-usage" },
  async ({ event, step }) => {
    // ...
    await step.run("update in db", async () => {
      return await doSomeWork(event.data);
    });
    // ...
  }
);

----------------------------------------

TITLE: Running Inngest Dev Server
DESCRIPTION: Commands to start the Inngest Dev Server using different package managers.

LANGUAGE: shell
CODE:
npx inngest-cli@latest dev

LANGUAGE: shell
CODE:
yarn dlx inngest-cli@latest dev

LANGUAGE: shell
CODE:
pnpm dlx inngest-cli@latest dev

LANGUAGE: shell
CODE:
bun add global inngest-cli@latest
inngest-cli dev

----------------------------------------

TITLE: Shared Client Implementation
DESCRIPTION: Best practice implementation for sharing the Inngest client across a codebase, showing both v2 and v3 configurations.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";

export const inngest = new Inngest({ id: "my-app" });

LANGUAGE: typescript
CODE:
import { inngest } from "./client";

export default inngest.createFunction(...);

----------------------------------------

TITLE: Incorrect Variable Mutation in Steps
DESCRIPTION: Example showing incorrect variable mutation within step.run().

LANGUAGE: typescript
CODE:
let userId;

await step.run("get-user", async () => {
  userId = await getRandomUserId();
});

console.log(userId); // undefined

----------------------------------------

TITLE: Basic Inngest Connection Setup - Go
DESCRIPTION: Shows how to implement Inngest connection in Go, including event type definition, function creation, and connection handling.

LANGUAGE: go
CODE:
type UserCreatedEvent struct {
	Name string
	Data struct {
		UserID string `json:"user_id"`
	}
}

func main() {
	ctx := context.Background()

	app, err := inngestgo.NewClient(inngestgo.ClientOpts{
		AppID:      "my-app",
		Logger:     logger.StdlibLogger(ctx),
		AppVersion: nil, // Optional, defaults to the git commit SHA
	})
	if err != nil {
		panic(err)
	}

	f := inngestgo.CreateFunction(
    app,
		inngestgo.FunctionOpts{ID: "handle-signup", Name: "Handle signup"},
		inngestgo.EventTrigger("user.created", nil),
		func(ctx context.Context, input inngestgo.Input[UserCreatedEvent]) (any, error) {
			fmt.Println("Function called")
			return map[string]any{"success": true}, nil
		},
	)

	fmt.Println("Worker: connecting")

	ws, err := inngestgo.Connect(ctx, inngestgo.ConnectOpts{
		InstanceID: inngestgo.Ptr("example-worker"),
		Apps:       []inngestgo.Handler{
      app,
    },
	})
	if err != nil {
		fmt.Printf("ERROR: %#v\n", err)
		os.Exit(1)
	}

  defer func(ws connect.WorkerConnection) {
		<-ctx.Done()
		err := ws.Close()
		if err != nil {
			fmt.Printf("could not close connection: %s\n", err)
		}
	}(ws)
}

----------------------------------------

TITLE: TypeScript Configuration for Next.js
DESCRIPTION: Updated tsconfig.json with Next.js-specific settings and compiler options

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "preserve",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "allowJs": true,
    "forceConsistentCasingInFileNames": true,
    "incremental": true,
    "plugins": [{ "name": "next" }]
  },
  "include": ["./src", "./dist/types/**/*.ts", "./next-env.d.ts"],
  "exclude": ["./node_modules"]
}

----------------------------------------

TITLE: Configuring GraphQL Yoga with Inngest Plugin
DESCRIPTION: Example of setting up a GraphQL Yoga server with the Inngest plugin. It demonstrates how to create a schema, add resolvers, and incorporate the Inngest plugin.

LANGUAGE: typescript
CODE:
import { useInngest } from "envelop-plugin-inngest";
import { createSchema, createYoga } from "graphql-yoga";
import { Inngest } from "inngest";

const inngest = new Inngest({ id: "my-app" });

// Provide your schema
const yoga = createYoga({
  schema: createSchema({
    typeDefs: /* GraphQL */ `
      type Query {
        greetings: String!
      }
    `,
    resolvers: {
      Query: {
        greetings: () => "Hello World!",
      },
    },
  }),

  // Add the plugin to the server. RedwoodJS users can use the
  // `extraPlugins` option instead.
  plugins: [useInngest({ inngestClient: inngest })],
});

// Start the server and explore http://localhost:4000/graphql
const server = createServer(yoga);

server.listen(4000, () => {
  console.info("Server is running on http://localhost:4000/graphql");
});

----------------------------------------

TITLE: Simple Function Example in Python
DESCRIPTION: Shows a simple Inngest function in Python with multiple steps, explaining the execution model and demonstrating how to properly structure steps to avoid repeated execution of non-deterministic logic.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="simple-function",
    trigger=inngest.TriggerEvent(event="test/simple.function")
)
async def simple_function(ctx: inngest.Context, step: inngest.Step):
    print("hello")

    async def step_a():
        print("a")
    await step.run("a", step_a)

    async def step_b():
        print("b") 
    await step.run("b", step_b)

    async def step_c():
        print("c")
    await step.run("c", step_c)

LANGUAGE: python
CODE:
import inngest
from src.inngest.client import inngest_client

@inngest_client.create_function(
    id="simple-function",
    trigger=inngest.TriggerEvent(event="test/simple.function")
)
async def simple_function(ctx: inngest.Context, step: inngest.Step):
    await step.run("hello", lambda: print("hello"))

    await step.run("a", lambda: print("a"))
    await step.run("b", lambda: print("b")) 
    await step.run("c", lambda: print("c"))

----------------------------------------

TITLE: Demonstrating Thrown Errors in Python
DESCRIPTION: This snippet shows a Python function that may throw errors, but it's unclear which lines could cause exceptions without examining the called functions.

LANGUAGE: python
CODE:
def upsert_thing(thing_id: str) -> Thing:
    thing = get_thing(thing_id)
    thing.set_name("Doodad")
    update_thing(thing)
    log_thing(thing)
    return thing

----------------------------------------

TITLE: Creating Next.js Project with Pages Router
DESCRIPTION: Command to create a new Next.js project using the Pages Router configuration.

LANGUAGE: shell
CODE:
npx create-next-app@latest --ts --eslint --tailwind --no-src-dir --no-app --import-alias='@/*' inngest-guide

----------------------------------------

TITLE: Go HTTP Handler
DESCRIPTION: Implementation of Inngest handler in Go using net/http

LANGUAGE: go
CODE:
package main

import (
	"net/http"
	"github.com/inngest/inngestgo"
)

func main() {
	h := inngestgo.NewHandler("core", inngestgo.HandlerOpts{})
	f := inngestgo.CreateFunction(
		inngestgo.FunctionOpts{
			ID:   "account-created",
			Name: "Account creation flow",
		},
		inngestgo.EventTrigger("api/account.created", nil),
		AccountCreated,
	)
	h.Register(f)
	http.ListenAndServe(":8080", h)
}

----------------------------------------

TITLE: Demonstrating Function Finalization Step in TypeScript
DESCRIPTION: Illustrates the finalization step in an Inngest function trace, showing the code execution between the last step and the function handler's end.

LANGUAGE: typescript
CODE:
const myFunction = inngest.createFunction(
  { id: "handle-import" }
  { event: "integration.connected" }
  async ({ event, step }) => {
    const res = await step.run("import-data", async () => {
      // ...
    });
    // -- Finalization starts ⬇️ --
    const newRows = res.rows.filter((row) => row.created === true)
    return { message: `Imported ${newRows.length} rows` }
    // -- Finalization ends ⬆️ --
  },
)

----------------------------------------

TITLE: Disabling Auto-discovery in Inngest Dev Server
DESCRIPTION: Command to start the Inngest dev server with auto-discovery disabled, using the --no-discovery flag.

LANGUAGE: shell
CODE:
npx inngest-cli@latest dev --no-discovery -u http://localhost:3000/api/inngest

----------------------------------------

TITLE: Configuring Page Layout - JavaScript
DESCRIPTION: Sets page configuration to hide the sidebar navigation.

LANGUAGE: JavaScript
CODE:
export const hidePageSidebar = true;

----------------------------------------

TITLE: Example Inngest Function Failure Event Payload in JSON
DESCRIPTION: This JSON snippet demonstrates the structure of an Inngest function failure event payload. It includes details about the error, the original event that triggered the function, and identifiers for the function and run.

LANGUAGE: json
CODE:
{
  "name": "inngest/function.failed",
  "data": {
    "error": {
      "__serialized": true,
      "error": "invalid status code: 500",
      "message": "taylor@ok.com is already a list member. Use PUT to insert or update list members.",
      "name": "Error",
      "stack": "Error: taylor@ok.com is already a list member. Use PUT to insert or update list members.\n    at /var/task/.next/server/pages/api/inngest.js:2430:23\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async InngestFunction.runFn (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/components/InngestFunction.js:378:32)\n    at async InngestCommHandler.runStep (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/components/InngestCommHandler.js:459:25)\n    at async InngestCommHandler.handleAction (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/components/InngestCommHandler.js:359:33)\n    at async ServerTiming.wrap (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/helpers/ServerTiming.js:69:21)\n    at async ServerTiming.wrap (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/helpers/ServerTiming.js:69:21)"
    },
    "event": {
      "data": { "billingPlan": "pro" },
      "id": "01H0TPSHZTVFF6SFVTR6E25MTC",
      "name": "user.signup",
      "ts": 1684523501562,
      "user": { "external_id": "6463da8211cdbbcb191dd7da" }
    },
    "function_id": "my-gcp-cloud-functions-app-hello-inngest",
    "run_id": "01H0TPSJ576QY54R6JJ8MEX6JH"
  },
  "id": "01H0TPW7KB4KCR739TG2J3FTHT",
  "ts": 1684523589227
}

----------------------------------------

TITLE: Configuring Function Run Priority in Inngest
DESCRIPTION: This code snippet demonstrates how to set up priority for a function run in Inngest. It uses a conditional expression to assign priority based on the account type, with enterprise accounts receiving higher priority.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  {
    id: "ai-generate-summary",
    priority: {
      // For enterprise accounts, a given function run will be prioritized
      // ahead of functions that were enqueued up to 120 seconds ago.
      // For all other accounts, the function will run with no priority.
      run: "event.data.account_type == 'enterprise' ? 120 : 0",
    },
  },
  { event: "ai/summary.requested" },
  async ({ event, step }) => {
    // This function will be prioritized based on the account type
  }
);

----------------------------------------

TITLE: Handling Thrown Errors with Try/Catch in Python
DESCRIPTION: This snippet demonstrates a verbose approach to handling potential errors using multiple try/catch blocks in Python.

LANGUAGE: python
CODE:
def upsert_thing(thing_id: str) -> Thing:
    try:
        thing = get_thing(thing_id)
    except Exception as err:
        # Swallow error and create a new Thing
        thing = Thing(thing_id)

    try:
        thing.set_name("Doodad")
    except Exception as err:
        raise Exception(f"failed to set name: {err}") from err

    try:
        update_thing(thing)
    except Exception as err:
        raise Exception(f"failed to update: {err}") from err

    try:
        log_thing(thing)
    except Exception as err:
        # Swallow error because logging isn't critical
        pass

	return user

----------------------------------------

TITLE: Inngest Configuration File Examples
DESCRIPTION: Configuration file examples in YAML and JSON formats for setting up Inngest server parameters.

LANGUAGE: yaml
CODE:
urls:
  - http://localhost:3000/api/inngest
poll-interval: 60
redis-uri: redis://localhost:6379
sqlite-dir: /app/data

LANGUAGE: json
CODE:
{
  "urls": [
    "http://localhost:3000/api/inngest"
  ],
  "poll-interval": 60,
  "redis-uri": "redis://localhost:6379",
  "sqlite-dir": "/app/data"
}

----------------------------------------

TITLE: Configuring netlify.toml with custom host and path for Inngest plugin
DESCRIPTION: Advanced configuration in netlify.toml file to specify custom host and path for the Inngest plugin. This allows for more flexible setups with non-standard domains or function paths.

LANGUAGE: toml
CODE:
[[plugins]]
package = "netlify-plugin-inngest"

  [plugins.inputs]
    host = "https://my-specific-domain.com"
    path = "/api/inngest"

----------------------------------------

TITLE: Implementing Weekly Email Activity Scheduler in Go
DESCRIPTION: Go implementation of a scheduled function that fetches users and broadcasts events to trigger individual email sending functions. Uses inngestgo.Send() for event sending.

LANGUAGE: go
CODE:
package main

import (
    "context"
    "github.com/inngest/inngest-go"
    "github.com/inngest/inngest-go/step"
)

func loadCron(client *inngest.Client) *inngest.FunctionDefinition {
    return client.CreateFunction(
        inngest.FunctionOpts{
            ID: "weekly-activity-load-users",
        },
        inngest.CronTrigger("0 12 * * 5"),
        func(ctx context.Context, event *inngest.Event) error {
            var users []User
            if err := step.Run("fetch-users", func() error {
                var err error
                users, err = fetchUsers()
                return err
            }); err != nil {
                return err
            }

            events := make([]inngest.Event, len(users))
            for i, user := range users {
                events[i] = inngest.Event{
                    Name: "app/weekly-email-activity.send",
                    Data: map[string]interface{}{
                        "user": user,
                    },
                }
            }

            if err := inngestgo.Send(ctx, events); err != nil {
                return err
            }

            return step.Return(map[string]interface{}{
                "count": len(users),
            })
        },
    )
}

----------------------------------------

TITLE: Error Handling in Video Rendering - JavaScript/Inngest
DESCRIPTION: Implements failure handling for the video rendering process, including status updates, user credit refunds, and error reporting.

LANGUAGE: javascript
CODE:
export const renderVideo = inngest.createFunction(
  {
    name: 'Render video',
    id: 'render-video',
    cancelOn: [
      {
        event: 'banger/video.create',
        match: 'data.videoId'
      }
    ],
    onFailure: async ({ error, event, step }) => {
      await dbConnect()

      const isStalled = RenderStalledError.isRenderStalledError(error)

       const updatedVideo = await step.run(
        'Update video status to failed',
        () =>
          VideoModel.findOneAndUpdate(
            { _id: event.data.event.data.videoId },
            {
              $set: {
                status: isStalled ? 'stalled' : 'error',
                ...(isStalled && { stalledAt: new Date() }),
                renderProgress: null
              }
            },
            { new: true }
          )
            .lean()
      )

      invariant(updatedVideo, 'no video found')

      if (!isStalled) {
        await step.run('Refund user units', async () => {
          await UserModel.updateOne(
            {
              _id: event.data.event.data.userId
            },
            { $inc: { unitsRemaining: updatedVideo.videoDuration } }
          )
        })
      }

      if (process.env.NODE_ENV === 'production') {
        const errorJson = _.truncate(JSON.stringify(event), {
          length: 3000
        })
        await sendTelegramLog(
          _.truncate(
            `🚨 Error while rendering video: ${error.message}\n
          Event: ${errorJson}\n`,
            { length: 3000 }
          )
        )
      }

      Sentry.captureException(error)
    }
  },
  { event: 'banger/video.create' },
  async ({ event, step, attempt, logger }) => {
    // ...
  })

----------------------------------------

TITLE: Express.js Server Self-Registration with Inngest
DESCRIPTION: Express.js server implementation that includes automatic self-registration with Inngest after deployment. This code checks for the RENDER_EXTERNAL_URL environment variable to determine if it's running on Render and attempts to register the application.

LANGUAGE: typescript
CODE:
app.listen(PORT, async () => {
  console.log(`✅ Server started on localhost:${PORT}
➡️ Inngest running at http://localhost:${PORT}/api/inngest`);

  // Attempt to self-register the app after deploy
  if (process.env.RENDER_EXTERNAL_URL) {
    console.log(
      `Attempting self-register. Functions: `,
      functions.map((f) => f.name).join(', ')
    );
    const inngestURL = new URL('/api/inngest', process.env.RENDER_EXTERNAL_URL);
    const result = await fetch(inngestURL, {
      method: 'PUT',
    });
    await sleep(2000);
    try {
      const json = await result.json();
      console.log(
        `Register attempted:`,
        inngestURL.toString(),
        result.status,
        json
      );
    } catch (err) {
      console.log(
        `Register failed:`,
        inngestURL.toString(),
        result.status,
        result.body
      );
    }
  }
});

function sleep(t: number): Promise<void> {
  return new Promise((res) => {
    return setTimeout(res, t);
  });
}

----------------------------------------

TITLE: Configuring Start Timeout for Inngest Function in Go
DESCRIPTION: This snippet shows how to set a 'Start' timeout property in Go to cancel a function if it takes longer than 10 seconds to start. It includes creating a function with event triggers and step execution.

LANGUAGE: go
CODE:
return inngestgo.CreateFunction(
	inngestgo.FunctionOpts{
		Name: "A function",
		Timeouts: &inngestgo.Timeouts{
			// If the run takes longer than 10s to start, cancel the run.
			Start: inngestgo.Ptr(10*time.Second),
		},
	},
	inngestgo.EventTrigger("tasks/reminder.created", nil),
	func(ctx context.Context, input inngestgo.Input[ReminderEvent]) (any, error) {
		return step.Run(ctx, "send-reminder", func (ctx context.Context) (bool, error) {
			// ...
			return false, nil
		})
	},
)

----------------------------------------

TITLE: Implementing Errors as Values in Go
DESCRIPTION: This snippet demonstrates Go's approach to handling errors as values using tuple-like returns.

LANGUAGE: go
CODE:
func getUser(userID string) (*User, error) {
	rows := users.Find(userID)
	if len(rows) == 0 {
		return nil, errors.New("user not found")
	}

	return rows[0], nil
}

func renameUser(userID string, name string) (*User, error) {
  // Consume the function
	user, err := getUser(userID)
	if err != nil {
		return nil, err
	}

	user.Name = name
	return user, nil
}

----------------------------------------

TITLE: Starting Inngest Server
DESCRIPTION: Commands to start the Inngest server using shell or Docker.

LANGUAGE: plaintext
CODE:
inngest start

LANGUAGE: plaintext
CODE:
docker run -p 8288:8288 inngest/inngest inngest start

----------------------------------------

TITLE: Implementing Video Processing Tasks with Celery in Python
DESCRIPTION: This code snippet demonstrates how to implement video processing tasks using Celery in Python. It shows the separation of tasks and the need for manual task chaining and state management.

LANGUAGE: python
CODE:
# tasks.py

from celery import shared_task
from utils import transcribe_video, summarize_transcript, write_to_db

@shared_task(name='process_video')
def process_video(event, user_id, priority=10):
    video_path = event['data']['videoPath']

    # Transcribe the video
    transcript = transcribe_video(video_path, user_id, priority)

    # Summarize the transcript
    summary = summarize_transcript(transcript, user_id, priority)

    # Write to the database
    write_to_db(video_path, transcript, summary, user_id, priority)

@shared_task
def process_video_event(event, priority=10):
    user_id = event['data']['userId']
    process_video.apply_async(args=[event], kwargs={'user_id': user_id, 'priority': priority})

----------------------------------------

TITLE: Health Check Implementation - TypeScript
DESCRIPTION: Implementation of a health check HTTP server for monitoring Inngest connection status in containerized environments.

LANGUAGE: typescript
CODE:
import { createServer } from 'http';
import { connect } from 'inngest/connect';
import { inngest, functions } from './src/inngest';

(async () => {
  const connection = await connect({
    apps: [{ client: inngest, functions }]
  });

  console.log('Worker: connected', connection);

  const httpServer = createServer((req, res) => {
    if (req.url === '/ready') {
      if (connection.state === ConnectionState.ACTIVE) {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('OK');
      } else {
        res.writeHead(500, { 'Content-Type': 'text/plain' });
        res.end('NOT OK');
      }
      return;
    }
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('NOT FOUND');
  });

  httpServer.listen(8080, () => {
    console.log('Worker: HTTP server listening on port 8080');
  });

  await connection.closed;

  console.log('Worker: Shut down');
  httpServer.close();
})();

----------------------------------------

TITLE: Sending Events to Inngest Dev Server using SDK
DESCRIPTION: Code examples for sending events to the Inngest dev server using the SDK in Node.js, Python, and Go.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";

const inngest = new Inngest({ id: "my-app" });
await inngest.send({
  name: "user.avatar.uploaded",
  data: { url: "https://a-bucket.s3.us-west-2.amazonaws.com/..." },
});

LANGUAGE: python
CODE:
from inngest import Inngest

inngest_client = inngest.Inngest(app_id="my_app")
await inngest_client.send(
  name="user.avatar.uploaded",
  data={"url": "https://a-bucket.s3.us-west-2.amazonaws.com/..."},
)

LANGUAGE: go
CODE:
package main

import "github.com/inngest/inngest-go"

func main() {
  inngestgo.Send(context.Background(), inngestgo.Event{
    Name: "user.avatar.uploaded",
    Data: map[string]any{"url": "https://a-bucket.s3.us-west-2.amazonaws.com/..."},
  })
}

----------------------------------------

TITLE: Installing netlify-plugin-inngest via npm or yarn
DESCRIPTION: Commands to install the netlify-plugin-inngest as a dev dependency using either npm or yarn package managers.

LANGUAGE: sh
CODE:
npm install --save-dev netlify-plugin-inngest
# or
yarn add --dev netlify-plugin-inngest

----------------------------------------

TITLE: Defining Theme Configuration Constants in JavaScript
DESCRIPTION: Exports constant values for the feature title and release date for the dark mode implementation.

LANGUAGE: javascript
CODE:
export const title = "Dark mode";
export const date = "2025-02-26";

----------------------------------------

TITLE: YAML Frontmatter Configuration for Ocoya Story
DESCRIPTION: YAML configuration block that defines metadata and redirect settings for the Ocoya customer story page, including title, subtitle, image path, and publication date.

LANGUAGE: yaml
CODE:
redirect: /customers/ocoya
heading: "Customer story: Ocoya"
subtitle: Learn how Ocoya uses Inngest to develop and deliver their world class product in record time, with end-to-end local testing.
image: /assets/blog/ocoya-case-study.png
date: 2023-04-07

----------------------------------------

TITLE: Configuring Web Crawler Access and Sitemap for Inngest.com
DESCRIPTION: Standard robots.txt configuration that allows all web crawlers to access the site, specifies the canonical host, and declares the sitemap location.

LANGUAGE: robotstxt
CODE:
# *
User-agent: *
Allow: /

# Host
Host: https://www.inngest.com

# Sitemaps
Sitemap: https://www.inngest.com/sitemap.xml

----------------------------------------

TITLE: Defining Workflow Actions in TypeScript
DESCRIPTION: Defines available workflow actions as PublicEngineAction array, including AI-powered tasks for content management and social media generation.

LANGUAGE: typescript
CODE:
import { type PublicEngineAction } from "@inngest/workflow-kit";

export const actions: PublicEngineAction[] = [
  {
    kind: "add_ToC",
    name: "Add a Table of Contents",
    description: "Add an AI-generated ToC",
  },
  {
    kind: "grammar_review",
    name: "Perform a grammar review",
    description: "Use OpenAI for grammar fixes",
  },
  {
    kind: "wait_for_approval",
    name: "Apply changes after approval",
    description: "Request approval for changes",
  },
  {
    kind: "apply_changes",
    name: "Apply changes",
    description: "Save the AI revisions",
  },
  {
    kind: "generate_linkedin_posts",
    name: "Generate LinkedIn posts",
    description: "Generate LinkedIn posts",
  },
  {
    kind: "generate_tweet_posts",
    name: "Generate Twitter posts",
    description: "Generate Twitter posts",
  },
];

----------------------------------------

TITLE: Unit Testing Inngest Functions with Mocked Library
DESCRIPTION: Demonstrates how to unit test an Inngest function using the mocked library, including setting up test cases and assertions.

LANGUAGE: python
CODE:
import unittest
import inngest
from inngest.experimental import mocked
from .functions import greet

# Mocked Inngest client. The app_id can be any string (it's currently unused)
client_mock = mocked.Inngest(app_id="test")

# A normal Python test class
class TestGreet(unittest.TestCase):
    def test_greet(self) -> None:
        # Trigger the function with an in-memory, simulated Inngest server
        res = mocked.trigger(
            greet,
            inngest.Event(name="user.login", data={"name": "Alice"}),
            client_mock,
        )

        # Assert that it ran as expected
        assert res.status is mocked.Status.COMPLETED
        assert res.output == "Hello, Alice!"

----------------------------------------

TITLE: Creating Next.js Entry Point
DESCRIPTION: Implementation of the main page component that serves as the application entry point

LANGUAGE: tsx
CODE:
'use client'

import dynamic from 'next/dynamic'
import '../../index.css'

const App = dynamic(() => import('../../App'), { ssr: false })

export default function Page() {
  return (<App />)
}

----------------------------------------

TITLE: Syncing Inngest App using Curl Command
DESCRIPTION: This curl command sends a PUT request to your application's serve endpoint to sync it with Inngest. It's useful for manual syncing or automating the process in CI/CD pipelines.

LANGUAGE: shell
CODE:
curl -X PUT https://<your-app>.com/api/inngest

----------------------------------------

TITLE: Implementing Inngest Integration
DESCRIPTION: Sets up Inngest client, creates a function handler, and configures the FastAPI endpoint for Inngest

LANGUAGE: python
CODE:
import logging
from fastapi import FastAPI
import inngest
import inngest.fast_api

# Create an Inngest client
inngest_client = inngest.Inngest(
    app_id="fast_api_example",
    logger=logging.getLogger("uvicorn"),
)

# Create an Inngest function
@inngest_client.create_function(
    fn_id="my_function",
    # Event that triggers this function
    trigger=inngest.TriggerEvent(event="app/my_function"),
)
async def my_function(ctx: inngest.Context, step: inngest.Step) -> str:
    ctx.logger.info(ctx.event)
    return "done"

app = FastAPI()

# Serve the Inngest endpoint
inngest.fast_api.serve(app, inngest_client, [my_function])

----------------------------------------

TITLE: Defining Page Metadata in JavaScript
DESCRIPTION: This snippet sets the title and date for the webpage using JavaScript export statements. It defines the page title as 'Webhook management API' and sets a future date.

LANGUAGE: javascript
CODE:
export const title = "Webhook management API";
export const date = "2025-02-12";

----------------------------------------

TITLE: Creating Inngest Function with Side-effect Import
DESCRIPTION: Demonstrates how to create an Inngest function when the function is defined in a different package than the client. Includes necessary side-effect import.

LANGUAGE: go
CODE:
import (
	"github.com/inngest/inngestgo"

	// Side-effect import to include functions declared in a different package.
	_ "github.com/myorg/myapp/fns"
)

func main() {
	client, err := inngestgo.NewClient(inngestgo.ClientOpts{AppID: "my-app"})

	// ...
}

----------------------------------------

TITLE: Email Bounce Handler in TypeScript
DESCRIPTION: Inngest function that handles bounced emails by updating user email status in database.

LANGUAGE: tsx
CODE:
import db from "./database";

const invalidateUserEmail = inngest.createFunction(
  { id: 'invalidate-user-email' },
  { event: 'resend/email.bounced' },
  async ({ event }) => {
    const email = event.data.to[0];
    const user = await db.users.byEmail(email);
    if (user) {
      user.email_status = "invalid";
      await db.users.update(user);
    }
  }
)

----------------------------------------

TITLE: Sending Inngest Function Failures to Datadog in TypeScript
DESCRIPTION: This snippet creates an Inngest function that listens for the 'inngest/function.failed' event and sends the failure details to Datadog using the Datadog Events API. It requires the @datadog/datadog-api-client package and an Inngest client instance.

LANGUAGE: typescript
CODE:
import { client, v1 } from "@datadog/datadog-api-client";
import { inngest } from "./client";

const configuration = client.createConfiguration();
const apiInstance = new v1.EventsApi(configuration);

export default inngest.createFunction(
  {
    name: "Send failures to Datadog",
    id: "send-failed-function-events-to-datadog"
  },
  { event: "inngest/function.failed" },
  async ({ event, step }) => {
    // This is a normal Inngest function, so we can use steps as we normally do:
    await step.run("send-event-to-datadog", async () => {
      const error = event.data.error;

      // Create the Datadog event body using information about the failed function:
      const params: v1.EventsApiCreateEventRequest = {
        body: {
          title: "Inngest Function Failed",
          alert_type: "error",
          text: `The ${event.data.function_id} function failed with the error: ${error.message}`,
          tags: [
            // Add a tag with the Inngest function id:
            `inngest_function_id:${event.data.function_id}`,
          ],
        },
      };

      // Send to Datadog:
      const data = await apiInstance.createEvent(params);

      // Return the data to Inngest for viewing in function logs:
      return { message: "Event sent successfully", data };
    });
  }
);

----------------------------------------

TITLE: Disabling Dev Server Auto-Discovery in Shell
DESCRIPTION: Command to disable the dev server's automatic endpoint discovery functionality using the CLI.

LANGUAGE: shell
CODE:
npx inngest-cli@latest dev --no-discovery

----------------------------------------

TITLE: Cross-App Function Reference
DESCRIPTION: Demonstrates how to reference a function from a different application by specifying both functionId and appId.

LANGUAGE: typescript
CODE:
import { referenceFunction } from "inngest";

await step.invoke("start-process", {
  function: referenceFunction({
    functionId: "some-fn",
    appId: "some-app",
  }),
});

----------------------------------------

TITLE: Next.js App Router Implementation
DESCRIPTION: Example of implementing Inngest in Next.js App Router with required HTTP methods

LANGUAGE: typescript
CODE:
import { serve } from "inngest/next";
import { inngest } from "../../../inngest/client";
import fnA from "../../../inngest/fnA";

export const { GET, POST, PUT } = serve({
  client: inngest,
  functions: [fnA],
});

----------------------------------------

TITLE: Running Inngest Dev Server
DESCRIPTION: Commands to start the Inngest Dev Server using either npx or Docker

LANGUAGE: shell
CODE:
npx inngest-cli@latest dev -u http://127.0.0.1:8000/api/inngest --no-discovery

LANGUAGE: shell
CODE:
docker run -p 8288:8288 inngest/inngest \
  inngest dev -u http://host.docker.internal:8000/api/inngest --no-discovery

----------------------------------------

TITLE: Defining Page Metadata in JavaScript
DESCRIPTION: This code snippet defines the title and date for the documentation page using JavaScript export statements. It sets the title to describe Postgres support for self-hosted Inngest and sets a future date.

LANGUAGE: javascript
CODE:
export const title = "Postgres support for self-hosted Inngest (experimental)";
export const date = "2025-01-20";

----------------------------------------

TITLE: Initializing Inngest Client - TypeScript
DESCRIPTION: Initialize the Inngest client with an application ID for sending events. The client should be instantiated once and exported for use throughout the application.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";

export const inngest = new Inngest({ id: "acme-storefront-app" }); // Use your app's ID

----------------------------------------

TITLE: Correct Variable Assignment from Steps
DESCRIPTION: Example showing correct way to assign variables from step.run() results.

LANGUAGE: typescript
CODE:
const userId = await step.run("get-user", () => getRandomUserId());

console.log(userId); // 123

----------------------------------------

TITLE: Exporting Aomni Case Study Metadata in JavaScript
DESCRIPTION: Configuration exports for a case study page including company information, quotes, and metadata for the Aomni implementation of Inngest.

LANGUAGE: javascript
CODE:
export const title = 'Productionizing AI-driven sales flows using serverless LLMs'
export const companyName = 'Aomni'
export const logo = '/assets/customers/aomni-logo.svg'
export const quote = {
  text: `For anyone who is building multi-step AI agents (such as AutoGPT type
systems), I highly recommend building it on top of Inngest's job queue
orchestration framework, the traceability it provides out of the box is
super useful, plus you get timeouts & retries for free.`,
  attribution: {
    name: 'David Zhang',
    title: 'CEO & Co-founder',
  },
  avatar: '/assets/customers/aomni-david.jpg',
}
export const companyURL = 'https://www.aomni.com'
export const companyDescription = 'Actionable account intelligence for sales'
export const ogImage = '/assets/customers/case-study/og-image-aomni.png'

----------------------------------------

TITLE: Scheduling Jobs at Specific Times with TypeScript in Inngest
DESCRIPTION: Example demonstrating how to schedule jobs for specific times using step.sleepUntil() method in TypeScript. Shows both ISO string and event-based timestamp scheduling.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";

const inngest = new Inngest({ id: "signup-flow" });

export const fn = inngest.createFunction(
  { id: "send-signup-email" },
  { event: "app/user.created" },
  async ({ event, step }) => {
    await step.sleepUntil("wait-for-iso-string", "2023-04-01T12:30:00");

    await step.sleepUntil("wait-for-timestamp", event.data.run_at);

    await step.run("do-some-work-in-the-future", async () => {
      // This runs at the specified time.
    });
  }
);

----------------------------------------

TITLE: Basic Inngest Serve Handler
DESCRIPTION: Implementation of the basic serve handler that creates an HTTP endpoint for Inngest functions

LANGUAGE: typescript
CODE:
serve({
  client: inngest, // a client created with new Inngest()
  functions: [fnA, fnB], // an array of Inngest functions to serve
  /* Optional extra configuration */
});

----------------------------------------

TITLE: Creating Virtual Environment
DESCRIPTION: Sets up a Python virtual environment and activates it

LANGUAGE: shell
CODE:
python -m venv .venv && source .venv/bin/activate

----------------------------------------

TITLE: Implementing a Type-Safe Event Emitter in TypeScript
DESCRIPTION: Creates a type-safe event listener function that provides autocomplete for event names and correctly types the callback function arguments based on the event.

LANGUAGE: typescript
CODE:
interface Args {
  "server.start": { success: boolean };
  "server.stop": { stoppedAt: Date };
}

const on = <Event extends keyof Args>(
  event: Event,
  fn: (arg: Args[Event]) => any
) => {
  // ...
};

on("server.start", ({ success }) => {
//                     ^?

----------------------------------------

TITLE: Installing Inngest SDK with Python
DESCRIPTION: Installation command for the Inngest SDK using Python's pip package manager.

LANGUAGE: shell
CODE:
pip install inngest

----------------------------------------

TITLE: Boolean Expression Examples in JavaScript for Inngest
DESCRIPTION: Demonstrates various boolean expressions used in Inngest for conditional matching, including string comparisons, number comparisons, and combining multiple conditions.

LANGUAGE: javascript
CODE:
// Match a field to a string
"event.data.billingPlan == 'enterprise'"

// Number comparison
"event.data.amount > 1000"

// Combining multiple conditions
"event.data.billingPlan == 'enterprise' && event.data.amount > 1000"
"event.data.billingPlan != 'pro' || event.data.amount < 300"

// Compare the function trigger with an inbound event (for wait for event or cancellation)
"event.data.userId == async.data.userId"

// Alternatively, you can use JavaScript string interpolation for wait for event
`${userId} == async.data.userId` // => "user_1234 == async.data.userId"

----------------------------------------

TITLE: Configuring netlify.toml for basic Inngest plugin setup
DESCRIPTION: Basic configuration in netlify.toml file to enable the Inngest plugin for Netlify builds. This setup uses default settings for host and path.

LANGUAGE: toml
CODE:
[[plugins]]
package = "netlify-plugin-inngest"

----------------------------------------

TITLE: Implementing Sum Function in Python SDK
DESCRIPTION: Demonstrates creation of a Python function using Inngest SDK that calculates the sum of provided values. The function includes input validation and error handling for non-integer inputs.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="total",
    trigger=inngest.TriggerEvent(event="python-app/total"),
)
def fn(
    ctx: inngest.Context,
    step: inngest.StepSync,
) -> int:
    values = ctx.event.data.get("values")
    if not isinstance(values, list):
        raise inngest.NonRetriableError("values must be a list")

    total = 0
    for value in values:
        if not isinstance(value, int):
            raise inngest.NonRetriableError("values must be a list of integers")
        total += value

    return total

----------------------------------------

TITLE: Express Integration
DESCRIPTION: Setting up Inngest functions within an Express application

LANGUAGE: typescript
CODE:
import { serve } from "inngest/express";
import { inngest } from "./src/inngest/client";

app.use(express.json());
app.use(
  "/api/inngest",
  serve({ client: inngest, functions: [fnA] })
);

----------------------------------------

TITLE: Embedding Graphy Visualization in HTML
DESCRIPTION: This snippet shows how to embed a Graphy visualization using an iframe in HTML. It sets the width to 100% and the height to 420 pixels.

LANGUAGE: html
CODE:
<iframe src="https://visualize.graphy.app/view/748398b9-71ab-42e6-9e60-836ebafebf76"
  style={{ width: "100%", height: "420px" }}/>

----------------------------------------

TITLE: Enforcing Object Structure with Record Type in TypeScript
DESCRIPTION: Shows how to use a Record type to ensure an object includes all specified keys, providing compile-time checks for completeness.

LANGUAGE: typescript
CODE:
type Hobby = "dancing" | "romancing" | "typescript";

// The compiler will make sure we account for every hobby!
const myHobbies: Record<Hobby, boolean> = {
// Error: Property 'romancing' is missing in type '{ readonly dancing: false; readonly typescript: true; }' but required in type 'Record<Hobby, boolean>'.
  dancing: false,
  typescript: true,
} as const;

----------------------------------------

TITLE: Configuring API Base URL
DESCRIPTION: Environment variable to set the Inngest API origin endpoint where the app registers itself. Defaults to https://api.inngest.com/

LANGUAGE: env
CODE:
INNGEST_API_BASE_URL=https://api.inngest.com/

----------------------------------------

TITLE: Running Historic Replay in Inngest CLI
DESCRIPTION: Command to execute local functions against real production data using Inngest's historic replay feature. This allows developers to test their functions with actual events that have flowed through their system.

LANGUAGE: bash
CODE:
inngest run --replay

----------------------------------------

TITLE: Implementing Inngest Function with Cancellation Cleanup
DESCRIPTION: Example showing how to create an Inngest function with cancellation handling and a corresponding cleanup function. The code demonstrates setting up a main import function that can be cancelled and a cleanup handler that executes when cancellation occurs.

LANGUAGE: typescript
CODE:
const inngest = new Inngest({ id: "newsletter-app" });

// This is our "import" function that will get cancelled
export const importAllContacts = inngest.createFunction(
  {
    id: "import-all-contacts",
    cancelOn: [{ event: "contacts/import.cancelled", if: "async.data.importId == event.data.importId" }]
  },
  { event: "contacts/import.requested" },
  async ({ event, step  }) => {
    // This is a long running function
  }
)

// This function will be run only when the matching function_id has a run that is cancelled
export const cleanupCancelledImport = inngest.createFunction(
  {
    name: "Cleanup cancelled import",
    id: "cleanup-cancelled-import"
  },
  {
    event: "inngest/function.cancelled",
    // The function ID is a hyphenated slug of the App ID w/ the functions" id
    if: "event.data.function_id == 'newsletter-app-import-all-contacts'"
  },
  async ({ event, step, logger }) => {
    // This code will execute after your function is cancelled

    // The event that triggered our original function run is passed nested in our event payload
    const originalTriggeringEvent = event.data.event;
    logger.info(`Import was cancelled: ${originalTriggeringEvent.data.importId}`)
  }
);

----------------------------------------

TITLE: Creating Autonomous Agent Network - TypeScript
DESCRIPTION: Implements agent autonomy using AgentKit's Network concept to run the agent in a loop until task completion.

LANGUAGE: typescript
CODE:
import { createAgent, anthropic, createTool, createNetwork } from "@inngest/agent-kit"

const agent = createAgent(/* our Agent and its Tools */);

const network = createNetwork({
    name: "coding-agent-network",
    agents: [agent],
    maxIter: 10,
    defaultRouter: ({ network }) => {
    if (network?.state.kv.has("task_summary")) {
        return;
    }

    return agent;
    },
});

async function main() {
    const result = await network.run(process.argv.slice(2).join(" "));
    console.log(result.state.kv.get("task_summary"));
}

main();

----------------------------------------

TITLE: Installing Inngest SDK in Node.js
DESCRIPTION: Commands to install the Inngest SDK using various package managers.

LANGUAGE: shell
CODE:
npm install inngest

LANGUAGE: shell
CODE:
yarn add inngest

LANGUAGE: shell
CODE:
pnpm add inngest

LANGUAGE: shell
CODE:
bun add inngest

----------------------------------------

TITLE: Implementing Errors as Values in Python using Tuples
DESCRIPTION: This snippet demonstrates how to implement errors as values in Python using tuples, similar to Go's approach.

LANGUAGE: python
CODE:
def get_user(user_id: str) -> tuple[User | None, Exception | None]:
    rows = users.find(user_id=user_id)
    if len(rows) == 0:
        return None, Exception("user not found")

    return rows[0], None

def rename_user(
    user_id: str, name: str
) -> tuple[User | None, Exception | None]:
    # Consume the function
    user, err = get_user(user_id)
    if err is not None:
        return None, err

    # Unnecessary check but the type checker can't know that
    assert user is not None

    user.name = name
    return user, None

----------------------------------------

TITLE: Creating a Type-Safe Factory Function in TypeScript
DESCRIPTION: Implements a factory function that enforces input types while inferring literal output types, providing both safety and precise type information.

LANGUAGE: typescript
CODE:
type Hobby = "dancing" | "romancing" | "typescript";

/**
 * Enforce input and infer the literal output
 */
const createHobbies = <T extends Record<Hobby, boolean>>(hobbies: T): T =>
  hobbies;

const myHobbies = createHobbies({
  dancing: false,
  romancing: false,
  typescript: true,
});

const likeDancing = myHobbies.dancing;
//     ^?

----------------------------------------

TITLE: Creating Weekly Scheduled Task with Inngest in JavaScript
DESCRIPTION: Example of creating a weekly digest function that runs every Monday at 9am using Inngest's cron scheduling. The function loads accounts and sends digest emails with built-in error handling and logging.

LANGUAGE: javascript
CODE:
import { inngest } from "./client";

inngest.createFunction(
  { id: "send-weekly-digest" },
  { cron: "0 9 * * MON" },
  async ({ step }) => {
    const accounts = await step.run("load-accounts", async () => {
      return await getAllAccounts();
    });
    // For each account, reliably send a weekly digest.
    for (let account of accounts) {
      await step.run(
        "send-digest",
        async () => await sentWeeklyDigest(account)
      );
    }
    return `Sent ${accounts.length} weekly digest emails`;
  }
);

----------------------------------------

TITLE: Defining a Transform Function for Clerk Webhook
DESCRIPTION: This snippet shows how to define a transform function for Clerk webhooks. It takes the raw event payload and converts it into the Inngest event format, prefixing the event name with 'clerk/'.

LANGUAGE: javascript
CODE:
function transform(evt, headers = {}, queryParams = {}) {
  return {
    name: `clerk/${evt.type}`,
    data: evt.data,
    // You can optionally set ts using data from the raw json payload
    // to explicitly set the timestamp of the incoming event.
    // If ts is not set, it will be automatically set to the time the request is received.
  }
}

----------------------------------------

TITLE: Implementing Domain Verification with Durable Functions
DESCRIPTION: A refactored version using Durable Functions that provides better error handling, automatic retries, and timeout management. Includes step-based execution and sleep functionality.

LANGUAGE: tsx
CODE:
import { intervalToDuration } from "date-fns";

import inngest from "./inngest-client";
import prisma from "./prisma-client";
import {
  resend,
  FROM,
  DomainConfiguredEmailTemplate,
  DomainFailedConfigureEmailTemplate,
} from "./resend";
import { checkDNSRecord } from "./domain-verification";

export default inngest.createFunction(
  { id: "account-verify-domain" },
  { event: "account/verify-domain" },
  async ({ event, step }) => {
    let domainConfigured = false;

    const { domain, account } = event.data;

    const { hours: hoursSinceStarted } = intervalToDuration(
      event.ts,
      new Date()
    );

    while (!domainConfigured && hoursSinceStarted < 72) {
      const { error } = await step.run("check-domain", async () => {
        return checkDNSRecord(domain.domain);
      });

      if (!error) {
        domainConfigured = true;
      } else {
        await step.sleep('wait-5min-for-next-check', '5m')
      }
    }

    if (domainConfigured) {
      await step.run("send-domain-configured-email", async () => {
        await resend.emails.send({
          from: FROM,
          to: [account.email],
          subject: "Start sending emails now!",
          react: DomainConfiguredEmailTemplate({ account }),
        });
      });
    } else {
      await step.run("send-domain-failed-configured", async () => {
        await resend.emails.send({
          from: FROM,
          to: [domain.account.email],
          subject: "We coudn't configure your domain.",
          react: DomainFailedConfigureEmailTemplate({
            account: domain.account,
          }),
        });
      });
    }

    await step.run("update-domain-status-for-dashboard", async () => {
      await prisma.domains.update({
        where: {
          id: domain.id,
        },
        data: {
          status: status: domainConfigured ? "configured" : "error",
        },
      });
    });
  }
);

----------------------------------------

TITLE: Implementing Debounce Control for AI Calls
DESCRIPTION: Example of using debounce to control how frequently a user can make AI API calls.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  {
    id: "summarize-user-generated-content",
    debounce: {
      period: "1m",
      key: "event.data.user_id",
    },
  },
  { event: "ai/summary.requested" },
  async ({ event, step }) => {
    /* call OpenAI */
  }
)

----------------------------------------

TITLE: Defining Inngest Function in Pages Router
DESCRIPTION: Code to define an Inngest function in Next.js Pages Router.

LANGUAGE: typescript
CODE:
export const helloWorld = inngest.createFunction(
  { id: "hello-world" },
  { event: "test/hello.world" },
  async ({ event, step }) => {
    await step.sleep("wait-a-moment", "1s");
    return { message: `Hello ${event.data.email}!` };
  },
);

----------------------------------------

TITLE: Adding Text Input to Bubbletea Model in Go
DESCRIPTION: Extends the Bubbletea model to include a text input component. This demonstrates how to integrate subcomponents into the main application state.

LANGUAGE: go
CODE:
func NewModel() (*model, error) {
	ti := textinput.New()
	ti.CharLimit = 30
	ti.Placeholder = "Type in your event"
	return &model{input: ti}, nil
}

type model struct {
	nameInput string
	listInput string
	event     string
	input textinput.Model
}

func (m model) Init() tea.Cmd {
	cmd := m.input.Init()
	return cmd
}

func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	var (
		cmd  tea.Cmd
		cmds []tea.Cmd
	)
	// ... (previous switch statement)
	m.input, cmd = m.textinput.Update(msg)
	cmds = append(cmds, cmd)
	m.nameInput = m.textinput.Value()
	return m, tea.Batch(cmds...)
}

func (m model) View() string {
	if m.event != "" {
		return fmt.Sprintf("You've selected: %s", m.event)
	}
	b := &strings.Builder{}
	b.WriteString("Enter your event:\n")
	b.WriteString(m.input.View())
	return b.String()
}

----------------------------------------

TITLE: Rendering Guide Grid - JSX
DESCRIPTION: Renders a 4-column grid of guide links for platform documentation using GuideGrid and Guide components. Each guide contains a name, description and href link.

LANGUAGE: JSX
CODE:
<GuideGrid cols={4}>

  <Guide
    href="/docs/apps/cloud"
    name="Working with apps"
    description="Sync your app and functions with the Inngest platform"
  />

  <Guide
    href="/docs/platform/environments"
    name="Working with environments"
    description="How to use production, branch and local environments"
  />

  <Guide
    href="/docs/events/creating-an-event-key"
    name="Creating an event key"
    description="Used to send events to your environment"
  />

  <Guide
    href="/docs/platform/replay"
    name="Replaying functions"
    description="Replay your function runs"
    />

</GuideGrid>

----------------------------------------

TITLE: Invoking Inngest Functions Across Different Apps
DESCRIPTION: This example shows how to create Inngest functions in two different apps and invoke a function from one app in another using the 'invoke_by_id' method with the 'app_id' parameter.

LANGUAGE: python
CODE:
inngest_client_1 = inngest.Inngest(app_id="app-1")
inngest_client_2 = inngest.Inngest(app_id="app-2")

@inngest_client_1.create_function(
    fn_id="fn-1",
    trigger=inngest.TriggerEvent(event="app/fn-1"),
)
async def fn_1(
    ctx: inngest.Context,
    step: inngest.Step,
) -> str:
    return "Hello!"

@inngest_client_2.create_function(
    fn_id="fn-2",
    trigger=inngest.TriggerEvent(event="app/fn-2"),
)
async def fn_2(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    output = step.invoke_by_id(
        "invoke",
        app_id="app-1",
        function_id="fn-1",
    )

    # Prints "Hello!"
    print(output)

----------------------------------------

TITLE: Setting Environment Variables for Inngest Development
DESCRIPTION: Creates a .env file with the INNGEST_DEV variable set to the ngrok tunnel URL. This is used for local development with the Inngest Dev Server.

LANGUAGE: plaintext
CODE:
INNGEST_DEV=https://23ef-173-10-53-121.ngrok-free.app

----------------------------------------

TITLE: Installing Inngest SDK with NPM Package Managers
DESCRIPTION: Installation commands for the Inngest SDK using various Node.js package managers including npm, yarn, pnpm, and bun.

LANGUAGE: shell
CODE:
npm install inngest

LANGUAGE: shell
CODE:
yarn add inngest

LANGUAGE: shell
CODE:
pnpm add inngest

LANGUAGE: shell
CODE:
bun add inngest

----------------------------------------

TITLE: Inngest Event Payload Structure
DESCRIPTION: Example of a typical event payload object structure in Inngest, showing the standard fields including name, data, version, and timestamp.

LANGUAGE: typescript
CODE:
{
  name: "app/account.created",
  data: {
    userId: "1234567890"
  },
  v: "2023-05-12.1",
  ts: 1683898268584
}

----------------------------------------

TITLE: Installing and Configuring Encryption Middleware in Python
DESCRIPTION: Demonstrates how to install and configure the EncryptionMiddleware in Python for Inngest. It shows the import statements and client initialization with the middleware.

LANGUAGE: python
CODE:
import inngest
from inngest_encryption import EncryptionMiddleware

inngest_client = inngest.Inngest(
    app_id="my-app",
    middleware=[EncryptionMiddleware.factory("my-secret-key")],
)

----------------------------------------

TITLE: Creating Astro-Inngest Project via NPM
DESCRIPTION: Command to create a new Astro project with Inngest integration using a template. This creates a starter project that demonstrates the integration between Astro and Inngest.

LANGUAGE: bash
CODE:
npm create astro@latest -- --template inngest/inngest-js/examples/framework-astro inngest-astro

----------------------------------------

TITLE: Subscribing from Backend (Typed Channels)
DESCRIPTION: Example of subscribing to a channel from the backend using typed channels.

LANGUAGE: typescript
CODE:
import { subscribe } from "@inngest/realtime";
import { userChannel } from "./channels";
import { inngest } from "src/inngest";

const stream = await subscribe(inngest, {
  channel: userChannel("123"),
  topics: ["ai"], // subscribe to one or more topics in the user channel
});

// The returned `stream` from `subscribe()` is a `ReadableStream` that can be
// used with `getReader()` or as an async iterator
//
// In both cases, message is typed based on the subscription

// Example 1: AsyncIterator
for await (const message of stream) {
  console.log(message); // message is now typed/validated
}

// Example 2: ReadableStream
const reader = stream.getReader();
const { done, value } = await reader.read();
if (!done) {
  console.log(value); // value is now typed/validated
}

----------------------------------------

TITLE: Pausing Execution for a Given Time in Python
DESCRIPTION: Shows how to use step.sleep() to pause function execution for a specific duration in Python. This example demonstrates sleeping for 2 seconds using a timedelta object.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="my_function",
    trigger=inngest.TriggerEvent(event="app/my_function"),
)
async def fn(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    await step.sleep("zzz", datetime.timedelta(seconds=2))

----------------------------------------

TITLE: Pausing Execution Until a Given Date in TypeScript
DESCRIPTION: Demonstrates using step.sleepUntil() to pause function execution until a specific date and time in TypeScript. This example shows scheduling a reminder based on an event's data.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  { id: "send-scheduled-reminder" },
  { event: "app/reminder.scheduled" },
  async ({ event, step }) => {
    const date = new Date(event.data.remind_at);
    await step.sleepUntil("wait-for-scheduled-reminder", date);
    // Do something else
  }
);

----------------------------------------

TITLE: Basic Event Sending with Inngest SDK
DESCRIPTION: Example showing how to send a basic event with account creation data and user information using the Inngest client.

LANGUAGE: typescript
CODE:
import { inngest } from "./client";

await inngest.send({
  name: "app/account.created",
  data: {
    accountId: "645e9f6794e10937e9bdc201",
    billingPlan: "pro",
  },
  user: {
    external_id: "645ea000129f1c40109ca7ad",
    email: "taylor@example.com",
  }
})

----------------------------------------

TITLE: Defining Page Description for Flow Control Documentation in JavaScript
DESCRIPTION: This snippet sets the description for the flow control documentation page. It provides a brief explanation of what users will learn from the content.

LANGUAGE: JavaScript
CODE:
export const description = 'Learn how to manage how functions are executed with flow control';

----------------------------------------

TITLE: Fetching Function Runs using Inngest REST API
DESCRIPTION: Shows the REST API endpoint for fetching all runs triggered by a specific event using the event's ID.

LANGUAGE: bash
CODE:
https://api.inngest.com/v1/events/01HWAVEB858VPPX47Z65GR6P6R/runs

----------------------------------------

TITLE: Installing Workflow Kit via Package Managers
DESCRIPTION: Commands for installing the Workflow Kit and Inngest packages using different Node.js package managers (npm, pnpm, and yarn).

LANGUAGE: shell
CODE:
npm install @inngest/workflow-kit inngest

LANGUAGE: shell
CODE:
pnpm add @inngest/workflow-kit inngest

LANGUAGE: shell
CODE:
yarn add @inngest/workflow-kit inngest

----------------------------------------

TITLE: Subscribing from Backend (Minimal)
DESCRIPTION: Minimal example of subscribing to a channel from the backend using the subscribe function.

LANGUAGE: typescript
CODE:
import { subscribe } from "@inngest/realtime";
import { inngest } from "src/inngest";

const stream = await subscribe(inngest, {
  channel: "user:123",
  topics: ["ai"], // subscribe to one or more topics in the user channel
});

// The returned `stream` from `subscribe()` is a `ReadableStream` that can be
// used with `getReader()` or as an async iterator
//
// In both cases, message is typed based on the subscription

// Example 1: AsyncIterator
for await (const message of stream) {
  console.log(message);
}

// Example 2: ReadableStream
const reader = stream.getReader();
const { done, value } = await reader.read();
if (!done) {
  console.log(value);
}

----------------------------------------

TITLE: Development Mode Configuration
DESCRIPTION: Environment variable to disable production mode or specify custom Dev Server URL. Set to 1 to disable production mode or provide a custom URL.

LANGUAGE: env
CODE:
INNGEST_DEV=1
INNGEST_DEV=http://host.docker.internal:8288

----------------------------------------

TITLE: Correct Usage of inngest.send()
DESCRIPTION: Example showing correct usage of inngest.send() with await.

LANGUAGE: typescript
CODE:
await inngest.send({ name: "some.event" });

----------------------------------------

TITLE: Installing Inngest CLI using Different Methods
DESCRIPTION: Multiple installation methods for the Inngest CLI including npm, Docker, and curl commands.

LANGUAGE: plaintext
CODE:
npm install -g inngest-cli

LANGUAGE: plaintext
CODE:
docker pull inngest/inngest

LANGUAGE: plaintext
CODE:
curl -sfL https://cli.inngest.com/install.sh

----------------------------------------

TITLE: Type-Only Function Reference
DESCRIPTION: Demonstrates how to reference a function using only its type definition to avoid importing dependencies.

LANGUAGE: typescript
CODE:
import { referenceFunction } from "inngest";
import { type someInngestFn } from "@/inngest/someFn"; // import only the type

await step.invoke("start-process", {
  function: referenceFunction<typeof someInngestFn>({
    functionId: "some-fn",
  }),
});

----------------------------------------

TITLE: Exporting Prometheus Metrics in YAML format for Inngest Functions
DESCRIPTION: This YAML snippet demonstrates the format of exported Prometheus metrics for Inngest functions. It includes counters for function runs, SDK requests, and gauges for step execution.

LANGUAGE: yaml
CODE:
# HELP inngest_function_run_ended_total The total number of function runs ended
# TYPE inngest_function_run_ended_total counter
inngest_function_run_ended_total{date="2025-02-12",fn="my-app-my-function",status="Completed"} 480
inngest_function_run_ended_total{date="2025-02-12",fn="my-app-my-function",status="Failed"} 20
# HELP inngest_function_run_scheduled_total The total number of function runs scheduled
# TYPE inngest_function_run_scheduled_total counter
inngest_function_run_scheduled_total{date="2025-02-12",fn="my-app-my-function"} 500
# HELP inngest_function_run_started_total The total number of function runs started
# TYPE inngest_function_run_started_total counter
inngest_function_run_started_total{date="2025-02-12",fn="my-app-my-function"} 500
# HELP inngest_sdk_req_ended_total The total number of SDK invocation/step execution ended
# TYPE inngest_sdk_req_ended_total counter
inngest_sdk_req_ended_total{date="2025-02-12",fn="my-app-my-function",status="errored"} 17
inngest_sdk_req_ended_total{date="2025-02-12",fn="my-app-my-function",status="failed"} 15
inngest_sdk_req_ended_total{date="2025-02-12",fn="my-app-my-function",status="success"} 740
# HELP inngest_sdk_req_scheduled_total The total number of SDK invocation/step execution scheduled
# TYPE inngest_sdk_req_scheduled_total counter
inngest_sdk_req_scheduled_total{date="2025-02-12",fn="my-app-my-function"} 772
# HELP inngest_sdk_req_started_total The total number of SDK invocation/step execution started
# TYPE inngest_sdk_req_started_total counter
inngest_sdk_req_started_total{date="2025-02-12",fn="my-app-my-function"} 772
# HELP inngest_step_output_bytes_total The total number of bytes used by step outputs
# TYPE inngest_step_output_bytes_total counter
inngest_step_output_bytes_total{date="2025-02-12",fn="my-app-my-function"} 2804
# HELP inngest_steps_running The number of steps currently running
# TYPE inngest_steps_running gauge
inngest_steps_running{fn="my-app-my-function"} 7
# HELP inngest_steps_scheduled The number of steps scheduled
# TYPE inngest_steps_scheduled gauge
inngest_steps_scheduled{fn="my-app-my-function"} 30

----------------------------------------

TITLE: Adding Function to serve() in App Router
DESCRIPTION: Code to add the Inngest function to the serve() handler in Next.js App Router.

LANGUAGE: typescript
CODE:
import { serve } from "inngest/next";
import { inngest } from "../../../inngest/client";
import { helloWorld } from "../../../inngest/functions";

export const { GET, POST, PUT } = serve({
  client: inngest,
  functions: [
    helloWorld, // <-- This is where you'll always add all your functions
  ],
});

----------------------------------------

TITLE: Using useInngestSubscription Hook in React Component
DESCRIPTION: This snippet demonstrates how to use the useInngestSubscription hook in a React component to subscribe to channels using a token and render streamed data. It imports necessary dependencies, sets up the subscription, and maps the received data to JSX elements.

LANGUAGE: tsx
CODE:
"use server";

import { useInngestSubscription } from "@inngest/realtime/hooks";
import { inngest } from "src/inngest";

export default function MyComponent({ token }: { token: string }) {
  // Use a user scoped token to subscribe to channels:
  const { data } = useInngestSubscription({
    app: inngest,
    token,
  });

  return (
    <div>
      {data.map((message, i) => (
        <div key={i}>{message.data}</div>
      ))}
    </div>
  );
}

----------------------------------------

TITLE: Implementing WebSocket Store in SvelteKit with TypeScript
DESCRIPTION: Example of creating a reactive store that updates in real-time with WebSocket messages. Demonstrates Svelte's built-in state management using writable stores and WebSocket event handling.

LANGUAGE: typescript
CODE:
import { writable } from "svelte/store";

type State = {
  requests: Array<Request>;
};

// Create a new store with the given data.
export const state = writable<State>({
  requests: [],
});

export const connect = () => {
  // Create a new websocket
  const ws = new WebSocket("ws://example.com");

  ws.addEventListener("message", (message: any) => {
    // Parse the incoming message here
    const data: Request = JSON.parse(message.data);
    // Update the state.  That's literally it.  This can happen from anywhere:
    // we're not in a component, and there's no nested context.
    state.update((state) => ({
      ...state,
      requests: [data].concat(state.requests),
    }));
  });
};

----------------------------------------

TITLE: Starting Inngest Dev Server with npx and Docker
DESCRIPTION: Commands to start the Inngest dev server using npx or Docker, with options to specify the serve API endpoint.

LANGUAGE: shell
CODE:
npx inngest-cli@latest dev
# You can specify the URL of your development `serve` API endpoint
npx inngest-cli@latest dev -u http://localhost:3000/api/inngest

LANGUAGE: shell
CODE:
docker run -p 8288:8288 inngest/inngest \
  inngest dev -u http://host.docker.internal:3000/api/inngest

----------------------------------------

TITLE: Implementing Hacker News Agent Workflow with Inngest in TypeScript
DESCRIPTION: Defines the main workflow for the Hacker News AI agent using Inngest, including fetching interests and questions from the database.

LANGUAGE: typescript
CODE:
import { inngest } from "./client";

export const hackerNewsAgent = inngest.createFunction(
  {
    id: "hacker-news-agent",
  },
  { event: "hacker-news-agent/run" },
  async ({ event, db, step }) => {
    const { interest_id, question_id } = event.data;

    // By wrapping code in step.run(),
    //   the code will be retried if it throws an error.
    // If successful, its result is saved to prevent unnecessary re-execution.
    const { interest, question } = await step.run(
      "fetch-interest-and-question",
      async () => {
        const interest = await db.query(
          "SELECT * FROM interests WHERE id = $1 LIMIT 1",
          [interest_id]
        );
        const question = await db.query(
          "SELECT * FROM questions WHERE id = $1 LIMIT 1",
          [question_id]
        );
        return { interest: interest.rows[0], question: question.rows[0] };
      }
    );

    if (!interest || !question) {
      console.warn(
        "[HackerNewsAgent] Interest or question not found, aborting"
      );
      return;
    }
  }
);

----------------------------------------

TITLE: Implementing Audio Processing Workflow in Python
DESCRIPTION: Python implementation of the same audio processing workflow, demonstrating cross-language compatibility with identical step IDs and functionality for seamless migration.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="process-audio",
    trigger=inngest.TriggerEvent(event="podcast/audio.uploaded"),
)
async def fn(ctx: inngest.Context, step: inngest.Step) -> None:
    async def transcode_audio() -> str:
        filename = download(ctx.event.data["url"])
        return await transcode(filename, 'aac')
    new_file_url = await step.run("transcode-audio", transcode_audio)

    async def generate_transcript():
        return # ... business logic omitted ...
    transcript = await step.run("generate-transcript", generate_transcript)

    async def summarize():
        return # ...
    summary = await step.run("summarize-with-ai", summarize)

    async def save_to_db():
        return # ...
    await step.run("save-to-db", save_to_db)

----------------------------------------

TITLE: Importing React Components for Inngest Documentation
DESCRIPTION: This code snippet imports React components used for structuring the documentation page. It includes Callout, Col, and Row components from a shared documentation module.

LANGUAGE: javascript
CODE:
import { Callout, Col, Row } from "src/shared/Docs/mdx";

----------------------------------------

TITLE: Setting Up Inngest HTTP Endpoint with Express.js
DESCRIPTION: Configures an Express.js server to handle Inngest functions via a '/api/inngest' endpoint.

LANGUAGE: typescript
CODE:
import express from "express";
import { serve } from "inngest/express";
import { inngest, functions } from "./src/inngest"

// Important: ensure you add JSON middleware to process incoming JSON POST payloads.
app.use(express.json());
// Set up the "/api/inngest" (recommended) routes with the serve handler
app.use("/api/inngest", serve({ client: inngest, functions }));

app.listen(3000, () => {
  console.log('Server running on http://localhost:3000');
});

----------------------------------------

TITLE: Selective Function Cancellation using JSON API Request
DESCRIPTION: Example JSON request demonstrating how to cancel specific function executions based on vendor ID and date range criteria. The request targets functions in the billing app for vendor-syncs with conditions for both vendor matching and execution timeframe.

LANGUAGE: json
CODE:
{
  "if": "event.data.vendor_id == 'acme_inc'",
  "started_after": "2024-01-21T00:00:00Z",
  "started_before": "2024-01-22T00:00:00Z",
  "app_id": "billing",
  "function_id": "vendor-syncs"
}

----------------------------------------

TITLE: Creating Background Function Handler with Inngest
DESCRIPTION: Implementation of a background function that processes source connection events. The function handles data backfilling and demonstrates Inngest's automatic retry capabilities.

LANGUAGE: javascript
CODE:
import { inngest } from "./client";

inngest.createFunction(
  { id: "backfill-user-data" },
  { event: "api/source.connected" },
  async ({ event }) => {
    const source = await getSource(event.data.sourceId);
    await backfillDataForSource(source);
    return `Successful backfill for ${source.id} (User: ${event.data.userId})`;
  }
);

----------------------------------------

TITLE: Installing Inngest Pulse Router with NPX
DESCRIPTION: Command to generate the Inngest Pulse Router in your application using npx.

LANGUAGE: bash
CODE:
npx try-prisma -t pulse/inngest-router

----------------------------------------

TITLE: Stubbing Inngest Steps in Unit Tests
DESCRIPTION: Shows how to implement stubbing for step.invoke and step.wait_for_event in unit tests, including timeout simulation.

LANGUAGE: python
CODE:
# Real production function
@client.create_function(
    fn_id="signup",
    trigger=inngest.TriggerEvent(event="user.signup"),
)
def signup(
    ctx: inngest.Context,
    step: inngest.StepSync,
) -> bool:
    email_id = step.invoke(
        "send-email",
        function=send_email,
    )

    event = step.wait_for_event(
        "wait-for-reply",
        event="email.reply",
        if_exp=f"async.data.email_id == '{email_id}'",
        timeout=datetime.timedelta(days=1),
    )
    user_replied = event is not None
    return user_replied

# Mocked Inngest client
client_mock = mocked.Inngest(app_id="test")

class TestSignup(unittest.TestCase):
    def test_signup(self) -> None:
        res = mocked.trigger(
            fn,
            inngest.Event(name="test"),
            client_mock,

            # Stub the invoke and wait_for_event steps. The keys are the step
            # IDs
            step_stubs={
                "send-email": "email-id-abc123",
                "wait-for-reply": inngest.Event(
                    data={"text": "Sounds good!"}, name="email.reply"
                ),
            },
        )
        assert res.status is mocked.Status.COMPLETED
        assert res.output is True

----------------------------------------

TITLE: Example Database Event Structure in JSON
DESCRIPTION: Shows the structure of an event generated when a new row is inserted into a 'books' table. The event includes metadata like transaction ID, commit time, and the inserted data with its encoding.

LANGUAGE: json
CODE:
{
  "name": "db/books.inserted",
  "data": {
    "new": {
      "id": {
        "data": 2,
        "encoding": "i"
      },
      "name": {
        "data": "Designing Data-Intensive Applications",
        "encoding": "t"
      },
      "description": {
        "data": "Data is at the center of many challenges...",
        "encoding": "t"
      }
    },
    "table": "books",
    "txn_commit_time": "2024-09-24T14:41:19.75149Z",
    "txn_id": 36530520
  },
  "ts": 1727146545006
}

----------------------------------------

TITLE: Searching for Custom Errors Using CEL Expression
DESCRIPTION: This CEL expression shows how to search for custom errors (UserNotFoundError) in Inngest, combining event data and error output.

LANGUAGE: cel
CODE:
event.data.userId == "12345" && output.name == "UserNotFoundError"

----------------------------------------

TITLE: Defining Types for Wildcard Triggers in TypeScript
DESCRIPTION: Demonstrates how to define TypeScript types for wildcard event triggers in Inngest, including specific event names and data structures for different event types.

LANGUAGE: typescript
CODE:
type WildcardEvents = {
  "app/blog.post.*": {
    name: "app/blog.post.created" | "app/blog.post.published";
    data: {
      postId: string;
      authorId: string;
      createdAt: string;
    } | {
      postId: string;
      authorId: string;
      publishedAt: string;
    }
  }
}
const inngest = new Inngest({
  id: "my-app",
  schemas: new EventSchemas().fromRecord<WildcardEvents>()
});

inngest.createFunction(
  { id: "blog-updates-to-slack" },
  { event: "app/blog.post.*" },
  async ({ event, step }) => {
    // ...
  },
);

----------------------------------------

TITLE: Implementing Event Batching in Inngest with TypeScript
DESCRIPTION: This snippet demonstrates how to create a function in Inngest that uses the new event batching feature. It processes multiple 'log/api.call' events in batches, extracts relevant data, and performs a bulk write to a database.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  // `batchEvents` is a new function configuration
  { name: "Record API calls", batchEvents: { maxSize: 100, timeout: "5s" } },
  { event: "log/api.call" },
  // NOTE: Use the `events` instead of the `event` argument, which is an array of event payloads
  async ({ events, step }) => {
    const attrs = events.map(evt => {
      return {
        user_id: evt.data.user_id,
        endpoint: evt.data.endpoint,
        timestamp: toDateTime(evt.ts)
      }
    })

    const result = await step.run("record data to DB", async () => {
      return db.bulkWrite(attrs)
    })

    return { success: true, recorded: result.length }
  }
)

----------------------------------------

TITLE: Defining Metadata for CMD+K Quick Search Update in JavaScript
DESCRIPTION: This snippet sets the title and date for the CMD+K Quick Search feature update announcement. It uses JavaScript export statements to define these metadata variables.

LANGUAGE: JavaScript
CODE:
export const title = "CMD+K Quick Search";
export const date = "2025-03-24";

----------------------------------------

TITLE: Implementing Welcome Email Function with Clerk and Inngest
DESCRIPTION: Creates an Inngest function that sends a welcome email using React Email and Resend when a new user is created in Clerk. The function handles concurrent execution and processes clerk/user.created events.

LANGUAGE: typescript
CODE:
const welcomeEmail = inngest.createFunction(
  { name: "Send welcome email", id: "send-welcome-email", concurrency: 10 },
  { event: "clerk/user.created" },
  async ({ event, step }) => {
    const email = event.data.email_addresses[0].email_address;
    await step.run('send-email', async () => {
      return await resend.emails.send({
        to: email,
        from: "noreply@inngest.com",
        subject: "Welcome to Inngest!",
        react: WelcomeEmail(),
      })
    });
  }
)

----------------------------------------

TITLE: Email Sending Helper Function in TypeScript
DESCRIPTION: Helper function using Resend API to send emails with React components as content.

LANGUAGE: tsx
CODE:
import { Resend } from 'resend';

const resend = new Resend(process.env.RESEND_API_KEY);

export async function sendEmail(
  to: string,
  subject: string,
  content: React.ReactElement
) {
  const { data, error } = await resend.emails.send({
    from: 'Acme <noreply@acme.dev>',
    to: [to],
    subject,
    react: content
  });

  if (error) {
    throw error;
  }

	return data;
};

----------------------------------------

TITLE: Adding Rate Limiting to Durable Functions
DESCRIPTION: Example of implementing flow control in Durable Functions using throttling to prevent API rate limit issues.

LANGUAGE: tsx
CODE:
export default inngest.createFunction(
  {
    id: "account-verify-domain",
    // we limit this Durable Function to 2 call/s
    throttle: {
      limit: 2,
      period: "1s",
    },
  },
  { event: "account/verify-domain" },
  async ({ event, step }) => {
    // ...
  }
)

----------------------------------------

TITLE: Platform-Specific Inngest Configuration in TypeScript
DESCRIPTION: Example of configuring Inngest client for specific platforms like Netlify, showing how to set the environment using platform-specific environment variables.

LANGUAGE: typescript
CODE:
const inngest = new Inngest({
  id: "my-app",
  env: process.env.BRANCH,
});

----------------------------------------

TITLE: Configuring Rate Limiting in Python for Inngest
DESCRIPTION: This snippet illustrates how to configure rate limiting for an Inngest function in Python. It restricts the function to 1 run per 4 hours for a given company_id.

LANGUAGE: python
CODE:
@inngest.create_function(
  id="synchronize-data",
  rate_limit=inngest.RateLimit(
    limit=1,
    period=datetime.timedelta(hours=4),
    key="event.data.company_id",
  ),
  trigger=inngest.Trigger(event="intercom/company.updated")
)
async def synchronize_data(ctx: inngest.Context):
    # This function will be rate limited to 1 run per 4 hours for a given event payload with matching company_id

----------------------------------------

TITLE: Defining K6 Test Script for API Load Testing in JavaScript
DESCRIPTION: This code snippet demonstrates how to create a basic K6 load test script that sends a JSON payload to an API endpoint using HTTP POST. It sets up the request headers and data, which can be used to simulate real-world API interactions during load testing.

LANGUAGE: javascript
CODE:
import http from "k6/http";

export default function () {
  const data = '{"status":200}';
  const params = {
    headers: {
      "Content-Type": "application/json",
    },
  };
  http.post("https://www.example.local", data, params);
}

----------------------------------------

TITLE: Transforming Resend Webhook Events in JSX
DESCRIPTION: Transform function that converts incoming Resend webhook data to Inngest event format by adding a prefix to event names.

LANGUAGE: jsx
CODE:
function transform(evt, headers = {}, queryParams = {}) {
  return {
    // Add a prefix to the name of the event
    name: `resend/${evt.type}`,
    data: evt.data,
   };
};

----------------------------------------

TITLE: Building and Running Inngest Website in Production Mode
DESCRIPTION: Commands to build the Inngest website for production use and then start it in production mode. This is useful for testing the app in a production-like environment locally.

LANGUAGE: sh
CODE:
# Build the app for production usage
$ pnpm build

# Start the app in production mode
$ pnpm start

----------------------------------------

TITLE: Starting Inngest Dev Server
DESCRIPTION: Command to start the Inngest development server for local testing.

LANGUAGE: bash
CODE:
npx inngest-cli@latest dev

----------------------------------------

TITLE: Video Status Update - JavaScript/MongoDB
DESCRIPTION: Updates the video status to 'ready' and sets render time in the database after successful rendering.

LANGUAGE: javascript
CODE:
await step.run('update-video-status-to-ready', () =>
  Promise.all([
    VideoModel.updateOne(
      { _id: videoId },
      {
        $set: {
          status: 'ready',
          videoFileURL
        },
        $inc: {
          renderTime
        }
      }
    )
  ])
)

----------------------------------------

TITLE: Subscribing to a Channel (React Hook)
DESCRIPTION: Example of using the useInngestSubscription React hook to subscribe to a channel.

LANGUAGE: typescript
CODE:
"use server";

import { useInngestSubscription } from "@inngest/realtime/hooks";

export default function MyComponent({ token }: { token: string }) {
  const { data } = useInngestSubscription({
    token,
  });

  return (
    <div>
      {data.map((message, i) => (
        <div key={i}>{message.data}</div>
      ))}
    </div>
  );
}

----------------------------------------

TITLE: Implementing Fallback Mechanism in Inngest Function (Go)
DESCRIPTION: This Go snippet creates an Inngest function that attempts to generate an image using DALL-E, falling back to Midjourney if it fails. It includes error handling and a step to notify the user of the result.

LANGUAGE: go
CODE:
inngestgo.CreateFunction(
	inngestgo.FunctionOpts{ID: "generate-result"},
	inngestgo.EventTrigger("prompt.created", nil),
	func(ctx context.Context, input inngestgo.Input[PromptCreatedEvent]) (any, error) {
		var (
			imageURL string
			err      error
		)

		via := "dall-e"
		imageURL, err = step.Run(ctx, "generate-image-dall-e", func(ctx context.Context) (string, error) {
			// Open API call to generate image with Dall-E...
		})
		if err != nil {
			// Update how we ran the code.  This could also have been a return from the step.
			via = "midjourney"
			imageURL, err = step.Run(ctx, "generate-image-midjourney", func(ctx context.Context) (string, error) {
				// MidJourney call to generate image...
			})
		}
		if err != nil {
			return nil, err
		}

		_, err = step.Run(ctx, "notify-user", func(ctx context.Context) (any, error) {
			return pusher.Trigger(input.Event.Data.ChannelID, "image-result", map[string]string{
				"imageURL": imageURL.(string),
				"via":      via,
			})
		})
		if err != nil {
			return nil, err
		}

		return nil, nil
	},
)

----------------------------------------

TITLE: Running K6 Load Test with Virtual Users in Go
DESCRIPTION: This command demonstrates how to execute a K6 load test using the Go command-line interface. It specifies the number of virtual users (25) and the duration of the test (30 seconds), which helps in simulating concurrent load on the target API.

LANGUAGE: go
CODE:
k6 run --vus 25 --duration 30s ./post.js

----------------------------------------

TITLE: Setting Environment Variables in Hono with Cloudflare Workers
DESCRIPTION: Example showing how to set environment variables for Inngest client when working with Hono framework on Cloudflare Workers, where environment variables aren't available in global scope.

LANGUAGE: typescript
CODE:
// For example, in Hono on Cloudflare Workers
app.on("POST", "/my-api/send-some-event", async (c) => {
  inngest.setEnvVars(c.env);

  await inngest.send({ name: "test/event" });

  return c.json({ message: "Done!" });
});

// You can also chain the call to be succinct
await inngest.setEnvVars(c.env).send({ name: "test/event" });

----------------------------------------

TITLE: Configuring Fallback Decryption Keys in TypeScript
DESCRIPTION: Demonstrates how to configure fallback decryption keys when rotating encryption keys in TypeScript. It shows a step-by-step process for key rotation.

LANGUAGE: typescript
CODE:
// start out with the current key
encryptionMiddleware({
  key: process.env.MY_ENCRYPTION_KEY,
});

// deploy all services with the new key as a decryption fallback
encryptionMiddleware({
  key: process.env.MY_ENCRYPTION_KEY,
  fallbackDecryptionKeys: ["new"],
});

// deploy all services using the new key for encryption
encryptionMiddleware({
  key: process.env.MY_ENCRYPTION_KEY_V2,
  fallbackDecryptionKeys: ["current"],
});

// once you are sure all data using the "current" key has passed, phase it out
encryptionMiddleware({
  key: process.env.MY_ENCRYPTION_KEY_V2,
});

----------------------------------------

TITLE: Starting the FastAPI Application
DESCRIPTION: Launches the FastAPI application with Uvicorn in development mode

LANGUAGE: shell
CODE:
(INNGEST_DEV=1 uvicorn main:app --reload)

----------------------------------------

TITLE: Processing Individual Images with Inngest Function
DESCRIPTION: Shows an Inngest function that processes individual images by copying them to an S3 bucket, triggered by the 'shopify/copy.image' event.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "shopify-copy-image-to-S3", concurrency: 20 },
  { event: "shopify/copy.image" },
  async ({ event, step }) => {
    const { imageId, storeId, productId } = event.data
    await step.run("copy-image", async () => {
      const res = await fetch(event.data.imageUrl)
      const blob = await res.blob()
      const ext = path.extname(event.data.imageUrl)
      const uploadedImage = await s3
        .upload({
          Bucket: process.env.AWS_S3_BUCKET_NAME,
          Key: `/${storeId}/${productId}/${imageId}.${ext}`,
          ContentType: res.headers.get("content-type"),
          Body: blob,
        })
        .promise()
      return uploadedImage.Location
    })
  }
)

----------------------------------------

TITLE: Using Type-Only Channels
DESCRIPTION: Demonstrates how to use type-only channels when direct channel imports are not possible.

LANGUAGE: typescript
CODE:
import { type userChannel } from "@/server/channels";
import {
  subscribe,
  getSubscriptionToken,
  typeOnlyChannel,
} from "@inngest/realtime";

const token = await fetchTokenFromBackend();

const stream = await subscribe(inngest, {
  channel: typeOnlyChannel<typeof userChannel>("user:123"),
  topics: ["ai"],
});

// or generating a token...

const token = await getSubscriptionToken(inngest, {
  channel: typeOnlyChannel<typeof userChannel>("user:123"),
  topics: ["ai"],
});

----------------------------------------

TITLE: Sending Events with Limited Context in Inngest
DESCRIPTION: This code example shows how to send an event with only the properties necessary for the Inngest Function's context, before adding more searchable properties.

LANGUAGE: ts
CODE:
await inngest.send({
  name: "user/message.sent",
  data: { messageId: 1, userId: 12 },
});

----------------------------------------

TITLE: Defining Bubbletea Model Structure in Go
DESCRIPTION: Creates a model struct to store application state for the Bubbletea UI. This includes fields for input, list selection, and final event selection.

LANGUAGE: go
CODE:
func NewModel() (*model, error) {
	return model{}, nil
}

type model struct {
	nameInput string
	listInput string
	event     string
}

var _ tea.Model = (*model)(nil)

----------------------------------------

TITLE: Creating a Typed Object with Const Assertion in TypeScript
DESCRIPTION: Demonstrates how to use const assertion to preserve literal types in an object, preventing type widening from false to boolean.

LANGUAGE: typescript
CODE:
const myHobbies = {
  dancing: false,
  typescript: true,
} as const;

const likeDancing = myHobbies.dancing;
//    ^?

----------------------------------------

TITLE: Event API Base URL Configuration
DESCRIPTION: Environment variable to set the origin for the Inngest Event API. Defaults to https://inn.gs/

LANGUAGE: env
CODE:
INNGEST_EVENT_API_BASE_URL=https://inn.gs/

----------------------------------------

TITLE: Defining Pydantic Models for Inngest Events in Python
DESCRIPTION: Demonstrates how to create Pydantic models for Inngest events in Python, including a base event class and a specific event type (InvoicePaidEvent) with conversion methods to and from Inngest Event objects.

LANGUAGE: python
CODE:
import inngest
import pydantic
import typing

TEvent = typing.TypeVar("TEvent", bound="BaseEvent")

class BaseEvent(pydantic.BaseModel):
    data: pydantic.BaseModel
    id: str = ""
    name: typing.ClassVar[str]
    ts: int = 0

    @classmethod
    def from_event(cls: type[TEvent], event: inngest.Event) -> TEvent:
        return cls.model_validate(event.model_dump(mode="json"))

    def to_event(self) -> inngest.Event:
        return inngest.Event(
            name=self.name,
            data=self.data.model_dump(mode="json"),
            id=self.id,
            ts=self.ts,
        )

class InvoicePaidEventData(pydantic.BaseModel):
    customerId: str
    invoiceId: str
    amount: int
    metadata: dict

class InvoicePaidEvent(BaseEvent):
    data: InvoicePaidEventData
    name: typing.ClassVar[str] = "billing/invoice.paid"

----------------------------------------

TITLE: Basic Event Replay Command - Inngest CLI
DESCRIPTION: Command to run local code against recent production events from Inngest Cloud account. This allows testing of code changes against real data before deployment.

LANGUAGE: bash
CODE:
$ inngest run --replay

----------------------------------------

TITLE: Initializing Inngest Client - Python
DESCRIPTION: Initialize the Inngest client in Python with an application ID for sending events.

LANGUAGE: python
CODE:
import inngest

inngest_client = inngest.Inngest(app_id="acme-storefront-app")

----------------------------------------

TITLE: Basic Function Test Execution
DESCRIPTION: Example of executing and testing an Inngest function's result and error handling.

LANGUAGE: typescript
CODE:
test("returns a greeting", async () => {
  const { result } = await t.execute();
  expect(result).toEqual("Hello World!");
});

test("throws an error", async () => {
  const { error } = await t.execute();
  expect(error).toContain("Some specific error");
});

----------------------------------------

TITLE: Implementing Bubbletea Update Function in Go
DESCRIPTION: Defines the Update function to handle user input and state changes. It processes various types of messages including window resizing and key presses.

LANGUAGE: go
CODE:
func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.WindowSizeMsg:
		_, _ = msg.Width, msg.Height
	case tea.KeyMsg:
		switch msg.Type {
		case tea.KeyCtrlC, tea.KeyCtrlBackslash:
			return m, tea.Quit
		}
	}
	return m, nil
}

----------------------------------------

TITLE: Deploying FastAPI App to Modal
DESCRIPTION: Uses the Modal CLI to deploy the FastAPI application to Modal's serverless platform.

LANGUAGE: sh
CODE:
modal deploy main.py

----------------------------------------

TITLE: Fan-out Function Examples
DESCRIPTION: Demonstrates how to implement different idempotency settings for multiple functions triggered by the same event. Shows tracking requests vs. running AI generation with different idempotency needs.

LANGUAGE: typescript
CODE:
const trackRequests = inngest.createFunction(
  { id: 'track-requests' },
  { event: 'ai/generation.requested' },
  async ({ event, step }) => {
    // Track the request
  }
)

const runGeneration = inngest.createFunction(
  {
    id: 'run-generation',
    // Given the event payload sends a hash of the prompt,
    // this will only run once per unique prompt per user
    // every 24 hours:
    idempotency: `event.data.promptHash + "-" + event.data.userId`
  },
  { event: 'ai/generation.requested' },
  async ({ event, step }) => {
    // Track the request
  }
)

----------------------------------------

TITLE: Implementing Wait for Event in Inngest Python SDK
DESCRIPTION: This snippet demonstrates how to use the 'wait_for_event' function in an Inngest workflow. It sets up a function that waits for a specific event with a timeout of 2 seconds.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="my_function",
    trigger=inngest.TriggerEvent(event="app/my_function"),
)
async def fn(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    res = await step.wait_for_event(
        "wait",
        event="app/wait_for_event.fulfill",
        timeout=datetime.timedelta(seconds=2),
    )

----------------------------------------

TITLE: Thumbnail Generation - JavaScript/FFMPEG
DESCRIPTION: Generates video thumbnails using FFMPEG and uploads them to S3 storage, updating the database with thumbnail URLs.

LANGUAGE: javascript
CODE:
await step.run('generate-thumbnail-and-upload-to-s3', async () => {
  const thumbnailFilePath = `${os.tmpdir()}/${videoId}-thumbnail.jpg`

  await execa(`ffmpeg`, [
    '-i',
    videoFileURL, // ffmpeg will grab input from URL
    '-vf',
    'thumbnail=300',
    '-frames:v', // only one frame
    '1',
    thumbnailFilePath
  ])

  const thumbnailFileURL = await uploadFile({
    Key: `thumbnails/${videoId}.jpg`,
    Body: fs.createReadStream(thumbnailFilePath)
  })

  await dbConnect()
  await VideoModel.updateOne(
    { _id: videoId },
    { $set: { thumbnailURL: thumbnailFileURL } }
  )

  await unlink(thumbnailFilePath)
})

----------------------------------------

TITLE: Rendering Resource Grid for Inngest SDK Documentation
DESCRIPTION: This JSX code creates a ResourceGrid component with multiple Resource items, each representing a different SDK or API documentation for Inngest. It includes links and icons for TypeScript, Python, Go, and REST API references.

LANGUAGE: JSX
CODE:
<ResourceGrid cols={3}>

<Resource resource={{
  href: "/docs/reference/typescript",
  name: "TypeScript SDK",
  icon: TypeScriptIcon,
  description: "",
  pattern: 0,
}}/>

<Resource resource={{
  href: "/docs/reference/python",
  name: "Python SDK",
  icon: PythonIcon,
  description: "",
  pattern: 1,
}}/>

<Resource resource={{
  href: "https://pkg.go.dev/github.com/inngest/inngestgo",
  name: "Go SDK",
  icon: GoIcon,
  description: "",
  pattern: 1,
}}/>

<Resource resource={{
  href: "https://api-docs.inngest.com/docs/inngest-api/1j9i5603g5768-introduction",
  name: "REST API",
  icon: CommandLineIcon,
  description: "",
  pattern: 1,
}}/>
</ResourceGrid>

----------------------------------------

TITLE: Serving Inngest Functions with Next.js Pages Router
DESCRIPTION: This code snippet demonstrates how to serve Inngest functions using the Next.js Pages Router. It imports the necessary modules and exports a default function that serves the Inngest client and functions.

LANGUAGE: typescript
CODE:
import { serve } from "inngest/next";
import { client } from "../../inngest/client";
import { firstFunction, anotherFunction } from "../../inngest/functions";

export default serve({
  client: client,
  functions: [
    firstFunction,
    anotherFunction
  ]
});

----------------------------------------

TITLE: Processing JSON Files and Creating Weaviate Collections
DESCRIPTION: TypeScript function to process JSON files, create Weaviate collections, and batch insert records using Weaviate's vectorizer and insertMany() APIs.

LANGUAGE: typescript
CODE:
async function processJsonFile(
  filePath: string,
  client: any,
  batchSize: number = 100
) {
  const jsonData = JSON.parse(await fs.readFile(filePath, "utf-8"));
  let count = 0;
  let records: any[] = [];

  // Create collection name from filename (without extension)
  const collectionName = path
    .basename(filePath, ".json")
    .replace(/[^a-zA-Z0-9]/g, "") // Remove special characters
    .replace(/^[0-9]/, "C$&"); // Prefix with 'C' if starts with number

  const properties = Object.keys(jsonData[0]);

  // Create collection for this file
  const collection = await client.collections.create({
    name: collectionName,
    properties: properties.map((property) => ({
      name: property,
      dataType: "text" as const,
    })),
    // Use Weaviate vectorize to create embeddings
    vectorizers: [
      weaviate.configure.vectorizer.text2VecOpenAI({
        name: "recipe_vector",
        sourceProperties: properties as any,
      }),
    ],
  });

  for (const record of jsonData) {
    const { id: _, ...cleanRecord } = record;
    records.push({
      class: collectionName,
      properties: cleanRecord,
    });
    count++;

    // we push new records in batches using Weaviate's insertMany()
    if (count % batchSize === 0) {
      console.log(
        `Processing batch from ${path.basename(filePath)}: ${
          records.length
        } records`
      );
      await collection.data.insertMany(records);
      records = [];
    }
  }

  // Process any remaining records
  if (records.length > 0) {
    console.log(
      `Processing final batch from ${path.basename(filePath)}: ${
        records.length
      } records`
    );
    await collection.data.insertMany(records);
  }

  return { count, collectionName };
}

----------------------------------------

TITLE: Implementing Edge Function with Streaming in TypeScript
DESCRIPTION: This code demonstrates how to create an Edge Function that uses a ReadableStream to simulate a long-running task with multiple steps, allowing for extended execution time.

LANGUAGE: typescript
CODE:
export const config = {
  runtime: 'edge',
};

export default async function handler(req: Request): Promise<Response> {
  // Create a ReadableStream to stream the data
  const stream = new ReadableStream({
    async start(controller) {
      // Simulate long-running task with multiple steps
      const startSync = async () => {
        controller.enqueue(`Sync started.`);

        // perform time-consuming data-sync
        const data = await getDataFromExternalSource();
        await db.syncs.insertMany(data);

        controller.enqueue(`Sync completed.`);

        // Close the stream when done
        controller.close();
      };

      // Execute the task
      startSync();
    },
  });

  // Return the stream as a response with appropriate headers
  return new Response(stream, {
    headers: { 'Content-Type': 'text/plain; charset=utf-8' },
  });
}

----------------------------------------

TITLE: Handling Stream Termination in Next.js Client Component
DESCRIPTION: This snippet shows how to handle stream termination on the client-side in a Next.js application. It demonstrates checking for a 'Search complete' message and canceling the stream reader when received.

LANGUAGE: tsx
CODE:
"use client";
import { useState, useRef, useEffect } from "react";

export function SimpleSearch() {
  const [updates, setUpdates] = useState<string[]>([]);
  const [input, setInput] = useState("");

  const handleNewChat = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!input.trim()) return;

    try {
      const response = await fetch("/api/simple-search", {
        method: "POST",
        body: JSON.stringify({ prompt: input }),
      });

      const reader = response.body?.getReader();
      if (!reader) {
        return;
      }

      while (true) {
        const { done, value } = await reader.read();
        if (done) {
          break;
        }
        const text = new TextDecoder().decode(value);
        const data = JSON.parse(text).data;
        if (data === "Search complete") {
          reader.cancel();
          break;
        } else {
          setUpdates((prev) => [...prev, data]);
        }
      }
    } catch (error) {
      console.error("Error:", error);
    } finally {
      setInput("");
    }
  };

  return (
    // ...
  );
}

----------------------------------------

TITLE: Implementing Event Sending with Inngest in Express
DESCRIPTION: Shows how to initialize Inngest and send an event when a user signs up. The code demonstrates integrating Inngest with an Express route handler.

LANGUAGE: javascript
CODE:
import { Inngest } from "inngest"

const inngest = new Inngest({ name: "My App" })

app.post("/signup", async (req, res) => {
  const account = await createAccount(req.body)
  await inngest.send({
    name: "account.created",
    data: { account_id: account.id, email: account.email }
  })
  res.redirect("/dashboard/welcome")
})

----------------------------------------

TITLE: Return Value Example
DESCRIPTION: Example showing the return value structure from step.sendEvent() containing an array of generated event IDs.

LANGUAGE: typescript
CODE:
const { ids } = await step.sendEvent([
  {
    name: "app/invoice.created",
    data: { invoiceId: "645e9e024befa68763f5b500" }
  },
  {
    name: "app/invoice.created",
    data: { invoiceId: "645e9e08f29fb563c972b1f7" }
  },
]);
/**
 * ids = [
 *   "01HQ8PTAESBZPBDS8JTRZZYY3S",
 *   "01HQ8PTFYYKDH1CP3C6PSTBZN5"
 * ]
 */

----------------------------------------

TITLE: Importing Components and Icons for Inngest SDK Reference Page
DESCRIPTION: This code snippet imports necessary components and icons for rendering the SDK reference grid. It includes imports from shared components, icon libraries, and external icon packages.

LANGUAGE: JavaScript
CODE:
import { ResourceGrid, Resource } from 'src/shared/Docs/Resources'
import TypeScriptIcon from "src/shared/Icons/TypeScript";
import PythonIcon from "src/shared/Icons/Python";
import {
  CommandLineIcon
} from "@heroicons/react/24/outline";
import GoIcon from "src/shared/Icons/Go";

export const hidePageSidebar = true;

----------------------------------------

TITLE: Handling Chat API Requests in Next.js
DESCRIPTION: This code snippet shows how to handle POST requests to the chat API endpoint in a Next.js application. It uses Inngest to send events for starting a chat or confirming an action.

LANGUAGE: typescript
CODE:
import type { Message } from 'ai'
import { customAlphabet } from 'nanoid';
import { inngest } from '@/inngest/inngest.server.client';

const nanoid = customAlphabet(
  "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
  7
);

export const runtime = 'edge'

export async function POST(req: Request) {
  const body = await req.json()
  const { messages, requestId = nanoid(), confirm } = body

  if (confirm !== undefined) {
    // Confirm API
    await inngest.send({
      name: "api/chat.confirmed",
      data: {
        requestId,
        confirm,
      },
    });
    return new Response(requestId, { status: 200 });
  }

  console.log('start the chat')

  await inngest.send({
    name: "api/chat.started",
    data: {
      messages: messages as Message[],
      requestId,
    },
  });

  return new Response(requestId as string, { status: 200 });
}

----------------------------------------

TITLE: Handling Video Upload Form Submission with tRPC Mutation in Next.js
DESCRIPTION: This snippet demonstrates how to handle form submission for video upload, including file processing and calling a tRPC mutation to create a new tip.

LANGUAGE: typescript
CODE:
const { mutate: createTip } = trpc.tips.create.useMutation();

const handleSubmit = async (values?: any, event?: BaseSyntheticEvent) => {
  try {
    if (fileType && fileContents) {
      setState("uploading");
      const uploadResponse: { secure_url: string } = await processFile(
        fileContents,
        (progress) => {
          setProgress(progress);
        }
      );

      setState("success");

      console.log({ values });

      createTip(
        {
          s3Url: uploadResponse.secure_url,
          fileName,
          title: values.title,
        },
        {
          onSettled: (data) => {
            console.log("tip creation settled", data);
            router.push(`/creator/tips/${data?.slug}`);
          },
        }
      );
    }
  } catch (err) {
    setState("error");
    console.log("error is", err);
  }
};

----------------------------------------

TITLE: Defining GitBook Case Study Metadata in TypeScript
DESCRIPTION: This code snippet defines various metadata properties for the GitBook case study, including title, company information, quotes, and descriptions. It's used to populate the case study page with relevant information.

LANGUAGE: typescript
CODE:
export const title = 'Solving bi-directional data synchronization.'
export const companyName = 'GitBook'
export const logo = '/assets/customers/gitbook-logo-white.svg'
export const logoScale = 1;
export const quote = {
  text: `We had to hack Google Cloud Tasks to achieve the same capabilities that Inngest offers out of the box, but eventually hit a roadblock achieving pure concurrency. Inngest's Developer Experience is simply incomparable. We are going to gradually migrate most features to use Inngest.`,
  attribution: {
    name: 'Johan Preynat',
    title: 'Engineering Lead',
  },
  avatar: '/assets/customers/gitbook/johan-preynat.jpeg',
}
export const companyURL = 'https://www.gitbook.com/'
export const companyDescription = `GitBook is a knowledge management tool for engineering teams.`
export const ogImage = '/assets/customers/gitbook/social-image-gitbook.png'

----------------------------------------

TITLE: Correct Sequential Steps Implementation
DESCRIPTION: Example showing correct implementation of sequential steps in Inngest.

LANGUAGE: typescript
CODE:
const aThenB = async () => {
  const someValue = await step.run("a", async () => {
    return "...";
  });

  return step.run("b", async () => {
    return use(someValue);
  });
};

await aThenB();

----------------------------------------

TITLE: Creating and Serving Inngest App in Go (HTTP)
DESCRIPTION: This snippet shows how to create an Inngest app using Go with HTTP. It creates a new handler, defines a function with event trigger, and serves the app using HTTP.

LANGUAGE: go
CODE:
package main

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/inngest/inngestgo"
	"github.com/inngest/inngestgo/step"
)

func main() {
	h := inngestgo.NewHandler("core", inngestgo.HandlerOpts{})
	f := inngestgo.CreateFunction(
		inngestgo.FunctionOpts{
			ID:   "account-created",
			Name: "Account creation flow",
		},
		// Run on every api/account.created event.
		inngestgo.EventTrigger("api/account.created", nil),
		AccountCreated,
	)
	h.Register(f)
	http.ListenAndServe(":8080", h)
}

----------------------------------------

TITLE: Defining Dependencies for Modal Deployment
DESCRIPTION: Creates a requirements.txt file listing the necessary Python dependencies for the FastAPI app with Inngest integration.

LANGUAGE: plaintext
CODE:
fastapi==0.115.0
inngest==0.4.12
python-dotenv==1.0.1

----------------------------------------

TITLE: Configuring Concurrency for Sync Functions in JavaScript
DESCRIPTION: Demonstrates how to set up concurrency limits for sync functions using Inngest, ensuring only one sync runs per destination at a time.

LANGUAGE: jsx
CODE:
const syncHoldingsFunction = inngest.createFunction({
	id: 'sync-holdings',
	name: 'Sync Holdings',
	concurrency: { limit: 1, key: 'event.data.destinationId' },
})

----------------------------------------

TITLE: Invoking Inngest Function from Vercel Function in TypeScript
DESCRIPTION: This code demonstrates how to replace a long-running Vercel Function with an Inngest Function invocation, allowing for asynchronous execution and improved scalability.

LANGUAGE: typescript
CODE:
import { inngest } from '@lib/inngest/client' 

export const dynamic = 'force-dynamic';
 
export function POST(request: Request) {
  await inngest.send({
    name: "sync/start",
    data: {
      //  The event's data (params)
    },
  });

  return new Response(`Sync triggered!`);
}

----------------------------------------

TITLE: Sending Multiple Events in Inngest
DESCRIPTION: Demonstrates how to send multiple events in a batch, with a limitation of 5000 events per request. Shows implementation across TypeScript, Go, and Python with proper event formatting.

LANGUAGE: typescript
CODE:
// this `events` list will need to be <= 5000
const events = [{name: "<event-name>", data: {}}, ...];

await step.sendEvent("send-example-events", events);
// or
await inngest.send(events);

LANGUAGE: go
CODE:
// this `events` list will need to be <= 5000
events := []inngestgo.Event{{Name: "<event-name>", Data: {}}}

ids, err := inngestgo.SendMany(ctx, events)

LANGUAGE: python
CODE:
# this `events` list will need to be <= 5000
events = [{'name': '<event-name>', 'data': {}}, ...]

await step.send_event('send-example-events', events)
# or
await inngest.send(events)

----------------------------------------

TITLE: Consuming a Stream in Next.js Client Component
DESCRIPTION: This snippet shows how to consume a streaming response on the client-side in a Next.js application. It uses the fetch API to make a request, then reads and processes the stream data using a TextDecoder and JSON parsing.

LANGUAGE: tsx
CODE:
"use client";
import { useState, useRef, useEffect } from "react";

export function SimpleSearch() {
  const [updates, setUpdates] = useState<string[]>([]);
  const [input, setInput] = useState("");

  const handleNewChat = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!input.trim()) return;

    try {
      const response = await fetch("/api/simple-search", {
        method: "POST",
        body: JSON.stringify({ prompt: input }),
      });

      const reader = response.body?.getReader();
      if (!reader) {
        return;
      }

      while (true) {
        const { done, value } = await reader.read();
        if (done) {
          break;
        }
        const text = new TextDecoder().decode(value);
        const data = JSON.parse(text).data;
        if (data === "Search complete") {
          reader.cancel();
          break;
        } else {
          setUpdates((prev) => [...prev, data]);
        }
      }
    } catch (error) {
      console.error("Error:", error);
    } finally {
      setInput("");
    }
  };

  return (
    // ...
  );
}

----------------------------------------

TITLE: Defining TypeScript Type for Inngest Event Payload
DESCRIPTION: Provides a TypeScript type representation of the Inngest event payload, including all possible properties such as name, data, user, id, ts, and v.

LANGUAGE: typescript
CODE:
// If you prefer to think in TypeScript types, here's the type representation of the event payload:
type EventPayload = {
  name: string;
  data: Record<string, any>;
  user?: Record<string, any>;
  id?: string;
  ts?: number;
  v?: string;
}

----------------------------------------

TITLE: Running Standalone Inngest Docker Container
DESCRIPTION: Command to run the Inngest Dev Server in a standalone Docker container, exposing port 8288 and specifying the URL where Inngest can find the app.

LANGUAGE: bash
CODE:
docker run -p 8288:8288 \
  inngest/inngest \
  inngest dev -u http://host.docker.internal:3000/api/inngest

----------------------------------------

TITLE: Initializing Inngest Client
DESCRIPTION: TypeScript code to initialize the Inngest client with a unique application identifier.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";

export const inngest = new Inngest({ id: "my-app" })

----------------------------------------

TITLE: CDN Cache Invalidation - JavaScript/CloudFront
DESCRIPTION: Handles CDN cache invalidation for newly rendered videos and their thumbnails using CloudFront.

LANGUAGE: javascript
CODE:
await step.run('create-invalidation-on-CloudFront', async () => {
  try {
    const { pathname: videoPathnameToInvalidate } = new URL(videoFileURL)

    return await invalidateCloudFrontPaths([
      videoPathnameToInvalidate,
      `/thumbnails/${videoId}.jpg`,
      `/thumbnails/${videoId}-square.jpg`
    ])
  } catch (error) {
    sendTelegramLog(`Invalidation failed for ${videoId}: ${error.message}`)
    return `Invalidation failed, skipping: ${error.message}`
  }
})

----------------------------------------

TITLE: Handling Failures with waitUntil and Inngest in Serverless Functions (JavaScript)
DESCRIPTION: This snippet demonstrates a more robust approach to using waitUntil with Inngest's send function. It includes error handling to log failures, allowing for potential retry strategies to be implemented later. This approach balances speed with reliability in serverless environments.

LANGUAGE: javascript
CODE:
import { inngest } from "src/inngest";

async function POST(request) {
  const data = await createPost(request.body)
  waitUntil(
    inngest.send({ name: "post.created", data: data })}
      .catch((error) => {
        // Log the event somewhere where you could read and re-send it later
      })
  )
  return new Response(data)
}

----------------------------------------

TITLE: Cancelling Event Example (JSON)
DESCRIPTION: Provides an example of a JSON event that would cancel the function execution, matching the userId from the triggering event.

LANGUAGE: json
CODE:
{
  "name": "app/user.deleted",
  "data": {
    "userId": "123"
  }
}

----------------------------------------

TITLE: Creating Inngest Function to React to GraphQL Event
DESCRIPTION: TypeScript code showing how to create an Inngest function that reacts to a specific GraphQL mutation event. It demonstrates sending a Slack message when a cart item is created.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "send-cart-alert" },
  { event: "graphql/create-cart-item.mutation" },
  async ({ event }) => {
    await sendSlackMessage(
      "#marketing",
      `Someone added product #${event.data.identifiers[0].id} to their cart!`
    );
  }
);

----------------------------------------

TITLE: Implementing tRPC Mutation for Tip Creation in Next.js
DESCRIPTION: This code defines a tRPC mutation for creating a new tip, including input validation, Sanity document creation, and triggering an Inngest event.

LANGUAGE: typescript
CODE:
export const tipsRouter = router({
  create: publicProcedure
    .input(
      z.object({
        s3Url: z.string(),
        fileName: z.string().nullable(),
        title: z.string(),
      }),
    )
    .mutation(async ({ctx, input}) => {
      const token = await getToken({req: ctx.req})
      const ability = getCurrentAbility({
        user: UserSchema.parse(token),
      })

      if (ability.can('create', 'Content')) {
        const newVideoResource = await sanityWriteClient.create({
          _id: `videoResource-${v4()}`,
          _type: 'videoResource',
          state: 'new',
          title: input.fileName,
          originalMediaUrl: input.s3Url,
        })

        if (newVideoResource._id) {
          const id = v4()
          const nanoid = customAlphabet(
            '1234567890abcdefghijklmnopqrstuvwxyz',
            5,
          )

          const tipResource = await sanityWriteClient.create({
            _id: `tip-${id}`,
            _type: 'tip',
            state: 'new',
            title: input.title,
            slug: {
              current: `${slugify(input.title)}~${nanoid()}`,
            },
            resources: [
              {
                _key: v4(),
                _type: 'reference',
                _ref: newVideoResource._id,
              },
            ],
          })

          const tip = await getTip(tipResource.slug.current)

          await inngest.send({
            name: 'tip/video.uploaded',
            data: {
              tipId: tip._id,
              videoResourceId: newVideoResource._id,
            },
          })

          return tip
        } else {
          throw new Error('Could not create video resource')
        }
      } else {
        throw new Error('Unauthorized')
      }
    }),

----------------------------------------

TITLE: Creating Pydantic Model for Specific Event in Python
DESCRIPTION: Defines a Pydantic model for a specific event (PostUpvotedEvent) by inheriting from the BaseEvent class. This allows for type-safe event creation and validation.

LANGUAGE: python
CODE:
class PostUpvotedEventData(pydantic.BaseModel):
    count: int

class PostUpvotedEvent(BaseEvent):
    data: PostUpvotedEventData
    name: typing.ClassVar[str] = "forum/post.upvoted"

----------------------------------------

TITLE: Creating Inngest Function Directory
DESCRIPTION: Shell command to create a directory for Inngest functions in the project root.

LANGUAGE: shell
CODE:
mkdir -p inngest

----------------------------------------

TITLE: Searching Function Runs with Event and Output Filters in Inngest
DESCRIPTION: This example demonstrates how to use the Function run search box to filter runs based on event payload data and run output. It searches for runs with a specific organization ID and failed verification process.

LANGUAGE: txt
CODE:
event.data.organizationId == "org_ab1fd2" && output.verified == false

----------------------------------------

TITLE: Implementing Sleep in Inngest Function for Email Drip Campaign
DESCRIPTION: This snippet showcases how to use step.sleep to pause an Inngest function for specified durations, useful for implementing an email drip campaign.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "new-user-email-drip-campaign" },
  { event: "api/account.created" },
  async ({ event, step }) => {
    await step.run("send-welcome-email", async () =>
      await sendWelcomeEmail(event.user.email)
    )

    await step.sleep("delay-second-email", "2d")

    await step.run("send-product-tips-email", async () =>
      await sendTipsEmail(event.user.email)
    )

    await step.sleep("delay-third-email", "3d")

    await step.run("send-how-tos-email", async () =>
      await sentHowTosEmail(event.user.email)
    )
  }
)

----------------------------------------

TITLE: Creating Article Outline Function in TypeScript
DESCRIPTION: Defines an Inngest function for generating article outlines based on keywords. This function conducts research and creates an outline using AI.

LANGUAGE: typescript
CODE:
export const writeOutline = client.createFunction(
  { id: "write-outline" },
  { event: Events.WRITE_OUTLINE },
  async ({ event, step }) => {
    const { keyword } = event.data as WriteOutlineRequest;
    const research = await step.run("conduct-research", async () => {
      return conductResearch(keyword);
    });

    const outline = await step.run("write-outline", async () => {
      return writeOutline(research);
    });

    return outline;
  }
);

----------------------------------------

TITLE: Wrapping OpenAI SDK with Preserved Client Context
DESCRIPTION: Demonstrates how to properly wrap the OpenAI SDK using step.ai.wrap() while preserving the client instance context. This approach is necessary for SDKs that require context preservation between invocations.

LANGUAGE: typescript
CODE:
import OpenAI from "openai";
const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

export const openAIWrapCompletionCreate = inngest.createFunction(
  { id: "opeai-wrap-completion-create" },
  { event: "openai/wrap.completion.create" },
  async ({ event, step }) => {
    //
    // Will fail because anthropic client requires instance context
    // to be preserved across invocations.
    await step.ai.wrap(
      "openai.wrap.completions",
      openai.chat.completions.create,
      {
        model: "gpt-4o-mini",
        messages: [
          { role: "system", content: "You are a helpful assistant." },
          {
            role: "user",
            content: "Write a haiku about recursion in programming.",
          },
        ],
      },
    );

    //
    // Will work beccause we bind to preserve instance context
    const createCompletion = openai.chat.completions.create.bind(
      openai.chat.completions,
    );

    const response = await step.ai.wrap(
      "openai-wrap-completions",
      createCompletion,
      {
        model: "gpt-4o-mini",
        messages: [
          { role: "system", content: "You are a helpful assistant." },
          {
            role: "user",
            content: "Write a haiku about recursion in programming.",
          },
        ],
      },
    );
  },
);

----------------------------------------

TITLE: Setting Up Route Handler in App Router
DESCRIPTION: Code to set up a route handler for the /api/inngest route in Next.js App Router.

LANGUAGE: typescript
CODE:
import { serve } from "inngest/next";
import { inngest } from "../../../inngest/client";

// Create an API that serves zero functions
export const { GET, POST, PUT } = serve({
  client: inngest,
  functions: [
    /* your functions will be passed here later! */
  ],
});

----------------------------------------

TITLE: Setting Up Integration Tests with Dev Server
DESCRIPTION: Configuration example for setting up integration tests using the dev_server library in pytest environment.

LANGUAGE: python
CODE:
import pytest
from inngest.experimental import dev_server

def pytest_configure(config: pytest.Config) -> None:
    dev_server.server.start()

def pytest_unconfigure(config: pytest.Config) -> None:
    dev_server.server.stop()

----------------------------------------

TITLE: Configuring Tailwind CSS with Custom Color Tokens
DESCRIPTION: This snippet shows how custom color tokens are integrated into the Tailwind configuration. It demonstrates the use of CSS variables for defining background colors with support for opacity.

LANGUAGE: typescript
CODE:
backgroundColor: {
    canvasBase: 'rgb(var(--color-background-canvas-base) / <alpha-value>)',
    canvasSubtle: 'rgb(var(--color-background-canvas-subtle) / <alpha-value>)',
    canvasMuted: 'rgb(var(--color-background-canvas-muted) / <alpha-value>)',
    surfaceBase: 'rgb(var(--color-background-surface-base) / <alpha-value>)',
    surfaceSubtle: 'rgb(var(--color-background-surface-subtle) / <alpha-value>)',
    surfaceMuted: 'rgb(var(--color-background-surface-muted) / <alpha-value>)',
    disabled: 'rgb(var(--color-background-disabled) / <alpha-value>)',
    alwaysWhite: 'rgb(var(--color-foreground-alwaysWhite) / <alpha-value>)',
    contrast: 'rgb(var(--color-background-contrast) / <alpha-value>)',
    success: 'rgb(var(--color-background-success) / <alpha-value>)',
}

----------------------------------------

TITLE: Implementing a Multi-Step Invite Function with Inngest in TypeScript
DESCRIPTION: This code snippet demonstrates how to create a long-running function using Inngest to invite users from a waiting list. It breaks down the process into steps for fetching emails, creating invite codes, and sending invite emails.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  { id: "invite-waiting-list" },
  { event: "invite.users" },
  async ({ event, step }) => {
    const emails = await step.run("fetch-waiting-list", async () => {
      const data = await typeformAPI.responses.list({
        after: event.data.from,
        until: event.data.until,
        pageSize: 1000,
      });
      return data.items.map(i => i.answers.find(a => a.email).email)
    });

    for (let email of emails) {
      const inviteCode = await step.run("create-invite-code", async () => {
        return await createInviteCodeAndSaveInDatabase(email);
      });
      await step.run("send-invite-email", async () => {
        return await emails.sendInviteEmail({ email, inviteCode });
      });
    }

    return { message: `Successfully invited ${emails.length} users` }
  }
)

----------------------------------------

TITLE: Creating Custom Error Types in TypeScript
DESCRIPTION: This TypeScript code shows how to create a custom error type (UserNotFoundError) extending NonRetriableError, and use it within an Inngest function for better error handling and searching.

LANGUAGE: typescript
CODE:
import { NonRetriableError } from "inngest";

class UserNotFoundError extends NonRetriableError {
  constructor(message: string) {
    super(message);
    this.name = "UserNotFoundError";
  }
}
inngest.createFunction(
  { id: "my-fn" },
  { event: "user" },
  async ({ step, event }) => {
    await step.run("get-user", async () => {
      const user = await getUser(event.data.userId);
      if (!user) {
        throw new UserNotFoundError(`User not found (${event.data.userId})`);
      }
      // ...
    });
  }
);

----------------------------------------

TITLE: Handling Inngestabot Messages with Inngest Function in TypeScript
DESCRIPTION: This code snippet defines an Inngest function that handles incoming messages for the Inngestabot. It generates a reply using OpenAI Codex and sends it back to Discord, utilizing Inngest's step tooling for error handling and retries.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { name: "Handle Inngestabot message" },
  { event: "inngestabot/message.received" },
  async ({ event, step }) => {
    const { message } = event.data;

    // Generate a reply using our OpenAI Codex endpoint
    // OpenAI can sometimes error — `step.run` automatically retries on errors
    const reply = await step.run("Generate reply from OpenAI", async () => {
      const res = await fetch(OPENAI_ENDPOINT, {
        method: "POST",
        body: JSON.stringify({ message: message.content }),
      });

      return await res.json();
    });

    // Parse and send the reply to Discord
    await step.run("Send reply to Discord", async () => {
      return await bot.sendMessage(
        message.channelId,
        createDiscordMessageFromReply(reply)
      );
    });
  }
);

----------------------------------------

TITLE: Adding Trial Check-in Email with Sleep Step
DESCRIPTION: Demonstrates how to add a delayed trial check-in email using Inngest's step.sleep() function. The email is sent 7 days after the trial starts.

LANGUAGE: typescript
CODE:
await step.sleep('7d');
await step.run('trial-check-in-email', async () => {
  return await resend.emails.send({
    to: email,
    from: "noreply@inngest.com",
    subject: "One week left on your trial!",
    react: TrialCheckInEmail(),
  })
});

----------------------------------------

TITLE: Importing Components for Inngest Documentation
DESCRIPTION: This code snippet imports various React components and icons used for structuring the documentation page. It includes imports from shared components, remix icons, and custom icon components for different programming languages.

LANGUAGE: typescript
CODE:
import { CardGroup, Card, ImageTheme } from "src/shared/Docs/mdx";
import {
  RiFunctionLine,
  RiQuestionLine,
  RiTerminalBoxLine,
} from "@remixicon/react";
import InngestIcon from 'src/shared/Icons/InngestIcon';
import TypeScriptIcon from 'src/shared/Icons/TypeScript';
import PythonIcon from 'src/shared/Icons/Python';
import GoIcon from 'src/shared/Icons/Go';

----------------------------------------

TITLE: Function-Level Idempotency Configuration
DESCRIPTION: Shows how to configure function-level idempotency using CEL expressions. The example demonstrates preventing duplicate email sends for cart checkouts.

LANGUAGE: typescript
CODE:
export const sendEmail = inngest.createFunction(
  {
    id: 'send-checkout-email',
    // This is the idempotency key
    idempotency: 'event.data.cartId',
    // Evaluates to: "s6CIMNqIaxt503I1gVEICfwp"
    // for the given event payload
  },
  { trigger: 'cart/checkout.completed' },
  async  ({ event, step }) => { /* ... */ }
)

----------------------------------------

TITLE: Defining a Scheduled Function in Next.js with Inngest
DESCRIPTION: This snippet demonstrates how to create a scheduled function (cron job) using Inngest in a Next.js application. It sets up a weekly digest email function that runs every Monday at 12:00.

LANGUAGE: javascript
CODE:
import { Inngest } from "inngest";
import { serve } from "inngest/next"
import { sendWeeklyDigestEmailsToAllUsers } from "../../someExistingCode"

const inngest = new Inngest({ name: "My app" });

// Your scheduled function
const weeklyDigest = inngest.createFunction(
  { name: "Send Weekly Digest" },
  { cron: "0 12 * * 1" }, // At 12:00 every Monday
  async () => {
    const results = await sendWeeklyDigestEmailsToAllUsers();
    return {
      message: `Weekly digests sent to ${results.sent} users successfully`,
    }
  }
)

export default serve("My App", [ weeklyDigest ]);

----------------------------------------

TITLE: Initializing Inngest Client with TypeScript Types
DESCRIPTION: Shows how to create a new Inngest client with custom event type definitions for type safety and autocomplete support.

LANGUAGE: typescript
CODE:
import { EventSchemas, Inngest } from "inngest";

type UserSignup = {
  data: {
    email: string;
    name: string;
  };
};
type Events = {
  "user/new.signup": UserSignup;
};

export const inngest = new Inngest({
  id: "my-app",
  schemas: new EventSchemas().fromRecord<Events>(),
});

----------------------------------------

TITLE: Defining an Event-Driven Function in JSON
DESCRIPTION: This JSON snippet demonstrates how to define a function in the Inngest system. It includes triggers, multiple steps with different runtimes, and step dependencies. The function is triggered by a user signup event and performs actions like sending an SMS and adding the user to Intercom.

LANGUAGE: json
CODE:
{
  "name": "A beautiful background function",
  "id": "prompt-deer-ede40d",
  "triggers": [
    {
      "event": "user/signed.up",
      "expression": "user.created_at > '2020-01-01'"
    }
  ],

  "steps": {
    "step-1": {
      "id": "step-1",
      "path": "file://./steps/send-sms-dispatch",
      "name": "Send SMS",
      "runtime": {
        "type": "docker"
      }
    },
    "step-2": {
      "id": "step-2",
      "path": "file://./steps/add-to-intercom",
      "name": "Add user to Intercom",
      "runtime": {
        "type": "lambda"
      },
      "after": [{ "step": "step-1" }]
    }
  }
}

----------------------------------------

TITLE: Implementing Fan-out Functions in Python
DESCRIPTION: This snippet shows how to implement two functions (send_welcome_email and start_stripe_trial) that are triggered by the same 'app/user.signup' event, demonstrating the fan-out pattern in Python using Inngest.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="send-welcome-email",
    trigger=inngest.TriggerEvent(event="app/user.signup"),
)
async def send_welcome_email(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    await step.run("send-email", lambda: send_email(
        email=ctx.event.data["user"]["email"],
        template="welcome"
    ))

@inngest_client.create_function(
    fn_id="start-stripe-trial", 
    trigger=inngest.TriggerEvent(event="app/user.signup"),
)
async def start_stripe_trial(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    customer = await step.run("create-customer", lambda: stripe.Customer.create(
        email=ctx.event.data["user"]["email"]
    ))
    
    await step.run("create-subscription", lambda: stripe.Subscription.create(
        customer=customer.id,
        items=[{"price": "price_1MowQULkdIwHu7ixraBm864M"}],
        trial_period_days=14
    ))

----------------------------------------

TITLE: Incorrect Usage of inngest.send()
DESCRIPTION: Example showing incorrect usage of inngest.send() without await.

LANGUAGE: typescript
CODE:
inngest.send({ name: "some.event" });

----------------------------------------

TITLE: Invoking Python Function from TypeScript
DESCRIPTION: Shows how to invoke the Python sum function from a TypeScript implementation using step.invoke(). Demonstrates cross-language function calling with automatic retry handling.

LANGUAGE: typescript
CODE:
export const hello = inngestClient.createFunction(
  { id: "hello" },
  { event: "node-app/hello" },
  async ({ event, step }) => {
    const values = [1, 2, 3];

    const totalResult = await step.invoke("get-total", {
      function: referenceFunction({
        appId: "python-app", functionId: "total"
      }),
      data: { values },
    });

    return `The Python app says the sum of ${values.join(
      " + "
    )} is ${totalResult}`;
  }
);

----------------------------------------

TITLE: Triggering Inngest Function from Express.js Route
DESCRIPTION: Creates a GET route that sends an event to trigger the Inngest function.

LANGUAGE: typescript
CODE:
import express from "express";
import { serve } from "inngest/express";
import { inngest, functions } from "./src/inngest"

app.use(express.json());
app.use("/api/inngest", serve({ client: inngest, functions }));

// Create a new route
app.get("/api/hello", async function (req, res, next) {
  await inngest.send({
    name: "test/hello.world",
    data: {
      email: "testUser@example.com",
    },
  }).catch(err => next(err));
  res.json({ message: 'Event sent!' });
});

app.listen(3000, () => {
  console.log('Server running on http://localhost:3000');
});

----------------------------------------

TITLE: Triggering Inngest Function from Next.js API (App Router)
DESCRIPTION: Code to create an API route that sends an event to trigger an Inngest function in Next.js App Router.

LANGUAGE: typescript
CODE:
import { NextResponse } from "next/server";
import { inngest } from "../../../inngest/client"; // Import our client

// Opt out of caching; every request should send a new event
export const dynamic = "force-dynamic";

// Create a simple async Next.js API route handler
export async function GET() {
  // Send your event payload to Inngest
  await inngest.send({
    name: "test/hello.world",
    data: {
      email: "testUser@example.com",
    },
  });

  return NextResponse.json({ message: "Event sent!" });
}

----------------------------------------

TITLE: Implementing FastAPI App with Inngest Integration for Modal Deployment
DESCRIPTION: Creates a FastAPI application with Inngest integration, including environment variable loading, Inngest client setup, and function definition. This app is designed for deployment on Modal.

LANGUAGE: python
CODE:
import os

from dotenv import load_dotenv
from fastapi import FastAPI
import inngest
import inngest.fast_api
import modal

load_dotenv()

app = modal.App("test-fast-api")

# Load all environment variables that start with "INNGEST_"
env: dict[str, str] = {}
for k, v, in os.environ.items():
    if k.startswith("INNGEST_"):
        env[k] = v

image = (
    modal.Image.debian_slim()
    .pip_install_from_requirements("requirements.txt")
    .env(env)
)

fast_api_app = FastAPI()

# Create an Inngest client
inngest_client = inngest.Inngest(app_id="fast_api_example")

# Create an Inngest function
@inngest_client.create_function(
    fn_id="my-fn",
    trigger=inngest.TriggerEvent(event="my-event"),
)
async def fn(ctx: inngest.Context, step: inngest.Step) -> str:
    print(ctx.event)
    return "done"

# Serve the Inngest endpoint (its path is /api/inngest)
inngest.fast_api.serve(fast_api_app, inngest_client, [fn])

@app.function(image=image)
@modal.asgi_app()
def fastapi_app():
    return fast_api_app

----------------------------------------

TITLE: Handling Step Errors in Python Inngest Functions
DESCRIPTION: Shows how to handle StepError in Python Inngest functions, allowing for error recovery or alternative actions after step failures.

LANGUAGE: python
CODE:
@client.create_function(
    fn_id="import-item-data",
    retries=0,
    trigger=inngest.TriggerEvent(event="store/import.requested"),
)
async def fn_async(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    def foo() -> None:
        raise ValueError("foo")

    try:
        step.run("foo", foo)
    except inngest.StepError:
        raise MyError("I am new")

----------------------------------------

TITLE: Implementing Sync Accounts Function with Inngest in JavaScript
DESCRIPTION: Shows the structure of a sync function for accounts, including error handling, data processing, and interaction with destinations.

LANGUAGE: jsx
CODE:
const table = 'Accounts';

const syncAccounts = inngest.createFunction(
  {
    ...
  },
  async ({ event, step, utils }) => { // Utils comes from middleware
    const { destinationId, accounts } = event.data;
    const destination = await utils.fetchDestination(
	  { id: 'fetch-destination' }, 
	  destinationId
	);
		
	const { records, destinationError } = await utils.loadRecords(
	  { id: 'load-account-records' }, {
	    table,
	    destinationId,
	    destination
		}
	);
	
	if { destinationError } {
	  return { hasError: true }
	}
	
	const currentAccounts = records.map(record => record.properties.id);
	const newAccounts = accounts.filter(account => !currentAccounts.includes(account.id));
	const updatedAccounts = accounts.filter(account => currentAccounts.includes(account.id));

	const createResults = await step.run(
	  { id: 'sync-new-accounts-to-destination' }, 
	  async () => {
	    ...
	  }
	);
		
	const updateResults = await step.run(
	  { id: 'sync-updated-accounts-to-destination' },
	  async () => {
	    ...
	  }
	);
		
	await utils.logResultsToDB({ id: 'log-results-to-db' }, { createResults, updateResults });
		
	return { hasError: false }
  }
)

----------------------------------------

TITLE: Implementing Video Processing with Durable Execution in TypeScript
DESCRIPTION: This code snippet demonstrates how to implement a video processing workflow using durable execution in TypeScript. It handles concurrency, prioritization, and multi-step processing without explicitly managing queues or state.

LANGUAGE: typescript
CODE:
export const processVideo = inngest.createFunction(
  {
    name: "Process video upload", id: "process-video",
    concurrency: {
      limit: 1,
      key: `event.data.userId`, // You can use any piece of data from the event payload
    },
    priority: {
      run: "event.data.billingPlan != 'free' ? 120 : 0",
    },

  },
  { event: "video.uploaded" },
  async ({ event, step }) => {
    const transcript = await step.run('transcribe-video', async () => {
      return deepgram.transcribe(event.data.videoUrl);
    });
    const summary = await step.run('summarize-transcript', async () => {
      return llm.createCompletion({
        model: "gpt-3.5-turbo",
        prompt: createSummaryPrompt(transcript),
      });
    });
    await step.run('write-to-db', async () => {
      await db.videoSummaries.upsert({
        videoId: event.data.videoId,
        transcript,
        summary,
      });
    });
  }
)

----------------------------------------

TITLE: Implementing Subscription Wait Logic in JavaScript
DESCRIPTION: Demonstrates how to implement a wait condition for subscription creation events with specific plan matching criteria using Inngest's waitForEvent functionality.

LANGUAGE: javascript
CODE:
const subscription = await step.waitForEvent("wait-for-subscription", {
  event: "app/subscription.created",
  timeout: "30d",
  if: "event.data.userId == async.data.userId && async.data.billing_plan == 'pro'",
});

----------------------------------------

TITLE: Transforming Stripe Webhook for Signature Verification
DESCRIPTION: This snippet shows how to modify the transform function for Stripe webhooks to include the raw request body and signature, which can be used for verifying the webhook's authenticity.

LANGUAGE: javascript
CODE:
function transform(evt, headers, queryParams, raw) {
  return {
    name: `stripe/${evt.type}`,
    data: {
      raw,
      sig: headers["Stripe-Signature"],
    }
  };
};

----------------------------------------

TITLE: Handling Stream Termination in Inngest Function
DESCRIPTION: This snippet demonstrates how to handle stream termination by publishing a specific message from an Inngest function. It shows the server-side implementation of sending a 'Search complete' message to signal the end of the stream.

LANGUAGE: ts
CODE:
import { inngest } from "../client";


export const simpleSearchAgent = inngest.createFunction(
  {
    id: "simple-search-agent-workflow",
  },
  {
    event: "app/simple-search-agent.run",
  },
  async ({ step, event, publish }) => {
    const { uuid } = event.data;

    // ...

    await publish({
      channel: `simple-search.${uuid}`,
      topic: "updates",
      data: "Search complete",
    });

    return {
      response,
    };
  }
);

----------------------------------------

TITLE: Installing Inngest Python SDK via pip
DESCRIPTION: Command to install the Inngest Python SDK using pip package manager

LANGUAGE: shell
CODE:
pip install inngest

----------------------------------------

TITLE: Implementing Event-Driven Functions with Inngest in TypeScript
DESCRIPTION: This snippet demonstrates how to create and use Inngest functions for handling events in a TypeScript application. It shows the creation of two functions triggered by a 'thread/message.sent' event, and how to send this event from an API endpoint.

LANGUAGE: typescript
CODE:
const createSummary = inngest.createFunction(
  { id: "create-conversation-summary", concurrency: { limit: 10 } },
  { event: "thread/message.sent" }
  async (event) => {
    // business logic to create a summary via LLM
  }
);
const createSummary = inngest.createFunction(
  { id: "send-notifications" },
  { event: "thread/message.sent" }
  async (event) => {
    // business logic to send email notifications to users
  }
);
// In your API endpoint
async function POST(req) {
  const message = await db.messages.create(req.body);

  // ⬇️ This event triggers both functions to run, each with their own queue:
  await inngest.send({ name: "thread/message.sent", data: message });

  return Response.json({ success: true }, { status: 200 });
}

----------------------------------------

TITLE: Implementing Payment Handling with Durable Execution in TypeScript
DESCRIPTION: This code snippet showcases a more complex workflow for handling payments using durable execution in TypeScript. It demonstrates features like sleep until a specific date, automatic retries, and seamless multi-step processing.

LANGUAGE: typescript
CODE:
export const handlePayments = inngest.createFunction(
  {
    name: "Handle payments", id: "handle-payments"
  },
  { event: "api/invoice.created" },
  async ({ event, step }) => {
    // Wait until the next billing date
    await step.sleepUntil("wait-for-billing-date", event.data.invoiceDate);

    // Steps automatically retry on error, and only run
    // once on success - automatically, with no work.
    const charge = await step.run("charge", async () => {
      return await stripe.charges.create({
        amount: event.data.amount,
      });
    });

    await step.run("update-db", async () => {
      return await db.payments.upsert(charge);
    });

    await step.run("send-receipt", async () => {
      return await resend.emails.send({
        to: event.user.email,
        subject: "Your receipt for Inngest",
      });
    });
  }
);

----------------------------------------

TITLE: Exporting Resend Case Study Metadata in JavaScript
DESCRIPTION: This code snippet exports various metadata properties for the Resend case study, including title, company information, quote, and image paths. It sets up the necessary information for displaying the case study on a website or in marketing materials.

LANGUAGE: javascript
CODE:
export const title = 'Scaling a fast growing developer email platform with serverless workflows'
export const companyName = 'Resend'
export const logo = '/assets/customers/resend.svg'
export const quote = {
  text: `The DX and visibility with Inngest is really incredible. We are able to develop functions locally easier and faster that with our previous queue. Also, Inngest's tools give us the visibility to debug issues much quicker than before.`,
  attribution: {
    name: 'Bu Kinoshita',
    title: 'Co-founder',
  },
  avatar: '/assets/customers/resend-bu-kinoshita.jpg',
}
export const companyURL = 'https://resend.com'
export const companyDescription = 'The modern email sending platform'
export const ogImage = '/assets/customers/case-study/og-image-resend.png'

----------------------------------------

TITLE: Invoking Inngest Functions Within the Same App
DESCRIPTION: This example demonstrates how to create two Inngest functions and invoke one from the other using the 'invoke_by_id' method within the same application.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="fn-1",
    trigger=inngest.TriggerEvent(event="app/fn-1"),
)
async def fn_1(
    ctx: inngest.Context,
    step: inngest.Step,
) -> str:
    return "Hello!"

@inngest_client.create_function(
    fn_id="fn-2",
    trigger=inngest.TriggerEvent(event="app/fn-2"),
)
async def fn_2(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    output = step.invoke_by_id(
        "invoke",
        function_id="fn-1",
    )

    # Prints "Hello!"
    print(output)

----------------------------------------

TITLE: Inngest Dev Server Output
DESCRIPTION: Example output when starting the Inngest Dev Server.

LANGUAGE: bash
CODE:
$ npx inngest-cli@latest dev

12:33PM INF executor > service starting
12:33PM INF runner > starting event stream backend=redis
12:33PM INF executor > subscribing to function queue
12:33PM INF runner > service starting
12:33PM INF runner > subscribing to events topic=events
12:33PM INF no shard finder;  skipping shard claiming
12:33PM INF devserver > service starting
12:33PM INF devserver > autodiscovering locally hosted SDKs
12:33PM INF api > starting server addr=0.0.0.0:8288


        Inngest dev server online at 0.0.0.0:8288, visible at the following URLs:

         - http://127.0.0.1:8288 (http://localhost:8288)

        Scanning for available serve handlers.
        To disable scanning run `inngest dev` with flags: --no-discovery -u <your-serve-url>

----------------------------------------

TITLE: Basic Step Implementation in Python
DESCRIPTION: Demonstrates how to create and use steps in Python using the Inngest SDK with async/await patterns.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="import-product-images",
    event="shop/product.imported"
)
async def import_product_images(ctx: inngest.Context, step: inngest.Step):
    uploaded_image_urls = await step.run(
        "copy-images-to-s3",
        lambda: copy_all_images_to_s3(ctx.event.data["image_urls"])
    )

----------------------------------------

TITLE: Implementing Cart Abandonment Reminder with Inngest in TypeScript
DESCRIPTION: A TypeScript implementation using Inngest to handle cart abandonment scenarios. The function waits for 24 hours after a product is added to cart and sends a reminder email if no purchase is made. Includes automatic cancellation of previous instances when new products are added to the same cart.

LANGUAGE: typescript
CODE:
import { inngest } from "./client";

/*
This is the data received whenever the `cart/product.added` event is received:

type CartProductAdded = {
  name: "cart/product.added"
  data: {
    cart_id: string;
    product_id: string;
    product_name: string;
  };
  user: {
    email: string;
  };
};
*/

export default inngest.createFunction(
  {
    id: "product-added-to-cart",
    // Automatically cancel this instance of the function whenever a user adds another
    // product to their cart.  Another instance of this function will run and schedule
    // another wait from 24 hours after the new product was added to their cart.
    cancelOn: {
      event: "cart/product.added",
      timeout: "24h",
      match: "data.cart_id",
    },
  },
  { event: "cart/product.added" },
  ({ event, step }) => {
    // This function runs as soon as a product is added to the cart.
    // We immediately pause and wait up to 24 hours for the `cart/purchased`
    // event from the same cart_id.
    const purchased = await step.waitForEvent("wait-for-purchase", {
      event: "cart/purchased",
      timeout: "24h",
      match: "data.cart_id", // The "data.cart_id" field in both events must match.
    });

    // waitForEvent will return the `cart/purchased` event immediately when the
    // matching event is received, or after the timeout with `null` if the event
    // was not received (ie. the user didn't purchase).
    if (purchased !== null) {
      // The user has purchased their products;  we can end.
      return;
    }

    await step.run("send-reminder", () => {
      sendCartReminderEmail({
        email: event.user.email,
        cart: event.data.cart_id,
      });
    });

    // Idea: We could also wait another 6 days to send a 1 week cart reminder
  }
);

----------------------------------------

TITLE: Publishing Messages to PartyKit Server
DESCRIPTION: This function publishes messages to the PartyKit server, which then broadcasts them to all connected clients. It's used to stream responses back to the user interface.

LANGUAGE: typescript
CODE:
export const publish = async (body: string, requestId: string) => {
  const partyUrl = `${process.env.NEXT_PUBLIC_PARTY_KIT_URL!}/party/${process.env.NEXT_PUBLIC_PARTYKIT_ROOM_NAME}`
  await fetch(partyUrl, {
    method: "POST",
    body: JSON.stringify({
        requestId,
        body,
    }),
  }).catch((e) => {
    console.error(e);
  })
};

----------------------------------------

TITLE: Importing Guide Components - JavaScript/React
DESCRIPTION: Imports custom Guide and GuideGrid components from shared documentation utilities.

LANGUAGE: JavaScript
CODE:
import { GuideGrid, Guide } from 'src/shared/Docs/Guides'

----------------------------------------

TITLE: Manual ESLint Rule Configuration
DESCRIPTION: Example of manually configuring individual Inngest ESLint rules.

LANGUAGE: json
CODE:
{
  "plugins": ["@inngest"],
  "rules": {
    "@inngest/await-inngest-send": "warn"
  }
}

----------------------------------------

TITLE: Sending User Signup Event in Python
DESCRIPTION: This code snippet demonstrates how to send a user signup event to Inngest using Python. It provides examples for both Flask and FastAPI frameworks, handling a POST request to the /signup route and sending an event to Inngest with user data.

LANGUAGE: python
CODE:
from flask import Flask, request, redirect
from src.inngest.client import inngest_client

app = Flask(__name__)

@app.route('/signup', methods=['POST'])
async def signup():
    // NOTE - this code is simplified for the example:
    data = await request.get_json()
    email = data['email']
    password = data['password']
    
    user = await create_user(email=email, password=password)
    await create_session(user.id)

    // Send an event to Inngest
    await inngest_client.send(
        name="app/user.signup",
        data={
            "user": {
                "id": user.id,
                "email": user.email
            }
        }
    )

    return redirect('https://myapp.com/dashboard')

LANGUAGE: python
CODE:
from fastapi import FastAPI, Request, Response
from fastapi.responses import RedirectResponse
from src.inngest.client import inngest_client

app = FastAPI()

@app.post("/signup")
async def signup(request: Request):
    # NOTE - this code is simplified for the example:
    data = await request.json()
    email = data['email']
    password = data['password']
    
    user = await create_user(email=email, password=password)
    await create_session(user.id)

    # Send an event to Inngest
    await inngest_client.send(
        name="app/user.signup",
        data={
            "user": {
                "id": user.id,
                "email": user.email
            }
        }
    )

    return RedirectResponse(url="https://myapp.com/dashboard")

----------------------------------------

TITLE: Invoking Functions in Go with Inngest
DESCRIPTION: Demonstrates how to create and invoke functions using Inngest in Go. It shows the creation of a ComputeSquare function and its invocation from a MainFunction.

LANGUAGE: go
CODE:
import (
  "github.com/inngest/inngestgo"
  "github.com/inngest/inngestgo/step"
)

// Some function we'll call
inngest.CreateFunction(
	inngest.FunctionOpts{ID: "compute-square"},
	inngest.EventTrigger("calculate/square"),
	ComputeSquare,
)
func ComputeSquare(ctx *inngest.Context) error {
	data := struct {
		Number int `json:"number"`
	}{}
	if err := ctx.Event.Data.Decode(&data); err != nil {
		return err
	}

	return ctx.Return(map[string]int{
		"result": data.Number * data.Number,
	})
}


// In this function, we'll call ComputeSquare
inngest.CreateFunction(
	inngest.FunctionOpts{ID: "main-function"},
	inngest.EventTrigger("main/event"),
	MainFunction,
)
func MainFunction(ctx *inngest.Context) error {
	square, err := step.Invoke("compute-square-value", &inngest.InvokeOpts{
		Function: "compute-square",
		Data: map[string]interface{}{
			"number": 4,
		},
	})
	if err != nil {
		return err
	}

	result := square.Data["result"].(int)
	return ctx.Return(fmt.Sprintf("Square of 4 is %d.", result))
}

----------------------------------------

TITLE: Initializing Workflow Editor Component with Workflow Kit in React
DESCRIPTION: This snippet demonstrates how to create a MyWorkflowEditor component using the Workflow Kit. It imports necessary components, sets up state management for the workflow, and renders the Editor with a Sidebar inside a Provider component.

LANGUAGE: tsx
CODE:
import { useState } from "react";
import { Editor, Provider, Sidebar, type Workflow } from "@inngest/workflow-kit/ui";

// import `PublicEngineAction[]`
import { actionsDefinitions } from "@/inngest/actions-definitions";

// NOTE - Importing CSS from JavaScript requires a bundler plugin like PostCSS or CSS Modules
import "@inngest/workflow-kit/ui/ui.css";
import "@xyflow/react/dist/style.css";

export const MyWorkflowEditor = ({ workflow }: { workflow: Workflow }) => {
  const [workflowDraft, updateWorkflowDraft] =
    useState<typeof workflow>(workflow);

  return (
    <Provider
      workflow={workflowDraft}
      trigger={{ event: { name: 'blog-post.updated' } }}
      availableActions={actionsDefinitions}
      onChange={updateWorkflowDraft}
    >
      <Editor>
        <Sidebar position="right"></Sidebar>
      </Editor>
    </Provider>
  );
};

----------------------------------------

TITLE: Initializing Campaign Generation Workflow with Inngest
DESCRIPTION: Sets up the main workflow function that handles campaign generation requests, configuring OpenAI client for either DeepSeek or standard OpenAI endpoints.

LANGUAGE: typescript
CODE:
const generateCampaign = inngest.createFunction(\n    { id: "generate-multilingual-campaign" },\n    { event: "marketing/campaign.requested" },\n    async ({ event, step }) => {\n    const { brandInfo, targetLanguages, campaignGoal, model } = event.data;\n\n    const openai = new OpenAI({\n    apiKey: model.includes("deepseek")\n        ? process.env.DEEPSEEK_API_KEY\n        : process.env.OPENAI_API_KEY,\n    ...(model.includes("deepseek")\n        ? { baseURL: process.env.DEEPSEEK_BASE_URL }\n        : {}),\n    });\n    const createCompletion = openai.chat.completions.create.bind(\n    openai.chat.completions\n    );\n\n    // ...\n});

----------------------------------------

TITLE: Creating Inngest Client in TypeScript
DESCRIPTION: Initializes an Inngest client and sets up an array for exporting functions.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";

// Create a client to send and receive events
export const inngest = new Inngest({ id: "my-app" });

// Create an empty array where we'll export future Inngest functions
export const functions = [];

----------------------------------------

TITLE: Implementing Trend Identification Tool for Search Agent in TypeScript
DESCRIPTION: Defines the 'identify-trends' tool for the Search Agent, which uses vector similarity to find and aggregate related Hacker News stories.

LANGUAGE: typescript
CODE:
import {
  createAgent,
  createTool,
} from "@inngest/agent-kit";


const searchAgent = createAgent({
  name: "Search Agent",
  // ...
  tools: [
    // ...
    createTool({
      name: "identify-trends",
      description:
        "Identify trends on Hacker News for a given set of interests",
      parameters: z.object({
        query: z.string(),
        startDate: z.string(),
        endDate: z.string(),
      }),
      handler: async (input, { network }) => {
        console.info("[HackerNewsAgent] Identifying trends", input);
        // Generate embedding for the query
        const openai = new OpenAI({
          apiKey: process.env.OPENAI_API_KEY,
        });

        const embedding = await openai.embeddings.create({
          model: "text-embedding-ada-002",
          input: input.query,
        });

        // Find similar stories using vector similarity
        const similarStories = await db.query(
          `WITH similar_stories AS (
                SELECT title, content, date::timestamp as date, comments,
                  (embedding <=> $1::vector) as distance
                FROM stories
                WHERE (embedding <=> $1::vector) < 0.3
                AND interest_id = $2
                AND date >= $3::date
                AND date <= $4::date
                ORDER BY date DESC
              )
              SELECT
                date_trunc('day', date) as story_date,
                COUNT(*) as story_count,
                STRING_AGG(title, ' | ' ORDER BY date DESC) as titles
              FROM similar_stories
              GROUP BY date_trunc('day', date)
              ORDER BY story_date DESC
              LIMIT 10`,
          [
            `[${embedding.data[0].embedding.join(",")}]`,
            interest.id,
            input.startDate,
            input.endDate,
          ]
        );

        // Format results to show trends
        const result = similarStories.rows.map((row) => {
          const date = new Date(row.story_date).toLocaleDateString();
          return `Date: ${date}\nNumber of Related Stories: ${row.story_count}\nTitles: ${row.titles}\n\n`;
        });

        console.info(
          "[HackerNewsAgent] Trends results:",
          input.query,
          result.length
        );

        network?.state.kv.set("trends-result", result);

        return result;
      },
    }),
  ],
});

----------------------------------------

TITLE: Platform-Specific Inngest Configuration in Python
DESCRIPTION: Example of configuring Inngest client for specific platforms in Python, demonstrating environment setup using platform-specific variables.

LANGUAGE: python
CODE:
import inngest

inngest_client = inngest.Inngest(
    app_id="flask_example",
  env=os.getenv("BRANCH"),
)

----------------------------------------

TITLE: Invoking Functions in TypeScript with Inngest
DESCRIPTION: Demonstrates how to create and invoke functions using Inngest in TypeScript. It shows the creation of a computeSquare function and its invocation from a mainFunction.

LANGUAGE: typescript
CODE:
// Some function we'll call
const computeSquare = inngest.createFunction(
  { id: "compute-square" },
  { event: "calculate/square" },
  async ({ event }) => {
    return { result: event.data.number * event.data.number }; // Result typed as { result: number }
  }
);

// In this function, we'll call `computeSquare`
const mainFunction = inngest.createFunction(
  { id: "main-function" },
  { event: "main/event" },
  async ({ step }) => {
    const square = await step.invoke("compute-square-value", {
      function: computeSquare,
      data: { number: 4 }, // input data is typed, requiring input if it's needed
    });

    return `Square of 4 is ${square.result}.`; // square.result is typed as number
  }
);

----------------------------------------

TITLE: Installing and Configuring Sentry Middleware for Inngest in TypeScript
DESCRIPTION: This snippet shows how to install and configure the Sentry middleware for Inngest in TypeScript. It includes importing necessary packages, initializing Sentry, and adding the middleware to the Inngest instance.

LANGUAGE: typescript
CODE:
import * as Sentry from "@sentry/node";
import { Inngest } from "inngest";
import { sentryMiddleware } from "@inngest/middleware-sentry";

// Initialize Sentry as usual wherever is appropriate
Sentry.init(...);

const inngest = new Inngest({
  id: "my-app",
  middleware: [sentryMiddleware()],
});

----------------------------------------

TITLE: Querying Inngest SDK Debug Endpoint
DESCRIPTION: Example of using curl to query the Inngest SDK debug endpoint for diagnostic information about the server configuration.

LANGUAGE: shell
CODE:
$ curl -s http://localhost:3000/api/inngest | jq
{
  "message": "Inngest endpoint configured correctly.",
  "hasEventKey": false,
  "hasSigningKey": false,
  "functionsFound": 1
}

----------------------------------------

TITLE: Using waitUntil with Inngest in Serverless Functions (JavaScript)
DESCRIPTION: This snippet shows how to use waitUntil with Inngest's send function in a serverless environment. It demonstrates sending an event to Inngest's Event API in the background, allowing for faster response times while ensuring the event is sent before the function terminates.

LANGUAGE: javascript
CODE:
import { inngest } from "src/inngest";

async function POST(request) {
  const data = await createPost(request.body)
  waitUntil(inngest.send({ name: "post.created", data: data }))
  return new Response(data)
}

----------------------------------------

TITLE: Sending Email Summary in Inngest Workflow Step with TypeScript
DESCRIPTION: Implements the final step of the Hacker News AI agent workflow, sending an email summary of the results using Resend.

LANGUAGE: typescript
CODE:
if (result.state.kv.has("answers") && !event.data.preview) {
      await step.run("send-email", async () => {
        console.info("[HackerNewsAgent] Preparing to send email");
        const answers = result.state.kv.get("answers");

        if (!event.data.preview) {
          const { data, error } = await resend.emails.send({
            from: "Hacker News Agent <onboarding@resend.dev>",
            to: interest.email,
            subject: `Your Hacker News Agent Update on ${interest.name}`,
            text: `Here are the answers to "${question.question}":\n\n${answers}`,
          });

          // …

----------------------------------------

TITLE: Creating Durable Function with Inngest in TypeScript
DESCRIPTION: This snippet shows how to transform a long-running Vercel Function into a Durable Function using Inngest, enabling asynchronous execution with improved error handling and step management.

LANGUAGE: typescript
CODE:
inngest.createFunction({
    id: "long-running-code",
  },
  // A Function is triggered by events
  { event: "sync/start" },
  async ({ step }) => {
    // step is retried if it throws an error
    const data = await step.run("get-data", async () => {
      return getDataFromExternalSource();
    });

    // Steps can reuse data from previous ones
    await step.run("save-data", async () => {
      return db.syncs.insertMany(data);
    });
  }
);

----------------------------------------

TITLE: Implementing Sleep Function in Inngest (TypeScript v2)
DESCRIPTION: Shows how to use the step.sleep() function in Inngest v2, using string formats and milliseconds.

LANGUAGE: typescript
CODE:
// Sleep for 30 minutes
await step.sleep("30m");
await step.sleep("30 minutes");
await step.sleep(30 * 60 * 1000);

----------------------------------------

TITLE: Configuring Inngest Dev Server with JSON and YAML
DESCRIPTION: Examples of configuring the Inngest dev server using JSON and YAML configuration files, specifying app URLs and options.

LANGUAGE: json
CODE:
{
  "sdk-url": [
    "http://localhost:3000/api/inngest",
    "http://localhost:3030/api/inngest"
  ],
  "no-discovery": true
}

LANGUAGE: yaml
CODE:
sdk-url:
  - "http://localhost:3000/api/inngest"
  - "http://localhost:3030/api/inngest"
no-discovery: true

----------------------------------------

TITLE: Invoking Inngest Functions with Different Approaches in TypeScript
DESCRIPTION: Shows various ways to invoke Inngest functions, including direct calls, using function references, and setting timeouts. It also demonstrates handling multiple invocations in parallel.

LANGUAGE: typescript
CODE:
// Using the "await" keyword
const result = await step.invoke("invoke-function", {
  function: someInngestFn,
  data: { ... },
});

// Using `then` for chaining
step
  .invoke("invoke-function", { function: someInngestFn, data: { ... } })
  .then((result) => {
    // further processing
  });

// Running multiple invocations in parallel
Promise.all([
  step.invoke("invoke-first-function", {
    function: firstFunctionReference,
    data: { ... },
  }),
  step.invoke("invoke-second-function", {
    function: secondFn,
    data: { ... },
  }),
]);

----------------------------------------

TITLE: Managing Environment Variables for Inngest Website
DESCRIPTION: Commands for managing environment variables using Vercel CLI. These include downloading the latest development variables, adding new variables, and removing existing ones.

LANGUAGE: sh
CODE:
# Download the latest development environment variables
$ pnpm env:pull

# Add a new environment variable
$ pnpm env:add

# Remove an environment variable
$ pnpm env:rm

----------------------------------------

TITLE: Creating Summarizer Agent with AgentKit in TypeScript
DESCRIPTION: Defines a Summarizer Agent using Inngest's AgentKit library to summarize search results and trends for Hacker News articles.

LANGUAGE: typescript
CODE:
import {
  createAgent
} from "@inngest/agent-kit";

const summarizerAgent = createAgent({
      name: "Summarizer Agent",
      description: "Summarize the results of the search agent",
      system: ({ network }) => {
        const searchResults = network?.state.kv.get("search-result");
        const trendsResults = network?.state.kv.get("trends-result");
        const prompt = `
        Prepare the answers to the questions based on the results of the search agent.
        If the user is interested in trends, use the trends-result to answer the questions and provide a summary of the trends.
        If the user is not interested in trends, use the search-result to answer the questions.

        The user is interested in ${
          interest.name
        }. They asked the following questions:
        <questions>
        ${question.question}
        </questions>

        The search agent found the following results online:
        <search-results>
        ${(searchResults || []).join(`\n`)}
        </search-results>

        The trends agent found the following trends:
        <trends-results>
        ${(trendsResults || []).join(`\n`)}
        </trends-results>

        Provide you answer wrapped in <answer> tags.
        `;
        return prompt;
      },
      // ...
    });

----------------------------------------

TITLE: Multiple Triggers Configuration in Python
DESCRIPTION: Demonstrates how to configure multiple triggers for a single Inngest function using a list of TriggerEvent objects.

LANGUAGE: python
CODE:
import inngest

@inngest_client.create_function(
    fn_id="import-product-images",
    trigger=[
      inngest.TriggerEvent(event="shop/product.imported"),
      inngest.TriggerEvent(event="shop/product.updated"),
    ],
)
async def fn(ctx: inngest.Context, step: inngest.Step):
    # Your function code

----------------------------------------

TITLE: Using Environment Variables in Inngest Functions
DESCRIPTION: Example of accessing environment variables within an Inngest function handler after middleware implementation.

LANGUAGE: typescript
CODE:
const myFn = inngest.createFunction(
  { id: 'my-fn' },
  { event: 'demo/event.sent' },
  // The "env" argument returned in transformInput is passed through:
  async ({ event, step, env }) => {

    // The env object will be typed as well:
    console.log(env.MY_VAR);
  }
);

----------------------------------------

TITLE: Simple Function Example in TypeScript
DESCRIPTION: Demonstrates a simple Inngest function with multiple steps and explains the execution model. It shows how to properly structure steps to avoid repeated execution of non-deterministic logic.

LANGUAGE: javascript
CODE:
inngest.createFunction(
  { id: "simple-function" },
  { event: "test/simple.function" },
  async ({ step }) => {
    console.log("hello");

    await step.run("a", async () => { console.log("a") });
    await step.run("b", async () => { console.log("b") });
    await step.run("c", async () => { console.log("c") });
  }
);

LANGUAGE: ts
CODE:
inngest.createFunction(
  { id: "simple-function" },
  { event: "test/simple.function" },
  async ({ step }) => {
    await step.run("hello", () => { console.log("hello") });

    await step.run("a", async () => { console.log("a") });
    await step.run("b", async () => { console.log("b") });
    await step.run("c", async () => { console.log("c") });
  }
);

----------------------------------------

TITLE: Creating a CSV Processing Function in Inngest
DESCRIPTION: Defines a basic Inngest function that processes a CSV file and returns the number of items processed and failed.

LANGUAGE: typescript
CODE:
const processCSV = inngest.createFunction(
  { id: "process-csv-upload" },
  { event: "imports/csv.uploaded" },
  async ({ event, step }) => {
    // CSV processing logic omitted for the sake of the example
    return {
      status: "success",
      processedItems: results.length,
      failedItems: failures.length,
    }
  }
);

----------------------------------------

TITLE: Implementing Bubbletea Init Function in Go
DESCRIPTION: Defines the Init function for the Bubbletea model, which is called before the first render. It can be used to perform initial setup or async operations.

LANGUAGE: go
CODE:
func (m model) Init() tea.Cmd {
	return nil
}

----------------------------------------

TITLE: Implementing Page Indexing Workflow with TypeScript
DESCRIPTION: Example of using step.run() to create a durable workflow for indexing web pages with built-in retries and caching. The workflow includes page content retrieval and vector database indexing steps.

LANGUAGE: typescript
CODE:
export const indexPage = client.createFunction(
  { id: "index-page", concurrency: 10 },
  { event: Events.INDEX_PAGE },
  async ({ event, step }) => {
    const { pageUrl } = event.data;

    const page = await step.run("get-page-content", async () => {
      return getPageContent(pageUrl);
    });

    await step.run("index-page", async () => {
      return saveToPinecone({ page });
    });
  }
);

export const indexSite = client.createFunction(
  { id: "index-site" },
  { event: Events.INDEX_SITE },
  async ({ event, step }) => {
    const { url } = event.data;

    const pages = await step.run("find-pages", async () => {
      return findPagesToIndex(url);
    });

    await Promise.all(
      pages.map(async (page) => {
        return step.invoke(`index-page-${page.url}`, {
          function: indexPage,
          data: { pageUrl: page.url },
        });
      })
    );
  }
);

----------------------------------------

TITLE: Configuring Start and Finish Timeouts for Inngest Function in Go
DESCRIPTION: This snippet shows how to set both 'Start' and 'Finish' timeout properties in Go. It cancels the function if it takes longer than 10 seconds to start or 30 seconds to finish after starting.

LANGUAGE: go
CODE:
return inngestgo.CreateFunction(
	inngestgo.FunctionOpts{
		Name: "A function",
		Timeouts: &inngestgo.Timeouts{
			// If the run takes longer than 10s to start, cancel the run.
			Start: inngestgo.Ptr(10*time.Second),
			// And if the run takes longer than 30s to finish after starting, cancel the run.
			Finish: inngestgo.Ptr(30*time.Second),
		},
	},
	inngestgo.EventTrigger("tasks/reminder.createad", nil),
	func(ctx context.Context, input inngestgo.Input[ReminderEvent]) (any, error) {
		return step.Run(ctx, "send-reminder", func (ctx context.Context) (bool, error) {
			// ...
			return false, nil
		})
	},
)

----------------------------------------

TITLE: Waiting for Events in Python with Inngest
DESCRIPTION: Shows how to use step.wait_for_event() in Python to pause function execution until a specific event is received, with timeout options.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="my_function",
    trigger=inngest.TriggerEvent(event="app/my_function"),
)
async def fn(
    ctx: inngest.Context,
    step: inngest.Step,
) -> None:
    res = await step.wait_for_event(
        "wait",
        event="app/wait_for_event.fulfill",
        timeout=datetime.timedelta(seconds=2),
    )

----------------------------------------

TITLE: Installing Inngest SDK with Go
DESCRIPTION: Installation command for the Inngest SDK using Go's package manager.

LANGUAGE: shell
CODE:
go get github.com/inngest/inngestgo

----------------------------------------

TITLE: Welcome Email Function in TypeScript
DESCRIPTION: Inngest function that sends a welcome email when a user signs up.

LANGUAGE: tsx
CODE:
import { sendEmail } from "./resend";

const sendWelcomeEmail = inngest.createFunction(
  { id: 'send-welcome-email' },
  { event: 'app/signup.completed' },
  async ({ event }) => {
	  const { user } = event.data;
    await sendEmail(user.email, "Welcome to Acme", (
      <div>
        <h1>Welcome to ACME, {user.firstName}</h1>
      </div>
    ));
  }
)

----------------------------------------

TITLE: Inngest Bulk Cancellation API Response Format
DESCRIPTION: Example response from the bulk cancellation API showing the returned cancellation ID and job details including environment ID, function ID, and time range parameters.

LANGUAGE: json
CODE:
{
  "id": "01HMRMPE5ZQ4AMNJ3S2N79QGRZ",
  "environment_id": "e03843e1-d2df-419e-9b7b-678b03f7398f",
  "function_id": "schedule-reminder",
  "started_after": "2024-01-21T18:23:12.000Z",
  "started_before": "2024-01-22T14:22:42.130Z",
  "if": "event.data.userId == 'user_o9235hf84hf'"
}

----------------------------------------

TITLE: Serving Inngest Functions in Next.js API Route
DESCRIPTION: This code snippet shows how to set up an API route in Next.js to serve Inngest functions. It uses the 'serve' function from Inngest to handle function calls.

LANGUAGE: javascript
CODE:
import { serve } from "inngest/next"
// Arguments:
// - The name of your app
// - Functions - An array of all of your Inngest functions
export default serve("My App", [
  weeklyDigest,
  runDailyReport,
]);

----------------------------------------

TITLE: Configuring Case Study Metadata in JavaScript
DESCRIPTION: JavaScript module exports defining metadata for the Otto case study including company information, quotes, and media assets.

LANGUAGE: javascript
CODE:
export const title = 'Leveraging multi-tenant concurrency to scale AI workflows'
export const companyName = 'Otto'
export const logo = '/assets/customers/otto-logo.svg'
export const logoScale = 1;
export const quote = {
  text: `Inngest completely transformed how we handle AI orchestration at Otto. Its intuitive developer experience, built-in multi-tenant concurrency, and flow control allowed us to scale without the complexity of other tools or the need to build custom solutions. What would have taken us a month.`,
  attribution: {
    name: 'Sully Omar',
    title: 'Co-founder, CEO',
  },
  avatar: '/assets/customers/otto-sully.jpg',
}
export const companyURL = 'https://ottogrid.ai'
export const companyDescription = `AI-powered spreadsheets that handle the work, from start to finish.`
export const ogImage = '/assets/customers/case-study/og-image-otto.png'

----------------------------------------

TITLE: Using step.ai.wrap() with Anthropic SDK in Inngest Function
DESCRIPTION: Demonstrates how to use step.ai.wrap() to integrate the Anthropic SDK into an Inngest function. This method adds AI observability to existing Anthropic API calls.

LANGUAGE: typescript
CODE:
import Anthropic from '@anthropic-ai/sdk';
const anthropic = new Anthropic();

export default inngest.createFunction(
  { id: "summarize-contents" },
  { event: "app/ticket.created" },
  async ({ event, step }) => {

    // This calls `generateText` with the given arguments, adding AI observability,
    // metrics, datasets, and monitoring to your calls.
    const result = await step.ai.wrap("using-anthropic", anthropic.messages.create, {
      model: "claude-3-5-sonnet-20241022",
      max_tokens: 1024,
      messages: [{ role: "user", content: "Hello, Claude" }],
    });

  }
);

----------------------------------------

TITLE: Implementing Hooks in Python Middleware
DESCRIPTION: Demonstrates how to implement hooks in Python middleware, including before_send_events and after_send_events methods.

LANGUAGE: python
CODE:
import inngest

class MyMiddleware(inngest.Middleware):
    def __init__(
        self,
        client: inngest.Inngest,
        raw_request: object,
    ) -> None:
        #  ...

    async def before_send_events( self, events: list[inngest.Event]) -> None:
        # called before an event is sent from within a Function or Step
        print(f"Sending {len(events)} events")

    async def after_send_events(self, result: inngest.SendEventsResult) -> None:
        # called after an event is sent from within a Function or Step
        print("Done sending events")

----------------------------------------

TITLE: Implementing Backend Workflow Actions in TypeScript
DESCRIPTION: Shows how to implement the backend handler logic for workflow actions using the EngineAction type. Extends the public action definition with a handler function that processes the workflow step.

LANGUAGE: typescript
CODE:
import { type EngineAction } from "@inngest/workflow-kit";

import { actionsDefinition } from "./actions-definition";

export const actions: EngineAction[] = [
  {
    ...actionsDefinition[0],
    handler: async ({ event, step, workflow, workflowAction, state }) => {
        // ...
    }
  },
];

----------------------------------------

TITLE: Implementing Function Cancellation in TypeScript with Inngest
DESCRIPTION: Demonstrates how to set up automatic function cancellation based on specific events. The example shows a trial management function that cancels when a user upgrades their account.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  {
    name: "Trial management",
    cancelOn: [
      // Automatically cancel this function if the account upgrades.
      {
        event: "billing/user.upgraded",
        if: "async.data.account_id == event.data.acocunt_id",
      },
    ],
  },
  { event: "auth/user.created" }, // The event that causes this function to run
  async ({ event, step }) => {
    await step.sleep("7d"); // Sleep for 7 days
    // If the user upgrades, this function is cancelled and the next step
    // will never run.
    await step.run("Process trial cancellation", () => 
      // ...
    });
  }
);

----------------------------------------

TITLE: Creating and Running AI Agent Network with Inngest in TypeScript
DESCRIPTION: Sets up a network of AI agents using Inngest's AgentKit, combining Search and Summarizer agents with custom routing logic.

LANGUAGE: typescript
CODE:
import { openai } from "inngest";
import {
  createNetwork,
  getDefaultRoutingAgent,
} from "@inngest/agent-kit";


const model = openai({ model: "gpt-4" });
const network = createNetwork({
  agents: [searchAgent.withModel(model), summarizerAgent.withModel(model)],
  defaultModel: model,
  maxIter: 4,
  defaultRouter: ({ network }) => {
    if (network?.state.kv.has("answers")) {
      return;
    } else if (
      network?.state.kv.has("search-result") ||
      network?.state.kv.has("trends-result")
    ) {
      return summarizerAgent;
    }
    return getDefaultRoutingAgent();
  },
});

const result = await network.run(
  `I am passionate about ${interest.name}. Answer the following questions: ${question.question}`
);

----------------------------------------

TITLE: Creating Card-based Layout for Flow Control Methods in React JSX
DESCRIPTION: This JSX snippet creates a card-based layout to display different flow control methods in Inngest. Each card represents a method with an icon, title, and brief description, linking to detailed documentation.

LANGUAGE: JSX
CODE:
<CardGroup cols={1}>
  <Card title="Concurrency" icon={<IconConcurrency className="text-basis h-4 w-4" />} href={'/docs/guides/concurrency'}>
    Limit the number of executing steps across your function runs. Ideal for limiting concurrent workloads by user, resource, or in general.
  </Card>
  <Card title="Throttling" icon={<RiSlowDownFill className="text-basis h-4 w-4" />} href={'/docs/guides/throttling'}>
    Limit the throughput of function execution over a period of time. Ideal for working around third-party API rate limits.
  </Card>
  <Card title="Rate Limiting" icon={<RiSkipRightFill className="text-basis h-4 w-4" />} href={'/docs/guides/rate-limiting'}>
    Prevent excessive function runs over a given time period by _skipping_ events beyond a specific limit. Ideal for protecting against abuse.
  </Card>
  <Card title="Debounce" icon={<IconDebounce className="text-basis h-4 w-4" />} href={'/docs/guides/debounce'}>
    Avoid unnecessary function invocations by de-duplicating events over a sliding time window. Ideal for preventing wasted work when a function might be triggered in quick succession.
  </Card>
  <Card title="Priority" icon={<RiGitPullRequestFill className="rotate-90 text-basis h-4 w-4" />} href={'/docs/guides/priority'}>
    Dynamically adjust the execution order of functions based on any data. Ideal for pushing critical work to the front of the queue.
  </Card>
</CardGroup>

----------------------------------------

TITLE: Function Handler Definition in Python
DESCRIPTION: Shows the basic structure of an Inngest function handler with context and step parameters.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    # Function options
)
async def fn(ctx: inngest.Context, step: inngest.Step):
    # Function code

----------------------------------------

TITLE: Configuring Default Retries in Inngest Functions
DESCRIPTION: This snippet demonstrates the default retry behavior in Inngest functions, where a function or step is retried up to 4 times in addition to the initial attempt.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "click-recorder" },
  { event: "app/button.clicked" },
  async ({ event, attempt }) => {
    await db.clicks.insertOne(event.data); // this code now retries!
  },
);

LANGUAGE: go
CODE:
inngestgo.CreateFunction(
	inngestgo.FunctionOpts{ID: "click-recorder"},
	inngestgo.EventTrigger("app/button.clicked", nil),
	func(ctx context.Context, input inngestgo.Input[ButtonClickedEvent]) (any, error) {
		result, err := db.Clicks.InsertOne(input.Event["data"])
	},
)

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="click-recorder",
    trigger=inngest.TriggerEvent(event="app/button.clicked"),
)
def record_click(ctx: inngest.Context) -> None:
    db.clicks.insert_one(ctx.event.data)

----------------------------------------

TITLE: Example Payload for inngest/function.failed Event in JSON
DESCRIPTION: This snippet demonstrates the structure of the payload for the inngest/function.failed event. It includes details about the error, the original event that triggered the failed function, function ID, and run ID.

LANGUAGE: json
CODE:
{
    "name": "inngest/function.failed",
    "data": {
      "error": {
        "__serialized": true,
        "error": "invalid status code: 500",
        "message": "taylor@ok.com is already a list member. Use PUT to insert or update list members.",
        "name": "Error",
        "stack": "Error: taylor@ok.com is already a list member. Use PUT to insert or update list members.\n    at /var/task/.next/server/pages/api/inngest.js:2430:23\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async InngestFunction.runFn (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/components/InngestFunction.js:378:32)\n    at async InngestCommHandler.runStep (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/components/InngestCommHandler.js:459:25)\n    at async InngestCommHandler.handleAction (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/components/InngestCommHandler.js:359:33)\n    at async ServerTiming.wrap (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/helpers/ServerTiming.js:69:21)\n    at async ServerTiming.wrap (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/helpers/ServerTiming.js:69:21)"
      },
      "event": {
        "data": { "billingPlan": "pro" },
        "id": "01H0TPSHZTVFF6SFVTR6E25MTC",
        "name": "user.signup",
        "ts": 1684523501562,
        "user": { "external_id": "6463da8211cdbbcb191dd7da" }
      },
      "function_id": "my-gcp-cloud-functions-app-hello-inngest",
      "run_id": "01H0TPSJ576QY54R6JJ8MEX6JH"
    },
    "id": "01H0TPW7KB4KCR739TG2J3FTHT",
    "ts": 1684523589227
  }

----------------------------------------

TITLE: Configuring Celery for Task Routing and Prioritization in Python
DESCRIPTION: This code snippet shows how to configure Celery in Python to handle task routing and prioritization. It demonstrates the complexity of setting up a message queue system with partial abstractions.

LANGUAGE: python
CODE:
# celery_app.py
def user_task_router(name, args, kwargs, options, task=None, **kw):
    user_id = kwargs.get('user_id')
    if user_id:
        return {
            'queue': f'user_{user_id}',
            'priority': kwargs.get('priority', 10),  # Get the priority from kwargs, default to 10
        }
    return None

app = Celery('tasks', broker='amqp://guest:guest@localhost:5672//')
app.conf.update(
    worker_concurrency=4,
    worker_prefetch_multiplier=1,
    task_routes = (user_task_router,),
    task_default_queue = 'default',
    task_default_priority = 0,
    task_queue_max_priority = 10,
    task_queues = [Queue('default', routing_key='default')],
)

----------------------------------------

TITLE: Implementing Search Agent with Tools using AgentKit in TypeScript
DESCRIPTION: Creates a Search Agent with 'search' and 'identify-trends' tools using Inngest's AgentKit library for searching and analyzing Hacker News articles.

LANGUAGE: typescript
CODE:
import {
  createAgent,
  createTool,
} from "@inngest/agent-kit";


const searchAgent = createAgent({
  name: "Search Agent",
  description: "Search Hacker News for a given set of interests",
  system: `You are a search agent that searches Hacker News for posts that are relevant to a given set of interests. Today is ${
    new Date().toISOString().split("T")[0]
  }. Search for posts from the last ${frequencyToRelativeHuman(
    question.frequency
  )} period.`,
  tools: [
    createTool({
      name: "search",
      description: "Search Hacker News for a given set of interests",
      parameters: z.object({
        query: z.string(),
        startDate: z.string(),
        endDate: z.string(),
      }),
      handler: async (input, { network }) => {
        // ...
      },
    }),
    createTool({
      name: "identify-trends",
      description:
        "Identify trends on Hacker News for a given set of interests",
      parameters: z.object({
        query: z.string(),
        startDate: z.string(),
        endDate: z.string(),
      }),
      handler: async (input, { network }) => {
        // ...
      },
    }),
  ],
});

----------------------------------------

TITLE: Basic OpenAI Chat Completion Implementation in TypeScript
DESCRIPTION: Example of a basic OpenAI chat completion API call implementation showing the initial setup that needs to be enhanced for production use.

LANGUAGE: typescript
CODE:
import OpenAI from "openai";

const openai = new OpenAI();

async function main() {
  const completion = await openai.chat.completions.create({
    messages: [{"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": "Who won the world series in 2020?"},
        {"role": "assistant", "content": "The Los Angeles Dodgers won the World Series in 2020."},
        {"role": "user", "content": "Where was it played?"}],
    model: "gpt-3.5-turbo",
  });

  console.log(completion.choices[0]);
}
main();

----------------------------------------

TITLE: Subscribing to a Channel (Basic)
DESCRIPTION: Basic example of subscribing to a channel using the subscribe function.

LANGUAGE: typescript
CODE:
"use server";

import { subscribe } from "@inngest/realtime";
import { inngest } from "src/inngest";

const stream = await subscribe(inngest, token)

for await (const message of stream) {
  console.log(message)
}

----------------------------------------

TITLE: Creating Scheduled Functions with Timezone Support in Python
DESCRIPTION: This snippet illustrates how to create a scheduled function using Inngest in Python. It sets up a weekly digest function that runs at a specific time in the Paris timezone, loads users from a database, and implements a fan-out pattern for processing.

LANGUAGE: python
CODE:
from inngest import Inngest

inngest_client = Inngest(id="signup-flow")

# This weekly digest function will run at 12:00pm on Friday in the Paris timezone
@inngest_client.create_function(
    fn_id="prepare-weekly-digest",
    trigger=inngest.TriggerCron(cron="TZ=Europe/Paris 0 12 * * 5")
)
async def prepare_weekly_digest(ctx: inngest.Context) -> None:
    # Load all the users from your database:
    users = await ctx.step.run(
        "load-users",
        lambda: db.load("SELECT * FROM users")
    )

    # 💡 Since we want to send a weekly digest to each one of these users
    # it may take a long time to iterate through each user and send an email.

    # Instead, we'll use this scheduled function to send an event to Inngest
    # for each user then handle the actual sending of the email in a separate
    # function triggered by that event.

    # ✨ This is known as a "fan-out" pattern ✨

    # 1️⃣ First, we'll create an event object for every user return in the query:
    events = [
        {
            "name": "app/send.weekly.digest",
            "data": {
                "user_id": user.id,
                "email": user.email,
            }
        }
        for user in users
    ]

    # 2️⃣ Now, we'll send all events in a single batch:
    await ctx.step.send_event("send-digest-events", events)

    # This function can now quickly finish and the rest of the logic will
    # be handled in the function below ⬇️


# This is a regular Inngest function that will send the actual email for
# every event that is received (see the above function's inngest.send())

# Since we are "fanning out" with events, these functions can all run in parallel
@inngest_client.create_function(
    fn_id="send-weekly-digest-email",
    trigger=inngest.TriggerEvent(event="app/send.weekly.digest")
)
async def send_weekly_digest(ctx: inngest.Context) -> None:
    # 3️⃣ We can now grab the email and user id from the event payload
    email = ctx.event.data["email"]
    user_id = ctx.event.data["user_id"]

    # 4️⃣ Finally, we send the email itself:
    await email.send("weekly_digest", email, user_id)

    # 🎇 That's it! - We've used two functions to reliably perform a scheduled
    # task for a large list of users!

----------------------------------------

TITLE: Multi-Step AI Processing Workflow
DESCRIPTION: Complex example showing a multi-step workflow combining multiple AI services with durable execution.

LANGUAGE: typescript
CODE:
export const userWorkflow = inngest.createFunction(
  fnOptions,
  fnListener,
  async ({ event, step }) => {
    const similar = await step.run("query-vectordb", async () => {
      // Query a vectorDB for similar results given input
      const embedding = createEmbedding(event.data.input)
      return await index.query({ vector: embedding, topK: 3 }).matches
    })

    const response = await step.run("generate-llm-response", async () => {
      // Inject our prompt given similar search results and event.data.input
      const prompt = createAgentPrompt(similar, event.data.input)
      return await llm.createCompletion({
        model: "gpt-3.5-turbo",
        prompt,
      })
    })

    const entities = await step.run("extract-entities-hf", async () => {
      // Extract entities from the generated response using Hugging Face's named entity recognition model
      let pipe = await pipeline(
        "entity-extraction",
        "Xenova/bert-base-multilingual-uncased-sentiment"
      )
      return await pipe(response)
    })

    const summary = await step.run("generate-summary-anthropic", async () => {
      // Generate a summary document using the extracted entities and the Anthropic API
      const anthropic = new Anthropic()

      const anthropicPrompt = `The following entities were mentioned in the response: ${entities.join(
        ", "
      )}. Please generate a summary document based on these entities and the original response:\n\nResponse: ${response}`

      return await anthropic.messages.create({
        model: "claude-3-opus-20240229",
        max_tokens: 1024,
        messages: [{ role: "user", content: anthropicPrompt }],
      })
    })

    await step.run("save-to-db", async () => {
      // Save the generated response, extracted entities, and summary to the database
      await db.summaries.create({
        requestID: event.data.requestID,
        response,
        entities,
        summary,
      })
    })
  }
)

----------------------------------------

TITLE: GitHub Actions Workflow for Render Deployment and Inngest Sync
DESCRIPTION: GitHub Actions workflow configuration that deploys an application to Render and syncs it with Inngest using the Render Deploy Action and a curl command.

LANGUAGE: yaml
CODE:
# .github/workflows/deploy.yaml
name: My Deploy

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.MY_RENDER_SERVICE_ID }}
          api-key: ${{ secrets.MY_RENDER_API_KEY }}
          wait-for-success: true

  sync_inngest:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Register application to Inngest
       - run: |
            curl -X PUT ${{ secrets.APP_URL }}/api/inngest

----------------------------------------

TITLE: Importing Callout Component in React/JSX
DESCRIPTION: Import statement for the Callout component used in the documentation MDX file.

LANGUAGE: jsx
CODE:
import { Callout } from "src/shared/Docs/mdx";

----------------------------------------

TITLE: Sending Single Event - TypeScript
DESCRIPTION: Example of sending a single event with cart checkout data using the Inngest TypeScript client. Events must include a name and data payload.

LANGUAGE: typescript
CODE:
import { inngest } from "../inngest/client";

// This sends an event to Inngest.
await inngest.send({
  // The event name
  name: "storefront/cart.checkout.completed",
  // The event's data
  data: {
    cartId: "ed12c8bde",
    itemIds: ["9f08sdh84", "sdf098487", "0fnun498n"],
    account: {
      id: 123,
      email: "test@example.com",
    },
  },
});

----------------------------------------

TITLE: Processing Stripe Invoice Payment Failed Webhook with Inngest in JavaScript
DESCRIPTION: This code snippet demonstrates how to create an Inngest function that handles a Stripe 'invoice.payment_failed' webhook event. It loads the user associated with the invoice, downgrades their plan, and sends a notification email.

LANGUAGE: javascript
CODE:
import { inngest } from "./client";

inngest.createFunction(
  { id: "downgrade-customer" },
  { event: "stripe/invoice.payment_failed" },
  async ({ event, step }) => {
    const invoice = event.data.data.object;

    const user = await step.run("load-user-via-stripe-id", async () => {
      return await getUserByStripeCustomerId(invoice.customer);
    });

    await step.run("downgrade-user", async () => {
      await billingUtils.downgradeUser(user.id);
    });

    await step.run("send-email", async () => {
      sendDowngradeEmail(user.email);
    });

    return `Downgraded user plan & ${user.id}`;
  }
);

----------------------------------------

TITLE: Determining Event Types in Multi-Trigger Functions
DESCRIPTION: Shows how to determine and handle different event types within a function handler that has multiple triggers, with type narrowing examples in TypeScript and Go.

LANGUAGE: typescript
CODE:
async ({ event }) => {
  //      ^? type event: EventA | EventB | InngestScheduledEvent | InngestFnInvoked
  if (event.name === "a") {
    // `event` is type narrowed to only the `a` event
  } else if (event.name === "b") {
    // `event` is type narrowed to only the `b` event
  } else {
    // `event` is type narrowed to only the `inngest/function.invoked` event
  }
}

LANGUAGE: go
CODE:
func(ctx context.Context, input inngestgo.Input) (any, error) {
	switch event := input.Event.(type) {
	case EventA:
		// `event` is type narrowed to only the `a` event
	case EventB:
		// `event` is type narrowed to only the `b` event
	case inngestgo.FunctionInvokedEvent:
		// `event` is type narrowed to only the `inngest/function.invoked` event
	}
	return nil, nil
},

----------------------------------------

TITLE: Importing Products to Database with Inngest Steps
DESCRIPTION: Demonstrates how to use Inngest steps to import products into a database with automatic retries for each insert operation.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "shopify-product-import", concurrency: 10 },
  { event: "shopify/import.requested" },
  async ({ event, step }) => {
    // --- See first code snippet above for the setup ---

    for (let product of allProducts) {
      await step.run("import-product", async () => {
        await database.upsertProduct({
          storeId: event.data.storeId,
          product,
        })
      })
    }
  }
)

----------------------------------------

TITLE: Exporting Ocoya Case Study Metadata in JavaScript
DESCRIPTION: This code snippet defines and exports various metadata related to the Ocoya case study, including company information, quotes, and image assets. It's likely used to populate a case study page or component in a React or Next.js application.

LANGUAGE: javascript
CODE:
export const title = 'Shipping e-commerce imports pipelines in record time'
export const companyName = 'Ocoya'
export const logo = '/assets/customers/ocoya.svg'
export const quote = {
  text: `At Ocoya, we were struggling with the complexities of managing our
social media and e-commerce workflows. Thanks to Inngest, we were
able to simplify our development process, speed up our time to
market, and deliver a better customer experience. Inngest has
become an essential tool in our tech stack, enabling us to focus
on delivering a world-class product to our users.`,
  attribution: {
    name: 'Aivaras Tumas',
    title: 'CEO & Co-founder',
  },
  avatar: '/assets/customers/ocoya-aivaras-tumas.png',
}
export const companyURL = 'https://www.ocoya.com'
export const companyDescription = 'AI Social Media Management'
export const ogImage = '/assets/customers/case-study/og-image-ocoya.png'

----------------------------------------

TITLE: Configuring Page Metadata and Company Information in JavaScript
DESCRIPTION: JavaScript exports defining company metadata, quotes, and content details for the case study page. Includes configuration for company name, logo, testimonial, URLs and descriptions.

LANGUAGE: javascript
CODE:
export const title = 'Powering the Future of AI-Driven Content'
export const companyName = 'Mega SEO'
export const logo = '/assets/customers/megaseo-logo.svg'
export const quote = {
  text: `By leveraging Inngest, we've seen a 50% reduction in debugging time. The ability to test complex workflows locally has been a game-changer, giving us confidence that our AI-driven processes will run smoothly in production.`,
  attribution: {
    name: 'Joe Adams',
    title: 'CEO',
  },
  avatar: '/assets/customers/joe-adams.jpeg',
}
export const companyURL = 'https://www.megaseo.ai'
export const companyDescription = 'Automated content from end to end.'
export const ogImage = '/assets/customers/case-study/og-image-mega-seo.png'

----------------------------------------

TITLE: Implementing Database Event Handler Function
DESCRIPTION: Example implementation of an Inngest function that handles new user creation events and triggers an onboarding workflow.

LANGUAGE: typescript
CODE:
import { inngest } from "./client";
import { sendEmail } from "@/lib/email"

export const handleNewUser = inngest.createFunction(
  { id: "handle-new-user" },
  { event: "db/user.create" },
  async ({ event, step }) => {
    // This object includes the entire record that changed
    const pulseEvent = event.data;

    await step.run("send-welcome-email", async () => {
      // Send welcome email
      await sendEmail({
        template: "welcome",
        to: pulseEvent.created.email,
      });
    });

    await step.sleep("wait-before-tips", "3d");

    await step.run("send-new-user-tips-email", async () => {
      // Follow up with some helpful tips
      await sendEmail({
        template: "new-user-tips",
        to: pulseEvent.created.email,
      });
    });
  },
);

----------------------------------------

TITLE: Sending Scheduled Events with Inngest Client
DESCRIPTION: Shows how to initialize the Inngest client and send an event with scheduled execution time. The event includes a timestamp and post ID for scheduling blog post publication.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";

// Create a new client
const inngest = new Inngest("API");

// Send an event with the time to schedule a blog post in the event data.
await inngest.send({
  name: "blog/post.scheduled",
  data: {
    scheduleAt: "2023-04-01T12:30:00.000Z",
    postID: "ed6f81",
  },
});

----------------------------------------

TITLE: Defining Event Trigger Structure for Inngest Workflow
DESCRIPTION: JSON structure defining the event trigger for the Inngest workflow, including participant count, preferences, and cuisine type.

LANGUAGE: json
CODE:
{
  "data": {
    "participantsCount": 4,
    "preferences": ["no nuts", "vegan"],
    "cuisine_type": "Italian"
  }
}

----------------------------------------

TITLE: Managing Multiple AI Model Rate Limits
DESCRIPTION: Implementation showing how to handle different rate limits for multiple AI models using separate Inngest functions.

LANGUAGE: typescript
CODE:
const highLimitFunction = inngest.createFunction(
  {
    id: "pre-process-text-with-llama",
    throttle: {
      limit: 100,
      period: '1m',
    },
  },
  { event: "ai/preprocess.text" },
  async ({ event, step }) => {
    /* call Llama */
  }
)

const lowLimitFunction = inngest.createFunction(
  {
    id: "summarize-with-openai",
    throttle: {
      limit: 10,
      period: '1m',
    },
  },
  { event: "ai/create.summary" },
  async ({ event, step }) => {
    /* call OpenAI */
  }
)

----------------------------------------

TITLE: Importing Icons and Components for Flow Control Documentation in React
DESCRIPTION: This snippet imports custom icons and components used to create a card-based layout for flow control documentation. It includes imports from shared components and the Remix icon library.

LANGUAGE: JavaScript
CODE:
import IconConcurrency from 'src/shared/Icons/FlowControl/Concurrency';
import IconDebounce from 'src/shared/Icons/FlowControl/Debounce';
import { CardGroup, Card, ImageTheme } from "src/shared/Docs/mdx";

import {
  RiGitPullRequestFill,
  RiSlowDownFill,
  RiSkipRightFill,
} from "@remixicon/react";

----------------------------------------

TITLE: Defining Event Archive Title in JavaScript
DESCRIPTION: This code snippet sets the title for the event archiving feature in Inngest. It uses a JavaScript export statement to define a constant variable.

LANGUAGE: JavaScript
CODE:
export const title = "Archive events";

----------------------------------------

TITLE: Configuring Throttling in Python
DESCRIPTION: Implementation of throttling configuration for Inngest functions in Python. Sets up throttling with a limit of 1 execution per 5 seconds, with a burst capacity of 2, keyed by user_id.

LANGUAGE: python
CODE:
@inngest.create_function(
  id="unique-function-id",
  throttle=inngest.Throttle(
    limit=1,
    period=datetime.timedelta(seconds=5),
    key="event.data.user_id",
    burst=2,
  ),
  trigger=inngest.Trigger(event="ai/summary.requested")
)
async def synchronize_data(ctx: inngest.Context):
    # This function will be throttled to 1 run per 5 seconds for a given event payload with matching user_id

----------------------------------------

TITLE: Implementing Middleware Initialization in TypeScript
DESCRIPTION: Demonstrates how to implement the init function in TypeScript middleware, including async initialization and setting up dependencies like database connections.

LANGUAGE: typescript
CODE:
new InngestMiddleware({
  name: "Example Middleware",
  async init() {
    const db = await connectToDatabase();

    return {};
  },
});

----------------------------------------

TITLE: Disabling Server-Side Cache in Next.js App Router
DESCRIPTION: This code snippet demonstrates how to temporarily disable the server-side cache for route segments in Next.js App Router. It's useful when dealing with dynamic data to prevent stale content.

LANGUAGE: javascript
CODE:
export const dynamic = 'force-dynamic'

----------------------------------------

TITLE: Orchestrating Plaid Transactions Update with Inngest in JavaScript
DESCRIPTION: Illustrates how to handle a Plaid transactions update event, including fetching data, invoking sync functions, and managing responses.

LANGUAGE: jsx
CODE:
import { syncAccounts, syncTransactions } from './functions/...';

const plaidDefaultUpdate = inngest.createFunction(
  {
    ...
  },
  { event: 'plaid/transactions.default_update' },
  async ({ event, step, utils }) => {
    const connectedDestinationIds = await utils.getConnectedDestinationIds(
	  { id: 'get-connected-destination-ids' }, 
	  data: event.data
	)
		
	const sync = await utils.startSync({ id: 'start-sync' }, ...);
	const accountsData = await step.run({ id: 'fetch-accounts-from-plaid' }, ...)
		
	const syncAccountsResponse = await Promise.all(connectedDestinationIds.map(destinationId => 
	  step.invoke({ id: `sync-accounts-to-${destinationId}` }, {
	    function: syncAccounts,
		data: {
		  destinationid,
		  syncId: sync.id,
		  accounts: accountsData
		}
	  })
	)).then(responses => {
	  const hasError = Boolean(responses.find(response => response.hasError));
		
	  return { responses, hasError }
	})
	
	if ( syncAccountsResponse.hasError ) {
	  // Send notification
	  // Update logs
	  // etc.
	  return;
	}

	const transactionsData = await step.run({ id: 'fetch-transactions-from-plaid' }, ...);
	const syncTransactionsResponse = ...
})

----------------------------------------

TITLE: Configuring Function Cancellation Triggers in JavaScript
DESCRIPTION: Shows how to set up cancellation conditions for an event-driven function using Inngest's createFunction API. The example demonstrates user deletion event matching.

LANGUAGE: javascript
CODE:
inngest.createFunction(
  {
    id: "sync-contacts",
    cancelOn: [{ event: "app/user.deleted", match: "data.userId" }],
  },
  { event: "app/user.created" },
  // ...
);

----------------------------------------

TITLE: Using waitUntil for Background Execution in Serverless Functions (JavaScript)
DESCRIPTION: This snippet demonstrates how to use the waitUntil utility to execute an asynchronous operation in the background without blocking the response. It allows for faster response times while ensuring the operation completes before the serverless function shuts down.

LANGUAGE: javascript
CODE:
// ✅ GOOD: The sendMetrics function will execute in the background,
// but not block the response from returning to the user
async function POST(request) {
  const data = await createPost(request.body)
  waitUntil(sendMetrics({ metric: 'posts.created', increment: 1 }))
  return new Response(data)
}

----------------------------------------

TITLE: Creating a Reminder Function in TypeScript with Inngest
DESCRIPTION: This snippet demonstrates how to create a function that sends a reminder email to a user. It uses Inngest's createFunction method to define the function structure and behavior.

LANGUAGE: typescript
CODE:
const sendReminder = inngest.createFunction(
  { id: "send-reminder" },
  { event: "notifications/reminder.scheduled" },
  async ({ event, step }) => {
    const { user, message } = event.data;

    const { id } = await emailApi.send({
      to: user.email,
      subject: "Reminder for your upcoming event",
      body: message,
    });

    return { id }
  }
);

----------------------------------------

TITLE: Using OpenAI Client in Python Inngest Functions
DESCRIPTION: Example of accessing and using the injected OpenAI client within a Python Inngest function handler. Shows how to create a chat completion using the injected client.

LANGUAGE: python
CODE:
@inngest_client.create_function(
    fn_id="user-create",
    trigger=inngest.TriggerEvent(event="app/user.create"),
)
async def fn(ctx: inngest.Context, step: inngest.Step):
    chat_completion = ctx.openai.chat.completions.create(
        messages=[
            {
                "role": "user",
                "content": "Say this is a test",
            }
        ],
        model="gpt-3.5-turbo",
    )

----------------------------------------

TITLE: Defining OpenAI Chat Completion Functions
DESCRIPTION: This code defines two functions for OpenAI Chat completion: searching issues and deleting an issue. These functions are used by the FunctionInvoker to interact with the Linear API.

LANGUAGE: typescript
CODE:
const functions: Functions = {
  search_issues: {
    docs: {
      name: "search_issues",
      description: "Search all issues for the given text",
      parameters: {
        type: "object",
        properties: {
          search: {
            type: "string",
            description: "The search term",
          },
        },
        required: ["search"],
      },
    },
    invoke: async (f: FunctionCall, _m: ChatCompletionRequestMessage[]) => {
      if (typeof f.arguments.search !== "string") {
        throw new Error("No search term provided");
      }
      return linear.issues({
        last: 5,
        filter: { searchableContent: { contains: f.arguments.search } },
      });
    },
  },
  delete_issue: {
    docs: {
      name: "delete_issue",
      description: "Delete an issue by ID",
      parameters: {
        type: "object",
        properties: {
          id: {
            type: "string",
            description: "ID of the issue to delete",
          },
        },
        required: ["id"],
      },
    },
    confirm: true,
    invoke: async (f: FunctionCall, _m: ChatCompletionRequestMessage[]) => {
      console.log("🤡 Not actually deleting issues!", f.arguments.id);
      return true;
    },
  },
};

----------------------------------------

TITLE: Setting Up Inngest Express Handler
DESCRIPTION: Shows how to configure the Express server to handle Inngest function calls using the serve middleware.

LANGUAGE: javascript
CODE:
import { serve } from "inngest/express"
import myFn from "../inngest/myfn"
app.use("/api/inngest", serve("My App", [ myFn ]))

----------------------------------------

TITLE: Step Handler Implementation Examples
DESCRIPTION: Examples showing different ways to implement step handlers including async, sync, and optional return values.

LANGUAGE: typescript
CODE:
// Steps can have async handlers
const result = await step.run("get-api-data", async () => {
  // Steps should return data used in other steps
  return fetch("...").json();
});

// Steps can have synchronous handlers
const data = await step.run("transform", () => {
  return transformData(result);
});

// Returning data is optional
await step.run("insert-data", async () => {
  db.insert(data);
});

----------------------------------------

TITLE: Triggering an Inngest Function in TypeScript
DESCRIPTION: This snippet shows how to trigger an Inngest function from another part of the application by sending an event payload with specific data.

LANGUAGE: typescript
CODE:
await inngest.send({
  name: "invite.users",
  data: { from: "2023-03-20T00:00:00", to: "2023-03-21T00:00:00" }
})

----------------------------------------

TITLE: Implementing Cancellable Reminder Function in Go
DESCRIPTION: Go implementation of a cancellable reminder function using Inngest. Shows function setup with cancellation configuration and event triggers.

LANGUAGE: go
CODE:
package main

import (
	"context"
	"github.com/inngest/inngestgo"
	"github.com/inngest/inngestgo/step"
)

func main() {
	f := inngestgo.CreateFunction(
		inngestgo.FunctionOpts{
			ID:   "schedule-reminder",
			Name: "Schedule reminder",
			Cancel: []inngestgo.Cancel{
				{
					Event: "tasks/deleted",
					IfExp: "event.data.id == async.data.id",
				},
			},
		},
		// Run on every tasks/reminder.created event.
		inngestgo.EventTrigger("tasks/reminder.created", nil),
		ScheduleReminder,
	)
}

func ScheduleReminder(ctx context.Context, input inngestgo.Input[ScheduleReminderEvent]) (any, error) {
	// ...
}

----------------------------------------

TITLE: Authentication and Security Keys
DESCRIPTION: Environment variables for event key and signing keys used for authentication and request signing

LANGUAGE: env
CODE:
INNGEST_EVENT_KEY=your_secret_key
INNGEST_SIGNING_KEY=your_signing_key
INNGEST_SIGNING_KEY_FALLBACK=your_fallback_key

----------------------------------------

TITLE: Configuring Event Schemas in Inngest TypeScript SDK v2.0
DESCRIPTION: Demonstrates how to configure event schemas using the new v2.0 syntax, including support for Record types, Union types, and Zod schemas. This provides improved type safety and better error messages.

LANGUAGE: typescript
CODE:
export const inngest = new Inngest({
  name: "Admin Panel",
  schemas: new EventSchemas()
    .fromRecord<Events>()
    .fromUnion<Custom1 | Custom2>()
    .fromZod(zodEventSchemas),
});

----------------------------------------

TITLE: Creating Debounced Queue Table in PostgreSQL
DESCRIPTION: SQL script to create a table structure for implementing a debounced job queue with necessary columns and a unique index for handling duplicate jobs.

LANGUAGE: sql
CODE:
CREATE TABLE debounce_job_queue (
  id SERIAL PRIMARY KEY,
  job_type VARCHAR(64),
  status VARCHAR(64),
  payload JSONB,
  scheduled_at TIMESTAMP,
  debounce_key VARCHAR(64)
);

LANGUAGE: sql
CODE:
CREATE UNIQUE INDEX debounce_key_status
ON debounce_job_queue(debounce_key, status)
WHERE status = 'QUEUED';

----------------------------------------

TITLE: Writing First Inngest Function in TypeScript
DESCRIPTION: Defines a simple 'hello-world' function that sleeps for a second and returns a greeting message.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";

export const inngest = new Inngest({ id: "my-app" });

// Your new function:
const helloWorld = inngest.createFunction(
  { id: "hello-world" },
  { event: "test/hello.world" },
  async ({ event, step }) => {
    await step.sleep("wait-a-moment", "1s");
    return { message: `Hello ${event.data.email}!` };
  },
);

// Add the function to the exported array:
export const functions = [
  helloWorld
];

----------------------------------------

TITLE: Project Setup Commands
DESCRIPTION: Shell commands for installing dependencies and starting the development server

LANGUAGE: shell
CODE:
npm i
npm run dev

----------------------------------------

TITLE: Basic Welcome Email Function - TypeScript
DESCRIPTION: Simple Inngest function that sends a welcome email when a user signs up.

LANGUAGE: typescript
CODE:
import { Inngest } from "inngest";

const inngest = new Inngest({ id: "my-app" });

export default inngest.createFunction(
  { id: "activation-email" },
  { event: "app/user.created" },
  async ({ event }) => {
    await sendEmail({ email: event.user.email, template: "welcome" });
  }
);

----------------------------------------

TITLE: Sending Events to Inngest Server using Python
DESCRIPTION: This snippet demonstrates how to send events to the Inngest server using both async and sync methods. It shows how to initialize the Inngest client, send a single event, and send multiple events in a list. The code also illustrates the difference between using 'send' for async/await code and 'send_sync' for synchronous code.

LANGUAGE: python
CODE:
import inngest

inngest_client = inngest.Inngest(app_id="my_app")

# Call the `send` method if you're using async/await
ids = await inngest_client.send(
    inngest.Event(name="my_event", data={"msg": "Hello!"})
)

# Call the `send_sync` method if you aren't using async/await
ids = inngest_client.send_sync(
    inngest.Event(name="my_event", data={"msg": "Hello!"})
)

# Can pass a list of events
ids = await inngest_client.send(
    [
        inngest.Event(name="my_event", data={"msg": "Hello!"}),
        inngest.Event(name="my_other_event", data={"name": "Alice"}),
    ]
)

----------------------------------------

TITLE: Implementing Weekly Email Activity Scheduler in Python
DESCRIPTION: Python implementation of a scheduled function that fetches users and broadcasts events to trigger individual email sending functions. Uses step.send_event() for proper context tracking.

LANGUAGE: python
CODE:
import inngest
from src.inngest.client import inngest_client

@inngest_client.create_function(
    fn_id="weekly-activity-load-users",
    trigger=inngest.TriggerCron(cron="0 12 * * 5")
)
async def load_cron(ctx: inngest.Context, step: inngest.Step):
    async def fetch():
        return await fetch_users()
    
    users = await step.run("fetch-users", fetch)

    events = []
    for user in users:
        events.append(
            inngest.Event(
                name="app/weekly-email-activity.send",
                data={
                    **user,
                    "user": user
                }
            )
        )

    await step.send_event("fan-out-weekly-emails", events)

    return {"count": len(users)}

----------------------------------------

TITLE: Setting Up Inngest HTTP Endpoint with Fastify
DESCRIPTION: Configures a Fastify server to handle Inngest functions using the Fastify plugin.

LANGUAGE: typescript
CODE:
import Fastify from "fastify";
import { fastifyPlugin } from "inngest/fastify";
import { inngest, functions } from "./src/inngest"

const fastify = Fastify({
  logger: true,
});

// This automatically adds the "/api/inngest" routes to your server
fastify.register(fastifyPlugin, {
  client: inngest,
  functions,
  options: {},
});

// Start up the fastify server
fastify.listen({ port: 3000 }, function (err, address) {
  if (err) {
    fastify.log.error(err);
    process.exit(1);
  }
});

----------------------------------------

TITLE: Configuring a Sign-up Flow Step Function in JSON
DESCRIPTION: This JSON configuration defines a step function for a user sign-up flow. It includes steps for sending a welcome email, adding the user to Stripe, enriching signup data, and notifying the sales team based on certain conditions.

LANGUAGE: json
CODE:
{
  "name": "Sign-up flow",
  "id": "improved-chamois-c592a7",
  "triggers": [
    { "event": "auth0/user.created" }
  ],
  "steps": {

    "welcome": {
      "id": "welcome",
      "name": "Send a welcome email",
      // The path links to the source code for the step.
      "path": "file://./steps/welcome",
      "runtime": {
        // This lets us run steps in eg. webassembly also.
        "type": "docker"
      },
      "after": [{
        "step": "$trigger"
      }]
    },

    "stripe": {
      "id": "stripe",
      "name": "Add the user to stripe",
      "path": "file://./steps/stripe",
      "runtime": {
        "type": "docker"
      },
      "after": [{
        "step": "welcome",
        "if": "event.data.plan != 'free'"
      }]
    },

    "enrich": {
      "id": "enrich",
      "name": "Enrich signup data",
      "path": "file://./steps/enrich",
      "runtime": {
        "type": "docker"
      },
      "after": [{
        "step": "welcome"
      }]
    },

    "notify": {
      "id": "notify",
      "name": "Notify sales team",
      "path": "file://./steps/slack",
      "runtime": {
        "type": "docker"
      },
      "after": [{
        "step": "enrich",
        "if": "steps.enrich.value >= 1000"
      }]
    }
  }
}

----------------------------------------

TITLE: Triggering Inngest Function from Next.js API (Pages Router)
DESCRIPTION: Code to create an API route that sends an event to trigger an Inngest function in Next.js Pages Router.

LANGUAGE: typescript
CODE:
import { NextApiRequest, NextApiResponse } from "next";
import { inngest } from "./inngest";

// Opt out of caching; every request should send a new event
export const dynamic = "force-dynamic";

// Create a simple async Next.js API route handler
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse,
) {
  // Send your event payload to Inngest
  await inngest.send({
    name: "test/hello.world",
    data: {
      email: "testUser@example.com",
    },
  });

  res.status(200).json({ message: "Event sent!" });
}

----------------------------------------

TITLE: Installing Inngest SDK using npm
DESCRIPTION: Command to install the Inngest SDK using npm package manager.

LANGUAGE: shell
CODE:
npm install inngest

----------------------------------------

TITLE: Implementing Errors as Values in Rust
DESCRIPTION: This snippet shows Rust's approach to handling errors as values using the Result type.

LANGUAGE: rust
CODE:
fn get_user(user_id: &str) -> Result<Option<User>, &str> {
    match find_user_by_id(user_id) {
        Some(user) => Ok(Some(user)),
        None => Err("user not found"),
    }
}

fn rename_user(user_id: &str, name: String) -> Result<User, &str> {
    // Consume the function
    match get_user(user_id) {
        Ok(Some(mut user)) => {
            user.name = name;
            Ok(user)
        },
        Ok(None) => Err("user not found"),
        Err(e) => Err(e),
    }
}

----------------------------------------

TITLE: Different Ways to Call step.run()
DESCRIPTION: Demonstrates various ways to handle the Promise returned by step.run() including using await, then(), and Promise.all().

LANGUAGE: typescript
CODE:
// Use the "await" keyword to wait for the promise to fulfil
await step.run("create-user", () => {/* ... */});
const user = await step.run("create-user", () => {/* ... */});

// Use `then` (or similar)
step.run("create-user", () => {/* ... */})
  .then((user) => {
    // do something else
  });

// Use with a Promise helper function to run in parallel
Promise.all([
  step.run("create-subscription", () => {/* ... */}),
  step.run("add-to-crm", () => {/* ... */}),
  step.run("send-welcome-email", () => {/* ... */}),
]);

----------------------------------------

TITLE: Listening for PartyKit Messages in React Hook
DESCRIPTION: This React hook uses PartySocket to listen for messages from the PartyKit server and update the UI accordingly.

LANGUAGE: typescript
CODE:
const socket = usePartySocket({
  room: process.env.NEXT_PUBLIC_PARTYKIT_ROOM_NAME!,
  host: process.env.NEXT_PUBLIC_PARTY_KIT_URL!,
  onMessage: (message) => {
    setLastMessage(message);
  }
});

----------------------------------------

TITLE: Triggering an Inngest Function
DESCRIPTION: Demonstrates how to trigger an Inngest function by sending an event using inngest.send(). Returns an array of Event IDs used for fetching run status and output.

LANGUAGE: typescript
CODE:
const { ids } = await inngest.send({
  name: "imports/csv.uploaded",
  data: {
    file: "http://s3.amazonaws.com/acme-uploads/user_0xp3wqz7vumcvajt/JVLO6YWS42IXEIGO.csv",
    userId: "user_0xp3wqz7vumcvajt",
  },
});
// ids = ["01HWAVEB858VPPX47Z65GR6P6R"]

----------------------------------------

TITLE: Sending Events with Enhanced Searchable Properties in Inngest
DESCRIPTION: This improved version of the event sending code includes additional properties that are used in the logging stack, making the Function runs more searchable.

LANGUAGE: ts
CODE:
await inngest.send({
  name: "user/message.sent",
  data: {
    messageId: 1,
    userId: 12,
    workspaceId: 2,
    // you can also add feature-specific information
    messageEdit: false,
  },
});

----------------------------------------

TITLE: Defining Event Title and Date Constants
DESCRIPTION: Exports constant values for the event title and date using JavaScript module exports.

LANGUAGE: javascript
CODE:
export const title = "New inngest/function.cancelled event";
export const date = "2024-11-25";

----------------------------------------

TITLE: Defining Delay Action Schema in Sanity
DESCRIPTION: TypeScript schema definition for delay actions in Sanity CMS. Specifies duration and time unit fields with validation and preview functionality.

LANGUAGE: typescript
CODE:
import {defineField, defineType} from 'sanity'

export default defineType({
    name: 'delay',
    type: 'object',
    title: 'Delay',
    fields: [
        defineField({
            name: 'duration',
            title: 'Delay Length',
            type: 'number',
            validation: (Rule) => Rule.required(),
        }),
        defineField({
            name: 'unit',
            title: 'Delay Unit',
            type: 'string',
            initialValue: 's',
            options: {
                list: [
                    {title: 'Second(s)', value: 's'},
                    {title: 'Minute(s)', value: 'm'},
                    {title: 'Day(s)', value: 'd'}
                ],
            },
        }),
    ],
    preview: {
        select: {
            duration: 'duration',
            unit: 'unit',
        },
        prepare(selection) {
            const {duration, unit} = selection
            return {
                title: `${duration}${unit}`
            }
        },
    },
})

----------------------------------------

TITLE: Generating Campaign Concept with AI Step
DESCRIPTION: Implements the first step of campaign generation using step.ai.wrap to handle AI completions with proper error handling and retries.

LANGUAGE: typescript
CODE:
const campaignConcept: any = await step.ai.wrap(\n    "generate-campaign-concept",\n    createCompletion,\n    {\n    model: model,\n    messages: [\n        {\n        role: "user",\n        content: `\n${MARKETING_EXPERT_PROMPT}\nCreate a marketing campaign concept for the following brand:\n${brandInfo}\nCampaign Goal: ${campaignGoal}\n\nThe concept should be culturally adaptable across multiple markets.\nProvide the core message and key themes.\n`,\n        },\n    ],\n    temperature: model.includes("deepseek") ? 0.6 : 1,\n    }\n);

----------------------------------------

TITLE: Implementing Debouncing in Inngest Functions with TypeScript
DESCRIPTION: Shows how to implement debouncing for an Inngest Function that handles document suggestions. The function waits for 1 minute of inactivity before processing the latest event.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  {
    id: "handle-document-suggestions",
    debounce: {
      key: "event.data.id",
      period: "1m"
    },
  },
  { event: "document.updated" },
  async ({ event, step }) => {
    // This function will only be scheduled 1 minute after events
    //   are no longer received with the same `event.data.id` field.
    //
    // `event` will be the last event in the series received.
  }
);

----------------------------------------

TITLE: Initializing Workflows Database Schema in SQL
DESCRIPTION: SQL insert statements to create initial workflow instances for blog post publishing and review automation.

LANGUAGE: sql
CODE:
INSERT INTO "public"."workflows" ("id", "created_at", "workflow", "enabled", "trigger", "description", "name") VALUES
	(2, '2024-09-14 20:19:41.892865+00', NULL, true, 'blog-post.published', 'Actions performed to optimize the distribution of blog posts', 'When a blog post is published'),
	(1, '2024-09-14 15:46:53.822922+00', NULL, true, 'blog-post.updated', 'Getting a review from AI', 'When a blog post is moved to review');

----------------------------------------

TITLE: Initializing Discord Bot and Inngest Integration in TypeScript
DESCRIPTION: This code snippet sets up a Discord bot using Discordeno and initializes an Inngest instance. It listens for message creation events and sends them to Inngest for processing.

LANGUAGE: typescript
CODE:
import { createBot, Inngest } from "./deps.ts";

// Create the Discord bot
const bot = createBot({
  token: Deno.env.get("DISCORD_TOKEN"),
});

// Create an Inngest instance
const inngest = new Inngest({ name: "Discord Bot" });

bot.events.messageCreate = async (_b, message) => {
  // Check if the message is a request, then...
  await inngest.send("inngestabot/message.received", {
    data: {
      message: {
        channelId: message.channelId.toString(),
        content: message.content,
        id: message.id.toString(),
      },
    },
    user: { authorId: message.authorId.toString() },
  });
};

----------------------------------------

TITLE: Sending Event to Inngest DevServer with JavaScript Fetch
DESCRIPTION: JavaScript code using the Fetch API to send a POST request to the Inngest DevServer, including an event name and custom data payload.

LANGUAGE: javascript
CODE:
await fetch("http://localhost:9999/e/KEY", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    // replace this with your event name and the data you want to send
    name: "my.event.name",
    data: { hello: "there" },
    user: { email: "test@example.com" },
  }),
});

----------------------------------------

TITLE: Event Payload Example
DESCRIPTION: Example JSON payload for triggering an Inngest function.

LANGUAGE: json
CODE:
{
  "data": {
    "email": "test@example.com"
  }
}

----------------------------------------

TITLE: Configuring Next-Auth and Triggering User Creation Event in TypeScript
DESCRIPTION: This snippet shows the configuration for Next-Auth, including custom callbacks and event handlers. It demonstrates how to trigger a user creation event using Inngest when a new user account is created.

LANGUAGE: typescript
CODE:
export const authOptions: NextAuthOptions = {
  callbacks: {
    session: ({ session, user }) => ({
      ...session,
      user: {
        ...session.user,
        id: user.id,
      },
    }),
  },
  events: {
    createUser: async ({ user }) => {
      inngest.send({ name: "user/created", user, data: {} });
    },
  },
  adapter: PrismaAdapter(prisma),
  providers: [
    GithubProvider({
      clientId: env.GITHUB_CLIENT_ID,
      clientSecret: env.GITHUB_CLIENT_SECRET,
    }),
  ],
};

----------------------------------------

TITLE: Implementing Errors as Values in Python using Unions
DESCRIPTION: This snippet demonstrates the recommended approach to implement errors as values in Python using unions, which is more idiomatic and terse.

LANGUAGE: python
CODE:
def get_user(user_id: str) -> User | Exception:
    rows = users.find(user_id=user_id)
    if len(rows) == 0:
        return Exception("user not found")

    return rows[0]

def rename_user(user_id: str, name: str) -> User | Exception:
    # Consume the function
    user = get_user(user_id)
    if isinstance(user, Exception):
        return user

    user.name = name
    return user

----------------------------------------

TITLE: Implementing Combined Concurrency Limits in Inngest
DESCRIPTION: Shows how to combine multiple concurrency limits in Inngest, setting both per-user (5 concurrent jobs) and global (100 concurrent jobs) limits simultaneously.

LANGUAGE: typescript
CODE:
export const combinedConcurrencyLimits = inngest.createFunction(
  {
    id: 'multi-tenant-concurrency-with-shared-limit',
    concurrency: [
      {
        limit: 5,
        key: 'event.data.user_slug',
      },
      {
        limit: 100,
      },
    ],
  },
  { event: 'demo/job.created' },
  async ({ event, step }) => {
    /* function logic omitted for example */
    return { status: 'success' };
  }
);

----------------------------------------

TITLE: Using Attempt Counter in TypeScript Inngest Functions
DESCRIPTION: Demonstrates how to use the attempt counter in TypeScript Inngest functions to implement different logic based on the number of retry attempts.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  { id: "generate-summary" },
  { event: "blog/post.created" },
  async ({ attempt }) => {
    // `attempt` is the zero-index attempt number

    await step.run('call-llm', async () => {
      if (attempt < 2) {
        // Call OpenAI's API two times
      } else {
        // After two attempts to OpenAI, try a different LLM, for example, Mistral
      }
    });
  }
);

----------------------------------------

TITLE: Implementing Domain Verification with Next.js Serverless Function
DESCRIPTION: A Next.js Serverless Function implementation for domain verification that uses CRON and database checks. Demonstrates the traditional approach with its limitations including timeout risks and complex error handling.

LANGUAGE: tsx
CODE:
import { intervalToDuration } from "date-fns";

import prisma from "./prisma-client";
import {
  resend,
  FROM,
  DomainConfiguredEmailTemplate,
  DomainFailedConfigureEmailTemplate,
} from "./resend";
import { notifyFailureToTeam } from "./slack";
import { checkDNSRecord } from "./domain-verification";

export async function GET(_request: Request) {
  const domains = await prisma.domains.findMany({
    where: {
      status: "pending",
    },
    include: {
       account: true
    }
  });

  for (let index = 0; index < domains.length; index++) {
    const domain = domains[index];

    const {
	    configured,
	    error: domainConfigurationError
	  } = await checkDNSRecord(domain.domain);

    if (configured) {
      const { error } = await resend.emails.send({
        from: FROM,
        to: [domain.account.email],
        subject: "Start sending emails now!",
        react: DomainConfiguredEmailTemplate({ account: domain.account }),
      });

      if (!error) {
        await prisma.domains.update({
          where: {
            id: domain.id,
          },
          data: {
            status: "configured",
          },
        });
      } else {
        await notifyFailureToTeam(domain, error);
      }
    } else {
      const { hours } = intervalToDuration({
        start: domain.createdAt,
        end: domain.lastCheckedAt,
      });

      if (hours >= 72) {
        await notifyFailureToTeam(domain, domainConfigurationError);

        const { error } = await resend.emails.send({
          from: FROM,
          to: [domain.account.email],
          subject: "We coudn't configure your domain.",
          react: DomainFailedConfigureEmailTemplate({ account: domain.account }),
        });

        if (!error) {
          await prisma.domains.update({
            where: {
              id: domain.id,
            },
            data: {
              status: "configured",
            },
          });
        } else {
          await notifyFailureToTeam(domain, error);
        }
      } else {
	      await prisma.domains.update({
            where: {
              id: domain.id,
            },
            data: {
              lastCheckedAt: new Date(),
            },
          });
      }
    }
  }

  return new Response(`done.`);
}

export const dynamic = "force-dynamic";

----------------------------------------

TITLE: Triggering Event Example (JSON)
DESCRIPTION: Shows an example of a JSON event that would trigger the function defined in the previous snippet.

LANGUAGE: json
CODE:
{
  "name": "app/user.created",
  "data": {
    "userId": "123",
    "name": "John Doe"
  }
}

----------------------------------------

TITLE: Sending Emails with Resend in TypeScript
DESCRIPTION: This function demonstrates how to send emails using the Resend service. It takes email details as parameters and uses the Resend API to send the email.

LANGUAGE: typescript
CODE:
function sendEmail({
  to,
  subject,
  body,
}: {
  to: string;
  subject: string;
  body: string;
}) {
  const resend = new Resend(env.RESEND_API_KEY);
  return resend.emails.send({
    from: env.FROM_EMAIL,
    ...(env.REPLY_TO_EMAIL && { replyTo: env.REPLY_TO_EMAIL }),
    to,
    subject,
    html: body,
  });
}

----------------------------------------

TITLE: Configuring Workflow Throttling in Inngest
DESCRIPTION: This YAML snippet demonstrates how to set up workflow throttling in Inngest. It specifies a throttle configuration that limits the workflow to run at most once per day, regardless of the number of incoming events.

LANGUAGE: yaml
CODE:
throttle_count: 1
throttle_period: 1d

----------------------------------------

TITLE: Executing Bulk Function Cancellation via Inngest REST API
DESCRIPTION: Example of using the POST /cancellations endpoint to cancel multiple function executions based on time range and conditional expressions. Requires authentication with a signing key and accepts parameters for app_id, function_id, time range, and optional matching expressions.

LANGUAGE: bash
CODE:
curl -X POST https://api.inngest.com/v1/cancellations \
  -H 'Authorization: Bearer signkey-prod-<YOUR-SIGNING-KEY>' \
  -H 'Content-Type: application/json' \
  --data '{
    "app_id": "acme-app",
    "function_id": "schedule-reminder",
    "started_after": "2024-01-21T18:23:12.000Z",
    "started_before": "2024-01-22T14:22:42.130Z",
    "if": "event.data.userId == \'user_o9235hf84hf\'"
  }'

----------------------------------------

TITLE: Creating a Tunnel with ngrok for Inngest Dev Server
DESCRIPTION: Uses ngrok to create a tunnel to the Inngest Dev Server running on port 8288. This allows bidirectional communication between the Dev Server and the Modal app.

LANGUAGE: sh
CODE:
# Tunnel to the Dev Server's port
ngrok http 8288

----------------------------------------

TITLE: Defining an Event-Triggered Function with Inngest in Next.js
DESCRIPTION: This code shows how to create an event-triggered function using Inngest in a Next.js application. It defines a 'Send Welcome Email' function that responds to 'user.signup' events.

LANGUAGE: javascript
CODE:
import { inngest } from "./client"
import { serve } from "inngest/next"
import { sendEmail } from "../../someExistingCode"

// Define your function
const welcomeEmail = inngest.createFunction(
  { name: "Send Welcome Email" },
  { event: "user.signup" },
  async ({ event }) => {
    if (!event.user?.email) {
      throw new Error("Event payload missing email")
    }

    await sendEmail({
      template: "welcome-email",
      to: event.user.email,
      data: {
        // The template will use this to show useful content to our new user
        signupReason: event.data?.signupReason,
      },
    });

    return `Successfully sent`
  }
)

// This is the same as above, you can pass as many functions are you want in the array:
// Grab your key here: https://app.inngest.com/secrets
export default serve("My App", [ welcomeEmail ]);

----------------------------------------

TITLE: Exporting Description in JavaScript
DESCRIPTION: This code snippet exports a description string, likely used for documentation or metadata purposes in an Inngest project.

LANGUAGE: javascript
CODE:
export const description = "Learn how ."

----------------------------------------

TITLE: Registering Inngest Endpoint
DESCRIPTION: Demonstrates how to register the Inngest endpoint with a curl command to enable function execution.

LANGUAGE: shell
CODE:
curl -X PUT https://yourappsdomain.com/api/inngest

----------------------------------------

TITLE: Defining TransformOutputResult Class in Python for Inngest SDK v0.4
DESCRIPTION: This code snippet defines the TransformOutputResult and TransformOutputStepInfo classes used in the transform_output middleware. These classes represent the structure of the result object passed to and modified by the middleware.

LANGUAGE: python
CODE:
class TransformOutputResult:
    # Mutations to these fields within middleware will be kept after running
    # middleware
    error: typing.Optional[Exception]
    output: object

    # Mutations to these fields within middleware will be discarded after
    # running middleware
    step: typing.Optional[TransformOutputStepInfo]

class TransformOutputStepInfo:
    id: str
    op: execution.Opcode
    opts: typing.Optional[dict[str, object]]

----------------------------------------

TITLE: Creating Function with Event Sending - V2
DESCRIPTION: Example of creating an Inngest function that sends a single event during user onboarding using the v2 API syntax.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  { name: "User onboarding" },
  { event: "app/user.signup" },
  async ({ event, step }) => {
    // Do something
    await step.sendEvent({
      name: "app/user.activated",
      data: { userId: event.data.userId },
    });
    // Do something else
  }
);

----------------------------------------

TITLE: Creating an Inngest Function Handler
DESCRIPTION: Demonstrates how to create a function that handles the account.created event. The function shows the event processing logic including sending a welcome email.

LANGUAGE: javascript
CODE:
import { Inngest } from "inngest"

const inngest = new Inngest({ name: "My App" })

export default inngest.createFunction(
  { name: "My fn" },
  { event: "account.created" },
  async ({ event }) => {
    // Do something like send a welcome email:
    await sendWelcomeEmail(event.data.email)
  }
)

----------------------------------------

TITLE: Configuring ESLint with Recommended Settings
DESCRIPTION: Basic ESLint configuration using the recommended Inngest plugin settings.

LANGUAGE: json
CODE:
{
  "plugins": ["@inngest"],
  "extends": ["plugin:@inngest/recommended"]
}

----------------------------------------

TITLE: Creating Next.js Root Layout
DESCRIPTION: Implementation of the required root layout component with metadata configuration

LANGUAGE: tsx
CODE:
import { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'My App',
  description: 'My App is a...',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}

----------------------------------------

TITLE: Importing Callout Component in TypeScript
DESCRIPTION: Import statement for the Callout component used in documentation MDX files

LANGUAGE: typescript
CODE:
import { Callout } from "src/shared/Docs/mdx";

export const description = 'Learn about how signing keys are used to secure communication between Inngest and your servers, how to rotate them, and how to set them in your SDK.'

----------------------------------------

TITLE: Single and Batch Event Sending Examples - V3
DESCRIPTION: Examples showing how to send both single events and arrays of events using the v3 API syntax, including user activation and invoice creation events.

LANGUAGE: typescript
CODE:
// Send a single event
await step.sendEvent("send-activation-event", {
  name: "app/user.activated",
  data: { userId: "01H08SEAXBJFJNGTTZ5TAWB0BD" },
});

// Send an array of events
await step.sendEvent("send-invoice-events", [
  {
    name: "app/invoice.created",
    data: { invoiceId: "645e9e024befa68763f5b500" },
  },
  {
    name: "app/invoice.created",
    data: { invoiceId: "645e9e08f29fb563c972b1f7" },
  },
]);

----------------------------------------

TITLE: Using step.ai.infer() for LLM Integration
DESCRIPTION: Demonstration of using step.ai.infer() to offload LLM requests to Inngest's infrastructure, avoiding serverless timeout issues and optimizing compute costs when working with OpenAI models.

LANGUAGE: javascript
CODE:
export default inngest.createFunction(
  {
    id: "generate-import-workflow",
    throttle: {
      limit: 5000,
      period: "1m",
    },
  },
  { event: "contacts.uploaded" },
  async ({ event, step }) => {
    const generatedStepsResult = await step.ai.infer(
      "generate-workflow-steps",
      {
        model: step.ai.models.openai({ model: "gpt-4" }),
        body: {
          messages: [
            {
              role: "user",
              content: prompt(event.data.contactsFileContent),
            },
          ],
        },
      }
    );

   // ...
 }
)

----------------------------------------

TITLE: Installing Inngest ESLint Plugin
DESCRIPTION: Command to install the Inngest ESLint plugin as a dev dependency using npm.

LANGUAGE: sh
CODE:
npm install -D @inngest/eslint-plugin

----------------------------------------

TITLE: Configuring Next.js
DESCRIPTION: Basic Next.js configuration file setup for SPA output and custom dist directory

LANGUAGE: jsx
CODE:
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'export', // Outputs a Single-Page Application (SPA)
  distDir: './dist', // Changes the output directory `./dist/`
}

export default nextConfig

----------------------------------------

TITLE: Implementing Per-Tenant Concurrency Controls in TypeScript with Inngest
DESCRIPTION: Demonstrates how to set up basic concurrency controls in Inngest using user-specific keys. The function limits concurrent execution to 1 job per unique user_slug.

LANGUAGE: typescript
CODE:
export const multiTenantConcurrency = inngest.createFunction(
  {
    id: 'multi-tenant-concurrency',
    concurrency: [
      {
        limit: 1,
        // Add a key to apply the concurrency limit to each unique user_slug
        key: 'event.data.user_slug',
      },
    ],
  },
  { event: 'demo/job.created' },
  async ({ event, step }) => {
    /* function logic omitted for example */
    return { status: 'success' };
  }
);

----------------------------------------

TITLE: Implementing Rate Limiting with Inngest Throttle
DESCRIPTION: Example of using Inngest's throttle feature to limit API calls to 10 requests per minute to comply with rate limits.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  {
    id: "ai-generate-summary",
    throttle: {
      limit: 10,
      period: "1m",
    }
  },
  { event: "ai/summary.requested" },
  async ({ event, step }) => {
    /* call OpenAI */
  }
);

----------------------------------------

TITLE: Sending User Signup Event in Go
DESCRIPTION: This code snippet demonstrates how to send a user signup event to Inngest using Go. It sets up an HTTP server with a /signup route that handles POST requests and sends an event to Inngest with user data.

LANGUAGE: go
CODE:
func main() {
    // Initialize your HTTP server
    mux := http.NewServeMux()

    // Handle signup route
    mux.HandleFunc("/signup", func(w http.ResponseWriter, r *http.Request) {
        if r.Method != http.MethodPost {
            http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
            return
        }

        // Parse request body - in a real app you'd validate the input
        var user struct {
            Email string `json:"email"`
        }
        if err := json.NewDecoder(r.Body).Decode(&user); err != nil {
            http.Error(w, err.Error(), http.StatusBadRequest)
            return
        }

        // Send event to Inngest
        _, err := inngestgo.Send(r.Context(), inngestgo.Event{
            Name: "app/user.signup",
            Data: map[string]interface{}{
                "user": map[string]interface{}{
                    "email": user.email,
                },
            },
        })
        if err != nil {
            http.Error(w, err.Error(), http.StatusInternalServerError)
            return
        }

        w.WriteHeader(http.StatusOK)
    })

    // Start the server
    log.Fatal(http.ListenAndServe(":8080", mux))
}

----------------------------------------

TITLE: Sending Validated Event with Inngest Client in Python
DESCRIPTION: Demonstrates how to send a validated event using the Inngest client. This snippet shows that Pydantic will raise an error if the data is invalid during instantiation.

LANGUAGE: python
CODE:
client.send(
    PostUpvotedEvent(
        data=PostUpvotedEventData(count="bad data"),
    ).to_event()
)

----------------------------------------

TITLE: Initializing Cobra Command for Event Browser in Go
DESCRIPTION: Defines a Cobra command to launch an event browser using Bubbletea. This sets up the basic structure for the CLI command.

LANGUAGE: go
CODE:
func NewCmdEventBrowser() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "init",
		Short:   "Scaffold a new function",
		Example: "inngest init",
		Run:     runBrowser,
	}
	return cmd
}

func runBrowser(cmd *cobra.Command, args []string) {
	// This is where we'll handle launching the event browser when invoked
}

----------------------------------------

TITLE: Configuring Vercel Function Max Duration in JSON
DESCRIPTION: This snippet shows how to increase the max duration of a specific Vercel Function to 60 seconds by updating the vercel.json configuration file.

LANGUAGE: json
CODE:
{
  "functions": {
    "app/api/mySlowFunction/route.ts": {
      "maxDuration": 60
    }
  }
}

----------------------------------------

TITLE: Combined Throttling and Concurrency Control
DESCRIPTION: Example showing how to combine both throttling and concurrency controls in a single Inngest function.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  {
    id: "ai-generate-summary",
    throttle: {
      limit: 10,
      period: "1m",
    }
    concurrency: {
      scope: "fn",
      key: "event.data.user_id",
      limit: 1,
    },
  },
  { event: "ai/summary.requested" },
  async ({ event, step }) => {
    /* call OpenAI */
  }
);

----------------------------------------

TITLE: Invoking Functions in Python with Inngest
DESCRIPTION: Shows how to create and invoke functions using Inngest in Python. It demonstrates the creation of a compute_square function and its invocation from a main_function.

LANGUAGE: python
CODE:
import inngest
from src.inngest.client import inngest_client

# Some function we'll call
@inngest_client.create_function(
    fn_id="compute-square",
    trigger=inngest.TriggerEvent(event="calculate/square")
)
async def compute_square(ctx: inngest.Context, step: inngest.Step):
    return {"result": ctx.event.data["number"] * ctx.event.data["number"]}  # Result typed as { result: number }

# In this function, we'll call compute_square
@inngest_client.create_function(
    fn_id="main-function",
    trigger=inngest.TriggerEvent(event="main/event")
)
async def main_function(ctx: inngest.Context, step: inngest.Step):
    square = await step.invoke(
        "compute-square-value",
        function=compute_square,
        data={"number": 4}  # input data is typed, requiring input if it's needed
    )

    return f"Square of 4 is {square['result']}."  # square.result is typed as number

----------------------------------------

TITLE: Configuring Page Layout
DESCRIPTION: Exports a configuration constant to hide the page sidebar in the documentation layout.

LANGUAGE: javascript
CODE:
export const hidePageSidebar = true;

----------------------------------------

TITLE: Initializing Inngest Function and Starting DevServer with Bash
DESCRIPTION: Commands to navigate to the project directory, create a new Inngest function with a custom event name, and start the Inngest DevServer.

LANGUAGE: bash
CODE:
cd my-project
inngest init --event my.event.name
inngest dev

----------------------------------------

TITLE: Rendering Resource Grid in JSX
DESCRIPTION: Creates a grid layout of resource cards displaying different Inngest development patterns and guides with associated metadata and links.

LANGUAGE: jsx
CODE:
<ResourceGrid cols={3}>

<Resource resource={{
  href: "/docs/guides/background-jobs",
  name: "Background jobs",
  icon: "paper-airplane",
  description: "Run long-running tasks in the background out of the critical path of a request.",
  pattern: 0,
}}/>

<Resource resource={{
  href: "/docs/guides/delayed-functions",
  name: "Enqueueing future jobs",
  icon: "chevron-double-right",
  description: "Schedule or delay functions to run in the future.",
  pattern: 1,
}}/>

<Resource resource={{
  href: "/docs/guides/step-parallelism",
  name: "Parallelize steps",
  icon: "parallel",
  description: "Run function steps in parallel to speed up execution.",
  pattern: 2,
}}/>

<Resource resource={{
  href: "/docs/guides/fan-out-jobs",
  name: "Fan-out",
  icon: "arrows-pointing-out",
  description: "Use events to trigger multiple functions at once.",
  pattern: 3,
}}/>

<Resource resource={{
  href: "/docs/guides/batching",
  name: "Batching events",
  icon: "square-3-stack-3d",
  description: "Improve efficiency with high-load systems by processing batches of events at once.",
  pattern: 2,
}}/>

<Resource resource={{
  href: "/docs/guides/scheduled-functions",
  name: "Scheduled functions",
  icon: "clock",
  description: "Run functions periodically on a cron schedule.",
  pattern: 1,
}}/>

<Resource resource={{
  href: "/docs/guides/invoking-functions-directly",
  name: "Invoking functions directly",
  icon: "rectangle-group",
  description: "Call one function from another across multiple apps.",
  pattern: 0
}}/>

</ResourceGrid>

----------------------------------------

TITLE: Chaining Multiple AI Model Calls
DESCRIPTION: Example of how to chain multiple AI model calls together using Inngest's step.invoke feature.

LANGUAGE: typescript
CODE:
const mainFunction = inngest.createFunction(
  { id: "main-function" },
  { event: "ai/summary.requested" },
  async ({ event, step }) => {
    const preprocessed_text = await step.invoke("preprocess-text-with-llama", {
      function: highLimitFunction,
      data: { string: event.data.text },
    })
    const preprocessed_text = await step.invoke("summarize-text-with-openai", {
      function: lowLimitFunction,
      data: { string: preprocessed_text },
    })
  }
)

----------------------------------------

TITLE: Sending Events in API Endpoint with Inngest
DESCRIPTION: Example showing how to send events from an API endpoint after completing critical-path operations. The code demonstrates creating a source and triggering an async event using Inngest client.

LANGUAGE: javascript
CODE:
import { Inngest } from "inngest";

app.post("/api/connectSource", async (req, res) => {
  // Your critical-path business logic for connecting the source for the user
  const source = createSource(req.body);

  // Send an event for what just happened with pertinent data to be handled async
  const inngest = new Inngest("API");
  await inngest.send({
    name: "api/source.connected",
    data: { sourceId: source.id, userId: req.user.id },
  });

  res.json({
    data: { sourceId: source.id },
    message: "Your source was connected successfully!"
  })
});

----------------------------------------

TITLE: Configuring Case Study Metadata in JavaScript
DESCRIPTION: JavaScript configuration exports defining metadata for a case study about Florian Works, including company details, page title, and image assets.

LANGUAGE: javascript
CODE:
export const title = 'Building a mission-critical workflow engine on top of Inngest'
export const companyName = 'Florian Works'
export const logo = '/assets/customers/florian-works-logotype.svg'
// export const quote = {
//   text: ``,
//   attribution: {
//     name: '',
//     title: '',
//   },
//   avatar: '',
// }
export const companyURL = 'https://www.florianworks.com'
export const companyDescription = 'Revolutionizing operational software for Fire Departments'
export const ogImage = '/assets/customers/case-study/og-image-florian-works.png'

----------------------------------------

TITLE: Configuring an Inngest Function with TypeScript
DESCRIPTION: This code snippet demonstrates how to create an Inngest function using the TypeScript SDK. It shows configuration for concurrency, debounce, and step function implementation for handling user creation events.

LANGUAGE: typescript
CODE:
inngest.createFunction(
  {
    id: "update-user", // Unique function ID
    concurrency: 15,   // Concurrency controls per function (https://innge.st/concurrency)
    debounce: {        // Debounce management (https://innge.st/debounce)
      period: "5s",
      timeout: "20s",
    }
  },
  { event: "clerk/user.created" },
  async ({ event, step }) => {
    const user = await step.run("Load user info", async () => {
      return await clerk.users.getUser(event.data.userId);
    });

    return await step.run("Update DB", async () => {
      const updates = userFields(user); // grab fields from clerk
      return await db.users.where({ clerk_id: user.id }).update(updates);
    });
  }
);

----------------------------------------

TITLE: Defining Basic Inngest Function in Python
DESCRIPTION: Example of creating a basic Inngest function that responds to user.login events and generates a greeting message.

LANGUAGE: python
CODE:
import inngest

def create_message(name: object) -> str:
    return f"Hello, {name}!"

client = inngest.Inngest(app_id="my-app")

@client.create_function(
    fn_id="greet",
    trigger=inngest.TriggerEvent(event="user.login"),
)
async def greet(
    ctx: inngest.Context,
    step: inngest.Step,
) -> str:
    message = await step.run(
        "create-message",
        create_message,
        ctx.event.data["name"],
    )

    return message

----------------------------------------

TITLE: Implementing Priority Queue for Enterprise Users
DESCRIPTION: Example showing how to prioritize enterprise users' AI requests using Inngest's priority feature.

LANGUAGE: typescript
CODE:
export default inngest.createFunction(
  {
    id: "unique-function-id",
    priority: {
      run: "event.data.account_type == 'enterprise' ? 120 : 0",
    },
  },
  { event: "ai/summary.requested" },
  async ({ event, step }) => {
    /** call LLM */
  }
)

----------------------------------------

TITLE: Defining Page Title for New Run Traces View in JavaScript
DESCRIPTION: This snippet sets the title for the new run traces view page using a JavaScript export statement. It defines a constant variable 'title' with the value "New Run Traces View".

LANGUAGE: JavaScript
CODE:
export const title = "New Run Traces View";

----------------------------------------

TITLE: Initializing Video Render Status - JavaScript/Inngest
DESCRIPTION: Creates an Inngest function to initialize video rendering by updating render status and managing user credits. Includes concurrency control and cancellation handling.

LANGUAGE: javascript
CODE:
export const renderVideo = inngest.createFunction(
  {
    name: 'Render video',
    id: 'render-video',
    cancelOn: [
      {
        event: 'banger/video.create',
        match: 'data.videoId'
      }
    ],
  },
  { event: 'banger/video.create' },
  async ({ event, step, attempt, logger }) => {
    const updatedVideo = await step.run('update-user-balance', async () => {
      await dbConnect()

      const render = await VideoModel.findOneAndUpdate(
        { _id: videoId },
        { $set: { renderProgress: 0, renderTime: 0, status: 'pending' } },
        { new: true }
      )
      .populate('user')
      .lean()

      invariant(video, 'no render found')

      // Simplified
      await UserModel.updateOne(
        { _id: video.user._id },
        { $inc: { unitsRemaining: -video.videoDuration } }
      )
      return video
    })
})

----------------------------------------

TITLE: Installing Inngest SDK using yarn
DESCRIPTION: Command to install the Inngest SDK using yarn package manager.

LANGUAGE: shell
CODE:
yarn add inngest

----------------------------------------

TITLE: Creating Chat Completion Function with Limited Output in Inngest
DESCRIPTION: This code creates an Inngest Function for chat completion that only returns the LLM completion text, limiting searchability.

LANGUAGE: ts
CODE:
export const chatCompletion = inngest.createFunction(
  {
    name: "Create chat completion",
    id: "create-chat-completion",
    throttle: {
      limit: 5,
      period: "60s"
    },
  },
  { event: "ai/chat.completion" },
  async ({ event, step }) => {
    const completion = await openai.chat.completions.create({
      messages: event.data.messages,
      model: "gpt-3.5-turbo",
    });
    const { choices } = completion
    const message = choices[0]!.message
    return message?.content;
  }
);

----------------------------------------

TITLE: Installing Inngest SDK using pnpm
DESCRIPTION: Command to install the Inngest SDK using pnpm package manager.

LANGUAGE: shell
CODE:
pnpm add inngest

----------------------------------------

TITLE: Implementing Post Likes Notifications With Batch Keys - TypeScript
DESCRIPTION: Improved implementation using the new Batch Keys feature. Events are automatically grouped by post_id using the batchEvents.key option, resulting in cleaner code and better handling of post-specific batches.

LANGUAGE: tsx
CODE:
export const sendPostLikesNotifications = inngest.createFunction(
  {
    id: "send-post-likes-notification",
    batchEvents: {
      maxSize: 100,
      timeout: "60s",
      key: "event.data.post_id",
    },
  },
  { event: "post.liked" },
  async ({ events }) => {
    await notifyPostLikesCount(events[0].data.post_id, events.length);
  },
);

----------------------------------------

TITLE: Importing Resource Components in React
DESCRIPTION: Imports custom Resource and ResourceGrid components from a shared documentation module to create a grid layout of development guides.

LANGUAGE: javascript
CODE:
import { ResourceGrid, Resource } from 'src/shared/Docs/Resources'

----------------------------------------

TITLE: Implementing Event Wait Conditions in JavaScript
DESCRIPTION: Demonstrates how to implement a wait condition for an onboarding completion event using Inngest's waitForEvent functionality. The code shows how to specify event type, timeout, and matching conditions.

LANGUAGE: javascript
CODE:
const onboardingCompleted = await step.waitForEvent(
      "wait-for-onboarding-completion",
      {
        event: "app/onboarding.completed",
        timeout: "3d",
        if: `data.userId == '${user.id}'`
      }
    );

----------------------------------------

TITLE: Recording Metrics with Tally in Go
DESCRIPTION: This snippet demonstrates how to use the tally library to record a counter metric for function run starts. It shows the use of tags and metric incrementation.

LANGUAGE: go
CODE:
metrics.Tagged(
	metrics.WithAccountID(id.AccountID.String()),
	metrics.WithEnvironmentID(id.EnvironmentID.String()),
	metrics.WithFunctionID(id.FunctionID.String()),
).Counter(timescale.CounterFunctionRunStartedTotal).Inc(1)

----------------------------------------

TITLE: Creating a PostgreSQL Table with Vector Embedding in SQL
DESCRIPTION: Defines a 'stories' table schema using pgvector extension to store Hacker News stories with vector embeddings for similarity searches.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS stories (
  id SERIAL PRIMARY KEY,
  title TEXT,
  content TEXT,
  date DATE,
  comments TEXT,
  interest_id INTEGER REFERENCES interests(id),
  embedding vector(1536)
);

-- Create an index on the embedding column for faster similarity searches
CREATE INDEX IF NOT EXISTS stories_embedding_idx ON stories
USING hnsw (embedding vector_cosine_ops);