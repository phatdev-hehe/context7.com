TITLE: Creating Custom Issue Number Transformer
DESCRIPTION: Implementation of a custom DataTransformerInterface that converts between Issue objects and issue numbers. This transformer includes validation and error handling.

LANGUAGE: php
CODE:
namespace App\Form\DataTransformer;

use App\Entity\Issue;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Form\DataTransformerInterface;
use Symfony\Component\Form\Exception\TransformationFailedException;

class IssueToNumberTransformer implements DataTransformerInterface
{
    public function __construct(
        private EntityManagerInterface $entityManager,
    ) {
    }

    public function transform($issue): string
    {
        if (null === $issue) {
            return '';
        }
        return $issue->getId();
    }

    public function reverseTransform($issueNumber): ?Issue
    {
        if (!$issueNumber) {
            return null;
        }

        $issue = $this->entityManager
            ->getRepository(Issue::class)
            ->find($issueNumber);

        if (null === $issue) {
            throw new TransformationFailedException(sprintf(
                'An issue with number "%s" does not exist!',
                $issueNumber
            ));
        }

        return $issue;
    }
}

----------------------------------------

TITLE: Configuring HTTP Cache in Symfony PHP
DESCRIPTION: PHP configuration to enable the Symfony HTTP cache (reverse proxy) in production environment.

LANGUAGE: php
CODE:
// config/packages/framework.php
use Symfony\Config\FrameworkConfig;

return static function (FrameworkConfig $framework, string $env): void {
    if ('prod' === $env) {
        $framework->httpCache()->enabled(true);
    }
};

----------------------------------------

TITLE: Creating Form Event Subscriber for Reusable Logic in Symfony
DESCRIPTION: Shows how to create a separate event subscriber class for better reusability of form event logic. This subscriber adds the 'name' field for new Product objects.

LANGUAGE: PHP
CODE:
// src/Form/EventListener/AddNameFieldSubscriber.php
namespace App\Form\EventListener;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;

class AddNameFieldSubscriber implements EventSubscriberInterface
{
    public static function getSubscribedEvents(): array
    {
        return [FormEvents::PRE_SET_DATA => 'preSetData'];
    }

    public function preSetData(FormEvent $event): void
    {
        $product = $event->getData();
        $form = $event->getForm();

        if (!$product || null === $product->getId()) {
            $form->add('name', TextType::class);
        }
    }
}

----------------------------------------

TITLE: Configuring Password Hasher in YAML
DESCRIPTION: YAML configuration for setting up password hashers in Symfony's security.yaml file

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
security:
    # ...

    password_hashers:
        # auto hasher with default options for the User class (and children)
        App\Entity\User: 'auto'

        # auto hasher with custom options for all PasswordAuthenticatedUserInterface instances
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: 'auto'
            cost:      15

----------------------------------------

TITLE: Form Event Subscriber Class in PHP
DESCRIPTION: Example of a form event subscriber class that listens to multiple events (PRE_SET_DATA and PRE_SUBMIT) to manage an email field's visibility.

LANGUAGE: php
CODE:
namespace App\Form\EventListener;\n\nuse Symfony\Component\EventDispatcher\EventSubscriberInterface;\nuse Symfony\Component\Form\Event\PreSetDataEvent;\nuse Symfony\Component\Form\Event\PreSubmitEvent;\nuse Symfony\Component\Form\Extension\Core\Type\EmailType;\nuse Symfony\Component\Form\FormEvents;\n\nclass AddEmailFieldListener implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            FormEvents::PRE_SET_DATA => 'onPreSetData',\n            FormEvents::PRE_SUBMIT   => 'onPreSubmit',\n        ];\n    }\n\n    public function onPreSetData(PreSetDataEvent $event): void\n    {\n        $user = $event->getData();\n        $form = $event->getForm();\n\n        if (true === $user->isShowEmail()) {\n            $form->add('email', EmailType::class);\n        }\n    }\n\n    public function onPreSubmit(PreSubmitEvent $event): void\n    {\n        $user = $event->getData();\n        $form = $event->getForm();\n\n        if (!$user) {\n            return;\n        }\n\n        if (isset($user['showEmail']) && $user['showEmail']) {\n            $form->add('email', EmailType::class);\n        } else {\n            unset($user['email']);\n            $event->setData($user);\n        }\n    }\n}

----------------------------------------

TITLE: Configuring Nginx for Symfony Application
DESCRIPTION: This snippet provides a minimum Nginx configuration to run a Symfony application. It includes server block setup, PHP-FPM integration, and handling of static assets and the front controller.

LANGUAGE: nginx
CODE:
# /etc/nginx/conf.d/example.com.conf
server {
    server_name example.com www.example.com;
    root /var/www/project/public;

    location / {
        # try to serve file directly, fallback to index.php
        try_files $uri /index.php$is_args$args;
    }

    # optionally disable falling back to PHP script for the asset directories;
    # nginx will return a 404 error when files are not found instead of passing the
    # request to Symfony (improves performance but Symfony's 404 page is not displayed)
    # location /bundles {
    #     try_files $uri =404;
    # }

    location ~ ^/index\.php(/|$) {
        # when using PHP-FPM as a unix socket
        fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;

        # when PHP-FPM is configured to use TCP
        # fastcgi_pass 127.0.0.1:9000;

        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;

        # optionally set the value of the environment variables used in the application
        # fastcgi_param APP_ENV prod;
        # fastcgi_param APP_SECRET <app-secret-id>;
        # fastcgi_param DATABASE_URL "mysql://db_user:db_pass@host:3306/db_name";

        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        # Caveat: When PHP-FPM is hosted on a different machine from nginx
        #         $realpath_root may not resolve as you expect! In this case try using
        #         $document_root instead.
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        # Prevents URIs that include the front controller. This will 404:
        # http://example.com/index.php/some-path
        # Remove the internal directive to allow URIs like this
        internal;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    error_log /var/log/nginx/project_error.log;
    access_log /var/log/nginx/project_access.log;
}

----------------------------------------

TITLE: Hashing Passwords in Symfony Controller
DESCRIPTION: Example of hashing and verifying passwords in a Symfony controller using UserPasswordHasherInterface

LANGUAGE: php
CODE:
// src/Controller/RegistrationController.php
namespace App\Controller;

// ...
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class UserController extends AbstractController
{
    public function registration(UserPasswordHasherInterface $passwordHasher): Response
    {
        // ... e.g. get the user data from a registration form
        $user = new User(...);
        $plaintextPassword = ...;

        // hash the password (based on the security.yaml config for the $user class)
        $hashedPassword = $passwordHasher->hashPassword(
            $user,
            $plaintextPassword
        );
        $user->setPassword($hashedPassword);

        // ...
    }

    public function delete(UserPasswordHasherInterface $passwordHasher, UserInterface $user): void
    {
        // ... e.g. get the password from a "confirm deletion" dialog
        $plaintextPassword = ...;

        if (!$passwordHasher->isPasswordValid($user, $plaintextPassword)) {
            throw new AccessDeniedHttpException();
        }
    }
}

----------------------------------------

TITLE: Basic Product Controller CRUD Operations
DESCRIPTION: Example controller showing basic CRUD operations with Doctrine entities.

LANGUAGE: php
CODE:
namespace App\Controller;

use App\Entity\Product;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

class ProductController extends AbstractController
{
    #[Route('/product', name: 'create_product')]
    public function createProduct(EntityManagerInterface $entityManager): Response
    {
        $product = new Product();
        $product->setName('Keyboard');
        $product->setPrice(1999);
        
        $entityManager->persist($product);
        $entityManager->flush();

        return new Response('Saved new product with id '.$product->getId());
    }
}

----------------------------------------

TITLE: Inline Pre-Submit Event Listener in PHP
DESCRIPTION: Demonstrates creating an inline form event listener that conditionally adds an email field based on a checkbox selection during form submission.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Event\PreSubmitEvent;\nuse Symfony\Component\Form\Extension\Core\Type\CheckboxType;\nuse Symfony\Component\Form\Extension\Core\Type\EmailType;\nuse Symfony\Component\Form\Extension\Core\Type\TextType;\nuse Symfony\Component\Form\FormEvents;\n\n$form = $formFactory->createBuilder()\n    ->add('username', TextType::class)\n    ->add('showEmail', CheckboxType::class)\n    ->addEventListener(FormEvents::PRE_SUBMIT, function (PreSubmitEvent $event): void {\n        $user = $event->getData();\n        $form = $event->getForm();\n\n        if (!$user) {\n            return;\n        }\n\n        if (isset($user['showEmail']) && $user['showEmail']) {\n            $form->add('email', EmailType::class);\n        } else {\n            unset($user['email']);\n            $event->setData($user);\n        }\n    })\n    ->getForm();

----------------------------------------

TITLE: Smoke Testing URLs with PHPUnit Data Providers
DESCRIPTION: A functional test using PHPUnit data providers to check that all application URLs load successfully. This test helps identify simple failures that could reject a software release.

LANGUAGE: php
CODE:
// tests/ApplicationAvailabilityFunctionalTest.php
namespace App\Tests;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class ApplicationAvailabilityFunctionalTest extends WebTestCase
{
    /**
     * @dataProvider urlProvider
     */
    public function testPageIsSuccessful($url): void
    {
        $client = self::createClient();
        $client->request('GET', $url);

        $this->assertResponseIsSuccessful();
    }

    public function urlProvider(): \Generator
    {
        yield ['/'];
        yield ['/posts'];
        yield ['/post/fixture-post-1'];
        yield ['/blog/category/fixture-category'];
        yield ['/archives'];
        // ...
    }
}

----------------------------------------

TITLE: Creating a Basic Symfony Controller
DESCRIPTION: Defines a simple controller class with a route that returns a 'Hello!' response. Demonstrates basic routing and controller structure in Symfony.

LANGUAGE: php
CODE:
// src/Controller/DefaultController.php
namespace App\Controller;

use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

class DefaultController
{
    #[Route('/', name: 'index')]
    public function index(): Response
    {
        return new Response('Hello!');
    }
}

----------------------------------------

TITLE: Implementing Constraint Validator in PHP
DESCRIPTION: Custom validator class that performs the actual validation logic for the ContainsAlphanumeric constraint. Includes input validation and error handling.

LANGUAGE: php
CODE:
namespace App\Validator;

use Symfony\Component\Validator\Constraint;
use Symfony\Component\Validator\ConstraintValidator;
use Symfony\Component\Validator\Exception\UnexpectedTypeException;
use Symfony\Component\Validator\Exception\UnexpectedValueException;

class ContainsAlphanumericValidator extends ConstraintValidator
{
    public function validate(mixed $value, Constraint $constraint): void
    {
        if (!$constraint instanceof ContainsAlphanumeric) {
            throw new UnexpectedTypeException($constraint, ContainsAlphanumeric::class);
        }

        if (null === $value || '' === $value) {
            return;
        }

        if (!is_string($value)) {
            throw new UnexpectedValueException($value, 'string');
        }

        if ('strict' === $constraint->mode) {
            // ...
        }

        if (preg_match('/^[a-zA-Z0-9]+$/', $value, $matches)) {
            return;
        }

        $this->context->buildViolation($constraint->message)
            ->setParameter('{{ string }}', $value)
            ->addViolation();
    }
}

----------------------------------------

TITLE: Handling Form Submission in Symfony Controller
DESCRIPTION: PHP code showing how to handle form submission, including validation and processing in a Symfony controller.

LANGUAGE: php
CODE:
public function new(Request $request): Response
{
    $form = $this->createFormBuilder()
        ->add('task', TextType::class)
        ->add('dueDate', DateType::class)
        ->getForm();

    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {
        $data = $form->getData();
        // ... perform some action, such as saving the data to the database
        return $this->redirectToRoute('task_success');
    }

    // ...
}

----------------------------------------

TITLE: Configuring Routes in PHP Format for Symfony
DESCRIPTION: Demonstrates route configuration using PHP. The route named 'blog_list' is added with the /blog path and associated with the list() method of BlogController.

LANGUAGE: php
CODE:
// config/routes.php
use App\Controller\BlogController;
use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;

return function (RoutingConfigurator $routes): void {
    $routes->add('blog_list', '/blog')
        ->controller([BlogController::class, 'list'])
    ;
};

----------------------------------------

TITLE: Validator Service Usage in Controller
DESCRIPTION: Example showing how to use the validator service in a Symfony controller

LANGUAGE: php
CODE:
use App\Entity\Author;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Validator\Validator\ValidatorInterface;

public function author(ValidatorInterface $validator): Response
{
    $author = new Author();
    $errors = $validator->validate($author);

    if (count($errors) > 0) {
        $errorsString = (string) $errors;
        return new Response($errorsString);
    }

    return new Response('The author is valid! Yes!');
}

----------------------------------------

TITLE: Symfony Class Implementation Example
DESCRIPTION: Comprehensive example demonstrating Symfony coding standards including namespacing, class structure, method organization, type declarations, and documentation practices

LANGUAGE: PHP
CODE:
/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Acme;

use Other\Qux;

/**
 * Coding standards demonstration.
 */
class FooBar
{
    public const SOME_CONST = 42;

    private string $fooBar;

    /**
     * @param $dummy some argument description
     */
    public function __construct(
        string $dummy,
        private Qux $qux,
    ) {
        $this->fooBar = $this->transformText($dummy);
    }

    /**
     * @deprecated
     */
    public function someDeprecatedMethod(): string
    {
        trigger_deprecation('symfony/package-name', '5.1', 'The %s() method is deprecated, use Acme\Baz::someMethod() instead.', __METHOD__);

        return Baz::someMethod();
    }

    /**
     * Transforms the input given as the first argument.
     *
     * @param $options an options collection to be used within the transformation
     *
     * @throws \RuntimeException when an invalid option is provided
     */
    private function transformText(bool|string $dummy, array $options = []): ?string
    {
        $defaultOptions = [
            'some_default' => 'values',
            'another_default' => 'more values',
        ];

        foreach ($options as $name => $value) {
            if (!array_key_exists($name, $defaultOptions)) {
                throw new \RuntimeException(sprintf('Unrecognized option "%s"', $name));
            }
        }

        $mergedOptions = array_merge($defaultOptions, $options);

        if (true === $dummy) {
            return 'something';
        }

        if (\is_string($dummy)) {
            if ('values' === $mergedOptions['some_default']) {
                return substr($dummy, 0, 5);
            }

            return ucwords($dummy);
        }

        return null;
    }

    /**
     * Performs some basic operations for a given value.
     */
    private function performOperations(mixed $value = null, bool $theSwitch = false): void
    {
        if (!$theSwitch) {
            return;
        }

        $this->qux->doFoo($value);
        $this->qux->doBar($value);
    }
}

----------------------------------------

TITLE: Implementing Interface Proxying with Attributes
DESCRIPTION: Demonstrates how to use the Autoconfigure attribute to set up interface proxying for lazy services in Symfony. This allows for specifying which interfaces should be implemented by the proxy object directly in the PHP class.

LANGUAGE: php
CODE:
namespace App\Twig;

use Symfony\Component\DependencyInjection\Attribute\Autoconfigure;
use Twig\Extension\ExtensionInterface;

#[Autoconfigure(lazy: ExtensionInterface::class)]
class AppExtension implements ExtensionInterface
{
    // ...
}

----------------------------------------

TITLE: Using PSR-6 Cache in PHP with Symfony Cache
DESCRIPTION: Illustrates how to use PSR-6 compliant cache operations with Symfony's FilesystemAdapter. It covers fetching cache items, checking for item existence, and saving items both immediately and deferred.

LANGUAGE: PHP
CODE:
use Symfony\Component\Cache\Adapter\FilesystemAdapter;

$cache = new FilesystemAdapter('app.cache');
$latestNews = $cache->getItem('latest_news');

$stocks = $cache->getItems(['AAPL', 'FB', 'GOOGL', 'MSFT']);

$hasBadges = $cache->hasItem('user_'.$userId.'_badges');

$userFriends = $cache->getItem('user_'.$userId.'_friends');
$userFriends->set($user->getFriends());
$isSaved = $cache->save($userFriends);

$isQueued = $cache->saveDeferred($userFriends);
// ...
$isQueued = $cache->saveDeferred($userPreferences);
// ...
$isQueued = $cache->saveDeferred($userRecentProducts);
// ...
$isSaved = $cache->commit();

----------------------------------------

TITLE: Basic String Validation in PHP using Symfony Validator
DESCRIPTION: Demonstrates how to validate a string's length and non-emptiness using Symfony Validator. It creates a validator instance, defines constraints, and processes validation violations.

LANGUAGE: php
CODE:
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Validation;

$validator = Validation::createValidator();
$violations = $validator->validate('Bernhard', [
    new Length(min: 10),
    new NotBlank(),
]);

if (0 !== count($violations)) {
    // there are errors, now you can show them
    foreach ($violations as $violation) {
        echo $violation->getMessage().'<br>';
    }
}

----------------------------------------

TITLE: Functional Testing of Doctrine Repository in PHP
DESCRIPTION: Shows how to perform functional testing of a Doctrine repository using Symfony's KernelTestCase. It demonstrates setting up the entity manager, executing a database query, and properly tearing down the test environment.

LANGUAGE: php
CODE:
// tests/Repository/ProductRepositoryTest.php
namespace App\Tests\Repository;

use App\Entity\Product;
use Doctrine\ORM\EntityManager;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class ProductRepositoryTest extends KernelTestCase
{
    private ?EntityManager $entityManager;

    protected function setUp(): void
    {
        $kernel = self::bootKernel();

        $this->entityManager = $kernel->getContainer()
            ->get('doctrine')
            ->getManager();
    }

    public function testSearchByName(): void
    {
        $product = $this->entityManager
            ->getRepository(Product::class)
            ->findOneBy(['name' => 'Priceless widget'])
        ;

        $this->assertSame(14.50, $product->getPrice());
    }

    protected function tearDown(): void
    {
        parent::tearDown();

        // doing this is recommended to avoid memory leaks
        $this->entityManager->close();
        $this->entityManager = null;
    }
}

----------------------------------------

TITLE: Implementing Custom User Loader in Symfony Entity Repository
DESCRIPTION: Example of implementing UserLoaderInterface in a Doctrine repository to provide custom user loading logic, allowing queries on multiple fields like email or username.

LANGUAGE: php
CODE:
// src/Repository/UserRepository.php
namespace App\Repository;

use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;

class UserRepository extends ServiceEntityRepository implements UserLoaderInterface
{
    // ...

    public function loadUserByIdentifier(string $usernameOrEmail): ?User
    {
        $entityManager = $this->getEntityManager();

        return $entityManager->createQuery(
                'SELECT u
                FROM App\Entity\User u
                WHERE u.username = :query
                OR u.email = :query'
            )
            ->setParameter('query', $usernameOrEmail)
            ->getOneOrNullResult();
    }
}

----------------------------------------

TITLE: Basic Security YAML Configuration
DESCRIPTION: Example of the basic security configuration in security.yaml including password hashers, providers, and firewalls

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    providers:
        users_in_memory: { memory: null }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory

----------------------------------------

TITLE: Validating Complex Array Structure in Symfony
DESCRIPTION: This snippet shows how to validate a complex array structure using Symfony's Collection constraint. It demonstrates creating a validator, defining a nested constraint structure, and validating the input array against these constraints with custom validation groups.

LANGUAGE: php
CODE:
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Validation;

$validator = Validation::createValidator();

$input = [
    'name' => [
        'first_name' => 'Fabien',
        'last_name' => 'Potencier',
    ],
    'email' => 'test@email.tld',
    'simple' => 'hello',
    'eye_color' => 3,
    'file' => null,
    'password' => 'test',
    'tags' => [
        [
            'slug' => 'symfony_doc',
            'label' => 'symfony doc',
        ],
    ],
];

$groups = new Assert\GroupSequence(['Default', 'custom']);

$constraint = new Assert\Collection([
    // the keys correspond to the keys in the input array
    'name' => new Assert\Collection([
        'first_name' => new Assert\Length(['min' => 101]),
        'last_name' => new Assert\Length(['min' => 1]),
    ]),
    'email' => new Assert\Email(),
    'simple' => new Assert\Length(['min' => 102]),
    'eye_color' => new Assert\Choice([3, 4]),
    'file' => new Assert\File(),
    'password' => new Assert\Length(['min' => 60]),
    'tags' => new Assert\Optional([
        new Assert\Type('array'),
        new Assert\Count(['min' => 1]),
        new Assert\All([
            new Assert\Collection([
                'slug' => [
                    new Assert\NotBlank(),
                    new Assert\Type(['type' => 'string']),
                ],
                'label' => [
                    new Assert\NotBlank(),
                ],
            ]),
            new CustomUniqueTagValidator(['groups' => 'custom']),
        ]),
    ]),
]);

$violations = $validator->validate($input, $constraint, $groups);

----------------------------------------

TITLE: Complete Framework Implementation
DESCRIPTION: Final version of the framework implementing HttpKernel component with controller and argument resolvers, routing, and error handling.

LANGUAGE: php
CODE:
require_once __DIR__.'/../vendor/autoload.php';

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel;
use Symfony\Component\Routing;

function render_template(Request $request): Response
{
    extract($request->attributes->all(), EXTR_SKIP);
    ob_start();
    include sprintf(__DIR__.'/../src/pages/%s.php', $_route);

    return new Response(ob_get_clean());
}

$request = Request::createFromGlobals();
$routes = include __DIR__.'/../src/app.php';

$context = new Routing\RequestContext();
$context->fromRequest($request);
$matcher = new Routing\Matcher\UrlMatcher($routes, $context);

$controllerResolver = new HttpKernel\Controller\ControllerResolver();
$argumentResolver = new HttpKernel\Controller\ArgumentResolver();

try {
    $request->attributes->add($matcher->match($request->getPathInfo()));

    $controller = $controllerResolver->getController($request);
    $arguments = $argumentResolver->getArguments($request, $controller);

    $response = call_user_func_array($controller, $arguments);
} catch (Routing\Exception\ResourceNotFoundException $exception) {
    $response = new Response('Not Found', 404);
} catch (Exception $exception) {
    $response = new Response('An error occurred', 500);
}

$response->send();

----------------------------------------

TITLE: Configuring Access Control in PHP
DESCRIPTION: Example of configuring access_control rules in Symfony's security.php file. Demonstrates how to set up various access control rules using PHP syntax.

LANGUAGE: php
CODE:
// config/packages/security.php
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Config\SecurityConfig;

return static function (ContainerBuilder $container, SecurityConfig $security): void {
    $container->setParameter('env(TRUSTED_IPS)', '10.0.0.1, 10.0.0.2');
    // ...

    $security->accessControl()
        ->path('^/admin')
        ->roles(['ROLE_USER_PORT'])
        ->ips(['127.0.0.1'])
        ->port(8080)
    ;
    $security->accessControl()
        ->path('^/admin')
        ->roles(['ROLE_USER_IP'])
        ->ips(['127.0.0.1'])
    ;
    $security->accessControl()
        ->path('^/admin')
        ->roles(['ROLE_USER_HOST'])
        ->host('symfony\.com$')
    ;
    $security->accessControl()
        ->path('^/admin')
        ->roles(['ROLE_USER_METHOD'])
        ->methods(['POST', 'PUT'])
    ;
    // ips can be comma-separated, which is especially useful when using env variables
    $security->accessControl()
        ->path('^/admin')
        ->roles(['ROLE_USER_IP'])
        ->ips([env('TRUSTED_IPS')])
    ;
    $security->accessControl()
        ->path('^/admin')
        ->roles(['ROLE_USER_IP'])
        ->ips(['127.0.0.1', '::1', env('TRUSTED_IPS')])
    ;

    // for custom matching needs, use a request matcher service
    $security->accessControl()
        ->roles(['ROLE_USER'])
        ->requestMatcher('App\Security\RequestMatcher\MyRequestMatcher')
    ;

    // require ROLE_ADMIN for 'admin' route. You can use the shortcut route('xxx') method,
    // instead of attributes(['_route' => 'xxx']) method
    $security->accessControl()
        ->roles(['ROLE_ADMIN'])
        ->attributes(['_route' => 'admin'])
    ;
    $security->accessControl()
        ->roles(['ROLE_ADMIN'])
        ->route('admin')
    ;
};

----------------------------------------

TITLE: Configuring and Using MessageBus in PHP
DESCRIPTION: Example of setting up a MessageBus with a HandleMessageMiddleware and dispatching a message.

LANGUAGE: PHP
CODE:
use App\Message\MyMessage;
use App\MessageHandler\MyMessageHandler;
use Symfony\Component\Messenger\Handler\HandlersLocator;
use Symfony\Component\Messenger\MessageBus;
use Symfony\Component\Messenger\Middleware\HandleMessageMiddleware;

$handler = new MyMessageHandler();

$bus = new MessageBus([
    new HandleMessageMiddleware(new HandlersLocator([
        MyMessage::class => [$handler],
    ])),
]);

$bus->dispatch(new MyMessage(/* ... */));

----------------------------------------

TITLE: Manually Validating CSRF Token in Controller
DESCRIPTION: Demonstrates how to manually validate a CSRF token in a Symfony controller action.

LANGUAGE: php
CODE:
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
// ...

public function delete(Request $request): Response
{
    $submittedToken = $request->getPayload()->get('token');

    // 'delete-item' is the same value used in the template to generate the token
    if ($this->isCsrfTokenValid('delete-item', $submittedToken)) {
        // ... do something, like deleting an object
    }
}

----------------------------------------

TITLE: Defining a Custom Shipping Type Based on ChoiceType in PHP
DESCRIPTION: This snippet demonstrates how to create a custom ShippingType form field by extending Symfony's ChoiceType. It sets default choices for shipping options.

LANGUAGE: PHP
CODE:
// src/Form/Type/ShippingType.php
namespace App\Form\Type;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\OptionsResolver\OptionsResolver;

class ShippingType extends AbstractType
{
    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'choices' => [
                'Standard Shipping' => 'standard',
                'Expedited Shipping' => 'expedited',
                'Priority Shipping' => 'priority',
            ],
        ]);
    }

    public function getParent(): string
    {
        return ChoiceType::class;
    }
}

----------------------------------------

TITLE: Testing with MockHttpClient in Symfony
DESCRIPTION: Example of how to use MockHttpClient for testing in Symfony applications.

LANGUAGE: php
CODE:
use Symfony\Component\HttpClient\MockHttpClient;
use Symfony\Component\HttpClient\Response\MockResponse;

$responses = [
    new MockResponse($body1, $info1),
    new MockResponse($body2, $info2),
];

$client = new MockHttpClient($responses);
// responses are returned in the same order as passed to MockHttpClient
$response1 = $client->request('...'); // returns $responses[0]
$response2 = $client->request('...'); // returns $responses[1]

----------------------------------------

TITLE: Implementing Custom CSRF Authenticator in PHP
DESCRIPTION: Example of adding CSRF protection to a custom authenticator using CsrfTokenBadge.

LANGUAGE: PHP
CODE:
// src/Service/LoginAuthenticator.php
namespace App\Service;

// ...
use Symfony\Component\Security\Http\Authenticator\AbstractAuthenticator;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\CsrfTokenBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Passport;

class LoginAuthenticator extends AbstractAuthenticator
{
    public function authenticate(Request $request): Passport
    {
        $password = $request->getPayload()->get('password');
        $username = $request->getPayload()->get('username');
        $csrfToken = $request->getPayload()->get('csrf_token');

        // ...

        return new Passport(
            new UserBadge($username),
            new PasswordCredentials($password),
            [new CsrfTokenBadge('login', $csrfToken)]
        );
    }
}

----------------------------------------

TITLE: Basic Symfony Autowiring Example with ROT13 Transformer
DESCRIPTION: Demonstrates basic autowiring by creating a ROT13 transformation service that gets automatically injected into a TwitterClient service.

LANGUAGE: php
CODE:
// src/Util/Rot13Transformer.php
namespace App\Util;

class Rot13Transformer
{
    public function transform(string $value): string
    {
        return str_rot13($value);
    }
}

LANGUAGE: php
CODE:
// src/Service/TwitterClient.php
namespace App\Service;

use App\Util\Rot13Transformer;

class TwitterClient
{
    public function __construct(
        private Rot13Transformer $transformer,
    ) {
    }

    public function tweet(User $user, string $key, string $status): void
    {
        $transformedStatus = $this->transformer->transform($status);
        // ... connect to Twitter and send the encoded status
    }
}

----------------------------------------

TITLE: Final Version of Front Controller with Template Rendering in PHP
DESCRIPTION: This snippet presents the final version of the front controller, incorporating template rendering and improved file structure for better security and organization.

LANGUAGE: PHP
CODE:
// example.com/web/front.php
require_once __DIR__.'/../vendor/autoload.php';

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

$request = Request::createFromGlobals();
$response = new Response();

$map = [
    '/hello' => __DIR__.'/../src/pages/hello.php',
    '/bye'   => __DIR__.'/../src/pages/bye.php',
];

$path = $request->getPathInfo();
if (isset($map[$path])) {
    ob_start();
    include $map[$path];
    $response->setContent(ob_get_clean());
} else {
    $response->setStatusCode(404);
    $response->setContent('Not Found');
}

$response->send();

----------------------------------------

TITLE: Implementing a Custom Voter in Symfony
DESCRIPTION: Demonstrates how to create a custom voter class that decides whether a user can view or edit a Post object based on complex logic.

LANGUAGE: php
CODE:
// src/Security/PostVoter.php
namespace App\Security;

use App\Entity\Post;
use App\Entity\User;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Authorization\Voter\Voter;

class PostVoter extends Voter
{
    const VIEW = 'view';
    const EDIT = 'edit';

    protected function supports(string $attribute, mixed $subject): bool
    {
        if (!in_array($attribute, [self::VIEW, self::EDIT])) {
            return false;
        }

        if (!$subject instanceof Post) {
            return false;
        }

        return true;
    }

    protected function voteOnAttribute(string $attribute, mixed $subject, TokenInterface $token): bool
    {
        $user = $token->getUser();

        if (!$user instanceof User) {
            return false;
        }

        /** @var Post $post */
        $post = $subject;

        return match($attribute) {
            self::VIEW => $this->canView($post, $user),
            self::EDIT => $this->canEdit($post, $user),
            default => throw new \LogicException('This code should not be reached!')
        };
    }

    private function canView(Post $post, User $user): bool
    {
        if ($this->canEdit($post, $user)) {
            return true;
        }

        return !$post->isPrivate();
    }

    private function canEdit(Post $post, User $user): bool
    {
        return $user === $post->getOwner();
    }
}

----------------------------------------

TITLE: Installing Symfony Messenger Component via Composer
DESCRIPTION: Command to install the Symfony Messenger component using Composer package manager.

LANGUAGE: shell
CODE:
$ composer require symfony/messenger

----------------------------------------

TITLE: Monolog Handler Configuration in YAML
DESCRIPTION: Configuration example for setting up multiple Monolog handlers in Symfony, including stream and syslog handlers with different log levels.

LANGUAGE: yaml
CODE:
monolog:
    handlers:
        file_log:
            type: stream
            path: "%kernel.logs_dir%/%kernel.environment%.log"
            level: debug

        syslog_handler:
            type: syslog
            level: error

----------------------------------------

TITLE: Creating Basic Symfony Controller
DESCRIPTION: Example of creating a basic Symfony controller with route configuration and response generation.

LANGUAGE: php
CODE:
namespace App\Controller;

use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

class LuckyController
{
    #[Route('/lucky/number/{max}', name: 'app_lucky_number')]
    public function number(int $max): Response
    {
        $number = random_int(0, $max);

        return new Response(
            '<html><body>Lucky number: '.$number.'</body></html>'
        );
    }
}

----------------------------------------

TITLE: Configuring Validation Groups in Form Class
DESCRIPTION: Demonstrates how to set validation groups within a form class's configureOptions method using OptionsResolver. Includes the necessary use statement for dependency injection.

LANGUAGE: php
CODE:
use Symfony\Component\OptionsResolver\OptionsResolver;

public function configureOptions(OptionsResolver $resolver): void
{
    $resolver->setDefaults([
        // ...
        'validation_groups' => ['registration'],
    ]);
}

----------------------------------------

TITLE: Dispatching Messages in Controller
DESCRIPTION: Example of dispatching messages from a controller using the message bus

LANGUAGE: php
CODE:
namespace App\Controller;

use App\Message\SmsNotification;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Messenger\MessageBusInterface;

class DefaultController extends AbstractController
{
    public function index(MessageBusInterface $bus): Response
    {
        // will cause the SmsNotificationHandler to be called
        $bus->dispatch(new SmsNotification('Look! I created a message!'));

        // ...
    }
}

----------------------------------------

TITLE: Defining a Command Bus with Service Locator
DESCRIPTION: Shows how to define a CommandBus class that uses a service locator to handle different command types.

LANGUAGE: PHP
CODE:
// src/CommandBus.php
namespace App;

// ...
class CommandBus
{
    /**
     * @param CommandHandler[] $handlerMap
     */
    public function __construct(
        private array $handlerMap,
    ) {
    }

    public function handle(Command $command): mixed
    {
        $commandClass = get_class($command);

        if (!$handler = $this->handlerMap[$commandClass] ?? null) {
            return;
        }

        return $handler->handle($command);
    }
}

// ...
$commandBus->handle(new FooCommand());

----------------------------------------

TITLE: Login Form Template
DESCRIPTION: Twig template for rendering a basic login form with CSRF protection

LANGUAGE: twig
CODE:
{# templates/login/index.html.twig #}
{% extends 'base.html.twig' %}

{% block body %}
    {% if error %}
        <div>{{ error.messageKey|trans(error.messageData, 'security') }}</div>
    {% endif %}

    <form action="{{ path('app_login') }}" method="post">
        <label for="username">Email:</label>
        <input type="text" id="username" name="_username" value="{{ last_username }}" required>

        <label for="password">Password:</label>
        <input type="password" id="password" name="_password" required>

        <input type="hidden" name="_csrf_token" value="{{ csrf_token('authenticate') }}">

        <button type="submit">login</button>
    </form>
{% endblock %}

----------------------------------------

TITLE: Creating an Event Listener in PHP
DESCRIPTION: Example of creating an event listener class that handles exception events. It demonstrates how to access the exception details and customize the response.

LANGUAGE: PHP
CODE:
// src/EventListener/ExceptionListener.php
namespace App\EventListener;

use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Event\ExceptionEvent;
use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;

class ExceptionListener
{
    public function __invoke(ExceptionEvent $event): void
    {
        // You get the exception object from the received event
        $exception = $event->getThrowable();
        $message = sprintf(
            'My Error says: %s with code: %s',
            $exception->getMessage(),
            $exception->getCode()
        );

        // Customize your response object to display the exception details
        $response = new Response();
        $response->setContent($message);
        // the exception message can contain unfiltered user input;
        // set the content-type to text to avoid XSS issues
        $response->headers->set('Content-Type', 'text/plain; charset=utf-8');

        // HttpExceptionInterface is a special type of exception that
        // holds status code and header details
        if ($exception instanceof HttpExceptionInterface) {
            $response->setStatusCode($exception->getStatusCode());
            $response->headers->replace($exception->getHeaders());
        } else {
            $response->setStatusCode(Response::HTTP_INTERNAL_SERVER_ERROR);
        }

        // sends the modified response object to the event
        $event->setResponse($response);
    }
}

----------------------------------------

TITLE: Asynchronous Process Execution with Output Handling
DESCRIPTION: Shows how to run a process asynchronously and handle its output in real-time using callbacks

LANGUAGE: PHP
CODE:
use Symfony\Component\Process\Process;

$process = new Process(['ls', '-lsa']);
$process->start();

foreach ($process as $type => $data) {
    if ($process::OUT === $type) {
        echo "\nRead from stdout: ".$data;
    } else { // $process::ERR === $type
        echo "\nRead from stderr: ".$data;
    }
}

----------------------------------------

TITLE: Creating a Validator Instance in PHP using Symfony Validator
DESCRIPTION: Demonstrates how to create a new Validator instance using the Validation class from Symfony Validator component.

LANGUAGE: php
CODE:
use Symfony\Component\Validator\Validation;

$validator = Validation::createValidator();

----------------------------------------

TITLE: Basic Form Event Listener Registration in PHP
DESCRIPTION: Shows how to register a basic event listener for FormEvents::PRE_SUBMIT. Demonstrates adding a listener to a form builder.

LANGUAGE: php
CODE:
use Symfony\Component\Form\FormEvent;\nuse Symfony\Component\Form\FormEvents;\n\n$listener = function (FormEvent $event): void {\n    // ...\n};\n\n$form = $formFactory->createBuilder()\n    // ... add form fields\n    ->addEventListener(FormEvents::PRE_SUBMIT, $listener);

----------------------------------------

TITLE: Creating Form Type Class
DESCRIPTION: Example of creating a dedicated form type class extending AbstractType

LANGUAGE: PHP
CODE:
// src/Form/Type/TaskType.php
namespace App\Form\Type;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;

class TaskType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('task', TextType::class)
            ->add('dueDate', DateType::class)
            ->add('save', SubmitType::class)
        ;
    }
}

----------------------------------------

TITLE: Defining Console Command Options in Symfony PHP
DESCRIPTION: This snippet shows how to define a Symfony Console command with various types of options, including those with and without required values. It demonstrates the use of InputDefinition and InputOption classes to configure the command's interface.

LANGUAGE: php
CODE:
namespace Acme\Console\Command;

use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

#[AsCommand(name: 'demo:args', description: 'Describe args behaviors')]
class DemoArgsCommand extends Command
{
    protected function configure(): void
    {
        $this
            ->setDefinition(
                new InputDefinition([
                    new InputOption('foo', 'f'),
                    new InputOption('bar', 'b', InputOption::VALUE_REQUIRED),
                    new InputOption('cat', 'c', InputOption::VALUE_OPTIONAL),
                ])
            );
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        // ...
    }
}

----------------------------------------

TITLE: Creating Entity Class with Doctrine
DESCRIPTION: Example of generating and defining a Product entity class with Doctrine ORM annotations.

LANGUAGE: php
CODE:
namespace App\Entity;

use App\Repository\ProductRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: ProductRepository::class)]
class Product
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $name = null;

    #[ORM\Column]
    private ?int $price = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    // ... getter and setter methods
}

----------------------------------------

TITLE: Using Symfony Request Object
DESCRIPTION: Shows how to use Symfony's Request class to access information from the HTTP request in an object-oriented manner.

LANGUAGE: PHP
CODE:
use Symfony\Component\HttpFoundation\Request;

$request = Request::createFromGlobals();

// the URI being requested (e.g. /about) minus any query parameters
$request->getPathInfo();

// retrieves $_GET and $_POST variables respectively
$request->query->get('id');
$request->getPayload()->get('category', 'default category');

// retrieves $_SERVER variables
$request->server->get('HTTP_HOST');

// retrieves an instance of UploadedFile identified by "attachment"
$request->files->get('attachment');

// retrieves a $_COOKIE value
$request->cookies->get('PHPSESSID');

// retrieves an HTTP request header, with normalized, lowercase keys
$request->headers->get('host');
$request->headers->get('content-type');

$request->getMethod();    // e.g. GET, POST, PUT, DELETE or HEAD
$request->getLanguages(); // an array of languages the client accepts

----------------------------------------

TITLE: Generating URLs in Symfony Controllers
DESCRIPTION: Demonstrates how to generate URLs for routes within a controller using the generateUrl() method. Shows examples of generating URLs with and without parameters.

LANGUAGE: php
CODE:
// src/Controller/BlogController.php
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;

class BlogController extends AbstractController
{
    #[Route('/blog', name: 'blog_list')]
    public function list(): Response
    {
        // generate a URL with no route arguments
        $signUpPage = $this->generateUrl('sign_up');

        // generate a URL with route arguments
        $userProfilePage = $this->generateUrl('user_profile', [
            'username' => $user->getUserIdentifier(),
        ]);

        // generated URLs are "absolute paths" by default. Pass a third optional
        // argument to generate different URLs (e.g. an "absolute URL")
        $signUpPage = $this->generateUrl('sign_up', [], UrlGeneratorInterface::ABSOLUTE_URL);

        // when a route is localized, Symfony uses by default the current request locale
        // pass a different '_locale' value if you want to set the locale explicitly
        $signUpPageInDutch = $this->generateUrl('sign_up', ['_locale' => 'nl']);

        // ...
    }
}

----------------------------------------

TITLE: User Entity Implementation
DESCRIPTION: Example User class implementing UserInterface and PasswordAuthenticatedUserInterface with basic user properties and methods

LANGUAGE: php
CODE:
// src/Entity/User.php
namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\UserInterface;

#[ORM\Entity]
class User implements UserInterface, PasswordAuthenticatedUserInterface
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private int $id;

    #[ORM\Column(type: 'string', length: 180, unique: true)]
    private ?string $email;

    #[ORM\Column(type: 'json')]
    private array $roles = [];

    #[ORM\Column(type: 'string')]
    private string $password;

    // ... getters and setters
}

----------------------------------------

TITLE: Registering a Symfony Console Command with Attributes
DESCRIPTION: Demonstrates how to register a console command using the AsCommand attribute, including setting the name, description, and aliases.

LANGUAGE: php
CODE:
// src/Command/CreateUserCommand.php
namespace App\Command;

use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;

#[AsCommand(
    name: 'app:create-user',
    description: 'Creates a new user.',
    hidden: false,
    aliases: ['app:add-user']
)]
class CreateUserCommand extends Command
{
    // ...
}

----------------------------------------

TITLE: Table of Contents Definition in RST
DESCRIPTION: ReStructuredText table of contents directive listing the chapters for building a custom PHP framework

LANGUAGE: rst
CODE:
.. toctree::

    introduction
    http_foundation
    front_controller
    routing
    templating
    http_kernel_controller_resolver
    separation_of_concerns
    unit_testing
    event_dispatcher
    http_kernel_httpkernelinterface
    http_kernel_httpkernel_class
    dependency_injection

----------------------------------------

TITLE: Managing Session Flash Messages
DESCRIPTION: Example demonstrating how to store and manage flash messages in the user session.

LANGUAGE: php
CODE:
public function update(Request $request): Response
{
    if ($form->isSubmitted() && $form->isValid()) {
        $this->addFlash(
            'notice',
            'Your changes were saved!'
        );
        return $this->redirectToRoute(/* ... */);
    }

    return $this->render(/* ... */);
}

----------------------------------------

TITLE: Implementing Custom API Key Authenticator in PHP
DESCRIPTION: Example of a custom API key authenticator that extends AbstractAuthenticator. It checks for an 'auth-token' header and authenticates the user based on the token.

LANGUAGE: PHP
CODE:
// src/Security/ApiKeyAuthenticator.php
namespace App\Security;

use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Exception\AuthenticationException;
use Symfony\Component\Security\Core\Exception\CustomUserMessageAuthenticationException;
use Symfony\Component\Security\Http\Authenticator\AbstractAuthenticator;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Passport;
use Symfony\Component\Security\Http\Authenticator\Passport\SelfValidatingPassport;

class ApiKeyAuthenticator extends AbstractAuthenticator
{
    public function supports(Request $request): ?bool
    {
        return $request->headers->has('auth-token');
    }

    public function authenticate(Request $request): Passport
    {
        $apiToken = $request->headers->get('auth-token');
        if (null === $apiToken) {
            throw new CustomUserMessageAuthenticationException('No API token provided');
        }

        $userIdentifier = /** ... */;

        return new SelfValidatingPassport(new UserBadge($userIdentifier));
    }

    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
    {
        return null;
    }

    public function onAuthenticationFailure(Request $request, AuthenticationException $exception): ?Response
    {
        $data = [
            'message' => strtr($exception->getMessageKey(), $exception->getMessageData())
        ];

        return new JsonResponse($data, Response::HTTP_UNAUTHORIZED);
    }
}

----------------------------------------

TITLE: Fetching Services in a Controller
DESCRIPTION: Demonstrates how to inject a service (LoggerInterface) into a controller method using type-hinting.

LANGUAGE: php
CODE:
// src/Controller/ProductController.php
namespace App\Controller;

use Psr\Log\LoggerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

class ProductController extends AbstractController
{
    #[Route('/products')]
    public function list(LoggerInterface $logger): Response
    {
        $logger->info('Look, I just used a service!');

        // ...
    }
}

----------------------------------------

TITLE: Adding Form Event Listener for Dynamic Field in Symfony
DESCRIPTION: Demonstrates how to add a form event listener to dynamically add or remove a field based on the underlying data. In this case, the 'name' field is only added for new Product objects.

LANGUAGE: PHP
CODE:
// src/Form/Type/ProductType.php
namespace App\Form\Type;

// ...
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;

class ProductType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder->add('price');

        $builder->addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event): void {
            $product = $event->getData();
            $form = $event->getForm();

            if (!$product || null === $product->getId()) {
                $form->add('name', TextType::class);
            }
        });
    }

    // ...
}

----------------------------------------

TITLE: Implementing Custom User Checker in PHP
DESCRIPTION: Implementation of UserCheckerInterface that performs pre and post-authentication checks for user validation. Includes checks for deleted and expired accounts, and role verification.

LANGUAGE: php
CODE:
namespace App\Security;

use App\Entity\User as AppUser;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\Security\Core\Exception\AccountExpiredException;
use Symfony\Component\Security\Core\Exception\CustomUserMessageAccountStatusException;
use Symfony\Component\Security\Core\User\UserCheckerInterface;
use Symfony\Component\Security\Core\User\UserInterface;

class UserChecker implements UserCheckerInterface
{
    public function checkPreAuth(UserInterface $user): void
    {
        if (!$user instanceof AppUser) {
            return;
        }

        if ($user->isDeleted()) {
            throw new CustomUserMessageAccountStatusException('Your user account no longer exists.');
        }
    }

    public function checkPostAuth(UserInterface $user, TokenInterface $token): void
    {
        if (!$user instanceof AppUser) {
            return;
        }

        if ($user->isExpired()) {
            throw new AccountExpiredException('...');
        }

        if (!\in_array('foo', $token->getRoleNames())) {
            throw new AccessDeniedException('...');
        }
    }
}

----------------------------------------

TITLE: Authenticating with LDAP Server using Symfony LDAP Component
DESCRIPTION: This PHP code shows how to authenticate with an LDAP server using the bind method of the Symfony LDAP component.

LANGUAGE: PHP
CODE:
use Symfony\Component\Ldap\Ldap;
// ...

$ldap->bind($dn, $password);

----------------------------------------

TITLE: Creating a Front Controller in PHP with Symfony HttpFoundation
DESCRIPTION: This snippet implements a front controller pattern, handling all requests through a single PHP script and routing them to appropriate handlers based on the URL path.

LANGUAGE: PHP
CODE:
// framework/front.php
require_once __DIR__.'/vendor/autoload.php';

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

$request = Request::createFromGlobals();
$response = new Response();

$map = [
    '/hello' => __DIR__.'/hello.php',
    '/bye'   => __DIR__.'/bye.php',
];

$path = $request->getPathInfo();
if (isset($map[$path])) {
    require $map[$path];
} else {
    $response->setStatusCode(404);
    $response->setContent('Not Found');
}

$response->send();

----------------------------------------

TITLE: Manually Generating CSRF Token in Twig Template
DESCRIPTION: Shows how to manually generate and include a CSRF token in a Twig template for a custom HTML form.

LANGUAGE: html+twig
CODE:
<form action="{{ url('admin_post_delete', { id: post.id }) }}" method="post">
    {# the argument of csrf_token() is an arbitrary string used to generate the token #}
    <input type="hidden" name="token" value="{{ csrf_token('delete-item') }}">

    <button type="submit">Delete item</button>
</form>

----------------------------------------

TITLE: Immutable-setter Injection in PHP
DESCRIPTION: Shows how to implement immutable setter injection that returns a new instance with the injected dependency. This approach is useful for optional dependencies while maintaining immutability.

LANGUAGE: php
CODE:
namespace App\Mail;\n\nuse Symfony\Component\Mailer\MailerInterface;\nuse Symfony\Contracts\Service\Attribute\Required;\n\nclass NewsletterManager\n{\n    private MailerInterface $mailer;\n\n    /**\n     * @return static\n     */\n    #[Required]\n    public function withMailer(MailerInterface $mailer): self\n    {\n        $new = clone $this;\n        $new->mailer = $mailer;\n\n        return $new;\n    }\n\n    // ...\n}

----------------------------------------

TITLE: Basic Workflow Configuration in YAML
DESCRIPTION: Example showing how to configure a basic blog publishing workflow with places and transitions in YAML format

LANGUAGE: yaml
CODE:
framework:
    workflows:
        blog_publishing:
            type: 'workflow'
            audit_trail:
                enabled: true
            marking_store:
                type: 'method'
                property: 'currentPlace'
            supports:
                - App\Entity\BlogPost
            initial_marking: draft
            places:
                - draft
                - reviewed
                - rejected
                - published
            transitions:
                to_review:
                    from: draft
                    to:   reviewed
                publish:
                    from: reviewed
                    to:   published
                reject:
                    from: reviewed
                    to:   rejected

----------------------------------------

TITLE: Retrieving Request Object in Symfony Service Class
DESCRIPTION: Demonstrates how to inject the RequestStack service and access the current Request object within a service class. The example shows dependency injection in the constructor and usage in a method.

LANGUAGE: php
CODE:
// src/Newsletter/NewsletterManager.php
namespace App\Newsletter;

use Symfony\Component\HttpFoundation\RequestStack;

class NewsletterManager
{
    public function __construct(
        protected RequestStack $requestStack,
    ) {
    }

    public function anyMethod(): void
    {
        $request = $this->requestStack->getCurrentRequest();
        // ... do something with the request
    }

    // ...
}

----------------------------------------

TITLE: Configuring Remember Me in security.yaml
DESCRIPTION: This snippet shows how to enable and configure the remember me functionality in the Symfony security configuration file.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
security:
    # ...

    firewalls:
        main:
            # ...
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                # by default, the feature is enabled by checking a
                # checkbox in the login form (see below), uncomment the
                # following line to always enable it.
                #always_remember_me: true

----------------------------------------

TITLE: Implementing Custom DateTime Denormalizer in PHP/Symfony
DESCRIPTION: Custom denormalizer class that handles legacy date formats by converting '0000-00-00' to null. Implements DenormalizerInterface and uses DenormalizerAwareTrait for handling other date formats.

LANGUAGE: php
CODE:
namespace App\Serializer;

use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;

final class ZeroDateTimeDenormalizer implements DenormalizerInterface, DenormalizerAwareInterface
{
    use DenormalizerAwareTrait;

    public function denormalize($data, string $type, ?string $format = null, array $context = []): mixed
    {
        if ('0000-00-00' === $data) {
            return null;
        }

        unset($context['zero_datetime_to_null']);

        return $this->denormalizer->denormalize($data, $type, $format, $context);
    }

    public function supportsDenormalization($data, string $type, ?string $format = null, array $context = []): bool
    {
        return true === ($context['zero_datetime_to_null'] ?? false)
            && is_a($type, \DateTimeInterface::class, true);
    }
}

----------------------------------------

TITLE: Implementing AuthenticationEntryPointInterface in PHP for Symfony
DESCRIPTION: This snippet shows how to create a custom AuthenticationEntryPoint class to handle unauthenticated access attempts. It redirects to a login page with a custom flash message.

LANGUAGE: php
CODE:
// src/Security/AuthenticationEntryPoint.php
namespace App\Security;

use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Security\Core\Exception\AuthenticationException;
use Symfony\Component\Security\Http\EntryPoint\AuthenticationEntryPointInterface;

class AuthenticationEntryPoint implements AuthenticationEntryPointInterface
{
    public function __construct(
        private UrlGeneratorInterface $urlGenerator,
    ) {
    }

    public function start(Request $request, ?AuthenticationException $authException = null): RedirectResponse
    {
        // add a custom flash message and redirect to the login page
        $request->getSession()->getFlashBag()->add('note', 'You have to login in order to access this page.');

        return new RedirectResponse($this->urlGenerator->generate('security_login'));
    }
}

----------------------------------------

TITLE: Form Event Subscriber Registration in PHP
DESCRIPTION: Shows how to register a form event subscriber to a form builder instance.

LANGUAGE: php
CODE:
use App\Form\EventListener\AddEmailFieldListener;\nuse Symfony\Component\Form\Extension\Core\Type\CheckboxType;\nuse Symfony\Component\Form\Extension\Core\Type\TextType;\n\n$form = $formFactory->createBuilder()\n    ->add('username', TextType::class)\n    ->add('showEmail', CheckboxType::class)\n    ->addEventSubscriber(new AddEmailFieldListener())\n    ->getForm();

----------------------------------------

TITLE: Creating a Response Object
DESCRIPTION: Demonstrates how to create a Response object with content, status code, and headers.

LANGUAGE: PHP
CODE:
use Symfony\Component\HttpFoundation\Response;

$response = new Response(
    'Content',
    Response::HTTP_OK,
    ['content-type' => 'text/html']
);

----------------------------------------

TITLE: Configuring Entity User Provider in Symfony Security
DESCRIPTION: Example configuration for the Entity User Provider, which loads users from a database using Doctrine. The configuration specifies the user entity class and the property to query by.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
security:
    providers:
        users:
            entity:
                class: 'App\Entity\User'
                property: 'email'
    # ...

LANGUAGE: xml
CODE:
<!-- config/packages/security.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<srv:container xmlns="http://symfony.com/schema/dic/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:srv="http://symfony.com/schema/dic/services"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <config>
        <provider name="users">
            <entity class="App\Entity\User" property="email"/>
        </provider>

        <!-- ... -->
    </config>
</srv:container>

LANGUAGE: php
CODE:
// config/packages/security.php
use App\Entity\User;
use Symfony\Config\SecurityConfig;

return static function (SecurityConfig $security): void {
    // ...

    $security->provider('app_user_provider')
        ->entity()
            ->class(User::class)
            ->property('email')
    ;
};

----------------------------------------

TITLE: Configuring a Symfony Console Command
DESCRIPTION: Shows how to configure a console command by setting a description, help message, and input options/arguments in the configure() method.

LANGUAGE: php
CODE:
// src/Command/CreateUserCommand.php

// ...
class CreateUserCommand extends Command
{
    // ...
    protected function configure(): void
    {
        $this
            ->setDescription('Creates a new user.')
            ->setHelp('This command allows you to create a user...')
        ;
    }
}

----------------------------------------

TITLE: Creating a Custom PostalAddressType from Scratch in PHP
DESCRIPTION: This snippet demonstrates creating a custom PostalAddressType form field from scratch, defining its structure and fields.

LANGUAGE: PHP
CODE:
// src/Form/Type/PostalAddressType.php
namespace App\Form\Type;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;

class PostalAddressType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('addressLine1', TextType::class, [
                'help' => 'Street address, P.O. box, company name',
            ])
            ->add('addressLine2', TextType::class, [
                'help' => 'Apartment, suite, unit, building, floor',
            ])
            ->add('city', TextType::class)
            ->add('state', TextType::class, [
                'label' => 'State',
            ])
            ->add('zipCode', TextType::class, [
                'label' => 'ZIP Code',
            ])
        ;
    }
}

----------------------------------------

TITLE: Handling Console Output in Symfony Commands
DESCRIPTION: Shows various methods for outputting information to the console in a Symfony command, including multi-line output and writing without line breaks.

LANGUAGE: php
CODE:
// ...
protected function execute(InputInterface $input, OutputInterface $output): int
{
    $output->writeln([
        'User Creator',
        '============',
        '',
    ]);

    $output->writeln($this->someMethod());

    $output->writeln('Whoa!');

    $output->write('You are about to ');
    $output->write('create a user.');

    return Command::SUCCESS;
}

----------------------------------------

TITLE: Using IsGranted Attribute with Expressions in Symfony Controller
DESCRIPTION: Demonstrates how to use Expression objects with the IsGranted attribute for complex authorization rules in a Symfony controller. Shows examples of combining roles and custom logic.

LANGUAGE: php
CODE:
// src/Controller/MyController.php
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\ExpressionLanguage\Expression;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Http\Attribute\IsGranted;

class MyController extends AbstractController
{
    #[IsGranted(new Expression('is_granted("ROLE_ADMIN") or is_granted("ROLE_MANAGER")'))]    
    public function show(): Response
    {
        // ...
    }

    #[IsGranted(new Expression(
        '"ROLE_ADMIN" in role_names or (is_authenticated() and user.isSuperAdmin())'
    ))]
    public function edit(): Response
    {
        // ...
    }
}

----------------------------------------

TITLE: Executing a Command from Within Another Command in Symfony Console
DESCRIPTION: This code snippet demonstrates how to execute the 'demo:greet' command from within the 'CreateUserCommand' class. It shows how to create an ArrayInput with command arguments, disable interactive mode, and run the command using the Application's doRun() method.

LANGUAGE: PHP
CODE:
// ...
use Symfony\Component\Console\Command;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class CreateUserCommand extends Command
{
    // ...

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $greetInput = new ArrayInput([
            // the command name is passed as first argument
            'command' => 'demo:greet',
            'name'    => 'Fabien',
            '--yell'  => true,
        ]);

        // disable interactive behavior for the greet command
        $greetInput->setInteractive(false);

        $returnCode = $this->getApplication()->doRun($greetInput, $output);

        // ...
    }
}

----------------------------------------

TITLE: Using Expression with Entity Subject in IsGranted Attribute
DESCRIPTION: Demonstrates using Expression objects with custom entity subjects in IsGranted attribute for complex authorization checks based on entity data.

LANGUAGE: php
CODE:
// src/Controller/MyController.php
namespace App\Controller;

use App\Entity\Post;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\ExpressionLanguage\Expression;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Http\Attribute\IsGranted;

class MyController extends AbstractController
{
    #[IsGranted(
        attribute: new Expression('user === subject'),
        subject: new Expression('args["post"].getAuthor()'),
    )]
    public function index(Post $post): Response
    {
        // ...
    }
}

----------------------------------------

TITLE: Basic Author Class with Validation
DESCRIPTION: Example of a basic PHP class with validation constraint using attributes

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\NotBlank]
    private string $name;
}

----------------------------------------

TITLE: Installing Symfony Validator Component
DESCRIPTION: Command to install the Symfony validator component using Composer

LANGUAGE: bash
CODE:
$ composer require symfony/validator

----------------------------------------

TITLE: Simple Front Controller Implementation
DESCRIPTION: Shows a basic implementation of a front controller pattern using Symfony's Request and Response objects.

LANGUAGE: PHP
CODE:
// index.php
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

$request = Request::createFromGlobals();
$path = $request->getPathInfo(); // the URI path being requested

if (in_array($path, ['', '/'])) {
    $response = new Response('Welcome to the homepage.');
} elseif ('/contact' === $path) {
    $response = new Response('Contact us');
} else {
    $response = new Response('Page not found.', Response::HTTP_NOT_FOUND);
}
$response->send();

----------------------------------------

TITLE: Symfony Service Configuration with Interfaces
DESCRIPTION: Shows how to use interfaces with autowiring and configure service aliases to inject specific implementations.

LANGUAGE: php
CODE:
// src/Util/TransformerInterface.php
namespace App\Util;

interface TransformerInterface
{
    public function transform(string $value): string;
}

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    App\Util\Rot13Transformer: ~
    App\Util\TransformerInterface: '@App\Util\Rot13Transformer'

----------------------------------------

TITLE: Setting Vary Header using PHP Attributes
DESCRIPTION: Example of using Symfony's Cache attribute to set response variation based on request headers in a controller method. Shows both single and multiple header configurations.

LANGUAGE: php
CODE:
use Symfony\Component\HttpKernel\Attribute\Cache;
// ...

#[Cache(vary: ['Accept-Encoding'])]
#[Cache(vary: ['Accept-Encoding', 'User-Agent'])]
public function index(): Response
{
    // ...
}

----------------------------------------

TITLE: Installing Symfony Form Component
DESCRIPTION: Command to install the Symfony form feature using Composer

LANGUAGE: terminal
CODE:
$ composer require symfony/form

----------------------------------------

TITLE: Creating a Custom Password Hasher
DESCRIPTION: Example of implementing a custom password hasher class in Symfony

LANGUAGE: php
CODE:
// src/Security/Hasher/CustomVerySecureHasher.php
namespace App\Security\Hasher;

use Symfony\Component\PasswordHasher\Exception\InvalidPasswordException;
use Symfony\Component\PasswordHasher\Hasher\CheckPasswordLengthTrait;
use Symfony\Component\PasswordHasher\PasswordHasherInterface;

class CustomVerySecureHasher implements PasswordHasherInterface
{
    use CheckPasswordLengthTrait;

    public function hash(string $plainPassword): string
    {
        if ($this->isPasswordTooLong($plainPassword)) {
            throw new InvalidPasswordException();
        }

        // ... hash the plain password in a secure way

        return $hashedPassword;
    }

    public function verify(string $hashedPassword, string $plainPassword): bool
    {
        if ('' === $plainPassword || $this->isPasswordTooLong($plainPassword)) {
            return false;
        }

        // ... validate if the password equals the user's password in a secure way

        return $passwordIsValid;
    }

    public function needsRehash(string $hashedPassword): bool
    {
        // Check if a password hash would benefit from rehashing
        return $needsRehash;
    }
}

----------------------------------------

TITLE: Service-Injected Controller in PHP
DESCRIPTION: Example of a controller using dependency injection instead of extending AbstractController

LANGUAGE: php
CODE:
// src/Controller/HelloController.php
namespace App\Controller;

use Symfony\Component\HttpFoundation\Response;
use Twig\Environment;

class HelloController
{
    public function __construct(
        private Environment $twig,
    ) {
    }

    public function index(string $name): Response
    {
        $content = $this->twig->render(
            'hello/index.html.twig',
            ['name' => $name]
        );

        return new Response($content);
    }
}

----------------------------------------

TITLE: Initializing Framework Class with Dependencies in PHP
DESCRIPTION: This snippet shows the Simplex\Framework class constructor with manually injected dependencies. It initializes various components like routing, event dispatcher, and listeners.

LANGUAGE: PHP
CODE:
namespace Simplex;

use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\HttpFoundation;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpKernel;
use Symfony\Component\Routing;

class Framework extends HttpKernel\HttpKernel
{
    public function __construct($routes)
    {
        $context = new Routing\RequestContext();
        $matcher = new Routing\Matcher\UrlMatcher($routes, $context);
        $requestStack = new RequestStack();

        $controllerResolver = new HttpKernel\Controller\ControllerResolver();
        $argumentResolver = new HttpKernel\Controller\ArgumentResolver();

        $dispatcher = new EventDispatcher();
        $dispatcher->addSubscriber(new HttpKernel\EventListener\ErrorListener(
            'Calendar\Controller\ErrorController::exception'
        ));
        $dispatcher->addSubscriber(new HttpKernel\EventListener\RouterListener($matcher, $requestStack));
        $dispatcher->addSubscriber(new HttpKernel\EventListener\ResponseListener('UTF-8'));
        $dispatcher->addSubscriber(new StringResponseListener());

        parent::__construct($dispatcher, $controllerResolver, $requestStack, $argumentResolver);
    }
}

----------------------------------------

TITLE: Checking Symfony Requirements using CLI
DESCRIPTION: Uses the Symfony CLI to verify if the local environment meets all requirements for running Symfony applications.

LANGUAGE: bash
CODE:
$ symfony check:requirements

----------------------------------------

TITLE: Creating a Simple Form in Symfony Controller
DESCRIPTION: PHP code demonstrating how to create a simple form with task and due date fields in a Symfony controller.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\TextType;

$form = $this->createFormBuilder()
    ->add('task', TextType::class)
    ->add('dueDate', DateType::class)
    ->getForm();

return $this->render('task/new.html.twig', [
    'form' => $form->createView(),
]);

----------------------------------------

TITLE: Accessing Session in Symfony Service
DESCRIPTION: Example of how to access the session in a Symfony service using dependency injection.

LANGUAGE: php
CODE:
use Symfony\Component\HttpFoundation\RequestStack;

class SomeService
{
    public function __construct(
        private RequestStack $requestStack,
    ) {
    }

    public function someMethod(): void
    {
        $session = $this->requestStack->getSession();

        // ...
    }
}

----------------------------------------

TITLE: Implementing Access Token Handler
DESCRIPTION: Implementation of an AccessTokenHandler class that validates tokens and returns user badges

LANGUAGE: php
CODE:
namespace App\Security;\n\nuse App\Repository\AccessTokenRepository;\nuse Symfony\Component\Security\Core\Exception\BadCredentialsException;\nuse Symfony\Component\Security\Http\AccessToken\AccessTokenHandlerInterface;\nuse Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge;\n\nclass AccessTokenHandler implements AccessTokenHandlerInterface\n{\n    public function __construct(\n        private AccessTokenRepository $repository\n    ) {\n    }\n\n    public function getUserBadgeFrom(string $accessToken): UserBadge\n    {\n        $accessToken = $this->repository->findOneByValue($accessToken);\n        if (null === $accessToken || !$accessToken->isValid()) {\n            throw new BadCredentialsException('Invalid credentials.');\n        }\n\n        return new UserBadge($accessToken->getUserId());\n    }\n}

----------------------------------------

TITLE: Using Cache Contracts in PHP with Symfony Cache
DESCRIPTION: Demonstrates how to use Symfony's CacheInterface for fetching, storing, and deleting cache items using a FilesystemAdapter. It shows the usage of the get() method with a callback for cache misses and the delete() method.

LANGUAGE: PHP
CODE:
use Symfony\Component\Cache\Adapter\FilesystemAdapter;
use Symfony\Contracts\Cache\ItemInterface;

$cache = new FilesystemAdapter();

// The callable will only be executed on a cache miss.
$value = $cache->get('my_cache_key', function (ItemInterface $item): string {
    $item->expiresAfter(3600);

    // ... do some HTTP request or heavy computations
    $computedValue = 'foobar';

    return $computedValue;
});

echo $value; // 'foobar'

// ... and to remove the cache key
$cache->delete('my_cache_key');

----------------------------------------

TITLE: Defining Routes with PHP Attributes in Symfony
DESCRIPTION: Shows how to define a route using PHP attributes on a controller method. The route matches the /blog URL and executes the list() method of BlogController.

LANGUAGE: php
CODE:
// src/Controller/BlogController.php
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

class BlogController extends AbstractController
{
    #[Route('/blog', name: 'blog_list')]
    public function list(): Response
    {
        // ...
    }
}

----------------------------------------

TITLE: Setting Cache Headers with PHP Attributes
DESCRIPTION: Example of using PHP attributes to set HTTP cache headers on a controller response.

LANGUAGE: php
CODE:
// src/Controller/BlogController.php
use Symfony\Component\HttpKernel\Attribute\Cache;
// ...

#[Cache(public: true, maxage: 3600, mustRevalidate: true)]
public function index(): Response
{
    return $this->render('blog/index.html.twig', []);
}

----------------------------------------

TITLE: Installing Symfony Mailer
DESCRIPTION: Command to install Symfony Mailer and Mime components using Composer

LANGUAGE: bash
CODE:
$ composer require symfony/mailer

----------------------------------------

TITLE: Using Twig Templates with Mailer
DESCRIPTION: Example of using Twig templates to create email content with Symfony Mailer

LANGUAGE: php
CODE:
use Symfony\Bridge\Twig\Mime\TemplatedEmail;

$email = (new TemplatedEmail())
    ->from('fabien@example.com')
    ->to(new Address('ryan@example.com'))
    ->subject('Thanks for signing up!')
    ->htmlTemplate('emails/signup.html.twig')
    ->context([
        'expiration_date' => new \DateTime('+7 days'),
        'username' => 'foo',
    ]);

----------------------------------------

TITLE: Using IsCsrfTokenValid Attribute for CSRF Validation
DESCRIPTION: Shows how to use the IsCsrfTokenValid attribute to automatically validate CSRF tokens in controller actions.

LANGUAGE: php
CODE:
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Http\Attribute\IsCsrfTokenValid;
// ...

#[IsCsrfTokenValid('delete-item', tokenKey: 'token')]
public function delete(): Response
{
    // ... do something, like deleting an object
}

----------------------------------------

TITLE: Using a Custom Service in a Controller
DESCRIPTION: Demonstrates how to inject and use a custom service (MessageGenerator) in a controller method.

LANGUAGE: php
CODE:
// src/Controller/ProductController.php
use App\Service\MessageGenerator;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

class ProductController extends AbstractController
{
    #[Route('/products/new')]
    public function new(MessageGenerator $messageGenerator): Response
    {
        // thanks to the type-hint, the container will instantiate a
        // new MessageGenerator and pass it to you!
        // ...

        $message = $messageGenerator->getHappyMessage();
        $this->addFlash('success', $message);
        // ...
    }
}

----------------------------------------

TITLE: Form Type Configuration for File Upload
DESCRIPTION: Form type class configuration for handling file uploads with validation constraints for PDF files.

LANGUAGE: php
CODE:
namespace App\Form;

use App\Entity\Product;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\File;

class ProductType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('brochure', FileType::class, [
                'label' => 'Brochure (PDF file)',
                'mapped' => false,
                'required' => false,
                'constraints' => [
                    new File(
                        maxSize: '1024k',
                        mimeTypes: [
                            'application/pdf',
                            'application/x-pdf',
                        ],
                        mimeTypesMessage: 'Please upload a valid PDF document',
                    )
                ],
            ]);
    }
}

----------------------------------------

TITLE: Testing Service-Based Form Types in Symfony
DESCRIPTION: Example of testing form types that are registered as services with dependencies. Shows how to mock dependencies and use PreloadedExtension for testing.

LANGUAGE: php
CODE:
// tests/Form/Type/TestedTypeTest.php
namespace App\Tests\Form\Type;

use App\Form\Type\TestedType;
use Doctrine\ORM\EntityManager;
use Symfony\Component\Form\PreloadedExtension;
use Symfony\Component\Form\Test\TypeTestCase;
// ...

class TestedTypeTest extends TypeTestCase
{
    private MockObject&EntityManager $entityManager;

    protected function setUp(): void
    {
        // mock any dependencies
        $this->entityManager = $this->createMock(EntityManager::class);

        parent::setUp();
    }

    protected function getExtensions(): array
    {
        // create a type instance with the mocked dependencies
        $type = new TestedType($this->entityManager);

        return [
            // register the type instances with the PreloadedExtension
            new PreloadedExtension([$type], []),
        ];
    }

    public function testSubmitValidData(): void
    {
        // ...

        // Instead of creating a new instance, the one created in
        // getExtensions() will be used.
        $form = $this->factory->create(TestedType::class, $formData);

        // ... your test
    }
}

----------------------------------------

TITLE: Request Mapping with MapRequestPayload
DESCRIPTION: Example showing how to automatically map request payload to DTO objects in controller actions using attributes.

LANGUAGE: php
CODE:
use App\Model\UserDto;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Attribute\MapRequestPayload;

public function dashboard(
    #[MapRequestPayload] UserDto $userDto
): Response
{
    // ...
}

----------------------------------------

TITLE: Using PSR-6 Caching with FilesystemAdapter in PHP
DESCRIPTION: Demonstrates how to use PSR-6 caching with the FilesystemAdapter, including creating, retrieving, updating, and deleting cache items.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\FilesystemAdapter;

$cache = new FilesystemAdapter();

// create a new item by trying to get it from the cache
$productsCount = $cache->getItem('stats.products_count');

// assign a value to the item and save it
$productsCount->set(4711);
$cache->save($productsCount);

// retrieve the cache item
$productsCount = $cache->getItem('stats.products_count');
if (!$productsCount->isHit()) {
    // ... item does not exist in the cache
}
// retrieve the value stored by the item
$total = $productsCount->get();

// remove the cache item
$cache->deleteItem('stats.products_count');

----------------------------------------

TITLE: Extended Controller Service Configuration in YAML
DESCRIPTION: Extended YAML configuration for controllers without autowiring/autoconfiguration, including service locator setup

LANGUAGE: yaml
CODE:
# config/services.yaml

abstract_controller.locator:
    class: Symfony\Component\DependencyInjection\ServiceLocator
    arguments:
        -
            router: '@router'
            request_stack: '@request_stack'
            http_kernel: '@http_kernel'
            session: '@session'
            parameter_bag: '@parameter_bag'

App\Controller\:
    resource: '../src/Controller/'
    tags: ['controller.service_arguments']
    calls:
        - [setContainer, ['@abstract_controller.locator']]

----------------------------------------

TITLE: Rendering a Twig Template in a Controller
DESCRIPTION: Example of how to render a Twig template from a Symfony controller, passing variables to the template.

LANGUAGE: php
CODE:
// src/Controller/UserController.php
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;

class UserController extends AbstractController
{
    // ...

    public function notifications(): Response
    {
        // get the user information and notifications somehow
        $userFirstName = '...';
        $userNotifications = ['...', '...'];

        // the template path is the relative file path from `templates/`
        return $this->render('user/notifications.html.twig', [
            // this array defines the variables passed to the template,
            // where the key is the variable name and the value is the variable value
            // (Twig recommends using snake_case variable names: 'foo_bar' instead of 'fooBar')
            'user_first_name' => $userFirstName,
            'notifications' => $userNotifications,
        ]);
    }
}

----------------------------------------

TITLE: Symfony Controller Implementation
DESCRIPTION: Final Symfony implementation showing the blog controller with proper MVC separation and Doctrine integration.

LANGUAGE: php
CODE:
// src/Controller/BlogController.php
namespace App\Controller;

use App\Entity\Post;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;

class BlogController extends AbstractController
{
    public function list(ManagerRegistry $doctrine)
    {
        $posts = $doctrine->getRepository(Post::class)->findAll();

        return $this->render('blog/list.html.twig', ['posts' => $posts]);
    }

    public function show(ManagerRegistry $doctrine, $id)
    {
        $post = $doctrine->getRepository(Post::class)->find($id);

        if (!$post) {
            throw $this->createNotFoundException();
        }

        return $this->render('blog/show.html.twig', ['post' => $post]);
    }
}

----------------------------------------

TITLE: Implementing SalaryCalculator Class in PHP
DESCRIPTION: Defines a SalaryCalculator class that uses Doctrine's EntityManager to retrieve an Employee entity and calculate total salary. It demonstrates dependency injection of EntityManager through the constructor.

LANGUAGE: php
CODE:
// src/Salary/SalaryCalculator.php
namespace App\Salary;

use App\Entity\Employee;
use Doctrine\ORM\EntityManager;

class SalaryCalculator
{
    public function __construct(
        private EntityManager $entityManager,
    ) {
    }

    public function calculateTotalSalary(int $id): int
    {
        $employeeRepository = $this->entityManager
            ->getRepository(Employee::class);
        $employee = $employeeRepository->find($id);

        return $employee->getSalary() + $employee->getBonus();
    }
}

----------------------------------------

TITLE: Implementing and Registering a Symfony Extension
DESCRIPTION: This snippet shows how to create and register a Symfony extension class that implements ExtensionInterface.

LANGUAGE: PHP
CODE:
use Symfony\Component\Config\FileLocator;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Extension\ExtensionInterface;
use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;

class AcmeDemoExtension implements ExtensionInterface
{
    public function load(array $configs, ContainerBuilder $container): void
    {
        $loader = new XmlFileLoader(
            $container,
            new FileLocator(__DIR__.'/../Resources/config')
        );
        $loader->load('services.xml');
    }

    public function getAlias(): string
    {
        return 'acme_demo';
    }

    // ...
}

----------------------------------------

TITLE: Implementing a Session Request Processor in PHP
DESCRIPTION: This code snippet defines a SessionRequestProcessor class that adds a unique token to each log record. It uses the RequestStack to access the session and generates a token based on the session ID and a unique identifier.

LANGUAGE: PHP
CODE:
// src/Logger/SessionRequestProcessor.php
namespace App\Logger;

use Monolog\LogRecord;
use Monolog\Processor\ProcessorInterface;
use Symfony\Component\HttpFoundation\Exception\SessionNotFoundException;
use Symfony\Component\HttpFoundation\RequestStack;

class SessionRequestProcessor implements ProcessorInterface
{
    public function __construct(
        private RequestStack $requestStack
    ) {
    }

    // method is called for each log record; optimize it to not hurt performance
    public function __invoke(LogRecord $record): LogRecord
    {
        try {
            $session = $this->requestStack->getSession();
        } catch (SessionNotFoundException $e) {
            return $record;
        }
        if (!$session->isStarted()) {
            return $record;
        }

        $sessionId = substr($session->getId(), 0, 8) ?: '????????';

        $record->extra['token'] = $sessionId.'-'.substr(uniqid('', true), -8);

        return $record;
    }
}

----------------------------------------

TITLE: Creating and Using a Lock with Symfony Lock Component
DESCRIPTION: Example of creating a lock factory, acquiring a lock, and releasing it using the Symfony Lock Component.

LANGUAGE: PHP
CODE:
use Symfony\Component\Lock\LockFactory;
use Symfony\Component\Lock\Store\SemaphoreStore;

$store = new SemaphoreStore();
$factory = new LockFactory($store);

$lock = $factory->createLock('pdf-creation');

if ($lock->acquire()) {
    // The resource "pdf-creation" is locked.
    // You can compute and generate the invoice safely here.

    $lock->release();
}

----------------------------------------

TITLE: Logging Messages in Symfony Controller
DESCRIPTION: Demonstrates how to inject and use the LoggerInterface in a Symfony controller to log messages at different levels with placeholders and context information.

LANGUAGE: php
CODE:
use Psr\Log\LoggerInterface;
// ...

public function index(LoggerInterface $logger): Response
{
    $logger->info('I just got the logger');
    $logger->error('An error occurred');

    // log messages can also contain placeholders, which are variable names
    // wrapped in braces whose values are passed as the second argument
    $logger->debug('User {userId} has logged in', [
        'userId' => $this->getUserId(),
    ]);

    $logger->critical('I left the oven on!', [
        // include extra "context" info in your logs
        'cause' => 'in_hurry',
    ]);

    // ...
}

----------------------------------------

TITLE: Creating Symfony Web Application with Composer
DESCRIPTION: Series of commands to create a new Symfony web application project using Composer, specifying the version and adding web application packages.

LANGUAGE: bash
CODE:
$ composer create-project symfony/skeleton:"7.3.x-dev" my_project_directory
$ cd my_project_directory
$ composer require webapp

----------------------------------------

TITLE: Creating Basic Alphanumeric Constraint Class in PHP
DESCRIPTION: Implementation of a custom constraint class that validates if a string contains only alphanumeric characters. Shows attribute configuration and constructor setup.

LANGUAGE: php
CODE:
namespace App\Validator;

use Symfony\Component\Validator\Constraint;

#[\Attribute]
class ContainsAlphanumeric extends Constraint
{
    public string $message = 'The string "{{ string }}" contains an illegal character: it can only contain letters or numbers.';
    public string $mode = 'strict';

    public function __construct(?string $mode = null, ?string $message = null, ?array $groups = null, $payload = null)
    {
        parent::__construct([], $groups, $payload);

        $this->mode = $mode ?? $this->mode;
        $this->message = $message ?? $this->message;
    }
}

----------------------------------------

TITLE: Creating a Custom User Provider in Symfony Security
DESCRIPTION: Example of implementing a custom user provider by creating a class that implements UserProviderInterface and PasswordUpgraderInterface. This is useful for loading users from custom sources like APIs or legacy databases.

LANGUAGE: php
CODE:
// src/Security/UserProvider.php
namespace App\Security;

use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\Exception\UserNotFoundException;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\PasswordUpgraderInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;

class UserProvider implements UserProviderInterface, PasswordUpgraderInterface
{
    public function loadUserByIdentifier(string $identifier): UserInterface
    {
        // Load a User object from your data source or throw UserNotFoundException.
        // The $identifier argument is whatever value is being returned by the
        // getUserIdentifier() method in your User class.
        throw new \Exception('TODO: fill in loadUserByIdentifier() inside '.__FILE__);
    }

    public function refreshUser(UserInterface $user): UserInterface
    {
        if (!$user instanceof User) {
            throw new UnsupportedUserException(sprintf('Invalid user class "%s".', get_class($user)));
        }

        // Return a User object after making sure its data is "fresh".
        // Or throw a UserNotFoundException if the user no longer exists.
        throw new \Exception('TODO: fill in refreshUser() inside '.__FILE__);
    }

    public function supportsClass(string $class): bool
    {
        return User::class === $class || is_subclass_of($class, User::class);
    }

    public function upgradePassword(PasswordAuthenticatedUserInterface $user, string $newHashedPassword): void
    {
        // TODO: when hashed passwords are in use, this method should:
        // 1. persist the new password in the user storage
        // 2. update the $user object with $user->setPassword($newHashedPassword);
    }
}

----------------------------------------

TITLE: Setting Required Options
DESCRIPTION: Shows how to define required options that must be set by the caller.

LANGUAGE: PHP
CODE:
public function configureOptions(OptionsResolver $resolver): void
{
    // ...
    $resolver->setRequired(['host', 'username', 'password']);
}

----------------------------------------

TITLE: Sending Emails Asynchronously with Messenger
DESCRIPTION: YAML configuration for routing email messages to an async transport using Symfony Messenger

LANGUAGE: yaml
CODE:
# config/packages/messenger.yaml
framework:
    messenger:
        transports:
            async: "%env(MESSENGER_TRANSPORT_DSN)%"

        routing:
            'Symfony\Component\Mailer\Messenger\SendEmailMessage': async

----------------------------------------

TITLE: Type Validation for Options
DESCRIPTION: Demonstrates how to add type validation for option values.

LANGUAGE: PHP
CODE:
public function configureOptions(OptionsResolver $resolver): void
{
    // ...
    $resolver->setAllowedTypes('host', 'string');
    $resolver->setAllowedTypes('port', ['null', 'int']);
    $resolver->setAllowedTypes('dates', 'DateTime[]');
}

----------------------------------------

TITLE: Creating and Handling a Form without Data Class in Symfony Controller
DESCRIPTION: Demonstrates how to create a form without a data class in a Symfony controller, handle the form submission, and retrieve the submitted data as an array.

LANGUAGE: php
CODE:
// src/Controller/ContactController.php
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
// ...

class ContactController extends AbstractController
{
    public function contact(Request $request): Response
    {
        $defaultData = ['message' => 'Type your message here'];
        $form = $this->createFormBuilder($defaultData)
            ->add('name', TextType::class)
            ->add('email', EmailType::class)
            ->add('message', TextareaType::class)
            ->add('send', SubmitType::class)
            ->getForm();

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // data is an array with "name", "email", and "message" keys
            $data = $form->getData();
        }

        // ... render the form
    }
}

----------------------------------------

TITLE: Creating Custom Data Collector
DESCRIPTION: Example implementation of a custom data collector for the Symfony Profiler

LANGUAGE: php
CODE:
namespace App\DataCollector;

use Symfony\Bundle\FrameworkBundle\DataCollector\AbstractDataCollector;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class RequestCollector extends AbstractDataCollector
{
    public function collect(Request $request, Response $response, ?\Throwable $exception = null): void
    {
        $this->data = [
            'method' => $request->getMethod(),
            'acceptable_content_types' => $request->getAcceptableContentTypes(),
        ];
    }
}

----------------------------------------

TITLE: Accessing Session in Standalone PHP
DESCRIPTION: Example of how to access the session in standalone PHP without the Symfony framework.

LANGUAGE: php
CODE:
use Symfony\Component\HttpFoundation\Session\Session;

$session = new Session();
$session->start();

----------------------------------------

TITLE: Installing Security Bundle in Symfony
DESCRIPTION: Terminal command to install the SecurityBundle package in a Symfony application

LANGUAGE: terminal
CODE:
$ composer require symfony/security-bundle

----------------------------------------

TITLE: Customizing Form Error Display with Severity in Twig
DESCRIPTION: This Twig template snippet shows how to customize the form_errors block to include the severity level as an additional HTML class for error messages.

LANGUAGE: twig
CODE:
{%- block form_errors -%}
    {%- if errors|length > 0 -%}
    <ul>
        {%- for error in errors -%}
            <li class="{{ error.cause.constraint.payload.severity ?? '' }}">{{ error.message }}</li>
        {%- endfor -%}
    </ul>
    {%- endif -%}
{%- endblock form_errors -%}

----------------------------------------

TITLE: Displaying Flash Messages in Twig Template
DESCRIPTION: Example of how to display flash messages in a Twig template.

LANGUAGE: html+twig
CODE:
{% for message in app.flashes('notice') %}
    <div class="flash-notice">
        {{ message }}
    </div>
{% endfor %}

----------------------------------------

TITLE: Application Test Example
DESCRIPTION: Shows how to write a functional test that simulates browser interactions and makes assertions about the response.

LANGUAGE: PHP
CODE:
namespace App\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class PostControllerTest extends WebTestCase
{
    public function testSomething(): void
    {
        $client = static::createClient();
        $crawler = $client->request('GET', '/');

        $this->assertResponseIsSuccessful();
        $this->assertSelectorTextContains('h1', 'Hello World');
    }

----------------------------------------

TITLE: Value Validation for Options
DESCRIPTION: Shows how to restrict option values to a predefined set of allowed values.

LANGUAGE: PHP
CODE:
public function configureOptions(OptionsResolver $resolver): void
{
    // ...
    $resolver->setDefault('transport', 'sendmail');
    $resolver->setAllowedValues('transport', ['sendmail', 'mail', 'smtp']);
}

----------------------------------------

TITLE: Making Concurrent Requests with Symfony HTTP Client
DESCRIPTION: Example of how to make concurrent requests using Symfony HTTP Client.

LANGUAGE: php
CODE:
$responses = [];
for ($i = 0; $i < 379; ++$i) {
    $uri = "https://http2.akamai.com/demo/tile-$i.png";
    $responses[] = $client->request('GET', $uri);
}

foreach ($responses as $response) {
    $content = $response->getContent();
    // ...
}

----------------------------------------

TITLE: Injecting Services into a Service
DESCRIPTION: Shows how to inject a service (LoggerInterface) into another service (MessageGenerator) using constructor injection.

LANGUAGE: php
CODE:
// src/Service/MessageGenerator.php
namespace App\Service;

use Psr\Log\LoggerInterface;

class MessageGenerator
{
    public function __construct(
        private LoggerInterface $logger,
    ) {
    }

    public function getHappyMessage(): string
    {
        $this->logger->info('About to find a happy message!');
        // ...
    }
}

----------------------------------------

TITLE: Form Processing Controller
DESCRIPTION: Controller showing form creation, handling and processing submitted data

LANGUAGE: PHP
CODE:
// src/Controller/TaskController.php
namespace App\Controller;

use App\Form\Type\TaskType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class TaskController extends AbstractController
{
    public function new(Request $request): Response
    {
        $task = new Task();
        $form = $this->createForm(TaskType::class, $task);

        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $task = $form->getData();
            // ... persist to database
            return $this->redirectToRoute('task_success');
        }

        return $this->render('task/new.html.twig', [
            'form' => $form,
        ]);
    }
}

----------------------------------------

TITLE: Basic Usage of Symfony HTTP Client
DESCRIPTION: Example of how to use the Symfony HTTP Client to make a GET request and handle the response.

LANGUAGE: php
CODE:
use Symfony\Contracts\HttpClient\HttpClientInterface;

class SymfonyDocs
{
    public function __construct(
        private HttpClientInterface $client,
    ) {
    }

    public function fetchGitHubInformation(): array
    {
        $response = $this->client->request(
            'GET',
            'https://api.github.com/repos/symfony/symfony-docs'
        );

        $statusCode = $response->getStatusCode();
        // $statusCode = 200
        $contentType = $response->getHeaders()['content-type'][0];
        // $contentType = 'application/json'
        $content = $response->getContent();
        // $content = '{"id":521583, "name":"symfony-docs", ...}'
        $content = $response->toArray();
        // $content = ['id' => 521583, 'name' => 'symfony-docs', ...]

        return $content;
    }
}

----------------------------------------

TITLE: Basic Cache Usage in Symfony PHP
DESCRIPTION: Demonstrates typical usage of the cache component in Symfony, including storing and retrieving values, and deleting cache keys.

LANGUAGE: php
CODE:
use Symfony\Contracts\Cache\ItemInterface;

// The callable will only be executed on a cache miss.
$value = $pool->get('my_cache_key', function (ItemInterface $item): string {
    $item->expiresAfter(3600);

    // ... do some HTTP request or heavy computations
    $computedValue = 'foobar';

    return $computedValue;
});

echo $value; // 'foobar'

// ... and to remove the cache key
$pool->delete('my_cache_key');

----------------------------------------

TITLE: Creating Email with High-Level API in PHP
DESCRIPTION: Demonstrates how to create an email message using the Email class with chainable methods to set sender, recipients, subject, and content.

LANGUAGE: php
CODE:
use Symfony\Component\Mime\Email;

$email = (new Email())
    ->from('fabien@symfony.com')
    ->to('foo@example.com')
    ->cc('bar@example.com')
    ->bcc('baz@example.com')
    ->replyTo('fabien@symfony.com')
    ->priority(Email::PRIORITY_HIGH)
    ->subject('Important Notification')
    ->text('Lorem ipsum...')
    ->html('<h1>Lorem ipsum</h1> <p>...</p>')
;

----------------------------------------

TITLE: Framework Unit Test Implementation
DESCRIPTION: Complete test class implementing various test cases for the Framework class including 404 handling, error handling, and controller response testing

LANGUAGE: php
CODE:
namespace Simplex\Tests;

use PHPUnit\Framework\TestCase;
use Simplex\Framework;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface;
use Symfony\Component\HttpKernel\Controller\ControllerResolverInterface;
use Symfony\Component\Routing;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;

class FrameworkTest extends TestCase
{
    public function testNotFoundHandling(): void
    {
        $framework = $this->getFrameworkForException(new ResourceNotFoundException());

        $response = $framework->handle(new Request());

        $this->assertEquals(404, $response->getStatusCode());
    }

    private function getFrameworkForException($exception): Framework
    {
        $matcher = $this->createMock(Routing\Matcher\UrlMatcherInterface::class);

        $matcher
            ->expects($this->once())
            ->method('match')
            ->will($this->throwException($exception))
        ;
        $matcher
            ->expects($this->once())
            ->method('getContext')
            ->will($this->returnValue($this->createMock(Routing\RequestContext::class)))
        ;
        $controllerResolver = $this->createMock(ControllerResolverInterface::class);
        $argumentResolver = $this->createMock(ArgumentResolverInterface::class);

        return new Framework($matcher, $controllerResolver, $argumentResolver);
    }

----------------------------------------

TITLE: Validating Email Address in Symfony Controller
DESCRIPTION: This snippet demonstrates how to validate a single email address using Symfony's Validator component within a controller method. It shows creating an Email constraint, setting a custom error message, and handling the validation result.

LANGUAGE: php
CODE:
public function addEmail(string $email, ValidatorInterface $validator): void
{
    $emailConstraint = new Assert\Email();
    // all constraint "options" can be set this way
    $emailConstraint->message = 'Invalid email address';

    // use the validator to validate the value
    $errors = $validator->validate(
        $email,
        $emailConstraint
    );

    if (!$errors->count()) {
        // ... this IS a valid email address, do something
    } else {
        // this is *not* a valid email address
        $errorMessage = $errors[0]->getMessage();

        // ... do something with the error
    }

    // ...
}

----------------------------------------

TITLE: Implementing Event Subscriber
DESCRIPTION: Creating an event subscriber class that implements EventSubscriberInterface to handle multiple events with different priorities.

LANGUAGE: PHP
CODE:
namespace Acme\Store\Event;

use Acme\Store\Event\OrderPlacedEvent;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\Event\ResponseEvent;
use Symfony\Component\HttpKernel\KernelEvents;

class StoreSubscriber implements EventSubscriberInterface
{
    public static function getSubscribedEvents(): array
    {
        return [
            KernelEvents::RESPONSE => [
                ['onKernelResponsePre', 10],
                ['onKernelResponsePost', -10],
            ],
            OrderPlacedEvent::class => 'onPlacedOrder',
        ];
    }

    public function onKernelResponsePre(ResponseEvent $event): void
    {
        // ...
    }

    public function onKernelResponsePost(ResponseEvent $event): void
    {
        // ...
    }

    public function onPlacedOrder(OrderPlacedEvent $event): void
    {
        $order = $event->getOrder();
        // ...
    }
}

----------------------------------------

TITLE: Configuring Multiple Authenticators with Separate Entry Points (PHP)
DESCRIPTION: This PHP configuration sets up separate firewalls for API and main website, each with its own authentication method and entry point. It also defines access control rules for different parts of the application.

LANGUAGE: php
CODE:
// config/packages/security.php
use App\Security\ApiTokenAuthenticator;
use App\Security\LoginFormAuthenticator;
use Symfony\Config\SecurityConfig;

return static function (SecurityConfig $security): void {
    $apiFirewall = $security->firewall('api');
    $apiFirewall
        ->pattern('^/api')
        ->customAuthenticators([ApiTokenAuthenticator::class])
    ;

    $mainFirewall = $security->firewall('main');
    $mainFirewall
        ->lazy(true)
        ->formLogin();

    $accessControl = $security->accessControl();
    $accessControl->path('^/login')->roles(['PUBLIC_ACCESS']);
    $accessControl->path('^/api')->roles(['ROLE_API_USER']);
    $accessControl->path('^/')->roles(['ROLE_USER']);
};

----------------------------------------

TITLE: Configuring Global Form Theme in YAML
DESCRIPTION: YAML configuration to set the default form theme for the entire application using bootstrap 5 horizontal layout

LANGUAGE: yaml
CODE:
# config/packages/twig.yaml
twig:
    form_themes: ['bootstrap_5_horizontal_layout.html.twig']
    # ...

----------------------------------------

TITLE: Implementing Dynamic Form Based on Submitted Data in Symfony
DESCRIPTION: Demonstrates how to customize a form based on submitted data. This example updates a 'position' field dynamically based on the selected sport in a sports meetup registration form.

LANGUAGE: PHP
CODE:
// src/Form/Type/SportMeetupType.php
namespace App\Form\Type;

use App\Entity\Position;
use App\Entity\Sport;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\FormInterface;
// ...

class SportMeetupType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('sport', EntityType::class, [
                'class' => Sport::class,
                'placeholder' => '',
            ])
        ;

        $formModifier = function (FormInterface $form, ?Sport $sport = null): void {
            $positions = null === $sport ? [] : $sport->getAvailablePositions();

            $form->add('position', EntityType::class, [
                'class' => Position::class,
                'placeholder' => '',
                'choices' => $positions,
            ]);
        };

        $builder->addEventListener(
            FormEvents::PRE_SET_DATA,
            function (FormEvent $event) use ($formModifier): void {
                $data = $event->getData();
                $formModifier($event->getForm(), $data->getSport());
            }
        );

        $builder->get('sport')->addEventListener(
            FormEvents::POST_SUBMIT,
            function (FormEvent $event) use ($formModifier): void {
                $sport = $event->getForm()->getData();
                $formModifier($event->getForm()->getParent(), $sport);
            }
        );

        $builder->setAction($options['action']);
    }

    // ...
}

----------------------------------------

TITLE: Basic Usage of Symfony Finder
DESCRIPTION: Demonstrates how to create a Finder instance and use it to find files in the current directory. It also shows how to check for results and iterate over found files.

LANGUAGE: php
CODE:
use Symfony\Component\Finder\Finder;

$finder = new Finder();
// find all files in the current directory
$finder->files()->in(__DIR__);

// check if there are any search results
if ($finder->hasResults()) {
    // ...
}

foreach ($finder as $file) {
    $absoluteFilePath = $file->getRealPath();
    $fileNameWithExtension = $file->getRelativePathname();

    // ...
}

----------------------------------------

TITLE: Creating a Basic Symfony Console Command
DESCRIPTION: Illustrates the structure of a basic console command class in Symfony, including the execute method and return status codes.

LANGUAGE: php
CODE:
// src/Command/CreateUserCommand.php
namespace App\Command;

use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

#[AsCommand(name: 'app:create-user')]
class CreateUserCommand extends Command
{
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        // ... put here the code to create the user

        return Command::SUCCESS;

        // or return Command::FAILURE;
        // or return Command::INVALID
    }
}

----------------------------------------

TITLE: Testing Symfony Console Commands
DESCRIPTION: Demonstrates how to test Symfony console commands using the CommandTester class, including setting up the test environment and asserting command output.

LANGUAGE: php
CODE:
// tests/Command/CreateUserCommandTest.php
namespace App\Tests\Command;

use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\Console\Tester\CommandTester;

class CreateUserCommandTest extends KernelTestCase
{
    public function testExecute(): void
    {
        self::bootKernel();
        $application = new Application(self::$kernel);

        $command = $application->find('app:create-user');
        $commandTester = new CommandTester($command);
        $commandTester->execute([
            'username' => 'Wouter',
        ]);

        $commandTester->assertCommandIsSuccessful();

        $output = $commandTester->getDisplay();
        $this->assertStringContainsString('Username: Wouter', $output);

        // ...
    }
}

----------------------------------------

TITLE: Option Normalization
DESCRIPTION: Demonstrates how to normalize option values before they are used.

LANGUAGE: PHP
CODE:
use Symfony\Component\OptionsResolver\Options;

// ...

public function configureOptions(OptionsResolver $resolver): void
{
    // ...
    $resolver->setNormalizer('host', function (Options $options, string $value): string {
        if (!str_starts_with($value, 'http://')) {
            $value = 'http://'.$value;
        }
        return $value;
    });
}

----------------------------------------

TITLE: Implementing AccessDeniedHandlerInterface in PHP for Symfony
DESCRIPTION: This code demonstrates how to create a custom AccessDeniedHandler class to handle access denied scenarios for authenticated users. It returns a custom response with a 403 status code.

LANGUAGE: php
CODE:
// src/Security/AccessDeniedHandler.php
namespace App\Security;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\Security\Http\Authorization\AccessDeniedHandlerInterface;

class AccessDeniedHandler implements AccessDeniedHandlerInterface
{
    public function handle(Request $request, AccessDeniedException $accessDeniedException): ?Response
    {
        // ...

        return new Response($content, 403);
    }
}

----------------------------------------

TITLE: Displaying Styled Content with SymfonyStyle
DESCRIPTION: Shows various methods for displaying styled content using SymfonyStyle, including text, lists, tables, and definition lists.

LANGUAGE: PHP
CODE:
$io->text('Lorem ipsum dolor sit amet');

$io->listing([
    'Element #1 Lorem ipsum dolor sit amet',
    'Element #2 Lorem ipsum dolor sit amet',
    'Element #3 Lorem ipsum dolor sit amet',
]);

$io->table(
    ['Header 1', 'Header 2'],
    [
        ['Cell 1-1', 'Cell 1-2'],
        ['Cell 2-1', 'Cell 2-2'],
        ['Cell 3-1', 'Cell 3-2'],
    ]
);

$io->definitionList(
    'This is a title',
    ['foo1' => 'bar1'],
    ['foo2' => 'bar2'],
    ['foo3' => 'bar3'],
    new TableSeparator(),
    'This is another title',
    ['foo4' => 'bar4']
);

----------------------------------------

TITLE: Using Impersonation in Twig Templates
DESCRIPTION: Example of how to check for active impersonation and display an exit link in Twig templates.

LANGUAGE: twig
CODE:
{% if is_granted('IS_IMPERSONATOR') %}
    <a href="{{ impersonation_exit_path(path('homepage')) }}">Exit impersonation</a>
{% endif %}

----------------------------------------

TITLE: Starting Symfony Local Web Server
DESCRIPTION: Launches the Symfony local web server for development purposes.

LANGUAGE: bash
CODE:
$ symfony server:start

----------------------------------------

TITLE: Creating a Custom Service
DESCRIPTION: Shows how to create a custom service class (MessageGenerator) that can be used in the application.

LANGUAGE: php
CODE:
// src/Service/MessageGenerator.php
namespace App\Service;

class MessageGenerator
{
    public function getHappyMessage(): string
    {
        $messages = [
            'You did it! You updated the system! Amazing!',
            'That was one of the coolest updates I\'ve seen all day!',
            'Great work! Keep going!',
        ];

        $index = array_rand($messages);

        return $messages[$index];
    }
}

----------------------------------------

TITLE: Basic Form Rendering with Twig
DESCRIPTION: Simple example of rendering an entire form using the form() Twig function. The form variable is passed from the controller.

LANGUAGE: twig
CODE:
{{ form(form) }}

----------------------------------------

TITLE: Creating a Workflow Definition in PHP
DESCRIPTION: This code snippet shows how to create a workflow definition for a blog post using the Symfony Workflow component. It defines places (states) and transitions between them.

LANGUAGE: php
CODE:
use Symfony\Component\Workflow\DefinitionBuilder;
use Symfony\Component\Workflow\MarkingStore\MethodMarkingStore;
use Symfony\Component\Workflow\Transition;
use Symfony\Component\Workflow\Workflow;

$definitionBuilder = new DefinitionBuilder();
$definition = $definitionBuilder->addPlaces(['draft', 'reviewed', 'rejected', 'published'])
    // Transitions are defined with a unique name, an origin place and a destination place
    ->addTransition(new Transition('to_review', 'draft', 'reviewed'))
    ->addTransition(new Transition('publish', 'reviewed', 'published'))
    ->addTransition(new Transition('reject', 'reviewed', 'rejected'))
    ->build()
;

$singleState = true; // true if the subject can be in only one state at a given time
$property = 'currentState'; // subject property name where the state is stored
$marking = new MethodMarkingStore($singleState, $property);
$workflow = new Workflow($definition, $marking);

----------------------------------------

TITLE: Configuring Default Styles in Symfony Console Commands
DESCRIPTION: Shows how to configure default styles for SymfonyStyle, such as allowing URL wrapping.

LANGUAGE: PHP
CODE:
use Symfony\Component\Console\Style\SymfonyStyle;

class GreetCommand extends Command
{
    // ...

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);
        $io->getOutputWrapper()->setAllowCutUrls(true);

        // ...
    }
}

----------------------------------------

TITLE: Installing CSRF Protection Package in Symfony
DESCRIPTION: Shows the command to install the CSRF protection package using Composer in a Symfony project.

LANGUAGE: shell
CODE:
$ composer require symfony/security-csrf

----------------------------------------

TITLE: Creating Entity Listener for User Changes
DESCRIPTION: Implementation of an entity listener that responds to post-update events for User entities. Shows both attribute-based configuration and service definition approaches.

LANGUAGE: php
CODE:
#[AsEntityListener(event: Events::postUpdate, method: 'postUpdate', entity: User::class)]
class UserChangedNotifier
{
    public function postUpdate(User $user, PostUpdateEventArgs $event): void
    {
        // ... do something to notify the changes
    }
}

----------------------------------------

TITLE: Adding Route Configuration in Controller
DESCRIPTION: Demonstrates how to add routing configuration using PHP attributes to map URL paths to controller actions.

LANGUAGE: php
CODE:
// src/Controller/LuckyController.php

// ...
use Symfony\Component\Routing\Attribute\Route;

class LuckyController
{
    #[Route('/lucky/number')]
    public function number(): Response
    {
        // this looks exactly the same
    }
}

----------------------------------------

TITLE: Class-Level Constraint Implementation in PHP
DESCRIPTION: Example of implementing a class-level constraint for validating payment receipts, demonstrating how to validate across multiple properties of an object.

LANGUAGE: php
CODE:
namespace App\Validator;

class ConfirmedPaymentReceiptValidator extends ConstraintValidator
{
    public function validate($receipt, Constraint $constraint): void
    {
        if (!$receipt instanceof PaymentReceipt) {
            throw new UnexpectedValueException($receipt, PaymentReceipt::class);
        }

        if (!$constraint instanceof ConfirmedPaymentReceipt) {
            throw new UnexpectedValueException($constraint, ConfirmedPaymentReceipt::class);
        }

        $receiptEmail = $receipt->getPayload()['email'] ?? null;
        $userEmail = $receipt->getUser()->getEmail();

        if ($userEmail !== $receiptEmail) {
            $this->context
                ->buildViolation($constraint->userDoesNotMatchMessage)
                ->atPath('user.email')
                ->addViolation();
        }
    }
}

----------------------------------------

TITLE: Accessing Session in Symfony Controller
DESCRIPTION: Example of how to access the session in a Symfony controller using type-hinting.

LANGUAGE: php
CODE:
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

public function index(Request $request): Response
{
    $session = $request->getSession();

    // ...
}

----------------------------------------

TITLE: Configuring HTTPS Enforcement in Symfony Security (XML)
DESCRIPTION: This XML configuration snippet shows how to enforce HTTPS on different URL patterns using Symfony's access_control rules. It includes examples for secure areas, login pages, and a catch-all rule for all other URLs.

LANGUAGE: xml
CODE:
<!-- config/packages/security.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<srv:container xmlns="http://symfony.com/schema/dic/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:srv="http://symfony.com/schema/dic/services"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/security
        https://symfony.com/schema/dic/security/security-1.0.xsd">

    <config>
        <!-- ... -->

        <rule path="^/secure" role="ROLE_ADMIN" requires-channel="https"/>
        <rule path="^/login" role="PUBLIC_ACCESS" requires-channel="https"/>
        <rule path="^/" role="PUBLIC_ACCESS" requires-channel="https"/>
    </config>
</srv:container>

----------------------------------------

TITLE: Advanced Autowiring with Multiple Implementations
DESCRIPTION: Demonstrates how to handle multiple implementations of the same interface using named autowiring aliases and the #[Target] attribute.

LANGUAGE: php
CODE:
// src/Service/MastodonClient.php
namespace App\Service;

use App\Util\TransformerInterface;
use Symfony\Component\DependencyInjection\Attribute\Target;

class MastodonClient
{
    public function __construct(
        #[Target('shoutyTransformer')]
        private TransformerInterface $transformer,
    ) {
    }
}

----------------------------------------

TITLE: Using Custom Service in Symfony Controller
DESCRIPTION: Demonstrates how to use a custom service (GreetingGenerator) in a Symfony controller along with dependency injection.

LANGUAGE: PHP
CODE:
// src/Controller/DefaultController.php
namespace App\Controller;

use App\GreetingGenerator;
use Psr\Log\LoggerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

class DefaultController extends AbstractController
{
    #[Route('/hello/{name}', methods: ['GET'])]
    public function index(string $name, LoggerInterface $logger, GreetingGenerator $generator): Response
    {
        $greeting = $generator->getRandomGreeting();

        $logger->info("Saying $greeting to $name!");

        // ...
    }
}

----------------------------------------

TITLE: Implementing Doctrine Lifecycle Listener
DESCRIPTION: Example of a lifecycle listener that updates a search index whenever any entity is persisted. Shows implementation using both attributes and service configuration.

LANGUAGE: php
CODE:
#[AsDoctrineListener(event: Events::postPersist, priority: 500, connection: 'default')]
class SearchIndexer
{
    public function postPersist(PostPersistEventArgs $args): void
    {
        $entity = $args->getObject();
        if (!$entity instanceof Product) {
            return;
        }
        $entityManager = $args->getObjectManager();
        // ... do something with the Product entity
    }
}

----------------------------------------

TITLE: Adapting PSR-6 Cache to PSR-16 in PHP
DESCRIPTION: This code demonstrates how to use Symfony's Psr16Cache to wrap a PSR-6 cache object and use it as a PSR-16 cache. It shows creating a PSR-6 FilesystemAdapter, wrapping it with Psr16Cache, and using it with a class expecting a PSR-16 cache.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\FilesystemAdapter;
use Symfony\Component\Cache\Psr16Cache;

// the PSR-6 cache object that you want to use
$psr6Cache = new FilesystemAdapter();

// a PSR-16 cache that uses your cache internally!
$psr16Cache = new Psr16Cache($psr6Cache);

// now use this wherever you want
$githubApiClient = new GitHubApiClient($psr16Cache);

----------------------------------------

TITLE: Creating and Using a Lock in PHP
DESCRIPTION: Demonstrates how to create a lock using a lock factory and acquire it to protect a critical section of code.

LANGUAGE: php
CODE:
$lock = $lockFactory->createLock('pdf-creation');
if (!$lock->acquire()) {
    return;
}

// critical section of code
$service->method();

$lock->release();

----------------------------------------

TITLE: Creating ChainAdapter with ApcuAdapter and FilesystemAdapter in PHP
DESCRIPTION: Demonstrates how to create a ChainAdapter instance using ApcuAdapter (fastest) and FilesystemAdapter (slowest) storage engines. This combination provides a layered cache with different performance characteristics.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\ApcuAdapter;
use Symfony\Component\Cache\Adapter\ChainAdapter;
use Symfony\Component\Cache\Adapter\FilesystemAdapter;

$cache = new ChainAdapter([
    new ApcuAdapter(),
    new FilesystemAdapter(),
]);

----------------------------------------

TITLE: Configuring Default Target Path in YAML
DESCRIPTION: Sets up the default target path for redirect after successful login when no previous URL exists in session.

LANGUAGE: yaml
CODE:
security:
    firewalls:
        main:
            form_login:
                default_target_path: after_login_route_name

----------------------------------------

TITLE: Configuring Multiple Email Transports
DESCRIPTION: YAML configuration for setting up multiple email transports

LANGUAGE: yaml
CODE:
# config/packages/mailer.yaml
framework:
    mailer:
        transports:
            main: '%env(MAILER_DSN)%'
            alternative: '%env(MAILER_DSN_IMPORTANT)%'

----------------------------------------

TITLE: Implementing HttpKernelInterface in Framework Class
DESCRIPTION: This code snippet demonstrates how to implement the HttpKernelInterface in a custom Framework class. It shows the basic structure of the handle method that needs to be implemented.

LANGUAGE: php
CODE:
// example.com/src/Framework.php

// ...
use Symfony\Component\HttpKernel\HttpKernelInterface;

class Framework implements HttpKernelInterface
{
    // ...

    public function handle(
        Request $request,
        int $type = HttpKernelInterface::MAIN_REQUEST,
        bool $catch = true
    ) {
        // ...
    }
}

----------------------------------------

TITLE: Registering Service in Container Builder
DESCRIPTION: Example of registering a service in the Symfony DependencyInjection container using ContainerBuilder.

LANGUAGE: php
CODE:
use Symfony\Component\DependencyInjection\ContainerBuilder;

$container = new ContainerBuilder();
$container->register('mailer', 'Mailer');

----------------------------------------

TITLE: Writing to Error Output in Symfony Console Commands
DESCRIPTION: Demonstrates how to write to the error output stream in Symfony console commands using SymfonyStyle.

LANGUAGE: PHP
CODE:
$io = new SymfonyStyle($input, $output);

// Write to the standard output
$io->write('Reusable information');

// Write to the error output
$io->getErrorStyle()->warning('Debugging information or errors');

----------------------------------------

TITLE: Handling Form Submission with Multiple Buttons in Symfony Controller
DESCRIPTION: This snippet demonstrates how to handle form submission in a Symfony controller when there are multiple submit buttons. It uses the isClicked() method to determine which button was pressed and sets the next action accordingly.

LANGUAGE: php
CODE:
if ($form->isSubmitted() && $form->isValid()) {
    // ... perform some action, such as saving the task to the database

    $nextAction = $form->get('saveAndAdd')->isClicked()
        ? 'task_new'
        : 'task_success';

    return $this->redirectToRoute($nextAction);
}

----------------------------------------

TITLE: Setting Secrets in Symfony
DESCRIPTION: Commands to set a secret (DATABASE_PASSWORD) for both dev and prod environments using the secrets:set command.

LANGUAGE: bash
CODE:
$ php bin/console secrets:set DATABASE_PASSWORD

$ APP_RUNTIME_ENV=prod php bin/console secrets:set DATABASE_PASSWORD

----------------------------------------

TITLE: Configuring CSRF Protection in Symfony (YAML)
DESCRIPTION: Demonstrates how to enable CSRF protection in the Symfony framework configuration using YAML format.

LANGUAGE: yaml
CODE:
# config/packages/framework.yaml
framework:
    # ...
    csrf_protection: ~

----------------------------------------

TITLE: Configuring Cache Pools in Symfony YAML
DESCRIPTION: Shows how to configure custom cache pools in Symfony using YAML configuration, including setting adapters and providers.

LANGUAGE: yaml
CODE:
framework:
    cache:
        default_memcached_provider: 'memcached://localhost'

        pools:
            # creates a "custom_thing.cache" service
            # autowireable via "CacheInterface $customThingCache"
            # uses the "app" cache configuration
            custom_thing.cache:
                adapter: cache.app

            # creates a "my_cache_pool" service
            # autowireable via "CacheInterface $myCachePool"
            my_cache_pool:
                adapter: cache.adapter.filesystem

            # uses the default_memcached_provider from above
            acme.cache:
                adapter: cache.adapter.memcached

            # control adapter's configuration
            foobar.cache:
                adapter: cache.adapter.memcached
                provider: 'memcached://user:password@example.com'

            # uses the "foobar.cache" pool as its backend but controls
            # the lifetime and (like all pools) has a separate cache namespace
            short_cache:
                adapter: foobar.cache
                default_lifetime: 60

----------------------------------------

TITLE: Implementing Custom Transport Interface in PHP
DESCRIPTION: Complete implementation of TransportInterface showing how to handle message queuing, acknowledgment, rejection, and sending in a database context.

LANGUAGE: php
CODE:
class YourTransport implements TransportInterface
{
    private SerializerInterface $serializer;

    public function __construct(
        private FakeDatabase $db,
        ?SerializerInterface $serializer = null,
    ) {
        $this->serializer = $serializer ?? new PhpSerializer();
    }

    public function get(): iterable
    {
        $row = $this->db->createQuery(
                'SELECT *
                FROM my_queue
                WHERE (delivered_at IS NULL OR delivered_at < :redeliver_timeout)
                AND handled = FALSE'
            )
            ->setParameter('redeliver_timeout', new DateTimeImmutable('-5 minutes'))
            ->getOneOrNullResult();

        if (null === $row) {
            return [];
        }

        $envelope = $this->serializer->decode([
            'body' => $row['envelope'],
        ]);

        return [$envelope->with(new TransportMessageIdStamp($row['id']))];
    }

    public function ack(Envelope $envelope): void
    {
        $stamp = $envelope->last(TransportMessageIdStamp::class);
        if (!$stamp instanceof TransportMessageIdStamp) {
            throw new \LogicException('No TransportMessageIdStamp found on the Envelope.');
        }

        $this->db->createQuery('UPDATE my_queue SET handled = TRUE WHERE id = :id')
            ->setParameter('id', $stamp->getId())
            ->execute();
    }

    public function reject(Envelope $envelope): void
    {
        $stamp = $envelope->last(TransportMessageIdStamp::class);
        if (!$stamp instanceof TransportMessageIdStamp) {
            throw new \LogicException('No TransportMessageIdStamp found on the Envelope.');
        }

        $this->db->createQuery('DELETE FROM my_queue WHERE id = :id')
            ->setParameter('id', $stamp->getId())
            ->execute();
    }

    public function send(Envelope $envelope): Envelope
    {
        $encodedMessage = $this->serializer->encode($envelope);
        $uuid = (string) Uuid::v4();
        $this->db->createQuery(
                'INSERT INTO my_queue (id, envelope, delivered_at, handled)
                VALUES (:id, :envelope, NULL, FALSE)'
            )
            ->setParameters([
                'id' => $uuid,
                'envelope' => $encodedMessage['body'],
            ])
            ->execute();

        return $envelope->with(new TransportMessageIdStamp($uuid));
    }

----------------------------------------

TITLE: Adding Optional Argument to Symfony Console Command in PHP
DESCRIPTION: This code snippet demonstrates how to add an optional argument to a Symfony Console command's InputDefinition. It shows the use of InputArgument class with the OPTIONAL flag.

LANGUAGE: php
CODE:
new InputDefinition([
    // ...
    new InputArgument('arg', InputArgument::OPTIONAL),
]);

----------------------------------------

TITLE: Configuring NotCompromisedPassword Constraint in YAML
DESCRIPTION: Shows how to configure the NotCompromisedPassword constraint for a property in YAML format.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\User:
    properties:
        rawPassword:
            - NotCompromisedPassword

----------------------------------------

TITLE: YAML Service Configuration
DESCRIPTION: Service configuration using YAML format, defining mailer and newsletter manager services with parameters and dependencies.

LANGUAGE: yaml
CODE:
parameters:
    mailer.transport: sendmail

services:
    mailer:
        class:     Mailer
        arguments: ['%mailer.transport%']
    newsletter_manager:
        class:     NewsletterManager
        calls:
            - [setMailer, ['@mailer']]

----------------------------------------

TITLE: Deserializing JSON to a PHP Object
DESCRIPTION: Example of using the Serializer to convert JSON data to a PHP object

LANGUAGE: PHP
CODE:
// src/Controller/PersonController.php
namespace App\Controller;

// ...
use Symfony\Component\HttpFoundation\Exception\BadRequestException;
use Symfony\Component\HttpFoundation\Request;

class PersonController extends AbstractController
{
    // ...

    public function create(Request $request, SerializerInterface $serializer): Response
    {
        if ('json' !== $request->getContentTypeFormat()) {
            throw new BadRequestException('Unsupported content format');
        }

        $jsonData = $request->getContent();
        $person = $serializer->deserialize($jsonData, Person::class, 'json');

        // ... do something with $person and return a response
    }
}

----------------------------------------

TITLE: Configuring Signature Properties for Remember Me Tokens
DESCRIPTION: This configuration snippet shows how to set custom signature properties for remember me tokens, which are used to validate the token's authenticity.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
security:
    # ...

    firewalls:
        main:
            # ...
            remember_me:
                # ...
                signature_properties: ['password', 'updatedAt']

----------------------------------------

TITLE: Configuring HTTPS Enforcement in Symfony Security (PHP)
DESCRIPTION: This PHP configuration snippet illustrates how to enforce HTTPS on different URL patterns using Symfony's access_control rules. It includes examples for secure areas, login pages, and a catch-all rule for all other URLs.

LANGUAGE: php
CODE:
// config/packages/security.php
use Symfony\Config\SecurityConfig;

return static function (SecurityConfig $security): void {
    // ....

    $security->accessControl()
        ->path('^/secure')
        ->roles(['ROLE_ADMIN'])
        ->requiresChannel('https')
    ;

    $security->accessControl()
        ->path('^/login')
        ->roles(['PUBLIC_ACCESS'])
        ->requiresChannel('https')
    ;

    $security->accessControl()
        ->path('^/')
        ->roles(['PUBLIC_ACCESS'])
        ->requiresChannel('https')
    ;
};

----------------------------------------

TITLE: Creating Basic Console Application in PHP
DESCRIPTION: Basic setup for creating a console application using Symfony Console Component. Includes autoloading and application initialization.

LANGUAGE: php
CODE:
#!/usr/bin/env php
<?php
// application.php

require __DIR__.'/vendor/autoload.php';

use Symfony\Component\Console\Application;

$application = new Application();

// ... register commands

$application->run();

----------------------------------------

TITLE: Handling Console Input in Symfony Commands
DESCRIPTION: Illustrates how to configure and use input arguments in a Symfony console command, including retrieving argument values in the execute method.

LANGUAGE: php
CODE:
use Symfony\Component\Console\Input\InputArgument;

// ...
protected function configure(): void
{
    $this
        ->addArgument('username', InputArgument::REQUIRED, 'The username of the user.')
    ;
}

// ...
public function execute(InputInterface $input, OutputInterface $output): int
{
    $output->writeln([
        'User Creator',
        '============',
        '',
    ]);

    $output->writeln('Username: '.$input->getArgument('username'));

    return Command::SUCCESS;
}

----------------------------------------

TITLE: Implementing PasswordHasherAwareInterface for Dynamic Hashers
DESCRIPTION: Example of implementing PasswordHasherAwareInterface in User entity for dynamic password hasher selection

LANGUAGE: php
CODE:
// src/Entity/User.php
namespace App\Entity;

use Symfony\Component\PasswordHasher\Hasher\PasswordHasherAwareInterface;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\UserInterface;

class User implements
    UserInterface,
    PasswordAuthenticatedUserInterface,
    PasswordHasherAwareInterface
{
    // ...

    public function getPasswordHasherName(): ?string
    {
        if ($this->isAdmin()) {
            return 'harsh';
        }

        return null; // use the default hasher
    }
}

----------------------------------------

TITLE: Last-Modified Header Implementation in Symfony Controller
DESCRIPTION: Example of implementing HTTP cache validation using Last-Modified headers in a Symfony controller. The last modified date is determined by comparing article and author update timestamps.

LANGUAGE: php
CODE:
namespace App\Controller;

use App\Entity\Article;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class ArticleController extends AbstractController
{
    public function show(Article $article, Request $request): Response
    {
        $author = $article->getAuthor();

        $articleDate = new \DateTime($article->getUpdatedAt());
        $authorDate = new \DateTime($author->getUpdatedAt());

        $date = $authorDate > $articleDate ? $authorDate : $articleDate;

        $response = new Response();
        $response->setLastModified($date);
        $response->setPublic();

        if ($response->isNotModified($request)) {
            return $response;
        }

        return $response;
    }
}

----------------------------------------

TITLE: File Upload Service Implementation
DESCRIPTION: Dedicated service class for handling file uploads with filename generation and error handling.

LANGUAGE: php
CODE:
namespace App\Service;

use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\String\Slugger\SluggerInterface;

class FileUploader
{
    public function __construct(
        private string $targetDirectory,
        private SluggerInterface $slugger,
    ) {}

    public function upload(UploadedFile $file): string
    {
        $originalFilename = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME);
        $safeFilename = $this->slugger->slug($originalFilename);
        $fileName = $safeFilename.'-'.uniqid().'.'.$file->guessExtension();

        try {
            $file->move($this->getTargetDirectory(), $fileName);
        } catch (FileException $e) {
            // handle exception
        }

        return $fileName;
    }

    public function getTargetDirectory(): string
    {
        return $this->targetDirectory;
    }
}

----------------------------------------

TITLE: Getting and Setting Service Definitions in Symfony PHP
DESCRIPTION: Demonstrates basic operations for working with service definitions in the container including checking existence, retrieving, and adding new definitions.

LANGUAGE: php
CODE:
use Symfony\Component\DependencyInjection\Definition;

// finds out if there is an "app.mailer" definition
$container->hasDefinition('app.mailer');
// finds out if there is an "app.mailer" definition or alias
$container->has('app.mailer');

// gets the "app.user_config_manager" definition
$definition = $container->getDefinition('app.user_config_manager');
// gets the definition with the "app.user_config_manager" ID or alias
$definition = $container->findDefinition('app.user_config_manager');

// adds a new "app.number_generator" definition
$definition = new Definition(\App\NumberGenerator::class);
$container->setDefinition('app.number_generator', $definition);

// shortcut for the previous method
$container->register('app.number_generator', \App\NumberGenerator::class);

----------------------------------------

TITLE: Implementing ETag Validation in Symfony Controller
DESCRIPTION: Example of implementing HTTP cache validation using ETag headers in a Symfony controller. The ETag is generated using md5 hash of the response content.

LANGUAGE: php
CODE:
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class DefaultController extends AbstractController
{
    public function homepage(Request $request): Response
    {
        $response = $this->render('static/homepage.html.twig');
        $response->setEtag(md5($response->getContent()));
        $response->setPublic(); // make sure the response is public/cacheable
        $response->isNotModified($request);

        return $response;
    }
}

----------------------------------------

TITLE: Unit Testing SalaryCalculator with Mocked Repository in PHP
DESCRIPTION: Demonstrates how to unit test the SalaryCalculator class by mocking the Doctrine EntityManager and Repository. It shows the process of creating mock objects and setting up expectations for method calls.

LANGUAGE: php
CODE:
// tests/Salary/SalaryCalculatorTest.php
namespace App\Tests\Salary;

use App\Entity\Employee;
use App\Salary\SalaryCalculator;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use PHPUnit\Framework\TestCase;

class SalaryCalculatorTest extends TestCase
{
    public function testCalculateTotalSalary(): void
    {
        $employee = new Employee();
        $employee->setSalary(1000);
        $employee->setBonus(1100);

        // Now, mock the repository so it returns the mock of the employee
        $employeeRepository = $this->createMock(EntityRepository::class);
        $employeeRepository->expects($this->any())
            ->method('find')
            ->willReturn($employee);

        // Last, mock the EntityManager to return the mock of the repository
        // (this is not needed if the class being tested injects the
        // repository it uses instead of the entire entity manager)
        $entityManager = $this->createMock(EntityManager::class);
        $entityManager->expects($this->any())
            ->method('getRepository')
            ->willReturn($employeeRepository);

        $salaryCalculator = new SalaryCalculator($entityManager);
        $this->assertEquals(2100, $salaryCalculator->calculateTotalSalary(1));
    }
}

----------------------------------------

TITLE: Implementing Doctrine Lifecycle Callback in PHP Entity
DESCRIPTION: Example of adding a prePersist lifecycle callback to automatically set creation date when an entity is first persisted. Shows implementation with PHP attributes.

LANGUAGE: php
CODE:
#[ORM\Entity]
#[ORM\HasLifecycleCallbacks]
class Product
{
    #[ORM\PrePersist]
    public function setCreatedAtValue(): void
    {
        $this->createdAt = new \DateTimeImmutable();
    }
}

----------------------------------------

TITLE: Using a Workflow in PHP
DESCRIPTION: This snippet demonstrates how to use the previously defined workflow. It shows checking for possible transitions, applying transitions, and getting enabled transitions for a blog post object.

LANGUAGE: php
CODE:
// ...
// Consider that $blogPost is in place "draft" by default
$blogPost = new BlogPost();

$workflow->can($blogPost, 'publish'); // False
$workflow->can($blogPost, 'to_review'); // True

$workflow->apply($blogPost, 'to_review'); // $blogPost is now in place "reviewed"

$workflow->can($blogPost, 'publish'); // True
$workflow->getEnabledTransitions($blogPost); // $blogPost can perform transition "publish" or "reject"

----------------------------------------

TITLE: Implementing Logger Dependency in PHP Class
DESCRIPTION: Demonstrates how to implement a PSR-3 LoggerInterface dependency in a PHP class and use it for logging messages.

LANGUAGE: php
CODE:
namespace Acme;

use Psr\Log\LoggerInterface;

class MyDependency
{
    public function __construct(
        private LoggerInterface $logger,
    ) {
    }

    public function doStuff(): void
    {
        $this->logger->info('I love Tony Vairelles\' hairdresser.');
    }
}

----------------------------------------

TITLE: Invokable Controller Implementation in PHP
DESCRIPTION: Example of implementing an invokable controller using the __invoke method following the ADR pattern

LANGUAGE: php
CODE:
// src/Controller/Hello.php
namespace App\Controller;

use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

#[Route('/hello/{name}', name: 'hello')]
class Hello
{
    public function __invoke(string $name = 'World'): Response
    {
        return new Response(sprintf('Hello %s!', $name));
    }
}

----------------------------------------

TITLE: Defining Bundle Configuration Class
DESCRIPTION: Example of creating a Configuration class to define the structure of a bundle's configuration.

LANGUAGE: php
CODE:
// src/DependencyInjection/Configuration.php
namespace Acme\SocialBundle\DependencyInjection;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

class Configuration implements ConfigurationInterface
{
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder('acme_social');

        $treeBuilder->getRootNode()
            ->children()
                ->arrayNode('twitter')
                    ->children()
                        ->integerNode('client_id')->end()
                        ->scalarNode('client_secret')->end()
                    ->end()
                ->end() // twitter
            ->end()
        ;

        return $treeBuilder;
    }
}

----------------------------------------

TITLE: Using FilesystemAdapter with Cache Contracts in PHP
DESCRIPTION: Demonstrates how to use the FilesystemAdapter to create a cache instance and retrieve/delete cached data using the Cache Contracts approach.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\FilesystemAdapter;
use Symfony\Contracts\Cache\ItemInterface;

$cache = new FilesystemAdapter();

$value = $cache->get('my_cache_key', function (ItemInterface $item): string {
    $item->expiresAfter(3600);

    // ... do some HTTP request or heavy computations
    $computedValue = 'foobar';

    return $computedValue;
});

echo $value; // 'foobar'

// ... and to remove the cache key
$cache->delete('my_cache_key');

----------------------------------------

TITLE: Forcing Re-Authentication for Specific Resources
DESCRIPTION: This PHP code snippet shows how to use special attributes to force users to re-authenticate before accessing certain resources, even if they are logged in via remember me.

LANGUAGE: php
CODE:
// src/Controller/AccountController.php
// ...

public function accountInfo(): Response
{
    // allow any authenticated user - we don't care if they just
    // logged in, or are logged in via a remember me cookie
    $this->denyAccessUnlessGranted('IS_AUTHENTICATED_REMEMBERED');

    // ...
}

public function resetPassword(): Response
{
    // require the user to log in during *this* session
    // if they were only logged in via a remember me cookie, they
    // will be redirected to the login page
    $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');

    // ...
}

----------------------------------------

TITLE: Configuring Access Control in XML
DESCRIPTION: Example of configuring access_control rules in Symfony's security.xml file. Shows how to set up various access control rules with XML syntax.

LANGUAGE: xml
CODE:
<!-- config/packages/security.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<srv:container xmlns="http://symfony.com/schema/dic/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:srv="http://symfony.com/schema/dic/services"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/security
        https://symfony.com/schema/dic/security/security-1.0.xsd">

    <srv:parameters>
        <srv:parameter key="env(TRUSTED_IPS)">10.0.0.1, 10.0.0.2</srv:parameter>
    </srv:parameters>

    <config>
        <!-- ... -->
        <rule path="^/admin" role="ROLE_USER_PORT" ip="127.0.0.1" port="8080"/>
        <rule path="^/admin" role="ROLE_USER_IP" ip="127.0.0.1"/>
        <rule path="^/admin" role="ROLE_USER_HOST" host="symfony\.com$"/>
        <rule path="^/admin" role="ROLE_USER_METHOD" methods="POST, PUT"/>

        <!-- ips can be comma-separated, which is especially useful when using env variables -->
        <rule path="^/admin" role="ROLE_USER_IP" ip="%env(TRUSTED_IPS)%"/>
        <rule path="^/admin" role="ROLE_USER_IP">
            <ip>127.0.0.1</ip>
            <ip>::1</ip>
            <ip>%env(TRUSTED_IPS)%</ip>
        </rule>

        <!-- for custom matching needs, use a request matcher service -->
        <rule role="ROLE_USER" request-matcher="App\Security\RequestMatcher\MyRequestMatcher"/>

        <!-- require ROLE_ADMIN for 'admin' route. You can use the shortcut route="xxx" -->
        <rule role="ROLE_ADMIN">
            <attribute key="_route">admin</attribute>
        </rule>
        <rule route="admin" role="ROLE_ADMIN"/>
    </config>
</srv:container>

----------------------------------------

TITLE: Basic Message Class Definition
DESCRIPTION: Example of creating a simple message class for SMS notifications

LANGUAGE: php
CODE:
namespace App\Message;

class SmsNotification
{
    public function __construct(
        private string $content,
    ) {
    }

    public function getContent(): string
    {
        return $this->content;
    }
}

----------------------------------------

TITLE: Custom OIDC User Provider Implementation
DESCRIPTION: Example of a custom user provider for handling OIDC authentication

LANGUAGE: php
CODE:
use Symfony\Component\Security\Core\User\AttributesBasedUserProviderInterface;\n\nclass OidcUserProvider implements AttributesBasedUserProviderInterface\n{\n    public function loadUserByIdentifier(string $identifier, array $attributes = []): UserInterface\n    {\n        // implement your own logic to load and return the user object\n    }\n}

----------------------------------------

TITLE: Defining Bundle Configuration using AbstractBundle
DESCRIPTION: Example of creating friendly configuration for a bundle by extending AbstractBundle and implementing configure() and loadExtension() methods.

LANGUAGE: php
CODE:
// src/AcmeSocialBundle.php
namespace Acme\SocialBundle;

use Symfony\Component\Config\Definition\Configurator\DefinitionConfigurator;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symfony\Component\HttpKernel\Bundle\AbstractBundle;

class AcmeSocialBundle extends AbstractBundle
{
    public function configure(DefinitionConfigurator $definition): void
    {
        $definition->rootNode()
            ->children()
                ->arrayNode('twitter')
                    ->children()
                        ->integerNode('client_id')->end()
                        ->scalarNode('client_secret')->end()
                    ->end()
                ->end() // twitter
            ->end()
        ;
    }

    public function loadExtension(array $config, ContainerConfigurator $container, ContainerBuilder $builder): void
    {
        $container->services()
            ->get('acme_social.twitter_client')
            ->arg(0, $config['twitter']['client_id'])
            ->arg(1, $config['twitter']['client_secret'])
        ;
    }
}

----------------------------------------

TITLE: Attaching Tags to Cached Items in Symfony
DESCRIPTION: Demonstrates how to attach tags to cached items using the tag() method of ItemInterface. This allows for later invalidation of items based on these tags.

LANGUAGE: php
CODE:
$item = $cache->get('cache_key', function (ItemInterface $item): string {
    // [...]
    // add one or more tags
    $item->tag('tag_1');
    $item->tag(['tag_2', 'tag_3']);

    return $cachedValue;
});

----------------------------------------

TITLE: Setting Vary Header using Response Object
DESCRIPTION: Example of using Symfony's Response object methods to set response variation. Demonstrates how to set single and multiple Vary headers programmatically.

LANGUAGE: php
CODE:
$response->setVary('Accept-Encoding');
$response->setVary(['Accept-Encoding', 'User-Agent']);

----------------------------------------

TITLE: Optimized Cache Validation in Symfony Controller
DESCRIPTION: Optimized implementation of cache validation combining ETag and Last-Modified headers with early response returns to minimize resource usage.

LANGUAGE: php
CODE:
namespace App\Controller;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class ArticleController extends AbstractController
{
    public function show(string $articleSlug, Request $request): Response
    {
        $article = ...;

        $response = new Response();
        $response->setEtag($article->computeETag());
        $response->setLastModified($article->getPublishedAt());
        $response->setPublic();

        if ($response->isNotModified($request)) {
            return $response;
        }

        $comments = ...;

        return $this->render('article/show.html.twig', [
            'article' => $article,
            'comments' => $comments,
        ], $response);
    }
}

----------------------------------------

TITLE: Generating Reset Password Functionality
DESCRIPTION: Command to generate reset password functionality using MakerBundle

LANGUAGE: terminal
CODE:
$ php bin/console make:reset-password

----------------------------------------

TITLE: Making HTTP Requests with BrowserKit in PHP
DESCRIPTION: Examples of making various types of HTTP requests using the BrowserKit client, including GET, JSON, and XMLHttpRequest.

LANGUAGE: PHP
CODE:
use Acme\Client;

$client = new Client();
$crawler = $client->request('GET', '/');

// JSON request
$crawler = $client->jsonRequest('GET', '/', ['some_parameter' => 'some_value']);

// XMLHttpRequest
$crawler = $client->xmlHttpRequest('GET', '/');

----------------------------------------

TITLE: Setting Expires Header directly on Response object in Symfony
DESCRIPTION: Shows how to set the Expires header directly on the Response object using DateTime.

LANGUAGE: php
CODE:
$date = new DateTime();
$date->modify('+600 seconds');

$response->setExpires($date);

----------------------------------------

TITLE: Bundle Directory Structure Example
DESCRIPTION: Shows the recommended directory structure for a Symfony bundle, including essential directories and files.

LANGUAGE: text
CODE:
<your-bundle>/
├── assets/
├── config/
├── docs/
│   └─ index.md
├── public/
├── src/
│   ├── Controller/
│   ├── DependencyInjection/
│   └── AcmeBlogBundle.php
├── templates/
├── tests/
├── translations/
├── LICENSE
└── README.md

----------------------------------------

TITLE: Message Handler Implementation
DESCRIPTION: Handler class for processing SMS notification messages using attributes

LANGUAGE: php
CODE:
namespace App\MessageHandler;

use App\Message\SmsNotification;
use Symfony\Component\Messenger\Attribute\AsMessageHandler;

#[AsMessageHandler]
class SmsNotificationHandler
{
    public function __invoke(SmsNotification $message)
    {
        // ... do some work - like sending an SMS message!
    }
}

----------------------------------------

TITLE: Basic Process Execution in PHP
DESCRIPTION: Demonstrates basic usage of Process class to execute a system command and handle its output

LANGUAGE: PHP
CODE:
use Symfony\Component\Process\Exception\ProcessFailedException;
use Symfony\Component\Process\Process;

$process = new Process(['ls', '-lsa']);
$process->run();

// executes after the command finishes
if (!$process->isSuccessful()) {
    throw new ProcessFailedException($process);
}

echo $process->getOutput();

----------------------------------------

TITLE: Implementing Custom Validation Group Resolver in PHP for Symfony
DESCRIPTION: This snippet defines a ValidationGroupResolver class that determines which validation groups to apply dynamically. It implements the __invoke() method to be used as a callable in the form configuration.

LANGUAGE: PHP
CODE:
// src/Validation/ValidationGroupResolver.php
namespace App\Validation;

use Symfony\Component\Form\FormInterface;

class ValidationGroupResolver
{
    public function __construct(
        private object $service1,
        private object $service2,
    ) {
    }

    public function __invoke(FormInterface $form): array
    {
        $groups = [];

        // ... determine which groups to apply and return an array

        return $groups;
    }
}

----------------------------------------

TITLE: Creating a Custom Symfony Bundle Class
DESCRIPTION: Shows how to create a new bundle class that extends AbstractBundle, which is the foundation for adding new functionality to a Symfony application.

LANGUAGE: php
CODE:
// src/AcmeBlogBundle.php
namespace Acme\BlogBundle;

use Symfony\Component\HttpKernel\Bundle\AbstractBundle;

class AcmeBlogBundle extends AbstractBundle
{
}

----------------------------------------

TITLE: Implementing Client-Side Form Updates with JavaScript in Symfony
DESCRIPTION: Shows how to update form fields dynamically on the client-side using JavaScript. This example updates the 'position' field when the 'sport' field changes in a sports meetup form.

LANGUAGE: HTML
CODE:
{# templates/meetup/create.html.twig #}
{{ form_start(form, { attr: { id: 'sport_meetup_form' } }) }}
    {{ form_row(form.sport) }}    {# <select id="meetup_sport" ... #}
    {{ form_row(form.position) }} {# <select id="meetup_position" ... #}
    {# ... #}
{{ form_end(form) }}

<script>
    const form = document.getElementById('sport_meetup_form');
    const form_select_sport = document.getElementById('meetup_sport');
    const form_select_position = document.getElementById('meetup_position');

    const updateForm = async (data, url, method) => {
      const req = await fetch(url, {
        method: method,
        body: data,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'charset': 'utf-8'
        }
      });

      const text = await req.text();

      return text;
    };

    const parseTextToHtml = (text) => {
      const parser = new DOMParser();
      const html = parser.parseFromString(text, 'text/html');

      return html;
    };

    const changeOptions = async (e) => {
      const requestBody = e.target.getAttribute('name') + '=' + e.target.value;
      const updateFormResponse = await updateForm(requestBody, form.getAttribute('action'), form.getAttribute('method'));
      const html = parseTextToHtml(updateFormResponse);

      const new_form_select_position = html.getElementById('meetup_position');
      form_select_position.innerHTML = new_form_select_position.innerHTML;
    };

    form_select_sport.addEventListener('change', (e) => changeOptions(e));
</script>

----------------------------------------

TITLE: Implementing a Message Handler in PHP
DESCRIPTION: Example of a message handler class that processes a specific message type.

LANGUAGE: PHP
CODE:
namespace App\MessageHandler;

use App\Message\MyMessage;

class MyMessageHandler
{
    public function __invoke(MyMessage $message): void
    {
        // Message processing...
    }
}

----------------------------------------

TITLE: Implementing Getter Method Validation in Symfony
DESCRIPTION: Demonstrates how to validate using a getter method 'isPasswordSafe()' to ensure password doesn't match the first name, using IsTrue constraint.

LANGUAGE: php
CODE:
public function isPasswordSafe(): bool
{
    return $this->firstName !== $this->password;
}

public static function loadValidatorMetadata(ClassMetadata $metadata): void
{
    $metadata->addGetterConstraint('passwordSafe', new Assert\IsTrue(
        message: 'The password cannot match your first name',
    ));
}

----------------------------------------

TITLE: Injecting Configuration Parameters in Services
DESCRIPTION: Demonstrates how to inject configuration parameters in Symfony services.

LANGUAGE: yaml
CODE:
# config/services.yaml
parameters:
    app.contents_dir: '...'

services:
    App\Service\MessageGenerator:
        arguments:
            $contentsDir: '%app.contents_dir%'

----------------------------------------

TITLE: Defining Class as Factory in PHP
DESCRIPTION: This code snippet shows how to use the class itself as a factory by defining a static create method in the NewsletterManager class.

LANGUAGE: php
CODE:
// src/Email/NewsletterManager.php
namespace App\Email;

// ...

class NewsletterManager
{
    private string $sender;

    public static function create(string $sender): self
    {
        $newsletterManager = new self();
        $newsletterManager->sender = $sender;
        // ...

        return $newsletterManager;
    }
}

----------------------------------------

TITLE: Basic Unit Test Example
DESCRIPTION: Demonstrates a simple unit test class extending KernelTestCase for testing Symfony services.

LANGUAGE: PHP
CODE:
namespace App\Tests\Service;

use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class NewsletterGeneratorTest extends KernelTestCase
{
    public function testSomething(): void
    {
        self::bootKernel();

        $container = static::getContainer();

        $newsletterGenerator = $container->get(NewsletterGenerator::class);
        $newsletter = $newsletterGenerator->generateMonthlyNews();

        $this->assertEquals('...', $newsletter->getContent());
    }

----------------------------------------

TITLE: Using Dynamic CSRF Token ID with IsCsrfTokenValid Attribute
DESCRIPTION: Demonstrates how to use a dynamic CSRF token ID with the IsCsrfTokenValid attribute in a controller action.

LANGUAGE: php
CODE:
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Http\Attribute\IsCsrfTokenValid;
// ...

#[IsCsrfTokenValid(new Expression('"delete-item-" ~ args["post"].getId()'), tokenKey: 'token')]
public function delete(Post $post): Response
{
    // ... do something, like deleting an object
}

----------------------------------------

TITLE: Implementing Transport Factory in PHP
DESCRIPTION: Implementation of TransportFactoryInterface to create a custom transport factory that handles specific DSN formats.

LANGUAGE: php
CODE:
class YourTransportFactory implements TransportFactoryInterface
{
    public function createTransport(string $dsn, array $options, SerializerInterface $serializer): TransportInterface
    {
        return new YourTransport(/* ... */);
    }

    public function supports(string $dsn, array $options): bool
    {
        return 0 === strpos($dsn, 'my-transport://');
    }
}

----------------------------------------

TITLE: Creating a Custom Service in Symfony
DESCRIPTION: Illustrates how to create a custom service class for generating random greetings in Symfony.

LANGUAGE: PHP
CODE:
// src/GreetingGenerator.php
namespace App;

class GreetingGenerator
{
    public function getRandomGreeting(): string
    {
        $greetings = ['Hey', 'Yo', 'Aloha'];
        $greeting = $greetings[array_rand($greetings)];

        return $greeting;
    }
}

----------------------------------------

TITLE: Setting Expires Header using PHP Attributes in Symfony
DESCRIPTION: Demonstrates setting cache expiration using the Expires header via PHP attributes.

LANGUAGE: php
CODE:
use Symfony\Component\HttpKernel\Attribute\Cache;
// ...

#[Cache(expires: '+600 seconds')]
public function index(): Response
{
    // ...
}

----------------------------------------

TITLE: Configuring Chrome Client with Options
DESCRIPTION: Example of creating a Chrome client with custom options and capabilities.

LANGUAGE: PHP
CODE:
use Symfony\Component\Panther\PantherTestCase;

class ConsoleTest extends PantherTestCase
{
    public function testConsole(): void
    {
        $client = self::createPantherClient(
            [],
            [],
            [
                'capabilities' => [
                    'goog:loggingPrefs' => [
                        'browser' => 'ALL', // calls to console.* methods
                        'performance' => 'ALL', // performance data
                    ],
                ],
            ]
        );

        $client->request('GET', '/');

        $consoleLogs = $client->getWebDriver()->manage()->getLog('browser');
        $performanceLogs = $client->getWebDriver()->manage()->getLog('performance'); // performance logs
    }
}

----------------------------------------

TITLE: ESI Rendering in Twig Templates
DESCRIPTION: Twig template syntax for rendering ESI includes using both controller references and URLs.

LANGUAGE: twig
CODE:
{# templates/static/about.html.twig #}

{# you can use a controller reference #}
{{ render_esi(controller('App\\Controller\\NewsController::latest', { 'maxPerPage': 5 })) }}

{# ... or a URL #}
{{ render_esi(url('latest_news', { 'maxPerPage': 5 })) }}

----------------------------------------

TITLE: Serializing a PHP Object to JSON
DESCRIPTION: Example of using the Serializer to convert a PHP object to JSON

LANGUAGE: PHP
CODE:
// src/Controller/PersonController.php
namespace App\Controller;

use App\Model\Person;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Serializer\SerializerInterface;

class PersonController extends AbstractController
{
    public function index(SerializerInterface $serializer): Response
    {
        $person = new Person('Jane Doe', 39, false);

        $jsonContent = $serializer->serialize($person, 'json');
        // $jsonContent contains {"name":"Jane Doe","age":39,"sportsperson":false}

        return JsonResponse::fromJsonString($jsonContent);
    }
}

----------------------------------------

TITLE: Converting CSS Selector to XPath Using CssSelectorConverter
DESCRIPTION: Demonstrates how to use the CssSelectorConverter class to convert a CSS selector to its XPath equivalent. This is the core functionality of the CssSelector component.

LANGUAGE: php
CODE:
use Symfony\Component\CssSelector\CssSelectorConverter;

$converter = new CssSelectorConverter();
var_dump($converter->toXPath('div.item > h4 > a'));

----------------------------------------

TITLE: Restricting CSRF Validation to Specific HTTP Methods
DESCRIPTION: Shows how to restrict CSRF token validation to specific HTTP methods using the IsCsrfTokenValid attribute.

LANGUAGE: php
CODE:
#[IsCsrfTokenValid('delete-item', tokenKey: 'token', methods: ['DELETE'])]
public function delete(Post $post): Response
{
    // ... delete the object
}

----------------------------------------

TITLE: View Event Handler - PHP
DESCRIPTION: Example of handling kernel.view event to transform controller return value into Response object

LANGUAGE: PHP
CODE:
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Event\ViewEvent;

public function onKernelView(ViewEvent $event): void
{
    $value = $event->getControllerResult();
    $response = new Response();

    // ... somehow customize the Response from the return value

    $event->setResponse($response);
}

----------------------------------------

TITLE: Validating CSS Colors with PHP Attributes
DESCRIPTION: Example showing how to validate CSS colors using PHP attributes in a Bulb entity class. Demonstrates validation of default colors, hexadecimal colors, and named colors.

LANGUAGE: php
CODE:
// src/Entity/Bulb.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Bulb
{
    #[Assert\CssColor]
    protected string $defaultColor;

    #[Assert\CssColor(
        formats: Assert\CssColor::HEX_LONG,
        message: 'The accent color must be a 6-character hexadecimal color.',
    )]
    protected string $accentColor;

    #[Assert\CssColor(
        formats: [Assert\CssColor::BASIC_NAMED_COLORS, Assert\CssColor::EXTENDED_NAMED_COLORS],
        message: 'The color '{{ value }}' is not a valid CSS color name.',
    )]
    protected string $currentColor;
}

----------------------------------------

TITLE: Configuring Validation Groups with PHP
DESCRIPTION: PHP class demonstrating validation constraint configuration using loadValidatorMetadata method with group assignments.

LANGUAGE: php
CODE:
// src/Entity/User.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class User
{
    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('email', new Assert\Email(
            groups: ['registration'],
        ));

        $metadata->addPropertyConstraint('password', new Assert\NotBlank(
            groups: ['registration'],
        ));
        $metadata->addPropertyConstraint('password', new Assert\Length(
            min: 7,
            groups: ['registration'],
        ));

        $metadata->addPropertyConstraint('city', new Assert\Length(
            min: 2,
        ));
    }
}

----------------------------------------

TITLE: Creating a Custom YAML Resource Loader in PHP
DESCRIPTION: Illustrates how to create a custom loader for YAML configuration files by extending Symfony's FileLoader class. The loader implements methods to load YAML content and check if it supports a given resource.

LANGUAGE: php
CODE:
namespace Acme\Config\Loader;

use Symfony\Component\Config\Loader\FileLoader;
use Symfony\Component\Yaml\Yaml;

class YamlUserLoader extends FileLoader
{
    public function load($resource, $type = null): void
    {
        $configValues = Yaml::parse(file_get_contents($resource));

        // ... handle the config values

        // maybe import some other resource:

        // $this->import('extra_users.yaml');
    }

    public function supports($resource, $type = null): bool
    {
        return is_string($resource) && 'yaml' === pathinfo(
            $resource,
            PATHINFO_EXTENSION
        );
    }
}

----------------------------------------

TITLE: Handling YAML Parsing Exceptions in PHP
DESCRIPTION: Catch ParseException when parsing YAML to handle errors gracefully.

LANGUAGE: PHP
CODE:
use Symfony\Component\Yaml\Exception\ParseException;

try {
    $value = Yaml::parse('...');
} catch (ParseException $exception) {
    printf('Unable to parse the YAML string: %s', $exception->getMessage());
}

----------------------------------------

TITLE: Configuring Use Referer in PHP
DESCRIPTION: Configures the form login authenticator to use the HTTP referer header as fallback redirect URL.

LANGUAGE: php
CODE:
return static function (SecurityConfig $security): void {
    $security->firewall('main')
        ->formLogin()
            ->useReferer(true)
    ;

----------------------------------------

TITLE: Basic EntityType Form Field Configuration in PHP
DESCRIPTION: Demonstrates basic setup of an EntityType form field to display a select dropdown of User entities using their username property as labels.

LANGUAGE: php
CODE:
use App\Entity\User;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
// ...

$builder->add('users', EntityType::class, [
    // looks for choices from this entity
    'class' => User::class,

    // uses the User.username property as the visible option string
    'choice_label' => 'username',

    // used to render a select box, check boxes or radios
    // 'multiple' => true,
    // 'expanded' => true,
]);

----------------------------------------

TITLE: Creating a Basic Asset Package in PHP
DESCRIPTION: Demonstrates how to create a basic asset package without versioning using the Symfony Asset component.

LANGUAGE: php
CODE:
use Symfony\Component\Asset\Package;
use Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy;

$package = new Package(new EmptyVersionStrategy());

// Absolute path
echo $package->getUrl('/image.png');
// result: /image.png

// Relative path
echo $package->getUrl('image.png');
// result: image.png

----------------------------------------

TITLE: Defining a Simple PHP Class for Serialization
DESCRIPTION: Example PHP class definition to demonstrate serialization

LANGUAGE: PHP
CODE:
// src/Model/Person.php
namespace App\Model;

class Person
{
    public function __construct(
        private int $age,
        private string $name,
        private bool $sportsperson
    ) {
    }

    public function getAge(): int
    {
        return $this->age;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function isSportsperson(): bool
    {
        return $this->sportsperson;
    }
}

----------------------------------------

TITLE: Managing Multiple Asset Packages in PHP
DESCRIPTION: Demonstrates how to manage multiple asset packages with different configurations using the Packages class.

LANGUAGE: php
CODE:
use Symfony\Component\Asset\Package;
use Symfony\Component\Asset\Packages;
use Symfony\Component\Asset\PathPackage;
use Symfony\Component\Asset\UrlPackage;

$versionStrategy = new StaticVersionStrategy('v1');

$defaultPackage = new Package($versionStrategy);

$namedPackages = [
    'img' => new UrlPackage('https://img.example.com/', $versionStrategy),
    'doc' => new PathPackage('/somewhere/deep/for/documents', $versionStrategy),
];

$packages = new Packages($defaultPackage, $namedPackages);

echo $packages->getUrl('/main.css');
// result: /main.css?v1

echo $packages->getUrl('/logo.png', 'img');
// result: https://img.example.com/logo.png?v1

echo $packages->getUrl('resume.pdf', 'doc');
// result: /somewhere/deep/for/documents/resume.pdf?v1

----------------------------------------

TITLE: Configuring Signature Properties for Login Links in Symfony
DESCRIPTION: YAML configuration for setting signature properties to invalidate login links when user data changes.

LANGUAGE: yaml
CODE:
security:
    firewalls:
        main:
            login_link:
                check_route: login_check
                signature_properties: [id, email]

----------------------------------------

TITLE: Using Expressions with denyAccessUnlessGranted in Symfony Controller
DESCRIPTION: Shows how to use Expression objects with the denyAccessUnlessGranted method for complex authorization checks in controller methods.

LANGUAGE: php
CODE:
// src/Controller/MyController.php
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\ExpressionLanguage\Expression;
use Symfony\Component\HttpFoundation\Response;

class MyController extends AbstractController
{
    public function show(): Response
    {
        $this->denyAccessUnlessGranted(new Expression(
            'is_granted("ROLE_ADMIN") or is_granted("ROLE_MANAGER")'
        ));

        // ...
    }

    public function edit(): Response
    {
        $this->denyAccessUnlessGranted(new Expression(
            '"ROLE_ADMIN" in role_names or (is_authenticated() and user.isSuperAdmin())'
        ));

        // ...
    }
}

----------------------------------------

TITLE: Configuring Apache for Symfony Application
DESCRIPTION: This snippet demonstrates how to configure Apache 2.4+ with mod_proxy_fcgi to run a Symfony application. It includes VirtualHost setup, PHP-FPM integration, and directory configuration for the Symfony public folder.

LANGUAGE: apache
CODE:
# /etc/apache2/conf.d/example.com.conf
<VirtualHost *:80>
    ServerName example.com
    ServerAlias www.example.com

    # Uncomment the following line to force Apache to pass the Authorization
    # header to PHP: required for "basic_auth" under PHP-FPM and FastCGI
    #
    # SetEnvIfNoCase ^Authorization$ "(.+)" HTTP_AUTHORIZATION=$1

    <FilesMatch \.php$>
        # when using PHP-FPM as a unix socket
        SetHandler proxy:unix:/var/run/php/php8.3-fpm.sock|fcgi://dummy

        # when PHP-FPM is configured to use TCP
        # SetHandler proxy:fcgi://127.0.0.1:9000
    </FilesMatch>

    DocumentRoot /var/www/project/public
    <Directory /var/www/project/public>
        AllowOverride None
        Require all granted
        FallbackResource /index.php
    </Directory>

    # uncomment the following lines if you install assets as symlinks
    # or run into problems when compiling LESS/Sass/CoffeeScript assets
    # <Directory /var/www/project>
    #     Options FollowSymlinks
    # </Directory>

    # optionally disable the fallback resource for the asset directories
    # which will allow Apache to return a 404 error when files are
    # not found instead of passing the request to Symfony
    # <Directory /var/www/project/public/bundles>
    #     DirectoryIndex disabled
    #     FallbackResource disabled
    # </Directory>

    ErrorLog /var/log/apache2/project_error.log
    CustomLog /var/log/apache2/project_access.log combined
</VirtualHost>

----------------------------------------

TITLE: Implementing Custom Middleware in PHP
DESCRIPTION: Example of a custom middleware that adds a stamp to received messages.

LANGUAGE: PHP
CODE:
use App\Message\Stamp\AnotherStamp;
use Symfony\Component\Messenger\Envelope;
use Symfony\Component\Messenger\Middleware\MiddlewareInterface;
use Symfony\Component\Messenger\Middleware\StackInterface;
use Symfony\Component\Messenger\Stamp\ReceivedStamp;

class MyOwnMiddleware implements MiddlewareInterface
{
    public function handle(Envelope $envelope, StackInterface $stack): Envelope
    {
        if (null !== $envelope->last(ReceivedStamp::class)) {
            // Message just has been received...

            // You could for example add another stamp.
            $envelope = $envelope->with(new AnotherStamp(/* ... */));
        } else {
            // Message was just originally dispatched
        }

        return $stack->next()->handle($envelope, $stack);
    }
}

----------------------------------------

TITLE: Twig Template Inheritance Example
DESCRIPTION: Demonstrates Twig template inheritance with a base template, layout template, and specific page template.

LANGUAGE: html+twig
CODE:
{# templates/base.html.twig #}
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>{% block title %}My Application{% endblock %}</title>
        {% block stylesheets %}
            <link rel="stylesheet" type="text/css" href="/css/base.css"/>
        {% endblock %}
    </head>
    <body>
        {% block body %}
            <div id="sidebar">
                {% block sidebar %}
                    <ul>
                        <li><a href="{{ path('homepage') }}">Home</a></li>
                        <li><a href="{{ path('blog_index') }}">Blog</a></li>
                    </ul>
                {% endblock %}
            </div>

            <div id="content">
                {% block content %}{% endblock %}
            </div>
        {% endblock %}
    </body>
</html>

LANGUAGE: html+twig
CODE:
{# templates/blog/layout.html.twig #}
{% extends 'base.html.twig' %}

{% block content %}
    <h1>Blog</h1>

    {% block page_contents %}{% endblock %}
{% endblock %}

LANGUAGE: html+twig
CODE:
{# templates/blog/index.html.twig #}
{% extends 'blog/layout.html.twig' %}

{% block title %}Blog Index{% endblock %}

{% block page_contents %}
    {% for article in articles %}
        <h2>{{ article.title }}</h2>
        <p>{{ article.body }}</p>
    {% endfor %}
{% endblock %}

----------------------------------------

TITLE: Defining Validation Groups with XML
DESCRIPTION: XML configuration for User entity validation constraints demonstrating group assignments and constraint options.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://symfony.com/schema/dic/constraint-mapping
        https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd"
>
    <class name="App\Entity\User">
        <property name="email">
            <constraint name="Email">
                <option name="groups">
                    <value>registration</value>
                </option>
            </constraint>
        </property>
        <property name="password">
            <constraint name="NotBlank">
                <option name="groups">
                    <value>registration</value>
                </option>
            </constraint>
            <constraint name="Length">
                <option name="min">7</option>
                <option name="groups">
                    <value>registration</value>
                </option>
            </constraint>
        </property>
        <property name="city">
            <constraint name="Length">
                <option name="min">2</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Stopwatch Performance Profiling
DESCRIPTION: Example of using Symfony's Stopwatch component for performance profiling in PHP code and Twig templates.

LANGUAGE: php
CODE:
use Symfony\Component\Stopwatch\Stopwatch;

class DataExporter
{
    public function __construct(
        private Stopwatch $stopwatch,
    ) {
    }

    public function export(): void
    {
        $this->stopwatch->start('export-data');
        // ...do things to export data...
        $this->stopwatch->stop('export-data');
    }
}

LANGUAGE: twig
CODE:
{% stopwatch 'render-blog-posts' %}
    {% for post in blog_posts %}
        {# ... #}
    {% endfor %}
{% endstopwatch %}

----------------------------------------

TITLE: Secure PHP Request Handling with Output Escaping
DESCRIPTION: Enhanced PHP code that includes proper output escaping to prevent XSS vulnerabilities.

LANGUAGE: PHP
CODE:
$name = $_GET['name'] ?? 'World';

header('Content-Type: text/html; charset=utf-8');

printf('Hello %s', htmlspecialchars($name, ENT_QUOTES, 'UTF-8'));

----------------------------------------

TITLE: Creating Form Factory in PHP
DESCRIPTION: PHP code to create a basic form factory using the Symfony Forms class.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Forms;

$formFactory = Forms::createFormFactory();

----------------------------------------

TITLE: Compiling the Symfony Service Container
DESCRIPTION: This snippet demonstrates how to compile the Symfony service container using the compile() method.

LANGUAGE: PHP
CODE:
$container->compile();

----------------------------------------

TITLE: Configuring CSRF Protection for Individual Symfony Forms
DESCRIPTION: Demonstrates how to configure CSRF protection options for a specific form type in Symfony.

LANGUAGE: php
CODE:
// src/Form/TaskType.php
namespace App\Form;

// ...
use App\Entity\Task;
use Symfony\Component\OptionsResolver\OptionsResolver;

class TaskType extends AbstractType
{
    // ...

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class'      => Task::class,
            // enable/disable CSRF protection for this form
            'csrf_protection' => true,
            // the name of the hidden HTML field that stores the token
            'csrf_field_name' => '_token',
            // an arbitrary string used to generate the value of the token
            // using a different string for each form improves its security
            'csrf_token_id'   => 'task_item',
        ]);
    }

    // ...
}

----------------------------------------

TITLE: Initializing Basic Product Form Type in Symfony
DESCRIPTION: Defines a basic ProductType form class with name and price fields. This serves as the starting point for demonstrating dynamic form modifications.

LANGUAGE: PHP
CODE:
// src/Form/Type/ProductType.php
namespace App\Form\Type;

use App\Entity\Product;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class ProductType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder->add('name');
        $builder->add('price');
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Product::class,
        ]);
    }
}

----------------------------------------

TITLE: Configuring Custom Entry Point in Symfony Security YAML
DESCRIPTION: This YAML configuration snippet shows how to set a custom entry point for the main firewall in Symfony's security configuration.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
firewalls:
    # ...

    main:
        # ...
        entry_point: App\Security\AuthenticationEntryPoint

----------------------------------------

TITLE: Creating PHP Types Manually Using Type Class
DESCRIPTION: Examples of creating different types manually using the Type class static methods, including basic types, nullable types, generics, lists, and intersections.

LANGUAGE: php
CODE:
use Symfony\Component\TypeInfo\Type;

Type::int();
Type::nullable(Type::string());
Type::generic(Type::object(Collection::class), Type::int());
Type::list(Type::bool());
Type::intersection(Type::object(\Stringable::class), Type::object(\Iterator::class));

----------------------------------------

TITLE: Configuring Access Decision Strategy in Symfony
DESCRIPTION: Shows how to configure the access decision strategy in the security.yaml file to use a unanimous voting strategy.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
security:
    access_decision_manager:
        strategy: unanimous
        allow_if_all_abstain: false

----------------------------------------

TITLE: Defining Configuration Parameters in XML
DESCRIPTION: Shows how to define configuration parameters using XML format.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:framework="http://symfony.com/schema/dic/symfony"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/symfony
        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">

    <parameters>
        <parameter key="app.admin_email">something@example.com</parameter>
        <parameter key="app.enable_v2_protocol">true</parameter>
        <parameter key="app.enable_v2_protocol" type="string">true</parameter>
        <parameter key="app.supported_locales" type="collection">
            <parameter>en</parameter>
            <parameter>es</parameter>
            <parameter>fr</parameter>
        </parameter>
        <parameter key="app.some_parameter" type="binary">VGhpcyBpcyBhIEJlbGwgY2hhciAH</parameter>
        <parameter key="app.some_constant" type="constant">GLOBAL_CONSTANT</parameter>
        <parameter key="app.another_constant" type="constant">App\Entity\BlogPost::MAX_ITEMS</parameter>
        <parameter key="app.some_enum" type="constant">App\Enum\PostState::Published</parameter>
    </parameters>

    <!-- ... -->
</container>

----------------------------------------

TITLE: Connecting to LDAP Server using Symfony LDAP Component
DESCRIPTION: This PHP code demonstrates how to create an LDAP connection using the Symfony LDAP component. It shows two methods: one using individual configuration options and another using a connection string.

LANGUAGE: PHP
CODE:
use Symfony\Component\Ldap\Ldap;

$ldap = Ldap::create('ext_ldap', [
    'host' => 'my-server',
    'encryption' => 'ssl',
]);

// Or using a connection string:
$ldap = Ldap::create('ext_ldap', ['connection_string' => 'ldaps://my-server:636']);

----------------------------------------

TITLE: Configuring Chain User Provider in Symfony Security
DESCRIPTION: Example configuration for the Chain User Provider, which combines multiple user providers. The order of providers is important as Symfony will search for users in the specified order.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
security:
    # ...
    providers:
        backend_users:
            ldap:
                # ...

        legacy_users:
            entity:
                # ...

        users:
            entity:
                # ...

        all_users:
            chain:
                providers: ['legacy_users', 'users', 'backend_users']

LANGUAGE: xml
CODE:
<!-- config/packages/security.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<srv:container xmlns="http://symfony.com/schema/dic/security"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xmlns:srv="http://symfony.com/schema/dic/services"
               xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/security
        https://symfony.com/schema/dic/security/security-1.0.xsd">

    <config>
        <!-- ... -->

        <provider name="backend_users">
            <ldap service="..." base-dn="..."/>
        </provider>

        <provider name="legacy_users">
            <entity>
                <!-- ... -->
            </entity>
        </provider>

        <provider name="users">
            <entity>
                <!-- ... -->
            </entity>
        </provider>

        <provider name="all_users">
            <chain>
                <provider>backend_users</provider>
                <provider>legacy_users</provider>
                <provider>users</provider>
            </chain>
        </provider>
    </config>
</srv:container>

LANGUAGE: php
CODE:
// config/packages/security.php
use App\Entity\User;
use Symfony\Config\SecurityConfig;

return static function (SecurityConfig $security): void {
    // ...

    $security->provider('backend_users')
        ->ldap()
        // ...
    ;

    $security->provider('legacy_users')
        ->entity()
        // ...
    ;

    $security->provider('users')
        ->entity()
        // ...
    ;

    $security->provider('all_users')->chain()
        ->providers(['backend_users', 'legacy_users', 'users'])
    ;
};

----------------------------------------

TITLE: Configuring Path-Based Firewall Restriction in Symfony
DESCRIPTION: Demonstrates how to restrict a firewall to specific URL paths using the pattern configuration option. The example shows restricting access to paths starting with /admin.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml

# ...
security:
    firewalls:
        secured_area:
            pattern: ^/admin
            # ...

LANGUAGE: xml
CODE:
<!-- config/packages/security.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<srv:container xmlns="http://symfony.com/schema/dic/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:srv="http://symfony.com/schema/dic/services"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/security
        https://symfony.com/schema/dic/security/security-1.0.xsd">

    <config>
        <!-- ... -->
        <firewall name="secured_area" pattern="^/admin">
            <!-- ... -->
        </firewall>
    </config>
</srv:container>

LANGUAGE: php
CODE:
// config/packages/security.php
use Symfony\Config\SecurityConfig;

return static function (SecurityConfig $security): void {
    // ....

    $security->firewall('secured_area')
        ->pattern('^/admin')
        // ...
    ;
};

----------------------------------------

TITLE: Creating Bundle Extension Class
DESCRIPTION: Traditional approach for loading service definitions using a dedicated extension class that implements ExtensionInterface. Shows basic structure for handling service loading.

LANGUAGE: php
CODE:
namespace Acme\HelloBundle\DependencyInjection;

use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Extension\Extension;

class AcmeHelloExtension extends Extension
{
    public function load(array $configs, ContainerBuilder $container): void
    {
        // ... you'll load the files here later
    }
}

----------------------------------------

TITLE: Configuring Custom Access Denied Handler in Symfony Security YAML
DESCRIPTION: This YAML configuration snippet shows how to set a custom access denied handler for the main firewall in Symfony's security configuration.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
firewalls:
    # ...

    main:
        # ...
        access_denied_handler: App\Security\AccessDeniedHandler

----------------------------------------

TITLE: Using Named Locks in a Symfony Controller
DESCRIPTION: Demonstrates how to inject and use a named lock factory in a Symfony controller.

LANGUAGE: php
CODE:
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Lock\LockFactory;

class PdfController extends AbstractController
{
    #[Route('/download/terms-of-use.pdf')]
    public function downloadPdf(LockFactory $invoiceLockFactory, MyPdfGeneratorService $pdf): Response
    {
        // ...
    }
}

----------------------------------------

TITLE: Creating a Redirect Response
DESCRIPTION: Demonstrates how to create a RedirectResponse to redirect the user to another URL.

LANGUAGE: PHP
CODE:
use Symfony\Component\HttpFoundation\RedirectResponse;

$response = new RedirectResponse('http://example.com/');

----------------------------------------

TITLE: Chaining Crawler Methods for Node Selection
DESCRIPTION: Illustrates how to chain multiple Crawler methods to perform complex node selection. This example filters h1 elements, reduces the selection based on a condition, and selects the first matching node.

LANGUAGE: PHP
CODE:
$crawler
    ->filter('h1')
    ->reduce(function ($node, int $i): bool {
        if (!$node->attr('class')) {
            return false;
        }

        return true;
    })
    ->first()
;

----------------------------------------

TITLE: Configuring Constructor Arguments for Service Definitions in Symfony PHP
DESCRIPTION: Demonstrates how to work with constructor arguments in service definitions, including adding references to other services and container parameters.

LANGUAGE: php
CODE:
use App\Config\DoctrineConfigManager;
use Symfony\Component\DependencyInjection\Definition;
use Symfony\Component\DependencyInjection\Reference;

$definition = new Definition(DoctrineConfigManager::class, [
    new Reference('doctrine'), // a reference to another service
    '%app.config_table_name%',  // will be resolved to the value of a container parameter
]);

// gets all arguments configured for this definition
$constructorArguments = $definition->getArguments();

// gets a specific argument
$firstArgument = $definition->getArgument(0);

// adds a new named argument
// '$argumentName' = the name of the argument in the constructor, including the '$' symbol
$definition = $definition->setArgument('$argumentName', $argumentValue);

// adds a new argument
$definition->addArgument($argumentValue);

// replaces argument on a specific index (0 = first argument)
$definition->replaceArgument($index, $argument);

// replaces all previously configured arguments with the passed array
$definition->setArguments($arguments);

----------------------------------------

TITLE: Configuring Database Connection
DESCRIPTION: Example configuration for database connection using environment variables in .env file.

LANGUAGE: text
CODE:
DATABASE_URL="mysql://db_user:db_password@127.0.0.1:3306/db_name?serverVersion=8.0.37"

----------------------------------------

TITLE: File Path Canonicalization Example
DESCRIPTION: Demonstrates usage of Path::canonicalize to normalize file paths across platforms.

LANGUAGE: PHP
CODE:
echo Path::canonicalize('/var/www/vhost/webmozart/../config.ini');
// => /var/www/vhost/config.ini

----------------------------------------

TITLE: Using Closures with IsGranted Attribute in Symfony
DESCRIPTION: Shows how to use closure functions with the IsGranted attribute for dynamic authorization checks based on runtime context.

LANGUAGE: php
CODE:
// src/Controller/MyController.php
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Http\Attribute\IsGranted;
use Symfony\Component\Security\Http\Attribute\IsGrantedContext;

class MyController extends AbstractController
{
    #[IsGranted(static function (IsGrantedContext $context, mixed $subject) {
        return $context->user === $subject['post']->getAuthor();
    }, subject: static function (array $args) {
        return [
            'post' => $args['post'],
        ];
    })]
    public function index($post): Response
    {
        // ...
    }
}

----------------------------------------

TITLE: Defining Basic Symfony Project Structure
DESCRIPTION: Shows the basic directory structure for configuration files in a Symfony project.

LANGUAGE: text
CODE:
your-project/
├─ config/
│  ├─ packages/
│  ├─ bundles.php
│  ├─ routes.yaml
│  └─ services.yaml

----------------------------------------

TITLE: Configuring Multiple Authenticators with Separate Entry Points (YAML)
DESCRIPTION: This YAML configuration sets up separate firewalls for API and main website, each with its own authentication method and entry point. It also defines access control rules for different parts of the application.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
security:
    # ...
    firewalls:
        api:
            pattern: ^/api/
            custom_authenticators:
                - App\Security\ApiTokenAuthenticator
        main:
            lazy: true
            form_login: ~

    access_control:
        - { path: '^/login', roles: PUBLIC_ACCESS }
        - { path: '^/api', roles: ROLE_API_USER }
        - { path: '^/', roles: ROLE_USER }

----------------------------------------

TITLE: Installing Production Dependencies
DESCRIPTION: Command to install Composer dependencies for production environment with optimized autoloader and excluding development packages.

LANGUAGE: terminal
CODE:
$ composer install --no-dev --optimize-autoloader

----------------------------------------

TITLE: Defining Validation Groups with PHP Attributes
DESCRIPTION: User entity class showing validation constraints using PHP attributes with specific validation groups. Demonstrates email, password and city field validations.

LANGUAGE: php
CODE:
// src/Entity/User.php
namespace App\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Validator\Constraints as Assert;

class User implements UserInterface
{
    #[Assert\Email(groups: ['registration'])]
    private string $email;

    #[Assert\NotBlank(groups: ['registration'])]
    #[Assert\Length(min: 7, groups: ['registration'])]
    private string $password;

    #[Assert\Length(min: 2)]
    private string $city;
}

----------------------------------------

TITLE: Applying PasswordStrength Constraint using PHP Attributes
DESCRIPTION: Example of how to apply the PasswordStrength constraint to a property using PHP attributes in a User entity class.

LANGUAGE: php
CODE:
// src/Entity/User.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class User
{
    #[Assert\PasswordStrength]
    protected $rawPassword;
}

----------------------------------------

TITLE: Service Stack Configuration
DESCRIPTION: Demonstrates how to create a stack of ordered services where each service decorates the next one.

LANGUAGE: yaml
CODE:
services:
    decorated_foo_stack:
        stack:
            - Baz: ~
            - Bar: ~
            - Foo: ~

----------------------------------------

TITLE: Generating Optimized Environment Configuration
DESCRIPTION: Commands to generate an optimized .env.local.php file for production environment, with options for including or excluding existing environment values.

LANGUAGE: terminal
CODE:
$ composer dump-env prod
$ composer dump-env prod --empty

----------------------------------------

TITLE: Expiration Checker Service Implementation
DESCRIPTION: Example service class that uses Clock component to check if a date has expired.

LANGUAGE: PHP
CODE:
use Symfony\Component\Clock\ClockInterface;

class ExpirationChecker
{
    public function __construct(
        private ClockInterface $clock
    ) {}

    public function isExpired(DateTimeInterface $validUntil): bool
    {
        return $this->clock->now() > $validUntil;
    }
}

----------------------------------------

TITLE: Accessing Services in Symfony Console Commands
DESCRIPTION: Shows how to use dependency injection to access services within a Symfony console command.

LANGUAGE: php
CODE:
// ...
use App\Service\UserManager;
use Symfony\Component\Console\Command\Command;

class CreateUserCommand extends Command
{
    public function __construct(
        private UserManager $userManager,
    ){
        parent::__construct();
    }

    // ...

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        // ...

        $this->userManager->create($input->getArgument('username'));

        $output->writeln('User successfully generated!');

        return Command::SUCCESS;
    }
}

----------------------------------------

TITLE: Working with Parsed and Serialized Expressions in PHP
DESCRIPTION: Shows how to use ParsedExpression and SerializedParsedExpression objects with the ExpressionLanguage component.

LANGUAGE: php
CODE:
use Symfony\Component\ExpressionLanguage\SerializedParsedExpression;
// ...

$expression = new SerializedParsedExpression(
    '1 + 4',
    serialize($expressionLanguage->parse('1 + 4', [])->getNodes())
);

var_dump($expressionLanguage->evaluate($expression)); // prints 5

----------------------------------------

TITLE: XML Encoder Configuration Example
DESCRIPTION: Sample code demonstrating XML encoding with custom attributes and node structure configuration.

LANGUAGE: PHP
CODE:
$encoder = new XmlEncoder();
$encoder->encode([
    '@attribute1' => 'foo',
    '@attribute2' => 'bar',
    '#' => ['foo' => ['@bar' => 'value', '#' => 'baz']]
], 'xml');

----------------------------------------

TITLE: Configuring Services in YAML
DESCRIPTION: Demonstrates how to configure services using YAML format, including setting arguments and making services public.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # explicitly configure the service
    App\Service\MessageGenerator:
        arguments:
            $adminEmail: 'manager@example.com'

    App\Service\PublicService:
        public: true

----------------------------------------

TITLE: Repository Usage with Multiple Entity Managers
DESCRIPTION: Demonstrates how to work with repositories when using multiple entity managers, including explicit manager selection.

LANGUAGE: php
CODE:
namespace App\Controller;

use AcmeStoreBundle\Entity\Customer;
use AcmeStoreBundle\Entity\Product;
use Doctrine\Persistence\ManagerRegistry;

class UserController extends AbstractController
{
    public function index(ManagerRegistry $doctrine): Response
    {
        // Retrieves a repository managed by the "default" entity manager
        $products = $doctrine->getRepository(Product::class)->findAll();

        // Explicit way to deal with the "default" entity manager
        $products = $doctrine->getRepository(Product::class, 'default')->findAll();

        // Retrieves a repository managed by the "customer" entity manager
        $customers = $doctrine->getRepository(Customer::class, 'customer')->findAll();

        // ...
    }
}

----------------------------------------

TITLE: Accessing Original User in PHP Service
DESCRIPTION: Service code to retrieve the original impersonator user when impersonation is active.

LANGUAGE: php
CODE:
namespace App\Service;

use Symfony\Bundle\SecurityBundle\Security;
use Symfony\Component\Security\Core\Authentication\Token\SwitchUserToken;

class SomeService
{
    public function __construct(
        private Security $security,
    ) {
    }

    public function someMethod(): void
    {
        $token = $this->security->getToken();

        if ($token instanceof SwitchUserToken) {
            $impersonatorUser = $token->getOriginalToken()->getUser();
        }
    }
}

----------------------------------------

TITLE: Storing UUIDs with Doctrine ORM
DESCRIPTION: Example of using UUIDs as entity properties with Doctrine ORM.

LANGUAGE: php
CODE:
namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Bridge\Doctrine\Types\UuidType;
use Symfony\Component\Uid\Uuid;

#[ORM\Entity(repositoryClass: ProductRepository::class)]
class Product
{
    #[ORM\Column(type: UuidType::NAME)]
    private Uuid $someProperty;

    // ...
}

----------------------------------------

TITLE: Basic Symfony Entity Class Example
DESCRIPTION: Sample Task entity class showing properties and getter/setter methods for form handling

LANGUAGE: PHP
CODE:
// src/Entity/Task.php
namespace App\Entity;

class Task
{
    protected string $task;

    protected ?\DateTimeInterface $dueDate;

    public function getTask(): string
    {
        return $this->task;
    }

    public function setTask(string $task): void
    {
        $this->task = $task;
    }

    public function getDueDate(): ?\DateTimeInterface
    {
        return $this->dueDate;
    }

    public function setDueDate(?\DateTimeInterface $dueDate): void
    {
        $this->dueDate = $dueDate;
    }
}

----------------------------------------

TITLE: Dumping PHP Array to YAML String
DESCRIPTION: Convert a PHP array to its YAML representation using Yaml::dump().

LANGUAGE: PHP
CODE:
use Symfony\Component\Yaml\Yaml;

$array = [
    'foo' => 'bar',
    'bar' => ['foo' => 'bar', 'bar' => 'baz'],
];

$yaml = Yaml::dump($array);

file_put_contents('/path/to/file.yaml', $yaml);

----------------------------------------

TITLE: Basic DomCrawler Usage Example
DESCRIPTION: Demonstrates basic instantiation and traversal of HTML content using the DomCrawler

LANGUAGE: PHP
CODE:
use Symfony\Component\DomCrawler\Crawler;

$html = <<<'HTML'
<!DOCTYPE html>
<html>
    <body>
        <p class="message">Hello World!</p>
        <p>Hello Crawler!</p>
    </body>
</html>
HTML;

$crawler = new Crawler($html);

foreach ($crawler as $domElement) {
    var_dump($domElement->nodeName);
}

----------------------------------------

TITLE: Excluding Directories in Symfony Finder
DESCRIPTION: Shows how to exclude specific directories from the search results using the exclude() method of the Finder class.

LANGUAGE: php
CODE:
// directories passed as argument must be relative to the ones defined with the in() method
$finder->in(__DIR__)->exclude('ruby');

----------------------------------------

TITLE: Configuring Cache Kernel Service in YAML
DESCRIPTION: Service configuration using YAML to register the CacheKernel as a decorator for the http_cache service.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    App\CacheKernel:
        decorates: http_cache
        arguments:
            - '@kernel'
            - '@http_cache.store'
            - '@?esi'

----------------------------------------

TITLE: Configuring ResolveTargetEntityListener in PHP
DESCRIPTION: PHP configuration for mapping the interface to concrete implementation in Doctrine

LANGUAGE: php
CODE:
// config/packages/doctrine.php
use App\Entity\Customer;
use App\Model\InvoiceSubjectInterface;
use Symfony\Config\DoctrineConfig;

return static function (DoctrineConfig $doctrine): void {
    $orm = $doctrine->orm();
    // ...
    $orm->resolveTargetEntity(InvoiceSubjectInterface::class, Customer::class);
};

----------------------------------------

TITLE: Detailed Form Field Customization
DESCRIPTION: Example demonstrating fine-grained control over form field rendering using individual Twig functions for label, widget, help, and errors.

LANGUAGE: html+twig
CODE:
<div class="form-control">
    <i class="fa fa-calendar"></i> {{ form_label(form.dueDate) }}
    {{ form_widget(form.dueDate) }}

    <small>{{ form_help(form.dueDate) }}</small>

    <div class="form-error">
        {{ form_errors(form.dueDate) }}
    </div>
</div>

----------------------------------------

TITLE: Parsing YAML File in PHP
DESCRIPTION: Use Yaml::parseFile() to parse the contents of a YAML file into a PHP value.

LANGUAGE: PHP
CODE:
use Symfony\Component\Yaml\Yaml;

$value = Yaml::parseFile('/path/to/file.yaml');

----------------------------------------

TITLE: Basic Table Creation in Symfony Console
DESCRIPTION: Demonstrates setting up a basic table with headers and rows using Symfony's Table helper in a console command.

LANGUAGE: PHP
CODE:
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Helper\Table;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class SomeCommand extends Command
{
    public function execute(InputInterface $input, OutputInterface $output): int
    {
        $table = new Table($output);
        $table
            ->setHeaders(['ISBN', 'Title', 'Author'])
            ->setRows([
                ['99921-58-10-7', 'Divine Comedy', 'Dante Alighieri'],
                ['9971-5-0210-0', 'A Tale of Two Cities', 'Charles Dickens'],
                ['960-425-059-0', 'The Lord of the Rings', 'J. R. R. Tolkien'],
                ['80-902734-1-6', 'And Then There Were None', 'Agatha Christie'],
            ])
        ;
        $table->render();

        return Command::SUCCESS;
    }
}

----------------------------------------

TITLE: Configuring GreaterThan Constraints with PHP
DESCRIPTION: Demonstrates how to programmatically set up GreaterThan constraints using PHP in a loadValidatorMetadata method, validating that siblings is greater than 5 and age is greater than 18.

LANGUAGE: php
CODE:
// src/Entity/Person.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Person
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('siblings', new Assert\GreaterThan(5));

        $metadata->addPropertyConstraint('age', new Assert\GreaterThan(
            value: 18,
        ));
    }
}

----------------------------------------

TITLE: Installing HttpFoundation Component for Sessions
DESCRIPTION: Use Composer to install the HttpFoundation component required for session handling.

LANGUAGE: terminal
CODE:
$ composer require symfony/http-foundation

----------------------------------------

TITLE: Basic Form Submission Handler in Symfony
DESCRIPTION: Demonstrates the basic usage of form->submit() method in a Symfony controller action. Shows how to create a form, handle POST submission, and process valid form data.

LANGUAGE: php
CODE:
public function new(Request $request): Response
{
    $task = new Task();
    $form = $this->createForm(TaskType::class, $task);

    if ($request->isMethod('POST')) {
        $form->submit($request->getPayload()->get($form->getName()));

        if ($form->isSubmitted() && $form->isValid()) {
            // perform some action...

            return $this->redirectToRoute('task_success');
        }
    }

    return $this->render('task/new.html.twig', [
        'form' => $form,
    ]);
}

----------------------------------------

TITLE: Workflow Event Subscriber Implementation
DESCRIPTION: Example event subscriber showing how to handle workflow transition events

LANGUAGE: php
CODE:
namespace App\EventSubscriber;

use Psr\Log\LoggerInterface;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\Workflow\Event\Event;

class WorkflowLoggerSubscriber implements EventSubscriberInterface
{
    public function __construct(
        private LoggerInterface $logger,
    ) {}

    public function onLeave(Event $event): void
    {
        $this->logger->alert(sprintf(
            'Blog post (id: "%s") performed transition "%s" from "%s" to "%s"',
            $event->getSubject()->getId(),
            $event->getTransition()->getName(),
            implode(', ', array_keys($event->getMarking()->getPlaces())),
            implode(', ', $event->getTransition()->getTos())
        ));
    }

    public static function getSubscribedEvents(): array
    {
        return [
            'workflow.blog_publishing.leave' => 'onLeave',
        ];
    }
}

----------------------------------------

TITLE: Basic PHP HTTP Request Handling
DESCRIPTION: Demonstrates how PHP natively handles HTTP requests and responses using superglobals and the header() function.

LANGUAGE: PHP
CODE:
$uri = $_SERVER['REQUEST_URI'];
$foo = $_GET['foo'];

header('Content-Type: text/html');
echo 'The URI requested is: '.$uri;
echo 'The value of the "foo" parameter is: '.$foo;

----------------------------------------

TITLE: Basic Progress Bar Implementation in PHP
DESCRIPTION: Shows how to create and advance a basic progress bar with a fixed number of steps using Symfony Console's ProgressBar component.

LANGUAGE: php
CODE:
use Symfony\Component\Console\Helper\ProgressBar;

// creates a new progress bar (50 units)
$progressBar = new ProgressBar($output, 50);

// starts and displays the progress bar
$progressBar->start();

$i = 0;
while ($i++ < 50) {
    // ... do some work

    // advances the progress bar 1 unit
    $progressBar->advance();

    // you can also advance the progress bar by more than 1 unit
    // $progressBar->advance(3);
}

// ensures that the progress bar is at 100%
$progressBar->finish();

----------------------------------------

TITLE: Creating a Request Object from Global Variables
DESCRIPTION: Demonstrates how to create a Request object using the current PHP global variables.

LANGUAGE: PHP
CODE:
use Symfony\Component\HttpFoundation\Request;

$request = Request::createFromGlobals();

----------------------------------------

TITLE: Passing Variables to Expressions in PHP
DESCRIPTION: Shows how to pass variables into expressions for evaluation.

LANGUAGE: php
CODE:
use Symfony\Component\ExpressionLanguage\ExpressionLanguage;

$expressionLanguage = new ExpressionLanguage();

class Apple
{
    public string $variety;
}

$apple = new Apple();
$apple->variety = 'Honeycrisp';

var_dump($expressionLanguage->evaluate(
    'fruit.variety',
    [
        'fruit' => $apple,
    ]
)); // displays "Honeycrisp"

----------------------------------------

TITLE: Implementing Lazy Loading with FactoryCommandLoader in PHP
DESCRIPTION: This snippet demonstrates how to use FactoryCommandLoader to lazy-load Symfony Console commands. It sets up a command loader with a factory function for a heavy command and configures the application to use this loader.

LANGUAGE: php
CODE:
use App\Command\HeavyCommand;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\CommandLoader\FactoryCommandLoader;

$commandLoader = new FactoryCommandLoader([
    // Note that the `list` command will still instantiate that command
    // in this example.
    'app:heavy' => static fn(): Command => new HeavyCommand(),
]);

$application = new Application();
$application->setCommandLoader($commandLoader);
$application->run();

----------------------------------------

TITLE: Basic Category Entity Class Definition
DESCRIPTION: Generated Category entity class with id and name properties

LANGUAGE: php
CODE:
// src/Entity/Category.php
namespace App\Entity;

#[ORM\Entity(repositoryClass: CategoryRepository::class)]
class Category
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private $id;

    #[ORM\Column]
    private string $name;

    // ... getters and setters
}

----------------------------------------

TITLE: Creating a Symfony Form with Multiple Submit Buttons
DESCRIPTION: This code snippet shows how to create a Symfony form with two submit buttons using the FormBuilder. It adds text and date fields along with 'Create Task' and 'Save and Add' submit buttons.

LANGUAGE: php
CODE:
$form = $this->createFormBuilder($task)
    ->add('task', TextType::class)
    ->add('dueDate', DateType::class)
    ->add('save', SubmitType::class, ['label' => 'Create Task'])
    ->add('saveAndAdd', SubmitType::class, ['label' => 'Save and Add'])
    ->getForm();

----------------------------------------

TITLE: Advanced ChoiceType Configuration with Objects
DESCRIPTION: Shows an advanced configuration of ChoiceType using Category objects and custom callbacks for choice_value, choice_label, and other options.

LANGUAGE: PHP
CODE:
use App\Entity\Category;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
// ...

$builder->add('category', ChoiceType::class, [
    'choices' => [
        new Category('Cat1'),
        new Category('Cat2'),
        new Category('Cat3'),
        new Category('Cat4'),
    ],
    'choice_value' => 'name',
    'choice_label' => function (?Category $category): string {
        return $category ? strtoupper($category->getName()) : '';
    },
    'choice_attr' => function (?Category $category): array {
        return $category ? ['class' => 'category_'.strtolower($category->getName())] : [];
    },
    'group_by' => function (): string {
        return rand(0, 1) === 1 ? 'Group A' : 'Group B';
    },
    'preferred_choices' => function (?Category $category): bool {
        return $category && 100 < $category->getArticleCounts();
    },
]);

----------------------------------------

TITLE: Adding String-to-Array Transformer for Tags Field
DESCRIPTION: Example showing how to use CallbackTransformer to convert between string and array formats for the tags field. This allows storing tags as an array while displaying them as a comma-separated string.

LANGUAGE: php
CODE:
use Symfony\Component\Form\CallbackTransformer;

class TaskType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder->add('tags', TextType::class);

        $builder->get('tags')
            ->addModelTransformer(new CallbackTransformer(
                function ($tagsAsArray): string {
                    return implode(', ', $tagsAsArray);
                },
                function ($tagsAsString): array {
                    return explode(', ', $tagsAsString);
                }
            ))
        ;
    }
}

----------------------------------------

TITLE: Applying EqualTo Constraints in PHP Code for Symfony Validation
DESCRIPTION: Demonstrates how to programmatically add EqualTo constraints to a Person entity using Symfony's validation component in PHP. The constraints are applied to the firstName and age properties.

LANGUAGE: php
CODE:
// src/Entity/Person.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Person
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('firstName', new Assert\EqualTo('Mary'));

        $metadata->addPropertyConstraint('age', new Assert\EqualTo(
            value: 20,
        ));
    }
}

----------------------------------------

TITLE: Adding Basic Browserslist Configuration
DESCRIPTION: Shows how to add the recommended default browserslist configuration to package.json.

LANGUAGE: diff
CODE:
      {
    +  "browserslist": [
    +    "defaults"
    +  ]
      }

----------------------------------------

TITLE: Adding Class-Level Constraints in Symfony Controller
DESCRIPTION: Demonstrates how to add class-level constraints when creating a form using createFormBuilder in a Symfony controller.

LANGUAGE: php
CODE:
$form = $this->createFormBuilder($defaultData, [
        'constraints' => [
            'firstName' => new Length(['min' => 3]),
            'lastName' => [
                new NotBlank(),
                new Length(['min' => 3]),
            ],
        ],
    ])
    ->add('firstName', TextType::class)
    ->add('lastName', TextType::class)
    ->getForm();

----------------------------------------

TITLE: Partial Form Update with Validation in Symfony
DESCRIPTION: Demonstrates how to handle partial form updates using PATCH requests while ensuring proper validation of all required fields.

LANGUAGE: php
CODE:
// 'email' and 'username' are added manually to force their validation
$form->submit(array_merge(['email' => null, 'username' => null], $request->getPayload()->all()), false);

----------------------------------------

TITLE: Defining Variable Nodes in Configuration Tree
DESCRIPTION: Example showing how to define various node types in the configuration tree with validation rules.

LANGUAGE: php
CODE:
$rootNode
    ->children()
        ->booleanNode('auto_connect')
            ->defaultTrue()
        ->end()
        ->scalarNode('default_connection')
            ->defaultValue('mysql')
        ->end()
        ->stringNode('username')
            ->defaultValue('root')
        ->end()
        ->stringNode('password')
            ->defaultValue('root')
        ->end()
    ->end()
;

----------------------------------------

TITLE: Configuring Type Constraints with PHP
DESCRIPTION: Demonstrates how to programmatically set up Type constraints using PHP in a Symfony entity class. It includes examples for validating email addresses, strings, integers, and alphanumeric values.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Mime\Address;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('emailAddress', new Assert\Type(Address::class));

        $metadata->addPropertyConstraint('firstName', new Assert\Type('string'));

        $metadata->addPropertyConstraint('age', new Assert\Type(
            type: 'integer',
            message: 'The value {{ value }} is not a valid {{ type }}.',
        ));

        $metadata->addPropertyConstraint('accessCode', new Assert\Type(
            type: ['alpha', 'digit'],
        ));
    }
}

----------------------------------------

TITLE: Creating Symfony Project with Specific Version using Composer
DESCRIPTION: Command to create a new Symfony project using a specific version of Symfony with Composer.

LANGUAGE: bash
CODE:
$ composer create-project symfony/skeleton:"6.4.*" my_project_directory

----------------------------------------

TITLE: Creating a JSON Response
DESCRIPTION: Demonstrates how to create a JsonResponse for sending JSON data.

LANGUAGE: PHP
CODE:
use Symfony\Component\HttpFoundation\JsonResponse;

$response = new JsonResponse(['data' => 123]);

----------------------------------------

TITLE: Basic HttpKernel Setup in PHP
DESCRIPTION: Shows how to set up a minimal HttpKernel instance with required dependencies

LANGUAGE: PHP
CODE:
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpKernel\Controller\ArgumentResolver;
use Symfony\Component\HttpKernel\Controller\ControllerResolver;
use Symfony\Component\HttpKernel\HttpKernel;

$request = Request::createFromGlobals();
$dispatcher = new EventDispatcher();
$controllerResolver = new ControllerResolver();
$argumentResolver = new ArgumentResolver();

$kernel = new HttpKernel($dispatcher, $controllerResolver, new RequestStack(), $argumentResolver);

$response = $kernel->handle($request);
$response->send();

$kernel->terminate($request, $response);

----------------------------------------

TITLE: Configuring Count Constraint with PHP in Symfony
DESCRIPTION: Shows how to use the Count constraint in a PHP class using the loadValidatorMetadata method to validate that a property contains between 1 and 5 elements.

LANGUAGE: php
CODE:
// src/Entity/Participant.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Participant
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('emails', new Assert\Count(
            min: 1,
            max: 5,
            minMessage: 'You must specify at least one email',
            maxMessage: 'You cannot specify more than {{ limit }} emails',
        ));
    }
}

----------------------------------------

TITLE: Creating ImmutableEventDispatcher in PHP with Symfony
DESCRIPTION: This snippet shows how to create an ImmutableEventDispatcher by injecting a regular EventDispatcher into it. The ImmutableEventDispatcher acts as a proxy for the original dispatcher but prevents modifications.

LANGUAGE: PHP
CODE:
use Symfony\Component\EventDispatcher\ImmutableEventDispatcher;
// ...

$immutableDispatcher = new ImmutableEventDispatcher($dispatcher);

----------------------------------------

TITLE: Injecting Expression Results in YAML Configuration for Symfony Services
DESCRIPTION: This snippet demonstrates how to use expressions to inject the result of a method call from one service into another service's constructor argument using YAML configuration.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    # ...

    App\Mail\MailerConfiguration: ~

    App\Mailer:
        # the '@=' prefix is required when using expressions for arguments in YAML files
        arguments: ['@=service("App\\Mail\\MailerConfiguration").getMailerMethod()']
        # when using double-quoted strings, the backslash needs to be escaped twice (see https://yaml.org/spec/1.2/spec.html#id2787109)
        # arguments: ["@=service('App\\\\Mail\\\\MailerConfiguration').getMailerMethod()"]

----------------------------------------

TITLE: Sending an Email with Symfony Mailer
DESCRIPTION: PHP code example showing how to create and send an email using Symfony Mailer

LANGUAGE: php
CODE:
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\Mime\Email;

public function sendEmail(MailerInterface $mailer): Response
{
    $email = (new Email())
        ->from('hello@example.com')
        ->to('you@example.com')
        ->subject('Time for Symfony Mailer!')
        ->text('Sending emails is fun again!')
        ->html('<p>See Twig integration for better HTML integration!</p>');

    $mailer->send($email);

    // ...
}

----------------------------------------

TITLE: Constructor Injection in PHP
DESCRIPTION: Demonstrates dependency injection through class constructor using type-hinted parameters. This is the most common and recommended approach for required dependencies.

LANGUAGE: php
CODE:
namespace App\Mail;\n\nclass NewsletterManager\n{\n    public function __construct(\n        private MailerInterface $mailer,\n    ) {\n    }\n\n    // ...\n}

----------------------------------------

TITLE: Creating Form Types for Task and Tag Entities
DESCRIPTION: Implements form types for both Task and Tag entities, with Task form including a CollectionType field for handling multiple tags

LANGUAGE: PHP
CODE:
// src/Form/TaskType.php
namespace App\Form;

use App\Entity\Task;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class TaskType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder->add('description');

        $builder->add('tags', CollectionType::class, [
            'entry_type' => TagType::class,
            'entry_options' => ['label' => false],
            'allow_add' => true,
            'allow_delete' => true,
            'by_reference' => false,
        ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Task::class,
        ]);
    }
}

----------------------------------------

TITLE: Implementing Basic Mailer Class in PHP
DESCRIPTION: Basic class implementation showing a Mailer service with a constructor setting a default transport method.

LANGUAGE: php
CODE:
class Mailer
{
    private string $transport;

    public function __construct()
    {
        $this->transport = 'sendmail';
    }

    // ...
}

----------------------------------------

TITLE: Implementing ServiceSubscriberInterface
DESCRIPTION: Demonstrates how to implement the ServiceSubscriberInterface to define subscribed services.

LANGUAGE: PHP
CODE:
// src/CommandBus.php
namespace App;

use App\CommandHandler\BarHandler;
use App\CommandHandler\FooHandler;
use Psr\Container\ContainerInterface;
use Symfony\Contracts\Service\ServiceSubscriberInterface;

class CommandBus implements ServiceSubscriberInterface
{
    public function __construct(
        private ContainerInterface $locator,
    ) {
    }

    public static function getSubscribedServices(): array
    {
        return [
            'App\FooCommand' => FooHandler::class,
            'App\BarCommand' => BarHandler::class,
        ];
    }

    public function handle(Command $command): mixed
    {
        $commandClass = get_class($command);

        if ($this->locator->has($commandClass)) {
            $handler = $this->locator->get($commandClass);

            return $handler->handle($command);
        }
    }
}

----------------------------------------

TITLE: Installing Symfony LDAP Component
DESCRIPTION: Command to install the Symfony LDAP component using Composer in Symfony Flex applications.

LANGUAGE: terminal
CODE:
$ composer require symfony/ldap

----------------------------------------

TITLE: Configuring SMTP Transport in .env File
DESCRIPTION: Example of setting up SMTP transport configuration in the .env file

LANGUAGE: env
CODE:
# .env
MAILER_DSN=smtp://user:pass@smtp.example.com:port

----------------------------------------

TITLE: Defining Static Factory for NewsletterManager in PHP
DESCRIPTION: This code snippet defines a static factory class NewsletterManagerStaticFactory with a createNewsletterManager method to create and configure a NewsletterManager object.

LANGUAGE: php
CODE:
// src/Email/NewsletterManagerStaticFactory.php
namespace App\Email;

// ...

class NewsletterManagerStaticFactory
{
    public static function createNewsletterManager(): NewsletterManager
    {
        $newsletterManager = new NewsletterManager();

        // ...

        return $newsletterManager;
    }
}

----------------------------------------

TITLE: Implementing MacAddress Validation Using PHP Attributes
DESCRIPTION: Example showing how to apply the MacAddress constraint to a property using PHP attributes in a Device entity class.

LANGUAGE: php
CODE:
// src/Entity/Device.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Device
{
    #[Assert\MacAddress]
    protected string $mac;
}

----------------------------------------

TITLE: Configuring Environment-Specific Options in PHP
DESCRIPTION: Demonstrates how to configure environment-specific options using PHP format.

LANGUAGE: php
CODE:
// config/packages/framework.php
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symfony\Config\WebpackEncoreConfig;

return static function (WebpackEncoreConfig $webpackEncore, ContainerConfigurator $container): void {
    $webpackEncore
        ->outputPath('%kernel.project_dir%/public/build')
        ->strictMode(true)
        ->cache(false)
    ;

    if ('prod' === $container->env()) {
        $webpackEncore->cache(true);
    }

    if ('test' === $container->env()) {
        $webpackEncore->strictMode(false);
    }
};

----------------------------------------

TITLE: Implementing MacAddress Validation Using PHP
DESCRIPTION: Example showing how to configure the MacAddress constraint using PHP code in a Device entity class.

LANGUAGE: php
CODE:
// src/Entity/Device.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Device
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('mac', new Assert\MacAddress());
    }
}

----------------------------------------

TITLE: Configuring Symfony Form Type with Custom Validation Group Resolver
DESCRIPTION: This snippet shows how to inject and use the custom ValidationGroupResolver in a Symfony form type. It sets the resolver as the 'validation_groups' option in the form configuration.

LANGUAGE: PHP
CODE:
// src/Form/MyClassType.php;
namespace App\Form;

use App\Validation\ValidationGroupResolver;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\OptionsResolver\OptionsResolver;

class MyClassType extends AbstractType
{
    public function __construct(
        private ValidationGroupResolver $groupResolver,
    ) {
    }

    // ...
    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'validation_groups' => $this->groupResolver,
        ]);
    }
}

----------------------------------------

TITLE: Creating New Symfony Microservice or API
DESCRIPTION: Command to create a new Symfony project for microservices, console applications, or APIs using the Symfony CLI, specifying the version.

LANGUAGE: bash
CODE:
$ symfony new my_project_directory --version="7.3.x-dev"

----------------------------------------

TITLE: Applying CardScheme Constraint using YAML Configuration
DESCRIPTION: This snippet shows how to apply the CardScheme constraint using YAML configuration. It validates the cardNumber property of the Transaction entity to ensure it's a valid VISA card number.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Transaction:
    properties:
        cardNumber:
            - CardScheme:
                schemes: [VISA]
                message: Your credit card number is invalid.

----------------------------------------

TITLE: Basic Filesystem Usage in PHP
DESCRIPTION: Demonstrates basic usage of the Filesystem class for creating directories with error handling.

LANGUAGE: PHP
CODE:
use Symfony\Component\Filesystem\Exception\IOExceptionInterface;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Filesystem\Path;

$filesystem = new Filesystem();

try {
    $filesystem->mkdir(
        Path::normalize(sys_get_temp_dir().'/.'.random_int(0, 1000)),
    );
} catch (IOExceptionInterface $exception) {
    echo "An error occurred while creating your directory at ".$exception->getPath();
}

----------------------------------------

TITLE: Configuring LDAP Client in Symfony Services
DESCRIPTION: Service configuration for setting up an LDAP client using the PHP LDAP extension with server connection details and options.

LANGUAGE: yaml
CODE:
services:
    Symfony\Component\Ldap\Ldap:
        arguments: ['@Symfony\Component\Ldap\Adapter\ExtLdap\Adapter']
        tags:
            - ldap
    Symfony\Component\Ldap\Adapter\ExtLdap\Adapter:
        arguments:
            -   host: my-server
                port: 389
                encryption: tls
                options:
                    protocol_version: 3
                    referrals: false

----------------------------------------

TITLE: Installing Symfony Filesystem Component
DESCRIPTION: Shows how to install the Symfony Filesystem component using Composer.

LANGUAGE: terminal
CODE:
$ composer require symfony/filesystem

----------------------------------------

TITLE: Configuring WordCount Constraint with PHP
DESCRIPTION: Example of using the WordCount constraint in a PHP class method to validate that a 'content' property contains between 100 and 200 words.

LANGUAGE: php
CODE:
// src/Entity/BlogPostDTO.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class BlogPostDTO
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('content', new Assert\WordCount(
            min: 100,
            max: 200,
        ));
    }
}

----------------------------------------

TITLE: Configuring Form Validation Groups in Symfony PHP
DESCRIPTION: Demonstrates how to disable form validation by setting the validation_groups option to false in a Symfony form configuration. This maintains basic integrity checks while suppressing validation rules.

LANGUAGE: php
CODE:
use Symfony\Component\OptionsResolver\OptionsResolver;

public function configureOptions(OptionsResolver $resolver): void
{
    $resolver->setDefaults([
        'validation_groups' => false,
    ]);
}

----------------------------------------

TITLE: Implementing Custom Client in PHP
DESCRIPTION: Example of creating a custom client by extending AbstractBrowser class and implementing the doRequest method.

LANGUAGE: PHP
CODE:
namespace Acme;

use Symfony\Component\BrowserKit\AbstractBrowser;
use Symfony\Component\BrowserKit\Response;

class Client extends AbstractBrowser
{
    protected function doRequest($request): Response
    {
        // ... convert request into a response

        return new Response($content, $status, $headers);
    }
}

----------------------------------------

TITLE: Configuring Logger Color Formatting
DESCRIPTION: Shows how to customize the color formatting for different log levels in the ConsoleLogger.

LANGUAGE: php
CODE:
// ...
$formatLevelMap = [
    LogLevel::CRITICAL => ConsoleLogger::ERROR,
    LogLevel::DEBUG    => ConsoleLogger::INFO,
];

$logger = new ConsoleLogger($output, [], $formatLevelMap);

----------------------------------------

TITLE: Implementing User Input in Symfony Console Commands
DESCRIPTION: Demonstrates various methods for getting user input in Symfony console commands, including asking questions, confirming actions, and presenting choices.

LANGUAGE: PHP
CODE:
$name = $io->ask('What is your name?');

$from = $io->ask('Where are you from?', 'United States');

$password = $io->askHidden('What is your password?');

$restart = $io->confirm('Restart the web server?', true);

$queue = $io->choice('Select the queue to analyze', ['queue1', 'queue2', 'queue3'], 'queue1');

----------------------------------------

TITLE: Applying CardScheme Constraint using XML Configuration
DESCRIPTION: This snippet demonstrates how to apply the CardScheme constraint using XML configuration. It validates the cardNumber property of the Transaction entity to ensure it's a valid VISA card number.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Transaction">
        <property name="cardNumber">
            <constraint name="CardScheme">
                <option name="schemes">
                    <value>VISA</value>
                </option>
                <option name="message">Your credit card number is invalid.</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Using Callbacks for Custom Field Mapping in Symfony Forms
DESCRIPTION: Demonstrates how to use getter and setter callbacks for custom mapping of individual form fields, particularly useful for complex transformations.

LANGUAGE: php
CODE:
public function buildForm(FormBuilderInterface $builder, array $options): void
{
    // ...

    $builder->add('state', ChoiceType::class, [
        'choices' => [
            'active' => true,
            'paused' => false,
        ],
        'getter' => function (Task $task, FormInterface $form): bool {
            return !$task->isCancelled() && !$task->isPaused();
        },
        'setter' => function (Task &$task, bool $state, FormInterface $form): void {
            if ($state) {
                $task->activate();
            } else {
                $task->pause();
            }
        },
    ]);
}

----------------------------------------

TITLE: Removing Cache Items in PHP with Symfony Cache
DESCRIPTION: Shows how to remove cache items using Symfony's Cache component. It demonstrates deleting single items, multiple items, and clearing the entire cache pool.

LANGUAGE: PHP
CODE:
$isDeleted = $cache->deleteItem('user_'.$userId);

$areDeleted = $cache->deleteItems(['category1', 'category2']);

$cacheIsEmpty = $cache->clear();

----------------------------------------

TITLE: Handling Authentication in Symfony HTTP Client
DESCRIPTION: Example of how to handle different authentication methods in Symfony HTTP Client.

LANGUAGE: yaml
CODE:
# config/packages/framework.yaml
framework:
    http_client:
        scoped_clients:
            example_api:
                base_uri: 'https://example.com/'
                auth_basic: 'the-username:the-password'
                auth_bearer: the-bearer-token
                auth_ntlm: 'the-username:the-password'

----------------------------------------

TITLE: Configuring Webpack for Encore
DESCRIPTION: JavaScript configuration file (webpack.config.js) for setting up Webpack Encore with various features and options.

LANGUAGE: javascript
CODE:
const Encore = require('@symfony/webpack-encore');

if (!Encore.isRuntimeEnvironmentConfigured()) {
    Encore.configureRuntimeEnvironment(process.env.NODE_ENV || 'dev');
}

Encore
    .setOutputPath('public/build/')
    .setPublicPath('/build')
    .addEntry('app', './assets/app.js')
    .enableStimulusBridge('./assets/controllers.json')
    .splitEntryChunks()
    .enableSingleRuntimeChunk()
    .cleanupOutputBeforeBuild()
    .enableBuildNotifications()
    .enableSourceMaps(!Encore.isProduction())
    .enableVersioning(Encore.isProduction())
    .configureBabel((config) => {
        config.plugins.push('@babel/plugin-transform-class-properties');
    })
    .configureBabelPresetEnv((config) => {
        config.useBuiltIns = 'usage';
        config.corejs = 3;
    });

module.exports = Encore.getWebpackConfig();

----------------------------------------

TITLE: Extracting Information with Symfony Crawler
DESCRIPTION: Shows various methods to extract information from nodes using the Crawler. This includes retrieving attribute values, node text, and executing custom lambdas on each node.

LANGUAGE: PHP
CODE:
// returns the attribute value for the first node
$crawler->attr('class');

// returns the node value for the first node
$crawler->text();

// returns the default text if the node does not exist
$crawler->text('Default text content');

// pass TRUE as the second argument of text() to remove all extra white spaces, including
// the internal ones (e.g. "  foo\n  bar    baz \n " is returned as "foo bar baz")
$crawler->text(null, true);

// extracts an array of attributes for all nodes
// (_text returns the node value)
// returns an array for each element in crawler,
// each with the value and href
$info = $crawler->extract(['_text', 'href']);

// executes a lambda for each node and return an array of results
$data = $crawler->each(function ($node, int $i): string {
    return $node->attr('href');
});

----------------------------------------

TITLE: Form Field Helpers Usage
DESCRIPTION: Examples of using low-level field helpers to manually construct form HTML elements with complete control over the markup.

LANGUAGE: html+twig
CODE:
<input
    name="{{ field_name(form.username) }}"
    id="{{ field_id(form.username) }}"
    value="{{ field_value(form.username) }}"
    placeholder="{{ field_label(form.username) }}"
    class="form-control"
>

<select name="{{ field_name(form.country) }}" class="form-control">
    <option value="">{{ field_label(form.country) }}</option>

    {% for label, value in field_choices(form.country) %}
        <option value="{{ value }}">{{ label }}</option>
    {% endfor %}
</select>

----------------------------------------

TITLE: Configuring Secrets in Symfony YAML
DESCRIPTION: YAML configuration options for the secrets system in Symfony, including vault directory and decryption environment variable.

LANGUAGE: yaml
CODE:
framework:
    secrets:
        #vault_directory: '%kernel.project_dir%/config/secrets/%kernel.environment%'
        #local_dotenv_file: '%kernel.project_dir%/.env.%kernel.environment%.local'
        #decryption_env_var: 'base64:default::SYMFONY_DECRYPTION_SECRET'

----------------------------------------

TITLE: Configuring CSRF Protection for Forms
DESCRIPTION: PHP code to set up CSRF protection for Symfony forms using the Security CSRF component.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Csrf\CsrfExtension;
use Symfony\Component\Form\Forms;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\Security\Csrf\CsrfTokenManager;
use Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator;
use Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage;

$requestStack = new RequestStack([$request]);

$csrfGenerator = new UriSafeTokenGenerator();
$csrfStorage = new SessionTokenStorage($requestStack);
$csrfManager = new CsrfTokenManager($csrfGenerator, $csrfStorage);

$formFactory = Forms::createFormFactoryBuilder()
    ->addExtension(new CsrfExtension($csrfManager))
    ->getFormFactory();

----------------------------------------

TITLE: Generating Static Error Pages in Symfony
DESCRIPTION: Command to generate static HTML error pages for improved performance and consistent error display in Symfony applications.

LANGUAGE: bash
CODE:
$ APP_ENV=prod php bin/console error:dump var/cache/prod/error_pages/

----------------------------------------

TITLE: Configuring Length Constraint in YAML for Symfony Validation
DESCRIPTION: Shows how to define the Length constraint for a property using YAML configuration. It specifies minimum and maximum length requirements with custom error messages.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Participant:
    properties:
        firstName:
            - Length:
                min: 2
                max: 50
                minMessage: 'Your first name must be at least {{ limit }} characters long'
                maxMessage: 'Your first name cannot be longer than {{ limit }} characters'

----------------------------------------

TITLE: Configuring Empty Data with Closure in Symfony Form Type
DESCRIPTION: Demonstrates how to configure empty_data using a closure function that creates the object only when needed.

LANGUAGE: php
CODE:
use Symfony\Component\Form\FormInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
// ...

public function configureOptions(OptionsResolver $resolver): void
{
    $resolver->setDefaults([
        'empty_data' => function (FormInterface $form): Blog {
            return new Blog($form->get('title')->getData());
        },
    ]);
}

----------------------------------------

TITLE: Filtering Validation Errors by Error Code in PHP
DESCRIPTION: Shows how to filter validation errors by specific error codes, using the UniqueEntity constraint as an example.

LANGUAGE: php
CODE:
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

$violations = $validator->validate(/* ... */);
if (0 !== count($violations->findByCodes(UniqueEntity::NOT_UNIQUE_ERROR))) {
    // handle this specific error (display some message, send an email, etc.)
}

----------------------------------------

TITLE: Configuring Cache Stampede Prevention in PHP
DESCRIPTION: Shows how to configure cache stampede prevention using the beta parameter in the Cache Contracts get() method.

LANGUAGE: php
CODE:
use Symfony\Contracts\Cache\ItemInterface;

$beta = 1.0;
$value = $cache->get('my_cache_key', function (ItemInterface $item): string {
    $item->expiresAfter(3600);
    $item->tag(['tag_0', 'tag_1']);

    return '...';
}, $beta);

----------------------------------------

TITLE: Configuring All Constraint with PHP
DESCRIPTION: PHP configuration for the All constraint using the loadValidatorMetadata method, applying NotBlank and Length constraints to the favoriteColors property of the User entity.

LANGUAGE: php
CODE:
// src/Entity/User.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class User
{
    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('favoriteColors', new Assert\All(
            constraints: [
                new Assert\NotBlank(),
                new Assert\Length(min: 5),
            ],
        ));
    }
}

----------------------------------------

TITLE: Accessing Cache Item Properties
DESCRIPTION: Demonstrates how to retrieve the key and value of a cache item using getter methods.

LANGUAGE: php
CODE:
$cacheItem = $cache->getItem('exchange_rate');
// ...
$key = $cacheItem->getKey();
$value = $cacheItem->get();

----------------------------------------

TITLE: Configuring Hostname Validation in YAML
DESCRIPTION: YAML configuration for the Hostname constraint, defining validation rules for the name property of ServerSettings entity.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\ServerSettings:
    properties:
        name:
            - Hostname:
                message: The server name must be a valid hostname.

----------------------------------------

TITLE: Defining Negative Constraint in XML
DESCRIPTION: Example of using the Negative constraint on a property in an XML configuration file. This ensures the 'withdraw' property is a negative number.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\TransferItem">
        <property name="withdraw">
            <constraint name="Negative"></constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Configuring Symfony to Use Bootstrap 5 Form Theme (PHP)
DESCRIPTION: This PHP configuration sets up Symfony to use the Bootstrap 5 form theme globally for all forms in the application.

LANGUAGE: php
CODE:
// config/packages/twig.php
use Symfony\Config\TwigConfig;

return static function(TwigConfig $twig): void {
    $twig->formThemes(['bootstrap_5_layout.html.twig']);

    // ...
};

----------------------------------------

TITLE: Validating Emails using PHP Code in Symfony
DESCRIPTION: Shows how to implement email validation using PHP code with loadValidatorMetadata method. Configures email validation for an Author entity programmatically.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('email', new Assert\Email(
            message: 'The email "{{ value }}" is not a valid email.',
        ));
    }
}

----------------------------------------

TITLE: Adding Additional Route in Symfony Controller
DESCRIPTION: Demonstrates how to add another route and method to the existing controller, showcasing Symfony's ability to handle multiple routes within a single controller.

LANGUAGE: php
CODE:
// src/Controller/DefaultController.php
namespace App\Controller;

use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

class DefaultController
{
    // ...

    #[Route('/simplicity', methods: ['GET'])]
    public function simple(): Response
    {
        return new Response('Simple! Easy! Great!');
    }
}

----------------------------------------

TITLE: Basic Usage of ExpressionLanguage in PHP
DESCRIPTION: Demonstrates how to use the ExpressionLanguage class to evaluate and compile simple expressions.

LANGUAGE: php
CODE:
use Symfony\Component\ExpressionLanguage\ExpressionLanguage;

$expressionLanguage = new ExpressionLanguage();

var_dump($expressionLanguage->evaluate('1 + 2')); // displays 3

var_dump($expressionLanguage->compile('1 + 2')); // displays (1 + 2)

----------------------------------------

TITLE: Creating Task Entity in PHP with Collection Support
DESCRIPTION: Defines a Task entity class with description and tags collection properties, including required getters and setters. Uses Doctrine ArrayCollection for tags management.

LANGUAGE: PHP
CODE:
// src/Entity/Task.php
namespace App\Entity;

use Doctrine\Common\Collections\Collection;

class Task
{
    protected string $description;
    protected Collection $tags;

    public function __construct()
    {
        $this->tags = new ArrayCollection();
    }

    public function getDescription(): string
    {
        return $this->description;
    }

    public function setDescription(string $description): void
    {
        $this->description = $description;
    }

    public function getTags(): Collection
    {
        return $this->tags;
    }
}

----------------------------------------

TITLE: Configuring Access Control in YAML
DESCRIPTION: Example of configuring access_control rules in Symfony's security.yaml file. Demonstrates various matching options like path, IP, host, and methods.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
parameters:
    env(TRUSTED_IPS): '10.0.0.1, 10.0.0.2'

security:
    # ...
    access_control:
        - { path: '^/admin', roles: ROLE_USER_PORT, ip: 127.0.0.1, port: 8080 }
        - { path: '^/admin', roles: ROLE_USER_IP, ip: 127.0.0.1 }
        - { path: '^/admin', roles: ROLE_USER_HOST, host: symfony\.com$ }
        - { path: '^/admin', roles: ROLE_USER_METHOD, methods: [POST, PUT] }

        # ips can be comma-separated, which is especially useful when using env variables
        - { path: '^/admin', roles: ROLE_USER_IP, ips: '%env(TRUSTED_IPS)%' }
        - { path: '^/admin', roles: ROLE_USER_IP, ips: [127.0.0.1, ::1, '%env(TRUSTED_IPS)%'] }

        # for custom matching needs, use a request matcher service
        - { roles: ROLE_USER, request_matcher: App\Security\RequestMatcher\MyRequestMatcher }

        # require ROLE_ADMIN for 'admin' route. You can use the shortcut "route: "xxx", instead of "attributes": ["_route": "xxx"]
        - { attributes: {'_route': 'admin'}, roles: ROLE_ADMIN }
        - { route: 'admin', roles: ROLE_ADMIN }

----------------------------------------

TITLE: Configuring DateTime Validation in YAML
DESCRIPTION: Example of DateTime validation configuration using YAML format. Demonstrates how to validate the createdAt property in the validation.yaml configuration file.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        createdAt:
            - DateTime: ~

----------------------------------------

TITLE: Implementing CompilerPass in Symfony Bundle
DESCRIPTION: This snippet shows how to implement the CompilerPassInterface directly in a Symfony Bundle class. It demonstrates manipulating the service container and processing tagged services within the process() method of the bundle.

LANGUAGE: php
CODE:
// src/MyBundle/MyBundle.php
namespace App\MyBundle;

use App\DependencyInjection\Compiler\CustomPass;
use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\HttpKernel\Bundle\AbstractBundle;

class MyBundle extends AbstractBundle implements CompilerPassInterface
{
    public function process(ContainerBuilder $container): void
    {
        // in this method you can manipulate the service container:
        // for example, changing some container service:
        $container->getDefinition('app.some_private_service')->setPublic(true);

        // or processing tagged services:
        foreach ($container->findTaggedServiceIds('some_tag') as $id => $tags) {
            // ...
        }
    }
}

----------------------------------------

TITLE: Process Error Handling with mustRun()
DESCRIPTION: Example showing error handling using the mustRun() method which throws exceptions on failure

LANGUAGE: PHP
CODE:
use Symfony\Component\Process\Exception\ProcessFailedException;
use Symfony\Component\Process\Process;

$process = new Process(['ls', '-lsa']);

try {
    $process->mustRun();
    echo $process->getOutput();
} catch (ProcessFailedException $exception) {
    echo $exception->getMessage();
}

----------------------------------------

TITLE: Creating Cache Items with Cache Contracts
DESCRIPTION: Demonstrates how to create and retrieve cache items using Symfony's Cache Contracts interface. Shows the usage of the get() method with a callback function.

LANGUAGE: php
CODE:
// $cache pool object was created before
$productsCount = $cache->get('stats.products_count', function (ItemInterface $item): string {
    // [...]
});

----------------------------------------

TITLE: Using Flash Messages in Symfony Controller
DESCRIPTION: Example of how to set and retrieve flash messages in a Symfony controller.

LANGUAGE: php
CODE:
public function update(Request $request): Response
{
    // ...

    if ($form->isSubmitted() && $form->isValid()) {
        // do some sort of processing

        $this->addFlash(
            'notice',
            'Your changes were saved!'
        );
        // $this->addFlash() is equivalent to $request->getSession()->getFlashBag()->add()

        return $this->redirectToRoute(/* ... */);
    }

    return $this->render(/* ... */);
}

----------------------------------------

TITLE: Using Rate Limiter in Controller
DESCRIPTION: Example of using a rate limiter in a Symfony controller to control API request rates.

LANGUAGE: php
CODE:
// src/Controller/ApiController.php
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\TooManyRequestsHttpException;
use Symfony\Component\RateLimiter\RateLimiterFactory;

class ApiController extends AbstractController
{
    public function index(Request $request, RateLimiterFactory $anonymousApiLimiter): Response
    {
        $limiter = $anonymousApiLimiter->create($request->getClientIp());

        if (false === $limiter->consume(1)->isAccepted()) {
            throw new TooManyRequestsHttpException();
        }

        // ...
    }
}

----------------------------------------

TITLE: Basic Form Type Testing in Symfony
DESCRIPTION: Basic implementation of TypeTestCase for testing form submissions and custom form views. Demonstrates validation of form data submission and view variable checking.

LANGUAGE: php
CODE:
// tests/Form/Type/TestedTypeTest.php
namespace App\Tests\Form\Type;

use App\Form\Type\TestedType;
use App\Model\TestObject;
use Symfony\Component\Form\Test\TypeTestCase;

class TestedTypeTest extends TypeTestCase
{
    public function testSubmitValidData(): void
    {
        $formData = [
            'test' => 'test',
            'test2' => 'test2',
        ];

        $model = new TestObject();
        // $model will retrieve data from the form submission; pass it as the second argument
        $form = $this->factory->create(TestedType::class, $model);

        $expected = new TestObject();
        // ...populate $expected properties with the data stored in $formData

        // submit the data to the form directly
        $form->submit($formData);

        // This check ensures there are no transformation failures
        $this->assertTrue($form->isSynchronized());

        // check that $model was modified as expected when the form was submitted
        $this->assertEquals($expected, $model);
    }

    public function testCustomFormView(): void
    {
        $formData = new TestObject();
        // ... prepare the data as you need

        // The initial data may be used to compute custom view variables
        $view = $this->factory->create(TestedType::class, $formData)
            ->createView();

        $this->assertArrayHasKey('custom_var', $view->vars);
        $this->assertSame('expected value', $view->vars['custom_var']);
    }
}

----------------------------------------

TITLE: Parsing YAML String in PHP
DESCRIPTION: Use the Yaml::parse() method to convert a YAML string into a PHP array.

LANGUAGE: PHP
CODE:
use Symfony\Component\Yaml\Yaml;

$value = Yaml::parse("foo: bar");
// $value = ['foo' => 'bar']

----------------------------------------

TITLE: Using Custom Twig Filter in Symfony Template
DESCRIPTION: Demonstrates the usage of a custom Twig filter 'greet' in a Symfony template.

LANGUAGE: Twig
CODE:
{# templates/default/index.html.twig #}
{# Will print something like "Hey Symfony!" #}
<h1>{{ name|greet }}</h1>

----------------------------------------

TITLE: Parsing YAML with Object Support in PHP
DESCRIPTION: Use the PARSE_OBJECT flag to parse YAML strings containing serialized PHP objects.

LANGUAGE: PHP
CODE:
$dumped = '!php/object \'O:8:"stdClass":1:{s:5:"foo";s:7:"bar";}\'';
$parsed = Yaml::parse($dumped, Yaml::PARSE_OBJECT);
var_dump(is_object($parsed)); // true
echo $parsed->foo; // bar

----------------------------------------

TITLE: Configuring Parent Services in YAML
DESCRIPTION: YAML configuration for setting up parent-child service relationships and dependency injection in Symfony's service container.

LANGUAGE: yaml
CODE:
services:\n    App\Repository\BaseDoctrineRepository:\n        abstract: true\n        arguments: ['@doctrine.orm.entity_manager']\n        calls:\n            - setLogger: ['@logger']\n\n    App\Repository\DoctrineUserRepository:\n        parent: App\Repository\BaseDoctrineRepository\n\n    App\Repository\DoctrinePostRepository:\n        parent: App\Repository\BaseDoctrineRepository

----------------------------------------

TITLE: Defining Time Constraint in XML
DESCRIPTION: This snippet illustrates how to define the Time constraint for a property using XML in a Symfony validation configuration file.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Event">
        <property name="startsAt">
            <constraint name="Time"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Implementing Basic Controller in PHP
DESCRIPTION: Creates a basic controller class that generates and returns a random number response. Shows the initial implementation without routing.

LANGUAGE: php
CODE:
<?php
// src/Controller/LuckyController.php
namespace App\Controller;

use Symfony\Component\HttpFoundation\Response;

class LuckyController
{
    public function number(): Response
    {
        $number = random_int(0, 100);

        return new Response(
            '<html><body>Lucky number: '.$number.'</body></html>'
        );
    }
}

----------------------------------------

TITLE: Implementing Language Validation with PHP
DESCRIPTION: Example showing how to configure the Language constraint using PHP code with ClassMetadata.

LANGUAGE: php
CODE:
// src/Entity/User.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class User
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('preferredLanguage', new Assert\Language());
    }
}

----------------------------------------

TITLE: Setting Custom Submit Button Attributes in PHP
DESCRIPTION: Example demonstrating how to add custom HTML attributes to a submit button using the attr option.

LANGUAGE: PHP
CODE:
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
// ...

$builder->add('save', SubmitType::class, [
    'attr' => ['class' => 'save'],
]);

----------------------------------------

TITLE: Creating Symfony Console Command with Logger
DESCRIPTION: Shows how to create a Symfony Console Command that uses the ConsoleLogger and implements a dependency requiring a PSR-3 logger.

LANGUAGE: php
CODE:
namespace Acme\Console\Command;

use Acme\MyDependency;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Logger\ConsoleLogger;
use Symfony\Component\Console\Output\OutputInterface;

#[AsCommand(
    name: 'my:command',
    description: 'Use an external dependency requiring a PSR-3 logger'
)]
class MyCommand extends Command
{
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $logger = new ConsoleLogger($output);

        $myDependency = new MyDependency($logger);
        $myDependency->doStuff();

        return Command::SUCCESS;
    }
}

----------------------------------------

TITLE: Mercure Subscription in Twig Template
DESCRIPTION: Client-side JavaScript code for subscribing to Mercure updates

LANGUAGE: html
CODE:
<script>
const eventSource = new EventSource("{{ mercure('https://example.com/books/1')|escape('js') }}");
eventSource.onmessage = event => {
    console.log(JSON.parse(event.data));
}
</script>

----------------------------------------

TITLE: Configuring Week Constraint with PHP
DESCRIPTION: Shows how to apply the Week constraint using PHP code in the entity class. It sets a minimum and maximum week range for the year 2022.

LANGUAGE: php
CODE:
// src/Entity/OnlineCourse.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class OnlineCourse
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('startWeek', new Assert\Week(
            min: '2022-W01',
            max: '2022-W20',
        ));
    }
}

----------------------------------------

TITLE: Testing with MockClock
DESCRIPTION: Example of unit testing time-sensitive code using MockClock to control the current time.

LANGUAGE: PHP
CODE:
use PHPUnit\Framework\TestCase;
use Symfony\Component\Clock\MockClock;

class ExpirationCheckerTest extends TestCase
{
    public function testIsExpired(): void
    {
        $clock = new MockClock('2022-11-16 15:20:00');
        $expirationChecker = new ExpirationChecker($clock);
        $validUntil = new DateTimeImmutable('2022-11-16 15:25:00');

        $this->assertFalse($expirationChecker->isExpired($validUntil));
        
        $clock->sleep(600);
        
        $this->assertTrue($expirationChecker->isExpired($validUntil));
        
        $clock->modify('2022-11-16 15:00:00');
        
        $this->assertFalse($expirationChecker->isExpired($validUntil));
    }
}

----------------------------------------

TITLE: Configuring Tagged Services with Priority
DESCRIPTION: Demonstration of setting priority for tagged services using different configuration formats

LANGUAGE: yaml
CODE:
services:
    App\Handler\One:
        tags:
            - { name: 'app.handler', priority: 20 }

----------------------------------------

TITLE: Applying UUID Constraint using PHP Attributes
DESCRIPTION: Demonstrates how to apply the UUID constraint to a property using PHP attributes in a Symfony entity class.

LANGUAGE: php
CODE:
// src/Entity/File.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class File
{
    #[Assert\Uuid]
    protected string $identifier;
}

----------------------------------------

TITLE: Configuring Reset Button with Translation Parameters in PHP
DESCRIPTION: Example of setting up a reset button with translation parameters to replace placeholders in the label.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\ResetType;
// ...

$builder->add('send', ResetType::class, [
    'label' => 'form.order.reset',
    'label_translation_parameters' => [
        '%company%' => 'ACME Inc.',
    ],
]);

----------------------------------------

TITLE: Setting Validation Groups in Controller Form Creation
DESCRIPTION: Shows how to specify validation groups when creating a form builder in a Symfony controller. This approach allows targeting specific validation constraints for form validation.

LANGUAGE: php
CODE:
$form = $this->createFormBuilder($user, [
    'validation_groups' => ['registration'],
])->add(/* ... */);

----------------------------------------

TITLE: Displaying Result Messages in Symfony Console Commands
DESCRIPTION: Demonstrates how to display success, info, warning, and error messages using SymfonyStyle in Symfony console commands.

LANGUAGE: PHP
CODE:
$io->success('Task completed successfully');

$io->info('Here is some information');

$io->warning('This is a warning message');

$io->error('An error occurred');

----------------------------------------

TITLE: Accessing POST Values Directly in Symfony Request
DESCRIPTION: Shows how to access POST values directly through the Symfony Request object, as an alternative to using form getData() method.

LANGUAGE: php
CODE:
$request->getPayload()->get('name');

----------------------------------------

TITLE: Configuring ISSN Constraint in YAML for Symfony Validation
DESCRIPTION: This snippet shows how to define the ISSN validation constraint for a property in a Symfony validation configuration file using YAML format.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Journal:
    properties:
        issn:
            - Issn: ~

----------------------------------------

TITLE: Creating Symfony Project with LTS Version
DESCRIPTION: Command to create a new Symfony project using the latest Long Term Support (LTS) version.

LANGUAGE: bash
CODE:
$ symfony new my_project_directory --version=lts

----------------------------------------

TITLE: Reading File Contents with Symfony Finder
DESCRIPTION: Shows how to read the contents of files found by the Symfony Finder component.

LANGUAGE: php
CODE:
use Symfony\Component\Finder\Finder;

$finder = new Finder();
$finder->files()->in(__DIR__);

foreach ($finder as $file) {
    $contents = $file->getContents();

    // ...
}

----------------------------------------

TITLE: Implementing Single Command Application using SingleCommandApplication Class
DESCRIPTION: Creates a standalone command line tool using Symfony's SingleCommandApplication class. Demonstrates setting command name, version, adding arguments and options, and defining command execution logic.

LANGUAGE: php
CODE:
#!/usr/bin/env php
<?php
require __DIR__.'/vendor/autoload.php';

use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;

(new SingleCommandApplication())
    ->setName('My Super Command') // Optional
    ->setVersion('1.0.0') // Optional
    ->addArgument('foo', InputArgument::OPTIONAL, 'The directory')
    ->addOption('bar', null, InputOption::VALUE_REQUIRED)
    ->setCode(function (InputInterface $input, OutputInterface $output): int {
        // output arguments and options
    })
    ->run();

----------------------------------------

TITLE: PHP Realpath Cache Configuration
DESCRIPTION: PHP INI settings for optimizing realpath cache performance in Symfony applications.

LANGUAGE: ini
CODE:
; php.ini
; maximum memory allocated to store the results
realpath_cache_size=4096K

; save the results for 10 minutes (600 seconds)
realpath_cache_ttl=600

----------------------------------------

TITLE: Adding Links to HTTP Response in Symfony Controller
DESCRIPTION: PHP code demonstrating how to add Link headers to the HTTP response directly from a Symfony controller using the WebLink component.

LANGUAGE: php
CODE:
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\WebLink\GenericLinkProvider;
use Symfony\Component\WebLink\Link;

class BlogController extends AbstractController
{
    public function index(Request $request): Response
    {
        // using the addLink() shortcut provided by AbstractController
        $this->addLink($request, (new Link('preload', '/app.css'))->withAttribute('as', 'style'));

        // alternative if you don't want to use the addLink() shortcut
        $linkProvider = $request->attributes->get('_links', new GenericLinkProvider());
        $request->attributes->set('_links', $linkProvider->withLink(
            (new Link('preload', '/app.css'))->withAttribute('as', 'style')
        ));

        return $this->render('...');
    }
}

----------------------------------------

TITLE: Registering Event Listener as Service in YAML
DESCRIPTION: Configuration to register the ExceptionListener as a service with the kernel.event_listener tag in YAML format.

LANGUAGE: YAML
CODE:
# config/services.yaml
services:
    App\EventListener\ExceptionListener:
        tags: [kernel.event_listener]

----------------------------------------

TITLE: Accessing Language Names with PHP
DESCRIPTION: Demonstrates how to access language names and codes using the Languages class

LANGUAGE: PHP
CODE:
use Symfony\Component\Intl\Languages;

\Locale::setDefault('en');

$languages = Languages::getNames();
// ('languageCode' => 'languageName')
// => ['ab' => 'Abkhazian', 'ace' => 'Achinese', ...]

$languages = Languages::getAlpha3Names();
// ('languageCode' => 'languageName')
// => ['abk' => 'Abkhazian', 'ace' => 'Achinese', ...]

$language = Languages::getName('fr');
// => 'French'

$language = Languages::getAlpha3Name('fra');
// => 'French'

----------------------------------------

TITLE: Basic Dump Function Usage
DESCRIPTION: Example showing basic usage of the dump() function for debugging variables.

LANGUAGE: PHP
CODE:
require __DIR__.'/vendor/autoload.php';

$someVar = ...;

dump($someVar);

// dump() returns the passed value, so you can dump an object and keep using it
dump($someObject)->someMethod();

----------------------------------------

TITLE: Accessing Configuration Parameters in Controllers
DESCRIPTION: Shows how to access configuration parameters in Symfony controllers.

LANGUAGE: php
CODE:
// src/Controller/UserController.php
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;

class UserController extends AbstractController
{
    // ...

    public function index(): Response
    {
        $projectDir = $this->getParameter('kernel.project_dir');
        $adminEmail = $this->getParameter('app.admin_email');

        // ...
    }
}

----------------------------------------

TITLE: Using PHP ConfigBuilders for Configuration
DESCRIPTION: Example of using PHP ConfigBuilders to configure Symfony applications.

LANGUAGE: php
CODE:
// config/packages/security.php
use Symfony\Config\SecurityConfig;

return static function (SecurityConfig $security): void {
    $security->firewall('main')
        ->pattern('^/*')
        ->lazy(true)
        ->security(false);

    $security
        ->roleHierarchy('ROLE_ADMIN', ['ROLE_USER'])
        ->roleHierarchy('ROLE_SUPER_ADMIN', ['ROLE_ADMIN', 'ROLE_ALLOWED_TO_SWITCH'])
        ->accessControl()
            ->path('^/user')
            ->roles('ROLE_USER');

    $security->accessControl(['path' => '^/admin', 'roles' => 'ROLE_ADMIN']);
};

----------------------------------------

TITLE: Applying Slug Constraint using PHP Attributes
DESCRIPTION: Example of how to apply the Slug constraint to a property in a PHP class using attributes. This snippet demonstrates the usage in an Author entity class.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\Slug]
    protected string $slug;
}

----------------------------------------

TITLE: TimeType Configuration with Timestamp Input
DESCRIPTION: Demonstrates how to configure TimeType field to handle Unix timestamp input data using choice widget format.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\TimeType;
// ...

$builder->add('startTime', TimeType::class, [
    'input'  => 'timestamp',
    'widget' => 'choice',
]);

----------------------------------------

TITLE: Configuring Method Calls for Service Definitions in Symfony PHP
DESCRIPTION: Shows how to configure method calls for setter injection in service definitions.

LANGUAGE: php
CODE:
// gets all configured method calls
$methodCalls = $definition->getMethodCalls();

// configures a new method call
$definition->addMethodCall('setLogger', [new Reference('logger')]);

// configures an immutable-setter
$definition->addMethodCall('withLogger', [new Reference('logger')], true);

// replaces all previously configured method calls with the passed array
$definition->setMethodCalls($methodCalls);

----------------------------------------

TITLE: Registering Panther PHPUnit Extension
DESCRIPTION: XML configuration to register the Panther PHPUnit extension in phpunit.xml.dist.

LANGUAGE: XML
CODE:
<!-- phpunit.xml.dist -->
<extensions>
    <extension class="Symfony\Component\Panther\ServerExtension"/>
</extensions>

----------------------------------------

TITLE: Defining ISSN Constraint in XML for Symfony Validation
DESCRIPTION: This code demonstrates how to configure the ISSN validation constraint for a property in a Symfony validation configuration file using XML format.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Journal">
        <property name="issn">
            <constraint name="Issn"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Example of a CSRF Attack Using HTML and JavaScript
DESCRIPTION: Demonstrates a malicious form that could be used to perform a CSRF attack by submitting a form without the user's knowledge.

LANGUAGE: html
CODE:
<html>
    <body>
        <form action="https://example.com/settings/update-email" method="POST">
            <input type="hidden" name="email" value="malicious-actor-address@some-domain.com"/>
        </form>
        <script>
            document.forms[0].submit();
        </script>

        <!-- some content here to distract the user -->
    </body>
</html>

----------------------------------------

TITLE: Customizing YAML Output Format in PHP
DESCRIPTION: Control the inline level and indentation of YAML output using Yaml::dump() parameters.

LANGUAGE: PHP
CODE:
echo Yaml::dump($array, 1);

// Outputs:
// foo: bar
// bar: { foo: bar, bar: baz }

echo Yaml::dump($array, 2, 8);

// Outputs:
// foo: bar
// bar:
//         foo: bar
//         bar: baz

----------------------------------------

TITLE: Applying NegativeOrZero Constraint using PHP Attributes
DESCRIPTION: This snippet demonstrates how to apply the NegativeOrZero constraint to a property using PHP attributes in a Symfony entity class.

LANGUAGE: php
CODE:
// src/Entity/TransferItem.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class UnderGroundGarage
{
    #[Assert\NegativeOrZero]
    protected int $level;
}

----------------------------------------

TITLE: Configuring LanguageType Field Options
DESCRIPTION: Example of configuring a language selection field with options for ISO codes and self-translation. The field allows users to select from a predefined list of languages with customizable display format.

LANGUAGE: PHP
CODE:
use Symfony\Component\Form\Extension\Core\Type\LanguageType;

$builder->add('language', LanguageType::class, [
    'alpha3' => false,              // Use ISO 639-1 alpha-2 codes
    'choice_self_translation' => false,  // Display in current locale
    'multiple' => false,            // Single selection
    'expanded' => false             // Render as select field
]);

----------------------------------------

TITLE: Accessing Public Services in Symfony
DESCRIPTION: Demonstrates how to access a public service directly from the container. This is possible only for public services.

LANGUAGE: php
CODE:
$doctrine = $container->get('doctrine');

----------------------------------------

TITLE: Validating Emails using PHP Attributes in Symfony
DESCRIPTION: Demonstrates email validation using PHP attributes in a Symfony Entity class. Uses the Assert\Email constraint to validate an email property with a custom error message.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\Email(
        message: 'The email {{ value }} is not a valid email.',
    )]
    protected string $email;
}

----------------------------------------

TITLE: Checking for Security Vulnerabilities
DESCRIPTION: Command to check for known security vulnerabilities in the project's dependencies using the Symfony CLI.

LANGUAGE: bash
CODE:
$ symfony check:security

----------------------------------------

TITLE: Basic PHP HTML Sanitizer Usage
DESCRIPTION: Shows basic usage of the HTML Sanitizer component in a Symfony controller context, demonstrating how to inject and use the sanitizer service.

LANGUAGE: php
CODE:
namespace App\Controller;

use Symfony\Component\HtmlSanitizer\HtmlSanitizerInterface;

class BlogPostController extends AbstractController
{
    public function createAction(HtmlSanitizerInterface $htmlSanitizer, Request $request): Response
    {
        $unsafeContents = $request->getPayload()->get('post_contents');

        $safeContents = $htmlSanitizer->sanitize($unsafeContents);
        // ... proceed using the safe HTML
    }
}

----------------------------------------

TITLE: Implementing Length Constraint with PHP in Symfony Validation
DESCRIPTION: Demonstrates how to apply the Length constraint to a property using PHP code. It sets up minimum and maximum length requirements for a 'firstName' field with custom error messages.

LANGUAGE: php
CODE:
// src/Entity/Participant.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Participant
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('firstName', new Assert\Length(
            min: 2,
            max: 50,
            minMessage: 'Your first name must be at least {{ limit }} characters long',
            maxMessage: 'Your first name cannot be longer than {{ limit }} characters',
        ));
    }
}

----------------------------------------

TITLE: Installing Symfony Finder Component with Composer
DESCRIPTION: Command to install the Symfony Finder component using Composer package manager.

LANGUAGE: bash
CODE:
$ composer require symfony/finder

----------------------------------------

TITLE: Directory Creation with Permissions
DESCRIPTION: Shows how to create a directory with specific permissions using mkdir method.

LANGUAGE: PHP
CODE:
$filesystem->mkdir('/tmp/photos', 0700);

----------------------------------------

TITLE: Creating New Symfony Web Application
DESCRIPTION: Command to create a new Symfony web application project using the Symfony CLI, specifying the version and including web application packages.

LANGUAGE: bash
CODE:
$ symfony new my_project_directory --version="7.3.x-dev" --webapp

----------------------------------------

TITLE: Initializing Symfony Console Application with EventDispatcher
DESCRIPTION: This snippet demonstrates how to set up a Symfony Console application with an EventDispatcher. It creates an EventDispatcher instance and sets it on the Application object.

LANGUAGE: php
CODE:
use Symfony\Component\Console\Application;
use Symfony\Component\EventDispatcher\EventDispatcher;

$dispatcher = new EventDispatcher();

$application = new Application();
$application->setDispatcher($dispatcher);
$application->run();

----------------------------------------

TITLE: Creating and Using an Expiring Lock in Symfony
DESCRIPTION: Example of creating an expiring lock with a specific TTL and handling its expiration.

LANGUAGE: PHP
CODE:
// ...
$lock = $factory->createLock('pdf-creation', 30);

if (!$lock->acquire()) {
    return;
}
try {
    // perform a job during less than 30 seconds
} finally {
    $lock->release();
}

----------------------------------------

TITLE: Acquiring and Releasing a Semaphore in PHP
DESCRIPTION: This code snippet shows how to create, acquire, and release a semaphore using the Symfony Semaphore Component. It creates a semaphore for 'pdf-invoice-generation' with a limit of 2 processes.

LANGUAGE: PHP
CODE:
// ...
$semaphore = $factory->createSemaphore('pdf-invoice-generation', 2);

if ($semaphore->acquire()) {
    // The resource "pdf-invoice-generation" is locked.
    // Here you can safely compute and generate the invoice.

    $semaphore->release();
}

----------------------------------------

TITLE: Configuring Command Arguments in Symfony
DESCRIPTION: Demonstrates how to add required and optional arguments to a Symfony console command using addArgument(). Shows configuration of single and array arguments.

LANGUAGE: php
CODE:
protected function configure(): void
{
    $this
        ->addArgument('name', InputArgument::REQUIRED, 'Who do you want to greet?')
        ->addArgument('last_name', InputArgument::OPTIONAL, 'Your last name?')
    ;
}

----------------------------------------

TITLE: Using Resource Hints in Twig Template
DESCRIPTION: Example of using various resource hint functions (dns_prefetch, preconnect, prefetch, prerender) in a Twig template.

LANGUAGE: html+twig
CODE:
<head>
    <!-- ... -->
    <link rel="alternate" href="{{ link('/index.jsonld', 'alternate') }}">
    <link rel="preload" href="{{ preload('/app.css', {as: 'style', nopush: true}) }}" as="style">
    <!-- ... -->
</head>

----------------------------------------

TITLE: Implementing a Custom Message Receiver in PHP
DESCRIPTION: Example of a custom receiver that reads messages from a CSV file.

LANGUAGE: PHP
CODE:
namespace App\MessageReceiver;

use App\Message\NewOrder;
use Symfony\Component\Messenger\Envelope;
use Symfony\Component\Messenger\Exception\MessageDecodingFailedException;
use Symfony\Component\Messenger\Transport\Receiver\ReceiverInterface;
use Symfony\Component\Serializer\SerializerInterface;

class NewOrdersFromCsvFileReceiver implements ReceiverInterface
{
    private $connection;

    public function __construct(
        private SerializerInterface $serializer,
        private string $filePath,
    ) {
        // Available connection bundled with the Messenger component
        // can be found in "Symfony\Component\Messenger\Bridge\*\Transport\Connection".
        $this->connection = /* create your connection */;
    }

    public function get(): iterable
    {
        // Receive the envelope according to your transport ($yourEnvelope here),
        // in most cases, using a connection is the easiest solution.
        $yourEnvelope = $this->connection->get();
        if (null === $yourEnvelope) {
            return [];
        }

        try {
            $envelope = $this->serializer->decode([
                'body' => $yourEnvelope['body'],
                'headers' => $yourEnvelope['headers'],
            ]);
        } catch (MessageDecodingFailedException $exception) {
            $this->connection->reject($yourEnvelope['id']);
            throw $exception;
        }

        return [$envelope->with(new CustomStamp($yourEnvelope['id']))];
    }

    public function ack(Envelope $envelope): void
    {
        // Add information about the handled message
    }

    public function reject(Envelope $envelope): void
    {
        // In the case of a custom connection
        $id = /* get the message id thanks to information or stamps present in the envelope */;

        $this->connection->reject($id);
    }
}

----------------------------------------

TITLE: Importing Configuration Files in YAML
DESCRIPTION: Demonstrates how to import other configuration files using YAML format.

LANGUAGE: yaml
CODE:
# config/services.yaml
imports:
    - { resource: 'legacy_config.php' }
    - { resource: '/etc/myapp/*.yaml' }
    - { resource: 'my_config_file.xml', ignore_errors: not_found }
    - { resource: 'my_other_config_file.xml', ignore_errors: true }

# ...

----------------------------------------

TITLE: Defining NotEqualTo Constraint Using PHP Attributes
DESCRIPTION: This snippet demonstrates how to use the NotEqualTo constraint with PHP attributes in a Person entity class. It applies the constraint to the firstName and age properties.

LANGUAGE: php
CODE:
// src/Entity/Person.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Person
{
    #[Assert\NotEqualTo('Mary')]
    protected string $firstName;

    #[Assert\NotEqualTo(
        value: 15,
    )]
    protected int $age;
}

----------------------------------------

TITLE: Creating a Lazy-Loaded Twig Extension
DESCRIPTION: Example of creating a lazy-loaded Twig extension for better performance with complex dependencies.

LANGUAGE: php
CODE:
// src/Twig/AppExtension.php
namespace App\Twig;

use App\Twig\AppRuntime;
use Twig\Extension\AbstractExtension;
use Twig\TwigFilter;

class AppExtension extends AbstractExtension
{
    public function getFilters(): array
    {
        return [
            // the logic of this filter is now implemented in a different class
            new TwigFilter('price', [AppRuntime::class, 'formatPrice']),
        ];
    }
}

LANGUAGE: php
CODE:
// src/Twig/AppRuntime.php
namespace App\Twig;

use Twig\Extension\RuntimeExtensionInterface;

class AppRuntime implements RuntimeExtensionInterface
{
    public function __construct()
    {
        // this simple example doesn't define any dependency, but in your own
        // extensions, you'll need to inject services using this constructor
    }

    public function formatPrice(float $number, int $decimals = 0, string $decPoint = '.', string $thousandsSep = ','): string
    {
        $price = number_format($number, $decimals, $decPoint, $thousandsSep);
        $price = '$'.$price;

        return $price;
    }
}

----------------------------------------

TITLE: Creating a Custom Twig Filter
DESCRIPTION: Example of creating a custom Twig filter called 'price' for formatting numbers as currency.

LANGUAGE: php
CODE:
// src/Twig/AppExtension.php
namespace App\Twig;

use Twig\Extension\AbstractExtension;
use Twig\TwigFilter;

class AppExtension extends AbstractExtension
{
    public function getFilters(): array
    {
        return [
            new TwigFilter('price', [$this, 'formatPrice']),
        ];
    }

    public function formatPrice(float $number, int $decimals = 0, string $decPoint = '.', string $thousandsSep = ','): string
    {
        $price = number_format($number, $decimals, $decPoint, $thousandsSep);
        $price = '$'.$price;

        return $price;
    }
}

----------------------------------------

TITLE: PercentType Field Configuration Options
DESCRIPTION: Configuration options for the Symfony PercentType form field, including html5, scale, symbol, and type settings. The field can handle both fractional (0.95) and integer (95) percentage values with customizable display formats.

LANGUAGE: yaml
CODE:
PercentType:
  html5: false     # boolean - enables HTML5 number input
  scale: 0        # integer - decimal places allowed
  symbol: "%"    # string|boolean - percentage symbol to display
  type: fractional # string - storage format (fractional|integer)

----------------------------------------

TITLE: Using LoaderResolver and DelegatingLoader in PHP
DESCRIPTION: Shows how to use Symfony's LoaderResolver and DelegatingLoader to dynamically select and apply the appropriate loader for a given resource. It demonstrates creating a resolver with a custom loader and using it with a delegating loader.

LANGUAGE: php
CODE:
use Acme\Config\Loader\YamlUserLoader;
use Symfony\Component\Config\Loader\DelegatingLoader;
use Symfony\Component\Config\Loader\LoaderResolver;

$loaderResolver = new LoaderResolver([new YamlUserLoader($fileLocator)]);
$delegatingLoader = new DelegatingLoader($loaderResolver);

// YamlUserLoader is used to load this resource because it supports
// files with the '.yaml' extension
$delegatingLoader->load(__DIR__.'/users.yaml');

----------------------------------------

TITLE: Converting Symfony Response to PSR-7 Response
DESCRIPTION: PHP code to convert a Symfony HttpFoundation Response object to a PSR-7 Response object using the PSR-7 bridge and Nyholm PSR-7 implementation.

LANGUAGE: php
CODE:
use Nyholm\Psr7\Factory\Psr17Factory;
use Symfony\Bridge\PsrHttpMessage\Factory\PsrHttpFactory;
use Symfony\Component\HttpFoundation\Response;

$symfonyResponse = new Response('Content');

$psr17Factory = new Psr17Factory();
$psrHttpFactory = new PsrHttpFactory($psr17Factory, $psr17Factory, $psr17Factory, $psr17Factory);
$psrResponse = $psrHttpFactory->createResponse($symfonyResponse);

----------------------------------------

TITLE: Configuring IsNull Constraint in YAML for Symfony Validation
DESCRIPTION: Shows how to configure the IsNull constraint for a property using YAML in Symfony's validation configuration.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        firstName:
            - 'IsNull': ~

----------------------------------------

TITLE: Using Output Sections in Symfony Console Commands
DESCRIPTION: Demonstrates how to use output sections to create independent regions of console output that can be manipulated separately.

LANGUAGE: php
CODE:
// ...
use Symfony\Component\Console\Output\ConsoleOutputInterface;

class MyCommand extends Command
{
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        if (!$output instanceof ConsoleOutputInterface) {
            throw new \LogicException('This command accepts only an instance of "ConsoleOutputInterface".');
        }

        $section1 = $output->section();
        $section2 = $output->section();

        $section1->writeln('Hello');
        $section2->writeln('World!');
        sleep(1);

        $section1->overwrite('Goodbye');
        sleep(1);

        $section2->clear();
        sleep(1);

        $section1->clear(2);
        sleep(1);

        $section1->setMaxHeight(2);
        $section1->writeln('Line1');
        $section1->writeln('Line2');
        $section1->writeln('Line3');

        return Command::SUCCESS;
    }
}

----------------------------------------

TITLE: Implementing Symfony Finder Component in PHP
DESCRIPTION: Example of how to implement the Symfony Finder component in a PHP project, including autoloader setup and basic Finder initialization.

LANGUAGE: php
CODE:
require_once __DIR__.'/../vendor/autoload.php';

use Symfony\Component\Finder\Finder;

$finder = new Finder();
$finder->in('../data/');

----------------------------------------

TITLE: Creating a Basic Twig Template
DESCRIPTION: Example of creating a simple Twig template file in the templates directory.

LANGUAGE: html+twig
CODE:
{# templates/user/notifications.html.twig #}
<h1>Hello {{ user_first_name }}!</h1>
<p>You have {{ notifications|length }} new notifications.</p>

----------------------------------------

TITLE: Basic Collection Field Rendering in Twig
DESCRIPTION: Simple example of rendering a collection field all at once in a Twig template.

LANGUAGE: twig
CODE:
{{ form_row(form.emails) }}

----------------------------------------

TITLE: Implementing NotNull Constraint with PHP Attributes
DESCRIPTION: Shows how to apply the NotNull constraint to a property using PHP attributes in a Symfony entity class.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\NotNull]
    protected string $firstName;
}

----------------------------------------

TITLE: Generating UUID v4 in PHP
DESCRIPTION: Example of generating a UUID v4 (random) using the Symfony Uid component.

LANGUAGE: php
CODE:
use Symfony\Component\Uid\Uuid;

// $uuid is an instance of Symfony\Component\Uid\UuidV4
$uuid = Uuid::v4();

----------------------------------------

TITLE: Custom Filtering with Symfony Finder
DESCRIPTION: Shows how to use a custom filter function to refine search results with the Symfony Finder component.

LANGUAGE: php
CODE:
$filter = function (\SplFileInfo $file)
{
    if (strlen($file) > 10) {
        return false;
    }
};

$finder->files()->filter($filter);

----------------------------------------

TITLE: PHP Attributes Implementation of IsFalse Constraint
DESCRIPTION: Shows how to apply the IsFalse constraint using PHP attributes in a class.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\IsFalse(
        message: "You've entered an invalid state."
    )]
    public function isStateInvalid(): bool
    {
        // ...
    }
}

----------------------------------------

TITLE: Creating a New Symfony Project with Symfony Binary
DESCRIPTION: Use the Symfony binary to create a new Symfony application based on the current stable version. This command utilizes Composer under the hood.

LANGUAGE: terminal
CODE:
$ symfony new my_project_directory

----------------------------------------

TITLE: Locking a Dynamic Resource in PHP
DESCRIPTION: Demonstrates how to create a lock for a dynamic resource based on a version parameter in a Symfony controller.

LANGUAGE: php
CODE:
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Lock\LockFactory;

class PdfController extends AbstractController
{
    #[Route('/download/{version}/terms-of-use.pdf')]
    public function downloadPdf($version, LockFactory $lockFactory, MyPdfGeneratorService $pdf): Response
    {
        $lock = $lockFactory->createLock('pdf-creation-'.$version);
        $lock->acquire(true);

        // heavy computation
        $myPdf = $pdf->getOrCreatePdf($version);

        $lock->release();

        // ...
    }
}

----------------------------------------

TITLE: Custom Repository Query Methods
DESCRIPTION: Example of creating custom query methods in a repository class using DQL and QueryBuilder.

LANGUAGE: php
CODE:
namespace App\Repository;

use App\Entity\Product;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;

class ProductRepository extends ServiceEntityRepository
{
    public function findAllGreaterThanPrice(int $price): array
    {
        $qb = $this->createQueryBuilder('p')
            ->where('p.price > :price')
            ->setParameter('price', $price)
            ->orderBy('p.price', 'ASC');
            
        return $qb->getQuery()->execute();
    }
}

----------------------------------------

TITLE: Adding Listener for ConsoleEvents::SIGNAL Event
DESCRIPTION: This code snippet shows how to add a listener for the ConsoleEvents::SIGNAL event. This event is dispatched when a command is interrupted by a signal, allowing for custom handling of interruptions.

LANGUAGE: php
CODE:
use Symfony\Component\Console\ConsoleEvents;
use Symfony\Component\Console\Event\ConsoleSignalEvent;

$dispatcher->addListener(ConsoleEvents::SIGNAL, function (ConsoleSignalEvent $event): void {

    // gets the signal number
    $signal = $event->getHandlingSignal();

    // sets the exit code
    $event->setExitCode(0);

    if (\SIGINT === $signal) {
        echo "bye bye!";
    }
});

----------------------------------------

TITLE: Generating Cryptographic Keys in Symfony
DESCRIPTION: Command to generate a pair of asymmetric cryptographic keys for encrypting and decrypting secrets in the dev environment.

LANGUAGE: bash
CODE:
$ php bin/console secrets:generate-keys

----------------------------------------

TITLE: Configuring Framework Bundle Form Integration in YAML
DESCRIPTION: Example of enabling form integration in the FrameworkBundle using YAML configuration.

LANGUAGE: yaml
CODE:
# config/packages/framework.yaml
framework:
    form: true

----------------------------------------

TITLE: Searching in Multiple Locations with Symfony Finder
DESCRIPTION: Shows how to search for files in multiple directories using the in() method of the Finder class.

LANGUAGE: php
CODE:
// search inside *both* directories
$finder->in([__DIR__, '/elsewhere']);

// same as above
$finder->in(__DIR__)->in('/elsewhere');

----------------------------------------

TITLE: Creating and Using UnicodeString Objects
DESCRIPTION: Example of creating a UnicodeString object and performing string operations.

LANGUAGE: PHP
CODE:
use Symfony\Component\String\UnicodeString;

$text = (new UnicodeString('This is a déjà-vu situation.'))
    ->trimEnd('.')
    ->replace('déjà-vu', 'jamais-vu')
    ->append('!');
// $text = 'This is a jamais-vu situation!'

$content = new UnicodeString('नमस्ते दुनिया');
if ($content->ignoreCase()->startsWith('नमस्ते')) {
    // ...
}

----------------------------------------

TITLE: Implementing Locale-Aware Service
DESCRIPTION: Example of implementing a locale-aware service using the LocaleAwareInterface.

LANGUAGE: php
CODE:
// src/Locale/MyCustomLocaleHandler.php
namespace App\Locale;

use Symfony\Contracts\Translation\LocaleAwareInterface;

class MyCustomLocaleHandler implements LocaleAwareInterface
{
    public function setLocale(string $locale): void
    {
        $this->locale = $locale;
    }

    public function getLocale(): string
    {
        return $this->locale;
    }
}

----------------------------------------

TITLE: Configuring Maximum Uses for Login Links in Symfony
DESCRIPTION: YAML configuration for limiting the number of times a login link can be used in Symfony.

LANGUAGE: yaml
CODE:
security:
    firewalls:
        main:
            login_link:
                check_route: login_check
                max_uses: 3

----------------------------------------

TITLE: Using Symfony Form Types Example
DESCRIPTION: Shows the basic syntax for referencing Symfony form field types in documentation. The TextType and ChoiceType are mentioned as examples of field types that can be used to build form fields.

LANGUAGE: rst
CODE:
TextType``

LANGUAGE: rst
CODE:
ChoiceType

----------------------------------------

TITLE: Using Required and Optional Constraints in Collection
DESCRIPTION: Example of using Required and Optional constraints within a Collection to define mandatory and optional fields.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\Collection(
        fields: [
            'personal_email' => new Assert\Required([
                new Assert\NotBlank,
                new Assert\Email,
            ]),
            'alternate_email' => new Assert\Optional(
                new Assert\Email
            ),
        ],
    )]
    protected array $profileData = ['personal_email' => 'email@example.com'];
}

----------------------------------------

TITLE: Defining Multiple Webpack Configurations in Symfony Encore
DESCRIPTION: This snippet demonstrates how to define and export multiple Webpack configurations using Encore's reset() method.

LANGUAGE: javascript
CODE:
// define the first configuration
Encore
    .setOutputPath('public/build/first_build/')
    .setPublicPath('/build/first_build')
    .addEntry('app', './assets/app.js')
    .addStyleEntry('global', './assets/styles/global.scss')
    .enableSassLoader()
    .autoProvidejQuery()
    .enableSourceMaps(!Encore.isProduction())
;

// build the first configuration
const firstConfig = Encore.getWebpackConfig();

// Set a unique name for the config (needed later!)
firstConfig.name = 'firstConfig';

// reset Encore to build the second config
Encore.reset();

// define the second configuration
Encore
    .setOutputPath('public/build/second_build/')
    .setPublicPath('/build/second_build')
    .addEntry('mobile', './assets/mobile.js')
    .addStyleEntry('mobile', './assets/styles/mobile.less')
    .enableLessLoader()
    .enableSourceMaps(!Encore.isProduction())
;

// build the second configuration
const secondConfig = Encore.getWebpackConfig();

// Set a unique name for the config (needed later!)
secondConfig.name = 'secondConfig';

// export the final configuration as an array of multiple configurations
module.exports = [firstConfig, secondConfig];

----------------------------------------

TITLE: Applying IsTrue Constraint with PHP
DESCRIPTION: This PHP code demonstrates how to apply the IsTrue constraint to the tokenValid getter using the loadValidatorMetadata method. It includes a custom error message for invalid tokens.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints\IsTrue;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addGetterConstraint('tokenValid', new IsTrue(
            message: 'The token is invalid.',
        ));
    }

    public function isTokenValid(): bool
    {
        return $this->token === $this->generateToken();
    }

    // ...
}

----------------------------------------

TITLE: Configuring WordCount Constraint with YAML
DESCRIPTION: Example of using the WordCount constraint in a YAML configuration file to validate that a 'content' property contains between 100 and 200 words.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\BlogPostDTO:
    properties:
        content:
            - WordCount:
                min: 100
                max: 200

----------------------------------------

TITLE: Custom Form Elements with Bootstrap Classes
DESCRIPTION: Twig template code demonstrating how to apply Bootstrap custom form classes to radio and checkbox elements.

LANGUAGE: twig
CODE:
{{ form_row(form.myRadio, {label_attr: {class: 'radio-custom'} }) }}
{{ form_row(form.myCheckbox, {label_attr: {class: 'checkbox-custom'} }) }}
{{ form_row(form.myCheckbox, {label_attr: {class: 'switch-custom'} }) }}

----------------------------------------

TITLE: Configuring Watch Options in Symfony Encore
DESCRIPTION: This snippet shows how to configure watching options for Webpack in Encore, enabling polling and setting the check interval.

LANGUAGE: javascript
CODE:
Encore.configureWatchOptions(function(watchOptions) {
    // enable polling and check for changes every 250ms
    // polling is useful when running Encore inside a Virtual Machine
    watchOptions.poll = 250;
});

----------------------------------------

TITLE: Registering Custom Normalizer in Symfony XML Configuration
DESCRIPTION: This XML configuration snippet demonstrates how to register the custom normalizer as a service in Symfony's dependency injection container using XML format. It shows setting a priority for the normalizer in the serialization process.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <!-- ... -->

        <service id="App\Serializer\TopicNormalizer">
            <!-- register the normalizer with a high priority (called earlier) -->
            <tag name="serializer.normalizer"
                priority="500"
            />
        </service>
    </services>
</container>

----------------------------------------

TITLE: Custom Version Strategy Class Implementation
DESCRIPTION: PHP class implementing VersionStrategyInterface to handle asset versioning using a gulp-buster manifest file.

LANGUAGE: php
CODE:
namespace App\Asset\VersionStrategy;

use Symfony\Component\Asset\VersionStrategy\VersionStrategyInterface;

class GulpBusterVersionStrategy implements VersionStrategyInterface
{
    private string $format;

    /**
     * @var string[]
     */
    private array $hashes;

    public function __construct(
        private string $manifestPath,
        ?string $format = null,
    ) {
        $this->format = $format ?: '%s?%s';
    }

    public function getVersion(string $path): string
    {
        if (!is_array($this->hashes)) {
            $this->hashes = $this->loadManifest();
        }

        return $this->hashes[$path] ?? '';
    }

    public function applyVersion(string $path): string
    {
        $version = $this->getVersion($path);

        if ('' === $version) {
            return $path;
        }

        return sprintf($this->format, $path, $version);
    }

    private function loadManifest(): array
    {
        return json_decode(file_get_contents($this->manifestPath), true);
    }
}

----------------------------------------

TITLE: Creating a Token Authentication Filter in PHP
DESCRIPTION: Example of creating a token authentication filter using the kernel.controller event. It checks if the controller implements a specific interface and validates the token.

LANGUAGE: PHP
CODE:
// src/EventSubscriber/TokenSubscriber.php
namespace App\EventSubscriber;

use App\Controller\TokenAuthenticatedController;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\Event\ControllerEvent;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Symfony\Component\HttpKernel\KernelEvents;

class TokenSubscriber implements EventSubscriberInterface
{
    public function __construct(
        private array $tokens
    ) {
    }

    public function onKernelController(ControllerEvent $event): void
    {
        $controller = $event->getController();

        if (is_array($controller)) {
            $controller = $controller[0];
        }

        if ($controller instanceof TokenAuthenticatedController) {
            $token = $event->getRequest()->query->get('token');
            if (!in_array($token, $this->tokens)) {
                throw new AccessDeniedHttpException('This action needs a valid token!');
            }
        }
    }

    public static function getSubscribedEvents(): array
    {
        return [
            KernelEvents::CONTROLLER => 'onKernelController',
        ];
    }
}

----------------------------------------

TITLE: Configuring Collection Constraint with PHP
DESCRIPTION: PHP code demonstrating how to configure the Collection constraint using the loadValidatorMetadata method.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('profileData', new Assert\Collection(
            fields: [
                'personal_email' => new Assert\Email(),
                'short_bio' => [
                    new Assert\NotBlank(),
                    new Assert\Length([
                        'max' => 100,
                        'maxMessage' => 'Your short bio is too long!',
                    ]),
                ],
            ],
            allowMissingFields: true,
        ));
    }
}

----------------------------------------

TITLE: Configuring Legacy Bundle Structure
DESCRIPTION: Shows how to override the getPath() method to use the legacy bundle directory structure in Symfony versions prior to 5.0.

LANGUAGE: php
CODE:
class AcmeBlogBundle extends AbstractBundle
{
    public function getPath(): string
    {
        return __DIR__;
    }
}

----------------------------------------

TITLE: Creating and Updating LDAP Entries with Symfony LDAP Component
DESCRIPTION: This PHP code shows how to create new LDAP entries, update existing ones, and delete entries using the Symfony LDAP component. It demonstrates the usage of the EntryManager class.

LANGUAGE: PHP
CODE:
use Symfony\Component\Ldap\Entry;
use Symfony\Component\Ldap\Ldap;
// ...

$entry = new Entry('cn=Fabien Potencier,dc=symfony,dc=com', [
    'sn' => ['fabpot'],
    'objectClass' => ['inetOrgPerson'],
]);

$entryManager = $ldap->getEntryManager();

// Creating a new entry
$entryManager->add($entry);

// Finding and updating an existing entry
$query = $ldap->query('dc=symfony,dc=com', '(&(objectclass=person)(ou=Maintainers))');
$result = $query->execute();
$entry = $result[0];

$entry->setAttribute('email', ['fabpot@symfony.com']);
$entryManager->update($entry);

// Removing an existing entry
$entryManager->remove(new Entry('cn=Test User,dc=symfony,dc=com'));

----------------------------------------

TITLE: Defining NotIdenticalTo Constraints using PHP Attributes
DESCRIPTION: Demonstrates how to apply NotIdenticalTo constraints to properties of a Person class using PHP attributes. It ensures that firstName is not identical to 'Mary' and age is not identical to 15.

LANGUAGE: php
CODE:
// src/Entity/Person.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Person
{
    #[Assert\NotIdenticalTo('Mary')]
    protected string $firstName;

    #[Assert\NotIdenticalTo(
        value: 15,
    )]
    protected int $age;
}

----------------------------------------

TITLE: Converting Symfony Request to PSR-7 ServerRequest
DESCRIPTION: PHP code to convert a Symfony HttpFoundation Request object to a PSR-7 ServerRequest object using the PSR-7 bridge and Nyholm PSR-7 implementation.

LANGUAGE: php
CODE:
use Nyholm\Psr7\Factory\Psr17Factory;
use Symfony\Bridge\PsrHttpMessage\Factory\PsrHttpFactory;
use Symfony\Component\HttpFoundation\Request;

$symfonyRequest = new Request([], [], [], [], [], ['HTTP_HOST' => 'dunglas.fr'], 'Content');
// The HTTP_HOST server key must be set to avoid an unexpected error

$psr17Factory = new Psr17Factory();
$psrHttpFactory = new PsrHttpFactory($psr17Factory, $psr17Factory, $psr17Factory, $psr17Factory);
$psrRequest = $psrHttpFactory->createRequest($symfonyRequest);

----------------------------------------

TITLE: OPcache Performance Configuration
DESCRIPTION: PHP INI settings for optimizing OPcache performance in Symfony applications.

LANGUAGE: ini
CODE:
; php.ini
; maximum memory that OPcache can use to store compiled PHP files
opcache.memory_consumption=256

; maximum number of files that can be stored in the cache
opcache.max_accelerated_files=20000

----------------------------------------

TITLE: Using LoggerInterface in Symfony Controller
DESCRIPTION: Shows how to inject and use the LoggerInterface in a Symfony controller for logging purposes.

LANGUAGE: PHP
CODE:
// src/Controller/DefaultController.php
namespace App\Controller;

use Psr\Log\LoggerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

class DefaultController extends AbstractController
{
    #[Route('/hello/{name}', methods: ['GET'])]
    public function index(string $name, LoggerInterface $logger): Response
    {
        $logger->info("Saying hello to $name!");

        // ...
    }
}

----------------------------------------

TITLE: Setting Cache Controls using PHP Attributes in Symfony
DESCRIPTION: Demonstrates how to set cache controls using PHP attributes with the Cache attribute. Sets public access and max age of 600 seconds.

LANGUAGE: php
CODE:
use Symfony\Component\HttpKernel\Attribute\Cache;
// ...

#[Cache(public: true, maxage: 600)]
public function index(): Response
{
    // ...
}

----------------------------------------

TITLE: Configuring Static Factory Service in YAML
DESCRIPTION: This YAML configuration defines a service using a static factory method to create the NewsletterManager object.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    # ...

    App\Email\NewsletterManager:
        # the first argument is the class and the second argument is the static method
        factory: ['App\Email\NewsletterManagerStaticFactory', 'createNewsletterManager']

----------------------------------------

TITLE: Configuring Timezone Constraint in YAML
DESCRIPTION: YAML configuration for applying the Timezone constraint to a property in the UserSettings entity.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\UserSettings:
    properties:
        timezone:
            - Timezone: ~

----------------------------------------

TITLE: Applying Form Theme to Single Form in Twig
DESCRIPTION: Twig template code showing how to apply a specific form theme to an individual form using the form_theme tag

LANGUAGE: twig
CODE:
{# this form theme will be applied only to the form of this template #}
{% form_theme form 'foundation_5_layout.html.twig' %}

{{ form_start(form) }}
    {# ... #}
{{ form_end(form) }}

----------------------------------------

TITLE: Configuring CoverageListener in PHPUnit
DESCRIPTION: Example of how to configure the CoverageListener in the PHPUnit XML configuration file.

LANGUAGE: XML
CODE:
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://schema.phpunit.de/6.0/phpunit.xsd"
>

    <!-- ... -->

    <listeners>
        <listener class="Symfony\Bridge\PhpUnit\CoverageListener"/>
    </listeners>
</phpunit>

----------------------------------------

TITLE: Generating UUID v7 in PHP
DESCRIPTION: Example of generating a UUID v7 (UNIX timestamp) using the Symfony Uid component.

LANGUAGE: php
CODE:
use Symfony\Component\Uid\Uuid;

// $uuid is an instance of Symfony\Component\Uid\UuidV7
$uuid = Uuid::v7();

----------------------------------------

TITLE: Creating Session Table in MySQL
DESCRIPTION: SQL code to create the sessions table for storing session data in MySQL.

LANGUAGE: sql
CODE:
CREATE TABLE `sessions` (
    `sess_id` VARBINARY(128) NOT NULL PRIMARY KEY,
    `sess_data` BLOB NOT NULL,
    `sess_lifetime` INTEGER UNSIGNED NOT NULL,
    `sess_time` INTEGER UNSIGNED NOT NULL,
    INDEX `sessions_sess_lifetime_idx` (`sess_lifetime`)
) COLLATE utf8mb4_bin, ENGINE = InnoDB;

----------------------------------------

TITLE: Vue JSX Component with CSS Modules
DESCRIPTION: Demonstrates using CSS Modules with Vue.js JSX components for scoped styling.

LANGUAGE: jsx
CODE:
// Component.jsx
import styles from './Component.css?module' // suffix with "?module"

export default {
    name: 'Component',
    render() {
        return (
            <div>
                <h1 class={styles.title}>
                    Hello World
                </h1>
            </div>
        )
    }
}

LANGUAGE: css
CODE:
/* Component.css */

.title {
    color: red
}

----------------------------------------

TITLE: Entity Configuration for File Upload in PHP
DESCRIPTION: Product entity class defining the brochureFilename property to store uploaded file names with getter and setter methods.

LANGUAGE: php
CODE:
namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;

class Product
{
    #[ORM\Column(type: 'string')]
    private string $brochureFilename;

    public function getBrochureFilename(): string
    {
        return $this->brochureFilename;
    }

    public function setBrochureFilename(string $brochureFilename): self
    {
        $this->brochureFilename = $brochureFilename;
        return $this;
    }
}

----------------------------------------

TITLE: Installing Symfony Intl Component
DESCRIPTION: Shows how to install the Symfony Intl component using Composer

LANGUAGE: terminal
CODE:
$ composer require symfony/intl

----------------------------------------

TITLE: Configuring Serializer with Custom Name Converter in YAML
DESCRIPTION: YAML configuration to set the custom name converter for the Symfony serializer.

LANGUAGE: yaml
CODE:
# config/packages/serializer.yaml
framework:
    serializer:
        # pass the service ID of your name converter
        name_converter: 'App\Serializer\OrgPrefixNameConverter'

----------------------------------------

TITLE: Installing Doctrine ORM Dependencies
DESCRIPTION: Commands to install Doctrine ORM support and MakerBundle for code generation in Symfony applications.

LANGUAGE: bash
CODE:
$ composer require symfony/orm-pack
$ composer require --dev symfony/maker-bundle

----------------------------------------

TITLE: Configuring Count Constraint with PHP Attributes in Symfony
DESCRIPTION: Demonstrates how to use the Count constraint with PHP attributes to validate that an array property contains between 1 and 5 elements.

LANGUAGE: php
CODE:
// src/Entity/Participant.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Participant
{
    #[Assert\Count(
        min: 1,
        max: 5,
        minMessage: 'You must specify at least one email',
        maxMessage: 'You cannot specify more than {{ limit }} emails',
    )]
    protected array $emails = [];
}

----------------------------------------

TITLE: Configuring Language Validation in YAML
DESCRIPTION: Example showing how to configure the Language constraint using YAML configuration format.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\User:
    properties:
        preferredLanguage:
            - Language: ~

----------------------------------------

TITLE: Resulting XPath Expression from CSS Selector Conversion
DESCRIPTION: Shows the XPath expression output generated by the CssSelectorConverter for the given CSS selector. This illustrates the complexity of the equivalent XPath expression.

LANGUAGE: text
CODE:
descendant-or-self::div[@class and contains(concat(' ',normalize-space(@class), ' '), ' item ')]/h4/a

----------------------------------------

TITLE: Submit Button Translation Parameters in PHP
DESCRIPTION: Example showing how to configure translation parameters for submit button labels.

LANGUAGE: PHP
CODE:
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
// ...

$builder->add('send', SubmitType::class, [
    'label' => 'form.order.submit_to_company',
    'label_translation_parameters' => [
        '%company%' => 'ACME Inc.',
    ],
]);

----------------------------------------

TITLE: Configuring TypeScript Loader Options in Webpack Encore
DESCRIPTION: Advanced configuration showing how to customize ts-loader options using a callback function in webpack.config.js. Demonstrates how to access and modify the TypeScript loader configuration.

LANGUAGE: diff
CODE:
      // webpack.config.js
      Encore
          // ...
          .addEntry('main', './assets/main.ts')

    -     .enableTypeScriptLoader()
    +     .enableTypeScriptLoader(function(tsConfig) {
    +         // You can use this callback function to adjust ts-loader settings
    +         // https://github.com/TypeStrong/ts-loader/blob/master/README.md#loader-options
    +         // For example:
    +         // tsConfig.silent = false
    +     })

              // ...
      ;

----------------------------------------

TITLE: Using ClockMock for Time-sensitive Tests
DESCRIPTION: Example of how to use ClockMock to create deterministic time-sensitive tests.

LANGUAGE: PHP
CODE:
use PHPUnit\Framework\TestCase;
use Symfony\Component\Stopwatch\Stopwatch;

/**
 * @group time-sensitive
 */
class MyTest extends TestCase
{
    public function testSomething(): void
    {
        $stopwatch = new Stopwatch();

        $stopwatch->start('event_name');
        sleep(10);
        $duration = $stopwatch->stop('event_name')->getDuration();

        $this->assertEquals(10000, $duration);
    }
}

----------------------------------------

TITLE: Configuring Static Factory Service in PHP
DESCRIPTION: This PHP configuration defines a service using a static factory method to create the NewsletterManager object.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\Email\NewsletterManager;
use App\Email\NewsletterManagerStaticFactory;

return function(ContainerConfigurator $container): void {
    $services = $container->services();

    $services->set(NewsletterManager::class)
        // the first argument is the class and the second argument is the static method
        ->factory([NewsletterManagerStaticFactory::class, 'createNewsletterManager']);
};

----------------------------------------

TITLE: Response Event Handler - PHP
DESCRIPTION: Example of handling kernel.response event to modify response before sending

LANGUAGE: PHP
CODE:
use Symfony\Component\HttpKernel\Event\ResponseEvent;

public function onKernelResponse(ResponseEvent $event): void
{
    $response = $event->getResponse();

    // ... modify the response object
}

----------------------------------------

TITLE: Installing Symfony YAML Component
DESCRIPTION: Use Composer to install the Symfony YAML component in your project.

LANGUAGE: bash
CODE:
$ composer require symfony/yaml

----------------------------------------

TITLE: Basic Usage of OptionsResolver in a Mailer Class
DESCRIPTION: Example showing how to use OptionsResolver to handle options in a Mailer class constructor.

LANGUAGE: PHP
CODE:
use Symfony\Component\OptionsResolver\OptionsResolver;

class Mailer
{
    protected array $options;

    public function __construct(array $options = [])
    {
        $resolver = new OptionsResolver();
        $resolver->setDefaults([
            'host'     => 'smtp.example.org',
            'username' => 'user',
            'password' => 'pa$$word',
            'port'     => 25,
        ]);

        $this->options = $resolver->resolve($options);
    }

----------------------------------------

TITLE: Configuring Webpack Encore for Source Maps in Symfony
DESCRIPTION: This code snippet demonstrates how to enable source maps in the webpack.config.js file for development builds using Webpack Encore. It uses the enableSourceMaps() method, which is conditionally set based on whether the build is for production or not.

LANGUAGE: javascript
CODE:
// webpack.config.js
// ...

Encore
    // ...

    .enableSourceMaps(!Encore.isProduction())
;

----------------------------------------

TITLE: Clearing Symfony Cache
DESCRIPTION: Command to clear and warm-up the Symfony cache in production environment with debugging disabled.

LANGUAGE: terminal
CODE:
$ APP_ENV=prod APP_DEBUG=0 php bin/console cache:clear

----------------------------------------

TITLE: Installing Symfony Requirements Checker
DESCRIPTION: Command to install the requirements checker package for verifying Symfony technical requirements on production servers where Symfony CLI is not installed.

LANGUAGE: terminal
CODE:
$ composer require symfony/requirements-checker

----------------------------------------

TITLE: Setting Cache Item Expiration
DESCRIPTION: Shows different methods to set cache item expiration, including using seconds and DateInterval instances.

LANGUAGE: php
CODE:
$latestNews->expiresAfter(60);  // 60 seconds = 1 minute

// this method also accepts \DateInterval instances
$latestNews->expiresAfter(DateInterval::createFromDateString('1 hour'));

$mostPopularNews->expiresAt(new \DateTime('tomorrow'));

----------------------------------------

TITLE: Implementing PHP Array Cache with Symfony Cache Component
DESCRIPTION: Demonstrates how to initialize and use PhpArrayAdapter for caching static values. The example shows warm-up process for storing data and subsequent retrieval. Requires opcache.enable to be enabled in php.ini.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\FilesystemAdapter;
use Symfony\Component\Cache\Adapter\PhpArrayAdapter;

// somehow, decide it's time to warm up the cache!
if ($needsWarmup) {
    // some static values
    $values = [
        'stats.products_count' => 4711,
        'stats.users_count' => 1356,
    ];

    $cache = new PhpArrayAdapter(
        // single file where values are cached
        __DIR__ . '/somefile.cache',
        // a backup adapter, if you set values after warm-up
        new FilesystemAdapter()
    );
    $cache->warmUp($values);
}

// ... then, use the cache!
$cacheItem = $cache->getItem('stats.users_count');
echo $cacheItem->get();

----------------------------------------

TITLE: Enabling ESI Support in Varnish 4
DESCRIPTION: This configuration enables Edge Side Includes (ESI) support in Varnish 4 by adding the Surrogate-Capability header and processing ESI tags.

LANGUAGE: varnish4
CODE:
sub vcl_recv {
    // Add a Surrogate-Capability header to announce ESI support.
    set req.http.Surrogate-Capability = "abc=ESI/1.0";
}

LANGUAGE: varnish4
CODE:
sub vcl_backend_response {
    // Check for ESI acknowledgement and remove Surrogate-Control header
    if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
        unset beresp.http.Surrogate-Control;
        set beresp.do_esi = true;
    }
}

----------------------------------------

TITLE: Rendering RepeatedType Fields in Twig - Combined
DESCRIPTION: Example of rendering both repeated fields together in a single form row using Twig.

LANGUAGE: twig
CODE:
{{ form_row(form.password) }}

----------------------------------------

TITLE: Initializing APCu Cache Adapter in Symfony
DESCRIPTION: Demonstrates how to create and configure an APCu Cache Adapter instance with optional namespace, default lifetime, and version parameters. The adapter provides high-performance shared memory caching capabilities.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\ApcuAdapter;

$cache = new ApcuAdapter(
    // a string prefixed to the keys of the items stored in this cache
    $namespace = '',

    // the default lifetime (in seconds) for cache items that do not define their
    // own lifetime, with a value 0 causing items to be stored indefinitely (i.e.
    // until the APCu memory is cleared)
    $defaultLifetime = 0,

    // when set, all keys prefixed by $namespace can be invalidated by changing
    // this $version string
    $version = null
);

----------------------------------------

TITLE: Running Psalm Static Analysis Locally
DESCRIPTION: Command to run Psalm static analysis on a specific Symfony component.

LANGUAGE: bash
CODE:
$ psalm.phar src/Symfony/Component/Workflow

----------------------------------------

TITLE: Using a Blocking Lock in Symfony
DESCRIPTION: Example of creating and acquiring a blocking lock that waits indefinitely until the lock can be created.

LANGUAGE: PHP
CODE:
use Symfony\Component\Lock\LockFactory;
use Symfony\Component\Lock\Store\FlockStore;

$store = new FlockStore('/var/stores');
$factory = new LockFactory($store);

$lock = $factory->createLock('pdf-creation');
$lock->acquire(true);

----------------------------------------

TITLE: Configuring PasswordType with RepeatedType in PHP
DESCRIPTION: Example of adding a repeated PasswordType field to a form builder with hash_property_path option. This configuration creates two password fields for confirmation and hashes the password.

LANGUAGE: php
CODE:
$builder->add('plainPassword', RepeatedType::class, [
    'type' => PasswordType::class,
    'first_options'  => ['label' => 'Password', 'hash_property_path' => 'password'],
    'second_options' => ['label' => 'Repeat Password'],
    'mapped' => false,
]);

----------------------------------------

TITLE: Defining Timezone Constraint with PHP Attributes
DESCRIPTION: Example of using the Timezone constraint with PHP attributes in a UserSettings class.

LANGUAGE: php
CODE:
// src/Entity/UserSettings.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class UserSettings
{
    #[Assert\Timezone]
    protected string $timezone;
}

----------------------------------------

TITLE: Configuring Composer Dependencies for Symfony 2.x
DESCRIPTION: Initial composer.json configuration showing Symfony 2.x component dependencies using the ~2.N constraint pattern.

LANGUAGE: json
CODE:
{
    "require": {
        "symfony/framework-bundle": "~2.7",
        "symfony/finder": "~2.7",
        "symfony/validator": "~2.7"
    }
}

----------------------------------------

TITLE: Configuring Non-Static Factory in YAML
DESCRIPTION: This YAML configuration demonstrates how to use a non-static factory method to create a service.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    # ...

    # first, create a service for the factory
    App\Email\NewsletterManagerFactory: ~

    # second, use the factory service as the first argument of the 'factory'
    # option and the factory method as the second argument
    App\Email\NewsletterManager:
        factory: ['@App\Email\NewsletterManagerFactory', 'createNewsletterManager']

----------------------------------------

TITLE: Registering Custom Twig Extension
DESCRIPTION: Configuration for registering a custom Twig extension service.

LANGUAGE: yaml
CODE:
services:
    App\Twig\AppExtension:
        tags: [twig.extension]

    # optionally you can define the priority of the extension (default = 0).
    # Extensions with higher priorities are registered earlier. This is mostly
    # useful to register late extensions that override other extensions.
    App\Twig\AnotherExtension:
        tags: [{ name: twig.extension, priority: -100 }]

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Twig\AppExtension">
            <tag name="twig.extension"/>
        </service>

        <service id="App\Twig\AnotherExtension">
            <tag name="twig.extension" priority="-100"/>
        </service>
    </services>
</container>

LANGUAGE: php
CODE:
use App\Twig\AnotherExtension;
use App\Twig\AppExtension;

$container
    ->register(AppExtension::class)
    ->addTag('twig.extension')
;
$container
    ->register(AnotherExtension::class)
    ->addTag('twig.extension', ['priority' => -100])
;

----------------------------------------

TITLE: Configuring MoneyType with Divisor in Symfony Form
DESCRIPTION: Demonstrates how to add a MoneyType field to a Symfony form builder with a divisor option. This is useful for handling prices stored as integers to avoid rounding errors.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\MoneyType;
// ...

$builder->add('price', MoneyType::class, [
    'divisor' => 100,
]);

----------------------------------------

TITLE: Vue.js Integration with Twig Templates
DESCRIPTION: Example of using Vue.js variables alongside Twig variables in templates with custom delimiters.

LANGUAGE: twig
CODE:
{{ twig_variable }}   {# renders a Twig variable #}
${ vuejs_variable }$  {# renders a Vue.js variable #}

----------------------------------------

TITLE: Vue JSX Component with Image Import
DESCRIPTION: Shows how to import and use images in Vue.js JSX components.

LANGUAGE: jsx
CODE:
export default {
    name: 'Component',
    render() {
        return (
            <div>
                <img src={require("./image.png")}/>
            </div>
        )
    }
}

----------------------------------------

TITLE: Single Text DateType Configuration with HTML5
DESCRIPTION: Configuration for rendering DateType as a single HTML5 text input field.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\DateType;
// ...

$builder->add('publishedAt', DateType::class, [
    'widget' => 'single_text',
]);

----------------------------------------

TITLE: Standalone PHP HTML Sanitizer Configuration
DESCRIPTION: Demonstrates how to configure and use the HTML Sanitizer outside of Symfony's dependency injection container.

LANGUAGE: php
CODE:
use Symfony\Component\HtmlSanitizer\HtmlSanitizer;
use Symfony\Component\HtmlSanitizer\HtmlSanitizerConfig;

$htmlSanitizer = new HtmlSanitizer(
    (new HtmlSanitizerConfig())->allowSafeElements()
);

$safePostContents = $htmlSanitizer->sanitize($unsafePostContents);

----------------------------------------

TITLE: MIME Types Utility Usage
DESCRIPTION: Shows how to use the MimeTypes class to convert between file extensions and MIME types, and guess MIME types of files.

LANGUAGE: php
CODE:
use Symfony\Component\Mime\MimeTypes;

$mimeTypes = new MimeTypes();
$exts = $mimeTypes->getExtensions('application/javascript');
// $exts = ['js', 'jsm', 'mjs']
$exts = $mimeTypes->getExtensions('image/jpeg');
// $exts = ['jpeg', 'jpg', 'jpe']

$types = $mimeTypes->getMimeTypes('js');
// $types = ['application/javascript', 'application/x-javascript', 'text/javascript']
$types = $mimeTypes->getMimeTypes('apk');
// $types = ['application/vnd.android.package-archive']

----------------------------------------

TITLE: Configuring Immutable Setter Calls in Symfony Services (XML)
DESCRIPTION: This XML configuration snippet demonstrates how to configure the container to call the withLogger method on the MessageGenerator service, using the returns-clone attribute to indicate it's an immutable setter.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Service\MessageGenerator">
            <!-- ... -->
            <call method="withLogger" returns-clone="true">
                <argument type="service" id="logger"/>
            </call>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Configuring Logger Verbosity Levels
DESCRIPTION: Example of configuring custom verbosity levels for different log message types in the ConsoleLogger.

LANGUAGE: php
CODE:
use Psr\Log\LogLevel;
// ...

$verbosityLevelMap = [
    LogLevel::NOTICE => OutputInterface::VERBOSITY_NORMAL,
    LogLevel::INFO   => OutputInterface::VERBOSITY_NORMAL,
];

$logger = new ConsoleLogger($output, $verbosityLevelMap);

----------------------------------------

TITLE: Finish Request Event Handler - PHP
DESCRIPTION: Example of handling kernel.finish_request event to reset application state

LANGUAGE: PHP
CODE:
use Symfony\Component\HttpKernel\Event\FinishRequestEvent;

public function onKernelFinishRequest(FinishRequestEvent $event): void
{
    if (null === $parentRequest = $this->requestStack->getParentRequest()) {
        return;
    }

    // reset the locale of the subrequest to the locale of the parent request
    $this->setLocale($parentRequest);
}

----------------------------------------

TITLE: Configuring Redis Connection with DSN in PHP
DESCRIPTION: This code snippet shows how to create and configure a Redis client instance using a Data Source Name (DSN) string with the createConnection helper method.

LANGUAGE: PHP
CODE:
use Symfony\Component\Cache\Adapter\RedisAdapter;

// pass a single DSN string to register a single server with the client
$client = RedisAdapter::createConnection(
    'redis://localhost'
);

----------------------------------------

TITLE: Basic Usage with PHP Attributes
DESCRIPTION: Example showing how to use GreaterThanOrEqual constraint with PHP attributes to validate integer properties for siblings count and age.

LANGUAGE: php
CODE:
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Person
{
    #[Assert\GreaterThanOrEqual(5)]
    protected int $siblings;

    #[Assert\GreaterThanOrEqual(
        value: 18,
    )]
    protected int $age;
}

----------------------------------------

TITLE: Implementing Command Lock Using LockableTrait in Symfony
DESCRIPTION: Demonstrates how to use LockableTrait to prevent concurrent execution of a Symfony console command. The code shows basic lock implementation with automatic release and includes optional waiting functionality.

LANGUAGE: php
CODE:
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Command\LockableTrait;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class UpdateContentsCommand extends Command
{
    use LockableTrait;

    // ...

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        if (!$this->lock()) {
            $output->writeln('The command is already running in another process.');

            return Command::SUCCESS;
        }

        // If you prefer to wait until the lock is released, use this:
        // $this->lock(null, true);

        // ...

        // if not released explicitly, Symfony releases the lock
        // automatically when the execution of the command ends
        $this->release();

        return Command::SUCCESS;
    }

----------------------------------------

TITLE: Enabling JSX Support for Vue.js
DESCRIPTION: Configuration for enabling JSX support in Vue.js components through webpack.config.js modifications.

LANGUAGE: diff
CODE:
  // webpack.config.js
  // ...

  Encore
      // ...
      .addEntry('main', './assets/main.js')

-     .enableVueLoader()
+     .enableVueLoader(() => {}, {
+         useJsx: true
+     })
  ;

----------------------------------------

TITLE: Configuring URL Constraint in YAML
DESCRIPTION: Example of configuring the URL constraint using YAML in a Symfony validation configuration file.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        bioUrl:
            - Url: ~

----------------------------------------

TITLE: Basic Question Helper Initialization in Symfony Command
DESCRIPTION: Shows how to get and use the basic Question Helper in a Symfony Command

LANGUAGE: php
CODE:
$helper = $this->getHelper('question');

----------------------------------------

TITLE: Handling Cache Hits and Misses
DESCRIPTION: Demonstrates how to check for cache hits and misses using isHit() method and handle the cache accordingly.

LANGUAGE: php
CODE:
$latestNews = $cache->getItem('latest_news');

if (!$latestNews->isHit()) {
    // do some heavy computation
    $news = ...;
    $cache->save($latestNews->set($news));
} else {
    $news = $latestNews->get();
}

----------------------------------------

TITLE: Creating Custom Tag Compiler Pass
DESCRIPTION: Implementation of a custom compiler pass to process services tagged with app.mail_transport

LANGUAGE: php
CODE:
use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Reference;

class MailTransportPass implements CompilerPassInterface
{
    public function process(ContainerBuilder $container): void
    {
        if (!$container->has(TransportChain::class)) {
            return;
        }

        $definition = $container->findDefinition(TransportChain::class);
        $taggedServices = $container->findTaggedServiceIds('app.mail_transport');

        foreach ($taggedServices as $id => $tags) {
            $definition->addMethodCall('addTransport', [new Reference($id)]);
        }
    }
}

----------------------------------------

TITLE: Using Custom ShippingType in OrderType Form in PHP
DESCRIPTION: This code shows how to use the custom ShippingType within another form type (OrderType) in Symfony.

LANGUAGE: PHP
CODE:
// src/Form/Type/OrderType.php
namespace App\Form\Type;

use App\Form\Type\ShippingType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;

class OrderType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            // ...
            ->add('shipping', ShippingType::class)
        ;
    }

    // ...
}

----------------------------------------

TITLE: Creating Memcached Connections with Various DSN Formats in PHP
DESCRIPTION: Illustrates different DSN formats for creating Memcached connections, including hostname, port, SASL authentication, IP address, weight, and socket paths.

LANGUAGE: PHP
CODE:
use Symfony\Component\Cache\Adapter\MemcachedAdapter;

$client = MemcachedAdapter::createConnection([
    // hostname + port
    'memcached://my.server.com:11211'

    // hostname without port + SASL username and password
    'memcached://rmf:abcdef@localhost'

    // IP address instead of hostname + weight
    'memcached://127.0.0.1?weight=50'

    // socket instead of hostname/IP + SASL username and password
    'memcached://janesmith:mypassword@/var/run/memcached.sock'

    // socket instead of hostname/IP + weight
    'memcached:///var/run/memcached.sock?weight=20'
]);

----------------------------------------

TITLE: Configuring Multiple DBAL Connections in YAML
DESCRIPTION: YAML configuration for multiple Doctrine DBAL connections with different settings.

LANGUAGE: yaml
CODE:
doctrine:
    dbal:
        default_connection:       default
        connections:
            default:
                dbname:           Symfony
                user:             root
                password:         null
                host:             localhost
                server_version:   '8.0.37'
            customer:
                dbname:           customer
                user:             root
                password:         null
                host:             localhost
                server_version:   '8.2.0'

----------------------------------------

TITLE: Creating a Custom 404 Error Template in Twig
DESCRIPTION: Example of a custom 404 error template using Twig in Symfony, extending a base template and providing a custom error message.

LANGUAGE: twig
CODE:
{# templates/bundles/TwigBundle/Exception/error404.html.twig #}
{% extends 'base.html.twig' %}

{% block body %}
    <h1>Page not found</h1>

    <p>
        The requested page couldn't be located. Checkout for any URL
        misspelling or <a href="{{ path('homepage') }}">return to the homepage</a>.
    </p>
{% endblock %}

----------------------------------------

TITLE: Implementing SignalableCommandInterface for Custom Signal Handling
DESCRIPTION: This snippet demonstrates how to implement the SignalableCommandInterface in a custom command class to handle specific signals within the command itself.

LANGUAGE: php
CODE:
// src/Command/SomeCommand.php
namespace App\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Command\SignalableCommandInterface;

class SomeCommand extends Command implements SignalableCommandInterface
{
    // ...

    public function getSubscribedSignals(): array
    {
        // return here any of the constants defined by PCNTL extension
        return [\SIGINT, \SIGTERM];
    }

    public function handleSignal(int $signal): int|false
    {
        if (\SIGINT === $signal) {
            // ...
        }

        // ...

        // return an integer to set the exit code, or
        // false to continue normal execution
        return 0;
    }
}

----------------------------------------

TITLE: Basic Numeric Range Validation in PHP
DESCRIPTION: Demonstrates how to validate a height field between 120 and 180 using PHP attributes in a Participant entity class.

LANGUAGE: php
CODE:
// src/Entity/Participant.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Participant
{
    #[Assert\Range(
        min: 120,
        max: 180,
        notInRangeMessage: 'You must be between {{ min }}cm and {{ max }}cm tall to enter',
    )]
    protected int $height;
}

----------------------------------------

TITLE: Configuring Synthetic Service in PHP
DESCRIPTION: PHP configuration for declaring a synthetic service using Symfony's container configurator.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

return function(ContainerConfigurator $container): void {
    $services = $container->services();

    // synthetic services don't specify a class
    $services->set('app.synthetic_service')
        ->synthetic();
};

----------------------------------------

TITLE: Symfony Branch Upmerging Process
DESCRIPTION: Series of Git commands demonstrating the process of synchronizing changes between different Symfony version branches by merging from oldest to latest versions.

LANGUAGE: shell
CODE:
# 'origin' is refered to as the main upstream project
git fetch origin

# update the local branches
git checkout 6.4
git reset --hard origin/6.4
git checkout 7.2
git reset --hard origin/7.2
git checkout 7.3
git reset --hard origin/7.3

# upmerge 6.4 into 7.2
git checkout 7.2
git merge --no-ff 6.4
# ... resolve conflicts
git commit

# upmerge 7.2 into 7.3
git checkout 7.3
git merge --no-ff 7.2
# ... resolve conflicts
git commit

git push origin 7.3 7.2 6.4

----------------------------------------

TITLE: Using Configuration Parameters in YAML
DESCRIPTION: Example of using configuration parameters in YAML format.

LANGUAGE: yaml
CODE:
# config/packages/some_package.yaml
some_package:
    email_address: '%app.admin_email%'

----------------------------------------

TITLE: Pushing Changes to Forked Repository in Bash
DESCRIPTION: Git command to push the committed changes to your forked repository on GitHub.

LANGUAGE: bash
CODE:
$ git push origin improve_install_article

----------------------------------------

TITLE: Implementing Setter Injection in PHP for Symfony Service
DESCRIPTION: This snippet demonstrates how to implement a setter method for dependency injection in a Symfony service class. It shows a MessageGenerator class with a setLogger method for injecting a LoggerInterface.

LANGUAGE: php
CODE:
// src/Service/MessageGenerator.php
namespace App\Service;

use Psr\Log\LoggerInterface;

class MessageGenerator
{
    private LoggerInterface $logger;

    public function setLogger(LoggerInterface $logger): void
    {
        $this->logger = $logger;
    }

    // ...
}

----------------------------------------

TITLE: Defining Non-Shared Service in YAML Configuration
DESCRIPTION: Shows how to configure a non-shared service using YAML configuration in services.yaml file. Sets the shared parameter to false for the specified service.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    App\SomeNonSharedService:
        shared: false
        # ...

----------------------------------------

TITLE: Initializing PDO Cache Adapter in Symfony
DESCRIPTION: Demonstrates how to create and configure a new PDO Cache Adapter instance. The adapter can be initialized with either a PDO connection or DSN string, along with optional namespace, default lifetime, and configuration options.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\PdoAdapter;

$cache = new PdoAdapter(
    // a PDO connection or DSN for lazy connecting through PDO
    $databaseConnectionOrDSN,

    // the string prefixed to the keys of the items stored in this cache
    $namespace = '',

    // the default lifetime (in seconds) for cache items that do not define their
    // own lifetime, with a value 0 causing items to be stored indefinitely (i.e.
    // until the database table is truncated or its rows are otherwise deleted)
    $defaultLifetime = 0,

    // an array of options for configuring the database table and connection
    $options = []
);

----------------------------------------

TITLE: Rendering Split JavaScript Files in Twig Template
DESCRIPTION: This snippet demonstrates how to use the encore_entry_script_tags() Twig function to automatically render the necessary script tags for split JavaScript files in a Symfony template.

LANGUAGE: twig
CODE:
{#
    May now render multiple script tags:
        <script src="/build/runtime.js" defer></script>
        <script src="/build/vendors-node_modules_jquery_dist_jquery_js.js" defer></script>
        <script src="/build/homepage.js" defer></script>
#}
{{ encore_entry_script_tags('homepage') }}

----------------------------------------

TITLE: Configuring composer.json for GitHub-hosted Recipes
DESCRIPTION: Shows how to configure the composer.json file to use GitHub-hosted private Symfony Flex recipes.

LANGUAGE: json
CODE:
{
    "extra": {
        "symfony": {
            "endpoint": [
                "https://api.github.com/repos/your-github-account-name/your-recipes-repository/contents/index.json",
                "flex://defaults"
            ]
        }
    }
}

----------------------------------------

TITLE: Configuring Command Options in Symfony
DESCRIPTION: Shows how to add options to a Symfony console command using addOption(). Demonstrates various option types and configurations.

LANGUAGE: php
CODE:
$this
    ->addOption(
        'iterations',
        null,
        InputOption::VALUE_REQUIRED,
        'How many times should the message be printed?',
        1
    )

----------------------------------------

TITLE: Configuring Method Calls in Symfony Services (XML)
DESCRIPTION: This XML configuration snippet demonstrates how to configure the container to call the setLogger method on the MessageGenerator service, injecting the logger service as an argument.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Service\MessageGenerator">
            <!-- ... -->
            <call method="setLogger">
                <argument type="service" id="logger"/>
            </call>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Installing AssetMapper with Composer
DESCRIPTION: Command to install the AssetMapper component and its dependencies using Composer

LANGUAGE: terminal
CODE:
$ composer require symfony/asset-mapper symfony/asset symfony/twig-pack

----------------------------------------

TITLE: Configuring Service Visibility with Symfony Attributes
DESCRIPTION: Demonstrates how to use the #[Autoconfigure] attribute to set a service as public directly on the class.

LANGUAGE: php
CODE:
// src/Service/Foo.php
namespace App\Service;

use Symfony\Component\DependencyInjection\Attribute\Autoconfigure;

#[Autoconfigure(public: true)]
class Foo
{
    // ...
}

----------------------------------------

TITLE: Creating a Semaphore Factory with Redis Storage in PHP
DESCRIPTION: This snippet demonstrates how to create a SemaphoreFactory using Redis as the storage backend. It includes connecting to a Redis server and setting up the necessary objects.

LANGUAGE: PHP
CODE:
use Symfony\Component\Semaphore\SemaphoreFactory;
use Symfony\Component\Semaphore\Store\RedisStore;

$redis = new Redis();
$redis->connect('172.17.0.2');

$store = new RedisStore($redis);
$factory = new SemaphoreFactory($store);

----------------------------------------

TITLE: Extending Overridden Template in Twig
DESCRIPTION: Demonstrates how to extend from the original template when overriding a bundle template to avoid infinite loop errors. Uses the special '!' prefix in the template name.

LANGUAGE: twig
CODE:
{# templates/bundles/AcmeUserBundle/registration/confirmed.html.twig #}
{# the special '!' prefix avoids errors when extending from an overridden template #}
{% extends "@!AcmeUser/registration/confirmed.html.twig" %}

{% block some_block %}
    ...
{% endblock %}

----------------------------------------

TITLE: Installing EventDispatcher Component via Composer
DESCRIPTION: Command to install the Symfony EventDispatcher component using Composer package manager.

LANGUAGE: terminal
CODE:
$ composer require symfony/event-dispatcher

----------------------------------------

TITLE: Manual AutoProvide Configuration for jQuery
DESCRIPTION: Demonstrates the equivalent manual configuration for providing jQuery globally using autoProvideVariables().

LANGUAGE: javascript
CODE:
Encore
    .autoProvideVariables({
        $: 'jquery',
        jQuery: 'jquery',
        'window.jQuery': 'jquery',
    })
    // ...
;

----------------------------------------

TITLE: Running PHP CS Fixer in Terminal
DESCRIPTION: Command to run PHP CS Fixer tool to automatically fix code syntax issues in a Symfony project

LANGUAGE: terminal
CODE:
$ cd your-project/
$ php php-cs-fixer.phar fix -v

----------------------------------------

TITLE: Adding Dockerfile Recipe Section for Symfony
DESCRIPTION: This snippet shows the required section in a Dockerfile that allows Symfony Flex recipes to automatically add Docker-related changes. It should be included in the root Dockerfile of a Symfony application.

LANGUAGE: dockerfile
CODE:
###> recipes ###
###< recipes ###

----------------------------------------

TITLE: Basic ChoiceType Usage in Symfony Form Builder
DESCRIPTION: Demonstrates how to add a simple ChoiceType field to a Symfony form builder with predefined choices.

LANGUAGE: PHP
CODE:
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
// ...

$builder->add('isAttending', ChoiceType::class, [
    'choices'  => [
        'Maybe' => null,
        'Yes' => true,
        'No' => false,
    ],
]);

----------------------------------------

TITLE: Configuring Class as Factory in YAML
DESCRIPTION: This YAML configuration shows how to use the class itself as a factory by specifying the create method and passing arguments.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    # ...

    App\Email\NewsletterManager:
        factory: [null, 'create']
        arguments:
            $sender: 'fabien@symfony.com'

----------------------------------------

TITLE: Enabling CSS Preprocessor Loaders in Webpack Encore Configuration
DESCRIPTION: Configuration example showing how to enable Sass, LESS, and Stylus preprocessor loaders in webpack.config.js. Each loader can be enabled independently using Encore's helper methods. After enabling, Encore will prompt for installing any missing dependencies.

LANGUAGE: javascript
CODE:
// webpack.config.js
// ...

Encore
    // ...

    // enable just the one you want

    // processes files ending in .scss or .sass
    .enableSassLoader()

    // processes files ending in .less
    .enableLessLoader()

    // processes files ending in .styl
    .enableStylusLoader()
;

----------------------------------------

TITLE: Accessing Command Arguments in Execute Method
DESCRIPTION: Shows how to access command arguments in the execute() method using getArgument() and handle optional values.

LANGUAGE: php
CODE:
protected function execute(InputInterface $input, OutputInterface $output): int
{
    $text = 'Hi '.$input->getArgument('name');

    $lastName = $input->getArgument('last_name');
    if ($lastName) {
        $text .= ' '.$lastName;
    }

    $output->writeln($text.'!');

    return Command::SUCCESS;
}

----------------------------------------

TITLE: Customizing CSRF Token Field in Symfony Forms (PHP)
DESCRIPTION: Shows how to customize the CSRF token field name globally for all forms using PHP configuration.

LANGUAGE: php
CODE:
// config/packages/framework.php
use Symfony\Config\FrameworkConfig;

return static function (FrameworkConfig $framework) {
    $framework->form()->csrfProtection()
        ->enabled(true)
        ->fieldName('custom_token_name')
    ;
};

----------------------------------------

TITLE: Implementing Language Validation with PHP Attributes
DESCRIPTION: Example showing how to apply the Language constraint using PHP attributes in a User entity class. Validates that preferredLanguage property contains a valid language code.

LANGUAGE: php
CODE:
// src/Entity/User.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class User
{
    #[Assert\Language]
    protected string $preferredLanguage;
}

----------------------------------------

TITLE: Defining Author Entity with Image Constraint in PHP
DESCRIPTION: Example of defining an Author entity class with an Image constraint on the headshot property. It demonstrates setting width and height restrictions on the uploaded image.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\Image(
        minWidth: 200,
        maxWidth: 400,
        minHeight: 200,
        maxHeight: 400,
    )]
    protected File $headshot;

    public function setHeadshot(?File $file = null): void
    {
        $this->headshot = $file;
    }

    public function getHeadshot(): File
    {
        return $this->headshot;
    }
}

----------------------------------------

TITLE: Implementing Kernel Service Injection in PHP
DESCRIPTION: Example showing how the Symfony Kernel injects itself as a service into the container during initialization.

LANGUAGE: php
CODE:
abstract class Kernel implements KernelInterface, TerminableInterface
{
    // ...

    protected function initializeContainer(): void
    {
        // ...
        $this->container->set('kernel', $this);

        // ...
    }
}

----------------------------------------

TITLE: Defining Configuration Parameters in PHP
DESCRIPTION: Demonstrates how to define configuration parameters using PHP format.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\Entity\BlogPost;
use App\Enum\PostState;

return static function (ContainerConfigurator $container): void {
    $container->parameters()
        ->set('app.admin_email', 'something@example.com')
        ->set('app.enable_v2_protocol', true)
        ->set('app.supported_locales', ['en', 'es', 'fr'])
        ->set('app.some_parameter', 'This is a Bell char: \x07')
        ->set('app.some_constant', GLOBAL_CONSTANT)
        ->set('app.another_constant', BlogPost::MAX_ITEMS)
        ->set('app.some_enum', PostState::Published);
};

// ...

----------------------------------------

TITLE: Managing Cookies in Varnish 3 for Caching
DESCRIPTION: This configuration for Varnish 3 removes all cookies except essential ones (PHPSESSID and REMEMBERME) to improve caching efficiency.

LANGUAGE: varnish3
CODE:
sub vcl_recv {
    // Remove all cookies except for essential ones.
    if (req.http.Cookie) {
        set req.http.Cookie = ";" + req.http.Cookie;
        set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
        set req.http.Cookie = regsuball(req.http.Cookie, ";(PHPSESSID|REMEMBERME)=", "; \1=");
        set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
        set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

        if (req.http.Cookie == "") {
            // If there are no more cookies, remove the header to get page cached.
            remove req.http.Cookie;
        }
    }
}

----------------------------------------

TITLE: Deprecating Service Aliases in Symfony YAML
DESCRIPTION: Shows how to deprecate a service alias in Symfony's YAML configuration, including custom deprecation messages.

LANGUAGE: yaml
CODE:
app.mailer:
    alias: 'App\Mail\PhpMailer'
    deprecated:
        package: 'acme/package'
        version: '1.2'
        message: 'The "%alias_id%" alias is deprecated. Do not use it anymore.'

----------------------------------------

TITLE: Configuring CSRF Protection in Symfony (PHP)
DESCRIPTION: Illustrates how to enable CSRF protection in the Symfony framework configuration using PHP format.

LANGUAGE: php
CODE:
// config/packages/framework.php
use Symfony\Config\FrameworkConfig;

return static function (FrameworkConfig $framework): void {
    $framework->csrfProtection()
        ->enabled(true)
    ;
};

----------------------------------------

TITLE: Using JsonManifestVersionStrategy for Asset Versioning in PHP
DESCRIPTION: Demonstrates how to use a JSON manifest file for asset versioning with JsonManifestVersionStrategy.

LANGUAGE: php
CODE:
use Symfony\Component\Asset\Package;
use Symfony\Component\Asset\VersionStrategy\JsonManifestVersionStrategy;

$package = new Package(new JsonManifestVersionStrategy(__DIR__.'/rev-manifest.json'));

echo $package->getUrl('css/app.css');
// result: build/css/app.b916426ea1d10021f3f17ce8031f93c2.css

----------------------------------------

TITLE: Configuring Encore Public Path for Subdirectory Deployment in Symfony
DESCRIPTION: This snippet shows how to adjust the Encore configuration in webpack.config.js when the Symfony app is deployed under a subdirectory.

LANGUAGE: javascript
CODE:
Encore
    // ...
    .setOutputPath('public/build/')
    // this is your *true* public path
    .setPublicPath('/myAppSubdir/build')
    // this is now needed so that your manifest.json keys are still `build/foo.js`
    // (which is a file that's used by Symfony's `asset()` function)
    .setManifestKeyPrefix('build')
;

----------------------------------------

TITLE: Configuring Lazy Services in PHP
DESCRIPTION: Illustrates how to configure a lazy service using PHP in Symfony. This method uses the ContainerConfigurator to set up a service that will be lazily instantiated.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\Twig\AppExtension;

return function(ContainerConfigurator $container): void {
    $services = $container->services();

    $services->set(AppExtension::class)->lazy();
};

----------------------------------------

TITLE: Defining a Hidden Console Command in Symfony PHP
DESCRIPTION: This snippet demonstrates how to create a hidden console command in Symfony. It uses the AsCommand attribute with the 'hidden' property set to true, which prevents the command from being listed in the default command listing.

LANGUAGE: php
CODE:
// src/Command/LegacyCommand.php
namespace App\Command;

use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;

#[AsCommand(name: 'app:legacy', hidden: true)]
class LegacyCommand extends Command
{
    // ...
}

----------------------------------------

TITLE: Adding Custom Form Extensions in Symfony Tests
DESCRIPTION: Implementation showing how to add custom form extensions for testing, including validator extensions and constraint validation.

LANGUAGE: php
CODE:
// tests/Form/Type/TestedTypeTest.php
namespace App\Tests\Form\Type;

// ...
use Symfony\Component\Form\Extension\Validator\ValidatorExtension;
use Symfony\Component\Validator\Validation;

class TestedTypeTest extends TypeTestCase
{
    protected function getExtensions(): array
    {
        $validator = Validation::createValidator();

        // or if you also need to read constraints from attributes
        $validator = Validation::createValidatorBuilder()
            ->enableAttributeMapping()
            ->getValidator();

        return [
            new ValidatorExtension($validator),
        ];
    }

    // ... your tests
}

----------------------------------------

TITLE: Implementing GreetingCardManager Class in PHP
DESCRIPTION: Defines a GreetingCardManager class that implements EmailFormatterAwareInterface with functionality to set enabled formatters.

LANGUAGE: php
CODE:
// src/Mail/GreetingCardManager.php
namespace App\Mail;

class GreetingCardManager implements EmailFormatterAwareInterface
{
    private array $enabledFormatters;

    public function setEnabledFormatters(array $enabledFormatters): void
    {
        $this->enabledFormatters = $enabledFormatters;
    }

    // ...
}

----------------------------------------

TITLE: Configuring Monolog Handler with JsonFormatter in YAML
DESCRIPTION: This snippet demonstrates how to configure a Monolog handler to use the JsonFormatter in a Symfony YAML configuration file.

LANGUAGE: yaml
CODE:
# config/packages/prod/monolog.yaml (and/or config/packages/dev/monolog.yaml)
monolog:
    handlers:
        file:
            type: stream
            level: debug
            formatter: 'monolog.formatter.json'

----------------------------------------

TITLE: Starting Symfony Local Web Server
DESCRIPTION: Commands to navigate to the project directory and start the Symfony local web server for development.

LANGUAGE: bash
CODE:
$ cd my-project/
$ symfony server:start

----------------------------------------

TITLE: Configuring Options in a Separate Method
DESCRIPTION: Demonstrates how to move option configuration to a separate method for better organization and extensibility.

LANGUAGE: PHP
CODE:
public function __construct(array $options = [])
{
    $resolver = new OptionsResolver();
    $this->configureOptions($resolver);

    $this->options = $resolver->resolve($options);
}

public function configureOptions(OptionsResolver $resolver): void
{
    $resolver->setDefaults([
        'host'       => 'smtp.example.org',
        'username'   => 'user',
        'password'   => 'pa$$word',
        'port'       => 25,
        'encryption' => null,
    ]);
}

----------------------------------------

TITLE: Configuring Authentication Entry Point in Symfony (PHP)
DESCRIPTION: This PHP configuration sets up a firewall with multiple authentication methods (form login and custom authenticator) and specifies form_login as the entry point for unauthenticated users.

LANGUAGE: php
CODE:
// config/packages/security.php
use App\Security\SocialConnectAuthenticator;
use Symfony\Config\SecurityConfig;

return static function (SecurityConfig $security): void {
    $security->enableAuthenticatorManager(true);
    // ....

    // allow authentication using a form or HTTP basic
    $mainFirewall = $security->firewall('main');
    $mainFirewall
        ->formLogin()
        ->customAuthenticators([SocialConnectAuthenticator::class])

        // configure the form authentication as the entry point for unauthenticated users
        ->entryPoint('form_login');
    ;
};

----------------------------------------

TITLE: Implementing Verbosity-Dependent Output in Symfony Commands
DESCRIPTION: Example of a Symfony command class that uses different output methods based on the verbosity level. It demonstrates how to check the current verbosity and conditionally display messages.

LANGUAGE: php
CODE:
// ...
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class CreateUserCommand extends Command
{
    // ...

    public function execute(InputInterface $input, OutputInterface $output): int
    {
        $user = new User(...);

        $output->writeln([
            'Username: '.$input->getArgument('username'),
            'Password: '.$input->getArgument('password'),
        ]);

        // available methods: ->isSilent(), ->isQuiet(), ->isVerbose(), ->isVeryVerbose(), ->isDebug()
        if ($output->isVerbose()) {
            $output->writeln('User class: '.get_class($user));
        }

        // alternatively you can pass the verbosity level PHP constant to writeln()
        $output->writeln(
            'Will only be printed in verbose mode or higher',
            OutputInterface::VERBOSITY_VERBOSE
        );

        return Command::SUCCESS;
    }
}

----------------------------------------

TITLE: Enabling Versioning in Webpack Encore Configuration
DESCRIPTION: This snippet shows how to enable asset versioning in the Webpack Encore configuration file. It adds the enableVersioning() method to the Encore object.

LANGUAGE: javascript
CODE:
// webpack.config.js

// ...
Encore
    .setOutputPath('public/build/')
    // ...
    .enableVersioning()

----------------------------------------

TITLE: Creating a PantherTestCase
DESCRIPTION: Example of creating a test case using PantherTestCase for end-to-end testing.

LANGUAGE: PHP
CODE:
namespace App\Tests;

use Symfony\Component\Panther\PantherTestCase;

class HomepageTest extends PantherTestCase
{
    public function testMyApp(): void
    {
        // your app is automatically started using the built-in web server
        $client = static::createPantherClient();
        $client->request('GET', '/home');

        // use any PHPUnit assertion, including the ones provided by Symfony...
        $this->assertPageTitleContains('My Title');
        $this->assertSelectorTextContains('#main', 'My body');

        // ... or the one provided by Panther
        $this->assertSelectorIsEnabled('.search');
        $this->assertSelectorIsDisabled('[type="submit"]');
        $this->assertSelectorIsVisible('.errors');
        $this->assertSelectorIsNotVisible('.loading');
        $this->assertSelectorAttributeContains('.price', 'data-old-price', '42');
        $this->assertSelectorAttributeNotContains('.price', 'data-old-price', '36');

        // ...
    }
}

----------------------------------------

TITLE: Creating Virtual Proxy Classes in PHP
DESCRIPTION: This example demonstrates how to generate and use virtual proxy classes for lazy loading using the ProxyHelper and LazyProxyTrait.

LANGUAGE: PHP
CODE:
namespace App\Hash;

use Symfony\Component\VarExporter\ProxyHelper;

interface ProcessorInterface
{
    public function getHash(): bool;
}

abstract class AbstractProcessor implements ProcessorInterface
{
    protected string $hash;

    public function getHash(): bool
    {
        return $this->hash;
    }
}

class HashProcessor extends AbstractProcessor
{
    public function __construct(array $data)
    {
        $this->populateHash($data);
    }

    private function populateHash(array $data): void
    {
        // ...
    }
}

$proxyCode = ProxyHelper::generateLazyProxy(new \ReflectionClass(AbstractProcessor::class));
// $proxyCode contains the actual proxy and the reference to LazyProxyTrait.
// In production env, this should be dumped into a file to avoid calling eval().
eval('class HashProcessorProxy'.$proxyCode);

$processor = HashProcessorProxy::createLazyProxy(initializer: function (): ProcessorInterface {
    $data = /** Retrieve required data to compute the hash */;
    $instance = new HashProcessor(...$data);

    // Do any operation you need here: call setters, getters, methods to validate the hash, etc.

    return $instance;
});

----------------------------------------

TITLE: Creating Form with Multiple Submit Buttons in Symfony
DESCRIPTION: Creates a form with two submit buttons for next and previous steps in a wizard-style form interface.

LANGUAGE: php
CODE:
$form = $this->createFormBuilder($task)
    // ...
    ->add('nextStep', SubmitType::class)
    ->add('previousStep', SubmitType::class)
    ->getForm();

----------------------------------------

TITLE: Displaying Available Autowiring Types in Symfony
DESCRIPTION: This command lists all available types that can be used for autowiring in the Symfony container.

LANGUAGE: terminal
CODE:
$ php bin/console debug:autowiring

----------------------------------------

TITLE: Configuring CORS settings for webpack-dev-server in Symfony Encore
DESCRIPTION: JavaScript code snippet showing how to configure CORS settings for webpack-dev-server in the webpack.config.js file to resolve cross-origin issues.

LANGUAGE: javascript
CODE:
// webpack.config.js
// ...

Encore
    // ...

    .configureDevServerOptions(options => {
        options.allowedHosts = 'all';
        // in older Webpack Dev Server versions, use this option instead:
        // options.firewall = false;
    })

----------------------------------------

TITLE: Improved PHP Request Handling with Default Value
DESCRIPTION: Updated PHP code that includes a default value for the 'name' parameter to avoid warnings.

LANGUAGE: PHP
CODE:
// framework/index.php
$name = $_GET['name'] ?? 'World';

printf('Hello %s', $name);

----------------------------------------

TITLE: Working with Arrays in PHP Expression Language
DESCRIPTION: Demonstrates array access using bracket notation in expressions.

LANGUAGE: PHP
CODE:
$data = ['life' => 10, 'universe' => 10, 'everything' => 22];

var_dump($expressionLanguage->evaluate(
    'data["life"] + data["universe"] + data["everything"]',
    [
        'data' => $data,
    ]
));

----------------------------------------

TITLE: Applying NotIdenticalTo Constraints using PHP
DESCRIPTION: Demonstrates how to programmatically add NotIdenticalTo constraints to a Person class using PHP. It applies constraints to the firstName and age properties.

LANGUAGE: php
CODE:
// src/Entity/Person.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Person
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('age', new Assert\NotIdenticalTo('Mary'));

        $metadata->addPropertyConstraint('age', new Assert\NotIdenticalTo(
            value: 15,
        ));
    }
}

----------------------------------------

TITLE: Configuring Luhn Constraint in YAML for Symfony Validation
DESCRIPTION: This YAML configuration applies the Luhn constraint to the cardNumber property of a Transaction entity in Symfony. It specifies a custom error message for invalid card numbers.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Transaction:
    properties:
        cardNumber:
            - Luhn:
                message: Please check your credit card number.

----------------------------------------

TITLE: Initializing ProxyAdapter with PSR-6 CacheItemPoolInterface in PHP
DESCRIPTION: This snippet demonstrates how to create a ProxyAdapter instance using a PSR-6 compliant cache item pool. It shows the constructor parameters including the cache pool, an optional namespace, and a default lifetime for cache items.

LANGUAGE: php
CODE:
use Psr\Cache\CacheItemPoolInterface;
use Symfony\Component\Cache\Adapter\ProxyAdapter;

// create your own cache pool instance that implements
// the PSR-6 CacheItemPoolInterface
$psr6CachePool = ...

$cache = new ProxyAdapter(

    // a cache pool instance
    CacheItemPoolInterface $psr6CachePool,

    // a string prefixed to the keys of the items stored in this cache
    $namespace = '',

    // the default lifetime (in seconds) for cache items that do not define their
    // own lifetime, with a value 0 causing items to be stored indefinitely (i.e.
    // until the cache is cleared)
    $defaultLifetime = 0
);

----------------------------------------

TITLE: Defining Configuration Parameters in YAML
DESCRIPTION: Example of defining configuration parameters using YAML format.

LANGUAGE: yaml
CODE:
# config/services.yaml
parameters:
    app.admin_email: 'something@example.com'
    app.enable_v2_protocol: true
    app.supported_locales: ['en', 'es', 'fr']
    app.some_parameter: !!binary VGhpcyBpcyBhIEJlbGwgY2hhciAH
    app.some_constant: !php/const GLOBAL_CONSTANT
    app.another_constant: !php/const App\Entity\BlogPost::MAX_ITEMS
    app.some_enum: !php/enum App\Enum\PostState::Published

# ...

----------------------------------------

TITLE: Displaying Detailed Service Information in Symfony
DESCRIPTION: This command provides detailed information about a specific service in the Symfony container by specifying its ID. Starting from Symfony 7.3, it displays service arguments by default, while in earlier versions, the --show-arguments option was required (now deprecated).

LANGUAGE: terminal
CODE:
$ php bin/console debug:container App\Service\Mailer

----------------------------------------

TITLE: Configuring Rate Limiter Lock Factory in YAML
DESCRIPTION: Example of configuring a custom lock factory for a rate limiter using YAML format.

LANGUAGE: yaml
CODE:
# config/packages/rate_limiter.yaml
framework:
    rate_limiter:
        anonymous_api:
            # ...
            lock_factory: 'lock.rate_limiter.factory'

            # or don't use any lock mechanism
            lock_factory: null

----------------------------------------

TITLE: Installing Symfony TypeInfo Component via Composer
DESCRIPTION: Command to install the Symfony TypeInfo component using Composer package manager.

LANGUAGE: terminal
CODE:
$ composer require symfony/type-info

----------------------------------------

TITLE: Simple PHP Web Application - Initial Example
DESCRIPTION: A basic PHP script that demonstrates the simplest possible web application, accepting a name parameter via GET request and printing a greeting

LANGUAGE: php
CODE:
// framework/index.php
$name = $_GET['name'];

printf('Hello %s', $name);

----------------------------------------

TITLE: Starting a Program with DebugFormatterHelper in Symfony
DESCRIPTION: Shows how to use the start() method of DebugFormatterHelper to display information when a program starts. It includes an example with a custom prefix.

LANGUAGE: PHP
CODE:
$process = new Process(...);

$output->writeln($debugFormatter->start(
    spl_object_hash($process),
    'Some process description'
));

$process->run();

LANGUAGE: PHP
CODE:
$output->writeln($debugFormatter->start(
    spl_object_hash($process),
    'Some process description',
    'STARTED'
));

----------------------------------------

TITLE: Installing HttpKernel Component via Composer
DESCRIPTION: Command to install the Symfony HttpKernel component using Composer package manager.

LANGUAGE: terminal
CODE:
$ composer require symfony/http-kernel

----------------------------------------

TITLE: Deprecating Service Aliases in Symfony XML
DESCRIPTION: Demonstrates how to deprecate a service alias using Symfony's XML configuration.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-Instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="app.mailer" alias="App\Mail\PhpMailer">
            <deprecated package="acme/package" version="1.2">
                The "%alias_id%" service alias is deprecated. Don't use it anymore.
            </deprecated>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Basic Service Definition Override in YAML
DESCRIPTION: Shows how to override a service definition in YAML configuration, demonstrating that the original service is lost.

LANGUAGE: yaml
CODE:
services:
    App\Mailer: ~

    # this replaces the old App\Mailer definition with the new one, the
    # old definition is lost
    App\Mailer:
        class: App\NewMailer

----------------------------------------

TITLE: Creating Symfony Project with Specific Version
DESCRIPTION: Command to create a new Symfony project using a specific version of Symfony.

LANGUAGE: bash
CODE:
$ symfony new my_project_directory --version="6.4.*"

----------------------------------------

TITLE: Configuring When Constraint in YAML
DESCRIPTION: YAML configuration for When constraint validation showing conditional rules based on discount type.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Model\Discount:
    properties:
        value:
            - GreaterThan: 0
            - When:
                expression: "this.getType() == 'percent'"
                constraints:
                    - LessThanOrEqual:
                        value: 100
                        message: "The value should be between 1 and 100!"
                otherwise:
                    - LessThan:
                        value: 9999
                        message: "The value should be less than 9999!"

----------------------------------------

TITLE: Google Analytics Event Listener Implementation
DESCRIPTION: Subscriber class that adds Google Analytics tracking code to HTML responses.

LANGUAGE: php
CODE:
namespace Simplex;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;

class GoogleListener implements EventSubscriberInterface
{
    public function onResponse(ResponseEvent $event): void
    {
        $response = $event->getResponse();

        if ($response->isRedirection()
            || ($response->headers->has('Content-Type') && false === strpos($response->headers->get('Content-Type'), 'html'))
            || 'html' !== $event->getRequest()->getRequestFormat()
        ) {
            return;
        }

        $response->setContent($response->getContent().'GA CODE');
    }

    public static function getSubscribedEvents(): array
    {
        return ['response' => 'onResponse'];
    }
}

----------------------------------------

TITLE: Generating Workflow Diagrams via Command Line
DESCRIPTION: Commands to generate visual workflow diagrams using different tools like Graphviz, PlantUML, and Mermaid CLI. Includes options for SVG and PNG output formats.

LANGUAGE: terminal
CODE:
# using Graphviz's 'dot' and SVG images
php bin/console workflow:dump workflow-name | dot -Tsvg -o graph.svg

# using Graphviz's 'dot' and PNG images
php bin/console workflow:dump workflow-name | dot -Tpng -o graph.png

# using PlantUML's 'plantuml.jar'
php bin/console workflow:dump workflow_name --dump-format=puml | java -jar plantuml.jar -p  > graph.png

# highlight 'place1' and 'place2' in the dumped workflow
php bin/console workflow:dump workflow-name place1 place2 | dot -Tsvg -o graph.svg

# using Mermaid.js CLI
php bin/console workflow:dump workflow_name --dump-format=mermaid | mmdc -o graph.svg

----------------------------------------

TITLE: Creating Initial CSS Styles for Encore
DESCRIPTION: Basic CSS file (app.css) with a simple style rule.

LANGUAGE: css
CODE:
/* assets/styles/app.css */
body {
    background-color: lightgray;
}

----------------------------------------

TITLE: Registering Inline Console Commands in PHP
DESCRIPTION: Example of registering an inline command with arguments and behavior using closure. Shows how to define command logic directly within the registration.

LANGUAGE: php
CODE:
// ...
$application->register('generate-admin')
    ->addArgument('username', InputArgument::REQUIRED)
    ->setCode(function (InputInterface $input, OutputInterface $output): int {
        // ...

        return Command::SUCCESS;
    });

----------------------------------------

TITLE: Implementing Basic Group Sequence Validation in PHP
DESCRIPTION: Example of implementing sequential validation groups in a User entity using PHP attributes. Demonstrates how to validate username and password with different validation groups in sequence.

LANGUAGE: php
CODE:
namespace App\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Validator\Constraints as Assert;

#[Assert\GroupSequence(['User', 'Strict'])]
class User implements UserInterface
{
    #[Assert\NotBlank]
    private string $username;

    #[Assert\NotBlank]
    private string $password;

    #[Assert\IsTrue(
        message: 'The password cannot match your username',
        groups: ['Strict'],
    )]
    public function isPasswordSafe(): bool
    {
        return ($this->username !== $this->password);
    }
}

----------------------------------------

TITLE: Creating Configuration Files in Symfony Flex Recipe
DESCRIPTION: Demonstrates how to include configuration file creation in a Symfony Flex recipe, including bundle registration and YAML configuration.

LANGUAGE: json
CODE:
{
    "manifests": {
        "acme/private-bundle": {
            "manifest": {
                "bundles": {
                    "Acme\\PrivateBundle\\AcmePrivateBundle": [
                        "all"
                    ]
                },
                "copy-from-recipe": {
                    "config/": "%CONFIG_DIR%"
                }
            },
            "files": {
                "config/packages/acme_private.yaml": {
                    "contents": [
                        "acme_private:",
                        "    encode: true",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "7405f3af1312d1f9121afed4dddef636c6c7ff00"
        }
    }
}

----------------------------------------

TITLE: Defining HttpKernelInterface in PHP
DESCRIPTION: This snippet shows the definition of the HttpKernelInterface, which is a crucial part of the Symfony HttpKernel component. It declares the handle method that processes HTTP requests and returns responses.

LANGUAGE: php
CODE:
namespace Symfony\Component\HttpKernel;

// ...
interface HttpKernelInterface
{
    /**
     * @return Response A Response instance
     */
    public function handle(
        Request $request,
        int $type = self::MAIN_REQUEST,
        bool $catch = true
    ): Response;
}

----------------------------------------

TITLE: Reading Array Values with PropertyAccessor in PHP
DESCRIPTION: Shows how to read values from an array using the PropertyAccessor's getValue method with index notation.

LANGUAGE: php
CODE:
$person = [
    'first_name' => 'Wouter',
];

var_dump($propertyAccessor->getValue($person, '[first_name]')); // 'Wouter'
var_dump($propertyAccessor->getValue($person, '[age]')); // null

----------------------------------------

TITLE: Applying NegativeOrZero Constraint using PHP Method
DESCRIPTION: This snippet shows how to apply the NegativeOrZero constraint to a property using a PHP method in a Symfony entity class.

LANGUAGE: php
CODE:
// src/Entity/UnderGroundGarage.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class UnderGroundGarage
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('level', new Assert\NegativeOrZero());
    }
}

----------------------------------------

TITLE: Implementing NotBlank Validation using PHP Attributes
DESCRIPTION: Example showing how to apply the NotBlank constraint to a property using PHP attributes in a Symfony Entity class.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\NotBlank]
    protected string $firstName;
}

----------------------------------------

TITLE: Installing Symfony Profiler via Composer
DESCRIPTION: Command to install the Symfony profiler package using Composer package manager

LANGUAGE: terminal
CODE:
$ composer require --dev symfony/profiler-pack

----------------------------------------

TITLE: Inline Console Styling in Symfony
DESCRIPTION: Examples of using inline color and style definitions within tags for console output formatting.

LANGUAGE: php
CODE:
// using named colors
$output->writeln('<fg=green>foo</>');

// using hexadecimal colors
$output->writeln('<fg=#c0392b>foo</>');

// black text on a cyan background
$output->writeln('<fg=black;bg=cyan>foo</>');

// bold text on a yellow background
$output->writeln('<bg=yellow;options=bold>foo</>');

// bold text with underscore
$output->writeln('<options=bold,underscore>foo</>');

----------------------------------------

TITLE: Service Decoration with Attributes
DESCRIPTION: Demonstrates how to decorate a service using PHP attributes, maintaining a reference to the original service as '.inner'.

LANGUAGE: php
CODE:
namespace App;

use Symfony\Component\DependencyInjection\Attribute\AsDecorator;

#[AsDecorator(decorates: Mailer::class)]
class DecoratingMailer
{
    // ...
}

----------------------------------------

TITLE: Searching for Specific Service Tag
DESCRIPTION: Command to search for services with a specific tag in a Symfony application.

LANGUAGE: shell
CODE:
$ php bin/console debug:container --tag=form.type

----------------------------------------

TITLE: Applying Charset Constraint in PHP using Attributes
DESCRIPTION: Example of how to apply the Charset constraint to a property in a PHP class using attributes. This snippet demonstrates validating that the 'content' property uses UTF-8 encoding.

LANGUAGE: php
CODE:
// src/Entity/FileDTO.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class FileDTO
{
    #[Assert\Charset('UTF-8')]
    protected string $content;
}

----------------------------------------

TITLE: Using UUID Factory in PHP Service
DESCRIPTION: Example of using the UUID factory in a PHP service class.

LANGUAGE: php
CODE:
namespace App\Service;

use Symfony\Component\Uid\Factory\UuidFactory;

class FooService
{
    public function __construct(
        private UuidFactory $uuidFactory,
    ) {
    }

    public function generate(): void
    {
        // This creates a UUID of the version given in the configuration file (v7 by default)
        $uuid = $this->uuidFactory->create();

        $nameBasedUuid = $this->uuidFactory->nameBased(/** ... */);
        $randomBasedUuid = $this->uuidFactory->randomBased();
        $timestampBased = $this->uuidFactory->timeBased();

        // ...
    }
}

----------------------------------------

TITLE: Installing SymfonyCastsResetPasswordBundle
DESCRIPTION: Command to install the SymfonyCastsResetPasswordBundle for handling forgotten passwords

LANGUAGE: terminal
CODE:
$ composer require symfonycasts/reset-password-bundle

----------------------------------------

TITLE: Configuring PHP-FPM Pool for Symfony
DESCRIPTION: This snippet shows how to configure a PHP-FPM pool for handling FastCGI requests in a Symfony application. It includes options for setting user/group permissions and choosing between Unix socket or TCP connection.

LANGUAGE: ini
CODE:
; /etc/php/8.3/fpm/pool.d/www.conf

; a pool called www
[www]
user = www-data
group = www-data

; use a unix domain socket
listen = /var/run/php/php8.3-fpm.sock

; or listen on a TCP connection
; listen = 127.0.0.1:9000

----------------------------------------

TITLE: Implementing Template Rendering in Controller
DESCRIPTION: Shows how to render a Twig template from a controller, passing variables to the template context.

LANGUAGE: php
CODE:
// src/Controller/LuckyController.php
namespace App\Controller;

use Symfony\Component\HttpFoundation\Response;
// ...

class LuckyController extends AbstractController
{
    #[Route('/lucky/number')]
    public function number(): Response
    {
        $number = random_int(0, 100);

        return $this->render('lucky/number.html.twig', [
            'number' => $number,
        ]);
    }
}

----------------------------------------

TITLE: Using ServiceLocatorTagPass in Compiler Pass
DESCRIPTION: Shows how to use ServiceLocatorTagPass to create service locators in compiler passes.

LANGUAGE: PHP
CODE:
use Symfony\Component\DependencyInjection\Compiler\ServiceLocatorTagPass;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Reference;

public function process(ContainerBuilder $container): void
{
    // ...

    $locateableServices = [
        // ...
        'logger' => new Reference('logger'),
    ];

    $myService = $container->findDefinition(MyService::class);

    $myService->addArgument(ServiceLocatorTagPass::register($container, $locateableServices));
}

----------------------------------------

TITLE: Basic Configuration Parameter Example
DESCRIPTION: Initial configuration setup showing how parameter values are handled by default in the Configuration class.

LANGUAGE: php
CODE:
// inside Configuration class
$rootNode
    ->children()
        ->booleanNode('logging')->defaultValue('%kernel.debug%')->end()
        // ...
    ->end()
;

----------------------------------------

TITLE: Installing Symfony Finder Component via Composer
DESCRIPTION: Use Composer to install the Symfony Finder component in your project.

LANGUAGE: bash
CODE:
$ composer require symfony/finder

----------------------------------------

TITLE: Applying Custom Compound Constraint with Metadata in PHP
DESCRIPTION: This snippet demonstrates how to apply the custom PasswordRequirements constraint using PHP metadata configuration.

LANGUAGE: php
CODE:
// src/Entity/User.php
namespace App\Entity\User;

use App\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class User
{
    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('plainPassword', new Assert\PasswordRequirements());
    }
}

----------------------------------------

TITLE: Adding a File Upload Field in Symfony Form
DESCRIPTION: This snippet demonstrates how to add a file upload field to a Symfony form using the FileType class.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\FileType;
// ...

$builder->add('attachment', FileType::class);

----------------------------------------

TITLE: Creating Symfony Microservice or API with Composer
DESCRIPTION: Command to create a new Symfony project for microservices, console applications, or APIs using Composer, specifying the version.

LANGUAGE: bash
CODE:
$ composer create-project symfony/skeleton:"7.3.x-dev" my_project_directory

----------------------------------------

TITLE: Configuring UUID Factory in YAML
DESCRIPTION: YAML configuration for the UUID factory in Symfony.

LANGUAGE: yaml
CODE:
framework:
    uid:
        default_uuid_version: 7
        name_based_uuid_version: 5
        name_based_uuid_namespace: 6ba7b810-9dad-11d1-80b4-00c04fd430c8
        time_based_uuid_version: 7
        time_based_uuid_node: 121212121212

----------------------------------------

TITLE: Validation Error Template
DESCRIPTION: Twig template for displaying validation errors

LANGUAGE: twig
CODE:
{# templates/author/validation.html.twig #}
<h3>The author has the following errors</h3>
<ul>
{% for error in errors %}
    <li>{{ error.message }}</li>
{% endfor %}
</ul>

----------------------------------------

TITLE: Disabling Commands in ConsoleEvents::COMMAND Listener
DESCRIPTION: This snippet demonstrates how to disable a command within a ConsoleEvents::COMMAND listener using the disableCommand() method. It also shows how to re-enable a command if needed.

LANGUAGE: php
CODE:
use Symfony\Component\Console\ConsoleEvents;
use Symfony\Component\Console\Event\ConsoleCommandEvent;

$dispatcher->addListener(ConsoleEvents::COMMAND, function (ConsoleCommandEvent $event): void {
    // gets the command to be executed
    $command = $event->getCommand();

    // ... check if the command can be executed

    // disables the command, this will result in the command being skipped
    // and code 113 being returned from the Application
    $event->disableCommand();

    // it is possible to enable the command in a later listener
    if (!$event->commandShouldRun()) {
        $event->enableCommand();
    }
});

----------------------------------------

TITLE: Applying Tailwind Form Theme in Twig Template
DESCRIPTION: This snippet demonstrates how to apply the Tailwind CSS form theme to a specific form in a Twig template. It uses the form_theme tag to specify the theme and then renders the form.

LANGUAGE: html+twig
CODE:
{# ... #}
{# this tag only applies to the forms defined in this template #}
{% form_theme form 'tailwind_2_layout.html.twig' %}

{% block body %}
    <h1>User Sign Up:</h1>
    {{ form(form) }}
{% endblock %}

----------------------------------------

TITLE: Using Backed Enum in Symfony Controller with Route
DESCRIPTION: Example of using a backed enum as a controller argument with a route in Symfony.

LANGUAGE: php
CODE:
class CardController
{
    #[Route('/cards/{suit}')]
    public function list(Suit $suit): Response
    {
        // ...
    }

    // ...
}

----------------------------------------

TITLE: Configuring Image Constraint in YAML
DESCRIPTION: YAML configuration for the Image constraint on the Author entity's headshot property, specifying width and height limitations.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        headshot:
            - Image:
                minWidth: 200
                maxWidth: 400
                minHeight: 200
                maxHeight: 400

----------------------------------------

TITLE: Updating Symfony Package Versions in composer.json
DESCRIPTION: Example showing how to update Symfony package version constraints in composer.json when upgrading from version 6.3 to 6.4. Demonstrates updating both individual package versions and the symfony.require setting.

LANGUAGE: diff
CODE:
      {
          "...": "...",

          "require": {
    -         "symfony/config": "6.3.*",
    +         "symfony/config": "6.4.*",
    -         "symfony/console": "6.3.*",
    +         "symfony/console": "6.4.*",
              "...": "...",

              "...": "A few libraries starting with
                      symfony/ follow their own versioning scheme. You
                      do not need to update these versions: you can
                      upgrade them independently whenever you want",
              "symfony/monolog-bundle": "^3.10",
          },
          "...": "...",
      }

----------------------------------------

TITLE: Generating ULIDs in PHP
DESCRIPTION: Example of generating ULIDs using the Symfony Uid component.

LANGUAGE: php
CODE:
use Symfony\Component\Uid\Ulid;

$ulid = new Ulid();  // e.g. 01AN4Z07BY79KA1307SR9X4MV3

----------------------------------------

TITLE: Workflow Configuration in YAML
DESCRIPTION: YAML configuration for a pull request workflow with custom styling metadata including colors and descriptions for states and transitions.

LANGUAGE: yaml
CODE:
framework:
    workflows:
        pull_request:
            type: 'state_machine'
            marking_store:
                type: 'method'
                property: 'currentPlace'
            supports:
                - App\Entity\PullRequest
            initial_marking: start
            places:
                start: ~
                coding: ~
                test: ~
                review:
                    metadata:
                        description: Human review
                merged: ~
                closed:
                    metadata:
                        bg_color: DeepSkyBlue

----------------------------------------

TITLE: Composer Autoload Configuration
DESCRIPTION: PSR-4 autoload configuration in composer.json for handling multiple application namespaces.

LANGUAGE: json
CODE:
{
    "autoload": {
        "psr-4": {
            "Shared\\": "src/",
            "Api\\": "apps/api/src/"
        }
    }
}

----------------------------------------

TITLE: Configuring Symfony HTTP Client in YAML
DESCRIPTION: Example of how to configure the Symfony HTTP Client using YAML configuration.

LANGUAGE: yaml
CODE:
# config/packages/framework.yaml
framework:
    http_client:
        default_options:
            max_redirects: 7

----------------------------------------

TITLE: Configuring Unique Validation in YAML
DESCRIPTION: Shows how to configure the Unique constraint using YAML configuration for a Person entity's contactEmails property.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Person:
    properties:
        contactEmails:
            - Unique: ~

----------------------------------------

TITLE: Creating Child Repository Classes in PHP
DESCRIPTION: Example implementation of concrete repository classes that extend the base repository to inherit common functionality and dependencies.

LANGUAGE: php
CODE:
namespace App\Repository;\n\nuse App\Repository\BaseDoctrineRepository;\n\nclass DoctrineUserRepository extends BaseDoctrineRepository\n{\n    // ...\n}\n\nclass DoctrinePostRepository extends BaseDoctrineRepository\n{\n    // ...\n}

----------------------------------------

TITLE: Implementing AtLeastOneOf Constraint Using PHP Metadata
DESCRIPTION: Example showing how to configure AtLeastOneOf constraint using PHP metadata in a Student entity class. Demonstrates validation setup using ClassMetadata.

LANGUAGE: php
CODE:
// src/Entity/Student.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Student
{
    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('password', new Assert\AtLeastOneOf(
            constraints: [
                new Assert\Regex(pattern: '/#/'),
                new Assert\Length(min: 10),
            ],
        ));

        $metadata->addPropertyConstraint('grades', new Assert\AtLeastOneOf(
            constraints: [
                new Assert\Count(min: 3),
                new Assert\All(
                    constraints: [
                        new Assert\GreaterThanOrEqual(5),
                    ],
                ),
            ],
        ));
    }
}

----------------------------------------

TITLE: Applying EnableAutoMapping Constraint with PHP Code
DESCRIPTION: This snippet shows how to apply the EnableAutoMapping constraint to a class using PHP code in the entity class itself, implementing the loadValidatorMetadata method.

LANGUAGE: php
CODE:
// src/Entity/BookCollection.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class BookCollection
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addConstraint(new Assert\EnableAutoMapping());
    }
}

----------------------------------------

TITLE: Generating UUID v3 in PHP
DESCRIPTION: Example of generating a UUID v3 (name-based, MD5) using the Symfony Uid component.

LANGUAGE: php
CODE:
use Symfony\Component\Uid\Uuid;

// you can use any of the predefined namespaces...
$namespace = Uuid::fromString(Uuid::NAMESPACE_OID);
// ...or use a random namespace:
// $namespace = Uuid::v4();

// $name can be any arbitrary string
// $uuid is an instance of Symfony\Component\Uid\UuidV3
$uuid = Uuid::v3($namespace, $name);

----------------------------------------

TITLE: Using the AsciiSlugger
DESCRIPTION: Example of using the AsciiSlugger to create URL-safe slugs from strings.

LANGUAGE: PHP
CODE:
use Symfony\Component\String\Slugger\AsciiSlugger;

$slugger = new AsciiSlugger();
$slug = $slugger->slug('Wôrķšƥáçè ~~sèťtïñğš~~');
// $slug = 'Workspace-settings'

----------------------------------------

TITLE: Using Symfony Flex for Dependency Management
DESCRIPTION: JSON diff showing how to use Symfony Flex's extra.symfony.require configuration for efficient dependency management.

LANGUAGE: json
CODE:
{
    "...":"...",

    "require": {
-        "symfony/cache": "7.0.*",
+        "symfony/cache": "*",
-        "symfony/config": "7.0.*",
+        "symfony/config": "*",
-        "symfony/console": "7.0.*",
+        "symfony/console": "*",
         "...": "..."
    },
    "...": "...",

+    "extra": {
+        "symfony": {
+            "require": "7.0.*"
+        }
+    }
}

----------------------------------------

TITLE: Basic SSI HTML Structure
DESCRIPTION: Example of HTML markup showing how SSI directives are implemented using HTML comments for including external content.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
    <body>
        <!-- ... some content -->

        <!-- Embed the content of another page here -->
        <!--#include virtual="/..." -->

        <!-- ... more content -->
    </body>
</html>

----------------------------------------

TITLE: Configuring Parent Services in PHP
DESCRIPTION: PHP configuration for setting up parent-child service relationships and dependency injection in Symfony's service container.

LANGUAGE: php
CODE:
namespace Symfony\Component\DependencyInjection\Loader\Configurator;\n\nuse App\Repository\BaseDoctrineRepository;\nuse App\Repository\DoctrinePostRepository;\nuse App\Repository\DoctrineUserRepository;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(BaseDoctrineRepository::class)\n        ->abstract()\n        ->args([service('doctrine.orm.entity_manager')])\n        ->call('setLogger', [service('logger')])\n    ;\n\n    $services->set(DoctrineUserRepository::class)\n        ->parent(BaseDoctrineRepository::class)\n    ;\n\n    $services->set(DoctrinePostRepository::class)\n        ->parent(BaseDoctrineRepository::class)\n    ;\n};

----------------------------------------

TITLE: Using Wildcards in Symfony Finder
DESCRIPTION: Demonstrates how to use wildcards to search in directories matching a pattern with the Symfony Finder component.

LANGUAGE: php
CODE:
$finder->in('src/Symfony/*/*/Resources');

----------------------------------------

TITLE: Validating IP Address using PHP Attributes
DESCRIPTION: Demonstrates how to validate an IP address property using PHP attributes in a Symfony entity class.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\Ip]
    protected string $ipAddress;
}

----------------------------------------

TITLE: Creating Console Application with Symfony Runtime
DESCRIPTION: Example of how to create a console application using the Symfony Runtime component. This code sets up a console command interface.

LANGUAGE: php
CODE:
#!/usr/bin/env php
<?php
// bin/console

use App\Kernel;
use Symfony\Bundle\FrameworkBundle\Console\Application;

require_once dirname(__DIR__).'/vendor/autoload_runtime.php';

return function (array $context): Application {
    $kernel = new Kernel($context['APP_ENV'], (bool) $context['APP_DEBUG']);
    return new Application($kernel);
};

----------------------------------------

TITLE: Custom ReactPHP Runtime Implementation
DESCRIPTION: Example of creating a custom runtime implementation for ReactPHP server with PSR-15 support

LANGUAGE: php
CODE:
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\RequestHandlerInterface;
use React\EventLoop\Factory as ReactFactory;
use React\Http\Server as ReactHttpServer;
use React\Socket\Server as ReactSocketServer;
use Symfony\Component\Runtime\RunnerInterface;

class ReactPHPRunner implements RunnerInterface
{
    public function __construct(
        private RequestHandlerInterface $application,
        private int $port,
    ) {
    }

    public function run(): int
    {
        $application = $this->application;
        $loop = ReactFactory::create();
        $server = new ReactHttpServer(
            $loop,
            function (ServerRequestInterface $request) use ($application): ResponseInterface {
                return $application->handle($request);
            }
        );
        $socket = new ReactSocketServer($this->port, $loop);
        $server->listen($socket);
        $loop->run();
        return 0;
    }
}

----------------------------------------

TITLE: Configuring Week Constraint with PHP Attributes
DESCRIPTION: Demonstrates how to apply the Week constraint to a property using PHP attributes. It sets a minimum and maximum week range for the year 2022.

LANGUAGE: php
CODE:
// src/Entity/OnlineCourse.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class OnlineCourse
{
    #[Assert\Week(min: '2022-W01', max: '2022-W20')]
    protected string $startWeek;
}

----------------------------------------

TITLE: Defining Image Constraint in XML
DESCRIPTION: XML configuration for the Image constraint on the Author entity's headshot property, setting width and height restrictions.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="headshot">
            <constraint name="Image">
                <option name="minWidth">200</option>
                <option name="maxWidth">400</option>
                <option name="minHeight">200</option>
                <option name="maxHeight">400</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Installing Symfony LDAP Component via Composer
DESCRIPTION: This command installs the Symfony LDAP component using Composer package manager.

LANGUAGE: Bash
CODE:
$ composer require symfony/ldap

----------------------------------------

TITLE: Customizing Form Field Classes with Twig
DESCRIPTION: This snippet shows how to customize CSS classes for individual form fields using Twig. It overrides default classes for various form elements like rows, labels, and widgets.

LANGUAGE: twig
CODE:
{{ form_row(form.title, {
    row_class: 'my row classes',
    label_class: 'my label classes',
    error_item_class: 'my error item classes',
    widget_class: 'my widget classes',
    widget_disabled_class: 'my disabled widget classes',
    widget_errors_class: 'my widget with error classes',
}) }}

----------------------------------------

TITLE: Configuring Asset Manifests for Multiple Builds in Symfony
DESCRIPTION: This YAML snippet demonstrates how to configure asset manifests for multiple Webpack builds in Symfony.

LANGUAGE: yaml
CODE:
# config/packages/assets.yaml
framework:
    assets:
        packages:
            first_build:
                json_manifest_path: '%kernel.project_dir%/public/first_build/manifest.json'
            second_build:
                json_manifest_path: '%kernel.project_dir%/public/second_build/manifest.json'

----------------------------------------

TITLE: Displaying Symfony Project Information
DESCRIPTION: Command to show information about the current Symfony project, useful when working on an existing application for the first time.

LANGUAGE: bash
CODE:
$ php bin/console about

----------------------------------------

TITLE: Defining Nested Options
DESCRIPTION: Shows how to define and configure nested options using a closure.

LANGUAGE: PHP
CODE:
public function configureOptions(OptionsResolver $resolver): void
{
    $resolver->setOptions('spool', function (OptionsResolver $spoolResolver): void {
        $spoolResolver->setDefaults([
            'type' => 'file',
            'path' => '/path/to/spool',
        ]);
        $spoolResolver->setAllowedValues('type', ['file', 'memory']);
        $spoolResolver->setAllowedTypes('path', 'string');
    });
}

----------------------------------------

TITLE: Configuring DisableAutoMapping in YAML
DESCRIPTION: Example of disabling auto-mapping using YAML configuration format in Symfony's validator configuration.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\BookCollection:
    constraints:
        - DisableAutoMapping: ~

----------------------------------------

TITLE: Using Integer Processor for Environment Variables in XML
DESCRIPTION: Example of using the integer processor to convert an environment variable value to an integer in an XML configuration file.

LANGUAGE: xml
CODE:
<!-- config/packages/framework.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:framework="http://symfony.com/schema/dic/symfony"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/symfony
        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">

    <framework:config>
        <framework:router http-port="%env(int:HTTP_PORT)%"/>
    </framework:config>
</container>

----------------------------------------

TITLE: Installing Symfony HttpFoundation with Composer
DESCRIPTION: Command to install the Symfony HttpFoundation component using Composer.

LANGUAGE: Shell
CODE:
$ composer require symfony/http-foundation

----------------------------------------

TITLE: Configuring UniqueEntity Constraint in PHP
DESCRIPTION: Example of how to configure the UniqueEntity constraint for a User entity using PHP in the entity class and form type.

LANGUAGE: php
CODE:
// src/Entity/User.php
namespace App\Entity;

// DON'T forget the following use statement!!!
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

use Symfony\Component\Validator\Constraints as Assert;

class User
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addConstraint(new UniqueEntity(
            fields: 'email',
        ));

        $metadata->addPropertyConstraint('email', new Assert\Email());
    }
}

// src/Form/Type/UserType.php
namespace App\Form\Type;

// ...
// DON'T forget the following use statement!!!
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

class UserType extends AbstractType
{
    // ...

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            // ...
            'data_class' => User::class,
            'constraints' => [
                new UniqueEntity(fields: ['email']),
            ],
        ]);
    }
}

----------------------------------------

TITLE: Property Injection in PHP
DESCRIPTION: Shows dependency injection through public properties. This is generally discouraged due to lack of control over dependency lifecycle but may be necessary when working with third-party code.

LANGUAGE: php
CODE:
class NewsletterManager\n{\n    public MailerInterface $mailer;\n\n    // ...\n}

----------------------------------------

TITLE: Defining Immutable Color Class in PHP
DESCRIPTION: Creates an immutable Color class with red, green, and blue properties and corresponding getter methods.

LANGUAGE: php
CODE:
// src/Painting/Color.php
namespace App\Painting;

final class Color
{
    public function __construct(
        private int $red,
        private int $green,
        private int $blue,
    ) {
    }

    public function getRed(): int
    {
        return $this->red;
    }

    public function getGreen(): int
    {
        return $this->green;
    }

    public function getBlue(): int
    {
        return $this->blue;
    }
}

----------------------------------------

TITLE: Expression Validation using PHP Attributes
DESCRIPTION: Implementing expression validation using PHP attributes to ensure technical posts have specific categories.

LANGUAGE: php
CODE:
#[Assert\Expression(
    "this.getCategory() in ['php', 'symfony'] or !this.isTechnicalPost()",
    message: 'If this is a tech post, the category should be either php or symfony!',
)]
class BlogPost
{
    // ...
}

----------------------------------------

TITLE: Creating and Using Expression Providers in PHP
DESCRIPTION: Demonstrates how to create and use expression providers to add custom functions to ExpressionLanguage.

LANGUAGE: php
CODE:
use Symfony\Component\ExpressionLanguage\ExpressionFunction;
use Symfony\Component\ExpressionLanguage\ExpressionFunctionProviderInterface;

class StringExpressionLanguageProvider implements ExpressionFunctionProviderInterface
{
    public function getFunctions(): array
    {
        return [
            new ExpressionFunction('lowercase', function ($str): string {
                return sprintf('(is_string(%1$s) ? strtolower(%1$s) : %1$s)', $str);
            }, function ($arguments, $str): string {
                if (!is_string($str)) {
                    return $str;
                }

                return strtolower($str);
            }),
        ];
    }
}

use Symfony\Component\ExpressionLanguage\ExpressionLanguage;

// using the constructor
$expressionLanguage = new ExpressionLanguage(null, [
    new StringExpressionLanguageProvider(),
    // ...
]);

// using registerProvider()
$expressionLanguage->registerProvider(new StringExpressionLanguageProvider());

----------------------------------------

TITLE: Clearing Symfony Cache on Windows
DESCRIPTION: Command to clear the Symfony cache directory on Windows systems after a major version upgrade.

LANGUAGE: shell
CODE:
C:\> rmdir /s /q var\cache\*

----------------------------------------

TITLE: Installing Symfony Config Component via Composer
DESCRIPTION: Command to install the Symfony Config component using Composer package manager.

LANGUAGE: terminal
CODE:
$ composer require symfony/config

----------------------------------------

TITLE: Console Command Configuration
DESCRIPTION: Composer script configuration for handling multiple application commands.

LANGUAGE: json
CODE:
{
    "scripts": {
        "auto-scripts": {
            "cache:clear -iapi": "symfony-cmd",
            "cache:clear -iadmin": "symfony-cmd",
            "assets:install %PUBLIC_DIR% -iapi": "symfony-cmd",
            "assets:install %PUBLIC_DIR% -iadmin --no-cleanup": "symfony-cmd"
        }
    }
}

----------------------------------------

TITLE: Adding setLogger Method to NewsletterManager
DESCRIPTION: Shows the required setLogger method in the NewsletterManager class for optional dependency injection.

LANGUAGE: php
CODE:
public function setLogger(LoggerInterface $logger): void
{
    // ...
}

----------------------------------------

TITLE: Formatting Time Values
DESCRIPTION: Demonstrates how to format time values from seconds into human readable format.

LANGUAGE: php
CODE:
Helper::formatTime(0.001);         // 1 ms
Helper::formatTime(42);            // 42 s
Helper::formatTime(125);           // 2 min
Helper::formatTime(125, 2);        // 2 min, 5 s
Helper::formatTime(172799, 4);     // 1 d, 23 h, 59 min, 59 s
Helper::formatTime(172799.056, 5); // 1 d, 23 h, 59 min, 59 s, 56 ms

----------------------------------------

TITLE: Basic Clock Usage in PHP
DESCRIPTION: Demonstrates how to use the Clock class to manage time, including setting implementations and getting current time.

LANGUAGE: PHP
CODE:
use Symfony\Component\Clock\Clock;
use Symfony\Component\Clock\MockClock;

Clock::set(new MockClock());

$clock = Clock::get();

$clock->withTimeZone('Europe/Paris');

$now = $clock->now();

$clock->sleep(2.5);

----------------------------------------

TITLE: Configuring ExpressionSyntax Constraint with PHP
DESCRIPTION: Demonstrates how to configure the ExpressionSyntax constraint using PHP in a loadValidatorMetadata method. It shows application of the constraint to multiple properties with different configurations.

LANGUAGE: php
CODE:
// src/Entity/Student.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Order
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('promotion', new Assert\ExpressionSyntax());

        $metadata->addPropertyConstraint('shippingOptions', new Assert\ExpressionSyntax(
            allowedVariables: ['user', 'shipping_centers'],
        ));
    }
}

----------------------------------------

TITLE: Resolving Types Using TypeResolver
DESCRIPTION: Example of using TypeResolver to determine types from reflection objects and strings, including property reflection and type instantiation.

LANGUAGE: php
CODE:
use Symfony\Component\TypeInfo\Type;
use Symfony\Component\TypeInfo\TypeResolver\TypeResolver;

class Dummy
{
    public function __construct(
        public int $id,
    ) {
    }
}

$typeResolver = TypeResolver::create();

$typeResolver->resolve(new \ReflectionProperty(Dummy::class, 'id')); // returns an "int" Type instance
$typeResolver->resolve('bool'); // returns a "bool" Type instance

$type = Type::list(Type::nullable(Type::bool()));

$keyType = $type->getCollectionKeyType();

$isValueNullable = $type->getCollectionValueType()->isNullable();

----------------------------------------

TITLE: Installing Symfony Contract Packages
DESCRIPTION: Commands for installing various Symfony contract packages via Composer. These packages provide different types of contracts like cache, event dispatcher, deprecation, HTTP client, service, and translation contracts.

LANGUAGE: terminal
CODE:
$ composer require symfony/cache-contracts
$ composer require symfony/event-dispatcher-contracts
$ composer require symfony/deprecation-contracts
$ composer require symfony/http-client-contracts
$ composer require symfony/service-contracts
$ composer require symfony/translation-contracts

----------------------------------------

TITLE: Rendering a Form in Twig
DESCRIPTION: Twig template code to render a Symfony form using form helper functions.

LANGUAGE: twig
CODE:
{{ form_start(form) }}
    {{ form_widget(form) }}
    <input type="submit">
{{ form_end(form) }}

----------------------------------------

TITLE: Implementing Hostname Validation using PHP Attributes
DESCRIPTION: Example of using the Hostname constraint with PHP attributes in a ServerSettings entity class. The constraint validates that the name property contains a valid hostname.

LANGUAGE: php
CODE:
// src/Entity/ServerSettings.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class ServerSettings
{
    #[Assert\Hostname(message: 'The server name must be a valid hostname.')]
    protected string $name;
}

----------------------------------------

TITLE: Class-Level Validation with Callback Constraint
DESCRIPTION: Shows how to implement class-level validation using the Callback constraint with a custom validate() method.

LANGUAGE: php
CODE:
use Symfony\Component\Validator\Context\ExecutionContextInterface;

public function validate(ExecutionContextInterface $context): void
{
    // ...
}

public static function loadValidatorMetadata(ClassMetadata $metadata): void
{
    $metadata->addConstraint(new Assert\Callback('validate'));
}

----------------------------------------

TITLE: Service Decoration with Priority
DESCRIPTION: Shows how to control the order of multiple decorators using decoration priority in different configuration formats.

LANGUAGE: php
CODE:
#[AsDecorator(decorates: Foo::class, priority: 5)]
class Bar
{
    public function __construct(
        #[AutowireDecorated]
        private $inner,
    ) {
    }
    // ...
}

----------------------------------------

TITLE: Configuring Callback Validation with PHP Attributes
DESCRIPTION: Example of implementing callback validation using PHP attributes in a Symfony entity class. Shows how to define a validation method that receives an ExecutionContextInterface.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;

class Author
{
    #[Assert\Callback]
    public function validate(ExecutionContextInterface $context, mixed $payload): void
    {
        // ...
    }
}

----------------------------------------

TITLE: Configuring CDN Public Path in Webpack Encore
DESCRIPTION: Demonstrates how to configure Webpack Encore to use a CDN in production environment while maintaining local paths in development. Includes setup for manifest key prefixing to ensure proper asset path generation.

LANGUAGE: diff
CODE:
      // webpack.config.js
      // ...

      Encore
          .setOutputPath('public/build/')
          // in dev mode, don't use the CDN
          .setPublicPath('/build');
          // ...
      ;

    + if (Encore.isProduction()) {
    +     Encore.setPublicPath('https://my-cool-app.com.global.prod.fastly.net');
    +
    +     // guarantee that the keys in manifest.json are *still*
    +     // prefixed with build/
    +     // (e.g. "build/dashboard.js": "https://my-cool-app.com.global.prod.fastly.net/dashboard.js")
    +     Encore.setManifestKeyPrefix('build/');
    + }

----------------------------------------

TITLE: Configuring Couchbase Connection with Single DSN in PHP
DESCRIPTION: This snippet shows how to create and configure a Couchbase Collection instance using a single Data Source Name (DSN) string. It demonstrates the use of the createConnection helper method.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\CouchbaseCollectionAdapter;

// pass a single DSN string to register a single server with the client
$client = CouchbaseCollectionAdapter::createConnection(
    'couchbase://localhost'
    // the DSN can include config options (pass them as a query string):
    // 'couchbase://localhost:11210?operationTimeout=10'
    // 'couchbase://localhost:11210?operationTimeout=10&configTimout=20'
);

----------------------------------------

TITLE: Working with Country Names in PHP
DESCRIPTION: Demonstrates accessing country names and codes using the Countries class

LANGUAGE: PHP
CODE:
use Symfony\Component\Intl\Countries;

\Locale::setDefault('en');

$countries = Countries::getNames();
// ('alpha2Code' => 'countryName')
// => ['AF' => 'Afghanistan', 'AX' => 'Åland Islands', ...]

$countries = Countries::getAlpha3Names();
// ('alpha3Code' => 'countryName') 
// => ['AFG' => 'Afghanistan', 'ALA' => 'Åland Islands', ...]

----------------------------------------

TITLE: Registering Custom Functions in ExpressionLanguage
DESCRIPTION: Shows how to register custom functions for use in expressions.

LANGUAGE: php
CODE:
use Symfony\Component\ExpressionLanguage\ExpressionLanguage;

$expressionLanguage = new ExpressionLanguage();
$expressionLanguage->register('lowercase', function ($str): string {
    return sprintf('(is_string(%1$s) ? strtolower(%1$s) : %1$s)', $str);
}, function ($arguments, $str): string {
    if (!is_string($str)) {
        return $str;
    }

    return strtolower($str);
});

var_dump($expressionLanguage->evaluate('lowercase("HELLO")'));
// this will print: hello

----------------------------------------

TITLE: Configuring Cache Kernel Service in PHP
DESCRIPTION: Service configuration using PHP to register the CacheKernel as a decorator for the http_cache service.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\CacheKernel;

return function (ContainerConfigurator $container): void {
    $services = $container->services();

    $services->set(CacheKernel::class)
        ->decorate('http_cache')
        ->args([
            service('kernel'),
            service('http_cache.store'),
            service('esi')->nullOnInvalid(),
        ])
    ;
};

----------------------------------------

TITLE: Identifying Clicked Button by Name in Symfony Form
DESCRIPTION: This code shows how to identify which button was clicked in a Symfony form using the getClickedButton() method. It demonstrates checking the button's name and comparing button objects for nested forms.

LANGUAGE: php
CODE:
if ($form->getClickedButton() && 'saveAndAdd' === $form->getClickedButton()->getName()) {
    // ...
}

// when using nested forms, two or more buttons can have the same name;
// in those cases, compare the button objects instead of the button names
if ($form->getClickedButton() === $form->get('saveAndAdd')){
    // ...
}

----------------------------------------

TITLE: Installing Symfony VarExporter Component via Composer
DESCRIPTION: This command installs the Symfony VarExporter component as a development dependency using Composer.

LANGUAGE: Bash
CODE:
$ composer require --dev symfony/var-exporter

----------------------------------------

TITLE: Defining UniqueEntity Constraint in XML
DESCRIPTION: Example of how to configure the UniqueEntity constraint for a User entity using XML format in a validation configuration file.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\User">
        <constraint name="Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity">
            <option name="fields">email</option>
        </constraint>
        <property name="email">
            <constraint name="Email"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Ignoring Missing Dependencies in YAML
DESCRIPTION: Demonstrates how to ignore missing dependencies using YAML configuration in Symfony.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    App\Newsletter\NewsletterManager:
        calls:
            - setLogger: ['@?logger']

----------------------------------------

TITLE: Overriding Translations Directory in YAML Configuration
DESCRIPTION: This YAML configuration shows how to override the default translations directory using the framework.translator.default_path option.

LANGUAGE: yaml
CODE:
# config/packages/translation.yaml
framework:
    translator:
        # ...
        default_path: "%kernel.project_dir%/i18n"

----------------------------------------

TITLE: Configuring Date Comparison with GreaterThan in PHP
DESCRIPTION: Illustrates how to programmatically set up a GreaterThan constraint in PHP to compare a delivery date against 'today'.

LANGUAGE: php
CODE:
// src/Entity/Order.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Order
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('deliveryDate', new Assert\GreaterThan('today'));
    }
}

----------------------------------------

TITLE: Minimal Dockerfile for Panther
DESCRIPTION: Dockerfile configuration to run Panther with Chrome and Firefox in a Docker container.

LANGUAGE: Dockerfile
CODE:
FROM php:alpine

# Chromium and ChromeDriver
ENV PANTHER_NO_SANDBOX 1
# Not mandatory, but recommended
ENV PANTHER_CHROME_ARGUMENTS='--disable-dev-shm-usage'
RUN apk add --no-cache chromium chromium-chromedriver

# Firefox and GeckoDriver (optional)
ARG GECKODRIVER_VERSION=0.28.0
RUN apk add --no-cache firefox libzip-dev; \
    docker-php-ext-install zip
RUN wget -q https://github.com/mozilla/geckodriver/releases/download/v$GECKODRIVER_VERSION/geckodriver-v$GECKODRIVER_VERSION-linux64.tar.gz; \
    tar -zxf geckodriver-v$GECKODRIVER_VERSION-linux64.tar.gz -C /usr/bin; \
    rm geckodriver-v$GECKODRIVER_VERSION-linux64.tar.gz

----------------------------------------

TITLE: Configuring Lazy Loading for Symfony Console Commands in XML
DESCRIPTION: This snippet shows how to configure lazy loading for Symfony console commands using XML configuration. It demonstrates the syntax for setting the command attribute on the console.command tag in the service definition.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <!-- ... -->

        <service id="App\Command\SunshineCommand">
            <tag name="console.command" command="app:sunshine"/>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Dumping and Manipulating AST in PHP
DESCRIPTION: Demonstrates how to dump and manipulate the Abstract Syntax Tree (AST) of an expression.

LANGUAGE: php
CODE:
use Symfony\Component\ExpressionLanguage\ExpressionLanguage;

$ast = (new ExpressionLanguage())
    ->parse('1 + 2', [])
    ->getNodes()
;

// dump the AST nodes for inspection
var_dump($ast);

// dump the AST nodes as a string representation
$astAsString = $ast->dump();

$astAsArray = (new ExpressionLanguage())
    ->parse('1 + 2', [])
    ->getNodes()
    ->toArray()
;

----------------------------------------

TITLE: Running Return Type Patching Script
DESCRIPTION: Command to run the Symfony script that automatically adds native return types to methods.

LANGUAGE: shell
CODE:
$ ./vendor/bin/patch-type-declarations

----------------------------------------

TITLE: Ignoring Missing Dependencies in XML
DESCRIPTION: Shows how to ignore missing dependencies using XML configuration in Symfony.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Newsletter\NewsletterManager">
            <call method="setLogger">
                <argument type="service" id="logger" on-invalid="ignore"/>
            </call>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Installing Symfony HTTP Client
DESCRIPTION: Command to install the Symfony HTTP Client component using Composer.

LANGUAGE: shell
CODE:
$ composer require symfony/http-client

----------------------------------------

TITLE: Using ReflectionExtractor for Property Information
DESCRIPTION: This snippet demonstrates how to use ReflectionExtractor to get various types of property information.

LANGUAGE: PHP
CODE:
use Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor;

$reflectionExtractor = new ReflectionExtractor();

// List information.
$reflectionExtractor->getProperties($class);

// Type information.
$reflectionExtractor->getTypes($class, $property);

// Access information.
$reflectionExtractor->isReadable($class, $property);
$reflectionExtractor->isWritable($class, $property);

// Initializable information
$reflectionExtractor->isInitializable($class, $property);

----------------------------------------

TITLE: Using ReflectionExtractor for Property Information
DESCRIPTION: This snippet demonstrates how to use ReflectionExtractor to get various types of property information.

LANGUAGE: PHP
CODE:
use Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor;

$reflectionExtractor = new ReflectionExtractor();

// List information.
$reflectionExtractor->getProperties($class);

// Type information.
$reflectionExtractor->getTypes($class, $property);

// Access information.
$reflectionExtractor->isReadable($class, $property);
$reflectionExtractor->isWritable($class, $property);

// Initializable information
$reflectionExtractor->isInitializable($class, $property);

----------------------------------------

TITLE: Installing PSR-7 Bridge and PSR-7 Implementation in Symfony
DESCRIPTION: Commands to install the Symfony PSR-7 bridge and a PSR-7 implementation (nyholm/psr7) using Composer.

LANGUAGE: bash
CODE:
$ composer require symfony/psr-http-message-bridge

LANGUAGE: bash
CODE:
$ composer require nyholm/psr7

----------------------------------------

TITLE: GitHub Actions Workflow for Panther
DESCRIPTION: YAML configuration for running Panther tests in GitHub Actions.

LANGUAGE: YAML
CODE:
name: Run Panther tests

on: [ push, pull_request ]

jobs:
  tests:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: "ramsey/composer-install@v2"

      - name: Install dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Run test suite
        run: bin/phpunit

----------------------------------------

TITLE: LessThan Constraint Configuration in YAML
DESCRIPTION: Shows how to configure LessThan validation constraints using YAML format for validating numeric properties.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Person:
    properties:
        siblings:
            - LessThan: 5
        age:
            - LessThan:
                value: 80

----------------------------------------

TITLE: Configuring Bootstrap with Turbo Drive
DESCRIPTION: JavaScript setup for Bootstrap components to work with Turbo Drive page transitions

LANGUAGE: javascript
CODE:
// app.js

// this waits for Turbo Drive to load
document.addEventListener('turbo:load', function (e) {
    // this enables bootstrap tooltips globally
    let tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    let tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new Tooltip(tooltipTriggerEl)
    });
});

----------------------------------------

TITLE: Applying Bootstrap Theme to Individual Form in Twig
DESCRIPTION: Twig template code showing how to apply Bootstrap 4 theme to a specific form instance.

LANGUAGE: html+twig
CODE:
{# ... #}
{# this tag only applies to the forms defined in this template #}
{% form_theme form 'bootstrap_4_layout.html.twig' %}

{% block body %}
    <h1>User Sign Up:</h1>
    {{ form(form) }}
{% endblock %}

----------------------------------------

TITLE: Defining Isbn Constraint with PHP Attributes
DESCRIPTION: Example of using the Isbn constraint with PHP attributes in a Book entity class. It applies the constraint to an 'isbn' property, specifying ISBN-10 type and a custom error message.

LANGUAGE: php
CODE:
// src/Entity/Book.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Book
{
    #[Assert\Isbn(
        type: Assert\Isbn::ISBN_10,
        message: 'This value is not valid.',
    )]
    protected string $isbn;
}

----------------------------------------

TITLE: Checking Submit Button Click Status in PHP
DESCRIPTION: Example showing how to check if a specific submit button was clicked when handling form submission.

LANGUAGE: PHP
CODE:
if ($form->get('save')->isClicked()) {
    // ...
}

----------------------------------------

TITLE: Managing Browser History with BrowserKit in PHP
DESCRIPTION: Examples of navigating browser history and resetting the client state using BrowserKit methods.

LANGUAGE: PHP
CODE:
use Acme\Client;

$client = new Client();
$client->request('GET', '/');

$link = $crawler->selectLink('Documentation')->link();
$client->click($link);

$crawler = $client->back();
$crawler = $client->forward();

$client->restart();

----------------------------------------

TITLE: Creating and Using EventDispatcher in PHP with Symfony
DESCRIPTION: This snippet demonstrates how to create a regular EventDispatcher and add a listener to it. It shows the basic setup required before creating an ImmutableEventDispatcher.

LANGUAGE: PHP
CODE:
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Contracts\EventDispatcher\Event;

$dispatcher = new EventDispatcher();
$dispatcher->addListener('foo.action', function (Event $event): void {
    // ...
});

// ...

----------------------------------------

TITLE: Using PathPackage for Grouped Assets in PHP
DESCRIPTION: Demonstrates how to use PathPackage to group assets under a common path.

LANGUAGE: php
CODE:
use Symfony\Component\Asset\PathPackage;

$pathPackage = new PathPackage('/static/images', new StaticVersionStrategy('v1'));

echo $pathPackage->getUrl('logo.png');
// result: /static/images/logo.png?v1

// Base path is ignored when using absolute paths
echo $pathPackage->getUrl('/logo.png');
// result: /logo.png?v1

----------------------------------------

TITLE: Configuring ESI Tag Structure in HTML
DESCRIPTION: Basic HTML structure showing how to implement an ESI include tag for embedding external content fragments.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
    <body>
        <!-- ... some content -->

        <!-- Embed the content of another page here -->
        <esi:include src="http://..."/>

        <!-- ... more content -->
    </body>
</html>

----------------------------------------

TITLE: Configuring Environment-Specific Options in XML
DESCRIPTION: Shows how to configure environment-specific options using XML format.

LANGUAGE: xml
CODE:
<!-- config/packages/webpack_encore.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/symfony
        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">
    <webpack-encore:config
        output-path="%kernel.project_dir%/public/build"
        strict-mode="true"
        cache="false"
    />

    <when env="prod">
        <webpack-encore:config cache="true"/>
    </when>

    <when env="test">
        <webpack-encore:config strict-mode="false"/>
    </when>
</container>

----------------------------------------

TITLE: Enabling Relative Protocol for URL Constraint
DESCRIPTION: Example of enabling relative protocol option for the URL constraint using PHP attributes.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\Url(
        relativeProtocol: true,
    )]
    protected string $bioUrl;
}

----------------------------------------

TITLE: Using Service Closure in Compiler Pass
DESCRIPTION: Example of creating a service closure within a compiler pass using ServiceClosureArgument.

LANGUAGE: php
CODE:
use Symfony\Component\DependencyInjection\Argument\ServiceClosureArgument;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Reference;

public function process(ContainerBuilder $container): void
{
    // ...

    $myService->addArgument(new ServiceClosureArgument(new Reference('mailer')));
}

----------------------------------------

TITLE: YAML String Escaping with Single Quotes
DESCRIPTION: Demonstrates how to escape single quotes within single-quoted strings in YAML.

LANGUAGE: yaml
CODE:
'A single quote '' inside a single-quoted string'

----------------------------------------

TITLE: XML Configuration for IsFalse Constraint
DESCRIPTION: Shows how to configure the IsFalse constraint using XML format.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <getter property="stateInvalid">
            <constraint name="IsFalse">
                <option name="message">You've entered an invalid state.</option>
            </constraint>
        </getter>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Configuring Homestead for Symfony Project Directory Mapping
DESCRIPTION: This YAML snippet shows how to configure Homestead to sync the local Symfony project directory with the virtual environment. It maps the ~/projects directory on the host machine to /home/vagrant/projects in the Homestead environment.

LANGUAGE: yaml
CODE:
# ...
folders:
    - map: ~/projects
      to: /home/vagrant/projects

----------------------------------------

TITLE: Creating Custom Notification Class
DESCRIPTION: Example of extending the base Notification class to customize notification behavior

LANGUAGE: php
CODE:
namespace App\Notifier;

use Symfony\Component\Notifier\Notification\Notification;
use Symfony\Component\Notifier\Recipient\RecipientInterface;
use Symfony\Component\Notifier\Recipient\SmsRecipientInterface;

class InvoiceNotification extends Notification
{
    public function __construct(
        private int $price,
    ) {
    }

    public function getChannels(RecipientInterface $recipient): array
    {
        if (
            $this->price > 10000
            && $recipient instanceof SmsRecipientInterface
        ) {
            return ['sms'];
        }

        return ['email'];
    }
}

----------------------------------------

TITLE: Pushing Changes to Remote Branch
DESCRIPTION: Command to force push changes to the remote branch after rebasing.

LANGUAGE: bash
CODE:
$ git push --force origin BRANCH_NAME

----------------------------------------

TITLE: Displaying Progress Information with DebugFormatterHelper in Symfony
DESCRIPTION: Illustrates how to use the progress() method of DebugFormatterHelper to show output while a program is running. It includes handling both standard and error output.

LANGUAGE: PHP
CODE:
use Symfony\Component\Process\Process;

// ...
$process = new Process(...);

$process->run(function (string $type, string $buffer) use ($output, $debugFormatter, $process): void {
    $output->writeln(
        $debugFormatter->progress(
            spl_object_hash($process),
            $buffer,
            Process::ERR === $type
        )
    );
});
// ...

----------------------------------------

TITLE: Defining Service Configuration in XML
DESCRIPTION: Example of creating a separate mailer service configuration file in XML format with parameters and services sections.

LANGUAGE: xml
CODE:
<!-- config/services/mailer.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <parameters>
        <!-- ... some parameters -->
    </parameters>

    <services>
        <!-- ... some services -->
    </services>
</container>

----------------------------------------

TITLE: Validating Country Codes Using PHP Code
DESCRIPTION: Shows how to programmatically add the Country validation constraint using PHP code. Uses the ClassMetadata API to apply the constraint to the country property.

LANGUAGE: php
CODE:
// src/Entity/User.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class User
{
    // ...

    public static function loadValidationMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('country', new Assert\Country());
    }
}

----------------------------------------

TITLE: Installing VarDumper Component
DESCRIPTION: Composer command to install the VarDumper component in a Symfony application.

LANGUAGE: terminal
CODE:
$ composer require --dev symfony/var-dumper

----------------------------------------

TITLE: Defining NotNull Constraint in XML
DESCRIPTION: Shows how to define the NotNull constraint using XML configuration in Symfony.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="firstName">
            <constraint name="NotNull"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Simulating Link Clicks with BrowserKit in PHP
DESCRIPTION: Examples of simulating link clicks using the clickLink and click methods of the BrowserKit client.

LANGUAGE: PHP
CODE:
use Acme\Client;

$client = new Client();
$client->request('GET', '/product/123');

$crawler = $client->clickLink('Go elsewhere...');

// Using click() method
$crawler = $client->request('GET', '/product/123');
$link = $crawler->selectLink('Go elsewhere...')->link();
$client->click($link);

// With custom headers
$client->click($link, ['X-Custom-Header' => 'Some data']);
$crawler = $client->clickLink('Go elsewhere...', ['X-Custom-Header' => 'Some data']);

----------------------------------------

TITLE: Installing Symfony Console Component via Composer
DESCRIPTION: Command to install the Symfony Console Component using Composer package manager.

LANGUAGE: terminal
CODE:
$ composer require symfony/console

----------------------------------------

TITLE: Configuring Workers for Symfony Server
DESCRIPTION: YAML configuration for setting up workers to run automatically with the Symfony server.

LANGUAGE: yaml
CODE:
# .symfony.local.yaml
workers:
    # built-in command that builds and watches front-end assets
    # npm_encore_watch:
    #     cmd: ['npx', 'encore', 'dev', '--watch']
    npm_encore_watch: ~

    # built-in command that starts messenger consumer
    # messenger_consume_async:
    #     cmd: ['symfony', 'console', 'messenger:consume', 'async']
    #     watch: ['config', 'src', 'templates', 'vendor']
    messenger_consume_async: ~

    # you can also add your own custom commands
    build_spa:
        cmd: ['npm', '--cwd', './spa/', 'dev']

    # auto start Docker compose when starting server (available since Symfony CLI 5.7.0)
    docker_compose: ~

----------------------------------------

TITLE: Applying NotCompromisedPassword Constraint in PHP with Metadata
DESCRIPTION: Shows how to apply the NotCompromisedPassword constraint using PHP metadata in a class method.

LANGUAGE: php
CODE:
// src/Entity/User.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class User
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('rawPassword', new Assert\NotCompromisedPassword());
    }
}

----------------------------------------

TITLE: Configuring File Loaders for Symfony Validator
DESCRIPTION: Demonstrates how to set up YAML and XML file loaders for validation metadata in Symfony's Validator component.

LANGUAGE: php
CODE:
use Symfony\Component\Validator\Validation;

$validator = Validation::createValidatorBuilder()
    ->addYamlMapping('validator/validation.yaml')
    ->getValidator();

----------------------------------------

TITLE: Implementing Password Upgrade in UserRepository
DESCRIPTION: Example of implementing PasswordUpgraderInterface in UserRepository for Doctrine entity user provider

LANGUAGE: php
CODE:
// src/Repository/UserRepository.php
namespace App\Repository;

// ...
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\PasswordUpgraderInterface;

class UserRepository extends EntityRepository implements PasswordUpgraderInterface
{
    // ...

    public function upgradePassword(PasswordAuthenticatedUserInterface $user, string $newHashedPassword): void
    {
        // set the new hashed password on the User object
        $user->setPassword($newHashedPassword);

        // execute the queries on the database
        $this->getEntityManager()->flush();
    }
}

----------------------------------------

TITLE: Defining Isbn Constraint in XML
DESCRIPTION: XML configuration for the Isbn constraint on a Book entity's 'isbn' property. It specifies ISBN-10 type and a custom error message.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Book">
        <property name="isbn">
            <constraint name="Isbn">
                <option name="type">isbn10</option>
                <option name="message">This value is not valid.</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Basic File Property Class Definition in PHP
DESCRIPTION: Example class showing a basic file property with getter and setter methods for handling File objects.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\HttpFoundation\File\File;

class Author
{
    protected File $bioFile;

    public function setBioFile(?File $file = null): void
    {
        $this->bioFile = $file;
    }

    public function getBioFile(): File
    {
        return $this->bioFile;
    }
}

----------------------------------------

TITLE: Overriding Vendor Directory in Composer JSON
DESCRIPTION: This JSON snippet shows how to specify a custom vendor directory in the composer.json file using the 'config.vendor-dir' option.

LANGUAGE: json
CODE:
{
    "config": {
        "bin-dir": "bin",
        "vendor-dir": "/some/dir/vendor"
    }
}

----------------------------------------

TITLE: Using Symfony Link Utility
DESCRIPTION: Command to use the Symfony link utility for testing changes in an existing project.

LANGUAGE: bash
CODE:
$ php link /path/to/your/project

----------------------------------------

TITLE: Implementing When Constraint with XML
DESCRIPTION: XML configuration example for When constraint showing how to define conditional validation rules.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">
    <class name="App\Model\Discount">
        <property name="value">
            <constraint name="GreaterThan">0</constraint>
            <constraint name="When">
                <option name="expression">
                    this.getType() == 'percent'
                </option>
                <option name="constraints">
                    <constraint name="LessThanOrEqual">
                        <option name="value">100</option>
                        <option name="message">The value should be between 1 and 100!</option>
                    </constraint>
                </option>
                <option name="otherwise">
                    <constraint name="LessThan">
                        <option name="value">9999</option>
                        <option name="message">The value should be less than 9999!</option>
                    </constraint>
                </option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Formatting Memory Values
DESCRIPTION: Shows how to format memory sizes into human readable units (B, KiB, MiB, GiB).

LANGUAGE: php
CODE:
Helper::formatMemory(512);                // 512 B
Helper::formatMemory(1024);               // 1 KiB
Helper::formatMemory(1024 * 1024);        // 1.0 MiB
Helper::formatMemory(1024 * 1024 * 1024); // 1 GiB

----------------------------------------

TITLE: Creating Symfony Project with Next Version
DESCRIPTION: Command to create a new Symfony project using the next (in-development) version of Symfony.

LANGUAGE: bash
CODE:
$ symfony new my_project_directory --version=next

----------------------------------------

TITLE: Using TranslatableMessage for Custom Validation
DESCRIPTION: PHP code demonstrating the use of TranslatableMessage in a custom validation method.

LANGUAGE: php
CODE:
use Symfony\Component\Translation\TranslatableMessage;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;

#[Assert\Callback]
public function validate(ExecutionContextInterface $context, mixed $payload): void
{
    // somehow you have an array of "fake names"
    $fakeNames = [/* ... */];

    // check if the name is actually a fake name
    if (in_array($this->getFirstName(), $fakeNames, true)) {
        $context->buildViolation(new TranslatableMessage('author.name.fake', [], 'validators'))
            ->atPath('firstName')
            ->addViolation()
        ;
    }
}

----------------------------------------

TITLE: Validating ULID with YAML Configuration
DESCRIPTION: YAML configuration example for ULID validation in Symfony. Shows how to define the validation constraint in a separate validation configuration file.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\File:
    properties:
        identifier:
            - Ulid: ~

----------------------------------------

TITLE: Configuring Assets Base URLs in XML
DESCRIPTION: Example of how to configure base URLs for assets in the framework configuration using XML format.

LANGUAGE: xml
CODE:
<!-- config/packages/framework.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:framework="http://symfony.com/schema/dic/symfony"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">

    <framework:config>
        <framework:assets base-url="http://cdn.example.com/"/>
    </framework:config>
</container>

----------------------------------------

TITLE: Configuring HTTP Cache in Symfony YAML
DESCRIPTION: YAML configuration to enable the Symfony HTTP cache (reverse proxy) in production environment.

LANGUAGE: yaml
CODE:
# config/packages/framework.yaml
when@prod:
    framework:
        http_cache: true

----------------------------------------

TITLE: Configuring Custom Password Strength Estimator in PHP
DESCRIPTION: Example of how to configure the PasswordStrengthValidator service to use a custom password strength estimator using PHP.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use Symfony\Component\Validator\Constraints\PasswordStrengthValidator;

return function (ContainerConfigurator $container): void {
    $services = $container->services();

    $services->set('custom_password_strength_estimator', CustomPasswordStrengthEstimator::class);

    $services->set(PasswordStrengthValidator::class)
        ->args([closure('custom_password_strength_estimator')]);
};

----------------------------------------

TITLE: Git Branch Management for Symfony Version Testing
DESCRIPTION: Terminal commands for creating and managing a Git branch to safely test new Symfony versions without affecting the main project.

LANGUAGE: terminal
CODE:
$ cd projects/my_project/
$ git checkout -b testing_new_symfony
# ... update composer.json configuration
$ composer update "symfony/*"

# ... after testing the new Symfony version
$ git checkout master
$ git branch -D testing_new_symfony

----------------------------------------

TITLE: File Validation with PHP LoadValidatorMetadata
DESCRIPTION: Example showing file validation configuration using PHP LoadValidatorMetadata method to validate PDF files under 1024k.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('bioFile', new Assert\File(
            maxSize: '1024k',
            extensions: [
                'pdf',
            ],
            extensionsMessage: 'Please upload a valid PDF',
        ));
    }
}

----------------------------------------

TITLE: Configuring Git User Information
DESCRIPTION: Sets up Git with the user's name and email for commits.

LANGUAGE: bash
CODE:
$ git config --global user.name "Your Name"
$ git config --global user.email you@example.com

----------------------------------------

TITLE: Formatting Error Block Output
DESCRIPTION: Shows how to create formatted block output for error messages with background colors.

LANGUAGE: php
CODE:
$errorMessages = ['Error!', 'Something went wrong'];
$formattedBlock = $formatter->formatBlock($errorMessages, 'error');
$output->writeln($formattedBlock);

----------------------------------------

TITLE: Configuring Basic Firewall with Form Login
DESCRIPTION: Example of configuring a basic firewall with form login authentication in Symfony security.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
security:
    # ...
    firewalls:
        main:
            pattern: ^/admin
            form_login:
                login_path: /login
                check_path: /login_check

----------------------------------------

TITLE: Installing Test Dependencies with Composer
DESCRIPTION: Shows how to install the symfony/test-pack package which includes PHPUnit and other testing dependencies.

LANGUAGE: terminal
CODE:
$ composer require --dev symfony/test-pack

----------------------------------------

TITLE: Defining Application Configuration Parameters in YAML
DESCRIPTION: Example of defining application configuration parameters using YAML in the services.yaml file. Use short, prefixed names to avoid collisions.

LANGUAGE: yaml
CODE:
# config/services.yaml
parameters:
    # don't do this: 'dir' is too generic, and it doesn't convey any meaning
    app.dir: '...'
    # do this: short but easy to understand names
    app.contents_dir: '...'
    # it's OK to use dots, underscores, dashes or nothing, but always
    # be consistent and use the same format for all the parameters
    app.dir.contents: '...'
    app.contents-dir: '...'

----------------------------------------

TITLE: Installing Symfony Clock Component
DESCRIPTION: Command to install the Symfony Clock component via Composer package manager.

LANGUAGE: terminal
CODE:
$ composer require symfony/clock

----------------------------------------

TITLE: Using Expressions in Service Factories in YAML
DESCRIPTION: This YAML configuration demonstrates how to use expressions in service factories to conditionally create services based on parameters or arguments.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    App\Email\NewsletterManagerInterface:
        # use the "tracable_newsletter" service when debug is enabled, "newsletter" otherwise.
        # "@=" indicates that this is an expression
        factory: '@=parameter("kernel.debug") ? service("tracable_newsletter") : service("newsletter")'

    # you can use the arg() function to retrieve an argument from the definition
    App\Email\NewsletterManagerInterface:
        factory: "@=arg(0).createNewsletterManager() ?: service(\"default_newsletter_manager\")"
        arguments:
            - '@App\Email\NewsletterManagerFactory'

----------------------------------------

TITLE: BlogPost Entity Implementation
DESCRIPTION: Example entity class showing how to implement the required marking store properties and methods

LANGUAGE: php
CODE:
namespace App\Entity;

class BlogPost
{
    private string $currentPlace;
    private string $title;
    private string $content;

    public function getCurrentPlace(): string
    {
        return $this->currentPlace;
    }

    public function setCurrentPlace(string $currentPlace, array $context = []): void
    {
        $this->currentPlace = $currentPlace;
    }
}

----------------------------------------

TITLE: Handling Cookies with BrowserKit in PHP
DESCRIPTION: Examples of retrieving, setting, and sending cookies using the BrowserKit CookieJar.

LANGUAGE: PHP
CODE:
use Acme\Client;

$client = new Client();
$crawler = $client->request('GET', '/');

$cookieJar = $client->getCookieJar();
$cookie = $cookieJar->get('name_of_the_cookie');

// Setting cookies
$cookie = new Cookie('flavor', 'chocolate', strtotime('+1 day'));
$cookieJar = new CookieJar();
$cookieJar->set($cookie);
$client = new Client([], null, $cookieJar);

// Sending cookies
$client->request('GET', '/', [], [], [
    'HTTP_COOKIE' => new Cookie('flavor', 'chocolate', strtotime('+1 day')),
    'HTTP_COOKIE' => 'flavor=chocolate; expires=Sat, 11 Feb 2023 12:18:13 GMT; Max-Age=86400; path=/'
]);

----------------------------------------

TITLE: Enabling Code Splitting in Webpack Encore Configuration
DESCRIPTION: This snippet shows how to enable code splitting in the Webpack Encore configuration file. It demonstrates adding multiple entry points and enabling the splitEntryChunks() function.

LANGUAGE: javascript
CODE:
// webpack.config.js
Encore
    // ...

    // multiple entry files, which probably import the same code
    .addEntry('app', './assets/app.js')
    .addEntry('homepage', './assets/homepage.js')
    .addEntry('blog', './assets/blog.js')
    .addEntry('store', './assets/store.js')

    .splitEntryChunks()

----------------------------------------

TITLE: Configuring Isbn Constraint with PHP
DESCRIPTION: PHP code for configuring the Isbn constraint on a Book entity's 'isbn' property using the loadValidatorMetadata method. It specifies ISBN-10 type and a custom error message.

LANGUAGE: php
CODE:
// src/Entity/Book.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Book
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('isbn', new Assert\Isbn(
            type: Assert\Isbn::ISBN_10,
            message: 'This value is not valid.',
        ));
    }
}

----------------------------------------

TITLE: Defining InvoiceSubjectInterface in PHP
DESCRIPTION: Interface definition for invoice subjects that defines required methods for invoice-related functionality

LANGUAGE: php
CODE:
// src/Model/InvoiceSubjectInterface.php
namespace App\Model;

/**
 * An interface that the invoice Subject object should implement.
 * In most circumstances, only a single object should implement
 * this interface as the ResolveTargetEntityListener can only
 * change the target to a single object.
 */
interface InvoiceSubjectInterface
{
    // List any additional methods that your InvoiceBundle
    // will need to access on the subject so that you can
    // be sure that you have access to those methods.

    public function getName(): string;
}

----------------------------------------

TITLE: Configuring Sphinx Toctree for Code of Conduct Documentation
DESCRIPTION: RST markup defining the documentation structure with a toctree directive that includes Code of Conduct related documents. Sets maximum depth to 2 levels and lists the included document references.

LANGUAGE: rst
CODE:
.. toctree::
    :maxdepth: 2

    code_of_conduct
    reporting_guidelines
    care_team
    concrete_example_document

----------------------------------------

TITLE: Configuring NoSuspiciousCharacters Constraint in YAML
DESCRIPTION: Shows how to configure the NoSuspiciousCharacters constraint for a property using YAML format.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\User:
    properties:
        username:
            - NoSuspiciousCharacters: ~

----------------------------------------

TITLE: Using DnsMock for DNS-sensitive Tests
DESCRIPTION: Example of how to use DnsMock to simulate DNS responses in tests.

LANGUAGE: PHP
CODE:
use App\Validator\DomainValidator;
use PHPUnit\Framework\TestCase;
use Symfony\Bridge\PhpUnit\DnsMock;

/**
 * @group dns-sensitive
 */
class DomainValidatorTest extends TestCase
{
    public function testEmails(): void
    {
        DnsMock::withMockedHosts([
            'example.com' => [['type' => 'A', 'ip' => '1.2.3.4']],
        ]);

        $validator = new DomainValidator(['checkDnsRecord' => true]);
        $isValid = $validator->validate('example.com');

        // ...
    }
}

----------------------------------------

TITLE: Twig Filter Usage Example
DESCRIPTION: Demonstrates the use of Twig filters, specifically the 'upper' filter to uppercase contents.

LANGUAGE: twig
CODE:
{{ title|upper }}

----------------------------------------

TITLE: Enabling TypeScript Loader in Webpack Encore Configuration
DESCRIPTION: Basic configuration to enable TypeScript processing in webpack.config.js, including entry point definition and TypeScript loader activation. Also shows optional forked type checking configuration.

LANGUAGE: diff
CODE:
      // webpack.config.js

      // ...
      Encore
          // ...
    +     .addEntry('main', './assets/main.ts')

    +     .enableTypeScriptLoader()

          // optionally enable forked type script for faster builds
          // https://www.npmjs.com/package/fork-ts-checker-webpack-plugin
          // requires that you have a tsconfig.json file that is setup correctly.
    +     //.enableForkedTypeScriptTypesChecking()
      ;

----------------------------------------

TITLE: Defining Address and Author Entities in PHP
DESCRIPTION: Example of defining Address and Author entity classes in PHP without validation constraints.

LANGUAGE: php
CODE:
// src/Entity/Address.php
namespace App\Entity;

class Address
{
    protected string $street;

    protected string $zipCode;
}

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

class Author
{
    protected string $firstName;

    protected string $lastName;

    protected Address $address;
}

----------------------------------------

TITLE: Configuring Twig Form Themes in XML
DESCRIPTION: Example of configuring form themes in Twig using XML configuration format.

LANGUAGE: xml
CODE:
<!-- config/packages/twig.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:twig="http://symfony.com/schema/dic/twig"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/twig https://symfony.com/schema/dic/twig/twig-1.0.xsd">

    <twig:config>
        <twig:form-theme>bootstrap_5_layout.html.twig</twig:form-theme>
        <twig:form-theme>form/my_theme.html.twig</twig:form-theme>
        <!-- ... -->
    </twig:config>
</container>

----------------------------------------

TITLE: Defining Cidr Constraint Using PHP Attributes
DESCRIPTION: Example of how to apply the Cidr constraint to a property using PHP attributes in a Symfony entity class.

LANGUAGE: php
CODE:
// src/Entity/NetworkSettings.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class NetworkSettings
{
    #[Assert\Cidr]
    protected string $cidrNotation;
}

----------------------------------------

TITLE: Configuring Custom Password Strength Estimator in XML
DESCRIPTION: Example of how to configure the PasswordStrengthValidator service to use a custom password strength estimator using XML.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="custom_password_strength_estimator" class="App\Validator\CustomPasswordStrengthEstimator"/>

        <service id="Symfony\Component\Validator\Constraints\PasswordStrengthValidator">
            <argument type="closure" id="custom_password_strength_estimator"/>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Ignoring Missing Dependencies in PHP
DESCRIPTION: Demonstrates how to ignore missing dependencies using PHP configuration in Symfony.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\Newsletter\NewsletterManager;

return function(ContainerConfigurator $container): void {
    $services = $container->services();

    $services->set(NewsletterManager::class)
        ->call('setLogger', [service('logger')->ignoreOnInvalid()])
    ;
};

----------------------------------------

TITLE: Implementing NewsletterManager Class in PHP
DESCRIPTION: Defines a NewsletterManager class that implements EmailFormatterAwareInterface with functionality to set enabled formatters.

LANGUAGE: php
CODE:
// src/Mail/NewsletterManager.php
namespace App\Mail;

class NewsletterManager implements EmailFormatterAwareInterface
{
    private array $enabledFormatters;

    public function setEnabledFormatters(array $enabledFormatters): void
    {
        $this->enabledFormatters = $enabledFormatters;
    }

    // ...
}

----------------------------------------

TITLE: JavaScript Module Export Example
DESCRIPTION: Example of creating and exporting a JavaScript module function.

LANGUAGE: javascript
CODE:
// assets/greet.js
export default function(name) {
    return `Yo yo ${name} - welcome to Encore!`;
};

----------------------------------------

TITLE: Importing CSS in JavaScript Entry Point
DESCRIPTION: Shows how to import CSS files into the main JavaScript entry point using Encore.

LANGUAGE: javascript
CODE:
// assets/app.js
// ...

import './styles/app.css';

----------------------------------------

TITLE: Registering Custom Twig Loader
DESCRIPTION: Configuration for registering a custom Twig loader service.

LANGUAGE: yaml
CODE:
services:
    App\Twig\CustomLoader:
        tags:
            - { name: twig.loader, priority: 0 }

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Twig\CustomLoader">
            <tag name="twig.loader" priority="0"/>
        </service>
    </services>
</container>

LANGUAGE: php
CODE:
use App\Twig\CustomLoader;

$container
    ->register(CustomLoader::class)
    ->addTag('twig.loader', ['priority' => 0])
;

----------------------------------------

TITLE: Adding Basic Handlebars Loader in Webpack Encore
DESCRIPTION: Demonstrates how to add a basic handlebars-loader configuration to Webpack Encore using the addLoader method. This enables processing of .handlebars files in the build process.

LANGUAGE: javascript
CODE:
Encore
    // ...
    .addLoader({ test: /\.handlebars$/, loader: 'handlebars-loader' })
;

----------------------------------------

TITLE: Implementing Cascade Validation Using PHP Attributes
DESCRIPTION: Example showing how to use the Cascade constraint with PHP attributes to validate a BookCollection class and its nested objects BookMetadata and Author.

LANGUAGE: php
CODE:
// src/Model/BookCollection.php
namespace App\Model;

use App\Model\Author;
use App\Model\BookMetadata;
use Symfony\Component\Validator\Constraints as Assert;

#[Assert\Cascade]
class BookCollection
{
    #[Assert\NotBlank]
    protected string $name = '';

    public BookMetadata $metadata;

    public Author $author;

    // ...
}

----------------------------------------

TITLE: Configuring Custom Password Strength Estimator in YAML
DESCRIPTION: Example of how to configure the PasswordStrengthValidator service to use a custom password strength estimator using YAML.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    custom_password_strength_estimator:
        class: App\Validator\CustomPasswordStrengthEstimator

    Symfony\Component\Validator\Constraints\PasswordStrengthValidator:
        arguments: [!closure '@custom_password_strength_estimator']

----------------------------------------

TITLE: RST Tip Block for First-Time Speakers
DESCRIPTION: A reStructuredText tip block providing advice for first-time speakers to start with local user groups before moving to larger conferences.

LANGUAGE: rst
CODE:
.. tip::\n\n    A good first step might be to give a talk at a local user group to a\n    smaller crowd that one knows more intimately. A next step could be to\n    give a talk at a conference in your first language.

----------------------------------------

TITLE: Starting Dump Server
DESCRIPTION: Commands to start the dump server with different output formats.

LANGUAGE: terminal
CODE:
# displays the dumped data in the console:
$ php bin/console server:dump
  [OK] Server listening on tcp://0.0.0.0:9912

# stores the dumped data in a file using the HTML format:
$ php bin/console server:dump --format=html > dump.html

----------------------------------------

TITLE: Configuring Synthetic Service in XML
DESCRIPTION: XML configuration for declaring a synthetic service in Symfony's service container.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <!-- synthetic services don't specify a class -->
        <service id="app.synthetic_service" synthetic="true"/>
    </services>
</container>

----------------------------------------

TITLE: Applying Luhn Constraint in PHP for Symfony Validation
DESCRIPTION: This PHP code demonstrates how to programmatically apply the Luhn constraint to a property in a Symfony entity class using the loadValidatorMetadata method.

LANGUAGE: php
CODE:
// src/Entity/Transaction.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Transaction
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('cardNumber', new Assert\Luhn(
            message: 'Please check your credit card number',
        ));
    }
}

----------------------------------------

TITLE: Configuring HTTP Method-Based Firewall Restriction in Symfony
DESCRIPTION: Illustrates how to restrict a firewall to specific HTTP methods using the methods configuration option. The example shows limiting to GET and POST methods.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml

# ...
security:
    firewalls:
        secured_area:
            methods: [GET, POST]
            # ...

LANGUAGE: xml
CODE:
<!-- config/packages/security.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<srv:container xmlns="http://symfony.com/schema/dic/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:srv="http://symfony.com/schema/dic/services"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/security
        https://symfony.com/schema/dic/security/security-1.0.xsd">

    <config>
        <!-- ... -->
        <firewall name="secured_area" methods="GET,POST">
            <!-- ... -->
        </firewall>
    </config>
</srv:container>

LANGUAGE: php
CODE:
// config/packages/security.php
use Symfony\Config\SecurityConfig;

return static function (SecurityConfig $security): void {
    // ....

    $security->firewall('secured_area')
        ->methods(['GET', 'POST'])
        // ...
    ;
};

----------------------------------------

TITLE: Running webpack-dev-server with Symfony Encore
DESCRIPTION: Command to start the webpack-dev-server for development in a Symfony project using Encore.

LANGUAGE: terminal
CODE:
$ npm run dev-server

----------------------------------------

TITLE: Validating Country Codes Using YAML Configuration
DESCRIPTION: Shows how to configure the Country validation constraint using YAML configuration format. Applies the constraint to the country property of the User entity.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\User:
    properties:
        country:
            - Country: ~

----------------------------------------

TITLE: Creating and Setting PSR-6 Cache Items
DESCRIPTION: Shows how to create cache items using PSR-6 interface, including setting simple values and arrays, and saving them to the cache pool.

LANGUAGE: php
CODE:
// $cache pool object was created before
$productsCount = $cache->getItem('stats.products_count');

// storing a simple integer
$productsCount->set(4711);
$cache->save($productsCount);

// storing an array
$productsCount->set([
    'category1' => 4711,
    'category2' => 2387,
]);
$cache->save($productsCount);

----------------------------------------

TITLE: Defining DivisibleBy Constraint in XML
DESCRIPTION: Example showing how to define the DivisibleBy constraint using XML format in the validation configuration file.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Item">
        <property name="weight">
            <constraint name="DivisibleBy">
                <value>0.25</value>
            </constraint>
        </property>
        <property name="quantity">
            <constraint name="DivisibleBy">
                <option name="value">5</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Twig Template Asset Integration
DESCRIPTION: Shows how to include compiled assets in Twig templates using Encore helpers.

LANGUAGE: html+twig
CODE:
{# templates/base.html.twig #}
<!DOCTYPE html>
<html>
    <head>
        <!-- ... -->

        {% block stylesheets %}
            {{ encore_entry_link_tags('app') }}
        {% endblock %}

        {% block javascripts %}
            {{ encore_entry_script_tags('app') }}
        {% endblock %}
    </head>
</html>

----------------------------------------

TITLE: Creating Memcached Connection with Single DSN in PHP
DESCRIPTION: Uses the createConnection method to establish a connection to a single Memcached server using a DSN string.

LANGUAGE: PHP
CODE:
use Symfony\Component\Cache\Adapter\MemcachedAdapter;

// pass a single DSN string to register a single server with the client
$client = MemcachedAdapter::createConnection(
    'memcached://localhost'
    // the DSN can include config options (pass them as a query string):
    // 'memcached://localhost:11222?retry_timeout=10'
    // 'memcached://localhost:11222?socket_recv_size=1&socket_send_size=2'
);

----------------------------------------

TITLE: Configuring All Constraint in YAML
DESCRIPTION: YAML configuration for the All constraint, applying NotBlank and Length constraints to the favoriteColors property of the User entity.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\User:
    properties:
        favoriteColors:
            - All:
                - NotBlank:  ~
                - Length:
                    min: 5

----------------------------------------

TITLE: Defining Company Entity with Location Fields
DESCRIPTION: PHP class definition for Company entity containing business and location properties.

LANGUAGE: php
CODE:
namespace App\Entity;

class Company
{
    private string $name;
    private string $website;

    private string $address;
    private string $zipcode;
    private string $city;
    private string $country;
}

----------------------------------------

TITLE: PHP Code JSON Validation Configuration
DESCRIPTION: Shows how to configure JSON validation using PHP code in a Book entity class. Uses the loadValidatorMetadata method to add the JSON constraint programmatically.

LANGUAGE: php
CODE:
// src/Entity/Book.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Book
{
    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('chapters', new Assert\Json(
            message: 'You\'ve entered an invalid Json.',
        ));
    }
}

----------------------------------------

TITLE: Defining UUID Constraint in XML
DESCRIPTION: Illustrates the XML configuration for applying the UUID constraint to a property in Symfony's validation schema.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\File">
        <property name="identifier">
            <constraint name="Uuid"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Configuring Auto-Aliased Services
DESCRIPTION: Configuration for defining auto-aliased services based on container parameters.

LANGUAGE: yaml
CODE:
services:
    app.mysql_lock:
        class: App\Lock\MysqlLock
    app.postgresql_lock:
        class: App\Lock\PostgresqlLock
    app.sqlite_lock:
        class: App\Lock\SqliteLock
    app.lock:
        tags:
            - { name: auto_alias, format: "app.%database_type%_lock" }

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="app.mysql_lock"
            class="App\Lock\MysqlLock"/>
        <service id="app.postgresql_lock"
            class="App\Lock\PostgresqlLock"/>
        <service id="app.sqlite_lock"
            class="App\Lock\SqliteLock"/>

        <service id="app.lock">
            <tag name="auto_alias" format="app.%database_type%_lock"/>
        </service>
    </services>
</container>

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\Lock\MysqlLock;
use App\Lock\PostgresqlLock;
use App\Lock\SqliteLock;

return function(ContainerConfigurator $container): void {
    $services = $container->services();

    $services->set('app.mysql_lock', MysqlLock::class);
    $services->set('app.postgresql_lock', PostgresqlLock::class);
    $services->set('app.sqlite_lock', SqliteLock::class);

    $services->set('app.lock')
        ->tag('auto_alias', ['format' => 'app.%database_type%_lock'])
    ;
};

----------------------------------------

TITLE: Configuring Cidr Constraint in YAML
DESCRIPTION: Example of how to define the Cidr constraint for a property using YAML configuration in Symfony.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\NetworkSettings:
    properties:
        cidrNotation:
            - Cidr: ~

----------------------------------------

TITLE: Setting up PositiveOrZero Constraint Using PHP
DESCRIPTION: Example showing how to configure the PositiveOrZero constraint using PHP code with the loadValidatorMetadata method.

LANGUAGE: php
CODE:
// src/Entity/Person.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Person
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('siblings', new Assert\PositiveOrZero());
    }
}

----------------------------------------

TITLE: Configuring User Checker in Security YAML
DESCRIPTION: YAML configuration for enabling custom user checker in Symfony security firewall settings.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml

# ...
security:
    firewalls:
        main:
            pattern: ^/
            user_checker: App\Security\UserChecker
            # ...

----------------------------------------

TITLE: Bundle Extension Prepending in AbstractBundle Class
DESCRIPTION: Shows how to prepend extension configuration directly in a Bundle class by extending AbstractBundle and implementing the prependExtension method.

LANGUAGE: php
CODE:
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symfony\Component\HttpKernel\Bundle\AbstractBundle;

class FooBundle extends AbstractBundle
{
    public function prependExtension(ContainerConfigurator $containerConfigurator, ContainerBuilder $containerBuilder): void
    {
        $containerBuilder->prependExtensionConfig('framework', [
            'cache' => ['prefix_seed' => 'foo/bar'],
        ]);

        $containerConfigurator->import('../config/packages/cache.php');
    }
}

----------------------------------------

TITLE: API Platform Entity Configuration
DESCRIPTION: Example entity class configured for API Platform showing ORM mappings and API resource configuration.

LANGUAGE: php
CODE:
namespace App\Entity;

use ApiPlatform\Core\Annotation\ApiResource;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity]
#[ApiResource]
class Product
{
    #[ORM\Id]
    #[ORM\GeneratedValue(strategy: 'AUTO')]
    #[ORM\Column(type: 'integer')]
    private int $id;

    #[ORM\Column(type: 'string')]
    private string $name;

    #[ORM\Column(type: 'integer')]
    private int $price;
}

----------------------------------------

TITLE: Using Custom Streams with Symfony Finder
DESCRIPTION: Demonstrates how to use custom streams, such as Amazon S3, with the Symfony Finder component.

LANGUAGE: php
CODE:
use Symfony\Component\Finder\Finder;

// register a 's3://' wrapper with the official AWS SDK
$s3Client = new Aws\S3\S3Client([/* config options */]);
$s3Client->registerStreamWrapper();

$finder = new Finder();
$finder->name('photos*')->size('< 100K')->date('since 1 hour ago');
foreach ($finder->in('s3://bucket-name') as $file) {
    // ... do something with the file
}

----------------------------------------

TITLE: Implementing DivisibleBy Constraint with PHP Attributes
DESCRIPTION: Example showing how to apply the DivisibleBy constraint using PHP attributes to validate property values in an Item entity class.

LANGUAGE: php
CODE:
// src/Entity/Item.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Item
{
    #[Assert\DivisibleBy(0.25)]
    protected float $weight;

    #[Assert\DivisibleBy(
        value: 5,
    )]
    protected int $quantity;
}

----------------------------------------

TITLE: Implementing DateTime Validation with PHP Attributes
DESCRIPTION: Example showing how to apply DateTime validation using PHP attributes in a Symfony entity class. The createdAt property is validated to ensure it follows the Y-m-d H:i:s format.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    /**
     * @var string A "Y-m-d H:i:s" formatted value
     */
    #[Assert\DateTime]
    protected string $createdAt;
}

----------------------------------------

TITLE: Applying Cidr Constraint Using PHP
DESCRIPTION: Example of how to programmatically add the Cidr constraint to a property in a Symfony entity class using PHP.

LANGUAGE: php
CODE:
// src/Entity/NetworkSettings.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class NetworkSettings
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('cidrNotation', new Assert\Cidr());
    }
}

----------------------------------------

TITLE: Enabling Vue Loader in Webpack Config
DESCRIPTION: Shows how to enable Vue.js support in webpack.config.js by adding the enableVueLoader() configuration.

LANGUAGE: diff
CODE:
  // webpack.config.js
  // ...

  Encore
      // ...
      .addEntry('main', './assets/main.js')

+     .enableVueLoader()
  ;

----------------------------------------

TITLE: Viewing Monolog Configuration in Symfony CLI
DESCRIPTION: Terminal commands to display both default and current Monolog configuration values in a Symfony application. The first command shows default values while the second shows actual configured values.

LANGUAGE: terminal
CODE:
# displays the default config values defined by Symfony
$ php bin/console config:dump-reference monolog

# displays the actual config values used by your application
$ php bin/console debug:config monolog

----------------------------------------

TITLE: Dumping PHP Objects as YAML Maps
DESCRIPTION: Use the DUMP_OBJECT_AS_MAP flag to dump PHP objects as YAML maps.

LANGUAGE: PHP
CODE:
$object = new \stdClass();
$object->foo = 'bar';

$dumped = Yaml::dump(['data' => $object], 2, 4, Yaml::DUMP_OBJECT_AS_MAP);
// $dumped = "data:\n    foo: bar"

----------------------------------------

TITLE: Implementing Asset Preloading in Twig Template
DESCRIPTION: Example of how to use the preload() Twig function to implement asset preloading for a CSS file in an HTML template.

LANGUAGE: html+twig
CODE:
<head>
    <!-- ... -->
    <link rel="preload" href="{{ preload('/app.css', {as: 'style'}) }}" as="style">
    <link rel="stylesheet" href="/app.css">
</head>

----------------------------------------

TITLE: Configuring Type Constraints with PHP Attributes
DESCRIPTION: Demonstrates how to use PHP attributes to apply Type constraints to properties in a Symfony entity class. It includes examples for validating email addresses, strings, integers, and alphanumeric values.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Mime\Address;
use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\Type(Address::class)]
    protected $emailAddress;

    #[Assert\Type('string')]
    protected $firstName;

    #[Assert\Type(
        type: 'integer',
        message: 'The value {{ value }} is not a valid {{ type }}.',
    )]
    protected $age;

    #[Assert\Type(type: ['alpha', 'digit'])]
    protected $accessCode;
}

----------------------------------------

TITLE: Validating Country Codes Using XML Configuration
DESCRIPTION: Demonstrates XML configuration for the Country validation constraint. Defines validation rules for the country property in the User entity using XML format.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\User">
        <property name="country">
            <constraint name="Country"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Exception Event Handler - PHP
DESCRIPTION: Example of handling kernel.exception event to handle errors and modify exception responses

LANGUAGE: PHP
CODE:
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Event\ExceptionEvent;

public function onKernelException(ExceptionEvent $event): void
{
    $exception = $event->getThrowable();
    $response = new Response();
    // setup the Response object based on the caught exception
    $event->setResponse($response);

    // you can alternatively set a new Exception
    // $exception = new \Exception('Some special exception');
    // $event->setThrowable($exception);
}

----------------------------------------

TITLE: Configuring Symfony Router in XML
DESCRIPTION: Illustrates the configuration of Symfony router using XML, including environment-specific settings.

LANGUAGE: XML
CODE:
<!-- config/packages/framework.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:framework="http://symfony.com/schema/dic/symfony"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/symfony
        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">

    <framework:config>
        <framework:router utf8="true"/>
    </framework:config>

    <when env="prod">
        <framework:config>
            <framework:router strict-requirements="null"/>
        </framework:config>
    </when>
</container>

----------------------------------------

TITLE: Implementing Language Validation with XML
DESCRIPTION: Example showing how to configure the Language constraint using XML configuration format.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\User">
        <property name="preferredLanguage">
            <constraint name="Language"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Configuring Webhook Routing in YAML
DESCRIPTION: YAML configuration for setting up webhook routing in Symfony, using Mailgun as an example.

LANGUAGE: yaml
CODE:
# config/packages/framework.yaml
framework:
    webhook:
        routing:
            mailer_mailgun:
                service: 'mailer.webhook.request_parser.mailgun'
                secret: '%env(MAILER_MAILGUN_SECRET)%'

----------------------------------------

TITLE: Configuring Pull Request State Machine in YAML
DESCRIPTION: YAML configuration for a pull request state machine workflow defining states like start, coding, test, review, merged, and closed. Includes transition definitions and marking store configuration.

LANGUAGE: yaml
CODE:
framework:
    workflows:
        pull_request:
            type: 'state_machine'
            marking_store:
                 type: 'method'
                 property: 'currentPlace'
            supports:
                - App\Entity\PullRequest
            initial_marking: start
            places:
                - start
                - coding
                - test
                - review
                - merged
                - closed
            transitions:
                submit:
                    from: start
                    to: test
                update:
                    from: [coding, test, review]
                    to: test
                wait_for_review:
                    from: test
                    to: review
                request_change:
                    from: review
                    to: coding
                accept:
                    from: review
                    to: merged
                reject:
                    from: review
                    to: closed
                reopen:
                    from: closed
                    to: review

----------------------------------------

TITLE: Configuring Validation Constraints with Error Levels in YAML
DESCRIPTION: This YAML configuration assigns error levels to validation constraints for a User entity's properties, using the 'payload' option to set severity levels.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\User:
    properties:
        username:
            - NotBlank:
                payload:
                    severity: error
        password:
            - NotBlank:
                payload:
                    severity: error
        bankAccountNumber:
            - Iban:
                payload:
                    severity: warning

----------------------------------------

TITLE: Configuring WordCount Constraint with XML
DESCRIPTION: Example of using the WordCount constraint in an XML configuration file to validate that a 'content' property contains between 100 and 200 words.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\BlogPostDTO">
        <property name="content">
            <constraint name="WordCount">
                <option name="min">100</option>
                <option name="max">200</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Applying CardScheme Constraint using PHP Code
DESCRIPTION: This snippet shows how to apply the CardScheme constraint programmatically in PHP. It adds the constraint to the cardNumber property of the Transaction class to validate VISA card numbers.

LANGUAGE: php
CODE:
// src/Entity/Transaction.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Transaction
{
    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('cardNumber', new Assert\CardScheme(
            schemes: [
                Assert\CardScheme::VISA,
            ],
            message: 'Your credit card number is invalid.',
        ));
    }
}

----------------------------------------

TITLE: Configuring SSI in Symfony PHP
DESCRIPTION: PHP configuration to enable SSI support in Symfony framework configuration.

LANGUAGE: php
CODE:
// config/packages/framework.php
use Symfony\Config\FrameworkConfig;

return static function (FrameworkConfig $framework): void {
    $framework->ssi()
        ->enabled(true)
    ;
};

----------------------------------------

TITLE: Relative Date Range Validation in Orders
DESCRIPTION: Example of using relative date ranges to validate delivery dates within the next 5 hours using the Range constraint.

LANGUAGE: php
CODE:
// src/Entity/Order.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Order
{
    #[Assert\Range(
        min: 'now',
        max: '+5 hours',
    )]
    protected \DateTimeInterface $deliveryDate;
}

----------------------------------------

TITLE: Accessing Object Properties in PHP Expression Language
DESCRIPTION: Demonstrates how to access public properties of objects using dot notation in expressions.

LANGUAGE: PHP
CODE:
class Apple {
    public string $variety;
}

$apple = new Apple();
$apple->variety = 'Honeycrisp';

var_dump($expressionLanguage->evaluate(
    'fruit.variety',
    [
        'fruit' => $apple,
    ]
));

----------------------------------------

TITLE: Enabling International Timezone Support
DESCRIPTION: Configuration example showing how to enable ICU Project timezone support through the Intl component, which allows for timezone translations.

LANGUAGE: PHP
CODE:
"intl" => true  // Enable ICU Project timezones
"choice_translation_locale" => "fr"  // Optional: set translation locale

----------------------------------------

TITLE: Bundle Path Configuration PHP Example
DESCRIPTION: Example of how to configure the bundle path when extending the base Bundle class.

LANGUAGE: php
CODE:
use Symfony\Component\HttpKernel\Bundle\Bundle;

class AcmeBlogBundle extends Bundle
{
    public function getPath(): string
    {
        return \dirname(__DIR__);
    }
}

----------------------------------------

TITLE: Configuring Basic DateIntervalType Field in Symfony
DESCRIPTION: Example showing basic configuration of a DateIntervalType field with customized widget display and interval options.

LANGUAGE: php
CODE:
$builder->add('remindEvery', DateIntervalType::class, [
    'widget'      => 'integer', // render a text field for each part
    // 'input'    => 'string',  // if you want the field to return a ISO 8601 string back to you

    // customize which text boxes are shown
    'with_years'  => false,
    'with_months' => false,
    'with_days'   => true,
    'with_hours'  => true,
]);

----------------------------------------

TITLE: Implementing IsNull Constraint with PHP in Symfony Validation
DESCRIPTION: Demonstrates how to apply the IsNull constraint to a property using PHP code in a Symfony entity class's loadValidatorMetadata method.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('firstName', Assert\IsNull());
    }
}

----------------------------------------

TITLE: Defining Table of Contents for Symfony Bundles Documentation in reStructuredText
DESCRIPTION: This snippet defines a table of contents using reStructuredText syntax for Symfony bundle documentation. It specifies a maximum depth of 2 and lists various bundle-related topics.

LANGUAGE: reStructuredText
CODE:
.. toctree::
    :maxdepth: 2

    override
    best_practices
    configuration
    extension
    prepend_extension

----------------------------------------

TITLE: Setting Up DateTime Validation in XML
DESCRIPTION: XML configuration example for DateTime validation constraint. Shows how to validate the createdAt property using XML configuration format.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="createdAt">
            <constraint name="DateTime"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Configuring Sequential Validation in YAML
DESCRIPTION: YAML configuration example for implementing sequential validation rules on a Place class's address property.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Localization\Place:
    properties:
        address:
            - Sequentially:
                - NotNull: ~
                - Type: string
                - Length: { min: 10 }
                - Regex: !php/const App\Localization\Place::ADDRESS_REGEX
                - App\Validator\Constraints\Geolocalizable: ~

----------------------------------------

TITLE: Enabling PostCSS Loader in Webpack Config
DESCRIPTION: Shows how to enable PostCSS loader in webpack.config.js file by adding the enablePostCssLoader() method to Encore configuration.

LANGUAGE: diff
CODE:
      // webpack.config.js

      Encore
          // ...
    +     .enablePostCssLoader()
      ;

----------------------------------------

TITLE: Customizing Split Chunks Configuration in Webpack Encore
DESCRIPTION: This snippet shows how to use the configureSplitChunks() function to customize the behavior of the SplitChunksPlugin in Webpack Encore. It demonstrates changing the minSize option as an example.

LANGUAGE: javascript
CODE:
// webpack.config.js
Encore
    // ...

    .splitEntryChunks()
    .configureSplitChunks(function(splitChunks) {
        // change the configuration
        splitChunks.minSize = 0;
    })

----------------------------------------

TITLE: Configuring Asset Package Service
DESCRIPTION: Configuration for adding an asset package service using the assets.package tag.

LANGUAGE: yaml
CODE:
services:
    App\Assets\AvatarPackage:
        tags:
            - { name: assets.package, package: avatars }

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Assets\AvatarPackage">
            <tag name="assets.package" package="avatars"/>
        </service>
    </services>
</container>

LANGUAGE: php
CODE:
use App\Assets\AvatarPackage;

$container
    ->register(AvatarPackage::class)
    ->addTag('assets.package', ['package' => 'avatars'])
;

----------------------------------------

TITLE: Defining All Constraint with PHP Attributes
DESCRIPTION: Example of using the All constraint with PHP attributes to validate an array property. It applies NotBlank and Length constraints to each element of the favoriteColors array.

LANGUAGE: php
CODE:
// src/Entity/User.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class User
{
    #[Assert\All([
        new Assert\NotBlank,
        new Assert\Length(min: 5),
    ])]
    protected array $favoriteColors = [];
}

----------------------------------------

TITLE: Defining Collection Constraint in XML
DESCRIPTION: XML configuration for the Collection constraint, specifying validation rules for email and bio fields in a profile data property.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="profileData">
            <constraint name="Collection">
                <option name="fields">
                    <value key="personal_email">
                        <constraint name="Email"/>
                    </value>
                    <value key="short_bio">
                        <constraint name="NotBlank"/>
                        <constraint name="Length">
                            <option name="max">100</option>
                            <option name="maxMessage">Your short bio is too long!</option>
                        </constraint>
                    </value>
                </option>
                <option name="allowMissingFields">true</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Defining GreaterThan Constraints with PHP Attributes
DESCRIPTION: Demonstrates how to use PHP attributes to apply GreaterThan constraints on properties of a Person class, ensuring the number of siblings is greater than 5 and age is greater than 18.

LANGUAGE: php
CODE:
// src/Entity/Person.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Person
{
    #[Assert\GreaterThan(5)]
    protected int $siblings;

    #[Assert\GreaterThan(
        value: 18,
    )]
    protected int $age;
}

----------------------------------------

TITLE: Applying Positive Constraint in PHP with Attributes
DESCRIPTION: Example of using the Positive constraint on an Employee class property using PHP attributes.

LANGUAGE: php
CODE:
// src/Entity/Employee.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Employee
{
    #[Assert\Positive]
    protected int $income;
}

----------------------------------------

TITLE: Creating Custom Legacy Context Builder in PHP/Symfony
DESCRIPTION: Context builder class that provides a fluent interface for configuring legacy date handling. Implements ContextBuilderInterface and uses ContextBuilderTrait for context manipulation.

LANGUAGE: php
CODE:
namespace App\Serializer;

use Symfony\Component\Serializer\Context\ContextBuilderInterface;
use Symfony\Component\Serializer\Context\ContextBuilderTrait;

final class LegacyContextBuilder implements ContextBuilderInterface
{
    use ContextBuilderTrait;

    public function withLegacyDates(bool $legacy): static
    {
        return $this->with('zero_datetime_to_null', $legacy);
    }
}

----------------------------------------

TITLE: Installing Symfony PropertyAccess Component
DESCRIPTION: Shows how to install the Symfony PropertyAccess component using Composer.

LANGUAGE: terminal
CODE:
$ composer require symfony/property-access

----------------------------------------

TITLE: Serving Symfony Documentation Locally with PHP
DESCRIPTION: This snippet shows how to serve the locally built Symfony documentation using PHP's built-in web server. It assumes the documentation has already been built using the previous steps.

LANGUAGE: bash
CODE:
$ php -S localhost:8000 -t output/

----------------------------------------

TITLE: Implementing BIC Validation with PHP Metadata
DESCRIPTION: Example of implementing BIC validation using PHP metadata loading in a Transaction entity class.

LANGUAGE: php
CODE:
// src/Entity/Transaction.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Transaction
{
    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('businessIdentifierCode', new Assert\Bic());
    }
}

----------------------------------------

TITLE: Configuring Named Locks in YAML
DESCRIPTION: Shows how to configure named locks with different stores in Symfony's YAML configuration.

LANGUAGE: yaml
CODE:
framework:
    lock:
        invoice: ['semaphore', 'redis://r2.docker']
        report: 'semaphore'

----------------------------------------

TITLE: Applying NoSuspiciousCharacters Constraint in PHP
DESCRIPTION: Demonstrates how to apply the NoSuspiciousCharacters constraint to a property using PHP attributes.

LANGUAGE: php
CODE:
// src/Entity/User.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class User
{
    #[Assert\NoSuspiciousCharacters]
    private string $username;
}

----------------------------------------

TITLE: Defining Validation Constraints in PHP
DESCRIPTION: PHP method for defining validation constraints using ClassMetadata.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

// ...
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
    public string $name;

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('name', new NotBlank(
            message: 'author.name.not_blank',
        ));
    }
}

----------------------------------------

TITLE: Setting umask for World-Writable Permissions in Symfony PHP Files
DESCRIPTION: This PHP code snippet sets the umask to allow world-writable permissions (0777) for Symfony's cache and log directories. It should be used when the web server user and command line user are in different groups, and placed at the beginning of bin/console and public/index.php files.

LANGUAGE: php
CODE:
umask(0000); // This will let the permissions be 0777

----------------------------------------

TITLE: Validating Emails using YAML in Symfony
DESCRIPTION: Shows how to configure email validation using YAML configuration in Symfony. Defines validation rules for an Author entity's email property.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        email:
            - Email:
                message: The email "{{ value }}" is not a valid email.

----------------------------------------

TITLE: Accessing DBAL Connections in Symfony Controller
DESCRIPTION: PHP code demonstrating how to access different DBAL connections in a Symfony controller.

LANGUAGE: php
CODE:
// src/Controller/SomeController.php
use Doctrine\Persistence\ManagerRegistry;

class SomeController
{
    public function someMethod(ManagerRegistry $doctrine): void
    {
        $connection = $doctrine->getConnection('customer');
        $result = $connection->fetchAllAssociative('SELECT name FROM customer');

        // ...
    }
}

----------------------------------------

TITLE: Implementing Sequential Validation using XML
DESCRIPTION: XML configuration for setting up sequential validation rules on a Place class's address property.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Localization\Place">
        <property name="address">
            <constraint name="Sequentially">
                    <constraint name="NotNull"/>
                    <constraint name="Type">string</constraint>
                    <constraint name="Length">
                        <option name="min">10</option>
                    </constraint>
                    <constraint name="Regex">
                        <option name="pattern">/address-regex/</option>
                    </constraint>
                    <constraint name="App\Validator\Constraints\Geolocalizable"/>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Implementing YAML Validation with Parser Flags
DESCRIPTION: Example showing how to configure the YAML constraint with additional parser flags for enabling optional YAML parsing features.

LANGUAGE: php
CODE:
// src/Entity/Report.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Yaml\Yaml;

class Report
{
    #[Assert\Yaml(
        message: "Your configuration doesn't have valid YAML syntax.",
        flags: Yaml::PARSE_CONSTANT | Yaml::PARSE_CUSTOM_TAGS | Yaml::PARSE_DATETIME,
    )]
    private string $customConfiguration;
}

----------------------------------------

TITLE: Installing EventDispatcher Component via Composer
DESCRIPTION: Command to install the Symfony EventDispatcher component using Composer package manager.

LANGUAGE: terminal
CODE:
$ composer require symfony/event-dispatcher

----------------------------------------

TITLE: Cloning and Building Symfony Documentation Locally
DESCRIPTION: This snippet demonstrates how to clone the Symfony documentation repository, install dependencies, and build the documentation locally. It requires Git and Composer to be installed.

LANGUAGE: bash
CODE:
$ git clone git@github.com:symfony/symfony-docs.git

$ cd symfony-docs/
$ cd _build/

$ composer install

$ php build.php

----------------------------------------

TITLE: Installing Encore in non-Symfony Applications
DESCRIPTION: npm command to install Symfony Encore in a non-Symfony project.

LANGUAGE: shell
CODE:
$ npm install @symfony/webpack-encore --save-dev

----------------------------------------

TITLE: Using Callback for Choice Constraint Options
DESCRIPTION: Shows how to use a callback function to provide options for the Choice constraint, allowing for dynamic choice lists.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\Choice(callback: 'getGenres')]
    protected string $genre;

    public static function getGenres(): array
    {
        return ['fiction', 'non-fiction'];
    }
}

----------------------------------------

TITLE: Configuring API Platform Bundle in YAML
DESCRIPTION: Example of configuring the API Platform bundle using YAML format.

LANGUAGE: yaml
CODE:
# config/packages/api_platform.yaml
api_platform:
    mapping:
        paths: ['%kernel.project_dir%/src/Entity']

----------------------------------------

TITLE: Defining Cascade Validation in XML
DESCRIPTION: Example showing how to set up the Cascade constraint using XML configuration for a BookCollection entity.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\BookCollection">
        <constraint name="Cascade"/>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Configuring AutoProvideJQuery in Webpack
DESCRIPTION: Shows how to configure Webpack Encore to automatically provide jQuery as a global variable using autoProvidejQuery().

LANGUAGE: javascript
CODE:
// webpack.config.js
Encore
    // ...
    .autoProvidejQuery()
;

----------------------------------------

TITLE: Applying Blank Constraint with PHP Attributes
DESCRIPTION: This example shows how to apply the Blank constraint to a property using PHP attributes in a Symfony entity class.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\Blank]
    protected string $firstName;
}

----------------------------------------

TITLE: Configuring IBAN Validation in YAML
DESCRIPTION: YAML configuration for IBAN validation on a Transaction entity's bankAccountNumber property.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Transaction:
    properties:
        bankAccountNumber:
            - Iban:
                message: This is not a valid International Bank Account Number (IBAN).

----------------------------------------

TITLE: Implementing YAML Validation with PHP Attributes
DESCRIPTION: Example showing how to apply the YAML constraint using PHP attributes in a Report entity class. Validates that customConfiguration property contains valid YAML syntax.

LANGUAGE: php
CODE:
// src/Entity/Report.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Report
{
    #[Assert\Yaml(
        message: "Your configuration doesn't have valid YAML syntax."
    )]
    private string $customConfiguration;
}

----------------------------------------

TITLE: Implementing AtLeastOneOf Constraint Using PHP Attributes
DESCRIPTION: Example showing how to use AtLeastOneOf constraint with PHP attributes to validate password and grades properties in a Student entity class. Demonstrates validation for password containing '#' or length >= 10, and grades having count >= 3 or all elements >= 5.

LANGUAGE: php
CODE:
// src/Entity/Student.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Student
{
    #[Assert\AtLeastOneOf([
        new Assert\Regex('/#/'),
        new Assert\Length(min: 10),
    ])]
    protected string $plainPassword;

    #[Assert\AtLeastOneOf([
        new Assert\Count(min: 3),
        new Assert\All(
            new Assert\GreaterThanOrEqual(5)
        ),
    ])]
    protected array $grades;
}

----------------------------------------

TITLE: Applying CardScheme Constraint using PHP Attributes
DESCRIPTION: This snippet demonstrates how to apply the CardScheme constraint to a property in a PHP class using attributes. It validates that the cardNumber property contains a valid VISA credit card number.

LANGUAGE: php
CODE:
// src/Entity/Transaction.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Transaction
{
    #[Assert\CardScheme(
        schemes: [Assert\CardScheme::VISA],
        message: 'Your credit card number is invalid.',
    )]
    protected string $cardNumber;
}

----------------------------------------

TITLE: Validating IP Address using XML Configuration
DESCRIPTION: Demonstrates IP address validation configuration using XML format in Symfony's validation system.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="ipAddress">
            <constraint name="Ip"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Creating Twig Template
DESCRIPTION: Basic Twig template that displays a lucky number passed from the controller.

LANGUAGE: twig
CODE:
{# templates/lucky/number.html.twig #}
<h1>Your lucky number is {{ number }}</h1>

----------------------------------------

TITLE: Creating Lazy Ghost Objects in PHP
DESCRIPTION: This snippet shows how to implement lazy-loaded objects using the LazyGhostTrait, which allows for deferred property initialization.

LANGUAGE: PHP
CODE:
namespace App\Hash;

use Symfony\Component\VarExporter\LazyGhostTrait;

class HashProcessor
{
    use LazyGhostTrait;

    public readonly string $hash;

    public function __construct()
    {
        self::createLazyGhost(initializer: $this->populateHash(...), instance: $this);
    }

    private function populateHash(array $data): void
    {
        // Compute $this->hash value with the passed data
    }
}

----------------------------------------

TITLE: Referencing Secrets in Symfony XML Configuration
DESCRIPTION: Example of referencing a secret (DATABASE_PASSWORD) in an XML configuration file for Doctrine DBAL.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:doctrine="http://symfony.com/schema/dic/doctrine"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/doctrine
        https://symfony.com/schema/dic/doctrine/doctrine-1.0.xsd">

    <doctrine:config>
        <doctrine:dbal
            password="%env(DATABASE_PASSWORD)%"
        />
    </doctrine:config>

</container>

----------------------------------------

TITLE: Configuring NotEqualTo Constraint in YAML
DESCRIPTION: This snippet shows how to configure the NotEqualTo constraint using YAML format in a validation configuration file. It applies the constraint to the firstName and age properties of the Person entity.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Person:
    properties:
        firstName:
            - NotEqualTo: Mary
        age:
            - NotEqualTo:
                value: 15

----------------------------------------

TITLE: Standard Module Import in JavaScript
DESCRIPTION: This snippet shows a standard import of a large module (VideoPlayer) that gets bundled into the main JavaScript file regardless of its usage frequency.

LANGUAGE: javascript
CODE:
// assets/app.js

import $ from 'jquery';
// a fictional "large" module (e.g. it imports video.js internally)
import VideoPlayer from './components/VideoPlayer';

$('.js-open-video').on('click', function() {
    // use the larger VideoPlayer module
    const player = new VideoPlayer('some-element');
});

----------------------------------------

TITLE: Setting umask for Group-Writable Permissions in Symfony PHP Files
DESCRIPTION: This PHP code snippet sets the umask to allow group-writable permissions (0775) for Symfony's cache and log directories. It should be placed at the beginning of bin/console and public/index.php files when ACL is not available.

LANGUAGE: php
CODE:
umask(0002); // This will let the permissions be 0775

----------------------------------------

TITLE: Configuring URL Protocols with PHP Attributes
DESCRIPTION: Example of configuring allowed protocols for the URL constraint using PHP attributes.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\Url(
        protocols: ['http', 'https', 'ftp'],
    )]
    protected string $bioUrl;
}

----------------------------------------

TITLE: Including RST Contribution Map
DESCRIPTION: RST include directive that imports the contribution guidelines map from a separate file.

LANGUAGE: rst
CODE:
.. include:: /contributing/map.rst.inc

----------------------------------------

TITLE: Adding Valid Constraint to Author Entity
DESCRIPTION: Shows how to add the Valid constraint to the address property of the Author entity using different configuration methods.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\Valid]
    protected Address $address;
}

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        address:
            - Valid: ~

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="address">
            <constraint name="Valid"/>
        </property>
    </class>
</constraint-mapping>

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('address', new Assert\Valid());
    }
}

----------------------------------------

TITLE: Sending SMS Notifications
DESCRIPTION: PHP code showing how to send SMS notifications using Symfony's TexterInterface

LANGUAGE: php
CODE:
public function loginSuccess(TexterInterface $texter): Response
{
    $options = (new ProviderOptions())
        ->setPriority('high')
    ;

    $sms = new SmsMessage(
        // the phone number to send the SMS message to
        '+1411111111',
        // the message
        'A new login was detected!',
        // optionally, you can override default "from" defined in transports
        '+1422222222',
        // you can also add options object implementing MessageOptionsInterface
        $options
    );

    $sentMessage = $texter->send($sms);

    // ...
}

----------------------------------------

TITLE: Configuring Runtime Compiler Build
DESCRIPTION: Shows how to configure Vue.js runtime compiler build settings in webpack.config.js for optimized builds.

LANGUAGE: javascript
CODE:
// webpack.config.js
// ...

Encore
    // ...

    .enableVueLoader(() => {}, { runtimeCompilerBuild: false })
;

----------------------------------------

TITLE: Registering DQL Functions with Default Entity Manager (XML)
DESCRIPTION: XML configuration for registering custom string, numeric and datetime DQL functions with the default Doctrine entity manager in Symfony.

LANGUAGE: xml
CODE:
<!-- config/packages/doctrine.xml -->
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:doctrine="http://symfony.com/schema/dic/doctrine"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/doctrine
        https://symfony.com/schema/dic/doctrine/doctrine-1.0.xsd">

    <doctrine:config>
        <doctrine:orm>
            <!-- ... -->
            <doctrine:dql>
                <doctrine:string-function name="test_string">App\DQL\StringFunction</doctrine:string-function>
                <doctrine:string-function name="second_string">App\DQL\SecondStringFunction</doctrine:string-function>
                <doctrine:numeric-function name="test_numeric">App\DQL\NumericFunction</doctrine:numeric-function>
                <doctrine:datetime-function name="test_datetime">App\DQL\DatetimeFunction</doctrine:datetime-function>
            </doctrine:dql>
        </doctrine:orm>
    </doctrine:config>
</container>

----------------------------------------

TITLE: Defining Validation Constraints in YAML
DESCRIPTION: YAML configuration for defining validation constraints on the Author entity.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        name:
            - NotBlank: { message: 'author.name.not_blank' }

----------------------------------------

TITLE: Applying Charset Constraint in PHP using ClassMetadata
DESCRIPTION: Example of how to apply the Charset constraint to a property in a PHP class using ClassMetadata. This snippet shows how to validate that the 'content' property uses UTF-8 encoding.

LANGUAGE: php
CODE:
// src/Entity/FileDTO.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class FileDTO
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('content', new Assert\Charset('UTF-8'));
    }
}

----------------------------------------

TITLE: Accessing ChoiceType Data in Twig Template
DESCRIPTION: Demonstrates how to access form choice data within a Twig template, including selected state and choice values.

LANGUAGE: Twig
CODE:
{# `true` or `false`, whether the current choice is selected as radio or checkbox #}
{{ form.vars.data }}

{# the current choice value (i.e a category name when `'choice_value' => 'name'` #}
{{ form.vars.value }}

{# a map of `ChoiceView` or `ChoiceGroupView` instances indexed by choice values or group names #}
{{ form.parent.vars.choices }}

----------------------------------------

TITLE: Configuring Environment-Specific Options in YAML
DESCRIPTION: Example of configuring environment-specific options using YAML format.

LANGUAGE: yaml
CODE:
# config/packages/webpack_encore.yaml
webpack_encore:
    # ...
    output_path: '%kernel.project_dir%/public/build'
    strict_mode: true
    cache: false

when@prod:
    webpack_encore:
        cache: true

when@test:
    webpack_encore:
        strict_mode: false

when@prod: &webpack_prod
    webpack_encore:
        # ...
when@test: *webpack_prod

----------------------------------------

TITLE: Implementing When Constraint with PHP Attributes
DESCRIPTION: Example showing how to apply When constraint using PHP attributes for conditional validation based on discount type.

LANGUAGE: php
CODE:
// src/Model/Discount.php
namespace App\Model;

use Symfony\Component\Validator\Constraints as Assert;

class Discount
{
    #[Assert\GreaterThan(0)]
    #[Assert\When(
        expression: 'this.getType() == "percent"',
        constraints: [
            new Assert\LessThanOrEqual(100, message: 'The value should be between 1 and 100!')
        ],
        otherwise: [
            new Assert\LessThan(9999, message: 'The value should be less than 9999!')
        ],
    )]
    private ?int $value;

    // ...
}

----------------------------------------

TITLE: Advanced Symfony Kernel Configuration
DESCRIPTION: Extended kernel implementation with Twig integration, WebProfiler bundle, custom DI extension, and route configuration. Includes service auto-wiring and conditional bundle loading.

LANGUAGE: php
CODE:
namespace App;

use App\DependencyInjection\AppExtension;
use Symfony\Bundle\FrameworkBundle\FrameworkBundle;
use Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait;
use Symfony\Bundle\TwigBundle\TwigBundle;
use Symfony\Bundle\WebProfilerBundle\WebProfilerBundle;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symfony\Component\HttpKernel\Kernel as BaseKernel;
use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;

class Kernel extends BaseKernel
{
    use MicroKernelTrait;

    public function registerBundles(): iterable
    {
        yield new FrameworkBundle();
        yield new TwigBundle();

        if ('dev' === $this->getEnvironment()) {
            yield new WebProfilerBundle();
        }
    }

    protected function build(ContainerBuilder $containerBuilder): void
    {
        $containerBuilder->registerExtension(new AppExtension());
    }

    protected function configureContainer(ContainerConfigurator $container): void
    {
        $container->import(__DIR__.'/../config/framework.yaml');

        $container->services()
            ->load('App\\', __DIR__.'/*')
            ->autowire()
            ->autoconfigure()
        ;

        if (isset($this->bundles['WebProfilerBundle'])) {
            $container->extension('web_profiler', [
                'toolbar' => true,
                'intercept_redirects' => false,
            ]);
        }
    }

    protected function configureRoutes(RoutingConfigurator $routes): void
    {
        if (isset($this->bundles['WebProfilerBundle'])) {
            $routes->import('@WebProfilerBundle/Resources/config/routing/wdt.xml')->prefix('/_wdt');
            $routes->import('@WebProfilerBundle/Resources/config/routing/profiler.xml')->prefix('/_profiler');
        }

        $routes->import(__DIR__.'/Controller/', 'attribute');
    }
}

----------------------------------------

TITLE: Basic Asset Import Example
DESCRIPTION: Example showing how to import assets between JavaScript files using ES modules

LANGUAGE: javascript
CODE:
// assets/app.js
import Duck from './duck.js';

const duck = new Duck('Waddles');
duck.quack();

LANGUAGE: javascript
CODE:
// assets/duck.js
export default class {
    constructor(name) {
        this.name = name;
    }
    quack() {
        console.log(`${this.name} says: Quack!`);
    }
}

----------------------------------------

TITLE: Installing Notifier Component
DESCRIPTION: Command to install Symfony's Notifier component via Composer

LANGUAGE: bash
CODE:
composer require symfony/notifier

----------------------------------------

TITLE: Date Range Validation in Symfony
DESCRIPTION: Shows how to validate DateTime objects against date ranges using the Range constraint in an Event entity.

LANGUAGE: php
CODE:
// src/Entity/Event.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Event
{
    #[Assert\Range(
        min: 'first day of January',
        max: 'first day of January next year',
    )]
    protected \DateTimeInterface $startDate;
}

----------------------------------------

TITLE: YAML JSON Validation Configuration
DESCRIPTION: Shows how to configure JSON validation using YAML format in a validation configuration file. Applies the JSON constraint to the chapters property of the Book entity.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Book:
    properties:
        chapters:
            - Json:
                message: You've entered an invalid Json.

----------------------------------------

TITLE: Configuring Type Constraints with YAML
DESCRIPTION: Shows how to define Type constraints using YAML configuration. This example includes validation for email addresses, strings, integers, and alphanumeric values.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        emailAddress:
            - Type: Symfony\Component\Mime\Address

        firstName:
            - Type: string

        age:
            - Type:
                type: integer
                message: The value {{ value }} is not a valid {{ type }}.

        accessCode:
            - Type:
                type: [alpha, digit]

----------------------------------------

TITLE: Defining EqualTo Constraints in XML for Symfony Validation
DESCRIPTION: Illustrates the XML configuration for applying EqualTo constraints to properties of a Person entity in Symfony. The constraints ensure the firstName is 'Mary' and the age is 20.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Person">
        <property name="firstName">
            <constraint name="EqualTo">
                Mary
            </constraint>
        </property>
        <property name="age">
            <constraint name="EqualTo">
                <option name="value">20</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Enabling Profiler Programmatically in Controller
DESCRIPTION: Example of how to programmatically enable/disable the profiler in a Symfony controller

LANGUAGE: php
CODE:
use Symfony\Component\HttpKernel\Profiler\Profiler;

class DefaultController
{
    public function someMethod(?Profiler $profiler): Response
    {
        if (null !== $profiler) {
            $profiler->disable();
        }
        // ...
    }
}

----------------------------------------

TITLE: Implementing Sequential Validation using PHP Attributes
DESCRIPTION: Example of using the Sequentially constraint with PHP attributes to validate a Place class's address property through multiple sequential validation steps.

LANGUAGE: php
CODE:
// src/Localization/Place.php
namespace App\Localization;

use App\Validator\Constraints as AcmeAssert;
use Symfony\Component\Validator\Constraints as Assert;

class Place
{
    #[Assert\Sequentially([
        new Assert\NotNull,
        new Assert\Type('string'),
        new Assert\Length(min: 10),
        new Assert\Regex(Place::ADDRESS_REGEX),
        new AcmeAssert\Geolocalizable,
    ])]
    public string $address;
}

----------------------------------------

TITLE: PHP Cache File Format Example
DESCRIPTION: Example of how the PHP Files Cache Adapter formats and stores cached data as native PHP code. Shows the structure used when caching an array value.

LANGUAGE: php
CODE:
<?php return [

    // the cache item expiration
    0 => 9223372036854775807,

    // the cache item contents
    1 => [
        0 => 'my',
        1 => 'cached',
        2 => 'array',
    ],

];

----------------------------------------

TITLE: Configuring Webhook Routing in PHP
DESCRIPTION: PHP configuration for setting up webhook routing in Symfony, using Mailgun as an example.

LANGUAGE: php
CODE:
// config/packages/framework.php
use App\Webhook\MailerWebhookParser;
use Symfony\Config\FrameworkConfig;
return static function (FrameworkConfig $frameworkConfig): void {
    $webhookConfig = $frameworkConfig->webhook();
    $webhookConfig
        ->routing('mailer_mailgun')
        ->service('mailer.webhook.request_parser.mailgun')
        ->secret('%env(MAILER_MAILGUN_SECRET)%')
    ;
};

----------------------------------------

TITLE: Creating a Custom Version Strategy in PHP
DESCRIPTION: Shows how to create a custom version strategy that appends the current date to asset URLs.

LANGUAGE: php
CODE:
use Symfony\Component\Asset\VersionStrategy\VersionStrategyInterface;

class DateVersionStrategy implements VersionStrategyInterface
{
    private string $version;

    public function __construct()
    {
        $this->version = date('Ymd');
    }

    public function getVersion(string $path): string
    {
        return $this->version;
    }

    public function applyVersion(string $path): string
    {
        return sprintf('%s?v=%s', $path, $this->getVersion($path));
    }
}

----------------------------------------

TITLE: Configuring MacAddress Validation in XML
DESCRIPTION: Example showing how to configure the MacAddress constraint using XML configuration format.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Device">
        <property name="max">
            <constraint name="MacAddress"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Validating State Machine Programmatically
DESCRIPTION: Example showing how to validate a programmatically defined state machine using the StateMachineValidator class.

LANGUAGE: php
CODE:
use Symfony\Component\Workflow\Definition;
use Symfony\Component\Workflow\StateMachine;
use Symfony\Component\Workflow\Validator\StateMachineValidator;

$states = ['created', 'activated', 'deleted'];
$stateTransitions = [
    new Transition('activate', 'created', 'activated'),
    new Transition('activate', 'created', 'deleted'),
    new Transition('delete', 'activated', 'deleted'),
];

$definition = new Definition($states, $stateTransitions);

$validator = new StateMachineValidator();
$validator->validate($definition, 'My First StateMachine');

----------------------------------------

TITLE: Creating GitLab Recipe Index JSON
DESCRIPTION: Shows the structure of the index.json file for GitLab-hosted Symfony Flex recipes, including recipe entries and repository links.

LANGUAGE: json
CODE:
{
    "recipes": {
        "acme/private-bundle": [
            "1.0"
        ]
    },
    "branch": "main",
    "is_contrib": true,
    "_links": {
        "repository": "gitlab.com/your-gitlab-account-name/your-recipes-repository",
        "origin_template": "{package}:{version}@gitlab.com/your-gitlab-account-name/your-recipes-repository:main",
        "recipe_template": "https://gitlab.com/api/v4/projects/your-gitlab-project-id/repository/files/{package_dotted}.{version}.json/raw?ref=main"
    }
}

----------------------------------------

TITLE: Configuring DisableAutoMapping in XML
DESCRIPTION: Example showing how to disable auto-mapping using XML configuration in Symfony's validator configuration format.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\BookCollection">
        <constraint name="DisableAutoMapping"/>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Nginx SSL Termination Configuration
DESCRIPTION: Nginx server configuration for handling SSL termination in cloud environments like Microsoft Azure.

LANGUAGE: nginx
CODE:
location ~ ^/index\.php$ {
    fastcgi_pass 127.0.0.1:9000;
    include fastcgi.conf;
    fastcgi_param SERVER_PORT "443";
    fastcgi_param HTTPS "on";
}

----------------------------------------

TITLE: Configuring WeekType with String Placeholder
DESCRIPTION: Example showing how to add a WeekType field with a single placeholder string that applies to all select boxes when using the choice widget.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\WeekType;

$builder->add('startWeek', WeekType::class, [
    'placeholder' => 'Select a value',
]);

----------------------------------------

TITLE: Implementing Type Guessing Logic in PHP
DESCRIPTION: Detailed implementation of the guessType method that reads PHPDoc annotations and returns appropriate form type guesses based on the variable type documentation.

LANGUAGE: php
CODE:
public function guessType(string $class, string $property): ?TypeGuess
{
    $annotations = $this->readPhpDocAnnotations($class, $property);

    if (!isset($annotations['var'])) {
        return null;
    }

    return match($annotations['var']) {
        'string' => new TypeGuess(TextType::class, [], Guess::HIGH_CONFIDENCE),
        'int', 'integer' => new TypeGuess(IntegerType::class, [], Guess::MEDIUM_CONFIDENCE),
        'float', 'double', 'real' => new TypeGuess(NumberType::class, [], Guess::MEDIUM_CONFIDENCE),
        'boolean', 'bool' => new TypeGuess(CheckboxType::class, [], Guess::HIGH_CONFIDENCE),
        default => new TypeGuess(TextType::class, [], Guess::LOW_CONFIDENCE)
    };
}

----------------------------------------

TITLE: Extending Babel Configuration in JavaScript with Symfony Encore
DESCRIPTION: This snippet demonstrates how to use the configureBabel() method to extend Babel configuration in a webpack.config.js file. It shows adding presets, plugins, and controlling which modules are processed by Babel.

LANGUAGE: javascript
CODE:
// webpack.config.js
// ...

Encore
    // ...

    .configureBabel(function(babelConfig) {
        // add additional presets
        babelConfig.presets.push('@babel/preset-flow');

        // no plugins are added by default, but you can add some
        babelConfig.plugins.push('styled-jsx/babel');
    }, {
        // node_modules is not processed through Babel by default
        // but you can allow some specific modules to be processed
        includeNodeModules: ['foundation-sites'],

        // or completely control the exclude rule (note that you
        // can't use both "includeNodeModules" and "exclude" at
        // the same time)
        exclude: /bower_components/
    });

----------------------------------------

TITLE: Deprecating Services in Symfony PHP
DESCRIPTION: Shows how to deprecate a service using Symfony's PHP-based configuration.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\Service\OldService;

return function(ContainerConfigurator $container): void {
    $services = $container->services();

    $services->set(OldService::class)
        ->deprecate(
            'vendor-name/package-name',
            '2.8',
            'The "%service_id%" service is deprecated since vendor-name/package-name 2.8 and will be removed in 3.0.'
        );
};

----------------------------------------

TITLE: Creating Validators Translation Catalog in YAML
DESCRIPTION: YAML file for defining translations for validation messages.

LANGUAGE: yaml
CODE:
# translations/validators/validators.en.yaml
author.name.not_blank: Please enter an author name.

----------------------------------------

TITLE: Implementing Unique Validation with PHP Attributes
DESCRIPTION: Demonstrates how to apply the Unique constraint to an array property using PHP attributes in a Person entity class.

LANGUAGE: php
CODE:
// src/Entity/Person.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Person
{
    #[Assert\Unique]
    protected array $contactEmails;
}

----------------------------------------

TITLE: Installing React Dependencies using npm
DESCRIPTION: This command installs the necessary React dependencies (react, react-dom, and prop-types) using npm.

LANGUAGE: terminal
CODE:
$ npm install react react-dom prop-types --save

----------------------------------------

TITLE: Configuring Lazy Services in YAML
DESCRIPTION: Demonstrates how to mark a service as lazy using YAML configuration in Symfony. This allows the service to be instantiated only when it's actually used, potentially improving performance.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    App\Twig\AppExtension:
        lazy: true

----------------------------------------

TITLE: Configuring Lazy Services in YAML
DESCRIPTION: Demonstrates how to mark a service as lazy using YAML configuration in Symfony. This allows the service to be instantiated only when it's actually used, potentially improving performance.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    App\Twig\AppExtension:
        lazy: true

----------------------------------------

TITLE: Configuring Symfony to Use Bootstrap 5 Form Theme (XML)
DESCRIPTION: This XML configuration sets up Symfony to use the Bootstrap 5 form theme globally for all forms in the application.

LANGUAGE: xml
CODE:
<!-- config/packages/twig.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:twig="http://symfony.com/schema/dic/twig"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/twig
        https://symfony.com/schema/dic/twig/twig-1.0.xsd">

    <twig:config>
        <twig:form-theme>bootstrap_5_layout.html.twig</twig:form-theme>
        <!-- ... -->
    </twig:config>
</container>

----------------------------------------

TITLE: Configuring Validation Groups with Default Constraints
DESCRIPTION: Demonstrates how to include default validation constraints along with custom validation groups. This ensures both default entity constraints and specific group constraints are validated.

LANGUAGE: php
CODE:
public function configureOptions(OptionsResolver $resolver): void
{
    $resolver->setDefaults([
        'validation_groups' => function (FormInterface $form): array {
            $data = $form->getData();

            if (Client::TYPE_PERSON == $data->getType()) {
                return ['Default', 'person'];
            }

            return ['Default', 'company'];
        },
    ]);
}

----------------------------------------

TITLE: Using Flags for Parsing and Linting in PHP
DESCRIPTION: Demonstrates how to use flags to configure the behavior of parsing and linting methods.

LANGUAGE: php
CODE:
use Symfony\Component\ExpressionLanguage\ExpressionLanguage;
use Symfony\Component\ExpressionLanguage\Parser;

$expressionLanguage = new ExpressionLanguage();

// does not throw a SyntaxError because the unknown variables and functions are ignored
$expressionLanguage->lint('unknown_var + unknown_function()', [], Parser::IGNORE_UNKNOWN_VARIABLES | Parser::IGNORE_UNKNOWN_FUNCTIONS);

----------------------------------------

TITLE: Applying Luhn Constraint with PHP Attributes in Symfony
DESCRIPTION: This snippet demonstrates how to apply the Luhn constraint to a property using PHP attributes in a Symfony entity class. It validates a credit card number field.

LANGUAGE: php
CODE:
// src/Entity/Transaction.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Transaction
{
    #[Assert\Luhn(message: 'Please check your credit card number.')]
    protected string $cardNumber;
}

----------------------------------------

TITLE: Configuring HTTPS Enforcement in Symfony Security (YAML)
DESCRIPTION: This YAML configuration snippet demonstrates how to enforce HTTPS on different URL patterns using Symfony's access_control rules. It includes examples for secure areas, login pages, and a catch-all rule for all other URLs.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
security:
    # ...

    access_control:
        - { path: '^/secure', roles: ROLE_ADMIN, requires_channel: https }
        - { path: '^/login', roles: PUBLIC_ACCESS, requires_channel: https }
        # catch all other URLs
        - { path: '^/', roles: PUBLIC_ACCESS, requires_channel: https }

----------------------------------------

TITLE: Implementing Hostname Validation using PHP Code
DESCRIPTION: Example of configuring the Hostname constraint programmatically using PHP code in the entity class through metadata loading.

LANGUAGE: php
CODE:
// src/Entity/ServerSettings.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class ServerSettings
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('name', new Assert\Hostname(
            message: 'The server name must be a valid hostname.',
        ));
    }
}

----------------------------------------

TITLE: Defining NotEqualTo Constraint in XML
DESCRIPTION: This snippet illustrates how to define the NotEqualTo constraint using XML format in a validation configuration file. It applies the constraint to the firstName and age properties of the Person entity.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Person">
        <property name="firstName">
            <constraint name="NotEqualTo">
                Mary
            </constraint>
        </property>
        <property name="age">
            <constraint name="NotEqualTo">
                <option name="value">15</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Configuring Synthetic Service in YAML
DESCRIPTION: YAML configuration for declaring a synthetic service in Symfony's service container.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    # synthetic services don't specify a class
    app.synthetic_service:
        synthetic: true

----------------------------------------

TITLE: Using Integer Processor for Environment Variables in PHP
DESCRIPTION: Example of using the integer processor to convert an environment variable value to an integer in a PHP configuration file.

LANGUAGE: php
CODE:
// config/packages/framework.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use Symfony\Config\FrameworkConfig;

return static function (FrameworkConfig $framework): void {
    $framework->router()
        ->httpPort('%env(int:HTTP_PORT)%')
        // or
        ->httpPort(env('HTTP_PORT')->int())
    ;
};

----------------------------------------

TITLE: Implementing Traverse Constraint in PHP with Attributes
DESCRIPTION: Demonstrates how to apply the Traverse constraint to a BookCollection class using PHP attributes. The class implements IteratorAggregate and includes various properties and methods.

LANGUAGE: php
CODE:
// src/Entity/BookCollection.php
namespace App\Entity;

use App\Entity\Book;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

#[ORM\Entity]
#[Assert\Traverse]
class BookCollection implements \IteratorAggregate
{
    /**
     * @var string
     */
    #[ORM\Column]
    #[Assert\NotBlank]
    protected string $name = '';

    /**
     * @var Collection|Book[]
     */
    #[ORM\ManyToMany(targetEntity: Book::class)]
    protected ArrayCollection $books;

    // some other properties

    public function __construct()
    {
        $this->books = new ArrayCollection();
    }

    // ... setter for name, adder and remover for books

    // the name can be validated by calling the getter
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @return \Generator|Book[] The books for a given author
     */
    public function getBooksForAuthor(Author $author): iterable
    {
        foreach ($this->books as $book) {
            if ($book->isAuthoredBy($author)) {
                yield $book;
            }
        }
    }

    // neither the method above nor any other specific getter
    // could be used to validated all nested books;
    // this object needs to be traversed to call the iterator
    public function getIterator(): \Iterator
    {
        return $this->books->getIterator();
    }
}

----------------------------------------

TITLE: LessThanOrEqual YAML Configuration
DESCRIPTION: Example of configuring LessThanOrEqual validation constraints using YAML format in a separate validation configuration file.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Person:
    properties:
        siblings:
            - LessThanOrEqual: 5
        age:
            - LessThanOrEqual:
                value: 80

----------------------------------------

TITLE: Configuring Services in YAML
DESCRIPTION: YAML configuration for registering email-related services and setting up the configurator.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    # ...

    # Registers all 4 classes as services, including App\Mail\EmailConfigurator
    App\:
        resource: '../src/*'
        # ...

    # override the services to set the configurator
    App\Mail\NewsletterManager:
        configurator: ['@App\Mail\EmailConfigurator', 'configure']

    App\Mail\GreetingCardManager:
        configurator: ['@App\Mail\EmailConfigurator', 'configure']

----------------------------------------

TITLE: Adding All Possible Return Types
DESCRIPTION: Command to add native return types to all possible methods when creating a new major release of an open-source package.

LANGUAGE: shell
CODE:
$ SYMFONY_PATCH_TYPE_DECLARATIONS="force=2&php=7.4" ./vendor/bin/patch-type-declarations

----------------------------------------

TITLE: Configuring Symfony Router in PHP
DESCRIPTION: Demonstrates how to configure the Symfony router using PHP, including environment-specific settings.

LANGUAGE: PHP
CODE:
// config/packages/framework.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use Symfony\Config\FrameworkConfig;

return static function (FrameworkConfig $framework, ContainerConfigurator $container): void {
    $framework->router()
        ->utf8(true)
    ;

    if ('prod' === $container->env()) {
        $framework->router()
            ->strictRequirements(null)
        ;
    }
};

----------------------------------------

TITLE: Dumping and Caching the Compiled Symfony Container
DESCRIPTION: This snippet demonstrates how to dump the compiled container to a PHP file for improved performance.

LANGUAGE: PHP
CODE:
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Dumper\PhpDumper;

$file = __DIR__ .'/cache/container.php';

if (file_exists($file)) {
    require_once $file;
    $container = new ProjectServiceContainer();
} else {
    $container = new ContainerBuilder();
    // ...
    $container->compile();

    $dumper = new PhpDumper($container);
    file_put_contents($file, $dumper->dump());
}

----------------------------------------

TITLE: Running a Process with Array Arguments in PHP
DESCRIPTION: Shows how to run a process using an array of arguments directly with the ProcessHelper. This method automatically escapes the arguments.

LANGUAGE: php
CODE:
$helper->run($output, ['figlet', 'Symfony']);

----------------------------------------

TITLE: Applying Bootstrap 5 Form Theme to Specific Form in Twig
DESCRIPTION: This Twig snippet demonstrates how to apply the Bootstrap 5 form theme to a specific form within a template, rather than globally.

LANGUAGE: html+twig
CODE:
{# ... #}
{# this tag only applies to the forms defined in this template #}
{% form_theme form 'bootstrap_5_layout.html.twig' %}

{% block body %}
    <h1>User Sign Up:</h1>
    {{ form(form) }}
{% endblock %}

----------------------------------------

TITLE: Configuring Services in XML
DESCRIPTION: XML configuration for registering email-related services and setting up the configurator.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <prototype namespace="App\" resource="../src/*"/>

        <service id="App\Mail\NewsletterManager">
            <configurator service="App\Mail\EmailConfigurator" method="configure"/>
        </service>

        <service id="App\Mail\GreetingCardManager">
            <configurator service="App\Mail\EmailConfigurator" method="configure"/>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Configuring Services in PHP
DESCRIPTION: PHP configuration for registering email-related services and setting up the configurator.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\Mail\EmailConfigurator;
use App\Mail\GreetingCardManager;
use App\Mail\NewsletterManager;

return function(ContainerConfigurator $container): void {
    $services = $container->services();

    // Registers all 4 classes as services, including App\Mail\EmailConfigurator
    $services->load('App\\', '../src/*');

    // override the services to set the configurator
    $services->set(NewsletterManager::class)
        ->configurator([service(EmailConfigurator::class), 'configure']);

    $services->set(GreetingCardManager::class)
        ->configurator([service(EmailConfigurator::class), 'configure']);
};

----------------------------------------

TITLE: Accessing Script Names with PHP
DESCRIPTION: Shows how to work with script codes and names using the Scripts class

LANGUAGE: PHP
CODE:
use Symfony\Component\Intl\Scripts;

\Locale::setDefault('en');

$scripts = Scripts::getNames();
// ('scriptCode' => 'scriptName')
// => ['Adlm' => 'Adlam', 'Afak' => 'Afaka', ...]

$script = Scripts::getName('Hans');
// => 'Simplified'

----------------------------------------

TITLE: Configuring Texter Transport in YAML
DESCRIPTION: YAML configuration for setting up a Twilio SMS transport in Symfony's Notifier

LANGUAGE: yaml
CODE:
framework:
    notifier:
        texter_transports:
            twilio: '%env(TWILIO_DSN)%'

----------------------------------------

TITLE: Implementing Configuration Interface in PHP
DESCRIPTION: Basic implementation of ConfigurationInterface showing how to create a TreeBuilder instance.

LANGUAGE: php
CODE:
namespace Acme\DatabaseConfiguration;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

class DatabaseConfiguration implements ConfigurationInterface
{
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder('database');
        return $treeBuilder;
    }
}

----------------------------------------

TITLE: Including Additional Bootstrap/jQuery Plugins
DESCRIPTION: Example of importing additional Bootstrap and jQuery plugins with their required CSS files

LANGUAGE: javascript
CODE:
// require the JavaScript
require('bootstrap-star-rating');
// require 2 CSS files needed
require('bootstrap-star-rating/css/star-rating.css');
require('bootstrap-star-rating/themes/krajee-svg/theme.css');

----------------------------------------

TITLE: Running a Process with ProcessHelper in PHP
DESCRIPTION: Demonstrates how to use the ProcessHelper to run and display a process. It creates a new Process instance and uses the helper to execute it, which will display process details when run with high verbosity.

LANGUAGE: php
CODE:
use Symfony\Component\Process\Process;

$helper = $this->getHelper('process');
$process = new Process(['figlet', 'Symfony']);

$helper->run($output, $process);

----------------------------------------

TITLE: Using JavaScript's dataset property to access data attributes
DESCRIPTION: This snippet shows an alternative method to access data-* attributes using JavaScript's dataset property. It demonstrates how attribute names are converted from dash-style to camelCase when accessed via dataset.

LANGUAGE: javascript
CODE:
// ...
const isAuthenticated = userRating.dataset.isAuthenticated;
const user = JSON.parse(userRating.dataset.user);

----------------------------------------

TITLE: Creating CustomerType Form Class
DESCRIPTION: Form type class for Customer entity with basic personal information fields.

LANGUAGE: php
CODE:
namespace App\Form\Type;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;

class CustomerType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('firstName', TextType::class)
            ->add('lastName', TextType::class);
    }
}

----------------------------------------

TITLE: Configuring ResolveTargetEntityListener in YAML
DESCRIPTION: YAML configuration for mapping the interface to concrete implementation in Doctrine

LANGUAGE: yaml
CODE:
# config/packages/doctrine.yaml
doctrine:
    # ...
    orm:
        # ...
        resolve_target_entities:
            App\Model\InvoiceSubjectInterface: App\Entity\Customer

----------------------------------------

TITLE: Disabling Traverse Constraint in PHP
DESCRIPTION: Shows how to disable the Traverse constraint for the BookCollection class using PHP in the entity class itself.

LANGUAGE: php
CODE:
// src/Entity/BookCollection.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class BookCollection
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addConstraint(new Assert\Traverse(false));
    }
}

----------------------------------------

TITLE: Using EnumRequirement for Route Parameters in Symfony
DESCRIPTION: Example of using EnumRequirement to restrict route parameter values in a Symfony controller.

LANGUAGE: php
CODE:
use Symfony\Component\Routing\Requirement\EnumRequirement;

// ...

class CardController
{
    #[Route('/cards/{suit}', requirements: [
        // this allows all values defined in the Enum
        'suit' => new EnumRequirement(Suit::class),
        // this restricts the possible values to the Enum values listed here
        'suit' => new EnumRequirement([Suit::Diamonds, Suit::Spades]),
    ])]
    public function list(Suit $suit): Response
    {
        // ...
    }

    // ...
}

----------------------------------------

TITLE: Adding Class-Level Constraints to Symfony Form
DESCRIPTION: Shows how to add validation constraints at the class level for a Symfony form that is not mapped to an object, using the configureOptions method.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\Collection;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;

public function buildForm(FormBuilderInterface $builder, array $options): void
{
    $builder
        ->add('firstName', TextType::class)
        ->add('lastName', TextType::class);
}

public function configureOptions(OptionsResolver $resolver): void
{
    $resolver->setDefaults([
        'data_class' => null,
        'constraints' => new Collection([
            'firstName' => new Length(min: 3),
            'lastName' => [
                new NotBlank(),
                new Length(min: 3),
            ],
        ]),
    ]);
}

----------------------------------------

TITLE: Defining Luhn Constraint in XML for Symfony Validation
DESCRIPTION: This XML configuration applies the Luhn constraint to the cardNumber property of a Transaction entity in Symfony. It includes a custom error message for validation failures.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Transaction">
        <property name="cardNumber">
            <constraint name="Luhn">
                <option name="message">Please check your credit card number.</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Creating New Symfony Project with Latest Development Version
DESCRIPTION: Command to create a new Symfony project using the latest unreleased development version through Composer.

LANGUAGE: terminal
CODE:
$ composer create-project symfony/skeleton my_project -s dev

----------------------------------------

TITLE: Configuring Mailer DSN in YAML
DESCRIPTION: YAML configuration for setting up the Mailer DSN

LANGUAGE: yaml
CODE:
# config/packages/mailer.yaml
framework:
    mailer:
        dsn: '%env(MAILER_DSN)%'

----------------------------------------

TITLE: Enabling Separate Compiler Pass Classes in Symfony Kernel
DESCRIPTION: This snippet demonstrates how to enable separate compiler pass classes in the Symfony Kernel's build() method. It shows adding a custom compiler pass to the container builder.

LANGUAGE: php
CODE:
// src/Kernel.php
namespace App;

use App\DependencyInjection\Compiler\CustomPass;
use Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\HttpKernel\Kernel as BaseKernel;

class Kernel extends BaseKernel
{
    use MicroKernelTrait;

    // ...

    protected function build(ContainerBuilder $container): void
    {
        $container->addCompilerPass(new CustomPass());
    }
}

----------------------------------------

TITLE: Enabling ESI Support in Varnish 3
DESCRIPTION: This configuration enables Edge Side Includes (ESI) support in Varnish 3 by processing ESI tags when the Surrogate-Control header is present.

LANGUAGE: varnish3
CODE:
sub vcl_fetch {
    // Check for ESI acknowledgement and remove Surrogate-Control header
    if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
        unset beresp.http.Surrogate-Control;
        set beresp.do_esi = true;
    }
}

----------------------------------------

TITLE: Configuring Custom Error Controller in Symfony
DESCRIPTION: YAML configuration to set a custom error controller in Symfony's framework configuration.

LANGUAGE: yaml
CODE:
# config/packages/framework.yaml
framework:
    error_controller: App\Controller\ErrorController::show

----------------------------------------

TITLE: Basic LessThan Constraint with PHP Attributes
DESCRIPTION: Demonstrates using LessThan constraint with PHP attributes to validate numeric values for siblings and age properties.

LANGUAGE: php
CODE:
// src/Entity/Person.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Person
{
    #[Assert\LessThan(5)]
    protected int $siblings;

    #[Assert\LessThan(
        value: 80,
    )]
    protected int $age;
}

----------------------------------------

TITLE: Defining Negative Constraint in YAML
DESCRIPTION: Example of using the Negative constraint on a property in a YAML configuration file. This ensures the 'withdraw' property is a negative number.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\TransferItem:
    properties:
        withdraw:
            - Negative: ~

----------------------------------------

TITLE: Updating Symfony Packages with Composer
DESCRIPTION: Command to update Symfony packages to their new versions using Composer.

LANGUAGE: shell
CODE:
$ composer update "symfony/*"

----------------------------------------

TITLE: Configuring Security Channel Handler in XML
DESCRIPTION: XML configuration for directing security channel logs to a separate file in production environment. Shows handler setup with channel filtering.

LANGUAGE: xml
CODE:
<!-- config/packages/prod/monolog.xml-->
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:monolog="http://symfony.com/schema/dic/monolog"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/monolog
        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd">
    <when env="prod">
        <monolog:config>
            <monolog:handler name="security" type="stream" path="%kernel.logs_dir%/security.log">
                <monolog:channels>
                    <monolog:channel>security</monolog:channel>
                </monolog:channels>
            </monolog:handler>
        </monolog:config>
    </when>
</container>

----------------------------------------

TITLE: Date Validation Using PHP Attributes
DESCRIPTION: Demonstrates how to validate a date field using PHP attributes in a Symfony entity class. The constraint ensures the birthday field follows the Y-m-d format.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\Date]
    protected string $birthday;
}

----------------------------------------

TITLE: Basic Progress Indicator Implementation in PHP
DESCRIPTION: Demonstrates how to create and use a basic progress indicator in a Symfony console command. Shows initialization, progress advancement, and completion.

LANGUAGE: php
CODE:
use Symfony\Component\Console\Helper\ProgressIndicator;

// creates a new progress indicator
$progressIndicator = new ProgressIndicator($output);

// starts and displays the progress indicator with a custom message
$progressIndicator->start('Processing...');

$i = 0;
while ($i++ < 50) {
    // ... do some work

    // advances the progress indicator
    $progressIndicator->advance();
}

// ensures that the progress indicator shows a final message
$progressIndicator->finish('Finished');

----------------------------------------

TITLE: Registering DQL Functions with Named Entity Manager (XML)
DESCRIPTION: XML configuration for registering custom DQL functions with a named Doctrine entity manager in Symfony.

LANGUAGE: xml
CODE:
<!-- config/packages/doctrine.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:doctrine="http://symfony.com/schema/dic/doctrine"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/doctrine
        https://symfony.com/schema/dic/doctrine/doctrine-1.0.xsd">

    <doctrine:config>
        <doctrine:orm>
            <!-- ... -->

            <doctrine:entity-manager name="example_manager">
                <!-- place your functions here -->
                <doctrine:dql>
                    <doctrine:datetime-function name="test_datetime">
                        App\DQL\DatetimeFunction
                    </doctrine:datetime-function>
                </doctrine:dql>
            </doctrine:entity-manager>
        </doctrine:orm>
    </doctrine:config>
</container>

----------------------------------------

TITLE: Implementing NotNull Constraint with PHP Code
DESCRIPTION: Demonstrates how to add the NotNull constraint programmatically using PHP code in a Symfony entity.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('firstName', new Assert\NotNull());
    }
}

----------------------------------------

TITLE: Using #[Required] Attribute for Autowired Immutable Setters in PHP
DESCRIPTION: This snippet demonstrates how to use the #[Required] attribute with an immutable setter method in a Symfony service class when autowiring is enabled. It includes a note about using @return $this to disable the returns clone feature if needed.

LANGUAGE: php
CODE:
#[Required]
public function withLogger(LoggerInterface $logger): static
{
    $new = clone $this;
    $new->logger = $logger;

    return $new;
}

----------------------------------------

TITLE: Including Bootstrap Assets in Twig Template
DESCRIPTION: Template code showing how to include Bootstrap CSS and JavaScript resources in a base Twig template.

LANGUAGE: html+twig
CODE:
{# templates/base.html.twig #}

{# beware that the blocks in your template may be named different #}
{% block head_css %}
    <!-- Copy CSS from https://getbootstrap.com/docs/4.4/getting-started/introduction/#css -->
{% endblock %}
{% block head_js %}
    <!-- Copy JavaScript from https://getbootstrap.com/docs/4.4/getting-started/introduction/#js -->
{% endblock %}

----------------------------------------

TITLE: Basic Monolog Email Configuration in YAML
DESCRIPTION: Configures Monolog handlers for email notifications with fingers_crossed trigger, deduplication, and symfony mailer integration. Includes settings for error levels, email formatting, and recipient configuration.

LANGUAGE: yaml
CODE:
# config/packages/prod/monolog.yaml
monolog:
    handlers:
        main:
            type:         fingers_crossed
            action_level: critical
            handler:      deduplicated
        deduplicated:
            type:    deduplication
            handler: symfony_mailer
        symfony_mailer:
            type:       symfony_mailer
            from_email: 'error@example.com'
            to_email:   'error@example.com'
            subject:    'An Error Occurred! %%message%%'
            level:      debug
            formatter:  monolog.formatter.html
            content_type: text/html

----------------------------------------

TITLE: Requiring Non-Standard Module in Encore
DESCRIPTION: This code demonstrates how to require a module that doesn't have a standard main file specified in its package.json.

LANGUAGE: javascript
CODE:
// require a non-minified file whenever possible
require('respond.js/dest/respond.src.js');

----------------------------------------

TITLE: Configuring Type Constraints with XML
DESCRIPTION: Illustrates how to set up Type constraints using XML configuration. The example covers validation for email addresses, strings, integers, and alphanumeric values.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="emailAddress">
            <constraint name="Type">
                <option name="type">Symfony\Component\Mime\Address</option>
            </constraint>
        </property>
        <property name="firstName">
            <constraint name="Type">
                <option name="type">string</option>
            </constraint>
        </property>
        <property name="age">
            <constraint name="Type">
                <option name="type">integer</option>
                <option name="message">The value {{ value }} is not a valid {{ type }}.</option>
            </constraint>
        </property>
        <property name="accessCode">
            <constraint name="Type">
                <option name="type">
                    <value>alpha</value>
                    <value>digit</value>
                </option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Configuring Validation Constraints in YAML
DESCRIPTION: Shows how to configure validation constraints for Address and Author entities using YAML.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Address:
    properties:
        street:
            - NotBlank: ~
        zipCode:
            - NotBlank: ~
            - Length:
                max: 5

App\Entity\Author:
    properties:
        firstName:
            - NotBlank: ~
            - Length:
                min: 4
        lastName:
            - NotBlank: ~

----------------------------------------

TITLE: CLI Command for Debugging Exceptions in Symfony
DESCRIPTION: Demonstrates how to run a Symfony console command to debug exceptions. This command is useful for developers to quickly identify and troubleshoot issues in the command-line interface.

LANGUAGE: bash
CODE:
$ php bin/console debug:exception

----------------------------------------

TITLE: Configuring Module Aliases in Symfony Encore
DESCRIPTION: This JavaScript snippet shows how to configure module aliases in Symfony Encore to simplify imports in your JavaScript code.

LANGUAGE: javascript
CODE:
Encore.addAliases({
    Utilities: path.resolve(__dirname, 'src/utilities/'),
    Templates: path.resolve(__dirname, 'src/templates/')
})

----------------------------------------

TITLE: Registering DQL Functions with Named Entity Manager (YAML)
DESCRIPTION: YAML configuration for registering custom DQL functions with a named Doctrine entity manager in Symfony.

LANGUAGE: yaml
CODE:
# config/packages/doctrine.yaml
doctrine:
    orm:
        # ...
        entity_managers:
            example_manager:
                # Place your functions here
                dql:
                    datetime_functions:
                        test_datetime: App\DQL\DatetimeFunction

----------------------------------------

TITLE: Applying Slug Constraint using PHP
DESCRIPTION: Example of how to apply the Slug constraint to a property in a PHP class using the loadValidatorMetadata method. This snippet shows the implementation in an Author entity class.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('slug', new Assert\Slug());
    }
}

----------------------------------------

TITLE: Configuring MacAddress Validation in YAML
DESCRIPTION: Example showing how to configure the MacAddress constraint using YAML configuration format.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Device:
    properties:
        mac:
            - MacAddress: ~

----------------------------------------

TITLE: Flexible Collection Field Rendering in Twig
DESCRIPTION: Advanced example showing how to render collection fields individually with custom HTML structure in Twig.

LANGUAGE: html+twig
CODE:
{{ form_label(form.emails) }}
{{ form_errors(form.emails) }}

<ul>
{% for emailField in form.emails %}
    <li>
        {{ form_errors(emailField) }}
        {{ form_widget(emailField) }}
    </li>
{% endfor %}
</ul>

----------------------------------------

TITLE: Configuring Multiple Loaders in Symfony Validator
DESCRIPTION: Demonstrates how to configure multiple metadata loaders for Symfony's Validator component, including attribute mapping, method mapping, and XML mapping.

LANGUAGE: php
CODE:
use Symfony\Component\Validator\Validation;

$validator = Validation::createValidatorBuilder()
    ->enableAttributeMapping()
    ->addMethodMapping('loadValidatorMetadata')
    ->addXmlMapping('validator/validation.xml')
    ->getValidator();

----------------------------------------

TITLE: Implementing PrependExtensionInterface in Symfony Extension Class
DESCRIPTION: Shows how to implement PrependExtensionInterface in a bundle's Extension class to enable configuration prepending functionality. The code demonstrates the basic structure needed to implement the prepend method.

LANGUAGE: php
CODE:
namespace Acme\HelloBundle\DependencyInjection;

use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Extension\PrependExtensionInterface;
use Symfony\Component\HttpKernel\DependencyInjection\Extension;

class AcmeHelloExtension extends Extension implements PrependExtensionInterface
{
    // ...

    public function prepend(ContainerBuilder $container): void
    {
        // ...
    }
}

----------------------------------------

TITLE: Deprecating Service Aliases in Symfony PHP
DESCRIPTION: Shows how to deprecate a service alias using Symfony's PHP-based configuration.

LANGUAGE: php
CODE:
$container
    ->setAlias('app.mailer', 'App\Mail\PhpMailer')
    ->setDeprecated(
        'acme/package',
        '1.2',
        'The "%alias_id%" service alias is deprecated. Don\'t use it anymore.'
    );

----------------------------------------

TITLE: YAML Configuration for GreaterThanOrEqual
DESCRIPTION: YAML configuration example for the GreaterThanOrEqual constraint applied to Person entity properties.

LANGUAGE: yaml
CODE:
App\Entity\Person:
    properties:
        siblings:
            - GreaterThanOrEqual: 5
        age:
            - GreaterThanOrEqual:
                value: 18

----------------------------------------

TITLE: Defining Length Constraint in XML for Symfony Validation
DESCRIPTION: Illustrates how to set up the Length constraint for a property using XML configuration. It defines minimum and maximum length requirements with custom error messages.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Participant">
        <property name="firstName">
            <constraint name="Length">
                <option name="min">2</option>
                <option name="max">50</option>
                <option name="minMessage">
                    Your first name must be at least {{ limit }} characters long
                </option>
                <option name="maxMessage">
                    Your first name cannot be longer than {{ limit }} characters
                </option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Running Composer Update for Symfony Packages
DESCRIPTION: Terminal command to update all Symfony packages to their new versions using Composer.

LANGUAGE: bash
CODE:
$ composer update "symfony/*"

----------------------------------------

TITLE: Using AsMonologProcessor Attribute in PHP
DESCRIPTION: This PHP code demonstrates how to use the #[AsMonologProcessor] attribute to register a processor without manual configuration, including optional arguments for channel and handler specification.

LANGUAGE: PHP
CODE:
// src/Logger/SessionRequestProcessor.php
namespace App\Logger;

use Monolog\Attribute\AsMonologProcessor;

#[AsMonologProcessor]
class SessionRequestProcessor
{
    // ...
}

----------------------------------------

TITLE: Initializing Redis Tag-Aware Adapter in PHP
DESCRIPTION: This snippet shows how to create a RedisTagAwareAdapter instance for improved performance when using tag-based invalidation with Redis as the backend.

LANGUAGE: PHP
CODE:
use Symfony\Component\Cache\Adapter\RedisAdapter;
use Symfony\Component\Cache\Adapter\RedisTagAwareAdapter;

$client = RedisAdapter::createConnection('redis://localhost');
$cache = new RedisTagAwareAdapter($client);

----------------------------------------

TITLE: Table Cell Spanning in Symfony Console
DESCRIPTION: Shows how to create table cells that span multiple columns or rows using TableCell class.

LANGUAGE: PHP
CODE:
use Symfony\Component\Console\Helper\Table;
use Symfony\Component\Console\Helper\TableCell;

$table = new Table($output);
$table
    ->setHeaders(['ISBN', 'Title', 'Author'])
    ->setRows([
        [
            '978-0521567817',
            'De Monarchia',
            new TableCell("Dante Alighieri\nspans multiple rows", ['rowspan' => 2]),
        ],
        ['978-0804169127', 'Divine Comedy'],
    ])
;
$table->render();

----------------------------------------

TITLE: Handling New Optional Argument with func_get_arg
DESCRIPTION: Demonstrates retrieving a new optional argument using func_num_args and func_get_arg while maintaining backward compatibility.

LANGUAGE: php
CODE:
$stripWhitespace = 2 <= \func_num_args() ? func_get_arg(1) : false;

----------------------------------------

TITLE: Configuring Switch User in Symfony Security
DESCRIPTION: Basic configuration to enable the switch_user functionality in the security firewall.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
security:
    firewalls:
        main:
            switch_user: true

----------------------------------------

TITLE: Configuring Twig Debug Mode (YAML)
DESCRIPTION: Shows how to configure Twig's debug mode in the YAML configuration file. The kernel.debug parameter is used to set the debug mode dynamically based on the application's debug state.

LANGUAGE: yaml
CODE:
# config/packages/twig.yaml
twig:
    debug: '%kernel.debug%'

----------------------------------------

TITLE: Configuring WeekType with Array Placeholder
DESCRIPTION: Example demonstrating how to add a WeekType field with separate placeholder values for year and week fields when using the choice widget.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\WeekType;

$builder->add('startDateTime', WeekType::class, [
    'placeholder' => [
        'year' => 'Year',
        'week' => 'Week',
    ],
]);

----------------------------------------

TITLE: Configuring Monolog Handler with Custom Formatter in YAML
DESCRIPTION: This YAML configuration sets up a Monolog handler that uses the custom formatter for log output, applying it to the main stream handler.

LANGUAGE: YAML
CODE:
# config/packages/prod/monolog.yaml
monolog:
    handlers:
        main:
            type: stream
            path: '%kernel.logs_dir%/%kernel.environment%.log'
            level: debug
            formatter: monolog.formatter.session_request

----------------------------------------

TITLE: Validating ULID with PHP Attributes
DESCRIPTION: Example of using PHP attributes to validate a ULID property in a Symfony entity class. Demonstrates validation constraint usage with the Assert\Ulid annotation.

LANGUAGE: php
CODE:
// src/Entity/File.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class File
{
    #[Assert\Ulid]
    protected string $identifier;
}

----------------------------------------

TITLE: Configuring Encore Watch Options for Virtual Machines in JavaScript
DESCRIPTION: This snippet shows how to enable polling in Encore's watch options to resolve file watching issues when using NFS in virtual machines.

LANGUAGE: javascript
CODE:
// webpack.config.js

// ...

// will be applied for `encore dev --watch` and `encore dev-server` commands
Encore.configureWatchOptions(watchOptions => {
    watchOptions.poll = 250; // check for changes every 250 milliseconds
});

----------------------------------------

TITLE: Implementing LegacyController for Handling Legacy Routes
DESCRIPTION: Symfony controller that handles legacy routes by executing the corresponding legacy PHP scripts and wrapping their output in a Symfony response.

LANGUAGE: php
CODE:
// src/Controller/LegacyController.php
namespace App\Controller;

use Symfony\Component\HttpFoundation\StreamedResponse;

class LegacyController
{
    public function loadLegacyScript(string $requestPath, string $legacyScript): StreamedResponse
    {
        return new StreamedResponse(
            function () use ($requestPath, $legacyScript): void {
                $_SERVER['PHP_SELF'] = $requestPath;
                $_SERVER['SCRIPT_NAME'] = $requestPath;
                $_SERVER['SCRIPT_FILENAME'] = $legacyScript;

                chdir(dirname($legacyScript));

                require $legacyScript;
            }
        );
    }
}

----------------------------------------

TITLE: Configuring EnableAutoMapping Constraint in YAML
DESCRIPTION: This snippet shows how to configure the EnableAutoMapping constraint for a class using YAML format in a Symfony validation configuration file.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\BookCollection:
    constraints:
        - EnableAutoMapping: ~

----------------------------------------

TITLE: Configuring Image Constraint with Orientation Restrictions in PHP
DESCRIPTION: Example of configuring the Image constraint to only allow square images by disabling landscape and portrait orientations.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\Image(
        allowLandscape: false,
        allowPortrait: false,
    )]
    protected File $headshot;
}

----------------------------------------

TITLE: Overriding Log Directory in Kernel Class
DESCRIPTION: This PHP code shows how to override the log directory by modifying the getLogDir() method in the Kernel class. It sets the log directory to var/{environment}/log/.

LANGUAGE: php
CODE:
// src/Kernel.php

// ...
class Kernel extends BaseKernel
{
    // ...

    public function getLogDir(): string
    {
        return dirname(__DIR__).'/var/'.$this->environment.'/log';
    }
}

----------------------------------------

TITLE: Customized Form Layout with HTML Structure
DESCRIPTION: Example showing how to render form parts individually with custom HTML structure using form_start(), form_errors(), form_row() and form_end() functions.

LANGUAGE: html+twig
CODE:
{{ form_start(form) }}
    <div class="my-custom-class-for-errors">
        {{ form_errors(form) }}
    </div>

    <div class="row">
        <div class="col">
            {{ form_row(form.task) }}
        </div>
        <div class="col" id="some-custom-id">
            {{ form_row(form.dueDate) }}
        </div>
    </div>
{{ form_end(form) }}

----------------------------------------

TITLE: Applying IsTrue Constraint with PHP Attributes
DESCRIPTION: This code shows how to apply the IsTrue constraint to the isTokenValid method using PHP attributes. It includes a custom error message for invalid tokens.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    protected string $token;

    #[Assert\IsTrue(message: 'The token is invalid.')]
    public function isTokenValid(): bool
    {
        return $this->token === $this->generateToken();
    }

    // ...
}

----------------------------------------

TITLE: Disabling Traverse Constraint in PHP with Attributes
DESCRIPTION: Demonstrates how to disable the Traverse constraint for a BookCollection class that implements IteratorAggregate using PHP attributes.

LANGUAGE: php
CODE:
// src/Entity/BookCollection.php

// ... same as above

/**
 * ...
 */
 #[Assert\Traverse(false)]
 class BookCollection implements \IteratorAggregate
 {
     // ...
 }

----------------------------------------

TITLE: Defining NoSuspiciousCharacters Constraint in XML
DESCRIPTION: Illustrates the XML configuration for applying the NoSuspiciousCharacters constraint to a property.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\User">
        <property name="username">
            <constraint name="NoSuspiciousCharacters"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Installing Symfony Cache Component via Composer
DESCRIPTION: Command to install the Symfony Cache component using Composer package manager.

LANGUAGE: terminal
CODE:
$ composer require symfony/cache

----------------------------------------

TITLE: Importing Configuration Files in PHP
DESCRIPTION: Illustrates how to import other configuration files using PHP format.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

return static function (ContainerConfigurator $container): void {
    $container->import('legacy_config.php');
    $container->import('/etc/myapp/*.yaml');
    $container->import('my_config_file.yaml', null, 'not_found');
    $container->import('my_config_file.yaml', null, true);
};

// ...

----------------------------------------

TITLE: Configuring Assets Base Path in XML
DESCRIPTION: Example of how to configure a base path for assets in the framework configuration using XML format.

LANGUAGE: xml
CODE:
<!-- config/packages/framework.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:framework="http://symfony.com/schema/dic/symfony"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">

    <framework:config>
        <framework:assets base-path="/images"/>
    </framework:config>
</container>

----------------------------------------

TITLE: Implementing ISSN Constraint with PHP in Symfony Entity
DESCRIPTION: This snippet illustrates how to programmatically add the ISSN validation constraint to a property in a Symfony entity class using PHP.

LANGUAGE: php
CODE:
// src/Entity/Journal.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Journal
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('issn', new Assert\Issn());
    }
}

----------------------------------------

TITLE: File Validation with XML Configuration
DESCRIPTION: Example showing file validation configuration using XML format to validate PDF files under 1024k.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="bioFile">
            <constraint name="File">
                <option name="maxSize">1024k</option>
                <option name="extensions">
                    <value>pdf</value>
                </option>
                <option name="extensionsMessage">Please upload a valid PDF</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Setting Global jQuery Variables
DESCRIPTION: Shows how to manually set jQuery as a global variable for use in legacy code outside of Webpack.

LANGUAGE: javascript
CODE:
// app.js

// require jQuery normally
const $ = require('jquery');

// create global $ and jQuery variables
global.$ = global.jQuery = $;

----------------------------------------

TITLE: Cloning Symfony Repository and Adding Upstream Remote
DESCRIPTION: Instructions for forking the Symfony repository, cloning it locally, and adding the upstream remote.

LANGUAGE: bash
CODE:
$ git clone git@github.com:USERNAME/symfony.git
$ cd symfony
$ git remote add upstream https://github.com/symfony/symfony.git

----------------------------------------

TITLE: Configuring Monolog Handler with JsonFormatter in XML
DESCRIPTION: This snippet shows how to configure a Monolog handler to use the JsonFormatter in a Symfony XML configuration file.

LANGUAGE: xml
CODE:
<!-- config/packages/prod/monolog.xml (and/or config/packages/dev/monolog.xml) -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:monolog="http://symfony.com/schema/dic/monolog"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/monolog
        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd">

    <monolog:config>
        <monolog:handler
            name="file"
            type="stream"
            level="debug"
            formatter="monolog.formatter.json"
        />
    </monolog:config>
</container>

----------------------------------------

TITLE: Initializing Workflow Marking in PHP
DESCRIPTION: This code shows how to initialize the marking property of an object with the initial_marking from the workflow configuration.

LANGUAGE: php
CODE:
// ...
$blogPost = new BlogPost();

// initiate workflow
$workflow->getMarking($blogPost);

----------------------------------------

TITLE: Implementing LegacyBridge for Handling Legacy Requests
DESCRIPTION: PHP class that bridges between Symfony and the legacy application, mapping requests to legacy scripts and handling their execution.

LANGUAGE: php
CODE:
// src/LegacyBridge.php
namespace App;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class LegacyBridge
{
    public static function getLegacyScript(Request $request): string
    {
        $requestPathInfo = $request->getPathInfo();
        $legacyRoot = __DIR__ . '/../';

        if ($requestPathInfo == '/customer/') {
            return "{$legacyRoot}src/customers/list.php";
        }

        if ($requestPathInfo == 'inc/ajax_cust_details.php') {
            return "{$legacyRoot}inc/ajax_cust_details.php";
        }

        throw new \Exception("Unhandled legacy mapping for $requestPathInfo");
    }

    public static function handleRequest(Request $request, Response $response, string $publicDirectory): void
    {
        $legacyScriptFilename = LegacyBridge::getLegacyScript($request);

        $_SERVER['PHP_SELF'] = $request->getPathInfo();
        $_SERVER['SCRIPT_NAME'] = $request->getPathInfo();
        $_SERVER['SCRIPT_FILENAME'] = $legacyScriptFilename;

        require $legacyScriptFilename;
    }
}

----------------------------------------

TITLE: Setting Debug Mode in .env File (Bash)
DESCRIPTION: Shows how to enable or disable debug mode in Symfony using the .env file. The APP_DEBUG environment variable controls the debug mode, with 1 enabling it and 0 disabling it.

LANGUAGE: bash
CODE:
# .env
# set it to 1 to enable the debug mode
APP_DEBUG=0

----------------------------------------

TITLE: Defining NotBlank Validation using XML
DESCRIPTION: Example showing how to configure the NotBlank constraint using XML configuration in Symfony.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="firstName">
            <constraint name="NotBlank"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Defining a Schedule Provider in PHP
DESCRIPTION: Example of creating a ScheduleProvider class to configure message frequencies.

LANGUAGE: PHP
CODE:
// src/Scheduler/SaleTaskProvider.php
namespace App\Scheduler;

use Symfony\Component\Scheduler\Attribute\AsSchedule;
use Symfony\Component\Scheduler\Schedule;
use Symfony\Component\Scheduler\ScheduleProviderInterface;

#[AsSchedule]
class SaleTaskProvider implements ScheduleProviderInterface
{
    public function getSchedule(): Schedule
    {
        // ...
    }
}

----------------------------------------

TITLE: Configuring Contract Implementation in composer.json
DESCRIPTION: Example showing how to declare implementation of Symfony contracts in a package's composer.json file using the provide section. Shows specification of cache implementation version.

LANGUAGE: javascript
CODE:
{
    "...": "...",
    "provide": {
        "symfony/cache-implementation": "3.0"
    }
}

----------------------------------------

TITLE: Monolog Development Configuration Examples
DESCRIPTION: Configuration examples for development environment showing how to reference the ElasticsearchLogstashHandler in Monolog configuration.

LANGUAGE: yaml
CODE:
# config/packages/prod/monolog.yaml
monolog:
    handlers:
        es:
            type: service
            id: Symfony\Bridge\Monolog\Handler\ElasticsearchLogstashHandler

LANGUAGE: xml
CODE:
<!-- config/packages/prod/monolog.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:monolog="http://symfony.com/schema/dic/monolog"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/monolog
        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd">

    <monolog:config>
        <monolog:handler
            name="es"
            type="service"
            id="Symfony\Bridge\Monolog\Handler\ElasticsearchLogstashHandler"
        />
    </monolog:config>
</container>

LANGUAGE: php
CODE:
// config/packages/prod/monolog.php
use Symfony\Bridge\Monolog\Handler\ElasticsearchLogstashHandler;
use Symfony\Config\MonologConfig;

return static function (MonologConfig $monolog): void {
    $monolog->handler('es')
        ->type('service')
        ->id(ElasticsearchLogstashHandler::class)
    ;
};

----------------------------------------

TITLE: Configuring Encore Dev Server Options for Virtual Machines in JavaScript
DESCRIPTION: This snippet demonstrates how to configure the allowedHosts option in Encore's dev server to resolve the 'Invalid Host header' issue when accessing files from the dev server in a virtual machine.

LANGUAGE: javascript
CODE:
// webpack.config.js
// ...

Encore
    // ...

    .configureDevServerOptions(options => {
        options.allowedHosts = 'all';
    })

----------------------------------------

TITLE: Reading Object Properties with PropertyAccessor in PHP
DESCRIPTION: Illustrates how to read properties from objects using PropertyAccessor, including public properties, getters, and isser/hasser methods.

LANGUAGE: php
CODE:
class Person
{
    public $firstName = 'Wouter';
    private $lastName = 'de Jong';
    private $author = true;

    public function getLastName(): string
    {
        return $this->lastName;
    }

    public function isAuthor(): bool
    {
        return $this->author;
    }
}

$person = new Person();

var_dump($propertyAccessor->getValue($person, 'firstName')); // 'Wouter'
var_dump($propertyAccessor->getValue($person, 'lastName')); // 'de Jong'
var_dump($propertyAccessor->getValue($person, 'author')); // true

----------------------------------------

TITLE: Defining Collection Constraint with PHP Attributes
DESCRIPTION: Example of using the Collection constraint with PHP attributes to validate an array property containing email and bio fields.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\Collection(
        fields: [
            'personal_email' => new Assert\Email,
            'short_bio' => [
                new Assert\NotBlank,
                new Assert\Length(
                    max: 100,
                    maxMessage: 'Your short bio is too long!'
                )
            ]
        ],
        allowMissingFields: true,
    )]
    protected array $profileData = [
        'personal_email' => '...',
        'short_bio' => '...',
    ];
}

----------------------------------------

TITLE: Executing Console Command in Controller - PHP
DESCRIPTION: Shows how to execute a Symfony console command (debug:twig) from within a controller. Uses Application, ArrayInput and BufferedOutput classes to run the command and capture its output.

LANGUAGE: php
CODE:
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\BufferedOutput;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\KernelInterface;

class DebugTwigController extends AbstractController
{
    public function debugTwig(KernelInterface $kernel): Response
    {
        $application = new Application($kernel);
        $application->setAutoExit(false);

        $input = new ArrayInput([
            'command' => 'debug:twig',
            // (optional) define the value of command arguments
            'fooArgument' => 'barValue',
            // (optional) pass options to the command
            '--bar' => 'fooValue',
            // (optional) pass options without value
            '--baz' => true,
        ]);

        // You can use NullOutput() if you don't need the output
        $output = new BufferedOutput();
        $application->run($input, $output);

        // return the output, don't use if you used NullOutput()
        $content = $output->fetch();

        // return new Response(""), if you used NullOutput()
        return new Response($content);
    }

----------------------------------------

TITLE: XLIFF 2.0 Translation File with Notes Example in XML
DESCRIPTION: Demonstrates the structure of an XLIFF 2.0 document that includes translation notes, showing how to provide additional context for translators. The example includes source and target languages, translation units, and various note categories with priorities.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:2.1" version="2.1"
    srcLang="fr-FR" trgLang="en-US">
    <file id="messages.en_US">
        <unit id="LCa0a2j" name="original-content">
            <notes>
                <note category="state">new</note>
                <note category="approved">true</note>
                <note category="section" priority="1">user login</note>
            </notes>
            <segment state="translated" subState="Some custom value">
                <source>original-content</source>
                <target>translated-content</target>
            </segment>
        </unit>
    </file>
</xliff>

----------------------------------------

TITLE: Truncating Console Messages
DESCRIPTION: Examples of truncating messages to specific lengths with custom suffixes.

LANGUAGE: php
CODE:
$message = "This is a very long message, which should be truncated";
$truncatedMessage = $formatter->truncate($message, 7);
$output->writeln($truncatedMessage);

$truncatedMessage = $formatter->truncate($message, -5);

$truncatedMessage = $formatter->truncate($message, 7, '!!'); // result: This is!!
$truncatedMessage = $formatter->truncate($message, 7, '');   // result: This is

----------------------------------------

TITLE: Defining EnableAutoMapping Constraint in XML
DESCRIPTION: This snippet illustrates how to define the EnableAutoMapping constraint for a class using XML format in a Symfony validation configuration file.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\BookCollection">
        <constraint name="EnableAutoMapping"/>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: LessThanOrEqual XML Configuration
DESCRIPTION: Example of configuring LessThanOrEqual validation constraints using XML format in a separate validation configuration file.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Person">
        <property name="siblings">
            <constraint name="LessThanOrEqual">
                5
            </constraint>
        </property>
        <property name="age">
            <constraint name="LessThanOrEqual">
                <option name="value">80</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Configuring UUID Constraint in YAML
DESCRIPTION: Shows how to configure the UUID constraint for a property using YAML in Symfony's validation configuration.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\File:
    properties:
        identifier:
            - Uuid: ~

----------------------------------------

TITLE: YAML Literal Block Scalar
DESCRIPTION: Demonstrates the literal block scalar style using the pipe character for preserving newlines.

LANGUAGE: yaml
CODE:
|
  \/ /| |\/| |
  / / | |  | |__

----------------------------------------

TITLE: Adding Listener for ConsoleEvents::ERROR Event
DESCRIPTION: This code snippet shows how to add a listener for the ConsoleEvents::ERROR event. The listener can handle exceptions thrown during command execution and optionally modify the error or exit code.

LANGUAGE: php
CODE:
use Symfony\Component\Console\ConsoleEvents;
use Symfony\Component\Console\Event\ConsoleErrorEvent;

$dispatcher->addListener(ConsoleEvents::ERROR, function (ConsoleErrorEvent $event): void {
    $output = $event->getOutput();

    $command = $event->getCommand();

    $output->writeln(sprintf('Oops, exception thrown while running command <info>%s</info>', $command->getName()));

    // gets the current exit code (the exception code)
    $exitCode = $event->getExitCode();

    // changes the exception to another one
    $event->setError(new \LogicException('Caught exception', $exitCode, $event->getError()));
});

----------------------------------------

TITLE: Twig Setup for Mime Component
DESCRIPTION: Shows how to set up Twig integration with the Mime component including renderer configuration and template handling.

LANGUAGE: php
CODE:
use Symfony\Bridge\Twig\Mime\BodyRenderer;
use Twig\Environment;
use Twig\Loader\FilesystemLoader;

$loader = new FilesystemLoader(__DIR__.'/templates');
$twig = new Environment($loader);

$renderer = new BodyRenderer($twig);
$renderer->render($email);

----------------------------------------

TITLE: Expression Validation using XML Configuration
DESCRIPTION: Implementing expression validation using XML configuration file.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">
    <class name="App\Model\BlogPost">
        <constraint name="Expression">
            <option name="expression">
                this.getCategory() in ['php', 'symfony'] or !this.isTechnicalPost()
            </option>
            <option name="message">
                If this is a tech post, the category should be either php or symfony!
            </option>
        </constraint>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Using Multiple Builds in Twig Templates with Symfony Encore
DESCRIPTION: This Twig snippet shows how to use assets from multiple Webpack builds in Symfony templates.

LANGUAGE: twig
CODE:
{# Using the entrypoints.json file located in ./public/first_build #}
{{ encore_entry_script_tags('app', null, 'firstConfig') }}
{{ encore_entry_link_tags('global', null, 'firstConfig') }}

{# Using the entrypoints.json file located in ./public/second_build #}
{{ encore_entry_script_tags('mobile', null, 'secondConfig') }}
{{ encore_entry_link_tags('mobile', null, 'secondConfig') }}

----------------------------------------

TITLE: Implementing PHP Class Deprecation
DESCRIPTION: Example showing how to properly deprecate a PHP class in Symfony, including the required PHPDoc annotation and deprecation trigger.

LANGUAGE: php
CODE:
namespace Symfony\Component\Routing\Loader\DependencyInjection;

use Symfony\Component\Routing\Loader\ContainerLoader;

trigger_deprecation('symfony/routing', '4.4', 'The "%s" class is deprecated, use "%s" instead.', ServiceRouterLoader::class, ContainerLoader::class);

/**
 * @deprecated since Symfony 4.4, use Symfony\Component\Routing\Loader\ContainerLoader instead.
 */
class ServiceRouterLoader extends ObjectRouteLoader

----------------------------------------

TITLE: Installing Encore Dependencies for Symfony Applications
DESCRIPTION: Commands to install PHP and JavaScript dependencies for Encore in a Symfony project using Composer and npm.

LANGUAGE: shell
CODE:
$ composer require symfony/webpack-encore-bundle
$ npm install

----------------------------------------

TITLE: Configuring Custom Compound Constraint in YAML
DESCRIPTION: This snippet demonstrates how to apply the custom PasswordRequirements constraint using YAML configuration.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\User:
    properties:
        plainPassword:
            - App\Validator\Constraints\PasswordRequirements: ~

----------------------------------------

TITLE: Registering Transport Factory in YAML
DESCRIPTION: Configuration for registering the custom transport factory service in Symfony using YAML format.

LANGUAGE: yaml
CODE:
services:
    Your\Transport\YourTransportFactory:
        tags: [messenger.transport_factory]

----------------------------------------

TITLE: Custom Indicator Values Implementation
DESCRIPTION: Demonstrates how to create a progress indicator with custom indicator symbols instead of using the built-in ones.

LANGUAGE: php
CODE:
$progressIndicator = new ProgressIndicator($output, 'verbose', 100, ['⠏', '⠛', '⠹', '⢸', '⣰', '⣤', '⣆', '⡇']);

----------------------------------------

TITLE: Basic Emoji Transliteration in PHP
DESCRIPTION: Using EmojiTransliterator to convert emojis to text in different languages

LANGUAGE: php
CODE:
use Symfony\Component\Emoji\EmojiTransliterator;

// Describe emojis in English
$transliterator = EmojiTransliterator::create('en');
$transliterator->transliterate('Menus with 🍕 or 🍝');
// => 'Menus with pizza or spaghetti'

// Describe emojis in Ukrainian
$transliterator = EmojiTransliterator::create('uk');
$transliterator->transliterate('Menus with 🍕 or 🍝');
// => 'Menus with піца or спагеті'

----------------------------------------

TITLE: Defining ICU MessageFormat Translations in XML
DESCRIPTION: Example of defining translations using ICU MessageFormat syntax in an XML file. Demonstrates the same concepts as the YAML example but in XML format.

LANGUAGE: xml
CODE:
<!-- translations/messages+intl-icu.en.xlf -->
<?xml version="1.0" encoding="UTF-8" ?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">
    <file source-language="en" datatype="plaintext" original="file.ext">
        <body>
            <trans-unit id="say_hello">
                <source>say_hello</source>
                <target>Hello {name}!</target>
            </trans-unit>
            <trans-unit id="invitation_title">
                <source>invitation_title</source>
                <target>{organizer_gender, select,
                    female   {{organizer_name} has invited you to her party!}
                    male     {{organizer_name} has invited you to his party!}
                    multiple {{organizer_name} have invited you to their party!}
                    other    {{organizer_name} has invited you to their party!}
                }</target>
            </trans-unit>
            <trans-unit id="num_of_apples">
                <source>num_of_apples</source>
                <target>{apples, plural, =0 {There are no apples} =1 {There is one apple...} other {There are # apples!}}</target>
            </trans-unit>
        </body>
    </file>
</xliff>

----------------------------------------

TITLE: Expression Validation using YAML Configuration
DESCRIPTION: Implementing expression validation using YAML configuration file.

LANGUAGE: yaml
CODE:
App\Model\BlogPost:
    constraints:
        - Expression:
            expression: "this.getCategory() in ['php', 'symfony'] or !this.isTechnicalPost()"
            message: "If this is a tech post, the category should be either php or symfony!"

----------------------------------------

TITLE: Configuring Stimulus Controllers for Encore
DESCRIPTION: JSON configuration file (controllers.json) for Stimulus controllers used with Encore.

LANGUAGE: json
CODE:
{
    "controllers": [],
    "entrypoints": []
}

----------------------------------------

TITLE: Setting up Cascade Validation Using PHP
DESCRIPTION: Example demonstrating how to configure the Cascade constraint programmatically using PHP in a BookCollection entity class.

LANGUAGE: php
CODE:
// src/Entity/BookCollection.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class BookCollection
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addConstraint(new Assert\Cascade());
    }
}

----------------------------------------

TITLE: Validating Country Codes Using PHP Attributes
DESCRIPTION: Demonstrates how to apply the Country validation constraint using PHP attributes in a User entity class. Validates that a country property contains a valid ISO 3166-1 alpha-2 country code.

LANGUAGE: php
CODE:
// src/Entity/User.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class User
{
    #[Assert\Country]
    protected string $country;
}

----------------------------------------

TITLE: Updating Hosts File for Symfony Development
DESCRIPTION: This text snippet shows how to edit the hosts file on the local machine to map the Symfony project domain to the Homestead IP address. This allows accessing the Symfony application through a custom domain in the browser.

LANGUAGE: text
CODE:
# /etc/hosts (unix) or C:\Windows\System32\drivers\etc\hosts (Windows)
192.168.10.10 symfony-demo.test

----------------------------------------

TITLE: Initializing Symfony Console Application in PHP
DESCRIPTION: Basic setup code for creating a Symfony Console application entry point. This code initializes the Application class and includes autoloading.

LANGUAGE: php
CODE:
#!/usr/bin/env php
<?php
// application.php

require __DIR__.'/vendor/autoload.php';

use Symfony\Component\Console\Application;

$application = new Application();
// ...
$application->run();

----------------------------------------

TITLE: Configuring Week Constraint with YAML
DESCRIPTION: Shows how to apply the Week constraint using YAML configuration. It sets a minimum and maximum week range for the year 2022.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\OnlineCourse:
    properties:
        startWeek:
            - Week:
                min: '2022-W01'
                max: '2022-W20'

----------------------------------------

TITLE: Defining Custom HelloWorld Command in PHP for Symfony Console
DESCRIPTION: Creates a HelloWorldCommand class that extends Symfony's Command class. It sets up a command that outputs 'Hello World' when executed.

LANGUAGE: PHP
CODE:
namespace Acme\Console\Command;

use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

#[AsCommand(name: 'hello:world')]
class HelloWorldCommand extends Command
{
    protected function configure(): void
    {
        $this->setDescription('Outputs "Hello World"');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $output->writeln('Hello World');

        return Command::SUCCESS;
    }
}

----------------------------------------

TITLE: Formatting Console Section Output
DESCRIPTION: Demonstrates how to format a message within a section using the formatSection method.

LANGUAGE: php
CODE:
$formattedLine = $formatter->formatSection(
    'SomeSection',
    'Here is some message related to that section'
);
$output->writeln($formattedLine);

----------------------------------------

TITLE: Multiple Progress Bars Display
DESCRIPTION: Demonstrates how to display and manage multiple progress bars simultaneously using Console output sections.

LANGUAGE: php
CODE:
$section1 = $output->section();
$section2 = $output->section();

$progress1 = new ProgressBar($section1);
$progress2 = new ProgressBar($section2);

$progress1->start(100);
$progress2->start(100);

$i = 0;
while (++$i < 100) {
    $progress1->advance();

    if ($i % 2 === 0) {
        $progress2->advance(4);
    }

    usleep(50000);
}

----------------------------------------

TITLE: Configuring Isbn Constraint in YAML
DESCRIPTION: YAML configuration for the Isbn constraint on a Book entity's 'isbn' property. It specifies ISBN-10 type and a custom error message.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Book:
    properties:
        isbn:
            - Isbn:
                type: isbn10
                message: This value is not valid.

----------------------------------------

TITLE: Applying Blank Constraint in PHP
DESCRIPTION: This snippet demonstrates how to apply the Blank constraint to a property using PHP in a Symfony entity class by implementing the loadValidatorMetadata method.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('firstName', new Assert\Blank());
    }
}

----------------------------------------

TITLE: Secure Client IP Address Retrieval with Symfony
DESCRIPTION: Demonstration of using Symfony's Request::getClientIp() method for securely retrieving the client's IP address, including proxy handling.

LANGUAGE: PHP
CODE:
Request::setTrustedProxies(['10.0.0.1'], Request::HEADER_X_FORWARDED_FOR);

if ($myIp === $request->getClientIp()) {
    // the client is a known one, so give it some more privilege
}

----------------------------------------

TITLE: Defining Author Entity with Validation Constraint
DESCRIPTION: PHP class definition for an Author entity with a NotBlank constraint on the name property.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\NotBlank(message: 'author.name.not_blank')]
    public string $name;
}

----------------------------------------

TITLE: Calling Object Methods in PHP Expression Language
DESCRIPTION: Shows how to call methods on objects using dot notation in expressions.

LANGUAGE: PHP
CODE:
class Robot {
    public function sayHi(int $times): string {
        $greetings = [];
        for ($i = 0; $i < $times; $i++) {
            $greetings[] = 'Hi';
        }

        return implode(' ', $greetings).'!';
    }
}

$robot = new Robot();

var_dump($expressionLanguage->evaluate(
    'robot.sayHi(3)',
    [
        'robot' => $robot,
    ]
));

----------------------------------------

TITLE: Configuring Charset Constraint in YAML
DESCRIPTION: Example of how to configure the Charset constraint in a YAML validation file. This snippet shows how to validate that the 'content' property of the FileDTO class uses UTF-8 encoding.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\FileDTO:
    properties:
        content:
            - Charset: 'UTF-8'

----------------------------------------

TITLE: Configuring Debug Dump Destination in XML
DESCRIPTION: XML configuration for setting the dump_destination parameter in Symfony's debug configuration

LANGUAGE: xml
CODE:
<!-- config/packages/debug.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/debug"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:debug="http://symfony.com/schema/dic/debug"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/debug https://symfony.com/schema/dic/debug/debug-1.0.xsd">

    <debug:config dump-destination="php://stderr"/>
</container>

----------------------------------------

TITLE: Initializing BlogPost Class with Expression Validation
DESCRIPTION: Basic structure of a BlogPost class with category and isTechnicalPost properties.

LANGUAGE: php
CODE:
// src/Model/BlogPost.php
namespace App\Model;

use Symfony\Component\Validator\Constraints as Assert;

class BlogPost
{
    private string $category;

    private bool $isTechnicalPost;

    public function getCategory(): string
    {
        return $this->category;
    }

    public function setIsTechnicalPost(bool $isTechnicalPost): void
    {
        $this->isTechnicalPost = $isTechnicalPost;
    }
}

----------------------------------------

TITLE: YAML Nested Collections
DESCRIPTION: Demonstrates nested collections using proper indentation in YAML.

LANGUAGE: yaml
CODE:
'symfony 1.0':
  PHP:    5.0
  Propel: 1.2
'symfony 1.2':
  PHP:    5.2
  Propel: 1.3

----------------------------------------

TITLE: Applying Syntax Highlighting in reStructuredText
DESCRIPTION: Demonstrates how to use the code-block directive to apply syntax highlighting to a YAML code snippet in reStructuredText.

LANGUAGE: rst
CODE:
.. code-block:: yaml

    { foo: bar, bar: { foo: bar, bar: baz } }

----------------------------------------

TITLE: Configuring Encore Runtime Environment for IDE Integration
DESCRIPTION: This snippet shows how to configure the Encore runtime environment in webpack.config.js to enable better IDE integration.

LANGUAGE: javascript
CODE:
const Encore = require('@symfony/webpack-encore')

if (!Encore.isRuntimeEnvironmentConfigured()) {
    Encore.configureRuntimeEnvironment(process.env.NODE_ENV || 'dev');
}

// ... the rest of the Encore configuration

----------------------------------------

TITLE: Configuring CollectionType with EmailType Fields in PHP
DESCRIPTION: Example of setting up a CollectionType field for managing an array of email addresses using EmailType as the entry type.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
// ...

$builder->add('emails', CollectionType::class, [
    // each entry in the array will be an "email" field
    'entry_type' => EmailType::class,
    // these options are passed to each "email" type
    'entry_options' => [
        'attr' => ['class' => 'email-box'],
    ],
]);

----------------------------------------

TITLE: Starting Symfony Server in Background
DESCRIPTION: Commands to start the Symfony server in the background and view logs separately.

LANGUAGE: bash
CODE:
$ cd my-project/

# start the server in the background
$ symfony server:start -d

# continue working and running other commands...

# show the latest log messages
$ symfony server:log

----------------------------------------

TITLE: Setting Default Command in Symfony Console Application
DESCRIPTION: Demonstrates how to create a Symfony Console application, add a custom command, and set it as the default command. This allows the custom command to run when no specific command is provided.

LANGUAGE: PHP
CODE:
// application.php
use Acme\Console\Command\HelloWorldCommand;
use Symfony\Component\Console\Application;

$command = new HelloWorldCommand();
$application = new Application();
$application->add($command);
$application->setDefaultCommand($command->getName());
$application->run();

----------------------------------------

TITLE: Starting Symfony Local Web Server
DESCRIPTION: This bash command starts the local web server provided by Symfony. It's used to test and verify bug reproducers in a local development environment.

LANGUAGE: bash
CODE:
symfony server:start

----------------------------------------

TITLE: Registering Monolog Processor for Specific Handler
DESCRIPTION: Configuration for registering a Monolog processor for a specific handler.

LANGUAGE: yaml
CODE:
services:
    Monolog\Processor\IntrospectionProcessor:
        tags:
            - { name: monolog.processor, handler: firephp }

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="Monolog\Processor\IntrospectionProcessor">
            <tag name="monolog.processor" handler="firephp"/>
        </service>
    </services>
</container>

LANGUAGE: php
CODE:
use Monolog\Processor\IntrospectionProcessor;

$container
    ->register(IntrospectionProcessor::class)
    ->addTag('monolog.processor', ['handler' => 'firephp'])
;

----------------------------------------

TITLE: Implementing Full Form Type Extension
DESCRIPTION: Complete implementation of the ImageTypeExtension with configureOptions() and buildView() methods to handle image preview functionality.

LANGUAGE: php
CODE:
namespace App\Form\Extension;

use Symfony\Component\Form\AbstractTypeExtension;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\Form\FormView;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\PropertyAccess\PropertyAccess;

class ImageTypeExtension extends AbstractTypeExtension
{
    public static function getExtendedTypes(): iterable
    {
        return [FileType::class];
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefined(['image_property']);
    }

    public function buildView(FormView $view, FormInterface $form, array $options): void
    {
        if (isset($options['image_property'])) {
            $parentData = $form->getParent()->getData();

            $imageUrl = null;
            if (null !== $parentData) {
                $accessor = PropertyAccess::createPropertyAccessor();
                $imageUrl = $accessor->getValue($parentData, $options['image_property']);
            }

            $view->vars['image_url'] = $imageUrl;
        }
    }
}

----------------------------------------

TITLE: Webpack Encore YAML Configuration
DESCRIPTION: Configuration to disable defer attribute on script tags for proper jQuery initialization.

LANGUAGE: yaml
CODE:
# config/packages/webpack_encore.yaml
webpack_encore:
    # ...
    script_attributes:
        defer: false

----------------------------------------

TITLE: Applying Currency Constraint with PHP Attributes in Symfony
DESCRIPTION: Demonstrates how to apply the Currency constraint to a property using PHP attributes in a Symfony entity class.

LANGUAGE: php
CODE:
// src/Entity/Order.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Order
{
    #[Assert\Currency]
    protected string $currency;
}

----------------------------------------

TITLE: SSI Implementation in Controller with PHP Attributes
DESCRIPTION: Example of a Symfony controller implementing SSI with cache controls using PHP attributes.

LANGUAGE: php
CODE:
// src/Controller/ProfileController.php
namespace App\Controller;

use Symfony\Component\HttpKernel\Attribute\Cache;
// ...

class ProfileController extends AbstractController
{
    public function index(): Response
    {
        // by default, responses are private
        return $this->render('profile/index.html.twig');
    }

    #[Cache(smaxage: 600)]
    public function gdpr(): Response
    {
        return $this->render('profile/gdpr.html.twig');
    }
}

----------------------------------------

TITLE: Implementing PositiveOrZero Constraint with PHP Attributes
DESCRIPTION: Example showing how to apply the PositiveOrZero constraint using PHP attributes in a Person entity class. This ensures the siblings property is a positive number or zero.

LANGUAGE: php
CODE:
// src/Entity/Person.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Person
{
    #[Assert\PositiveOrZero]
    protected int $siblings;
}

----------------------------------------

TITLE: Output of Default HelloWorld Command in Symfony Console
DESCRIPTION: Displays the expected output when running the Symfony Console application with the HelloWorldCommand set as the default command.

LANGUAGE: text
CODE:
Hello World

----------------------------------------

TITLE: Initializing Formatter Helper in PHP
DESCRIPTION: Shows how to get the formatter helper instance from a Symfony console command.

LANGUAGE: php
CODE:
$formatter = $this->getHelper('formatter');

----------------------------------------

TITLE: Creating Anonymous Services in Symfony PHP
DESCRIPTION: Demonstrates how to create and inject an anonymous service using Symfony's PHP-based configuration.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\AnonymousBar;
use App\Foo;

return function(ContainerConfigurator $container): void {
    $services = $container->services();

    $services->set(Foo::class)
        ->args([inline_service(AnonymousBar::class)]);
};

----------------------------------------

TITLE: Configuring Advanced Handlebars Loader Options in Webpack Encore
DESCRIPTION: Shows how to configure handlebars-loader with advanced options including helper directories and partial directories for template processing.

LANGUAGE: javascript
CODE:
Encore
    // ...
    .addLoader({
        test: /\.handlebars$/,
        loader: 'handlebars-loader',
        options: {
            helperDirs: [
                __dirname + '/helpers1',
                __dirname + '/helpers2',
            ],
            partialDirs: [
                path.join(__dirname, 'templates', 'partials')
            ]
        }
    })
;

----------------------------------------

TITLE: Configuring Locale Constraint with YAML
DESCRIPTION: Shows how to configure the Locale constraint using YAML in a validation configuration file. The constraint is applied to the 'locale' property of the User entity with 'canonicalize' set to true.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\User:
    properties:
        locale:
            - Locale:
                canonicalize: true

----------------------------------------

TITLE: Configuring NotNull Constraint in YAML
DESCRIPTION: Demonstrates how to configure the NotNull constraint using YAML configuration in Symfony.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        firstName:
            - NotNull: ~

----------------------------------------

TITLE: Implementing Custom Cache Clearer
DESCRIPTION: Example of implementing a custom cache clearer service.

LANGUAGE: php
CODE:
// src/Cache/MyClearer.php
namespace App\Cache;

use Symfony\Component\HttpKernel\CacheClearer\CacheClearerInterface;

class MyClearer implements CacheClearerInterface
{
    public function clear(string $cacheDirectory): void
    {
        // clear your cache
    }
}

----------------------------------------

TITLE: Defining Category Entity Class in PHP
DESCRIPTION: Creates a Category class with a name property and NotBlank validation constraint.

LANGUAGE: php
CODE:
// src/Entity/Category.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Category
{
    #[Assert\NotBlank]
    public string $name;
}

----------------------------------------

TITLE: Encrypting Cache in Symfony YAML
DESCRIPTION: Shows how to configure cache encryption using libsodium in Symfony.

LANGUAGE: yaml
CODE:
# config/packages/cache.yaml

# ...
services:
    Symfony\Component\Cache\Marshaller\SodiumMarshaller:
        decorates: cache.default_marshaller
        arguments:
            - ['%env(base64:CACHE_DECRYPTION_KEY)%']
            # use multiple keys in order to rotate them
            #- ['%env(base64:CACHE_DECRYPTION_KEY)%', '%env(base64:OLD_CACHE_DECRYPTION_KEY)%']
            - '@.inner'

----------------------------------------

TITLE: Configuring ExpressionSyntax Constraint with XML
DESCRIPTION: Illustrates the configuration of the ExpressionSyntax constraint using XML in a validation configuration file. It shows how to apply the constraint to multiple properties with different options.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Order">
        <property name="promotion">
            <constraint name="ExpressionSyntax"/>
        </property>
        <property name="shippingOptions">
            <constraint name="ExpressionSyntax">
                <option name="allowedVariables">
                    <value>user</value>
                    <value>shipping_centers</value>
                </option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Configuring JSON Encoder Serialization
DESCRIPTION: Example showing how to use JSON encoder with custom encoding options through the serialization context.

LANGUAGE: PHP
CODE:
$this->serializer->serialize($data, 'json', [
    'json_encode_options' => \JSON_PRESERVE_ZERO_FRACTION,
]);

----------------------------------------

TITLE: Creating a Basic Goodbye Page in PHP with Symfony HttpFoundation
DESCRIPTION: This snippet shows how to create a simple 'Goodbye' page using Symfony's HttpFoundation component for request handling and response generation.

LANGUAGE: PHP
CODE:
// framework/bye.php
require_once __DIR__.'/vendor/autoload.php';

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

$request = Request::createFromGlobals();

$response = new Response('Goodbye!');
$response->send();

----------------------------------------

TITLE: Configuring webpack-dev-server options in Symfony Encore
DESCRIPTION: JavaScript code snippet showing how to configure webpack-dev-server options in the webpack.config.js file using Encore.configureDevServerOptions().

LANGUAGE: javascript
CODE:
// webpack.config.js
// ...

Encore
    // ...

    .configureDevServerOptions(options => {
        options.server = {
            type: 'https',
            options: {
                key: '/path/to/server.key',
                cert: '/path/to/server.crt',
            }
        }
    });

----------------------------------------

TITLE: Configuring URL Constraint with PHP
DESCRIPTION: Example of configuring the URL constraint using PHP in a Symfony entity class.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('bioUrl', new Assert\Url());
    }
}

----------------------------------------

TITLE: Configuring Asset Mapper for Symfony UX Bundle
DESCRIPTION: Sets up the bundle class to work with Symfony's Asset Mapper by adding asset paths and checking for Asset Mapper availability.

LANGUAGE: php
CODE:
namespace Acme\FeatureBundle;

use Symfony\Component\AssetMapper\AssetMapperInterface;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symfony\Component\HttpKernel\Bundle\AbstractBundle;

class AcmeFeatureBundle extends AbstractBundle
{
    public function prependExtension(ContainerConfigurator $configurator, ContainerBuilder $container): void
    {
        if (!$this->isAssetMapperAvailable($container)) {
            return;
        }

        $container->prependExtensionConfig('framework', [
            'asset_mapper' => [
                'paths' => [
                    __DIR__ . '/../assets/dist' => '@acme/feature-bundle',
                ],
            ],
        ]);
    }

    private function isAssetMapperAvailable(ContainerBuilder $container): bool
    {
        if (!interface_exists(AssetMapperInterface::class)) {
            return false;
        }

        // check that FrameworkBundle 6.3 or higher is installed
        $bundlesMetadata = $container->getParameter('kernel.bundles_metadata');
        if (!isset($bundlesMetadata['FrameworkBundle'])) {
            return false;
        }

        return is_file($bundlesMetadata['FrameworkBundle']['path'] . '/Resources/config/asset_mapper.php');
    }
}

----------------------------------------

TITLE: Implementing Resource-based Caching with ConfigCache in PHP
DESCRIPTION: This snippet demonstrates how to use Symfony's ConfigCache class to cache generated code based on configuration resources. It shows the process of checking cache freshness, loading resources, generating code, and writing to the cache with associated metadata.

LANGUAGE: php
CODE:
use Symfony\Component\Config\ConfigCache;
use Symfony\Component\Config\Resource\FileResource;

$cachePath = __DIR__.'/cache/appUserMatcher.php';

// the second argument indicates whether or not you want to use debug mode
$userMatcherCache = new ConfigCache($cachePath, true);

if (!$userMatcherCache->isFresh()) {
    // fill this with an array of 'users.yaml' file paths
    $yamlUserFiles = ...;

    $resources = [];

    foreach ($yamlUserFiles as $yamlUserFile) {
        // see the article "Loading resources" to
        // know where $delegatingLoader comes from
        $delegatingLoader->load($yamlUserFile);
        $resources[] = new FileResource($yamlUserFile);
    }

    // the code for the UserMatcher is generated elsewhere
    $code = ...;

    $userMatcherCache->write($code, $resources);
}

// you may want to require the cached code:
require $cachePath;

----------------------------------------

TITLE: Installing OptionsResolver Component with Composer
DESCRIPTION: Command to install the OptionsResolver component using Composer.

LANGUAGE: bash
CODE:
$ composer require symfony/options-resolver

----------------------------------------

TITLE: Creating CategoryType Form Class in PHP
DESCRIPTION: Defines a CategoryType form class extending AbstractType, with a 'name' field and data_class option set to Category.

LANGUAGE: php
CODE:
// src/Form/CategoryType.php
namespace App\Form;

use App\Entity\Category;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class CategoryType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder->add('name');
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Category::class,
        ]);
    }
}

----------------------------------------

TITLE: Displaying WebProfiler Configuration in Symfony CLI
DESCRIPTION: Commands to display default and actual configuration values for the web_profiler bundle using Symfony console commands. The first command shows default values while the second shows current application values.

LANGUAGE: terminal
CODE:
# displays the default config values defined by Symfony
$ php bin/console config:dump-reference web_profiler

# displays the actual config values used by your application
$ php bin/console debug:config web_profiler

----------------------------------------

TITLE: Adding Webpack IgnorePlugin for Moment.js Optimization
DESCRIPTION: Demonstrates how to add webpack's IgnorePlugin to optimize Moment.js by excluding unnecessary locale files from the build.

LANGUAGE: javascript
CODE:
var webpack = require('webpack');

Encore
    // ...
    .addPlugin(new webpack.IgnorePlugin({
        resourceRegExp: /^\./locale$/,
        contextRegExp: /moment$/,
    }))
;

----------------------------------------

TITLE: Pruning ChainAdapter with Compatible and Incompatible Adapters in PHP
DESCRIPTION: Shows how to create a ChainAdapter with both prunable and non-prunable adapters, and how to call the prune method. The prune call is delegated to compatible adapters while silently ignoring incompatible ones.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\ApcuAdapter;
use Symfony\Component\Cache\Adapter\ChainAdapter;
use Symfony\Component\Cache\Adapter\FilesystemAdapter;

$cache = new ChainAdapter([
    new ApcuAdapter(),        // does NOT implement PruneableInterface
    new FilesystemAdapter(),  // DOES implement PruneableInterface
]);

// prune will proxy the call to FilesystemAdapter while silently skip ApcuAdapter
$cache->prune();

----------------------------------------

TITLE: Applying Time Constraint Using PHP
DESCRIPTION: This snippet demonstrates how to apply the Time constraint to a property using PHP in a Symfony entity class by implementing the loadValidatorMetadata method.

LANGUAGE: php
CODE:
// src/Entity/Event.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Event
{
   /**
    * @var string A "H:i:s" formatted value
    */
    protected string $startsAt;

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('startsAt', new Assert\Time());
    }
}

----------------------------------------

TITLE: Configuring CSS Loader in Symfony Encore
DESCRIPTION: This JavaScript snippet demonstrates how to configure the CSS loader in Symfony Encore to ignore specific URLs during Webpack processing.

LANGUAGE: javascript
CODE:
// Configuring the CSS Loader in Webpack Encore
// Prevent Webpack from resolving certain URLs in CSS files
Encore.configureCssLoader((options) => {
    options.url = {
        filter: (url) => {
            // Ignore URLs beginning with /uploads/
            if (url.startsWith('/uploads/')) {
                return false;
            }

            return true; // Process other URLs as usual
        },
    };
});

----------------------------------------

TITLE: Installing Bootstrap Dependencies with NPM
DESCRIPTION: Command to install Bootstrap package using NPM package manager

LANGUAGE: terminal
CODE:
npm install bootstrap --save-dev

----------------------------------------

TITLE: Defining IBAN Validation using XML
DESCRIPTION: XML configuration for applying IBAN validation constraints to a Transaction entity.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Transaction">
        <property name="bankAccountNumber">
            <constraint name="Iban">
                <option name="message">
                    This is not a valid International Bank Account Number (IBAN).
                </option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Loading XML Configuration in Extension
DESCRIPTION: Implementation of the load() method to import XML service configuration files using XmlFileLoader.

LANGUAGE: php
CODE:
public function load(array $configs, ContainerBuilder $container): void
{
    $loader = new XmlFileLoader(
        $container,
        new FileLocator(__DIR__.'/../../config')
    );
    $loader->load('services.xml');
}

----------------------------------------

TITLE: Retrieving the DebugFormatterHelper in Symfony Console Commands
DESCRIPTION: Demonstrates how to obtain the DebugFormatterHelper instance from within a Symfony Console Command.

LANGUAGE: PHP
CODE:
$debugFormatter = $this->getHelper('debug_formatter');

----------------------------------------

TITLE: Configuring UrlType Field Default Protocol
DESCRIPTION: Configuration example showing the default_protocol option usage. This option determines how URL validation and protocol prepending behaves. When null, uses HTML5 URL input validation; otherwise prepends the specified protocol if missing.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\UrlType;

$builder->add('website', UrlType::class, [
    'default_protocol' => 'https',  // Will prepend 'https://' if protocol is missing
]);

----------------------------------------

TITLE: Setting Composer Root Version
DESCRIPTION: Command to specify Symfony version when updating dependencies by setting the COMPOSER_ROOT_VERSION environment variable.

LANGUAGE: terminal
CODE:
$ COMPOSER_ROOT_VERSION=7.2.x-dev composer update

----------------------------------------

TITLE: CurrencyType Default Configuration
DESCRIPTION: Demonstrates the default choices configuration for CurrencyType which uses Symfony's Currencies::getNames() method to populate currency options.

LANGUAGE: php
CODE:
"choices" => Symfony\Component\Intl\Currencies::getNames()

----------------------------------------

TITLE: Installing Mercure via Composer
DESCRIPTION: Command to install Mercure support in a Symfony project

LANGUAGE: terminal
CODE:
$ composer require mercure

----------------------------------------

TITLE: Configuring PHPUnit XML Settings
DESCRIPTION: PHPUnit configuration file that defines test suite settings, coverage reports, and autoloader bootstrap

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<phpunit
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://schema.phpunit.de/9.6/phpunit.xsd"
    backupGlobals="false"
    colors="true"
    bootstrap="vendor/autoload.php"
>
    <coverage processUncoveredFiles="true">
        <include>
            <directory suffix=".php">./src</directory>
        </include>
    </coverage>

    <testsuites>
        <testsuite name="Test Suite">
            <directory>./tests</directory>
        </testsuite>
    </testsuites>
</phpunit>

----------------------------------------

TITLE: Configuring ColorType Form with Custom Data Mapper
DESCRIPTION: Configures the ColorType form to use the custom data mapper and sets up form fields for red, green, and blue color components.

LANGUAGE: php
CODE:
// src/Form/Type/ColorType.php
namespace App\Form\Type;

// ...
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

final class ColorType extends AbstractType implements DataMapperInterface
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('red', IntegerType::class, [
                // enforce the strictness of the type to ensure the constructor
                // of the Color class doesn't break
                'empty_data' => '0',
            ])
            ->add('green', IntegerType::class, [
                'empty_data' => '0',
            ])
            ->add('blue', IntegerType::class, [
                'empty_data' => '0',
            ])
            // configure the data mapper for this FormType
            ->setDataMapper($this)
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        // when creating a new color, the initial data should be null
        $resolver->setDefault('empty_data', null);
    }

    // ...
}

----------------------------------------

TITLE: Configuring PropertyAccessor Features in PHP
DESCRIPTION: Demonstrates how to configure additional features of PropertyAccessor using PropertyAccessorBuilder.

LANGUAGE: php
CODE:
$propertyAccessor = PropertyAccess::createPropertyAccessorBuilder()
    ->enableMagicCall()
    ->enableMagicGet()
    ->enableMagicSet()
    ->getPropertyAccessor();

----------------------------------------

TITLE: Configuring Trusted Proxies in Symfony PHP
DESCRIPTION: PHP configuration for setting trusted proxy IPs and headers in Symfony framework configuration.

LANGUAGE: php
CODE:
return static function (FrameworkConfig $framework): void {
    $framework
        ->trustedProxies('192.0.0.1,10.0.0.0/8')
        ->trustedHeaders(['x-forwarded-for', 'x-forwarded-host', 'x-forwarded-proto', 'x-forwarded-port', 'x-forwarded-prefix']);
};

----------------------------------------

TITLE: Implementing DisableAutoMapping with PHP Class Metadata
DESCRIPTION: Example demonstrating how to disable auto-mapping using PHP class metadata through the loadValidatorMetadata method.

LANGUAGE: php
CODE:
// src/Entity/BookCollection.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class BookCollection
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addConstraint(new Assert\DisableAutoMapping());
    }
}

----------------------------------------

TITLE: Using UrlPackage for CDN Assets in PHP
DESCRIPTION: Shows how to use UrlPackage to generate absolute URLs for assets hosted on CDNs.

LANGUAGE: php
CODE:
use Symfony\Component\Asset\UrlPackage;

$urlPackage = new UrlPackage(
    'https://static.example.com/images/',
    new StaticVersionStrategy('v1')
);

echo $urlPackage->getUrl('/logo.png');
// result: https://static.example.com/images/logo.png?v1

----------------------------------------

TITLE: Implementing Basic Symfony Framework with HttpKernel
DESCRIPTION: Shows the basic framework class extending HttpKernel to handle HTTP requests.

LANGUAGE: PHP
CODE:
namespace Simplex;

use Symfony\Component\HttpKernel\HttpKernel;

class Framework extends HttpKernel
{
}

----------------------------------------

TITLE: Creating PostCSS Configuration
DESCRIPTION: Demonstrates the basic PostCSS configuration setup with autoprefixer plugin in postcss.config.js file.

LANGUAGE: javascript
CODE:
    module.exports = {
        plugins: {
            // include whatever plugins you want
            // but make sure you install these via npm!

            // add browserslist config to package.json (see below)
            autoprefixer: {}
        }
    }

----------------------------------------

TITLE: Workflow for Subsequent Contributions in Bash
DESCRIPTION: A series of Git commands outlining the workflow for making subsequent contributions to the Symfony documentation.

LANGUAGE: bash
CODE:
$ cd projects/symfony-docs/
$ git fetch upstream
$ git checkout -b my_changes upstream/6.4

# ... do your changes

# (optional) add your changes if this is a new content
$ git add xxx.rst

# commit your changes and push them to your fork
$ git commit xxx.rst
$ git push origin my_changes

# ... go to GitHub and create the Pull Request

# (optional) make the changes requested by reviewers and commit them
$ git commit xxx.rst
$ git push

----------------------------------------

TITLE: Configuring Bootstrap Styles in SCSS
DESCRIPTION: Example of importing and customizing Bootstrap styles in a global SCSS file, including variable customization

LANGUAGE: scss
CODE:
// assets/styles/global.scss

// customize some Bootstrap variables
$primary: darken(#428bca, 20%);

// the ~ allows you to reference things in node_modules
@import "~bootstrap/scss/bootstrap";

----------------------------------------

TITLE: Bundle Configuration in PHP
DESCRIPTION: Example of configuring bundle parameters in PHP format

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

return static function (ContainerConfigurator $container): void {
    $container->parameters()
        ->set('acme_blog.author.email', 'fabien@example.com')
    ;
};

----------------------------------------

TITLE: Configuring Serializer with Custom Name Converter in XML
DESCRIPTION: XML configuration to set the custom name converter for the Symfony serializer.

LANGUAGE: xml
CODE:
<!-- config/packages/serializer.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:framework="http://symfony.com/schema/dic/symfony"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">

    <framework:config>
        <!-- pass the service ID of your name converter -->
        <framework:serializer
            name-converter="App\Serializer\OrgPrefixNameConverter"
        />
    </framework:config>
</container>

----------------------------------------

TITLE: Implementing Media Form Type
DESCRIPTION: Creates a MediaType form class that uses the extended FileType with the new image_property option.

LANGUAGE: php
CODE:
namespace App\Form\Type;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;

class MediaType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('name', TextType::class)
            ->add('file', FileType::class, ['image_property' => 'webPath']);
    }
}

----------------------------------------

TITLE: Configuring Immutable Setter Calls in Symfony Services (YAML)
DESCRIPTION: This YAML configuration snippet shows how to configure the container to call the withLogger method on the MessageGenerator service, using the !returns_clone flag to indicate it's an immutable setter.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    App\Service\MessageGenerator:
        # ...
        calls:
            - withLogger: !returns_clone ['@logger']

----------------------------------------

TITLE: Referencing Copied Images in Twig Templates
DESCRIPTION: This snippet illustrates how to reference copied image files in Twig templates using the asset() function. It assumes the images have been copied to the public build directory using the copyFiles() method.

LANGUAGE: html+twig
CODE:
{# assets/images/logo.png was copied to public/build/images/logo.png #}
<img src="{{ asset('build/images/logo.png') }}" alt="ACME logo">

{# assets/images/subdir/logo.png was copied to public/build/images/subdir/logo.png #}
<img src="{{ asset('build/images/subdir/logo.png') }}" alt="ACME logo">

----------------------------------------

TITLE: Configuring DivisibleBy Constraint in YAML
DESCRIPTION: Example showing how to configure the DivisibleBy constraint using YAML format in the validation configuration file.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Item:
    properties:
        weight:
            - DivisibleBy: 0.25
        quantity:
            - DivisibleBy:
                value: 5

----------------------------------------

TITLE: Updating Symfony Dependencies in composer.json
DESCRIPTION: JSON diff showing how to update Symfony package versions in composer.json for a major version upgrade.

LANGUAGE: json
CODE:
{
    "...":"...",

    "require": {
-        "symfony/config": "6.4.*",
+        "symfony/config": "7.0.*",
-        "symfony/console": "6.4.*",
+        "symfony/console": "7.0.*",
         "...": "...",

         "...": "A few libraries starting with symfony/ follow their own
                 versioning scheme (e.g. symfony/polyfill-[...],
                 symfony/ux-[...], symfony/[...]-bundle).
                 You do not need to update these versions: you can
                 upgrade them independently whenever you want",
         "symfony/monolog-bundle": "^3.10"
    },
    "...": "..."
}

----------------------------------------

TITLE: YAML String with Escaped Characters
DESCRIPTION: Shows how to use double quotes to include escaped characters in YAML strings.

LANGUAGE: yaml
CODE:
"A double-quoted string in YAML\n"

----------------------------------------

TITLE: Configuring Pull Request State Machine in XML
DESCRIPTION: XML configuration for the same pull request state machine workflow, defining states and transitions with XML syntax.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:framework="http://symfony.com/schema/dic/symfony"
    xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">

    <framework:config>
        <framework:workflow name="pull_request" type="state_machine">
            <framework:initial-marking>start</framework:initial-marking>
            <framework:marking-store type="method" property="currentPlace"/>
            <framework:support>App\Entity\PullRequest</framework:support>
            <framework:place>start</framework:place>
            <framework:place>coding</framework:place>
            <framework:place>test</framework:place>
            <framework:place>review</framework:place>
            <framework:place>merged</framework:place>
            <framework:place>closed</framework:place>
            <!-- transitions configuration -->
        </framework:workflow>
    </framework:config>
</container>

----------------------------------------

TITLE: Configuring Rounding Mode for IntegerType in Symfony
DESCRIPTION: This snippet demonstrates how to set the rounding_mode option for the IntegerType field. It uses constants from the NumberFormatter class to specify different rounding behaviors for non-integer inputs.

LANGUAGE: php
CODE:
"rounding_mode" => \NumberFormatter::ROUND_DOWN

----------------------------------------

TITLE: Configuring Database Connection in YAML
DESCRIPTION: Example YAML configuration for database connections showing hierarchical structure and validation rules.

LANGUAGE: yaml
CODE:
database:
    auto_connect: true
    default_connection: mysql
    connections:
        mysql:
            host:     localhost
            driver:   mysql
            username: user
            password: pass
        sqlite:
            host:     localhost
            driver:   sqlite
            memory:   true
            username: user
            password: pass

----------------------------------------

TITLE: Running a Scheduler Worker with Symfony Console
DESCRIPTION: Command to run a Scheduler worker using the Symfony Console component.

LANGUAGE: Bash
CODE:
$ php bin/console messenger:consume scheduler_nameofyourschedule

# use -vv if you need details about what's happening
$ php bin/console messenger:consume scheduler_nameofyourschedule -vv

----------------------------------------

TITLE: Configuring Placeholder for DateTimeType (PHP)
DESCRIPTION: This example shows how to set placeholder values for the DateTimeType field. It demonstrates both a single placeholder for all select boxes and individual placeholders for each component.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;

$builder->add('startDateTime', DateTimeType::class, [
    'placeholder' => 'Select a value',
]);

$builder->add('startDateTime', DateTimeType::class, [
    'placeholder' => [
        'year' => 'Year', 'month' => 'Month', 'day' => 'Day',
        'hour' => 'Hour', 'minute' => 'Minute', 'second' => 'Second',
    ],
]);

----------------------------------------

TITLE: Configuring a Custom Value Resolver in Symfony PHP
DESCRIPTION: Example of configuring a custom value resolver service in Symfony using PHP.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\ValueResolver\BookingIdValueResolver;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator->services();

    $services->set(BookingIdValueResolver::class)
        ->tag('controller.argument_value_resolver', ['name' => 'booking_id', 'priority' => 150])
    ;
};

----------------------------------------

TITLE: Installing Panther Dependencies
DESCRIPTION: Command to install Symfony Panther and its dependencies using Composer.

LANGUAGE: bash
CODE:
$ composer require symfony/panther

----------------------------------------

TITLE: Configuring Babel Preset Env in JavaScript with Symfony Encore
DESCRIPTION: This snippet shows how to use the configureBabelPresetEnv() method to customize the @babel/preset-env configuration in a webpack.config.js file. It demonstrates setting useBuiltIns and corejs options.

LANGUAGE: javascript
CODE:
// webpack.config.js
// ...

Encore
    // ...

    .configureBabelPresetEnv((config) => {
        config.useBuiltIns = 'usage';
        config.corejs = 3;
    });

----------------------------------------

TITLE: Configuring Trusted Proxies in Symfony YAML
DESCRIPTION: YAML configuration for setting trusted proxy IPs and headers in Symfony framework configuration.

LANGUAGE: yaml
CODE:
framework:
    trusted_proxies: '192.0.0.1,10.0.0.0/8'
    trusted_headers: ['x-forwarded-for', 'x-forwarded-host', 'x-forwarded-proto', 'x-forwarded-port', 'x-forwarded-prefix']

----------------------------------------

TITLE: XML Configuration for CSS Color Validation
DESCRIPTION: XML-based configuration for CSS color validation in Symfony, showing constraint mapping for different color format validations.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Bulb">
        <property name="defaultColor">
            <constraint name="CssColor"/>
        </property>
        <property name="accentColor">
            <constraint name="CssColor">
                <option name="formats">hex_long</option>
                <option name="message">The accent color must be a 6-character hexadecimal color.</option>
            </constraint>
        </property>
        <property name="currentColor">
            <constraint name="CssColor">
                <option name="formats">
                    <value>basic_named_colors</value>
                    <value>extended_named_colors</value>
                </option>
                <option name="message">The color "{{ value }}" is not a valid CSS color name.</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Installing Symfony Asset Component via Composer
DESCRIPTION: Shows how to install the Symfony Asset component using Composer.

LANGUAGE: terminal
CODE:
$ composer require symfony/asset

----------------------------------------

TITLE: Configuring Advanced Cache Settings in PHP
DESCRIPTION: This snippet shows how to configure advanced cache settings using the setCache method of the Response class. It demonstrates setting various cache control directives.

LANGUAGE: php
CODE:
$response->setCache([
    'must_revalidate'  => false,
    'no_cache'         => false,
    'no_store'         => false,
    'no_transform'     => false,
    'public'           => true,
    'private'          => false,
    'proxy_revalidate' => false,
    'max_age'          => 600,
    's_maxage'         => 600,
    'immutable'        => true,
    'last_modified'    => new \DateTime(),
    'etag'             => 'abcdef'
]);

----------------------------------------

TITLE: XML Service Configuration
DESCRIPTION: XML configuration for registering the custom version strategy as a Symfony service.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd"
>
    <services>
        <service id="App\Asset\VersionStrategy\GulpBusterVersionStrategy">
            <argument>%kernel.project_dir%/busters.json</argument>
            <argument>%%s?version=%%s</argument>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Defining Currency Constraint in XML for Symfony Validation
DESCRIPTION: Illustrates the XML configuration for applying the Currency constraint to a property in Symfony's validation system.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Order">
        <property name="currency">
            <constraint name="Currency"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Installing Bootstrap JavaScript Dependencies
DESCRIPTION: Commands to install jQuery and Popper.js required for Bootstrap JavaScript functionality

LANGUAGE: terminal
CODE:
# (jQuery is only required in versions prior to Bootstrap 5)
$ npm install jquery @popperjs/core --save-dev

----------------------------------------

TITLE: Configuring Validation Groups in YAML
DESCRIPTION: YAML configuration for User entity validation constraints showing group assignments for email, password, and city fields.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\User:
    properties:
        email:
            - Email: { groups: [registration] }
        password:
            - NotBlank: { groups: [registration] }
            - Length: { min: 7, groups: [registration] }
        city:
            - Length:
                min: 2

----------------------------------------

TITLE: Adding Encore Scripts to package.json
DESCRIPTION: npm scripts added to package.json for running Encore commands.

LANGUAGE: json
CODE:
"scripts": {
    "dev-server": "encore dev-server",
    "dev": "encore dev",
    "watch": "encore dev --watch",
    "build": "encore production --progress"
}

----------------------------------------

TITLE: Basic Controller Permission Check in Symfony
DESCRIPTION: Shows how to check permissions in a controller using the denyAccessUnlessGranted() method.

LANGUAGE: php
CODE:
// src/Controller/PostController.php

// ...
use App\Security\PostVoter;

class PostController extends AbstractController
{
    #[Route('/posts/{id}', name: 'post_show')]
    public function show(Post $post): Response
    {
        // check for "view" access: calls all voters
        $this->denyAccessUnlessGranted(PostVoter::VIEW, $post);

        // ...
    }

    #[Route('/posts/{id}/edit', name: 'post_edit')]
    public function edit(Post $post): Response
    {
        // check for "edit" access: calls all voters
        $this->denyAccessUnlessGranted(PostVoter::EDIT, $post);

        // ...
    }
}

----------------------------------------

TITLE: Initializing Couchbase Collection Cache Adapter in PHP
DESCRIPTION: This snippet demonstrates how to create a new instance of the CouchbaseCollectionAdapter. It requires a Couchbase Collection instance, and optionally accepts a namespace and default cache lifetime.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\CouchbaseCollectionAdapter;

$cache = new CouchbaseCollectionAdapter(
    // the client object that sets options and adds the server instance(s)
    $client,

    // a string prefixed to the keys of the items stored in this cache
    $namespace,

    // the default lifetime (in seconds) for cache items that do not define their
    // own lifetime, with a value 0 causing items to be stored indefinitely
    $defaultLifetime
);

----------------------------------------

TITLE: Product Controller with Relationship Example
DESCRIPTION: Controller showing how to create and persist related Product and Category entities

LANGUAGE: php
CODE:
// src/Controller/ProductController.php
namespace App\Controller;

use App\Entity\Category;
use App\Entity\Product;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

class ProductController extends AbstractController
{
    #[Route('/product', name: 'product')]
    public function index(EntityManagerInterface $entityManager): Response
    {
        $category = new Category();
        $category->setName('Computer Peripherals');

        $product = new Product();
        $product->setName('Keyboard');
        $product->setPrice(19.99);
        $product->setDescription('Ergonomic and stylish!');

        // relates this product to the category
        $product->setCategory($category);

        $entityManager->persist($category);
        $entityManager->persist($product);
        $entityManager->flush();

        return new Response(
            'Saved new product with id: '.$product->getId()
            .' and new category with id: '.$category->getId()
        );
    }
}

----------------------------------------

TITLE: Configuring YAML Validation in YAML Format
DESCRIPTION: Example showing how to configure the YAML constraint using YAML configuration format for validating the customConfiguration property.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Report:
    properties:
        customConfiguration:
            - Yaml:
                message: Your configuration doesn't have valid YAML syntax.

----------------------------------------

TITLE: Configuring EqualTo Constraints in YAML for Symfony Validation
DESCRIPTION: Shows how to define EqualTo constraints in a YAML configuration file for Symfony's validation component. The constraints are applied to the firstName and age properties of a Person entity.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Person:
    properties:
        firstName:
            - EqualTo: Mary
        age:
            - EqualTo:
                value: 20

----------------------------------------

TITLE: Setting data-* attributes in Twig for JavaScript use
DESCRIPTION: This snippet shows how to set data-* attributes in a Twig template, including user authentication status and serialized user data. These attributes can later be read by JavaScript to access server-side information.

LANGUAGE: html+twig
CODE:
<div class="js-user-rating"
    data-is-authenticated="{{ app.user ? 'true' : 'false' }}"
    data-user="{{ app.user|serialize(format = 'json') }}"
>
    <!-- ... -->
</div>

----------------------------------------

TITLE: Adding Original Symfony Docs Repository as Remote in Bash
DESCRIPTION: Git command to add the original Symfony documentation repository as a remote. This allows you to fetch updates from the main repository.

LANGUAGE: bash
CODE:
$ cd symfony-docs/
$ git remote add upstream https://github.com/symfony/symfony-docs.git

----------------------------------------

TITLE: Configuring GreaterThan Constraints in YAML
DESCRIPTION: Shows how to define GreaterThan constraints using YAML configuration for a Person entity, validating that siblings is greater than 5 and age is greater than 18.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Person:
    properties:
        siblings:
            - GreaterThan: 5
        age:
            - GreaterThan:
                value: 18

----------------------------------------

TITLE: Translation Configuration in YAML
DESCRIPTION: Basic translation configuration including default locale and translation path

LANGUAGE: yaml
CODE:
# config/packages/translation.yaml
framework:
    default_locale: 'en'
    translator:
        default_path: '%kernel.project_dir%/translations'

----------------------------------------

TITLE: Setting Default and Custom Validation Groups
DESCRIPTION: Shows how to combine the Default validation group with custom validation groups to apply both grouped and ungrouped constraints.

LANGUAGE: php
CODE:
'validation_groups' => ['Default', 'registration']

----------------------------------------

TITLE: Passing Arguments to Factory Method in YAML
DESCRIPTION: This YAML configuration shows how to pass arguments to a factory method when creating a service.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    # ...

    App\Email\NewsletterManager:
        factory:   ['@App\Email\NewsletterManagerFactory', createNewsletterManager]
        arguments: ['@templating']

----------------------------------------

TITLE: Basic jQuery Import in Webpack
DESCRIPTION: Demonstrates the standard way to import jQuery in Webpack, which doesn't create global variables.

LANGUAGE: javascript
CODE:
// this loads jquery, but does *not* set a global $ or jQuery variable
const $ = require('jquery');

----------------------------------------

TITLE: Configuring RepeatedType Password Field in Symfony
DESCRIPTION: Example of creating a repeated password field with custom validation message, styling options and labels for both fields. The field will render two password inputs that must match.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\RepeatedType;
// ...

$builder->add('password', RepeatedType::class, [
    'type' => PasswordType::class,
    'invalid_message' => 'The password fields must match.',
    'options' => ['attr' => ['class' => 'password-field']],
    'required' => true,
    'first_options'  => ['label' => 'Password'],
    'second_options' => ['label' => 'Repeat Password'],
]);

----------------------------------------

TITLE: Creating Validators Translation Catalog in PHP
DESCRIPTION: PHP file for defining translations for validation messages.

LANGUAGE: php
CODE:
// translations/validators/validators.en.php
return [
    'author.name.not_blank' => 'Please enter an author name.',
];

----------------------------------------

TITLE: TimeType with Single Placeholder
DESCRIPTION: Shows how to add a placeholder value to all select boxes in a TimeType choice widget.

LANGUAGE: php
CODE:
$builder->add('startTime', TimeType::class, [
    'placeholder' => 'Select a value',
]);

----------------------------------------

TITLE: Configuring Login Link Authenticator in Symfony
DESCRIPTION: Configuration for the login link authenticator in the security.yaml file, specifying the check route and signature properties.

LANGUAGE: yaml
CODE:
security:
    firewalls:
        main:
            login_link:
                check_route: login_check
                signature_properties: ['id']

----------------------------------------

TITLE: Defining Choice Constraint with PHP Attributes
DESCRIPTION: Demonstrates how to use the Choice constraint with PHP attributes to validate property values against a set of predefined choices.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    public const GENRES = ['fiction', 'non-fiction'];

    #[Assert\Choice(['New York', 'Berlin', 'Tokyo'])]
    protected string $city;

    #[Assert\Choice(choices: Author::GENRES, message: 'Choose a valid genre.')]
    protected string $genre;
}

----------------------------------------

TITLE: Defining Choice Constraint in XML
DESCRIPTION: Illustrates how to set up the Choice constraint using XML format in a Symfony validation configuration file.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="city">
            <constraint name="Choice">
                <value>New York</value>
                <value>Berlin</value>
                <value>Tokyo</value>
            </constraint>
        </property>
        <property name="genre">
            <constraint name="Choice">
                <option name="choices">
                    <value>fiction</value>
                    <value>non-fiction</value>
                </option>
                <option name="message">Choose a valid genre.</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Creating Category Entity with Console Command
DESCRIPTION: Example of using make:entity command to create a new Category entity with a name field

LANGUAGE: bash
CODE:
$ php bin/console make:entity Category

New property name (press <return> to stop adding fields):
> name

Field type (enter ? to see all types) [string]:
> string

Field length [255]:
> 255

Can this field be null in the database (nullable) (yes/no) [no]:
> no

New property name (press <return> to stop adding fields):
>

----------------------------------------

TITLE: Implementing Edge Side Includes (ESI) in HTML
DESCRIPTION: This HTML snippet demonstrates the use of Edge Side Includes (ESI) for partial page caching. It shows how to include dynamic content using an ESI tag.

LANGUAGE: html
CODE:
This is the content of your page

Is 2012 a leap year? <esi:include src="/leapyear/2012"/>

Some other content

----------------------------------------

TITLE: Configuring Symfony Routes in PHP
DESCRIPTION: Defines routes using Symfony's RouteCollection and Route classes, specifying URL patterns and default values for route attributes.

LANGUAGE: PHP
CODE:
// example.com/src/app.php
use Symfony\Component\Routing;

$routes = new Routing\RouteCollection();
$routes->add('hello', new Routing\Route('/hello/{name}', ['name' => 'World']));
$routes->add('bye', new Routing\Route('/bye'));

return $routes;

----------------------------------------

TITLE: Custom Query Builder for EntityType Form Field
DESCRIPTION: Shows how to use the query_builder option to customize the query that fetches entities, including ordering results.

LANGUAGE: php
CODE:
use App\Entity\User;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
// ...

$builder->add('users', EntityType::class, [
    'class' => User::class,
    'query_builder' => function (EntityRepository $er): QueryBuilder {
        return $er->createQueryBuilder('u')
            ->orderBy('u.username', 'ASC');
    },
    'choice_label' => 'username',
]);

----------------------------------------

TITLE: Configuring Bootstrap Form Theme in PHP
DESCRIPTION: PHP configuration for applying Bootstrap 4 form theme globally in Symfony application.

LANGUAGE: php
CODE:
// config/packages/twig.php
use Symfony\Config\TwigConfig;

return static function (TwigConfig $twig): void {
    $twig->formThemes(['bootstrap_4_layout.html.twig']);

    // ...
};

----------------------------------------

TITLE: LDAP Form Login Authentication Configuration
DESCRIPTION: Firewall configuration for form-based LDAP authentication with DN string pattern.

LANGUAGE: yaml
CODE:
security:
    firewalls:
        main:
            form_login_ldap:
                service: Symfony\Component\Ldap\Ldap
                dn_string: 'uid={user_identifier},dc=example,dc=com'

----------------------------------------

TITLE: Installing Symfony Emoji Component
DESCRIPTION: Command to install the Symfony Emoji component via Composer

LANGUAGE: terminal
CODE:
$ composer require symfony/emoji

----------------------------------------

TITLE: Configuring Authentication Entry Point in Symfony (XML)
DESCRIPTION: This XML configuration sets up a firewall with multiple authentication methods (form login and custom authenticator) and specifies form_login as the entry point for unauthenticated users.

LANGUAGE: xml
CODE:
<!-- config/packages/security.xml -->
<?xml version="1.0" encoding="UTF-8"?>
<srv:container xmlns="http://symfony.com/schema/dic/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:srv="http://symfony.com/schema/dic/services"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/security
        https://symfony.com/schema/dic/security/security-1.0.xsd">

    <config>
        <!-- ... -->

        <!-- entry-point: configure the form authentication as the entry
                          point for unauthenticated users -->
        <firewall name="main"
            entry-point="form_login"
        >
            <!-- allow authentication using a form or a custom authenticator -->
            <form-login/>
            <custom-authenticator>App\Security\SocialConnectAuthenticator</custom-authenticator>
        </firewall>
    </config>
</srv:container>

----------------------------------------

TITLE: Generating URLs with Symfony Routing in PHP
DESCRIPTION: Demonstrates how to use Symfony's UrlGenerator to generate URLs based on route definitions, including absolute URL generation.

LANGUAGE: PHP
CODE:
use Symfony\Component\Routing;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;

$generator = new Routing\Generator\UrlGenerator($routes, $context);

echo $generator->generate('hello', ['name' => 'Fabien']);
// outputs /hello/Fabien

echo $generator->generate(
    'hello',
    ['name' => 'Fabien'],
    UrlGeneratorInterface::ABSOLUTE_URL
);
// outputs something like http://example.com/somewhere/hello/Fabien

----------------------------------------

TITLE: Defining PasswordStrength Constraint in XML
DESCRIPTION: Example of how to define the PasswordStrength constraint for a property using XML in a validation configuration file.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\User">
        <property name="rawPassword">
            <constraint name="PasswordStrength"></constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Demonstrating YAML String Formatting
DESCRIPTION: Shows different ways to format strings in YAML, including unquoted, single-quoted, and double-quoted strings.

LANGUAGE: yaml
CODE:
A string in YAML

'A single-quoted string in YAML'

"A double-quoted string in YAML"

----------------------------------------

TITLE: Configuring ExpressionSyntax Constraint with PHP Attributes
DESCRIPTION: Demonstrates how to use the ExpressionSyntax constraint with PHP attributes in an Order entity class. It shows two properties being constrained, with one using additional options.

LANGUAGE: php
CODE:
// src/Entity/Order.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Order
{
    #[Assert\ExpressionSyntax]
    protected string $promotion;

    #[Assert\ExpressionSyntax(
        allowedVariables: ['user', 'shipping_centers'],
    )]
    protected string $shippingOptions;
}

----------------------------------------

TITLE: Implementing DivisibleBy Constraint with PHP Metadata
DESCRIPTION: Example showing how to configure the DivisibleBy constraint using PHP code with ClassMetadata in an Item entity class.

LANGUAGE: php
CODE:
// src/Entity/Item.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Item
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('weight', new Assert\DivisibleBy(0.25));

        $metadata->addPropertyConstraint('quantity', new Assert\DivisibleBy(
            value: 5,
        ));
    }
}

----------------------------------------

TITLE: Implementing Mailer Webhook Consumer
DESCRIPTION: PHP class implementing a webhook consumer for handling mailer events from Mailgun.

LANGUAGE: php
CODE:
use Symfony\Component\RemoteEvent\Attribute\AsRemoteEventConsumer;
use Symfony\Component\RemoteEvent\Consumer\ConsumerInterface;
use Symfony\Component\RemoteEvent\Event\Mailer\MailerDeliveryEvent;
use Symfony\Component\RemoteEvent\Event\Mailer\MailerEngagementEvent;
use Symfony\Component\RemoteEvent\RemoteEvent;

#[AsRemoteEventConsumer('mailer_mailgun')]
class WebhookListener implements ConsumerInterface
{
    public function consume(RemoteEvent $event): void
    {
        if ($event instanceof MailerDeliveryEvent) {
            $this->handleMailDelivery($event);
        } elseif ($event instanceof MailerEngagementEvent) {
            $this->handleMailEngagement($event);
        } else {
            // This is not an email event
            return;
        }
    }

    private function handleMailDelivery(MailerDeliveryEvent $event): void
    {
        // Handle the mail delivery event
    }

    private function handleMailEngagement(MailerEngagementEvent $event): void
    {
        // Handle the mail engagement event
    }
}

----------------------------------------

TITLE: Configuring Week Constraint with XML
DESCRIPTION: Illustrates how to apply the Week constraint using XML configuration. It sets a minimum and maximum week range for the year 2022.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\OnlineCourse">
        <property name="startWeek">
            <constraint name="Week">
                <option name="min">2022-W01</option>
                <option name="max">2022-W20</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: UlidType Field Basic Configuration
DESCRIPTION: Shows the core configuration and metadata for the UlidType form field, including its rendering type, validation message, parent type and class.

LANGUAGE: rst
CODE:
+---------------------------+-----------------------------------------------------------------------+
| Rendered as               | ``input`` ``text`` field                                              |
+---------------------------+-----------------------------------------------------------------------+
| Default invalid message   | Please enter a valid ULID.                                            |
+---------------------------+-----------------------------------------------------------------------+
| Parent type               | :doc:`FormType </reference/forms/types/form>`                         |
+---------------------------+-----------------------------------------------------------------------+
| Class                     | :class:`Symfony\\Component\\Form\\Extension\\Core\\Type\\UlidType`    |
+---------------------------+-----------------------------------------------------------------------+

----------------------------------------

TITLE: Installing Twig for Error Rendering in Symfony
DESCRIPTION: Command to install TwigBundle and TwigBridge for custom error rendering in Symfony applications.

LANGUAGE: bash
CODE:
$ composer require symfony/twig-pack

----------------------------------------

TITLE: Twig Template for Email Content
DESCRIPTION: Example of a Twig template used for rendering email content

LANGUAGE: twig
CODE:
{# templates/emails/signup.html.twig #}
<h1>Welcome {{ email.toName }}!</h1>

<p>
    You signed up as {{ username }} the following email:
</p>
<p><code>{{ email.to[0].address }}</code></p>

<p>
    <a href="#">Activate your account</a>
    (this link is valid until {{ expiration_date|date('F jS') }})
</p>

----------------------------------------

TITLE: Cloning Forked Symfony Docs Repository in Bash
DESCRIPTION: Commands to clone the forked Symfony documentation repository to your local machine. This is part of the initial setup process for contributing.

LANGUAGE: bash
CODE:
$ cd projects/
$ git clone git@github.com:YOUR-GITHUB-USERNAME/symfony-docs.git

----------------------------------------

TITLE: Implementing Custom Validation Logic
DESCRIPTION: Example showing how to implement custom validation logic using the Callback constraint with field-specific error attribution.

LANGUAGE: php
CODE:
use Symfony\Component\Validator\Context\ExecutionContextInterface;

class Author
{
    private string $firstName;

    public function validate(ExecutionContextInterface $context, mixed $payload): void
    {
        // somehow you have an array of "fake names"
        $fakeNames = [/* ... */];

        // check if the name is actually a fake name
        if (in_array($this->getFirstName(), $fakeNames)) {
            $context->buildViolation('This name sounds totally fake!')
                ->atPath('firstName')
                ->addViolation();
        }
    }

----------------------------------------

TITLE: Configuring Traverse Constraint in PHP
DESCRIPTION: Shows how to configure the Traverse constraint for the BookCollection class using PHP in the entity class itself.

LANGUAGE: php
CODE:
// src/Entity/BookCollection.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class BookCollection
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addConstraint(new Assert\Traverse());
    }
}

----------------------------------------

TITLE: Configuring ESI Support in HttpCache
DESCRIPTION: This PHP code shows how to configure ESI support in the HttpCache class. It demonstrates creating an instance of the ESI class and passing it to HttpCache.

LANGUAGE: php
CODE:
$framework = new HttpKernel\HttpCache\HttpCache(
    $framework,
    new HttpKernel\HttpCache\Store(__DIR__.'/../cache'),
    new HttpKernel\HttpCache\Esi()
);

----------------------------------------

TITLE: Implementing Leap Year Checking Application in Symfony (PHP)
DESCRIPTION: This snippet demonstrates the implementation of a simple leap year checking application using the Symfony framework. It defines routes, a controller function, and the leap year checking logic.

LANGUAGE: PHP
CODE:
// example.com/src/app.php
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing;

function is_leap_year(?int $year = null): bool
{
    if (null === $year) {
        $year = (int)date('Y');
    }

    return 0 === $year % 400 || (0 === $year % 4 && 0 !== $year % 100);
}

$routes = new Routing\RouteCollection();
$routes->add('leap_year', new Routing\Route('/is_leap_year/{year}', [
    'year' => null,
    '_controller' => function (Request $request): Response {
        if (is_leap_year($request->attributes->get('year'))) {
            return new Response('Yep, this is a leap year!');
        }

        return new Response('Nope, this is not a leap year.');
    }
]));

return $routes;

----------------------------------------

TITLE: Setting Cookies in Response
DESCRIPTION: Shows how to set cookies in a Response object.

LANGUAGE: PHP
CODE:
use Symfony\Component\HttpFoundation\Cookie;

$response->headers->setCookie(Cookie::create('foo', 'bar'));

----------------------------------------

TITLE: Merging Form Fields with JSON Payload in Symfony
DESCRIPTION: Shows how to handle form submissions with JSON payload from frontend frameworks like React/Angular/Vue by merging the JSON data with request payload.

LANGUAGE: php
CODE:
public function new(Request $request): Response
{
    // ...

    if ($request->isMethod('POST')) {
        // '$json' represents payload data sent by React/Angular/Vue
        // the merge of parameters is needed to submit all form fields
        $form->submit(array_merge($json, $request->getPayload()->all()));

        // ...
    }

    // ...
}

----------------------------------------

TITLE: TimeType with Custom Placeholders
DESCRIPTION: Configures different placeholder values for hour, minute, and second fields in a TimeType choice widget.

LANGUAGE: php
CODE:
$builder->add('startTime', TimeType::class, [
    'placeholder' => [
        'hour' => 'Hour', 'minute' => 'Minute', 'second' => 'Second',
    ],
]);

----------------------------------------

TITLE: Rendering RepeatedType Fields in Twig - Individual
DESCRIPTION: Example of rendering the repeated fields separately to have more control over their placement in the template.

LANGUAGE: twig
CODE:
{# .first and .second may vary in your use - see the note below #}
{{ form_row(form.password.first) }}
{{ form_row(form.password.second) }}

----------------------------------------

TITLE: Configuring Route Parameters in Symfony
DESCRIPTION: Shows how to define a route with a variable part (slug) in the URL. The route matches URLs like /blog/my-first-post and passes the slug value to the controller.

LANGUAGE: php
CODE:
// src/Controller/BlogController.php
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

class BlogController extends AbstractController
{
    #[Route('/blog/{slug}', name: 'blog_show')]
    public function show(string $slug): Response
    {
        // $slug will equal the dynamic part of the URL
        // e.g. at /blog/yay-routing, then $slug='yay-routing'

        // ...
    }
}

----------------------------------------

TITLE: Running Complete Symfony Test Suite
DESCRIPTION: Command to execute the entire Symfony test suite from the project root directory using PHPUnit.

LANGUAGE: terminal
CODE:
$ php ./phpunit symfony

----------------------------------------

TITLE: Pruning Cache Items in PHP with Symfony Cache
DESCRIPTION: Demonstrates how to prune expired cache items using Symfony's PruneableInterface. It shows pruning with FilesystemAdapter and ChainAdapter, which delegates pruning to compatible adapters.

LANGUAGE: PHP
CODE:
use Symfony\Component\Cache\Adapter\FilesystemAdapter;

$cache = new FilesystemAdapter('app.cache');
// ... do some set and get operations
$cache->prune();

use Symfony\Component\Cache\Adapter\ApcuAdapter;
use Symfony\Component\Cache\Adapter\ChainAdapter;
use Symfony\Component\Cache\Adapter\FilesystemAdapter;
use Symfony\Component\Cache\Adapter\PdoAdapter;
use Symfony\Component\Cache\Adapter\PhpFilesAdapter;

$cache = new ChainAdapter([
    new ApcuAdapter(),       // does NOT implement PruneableInterface
    new FilesystemAdapter(), // DOES implement PruneableInterface
    new PdoAdapter(),        // DOES implement PruneableInterface
    new PhpFilesAdapter(),   // DOES implement PruneableInterface
    // ...
]);

// prune will proxy the call to PdoAdapter, FilesystemAdapter and PhpFilesAdapter,
// while silently skipping ApcuAdapter
$cache->prune();

----------------------------------------

TITLE: Configuring YAML Validation in XML Format
DESCRIPTION: Example showing how to configure the YAML constraint using XML configuration format for validating the customConfiguration property.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Report">
        <property name="customConfiguration">
            <constraint name="Yaml">
                <option name="message">Your configuration doesn't have valid YAML syntax.</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Project Directory Structure
DESCRIPTION: Basic directory structure for a multi-application Symfony project showing main directories and key files.

LANGUAGE: text
CODE:
your-project/
├─ apps/
│  └─ api/
│     ├─ config/
│     │  ├─ bundles.php
│     │  ├─ routes.yaml
│     │  └─ services.yaml
│     └─ src/
├─ bin/
│  └─ console
├─ config/
├─ public/
│  └─ index.php
├─ src/
│  └─ Kernel.php

----------------------------------------

TITLE: Example of Checking Out Specific Pull Request
DESCRIPTION: Concrete example of Git commands to fetch and checkout pull request #15723 for review.

LANGUAGE: bash
CODE:
$ git fetch origin pull/15723/head:pr15723
$ git checkout pr15723

----------------------------------------

TITLE: Defining IsNull Constraint in XML for Symfony Validation
DESCRIPTION: Illustrates the XML configuration for applying the IsNull constraint to a property in Symfony's validation system.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="firstName">
            <constraint name="IsNull"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Translation Message Configuration in YAML
DESCRIPTION: YAML configuration for defining a translation message with a placeholder for the reset button label.

LANGUAGE: yaml
CODE:
# translations/messages.en.yaml
form.order.reset: 'Reset an order to %company%'

----------------------------------------

TITLE: Basic TimeType Configuration with DateTime Input
DESCRIPTION: Configures a TimeType form field for a DateTime object using choice widget format with separate dropdowns for hour and minute selection.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\TimeType;
// ...

$builder->add('startTime', TimeType::class, [
    'input'  => 'datetime',
    'widget' => 'choice',
]);

----------------------------------------

TITLE: Defining Time Constraint Using PHP Attributes
DESCRIPTION: This snippet demonstrates how to apply the Time constraint to a property using PHP attributes in a Symfony entity class.

LANGUAGE: php
CODE:
// src/Entity/Event.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Event
{
    /**
     * @var string A "H:i:s" formatted value
     */
    #[Assert\Time]
    protected string $startsAt;
}

----------------------------------------

TITLE: Basic Mercure Publishing Controller
DESCRIPTION: Example of publishing updates to Mercure hub using a Symfony controller

LANGUAGE: php
CODE:
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Mercure\HubInterface;
use Symfony\Component\Mercure\Update;

class PublishController extends AbstractController
{
    public function publish(HubInterface $hub): Response
    {
        $update = new Update(
            'https://example.com/books/1',
            json_encode(['status' => 'OutOfStock'])
        );

        $hub->publish($update);

        return new Response('published!');
    }
}

----------------------------------------

TITLE: Creating Custom Password Strength Estimator
DESCRIPTION: Example of how to create a custom password strength estimation algorithm using a dedicated callable class.

LANGUAGE: php
CODE:
namespace App\Validator;

class CustomPasswordStrengthEstimator
{
    /**
     * @return PasswordStrength::STRENGTH_*
     */
    public function __invoke(string $password): int
    {
        // Your custom password strength estimation algorithm
    }
}

----------------------------------------

TITLE: Defining an Author Class with Token Validation in PHP
DESCRIPTION: This snippet demonstrates how to create an Author class with a method to validate a token. The isTokenValid method is used to check if the token is valid.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

class Author
{
    protected string $token;

    public function isTokenValid(): bool
    {
        return $this->token === $this->generateToken();
    }
}

----------------------------------------

TITLE: Reading data-* attributes in JavaScript from Twig-generated HTML
DESCRIPTION: This JavaScript code demonstrates how to read the data-* attributes set by Twig. It selects the element, retrieves the attribute values, and parses the JSON data. This allows client-side access to server-generated information.

LANGUAGE: javascript
CODE:
document.addEventListener('DOMContentLoaded', function() {
    const userRating = document.querySelector('.js-user-rating');
    const isAuthenticated = userRating.getAttribute('data-is-authenticated');
    const user = JSON.parse(userRating.getAttribute('data-user'));
});

----------------------------------------

TITLE: Installing PasswordHasher Component in Symfony
DESCRIPTION: Command to install the PasswordHasher component using Composer

LANGUAGE: terminal
CODE:
$ composer require symfony/password-hasher

----------------------------------------

TITLE: Checking Out Pull Request for Review in Git
DESCRIPTION: Git commands to fetch and checkout a pull request for local testing during the review process.

LANGUAGE: bash
CODE:
$ cd vendor/symfony/symfony
$ git fetch origin pull/<ID>/head:pr<ID>
$ git checkout pr<ID>

----------------------------------------

TITLE: Defining All Constraint in XML
DESCRIPTION: XML configuration for the All constraint, applying NotBlank and Length constraints to the favoriteColors property of the User entity.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\User">
        <property name="favoriteColors">
            <constraint name="All">
                <option name="constraints">
                    <constraint name="NotBlank"/>
                    <constraint name="Length">
                        <option name="min">5</option>
                    </constraint>
                </option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Finding Tagged Services in Symfony Container
DESCRIPTION: This command helps find services tagged with a specific tag in the Symfony container. It also supports partial tag search, displaying a list of matching tags to choose from.

LANGUAGE: terminal
CODE:
$ php bin/console debug:container --tag=kernel.event_listener

LANGUAGE: terminal
CODE:
$ php bin/console debug:container --tag=kernel

Select one of the following tags to display its information:
 [0] kernel.event_listener
 [1] kernel.event_subscriber
 [2] kernel.reset
 [3] kernel.cache_warmer
 [4] kernel.locale_aware
 [5] kernel.fragment_renderer
 [6] kernel.cache_clearer

----------------------------------------

TITLE: Enabling Debug Mode for HttpCache in PHP
DESCRIPTION: This snippet demonstrates how to enable debug mode for HttpCache. Debug mode adds an X-Symfony-Cache header to responses, which helps in understanding the caching behavior.

LANGUAGE: php
CODE:
$framework = new HttpKernel\HttpCache\HttpCache(
    $framework,
    new HttpKernel\HttpCache\Store(__DIR__.'/../cache'),
    new HttpKernel\HttpCache\Esi(),
    ['debug' => true]
);

----------------------------------------

TITLE: Exception Constructor Signature in PHP
DESCRIPTION: Shows the constructor signature of the Exception class in PHP, highlighting the ability to nest exceptions using the $previous parameter. This is crucial for creating layered exception handling in complex applications.

LANGUAGE: PHP
CODE:
public __construct ([ string $message = "" [, int $code = 0 [, Throwable $previous = NULL ]]] )

----------------------------------------

TITLE: Confirmation Question Implementation in Symfony
DESCRIPTION: Example of implementing a yes/no confirmation question in a Symfony Command with custom regex validation

LANGUAGE: php
CODE:
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ConfirmationQuestion;

class YourCommand extends Command
{
    public function execute(InputInterface $input, OutputInterface $output): int
    {
        $helper = $this->getHelper('question');
        $question = new ConfirmationQuestion('Continue with this action?', false);

        if (!$helper->ask($input, $output, $question)) {
            return Command::SUCCESS;
        }

        return Command::SUCCESS;
    }
}

----------------------------------------

TITLE: Overriding Templates Directory in PHP Configuration
DESCRIPTION: This PHP configuration demonstrates how to override the default templates directory using the defaultPath() method of the TwigConfig object.

LANGUAGE: php
CODE:
// config/packages/twig.php
use Symfony\Config\TwigConfig;

return static function (TwigConfig $twig): void {
    $twig->defaultPath('%kernel.project_dir%/resources/views');
};

----------------------------------------

TITLE: Configuring PasswordType with Hash Property Path in PHP
DESCRIPTION: Example of adding a PasswordType field to a form builder with hash_property_path option. This configuration hashes the password and stores it in the specified property of a PasswordAuthenticatedUserInterface object.

LANGUAGE: php
CODE:
$builder->add('plainPassword', PasswordType::class, [
    'hash_property_path' => 'password',
    'mapped' => false,
]);

----------------------------------------

TITLE: Running PHPUnit with Symfony Bridge
DESCRIPTION: Command to run PHPUnit tests using the Symfony bridge, which displays deprecation notices at the end of the test report.

LANGUAGE: shell
CODE:
$ ./bin/phpunit

----------------------------------------

TITLE: Starting Progress Bar at Specific Point
DESCRIPTION: Demonstrates how to initialize a progress bar starting at a specific completion point rather than zero.

LANGUAGE: php
CODE:
use Symfony\Component\Console\Helper\ProgressBar;

// creates a new progress bar (100 units)
$progressBar = new ProgressBar($output, 100);

// displays the progress bar starting at 25 completed units
$progressBar->start(null, 25);

----------------------------------------

TITLE: Creating New Symfony Project for Bug Reproduction
DESCRIPTION: This bash command creates a new Symfony skeleton project named 'bug_app' using Composer. It's the first step in setting up an environment to reproduce complex Symfony Framework bugs.

LANGUAGE: bash
CODE:
$ composer create-project symfony/skeleton bug_app

----------------------------------------

TITLE: Configuring NotIdenticalTo Constraints in YAML
DESCRIPTION: Shows how to define NotIdenticalTo constraints for a Person entity using YAML configuration. It applies constraints to the firstName and age properties.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Person:
    properties:
        firstName:
            - NotIdenticalTo: Mary
        age:
            - NotIdenticalTo:
                value: 15

----------------------------------------

TITLE: Configuring Count Constraint with XML in Symfony
DESCRIPTION: Illustrates how to use the Count constraint in an XML configuration file to validate that a property contains between 1 and 5 elements.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Participant">
        <property name="emails">
            <constraint name="Count">
                <option name="min">1</option>
                <option name="max">5</option>
                <option name="minMessage">You must specify at least one email</option>
                <option name="maxMessage">You cannot specify more than {{ limit }} emails</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Configuring IdenticalTo Constraint using PHP
DESCRIPTION: Shows how to configure the IdenticalTo constraint using PHP in a static method. It applies the constraint to the firstName and age properties of the Person class.

LANGUAGE: php
CODE:
// src/Entity/Person.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Person
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('firstName', new Assert\IdenticalTo('Mary'));

        $metadata->addPropertyConstraint('age', new Assert\IdenticalTo(
            value: 20,
        ));
    }
}

----------------------------------------

TITLE: Implementing Form Field with EnumType
DESCRIPTION: Shows how to add an EnumType field to a Symfony form builder using the TextAlign enum class.

LANGUAGE: PHP
CODE:
use App\Config\TextAlign;
use Symfony\Component\Form\Extension\Core\Type\EnumType;
// ...

$builder->add('alignment', EnumType::class, ['class' => TextAlign::class]);

----------------------------------------

TITLE: Defining Non-Shared Service using PHP Attributes
DESCRIPTION: Demonstrates how to mark a service as non-shared using PHP attributes in the service class definition. Uses the Autoconfigure attribute with shared parameter set to false.

LANGUAGE: php
CODE:
// src/SomeNonSharedService.php
namespace App;

use Symfony\Component\DependencyInjection\Attribute\Autoconfigure;

#[Autoconfigure(shared: false)]
class SomeNonSharedService
{
    // ...
}

----------------------------------------

TITLE: Using ICU MessageFormat Translations in PHP
DESCRIPTION: Examples of how to use the defined ICU MessageFormat translations in PHP code using the Symfony Translator component.

LANGUAGE: php
CODE:
// prints "Hello Fabien!"
echo $translator->trans('say_hello', ['name' => 'Fabien']);

// prints "Ryan has invited you to his party!"
echo $translator->trans('invitation_title', [
    'organizer_name' => 'Ryan',
    'organizer_gender' => 'male',
]);

// prints "There is one apple..."
echo $translator->trans('num_of_apples', ['apples' => 1]);

// prints "There are 23 apples!"
echo $translator->trans('num_of_apples', ['apples' => 23]);

----------------------------------------

TITLE: Configuring Service Closure in PHP
DESCRIPTION: PHP configuration for service closures showing how to set up closure-wrapped services using the ContainerConfigurator.

LANGUAGE: php
CODE:
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\Service\MyService;

return function (ContainerConfigurator $container): void {
    $services = $container->services();

    $services->set(MyService::class)
        ->args([service_closure('mailer')]);

    // In case the dependency is optional
    // $services->set(MyService::class)
    //     ->args([service_closure('mailer')->ignoreOnInvalid()]);
};

----------------------------------------

TITLE: Validating ULID with XML Configuration
DESCRIPTION: XML configuration for ULID validation in Symfony. Demonstrates how to set up the validation constraint using XML format.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\File">
        <property name="identifier">
            <constraint name="Ulid"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Starting Symfony Server in Foreground
DESCRIPTION: Command to start the Symfony server in the foreground, displaying logs directly in the console.

LANGUAGE: bash
CODE:
$ cd my-project/
$ symfony server:start

  [OK] Web server listening on http://127.0.0.1:....
  ...

# Now, browse the given URL, or run this command:
$ symfony open:local

----------------------------------------

TITLE: Creating Couchbase Connection with Single DSN in PHP
DESCRIPTION: Uses the createConnection method to establish a connection to a single Couchbase server using a DSN string. This method is part of the CouchbaseBucketAdapter class in Symfony's cache component.

LANGUAGE: PHP
CODE:
use Symfony\Component\Cache\Adapter\CouchbaseBucketAdapter;

// pass a single DSN string to register a single server with the client
$client = CouchbaseBucketAdapter::createConnection(
    'couchbase://localhost'
    // the DSN can include config options (pass them as a query string):
    // 'couchbase://localhost:11210?operationTimeout=10'
    // 'couchbase://localhost:11210?operationTimeout=10&configTimeout=20'
);

----------------------------------------

TITLE: Service Container Single File Configuration
DESCRIPTION: Configuration snippets to compile the service container into a single file for improved performance with PHP 7.4+ class preloading.

LANGUAGE: yaml
CODE:
# config/services.yaml
parameters:
    # ...
    .container.dumper.inline_factories: true

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">
    <parameters>
        <!-- ... -->
        <parameter key=".container.dumper.inline_factories">true</parameter>
    </parameters>
</container>

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

return function(ContainerConfigurator $container): void {
    $container->parameters()->set('.container.dumper.inline_factories', true);
};

----------------------------------------

TITLE: Comparing English Translations in XLIFF Format for Symfony Validators
DESCRIPTION: This snippet displays the English translation file (validators.en.xlf) in XLIFF format. It includes four translated messages, showing additional messages that are missing from the Swedish translation file.

LANGUAGE: xml
CODE:
<!-- src/Symfony/Component/Validator/Resources/translations/validators.en.xlf -->

<!-- ... -->
<trans-unit id="91">
    <source>This value should be either negative or zero.</source>
    <target>This value should be either negative or zero.</target>
</trans-unit>
<trans-unit id="92">
    <source>This value is not a valid timezone.</source>
    <target>This value is not a valid timezone.</target>
</trans-unit>
<trans-unit id="93">
    <source>This password has been leaked in a data breach, it must not be used. Please use another password.</source>
    <target>This password has been leaked in a data breach, it must not be used. Please use another password.</target>
</trans-unit>
<trans-unit id="94">
    <source>This value should be between {{ min }} and {{ max }}.</source>
    <target>This value should be between {{ min }} and {{ max }}.</target>
</trans-unit>

----------------------------------------

TITLE: Starting Local Web Server - Terminal Command
DESCRIPTION: Command to start the Symfony Local Web Server for testing the application

LANGUAGE: terminal
CODE:
$ symfony server:start

----------------------------------------

TITLE: Adding Status Update Comment for Bug Report Review
DESCRIPTION: Example of a comment to add when reviewing a bug report, including the status update for the Carson Bot.

LANGUAGE: markdown
CODE:
Thank you @weaverryan for creating this bug report! This indeed looks
like a bug. I reproduced the bug in the "kernel-bug" branch of
https://github.com/webmozart/some-project.

Status: Reviewed

----------------------------------------

TITLE: Configuring Composer Scripts for Requirements Checker
DESCRIPTION: JSON configuration to include the requirements checker in Composer's auto-scripts section.

LANGUAGE: json
CODE:
{
    "...": "...",

    "scripts": {
        "auto-scripts": {
            "vendor/bin/requirements-checker": "php-script",
            "...": "..."
        },

        "...": "..."
    }
}

----------------------------------------

TITLE: Configuring Secrets in Symfony XML
DESCRIPTION: XML configuration options for the secrets system in Symfony, including vault directory and decryption environment variable.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:framework="http://symfony.com/schema/dic/framework"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/framework https://symfony.com/schema/dic/framework/framework-1.0.xsd"
>
    <framework:config secret="%env(APP_SECRET)%">
        <framework:secrets
            vault_directory="%kernel.project_dir%/config/secrets/%kernel.environment%"
            local_dotenv_file="%kernel.project_dir%/.env.%kernel.environment%.local"
            decryption_env_var="base64:default::SYMFONY_DECRYPTION_SECRET"
        />
    </framework:config>
</container>

----------------------------------------

TITLE: HTML5 Color Input Format Validation Regex
DESCRIPTION: Regular expression pattern used to validate HTML5 color format strings. Validates 7-character hexadecimal color codes starting with #.

LANGUAGE: regex
CODE:
/^#[0-9a-f]{6}$/i

----------------------------------------

TITLE: Configuring Memcached Connection Options in PHP
DESCRIPTION: Demonstrates how to set configuration options when creating a Memcached connection using an associative array.

LANGUAGE: PHP
CODE:
use Symfony\Component\Cache\Adapter\MemcachedAdapter;

$client = MemcachedAdapter::createConnection(
    // a DSN string or an array of DSN strings
    [],

    // associative array of configuration options
    [
        'libketama_compatible' => true,
        'serializer' => 'igbinary',
    ]
);

----------------------------------------

TITLE: Creating a Custom Problem Normalizer in Symfony
DESCRIPTION: PHP class implementing a custom normalizer for FlattenException to customize non-HTML error output in Symfony.

LANGUAGE: php
CODE:
# src/Serializer/MyCustomProblemNormalizer.php
namespace App\Serializer;

use Symfony\Component\ErrorHandler\Exception\FlattenException;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class MyCustomProblemNormalizer implements NormalizerInterface
{
    public function normalize($exception, ?string $format = null, array $context = []): array
    {
        return [
            'content' => 'This is my custom problem normalizer.',
            'exception'=> [
                'message' => $exception->getMessage(),
                'code' => $exception->getStatusCode(),
            ],
        ];
    }

    public function supportsNormalization($data, ?string $format = null, array $context = []): bool
    {
        return $data instanceof FlattenException;
    }
}

----------------------------------------

TITLE: Examining Swedish Translations in XLIFF Format for Symfony Validators
DESCRIPTION: This snippet shows an example of a Swedish translation file (validators.sv.xlf) in XLIFF format. It demonstrates how translations are structured and includes two translated messages.

LANGUAGE: xml
CODE:
<!-- src/Symfony/Component/Validator/Resources/translations/validators.sv.xlf -->

<!-- ... -->
<trans-unit id="91">
    <source>This value should be either negative or zero.</source>
    <target>Detta värde bör vara antingen negativt eller noll.</target>
</trans-unit>
<trans-unit id="92">
    <source>This value is not a valid timezone.</source>
    <target>Detta värde är inte en giltig tidszon.</target>
</trans-unit>

----------------------------------------

TITLE: Applying UUID Constraint using PHP
DESCRIPTION: Demonstrates how to programmatically apply the UUID constraint to a property using PHP in a Symfony entity class.

LANGUAGE: php
CODE:
// src/Entity/File.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class File
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('identifier', new Assert\Uuid());
    }
}

----------------------------------------

TITLE: Extension Class Implementation
DESCRIPTION: Implementation of Extension class showing how to properly configure and inject the debug parameter.

LANGUAGE: php
CODE:
namespace App\DependencyInjection;

use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\HttpKernel\DependencyInjection\Extension;

class AppExtension extends Extension
{
    // ...

    public function getConfiguration(array $config, ContainerBuilder $container): Configuration
    {
        return new Configuration($container->getParameter('kernel.debug'));
    }
}

----------------------------------------

TITLE: Controller Event Handler - PHP
DESCRIPTION: Example of handling kernel.controller event to modify or replace the controller

LANGUAGE: PHP
CODE:
use Symfony\Component\HttpKernel\Event\ControllerEvent;

public function onKernelController(ControllerEvent $event): void
{
    // ...

    // the controller can be changed to any PHP callable
    $event->setController($myCustomController);
}

----------------------------------------

TITLE: Configuring RangeType Field in Symfony Form
DESCRIPTION: Demonstrates how to add a range type field to a Symfony form builder with min and max attributes. The range slider will allow values between 5 and 50.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\RangeType;
// ...

$builder->add('name', RangeType::class, [
    'attr' => [
        'min' => 5,
        'max' => 50
    ],
]);

----------------------------------------

TITLE: Configuring BirthdayType with Multiple Placeholders
DESCRIPTION: Example of adding a BirthdayType field with separate placeholder values for year, month, and day select boxes.

LANGUAGE: php
CODE:
$builder->add('birthdate', BirthdayType::class, [
    'placeholder' => [
        'year' => 'Year', 'month' => 'Month', 'day' => 'Day',
    ],
]);

----------------------------------------

TITLE: Configuring BirthdayType with Single Placeholder
DESCRIPTION: Example of adding a BirthdayType field with a single placeholder value that applies to all select boxes.

LANGUAGE: php
CODE:
$builder->add('birthdate', BirthdayType::class, [
    'placeholder' => 'Select a value',
]);

----------------------------------------

TITLE: Storing larger data structures in Twig data attributes
DESCRIPTION: This example demonstrates how to store larger data structures, such as a user profile array, in a data-* attribute. It uses Twig's json_encode filter and the html_attr escaping strategy to safely embed the data in the HTML attribute.

LANGUAGE: html+twig
CODE:
<div data-user-profile="{{ app.user ? app.user.profileData|json_encode|e('html_attr') }}">
    <!-- ... -->
</div>

----------------------------------------

TITLE: Ensuring Consistent Caching Behavior in Varnish 3
DESCRIPTION: This configuration for Varnish 3 ensures proper handling of Cache-Control headers for no-cache, no-store, and private directives.

LANGUAGE: varnish3
CODE:
sub vcl_fetch {
    // By default, Varnish3 ignores Cache-Control: no-cache and private
    // https://www.varnish-cache.org/docs/3.0/tutorial/increasing_your_hitrate.html#cache-control
    if (beresp.http.Cache-Control ~ "private" ||
        beresp.http.Cache-Control ~ "no-cache" ||
        beresp.http.Cache-Control ~ "no-store"
    ) {
        return (hit_for_pass);
    }
}

----------------------------------------

TITLE: Registering Custom Cache Warmer Service
DESCRIPTION: Configuration for registering a custom cache warmer service with the kernel.cache_warmer tag.

LANGUAGE: yaml
CODE:
services:
    App\Cache\MyCustomWarmer:
        tags:
            - { name: kernel.cache_warmer, priority: 0 }

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Cache\MyCustomWarmer">
            <tag name="kernel.cache_warmer" priority="0"/>
        </service>
    </services>
</container>

LANGUAGE: php
CODE:
use App\Cache\MyCustomWarmer;

$container
    ->register(MyCustomWarmer::class)
    ->addTag('kernel.cache_warmer', ['priority' => 0])
;

----------------------------------------

TITLE: Deprecating Options
DESCRIPTION: Shows how to mark options as deprecated and provide custom deprecation messages.

LANGUAGE: PHP
CODE:
$resolver
    ->setDefined(['hostname', 'host'])
    ->setDeprecated(
        'hostname',
        'acme/package',
        '1.2',
        'The option "%name%" is deprecated, use "host" instead.'
    );

----------------------------------------

TITLE: Generating Fragment URI
DESCRIPTION: Generates a URI for a fragment. Supports configuration of absolute paths and signing.

LANGUAGE: twig
CODE:
{{ fragment_uri(controller, absolute = false, strict = true, sign = true) }}

----------------------------------------

TITLE: Implementing Gulp-Buster Asset Manifest Structure
DESCRIPTION: JSON structure showing the mapping between asset files and their content hashes as used by gulp-buster.

LANGUAGE: json
CODE:
{
    "js/script.js": "f9c7afd05729f10f55b689f36bb20172",
    "css/style.css": "91cd067f79a5839536b46c494c4272d8"
}

----------------------------------------

TITLE: Implementing Symfony Front Controller with Legacy Bridge
DESCRIPTION: PHP script for the Symfony front controller that handles all requests and falls back to the legacy application when needed. It makes the Symfony kernel globally accessible.

LANGUAGE: php
CODE:
// public/index.php
use App\Kernel;
use App\LegacyBridge;
use Symfony\Component\Dotenv\Dotenv;
use Symfony\Component\ErrorHandler\Debug;
use Symfony\Component\HttpFoundation\Request;

require dirname(__DIR__).'/vendor/autoload.php';

(new Dotenv())->bootEnv(dirname(__DIR__).'/.env');

global $kernel;

if ($_SERVER['APP_DEBUG']) {
    umask(0000);
    Debug::enable();
}

if ($trustedProxies = $_SERVER['TRUSTED_PROXIES'] ?? $_ENV['TRUSTED_PROXIES'] ?? false) {
    Request::setTrustedProxies(
      explode(',', $trustedProxies),
      Request::HEADER_X_FORWARDED_FOR | Request::HEADER_X_FORWARDED_PORT | Request::HEADER_X_FORWARDED_PROTO
    );
}

if ($trustedHosts = $_SERVER['TRUSTED_HOSTS'] ?? $_ENV['TRUSTED_HOSTS'] ?? false) {
    Request::setTrustedHosts([$trustedHosts]);
}

$kernel = new Kernel($_SERVER['APP_ENV'], (bool) $_SERVER['APP_DEBUG']);
$request = Request::createFromGlobals();
$response = $kernel->handle($request);

if (false === $response->isNotFound()) {
    $response->send();
} else {
    LegacyBridge::handleRequest($request, $response, __DIR__);
}

$kernel->terminate($request, $response);

----------------------------------------

TITLE: Travis CI Configuration for Multi-version Testing
DESCRIPTION: YAML configuration for Travis CI to test bundle compatibility across multiple PHP and Symfony versions.

LANGUAGE: yaml
CODE:
language: php
php:
    - 5.3
    - 5.6
    - 7.0

matrix:
    include:
        - php: 5.3.3
          env: COMPOSER_FLAGS='--prefer-lowest --prefer-stable' SYMFONY_DEPRECATIONS_HELPER=max[total]=999999
        - php: 5.6
          env: SYMFONY_VERSION='2.7.*'
        - php: 5.6
          env: SYMFONY_VERSION='2.8.*'
        - php: 5.6
          env: SYMFONY_VERSION='3.0.*'
        - php: 5.6
          env: SYMFONY_VERSION='3.1.*'
        - php: 5.6
          env: DEPENDENCIES='dev' SYMFONY_VERSION='3.2.*@dev'

before_install:
    - composer self-update
    - if [ "$DEPENDENCIES" == "dev" ]; then perl -pi -e 's/^}$/,"minimum-stability":"dev"}/' composer.json; fi;
    - if [ "$SYMFONY_VERSION" != "" ]; then composer --no-update require symfony/symfony:${SYMFONY_VERSION}; fi;

install: composer update $COMPOSER_FLAGS

script: phpunit

----------------------------------------

TITLE: Including Constraints Map in RST Documentation
DESCRIPTION: RST directive to include a file containing the mapping of all available validation constraints in Symfony.

LANGUAGE: rst
CODE:
.. include:: /reference/constraints/map.rst.inc

----------------------------------------

TITLE: Configuring Homestead for Symfony Application Site
DESCRIPTION: This YAML snippet demonstrates how to set up a Symfony application in the Homestead configuration. It maps a domain to the Symfony project's public directory and specifies the Symfony version for nginx configuration.

LANGUAGE: yaml
CODE:
# ...
sites:
    - map: symfony-demo.test
      to: /home/vagrant/projects/symfony_demo/public
      type: symfony4

----------------------------------------

TITLE: Installing the UID Component via Composer
DESCRIPTION: Command to install the Symfony UID component using Composer.

LANGUAGE: shell
CODE:
$ composer require symfony/uid

----------------------------------------

TITLE: Adding Status Update Comment for Pull Request Review
DESCRIPTION: Example of a comment to add when reviewing a pull request that needs additional work, including the status update for the Carson Bot.

LANGUAGE: markdown
CODE:
Thank you @weaverryan for working on this! It seems that your test
cases don't cover the cases when the counter is zero or smaller.
Could you please add some tests for that?

Status: Needs Work

----------------------------------------

TITLE: Configuring X.509 Authentication
DESCRIPTION: Example of configuring X.509 certificate-based authentication.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
security:
    # ...
    firewalls:
        main:
            # ...
            x509:
                provider: your_user_provider
                user: SSL_CLIENT_S_DN_Email
                credentials: SSL_CLIENT_S_DN
                user_identifier: emailAddress

----------------------------------------

TITLE: Customizing Path Parameters in XML
DESCRIPTION: Defines custom request parameter names for success and failure redirect paths in XML configuration.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<srv:container xmlns="http://symfony.com/schema/dic/security">
    <config>
        <firewall name="main">
            <form-login target-path-parameter="go_to"/>
            <form-login failure-path-parameter="back_to"/>
        </firewall>
    </config>
</srv:container>

----------------------------------------

TITLE: Configuring Profiler for Tests in XML
DESCRIPTION: This XML configuration enables the Profiler but disables data collection by default for test environments.

LANGUAGE: xml
CODE:
<!-- config/packages/test/web_profiler.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:framework="http://symfony.com/schema/dic/symfony"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd
                http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">

    <!-- ... -->

    <framework:config>
        <framework:profiler enabled="true" collect="false"/>
    </framework:config>
</container>

----------------------------------------

TITLE: Configuring BIC Validation in YAML
DESCRIPTION: YAML configuration example for BIC validation on a Transaction entity's businessIdentifierCode property.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Transaction:
    properties:
        businessIdentifierCode:
            - Bic: ~

----------------------------------------

TITLE: Chaining Option Configurations
DESCRIPTION: Demonstrates how to use method chaining to configure multiple aspects of an option.

LANGUAGE: PHP
CODE:
public function configureOptions(OptionsResolver $resolver): void
{
    $resolver->define('host')
        ->required()
        ->default('smtp.example.org')
        ->allowedTypes('string')
        ->info('The IP address or hostname');

    $resolver->define('transport')
        ->required()
        ->default('transport')
        ->allowedValues('sendmail', 'mail', 'smtp');
}

----------------------------------------

TITLE: Setting Custom Date Label in DateTimeType (PHP)
DESCRIPTION: This snippet demonstrates how to set a custom label for the date widget in a DateTimeType field. It uses the 'date_label' option to specify the label text.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;

$builder->add('startDateTime', DateTimeType::class, [
    'date_label' => 'Starts On',
]);

----------------------------------------

TITLE: Creating a Custom Route Loader in PHP
DESCRIPTION: Example of creating a custom route loader in Symfony by extending the Loader class. This loader supports a custom 'extra' type and creates a new route.

LANGUAGE: php
CODE:
// src/Routing/ExtraLoader.php
namespace App\Routing;

use Symfony\Component\Config\Loader\Loader;
use Symfony\Component\Routing\Route;
use Symfony\Component\Routing\RouteCollection;

class ExtraLoader extends Loader
{
    private bool $isLoaded = false;

    public function load($resource, ?string $type = null): RouteCollection
    {
        if (true === $this->isLoaded) {
            throw new \RuntimeException('Do not add the "extra" loader twice');
        }

        $routes = new RouteCollection();

        $path = '/extra/{parameter}';
        $defaults = [
            '_controller' => 'App\Controller\ExtraController::extra',
        ];
        $requirements = [
            'parameter' => '\d+',
        ];
        $route = new Route($path, $defaults, $requirements);

        $routeName = 'extraRoute';
        $routes->add($routeName, $route);

        $this->isLoaded = true;

        return $routes;
    }

    public function supports($resource, ?string $type = null): bool
    {
        return 'extra' === $type;
    }
}

----------------------------------------

TITLE: Configuring Regex Constraint with XML
DESCRIPTION: Example of using the Regex constraint in XML configuration to validate that a description field begins with a word character.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="description">
            <constraint name="Regex">
                <option name="pattern">/^\w+/</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Caching Expressions with Custom Cache Adapter in PHP
DESCRIPTION: Demonstrates how to use a custom cache adapter for caching parsed expressions.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\RedisAdapter;
use Symfony\Component\ExpressionLanguage\ExpressionLanguage;

$cache = new RedisAdapter(...);
$expressionLanguage = new ExpressionLanguage($cache);

----------------------------------------

TITLE: Basic Twig Template
DESCRIPTION: Simple Twig template showing variable output and template inheritance.

LANGUAGE: twig
CODE:
{# templates/default/index.html.twig #}
{% extends 'base.html.twig' %}

{% block body %}
    <h1>Hello {{ name }}</h1>
{% endblock %}

----------------------------------------

TITLE: Registering Locale-Aware Service
DESCRIPTION: Configuration for registering a locale-aware service with the kernel.locale_aware tag.

LANGUAGE: yaml
CODE:
services:
    App\Locale\MyCustomLocaleHandler:
        tags: [kernel.locale_aware]

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Locale\MyCustomLocaleHandler">
            <tag name="kernel.locale_aware"/>
        </service>
    </services>
</container>

LANGUAGE: php
CODE:
use App\Locale\MyCustomLocaleHandler;

$container
    ->register(LocaleHandler::class)
    ->addTag('kernel.locale_aware')
;

----------------------------------------

TITLE: Creating GitHub Recipe Index JSON
DESCRIPTION: Shows the structure of the index.json file for GitHub-hosted Symfony Flex recipes, including recipe entries and repository links.

LANGUAGE: json
CODE:
{
    "recipes": {
        "acme/private-bundle": [
            "1.0"
        ]
    },
    "branch": "main",
    "is_contrib": true,
    "_links": {
        "repository": "github.com/your-github-account-name/your-recipes-repository",
        "origin_template": "{package}:{version}@github.com/your-github-account-name/your-recipes-repository:main",
        "recipe_template": "https://api.github.com/repos/your-github-account-name/your-recipes-repository/contents/{package_dotted}.{version}.json"
    }
}

----------------------------------------

TITLE: Rendering ESI Content with render_esi Function
DESCRIPTION: Generates an ESI tag when ESI support is enabled, otherwise falls back to regular render behavior. Used for edge-side includes.

LANGUAGE: twig
CODE:
{{ render_esi(uri, options = []) }}

----------------------------------------

TITLE: Registering Type Guesser in XML Configuration
DESCRIPTION: Service configuration in XML format to register the custom type guesser with the form.type_guesser tag.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Form\TypeGuesser\PhpDocTypeGuesser">
            <tag name="form.type_guesser"/>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Updating Symfony Version in composer.json Extra Block
DESCRIPTION: Shows how to update the symfony.require version constraint in the composer.json extra block when upgrading from 6.3 to 6.4.

LANGUAGE: diff
CODE:
      "extra": {
          "symfony": {
              "...": "...",
    -         "require": "6.3.*"
    +         "require": "6.4.*"
          }
      }

----------------------------------------

TITLE: Overriding Debug Mode for Commands (Bash)
DESCRIPTION: Demonstrates how to override the debug mode setting for specific console commands by setting the APP_DEBUG environment variable before running the command.

LANGUAGE: bash
CODE:
# Use the debug mode defined in the .env file
$ php bin/console command_name

# Ignore the .env file and enable the debug mode for this command
$ APP_DEBUG=1 php bin/console command_name

----------------------------------------

TITLE: Scheduling Periodic Tasks with AsPeriodicTask Attribute
DESCRIPTION: Example of using the AsPeriodicTask attribute to schedule periodic tasks in PHP.

LANGUAGE: PHP
CODE:
// src/Scheduler/Task/SendDailySalesReports.php
namespace App\Scheduler\Task;

use Symfony\Component\Scheduler\Attribute\AsPeriodicTask;

#[AsPeriodicTask(frequency: '1 day', from: '2022-01-01', until: '2023-06-12')]
class SendDailySalesReports
{
    public function __invoke()
    {
        // ...
    }
}

----------------------------------------

TITLE: Configuring Regex Constraint with PHP
DESCRIPTION: Example of using the Regex constraint in PHP code to validate that a description field begins with a word character.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('description', new Assert\Regex(
            pattern: '/^\w+/',
        ));
    }
}

----------------------------------------

TITLE: Setting Git Merge Configuration
DESCRIPTION: Command to configure Git to provide merge statistics during version branch synchronization (upmerging).

LANGUAGE: shell
CODE:
git config merge.stat true

----------------------------------------

TITLE: Configuring Built-in Route Loaders in XML
DESCRIPTION: Example of configuring various built-in route loaders in Symfony using XML format. It demonstrates loading routes from files, directories, and PHP attributes.

LANGUAGE: xml
CODE:
<!-- config/routes.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<routes xmlns="http://symfony.com/schema/routing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/routing
        https://symfony.com/schema/routing/routing-1.0.xsd">

    <import resource="@AcmeBundle/Resources/config/routing.yaml"/>

    <import type="attribute">
        <resource path="../src/Controller/" namespace="App\Controller"/>
    </import>

    <import resource="../src/Controller/" type="attribute"/>

    <import resource="App\Controller\MyController" type="attribute"/>

    <import resource="../legacy/routing/" type="directory"/>

    <import resource="@AcmeOtherBundle/Resources/config/routing/" type="directory"/>
</routes>

----------------------------------------

TITLE: Implementing Tag Entity in PHP
DESCRIPTION: Defines a simple Tag entity class with name property and corresponding getter/setter methods

LANGUAGE: PHP
CODE:
// src/Entity/Tag.php
namespace App\Entity;

class Tag
{
    private string $name;

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }
}

----------------------------------------

TITLE: Defining Table of Contents in reStructuredText for Symfony Community Documentation
DESCRIPTION: This code snippet defines a table of contents using reStructuredText syntax. It specifies a maximum depth of 2 and lists several community-related topics as separate pages.

LANGUAGE: reStructuredText
CODE:
.. toctree::
    :maxdepth: 2

    releases
    review-comments
    reviews
    mentoring
    speaker-mentoring

----------------------------------------

TITLE: Configuring CSS Color Validation in YAML
DESCRIPTION: YAML configuration for CSS color validation showing how to validate different color formats and customize validation messages.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Bulb:
    properties:
        defaultColor:
            - CssColor: ~
        accentColor:
            - CssColor:
                formats: !php/const Symfony\Component\Validator\Constraints\CssColor::HEX_LONG
                message: The accent color must be a 6-character hexadecimal color.
        currentColor:
            - CssColor:
                formats:
                    - !php/const Symfony\Component\Validator\Constraints\CssColor::BASIC_NAMED_COLORS
                    - !php/const Symfony\Component\Validator\Constraints\CssColor::EXTENDED_NAMED_COLORS
                message: The color "{{ value }}" is not a valid CSS color name.

----------------------------------------

TITLE: Listing Git Remotes in Bash
DESCRIPTION: Command to list the Git remotes for the Symfony docs project, showing both the forked and original repositories.

LANGUAGE: bash
CODE:
$ git remote -v
origin  git@github.com:YOUR-GITHUB-USERNAME/symfony-docs.git (fetch)
origin  git@github.com:YOUR-GITHUB-USERNAME/symfony-docs.git (push)
upstream  https://github.com/symfony/symfony-docs.git (fetch)
upstream  https://github.com/symfony/symfony-docs.git (push)

----------------------------------------

TITLE: Setting Vary Header using Text Configuration
DESCRIPTION: Example of setting the Vary response header directly in HTTP header format to specify that response should vary based on Accept-Encoding and User-Agent headers.

LANGUAGE: text
CODE:
Vary: Accept-Encoding, User-Agent

----------------------------------------

TITLE: DateType Configuration with Custom Input Type
DESCRIPTION: Configuration for DateType field with non-DateTime input type using datetime_immutable format.

LANGUAGE: php
CODE:
$builder->add('publishedAt', DateType::class, [
    'widget' => 'choice',
    'input'  => 'datetime_immutable'
]);

----------------------------------------

TITLE: Implementing Custom Cache Warmer
DESCRIPTION: Example of implementing a custom cache warmer service.

LANGUAGE: php
CODE:
// src/Cache/MyCustomWarmer.php
namespace App\Cache;

use App\Foo\Bar;
use Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerInterface;

class MyCustomWarmer implements CacheWarmerInterface
{
    public function warmUp(string $cacheDir, ?string $buildDir = null): array
    {
        // ... do some sort of operations to "warm" your cache

        $filesAndClassesToPreload = [];
        $filesAndClassesToPreload[] = Bar::class;

        foreach (scandir($someCacheDir) as $file) {
            if (!is_dir($file = $someCacheDir.'/'.$file)) {
                $filesAndClassesToPreload[] = $file;
            }
        }

        return $filesAndClassesToPreload;
    }

    public function isOptional(): bool
    {
        return true;
    }
}

----------------------------------------

TITLE: Using State Machine in Service Class
DESCRIPTION: Example of how to inject and use a state machine workflow in a Symfony service class using dependency injection and the WorkflowInterface.

LANGUAGE: php
CODE:
use App\Entity\PullRequest;
use Symfony\Component\Workflow\WorkflowInterface;

class SomeService
{
    public function __construct(
        private WorkflowInterface $pullRequestStateMachine,
    ) {
    }

    public function someMethod(PullRequest $pullRequest): void
    {
        $this->pullRequestStateMachine->apply($pullRequest, 'wait_for_review', [
            'log_comment' => 'My logging comment for the wait for review transition.',
        ]);
    }
}

----------------------------------------

TITLE: Registering Console Commands in PHP
DESCRIPTION: Example of registering a command class in a Symfony Console application.

LANGUAGE: php
CODE:
// ...
$application->add(new GenerateAdminCommand());

----------------------------------------

TITLE: Installing Symfony Scheduler with Composer
DESCRIPTION: Command to install the Symfony Scheduler component using Composer in a Symfony Flex application.

LANGUAGE: Bash
CODE:
$ composer require symfony/scheduler

----------------------------------------

TITLE: Dump Server Configuration
DESCRIPTION: YAML configuration for configuring the dump server destination in a Symfony application.

LANGUAGE: YAML
CODE:
# config/packages/debug.yaml
debug:
   dump_destination: "tcp://%env(VAR_DUMPER_SERVER)%"

----------------------------------------

TITLE: Referencing Secrets in Symfony PHP Configuration
DESCRIPTION: Example of referencing a secret (DATABASE_PASSWORD) in a PHP configuration file for Doctrine DBAL.

LANGUAGE: php
CODE:
use Symfony\Config\DoctrineConfig;

return static function (DoctrineConfig $doctrine): void {
    $doctrine->dbal()
        ->connection('default')
            ->password(env('DATABASE_PASSWORD'))
    ;
};

----------------------------------------

TITLE: Implementing DateTime Validation with PHP Code
DESCRIPTION: Example showing how to implement DateTime validation using PHP code and the loadValidatorMetadata method. Demonstrates programmatic configuration of the validation constraint.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
   /**
    * @var string A "Y-m-d H:i:s" formatted value
    */
    protected string $createdAt;

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('createdAt', new Assert\DateTime());
    }
}

----------------------------------------

TITLE: Custom File Widget Template
DESCRIPTION: Twig template extension to customize the file widget rendering by adding image preview functionality.

LANGUAGE: twig
CODE:
{% extends 'form_div_layout.html.twig' %}

{% block file_widget %}
    {{ block('form_widget') }}
    {% if image_url is defined and image_url is not null %}
        <img src="{{ asset(image_url) }}"/>
    {% endif %}
{% endblock %}

----------------------------------------

TITLE: Creating Service Aliases in Symfony YAML
DESCRIPTION: Shows how to create a service alias in Symfony's YAML configuration, including a shortcut syntax.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    # ...
    App\Mail\PhpMailer:
        public: false

    app.mailer:
        alias: App\Mail\PhpMailer
        public: true

    # Shortcut syntax
    app.mailer: '@App\Mail\PhpMailer'

----------------------------------------

TITLE: Environment Configuration
DESCRIPTION: Default application ID configuration in .env file for identifying specific applications.

LANGUAGE: bash
CODE:
# .env
APP_ID=api

----------------------------------------

TITLE: Customizing CSRF Token Field in Symfony Forms (XML)
DESCRIPTION: Demonstrates how to customize the CSRF token field name globally for all forms using XML configuration.

LANGUAGE: xml
CODE:
<!-- config/packages/framework.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:framework="http://symfony.com/schema/dic/symfony"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/symfony
        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">

    <framework:config>
        <framework:form>
            <framework:csrf-protection enabled="true" field-name="custom_token_name"/>
        </framework:form>
    </framework:config>
</container>

----------------------------------------

TITLE: Committing Changes to Symfony Docs in Bash
DESCRIPTION: Git commands to add and commit changes made to the Symfony documentation files.

LANGUAGE: bash
CODE:
$ git add setup.rst
$ git commit setup.rst

----------------------------------------

TITLE: Configuring Interface Proxying for Lazy Services in YAML
DESCRIPTION: Demonstrates how to configure interface proxying for lazy services using YAML in Symfony. This technique allows for lazy loading of services with final classes or when only specific interfaces should be exposed.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    App\Twig\AppExtension:
        lazy: 'Twig\Extension\ExtensionInterface'
        # or a complete definition:
        lazy: true
        tags:
            - { name: 'proxy', interface: 'Twig\Extension\ExtensionInterface' }

----------------------------------------

TITLE: Date Validation Using YAML Configuration
DESCRIPTION: Shows how to configure date validation using YAML format in Symfony's validation configuration file.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        birthday:
            - Date: ~

----------------------------------------

TITLE: Setting Placeholder Options for DateIntervalType
DESCRIPTION: Examples of configuring placeholder values for choice widget select boxes in DateIntervalType field.

LANGUAGE: php
CODE:
$builder->add('remindEvery', DateIntervalType::class, [
    'placeholder' => '',
]);

$builder->add('remindEvery', DateIntervalType::class, [
    'placeholder' => ['years' => 'Years', 'months' => 'Months', 'days' => 'Days'],
]);

----------------------------------------

TITLE: Basic DateType Field Configuration in PHP
DESCRIPTION: Basic configuration of a DateType field for a DateTime object using choice widget rendering.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\DateType;
// ...

$builder->add('publishedAt', DateType::class, [
    'widget' => 'choice',
]);

----------------------------------------

TITLE: Initializing Symfony Routing in PHP Framework
DESCRIPTION: Sets up the Symfony Routing component in a PHP framework, including request handling, route matching, and response generation.

LANGUAGE: PHP
CODE:
// example.com/web/front.php
require_once __DIR__.'/../vendor/autoload.php';

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing;

$request = Request::createFromGlobals();
$routes = include __DIR__.'/../src/app.php';

$context = new Routing\RequestContext();
$context->fromRequest($request);
$matcher = new Routing\Matcher\UrlMatcher($routes, $context);

try {
    extract($matcher->match($request->getPathInfo()), EXTR_SKIP);
    ob_start();
    include sprintf(__DIR__.'/../src/pages/%s.php', $_route);

    $response = new Response(ob_get_clean());
} catch (Routing\Exception\ResourceNotFoundException $exception) {
    $response = new Response('Not Found', 404);
} catch (Exception $exception) {
    $response = new Response('An error occurred', 500);
}

$response->send();

----------------------------------------

TITLE: Initializing Redis Cache Adapter in PHP
DESCRIPTION: This snippet demonstrates how to create a new RedisAdapter instance with various configuration options including Redis connection, namespace, default lifetime, and an optional marshaller.

LANGUAGE: PHP
CODE:
use Symfony\Component\Cache\Adapter\RedisAdapter;

$cache = new RedisAdapter(

    // the object that stores a valid connection to your Redis system
    \Redis $redisConnection,

    // the string prefixed to the keys of the items stored in this cache
    $namespace = '',

    // the default lifetime (in seconds) for cache items that do not define their
    // own lifetime, with a value 0 causing items to be stored indefinitely (i.e.
    // until RedisAdapter::clear() is invoked or the server(s) are purged)
    $defaultLifetime = 0,

    // $marshaller (optional) An instance of MarshallerInterface to control the serialization
    // and deserialization of cache items. By default, native PHP serialization is used.
    // This can be useful for compressing data, applying custom serialization logic, or
    // optimizing the size and performance of cached items
    ?MarshallerInterface $marshaller = null
);

----------------------------------------

TITLE: Configuring Currency Constraint in YAML for Symfony Validation
DESCRIPTION: Shows how to configure the Currency constraint for a property using YAML in Symfony's validation configuration.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Order:
    properties:
        currency:
            - Currency: ~

----------------------------------------

TITLE: Installing the Symfony Serializer Package
DESCRIPTION: Command to install the Symfony serializer package using Composer

LANGUAGE: shell
CODE:
$ composer require symfony/serializer-pack

----------------------------------------

TITLE: Installing Symfony Webhook Component
DESCRIPTION: Command to install the Symfony Webhook component using Composer.

LANGUAGE: shell
CODE:
$ composer require symfony/webhook

----------------------------------------

TITLE: Setting up ISIN Validation with PHP Metadata
DESCRIPTION: Example of configuring ISIN validation using PHP metadata in an entity class.

LANGUAGE: php
CODE:
// src/Entity/UnitAccount.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class UnitAccount
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('isin', new Assert\Isin());
    }
}

----------------------------------------

TITLE: Adding Configuration Options to PostalAddressType in PHP
DESCRIPTION: This code shows how to add configuration options to the custom PostalAddressType, making it more flexible and configurable.

LANGUAGE: PHP
CODE:
// src/Form/Type/PostalAddressType.php
namespace App\Form\Type;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\OptionsResolver\Options;
use Symfony\Component\OptionsResolver\OptionsResolver;

class PostalAddressType extends AbstractType
{
    // ...

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'allowed_states' => null,
            'is_extended_address' => false,
        ]);

        $resolver->setAllowedTypes('allowed_states', ['null', 'string', 'array']);
        $resolver->setAllowedTypes('is_extended_address', 'bool');

        $resolver->setNormalizer('allowed_states', static function (Options $options, $states): ?array
        {
            if (null === $states) {
                return $states;
            }

            if (is_string($states)) {
                $states = (array) $states;
            }

            return array_combine(array_values($states), array_values($states));
        });
    }
}

----------------------------------------

TITLE: AssetMapper Configuration Example
DESCRIPTION: Example YAML configuration for AssetMapper showing paths and excluded patterns

LANGUAGE: yaml
CODE:
framework:
    asset_mapper:
        paths:
            - assets/
        excluded_patterns:
            - '*/*.scss'

----------------------------------------

TITLE: Overriding Translations Directory in PHP Configuration
DESCRIPTION: This PHP configuration shows how to override the default translations directory using the defaultPath() method of the translator configuration.

LANGUAGE: php
CODE:
// config/packages/translation.php
use Symfony\Config\FrameworkConfig;

return static function (FrameworkConfig $framework): void {
    $framework->translator()
        ->defaultPath('%kernel.project_dir%/i18n')
    ;
};

----------------------------------------

TITLE: Dynamic Module Import in JavaScript using Webpack
DESCRIPTION: This snippet demonstrates how to use dynamic imports to load a module (VideoPlayer) asynchronously when needed, improving initial load time and performance.

LANGUAGE: javascript
CODE:
// assets/app.js

import $ from 'jquery';

$('.js-open-video').on('click', function() {
    // you could start a loading animation here

    // use import() as a function - it returns a Promise
    import('./components/VideoPlayer').then(({ default: VideoPlayer }) => {
        // you could stop a loading animation here

        // use the larger VideoPlayer module
        const player = new VideoPlayer('some-element');

    }).catch(error => 'An error occurred while loading the component');
});

----------------------------------------

TITLE: Configuring Nginx for Static Error Pages in Symfony
DESCRIPTION: Nginx server configuration to serve static error pages generated by Symfony for improved performance and consistency.

LANGUAGE: nginx
CODE:
# /etc/nginx/conf.d/example.com.conf
server {
    # Existing server configuration
    # ...

    # Serve static error pages
    error_page 400 /error_pages/400.html;
    error_page 401 /error_pages/401.html;
    # ...
    error_page 510 /error_pages/510.html;
    error_page 511 /error_pages/511.html;

    location ^~ /error_pages/ {
        root /path/to/your/symfony/var/cache/error_pages;
        internal; # prevent direct URL access
    }
}

----------------------------------------

TITLE: Configuring Monolog HTTP Code Exclusion in YAML
DESCRIPTION: This YAML configuration for Monolog sets up a 'fingers_crossed' handler to exclude logging of specific HTTP codes (403 and 404) and allows for more complex exclusions based on URL patterns.

LANGUAGE: yaml
CODE:
# config/packages/prod/monolog.yaml
monolog:
    handlers:
        main:
            # ...
            type: fingers_crossed
            handler: ...
            excluded_http_codes: [403, 404, { 400: ['^/foo', '^/bar'] }]

----------------------------------------

TITLE: Defining AtLeastOneOf Constraint in XML
DESCRIPTION: XML configuration example for AtLeastOneOf constraint validation rules. Shows how to configure validation for password and grades properties using XML format.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Student">
        <property name="password">
            <constraint name="AtLeastOneOf">
                <option name="constraints">
                    <constraint name="Regex">
                        <option name="pattern">/#/</option>
                    </constraint>
                    <constraint name="Length">
                        <option name="min">10</option>
                    </constraint>
                </option>
            </constraint>
        </property>
        <property name="grades">
            <constraint name="AtLeastOneOf">
                <option name="constraints">
                    <constraint name="Count">
                        <option name="min">3</option>
                    </constraint>
                    <constraint name="All">
                        <option name="constraints">
                            <constraint name="GreaterThanOrEqual">
                                5
                            </constraint>
                        </option>
                    </constraint>
                </option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Date Validation Using XML Configuration
DESCRIPTION: Demonstrates date validation configuration using XML format in Symfony's validation configuration schema.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="birthday">
            <constraint name="Date"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Registering DQL Functions with Default Entity Manager (PHP)
DESCRIPTION: PHP configuration for registering custom string, numeric and datetime DQL functions with the default Doctrine entity manager in Symfony.

LANGUAGE: php
CODE:
// config/packages/doctrine.php
use App\DQL\DatetimeFunction;
use App\DQL\NumericFunction;
use App\DQL\SecondStringFunction;
use App\DQL\StringFunction;
use Symfony\Config\DoctrineConfig;

return static function (DoctrineConfig $doctrine): void {
    $defaultDql = $doctrine->orm()
        ->entityManager('default')
            // ...
            ->dql();

    $defaultDql->stringFunction('test_string', StringFunction::class);
    $defaultDql->stringFunction('second_string', SecondStringFunction::class);
    $defaultDql->numericFunction('test_numeric', NumericFunction::class);
    $defaultDql->datetimeFunction('test_datetime', DatetimeFunction::class);
};

----------------------------------------

TITLE: Configuring Symfony Router in YAML
DESCRIPTION: Shows how to configure the Symfony router using YAML, including environment-specific settings.

LANGUAGE: YAML
CODE:
# config/packages/routing.yaml
framework:
    router:
        utf8: true

when@prod:
    framework:
        router:
            strict_requirements: null

----------------------------------------

TITLE: Basic Console Output Coloring in Symfony
DESCRIPTION: Examples of using built-in color tags to style console output text with different colors and backgrounds.

LANGUAGE: php
CODE:
// green text
$output->writeln('<info>foo</info>');

// yellow text
$output->writeln('<comment>foo</comment>');

// black text on a cyan background
$output->writeln('<question>foo</question>');

// white text on a red background
$output->writeln('<error>foo</error>');

----------------------------------------

TITLE: Creating Service Aliases in Symfony PHP
DESCRIPTION: Shows how to create a service alias using Symfony's PHP-based configuration.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\Mail\PhpMailer;

return function(ContainerConfigurator $container): void {
    $services = $container->services();

    $services->set(PhpMailer::class)
        ->private();

    $services->alias('app.mailer', PhpMailer::class);
};

----------------------------------------

TITLE: Initializing ArrayAdapter in PHP for Symfony Cache
DESCRIPTION: This snippet demonstrates how to create and configure an instance of ArrayAdapter. It shows all available constructor parameters including default lifetime, serialization option, maximum lifetime, maximum items, and an optional clock implementation.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\ArrayAdapter;

$cache = new ArrayAdapter(

    // the default lifetime (in seconds) for cache items that do not define their
    // own lifetime, with a value 0 causing items to be stored indefinitely (i.e.
    // until the current PHP process finishes)
    $defaultLifetime = 0,

    // if true, the values saved in the cache are serialized before storing them
    $storeSerialized = true,

    // the maximum lifetime (in seconds) of the entire cache (after this time, the
    // entire cache is deleted to avoid stale data from consuming memory)
    $maxLifetime = 0,

    // the maximum number of items that can be stored in the cache. When the limit
    // is reached, cache follows the LRU model (least recently used items are deleted)
    $maxItems = 0,

    // optional implementation of the Psr\Clock\ClockInterface that will be used
    // to calculate the lifetime of cache items (for example to get predictable
    // lifetimes in tests)
    $clock = null,
);

----------------------------------------

TITLE: Validating Blank Values in PHP
DESCRIPTION: This snippet demonstrates the basic logic for validating if a value is blank. It checks if the value is neither an empty string nor null.

LANGUAGE: php
CODE:
if ('' !== $value && null !== $value) {
    // validation will fail
}

----------------------------------------

TITLE: Installing WebLink Component in Symfony
DESCRIPTION: Command to install the WebLink component using Composer in a Symfony Flex application.

LANGUAGE: terminal
CODE:
$ composer require symfony/web-link

----------------------------------------

TITLE: Configuring Symfony Server Options
DESCRIPTION: YAML configuration file for setting various options for the Symfony server.

LANGUAGE: yaml
CODE:
# Sets domain1.wip and domain2.wip for the current project
proxy:
    domains:
        - domain1
        - domain2

http:
    document_root: public/ # Path to the project document root
    passthru: index.php # Project passthru index
    port: 8000 # Force the port that will be used to run the server
    preferred_port: 8001 # Preferred HTTP port [default: 8000]
    p12: path/to/p12_cert # Name of the file containing the TLS certificate to use in p12 format
    allow_http: true # Prevent auto-redirection from HTTP to HTTPS
    no_tls: true # Use HTTP instead of HTTPS
    daemon: true # Run the server in the background
    use_gzip: true # Toggle GZIP compression
    no_workers: true # Do not start workers

----------------------------------------

TITLE: DateType Configuration with Bootstrap Datepicker
DESCRIPTION: Configuration for DateType field with Bootstrap Datepicker integration, including custom class and HTML5 disabled.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\DateType;
// ...

$builder->add('publishedAt', DateType::class, [
    'widget' => 'single_text',
    'html5' => false,
    'attr' => ['class' => 'js-datepicker'],
]);

----------------------------------------

TITLE: Configuring UniqueEntity with Multiple Fields and Error Path
DESCRIPTION: Example of configuring UniqueEntity constraint with multiple fields and custom error path for a Service entity using PHP attributes.

LANGUAGE: php
CODE:
// src/Entity/Service.php
namespace App\Entity;

use App\Entity\Host;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

#[ORM\Entity]
#[UniqueEntity(
    fields: ['host', 'port'],
    message: 'This port is already in use on that host.',
    errorPath: 'port',
)]
class Service
{
    #[ORM\ManyToOne(targetEntity: Host::class)]
    public Host $host;

    #[ORM\Column(type: 'integer')]
    public int $port;
}

----------------------------------------

TITLE: Configuring Symfony to Use Bootstrap 5 Form Theme (YAML)
DESCRIPTION: This YAML configuration sets up Symfony to use the Bootstrap 5 form theme globally for all forms in the application.

LANGUAGE: yaml
CODE:
# config/packages/twig.yaml
twig:
    form_themes: ['bootstrap_5_layout.html.twig']

----------------------------------------

TITLE: Configuring Apache Rewrite Rules for Symfony Front Controller
DESCRIPTION: Apache configuration to ensure all requests are routed through Symfony's front controller (index.php), ignoring direct PHP file access.

LANGUAGE: apache
CODE:
RewriteEngine On

RewriteCond %{REQUEST_URI}::$1 ^(/.+)/(.*)::\2$
RewriteRule ^(.*) - [E=BASE:%1]

RewriteCond %{ENV:REDIRECT_STATUS} ^$
RewriteRule ^index\.php(?:/(.*)|$) %{ENV:BASE}/$1 [R=301,L]

RewriteRule ^index\.php - [L]

RewriteCond %{REQUEST_FILENAME} -f
RewriteCond %{REQUEST_FILENAME} !^.+\.php$
RewriteRule ^ - [L]

RewriteRule ^ %{ENV:BASE}/index.php [L]

----------------------------------------

TITLE: Overriding Templates Directory in XML Configuration
DESCRIPTION: This XML configuration shows how to override the default templates directory using the twig:default-path option.

LANGUAGE: xml
CODE:
<!-- config/packages/twig.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:twig="http://symfony.com/schema/dic/twig"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/twig
        https://symfony.com/schema/dic/twig/twig-1.0.xsd">

    <twig:config>
        <twig:default-path>%kernel.project_dir%/resources/views</twig:default-path>
    </twig:config>

</container>

----------------------------------------

TITLE: XML JSON Validation Configuration
DESCRIPTION: Demonstrates XML configuration for JSON validation constraint. Defines validation rules for the Book entity's chapters property using XML syntax.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Book">
        <property name="chapters">
            <constraint name="Json">
                <option name="message">You've entered an invalid Json.</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Cache-Control Header Format Example
DESCRIPTION: Shows the resulting Cache-Control header format after setting cache controls.

LANGUAGE: text
CODE:
Cache-Control: public, max-age=600

----------------------------------------

TITLE: Configuring copyFiles() in webpack.config.js for Image Handling
DESCRIPTION: This snippet shows how to configure the copyFiles() method in webpack.config.js to copy image files from the assets directory to the public build directory. It includes options for targeting paths and file patterns.

LANGUAGE: diff
CODE:
  // webpack.config.js

  Encore
      // ...
      .setOutputPath('public/build/')

+     .copyFiles({
+         from: './assets/images',
+
+         // optional target path, relative to the output dir
+         to: 'images/[path][name].[ext]',
+
+         // if versioning is enabled, add the file hash too
+         //to: 'images/[path][name].[hash:8].[ext]',
+
+         // only copy files matching this pattern
+         //pattern: /\.(png|jpg|jpeg)$/
+     })

----------------------------------------

TITLE: Date Validation Using PHP Class Configuration
DESCRIPTION: Shows how to implement date validation using PHP class metadata configuration in Symfony entity class.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
   /**
    * @var string A "Y-m-d" formatted value
    */
    protected string $birthday;

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('birthday', new Assert\Date());
    }
}

----------------------------------------

TITLE: Implementing Lazy Services with Attributes
DESCRIPTION: Demonstrates how to use the Autoconfigure attribute to define a service as lazy in Symfony. This method allows for lazy loading configuration directly in the PHP class.

LANGUAGE: php
CODE:
namespace App\Twig;

use Symfony\Component\DependencyInjection\Attribute\Autoconfigure;
use Twig\Extension\ExtensionInterface;

#[Autoconfigure(lazy: true)]
class AppExtension implements ExtensionInterface
{
    // ...
}

----------------------------------------

TITLE: Clickable Links in Symfony Console
DESCRIPTION: Implementing clickable hyperlinks in console output using the href tag for terminal emulators that support links.

LANGUAGE: php
CODE:
$output->writeln('<href=https://symfony.com>Symfony Homepage</>');

----------------------------------------

TITLE: Defining Custom Validation Constraints in YAML
DESCRIPTION: Shows how to add custom validation constraints to a User entity from FOSUserBundle using a new validation group in YAML format.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
FOS\UserBundle\Model\User:
    properties:
        plainPassword:
            - NotBlank:
                groups: [AcmeValidation]
            - Length:
                min: 6
                minMessage: fos_user.password.short
                groups: [AcmeValidation]

----------------------------------------

TITLE: Initializing CouchbaseBucketAdapter in PHP
DESCRIPTION: Creates a new CouchbaseBucketAdapter instance with a Couchbase client, bucket name, namespace, and default lifetime. This adapter is used for caching with Couchbase in Symfony applications.

LANGUAGE: PHP
CODE:
use Symfony\Component\Cache\Adapter\CouchbaseBucketAdapter;

$cache = new CouchbaseBucketAdapter(
    // the client object that sets options and adds the server instance(s)
    $client,

    // the name of bucket
    $bucket,

    // a string prefixed to the keys of the items stored in this cache
    $namespace,

    // the default lifetime (in seconds) for cache items that do not define their
    // own lifetime, with a value 0 causing items to be stored indefinitely
    $defaultLifetime
);

----------------------------------------

TITLE: Creating a Twig Extension in Symfony
DESCRIPTION: Shows how to create a custom Twig extension in Symfony for adding a new 'greet' filter.

LANGUAGE: PHP
CODE:
// src/Twig/GreetExtension.php
namespace App\Twig;

use App\GreetingGenerator;
use Twig\Extension\AbstractExtension;
use Twig\TwigFilter;

class GreetExtension extends AbstractExtension
{
    public function __construct(
        private GreetingGenerator $greetingGenerator,
    ) {
    }

    public function getFilters(): array
    {
        return [
            new TwigFilter('greet', [$this, 'greetUser']),
        ];
    }

    public function greetUser(string $name): string
    {
        $greeting =  $this->greetingGenerator->getRandomGreeting();

        return "$greeting $name!";
    }
}

----------------------------------------

TITLE: Workflow Configuration in PHP
DESCRIPTION: PHP configuration for defining a pull request workflow with styled states and transitions using the Symfony Config component.

LANGUAGE: php
CODE:
use Symfony\Config\FrameworkConfig;

return static function (FrameworkConfig $framework): void {
    $pullRequest = $framework->workflows()->workflows('pull_request');
    $pullRequest
        ->type('state_machine')
        ->supports(['App\Entity\PullRequest'])
        ->initialMarking(['start']);
    // ... rest of configuration

----------------------------------------

TITLE: EntityType with Pre-Selected Choices
DESCRIPTION: Example of using the choices option to provide a pre-selected collection of entities for the form field.

LANGUAGE: php
CODE:
use App\Entity\User;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
// ...

$builder->add('users', EntityType::class, [
    'class' => User::class,
    'choices' => $group->getUsers(),
]);

----------------------------------------

TITLE: Installing Symfony Validator Component via Composer
DESCRIPTION: Shows how to install the Symfony Validator component using Composer in a terminal.

LANGUAGE: terminal
CODE:
$ composer require symfony/validator

----------------------------------------

TITLE: Configuring Custom Translation Domain in YAML
DESCRIPTION: YAML configuration for setting a custom translation domain for validation messages.

LANGUAGE: yaml
CODE:
# config/packages/validator.yaml
framework:
    validation:
        translation_domain: validation_errors

----------------------------------------

TITLE: Removing Emojis in PHP
DESCRIPTION: Using EmojiTransliterator with 'strip' locale to remove all emojis from a string

LANGUAGE: php
CODE:
use Symfony\Component\Emoji\EmojiTransliterator;

$transliterator = EmojiTransliterator::create('strip');
$transliterator->transliterate('🎉Hey!🥳 🎁Happy Birthday!🎁');
// => 'Hey! Happy Birthday!'

----------------------------------------

TITLE: YAML Configuration Examples
DESCRIPTION: Examples of different ways to configure logging parameter in YAML format, demonstrating parameter evaluation behavior.

LANGUAGE: yaml
CODE:
my_bundle:
    logging: true
    # true, as expected

my_bundle:
    logging: '%kernel.debug%'
    # true/false (depends on 2nd argument of the Kernel class)

my_bundle: ~
# passes the string "%kernel.debug%"

----------------------------------------

TITLE: Installing Test Dependencies with Composer
DESCRIPTION: Command to update and install external dependencies required for running Symfony tests using Composer package manager.

LANGUAGE: terminal
CODE:
$ composer update

----------------------------------------

TITLE: Configuring Lock Stores in YAML
DESCRIPTION: Illustrates various configuration options for lock stores using YAML format in Symfony's configuration file.

LANGUAGE: yaml
CODE:
framework:
    lock: ~
    lock: 'flock'
    lock: 'flock:///path/to/file'
    lock: 'semaphore'
    lock: 'memcached://m1.docker'
    lock: ['memcached://m1.docker', 'memcached://m2.docker']
    lock: 'redis://r1.docker'
    lock: ['redis://r1.docker', 'redis://r2.docker']
    lock: 'rediss://r1.docker?ssl[verify_peer]=1&ssl[cafile]=...'
    lock: 'zookeeper://z1.docker'
    lock: 'zookeeper://z1.docker,z2.docker'
    lock: 'zookeeper://localhost01,localhost02:2181'
    lock: 'sqlite:///%kernel.project_dir%/var/lock.db'
    lock: 'mysql:host=127.0.0.1;dbname=app'
    lock: 'pgsql:host=127.0.0.1;dbname=app'
    lock: 'pgsql+advisory:host=127.0.0.1;dbname=app'
    lock: 'sqlsrv:server=127.0.0.1;Database=app'
    lock: 'oci:host=127.0.0.1;dbname=app'
    lock: 'mongodb://127.0.0.1/app?collection=lock'
    lock: '%env(LOCK_DSN)%'
    # using an existing service
    lock: 'snc_redis.default'

    # named locks
    lock:
        invoice: ['semaphore', 'redis://r2.docker']
        report: 'semaphore'

----------------------------------------

TITLE: Defining Length Constraint with PHP Attributes in Symfony
DESCRIPTION: Demonstrates how to apply the Length constraint to a property using PHP attributes. It sets minimum and maximum length requirements for a 'firstName' field with custom error messages.

LANGUAGE: php
CODE:
// src/Entity/Participant.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Participant
{
    #[Assert\Length(
        min: 2,
        max: 50,
        minMessage: 'Your first name must be at least {{ limit }} characters long',
        maxMessage: 'Your first name cannot be longer than {{ limit }} characters',
    )]
    protected string $firstName;
}

----------------------------------------

TITLE: Configuring ElasticsearchLogstashHandler Service in XML
DESCRIPTION: XML configuration for registering the ElasticsearchLogstashHandler as a service with default and optional parameter settings.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:monolog="http://symfony.com/schema/dic/monolog"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/monolog
        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd">

    <services>
        <service id="Symfony\Bridge\Monolog\Handler\ElasticsearchLogstashHandler"/>

        <!-- optionally, configure the handler using the constructor arguments (shown values are default) -->
        <service id="Symfony\Bridge\Monolog\Handler\ElasticsearchLogstashHandler">
            <argument key="endpoint">http://127.0.0.1:9200</argument>
            <argument key="index">monolog</argument>
            <argument key="client"/>
            <argument key="level" type="enum">Monolog\Level::Debug</argument>
            <argument key="bubble">true</argument>
            <argument key="elasticsearchVersion">1.0.0</argument>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Defining Slug Constraint in XML
DESCRIPTION: Example of how to define the Slug constraint for a property using XML format in a validation configuration file.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="slug">
            <constraint name="Slug"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Monolog Email Configuration in PHP
DESCRIPTION: PHP-based configuration for Monolog email notifications using the Symfony Config builder. Includes all handler configurations with type hints and method chaining.

LANGUAGE: php
CODE:
// config/packages/prod/monolog.php
use Symfony\Config\MonologConfig;

return static function (MonologConfig $monolog): void {
    $monolog->handler('main')
        ->type('fingers_crossed')
        ->actionLevel('critical')
        ->handler('grouped')
    ;

    $monolog->handler('grouped')
        ->type('group')
        ->members(['streamed', 'deduplicated'])
    ;

    $monolog->handler('streamed')
        ->type('stream')
        ->path('%kernel.logs_dir%/%kernel.environment%.log')
        ->level('debug')
    ;

    $monolog->handler('deduplicated')
        ->type('deduplicated')
        ->handler('symfony_mailer')
    ;

    $monolog->handler('symfony_mailer')
        ->type('symfony_mailer')
        ->fromEmail('error@example.com')
        ->toEmail(['error@example.com'])
        ->subject('An Error Occurred! %%message%%')
        ->level('debug')
        ->formatter('monolog.formatter.html')
        ->contentType('text/html')
    ;

----------------------------------------

TITLE: Running PHPUnit with Deprecation Helper Configuration
DESCRIPTION: Example command to run PHPUnit with a specific deprecation helper configuration.

LANGUAGE: Bash
CODE:
$ SYMFONY_DEPRECATIONS_HELPER="/foobar/" ./vendor/bin/simple-phpunit

----------------------------------------

TITLE: Configuring Authentication Entry Point in Symfony (YAML)
DESCRIPTION: This YAML configuration sets up a firewall with multiple authentication methods (form login and custom authenticator) and specifies form_login as the entry point for unauthenticated users.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
security:

    # ...
    firewalls:
        main:
            # allow authentication using a form or a custom authenticator
            form_login: ~
            custom_authenticators:
                - App\Security\SocialConnectAuthenticator

            # configure the form authentication as the entry point for unauthenticated users
            entry_point: form_login

----------------------------------------

TITLE: Creating Memcached Connection with Multiple DSNs in PHP
DESCRIPTION: Demonstrates how to create a Memcached connection with multiple servers using an array of DSN strings.

LANGUAGE: PHP
CODE:
use Symfony\Component\Cache\Adapter\MemcachedAdapter;

// pass an array of DSN strings to register multiple servers with the client
$client = MemcachedAdapter::createConnection([
    'memcached://10.0.0.100',
    'memcached://10.0.0.101',
    'memcached://10.0.0.102',
    // etc...
]);

----------------------------------------

TITLE: Pull Request Merge Commit Format
DESCRIPTION: Demonstrates the standardized format used for merge commit messages in Symfony pull requests

LANGUAGE: text
CODE:
merged branch USER_NAME/BRANCH_NAME (PR #1111)

----------------------------------------

TITLE: Configuring Output Directories for Multiple Builds in Symfony
DESCRIPTION: This YAML snippet shows how to configure output directories for multiple Webpack builds in Symfony.

LANGUAGE: yaml
CODE:
# config/packages/webpack_encore.yaml
webpack_encore:
    output_path: '%kernel.project_dir%/public/default_build'
    builds:
        firstConfig: '%kernel.project_dir%/public/first_build'
        secondConfig: '%kernel.project_dir%/public/second_build'

----------------------------------------

TITLE: File Validation with YAML Configuration
DESCRIPTION: Example showing file validation configuration using YAML format to validate PDF files under 1024k.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        bioFile:
            - File:
                maxSize: 1024k
                extensions: [pdf]
                extensionsMessage: Please upload a valid PDF

----------------------------------------

TITLE: Configuring package.json for TypeScript Transpilation
DESCRIPTION: Adds scripts and dev dependencies to package.json for transpiling TypeScript to JavaScript using Babel.

LANGUAGE: json
CODE:
{
    "scripts": {
        "build": "babel src --extensions .ts -d dist"
    },
    "devDependencies": {
        "@babel/cli": "^7.20.7",
        "@babel/core": "^7.20.12",
        "@babel/plugin-proposal-class-properties": "^7.18.6",
        "@babel/preset-env": "^7.20.2",
        "@babel/preset-typescript": "^7.18.6",
        "@hotwired/stimulus": "^3.2.1",
        "typescript": "^4.9.5"
    }
}

----------------------------------------

TITLE: Overriding Kernel Charset in PHP
DESCRIPTION: This snippet demonstrates how to override the getCharset() method in the Kernel class to return a custom charset value.

LANGUAGE: php
CODE:
// src/Kernel.php
namespace App;

use Symfony\Component\HttpKernel\Kernel as BaseKernel;
// ...

class Kernel extends BaseKernel
{
    public function getCharset(): string
    {
        return 'ISO-8859-1';
    }
}

----------------------------------------

TITLE: Setting Custom Translation Domain in Constraint Validator
DESCRIPTION: PHP code showing how to set a custom translation domain for a specific violation in a constraint validator.

LANGUAGE: php
CODE:
public function validate($value, Constraint $constraint): void
{
    // validation logic

    $this->context->buildViolation($constraint->message)
        ->setParameter('{{ string }}', $value)
        ->setTranslationDomain('validation_errors')
        ->addViolation();
}

----------------------------------------

TITLE: Choice Question Implementation in Symfony
DESCRIPTION: Example of implementing a multiple choice question where users can select from predefined options

LANGUAGE: php
CODE:
use Symfony\Component\Console\Question\ChoiceQuestion;

public function execute(InputInterface $input, OutputInterface $output): int
{
    $helper = $this->getHelper('question');
    $question = new ChoiceQuestion(
        'Please select your favorite color (defaults to red)',
        ['red', 'blue', 'yellow'],
        0
    );
    $question->setErrorMessage('Color %s is invalid.');

    $color = $helper->ask($input, $output, $question);
    $output->writeln('You have just selected: '.$color);

    return Command::SUCCESS;
}

----------------------------------------

TITLE: PHP Configuration Examples
DESCRIPTION: Examples of different ways to configure logging parameter in PHP format, showing parameter evaluation behavior.

LANGUAGE: php
CODE:
$container->loadFromExtension('my_bundle', [
        'logging' => true,
        // true, as expected
    ]
);

$container->loadFromExtension('my_bundle', [
        'logging' => "%kernel.debug%",
        // true/false (depends on 2nd parameter of Kernel)
    ]
);

$container->loadFromExtension('my_bundle');

----------------------------------------

TITLE: Configuring Login Target Path in HTML/Twig
DESCRIPTION: Shows how to set a custom redirect target path using a hidden form field in the login form.

LANGUAGE: html
CODE:
<form action="{{ path('app_login') }}" method="post">
    <input type="hidden" name="_target_path" value="{{ path('account') }}">
    <input type="submit" name="login">
</form>

----------------------------------------

TITLE: Configuring Doctrine DBAL in YAML
DESCRIPTION: YAML configuration for Doctrine DBAL, including database connection settings and custom types.

LANGUAGE: yaml
CODE:
doctrine:
    dbal:
        dbname:               database
        host:                 localhost
        port:                 1234
        user:                 user
        password:             secret
        driver:               pdo_mysql
        # if the url option is specified, it will override the above config
        url:                  mysql://db_user:db_password@127.0.0.1:3306/db_name
        # the DBAL driverClass option
        driver_class:         App\DBAL\MyDatabaseDriver
        # the DBAL driverOptions option
        options:
            foo: bar
        path:                 '%kernel.project_dir%/var/data/data.sqlite'
        memory:               true
        unix_socket:          /tmp/mysql.sock
        # the DBAL wrapperClass option
        wrapper_class:        App\DBAL\MyConnectionWrapper
        charset:              utf8mb4
        logging:              '%kernel.debug%'
        platform_service:     App\DBAL\MyDatabasePlatformService
        server_version:       '8.0.37'
        mapping_types:
            enum: string
        types:
            custom: App\DBAL\MyCustomType

----------------------------------------

TITLE: Configuring Dependency Injection Container in PHP
DESCRIPTION: This snippet demonstrates how to configure a Symfony dependency injection container. It registers various services like routing, event dispatcher, and framework components.

LANGUAGE: PHP
CODE:
use Simplex\Framework;
use Symfony\Component\DependencyInjection;
use Symfony\Component\DependencyInjection\Reference;
use Symfony\Component\EventDispatcher;
use Symfony\Component\HttpFoundation;
use Symfony\Component\HttpKernel;
use Symfony\Component\Routing;

$container = new DependencyInjection\ContainerBuilder();
$container->register('context', Routing\RequestContext::class);
$container->register('matcher', Routing\Matcher\UrlMatcher::class)
    ->setArguments([$routes, new Reference('context')])
;
$container->register('request_stack', HttpFoundation\RequestStack::class);
$container->register('controller_resolver', HttpKernel\Controller\ControllerResolver::class);
$container->register('argument_resolver', HttpKernel\Controller\ArgumentResolver::class);

$container->register('listener.router', HttpKernel\EventListener\RouterListener::class)
    ->setArguments([new Reference('matcher'), new Reference('request_stack')])
;
$container->register('listener.response', HttpKernel\EventListener\ResponseListener::class)
    ->setArguments(['UTF-8'])
;
$container->register('listener.exception', HttpKernel\EventListener\ErrorListener::class)
    ->setArguments(['Calendar\Controller\ErrorController::exception'])
;
$container->register('dispatcher', EventDispatcher\EventDispatcher::class)
    ->addMethodCall('addSubscriber', [new Reference('listener.router')])
    ->addMethodCall('addSubscriber', [new Reference('listener.response')])
    ->addMethodCall('addSubscriber', [new Reference('listener.exception')])
;
$container->register('framework', Framework::class)
    ->setArguments([
        new Reference('dispatcher'),
        new Reference('controller_resolver'),
        new Reference('request_stack'),
        new Reference('argument_resolver'),
    ])
;

return $container;

----------------------------------------

TITLE: Setting TimezoneType Input Format
DESCRIPTION: Shows the available input format options for the TimezoneType field. The input option determines how the timezone value is stored in the underlying object.

LANGUAGE: PHP
CODE:
"input" => "datetimezone"  // Stores as \DateTimeZone object
"input" => "intltimezone"   // Stores as \IntlTimeZone object
"input" => "string"        // Stores as string (e.g. 'America/New_York')

----------------------------------------

TITLE: Configuring Method Calls in Symfony Services (PHP)
DESCRIPTION: This PHP configuration snippet shows how to configure the container to call the setLogger method on the MessageGenerator service, injecting the logger service as an argument.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\Service\MessageGenerator;

return function(ContainerConfigurator $container): void {
    // ...

    $services->set(MessageGenerator::class)
        ->call('setLogger', [service('logger')]);
};

----------------------------------------

TITLE: Configuring Static Factory Service in XML
DESCRIPTION: This XML configuration defines a service using a static factory method to create the NewsletterManager object.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Email\NewsletterManager">
            <!-- the first argument is the class and the second argument is the static method -->
            <factory class="App\Email\NewsletterManagerStaticFactory" method="createNewsletterManager"/>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Configuring Custom Translation Domain in PHP
DESCRIPTION: PHP configuration for setting a custom translation domain for validation messages.

LANGUAGE: php
CODE:
// config/packages/validator.php
use Symfony\Config\FrameworkConfig;

return static function (FrameworkConfig $framework) {
    // ...
    $framework
        ->validation()
            ->translationDomain('validation_errors')
    ;
};

----------------------------------------

TITLE: Defining a Class Requiring PSR-6 Cache in PHP
DESCRIPTION: This snippet demonstrates the definition of a class that requires a PSR-6 CacheItemPoolInterface in its constructor. It illustrates the use case for needing to adapt a PSR-16 cache to a PSR-6 interface.

LANGUAGE: php
CODE:
use Psr\Cache\CacheItemPoolInterface;

// just a made-up class for the example
class GitHubApiClient
{
    // ...

    // this requires a PSR-6 cache object
    public function __construct(CacheItemPoolInterface $cachePool)
    {
        // ...
    }
}

----------------------------------------

TITLE: Including Bootstrap 5 Resources in Symfony Twig Template
DESCRIPTION: This snippet shows how to include Bootstrap 5 CSS and JavaScript resources in a Symfony Twig template. It uses placeholders for the actual Bootstrap CDN links.

LANGUAGE: html+twig
CODE:
{# templates/base.html.twig #}

{# beware that the blocks in your template may be named different #}
{% block stylesheets %}
    <!-- Copy CSS from https://getbootstrap.com/docs/5.0/getting-started/introduction/#css -->
{% endblock %}
{% block javascripts %}
    <!-- Copy JavaScript from https://getbootstrap.com/docs/5.0/getting-started/introduction/#js -->
{% endblock %}

----------------------------------------

TITLE: Configuring Runtime Environment for Webpack in Symfony Encore
DESCRIPTION: This JavaScript snippet shows how to configure the runtime environment for Webpack when not using the Encore CLI, allowing generation of the Webpack configuration object.

LANGUAGE: javascript
CODE:
const Encore = require('@symfony/webpack-encore');

// Set the runtime environment
Encore.configureRuntimeEnvironment('dev');

// Retrieve the Webpack configuration object
const webpackConfig = require('./webpack.config');

----------------------------------------

TITLE: Configuring Choice Constraint with PHP
DESCRIPTION: Demonstrates how to configure the Choice constraint using PHP in a Symfony entity class using the loadValidatorMetadata method.

LANGUAGE: php
CODE:
// src/EntityAuthor.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint(
            'city',
            new Assert\Choice(['New York', 'Berlin', 'Tokyo'])
        );

        $metadata->addPropertyConstraint('genre', new Assert\Choice(
            choices: ['fiction', 'non-fiction'],
            message: 'Choose a valid genre.',
        ));
    }
}

----------------------------------------

TITLE: Emoji to Short Code Conversion in Twig
DESCRIPTION: Using the emojify Twig filter to convert text codes to emojis with different service catalogs

LANGUAGE: twig
CODE:
{{ 'I like :kiwi-fruit:'|emojify }} {# renders: I like 🥝 #}
{{ 'I like :kiwi:'|emojify }}       {# renders: I like 🥝 #}
{{ 'I like :kiwifruit:'|emojify }}  {# renders: I like 🥝 #}

{{ 'I :green-heart: this'|emojify }}                  {# renders: I 💚 this #}
{{ ':green_salad: is nice'|emojify('slack') }}        {# renders: 🥗 is nice #}
{{ 'My :turtle: has no name yet'|emojify('github') }} {# renders: My 🐢 has no name yet #}
{{ ':kiwi: is a great fruit'|emojify('gitlab') }}     {# renders: 🥝 is a great fruit #}

----------------------------------------

TITLE: Creating Validators Translation Catalog in XML
DESCRIPTION: XML file for defining translations for validation messages.

LANGUAGE: xml
CODE:
<!-- translations/validators/validators.en.xlf -->
<?xml version="1.0" encoding="UTF-8" ?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">
    <file source-language="en" datatype="plaintext" original="file.ext">
        <body>
            <trans-unit id="author.name.not_blank">
                <source>author.name.not_blank</source>
                <target>Please enter an author name.</target>
            </trans-unit>
        </body>
    </file>
</xliff>

----------------------------------------

TITLE: Using Stimulus Controller in Twig Template
DESCRIPTION: Demonstrates how to use a Stimulus controller defined in a UX bundle within a Twig template.

LANGUAGE: html
CODE:
<div
    {{ stimulus_controller('acme/feature/slug', { modal: 'my-value' }) }}
>
    ...
</div>

----------------------------------------

TITLE: Configuration Class Implementation
DESCRIPTION: Complete implementation of Configuration class showing how to properly inject and use the debug parameter.

LANGUAGE: php
CODE:
namespace App\DependencyInjection;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

class Configuration implements ConfigurationInterface
{
    private bool $debug;

    public function __construct(private bool $debug)
    {
    }

    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder('my_bundle');

        $treeBuilder->getRootNode()
            ->children()
                // ...
                ->booleanNode('logging')->defaultValue($this->debug)->end()
                // ...
            ->end()
        ;

        return $treeBuilder;
    }
}

----------------------------------------

TITLE: Creating Custom Tailwind Form Theme in Twig
DESCRIPTION: This snippet demonstrates how to create a custom form theme based on the Tailwind CSS theme. It extends the base theme and overrides specific blocks to set default classes for various form elements.

LANGUAGE: twig
CODE:
{% use 'tailwind_2_layout.html.twig' %}

{%- block form_row -%}
    {%- set row_class = row_class|default('my row classes') -%}
    {{- parent() -}}
{%- endblock form_row -%}

{%- block widget_attributes -%}
    {%- set widget_class = widget_class|default('my widget classes') -%}
    {%- set widget_disabled_class = widget_disabled_class|default('my disabled widget classes') -%}
    {%- set widget_errors_class = widget_errors_class|default('my widget with error classes') -%}
    {{- parent() -}}
{%- endblock widget_attributes -%}

{%- block form_label -%}
    {%- set label_class = label_class|default('my label classes') -%}
    {{- parent() -}}
{%- endblock form_label -%}

{%- block form_help -%}
    {%- set help_class = help_class|default('my label classes') -%}
    {{- parent() -}}
{%- endblock form_help -%}

{%- block form_errors -%}
    {%- set error_item_class = error_item_class|default('my error item classes') -%}
    {{- parent() -}}
{%- endblock form_errors -%}

----------------------------------------

TITLE: Configuring Shared Firewall Context
DESCRIPTION: Example of configuring shared context between multiple firewalls.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
security:
    # ...
    firewalls:
        somename:
            # ...
            context: my_context
        othername:
            # ...
            context: my_context

----------------------------------------

TITLE: HTML Color Input Element
DESCRIPTION: HTML5 input element with type="color" that renders as a color picker in supporting browsers.

LANGUAGE: html
CODE:
<input type="color">

----------------------------------------

TITLE: Configuring HTTP Cache in Symfony XML
DESCRIPTION: XML configuration to enable the Symfony HTTP cache (reverse proxy) in production environment.

LANGUAGE: xml
CODE:
<!-- config/packages/framework.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:framework="http://symfony.com/schema/dic/symfony"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/symfony
        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">

    <when env="prod">
      <framework:config>
          <!-- ... -->
          <framework:http-cache enabled="true"/>
      </framework:config>
    </when>
</container>

----------------------------------------

TITLE: Using UrlType with HTML5 Validation
DESCRIPTION: Example showing how to configure UrlType to use native HTML5 URL input validation by setting default_protocol to null.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\UrlType;

$builder->add('website', UrlType::class, [
    'default_protocol' => null,  // Uses <input type="url"> with browser validation
]);

----------------------------------------

TITLE: Implementing BIC Validation with PHP Attributes
DESCRIPTION: Example of implementing BIC validation using PHP attributes in a Transaction entity class. Validates a business identifier code property using the Assert\Bic constraint.

LANGUAGE: php
CODE:
// src/Entity/Transaction.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Transaction
{
    #[Assert\Bic]
    protected string $businessIdentifierCode;
}

----------------------------------------

TITLE: Creating a Scheduler Message Handler in PHP
DESCRIPTION: Example of creating a handler class for processing Scheduler messages.

LANGUAGE: PHP
CODE:
// src/Scheduler/Handler/SendDailySalesReportsHandler.php
namespace App\Scheduler\Handler;

use App\Scheduler\Message\SendDailySalesReports;
use Symfony\Component\Messenger\Attribute\AsMessageHandler;

#[AsMessageHandler]
class SendDailySalesReportsHandler
{
    public function __invoke(SendDailySalesReports $message)
    {
        // ... do some work to send the report to the customers
    }
}

----------------------------------------

TITLE: Configuring Invokable Factory in YAML
DESCRIPTION: This YAML configuration shows how to use an invokable factory (a class with __invoke method) to create a service.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    # ...

    App\Email\NewsletterManager:
        class:   App\Email\NewsletterManager
        factory: '@App\Email\InvokableNewsletterManagerFactory'

----------------------------------------

TITLE: Creating Basic HTTP Front Controller with Symfony Runtime
DESCRIPTION: Example of how to create a basic HTTP front controller using the Symfony Runtime component. This code initializes a Kernel and handles HTTP requests.

LANGUAGE: php
CODE:
// public/index.php
use App\Kernel;

require_once dirname(__DIR__).'/vendor/autoload_runtime.php';

return function (array $context): Kernel {
    return new Kernel($context['APP_ENV'], (bool) $context['APP_DEBUG']);
};

----------------------------------------

TITLE: Creating a TagAwareAdapter with Separate Item and Tag Storage in Symfony
DESCRIPTION: Illustrates how to create a TagAwareAdapter using separate adapters for storing cached items and tags. This setup allows for efficient invalidation and flexible storage options.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\FilesystemAdapter;
use Symfony\Component\Cache\Adapter\RedisAdapter;
use Symfony\Component\Cache\Adapter\TagAwareAdapter;

$cache = new TagAwareAdapter(
    // Adapter for cached items
    new FilesystemAdapter(),
    // Adapter for tags
    new RedisAdapter('redis://localhost')
);

----------------------------------------

TITLE: Managing Cookies in Varnish 4 for Caching
DESCRIPTION: This configuration removes all cookies except essential ones (PHPSESSID and REMEMBERME) to improve caching efficiency.

LANGUAGE: varnish4
CODE:
sub vcl_recv {
    // Remove all cookies except for essential ones.
    if (req.http.Cookie) {
        set req.http.Cookie = ";" + req.http.Cookie;
        set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
        set req.http.Cookie = regsuball(req.http.Cookie, ";(PHPSESSID|REMEMBERME)=", "; \1=");
        set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
        set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

        if (req.http.Cookie == "") {
            // If there are no more cookies, remove the header to get the page cached.
            unset req.http.Cookie;
        }
    }
}

----------------------------------------

TITLE: Installing BrowserKit Component via Composer
DESCRIPTION: Command to install the BrowserKit component using Composer package manager.

LANGUAGE: Bash
CODE:
$ composer require symfony/browser-kit

----------------------------------------

TITLE: Configuring Host-Based Firewall Restriction in Symfony
DESCRIPTION: Shows how to restrict a firewall to specific hostnames using the host configuration option. The example demonstrates limiting access to the admin.example.com domain.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml

# ...
security:
    firewalls:
        secured_area:
            host: ^admin\.example\.com$
            # ...

LANGUAGE: xml
CODE:
<!-- config/packages/security.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<srv:container xmlns="http://symfony.com/schema/dic/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:srv="http://symfony.com/schema/dic/services"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/security
        https://symfony.com/schema/dic/security/security-1.0.xsd">

    <config>
        <!-- ... -->
        <firewall name="secured_area" host="^admin\.example\.com$">
            <!-- ... -->
        </firewall>
    </config>
</srv:container>

LANGUAGE: php
CODE:
// config/packages/security.php
use Symfony\Config\SecurityConfig;

return static function (SecurityConfig $security): void {
    // ....

    $security->firewall('secured_area')
        ->host('^admin\.example\.com$')
        // ...
    ;
};

----------------------------------------

TITLE: Defining Table of Contents for Symfony Diversity Initiative in reStructuredText
DESCRIPTION: This snippet creates a table of contents for the Symfony Diversity Initiative documentation using reStructuredText syntax. It sets the maximum depth to 2 and includes links to 'governance' and 'further_reading' pages.

LANGUAGE: reStructuredText
CODE:
.. toctree::
    :maxdepth: 2

    governance
    further_reading

----------------------------------------

TITLE: Creating a Checkbox Field with Symfony Form Builder
DESCRIPTION: This snippet demonstrates how to add a checkbox field to a Symfony form using the FormBuilder. It sets the field type to CheckboxType, provides a label, and makes the field optional.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
// ...

$builder->add('public', CheckboxType::class, [
    'label'    => 'Show this entry publicly?',
    'required' => false,
]);

----------------------------------------

TITLE: Defining Validation Constraints in XML
DESCRIPTION: XML configuration for defining validation constraints on the Author entity.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping
        https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="name">
            <constraint name="NotBlank">
                <option name="message">author.name.not_blank</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Defining Positive Constraint in XML
DESCRIPTION: XML configuration for applying the Positive constraint to an Employee entity's income property.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Employee">
        <property name="income">
            <constraint name="Positive"></constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Configuring PropertyInfo in Symfony Framework
DESCRIPTION: This YAML configuration enables the property_info feature in the Symfony framework.

LANGUAGE: YAML
CODE:
# config/packages/framework.yaml
framework:
    property_info:
        enabled: true

----------------------------------------

TITLE: Configuring Blank Constraint in YAML
DESCRIPTION: This snippet demonstrates how to configure the Blank constraint for a property using YAML in a Symfony validation configuration file.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        firstName:
            - Blank: ~

----------------------------------------

TITLE: Implementing Static Callback Validation
DESCRIPTION: Example of implementing a static callback validation method that receives the object instance as first parameter.

LANGUAGE: php
CODE:
public static function validate(mixed $value, ExecutionContextInterface $context, mixed $payload): void
{
    // somehow you have an array of "fake names"
    $fakeNames = [/* ... */];

    // check if the name is actually a fake name
    if (in_array($value->getFirstName(), $fakeNames)) {
        $context->buildViolation('This name sounds totally fake!')
            ->atPath('firstName')
            ->addViolation()
        ;
    }
}

----------------------------------------

TITLE: Git Show Command with PR Notes
DESCRIPTION: Command to view GitHub discussion notes associated with a commit

LANGUAGE: terminal
CODE:
$ git show HEAD --show-notes=github-comments

----------------------------------------

TITLE: Implementing Grouped Enum Options
DESCRIPTION: Shows how to group enum options using the group_by option with a callback function to categorize choices.

LANGUAGE: PHP
CODE:
use App\Config\TextAlign;
use Symfony\Component\Form\Extension\Core\Type\EnumType;
// ...

$builder->add('alignment', EnumType::class, [
    'class' => TextAlign::class,
    'group_by' => function(TextAlign $choice, int $key, string $value): ?string {
        if (str_starts_with($value, 'Upper')) {
            return 'Upper';
        }

        if (str_starts_with($value, 'Lower')) {
            return 'Lower';
        }

        return 'Other';
    }
]);

----------------------------------------

TITLE: Configuring Couchbase Connection Options in PHP
DESCRIPTION: This snippet demonstrates how to configure options for a Couchbase Connection using an associative array of key-value pairs representing option names and their values.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\CouchbaseCollectionAdapter;

$client = CouchbaseCollectionAdapter::createConnection(
    // a DSN string or an array of DSN strings
    [],

    // associative array of configuration options
    [
        'username' => 'xxxxxx',
        'password' => 'yyyyyy',
        'configTimeout' => '100',
    ]
);

----------------------------------------

TITLE: Importing Configuration in YAML
DESCRIPTION: Demonstrates how to import external configuration files using the imports directive in YAML, including importing individual files and whole directories.

LANGUAGE: yaml
CODE:
# config/services.yaml
imports:
    - { resource: services/mailer.yaml }
    # If you want to import a whole directory:
    - { resource: services/ }
services:
    _defaults:
        autowire: true
        autoconfigure: true

    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

----------------------------------------

TITLE: Defining PHP Backed Enum for Text Alignment
DESCRIPTION: Creates a backed enum defining text alignment options with string values. This enum defines three basic alignment cases: Left, Center, and Right.

LANGUAGE: PHP
CODE:
// src/Config/TextAlign.php
namespace App\Config;

enum TextAlign: string
{
    case Left = 'Left aligned';
    case Center = 'Center aligned';
    case Right = 'Right aligned';
}

----------------------------------------

TITLE: Custom Voter for User Switching
DESCRIPTION: Implementation of a security voter to control user switching permissions with custom logic.

LANGUAGE: php
CODE:
namespace App\Security\Voter;

use Symfony\Bundle\SecurityBundle\Security;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Authorization\AccessDecisionManagerInterface;
use Symfony\Component\Security\Core\Authorization\Voter\Voter;
use Symfony\Component\Security\Core\User\UserInterface;

class SwitchToCustomerVoter extends Voter
{
    public function __construct(
        private AccessDecisionManagerInterface $accessDecisionManager,
    ) {
    }

    protected function supports($attribute, $subject): bool
    {
        return in_array($attribute, ['CAN_SWITCH_USER'])
            && $subject instanceof UserInterface;
    }

    protected function voteOnAttribute($attribute, $subject, TokenInterface $token): bool
    {
        $user = $token->getUser();
        if (!$user instanceof UserInterface || !$subject instanceof UserInterface) {
            return false;
        }
        if ($this->accessDecisionManager->decide($token, ['ROLE_ALLOWED_TO_SWITCH'])) {
            return true;
        }
        if ($this->accessDecisionManager->decide($token, ['ROLE_TECH_SUPPORT'])) {
            return true;
        }
        return false;
    }
}

----------------------------------------

TITLE: Registering SymfonyTestsListener in PHPUnit Configuration
DESCRIPTION: Example of how to register the SymfonyTestsListener in the PHPUnit XML configuration file.

LANGUAGE: XML
CODE:
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://schema.phpunit.de/6.0/phpunit.xsd"
>

    <!-- ... -->

    <listeners>
        <listener class="Symfony\Bridge\PhpUnit\SymfonyTestsListener"/>
    </listeners>
</phpunit>

----------------------------------------

TITLE: Installing DomCrawler Component
DESCRIPTION: Shows how to install the DomCrawler component via Composer

LANGUAGE: terminal
CODE:
$ composer require symfony/dom-crawler

----------------------------------------

TITLE: Configuring HMR and live reloading for PHP and Twig files in Symfony Encore
DESCRIPTION: JavaScript code snippet demonstrating how to configure Hot Module Replacement (HMR) and live reloading for PHP and Twig files in the webpack.config.js file.

LANGUAGE: javascript
CODE:
// webpack.config.js
// ...

Encore
    // ...

    .configureDevServerOptions(options => {
        options.liveReload = true;
        options.static = {
            watch: false
        };
        options.watchFiles = {
            paths: ['src/**/*.php', 'templates/**/*'],
        };
    })

----------------------------------------

TITLE: Generating UUID v1 in PHP
DESCRIPTION: Example of generating a UUID v1 (time-based) using the Symfony Uid component.

LANGUAGE: php
CODE:
use Symfony\Component\Uid\Uuid;

// $uuid is an instance of Symfony\Component\Uid\UuidV1
$uuid = Uuid::v1();

----------------------------------------

TITLE: Defining a Service Locator in YAML
DESCRIPTION: Demonstrates how to define a service locator using YAML configuration.

LANGUAGE: YAML
CODE:
# config/services.yaml
services:
    App\CommandBus:
        arguments:
          - !service_locator
              App\FooCommand: '@app.command_handler.foo'
              App\BarCommand: '@app.command_handler.bar'

----------------------------------------

TITLE: Installing Symfony Lock Component via Composer
DESCRIPTION: Shows the Composer command to install the Symfony Lock component in a Symfony Flex-enabled application.

LANGUAGE: shell
CODE:
$ composer require symfony/lock

----------------------------------------

TITLE: Translation Controller Example in PHP
DESCRIPTION: Example of using the translator service in a controller

LANGUAGE: php
CODE:
use Symfony\Contracts\Translation\TranslatorInterface;

public function index(TranslatorInterface $translator): Response
{
    $translated = $translator->trans('Symfony is great');

    // ...
}

----------------------------------------

TITLE: Using Custom Name Converter in Serialization
DESCRIPTION: Demonstrates how to use the configured serializer with the custom name converter to serialize and deserialize a Company object.

LANGUAGE: php
CODE:
// ...
$company = new Company('Acme Inc.', '123 Main Street, Big City');

$json = $serializer->serialize($company, 'json');
// {"org_name": "Acme Inc.", "org_address": "123 Main Street, Big City"}
$companyCopy = $serializer->deserialize($json, Company::class, 'json');
// Same data as $company

----------------------------------------

TITLE: Sending Login Link Notification in Symfony
DESCRIPTION: PHP code for sending a login link notification to a user using Symfony's Notifier component.

LANGUAGE: php
CODE:
public function requestLoginLink(NotifierInterface $notifier, LoginLinkHandlerInterface $loginLinkHandler, UserRepository $userRepository, Request $request): Response
{
    if ($request->isMethod('POST')) {
        $email = $request->getPayload()->get('email');
        $user = $userRepository->findOneBy(['email' => $email]);
        $loginLinkDetails = $loginLinkHandler->createLoginLink($user);
        $notification = new LoginLinkNotification(
            $loginLinkDetails,
            'Welcome to MY WEBSITE!' // email subject
        );
        $recipient = new Recipient($user->getEmail());
        $notifier->send($notification, $recipient);
        return $this->render('security/login_link_sent.html.twig');
    }
    return $this->render('security/request_login_link.html.twig');
}

----------------------------------------

TITLE: Configuring composer.json for Symfony UX Bundle
DESCRIPTION: Adds the 'symfony-ux' keyword to the composer.json file to identify the bundle as a UX bundle.

LANGUAGE: json
CODE:
{
    "keywords": ["symfony-ux"]
}

----------------------------------------

TITLE: Converting PSR-7 ServerRequest to Symfony Request
DESCRIPTION: PHP code to convert a PSR-7 ServerRequest object to a Symfony HttpFoundation Request object using the HttpFoundationFactory.

LANGUAGE: php
CODE:
use Symfony\Bridge\PsrHttpMessage\Factory\HttpFoundationFactory;

// $psrRequest is an instance of Psr\Http\Message\ServerRequestInterface

$httpFoundationFactory = new HttpFoundationFactory();
$symfonyRequest = $httpFoundationFactory->createRequest($psrRequest);

----------------------------------------

TITLE: Fetching Upstream Branches in Bash
DESCRIPTION: Git command to fetch all commits from the upstream branches, allowing you to work with the latest changes.

LANGUAGE: bash
CODE:
$ git fetch upstream

----------------------------------------

TITLE: Creating Service Aliases with Symfony Attributes
DESCRIPTION: Demonstrates how to use the #[AsAlias] attribute to create a service alias directly on the class.

LANGUAGE: php
CODE:
// src/Mail/PhpMailer.php
namespace App\Mail;

// ...
use Symfony\Component\DependencyInjection\Attribute\AsAlias;

#[AsAlias(id: 'app.mailer', public: true)]
class PhpMailer
{
    // ...
}

----------------------------------------

TITLE: Defining ICU MessageFormat Translations in YAML
DESCRIPTION: Example of defining translations using ICU MessageFormat syntax in a YAML file. Shows how to use placeholders, select statements for conditional messages, and pluralization.

LANGUAGE: yaml
CODE:
# translations/messages+intl-icu.en.yaml
say_hello: 'Hello {name}!'

invitation_title: >
    {organizer_gender, select,
        female   {{organizer_name} has invited you to her party!}
        male     {{organizer_name} has invited you to his party!}
        multiple {{organizer_name} have invited you to their party!}
        other    {{organizer_name} has invited you to their party!}
    }

num_of_apples: >
    {apples, plural,
        =0    {There are no apples}
        =1    {There is one apple...}
        other {There are # apples!}
    }

----------------------------------------

TITLE: Creating String Objects with Shortcut Functions
DESCRIPTION: Using shortcut functions to create ByteString and UnicodeString objects.

LANGUAGE: PHP
CODE:
use function Symfony\Component\String\b;
use function Symfony\Component\String\u;
use function Symfony\Component\String\s;

$foo = b('hello');
$foo = u('hello');
$foo = s('अनुच्छेद');

----------------------------------------

TITLE: Handling File Upload in Symfony Controller
DESCRIPTION: This code shows how to handle a file upload in a Symfony controller, including moving the uploaded file to a permanent location.

LANGUAGE: php
CODE:
use Symfony\Component\HttpFoundation\File\UploadedFile;

public function upload(): Response
{
    // ...

    if ($form->isSubmitted() && $form->isValid()) {
        $someNewFilename = ...

        $file = $form['attachment']->getData();
        $file->move($directory, $someNewFilename);

        // ...
    }

    // ...
}

----------------------------------------

TITLE: Stimulus Controller Implementation
DESCRIPTION: Example of implementing a basic Stimulus controller with targets and actions.

LANGUAGE: javascript
CODE:
// assets/controllers/say-hello-controller.js
import { Controller } from '@hotwired/stimulus';

export default class extends Controller {
    static targets = ['name', 'output']

    greet() {
      this.outputTarget.textContent = `Hello, ${this.nameTarget.value}!`
    }
}

----------------------------------------

TITLE: Setting Cache Headers Manually in PHP
DESCRIPTION: Example of manually setting HTTP cache headers on a response object.

LANGUAGE: php
CODE:
// src/Controller/BlogController.php
use Symfony\Component\HttpFoundation\Response;

public function index(): Response
{
    // somehow create a Response object, like by rendering a template
    $response = $this->render('blog/index.html.twig', []);

    // cache publicly for 3600 seconds
    $response->setPublic();
    $response->setMaxAge(3600);

    // (optional) set a custom Cache-Control directive
    $response->headers->addCacheControlDirective('must-revalidate', true);

    return $response;
}

----------------------------------------

TITLE: Creating Event Dispatcher Instance
DESCRIPTION: Initializing a new EventDispatcher object that will maintain the registry of listeners.

LANGUAGE: PHP
CODE:
use Symfony\Component\EventDispatcher\EventDispatcher;

$dispatcher = new EventDispatcher();

----------------------------------------

TITLE: Minor Issue Fix During PR Merge - Terminal Commands
DESCRIPTION: Commands for merging a pull request while fixing minor issues, using the gh tool with proper commit message handling.

LANGUAGE: terminal
CODE:
$ gh merge 11059

  Working on symfony/symfony-docs (branch 6.2)
  Merging Pull Request 11059: dmaicher/patch-3

  ...

  Push the changes now? (Y/n) n
  Now, push with: git push gh "6.2" refs/notes/github-comments

  $ git commit -a
  $ git push gh "6.2" refs/notes/github-comments

----------------------------------------

TITLE: Initializing MemcachedAdapter in PHP
DESCRIPTION: Creates a new MemcachedAdapter instance with a Memcached client, optional namespace, and default lifetime.

LANGUAGE: PHP
CODE:
use Symfony\Component\Cache\Adapter\MemcachedAdapter;

$cache = new MemcachedAdapter(
    // the client object that sets options and adds the server instance(s)
    \Memcached $client,

    // a string prefixed to the keys of the items stored in this cache
    $namespace = '',

    // the default lifetime (in seconds) for cache items that do not define their
    // own lifetime, with a value 0 causing items to be stored indefinitely (i.e.
    // until MemcachedAdapter::clear() is invoked or the server(s) are restarted)
    $defaultLifetime = 0
);

----------------------------------------

TITLE: Custom Console Style Definition in Symfony
DESCRIPTION: Creating a custom output style using OutputFormatterStyle class with specific color and formatting options.

LANGUAGE: php
CODE:
use Symfony\Component\Console\Formatter\OutputFormatterStyle;

// ...
$outputStyle = new OutputFormatterStyle('red', '#ff0', ['bold', 'blink']);
$output->getFormatter()->setStyle('fire', $outputStyle);

$output->writeln('<fire>foo</>');

----------------------------------------

TITLE: Using AutowireLocator Attribute
DESCRIPTION: Shows how to use the AutowireLocator attribute to define a service locator.

LANGUAGE: PHP
CODE:
// src/CommandBus.php
namespace App;

use App\CommandHandler\BarHandler;
use App\CommandHandler\FooHandler;
use Psr\Container\ContainerInterface;
use Symfony\Component\DependencyInjection\Attribute\AutowireLocator;

class CommandBus
{
    public function __construct(
        #[AutowireLocator([
            FooHandler::class,
            BarHandler::class,
        ])]
        private ContainerInterface $handlers,
    ) {
    }

    public function handle(Command $command): mixed
    {
        $commandClass = get_class($command);

        if ($this->handlers->has($commandClass)) {
            $handler = $this->handlers->get($commandClass);

            return $handler->handle($command);
        }
    }
}

----------------------------------------

TITLE: Writing to Arrays and Objects with PropertyAccessor in PHP
DESCRIPTION: Shows how to write values to arrays and objects using PropertyAccessor's setValue method.

LANGUAGE: php
CODE:
$person = [];
$propertyAccessor->setValue($person, '[first_name]', 'Wouter');

class Person
{
    public $firstName;
    private $lastName;

    public function setLastName($name): void
    {
        $this->lastName = $name;
    }
}

$person = new Person();
$propertyAccessor->setValue($person, 'firstName', 'Wouter');
$propertyAccessor->setValue($person, 'lastName', 'de Jong');

----------------------------------------

TITLE: Manual Extension Registration in Bundle
DESCRIPTION: Example of manually registering an extension class when not following naming conventions, by overriding the getContainerExtension() method.

LANGUAGE: php
CODE:
class AcmeHelloBundle extends Bundle
{
    public function getContainerExtension(): ?ExtensionInterface
    {
        return new UnconventionalExtensionClass();
    }
}

----------------------------------------

TITLE: Configuring Method Calls in Symfony Services (YAML)
DESCRIPTION: This YAML configuration snippet shows how to configure the container to call the setLogger method on the MessageGenerator service, injecting the logger service as an argument.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    App\Service\MessageGenerator:
        # ...
        calls:
            - setLogger: ['@logger']

----------------------------------------

TITLE: Custom Placeholder Formatter
DESCRIPTION: Demonstrates how to customize placeholder formatting for progress indicators globally.

LANGUAGE: php
CODE:
ProgressIndicator::setPlaceholderFormatterDefinition(
    'message',
    static function (ProgressIndicator $progressIndicator): string {
        // Return any arbitrary string
        return 'My custom message';
    }
);

----------------------------------------

TITLE: Displaying Tabs in Symfony Documentation
DESCRIPTION: Illustrates how to create tabbed content in Symfony documentation using the tabs and tab directives, allowing for organized presentation of related information.

LANGUAGE: rst
CODE:
.. tabs:: UX Installation

    .. tab:: Webpack Encore

        Introduction to Webpack

        .. code-block:: yaml

            webpack:
                # ...

    .. tab:: AssetMapper

        Introduction to AssetMapper

        Something else about AssetMapper

----------------------------------------

TITLE: Configuring JSON Manifest File in Symfony
DESCRIPTION: This YAML snippet shows how to configure Symfony to use the JSON manifest file for asset versioning. It sets the path to the manifest.json file in the assets configuration.

LANGUAGE: yaml
CODE:
# config/packages/assets.yaml
framework:
    assets:
        json_manifest_path: '%kernel.project_dir%/public/build/manifest.json'

----------------------------------------

TITLE: Creating a Scheduler Message in PHP
DESCRIPTION: Example of creating a Scheduler message class representing a task to be scheduled.

LANGUAGE: PHP
CODE:
// src/Scheduler/Message/SendDailySalesReports.php
namespace App\Scheduler\Message;

class SendDailySalesReports
{
    public function __construct(private int $id) {}

    public function getId(): int
    {
        return $this->id;
    }
}

----------------------------------------

TITLE: Generating File Names for Uploaded Files in Symfony
DESCRIPTION: This snippet demonstrates different methods for generating file names when moving uploaded files, including using the original name, handling directory uploads, and generating random names with extensions.

LANGUAGE: php
CODE:
// use the original file name
$file->move($directory, $file->getClientOriginalName());

// when "webkitdirectory" upload was used
// otherwise the value will be the same as getClientOriginalName
// $file->move($directory, $file->getClientOriginalPath());

// compute a random name and try to guess the extension (more secure)
$extension = $file->guessExtension();
if (!$extension) {
    // extension cannot be guessed
    $extension = 'bin';
}
$file->move($directory, rand(1, 99999).'.'.$extension);

----------------------------------------

TITLE: Configuring Debug Dump Destination in PHP
DESCRIPTION: PHP configuration for setting the dump_destination parameter using the ContainerConfigurator

LANGUAGE: php
CODE:
// config/packages/debug.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

return static function (ContainerConfigurator $container): void {
    $container->extension('debug', [
        'dump_destination' => 'php://stderr',
    ]);
};

----------------------------------------

TITLE: Locating Configuration Files with FileLocator in PHP
DESCRIPTION: Demonstrates how to use Symfony's FileLocator to search for configuration files in specified directories. It shows how to create a FileLocator instance and use its locate() method to find resources.

LANGUAGE: php
CODE:
use Symfony\Component\Config\FileLocator;

$configDirectories = [__DIR__.'/config'];

$fileLocator = new FileLocator($configDirectories);
$yamlUserFiles = $fileLocator->locate('users.yaml', null, false);

----------------------------------------

TITLE: Parsing and Linting Expressions in PHP
DESCRIPTION: Shows how to parse and lint expressions using the ExpressionLanguage component.

LANGUAGE: php
CODE:
use Symfony\Component\ExpressionLanguage\ExpressionLanguage;

$expressionLanguage = new ExpressionLanguage();

var_dump($expressionLanguage->parse('1 + 2', []));
// displays the AST nodes of the expression which can be
// inspected and manipulated

$expressionLanguage->lint('1 + 2', []); // doesn't throw anything

$expressionLanguage->lint('1 + a', []);
// throws a SyntaxError exception:
// "Variable "a" is not valid around position 5 for expression `1 + a`."

----------------------------------------

TITLE: Viewing Debug Configuration in Symfony CLI
DESCRIPTION: Commands to display default and actual debug configuration values using the Symfony console

LANGUAGE: terminal
CODE:
# displays the default config values defined by Symfony
$ php bin/console config:dump-reference debug

# displays the actual config values used by your application
$ php bin/console debug:config debug

# displays the config values used by your application and replaces the
# environment variables with their actual values
$ php bin/console debug:config --resolve-env debug

----------------------------------------

TITLE: Using ValueResolver Attribute in Symfony Controller
DESCRIPTION: Example of using the ValueResolver attribute to target a specific value resolver in a Symfony controller.

LANGUAGE: php
CODE:
// src/Controller/SessionController.php
namespace App\Controller;

use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Symfony\Component\HttpKernel\Attribute\ValueResolver;
use Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver;
use Symfony\Component\Routing\Attribute\Route;

class SessionController
{
    #[Route('/')]
    public function __invoke(
        #[ValueResolver(SessionValueResolver::class)]
        SessionInterface $session = null
    ): Response
    {
        // ...
    }
}

----------------------------------------

TITLE: Listing All Services in Symfony Container
DESCRIPTION: This command displays all services (public and private) registered in the Symfony container along with their PHP classes. The --show-hidden option can be used to display hidden services (those with IDs starting with a dot).

LANGUAGE: terminal
CODE:
$ php bin/console debug:container

# add this option to display "hidden services" too (those whose ID starts with a dot)
$ php bin/console debug:container --show-hidden

----------------------------------------

TITLE: Deprecating Services in Symfony YAML
DESCRIPTION: Shows how to deprecate a service in Symfony's YAML configuration.

LANGUAGE: yaml
CODE:
# config/services.yaml
App\Service\OldService:
    deprecated:
        package: 'vendor-name/package-name'
        version: '2.8'
        message: The "%service_id%" service is deprecated since vendor-name/package-name 2.8 and will be removed in 3.0.

----------------------------------------

TITLE: Creating a Streamed Response
DESCRIPTION: Shows how to create a StreamedResponse for streaming content back to the client.

LANGUAGE: PHP
CODE:
use Symfony\Component\HttpFoundation\StreamedResponse;

$response = new StreamedResponse();
$response->setCallback(function () {
    var_dump('Hello World');
    flush();
    sleep(2);
    var_dump('Hello World');
    flush();
});
$response->send();

----------------------------------------

TITLE: Creating a Streamed Response
DESCRIPTION: Shows how to create a StreamedResponse for streaming content back to the client.

LANGUAGE: PHP
CODE:
use Symfony\Component\HttpFoundation\StreamedResponse;

$response = new StreamedResponse();
$response->setCallback(function () {
    var_dump('Hello World');
    flush();
    sleep(2);
    var_dump('Hello World');
    flush();
});
$response->send();

----------------------------------------

TITLE: Implementing EmailFormatterManager Class in PHP
DESCRIPTION: Defines an EmailFormatterManager class responsible for managing and retrieving enabled email formatters.

LANGUAGE: php
CODE:
// src/Mail/EmailFormatterManager.php
namespace App\Mail;

class EmailFormatterManager
{
    // ...

    public function getEnabledFormatters(): array
    {
        // code to configure which formatters to use
        $enabledFormatters = [...];

        // ...

        return $enabledFormatters;
    }
}

----------------------------------------

TITLE: CurrencyType Empty Data Configuration
DESCRIPTION: Shows the default empty_data configuration based on multiple and expanded options. Returns empty string for single select dropdowns and empty array for multiple or expanded selections.

LANGUAGE: php
CODE:
// For single select (multiple: false, expanded: false)
"empty_data" => ""

// For multiple select or expanded
"empty_data" => []

----------------------------------------

TITLE: Documenting New Features and Deprecations in Symfony
DESCRIPTION: Shows how to use versionadded and deprecated directives to document new features, behavior changes, and deprecations in Symfony documentation.

LANGUAGE: rst
CODE:
.. versionadded:: 7.2

    ... ... ... was introduced in Symfony 7.2.

.. versionadded:: 7.2

   ... ... ... was introduced in Symfony 7.2. Prior to this,
   ... ... ... ... ... ... ... ... .

.. deprecated:: 7.2

    ... ... ... was deprecated in Symfony 7.2.

----------------------------------------

TITLE: Configuring Optional Dependencies in PHP
DESCRIPTION: Shows how to set an optional service dependency to null using PHP configuration in Symfony.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\Newsletter\NewsletterManager;

return function(ContainerConfigurator $container): void {
    $services = $container->services();

    $services->set(NewsletterManager::class)
        ->args([service('logger')->nullOnInvalid()]);
};

----------------------------------------

TITLE: Converting UUIDs in PHP
DESCRIPTION: Examples of converting UUIDs to different formats using the Symfony Uid component.

LANGUAGE: php
CODE:
$uuid = Uuid::fromString('d9e7a184-5d5b-11ea-a62a-3499710062d0');

$uuid->toBinary();  // string(16) "\xd9\xe7\xa1\x84\x5d\x5b\x11\xea\xa6\x2a\x34\x99\x71\x00\x62\xd0"
$uuid->toBase32();  // string(26) "6SWYGR8QAV27NACAHMK5RG0RPG"
$uuid->toBase58();  // string(22) "TuetYWNHhmuSQ3xPoVLv9M"
$uuid->toRfc4122(); // string(36) "d9e7a184-5d5b-11ea-a62a-3499710062d0"
$uuid->toHex();     // string(34) "0xd9e7a1845d5b11eaa62a3499710062d0"
$uuid->toString();  // string(36) "d9e7a184-5d5b-11ea-a62a-3499710062d0"

----------------------------------------

TITLE: Configuring Webhook Routing in XML
DESCRIPTION: XML configuration for setting up webhook routing in Symfony, using Mailgun as an example.

LANGUAGE: xml
CODE:
<!-- config/packages/framework.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:framework="http://symfony.com/schema/dic/symfony"
           xsi:schemaLocation="http://symfony.com/schema/dic/services
                https://symfony.com/schema/dic/services/services-1.0.xsd
                http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">
    <framework:config>
        <framework:webhook enabled="true">
            <framework:routing type="mailer_mailgun">
                <framework:service>mailer.webhook.request_parser.mailgun</framework:service>
                <framework:secret>%env(MAILER_MAILGUN_SECRET)%</framework:secret>
            </framework:routing>
        </framework:webhook>
    </framework:config>
</container>

----------------------------------------

TITLE: Content Length Event Listener Implementation
DESCRIPTION: Subscriber class that automatically sets Content-Length header for responses when not already present.

LANGUAGE: php
CODE:
namespace Simplex;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;

class ContentLengthListener implements EventSubscriberInterface
{
    public function onResponse(ResponseEvent $event): void
    {
        $response = $event->getResponse();
        $headers = $response->headers;

        if (!$headers->has('Content-Length') && !$headers->has('Transfer-Encoding')) {
            $headers->set('Content-Length', strlen($response->getContent()));
        }
    }

    public static function getSubscribedEvents(): array
    {
        return ['response' => ['onResponse', -255]];
    }
}

----------------------------------------

TITLE: Adding Detailed Browserslist Configuration
DESCRIPTION: Shows how to add a more detailed browserslist configuration that explicitly defines browser support requirements.

LANGUAGE: diff
CODE:
      {
    +  "browserslist": [
    +    "> 0.5%",
    +    "last 2 versions",
    +    "Firefox ESR",
    +    "not dead"
    +  ]
      }

----------------------------------------

TITLE: Customizing CSRF Token Field in Symfony Forms (YAML)
DESCRIPTION: Shows how to customize the CSRF token field name globally for all forms using YAML configuration.

LANGUAGE: yaml
CODE:
# config/packages/framework.yaml
framework:
    # ...
    form:
        csrf_protection:
            enabled: true
            field_name: 'custom_token_name'

----------------------------------------

TITLE: Creating a TTL Index for MongoDbStore in MongoDB
DESCRIPTION: JavaScript code to create a TTL index for the MongoDbStore in MongoDB.

LANGUAGE: JavaScript
CODE:
db.lock.createIndex(
    { "expires_at": 1 },
    { "expireAfterSeconds": 0 }
)

----------------------------------------

TITLE: Clearing Output in Symfony Console Commands
DESCRIPTION: Shows methods for clearing various parts of the console output, including the current line, part of a line, or the entire screen. It also mentions methods to show or hide the cursor.

LANGUAGE: php
CODE:
// clears all the output from the current line
$cursor->clearLine();

// clears all the output from the current line after the current position
$cursor->clearLineAfter();

// clears all the output from the cursors' current position to the end of the screen
$cursor->clearOutput();

// clears the entire screen
$cursor->clearScreen();

// You also can leverage the show() and hide() methods on the cursor.

----------------------------------------

TITLE: Installing Symfony Lock Component via Composer
DESCRIPTION: Command to install the Symfony Lock Component using Composer package manager.

LANGUAGE: shell
CODE:
$ composer require symfony/lock

----------------------------------------

TITLE: Creating Single Command Application using Default Command
DESCRIPTION: Alternative approach to create a single-command application by setting a default command in a standard Symfony Application instance. Shows how to register and configure a command as the default that runs without explicitly specifying its name.

LANGUAGE: php
CODE:
#!/usr/bin/env php
<?php
require __DIR__.'/vendor/autoload.php';

use Acme\Command\DefaultCommand;
use Symfony\Component\Console\Application;

$application = new Application('echo', '1.0.0');
$command = new DefaultCommand();

$application->add($command);

$application->setDefaultCommand($command->getName(), true);
$application->run();

----------------------------------------

TITLE: Implementing EmailConfigurator Class in PHP
DESCRIPTION: Defines an EmailConfigurator class that configures email managers with enabled formatters from the EmailFormatterManager.

LANGUAGE: php
CODE:
// src/Mail/EmailConfigurator.php
namespace App\Mail;

class EmailConfigurator
{
    public function __construct(
        private EmailFormatterManager $formatterManager,
    ) {
    }

    public function configure(EmailFormatterAwareInterface $emailManager): void
    {
        $emailManager->setEnabledFormatters(
            $this->formatterManager->getEnabledFormatters()
        );
    }

    // ...
}

----------------------------------------

TITLE: Creating a Basic Symfony Flex Recipe JSON Structure
DESCRIPTION: Demonstrates the basic structure of a Symfony Flex recipe JSON file, including the manifest and ref fields.

LANGUAGE: json
CODE:
{
    "manifests": {
        "acme/package-name": {
            "manifest": {
            },
            "ref": "7405f3af1312d1f9121afed4dddef636c6c7ff00"
        }
    }
}

----------------------------------------

TITLE: Defining Cidr Constraint in XML
DESCRIPTION: Example of how to configure the Cidr constraint for a property using XML in Symfony.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\NetworkSettings">
        <property name="cidrNotation">
            <constraint name="Cidr"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Implementing Base Repository Class with Common Dependencies in PHP
DESCRIPTION: Abstract base repository class that defines common dependencies like EntityManager and Logger that can be shared across multiple repository classes.

LANGUAGE: php
CODE:
namespace App\Repository;\n\nuse Doctrine\ORM\EntityManager;\nuse Psr\Log\LoggerInterface;\n\nabstract class BaseDoctrineRepository\n{\n    protected LoggerInterface $logger;\n\n    public function __construct(\n        protected EntityManager $entityManager,\n    ) {\n    }\n\n    public function setLogger(LoggerInterface $logger): void\n    {\n        $this->logger = $logger;\n    }\n}

----------------------------------------

TITLE: Configuring Custom Translation Domain in XML
DESCRIPTION: XML configuration for setting a custom translation domain for validation messages.

LANGUAGE: xml
CODE:
<!-- config/packages/validator.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:framework="http://symfony.com/schema/dic/symfony"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/symfony
        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">

    <framework:config>
        <framework:validation
            translation-domain="validation_errors"
        />
    </framework:config>
</container>

----------------------------------------

TITLE: Multi-Application Kernel Implementation
DESCRIPTION: Extended Symfony kernel class supporting multiple applications with shared and app-specific configurations.

LANGUAGE: php
CODE:
namespace Shared;

use Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symfony\Component\HttpKernel\Kernel as BaseKernel;
use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;

class Kernel extends BaseKernel
{
    use MicroKernelTrait;

    public function __construct(string $environment, bool $debug, private string $id)
    {
        parent::__construct($environment, $debug);
    }

    // ... [rest of the kernel implementation]

----------------------------------------

TITLE: Viewing Help for a Specific Symfony Console Command
DESCRIPTION: Demonstrates how to view detailed help information for a specific console command using the '--help' option.

LANGUAGE: terminal
CODE:
$ php bin/console assets:install --help

----------------------------------------

TITLE: Registering Custom Routing Loader
DESCRIPTION: Configuration for registering a custom routing loader service.

LANGUAGE: yaml
CODE:
services:
    App\Routing\CustomLoader:
        tags: [routing.loader]

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Routing\CustomLoader">
            <tag name="routing.loader"/>
        </service>
    </services>
</container>

LANGUAGE: php
CODE:
use App\Routing\CustomLoader;

$container
    ->register(CustomLoader::class)
    ->addTag('routing.loader')
;

----------------------------------------

TITLE: Configuring Debug Dump Destination in YAML
DESCRIPTION: YAML configuration for setting the dump_destination parameter to redirect debug output

LANGUAGE: yaml
CODE:
# config/packages/debug.yaml
debug:
    dump_destination: php://stderr

----------------------------------------

TITLE: Configuring Pull Request State Machine in PHP
DESCRIPTION: PHP configuration using the FrameworkConfig class to define the pull request state machine workflow with states and transitions.

LANGUAGE: php
CODE:
use Symfony\Config\FrameworkConfig;

return static function (FrameworkConfig $framework): void {
    $pullRequest = $framework->workflows()->workflows('pull_request');

    $pullRequest
        ->type('state_machine')
        ->supports(['App\Entity\PullRequest'])
        ->initialMarking(['start']);

    $pullRequest->markingStore()
        ->type('method')
        ->property('currentPlace');

    $pullRequest->place()->name('start');
    $pullRequest->place()->name('coding');
    $pullRequest->place()->name('test');
    $pullRequest->place()->name('review');
    $pullRequest->place()->name('merged');
    $pullRequest->place()->name('closed');

    $pullRequest->transition()
        ->name('submit')
            ->from(['start'])
            ->to(['test']);

    // Additional transitions configuration
};

----------------------------------------

TITLE: Framework Class Implementation with Event Dispatcher
DESCRIPTION: Core Framework class that handles requests and dispatches response events. Includes dependency injection for event dispatcher, URL matcher, and controller/argument resolvers.

LANGUAGE: php
CODE:
namespace Simplex;

use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface;
use Symfony\Component\HttpKernel\Controller\ControllerResolverInterface;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;
use Symfony\Component\Routing\Matcher\UrlMatcherInterface;

class Framework
{
    public function __construct(
        private EventDispatcher $dispatcher,
        private UrlMatcherInterface $matcher,
        private ControllerResolverInterface $controllerResolver,
        private ArgumentResolverInterface $argumentResolver,
    ) {
    }

    public function handle(Request $request): Response
    {
        $this->matcher->getContext()->fromRequest($request);

        try {
            $request->attributes->add($this->matcher->match($request->getPathInfo()));

            $controller = $this->controllerResolver->getController($request);
            $arguments = $this->argumentResolver->getArguments($request, $controller);

            $response = call_user_func_array($controller, $arguments);
        } catch (ResourceNotFoundException $exception) {
            $response = new Response('Not Found', 404);
        } catch (\Exception $exception) {
            $response = new Response('An error occurred', 500);
        }

        // dispatch a response event
        $this->dispatcher->dispatch(new ResponseEvent($response, $request), 'response');

        return $response;
    }

----------------------------------------

TITLE: Initial Composer Dependencies Configuration
DESCRIPTION: Basic composer.json dependencies for a minimal Symfony application showing core required packages.

LANGUAGE: text
CODE:
"require": {
    "...",
    "symfony/console": "^6.1",
    "symfony/flex": "^2.0",
    "symfony/framework-bundle": "^6.1",
    "symfony/yaml": "^6.1"
}

----------------------------------------

TITLE: Symfony Route Configuration
DESCRIPTION: YAML configuration defining routes for the blog application's list and show pages.

LANGUAGE: yaml
CODE:
# config/routes.yaml
blog_list:
    path:     /blog
    controller: App\Controller\BlogController::list

blog_show:
    path:     /blog/show/{id}
    controller: App\Controller\BlogController::show

----------------------------------------

TITLE: Updating Composer Dependencies for Symfony 3.x Compatibility
DESCRIPTION: Modified composer.json configuration that supports both Symfony 2.x and 3.x components using the ~2.N|~3.0 constraint pattern.

LANGUAGE: json
CODE:
{
    "require": {
        "symfony/framework-bundle": "~2.7|~3.0",
        "symfony/finder": "~2.7|~3.0",
        "symfony/validator": "~2.7|~3.0"
    }
}

----------------------------------------

TITLE: Determining Web Server User and Setting ACL Permissions in Symfony
DESCRIPTION: This bash script determines the web server user and sets ACL permissions for the Symfony var directory. It grants read, write, and execute permissions to both the system user and the web server user for existing and future files and folders.

LANGUAGE: bash
CODE:
$ HTTPDUSER=$(ps axo user,comm | grep -E '[a]pache|[h]ttpd|[_]www|[w]ww-data|[n]ginx' | grep -v root | head -1 | cut -d\  -f1)

# if the following commands don't work, try adding `-n` option to `setfacl`

# set permissions for future files and folders
$ sudo setfacl -dR -m u:"$HTTPDUSER":rwX -m u:$(whoami):rwX var
# set permissions on the existing files and folders
$ sudo setfacl -R -m u:"$HTTPDUSER":rwX -m u:$(whoami):rwX var

----------------------------------------

TITLE: Loading Services in Bundle Class with AbstractBundle
DESCRIPTION: Example of loading service configurations directly in a bundle class that extends AbstractBundle. Shows how to import configuration files and modify services and parameters.

LANGUAGE: php
CODE:
class AcmeHelloBundle extends AbstractBundle
{
    public function loadExtension(array $config, ContainerConfigurator $container, ContainerBuilder $builder): void
    {
        // load an XML, PHP or YAML file
        $container->import('../config/services.xml');

        // you can also add or replace parameters and services
        $container->parameters()
            ->set('acme_hello.phrase', $config['phrase'])
        ;

        if ($config['scream']) {
            $container->services()
                ->get('acme_hello.printer')
                    ->class(ScreamingPrinter::class)
            ;
        }
    }
}

----------------------------------------

TITLE: Using Integer Processor for Environment Variables in YAML
DESCRIPTION: Example of using the integer processor to convert an environment variable value to an integer in a YAML configuration file.

LANGUAGE: yaml
CODE:
# config/packages/framework.yaml
framework:
    router:
        http_port: '%env(int:HTTP_PORT)%'

----------------------------------------

TITLE: Adding PHPDoc Return Types
DESCRIPTION: Command to add @return PHPDoc annotations to public and protected methods that cannot have native return types added yet.

LANGUAGE: shell
CODE:
$ SYMFONY_PATCH_TYPE_DECLARATIONS="force=phpdoc&php=7.4" ./vendor/bin/patch-type-declarations

----------------------------------------

TITLE: Defining UniqueEntity Constraint in PHP with Attributes
DESCRIPTION: Example of how to use the UniqueEntity constraint on a User entity class using PHP attributes. It ensures the email field is unique across all users.

LANGUAGE: php
CODE:
// src/Entity/User.php
namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;

// DON'T forget the following use statement!!!
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

use Symfony\Component\Validator\Constraints as Assert;

#[ORM\Entity]
#[UniqueEntity('email')]
class User
{
    #[ORM\Column(name: 'email', type: 'string', length: 255, unique: true)]
    #[Assert\Email]
    protected string $email;
}

----------------------------------------

TITLE: Configuring Routes in YAML Format for Symfony
DESCRIPTION: Demonstrates how to define a route in YAML configuration. The route named 'blog_list' matches the /blog path and calls the list() method of BlogController.

LANGUAGE: yaml
CODE:
# config/routes.yaml
blog_list:
    path:       /blog
    controller: App\Controller\BlogController::list

----------------------------------------

TITLE: Overriding Cache Directory in Kernel Class
DESCRIPTION: This PHP code demonstrates how to override the cache directory by modifying the getCacheDir() method in the Kernel class. It sets the cache directory to var/{environment}/cache/.

LANGUAGE: php
CODE:
// src/Kernel.php

// ...
class Kernel extends BaseKernel
{
    // ...

    public function getCacheDir(): string
    {
        return dirname(__DIR__).'/var/'.$this->environment.'/cache';
    }
}

----------------------------------------

TITLE: Configuring PHPUnit Bootstrap File in XML Configuration
DESCRIPTION: Example of how to configure the bootstrap file in phpunit.xml.dist for projects not using Symfony Flex.

LANGUAGE: xml
CODE:
<!-- phpunit.xml.dist -->
<?xml version="1.0" encoding="UTF-8" ?>
<phpunit
    bootstrap="tests/bootstrap.php"
>
    <!-- ... -->
</phpunit>

----------------------------------------

TITLE: Configuring Collection Constraint in YAML
DESCRIPTION: YAML configuration for the Collection constraint, validating email and bio fields in a profile data array.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        profileData:
            - Collection:
                fields:
                    personal_email:
                        - Email: ~
                    short_bio:
                        - NotBlank: ~
                        - Length:
                            max:   100
                            maxMessage: Your short bio is too long!
                allowMissingFields: true

----------------------------------------

TITLE: Listing Cache Warmers
DESCRIPTION: Command to list all registered cache warmers in a Symfony application.

LANGUAGE: shell
CODE:
$ php bin/console debug:container --tag=kernel.cache_warmer

----------------------------------------

TITLE: Installing Symfony Workflow Component via Composer
DESCRIPTION: This snippet demonstrates how to install the Symfony Workflow component using Composer. It requires running the command in a terminal.

LANGUAGE: bash
CODE:
$ composer require symfony/workflow

----------------------------------------

TITLE: Using AsTargetedValueResolver Attribute in Symfony
DESCRIPTION: Example of using the AsTargetedValueResolver attribute to configure a custom value resolver in Symfony.

LANGUAGE: php
CODE:
// src/ValueResolver/IdentifierValueResolver.php
namespace App\ValueResolver;

use Symfony\Component\HttpKernel\Attribute\AsTargetedValueResolver;
use Symfony\Component\HttpKernel\Controller\ValueResolverInterface;

#[AsTargetedValueResolver('booking_id')]
class BookingIdValueResolver implements ValueResolverInterface
{
    // ...
}

----------------------------------------

TITLE: Response Event Class Definition
DESCRIPTION: Custom event class that wraps Response and Request objects for event dispatching.

LANGUAGE: php
CODE:
namespace Simplex;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Contracts\EventDispatcher\Event;

class ResponseEvent extends Event
{
    public function __construct(
        private Response $response,
        private Request $request,
    ) {
    }

    public function getResponse(): Response
    {
        return $this->response;
    }

    public function getRequest(): Request
    {
        return $this->request;
    }
}

----------------------------------------

TITLE: Installing Symfony Translation Component
DESCRIPTION: Command to install the Symfony translation component using Composer.

LANGUAGE: shell
CODE:
$ composer require symfony/translation

----------------------------------------

TITLE: Setting Verbosity Levels in Symfony Console Commands
DESCRIPTION: Examples of running Symfony console commands with different verbosity levels using command-line options.

LANGUAGE: bash
CODE:
# suppress all output, including errors
$ php bin/console some-command --silent

# suppress all output (even the command result messages) but display errors
$ php bin/console some-command -q
$ php bin/console some-command --quiet

# normal behavior, no option required (display only the useful messages)
$ php bin/console some-command

# increase verbosity of messages
$ php bin/console some-command -v

# display also the informative non essential messages
$ php bin/console some-command -vv

# display all messages (useful to debug errors)
$ php bin/console some-command -vvv

----------------------------------------

TITLE: Forcing Progress Indicator Format
DESCRIPTION: Shows how to specify a particular format for the progress indicator rather than using the default verbosity-based format.

LANGUAGE: php
CODE:
$progressIndicator = new ProgressIndicator($output, 'verbose');

----------------------------------------

TITLE: Implementing EventSubscriber for Custom Access Denied Handling in Symfony
DESCRIPTION: This PHP code shows how to create an event subscriber to handle all AccessDeniedExceptions. It allows for custom logging and response modification for all access denied scenarios.

LANGUAGE: php
CODE:
// src/EventListener/AccessDeniedListener.php
namespace App\EventListener;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Event\ExceptionEvent;
use Symfony\Component\HttpKernel\KernelEvents;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;

class AccessDeniedListener implements EventSubscriberInterface
{
    public static function getSubscribedEvents(): array
    {
        return [
            // the priority must be greater than the Security HTTP
            // ExceptionListener, to make sure it's called before
            // the default exception listener
            KernelEvents::EXCEPTION => ['onKernelException', 2],
        ];
    }

    public function onKernelException(ExceptionEvent $event): void
    {
        $exception = $event->getThrowable();
        if (!$exception instanceof AccessDeniedException) {
            return;
        }

        // ... perform some action (e.g. logging)

        // optionally set the custom response
        $event->setResponse(new Response(null, 403));

        // or stop propagation (prevents the next exception listeners from being called)
        //$event->stopPropagation();
    }
}

----------------------------------------

TITLE: Configuring Validation Groups for Multiple Submit Buttons in PHP
DESCRIPTION: Example demonstrating how to set different validation groups for multiple submit buttons in a form wizard.

LANGUAGE: PHP
CODE:
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
// ...

$form = $this->createFormBuilder($user)
    ->add('previousStep', SubmitType::class, [
        'validation_groups' => false,
    ])
    ->add('nextStep', SubmitType::class, [
        'validation_groups' => ['Registration'],
    ])
    ->getForm();

----------------------------------------

TITLE: Installing Symfony String Component
DESCRIPTION: Command to install the Symfony String component using Composer.

LANGUAGE: shell
CODE:
$ composer require symfony/string

----------------------------------------

TITLE: Configuring Error Routes for Development in Symfony
DESCRIPTION: YAML configuration to load special routes for previewing error pages during development in Symfony.

LANGUAGE: yaml
CODE:
# config/routes/framework.yaml
when@dev:
    _errors:
        resource: '@FrameworkBundle/Resources/config/routing/errors.xml'
        prefix:   /_error

----------------------------------------

TITLE: Branch Change During PR Merge - Terminal Commands
DESCRIPTION: Commands demonstrating how to change the target branch during a pull request merge using the gh tool.

LANGUAGE: terminal
CODE:
$ gh merge 11160 -s 4.4

----------------------------------------

TITLE: Installing CssSelector Component via Composer
DESCRIPTION: Shows how to install the Symfony CssSelector component using Composer. This is a prerequisite for using the component in a PHP project.

LANGUAGE: shell
CODE:
$ composer require symfony/css-selector

----------------------------------------

TITLE: Accessing Front Controller in URL (PHP)
DESCRIPTION: Demonstrates how to access a specific front controller by including it in the URL. This is useful for switching to custom front controllers located in the public directory.

LANGUAGE: text
CODE:
http://localhost/index.php/some/path/...

----------------------------------------

TITLE: Adding Field-Level Constraints to Symfony Form
DESCRIPTION: Demonstrates how to add validation constraints to individual fields in a Symfony form that is not mapped to an object.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;

public function buildForm(FormBuilderInterface $builder, array $options): void
{
    $builder
        ->add('firstName', TextType::class, [
            'constraints' => new Length(min: 3),
        ])
        ->add('lastName', TextType::class, [
            'constraints' => [
                new NotBlank(),
                new Length(min: 3),
            ],
        ])
    ;
}

----------------------------------------

TITLE: Configuring Custom Route Loader Service in YAML
DESCRIPTION: Example of configuring a custom route loader service in Symfony using YAML format. It adds the 'routing.loader' tag to the service.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    # ...

    App\Routing\ExtraLoader:
        tags: [routing.loader]

----------------------------------------

TITLE: Git Config for PR Discussion Notes
DESCRIPTION: Configuration needed in .git/config file to fetch Git notes containing pull request discussions

LANGUAGE: ini
CODE:
fetch = +refs/notes/*:refs/notes/*

----------------------------------------

TITLE: Implementing Basic Property and Getter Method in PHP
DESCRIPTION: Demonstrates how to set up the basic property and getter method that will be validated with the IsFalse constraint.

LANGUAGE: php
CODE:
protected string $state;

protected array $invalidStates = [];

public function isStateInvalid(): bool
{
    return in_array($this->state, $this->invalidStates);
}

----------------------------------------

TITLE: Configuring External Dependencies in Symfony Encore
DESCRIPTION: This JavaScript snippet demonstrates how to configure external dependencies in Symfony Encore to exclude certain packages from the output bundles.

LANGUAGE: javascript
CODE:
// this won't include jQuery and React in the output bundles generated
// by Webpack Encore. You'll need to load those dependencies yourself
// (e.g with a `<script>` tag) to make the application or website work.
Encore.addExternals({
    jquery: 'jQuery',
    react: 'react'
})

----------------------------------------

TITLE: Defining Customer Entity with Location Fields
DESCRIPTION: PHP class definition for Customer entity containing personal and location properties.

LANGUAGE: php
CODE:
namespace App\Entity;

class Customer
{
    private string $firstName;
    private string $lastName;

    private string  $address;
    private string $zipcode;
    private string $city;
    private string $country;
}

----------------------------------------

TITLE: Demonstrating Sphinx Formatting in RestructuredText
DESCRIPTION: This snippet shows how to format headings, code blocks, and links in Sphinx using RestructuredText syntax.

LANGUAGE: restructuredtext
CODE:
Example
=======

When you are working on the docs, you should follow the
`Symfony Documentation`_ standards.

Level 2
-------

A PHP example would be::

    echo 'Hello World';

Level 3
~~~~~~~

.. code-block:: php

    echo 'You cannot use the :: shortcut here';

.. _`Symfony Documentation`: https://symfony.com/doc

----------------------------------------

TITLE: Creating Service Aliases in Symfony XML
DESCRIPTION: Demonstrates how to create a service alias using Symfony's XML configuration.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Mail\PhpMailer" public="false"/>

        <service id="app.mailer" alias="App\Mail\PhpMailer"/>
    </services>
</container>

----------------------------------------

TITLE: Displaying Tagged Services in Symfony Application
DESCRIPTION: Command to display all tagged services in a Symfony application.

LANGUAGE: shell
CODE:
$ php bin/console debug:container --tags

----------------------------------------

TITLE: Tracking Remote Branch for Bug Fixes
DESCRIPTION: Steps to track a remote branch and create a new branch for bug fixes.

LANGUAGE: bash
CODE:
$ git checkout --track origin/5.4
$ git checkout -b BRANCH_NAME 5.4

----------------------------------------

TITLE: Configuring UniqueEntity Constraint in YAML
DESCRIPTION: Example of how to configure the UniqueEntity constraint for a User entity using YAML format in a validation configuration file.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\User:
    constraints:
        - Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity: email
    properties:
        email:
            - Email: ~

----------------------------------------

TITLE: Rendering Asciinema Recording to GIF
DESCRIPTION: Command to render an Asciinema recording to a GIF file using agg. It specifies the path to agg, uses a custom render script, and sets the output dimensions.

LANGUAGE: bash
CODE:
AGG_PATH=/path/to/agg ./_images/sources/ascii-render.sh recording.cast --cols 45 --rows 20

----------------------------------------

TITLE: Apache Configuration for ETag Preservation
DESCRIPTION: Apache configuration to preserve both original and modified ETags when using compression with mod_deflate or mod_brotli.

LANGUAGE: apache
CODE:
RequestHeader edit "If-None-Match" '^"((.*)-(gzip|br))"$' '"$1", "$2"'

----------------------------------------

TITLE: Default Symfony Project Directory Structure
DESCRIPTION: The recommended default directory structure for a Symfony project. It's flat, self-explanatory, and not tightly coupled to Symfony.

LANGUAGE: text
CODE:
your_project/
├─ assets/
├─ bin/
│  └─ console
├─ config/
│  ├─ packages/
│  ├─ routes/
│  └─ services.yaml
├─ migrations/
├─ public/
│  ├─ build/
│  └─ index.php
├─ src/
│  ├─ Kernel.php
│  ├─ Command/
│  ├─ Controller/
│  ├─ DataFixtures/
│  ├─ Entity/
│  ├─ EventSubscriber/
│  ├─ Form/
│  ├─ Repository/
│  ├─ Security/
│  └─ Twig/
├─ templates/
├─ tests/
├─ translations/
├─ var/
│  ├─ cache/
│  └─ log/
└─ vendor/

----------------------------------------

TITLE: Configuring Framework Bundle Form Integration in PHP
DESCRIPTION: Example of enabling form integration in the FrameworkBundle using PHP configuration.

LANGUAGE: php
CODE:
// config/packages/framework.php
use Symfony\Config\FrameworkConfig;

return static function (FrameworkConfig $framework): void {
    $framework->form()->enabled(true);
};

----------------------------------------

TITLE: Initializing SymfonyStyle in a Symfony Console Command
DESCRIPTION: Demonstrates how to create a SymfonyStyle instance in a Symfony console command's execute method. This allows the use of styling helper methods for output.

LANGUAGE: PHP
CODE:
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

class GreetCommand extends Command
{
    // ...

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);
        $io->title('Lorem Ipsum Dolor Sit Amet');

        // ...
    }
}

----------------------------------------

TITLE: Using Custom Route Loader in YAML Configuration
DESCRIPTION: Example of using a custom route loader in Symfony's routing configuration using YAML format. It specifies the custom 'extra' type.

LANGUAGE: yaml
CODE:
# config/routes.yaml
app_extra:
    resource: .
    type: extra

----------------------------------------

TITLE: Defining Routes in XML Format for Symfony
DESCRIPTION: Shows how to configure a route using XML. The route with ID 'blog_list' matches the /blog path and executes the list() method of BlogController.

LANGUAGE: xml
CODE:
<!-- config/routes.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<routes xmlns="http://symfony.com/schema/routing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/routing
        https://symfony.com/schema/routing/routing-1.0.xsd">

    <route id="blog_list" path="/blog"
           controller="App\Controller\BlogController::list"/>
</routes>

----------------------------------------

TITLE: Defining Routes in XML Format for Symfony
DESCRIPTION: Shows how to configure a route using XML. The route with ID 'blog_list' matches the /blog path and executes the list() method of BlogController.

LANGUAGE: xml
CODE:
<!-- config/routes.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<routes xmlns="http://symfony.com/schema/routing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/routing
        https://symfony.com/schema/routing/routing-1.0.xsd">

    <route id="blog_list" path="/blog"
           controller="App\Controller\BlogController::list"/>
</routes>

----------------------------------------

TITLE: Modifying Webpack Config in Symfony Encore
DESCRIPTION: This snippet demonstrates how to fetch and modify the Webpack configuration generated by Encore, specifically adding a new file extension to be resolved.

LANGUAGE: javascript
CODE:
// webpack.config.js

const Encore = require('@symfony/webpack-encore');

// ... all Encore config here

// fetch the config, then modify it!
const config = Encore.getWebpackConfig();

// add an extension
config.resolve.extensions.push('json');

// export the final config
module.exports = config;

----------------------------------------

TITLE: Grouping Options in ChoiceType
DESCRIPTION: Illustrates how to group options in a ChoiceType field using a multi-dimensional choices array.

LANGUAGE: PHP
CODE:
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
// ...

$builder->add('stockStatus', ChoiceType::class, [
    'choices' => [
        'Main Statuses' => [
            'Yes' => 'stock_yes',
            'No' => 'stock_no',
        ],
        'Out of Stock Statuses' => [
            'Backordered' => 'stock_backordered',
            'Discontinued' => 'stock_discontinued',
        ],
    ],
]);

----------------------------------------

TITLE: Integrating LocationType in CustomerType
DESCRIPTION: Updated CustomerType form class incorporating the LocationType form.

LANGUAGE: php
CODE:
namespace App\Form\Type;

use App\Entity\Customer;
use Symfony\Component\Form\AbstractType;

class CustomerType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        // ...

        $builder->add('bar', LocationType::class, [
            'data_class' => Customer::class,
        ]);
    }
}

----------------------------------------

TITLE: Adapting PSR-16 Cache to PSR-6 in PHP
DESCRIPTION: This code snippet shows how to use Symfony's Psr16Adapter to wrap a PSR-16 cache object and use it as a PSR-6 cache. It demonstrates creating the adapter and using it with a class that expects a PSR-6 cache.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\Psr16Adapter;

// $psr16Cache is the PSR-16 object that you want to use as a PSR-6 one

// a PSR-6 cache that uses your cache internally!
$psr6Cache = new Psr16Adapter($psr16Cache);

// now use this wherever you want
$githubApiClient = new GitHubApiClient($psr6Cache);

----------------------------------------

TITLE: Configuring Couchbase Connection with Multiple DSNs in PHP
DESCRIPTION: This snippet demonstrates how to create and configure a Couchbase Collection instance using an array of Data Source Name (DSN) strings to register multiple servers.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\CouchbaseCollectionAdapter;

// pass an array of DSN strings to register multiple servers with the client
$client = CouchbaseCollectionAdapter::createConnection([
    'couchbase://10.0.0.100',
    'couchbase://10.0.0.101',
    'couchbase://10.0.0.102',
    // etc...
]);

----------------------------------------

TITLE: Setting Container Build Time in PHP
DESCRIPTION: This snippet shows how to set the kernel.container_build_time parameter in a PHP configuration file to achieve reproducible builds.

LANGUAGE: php
CODE:
// config/services.php

// ...
$container->setParameter('kernel.container_build_time', '1234567890');

----------------------------------------

TITLE: Defining Negative Constraint using PHP Attributes
DESCRIPTION: Example of using the Negative constraint on a property in a PHP class using attributes. This ensures the 'withdraw' property is a negative number.

LANGUAGE: php
CODE:
// src/Entity/TransferItem.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class TransferItem
{
    #[Assert\Negative]
    protected int $withdraw;
}

----------------------------------------

TITLE: Setting Custom .env Path in Console Script
DESCRIPTION: This PHP code demonstrates how to set a custom path for the .env file in the bin/console script. It uses the APP_RUNTIME_OPTIONS server variable.

LANGUAGE: php
CODE:
// bin/console

// ...
$_SERVER['APP_RUNTIME_OPTIONS']['dotenv_path'] = 'some/custom/path/to/.env';

require_once dirname(__DIR__).'/vendor/autoload_runtime.php';
// ...

----------------------------------------

TITLE: Using Custom MetadataFactory in Symfony Validator
DESCRIPTION: Demonstrates how to use a custom metadata factory implementation with Symfony's Validator component for advanced metadata handling.

LANGUAGE: php
CODE:
use Acme\Validation\CustomMetadataFactory;
use Symfony\Component\Validator\Validation;

$validator = Validation::createValidatorBuilder()
    ->setMetadataFactory(new CustomMetadataFactory(...))
    ->getValidator();

----------------------------------------

TITLE: Displaying Security Configuration in Symfony CLI
DESCRIPTION: Commands to display default and actual security configuration values using the Symfony CLI.

LANGUAGE: bash
CODE:
# displays the default config values defined by Symfony
$ php bin/console config:dump-reference security

# displays the actual config values used by your application
$ php bin/console debug:config security

----------------------------------------

TITLE: Using StaticVersionStrategy for Asset Versioning in PHP
DESCRIPTION: Shows how to use the StaticVersionStrategy to append a version to asset URLs.

LANGUAGE: php
CODE:
use Symfony\Component\Asset\Package;
use Symfony\Component\Asset\VersionStrategy\StaticVersionStrategy;

$package = new Package(new StaticVersionStrategy('v1'));

// Absolute path
echo $package->getUrl('/image.png');
// result: /image.png?v1

// Relative path
echo $package->getUrl('image.png');
// result: image.png?v1

----------------------------------------

TITLE: Translation Message File in YAML
DESCRIPTION: Example of a YAML translation file containing message translations

LANGUAGE: yaml
CODE:
# translations/messages.fr.yaml
Symfony is great: Symfony est génial

----------------------------------------

TITLE: Configuring Rate Limiter Storage in YAML
DESCRIPTION: Example of configuring a custom cache pool for a rate limiter using YAML format.

LANGUAGE: yaml
CODE:
# config/packages/rate_limiter.yaml
framework:
    rate_limiter:
        anonymous_api:
            # ...
            cache_pool: 'cache.anonymous_rate_limiter'

----------------------------------------

TITLE: Configuring AtLeastOneOf Constraint in YAML
DESCRIPTION: YAML configuration example for AtLeastOneOf constraint validation rules. Defines validation rules for password and grades properties in the Student entity.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Student:
    properties:
        password:
            - AtLeastOneOf:
                - Regex: '/#/'
                - Length:
                    min: 10
        grades:
            - AtLeastOneOf:
                - Count:
                    min: 3
                - All:
                    - GreaterThanOrEqual: 5

----------------------------------------

TITLE: Updating Task Entity with Category Relationship in PHP
DESCRIPTION: Adds a category property to the Task class with Type and Valid constraints, and getter/setter methods.

LANGUAGE: php
CODE:
// ...

class Task
{
    // ...

    #[Assert\Type(type: Category::class)]
    #[Assert\Valid]
    protected ?Category $category = null;

    // ...

    public function getCategory(): ?Category
    {
        return $this->category;
    }

    public function setCategory(?Category $category): void
    {
        $this->category = $category;
    }
}

----------------------------------------

TITLE: Including Required Files in Service Definitions in Symfony PHP
DESCRIPTION: Demonstrates how to include additional files before a service is loaded using setFile method.

LANGUAGE: php
CODE:
$definition->setFile('/src/path/to/file/foo.php');

----------------------------------------

TITLE: Sequential Validation using PHP Configuration
DESCRIPTION: Example of configuring sequential validation using PHP method to load validator metadata for a Place class.

LANGUAGE: php
CODE:
// src/Localization/Place.php
namespace App\Localization;

use App\Validator\Constraints as AcmeAssert;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Place
{
    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('address', new Assert\Sequentially([
            new Assert\NotNull(),
            new Assert\Type('string'),
            new Assert\Length(min: 10),
            new Assert\Regex(self::ADDRESS_REGEX),
            new AcmeAssert\Geolocalizable(),
        ]));
    }
}

----------------------------------------

TITLE: Listing Available Symfony Console Commands
DESCRIPTION: Shows how to list all available console commands in a Symfony application using the 'list' command.

LANGUAGE: terminal
CODE:
$ php bin/console list

----------------------------------------

TITLE: Displaying Default and Actual Config Values
DESCRIPTION: Shows how to display the default config values defined by Symfony and the actual config values used by your application using console commands.

LANGUAGE: bash
CODE:
# displays the default config values defined by Symfony
$ php bin/console config:dump-reference framework

# displays the actual config values used by your application
$ php bin/console debug:config framework

----------------------------------------

TITLE: Defining Service Configuration in YAML
DESCRIPTION: Example of creating a separate mailer service configuration file in YAML format. Shows basic structure for parameters and services.

LANGUAGE: yaml
CODE:
# config/services/mailer.yaml
parameters:
    # ... some parameters

services:
    # ... some services

----------------------------------------

TITLE: Configuring Trusted Proxies in Symfony XML
DESCRIPTION: XML configuration for setting trusted proxy IPs and headers in Symfony framework configuration.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:framework="http://symfony.com/schema/dic/symfony">
    <framework:config>
        <framework:trusted-proxies>192.0.0.1,10.0.0.0/8</framework:trusted-proxies>
        <framework:trusted-header>x-forwarded-for</framework:trusted-header>
        <framework:trusted-header>x-forwarded-host</framework:trusted-header>
        <framework:trusted-header>x-forwarded-proto</framework:trusted-header>
        <framework:trusted-header>x-forwarded-port</framework:trusted-header>
        <framework:trusted-header>x-forwarded-prefix</framework:trusted-header>
    </framework:config>
</container>

----------------------------------------

TITLE: Configuring Doctrine DBAL in XML
DESCRIPTION: XML configuration for Doctrine DBAL, including database connection settings and custom types.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:doctrine="http://symfony.com/schema/dic/doctrine"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/doctrine
        https://symfony.com/schema/dic/doctrine/doctrine-1.0.xsd">

    <doctrine:config>
        <doctrine:dbal
            name="default"
            dbname="database"
            host="localhost"
            port="1234"
            user="user"
            password="secret"
            driver="pdo_mysql"
            driver-class="App\DBAL\MyDatabaseDriver"
            path="%kernel.project_dir%/var/data/data.sqlite"
            memory="true"
            unix-socket="/tmp/mysql.sock"
            wrapper-class="App\DBAL\MyConnectionWrapper"
            charset="utf8mb4"
            logging="%kernel.debug%"
            platform-service="App\DBAL\MyDatabasePlatformService"
            server-version="8.0.37">

            <doctrine:option key="foo">bar</doctrine:option>
            <doctrine:mapping-type name="enum">string</doctrine:mapping-type>
            <doctrine:type name="custom">App\DBAL\MyCustomType</doctrine:type>
        </doctrine:dbal>
    </doctrine:config>
</container>

----------------------------------------

TITLE: Implementing getSupportedTypes Method for Performance Optimization
DESCRIPTION: This code snippet demonstrates how to implement the getSupportedTypes method in a custom normalizer to optimize performance by declaring supported types and their cacheability.

LANGUAGE: php
CODE:
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class MyNormalizer implements NormalizerInterface
{
    // ...

    public function getSupportedTypes(?string $format): array
    {
        return [
            'object' => null,             // Doesn't support any classes or interfaces
            '*' => false,                 // Supports any other types, but the result is not cacheable
            MyCustomClass::class => true, // Supports MyCustomClass and result is cacheable
        ];
    }
}

----------------------------------------

TITLE: Implementing DataMapperInterface in ColorType Form
DESCRIPTION: Creates a ColorType form class that implements DataMapperInterface to handle mapping between Color objects and form fields.

LANGUAGE: php
CODE:
// src/Form/ColorType.php
namespace App\Form;

use App\Painting\Color;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\DataMapperInterface;
use Symfony\Component\Form\Exception\UnexpectedTypeException;
use Symfony\Component\Form\FormInterface;

final class ColorType extends AbstractType implements DataMapperInterface
{
    // ...

    /**
     * @param Color|null $viewData
     */
    public function mapDataToForms($viewData, \Traversable $forms): void
    {
        // there is no data yet, so nothing to prepopulate
        if (null === $viewData) {
            return;
        }

        // invalid data type
        if (!$viewData instanceof Color) {
            throw new UnexpectedTypeException($viewData, Color::class);
        }

        /** @var FormInterface[] $forms */
        $forms = iterator_to_array($forms);

        // initialize form field values
        $forms['red']->setData($viewData->getRed());
        $forms['green']->setData($viewData->getGreen());
        $forms['blue']->setData($viewData->getBlue());
    }

    public function mapFormsToData(\Traversable $forms, &$viewData): void
    {
        /** @var FormInterface[] $forms */
        $forms = iterator_to_array($forms);

        // as data is passed by reference, overriding it will change it in
        // the form object as well
        // beware of type inconsistency, see caution below
        $viewData = new Color(
            $forms['red']->getData(),
            $forms['green']->getData(),
            $forms['blue']->getData()
        );
    }
}

----------------------------------------

TITLE: Defining ICU MessageFormat Translations in PHP
DESCRIPTION: Example of defining translations using ICU MessageFormat syntax in a PHP file. Shows the same translations as the YAML and XML examples but in PHP array format.

LANGUAGE: php
CODE:
// translations/messages+intl-icu.en.php
return [
    'say_hello' => "Hello {name}!",
    'invitation_title' => '{organizer_gender, select,
        female   {{organizer_name} has invited you to her party!}
        male     {{organizer_name} has invited you to his party!}
        multiple {{organizer_name} have invited you to their party!}
        other    {{organizer_name} has invited you to their party!}
    }',
    'num_of_apples' => '{apples, plural,
        =0    {There are no apples}
        =1    {There is one apple...}
        other {There are # apples!}
    }',
];

----------------------------------------

TITLE: Demonstrating Optional Argument Addition in PHP Method
DESCRIPTION: Shows how to add an optional argument to a public method in a backward compatible way using code comments and PHPDoc.

LANGUAGE: php
CODE:
public function say(string $text, /* bool $stripWhitespace = true */): void
{
}

----------------------------------------

TITLE: Disabling Traverse Constraint in XML
DESCRIPTION: Demonstrates how to disable the Traverse constraint for the BookCollection class using XML format in the validation configuration file.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\BookCollection">
        <constraint name="Traverse">false</constraint>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Validating IP Address using YAML Configuration
DESCRIPTION: Shows how to configure IP address validation using YAML format in Symfony's validation configuration.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        ipAddress:
            - Ip: ~

----------------------------------------

TITLE: Injecting Expression Results in XML Configuration for Symfony Services
DESCRIPTION: This snippet shows how to use expressions to inject the result of a method call from one service into another service's constructor argument using XML configuration.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <!-- ... -->

        <service id="App\Mail\MailerConfiguration"></service>

        <service id="App\Mailer">
            <argument type="expression">service('App\\Mail\\MailerConfiguration').getMailerMethod()</argument>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Implementing IBAN Validation using PHP Attributes
DESCRIPTION: Example of applying IBAN validation to a Transaction entity using PHP attributes. The constraint ensures the bankAccountNumber property contains a valid IBAN.

LANGUAGE: php
CODE:
// src/Entity/Transaction.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Transaction
{
    #[Assert\Iban(
        message: 'This is not a valid International Bank Account Number (IBAN).',
    )]
    protected string $bankAccountNumber;
}

----------------------------------------

TITLE: Creating a Custom Template for PostalAddressType in Twig
DESCRIPTION: This Twig template defines a custom rendering for the PostalAddressType form field.

LANGUAGE: Twig
CODE:
{# templates/form/custom_types.html.twig #}
{% block postal_address_row %}
    {% for child in form.children|filter(child => not child.rendered) %}
        <div class="form-group">
            {{ form_label(child) }}
            {{ form_widget(child) }}
            {{ form_help(child) }}
            {{ form_errors(child) }}
        </div>
    {% endfor %}
{% endblock %}

----------------------------------------

TITLE: Configuring Doctrine ORM in YAML
DESCRIPTION: YAML configuration for Doctrine ORM, including caching and mapping settings.

LANGUAGE: yaml
CODE:
doctrine:
    orm:
        auto_mapping: true
        # the standard distribution overrides this to be true in debug, false otherwise
        auto_generate_proxy_classes: false
        proxy_namespace: Proxies
        proxy_dir: '%kernel.cache_dir%/doctrine/orm/Proxies'
        default_entity_manager: default
        metadata_cache_driver: array
        query_cache_driver: array
        result_cache_driver: array
        naming_strategy: doctrine.orm.naming_strategy.default

----------------------------------------

TITLE: Initializing Main JavaScript File for Encore
DESCRIPTION: Main JavaScript file (app.js) that imports CSS and initializes Stimulus application.

LANGUAGE: javascript
CODE:
// assets/app.js
import './styles/app.css';
import './bootstrap';

----------------------------------------

TITLE: Debugging Kernel Request Event - Terminal Command
DESCRIPTION: Command to display registered listeners and priorities for kernel.request event

LANGUAGE: terminal
CODE:
$ php bin/console debug:event-dispatcher kernel.request

----------------------------------------

TITLE: Defining BIC Validation in XML
DESCRIPTION: XML configuration for implementing BIC validation constraints on a Transaction entity.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Transaction">
        <property name="businessIdentifierCode">
            <constraint name="Bic"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Converting ULIDs in PHP
DESCRIPTION: Examples of converting ULIDs to different formats using the Symfony Uid component.

LANGUAGE: php
CODE:
$ulid = Ulid::fromString('01E439TP9XJZ9RPFH3T1PYBCR8');

$ulid->toBinary();  // string(16) "\x01\x71\x06\x9d\x59\x3d\x97\xd3\x8b\x3e\x23\xd0\x6d\xe5\xb3\x08"
$ulid->toBase32();  // string(26) "01E439TP9XJZ9RPFH3T1PYBCR8"
$ulid->toBase58();  // string(22) "1BKocMc5BnrVcuq2ti4Eqm"
$ulid->toRfc4122(); // string(36) "0171069d-593d-97d3-8b3e-23d06de5b308"
$ulid->toHex();     // string(34) "0x0171069d593d97d38b3e23d06de5b308"

----------------------------------------

TITLE: LDAP User Provider Configuration
DESCRIPTION: Security configuration for setting up LDAP user provider with authentication details and user attributes.

LANGUAGE: yaml
CODE:
security:
    providers:
        my_ldap:
            ldap:
                service: Symfony\Component\Ldap\Ldap
                base_dn: dc=example,dc=com
                search_dn: "cn=read-only-admin,dc=example,dc=com"
                search_password: password
                default_roles: ROLE_USER
                uid_key: uid
                extra_fields: ['email']

----------------------------------------

TITLE: Setting Up Date Comparison with GreaterThan in XML
DESCRIPTION: Shows how to configure a GreaterThan constraint in XML for comparing a delivery date to ensure it's after 'today'.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Order">
        <property name="deliveryDate">
            <constraint name="GreaterThan">today</constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Defining EqualTo Constraints with PHP Attributes in Symfony
DESCRIPTION: Demonstrates how to apply the EqualTo constraint to class properties using PHP attributes. The example shows constraints for ensuring a firstName is 'Mary' and an age is 20.

LANGUAGE: php
CODE:
// src/Entity/Person.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Person
{
    #[Assert\EqualTo('Mary')]
    protected string $firstName;

    #[Assert\EqualTo(
        value: 20,
    )]
    protected int $age;
}

----------------------------------------

TITLE: Using Conditional Expressions in YAML Configuration for Symfony Services
DESCRIPTION: This snippet demonstrates how to use a conditional expression to set a service argument based on the existence of a parameter in YAML configuration.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    App\Mailer:
        # the '@=' prefix is required when using expressions for arguments in YAML files
        arguments: ["@=container.hasParameter('some_param') ? parameter('some_param') : 'default_value'"]

----------------------------------------

TITLE: Installing Symfony Form Component
DESCRIPTION: Command to install the Symfony Form component using Composer.

LANGUAGE: bash
CODE:
$ composer require symfony/form

----------------------------------------

TITLE: Implementing ETag Validation in PHP
DESCRIPTION: This code snippet demonstrates how to implement ETag validation for HTTP caching. It shows how to set an ETag and use the isNotModified method to short-circuit the response generation if the content hasn't changed.

LANGUAGE: php
CODE:
$response->setETag('whatever_you_compute_as_an_etag');

if ($response->isNotModified($request)) {
    return $response;
}

$response->setContent('The computed content of the response');

return $response;

----------------------------------------

TITLE: Configuring Custom Transport in Messenger YAML
DESCRIPTION: YAML configuration for setting up the custom transport in Symfony Messenger system.

LANGUAGE: yaml
CODE:
framework:
    messenger:
        transports:
            yours: 'my-transport://...'

----------------------------------------

TITLE: Instantiating PHP Classes Without Calling Constructors
DESCRIPTION: This code snippet shows how to use the Instantiator class to create object instances and set their properties without calling their constructors or other methods.

LANGUAGE: PHP
CODE:
use Symfony\Component\VarExporter\Instantiator;

// creates an empty instance of Foo
$fooObject = Instantiator::instantiate(Foo::class);

// creates a Foo instance and sets one of its properties
$fooObject = Instantiator::instantiate(Foo::class, ['propertyName' => $propertyValue]);

// creates a Foo instance and sets a private property defined on its parent Bar class
$fooObject = Instantiator::instantiate(Foo::class, [], [
    Bar::class => ['privateBarProperty' => $propertyValue],
]);

----------------------------------------

TITLE: YAML Date Formats
DESCRIPTION: Demonstrates ISO-8601 date format usage in YAML.

LANGUAGE: yaml
CODE:
2001-12-14T21:59:43.10-05:00

# simple date
2002-12-14

----------------------------------------

TITLE: Defining Custom Validation Constraints in XML
DESCRIPTION: Demonstrates how to add custom validation constraints to a User entity from FOSUserBundle using a new validation group in XML format.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping
        https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd"
>
    <class name="FOS\UserBundle\Model\User">
        <property name="plainPassword">
            <constraint name="NotBlank">
                <option name="groups">
                    <value>AcmeValidation</value>
                </option>
            </constraint>

            <constraint name="Length">
                <option name="min">6</option>
                <option name="minMessage">fos_user.password.short</option>
                <option name="groups">
                    <value>AcmeValidation</value>
                </option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Generating UUID v6 in PHP
DESCRIPTION: Example of generating a UUID v6 (reordered time-based) using the Symfony Uid component.

LANGUAGE: php
CODE:
use Symfony\Component\Uid\Uuid;

// $uuid is an instance of Symfony\Component\Uid\UuidV6
$uuid = Uuid::v6();

----------------------------------------

TITLE: PHP Service Configuration
DESCRIPTION: PHP configuration for registering the custom version strategy as a Symfony service.

LANGUAGE: php
CODE:
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\Asset\VersionStrategy\GulpBusterVersionStrategy;

return function(ContainerConfigurator $container): void {
    $services = $container->services();

    $services->set(GulpBusterVersionStrategy::class)
        ->args(
            [
                '%kernel.project_dir%/busters.json',
                '%%s?version=%%s',
            ]
        );
};

----------------------------------------

TITLE: Configuring package.json for Symfony UX Bundle
DESCRIPTION: Sets up the package.json file with Symfony-specific configurations, including controller definitions, peer dependencies, and import map.

LANGUAGE: json
CODE:
{
    "name": "@acme/feature",
    "version": "1.0.0",
    "symfony": {
        "controllers": {
            "slug": {
                "main": "dist/controller.js",
                "fetch": "eager",
                "enabled": true,
                "autoimport": {
                    "@acme/feature/dist/bootstrap4-theme.css": false,
                    "@acme/feature/dist/bootstrap5-theme.css": true
                }
            }
        },
        "importmap": {
            "@hotwired/stimulus": "^3.0.0",
            "slugify": "^1.6.5"
        }
    },
    "peerDependencies": {
        "@hotwired/stimulus": "^3.0.0",
        "slugify": "^1.6.5"
    }
}

----------------------------------------

TITLE: Basic Encore/Webpack Configuration
DESCRIPTION: Basic webpack configuration setup for Encore including output path, public path and entry point definition.

LANGUAGE: javascript
CODE:
// webpack.config.js
const Encore = require('@symfony/webpack-encore');

Encore
    // directory where compiled assets will be stored
    .setOutputPath('public/build/')
    // public path used by the web server to access the output path
    .setPublicPath('/build')

    .addEntry('app', './assets/app.js')

    // uncomment this if you want use jQuery in the following example
    .autoProvidejQuery()
;

----------------------------------------

TITLE: Using Conditional Expressions in PHP Configuration for Symfony Services
DESCRIPTION: This snippet illustrates how to use a conditional expression to set a service argument based on the existence of a parameter in PHP configuration.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\Mailer;

return function(ContainerConfigurator $container): void {
    $services = $container->services();

    $services->set(Mailer::class)
        ->args([expr("container.hasParameter('some_param') ? parameter('some_param') : 'default_value'")]);
};

----------------------------------------

TITLE: Creating CompanyType Form Class
DESCRIPTION: Form type class for Company entity with basic company fields.

LANGUAGE: php
CODE:
namespace App\Form\Type;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;

class CompanyType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('name', TextType::class)
            ->add('website', TextType::class);
    }
}

----------------------------------------

TITLE: Configuring PropertyAccessor to Throw Exceptions on Invalid Index in PHP
DESCRIPTION: Demonstrates how to configure PropertyAccessor to throw exceptions when accessing invalid array indices.

LANGUAGE: php
CODE:
$propertyAccessor = PropertyAccess::createPropertyAccessorBuilder()
    ->enableExceptionOnInvalidIndex()
    ->getPropertyAccessor();

$person = [
    'first_name' => 'Wouter',
];

// instead of returning null, the code now throws an exception of type
// Symfony\Component\PropertyAccess\Exception\NoSuchIndexException
$value = $propertyAccessor->getValue($person, '[age]');

// You can avoid the exception by adding the nullsafe operator
$value = $propertyAccessor->getValue($person, '[age?]');

----------------------------------------

TITLE: Using Symfony Response Object
DESCRIPTION: Demonstrates how to use Symfony's Response class to create and send HTTP responses in an object-oriented way.

LANGUAGE: PHP
CODE:
use Symfony\Component\HttpFoundation\Response;

$response = new Response();

$response->setContent('<html><body><h1>Hello world!</h1></body></html>');
$response->setStatusCode(Response::HTTP_OK);

// sets a HTTP response header
$response->headers->set('Content-Type', 'text/html');

// prints the HTTP headers followed by the content
$response->send();

----------------------------------------

TITLE: Configuring Cache Kernel Service in XML
DESCRIPTION: Service configuration using XML to register the CacheKernel as a decorator for the http_cache service.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd"
>
    <services>
        <service id="App\CacheKernel" decorates="http_cache">
            <argument type="service" id="kernel"/>
            <argument type="service" id="http_cache.store"/>
            <argument type="service" id="esi" on-invalid="null"/>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Defining Documentation Structure with reStructuredText
DESCRIPTION: Uses reStructuredText toctree directive to define the documentation navigation structure. Specifies a maximum depth of 1 and lists core documentation sections.

LANGUAGE: rst
CODE:
.. toctree::
    :maxdepth: 1

    /setup
    /page_creation
    /routing
    /controller
    /templates
    /configuration

----------------------------------------

TITLE: Querying LDAP Server using Symfony LDAP Component
DESCRIPTION: This PHP code demonstrates how to query an LDAP server using the Symfony LDAP component. It includes examples of executing a query and iterating over the results.

LANGUAGE: PHP
CODE:
use Symfony\Component\Ldap\Ldap;
// ...

$query = $ldap->query('dc=symfony,dc=com', '(&(objectclass=person)(ou=Maintainers))');
$results = $query->execute();

foreach ($results as $entry) {
    // Do something with the results
}

// To fetch all entries in a single call:
$results = $query->execute()->toArray();

// Do something with the results array

----------------------------------------

TITLE: Validating Properties with Symfony Validator
DESCRIPTION: Shows how to validate a private property 'firstName' using NotBlank and Length constraints through ClassMetadata configuration.

LANGUAGE: php
CODE:
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
    private string $firstName;

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('firstName', new Assert\NotBlank());
        $metadata->addPropertyConstraint(
            'firstName',
            new Assert\Length(min: 3)
        );
    }
}

----------------------------------------

TITLE: Defining Static Validation Method in Symfony
DESCRIPTION: Shows how to define a static method in a class to provide validation metadata for the Symfony Validator component.

LANGUAGE: php
CODE:
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class User
{
    protected string $name;

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('name', new Assert\NotBlank());
        $metadata->addPropertyConstraint('name', new Assert\Length(
            min: 5,
            max: 20,
        ));
    }
}

----------------------------------------

TITLE: Registering Lazy-Loaded Twig Extension
DESCRIPTION: Configuration for registering a lazy-loaded Twig extension service.

LANGUAGE: yaml
CODE:
services:
    App\Twig\AppExtension:
        tags: [twig.runtime]

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Twig\AppExtension">
            <tag name="twig.runtime"/>
        </service>
    </services>
</container>

LANGUAGE: php
CODE:
use App\Twig\AppExtension;

$container
    ->register(AppExtension::class)
    ->addTag('twig.runtime')
;

----------------------------------------

TITLE: Creating an Advanced Custom Route Loader in PHP
DESCRIPTION: Example of creating an advanced custom route loader in Symfony that can import secondary routing resources. It extends the Loader class and uses the import method.

LANGUAGE: php
CODE:
// src/Routing/AdvancedLoader.php
namespace App\Routing;

use Symfony\Component\Config\Loader\Loader;
use Symfony\Component\Routing\RouteCollection;

class AdvancedLoader extends Loader
{
    public function load($resource, ?string $type = null): RouteCollection
    {
        $routes = new RouteCollection();

        $resource = '@ThirdPartyBundle/Resources/config/routes.yaml';
        $type = 'yaml';

        $importedRoutes = $this->import($resource, $type);

        $routes->addCollection($importedRoutes);

        return $routes;
    }

    public function supports($resource, ?string $type = null): bool
    {
        return 'advanced_extra' === $type;
    }
}

----------------------------------------

TITLE: Generating Login Link in Symfony Controller
DESCRIPTION: PHP code snippet for a Symfony controller method that generates a login link for a user.

LANGUAGE: php
CODE:
public function requestLoginLink(LoginLinkHandlerInterface $loginLinkHandler, UserRepository $userRepository, Request $request): Response
{
    if ($request->isMethod('POST')) {
        $email = $request->getPayload()->get('email');
        $user = $userRepository->findOneBy(['email' => $email]);
        $loginLinkDetails = $loginLinkHandler->createLoginLink($user);
        $loginLink = $loginLinkDetails->getUrl();
        // ... send the link and return a response
    }
    return $this->render('security/request_login_link.html.twig');
}

----------------------------------------

TITLE: Configuring CSRF Protection in Symfony (XML)
DESCRIPTION: Shows how to enable CSRF protection in the Symfony framework configuration using XML format.

LANGUAGE: xml
CODE:
<!-- config/packages/framework.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:framework="http://symfony.com/schema/dic/symfony"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/symfony
        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">

    <framework:config>
        <framework:csrf-protection enabled="true"/>
    </framework:config>
</container>

----------------------------------------

TITLE: Configuring TagAwareMarshaller for Redis Adapter in PHP
DESCRIPTION: This example demonstrates how to use TagAwareMarshaller with RedisAdapter for efficient management of tagged cache items.

LANGUAGE: PHP
CODE:
$marshaller = new TagAwareMarshaller();

$cache = new RedisAdapter($redis, 'tagged_namespace', 3600, $marshaller);

$item = $cache->getItem('tagged_key');
$item->set(['value' => 'some_data', 'tags' => ['tag1', 'tag2']]);
$cache->save($item);

----------------------------------------

TITLE: Enabling ESI in Symfony YAML Configuration
DESCRIPTION: YAML configuration for enabling ESI support in Symfony framework configuration.

LANGUAGE: yaml
CODE:
# config/packages/framework.yaml
framework:
    # ...
    esi: true

----------------------------------------

TITLE: Implementing PHPDoc Type Guesser Class in PHP
DESCRIPTION: Basic implementation of FormTypeGuesserInterface that creates a type guesser using PHPDoc annotations. Includes method stubs for guessing type, required field, max length, and pattern.

LANGUAGE: php
CODE:
namespace App\Form\TypeGuesser;

use Symfony\Component\Form\FormTypeGuesserInterface;
use Symfony\Component\Form\Guess\TypeGuess;
use Symfony\Component\Form\Guess\ValueGuess;

class PhpDocTypeGuesser implements FormTypeGuesserInterface
{
    public function guessType(string $class, string $property): ?TypeGuess
    {
    }

    public function guessRequired(string $class, string $property): ?ValueGuess
    {
    }

    public function guessMaxLength(string $class, string $property): ?ValueGuess
    {
    }

    public function guessPattern(string $class, string $property): ?ValueGuess
    {
    }
}

----------------------------------------

TITLE: JSON Representation with Prefixed Attributes
DESCRIPTION: Shows the desired JSON output format with 'org_' prefix added to attribute names.

LANGUAGE: json
CODE:
{"org_name": "Acme Inc.", "org_address": "123 Main Street, Big City"}

----------------------------------------

TITLE: Configuring Profiler for Tests in YAML
DESCRIPTION: This YAML configuration enables the Profiler but disables data collection by default for test environments.

LANGUAGE: yaml
CODE:
# config/packages/test/web_profiler.yaml

# ...
framework:
    profiler: { enabled: true, collect: false }

----------------------------------------

TITLE: Configuring Monolog Formatter and Processor in YAML
DESCRIPTION: This YAML configuration registers the custom SessionRequestProcessor as a service and defines a Monolog formatter that includes the extra token in the log output format.

LANGUAGE: YAML
CODE:
# config/services.yaml
services:
    monolog.formatter.session_request:
        class: Monolog\Formatter\LineFormatter
        arguments:
            - "[%%datetime%%] [%%extra.token%%] %%channel%%.%%level_name%%: %%message%% %%context%% %%extra%%\n"

    App\Logger\SessionRequestProcessor:
        tags:
            - { name: monolog.processor }

----------------------------------------

TITLE: Configuring Traverse Constraint in XML
DESCRIPTION: Demonstrates the configuration of the Traverse constraint for the BookCollection class using XML format in the validation configuration file.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\BookCollection">
        <constraint name="Traverse"/>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Configuring Service Visibility in Symfony XML
DESCRIPTION: Demonstrates how to set a service as public in Symfony's services.xml configuration.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Service\Foo" public="true"/>
    </services>
</container>

----------------------------------------

TITLE: Configuring Built-in Route Loaders in YAML
DESCRIPTION: Example of configuring various built-in route loaders in Symfony using YAML format. It demonstrates loading routes from files, directories, and PHP attributes.

LANGUAGE: yaml
CODE:
# config/routes.yaml
app_file:
    resource: '@AcmeBundle/Resources/config/routing.yaml'

app_psr4:
    resource:
        path: '../src/Controller/'
        namespace: App\Controller
    type: attribute

app_attributes:
    resource: '../src/Controller/'
    type:     attribute

app_class_attributes:
    resource: App\Controller\MyController
    type:     attribute

app_directory:
    resource: '../legacy/routing/'
    type:     directory

app_bundle:
    resource: '@AcmeOtherBundle/Resources/config/routing/'
    type:     directory

----------------------------------------

TITLE: Custom Authentication Success Handler in Symfony
DESCRIPTION: PHP class implementing a custom authentication success handler for login links in Symfony.

LANGUAGE: php
CODE:
namespace App\Security\Authentication;

use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Http\Authentication\AuthenticationSuccessHandlerInterface;

class AuthenticationSuccessHandler implements AuthenticationSuccessHandlerInterface
{
    public function onAuthenticationSuccess(Request $request, TokenInterface $token): JsonResponse
    {
        $user = $token->getUser();
        $userApiToken = $user->getApiToken();
        return new JsonResponse(['apiToken' => $userApiToken]);
    }
}

----------------------------------------

TITLE: Configuring Positive Constraint in YAML
DESCRIPTION: YAML configuration for applying the Positive constraint to an Employee entity's income property.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Employee:
    properties:
        income:
            - Positive: ~

----------------------------------------

TITLE: Optimizing Symfony URL Matcher in PHP
DESCRIPTION: Shows how to create a highly optimized URL matcher class for improved performance using CompiledUrlMatcher and CompiledUrlMatcherDumper.

LANGUAGE: PHP
CODE:
use Symfony\Component\Routing\Matcher\CompiledUrlMatcher;
use Symfony\Component\Routing\Matcher\Dumper\CompiledUrlMatcherDumper;

$compiledRoutes = (new CompiledUrlMatcherDumper($routes))->getCompiledRoutes();

$matcher = new CompiledUrlMatcher($compiledRoutes, $context);

----------------------------------------

TITLE: Creating Reusable LocationType Form
DESCRIPTION: Reusable form type for location fields using inherit_data option to share data with parent form.

LANGUAGE: php
CODE:
namespace App\Form\Type;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class LocationType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('address', TextareaType::class)
            ->add('zipcode', TextType::class)
            ->add('city', TextType::class)
            ->add('country', TextType::class);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'inherit_data' => true,
        ]);
    }
}

----------------------------------------

TITLE: Installing Symfony PHPUnit Bridge
DESCRIPTION: Command to install the Symfony PHPUnit bridge, which helps identify deprecation notices in test suites.

LANGUAGE: shell
CODE:
$ composer require --dev symfony/phpunit-bridge

----------------------------------------

TITLE: Expires Header Format Example
DESCRIPTION: Shows the resulting Expires header format after setting expiration.

LANGUAGE: text
CODE:
Expires: Thu, 01 Mar 2011 16:00:00 GMT

----------------------------------------

TITLE: Integrating LocationType in CompanyType
DESCRIPTION: Updated CompanyType form class incorporating the LocationType form.

LANGUAGE: php
CODE:
namespace App\Form\Type;

use App\Entity\Company;
use Symfony\Component\Form\AbstractType;

class CompanyType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        // ...

        $builder->add('foo', LocationType::class, [
            'data_class' => Company::class,
        ]);
    }
}

----------------------------------------

TITLE: Monolog XML Configuration
DESCRIPTION: XML configuration for Monolog console handler defining channels and handler settings.

LANGUAGE: xml
CODE:
<!-- config/packages/dev/monolog.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:monolog="http://symfony.com/schema/dic/monolog"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <monolog:config>
        <!-- ... -->

        <monolog:handler name="console" type="console" process-psr-3-messages="false">
            <monolog:channels>
                <monolog:channel>!event</monolog:channel>
                <monolog:channel>!doctrine</monolog:channel>
                <monolog:channel>!console</monolog:channel>
            </monolog:channels>
        </monolog:handler>
    </monolog:config>
</container>

----------------------------------------

TITLE: Basic Translation Example in PHP
DESCRIPTION: Shows the difference between hardcoded text and translated text using the translator service

LANGUAGE: php
CODE:
// text will *always* print out in English
echo 'Hello World';

// text can be translated into the end-user's language or
// default to English
echo $translator->trans('Hello World');

----------------------------------------

TITLE: Overriding Environment File Path in Composer JSON
DESCRIPTION: This snippet shows how to specify a custom path for the .env file in the composer.json file. It uses the 'runtime.dotenv_path' option in the 'extra' section.

LANGUAGE: json
CODE:
{
    "...": "...",
    "extra": {
        "...": "...",
        "runtime": {
            "dotenv_path": "my/custom/path/to/.env"
        }
    }
}

----------------------------------------

TITLE: Configuring Additional Template Directories
DESCRIPTION: YAML configuration for adding extra template directories with namespaces in Symfony.

LANGUAGE: yaml
CODE:
# config/packages/twig.yaml
twig:
    # ...
    paths:
        'email/default/templates': 'email'
        'backend/templates': 'admin'

----------------------------------------

TITLE: Importing Configuration in PHP
DESCRIPTION: Shows how to import configuration files using PHP format with ContainerConfigurator, including service defaults and automatic service loading.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

return function(ContainerConfigurator $container): void {
    $container->import('services/mailer.php');
    // If you want to import a whole directory:
    $container->import('services/');

    $services = $container->services()
        ->defaults()
            ->autowire()
            ->autoconfigure()
    ;

    $services->load('App\\', '../src/*')
        ->exclude('../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}');
};

----------------------------------------

TITLE: Implementing NotBlank Validation using PHP Code
DESCRIPTION: Example demonstrating how to programmatically add the NotBlank constraint using PHP code and the ClassMetadata API.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Author
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('firstName', new Assert\NotBlank());
    }
}

----------------------------------------

TITLE: Stopping a Program with DebugFormatterHelper in Symfony
DESCRIPTION: Demonstrates how to use the stop() method of DebugFormatterHelper to notify users when a program has stopped. It includes handling both successful and failed program execution.

LANGUAGE: PHP
CODE:
// ...
$output->writeln(
    $debugFormatter->stop(
        spl_object_hash($process),
        'Some command description',
        $process->isSuccessful()
    )
);

----------------------------------------

TITLE: Creating an Event Subscriber in PHP
DESCRIPTION: Example of creating an event subscriber class that defines multiple methods to handle the kernel.exception event with different priorities.

LANGUAGE: PHP
CODE:
// src/EventSubscriber/ExceptionSubscriber.php
namespace App\EventSubscriber;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\Event\ExceptionEvent;
use Symfony\Component\HttpKernel\KernelEvents;

class ExceptionSubscriber implements EventSubscriberInterface
{
    public static function getSubscribedEvents(): array
    {
        // return the subscribed events, their methods and priorities
        return [
            KernelEvents::EXCEPTION => [
                ['processException', 10],
                ['logException', 0],
                ['notifyException', -10],
            ],
        ];
    }

    public function processException(ExceptionEvent $event): void
    {
        // ...
    }

    public function logException(ExceptionEvent $event): void
    {
        // ...
    }

    public function notifyException(ExceptionEvent $event): void
    {
        // ...
    }
}

----------------------------------------

TITLE: Configuring NotBlank Validation in YAML
DESCRIPTION: Example of configuring the NotBlank constraint using YAML configuration format in Symfony.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        firstName:
            - NotBlank: ~

----------------------------------------

TITLE: Configuring X-Forwarded Headers in Varnish 4
DESCRIPTION: This snippet sets the X-Forwarded-Port header based on the X-Forwarded-Proto to ensure correct port handling for HTTPS connections.

LANGUAGE: varnish4
CODE:
sub vcl_recv {
    if (req.http.X-Forwarded-Proto == "https" ) {
        set req.http.X-Forwarded-Port = "443";
    } else {
        set req.http.X-Forwarded-Port = "80";
    }
}

----------------------------------------

TITLE: Simplified Framework Class Using Dependency Injection in PHP
DESCRIPTION: This snippet shows the simplified Simplex\Framework class after moving the dependency configuration to the container. It now extends HttpKernel without additional code.

LANGUAGE: PHP
CODE:
namespace Simplex;

use Symfony\Component\HttpKernel\HttpKernel;

class Framework extends HttpKernel
{
}

----------------------------------------

TITLE: XML Configuration Examples
DESCRIPTION: Examples of different ways to configure logging parameter in XML format, showing parameter evaluation behavior.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:my-bundle="http://example.org/schema/dic/my_bundle"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://example.org/schema/dic/my_bundle
        https://example.org/schema/dic/my_bundle/my_bundle-1.0.xsd">

    <my-bundle:config logging="true"/>
    <my-bundle:config logging="%kernel.debug%"/>
    <my-bundle:config/>
</container>

----------------------------------------

TITLE: Setting up IBAN Validation using PHP Metadata
DESCRIPTION: Example of configuring IBAN validation through PHP metadata loading in a Transaction entity class.

LANGUAGE: php
CODE:
// src/Entity/Transaction.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Transaction
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('bankAccountNumber', new Assert\Iban(
            message: 'This is not a valid International Bank Account Number (IBAN).',
        ));
    }
}

----------------------------------------

TITLE: Overriding Translations Directory in XML Configuration
DESCRIPTION: This XML configuration demonstrates how to override the default translations directory using the framework:translator:default-path option.

LANGUAGE: xml
CODE:
<!-- config/packages/translation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:twig="http://symfony.com/schema/dic/twig"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/twig
        https://symfony.com/schema/dic/twig/twig-1.0.xsd">

    <framework:config>
        <framework:translator>
            <framework:default-path>%kernel.project_dir%/i18n</framework:default-path>
        </framework:translator>
    </framework:config>

</container>

----------------------------------------

TITLE: Configuring WordCount Constraint with PHP Attributes
DESCRIPTION: Example of using the WordCount constraint with PHP attributes to validate that a 'content' property contains between 100 and 200 words.

LANGUAGE: php
CODE:
// src/Entity/BlogPostDTO.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class BlogPostDTO
{
    #[Assert\WordCount(min: 100, max: 200)]
    protected string $content;
}

----------------------------------------

TITLE: Importing Configuration Files in XML
DESCRIPTION: Shows how to import other configuration files using XML format.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/symfony
        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">

    <imports>
        <import resource="legacy_config.php"/>
        <import resource="/etc/myapp/*.yaml"/>
        <import resource="my_config_file.yaml" ignore-errors="not_found"/>
        <import resource="my_other_config_file.yaml" ignore-errors="true"/>
    </imports>

    <!-- ... -->
</container>

----------------------------------------

TITLE: Configuring Lazy Services in XML
DESCRIPTION: Shows the XML configuration for marking a service as lazy in Symfony. This configuration creates a proxy object that defers the actual service instantiation until it's needed.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Twig\AppExtension" lazy="true"/>
    </services>
</container>

----------------------------------------

TITLE: Configuring Doctrine Caching with Symfony Cache in YAML
DESCRIPTION: YAML configuration for using Symfony Cache pools with Doctrine ORM caching.

LANGUAGE: yaml
CODE:
# config/packages/prod/doctrine.yaml
framework:
    cache:
        pools:
            doctrine.result_cache_pool:
                adapter: cache.app
            doctrine.system_cache_pool:
                adapter: cache.system

doctrine:
    orm:
        # ...
        metadata_cache_driver:
            type: pool
            pool: doctrine.system_cache_pool
        query_cache_driver:
            type: pool
            pool: doctrine.system_cache_pool
        result_cache_driver:
            type: pool
            pool: doctrine.result_cache_pool

        # in addition to Symfony Cache pools, you can also use the
        # 'type: service' option to use any service as the cache
        query_cache_driver:
            type: service
            id: App\ORM\MyCacheService

----------------------------------------

TITLE: Registering DQL Functions with Named Entity Manager (PHP)
DESCRIPTION: PHP configuration for registering custom DQL functions with a named Doctrine entity manager in Symfony.

LANGUAGE: php
CODE:
// config/packages/doctrine.php
use App\DQL\DatetimeFunction;
use Symfony\Config\DoctrineConfig;

return static function (DoctrineConfig $doctrine): void {
    $doctrine->orm()
        // ...
        ->entityManager('example_manager')
            // place your functions here
            ->dql()
                ->datetimeFunction('test_datetime', DatetimeFunction::class);
};

----------------------------------------

TITLE: Creating Anonymous Services in Symfony XML
DESCRIPTION: Shows how to create and inject an anonymous service using Symfony's XML configuration.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="foo" class="App\Foo">
            <argument type="service">
                <service class="App\AnonymousBar"/>
            </argument>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Configuring Lazy Service Injection with Autowire
DESCRIPTION: Shows how to use the Autowire attribute to inject a lazy service in Symfony. This allows for fine-grained control over which injected dependencies should be lazy-loaded.

LANGUAGE: php
CODE:
namespace App\Service;

use App\Twig\AppExtension;
use Symfony\Component\DependencyInjection\Attribute\Autowire;

class MessageGenerator
{
    public function __construct(
        #[Autowire(service: 'app.twig.app_extension', lazy: true)] ExtensionInterface $extension
    ) {
        // ...
    }
}

----------------------------------------

TITLE: Configuring SSL Connection with MySQL in YAML
DESCRIPTION: YAML configuration for setting up a secure SSL connection to MySQL using Doctrine DBAL.

LANGUAGE: yaml
CODE:
doctrine:
    dbal:
        url: '%env(DATABASE_URL)%'
        server_version: '8.0.31'
        driver: 'pdo_mysql'
        options:
            # SSL private key
            !php/const 'PDO::MYSQL_ATTR_SSL_KEY': '%env(MYSQL_SSL_KEY)%'
            # SSL certificate
            !php/const 'PDO::MYSQL_ATTR_SSL_CERT': '%env(MYSQL_SSL_CERT)%'
            # SSL CA authority
            !php/const 'PDO::MYSQL_ATTR_SSL_CA': '%env(MYSQL_SSL_CA)%'

----------------------------------------

TITLE: Creating a Custom Environment Variable Processor
DESCRIPTION: Example of creating a custom environment variable processor that converts values to lowercase.

LANGUAGE: php
CODE:
use Symfony\Component\DependencyInjection\EnvVarProcessorInterface;

class LowercasingEnvVarProcessor implements EnvVarProcessorInterface
{
    public function getEnv(string $prefix, string $name, \Closure $getEnv): string
    {
        $env = $getEnv($name);

        return strtolower($env);
    }

    public static function getProvidedTypes(): array
    {
        return [
            'lowercase' => 'string',
        ];
    }
}

----------------------------------------

TITLE: Configuring SSI in Symfony YAML
DESCRIPTION: YAML configuration to enable SSI support in Symfony framework configuration.

LANGUAGE: yaml
CODE:
# config/packages/framework.yaml
framework:
    ssi: { enabled: true }

----------------------------------------

TITLE: Initializing Stimulus for Encore
DESCRIPTION: JavaScript file (bootstrap.js) that initializes the Stimulus application for use with Encore.

LANGUAGE: javascript
CODE:
// assets/bootstrap.js
import { startStimulusApp } from '@symfony/stimulus-bridge';

export const app = startStimulusApp(require.context(
    '@symfony/stimulus-bridge/lazy-controller-loader!./controllers',
    true,
    /\.(j|t)sx?$/
));

----------------------------------------

TITLE: Including Reference Documentation Map in RST
DESCRIPTION: RST directive to include the reference documentation map file located at /reference/map.rst.inc

LANGUAGE: rst
CODE:
.. include:: /reference/map.rst.inc

----------------------------------------

TITLE: Processing Configuration in Extension Class
DESCRIPTION: Example of processing configuration in a bundle's Extension class using the Configuration class.

LANGUAGE: php
CODE:
// src/DependencyInjection/AcmeSocialExtension.php
namespace Acme\SocialBundle\DependencyInjection;

use Symfony\Component\Config\FileLocator;
use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;

public function load(array $configs, ContainerBuilder $container): void
{
    $loader = new XmlFileLoader($container, new FileLocator(dirname(__DIR__).'/Resources/config'));
    $loader->load('services.xml');

    $configuration = new Configuration();
    $config = $this->processConfiguration($configuration, $configs);

    $definition = $container->getDefinition('acme_social.twitter_client');
    $definition->replaceArgument(0, $config['twitter']['client_id']);
    $definition->replaceArgument(1, $config['twitter']['client_secret']);
}

----------------------------------------

TITLE: Custom Block Prefix Configuration in PHP
DESCRIPTION: PHP code demonstrating how to configure a custom block prefix for form fields to enable custom fragment naming

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;

public function buildForm(FormBuilderInterface $builder, array $options): void
{
    $builder->add('name', TextType::class, [
        'block_prefix' => 'wrapped_text',
    ]);
}

----------------------------------------

TITLE: File Validation with PHP Attributes
DESCRIPTION: Example showing file validation configuration using PHP attributes to validate PDF files under 1024k.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\File(
        maxSize: '1024k',
        extensions: ['pdf'],
        extensionsMessage: 'Please upload a valid PDF',
    )]
    protected File $bioFile;
}

----------------------------------------

TITLE: Framework Class Implementation with Interfaces
DESCRIPTION: Updated Framework class using Symfony interfaces for better testability

LANGUAGE: php
CODE:
namespace Simplex;

use Calendar\Controller\LeapYearController;
use Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface;
use Symfony\Component\HttpKernel\Controller\ControllerResolverInterface;
use Symfony\Component\Routing\Matcher\UrlMatcherInterface;

class Framework
{
    public function __construct(
        private UrlMatcherInterface $matcher,
        private ControllerResolverInterface $resolver,
        private ArgumentResolverInterface $argumentResolver,
    ) {
    }

    // ...
}

----------------------------------------

TITLE: Configuring NegativeOrZero Constraint in YAML
DESCRIPTION: This snippet shows how to configure the NegativeOrZero constraint for a property using YAML in Symfony's validation configuration.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\UnderGroundGarage:
    properties:
        level:
            - NegativeOrZero: ~

----------------------------------------

TITLE: Defining Non-Shared Service in XML Configuration
DESCRIPTION: Demonstrates XML configuration for non-shared services in services.xml file. Uses the shared attribute set to false on the service element.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<services>
    <service id="App\SomeNonSharedService" shared="false"/>
</services>

----------------------------------------

TITLE: Configuring Traverse Constraint in YAML
DESCRIPTION: Shows how to configure the Traverse constraint for the BookCollection class using YAML format in the validation configuration file.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\BookCollection:
    constraints:
        - Traverse: ~

----------------------------------------

TITLE: Configuring Multiple Authenticators with Separate Entry Points (XML)
DESCRIPTION: This XML configuration sets up separate firewalls for API and main website, each with its own authentication method and entry point. It also defines access control rules for different parts of the application.

LANGUAGE: xml
CODE:
<!-- config/packages/security.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<srv:container xmlns="http://symfony.com/schema/dic/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:srv="http://symfony.com/schema/dic/services"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/security
        https://symfony.com/schema/dic/security/security-1.0.xsd">

    <config>
        <!-- ... -->
        <firewall name="api" pattern="^/api/">
            <custom-authenticator>App\Security\ApiTokenAuthenticator</custom-authenticator>
        </firewall>

        <firewall name="main" anonymous="true" lazy="true">
            <form-login/>
        </firewall>

        <rule path="^/login" role="PUBLIC_ACCESS"/>
        <rule path="^/api" role="ROLE_API_USER"/>
        <rule path="^/" role="ROLE_USER"/>
    </config>
</srv:container>

----------------------------------------

TITLE: Configuring SSI in Symfony XML
DESCRIPTION: XML configuration to enable SSI support in Symfony framework configuration.

LANGUAGE: xml
CODE:
<!-- config/packages/framework.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/symfony"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:framework="http://symfony.com/schema/dic/symfony"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/symfony
        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">

    <framework:config>
        <framework:ssi enabled="true"/>
    </framework:config>
</container>

----------------------------------------

TITLE: Applying EnableAutoMapping Constraint with PHP Attributes
DESCRIPTION: This snippet demonstrates how to apply the EnableAutoMapping constraint to a class using PHP attributes. It also shows Doctrine ORM mapping for class properties.

LANGUAGE: php
CODE:
// src/Model/BookCollection.php
namespace App\Model;

use App\Model\Author;
use App\Model\BookMetadata;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

#[Assert\EnableAutoMapping]
class BookCollection
{
    #[ORM\Column(nullable: false)]
    protected string $name = '';

    #[ORM\ManyToOne(targetEntity: Author::class)]
    public Author $author;

    // ...
}

----------------------------------------

TITLE: Rebuilding Docker Containers after Package Installation
DESCRIPTION: This command rebuilds Docker containers after installing a new package that includes Docker configuration changes. It ensures that the new Docker settings are applied to the environment.

LANGUAGE: shell
CODE:
$ docker-compose up --build

----------------------------------------

TITLE: Configuring Symfony Front Controller
DESCRIPTION: Demonstrates the front controller setup with routing, request handling, and event dispatching configuration.

LANGUAGE: PHP
CODE:
require_once __DIR__.'/../vendor/autoload.php';

use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel;
use Symfony\Component\Routing;

$request = Request::createFromGlobals();
$requestStack = new RequestStack();
$routes = include __DIR__.'/../src/app.php';

$context = new Routing\RequestContext();
$matcher = new Routing\Matcher\UrlMatcher($routes, $context);

$controllerResolver = new HttpKernel\Controller\ControllerResolver();
$argumentResolver = new HttpKernel\Controller\ArgumentResolver();

$dispatcher = new EventDispatcher();
$dispatcher->addSubscriber(new HttpKernel\EventListener\RouterListener($matcher, $requestStack));

$framework = new Simplex\Framework($dispatcher, $controllerResolver, $requestStack, $argumentResolver);

$response = $framework->handle($request);
$response->send();

----------------------------------------

TITLE: Installing PHPUnit with Composer
DESCRIPTION: Command to install PHPUnit as a development dependency using Composer

LANGUAGE: terminal
CODE:
$ composer require --dev phpunit/phpunit:^9.6

----------------------------------------

TITLE: Creating Project Directory - Terminal Commands
DESCRIPTION: Basic terminal commands to create and navigate to the framework directory

LANGUAGE: terminal
CODE:
$ mkdir framework
$ cd framework

----------------------------------------

TITLE: YAML Number Representations
DESCRIPTION: Shows various ways to represent numbers in YAML including integers, octals, hexadecimals, floats, and exponentials.

LANGUAGE: yaml
CODE:
# an integer
12

# an octal
0o14

# an hexadecimal
0xC

# a float
13.4

# an exponential number
1.2e+34

# infinity
.inf

----------------------------------------

TITLE: Setting Synthetic Service Instance
DESCRIPTION: Example showing how to inject an instance into a synthetic service at runtime.

LANGUAGE: php
CODE:
// instantiate the synthetic service
$theService = ...;
$container->set('app.synthetic_service', $theService);

----------------------------------------

TITLE: Configuring Empty Data with Class Instantiation in Symfony Form Type
DESCRIPTION: Shows how to configure empty_data by instantiating a new class with dependencies in a form type class.

LANGUAGE: php
CODE:
namespace App\Form\Type;

// ...
use App\Entity\Blog;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\OptionsResolver\OptionsResolver;

class BlogType extends AbstractType
{
    public function __construct(
        private object $someDependency,
    ) {
    }
    // ...

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'empty_data' => new Blog($this->someDependency),
        ]);
    }
}

----------------------------------------

TITLE: Configuring OIDC User Info Token Handler
DESCRIPTION: Configuration for OpenID Connect userinfo endpoint token handler in security.yaml

LANGUAGE: yaml
CODE:
security:\n    firewalls:\n        main:\n            access_token:\n                token_handler:\n                    oidc_user_info: https://www.example.com/realms/demo/protocol/openid-connect/userinfo

----------------------------------------

TITLE: Defining Event Listener with PHP Attributes
DESCRIPTION: Example of using the AsEventListener PHP attribute to define an event listener within the class itself, without external configuration.

LANGUAGE: PHP
CODE:
namespace App\EventListener;

use Symfony\Component\EventDispatcher\Attribute\AsEventListener;

#[AsEventListener]
final class MyListener
{
    public function __invoke(CustomEvent $event): void
    {
        // ...
    }
}

----------------------------------------

TITLE: Configuring Custom Compound Constraint in XML
DESCRIPTION: This snippet shows how to apply the custom PasswordRequirements constraint using XML configuration.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\User">
        <property name="plainPassword">
            <constraint name="App\Validator\Constraints\PasswordRequirements"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Creating Custom Issue Selector Field Type
DESCRIPTION: Custom form field type that incorporates the IssueToNumberTransformer automatically. This creates a reusable field type for selecting issues by number.

LANGUAGE: php
CODE:
namespace App\Form;

use App\Form\DataTransformer\IssueToNumberTransformer;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class IssueSelectorType extends AbstractType
{
    public function __construct(
        private IssueToNumberTransformer $transformer,
    ) {
    }

    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder->addModelTransformer($this->transformer);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'invalid_message' => 'The selected issue does not exist',
        ]);
    }

    public function getParent(): string
    {
        return TextType::class;
    }
}

----------------------------------------

TITLE: Running Symfony Console Commands with Environment Variables
DESCRIPTION: Shows how to run a console command with specific environment variables set, such as APP_ENV for the production environment.

LANGUAGE: terminal
CODE:
$ APP_ENV=prod php bin/console cache:clear

----------------------------------------

TITLE: Rendering Category Fields in Twig Template
DESCRIPTION: Demonstrates how to render the Category fields within a Twig template for the Task form.

LANGUAGE: html+twig
CODE:
{# ... #}

<h3>Category</h3>
<div class="category">
    {{ form_row(form.category.name) }}
</div>

{# ... #}

----------------------------------------

TITLE: Formatting reStructuredText Documentation Headers
DESCRIPTION: Basic reStructuredText formatting for documentation headers and warning blocks used in the Symfony documentation.

LANGUAGE: reStructuredText
CODE:
Reporting a Bug
===============

.. warning::

    If you think you've found a security issue, please use the special
    :doc:`procedure <security>` instead.

----------------------------------------

TITLE: Adding Internal Links in Symfony Documentation
DESCRIPTION: Demonstrates various ways to create internal links to other pages and sections within the Symfony documentation using reStructuredText syntax.

LANGUAGE: rst
CODE:
:doc:`/controller`

:doc:`/components/event_dispatcher`

:doc:`/configuration/environments`

:doc:`Doctrine Associations </doctrine/associations>`

.. _autowiring-calls:

Autowiring other Methods (e.g. Setters and Public Typed Properties)
-------------------------------------------------------------------

:ref:`Required <autowiring-calls>`

----------------------------------------

TITLE: Implementing Complex Configuration Prepending Logic
DESCRIPTION: Demonstrates how to implement complex configuration prepending logic including checking for bundle existence and handling multiple configuration scenarios.

LANGUAGE: php
CODE:
public function prepend(ContainerBuilder $container): void
{
    $bundles = $container->getParameter('kernel.bundles');
    if (!isset($bundles['AcmeGoodbyeBundle'])) {
        $config = ['use_acme_goodbye' => false];
        foreach ($container->getExtensions() as $name => $extension) {
            match ($name) {
                'acme_something', 'acme_other' => $container->prependExtensionConfig($name, $config),
                default => null
            };
        }
    }

    $configs = $container->getExtensionConfig($this->getAlias());
    foreach (array_reverse($configs) as $config) {
        if (isset($config['entity_manager_name'])) {
            $container->prependExtensionConfig('acme_something', [
                'entity_manager_name' => $config['entity_manager_name'],
            ]);
        }
    }
}

----------------------------------------

TITLE: Configuring Service Closure in XML
DESCRIPTION: XML configuration for service closures demonstrating how to define and inject closure-wrapped services.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Service\MyService">
            <argument type="service_closure" id="mailer"/>

            <!--
            In case the dependency is optional
            <argument type="service_closure" id="mailer" on-invalid="ignore"/>
            -->
        </service>
    </services>
</container>

----------------------------------------

TITLE: Configuring ElasticsearchLogstashHandler Service in PHP
DESCRIPTION: PHP configuration for registering the ElasticsearchLogstashHandler as a service with default and optional parameter settings.

LANGUAGE: php
CODE:
// config/services.php
use Monolog\Level;
use Symfony\Bridge\Monolog\Handler\ElasticsearchLogstashHandler;

$container->register(ElasticsearchLogstashHandler::class);

// optionally, configure the handler using the constructor arguments (shown values are default)
$container->register(ElasticsearchLogstashHandler::class)
    ->setArguments([
        '$endpoint' => "http://127.0.0.1:9200",
        '$index' => "monolog",
        '$client' => null,
        '$level' => Level::Debug,
        '$bubble' => true,
        '$elasticsearchVersion' => '1.0.0',
    ])
;

----------------------------------------

TITLE: ESI Configuration in Symfony XML
DESCRIPTION: XML configuration for enabling ESI support in Symfony framework settings.

LANGUAGE: xml
CODE:
<!-- config/packages/framework.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:framework="http://symfony.com/schema/dic/symfony"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/symfony
        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd">

    <framework:config>
        <!-- ... -->
        <framework:esi enabled="true"/>
    </framework:config>
</container>

----------------------------------------

TITLE: Implementing Positive Constraint in PHP with Metadata
DESCRIPTION: Example of applying the Positive constraint using PHP code and the loadValidatorMetadata method.

LANGUAGE: php
CODE:
// src/Entity/Employee.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Employee
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('income', new Assert\Positive());
    }
}

----------------------------------------

TITLE: Configuring Reset Button with Custom Class in PHP
DESCRIPTION: Example of adding a custom CSS class to a reset button using the attr option in Symfony forms.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\ResetType;
// ...

$builder->add('save', ResetType::class, [
    'attr' => ['class' => 'save'],
]);

----------------------------------------

TITLE: Validating ULID with PHP Class Configuration
DESCRIPTION: Example of configuring ULID validation using PHP class metadata. Shows how to programmatically add the validation constraint in the entity class.

LANGUAGE: php
CODE:
// src/Entity/File.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class File
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('identifier', new Assert\Ulid());
    }
}

----------------------------------------

TITLE: Basic PHP Request Handling
DESCRIPTION: Simple PHP code for handling a request parameter, demonstrating potential security issues and error-prone nature of raw PHP.

LANGUAGE: PHP
CODE:
// framework/index.php
$name = $_GET['name'];

printf('Hello %s', $name);

----------------------------------------

TITLE: Configuring Twig Debug Mode (PHP)
DESCRIPTION: Shows how to configure Twig's debug mode in the PHP configuration file. The kernel.debug parameter is used to set the debug mode dynamically based on the application's debug state.

LANGUAGE: php
CODE:
// config/packages/twig.php
use Symfony\Config\TwigConfig;

return static function (TwigConfig $twig): void {
    // ...
    $twig->debug('%kernel.debug%');
};

----------------------------------------

TITLE: Defining Blank Constraint in XML
DESCRIPTION: This example shows how to define the Blank constraint for a property using XML in a Symfony validation configuration file.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="firstName">
            <constraint name="Blank"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Reproducing Simple Validator Bug in PHP
DESCRIPTION: This snippet demonstrates a bug in Symfony's URL validator where it fails to properly validate a malformed URL. It requires the symfony/validator component and shows how to set up and execute the validation process.

LANGUAGE: php
CODE:
// First, run "composer require symfony/validator"
// Then, execute this file:
<?php
require_once __DIR__.'/vendor/autoload.php';
use Symfony\Component\Validator\Constraints;

$wrongUrl = 'http://example.com/exploit.html?<script>alert(1);</script>';
$urlValidator = new Constraints\UrlValidator();
$urlConstraint = new Constraints\Url();

// The URL is wrong, so var_dump() should display an error, but it displays
// "null" instead because there is no context to build a validator violation
var_dump($urlValidator->validate($wrongUrl, $urlConstraint));

----------------------------------------

TITLE: Configuring Slug Constraint in YAML
DESCRIPTION: Example of how to configure the Slug constraint for a property using YAML format in a validation configuration file.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        slug:
            - Slug: ~

----------------------------------------

TITLE: Configuring Parent Services in XML
DESCRIPTION: XML configuration for setting up parent-child service relationships and dependency injection in Symfony's service container.

LANGUAGE: xml
CODE:
<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n    <services>\n        <service id=\"App\Repository\BaseDoctrineRepository\" abstract=\"true\">\n            <argument type=\"service\" id=\"doctrine.orm.entity_manager\"/>\n            <call method=\"setLogger\">\n                <argument type=\"service\" id=\"logger\"/>\n            </call>\n        </service>\n        <service id=\"App\Repository\DoctrineUserRepository\"\n            parent=\"App\Repository\BaseDoctrineRepository\"\n        />\n        <service id=\"App\Repository\DoctrinePostRepository\"\n            parent=\"App\Repository\BaseDoctrineRepository\"\n        />\n    </services>\n</container>

----------------------------------------

TITLE: Setting up Existing Symfony Project
DESCRIPTION: Series of commands to clone an existing Symfony project from Git and install its dependencies using Composer.

LANGUAGE: bash
CODE:
$ cd projects/
$ git clone ...
$ cd my-project/
$ composer install

----------------------------------------

TITLE: Curl Command for Retrieving Debug Token in Symfony API
DESCRIPTION: Demonstrates how to use curl to make an API request and retrieve the debug token from the response headers. This token is essential for accessing the Symfony profiler and obtaining detailed debug information.

LANGUAGE: bash
CODE:
$ curl --head http://localhost:8000/api/posts/1

----------------------------------------

TITLE: Submitting Forms with BrowserKit in PHP
DESCRIPTION: Examples of submitting forms using the submitForm and submit methods of the BrowserKit client, including overriding form values and options.

LANGUAGE: PHP
CODE:
use Acme\Client;

$client = new Client();
$crawler = $client->request('GET', 'https://github.com/login');

$client->submitForm('Log in');

$client->submitForm('Log in', [
    'login' => 'my_user',
    'password' => 'my_pass',
    'file' => __FILE__,
]);

$client->submitForm(
    'Log in',
    ['login' => 'my_user', 'password' => 'my_pass'],
    'PUT',
    ['HTTP_ACCEPT_LANGUAGE' => 'es']
);

// Using submit() method
$form = $crawler->selectButton('Log in')->form();
$form['login'] = 'symfonyfan';
$form['password'] = 'anypass';
$crawler = $client->submit($form);

----------------------------------------

TITLE: YAML Configuration for IsFalse Constraint
DESCRIPTION: Demonstrates how to configure the IsFalse constraint using YAML format.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    getters:
        stateInvalid:
            - 'IsFalse':
                message: You've entered an invalid state.

----------------------------------------

TITLE: Configuring Bootstrap Form Theme in XML
DESCRIPTION: XML configuration for applying Bootstrap 4 form theme globally in Symfony application.

LANGUAGE: xml
CODE:
<!-- config/packages/twig.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:twig="http://symfony.com/schema/dic/twig"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/twig
        https://symfony.com/schema/dic/twig/twig-1.0.xsd">

    <twig:config>
        <twig:form-theme>bootstrap_4_layout.html.twig</twig:form-theme>
        <!-- ... -->
    </twig:config>
</container>

----------------------------------------

TITLE: Registering Type Guesser in YAML Configuration
DESCRIPTION: Service configuration in YAML format to register the custom type guesser with the form.type_guesser tag.

LANGUAGE: yaml
CODE:
services:
    App\Form\TypeGuesser\PhpDocTypeGuesser:
        tags: [form.type_guesser]

----------------------------------------

TITLE: Compressing Emoji Data Files
DESCRIPTION: Command to compress internal Symfony emoji data files using PHP zlib extension to save disk space

LANGUAGE: terminal
CODE:
$ php ./vendor/symfony/emoji/Resources/bin/compress

----------------------------------------

TITLE: Configuring Custom Authenticator in PHP
DESCRIPTION: PHP configuration to enable the custom API key authenticator in the security firewall.

LANGUAGE: PHP
CODE:
// config/packages/security.php
use App\Security\ApiKeyAuthenticator;
use Symfony\Config\SecurityConfig;

return static function (SecurityConfig $security): void {
    $security->enableAuthenticatorManager(true);
    // ....

    $security->firewall('main')
        ->customAuthenticators([ApiKeyAuthenticator::class])
    ;
};

----------------------------------------

TITLE: Exporting PHP Variables Using VarExporter
DESCRIPTION: This snippet demonstrates how to use the VarExporter class to serialize a PHP variable to plain PHP code, store it in a file, and later regenerate the original variable.

LANGUAGE: PHP
CODE:
use Symfony\Component\VarExporter\VarExporter;

$exported = VarExporter::export($someVariable);
// store the $exported data in some file or cache system for later reuse
$data = file_put_contents('exported.php', '<?php return '.$exported.';');

// later, regenerate the original variable when you need it
$regeneratedVariable = require 'exported.php';

----------------------------------------

TITLE: Creating Basic Task Form Type with Tags Field
DESCRIPTION: Basic form type class that adds a tags text field to a Task form. This demonstrates the initial setup before adding the data transformer.

LANGUAGE: php
CODE:
namespace App\Form\Type;

use App\Entity\Task;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class TaskType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder->add('tags', TextType::class);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Task::class,
        ]);
    }
}

----------------------------------------

TITLE: Managing Service Class Definitions in Symfony PHP
DESCRIPTION: Shows how to create and modify service class definitions including setting and getting the service class.

LANGUAGE: php
CODE:
use App\Config\CustomConfigManager;
use App\Config\UserConfigManager;
use Symfony\Component\DependencyInjection\Definition;

$definition = new Definition(UserConfigManager::class);

// override the class
$definition->setClass(CustomConfigManager::class);

// get the class configured for this definition
$class = $definition->getClass();

----------------------------------------

TITLE: Configuring StaticMethodLoader in Symfony Validator
DESCRIPTION: Demonstrates how to set up a StaticMethodLoader to retrieve validation metadata by calling a static method of the class being validated.

LANGUAGE: php
CODE:
use Symfony\Component\Validator\Validation;

$validator = Validation::createValidatorBuilder()
    ->addMethodMapping('loadValidatorMetadata')
    ->getValidator();

----------------------------------------

TITLE: Configuring a Private Symfony Bundle Recipe
DESCRIPTION: Shows how to configure a recipe for a private Symfony bundle, including bundle registration for all environments.

LANGUAGE: json
CODE:
{
    "manifests": {
        "acme/private-bundle": {
            "manifest": {
                "bundles": {
                    "Acme\\PrivateBundle\\AcmePrivateBundle": [
                        "all"
                    ]
                }
            },
            "ref": "7405f3af1312d1f9121afed4dddef636c6c7ff00"
        }
    }
}

----------------------------------------

TITLE: Writing Assertions About Deprecations
DESCRIPTION: Example of how to write test assertions for expected deprecation messages using the ExpectDeprecationTrait.

LANGUAGE: PHP
CODE:
use PHPUnit\Framework\TestCase;
use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;

class MyTest extends TestCase
{
    use ExpectDeprecationTrait;

    /**
     * @group legacy
     */
    public function testDeprecatedCode(): void
    {
        // test some code that triggers the following deprecation:
        // trigger_deprecation('vendor-name/package-name', '5.1', 'This "Foo" method is deprecated.');
        $this->expectDeprecation('Since vendor-name/package-name 5.1: This "%s" method is deprecated');

        // ...

        // test some code that triggers the following deprecation:
        // trigger_deprecation('vendor-name/package-name', '4.4', 'The second argument of the "Bar" method is deprecated.');
        $this->expectDeprecation('Since vendor-name/package-name 4.4: The second argument of the "%s" method is deprecated.');
    }
}

----------------------------------------

TITLE: Configuring Lazy Loading for Symfony Console Commands in YAML
DESCRIPTION: This snippet demonstrates how to configure lazy loading for Symfony console commands using YAML configuration. It shows how to set the command attribute on the console.command tag in the service definition.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    # ...

    App\Command\SunshineCommand:
        tags:
            - { name: 'console.command', command: 'app:sunshine' }

----------------------------------------

TITLE: Implementing Custom User Loader in PHP
DESCRIPTION: Example of a custom user loader using a UserRepository in the UserBadge of a custom authenticator.

LANGUAGE: PHP
CODE:
// src/Security/CustomAuthenticator.php
namespace App\Security;

use App\Repository\UserRepository;
// ...

class CustomAuthenticator extends AbstractAuthenticator
{
    public function __construct(
        private UserRepository $userRepository,
    ) {
    }

    public function authenticate(Request $request): Passport
    {
        // ...

        return new Passport(
            new UserBadge($email, function (string $userIdentifier): ?UserInterface {
                return $this->userRepository->findOneBy(['email' => $userIdentifier]);
            }),
            $credentials
        );
    }
}

----------------------------------------

TITLE: Executing Symfony Console Application with Default Command
DESCRIPTION: Shows how to run the Symfony Console application from the command line. With the default command set, it will execute the HelloWorldCommand without specifying the command name.

LANGUAGE: Bash
CODE:
$ php application.php

----------------------------------------

TITLE: Creating Anonymous Services in Symfony YAML
DESCRIPTION: Demonstrates how to create and inject an anonymous service in Symfony's YAML configuration.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    App\Foo:
        arguments:
            - !service
                class: App\AnonymousBar

----------------------------------------

TITLE: Rendering Template Content with render Function
DESCRIPTION: Makes a request to the given internal URI or controller and returns the result. Used to embed controllers in templates.

LANGUAGE: twig
CODE:
{{ render(uri, options = []) }}

----------------------------------------

TITLE: PHPDoc Type Parsing Example
DESCRIPTION: Demonstrates how to resolve types from PHPDoc annotations using the TypeResolver with the phpstan/phpdoc-parser package.

LANGUAGE: php
CODE:
use Symfony\Component\TypeInfo\TypeResolver\TypeResolver;

class Dummy
{
    public function __construct(
        public int $id,
        /** @var string[] $tags */
        public array $tags,
    ) {
    }
}

$typeResolver = TypeResolver::create();
$typeResolver->resolve(new \ReflectionProperty(Dummy::class, 'id')); // returns an "int" Type
$typeResolver->resolve(new \ReflectionProperty(Dummy::class, 'tags')); // returns a collection with "int" as key and "string" as values Type

----------------------------------------

TITLE: Overriding Public Directory in Composer JSON
DESCRIPTION: This JSON snippet demonstrates how to specify a custom public directory in the composer.json file using the 'extra.public-dir' option.

LANGUAGE: json
CODE:
{
    "...": "...",
    "extra": {
        "...": "...",
        "public-dir": "my_new_public_dir"
    }
}

----------------------------------------

TITLE: Registering Type Guesser in PHP Configuration
DESCRIPTION: Service configuration in PHP format to register the custom type guesser both in Symfony application and standalone Form component.

LANGUAGE: php
CODE:
use App\Form\TypeGuesser\PhpDocTypeGuesser;
use Symfony\Component\Form\Forms;

$formFactory = Forms::createFormFactoryBuilder()
    ->addTypeGuesser(new PhpDocTypeGuesser())
    ->getFormFactory();

----------------------------------------

TITLE: Configuring Negative Regex Constraint with PHP Attributes
DESCRIPTION: Example of using the Regex constraint with PHP attributes to validate that a firstName field does not contain numbers.

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\Regex(
        pattern: '/\d/',
        match: false,
        message: 'Your name cannot contain a number',
    )]
    protected string $firstName;
}

----------------------------------------

TITLE: Version-Specific Code Handling - Component Check Example
DESCRIPTION: PHP code example showing how to handle different component versions by checking for specific method existence rather than kernel version.

LANGUAGE: php
CODE:
use Symfony\Component\OptionsResolver\OptionsResolver;

if (!method_exists(OptionsResolver::class, 'setDefined')) {
    // code for the old OptionsResolver API
} else {
    // code for the new OptionsResolver API
}

----------------------------------------

TITLE: Adding Remember Me Checkbox to Login Form
DESCRIPTION: This snippet demonstrates how to add a remember me checkbox to the login form in a Twig template.

LANGUAGE: html+twig
CODE:
{# templates/security/login.html.twig #}
<form method="post">
    {# ... your form fields #}

    <label>
        <input type="checkbox" name="_remember_me" checked>
        Keep me logged in
    </label>

    {# ... #}
</form>

----------------------------------------

TITLE: Retrieving Constraint Severity in PHP
DESCRIPTION: This PHP snippet demonstrates how to retrieve the severity level from a constraint violation object, which can be used for custom error handling.

LANGUAGE: php
CODE:
// a constraint validation failure, instance of
// Symfony\Component\Validator\ConstraintViolation
$constraintViolation = ...;
$constraint = $constraintViolation->getConstraint();
$severity = $constraint->payload['severity'] ?? null;

----------------------------------------

TITLE: Deprecating Services in Symfony XML
DESCRIPTION: Demonstrates how to deprecate a service using Symfony's XML configuration.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-Instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Service\OldService">
            <deprecated package="vendor-name/package-name" version="2.8">The "%service_id%" service is deprecated since vendor-name/package-name 2.8 and will be removed in 3.0.</deprecated>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Initializing and Using Cursor in Symfony Console Command
DESCRIPTION: Demonstrates how to create a Cursor instance and use it to move the cursor to a specific position before writing text. This snippet shows the basic setup within a Symfony console command.

LANGUAGE: php
CODE:
// src/Command/MyCommand.php
namespace App\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Cursor;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class MyCommand extends Command
{
    // ...

    public function execute(InputInterface $input, OutputInterface $output): int
    {
        // ...

        $cursor = new Cursor($output);

        // moves the cursor to a specific column (1st argument) and
        // row (2nd argument) position
        $cursor->moveToPosition(7, 11);

        // and write text on this position using the output
        $output->write('My text');

        // ...
    }
}

----------------------------------------

TITLE: Defining Non-Shared Service in PHP Configuration
DESCRIPTION: Shows how to configure non-shared services using PHP configuration file. Uses the ContainerConfigurator to set service sharing to false.

LANGUAGE: php
CODE:
// config/services.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

use App\SomeNonSharedService;

return function(ContainerConfigurator $container): void {
    $services = $container->services();

    $services->set(SomeNonSharedService::class)
        ->share(false);
};

----------------------------------------

TITLE: Date Comparison with LessThan Constraint
DESCRIPTION: Examples of using LessThan constraint to compare DateTime objects against date strings, including relative dates.

LANGUAGE: php
CODE:
// src/Entity/Person.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Person
{
    #[Assert\LessThan('today')]
    protected \DateTimeInterface $dateOfBirth;
}

----------------------------------------

TITLE: Initializing PropertyInfoExtractor with Various Extractors
DESCRIPTION: This code demonstrates how to create a PropertyInfoExtractor instance with different types of extractors for property information.

LANGUAGE: PHP
CODE:
use Example\Namespace\YourAwesomeCoolClass;
use Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor;
use Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor;
use Symfony\Component\PropertyInfo\PropertyInfoExtractor;

$phpDocExtractor = new PhpDocExtractor();
$reflectionExtractor = new ReflectionExtractor();

$listExtractors = [$reflectionExtractor];
$typeExtractors = [$phpDocExtractor, $reflectionExtractor];
$descriptionExtractors = [$phpDocExtractor];
$accessExtractors = [$reflectionExtractor];
$propertyInitializableExtractors = [$reflectionExtractor];

$propertyInfo = new PropertyInfoExtractor(
    $listExtractors,
    $typeExtractors,
    $descriptionExtractors,
    $accessExtractors,
    $propertyInitializableExtractors
);

$class = YourAwesomeCoolClass::class;
$properties = $propertyInfo->getProperties($class);

----------------------------------------

TITLE: Including SVG Diagrams in Symfony Docs
DESCRIPTION: Snippet for embedding SVG diagrams in Symfony documentation using raw HTML. It specifies how to reference the image file and provide alt text.

LANGUAGE: restructuredtext
CODE:
.. raw:: html

    <object data="_images/<folder-name>/<diagram-file-name>.svg" type="image/svg+xml"
        alt="<alt description>"
    ></object>

----------------------------------------

TITLE: Basic Form Creation Examples in Symfony Controller
DESCRIPTION: Demonstrates two ways of creating forms in a Symfony controller - one with existing data and one without data that will use empty_data.

LANGUAGE: php
CODE:
public function index(): Response
{
    $blog = ...;

    // $blog is passed in as the data, so the empty_data
    // option is not needed
    $form = $this->createForm(BlogType::class, $blog);

    // no data is passed in, so empty_data is
    // used to get the "starting data"
    $form = $this->createForm(BlogType::class);
}

----------------------------------------

TITLE: Defining URL Constraint in XML
DESCRIPTION: Example of defining the URL constraint using XML in a Symfony validation configuration file.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <property name="bioUrl">
            <constraint name="Url"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Configuring PHP Version per Project
DESCRIPTION: Commands to set a specific PHP version for a project using a .php-version file.

LANGUAGE: bash
CODE:
$ cd my-project/

# use a specific PHP version
$ echo 7.4 > .php-version

# use any PHP 8.x version available
$ echo 8 > .php-version

----------------------------------------

TITLE: Adding Remember Me Support to Custom Authenticator
DESCRIPTION: This code snippet shows how to add remember me support to a custom authenticator by adding a RememberMeBadge to the security passport.

LANGUAGE: php
CODE:
// src/Service/LoginAuthenticator.php
namespace App\Service;

// ...
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\RememberMeBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Passport;

class LoginAuthenticator extends AbstractAuthenticator
{
    public function authenticate(Request $request): Passport
    {
        // ...

        return new Passport(
            new UserBadge(...),
            new PasswordCredentials(...),
            [
                new RememberMeBadge(),
            ]
        );
    }
}

----------------------------------------

TITLE: Configuring a Custom Value Resolver in Symfony YAML
DESCRIPTION: Example of configuring a custom value resolver service in Symfony using YAML.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    _defaults:
        # ... be sure autowiring is enabled
        autowire: true
    # ...

    App\ValueResolver\BookingIdValueResolver:
        tags:
            - controller.argument_value_resolver:
                name: booking_id
                priority: 150

----------------------------------------

TITLE: Implementing Immutable Setter (Wither) in PHP for Symfony Service
DESCRIPTION: This snippet demonstrates how to implement an immutable setter (wither) method in a Symfony service class. It shows a MessageGenerator class with a withLogger method that returns a new instance with the logger set.

LANGUAGE: php
CODE:
// src/Service/MessageGenerator.php
namespace App\Service;

use Psr\Log\LoggerInterface;

class MessageGenerator
{
    private LoggerInterface $logger;

    public function withLogger(LoggerInterface $logger): self
    {
        $new = clone $this;
        $new->logger = $logger;

        return $new;
    }

    // ...
}

----------------------------------------

TITLE: Progress Bar Iteration with Arrays and Generators
DESCRIPTION: Shows how to use the iterate method to automatically handle progress bar advancement when working with arrays or generators.

LANGUAGE: php
CODE:
use Symfony\Component\Console\Helper\ProgressBar;

$progressBar = new ProgressBar($output);

// $iterable can be array
$iterable = [1, 2];
foreach ($progressBar->iterate($iterable) as $value) {
    // ... do some work
}

// or a generator
function iterable() { yield 1; yield 2; ... };
foreach ($progressBar->iterate(iterable()) as $value) {
    // ... do some work
}

----------------------------------------

TITLE: Configuring Service Visibility in Symfony YAML
DESCRIPTION: Shows how to configure a service as public in Symfony's services.yaml file.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    # ...

    App\Service\Foo:
        public: true

----------------------------------------

TITLE: Dynamic Collection Management with JavaScript
DESCRIPTION: JavaScript code for dynamically adding and removing tag forms in the collection, including event listeners and DOM manipulation

LANGUAGE: JavaScript
CODE:
document
  .querySelectorAll('.add_item_link')
  .forEach(btn => {
      btn.addEventListener("click", addFormToCollection)
  });

function addFormToCollection(e) {
  const collectionHolder = document.querySelector('.' + e.currentTarget.dataset.collectionHolderClass);

  const item = document.createElement('li');

  item.innerHTML = collectionHolder
    .dataset
    .prototype
    .replace(
      /__name__/g,
      collectionHolder.dataset.index
    );

  collectionHolder.appendChild(item);

  collectionHolder.dataset.index++;
};

----------------------------------------

TITLE: Creating Raw Email Messages with Low-Level API
DESCRIPTION: Demonstrates creating complex email messages using the low-level Message class with multiple parts and attachments.

LANGUAGE: php
CODE:
use Symfony\Component\Mime\Header\Headers;
use Symfony\Component\Mime\Message;
use Symfony\Component\Mime\Part\Multipart\AlternativePart;
use Symfony\Component\Mime\Part\TextPart;

$headers = (new Headers())
    ->addMailboxListHeader('From', ['fabien@symfony.com'])
    ->addMailboxListHeader('To', ['foo@example.com'])
    ->addTextHeader('Subject', 'Important Notification')
;

$textContent = new TextPart('Lorem ipsum...');
$htmlContent = new TextPart('<h1>Lorem ipsum</h1> <p>...</p>', null, 'html');
$body = new AlternativePart($textContent, $htmlContent);

$email = new Message($headers, $body);

----------------------------------------

TITLE: Adding Validation Constraints with PHP Attributes
DESCRIPTION: Demonstrates how to add validation constraints to Address and Author entities using PHP attributes.

LANGUAGE: php
CODE:
// src/Entity/Address.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Address
{
    #[Assert\NotBlank]
    protected string $street;

    #[Assert\NotBlank]
    #[Assert\Length(max: 5)]
    protected string $zipCode;
}

LANGUAGE: php
CODE:
// src/Entity/Author.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Author
{
    #[Assert\NotBlank]
    #[Assert\Length(min: 4)]
    protected string $firstName;

    #[Assert\NotBlank]
    protected string $lastName;

    protected Address $address;
}

----------------------------------------

TITLE: Individual Field Submission in Symfony Forms
DESCRIPTION: Example of submitting individual form fields using the submit() method directly on the field object.

LANGUAGE: php
CODE:
$form->get('firstName')->submit('Fabien');

----------------------------------------

TITLE: Applying Timezone Constraint Using PHP
DESCRIPTION: Example of applying the Timezone constraint using PHP in the UserSettings class with loadValidatorMetadata method.

LANGUAGE: php
CODE:
// src/Entity/UserSettings.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class UserSettings
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('timezone', new Assert\Timezone());
    }
}

----------------------------------------

TITLE: Running PHPUnit with Weak Deprecations Mode
DESCRIPTION: Command to run PHPUnit tests with weak deprecations mode enabled via environment variable.

LANGUAGE: shell
CODE:
$ SYMFONY_DEPRECATIONS_HELPER=max[total]=999999 php ./bin/phpunit

----------------------------------------

TITLE: Displaying Twig Configuration in Symfony
DESCRIPTION: Commands to display default and actual Twig configuration values in a Symfony application using the console.

LANGUAGE: terminal
CODE:
# displays the default config values defined by Symfony
$ php bin/console config:dump-reference twig

# displays the actual config values used by your application
$ php bin/console debug:config twig

----------------------------------------

TITLE: Using Multiple Entity Managers in Controllers
DESCRIPTION: Example of how to use different entity managers in a Symfony controller to manage different sets of entities.

LANGUAGE: php
CODE:
namespace App\Controller;

use Doctrine\ORM\EntityManagerInterface;
use Doctrine\Persistence\ManagerRegistry;

class UserController extends AbstractController
{
    public function index(ManagerRegistry $doctrine): Response
    {
        // Both methods return the default entity manager
        $entityManager = $doctrine->getManager();
        $entityManager = $doctrine->getManager('default');

        // This method returns instead the "customer" entity manager
        $customerEntityManager = $doctrine->getManager('customer');

        // ...
    }
}

----------------------------------------

TITLE: Controller Resolver Interface Definition
DESCRIPTION: Interface definition for the ControllerResolverInterface showing the required getController method.

LANGUAGE: php
CODE:
namespace Symfony\Component\HttpKernel\Controller;

// ...
interface ControllerResolverInterface
{
    public function getController(Request $request);
}

----------------------------------------

TITLE: Configuring Assets Base URLs in YAML
DESCRIPTION: Example of how to configure base URLs for assets in the framework configuration using YAML format.

LANGUAGE: yaml
CODE:
# config/packages/framework.yaml
framework:
    # ...
    assets:
        base_urls:
            - 'http://cdn.example.com/'

----------------------------------------

TITLE: Configuring ElasticsearchLogstashHandler Service in YAML
DESCRIPTION: YAML configuration for registering the ElasticsearchLogstashHandler as a service with default and optional parameter settings.

LANGUAGE: yaml
CODE:
# config/services.yaml
services:
    Symfony\Bridge\Monolog\Handler\ElasticsearchLogstashHandler: ~

    # optionally, configure the handler using the constructor arguments (shown values are default)
    Symfony\Bridge\Monolog\Handler\ElasticsearchLogstashHandler:
        arguments:
            $endpoint: "http://127.0.0.1:9200"
            $index: "monolog"
            $client: null
            $level: !php/enum Monolog\Level::Debug
            $bubble: true
            $elasticsearchVersion: '1.0.0'

----------------------------------------

TITLE: Sorting Results with Symfony Finder
DESCRIPTION: Demonstrates various methods to sort search results using the Symfony Finder component.

LANGUAGE: php
CODE:
$finder->sortByName();
$finder->sortByCaseInsensitiveName();
$finder->sortByExtension();
$finder->sortBySize();
$finder->sortByType();

----------------------------------------

TITLE: Implementing HTTP Caching with HttpCache in PHP
DESCRIPTION: This snippet shows how to implement HTTP caching using the HttpCache class from Symfony's HttpKernel component. It wraps the framework instance with HttpCache and sets up a cache store.

LANGUAGE: php
CODE:
// example.com/web/front.php

// ...
use Symfony\Component\HttpKernel;

$framework = new Simplex\Framework($dispatcher, $matcher, $controllerResolver, $argumentResolver);
$framework = new HttpKernel\HttpCache\HttpCache(
    $framework,
    new HttpKernel\HttpCache\Store(__DIR__.'/../cache')
);

$response = $framework->handle($request);
$response->send();

----------------------------------------

TITLE: Defining Basic Form Type Extension Class
DESCRIPTION: Creates a base form type extension class that extends AbstractTypeExtension to modify FileType fields. Shows the minimal required implementation with getExtendedTypes() method.

LANGUAGE: php
CODE:
namespace App\Form\Extension;

use Symfony\Component\Form\AbstractTypeExtension;
use Symfony\Component\Form\Extension\Core\Type\FileType;

class ImageTypeExtension extends AbstractTypeExtension
{
    public static function getExtendedTypes(): iterable
    {
        return [FileType::class];
    }
}

----------------------------------------

TITLE: Testing Multi-Client Interaction in Symfony
DESCRIPTION: This snippet demonstrates how to create multiple test clients and simulate interactions between them. It creates two clients, sends a POST request from one and a GET request from another, then asserts the expected responses.

LANGUAGE: PHP
CODE:
// ...
use Symfony\Component\HttpFoundation\Response;

$harry = static::createClient();
$sally = static::createClient();

$harry->request('POST', '/say/sally/Hello');
$sally->request('GET', '/messages');

$this->assertEquals(Response::HTTP_CREATED, $harry->getResponse()->getStatusCode());
$this->assertRegExp('/Hello/', $sally->getResponse()->getContent());

----------------------------------------

TITLE: Setting Bash Prompt for Asciinema Recording
DESCRIPTION: Bash configuration to set a simple '$ ' prompt when recording with Asciinema. This ensures a consistent and clean prompt in the recorded sessions.

LANGUAGE: bash
CODE:
if [ "$ASCIINEMA_REC" = "1" ]; then
  PS1="\e[37m$ \e[0m"
fi

----------------------------------------

TITLE: Running Tests for Single Component
DESCRIPTION: Command to run tests for a specific Symfony component by specifying the component path to PHPUnit.

LANGUAGE: terminal
CODE:
$ php ./phpunit src/Symfony/Component/Finder/

----------------------------------------

TITLE: Implementing Customer Entity with Interface in PHP
DESCRIPTION: Customer entity class that implements InvoiceSubjectInterface for handling customer-related functionality

LANGUAGE: php
CODE:
// src/Entity/Customer.php
namespace App\Entity;

use App\Entity\CustomerInterface as BaseCustomer;
use App\Model\InvoiceSubjectInterface;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity]
#[ORM\Table(name: 'customer')]
class Customer extends BaseCustomer implements InvoiceSubjectInterface
{
    // In this example, any methods defined in the InvoiceSubjectInterface
    // are already implemented in the BaseCustomer
}

----------------------------------------

TITLE: Installing Symfony Packages with Flex
DESCRIPTION: Example of using Composer with Symfony Flex to install a package (logger) in a Symfony application.

LANGUAGE: bash
CODE:
$ cd my-project/
$ composer require logger

----------------------------------------

TITLE: Customizing Lock Factory in Symfony Console Command
DESCRIPTION: Shows how to override the default lock factory implementation by injecting a custom LockFactory into the command class constructor.

LANGUAGE: php
CODE:
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Command\LockableTrait;
use Symfony\Component\Lock\LockFactory;

class UpdateContentsCommand extends Command
{
    use LockableTrait;

    public function __construct(private LockFactory $lockFactory)
    {
    }

    // ...

----------------------------------------

TITLE: Defining Constants for Rarely Changing Options in PHP
DESCRIPTION: Use PHP constants in related classes to define configuration options that rarely change, such as the number of items to display in a listing.

LANGUAGE: php
CODE:
// src/Entity/Post.php
namespace App\Entity;

class Post
{
    public const NUMBER_OF_ITEMS = 10;

    // ...
}

----------------------------------------

TITLE: Configuring Cascade Validation in YAML
DESCRIPTION: Example demonstrating how to configure the Cascade constraint using YAML configuration for a BookCollection entity.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\BookCollection:
    constraints:
        - Cascade: ~

----------------------------------------

TITLE: Creating Custom ExpressionLanguage Class in PHP
DESCRIPTION: Shows how to create a custom ExpressionLanguage class that automatically includes certain providers.

LANGUAGE: php
CODE:
use Psr\Cache\CacheItemPoolInterface;
use Symfony\Component\ExpressionLanguage\ExpressionLanguage as BaseExpressionLanguage;

class ExpressionLanguage extends BaseExpressionLanguage
{
    public function __construct(?CacheItemPoolInterface $cache = null, array $providers = [])
    {
        // prepends the default provider to let users override it
        array_unshift($providers, new StringExpressionLanguageProvider());

        parent::__construct($cache, $providers);
    }
}

----------------------------------------

TITLE: Rotating File Handler Configuration
DESCRIPTION: Configuration for implementing log file rotation using Monolog's rotating_file handler to manage log file sizes and retention.

LANGUAGE: yaml
CODE:
monolog:
    handlers:
        main:
            type:  rotating_file
            path:  '%kernel.logs_dir%/%kernel.environment%.log'
            level: debug
            max_files: 10

----------------------------------------

TITLE: Configuring Webpack Encore for Test Environment in Symfony
DESCRIPTION: This YAML configuration disables strict mode for Webpack Encore in the test environment to prevent exceptions when entrypoints.json is missing.

LANGUAGE: yaml
CODE:
# config/packages/test/webpack_encore.yaml
webpack_encore:
    strict_mode: false
    # ...

----------------------------------------

TITLE: Configuring Assets Base URLs in PHP
DESCRIPTION: Example of how to configure base URLs for assets in the framework configuration using PHP format.

LANGUAGE: php
CODE:
// config/packages/framework.php
use Symfony\Config\FrameworkConfig;

return static function (FrameworkConfig $framework): void {
    // ...
    $framework->assets()
        ->baseUrls(['http://cdn.example.com/']);
};

----------------------------------------

TITLE: Initial Documentation Repository Setup - Terminal Commands
DESCRIPTION: Commands for setting up the local documentation repository with proper remote configurations.

LANGUAGE: terminal
CODE:
$ git clone https://github.com/<YOUR-NAME>/symfony-docs.git

$ cd symfony-docs/

$ git remote add upstream https://github.com/symfony/symfony-docs

$ git remote add gh https://github.com/symfony/symfony-docs

$ git config gh.remote gh

----------------------------------------

TITLE: Initializing Bootstrap JavaScript with jQuery
DESCRIPTION: JavaScript configuration for Bootstrap with jQuery integration and popover initialization

LANGUAGE: javascript
CODE:
// app.js

const $ = require('jquery');
// this "modifies" the jquery module: adding behavior to it
// the bootstrap module doesn't export/return anything
require('bootstrap');

// or you can include specific pieces
// require('bootstrap/js/dist/tooltip');
// require('bootstrap/js/dist/popover');

$(document).ready(function() {
    $('[data-toggle="popover"]').popover();
});

----------------------------------------

TITLE: Console Command Output Examples
DESCRIPTION: Example outputs from various console commands showing version information display.

LANGUAGE: text
CODE:
Acme Console Application version 1.2

LANGUAGE: text
CODE:
Console Tool

----------------------------------------

TITLE: Setting Cache Headers in Controller Response
DESCRIPTION: This code demonstrates how to set cache headers in a controller's response. It uses the setTtl method to set the Time-To-Live (TTL) for the response cache.

LANGUAGE: php
CODE:
// example.com/src/Calendar/Controller/LeapYearController.php

// ...
public function index(Request $request, int $year): Response
{
    $leapYear = new LeapYear();
    if ($leapYear->isLeapYear($year)) {
        $response = new Response('Yep, this is a leap year!');
    } else {
        $response = new Response('Nope, this is not a leap year.');
    }

    $response->setTtl(10);

    return $response;
}

----------------------------------------

TITLE: Handling HTTP Responses with HttpBrowser in PHP
DESCRIPTION: Examples of accessing and processing HTTP responses when using HttpBrowser for external requests.

LANGUAGE: PHP
CODE:
$browser = new HttpBrowser(HttpClient::create());

$browser->request('GET', 'https://foo.com');
$response = $browser->getResponse();

$browser->request('GET', 'https://api.foo.com');
$response = $browser->getResponse()->toArray();

----------------------------------------

TITLE: Displaying Doctrine Configuration in Symfony Console
DESCRIPTION: Commands to display default and actual Doctrine configuration values using Symfony console.

LANGUAGE: bash
CODE:
# displays the default config values defined by Symfony
$ php bin/console config:dump-reference doctrine

# displays the actual config values used by your application
$ php bin/console debug:config doctrine

----------------------------------------

TITLE: Installing ExpressionLanguage Component via Composer
DESCRIPTION: Shows how to install the ExpressionLanguage component using Composer.

LANGUAGE: bash
CODE:
$ composer require symfony/expression-language

----------------------------------------

TITLE: Channel Configuration Examples in YAML
DESCRIPTION: Examples of different channel configuration patterns in YAML format, showing how to include or exclude specific channels.

LANGUAGE: yaml
CODE:
channels: ~    # Include all the channels

channels: foo  # Include only channel 'foo'
channels: '!foo' # Include all channels, except 'foo'

channels: [foo, bar]   # Include only channels 'foo' and 'bar'
channels: ['!foo', '!bar'] # Include all channels, except 'foo' and 'bar'

----------------------------------------

TITLE: Configuring Monolog HTTP Code Exclusion in PHP
DESCRIPTION: This PHP configuration for Monolog sets up a 'fingers_crossed' handler to exclude logging of specific HTTP codes (403 and 404). It demonstrates how to programmatically configure the exclusions using the Symfony Config component.

LANGUAGE: php
CODE:
// config/packages/prod/monolog.php
use Symfony\Config\MonologConfig;

return static function (MonologConfig $monolog): void {
    $mainHandler = $monolog->handler('main')
        // ...
        ->type('fingers_crossed')
        ->handler('...')
    ;

    $mainHandler->excludedHttpCode()->code(403);
    $mainHandler->excludedHttpCode()->code(404);
};

----------------------------------------

TITLE: Setting Container Build Time in XML
DESCRIPTION: This snippet demonstrates how to set the kernel.container_build_time parameter in an XML configuration file for reproducible builds.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">

    <parameters>
        <!-- ... -->
        <parameter key="kernel.container_build_time">1234567890</parameter>
    </parameters>
</container>

----------------------------------------

TITLE: Defining Symfony Documentation Structure in reStructuredText
DESCRIPTION: This snippet defines the overall structure of the Symfony documentation using reStructuredText directives. It includes sections for Quick Tour, Getting Started, Topics, Components, Reference Documents, Contributing, and Creating Your Own Framework.

LANGUAGE: reStructuredText
CODE:
.. _symfony2-documentation:

Symfony Documentation
=====================

Quick Tour
----------

Get started fast with the Symfony :doc:`Quick Tour <quick_tour/index>`:

* :doc:`quick_tour/the_big_picture`
* :doc:`quick_tour/flex_recipes`
* :doc:`quick_tour/the_architecture`

Getting Started
---------------

.. toctree::
    :maxdepth: 2

    getting_started/index

Topics
------

.. toctree::
    :maxdepth: 1

    best_practices
    bundles
    cache
    console
    doctrine
    deployment
    event_dispatcher
    forms
    frontend
    html_sanitizer
    http_cache
    http_client
    lock
    logging
    mailer
    mercure
    messenger
    migration
    notifier
    performance
    profiler
    rate_limiter
    routing
    security
    session
    setup
    serializer
    service_container
    testing
    translation
    validation
    web_link
    webhook
    workflow

Components
----------

Read the :doc:`Components </components/>` documentation.

Reference Documents
-------------------

Get answers quickly with reference documents:

.. include:: /reference/map.rst.inc

Contributing
------------

Contribute to Symfony:

.. include:: /contributing/map.rst.inc

Create your Own Framework
-------------------------

Want to create your own framework based on Symfony?

.. toctree::
   :maxdepth: 2

   create_framework/index

----------------------------------------

TITLE: ESI Controller Implementation in PHP
DESCRIPTION: Example of a Symfony controller implementing ESI caching with public cache settings and max age configuration.

LANGUAGE: php
CODE:
// src/Controller/DefaultController.php
namespace App\Controller;

// ...
class DefaultController extends AbstractController
{
    public function about(): Response
    {
        $response = $this->render('static/about.html.twig');
        $response->setPublic();
        $response->setMaxAge(600);

        return $response;
    }
}

----------------------------------------

TITLE: Configuring Login Link Lifetime in Symfony
DESCRIPTION: YAML configuration for setting the lifetime of login links in Symfony's security settings.

LANGUAGE: yaml
CODE:
security:
    firewalls:
        main:
            login_link:
                check_route: login_check
                lifetime: 300

----------------------------------------

TITLE: Creating a Serializable Lock Class in Symfony
DESCRIPTION: Example of creating a serializable class to hold the lock state for use across different processes.

LANGUAGE: PHP
CODE:
// src/Lock/RefreshTaxonomy.php
namespace App\Lock;

use Symfony\Component\Lock\Key;

class RefreshTaxonomy
{
    public function __construct(
        private object $article,
        private Key $key,
    ) {
    }

    public function getArticle(): object
    {
        return $this->article;
    }

    public function getKey(): Key
    {
        return $this->key;
    }
}

----------------------------------------

TITLE: Configuring Bundle Environment Activation in Symfony
DESCRIPTION: Demonstrates how to enable/disable bundles for different Symfony environments (dev, test, prod) using the config/bundles.php file.

LANGUAGE: php
CODE:
// config/bundles.php
return [
    // 'all' means that the bundle is enabled for any Symfony environment
    Symfony\Bundle\FrameworkBundle\FrameworkBundle::class => ['all' => true],
    // ...

    // this bundle is enabled only in 'dev'
    Symfony\Bundle\DebugBundle\DebugBundle::class => ['dev' => true],
    // ...

    // this bundle is enabled only in 'dev' and 'test', so you can't use it in 'prod'
    Symfony\Bundle\WebProfilerBundle\WebProfilerBundle::class => ['dev' => true, 'test' => true],
    // ...
];

----------------------------------------

TITLE: Implementing Custom Event Class
DESCRIPTION: Creating a custom event class that extends Symfony's Event class to handle order placement events.

LANGUAGE: PHP
CODE:
namespace Acme\Store\Event;

use Acme\Store\Order;
use Symfony\Contracts\EventDispatcher\Event;

/**
 * This event is dispatched each time an order
 * is placed in the system.
 */
final class OrderPlacedEvent extends Event
{
    public function __construct(private Order $order) {}

    public function getOrder(): Order
    {
        return $this->order;
    }
}

----------------------------------------

TITLE: Manual Console Output Handling in PHP
DESCRIPTION: Example showing manual handling of console output verbosity levels using OutputInterface methods.

LANGUAGE: php
CODE:
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

protected function execute(InputInterface $input, OutputInterface $output): int
{
    if ($output->isDebug()) {
        $output->writeln('Some info');
    }

    if ($output->isVerbose()) {
        $output->writeln('Some more info');
    }

    // ...
}

----------------------------------------

TITLE: Setting Cache Controls directly on Response object in Symfony
DESCRIPTION: Shows how to set cache controls directly on the Response object using setPublic() and setMaxAge() methods.

LANGUAGE: php
CODE:
// sets the number of seconds after which the response
// should no longer be considered fresh by shared caches
$response->setPublic();
$response->setMaxAge(600);

----------------------------------------

TITLE: Configuring Logout Options
DESCRIPTION: Example of configuring logout options including cookie deletion and site data clearing.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
security:
    # ...
    firewalls:
        main:
            # ...
            logout:
                delete_cookies:
                    cookie1-name: null
                    cookie2-name:
                        path: '/'
                clear_site_data:
                    - cookies
                    - storage

----------------------------------------

TITLE: Basic Flat PHP Blog Implementation
DESCRIPTION: Initial implementation of a blog in flat PHP using direct database connection and mixed HTML/PHP code.

LANGUAGE: html+php
CODE:
<?php
// index.php
$connection = new PDO("mysql:host=localhost;dbname=blog_db", 'myuser', 'mypassword');

$result = $connection->query('SELECT id, title FROM post');
?>

<!DOCTYPE html>
<html>
    <head>
        <title>List of Posts</title>
    </head>
    <body>
        <h1>List of Posts</h1>
        <ul>
            <?php while ($row = $result->fetch(PDO::FETCH_ASSOC)): ?>
            <li>
                <a href="/show.php?id=<?= $row['id'] ?>">
                    <?= $row['title'] ?>
                </a>
            </li>
            <?php endwhile ?>
        </ul>
    </body>
</html>

<?php
$connection = null;
?>

----------------------------------------

TITLE: Defining Hostname Validation in XML
DESCRIPTION: XML configuration for the Hostname constraint, specifying validation rules for the ServerSettings entity's name property.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\ServerSettings">
        <property name="name">
            <constraint name="Hostname">
                <option name="message">The server name must be a valid hostname.</option>
            </constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Configuring Validation Groups Using Static Method Callback
DESCRIPTION: Demonstrates how to set validation groups using a static method callback on the Client class. This approach allows for validation group determination through a separate class method.

LANGUAGE: php
CODE:
public function configureOptions(OptionsResolver $resolver): void
{
    $resolver->setDefaults([
        'validation_groups' => [
            Client::class,
            'determineValidationGroups',
        ],
    ]);
}

----------------------------------------

TITLE: Registering DQL Functions with Default Entity Manager (YAML)
DESCRIPTION: YAML configuration for registering custom string, numeric and datetime DQL functions with the default Doctrine entity manager in Symfony.

LANGUAGE: yaml
CODE:
# config/packages/doctrine.yaml
doctrine:
    orm:
        # ...
        dql:
            string_functions:
                test_string: App\DQL\StringFunction
                second_string: App\DQL\SecondStringFunction
            numeric_functions:
                test_numeric: App\DQL\NumericFunction
            datetime_functions:
                test_datetime: App\DQL\DatetimeFunction

----------------------------------------

TITLE: Using Custom Callback with ProcessHelper in PHP
DESCRIPTION: Shows how to use a custom callback function with the ProcessHelper. This allows for custom handling of stdout and stderr output during process execution.

LANGUAGE: php
CODE:
use Symfony\Component\Process\Process;

$helper->run($output, $process, 'The process failed :(', function (string $type, string $data): void {
    if (Process::ERR === $type) {
        // ... do something with the stderr output
    } else {
        // ... do something with the stdout
    }
});

----------------------------------------

TITLE: Configuring Custom PostCSS Options
DESCRIPTION: Shows how to pass custom options to postcss-loader including specifying a custom configuration file location.

LANGUAGE: diff
CODE:
      // webpack.config.js
    + const path = require('path');

      Encore
          // ...
    +     .enablePostCssLoader((options) => {
    +         options.postcssOptions = {
    +             // the directory where the postcss.config.js file is stored
    +             config: path.resolve(__dirname, 'sub-dir', 'custom.config.js'),
    +         };
    +     })
      ;

----------------------------------------

TITLE: XML Namespace Handling Example
DESCRIPTION: Shows how to work with XML documents containing namespaces

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<entry
    xmlns="http://www.w3.org/2005/Atom"
    xmlns:media="http://search.yahoo.com/mrss/"
    xmlns:yt="http://gdata.youtube.com/schemas/2007"
>
    <id>tag:youtube.com,2008:video:kgZRZmEc9j4</id>
    <yt:accessControl action="comment" permission="allowed"/>
    <yt:accessControl action="videoRespond" permission="moderated"/>
    <media:group>
        <media:title type="plain">Chordates - CrashCourse Biology #24</media:title>
        <yt:aspectRatio>widescreen</yt:aspectRatio>
    </media:group>
</entry>

----------------------------------------

TITLE: Monolog YAML Configuration
DESCRIPTION: YAML configuration for Monolog console handler with channel exclusions and PSR-3 message processing settings.

LANGUAGE: yaml
CODE:
# config/packages/dev/monolog.yaml
monolog:
    handlers:
        # ...
        console:
            type:   console
            process_psr_3_messages: false
            channels: ['!event', '!doctrine', '!console']

            # optionally configure the mapping between verbosity levels and log levels
            # verbosity_levels:
            #     VERBOSITY_NORMAL: NOTICE

----------------------------------------

TITLE: Initializing TraceableEventDispatcher in PHP
DESCRIPTION: Creates a new TraceableEventDispatcher instance by wrapping an existing event dispatcher with a Stopwatch instance for debugging purposes.

LANGUAGE: php
CODE:
use Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher;
use Symfony\Component\Stopwatch\Stopwatch;

// the event dispatcher to debug
$dispatcher = ...;

$traceableEventDispatcher = new TraceableEventDispatcher(
    $dispatcher,
    new Stopwatch()
);

----------------------------------------

TITLE: Configuring Twig Form Themes in YAML
DESCRIPTION: Example of configuring form themes in Twig using YAML configuration format.

LANGUAGE: yaml
CODE:
# config/packages/twig.yaml
twig:
    form_themes: ['bootstrap_5_layout.html.twig', 'form/my_theme.html.twig']
    # ...

----------------------------------------

TITLE: Implementing Media Entity Class
DESCRIPTION: Defines a Media entity class with path property for storing image paths and a method to get the web-accessible path.

LANGUAGE: php
CODE:
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;

class Media
{
    private string $path;

    public function getWebPath(): string
    {
        return $webPath;
    }
}

----------------------------------------

TITLE: Using Configuration Parameters in PHP
DESCRIPTION: Illustrates how to use configuration parameters in PHP format.

LANGUAGE: php
CODE:
// config/packages/some_package.php
namespace Symfony\Component\DependencyInjection\Loader\Configurator;
use function Symfony\Component\DependencyInjection\Loader\Configurator\param;

return static function (ContainerConfigurator $container): void {
    $container->extension('some_package', [
        'email_address' => param('app.admin_email'),
        'email_address' => '%app.admin_email%',
    ]);
};

----------------------------------------

TITLE: PHP-based Validator Configuration
DESCRIPTION: Example showing how to configure CSS color validation using PHP code with ClassMetadata in a Bulb entity.

LANGUAGE: php
CODE:
// src/Entity/Bulb.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Bulb
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('defaultColor', new Assert\CssColor());

        $metadata->addPropertyConstraint('accentColor', new Assert\CssColor(
            formats: Assert\CssColor::HEX_LONG,
            message: 'The accent color must be a 6-character hexadecimal color.',
        ));

        $metadata->addPropertyConstraint('currentColor', new Assert\CssColor(
            formats: [Assert\CssColor::BASIC_NAMED_COLORS, Assert\CssColor::EXTENDED_NAMED_COLORS],
            message: 'The color "{{ value }}" is not a valid CSS color name.',
        ));
    }
}

----------------------------------------

TITLE: Configuring IsTrue Constraint in YAML
DESCRIPTION: This YAML configuration applies the IsTrue constraint to the tokenValid getter of the Author class. It specifies a custom error message for invalid tokens.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    getters:
        tokenValid:
            - 'IsTrue':
                message: The token is invalid.

----------------------------------------

TITLE: HTML Rendering of TelType Field
DESCRIPTION: Shows how the TelType field is rendered in HTML. The field uses the HTML5 tel input type which can trigger specialized input keyboards on mobile devices.

LANGUAGE: html
CODE:
<input type="tel">

----------------------------------------

TITLE: Making External HTTP Requests with HttpBrowser in PHP
DESCRIPTION: Example of using HttpBrowser to make external HTTP requests and interact with web pages.

LANGUAGE: PHP
CODE:
use Symfony\Component\BrowserKit\HttpBrowser;
use Symfony\Component\HttpClient\HttpClient;

$browser = new HttpBrowser(HttpClient::create());

$browser->request('GET', 'https://github.com');
$browser->clickLink('Sign in');
$browser->submitForm('Sign in', ['login' => '...', 'password' => '...']);
$openPullRequests = trim($browser->clickLink('Pull requests')->filter(
    '.table-list-header-toggle a:nth-child(1)'
)->text());

----------------------------------------

TITLE: Using the EnglishInflector
DESCRIPTION: Example of using the EnglishInflector to convert words between singular and plural forms.

LANGUAGE: PHP
CODE:
use Symfony\Component\String\Inflector\EnglishInflector;

$inflector = new EnglishInflector();

$result = $inflector->singularize('teeth');   // ['tooth']
$result = $inflector->pluralize('bacterium'); // ['bacteria']

----------------------------------------

TITLE: Composer Configuration for Symfony Bundle
DESCRIPTION: Example JSON configuration showing required metadata for a Symfony bundle's composer.json file.

LANGUAGE: json
CODE:
{
    "autoload": {
        "psr-4": {
            "Acme\\BlogBundle\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Acme\\BlogBundle\\Tests\\": "tests/"
        }
    }
}

----------------------------------------

TITLE: Controller Arguments Event Handler - PHP
DESCRIPTION: Example of handling kernel.controller_arguments event to modify controller arguments

LANGUAGE: PHP
CODE:
use Symfony\Component\HttpKernel\Event\ControllerArgumentsEvent;

public function onKernelControllerArguments(ControllerArgumentsEvent $event): void
{
    // ...

    // get controller and request arguments
    $namedArguments = $event->getRequest()->attributes->all();
    $controllerArguments = $event->getArguments();

    // set the controller arguments to modify the original arguments or add new ones
    $event->setArguments($newArguments);
}

----------------------------------------

TITLE: Configuring Twig Debug Mode (XML)
DESCRIPTION: Demonstrates how to configure Twig's debug mode in the XML configuration file. The kernel.debug parameter is used to set the debug mode dynamically based on the application's debug state.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:twig="http://symfony.com/schema/dic/twig"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/twig
        https://symfony.com/schema/dic/twig/twig-1.0.xsd">

    <twig:config debug="%kernel.debug%"/>

</container>

----------------------------------------

TITLE: Adding Category Field to TaskType Form in PHP
DESCRIPTION: Updates the TaskType form class to include a 'category' field of type CategoryType.

LANGUAGE: php
CODE:
use App\Form\CategoryType;
use Symfony\Component\Form\FormBuilderInterface;

public function buildForm(FormBuilderInterface $builder, array $options): void
{
    // ...

    $builder->add('category', CategoryType::class);
}

----------------------------------------

TITLE: Configuring NotEqualTo Constraint Using PHP
DESCRIPTION: This snippet demonstrates how to configure the NotEqualTo constraint using PHP in a loadValidatorMetadata method. It applies the constraint to the firstName and age properties of the Person entity.

LANGUAGE: php
CODE:
// src/Entity/Person.php
namespace App\Entity;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Mapping\ClassMetadata;

class Person
{
    // ...

    public static function loadValidatorMetadata(ClassMetadata $metadata): void
    {
        $metadata->addPropertyConstraint('firstName', new Assert\NotEqualTo('Mary'));

        $metadata->addPropertyConstraint('age', new Assert\NotEqualTo(
            value: 15,
        ));
    }
}

----------------------------------------

TITLE: Configuring Rate Limiters in YAML
DESCRIPTION: Example of configuring two rate limiters (anonymous_api and authenticated_api) using YAML format.

LANGUAGE: yaml
CODE:
# config/packages/rate_limiter.yaml
framework:
    rate_limiter:
        anonymous_api:
            policy: 'fixed_window'
            limit: 100
            interval: '60 minutes'
        authenticated_api:
            policy: 'token_bucket'
            limit: 5000
            rate: { interval: '15 minutes', amount: 500 }

----------------------------------------

TITLE: Configuring Twig Form Themes in PHP
DESCRIPTION: Example of configuring form themes in Twig using PHP configuration format.

LANGUAGE: php
CODE:
// config/packages/twig.php
use Symfony\Config\TwigConfig;

return static function (TwigConfig $twig): void {
    $twig->formThemes([
        'bootstrap_5_layout.html.twig',
        'form/my_theme.html.twig',
    ]);

    // ...
};

----------------------------------------

TITLE: Configuring Couchbase Connection with Multiple Servers in Single DSN in PHP
DESCRIPTION: This snippet shows how to create and configure a Couchbase Collection instance using a single Data Source Name (DSN) string that defines multiple servers.

LANGUAGE: php
CODE:
use Symfony\Component\Cache\Adapter\CouchbaseCollectionAdapter;

// a single DSN can define multiple servers using the following syntax:
// host[hostname-or-IP:port] (where port is optional). Sockets must include a trailing ':'
$client = CouchbaseCollectionAdapter::createConnection(
    'couchbase:?host[localhost]&host[localhost:12345]'
);

----------------------------------------

TITLE: Converting PSR-7 Response to Symfony Response
DESCRIPTION: PHP code to convert a PSR-7 Response object to a Symfony HttpFoundation Response object using the HttpFoundationFactory.

LANGUAGE: php
CODE:
use Symfony\Bridge\PsrHttpMessage\Factory\HttpFoundationFactory;

// $psrResponse is an instance of Psr\Http\Message\ResponseInterface

$httpFoundationFactory = new HttpFoundationFactory();
$symfonyResponse = $httpFoundationFactory->createResponse($psrResponse);

----------------------------------------

TITLE: Configuring Regex Constraint with YAML
DESCRIPTION: Example of using the Regex constraint in YAML configuration to validate that a description field begins with a word character.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Author:
    properties:
        description:
            - Regex: '/^\w+/'

----------------------------------------

TITLE: Enabling a Custom Bundle in Symfony
DESCRIPTION: Demonstrates how to enable a newly created custom bundle in the Symfony application configuration.

LANGUAGE: php
CODE:
// config/bundles.php
return [
    // ...
    Acme\BlogBundle\AcmeBlogBundle::class => ['all' => true],
];

----------------------------------------

TITLE: Scheduling Recurring Messages with Cron Expressions
DESCRIPTION: Example of scheduling recurring messages using cron expressions in PHP.

LANGUAGE: PHP
CODE:
RecurringMessage::cron('* * * * *', new Message());

// optionally you can define the timezone used by the cron expression
RecurringMessage::cron('* * * * *', new Message(), new \DateTimeZone('Africa/Malabo'));

----------------------------------------

TITLE: Configuring composer.json for GitLab-hosted Recipes
DESCRIPTION: Shows how to configure the composer.json file to use GitLab-hosted private Symfony Flex recipes.

LANGUAGE: json
CODE:
{
    "extra": {
        "symfony": {
            "endpoint": [
                "https://gitlab.com/api/v4/projects/your-gitlab-project-id/repository/files/index.json/raw?ref=main",
                "flex://defaults"
            ]
        }
    }
}

----------------------------------------

TITLE: Installing Web Drivers
DESCRIPTION: Commands to install ChromeDriver and geckodriver using the browser-driver-installer package.

LANGUAGE: bash
CODE:
$ composer require --dev dbrekelmans/bdi

$ vendor/bin/bdi detect drivers

----------------------------------------

TITLE: Monolog Console Handler Implementation
DESCRIPTION: Improved implementation using MonologBridge's ConsoleHandler with LoggerInterface for simplified logging.

LANGUAGE: php
CODE:
// src/Command/YourCommand.php
namespace App\Command;

use Psr\Log\LoggerInterface;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class YourCommand extends Command
{
    public function __construct(
        private LoggerInterface $logger,
    ) {
        parent::__construct();
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $this->logger->debug('Some info');
        $this->logger->notice('Some more info');

        return Command::SUCCESS;
    }
}

----------------------------------------

TITLE: Defining NegativeOrZero Constraint in XML
DESCRIPTION: This snippet illustrates how to define the NegativeOrZero constraint for a property using XML in Symfony's validation configuration.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\UnderGroundGarage">
        <property name="level">
            <constraint name="NegativeOrZero"></constraint>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Asynchronous Cache Computation in Symfony YAML
DESCRIPTION: Demonstrates how to configure asynchronous cache value computation using Symfony Messenger.

LANGUAGE: yaml
CODE:
# config/packages/framework.yaml
framework:
    cache:
        pools:
            async.cache:
                early_expiration_message_bus: messenger.default_bus

    messenger:
        transports:
            async_bus: '%env(MESSENGER_TRANSPORT_DSN)%'
        routing:
            'Symfony\Component\Cache\Messenger\EarlyExpirationMessage': async_bus

----------------------------------------

TITLE: Implementing SMS Webhook Consumer
DESCRIPTION: PHP class implementing a webhook consumer for handling SMS events from Twilio.

LANGUAGE: php
CODE:
use Symfony\Component\RemoteEvent\Attribute\AsRemoteEventConsumer;
use Symfony\Component\RemoteEvent\Consumer\ConsumerInterface;
use Symfony\Component\RemoteEvent\Event\Sms\SmsEvent;
use Symfony\Component\RemoteEvent\RemoteEvent;

#[AsRemoteEventConsumer('notifier_twilio')]
class WebhookListener implements ConsumerInterface
{
    public function consume(RemoteEvent $event): void
    {
        if ($event instanceof SmsEvent) {
            $this->handleSmsEvent($event);
        } else {
            // This is not an SMS event
            return;
        }
    }

    private function handleSmsEvent(SmsEvent $event): void
    {
        // Handle the SMS event
    }
}

----------------------------------------

TITLE: Configuring Loader Rules in Symfony Encore
DESCRIPTION: This JavaScript snippet demonstrates how to configure specific loader rules in Symfony Encore, such as modifying the ESLint loader to lint Vue files.

LANGUAGE: javascript
CODE:
Encore.configureLoaderRule('eslint', loaderRule => {
    loaderRule.test = /\.(jsx?|vue)$/
});

return Encore.getWebpackConfig();

----------------------------------------

TITLE: Using Cache Tags in Symfony PHP
DESCRIPTION: Demonstrates how to use cache tags in Symfony to organize and invalidate cached data more efficiently.

LANGUAGE: php
CODE:
use Symfony\Contracts\Cache\ItemInterface;
use Symfony\Contracts\Cache\TagAwareCacheInterface;

class SomeClass
{
    // using autowiring to inject the cache pool
    public function __construct(
        private TagAwareCacheInterface $myCachePool,
    ) {
    }

    public function someMethod(): void
    {
        $value0 = $this->myCachePool->get('item_0', function (ItemInterface $item): string {
            $item->tag(['foo', 'bar']);

            return 'debug';
        });

        $value1 = $this->myCachePool->get('item_1', function (ItemInterface $item): string {
            $item->tag('foo');

            return 'debug';
        });

        // Remove all cache keys tagged with "bar"
        $this->myCachePool->invalidateTags(['bar']);
    }
}

----------------------------------------

TITLE: API Controller Example
DESCRIPTION: Controller demonstrating basic JSON API response functionality in Symfony.

LANGUAGE: php
CODE:
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Routing\Attribute\Route;

class DefaultController extends AbstractController
{
    #[Route('/api/hello/{name}', methods: ['GET'])]
    public function apiHello(string $name): JsonResponse
    {
        return $this->json([
            'name' => $name,
            'symfony' => 'rocks',
        ]);
    }
}

----------------------------------------

TITLE: Using AsTaggedItem Attribute
DESCRIPTION: Example of using the AsTaggedItem attribute to configure service tags with PHP attributes

LANGUAGE: php
CODE:
use Symfony\Component\DependencyInjection\Attribute\AsTaggedItem;

#[AsTaggedItem(index: 'handler_one', priority: 10)]
class One
{
    // ...
}

----------------------------------------

TITLE: Overriding Templates Directory in YAML Configuration
DESCRIPTION: This YAML configuration demonstrates how to override the default templates directory using the twig.default_path option.

LANGUAGE: yaml
CODE:
# config/packages/twig.yaml
twig:
    # ...
    default_path: "%kernel.project_dir%/resources/views"

----------------------------------------

TITLE: Configuring Monolog HTTP Code Exclusion in XML
DESCRIPTION: This XML configuration for Monolog sets up a 'fingers_crossed' handler to exclude logging of specific HTTP codes (403 and 404) and allows for more complex exclusions based on URL patterns.

LANGUAGE: xml
CODE:
<!-- config/packages/prod/monolog.xml -->
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:monolog="http://symfony.com/schema/dic/monolog"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/monolog
        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd">

    <monolog:config>
        <monolog:handler type="fingers_crossed" name="main" handler="...">
            <!-- ... -->
            <monolog:excluded-http-code code="403">
                <monolog:url>^/foo</monolog:url>
                <monolog:url>^/bar</monolog:url>
            </monolog:excluded-http-code>
            <monolog:excluded-http-code code="404"/>
        </monolog:handler>
    </monolog:config>
</container>

----------------------------------------

TITLE: Hydrating Existing PHP Objects
DESCRIPTION: This example demonstrates how to use the Hydrator class to populate properties of existing objects, including private properties of parent classes.

LANGUAGE: PHP
CODE:
use Symfony\Component\VarExporter\Hydrator;

$object = new Foo();
Hydrator::hydrate($object, ['propertyName' => $propertyValue]);

$object = new Foo();
Hydrator::hydrate($object, [], [
    Bar::class => ['privateBarProperty' => $propertyValue],
]);

// alternatively, you can use the special "\0" syntax
Hydrator::hydrate($object, ["\0Bar\0privateBarProperty" => $propertyValue]);

----------------------------------------

TITLE: Configuring Framework Bundle Form Integration in XML
DESCRIPTION: Example of enabling form integration in the FrameworkBundle using XML configuration.

LANGUAGE: xml
CODE:
<!-- config/packages/framework.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:framework="http://symfony.com/schema/dic/symfony"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd
        http://symfony.com/schema/dic/symfony
        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd"
>
    <framework:config>
        <framework:form/>
    </framework:config>
</container>

----------------------------------------

TITLE: Custom Finish Indicator with Error Handling
DESCRIPTION: Shows how to implement custom finish indicators with error handling support.

LANGUAGE: php
CODE:
$progressIndicator = new ProgressIndicator($output, finishedIndicatorValue: '🎉');

try {
    /* do something */
    $progressIndicator->finish('Finished');
} catch (\Exception) {
    $progressIndicator->finish('Failed', '🚨');
}

----------------------------------------

TITLE: Adding Listener for ConsoleEvents::TERMINATE Event
DESCRIPTION: This snippet demonstrates how to add a listener for the ConsoleEvents::TERMINATE event. This event is dispatched after command execution and can be used for cleanup actions or modifying the exit code.

LANGUAGE: php
CODE:
use Symfony\Component\Console\ConsoleEvents;
use Symfony\Component\Console\Event\ConsoleTerminateEvent;

$dispatcher->addListener(ConsoleEvents::TERMINATE, function (ConsoleTerminateEvent $event): void {
    // gets the output
    $output = $event->getOutput();

    // gets the command that has been executed
    $command = $event->getCommand();

    // displays the given content
    $output->writeln(sprintf('After running command <info>%s</info>', $command->getName()));

    // changes the exit code
    $event->setExitCode(128);
});

----------------------------------------

TITLE: Updating Symfony Route with Dynamic Parameter
DESCRIPTION: Modifies the existing route to include a dynamic 'name' parameter, demonstrating Symfony's flexible routing capabilities.

LANGUAGE: php
CODE:
// src/Controller/DefaultController.php
namespace App\Controller;

use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

class DefaultController
{
    #[Route('/hello/{name}', name: 'index')]
    public function index(string $name): Response
    {
        return new Response("Hello $name!");
    }
}

----------------------------------------

TITLE: Configuring Basic Service Tag with YAML
DESCRIPTION: Example of applying a basic twig.extension tag to a service using YAML configuration

LANGUAGE: yaml
CODE:
services:
    App\Twig\AppExtension:
        tags: ['twig.extension']

----------------------------------------

TITLE: Implementing Translatable Enum Interface
DESCRIPTION: Demonstrates how to make enum values translatable by implementing TranslatableInterface and providing custom translation logic.

LANGUAGE: PHP
CODE:
// src/Config/TextAlign.php
namespace App\Config;

use Symfony\Contracts\Translation\TranslatableInterface;
use Symfony\Contracts\Translation\TranslatorInterface;

enum TextAlign: string implements TranslatableInterface
{
    case Left = 'Left aligned';
    case Center = 'Center aligned';
    case Right = 'Right aligned';

    public function trans(TranslatorInterface $translator, ?string $locale = null): string
    {
        // Translate enum using custom labels
        return match ($this) {
            self::Left  => $translator->trans('text_align.left.label', locale: $locale),
            self::Center => $translator->trans('text_align.center.label', locale: $locale),
            self::Right  => $translator->trans('text_align.right.label', locale: $locale),
        };
    }
}

----------------------------------------

TITLE: Configuring Date Comparison with GreaterThan in YAML
DESCRIPTION: Demonstrates how to use YAML to set up a GreaterThan constraint for comparing a delivery date against 'today'.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Order:
    properties:
        deliveryDate:
            - GreaterThan: today

----------------------------------------

TITLE: Configuring Service Closure in YAML
DESCRIPTION: YAML configuration for service closures showing how to inject closure-wrapped services using both !service_closure syntax and @> shortcut.

LANGUAGE: yaml
CODE:
services:
    App\Service\MyService:
        arguments: [!service_closure '@mailer']

        # In case the dependency is optional
        # arguments: [!service_closure '@?mailer']

    # you can also use the special '@>' syntax as a shortcut of '!service_closure'
    App\Service\AnotherService:
        arguments: ['@>mailer']

        # the shortcut also works for optional dependencies
        # arguments: ['@>?mailer']

----------------------------------------

TITLE: Installing Logging with Composer in Symfony
DESCRIPTION: Demonstrates how to add logging functionality to a Symfony project using Composer.

LANGUAGE: bash
CODE:
$ composer require logger

----------------------------------------

TITLE: Configuring Multiple User Checkers in Services YAML
DESCRIPTION: Service configuration for multiple user checkers with priority settings and firewall-specific tags.

LANGUAGE: yaml
CODE:
# config/services.yaml

# ...
services:
    App\Security\AccountEnabledUserChecker:
        tags:
            - { name: security.user_checker.api, priority: 10 }
            - { name: security.user_checker.main, priority: 10 }

    App\Security\APIAccessAllowedUserChecker:
        tags:
            - { name: security.user_checker.api, priority: 5 }

----------------------------------------

TITLE: Controller with AsController Attribute in PHP
DESCRIPTION: PHP controller class using the AsController attribute to automatically apply service configuration

LANGUAGE: php
CODE:
// src/Controller/HelloController.php
namespace App\Controller;

use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Attribute\AsController;
use Symfony\Component\Routing\Attribute\Route;

#[AsController]
class HelloController
{
    #[Route('/hello', name: 'hello', methods: ['GET'])]
    public function index(): Response
    {
        // ...
    }
}

----------------------------------------

TITLE: Defining Custom Compound Constraint for Password Requirements in PHP
DESCRIPTION: This snippet demonstrates how to create a custom compound constraint for password validation. It extends the Compound class and defines a set of constraints to be applied.

LANGUAGE: php
CODE:
// src/Validator/Constraints/PasswordRequirements.php
namespace App\Validator\Constraints;

use Symfony\Component\Validator\Constraints\Compound;
use Symfony\Component\Validator\Constraints as Assert;

#[\Attribute]
class PasswordRequirements extends Compound
{
    protected function getConstraints(array $options): array
    {
        return [
            new Assert\NotBlank(),
            new Assert\Type('string'),
            new Assert\Length(min: 12),
            new Assert\NotCompromisedPassword(),
            new Assert\PasswordStrength(minScore: 4),
        ];
    }
}

----------------------------------------

TITLE: Traversing DOM with Symfony Crawler
DESCRIPTION: Demonstrates how to use the Crawler to traverse the DOM, selecting specific elements and navigating through the document structure. It shows chaining of methods to narrow down node selection.

LANGUAGE: PHP
CODE:
$newCrawler = $crawler->filter('input[type=submit]')
    ->last()
    ->parents()
    ->first()
;

----------------------------------------

TITLE: Attaching Local Domain to Project
DESCRIPTION: Command to attach a custom local domain to a Symfony project.

LANGUAGE: bash
CODE:
$ cd my-project/
$ symfony proxy:domain:attach my-domain

----------------------------------------

TITLE: Generating Composer Class Map
DESCRIPTION: Command to generate a complete class map using Composer, which is required for the return type patching script.

LANGUAGE: shell
CODE:
$ composer dump-autoload -o

----------------------------------------

TITLE: Configuring Babel for TypeScript Transpilation
DESCRIPTION: Sets up Babel configuration for transpiling TypeScript to JavaScript in a Symfony UX bundle.

LANGUAGE: javascript
CODE:
module.exports = {
    presets: [
        ['@babel/preset-env', {
            "loose": true,
            "modules": false
        }],
        ['@babel/preset-typescript', { allowDeclareFields: true }]
    ],
    assumptions: {
        superIsCallableConstructor: false,
    },
};

----------------------------------------

TITLE: Configuring PHPUnit for Weak Deprecations Mode
DESCRIPTION: XML configuration for PHPUnit to enable weak deprecations mode, allowing some deprecations to pass in tests.

LANGUAGE: xml
CODE:
<!-- phpunit.xml.dist -->
<phpunit>
    <!-- ... -->

    <php>
        <env name="SYMFONY_DEPRECATIONS_HELPER" value="max[total]=999999"/>
    </php>
</phpunit>

----------------------------------------

TITLE: Configuring delete_empty with Callback in PHP
DESCRIPTION: Example showing how to use the delete_empty option with a callback function to conditionally remove empty items from a collection.

LANGUAGE: php
CODE:
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
// ...

$builder->add('users', CollectionType::class, [
    // ...
    'delete_empty' => function (?User $user = null): bool {
        return null === $user || empty($user->getFirstName());
    },
]);

----------------------------------------

TITLE: Using IsGranted Attribute with Custom Message and Status Code
DESCRIPTION: Demonstrates how to use the IsGranted attribute in a controller with a custom access denied message and status code.

LANGUAGE: php
CODE:
// src/Controller/PostController.php

// ...
use Symfony\Component\Security\Http\Attribute\IsGranted;

class PostController extends AbstractController
{
    #[Route('/posts/{id}', name: 'post_show')]
    #[IsGranted('show', 'post', 'Post not found', 404)]
    public function show(Post $post): Response
    {
        // ...
    }
}

----------------------------------------

TITLE: Target Controller Method for Forwarded Request
DESCRIPTION: Shows the implementation of the target controller method that receives the forwarded request. The method parameters are matched by name with the array passed to forward().

LANGUAGE: php
CODE:
public function fancy(string $name, string $color): Response
{
    // ... create and return a Response object
}

----------------------------------------

TITLE: Testing Profiler Information in Symfony
DESCRIPTION: This PHP code demonstrates how to use the Symfony Profiler in a functional test to assert on the number of database queries and execution time.

LANGUAGE: php
CODE:
// tests/Controller/LuckyControllerTest.php
namespace App\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class LuckyControllerTest extends WebTestCase
{
    public function testRandomNumber(): void
    {
        $client = static::createClient();

        // enable the profiler only for the next request (if you make
        // new requests, you must call this method again)
        // (it does nothing if the profiler is not available)
        $client->enableProfiler();

        $crawler = $client->request('GET', '/lucky/number');

        // ... write some assertions about the Response

        // check that the profiler is enabled
        if ($profile = $client->getProfile()) {
            // check the number of requests
            $this->assertLessThan(
                10,
                $profile->getCollector('db')->getQueryCount()
            );

            // check the time spent in the framework
            $this->assertLessThan(
                500,
                $profile->getCollector('time')->getDuration()
            );
        }
    }
}

----------------------------------------

TITLE: Clearing Symfony Cache on Linux/macOS
DESCRIPTION: Command to clear the Symfony cache directory on Linux and macOS systems after a major version upgrade.

LANGUAGE: shell
CODE:
$ rm -rf var/cache/*

----------------------------------------

TITLE: Configuring Custom Mapping Entities in YAML
DESCRIPTION: YAML configuration for custom mapping of entities in a Symfony bundle.

LANGUAGE: yaml
CODE:
doctrine:
    # ...
    orm:
        # ...
        auto_mapping: true
        mappings:
            # ...
            AppBundle:
                type: xml
                dir: SomeResources/config/doctrine

----------------------------------------

TITLE: Installing Symfony Rate Limiter Component
DESCRIPTION: Command to install the Symfony Rate Limiter component using Composer.

LANGUAGE: bash
CODE:
$ composer require symfony/rate-limiter

----------------------------------------

TITLE: Modifying Bootstrap File for Cache Clearing in Symfony Tests
DESCRIPTION: Shows how to modify the tests/bootstrap.php file to clear cache before running tests by adding a passthru command that executes the cache:clear console command.

LANGUAGE: diff
CODE:
  // tests/bootstrap.php
  use Symfony\Component\Dotenv\Dotenv;

  require dirname(__DIR__).'/vendor/autoload.php';

  if (file_exists(dirname(__DIR__).'/config/bootstrap.php')) {
      require dirname(__DIR__).'/config/bootstrap.php';
  } elseif (method_exists(Dotenv::class, 'bootEnv')) {
      (new Dotenv())->bootEnv(dirname(__DIR__).'/.env');
  }

+ // executes the "php bin/console cache:clear" command
+ passthru(sprintf(
+   'APP_ENV=%s php "%s/../bin/console" cache:clear --no-warmup',
+   $_ENV['APP_ENV'],
+   __DIR__
+ ));

----------------------------------------

TITLE: Defining Unique Validation in XML
DESCRIPTION: Demonstrates XML configuration for the Unique constraint on a Person entity's contactEmails property.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Person">
        <property name="contactEmails">
            <constraint name="Unique"/>
        </property>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Enabling HTTPS for webpack-dev-server with Symfony Web Server
DESCRIPTION: JavaScript code snippet demonstrating how to configure webpack-dev-server to use HTTPS by reusing the Symfony web server SSL certificate.

LANGUAGE: javascript
CODE:
// webpack.config.js
// ...
const path = require('path');

Encore
    // ...

    .configureDevServerOptions(options => {
        options.server = {
            type: 'https',
            options: {
                pfx: path.join(process.env.HOME, '.symfony5/certs/default.p12'),
            }
        }
    })

----------------------------------------

TITLE: Base Template Update for AssetMapper
DESCRIPTION: Diff showing required changes to base.html.twig to enable importmap functionality

LANGUAGE: diff
CODE:
{% block javascripts %}
+    {% block importmap %}{{ importmap('app') }}{% endblock %}
{% endblock %}

----------------------------------------

TITLE: Runtime Configuration in Composer
DESCRIPTION: JSON configuration for specifying runtime class and options in composer.json

LANGUAGE: json
CODE:
{
    "require": {
        "...": "..."
    },
    "extra": {
        "runtime": {
            "class": "Symfony\\Component\\Runtime\\GenericRuntime"
        }
    }
}

----------------------------------------

TITLE: Defining IsTrue Constraint in XML
DESCRIPTION: This XML configuration applies the IsTrue constraint to the tokenValid getter of the Author class. It includes a custom error message for invalid tokens.

LANGUAGE: xml
CODE:
<!-- config/validator/validation.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

    <class name="App\Entity\Author">
        <getter property="tokenValid">
            <constraint name="IsTrue">
                <option name="message">The token is invalid.</option>
            </constraint>
        </getter>
    </class>
</constraint-mapping>

----------------------------------------

TITLE: Configuring Entity Mapping Outside of a Bundle in YAML
DESCRIPTION: YAML configuration for mapping entities that are not part of a Symfony bundle.

LANGUAGE: yaml
CODE:
doctrine:
        # ...
        orm:
            # ...
            mappings:
                # ...
                SomeEntityNamespace:
                    type: attribute
                    dir: '%kernel.project_dir%/src/Entity'
                    is_bundle: false
                    prefix: App\Entity
                    alias: App

----------------------------------------

TITLE: Switching from AssetMapper to Webpack Encore in Symfony
DESCRIPTION: This code snippet demonstrates the process of switching from AssetMapper to Webpack Encore in a Symfony project. It includes removing AssetMapper and related packages, installing Webpack Encore and associated bundles, and running the necessary commands to set up and build assets.

LANGUAGE: bash
CODE:
# Remove AssetMapper & Turbo/Stimulus temporarily
$ composer remove symfony/ux-turbo symfony/asset-mapper symfony/stimulus-bundle

# Add Webpack Encore & Turbo/Stimulus back
$ composer require symfony/webpack-encore-bundle symfony/ux-turbo symfony/stimulus-bundle

# Install & Build Assets
$ npm install
$ npm run dev

----------------------------------------

TITLE: Configuring Profiler for Tests in PHP
DESCRIPTION: This PHP configuration enables the Profiler but disables data collection by default for test environments.

LANGUAGE: php
CODE:
// config/packages/test/web_profiler.php
use Symfony\Config\FrameworkConfig;

return static function (FrameworkConfig $framework): void {
    // ...
    $framework->profiler()
        ->enabled(true)
        ->collect(false)
    ;
};

----------------------------------------

TITLE: Creating New Branch for Changes in Bash
DESCRIPTION: Git command to create a new branch based on the upstream 6.4 branch for making documentation changes.

LANGUAGE: bash
CODE:
$ git checkout -b improve_install_article upstream/6.4

----------------------------------------

TITLE: Setting Custom .env Path in Web Front-Controller
DESCRIPTION: This PHP code shows how to set a custom path for the .env file in the public/index.php file. It uses the APP_RUNTIME_OPTIONS server variable.

LANGUAGE: php
CODE:
// public/index.php

// ...
$_SERVER['APP_RUNTIME_OPTIONS']['dotenv_path'] = 'another/custom/path/to/.env';

require_once dirname(__DIR__).'/vendor/autoload_runtime.php';
// ...

----------------------------------------

TITLE: Using Versioned Assets in Twig Templates
DESCRIPTION: This Twig snippet demonstrates how to use the asset() function to reference versioned assets in Twig templates. It ensures that the correct versioned file path is used for the image source.

LANGUAGE: twig
CODE:
<img src="{{ asset('build/images/logo.png') }}" alt="ACME logo">

----------------------------------------

TITLE: XML Service Configuration
DESCRIPTION: Service configuration using XML format, defining mailer and newsletter manager services with parameters and method calls.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd"
>
    <parameters>
        <parameter key="mailer.transport">sendmail</parameter>
    </parameters>

    <services>
        <service id="mailer" class="Mailer">
            <argument>%mailer.transport%</argument>
        </service>

        <service id="newsletter_manager" class="NewsletterManager">
            <call method="setMailer">
                <argument type="service" id="mailer"/>
            </call>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Using UidValueResolver in Symfony Controller
DESCRIPTION: Example of using UidValueResolver to convert a route parameter into a UuidV4 object in a Symfony controller.

LANGUAGE: php
CODE:
// src/Controller/DefaultController.php
namespace App\Controller;

use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Uid\UuidV4;

class DefaultController
{
    #[Route('/share/{token}')]
    public function share(UuidV4 $token): Response
    {
        // ...
    }
}

----------------------------------------

TITLE: Using Conditional Expressions in XML Configuration for Symfony Services
DESCRIPTION: This snippet shows how to use a conditional expression to set a service argument based on the existence of a parameter in XML configuration.

LANGUAGE: xml
CODE:
<!-- config/services.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns="http://symfony.com/schema/dic/services"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://symfony.com/schema/dic/services
        https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <service id="App\Mailer">
            <argument type="expression">container.hasParameter('some_param') ? parameter('some_param') : 'default_value'</argument>
        </service>
    </services>
</container>

----------------------------------------

TITLE: Configuring Redis Connection Options in PHP
DESCRIPTION: This example demonstrates how to use the createConnection method with both a DSN string and an array of configuration options to set up a Redis connection.

LANGUAGE: PHP
CODE:
use Symfony\Component\Cache\Adapter\RedisAdapter;

$client = RedisAdapter::createConnection(

    // provide a string dsn
    'redis://localhost:6379',

    // associative array of configuration options
    [
        'class' => null,
        'persistent' => 0,
        'persistent_id' => null,
        'timeout' => 30,
        'read_timeout' => 0,
        'retry_interval' => 0,
        'tcp_keepalive' => 0,
        'lazy' => null,
        'redis_cluster' => false,
        'redis_sentinel' => null,
        'dbindex' => 0,
        'failover' => 'none',
        'ssl' => null,
    ]

);

----------------------------------------

TITLE: Configuring Secrets in Symfony PHP
DESCRIPTION: PHP configuration options for the secrets system in Symfony, including vault directory and decryption environment variable.

LANGUAGE: php
CODE:
use Symfony\Config\FrameworkConfig;

return static function (FrameworkConfig $framework): void {
    $framework->secrets()
        // ->vaultDirectory('%kernel.project_dir%/config/secrets/%kernel.environment%')
        // ->localDotenvFile('%kernel.project_dir%/.env.%kernel.environment%.local')
        // ->decryptionEnvVar('base64:default::SYMFONY_DECRYPTION_SECRET')
    ;
};

----------------------------------------

TITLE: Configuring PositiveOrZero Constraint in YAML
DESCRIPTION: YAML configuration example for applying the PositiveOrZero constraint to the siblings property of a Person entity.

LANGUAGE: yaml
CODE:
# config/validator/validation.yaml
App\Entity\Person:
    properties:
        siblings:
            - PositiveOrZero: ~

----------------------------------------

TITLE: Vue Runtime Template Examples
DESCRIPTION: Demonstrates Vue.js template compilation options at runtime using both inline templates and DOM elements.

LANGUAGE: javascript
CODE:
new Vue({
    template: '<div>{{ hi }}</div>'
})

new Vue({
    el: '#app', // where <div id="app"> in your DOM contains the Vue template
});

----------------------------------------

TITLE: Forwarding Request in Symfony Controller
DESCRIPTION: Demonstrates how to use the forward() method to make an internal sub-request to another controller. The method accepts the controller reference and an array of parameters that will be passed to the target controller.

LANGUAGE: php
CODE:
public function index(string $name): Response
{
    $response = $this->forward('App\Controller\OtherController::fancy', [
        'name'  => $name,
        'color' => 'green',
    ]);

    // ... further modify the response or return it directly

    return $response;
}

----------------------------------------

TITLE: Defining RST Documentation Structure
DESCRIPTION: ReStructuredText table of contents directive specifying documentation hierarchy for Symfony's Quick Tour section. Sets maximum depth to 1 and lists three main documentation pages.

LANGUAGE: rst
CODE:
.. toctree::
   :maxdepth: 1

   the_big_picture
   flex_recipes
   the_architecture

----------------------------------------

TITLE: Using Custom Context Builder with Symfony Serializer
DESCRIPTION: Example usage of the custom LegacyContextBuilder to deserialize data with legacy date handling enabled.

LANGUAGE: php
CODE:
$legacyData = '{"updatedAt": "0000-00-00"}';

$context = (new LegacyContextBuilder())
    ->withLegacyDates(true)
    ->toArray();

$serializer->deserialize($legacyData, MyModel::class, 'json', $context);

----------------------------------------

TITLE: Referencing Secrets in Symfony YAML Configuration
DESCRIPTION: Example of referencing a secret (DATABASE_PASSWORD) in a YAML configuration file for Doctrine DBAL.

LANGUAGE: yaml
CODE:
doctrine:
    dbal:
        password: '%env(DATABASE_PASSWORD)%'
        # ...

----------------------------------------

TITLE: Configuring JSON Login Authentication
DESCRIPTION: Example of configuring JSON login authentication with custom username and password paths.

LANGUAGE: yaml
CODE:
# config/packages/security.yaml
security:
    # ...
    firewalls:
        main:
            lazy: true
            json_login:
                check_path: login
                username_path: security.credentials.login
                password_path: security.credentials.password

----------------------------------------

TITLE: Creating Memcached Connection with Multiple Servers in Single DSN in PHP
DESCRIPTION: Shows how to define multiple Memcached servers using a single DSN string with the host syntax.

LANGUAGE: PHP
CODE:
use Symfony\Component\Cache\Adapter\MemcachedAdapter;

// a single DSN can define multiple servers using the following syntax:
// host[hostname-or-IP:port] (where port is optional). Sockets must include a trailing ':'
$client = MemcachedAdapter::createConnection(
    'memcached:?host[localhost]&host[localhost:12345]&host[/some/memcached.sock:]=3'
);

----------------------------------------

TITLE: Basic Twig Template Example
DESCRIPTION: A simple Twig template demonstrating basic syntax including variable output, conditionals, and comments.

LANGUAGE: html+twig
CODE:
<!DOCTYPE html>
<html>
    <head>
        <title>Welcome to Symfony!</title>
    </head>
    <body>
        <h1>{{ page_title }}</h1>

        {% if user.isLoggedIn %}
            Hello {{ user.name }}!
        {% endif %}

        {# ... #}
    </body>
</html>

----------------------------------------

TITLE: Verbose CLI Command for Stack Trace in Symfony
DESCRIPTION: Shows how to use the --verbose flag with a Symfony console command to obtain a detailed stack trace. This is particularly useful when the default output doesn't provide enough information for debugging.

LANGUAGE: bash
CODE:
$ php bin/console --verbose debug:exception

----------------------------------------

TITLE: RST External Links Definition
DESCRIPTION: ReStructuredText external link definitions for speaker mentoring resources including Slack channel and public speaking guide.

LANGUAGE: rst
CODE:
.. _`#speaker-mentoring`: https://symfony-devs.slack.com/messages/speaker-mentoring\n.. _`Symfony Slack`: https://symfony.com/slack-invite\n.. _`public speaking`: https://github.com/vmbrasseur/Public_Speaking

----------------------------------------

TITLE: Recording Console Session with Asciinema
DESCRIPTION: Command to start recording a console session using Asciinema. The recording is saved as a .cast file for later processing.

LANGUAGE: bash
CODE:
$ asciinema rec -c bash recording.cast