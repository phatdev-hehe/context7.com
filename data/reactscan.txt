TITLE: Installing React Scan via Package Managers
DESCRIPTION: Commands for installing React Scan using different package managers including npm, pnpm, bun, and yarn.

LANGUAGE: bash
CODE:
npm i react-scan

LANGUAGE: bash
CODE:
pnpm add react-scan

LANGUAGE: bash
CODE:
bun add react-scan

LANGUAGE: bash
CODE:
yarn add react-scan

----------------------------------------

TITLE: React Scan Options Interface
DESCRIPTION: TypeScript interface defining the configuration options for React Scan, including enabling/disabling scanning, logging, toolbar display, and animation speed.

LANGUAGE: tsx
CODE:
export interface Options {
  enabled?: boolean;
  dangerouslyForceRunInProduction?: boolean;
  log?: boolean;
  showToolbar?: boolean;
  animationSpeed?: "slow" | "fast" | "off";
  trackUnnecessaryRenders?: boolean;
  onCommitStart?: () => void;
  onRender?: (fiber: Fiber, renders: Array<Render>) => void;
  onCommitFinish?: () => void;
  onPaintStart?: (outlines: Array<Outline>) => void;
  onPaintFinish?: (outlines: Array<Outline>) => void;
}

----------------------------------------

TITLE: Initializing React Scan via Module Import
DESCRIPTION: Shows how to import and configure React Scan in a JavaScript/React project. The scan import must occur before React imports to properly hijack React DevTools.

LANGUAGE: jsx
CODE:
// src/index
import { scan } from "react-scan"; // must be imported before React and React DOM
import React from "react";

scan({
  enabled: true,
});

----------------------------------------

TITLE: Example of Unnecessary Render in React
DESCRIPTION: A code snippet demonstrating how unnecessary renders can occur in React due to prop reference changes, which React Scan helps identify.

LANGUAGE: jsx
CODE:
<ExpensiveComponent onClick={() => alert("hi")} style={{ color: "purple" }} />

----------------------------------------

TITLE: React Scan Options Interface
DESCRIPTION: TypeScript interface defining the available options for configuring React Scan, including enabling/disabling scanning, logging, toolbar display, and animation speed.

LANGUAGE: tsx
CODE:
export interface Options {
  enabled?: boolean;
  dangerouslyForceRunInProduction?: boolean;
  log?: boolean;
  showToolbar?: boolean;
  animationSpeed?: "slow" | "fast" | "off";
  trackUnnecessaryRenders?: boolean;
  onCommitStart?: () => void;
  onRender?: (fiber: Fiber, renders: Array<Render>) => void;
  onCommitFinish?: () => void;
  onPaintStart?: (outlines: Array<Outline>) => void;
  onPaintFinish?: (outlines: Array<Outline>) => void;
}

----------------------------------------

TITLE: Advanced Vite Configuration with React Scan Options
DESCRIPTION: Extended Vite configuration example demonstrating various React Scan plugin options. This snippet shows how to enable the plugin, set auto display names, and pass custom scan options.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import reactScan from '@react-scan/vite-plugin-react-scan';

export default defineConfig({
  plugins: [
    react(),
    reactScan({
      enable: true,
      autoDisplayNames: true,
      scanOptions: {} // React Scan specific options
    }),
  ],
});

----------------------------------------

TITLE: Importing and Initializing ReactScan in NextJS App Component
DESCRIPTION: This code snippet shows how to import ReactScan as a module and initialize it in the _app file of a NextJS project. It uses the useEffect hook to ensure ReactScan is run after hydration, and demonstrates how to configure ReactScan options.

LANGUAGE: jsx
CODE:
// pages/_app

// react-scan must be the top-most import
import { scan } from "react-scan";
import { useEffect } from "react";

export default function App({ Component, pageProps }) {
  useEffect(() => {
    // Make sure to run React Scan after hydration
    scan({
      enabled: true,
    });
  }, []);
  return <Component {...pageProps} />;
}

----------------------------------------

TITLE: Integrating React Scan via Import in React Router Layout
DESCRIPTION: Implementation of React Scan using direct import and initialization after hydration. This approach requires importing React Scan before React Router and other React-related imports, and includes configuration through the scan function.

LANGUAGE: jsx
CODE:
import { scan } from "react-scan";
import { Links, Meta, Scripts, ScrollRestoration } from "react-router";
import { useEffect } from "react";

export function Layout({ children }) {
  useEffect(() => {
    scan({
      enabled: true,
    });
  }, []);

  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <Meta />
        <Links />
      </head>
      <body>
        {children}
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Using React Scan CLI
DESCRIPTION: Commands to use React Scan CLI for scanning local or remote React applications.

LANGUAGE: bash
CODE:
npx react-scan@latest http://localhost:3000
# you can technically scan ANY website on the web:
# npx react-scan@latest https://react.dev

----------------------------------------

TITLE: Importing React Scan as a Module in Remix Root Component
DESCRIPTION: This code snippet shows how to import and initialize React Scan as a module in the root component of a Remix application. It includes the necessary imports, the scan function call within a useEffect hook, and the layout structure.

LANGUAGE: jsx
CODE:
// app/root.jsx
import { scan } from "react-scan"; // Must be imported before Remix
import {
  Links,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
} from "@remix-run/react";

export function Layout({ children }) {
  useEffect(() => {
    // Make sure to run React Scan after hydration
    scan({
      enabled: true,
    });
  }, []);

  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <Meta />
        <Links />
      </head>
      <body>
        {children}
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  );
}

export default function App() {
  return <Outlet />;
}

----------------------------------------

TITLE: Configuring Vite with React Scan Plugin
DESCRIPTION: Basic configuration for adding the React Scan plugin to a Vite project. This snippet shows how to import and use the plugin in the Vite configuration file, alongside the React plugin.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import reactScan from '@react-scan/vite-plugin-react-scan';

export default defineConfig({
  plugins: [
    react(),
    reactScan({
      // options (optional)
    }),
  ],
});

----------------------------------------

TITLE: Creating ReactScan Client Component in NextJS
DESCRIPTION: Demonstrates how to create a client-side ReactScan component that initializes the scanning functionality. This component uses the react-scan module import approach.

LANGUAGE: jsx
CODE:
// path/to/ReactScanComponent

"use client";
// react-scan must be imported before react
import { scan } from "react-scan";
import { JSX, useEffect } from "react";

export function ReactScan(): JSX.Element {
  useEffect(() => {
    scan({
      enabled: true,
    });
  }, []);

  return <></>;
}

----------------------------------------

TITLE: Importing React Scan as a Module in JSX
DESCRIPTION: This code shows how to import and initialize React Scan in the project's entry point file. It's crucial to import React Scan before React and React DOM to ensure proper functionality.

LANGUAGE: jsx
CODE:
// src/index.jsx

// must be imported before React and React DOM
import { scan } from "react-scan";
import React from "react";

scan({
  enabled: true,
});

----------------------------------------

TITLE: Initializing React Scan via CDN in HTML
DESCRIPTION: This snippet demonstrates how to include React Scan in an HTML file using a CDN. It uses a script tag to load the React Scan library from a CDN URL.

LANGUAGE: html
CODE:
<script src="https://cdn.jsdelivr.net/npm/react-scan/dist/auto.global.js"></script>

----------------------------------------

TITLE: Using React Scan CLI
DESCRIPTION: Examples of using React Scan CLI to scan a local or remote React application, including integration with Next.js development process.

LANGUAGE: bash
CODE:
npx react-scan@latest http://localhost:3000

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "next dev",
    "scan": "next dev & npx react-scan@latest localhost:3000"
  }
}

----------------------------------------

TITLE: Installing React Scan via npm
DESCRIPTION: Command to install React Scan using npm package manager.

LANGUAGE: bash
CODE:
npm i react-scan

----------------------------------------

TITLE: Installing React Scan via pnpm
DESCRIPTION: Command to install React Scan using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm add react-scan

----------------------------------------

TITLE: Installing React Scan via yarn
DESCRIPTION: Command to install React Scan using yarn package manager.

LANGUAGE: bash
CODE:
yarn add react-scan

----------------------------------------

TITLE: Including React Scan via CDN
DESCRIPTION: HTML script tag to include React Scan from a CDN. This should be added before any other scripts.

LANGUAGE: html
CODE:
<script src="https://unpkg.com/react-scan/dist/auto.global.js"></script>

----------------------------------------

TITLE: Implementing ReactScan via Script Tag in NextJS Root Layout
DESCRIPTION: Shows how to add ReactScan as a script tag in the root layout file of a NextJS application. This approach uses the CDN-hosted version of ReactScan.

LANGUAGE: jsx
CODE:
// app/layout
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <head>
        <script src="https://unpkg.com/react-scan/dist/auto.global.js" />
        {/* rest of your scripts go under */}
      </head>
      <body>{children}</body>
    </html>
  );
}

----------------------------------------

TITLE: Integrating ReactScan Script in NextJS Document Component
DESCRIPTION: This code snippet demonstrates how to add the ReactScan script to the _document file in a NextJS project. It includes the script tag in the Head component, which allows ReactScan to be loaded globally.

LANGUAGE: jsx
CODE:
// pages/_document
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head>
        <script src="https://unpkg.com/react-scan/dist/auto.global.js" />

        {/* rest of your scripts go under */}
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}

----------------------------------------

TITLE: Adding React Scan Script Tag in Remix Layout Component
DESCRIPTION: This snippet demonstrates how to add the React Scan script tag to the Layout component in a Remix application. It includes the necessary imports and shows the correct placement of the script tag.

LANGUAGE: jsx
CODE:
// app/root.jsx
import {
  Links,
  Meta,
  Scripts,
  ScrollRestoration,
} from "@remix-run/react";

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <head>
        {/* Must run before any of your scripts */}
        <script src="https://unpkg.com/react-scan/dist/auto.global.js" />
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <Meta />
        <Links />
      </head>
      <body>
        {children}
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  );
}

// ...

----------------------------------------

TITLE: Adding React Scan Script Tag in TanStack Router Root Document
DESCRIPTION: This snippet shows how to add the React Scan script tag to the RootDocument component in a TanStack Router project. It includes the necessary imports and HTML structure.

LANGUAGE: jsx
CODE:
// app/routes/__root
import { Meta, Scripts } from "@tanstack/start";
// ...

function RootDocument({ children }) {
  return (
    <html>
      <head>
        <script src="https://unpkg.com/react-scan/dist/auto.global.js" />
        <Meta />
      </head>
      <body>
        {children}
        <Scripts />
      </body>
    </html>
  );
}

// ...

----------------------------------------

TITLE: Adding React Scan Script Tag in HTML
DESCRIPTION: This snippet demonstrates how to include React Scan via a script tag in the HTML file. The script should be placed in the head section, before other scripts.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <script src="https://unpkg.com/react-scan/dist/auto.global.js"></script>

    <!-- rest of your scripts go under -->
  </head>
  <body>
    <!-- ... -->
  </body>
</html>

----------------------------------------

TITLE: JSDelivr CDN URL for React Scan
DESCRIPTION: This snippet provides the JSDelivr CDN URL for loading React Scan. It points to the auto.global.js file in the React Scan distribution.

LANGUAGE: txt
CODE:
https://cdn.jsdelivr.net/npm/react-scan/dist/auto.global.js

----------------------------------------

TITLE: UNPKG CDN URL for React Scan
DESCRIPTION: This snippet provides the UNPKG CDN URL for loading React Scan. It points to the auto.global.js file in the React Scan distribution.

LANGUAGE: txt
CODE:
https://unpkg.com/react-scan/dist/auto.global.js

----------------------------------------

TITLE: Building Production Version of React Scanner Extension
DESCRIPTION: This command builds the production version of the React Scanner extension for all supported browsers (Chrome, Firefox, and Brave).

LANGUAGE: bash
CODE:
pnpm pack:all

----------------------------------------

TITLE: Installing and Setting Up React Scan Development Environment
DESCRIPTION: Commands for cloning the repository and installing dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
git clone https://github.com/aidenybai/react-scan.git
cd react-scan
pnpm install

----------------------------------------

TITLE: Installing React Scan Vite Plugin with Package Managers
DESCRIPTION: Commands for installing the React Scan Vite plugin and its peer dependency using npm, pnpm, or yarn. This snippet demonstrates the installation process for different package managers.

LANGUAGE: bash
CODE:
# npm
npm install -D @react-scan/vite-plugin-react-scan react-scan

# pnpm
pnpm add -D @react-scan/vite-plugin-react-scan react-scan

# yarn
yarn add -D @react-scan/vite-plugin-react-scan react-scan

----------------------------------------

TITLE: Adding React-Scan Script Tag to HTML
DESCRIPTION: Shows how to include React-Scan via CDN in an HTML file. The script should be added in the head section before other scripts.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <script src="https://unpkg.com/react-scan/dist/auto.global.js"></script>

    <!-- rest of your scripts go under -->
  </head>
  <body>
    <!-- ... -->
  </body>
</html>

----------------------------------------

TITLE: Installing React Scan via CDN Script Tag
DESCRIPTION: Demonstrates how to add React Scan to an HTML page using a CDN-hosted script. The script must be included in the head section before other scripts.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <script src="https://unpkg.com/react-scan/dist/auto.global.js"></script>

    <!-- rest of your scripts go under -->
  </head>
  <body>
    <!-- ... -->
  </body>
</html>

----------------------------------------

TITLE: Adding ReactScan via CDN Script Tag in Astro
DESCRIPTION: Implementation showing how to add ReactScan using a CDN script tag in the root layout of an Astro application. The script is loaded from unpkg CDN and marked as inline.

LANGUAGE: astro
CODE:
<!doctype html>
<html lang="en">
  <head>
    <script is:inline src="https://unpkg.com/react-scan/dist/auto.global.js" />

    <!-- rest of your scripts go under -->
  </head>
  <body>
    <!-- ... -->
  </body>
</html>

----------------------------------------

TITLE: Adding ReactScan via Module Import in Astro
DESCRIPTION: Implementation showing how to import and initialize ReactScan as a module in the root layout of an Astro application. Includes configuration options for enabling the scanner.

LANGUAGE: astro
CODE:
<!doctype html>
<html lang="en">
  <head>
    <script>
      import { scan } from 'react-scan';

      scan({
        enabled: true,
      });
    </script>
    <!-- rest of your scripts go under -->
  </head>
  <body>
    <!-- ... -->
  </body>
</html>

----------------------------------------

TITLE: Importing ReactScan Component in NextJS Root Layout
DESCRIPTION: Shows how to import and use the ReactScan client component in the root layout file. The component must be the top-most import in the file.

LANGUAGE: jsx
CODE:
// app/layout

// This component must be the top-most import in this file!
import { ReactScan } from "path/to/ReactScanComponent";

// ...

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <ReactScan />
      <body>{children}</body>
    </html>
  );
}

----------------------------------------

TITLE: Initializing React Scan in Remix Client Entry Point
DESCRIPTION: This snippet demonstrates how to initialize React Scan in the client entry point of a Remix application. It shows the import of React Scan, its initialization, and the hydration process for the Remix application.

LANGUAGE: jsx
CODE:
// app/entry.client.jsx
import { RemixBrowser } from "@remix-run/react";
import { StrictMode, startTransition } from "react";
import { hydrateRoot } from "react-dom/client";
import { scan } from "react-scan";

scan({
  enabled: true,
});

// Hydration must happen in sync!
// startTransition(() => {
hydrateRoot(
  document,
  <StrictMode>
    <RemixBrowser />
  </StrictMode>
);
// });

----------------------------------------

TITLE: Importing React Scan Module in TanStack Router Root Document
DESCRIPTION: This snippet demonstrates how to import and initialize React Scan as a module in the RootDocument component. It uses the useEffect hook to ensure React Scan runs after hydration.

LANGUAGE: jsx
CODE:
// app/routes/__root

// react-scan must be imported before React and TanStack Start
import { scan } from "react-scan";
import { Meta, Scripts } from "@tanstack/start";
import { useEffect } from "react";

// ...

function RootDocument({ children }) {
  useEffect(() => {
    // Make sure to run this only after hydration
    scan({
      enabled: true,
    });
  }, []);
  return (
    <html>
      <head>
        <Meta />
      </head>
      <body>
        {children}
        <Scripts />
      </body>
    </html>
  );
}

----------------------------------------

TITLE: Initializing React Scan in TanStack Router Client Entry
DESCRIPTION: This snippet shows an alternative method to initialize React Scan in the client entry file of a TanStack Router project. It includes the necessary imports and hydration setup.

LANGUAGE: jsx
CODE:
// app/client
import { scan } from "react-scan"; // must be imported before React and React DOM
import { hydrateRoot } from "react-dom/client";
import { StartClient } from "@tanstack/start";
import { createRouter } from "./router";

scan({
  enabled: true,
});

const router = createRouter();

hydrateRoot(document, <StartClient router={router} />);

----------------------------------------

TITLE: Adding React Scan to NextJS dev process
DESCRIPTION: JSON configuration to add React Scan to the NextJS development process in package.json.

LANGUAGE: json
CODE:
{
  "scripts": {
    "dev": "next dev",
    "scan": "next dev & npx react-scan@latest localhost:3000"
  }
}

----------------------------------------

TITLE: Building React Scan Packages
DESCRIPTION: Command to build all packages in the React Scan monorepo.

LANGUAGE: bash
CODE:
pnpm build

----------------------------------------

TITLE: Running React Scan in Development Mode
DESCRIPTION: Command to run all packages in development mode simultaneously.

LANGUAGE: bash
CODE:
# Run all packages in dev mode
pnpm dev

----------------------------------------

TITLE: Configuring Environment Variables for React Scanner Extension
DESCRIPTION: This snippet shows how to set up the BRAVE_BINARY environment variable for different operating systems when developing with Brave browser.

LANGUAGE: env
CODE:
# For macOS
BRAVE_BINARY="/Applications/Brave Browser.app/Contents/MacOS/Brave Browser"

# For Windows
BRAVE_BINARY="C:\\Program Files\\BraveSoftware\\Brave-Browser\\Application\\brave.exe"

# For Linux
BRAVE_BINARY="/usr/bin/brave"

----------------------------------------

TITLE: Running Development Server for Chrome Extension
DESCRIPTION: This command starts the development server for the Chrome version of the React Scanner extension.

LANGUAGE: bash
CODE:
pnpm dev

----------------------------------------

TITLE: Running Development Server for Firefox Extension
DESCRIPTION: This command starts the development server for the Firefox version of the React Scanner extension.

LANGUAGE: bash
CODE:
pnpm dev:firefox

----------------------------------------

TITLE: Running Development Server for Brave Extension
DESCRIPTION: This command starts the development server for the Brave version of the React Scanner extension.

LANGUAGE: bash
CODE:
pnpm dev:brave

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Chrome Extension Installation Path
DESCRIPTION: Chrome browser extension installation URL path reference

LANGUAGE: plaintext
CODE:
chrome://extensions/

----------------------------------------

TITLE: Firefox Extension Installation Path
DESCRIPTION: Firefox browser extension installation URL path reference

LANGUAGE: plaintext
CODE:
about:debugging#/runtime/this-firefox

----------------------------------------

TITLE: Brave Extension Installation Path
DESCRIPTION: Brave browser extension installation URL path reference

LANGUAGE: plaintext
CODE:
brave://extensions