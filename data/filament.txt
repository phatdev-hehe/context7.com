TITLE: Implementing Field Dependencies and Dynamic Visibility in PHP
DESCRIPTION: Shows how to create dependent fields with dynamic visibility based on other field values using live updates.

LANGUAGE: php
CODE:
[
    Select::make('status')
        ->options([
            'draft' => 'Draft',
            'reviewing' => 'Reviewing',
            'published' => 'Published',
        ])
        ->required()
        ->live(),
    DateTimePicker::make('published_at')
        ->hidden(fn (Get $get) => $get('status') !== 'published'),
]

----------------------------------------

TITLE: Protecting Model Attributes in Filament using mutateFormDataBeforeFill
DESCRIPTION: Demonstrates how to remove sensitive model attributes from JavaScript exposure in Filament's Edit and View pages by overriding the mutateFormDataBeforeFill method. This helps protect sensitive data like admin status flags from being exposed to the client side.

LANGUAGE: php
CODE:
protected function mutateFormDataBeforeFill(array $data): array
{
    unset($data['is_admin']);

    return $data;
}

----------------------------------------

TITLE: Creating Database Models with Laravel Artisan
DESCRIPTION: Commands to generate the core models and migrations for the veterinary system.

LANGUAGE: bash
CODE:
php artisan make:model Owner -m
php artisan make:model Patient -m
php artisan make:model Treatment -m

----------------------------------------

TITLE: Implementing Table Actions and Bulk Actions in Filament
DESCRIPTION: This code demonstrates how to add row actions and bulk actions to a Filament table, including conditional visibility and a delete bulk action.

LANGUAGE: php
CODE:
use App\Models\Post;
use Filament\Tables\Actions\Action;
use Filament\Tables\Actions\BulkActionGroup;
use Filament\Tables\Actions\DeleteBulkAction;

public function table(Table $table): Table
{
    return $table
        ->columns([
            // ...
        ])
        ->actions([
            Action::make('feature')
                ->action(function (Post $record) {
                    $record->is_featured = true;
                    $record->save();
                })
                ->hidden(fn (Post $record): bool => $record->is_featured),
            Action::make('unfeature')
                ->action(function (Post $record) {
                    $record->is_featured = false;
                    $record->save();
                })
                ->visible(fn (Post $record): bool => $record->is_featured),
        ])
        ->bulkActions([
            BulkActionGroup::make([
                DeleteBulkAction::make(),
            ]),
        ]);
}

----------------------------------------

TITLE: Asserting Form Data in Filament Tests
DESCRIPTION: Shows how to use assertFormSet() to check that a form has specific data, including an example with a custom assertion function.

LANGUAGE: php
CODE:
use Illuminate\Support\Str;
use function Pest\Livewire\livewire;

it('can automatically generate a slug from the title', function () {
    $title = fake()->sentence();

    livewire(CreatePost::class)
        ->fillForm([
            'title' => $title,
        ])
        ->assertFormSet([
            'slug' => Str::slug($title),
        ]);
});

----------------------------------------

TITLE: Creating Form Sections with Nested Fields in PHP
DESCRIPTION: Illustrates how to organize form fields into sections with descriptions and nested schema components.

LANGUAGE: php
CODE:
Section::make('Publishing')
    ->description('Settings for publishing this post.')
    ->schema([
        Select::make('status')
            ->options([
                'draft' => 'Draft',
                'reviewing' => 'Reviewing',
                'published' => 'Published',
            ]),
        DateTimePicker::make('published_at'),
    ])

----------------------------------------

TITLE: Setting Form Columns and Column Spans in PHP
DESCRIPTION: Shows how to configure form layout with multiple columns and column spanning for fields using Filament's form methods.

LANGUAGE: php
CODE:
[
    TextInput::make('title'),
    TextInput::make('slug'),
    RichEditor::make('content')
        ->columnSpan(2), // or `columnSpan('full')`
]

----------------------------------------

TITLE: Adding Affixes to Text Inputs in Filament Forms
DESCRIPTION: Shows how to add prefix and suffix text or icons to TextInput components for additional context or styling.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;

TextInput::make('domain')
    ->prefix('https://')
    ->suffix('.com')

----------------------------------------

TITLE: Complete Livewire Table Component - PHP
DESCRIPTION: Full implementation of a Livewire component with Filament table integration, including necessary interfaces, traits, and table configuration.

LANGUAGE: php
CODE:
<?php

namespace App\Livewire;

use App\Models\Shop\Product;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Concerns\InteractsWithTable;
use Filament\Tables\Contracts\HasTable;
use Filament\Tables\Table;
use Illuminate\Contracts\View\View;
use Livewire\Component;

class ListProducts extends Component implements HasForms, HasTable
{
    use InteractsWithTable;
    use InteractsWithForms;
    
    public function table(Table $table): Table
    {
        return $table
            ->query(Product::query())
            ->columns([
                TextColumn::make('name'),
            ])
            ->filters([
                // ...
            ])
            ->actions([
                // ...
            ])
            ->bulkActions([
                // ...
            ]);
    }
    
    public function render(): View
    {
        return view('livewire.list-products');
    }
}

----------------------------------------

TITLE: Defining Table Columns in PHP with Filament
DESCRIPTION: This snippet demonstrates how to define table columns using Filament's Table Builder. It shows the creation of text and icon columns, including a boolean icon column.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\IconColumn;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->columns([
            TextColumn::make('title'),
            TextColumn::make('slug'),
            IconColumn::make('is_featured')
                ->boolean(),
        ]);
}

----------------------------------------

TITLE: Creating Searchable and Sortable Columns in Filament Tables
DESCRIPTION: This code snippet shows how to make table columns searchable and sortable in Filament. It uses the searchable() and sortable() methods on TextColumn instances.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('title')
    ->searchable()

TextColumn::make('title')
    ->sortable()

----------------------------------------

TITLE: Adding Row Actions to a Filament Table
DESCRIPTION: This snippet demonstrates how to add row actions to a Filament table using the actions() method. It shows how to create edit and delete actions with custom URLs and confirmation prompts.

LANGUAGE: php
CODE:
use App\Models\Post;
use Filament\Tables\Actions\Action;

Action::make('edit')
    ->url(fn (Post $record): string => route('posts.edit', $record))
    ->openUrlInNewTab()

Action::make('delete')
    ->requiresConfirmation()
    ->action(fn (Post $record) => $record->delete())

----------------------------------------

TITLE: Defining Basic Infolist Schema with Text Entries in PHP
DESCRIPTION: Demonstrates how to create a basic infolist schema with multiple text entries for displaying data like title, slug, and content.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;

$infolist
    ->schema([
        TextEntry::make('title'),
        TextEntry::make('slug'),
        TextEntry::make('content'),
    ]);

----------------------------------------

TITLE: Creating Filament Resource
DESCRIPTION: Command to generate a new Filament resource for a model. Creates resource class and related page files.

LANGUAGE: bash
CODE:
php artisan make:filament-resource Customer

----------------------------------------

TITLE: Defining Basic Form Action in PHP
DESCRIPTION: Demonstrates how to create a basic form action with confirmation and custom styling using the Action class.

LANGUAGE: php
CODE:
use App\Actions\ResetStars;
use Filament\Forms\Components\Actions\Action;

Action::make('resetStars')
    ->icon('heroicon-m-x-mark')
    ->color('danger')
    ->requiresConfirmation()
    ->action(function (ResetStars $resetStars) {
        $resetStars();
    })

----------------------------------------

TITLE: Initializing Basic InfoList Schema in PHP
DESCRIPTION: Shows how to create a basic InfoList schema structure within a class. Demonstrates both regular and panel builder resource implementations.

LANGUAGE: php
CODE:
use Filament\Infolists\Infolist;

public function infolist(Infolist $infolist): Infolist
{
    return $infolist
        ->schema([
            // ...
        ]);
}

----------------------------------------

TITLE: Searchable Select with Relationship Integration
DESCRIPTION: Implementation of a searchable select input with database relationship integration

LANGUAGE: php
CODE:
Select::make('author_id')
    ->searchable()
    ->getSearchResultsUsing(fn (string $search): array => User::where('name', 'like', "%{$search}%")->limit(50)->pluck('name', 'id')->toArray())
    ->getOptionLabelUsing(fn ($value): ?string => User::find($value)?->name)

----------------------------------------

TITLE: Multiple File Upload Configuration
DESCRIPTION: Implementation of multiple file upload functionality with array casting in the model.

LANGUAGE: php
CODE:
use Filament\Forms\Components\FileUpload;

FileUpload::make('attachments')
    ->multiple()

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;

class Message extends Model
{
    protected $casts = [
        'attachments' => 'array',
    ];

    // ...
}

----------------------------------------

TITLE: Creating a Builder Component with Multiple Blocks in PHP
DESCRIPTION: This code snippet demonstrates how to create a Builder component with multiple blocks for heading, paragraph, and image content. It showcases the basic structure and configuration of a Builder in Filament Forms.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Builder;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;

Builder::make('content')
    ->blocks([
        Builder\Block::make('heading')
            ->schema([
                TextInput::make('content')
                    ->label('Heading')
                    ->required(),
                Select::make('level')
                    ->options([
                        'h1' => 'Heading 1',
                        'h2' => 'Heading 2',
                        'h3' => 'Heading 3',
                        'h4' => 'Heading 4',
                        'h5' => 'Heading 5',
                        'h6' => 'Heading 6',
                    ])
                    ->required(),
            ])
            ->columns(2),
        Builder\Block::make('paragraph')
            ->schema([
                Textarea::make('content')
                    ->label('Paragraph')
                    ->required(),
            ]),
        Builder\Block::make('image')
            ->schema([
                FileUpload::make('url')
                    ->label('Image')
                    ->image()
                    ->required(),
                TextInput::make('alt')
                    ->label('Alt text')
                    ->required(),
            ]),
    ])

----------------------------------------

TITLE: Creating Tabs in Filament Forms
DESCRIPTION: This snippet demonstrates how to create tabs in a Filament form using the Tabs component. It shows the basic structure for creating multiple tabs with their own schemas.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Tabs;

Tabs::make('Tabs')
    ->tabs([
        Tabs\Tab::make('Tab 1')
            ->schema([
                // ...
            ]),
        Tabs\Tab::make('Tab 2')
            ->schema([
                // ...
            ]),
        Tabs\Tab::make('Tab 3')
            ->schema([
                // ...
            ]),
    ])

----------------------------------------

TITLE: Testing Resource Create Form Submission
DESCRIPTION: Tests the creation of new records through a resource's Create form, including form filling and database verification.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can create', function () {
    $newData = Post::factory()->make();

    livewire(PostResource\Pages\CreatePost::class)
        ->fillForm([
            'author_id' => $newData->author->getKey(),
            'content' => $newData->content,
            'tags' => $newData->tags,
            'title' => $newData->title,
        ])
        ->call('create')
        ->assertHasNoFormErrors();

    $this->assertDatabaseHas(Post::class, [
        'author_id' => $newData->author->getKey(),
        'content' => $newData->content,
        'tags' => json_encode($newData->tags),
        'title' => $newData->title,
    ]);
});

----------------------------------------

TITLE: Basic Select Component Implementation in PHP
DESCRIPTION: Basic implementation of a select input with predefined options using Filament's Select component

LANGUAGE: php
CODE:
use Filament\Forms\Components\Select;

Select::make('status')
    ->options([
        'draft' => 'Draft',
        'reviewing' => 'Reviewing',
        'published' => 'Published',
    ])

----------------------------------------

TITLE: Basic Delete Action with Confirmation in PHP
DESCRIPTION: Example of creating a simple delete action with confirmation modal in Filament. The action is configured to require confirmation before executing the delete operation on a client record.

LANGUAGE: php
CODE:
Action::make('delete')
    ->requiresConfirmation()
    ->action(fn () => $this->client->delete())

----------------------------------------

TITLE: Creating Custom Filter Forms in PHP for Filament Tables
DESCRIPTION: This snippet demonstrates how to create a custom date range filter form using DatePicker components and apply the filter to a database query.

LANGUAGE: php
CODE:
use Filament\Forms\Components\DatePicker;
use Filament\Tables\Filters\Filter;
use Illuminate\Database\Eloquent\Builder;

Filter::make('created_at')
    ->form([
        DatePicker::make('created_from'),
        DatePicker::make('created_until'),
    ])
    ->query(function (Builder $query, array $data): Builder {
        return $query
            ->when(
                $data['created_from'],
                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),
            )
            ->when(
                $data['created_until'],
                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),
            );
    })

----------------------------------------

TITLE: Email Form Action with Modal in PHP
DESCRIPTION: Implementation of an email action that opens a modal with a form to collect email subject and body. Uses Filament's form components and Laravel's mail system to send emails to clients.

LANGUAGE: php
CODE:
use Filament\Forms\Components\RichEditor;
use Filament\Forms\Components\TextInput;
use Illuminate\Support\Facades\Mail;

Action::make('sendEmail')
    ->form([
        TextInput::make('subject')->required(),
        RichEditor::make('body')->required(),
    ])
    ->action(function (array $data) {
        Mail::to($this->client)
            ->send(new GenericEmail(
                subject: $data['subject'],
                body: $data['body'],
            ));
    })

----------------------------------------

TITLE: Basic Date-Time Picker Implementation - PHP
DESCRIPTION: Basic examples of implementing date, time, and date-time pickers in Filament forms.

LANGUAGE: php
CODE:
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\DateTimePicker;
use Filament\Forms\Components\TimePicker;

DateTimePicker::make('published_at')
DatePicker::make('date_of_birth')
TimePicker::make('alarm_at')

----------------------------------------

TITLE: Setting Up Authentication for Filament Tests in PHP
DESCRIPTION: Demonstrates how to set up authentication in the test environment by creating and acting as a user in the setUp method.

LANGUAGE: php
CODE:
protected function setUp(): void {
    parent::setUp();

    $this->actingAs(User::factory()->create());
}

----------------------------------------

TITLE: Creating a Simple Checkbox in Filament Forms
DESCRIPTION: Demonstrates how to create a basic checkbox component in a Filament form. The checkbox is used to interact with a boolean value.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Checkbox;

Checkbox::make('is_admin')

----------------------------------------

TITLE: Complete Livewire Form Component - PHP
DESCRIPTION: Full implementation of a Livewire component with Filament form integration, including form schema and submission handling

LANGUAGE: php
CODE:
<?php

namespace App\Livewire;

use App\Models\Post;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\MarkdownEditor;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Forms\Form;
use Illuminate\Contracts\View\View;
use Livewire\Component;

class CreatePost extends Component implements HasForms
{
    use InteractsWithForms;
    
    public ?array $data = [];
    
    public function mount(): void
    {
        $this->form->fill();
    }
    
    public function form(Form $form): Form
    {
        return $form
            ->schema([
                TextInput::make('title')
                    ->required(),
                MarkdownEditor::make('content'),
                // ...
            ])
            ->statePath('data');
    }
    
    public function create(): void
    {
        dd($this->form->getState());
    }
    
    public function render(): View
    {
        return view('livewire.create-post');
    }
}

----------------------------------------

TITLE: Installing Filament Package with Composer
DESCRIPTION: Commands to install Filament package and run initial setup with panels.

LANGUAGE: bash
CODE:
composer require filament/filament:"^3.3" -W

php artisan filament:install --panels

----------------------------------------

TITLE: Database Migration Schema Definitions
DESCRIPTION: Database schema definitions for owners, patients and treatments tables.

LANGUAGE: php
CODE:
Schema::create('owners', function (Blueprint $table) {
    $table->id();
    $table->string('email');
    $table->string('name');
    $table->string('phone');
    $table->timestamps();
});

Schema::create('patients', function (Blueprint $table) {
    $table->id();
    $table->date('date_of_birth');
    $table->string('name');
    $table->foreignId('owner_id')->constrained('owners')->cascadeOnDelete();
    $table->string('type');
    $table->timestamps();
});

Schema::create('treatments', function (Blueprint $table) {
    $table->id();
    $table->string('description');
    $table->text('notes')->nullable();
    $table->foreignId('patient_id')->constrained('patients')->cascadeOnDelete();
    $table->unsignedInteger('price')->nullable();
    $table->timestamps();
});

----------------------------------------

TITLE: Implementing Wizard for Creation Process in PHP
DESCRIPTION: Demonstrates how to transform the creation process into a multistep wizard by adding the HasWizard trait and defining steps.

LANGUAGE: php
CODE:
use App\Filament\Resources\CategoryResource;
use Filament\Resources\Pages\CreateRecord;

class CreateCategory extends CreateRecord
{
    use CreateRecord\Concerns\HasWizard;
    
    protected static string $resource = CategoryResource::class;

    protected function getSteps(): array
    {
        return [
            Step::make('Name')
                ->description('Give the category a clear and unique name')
                ->schema([
                    TextInput::make('name')
                        ->required()
                        ->live()
                        ->afterStateUpdated(fn ($state, callable $set) => $set('slug', Str::slug($state))),
                    TextInput::make('slug')
                        ->disabled()
                        ->required()
                        ->unique(Category::class, 'slug', fn ($record) => $record),
                ]),
            Step::make('Description')
                ->description('Add some extra details')
                ->schema([
                    MarkdownEditor::make('description')
                        ->columnSpan('full'),
                ]),
            Step::make('Visibility')
                ->description('Control who can view it')
                ->schema([
                    Toggle::make('is_visible')
                        ->label('Visible to customers.')
                        ->default(true),
                ]),
        ];
    }
}

----------------------------------------

TITLE: Validation Error Handling
DESCRIPTION: Custom notification handling for validation errors in Livewire components

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;
use Illuminate\Validation\ValidationException;

protected function onValidationError(ValidationException $exception): void {
    Notification::make()
        ->title($exception->getMessage())
        ->danger()
        ->send();
}

----------------------------------------

TITLE: Validating Form Input in Filament Tests
DESCRIPTION: Demonstrates how to use assertHasFormErrors() and assertHasNoFormErrors() to test form validation in Filament.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can validate input', function () {
    livewire(CreatePost::class)
        ->fillForm([
            'title' => null,
        ])
        ->call('create')
        ->assertHasFormErrors(['title' => 'required']);
});

----------------------------------------

TITLE: Initializing Basic Form Schema with Fields in PHP
DESCRIPTION: Demonstrates how to create a basic form schema with text input and rich editor fields using Filament's form components.

LANGUAGE: php
CODE:
use Filament\Forms\Components\RichEditor;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;

public function form(Form $form): Form
{
    return $form
        ->schema([
            TextInput::make('title'),
            TextInput::make('slug'),
            RichEditor::make('content'),
        ]);
}

----------------------------------------

TITLE: Defining Table Filters in Filament
DESCRIPTION: This snippet shows how to create table filters in Filament, including a custom query filter and a select filter with predefined options.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\Filter;
use Filament\Tables\Filters\SelectFilter;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;

public function table(Table $table): Table
{
    return $table
        ->columns([
            // ...
        ])
        ->filters([
            Filter::make('is_featured')
                ->query(fn (Builder $query) => $query->where('is_featured', true)),
            SelectFilter::make('status')
                ->options([
                    'draft' => 'Draft',
                    'reviewing' => 'Reviewing',
                    'published' => 'Published',
                ]),
        ]);
}

----------------------------------------

TITLE: Accessing Related Data in Filament Table Columns
DESCRIPTION: This example demonstrates how to display data from related models in a Filament table column using dot notation.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('author.name')

----------------------------------------

TITLE: Implementing Auto-Generated Slugs from Title in PHP
DESCRIPTION: Demonstrates how to automatically generate a slug from a title field using live updates and state management.

LANGUAGE: php
CODE:
[
    TextInput::make('title')
        ->required()
        ->maxLength(255)
        ->live()
        ->afterStateUpdated(function (Set $set, $state) {
            $set('slug', Str::slug($state));
        }),
    TextInput::make('slug')
        ->required()
        ->maxLength(255),
]

----------------------------------------

TITLE: Database Validation - Unique Rule
DESCRIPTION: Ensures field value doesn't exist in database with customizable options

LANGUAGE: php
CODE:
Field::make('email')->unique()

use App\Models\User;

Field::make('email')->unique(table: User::class)

Field::make('email')->unique(column: 'email_address')

----------------------------------------

TITLE: Form View Template - Blade
DESCRIPTION: Blade template for rendering the Filament form with submission button and action modals

LANGUAGE: blade
CODE:
<div>
    <form wire:submit="create">
        {{ $this->form }}
        
        <button type="submit">
            Submit
        </button>
    </form>
    
    <x-filament-actions::modals />
</div>

----------------------------------------

TITLE: Creating a Basic Textarea in PHP with Filament
DESCRIPTION: Demonstrates how to create a simple textarea field for a 'description' attribute using Filament's Forms API.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Textarea;

Textarea::make('description')

----------------------------------------

TITLE: Creating a Grid Layout Component in PHP
DESCRIPTION: Demonstrates how to create a Grid layout component with a schema in Filament forms. The Grid is set to have 2 columns and will contain child components defined in the schema.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Grid;

Grid::make(2)
    ->schema([
        // ...
    ])

----------------------------------------

TITLE: Adding CreateAction to Table Header in PHP
DESCRIPTION: This code shows how to add a CreateAction to the header of a Filament table, allowing users to create new records directly from the table view.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;
use Filament\Tables\Actions\CreateAction;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->headerActions([
            CreateAction::make()
                ->form([
                    TextInput::make('title')
                        ->required()
                        ->maxLength(255),
                    // ...
                ]),
        ]);
}

----------------------------------------

TITLE: Adding Query Builder Filter to Filament Table
DESCRIPTION: This snippet demonstrates how to add a query builder filter to a Filament table, including various constraint types such as text, boolean, number, select, date, and relationship constraints.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\QueryBuilder;
use Filament\Tables\Filters\QueryBuilder\Constraints\BooleanConstraint;
use Filament\Tables\Filters\QueryBuilder\Constraints\DateConstraint;
use Filament\Tables\Filters\QueryBuilder\Constraints\NumberConstraint;
use Filament\Tables\Filters\QueryBuilder\Constraints\RelationshipConstraint;
use Filament\Tables\Filters\QueryBuilder\Constraints\RelationshipConstraint\Operators\IsRelatedToOperator;
use Filament\Tables\Filters\QueryBuilder\Constraints\SelectConstraint;
use Filament\Tables\Filters\QueryBuilder\Constraints\TextConstraint;

QueryBuilder::make()
    ->constraints([
        TextConstraint::make('name'),
        BooleanConstraint::make('is_visible'),
        NumberConstraint::make('stock'),
        SelectConstraint::make('status')
            ->options([
                'draft' => 'Draft',
                'reviewing' => 'Reviewing',
                'published' => 'Published',
            ])
            ->multiple(),
        DateConstraint::make('created_at'),
        RelationshipConstraint::make('categories')
            ->multiple()
            ->selectable(
                IsRelatedToOperator::make()
                    ->titleAttribute('name')
                    ->searchable()
                    ->multiple(),
            ),
        NumberConstraint::make('reviewsRating')
            ->relationship('reviews', 'rating')
            ->integer(),
    ])

----------------------------------------

TITLE: Initializing Key-value Field in PHP
DESCRIPTION: Basic usage of the KeyValue component in Filament forms. This snippet demonstrates how to create a simple key-value field for a 'meta' attribute.

LANGUAGE: php
CODE:
use Filament\Forms\Components\KeyValue;

KeyValue::make('meta')

----------------------------------------

TITLE: Integrating Repeater with Eloquent Relationship in PHP
DESCRIPTION: Demonstrates how to configure a repeater to work with a HasMany Eloquent relationship, including loading and saving data.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Repeater;

Repeater::make('qualifications')
    ->relationship()
    ->schema([
        // ...
    ])

----------------------------------------

TITLE: Creating a Basic Select Filter in PHP for Filament Tables
DESCRIPTION: Demonstrates how to create a simple select filter using the SelectFilter class in Filament. It shows how to define filter options for a 'status' field.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\SelectFilter;

SelectFilter::make('status')
    ->options([
        'draft' => 'Draft',
        'reviewing' => 'Reviewing',
        'published' => 'Published',
    ])

----------------------------------------

TITLE: Creating a Confirmation Modal for Delete Action in PHP
DESCRIPTION: This snippet demonstrates how to add a confirmation modal to a delete action using the requiresConfirmation() method.

LANGUAGE: php
CODE:
use App\Models\Post;

Action::make('delete')
    ->action(fn (Post $record) => $record->delete())
    ->requiresConfirmation()

----------------------------------------

TITLE: Creating a Wizard in CreateAction in PHP
DESCRIPTION: This snippet shows how to transform the creation process into a multi-step wizard, defining steps with separate forms and allowing for a more guided creation experience.

LANGUAGE: php
CODE:
use Filament\Forms\Components\MarkdownEditor;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Toggle;
use Filament\Forms\Components\Wizard\Step;

CreateAction::make()
    ->steps([
        Step::make('Name')
            ->description('Give the category a unique name')
            ->schema([
                TextInput::make('name')
                    ->required()
                    ->live()
                    ->afterStateUpdated(fn ($state, callable $set) => $set('slug', Str::slug($state))),
                TextInput::make('slug')
                    ->disabled()
                    ->required()
                    ->unique(Category::class, 'slug'),
            ])
            ->columns(2),
        Step::make('Description')
            ->description('Add some extra details')
            ->schema([
                MarkdownEditor::make('description'),
            ]),
        Step::make('Visibility')
            ->description('Control who can view it')
            ->schema([
                Toggle::make('is_visible')
                    ->label('Visible to customers.')
                    ->default(true),
            ]),
    ])
    ->skippableSteps()

----------------------------------------

TITLE: Creating a Basic Section in Filament Infolist
DESCRIPTION: Demonstrates how to create a basic section with a heading and description in a Filament Infolist. The section groups related components and provides context.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Section;

Section::make('Rate limiting')
    ->description('Prevent abuse by limiting the number of requests per period')
    ->schema([
        // ...
    ])

----------------------------------------

TITLE: Saving Form Fields to a Relationship
DESCRIPTION: Example of using a Fieldset layout component to save form fields to a related model with the relationship() method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Fieldset;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;

Fieldset::make('Metadata')
    ->relationship('metadata')
    ->schema([
        TextInput::make('title'),
        Textarea::make('description'),
        FileUpload::make('image'),
    ])

----------------------------------------

TITLE: Adding Helper Text - PHP
DESCRIPTION: Demonstrates how to add helper text below a form field, including HTML and markdown support.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;
use Illuminate\Support\HtmlString;

TextInput::make('name')
    ->helperText('Your full name here, including any middle names.')

----------------------------------------

TITLE: Adding Bulk Actions to a Filament Table
DESCRIPTION: This snippet demonstrates how to add bulk actions to a Filament table. It shows how to create a delete bulk action that requires confirmation and applies to multiple selected records.

LANGUAGE: php
CODE:
use Filament\Tables\Actions\BulkAction;
use Illuminate\Database\Eloquent\Collection;

BulkAction::make('delete')
    ->requiresConfirmation()
    ->action(fn (Collection $records) => $records->each->delete())

----------------------------------------

TITLE: Modifying Form Data Before Saving in PHP
DESCRIPTION: Demonstrates how to modify form data before it is saved to the database by defining a mutateFormDataBeforeCreate() method on the Create page class.

LANGUAGE: php
CODE:
protected function mutateFormDataBeforeCreate(array $data): array
{
    $data['user_id'] = auth()->id();

    return $data;
}

----------------------------------------

TITLE: Initializing Table Columns in Filament PHP
DESCRIPTION: Basic setup for adding columns to a Filament table using the Table class

LANGUAGE: php
CODE:
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->columns([
            // ...
        ]);
}

----------------------------------------

TITLE: Customizing Wizard Actions in Filament PHP
DESCRIPTION: Shows how to customize wizard action objects, such as next and previous buttons, using the nextAction() and previousAction() methods.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\Wizard;

Wizard::make([
    // ...
])
    ->nextAction(
        fn (Action $action) => $action->label('Next step'),
    )

----------------------------------------

TITLE: Creating Dependent Select Options in PHP
DESCRIPTION: Illustrates how to create a select field with options that depend on the value of another field.

LANGUAGE: php
CODE:
use Filament\Forms\Get;
use Filament\Forms\Components\Select;

Select::make('category')
    ->options([
        'web' => 'Web development',
        'mobile' => 'Mobile development',
        'design' => 'Design',
    ])
    ->live()

Select::make('sub_category')
    ->options(fn (Get $get): array => match ($get('category')) {
        'web' => [
            'frontend_web' => 'Frontend development',
            'backend_web' => 'Backend development',
        ],
        'mobile' => [
            'ios_mobile' => 'iOS development',
            'android_mobile' => 'Android development',
        ],
        'design' => [
            'app_design' => 'Panel design',
            'marketing_website_design' => 'Marketing website design',
        ],
        default => [],
    })

----------------------------------------

TITLE: Basic File Upload Component in PHP
DESCRIPTION: Simple implementation of a file upload field using Filament's FileUpload component.

LANGUAGE: php
CODE:
use Filament\Forms\Components\FileUpload;

FileUpload::make('attachment')

----------------------------------------

TITLE: Filling a Form with Data in Filament Tests
DESCRIPTION: Demonstrates how to fill a form with data using the fillForm() method in a Pest test for a Filament Livewire component.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

livewire(CreatePost::class)
    ->fillForm([
        'title' => fake()->sentence(),
        // ...
    ]);

----------------------------------------

TITLE: Custom Validation Rules
DESCRIPTION: Implementation of custom validation rules using closures and Laravel validation

LANGUAGE: php
CODE:
use Closure;

TextInput::make('slug')->rules([
    fn (): Closure => function (string $attribute, $value, Closure $fail) {
        if ($value === 'foo') {
            $fail('The :attribute is invalid.');
        }
    },
])

----------------------------------------

TITLE: Creating a Basic Section in Filament Forms
DESCRIPTION: Demonstrates how to create a basic section with a heading, description, and schema in Filament Forms. This allows grouping related form fields together with a title and explanation.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;

Section::make('Rate limiting')
    ->description('Prevent abuse by limiting the number of requests per period')
    ->schema([
        // ...
    ])

----------------------------------------

TITLE: Testing Table Records Visibility in PHP
DESCRIPTION: Test to verify which records are displayed in the table using assertCanSeeTableRecords(), assertCanNotSeeTableRecords(), and assertCountTableRecords() helpers.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('cannot display trashed posts by default', function () {
    $posts = Post::factory()->count(4)->create();
    $trashedPosts = Post::factory()->trashed()->count(6)->create();

    livewire(PostResource\Pages\ListPosts::class)
        ->assertCanSeeTableRecords($posts)
        ->assertCanNotSeeTableRecords($trashedPosts)
        ->assertCountTableRecords(4);
});

----------------------------------------

TITLE: Creating Filament User
DESCRIPTION: Command to create a new user account for Filament admin panel access.

LANGUAGE: bash
CODE:
php artisan make:filament-user

----------------------------------------

TITLE: Implementing Tabs for Filtering Records in Filament List Page
DESCRIPTION: This snippet demonstrates how to add tabs to a Filament List page for filtering records based on predefined conditions. It shows the implementation of the getTabs() method, which returns an array of Tab objects with custom query modifications.

LANGUAGE: php
CODE:
use Filament\Resources\Components\Tab;
use Illuminate\Database\Eloquent\Builder;

public function getTabs(): array
{
    return [
        'all' => Tab::make(),
        'active' => Tab::make()
            ->modifyQueryUsing(fn (Builder $query) => $query->where('active', true)),
        'inactive' => Tab::make()
            ->modifyQueryUsing(fn (Builder $query) => $query->where('active', false)),
    ];
}

----------------------------------------

TITLE: Registering a Render Hook in PHP
DESCRIPTION: Demonstrates how to register a render hook using FilamentView::registerRenderHook(). This example injects a Livewire component at the start of the body.

LANGUAGE: php
CODE:
use Filament\Support\Facades\FilamentView;
use Filament\View\PanelsRenderHook;
use Illuminate\Support\Facades\Blade;

FilamentView::registerRenderHook(
    PanelsRenderHook::BODY_START,
    fn (): string => Blade::render('@livewire(\'livewire-ui-modal\')'),
);

----------------------------------------

TITLE: Creating a Basic Text Input in Filament Forms
DESCRIPTION: Demonstrates how to create a simple text input field using the TextInput component in Filament Forms.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;

TextInput::make('name')

----------------------------------------

TITLE: Sending a Basic Notification in JavaScript
DESCRIPTION: Shows how to create and send a basic success notification using Filament's FilamentNotification class in JavaScript.

LANGUAGE: js
CODE:
new FilamentNotification()
    .title('Saved successfully')
    .success()
    .send()

----------------------------------------

TITLE: Implementing Basic Filament Plugin Class in PHP
DESCRIPTION: Demonstrates the core structure of a Filament plugin class with required methods getId(), register(), and boot(). Shows how to register resources and pages within a plugin.

LANGUAGE: php
CODE:
<?php

namespace DanHarrin\FilamentBlog;

use DanHarrin\FilamentBlog\Pages\Settings;
use DanHarrin\FilamentBlog\Resources\CategoryResource;
use DanHarrin\FilamentBlog\Resources\PostResource;
use Filament\Contracts\Plugin;
use Filament\Panel;

class BlogPlugin implements Plugin
{
    public function getId(): string
    {
        return 'blog';
    }

    public function register(Panel $panel): void
    {
        $panel
            ->resources([
                PostResource::class,
                CategoryResource::class,
            ])
            ->pages([
                Settings::class,
            ]);
    }

    public function boot(Panel $panel): void
    {
        //
    }
}

----------------------------------------

TITLE: Limiting and Wrapping Text in Columns
DESCRIPTION: This example shows how to limit the length of text, set a word count limit, and enable text wrapping in columns. It uses the limit(), words(), and wrap() methods.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('description')
    ->limit(50)

TextColumn::make('description')
    ->words(10)

TextColumn::make('description')
    ->wrap()

----------------------------------------

TITLE: Implementing Basic Panel Access Authorization in PHP
DESCRIPTION: Shows how to implement the FilamentUser contract to control access to Filament panels based on user attributes like email domain and verification status.

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Filament\Models\Contracts\FilamentUser;
use Filament\Panel;
use Illuminate\Foundation\Auth\User as Authenticatable;

class User extends Authenticatable implements FilamentUser
{
    // ...

    public function canAccessPanel(Panel $panel): bool
    {
        return str_ends_with($this->email, '@yourdomain.com') && $this->hasVerifiedEmail();
    }
}

----------------------------------------

TITLE: Creating a Live Select Field in PHP
DESCRIPTION: Example of creating a reactive select field that updates the form when its value changes.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Select;

Select::make('status')
    ->options([
        'draft' => 'Draft',
        'reviewing' => 'Reviewing',
        'published' => 'Published',
    ])
    ->live()

----------------------------------------

TITLE: Registering Default Colors in Filament PHP
DESCRIPTION: Demonstrates how to register and customize the six default colors used throughout Filament using the FilamentColor facade and Color class.

LANGUAGE: php
CODE:
use Filament\Support\Colors\Color;
use Filament\Support\Facades\FilamentColor;

FilamentColor::register([
    'danger' => Color::Red,
    'gray' => Color::Zinc,
    'info' => Color::Blue,
    'primary' => Color::Amber,
    'success' => Color::Green,
    'warning' => Color::Amber,
]);

----------------------------------------

TITLE: Testing Form Actions in Filament
DESCRIPTION: Demonstrates how to test form actions using callFormComponentAction() and related assertion methods.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can send invoices', function () {
    $invoice = Invoice::factory()->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->callFormComponentAction('customer_id', 'send');

    expect($invoice->refresh())
        ->isSent()->toBeTrue();
});

----------------------------------------

TITLE: Generating Custom Field Class via Artisan
DESCRIPTION: Command to generate a new custom form field class and associated view file.

LANGUAGE: bash
CODE:
php artisan make:form-field RangeSlider

----------------------------------------

TITLE: Configuring Image Upload Settings in PHP
DESCRIPTION: Configuration of image upload settings including disk storage, directory path, and visibility options

LANGUAGE: php
CODE:
use Filament\Forms\Components\MarkdownEditor;

MarkdownEditor::make('content')
    ->fileAttachmentsDisk('s3')
    ->fileAttachmentsDirectory('attachments')
    ->fileAttachmentsVisibility('private')

----------------------------------------

TITLE: Creating Basic Text Input Field - PHP
DESCRIPTION: Demonstrates how to create a basic text input field using Filament's TextInput component.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;

TextInput::make('name')

----------------------------------------

TITLE: Initializing CreateAction with Form Fields in PHP
DESCRIPTION: This snippet demonstrates how to set up a CreateAction with a form containing input fields for creating a new record.

LANGUAGE: php
CODE:
use Filament\Actions\CreateAction;
use Filament\Forms\Components\TextInput;

CreateAction::make()
    ->model(Post::class)
    ->form([
        TextInput::make('title')
            ->required()
            ->maxLength(255),
        // ...
    ])

----------------------------------------

TITLE: Sanitizing HTML Output in Blade
DESCRIPTION: Demonstrates how to safely output HTML content from a rich editor in a Blade view using Filament's sanitizeHtml() helper to prevent XSS vulnerabilities.

LANGUAGE: blade
CODE:
{!! str($record->content)->sanitizeHtml() !!}

----------------------------------------

TITLE: Basic Delete Action Implementation in PHP
DESCRIPTION: Basic implementation of DeleteAction to remove a single Eloquent record with confirmation modal.

LANGUAGE: php
CODE:
use Filament\Actions\DeleteAction;

DeleteAction::make()
    ->record($this->post)

----------------------------------------

TITLE: Implementing Global Scope for Team-based Tenancy in Laravel
DESCRIPTION: Example of using a global scope to automatically filter records based on the authenticated user's team ID.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Builder;

class Post extends Model
{
    protected static function booted(): void
    {
        static::addGlobalScope('team', function (Builder $query) {
            if (auth()->hasUser()) {
                $query->where('team_id', auth()->user()->team_id);
                // or with a `team` relationship defined:
                $query->whereBelongsTo(auth()->user()->team);
            }
        });
    }
}

----------------------------------------

TITLE: Disabling 'Create Another' Option in CreateAction in PHP
DESCRIPTION: This code shows how to remove the 'create another' button from the CreateAction modal, simplifying the user interface for single record creation.

LANGUAGE: php
CODE:
CreateAction::make()
    ->createAnother(false)

----------------------------------------

TITLE: Creating a Responsive Grid Layout with Section and TextInput in PHP
DESCRIPTION: This snippet demonstrates how to create a responsive grid layout using Filament's Section component with a TextInput. It shows how to set different column numbers for various breakpoints and control the column span of the TextInput.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;
use Filament\Forms\Components\TextInput;

Section::make()
    ->columns([
        'sm' => 3,
        'xl' => 6,
        '2xl' => 8,
    ])
    ->schema([
        TextInput::make('name')
            ->columnSpan([
                'sm' => 2,
                'xl' => 3,
                '2xl' => 4,
            ]),
        // ...
    ])

----------------------------------------

TITLE: Conditionally Hiding a Field in PHP
DESCRIPTION: Demonstrates how to conditionally hide a form field based on the value of another field.

LANGUAGE: php
CODE:
use Filament\Forms\Get;
use Filament\Forms\Components\Checkbox;
use Filament\Forms\Components\TextInput;

Checkbox::make('is_company')
    ->live()

TextInput::make('company_name')
    ->hidden(fn (Get $get): bool => ! $get('is_company'))

----------------------------------------

TITLE: Creating a Basic Text Column in Filament Tables
DESCRIPTION: This snippet demonstrates how to create a simple text column in a Filament table. It uses the TextColumn class to display a 'title' field from the database.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('title')

----------------------------------------

TITLE: Configuring Image Uploads in Rich Editor
DESCRIPTION: Shows how to customize image upload settings for the Rich Editor, including specifying the storage disk, directory, and visibility of uploaded files.

LANGUAGE: php
CODE:
use Filament\Forms\Components\RichEditor;

RichEditor::make('content')
    ->fileAttachmentsDisk('s3')
    ->fileAttachmentsDirectory('attachments')
    ->fileAttachmentsVisibility('private')

----------------------------------------

TITLE: Implementing Input Masking in Filament Forms
DESCRIPTION: Demonstrates how to use input masking with TextInput components to enforce specific input formats, including dynamic masks.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;
use Filament\Support\RawJs;

TextInput::make('cardNumber')
    ->mask(RawJs::make(<<<'JS'
        $input.startsWith('34') || $input.startsWith('37') ? '9999 999999 99999' : '9999 9999 9999 9999'
    JS))

----------------------------------------

TITLE: Disabling Specific Radio Options in PHP
DESCRIPTION: This code illustrates how to disable specific radio options using the disableOptionWhen() method in Filament Forms. It also shows how to retrieve enabled options for validation.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Radio;

Radio::make('status')
    ->options([
        'draft' => 'Draft',
        'scheduled' => 'Scheduled',
        'published' => 'Published',
    ])
    ->disableOptionWhen(fn (string $value): bool => $value === 'published')
    ->in(fn (Radio $component): array => array_keys($component->getEnabledOptions()))

----------------------------------------

TITLE: Customizing Repeater Item Actions in PHP
DESCRIPTION: Shows how to customize the actions available for each repeater item, such as adding confirmation modals.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\Repeater;

Repeater::make('members')
    ->schema([
        // ...
    ])
    ->deleteAction(
        fn (Action $action) => $action->requiresConfirmation(),
    )

----------------------------------------

TITLE: Implementing Dashboard Filters in PHP
DESCRIPTION: Creates a filterable dashboard with a form interface for filtering widget data.

LANGUAGE: php
CODE:
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\Section;
use Filament\Forms\Form;
use Filament\Pages\Dashboard as BaseDashboard;
use Filament\Pages\Dashboard\Concerns\HasFiltersForm;

class Dashboard extends BaseDashboard
{
    use HasFiltersForm;

    public function filtersForm(Form $form): Form
    {
        return $form
            ->schema([
                Section::make()
                    ->schema([
                        DatePicker::make('startDate'),
                        DatePicker::make('endDate'),
                        // ...
                    ])
                    ->columns(3),
            ]);
    }

----------------------------------------

TITLE: Adding Header Actions to a Section in Filament Forms
DESCRIPTION: Demonstrates how to add action buttons to the header of a section using the headerActions() method. This allows for interactive elements within the section header.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\Section;

Section::make('Rate limiting')
    ->headerActions([
        Action::make('test')
            ->action(function () {
                // ...
            }),
    ])
    ->schema([
        // ...
    ])

----------------------------------------

TITLE: Customizing Filter Form Schema in Filament Tables
DESCRIPTION: This snippet demonstrates how to customize the form schema of the entire filter form in a Filament table, allowing for custom layouts and the use of form components.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;
use Filament\Tables\Filters\Filter;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->filters([
            Filter::make('is_featured'),
            Filter::make('published_at'),
            Filter::make('author'),
        ])
        ->filtersFormColumns(2)
        ->filtersFormSchema(fn (array $filters): array => [
            Section::make('Visibility')
                ->description('These filters affect the visibility of the records in the table.')
                ->schema([
                    $filters['is_featured'],
                    $filters['published_at'],
                ])
                    ->columns(2)
                ->columnSpanFull(),
            $filters['author'],
        ]);
}

----------------------------------------

TITLE: Action Group Configuration in PHP
DESCRIPTION: Example of grouping multiple actions into a dropdown menu using ActionGroup. Demonstrates how to combine view, edit, and delete actions.

LANGUAGE: php
CODE:
ActionGroup::make([
    Action::make('view'),
    Action::make('edit'),
    Action::make('delete'),
])

----------------------------------------

TITLE: Using the Grid Component for Explicit Grid Syntax in PHP
DESCRIPTION: This example shows how to use Filament's Grid component to create an explicit grid layout with different column configurations for various breakpoints.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Grid;

Grid::make([
    'default' => 1,
    'sm' => 2,
    'md' => 3,
    'lg' => 4,
    'xl' => 6,
    '2xl' => 8,
])
    ->schema([
        // ...
    ])

----------------------------------------

TITLE: Basic Icon Entry Implementation in PHP
DESCRIPTION: Shows how to create an icon entry that displays different icons based on a status value using a match expression.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\IconEntry;

IconEntry::make('status')
    ->icon(fn (string $state): string => match ($state) {
        'draft' => 'heroicon-o-pencil',
        'reviewing' => 'heroicon-o-clock',
        'published' => 'heroicon-o-check-circle',
    })

----------------------------------------

TITLE: Sending Database Notifications Using Fluent API
DESCRIPTION: PHP code demonstrating how to send a database notification using Filament's fluent API.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;

$recipient = auth()->user();

Notification::make()
    ->title('Saved successfully')
    ->sendToDatabase($recipient);

----------------------------------------

TITLE: Passing Data to a Filament Action in Tests
DESCRIPTION: Shows how to pass an array of data into a Filament action during testing. The example demonstrates sending an invoice with a specific email address.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can send invoices', function () {
    $invoice = Invoice::factory()->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->callAction('send', data: [
            'email' => $email = fake()->email(),
        ])
        ->assertHasNoActionErrors();

    expect($invoice->refresh())
        ->isSent()->toBeTrue()
        ->recipient_email->toBe($email);
});

----------------------------------------

TITLE: Implementing Sortable Columns in Filament
DESCRIPTION: Configuration for making columns sortable with custom sorting logic

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('name')
    ->sortable()

----------------------------------------

TITLE: Customizing Markdown Editor Toolbar in PHP
DESCRIPTION: Configuration of available toolbar buttons in the Markdown editor with default options

LANGUAGE: php
CODE:
use Filament\Forms\Components\MarkdownEditor;

MarkdownEditor::make('content')
    ->toolbarButtons([
        'attachFiles',
        'blockquote',
        'bold',
        'bulletList',
        'codeBlock',
        'heading',
        'italic',
        'link',
        'orderedList',
        'redo',
        'strike',
        'table',
        'undo',
    ])

----------------------------------------

TITLE: Changing Button Colors in Blade
DESCRIPTION: This example demonstrates how to change the color of buttons using the 'color' attribute. It includes examples for danger, gray, info, success, and warning colors.

LANGUAGE: blade
CODE:
<x-filament::button color="danger">
    New user
</x-filament::button>

<x-filament::button color="gray">
    New user
</x-filament::button>

<x-filament::button color="info">
    New user
</x-filament::button>

<x-filament::button color="success">
    New user
</x-filament::button>

<x-filament::button color="warning">
    New user
</x-filament::button>

----------------------------------------

TITLE: Implementing Relationship Select Filters in Filament Tables
DESCRIPTION: Shows how to create a select filter based on a relationship. This example filters records based on the 'author' relationship, using the 'name' column from the related table.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\SelectFilter;

SelectFilter::make('author')
    ->relationship('author', 'name')

----------------------------------------

TITLE: Sorting Navigation Items in PHP
DESCRIPTION: Explains how to control the order of navigation items by setting the $navigationSort property.

LANGUAGE: php
CODE:
protected static ?int $navigationSort = 3;

----------------------------------------

TITLE: Adding Mark as Unread Action to Notification
DESCRIPTION: PHP code to add a 'Mark as Unread' action to a notification, allowing individual notifications to be marked as unread.

LANGUAGE: php
CODE:
use Filament\Notifications\Actions\Action;
use Filament\Notifications\Notification;

Notification::make()
    ->title('Saved successfully')
    ->success()
    ->body('Changes to the post have been saved.')
    ->actions([
        Action::make('markAsUnread')
            ->button()
            ->markAsUnread(),
    ])
    ->send();

----------------------------------------

TITLE: Configuring Table for Soft Deletes in Filament Resource
DESCRIPTION: PHP code to configure a Filament resource table with soft delete functionality, including filters, actions, and query modifications.

LANGUAGE: php
CODE:
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;

public static function table(Table $table): Table
{
    return $table
        ->columns([
            // ...
        ])
        ->filters([
            Tables\Filters\TrashedFilter::make(),
            // ...
        ])
        ->actions([
            // You may add these actions to your table if you're using a simple
            // resource, or you just want to be able to delete records without
            // leaving the table.
            Tables\Actions\DeleteAction::make(),
            Tables\Actions\ForceDeleteAction::make(),
            Tables\Actions\RestoreAction::make(),
            // ...
        ])
        ->bulkActions([
            Tables\Actions\BulkActionGroup::make([
                Tables\Actions\DeleteBulkAction::make(),
                Tables\Actions\ForceDeleteBulkAction::make(),
                Tables\Actions\RestoreBulkAction::make(),
                // ...
            ]),
        ]);
}

public static function getEloquentQuery(): Builder
{
    return parent::getEloquentQuery()
        ->withoutGlobalScopes([
            SoftDeletingScope::class,
        ]);
}

----------------------------------------

TITLE: Initializing a Basic Repeater Component in PHP
DESCRIPTION: Basic example of initializing a repeater component with a schema containing text input and select fields.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Repeater;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;

Repeater::make('members')
    ->schema([
        TextInput::make('name')->required(),
        Select::make('role')
            ->options([
                'member' => 'Member',
                'administrator' => 'Administrator',
                'owner' => 'Owner',
            ])
            ->required(),
    ])
    ->columns(2)

----------------------------------------

TITLE: Creating Filament Page with Artisan Command
DESCRIPTION: Command to generate a new Filament page, which creates a page class and corresponding view file

LANGUAGE: bash
CODE:
php artisan make:filament-page Settings

----------------------------------------

TITLE: Sending a Basic Notification in PHP
DESCRIPTION: Demonstrates how to create and send a basic success notification using Filament's Notification class in a Livewire component.

LANGUAGE: php
CODE:
<?php

namespace App\Livewire;

use Filament\Notifications\Notification;
use Livewire\Component;

class EditPost extends Component
{
    public function save(): void
    {
        // ...

        Notification::make()
            ->title('Saved successfully')
            ->success()
            ->send();
    }
}

----------------------------------------

TITLE: Testing Repeaters with Faker in PHP
DESCRIPTION: Demonstrates how to test forms containing repeaters by using the Repeater::fake() method to generate consistent UUIDs.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Repeater;
use function Pest\Livewire\livewire;

$undoRepeaterFake = Repeater::fake();

livewire(EditPost::class, ['record' => $post])
    ->assertFormSet([
        'quotes' => [
            [
                'content' => 'First quote',
            ],
            [
                'content' => 'Second quote',
            ],
        ],
        // ...
    ]);

$undoRepeaterFake();

----------------------------------------

TITLE: Customizing Redirect After Form Save in PHP
DESCRIPTION: Illustrates how to set up a custom redirect after the form is saved by overriding the getRedirectUrl() method on the Create page class.

LANGUAGE: php
CODE:
protected function getRedirectUrl(): string
{
    return $this->getResource()::getUrl('index');
}

----------------------------------------

TITLE: Configuring a Table with Grouped Summaries in PHP
DESCRIPTION: Shows how to set up a Filament table with grouped summaries, hiding individual rows and displaying only group summaries.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\Summarizers\Sum;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->columns([
            TextColumn::make('views_count')
                ->summarize(Sum::make()),
            TextColumn::make('likes_count')
                ->summarize(Sum::make()),
        ])
        ->defaultGroup('category')
        ->groupsOnly();
}

----------------------------------------

TITLE: Adding Import Action to Resource List Page in PHP
DESCRIPTION: Shows how to add an ImportAction to the header of the List page, allowing users to upload a CSV of data to import into the resource.

LANGUAGE: php
CODE:
use App\Filament\Imports\ProductImporter;
use Filament\Actions;

protected function getHeaderActions(): array
{
    return [
        Actions\ImportAction::make()
            ->importer(ProductImporter::class),
        Actions\CreateAction::make(),
    ];
}

----------------------------------------

TITLE: Lazy Loading CSS in Blade
DESCRIPTION: Demonstrates how to lazy load CSS files using Alpine.js directives. This technique allows for on-demand loading of stylesheets, improving performance by only loading necessary CSS.

LANGUAGE: blade
CODE:
<div
    x-data="{}"
    x-load-css="[@js(\Filament\Support\Facades\FilamentAsset::getStyleHref('custom-stylesheet'))]"
>
    <!-- ... -->
</div>

----------------------------------------

TITLE: Customizing User Menu Items in PHP
DESCRIPTION: Shows how to add custom items to the user menu using the userMenuItems() method in the panel configuration.

LANGUAGE: php
CODE:
use App\Filament\Pages\Settings;
use Filament\Navigation\MenuItem;
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->userMenuItems([
            MenuItem::make()
                ->label('Settings')
                ->url(fn (): string => Settings::getUrl())
                ->icon('heroicon-o-cog-6-tooth'),
            // ...
        ]);
}

----------------------------------------

TITLE: Persisting Tab State in URL Query String for Filament Forms
DESCRIPTION: This snippet shows how to persist the current tab state in the URL's query string using the persistTabInQueryString() method. It also demonstrates how to customize the query string key used for persisting the tab state.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Tabs;

Tabs::make('Tabs')
    ->tabs([
        Tabs\Tab::make('Tab 1')
            ->schema([
                // ...
            ]),
        Tabs\Tab::make('Tab 2')
            ->schema([
                // ...
            ]),
        Tabs\Tab::make('Tab 3')
            ->schema([
                // ...
            ]),
    ])
    ->persistTabInQueryString('settings-tab')

----------------------------------------

TITLE: Creating Split Layout with Sections in Filament Forms
DESCRIPTION: Demonstrates how to create a split layout with two sections using Filament's Split component. The first section grows to consume available space while the second section maintains its natural width, creating a sidebar effect. The layout becomes responsive using the from() method to specify breakpoints.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Split;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Toggle;

Split::make([
    Section::make([
        TextInput::make('title'),
        Textarea::make('content'),
    ]),
    Section::make([
        Toggle::make('is_published'),
        Toggle::make('is_featured'),
    ])->grow(false),
])->from('md')

----------------------------------------

TITLE: Using Filament Input Component in Blade
DESCRIPTION: Demonstrates how to use the Filament input component within an input wrapper. The example shows a text input field with wire:model binding for Livewire integration.

LANGUAGE: blade
CODE:
<x-filament::input.wrapper>
    <x-filament::input
        type="text"
        wire:model="name"
    />
</x-filament::input.wrapper>

----------------------------------------

TITLE: Lazy Loading JavaScript in Blade
DESCRIPTION: Demonstrates how to lazy load JavaScript files using Alpine.js directives. This technique allows for on-demand loading of scripts, improving performance by only loading necessary JavaScript.

LANGUAGE: blade
CODE:
<div
    x-data="{}"
    x-load-js="[@js(\Filament\Support\Facades\FilamentAsset::getScriptSrc('custom-script'))]"
>
    <!-- ... -->
</div>

----------------------------------------

TITLE: Configuring Record URLs for Clickable Rows
DESCRIPTION: Shows how to make table rows clickable by configuring record URLs and routing.

LANGUAGE: php
CODE:
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Model;

public function table(Table $table): Table
{
    return $table
        ->recordUrl(
            fn (Model $record): string => route('posts.edit', ['record' => $record]),
        );
}

----------------------------------------

TITLE: Accessing Related Data in Filament TextColumn
DESCRIPTION: Demonstrates how to use dot notation to access columns within relationships in a Filament table.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('author.name')

----------------------------------------

TITLE: Edit Page Lifecycle Hooks in PHP
DESCRIPTION: Example of available lifecycle hooks for edit pages, showing methods that can be overridden to execute code at different points in the editing process.

LANGUAGE: php
CODE:
use Filament\Resources\Pages\EditRecord;

class EditUser extends EditRecord
{
    protected function beforeFill(): void
    {
        // Runs before the form fields are populated from the database.
    }

    protected function afterFill(): void
    {
        // Runs after the form fields are populated from the database.
    }

    protected function beforeValidate(): void
    {
        // Runs before the form fields are validated when the form is saved.
    }

    protected function afterValidate(): void
    {
        // Runs after the form fields are validated when the form is saved.
    }

    protected function beforeSave(): void
    {
        // Runs before the form fields are saved to the database.
    }

    protected function afterSave(): void
    {
        // Runs after the form fields are saved to the database.
    }
}

----------------------------------------

TITLE: Setting Button Sizes in Blade
DESCRIPTION: This snippet illustrates how to set different sizes for buttons using the 'size' attribute. It shows examples for extra small, small, large, and extra large sizes.

LANGUAGE: blade
CODE:
<x-filament::button size="xs">
    New user
</x-filament::button>

<x-filament::button size="sm">
    New user
</x-filament::button>

<x-filament::button size="lg">
    New user
</x-filament::button>

<x-filament::button size="xl">
    New user
</x-filament::button>

----------------------------------------

TITLE: Using ImportAction in Filament
DESCRIPTION: Example of how to use the ImportAction in a Filament resource or page.

LANGUAGE: php
CODE:
use App\Filament\Imports\ProductImporter;
use Filament\Actions\ImportAction;

ImportAction::make()
    ->importer(ProductImporter::class)

----------------------------------------

TITLE: Implementing Block Previews in Builder Component in PHP
DESCRIPTION: This snippet demonstrates how to implement block previews in a Builder component. It shows setting up a block with a preview and the corresponding Blade template for rendering the preview.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Builder;
use Filament\Forms\Components\Builder\Block;
use Filament\Forms\Components\TextInput;

Builder::make('content')
    ->blockPreviews()
    ->blocks([
        Block::make('heading')
            ->schema([
                TextInput::make('text')
                    ->placeholder('Default heading'),
            ])
            ->preview('filament.content.block-previews.heading'),
    ])

----------------------------------------

TITLE: Custom Storage Disk Configuration for Images
DESCRIPTION: Configuring custom storage disk for retrieving images instead of default public disk.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\ImageEntry;

ImageEntry::make('header_image')
    ->disk('s3')

----------------------------------------

TITLE: Custom Profile Page Implementation
DESCRIPTION: Shows how to create a custom profile page by extending the base profile page and customizing the form schema.

LANGUAGE: php
CODE:
<?php

namespace App\Filament\Pages\Auth;

use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Pages\Auth\EditProfile as BaseEditProfile;

class EditProfile extends BaseEditProfile
{
    public function form(Form $form): Form
    {
        return $form
            ->schema([
                TextInput::make('username')
                    ->required()
                    ->maxLength(255),
                $this->getNameFormComponent(),
                $this->getEmailFormComponent(),
                $this->getPasswordFormComponent(),
                $this->getPasswordConfirmationFormComponent(),
            ]);
    }
}

----------------------------------------

TITLE: Basic Checkbox List Implementation in PHP
DESCRIPTION: Creates a basic checkbox list component with predefined options for selecting multiple technologies

LANGUAGE: php
CODE:
use Filament\Forms\Components\CheckboxList;

CheckboxList::make('technologies')
    ->options([
        'tailwind' => 'Tailwind CSS',
        'alpine' => 'Alpine.js',
        'laravel' => 'Laravel',
        'livewire' => 'Laravel Livewire',
    ])

----------------------------------------

TITLE: Defining Resource Table Structure
DESCRIPTION: Example of configuring table columns, filters, and actions for a Filament resource list page.

LANGUAGE: php
CODE:
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;

public static function table(Table $table): Table
{
    return $table
        ->columns([
            Tables\Columns\TextColumn::make('name'),
            Tables\Columns\TextColumn::make('email'),
            // ...
        ])
        ->filters([
            Tables\Filters\Filter::make('verified')
                ->query(fn (Builder $query): Builder => $query->whereNotNull('email_verified_at')),
            // ...
        ])
        ->actions([
            Tables\Actions\EditAction::make(),
        ])
        ->bulkActions([
            Tables\Actions\BulkActionGroup::make([
                Tables\Actions\DeleteBulkAction::make(),
            ]),
        ]);
}

----------------------------------------

TITLE: Implementing Infolist for Resource View
DESCRIPTION: Configuration for displaying record data using Filament's infolist component instead of a disabled form

LANGUAGE: php
CODE:
use Filament\Infolists;
use Filament\Infolists\Infolist;

public static function infolist(Infolist $infolist): Infolist
{
    return $infolist
        ->schema([
            Infolists\Components\TextEntry::make('name'),
            Infolists\Components\TextEntry::make('email'),
            Infolists\Components\TextEntry::make('notes')
                ->columnSpanFull(),
        ]);
}

----------------------------------------

TITLE: Configuring Multiple Searchable Columns in PHP
DESCRIPTION: Illustrates how to search across multiple columns of a resource by overriding the getGloballySearchableAttributes() method. It demonstrates the use of "dot notation" to search inside relationships.

LANGUAGE: php
CODE:
public static function getGloballySearchableAttributes(): array
{
    return ['title', 'slug', 'author.name', 'category.name'];
}

----------------------------------------

TITLE: Optimizing Filament for Production
DESCRIPTION: Commands for optimizing Filament performance in production environment by caching components and icons.

LANGUAGE: bash
CODE:
php artisan filament:optimize

----------------------------------------

TITLE: Adding Icons to Buttons in Blade
DESCRIPTION: This snippet shows how to add icons to buttons using the 'icon' attribute and how to change the icon's position using the 'icon-position' attribute.

LANGUAGE: blade
CODE:
<x-filament::button icon="heroicon-m-sparkles">
    New user
</x-filament::button>

<x-filament::button
    icon="heroicon-m-sparkles"
    icon-position="after"
>
    New user
</x-filament::button>

----------------------------------------

TITLE: Combining Multiple Utility Injections in PHP Filament Actions
DESCRIPTION: This code illustrates how to combine multiple parameter injections in a single Filament action configuration function. It demonstrates the flexibility of the utility injection system.

LANGUAGE: php
CODE:
use Livewire\Component;

function (array $arguments, Component $livewire) {
    // ...
}

----------------------------------------

TITLE: Custom Storage Disk Configuration for Images
DESCRIPTION: Specifies a custom storage disk for retrieving images instead of using the default public disk.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\ImageColumn;

ImageColumn::make('header_image')
    ->disk('s3')

----------------------------------------

TITLE: Customizing Text Column Appearance
DESCRIPTION: This snippet demonstrates various ways to customize the appearance of text columns, including adding icons, changing colors, and modifying text size and weight.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;
use Filament\Support\Enums\FontWeight;

TextColumn::make('email')
    ->icon('heroicon-m-envelope')
    ->iconColor('primary')
    ->color('success')
    ->size(TextColumn\TextColumnSize::Large)
    ->weight(FontWeight::Bold)

----------------------------------------

TITLE: Configuring Builder Block Icons in PHP
DESCRIPTION: This snippet demonstrates how to add an icon to a Builder block using the icon() method. It shows setting an icon for the 'paragraph' block as an example.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Builder;

Builder\Block::make('paragraph')
    ->icon('heroicon-m-bars-3-bottom-left')

----------------------------------------

TITLE: Configuring Wizard Navigation and Persistence in Filament PHP
DESCRIPTION: Shows how to set the default active step, allow skipping steps, and persist the current step in the URL query string for a Filament wizard component.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Wizard;

Wizard::make([
    // ...
])->startOnStep(2)

Wizard::make([
    // ...
])->skippable()

Wizard::make([
    // ...
])->persistStepInQueryString()

Wizard::make([
    // ...
])->persistStepInQueryString('wizard-step')

----------------------------------------

TITLE: Defining Table Filters in Filament PHP
DESCRIPTION: Shows how to define filters for a Filament table using the $table->filters() method within a Table class.

LANGUAGE: php
CODE:
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->filters([
            // ...
        ]);
}

----------------------------------------

TITLE: Registering Custom Icons in Filament
DESCRIPTION: PHP code snippet demonstrating how to register custom icons to replace default ones in Filament using the FilamentIcon facade.

LANGUAGE: php
CODE:
use Filament\Support\Facades\FilamentIcon;

FilamentIcon::register([
    'panels::topbar.global-search.field' => 'fas-magnifying-glass',
    'panels::sidebar.group.collapse-button' => view('icons.chevron-up'),
]);

----------------------------------------

TITLE: Laravel Package Provider Configuration in JSON
DESCRIPTION: Shows the composer.json configuration needed to register a Filament panel provider in a Laravel package.

LANGUAGE: json
CODE:
"extra": {
    "laravel": {
        "providers": [
            "DanHarrin\\FilamentBlog\\BlogPanelProvider"
        ]
    }
}

----------------------------------------

TITLE: Disabling Placeholder Selection in Filament Select Filters
DESCRIPTION: Shows how to remove the placeholder (null option) from a select filter, which disables the filter so all options are applied by default.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\SelectFilter;

SelectFilter::make('status')
    ->options([
        'draft' => 'Draft',
        'reviewing' => 'Reviewing',
        'published' => 'Published',
    ])
    ->default('draft')
    ->selectablePlaceholder(false)

----------------------------------------

TITLE: Rendering Breadcrumbs Using Filament Blade Component
DESCRIPTION: This snippet demonstrates how to use the Filament breadcrumbs Blade component to create a navigation structure. It shows the syntax for passing an array of breadcrumbs, where keys represent URLs and values represent the displayed text for each link.

LANGUAGE: blade
CODE:
<x-filament::breadcrumbs :breadcrumbs="[\n    '/' => 'Home',\n    '/dashboard' => 'Dashboard',\n    '/dashboard/users' => 'Users',\n    '/dashboard/users/create' => 'Create User',\n]" />

----------------------------------------

TITLE: Customizing Form Data Before Saving in PHP
DESCRIPTION: This snippet illustrates how to modify form data before it is saved to the database using the mutateFormDataUsing method.

LANGUAGE: php
CODE:
CreateAction::make()
    ->mutateFormDataUsing(function (array $data): array {
        $data['user_id'] = auth()->id();

        return $data;
    })

----------------------------------------

TITLE: Creating Multi-Select Filters in Filament Tables
DESCRIPTION: Demonstrates how to create a multi-select filter that allows users to select multiple options. This is done using the multiple() method on the SelectFilter.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\SelectFilter;

SelectFilter::make('status')
    ->multiple()
    ->options([
        'draft' => 'Draft',
        'reviewing' => 'Reviewing',
        'published' => 'Published',
    ])

----------------------------------------

TITLE: Rendering a Checkbox Input with Filament in Blade
DESCRIPTION: This snippet demonstrates how to use the Filament checkbox component to render a checkbox input for toggling a boolean value. It includes a label for better accessibility.

LANGUAGE: blade
CODE:
<label>
    <x-filament::input.checkbox wire:model="isAdmin" />

    <span>
        Is Admin
    </span>
</label>

----------------------------------------

TITLE: Header Actions Configuration
DESCRIPTION: Implementation of page header actions with edit and delete functionality using the getHeaderActions method

LANGUAGE: php
CODE:
use Filament\Actions\Action;

protected function getHeaderActions(): array
{
    return [
        Action::make('edit')
            ->url(route('posts.edit', ['post' => $this->post])),
        Action::make('delete')
            ->requiresConfirmation()
            ->action(fn () => $this->post->delete()),
    ];
}

----------------------------------------

TITLE: Changing the Path of a Filament Panel in Laravel
DESCRIPTION: This code snippet demonstrates how to change the access path of a Filament panel using the path() method in the panel configuration.

LANGUAGE: php
CODE:
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->path('app');
}

----------------------------------------

TITLE: Scoping a Render Hook to a Specific Page in PHP
DESCRIPTION: Demonstrates how to scope a render hook to a specific page or Livewire component. This example adds a warning banner to the start of the Edit User page.

LANGUAGE: php
CODE:
use Filament\Support\Facades\FilamentView;
use Filament\View\PanelsRenderHook;
use Illuminate\Support\Facades\Blade;

FilamentView::registerRenderHook(
    PanelsRenderHook::PAGE_START,
    fn (): View => view('warning-banner'),
    scopes: \App\Filament\Resources\UserResource\Pages\EditUser::class,
);

----------------------------------------

TITLE: Installing Required Laravel Migrations for Export Action
DESCRIPTION: Commands to publish and run migrations for job batches, database notifications, and Filament export tables.

LANGUAGE: bash
CODE:
# Laravel 11 and higher
php artisan make:queue-batches-table
php artisan make:notifications-table

# Laravel 10
php artisan queue:batches-table
php artisan notifications:table

# All apps
php artisan vendor:publish --tag=filament-actions-migrations
php artisan migrate

----------------------------------------

TITLE: Customizing Record Creation Process in PHP
DESCRIPTION: This code demonstrates how to customize the process of creating a new record using the using method, allowing for more control over the creation logic.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;

CreateAction::make()
    ->using(function (array $data, string $model): Model {
        return $model::create($data);
    })

----------------------------------------

TITLE: Color Picker Validation Implementation in PHP
DESCRIPTION: Shows how to implement validation rules for different color formats using regex patterns. Includes validation for HEX, HSL, RGB, and RGBA color values.

LANGUAGE: php
CODE:
use Filament\Forms\Components\ColorPicker;

ColorPicker::make('hex_color')
    ->regex('/^#([a-f0-9]{6}|[a-f0-9]{3})\b$/')

ColorPicker::make('hsl_color')
    ->hsl()
    ->regex('/^hsl\(\s*(\d+)\s*,\s*(\d*(?:\.\d+)?%)\s*,\s*(\d*(?:\.\d+)?%)\)$/')

ColorPicker::make('rgb_color')
    ->rgb()
    ->regex('/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/')

ColorPicker::make('rgba_color')
    ->rgba()
    ->regex('/^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*(\d*(?:\.\d+)?)\)$/')

----------------------------------------

TITLE: Setting Global Search Result Title Attribute in PHP
DESCRIPTION: Demonstrates how to enable global search on a model by setting the record title attribute. This attribute is used to retrieve the search result title for each record.

LANGUAGE: php
CODE:
protected static ?string $recordTitleAttribute = 'title';

----------------------------------------

TITLE: Configuring Input Mode for Text Inputs in Filament Forms
DESCRIPTION: Demonstrates how to set the inputmode attribute for a TextInput component, which can affect the virtual keyboard on mobile devices.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;

TextInput::make('text')
    ->numeric()
    ->inputMode('decimal')

----------------------------------------

TITLE: Customizing the Table Eloquent Query in Filament List Page
DESCRIPTION: This code snippet shows how to customize the Eloquent query specifically for the List page table in Filament. It uses the modifyQueryUsing() method within the table() method to modify the query.

LANGUAGE: php
CODE:
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;

public static function table(Table $table): Table
{
    return $table
        ->modifyQueryUsing(fn (Builder $query) => $query->withoutGlobalScopes());
}

----------------------------------------

TITLE: Toggle with Custom Icons
DESCRIPTION: Implementation of a toggle component with custom icons for on and off states using Heroicons.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Toggle;

Toggle::make('is_admin')
    ->onIcon('heroicon-m-bolt')
    ->offIcon('heroicon-m-user')

----------------------------------------

TITLE: Secure HTML Output in Blade
DESCRIPTION: Sanitizing Markdown-generated HTML output to prevent XSS vulnerabilities using Blade syntax

LANGUAGE: blade
CODE:
{!! str($record->content)->markdown()->sanitizeHtml() !!}

----------------------------------------

TITLE: Creating a Filament Resource Widget
DESCRIPTION: Command to generate a new resource widget for a CustomerResource. This creates a widget class and a view file.

LANGUAGE: bash
CODE:
php artisan make:filament-widget CustomerOverview --resource=CustomerResource

----------------------------------------

TITLE: Sending Database Notification with Event Dispatch
DESCRIPTION: PHP code to send a database notification with an event dispatch for immediate fetching with websockets.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;

$recipient = auth()->user();

Notification::make()
    ->title('Saved successfully')
    ->sendToDatabase($recipient, isEventDispatched: true);

----------------------------------------

TITLE: Removing Styled Container from Filament Form Tabs
DESCRIPTION: This snippet shows how to remove the default styled container from tabs using the contained() method set to false. This removes the card-like styling around the tabs and their content.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Tabs;

Tabs::make('Tabs')
    ->tabs([
        Tabs\Tab::make('Tab 1')
            ->schema([
                // ...
            ]),
        Tabs\Tab::make('Tab 2')
            ->schema([
                // ...
            ]),
        Tabs\Tab::make('Tab 3')
            ->schema([
                // ...
            ]),
    ])
    ->contained(false)

----------------------------------------

TITLE: Adding Accepted Validation to Checkbox in Filament Forms
DESCRIPTION: Demonstrates how to add validation to ensure that a checkbox is checked using the accepted() method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Checkbox;

Checkbox::make('terms_of_service')
    ->accepted()

----------------------------------------

TITLE: Explicit Grid Component Configuration - PHP
DESCRIPTION: Demonstrates the use of Filament's dedicated Grid component for creating responsive layouts with explicit grid syntax. Shows how to configure different column counts across various breakpoints.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Grid;

Grid::make([
    'default' => 1,
    'sm' => 2,
    'md' => 3,
    'lg' => 4,
    'xl' => 6,
    '2xl' => 8,
])
    ->schema([
        // ...
    ])

----------------------------------------

TITLE: Creating View Column in Filament PHP
DESCRIPTION: Demonstrates how to create a view column in Filament using the ViewColumn class. This allows rendering a custom view for a cell in a table.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\ViewColumn;

ViewColumn::make('status')->view('filament.tables.columns.status-switcher')

----------------------------------------

TITLE: Implementing Column Spans in Infolist Entries
DESCRIPTION: Demonstrates how to control entry width using columnSpan to make certain entries span multiple columns.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;

[
    TextEntry::make('title'),
    TextEntry::make('slug')
    TextEntry::make('content')
        ->columnSpan(2), // or `columnSpan('full')`,
]

----------------------------------------

TITLE: Adding an Icon to a Section Header in Filament Forms
DESCRIPTION: Demonstrates how to add an icon to the header of a section using the icon() method. This enhances the visual appearance and helps identify the section's purpose.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;

Section::make('Cart')
    ->description('The items you have selected for purchase')
    ->icon('heroicon-m-shopping-bag')
    ->schema([
        // ...
    ])

----------------------------------------

TITLE: Creating Laravel Layout Template
DESCRIPTION: Blade layout template for Livewire components with Filament integration.

LANGUAGE: blade
CODE:
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">

        <meta name="application-name" content="{{ config('app.name') }}">
        <meta name="csrf-token" content="{{ csrf_token() }}">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>{{ config('app.name') }}</title>

        <style>
            [x-cloak] {
                display: none !important;
            }
        </style>

        @filamentStyles
        @vite('resources/css/app.css')
    </head>

    <body class="antialiased">
        {{ $slot }}

        @livewire('notifications')

        @filamentScripts
        @vite('resources/js/app.js')
    </body>
</html>

----------------------------------------

TITLE: Implementing Basic Toggle Column in PHP
DESCRIPTION: Basic implementation of a toggle column in Filament tables that allows updating a database record's boolean value directly from the table interface.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\ToggleColumn;

ToggleColumn::make('is_admin')

----------------------------------------

TITLE: Initializing Rich Editor Component in PHP
DESCRIPTION: Basic initialization of the Rich Editor component in a Filament form. This creates a rich text editor field named 'content'.

LANGUAGE: php
CODE:
use Filament\Forms\Components\RichEditor;

RichEditor::make('content')

----------------------------------------

TITLE: Customizing Navigation Item Label in PHP
DESCRIPTION: Demonstrates how to customize the label of a navigation item by setting the $navigationLabel property or overriding the getNavigationLabel() method.

LANGUAGE: php
CODE:
protected static ?string $navigationLabel = 'Custom Navigation Label';

LANGUAGE: php
CODE:
public static function getNavigationLabel(): string
{
    return 'Custom Navigation Label';
}

----------------------------------------

TITLE: Collapsible Section Component in Blade
DESCRIPTION: Demonstrates creating a collapsible section using the collapsible attribute.

LANGUAGE: blade
CODE:
<x-filament::section collapsible>
    <x-slot name="heading">
        User details
    </x-slot>

    {{-- Content --}}
</x-filament::section>

----------------------------------------

TITLE: Image Editor Configuration
DESCRIPTION: Setting up image editor with custom aspect ratios and cropping options.

LANGUAGE: php
CODE:
use Filament\Forms\Components\FileUpload;

FileUpload::make('image')
    ->image()
    ->imageEditor()
    ->imageEditorAspectRatios([
        '16:9',
        '4:3',
        '1:1',
    ])

----------------------------------------

TITLE: Basic Tabs Implementation in Filament
DESCRIPTION: Creates a basic tabbed interface in Filament infolists with multiple tabs, each containing its own schema of components.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Tabs;

Tabs::make('Tabs')
    ->tabs([
        Tabs\Tab::make('Tab 1')
            ->schema([
                // ...
            ]),
        Tabs\Tab::make('Tab 2')
            ->schema([
                // ...
            ]),
        Tabs\Tab::make('Tab 3')
            ->schema([
                // ...
            ]),
    ])

----------------------------------------

TITLE: Configuring Polling Interval for Database Notifications
DESCRIPTION: PHP code to configure the polling interval for checking new database notifications.

LANGUAGE: php
CODE:
use Filament\Notifications\Livewire\DatabaseNotifications;

DatabaseNotifications::pollingInterval('30s');

----------------------------------------

TITLE: Color Format Configuration in PHP
DESCRIPTION: Demonstrates how to configure different color formats (HSL, RGB, RGBA) for the color picker component.

LANGUAGE: php
CODE:
use Filament\Forms\Components\ColorPicker;

ColorPicker::make('hsl_color')
    ->hsl()

ColorPicker::make('rgb_color')
    ->rgb()

ColorPicker::make('rgba_color')
    ->rgba()

----------------------------------------

TITLE: Configuring Validation Rules for Text Inputs in Filament Forms
DESCRIPTION: Shows how to add various validation rules to TextInput components, including length restrictions and numeric value ranges.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;

TextInput::make('name')
    ->minLength(2)
    ->maxLength(255)

TextInput::make('number')
    ->numeric()
    ->minValue(1)
    ->maxValue(100)

----------------------------------------

TITLE: Adding Badges to Tabs in Filament Forms
DESCRIPTION: This snippet shows how to add a badge to a tab using the badge() method. It also demonstrates how to change the badge color using the badgeColor() method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Tabs;

Tabs::make('Tabs')
    ->tabs([
        Tabs\Tab::make('Notifications')
            ->badge(5)
            ->badgeColor('success')
            ->schema([
                // ...
            ]),
        // ...
    ])

----------------------------------------

TITLE: Creating Sectioned Infolist Layout with Description
DESCRIPTION: Shows how to organize infolist entries into sections with headings and descriptions using the Section component.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Section;
use Filament\Infolists\Components\TextEntry;

[
    TextEntry::make('title'),
    TextEntry::make('slug'),
    TextEntry::make('content')
        ->columnSpan(2)
        ->markdown(),
    Section::make('Media')
        ->description('Images used in the page layout.')
        ->schema([
            // ...
        ]),
]

----------------------------------------

TITLE: Testing Table Summaries in PHP
DESCRIPTION: Test to verify table summary calculations using assertTableColumnSummarySet() helper.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can average values in a column', function () {
    $posts = Post::factory()->count(10)->create();

    livewire(PostResource\Pages\ListPosts::class)
        ->assertCanSeeTableRecords($posts)
        ->assertTableColumnSummarySet('rating', 'average', $posts->avg('rating'));
});

----------------------------------------

TITLE: Creating a Modal Form for Updating Author in PHP
DESCRIPTION: This example shows how to create a modal form with a select input for updating the author of a post.

LANGUAGE: php
CODE:
use App\Models\Post;
use App\Models\User;
use Filament\Forms\Components\Select;

Action::make('updateAuthor')
    ->form([
        Select::make('authorId')
            ->label('Author')
            ->options(User::query()->pluck('name', 'id'))
            ->required(),
    ])
    ->action(function (array $data, Post $record): void {
        $record->author()->associate($data['authorId']);
        $record->save();
    })

----------------------------------------

TITLE: Customizing Action Group Trigger Button in PHP
DESCRIPTION: Shows how to customize the trigger button of an ActionGroup using various methods like label, icon, size, color, and button style.

LANGUAGE: php
CODE:
use Filament\Support\Enums\ActionSize;

ActionGroup::make([
    // Array of actions
])
    ->label('More actions')
    ->icon('heroicon-m-ellipsis-vertical')
    ->size(ActionSize::Small)
    ->color('primary')
    ->button()

----------------------------------------

TITLE: Data Mutation Before Form Fill
DESCRIPTION: Example of modifying record data before it is filled into the edit form using mutateRecordDataUsing method.

LANGUAGE: php
CODE:
EditAction::make()
    ->mutateRecordDataUsing(function (array $data): array {
        $data['user_id'] = auth()->id();

        return $data;
    })

----------------------------------------

TITLE: Counting Related Records in Filament TextColumn
DESCRIPTION: Shows how to count related records using the counts() method, including an example of scoping the relationship query.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('users_count')->counts('users')

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;
use Illuminate\Database\Eloquent\Builder;

TextColumn::make('users_count')->counts([
    'users' => fn (Builder $query) => $query->where('is_active', true),
])

----------------------------------------

TITLE: Aligning Footer Actions in a Filament Forms Section
DESCRIPTION: Demonstrates how to customize the alignment of footer actions in a section using the footerActionsAlignment() method. This allows for better control over the layout of action buttons.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\Section;
use Filament\Support\Enums\Alignment;

Section::make('Rate limiting')
    ->schema([
        // ...
    ])
    ->footerActions([
        Action::make('test')
            ->action(function () {
                // ...
            }),
    ])
    ->footerActionsAlignment(Alignment::End)

----------------------------------------

TITLE: Registering Additional Colors in Filament
DESCRIPTION: Demonstrates how to register extra custom colors for use throughout the Filament framework.

LANGUAGE: php
CODE:
use Filament\Support\Colors\Color;
use Filament\Support\Facades\FilamentColor;

FilamentColor::register([
    'indigo' => Color::Indigo,
]);

----------------------------------------

TITLE: Customizing Filter Indicators in PHP for Filament Tables
DESCRIPTION: This snippet demonstrates how to customize the indicator text for a filter using the indicator() method.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\Filter;

Filter::make('is_admin')
    ->label('Administrators only?')
    ->indicator('Administrators')

----------------------------------------

TITLE: Testing Validation Errors in Filament Actions
DESCRIPTION: Shows how to test for validation errors in Filament action tests using assertHasActionErrors(). The example validates the invoice recipient email.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can validate invoice recipient email', function () {
    $invoice = Invoice::factory()->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->callAction('send', data: [
            'email' => Str::random(),
        ])
        ->assertHasActionErrors(['email' => ['email']]);
});

----------------------------------------

TITLE: Creating a Badge-Style Text Column with Dynamic Colors
DESCRIPTION: This example shows how to create a text column that displays as a badge with dynamic colors based on the status value. It uses the badge() method and a closure to determine the color.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('status')
    ->badge()
    ->color(fn (string $state): string => match ($state) {
        'draft' => 'gray',
        'reviewing' => 'warning',
        'published' => 'success',
        'rejected' => 'danger',
    })

----------------------------------------

TITLE: Configuring Colors for Filament Panel in PHP
DESCRIPTION: This snippet demonstrates how to customize the color palette used in a Filament panel. It uses the Filament\Support\Colors\Color class to set predefined colors or custom RGB values.

LANGUAGE: php
CODE:
use Filament\Panel;
use Filament\Support\Colors\Color;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->colors([
            'danger' => Color::Rose,
            'gray' => Color::Gray,
            'info' => Color::Blue,
            'primary' => Color::Indigo,
            'success' => Color::Emerald,
            'warning' => Color::Orange,
        ]);
}

----------------------------------------

TITLE: Multiple Selection Toggle Buttons
DESCRIPTION: Implements toggle buttons that allow multiple selections, with array casting for Eloquent models.

LANGUAGE: php
CODE:
use Filament\Forms\Components\ToggleButtons;

ToggleButtons::make('technologies')
    ->multiple()
    ->options([
        'tailwind' => 'Tailwind CSS',
        'alpine' => 'Alpine.js',
        'laravel' => 'Laravel',
        'livewire' => 'Laravel Livewire',
    ])

----------------------------------------

TITLE: Accessing Eloquent Record in Blade Template
DESCRIPTION: This Blade snippet shows how to access the Eloquent record within a custom layout view using the $getRecord() function.

LANGUAGE: blade
CODE:
<div>
    {{ $getRecord()->name }}
</div>

----------------------------------------

TITLE: Mutating Form Data Before Fill in PHP
DESCRIPTION: Method to modify record data before it is filled into the edit form. This allows customizing the data that will be displayed in the form fields.

LANGUAGE: php
CODE:
protected function mutateFormDataBeforeFill(array $data): array
{
    $data['user_id'] = auth()->id();

    return $data;
}

----------------------------------------

TITLE: Adding Actions to Notifications in PHP
DESCRIPTION: Shows how to add action buttons to a Filament notification, including opening URLs and dispatching Livewire events.

LANGUAGE: php
CODE:
use Filament\Notifications\Actions\Action;
use Filament\Notifications\Notification;

Notification::make()
    ->title('Saved successfully')
    ->success()
    ->body('Changes to the post have been saved.')
    ->actions([
        Action::make('view')
            ->button()
            ->url(route('posts.show', $post), shouldOpenInNewTab: true),
        Action::make('undo')
            ->color('gray')
            ->dispatch('undoEditingPost', [$post->id]),
    ])
    ->send();

----------------------------------------

TITLE: Creating a Filament Relation Manager
DESCRIPTION: Console command to generate a new relation manager for managing posts related to a category.

LANGUAGE: bash
CODE:
php artisan make:filament-relation-manager CategoryResource posts title

----------------------------------------

TITLE: Rendering SVG Logo in Blade Template for Filament Panel
DESCRIPTION: This Blade template snippet demonstrates how to render an inline SVG logo for use in a Filament panel, with appropriate classes for light and dark mode compatibility.

LANGUAGE: blade
CODE:
<svg
    viewBox="0 0 128 26"
    xmlns="http://www.w3.org/2000/svg"
    class="h-full fill-gray-500 dark:fill-gray-400"
>
    <!-- ... -->
</svg>

----------------------------------------

TITLE: Checkbox List with Option Descriptions
DESCRIPTION: Creates a checkbox list with detailed descriptions for each option, supporting HTML and markdown formatting

LANGUAGE: php
CODE:
use Filament\Forms\Components\CheckboxList;
use Illuminate\Support\HtmlString;

CheckboxList::make('technologies')
    ->options([
        'tailwind' => 'Tailwind CSS',
        'alpine' => 'Alpine.js',
        'laravel' => 'Laravel',
        'livewire' => 'Laravel Livewire',
    ])
    ->descriptions([
        'tailwind' => 'A utility-first CSS framework for rapidly building modern websites without ever leaving your HTML.',
        'alpine' => new HtmlString('A rugged, minimal tool for composing behavior <strong>directly in your markup</strong>.'),
        'laravel' => str('A **web application** framework with expressive, elegant syntax.')->inlineMarkdown()->toHtmlString(),
        'livewire' => 'A full-stack framework for Laravel building dynamic interfaces simple, without leaving the comfort of Laravel.',
    ])

----------------------------------------

TITLE: Adding Badges to Filter Tabs in Filament List Page
DESCRIPTION: This code snippet shows how to add badges to filter tabs in a Filament List page. It demonstrates using the badge() method to set a badge value and the badgeColor() method to customize the badge color.

LANGUAGE: php
CODE:
use Filament\Resources\Components\Tab;

Tab::make()
    ->badge(Customer::query()->where('active', true)->count())

LANGUAGE: php
CODE:
use Filament\Resources\Components\Tab;

Tab::make()
    ->badge(Customer::query()->where('active', true)->count())
    ->badgeColor('success')

----------------------------------------

TITLE: Passing Parameters to Livewire Component
DESCRIPTION: Demonstrates how to pass parameters to a Livewire component during initialization.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Livewire;
use App\Livewire\Foo;

Livewire::make(Foo::class, ['bar' => 'baz'])

----------------------------------------

TITLE: Disabling Key Editing in Key-value Field in PHP
DESCRIPTION: Illustrates how to prevent users from editing keys in a key-value field using the editableKeys(false) method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\KeyValue;

KeyValue::make('meta')
    ->editableKeys(false)

----------------------------------------

TITLE: Using Grid Columns Within a Section in Filament Forms
DESCRIPTION: Demonstrates how to create a grid layout within a section using the columns() method. This allows for more complex layouts within the section.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;

Section::make('Heading')
    ->schema([
        // ...
    ])
    ->columns(2)

----------------------------------------

TITLE: Basic Toggle Buttons Implementation in PHP
DESCRIPTION: Creates a basic toggle buttons input with three status options: draft, scheduled, and published.

LANGUAGE: php
CODE:
use Filament\Forms\Components\ToggleButtons;

ToggleButtons::make('status')
    ->options([
        'draft' => 'Draft',
        'scheduled' => 'Scheduled',
        'published' => 'Published'
    ])

----------------------------------------

TITLE: Implementing Responsive Grid Layout with Section Component - PHP
DESCRIPTION: Example showing how to create a responsive grid layout using Filament's Section component with dynamic column spans across different breakpoints. The section is configured with varying column counts for different screen sizes, and contains a text entry that spans multiple columns responsively.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Section;
use Filament\Infolists\Components\TextEntry;

Section::make()
    ->columns([
        'sm' => 3,
        'xl' => 6,
        '2xl' => 8,
    ])
    ->schema([
        TextEntry::make('name')
            ->columnSpan([
                'sm' => 2,
                'xl' => 3,
                '2xl' => 4,
            ]),
        // ...
    ])

----------------------------------------

TITLE: Custom Record Update Handler in PHP
DESCRIPTION: Method to customize how the record is updated in the database. This provides control over the update process.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;

protected function handleRecordUpdate(Model $record, array $data): Model
{
    $record->update($data);

    return $record;
}

----------------------------------------

TITLE: Lifecycle Hooks for Text Input Column
DESCRIPTION: Demonstrates the implementation of beforeStateUpdated and afterStateUpdated lifecycle hooks for text input columns.

LANGUAGE: php
CODE:
TextInputColumn::make()
    ->beforeStateUpdated(function ($record, $state) {
        // Runs before the state is saved to the database.
    })
    ->afterStateUpdated(function ($record, $state) {
        // Runs after the state is saved to the database.
    })

----------------------------------------

TITLE: Toggle with Declined Validation
DESCRIPTION: Implementation of a toggle with validation requiring the toggle to be in the 'off' state.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Toggle;

Toggle::make('is_under_18')
    ->declined()

----------------------------------------

TITLE: Basic Tags Input Implementation in PHP
DESCRIPTION: Creates a basic tags input component that stores data in JSON format.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TagsInput;

TagsInput::make('tags')

----------------------------------------

TITLE: Injecting Multiple Utilities in PHP Column Configuration
DESCRIPTION: This snippet shows how to inject multiple utilities into a single column configuration function in PHP.

LANGUAGE: php
CODE:
use Filament\Tables\Contracts\HasTable;
use Illuminate\Database\Eloquent\Model;

function (HasTable $livewire, Model $record) {
    // ...
}

----------------------------------------

TITLE: Table Delete Actions Configuration in PHP
DESCRIPTION: Configuration for adding delete actions to tables, including single and bulk delete functionality.

LANGUAGE: php
CODE:
use Filament\Tables\Actions\BulkActionGroup;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Actions\DeleteBulkAction;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->actions([
            DeleteAction::make(),
            // ...
        ])
        ->bulkActions([
            BulkActionGroup::make([
                DeleteBulkAction::make(),
                // ...
            ]),
        ]);
}

----------------------------------------

TITLE: Creating View Field in PHP
DESCRIPTION: Demonstrates how to create a basic view field component using ViewField class with optional view data passing.

LANGUAGE: php
CODE:
use Filament\Forms\Components\ViewField;

ViewField::make('rating')
    ->view('filament.forms.components.range-slider')

----------------------------------------

TITLE: Configuring Storage Options in FileUpload
DESCRIPTION: Example showing how to configure custom storage disk, directory and visibility settings for file uploads.

LANGUAGE: php
CODE:
use Filament\Forms\Components\FileUpload;

FileUpload::make('attachment')
    ->disk('s3')
    ->directory('form-attachments')
    ->visibility('private')

----------------------------------------

TITLE: Building Form Schema for Footer Settings
DESCRIPTION: PHP code demonstrating how to create a form schema for the FooterSettings class. It includes fields for copyright notice and a repeater for links, using Filament's Form Builder components.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Repeater;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;

public function form(Form $form): Form
{
    return $form
        ->schema([
            TextInput::make('copyright')
                ->label('Copyright notice')
                ->required(),
            Repeater::make('links')
                ->schema([
                    TextInput::make('label')->required(),
                    TextInput::make('url')
                        ->url()
                        ->required(),
                ]),
        ]);
}

----------------------------------------

TITLE: Customizing Column for Select Filter in Filament Tables
DESCRIPTION: Shows how to customize the database column used by a select filter using the attribute() method. This is useful when the filter name differs from the actual column name.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\SelectFilter;

SelectFilter::make('status')
    ->options([
        'draft' => 'Draft',
        'reviewing' => 'Reviewing',
        'published' => 'Published',
    ])
    ->attribute('status_id')

----------------------------------------

TITLE: Multiple Group Options Configuration in Filament
DESCRIPTION: Configures multiple grouping options for users to choose from, with an optional default group.

LANGUAGE: php
CODE:
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->groups([
            'status',
            'category',
        ])
        ->defaultGroup('status');
}

----------------------------------------

TITLE: Rendering a Basic Button in Blade
DESCRIPTION: This snippet demonstrates how to render a basic clickable button using the Filament Button component. It includes a wire:click attribute for Livewire integration.

LANGUAGE: blade
CODE:
<x-filament::button wire:click="openNewUserModal">
    New user
</x-filament::button>

----------------------------------------

TITLE: Enabling Autosize for Textarea in PHP with Filament
DESCRIPTION: Demonstrates how to make a textarea automatically resize to fit its content using the autosize() method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Textarea;

Textarea::make('description')
    ->autosize()

----------------------------------------

TITLE: Modal with Heading and Description
DESCRIPTION: Modal implementation with heading and description slots for additional content structure.

LANGUAGE: blade
CODE:
<x-filament::modal>
    <x-slot name="heading">
        Modal heading
    </x-slot>

    <x-slot name="description">
        Modal description
    </x-slot>

    {{-- Modal content --}}
</x-filament::modal>

----------------------------------------

TITLE: Setting Action Data Without Calling in Filament Tests
DESCRIPTION: Demonstrates how to set action data without immediately calling the action in Filament tests using setActionData().

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can send invoices', function () {
    $invoice = Invoice::factory()->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->mountAction('send')
        ->setActionData([
            'email' => $email = fake()->email(),
        ])
});

----------------------------------------

TITLE: Publishing Filament v3 Config
DESCRIPTION: Commands to publish the new configuration file and remove the old forms config file.

LANGUAGE: bash
CODE:
php artisan vendor:publish --tag=filament-config --force
rm config/forms.php

----------------------------------------

TITLE: Registering Global Search Key Bindings in PHP
DESCRIPTION: Shows how to configure keyboard shortcuts for opening the global search field in the Filament panel configuration.

LANGUAGE: php
CODE:
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->globalSearchKeyBindings(['command+k', 'ctrl+k']);
}

----------------------------------------

TITLE: Custom Date Format Configuration - PHP
DESCRIPTION: Customizing the storage format for date fields using PHP date formatting tokens.

LANGUAGE: php
CODE:
use Filament\Forms\Components\DatePicker;

DatePicker::make('date_of_birth')
    ->format('d/m/Y')

----------------------------------------

TITLE: Creating a New Filament Panel in Laravel
DESCRIPTION: This command creates a new Filament panel named 'app' with a configuration file at app/Providers/Filament/AppPanelProvider.php.

LANGUAGE: bash
CODE:
php artisan make:filament-panel app

----------------------------------------

TITLE: Adding Suffix Action to Text Input
DESCRIPTION: Shows how to add a suffix action to a text input field with state management functionality.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Set;

TextInput::make('cost')
    ->prefix('€')
    ->suffixAction(
        Action::make('copyCostToPrice')
            ->icon('heroicon-m-clipboard')
            ->requiresConfirmation()
            ->action(function (Set $set, $state) {
                $set('price', $state);
            })
    )

----------------------------------------

TITLE: Implementing Record Reordering
DESCRIPTION: Demonstrates how to enable drag-and-drop record reordering functionality in tables.

LANGUAGE: php
CODE:
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->reorderable('sort');
}

----------------------------------------

TITLE: Validating Number of Repeater Items in PHP
DESCRIPTION: Demonstrates how to set minimum and maximum limits on the number of items allowed in a repeater.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Repeater;

Repeater::make('members')
    ->schema([
        // ...
    ])
    ->minItems(2)
    ->maxItems(5)

----------------------------------------

TITLE: Delete Action with Disabled Notification in PHP
DESCRIPTION: Implementing DeleteAction with notifications disabled.

LANGUAGE: php
CODE:
DeleteAction::make()
    ->successNotification(null)

----------------------------------------

TITLE: Adding Actions to Empty State in Filament Table
DESCRIPTION: Demonstrates how to add interactive actions to the empty state display using the emptyStateActions() method.

LANGUAGE: php
CODE:
use Filament\Tables\Actions\Action;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->emptyStateActions([
            Action::make('create')
                ->label('Create post')
                ->url(route('posts.create'))
                ->icon('heroicon-m-plus')
                ->button(),
        ]);
}

----------------------------------------

TITLE: Custom Avatar Size Classes in Blade
DESCRIPTION: Shows how to apply custom size classes to the avatar component for more precise control over its dimensions. This allows for sizes beyond the predefined options.

LANGUAGE: blade
CODE:
<x-filament::avatar
    src="https://filamentphp.com/dan.jpg"
    alt="Dan Harrin"
    size="w-12 h-12"
/>

----------------------------------------

TITLE: Testing Action Order in Filament
DESCRIPTION: Demonstrates how to test if Filament actions exist in the correct order using assertActionsExistInOrder().

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can have actions in order', function () {
    $invoice = Invoice::factory()->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->assertActionsExistInOrder(['send', 'export']);
});

----------------------------------------

TITLE: Initializing Select Column with Options in PHP
DESCRIPTION: This snippet demonstrates how to create a select column with predefined options for a status field. It uses the SelectColumn class from Filament's Tables module.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\SelectColumn;

SelectColumn::make('status')
    ->options([
        'draft' => 'Draft',
        'reviewing' => 'Reviewing',
        'published' => 'Published',
    ])

----------------------------------------

TITLE: Implementing SpatieTagsColumn with Type
DESCRIPTION: Implementation of SpatieTagsColumn with type specification for grouped tag collections.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\SpatieTagsColumn;

SpatieTagsColumn::make('tags')
    ->type('categories')

----------------------------------------

TITLE: Testing Action State in Filament
DESCRIPTION: Shows how to test if a Filament action is enabled or disabled using assertActionEnabled() and assertActionDisabled().

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can only print a sent invoice', function () {
    $invoice = Invoice::factory()->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->assertActionDisabled('send')
        ->assertActionEnabled('print');
});

----------------------------------------

TITLE: Implementing Record Interaction in Custom Filament Page
DESCRIPTION: Example of creating a custom page that interacts with a database record using the InteractsWithRecord trait

LANGUAGE: php
CODE:
use Filament\Resources\Pages\Page;
use Filament\Resources\Pages\Concerns\InteractsWithRecord;

class ManageUser extends Page
{
    use InteractsWithRecord;
    
    public function mount(int | string $record): void
    {
        $this->record = $this->resolveRecord($record);
    }

    // ...
}

----------------------------------------

TITLE: Adding Submit Button to Last Wizard Step in Filament PHP
DESCRIPTION: Shows how to add a submit button to the last step of the wizard using the submitAction() method. It includes examples with HTML string and Blade component rendering.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Wizard;
use Illuminate\Support\HtmlString;

Wizard::make([
    // ...
])->submitAction(view('order-form.submit-button'))

Wizard::make([
    // ...
])->submitAction(new HtmlString('<button type="submit">Submit</button>'))

----------------------------------------

TITLE: Creating an Aside Section Layout in Filament Forms
DESCRIPTION: Shows how to position the heading and description aside from the main content using the aside() method. This creates a two-column layout with description on the left and form components on the right.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;

Section::make('Rate limiting')
    ->description('Prevent abuse by limiting the number of requests per period')
    ->aside()
    ->schema([
        // ...
    ])

----------------------------------------

TITLE: Customizing the Apply Filters Action in Filament PHP
DESCRIPTION: Shows how to customize the "Apply" button for deferred filters using filtersApplyAction().

LANGUAGE: php
CODE:
use Filament\Tables\Actions\Action;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->filters([
            // ...
        ])
        ->filtersApplyAction(
            fn (Action $action) => $action
                ->link()
                ->label('Save filters to table'),
        );
}

----------------------------------------

TITLE: Configuring Tailwind CSS for Plugins in JavaScript
DESCRIPTION: Shows how to configure Tailwind CSS to include plugin views when building the CSS file. This ensures that utility classes used in plugin views are included in the final CSS output.

LANGUAGE: js
CODE:
export default {
    content: [
        './resources/**/*.blade.php',
        './vendor/filament/**/*.blade.php',
        './vendor/danharrin/filament-blog/resources/views/**/*.blade.php', // Your plugin's vendor directory
    ],
    // ...
}

----------------------------------------

TITLE: Adding Descriptions to Radio Options in PHP
DESCRIPTION: This code shows how to add descriptions to each option in a Radio input using the descriptions() method in Filament Forms.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Radio;

Radio::make('status')
    ->options([
        'draft' => 'Draft',
        'scheduled' => 'Scheduled',
        'published' => 'Published'
    ])
    ->descriptions([
        'draft' => 'Is not visible.',
        'scheduled' => 'Will be visible.',
        'published' => 'Is visible.'
    ])

----------------------------------------

TITLE: Setting Notification Duration in PHP and JavaScript
DESCRIPTION: Demonstrates how to set a custom duration for a notification in both PHP and JavaScript.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;

Notification::make()
    ->title('Saved successfully')
    ->success()
    ->duration(5000)
    ->send();

LANGUAGE: js
CODE:
new FilamentNotification()
    .title('Saved successfully')
    .success()
    .duration(5000)
    .send()

----------------------------------------

TITLE: Section Component with Header End Slot in Blade
DESCRIPTION: Shows how to add additional content at the end of the header using the headerEnd slot.

LANGUAGE: blade
CODE:
<x-filament::section>
    <x-slot name="heading">
        User details
    </x-slot>

    <x-slot name="headerEnd">
        {{-- Input to select the user's ID --}}
    </x-slot>

    {{-- Content --}}
</x-filament::section>

----------------------------------------

TITLE: Adding Custom Logo to Filament Panel in PHP
DESCRIPTION: This snippet shows various ways to add a custom logo to a Filament panel, including using an image URL, inline SVG, or a view file.

LANGUAGE: php
CODE:
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->brandLogo(fn () => view('filament.admin.logo'))
        ->brandLogoHeight('2rem');
}

----------------------------------------

TITLE: Grid Layout Configuration for Repeatable Entry
DESCRIPTION: Shows how to organize repeatable items into a responsive grid layout. The grid method accepts options for customizing column counts at different breakpoints.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\RepeatableEntry;

RepeatableEntry::make('comments')
    ->schema([
        // ...
    ])
    ->grid(2)

----------------------------------------

TITLE: Vite Configuration for Live Reload
DESCRIPTION: Vite configuration for automatic browser refresh when Livewire components are updated.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'vite'
import laravel, { refreshPaths } from 'laravel-vite-plugin'

export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/js/app.js'],
            refresh: [
                ...refreshPaths,
                'app/Livewire/**',
            ],
        }),
    ],
})

----------------------------------------

TITLE: Customizing Delete Action in Key-value Field in PHP
DESCRIPTION: Shows how to customize the delete action button in a key-value field by changing its icon using the deleteAction() method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\KeyValue;

KeyValue::make('meta')
    ->deleteAction(
        fn (Action $action) => $action->icon('heroicon-m-x-mark'),
    )

----------------------------------------

TITLE: Delete Action with Lifecycle Hooks in PHP
DESCRIPTION: Adding before and after hooks to DeleteAction for custom logic execution.

LANGUAGE: php
CODE:
DeleteAction::make()
    ->before(function () {
        // ...
    })
    ->after(function () {
        // ...
    })

----------------------------------------

TITLE: Positioning Query Builder Filter Above Table Content
DESCRIPTION: This code shows how to position the query builder filter above the table content to provide more space for deeply nested filters.

LANGUAGE: php
CODE:
use Filament\Tables\Enums\FiltersLayout;
use Filament\Tables\Filters\QueryBuilder;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->filters([
            QueryBuilder::make()
                ->constraints([
                    // ...
                ]),
        ], layout: FiltersLayout::AboveContent);
}

----------------------------------------

TITLE: Persisting Tab State in Filament Forms
DESCRIPTION: This code demonstrates how to persist the current tab state in the browser's local storage using the persistTab() method. It also shows how to set a unique ID for the tabs component to distinguish it from other sets of tabs.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Tabs;

Tabs::make('Tabs')
    ->tabs([
        // ...
    ])
    ->persistTab()
    ->id('order-tabs')

----------------------------------------

TITLE: Sending Broadcast Notifications with Laravel Notification Class in PHP
DESCRIPTION: This snippet illustrates how to send a broadcast notification using a traditional Laravel notification class. It implements the toBroadcast() method to return a BroadcastMessage containing the notification.

LANGUAGE: php
CODE:
use App\Models\User;
use Filament\Notifications\Notification;
use Illuminate\Notifications\Messages\BroadcastMessage;

public function toBroadcast(User $notifiable): BroadcastMessage
{
    return Notification::make()
        ->title('Saved successfully')
        ->getBroadcastMessage();
}

----------------------------------------

TITLE: Custom Boolean Icons Configuration
DESCRIPTION: Demonstrates how to customize icons for true and false states in a boolean icon column.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\IconColumn;

IconColumn::make('is_featured')
    ->boolean()
    ->trueIcon('heroicon-o-check-badge')
    ->falseIcon('heroicon-o-x-mark')

----------------------------------------

TITLE: Image Size Customization Options
DESCRIPTION: Demonstrates different methods to customize image dimensions including width, height, and square sizing.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\ImageColumn;

ImageColumn::make('header_image')
    ->width(200)

ImageColumn::make('header_image')
    ->height(50)

ImageColumn::make('author.avatar')
    ->size(40)

----------------------------------------

TITLE: Disabling Row Addition in Key-value Field in PHP
DESCRIPTION: Shows how to prevent users from adding new rows to a key-value field using the addable(false) method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\KeyValue;

KeyValue::make('meta')
    ->addable(false)

----------------------------------------

TITLE: Basic Color Picker Implementation in PHP
DESCRIPTION: Creates a basic color picker component using the default HEX format.

LANGUAGE: php
CODE:
use Filament\Forms\Components\ColorPicker;

ColorPicker::make('color')

----------------------------------------

TITLE: Creating a Custom List Page View in Filament
DESCRIPTION: This snippet demonstrates how to create a custom view for the List page in Filament. It shows how to override the static $view property and provides a basic example of a custom Blade view file.

LANGUAGE: php
CODE:
protected static string $view = 'filament.resources.users.pages.list-users';

LANGUAGE: blade
CODE:
<x-filament-panels::page>
    {{ $this->table }}
</x-filament-panels::page>

----------------------------------------

TITLE: Publishing Filament Config
DESCRIPTION: Commands to publish the new Filament v3 configuration file and remove the old tables config file. Part of the manual upgrade process.

LANGUAGE: bash
CODE:
php artisan vendor:publish --tag=filament-config --force
rm config/tables.php

----------------------------------------

TITLE: Size Customization for Badge Component
DESCRIPTION: Shows how to modify the badge size using the 'size' attribute with 'xs' and 'sm' options.

LANGUAGE: blade
CODE:
<x-filament::badge size="xs">
    New
</x-filament::badge>

<x-filament::badge size="sm">
    New
</x-filament::badge>

----------------------------------------

TITLE: Setting Default Field Value - PHP
DESCRIPTION: Shows how to set a default value for a form field.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;

TextInput::make('name')
    ->default('John')

----------------------------------------

TITLE: Closing Notifications with JavaScript
DESCRIPTION: Demonstrates how to close a notification programmatically using JavaScript and custom IDs.

LANGUAGE: html
CODE:
<button x-on:click="$dispatch('close-notification', { id: 'greeting' })" type="button">
    Close Notification
</button>

----------------------------------------

TITLE: Custom Dashboard Page Configuration in PHP
DESCRIPTION: Demonstrates how to create and configure a custom dashboard page with multiple instances and custom routing.

LANGUAGE: php
CODE:
<?php

namespace App\Filament\Pages;

class Dashboard extends \Filament\Pages\Dashboard
{
    protected static string $routePath = 'finance';
    protected static ?string $title = 'Finance dashboard';
    protected static ?int $navigationSort = 15;
}

----------------------------------------

TITLE: Enabling Database Notifications in Filament Panel
DESCRIPTION: PHP code to enable database notifications in a Filament panel configuration.

LANGUAGE: php
CODE:
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->databaseNotifications();
}

----------------------------------------

TITLE: Nullable Column Ternary Filter - PHP
DESCRIPTION: Implementation of a ternary filter for nullable columns, commonly used for verification status filtering.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\TernaryFilter;

TernaryFilter::make('email_verified_at')
    ->nullable()

----------------------------------------

TITLE: Enabling Row Reordering in Key-value Field in PHP
DESCRIPTION: Demonstrates how to allow users to reorder rows in a key-value field using the reorderable() method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\KeyValue;

KeyValue::make('meta')
    ->reorderable()

----------------------------------------

TITLE: Rendering Avatar Component in Blade
DESCRIPTION: Demonstrates how to use the Filament avatar component to display a circular image representing a user. The component requires a source URL for the image and an alt text description.

LANGUAGE: blade
CODE:
<x-filament::avatar
    src="https://filamentphp.com/dan.jpg"
    alt="Dan Harrin"
/>

----------------------------------------

TITLE: Creating Text Columns with Relationships in Filament
DESCRIPTION: Examples of creating text columns with direct and relationship-based data access

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('title')

TextColumn::make('author.name')

----------------------------------------

TITLE: Creating Split Layout with Stacked Columns
DESCRIPTION: Demonstrates how to create a split layout with multiple columns that stack responsively on mobile devices.

LANGUAGE: php
CODE:
use Filament\Support\Enums\FontWeight;
use Filament\Tables\Columns\Layout\Split;
use Filament\Tables\Columns\TextColumn;

Split::make([
    ImageColumn::make('avatar')
        ->circular(),
    TextColumn::make('name')
        ->weight(FontWeight::Bold)
        ->searchable()
        ->sortable(),
    TextColumn::make('email'),
])

----------------------------------------

TITLE: Configuring Multiple Panel Testing in Filament
DESCRIPTION: Shows how to set up testing for non-default Filament panels by manually setting the current panel in tests.

LANGUAGE: php
CODE:
use Filament\Facades\Filament;

Filament::setCurrentPanel(
    Filament::getPanel('app'), // Where `app` is the ID of the panel you want to test.
);

----------------------------------------

TITLE: Formatting Dates in a Text Column
DESCRIPTION: This example shows how to format date values in a text column. It uses the dateTime() method to apply PHP date formatting and the since() method for relative time display.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('created_at')
    ->dateTime()

TextColumn::make('created_at')
    ->since()
    ->dateTimeTooltip()

----------------------------------------

TITLE: Modal with Custom Icon and Color
DESCRIPTION: Modal implementation with custom icon and color configuration.

LANGUAGE: blade
CODE:
<x-filament::modal
    icon="heroicon-o-exclamation-triangle"
    icon-color="danger"
>
    <x-slot name="heading">
        Modal heading
    </x-slot>

    {{-- Modal content --}}
</x-filament::modal>

----------------------------------------

TITLE: Customizing Notification Icon and Color in PHP
DESCRIPTION: Illustrates how to set a custom icon and color for a Filament notification using PHP.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;

Notification::make()
    ->title('Saved successfully')
    ->icon('heroicon-o-document-text')
    ->iconColor('success')
    ->send();

----------------------------------------

TITLE: JavaScript-Controlled Modal in Blade
DESCRIPTION: Implementation of a modal that can be controlled via JavaScript events.

LANGUAGE: blade
CODE:
<x-filament::modal id="edit-user">
    {{-- Modal content --}}
</x-filament::modal>

LANGUAGE: php
CODE:
$this->dispatch('open-modal', id: 'edit-user');

----------------------------------------

TITLE: Configuring Custom Notification View in PHP
DESCRIPTION: Shows how to configure a custom view for rendering notifications using the Filament Notification API. This is done by calling the configureUsing method in a service provider's boot method.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;

Notification::configureUsing(function (Notification $notification): void {
    $notification->view('filament.notifications.notification');
});

----------------------------------------

TITLE: Testing Action Icons in Filament
DESCRIPTION: Demonstrates how to test if a Filament action button is showing the correct icon using assertActionHasIcon() and assertActionDoesNotHaveIcon().

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('when enabled the send button has correct icon', function () {
    $invoice = Invoice::factory()->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->assertActionEnabled('send')
        ->assertActionHasIcon('send', 'envelope-open')
        ->assertActionDoesNotHaveIcon('send', 'envelope');
});

----------------------------------------

TITLE: Basic Link Component Usage
DESCRIPTION: Demonstrates the basic implementation of a Filament link component with a route reference.

LANGUAGE: blade
CODE:
<x-filament::link :href="route('users.create')">
    New user
</x-filament::link>

----------------------------------------

TITLE: Testing Action Visibility in Filament
DESCRIPTION: Demonstrates how to test if a Filament action is visible or hidden using assertActionVisible() and assertActionHidden().

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can only print invoices', function () {
    $invoice = Invoice::factory()->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->assertActionHidden('send')
        ->assertActionVisible('print');
});

----------------------------------------

TITLE: Testing Action Existence in Filament
DESCRIPTION: Shows how to test if a Filament action exists or doesn't exist using assertActionExists() and assertActionDoesNotExist().

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can send but not unsend invoices', function () {
    $invoice = Invoice::factory()->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->assertActionExists('send')
        ->assertActionDoesNotExist('unsend');
});

----------------------------------------

TITLE: Modal with Footer Configuration
DESCRIPTION: Modal implementation with footer content and actions.

LANGUAGE: blade
CODE:
<x-filament::modal>
    {{-- Modal content --}}
    
    <x-slot name="footer">
        {{-- Modal footer content --}}
    </x-slot>
</x-filament::modal>

----------------------------------------

TITLE: Formatting Date and Time in Text Entry using PHP
DESCRIPTION: Demonstrates various methods to format date and time in a TextEntry component.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;

TextEntry::make('created_at')
    ->dateTime()

TextEntry::make('created_at')
    ->since()

TextEntry::make('created_at')
    ->since()
    ->dateTimeTooltip()

----------------------------------------

TITLE: Icon Position Customization in Badge
DESCRIPTION: Demonstrates how to modify the icon position within the badge using the 'icon-position' attribute.

LANGUAGE: blade
CODE:
<x-filament::badge
    icon="heroicon-m-sparkles"
    icon-position="after"
>
    New
</x-filament::badge>

----------------------------------------

TITLE: Adding Boolean Cast to Eloquent Model for Checkbox
DESCRIPTION: Shows how to add a boolean cast to an Eloquent model property, which is necessary when saving the checkbox value to the database.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    protected $casts = [
        'is_admin' => 'boolean',
    ];

    // ...
}

----------------------------------------

TITLE: Setting Field ID - PHP
DESCRIPTION: Demonstrates how to set a custom ID for a form field.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;

TextInput::make('name')
    ->id('name-field')

----------------------------------------

TITLE: Basic Tabs Implementation in Blade
DESCRIPTION: Demonstrates the basic structure of the tabs component with multiple tab items. Uses the x-filament::tabs component with a label attribute for accessibility.

LANGUAGE: blade
CODE:
<x-filament::tabs label="Content tabs">
    <x-filament::tabs.item>
        Tab 1
    </x-filament::tabs.item>

    <x-filament::tabs.item>
        Tab 2
    </x-filament::tabs.item>

    <x-filament::tabs.item>
        Tab 3
    </x-filament::tabs.item>
</x-filament::tabs>

----------------------------------------

TITLE: Creating Asynchronous Alpine.js Components in JavaScript
DESCRIPTION: Provides a template for creating asynchronous Alpine.js components that can be loaded on-demand. This approach allows for modular and efficient JavaScript code in Filament projects.

LANGUAGE: js
CODE:
// Import any external JavaScript libraries from NPM here.

export default function testComponent({
    state,
}) {
    return {
        state,
        
        // You can define any other Alpine.js properties here.

        init: function () {
            // Initialise the Alpine component here, if you need to.
        },
        
        // You can define any other Alpine.js functions here.
    }
}

----------------------------------------

TITLE: Multi-icon Wrapping Configuration
DESCRIPTION: Demonstrates how to enable wrapping for multiple icons in a single column.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\IconColumn;

IconColumn::make('icon')
    ->wrap()

----------------------------------------

TITLE: Installing Filament Widgets via Composer
DESCRIPTION: Command to install the Filament Widgets package using Composer package manager.

LANGUAGE: bash
CODE:
composer require filament/widgets:"^3.3" -W

----------------------------------------

TITLE: Collapsible Groups Implementation in Filament
DESCRIPTION: Sets up collapsible group functionality allowing rows to be collapsed under their group title.

LANGUAGE: php
CODE:
use Filament\Tables\Grouping\Group;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->groups([
            Group::make('author.name')
                ->collapsible(),
        ]);
}

----------------------------------------

TITLE: Triggering Error State for Filament Checkbox using Alpine.js
DESCRIPTION: This snippet demonstrates how to use Alpine.js to trigger the error state of a Filament checkbox component. It uses an Alpine.js expression to determine if the checkbox is valid based on an array of errors.

LANGUAGE: blade
CODE:
<div x-data="{ errors: ['isAdmin'] }">
    <x-filament::input.checkbox
        x-model="isAdmin"
        alpine-valid="! errors.includes('isAdmin')"
    />
</div>

----------------------------------------

TITLE: Accessing Record Data in Copyable Color Column in Filament Tables (PHP)
DESCRIPTION: This code shows how to access the entire table row data when customizing the copied text for a Color Column. It uses the $record parameter to access the model instance.

LANGUAGE: php
CODE:
use App\Models\Post;
use Filament\Tables\Columns\ColorColumn;

ColorColumn::make('color')
    ->copyable()
    ->copyableState(fn (Post $record): string => "Color: {$record->color}")

----------------------------------------

TITLE: Grouping Navigation Items in PHP
DESCRIPTION: Shows how to group navigation items by setting the $navigationGroup property.

LANGUAGE: php
CODE:
protected static ?string $navigationGroup = 'Settings';

----------------------------------------

TITLE: Modifying the Base Query for Filters in Filament PHP
DESCRIPTION: Demonstrates how to modify the base query directly for a filter using the baseQuery() method.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Filament\Tables\Filters\TernaryFilter;

TernaryFilter::make('trashed')
    // ...
    ->baseQuery(fn (Builder $query) => $query->withoutGlobalScopes([
        SoftDeletingScope::class,
    ]))

----------------------------------------

TITLE: Implementing Lifecycle Hooks in PHP
DESCRIPTION: Shows how to use lifecycle hooks to execute code at various points within a page's lifecycle, such as before a form is saved.

LANGUAGE: php
CODE:
use Filament\Resources\Pages\CreateRecord;

class CreateUser extends CreateRecord
{
    // ...

    protected function beforeFill(): void
    {
        // Runs before the form fields are populated with their default values.
    }

    protected function afterFill(): void
    {
        // Runs after the form fields are populated with their default values.
    }

    protected function beforeValidate(): void
    {
        // Runs before the form fields are validated when the form is submitted.
    }

    protected function afterValidate(): void
    {
        // Runs after the form fields are validated when the form is submitted.
    }

    protected function beforeCreate(): void
    {
        // Runs before the form fields are saved to the database.
    }

    protected function afterCreate(): void
    {
        // Runs after the form fields are saved to the database.
    }
}

----------------------------------------

TITLE: Creating an Anchor Link Icon Button in Blade
DESCRIPTION: Shows how to create an icon button that acts as an anchor link by changing the underlying HTML tag to <a> using the 'tag' attribute.

LANGUAGE: blade
CODE:
<x-filament::icon-button
    icon="heroicon-m-arrow-top-right-on-square"
    href="https://filamentphp.com"
    tag="a"
    label="Filament"
/>

----------------------------------------

TITLE: Dropdown Item as Anchor Link
DESCRIPTION: Demonstrates how to convert a dropdown item into an anchor link using the tag attribute.

LANGUAGE: blade
CODE:
<x-filament::dropdown.list.item
    href="https://filamentphp.com"
    tag="a"
>
    Filament
</x-filament::dropdown.list.item>

----------------------------------------

TITLE: Defining an Infolist Component Action in PHP
DESCRIPTION: This snippet demonstrates how to create an action for an infolist component, including customizing the trigger button and adding confirmation.

LANGUAGE: php
CODE:
use App\Actions\ResetStars;
use Filament\Infolists\Components\Actions\Action;

Action::make('resetStars')
    ->icon('heroicon-m-x-mark')
    ->color('danger')
    ->requiresConfirmation()
    ->action(function (ResetStars $resetStars) {
        $resetStars();
    })

----------------------------------------

TITLE: Configuring a Badge-style Text Entry with Dynamic Color in PHP
DESCRIPTION: Shows how to create a badge-style text entry with dynamic color based on the status value.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;

TextEntry::make('status')
    ->badge()
    ->color(fn (string $state): string => match ($state) {
        'draft' => 'gray',
        'reviewing' => 'warning',
        'published' => 'success',
        'rejected' => 'danger',
    })

----------------------------------------

TITLE: Accessing Page Table Data in a Filament Widget
DESCRIPTION: Example of how to access table data in a widget by using the ExposesTableToWidgets trait and InteractsWithPageTable trait.

LANGUAGE: php
CODE:
use Filament\Pages\Concerns\ExposesTableToWidgets;
use Filament\Resources\Pages\ListRecords;

class ListProducts extends ListRecords
{
    use ExposesTableToWidgets;

    // ...
}

LANGUAGE: php
CODE:
use App\Filament\Resources\ProductResource\Pages\ListProducts;
use Filament\Widgets\Concerns\InteractsWithPageTable;
use Filament\Widgets\Widget;

class ProductStats extends Widget
{
    use InteractsWithPageTable;

    protected function getTablePage(): string
    {
        return ListProducts::class;
    }

    // ...
}

----------------------------------------

TITLE: Registering Assets for a Filament Panel
DESCRIPTION: This code shows how to register custom CSS and JavaScript assets for a specific Filament panel.

LANGUAGE: php
CODE:
use Filament\Panel;
use Filament\Support\Assets\Css;
use Filament\Support\Assets\Js;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->assets([
            Css::make('custom-stylesheet', resource_path('css/custom.css')),
            Js::make('custom-script', resource_path('js/custom.js')),
        ]);
}

----------------------------------------

TITLE: Generating Custom Colors from Hex Code in Filament
DESCRIPTION: Demonstrates how to generate and register a custom color palette using a hex color code.

LANGUAGE: php
CODE:
use Filament\Support\Colors\Color;
use Filament\Support\Facades\FilamentColor;

FilamentColor::register([
    'danger' => Color::hex('#ff0000'),
]);

----------------------------------------

TITLE: Responsive Button Labeling in PHP
DESCRIPTION: Shows how to create a responsive button that changes from icon-only to labeled based on screen size.

LANGUAGE: php
CODE:
Action::make('edit')
    ->icon('heroicon-m-pencil-square')
    ->button()
    ->labeledFrom('md')

----------------------------------------

TITLE: Testing Action Labels in Filament
DESCRIPTION: Shows how to test if a Filament action has the correct label using assertActionHasLabel() and assertActionDoesNotHaveLabel().

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('send action has correct label', function () {
    $invoice = Invoice::factory()->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->assertActionHasLabel('send', 'Email Invoice')
        ->assertActionDoesNotHaveLabel('send', 'Send');
});

----------------------------------------

TITLE: Disabling Specific Toolbar Buttons in PHP
DESCRIPTION: Selective disabling of specific toolbar buttons in the Markdown editor

LANGUAGE: php
CODE:
use Filament\Forms\Components\MarkdownEditor;

MarkdownEditor::make('content')
    ->disableToolbarButtons([
        'blockquote',
        'strike',
    ])

----------------------------------------

TITLE: Implementing Filament traits and interfaces in a Livewire component
DESCRIPTION: This code shows how to implement the necessary traits and interfaces for using Filament's infolists and forms in a Livewire component.

LANGUAGE: php
CODE:
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Infolists\Concerns\InteractsWithInfolists;
use Filament\Infolists\Contracts\HasInfolists;
use Livewire\Component;

class ViewProduct extends Component implements HasForms, HasInfolists
{
    use InteractsWithInfolists;
    use InteractsWithForms;

    // ...
}

----------------------------------------

TITLE: Configuring Global Settings for Section Components in PHP
DESCRIPTION: Demonstrates how to configure global settings for all Section components using the configureUsing() method in a service provider.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Section;

Section::configureUsing(function (Section $section): void {
    $section
        ->columns(2);
});

----------------------------------------

TITLE: Using a Toggle Button for a Filter in Filament PHP
DESCRIPTION: Demonstrates how to replace the default checkbox with a toggle button for a filter.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\Filter;

Filter::make('is_featured')
    ->toggle()

----------------------------------------

TITLE: Creating a Section Without Header in Filament Forms
DESCRIPTION: Shows how to create a section without a header, which wraps components in a simple card without a title or description.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;

Section::make()
    ->schema([
        // ...
    ])

----------------------------------------

TITLE: Alpine.js Integration for Tab States
DESCRIPTION: Demonstrates how to manage tab states using Alpine.js with the alpine-active attribute for conditional activation.

LANGUAGE: blade
CODE:
<x-filament::tabs x-data="{ activeTab: 'tab1' }">
    <x-filament::tabs.item
        alpine-active="activeTab === 'tab1'"
        x-on:click="activeTab = 'tab1'"
    >
        Tab 1
    </x-filament::tabs.item>

    {{-- Other tabs --}}
</x-filament::tabs>

----------------------------------------

TITLE: Passing Properties to Filament Widgets on Resource Pages
DESCRIPTION: Demonstrates how to pass properties to widgets when registering them on resource pages and how to access these properties in the widget class.

LANGUAGE: php
CODE:
protected function getHeaderWidgets(): array
{
    return [
        CustomerResource\Widgets\CustomerOverview::make([
            'status' => 'active',
        ]),
    ];
}

LANGUAGE: php
CODE:
use Filament\Widgets\Widget;

class CustomerOverview extends Widget
{
    public string $status;

    // ...
}

----------------------------------------

TITLE: Creating a Basic Fieldset in Filament Forms
DESCRIPTION: This snippet demonstrates how to create a basic fieldset using the Fieldset component in Filament Forms. It groups fields together with a label and a border.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Fieldset;

Fieldset::make('Label')
    ->schema([
        // ...
    ])

----------------------------------------

TITLE: Custom Redirect After Save in PHP
DESCRIPTION: Methods to customize where the user is redirected after saving the form. Shows examples for redirecting to list page, view page or previous page.

LANGUAGE: php
CODE:
protected function getRedirectUrl(): string
{
    return $this->getResource()::getUrl('index');
}

----------------------------------------

TITLE: Custom Redirect After Save in PHP
DESCRIPTION: Methods to customize where the user is redirected after saving the form. Shows examples for redirecting to list page, view page or previous page.

LANGUAGE: php
CODE:
protected function getRedirectUrl(): string
{
    return $this->getResource()::getUrl('index');
}

----------------------------------------

TITLE: Displaying Filters in a Modal in Filament Tables
DESCRIPTION: This code shows how to render the filters in a modal instead of a dropdown in a Filament table by specifying the FiltersLayout::Modal option.

LANGUAGE: php
CODE:
use Filament\Tables\Enums\FiltersLayout;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->filters([
            // ...
        ], layout: FiltersLayout::Modal);
}

----------------------------------------

TITLE: Setting Default Theme Mode for Filament Panel in PHP
DESCRIPTION: This code demonstrates how to set the default theme mode (light or dark) for a Filament panel using the defaultThemeMode() method in the configuration.

LANGUAGE: php
CODE:
use Filament\Enums\ThemeMode;
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->defaultThemeMode(ThemeMode::Light);
}

----------------------------------------

TITLE: Custom Button Authorization in PHP
DESCRIPTION: Demonstrates how to implement conditional visibility for action buttons based on user permissions.

LANGUAGE: php
CODE:
Action::make('edit')
    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))
    ->visible(auth()->user()->can('update', $this->post))

----------------------------------------

TITLE: Using !important with Tailwind Classes for Filament Sidebar
DESCRIPTION: This snippet demonstrates how to apply Tailwind classes with the !important modifier to ensure styles override existing ones for the Filament sidebar.

LANGUAGE: css
CODE:
.fi-sidebar {
    @apply bg-gray-50 dark:bg-gray-950 !important;
}

----------------------------------------

TITLE: Tag Validation Rules Implementation
DESCRIPTION: Adds validation rules for individual tags using nested recursive rules.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TagsInput;

TagsInput::make('tags')
    ->nestedRecursiveRules([
        'min:3',
        'max:255',
    ])

----------------------------------------

TITLE: Injecting Column Instance in PHP Column Configuration
DESCRIPTION: This snippet shows how to inject the current column instance into a configuration function in PHP.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\Column;

function (Column $column) {
    // ...
}

----------------------------------------

TITLE: Configuring PostCSS
DESCRIPTION: PostCSS configuration file setup with Tailwind CSS, PostCSS Nesting, and Autoprefixer plugins.

LANGUAGE: javascript
CODE:
export default {
    plugins: {
        'tailwindcss/nesting': 'postcss-nesting',
        tailwindcss: {},
        autoprefixer: {},
    },
}

----------------------------------------

TITLE: Configuring Tenant Model in Filament Panel
DESCRIPTION: Setting up the tenant model (Team) in the Filament panel configuration.

LANGUAGE: php
CODE:
use App\Models\Team;
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->tenant(Team::class);
}

----------------------------------------

TITLE: Adding Key Placeholder in Key-value Field in PHP
DESCRIPTION: Shows how to add placeholders for key fields in a key-value component using the keyPlaceholder() method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\KeyValue;

KeyValue::make('meta')
    ->keyPlaceholder('Property name')

----------------------------------------

TITLE: Icon Size Customization
DESCRIPTION: Demonstrates how to adjust the icon size using predefined size constants.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\IconColumn;

IconColumn::make('status')
    ->size(IconColumn\IconColumnSize::Medium)

----------------------------------------

TITLE: Configuring Tailwind CSS for Filament
DESCRIPTION: Tailwind CSS configuration file setup with Filament preset and content paths.

LANGUAGE: javascript
CODE:
import preset from './vendor/filament/support/tailwind.config.preset'

export default {
    presets: [preset],
    content: [
        './app/Filament/**/*.php',
        './resources/views/filament/**/*.blade.php',
        './vendor/filament/**/*.blade.php',
    ],
}

----------------------------------------

TITLE: Custom Image Attributes Configuration
DESCRIPTION: Demonstrates how to add custom HTML attributes to images and access record data for dynamic attributes.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\ImageColumn;

ImageColumn::make('logo')
    ->extraImgAttributes(['loading' => 'lazy'])

----------------------------------------

TITLE: Implementing Toggle Column Lifecycle Hooks in PHP
DESCRIPTION: Implementation of lifecycle hooks for toggle columns, allowing code execution before and after the toggle state is updated in the database.

LANGUAGE: php
CODE:
ToggleColumn::make()
    ->beforeStateUpdated(function ($record, $state) {
        // Runs before the state is saved to the database.
    })
    ->afterStateUpdated(function ($record, $state) {
        // Runs after the state is saved to the database.
    })

----------------------------------------

TITLE: Creating Custom Constraint for Query Builder
DESCRIPTION: This example demonstrates how to create a custom constraint for the query builder, including setting a custom icon and label.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\QueryBuilder\Constraints\Constraint;
use Filament\Tables\Filters\QueryBuilder\Constraints\Operators\IsFilledOperator;

Constraint::make('subscribed')
    ->label('Subscribed to updates')
    ->icon('heroicon-m-bell')
    ->operators([
        // ...
        IsFilledOperator::class,
    ]),

----------------------------------------

TITLE: Error State Handling with Alpine.js
DESCRIPTION: Demonstrates how to trigger the error state using Alpine.js expressions.

LANGUAGE: blade
CODE:
<div x-data="{ errors: ['name'] }">
    <x-filament::input.wrapper alpine-valid="! errors.includes('name')">
        <x-filament::input
            type="text"
            wire:model="name"
        />
    </x-filament::input.wrapper>
</div>

----------------------------------------

TITLE: Validation Rules for Text Input Column in PHP
DESCRIPTION: Demonstrates how to add Laravel validation rules to a text input column.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextInputColumn;

TextInputColumn::make('name')
    ->rules(['required', 'max:255'])

----------------------------------------

TITLE: Adding Custom Actions to Create Page in PHP
DESCRIPTION: Demonstrates how to add custom actions to the header and form of the Create page.

LANGUAGE: php
CODE:
use App\Filament\Imports\UserImporter;
use Filament\Actions;
use Filament\Resources\Pages\CreateRecord;

class CreateUser extends CreateRecord
{
    // ...

    protected function getHeaderActions(): array
    {
        return [
            Actions\ImportAction::make()
                ->importer(UserImporter::class),
        ];
    }

    protected function getFormActions(): array
    {
        return [
            ...parent::getFormActions(),
            Action::make('close')->action('createAndClose'),
        ];
    }

    public function createAndClose(): void
    {
        // ...
    }
}

----------------------------------------

TITLE: Sending Database Notifications Using notify() Method
DESCRIPTION: PHP code showing how to send a database notification using the notify() method on a recipient.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;

$recipient = auth()->user();

$recipient->notify(
    Notification::make()
        ->title('Saved successfully')
        ->toDatabase(),
);

----------------------------------------

TITLE: Disabling Broadcasting for a Filament Panel
DESCRIPTION: This code shows how to disable automatic Laravel Echo connection for a specific Filament panel.

LANGUAGE: php
CODE:
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->broadcasting(false);
}

----------------------------------------

TITLE: Adding Declined Validation to Checkbox in Filament Forms
DESCRIPTION: Shows how to add validation to ensure that a checkbox is not checked using the declined() method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Checkbox;

Checkbox::make('is_under_18')
    ->declined()

----------------------------------------

TITLE: Adding Validation Rules to Select Column in PHP
DESCRIPTION: This code shows how to add Laravel validation rules to a select column. It applies the 'required' rule to ensure the status field is not left empty.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\SelectColumn;

SelectColumn::make('status')
    ->options([
        'draft' => 'Draft',
        'reviewing' => 'Reviewing',
        'published' => 'Published',
    ])
    ->rules(['required'])

----------------------------------------

TITLE: Enabling SPA Mode in a Filament Panel
DESCRIPTION: This code shows how to enable Single Page Application (SPA) mode for a Filament panel using the spa() method.

LANGUAGE: php
CODE:
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->spa();
}

----------------------------------------

TITLE: Circular Image Configuration
DESCRIPTION: Creating fully rounded images suitable for avatars.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\ImageEntry;

ImageEntry::make('author.avatar')
    ->height(40)
    ->circular()

----------------------------------------

TITLE: Boolean Icon Entry in PHP
DESCRIPTION: Demonstrates how to create an icon entry that displays icons based on boolean values.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\IconEntry;

IconEntry::make('is_featured')
    ->boolean()

----------------------------------------

TITLE: Basic Markdown Editor Implementation in PHP
DESCRIPTION: Simple initialization of a Markdown editor component for content editing

LANGUAGE: php
CODE:
use Filament\Forms\Components\MarkdownEditor;

MarkdownEditor::make('content')

----------------------------------------

TITLE: Using Enum Labels with Form Fields
DESCRIPTION: Demonstrates how to use enums with HasLabel interface in various Filament form components and table elements.

LANGUAGE: php
CODE:
use Filament\Forms\Components\CheckboxList;
use Filament\Forms\Components\Radio;
use Filament\Forms\Components\Select;
use Filament\Tables\Columns\SelectColumn;
use Filament\Tables\Filters\SelectFilter;

Select::make('status')
    ->options(Status::class)

CheckboxList::make('status')
    ->options(Status::class)

Radio::make('status')
    ->options(Status::class)

SelectColumn::make('status')
    ->options(Status::class)

SelectFilter::make('status')
    ->options(Status::class)

----------------------------------------

TITLE: Basic Restore Action Implementation in PHP
DESCRIPTION: Basic implementation of RestoreAction for restoring a single soft-deleted record.

LANGUAGE: php
CODE:
use Filament\Actions\RestoreAction;

RestoreAction::make()
    ->record($this->post)

----------------------------------------

TITLE: Rendering Livewire Component (Blade)
DESCRIPTION: Basic Blade syntax for rendering a Livewire component on a page.

LANGUAGE: blade
CODE:
@livewire('manage-product')

----------------------------------------

TITLE: Configuring Basic Button Trigger in PHP
DESCRIPTION: Shows how to create a basic button-style trigger for an action using the button() method.

LANGUAGE: php
CODE:
Action::make('edit')
    ->button()

----------------------------------------

TITLE: Configuring Number Formatting in Text Entry using PHP
DESCRIPTION: Shows how to format numbers in a TextEntry component, including decimal places and locale settings.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;

TextEntry::make('stock')
    ->numeric()

TextEntry::make('stock')
    ->numeric(decimalPlaces: 0)

TextEntry::make('stock')
    ->numeric(locale: 'nl')

----------------------------------------

TITLE: Customizing Navigation Groups in PHP
DESCRIPTION: Demonstrates how to customize navigation groups using the navigationGroups() method in the panel configuration.

LANGUAGE: php
CODE:
use Filament\Navigation\NavigationGroup;
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->navigationGroups([
            NavigationGroup::make()
                 ->label('Shop')
                 ->icon('heroicon-o-shopping-cart'),
            NavigationGroup::make()
                ->label('Blog')
                ->icon('heroicon-o-pencil'),
            NavigationGroup::make()
                ->label(fn (): string => __('navigation.settings'))
                ->icon('heroicon-o-cog-6-tooth')
                ->collapsed(),
        ]);
}

----------------------------------------

TITLE: Injecting Laravel Container Dependencies in PHP Column Configuration
DESCRIPTION: This snippet demonstrates how to inject dependencies from Laravel's container alongside utilities in a column configuration function in PHP.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;

function (Request $request, Model $record) {
    // ...
}

----------------------------------------

TITLE: Stacked Toggle Layout
DESCRIPTION: Configuration for stacked layout mode where the label appears above the toggle.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Toggle;

Toggle::make('is_admin')
    ->inline(false)

----------------------------------------

TITLE: Custom HTML Input Type in Text Input Column
DESCRIPTION: Shows how to customize the HTML input type for a text input column, using color picker as an example.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextInputColumn;

TextInputColumn::make('background_color')->type('color')

----------------------------------------

TITLE: Testing Table Column Rendering in PHP
DESCRIPTION: Test to ensure a specific column is rendered in the table using assertCanRenderTableColumn() helper.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can render post titles', function () {
    Post::factory()->count(10)->create();

    livewire(PostResource\Pages\ListPosts::class)
        ->assertCanRenderTableColumn('title');
});

----------------------------------------

TITLE: Creating a Radio Input with Options in PHP
DESCRIPTION: This snippet demonstrates how to create a basic radio input with predefined options using the Radio component in Filament Forms.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Radio;

Radio::make('status')
    ->options([
        'draft' => 'Draft',
        'scheduled' => 'Scheduled',
        'published' => 'Published'
    ])

----------------------------------------

TITLE: Disabling Polling for Database Notifications
DESCRIPTION: PHP code to disable polling for new database notifications.

LANGUAGE: php
CODE:
use Filament\Notifications\Livewire\DatabaseNotifications;

DatabaseNotifications::pollingInterval(null);

----------------------------------------

TITLE: Installing Filament Form Builder
DESCRIPTION: Command to install the Form Builder package which enables creation of interactive forms in Livewire components with 25+ out-of-the-box components.

LANGUAGE: bash
CODE:
composer require filament/forms

----------------------------------------

TITLE: Injecting Modal Form Data in PHP Action Configuration
DESCRIPTION: This code shows how to access the current modal form data within a Filament action configuration function. It's useful for dynamically adjusting action behavior based on form input.

LANGUAGE: php
CODE:
function (array $data) {
    // ...
}

----------------------------------------

TITLE: Implementing Badge-Style Trigger in PHP
DESCRIPTION: Demonstrates creating a badge-style trigger button using the badge() method.

LANGUAGE: php
CODE:
Action::make('edit')
    ->badge()

----------------------------------------

TITLE: Customizing Global Search Result URLs in PHP
DESCRIPTION: Shows how to customize the URL that global search results link to by overriding the getGlobalSearchResultUrl() method. This allows you to return a route of your choice.

LANGUAGE: php
CODE:
public static function getGlobalSearchResultUrl(Model $record): string
{
    return UserResource::getUrl('edit', ['record' => $record]);
}

----------------------------------------

TITLE: Setting Icon Button Sizes in Blade
DESCRIPTION: Demonstrates how to set different sizes for icon buttons using the 'size' attribute. Options include 'xs', 'sm', 'lg', and 'xl'.

LANGUAGE: blade
CODE:
<x-filament::icon-button
    icon="heroicon-m-plus"
    size="xs"
    label="New label"
/>

<x-filament::icon-button
    icon="heroicon-m-plus"
    size="sm"
    label="New label"
/>

<x-filament::icon-button
    icon="heroicon-s-plus"
    size="lg"
    label="New label"
/>

<x-filament::icon-button
    icon="heroicon-s-plus"
    size="xl"
    label="New label"
/>

----------------------------------------

TITLE: Toggle with Accepted Validation
DESCRIPTION: Implementation of a toggle with validation requiring the toggle to be in the 'on' state.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Toggle;

Toggle::make('terms_of_service')
    ->accepted()

----------------------------------------

TITLE: Positioning Radio Options Inline with Label in PHP
DESCRIPTION: This code demonstrates how to display radio options inline with the label using the inline() method in Filament Forms.

LANGUAGE: php
CODE:
Radio::make('feedback')
    ->label('Like this post?')
    ->boolean()
    ->inline()

----------------------------------------

TITLE: Testing Table Searching in PHP
DESCRIPTION: Test to verify table searching functionality using searchTable() and assertCanSeeTableRecords() helpers.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can search posts by title', function () {
    $posts = Post::factory()->count(10)->create();

    $title = $posts->first()->title;

    livewire(PostResource\Pages\ListPosts::class)
        ->searchTable($title)
        ->assertCanSeeTableRecords($posts->where('title', $title))
        ->assertCanNotSeeTableRecords($posts->where('title', '!=', $title));
});

----------------------------------------

TITLE: Resource Page Configuration Example
DESCRIPTION: Example of required resource page configuration in Filament v3

LANGUAGE: php
CODE:
protected static string $resource = PostResource::class;

----------------------------------------

TITLE: Generating Custom Colors from RGB Values in Filament
DESCRIPTION: Shows how to generate and register a custom color palette using RGB color values.

LANGUAGE: php
CODE:
use Filament\Support\Colors\Color;
use Filament\Support\Facades\FilamentColor;

FilamentColor::register([
    'danger' => Color::rgb('rgb(255, 0, 0)'),
]);

----------------------------------------

TITLE: Chart Data Generation with Laravel Trend - PHP
DESCRIPTION: Example of generating chart data from an Eloquent model using the flowframe/laravel-trend package

LANGUAGE: php
CODE:
use Flowframe\Trend\Trend;
use Flowframe\Trend\TrendValue;

protected function getData(): array
{
    $data = Trend::model(BlogPost::class)
        ->between(
            start: now()->startOfYear(),
            end: now()->endOfYear(),
        )
        ->perMonth()
        ->count();

    return [
        'datasets' => [
            [
                'label' => 'Blog posts',
                'data' => $data->map(fn (TrendValue $value) => $value->aggregate),
            ],
        ],
        'labels' => $data->map(fn (TrendValue $value) => $value->date),
    ];
}

----------------------------------------

TITLE: Tailwind CSS Base Styles
DESCRIPTION: CSS configuration including Tailwind's base layers.

LANGUAGE: css
CODE:
@tailwind base;
@tailwind components;
@tailwind utilities;
@tailwind variants;

----------------------------------------

TITLE: Applying Tailwind Classes to Filament Sidebar
DESCRIPTION: This example shows how to use Tailwind's @apply directive to customize the Filament sidebar background color for both light and dark modes.

LANGUAGE: css
CODE:
.fi-sidebar {
    @apply bg-gray-50 dark:bg-gray-950;
}

----------------------------------------

TITLE: Positioning Filters into Grid Columns in Filament Tables
DESCRIPTION: This snippet demonstrates how to change the number of columns that filters may occupy in a Filament table using the filtersFormColumns() method.

LANGUAGE: php
CODE:
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->filters([
            // ...
        ])
        ->filtersFormColumns(3);
}

----------------------------------------

TITLE: Custom Split Keys Configuration
DESCRIPTION: Defines custom keyboard keys for creating new tags in the input.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TagsInput;

TagsInput::make('tags')
    ->splitKeys(['Tab', ' '])

----------------------------------------

TITLE: Creating Custom Notification Class in PHP
DESCRIPTION: Demonstrates how to create a custom Notification class that extends the base Filament Notification class. It adds a new 'size' property and overrides necessary methods to support the new property.

LANGUAGE: php
CODE:
<?php

namespace App\Notifications;

use Filament\Notifications\Notification as BaseNotification;

class Notification extends BaseNotification
{
    protected string $size = 'md';

    public function toArray(): array
    {
        return [
            ...parent::toArray(),
            'size' => $this->getSize(),
        ];
    }

    public static function fromArray(array $data): static
    {
        return parent::fromArray($data)->size($data['size']);
    }

    public function size(string $size): static
    {
        $this->size = $size;

        return $this;
    }

    public function getSize(): string
    {
        return $this->size;
    }
}

----------------------------------------

TITLE: Installing Tailwind CSS and Required Plugins
DESCRIPTION: npm command to install Tailwind CSS v3 along with necessary plugins and tools for use with Filament.

LANGUAGE: bash
CODE:
npm install tailwindcss@3 @tailwindcss/forms @tailwindcss/typography postcss postcss-nesting autoprefixer --save-dev

----------------------------------------

TITLE: Rendering Table in Blade View
DESCRIPTION: Blade template code to render the configured table within the Livewire component view.

LANGUAGE: blade
CODE:
<div>
    {{ $this->table }}
</div>

----------------------------------------

TITLE: Basic Replicate Action Implementation in PHP
DESCRIPTION: Basic usage of ReplicateAction to duplicate a record using Filament's action system.

LANGUAGE: php
CODE:
use Filament\Actions\ReplicateAction;

ReplicateAction::make()
    ->record($this->post)

----------------------------------------

TITLE: Resizing a Textarea in PHP with Filament
DESCRIPTION: Shows how to customize the size of a textarea by specifying the number of rows and columns.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Textarea;

Textarea::make('description')
    ->rows(10)
    ->cols(20)

----------------------------------------

TITLE: Testing Table Actions in PHP
DESCRIPTION: Test to verify table action functionality using callTableAction() helper.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can delete posts', function () {
    $post = Post::factory()->create();

    livewire(PostResource\Pages\ListPosts::class)
        ->callTableAction(DeleteAction::class, $post);

    $this->assertModelMissing($post);
});

----------------------------------------

TITLE: Adding Icons to Filter Tabs in Filament List Page
DESCRIPTION: This snippet demonstrates how to add icons to filter tabs in a Filament List page. It uses the icon() method to set an icon and the iconPosition() method to customize the icon's position relative to the label.

LANGUAGE: php
CODE:
use use Filament\Resources\Components\Tab;

Tab::make()
    ->icon('heroicon-m-user-group')

LANGUAGE: php
CODE:
use Filament\Support\Enums\IconPosition;

Tab::make()
    ->icon('heroicon-m-user-group')
    ->iconPosition(IconPosition::After)

----------------------------------------

TITLE: Asserting Notifications Using Filament's Notification Class in PHP
DESCRIPTION: This code shows how to assert that a notification was sent using Filament's Notification class. It's a static method call that can be used in testing environments.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;

it('sends a notification', function () {
    Notification::assertNotified();
});

----------------------------------------

TITLE: Vite Configuration for Live Reload
DESCRIPTION: Vite configuration setup for automatic browser refresh when Livewire components update.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'vite'
import laravel, { refreshPaths } from 'laravel-vite-plugin'

export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/js/app.js'],
            refresh: [
                ...refreshPaths,
                'app/Livewire/**',
            ],
        }),
    ],
})

----------------------------------------

TITLE: Creating a Basic Action Group in PHP
DESCRIPTION: Demonstrates how to create a simple ActionGroup object containing multiple actions in Filament.

LANGUAGE: php
CODE:
ActionGroup::make([
    Action::make('view'),
    Action::make('edit'),
    Action::make('delete'),
])

----------------------------------------

TITLE: Creating Fieldset Group with Label in Blade
DESCRIPTION: Demonstrates how to create a fieldset component that groups form fields together with an optional label slot. The fieldset provides semantic grouping of related form elements.

LANGUAGE: blade
CODE:
<x-filament::fieldset>
    <x-slot name="label">
        Address
    </x-slot>
    
    {{-- Form fields --}}
</x-filament::fieldset>

----------------------------------------

TITLE: File Existence Check Configuration
DESCRIPTION: Disabling automatic file existence checking for performance optimization.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\ImageEntry;

ImageEntry::make('attachment')
    ->checkFileExistence(false)

----------------------------------------

TITLE: Creating Notifications Trigger Button in Blade
DESCRIPTION: Blade component for a button that triggers the notifications modal, displaying the count of unread notifications.

LANGUAGE: blade
CODE:
<button type="button">
    Notifications ({{ $unreadNotificationsCount }} unread)
</button>

----------------------------------------

TITLE: Adding Favicon to Filament Panel in PHP
DESCRIPTION: This PHP code shows how to add a favicon to a Filament panel by specifying the public URL of the favicon image in the panel configuration.

LANGUAGE: php
CODE:
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->favicon(asset('images/favicon.png'));
}

----------------------------------------

TITLE: Implementing Replication Lifecycle Hooks
DESCRIPTION: Using lifecycle hooks to execute code at different stages of the replication process.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;

ReplicateAction::make()
    ->before(function () {
        // Runs before the record has been replicated.
    })
    ->beforeReplicaSaved(function (Model $replica): void {
        // Runs after the record has been replicated but before it is saved to the database.
    })
    ->after(function (Model $replica): void {
        // Runs after the replica has been saved to the database.
    })

----------------------------------------

TITLE: Boolean Toggle Buttons
DESCRIPTION: Creates a simple boolean toggle button group with Yes/No options.

LANGUAGE: php
CODE:
ToggleButtons::make('feedback')
    ->label('Like this post?')
    ->boolean()

----------------------------------------

TITLE: Using Filament's Testing Helper Function for Notifications in PHP
DESCRIPTION: This snippet demonstrates the use of Filament's assertNotified() helper function for testing notifications. It's a standalone function that can be imported and used in tests.

LANGUAGE: php
CODE:
use function Filament\Notifications\Testing\assertNotified;

it('sends a notification', function () {
    assertNotified();
});

----------------------------------------

TITLE: Implementing Custom Notification Blade View
DESCRIPTION: Shows a more detailed example of a custom Blade view for Filament notifications. It includes styling, transitions, and accessing various properties of the notification object.

LANGUAGE: blade
CODE:
<x-filament-notifications::notification
    :notification="$notification"
    class="flex w-80 rounded-lg transition duration-200"
    x-transition:enter-start="opacity-0"
    x-transition:leave-end="opacity-0"
>
    <h4>
        {{ $getTitle() }}
    </h4>

    <p>
        {{ $getDate() }}
    </p>

    <p>
        {{ $getBody() }}
    </p>

    <span x-on:click="close">
        Close
    </span>
</x-filament-notifications::notification>

----------------------------------------

TITLE: Implementing Wizard Step Lifecycle Hooks in Filament PHP
DESCRIPTION: Demonstrates how to use afterValidation() and beforeValidation() hooks in wizard steps, including preventing the next step from loading by throwing a Halt exception.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Wizard;
use Filament\Support\Exceptions\Halt;

Wizard\Step::make('Order')
    ->afterValidation(function () {
        // ...
    })
    ->beforeValidation(function () {
        // ...
    })
    ->schema([
        // ...
    ]),

Wizard\Step::make('Order')
    ->afterValidation(function () {
        // ...

        if (true) {
            throw new Halt();
        }
    })
    ->schema([
        // ...
    ]),

----------------------------------------

TITLE: Configuring Custom User Avatars in Filament
DESCRIPTION: Demonstrates implementation of the HasAvatar contract to customize how Filament retrieves user avatar URLs.

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Filament\Models\Contracts\FilamentUser;
use Filament\Models\Contracts\HasAvatar;
use Illuminate\Foundation\Auth\User as Authenticatable;

class User extends Authenticatable implements FilamentUser, HasAvatar
{
    // ...

    public function getFilamentAvatarUrl(): ?string
    {
        return $this->avatar_url;
    }
}

----------------------------------------

TITLE: Basic Image Column Implementation in PHP
DESCRIPTION: Creates a basic image column in a Filament table that displays images from a specified database field.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\ImageColumn;

ImageColumn::make('avatar')

----------------------------------------

TITLE: Installing Filament Tables Package with Composer
DESCRIPTION: Command to install the Filament Table Builder package using Composer.

LANGUAGE: bash
CODE:
composer require filament/tables:"^3.3" -W

----------------------------------------

TITLE: Creating a Stacked Checkbox in Filament Forms
DESCRIPTION: Shows how to create a checkbox with a stacked layout, where the label is positioned above the checkbox.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Checkbox;

Checkbox::make('is_admin')->inline(false)

----------------------------------------

TITLE: Customizing Add Action Label for Repeater in PHP
DESCRIPTION: Shows how to customize the label text for the button that adds a new repeater item.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Repeater;

Repeater::make('members')
    ->schema([
        // ...
    ])
    ->addActionLabel('Add member')

----------------------------------------

TITLE: Implementing Reactive Text Input on Blur in PHP
DESCRIPTION: Demonstrates how to create a text input field that updates the form when it loses focus.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;

TextInput::make('username')
    ->live(onBlur: true)

----------------------------------------

TITLE: Basic Field Validation - Active URL
DESCRIPTION: Validates that a field has a valid A or AAAA DNS record

LANGUAGE: php
CODE:
Field::make('name')->activeUrl()

----------------------------------------

TITLE: Table Row Replication Implementation
DESCRIPTION: Implementation of ReplicateAction within a table context using Filament's table actions.

LANGUAGE: php
CODE:
use Filament\Tables\Actions\ReplicateAction;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->actions([
            ReplicateAction::make(),
            // ...
        ]);
}

----------------------------------------

TITLE: Implementing HasTenants Interface for User Model
DESCRIPTION: Example of implementing the HasTenants interface on the User model to define tenant relationships and access.

LANGUAGE: php
CODE:
use Filament\Models\Contracts\FilamentUser;
use Filament\Models\Contracts\HasTenants;
use Filament\Panel;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Support\Collection;

class User extends Authenticatable implements FilamentUser, HasTenants
{
    public function teams(): BelongsToMany
    {
        return $this->belongsToMany(Team::class);
    }

    public function getTenants(Panel $panel): Collection
    {
        return $this->teams;
    }

    public function canAccessTenant(Model $tenant): bool
    {
        return $this->teams()->whereKey($tenant)->exists();
    }
}

----------------------------------------

TITLE: Colored Toggle Buttons Implementation
DESCRIPTION: Demonstrates how to add different colors to toggle buttons options using the colors() method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\ToggleButtons;

ToggleButtons::make('status')
    ->options([
        'draft' => 'Draft',
        'scheduled' => 'Scheduled',
        'published' => 'Published'
    ])
    ->colors([
        'draft' => 'info',
        'scheduled' => 'warning',
        'published' => 'success',
    ])

----------------------------------------

TITLE: Testing Specific Notification Title with Livewire in PHP
DESCRIPTION: This code shows how to test for a specific notification title using Livewire and Pest. It passes the expected notification title to the assertNotified() method.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;
use function Pest\Livewire\livewire;

it('sends a notification', function () {
    livewire(CreatePost::class)
        ->assertNotified('Unable to create post');
});

----------------------------------------

TITLE: Testing Pre-filled Data in Filament Actions
DESCRIPTION: Demonstrates how to check if a Filament action is pre-filled with data using assertActionDataSet(). The example tests if the 'send' action is pre-filled with the primary contact's email.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can send invoices to the primary contact by default', function () {
    $invoice = Invoice::factory()->create();
    $recipientEmail = $invoice->company->primaryContact->email;

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->mountAction('send')
        ->assertActionDataSet([
            'email' => $recipientEmail,
        ])
        ->callMountedAction()
        ->assertHasNoActionErrors();

    expect($invoice->refresh())
        ->isSent()->toBeTrue()
        ->recipient_email->toBe($recipientEmail);
});

----------------------------------------

TITLE: Basic Force-Delete Action Implementation in PHP
DESCRIPTION: Shows how to implement a basic force-delete action for a single record using Filament's ForceDeleteAction class.

LANGUAGE: php
CODE:
use Filament\Actions\ForceDeleteAction;

ForceDeleteAction::make()
    ->record($this->post)

----------------------------------------

TITLE: Toggle with Custom Colors
DESCRIPTION: Customization of toggle colors for on and off states using predefined color options.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Toggle;

Toggle::make('is_admin')
    ->onColor('success')
    ->offColor('danger')

----------------------------------------

TITLE: Custom Avatar Provider Implementation
DESCRIPTION: Example of creating a custom avatar provider using BoringAvatars.com service instead of the default UI Avatars.

LANGUAGE: php
CODE:
<?php

namespace App\Filament\AvatarProviders;

use Filament\AvatarProviders\Contracts;
use Filament\Facades\Filament;
use Illuminate\Contracts\Auth\Authenticatable;
use Illuminate\Database\Eloquent\Model;

class BoringAvatarsProvider implements Contracts\AvatarProvider
{
    public function get(Model | Authenticatable $record): string
    {
        $name = str(Filament::getNameForDefaultAvatar($record))
            ->trim()
            ->explode(' ')
            ->map(fn (string $segment): string => filled($segment) ? mb_substr($segment, 0, 1) : '')
            ->join(' ');

        return 'https://source.boringavatars.com/beam/120/' . urlencode($name);
    }
}

----------------------------------------

TITLE: Using Custom Empty State View in Filament Table
DESCRIPTION: Shows how to use a completely custom view template for the empty state display using the emptyState() method.

LANGUAGE: php
CODE:
use Filament\Tables\Actions\Action;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->emptyState(view('tables.posts.empty-state'));
}

----------------------------------------

TITLE: Creating a Grid Layout Component in PHP
DESCRIPTION: Demonstrates how to create a Grid layout component using the make() method and define its schema.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Grid;

Grid::make(2)
    ->schema([
        // ...
    ])

----------------------------------------

TITLE: Creating Basic Fieldset in Filament PHP
DESCRIPTION: Demonstrates how to create a basic fieldset component with a label and schema. Fieldsets allow grouping of entries with a border and label, using a default two-column grid layout.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Fieldset;

Fieldset::make('Label')
    ->schema([
        // ...
    ])

----------------------------------------

TITLE: Tag Color Customization
DESCRIPTION: Changes the visual color of tags in the input field.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TagsInput;

TagsInput::make('tags')
    ->color('danger')

----------------------------------------

TITLE: Creating an Observer for Automatic Team Assignment in Laravel
DESCRIPTION: Example of using an observer to automatically set the team_id when creating a new Post record.

LANGUAGE: php
CODE:
class PostObserver
{
    public function creating(Post $post): void
    {
        if (auth()->hasUser()) {
            $post->team_id = auth()->user()->team_id;
            // or with a `team` relationship defined:
            $post->team()->associate(auth()->user()->team);
        }
    }
}

----------------------------------------

TITLE: Configuring List Display in Text Entry using PHP
DESCRIPTION: Demonstrates how to display multiple values as a list in a TextEntry component, including bullet points and item limitations.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;

TextEntry::make('authors.name')
    ->listWithLineBreaks()

TextEntry::make('authors.name')
    ->listWithLineBreaks()
    ->bulleted()

TextEntry::make('authors.name')
    ->listWithLineBreaks()
    ->limitList(3)
    ->expandableLimitedList()

TextEntry::make('tags')
    ->badge()
    ->separator(',')

----------------------------------------

TITLE: Testing Resource List Page Rendering
DESCRIPTION: Tests if the List page of a resource renders successfully by checking the response status.

LANGUAGE: php
CODE:
it('can render page', function () {
    $this->get(PostResource::getUrl('index'))->assertSuccessful();
});

----------------------------------------

TITLE: Laravel Scout Integration
DESCRIPTION: Example of integrating Laravel Scout search functionality with Filament tables.

LANGUAGE: php
CODE:
use App\Models\Post;
use Illuminate\Database\Eloquent\Builder;

protected function applySearchToTableQuery(Builder $query): Builder
{
    $this->applyColumnSearchesToTableQuery($query);
    
    if (filled($search = $this->getTableSearch())) {
        $query->whereIn('id', Post::search($search)->keys());
    }

    return $query;
}

----------------------------------------

TITLE: Eloquent Boolean Casting Configuration
DESCRIPTION: Configuration for proper boolean casting in Eloquent models when using toggle components.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    protected $casts = [
        'is_admin' => 'boolean',
    ];

    // ...
}

----------------------------------------

TITLE: Adding Actions to Global Search Results in PHP
DESCRIPTION: Illustrates how to add action buttons to global search results. Actions can open a URL or dispatch a Livewire event. This is done by overriding the getGlobalSearchResultActions() method.

LANGUAGE: php
CODE:
use Filament\GlobalSearch\Actions\Action;

public static function getGlobalSearchResultActions(Model $record): array
{
    return [
        Action::make('edit')
            ->url(static::getUrl('edit', ['record' => $record])),
    ];
}

----------------------------------------

TITLE: Implementing View Action in Table
DESCRIPTION: Adding a view action to the resource table for modal viewing

LANGUAGE: php
CODE:
use Filament\Tables;
use Filament\Tables\Table;

public static function table(Table $table): Table
{
    return $table
        ->columns([
            // ...
        ])
        ->actions([
            Tables\Actions\ViewAction::make(),
            // ...
        ]);
}

----------------------------------------

TITLE: Setting Empty State Description in Filament Table
DESCRIPTION: Shows how to add a custom description text to the empty state display using the emptyStateDescription() method.

LANGUAGE: php
CODE:
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->emptyStateDescription('Once you write your first post, it will appear here.');
}

----------------------------------------

TITLE: Custom Notification Title for Force-Delete in PHP
DESCRIPTION: Demonstrates how to customize the notification title for force-delete actions.

LANGUAGE: php
CODE:
ForceDeleteAction::make()
    ->successNotificationTitle('User force-deleted')

----------------------------------------

TITLE: Triggering Error State for Filament Checkbox using Blade
DESCRIPTION: This example shows how to trigger the error state of a Filament checkbox component using Blade. It uses the 'valid' attribute to determine if the checkbox is valid based on the presence of errors.

LANGUAGE: blade
CODE:
<x-filament::input.checkbox
    wire:model="isAdmin"
    :valid="! $errors->has('isAdmin')"
/>

----------------------------------------

TITLE: Customizing Key Column Label
DESCRIPTION: Customization of the key column label in the key-value entry component using the keyLabel method.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\KeyValueEntry;

KeyValueEntry::make('meta')
    ->keyLabel('Property name')

----------------------------------------

TITLE: Halting Creation Process in PHP
DESCRIPTION: Illustrates how to halt the creation process using the $this->halt() method within a lifecycle hook or mutation method.

LANGUAGE: php
CODE:
use Filament\Notifications\Actions\Action;
use Filament\Notifications\Notification;

protected function beforeCreate(): void
{
    if (! auth()->user()->team->subscribed()) {
        Notification::make()
            ->warning()
            ->title('You don\'t have an active subscription!')
            ->body('Choose a plan to continue.')
            ->persistent()
            ->actions([
                Action::make('subscribe')
                    ->button()
                    ->url(route('subscribe'), shouldOpenInNewTab: true),
            ])
            ->send();
    
        $this->halt();
    }
}

----------------------------------------

TITLE: Configuring Eloquent Model for Key-value Field in PHP
DESCRIPTION: Example of how to set up an Eloquent model to work with the key-value field. This snippet shows how to add an 'array' cast for the 'meta' attribute in a Post model.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    protected $casts = [
        'meta' => 'array',
    ];

    // ...
}

----------------------------------------

TITLE: Asserting Absence of Notifications with Livewire in PHP
DESCRIPTION: This code shows how to assert that a notification was not sent. It demonstrates three ways to use assertNotNotified(): without parameters, with a title, and with a specific notification object.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;
use function Pest\Livewire\livewire;

it('does not send a notification', function () {
    livewire(CreatePost::class)
        ->assertNotNotified()
        // or
        ->assertNotNotified('Unable to create post')
        // or
        ->assertNotNotified(
            Notification::make()
                ->danger()
                ->title('Unable to create post')
                ->body('Something went wrong.'),
        );

----------------------------------------

TITLE: Customizing Text Entry Appearance in PHP
DESCRIPTION: Demonstrates various methods to customize the appearance of a TextEntry component, including color, icon, size, and font weight.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;
use Filament\Support\Enums\IconPosition;
use Filament\Support\Enums\FontWeight;
use Filament\Support\Enums\FontFamily;

TextEntry::make('status')
    ->color('primary')

TextEntry::make('email')
    ->icon('heroicon-m-envelope')
    ->iconPosition(IconPosition::After)
    ->iconColor('primary')

TextEntry::make('title')
    ->size(TextEntry\TextEntrySize::Large)

TextEntry::make('title')
    ->weight(FontWeight::Bold)

TextEntry::make('apiKey')
    ->label('API key')
    ->fontFamily(FontFamily::Mono)

----------------------------------------

TITLE: Injecting Eloquent Record in PHP Column Configuration
DESCRIPTION: This snippet demonstrates how to inject the current Eloquent record into a column configuration function in PHP.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;

function (Model $record) {
    // ...
}

----------------------------------------

TITLE: Tag Suffix Implementation
DESCRIPTION: Adds a suffix to individual tags for display purposes without affecting stored values.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TagsInput;

TagsInput::make('percentages')
    ->tagSuffix('%')

----------------------------------------

TITLE: Positioning Radio Options Inline Below Label in PHP
DESCRIPTION: This snippet shows how to display radio options inline with each other but below the label using inline() and inlineLabel() methods in Filament Forms.

LANGUAGE: php
CODE:
Radio::make('feedback')
    ->label('Like this post?')
    ->boolean()
    ->inline()
    ->inlineLabel(false)

----------------------------------------

TITLE: Table Restore Actions Configuration in PHP
DESCRIPTION: Configuration for adding restore actions to tables, including single and bulk restore capabilities.

LANGUAGE: php
CODE:
use Filament\Tables\Actions\BulkActionGroup;
use Filament\Tables\Actions\RestoreAction;
use Filament\Tables\Actions\RestoreBulkAction;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->actions([
            RestoreAction::make(),
            // ...
        ])
        ->bulkActions([
            BulkActionGroup::make([
                RestoreBulkAction::make(),
                // ...
            ]),
        ]);
}

----------------------------------------

TITLE: Installing Filament Actions Package with Composer
DESCRIPTION: Command to install the Filament Actions package using Composer. This installs version 3.3 or higher and updates dependencies.

LANGUAGE: bash
CODE:
composer require filament/actions:"^3.3" -W

----------------------------------------

TITLE: Customizing Avatar Shape in Blade
DESCRIPTION: Shows how to create a square avatar by setting the 'circular' attribute to false. This overrides the default circular shape of the avatar component.

LANGUAGE: blade
CODE:
<x-filament::avatar
    src="https://filamentphp.com/dan.jpg"
    alt="Dan Harrin"
    :circular="false"
/>

----------------------------------------

TITLE: Advanced Image Column Styling
DESCRIPTION: Shows various styling options including circular images, default image URLs, and stacked image configurations.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\ImageColumn;

ImageColumn::make('colleagues.avatar')
    ->circular()
    ->stacked()
    ->limit(3)
    ->limitedRemainingText(isSeparate: true)

----------------------------------------

TITLE: Programmatic Action Triggering (JavaScript)
DESCRIPTION: JavaScript code to programmatically trigger a Filament action using the $wire utility.

LANGUAGE: javascript
CODE:
$wire.mountAction('test', { id: 12345 })

----------------------------------------

TITLE: Programmatic Action Triggering (JavaScript)
DESCRIPTION: JavaScript code to programmatically trigger a Filament action using the $wire utility.

LANGUAGE: javascript
CODE:
$wire.mountAction('test', { id: 12345 })

----------------------------------------

TITLE: Configuring Composer Autoload and Laravel Integration
DESCRIPTION: JSON configuration for PSR-4 autoloading and Laravel facade setup in composer.json

LANGUAGE: json
CODE:
"autoload": {
    "psr-4": {
        "Awcodes\\Headings\\Database\\Factories\\": "database/factories/"
    }
},
"extra": {
    "laravel": {
        "aliases": {
            "Headings": "Awcodes\\Headings\\Facades\\ClockWidget"
        }
    }
}

----------------------------------------

TITLE: Custom Redirect After Restore in PHP
DESCRIPTION: Setting up a custom redirect URL after successful restore operation.

LANGUAGE: php
CODE:
RestoreAction::make()
    ->successRedirectUrl(route('posts.list'))

----------------------------------------

TITLE: Enabling Clipboard Copy for Text Entry in PHP
DESCRIPTION: Shows how to make text copyable to the clipboard in a TextEntry component, with custom confirmation message and duration.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;

TextEntry::make('apiKey')
    ->label('API key')
    ->copyable()
    ->copyMessage('Copied!')
    ->copyMessageDuration(1500)

----------------------------------------

TITLE: Injecting Table Instance in PHP Column Configuration
DESCRIPTION: This snippet shows how to inject the current table configuration instance into a column configuration function in PHP.

LANGUAGE: php
CODE:
use Filament\Tables\Table;

function (Table $table) {
    // ...
}

----------------------------------------

TITLE: Overriding Global Settings for a Section Component in PHP
DESCRIPTION: Shows how to override global settings for an individual Section component in Filament forms. This example sets the specific section to have 1 column, overriding any global configuration.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;

Section::make()
    ->columns(1)

----------------------------------------

TITLE: Route Definition for Full-page Component - PHP
DESCRIPTION: PHP route configuration for a full-page Livewire component.

LANGUAGE: php
CODE:
use App\Livewire\ListProducts;
use Illuminate\Support\Facades\Route;

Route::get('products', ListProducts::class);

----------------------------------------

TITLE: Excluding Attributes from Replication
DESCRIPTION: Configuration to exclude specific attributes when replicating a record.

LANGUAGE: php
CODE:
ReplicateAction::make()
    ->excludeAttributes(['slug'])

----------------------------------------

TITLE: Rendering Action in View (Blade)
DESCRIPTION: Blade template for rendering an action with required modal components.

LANGUAGE: blade
CODE:
<div>
    {{ $this->deleteAction }}

    <x-filament-actions::modals />
</div>

----------------------------------------

TITLE: Custom Table Header Configuration
DESCRIPTION: Shows how to customize table headers with headings and descriptions.

LANGUAGE: php
CODE:
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->heading('Clients')
        ->description('Manage your clients here.')
        ->columns([
            // ...
        ]);

----------------------------------------

TITLE: Tailwind CSS Base Styles
DESCRIPTION: Base CSS configuration including Tailwind's core layers.

LANGUAGE: css
CODE:
@tailwind base;
@tailwind components;
@tailwind utilities;
@tailwind variants;

----------------------------------------

TITLE: Custom Query Modification Ternary Filter - PHP
DESCRIPTION: Implementing custom query modifications for each state of the ternary filter using closure functions.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Builder;
use Filament\Tables\Filters\TernaryFilter;

TernaryFilter::make('email_verified_at')
    ->label('Email verification')
    ->placeholder('All users')
    ->trueLabel('Verified users')
    ->falseLabel('Not verified users')
    ->queries(
        true: fn (Builder $query) => $query->whereNotNull('email_verified_at'),
        false: fn (Builder $query) => $query->whereNull('email_verified_at'),
        blank: fn (Builder $query) => $query,
    )

----------------------------------------

TITLE: Custom Attribute Ternary Filter - PHP
DESCRIPTION: Customizing the database column used by the ternary filter while maintaining a different filter name.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\TernaryFilter;

TernaryFilter::make('verified')
    ->nullable()
    ->attribute('status_id')

----------------------------------------

TITLE: Aggregating Relationship Data in Filament TextColumn
DESCRIPTION: Shows how to perform aggregations (avg, max, min, sum) on relationship fields, with examples of basic and scoped queries.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('users_avg_age')->avg('users', 'age')

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;
use Illuminate\Database\Eloquent\Builder;

TextColumn::make('users_avg_age')->avg([
    'users' => fn (Builder $query) => $query->where('is_active', true),
], 'age')

----------------------------------------

TITLE: Aggregating Relationship Data in Filament TextColumn
DESCRIPTION: Shows how to perform aggregations (avg, max, min, sum) on relationship fields, with examples of basic and scoped queries.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('users_avg_age')->avg('users', 'age')

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;
use Illuminate\Database\Eloquent\Builder;

TextColumn::make('users_avg_age')->avg([
    'users' => fn (Builder $query) => $query->where('is_active', true),
], 'age')

----------------------------------------

TITLE: Defining Resource Form Schema
DESCRIPTION: Example of defining form fields for a Filament resource using the form() method with text input components.

LANGUAGE: php
CODE:
use Filament\Forms;
use Filament\Forms\Form;

public static function form(Form $form): Form
{
    return $form
        ->schema([
            Forms\Components\TextInput::make('name')->required(),
            Forms\Components\TextInput::make('email')->email()->required(),
            // ...
        ]);
}

----------------------------------------

TITLE: Restore Action Lifecycle Hooks in PHP
DESCRIPTION: Implementation of before and after hooks for restore operations.

LANGUAGE: php
CODE:
RestoreAction::make()
    ->before(function () {
        // ...
    })
    ->after(function () {
        // ...
    })

----------------------------------------

TITLE: Private Image Configuration
DESCRIPTION: Setting up private image visibility with temporary URL generation.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\ImageEntry;

ImageEntry::make('header_image')
    ->visibility('private')

----------------------------------------

TITLE: Injecting Table Row Loop in PHP Column Configuration
DESCRIPTION: This snippet demonstrates how to inject the current Laravel Blade loop object into a column configuration function in PHP.

LANGUAGE: php
CODE:
function (stdClass $rowLoop) {
    // ...
}

----------------------------------------

TITLE: Creating Basic Checkbox Column in PHP
DESCRIPTION: Basic implementation of a checkbox column for an 'is_admin' field in a Filament table. This allows for inline boolean value updates without opening a separate page or modal.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\CheckboxColumn;

CheckboxColumn::make('is_admin')

----------------------------------------

TITLE: Configuring Copyable Color Column in Filament Tables (PHP)
DESCRIPTION: This code shows how to make a Color Column copyable, allowing users to copy the CSS value to the clipboard. It includes options to customize the copy confirmation message and duration.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\ColorColumn;

ColorColumn::make('color')
    ->copyable()
    ->copyMessage('Color code copied')
    ->copyMessageDuration(1500)

----------------------------------------

TITLE: Composer Post-autoload Configuration
DESCRIPTION: Composer configuration for automatic Filament upgrades after package updates.

LANGUAGE: json
CODE:
"post-autoload-dump": [
    "@php artisan filament:upgrade"
]

----------------------------------------

TITLE: Creating Blade Component View
DESCRIPTION: Blade template for rendering the heading component with dynamic styling and content

LANGUAGE: blade
CODE:
@php
    $level = $getLevel();
    $color = $getColor();
@endphp

<{{ $level }}
    x-data
    x-load-css="[@js(\Filament\Support\Facades\FilamentAsset::getStyleHref('headings', package: 'awcodes/headings'))]" 
    {{
        $attributes
            ->class([
                'headings-component',
                match ($color) {
                    'gray' => 'text-gray-600 dark:text-gray-400',
                    default => 'text-custom-500',
                },
            ])
            ->style([
                \Filament\Support\get_color_css_variables($color, [500]) => $color !== 'gray',
            ])
    }}
>
    {{ $getContent() }}
</{{ $level }}>

----------------------------------------

TITLE: Configuring Global Search Field Suffix in PHP
DESCRIPTION: Demonstrates how to customize the suffix of the global search field in the Filament panel configuration, including displaying the configured key bindings or providing a custom suffix based on the user's platform.

LANGUAGE: php
CODE:
use Filament\Panel;
use Filament\Support\Enums\Platform;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->globalSearchFieldSuffix(fn (): ?string => match (Platform::detect()) {
            Platform::Windows, Platform::Linux => 'CTRL+K',
            Platform::Mac => '⌘K',
            default => null,
        });
}

----------------------------------------

TITLE: Rendering an infolist in a Blade view
DESCRIPTION: This Blade syntax renders the productInfolist in the Livewire component's view.

LANGUAGE: blade
CODE:
{{ $this->productInfolist }}

----------------------------------------

TITLE: Implementing Lifecycle Hooks for Select Column in PHP
DESCRIPTION: This code demonstrates the use of beforeStateUpdated and afterStateUpdated hooks in a select column. These hooks allow execution of custom logic before and after the state is saved to the database.

LANGUAGE: php
CODE:
SelectColumn::make()
    ->beforeStateUpdated(function ($record, $state) {
        // Runs before the state is saved to the database.
    })
    ->afterStateUpdated(function ($record, $state) {
        // Runs after the state is saved to the database.
    })

----------------------------------------

TITLE: Custom Labels Ternary Filter - PHP
DESCRIPTION: Customizing the display labels for each state of the ternary filter including true, false, and placeholder states.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Builder;
use Filament\Tables\Filters\TernaryFilter;

TernaryFilter::make('email_verified_at')
    ->label('Email verification')
    ->nullable()
    ->placeholder('All users')
    ->trueLabel('Verified users')
    ->falseLabel('Not verified users')

----------------------------------------

TITLE: Basic Repeatable Entry Implementation in Filament PHP
DESCRIPTION: Demonstrates how to create a basic repeatable entry with a schema for displaying comments. The schema includes author name, title, and content fields arranged in a two-column layout.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\RepeatableEntry;
use Filament\Infolists\Components\TextEntry;

RepeatableEntry::make('comments')
    ->schema([
        TextEntry::make('author.name'),
        TextEntry::make('title'),
        TextEntry::make('content')
            ->columnSpan(2),
    ])
    ->columns(2)

----------------------------------------

TITLE: Image Size Customization
DESCRIPTION: Examples of customizing image dimensions using width, height, and size methods.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\ImageEntry;

ImageEntry::make('header_image')
    ->width(200)

ImageEntry::make('header_image')
    ->height(50)

ImageEntry::make('author.avatar')
    ->size(40)

----------------------------------------

TITLE: Implementing Multiple Active Indicators in PHP for Filament Tables
DESCRIPTION: This snippet demonstrates how to create multiple active indicators for a date range filter, allowing separate removal of 'from' and 'until' date indicators.

LANGUAGE: php
CODE:
use Carbon\Carbon;
use Filament\Forms\Components\DatePicker;
use Filament\Tables\Filters\Filter;
use Filament\Tables\Filters\Indicator;

Filter::make('created_at')
    ->form([
        DatePicker::make('from'),
        DatePicker::make('until'),
    ])
    // ...
    ->indicateUsing(function (array $data): array {
        $indicators = [];

        if ($data['from'] ?? null) {
            $indicators[] = Indicator::make('Created from ' . Carbon::parse($data['from'])->toFormattedDateString())
                ->removeField('from');
        }

        if ($data['until'] ?? null) {
            $indicators[] = Indicator::make('Created until ' . Carbon::parse($data['until'])->toFormattedDateString())
                ->removeField('until');
        }

        return $indicators;
    })

----------------------------------------

TITLE: Adding Icons to Tabs in Filament Forms
DESCRIPTION: This snippet demonstrates how to add an icon to a tab using the icon() method. It uses the Heroicon set to add a bell icon to the 'Notifications' tab.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Tabs;

Tabs::make('Tabs')
    ->tabs([
        Tabs\Tab::make('Notifications')
            ->icon('heroicon-m-bell')
            ->schema([
                // ...
            ]),
        // ...
    ])

----------------------------------------

TITLE: Rendering Loading Indicator in Blade
DESCRIPTION: Implementation of Filament's loading indicator component. The component creates an animated SVG element that can be used to show loading or progress states in the UI. The height and width can be customized using CSS classes.

LANGUAGE: blade
CODE:
<x-filament::loading-indicator class="h-5 w-5" />

----------------------------------------

TITLE: Adding a Description to a Text Column
DESCRIPTION: This snippet demonstrates how to add a description to a text column. It uses the description() method with a closure to display additional information below the main content.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('title')
    ->description(fn (Post $record): string => $record->description)

----------------------------------------

TITLE: Testing Action State and Visibility in Infolists
DESCRIPTION: Shows how to test the existence, visibility, and enabled state of infolist actions.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can only print customers', function () {
    $invoice = Invoice::factory()->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->assertInfolistActionHidden('customer', 'send')
        ->assertInfolistActionVisible('customer', 'print');
});

----------------------------------------

TITLE: Basic Line Chart Widget Implementation - PHP
DESCRIPTION: Example of implementing a basic line chart widget class with dataset configuration and chart type definition

LANGUAGE: php
CODE:
<?php

namespace App\Filament\Widgets;

use Filament\Widgets\ChartWidget;

class BlogPostsChart extends ChartWidget
{
    protected static ?string $heading = 'Blog Posts';

    protected function getData(): array
    {
        return [
            'datasets' => [
                [
                    'label' => 'Blog posts created',
                    'data' => [0, 10, 5, 2, 21, 32, 45, 74, 65, 45, 77, 89],
                ],
            ],
            'labels' => ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        ];
    }

    protected function getType(): string
    {
        return 'line';
    }
}

----------------------------------------

TITLE: Basic Line Chart Widget Implementation - PHP
DESCRIPTION: Example of implementing a basic line chart widget class with dataset configuration and chart type definition

LANGUAGE: php
CODE:
<?php

namespace App\Filament\Widgets;

use Filament\Widgets\ChartWidget;

class BlogPostsChart extends ChartWidget
{
    protected static ?string $heading = 'Blog Posts';

    protected function getData(): array
    {
        return [
            'datasets' => [
                [
                    'label' => 'Blog posts created',
                    'data' => [0, 10, 5, 2, 21, 32, 45, 74, 65, 45, 77, 89],
                ],
            ],
            'labels' => ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        ];
    }

    protected function getType(): string
    {
        return 'line';
    }
}

----------------------------------------

TITLE: Setting Dropdown Width for Action Group in PHP
DESCRIPTION: Shows how to set the width of the dropdown menu using the dropdownWidth method with predefined width options.

LANGUAGE: php
CODE:
use Filament\Support\Enums\MaxWidth;

ActionGroup::make([
    // Array of actions
])
    ->dropdownWidth(MaxWidth::ExtraSmall)

----------------------------------------

TITLE: Force-Delete Lifecycle Hooks Implementation in PHP
DESCRIPTION: Demonstrates how to implement before and after hooks for force-delete actions.

LANGUAGE: php
CODE:
ForceDeleteAction::make()
    ->before(function () {
        // ...
    })
    ->after(function () {
        // ...
    })

----------------------------------------

TITLE: Accessing Entry State in Blade Template
DESCRIPTION: Shows how to access the entry's state value within a Blade view template using the $getState() function.

LANGUAGE: blade
CODE:
<div>
    {{ $getState() }}
</div>

----------------------------------------

TITLE: Overriding Global Settings for a Section Component in PHP
DESCRIPTION: Shows how to override global settings for an individual Section component.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Section;

Section::make()
    ->columns(1)

----------------------------------------

TITLE: Adding ExportBulkAction to Filament Table
DESCRIPTION: Example of adding an ExportBulkAction to a Filament table for exporting selected rows.

LANGUAGE: php
CODE:
use App\Filament\Exports\ProductExporter;
use Filament\Tables\Actions\ExportBulkAction;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->bulkActions([
            ExportBulkAction::make()
                ->exporter(ProductExporter::class)
        ]);
}

----------------------------------------

TITLE: Generating Custom Entry Class using Artisan
DESCRIPTION: Shows the Artisan command to generate a new custom entry class and associated view file.

LANGUAGE: bash
CODE:
php artisan make:infolist-entry StatusSwitcher

----------------------------------------

TITLE: Default Image URL Configuration
DESCRIPTION: Setting up placeholder image URL for cases when image doesn't exist.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\ImageEntry;

ImageEntry::make('avatar')
    ->defaultImageUrl(url('/images/placeholder.png'))

----------------------------------------

TITLE: Customizing Filter Dropdown Width in Filament Tables
DESCRIPTION: This code shows how to customize the width of the filters dropdown in a Filament table using the filtersFormWidth() method and specifying a width enum.

LANGUAGE: php
CODE:
use Filament\Support\Enums\MaxWidth;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->filters([
            // ...
        ])
        ->filtersFormWidth(MaxWidth::FourExtraLarge);
}

----------------------------------------

TITLE: Creating a Slide-Over Modal in PHP
DESCRIPTION: This example demonstrates how to use a slide-over dialog instead of a standard modal for an action.

LANGUAGE: php
CODE:
Action::make('updateAuthor')
    ->form([
        // ...
    ])
    ->action(function (array $data): void {
        // ...
    })
    ->slideOver()

----------------------------------------

TITLE: Relationship Table Configuration - PHP
DESCRIPTION: Configuration for a table based on an Eloquent relationship, demonstrating relationship and inverse relationship setup.

LANGUAGE: php
CODE:
use App\Models\Category;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

public Category $category;

public function table(Table $table): Table
{
    return $table
        ->relationship(fn (): BelongsToMany => $this->category->products())
        ->inverseRelationship('categories')
        ->columns([
            TextColumn::make('name'),
        ]);
}

----------------------------------------

TITLE: Implementing Filament Service Provider
DESCRIPTION: PHP service provider class for registering assets and configuring the package

LANGUAGE: php
CODE:
namespace Awcodes\Headings;

use Filament\Support\Assets\Css;
use Filament\Support\Facades\FilamentAsset;
use Spatie\LaravelPackageTools\Package;
use Spatie\LaravelPackageTools\PackageServiceProvider;

class HeadingsServiceProvider extends PackageServiceProvider
{
    public static string $name = 'headings';

    public function configurePackage(Package $package): void
    {
        $package->name(static::$name)
            ->hasViews();
    }

    public function packageBooted(): void
    {
        FilamentAsset::register([
            Css::make('headings', __DIR__ . '/../resources/dist/headings.css')->loadedOnRequest(),
        ], 'awcodes/headings');
    }
}

----------------------------------------

TITLE: Rendering Table Component in PHP
DESCRIPTION: Test to ensure a table component renders successfully using Livewire's assertSuccessful() helper.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can render page', function () {
    livewire(ListPosts::class)->assertSuccessful();
});

----------------------------------------

TITLE: Custom Restore Notification Title in PHP
DESCRIPTION: Customizing the notification title for successful restore operations.

LANGUAGE: php
CODE:
RestoreAction::make()
    ->successNotificationTitle('User restored')

----------------------------------------

TITLE: Disabling Placeholder Selection in Select Column in PHP
DESCRIPTION: This snippet illustrates how to disable the selection of the placeholder option in a select column using the selectablePlaceholder() method.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\SelectColumn;

SelectColumn::make('status')
    ->options([
        'draft' => 'Draft',
        'reviewing' => 'Reviewing',
        'published' => 'Published',
    ])
    ->selectablePlaceholder(false)

----------------------------------------

TITLE: Customizing Save Notifications in PHP
DESCRIPTION: Methods to customize the notification shown after successful record update, including title customization and full notification configuration.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;

protected function getSavedNotification(): ?Notification
{
    return Notification::make()
        ->success()
        ->title('User updated')
        ->body('The user has been saved successfully.');
}

----------------------------------------

TITLE: Defining Import Columns
DESCRIPTION: Example of defining import columns in an importer class.

LANGUAGE: php
CODE:
use Filament\Actions\Imports\ImportColumn;

public static function getColumns(): array
{
    return [
        ImportColumn::make('name')
            ->requiredMapping()
            ->rules(['required', 'max:255']),
        ImportColumn::make('sku')
            ->label('SKU')
            ->requiredMapping()
            ->rules(['required', 'max:32']),
        ImportColumn::make('price')
            ->numeric()
            ->rules(['numeric', 'min:0']),
    ];
}

----------------------------------------

TITLE: Custom Entry Class Definition in PHP
DESCRIPTION: Demonstrates the structure of a custom entry class that extends the base Entry class with a specified view path.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Entry;

class StatusSwitcher extends Entry
{
    protected string $view = 'filament.infolists.entries.status-switcher';
}

----------------------------------------

TITLE: Custom Image Attributes Configuration
DESCRIPTION: Adding custom HTML attributes to image elements.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\ImageEntry;

ImageEntry::make('logo')
    ->extraImgAttributes([
        'alt' => 'Logo',
        'loading' => 'lazy',
    ])

----------------------------------------

TITLE: Displaying Filters Below Table Content in Filament
DESCRIPTION: This snippet demonstrates how to render the filters below the table content instead of in a dropdown in a Filament table using the FiltersLayout::BelowContent option.

LANGUAGE: php
CODE:
use Filament\Tables\Enums\FiltersLayout;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->filters([
            // ...
        ], layout: FiltersLayout::BelowContent);
}

----------------------------------------

TITLE: Testing Resource Table Records Display
DESCRIPTION: Demonstrates how to test if a resource's table correctly displays database records.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can list posts', function () {
    $posts = Post::factory()->count(10)->create();

    livewire(PostResource\Pages\ListPosts::class)
        ->assertCanSeeTableRecords($posts);
});

----------------------------------------

TITLE: Adding Spatie Translatable Plugin to Filament Panel
DESCRIPTION: PHP code snippet demonstrating how to add the Spatie Translatable Plugin to a Filament panel configuration. This enables the plugin for use in the application.

LANGUAGE: php
CODE:
use Filament\SpatieLaravelTranslatablePlugin;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->plugin(SpatieLaravelTranslatablePlugin::make());
}

----------------------------------------

TITLE: Custom Boolean Colors Configuration
DESCRIPTION: Shows how to customize colors for true and false states in a boolean icon column.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\IconColumn;

IconColumn::make('is_featured')
    ->boolean()
    ->trueColor('info')
    ->falseColor('warning')

----------------------------------------

TITLE: Save Process Halting Implementation
DESCRIPTION: Example of halting the save process based on business logic using halt() or cancel() methods.

LANGUAGE: php
CODE:
use App\Models\Post;
use Filament\Notifications\Actions\Action;
use Filament\Notifications\Notification;
use Filament\Tables\Actions\EditAction;

EditAction::make()
    ->before(function (EditAction $action, Post $record) {
        if (! $record->team->subscribed()) {
            Notification::make()
                ->warning()
                ->title('You don\'t have an active subscription!')
                ->body('Choose a plan to continue.')
                ->persistent()
                ->actions([
                    Action::make('subscribe')
                        ->button()
                        ->url(route('subscribe'), shouldOpenInNewTab: true),
                ])
                ->send();
        
            $action->halt();
        }
    })

----------------------------------------

TITLE: Adding a Summarizer to a Table Column in PHP
DESCRIPTION: Demonstrates how to add an Average summarizer to a TextColumn in a Filament table.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\Summarizers\Average;
use Filament\Tables\Columns\TextColumn;

TextColumn::make('rating')
    ->summarize(Average::make())

----------------------------------------

TITLE: Adding a Summarizer to a Table Column in PHP
DESCRIPTION: Demonstrates how to add an Average summarizer to a TextColumn in a Filament table.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\Summarizers\Average;
use Filament\Tables\Columns\TextColumn;

TextColumn::make('rating')
    ->summarize(Average::make())

----------------------------------------

TITLE: Setting Widget Column Span in PHP
DESCRIPTION: Configures the width of a widget using the $columnSpan property, supporting both fixed and responsive layouts.

LANGUAGE: php
CODE:
protected int | string | array $columnSpan = [
    'md' => 2,
    'xl' => 3,
];

----------------------------------------

TITLE: Custom Restore Notification Configuration in PHP
DESCRIPTION: Detailed configuration of success notification including title and body.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;

RestoreAction::make()
    ->successNotification(
       Notification::make()
            ->success()
            ->title('User restored')
            ->body('The user has been restored successfully.'),
    )

----------------------------------------

TITLE: Publishing Filament Spatie Settings Plugin Translations
DESCRIPTION: Artisan command to publish language files for translating the Filament Spatie Settings Plugin. This allows for customization of the plugin's text content.

LANGUAGE: bash
CODE:
php artisan vendor:publish --tag=filament-spatie-laravel-settings-plugin-translations

----------------------------------------

TITLE: Enabling Searchable Select Filter Options in Filament Tables
DESCRIPTION: Demonstrates how to make the options in a relationship select filter searchable, allowing users to more easily find options in large datasets.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\SelectFilter;

SelectFilter::make('author')
    ->relationship('author', 'name')
    ->searchable()

----------------------------------------

TITLE: Composer Post-autoload Configuration
DESCRIPTION: Composer configuration for automatic Filament upgrades after package updates.

LANGUAGE: json
CODE:
"post-autoload-dump": [
    "@php artisan filament:upgrade"
]

----------------------------------------

TITLE: Delete Action with Custom Redirect in PHP
DESCRIPTION: Implementation of DeleteAction with custom success redirect URL.

LANGUAGE: php
CODE:
DeleteAction::make()
    ->successRedirectUrl(route('posts.list'))

----------------------------------------

TITLE: Customizing Value Column Label
DESCRIPTION: Customization of the value column label in the key-value entry component using the valueLabel method.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\KeyValueEntry;

KeyValueEntry::make('meta')
    ->valueLabel('Property value')

----------------------------------------

TITLE: Hiding Filter Indicators in Filament Tables
DESCRIPTION: This code shows how to hide the active filters indicators above the table in a Filament table using the hiddenFilterIndicators() method.

LANGUAGE: php
CODE:
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->filters([
            // ...
        ])
        ->hiddenFilterIndicators();
}

----------------------------------------

TITLE: Configuring Global Settings for Section Components in PHP
DESCRIPTION: Demonstrates how to change the default behavior of Section components globally in Filament forms. This example sets all sections to have 2 columns by default using the configureUsing() method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;

Section::configureUsing(function (Section $section): void {
    $section
        ->columns(2);
});

----------------------------------------

TITLE: Applying !important to Specific Tailwind Classes for Filament Sidebar
DESCRIPTION: This example shows how to use the '!' prefix to apply !important to specific Tailwind classes when customizing the Filament sidebar background.

LANGUAGE: css
CODE:
.fi-sidebar {
    @apply !bg-gray-50 dark:!bg-gray-950;
}

----------------------------------------

TITLE: Applying Length Validation to Textarea in PHP with Filament
DESCRIPTION: Demonstrates how to set minimum and maximum length validation rules for a textarea, which apply both frontend and backend validation.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Textarea;

Textarea::make('description')
    ->minLength(2)
    ->maxLength(1024)

----------------------------------------

TITLE: PostCSS Configuration
DESCRIPTION: PostCSS configuration file setup with required plugins for Tailwind CSS.

LANGUAGE: javascript
CODE:
export default {
    plugins: {
        'tailwindcss/nesting': 'postcss-nesting',
        tailwindcss: {},
        autoprefixer: {},
    },
}

----------------------------------------

TITLE: Disable Restore Notification in PHP
DESCRIPTION: Disabling the success notification for restore operations.

LANGUAGE: php
CODE:
RestoreAction::make()
    ->successNotification(null)

----------------------------------------

TITLE: Adding Icon Affixes to Input
DESCRIPTION: Shows how to add icon affixes using the prefix-icon and suffix-icon attributes.

LANGUAGE: blade
CODE:
<x-filament::input.wrapper suffix-icon="heroicon-m-globe-alt">
    <x-filament::input
        type="url"
        wire:model="domain"
    />
</x-filament::input.wrapper>

----------------------------------------

TITLE: Updating Existing Records on Import
DESCRIPTION: Example of how to configure an importer to update existing records based on a unique identifier.

LANGUAGE: php
CODE:
use App\Models\Product;

public function resolveRecord(): ?Product
{
    return Product::firstOrNew([
        'sku' => $this->data['sku'],
    ]);
}

----------------------------------------

TITLE: Keyboard Shortcuts for Action Triggers in PHP
DESCRIPTION: Shows how to add keyboard shortcuts to action triggers using keyBindings method.

LANGUAGE: php
CODE:
Action::make('save')
    ->action(fn () => $this->save())
    ->keyBindings(['command+s', 'ctrl+s'])

----------------------------------------

TITLE: Delete Action with Custom Notification in PHP
DESCRIPTION: Full customization of success notification for delete action including title and body.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;

DeleteAction::make()
    ->successNotification(
       Notification::make()
            ->success()
            ->title('User deleted')
            ->body('The user has been deleted successfully.'),
    )

----------------------------------------

TITLE: Creating a Collapsible Section in Filament Infolist
DESCRIPTION: Demonstrates how to create a collapsible section in a Filament Infolist. This feature allows users to expand or collapse the section content, useful for managing long infolists.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Section;

Section::make('Cart')
    ->description('The items you have selected for purchase')
    ->schema([
        // ...
    ])
    ->collapsible()
    ->collapsed()

----------------------------------------

TITLE: Customizing Relationship Query for Select Filters in Filament
DESCRIPTION: Shows how to customize the database query used to retrieve options for a relationship select filter. This example includes soft-deleted records in the query.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\SelectFilter;
use Illuminate\Database\Eloquent\Builder;

SelectFilter::make('author')
    ->relationship('author', 'name', fn (Builder $query) => $query->withTrashed())

----------------------------------------

TITLE: Adding Tailwind CSS Layers
DESCRIPTION: CSS code to include Tailwind's CSS layers in the application's stylesheet.

LANGUAGE: css
CODE:
@tailwind base;
@tailwind components;
@tailwind utilities;
@tailwind variants;

----------------------------------------

TITLE: Binding Custom Notification Class in PHP
DESCRIPTION: Shows how to bind a custom Notification class to the container in a service provider's register method. This allows the custom class to be used in place of the default Notification class.

LANGUAGE: php
CODE:
use App\Notifications\Notification;
use Filament\Notifications\Notification as BaseNotification;

$this->app->bind(BaseNotification::class, Notification::class);

----------------------------------------

TITLE: Binding Custom Notification Class in PHP
DESCRIPTION: Shows how to bind a custom Notification class to the container in a service provider's register method. This allows the custom class to be used in place of the default Notification class.

LANGUAGE: php
CODE:
use App\Notifications\Notification;
use Filament\Notifications\Notification as BaseNotification;

$this->app->bind(BaseNotification::class, Notification::class);

----------------------------------------

TITLE: Preparing Filament Resource Class for Translation
DESCRIPTION: PHP code snippet showing how to prepare a Filament resource class for translation by applying the Translatable trait. This enables translation functionality for the resource.

LANGUAGE: php
CODE:
use Filament\Resources\Concerns\Translatable;
use Filament\Resources\Resource;

class BlogPostResource extends Resource
{
    use Translatable;
    
    // ...
}

----------------------------------------

TITLE: Adding Mark as Read Action to Notification
DESCRIPTION: PHP code to add a 'Mark as Read' action to a notification, allowing individual notifications to be marked as read.

LANGUAGE: php
CODE:
use Filament\Notifications\Actions\Action;
use Filament\Notifications\Notification;

Notification::make()
    ->title('Saved successfully')
    ->success()
    ->body('Changes to the post have been saved.')
    ->actions([
        Action::make('view')
            ->button()
            ->markAsRead(),
    ])
    ->send();

----------------------------------------

TITLE: Defining Exporter Columns in Filament PHP
DESCRIPTION: Example of defining columns for a Filament exporter class.

LANGUAGE: php
CODE:
use Filament\Actions\Exports\ExportColumn;

public static function getColumns(): array
{
    return [
        ExportColumn::make('name'),
        ExportColumn::make('sku')
            ->label('SKU'),
        ExportColumn::make('price'),
    ];
}

----------------------------------------

TITLE: Injecting Laravel Container Dependencies in PHP Filament Actions
DESCRIPTION: This snippet demonstrates how to inject dependencies from Laravel's container alongside Filament's utility injections. It shows the integration between Filament's system and Laravel's dependency injection.

LANGUAGE: php
CODE:
use Illuminate\Http\Request;

function (Request $request, array $arguments) {
    // ...
}

----------------------------------------

TITLE: Reorderable Tags Configuration
DESCRIPTION: Enables drag-and-drop reordering of tags within the input field.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TagsInput;

TagsInput::make('tags')
    ->reorderable()

----------------------------------------

TITLE: Configuring Single Record Deletion in Filament Table
DESCRIPTION: Adding delete action for individual records in a Filament resource table.

LANGUAGE: php
CODE:
use Filament\Tables;
use Filament\Tables\Table;

public static function table(Table $table): Table
{
    return $table
        ->columns([
            // ...
        ])
        ->actions([
            // ...
            Tables\Actions\DeleteAction::make(),
        ]);
}

----------------------------------------

TITLE: Configuring Composer Post-autoload-dump
DESCRIPTION: JSON configuration for Composer to automatically run Filament upgrade command after updates.

LANGUAGE: json
CODE:
"post-autoload-dump": [
    "@php artisan filament:upgrade"
]

----------------------------------------

TITLE: Testing Modal Content in Filament Actions
DESCRIPTION: Demonstrates how to assert the content of a modal in Filament action tests. The example checks if the modal displays the correct recipient email address.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('confirms the target address before sending', function () {
    $invoice = Invoice::factory()->create();
    $recipientEmail = $invoice->company->primaryContact->email;

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->mountAction('send')
        ->assertSee($recipientEmail);
});

----------------------------------------

TITLE: Filament Panel Provider Configuration in PHP
DESCRIPTION: Demonstrates how to create a panel provider class for distributing an entire panel in a package. Shows panel configuration including ID, path, and component registration.

LANGUAGE: php
CODE:
<?php

namespace DanHarrin\FilamentBlog;

use Filament\Panel;
use Filament\PanelProvider;

class BlogPanelProvider extends PanelProvider
{
    public function panel(Panel $panel): Panel
    {
        return $panel
            ->id('blog')
            ->path('blog')
            ->resources([
                // ...
            ])
            ->pages([
                // ...
            ])
            ->widgets([
                // ...
            ])
            ->middleware([
                // ...
            ])
            ->authMiddleware([
                // ...
            ]);
    }
}

----------------------------------------

TITLE: Creating Split Layout with Sections in PHP - Filament Framework
DESCRIPTION: Demonstrates how to create a flexible width layout using the Split component with sections. Shows implementation of a main content area and sidebar with specific formatting for dates, markdown content, and font weights. Includes responsive breakpoint configuration.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Section;
use Filament\Infolists\Components\Split;
use Filament\Infolists\Components\TextEntry;
use Filament\Support\Enums\FontWeight;

Split::make([
    Section::make([
        TextEntry::make('title')
            ->weight(FontWeight::Bold),
        TextEntry::make('content')
            ->markdown()
            ->prose(),
    ]),
    Section::make([
        TextEntry::make('created_at')
            ->dateTime(),
        TextEntry::make('published_at')
            ->dateTime(),
    ])->grow(false),
])->from('md')

----------------------------------------

TITLE: Adding Multiple Affix Actions to an Entry in PHP
DESCRIPTION: This snippet illustrates how to add multiple prefix and suffix actions to an infolist entry using arrays.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Actions\Action;
use Filament\Infolists\Components\TextEntry;

TextEntry::make('cost')
    ->prefix('€')
    ->prefixActions([
        Action::make('...'),
        Action::make('...'),
        Action::make('...'),
    ])
    ->suffixActions([
        Action::make('...'),
        Action::make('...'),
    ])

----------------------------------------

TITLE: Composer Post-autoload Configuration
DESCRIPTION: Composer configuration for automatic Filament upgrades after package updates.

LANGUAGE: json
CODE:
"post-autoload-dump": [
    "@php artisan filament:upgrade"
]

----------------------------------------

TITLE: Customizing Copied Text for Color Column in Filament Tables (PHP)
DESCRIPTION: This snippet demonstrates how to customize the text that gets copied to the clipboard when a user clicks on a copyable Color Column. It uses the copyableState() method to format the copied text.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\ColorColumn;

ColorColumn::make('color')
    ->copyable()
    ->copyableState(fn (string $state): string => "Color: {$state}")

----------------------------------------

TITLE: Testing Table Sorting in PHP
DESCRIPTION: Test to verify table sorting functionality using sortTable() and assertCanSeeTableRecords() helpers.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can sort posts by title', function () {
    $posts = Post::factory()->count(10)->create();

    livewire(PostResource\Pages\ListPosts::class)
        ->sortTable('title')
        ->assertCanSeeTableRecords($posts->sortBy('title'), inOrder: true)
        ->sortTable('title', 'desc')
        ->assertCanSeeTableRecords($posts->sortByDesc('title'), inOrder: true);
});

----------------------------------------

TITLE: Testing Table Sorting in PHP
DESCRIPTION: Test to verify table sorting functionality using sortTable() and assertCanSeeTableRecords() helpers.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can sort posts by title', function () {
    $posts = Post::factory()->count(10)->create();

    livewire(PostResource\Pages\ListPosts::class)
        ->sortTable('title')
        ->assertCanSeeTableRecords($posts->sortBy('title'), inOrder: true)
        ->sortTable('title', 'desc')
        ->assertCanSeeTableRecords($posts->sortByDesc('title'), inOrder: true);
});

----------------------------------------

TITLE: Installing Filament Upgrade Tool with Composer
DESCRIPTION: Commands to install and run the automated upgrade script for Filament v3.

LANGUAGE: bash
CODE:
composer require filament/upgrade:"^3.2" -W --dev

vendor/bin/filament-v3

----------------------------------------

TITLE: Dropdown Items with Icons
DESCRIPTION: Examples of adding icons to dropdown items and customizing icon colors.

LANGUAGE: blade
CODE:
<x-filament::dropdown.list.item icon="heroicon-m-pencil" icon-color="danger">
    Edit
</x-filament::dropdown.list.item>

<x-filament::dropdown.list.item icon="heroicon-m-pencil" icon-color="info">
    Edit
</x-filament::dropdown.list.item>

<x-filament::dropdown.list.item icon="heroicon-m-pencil" icon-color="primary">
    Edit
</x-filament::dropdown.list.item>

<x-filament::dropdown.list.item icon="heroicon-m-pencil" icon-color="success">
    Edit
</x-filament::dropdown.list.item>

<x-filament::dropdown.list.item icon="heroicon-m-pencil" icon-color="warning">
    Edit
</x-filament::dropdown.list.item>

----------------------------------------

TITLE: Generating Custom Infolist Layout Component in Bash
DESCRIPTION: This command uses Artisan to generate a new custom infolist layout component named 'Box'. It creates both a PHP class and a Blade view file.

LANGUAGE: bash
CODE:
php artisan make:infolist-layout Box

----------------------------------------

TITLE: Sending Broadcast Notifications with Filament's Fluent API in PHP
DESCRIPTION: This snippet demonstrates how to send a broadcast notification using Filament's fluent API. It creates a notification with a title and broadcasts it to a specific recipient.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;

$recipient = auth()->user();

Notification::make()
    ->title('Saved successfully')
    ->broadcast($recipient);

----------------------------------------

TITLE: Basic Stats Overview Widget Implementation - Filament PHP
DESCRIPTION: Basic implementation of a stats overview widget showing how to create and return multiple Stat instances

LANGUAGE: php
CODE:
<?php

namespace App\Filament\Widgets;

use Filament\Widgets\StatsOverviewWidget as BaseWidget;
use Filament\Widgets\StatsOverviewWidget\Stat;

class StatsOverview extends BaseWidget
{
    protected function getStats(): array
    {
        return [
            Stat::make('Unique views', '192.1k'),
            Stat::make('Bounce rate', '21%'),
            Stat::make('Average time on page', '3:12'),
        ];
    }
}

----------------------------------------

TITLE: Creating a Basic Color Entry in PHP for Filament
DESCRIPTION: This snippet demonstrates how to create a simple color entry in Filament's infolist system. It displays a color preview based on a CSS color definition stored in the 'color' field.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\ColorEntry;

ColorEntry::make('color')

----------------------------------------

TITLE: Adding an Action to a Custom Infolist Component in PHP
DESCRIPTION: This snippet shows how to add an action to a custom infolist component or ViewEntry, including form configuration and action handling.

LANGUAGE: php
CODE:
use App\Models\Post;
use Filament\Forms\Components\TextInput;
use Filament\Infolists\Components\Actions\Action;
use Filament\Infolists\Components\ViewEntry;
use Filament\Infolists\Set;

ViewEntry::make('status')
    ->view('filament.infolists.entries.status-switcher')
    ->registerActions([
        Action::make('createStatus')
            ->form([
                TextInput::make('name')
                    ->required(),
            ])
            ->icon('heroicon-m-plus')
            ->action(function (array $data, Post $record) {
                $record->status()->create($data);
            }),
    ])

----------------------------------------

TITLE: Adding a Hint Action to an Entry in PHP
DESCRIPTION: This code demonstrates how to add a hint action to an infolist entry, which appears next to the entry's hint.

LANGUAGE: php
CODE:
use App\Models\Product;
use Filament\Infolists\Components\Actions\Action;
use Filament\Infolists\Components\TextEntry;

TextEntry::make('cost')
    ->prefix('€')
    ->hintAction(
        Action::make('copyCostToPrice')
            ->icon('heroicon-m-clipboard')
            ->requiresConfirmation()
            ->action(function (Product $record) {
                $record->price = $record->cost;
                $record->save();
            })
    )

----------------------------------------

TITLE: Parameter Handling in Livewire Component Mount Method
DESCRIPTION: Shows how to receive parameters in a Livewire component's mount method.

LANGUAGE: php
CODE:
class Foo extends Component
{
    public function mount(string $bar): void
    {       
        // ...
    }
}

----------------------------------------

TITLE: Basic Edit Action Implementation
DESCRIPTION: Basic setup of EditAction with a form modal for editing records using Filament's form components.

LANGUAGE: php
CODE:
use Filament\Actions\EditAction;
use Filament\Forms\Components\TextInput;

EditAction::make()
    ->record($this->post)
    ->form([
        TextInput::make('title')
            ->required()
            ->maxLength(255),
        // ...
    ])

----------------------------------------

TITLE: Disable Seconds in Time Picker - PHP
DESCRIPTION: Configuration to disable seconds input in the date-time picker component.

LANGUAGE: php
CODE:
use Filament\Forms\Components\DateTimePicker;

DateTimePicker::make('published_at')
    ->seconds(false)

----------------------------------------

TITLE: Adding Resources or Pages to a Filament Cluster
DESCRIPTION: This code shows how to add a resource or page to a Filament cluster by setting the $cluster property to the cluster class.

LANGUAGE: php
CODE:
use App\Filament\Clusters\Settings;

protected static ?string $cluster = Settings::class;

----------------------------------------

TITLE: Customizing Record Creation Process in PHP
DESCRIPTION: Shows how to customize the record creation process by overriding the handleRecordCreation() method on the Create page class.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;

protected function handleRecordCreation(array $data): Model
{
    return static::getModel()::create($data);
}

----------------------------------------

TITLE: Upgrading Plugin Service Provider in PHP
DESCRIPTION: Example of upgrading an existing plugin's service provider to extend PackageServiceProvider instead of PluginServiceProvider. It demonstrates setting the static $name property and configuring the package.

LANGUAGE: php
CODE:
class MyPluginServiceProvider extends PackageServiceProvider
{
    public static string $name = 'my-plugin';

    public function configurePackage(Package $package): void
    {
        $package->name(static::$name);
    }
}

----------------------------------------

TITLE: Dropdown Item with Badge
DESCRIPTION: Demonstrates adding and customizing badges on dropdown items.

LANGUAGE: blade
CODE:
<x-filament::dropdown.list.item badge-color="danger">
    Mark notifications as read
    
    <x-slot name="badge">
        3
    </x-slot>
</x-filament::dropdown.list.item>

----------------------------------------

TITLE: Multiple Livewire Components with Unique Keys
DESCRIPTION: Shows how to render multiple instances of the same Livewire component with unique keys to avoid conflicts.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Livewire;
use App\Livewire\Foo;

Livewire::make(Foo::class)
    ->key('foo-first')

Livewire::make(Foo::class)
    ->key('foo-second')

Livewire::make(Foo::class)
    ->key('foo-third')

----------------------------------------

TITLE: Creating Text Entries in Filament InfoList
DESCRIPTION: Demonstrates how to create basic text entries in an InfoList, including accessing relationship data using dot notation.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;

TextEntry::make('title')

TextEntry::make('author.name')

----------------------------------------

TITLE: Registering a Render Hook with View Content in PHP
DESCRIPTION: Shows how to register a render hook that renders content from a Blade view file. This example adds an impersonation banner at the start of the body.

LANGUAGE: php
CODE:
use Filament\Support\Facades\FilamentView;
use Filament\View\PanelsRenderHook;
use Illuminate\Contracts\View\View;

FilamentView::registerRenderHook(
    PanelsRenderHook::BODY_START,
    fn (): View => view('impersonation-banner'),
);

----------------------------------------

TITLE: JavaScript Date Picker Configuration - PHP
DESCRIPTION: Enabling and configuring the JavaScript-based date picker interface.

LANGUAGE: php
CODE:
use Filament\Forms\Components\DatePicker;

DatePicker::make('date_of_birth')
    ->native(false)

----------------------------------------

TITLE: Accessing Current Record in Livewire Component
DESCRIPTION: Shows methods for accessing the current record within a Livewire component using mount method or public property.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;

class Foo extends Component
{
    public function mount(Model $record): void
    {       
        // ...
    }
    
    // or
    
    public Model $record;
}

----------------------------------------

TITLE: Setting Vertical Alignment for Anonymous Actions in PHP
DESCRIPTION: This snippet illustrates how to control the vertical alignment of independent infolist actions.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Actions;
use Filament\Support\Enums\VerticalAlignment;

Actions::make([
    // ...
])->verticalAlignment(VerticalAlignment::End),

----------------------------------------

TITLE: Custom CSS Weight Class
DESCRIPTION: Shows how to use a custom CSS class for link weight customization.

LANGUAGE: blade
CODE:
<x-filament::link weight="md:font-[650]">
    New user
</x-filament::link>

----------------------------------------

TITLE: Section Component with Description in Blade
DESCRIPTION: Demonstrates how to add a description below the heading using the description slot.

LANGUAGE: blade
CODE:
<x-filament::section>
    <x-slot name="heading">
        User details
    </x-slot>

    <x-slot name="description">
        This is all the information we hold about the user.
    </x-slot>

    {{-- Content --}}
</x-filament::section>

----------------------------------------

TITLE: URL Redirect Action in PHP
DESCRIPTION: Simple action configuration that redirects to a URL when triggered. Uses a closure to generate the URL based on a post model.

LANGUAGE: php
CODE:
Action::make('edit')
    ->url(fn (): string => route('posts.edit', ['post' => $this->post]))

----------------------------------------

TITLE: Configuring Post-Replication Redirect
DESCRIPTION: Setting up custom redirect URLs after successful replication, with both static and dynamic examples.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;

ReplicateAction::make()
    ->successRedirectUrl(route('posts.list'))

ReplicateAction::make()
    ->successRedirectUrl(fn (Model $replica): string => route('posts.edit', [
        'post' => $replica,
    ]))

----------------------------------------

TITLE: Comma-separated Tags Configuration
DESCRIPTION: Configures tags input to store data as comma-separated strings instead of JSON.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TagsInput;

TagsInput::make('tags')
    ->separator(',')

----------------------------------------

TITLE: Publishing Filament v3 Configuration
DESCRIPTION: Commands to publish the new configuration file and remove the old notifications config file.

LANGUAGE: bash
CODE:
php artisan vendor:publish --tag=filament-config --force
rm config/notifications.php

----------------------------------------

TITLE: Custom Save Process Implementation
DESCRIPTION: Customization of the record update process using the using method.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;

EditAction::make()
    ->using(function (Model $record, array $data): Model {
        $record->update($data);

        return $record;
    })

----------------------------------------

TITLE: Data Mutation Before Saving
DESCRIPTION: Demonstration of modifying form data before it is saved to the database using mutateFormDataUsing method.

LANGUAGE: php
CODE:
EditAction::make()
    ->mutateFormDataUsing(function (array $data): array {
        $data['last_edited_by_id'] = auth()->id();

        return $data;
    })

----------------------------------------

TITLE: Timezone Configuration - PHP
DESCRIPTION: Setting up timezone support for date-time picker fields.

LANGUAGE: php
CODE:
use Filament\Forms\Components\DateTimePicker;

DateTimePicker::make('published_at')
    ->timezone('America/New_York')

----------------------------------------

TITLE: Creating Database Notification in Laravel Notification Class
DESCRIPTION: PHP code for creating a database notification using a traditional Laravel notification class.

LANGUAGE: php
CODE:
use App\Models\User;
use Filament\Notifications\Notification;

public function toDatabase(User $notifiable): array
{
    return Notification::make()
        ->title('Saved successfully')
        ->getDatabaseMessage();
}

----------------------------------------

TITLE: Configuring Entry Labels in Filament InfoList
DESCRIPTION: Shows how to customize entry labels and implement translation support for labels.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;

TextEntry::make('title')
    ->label('Post title')

TextEntry::make('title')
    ->translateLabel()

----------------------------------------

TITLE: Generating Filament Settings Page for FooterSettings
DESCRIPTION: Artisan command to create a new Filament settings page for the FooterSettings class. This generates a new page class in the app/Filament/Pages directory.

LANGUAGE: bash
CODE:
php artisan make:filament-settings-page ManageFooter FooterSettings

----------------------------------------

TITLE: New Project Installation Commands
DESCRIPTION: Commands to install Filament with required dependencies in a new Laravel project.

LANGUAGE: bash
CODE:
php artisan filament:install --scaffold --forms

npm install

npm run dev

----------------------------------------

TITLE: New Project Installation Commands
DESCRIPTION: Commands to install Filament with required dependencies in a new Laravel project.

LANGUAGE: bash
CODE:
php artisan filament:install --scaffold --forms

npm install

npm run dev

----------------------------------------

TITLE: Generating a Slug from a Title in PHP
DESCRIPTION: Shows how to automatically generate a slug from a title field as the user types.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;
use Filament\Forms\Set;
use Illuminate\Support\Str;

TextInput::make('title')
    ->live(onBlur: true)
    ->afterStateUpdated(fn (Set $set, ?string $state) => $set('slug', Str::slug($state)))
    
TextInput::make('slug')

----------------------------------------

TITLE: Testing Infolist Actions with Data Parameters
DESCRIPTION: Demonstrates how to test an infolist action with additional data parameters and validation checks.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can send invoices', function () {
    $invoice = Invoice::factory()->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->callInfolistAction('customer', 'send', data: [
            'email' => $email = fake()->email(),
        ])
        ->assertHasNoInfolistActionErrors();

    expect($invoice->refresh())
        ->isSent()->toBeTrue()
        ->recipient_email->toBe($email);
});

----------------------------------------

TITLE: Halting Creation Process in CreateAction in PHP
DESCRIPTION: This code demonstrates how to halt or cancel the creation process within a lifecycle hook, useful for implementing conditional logic or permissions checks.

LANGUAGE: php
CODE:
use App\Models\Post;
use Filament\Notifications\Actions\Action;
use Filament\Notifications\Notification;

CreateAction::make()
    ->before(function (CreateAction $action, Post $record) {
        if (! $record->team->subscribed()) {
            Notification::make()
                ->warning()
                ->title('You don\'t have an active subscription!')
                ->body('Choose a plan to continue.')
                ->persistent()
                ->actions([
                    Action::make('subscribe')
                        ->button()
                        ->url(route('subscribe'), shouldOpenInNewTab: true),
                ])
                ->send();
        
            $action->halt();
        }
    })

// To close the modal:
$action->cancel();

----------------------------------------

TITLE: Installing Filament Widgets
DESCRIPTION: Command to install the Widgets package for creating real-time reactive dashboard components and statistics displays.

LANGUAGE: bash
CODE:
composer require filament/widgets

----------------------------------------

TITLE: Preventing Indicator Removal in PHP for Filament Tables
DESCRIPTION: This snippet shows how to prevent users from removing a specific indicator by setting the removable property to false.

LANGUAGE: php
CODE:
use Carbon\Carbon;
use Filament\Tables\Filters\Indicator;

Indicator::make('Created from ' . Carbon::parse($data['from'])->toFormattedDateString())
    ->removable(false)

----------------------------------------

TITLE: Implementing SpatieTagsInput with Type
DESCRIPTION: Implementation of SpatieTagsInput with type specification for grouping tags into collections.

LANGUAGE: php
CODE:
use Filament\Forms\Components\SpatieTagsInput;

SpatieTagsInput::make('tags')
    ->type('categories')

----------------------------------------

TITLE: Grouping Actions in a Filament Table
DESCRIPTION: This snippet demonstrates how to group multiple table actions together in a dropdown using ActionGroup. It includes view, edit, and delete actions within the group.

LANGUAGE: php
CODE:
use Filament\Tables\Actions\ActionGroup;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Actions\EditAction;
use Filament\Tables\Actions\ViewAction;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->actions([
            ActionGroup::make([
                ViewAction::make(),
                EditAction::make(),
                DeleteAction::make(),
            ]),
            // ...
        ]);
}

----------------------------------------

TITLE: Grouping Actions in a Filament Table
DESCRIPTION: This snippet demonstrates how to group multiple table actions together in a dropdown using ActionGroup. It includes view, edit, and delete actions within the group.

LANGUAGE: php
CODE:
use Filament\Tables\Actions\ActionGroup;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Actions\EditAction;
use Filament\Tables\Actions\ViewAction;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->actions([
            ActionGroup::make([
                ViewAction::make(),
                EditAction::make(),
                DeleteAction::make(),
            ]),
            // ...
        ]);
}

----------------------------------------

TITLE: Installing Filament Actions
DESCRIPTION: Command to install the Actions package for implementing modal-based actions and tasks within Livewire components.

LANGUAGE: bash
CODE:
composer require filament/actions

----------------------------------------

TITLE: Configurable Filament Plugin Implementation in PHP
DESCRIPTION: Shows how to implement a configurable plugin with getter and setter methods for customization options. Includes example of conditional resource registration based on configuration.

LANGUAGE: php
CODE:
use DanHarrin\FilamentBlog\Resources\AuthorResource;
use Filament\Contracts\Plugin;
use Filament\Panel;

class BlogPlugin implements Plugin
{
    protected bool $hasAuthorResource = false;
    
    public function authorResource(bool $condition = true): static
    {
        $this->hasAuthorResource = $condition;
        return $this;
    }
    
    public function hasAuthorResource(): bool
    {
        return $this->hasAuthorResource;
    }
    
    public function register(Panel $panel): void
    {
        if ($this->hasAuthorResource()) {
            $panel->resources([
                AuthorResource::class,
            ]);
        }
    }
}

----------------------------------------

TITLE: Configuring Notification Alignment in PHP
DESCRIPTION: Demonstrates how to configure the alignment of notifications using the Filament Notifications API. It shows setting both horizontal and vertical alignment using enum values.

LANGUAGE: php
CODE:
use Filament\Notifications\Livewire\Notifications;
use Filament\Support\Enums\Alignment;
use Filament\Support\Enums\VerticalAlignment;

Notifications::alignment(Alignment::Start);
Notifications::verticalAlignment(VerticalAlignment::End);

----------------------------------------

TITLE: Adding URLs to InfoList Entries
DESCRIPTION: Demonstrates how to make entries clickable by adding URLs, including dynamic URL generation and new tab options.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;

TextEntry::make('title')
    ->url(fn (Post $record): string => route('posts.edit', ['post' => $record]))
    ->openUrlInNewTab()

----------------------------------------

TITLE: Implementing SpatieTagsEntry with Type
DESCRIPTION: Implementation of SpatieTagsEntry with type specification for grouped tag collections.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\SpatieTagsEntry;

SpatieTagsEntry::make('tags')
    ->type('categories')

----------------------------------------

TITLE: Generating Filament Resource with Soft Deletes
DESCRIPTION: Command to create a new Filament resource with soft delete functionality enabled.

LANGUAGE: bash
CODE:
php artisan make:filament-resource Customer --soft-deletes

----------------------------------------

TITLE: Creating an Inline Checkbox in Filament Forms
DESCRIPTION: Demonstrates how to create a checkbox with an inline label, which is the default layout mode for checkboxes in Filament.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Checkbox;

Checkbox::make('is_admin')->inline()

----------------------------------------

TITLE: Basic Text Input Column Implementation in PHP
DESCRIPTION: Creates a basic text input column for an email field in a Filament table.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextInputColumn;

TextInputColumn::make('email')

----------------------------------------

TITLE: Implementing Basic SpatieTagsEntry
DESCRIPTION: Basic implementation of the SpatieTagsEntry for infolist components.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\SpatieTagsEntry;

SpatieTagsEntry::make('tags')

----------------------------------------

TITLE: Installing Filament Actions Assets
DESCRIPTION: Command to install the Filament Actions package assets in an existing Laravel project.

LANGUAGE: bash
CODE:
php artisan filament:install --actions

----------------------------------------

TITLE: Creating Custom Theme for Filament Panel using Artisan Command
DESCRIPTION: This bash command creates a custom theme for a Filament panel. It generates necessary CSS and Tailwind configuration files in the resources directory.

LANGUAGE: bash
CODE:
php artisan make:filament-theme

----------------------------------------

TITLE: Configuring Widget Sort Order in PHP
DESCRIPTION: Sets the display order of a widget relative to other widgets on the dashboard using the $sort property.

LANGUAGE: php
CODE:
protected static ?int $sort = 2;

----------------------------------------

TITLE: Limiting Text Length and Word Count in Text Entry using PHP
DESCRIPTION: Shows methods to limit the length of text or number of words displayed in a TextEntry component.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;

TextEntry::make('description')
    ->limit(50)

TextEntry::make('description')
    ->words(10)

TextEntry::make('description')
    ->lineClamp(2)

----------------------------------------

TITLE: Custom Column Class Structure in Filament PHP
DESCRIPTION: Illustrates the structure of a custom column class generated by the Artisan command. It extends the Column class and specifies a custom view.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\Column;

class StatusSwitcher extends Column
{
    protected string $view = 'filament.tables.columns.status-switcher';
}

----------------------------------------

TITLE: Formatting Numbers and Currency in Text Columns
DESCRIPTION: This snippet demonstrates how to format numeric and currency values in text columns. It includes examples of using the numeric() and money() methods with various options.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('stock')
    ->numeric(decimalPlaces: 0)

TextColumn::make('price')
    ->money('EUR', divideBy: 100)

----------------------------------------

TITLE: Configuring Multi-column Infolist Layout in PHP
DESCRIPTION: Shows how to set up a two-column layout for infolist entries using the columns() method.

LANGUAGE: php
CODE:
$infolist
    ->schema([
        // ...
    ])
    ->columns(2);

----------------------------------------

TITLE: Creating Heading Component Class
DESCRIPTION: PHP component class implementing the heading functionality with color and level support

LANGUAGE: php
CODE:
namespace Awcodes\Headings;

use Closure;
use Filament\Forms\Components\Component;
use Filament\Support\Colors\Color;
use Filament\Support\Concerns\HasColor;

class Heading extends Component
{
    use HasColor;

    protected string | int $level = 2;

    protected string | Closure $content = '';

    protected string $view = 'headings::heading';

    final public function __construct(string | int $level)
    {
        $this->level($level);
    }

    public static function make(string | int $level): static
    {
        return app(static::class, ['level' => $level]);
    }

    protected function setUp(): void
    {
        parent::setUp();

        $this->dehydrated(false);
    }

    public function content(string | Closure $content): static
    {
        $this->content = $content;

        return $this;
    }

    public function level(string | int $level): static
    {
        $this->level = $level;

        return $this;
    }

    public function getColor(): array
    {
        return $this->evaluate($this->color) ?? Color::Amber;
    }

    public function getContent(): string
    {
        return $this->evaluate($this->content);
    }

    public function getLevel(): string
    {
        return is_int($this->level) ? 'h' . $this->level : $this->level;
    }
}

----------------------------------------

TITLE: Publishing Filament Configuration
DESCRIPTION: Command to publish Filament package configuration files.

LANGUAGE: bash
CODE:
php artisan vendor:publish --tag=filament-config

----------------------------------------

TITLE: Alternative Pagination Methods
DESCRIPTION: Examples of implementing simple pagination and cursor pagination for basic previous/next navigation.

LANGUAGE: php
CODE:
use App\Models\User;

User::query()->simplePaginate(10)
User::query()->cursorPaginate(10)

----------------------------------------

TITLE: Defining a route for a full-page Livewire component in PHP
DESCRIPTION: This code defines a route that uses the ViewProduct Livewire component as a full-page component for displaying product details.

LANGUAGE: php
CODE:
use App\Livewire\ViewProduct;
use Illuminate\Support\Facades\Route;

Route::get('products/{product}', ViewProduct::class);

----------------------------------------

TITLE: Creating a Copyable Color Entry in PHP for Filament
DESCRIPTION: This snippet shows how to create a color entry that allows the color value to be copied to the clipboard when clicked. It includes options to customize the copy confirmation message and its duration. Note that this feature requires SSL to be enabled for the application.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\ColorEntry;

ColorEntry::make('color')
    ->copyable()
    ->copyMessage('Copied!')
    ->copyMessageDuration(1500)

----------------------------------------

TITLE: Disabling Dark Mode in Filament Panel Configuration
DESCRIPTION: This PHP snippet shows how to disable dark mode switching in a Filament panel using the darkMode() method in the panel configuration.

LANGUAGE: php
CODE:
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->darkMode(false);
}

----------------------------------------

TITLE: Creating Custom Widget via CLI
DESCRIPTION: Artisan command to generate a new custom widget for the dashboard.

LANGUAGE: bash
CODE:
php artisan make:filament-widget BlogPostsOverview

----------------------------------------

TITLE: Customizing Icon Colors in PHP
DESCRIPTION: Demonstrates how to customize icon colors based on different status values using predefined color options.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\IconEntry;

IconEntry::make('status')
    ->color(fn (string $state): string => match ($state) {
        'draft' => 'info',
        'reviewing' => 'warning',
        'published' => 'success',
        default => 'gray',
    })

----------------------------------------

TITLE: Using Filament Icon Component in Blade
DESCRIPTION: Blade template snippet showing how to use the Filament icon component to allow customization of icons in plugins.

LANGUAGE: blade
CODE:
<x-filament::icon
    alias="panels::topbar.global-search.field"
    icon="heroicon-m-magnifying-glass"
    wire:target="search"
    class="h-5 w-5 text-gray-500 dark:text-gray-400"
/>

----------------------------------------

TITLE: Error State Handling with Blade Validation
DESCRIPTION: Shows how to trigger the error state using Blade validation through the valid attribute.

LANGUAGE: blade
CODE:
<x-filament::input.wrapper :valid="! $errors->has('name')">
    <x-filament::input
        type="text"
        wire:model="name"
    />
</x-filament::input.wrapper>

----------------------------------------

TITLE: Setting HTML Input Types for Text Inputs in Filament Forms
DESCRIPTION: Shows how to set different HTML input types for TextInput components, including email, numeric, integer, password, tel, and url.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;

TextInput::make('text')
    ->email() // or
    ->numeric() // or
    ->integer() // or
    ->password() // or
    ->tel() // or
    ->url()

----------------------------------------

TITLE: Setting HTML Input Types for Text Inputs in Filament Forms
DESCRIPTION: Shows how to set different HTML input types for TextInput components, including email, numeric, integer, password, tel, and url.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;

TextInput::make('text')
    ->email() // or
    ->numeric() // or
    ->integer() // or
    ->password() // or
    ->tel() // or
    ->url()

----------------------------------------

TITLE: Custom Notification Configuration for Force-Delete in PHP
DESCRIPTION: Shows how to fully customize the success notification for force-delete actions including title and body.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;

ForceDeleteAction::make()
    ->successNotification(
       Notification::make()
            ->success()
            ->title('User force-deleted')
            ->body('The user has been force-deleted successfully.'),
    )

----------------------------------------

TITLE: Testing Basic Infolist Action Calls in PHP with Pest
DESCRIPTION: Example of calling an infolist action using Pest's Livewire testing helpers to verify invoice sending functionality.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can send invoices', function () {
    $invoice = Invoice::factory()->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->callInfolistAction('customer', 'send', infolistName: 'infolist');

    expect($invoice->refresh())
        ->isSent()->toBeTrue();
});

----------------------------------------

TITLE: Accessing Current Record in a Filament Widget
DESCRIPTION: Code snippet showing how to access the current record in a widget by defining a $record property.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;

public ?Model $record = null;

----------------------------------------

TITLE: Setting Custom Font for Filament Panel in PHP
DESCRIPTION: This code shows how to change the default font used in a Filament panel. It uses the font() method to specify a Google Font and optionally set a custom font provider.

LANGUAGE: php
CODE:
use Filament\Panel;
use Filament\FontProviders\GoogleFontProvider;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->font('Poppins', provider: GoogleFontProvider::class);
}

----------------------------------------

TITLE: Configuring Database Notifications Polling
DESCRIPTION: Code to set up polling interval for database notifications in a Filament panel, with example showing 30-second polling interval.

LANGUAGE: php
CODE:
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->databaseNotifications()
        ->databaseNotificationsPolling('30s');
}

----------------------------------------

TITLE: Customizing Icon Size in PHP
DESCRIPTION: Shows how to modify the size of an icon entry using predefined size constants.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\IconEntry;

IconEntry::make('status')
    ->size(IconEntry\IconEntrySize::Medium)

----------------------------------------

TITLE: Lazy Loading Livewire Component
DESCRIPTION: Demonstrates how to enable lazy loading for a Livewire component in an infolist.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Livewire;
use App\Livewire\Foo;

Livewire::make(Foo::class)->lazy()

----------------------------------------

TITLE: Persisting Collapsed State of a Section in Filament Forms
DESCRIPTION: Demonstrates how to persist the collapsed state of a section in local storage using the persistCollapsed() method. This remembers the user's preference across page refreshes.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Section;

Section::make('Cart')
    ->description('The items you have selected for purchase')
    ->schema([
        // ...
    ])
    ->collapsible()
    ->persistCollapsed()

----------------------------------------

TITLE: Field Wrapper Component Implementation
DESCRIPTION: Example of implementing the field wrapper component for consistent field styling and structure.

LANGUAGE: blade
CODE:
<x-dynamic-component
    :component="$getFieldWrapperView()"
    :field="$field"
>
    <!-- Field -->
</x-dynamic-component>

----------------------------------------

TITLE: Base Layout Template for Livewire
DESCRIPTION: Basic HTML layout template for Livewire components with required Filament assets.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">

        <meta name="application-name" content="{{ config('app.name') }}">
        <meta name="csrf-token" content="{{ csrf_token() }}">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>{{ config('app.name') }}</title>

        <style>
            [x-cloak] {
                display: none !important;
            }
        </style>

        @filamentStyles
        @vite('resources/css/app.css')
    </head>

    <body class="antialiased">
        {{ $slot }}

        @filamentScripts
        @vite('resources/js/app.js')
    </body>
</html>

----------------------------------------

TITLE: Customizable Pagination Component with Page Options
DESCRIPTION: Blade template implementation showing how to render pagination with customizable page size options.

LANGUAGE: blade
CODE:
<x-filament::pagination
    :paginator="$users"
    :page-options="[5, 10, 20, 50, 100, 'all']"
    :current-page-option-property="perPage"
/>

----------------------------------------

TITLE: Setting Up Redirect After Creation in PHP
DESCRIPTION: This snippet shows how to set up a custom redirect after a record is successfully created, using either a static route or a dynamic one based on the created record.

LANGUAGE: php
CODE:
CreateAction::make()
    ->successRedirectUrl(route('posts.list'))

// Or with dynamic routing:
use Illuminate\Database\Eloquent\Model;

CreateAction::make()
    ->successRedirectUrl(fn (Model $record): string => route('posts.edit', [
        'post' => $record,
    ]))

----------------------------------------

TITLE: Testing Exact Notification Content with Livewire in PHP
DESCRIPTION: This snippet demonstrates how to test for an exact notification, including its type, title, and body. It uses the Notification::make() method to create a specific notification for comparison.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;
use function Pest\Livewire\livewire;

it('sends a notification', function () {
    livewire(CreatePost::class)
        ->assertNotified(
            Notification::make()
                ->danger()
                ->title('Unable to create post')
                ->body('Something went wrong.'),
        );
});

----------------------------------------

TITLE: Creating a Basic Wizard in Filament PHP
DESCRIPTION: Demonstrates how to create a simple multi-step wizard form using Filament's Wizard component. It includes three steps: Order, Delivery, and Billing.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Wizard;

Wizard::make([
    Wizard\Step::make('Order')
        ->schema([
            // ...
        ]),
    Wizard\Step::make('Delivery')
        ->schema([
            // ...
        ]),
    Wizard\Step::make('Billing')
        ->schema([
            // ...
        ]),
])

----------------------------------------

TITLE: Creating a Basic Wizard in Filament PHP
DESCRIPTION: Demonstrates how to create a simple multi-step wizard form using Filament's Wizard component. It includes three steps: Order, Delivery, and Billing.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Wizard;

Wizard::make([
    Wizard\Step::make('Order')
        ->schema([
            // ...
        ]),
    Wizard\Step::make('Delivery')
        ->schema([
            // ...
        ]),
    Wizard\Step::make('Billing')
        ->schema([
            // ...
        ]),
])

----------------------------------------

TITLE: Customizing Boolean Icons in PHP
DESCRIPTION: Shows how to customize the icons used for true and false states in a boolean icon entry.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\IconEntry;

IconEntry::make('is_featured')
    ->boolean()
    ->trueIcon('heroicon-o-check-badge')
    ->falseIcon('heroicon-o-x-mark')

----------------------------------------

TITLE: Enabling Unsaved Changes Alerts in a Filament Panel
DESCRIPTION: This snippet demonstrates how to enable alerts for unsaved changes when navigating away from a page in a Filament panel.

LANGUAGE: php
CODE:
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->unsavedChangesAlerts();
}

----------------------------------------

TITLE: Customizing Boolean Colors in PHP
DESCRIPTION: Demonstrates how to customize the colors for true and false states in a boolean icon entry.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\IconEntry;

IconEntry::make('is_featured')
    ->boolean()
    ->trueColor('info')
    ->falseColor('warning')

----------------------------------------

TITLE: Setting Horizontal Alignment for Anonymous Actions in PHP
DESCRIPTION: This code demonstrates how to control the horizontal alignment of independent infolist actions.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Actions;
use Filament\Support\Enums\Alignment;

Actions::make([
    // ...
])->alignment(Alignment::Center),

----------------------------------------

TITLE: Rendering a Livewire component in Blade
DESCRIPTION: This Blade directive renders the ViewProduct Livewire component on a page.

LANGUAGE: blade
CODE:
@livewire('view-product')

----------------------------------------

TITLE: Setting a Domain for a Filament Panel in Laravel
DESCRIPTION: This code shows how to scope a Filament panel to a specific domain using the domain() method in the panel configuration.

LANGUAGE: php
CODE:
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->domain('admin.example.com');
}

----------------------------------------

TITLE: Injecting Livewire Component Instance in PHP Action Configuration
DESCRIPTION: This code demonstrates how to access the current Livewire component instance within a Filament action configuration. It enables interaction with the component's properties and methods.

LANGUAGE: php
CODE:
use Livewire\Component;

function (Component $livewire) {
    // ...
}

----------------------------------------

TITLE: Adding Badge to Icon Button in Blade
DESCRIPTION: Shows how to add a badge to an icon button using the 'badge' slot and how to change the badge color using the 'badge-color' attribute.

LANGUAGE: blade
CODE:
<x-filament::icon-button
    icon="heroicon-m-x-mark"
    label="Mark notifications as read"
>
    <x-slot name="badge">
        3
    </x-slot>
</x-filament::icon-button>

LANGUAGE: blade
CODE:
<x-filament::icon-button
    icon="heroicon-m-x-mark"
    label="Mark notifications as read"
    badge-color="danger"
>
    <x-slot name="badge">
        3
    </x-slot>
</x-filament::icon-button>

----------------------------------------

TITLE: Testing Form Field Existence in Filament
DESCRIPTION: Shows how to use assertFormFieldExists() and assertFormFieldDoesNotExist() to check for the presence or absence of form fields.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('has a title field', function () {
    livewire(CreatePost::class)
        ->assertFormFieldExists('title');
});

it('does not have a conditional field', function () {
    livewire(CreatePost::class)
        ->assertFormFieldDoesNotExist('no-such-field');
});

----------------------------------------

TITLE: Registering Plugin Assets in PHP
DESCRIPTION: Shows how to register assets specifically for a Filament plugin by providing the Composer package name. This ensures assets are placed in a unique directory to avoid conflicts.

LANGUAGE: php
CODE:
use Filament\Support\Facades\FilamentAsset;

FilamentAsset::register([
    // ...
], package: 'danharrin/filament-blog');

----------------------------------------

TITLE: Creating a Filament Cluster using Artisan Command
DESCRIPTION: This command demonstrates how to create a new Filament cluster using the artisan make:filament-cluster command.

LANGUAGE: bash
CODE:
php artisan make:filament-cluster Settings

----------------------------------------

TITLE: Square Image Configuration
DESCRIPTION: Setting up image display with 1:1 aspect ratio.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\ImageEntry;

ImageEntry::make('author.avatar')
    ->height(40)
    ->square()

----------------------------------------

TITLE: Link with Tooltip
DESCRIPTION: Demonstrates how to add a tooltip to a link using the tooltip attribute.

LANGUAGE: blade
CODE:
<x-filament::link tooltip="Register a user">
    New user
</x-filament::link>

----------------------------------------

TITLE: Installing Filament Panel Builder
DESCRIPTION: Command to install the main Filament package which provides the Panel Builder functionality for creating Laravel admin panels and SaaS platforms.

LANGUAGE: bash
CODE:
composer require filament/filament

----------------------------------------

TITLE: Rendering Basic Icon Button in Blade
DESCRIPTION: Demonstrates how to render a basic clickable icon button that can perform an action. The example uses a plus icon and a wire:click event.

LANGUAGE: blade
CODE:
<x-filament::icon-button
    icon="heroicon-m-plus"
    wire:click="openNewUserModal"
    label="New label"
/>

----------------------------------------

TITLE: Configuring Filament Plugin Skeleton in Bash
DESCRIPTION: Command to run the configuration script for the Filament Plugin Skeleton. This script sets up the initial structure and configuration for a new Filament plugin.

LANGUAGE: bash
CODE:
php ./configure.php

----------------------------------------

TITLE: Action Form Method (v3 Style)
DESCRIPTION: Updated v3 implementation using Closure::fromCallable for action methods with forms.

LANGUAGE: php
CODE:
Action::make('import_data')
    ->action(Closure::fromCallable([$this, 'importData']))

----------------------------------------

TITLE: Customizing Record Data Before Form Filling in PHP
DESCRIPTION: This snippet illustrates how to modify the data from a record before it is filled into the form using the mutateRecordDataUsing() method. It shows an example of adding a user_id to the data array.

LANGUAGE: php
CODE:
ViewAction::make()
    ->mutateRecordDataUsing(function (array $data): array {
        $data['user_id'] = auth()->id();

        return $data;
    })

----------------------------------------

TITLE: Nesting Components within Infolist Sections
DESCRIPTION: Illustrates how to nest different entry types within a section component, combining image and text entries.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\ImageEntry;
use Filament\Infolists\Components\Section;
use Filament\Infolists\Components\TextEntry;

Section::make('Media')
    ->description('Images used in the page layout.')
    ->schema([
        ImageEntry::make('hero_image'),
        TextEntry::make('alt_text'),
    ])

----------------------------------------

TITLE: Customizing Builder Block Labels in PHP
DESCRIPTION: This snippet shows how to customize the label of a Builder block using the label() method. It demonstrates setting a custom label and using a translation string for localization.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Builder;

Builder\Block::make('heading')
    ->label(__('blocks.heading'))

----------------------------------------

TITLE: Registering Asynchronous Alpine.js Components in PHP
DESCRIPTION: Shows how to register asynchronous Alpine.js components using the AlpineComponent class. This allows Filament to manage and load these components efficiently.

LANGUAGE: php
CODE:
use Filament\Support\Assets\AlpineComponent;
use Filament\Support\Facades\FilamentAsset;

FilamentAsset::register([
    AlpineComponent::make('test-component', __DIR__ . '/../../resources/js/dist/components/test-component.js'),
]);

----------------------------------------

TITLE: Creating a Tenant Registration Page in Filament
DESCRIPTION: Example of creating a custom tenant (team) registration page in Filament.

LANGUAGE: php
CODE:
namespace App\Filament\Pages\Tenancy;

use App\Models\Team;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Pages\Tenancy\RegisterTenant;

class RegisterTeam extends RegisterTenant
{
    public static function getLabel(): string
    {
        return 'Register team';
    }

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                TextInput::make('name'),
                // ...
            ]);
    }

    protected function handleRegistration(array $data): Team
    {
        $team = Team::create($data);

        $team->members()->attach(auth()->user());

        return $team;
    }
}

----------------------------------------

TITLE: Customizing Fieldset Grid Columns in Filament PHP
DESCRIPTION: Shows how to customize the grid column layout within a fieldset using the columns() method. This allows for flexible arrangement of content beyond the default two-column layout.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Fieldset;

Fieldset::make('Label')
    ->schema([
        // ...
    ])
    ->columns(3)

----------------------------------------

TITLE: Disabled Input Wrapper Configuration
DESCRIPTION: Shows how to properly disable both the wrapper and the input component.

LANGUAGE: blade
CODE:
<x-filament::input.wrapper disabled>
    <x-filament::input
        type="text"
        wire:model="name"
        disabled
    />
</x-filament::input.wrapper>

----------------------------------------

TITLE: Composer Post-autoload Configuration
DESCRIPTION: JSON configuration for automatically running Filament upgrade command after composer updates.

LANGUAGE: json
CODE:
"post-autoload-dump": [
    "@php artisan filament:upgrade"
]

----------------------------------------

TITLE: Grouping Bulk Actions in a Filament Table
DESCRIPTION: This code snippet shows how to group multiple bulk actions together in a dropdown using BulkActionGroup. It also demonstrates how to add a separate bulk action outside the group.

LANGUAGE: php
CODE:
use Filament\Tables\Actions\BulkAction;
use Filament\Tables\Actions\BulkActionGroup;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->bulkActions([
            BulkActionGroup::make([
                BulkAction::make('delete')
                    ->requiresConfirmation()
                    ->action(fn (Collection $records) => $records->each->delete()),
                BulkAction::make('forceDelete')
                    ->requiresConfirmation()
                    ->action(fn (Collection $records) => $records->each->forceDelete()),
            ]),
            BulkAction::make('export')->button()->action(fn (Collection $records) => ...),
        ]);
}

----------------------------------------

TITLE: Stats Widget with Custom Icon Position - Filament PHP
DESCRIPTION: Example showing how to customize icon position in stats description

LANGUAGE: php
CODE:
Stat::make('Unique views', '192.1k')
    ->description('32k increase')
    ->descriptionIcon('heroicon-m-arrow-trending-up', IconPosition::Before)

----------------------------------------

TITLE: Creating an Anchor Link Button in Blade
DESCRIPTION: This example shows how to create a button that functions as an anchor link. It uses the 'tag' attribute to change the underlying HTML element to an <a> tag.

LANGUAGE: blade
CODE:
<x-filament::button
    href="https://filamentphp.com"
    tag="a"
>
    Filament
</x-filament::button>

----------------------------------------

TITLE: Publishing Filament Spatie Translatable Plugin Translations
DESCRIPTION: Artisan command to publish language files for the Filament Spatie Translatable Plugin. This allows customization of the plugin's translations.

LANGUAGE: bash
CODE:
php artisan vendor:publish --tag=filament-spatie-laravel-translatable-plugin-translations

----------------------------------------

TITLE: Registering Assets with FilamentAsset Facade in PHP
DESCRIPTION: Demonstrates how to use the FilamentAsset facade to register assets in a service provider's boot method. This is the primary way to add CSS and JavaScript files to a Filament project.

LANGUAGE: php
CODE:
use Filament\Support\Facades\FilamentAsset;

public function boot(): void
{
    // ...
    
    FilamentAsset::register([
        // ...
    ]);
    
    // ...
}

----------------------------------------

TITLE: Installing Filament Upgrade Tool
DESCRIPTION: Commands to install and run the automated upgrade script for converting Filament v2.x to v3.x

LANGUAGE: bash
CODE:
composer require filament/upgrade:"^3.2" -W --dev

vendor/bin/filament-v3

----------------------------------------

TITLE: Custom Infolist Layout Component Class in PHP
DESCRIPTION: This snippet shows the structure of a custom infolist layout component class. It extends the Component class and specifies the view file to be used for rendering.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Component;

class Box extends Component
{
    protected string $view = 'filament.infolists.components.box';

    public static function make(): static
    {
        return app(static::class);
    }
}

----------------------------------------

TITLE: Basic Dropdown Menu Implementation in Blade
DESCRIPTION: Creates a basic dropdown menu with a trigger button and list items for view, edit, and delete actions.

LANGUAGE: blade
CODE:
<x-filament::dropdown>
    <x-slot name="trigger">
        <x-filament::button>
            More actions
        </x-filament::button>
    </x-slot>
    
    <x-filament::dropdown.list>
        <x-filament::dropdown.list.item wire:click="openViewModal">
            View
        </x-filament::dropdown.list.item>
        
        <x-filament::dropdown.list.item wire:click="openEditModal">
            Edit
        </x-filament::dropdown.list.item>
        
        <x-filament::dropdown.list.item wire:click="openDeleteModal">
            Delete
        </x-filament::dropdown.list.item>
    </x-filament::dropdown.list>
</x-filament::dropdown>

----------------------------------------

TITLE: JavaScript-Enhanced Select Implementation
DESCRIPTION: Implementation of a select input with JavaScript enhancement enabled using native(false) method

LANGUAGE: php
CODE:
use Filament\Forms\Components\Select;

Select::make('status')
    ->options([
        'draft' => 'Draft',
        'reviewing' => 'Reviewing',
        'published' => 'Published',
    ])
    ->native(false)

----------------------------------------

TITLE: Removing Container Styling from Repeatable Entry
DESCRIPTION: Demonstrates how to remove the default card-style container from repeatable entry items using the contained() method.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\RepeatableEntry;

RepeatableEntry::make('comments')
    ->schema([
        // ...
    ])
    ->contained(false)

----------------------------------------

TITLE: Sending Broadcast Notifications with Filament's notify() Method in PHP
DESCRIPTION: This snippet shows how to send a broadcast notification using the notify() method on a recipient object. It creates a notification with a title and prepares it for broadcasting.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;

$recipient = auth()->user();

$recipient->notify(
    Notification::make()
        ->title('Saved successfully')
        ->toBroadcast(),
)

----------------------------------------

TITLE: Adding Tooltip to Icon Button in Blade
DESCRIPTION: Demonstrates how to add a tooltip to an icon button using the 'tooltip' attribute.

LANGUAGE: blade
CODE:
<x-filament::icon-button
    icon="heroicon-m-plus"
    tooltip="Register a user"
    label="New label"
/>

----------------------------------------

TITLE: Adding Text Affixes to Input
DESCRIPTION: Demonstrates how to add prefix and suffix text content to the input wrapper.

LANGUAGE: blade
CODE:
<x-filament::input.wrapper>
    <x-slot name="prefix">
        https://
    </x-slot>

    <x-filament::input
        type="text"
        wire:model="domain"
    />

    <x-slot name="suffix">
        .com
    </x-slot>
</x-filament::input.wrapper>

----------------------------------------

TITLE: Adding Filament Upgrade Command to Composer
DESCRIPTION: JSON configuration to add the Filament upgrade command to Composer's post-autoload-dump scripts for automatic upgrades.

LANGUAGE: json
CODE:
"post-autoload-dump": [
    // ...
    "@php artisan filament:upgrade"
],

----------------------------------------

TITLE: Setting up Package.json Dependencies
DESCRIPTION: NPM package configuration for CSS processing dependencies including postcss and cssnano

LANGUAGE: json
CODE:
{
    "private": true,
    "scripts": {
        "build": "postcss resources/css/index.css -o resources/dist/headings.css"
    },
    "devDependencies": {
        "cssnano": "^6.0.1",
        "postcss": "^8.4.27",
        "postcss-cli": "^10.1.0",
        "postcss-nesting": "^13.0.0"
    }
}

----------------------------------------

TITLE: Custom Component Action Integration in Blade
DESCRIPTION: Demonstrates how to render a custom action within a Blade template using x-data binding.

LANGUAGE: blade
CODE:
<div x-data="{ state: $wire.$entangle('{{ $getStatePath() }}') }">
    <input x-model="state" type="range" />
    
    {{ $getAction('setMaximum') }}
</div>

----------------------------------------

TITLE: DateTimePicker Configuration Example
DESCRIPTION: Example of configuring a DateTimePicker form field to use the legacy picker instead of the native browser picker

LANGUAGE: php
CODE:
use Filament\Forms\Components\DateTimePicker;

DateTimePicker::make('published_at')
    ->native(false)

----------------------------------------

TITLE: Rendering Component Schema in Blade Template
DESCRIPTION: This Blade snippet demonstrates how to render the component's schema within a custom layout view using the $getChildComponentContainer() function.

LANGUAGE: blade
CODE:
<div>
    {{ $getChildComponentContainer() }}
</div>

----------------------------------------

TITLE: Setting Maximum Height for Filter Dropdown in Filament Tables
DESCRIPTION: This snippet demonstrates how to add a maximum height to the filters' dropdown content in a Filament table, allowing it to scroll using the filtersFormMaxHeight() method.

LANGUAGE: php
CODE:
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->filters([
            // ...
        ])
        ->filtersFormMaxHeight('400px');
}

----------------------------------------

TITLE: Rendering a Hook in Blade
DESCRIPTION: Shows how to render a registered hook within a Blade template. This is useful for plugin developers who want to expose render hooks to their users.

LANGUAGE: blade
CODE:
{{ \Filament\Support\Facades\FilamentView::renderHook(\Filament\View\PanelsRenderHook::PAGE_START) }}

----------------------------------------

TITLE: Custom Group Label Configuration in Filament
DESCRIPTION: Demonstrates how to customize group labels using a Group object with the label() method.

LANGUAGE: php
CODE:
use Filament\Tables\Grouping\Group;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->groups([
            Group::make('author.name')
                ->label('Author name'),
        ]);
}

----------------------------------------

TITLE: Basic Filament Cluster Class Structure
DESCRIPTION: This snippet shows the basic structure of a Filament cluster class. It includes the namespace, extends the Cluster class, and defines a navigation icon.

LANGUAGE: php
CODE:
<?php

namespace App\Filament\Clusters;

use Filament\Clusters\Cluster;

class Settings extends Cluster
{
    protected static ?string $navigationIcon = 'heroicon-o-squares-2x2';
}

----------------------------------------

TITLE: Configuring Media Collection and Storage
DESCRIPTION: Examples of configuring media collections and storage options for file uploads

LANGUAGE: php
CODE:
use Filament\Forms\Components\SpatieMediaLibraryFileUpload;

SpatieMediaLibraryFileUpload::make('avatar')
    ->collection('avatars')

LANGUAGE: php
CODE:
use Filament\Forms\Components\FileUpload;

FileUpload::make('attachment')
    ->disk('s3')

----------------------------------------

TITLE: Rendering Database Notifications Modal in Blade
DESCRIPTION: Livewire component to render the database notifications modal in a Blade layout.

LANGUAGE: blade
CODE:
@livewire('database-notifications')

----------------------------------------

TITLE: Registering Custom Navigation Items in PHP
DESCRIPTION: Shows how to register custom navigation items using the navigationItems() method in the panel configuration.

LANGUAGE: php
CODE:
use Filament\Navigation\NavigationItem;
use Filament\Pages\Dashboard;
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->navigationItems([
            NavigationItem::make('Analytics')
                ->url('https://filament.pirsch.io', shouldOpenInNewTab: true)
                ->icon('heroicon-o-presentation-chart-line')
                ->group('Reports')
                ->sort(3),
            NavigationItem::make('dashboard')
                ->label(fn (): string => __('filament-panels::pages/dashboard.title'))
                ->url(fn (): string => Dashboard::getUrl())
                ->isActiveWhen(fn () => request()->routeIs('filament.admin.pages.dashboard')),
            // ...
        ]);
}

----------------------------------------

TITLE: Registering CSS Files in PHP
DESCRIPTION: Demonstrates how to register CSS files using the Css class. This allows Filament to manage and load stylesheets for your project or plugin.

LANGUAGE: php
CODE:
use Filament\Support\Assets\Css;
use Filament\Support\Facades\FilamentAsset;

FilamentAsset::register([
    Css::make('custom-stylesheet', __DIR__ . '/../../resources/css/custom.css'),
]);

----------------------------------------

TITLE: Basic Livewire Component Integration in Filament Infolist
DESCRIPTION: Demonstrates the basic integration of a Livewire component into a Filament infolist using the Livewire component class.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Livewire;
use App\Livewire\Foo;

Livewire::make(Foo::class)

----------------------------------------

TITLE: Publishing Spatie Tags Migrations
DESCRIPTION: Command to publish the migration files for creating the tags table.

LANGUAGE: bash
CODE:
php artisan vendor:publish --provider="Spatie\Tags\TagsServiceProvider" --tag="tags-migrations"

----------------------------------------

TITLE: Making Filament Resource View Page Translatable
DESCRIPTION: PHP code showing how to make a Filament resource's View page translatable by applying the Translatable trait and adding a LocaleSwitcher action. This enables language switching on the view page.

LANGUAGE: php
CODE:
use Filament\Actions;
use Filament\Resources\Pages\ViewRecord;

class ViewBlogPost extends ViewRecord
{
    use ViewRecord\Concerns\Translatable;
    
    protected function getHeaderActions(): array
    {
        return [
            Actions\LocaleSwitcher::make(),
            // ...
        ];
    }
    
    // ...
}

----------------------------------------

TITLE: Implementing Table and Infolist Components
DESCRIPTION: Examples of using SpatieMediaLibrary components in tables and infolists

LANGUAGE: php
CODE:
use Filament\Tables\Columns\SpatieMediaLibraryImageColumn;

SpatieMediaLibraryImageColumn::make('avatar')

LANGUAGE: php
CODE:
use Filament\Infolists\Components\SpatieMediaLibraryImageEntry;

SpatieMediaLibraryImageEntry::make('avatar')

----------------------------------------

TITLE: Adding Extra HTML Attributes to a Section Component in PHP
DESCRIPTION: Illustrates how to add extra HTML attributes to a Section component using the extraAttributes() method.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Group;

Section::make()
    ->extraAttributes(['class' => 'custom-section-style'])

----------------------------------------

TITLE: Adding Tooltips to Buttons in Blade
DESCRIPTION: This snippet shows how to add a tooltip to a button using the 'tooltip' attribute.

LANGUAGE: blade
CODE:
<x-filament::button tooltip="Register a user">
    New user
</x-filament::button>

----------------------------------------

TITLE: Custom Chart.js Plugin Integration - JavaScript
DESCRIPTION: JavaScript code for integrating custom Chart.js plugins with Filament

LANGUAGE: javascript
CODE:
import ChartDataLabels from 'chartjs-plugin-datalabels'

window.filamentChartJsPlugins ??= []
window.filamentChartJsPlugins.push(ChartDataLabels)

----------------------------------------

TITLE: Generating Table Component via CLI - Bash
DESCRIPTION: CLI command to generate a table Livewire component with optional automatic column generation.

LANGUAGE: bash
CODE:
php artisan make:livewire-table Products/ListProducts

LANGUAGE: bash
CODE:
php artisan make:livewire-table Products/ListProducts --generate

----------------------------------------

TITLE: Stats Widget with Descriptions and Icons - Filament PHP
DESCRIPTION: Enhanced stats widget implementation showing how to add descriptions and icons to stats

LANGUAGE: php
CODE:
protected function getStats(): array
{
    return [
        Stat::make('Unique views', '192.1k')
            ->description('32k increase')
            ->descriptionIcon('heroicon-m-arrow-trending-up'),
        Stat::make('Bounce rate', '21%')
            ->description('7% decrease')
            ->descriptionIcon('heroicon-m-arrow-trending-down'),
        Stat::make('Average time on page', '3:12')
            ->description('3% increase')
            ->descriptionIcon('heroicon-m-arrow-trending-up'),
    ];
}

----------------------------------------

TITLE: Configuring Full-page Component Route (PHP)
DESCRIPTION: Route configuration for a full-page Livewire component using Laravel's routing system.

LANGUAGE: php
CODE:
use App\Livewire\ManageProduct;
use Illuminate\Support\Facades\Route;

Route::get('products/{product}/manage', ManageProduct::class);

----------------------------------------

TITLE: Using Asynchronous Alpine.js Components in Blade
DESCRIPTION: Demonstrates how to use asynchronous Alpine.js components in Blade templates. This example shows how to load and initialize a custom component with state management.

LANGUAGE: blade
CODE:
<div
    x-load
    x-load-src="{{ \Filament\Support\Facades\FilamentAsset::getAlpineComponentSrc('test-component') }}"
    x-data="testComponent({
        state: $wire.{{ $applyStateBindingModifiers("\$entangle('{$statePath}')") }},
    })"
>
    <input x-model="state" />
</div>

----------------------------------------

TITLE: Parameter Handling via Public Properties
DESCRIPTION: Demonstrates parameter access using public properties in a Livewire component.

LANGUAGE: php
CODE:
class Foo extends Component
{
    public string $bar;
}

----------------------------------------

TITLE: Positioning Row Actions Before Columns in a Filament Table
DESCRIPTION: This code snippet shows how to position row actions before the columns in a Filament table using the position argument with ActionsPosition::BeforeColumns.

LANGUAGE: php
CODE:
use Filament\Tables\Enums\ActionsPosition;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->actions([
            // ...
        ], position: ActionsPosition::BeforeColumns);
}

----------------------------------------

TITLE: Icon Integration in Badge Component
DESCRIPTION: Shows how to add icons to badges using the 'icon' attribute with Blade Icons integration.

LANGUAGE: blade
CODE:
<x-filament::badge icon="heroicon-m-sparkles">
    New
</x-filament::badge>

----------------------------------------

TITLE: Tailwind CSS Configuration
DESCRIPTION: Configuration file for Tailwind CSS including Filament preset and content paths.

LANGUAGE: javascript
CODE:
import preset from './vendor/filament/support/tailwind.config.preset'

export default {
    presets: [preset],
    content: [
        './app/Filament/**/*.php',
        './resources/views/filament/**/*.blade.php',
        './vendor/filament/**/*.blade.php',
    ],
}

----------------------------------------

TITLE: Disabling Grammarly Integration in Rich Editor
DESCRIPTION: Demonstrates how to disable Grammarly integration in the Rich Editor component to prevent it from analyzing the editor's contents.

LANGUAGE: php
CODE:
use Filament\Forms\Components\RichEditor;

RichEditor::make('content')
    ->disableGrammarly()

----------------------------------------

TITLE: Generating Livewire Component - Bash
DESCRIPTION: Command to generate a new Livewire component for form handling

LANGUAGE: bash
CODE:
php artisan make:livewire CreatePost

----------------------------------------

TITLE: Changing Icon Button Colors in Blade
DESCRIPTION: Shows how to change the color of icon buttons using the 'color' attribute. Available options include 'danger', 'gray', 'info', 'success', and 'warning'.

LANGUAGE: blade
CODE:
<x-filament::icon-button
    icon="heroicon-m-plus"
    color="danger"
    label="New label"
/>

<x-filament::icon-button
    icon="heroicon-m-plus"
    color="gray"
    label="New label"
/>

<x-filament::icon-button
    icon="heroicon-m-plus"
    color="info"
    label="New label"
/>

<x-filament::icon-button
    icon="heroicon-m-plus"
    color="success"
    label="New label"
/>

<x-filament::icon-button
    icon="heroicon-m-plus"
    color="warning"
    label="New label"
/>

----------------------------------------

TITLE: Route Definition - PHP
DESCRIPTION: Laravel route configuration for full-page Livewire component

LANGUAGE: php
CODE:
use App\Livewire\CreatePost;
use Illuminate\Support\Facades\Route;

Route::get('posts/create', CreatePost::class);

----------------------------------------

TITLE: Publishing Blade Icons Configuration
DESCRIPTION: Command to publish the Blade Icons configuration file for customizing icon settings.

LANGUAGE: bash
CODE:
php artisan vendor:publish --tag=blade-icons

----------------------------------------

TITLE: Toggle Buttons with Icons
DESCRIPTION: Shows how to add Blade icons to toggle button options using the icons() method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\ToggleButtons;

ToggleButtons::make('status')
    ->options([
        'draft' => 'Draft',
        'scheduled' => 'Scheduled',
        'published' => 'Published'
    ])
    ->icons([
        'draft' => 'heroicon-o-pencil',
        'scheduled' => 'heroicon-o-clock',
        'published' => 'heroicon-o-check-circle',
    ])

----------------------------------------

TITLE: Installing Filament Notifications via Composer
DESCRIPTION: Command to install the Filament Notifications package using Composer package manager.

LANGUAGE: bash
CODE:
composer require filament/notifications:"^3.3" -W

----------------------------------------

TITLE: Setting Default Active Tab in Filament Forms
DESCRIPTION: This code snippet shows how to set a specific tab as the default active tab using the activeTab() method. In this example, the second tab (index 2) is set as the default active tab.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Tabs;

Tabs::make('Tabs')
    ->tabs([
        Tabs\Tab::make('Tab 1')
            ->schema([
                // ...
            ]),
        Tabs\Tab::make('Tab 2')
            ->schema([
                // ...
            ]),
        Tabs\Tab::make('Tab 3')
            ->schema([
                // ...
            ]),
    ])
    ->activeTab(2)

----------------------------------------

TITLE: Setting Default Active Tab in Filament Forms
DESCRIPTION: This code snippet shows how to set a specific tab as the default active tab using the activeTab() method. In this example, the second tab (index 2) is set as the default active tab.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Tabs;

Tabs::make('Tabs')
    ->tabs([
        Tabs\Tab::make('Tab 1')
            ->schema([
                // ...
            ]),
        Tabs\Tab::make('Tab 2')
            ->schema([
                // ...
            ]),
        Tabs\Tab::make('Tab 3')
            ->schema([
                // ...
            ]),
    ])
    ->activeTab(2)

----------------------------------------

TITLE: Setting Default Values for Custom Filter Fields in PHP
DESCRIPTION: This snippet shows how to set a default value for a custom filter field using the default() method on a DatePicker component.

LANGUAGE: php
CODE:
use Filament\Forms\Components\DatePicker;
use Filament\Tables\Filters\Filter;

Filter::make('created_at')
    ->form([
        DatePicker::make('created_from'),
        DatePicker::make('created_until')
            ->default(now()),
    ])

----------------------------------------

TITLE: Adding Badge to Navigation Item in PHP
DESCRIPTION: Demonstrates how to add a badge to a navigation item by implementing the getNavigationBadge() method.

LANGUAGE: php
CODE:
public static function getNavigationBadge(): ?string
{
    return static::getModel()::count();
}

----------------------------------------

TITLE: Dropdown Item with Image
DESCRIPTION: Shows how to add a circular image to a dropdown item.

LANGUAGE: blade
CODE:
<x-filament::dropdown.list.item image="https://filamentphp.com/dan.jpg">
    Dan Harrin
</x-filament::dropdown.list.item>

----------------------------------------

TITLE: Installing Filament Infolists
DESCRIPTION: Command to install the Infolists package for displaying read-only record information with flexible layouts.

LANGUAGE: bash
CODE:
composer require filament/infolists

----------------------------------------

TITLE: Configuring DateTimePicker in Filament v3
DESCRIPTION: Example of configuring a DateTimePicker component with non-native browser picker in Filament v3.

LANGUAGE: php
CODE:
use Filament\Forms\Components\DateTimePicker;

DateTimePicker::make('published_at')
    ->native(false)

----------------------------------------

TITLE: Custom HTML View Component
DESCRIPTION: Example of implementing custom HTML in table layouts using View components with record access.

LANGUAGE: blade
CODE:
<p class="px-4 py-3 bg-gray-100 rounded-lg">
    <span class="font-medium">
        Email address:
    </span>

    <span>
        {{ $getRecord()->email }}
    </span>
</p>

----------------------------------------

TITLE: Tab Persistence Configuration
DESCRIPTION: Shows how to persist tab state in browser storage and URL query string, with options for customizing storage keys.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Tabs;

Tabs::make('Tabs')
    ->tabs([
        // ...
    ])
    ->persistTab()
    ->id('order-tabs')
    ->persistTabInQueryString('settings-tab')

----------------------------------------

TITLE: Basic Input Wrapper Usage with Text and Select Inputs
DESCRIPTION: Demonstrates basic usage of the input wrapper component with both text input and select elements.

LANGUAGE: blade
CODE:
<x-filament::input.wrapper>
    <x-filament::input
        type="text"
        wire:model="name"
    />
</x-filament::input.wrapper>

<x-filament::input.wrapper>
    <x-filament::input.select wire:model="status">
        <option value="draft">Draft</option>
        <option value="reviewing">Reviewing</option>
        <option value="published">Published</option>
    </x-filament::input.select>
</x-filament::input.wrapper>

----------------------------------------

TITLE: Disabled Options in Toggle Buttons
DESCRIPTION: Shows how to disable specific toggle button options using a closure condition.

LANGUAGE: php
CODE:
use Filament\Forms\Components\ToggleButtons;

ToggleButtons::make('status')
    ->options([
        'draft' => 'Draft',
        'scheduled' => 'Scheduled',
        'published' => 'Published',
    ])
    ->disableOptionWhen(fn (string $value): bool => $value === 'published')

----------------------------------------

TITLE: Creating a Compact Section in Filament Forms
DESCRIPTION: Shows how to use compact styling for nested sections using the compact() method. This provides a more condensed layout for sub-sections.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;

Section::make('Rate limiting')
    ->description('Prevent abuse by limiting the number of requests per period')
    ->schema([
        // ...
    ])
    ->compact()

----------------------------------------

TITLE: Styling Heading Component
DESCRIPTION: CSS styles for the heading component with responsive typography

LANGUAGE: css
CODE:
.headings-component {
    &:is(h1, h2, h3, h4, h5, h6) {
         font-weight: 700;
         letter-spacing: -.025em;
         line-height: 1.1;
     }

    &h1 {
         font-size: 2rem;
     }

    &h2 {
         font-size: 1.75rem;
     }

    &h3 {
         font-size: 1.5rem;
     }

    &h4 {
         font-size: 1.25rem;
     }

    &h5,
    &h6 {
         font-size: 1rem;
     }
}

----------------------------------------

TITLE: Accessing Current Action Instance in PHP Filament Configuration
DESCRIPTION: This snippet shows how to inject the current action instance into a configuration function in Filament. It allows for introspection and modification of the action itself.

LANGUAGE: php
CODE:
function (Action $action) {
    // ...
}

----------------------------------------

TITLE: PostCSS Configuration
DESCRIPTION: PostCSS configuration file with required plugins for Tailwind CSS.

LANGUAGE: javascript
CODE:
export default {
    plugins: {
        'tailwindcss/nesting': 'postcss-nesting',
        tailwindcss: {},
        autoprefixer: {},
    },
}

----------------------------------------

TITLE: Tailwind Configuration for Filament
DESCRIPTION: Tailwind CSS configuration file setup with Filament preset and content paths.

LANGUAGE: javascript
CODE:
import preset from './vendor/filament/support/tailwind.config.preset'

export default {
    presets: [preset],
    content: [
        './app/Filament/**/*.php',
        './resources/views/filament/**/*.blade.php',
        './vendor/filament/**/*.blade.php',
    ],
}

----------------------------------------

TITLE: Configuring Unrestricted Web Crawler Access in robots.txt
DESCRIPTION: This robots.txt configuration allows all web crawlers unrestricted access to the website. It specifies a user-agent wildcard and an empty disallow directive.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow:

----------------------------------------

TITLE: Column Start Position Configuration - PHP
DESCRIPTION: Shows how to set specific starting columns for components within a grid layout using the columnStart method. Demonstrates responsive column positioning across different breakpoints.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Grid;
use Filament\Infolists\Components\TextEntry;

Grid::make()
    ->columns([
        'sm' => 3,
        'xl' => 6,
        '2xl' => 8,
    ])
    ->schema([
        TextEntry::make('name')
            ->columnStart([
                'sm' => 2,
                'xl' => 3,
                '2xl' => 4,
            ]),
        // ...
    ])

----------------------------------------

TITLE: Link Size Variations
DESCRIPTION: Examples of different link sizes using the size attribute, ranging from small to extra extra large.

LANGUAGE: blade
CODE:
<x-filament::link size="sm">
    New user
</x-filament::link>

<x-filament::link size="lg">
    New user
</x-filament::link>

<x-filament::link size="xl">
    New user
</x-filament::link>

<x-filament::link size="2xl">
    New user
</x-filament::link>

----------------------------------------

TITLE: HTML Content in Filament Placeholders
DESCRIPTION: Shows how to include HTML content within a placeholder using HtmlString. This example creates a placeholder with a clickable link.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Placeholder;
use Illuminate\Support\HtmlString;

Placeholder::make('documentation')
    ->content(new HtmlString('<a href="https://filamentphp.com/docs">filamentphp.com</a>'))

----------------------------------------

TITLE: Publishing Filament Stubs using Artisan Command
DESCRIPTION: This command publishes the Filament stub files to the 'stubs/filament' directory in the user's application. These stubs can then be customized to modify the files generated by Filament.

LANGUAGE: bash
CODE:
php artisan vendor:publish --tag=filament-stubs

----------------------------------------

TITLE: Applying Middleware to a Filament Panel
DESCRIPTION: This snippet demonstrates how to apply additional middleware to all routes in a Filament panel.

LANGUAGE: php
CODE:
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->middleware([
            // ...
        ]);
}

----------------------------------------

TITLE: Lifecycle Hooks Implementation
DESCRIPTION: Implementation of various lifecycle hooks for the edit action process.

LANGUAGE: php
CODE:
EditAction::make()
    ->beforeFormFilled(function () {
        // Runs before the form fields are populated from the database.
    })
    ->afterFormFilled(function () {
        // Runs after the form fields are populated from the database.
    })
    ->beforeFormValidated(function () {
        // Runs before the form fields are validated when the form is saved.
    })
    ->afterFormValidated(function () {
        // Runs after the form fields are validated when the form is saved.
    })
    ->before(function () {
        // Runs before the form fields are saved to the database.
    })
    ->after(function () {
        // Runs after the form fields are saved to the database.
    })

----------------------------------------

TITLE: Colored Dropdown Items
DESCRIPTION: Shows how to apply different colors to dropdown items using the color attribute.

LANGUAGE: blade
CODE:
<x-filament::dropdown.list.item color="danger">
    Edit
</x-filament::dropdown.list.item>

<x-filament::dropdown.list.item color="info">
    Edit
</x-filament::dropdown.list.item>

<x-filament::dropdown.list.item color="primary">
    Edit
</x-filament::dropdown.list.item>

<x-filament::dropdown.list.item color="success">
    Edit
</x-filament::dropdown.list.item>

<x-filament::dropdown.list.item color="warning">
    Edit
</x-filament::dropdown.list.item>

----------------------------------------

TITLE: Implementing Delete Action (PHP)
DESCRIPTION: Complete implementation of a delete action in a Livewire component with confirmation and model deletion.

LANGUAGE: php
CODE:
use App\Models\Post;
use Filament\Actions\Action;
use Filament\Actions\Concerns\InteractsWithActions;
use Filament\Actions\Contracts\HasActions;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Livewire\Component;

class ManagePost extends Component implements HasForms, HasActions
{
    use InteractsWithActions;
    use InteractsWithForms;

    public Post $post;

    public function deleteAction(): Action
    {
        return Action::make('delete')
            ->requiresConfirmation()
            ->action(fn () => $this->post->delete());
    }

----------------------------------------

TITLE: PostCSS Configuration
DESCRIPTION: PostCSS configuration file with required plugins for Tailwind CSS processing.

LANGUAGE: javascript
CODE:
export default {
    plugins: {
        'tailwindcss/nesting': 'postcss-nesting',
        tailwindcss: {},
        autoprefixer: {},
    },
}

----------------------------------------

TITLE: Creating Stats Overview Widget Command - Filament PHP
DESCRIPTION: Command to generate a new stats overview widget file using Artisan

LANGUAGE: bash
CODE:
php artisan make:filament-widget StatsOverview --stats-overview

----------------------------------------

TITLE: Configuring TextColumn Color with State in PHP
DESCRIPTION: This snippet demonstrates how to dynamically set the color of a TextColumn based on its state using a match expression in PHP.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('status')
    ->color(fn (string $state): string => match ($state) {
        'draft' => 'gray',
        'reviewing' => 'warning',
        'published' => 'success',
        'rejected' => 'danger',
    })

----------------------------------------

TITLE: Customizing Grid Columns in Filament Form Tabs
DESCRIPTION: This code demonstrates how to customize the grid layout within a tab using the columns() method. It sets the tab to use a 3-column grid layout.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Tabs;

Tabs::make('Tabs')
    ->tabs([
        Tabs\Tab::make('Tab 1')
            ->schema([
                // ...
            ])
            ->columns(3),
        // ...
    ])

----------------------------------------

TITLE: Link with Icon
DESCRIPTION: Shows how to add and position icons within links using the icon and icon-position attributes.

LANGUAGE: blade
CODE:
<x-filament::link icon="heroicon-m-sparkles">
    New user
</x-filament::link>

<x-filament::link
    icon="heroicon-m-sparkles"
    icon-position="after"
>
    New user
</x-filament::link>

----------------------------------------

TITLE: Dynamic Content Generation in Filament Placeholders
DESCRIPTION: Demonstrates dynamic content generation using closures and the Get helper. This example calculates and formats a total based on cost and quantity fields.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Placeholder;
use Filament\Forms\Get;

Placeholder::make('total')
    ->content(function (Get $get): string {
        return '€' . number_format($get('cost') * $get('quantity'), 2);
    })

----------------------------------------

TITLE: Setting Up Filament in New Laravel Project
DESCRIPTION: Commands to install Filament with Livewire, Alpine.js, and Tailwind CSS in a new Laravel project. This scaffolds the application and installs necessary dependencies.

LANGUAGE: bash
CODE:
php artisan filament:install --scaffold --actions

npm install

npm run dev

----------------------------------------

TITLE: Color Customization for Icon Columns
DESCRIPTION: Shows how to customize icon colors using predefined color options (danger, gray, info, primary, success, warning) based on state values.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\IconColumn;

IconColumn::make('status')
    ->color(fn (string $state): string => match ($state) {
        'draft' => 'info',
        'reviewing' => 'warning',
        'published' => 'success',
        default => 'gray',
    })

----------------------------------------

TITLE: Implementing View Action for Table Rows in PHP
DESCRIPTION: This code shows how to use the ViewAction specifically for table rows. It demonstrates the integration within a table configuration method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;
use Filament\Tables\Actions\ViewAction;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->actions([
            ViewAction::make()
                ->form([
                    TextInput::make('title')
                        ->required()
                        ->maxLength(255),
                    // ...
                ]),
        ]);
}

----------------------------------------

TITLE: Tailwind CSS Base Styles
DESCRIPTION: Basic Tailwind CSS layer imports required for Filament styling.

LANGUAGE: css
CODE:
@tailwind base;
@tailwind components;
@tailwind utilities;
@tailwind variants;

----------------------------------------

TITLE: Installing Filament Upgrade Tool
DESCRIPTION: Commands to install and run the automated upgrade script for Filament v3. Requires composer to install the upgrade package and run the migration tool.

LANGUAGE: bash
CODE:
composer require filament/upgrade:"^3.2" -W --dev
vendor/bin/filament-v3

----------------------------------------

TITLE: Custom Field Class Definition
DESCRIPTION: Example of a generated custom field class extending the base Field class with view specification.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Field;

class RangeSlider extends Field
{
    protected string $view = 'filament.forms.components.range-slider';
}

----------------------------------------

TITLE: Testing Action Button Colors in Filament
DESCRIPTION: Shows how to test if a Filament action button is displaying the correct color using assertActionHasColor() and assertActionDoesNotHaveColor().

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('actions display proper colors', function () {
    $invoice = Invoice::factory()->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->assertActionHasColor('delete', 'danger')
        ->assertActionDoesNotHaveColor('print', 'danger');
});

----------------------------------------

TITLE: Link with Badge
DESCRIPTION: Examples of adding badges to links and customizing badge colors.

LANGUAGE: blade
CODE:
<x-filament::link>
    Mark notifications as read

    <x-slot name="badge">
        3
    </x-slot>
</x-filament::link>

<x-filament::link badge-color="danger">
    Mark notifications as read

    <x-slot name="badge">
        3
    </x-slot>
</x-filament::link>

----------------------------------------

TITLE: Date Validation - After Date
DESCRIPTION: Validates that a field value is after a specified date or another field's value

LANGUAGE: php
CODE:
Field::make('start_date')->after('tomorrow')

Field::make('start_date')
Field::make('end_date')->after('start_date')

----------------------------------------

TITLE: Installing Filament Spatie Translatable Plugin with Composer
DESCRIPTION: Command to install the Filament Spatie Translatable Plugin using Composer. This adds the plugin to your Laravel project.

LANGUAGE: bash
CODE:
composer require filament/spatie-laravel-translatable-plugin:"^3.2" -W

----------------------------------------

TITLE: Setting Dropdown Placement for Action Group in PHP
DESCRIPTION: Illustrates how to set the placement of the dropdown menu relative to the trigger button using the dropdownPlacement method.

LANGUAGE: php
CODE:
ActionGroup::make([
    // Array of actions
])
    ->dropdownPlacement('top-start')

----------------------------------------

TITLE: Publishing Filament Configuration
DESCRIPTION: Artisan command to publish Filament package configuration files for customizing notification settings.

LANGUAGE: bash
CODE:
php artisan vendor:publish --tag=filament-config

----------------------------------------

TITLE: Customizing Modal Content and Appearance in PHP
DESCRIPTION: This snippet shows how to customize the modal's heading, description, submit action label, and add an icon.

LANGUAGE: php
CODE:
use App\Models\Post;

Action::make('delete')
    ->action(fn (Post $record) => $record->delete())
    ->requiresConfirmation()
    ->modalHeading('Delete post')
    ->modalDescription('Are you sure you\'d like to delete this post? This cannot be undone.')
    ->modalSubmitActionLabel('Yes, delete it')
    ->modalIcon('heroicon-o-trash')

----------------------------------------

TITLE: Customizing Column Labels in Filament
DESCRIPTION: Methods for setting custom labels and translations for table columns

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('title')
    ->label('Post title')

----------------------------------------

TITLE: Customizing Column Labels in Filament
DESCRIPTION: Methods for setting custom labels and translations for table columns

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('title')
    ->label('Post title')

----------------------------------------

TITLE: Creating a Filament Issue Report with Artisan
DESCRIPTION: Uses an Artisan command to generate a new issue report for Filament with pre-filled version information.

LANGUAGE: bash
CODE:
php artisan make:filament-issue

----------------------------------------

TITLE: Accessing Eloquent Record in Filament Blade Template
DESCRIPTION: Shows how to access the Eloquent record associated with a cell in a custom column view using the $getRecord() function in a Blade template.

LANGUAGE: blade
CODE:
<div>
    {{ $getRecord()->name }}
</div>

----------------------------------------

TITLE: Creating Custom Filament Page using Artisan Command
DESCRIPTION: Command to generate a new custom page for a Filament resource, which creates both a page class and corresponding view file

LANGUAGE: bash
CODE:
php artisan make:filament-page SortUsers --resource=UserResource --type=custom

----------------------------------------

TITLE: Basic Section Component Implementation in Blade
DESCRIPTION: Creates a basic section component with a heading slot for grouping content.

LANGUAGE: blade
CODE:
<x-filament::section>
    <x-slot name="heading">
        User details
    </x-slot>

    {{-- Content --}}
</x-filament::section>

----------------------------------------

TITLE: Adding Debounce to a Reactive Field in PHP
DESCRIPTION: Shows how to implement debouncing for a reactive form field to optimize performance.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;

TextInput::make('username')
    ->live(debounce: 500) // Wait 500ms before re-rendering the form.

----------------------------------------

TITLE: Configuring Notifications Trigger in PHP
DESCRIPTION: PHP code to configure the trigger for database notifications in a service provider.

LANGUAGE: php
CODE:
use Filament\Notifications\Livewire\DatabaseNotifications;

DatabaseNotifications::trigger('filament.notifications.database-notifications-trigger');

----------------------------------------

TITLE: Boolean Icon Column Implementation
DESCRIPTION: Shows how to create an icon column that displays boolean values as icons.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\IconColumn;

IconColumn::make('is_featured')
    ->boolean()

----------------------------------------

TITLE: Configuring Top Navigation in PHP
DESCRIPTION: Demonstrates how to switch from sidebar navigation to top navigation using the topNavigation() method in the panel configuration.

LANGUAGE: php
CODE:
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->topNavigation();
}

----------------------------------------

TITLE: Generating a Livewire component with Artisan in PHP
DESCRIPTION: This command creates a new Livewire component named ViewProduct using Laravel's Artisan CLI.

LANGUAGE: bash
CODE:
php artisan make:livewire ViewProduct

----------------------------------------

TITLE: Implementing Responsive Column Visibility in PHP
DESCRIPTION: Shows how to make table columns responsive by hiding/showing them based on screen breakpoints.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('slug')
    ->visibleFrom('md')

----------------------------------------

TITLE: Registering Custom Page Routes in Filament Resource
DESCRIPTION: Configuration to register custom pages with their routes in the Filament resource class

LANGUAGE: php
CODE:
public static function getPages(): array
{
    return [
        // ...
        'sort' => Pages\SortUsers::route('/sort'),
    ];
}

----------------------------------------

TITLE: Section Component with Icon in Blade
DESCRIPTION: Shows how to add an icon to the section header using the icon attribute.

LANGUAGE: blade
CODE:
<x-filament::section icon="heroicon-o-user">
    <x-slot name="heading">
        User details
    </x-slot>

    {{-- Content --}}
</x-filament::section>

----------------------------------------

TITLE: Creating Notifications Table in Laravel
DESCRIPTION: Commands to create the notifications table in Laravel, with different commands for Laravel 11+ and Laravel 10.

LANGUAGE: bash
CODE:
# Laravel 11 and higher
php artisan make:notifications-table

# Laravel 10
php artisan notifications:table

----------------------------------------

TITLE: Customizing Record Data Before Replication
DESCRIPTION: Modifying record data before it is filled into the replication form using a mutation callback.

LANGUAGE: php
CODE:
ReplicateAction::make()
    ->mutateRecordDataUsing(function (array $data): array {
        $data['user_id'] = auth()->id();

        return $data;
    })

----------------------------------------

TITLE: Clearing Filament Optimization Cache
DESCRIPTION: Command to clear the Filament optimization caches.

LANGUAGE: bash
CODE:
php artisan filament:optimize-clear

----------------------------------------

TITLE: Registering Resource Pages
DESCRIPTION: Configuration to register view pages in a Filament resource's page collection

LANGUAGE: php
CODE:
public static function getPages(): array
{
    return [
        'index' => Pages\ListUsers::route('/'),
        'create' => Pages\CreateUser::route('/create'),
        'view' => Pages\ViewUser::route('/{record}'),
        'edit' => Pages\EditUser::route('/{record}/edit'),
    ];
}

----------------------------------------

TITLE: Initializing Color Column in Filament Tables (PHP)
DESCRIPTION: This snippet demonstrates how to create a basic Color Column in Filament Tables. It allows you to display a color preview from a CSS color definition.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\ColorColumn;

ColorColumn::make('color')

----------------------------------------

TITLE: Creating a Boolean Radio Input in PHP
DESCRIPTION: This snippet illustrates how to create a simple boolean radio input with 'Yes' and 'No' options using the boolean() method in Filament Forms.

LANGUAGE: php
CODE:
Radio::make('feedback')
    ->label('Like this post?')
    ->boolean()

----------------------------------------

TITLE: Defining Record-Based Route in Filament Resource
DESCRIPTION: Configuration to register a route with a record parameter for a custom page that interacts with database records

LANGUAGE: php
CODE:
public static function getPages(): array
{
    return [
        // ...
        'manage' => Pages\ManageUser::route('/{record}/manage'),
    ];
}

----------------------------------------

TITLE: Icon Integration in Tabs
DESCRIPTION: Shows how to add icons to tabs using the icon attribute and customize icon positioning using icon-position.

LANGUAGE: blade
CODE:
<x-filament::tabs>
    <x-filament::tabs.item
        icon="heroicon-m-bell"
        icon-position="after"
    >
        Notifications
    </x-filament::tabs.item>

    {{-- Other tabs --}}
</x-filament::tabs>

----------------------------------------

TITLE: Opening Database Notifications Modal with Browser Event
DESCRIPTION: Blade code to create a button that opens the database notifications modal by dispatching a browser event.

LANGUAGE: blade
CODE:
<button
    x-data="{}"
    x-on:click="$dispatch('open-modal', { id: 'database-notifications' })"
    type="button"
>
    Notifications
</button>

----------------------------------------

TITLE: Creating an infolist method in a Livewire component
DESCRIPTION: This method creates and returns an infolist for a product, using the Filament Infolist class. It sets the record and defines the schema for the infolist.

LANGUAGE: php
CODE:
use Filament\Infolists\Infolist;

public function productInfolist(Infolist $infolist): Infolist
{
    return $infolist
        ->record($this->product)
        ->schema([
            // ...
        ]);
}

----------------------------------------

TITLE: HTML-Enabled Checkbox List with Search
DESCRIPTION: Implements a checkbox list with HTML-enabled labels and search functionality

LANGUAGE: php
CODE:
use Filament\Forms\Components\CheckboxList;

CheckboxList::make('technology')
    ->options([
        'tailwind' => '<span class="text-blue-500">Tailwind</span>',
        'alpine' => '<span class="text-green-500">Alpine</span>',
        'laravel' => '<span class="text-red-500">Laravel</span>',
        'livewire' => '<span class="text-pink-500">Livewire</span>',
    ])
    ->searchable()
    ->allowHtml()

----------------------------------------

TITLE: Laravel Layout Template
DESCRIPTION: Basic Blade layout template for Livewire components with required Filament assets.

LANGUAGE: php
CODE:
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">

        <meta name="application-name" content="{{ config('app.name') }}">
        <meta name="csrf-token" content="{{ csrf_token() }}">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>{{ config('app.name') }}</title>

        <style>
            [x-cloak] {
                display: none !important;
            }
        </style>

        @filamentStyles
        @vite('resources/css/app.css')
    </head>

    <body class="antialiased">
        {{ $slot }}

        @filamentScripts
        @vite('resources/js/app.js')
    </body>
</html>

----------------------------------------

TITLE: Preloading Relationship Options for Select Filters in Filament
DESCRIPTION: Demonstrates how to preload options for a searchable relationship select filter. This loads all options when the page loads, rather than when the user searches.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\SelectFilter;

SelectFilter::make('author')
    ->relationship('author', 'name')
    ->searchable()
    ->preload()

----------------------------------------

TITLE: Creating View Component for Filament Infolist in PHP
DESCRIPTION: This snippet demonstrates how to create a view component for a Filament infolist. It uses the View class to specify a custom Blade template for rendering.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\View;

View::make('filament.infolists.components.box')

----------------------------------------

TITLE: Badge Implementation in Tabs
DESCRIPTION: Demonstrates how to add badges to tabs using the badge slot for displaying counters or indicators.

LANGUAGE: blade
CODE:
<x-filament::tabs>
    <x-filament::tabs.item>
        Notifications

        <x-slot name="badge">
            5
        </x-slot>
    </x-filament::tabs.item>

    {{-- Other tabs --}}
</x-filament::tabs>

----------------------------------------

TITLE: Installing Filament Upgrade Package
DESCRIPTION: Commands to install and run the automated upgrade script for Filament v3 migration.

LANGUAGE: bash
CODE:
composer require filament/upgrade:"^3.2" -W --dev
vendor/bin/filament-v3

----------------------------------------

TITLE: Link Color Variations
DESCRIPTION: Examples of different link colors using the color attribute.

LANGUAGE: blade
CODE:
<x-filament::link color="danger">
    New user
</x-filament::link>

<x-filament::link color="gray">
    New user
</x-filament::link>

<x-filament::link color="info">
    New user
</x-filament::link>

<x-filament::link color="success">
    New user
</x-filament::link>

<x-filament::link color="warning">
    New user
</x-filament::link>

----------------------------------------

TITLE: Button-Style Link Implementation
DESCRIPTION: Shows how to convert a link into a button element using the tag attribute with wire:click functionality.

LANGUAGE: blade
CODE:
<x-filament::link
    wire:click="openNewUserModal"
    tag="button"
>
    New user
</x-filament::link>

----------------------------------------

TITLE: Section Component with Custom Icon Size in Blade
DESCRIPTION: Shows how to adjust the icon size using the icon-size attribute.

LANGUAGE: blade
CODE:
<x-filament::section
    icon="heroicon-m-user"
    icon-size="sm"
>
    <x-slot name="heading">
        User details
    </x-slot>

    {{-- Content --}}
</x-filament::section>

<x-filament::section
    icon="heroicon-m-user"
    icon-size="md"
>
    <x-slot name="heading">
        User details
    </x-slot>

    {{-- Content --}}
</x-filament::section>

----------------------------------------

TITLE: Basic Icon Column Implementation in PHP
DESCRIPTION: Demonstrates how to create an icon column with conditional icon rendering based on state values using Blade UI Kit icons.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\IconColumn;

IconColumn::make('status')
    ->icon(fn (string $state): string => match ($state) {
        'draft' => 'heroicon-o-pencil',
        'reviewing' => 'heroicon-o-clock',
        'published' => 'heroicon-o-check-circle',
    })

----------------------------------------

TITLE: Basic Icon Column Implementation in PHP
DESCRIPTION: Demonstrates how to create an icon column with conditional icon rendering based on state values using Blade UI Kit icons.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\IconColumn;

IconColumn::make('status')
    ->icon(fn (string $state): string => match ($state) {
        'draft' => 'heroicon-o-pencil',
        'reviewing' => 'heroicon-o-clock',
        'published' => 'heroicon-o-check-circle',
    })

----------------------------------------

TITLE: Creating Basic Key-Value Entry in PHP
DESCRIPTION: Basic implementation of a key-value entry component for displaying one-dimensional JSON object or PHP array data.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\KeyValueEntry;

KeyValueEntry::make('meta')

----------------------------------------

TITLE: Adding ExportAction to Table Header in Filament PHP
DESCRIPTION: Example of adding an ExportAction to the header of a Filament table.

LANGUAGE: php
CODE:
use App\Filament\Exports\ProductExporter;
use Filament\Tables\Actions\ExportAction;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->headerActions([
            ExportAction::make()
                ->exporter(ProductExporter::class)
        ]);
}

----------------------------------------

TITLE: Anchor Link Tab Implementation
DESCRIPTION: Shows how to convert a tab into an anchor link by changing the underlying HTML tag using the tag attribute.

LANGUAGE: blade
CODE:
<x-filament::tabs>
    <x-filament::tabs.item
        :href="route('notifications')"
        tag="a"
    >
        Notifications
    </x-filament::tabs.item>

    {{-- Other tabs --}}
</x-filament::tabs>

----------------------------------------

TITLE: Adding Delete Actions to Edit Page in Filament
DESCRIPTION: Configuration for adding delete-related actions to a Filament resource's Edit page.

LANGUAGE: php
CODE:
use Filament\Actions;

protected function getHeaderActions(): array
{
    return [
        Actions\DeleteAction::make(),
        Actions\ForceDeleteAction::make(),
        Actions\RestoreAction::make(),
        // ...
    ];
}

----------------------------------------

TITLE: Creating Custom Operator for Query Builder Constraint
DESCRIPTION: This snippet shows how to create a custom operator for a query builder constraint, including defining the label, summary, and query logic.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\QueryBuilder\Constraints\Operators\Operator;

Operator::make('subscribed')
    ->label(fn (bool $isInverse): string => $isInverse ? 'Not subscribed' : 'Subscribed')
    ->summary(fn (bool $isInverse): string => $isInverse ? 'You are not subscribed' : 'You are subscribed')
    ->baseQuery(fn (Builder $query, bool $isInverse) => $query->{$isInverse ? 'whereDoesntHave' : 'whereHas'}(
        'subscriptions.user',
        fn (Builder $query) => $query->whereKey(auth()->user()),
    )),

----------------------------------------

TITLE: Controlling Dropdown Maximum Height in PHP
DESCRIPTION: Illustrates how to set a maximum height for the dropdown content using the maxHeight method, allowing it to scroll if content exceeds the specified height.

LANGUAGE: php
CODE:
ActionGroup::make([
    // Array of actions
])
    ->maxHeight('400px')

----------------------------------------

TITLE: Installing Filament Table Builder
DESCRIPTION: Command to install the Table Builder package for creating interactive datatables in Livewire components.

LANGUAGE: bash
CODE:
composer require filament/tables

----------------------------------------

TITLE: Customizing Add Action Label for Key-value Field in PHP
DESCRIPTION: Demonstrates how to customize the label for the add action button in a key-value field using the addActionLabel() method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\KeyValue;

KeyValue::make('meta')
    ->addActionLabel('Add property')

----------------------------------------

TITLE: Implementing FilamentUser Access Control
DESCRIPTION: PHP code example showing how to implement the FilamentUser contract to control panel access.

LANGUAGE: php
CODE:
<?php

namespace App\Models;

use Filament\Models\Contracts\FilamentUser;
use Filament\Panel;
use Illuminate\Foundation\Auth\User as Authenticatable;

class User extends Authenticatable implements FilamentUser
{
    // ...

    public function canAccessPanel(Panel $panel): bool
    {
        return str_ends_with($this->email, '@yourdomain.com') && $this->hasVerifiedEmail();
    }
}

----------------------------------------

TITLE: Enabling Wrapping for Color Column in Filament Tables (PHP)
DESCRIPTION: This snippet shows how to enable wrapping for Color Columns when they can't fit on one line. It uses the wrap() method to allow multiple color blocks to wrap.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\ColorColumn;

ColorColumn::make('color')
    ->wrap()

----------------------------------------

TITLE: Custom Blade View Template
DESCRIPTION: Example of a custom Blade template for a Filament resource view page

LANGUAGE: blade
CODE:
<x-filament-panels::page>
    @if ($this->hasInfolist())
        {{ $this->infolist }}
    @else
        {{ $this->form }}
    @endif

    @if (count($relationManagers = $this->getRelationManagers()))
        <x-filament-panels::resources.relation-managers
            :active-manager="$this->activeRelationManager"
            :managers="$relationManagers"
            :owner-record="$record"
            :page-class="static::class"
        />
    @endif
</x-filament-panels::page>

----------------------------------------

TITLE: Adding Anonymous Actions to an Infolist in PHP
DESCRIPTION: This code demonstrates how to add a set of independent actions to an infolist without attaching them to a specific component.

LANGUAGE: php
CODE:
use App\Actions\Star;
use App\Actions\ResetStars;
use Filament\Infolists\Components\Actions;
use Filament\Infolists\Components\Actions\Action;

Actions::make([
    Action::make('star')
        ->icon('heroicon-m-star')
        ->requiresConfirmation()
        ->action(function (Star $star) {
            $star();
        }),
    Action::make('resetStars')
        ->icon('heroicon-m-x-mark')
        ->color('danger')
        ->requiresConfirmation()
        ->action(function (ResetStars $resetStars) {
            $resetStars();
        }),
]),

----------------------------------------

TITLE: Configuring a Range Summarizer with Date Formatting in PHP
DESCRIPTION: Shows how to set up a Range summarizer with minimal date-time difference formatting on a TextColumn in a Filament table.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\Summarizers\Range;
use Filament\Tables\Columns\TextColumn;

TextColumn::make('created_at')
    ->dateTime()
    ->summarize(Range::make()->minimalDateTimeDifference())

----------------------------------------

TITLE: Mutating Form Data Before Save in PHP
DESCRIPTION: Method to modify form data before it is saved to the database. This allows adding or modifying data during the save process.

LANGUAGE: php
CODE:
protected function mutateFormDataBeforeSave(array $data): array
{
    $data['last_edited_by_id'] = auth()->id();

    return $data;
}

----------------------------------------

TITLE: Disable Force-Delete Notifications in PHP
DESCRIPTION: Shows how to disable success notifications for force-delete actions.

LANGUAGE: php
CODE:
ForceDeleteAction::make()
    ->successNotification(null)

----------------------------------------

TITLE: Using ExportAction in Filament PHP
DESCRIPTION: Example of how to use the ExportAction in a Filament PHP class, specifying an exporter.

LANGUAGE: php
CODE:
use App\Filament\Exports\ProductExporter;
use Filament\Actions\ExportAction;

ExportAction::make()
    ->exporter(ProductExporter::class)

----------------------------------------

TITLE: Customizing Filament Cluster Breadcrumb
DESCRIPTION: These snippets demonstrate how to customize the cluster breadcrumb using either a static property or a dynamic method in the cluster class.

LANGUAGE: php
CODE:
protected static ?string $clusterBreadcrumb = 'cluster';

LANGUAGE: php
CODE:
public static function getClusterBreadcrumb(): string
{
    return __('filament/clusters/cluster.name');
}

----------------------------------------

TITLE: Accessing Cell State in Filament Blade Template
DESCRIPTION: Demonstrates how to retrieve the state of a cell within a custom column view using the $getState() function in a Blade template.

LANGUAGE: blade
CODE:
<div>
    {{ $getState() }}
</div>

----------------------------------------

TITLE: Setting Navigation Item Icon in PHP
DESCRIPTION: Shows how to set a custom icon for a navigation item using the $navigationIcon property.

LANGUAGE: php
CODE:
protected static ?string $navigationIcon = 'heroicon-o-document-text';

----------------------------------------

TITLE: Defining Settings Class in Filament Page
DESCRIPTION: PHP code snippet showing how to define the settings class in the generated Filament settings page. This associates the page with the specific settings class.

LANGUAGE: php
CODE:
protected static string $settings = FooterSettings::class;

----------------------------------------

TITLE: Basic Image Entry Implementation in PHP
DESCRIPTION: Simple implementation of ImageEntry component to display images from storage disk or URL.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\ImageEntry;

ImageEntry::make('header_image')

----------------------------------------

TITLE: Page Authorization Control
DESCRIPTION: Method to control page access by implementing authorization logic in the canAccess method

LANGUAGE: php
CODE:
public static function canAccess(): bool
{
    return auth()->user()->canManageSettings();
}

----------------------------------------

TITLE: Customizing the Default Tab in Filament List Page
DESCRIPTION: This snippet demonstrates how to customize the default active tab in a Filament List page. It implements the getDefaultActiveTab() method to return the key of the desired default tab.

LANGUAGE: php
CODE:
use Filament\Resources\Components\Tab;

public function getTabs(): array
{
    return [
        'all' => Tab::make(),
        'active' => Tab::make(),
        'inactive' => Tab::make(),
    ];
}

public function getDefaultActiveTab(): string | int | null
{
    return 'active';
}

----------------------------------------

TITLE: Stacked Images Configuration
DESCRIPTION: Implementing stacked display of multiple overlapping images.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\ImageEntry;

ImageEntry::make('colleagues.avatar')
    ->height(40)
    ->circular()
    ->stacked()

----------------------------------------

TITLE: Injecting Livewire Component in PHP Column Configuration
DESCRIPTION: This snippet demonstrates how to inject the current Livewire component instance into a column configuration function in PHP.

LANGUAGE: php
CODE:
use Filament\Tables\Contracts\HasTable;

function (HasTable $livewire) {
    // ...
}

----------------------------------------

TITLE: Customizing Filter Tab Labels in Filament List Page
DESCRIPTION: This code snippet shows how to customize the labels of filter tabs in a Filament List page. It overrides the default label generation by passing custom labels to the make() method of each Tab object.

LANGUAGE: php
CODE:
use Filament\Resources\Components\Tab;
use Illuminate\Database\Eloquent\Builder;

public function getTabs(): array
{
    return [
        'all' => Tab::make('All customers'),
        'active' => Tab::make('Active customers')
            ->modifyQueryUsing(fn (Builder $query) => $query->where('active', true)),
        'inactive' => Tab::make('Inactive customers')
            ->modifyQueryUsing(fn (Builder $query) => $query->where('active', false)),
    ];
}

----------------------------------------

TITLE: Configuring Searchable Columns in Filament
DESCRIPTION: Setting up searchable columns with custom search behavior

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('name')
    ->searchable()

----------------------------------------

TITLE: Displaying a Widget on a Filament Resource Page
DESCRIPTION: Example of how to display a widget on a Filament resource page using the getHeaderWidgets() method.

LANGUAGE: php
CODE:
<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;

class ListCustomers extends ListRecords
{
    public static string $resource = CustomerResource::class;

    protected function getHeaderWidgets(): array
    {
        return [
            CustomerResource\Widgets\CustomerOverview::class,
        ];
    }
}

----------------------------------------

TITLE: Creating Outlined Buttons in Blade
DESCRIPTION: This example demonstrates how to create an outlined button design using the 'outlined' attribute.

LANGUAGE: blade
CODE:
<x-filament::button outlined>
    New user
</x-filament::button>

----------------------------------------

TITLE: Customizing Success Notification in PHP
DESCRIPTION: This code demonstrates how to customize the success notification that is shown after a record is created, including modifying the title or the entire notification object.

LANGUAGE: php
CODE:
CreateAction::make()
    ->successNotificationTitle('User registered')

// Or customizing the entire notification:
use Filament\Notifications\Notification;

CreateAction::make()
    ->successNotification(
       Notification::make()
            ->success()
            ->title('User registered')
            ->body('The user has been created successfully.'),
    )

// To disable the notification:
CreateAction::make()
    ->successNotification(null)

----------------------------------------

TITLE: Implementing Basic Media Library File Upload
DESCRIPTION: Basic implementation of SpatieMediaLibraryFileUpload component for file uploads

LANGUAGE: php
CODE:
use Filament\Forms\Components\SpatieMediaLibraryFileUpload;

SpatieMediaLibraryFileUpload::make('avatar')

----------------------------------------

TITLE: Configuring Eloquent Model Array Cast
DESCRIPTION: Configuration of Eloquent model to properly cast the key-value data field as an array for database interactions.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    protected $casts = [
        'meta' => 'array',
    ];

    // ...
}

----------------------------------------

TITLE: Persisting Filters in Session in Filament PHP
DESCRIPTION: Shows how to persist table filters in the user's session using persistFiltersInSession().

LANGUAGE: php
CODE:
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->filters([
            // ...
        ])
        ->persistFiltersInSession();
}

----------------------------------------

TITLE: Customizing Global Search Result Title in PHP
DESCRIPTION: Shows how to override the getGlobalSearchResultTitle() method to customize the title of global search results. The method can return a plain text string or an instance of Illuminate\Support\HtmlString or Illuminate\Contracts\Support\Htmlable.

LANGUAGE: php
CODE:
use Illuminate\Contracts\Support\Htmlable;

public static function getGlobalSearchResultTitle(Model $record): string | Htmlable
{
    return $record->name;
}

----------------------------------------

TITLE: Generating Livewire Component - Bash Command
DESCRIPTION: Command to create a new Livewire component for product listing.

LANGUAGE: bash
CODE:
php artisan make:livewire ListProducts

----------------------------------------

TITLE: Adding Tailwind CSS Layers
DESCRIPTION: CSS code to include Tailwind's CSS layers in the application's main CSS file.

LANGUAGE: css
CODE:
@tailwind base;
@tailwind components;
@tailwind utilities;
@tailwind variants;

----------------------------------------

TITLE: Configuring PostCSS for Tailwind and Filament
DESCRIPTION: PostCSS configuration to enable Tailwind CSS, PostCSS Nesting, and Autoprefixer plugins.

LANGUAGE: javascript
CODE:
export default {
    plugins: {
        'tailwindcss/nesting': 'postcss-nesting',
        tailwindcss: {},
        autoprefixer: {},
    },
}

----------------------------------------

TITLE: Disabling Row Deletion in Key-value Field in PHP
DESCRIPTION: Illustrates how to prevent users from deleting rows in a key-value field using the deletable(false) method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\KeyValue;

KeyValue::make('meta')
    ->deletable(false)

----------------------------------------

TITLE: Deferring Filter Changes in Filament PHP
DESCRIPTION: Demonstrates how to defer filter changes until the user clicks an "Apply" button using deferFilters().

LANGUAGE: php
CODE:
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->filters([
            // ...
        ])
        ->deferFilters();
}

----------------------------------------

TITLE: Publishing Filament Configuration
DESCRIPTION: Command to publish the new Filament configuration file, replacing the old one

LANGUAGE: bash
CODE:
php artisan vendor:publish --tag=filament-config --force

----------------------------------------

TITLE: Creating Standalone View Page
DESCRIPTION: Command to create a view page for an existing Filament resource

LANGUAGE: bash
CODE:
php artisan make:filament-page ViewUser --resource=UserResource --type=ViewRecord

----------------------------------------

TITLE: Table Force-Delete Actions Configuration in PHP
DESCRIPTION: Demonstrates how to set up force-delete actions in a table context, including both single and bulk delete capabilities.

LANGUAGE: php
CODE:
use Filament\Tables\Actions\BulkActionGroup;
use Filament\Tables\Actions\ForceDeleteAction;
use Filament\Tables\Actions\ForceDeleteBulkAction;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->actions([
            ForceDeleteAction::make(),
            // ...
        ])
        ->bulkActions([
            BulkActionGroup::make([
                ForceDeleteBulkAction::make(),
                // ...
            ]),
        ]);
}

----------------------------------------

TITLE: Checking Relationship Existence in Filament TextColumn
DESCRIPTION: Demonstrates how to check for the existence of related records using the exists() method, including scoped queries.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;

TextColumn::make('users_exists')->exists('users')

LANGUAGE: php
CODE:
use Filament\Tables\Columns\TextColumn;
use Illuminate\Database\Eloquent\Builder;

TextColumn::make('users_exists')->exists([
    'users' => fn (Builder $query) => $query->where('is_active', true),
])

----------------------------------------

TITLE: Adding Footer Actions to a Section in Filament Forms
DESCRIPTION: Shows how to add action buttons to the footer of a section using the footerActions() method. This allows for interactive elements at the bottom of the section.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\Section;

Section::make('Rate limiting')
    ->schema([
        // ...
    ])
    ->footerActions([
        Action::make('test')
            ->action(function () {
                // ...
            }),
    ])

----------------------------------------

TITLE: Customizing the Filters Trigger Action in Filament PHP
DESCRIPTION: Shows how to customize the filters trigger button using filtersTriggerAction().

LANGUAGE: php
CODE:
use Filament\Tables\Actions\Action;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->filters([
            // ...
        ])
        ->filtersTriggerAction(
            fn (Action $action) => $action
                ->button()
                ->label('Filter'),
        );
}

----------------------------------------

TITLE: Installing Filament Spatie Settings Plugin with Composer
DESCRIPTION: Command to install the Filament Spatie Settings Plugin using Composer. The -W flag is used to update dependencies if needed.

LANGUAGE: bash
CODE:
composer require filament/spatie-laravel-settings-plugin:"^3.2" -W

----------------------------------------

TITLE: Delete Action with Custom Notification Title in PHP
DESCRIPTION: Customizing the success notification title for delete action.

LANGUAGE: php
CODE:
DeleteAction::make()
    ->successNotificationTitle('User deleted')

----------------------------------------

TITLE: Creating a Custom Summarizer in PHP
DESCRIPTION: Demonstrates how to create a custom summarizer using the Summarizer class and a custom calculation function.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\Summarizers\Summarizer;
use Filament\Tables\Columns\TextColumn;
use Illuminate\Database\Query\Builder;

TextColumn::make('name')
    ->summarize(Summarizer::make()
        ->label('First last name')
        ->using(fn (Builder $query): string => $query->min('last_name')))

----------------------------------------

TITLE: Implementing Livewire Component Class (PHP)
DESCRIPTION: Base implementation of a Livewire component class with required Filament traits and interfaces.

LANGUAGE: php
CODE:
use Filament\Actions\Concerns\InteractsWithActions;
use Filament\Actions\Contracts\HasActions;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Livewire\Component;

class ManagePost extends Component implements HasForms, HasActions
{
    use InteractsWithActions;
    use InteractsWithForms;

    // ...
}

----------------------------------------

TITLE: Adding Actions to a Section Without Heading in Filament Forms
DESCRIPTION: Shows how to add actions to a section without a heading by providing a unique ID. This is necessary for Filament to locate the action within the section.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;

Section::make()
    ->id('rateLimitingSection')
    ->headerActions([
        // ...
    ])
    ->schema([
        // ...
    ])

----------------------------------------

TITLE: Basic Ternary Filter Implementation - PHP
DESCRIPTION: Basic implementation of a ternary filter for boolean state filtering, typically used for true/false/blank states on columns.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\TernaryFilter;

TernaryFilter::make('is_admin')

----------------------------------------

TITLE: Installing Filament Spatie Google Fonts Plugin with Composer
DESCRIPTION: Command to install the Filament Spatie Google Fonts plugin using Composer package manager. The -W flag ensures compatibility with the workspace.

LANGUAGE: bash
CODE:
composer require filament/spatie-laravel-google-fonts-plugin:"^3.2" -W

----------------------------------------

TITLE: Customizing Builder Actions in PHP
DESCRIPTION: This code example shows how to customize Builder actions, specifically the collapse all action, by modifying its label using a closure.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\Builder;

Builder::make('content')
    ->blocks([
        // ...
    ])
    ->collapseAllAction(
        fn (Action $action) => $action->label('Collapse all content'),
    )

----------------------------------------

TITLE: Adding Filament Upgrade Command to Composer
DESCRIPTION: JSON configuration to add the Filament upgrade command to Composer's post-autoload-dump hook for automatic upgrades.

LANGUAGE: json
CODE:
"post-autoload-dump": [
    // ...
    "@php artisan filament:upgrade"
],

----------------------------------------

TITLE: Rendering Pagination Component in Blade
DESCRIPTION: Shows how to render the pagination component in a Blade template using Filament's pagination component.

LANGUAGE: blade
CODE:
<x-filament::pagination :paginator="$users" />

----------------------------------------

TITLE: Installing Filament v3 Panels
DESCRIPTION: Command to install Filament v3 panels and create the panel provider configuration

LANGUAGE: bash
CODE:
php artisan filament:install --panels

----------------------------------------

TITLE: Creating Custom Active Indicators in PHP for Filament Tables
DESCRIPTION: This snippet shows how to create a custom active indicator for a date filter using the indicateUsing() method and Carbon for date formatting.

LANGUAGE: php
CODE:
use Carbon\Carbon;
use Filament\Forms\Components\DatePicker;
use Filament\Tables\Filters\Filter;

Filter::make('created_at')
    ->form([DatePicker::make('date')])
    // ...
    ->indicateUsing(function (array $data): ?string {
        if (! $data['date']) {
            return null;
        }

        return 'Created at ' . Carbon::parse($data['date'])->toFormattedDateString();
    })

----------------------------------------

TITLE: Running Migrations for Spatie Tags
DESCRIPTION: Command to execute the database migrations for the tags table.

LANGUAGE: bash
CODE:
php artisan migrate

----------------------------------------

TITLE: Configuring Cluster Discovery in Filament Panel
DESCRIPTION: This snippet shows how to configure the panel to discover cluster classes. It uses the discoverClusters() method to specify the directory and namespace for cluster classes.

LANGUAGE: php
CODE:
public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->discoverResources(in: app_path('Filament/Resources'), for: 'App\\Filament\\Resources')
        ->discoverPages(in: app_path('Filament/Pages'), for: 'App\\Filament\\Pages')
        ->discoverClusters(in: app_path('Filament/Clusters'), for: 'App\\Filament\\Clusters');
}

----------------------------------------

TITLE: Customizing Sidebar Background Color in CSS
DESCRIPTION: This snippet demonstrates how to change the background color of the Filament sidebar using CSS. It targets the 'fi-sidebar' hook class to apply a custom background color.

LANGUAGE: css
CODE:
.fi-sidebar {
    background-color: #fafafa;
}

----------------------------------------

TITLE: Testing Halted Actions in Filament
DESCRIPTION: Shows how to check if a Filament action has been halted using assertActionHalted(). The example tests if sending an invoice is halted when there's no email address.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('stops sending if invoice has no email address', function () {
    $invoice = Invoice::factory(['email' => null])->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->callAction('send')
        ->assertActionHalted('send');
});

----------------------------------------

TITLE: Adding a Suffix Action to a Text Entry in PHP
DESCRIPTION: This code shows how to add a suffix action to a text entry in an infolist, including action configuration and functionality.

LANGUAGE: php
CODE:
use App\Models\Product;
use Filament\Infolists\Components\Actions\Action;
use Filament\Infolists\Components\TextEntry;

TextEntry::make('cost')
    ->prefix('€')
    ->suffixAction(
        Action::make('copyCostToPrice')
            ->icon('heroicon-m-clipboard')
            ->requiresConfirmation()
            ->action(function (Product $record) {
                $record->price = $record->cost;
                $record->save();
            })
    )

----------------------------------------

TITLE: Making Above-Content Filters Collapsible in Filament Tables
DESCRIPTION: This code shows how to allow the filters above the table content to be collapsed in a Filament table using the FiltersLayout::AboveContentCollapsible option.

LANGUAGE: php
CODE:
use Filament\Tables\Enums\FiltersLayout;

public function table(Table $table): Table
{
    return $table
        ->filters([
            // ...
        ], layout: FiltersLayout::AboveContentCollapsible);
}

----------------------------------------

TITLE: Implementing Basic SpatieTagsInput Component
DESCRIPTION: Basic implementation of the SpatieTagsInput form component for handling tags.

LANGUAGE: php
CODE:
use Filament\Forms\Components\SpatieTagsInput;

SpatieTagsInput::make('tags')

----------------------------------------

TITLE: Setting Tab Icons and Badges
DESCRIPTION: Demonstrates how to add icons and badges to tabs, including customization of icon position and badge colors.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Tabs;
use Filament\Support\Enums\IconPosition;

Tabs::make('Tabs')
    ->tabs([
        Tabs\Tab::make('Notifications')
            ->icon('heroicon-m-bell')
            ->iconPosition(IconPosition::After)
            ->badge(5)
            ->badgeColor('success')
            ->schema([
                // ...
            ]),
        // ...
    ])

----------------------------------------

TITLE: Redirect Configuration After Force-Delete in PHP
DESCRIPTION: Shows how to configure a custom redirect URL after successful force-deletion of a record.

LANGUAGE: php
CODE:
ForceDeleteAction::make()
    ->successRedirectUrl(route('posts.list'))

----------------------------------------

TITLE: Basic Toggle Implementation in PHP
DESCRIPTION: Simple implementation of a toggle component for boolean values in Filament Forms.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Toggle;

Toggle::make('is_admin')

----------------------------------------

TITLE: Configuring Full-Width Anonymous Actions in PHP
DESCRIPTION: This snippet shows how to make independent infolist actions consume the full width of the infolist.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Actions;

Actions::make([
    // ...
])->fullWidth(),

----------------------------------------

TITLE: Implementing a Count Summarizer with Query Scope in PHP
DESCRIPTION: Demonstrates how to use a Count summarizer with a custom query scope on an IconColumn in a Filament table.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\IconColumn;
use Filament\Tables\Columns\Summarizers\Count;
use Illuminate\Database\Query\Builder;

IconColumn::make('is_published')
    ->boolean()
    ->summarize(
        Count::make()->query(fn (Builder $query) => $query->where('is_published', true)),
    )

----------------------------------------

TITLE: Setting Translatable Locales for Specific Filament Resource
DESCRIPTION: PHP code showing how to set custom translatable locales for a specific Filament resource by overriding the getTranslatableLocales() method. This allows defining different languages for individual resources.

LANGUAGE: php
CODE:
use Filament\Resources\Concerns\Translatable;
use Filament\Resources\Resource;

class BlogPostResource extends Resource
{
    use Translatable;
    
    // ...
    
    public static function getTranslatableLocales(): array
    {
        return ['en', 'fr'];
    }
}

----------------------------------------

TITLE: Configuring PostCSS
DESCRIPTION: JavaScript configuration for PostCSS plugins including nesting and cssnano

LANGUAGE: javascript
CODE:
module.exports = {
    plugins: [
        require('postcss-nesting')(),
        require('cssnano')({
            preset: 'default',
        }),
    ],
};

----------------------------------------

TITLE: Color Variants for Badge Component
DESCRIPTION: Demonstrates different color options available for the badge including danger, gray, info, success, and warning.

LANGUAGE: blade
CODE:
<x-filament::badge color="danger">
    New
</x-filament::badge>

<x-filament::badge color="gray">
    New
</x-filament::badge>

<x-filament::badge color="info">
    New
</x-filament::badge>

<x-filament::badge color="success">
    New
</x-filament::badge>

<x-filament::badge color="warning">
    New
</x-filament::badge>

----------------------------------------

TITLE: Setting Default Values for Select Filters in Filament Tables
DESCRIPTION: Demonstrates how to set default values for both single and multiple select filters. This applies the filter by default when the table is loaded.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\SelectFilter;

SelectFilter::make('status')
    ->options([
        'draft' => 'Draft',
        'reviewing' => 'Reviewing',
        'published' => 'Published',
    ])
    ->default('draft')

SelectFilter::make('status')
    ->options([
        'draft' => 'Draft',
        'reviewing' => 'Reviewing',
        'published' => 'Published',
    ])
    ->multiple()
    ->default(['draft', 'reviewing'])

----------------------------------------

TITLE: Configuring Vite for Auto-Refresh with Livewire
DESCRIPTION: Vite configuration to automatically refresh the browser when Livewire components are updated.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'vite'
import laravel, { refreshPaths } from 'laravel-vite-plugin'

export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/js/app.js'],
            refresh: [
                ...refreshPaths,
                'app/Livewire/**',
            ],
        }),
    ],
})

----------------------------------------

TITLE: Default Table Row Grouping in PHP Filament
DESCRIPTION: Sets up default grouping for table rows using a specific attribute.

LANGUAGE: php
CODE:
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->defaultGroup('status');
}

----------------------------------------

TITLE: Making Filament Relation Manager Translatable
DESCRIPTION: PHP code demonstrating how to make a Filament relation manager translatable by applying the Translatable trait. This enables translation functionality for the relation manager.

LANGUAGE: php
CODE:
use Filament\Resources\RelationManagers\Concerns\Translatable;
use Filament\Resources\RelationManagers\RelationManager;

class BlogPostsRelationManager extends RelationManager
{
    use Translatable;
    
    // ...
}

----------------------------------------

TITLE: Aside Section Component in Blade
DESCRIPTION: Demonstrates positioning the section header aside the content using the aside attribute.

LANGUAGE: blade
CODE:
<x-filament::section aside>
    <x-slot name="heading">
        User details
    </x-slot>

    {{-- Content --}}
</x-filament::section>

----------------------------------------

TITLE: Pagination with Extreme Links
DESCRIPTION: Shows how to implement pagination with first and last page navigation links.

LANGUAGE: blade
CODE:
<x-filament::pagination
    :paginator="$users"
    extreme-links
/>

----------------------------------------

TITLE: Installing Filament Forms Package with Composer
DESCRIPTION: Command to install the Filament Forms package using Composer package manager.

LANGUAGE: bash
CODE:
composer require filament/forms:"^3.3" -W

----------------------------------------

TITLE: Installing Tailwind CSS and Related Packages
DESCRIPTION: npm command to install Tailwind CSS v3 with required plugins and dependencies for use with Filament.

LANGUAGE: bash
CODE:
npm install tailwindcss@3 @tailwindcss/forms @tailwindcss/typography postcss postcss-nesting autoprefixer --save-dev

----------------------------------------

TITLE: Disabling Pagination in Filament Tables
DESCRIPTION: Demonstrates how to disable the default table pagination using the paginated() method.

LANGUAGE: php
CODE:
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->paginated(false);
}

----------------------------------------

TITLE: Adding LocaleSwitcher to Filament Relation Manager Table
DESCRIPTION: PHP code showing how to add a LocaleSwitcher action to the header of a Filament relation manager's table. This allows language switching within the relation manager.

LANGUAGE: php
CODE:
use Filament\Tables;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->columns([
            // ...
        ])
        ->headerActions([
            // ...
            Tables\Actions\LocaleSwitcher::make(),
        ]);
}

----------------------------------------

TITLE: Autocomplete Suggestions Implementation
DESCRIPTION: Adds autocomplete suggestions to the tags input component.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TagsInput;

TagsInput::make('tags')
    ->suggestions([
        'tailwindcss',
        'alpinejs',
        'laravel',
        'livewire',
    ])

----------------------------------------

TITLE: Dynamically Labelling Builder Items Based on Content in PHP
DESCRIPTION: This code example illustrates how to dynamically label Builder items based on their content using a closure in the label() method. It shows how to handle both the block picker label and individual item labels.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Builder;
use Filament\Forms\Components\TextInput;

Builder\Block::make('heading')
    ->schema([
        TextInput::make('content')
            ->live(onBlur: true)
            ->required(),
        // ...
    ])
    ->label(function (?array $state): string {
        if ($state === null) {
            return 'Heading';
        }

        return $state['content'] ?? 'Untitled heading';
    })

----------------------------------------

TITLE: Customizing Content Width in a Filament Panel
DESCRIPTION: This snippet demonstrates how to customize the maximum content width for a Filament panel using the maxContentWidth() method.

LANGUAGE: php
CODE:
use Filament\Panel;
use Filament\Support\Enums\MaxWidth;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->maxContentWidth(MaxWidth::Full);
}

----------------------------------------

TITLE: Setting an ID for a Section Component in PHP
DESCRIPTION: Shows how to set a custom ID for a Section component using the id() method.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\Section;

Section::make()
    ->id('main-section')

----------------------------------------

TITLE: Eloquent Model Array Cast Configuration
DESCRIPTION: Sets up array casting for the technologies field in an Eloquent model to handle JSON storage

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;

class App extends Model
{
    protected $casts = [
        'technologies' => 'array',
    ];

    // ...
}

----------------------------------------

TITLE: Inheriting Active Locale in Filament Relation Manager
DESCRIPTION: PHP code demonstrating how to inherit the active locale from a Translatable resource page in a Filament relation manager. This allows the relation manager to react to language changes on the parent page.

LANGUAGE: php
CODE:
use Filament\Resources\RelationManagers\Concerns\Translatable;
use Filament\Resources\RelationManagers\RelationManager;
use Livewire\Attributes\Reactive;

class BlogPostsRelationManager extends RelationManager
{
    use Translatable;
    
    #[Reactive]
    public ?string $activeLocale = null;
    
    // ...
}

----------------------------------------

TITLE: Tailwind CSS Configuration
DESCRIPTION: Configuration file for Tailwind CSS including Filament preset and content paths.

LANGUAGE: javascript
CODE:
import preset from './vendor/filament/support/tailwind.config.preset'

export default {
    presets: [preset],
    content: [
        './app/Filament/**/*.php',
        './resources/views/filament/**/*.blade.php',
        './vendor/filament/**/*.blade.php',
    ],
}

----------------------------------------

TITLE: Configuring Global Search Debounce in PHP
DESCRIPTION: Illustrates how to adjust the debounce time for global search requests in the Filament panel configuration to limit the number of requests made while the user is typing.

LANGUAGE: php
CODE:
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->globalSearchDebounce('750ms');
}

----------------------------------------

TITLE: Setting Custom Field Label - PHP
DESCRIPTION: Shows how to set a custom label for a form field using translation strings for localization.

LANGUAGE: php
CODE:
use Filament\Forms\Components\TextInput;

TextInput::make('name')
    ->label(__('fields.name'))

----------------------------------------

TITLE: Creating Hidden Form Field in Filament PHP
DESCRIPTION: Demonstrates how to create a hidden form field using Filament's Hidden component. The component allows storing values in a form that are not visible to users in the UI but can still be accessed and modified through browser developer tools.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Hidden;

Hidden::make('token')

----------------------------------------

TITLE: Registering JavaScript Files in PHP
DESCRIPTION: Shows how to register JavaScript files using the Js class. This allows Filament to manage and load scripts for your project or plugin.

LANGUAGE: php
CODE:
use Filament\Support\Assets\Js;

FilamentAsset::register([
    Js::make('custom-script', __DIR__ . '/../../resources/js/custom.js'),
]);

----------------------------------------

TITLE: Grid Layout Implementation
DESCRIPTION: Shows how to implement a grid layout with responsive breakpoints for consistent column widths.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\Layout\Grid;
use Filament\Tables\Columns\TextColumn;

Grid::make([
    'lg' => 2,
])
    ->schema([
        TextColumn::make('phone')
            ->icon('heroicon-m-phone'),
        TextColumn::make('email')
            ->icon('heroicon-m-envelope'),
    ])

----------------------------------------

TITLE: Displaying Filters Above Table Content in Filament
DESCRIPTION: This snippet demonstrates how to render the filters above the table content instead of in a dropdown in a Filament table using the FiltersLayout::AboveContent option.

LANGUAGE: php
CODE:
use Filament\Tables\Enums\FiltersLayout;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->filters([
            // ...
        ], layout: FiltersLayout::AboveContent);
}

----------------------------------------

TITLE: Setting up Database Tables for Imports
DESCRIPTION: Commands to publish and run migrations for job batches, notifications, and Filament import tables.

LANGUAGE: bash
CODE:
# Laravel 11 and higher
php artisan make:queue-batches-table
php artisan make:notifications-table

# Laravel 10
php artisan queue:batches-table
php artisan notifications:table

# All apps
php artisan vendor:publish --tag=filament-actions-migrations
php artisan migrate

----------------------------------------

TITLE: Setting an ID for a Section Component in PHP
DESCRIPTION: Shows how to set a custom ID for a Section component in Filament forms using the id() method. This allows for more specific targeting of the component.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;

Section::make()
    ->id('main-section')

----------------------------------------

TITLE: Using Filament Icon Component with SVG in Blade
DESCRIPTION: Blade template snippet demonstrating how to use the Filament icon component with an inline SVG element.

LANGUAGE: blade
CODE:
<x-filament::icon
    alias="panels::topbar.global-search.field"
    wire:target="search"
    class="h-5 w-5 text-gray-500 dark:text-gray-400"
>
    <svg>
        <!-- ... -->
    </svg>
</x-filament::icon>

----------------------------------------

TITLE: Rendering HTML and Markdown in Text Entry using PHP
DESCRIPTION: Shows how to render HTML and Markdown content in a TextEntry component, including sanitization options.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;
use Illuminate\Support\HtmlString;
use Illuminate\Contracts\View\View;

TextEntry::make('description')
    ->html()

TextEntry::make('description')
    ->formatStateUsing(fn (string $state): HtmlString => new HtmlString($state))

TextEntry::make('description')
    ->formatStateUsing(fn (string $state): View => view(
        'filament.infolists.components.description-entry-content',
        ['state' => $state],
    ))

TextEntry::make('description')
    ->markdown()

----------------------------------------

TITLE: Adding Field Hint - PHP
DESCRIPTION: Shows how to add a hint next to the field label with optional HTML support and custom colors.

LANGUAGE: php
CODE:
use Filament\Forms\Components\RichEditor;

RichEditor::make('content')
    ->hint('Translatable')
    ->hintColor('primary')

----------------------------------------

TITLE: Relation Manager Form and Table Definition
DESCRIPTION: Example showing how to define the form and table schema for a relation manager.

LANGUAGE: php
CODE:
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Tables;
use Filament\Tables\Table;

public function form(Form $form): Form
{
    return $form
        ->schema([
            Forms\Components\TextInput::make('title')->required(),
            // ...
        ]);
}

public function table(Table $table): Table
{
    return $table
        ->columns([
            Tables\Columns\TextColumn::make('title'),
            // ...
        ]);
}

----------------------------------------

TITLE: Setting Empty State Heading in Filament Table
DESCRIPTION: Demonstrates how to customize the heading text displayed when a table has no records using the emptyStateHeading() method.

LANGUAGE: php
CODE:
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->emptyStateHeading('No posts yet');
}

----------------------------------------

TITLE: Adding Extra HTML Attributes to a Section Component in PHP
DESCRIPTION: Illustrates how to add extra HTML attributes to a Section component in Filament forms. This example adds a custom CSS class to the component's outer DOM element.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;

Section::make()
    ->extraAttributes(['class' => 'custom-section-style'])

----------------------------------------

TITLE: Customizing Affix Icon Colors
DESCRIPTION: Demonstrates how to customize the color of affix icons using color attributes.

LANGUAGE: blade
CODE:
<x-filament::input.wrapper
    suffix-icon="heroicon-m-check-circle"
    suffix-icon-color="success"
>
    <x-filament::input
        type="url"
        wire:model="domain"
    />
</x-filament::input.wrapper>

----------------------------------------

TITLE: Link Font Weight Customization
DESCRIPTION: Demonstrates various font weight options for links using the weight attribute.

LANGUAGE: blade
CODE:
<x-filament::link weight="thin">
    New user
</x-filament::link>

<x-filament::link weight="extralight">
    New user
</x-filament::link>

<x-filament::link weight="light">
    New user
</x-filament::link>

<x-filament::link weight="normal">
    New user
</x-filament::link>

<x-filament::link weight="medium">
    New user
</x-filament::link>

<x-filament::link weight="semibold">
    New user
</x-filament::link>
   
<x-filament::link weight="bold">
    New user
</x-filament::link>

<x-filament::link weight="black">
    New user
</x-filament::link>

----------------------------------------

TITLE: Creating Table Widget via CLI
DESCRIPTION: Artisan command to generate a new table widget for the dashboard.

LANGUAGE: bash
CODE:
php artisan make:filament-widget LatestOrders --table

----------------------------------------

TITLE: Setting Textarea to Read-Only in PHP with Filament
DESCRIPTION: Shows how to make a textarea read-only, which differs from disabling the field in terms of submission behavior and styling.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Textarea;

Textarea::make('description')
    ->readOnly()

----------------------------------------

TITLE: Creating Custom Notification Blade View
DESCRIPTION: Demonstrates the minimal required code to create a custom Blade view for rendering Filament notifications. It uses the base notification component and passes the notification object.

LANGUAGE: blade
CODE:
<x-filament-notifications::notification :notification="$notification">
    {{-- Notification content --}}
</x-filament-notifications::notification>

----------------------------------------

TITLE: Setting Starting Column for Components in a Grid using PHP
DESCRIPTION: This snippet demonstrates how to use the columnStart() method to position a TextInput component at specific starting columns for different breakpoints within a Section's grid layout.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;

Section::make()
    ->columns([
        'sm' => 3,
        'xl' => 6,
        '2xl' => 8,
    ])
    ->schema([
        TextInput::make('name')
            ->columnStart([
                'sm' => 2,
                'xl' => 3,
                '2xl' => 4,
            ]),
        // ...
    ])

----------------------------------------

TITLE: Section Component with Custom Icon Color in Blade
DESCRIPTION: Demonstrates customizing the icon color using the icon-color attribute.

LANGUAGE: blade
CODE:
<x-filament::section
    icon="heroicon-o-user"
    icon-color="info"
>
    <x-slot name="heading">
        User details
    </x-slot>

    {{-- Content --}}
</x-filament::section>

----------------------------------------

TITLE: Formatting Currency in Text Entry using PHP
DESCRIPTION: Demonstrates how to format monetary values in a TextEntry component, including currency specification and value division.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;

TextEntry::make('price')
    ->money('EUR')

TextEntry::make('price')
    ->money('EUR', divideBy: 100)

TextEntry::make('price')
    ->money('EUR', locale: 'nl')

----------------------------------------

TITLE: Testing Action URLs in Filament
DESCRIPTION: Demonstrates how to test if a Filament action has the correct URL and opens in the correct tab using various assertion methods.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('links to the correct Filament sites', function () {
    $invoice = Invoice::factory()->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->assertActionHasUrl('filament', 'https://filamentphp.com/')
        ->assertActionDoesNotHaveUrl('filament', 'https://github.com/filamentphp/filament')
        ->assertActionShouldOpenUrlInNewTab('filament')
        ->assertActionShouldNotOpenUrlInNewTab('github');
});

----------------------------------------

TITLE: Setting Up Icon Button Trigger in PHP
DESCRIPTION: Shows how to create a circular icon button trigger without label using iconButton() method.

LANGUAGE: php
CODE:
Action::make('edit')
    ->icon('heroicon-m-pencil-square')
    ->iconButton()

----------------------------------------

TITLE: Installing Filament Spatie Tags Plugin via Composer
DESCRIPTION: Command to install the Filament Spatie Tags Plugin using Composer package manager.

LANGUAGE: bash
CODE:
composer require filament/spatie-laravel-tags-plugin:"^3.2" -W

----------------------------------------

TITLE: Customizing Grid Columns in Filament Fieldset
DESCRIPTION: This code shows how to customize the grid layout within a fieldset using the columns() method. It allows for more flexible organization of fields within the fieldset.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Fieldset;

Fieldset::make('Label')
    ->schema([
        // ...
    ])
    ->columns(3)

----------------------------------------

TITLE: Implementing Select Component in Blade
DESCRIPTION: This snippet demonstrates how to use the select component within an input wrapper. It creates a dropdown menu for selecting a status value, with options for draft, reviewing, and published states. The component uses wire:model for data binding.

LANGUAGE: blade
CODE:
<x-filament::input.wrapper>
    <x-filament::input.select wire:model="status">
        <option value="draft">Draft</option>
        <option value="reviewing">Reviewing</option>
        <option value="published">Published</option>
    </x-filament::input.select>
</x-filament::input.wrapper>

----------------------------------------

TITLE: Customizing Success Notifications
DESCRIPTION: Configuring custom notification messages and appearance for successful replication events.

LANGUAGE: php
CODE:
use Filament\Notifications\Notification;

ReplicateAction::make()
    ->successNotificationTitle('Category replicated')

ReplicateAction::make()
    ->successNotification(
       Notification::make()
            ->success()
            ->title('Category replicated')
            ->body('The category has been replicated successfully.'),
    )

----------------------------------------

TITLE: Configuring Tailwind CSS for Filament
DESCRIPTION: JavaScript configuration for Tailwind CSS, including Filament preset and content paths.

LANGUAGE: javascript
CODE:
import preset from './vendor/filament/support/tailwind.config.preset'

export default {
    presets: [preset],
    content: [
        './app/Filament/**/*.php',
        './resources/views/filament/**/*.blade.php',
        './vendor/filament/**/*.blade.php',
    ],
}

----------------------------------------

TITLE: Generating Livewire Component (Bash)
DESCRIPTION: Command to generate a new Livewire component using Artisan CLI.

LANGUAGE: bash
CODE:
php artisan make:livewire ManageProduct

----------------------------------------

TITLE: Making Filament Resource List Page Translatable
DESCRIPTION: PHP code demonstrating how to make a Filament resource's List page translatable by applying the Translatable trait and adding a LocaleSwitcher action. This allows switching between languages on the list page.

LANGUAGE: php
CODE:
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListBlogPosts extends ListRecords
{
    use ListRecords\Concerns\Translatable;
    
    protected function getHeaderActions(): array
    {
        return [
            Actions\LocaleSwitcher::make(),
            // ...
        ];
    }
    
    // ...
}

----------------------------------------

TITLE: Creating a Collapsible Section in Filament Forms
DESCRIPTION: Demonstrates how to make a section collapsible using the collapsible() method. This allows users to optionally hide content in long forms.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;

Section::make('Cart')
    ->description('The items you have selected for purchase')
    ->schema([
        // ...
    ])
    ->collapsible()

----------------------------------------

TITLE: Active Tab State Implementation
DESCRIPTION: Shows how to set a tab as active using the active attribute, including conditional activation with Livewire integration.

LANGUAGE: blade
CODE:
<x-filament::tabs>
    <x-filament::tabs.item
        :active="$activeTab === 'tab1'"
        wire:click="$set('activeTab', 'tab1')"
    >
        Tab 1
    </x-filament::tabs.item>

    {{-- Other tabs --}}
</x-filament::tabs>

----------------------------------------

TITLE: Customizing Key Label in Key-value Field in PHP
DESCRIPTION: Demonstrates how to customize the label for key fields in a key-value component using the keyLabel() method.

LANGUAGE: php
CODE:
use Filament\Forms\Components\KeyValue;

KeyValue::make('meta')
    ->keyLabel('Property name')

----------------------------------------

TITLE: Creating Link-Style Action Trigger in PHP
DESCRIPTION: Demonstrates how to create a link-style trigger without background color using the link() method.

LANGUAGE: php
CODE:
Action::make('edit')
    ->link()

----------------------------------------

TITLE: File Upload Validation Rules
DESCRIPTION: Implementation of file validation rules including file types, size limits, and number of files.

LANGUAGE: php
CODE:
use Filament\Forms\Components\FileUpload;

FileUpload::make('attachments')
    ->multiple()
    ->acceptedFileTypes(['application/pdf'])
    ->minSize(512)
    ->maxSize(1024)
    ->minFiles(2)
    ->maxFiles(5)

----------------------------------------

TITLE: Installing Filament Spatie Media Library Plugin
DESCRIPTION: Commands to install the plugin and set up required database migrations

LANGUAGE: bash
CODE:
composer require filament/spatie-laravel-media-library-plugin:"^3.2" -W

LANGUAGE: bash
CODE:
php artisan vendor:publish --provider="Spatie\MediaLibrary\MediaLibraryServiceProvider" --tag="medialibrary-migrations"

LANGUAGE: bash
CODE:
php artisan migrate

----------------------------------------

TITLE: Creating a Collapsed Section by Default in Filament Forms
DESCRIPTION: Shows how to create a section that is collapsed by default using the collapsed() method. This is useful for sections that are not immediately relevant to all users.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Section;

Section::make('Cart')
    ->description('The items you have selected for purchase')
    ->schema([
        // ...
    ])
    ->collapsed()

----------------------------------------

TITLE: Private Image Configuration with Temporary URLs
DESCRIPTION: Configures the image column to handle private images by generating temporary URLs.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\ImageColumn;

ImageColumn::make('header_image')
    ->visibility('private')

----------------------------------------

TITLE: Rendering Livewire Component - Blade
DESCRIPTION: Blade syntax for rendering the Livewire component on a page

LANGUAGE: blade
CODE:
@livewire('create-post')

----------------------------------------

TITLE: Calling an Action in Filament using Pest and Livewire
DESCRIPTION: Demonstrates how to call a Filament action using Pest's Livewire testing helpers. The example shows testing the 'send' action on an invoice.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can send invoices', function () {
    $invoice = Invoice::factory()->create();

    livewire(EditInvoice::class, [
        'invoice' => $invoice,
    ])
        ->callAction('send');

    expect($invoice->refresh())
        ->isSent()->toBeTrue();
});

----------------------------------------

TITLE: Laravel Layout Template
DESCRIPTION: Basic Laravel Blade layout template for Filament components with required styles and scripts.

LANGUAGE: blade
CODE:
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">

        <meta name="application-name" content="{{ config('app.name') }}">
        <meta name="csrf-token" content="{{ csrf_token() }}">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>{{ config('app.name') }}</title>

        <style>
            [x-cloak] {
                display: none !important;
            }
        </style>

        @filamentStyles
        @vite('resources/css/app.css')
    </head>

    <body class="antialiased">
        {{ $slot }}

        @filamentScripts
        @vite('resources/js/app.js')
    </body>
</html>

----------------------------------------

TITLE: Configuring Custom Font Provider in Filament Panel
DESCRIPTION: PHP configuration code to set up a custom Google Font in a Filament panel using the SpatieGoogleFontProvider. This example configures the 'Inter' font family using Spatie's Google Fonts package as the provider.

LANGUAGE: php
CODE:
use Filament\FontProviders\SpatieGoogleFontProvider;
use Filament\Panel;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->font('Inter', provider: SpatieGoogleFontProvider::class);
}

----------------------------------------

TITLE: Installing Filament Assets in Existing Laravel Projects
DESCRIPTION: Command to install Filament Infolist Builder assets in an existing Laravel project.

LANGUAGE: bash
CODE:
php artisan filament:install --infolists

----------------------------------------

TITLE: Generating Custom Column Class in Filament CLI
DESCRIPTION: Shows the Artisan command to generate a custom column class and associated view file for Filament tables.

LANGUAGE: bash
CODE:
php artisan make:table-column StatusSwitcher

----------------------------------------

TITLE: Implementing HasLabel Interface for PHP Enum
DESCRIPTION: Example of implementing the HasLabel interface to provide human-readable labels for enum cases. Used for displaying enum values in UI components.

LANGUAGE: php
CODE:
use Filament\Support\Contracts\HasLabel;

enum Status: string implements HasLabel
{
    case Draft = 'draft';
    case Reviewing = 'reviewing';
    case Published = 'published';
    case Rejected = 'rejected';
    
    public function getLabel(): ?string
    {
        return $this->name;
        
        // or
    
        return match ($this) {
            self::Draft => 'Draft',
            self::Reviewing => 'Reviewing',
            self::Published => 'Published',
            self::Rejected => 'Rejected',
        };
    }
}

----------------------------------------

TITLE: Limiting Global Search Results in PHP
DESCRIPTION: Shows how to limit the number of global search results per resource by setting the $globalSearchResultsLimit property.

LANGUAGE: php
CODE:
protected static int $globalSearchResultsLimit = 20;

----------------------------------------

TITLE: Adding Grid Layout to Repeater Items in PHP
DESCRIPTION: Shows how to organize repeater items into a grid layout with multiple columns.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Repeater;

Repeater::make('qualifications')
    ->schema([
        // ...
    ])
    ->grid(2)

----------------------------------------

TITLE: Eloquent Model Configuration for Tags
DESCRIPTION: Configures an Eloquent model to properly cast the tags field as an array.

LANGUAGE: php
CODE:
use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    protected $casts = [
        'tags' => 'array',
    ];

    // ...
}

----------------------------------------

TITLE: Setting Default Values and Placeholders
DESCRIPTION: Shows how to implement default values and placeholder text for empty entry states.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;

TextEntry::make('title')
    ->default('Untitled')

TextEntry::make('title')
    ->placeholder('Untitled')

----------------------------------------

TITLE: Adding Multiple Summarizers to a Table Column in PHP
DESCRIPTION: Shows how to add both Average and Range summarizers to a numeric TextColumn in a Filament table.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\Summarizers\Average;
use Filament\Tables\Columns\Summarizers\Range;
use Filament\Tables\Columns\TextColumn;

TextColumn::make('rating')
    ->numeric()
    ->summarize([
        Average::make(),
        Range::make(),
    ])

----------------------------------------

TITLE: Inline Toggle Layout
DESCRIPTION: Configuration for inline layout mode where the label appears adjacent to the toggle.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Toggle;

Toggle::make('is_admin')
    ->inline()

----------------------------------------

TITLE: Implementing View Action for Eloquent Records in PHP
DESCRIPTION: This snippet demonstrates how to use the ViewAction to display Eloquent record information in a modal. It shows the basic setup with form fields for structuring the information.

LANGUAGE: php
CODE:
use Filament\Actions\ViewAction;
use Filament\Forms\Components\TextInput;

ViewAction::make()
    ->record($this->post)
    ->form([
        TextInput::make('title')
            ->required()
            ->maxLength(255),
        // ...
    ])

----------------------------------------

TITLE: Basic Modal Implementation in Blade
DESCRIPTION: Basic implementation of a modal component with a trigger button.

LANGUAGE: blade
CODE:
<x-filament::modal>
    <x-slot name="trigger">
        <x-filament::button>
            Open modal
        </x-filament::button>
    </x-slot>

    {{-- Modal content --}}
</x-filament::modal>

----------------------------------------

TITLE: Livewire Data Binding Examples
DESCRIPTION: Shows different methods of binding form field data using Livewire and Alpine.js.

LANGUAGE: blade
CODE:
<input wire:model="name" />

<!-- Or -->

<div x-data="{ state: $wire.$entangle('name') }">
    <input x-model="state" />
</div>

----------------------------------------

TITLE: Passing array data to an infolist in PHP
DESCRIPTION: This code shows how to manually pass an array of data to an infolist using the state() method and define its schema.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;

public function productInfolist(Infolist $infolist): Infolist
{
    return $infolist
        ->state([
            'name' => 'MacBook Pro',
            'category' => [
                'name' => 'Laptops',
            ],
            // ...
        ])
        ->schema([
            TextEntry::make('name'),
            TextEntry::make('category.name'),
            // ...
        ]);
}

----------------------------------------

TITLE: Group Summarization Configuration in Filament
DESCRIPTION: Implements group summarization with the option to hide grouped rows and display only summaries.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\Summarizers\Sum;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->columns([
            TextColumn::make('views_count')
                ->summarize(Sum::make()),
            TextColumn::make('likes_count')
                ->summarize(Sum::make()),
        ])
        ->defaultGroup('category')
        ->groupsOnly();
}

----------------------------------------

TITLE: Accessing Eloquent Record in Blade Template
DESCRIPTION: Demonstrates how to access the associated Eloquent record within a Blade view template using the $getRecord() function.

LANGUAGE: blade
CODE:
<div>
    {{ $getRecord()->name }}
</div>

----------------------------------------

TITLE: Soft Delete Records Filter - PHP
DESCRIPTION: Implementation of the built-in TrashedFilter for filtering soft-deleted records in Filament.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\TrashedFilter;

TrashedFilter::make()

----------------------------------------

TITLE: Injecting Current State in PHP Column Configuration
DESCRIPTION: This snippet shows how to inject the current state of a column into a configuration function in PHP.

LANGUAGE: php
CODE:
function ($state) {
    // ...
}

----------------------------------------

TITLE: Adding Dividers Between Actions in PHP
DESCRIPTION: Demonstrates how to add dividers between groups of actions by nesting ActionGroup objects and using the dropdown(false) method.

LANGUAGE: php
CODE:
ActionGroup::make([
    ActionGroup::make([
        // Array of actions
    ])->dropdown(false),
    // Array of actions
])

----------------------------------------

TITLE: Configuring Vite for Laravel
DESCRIPTION: Vite configuration for automatic browser refresh when Livewire components are updated.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'vite'
import laravel, { refreshPaths } from 'laravel-vite-plugin'

export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/js/app.js'],
            refresh: [
                ...refreshPaths,
                'app/Livewire/**',
            ],
        }),
    ],
})

----------------------------------------

TITLE: Customizing Empty State Icon in Filament Table
DESCRIPTION: Explains how to change the icon displayed in the empty state using the emptyStateIcon() method with Blade UI icons.

LANGUAGE: php
CODE:
use Filament\Tables\Table;

public function table(Table $table): Table
{
    return $table
        ->emptyStateIcon('heroicon-o-bookmark');
}

----------------------------------------

TITLE: Creating Chart Widget - Bash Command
DESCRIPTION: Command to generate a new chart widget in Filament

LANGUAGE: bash
CODE:
php artisan make:filament-widget BlogPostsChart --chart

----------------------------------------

TITLE: Registering a Widget in a Filament Resource
DESCRIPTION: Method to register a newly created widget in a Filament resource's getWidgets() method.

LANGUAGE: php
CODE:
public static function getWidgets(): array
{
    return [
        CustomerResource\Widgets\CustomerOverview::class,
    ];
}

----------------------------------------

TITLE: Halting Replication Process
DESCRIPTION: Example of conditionally halting the replication process using lifecycle hooks and notifications.

LANGUAGE: php
CODE:
use App\Models\Post;
use Filament\Notifications\Actions\Action;
use Filament\Notifications\Notification;

ReplicateAction::make()
    ->before(function (ReplicateAction $action, Post $record) {
        if (! $record->team->subscribed()) {
            Notification::make()
                ->warning()
                ->title('You don\'t have an active subscription!')
                ->body('Choose a plan to continue.')
                ->persistent()
                ->actions([
                    Action::make('subscribe')
                        ->button()
                        ->url(route('subscribe'), shouldOpenInNewTab: true),
                ])
                ->send();
        
            $action->halt();
        }
    })

----------------------------------------

TITLE: Injecting Utilities in Form Component Functions in PHP
DESCRIPTION: Examples of injecting various utilities into form component configuration functions.

LANGUAGE: php
CODE:
use App\Models\User;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;

DatePicker::make('date_of_birth')
    ->displayFormat(function (): string {
        if (auth()->user()->country_id === 'us') {
            return 'm/d/Y';
        }

        return 'd/m/Y';
    })

Select::make('user_id')
    ->options(function (): array {
        return User::all()->pluck('name', 'id')->all();
    })

TextInput::make('middle_name')
    ->required(fn (): bool => auth()->user()->hasMiddleName())

----------------------------------------

TITLE: Creating Filament Resource with View Page
DESCRIPTION: Command to generate a new Filament resource with a view page functionality

LANGUAGE: bash
CODE:
php artisan make:filament-resource User --view

----------------------------------------

TITLE: Rendering Livewire Component - Blade Template
DESCRIPTION: Basic Blade syntax to render the Livewire component on a page.

LANGUAGE: blade
CODE:
@livewire('list-products')

----------------------------------------

TITLE: Model Relationship Definitions
DESCRIPTION: Eloquent relationship definitions between Owner, Patient, and Treatment models.

LANGUAGE: php
CODE:
class Owner extends Model
{
    public function patients(): HasMany
    {
        return $this->hasMany(Patient::class);
    }
}

class Patient extends Model
{
    public function owner(): BelongsTo
    {
        return $this->belongsTo(Owner::class);
    }

    public function treatments(): HasMany
    {
        return $this->hasMany(Treatment::class);
    }
}

class Treatment extends Model
{
    public function patient(): BelongsTo
    {
        return $this->belongsTo(Patient::class);
    }
}

----------------------------------------

TITLE: Testing Table Filtering in PHP
DESCRIPTION: Test to verify table filtering functionality using filterTable() and assertCanSeeTableRecords() helpers.

LANGUAGE: php
CODE:
use function Pest\Livewire\livewire;

it('can filter posts by `is_published`', function () {
    $posts = Post::factory()->count(10)->create();

    livewire(PostResource\Pages\ListPosts::class)
        ->assertCanSeeTableRecords($posts)
        ->filterTable('is_published')
        ->assertCanSeeTableRecords($posts->where('is_published', true))
        ->assertCanNotSeeTableRecords($posts->where('is_published', false));
});

----------------------------------------

TITLE: Creating a Basic Filter in Filament PHP
DESCRIPTION: Demonstrates how to create a simple filter using Filter::make() and define its query constraint.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\Filter;
use Illuminate\Database\Eloquent\Builder;

Filter::make('is_featured')
    ->query(fn (Builder $query): Builder => $query->where('is_featured', true))

----------------------------------------

TITLE: Basic Placeholder Usage in Filament PHP Forms
DESCRIPTION: Demonstrates how to create a basic placeholder field that displays formatted date content from a Post model. The placeholder's content is set using a closure that formats the created_at timestamp.

LANGUAGE: php
CODE:
use App\Models\Post;
use Filament\Forms\Components\Placeholder;

Placeholder::make('created')
    ->content(fn (Post $record): string => $record->created_at->toFormattedDateString())

----------------------------------------

TITLE: Adding Details to Global Search Results in PHP
DESCRIPTION: Shows how to add extra details to global search results by overriding the getGlobalSearchResultDetails() method. This method returns an array of key-value pairs to be displayed below the result title.

LANGUAGE: php
CODE:
public static function getGlobalSearchResultDetails(Model $record): array
{
    return [
        'Author' => $record->author->name,
        'Category' => $record->category->name,
    ];
}

----------------------------------------

TITLE: Vite Configuration
DESCRIPTION: Vite configuration for auto-refreshing when Livewire components are updated.

LANGUAGE: javascript
CODE:
import { defineConfig } from 'vite'
import laravel, { refreshPaths } from 'laravel-vite-plugin'

export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/js/app.js'],
            refresh: [
                ...refreshPaths,
                'app/Livewire/**',
            ],
        }),
    ],
})

----------------------------------------

TITLE: Configuring Composer for Local Filament Development
DESCRIPTION: Modifies the composer.json file to use a local copy of Filament for development and testing purposes.

LANGUAGE: jsonc
CODE:
{
    // ...
    "require": {
        "filament/filament": "*",
    },
    "minimum-stability": "dev",
    "repositories": [
        {
            "type": "path",
            "url": "filament/packages/*"
        }
    ],
    // ...
}

----------------------------------------

TITLE: Implementing HasDescription Interface for PHP Enum
DESCRIPTION: Example of implementing both HasLabel and HasDescription interfaces to provide labels and detailed descriptions for enum cases.

LANGUAGE: php
CODE:
use Filament\Support\Contracts\HasDescription;
use Filament\Support\Contracts\HasLabel;

enum Status: string implements HasLabel, HasDescription
{
    case Draft = 'draft';
    case Reviewing = 'reviewing';
    case Published = 'published';
    case Rejected = 'rejected';
    
    public function getLabel(): ?string
    {
        return $this->name;
    }
    
    public function getDescription(): ?string
    {
        return match ($this) {
            self::Draft => 'This has not finished being written yet.',
            self::Reviewing => 'This is ready for a staff member to read.',
            self::Published => 'This has been approved by a staff member and is public on the website.',
            self::Rejected => 'A staff member has decided this is not appropriate for the website.',
        };
    }
}

----------------------------------------

TITLE: Configuring Tailwind CSS for Filament
DESCRIPTION: JavaScript configuration for Tailwind CSS, including Filament preset and content paths for proper styling.

LANGUAGE: js
CODE:
import preset from './vendor/filament/support/tailwind.config.preset'

export default {
    presets: [preset],
    content: [
        './app/Filament/**/*.php',
        './resources/views/filament/**/*.blade.php',
        './vendor/filament/**/*.blade.php',
    ],
}

----------------------------------------

TITLE: Eager-Loading Relationships for Global Search in PHP
DESCRIPTION: Demonstrates how to eager-load relationships to improve performance when displaying search result details. This is done by overriding the getGlobalSearchEloquentQuery() method.

LANGUAGE: php
CODE:
public static function getGlobalSearchEloquentQuery(): Builder
{
    return parent::getGlobalSearchEloquentQuery()->with(['author', 'category']);
}

----------------------------------------

TITLE: Colored Stats Widget Implementation - Filament PHP
DESCRIPTION: Implementation showing how to add colors to stats for visual distinction

LANGUAGE: php
CODE:
protected function getStats(): array
{
    return [
        Stat::make('Unique views', '192.1k')
            ->description('32k increase')
            ->descriptionIcon('heroicon-m-arrow-trending-up')
            ->color('success'),
        Stat::make('Bounce rate', '21%')
            ->description('7% increase')
            ->descriptionIcon('heroicon-m-arrow-trending-down')
            ->color('danger'),
        Stat::make('Average time on page', '3:12')
            ->description('3% increase')
            ->descriptionIcon('heroicon-m-arrow-trending-up')
            ->color('success'),
    ];
}

----------------------------------------

TITLE: Creating View Entry in PHP for Filament
DESCRIPTION: Demonstrates how to create a view entry using ViewEntry::make() to render a custom view for an entry component.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\ViewEntry;

ViewEntry::make('status')
    ->view('filament.infolists.entries.status-switcher')

----------------------------------------

TITLE: Installing Filament Notifications
DESCRIPTION: Command to install the Notifications package for delivering flash notifications and handling database-driven notifications with websockets support.

LANGUAGE: bash
CODE:
composer require filament/notifications

----------------------------------------

TITLE: Configuring Tailwind CSS Layers
DESCRIPTION: CSS configuration for Tailwind layers in app.css file.

LANGUAGE: css
CODE:
@tailwind base;
@tailwind components;
@tailwind utilities;
@tailwind variants;

----------------------------------------

TITLE: Setting Default Translatable Locales in Filament Panel
DESCRIPTION: PHP code showing how to set default translatable locales for the Spatie Translatable Plugin in a Filament panel configuration. This defines which languages will be available for translation.

LANGUAGE: php
CODE:
use Filament\SpatieLaravelTranslatablePlugin;

public function panel(Panel $panel): Panel
{
    return $panel
        // ...
        ->plugin(
            SpatieLaravelTranslatablePlugin::make()
                ->defaultLocales(['en', 'es']),
        );
}

----------------------------------------

TITLE: Rendering Filament Widget in Blade View
DESCRIPTION: This snippet shows how to use the @livewire directive to render a Filament widget (PostsChart) within a Blade view. The widget is referenced by its fully qualified class name.

LANGUAGE: blade
CODE:
<div>
    @livewire(\App\Livewire\Dashboard\PostsChart::class)
</div>

----------------------------------------

TITLE: Setting a Custom Label for a Filter in Filament PHP
DESCRIPTION: Shows how to set a custom label for a filter using the label() method.

LANGUAGE: php
CODE:
use Filament\Tables\Filters\Filter;

Filter::make('is_featured')
    ->label('Featured')

----------------------------------------

TITLE: Implementing HasIcon Interface for PHP Enum
DESCRIPTION: Example of implementing the HasIcon interface to associate icons with enum cases for UI display.

LANGUAGE: php
CODE:
use Filament\Support\Contracts\HasIcon;

enum Status: string implements HasIcon
{
    case Draft = 'draft';
    case Reviewing = 'reviewing';
    case Published = 'published';
    case Rejected = 'rejected';
    
    public function getIcon(): ?string
    {
        return match ($this) {
            self::Draft => 'heroicon-m-pencil',
            self::Reviewing => 'heroicon-m-eye',
            self::Published => 'heroicon-m-check',
            self::Rejected => 'heroicon-m-x-mark',
        };
    }
}

----------------------------------------

TITLE: Installing Filament in New Laravel Project
DESCRIPTION: Commands to scaffold a new Laravel project with Filament, including installing Livewire, Alpine.js, and Tailwind CSS.

LANGUAGE: bash
CODE:
php artisan filament:install --scaffold --notifications

npm install

npm run dev

----------------------------------------

TITLE: Making Filament Resource Create Page Translatable
DESCRIPTION: PHP code showing how to make a Filament resource's Create page translatable by applying the Translatable trait and adding a LocaleSwitcher action. This enables language switching on the create page.

LANGUAGE: php
CODE:
use Filament\Actions;
use Filament\Resources\Pages\CreateRecord;

class CreateBlogPost extends CreateRecord
{
    use CreateRecord\Concerns\Translatable;
    
    protected function getHeaderActions(): array
    {
        return [
            Actions\LocaleSwitcher::make(),
            // ...
        ];
    }
    
    // ...
}

----------------------------------------

TITLE: Configuring PostCSS for Tailwind and Autoprefixer
DESCRIPTION: JavaScript configuration for PostCSS, including Tailwind CSS, PostCSS Nesting, and Autoprefixer plugins.

LANGUAGE: js
CODE:
export default {
    plugins: {
        'tailwindcss/nesting': 'postcss-nesting',
        tailwindcss: {},
        autoprefixer: {},
    },
}

----------------------------------------

TITLE: Implementing Basic SpatieTagsColumn
DESCRIPTION: Basic implementation of the SpatieTagsColumn for displaying tags in tables.

LANGUAGE: php
CODE:
use Filament\Tables\Columns\SpatieTagsColumn;

SpatieTagsColumn::make('tags')

----------------------------------------

TITLE: Injecting Utilities in Filter Configuration in Filament PHP
DESCRIPTION: Demonstrates how to inject various utilities and dependencies when configuring filters.

LANGUAGE: php
CODE:
use Filament\Tables\Contracts\HasTable;
use Filament\Tables\Table;
use Illuminate\Http\Request;

function (Request $request, Table $table) {
    // ...
}

----------------------------------------

TITLE: Setting Default Empty Items for Repeater in PHP
DESCRIPTION: Demonstrates how to set a default number of empty items for a repeater when the form is loaded without existing data.

LANGUAGE: php
CODE:
use Filament\Forms\Components\Repeater;

Repeater::make('members')
    ->schema([
        // ...
    ])
    ->defaultItems(3)

----------------------------------------

TITLE: Making Filament Resource Edit Page Translatable
DESCRIPTION: PHP code demonstrating how to make a Filament resource's Edit page translatable by applying the Translatable trait and adding a LocaleSwitcher action. This allows language switching on the edit page.

LANGUAGE: php
CODE:
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;

class EditBlogPost extends EditRecord
{
    use EditRecord\Concerns\Translatable;
    
    protected function getHeaderActions(): array
    {
        return [
            Actions\LocaleSwitcher::make(),
            // ...
        ];
    }
    
    // ...
}

----------------------------------------

TITLE: Configuring Vite for Laravel and Livewire
DESCRIPTION: JavaScript configuration for Vite to enable automatic browser refreshing when Livewire components are updated.

LANGUAGE: js
CODE:
import { defineConfig } from 'vite'
import laravel, { refreshPaths } from 'laravel-vite-plugin'

export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/js/app.js'],
            refresh: [
                ...refreshPaths,
                'app/Livewire/**',
            ],
        }),
    ],
})

----------------------------------------

TITLE: Making Filament Simple Resource ManageRecords Page Translatable
DESCRIPTION: PHP code demonstrating how to make a Filament simple resource's ManageRecords page translatable by applying the Translatable trait and adding a LocaleSwitcher action. This allows language switching on the manage records page.

LANGUAGE: php
CODE:
use Filament\Actions;
use Filament\Resources\Pages\ManageRecords;

class ManageBlogPosts extends ListRecords
{
    use ManageRecords\Concerns\Translatable;
    
    protected function getHeaderActions(): array
    {
        return [
            Actions\LocaleSwitcher::make(),
            // ...
        ];
    }
    
    // ...
}

----------------------------------------

TITLE: Creating a Blade Layout for Livewire Components
DESCRIPTION: Blade template for creating a layout file to be used with Livewire components in a Filament application.

LANGUAGE: blade
CODE:
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">

        <meta name="application-name" content="{{ config('app.name') }}">
        <meta name="csrf-token" content="{{ csrf_token() }}">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>{{ config('app.name') }}</title>

        <style>
            [x-cloak] {
                display: none !important;
            }
        </style>

        @filamentStyles
        @vite('resources/css/app.css')
    </head>

    <body class="antialiased">
        {{ $slot }}

        @filamentScripts
        @vite('resources/js/app.js')
    </body>
</html>

----------------------------------------

TITLE: Setting Translatable Locales for Specific Filament Relation Manager
DESCRIPTION: PHP code showing how to set custom translatable locales for a specific Filament relation manager by overriding the getTranslatableLocales() method. This allows defining different languages for individual relation managers.

LANGUAGE: php
CODE:
use Filament\Resources\RelationManagers\Concerns\Translatable;
use Filament\Resources\RelationManagers\RelationManager;

class BlogPostsRelationManager extends RelationManager
{
    use Translatable;
    
    // ...
    
    public function getTranslatableLocales(): array
    {
        return ['en', 'fr'];
    }
}

----------------------------------------

TITLE: Passing Eloquent model data to an infolist in PHP
DESCRIPTION: This code demonstrates how to pass an Eloquent model instance to an infolist and define its schema using TextEntry components.

LANGUAGE: php
CODE:
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;

public function productInfolist(Infolist $infolist): Infolist
{
    return $infolist
        ->record($this->product)
        ->schema([
            TextEntry::make('name'),
            TextEntry::make('category.name'),
            // ...
        ]);
}