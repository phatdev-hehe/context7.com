TITLE: Initializing Typesense Python Client
DESCRIPTION: Python code example showing how to initialize the Typesense client and create a collection with defined schema

LANGUAGE: python
CODE:
import typesense

client = typesense.Client({
  'api_key': 'Hu52dwsas2AdxdE',
  'nodes': [{
    'host': 'localhost',
    'port': '8108',
    'protocol': 'http'
  }],
  'connection_timeout_seconds': 2
})

create_response = client.collections.create({
  "name": "companies",
  "fields": [
    {"name": "company_name", "type": "string" },
    {"name": "num_employees", "type": "int32" },
    {"name": "country", "type": "string", "facet": True }
  ],
  "default_sorting_field": "num_employees"
})

----------------------------------------

TITLE: Indexing Document in Typesense
DESCRIPTION: Python code showing how to index a document into a Typesense collection

LANGUAGE: python
CODE:
document = {
 'id': "124",
 'company_name': "Stark Industries",
 'num_employees': 5215,
 'country': "USA"
}

client.collections['companies'].documents.create(document)

----------------------------------------

TITLE: Searching Documents in Typesense
DESCRIPTION: Python code demonstrating how to search documents with filters and sorting in Typesense

LANGUAGE: python
CODE:
search_parameters = {
  'q'         : 'stork',
  'query_by'  : 'company_name',
  'filter_by' : 'num_employees:>100',
  'sort_by'   : 'num_employees:desc'
}

client.collections['companies'].documents.search(search_parameters)

----------------------------------------

TITLE: Starting Typesense Docker Container
DESCRIPTION: Command to start a Typesense server instance using Docker with port mapping and data persistence

LANGUAGE: bash
CODE:
docker run -p 8108:8108 -v/tmp/data:/data typesense/typesense:28.0 --data-dir /data --api-key=Hu52dwsas2AdxdE

----------------------------------------

TITLE: Running Benchmarks Command
DESCRIPTION: CLI command syntax for running Typesense benchmarks with options for comparing commits, setting batch sizes, and configuring test duration

LANGUAGE: bash
CODE:
typesense-benchmark benchmark [options]

Options:
  --commit-hashes <hashes...>    Commits to compare
  --binaries <paths...>         Paths to pre-built binaries to compare
  --batch-size <num>            Batch size for indexing (default: 100)
  --duration <time>             Duration for search tests (e.g., "30s", "1m")
  --fail <percentage>           Regression threshold percentage (default: 50)
  --api-key <key>              API key for Typesense
  -v, --verbose                Enable verbose output

----------------------------------------

TITLE: Typesense Installation Command
DESCRIPTION: CLI command syntax for installing Typesense with available options including container name, image name, git URL, and other configuration parameters

LANGUAGE: bash
CODE:
typesense-benchmark install [options]

Options:
  -n, --container-name <name>     Name for the Docker container (default: "bazel-build")
  -i, --image-name <image>        Name for the Docker image (default: "ubuntu-build")
  -g, --typesense-git-url <url>   Git URL for the Typesense repo
  -d, --working-directory <dir>   Working directory for installation
  -c, --commitHash <hash>         Specific commit to install
  -y, --yes                       Answer yes to all prompts
  -v, --verbose                   Enable verbose output

----------------------------------------

TITLE: Configuring CMake for Typesense Project
DESCRIPTION: Sets up the CMake project for Typesense, including compiler flags, dependencies, and build targets. It configures various libraries and executables required for the Typesense search engine.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.24.0)
project(typesense)

cmake_policy(SET CMP0074 NEW)
cmake_policy(SET CMP0003 NEW)

set(USE_SANTINIZER OFF)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17 -Wall -Wextra -Wno-unused-parameter -Werror=return-type -O2 -g -DNDEBUG")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall -Wextra -Wno-unused-parameter -Werror=return-type -std=c++17 -O0 -g")
set(DEP_ROOT_DIR ${CMAKE_SOURCE_DIR}/external-${CMAKE_SYSTEM_NAME})
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

# ... (rest of the CMake configuration)

----------------------------------------

TITLE: Running Tests Command
DESCRIPTION: CLI command syntax for running Typesense tests with configuration options for container settings, API keys, and test parameters

LANGUAGE: bash
CODE:
typesense-benchmark test [options]

Options:
  -n, --container-name <name>     Name for the Docker container
  -i, --image-name <image>        Name for the Docker image
  -g, --typesense-git-url <url>   Git URL for the Typesense repo
  -d, --working-directory <dir>   Working directory for tests
  -c, --commitHash <hash>         Specific commit to test
  -b, --binary <path>            Path to pre-built binary
  --api-key <key>                API key for Typesense (default: "xyz")
  --openAI-key <key>             OpenAI API key
  --ip <ip>                      IP address for Typesense
  -s, --snapshot-path <path>     Path for snapshot files
  -v, --verbose                  Enable verbose output
  -y, --yes                      Answer yes to all prompts

----------------------------------------

TITLE: Installing Typesense Repository
DESCRIPTION: Commands for cloning the repository and installing dependencies using pnpm

LANGUAGE: bash
CODE:
git clone [repository-url]
cd benchmark


----------------------------------------

TITLE: Project Setup Commands
DESCRIPTION: Commands for installing dependencies and building the project

LANGUAGE: bash
CODE:
pnpm install
pnpm build

----------------------------------------

TITLE: Running Tests Command
DESCRIPTION: Command for running all tests in the project

LANGUAGE: bash
CODE:
# Run all tests
pnpm test

----------------------------------------

TITLE: Project Structure Overview
DESCRIPTION: Directory structure showing the organization of the benchmark tool's source code, tests, and compiled output

LANGUAGE: bash
CODE:
benchmark/
├── src/
│   ├── commands/     # CLI commands
│   ├── services/     # Core services
│   │   ├── docker.ts       # Docker management
│   │   ├── k6.ts          # k6 load testing
│   │   └── typesense-process.ts  # Process control
│   ├── benchmarks/   # Benchmark scenarios
│   └── utils/        # Utility functions
├── test/            # Test files
└── dist/            # Compiled output

----------------------------------------

TITLE: Configuring CMake Compilation Flags
DESCRIPTION: Sets compiler flags for C++ and C based on build type (unit tests or release). Includes warning suppressions and debug/release macros.

LANGUAGE: cmake
CODE:
if(BUILD_UNIT_TESTS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUNIT_TEST -Wno-deprecated-copy -Wno-sign-compare -Wno-implicit-fallthrough")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUNIT_TEST -Wno-deprecated-copy -Wno-sign-compare -Wno-implicit-fallthrough")
elseif(NOT DEBUG)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNDEBUG -Wno-deprecated-copy -Wno-sign-compare -Wno-implicit-fallthrough")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DNDEBUG -Wno-deprecated-copy -Wno-sign-compare -Wno-implicit-fallthrough")
endif()

----------------------------------------

TITLE: Configuring Library Targets
DESCRIPTION: Creates object library and static library targets with position independent code, sets up linking, and configures output properties.

LANGUAGE: cmake
CODE:
add_library(OBJ_LIB OBJECT ${SOURCES})

set_property(TARGET ${OBJ_LIB} PROPERTY POSITION_INDEPENDENT_CODE 1)
#add_library(braft-shared SHARED $<TARGET_OBJECTS:OBJ_LIB>)
add_library(braft-static STATIC $<TARGET_OBJECTS:OBJ_LIB>)
#target_link_libraries(braft-shared ${DYNAMIC_LIB})
target_link_libraries(braft-static ${DYNAMIC_LIB})

SET_TARGET_PROPERTIES(braft-static PROPERTIES OUTPUT_NAME braft CLEAN_DIRECT_OUTPUT 1)

----------------------------------------

TITLE: Setting Compilation Flags for Release Build in CMake
DESCRIPTION: Sets the C++ and C compilation flags for release builds, including the NDEBUG macro and disabling narrowing warnings.

LANGUAGE: CMake
CODE:
if(NOT DEBUG)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNDEBUG -Wno-narrowing")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DNDEBUG -Wno-narrowing")
endif()

----------------------------------------

TITLE: Creating Object Libraries in CMake for BRPC Components
DESCRIPTION: Defines object libraries for BUTIL and SOURCES, setting them as position-independent code for shared library compatibility.

LANGUAGE: CMake
CODE:
add_library(BUTIL_LIB OBJECT ${BUTIL_SOURCES})
add_library(SOURCES_LIB OBJECT ${SOURCES})
add_dependencies(SOURCES_LIB PROTO_LIB)

set_property(TARGET ${SOURCES_LIB} PROPERTY POSITION_INDEPENDENT_CODE 1)
set_property(TARGET ${BUTIL_LIB} PROPERTY POSITION_INDEPENDENT_CODE 1)

----------------------------------------

TITLE: Creating Static Library for BRPC in CMake
DESCRIPTION: Combines object libraries to create a static library for BRPC, optionally linking with GLOG if enabled.

LANGUAGE: CMake
CODE:
add_library(brpc-static STATIC $<TARGET_OBJECTS:BUTIL_LIB>
                               $<TARGET_OBJECTS:SOURCES_LIB>
                               $<TARGET_OBJECTS:PROTO_LIB>)

if(BRPC_WITH_GLOG)
    target_link_libraries(brpc-static ${GLOG_LIB})
endif()

SET_TARGET_PROPERTIES(brpc-static PROPERTIES OUTPUT_NAME brpc CLEAN_DIRECT_OUTPUT 1)

----------------------------------------

TITLE: Configuring Installation for BRPC Static Library in CMake
DESCRIPTION: Sets up the installation rules for the BRPC static library, specifying destinations for runtime, library, and archive files.

LANGUAGE: CMake
CODE:
install(TARGETS brpc-static
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        )

----------------------------------------

TITLE: Setting Include Directories
DESCRIPTION: Configures include paths for the build system, adding both the binary and source directories.

LANGUAGE: cmake
CODE:
include_directories(${CMAKE_CURRENT_BINARY_DIR})
include_directories(${CMAKE_SOURCE_DIR}/src)

----------------------------------------

TITLE: Including Directories in CMake for BRPC Project
DESCRIPTION: Adds the current binary directory and the project's source directory to the include path for compilation.

LANGUAGE: CMake
CODE:
include_directories(${CMAKE_CURRENT_BINARY_DIR})
include_directories(${PROJECT_SOURCE_DIR}/src)

----------------------------------------

TITLE: Setting Installation Targets
DESCRIPTION: Configures installation rules for the static library, specifying destination paths for binaries, libraries, and archives.

LANGUAGE: cmake
CODE:
install(TARGETS braft-static
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib${LIBSUFFIX}
        ARCHIVE DESTINATION lib${LIBSUFFIX}
        )

----------------------------------------

TITLE: Displaying Network Interface Statistics
DESCRIPTION: Console output showing detailed network interface statistics for ens5 and loopback interfaces. Metrics include bytes transferred, packet counts, errors, drops, FIFO buffers, frame errors, compression status, and multicast packets for both receive and transmit operations.

LANGUAGE: plaintext
CODE:
Inter-|   Receive                                                |  Transmit
 face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed
  ens5: 324278716  897631    0    0    0     0          0         0 93933882  575535    0    0    0     0       0          0
    lo: 1308386    5312    0    0    0     0          0         0  1308386    5312    0    0    0     0       0          0