TITLE: Complete Scene Setup with Mesh and Lights
DESCRIPTION: Final implementation showing a complete React Three Fiber scene with a customized mesh and lighting setup.

LANGUAGE: jsx
CODE:
import { Canvas } from "@react-three/fiber";

export default function App() {
  return (
      <Canvas>
        <mesh>
          <boxGeometry args={[2, 2, 2]} />
          <meshPhongMaterial />
        </mesh>
        <ambientLight intensity={0.1} />
        <directionalLight position={[0, 0, 5]} color="red" />
      </Canvas>
  );
}

----------------------------------------

TITLE: Creating a Basic 3D Scene with React Three Fiber
DESCRIPTION: This example demonstrates how to create a reusable 3D component using React Three Fiber. It includes a rotating box that responds to user interactions and participates in the render loop.

LANGUAGE: jsx
CODE:
import * as THREE from 'three'
import React, { useRef, useState } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'

function Box(props) {
  const meshRef = useRef()
  const [hovered, setHover] = useState(false)
  const [active, setActive] = useState(false)
  useFrame((state, delta) => (meshRef.current.rotation.x += delta))
  return (
    <mesh
      {...props}
      ref={meshRef}
      scale={active ? 1.5 : 1}
      onClick={(event) => setActive(!active)}
      onPointerOver={(event) => setHover(true)}
      onPointerOut={(event) => setHover(false)}>
      <boxGeometry args={[1, 1, 1]} />
      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />
    </mesh>
  )
}

export default function App() {
  return (
    <Canvas>
      <ambientLight intensity={Math.PI / 2} />
      <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} decay={0} intensity={Math.PI} />
      <pointLight position={[-10, -10, -10]} decay={0} intensity={Math.PI} />
      <Box position={[-1.2, 0, 0]} />
      <Box position={[1.2, 0, 0]} />
    </Canvas>
  )
}

----------------------------------------

TITLE: Creating a 3D Scene with React Three Fiber
DESCRIPTION: Example of creating a 3D scene with a rotating, interactive box using React Three Fiber. Demonstrates component creation, state management, and event handling within a 3D context.

LANGUAGE: jsx
CODE:
import { createRoot } from 'react-dom/client'
import React, { useRef, useState } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'

function Box(props) {
  // This reference gives us direct access to the THREE.Mesh object
  const ref = useRef()
  // Hold state for hovered and clicked events
  const [hovered, hover] = useState(false)
  const [clicked, click] = useState(false)
  // Subscribe this component to the render-loop, rotate the mesh every frame
  useFrame((state, delta) => (ref.current.rotation.x += delta))
  // Return the view, these are regular Threejs elements expressed in JSX
  return (
    <mesh
      {...props}
      ref={ref}
      scale={clicked ? 1.5 : 1}
      onClick={(event) => click(!clicked)}
      onPointerOver={(event) => hover(true)}
      onPointerOut={(event) => hover(false)}>
      <boxGeometry args={[1, 1, 1]} />
      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />
    </mesh>
  )
}

createRoot(document.getElementById('root')).render(
  <Canvas>
    <ambientLight intensity={Math.PI / 2} />
    <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} decay={0} intensity={Math.PI} />
    <pointLight position={[-10, -10, -10]} decay={0} intensity={Math.PI} />
    <Box position={[-1.2, 0, 0]} />
    <Box position={[1.2, 0, 0]} />
  </Canvas>,
)

----------------------------------------

TITLE: Initializing Canvas Component in React Three Fiber
DESCRIPTION: Sets up the basic Canvas component from React Three Fiber that handles scene and camera setup automatically. The Canvas is responsive to its parent container size.

LANGUAGE: jsx
CODE:
import { createRoot } from 'react-dom/client'
import { Canvas } from '@react-three/fiber'

function App() {
  return (
    <div id="canvas-container">
      <Canvas />
    </div>
  )
}

createRoot(document.getElementById('root')).render(<App />)

----------------------------------------

TITLE: Declarative Object Definition in React Three Fiber
DESCRIPTION: Demonstrates the preferred declarative approach for defining 3D objects in React Three Fiber, using nested components and props instead of directly instantiating Three.js objects.

LANGUAGE: jsx
CODE:
<mesh visible userData={{ hello: 'world' }} position={[1, 2, 3]} rotation={[Math.PI / 2, 0, 0]}>
  <sphereGeometry args={[1, 16, 16]} />
  <meshStandardMaterial color="hotpink" transparent />
</mesh>

----------------------------------------

TITLE: Installing React Three Fiber Base Dependencies
DESCRIPTION: Basic npm installation command for react-three-fiber and its core dependency three.js

LANGUAGE: bash
CODE:
npm install three @react-three/fiber

----------------------------------------

TITLE: Adding Lights to Scene
DESCRIPTION: Demonstrates how to add ambient and directional lights to the scene with specific properties like intensity, color, and position.

LANGUAGE: jsx
CODE:
<Canvas>
  <ambientLight intensity={0.1} />
  <directionalLight color="red" position={[0, 0, 5]} />

----------------------------------------

TITLE: Creating Basic Mesh with Geometry and Material
DESCRIPTION: Demonstrates how to create a basic mesh component with box geometry and standard material in React Three Fiber. Components automatically attach to their parent mesh.

LANGUAGE: jsx
CODE:
<Canvas>
  <mesh>
    <boxGeometry />
    <meshStandardMaterial />
  </mesh>
</Canvas>

----------------------------------------

TITLE: Implementing Event Handlers in React Three Fiber Mesh
DESCRIPTION: Comprehensive example showing all available event handlers that can be attached to a mesh component in React Three Fiber. Includes mouse events, pointer events, and update callbacks.

LANGUAGE: jsx
CODE:
<mesh
  onClick={(e) => console.log('click')}
  onContextMenu={(e) => console.log('context menu')}
  onDoubleClick={(e) => console.log('double click')}
  onWheel={(e) => console.log('wheel spins')}
  onPointerUp={(e) => console.log('up')}
  onPointerDown={(e) => console.log('down')}
  onPointerOver={(e) => console.log('over')}
  onPointerOut={(e) => console.log('out')}
  onPointerEnter={(e) => console.log('enter')}
  onPointerLeave={(e) => console.log('leave')}
  onPointerMove={(e) => console.log('move')}
  onPointerMissed={() => console.log('missed')}
  onUpdate={(self) => console.log('props have been updated')}
/>

----------------------------------------

TITLE: Basic Canvas Setup in React Three Fiber
DESCRIPTION: Demonstrates basic usage of the Canvas component to create a 3D scene with a pink sphere and point light.

LANGUAGE: jsx
CODE:
import React from 'react'
import { Canvas } from '@react-three/fiber'

const App = () => (
  <Canvas>
    <pointLight position={[10, 10, 10]} />
    <mesh>
      <sphereGeometry />
      <meshStandardMaterial color="hotpink" />
    </mesh>
  </Canvas>
)

----------------------------------------

TITLE: Sharing Geometries and Materials in React Three Fiber
DESCRIPTION: Demonstrates how to efficiently share geometries and materials across multiple objects using useMemo to prevent unnecessary recreations.

LANGUAGE: jsx
CODE:
const geom = useMemo(() => new BoxGeometry(), [])
const mat = useMemo(() => new MeshBasicMaterial(), [])
return items.map(i => <mesh geometry={geom} material={mat} ...

----------------------------------------

TITLE: Installing React Three Fiber
DESCRIPTION: Command to install Three.js, its type definitions, and React Three Fiber using npm.

LANGUAGE: bash
CODE:
npm install three @types/three @react-three/fiber

----------------------------------------

TITLE: Animating Mesh Rotation in React Three Fiber
DESCRIPTION: Shows how to animate the rotation of a mesh object using useFrame and a reference to the mesh. The rotation is based on the elapsed time.

LANGUAGE: jsx
CODE:
useFrame(({ clock }) => {
  myMesh.current.rotation.x = clock.elapsedTime
})

----------------------------------------

TITLE: React Native Example with React Three Fiber
DESCRIPTION: This example demonstrates how to use React Three Fiber in a React Native environment, creating a 3D scene with interactive boxes.

LANGUAGE: jsx
CODE:
import React, { useRef, useState } from 'react'
import { Canvas, useFrame } from '@react-three/fiber/native'

function Box(props) {
  const meshRef = useRef(null)
  const [hovered, setHover] = useState(false)
  const [active, setActive] = useState(false)
  useFrame((state, delta) => (meshRef.current.rotation.x += delta))
  return (
    <mesh
      {...props}
      ref={meshRef}
      scale={active ? 1.5 : 1}
      onClick={(event) => setActive(!active)}
      onPointerOver={(event) => setHover(true)}
      onPointerOut={(event) => setHover(false)}>
      <boxGeometry args={[1, 1, 1]} />
      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />
    </mesh>
  )
}

export default function App() {
  return (
    <Canvas>
      <ambientLight intensity={Math.PI / 2} />
      <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} decay={0} intensity={Math.PI} />
      <pointLight position={[-10, -10, -10]} decay={0} intensity={Math.PI} />
      <Box position={[-1.2, 0, 0]} />
      <Box position={[1.2, 0, 0]} />
    </Canvas>
  )
}

----------------------------------------

TITLE: Loading GLTF Model Scene
DESCRIPTION: Simple scene component that loads and renders a GLTF model using useLoader.

LANGUAGE: jsx
CODE:
function Scene() {
  const gltf = useLoader(GLTFLoader, '/Poimandres.gltf')
  return <primitive object={gltf.scene} />
}

----------------------------------------

TITLE: Resource Reuse Implementation
DESCRIPTION: Shows how to reuse geometries and materials to reduce GPU overhead.

LANGUAGE: jsx
CODE:
const red = new THREE.MeshLambertMaterial({ color: "red" })
const sphere = new THREE.SphereGeometry(1, 28, 28)

function Scene() {
  return (
    <>
      <mesh geometry={sphere} material={red} />
      <mesh position={[1, 2, 3]} geometry={sphere} material={red} />

----------------------------------------

TITLE: React Three Fiber Basic Event Handlers
DESCRIPTION: Example showing all available event handlers that can be attached to a mesh component in React Three Fiber, including click, context menu, double click, wheel, and pointer events.

LANGUAGE: jsx
CODE:
<mesh
  onClick={(e) => console.log('click')}
  onContextMenu={(e) => console.log('context menu')}
  onDoubleClick={(e) => console.log('double click')}
  onWheel={(e) => console.log('wheel spins')}
  onPointerUp={(e) => console.log('up')}
  onPointerDown={(e) => console.log('down')}
  onPointerOver={(e) => console.log('over')}
  onPointerOut={(e) => console.log('out')}
  onPointerEnter={(e) => console.log('enter')}
  onPointerLeave={(e) => console.log('leave')}
  onPointerMove={(e) => console.log('move')}
  onPointerMissed={() => console.log('missed')}
  onUpdate={(self) => console.log('props have been updated')}
/>

----------------------------------------

TITLE: Instancing for Performance Optimization
DESCRIPTION: Demonstrates how to use instancing to render many objects in a single draw call.

LANGUAGE: jsx
CODE:
function Instances({ count = 100000, temp = new THREE.Object3D() }) {
  const instancedMeshRef = useRef()
  useEffect(() => {
    for (let i = 0; i < count; i++) {
      temp.position.set(Math.random(), Math.random(), Math.random())
      temp.updateMatrix()
      instancedMeshRef.current.setMatrixAt(i, temp.matrix)
    }
    instancedMeshRef.current.instanceMatrix.needsUpdate = true
  }, [])
  return (
    <instancedMesh ref={instancedMeshRef} args={[null, null, count]}>
      <boxGeometry />
      <meshPhongMaterial />
    </instancedMesh>
  )

----------------------------------------

TITLE: Complete Scene with Multiple Textures
DESCRIPTION: Final implementation showing a complete scene with all texture maps applied to a sphere with proper displacement scaling.

LANGUAGE: jsx
CODE:
function Scene() {
  const [colorMap, displacementMap, normalMap, roughnessMap, aoMap] = useLoader(TextureLoader, [
    'PavingStones092_1K_Color.jpg',
    'PavingStones092_1K_Displacement.jpg',
    'PavingStones092_1K_Normal.jpg',
    'PavingStones092_1K_Roughness.jpg',
    'PavingStones092_1K_AmbientOcclusion.jpg',
  ])
  return (
    <mesh>
      {/* Width and height segments for displacementMap */}
      <sphereGeometry args={[1, 100, 100]} />
      <meshStandardMaterial
        displacementScale={0.2}
        map={colorMap}
        displacementMap={displacementMap}
        normalMap={normalMap}
        roughnessMap={roughnessMap}
        aoMap={aoMap}
      />
    </mesh>
  )
}

----------------------------------------

TITLE: Using GLTF Component in App
DESCRIPTION: Example of how to use the converted GLTF model component in a React Three Fiber application with environment setup.

LANGUAGE: jsx
CODE:
import { Suspense } from 'react'
import { Canvas } from '@react-three/fiber'
import { Environment } from '@react-three/drei'

import Model from './Model'

export default function App() {
  return (
    <div className="App">
      <Canvas>
        <Suspense fallback={null}>
          <Model />
          <Environment preset="sunset" background />
        </Suspense>
      </Canvas>
    </div>
  )
}

----------------------------------------

TITLE: Creating a Basic Scene with React Three Fiber
DESCRIPTION: This snippet demonstrates how to create a basic 3D scene using React Three Fiber components. It includes a Canvas, group, mesh, material, and geometry.

LANGUAGE: jsx
CODE:
import { Canvas } from '@react-three/fiber'

function MyApp() {
  return (
    <Canvas>
      <group>
        <mesh>
          <meshNormalMaterial />
          <boxGeometry args={[2, 2, 2]} />
        </mesh>
      </group>
    </Canvas>
  )
}

----------------------------------------

TITLE: Correct Hook Usage in React Three Fiber
DESCRIPTION: Shows proper implementation of useThree hook within Canvas context.

LANGUAGE: jsx
CODE:
function Foo() {
  const { size } = useThree()
  ...
}

function App() {
  return (
    <Canvas>
      <Foo />

----------------------------------------

TITLE: Implementing On-Demand Rendering in React Three Fiber
DESCRIPTION: Shows how to set up on-demand rendering mode to reduce unnecessary frame renders and save system resources.

LANGUAGE: jsx
CODE:
<Canvas frameloop="demand">

----------------------------------------

TITLE: Efficient Position Update using useFrame in React Three Fiber
DESCRIPTION: Shows the correct way to update an object's position using useFrame and refs, ensuring performance and frame-rate independence.

LANGUAGE: jsx
CODE:
const meshRef = useRef()
useFrame((state, delta) => (meshRef.current.position.x += delta))
return <mesh ref={meshRef} />

----------------------------------------

TITLE: Using useFrame Hook in React Three Fiber
DESCRIPTION: Demonstrates how to use the useFrame hook to execute code on every frame of Fiber's render loop. This example logs a message every frame.

LANGUAGE: jsx
CODE:
import { useFrame } from '@react-three/fiber'

function MyAnimatedBox() {
  useFrame(() => {
    console.log("Hey, I'm executing every frame!")
  })
  return (
    <mesh>
      <boxGeometry />
      <meshBasicMaterial color="royalblue" />
    </mesh>
  )
}

----------------------------------------

TITLE: useLoader Implementation with Suspense
DESCRIPTION: Demonstrates asset loading using useLoader hook with React Suspense.

LANGUAGE: jsx
CODE:
import { Suspense } from 'react'
import { useLoader } from '@react-three/fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'

function Model() {
  const result = useLoader(GLTFLoader, '/model.glb')
  return <primitive object={result.scene} />
}

function App() {
  return (
    <Suspense fallback={<FallbackComponent /> /* or null */}>
      <Model />
    </Suspense>
  )

----------------------------------------

TITLE: Using ThreeElements Interface for Component Props
DESCRIPTION: Shows how to type components using ThreeElements interface to extract mesh properties and combine with custom props.

LANGUAGE: tsx
CODE:
import { ThreeElements } from '@react-three/fiber'

type FooProps = ThreeElements['mesh'] & { bar: boolean }

function Foo({ bar, ...props}: FooProps) {
  useEffect(() => {
    console.log(bar)
  }, [bar])
  return <mesh {...props} />
}

----------------------------------------

TITLE: Creating a Mesh Reference in React Three Fiber
DESCRIPTION: Demonstrates how to create a reference to a mesh object using React's useRef hook for direct manipulation in animations.

LANGUAGE: jsx
CODE:
import React from 'react'

function MyAnimatedBox() {
  const myMesh = React.useRef()
  return (
    <mesh ref={myMesh}>
      <boxGeometry />
      <meshBasicMaterial color="royalblue" />
    </mesh>
  )
}

----------------------------------------

TITLE: Extending React Three Fiber with Third-Party Objects
DESCRIPTION: Shows how to extend React Three Fiber's component catalog with third-party Three.js objects using the 'extend' function.

LANGUAGE: jsx
CODE:
import { extend } from '@react-three/fiber'
import { OrbitControls, TransformControls } from 'three-stdlib'
extend({ OrbitControls, TransformControls })

// ...
return (
  <>
    <orbitControls />
    <transformControls />

----------------------------------------

TITLE: Event Data Structure
DESCRIPTION: Detailed structure of the event object passed to event handlers, including DOM event data, intersection data, and Three.js specific properties.

LANGUAGE: jsx
CODE:
({
  ...DomEvent
  ...Intersection
  intersections: Intersection[]
  object: Object3D
  eventObject: Object3D
  unprojectedPoint: Vector3
  ray: Ray
  camera: Camera
  sourceEvent: DomEvent
  delta: number
}) => ...

----------------------------------------

TITLE: Custom Event Manager Configuration
DESCRIPTION: Example of customizing the event manager settings for Canvas component in React Three Fiber, including event filtering and computation.

LANGUAGE: tsx
CODE:
import { Canvas, events } from '@react-three/fiber'

const eventManagerFactory: Parameters<typeof Canvas>[0]['events'] = (state) => ({
  ...events(state),
  enabled: true,
  priority: 1,
  filter: (items: THREE.Intersection[], state: RootState) => items,
  compute: (event: DomEvent, state: RootState, previous?: RootState) => {
    state.pointer.set((event.offsetX / state.size.width) * 2 - 1, -(event.offsetY / state.size.height) * 2 + 1)
    state.raycaster.setFromCamera(state.pointer, state.camera)
  },
})

----------------------------------------

TITLE: Efficient Asset Loading using useLoader in React Three Fiber
DESCRIPTION: Demonstrates the correct way to load and cache assets using useLoader in React Three Fiber, improving performance through reuse.

LANGUAGE: jsx
CODE:
function Component() {
  const texture = useLoader(TextureLoader, url)
  return (
    <mesh>
      <sphereGeometry />
      <meshBasicMaterial map={texture} />
    </mesh>
  )
}

----------------------------------------

TITLE: Loading Progress Indicator
DESCRIPTION: Implementation of a loading progress indicator using Html and useProgress from drei, with Suspense integration.

LANGUAGE: jsx
CODE:
import { Html, useProgress } from '@react-three/drei'

function Loader() {
  const { progress } = useProgress()
  return <Html center>{progress} % loaded</Html>
}

LANGUAGE: jsx
CODE:
export default function App() {
  return (
    <Canvas>
      <Suspense fallback={<Loader />}>
        <Model />
      </Suspense>
    </Canvas>
  )
}

----------------------------------------

TITLE: WebGPU Renderer Setup in React Three Fiber
DESCRIPTION: Demonstrates how to set up a WebGPU renderer using async initialization with TypeScript support.

LANGUAGE: tsx
CODE:
import * as THREE from 'three/webgpu'
import * as TSL from 'three/tsl'
import { Canvas, extend, useFrame, useThree } from '@react-three/fiber'

declare module '@react-three/fiber' {
  interface ThreeElements extends ThreeToJSXElements<typeof THREE> {}
}

extend(THREE as any)

export default () => (
  <Canvas
    gl={async (props) => {
      const renderer = new THREE.WebGPURenderer(props as any)
      await renderer.init()
      return renderer
    }}>
      <mesh>
        <meshBasicNodeMaterial />
        <boxGeometry />
      </mesh>
  </Canvas>
)

----------------------------------------

TITLE: Interactive Scaling Mesh with React State
DESCRIPTION: Implementation of an interactive mesh that scales up and down on click using React state management.

LANGUAGE: jsx
CODE:
const [active, setActive] = useState(false)

<mesh scale={active ? 1.5 : 1} onClick={() => setActive(!active)}>
  <boxGeometry />
  <meshPhongMaterial color="royalblue" />
</mesh>

----------------------------------------

TITLE: Constructor Arguments Usage in React Three Fiber
DESCRIPTION: Shows how to pass constructor arguments to Three.js objects using the 'args' prop in React Three Fiber components.

LANGUAGE: jsx
CODE:
<sphereGeometry args={[1, 32]} />

----------------------------------------

TITLE: Deep Nesting with Attach in React Three Fiber
DESCRIPTION: Shows how to use the 'attach' prop for deep nesting of properties in React Three Fiber components.

LANGUAGE: jsx
CODE:
<mesh>
  <bufferGeometry>
    <bufferAttribute attach="attributes-position" args={[v, 3]} />

----------------------------------------

TITLE: Typing useRef with Three.js Mesh in React Three Fiber
DESCRIPTION: Demonstrates how to properly type a useRef hook when working with Three.js Mesh objects. Uses non-null assertion for ref access in effects.

LANGUAGE: tsx
CODE:
import { useRef, useEffect } from 'react'
import { Mesh } from 'three'

function Box(props) {
  const meshRef = useRef<Mesh>(null!)

  useEffect(() => {
    console.log(Boolean(meshRef.current))
  }, [])

  return (
    <mesh {...props} ref={meshRef}>
      <boxGeometry />
      <meshBasicMaterial />
    </mesh>
  )
}

----------------------------------------

TITLE: Property Shortcuts in React Three Fiber
DESCRIPTION: Demonstrates the use of shortcuts for setting properties in React Three Fiber, utilizing the .set() method of underlying Three.js objects.

LANGUAGE: jsx
CODE:
<mesh position={[1, 2, 3]} >
  <meshStandardMaterial color="hotpink" />

----------------------------------------

TITLE: Accessing Clock in useFrame for Time-Based Animation
DESCRIPTION: Shows how to extract time information from the clock parameter in useFrame to create time-based animations.

LANGUAGE: jsx
CODE:
useFrame(({ clock }) => {
  const a = clock.elapsedTime
  console.log(a) // the value will be 0 at scene initialization and grow each frame
})

----------------------------------------

TITLE: Loading Multiple Textures with useLoader
DESCRIPTION: Example of loading multiple texture maps (color, displacement, normal, roughness, ambient occlusion) using array syntax.

LANGUAGE: javascript
CODE:
const [colorMap, displacementMap, normalMap, roughnessMap, aoMap] = useLoader(TextureLoader, [
  'PavingStones092_1K_Color.jpg',
  'PavingStones092_1K_Displacement.jpg',
  'PavingStones092_1K_Normal.jpg',
  'PavingStones092_1K_Roughness.jpg',
  'PavingStones092_1K_AmbientOcclusion.jpg',
])

----------------------------------------

TITLE: Efficient Event Handling in React Three Fiber
DESCRIPTION: Demonstrates the correct way to handle events and update object properties using refs in React Three Fiber.

LANGUAGE: jsx
CODE:
<mesh onPointerMove={(e) => (ref.current.position.x = e.point.x)} />

----------------------------------------

TITLE: Loading OBJ Models
DESCRIPTION: Example of loading OBJ format models using OBJLoader and useLoader hook.

LANGUAGE: javascript
CODE:
import { OBJLoader } from 'three/addons/loaders/OBJLoader.js'
import { useLoader } from '@react-three/fiber'

LANGUAGE: jsx
CODE:
function Scene() {
  const obj = useLoader(OBJLoader, '/Poimandres.obj')
  return <primitive object={obj} />
}

----------------------------------------

TITLE: Attaching Non-Scene Objects in React Three Fiber
DESCRIPTION: Demonstrates how to attach non-Object3D primitives like geometries and materials to parent objects in the scene graph.

LANGUAGE: jsx
CODE:
<mesh>
  <meshBasicMaterial />
  <boxGeometry />

----------------------------------------

TITLE: Animation using Lerp and useFrame in React Three Fiber
DESCRIPTION: Demonstrates how to create smooth animations using linear interpolation (lerp) within the useFrame hook.

LANGUAGE: jsx
CODE:
function Signal({ active }) {
  const meshRef = useRef()
  useFrame((state, delta) => {
    meshRef.current.position.x = THREE.MathUtils.lerp(meshRef.current.position.x, active ? 100 : 0, 0.1)
  })
  return <mesh ref={meshRef} />

----------------------------------------

TITLE: Using the attach Prop in React Three Fiber
DESCRIPTION: This snippet shows how to use the attach prop to explicitly tell Fiber how to attach child components to their parent objects.

LANGUAGE: jsx
CODE:
<mesh>
  <meshNormalMaterial attach="material" />
  <boxGeometry attach="geometry" />
</mesh>

----------------------------------------

TITLE: Using Async GL Prop in React Three Fiber Canvas
DESCRIPTION: Demonstrates how to use the async GL prop for Canvas, allowing for async constructors like WebGPURenderer.

LANGUAGE: tsx
CODE:
<Canvas
  gl={async (props) => {
    // ...
    return renderer
  }}
>

----------------------------------------

TITLE: React Three Fiber Export Functions
DESCRIPTION: Collection of utility functions and hooks exported by React Three Fiber for managing 3D rendering, event handling, and React integration. These exports provide functionality for render callbacks, scene management, property application, and testing utilities.

LANGUAGE: javascript
CODE:
import { 
  addEffect,         // Add frame render callback
  addAfterEffect,    // Add after-render callback
  addTail,           // Add end-of-render callback
  buildGraph,        // Collect THREE.Object3D nodes
  flushGlobalEffects,// Flush render effects
  flushSync,         // Force synchronous React updates
  invalidate,        // Force view invalidation
  advance,           // Advance frameloop
  extend,            // Extend native objects
  createPortal,      // Create React portal
  createRoot,        // Create Three JSX root
  events,            // Dom pointer events
  applyProps,        // Set element properties
  act,               // React testing utility
  useInstanceHandle  // Access internal state
} from '@react-three/fiber'

----------------------------------------

TITLE: Loading FBX Models
DESCRIPTION: Demonstration of loading FBX format models using FBXLoader and the specialized useFBX hook.

LANGUAGE: javascript
CODE:
import { useLoader } from '@react-three/fiber'
import { FBXLoader } from 'three/addons/loaders/FBXLoader.js'

LANGUAGE: jsx
CODE:
function Scene() {
  const fbx = useLoader(FBXLoader, '/Poimandres.fbx')
  return <primitive object={fbx} />
}

LANGUAGE: jsx
CODE:
function Scene() {
  const fbx = useFBX('/Poimandres.fbx')
  return <primitive object={fbx} />
}

----------------------------------------

TITLE: Canvas Error Handling with Fallback
DESCRIPTION: Shows how to handle WebGL support errors by providing a fallback component when WebGL is not supported.

LANGUAGE: jsx
CODE:
<Canvas fallback={<div>Sorry no WebGL supported!</div>}>
  <mesh />
</Canvas>

----------------------------------------

TITLE: Basic Texture Loading with useLoader
DESCRIPTION: Simple example of loading a color texture map using TextureLoader and useLoader.

LANGUAGE: javascript
CODE:
const colorMap = useLoader(TextureLoader, 'PavingStones092_1K_Color.jpg')

----------------------------------------

TITLE: Custom Raycasting in React Three Fiber
DESCRIPTION: This snippet shows how to use a custom raycaster for object picking, using the useCamera hook from @react-three/drei.

LANGUAGE: jsx
CODE:
import { useCamera } from '@react-three/drei'

return <mesh raycast={useCamera(anotherCamera)} />

----------------------------------------

TITLE: Testing Mesh Children
DESCRIPTION: Complete test case verifying that a mesh has the correct number of children (material and geometry).

LANGUAGE: javascript
CODE:
test('mesh to have two children', async () => {
  const renderer = await ReactThreeTestRenderer.create(<MyRotatingBox />)
  const mesh = renderer.scene.children[0].allChildren
  expect(mesh.length).toBe(2)
})

----------------------------------------

TITLE: Implementing Controls with Improved Suspense Handling
DESCRIPTION: Demonstrates how to implement controls with improved Suspense and side-effect handling in React Three Fiber.

LANGUAGE: jsx
CODE:
import { ThreeElement, useThree } from '@react-three/fiber'
import { OrbitControls } from 'three/addons'

declare module '@react-three/fiber' {
  interface ThreeElements {
    OrbitControls: ThreeElement<typeof OrbitControls>
  }
}

extend({ OrbitControls })

function Controls() {
  const camera = useThree((state) => state.camera)
  const gl = useThree((state) => state.gl)

  // Will only initialize when tree is connected to screen
  return <orbitControls args={[camera, gl.domElement]}>
}

<Suspense>
  <Controls />
  <AsyncComponent />
</Suspense>

----------------------------------------

TITLE: Testing Click Interactions
DESCRIPTION: Test case that verifies click event handling and scale changes on a mesh component. Uses fireEvent to simulate interactions.

LANGUAGE: javascript
CODE:
test('click event makes box bigger', async () => {
  const renderer = await ReactThreeTestRenderer.create(<MyRotatingBox />)
  const mesh = renderer.scene.children[0]
  expect(mesh.props.scale).toBe(1)
  await renderer.fireEvent(mesh, 'click')
  expect(mesh.props.scale).toBe(1.5)
})

----------------------------------------

TITLE: Extending Custom Elements in React Three Fiber
DESCRIPTION: Example of creating and extending custom Three.js elements for use in React Three Fiber, including proper TypeScript definitions.

LANGUAGE: tsx
CODE:
import { useRef, useEffect } from 'react'
import { GridHelper } from 'three'
import { extend } from '@react-three/fiber'

// Create our custom element
class CustomElement extends GridHelper {}

// Extend so the reconciler will learn about it
extend({ CustomElement })

<customElement />

LANGUAGE: tsx
CODE:
import { useRef, useEffect } from 'react'
import { GridHelper } from 'three'
import { extend, ThreeElement } from '@react-three/fiber'

// Create our custom element
class CustomElement extends GridHelper {}

// Extend so the reconciler will learn about it
extend({ CustomElement })

// Add types to ThreeElements elements so primitives pick up on it
declare module '@react-three/fiber' {
  interface ThreeElements {
    customElement: ThreeElement<typeof CustomElement>
  }
}

// react-three-fiber will create your custom component and TypeScript will understand it
<customComponent />

----------------------------------------

TITLE: Basic Click Handler for React Three Fiber Mesh
DESCRIPTION: Simple example showing how to add a click event handler to a mesh that triggers an alert.

LANGUAGE: jsx
CODE:
<mesh onClick={() => alert('Hellooo')}>
  <boxGeometry />
  <meshPhongMaterial color="royalblue" />
</mesh>

----------------------------------------

TITLE: Equivalent Three.js Scene Creation
DESCRIPTION: This snippet shows the equivalent three.js code for creating the same scene as the React Three Fiber example. It demonstrates manual object creation and composition.

LANGUAGE: js
CODE:
import * as THREE from 'three'

const scene = new THREE.Scene() // <Canvas>

const group = new THREE.Group() // <group>

const mesh = new THREE.Mesh() // <mesh />
const material = new THREE.MeshNormalMaterial() // <meshNormalMaterial />
const geometry = new THREE.BoxGeometry(2, 2, 2) // <boxGeometry />

mesh.material = material
mesh.geometry = geometry

group.add(mesh)
scene.add(group)

----------------------------------------

TITLE: Using React Three Test Renderer with TypeScript
DESCRIPTION: Example showing how to create a test renderer instance for a Three.js mesh with a box geometry and standard material. Demonstrates the basic usage pattern for testing Three.js scene graphs.

LANGUAGE: typescript
CODE:
import ReactThreeTestRenderer from '@react-three/test-renderer'

const renderer = await ReactThreeTestRenderer.create(
  <mesh>
    <boxGeometry args={[2, 2]} />
    <meshStandardMaterial
      args={[
        {
          color: 0x0000ff,
        },
      ]}
    />
  </mesh>,
)

// assertions using the TestInstance & Scene Graph
console.log(renderer.toGraph())

----------------------------------------

TITLE: Managing Object Disposal in React Three Fiber
DESCRIPTION: Demonstrates how to control the automatic disposal of objects in React Three Fiber, particularly useful for globally managed assets.

LANGUAGE: jsx
CODE:
const globalGeometry = new THREE.BoxGeometry()
const globalMaterial = new THREE.MeshBasicMaterial()

function Mesh() {
  return (
    <group dispose={null}>
      <mesh geometry={globalGeometry} material={globalMaterial} />

----------------------------------------

TITLE: Handling Vector Properties in React Three Fiber
DESCRIPTION: This snippet shows how Fiber handles vector properties, automatically converting arrays to THREE.Vector3 objects.

LANGUAGE: jsx
CODE:
<mesh scale={[1, 2, 3]} />

----------------------------------------

TITLE: Importing GLTF Loader Dependencies
DESCRIPTION: Basic imports required for loading GLTF models in React Three Fiber using useLoader and GLTFLoader.

LANGUAGE: javascript
CODE:
import { useLoader } from '@react-three/fiber'
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js'

----------------------------------------

TITLE: Creating THREE Objects with React Three Fiber
DESCRIPTION: This snippet demonstrates how to create the same THREE.BoxGeometry object using React Three Fiber syntax, utilizing the args prop for constructor arguments.

LANGUAGE: jsx
CODE:
<boxGeometry args={[1, 2, 3]} />

----------------------------------------

TITLE: Basic useThree Hook Implementation
DESCRIPTION: Basic example of accessing state using useThree hook.

LANGUAGE: jsx
CODE:
import { useThree } from '@react-three/fiber'

function Foo() {
  const state = useThree()

----------------------------------------

TITLE: Passing Properties in React Three Fiber
DESCRIPTION: This snippet demonstrates how to pass three.js properties as React props in Fiber components.

LANGUAGE: jsx
CODE:
<meshBasicMaterial color="red" />

----------------------------------------

TITLE: Using startTransition for Expensive Operations in React Three Fiber
DESCRIPTION: Demonstrates how to use React 18's startTransition API to defer and schedule expensive operations in React Three Fiber.

LANGUAGE: jsx
CODE:
import { useTransition } from 'react'
import { Points } from '@react-three/drei'

const [isPending, startTransition] = useTransition()
const [radius, setRadius] = useState(1)
const positions = calculatePositions(radius)
const colors = calculateColors(radius)
const sizes = calculateSizes(radius)

<Points
  positions={positions}
  colors={colors}
  sizes={sizes}
  onPointerOut={() => {
    startTransition(() => {
      setRadius(prev => prev + 1)
    })
  }}
>
  <meshBasicMaterial vertexColors />
</Points>

----------------------------------------

TITLE: Configuring Next.js for Three.js Support
DESCRIPTION: Configuration for Next.js 13.1+ to handle Three.js dependencies using transpilePackages

LANGUAGE: javascript
CODE:
transpilePackages: ['three']

----------------------------------------

TITLE: Efficient Object Reuse in React Three Fiber Loops
DESCRIPTION: Demonstrates how to efficiently reuse objects in animation loops to avoid unnecessary garbage collection.

LANGUAGE: jsx
CODE:
function Foo(props)
  const vec = new THREE.Vector()
  useFrame(() => {
    ref.current.position.lerp(vec.set(x, y, z), 0.1)
  })

----------------------------------------

TITLE: Frame Advancement Implementation
DESCRIPTION: Method to advance frames and run GL Render loop subscribers with specified frame count and delta.

LANGUAGE: tsx
CODE:
renderer.advanceFrames(frames, delta)

----------------------------------------

TITLE: Animation using React Spring in React Three Fiber
DESCRIPTION: Shows how to use react-spring for animations in React Three Fiber, which handles its own frame loop outside of React.

LANGUAGE: jsx
CODE:
import { a, useSpring } from '@react-spring/three'

function Signal({ active }) {
  const { x } = useSpring({ x: active ? 100 : 0 })
  return <a.mesh position-x={x} />

----------------------------------------

TITLE: Creating React Three Test Renderer Instance
DESCRIPTION: Creates a ReactThreeTestRenderer instance with a Three.js element. Does not create an actual WebGLRenderer by default but renders the complete scene graph.

LANGUAGE: tsx
CODE:
const renderer = ReactThreeTestRenderer.create(element, options)

----------------------------------------

TITLE: Efficient State Access in React Three Fiber using Zustand
DESCRIPTION: Shows how to efficiently access state directly from a state manager like Zustand in React Three Fiber.

LANGUAGE: jsx
CODE:
useFrame(() => (ref.current.position.x = api.getState().x))
return <mesh ref={ref} />

----------------------------------------

TITLE: Accessing Children in ReactThreeTestInstance
DESCRIPTION: Returns the children test instances of this test instance according to the property 'children', excluding Geometries, Materials, etc.

LANGUAGE: typescript
CODE:
testInstance.children

----------------------------------------

TITLE: Manual Frame Triggering with OrbitControls
DESCRIPTION: Demonstrates how to manually trigger frame renders using invalidate() with orbit controls.

LANGUAGE: jsx
CODE:
function Controls() {
  const orbitControlsRef = useRef()
  const { invalidate, camera, gl } = useThree()
  useEffect(() => {
    orbitControlsRef.current.addEventListener('change', invalidate)
    return () => orbitControlsRef.current.removeEventListener('change', invalidate)
  }, [])
  return <orbitControls ref={orbitControlsRef} args={[camera, gl.domElement]} />

----------------------------------------

TITLE: Using useMemo for Vector Creation in React Three Fiber
DESCRIPTION: This example shows how to use useMemo to create a vector once outside the frame loop. This approach ensures the vector is created only once per component instance, optimizing memory usage while maintaining component-specific references.

LANGUAGE: javascript
CODE:
function Direction({ targetPosition }) {
  const ref = useRef()
  const tempVec = useMemo(() => new THREE.Vector3())

  useFrame(() => {
    const direction = tempVec.copy(ref.current.position).sub(targetPosition).normalize()
  })

  return <mesh ref={ref} />
}

----------------------------------------

TITLE: Custom Canvas Root Creation
DESCRIPTION: Shows how to create a custom canvas root with manual resize handling and event configuration.

LANGUAGE: jsx
CODE:
import * as THREE from 'three'
import { extend, createRoot, events } from '@react-three/fiber'

extend(THREE)

const root = createRoot(document.querySelector('canvas'))

async function app() {
  await root.configure({ events, camera: { position: [0, 0, 50] } })

  window.addEventListener('resize', () => {
    root.configure({ size: { width: window.innerWidth, height: window.innerHeight } })
  })

  window.dispatchEvent(new Event('resize'))

  root.render(<App />)
}

----------------------------------------

TITLE: Efficient Vector Reuse in React Three Fiber Frame Loop
DESCRIPTION: This example demonstrates the correct way to handle vector operations in React Three Fiber. It creates a reusable vector outside the component, preventing unnecessary object creation in each frame.

LANGUAGE: javascript
CODE:
const tempVec = new THREE.Vector3()

function Direction({ targetPosition }) {
  const ref = useRef()

  useFrame(() => {
    const direction = tempVec.copy(ref.current.position).sub(targetPosition).normalize()
  })

  return <mesh ref={ref} />
}

----------------------------------------

TITLE: Creating THREE Objects in JavaScript
DESCRIPTION: This snippet shows how to create a THREE.BoxGeometry object using the classic JavaScript API.

LANGUAGE: js
CODE:
const myBox = new THREE.BoxGeometry(1, 2, 3)

----------------------------------------

TITLE: Inefficient Vector Creation in React Three Fiber Frame Loop
DESCRIPTION: This example shows an incorrect implementation that creates a new vector in each frame, leading to excessive memory allocation. It demonstrates what to avoid when working with vectors in React Three Fiber.

LANGUAGE: javascript
CODE:
function Direction({ targetPosition }) {
  const ref = useRef()

  useFrame(() => {
    const direction = ref.current.position.clone().sub(targetPosition).normalize()
  })

  return <mesh ref={ref} />
}

----------------------------------------

TITLE: Installing React Three Test Renderer
DESCRIPTION: Command to install the React Three Test Renderer package as a development dependency.

LANGUAGE: bash
CODE:
npm install @react-three/test-renderer --save-dev

----------------------------------------

TITLE: Optimized Vector Reuse with Global Reference
DESCRIPTION: Demonstrates efficient vector usage by creating a single shared Vector3 instance outside the component that gets reused across all frames.

LANGUAGE: javascript
CODE:
const tempVec = new THREE.Vector3()

function MoveTowards({ x, y, z }) {
  const ref = useRef()

  useFrame(() => {
    ref.current.position.lerp(tempVec.set(x, y, z), 0.1)
  })

  return <mesh ref={ref} />
}

----------------------------------------

TITLE: Efficient Interval-based Updates in React Three Fiber
DESCRIPTION: Shows how to perform interval-based updates efficiently using refs, though this method is not refresh-rate independent.

LANGUAGE: jsx
CODE:
useEffect(() => {
  const interval = setInterval(() => ref.current.position.x += 0.1, 1)
  return () => clearInterval(interval)
}, [])

----------------------------------------

TITLE: Inefficient Vector Creation in Frame Loop
DESCRIPTION: Shows an anti-pattern where a new Three.js Vector3 is created on each frame update, leading to poor memory performance.

LANGUAGE: javascript
CODE:
function MoveTowards({ x, y, z }) {
  const ref = useRef()

  useFrame(() => {
    ref.current.position.lerp(new THREE.Vector3(x, y, z), 0.1)
  })

  return <mesh ref={ref} />
}

----------------------------------------

TITLE: Complete Act Usage Example
DESCRIPTION: Comprehensive example demonstrating the usage of act() with jest for testing a rotating mesh.

LANGUAGE: tsx
CODE:
import ReactThreeTestRenderer from 'react-three-test-renderer'

const Mesh = () => {
  const meshRef = React.useRef()
  useFrame((_, delta) => {
    meshRef.current.rotation.x += delta
  })

  return (
    <mesh ref={meshRef}>
      <boxGeometry args={[2, 2]} />
      <meshBasicMaterial />
    </mesh>
  )
}

const renderer = await ReactThreeTestRenderer.create(<Mesh />)

expect(renderer.scene.children[0].instance.rotation.x).toEqual(0)

await ReactThreeTestRenderer.act(async () => {
  await renderer.advanceFrames(2, 1)
})

expect(renderer.scene.children[0].instance.rotation.x).toEqual(2)

----------------------------------------

TITLE: Finding All Test Instances by Props
DESCRIPTION: Finds all test instances with the provided props. Returns an empty array if no instances are found. Supports RegExp matchers for prop values.

LANGUAGE: typescript
CODE:
testInstance.findAllByProps(props)

// Also accepts RegExp matchers
testInstance.findAllByProps({ [prop]: /^matches/i })

----------------------------------------

TITLE: CDN Implementation with HTM
DESCRIPTION: Basic setup for using React Three Fiber without build tools using ESM modules and HTM

LANGUAGE: jsx
CODE:
import ReactDOM from 'https://esm.sh/react-dom'
import React, { useRef, useState } from 'https://esm.sh/react'
import { Canvas, useFrame } from 'https://esm.sh/@react-three/fiber'
import htm from 'https://esm.sh/htm'

const html = htm.bind(React.createElement)
ReactDOM.render(html`<${Canvas}>...<//>`, document.getElementById('root'))

----------------------------------------

TITLE: Finding All Test Instances by Type
DESCRIPTION: Finds all test instances with the provided type. Returns an empty array if no instances are found.

LANGUAGE: typescript
CODE:
testInstance.findAllByType(type)

----------------------------------------

TITLE: Metro Bundler Configuration for React Native
DESCRIPTION: Configuration for Metro bundler to handle 3D assets in React Native projects

LANGUAGE: javascript
CODE:
module.exports = {
  resolver: {
    sourceExts: ['js', 'jsx', 'json', 'ts', 'tsx', 'cjs', 'mjs'],
    assetExts: ['glb', 'gltf', 'png', 'jpg'],
  },
}

----------------------------------------

TITLE: Finding Test Instance with Custom Test Function
DESCRIPTION: Finds a single test instance for which the provided test function returns true. Throws an error if not exactly one instance is found.

LANGUAGE: typescript
CODE:
testInstance.find(test)

----------------------------------------

TITLE: Accessing All Children in ReactThreeTestInstance
DESCRIPTION: Returns all children testInstances of this test instance, including all react components in the tree.

LANGUAGE: typescript
CODE:
testInstance.allChildren

----------------------------------------

TITLE: Accessing Props in ReactThreeTestInstance
DESCRIPTION: Returns an object of the props currently being passed to the element, including hidden ones automatically applied in the reconciler.

LANGUAGE: typescript
CODE:
testInstance.props

----------------------------------------

TITLE: Finding Test Instance by Props
DESCRIPTION: Finds a single test instance with the provided props. Throws an error if not exactly one instance is found. Supports RegExp matchers for prop values.

LANGUAGE: typescript
CODE:
testInstance.findByProps(props)

// Also accepts RegExp matchers
testInstance.findByProps({ [prop]: /^match/i })

----------------------------------------

TITLE: Accessing Type Property in ReactThreeTestInstance
DESCRIPTION: Returns the THREE type of the test instance, such as Scene or Mesh.

LANGUAGE: typescript
CODE:
testInstance.type

----------------------------------------

TITLE: Finding All Test Instances with Custom Test Function
DESCRIPTION: Finds all test instances for which the provided test function returns true. Returns an empty array if no instances are found.

LANGUAGE: typescript
CODE:
testInstance.findAll(test)

----------------------------------------

TITLE: Accessing Instance Property in ReactThreeTestInstance
DESCRIPTION: Returns the instance object of the specific testInstance. This will be the THREE initialized class.

LANGUAGE: typescript
CODE:
testInstance.instance

----------------------------------------

TITLE: Finding Test Instance by Type
DESCRIPTION: Finds a single test instance with the provided type. Throws an error if not exactly one instance is found.

LANGUAGE: typescript
CODE:
testInstance.findByType(type)

----------------------------------------

TITLE: Act Function Implementation
DESCRIPTION: Similar to react-test-renderer's act(), prepares a component for assertions.

LANGUAGE: tsx
CODE:
ReactThreeTestRenderer.act(callback)

----------------------------------------

TITLE: Mock Synthetic Event Type Definition
DESCRIPTION: TypeScript type definition for mock synthetic events used in event handling.

LANGUAGE: typescript
CODE:
type MockSyntheticEvent = {
  camera: Camera // the default camera of the rendered scene
  stopPropagation: () => void
  target: ReactThreeTestInstance
  currentTarget: ReactThreeTestInstance
  sourceEvent: MockEventData
  ...mockEventData
}

----------------------------------------

TITLE: Tree Update Implementation
DESCRIPTION: Method to rerender the tree with a new root element, simulating a React update.

LANGUAGE: tsx
CODE:
renderer.update(element)

----------------------------------------

TITLE: Getting Root Instance
DESCRIPTION: Returns the instance corresponding to the root three element if available. Not applicable for function components.

LANGUAGE: tsx
CODE:
renderer.getInstance()

----------------------------------------

TITLE: Event Firing Implementation
DESCRIPTION: Method to fire events on specific parts of the rendered tree by passing an element and event name.

LANGUAGE: tsx
CODE:
renderer.fireEvent(testInstance, eventName, mockEventData)

----------------------------------------

TITLE: Tree Unmounting Implementation
DESCRIPTION: Method to unmount the tree and trigger appropriate lifecycle events.

LANGUAGE: tsx
CODE:
renderer.unmount()

----------------------------------------

TITLE: Scene Graph Generation
DESCRIPTION: Returns an object representing the scene graph structure.

LANGUAGE: tsx
CODE:
renderer.toGraph()

----------------------------------------

TITLE: Accessing Parent in ReactThreeTestInstance
DESCRIPTION: Returns the parent testInstance of this testInstance. If no parent is available, it will return null.

LANGUAGE: typescript
CODE:
testInstance.parent

----------------------------------------

TITLE: Rendering Tree Structure
DESCRIPTION: Returns an object representing the rendered tree similar to react-test-renderer.

LANGUAGE: tsx
CODE:
renderer.toTree()

----------------------------------------

TITLE: Publishing React Three Fiber Updates
DESCRIPTION: These commands are used to publish updates to React Three Fiber. They add changesets, version packages, and release changes to NPM using the changesets workflow.

LANGUAGE: bash
CODE:
# Describe the changes you've made as you would semantic commits for CHANGELOG.md
yarn changeset:add

# Tag which packages should receive an update and be published.
yarn vers

# Commit and publish changes to NPM.
yarn release

----------------------------------------

TITLE: Accessing Scene Object
DESCRIPTION: Returns the root react three test instance object for making assertions.

LANGUAGE: tsx
CODE:
renderer.scene

----------------------------------------

TITLE: Managing Prerelease Mode for React Three Fiber
DESCRIPTION: These commands are used to enter and exit prerelease mode for React Three Fiber, allowing for alpha, beta, or release candidate versions.

LANGUAGE: bash
CODE:
yarn changeset pre enter <alpha | beta | rc>

# To cancel or leave prerelease mode, try running:
yarn changeset pre exit

----------------------------------------

TITLE: Create Options Interface Definition
DESCRIPTION: TypeScript interface extending RenderProps defining the configuration options for creating a renderer instance.

LANGUAGE: typescript
CODE:
interface CreateOptions extends RenderProps<HTMLCanvasElement> {
  width?: number // width of canvas
  height?: number // height of canvas
}

----------------------------------------

TITLE: Legacy Next.js Three.js Configuration
DESCRIPTION: Configuration for Next.js 13.0 and older using next-transpile-modules

LANGUAGE: javascript
CODE:
const withTM = require('next-transpile-modules')(['three'])
module.exports = withTM()

----------------------------------------

TITLE: TypeScript Implementation of 3D Box Component
DESCRIPTION: TypeScript version of the interactive 3D box component with proper type definitions and interfaces

LANGUAGE: bash
CODE:
npm install @types/three

LANGUAGE: tsx
CODE:
import * as THREE from 'three'
import { createRoot } from 'react-dom/client'
import React, { useRef, useState } from 'react'
import { Canvas, useFrame, ThreeElements } from '@react-three/fiber'

function Box(props: ThreeElements['mesh']) {
  const ref = useRef<THREE.Mesh>(null!)
  const [hovered, hover] = useState(false)
  const [clicked, click] = useState(false)
  useFrame((state, delta) => (ref.current.rotation.x += delta))
  return (
    <mesh
      {...props}
      ref={ref}
      scale={clicked ? 1.5 : 1}
      onClick={(event) => click(!clicked)}
      onPointerOver={(event) => hover(true)}
      onPointerOut={(event) => hover(false)}>
      <boxGeometry args={[1, 1, 1]} />
      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />
    </mesh>
  )
}

createRoot(document.getElementById('root') as HTMLElement).render(
  <Canvas>
    <ambientLight />
    <pointLight position={[10, 10, 10]} />
    <Box position={[-1.2, 0, 0]} />
    <Box position={[1.2, 0, 0]} />
  </Canvas>,
)

----------------------------------------

TITLE: Invalid Hook Usage Example in React Three Fiber
DESCRIPTION: Demonstrates incorrect usage of useThree hook outside of Canvas context.

LANGUAGE: jsx
CODE:
import { useThree } from '@react-three/fiber'

function App() {
  const { size } = useThree() // This will just crash
  return (
    <Canvas>
      <mesh>

----------------------------------------

TITLE: Interactive 3D Box Component in React Three Fiber
DESCRIPTION: Example showing how to create an interactive 3D box component with rotation animation, hover and click states using react-three-fiber

LANGUAGE: jsx
CODE:
import { createRoot } from 'react-dom/client'
import React, { useRef, useState } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'

function Box(props) {
  const ref = useRef()
  const [hovered, hover] = useState(false)
  const [clicked, click] = useState(false)
  useFrame((state, delta) => (ref.current.rotation.x += delta))
  return (
    <mesh
      {...props}
      ref={ref}
      scale={clicked ? 1.5 : 1}
      onClick={(event) => click(!clicked)}
      onPointerOver={(event) => hover(true)}
      onPointerOut={(event) => hover(false)}>
      <boxGeometry args={[1, 1, 1]} />
      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />
    </mesh>
  )
}

createRoot(document.getElementById('root')).render(
  <Canvas>
    <ambientLight />
    <pointLight position={[10, 10, 10]} />
    <Box position={[-1.2, 0, 0]} />
    <Box position={[1.2, 0, 0]} />
  </Canvas>,
)

----------------------------------------

TITLE: Inefficient Asset Loading in React Three Fiber
DESCRIPTION: Shows an inefficient way of loading assets in React Three Fiber, which can lead to performance issues due to repeated fetching and parsing.

LANGUAGE: jsx
CODE:
function Component() {
  const [texture, set] = useState()
  useEffect(() => void new TextureLoader().load(url, set), [])
  return texture ? (
    <mesh>
      <sphereGeometry />
      <meshBasicMaterial map={texture} />
    </mesh>
  ) : null
}

----------------------------------------

TITLE: Installing React Three Fiber
DESCRIPTION: Basic npm installation command for react-three-fiber and its dependencies

LANGUAGE: bash
CODE:
npm install three @react-three/fiber

----------------------------------------

TITLE: Incorrect Usage of setState in Intervals
DESCRIPTION: Illustrates an inefficient way of updating state in React Three Fiber using setInterval, which should be avoided.

LANGUAGE: jsx
CODE:
useEffect(() => {
  const interval = setInterval(() => setX((x) => x + 0.1), 1)
  return () => clearInterval(interval)
}, [])

----------------------------------------

TITLE: Code Example from React Three Fiber documentation
DESCRIPTION: Example showing useFrame usage with render loop control and render priority

LANGUAGE: jsx
CODE:
function Render() {
  // Takes over the render-loop, the user has the responsibility to render
  useFrame(({ gl, scene, camera }) => {
    gl.render(scene, camera)
  }, 1)
}

function RenderOnTop() {
  // This will render on top of the previous call
  useFrame(({ gl, ... }) => {
    gl.render(...)
  }, 2)
}

function A() {
  // Will *not* take over the render-loop, negative indices can still be useful for sorting
  useFrame(() => ..., -1)
}

function B() {
  // B's useFrame will execute *after* A's
  useFrame(() => ..., -2)
}

----------------------------------------

TITLE: Configuring ESLint with All React Three Fiber Rules
DESCRIPTION: JSON configuration to extend the 'all' ruleset for the React Three Fiber ESLint plugin, which includes every available rule.

LANGUAGE: json
CODE:
"extends": [
  "plugin:@react-three/all"
]

----------------------------------------

TITLE: Enabling Specific React Three Fiber ESLint Rules
DESCRIPTION: JSON configuration to enable specific rules from the React Three Fiber ESLint plugin.

LANGUAGE: json
CODE:
"rules": {
  "@react-three/no-clone-in-frame-loop": "error"
}

----------------------------------------

TITLE: Adding React Three Fiber Plugin to ESLint Configuration
DESCRIPTION: JSON configuration to add the @react-three plugin to the ESLint plugins section.

LANGUAGE: json
CODE:
"plugins": [
  "@react-three"
]

----------------------------------------

TITLE: Configuring ESLint with Recommended React Three Fiber Rules
DESCRIPTION: JSON configuration to extend the recommended ruleset for the React Three Fiber ESLint plugin.

LANGUAGE: json
CODE:
"extends": [
  "plugin:@react-three/recommended"
]

----------------------------------------

TITLE: Installing ESLint Plugin for React Three Fiber
DESCRIPTION: Command to install the @react-three/eslint-plugin package as a dev dependency using npm.

LANGUAGE: bash
CODE:
npm install @react-three/eslint-plugin --save-dev

----------------------------------------

TITLE: React Native Example with React Three Fiber
DESCRIPTION: Example of using React Three Fiber in a React Native environment, demonstrating 3D rendering on mobile platforms.

LANGUAGE: tsx
CODE:
import React, { useRef, useState } from 'react'
import { Canvas, useFrame } from '@react-three/fiber/native'
function Box(props) {
  const mesh = useRef(null)
  const [hovered, setHover] = useState(false)
  const [active, setActive] = useState(false)
  useFrame((state, delta) => (mesh.current.rotation.x += delta))
  return (
    <mesh
      {...props}
      ref={mesh}
      scale={active ? 1.5 : 1}
      onClick={(event) => setActive(!active)}
      onPointerOver={(event) => setHover(true)}
      onPointerOut={(event) => setHover(false)}>
      <boxGeometry args={[1, 1, 1]} />
      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />
    </mesh>
  )
}
export default function App() {
  return (
    <Canvas>
      <ambientLight intensity={Math.PI / 2} />
      <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} decay={0} intensity={Math.PI} />
      <pointLight position={[-10, -10, -10]} decay={0} intensity={Math.PI} />
      <Box position={[-1.2, 0, 0]} />
      <Box position={[1.2, 0, 0]} />
    </Canvas>
  )
}

----------------------------------------

TITLE: TypeScript Example for React Three Fiber
DESCRIPTION: TypeScript version of the 3D scene example, demonstrating type definitions and usage with React Three Fiber.

LANGUAGE: tsx
CODE:
import * as THREE from 'three'
import { createRoot } from 'react-dom/client'
import React, { useRef, useState } from 'react'
import { Canvas, useFrame, ThreeElements } from '@react-three/fiber'

function Box(props: ThreeElements['mesh']) {
  const ref = useRef<THREE.Mesh>(null!)
  const [hovered, hover] = useState(false)
  const [clicked, click] = useState(false)
  useFrame((state, delta) => (ref.current.rotation.x += delta))
  return (
    <mesh
      {...props}
      ref={ref}
      scale={clicked ? 1.5 : 1}
      onClick={(event) => click(!clicked)}
      onPointerOver={(event) => hover(true)}
      onPointerOut={(event) => hover(false)}>
      <boxGeometry args={[1, 1, 1]} />
      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />
    </mesh>
  )
}

createRoot(document.getElementById('root') as HTMLElement).render(
  <Canvas>
    <ambientLight intensity={Math.PI / 2} />
    <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} decay={0} intensity={Math.PI} />
    <pointLight position={[-10, -10, -10]} decay={0} intensity={Math.PI} />
    <Box position={[-1.2, 0, 0]} />
    <Box position={[1.2, 0, 0]} />
  </Canvas>,
)

----------------------------------------

TITLE: Using Act for Testing in React Three Fiber
DESCRIPTION: Demonstrates how to use the act function from React for testing in React Three Fiber, including async rendering and state inspection.

LANGUAGE: tsx
CODE:
import { act } from 'react'
import { createRoot } from '@react-three/fiber'

const store = await act(async () => createRoot(canvas).render(<App />))
console.log(store.getState())

----------------------------------------

TITLE: Updating TypeScript Types in React Three Fiber
DESCRIPTION: Shows the changes in TypeScript types for React Three Fiber v9, including renaming Props to CanvasProps and using ThreeElements interface.

LANGUAGE: tsx
CODE:
import { type ThreeElement } from '@react-three/fiber'

declare module '@react-three/fiber' {
  interface ThreeElements {
    customElement: ThreeElement<typeof CustomElement>
  }
}

extend({ CustomElement })

----------------------------------------

TITLE: Implementing WebGPU Renderer in React Three Fiber
DESCRIPTION: Shows how to use the WebGPU renderer with React Three Fiber, including async initialization and necessary imports.

LANGUAGE: tsx
CODE:
import * as THREE from 'three/webgpu'
import * as TSL from 'three/tsl'
import { Canvas, extend, useFrame, useThree } from '@react-three/fiber'

declare module '@react-three/fiber' {
  interface ThreeElements extends ThreeToJSXElements<typeof THREE> {}
}

extend(THREE as any)

export default () => (
  <Canvas
    gl={async (props) => {
      const renderer = new THREE.WebGPURenderer(props as any)
      await renderer.init()
      return renderer
    }}>
      <mesh>
        <meshBasicNodeMaterial />
        <boxGeometry />
      </mesh>
  </Canvas>
)

----------------------------------------

TITLE: Extending Three.js Classes in React Three Fiber
DESCRIPTION: Shows how to use the extend function to create components from Three.js classes, reducing TypeScript boilerplate and JSX collisions.

LANGUAGE: tsx
CODE:
import { OrbitControls } from 'three/addons'
import { type ThreeElement, type ThreeElements } from '@react-three/fiber'

declare module '@react-three/fiber' {
  interface ThreeElements {
    orbitControls: ThreeElement<typeof OrbitControls>
  }
}

extend({ OrbitControls })

<orbitControls args={[camera, gl.domElement]}>

// or,

const Controls = extend(OrbitControls)
<Controls args={[camera, gl.domElement]} />

----------------------------------------

TITLE: Using useLoader with External Loader Instance in React Three Fiber
DESCRIPTION: Demonstrates how to use useLoader with both default behavior and an external loader instance for more controlled pooling and setup.

LANGUAGE: jsx
CODE:
import { GLTFLoader } from 'three/addons'
import { useLoader } from '@react-three/fiber'

function Model() {
  const gltf = useLoader(GLTFLoader, '/path/to/model.glb')
  // ...
}

// or,

const loader = new GLTFLoader()
function Model() {
  const gltf = useLoader(loader, '/path/to/model.glb')
  // ...
}

----------------------------------------

TITLE: Using useTexture from @react-three/drei
DESCRIPTION: Alternative approach using useTexture hook from @react-three/drei library with object notation for cleaner code.

LANGUAGE: jsx
CODE:
const props = useTexture({
  map: 'PavingStones092_1K_Color.jpg',
  displacementMap: 'PavingStones092_1K_Displacement.jpg',
  normalMap: 'PavingStones092_1K_Normal.jpg',
  roughnessMap: 'PavingStones092_1K_Roughness.jpg',
  aoMap: 'PavingStones092_1K_AmbientOcclusion.jpg',
})

return (
  <mesh>
    <sphereGeometry args={[1, 32, 32]} />
    <meshStandardMaterial {...props} />
  </mesh>
)

----------------------------------------

TITLE: Basic Scene Setup with React Three Fiber
DESCRIPTION: Complete example showing basic scene setup with Canvas, Suspense, and a textured sphere.

LANGUAGE: jsx
CODE:
import { Suspense } from 'react'
import { Canvas, useLoader } from '@react-three/fiber'
import { TextureLoader } from 'three'

function Scene() {
  const colorMap = useLoader(TextureLoader, 'PavingStones092_1K_Color.jpg')
  return (
    <>
      <ambientLight intensity={0.2} />
      <directionalLight />
      <mesh>
        <sphereGeometry args={[1, 32, 32]} />
        <meshStandardMaterial />
      </mesh>
    </>
  )
}

export default function App() {
  return (
    <Canvas>
      <Suspense fallback={null}>
        <Scene />
      </Suspense>
    </Canvas>
  )
}

----------------------------------------

TITLE: Auto-generated GLTF JSX Component
DESCRIPTION: Complete React component generated from GLTF model using gltfjsx tool, including mesh setup and material handling.

LANGUAGE: jsx
CODE:
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'

export default function Model(props) {
  const groupRef = useRef()
  const { nodes, materials } = useGLTF('/Poimandres.gltf')
  return (
    <group ref={groupRef} {...props} dispose={null}>
      <mesh castShadow receiveShadow geometry={nodes.Curve007_1.geometry} material={materials['Material.001']} />
      <mesh castShadow receiveShadow geometry={nodes.Curve007_2.geometry} material={materials['Material.002']} />
    </group>
  )
}

useGLTF.preload('/Poimandres.gltf')

----------------------------------------

TITLE: Adding Pointer Events in React Three Fiber
DESCRIPTION: This snippet demonstrates how to add pointer event handlers to objects in React Three Fiber.

LANGUAGE: jsx
CODE:
<mesh onPointerDown={console.log}>...</mesh>

----------------------------------------

TITLE: Equivalent Three.js Setup Code
DESCRIPTION: Shows the vanilla Three.js equivalent code for creating a scene with mesh, demonstrating what React Three Fiber handles behind the scenes.

LANGUAGE: jsx
CODE:
const scene = new THREE.Scene()
const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000)

const renderer = new THREE.WebGLRenderer()
renderer.setSize(width, height)
document.querySelector('#canvas-container').appendChild(renderer.domElement)

const mesh = new THREE.Mesh()
mesh.geometry = new THREE.BoxGeometry()
mesh.material = new THREE.MeshStandardMaterial()

scene.add(mesh)

function animate() {
  requestAnimationFrame(animate)
  renderer.render(scene, camera)
}

animate()

----------------------------------------

TITLE: TypeScript Example of React Three Fiber Scene
DESCRIPTION: This TypeScript example shows how to create a 3D scene with React Three Fiber, including type definitions for props and refs.

LANGUAGE: typescript
CODE:
import * as THREE from 'three'
import { createRoot } from 'react-dom/client'
import React, { useRef, useState } from 'react'
import { Canvas, useFrame, ThreeElements } from '@react-three/fiber'
import './styles.css'

function Box(props: ThreeElements['mesh']) {
  const meshRef = useRef<THREE.Mesh>(null!)
  const [hovered, setHover] = useState(false)
  const [active, setActive] = useState(false)
  useFrame((state, delta) => (meshRef.current.rotation.x += delta))
  return (
    <mesh
      {...props}
      ref={meshRef}
      scale={active ? 1.5 : 1}
      onClick={(event) => setActive(!active)}
      onPointerOver={(event) => setHover(true)}
      onPointerOut={(event) => setHover(false)}>
      <boxGeometry args={[1, 1, 1]} />
      <meshStandardMaterial color={hovered ? 'hotpink' : '#2f74c0'} />
    </mesh>
  )
}

createRoot(document.getElementById('root')).render(
  <Canvas>
    <ambientLight intensity={Math.PI / 2} />
    <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} decay={0} intensity={Math.PI} />
    <pointLight position={[-10, -10, -10]} decay={0} intensity={Math.PI} />
    <Box position={[-1.2, 0, 0]} />
    <Box position={[1.2, 0, 0]} />
  </Canvas>,
)

----------------------------------------

TITLE: Installing React Three Fiber Dependencies
DESCRIPTION: This command installs the necessary dependencies for using React Three Fiber, including Three.js and its type definitions.

LANGUAGE: bash
CODE:
npm install three @types/three @react-three/fiber

----------------------------------------

TITLE: React Native Implementation Example
DESCRIPTION: Complete example of implementing a 3D model viewer in React Native using react-three-fiber

LANGUAGE: jsx
CODE:
import { Suspense } from 'react'
import { Canvas } from '@react-three/fiber/native'
import { useGLTF } from '@react-three/drei/native'
import modelPath from './path/to/model.glb'

function Model(props) {
  const gltf = useGLTF(modelPath)
  return <primitive {...props} object={gltf.scene} />
}

export default function App() {
  return (
    <Canvas>
      <ambientLight />
      <Suspense>
        <Model />
      </Suspense>
    </Canvas>
  )
}

----------------------------------------

TITLE: Setting Up Basic Test Cases
DESCRIPTION: Initial setup of test cases for a rotating box component using React Three Test Renderer. Imports required dependencies and creates test scaffolding.

LANGUAGE: jsx
CODE:
import ReactThreeTestRenderer from '@react-three/test-renderer'
import { MyRotatingBox } from './App'

test('mesh to have two children', async () => {
  const renderer = await ReactThreeTestRenderer.create(<MyRotatingBox />)
})

test('click event makes box bigger', async () => {
  const renderer = await ReactThreeTestRenderer.create(<MyRotatingBox />)
})

----------------------------------------

TITLE: Using Existing Objects in React Three Fiber Scene
DESCRIPTION: Demonstrates how to incorporate pre-existing Three.js objects into the React Three Fiber scene graph using the 'primitive' component.

LANGUAGE: jsx
CODE:
const mesh = new THREE.Mesh(geometry, material)

function Component() {
  return <primitive object={mesh} position={[10, 0, 0]} />

----------------------------------------

TITLE: Nested Property Access in React Three Fiber
DESCRIPTION: Shows how to access and set nested properties in React Three Fiber components using dash-case notation.

LANGUAGE: jsx
CODE:
<mesh rotation-x={1} material-uniforms-resolution-value={[512, 512]} />

----------------------------------------

TITLE: Pointer Capture Implementation
DESCRIPTION: Example showing how to implement pointer capture and release in React Three Fiber event handlers.

LANGUAGE: jsx
CODE:
onPointerDown={e => {
  e.stopPropagation()
  e.target.setPointerCapture(e.pointerId)
}}
onPointerUp={e => {
  e.stopPropagation()
  e.target.releasePointerCapture(e.pointerId)
}}

----------------------------------------

TITLE: Event Propagation Example
DESCRIPTION: Example demonstrating event propagation control using stopPropagation() in React Three Fiber pointer events.

LANGUAGE: jsx
CODE:
onPointerOver={e => {
  e.stopPropagation()
  // ...
}}

----------------------------------------

TITLE: Inefficient Object Creation in React Three Fiber Loops
DESCRIPTION: Shows an inefficient way of creating new objects in animation loops, which can lead to performance issues due to garbage collection.

LANGUAGE: jsx
CODE:
useFrame(() => {
  ref.current.position.lerp(new THREE.Vector3(x, y, z), 0.1)
})

----------------------------------------

TITLE: Efficient Conditional Visibility in React Three Fiber
DESCRIPTION: Shows a more efficient way to handle conditional rendering in React Three Fiber using visibility props.

LANGUAGE: jsx
CODE:
<Stage1 visible={stage === 1} />
<Stage2 visible={stage === 2} />
<Stage3 visible={stage === 3} />

function Stage1(props) {
  return (
    <group {...props}>
      ...

----------------------------------------

TITLE: Inefficient Conditional Rendering in React Three Fiber
DESCRIPTION: Demonstrates an inefficient way of conditionally rendering components in React Three Fiber, which can lead to performance issues.

LANGUAGE: jsx
CODE:
{
  stage === 1 && <Stage1 />
}
{
  stage === 2 && <Stage2 />
}
{
  stage === 3 && <Stage3 />
}

----------------------------------------

TITLE: Inefficient State Binding in React Three Fiber
DESCRIPTION: Demonstrates an inefficient way of binding to fast-changing state in React Three Fiber using Redux.

LANGUAGE: jsx
CODE:
import { useSelector } from 'react-redux'

// Assuming that x gets animated inside the store 60fps
const x = useSelector((state) => state.x)
return <mesh position-x={x} />

----------------------------------------

TITLE: Incorrect Usage of setState in Event Handlers
DESCRIPTION: Demonstrates an inefficient way of updating state in response to fast events in React Three Fiber.

LANGUAGE: jsx
CODE:
<mesh onPointerMove={(e) => setX((x) => e.point.x)} />

----------------------------------------

TITLE: Incorrect Usage of setState in useFrame
DESCRIPTION: Shows an inefficient method of updating state within the useFrame hook, which should be avoided in React Three Fiber.

LANGUAGE: jsx
CODE:
const [x, setX] = useState(0)
useFrame(() => setX((x) => x + 0.1))
return <mesh position-x={x} />

----------------------------------------

TITLE: Updating Test Snapshots for React Three Fiber
DESCRIPTION: This command updates test snapshots for React Three Fiber. It should be used with discretion as snapshots represent the integrity of the package.

LANGUAGE: bash
CODE:
yarn test -u

----------------------------------------

TITLE: Running Tests for React Three Fiber
DESCRIPTION: These commands run test suites against the React Three Fiber library. The first command runs tests once, while the second runs tests in watch mode for live updates.

LANGUAGE: bash
CODE:
yarn test

# or, to test live against changes
yarn test:watch

----------------------------------------

TITLE: Running Examples for React Three Fiber
DESCRIPTION: This command runs local examples against the React Three Fiber library for development and testing purposes.

LANGUAGE: bash
CODE:
yarn examples

----------------------------------------

TITLE: Running Development Build for React Three Fiber
DESCRIPTION: This command triggers the development build process for React Three Fiber, which builds and links packages for local development using Preconstruct.

LANGUAGE: bash
CODE:
yarn dev

----------------------------------------

TITLE: Installing Dependencies for React Three Fiber Project
DESCRIPTION: This command installs all necessary dependencies for the React Three Fiber project using Yarn package manager.

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Optimized Vector Reuse with useMemo
DESCRIPTION: Shows how to create a reusable Vector3 instance using useMemo hook, ensuring the vector is created once per component instance.

LANGUAGE: javascript
CODE:
function MoveTowards({ x, y, z }) {
  const ref = useRef()
  const tempVec = useMemo(() => new THREE.Vector3())

  useFrame(() => {
    ref.current.position.lerp(tempVec.set(x, y, z), 0.1)
  })

  return <mesh ref={ref} />
}