TITLE: Configuring ESLint for Markdown Linting
DESCRIPTION: Example configuration for enabling Markdown linting in ESLint using the @eslint/markdown plugin. It sets up linting for Markdown files and applies a rule to disallow HTML in Markdown.

LANGUAGE: javascript
CODE:
// eslint.config.js
import markdown from "@eslint/markdown";

export default [
    {
        files: ["**/*.md"],
        plugins: {
            markdown
        },
        language: "markdown/commonmark",
        rules: {
            "markdown/no-html": "error"
        }
    }    
];

----------------------------------------

TITLE: Configuring ESLint with defineConfig() and globalIgnores() Helpers
DESCRIPTION: Demonstrates how to use the new defineConfig() and globalIgnores() helpers in an ESLint configuration file. These helpers provide type safety, enable the new extends key, and ensure proper handling of global ignores.

LANGUAGE: javascript
CODE:
// eslint.config.js
import { defineConfig, globalIgnores } from "eslint/config";
import js from "@eslint/js";

export default defineConfig([
    {
        files: ["src/**/*.js"],
        plugins: { js },
        extends: ["js/recommended"],    // extend the plugin's recommended config
        rules: {
            semi: "error"
        }
    },
    globalIgnores(["dist", "build"])
]);

----------------------------------------

TITLE: Using FlatESLint Class in JavaScript
DESCRIPTION: Demonstrates usage of the FlatESLint class for linting text with custom configuration options.

LANGUAGE: javascript
CODE:
const eslint = new FlatESLint({
    cwd: originalDir,
    overrideConfigFile: "other.config.js"
});
const results = await eslint.lintText("foo");

----------------------------------------

TITLE: Basic ESLint Flat Config Example
DESCRIPTION: Shows the basic structure of an eslint.config.js file with simple rule configurations using the new flat config system.

LANGUAGE: javascript
CODE:
export default [
    {
        files: ["**/*.js"],
        rules: {
            "semi": "error",
            "no-unused-vars": "error"
        }
    }
];

----------------------------------------

TITLE: Using fixupPluginRules() in ESLint Configuration
DESCRIPTION: Demonstrates how to use the fixupPluginRules() function in eslint.config.js to wrap a plugin in a compatibility layer.

LANGUAGE: javascript
CODE:
// eslint.config.js
import { fixupPluginRules } from "@eslint/compat";
import example from "eslint-plugin-example";

export default [
    {
        plugins: {
            example: fixupPluginRules(example)
        }
    },

    // other config
];

----------------------------------------

TITLE: Configuring ESLint for JSON Linting
DESCRIPTION: Example configuration for enabling JSON linting in ESLint using the @eslint/json plugin. It sets up linting for JSON files and applies a rule to check for duplicate keys.

LANGUAGE: javascript
CODE:
import json from "@eslint/json";

export default [
    {
        plugins: {
            json,
        },
    },

    // lint JSON files
    {
        files: ["**/*.json"],
        language: "json/json",
        rules: {
            "json/no-duplicate-keys": "error",
        },
    },
];

----------------------------------------

TITLE: Exporting Empty Configuration in JavaScript
DESCRIPTION: Example of how to explicitly use an empty configuration in ESLint by exporting an array with an empty object. This is useful for tests or other scenarios where a configuration that does nothing is needed.

LANGUAGE: javascript
CODE:
export default [{}];

----------------------------------------

TITLE: Extended Configuration with Multiple Plugins
DESCRIPTION: Demonstrates the new extends functionality for combining multiple plugin configurations in a consistent way using defineConfig().

LANGUAGE: javascript
CODE:
import { defineConfig } from "eslint/config";
import js from "@eslint/js";
import tailwind from "eslint-plugin-tailwindcss";
import reactPlugin from "eslint-plugin-react";
import eslintPluginImportX from "eslint-plugin-import-x";
import exampleConfigs from "eslint-config-example";

export default defineConfig(
    {
        files: ["**/*.js"],
        plugins: {
            js,
            tailwind
        },
        extends: [
            "js/recommended",  // load from js.configs.recommended
            "tailwind/flat/recommended", // load from tailwind.configs['flat/recommended']
            reactPlugin.configs.flat.recommended,
            eslintPluginImportX.flatConfigs.recommended,
        ]
    },

    // apply an array config to a subset of files
    {
        files: ["**/src/safe/*.js"],
        extends: [exampleConfigs]
    },

    // your modifications
    {
        rules: {
            "no-unused-vars": "warn"
        }
    }
);

----------------------------------------

TITLE: Importing FlatESLint Class in JavaScript
DESCRIPTION: Shows how to import the experimental FlatESLint class using both ESM and CommonJS syntax from the use-at-your-own-risk entrypoint.

LANGUAGE: javascript
CODE:
// ESM
import pkg from "eslint/use-at-your-own-risk";
const { FlatESLint } = pkg;

// CommonJS
const { FlatESLint } = require("eslint/use-at-your-own-risk");

----------------------------------------

TITLE: Configuring ESLint for CSS Linting
DESCRIPTION: Example configuration for setting up CSS linting in ESLint, including plugin import, file matching, and rule configuration.

LANGUAGE: javascript
CODE:
import css from "@eslint/css";

export default [
    // lint css files
    {
        files: ["**/*.css"],
        plugins: {
            css,
        },
        language: "css/css",
        rules: {
            "css/no-duplicate-imports": "error",
        },
    },
];

----------------------------------------

TITLE: Loading ESLint API Implementation
DESCRIPTION: New loadESLint() function exported from the main entry point allowing integrations to get either FlatESLint or ESLint class, facilitating easy switching between flat config and eslintrc APIs.

LANGUAGE: javascript
CODE:
const { loadESLint } = require('eslint');
// Returns either FlatESLint or ESLint class

----------------------------------------

TITLE: ESLint Flat Config with Plugin Integration
DESCRIPTION: Demonstrates how to import and configure plugins in the new flat config system.

LANGUAGE: javascript
CODE:
import jsdoc from "eslint-plugin-jsdoc";

export default [
    {
        files: ["**/*.js"],
        plugins: {
            jsdoc
        },
        rules: {
            "jsdoc/require-description": "error",
            "jsdoc/check-values": "error"
        }
    }
];

----------------------------------------

TITLE: Using ESLint Configuration Migrator with Package Managers
DESCRIPTION: Examples of how to use the ESLint Configuration Migrator with various package managers to convert an .eslintrc.json file to eslint.config.mjs.

LANGUAGE: shell
CODE:
npx @eslint/migrate-config .eslintrc.json
# or
yarn dlx @eslint/migrate-config .eslintrc.json
# or
pnpm dlx @eslint/migrate-config .eslintrc.json
# or
bunx @eslint/migrate-config .eslintrc.json

----------------------------------------

TITLE: Installing and Running eslint-transforms for Automatic Rule Updates
DESCRIPTION: This snippet demonstrates how to install the eslint-transforms utility and use it to automatically update rules for ESLint v9.0.0 compatibility.

LANGUAGE: shell
CODE:
# install the utility
npm install eslint-transforms -g

# apply the transform to one file
eslint-transforms v9-rule-migration rule.js

# apply the transform to all files in a directory
eslint-transforms v9-rule-migration rules/

----------------------------------------

TITLE: Installing @eslint/markdown Plugin for Markdown Linting in ESLint
DESCRIPTION: Command to install the @eslint/markdown plugin via npm for Markdown linting support in ESLint.

LANGUAGE: shell
CODE:
npm install @eslint/markdown -D

----------------------------------------

TITLE: Demonstrating Optional Chaining in JavaScript
DESCRIPTION: Example showing the new optional chaining syntax support in ESLint v7.5.0, which allows safe access to nested object properties that might be null or undefined

LANGUAGE: javascript
CODE:
const maybeProp = obj.first?.second;

----------------------------------------

TITLE: Demonstrating Import Attributes Syntax in JavaScript
DESCRIPTION: Examples of using the new Import Attributes syntax for module imports and dynamic imports, specifying additional information like the module type.

LANGUAGE: javascript
CODE:
import json from "./foo.json" with { type: "json" };

import("foo.json", { with: { type: "json" } });

----------------------------------------

TITLE: Nested Configuration with defineConfig()
DESCRIPTION: Shows how defineConfig() automatically flattens nested objects and arrays, eliminating the need for spread operators in configuration.

LANGUAGE: javascript
CODE:
// eslint.config.js
import { defineConfig } from "eslint/config";

export default defineConfig(
    {
        files: ["src/**/*.js"],
        rules: {
            semi: "error"
        }
    },
    [
        {
            files: ["tests/**/*.js"],
            languageOptions: {
                globals: {
                    it: true,
                    describe: true
                }
            }
        },
        {
            files: ["bin/*.js"],
            rules: {
                "no-console": "off"
            }
        }
    ]
);

----------------------------------------

TITLE: Configuring FlatRuleTester in JavaScript
DESCRIPTION: Demonstrates how to configure FlatRuleTester with language options and set default configurations.

LANGUAGE: javascript
CODE:
const ruleTester = new FlatRuleTester({
    languageOptions: {
        ecmaVersion: 5,
        sourceType: "script"
    }
});

ruleTester.setDefaultConfig({
    languageOptions: {
        ecmaVersion: 5,
        sourceType: "script"
    }
});

----------------------------------------

TITLE: Using Flat Config with Linter Class in JavaScript
DESCRIPTION: Demonstrates how to use the new flat configuration system with ESLint's Linter class by setting configType: 'flat' option. Shows verification of code with specific language options and rules.

LANGUAGE: javascript
CODE:
const linter = new Linter({ configType: "flat" });

const messages = linter.verify("new Map()", {
    languageOptions: {
        ecmaVersion: 5,
        sourceType: "script"
    },
    rules: {
        "no-undef": "error"
    }
}, "filename.js");

----------------------------------------

TITLE: Using fixupConfigRules() with FlatCompat
DESCRIPTION: Demonstrates how to use fixupConfigRules() in conjunction with FlatCompat from @eslint/eslintrc package to wrap all plugins in an eslintrc-style configuration.

LANGUAGE: javascript
CODE:
// eslint.config.js
import { fixupConfigRules } from "@eslint/compat";
import { FlatCompat } from "@eslint/eslintrc";

const flatCompat = new FlatCompat();

export default [

    ...fixupConfigRules(
        flatCompat.extends("my-config")
    )

    // other config
];

----------------------------------------

TITLE: Calculating ESLint Config for File
DESCRIPTION: Command to output the complete calculated configuration that will be used to lint a specific file, including all cascading and inheritance.

LANGUAGE: shell
CODE:
$ eslint --print-config myfile.js

----------------------------------------

TITLE: ESLint Flat Config with Custom Parser
DESCRIPTION: Shows how to configure a custom parser (Babel) with specific options in the new flat config format.

LANGUAGE: javascript
CODE:
import babelParser from "@babel/eslint-parser";

export default [
    {
        files: ["**/*.js", "**/*.mjs"],
        languageOptions: {
            parser: babelParser,
            parserOptions: {
                requireConfigFile: false,
                babelOptions: {
                    babelrc: false,
                    configFile: false,
                    presets: ["@babel/preset-env"],
                }
            }
        }
    }
];

----------------------------------------

TITLE: Using FlatESLint API with warnIgnored option
DESCRIPTION: Example showing how to use the FlatESLint API with the new warnIgnored option, demonstrating both file linting and text linting with explicit warnIgnored setting.

LANGUAGE: javascript
CODE:
const eslint = new FlatESLint();

await eslint.lintFiles(patterns);
await eslint.lintText(code, { filePath, warnIgnored: false });

----------------------------------------

TITLE: Updating Context Methods to Properties in ESLint Rules
DESCRIPTION: This code snippet shows how to update ESLint rules to use the new property-based approach for accessing source code, file names, and working directory information.

LANGUAGE: javascript
CODE:
module.exports = {
    create(context) {

        const sourceCode = context.sourceCode ?? context.getSourceCode();
        const cwd = context.cwd ?? context.getCwd();
        const filename = context.filename ?? context.getFilename();
        const physicalFilename = context.physicalFilename ?? context.getPhysicalFilename();

        return {
            Program(node) {
                // do something
            }
        }
    }
};

----------------------------------------

TITLE: Using fixupConfigRules() for Imported Configurations
DESCRIPTION: Shows how to use the fixupConfigRules() function to wrap all plugins found in an imported flat-style configuration.

LANGUAGE: javascript
CODE:
// eslint.config.js
import { fixupConfigRules } from "@eslint/compat";
import recommended from "eslint-plugin-example/configs/recommended.js";

export default [

    ...fixupConfigRules(recommended)

    // other config
];

----------------------------------------

TITLE: Installing ESLint v9.0.0
DESCRIPTION: Command to install the latest version of ESLint

LANGUAGE: shell
CODE:
npm i eslint@9.0.0 --save-dev

----------------------------------------

TITLE: ESLint Configuration File Format Examples
DESCRIPTION: Examples of the new supported configuration file formats introduced in v1.10.0, including JavaScript, YAML, and JSON formats. These replace the extensionless .eslintrc format.

LANGUAGE: JavaScript
CODE:
.eslintrc.js

LANGUAGE: YAML
CODE:
.eslintrc.yml
.eslintrc.yaml

LANGUAGE: JSON
CODE:
.eslintrc.json

----------------------------------------

TITLE: Configuring no-restricted-syntax Rule for JSON Files
DESCRIPTION: Configuration example showing how to use no-restricted-syntax rule with the @eslint/json plugin to warn about null usage in JSON files. Demonstrates the language-agnostic capabilities of the rule.

LANGUAGE: javascript
CODE:
import json from "@eslint/json";

export default [
    {
        files: ["**/*.json"],
        language: "json/json",
        plugins: {
            json,
        },
        rules: {
            "no-restricted-syntax": [
                "warn",
                "Null" // AST selector for `null`
            ],
        },
    },
];

----------------------------------------

TITLE: Installing ESLint v9.0.0-rc.0 using npm next tag
DESCRIPTION: Command to install the pre-release version of ESLint using the next tag

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

----------------------------------------

TITLE: Configuring Latest ECMAScript Version in ESLint
DESCRIPTION: Example configuration showing how to set the ecmaVersion parser option to 'latest' to always enable the latest supported ECMAScript version in ESLint's default parser.

LANGUAGE: json
CODE:
{
    "parserOptions": {
        "ecmaVersion": "latest"
    }
}

----------------------------------------

TITLE: Installing ESLint v9.0.0-rc.0 using specific version
DESCRIPTION: Command to install ESLint by explicitly specifying the version number

LANGUAGE: bash
CODE:
npm i eslint@9.0.0-rc.0 --save-dev

----------------------------------------

TITLE: Rule Metadata Configuration for Suggestions in ESLint v8.0.0
DESCRIPTION: New requirement for rules that provide suggestions to include the meta.hasSuggestions property set to true. This allows ESLint to understand rule capabilities through metadata inspection.

LANGUAGE: javascript
CODE:
{
  meta: {
    hasSuggestions: true
  }
}

----------------------------------------

TITLE: Fixing require-atomic-updates rule in JavaScript
DESCRIPTION: Bug fix for the require-atomic-updates rule to prevent reporting on parameters.

LANGUAGE: JavaScript
CODE:
81c382378923a45015bafe58362f6c8faa5c3d5f

----------------------------------------

TITLE: Using Inline Configuration Comments in JavaScript
DESCRIPTION: Example of an inline configuration comment that will only change the severity of the rule in v9.0.0, without affecting other options.

LANGUAGE: JavaScript
CODE:
/*eslint no-undef: warn */

----------------------------------------

TITLE: Illustrating New ESLint Rule Format in JavaScript
DESCRIPTION: This snippet demonstrates the new ESLint rule format, which includes a meta object for metadata and a create() function for the rule logic.

LANGUAGE: javascript
CODE:
module.exports = {

    meta: {

        // special key used for doc-only information
        docs: {},

        // indicates if the rule is fixable
        fixable: "code",

        // the rule options schema
        schema: []
    },

    // the rule creator function
    create: function(context) {
        // code
    }
};

----------------------------------------

TITLE: Installing ESLint v9.0.0-beta.2 using npm
DESCRIPTION: Commands to install the pre-release version of ESLint v9.0.0-beta.2 using npm. Users must specify the 'next' tag or the exact version number.

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

LANGUAGE: bash
CODE:
npm i eslint@9.0.0-beta.2 --save-dev

----------------------------------------

TITLE: Running ESLint CLI with No Arguments in JavaScript
DESCRIPTION: Starting in v9.0.0 with flat config, running ESLint CLI without file arguments will lint the current directory by default.

LANGUAGE: JavaScript
CODE:
npx eslint

----------------------------------------

TITLE: Installing ESLint Next Version Using npm
DESCRIPTION: Command to install the pre-release version of ESLint using the 'next' tag.

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

----------------------------------------

TITLE: Identifying Confusion between ?? and || Operators in JavaScript
DESCRIPTION: This example shows a misunderstanding of the precedence between the '===' and '??' operators. The developer likely intended to use '??' for default value assignment, but the actual behavior differs from the expectation.

LANGUAGE: javascript
CODE:
shouldShowWelcome() {
  return this.viewModel?.welcomeExperience === WelcomeExperience.ForWorkspace ?? true;
}

----------------------------------------

TITLE: Using the new no-useless-assignment rule
DESCRIPTION: Example of code that would trigger the new no-useless-assignment rule

LANGUAGE: javascript
CODE:
let id = 1234;      // 1234 is never used
id = calculateId();

----------------------------------------

TITLE: Installing ESLint v9.0.0-beta.0 with npm next tag
DESCRIPTION: Command to install the pre-release version of ESLint using the next tag

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

----------------------------------------

TITLE: Configuring ESLint Globals with New String Options
DESCRIPTION: New configuration options for globals in ESLint v5.13.0. Introduces 'off', 'readable', and 'writeable' options to replace the boolean true/false values for more explicit global variable configuration.

LANGUAGE: javascript
CODE:
{
  "globals": {
    "var1": "off",        // Completely disable a global
    "var2": "readable",   // Can be read but not written to
    "var3": "writeable"   // Can be read and written to
  }
}

----------------------------------------

TITLE: Running Tests with FlatRuleTester in JavaScript
DESCRIPTION: Shows how to run tests using FlatRuleTester with various language options and test cases for both valid and invalid code scenarios.

LANGUAGE: javascript
CODE:
ruleTester.run("my-rule", rule, {
    valid: [
        {
            code: "var test = 'foo'",
            languageOptions: {
                sourceType: "script"
            }
        },
        {
            code: "var test2 = 'bar'",
            languageOptions: {
                globals: { test: true }
            }
        }
    ],
    invalid: [
        {
            code: "bar",
            languageOptions: {
                sourceType: "script"
            },
            errors: 1
        }
    ]
});

----------------------------------------

TITLE: New Configuration File Support in JavaScript
DESCRIPTION: ESLint now supports eslint.config.mjs and eslint.config.cjs configuration files in addition to eslint.config.js, allowing for flexible module format usage regardless of package module format.

LANGUAGE: javascript
CODE:
// Can now use any of:
// eslint.config.js
// eslint.config.mjs
// eslint.config.cjs

----------------------------------------

TITLE: Fixing lines-around-comment Rule for Switch Statements
DESCRIPTION: Bug fix for the lines-around-comment rule to correctly apply the allowBlockStart option for switch statements, ensuring consistent comment formatting.

LANGUAGE: JavaScript
CODE:
fix: lines-around-comment apply allowBlockStart for switch statements (#16153)

----------------------------------------

TITLE: ESLint Flat Config with File Ignores
DESCRIPTION: Demonstrates how to ignore specific files and apply rules to others using the files and ignores patterns.

LANGUAGE: javascript
CODE:
export default [
    {
        ignores: ["**/*.test.js"]
    },
    {
        files: ["**/*.js"],
        rules: {
            "semi": "error",
            "no-unused-vars": "error"
        }
    }
];

----------------------------------------

TITLE: Configuring Tailwind CSS Syntax
DESCRIPTION: Configuration example for using the built-in Tailwind CSS syntax with ESLint CSS linting.

LANGUAGE: javascript
CODE:
import css from "@eslint/css";
import { tailwindSyntax } from "@eslint/css/syntax";

export default [
    {
        files: ["**/*.css"],
        plugins: {
            css,
        },
        language: "css/css",
        languageOptions: {
            customSyntax: tailwindSyntax,
        },
        rules: {
            "css/no-empty-blocks": "error",
        },
    },
];

----------------------------------------

TITLE: Demonstrating ESLint no-fallthrough Rule in TypeScript
DESCRIPTION: Shows how ESLint's no-fallthrough rule catches potentially dangerous switch statement fallthrough cases that TypeScript's type checking wouldn't catch.

LANGUAGE: typescript
CODE:
function logFruit(value: "apple" | "banana" | "cherry") {
    switch (value) {
        case "apple":
            console.log("🍏");
            break;

        case "banana":
            console.log("🍌");

        // eslint(no-fallthrough):
        // Expected a 'break' statement before 'case'.

        case "cherry":
            console.log("🍒");
            break;
    }
}

----------------------------------------

TITLE: Configuring ESLint Rule Options in JavaScript
DESCRIPTION: Example of configuring the new 'allowParensAfterCommentPattern' option for the no-extra-parens rule in ESLint v8.29.0.

LANGUAGE: javascript
CODE:
"no-extra-parens": ["error", "all", {
  "allowParensAfterCommentPattern": "some pattern"
}]

----------------------------------------

TITLE: Example of Custom CSS At-Rule
DESCRIPTION: Demonstration of a custom CSS at-rule that can be configured using the custom syntax feature.

LANGUAGE: css
CODE:
@my-at-rule "hello world!";

----------------------------------------

TITLE: New Option for no-param-reassign Rule in ESLint
DESCRIPTION: The no-param-reassign rule has a new ignorePropertyModificationsForRegex option. This allows specifying regex patterns for properties that should be ignored when checking for parameter reassignment.

LANGUAGE: JavaScript
CODE:
"no-param-reassign": ["error", { "ignorePropertyModificationsForRegex": ["^foo"] }]

----------------------------------------

TITLE: Setting ESLINT_USE_FLAT_CONFIG Environment Variable for JavaScript
DESCRIPTION: To continue using an eslintrc configuration file in ESLint v9.0.0, you need to set the ESLINT_USE_FLAT_CONFIG environment variable to false.

LANGUAGE: JavaScript
CODE:
ESLINT_USE_FLAT_CONFIG=false

----------------------------------------

TITLE: Accessing ESLint Default Config
DESCRIPTION: The predefined array of config objects used by ESLint can now be accessed programmatically through ESLint.defaultConfig

LANGUAGE: javascript
CODE:
ESLint.defaultConfig

----------------------------------------

TITLE: New Option for use-isnan Rule in ESLint
DESCRIPTION: The use-isnan rule now has a new enforceForIndexOf option. This allows configuring whether the rule should also check for direct comparisons to NaN in indexOf and lastIndexOf method calls.

LANGUAGE: JavaScript
CODE:
"use-isnan": ["error", { "enforceForIndexOf": true }]

----------------------------------------

TITLE: Importing FlatRuleTester Class in JavaScript
DESCRIPTION: Shows how to import the experimental FlatRuleTester class using both ESM and CommonJS syntax.

LANGUAGE: javascript
CODE:
// ESM
import pkg from "eslint/use-at-your-own-risk";
const { FlatRuleTester } = pkg;

// CommonJS
const { FlatRuleTester } = require("eslint/use-at-your-own-risk");

----------------------------------------

TITLE: Detecting Confusing Operator Precedence in JavaScript
DESCRIPTION: This snippet demonstrates a common bug where the developer misunderstood the precedence of the '!' operator in combination with '=='. The condition will always evaluate to false or true, never null.

LANGUAGE: javascript
CODE:
if (!whitelist.has(specifier.imported.name) == null) {
  return;
}

----------------------------------------

TITLE: Configuring no-restricted-syntax Rule with AST Selector in ESLint
DESCRIPTION: Example configuration demonstrating how to use AST selectors with the no-restricted-syntax rule to disallow calls to Mocha's xdescribe function. Shows the new selector syntax capability introduced in ESLint v3.18.0.

LANGUAGE: json
CODE:
{
  "rules": {
    "no-restricted-syntax": [
      "error",
      "CallExpression[callee.name='xdescribe']"
    ]
  }
}

----------------------------------------

TITLE: Configuring Custom Parser in ESLint's New Config System
DESCRIPTION: In the new config system, languageOptions.parser must be a parser object. String references are no longer supported.

LANGUAGE: JavaScript
CODE:
module.exports = {
  languageOptions: {
    parser: require("my-custom-parser")
  }
}

----------------------------------------

TITLE: Detecting Incorrect Object Comparison in JavaScript
DESCRIPTION: This snippet illustrates a common mistake where developers expect objects to be compared by value rather than by reference. The condition will always evaluate to true because a newly created object is never equal to any other object.

LANGUAGE: javascript
CODE:
hasData = hasData || data !== {};

----------------------------------------

TITLE: Installing @eslint/json Plugin for JSON Linting in ESLint
DESCRIPTION: Command to install the @eslint/json plugin via npm for JSON linting support in ESLint.

LANGUAGE: shell
CODE:
npm install @eslint/json -D

----------------------------------------

TITLE: Importing ESLint Classes from Use-At-Your-Own-Risk Module
DESCRIPTION: Demonstrates how to import both FlatESLint and LegacyESLint classes from ESLint's use-at-your-own-risk module. These classes allow support for both config formats during the transition period before v9.0.0.

LANGUAGE: javascript
CODE:
const { FlatESLint, LegacyESLint } = require("eslint/use-at-your-own-risk");

----------------------------------------

TITLE: Updating no-unused-vars Rule in JavaScript
DESCRIPTION: This code snippet updates the no-unused-vars rule to fix a false negative with the comma operator. It addresses issue #14325.

LANGUAGE: JavaScript
CODE:
9e9b5e07475564813b62cd1d7562a93c5fb4bc74

----------------------------------------

TITLE: Configuring ES2020 Syntax Support in ESLint
DESCRIPTION: Enables ES2020 syntax support in ESLint configuration, including Dynamic Imports and BigInt.

LANGUAGE: json
CODE:
{
  "parserOptions": {
    "ecmaVersion": 2020
  }
}

----------------------------------------

TITLE: Accessing Variable Scopes in ESLint Rules
DESCRIPTION: Rules can now use SourceCode#getScope(node) to get the scope of a given node. This replaces the deprecated context.getScope() method.

LANGUAGE: JavaScript
CODE:
SourceCode#getScope(node)

----------------------------------------

TITLE: Using Overrides in ESLint JSON Configuration
DESCRIPTION: Shows how to use the 'overrides' key in an ESLint configuration file to apply different rules to specific files based on glob patterns.

LANGUAGE: json
CODE:
{
  "rules": {
    "quotes": ["error", "double"]
  },

  "overrides": [
    {
      "files": ["bin/*.js", "lib/*.js"],
      "excludedFiles": "*.test.js",
      "rules": {
        "quotes": ["error", "single"]
      }
    }
  ]
}

----------------------------------------

TITLE: Fixing no-var rule in JavaScript
DESCRIPTION: Bug fix for the no-var rule to prevent fixing variables named 'let'.

LANGUAGE: JavaScript
CODE:
1b5661ae467c227c0239e06cc1466480004aa799

----------------------------------------

TITLE: Running ESLint with TypeScript Config (Deprecated)
DESCRIPTION: Shows the deprecated command to run ESLint with a TypeScript configuration file using the unstable_ts_config flag.

LANGUAGE: shell
CODE:
npx eslint --flag unstable_ts_config

----------------------------------------

TITLE: ES2022 Class Static Block Implementation Example
DESCRIPTION: Demonstrates the new ES2022 class static block feature support in ESLint v8.3.0, showing initialization of static class properties with error handling.

LANGUAGE: javascript
CODE:
class C {
    static x = ...;
    static y;
    static z;
    static {
        try {
            const obj = doSomethingWith(this.x);
            this.y = obj.y;
            this.z = obj.z;
        }
        catch {
            this.y = ...;
            this.z = ...;
        }
    }
}

----------------------------------------

TITLE: Fixing multiline-comment-style rule in JavaScript
DESCRIPTION: Bug fix for the multiline-comment-style rule to correct an incorrect message.

LANGUAGE: JavaScript
CODE:
ded9548d881b15e771ca79b844e8159601f30f70

----------------------------------------

TITLE: Demonstrating no-shadow-restricted-names Rule Violations
DESCRIPTION: Illustrates code that violates the updated no-shadow-restricted-names rule, which now checks imports and class names.

LANGUAGE: javascript
CODE:
import undefined from "foo";

class NaN {}

----------------------------------------

TITLE: Fixing isSpaceBetweenTokens() for JSXText in ESLint
DESCRIPTION: This commit fixes an issue where isSpaceBetweenTokens() wasn't recognizing spaces in JSXText elements. It addresses GitHub issue #12614.

LANGUAGE: JavaScript
CODE:
bc435a93afd6ba4def1b53993ef7cf8220f3f070

----------------------------------------

TITLE: ESLint JSX Accessibility Configuration
DESCRIPTION: Shows how to configure ESLint with jsx-a11y plugin for accessibility checking in JSX components.

LANGUAGE: javascript
CODE:
import js from "@eslint/js";
import jsxA11y from "eslint-plugin-jsx-a11y"

export default [
    js.configs.recommended,
    jsxA11y.flatConfigs.recommended,
    // ...
];

----------------------------------------

TITLE: Configuring no-console Rule with Allowed Methods
DESCRIPTION: Shows how to configure the no-console rule to allow specific console methods while reporting others.

LANGUAGE: javascript
CODE:
/* eslint no-console: ["error", { allow: ["warn", "error"] }] */

console.log("Some text.");

----------------------------------------

TITLE: Clarifying Suggestion Data in ESLint Documentation
DESCRIPTION: This commit updates the 'Working with Rules' documentation to clarify information about suggestion data, referencing GitHub issue #12606.

LANGUAGE: JavaScript
CODE:
b41677ae2a143790b19b0e70391a46ec6c8f5de1

----------------------------------------

TITLE: Enhancing no-restricted-imports Rule in JavaScript
DESCRIPTION: This code snippet updates the no-restricted-imports rule to allow custom error messages for patterns. It resolves issue #11843.

LANGUAGE: JavaScript
CODE:
52655dd54925ee02af2ba3a0ebc09de959ae3101

----------------------------------------

TITLE: Demonstrating sort-keys Rule with ignoreComputedKeys Option in JavaScript
DESCRIPTION: Examples showing how the new ignoreComputedKeys option affects property sorting in object literals. When false (default), computed keys must maintain sort order. When true, computed keys act as group separators.

LANGUAGE: javascript
CODE:
const obj = { a: 10, b: 20, [c]: 7.5, d: 15 };

----------------------------------------

TITLE: Updating markVariableAsUsed Method in ESLint Rules
DESCRIPTION: This code snippet shows how to update the usage of markVariableAsUsed method in ESLint rules for compatibility with both v8 and v9.

LANGUAGE: javascript
CODE:
module.exports = {
    create(context) {

        const sourceCode = context.sourceCode ?? context.getSourceCode();

        return {
            Program(node) {
                const result = sourceCode.markVariableAsUsed
                    ? sourceCode.markVariableAsUsed("foo", node)
                    : context.markVariableAsUsed("foo");

                if (result) {
                  // the variable was found and marked as used
                }
            }
        }
    }
};

----------------------------------------

TITLE: Updating README in JavaScript Project
DESCRIPTION: This commit updates the README file with new team and sponsor information.

LANGUAGE: JavaScript
CODE:
6a2ced892c0dc43fa4942293b9f1c4b9151c3741

----------------------------------------

TITLE: Demonstrating RegExp Modifiers in JavaScript
DESCRIPTION: Examples of using the new Regular Expression Pattern Modifiers to change active RegExp flags within subexpressions.

LANGUAGE: javascript
CODE:
const regex1 = /^(?i:[a-z])[a-z]$/;

const regex2 = /^[a-z](?-i:[a-z])$/i;

----------------------------------------

TITLE: Replacing indexOf with includes in JavaScript
DESCRIPTION: This chore replaces uses of indexOf with the more modern includes method. It's part of issue #14607.

LANGUAGE: JavaScript
CODE:
afe95693e1e4316a1c6f01d39345061d4c5921c7

----------------------------------------

TITLE: Adding Author Information Using Node.js Script
DESCRIPTION: Command to run a Node.js script that adds author information to the ESLint blog. This script uses the GitHub username to populate author details.

LANGUAGE: bash
CODE:
node tools/add-author.js username

----------------------------------------

TITLE: Updating getAncestors Method in ESLint Rules
DESCRIPTION: This code snippet shows how to update the usage of getAncestors method in ESLint rules for compatibility with both v8 and v9.

LANGUAGE: javascript
CODE:
module.exports = {
    create(context) {

        const sourceCode = context.sourceCode ?? context.getSourceCode();

        return {
            Program(node) {
                const ancestors = sourceCode.getAncestors
                    ? sourceCode.getAncestors(node)
                    : context.getAncestors();

                // do something with ancestors
            }
        }
    }
};

----------------------------------------

TITLE: Git Commit: Fix indent Rule
DESCRIPTION: Git commit fixing indentation handling for async arrow functions

LANGUAGE: plaintext
CODE:
254990e87914457ca25ea2d7ee012964e56fc9e5

----------------------------------------

TITLE: Running ESLint Config Inspector without ESLint Installation
DESCRIPTION: Command to run the ESLint Config Inspector directly using npx, without having ESLint installed. This should be executed in the root directory containing the eslint.config.js file.

LANGUAGE: bash
CODE:
npx @eslint/config-inspector

----------------------------------------

TITLE: Formatting Pull Request Title for Blog Post Submission
DESCRIPTION: Example of how to format the pull request title when submitting a blog post to the ESLint repository. This follows the conventional commit format.

LANGUAGE: markdown
CODE:
"feat: blog: My great blog post"

----------------------------------------

TITLE: Updating no-unused-expressions Rule in ESLint (JavaScript)
DESCRIPTION: Enhances the no-unused-expressions rule by adding a new 'enforceForJSX' option to flag unused JSX elements.

LANGUAGE: JavaScript
CODE:
ad90761 Update: add enforceForJSX option to no-unused-expressions rule (#14012) (Duncan Beevers)

----------------------------------------

TITLE: Updating getScope Method in ESLint Rules
DESCRIPTION: This snippet demonstrates how to update the usage of getScope method in ESLint rules to be compatible with both v8 and v9.

LANGUAGE: javascript
CODE:
module.exports = {
    create(context) {

        const sourceCode = context.sourceCode ?? context.getSourceCode();

        return {
            Program(node) {
                const scope = sourceCode.getScope
                    ? sourceCode.getScope(node)
                    : context.getScope();

                // do something with scope
            }
        }
    }
};

----------------------------------------

TITLE: Implementing Code Path Analysis in ESLint Rules
DESCRIPTION: This snippet demonstrates how to implement code path analysis in ESLint rules, replacing the deprecated CodePath#currentSegments functionality.

LANGUAGE: javascript
CODE:
module.exports = {
    meta: {
        // ...
    },
    create(context) {

        // tracks the code path we are currently in
        let currentCodePath;

        // tracks the segments we've traversed in the current code path
        let currentSegments;

        // tracks all current segments for all open paths
        const allCurrentSegments = [];

        return {

            onCodePathStart(codePath) {
                currentCodePath = codePath;
                allCurrentSegments.push(currentSegments);
                currentSegments = new Set();
            },

            onCodePathEnd(codePath) {
                currentCodePath = codePath.upper;
                currentSegments = allCurrentSegments.pop();
            },

            onCodePathSegmentStart(segment) {
                currentSegments.add(segment);
            },

            onCodePathSegmentEnd(segment) {
                currentSegments.delete(segment);
            },

            onUnreachableCodePathSegmentStart(segment) {
                currentSegments.add(segment);
            },

            onUnreachableCodePathSegmentEnd(segment) {
                currentSegments.delete(segment);
            }
        };

    }
};

----------------------------------------

TITLE: Demonstrating Common JavaScript Binary Expression Bugs
DESCRIPTION: Examples of problematic binary expressions that the no-constant-binary-expressions rule catches, including falsy object checks, confusing precedence with negation operator, and unclear nullish coalescing operator usage.

LANGUAGE: javascript
CODE:
// Expecting empty objects to be falsy
const foo = { ...config } || {};

// Confusing precedence of !
const foo1 = !x == null;

// Confusing ?? or || precedence
const foo2 = x === y ?? true;

----------------------------------------

TITLE: Demonstrating Unused eslint-enable Directive in JavaScript
DESCRIPTION: This snippet shows an example of an unused eslint-enable directive, which is now reported and autofixed by ESLint v8.52.0 when using the --report-unused-disable-directives CLI option or reportUnusedDisableDirectives:true config option.

LANGUAGE: javascript
CODE:
/* eslint-disable no-console */

console.log("hello");

/* eslint-enable no-continue -- this directive is unused */

----------------------------------------

TITLE: Using Dot Notation with Keywords in JavaScript
DESCRIPTION: Demonstrates the change in the 'dot-notation' rule to allow keywords to be used as property names, which is valid in ECMAScript 5 but not in ECMAScript 3. This code no longer triggers a warning in ESLint 0.11.0.

LANGUAGE: javascript
CODE:
obj.delete = 5;

----------------------------------------

TITLE: Extending Configuration in ESLint JSON Format
DESCRIPTION: Demonstrates how to use the 'extends' key in an ESLint configuration file to import another configuration and add custom rules on top of it.

LANGUAGE: json
CODE:
{
  "extends": ["./other-config.json"],
  "rules": {
    "semi": "warn"
  }
}

----------------------------------------

TITLE: Using JavaScript File for ESLint Configuration (Command Line)
DESCRIPTION: Example of how to use a JavaScript file as a configuration file on the ESLint command line. This functionality is being removed in version 0.3.0.

LANGUAGE: bash
CODE:
eslint -c config.js file-to-lint.js

----------------------------------------

TITLE: Using Named Capture Groups in JavaScript Regular Expressions
DESCRIPTION: Example demonstrating the use of named capture groups in regular expressions, as recommended by the prefer-named-capture-group rule in ESLint v8.29.0.

LANGUAGE: javascript
CODE:
const regex = /(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})/

----------------------------------------

TITLE: Combining Extends and Overrides in ESLint JSON Configuration
DESCRIPTION: Illustrates how to use both 'extends' and 'overrides' keys together in an ESLint configuration file, allowing for more complex and specific rule sets.

LANGUAGE: json
CODE:
{
  "rules": {
    "quotes": ["error", "double"]
  },

  "overrides": [
    {
      "files": ["bin/*.js", "lib/*.js"],
      "excludedFiles": "*.test.js",
      "extends": ["eslint:recommended"],
      "rules": {
        "quotes": ["error", "single"]
      }
    }
  ]
}

----------------------------------------

TITLE: Improving Key Width Calculation in key-spacing Rule
DESCRIPTION: Enhancement to the key-spacing rule to improve the calculation of key widths, potentially providing more accurate and consistent spacing enforcement.

LANGUAGE: JavaScript
CODE:
feat: improve the key width calculation in key-spacing rule (#16154)

----------------------------------------

TITLE: Enabling Tolerant Parsing for CSS
DESCRIPTION: Configuration example for enabling tolerant parsing mode in CSS linting, which uses browser-like error recovery.

LANGUAGE: javascript
CODE:
import css from "@eslint/css";

export default [
    {
        files: ["**/*.css"],
        plugins: {
            css,
        },
        language: "css/css",
        languageOptions: {
            tolerant: true,
        },
        rules: {
            "css/no-empty-blocks": "error",
        },
    },
];

----------------------------------------

TITLE: ESLint Config Inheritance Example
DESCRIPTION: Shows how to use the new extends feature to inherit configuration settings from another file.

LANGUAGE: json
CODE:
{
    "extends": "../../config/myconfig.json"
}

----------------------------------------

TITLE: Implementing FlatESLint in JavaScript
DESCRIPTION: New feature implementing the FlatESLint class for ESLint's new configuration system. This is a significant step towards the new config system but is not yet stable or fully implemented.

LANGUAGE: JavaScript
CODE:
feat: Implement FlatESLint (#16149)

----------------------------------------

TITLE: Configuring Custom CSS Syntax
DESCRIPTION: Example of configuring custom CSS syntax for a new at-rule using the CSSTree format in ESLint configuration.

LANGUAGE: javascript
CODE:
import css from "@eslint/css";

export default [
    {
        files: ["**/*.css"],
        plugins: {
            css,
        },
        language: "css/css",
        languageOptions: {
            customSyntax: {
                atrules: {
                    "my-at-rule": {
                        prelude: "<string>",
                    },
                },
            },
        },
        rules: {
            "css/no-empty-blocks": "error",
        },
    },
];

----------------------------------------

TITLE: Using ESLint Configuration Migrator for CommonJS Output
DESCRIPTION: Examples of how to use the ESLint Configuration Migrator with various package managers to convert an .eslintrc.json file to a CommonJS eslint.config.js file.

LANGUAGE: shell
CODE:
npx @eslint/migrate-config .eslintrc.json --commonjs
# or
yarn dlx @eslint/migrate-config .eslintrc.json --commonjs
# or
pnpm dlx @eslint/migrate-config .eslintrc.json --commonjs
# or
bunx @eslint/migrate-config .eslintrc.json --commonjs

----------------------------------------

TITLE: Adding ignoreOnInitialization option to no-shadow rule in ESLint
DESCRIPTION: This snippet shows the commit that adds a new 'ignoreOnInitialization' option to the 'no-shadow' rule in ESLint. It references the GitHub issue and credits the contributor.

LANGUAGE: plaintext
CODE:
`6e2c325` feat: Add `ignoreOnInitialization` option to [no-shadow](/docs/rules/no-shadow) rule ([#14963](https://github.com/eslint/eslint/issues/14963)) (Soufiane Boutahlil)

----------------------------------------

TITLE: Calculating Severity in ESLint Formatters (0.7.1+)
DESCRIPTION: Shows how to calculate the severity of a rule in ESLint formatters for version 0.7.1 and later. This method uses the severity property directly on the message object.

LANGUAGE: javascript
CODE:
var severity = message.severity;

----------------------------------------

TITLE: Updated ESLint Tester Import
DESCRIPTION: Updated code to import ESLint tester from the main eslint module rather than standalone eslint-tester package

LANGUAGE: javascript
CODE:
var ESLintTester = require("eslint").ESLintTester;

----------------------------------------

TITLE: Detecting Accidental Arrow Function Creation in JavaScript Assertions
DESCRIPTION: This snippet demonstrates a typo that creates an unintended arrow function instead of a greater-than-or-equal comparison. The assertion will not behave as expected due to this error.

LANGUAGE: javascript
CODE:
assert(startWidth => 0 && startWidth <= 1);

----------------------------------------

TITLE: Initializing Legacy ESLint Linter Configuration
DESCRIPTION: Example showing how to initialize an ESLint Linter instance with legacy eslintrc configuration type in v9.0.0. This approach will be deprecated and eventually removed in v10.0.0.

LANGUAGE: javascript
CODE:
const linter = new Linter({ configType: "eslintrc" });

----------------------------------------

TITLE: Displaying Output of ESLint Stylish Formatter
DESCRIPTION: Demonstrates the output format of the 'stylish' formatter, which will become the new default formatter in ESLint after the breaking change.

LANGUAGE: plaintext
CODE:
foo.js
  5:10  error    Unexpected foo  foo
  6:11  warning  Unexpected bar  bar

2 problems

----------------------------------------

TITLE: Identifying Misuse of Nullish Coalescing with Object Spread in JavaScript
DESCRIPTION: This example shows a misunderstanding of how the nullish coalescing operator works with objects. The spread object will never be nullish, so the '??' operator is unnecessary and potentially misleading.

LANGUAGE: javascript
CODE:
const newConfigValue = { ...configProfiles } ?? {};

----------------------------------------

TITLE: Installing ESLint v8.0.0-rc.0 using npm with next tag
DESCRIPTION: Command to install the prerelease version of ESLint v8.0.0-rc.0 using npm with the 'next' tag. This is necessary as prerelease versions are not automatically installed by npm.

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

----------------------------------------

TITLE: Command Line Usage - Cache Location
DESCRIPTION: Example of using the new --cache-location flag which replaces --cache-file. Can accept either a file path or directory path (with trailing slash).

LANGUAGE: bash
CODE:
--cache-location ./eslint-cache/

----------------------------------------

TITLE: Installing ESLint v8.0.0-beta.2 with npm
DESCRIPTION: Commands to install the pre-release version of ESLint v8.0.0-beta.2 using npm. The 'next' tag or specific version number must be specified.

LANGUAGE: Bash
CODE:
npm i eslint@next --save-dev

LANGUAGE: Bash
CODE:
npm i eslint@8.0.0-beta.2 --save-dev

----------------------------------------

TITLE: Configuring Processor Plugin Autofix Support
DESCRIPTION: Code example showing how to enable autofix support in processor plugins by setting supportsAutofix flag to true and handling fix ranges in the postprocess method.

LANGUAGE: JavaScript
CODE:
{
  "supportsAutofix": true,
  "postprocess": function(messages, filename) {
    // Transform fix ranges
  }
}

----------------------------------------

TITLE: Configuring Rule Severity with Strings in ESLint
DESCRIPTION: ESLint v2.3.0 introduces the ability to use strings as severity levels in configuration files. Users can now use 'off', 'warn', or 'error' instead of 0, 1, and 2 respectively.

LANGUAGE: JavaScript
CODE:
{
  "rules": {
    "example-rule": "error",
    "another-rule": "warn",
    "disabled-rule": "off"
  }
}

----------------------------------------

TITLE: Using 'only' Property in RuleTester Test Cases
DESCRIPTION: RuleTester test cases now support an optional 'only' boolean property that allows running a single test case in isolation for easier debugging.

LANGUAGE: JavaScript
CODE:
new RuleTester().run('rule-name', rule, {
  valid: [
    { code: 'valid code', only: true }
  ],
  invalid: [
    { code: 'invalid code', errors: [{ message: 'error message' }] }
  ]
});

----------------------------------------

TITLE: Commit Updates for ESLint v4.0.0-rc.0
DESCRIPTION: List of commit changes since v4.0.0-rc.0 including enhancements, bug fixes, documentation updates and chores

LANGUAGE: markdown
CODE:
34c4020 Update: Add support for parens on left side for-loops (fixes: #8393) (#8679) (Victor Hom)

3da7b5e Fix: Semi-Style only check for comments when tokens exist (fixes #8696) (#8697) (Reyad Attiyat)

3cfe9ee Fix: Add space between async and param on fix (fixes #8682) (#8693) (Reyad Attiyat)

735cd09 Docs: Correct the comment in an example for no-mixed-requires (#8686) (Fangzhou Li)

4aefb49 Chore: avoid using deprecated rules on ESLint codebase (#8708) (Teddy Katz)

389feba Chore: upgrade deps. (#8684) (薛定谔的猫)

c702858 Chore: enable no-multiple-empty-lines on ESLint codebase (#8694) (Teddy Katz)

026f048 Chore: remove dead code from prefer-const (#8683) (Teddy Katz)

----------------------------------------

TITLE: Using getRulesMetaForResults() Method in ESLint
DESCRIPTION: The ESLint class now includes a new method getRulesMetaForResults() that returns meta information for rules in lint results. This method is intended to replace the getRules() method on the deprecated CLIEngine class.

LANGUAGE: JavaScript
CODE:
const eslint = new ESLint();
const results = await eslint.lintFiles(['file.js']);
const rulesMeta = eslint.getRulesMetaForResults(results);

----------------------------------------

TITLE: Removing Lodash Dependency in JavaScript
DESCRIPTION: This chore removes the Lodash dependency from the project. It's part of issue #14287.

LANGUAGE: JavaScript
CODE:
c0f418e2476df98519bc156b81d20431984e8704

----------------------------------------

TITLE: Running ESLint Config Inspector with ESLint Installed
DESCRIPTION: Command to run the ESLint Config Inspector using the ESLint CLI. This command starts a local web server to visualize the ESLint configuration file.

LANGUAGE: bash
CODE:
eslint --inspect-config

----------------------------------------

TITLE: Adding Test Cases for no-sequences Rule in JavaScript
DESCRIPTION: This chore adds more test cases for the no-sequences rule. It's part of issue #14579.

LANGUAGE: JavaScript
CODE:
086c1d6e8593cf8e7851daa8f2a890c213cf6999

----------------------------------------

TITLE: Affected Package List
DESCRIPTION: List of packages and their dependencies that were affected by the security incident. Shows the scope of potential impact through dependency chains.

LANGUAGE: text
CODE:
eslint-scope@3.7 - dependency of eslint, babel-eslint, and webpack
eslint-config-eslint@5.0 - internal ESLint team configuration

----------------------------------------

TITLE: Accessing Current Working Directory in ESLint Rules
DESCRIPTION: Rules can now access the current working directory using context.getCwd(). This allows rules to have awareness of the project structure and file paths.

LANGUAGE: JavaScript
CODE:
context.getCwd()

----------------------------------------

TITLE: Installing ES6/JSX-enabled ESLint via npm
DESCRIPTION: Command to install the latest prerelease version of ESLint with ES6 and JSX support using the 'es6jsx' tag.

LANGUAGE: bash
CODE:
npm i eslint@es6jsx

----------------------------------------

TITLE: Referencing GitHub Issues and Pull Requests in Markdown
DESCRIPTION: This snippet demonstrates how to reference GitHub issues and pull requests using Markdown syntax. It's used to provide context and traceability for changes mentioned in the release notes.

LANGUAGE: Markdown
CODE:
(fixes [#14324](https://github.com/eslint/eslint/issues/14324)) ([#14335](https://github.com/eslint/eslint/issues/14335))

----------------------------------------

TITLE: Installing ESLint v7.0.0-alpha.0 with npm
DESCRIPTION: Commands to install the pre-release version of ESLint v7.0.0-alpha.0 using npm. The 'next' tag must be specified since this is a pre-release version.

LANGUAGE: Shell
CODE:
npm i eslint@next --save-dev

LANGUAGE: Shell
CODE:
npm i eslint@7.0.0-alpha.0 --save-dev

----------------------------------------

TITLE: Adding ENOTDIR Error Support in ESLint Folder Existence Check (JavaScript)
DESCRIPTION: Enhances the folder existence checking utility to support the ENOTDIR error code.

LANGUAGE: JavaScript
CODE:
9b277a1 Fix: Support ENOTDIR error code in the folder existence checking utility (#13973) (Constantine Genchevsky)

----------------------------------------

TITLE: Installing @eslint/css Plugin
DESCRIPTION: Command to install the @eslint/css plugin using npm.

LANGUAGE: shell
CODE:
npm install @eslint/css -D

----------------------------------------

TITLE: Installing ESLint v7.0.0-alpha.1 using npm
DESCRIPTION: Commands to install the pre-release version of ESLint v7.0.0-alpha.1 using npm. Since this is a pre-release, it requires specifying either the 'next' tag or the exact version number.

LANGUAGE: Shell
CODE:
npm i eslint@next --save-dev

LANGUAGE: Shell
CODE:
npm i eslint@7.0.0-alpha.1 --save-dev

----------------------------------------

TITLE: Updating ESLint Init to Exclude Deprecated Rules (JavaScript)
DESCRIPTION: Modifies the --init autoconfig functionality to prevent adding deprecated rules during initialization.

LANGUAGE: JavaScript
CODE:
d6c84af Fix: `--init` autoconfig shouldn't add deprecated rules (fixes #14017) (#14060) (Milos Djermanovic)

----------------------------------------

TITLE: Installing ESLint v5.0.0-alpha.0 using npm
DESCRIPTION: Commands to install the pre-release version of ESLint v5.0.0-alpha.0 using npm. Users must specify either the 'next' tag or the exact version number.

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

LANGUAGE: bash
CODE:
npm i eslint@5.0.0-alpha.0 --save-dev

----------------------------------------

TITLE: Demonstrating no-unused-vars Suggestions in JavaScript
DESCRIPTION: Shows how the no-unused-vars rule now provides suggestions for removing unused variable declarations, including for complex cases like unused function arguments and destructuring syntax.

LANGUAGE: javascript
CODE:
const a = "Hello";
const b = "World!";
console.log(a);

LANGUAGE: javascript
CODE:
const a = "Hello";

console.log(a);

LANGUAGE: javascript
CODE:
function avg(a, b, c) {
    return (a + b) / 2;
}

console.log(avg(12, 13, 25));

LANGUAGE: javascript
CODE:
function avg(a, b) {
    return (a + b) / 2;
}

console.log(avg(12, 13, 25));

LANGUAGE: javascript
CODE:
const [{ status, value, reason }] = await Promise.allSettled([promise1, promise2]);

if (status === "rejected") {
    throw reason;
}

LANGUAGE: javascript
CODE:
const [{ status, reason }] = await Promise.allSettled([promise1, promise2]);

if (status === "rejected") {
    throw reason;
}

----------------------------------------

TITLE: Correcting no-extra-parens rule for let identifier in for-loops
DESCRIPTION: Fix for a false positive in the no-extra-parens rule when using 'let' identifiers in for-loops, improving the accuracy of the rule.

LANGUAGE: JavaScript
CODE:
292b1c0017bc442d399f67e01d699c59e6b71453

----------------------------------------

TITLE: Installing ESLint v5.0.0-alpha.1 using npm
DESCRIPTION: Commands to install the pre-release version of ESLint v5.0.0-alpha.1 using npm. The first command installs the latest pre-release version, while the second specifies the exact version.

LANGUAGE: Shell
CODE:
npm i eslint@next --save-dev

LANGUAGE: Shell
CODE:
npm i eslint@5.0.0-alpha.1 --save-dev

----------------------------------------

TITLE: Configuring lint-staged with no-warn-ignored option
DESCRIPTION: Example configuration for lint-staged that uses the new --no-warn-ignored flag with --max-warnings 0 to prevent exit code 1 when ignored files are passed.

LANGUAGE: json
CODE:
{
    "lint-staged": {
        "*.js": "eslint --max-warnings 0 --no-warn-ignored"
    }
}

----------------------------------------

TITLE: Configuring lint-staged with no-warn-ignored option
DESCRIPTION: Example configuration for lint-staged that uses the new --no-warn-ignored flag with --max-warnings 0 to prevent exit code 1 when ignored files are passed.

LANGUAGE: json
CODE:
{
    "lint-staged": {
        "*.js": "eslint --max-warnings 0 --no-warn-ignored"
    }
}

----------------------------------------

TITLE: Installing ESLint v5.0.0-alpha.3 with npm
DESCRIPTION: Commands to install the pre-release version of ESLint v5.0.0-alpha.3 using npm. The first command installs the latest pre-release version, while the second specifies the exact version.

LANGUAGE: Shell
CODE:
npm i eslint@next --save-dev

LANGUAGE: Shell
CODE:
npm i eslint@5.0.0-alpha.3 --save-dev

----------------------------------------

TITLE: Updating complexity rule for logical assignment operators in JavaScript
DESCRIPTION: Enhancement to the complexity rule to check logical assignment operators. This update improves the rule's ability to analyze code complexity.

LANGUAGE: JavaScript
CODE:
f17c3c371789ffa84f0cda57101e8193899adbe6

----------------------------------------

TITLE: Configuring ESLint for no-constant-binary-expression Rule
DESCRIPTION: This configuration snippet shows how to enable the 'no-constant-binary-expression' rule in an ESLint configuration file. It sets the rule to 'error' severity, which will cause ESLint to report these issues as errors.

LANGUAGE: javascript
CODE:
// eslintrc
module.exports = {
  rules: {
    // Requires eslint >= v8.14.0
    "no-constant-binary-expression": "error"
  }
}

----------------------------------------

TITLE: Installing ESLint v5.0.0-alpha.4 using npm
DESCRIPTION: Commands to install the pre-release version of ESLint using npm. Users can either specify the 'next' tag or the exact version number.

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

LANGUAGE: bash
CODE:
npm i eslint@5.0.0-alpha.4 --save-dev

----------------------------------------

TITLE: Installing ESLint v7.0.0-rc.0 using specific version
DESCRIPTION: Command to install ESLint by explicitly specifying the prerelease version number

LANGUAGE: bash
CODE:
npm i eslint@7.0.0-rc.0 --save-dev

----------------------------------------

TITLE: Installing ESLint v2.0.0-alpha-2 with npm
DESCRIPTION: Commands to install the pre-release version of ESLint v2.0.0-alpha-2 using npm.

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

LANGUAGE: bash
CODE:
npm i eslint@2.0.0-alpha-2 --save-dev

----------------------------------------

TITLE: Installing ESLint v7.0.0-alpha.3 using npm
DESCRIPTION: Commands to install the pre-release version of ESLint v7.0.0-alpha.3 using npm. Since this is a pre-release, it must be installed explicitly using the 'next' tag or the full version number.

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

LANGUAGE: bash
CODE:
npm i eslint@7.0.0-alpha.3 --save-dev

----------------------------------------

TITLE: TypeScript Type Checking Example
DESCRIPTION: Demonstrates TypeScript's type checking capabilities by showing how it catches type mismatches in function arguments.

LANGUAGE: typescript
CODE:
function logUppercase(text: string) {
    console.log(text.toUpperCase());
}

logUppercase(9001);
//           ~~~~
// Argument of type 'number' is not assignable to parameter of type 'string'.

----------------------------------------

TITLE: Installing ESLint v2.0.0-beta.2
DESCRIPTION: Commands for installing the beta version of ESLint using npm

LANGUAGE: shell
CODE:
npm i eslint@next --save-dev

LANGUAGE: shell
CODE:
npm i eslint@2.0.0-beta.2 --save-dev

----------------------------------------

TITLE: Installing ESLint v7.0.0-alpha.2 with NPM next tag
DESCRIPTION: Command to install the pre-release version of ESLint using the next tag.

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

----------------------------------------

TITLE: Installing ESLint v9.0.0-alpha.1 with specific version
DESCRIPTION: Command to install ESLint by explicitly specifying the version number

LANGUAGE: bash
CODE:
npm i eslint@9.0.0-alpha.1 --save-dev

----------------------------------------

TITLE: JavaScript-based ESLint Configuration File Structure
DESCRIPTION: Example of the structure of an ESLint configuration file written in JavaScript. This format will no longer be supported in version 0.3.0 and must be converted to JSON.

LANGUAGE: javascript
CODE:
module.exports = {

    rules: {
        semi: 2
    }
};

----------------------------------------

TITLE: Fixing Entry Directory Handling in ESLint
DESCRIPTION: This commit addresses a bug where ESLint was ignoring the entry directory. It fixes GitHub issue #12604.

LANGUAGE: JavaScript
CODE:
4928d513b4fe716c7ed958c294a10ef8517be25e

----------------------------------------

TITLE: Installing ESLint v4.0.0-alpha.0 with npm next tag
DESCRIPTION: Command to install the pre-release version of ESLint using npm's next tag

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

----------------------------------------

TITLE: Adding Support for Tagged Template Literal Generics in no-unexpected-multiline Rule
DESCRIPTION: This commit enhances the no-unexpected-multiline rule to support tagged template literal generics, addressing GitHub issue #11698.

LANGUAGE: JavaScript
CODE:
ea16de4e7c6f661398b0b7843f95e5f307c89551

----------------------------------------

TITLE: Installing ESLint v9.0.0-alpha.0
DESCRIPTION: Commands to install the pre-release version of ESLint v9.0.0-alpha.0 using npm. Shows two methods: using the 'next' tag or specifying the exact version.

LANGUAGE: shell
CODE:
npm i eslint@next --save-dev

LANGUAGE: shell
CODE:
npm i eslint@9.0.0-alpha.0 --save-dev

----------------------------------------

TITLE: Updating no-constant-condition rule for logical assignment in JavaScript
DESCRIPTION: This code snippet enhances the no-constant-condition rule to check for logical assignment. It's part of the ESLint v7.17.0 update.

LANGUAGE: JavaScript
CODE:
Update: check logical assignment in [no-constant-condition](/docs/rules/no-constant-condition) ([#13946](https://github.com/eslint/eslint/issues/13946)) (Milos Djermanovic)

----------------------------------------

TITLE: Highlighting Git Commit in Markdown
DESCRIPTION: This snippet demonstrates how to reference a Git commit hash with a link to the full commit on GitHub in Markdown format. It's used to provide traceability for changes in the release notes.

LANGUAGE: Markdown
CODE:
[`5df5e4a`](https://github.com/eslint/eslint/commit/5df5e4a9976964fcf4dc67e241d4e22ec1370fe0)

----------------------------------------

TITLE: New Option for no-unsafe-negation Rule in ESLint
DESCRIPTION: The no-unsafe-negation rule has a new enforceForOrderingRelations option. This allows configuring whether the rule should also check for unsafe negation in ordering comparisons.

LANGUAGE: JavaScript
CODE:
"no-unsafe-negation": ["error", { "enforceForOrderingRelations": true }]

----------------------------------------

TITLE: Linking to ESLint Rule Documentation in Markdown
DESCRIPTION: This snippet shows how to create a link to the documentation for a specific ESLint rule using Markdown syntax. It's used to provide easy access to rule documentation within the release notes.

LANGUAGE: Markdown
CODE:
[no-unused-vars](/docs/rules/no-unused-vars)

----------------------------------------

TITLE: Fixing no-useless-rename Rule for ExperimentalRestProperty in ESLint
DESCRIPTION: This commit fixes an issue in the no-useless-rename rule to handle ExperimentalRestProperty, addressing GitHub issue #12335.

LANGUAGE: Markdown
CODE:
[`447ac87`](https://github.com/eslint/eslint/commit/447ac877e8ca2858d61b1e983f72d39e3e2ca74d) Fix: [no-useless-rename](/docs/rules/no-useless-rename) handles ExperimentalRestProperty (fixes [#12335](https://github.com/eslint/eslint/issues/12335)) ([#12339](https://github.com/eslint/eslint/issues/12339)) (Kai Cataldo)

----------------------------------------

TITLE: Updating no-control-regex rule to use default ecmaVersion in JavaScript
DESCRIPTION: This enhancement updates the no-control-regex rule to use regexpp's default ecmaVersion. It's part of the ESLint v7.17.0 release.

LANGUAGE: JavaScript
CODE:
Update: use regexpp's default ecmaVersion in [no-control-regex](/docs/rules/no-control-regex) ([#13969](https://github.com/eslint/eslint/issues/13969)) (Milos Djermanovic)

----------------------------------------

TITLE: Using context.cwd in Custom Formatter (JavaScript)
DESCRIPTION: Demonstrates how to access the 'cwd' (current working directory) property from the context object in a custom formatter. This allows formatters to output relative paths more reliably.

LANGUAGE: javascript
CODE:
//------ my-formatter.js ------
module.exports = function(results, context) {
    const cwd = context.cwd;
    // ...
};

----------------------------------------

TITLE: Configuring ESLint Parser Options for Optional Chaining
DESCRIPTION: Configuration example showing how to enable ECMAScript 2020 features including optional chaining in ESLint

LANGUAGE: json
CODE:
{
    "parserOptions": {
        "ecmaVersion": 2020
    }
}

----------------------------------------

TITLE: ESLint v6.0.1 Release Front Matter
DESCRIPTION: YAML front matter metadata for the release notes blog post, containing title, teaser, image, tags, authors and categories.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v6.0.1 released
teaser: "We just pushed ESLint v6.0.1, which is a patch release upgrade of ESLint. This release fixes several bugs found in the previous release."
image: release-notes-patch.png
tags:
  - release
  - patch
authors:
  - not-an-aardvark
categories:
  - Release Notes
---

----------------------------------------

TITLE: Release Notes Front Matter in YAML
DESCRIPTION: YAML front matter configuration for the ESLint v8.18.0 release notes blog post, defining metadata like title, teaser, authors and categories.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v8.18.0 released
teaser: "We just pushed ESLint v8.18.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes-minor.png
authors:
  - mdjermanovic
categories:
  - Release Notes
tags:
  - Release
---

----------------------------------------

TITLE: Adding onlyOneSimpleParam option to no-confusing-arrow rule in ESLint
DESCRIPTION: This commit introduces a new 'onlyOneSimpleParam' option to the 'no-confusing-arrow' rule in ESLint. It includes the GitHub issue reference and contributor name.

LANGUAGE: plaintext
CODE:
`345e70d` feat: Add `onlyOneSimpleParam` option to [no-confusing-arrow](/docs/rules/no-confusing-arrow) rule ([#15566](https://github.com/eslint/eslint/issues/15566)) (Gautam Arora)

----------------------------------------

TITLE: Fixing no-else-return rule in JavaScript
DESCRIPTION: Bug fix for the no-else-return rule to prevent name collisions during autofixing.

LANGUAGE: JavaScript
CODE:
5f022bc91d0d93d140876ceb1ee4e08b1b7cfd49

----------------------------------------

TITLE: ESLint v8.30.0 Release Notes YAML Frontmatter
DESCRIPTION: YAML frontmatter defining metadata for the release notes blog post, including title, teaser, image, authors, categories and tags.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v8.30.0 released
teaser: "We just pushed ESLint v8.30.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes-minor.png
authors:
  - mdjermanovic
categories:
  - Release Notes
tags:
  - Release
---

----------------------------------------

TITLE: Configuring ESLint v7.6.0 Release Post Metadata
DESCRIPTION: YAML frontmatter configuration for the ESLint v7.6.0 release blog post, specifying metadata like title, teaser, image, tags, authors, and categories.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v7.6.0 released
teaser: "We just pushed ESLint v7.6.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes.png
tags:
  - release
  - minor
authors:
  - kaicataldo
categories:
  - Release Notes
---

----------------------------------------

TITLE: Installing ESLint v6.0.0-rc.0 Prerelease
DESCRIPTION: Commands for installing the prerelease version of ESLint using npm. Shows two methods: installing using the 'next' tag or specifying the version directly.

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

LANGUAGE: bash
CODE:
npm i eslint@6.0.0-rc.0 --save-dev

----------------------------------------

TITLE: Fixing prefer-const Rule for Destructuring Assignment
DESCRIPTION: Bug fix addressing issues with the prefer-const rule when using destructuring assignment patterns. Resolves issue #8308.

LANGUAGE: JavaScript
CODE:
// Example pattern fixed:
let {a, b} = obj;
b = 2; // Only b is reassigned
// Now correctly suggests: const {a} = obj; let {b} = obj;

----------------------------------------

TITLE: Commit Reference with Link
DESCRIPTION: Git commit reference formatting with markdown link pattern used throughout the release notes document

LANGUAGE: markdown
CODE:
[`8a93438`](https://github.com/eslint/eslint/commit/8a9343871f7dade19d910ca8e2a4177bfca28b64)

----------------------------------------

TITLE: Frontend Configuration - YAML Header
DESCRIPTION: YAML frontmatter configuration for the blog post layout, defining metadata like title, teaser, image, tags, authors and categories.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v5.1.0 released
teaser: "We just pushed ESLint v5.1.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes.png
tags:
  - release
  - minor
authors:
  - not-an-aardvark
categories:
  - Release Notes
---

----------------------------------------

TITLE: Installing ESLint v5.0.0-rc.0 using npm
DESCRIPTION: Commands to install the pre-release version of ESLint v5.0.0-rc.0 using npm. The first command installs the latest pre-release version, while the second specifies the exact version.

LANGUAGE: Shell
CODE:
npm i eslint@next --save-dev

LANGUAGE: Shell
CODE:
npm i eslint@5.0.0-rc.0 --save-dev

----------------------------------------

TITLE: Specifying Alternate File Extensions in ESLint CLI
DESCRIPTION: Shows how to use the --ext flag to specify which file extensions ESLint should look for when scanning directories. Multiple extensions can be specified.

LANGUAGE: bash
CODE:
eslint --ext .js2

LANGUAGE: bash
CODE:
eslint --ext .js --ext .js2

----------------------------------------

TITLE: ESLint Release Metadata - YAML Frontmatter
DESCRIPTION: YAML frontmatter defining metadata for the ESLint v8.53.0 release blog post, including title, teaser, authors, categories and tags.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v8.53.0 released
teaser: "We just pushed ESLint v8.53.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes-minor.png
authors:
  - mdjermanovic
categories:
  - Release Notes
tags:
  - Release
---

----------------------------------------

TITLE: Installing ESLint v5.0.0-alpha.2 with specific version
DESCRIPTION: Command to install ESLint by explicitly specifying the alpha version number

LANGUAGE: bash
CODE:
npm i eslint@5.0.0-alpha.2 --save-dev

----------------------------------------

TITLE: ESLint Release Notes Frontmatter in YAML
DESCRIPTION: YAML frontmatter defining metadata for the ESLint v3.6.1 release notes blog post, including title, teaser, image, tags, authors and categories.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v3.6.1 released
teaser: "We just pushed ESLint v3.6.1, which is a patch release upgrade of ESLint. This release  fixes several bugs found in the previous release."
image: release-notes-patch.png
tags:
  - release
  - patch
authors:
  - kaicataldo
categories:
  - Release Notes
---

----------------------------------------

TITLE: Configuring Scoped Plugin Rules in YAML - New Format
DESCRIPTION: Demonstrates the new recommended format for configuring rules from scoped ESLint plugins, using the full package scope as prefix.

LANGUAGE: yaml
CODE:
rules:
  @foo/bar/baz: error

----------------------------------------

TITLE: Implementing messageId in ESLint rule reports
DESCRIPTION: Shows how to use the new messageId feature in rule reports, which allows for easier maintenance of rule messages and supports future localization efforts.

LANGUAGE: javascript
CODE:
module.exports = {
  meta: {
    messages: {
      avoidFoo: "Avoid using 'foo'."
    }
  },
  create(context) {
    return {
      Identifier(node) {
        if (node.name === "foo") {
          context.report({
            node,
            messageId: "avoidFoo"
          });
        }
      }
    };
  }
};

----------------------------------------

TITLE: ESLint v8.39.0 Release Notes Front Matter
DESCRIPTION: YAML front matter metadata for the release notes blog post, specifying title, teaser, image, authors, categories and tags.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v8.39.0 released
teaser: "We just pushed ESLint v8.39.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes-minor.png
authors:
  - mdjermanovic
categories:
  - Release Notes
tags:
  - Release
---

----------------------------------------

TITLE: Configuring Glob-based Overrides in ESLint
DESCRIPTION: Demonstrates how to use the new 'overrides' key in an ESLint config file to apply different configurations to specific file globs. This example enables the Mocha environment for test files.

LANGUAGE: javascript
CODE:
module.exports = {
  rules: {
    // ... the rest of your config (applied to all files)
  },
  overrides: [
    {
      files: ["foo/**/*.spec.js", "bar/**/*.spec.js"],

      // Override config (only applied to files that match the given globs)
      env: { mocha: true }
    }
  ]
};

----------------------------------------

TITLE: Financial Data Table - Income Sources
DESCRIPTION: Markdown table showing ESLint's income sources and amounts for 2023

LANGUAGE: markdown
CODE:
| **Source** | **Amount** |
|-----------|-------------|
| Open Collective | $118,381.30 |
| GitHub Sponsors | $25,190.89 |
| Tidelift | $30,077.84 |
| Carbon Ads | $6,380.89 |
| Thanks.dev | $524.61 |
| Stackaid.us | $91.00 |
| **Total** | **$180,646.53** |

----------------------------------------

TITLE: Configuring Scoped Plugin Rules in YAML - Old Format
DESCRIPTION: Shows the deprecated format for configuring rules from scoped ESLint plugins, which will be removed in ESLint v4.0.0.

LANGUAGE: yaml
CODE:
rules:
  bar/baz: error

----------------------------------------

TITLE: Income Sources Table in Markdown
DESCRIPTION: Markdown table showing ESLint's income sources for 2024 compared to 2023, including amounts and percentage changes.

LANGUAGE: markdown-table
CODE:
| **Source**         | **2024 Amount**    | **2023 Amount** | **Gain/Loss %** |
|--------------------|---------------|-----------------|------------------|
| Open Collective    | $122,996.60   | $118,381.30     | +3.90%          |
| GitHub Sponsors    | $35,928.93    | $25,190.89      | +42.63%         |
| Tidelift           | $18,449.16    | $30,077.84      | -38.66%         |
| Website Ads        | $6,345.54     | $6,380.89       | -0.55%          |
| Thanks.dev         | $4,234.09     | $524.61         | +707.09%        |
| Threadless         | $9.98         | $0.00           | +100%           |
| Stackaid.us        | $0.00         | $91.00          | -100%           |
| **Total**          | **$187,964.30** | **$180,646.53** | **+4.05%**      |

----------------------------------------

TITLE: Demonstrating getPhysicalFilename() vs getFilename() in ESLint Rules
DESCRIPTION: This snippet shows the difference between the new getPhysicalFilename() method and the existing getFilename() method when ESLint is used with processors. getPhysicalFilename() returns the original file path, while getFilename() may return a virtual filename for code blocks.

LANGUAGE: javascript
CODE:
context.getPhysicalFilename() // "/project/example.md"        - original file
context.getFilename()         // "/project/example.md/0_0.js" - virtual filename assigned to a code block

----------------------------------------

TITLE: Applying Multiple Autofixes Atomically in ESLint Custom Rules
DESCRIPTION: Demonstrates how to apply multiple fixes atomically in a custom ESLint rule by returning an array of fixes from the 'fix' function.

LANGUAGE: javascript
CODE:
context.report({
  node,
  message,
  fix(fixer) {
    return [
      fixer.insertTextBefore(node, "("),
      fixer.insertTextAfter(node, ")")
    ]
  }
})

----------------------------------------

TITLE: Importing and Using Button Macro in HTML
DESCRIPTION: Demonstrates how to import the button macro and use it to create both action buttons and link buttons. The macro accepts parameters for behavior, type, text, and URL to generate appropriate HTML elements.

LANGUAGE: html
CODE:
<!-- import the macro in the page(s) you want to render the button(s) in -->
{% from 'components/button.macro.html' import button %}

<!-- use the macro -->

{ { button({ behavior: "action", type: "primary", text: "Do Something" }) } }

<!-- defaults to behavior: link -->
{ { button({ type: "primary", text: "Go somewhere", url: "/url/to/somewhere/" }) } }

----------------------------------------

TITLE: Git Commit References for ESLint Updates
DESCRIPTION: A collection of Git commit hashes and their associated changes, including new features, bug fixes, documentation updates and build changes for ESLint v4.0.0-rc.0.

LANGUAGE: markdown
CODE:
7ebd9d6f New: array-element-newline rule
0058b0f8 Update: add --fix to no-debugger
c4ac969c Update: fix parenthesized ternary expression indentation
95248336 Fix: Don't check object destructing in integer property
d0e9fd2d Fix: Config merge to correctly account for extends

----------------------------------------

TITLE: Fixing Nested Disable Directive Handling in ESLint
DESCRIPTION: This commit addresses a bug in ESLint where nested disable directives were not being handled correctly. The fix ensures proper processing of nested disable comments in JavaScript code.

LANGUAGE: JavaScript
CODE:
08656db Fix: Handle nested disable directive correctly (fixes #9318) (#9322) (Gyandeep Singh)

----------------------------------------

TITLE: Button Component Examples
DESCRIPTION: Shows examples of different button configurations including action buttons and link buttons with primary, secondary, and ghost styles.

LANGUAGE: html
CODE:
{{ button({ behavior: "action", type: "primary" }) }}
{{ button({ behavior: "action", text: "I perform an action", type: "secondary" }) }}
{{ button({ behavior: "action", text: "I perform an action", type: "ghost" }) }}

{{ button({ type: "primary", text: "I link somewhere", url: "#" }) }}
{{ button({ type: "secondary", text: "Secondary Button", url:"#" }) }}
{{ button({ type: "ghost", text: "Ghost Button", url:"#" }) }}

----------------------------------------

TITLE: ESLint v4.0.0-alpha.1 Release Metadata
DESCRIPTION: YAML frontmatter metadata for the release notes blog post, including title, teaser, image, tags, authors and categories.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v4.0.0-alpha.1 released
teaser: "We just pushed ESLint v4.0.0-alpha.1, which is a major release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release. This release also has some breaking changes, so please read the following closely."
image: release-notes-beta.png
tags:
  - release
  - major
authors:
  - not-an-aardvark
categories:
  - Release Notes
---

----------------------------------------

TITLE: Implementing Basic Card Component in HTML
DESCRIPTION: Example showing how to import and use the card macro component. The macro accepts parameters for title, teaser text, author name, category, reading time, date, and URL to create a blog post card.

LANGUAGE: html
CODE:
<!-- import the macro -->
{ % from 'components/card.macro.html' import card % }

<!-- use the macro -->
{ { card({
    title: "The post title",
    teaser: "This is a short description to demo what the card component will look like in the pattern library.",
    authorName: "Happy McPerson",
    category: "Sponsorships",
    readingTime: "5 min",
    date: "02-03-2020",
    url: "/component-library/card"
}) } }

----------------------------------------

TITLE: Ignoring Files in ESLint using package.json
DESCRIPTION: Shows how to ignore files in ESLint by setting the 'eslintIgnore' property in package.json to a list of globs, without needing a separate .eslintignore file.

LANGUAGE: json
CODE:
{
  "eslintIgnore": [
    "build/**/*.js",
    "dist/**/*.js"
  ]
}

----------------------------------------

TITLE: Installing ESLint v4.0.0-alpha.0 with specific version
DESCRIPTION: Command to install ESLint by explicitly specifying the alpha version number

LANGUAGE: bash
CODE:
npm i eslint@4.0.0-alpha.0 --save-dev

----------------------------------------

TITLE: Implementing Hero Component with Nunjucks Macro
DESCRIPTION: Example of importing and using the hero macro component to create a hero section with a title, supporting text, and a primary action button. The macro accepts configuration for title, supporting text, and button properties.

LANGUAGE: html
CODE:
<!-- import the macro -->
{% from 'components/hero.macro.html' import hero %}

<!-- use the macro -->
{ { hero({
        title: "Sponsors",
        supporting_text: "171 companies, organizations, and individuals are currently contributing $13137.84 each month to support ESLint's ongoing maintenance and development.",
        buttons: {
            primary: {
                primaryText: "Become a sponsor",
                primaryURL: "/donate/"
            }
        }
}) } }

----------------------------------------

TITLE: Including Post Share Widget Component in HTML
DESCRIPTION: This snippet includes a pre-defined post share widget component into the current HTML template. It uses a templating syntax (likely Liquid or similar) to include the 'post-share.html' file from the components directory.

LANGUAGE: HTML
CODE:
{% include 'components/post-share.html' %}

----------------------------------------

TITLE: Token Iterator Method - New Filter Approach
DESCRIPTION: Demonstrates the new simplified approach using the filter option to find a specific token type

LANGUAGE: javascript
CODE:
const token = sourceCode.getTokenAfter(node, { filter: token => token.type === "Keyword" });

----------------------------------------

TITLE: Fixing max-len rule in JavaScript
DESCRIPTION: Bug fix for the max-len rule to properly ignore trailing comments.

LANGUAGE: JavaScript
CODE:
c844c6f2ff314cfa8c6ca0e35a1ef58b7e297b79

----------------------------------------

TITLE: Including Version Switcher Component in ESLint Documentation
DESCRIPTION: This snippet includes a version switcher component using a Liquid template tag. The component is likely an HTML file that contains the necessary markup and functionality for switching between different versions of the ESLint documentation.

LANGUAGE: liquid
CODE:
{% include 'components/version-switcher.html' %}

----------------------------------------

TITLE: Token Iterator Method - Traditional Approach
DESCRIPTION: Shows the traditional way of finding a specific token type using a while loop

LANGUAGE: javascript
CODE:
let token = sourceCode.getTokenAfter(node);

while (token.type !== "Keyword") {
    token = sourceCode.getTokenAfter(token);
}

----------------------------------------

TITLE: Starting Localized ESLint Website Server
DESCRIPTION: Command to start a local instance of the ESLint website in a specific language using an environment variable. Example shows Spanish language configuration.

LANGUAGE: shell
CODE:
ESLINT_SITE_NAME=es npm start

----------------------------------------

TITLE: Deprecated Rules Table in Markdown
DESCRIPTION: Table showing deprecated ESLint rules and their replacements, formatted in Markdown syntax

LANGUAGE: markdown
CODE:
| **Deprecated Rule** | **Replaced By** |
|---------------------|------------------|
| [`no-native-reassign`](https://eslint.org/docs/rules/no-native-reassign) | [`no-global-assign'](https://eslint.org/docs/rules/no-global-assign) |
| [`no-negated-in-lhs`](https://eslint.org/docs/rules/no-negated-in-lhs) | [`no-unsafe-negation'](https://eslint.org/docs/rules/no-unsafe-negation) |
| [`no-spaced-func`](https://eslint.org/docs/rules/no-spaced-func) | [`func-call-spacing'](https://eslint.org/docs/rules/func-call-spacing) |

----------------------------------------

TITLE: Displaying Sponsor Information in HTML/Markdown
DESCRIPTION: HTML and Markdown mixed content that displays sponsor logos and links organized by sponsorship tiers. Includes image elements with company logos, links to sponsor websites, and basic styling for different sponsorship levels.

LANGUAGE: html
CODE:
<h3>Platinum Sponsors</h3>
<p><a href="https://automattic.com"><img src="https://images.opencollective.com/automattic/d0ef3e1/logo.png" alt="Automattic" height="128"></a> <a href="https://www.airbnb.com/"><img src="https://images.opencollective.com/airbnb/d327d66/logo.png" alt="Airbnb" height="128"></a></p>

----------------------------------------

TITLE: Creating a Blog Post File in Markdown
DESCRIPTION: Instructions for creating a new blog post file in the ESLint repository. This snippet shows the correct file naming convention and location for draft blog posts.

LANGUAGE: markdown
CODE:
1. Create a new file in the `src/content/drafts` folder. Please do not include a date in the filename. (`my-great-blog-post.md` not `2022-06-30-my-great-blog-post.md`) The ESLint team will publish your post at a later date. Please see the existing blog posts in `src/content/blog` to include the correct frontmatter in your post.

----------------------------------------

TITLE: Installing ESLint Transforms Tool via npm
DESCRIPTION: This command installs the eslint-transforms tool globally, which can be used to automatically convert old-style ESLint rules to the new format.

LANGUAGE: bash
CODE:
$ npm install -g eslint-transforms

----------------------------------------

TITLE: Adding debug flag to print file parsing time in ESLint
DESCRIPTION: This commit adds functionality to the '--debug' flag in ESLint, allowing it to print the time taken to parse each file. It references the GitHub issue number.

LANGUAGE: plaintext
CODE:
`115cae5` feat: `--debug` prints time it takes to parse a file ([#15609](https://github.com/eslint/eslint/issues/15609)) (Bartek Iwańczuk)

----------------------------------------

TITLE: Using ESLint Transforms to Convert Rules
DESCRIPTION: This command demonstrates how to use the eslint-transforms tool to convert old-style ESLint rules to the new format.

LANGUAGE: bash
CODE:
$ eslint-transforms new-rule-format path/to/rules/ rule.js

----------------------------------------

TITLE: Configuring no-restricted-syntax Rule with Custom Messages in ESLint
DESCRIPTION: Example configuration showing how to use the enhanced no-restricted-syntax rule to add custom error messages when matching specific AST patterns. This example prevents setTimeout calls with incorrect argument counts.

LANGUAGE: json
CODE:
{
    "rules": {
        "no-restricted-syntax": [
            "error",
            {
                "selector": "CallExpression[callee.name='setTimeout'][arguments.length!=2]",
                "message": "setTimeout must always be invoked with two arguments."
            }
        ]
    }
}

----------------------------------------

TITLE: Configuring EcmaScript 7 Support in ESLint
DESCRIPTION: ESLint v2.3.0 adds support for EcmaScript 7 features. Users can enable this by setting the 'ecmaVersion' to 7 under 'parserOptions' in their ESLint configuration.

LANGUAGE: JavaScript
CODE:
{
  "parserOptions": {
    "ecmaVersion": 7
  }
}

----------------------------------------

TITLE: Compromised Package Versions
DESCRIPTION: The specific versions of packages that were compromised in the attack. These versions contained malicious postinstall scripts that attempted to exfiltrate .npmrc authentication tokens.

LANGUAGE: text
CODE:
eslint-scope@3.7.2
eslint-config-eslint@5.0.2

----------------------------------------

TITLE: Installing ESLint v2.0.0 via npm
DESCRIPTION: Shell commands for installing ESLint v2.0.0 using npm package manager. Can use either latest tag or explicit version specification.

LANGUAGE: shell
CODE:
npm i eslint@latest --save-dev

LANGUAGE: shell
CODE:
npm i eslint@2.0.0 --save-dev

----------------------------------------

TITLE: Calculating ESLint Config
DESCRIPTION: Command to print the calculated configuration for a specific file using the --print-config flag

LANGUAGE: shell
CODE:
$ eslint --print-config myfile.js

----------------------------------------

TITLE: Preventing Process Leak in ESLint Website Generation
DESCRIPTION: This commit fixes a build issue that was causing a process leak when generating the ESLint website. It addresses issue #9217.

LANGUAGE: Markdown
CODE:
[bdec46d](https://github.com/eslint/eslint/commit/bdec46d) Build: avoid process leak when generating website ([#9217](https://github.com/eslint/eslint/issues/9217)) (Teddy Katz)

----------------------------------------

TITLE: Installing ESLint v2.0.0-beta.1 using npm
DESCRIPTION: Commands for installing the beta version of ESLint using npm, either with the next tag or specific version number.

LANGUAGE: shell
CODE:
npm i eslint@next --save-dev

LANGUAGE: shell
CODE:
npm i eslint@2.0.0-beta.1 --save-dev

----------------------------------------

TITLE: Merging HTML Formatter Files in JavaScript
DESCRIPTION: This chore merges all HTML formatter files into a single 'html.js' file. It's part of issue #14612.

LANGUAGE: JavaScript
CODE:
2c0868cbeadc9f42716fa1178ebdc6b4cee6d31e

----------------------------------------

TITLE: Installing ESLint v2.0.0-alpha-1 using specific version
DESCRIPTION: Command to install ESLint by explicitly specifying the alpha version number.

LANGUAGE: bash
CODE:
npm i eslint@2.0.0-alpha-1 --save-dev

----------------------------------------

TITLE: Installing Espree v3.0.0 Alpha using npm
DESCRIPTION: Command to install the prerelease version of Espree v3.0.0 using the @next tag. This is necessary as the @latest tag still points to the latest v2.x version.

LANGUAGE: bash
CODE:
$ npm install espree@next

----------------------------------------

TITLE: New Option for no-extra-parens Rule in ESLint
DESCRIPTION: The no-extra-parens rule has a new enforceForNewInMemberExpressions option. This allows configuring whether the rule should check for unnecessary parentheses around new expressions in member expressions.

LANGUAGE: JavaScript
CODE:
"no-extra-parens": ["error", "all", { "enforceForNewInMemberExpressions": true }]

----------------------------------------

TITLE: ESLint Rule Configuration
DESCRIPTION: Configuration examples for new and updated rules including no-arrow-condition, arrow-body-style, and comma-spacing with autofixing capability.

LANGUAGE: json
CODE:
{
  "rules": {
    "no-arrow-condition": "error",
    "arrow-body-style": "error",
    "comma-spacing": ["error", { "before": false, "after": true }]
  }
}

----------------------------------------

TITLE: Using ASTs with ESLint Node.js API - Creating SourceCode
DESCRIPTION: Example showing how to create a SourceCode object and pass it to ESLint's verify method. This allows passing pre-parsed ASTs to ESLint instead of raw text.

LANGUAGE: javascript
CODE:
var linter = require("eslint").linter,
    SourceCode = require("eslint").SourceCode;


var sourceCode = new SourceCode(someText, anAST),
    messages = linter.verify(sourceCode, config);

----------------------------------------

TITLE: AST-based PHP Linting Concept
DESCRIPTION: This conceptual snippet represents the PHP linting approach that inspired ESLint. It involves parsing code into an abstract syntax tree (AST) and then inspecting the AST for patterns to report.

LANGUAGE: php
CODE:
$ast = parse_php_code($code);
foreach ($ast as $node) {
  if (is_problematic($node)) {
    report_error($node);
  }
}

----------------------------------------

TITLE: Demonstrating Old ESLint Rule Format in JavaScript
DESCRIPTION: This snippet shows the traditional format for ESLint rules, including the rule creator function and options schema.

LANGUAGE: javascript
CODE:
// the rule creator function
module.exports = function(context) {
    // code
};

// the rule options schema
module.exports.schema = [];

----------------------------------------

TITLE: Retrieving SourceCode Object After Linting
DESCRIPTION: Demonstrates how to access the SourceCode object after linting, which provides access to both the AST and original source text.

LANGUAGE: javascript
CODE:
var messages = linter.verify("var foo = bar"),
    sourceCode = linter.getSourceCode();

sourceCode.ast;     // the AST
sourceCode.text;    // the original text

----------------------------------------

TITLE: Regular Expression-based JavaScript Linting
DESCRIPTION: This represents the initial linting approach at Box, using regular expressions to check for problematic patterns in JavaScript code. This method was found to be inadequate for complex checks.

LANGUAGE: javascript
CODE:
if (code.match(/XMLHttpRequest/)) {
  // Report error
}

----------------------------------------

TITLE: ESLint Config Initialization CLI Example
DESCRIPTION: Demonstrates the new --init command line flag that helps users set up ESLint configuration through an interactive prompt.

LANGUAGE: text
CODE:
$ eslint --init
? What style of indentation do you use? Spaces
? What quotes do you use for strings? Double
? What line endings do you use? Unix
? Do you require semicolons? Yes
? Are you using ECMAScript 6 features? Yes
? Where will your code run? Browser
? Do you use JSX? No
? What format do you want your config file to be in? YAML
Successfully created .eslintrc file in c:\Users\Nicholas\projects\personal\tmp

----------------------------------------

TITLE: Disabling ESLint Rules on a Single Line in JavaScript
DESCRIPTION: Demonstrates how to disable ESLint rules for a single line of code using inline comments. This feature allows disabling specific rules or all rules for individual lines.

LANGUAGE: JavaScript
CODE:
// disables just semi for this line
doSomething()  //eslint-disable-line semi

// disables all rules for this line
doSomething()  //eslint-disable-line

----------------------------------------

TITLE: Using XMLHttpRequest in JavaScript (Problematic Code)
DESCRIPTION: This snippet represents the problematic code that triggered the creation of ESLint. It uses the native XMLHttpRequest object instead of an in-house wrapper, causing issues in Internet Explorer 7 with certain security settings.

LANGUAGE: javascript
CODE:
var xhr = new XMLHttpRequest();

----------------------------------------

TITLE: ESLint Release Notes Frontmatter
DESCRIPTION: YAML frontmatter configuration for the ESLint 0.10.1 release notes blog post, specifying metadata like title, teaser, image, tags, authors and categories.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint 0.10.1 released
teaser: "We just pushed ESLint 0.10.1, which is a patch update to fix bugs discovered in 0.10.0."
image: release-notes-patch.png
tags:
  - release
  - bug fix
authors:
  - nzakas
categories:
  - Release Notes
---

----------------------------------------

TITLE: Linting Files Without Extensions in ESLint CLI
DESCRIPTION: Demonstrates how to use the ESLint CLI to lint files that don't have a file extension. Files can be passed directly on the command line.

LANGUAGE: bash
CODE:
eslint file-without-ext

----------------------------------------

TITLE: Adding Static Version Property to Linter API
DESCRIPTION: Enhancement that adds a static version property to the Linter API for consistency with CLIEngine.version property. Previously this property was only available on Linter instances.

LANGUAGE: JavaScript
CODE:
Linter.version = require('./package.json').version;

----------------------------------------

TITLE: Setting Node Environment in ESLint
DESCRIPTION: Demonstrates the new syntax for setting the Node.js environment in ESLint configuration comments. This replaces the previous JSHint and JSLint style comments.

LANGUAGE: JavaScript
CODE:
/*eslint-env node */

----------------------------------------

TITLE: Enabling Experimental Config Lookup - Shell Command
DESCRIPTION: Command to enable the experimental configuration file resolution feature in ESLint using the unstable_config_lookup_from_file feature flag. This allows ESLint to search for config files relative to the file being linted, similar to the eslintrc system.

LANGUAGE: shell
CODE:
npx eslint --flag unstable_config_lookup_from_file

----------------------------------------

TITLE: Importing and Using Profile Macros in HTML Templates
DESCRIPTION: This snippet demonstrates how to import and use the member, contributor, and post_author macros in HTML templates. It shows the required parameters for each macro and their usage syntax.

LANGUAGE: html
CODE:
<!-- first import the profile macro -->
{ % from 'components/profile.macro.html' import member, contributor, post_author % }

<!-- then use a macro -->
{ { member({
    name: "Name LastName",
    bio: "This is a member's biography. An example of a member is a team member on the team page.",
    twitter: "twitterUsername",
    github: "githubUsername"
}) } }

{ { contributor({
    name: "Contributor Name",
    handle: "myHandle"
}) } }

{ { post_author({
    name: "Nicholas Zakas",
    title: "Creator of a popular framework",
    handle: "nzakas",
    twitter: "twitterHandle",
    github: "githubHandle"
}) } }

----------------------------------------

TITLE: Including Language Switcher Component in HTML
DESCRIPTION: Includes a reusable language switcher component using template include syntax. This allows for consistent language switching functionality across multiple pages.

LANGUAGE: html
CODE:
{% include 'components/language-switcher.html' %}

----------------------------------------

TITLE: Financial Data Table - Expenses
DESCRIPTION: Markdown table detailing ESLint's expenses by category for 2023

LANGUAGE: markdown
CODE:
| **Category** | **Amount** |
|-----------|-------------|
| Maintenance and Development | -$66,910.37 |
| TSC Stipend (Tidelift) | -$30,077.84 |
| Triage and Support | -$10,307.78 |
| Technical Writing | -$8,155.00 |
| Contributor Pool | -$4,500.00 |
| Health Insurance | -$13,447.41 |
| Open Source Collective Fee | -$9,206.88 |
| Ecosystem/Dependencies | -$24,400.00 |
| Community Management | -$15,599.84 |
| Payment Processor Fee | -$2,854.51 |
| Google Workspace | -$187.35 |
| **Total** | **-$185,646.98** |

----------------------------------------

TITLE: Example of useless variable assignment detection
DESCRIPTION: Code example demonstrating the new no-useless-assignment rule that catches unused variable assignments

LANGUAGE: javascript
CODE:
let id = 1234;      // 1234 is never used
id = calculateId();

----------------------------------------

TITLE: Including Accordion Component in HTML
DESCRIPTION: Example of including the accordion component using an HTML include statement. The component pulls question and answer data from a global data file.

LANGUAGE: html
CODE:
{% include 'components/accordion.html' %}

----------------------------------------

TITLE: Including Social Icons Component
DESCRIPTION: Template directive to include a reusable social icons component from components directory

LANGUAGE: html
CODE:
{% include 'components/social-icons.html' %}

----------------------------------------

TITLE: Installing ESLint v9.0.0-beta.0 with specific version
DESCRIPTION: Command to install ESLint by explicitly specifying the beta version number

LANGUAGE: bash
CODE:
npm i eslint@9.0.0-beta.0 --save-dev

----------------------------------------

TITLE: Financial Data Table - Top Sponsors
DESCRIPTION: Markdown table listing ESLint's top sponsors who donated $1,000+ in 2023

LANGUAGE: markdown
CODE:
| **Sponsor** | **2023 Donation Total** |
|-------------|-------------------------|
| Chrome Frameworks Fund | $24,000.00 |
| Automattic | $24,000.00 |
| Salesforce | $12,000.00 |
| Airbnb | $12,000.00 |
| Indeed | $10,000.00 |

----------------------------------------

TITLE: Installing ESLint v8.0.0-rc.0 using npm with specific version
DESCRIPTION: Command to install ESLint v8.0.0-rc.0 by specifying the exact version number. This is an alternative method to install the prerelease version.

LANGUAGE: bash
CODE:
npm i eslint@8.0.0-rc.0 --save-dev

----------------------------------------

TITLE: Expenses Table in Markdown
DESCRIPTION: Markdown table detailing ESLint's expenses for 2024 compared to 2023, broken down by category with amounts and percentage changes.

LANGUAGE: markdown-table
CODE:
| **Category**                | **2024 Amount**  | **2023 Amount** | **Gain/Loss %** |
|-----------------------------|------------------|-----------------|------------------|
| Maintenance and Development | $147,273.43      | $66,910.37      | +120.11%        |
| TSC Stipend (Tidelift)      | $18,449.16       | $30,077.84      | -38.66%         |
| Triage and Support          | $3,985.50        | $10,307.78      | -61.34%         |
| Technical Writing           | $0.00            | $8,155.00       | -100.00%        |
| Contributor Pool            | $14,100.30       | $4,500.00       | +213.34%        |
| Payment Processor Fees      | $3,808.97        | $2,854.51       | +33.44%         |
| Health Insurance            | $12,698.40       | $13,447.41      | -5.57%          |
| Open Source Collective Fee  | $11,696.69       | $9,206.88       | +27.04%         |
| Ecosystem/Dependencies      | $16,100.00       | $24,400.00      | -34.02%         |
| eslint-community Management | $9,825.03        | $15,599.84      | -37.02%         |
| Google Workspace            | $182.06          | $187.35         | -2.82%          |
| Code Explorer               | $7,200.00        | $0.00           | +100%           |
| Config Inspector            | $2,350.00        | $0.00           | +100%           |
| **Total**                   | **$247,669.54**  | **$185,646.98** | **+33.41%**     |

----------------------------------------

TITLE: Markdown Release Notes Structure
DESCRIPTION: YAML frontmatter and markdown structure defining the release notes post metadata and content organization

LANGUAGE: markdown
CODE:
---
layout: post
title: ESLint v8.1.0 released
teaser: "We just pushed ESLint v8.1.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes.png
tags:
  - release
  - minor
authors:
  - mdjermanovic
categories:
  - Release Notes
---

----------------------------------------

TITLE: Installing ESLint v5.0.0-alpha.2 with npm next tag
DESCRIPTION: Command to install the pre-release version of ESLint using the next tag with npm

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

----------------------------------------

TITLE: ESLint Bug Fix Commit Reference
DESCRIPTION: Git commit reference fixing an issue where the sort-keys rule throws an error when encountering SpreadElement syntax.

LANGUAGE: markdown
CODE:
[`1d6e639`](https://github.com/eslint/eslint/commit/1d6e63930073e79e52890f552cc6e9a0646b7fb4)

----------------------------------------

TITLE: Markdown Release Notes Structure
DESCRIPTION: Jekyll-style markdown file defining the release notes post structure with front matter and content sections

LANGUAGE: markdown
CODE:
---
layout: post
title: ESLint v5.11.0 released
teaser: "We just pushed ESLint v5.11.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes.png
tags:
  - release
  - minor
authors:
  - not-an-aardvark
categories:
  - Release Notes
---

----------------------------------------

TITLE: Installing ESLint v7.0.0 Preview Release using npm
DESCRIPTION: Shows the npm command to install the preview release of ESLint v7.0.0 using the 'next' tag.

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

----------------------------------------

TITLE: Correcting Typo in ESLint Documentation
DESCRIPTION: This commit corrects a typo in the documentation for the 'generator-star-spacing' rule. It addresses issue #9205.

LANGUAGE: Markdown
CODE:
[f9b7544](https://github.com/eslint/eslint/commit/f9b7544) Docs: Correct a typo in [generator-star-spacing](/docs/rules/generator-star-spacing) documentation ([#9205](https://github.com/eslint/eslint/issues/9205)) (Ethan Rutherford)

----------------------------------------

TITLE: Installing ESLint v6.0.0-alpha.2 using npm
DESCRIPTION: Commands to install the prerelease version of ESLint v6.0.0-alpha.2 using npm. Users must specify either the 'next' tag or the exact version number.

LANGUAGE: Shell
CODE:
npm i eslint@next --save-dev

LANGUAGE: Shell
CODE:
npm i eslint@6.0.0-alpha.2 --save-dev

----------------------------------------

TITLE: Release Metadata in YAML Front Matter
DESCRIPTION: YAML front matter defining the blog post metadata including title, teaser, image, authors, categories and tags for the ESLint v8.8.0 release announcement.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v8.8.0 released
teaser: "We just pushed ESLint v8.8.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes-minor.png
authors:
  - mdjermanovic
categories:
  - Release Notes
tags:
  - Release
---

----------------------------------------

TITLE: Exporting Metadata in ESLint Parsers and Plugins
DESCRIPTION: Parsers and plugins can now export a meta object with name and version properties for easier debugging and caching.

LANGUAGE: JavaScript
CODE:
module.exports = {
  meta: {
    name: "my-parser",
    version: "1.0.0"
  },
  // ... other parser/plugin code
}

----------------------------------------

TITLE: ESLint v8.54.0 Release Notes Frontmatter
DESCRIPTION: YAML frontmatter configuration for the release notes blog post, specifying metadata like title, teaser, image, authors, categories and tags.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v8.54.0 released
teaser: "We just pushed ESLint v8.54.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes-minor.png
authors:
  - mdjermanovic
categories:
  - Release Notes
tags:
  - Release
---

----------------------------------------

TITLE: Installing ESLint v6.0.0-alpha.1 with npm
DESCRIPTION: Commands to install the prerelease version of ESLint v6.0.0-alpha.1 using npm. Specifies the 'next' tag or exact version.

LANGUAGE: Shell
CODE:
npm i eslint@next --save-dev

LANGUAGE: Shell
CODE:
npm i eslint@6.0.0-alpha.1 --save-dev

----------------------------------------

TITLE: ESLint v8.41.0 Release Notes Frontmatter
DESCRIPTION: YAML frontmatter defining metadata for the release notes blog post, including title, teaser, authors, categories and tags.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v8.41.0 released
teaser: "We just pushed ESLint v8.41.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes-minor.png
authors:
  - mdjermanovic
categories:
  - Release Notes
tags:
  - Release
---

----------------------------------------

TITLE: RegExp Constructor Pattern Fix
DESCRIPTION: Bug fix for require-unicode-regexp rule to not report on dynamic RegExp constructor calls with spread arguments.

LANGUAGE: javascript
CODE:
RegExp(...args)

----------------------------------------

TITLE: Installing ESLint Release Candidate via npm
DESCRIPTION: Commands to install ESLint 1.0.0-rc-3 pre-release version using npm package manager.

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

LANGUAGE: bash
CODE:
npm i eslint@1.0.0-rc-3 --save-dev

----------------------------------------

TITLE: Installing ESLint RC2 via NPM
DESCRIPTION: npm commands for installing the release candidate version of ESLint, using either the next tag or specific version number

LANGUAGE: shell
CODE:
npm i eslint@next --save-dev

LANGUAGE: shell
CODE:
npm i eslint@1.0.0-rc-2 --save-dev

----------------------------------------

TITLE: Installing Espree Alpha Release with NPM
DESCRIPTION: Command to install the prerelease version of Espree v3.0.0 using the @next tag with npm package manager.

LANGUAGE: bash
CODE:
$ npm install espree@next

----------------------------------------

TITLE: Referencing Git Commit in Markdown
DESCRIPTION: This snippet demonstrates how to reference a Git commit hash and link to a GitHub issue in Markdown format. It's used to document a specific bug fix in the ESLint release notes.

LANGUAGE: markdown
CODE:
[`a26b402`](https://github.com/eslint/eslint/commit/a26b40279f283853717236b44602b27b57f0b627) fix: use @eslint/create-config latest ([#18373](https://github.com/eslint/eslint/issues/18373)) (唯然)

----------------------------------------

TITLE: Demonstrating New Codeframe Formatter in ESLint v3.9.0
DESCRIPTION: Shows the output of the new codeframe formatter, which provides a more detailed and visually appealing error and warning display. It includes line numbers, code context, and error/warning indicators.

LANGUAGE: plaintext
CODE:
error: Missing semicolon (semi) at file.js:1:13:
> 1 | var a = true
    |             ^
  2 |
  3 |


warning: There should be no space after '{' (object-curly-spacing) at file2.js:1:9:
> 1 | var b = { c: true};
    |         ^
  2 |
  3 |


1 error and 1 warning found.

----------------------------------------

TITLE: Installing ESLint v8.0.0-beta.1 using npm
DESCRIPTION: Commands to install the pre-release version of ESLint v8.0.0-beta.1 using npm. The first command uses the 'next' tag, while the second specifies the version directly.

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

LANGUAGE: bash
CODE:
npm i eslint@8.0.0-beta.1 --save-dev

----------------------------------------

TITLE: Installing ESLint v8.0.0-beta.0 with npm
DESCRIPTION: Commands to install the beta version of ESLint v8.0.0 using npm. The first command installs the latest beta version, while the second specifies the exact version.

LANGUAGE: Shell
CODE:
npm i eslint@next --save-dev

LANGUAGE: Shell
CODE:
npm i eslint@8.0.0-beta.0 --save-dev

----------------------------------------

TITLE: Installing ESLint v2.0.0-rc.0 with npm
DESCRIPTION: Installation commands for the ESLint v2.0.0-rc.0 pre-release version using npm.

LANGUAGE: Shell
CODE:
npm i eslint@next --save-dev

LANGUAGE: Shell
CODE:
npm i eslint@2.0.0-rc.0 --save-dev

----------------------------------------

TITLE: Installing ESLint v9.0.0-alpha.1 with npm next tag
DESCRIPTION: Command to install the pre-release version of ESLint using the next tag

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

----------------------------------------

TITLE: Installing ESLint v7.0.0-alpha.2 with specific version
DESCRIPTION: Command to install ESLint by explicitly specifying the alpha version number.

LANGUAGE: bash
CODE:
npm i eslint@7.0.0-alpha.2 --save-dev

----------------------------------------

TITLE: Specifying npm-installed formatters in ESLint
DESCRIPTION: Demonstrates how to use npm-installed formatters in ESLint, with or without the 'eslint-formatter-' prefix. This new feature allows for more flexible formatter specification.

LANGUAGE: bash
CODE:
npm install eslint-formatter-pretty

eslint -f pretty file.js

// equivalent:
eslint -f eslint-formatter-pretty file.js

----------------------------------------

TITLE: Installing Specific ESLint Beta Version
DESCRIPTION: Command to install ESLint version 9.0.0-beta.1 directly using npm.

LANGUAGE: bash
CODE:
npm i eslint@9.0.0-beta.1 --save-dev

----------------------------------------

TITLE: Using New SourceCode Methods in ESLint Rules
DESCRIPTION: New methods added to SourceCode class: getDeclaredVariables(node) and getAncestors(node). These replace the deprecated context.getDeclaredVariables and context.getAncestors() methods as part of implementing language plugins.

LANGUAGE: javascript
CODE:
SourceCode#getDeclaredVariables(node)
SourceCode#getAncestors(node)

----------------------------------------

TITLE: Rule Metadata Configuration for Fixable Rules in ESLint v8.0.0
DESCRIPTION: Required configuration for rules that provide fixes, specifying the type of fix (code or whitespace) in the meta.fixable property.

LANGUAGE: javascript
CODE:
{
  meta: {
    fixable: "code" // or "whitespace"
  }
}

----------------------------------------

TITLE: Configuring ESLint for ES2017 Support
DESCRIPTION: Update the ESLint configuration in .eslintrc.* to enable ES2017 syntax parsing. This allows ESLint to properly analyze code using ES2017 features.

LANGUAGE: json
CODE:
{
    "parserOptions": {
        "ecmaVersion": 2017,
        "sourceType": "module"
    }
}

----------------------------------------

TITLE: Updating ESLint Dependencies in package.json
DESCRIPTION: This snippet shows a chore commit that updates the @eslint/js package to version 8.50.0 in the project's package.json file.

LANGUAGE: bash
CODE:
chore: upgrade @eslint/js@8.50.0 (#17599)

----------------------------------------

TITLE: Configuring Per-Rule Performance Metrics in ESLint (Bash)
DESCRIPTION: Demonstrates how to use the TIMING environment variable to configure the number of rules displayed in per-rule performance metrics when running ESLint. The variable can be set to a specific number or 'all' to show all rules.

LANGUAGE: bash
CODE:
$ TIMING=50 eslint lib

$ TIMING=100 eslint lib

$ TIMING=all eslint lib

----------------------------------------

TITLE: Release Notes Frontmatter in YAML
DESCRIPTION: YAML frontmatter metadata for the ESLint v8.22.0 release notes blog post, containing title, teaser, image, authors, categories and tags.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v8.22.0 released
teaser: "We just pushed ESLint v8.22.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes-minor.png
authors:
  - btmills
categories:
  - Release Notes
tags:
  - Release
---

----------------------------------------

TITLE: Release Notes Frontmatter in YAML
DESCRIPTION: YAML frontmatter configuration for the release notes blog post, specifying metadata like title, authors, categories and tags.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v8.32.0 released
teaser: "We just pushed ESLint v8.32.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes-minor.png
authors:
  - btmills
categories:
  - Release Notes
tags:
  - Release
---

----------------------------------------

TITLE: Linking to New ESLint Rule in Markdown
DESCRIPTION: Demonstrates how to create a hyperlink to the documentation for the new 'no-unsafe-optional-chaining' rule in Markdown format.

LANGUAGE: Markdown
CODE:
[no-unsafe-optional-chaining](/docs/rules/no-unsafe-optional-chaining)

----------------------------------------

TITLE: Release Notes Header - YAML Frontmatter
DESCRIPTION: YAML frontmatter metadata for the release notes blog post, including title, teaser, image, tags, authors and categories

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v4.9.0 released
teaser: "We just pushed ESLint v4.9.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes.png
tags:
  - release
  - minor
authors:
  - ilyavolodin
categories:
  - Release Notes
---

----------------------------------------

TITLE: ESLint Release Notes Configuration in YAML
DESCRIPTION: YAML frontmatter configuration for the ESLint v5.0.1 release notes blog post, specifying metadata like title, teaser, image, tags, authors and categories.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v5.0.1 released
teaser: "We just pushed ESLint v5.0.1, which is a patch release upgrade of ESLint. This release fixes several bugs found in the previous release."
image: release-notes-patch.png
tags:
  - release
  - patch
authors:
  - kaicataldo
categories:
  - Release Notes
---

----------------------------------------

TITLE: Configuring reportUnusedDisableDirectives in ESLint Flat Config
DESCRIPTION: Example of setting the reportUnusedDisableDirectives option to a severity value in an ESLint flat config file.

LANGUAGE: javascript
CODE:
// eslint.config.js
export default {
  linterOptions: {
    reportUnusedDisableDirectives: "warn" // or 1
  }
}

----------------------------------------

TITLE: Jekyll Front Matter Configuration for ESLint Release Post
DESCRIPTION: YAML front matter configuration for the ESLint v4.19.1 release blog post, specifying metadata like title, teaser, image, tags, authors and categories.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v4.19.1 released
teaser: "We just pushed ESLint v4.19.1, which is a patch release upgrade of ESLint. This release fixes several bugs found in the previous release."
image: release-notes-patch.png
tags:
  - release
  - patch
authors:
  - kaicataldo
categories:
  - Release Notes
---

----------------------------------------

TITLE: ESLint v4.18.2 Release Information in YAML Frontmatter
DESCRIPTION: YAML frontmatter metadata for the release notes post, including title, teaser, image, tags, authors and categories.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v4.18.2 released
teaser: "We just pushed ESLint v4.18.2, which is a patch release upgrade of ESLint. This release fixes several bugs found in the previous release."
image: release-notes-patch.png
tags:
  - release
  - patch
authors:
  - kaicataldo
categories:
  - Release Notes
---

----------------------------------------

TITLE: ESLint Release Notes Format in YAML Front Matter
DESCRIPTION: YAML front matter metadata for the ESLint v3.8.1 release notes blog post, including title, teaser, image, tags, authors and categories.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v3.8.1 released
teaser: "We just pushed ESLint v3.8.1, which is a patch release upgrade of ESLint. This release  fixes several bugs found in the previous release."
image: release-notes-patch.png
tags:
  - release
  - patch
authors:
  - kaicataldo
categories:
  - Release Notes
---

----------------------------------------

TITLE: Git Commit References in ESLint Release Notes
DESCRIPTION: Collection of git commit hashes and associated changes representing the changes made in ESLint v3.0.0. These include breaking changes, enhancements, bug fixes, documentation updates and general maintenance changes.

LANGUAGE: markdown
CODE:
dc5b78b Breaking: Add `require-yield` rule to `eslint:recommended`
e0d4b19 Breaking: Error thrown/printed if no config found
fa05119 Breaking: Update eslint:recommended
58542e4 Breaking: Drop support for node < 4
f50657e Breaking: use default for complexity in eslint:recommended

----------------------------------------

TITLE: Release Notes Frontmatter
DESCRIPTION: YAML frontmatter configuration for the release notes blog post specifying metadata like title, authors, and categories

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v8.46.0 released
teaser: "We just pushed ESLint v8.46.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes-minor.png
authors:
  - nzakas
categories:
  - Release Notes
tags:
  - Release
---

----------------------------------------

TITLE: Starting Local ESLint Website Server
DESCRIPTION: Command to start a local instance of the ESLint website for development purposes. Requires Node.js and npm installation.

LANGUAGE: shell
CODE:
npm start

----------------------------------------

TITLE: YAML Frontmatter Configuration
DESCRIPTION: YAML configuration block defining metadata for the release notes post including title, teaser, image, tags, authors and categories.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v1.7.3 released
teaser: "We just pushed ESLint v1.7.3, which is a patch release upgrade of ESLint. This release  and fixes several bugs found in the previous release."
image: release-notes-patch.png
tags:
  - release
  - patch
authors:
  - nzakas
categories:
  - Release Notes
---

----------------------------------------

TITLE: Git Commit References in Markdown
DESCRIPTION: The content contains git commit references and associated links to ESLint rules and issues in markdown format. The commit references are formatted with links to GitHub repositories.

LANGUAGE: markdown
CODE:
[ebb530d](https://github.com/eslint/eslint/commit/ebb530d)
[bb6e60a](https://github.com/eslint/eslint/commit/bb6e60a)
[d80b9d0](https://github.com/eslint/eslint/commit/d80b9d0)

----------------------------------------

TITLE: Release Notes Frontmatter in YAML
DESCRIPTION: YAML frontmatter defining metadata for the release notes blog post including title, teaser, image, authors, categories and tags.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v9.9.1 released
teaser: "We just pushed ESLint v9.9.1, which is a patch release upgrade of ESLint. This release fixes several bugs found in the previous release."
image: release-notes-patch.png
authors:
  - fasttime
categories:
  - Release Notes
tags:
  - Release
---

----------------------------------------

TITLE: Demonstrating Multi-line eslint-disable-next-line Comments in JavaScript
DESCRIPTION: Example showing the new feature that allows eslint-disable-next-line comments to wrap across multiple lines with descriptions. This improves readability for longer rule descriptions and explanations.

LANGUAGE: javascript
CODE:
/* eslint-disable-next-line no-console --
 * Here's a very long description about why this configuration is necessary
 * along with some additional information.
 */
console.log('hello');

----------------------------------------

TITLE: Configuring New Parser Option in ESLint (JSON)
DESCRIPTION: Demonstrates how to enable the new 'allowReserved' parser option for ECMAScript 3 in ESLint configuration. This option allows reserved words to be used as identifiers when set to true.

LANGUAGE: json
CODE:
{
    "parserOptions": {
        "ecmaVersion": 3,
        "allowReserved": true
    }
}

----------------------------------------

TITLE: Installing @eslint/compat Package
DESCRIPTION: Commands to install the @eslint/compat package using various package managers.

LANGUAGE: shell
CODE:
npm install @eslint/compat -D
# or
yarn add @eslint/compat -D
# or
pnpm install @eslint/compat -D
# or
bun install @eslint/compat -D

----------------------------------------

TITLE: ESLint v9.20.1 Release Notes Frontmatter
DESCRIPTION: YAML frontmatter defining metadata for the release notes blog post, including title, teaser, image, authors, categories and tags.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v9.20.1 released
teaser: "We just pushed ESLint v9.20.1, which is a patch release upgrade of ESLint. This release fixes several bugs found in the previous release."
image: release-notes-patch.png
authors:
  - nzakas
categories:
  - Release Notes
tags:
  - Release
---

----------------------------------------

TITLE: Fixing Global Addition in ESLint Environment Configuration
DESCRIPTION: This commit fixes a bug where globals were being added when an environment was used with 'false'. It addresses issue #9202.

LANGUAGE: Markdown
CODE:
[cb74b87](https://github.com/eslint/eslint/commit/cb74b87) Fix: avoid adding globals when an env is used with `false` (fixes [#9202](https://github.com/eslint/eslint/issues/9202)) ([#9203](https://github.com/eslint/eslint/issues/9203)) (Teddy Katz)

----------------------------------------

TITLE: Adding allowLineSeparatedGroups Option to sort-keys Rule
DESCRIPTION: New option added to the sort-keys rule allowing for line-separated groups of keys, providing more flexibility in key ordering and formatting.

LANGUAGE: JavaScript
CODE:
feat: add new allowLineSeparatedGroups option to the sort-keys rule (#16138)

----------------------------------------

TITLE: Expression Using Programming Operators
DESCRIPTION: A creative use of programming syntax to express the idea of reducing talk and increasing code writing. Uses decrement (--) and increment (++) operators in a pseudo-code style.

LANGUAGE: text
CODE:
Talk--; Code++;

----------------------------------------

TITLE: Calculating Severity in ESLint Formatters (Pre-0.7.1)
DESCRIPTION: Demonstrates how to calculate the severity of a rule in ESLint formatters before version 0.7.1. This method uses the config object passed to formatters.

LANGUAGE: javascript
CODE:
var severity = config.rules[message.ruleId][0] || config.rules[message.ruleId];

----------------------------------------

TITLE: Calculating Severity in ESLint Formatters (Backward Compatible)
DESCRIPTION: Illustrates a backward-compatible method for calculating rule severity in ESLint formatters. This approach works with both pre-0.7.1 and 0.7.1+ versions of ESLint.

LANGUAGE: javascript
CODE:
var severity = "severity" in message ? message.severity :
        (config.rules[message.ruleId][0] || config.rules[message.ruleId]);

----------------------------------------

TITLE: Fixing ESLint --init crash on upgrade/downgrade question
DESCRIPTION: Bug fix for the ESLint initialization process, addressing a crash that occurred when asking about upgrading or downgrading ESLint.

LANGUAGE: JavaScript
CODE:
179a910b32e853bc12a9dd71f7c10e762cbeac44

----------------------------------------

TITLE: Updating ESLint Tester Import
DESCRIPTION: Code example showing how to update imports after eslint-tester deprecation by importing from main eslint module instead.

LANGUAGE: javascript
CODE:
var ESLintTester = require("eslint").ESLintTester;

----------------------------------------

TITLE: Installing ESLint v7.0.0-rc.0 using npm next tag
DESCRIPTION: Command to install the prerelease version of ESLint using the next distribution tag

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

----------------------------------------

TITLE: Installing ESLint v2.0.0-alpha-1 using npm next tag
DESCRIPTION: Command to install the pre-release version of ESLint using npm's next tag. This is required since it's a pre-release version that won't be installed automatically.

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

----------------------------------------

TITLE: Installing ESLint v9.0.0-alpha.2 using npm
DESCRIPTION: Commands to install the pre-release version of ESLint v9.0.0-alpha.2 using npm. Two options are provided: installing with the 'next' tag or specifying the version directly.

LANGUAGE: bash
CODE:
npm i eslint@next --save-dev

LANGUAGE: bash
CODE:
npm i eslint@9.0.0-alpha.2 --save-dev

----------------------------------------

TITLE: Installing ESLint v2.0.0-rc.1
DESCRIPTION: Commands to install the pre-release version of ESLint 2.0.0 using npm

LANGUAGE: shell
CODE:
npm i eslint@next --save-dev

LANGUAGE: shell
CODE:
npm i eslint@2.0.0-rc.1 --save-dev

----------------------------------------

TITLE: Installing ESLint 1.0.0-rc-1 with npm
DESCRIPTION: Commands to install the pre-release version of ESLint 1.0.0-rc-1 using npm. The 'next' tag or specific version number must be specified.

LANGUAGE: Shell
CODE:
npm i eslint@next --save-dev

LANGUAGE: Shell
CODE:
npm i eslint@1.0.0-rc-1 --save-dev

----------------------------------------

TITLE: Running ESLint with Compact Formatter
DESCRIPTION: Shows how to explicitly specify the compact formatter when running ESLint, ensuring compatibility with both older and newer versions of ESLint.

LANGUAGE: bash
CODE:
eslint -f compact foo.js

----------------------------------------

TITLE: Displaying Output of ESLint Compact Formatter
DESCRIPTION: Shows the output format of the 'compact' formatter, which was the default formatter in ESLint before the breaking change.

LANGUAGE: plaintext
CODE:
foo.js: line 5, col 10, Error - Unexpected foo. (foo)
foo.js: line 6, col 11, Warning - Unexpected bar. (bar)\n\n2 problems

----------------------------------------

TITLE: Including Theme Switcher Component in HTML
DESCRIPTION: Template code to include a theme switcher component from the components directory using Jekyll/Liquid include syntax.

LANGUAGE: html
CODE:
{% include 'components/theme-switcher.html' %}

----------------------------------------

TITLE: Including Testimonials Slider Component in HTML
DESCRIPTION: This snippet demonstrates how to include a pre-defined testimonials slider component in an HTML template using Jekyll's include directive.

LANGUAGE: html
CODE:
{% include 'components/testimonials-slider.html' %}

----------------------------------------

TITLE: Rendering Donation Item using Macro in HTML
DESCRIPTION: This snippet demonstrates how to import and use the donationItem() macro to render a donation item. The macro takes parameters for image, name, donation amount, and date.

LANGUAGE: html
CODE:
<!-- import the macro -->
{%- from 'components/donation.macro.html' import donationItem %}

<!-- use the macro -->
{{ donationItem({
    image: "https://images.opencollective.com/chrome/dc55bd4/logo.png",
    name: "Google Chrome",
    amount: 100000,
    date: "2020-10-10"
}) }}

----------------------------------------

TITLE: Git Commit: Fix comma-dangle Schema
DESCRIPTION: Git commit reverting changes to comma-dangle rule schema that disallowed multiple options

LANGUAGE: plaintext
CODE:
4e0b672eb4bf39f7502a550b08b25a56a196f19f

----------------------------------------

TITLE: Git Commit: Update no-underscore-dangle Rule
DESCRIPTION: Git commit adding allowFunctionParams option to no-underscore-dangle rule

LANGUAGE: plaintext
CODE:
b46f3ee0dae4add9df99cae940b641ad8de58b9e

----------------------------------------

TITLE: Pinning @babel/code-frame Dependency in ESLint (JavaScript)
DESCRIPTION: Updates the package.json to pin the @babel/code-frame dependency to version 7.12.11.

LANGUAGE: JavaScript
CODE:
7aeb127 Upgrade: pin @babel/code-frame@7.12.11 (#14067) (Milos Djermanovic)

----------------------------------------

TITLE: Fixing ESLint Crash with esquery when using JSX (JavaScript)
DESCRIPTION: Resolves an issue where ESLint would crash when using esquery with JSX syntax.

LANGUAGE: JavaScript
CODE:
9d6063a Fix: Crash with esquery when using JSX (fixes #13639) (#14072) (Yosuke Ota)

----------------------------------------

TITLE: Markdown Release Notes Structure
DESCRIPTION: Structured markdown document containing release notes for ESLint v8.36.0, organized into sections for highlights, features, bug fixes, documentation, and chores.

LANGUAGE: markdown
CODE:
---
layout: post
title: ESLint v8.36.0 released
teaser: "We just pushed ESLint v8.36.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes-minor.png
authors:
  - mdjermanovic
categories:
  - Release Notes
tags:
  - Release
---

----------------------------------------

TITLE: Markdown Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the blog post, specifying metadata like title, teaser, tags, authors, and categories.

LANGUAGE: yaml
CODE:
---
layout: post
title: "Deprecation of formatting rules"
teaser: "The next minor release of ESLint will deprecate core formatting rules. We recommend you use a source code formatter instead."
tags:
  - Rules
  - Formatting
authors:
  - nzakas
categories:
  - Announcements
---

----------------------------------------

TITLE: ESLint Release Notes YAML Frontmatter
DESCRIPTION: YAML frontmatter metadata for the ESLint v5.5.0 release notes blog post, including title, teaser, image, tags, authors and categories.

LANGUAGE: yaml
CODE:
---
layout: post
title: ESLint v5.5.0 released
teaser: "We just pushed ESLint v5.5.0, which is a minor release upgrade of ESLint. This release adds some new features and fixes several bugs found in the previous release."
image: release-notes.png
tags:
  - release
  - minor
authors:
  - kaicataldo
categories:
  - Release Notes
---

----------------------------------------

TITLE: Referencing Git Commit in Markdown
DESCRIPTION: Shows how to reference a Git commit hash with a hyperlink to the commit on GitHub in Markdown format.

LANGUAGE: Markdown
CODE:
[`683ad00`](https://github.com/eslint/eslint/commit/683ad00c41e1ae4d889deff82b2a94318e8c2129)

----------------------------------------

TITLE: Correcting Typo in no-magic-numbers Rule Documentation for ESLint
DESCRIPTION: This commit fixes a typographical error in the documentation for the no-magic-numbers rule in ESLint.

LANGUAGE: Markdown
CODE:
[`0d3d7d9`](https://github.com/eslint/eslint/commit/0d3d7d9cdd83a7f0e035c95f716a91b9ecc4868b) Docs: fix typo in [no-magic-numbers](/docs/rules/no-magic-numbers) ([#12345](https://github.com/eslint/eslint/issues/12345)) (Josiah Rooney)

----------------------------------------

TITLE: Resolving ESLint Documentation Generation Issue
DESCRIPTION: This commit fixes an issue with the documentation generation process. It addresses issue #9199.

LANGUAGE: Markdown
CODE:
[e5c5e83](https://github.com/eslint/eslint/commit/e5c5e83) Build: Fixing issue with docs generation (Fixes [#9199](https://github.com/eslint/eslint/issues/9199)) ([#9200](https://github.com/eslint/eslint/issues/9200)) (Ilya Volodin)

----------------------------------------

TITLE: ESLint Bug Fix Commit Reference
DESCRIPTION: Git commit reference showing the fix that replaces Infinity with Number.MAX_SAFE_INTEGER to address JSON serialization issues in ESLint configurations.

LANGUAGE: markdown
CODE:
de77c11e7515f2097ff355ddc0d7b6db9c83c892

----------------------------------------

TITLE: Implementing SourceCode#applyInlineConfig() in ESLint
DESCRIPTION: This feature commit implements the SourceCode#applyInlineConfig() method in ESLint, which is likely used for applying inline configurations to source code.

LANGUAGE: JavaScript
CODE:
feat: Implement SourceCode#applyInlineConfig() (#17351)