TITLE: Using the new modal.concurrent decorator
DESCRIPTION: The @modal.concurrent decorator replaces the beta allow_concurrent_inputs parameter for enabling input concurrency. It introduces a distinction between max_inputs and target_inputs.

LANGUAGE: python
CODE:
@modal.concurrent
def my_function():
    # Function implementation

----------------------------------------

TITLE: Installing Modal Python Package
DESCRIPTION: Command to install the Modal Python library using pip package manager. Requires Python versions 3.9 through 3.13.

LANGUAGE: bash
CODE:
pip install modal

----------------------------------------

TITLE: Setting Up Modal Account
DESCRIPTION: Command to run the Modal setup process for creating a new account or linking an existing one through the command line interface.

LANGUAGE: bash
CODE:
python3 -m modal setup

----------------------------------------

TITLE: Using the new modal.fastapi_endpoint decorator
DESCRIPTION: The @modal.fastapi_endpoint decorator replaces the deprecated @modal.web_endpoint decorator. It has identical semantics.

LANGUAGE: python
CODE:
@modal.fastapi_endpoint
def my_endpoint():
    # Endpoint implementation

----------------------------------------

TITLE: Using the new region parameter for function execution
DESCRIPTION: The region parameter in modal.App.function and modal.App.cls decorators allows selection of specific regions for function execution on some plan types.

LANGUAGE: python
CODE:
@app.function(region="us-east-1")
def my_function():
    # Function implementation

----------------------------------------

TITLE: Using the new modal.App class
DESCRIPTION: modal.App replaces modal.Stub, with 'app' terminology encouraged over 'stub' to reduce confusion.

LANGUAGE: python
CODE:
import modal

app = modal.App()

@app.function()
def my_function():
    # Function implementation

----------------------------------------

TITLE: Specifying Python Package Dependencies for Modal Project
DESCRIPTION: This snippet lists all the required Python packages and their versions for the Modal project's development environment. It includes packages for code quality (black, ruff), testing (pytest), type checking (mypy), and various utilities. Some packages have version-specific requirements based on the Python version being used.

LANGUAGE: plaintext
CODE:
black==23.11.0
flaky~=3.7
grpcio-tools==1.48.0;python_version<'3.11'  # TODO: remove when we drop client support for Protobuf 3.19
grpcio-tools==1.59.2;python_version>='3.11' and python_version<'3.13'
grpcio-tools==1.66.2;python_version>='3.13'
grpclib==0.4.7
httpx~=0.23.0
invoke~=2.2
mypy~=1.11.2
mypy-protobuf~=3.3.0  # TODO: can't use mypy-protobuf>=3.4 because of protobuf==3.19 support
pre-commit>=2.21,<4
pytest~=8.0.0
pytest-asyncio @ git+https://github.com/modal-labs/pytest-asyncio.git@b535db05f6e43019700483c442ab6686f132a415
pytest-env~=0.6.2
pytest-markdown-docs==0.8.0
pytest-timeout~=2.1.0
python-dotenv~=1.0.0;python_version>='3.8'
requests~=2.31.0
ruff==0.9.6
types-croniter~=1.0.8
types-python-dateutil~=2.8.10
types-requests~=2.31.0
types-setuptools~=57.4.11
types-six==1.16.21
types-toml~=0.10.4
twine~=5.1.1
wheel~=0.37.1
nbclient==0.6.8
notebook==6.5.1
jupytext==1.14.1
pyright==1.1.351
python-json-logger==2.0.7  # unpinned transitive dependency of jupytext breaking on later versions
pdm==2.12.4  # used for testing pdm cache behavior w/ automounts
console-ctrl==0.1.0

----------------------------------------

TITLE: Configuring Modal Base Images with JSON
DESCRIPTION: The base-images.json file specifies version information for Modal's Image constructor methods. This configuration determines which base images are used for different Modal container builds.

LANGUAGE: json
CODE:
base-images.json

----------------------------------------

TITLE: Python Package Requirements List
DESCRIPTION: A comprehensive list of Python package dependencies with pinned versions. Includes packages for FastAPI web framework, async functionality (aiohttp), data validation (pydantic), and various utility libraries.

LANGUAGE: plaintext
CODE:
aiohttp==3.9.3
aiosignal==1.3.1
aiostream==0.5.2
annotated-types==0.6.0
anyio==4.3.0
async-timeout==4.0.3 ; python_version < "3.11"
attrs==23.2.0
certifi==2024.2.2
exceptiongroup==1.2.0 ; python_version < "3.11"
fastapi==0.110.0
frozenlist==1.4.1
grpclib==0.4.7
h2==4.1.0
hpack==4.0.0
hyperframe==6.0.1
idna==3.6
markdown-it-py==3.0.0
mdurl==0.1.2
multidict==6.0.5
protobuf==4.25.3
pydantic==2.6.4
pydantic_core==2.16.3
Pygments==2.17.2
python-multipart==0.0.9
rich==13.7.1
sniffio==1.3.1
starlette==0.36.3
typing_extensions==4.10.0
yarl==1.9.4

----------------------------------------

TITLE: Defining Python Package Dependencies
DESCRIPTION: Lists required Python packages and their versions for a Pins Modal container runtime environment. Includes conditional dependencies based on Python version and essential packages for web services, async operations, and development tools.

LANGUAGE: plaintext
CODE:
aiohttp==3.8.3
aiostream==0.4.4
asgiref==3.5.2
certifi>=2022.12.07
cloudpickle==2.0.0;python_version<'3.11'
cloudpickle==2.2.0;python_version>='3.11'
ddtrace==1.5.2;python_version<'3.11'
fastapi==0.88.0
fastprogress==1.0.0
grpclib==0.4.3
importlib_metadata==4.8.1
ipython>=7.34.0
protobuf>=3.19.0
python-multipart>=0.0.5
rich==12.3.0
tblib==1.7.0
toml==0.10.2
typer==0.6.1
types-certifi==2021.10.8.3
types-toml==0.10.4
typeguard>=3.0.0

----------------------------------------

TITLE: Defining Python Package Dependencies
DESCRIPTION: Specifies required Python packages and their versions for the modal project. Includes core networking libraries like aiohttp, grpclib, and their dependencies. Some packages have specific version constraints and Python version conditions.

LANGUAGE: text
CODE:
aiohappyeyeballs==2.4.3
aiohttp==3.10.8
aiosignal==1.3.1
async-timeout==4.0.3 ; python_version < "3.11"
attrs==24.2.0
certifi==2024.8.30
frozenlist==1.4.1
grpclib==0.4.7
h2==4.1.0
hpack==4.0.0
hyperframe==6.0.1
idna==3.10
multidict==6.1.0
protobuf>=3.20,<6
typing_extensions==4.12.2
yarl==1.13.1

----------------------------------------

TITLE: Listing Modal Dependencies with Versions
DESCRIPTION: This snippet enumerates the Python packages required for the Modal project, along with their specific versions or version constraints. These dependencies are installed within the container runtime.

LANGUAGE: plaintext
CODE:
aiohttp==3.9.1
aiostream==0.4.4
asgiref==3.5.2
certifi>=2022.12.07
cloudpickle==2.2.0
fastapi==0.88.0
fastprogress==1.0.0
grpclib==0.4.7
importlib_metadata==4.8.1
ipython>=7.34.0
protobuf>=3.19.0
python-multipart>=0.0.5
rich==12.3.0
tblib==1.7.0
toml==0.10.2
typer==0.6.1
types-certifi==2021.10.8.3
types-toml==0.10.4
typeguard>=3.0.0

----------------------------------------

TITLE: Defining Python Package Dependencies
DESCRIPTION: Specifies required Python packages with version constraints and a Git repository dependency. Includes version-specific Python requirement for blueberry package.

LANGUAGE: plaintext
CODE:
banana~=1.2.3
apple # another comment
blueberry~=0.0.0; python_version >= '3.7'
git+https://github.com/modal-com/synchronicity.git#egg=synchronicity

----------------------------------------

TITLE: Defining Foo Class in Python
DESCRIPTION: Implements a base Foo class that inherits from object. This class provides foo-related functionality.

LANGUAGE: python
CODE:
class Foo(object)

----------------------------------------

TITLE: Usage Example of funky Function
DESCRIPTION: Demonstrates how to import and use the funky function from the foo module. Shows that the function call outputs something.

LANGUAGE: python
CODE:
import foo
foo.funky()  # outputs something

----------------------------------------

TITLE: Implementing bar Method
DESCRIPTION: Defines a bar method within the Foo class. Method implementation details are not provided in the snippet.

LANGUAGE: python
CODE:
def bar(self):

----------------------------------------

TITLE: Implementing funky Function
DESCRIPTION: Defines a standalone funky function that 'funks the baz'. No parameters are specified in the function definition.

LANGUAGE: python
CODE:
def funky():