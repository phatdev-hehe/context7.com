TITLE: CREATE TABLE Syntax in Presto SQL
DESCRIPTION: The full syntax for the CREATE TABLE statement in Presto SQL, including optional clauses for IF NOT EXISTS, column definitions, constraints, and table properties.

LANGUAGE: sql
CODE:
CREATE TABLE [ IF NOT EXISTS ]
table_name (
  { column_name data_type [NOT NULL] [ COMMENT comment ] [ WITH ( property_name = expression [, ...] ) ]
  | LIKE existing_table_name [ { INCLUDING | EXCLUDING } PROPERTIES ]
  | [ CONSTRAINT constraint_name ] { PRIMARY KEY | UNIQUE } ( { column_name [, ...] } ) [ { ENABLED | DISABLED } ] [ [ NOT ] RELY ] [ [ NOT ] ENFORCED ] }
  [, ...]
)
[ COMMENT table_comment ]
[ WITH ( property_name = expression [, ...] ) ]

----------------------------------------

TITLE: Configuring Presto Server Properties for Worker
DESCRIPTION: Minimal configuration for a Presto worker node, including settings for memory and discovery.

LANGUAGE: none
CODE:
coordinator=false
http-server.http.port=8080
query.max-memory=50GB
query.max-memory-per-node=1GB
discovery.uri=http://example.net:8080

----------------------------------------

TITLE: Creating Table with Properties and Comments
DESCRIPTION: Example demonstrating creation of a table with a comment and specific storage format property, including data aggregation.

LANGUAGE: sql
CODE:
CREATE TABLE orders_by_date
COMMENT 'Summary of orders by date'
WITH (format = 'ORC')
AS
SELECT orderdate, sum(totalprice) AS price
FROM orders
GROUP BY orderdate

----------------------------------------

TITLE: Configuring MySQL Connector in Presto
DESCRIPTION: Example configuration for setting up a MySQL connector in Presto. This snippet shows the contents of a properties file used to define connection details for a MySQL database.

LANGUAGE: properties
CODE:
connector.name=mysql
connection-url=jdbc:mysql://example.net:3306
connection-user=root
connection-password=secret

----------------------------------------

TITLE: UNNEST with Arrays
DESCRIPTION: Example of using UNNEST to expand array columns into rows.

LANGUAGE: SQL
CODE:
SELECT numbers, animals, n, a
FROM (
  VALUES
    (ARRAY[2, 5], ARRAY['dog', 'cat', 'bird']),
    (ARRAY[7, 8, 9], ARRAY['cow', 'pig'])
) AS x (numbers, animals)
CROSS JOIN UNNEST(numbers, animals) AS t (n, a);

----------------------------------------

TITLE: Implementing Client Request Filter in Java
DESCRIPTION: Interface and factory implementations for customizing HTTP headers in Presto client requests. The ClientRequestFilterFactory creates filter instances that manage header customization, while avoiding modification of blocked system headers.

LANGUAGE: java
CODE:
public interface ClientRequestFilter {
    Map<String, String> getExtraHeaders();
    List<String> getHeaderNames();
}

LANGUAGE: java
CODE:
public interface ClientRequestFilterFactory {
    String getName();
    ClientRequestFilter create();
}

----------------------------------------

TITLE: GROUP BY Complex Grouping Examples
DESCRIPTION: Examples of complex grouping operations using CUBE, ROLLUP and GROUPING SETS

LANGUAGE: SQL
CODE:
SELECT origin_state, destination_state, sum(package_weight)
FROM shipping
GROUP BY CUBE (origin_state, destination_state);

----------------------------------------

TITLE: JOIN Syntax and Examples
DESCRIPTION: Various types of JOIN operations including CROSS JOIN, INNER JOIN and OUTER JOINs with examples

LANGUAGE: SQL
CODE:
SELECT *
FROM nation
CROSS JOIN region;

----------------------------------------

TITLE: Implementing Client Request Filter in Java
DESCRIPTION: Interface and factory implementations for customizing HTTP headers in Presto client requests. The ClientRequestFilterFactory creates filter instances that manage header customization, while avoiding modification of blocked system headers.

LANGUAGE: java
CODE:
public interface ClientRequestFilter {
    Map<String, String> getExtraHeaders();
    List<String> getHeaderNames();
}

LANGUAGE: java
CODE:
public interface ClientRequestFilterFactory {
    String getName();
    ClientRequestFilter create();
}

----------------------------------------

TITLE: Implementing ConnectorFactory in Java for Presto
DESCRIPTION: The ConnectorFactory interface is responsible for creating instances of Connector objects that return services like ConnectorMetadata, ConnectorSplitManager, ConnectorHandleResolver, and ConnectorRecordSetProvider.

LANGUAGE: java
CODE:
public interface ConnectorFactory {
    String getName();
    Connector create(String connectorId, Map<String, String> config);
}

----------------------------------------

TITLE: Transforming Map Values in Presto SQL
DESCRIPTION: Demonstrates how to transform the values of a map using a custom function.

LANGUAGE: sql
CODE:
SELECT transform_values(MAP(ARRAY [1, 2, 3], ARRAY [10, 20, 30]), (k, v) -> v + k); -- {1 -> 11, 2 -> 22, 3 -> 33}

----------------------------------------

TITLE: JVM Configuration for Presto Server
DESCRIPTION: JVM configuration options for running Presto, including memory settings and garbage collection parameters.

LANGUAGE: none
CODE:
-server
-Xmx16G
-XX:+UseG1GC
-XX:G1HeapRegionSize=32M
-XX:+UseGCOverheadLimit
-XX:+ExplicitGCInvokesConcurrent
-XX:+HeapDumpOnOutOfMemoryError
-XX:+ExitOnOutOfMemoryError

----------------------------------------

TITLE: Implementing Aggregation Function in Presto
DESCRIPTION: Example of an aggregation function 'avg_double' that computes the average of a DOUBLE column. It demonstrates the use of @AggregationFunction, @InputFunction, @CombineFunction, and @OutputFunction annotations.

LANGUAGE: java
CODE:
@AggregationFunction("avg_double")
public class AverageAggregation
{
    @InputFunction
    public static void input(LongAndDoubleState state, @SqlType(StandardTypes.DOUBLE) double value)
    {
        state.setLong(state.getLong() + 1);
        state.setDouble(state.getDouble() + value);
    }

    @CombineFunction
    public static void combine(LongAndDoubleState state, LongAndDoubleState otherState)
    {
        state.setLong(state.getLong() + otherState.getLong());
        state.setDouble(state.getDouble() + otherState.getDouble());
    }

    @OutputFunction(StandardTypes.DOUBLE)
    public static void output(LongAndDoubleState state, BlockBuilder out)
    {
        long count = state.getLong();
        if (count == 0) {
            out.appendNull();
        }
        else {
            double value = state.getDouble();
            DOUBLE.writeDouble(out, value / count);
        }
    }
}

----------------------------------------

TITLE: Executing SHOW TABLES Command in Presto SQL
DESCRIPTION: This snippet demonstrates the syntax for the SHOW TABLES command in Presto. It allows listing tables from a specific schema or the current schema, with an optional LIKE clause for filtering table names.

LANGUAGE: SQL
CODE:
SHOW TABLES [ FROM schema ] [ LIKE pattern [ ESCAPE 'escape_character' ] ]

----------------------------------------

TITLE: Creating a Basic Table in Presto SQL
DESCRIPTION: An example of creating a new table named 'orders' with four columns and specifying the ORC format property.

LANGUAGE: sql
CODE:
CREATE TABLE orders (
  orderkey bigint,
  orderstatus varchar,
  totalprice double,
  orderdate date
)
WITH (format = 'ORC')

----------------------------------------

TITLE: Defining Custom Principal Rules in Presto's File-Based Access Control
DESCRIPTION: This JSON snippet shows how to define custom principal rules in Presto's file-based access control system, including specific user matching and group principal handling.

LANGUAGE: json
CODE:
{
  "catalogs": [
    {
      "allow": true
    }
  ],
  "principals": [
    {
      "principal": "([^/]+)/?.*@example.net",
      "principal_to_user": "$1",
      "allow": true
    },
    {
      "principal": "group@example.net",
      "user": "alice|bob",
      "allow": true
    }
  ]
}

----------------------------------------

TITLE: Syntax for EXPLAIN ANALYZE in Presto SQL
DESCRIPTION: Defines the syntax for the EXPLAIN ANALYZE command, including optional VERBOSE and format parameters.

LANGUAGE: sql
CODE:
EXPLAIN ANALYZE [VERBOSE] [(format <TEXT|JSON>)] statement

----------------------------------------

TITLE: Generating Java Keystore for SSL/TLS
DESCRIPTION: Command and interactive prompts for generating a Java keystore file using keytool.

LANGUAGE: none
CODE:
keytool -genkeypair -alias example.com -keyalg RSA -keystore keystore.jks

----------------------------------------

TITLE: Configuring Kerberos Authentication in Presto Coordinator's config.properties
DESCRIPTION: This snippet shows the necessary configuration entries in the Presto coordinator's config.properties file to enable Kerberos authentication and HTTPS.

LANGUAGE: none
CODE:
http-server.authentication.type=KERBEROS

http.server.authentication.krb5.service-name=presto
http.server.authentication.krb5.service-hostname=presto.example.com
http.server.authentication.krb5.keytab=/etc/presto/presto.keytab
http.authentication.krb5.config=/etc/krb5.conf

http-server.https.enabled=true
http-server.https.port=7778

http-server.https.keystore.path=/etc/presto_keystore.jks
http-server.https.keystore.key=keystore_password

----------------------------------------

TITLE: Presto Server Configuration Properties
DESCRIPTION: Configuration properties for Presto server including coordinator settings, HTTP port, and discovery URI

LANGUAGE: properties
CODE:
coordinator=true
node-scheduler.include-coordinator=true
http-server.http.port=8080
discovery-server.enabled=true
discovery.uri=http://localhost:8080

----------------------------------------

TITLE: Window Function Syntax in Presto SQL
DESCRIPTION: Demonstrates the general syntax for invoking a window function in Presto SQL using the OVER clause. It shows how to specify partitioning, ordering, and framing for the window.

LANGUAGE: SQL
CODE:
function(args) OVER (
    [PARTITION BY expression]
    [ORDER BY expression [ASC|DESC]]
    [frame]
)

----------------------------------------

TITLE: Inserting All Columns from Another Table
DESCRIPTION: Demonstrates how to insert all rows from one table into another using SELECT *.

LANGUAGE: sql
CODE:
INSERT INTO orders
SELECT * FROM new_orders;

----------------------------------------

TITLE: Basic Type Casting in Presto SQL
DESCRIPTION: Examples of using cast() and try_cast() functions for explicit type conversion. The cast() function converts values between types, while try_cast() returns null on conversion failure.



----------------------------------------

TITLE: Configuring Basic Elasticsearch Properties
DESCRIPTION: Basic configuration properties for connecting Presto to Elasticsearch, specifying the connector name, host, port and default schema.

LANGUAGE: properties
CODE:
connector.name=elasticsearch
elasticsearch.host=localhost
elasticsearch.port=9200
elasticsearch.default-schema-name=default

----------------------------------------

TITLE: CALL Statement Basic Syntax
DESCRIPTION: Basic syntax pattern for calling a procedure in Presto, showing the general structure with optional named parameters.

LANGUAGE: none
CODE:
CALL procedure_name ( [ name => ] expression [, ...] )

----------------------------------------

TITLE: Precision-Recall Curve Query Example
DESCRIPTION: SQL query demonstrating how to calculate precision-recall metrics using classification functions

LANGUAGE: sql
CODE:
WITH
    recall_precision AS (
        SELECT
            CLASSIFICATION_RECALL(10000, correct, pred) AS recalls,
            CLASSIFICATION_PRECISION(10000, correct, pred) AS precisions
        FROM
           classification_dataset
    )
SELECT
    recall,
    precision
FROM
    recall_precision
CROSS JOIN UNNEST(recalls, precisions) AS t(recall, precision)

----------------------------------------

TITLE: CREATE FUNCTION Syntax Definition
DESCRIPTION: The complete syntax definition for creating functions in Presto SQL, including all optional clauses and parameters.

LANGUAGE: sql
CODE:
CREATE [ OR REPLACE ] [TEMPORARY] FUNCTION
qualified_function_name (
  parameter_name parameter_type
  [, ...]
)
RETURNS return_type
[ COMMENT function_description ]
[ LANGUAGE [ SQL | identifier] ]
[ DETERMINISTIC | NOT DETERMINISTIC ]
[ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]
[ RETURN expression | EXTERNAL [ NAME identifier ] ]

----------------------------------------

TITLE: Importing LDAP Server Certificate using Keytool
DESCRIPTION: Command to import the LDAP server's TLS certificate into Java's default truststore for securing the TLS connection.

LANGUAGE: bash
CODE:
$ keytool -import -keystore <JAVA_HOME>/jre/lib/security/cacerts -trustcacerts -alias ldap_server -file ldap_server.crt

----------------------------------------

TITLE: EXPLAIN Statement Syntax
DESCRIPTION: Basic syntax for the EXPLAIN statement showing available options including FORMAT and TYPE.

LANGUAGE: sql
CODE:
EXPLAIN [ ( option [, ...] ) ] statement

LANGUAGE: sql
CODE:
FORMAT { TEXT | GRAPHVIZ | JSON }
TYPE { LOGICAL | DISTRIBUTED | VALIDATE | IO }

----------------------------------------

TITLE: Simple CASE Expression in SQL
DESCRIPTION: Demonstrates the simple form of CASE expression that matches an expression against multiple values and returns corresponding results.

LANGUAGE: sql
CODE:
SELECT a,
       CASE a
           WHEN 1 THEN 'one'
           WHEN 2 THEN 'two'
           ELSE 'many'
       END

----------------------------------------

TITLE: Enabling Dynamic Filtering for Broadcast and Collocated Joins in Presto
DESCRIPTION: Configuration settings to enable dynamic filtering and bucket pruning support for improved performance in queries with broadcast or collocated joins. This feature can be enabled using a configuration property and a system session property.

LANGUAGE: SQL
CODE:
-- Configuration property
experimental.enable-dynamic-filtering=true

-- System session property
SET SESSION enable_dynamic_filtering = true;

----------------------------------------

TITLE: Basic USE Statement Syntax
DESCRIPTION: Shows the basic syntax patterns for the USE statement in Presto SQL, demonstrating both the catalog.schema form and schema-only form.

LANGUAGE: sql
CODE:
USE catalog.schema
USE schema

----------------------------------------

TITLE: Implementing Custom Types in Presto Java
DESCRIPTION: This snippet demonstrates how to implement custom Types and ParametricTypes in Presto. It shows the key methods and concepts involved in defining new SQL types, including native container types, encoding, and type signatures.

LANGUAGE: java
CODE:
public interface Type {
    JavaType getJavaType();
    // Other methods...
}

public interface ParametricType {
    // Methods for type parameters
}

public class Plugin {
    public Iterable<Type> getTypes() {
        // Return custom Type implementations
    }

    public Iterable<ParametricType> getParametricTypes() {
        // Return custom ParametricType implementations
    }
}

----------------------------------------

TITLE: Importing LDAP Server Certificate to Java Truststore
DESCRIPTION: This command imports the LDAP server's TLS certificate to the default Java truststore of the Presto coordinator to secure the TLS connection.

LANGUAGE: bash
CODE:
$ keytool -import -keystore <JAVA_HOME>/jre/lib/security/cacerts -trustcacerts -alias ldap_server -file ldap_server.crt

----------------------------------------

TITLE: Configuring Redshift Connector in Presto
DESCRIPTION: This snippet shows the basic configuration properties required to set up a Redshift connector in Presto. It includes the connector name, JDBC connection URL, username, and password.

LANGUAGE: properties
CODE:
connector.name=redshift
connection-url=jdbc:postgresql://example.net:5439/database
connection-user=root
connection-password=secret

----------------------------------------

TITLE: Configuring File-Based System Access Control in Presto
DESCRIPTION: This snippet demonstrates how to set up file-based system access control in Presto using the access-control.properties file, specifying the plugin name and the location of the rules configuration file.

LANGUAGE: properties
CODE:
access-control.name=file
security.config-file=etc/rules.json

----------------------------------------

TITLE: Setting Session Properties in Presto SQL
DESCRIPTION: The SET SESSION command is used to set session property values in Presto. It can be used to configure session-level settings that affect query execution and optimization.

LANGUAGE: sql
CODE:
SET SESSION optimize_hash_generation = true;

LANGUAGE: sql
CODE:
SET SESSION hive.optimized_reader_enabled = true;

----------------------------------------

TITLE: GROUP BY Clause Example
DESCRIPTION: An example of using the GROUP BY clause with ordinal positions and input column names.

LANGUAGE: SQL
CODE:
SELECT count(*), nationkey FROM customer GROUP BY 2;

SELECT count(*), nationkey FROM customer GROUP BY nationkey;

----------------------------------------

TITLE: Debugging SSL Issues in Presto CLI
DESCRIPTION: This command demonstrates how to run the Presto CLI with SSL debugging enabled to troubleshoot SSL-related errors.

LANGUAGE: bash
CODE:
java -Djavax.net.debug=ssl \
-jar \
presto-cli-<version>-executable.jar \
--server https://coordinator:8443 \
<other_cli_arguments>

----------------------------------------

TITLE: Array Concatenation in Presto SQL
DESCRIPTION: Shows how to concatenate arrays using the || operator, including array-to-array and element-to-array concatenation.

LANGUAGE: sql
CODE:
SELECT ARRAY [1] || ARRAY [2]; -- [1, 2]
SELECT ARRAY [1] || 2; -- [1, 2]
SELECT 2 || ARRAY [1]; -- [2, 1]

----------------------------------------

TITLE: Truncating MySQL Table in Presto
DESCRIPTION: SQL statement to delete all data from a MySQL table without dropping the table structure using Presto.

LANGUAGE: sql
CODE:
TRUNCATE TABLE mysql.web.page_views;

----------------------------------------

TITLE: Casting SQL Types to JSON in Presto
DESCRIPTION: Examples of casting various SQL data types (primitives, arrays, maps, rows) to JSON format. Shows behavior of null values and special cases.

LANGUAGE: sql
CODE:
SELECT CAST(NULL AS JSON); -- NULL
SELECT CAST(1 AS JSON); -- JSON '1'
SELECT CAST(9223372036854775807 AS JSON); -- JSON '9223372036854775807'
SELECT CAST('abc' AS JSON); -- JSON '"abc"'
SELECT CAST(true AS JSON); -- JSON 'true'
SELECT CAST(1.234 AS JSON); -- JSON '1.234'
SELECT CAST(ARRAY[1, 23, 456] AS JSON); -- JSON '[1,23,456]'
SELECT CAST(ARRAY[1, NULL, 456] AS JSON); -- JSON '[1,null,456]'
SELECT CAST(ARRAY[ARRAY[1, 23], ARRAY[456]] AS JSON); -- JSON '[[1,23],[456]]'
SELECT CAST(MAP_FROM_ENTRIES(ARRAY[('k1', 1), ('k2', 23), ('k3', 456)]) AS JSON); -- JSON '{"k1":1,"k2":23,"k3":456}'
SELECT CAST(CAST(ROW(123, 'abc', true) AS ROW(v1 BIGINT, v2 VARCHAR, v3 BOOLEAN)) AS JSON); -- JSON '[123,"abc",true]'

----------------------------------------

TITLE: Inserting Multiple Rows with Values in Presto SQL
DESCRIPTION: Illustrates the insertion of multiple rows with specific values into the 'cities' table in a single INSERT statement.

LANGUAGE: sql
CODE:
INSERT INTO cities VALUES (2, 'San Jose'), (3, 'Oakland');

----------------------------------------

TITLE: Configuring Basic SQL Server Connection Properties
DESCRIPTION: Basic configuration properties required to set up a SQL Server connector in Presto. These properties should be placed in a .properties file in the etc/catalog directory.

LANGUAGE: properties
CODE:
connector.name=sqlserver
connection-url=jdbc:sqlserver://[serverName[\instanceName][:portNumber]]
connection-user=root
connection-password=secret

----------------------------------------

TITLE: Inserting a Row with Specified Columns in Presto SQL
DESCRIPTION: Demonstrates inserting a single row into the 'nation' table while explicitly specifying the column names and their corresponding values.

LANGUAGE: sql
CODE:
INSERT INTO nation (nationkey, name, regionkey, comment)
VALUES (26, 'POLAND', 3, 'no comment');

----------------------------------------

TITLE: Inserting Multiple Rows with VALUES
DESCRIPTION: Demonstrates inserting multiple rows in a single INSERT statement using VALUES clause.

LANGUAGE: sql
CODE:
INSERT INTO cities VALUES (2, 'San Jose'), (3, 'Oakland');

----------------------------------------

TITLE: Comparing ROWS, RANGE, and GROUPS Framing in Presto SQL
DESCRIPTION: Demonstrates the differences between ROWS, RANGE, and GROUPS in frame definition using ARRAY_AGG window function.

LANGUAGE: SQL
CODE:
SELECT
    ARRAY_AGG(v) OVER (
        ORDER BY k ASC ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING
    )
FROM (
    VALUES (1, 'a'), (1, 'b'), (3, 'c'), (3, 'd'), (5, 'e')
) t(k, v);

SELECT
    ARRAY_AGG(v) OVER (
        ORDER BY k ASC RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING
    )
FROM (
    VALUES (1, 'a'), (1, 'b'), (3, 'c'), (3, 'd'), (5, 'e')
) t(k, v);

SELECT
    ARRAY_AGG(v) OVER (
        ORDER BY k ASC GROUPS BETWEEN 1 PRECEDING AND 1 FOLLOWING
    )
FROM (
    VALUES (1, 'a'), (1, 'b'), (3, 'c'), (3, 'd'), (5, 'e')
) t(k, v);

----------------------------------------

TITLE: Creating New Table with Schema
DESCRIPTION: SQL command to create a new table with specified columns and data types.

LANGUAGE: sql
CODE:
CREATE TABLE memory.default1.my_table (id integer, name varchar, age integer);

----------------------------------------

TITLE: Demonstrating NULL handling in NOT operations with Presto SQL
DESCRIPTION: This SQL query shows that the NOT operator returns NULL when applied to a NULL value in Presto.

LANGUAGE: SQL
CODE:
SELECT NOT CAST(null AS boolean); -- null

----------------------------------------

TITLE: CREATE VIEW Syntax in Presto SQL
DESCRIPTION: Defines the syntax for creating a view in Presto, including optional clauses for replacing existing views and specifying security modes.

LANGUAGE: sql
CODE:
CREATE [ OR REPLACE ] VIEW view_name
[ SECURITY { DEFINER | INVOKER } ]
AS query

----------------------------------------

TITLE: Implementing Lambda Expressions in Presto SQL
DESCRIPTION: Demonstrates various types of lambda expressions using the -> syntax. Examples include basic arithmetic operations, function calls, array indexing, conditional logic, and error handling with TRY.

LANGUAGE: sql
CODE:
x -> x + 1
(x, y) -> x + y
x -> regexp_like(x, 'a+')
x -> x[1] / x[2]
x -> IF(x > 0, x, -x)
x -> COALESCE(x, 0)
x -> CAST(x AS JSON)
x -> x + TRY(1 / 0)

----------------------------------------

TITLE: Configuring Oracle Connector Properties
DESCRIPTION: Basic configuration file for connecting Presto to an Oracle database. Includes essential connection parameters like connector name, connection URL, user, and password.

LANGUAGE: properties
CODE:
connector.name=oracle
connection-url=jdbc:oracle:thin:@example.net:1521:orcl
connection-user=root
connection-password=secret

----------------------------------------

TITLE: Reduce Aggregation Examples
DESCRIPTION: Examples demonstrating reduce_agg function usage for sum and product aggregations

LANGUAGE: SQL
CODE:
SELECT id, reduce_agg(value, 0, (a, b) -> a + b, (a, b) -> a + b)
FROM (
    VALUES
        (1, 2),
        (1, 3),
        (1, 4),
        (2, 20),
        (2, 30),
        (2, 40)
) AS t(id, value)
GROUP BY id;

SELECT id, reduce_agg(value, 1, (a, b) -> a * b, (a, b) -> a * b)
FROM (
    VALUES
        (1, 2),
        (1, 3),
        (1, 4),
        (2, 20),
        (2, 30),
        (2, 40)
) AS t(id, value)
GROUP BY id;

----------------------------------------

TITLE: Using regexp_extract_all without Group Parameter
DESCRIPTION: Extracts all substrings matching a regular expression pattern from a string and returns them as an array.

LANGUAGE: sql
CODE:
SELECT regexp_extract_all('1a 2b 14m', '\d+'); -- [1, 2, 14]

----------------------------------------

TITLE: Basic DROP TABLE Syntax
DESCRIPTION: Shows the basic syntax for dropping a table in Presto SQL. Includes optional IF EXISTS clause to suppress errors if table doesn't exist.

LANGUAGE: sql
CODE:
DROP TABLE  [ IF EXISTS ] table_name

----------------------------------------

TITLE: Truncating Tables in PostgreSQL via Presto
DESCRIPTION: SQL command to truncate a table in PostgreSQL using Presto, deleting all data without dropping the table.

LANGUAGE: sql
CODE:
TRUNCATE TABLE postgresql.public.renamed_table;

----------------------------------------

TITLE: Preparing an INSERT Query in Presto SQL
DESCRIPTION: Illustrates how to prepare an INSERT statement. This example inserts a new row into the 'cities' table with specific values.

LANGUAGE: sql
CODE:
PREPARE my_insert FROM
INSERT INTO cities VALUES (1, 'San Francisco');

----------------------------------------

TITLE: Dropping Table
DESCRIPTION: SQL command to delete an existing table from the Memory connector.

LANGUAGE: sql
CODE:
DROP TABLE memory.default.nation;

----------------------------------------

TITLE: Binary String Functions
DESCRIPTION: Core functions for manipulating binary data including length calculation, concatenation, and substring operations. These functions handle binary data types and return either binary or numeric results.

LANGUAGE: sql
CODE:
length(binary) -> bigint
concat(binary1, ..., binaryN) -> varbinary
substr(binary, start) -> varbinary
substr(binary, start, length) -> varbinary

----------------------------------------

TITLE: Casting JSON to SQL Types in Presto
DESCRIPTION: Examples of casting JSON values to various SQL data types including primitives, arrays, maps and rows. Demonstrates handling of null values and nested structures.

LANGUAGE: sql
CODE:
SELECT CAST(JSON 'null' AS VARCHAR); -- NULL
SELECT CAST(JSON '1' AS INTEGER); -- 1
SELECT CAST(JSON '9223372036854775807' AS BIGINT); -- 9223372036854775807
SELECT CAST(JSON '"abc"' AS VARCHAR); -- abc
SELECT CAST(JSON 'true' AS BOOLEAN); -- true
SELECT CAST(JSON '1.234' AS DOUBLE); -- 1.234
SELECT CAST(JSON '[1,23,456]' AS ARRAY(INTEGER)); -- [1, 23, 456]
SELECT CAST(JSON '[1,null,456]' AS ARRAY(INTEGER)); -- [1, NULL, 456]
SELECT CAST(JSON '[[1,23],[456]]' AS ARRAY(ARRAY(INTEGER))); -- [[1, 23], [456]]
SELECT CAST(JSON '{"k1":1,"k2":23,"k3":456}' AS MAP(VARCHAR, INTEGER)); -- {k1=1, k2=23, k3=456}
SELECT CAST(JSON '{"v1":123,"v2":"abc","v3":true}' AS ROW(v1 BIGINT, v2 VARCHAR, v3 BOOLEAN)); -- {v1=123, v2=abc, v3=true}

----------------------------------------

TITLE: Querying Session Properties in Presto SQL
DESCRIPTION: Shows the syntax for displaying current session properties. The optional LIKE clause allows filtering the properties based on a pattern match.

LANGUAGE: sql
CODE:
SHOW SESSION [ LIKE pattern ]

----------------------------------------

TITLE: Creating RGB Color in Presto SQL
DESCRIPTION: This function creates a color value from RGB components. Each component (red, green, blue) is an integer ranging from 0 to 255.

LANGUAGE: SQL
CODE:
rgb(red, green, blue) -> color

----------------------------------------

TITLE: Pattern Matching with LIKE Operator
DESCRIPTION: Examples of pattern matching using LIKE operator with wildcards (% and _) and escape characters.

LANGUAGE: sql
CODE:
SELECT * FROM (VALUES ('abc'), ('bcd'), ('cde')) AS t (name)
WHERE name LIKE '%b%'

----------------------------------------

TITLE: Altering View Name
DESCRIPTION: SQL command to rename an existing view in the Memory connector.

LANGUAGE: sql
CODE:
ALTER VIEW memory.default.nation RENAME TO memory.default.new_nation;

----------------------------------------

TITLE: Encoding and Decoding Base64 in Presto SQL
DESCRIPTION: The to_base64() and from_base64() functions convert between binary data and base64 encoded strings. They handle standard base64 encoding.

LANGUAGE: SQL
CODE:
to_base64(binary) -> varchar
from_base64(string) -> varbinary

----------------------------------------

TITLE: Submitting SQL Query to Presto (HTTP POST)
DESCRIPTION: Demonstrates how to submit a SQL query to Presto for execution using an HTTP POST request. The example includes required headers and the query payload.

LANGUAGE: http
CODE:
POST /v1/statement HTTP/1.1
Host: localhost:8001
X-Presto-Catalog: jmx
X-Presto-Source: presto-cli
X-Presto-Schema: jmx
User-Agent: StatementClient/0.55-SNAPSHOT
X-Presto-User: tobrie1
Content-Length: 41

select name from "java.lang:type=runtime"

----------------------------------------

TITLE: Analyzing Specific Partitions in Hive Table using Presto SQL
DESCRIPTION: Illustrates how to analyze specific partitions of a Hive partitioned table 'sales' using the WITH clause.

LANGUAGE: sql
CODE:
ANALYZE hive.default.sales WITH (partitions = ARRAY[ARRAY['1992-01-01'], ARRAY['1992-01-02']]);

----------------------------------------

TITLE: Using regexp_extract_all with Simple Pattern
DESCRIPTION: Extracts all substrings matching a numeric pattern and returns them as an array.

LANGUAGE: sql
CODE:
SELECT regexp_extract_all('1a 2b 14m', '\d+'); -- [1, 2, 14]

----------------------------------------

TITLE: Renaming a View Example in Presto SQL
DESCRIPTION: An example of renaming a view named 'users' to 'people' using the ALTER VIEW RENAME TO statement in Presto SQL.

LANGUAGE: sql
CODE:
ALTER VIEW users RENAME TO people;

----------------------------------------

TITLE: Connecting to Local Presto Server
DESCRIPTION: Command to connect to a local Presto server using the CLI tool, specifying the catalog and schema.

LANGUAGE: bash
CODE:
./presto --server localhost:8080 --catalog hive --schema default

----------------------------------------

TITLE: Creating a Table with Custom Properties in ClickHouse
DESCRIPTION: Example of creating a table in ClickHouse with specific engine settings, including MergeTree engine configuration with custom ordering, partitioning, primary key, and sampling settings.

LANGUAGE: sql
CODE:
CREATE TABLE default.prestodb_ck (
  id int NOT NULL,
  birthday DATE NOT NULL,
  name VARCHAR,
  age BIGINT,
  logdate DATE NOT NULL
)
WITH (
  engine = 'MergeTree',
  order_by = ARRAY['id', 'birthday'],
  partition_by = ARRAY['toYYYYMM(logdate)'],
  primary_key = ARRAY['id'],
  sample_by = 'id'
);

----------------------------------------

TITLE: Show Create Table Example Output
DESCRIPTION: Example output showing the complete table definition including columns, data types, and table properties like format and partitioning.

LANGUAGE: sql
CODE:
CREATE TABLE tpch.sf1.orders (
    orderkey bigint,
    orderstatus varchar,
    totalprice double,
    orderdate varchar
)
WITH (
    format = 'ORC',
    partitioned_by = ARRAY['orderdate']
)

----------------------------------------

TITLE: Killing Running Query in Presto
DESCRIPTION: Shows how to kill a running query using the system.runtime.kill_query procedure with query ID and message parameters.

LANGUAGE: sql
CODE:
CALL system.runtime.kill_query(query_id => '20151207_215727_00146_tx3nr', message => 'Using too many resources');

----------------------------------------

TITLE: Deleting All Rows
DESCRIPTION: Demonstrates how to delete all rows from a table by omitting the WHERE clause.

LANGUAGE: sql
CODE:
DELETE FROM orders;

----------------------------------------

TITLE: Configuring Hudi Connector Properties
DESCRIPTION: Essential configuration properties that must be set in the hudi.properties file within the Presto catalog directory for connecting to Hive metastore.

LANGUAGE: properties
CODE:
connector.name=hudi\nhive.metastore.uri=thrift://hms.host:9083

----------------------------------------

TITLE: Querying Multiple Quantiles in Presto SQL
DESCRIPTION: Returns an array of approximate percentile values for given quantiles (between 0 and 1) from a quantile digest. Useful for efficiently querying multiple percentiles in one operation.

LANGUAGE: SQL
CODE:
values_at_quantiles(qdigest(T), quantiles) -> T

----------------------------------------

TITLE: Altering MySQL Table in Presto
DESCRIPTION: SQL commands to alter a MySQL table by adding, renaming, and dropping columns using Presto.

LANGUAGE: sql
CODE:
ALTER TABLE mysql.web.page_views ADD COLUMN zipcode VARCHAR;
ALTER TABLE mysql.web.page_views RENAME COLUMN zipcode TO location;
ALTER TABLE mysql.web.page_views DROP COLUMN location;

----------------------------------------

TITLE: Array Sort with Custom Comparator in Presto SQL
DESCRIPTION: Shows how to sort arrays using custom comparison functions with various examples including null handling and string length comparison.

LANGUAGE: sql
CODE:
SELECT array_sort(ARRAY [3, 2, 5, 1, 2], (x, y) -> IF(x < y, 1, IF(x = y, 0, -1))); -- [5, 3, 2, 2, 1]
SELECT array_sort(ARRAY ['bc', 'ab', 'dc'], (x, y) -> IF(x < y, 1, IF(x = y, 0, -1))); -- ['dc', 'bc', 'ab']

----------------------------------------

TITLE: URL Extraction Functions in Presto SQL
DESCRIPTION: Defines various URL extraction functions in Presto SQL, including functions to extract fragment, host, query parameters, path, port, protocol, and query string from a given URL.

LANGUAGE: sql
CODE:
url_extract_fragment(url) -> varchar

url_extract_host(url) -> varchar

url_extract_parameter(url, name) -> varchar

url_extract_path(url) -> varchar

url_extract_port(url) -> bigint

url_extract_protocol(url) -> varchar

url_extract_query(url) -> varchar

----------------------------------------

TITLE: Basic Redis Table Definition Schema
DESCRIPTION: JSON schema for defining Redis table structure, including table name, schema name, and field definitions for key and value data formats.

LANGUAGE: json
CODE:
{
    "tableName": ...,
    "schemaName": ...,
    "key": {
        "dataFormat": ...,
        "fields": [
            ...
        ]
    },
    "value": {
        "dataFormat": ...,
        "fields": [
            ...
       ]
    }
}

----------------------------------------

TITLE: Using noisy_count_if_gaussian in Presto SQL
DESCRIPTION: Shows usage of noisy_count_if_gaussian that adds normally distributed noise to conditional counts. Returns NULL for empty sets.

LANGUAGE: sql
CODE:
SELECT noisy_count_if_gaussian(orderkey > 10000, 20.0) FROM tpch.tiny.lineitem; -- 50180 (1 row)
SELECT noisy_count_if_gaussian(orderkey > 10000, 20.0) FROM tpch.tiny.lineitem WHERE false; -- NULL (1 row)

----------------------------------------

TITLE: Basic SQL Server Querying Examples
DESCRIPTION: Sample SQL queries demonstrating how to list schemas, tables, and query data from SQL Server through Presto.

LANGUAGE: sql
CODE:
SHOW SCHEMAS FROM sqlserver;
SHOW TABLES FROM sqlserver.web;
DESCRIBE sqlserver.web.clicks;
SHOW COLUMNS FROM sqlserver.web.clicks;
SELECT * FROM sqlserver.web.clicks;

----------------------------------------

TITLE: ALTER TABLE Syntax Definition
DESCRIPTION: Complete syntax definition for all ALTER TABLE operations including table renaming, column operations, constraint management, and property settings.

LANGUAGE: sql
CODE:
ALTER TABLE [ IF EXISTS ] name RENAME TO new_name
ALTER TABLE [ IF EXISTS ] name ADD COLUMN [ IF NOT EXISTS ] column_name data_type [ COMMENT comment ] [ WITH ( property_name = expression [, ...] ) ]
ALTER TABLE [ IF EXISTS ] name DROP COLUMN column_name
ALTER TABLE [ IF EXISTS ] name RENAME COLUMN [ IF EXISTS ] column_name TO new_column_name
ALTER TABLE [ IF EXISTS ] name ADD [ CONSTRAINT constraint_name ] { PRIMARY KEY | UNIQUE } ( { column_name [, ...] } ) [ { ENABLED | DISABLED } ] [ [ NOT ] RELY ] [ [ NOT ] ENFORCED } ]
ALTER TABLE [ IF EXISTS ] name DROP CONSTRAINT [ IF EXISTS ] constraint_name
ALTER TABLE [ IF EXISTS ] name ALTER [ COLUMN ] column_name { SET | DROP } NOT NULL
ALTER TABLE [ IF EXISTS ] name SET PROPERTIES (property_name=value, [, ...])

----------------------------------------

TITLE: Creating Basic Orders Table in Presto
DESCRIPTION: Example of creating a simple orders table with basic columns and ORC format specification.

LANGUAGE: sql
CODE:
CREATE TABLE orders (
  orderkey bigint,
  orderstatus varchar,
  totalprice double,
  orderdate date
)
WITH (format = 'ORC')

----------------------------------------

TITLE: Basic VALUES Syntax in Presto SQL
DESCRIPTION: Shows the fundamental syntax patterns for VALUES statement, demonstrating both single-expression and multiple-column formats.

LANGUAGE: sql
CODE:
VALUES row [, ...]

LANGUAGE: sql
CODE:
( column_expression [, ...] )

----------------------------------------

TITLE: Configuring Maximum Unacknowledged Source Splits in Presto
DESCRIPTION: This snippet describes how to set the maximum number of unacknowledged source splits per task in Presto. It can be configured using either a session property or a configuration property.

LANGUAGE: text
CODE:
max_unacknowledged_splits_per_task

LANGUAGE: text
CODE:
node-scheduler.max-unacknowledged-splits-per-task

----------------------------------------

TITLE: Demonstrating New SQL Functions in Presto 0.237
DESCRIPTION: This snippet showcases the new SQL functions introduced in Presto 0.237, including array_sum, array_average, map_normalize, set_agg, and flatten_geometry_collections.

LANGUAGE: SQL
CODE:
SELECT array_sum(array[1, 2, 3]) AS sum,
       array_average(array[1.0, 2.0, 3.0]) AS avg,
       map_normalize(map(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3])) AS normalized_map,
       set_agg(column_name) AS unique_set,
       flatten_geometry_collections(geometry_column) AS flattened_geometries
FROM your_table;

----------------------------------------

TITLE: Configuring Redshift Connector in Presto
DESCRIPTION: This snippet shows how to configure the Redshift connector by creating a properties file in the 'etc/catalog' directory. It includes essential connection properties such as the connector name, JDBC URL, username, and password.

LANGUAGE: properties
CODE:
connector.name=redshift
connection-url=jdbc:postgresql://example.net:5439/database
connection-user=root
connection-password=secret

----------------------------------------

TITLE: Configuring Custom Presto Authenticator Properties
DESCRIPTION: This snippet shows an example configuration file for a custom Presto authenticator. It specifies the authenticator name and custom properties specific to the implementation.

LANGUAGE: properties
CODE:
presto-authenticator.name=custom-authenticator
custom-property1=custom-value1
custom-property2=custom-value2

----------------------------------------

TITLE: Creating Partitioned Iceberg Table
DESCRIPTION: Example of creating a partitioned Iceberg table with ORC format

LANGUAGE: sql
CODE:
CREATE TABLE iceberg.web.page_views (
  view_time timestamp,
  user_id bigint,
  page_url varchar,
  ds date,
  country varchar
)
WITH (
  format = 'ORC',
  partitioning = ARRAY['ds', 'country']
)

----------------------------------------

TITLE: Configuring Kerberos Authentication in Presto Properties
DESCRIPTION: Configuration settings for enabling Kerberos authentication and HTTPS in the Presto coordinator's config.properties file.

LANGUAGE: properties
CODE:
http-server.authentication.type=KERBEROS

http.server.authentication.krb5.service-name=presto
http.server.authentication.krb5.service-hostname=presto.example.com
http.server.authentication.krb5.keytab=/etc/presto/presto.keytab
http.authentication.krb5.config=/etc/krb5.conf

http-server.https.enabled=true
http-server.https.port=7778

http-server.https.keystore.path=/etc/presto_keystore.jks
http-server.https.keystore.key=keystore_password

----------------------------------------

TITLE: Managing Constraints in Presto SQL
DESCRIPTION: Examples of adding and dropping constraints (PRIMARY KEY, UNIQUE) using ALTER TABLE in Presto, including conditional operations and constraint properties.

LANGUAGE: sql
CODE:
ALTER TABLE users ADD CONSTRAINT pk PRIMARY KEY (user_id);

LANGUAGE: sql
CODE:
ALTER TABLE IF EXISTS users ADD UNIQUE (first_name, last_name) DISABLED;

LANGUAGE: sql
CODE:
ALTER TABLE users DROP CONSTRAINT pk;

LANGUAGE: sql
CODE:
ALTER TABLE IF EXISTS users DROP CONSTRAINT IF EXISTS pk;

----------------------------------------

TITLE: Managing Constraints in Presto SQL
DESCRIPTION: Examples of adding and dropping constraints (PRIMARY KEY, UNIQUE) using ALTER TABLE in Presto, including conditional operations and constraint properties.

LANGUAGE: sql
CODE:
ALTER TABLE users ADD CONSTRAINT pk PRIMARY KEY (user_id);

LANGUAGE: sql
CODE:
ALTER TABLE IF EXISTS users ADD UNIQUE (first_name, last_name) DISABLED;

LANGUAGE: sql
CODE:
ALTER TABLE users DROP CONSTRAINT pk;

LANGUAGE: sql
CODE:
ALTER TABLE IF EXISTS users DROP CONSTRAINT IF EXISTS pk;

----------------------------------------

TITLE: Creating Map from Entries in Presto SQL
DESCRIPTION: Demonstrates how to create a map from an array of key-value pairs using the map_from_entries() function.

LANGUAGE: sql
CODE:
SELECT map_from_entries(ARRAY[(1, 'x'), (2, 'y')]); -- {1 -> 'x', 2 -> 'y'}

----------------------------------------

TITLE: Retrieving Top N Keys from Map in Presto SQL
DESCRIPTION: Demonstrates how to retrieve the top N keys from a map based on key order using the map_top_n_keys() function.

LANGUAGE: sql
CODE:
SELECT map_top_n_keys(map(ARRAY['a', 'b', 'c'], ARRAY[3, 2, 1]), 2) --- ['c', 'b']

----------------------------------------

TITLE: Dropping a Schema in Presto SQL
DESCRIPTION: Demonstrates how to drop a schema named 'web' using the DROP SCHEMA command in Presto SQL. This command will remove the specified schema if it exists and is empty.

LANGUAGE: SQL
CODE:
DROP SCHEMA web

----------------------------------------

TITLE: Configuring ClickHouse Connector Properties in Presto
DESCRIPTION: Basic configuration properties for connecting Presto to a ClickHouse server. Specifies the connector name, connection URL, user, and password.

LANGUAGE: properties
CODE:
connector.name=clickhouse
clickhouse.connection-url=jdbc:clickhouse://host1:8123/
clickhouse.connection-user=default
clickhouse.connection-password=secret

----------------------------------------

TITLE: SQL COMMIT Command Syntax in Presto
DESCRIPTION: Defines the syntax for the COMMIT command in Presto SQL. The command can be used with or without the optional WORK keyword.

LANGUAGE: sql
CODE:
COMMIT [ WORK ]

----------------------------------------

TITLE: Creating a Table Based on Another Table in Presto SQL
DESCRIPTION: An example of creating a new table 'bigger_orders' using the LIKE clause to copy columns from the 'orders' table and adding additional columns.

LANGUAGE: sql
CODE:
CREATE TABLE bigger_orders (
  another_orderkey bigint,
  LIKE orders,
  another_orderdate date
)

----------------------------------------

TITLE: Checking No Values Match Predicate in Presto SQL
DESCRIPTION: Uses the no_values_match function to check if no values in a map satisfy a given predicate.

LANGUAGE: sql
CODE:
SELECT no_values_match(map(array['a', 'b', 'c'], array[1, 2, 3]), x -> x = 'd'); -- true

----------------------------------------

TITLE: Array Subscript Operation in Presto SQL
DESCRIPTION: Demonstrates how to access array elements using the [] operator, which is 1-based indexed.

LANGUAGE: sql
CODE:
SELECT my_array[1] AS first_element

----------------------------------------

TITLE: Dropping a Role in Presto SQL
DESCRIPTION: The DROP ROLE command is used to remove a specified role from the current catalog in Presto. The user executing this command must have admin privileges for the role being dropped.

LANGUAGE: sql
CODE:
DROP ROLE role_name

----------------------------------------

TITLE: Split to Map with Duplicate Key Handling
DESCRIPTION: Examples of split_to_map() function with custom duplicate key resolution

LANGUAGE: sql
CODE:
SELECT(split_to_map('a:1;b:2;a:3', ';', ':', (k, v1, v2) -> v1)); -- {"a": "1", "b": "2"}
SELECT(split_to_map('a:1;b:2;a:3', ';', ':', (k, v1, v2) -> CONCAT(v1, v2))); -- {"a": "13", "b": "2"}

----------------------------------------

TITLE: Granting SELECT Privilege to PUBLIC Role in Presto
DESCRIPTION: Example of granting SELECT privilege on the 'orders' table to the PUBLIC role, effectively granting the privilege to all users.

LANGUAGE: sql
CODE:
GRANT SELECT ON orders TO ROLE PUBLIC;

----------------------------------------

TITLE: Binary Hashing Functions
DESCRIPTION: Cryptographic and non-cryptographic hash functions for binary data, including common algorithms like MD5, SHA family, and specialized hash functions like xxHash64 and SpookyHash.

LANGUAGE: sql
CODE:
crc32(binary) -> bigint
md5(binary) -> varbinary
murmur3_x64_128(binary) -> varbinary
sha1(binary) -> varbinary
sha256(binary) -> varbinary
sha512(binary) -> varbinary
xxhash64(binary) -> varbinary
spooky_hash_v2_32(binary) -> varbinary
spooky_hash_v2_64(binary) -> varbinary

----------------------------------------

TITLE: Full Text Query Example
DESCRIPTION: SQL query demonstrating how to combine Presto SQL with Elasticsearch full text search

LANGUAGE: sql
CODE:
SELECT * FROM elasticsearch.default."tweets: +presto DB^2"

----------------------------------------

TITLE: Analyzing a Table with Catalog and Schema in Presto SQL
DESCRIPTION: Shows how to analyze a table 'stores' in a specific catalog 'hive' and schema 'default'.

LANGUAGE: sql
CODE:
ANALYZE hive.default.stores;

----------------------------------------

TITLE: Configuring BigQuery Connector in Presto (Properties)
DESCRIPTION: Example configuration for the BigQuery connector in Presto. This snippet shows how to set up the connector in a properties file, specifying the connector name and Google Cloud Platform project ID.

LANGUAGE: properties
CODE:
connector.name=bigquery
bigquery.project-id=<your Google Cloud Platform project id>

----------------------------------------

TITLE: CALL Statement Named Arguments Example
DESCRIPTION: Example showing how to call a procedure using named arguments with explicit parameter names.

LANGUAGE: sql
CODE:
CALL test(name => 'apple', id => 123);

----------------------------------------

TITLE: Filtering Maps in Presto SQL
DESCRIPTION: Shows how to filter a map based on a predicate function applied to each key-value pair.

LANGUAGE: sql
CODE:
SELECT map_filter(MAP(ARRAY[10, 20, 30], ARRAY['a', NULL, 'c']), (k, v) -> v IS NOT NULL); -- {10 -> a, 30 -> c}

----------------------------------------

TITLE: Row Comparison using IN Operator
DESCRIPTION: Demonstrates the use of IN operator to compare values against a list or subquery results.

LANGUAGE: sql
CODE:
SELECT * FROM region WHERE name IN ('AMERICA', 'EUROPE');

SELECT * FROM region WHERE name IN ('NULL', 'AMERICA', 'EUROPE');

SELECT * FROM table_name WHERE (column1, column2) IN ((NULL, 'value1'), ('value2', 'value3'));

----------------------------------------

TITLE: Creating Advanced Kudu Table
DESCRIPTION: Example of creating a table with multiple partitioning levels and custom column properties

LANGUAGE: sql
CODE:
CREATE TABLE user_events (
  user_id int WITH (primary_key = true),
  event_name varchar WITH (primary_key = true),
  message varchar,
  details varchar WITH (nullable = true, encoding = 'plain')
) WITH (
  partition_by_hash_columns = ARRAY['user_id'],
  partition_by_hash_buckets = 5,
  number_of_replicas = 3
);

----------------------------------------

TITLE: Executing EXPLAIN ANALYZE in Presto SQL
DESCRIPTION: Syntax for using the EXPLAIN ANALYZE command in Presto, including optional VERBOSE and format parameters.

LANGUAGE: sql
CODE:
EXPLAIN ANALYZE [VERBOSE] [(format <TEXT|JSON>)] statement

----------------------------------------

TITLE: Dropping a View in Presto SQL
DESCRIPTION: Demonstrates how to drop an existing view named 'orders_by_date' using the DROP VIEW statement in Presto.

LANGUAGE: sql
CODE:
DROP VIEW orders_by_date

----------------------------------------

TITLE: Using regexp_split for String Splitting
DESCRIPTION: Splits a string on letter patterns with optional surrounding whitespace, preserving trailing empty strings.

LANGUAGE: sql
CODE:
SELECT regexp_split('1a 2b 14m', '\s*[a-z]+\s*'); -- [1, 2, 14, ]

----------------------------------------

TITLE: Configuring Hive Metastore Kerberos Authentication
DESCRIPTION: Example configuration for enabling Kerberos authentication with the Hive metastore Thrift service.

LANGUAGE: none
CODE:
hive.metastore.authentication.type=KERBEROS
hive.metastore.service.principal=hive/hive-metastore-host.example.com@EXAMPLE.COM
hive.metastore.client.principal=presto@EXAMPLE.COM
hive.metastore.client.keytab=/etc/presto/hive.keytab

----------------------------------------

TITLE: Inserting Data into MySQL Table in Presto
DESCRIPTION: SQL command to insert data into a MySQL table using Presto.

LANGUAGE: sql
CODE:
INSERT INTO mysql.web.page_views VALUES(1, 'https://example.com', current_date, 'country');

----------------------------------------

TITLE: Accessing Presto Console via HTTP
DESCRIPTION: Shows the default URL to access the Presto Console web UI after starting Presto. The default port is 8080.

LANGUAGE: none
CODE:
http://localhost:8080

----------------------------------------

TITLE: Checking Any Value Matches Predicate in Presto SQL
DESCRIPTION: Uses the any_values_match function to check if any value in a map satisfies a given predicate.

LANGUAGE: sql
CODE:
SELECT ANY_VALUES_MATCH(map(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3]), x -> x = 1); -- true

----------------------------------------

TITLE: Creating Array, Map, and Row Types in Presto SQL
DESCRIPTION: Examples of creating Array, Map, and Row type values in Presto SQL.

LANGUAGE: SQL
CODE:
ARRAY[1, 2, 3]
MAP(ARRAY['foo', 'bar'], ARRAY[1, 2])
CAST(ROW(1, 2.0) AS ROW(x BIGINT, y DOUBLE))

----------------------------------------

TITLE: Using Simple CASE Expression in Presto SQL
DESCRIPTION: Demonstrates the simple form of CASE expression in Presto SQL. It evaluates an expression and compares it against multiple values, returning a corresponding result.

LANGUAGE: sql
CODE:
SELECT a,
       CASE a
           WHEN 1 THEN 'one'
           WHEN 2 THEN 'two'
           ELSE 'many'
       END

----------------------------------------

TITLE: Configuring Druid Properties in Presto
DESCRIPTION: Basic configuration properties for connecting Presto to Druid. These settings should be placed in etc/catalog/druid.properties file.

LANGUAGE: properties
CODE:
connector.name=druid
druid.coordinator-url=hostname:port
druid.broker-url=hostname:port
druid.schema-name=schema
druid.compute-pushdown-enabled=true

----------------------------------------

TITLE: Configuring Password File Authenticator in Presto
DESCRIPTION: This snippet shows how to configure the password file authenticator in Presto by creating an 'etc/password-authenticator.properties' file on the coordinator. It specifies the authenticator name and the path to the password file.

LANGUAGE: none
CODE:
password-authenticator.name=file
file.password-file=/path/to/password.db

----------------------------------------

TITLE: Specifying Role-Regex Map File Path in Presto Configuration
DESCRIPTION: This configuration snippet shows how to specify the path to the role-regex mapping file in Presto's config.properties file for the Configuration-based Authorizer.

LANGUAGE: none
CODE:
configuration-based-authorizer.role-regex-map.file-path=<path to mapping file>

----------------------------------------

TITLE: Creating Table from VALUES in Presto SQL
DESCRIPTION: Shows how to create a new table using VALUES statement with CREATE TABLE AS syntax.

LANGUAGE: sql
CODE:
CREATE TABLE example AS
SELECT * FROM (
    VALUES
        (1, 'a'),
        (2, 'b'),
        (3, 'c')
) AS t (id, name)

----------------------------------------

TITLE: Renaming Schema Example
DESCRIPTION: Example showing how to rename a schema from 'web' to 'traffic' in Presto.

LANGUAGE: sql
CODE:
ALTER SCHEMA web RENAME TO traffic

----------------------------------------

TITLE: Specifying Role-Regex Map File Path in Presto Configuration
DESCRIPTION: This configuration snippet shows how to specify the path to the role-regex mapping file in Presto's config.properties file for the Configuration-based Authorizer.

LANGUAGE: none
CODE:
configuration-based-authorizer.role-regex-map.file-path=<path to mapping file>

----------------------------------------

TITLE: Time Zone Conversion Example in Presto SQL
DESCRIPTION: Demonstrates how to convert timestamps between time zones using the AT TIME ZONE operator

LANGUAGE: sql
CODE:
SELECT timestamp '2012-10-31 01:00 UTC';
SELECT timestamp '2012-10-31 01:00 UTC' AT TIME ZONE 'America/Los_Angeles';

----------------------------------------

TITLE: Configuring HANA Connector Properties in Presto
DESCRIPTION: Basic configuration for the HANA connector in Presto. This snippet shows the essential properties needed to set up a connection to a HANA database, including the connector name, JDBC URL, and authentication credentials.

LANGUAGE: properties
CODE:
connector.name=hana
connection-url=jdbc:sap://[serverName[\instanceName][:portNumber]]
connection-user=root
connection-password=secret

----------------------------------------

TITLE: Named Columns VALUES Query in Presto SQL
DESCRIPTION: Demonstrates how to use VALUES within a SELECT statement and assign column names using table alias.

LANGUAGE: sql
CODE:
SELECT * FROM (
    VALUES
        (1, 'a'),
        (2, 'b'),
        (3, 'c')
) AS t (id, name)

----------------------------------------

TITLE: Configuring Presto JMX Catalog
DESCRIPTION: Example of configuring the JMX connector as a catalog in Presto.

LANGUAGE: none
CODE:
connector.name=jmx

----------------------------------------

TITLE: UNION Example
DESCRIPTION: Example of using UNION to combine result sets from multiple queries.

LANGUAGE: SQL
CODE:
SELECT 13
UNION
SELECT 42;

----------------------------------------

TITLE: Demonstrating Cosine Similarity in Presto SQL
DESCRIPTION: Example showing how to calculate cosine similarity between two sparse vectors represented as maps

LANGUAGE: sql
CODE:
SELECT cosine_similarity(MAP(ARRAY['a'], ARRAY[1.0]), MAP(ARRAY['a'], ARRAY[2.0]));

----------------------------------------

TITLE: Querying Role Grants in Presto SQL
DESCRIPTION: SQL command to display roles granted to the current session user. The command can optionally specify a catalog, otherwise it uses the current catalog. Results show direct role grants non-recursively.

LANGUAGE: sql
CODE:
SHOW ROLE GRANTS [ FROM catalog ]

----------------------------------------

TITLE: Introducing cosine_similarity Function in Presto 0.144.7
DESCRIPTION: A new function cosine_similarity has been added to Presto in this release. This function calculates the cosine similarity between two vectors, which is useful for various data analysis and machine learning tasks.

LANGUAGE: sql
CODE:
cosine_similarity()

----------------------------------------

TITLE: Revoking INSERT and SELECT Privileges in Presto SQL
DESCRIPTION: Example of revoking INSERT and SELECT privileges on the 'orders' table from user 'alice' in Presto SQL.

LANGUAGE: sql
CODE:
REVOKE INSERT, SELECT ON orders FROM alice;

----------------------------------------

TITLE: Configuring SQL Server Connector in Presto
DESCRIPTION: This snippet shows the basic configuration properties required to set up a SQL Server connector in Presto. It includes the connector name, JDBC connection URL, and authentication credentials.

LANGUAGE: properties
CODE:
connector.name=sqlserver
connection-url=jdbc:sqlserver://[serverName[\instanceName][:portNumber]]
connection-user=root
connection-password=secret

----------------------------------------

TITLE: Simple Procedure Call Example
DESCRIPTION: Basic example of calling a procedure with positional arguments.

LANGUAGE: sql
CODE:
CALL test(123, 'apple');

----------------------------------------

TITLE: HyperLogLog Usage Example with Visit Summaries
DESCRIPTION: Complete example demonstrating how to create a table for storing HyperLogLog sketches, insert summarized visit data, and query weekly unique users using merge operations.

LANGUAGE: sql
CODE:
CREATE TABLE visit_summaries (
  visit_date date,
  hll varbinary
);

INSERT INTO visit_summaries
SELECT visit_date, cast(approx_set(user_id) AS varbinary)
FROM user_visits
GROUP BY visit_date;

SELECT cardinality(merge(cast(hll AS HyperLogLog))) AS weekly_unique_users
FROM visit_summaries
WHERE visit_date >= current_date - interval '7' day;

----------------------------------------

TITLE: Binary Encoding and Decoding Functions
DESCRIPTION: Functions for encoding binary data to various formats (base64, base32, hex) and decoding back to binary. Includes both standard and URL-safe variants for base64.

LANGUAGE: sql
CODE:
to_base64(binary) -> varchar
from_base64(string) -> varbinary
to_base64url(binary) -> varchar
from_base64url(string) -> varbinary
from_base32(string) -> varbinary
to_base32(binary) -> varchar
to_hex(binary) -> varchar
from_hex(string) -> varbinary

----------------------------------------

TITLE: Retrieving Values from Maps using Subscript Operator in Presto SQL
DESCRIPTION: Demonstrates how to use the '[]' operator to retrieve a value from a map using a key.

LANGUAGE: sql
CODE:
SELECT name_to_age_map['Bob'] AS bob_age;

----------------------------------------

TITLE: Transforming Map Keys in Presto SQL
DESCRIPTION: Shows how to transform the keys of a map using a custom function.

LANGUAGE: sql
CODE:
SELECT transform_keys(MAP(ARRAY [1, 2, 3], ARRAY ['a', 'b', 'c']), (k, v) -> k + 1); -- {2 -> a, 3 -> b, 4 -> c}

----------------------------------------

TITLE: Describing Redshift Table Columns in Presto
DESCRIPTION: These SQL snippets demonstrate two equivalent ways to view the columns of a specific Redshift table using Presto: DESCRIBE and SHOW COLUMNS commands.

LANGUAGE: sql
CODE:
DESCRIBE redshift.web.clicks;
SHOW COLUMNS FROM redshift.web.clicks;

----------------------------------------

TITLE: Configuring Black Hole Connector in Presto
DESCRIPTION: Sets up the Black Hole connector by creating a catalog properties file. This configuration is essential for enabling the connector in Presto.

LANGUAGE: properties
CODE:
connector.name=blackhole

----------------------------------------

TITLE: Basic EXECUTE Command Syntax
DESCRIPTION: The basic syntax structure for the EXECUTE command in Presto SQL.

LANGUAGE: sql
CODE:
EXECUTE statement_name [ USING parameter1 [ , parameter2, ... ] ]

----------------------------------------

TITLE: Enabling S3 Select Pushdown for Hive Connector in Presto
DESCRIPTION: Configuration to enable S3 select pushdown for the Hive connector in Presto. This feature allows pushing down projections and predicates into S3 for text files, improving query performance.

LANGUAGE: properties
CODE:
hive.parquet.fail-on-corrupted-statistics=false
parquet_fail_with_corrupted_statistics=false

----------------------------------------

TITLE: Executing TRUNCATE Command on 'orders' Table in Presto SQL
DESCRIPTION: Demonstrates how to use the TRUNCATE command to delete all rows from a table named 'orders' in Presto SQL.

LANGUAGE: sql
CODE:
TRUNCATE TABLE orders;

----------------------------------------

TITLE: Running Presto server in Docker container
DESCRIPTION: Command to start the Presto server in a Docker container. It maps port 8080, mounts configuration files, and names the container 'presto'.

LANGUAGE: bash
CODE:
docker run -p 8080:8080 -it -v ./config.properties:/opt/presto-server/etc/config.properties -v ./jvm.config:/opt/presto-server/etc/jvm.config --name presto prestodb/presto:latest

----------------------------------------

TITLE: Querying System Schemas in Presto
DESCRIPTION: Shows how to list available schemas in the system catalog.

LANGUAGE: sql
CODE:
SHOW SCHEMAS FROM system;

----------------------------------------

TITLE: Creating Basic Role in Presto SQL
DESCRIPTION: An example of creating a simple role named 'admin' without specifying an admin.

LANGUAGE: sql
CODE:
CREATE ROLE admin;

----------------------------------------

TITLE: Enabling Parquet Column Name Access in Hive Catalog Properties
DESCRIPTION: Configures Presto to access Parquet columns by name instead of ordinal position. This is done by setting the 'hive.parquet.use-column-names' property to true in the Hive catalog properties file.

LANGUAGE: properties
CODE:
hive.parquet.use-column-names=true

----------------------------------------

TITLE: Querying Column Information with SHOW COLUMNS in Presto SQL
DESCRIPTION: This command lists all columns in a specified table along with their data types and other attributes. It provides a quick way to inspect the structure of a table in Presto.

LANGUAGE: SQL
CODE:
SHOW COLUMNS FROM table

----------------------------------------

TITLE: IP Prefix Generation in Presto SQL
DESCRIPTION: Demonstrates creating IP prefixes from IP addresses with specified subnet sizes. Works with both IPv4 and IPv6 addresses.

LANGUAGE: sql
CODE:
SELECT ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9);
SELECT ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48);

----------------------------------------

TITLE: Counting Set Bits in Presto SQL
DESCRIPTION: The bit_count function counts the number of bits set in a given number, treating it as a signed integer with a specified bit length in 2's complement representation.

LANGUAGE: SQL
CODE:
SELECT bit_count(9, 64); -- 2
SELECT bit_count(9, 8); -- 2
SELECT bit_count(-7, 64); -- 62
SELECT bit_count(-7, 8); -- 6

----------------------------------------

TITLE: Counting Set Bits in Presto SQL
DESCRIPTION: The bit_count function counts the number of bits set in a given number, treating it as a signed integer with a specified bit length in 2's complement representation.

LANGUAGE: SQL
CODE:
SELECT bit_count(9, 64); -- 2
SELECT bit_count(9, 8); -- 2
SELECT bit_count(-7, 64); -- 62
SELECT bit_count(-7, 8); -- 6

----------------------------------------

TITLE: Configuring Low Memory Killer Policy in Presto
DESCRIPTION: This configuration change replaces the 'query.low-memory-killer.enabled' property with 'query.low-memory-killer.policy'. It allows setting different policies for handling low memory situations in Presto queries.

LANGUAGE: SQL
CODE:
SET SESSION query.low-memory-killer.policy = 'total-reservation-on-blocked-nodes';

----------------------------------------

TITLE: Starting Presto Server in Foreground on Intel Mac
DESCRIPTION: Command to start the Presto server in the foreground on an Intel-based Mac system.

LANGUAGE: bash
CODE:
presto-server run

----------------------------------------

TITLE: Querying Oracle Tables
DESCRIPTION: SQL command to list all tables in a specific Oracle database schema.

LANGUAGE: sql
CODE:
SHOW TABLES FROM oracle.web;

----------------------------------------

TITLE: Configuring Basic JMX Connector in Presto
DESCRIPTION: Basic configuration for the JMX connector in Presto. This snippet shows the minimal setup required in the catalog properties file.

LANGUAGE: none
CODE:
connector.name=jmx

----------------------------------------

TITLE: Demonstrating NULL handling in AND operations in Presto SQL
DESCRIPTION: These SQL queries show how the AND operator handles NULL values in Presto. The results demonstrate that AND with NULL and true is NULL, AND with NULL and false is false, and AND with two NULL values is NULL.

LANGUAGE: sql
CODE:
SELECT CAST(null AS boolean) AND true; -- null

SELECT CAST(null AS boolean) AND false; -- false

SELECT CAST(null AS boolean) AND CAST(null AS boolean); -- null

----------------------------------------

TITLE: Aggregating Hudi Table Data by Date
DESCRIPTION: SQL query example demonstrating how to count records grouped by date in a Hudi table.

LANGUAGE: sql
CODE:
select dt, count(*) from stock_ticks_cow group by dt;

LANGUAGE: text
CODE:
    dt      | _col1 |\n------------+--------+\n 2018-08-31 |  99  |\n(1 rows)

----------------------------------------

TITLE: Configuring PostgreSQL Connector in Presto
DESCRIPTION: Example configuration for the PostgreSQL connector in Presto. This snippet shows how to set up a catalog properties file to connect to a PostgreSQL database.

LANGUAGE: properties
CODE:
connector.name=postgresql
connection-url=jdbc:postgresql://example.net:5432/database
connection-user=root
connection-password=secret

----------------------------------------

TITLE: Array and Map Expansion using UNNEST in Presto
DESCRIPTION: Demonstrates how to use UNNEST instead of Hive's LATERAL VIEW explode() for expanding arrays and maps.

LANGUAGE: sql
CODE:
SELECT student, score
FROM tests
CROSS JOIN UNNEST(scores) AS t (score);

----------------------------------------

TITLE: Encoding and Decoding Hexadecimal in Presto SQL
DESCRIPTION: The to_hex() and from_hex() functions convert between binary data and hexadecimal string representations.

LANGUAGE: SQL
CODE:
to_hex(binary) -> varchar
from_hex(string) -> varbinary

----------------------------------------

TITLE: Enabling Constraint Optimizations in Presto SQL
DESCRIPTION: Demonstrates how to enable constraint optimizations to improve performance for querying catalogs that support table constraints. This can be done using a session property or configuration property.

LANGUAGE: SQL
CODE:
SET SESSION exploit_constraints = true;

LANGUAGE: SQL
CODE:
-- Alternatively, set in configuration:
-- optimizer.exploit-constraints=true

----------------------------------------

TITLE: Configuring Redis Hash Value Type in Presto Table Definition
DESCRIPTION: JSON structure for defining a Redis table with hash value type in Presto. This snippet shows how to specify the 'hash' data format for the value field in the table definition file.

LANGUAGE: json
CODE:
{
    "tableName": "...",
    "schemaName": "...",
    "value": {
        "dataFormat": "hash",
        "fields": [
            ...
       ]
    }
}

----------------------------------------

TITLE: Generating Uniqueness Distribution of KHyperLogLog Sketch in Presto SQL
DESCRIPTION: This function returns a histogram representing the uniqueness distribution of a KHyperLogLog sketch. The X-axis represents uniqueness, and the Y-axis represents the relative frequency of x values.

LANGUAGE: SQL
CODE:
uniqueness_distribution(khll) ->  map<bigint,double>

----------------------------------------

TITLE: Defining Principal Rules for LDAP and Kerberos in Presto's File-Based Access Control
DESCRIPTION: This JSON snippet demonstrates how to define principal rules for LDAP and Kerberos authentication in Presto's file-based access control system, using regex patterns for matching and substitution.

LANGUAGE: json
CODE:
{
  "catalogs": [
    {
      "allow": true
    }
  ],
  "principals": [
    {
      "principal": "(.*)",
      "principal_to_user": "$1",
      "allow": true
    },
    {
      "principal": "([^/]+)/?.*@.*",
      "principal_to_user": "$1",
      "allow": true
    }
  ]
}

----------------------------------------

TITLE: Creating MySQL Table in Presto
DESCRIPTION: SQL statement to create a new MySQL table using Presto, defining columns and their data types.

LANGUAGE: sql
CODE:
CREATE TABLE mysql.web.page_views (
  user_id bigint,
  page_url varchar,
  ds date,
  country varchar
);

----------------------------------------

TITLE: Configuring File-Based System Access Control in Presto
DESCRIPTION: This snippet demonstrates how to set up file-based system access control in Presto, specifying the plugin name and the location of the configuration file.

LANGUAGE: properties
CODE:
access-control.name=file
security.config-file=etc/rules.json

----------------------------------------

TITLE: Configuring Size-Based Join Distribution in Presto SQL
DESCRIPTION: Shows how to disable the size-based join distribution optimization, which considers source table size when choosing join order and distribution type when the cost-based optimizer fails.

LANGUAGE: SQL
CODE:
SET SESSION size_based_join_distribution_type = false;

----------------------------------------

TITLE: Calculating Cardinality of KHyperLogLog Sketch in Presto SQL
DESCRIPTION: Calculates the cardinality of the MinHash sketch, which represents x's cardinality in the KHyperLogLog structure.

LANGUAGE: SQL
CODE:
cardinality(khll)

----------------------------------------

TITLE: Implementing Delete Row ID Column Handle Method
DESCRIPTION: Method signature for retrieving the column handle used to identify rows for deletion operations.

LANGUAGE: java
CODE:
ColumnHandle getDeleteRowIdColumnHandle(
    ConnectorSession session,
    ConnectorTableHandle tableHandle)

----------------------------------------

TITLE: Merging Set Digests in Presto SQL
DESCRIPTION: Shows how to merge multiple set digests into a single set digest using the merge_set_digest function.

LANGUAGE: SQL
CODE:
SELECT merge_set_digest(a) from (SELECT make_set_digest(value) as a FROM (VALUES 4,3,2,1) T(value));

----------------------------------------

TITLE: Configuring Certificate Authentication
DESCRIPTION: Setting up certificate-based authentication alongside password authentication.

LANGUAGE: text
CODE:
http-server.authentication.type=PASSWORD,CERTIFICATE

----------------------------------------

TITLE: Array T-Digest Merge
DESCRIPTION: Merges an array of T-digests into a single T-digest structure.

LANGUAGE: sql
CODE:
merge_tdigest(array<tdigest<double>>) -> tdigest<double>

----------------------------------------

TITLE: Displaying Query Plan with HBO Statistics in Presto
DESCRIPTION: This snippet shows an example of a query plan output in Presto with HBO statistics. It demonstrates how HBO statistics are displayed with the source 'HistoryBasedSourceInfo' for plan nodes.

LANGUAGE: text
CODE:
         Fragment 1 [HASH]                                                                                                                                            >
             Output layout: [orderpriority, count]                                                                                                                    >
             Output partitioning: SINGLE []                                                                                                                           >
             Stage Execution Strategy: UNGROUPED_EXECUTION                                                                                                            >
             - Project[PlanNodeId 392][projectLocality = LOCAL] => [orderpriority:varchar(15), count:bigint]                                                          >
                     Estimates: {source: HistoryBasedSourceInfo, rows: 5 (117B), cpu: ?, memory: ?, network: ?}                                                       >
                 - Aggregate(FINAL)[orderpriority][$hashvalue][PlanNodeId 4] => [orderpriority:varchar(15), $hashvalue:bigint, count:bigint]                          >
                         Estimates: {source: HistoryBasedSourceInfo, rows: 5 (117B), cpu: ?, memory: ?, network: ?}                                                   >
                         count := "presto.default.count"((count_8)) (1:50)                                                                                            >
                     - LocalExchange[PlanNodeId 354][HASH][$hashvalue] (orderpriority) => [orderpriority:varchar(15), count_8:bigint, $hashvalue:bigint]              >
                         - RemoteSource[2] => [orderpriority:varchar(15), count_8:bigint, $hashvalue_9:bigint]

----------------------------------------

TITLE: Show Create Table Example Query
DESCRIPTION: Example of using SHOW CREATE TABLE to display the creation SQL for the 'orders' table in the sf1 schema.

LANGUAGE: sql
CODE:
SHOW CREATE TABLE sf1.orders;

----------------------------------------

TITLE: ALTER FUNCTION Basic Syntax
DESCRIPTION: The basic syntax for altering a function, showing the structure and optional parameter specification along with null handling options.

LANGUAGE: sql
CODE:
ALTER FUNCTION qualified_function_name [ ( parameter_type[, ...] ) ]
RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT

----------------------------------------

TITLE: Enabling Join Prefiltering in Presto
DESCRIPTION: Shows how to enable the join_prefilter_build_side session property to improve join performance by prefiltering the build side with distinct keys from the probe side.

LANGUAGE: SQL
CODE:
SET SESSION join_prefilter_build_side = true;

----------------------------------------

TITLE: URL Encoding and Decoding Functions in Presto SQL
DESCRIPTION: Defines URL encoding and decoding functions in Presto SQL. The url_encode function escapes characters for safe inclusion in URL parameters, while url_decode reverses this process.

LANGUAGE: sql
CODE:
url_encode(value) -> varchar

url_decode(value) -> varchar

----------------------------------------

TITLE: Creating Table from Existing Data
DESCRIPTION: Example of creating a table in the Black Hole connector by copying schema and data from an existing table.

LANGUAGE: sql
CODE:
CREATE TABLE blackhole.test.nation AS
SELECT * from tpch.tiny.nation;

----------------------------------------

TITLE: Configuring Join Distribution Type Property
DESCRIPTION: Property configuration for controlling distributed join behavior in Presto. Supports automatic, partitioned and broadcast join types.

LANGUAGE: properties
CODE:
join-distribution-type=AUTOMATIC

----------------------------------------

TITLE: Using from_utf8 Function in Presto SQL
DESCRIPTION: The from_utf8 function is introduced to correct invalid UTF-8 data. It can be used in SQL queries to ensure proper Unicode handling.

LANGUAGE: SQL
CODE:
SELECT from_utf8(column_name) FROM table_name;

----------------------------------------

TITLE: String Functions in Presto for Teradata Compatibility
DESCRIPTION: A collection of string manipulation functions that provide Teradata compatibility, including hexadecimal conversion and substring operations.

LANGUAGE: sql
CODE:
char2hexint(string) -> varchar
index(string, substring) -> bigint
substring(string, start) -> varchar
substring(string, start, length) -> varchar

----------------------------------------

TITLE: Configuring Left Join Array Contains to Equi Join Rewrite in Presto SQL
DESCRIPTION: Adds session property that transforms left joins with an ARRAY CONTAINS condition in the join criteria into an equi join.

LANGUAGE: SQL
CODE:
SET SESSION rewrite_left_join_array_contains_to_equi_join = true;

----------------------------------------

TITLE: Using USE Statement with Schema Only in Presto SQL
DESCRIPTION: Shows how to use the USE statement to switch to a specific schema within the current catalog in Presto SQL. This example switches to the 'information_schema' schema.

LANGUAGE: sql
CODE:
USE information_schema;

----------------------------------------

TITLE: Padding Binary Data in Presto SQL
DESCRIPTION: The lpad() and rpad() functions add padding to binary data on the left or right side respectively. They take the binary to pad, the desired size, and the padding binary as arguments.

LANGUAGE: SQL
CODE:
lpad(binary, size, padbinary) -> varbinary
rpad(binary, size, padbinary) -> varbinary

----------------------------------------

TITLE: Binary Endian Conversion Functions
DESCRIPTION: Functions for converting between binary and numeric formats using big-endian encoding, including support for 32-bit and 64-bit integers and IEEE 754 floating-point formats.

LANGUAGE: sql
CODE:
to_big_endian_64(bigint) -> varbinary
from_big_endian_64(binary) -> bigint
to_big_endian_32(integer) -> varbinary
from_big_endian_32(binary) -> integer
to_ieee754_32(real) -> varbinary
from_ieee754_32(binary) -> real
to_ieee754_64(double) -> varbinary
from_ieee754_64(binary) -> double

----------------------------------------

TITLE: CREATE SCHEMA Syntax in Presto SQL
DESCRIPTION: Defines the syntax for creating a new schema in Presto. It allows for optional IF NOT EXISTS clause and WITH clause for setting properties.

LANGUAGE: sql
CODE:
CREATE SCHEMA [ IF NOT EXISTS ] schema_name
[ WITH ( property_name = expression [, ...] ) ]

----------------------------------------

TITLE: Configuring Adaptive Partial Aggregation in Presto SQL
DESCRIPTION: Adds support for adaptive partial aggregation which disables partial aggregation in cases where it could be inefficient. This feature is configurable by the session property 'adaptive_partial_aggregation' (disabled by default).

LANGUAGE: SQL
CODE:
SET SESSION adaptive_partial_aggregation = true;

----------------------------------------

TITLE: Ranking Orders Example in Presto SQL
DESCRIPTION: Shows how to rank orders by price for each clerk using the rank() window function.

LANGUAGE: sql
CODE:
SELECT orderkey, clerk, totalprice,
       rank() OVER (PARTITION BY clerk
                    ORDER BY totalprice DESC) AS rnk
FROM orders
ORDER BY clerk, rnk

----------------------------------------

TITLE: Enabling Spill Encryption in Presto SQL
DESCRIPTION: Enable spill encryption to protect spilled data from being recovered from disk files. The spill-encryption-enabled property is used to enable this feature.

LANGUAGE: sql
CODE:
SET SESSION spill-encryption-enabled = true

----------------------------------------

TITLE: Enabling Spill Encryption in Presto SQL
DESCRIPTION: Enable spill encryption to protect spilled data from being recovered from disk files. The spill-encryption-enabled property is used to enable this feature.

LANGUAGE: sql
CODE:
SET SESSION spill-encryption-enabled = true

----------------------------------------

TITLE: Update Multiple Columns for All Customers
DESCRIPTION: Example demonstrating how to update multiple columns (account_manager and assign_date) for all records in the customers table.

LANGUAGE: sql
CODE:
UPDATE customers SET
  account_manager = 'John Henry',
  assign_date = DATE '2007-01-01';

----------------------------------------

TITLE: SQL Geometry Examples
DESCRIPTION: Example formats of Well-Known Text (WKT) representations for different geometric objects

LANGUAGE: sql
CODE:
POINT (0 0)
LINESTRING (0 0, 1 1, 1 2)
POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1))
MULTIPOINT (0 0, 1 2)
MULTILINESTRING ((0 0, 1 1, 1 2), (2 3, 3 2, 5 4))
MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))
GEOMETRYCOLLECTION (POINT(2 3), LINESTRING (2 3, 3 4))

----------------------------------------

TITLE: Implicit Join Syntax in Presto SQL
DESCRIPTION: Demonstrates the newly supported implicit join syntax in Presto SQL. This allows for a more concise way of writing joins without explicitly using the JOIN keyword.

LANGUAGE: SQL
CODE:
SELECT * FROM a, b WHERE a.id = b.id;

----------------------------------------

TITLE: Using noisy_count_if_gaussian in SQL
DESCRIPTION: Shows how to use noisy_count_if_gaussian to count TRUE values with added Gaussian noise. Takes a boolean condition, noise scale, and optional random seed.

LANGUAGE: sql
CODE:
SELECT noisy_count_if_gaussian(orderkey > 10000, 20.0) FROM tpch.tiny.lineitem;
SELECT noisy_count_if_gaussian(orderkey > 10000, 20.0) FROM tpch.tiny.lineitem WHERE false;

----------------------------------------

TITLE: Binary Padding Functions
DESCRIPTION: Functions for padding binary values to a specified length with a given padding value, supporting both left and right padding operations.

LANGUAGE: sql
CODE:
lpad(binary, size, padbinary) -> varbinary
rpad(binary, size, padbinary) -> varbinary

----------------------------------------

TITLE: Preparing a Parameterized SELECT Query in Presto SQL
DESCRIPTION: Shows how to prepare a SELECT query with parameters. This query selects names from the 'nation' table based on regionkey and nationkey values that will be provided during execution.

LANGUAGE: sql
CODE:
PREPARE my_select2 FROM
SELECT name FROM nation WHERE regionkey = ? AND nationkey < ?;

----------------------------------------

TITLE: Validating Output from Operators in Prestissimo
DESCRIPTION: Adds a session property to identify malformed output from operators in Prestissimo (Native Execution).

LANGUAGE: SQL
CODE:
SET SESSION native_debug.validate_output_from_operators = true;

----------------------------------------

TITLE: Creating RGB Color Values in SQL (Presto)
DESCRIPTION: Function for creating a color value from individual red, green, and blue components specified as integers.

LANGUAGE: sql
CODE:
rgb(red, green, blue) -> color

----------------------------------------

TITLE: Configuring ORC Buffer Size in Java
DESCRIPTION: Sets the maximum size for a single ORC buffer to reduce heap fragmentation and excessive buffers. The default value is 8MB.

LANGUAGE: java
CODE:
hive.orc.max-buffer-size

----------------------------------------

TITLE: Creating Temporary Square Function
DESCRIPTION: Example of creating a temporary function that calculates the square of an integer input.

LANGUAGE: sql
CODE:
CREATE TEMPORARY FUNCTION square(x int)
RETURNS int
RETURN x * x

----------------------------------------

TITLE: Casting Array Types in Presto SQL
DESCRIPTION: Support for casting between array types is added. This allows conversion from ARRAY(F) to ARRAY(T) where F and T are compatible types.

LANGUAGE: SQL
CODE:
SELECT CAST(array_column AS ARRAY(INTEGER)) FROM table_name;

----------------------------------------

TITLE: Enabling Password Authentication in Presto Server Config
DESCRIPTION: Configuration property required in coordinator's config.properties file to enable password authentication.

LANGUAGE: properties
CODE:
http-server.authentication.type=PASSWORD

----------------------------------------

TITLE: Introducing Column Access Control Optimization in Presto
DESCRIPTION: Adds an option to ignore access checks on columns referenced in a query but not required for the final result. This can be enabled using a session property.

LANGUAGE: rst
CODE:
* Add support for ignoring access checks on columns that are referenced in the query, but are not required to compute the query results. This can be enabled with the ``check_access_control_on_utilized_columns_only`` session property.

----------------------------------------

TITLE: Weighted Aggregation into Quantile Digest in Presto SQL
DESCRIPTION: This function aggregates input values into a quantile digest using per-item weights. It returns a qdigest composed of all input values of x, weighted by w.

LANGUAGE: sql
CODE:
qdigest_agg(x, w) -> qdigest<[same as x]>

----------------------------------------

TITLE: Verifying Java Keystore File Contents
DESCRIPTION: This command uses keytool to list and verify the contents of a Java Keystore file. It's useful for troubleshooting and ensuring the keystore is properly configured.

LANGUAGE: none
CODE:
$ keytool -list -v -keystore /etc/presto/presto.jks

----------------------------------------

TITLE: Using regexp_replace with Lambda Function
DESCRIPTION: Replaces patterns using a lambda function that capitalizes first letters of words.

LANGUAGE: sql
CODE:
SELECT regexp_replace('new york', '(\w)(\w*)', x -> upper(x[1]) || lower(x[2])); --'New York'

----------------------------------------

TITLE: Setting Roles in Presto SQL
DESCRIPTION: The SET ROLE command is used to enable or disable roles for the current session. It can set a single role, all roles, or no roles. The user must have the necessary permissions to set a specific role.

LANGUAGE: sql
CODE:
SET ROLE ( role | ALL | NONE )

----------------------------------------

TITLE: Using New Hash Functions in Presto SQL
DESCRIPTION: Demonstrates the usage of newly added hash functions spooky_hash_v2_32 and spooky_hash_v2_64 for generating 32-bit and 64-bit hash values respectively.

LANGUAGE: SQL
CODE:
SELECT spooky_hash_v2_32(column_name) FROM table_name;
SELECT spooky_hash_v2_64(column_name) FROM table_name;

----------------------------------------

TITLE: Rendering Value with Specific Color in Presto SQL
DESCRIPTION: This function renders a value (double, bigint, or varchar) using a specified color with ANSI color codes.

LANGUAGE: SQL
CODE:
render(x, color) -> varchar

----------------------------------------

TITLE: Using regexp_replace with Lambda Function
DESCRIPTION: Replaces matches using a lambda function that receives capturing groups as parameters.

LANGUAGE: sql
CODE:
SELECT regexp_replace('new york', '(\w)(\w*)', x -> upper(x[1]) || lower(x[2])); --'New York'

----------------------------------------

TITLE: Parametric Type Examples in Presto
DESCRIPTION: Shows examples of parametric type declarations in SQL syntax, demonstrating how type parameters are used with VARCHAR and DECIMAL types.

LANGUAGE: sql
CODE:
VARCHAR(10)\nDECIMAL(22, 5)

----------------------------------------

TITLE: Grep Command for Filtering TaskStatus Update Logs
DESCRIPTION: Example of using grep to filter and view logs related to TaskStatus updates in the Presto worker protocol.

LANGUAGE: bash
CODE:
cat stderr* | grep '/v1/task/20240402_223203_00000_kg5tr.11.0.455.0/status'

----------------------------------------

TITLE: Retrieving Stage Details in Presto REST API
DESCRIPTION: HTTP GET endpoint that returns detailed information about a stage in a Presto query. This endpoint allows querying stage metadata and execution details.

LANGUAGE: rest
CODE:
GET /v1/stage

----------------------------------------

TITLE: Granting Select with Grant Option
DESCRIPTION: Example demonstrating how to grant SELECT privilege with GRANT OPTION, allowing the grantee to further grant the privilege to others.

LANGUAGE: sql
CODE:
GRANT SELECT ON nation TO alice WITH GRANT OPTION;

----------------------------------------

TITLE: Revoking All Privileges in Presto SQL
DESCRIPTION: Example of revoking all privileges on the 'test' table from user 'alice' in Presto SQL.

LANGUAGE: sql
CODE:
REVOKE ALL PRIVILEGES ON test FROM alice;

----------------------------------------

TITLE: Adding Column with Comment in SQL
DESCRIPTION: Demonstrates the new ability to include a comment when adding a column to a table using ALTER TABLE statement.

LANGUAGE: SQL
CODE:
ALTER TABLE

----------------------------------------

TITLE: Creating Keyspace and Table in Cassandra
DESCRIPTION: CQL commands to create a keyspace and a users table in Cassandra. This is an example setup for testing the Presto Cassandra connector.

LANGUAGE: none
CODE:
cqlsh> CREATE KEYSPACE mykeyspace
   ... WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };
cqlsh> USE mykeyspace;
cqlsh:mykeyspace> CREATE TABLE users (
              ...   user_id int PRIMARY KEY,
              ...   fname text,
              ...   lname text
              ... );

----------------------------------------

TITLE: Compression Codec Session Property Values
DESCRIPTION: Valid values for the compression_codec session property when writing files in Hive connector.

LANGUAGE: properties
CODE:
NONE
SNAPPY
GZIP

----------------------------------------

TITLE: Configuring Accumulo Connector Properties
DESCRIPTION: Basic configuration properties needed in accumulo.properties to mount the Accumulo connector

LANGUAGE: none
CODE:
connector.name=accumulo
accumulo.instance=xxx
accumulo.zookeepers=xxx
accumulo.username=username
accumulo.password=password

----------------------------------------

TITLE: Changing Time Zone of a Timestamp in SQL
DESCRIPTION: Shows how to change the time zone of an existing timestamp using the AT TIME ZONE clause, converting from one time zone to another.

LANGUAGE: SQL
CODE:
SELECT TIMESTAMP '2014-03-14 09:30:00 Europe/Berlin'
     AT TIME ZONE 'America/Los_Angeles';

----------------------------------------

TITLE: SQL Configuration Properties for Task Scheduling
DESCRIPTION: Configuration properties to control task scheduling behavior and query prioritization in Presto 0.181. These settings affect how CPU resources are allocated between long-running and short queries.

LANGUAGE: properties
CODE:
task.level-absolute-priority=true
task.legacy-scheduling-behavior=false
task.level-time-multiplier=<value>

----------------------------------------

TITLE: Creating Cassandra Keyspace and Table
DESCRIPTION: CQL commands to create a sample keyspace and users table in Cassandra

LANGUAGE: cql
CODE:
cqlsh> CREATE KEYSPACE mykeyspace
   ... WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };
cqlsh> USE mykeyspace;
cqlsh:mykeyspace> CREATE TABLE users (
              ...   user_id int PRIMARY KEY,
              ...   fname text,
              ...   lname text
              ... );

----------------------------------------

TITLE: Renaming a View in Presto SQL
DESCRIPTION: The ALTER VIEW RENAME TO statement is used to rename an existing view in Presto. It allows changing the name of a view without dropping and recreating it, preserving the view's definition, security settings, and dependencies.

LANGUAGE: sql
CODE:
ALTER VIEW [IF EXISTS] old_view_name RENAME TO new_view_name;

----------------------------------------

TITLE: Creating a Simple View in Presto SQL
DESCRIPTION: Demonstrates how to create a basic view named 'test' that selects and transforms data from the 'orders' table.

LANGUAGE: sql
CODE:
CREATE VIEW test AS
SELECT orderkey, orderstatus, totalprice / 2 AS half
FROM orders

----------------------------------------

TITLE: Utilizing New String Padding Functions in Presto 0.143
DESCRIPTION: The release introduces lpad and rpad functions for string padding operations in Presto SQL queries.

LANGUAGE: SQL
CODE:
SELECT lpad(name, 10, ' '), rpad(code, 5, '0') FROM items

----------------------------------------

TITLE: Listing Tables in SingleStore Database using Presto
DESCRIPTION: This SQL snippet shows how to list tables in a specific SingleStore database using the SHOW TABLES command in Presto.

LANGUAGE: sql
CODE:
SHOW TABLES FROM singlestore.web;

----------------------------------------

TITLE: Creating Tangent Function with Full Options
DESCRIPTION: Extended example of creating a tangent function with all optional characteristics including function description and explicit language specification.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION example.default.tan(x double)
RETURNS double
COMMENT 'tangent trigonometric function'
LANGUAGE SQL
DETERMINISTIC
RETURNS NULL ON NULL INPUT
RETURN sin(x) / cos(x)

----------------------------------------

TITLE: Executing Prepared Statement Without Parameters
DESCRIPTION: Example of preparing and executing a simple SELECT statement without parameters.

LANGUAGE: sql
CODE:
PREPARE my_select1 FROM
SELECT name FROM nation;

LANGUAGE: sql
CODE:
EXECUTE my_select1;

----------------------------------------

TITLE: Setting Hive Connector Options in SQL
DESCRIPTION: These configuration options for the Hive connector set the size and number of initial splits, which can be useful for speeding up small queries that would otherwise have low parallelism.

LANGUAGE: SQL
CODE:
hive.max-initial-split-size=<value>
hive.max-initial-splits=<value>

----------------------------------------

TITLE: Creating Set Digest from Bigint Array in Presto SQL
DESCRIPTION: Demonstrates how to create a set digest from a bigint array using the make_set_digest function.

LANGUAGE: SQL
CODE:
SELECT make_set_digest(value)
FROM (VALUES 1, 2, 3) T(value);

----------------------------------------

TITLE: Querying Redshift Table Data in Presto
DESCRIPTION: This SQL snippet shows how to query data from a Redshift table using a standard SELECT statement in Presto.

LANGUAGE: sql
CODE:
SELECT * FROM redshift.web.clicks;

----------------------------------------

TITLE: Querying with Correlated Scalar Subquery in SQL
DESCRIPTION: Example SQL query demonstrating a correlated scalar subquery that can benefit from the push_aggregation_through_join optimization. This query selects items where the current price is greater than the average price for items in the same category.

LANGUAGE: sql
CODE:
SELECT * FROM item i
    WHERE i.i_current_price > (
        SELECT AVG(j.i_current_price) FROM item j
            WHERE i.i_category = j.i_category);

----------------------------------------

TITLE: ROLLBACK Command Examples
DESCRIPTION: Demonstrates practical examples of using the ROLLBACK command, showing both the simple form and the form with the optional WORK keyword.

LANGUAGE: sql
CODE:
ROLLBACK;
ROLLBACK WORK;

----------------------------------------

TITLE: Using min_by and max_by Aggregations in Presto SQL
DESCRIPTION: The min_by and max_by aggregation functions now have an additional form that can return multiple values, enhancing their flexibility in queries.

LANGUAGE: sql
CODE:
min_by(x, y)
max_by(x, y)

----------------------------------------

TITLE: Defining Array Fields in Elasticsearch Mapping
DESCRIPTION: cURL command to define array fields in the _meta.presto mapping

LANGUAGE: shell
CODE:
curl --request PUT \
    --url localhost:9200/doc/_mapping \
    --header 'content-type: application/json' \
    --data '
{
    "_meta": {
        "presto":{
            "array_string_field":{
                "isArray":true
            },
            "object_field":{
                "array_int_field":{
                    "isArray":true
                }
            },
        }
    }
}'

----------------------------------------

TITLE: Executing a Query with Presto CLI in Docker
DESCRIPTION: Example of running a SQL query using the Presto CLI within a Docker container.

LANGUAGE: sql
CODE:
SELECT
  l.returnflag,
  l.linestatus,
  sum(l.quantity)                                       AS sum_qty,
  sum(l.extendedprice)                                  AS sum_base_price,
  sum(l.extendedprice * (1 - l.discount))               AS sum_disc_price,
  sum(l.extendedprice * (1 - l.discount) * (1 + l.tax)) AS sum_charge,
  avg(l.quantity)                                       AS avg_qty,
  avg(l.extendedprice)                                  AS avg_price,
  avg(l.discount)                                       AS avg_disc,
  count(*)                                              AS count_order
FROM
  tpch.sf1.lineitem AS l
WHERE
  l.shipdate <= DATE '1998-12-01' - INTERVAL '90' DAY
GROUP BY
  l.returnflag,
  l.linestatus
ORDER BY
  l.returnflag,
  l.linestatus;

----------------------------------------

TITLE: Creating and Updating Password File using htpasswd
DESCRIPTION: These commands demonstrate how to create an empty password file and add or update a user's password using the htpasswd utility. The -B flag specifies bcrypt, and -C 10 sets the cost factor.

LANGUAGE: none
CODE:
touch password.db
htpasswd -B -C 10 password.db test

----------------------------------------

TITLE: Using UUID Type in Presto SQL
DESCRIPTION: Example of using the UUID type in Presto SQL, representing a Universally Unique Identifier.

LANGUAGE: SQL
CODE:
UUID '12151fd2-7586-11e9-8f9e-2a86e4085a59'

----------------------------------------

TITLE: Configuring Hive Storage Format
DESCRIPTION: Configuration property to specify the storage format for writing data to Hive. Valid options include RCBINARY (default), RCTEXT, SEQUENCEFILE, and TEXTFILE. Set in Hive catalog properties file.

LANGUAGE: properties
CODE:
hive.storage-format=RCBINARY

----------------------------------------

TITLE: Task Info Refresh Configuration
DESCRIPTION: New configuration property for controlling task info freshness intervals

LANGUAGE: sql
CODE:
task.info-refresh-max-wait

----------------------------------------

TITLE: Defining PREPARE Statement Syntax in Presto SQL
DESCRIPTION: Specifies the syntax for the PREPARE statement in Presto SQL. It shows how to name a prepared statement and associate it with a SQL query.

LANGUAGE: sql
CODE:
PREPARE statement_name FROM statement

----------------------------------------

TITLE: Configuring Prometheus Properties in Presto
DESCRIPTION: Basic configuration properties for connecting Presto to Prometheus. These properties should be added to etc/catalog/prometheus.properties file.

LANGUAGE: properties
CODE:
connector.name=prometheus
prometheus.uri=http://localhost:9090
prometheus.query-chunk-duration=1d
prometheus.max-query-duration=1h
prometheus.cache-ttl=30s
prometheus.bearer-token-file=/path/to/bearer/token/file
prometheus.tls.enabled=true
prometheus.tls.truststore-path=/path/to/truststore
prometheus.tls.truststore-password=truststorePassword
verify-host-name=true

----------------------------------------

TITLE: Inserting a Row with Null Column in Presto SQL
DESCRIPTION: Shows how to insert a row into the 'nation' table without specifying all columns, resulting in a NULL value for the omitted 'comment' column.

LANGUAGE: sql
CODE:
INSERT INTO nation (nationkey, name, regionkey)
VALUES (26, 'POLAND', 3);

----------------------------------------

TITLE: Fully Qualified Procedure Call
DESCRIPTION: Example demonstrating how to call a procedure using its fully qualified name including catalog and schema.

LANGUAGE: sql
CODE:
CALL catalog.schema.test();

----------------------------------------

TITLE: String Function Updates
DESCRIPTION: Fixed boundary handling in lower() and upper() functions when processing Unicode code point U+10FFFF

LANGUAGE: sql
CODE:
lower()
upper()

----------------------------------------

TITLE: Configuring Prometheus Connector in Presto
DESCRIPTION: This snippet shows the configuration properties needed to set up the Prometheus connector in Presto. It includes settings for the Prometheus URI, query durations, caching, authentication, and TLS options.

LANGUAGE: properties
CODE:
connector.name=prometheus
prometheus.uri=http://localhost:9090
prometheus.query-chunk-duration=1d
prometheus.max-query-duration=1h
prometheus.cache-ttl=30s
prometheus.bearer-token-file=/path/to/bearer/token/file
prometheus.tls.enabled=true
prometheus.tls.truststore-path=/path/to/truststore
prometheus.tls.truststore-password=truststorePassword
verify-host-name=true

----------------------------------------

TITLE: IP Subnet Range Calculation in Presto SQL
DESCRIPTION: Returns an array containing the smallest and largest IP addresses in the specified subnet.

LANGUAGE: sql
CODE:
SELECT ip_subnet_range(IPPREFIX '1.2.3.160/24');
SELECT ip_subnet_range(IPPREFIX '64:ff9b::52f4/120');

----------------------------------------

TITLE: Configuring Hive Local Scheduling in Presto
DESCRIPTION: Configuration options to enable forced local scheduling of splits in Hive connector. Includes both the configuration property and session property settings.

LANGUAGE: properties
CODE:
hive.force-local-scheduling
force_local_scheduling

----------------------------------------

TITLE: Drop Function with Parameter Type - Presto SQL
DESCRIPTION: Example of dropping a specific function signature with explicit parameter type.

LANGUAGE: sql
CODE:
DROP FUNCTION example.default.tan(double)

----------------------------------------

TITLE: Configuring Basic Thrift Connector Properties
DESCRIPTION: Basic configuration for the Presto Thrift connector, specifying the connector name and client addresses in the catalog properties file.

LANGUAGE: none
CODE:
connector.name=presto-thrift
presto.thrift.client.addresses=host:port,host:port

----------------------------------------

TITLE: Truncating Map to Top N Entries in Presto SQL
DESCRIPTION: Shows how to truncate a map to keep only the top N entries based on values using the map_top_n() function.

LANGUAGE: sql
CODE:
SELECT map_top_n(map(ARRAY['a', 'b', 'c'], ARRAY[2, 3, 1]), 2) --- {'b' -> 3, 'a' -> 2}

----------------------------------------

TITLE: Creating Accumulo Table in Presto
DESCRIPTION: SQL statement to create a new table in Presto that maps to an Accumulo table.

LANGUAGE: sql
CODE:
CREATE TABLE myschema.scientists (
  recordkey VARCHAR,
  name VARCHAR,
  age BIGINT,
  birthday DATE
);

----------------------------------------

TITLE: Launching Presto on Spark Using spark-submit
DESCRIPTION: Command to submit a Presto query for execution on Spark cluster, specifying executor cores, task CPU allocation, and various configuration parameters including catalogs and schema settings.

LANGUAGE: shell
CODE:
/spark/bin/spark-submit \
--master spark://spark-master:7077 \
--executor-cores 4 \
--conf spark.task.cpus=4 \
--class com.facebook.presto.spark.launcher.PrestoSparkLauncher \
  presto-spark-launcher-|version|.jar \
--package presto-spark-package-|version|.tar.gz \
--config /presto/etc/config.properties \
--catalogs /presto/etc/catalogs \
--catalog hive \
--schema default \
--file query.sql

----------------------------------------

TITLE: Configuring Thrift Server Addresses
DESCRIPTION: Example of configuring multiple Thrift server addresses using IP addresses and ports

LANGUAGE: properties
CODE:
presto.thrift.client.addresses=192.0.2.3:7777,192.0.2.4:7779

----------------------------------------

TITLE: Creating Table with Custom Field Length
DESCRIPTION: Creating a Black Hole table with custom field length for variable length columns and specific row generation configuration.

LANGUAGE: sql
CODE:
CREATE TABLE blackhole.test.nation (
  nationkey bigint,
  name varchar
)
WITH (
  split_count = 500,
  pages_per_split = 1000,
  rows_per_page = 2000,
  field_length = 100
);

----------------------------------------

TITLE: Merging KHyperLogLog Sketches in Presto SQL
DESCRIPTION: This function returns the KHyperLogLog of the aggregate union of individual KHyperLogLog structures.

LANGUAGE: SQL
CODE:
merge(khll) -> KHyperLogLog

----------------------------------------

TITLE: Configuring Hive Metastore Catalog
DESCRIPTION: Basic configuration for setting up Iceberg with Hive Metastore catalog

LANGUAGE: none
CODE:
connector.name=iceberg
hive.metastore.uri=hostname:port
iceberg.catalog.type=hive

----------------------------------------

TITLE: SQL Operator and Function Additions
DESCRIPTION: New SQL functionality including inequality INNER JOIN support, new functions (ntile, map, min_by), and array concatenation with the || operator.

LANGUAGE: sql
CODE:
INNER JOIN
ntile()
map()
min_by()
arr1 || arr2
= (for JSON type)
!= (for JSON type)

----------------------------------------

TITLE: Configuring Kerberos Authentication for Hive Metastore
DESCRIPTION: Example configuration for enabling Kerberos authentication when connecting to the Hive metastore Thrift service.

LANGUAGE: properties
CODE:
hive.metastore.authentication.type=KERBEROS
hive.metastore.service.principal=hive/hive-metastore-host.example.com@EXAMPLE.COM
hive.metastore.client.principal=presto@EXAMPLE.COM
hive.metastore.client.keytab=/etc/presto/hive.keytab

----------------------------------------

TITLE: TRY with COALESCE for Default Values
DESCRIPTION: Shows how to combine TRY and COALESCE functions to handle division by zero and provide default values instead of query failures.

LANGUAGE: sql
CODE:
SELECT COALESCE(TRY(total_cost / packages), 0) AS per_package FROM shipping;

----------------------------------------

TITLE: Querying Delta Lake Table at Timestamp
DESCRIPTION: Example of querying a Delta Lake table as of a specific timestamp

LANGUAGE: sql
CODE:
SELECT * FROM sales.apac."sales_data@t2021-11-18 09:45" LIMIT 200;

----------------------------------------

TITLE: Querying Available TPCDS Schemas
DESCRIPTION: Example output showing available schemas in the TPCDS connector, including various scale factors from tiny (0.01) to sf100000.

LANGUAGE: sql
CODE:
           Schema
    --------------------
     information_schema
     sf1
     sf10
     sf100
     sf1000
     sf10000
     sf100000
     sf300
     sf3000
     sf30000
     tiny
    (11 rows)

----------------------------------------

TITLE: Configuring Thrift Client Addresses
DESCRIPTION: Example of configuring multiple Thrift server addresses using IP addresses and ports in the client.addresses property.

LANGUAGE: none
CODE:
presto.thrift.client.addresses=192.0.2.3:7777,192.0.2.4:7779

----------------------------------------

TITLE: Enabling Kerberos for Presto Internal Communication
DESCRIPTION: Enables Kerberos authentication for internal communication between Presto nodes.

LANGUAGE: properties
CODE:
internal-communication.kerberos.enabled=true

----------------------------------------

TITLE: Configuring TPCDS Connector Properties
DESCRIPTION: Basic configuration for the TPCDS connector in Presto, specified in the tpcds.properties file.

LANGUAGE: properties
CODE:
connector.name=tpcds

----------------------------------------

TITLE: Using AT Keyword in Presto SQL
DESCRIPTION: Shows the usage of the 'AT' keyword in Presto SQL, which is now a non-reserved keyword. This allows for more flexible query writing.

LANGUAGE: sql
CODE:
SELECT * FROM table AT TIME ZONE 'UTC'

----------------------------------------

TITLE: Querying Information Schema Tables
DESCRIPTION: SQL command to list all available tables in the JMX information schema.

LANGUAGE: sql
CODE:
SHOW TABLES FROM jmx.information_schema;

----------------------------------------

TITLE: Enabling S3 Server-side Encryption
DESCRIPTION: Configuration property to enable server-side encryption for S3 in Hive catalog.

LANGUAGE: properties
CODE:
hive.s3.sse.enabled=true

----------------------------------------

TITLE: Bitwise Shift Operations in Presto SQL
DESCRIPTION: Examples of left and right shift operations with different bit widths. Includes both logical and arithmetic right shifts.

LANGUAGE: sql
CODE:
SELECT bitwise_shift_left(7, 2, 4); -- 12
SELECT bitwise_shift_left(7, 2, 64); -- 28
SELECT bitwise_logical_shift_right(7, 2, 4); -- 1
SELECT bitwise_logical_shift_right(-8, 2, 5); -- 6
SELECT bitwise_arithmetic_shift_right(-8, 2); -- -2
SELECT bitwise_arithmetic_shift_right(7, 2); -- 1

----------------------------------------

TITLE: Creating SQL Queries with Tags for Presto Benchmark
DESCRIPTION: This snippet shows how to create a SQL query file with tags for the Presto benchmark driver. Tags 'projection' and 'filter' are defined, followed by a SQL query that calculates the sum of comment lengths from the lineitem table.

LANGUAGE: sql
CODE:
projection=true
filter=false
=================
SELECT SUM(LENGTH(comment))
FROM lineitem

----------------------------------------

TITLE: Creating and Querying MongoDB Tables
DESCRIPTION: Example SQL commands for creating tables and querying data with ObjectId.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS orders (
    orderkey bigint,
    orderstatus varchar,
    totalprice double,
    orderdate date
);

INSERT INTO orders VALUES(1, 'bad', 50.0, current_date);
INSERT INTO orders VALUES(2, 'good', 100.0, current_date);
SELECT _id, * FROM orders;

----------------------------------------

TITLE: Configuring JMX Dumps in Presto
DESCRIPTION: Extended configuration for enabling periodic JMX dumps with specified MBeans, dump period, and maximum entries.

LANGUAGE: properties
CODE:
connector.name=jmx
jmx.dump-tables=java.lang:type=Runtime,com.facebook.presto.execution.scheduler:name=NodeScheduler
jmx.dump-period=10s
jmx.max-entries=86400

----------------------------------------

TITLE: Retrieving Current User in Presto SQL
DESCRIPTION: SQL function that returns the username of the current user executing the query. This is a standard SQL function that does not require parentheses in its syntax.

LANGUAGE: sql
CODE:
current_user

----------------------------------------

TITLE: Configuring Presto Task Properties
DESCRIPTION: Basic configuration properties for Presto on Spark defining task concurrency, worker threads, and writer count. These values should match the number of cores per executor in your Spark cluster.

LANGUAGE: properties
CODE:
task.concurrency=4
task.max-worker-threads=4
task.writer-count=4

----------------------------------------

TITLE: Calculating Jaccard Index of KHyperLogLog Sketches in Presto SQL
DESCRIPTION: This function computes the Jaccard index of the data represented by the MinHash structures of two KHyperLogLog sketches.

LANGUAGE: SQL
CODE:
jaccard_index(khll1, khll2) ->  double

----------------------------------------

TITLE: Using Array Normalize Function in Presto
DESCRIPTION: Demonstrates the usage of the new array_normalize function in Presto. This function normalizes an array by dividing each element by the p-norm of the array.

LANGUAGE: sql
CODE:
SELECT array_normalize(array)

----------------------------------------

TITLE: Configuring File-based Global Security in Presto
DESCRIPTION: This snippet shows how to configure file-based global security in Presto using configuration properties. It requires setting up the 'etc/access-control.properties' file and specifying the 'security.config-file' property.

LANGUAGE: plain
CODE:
etc/access-control.properties
security.config-file

----------------------------------------

TITLE: Defining Decimal Literals in Presto SQL
DESCRIPTION: Examples of decimal literal syntax in Presto showing how precision and scale are determined. The precision equals the total number of digits, while scale equals the number of fractional digits.

LANGUAGE: sql
CODE:
DECIMAL '0'                        -- DECIMAL(1)
DECIMAL '12345'                    -- DECIMAL(5)
DECIMAL '0000012345.1234500000'    -- DECIMAL(20, 10)

----------------------------------------

TITLE: IP Subnet Minimum Address Calculation in Presto SQL
DESCRIPTION: Returns the smallest IP address in a specified subnet range. Takes IPPREFIX type input.

LANGUAGE: sql
CODE:
SELECT ip_subnet_min(IPPREFIX '192.168.255.255/9');
SELECT ip_subnet_min(IPPREFIX '2001:0db8:85a3:0001:0001:8a2e:0370:7334/48');

----------------------------------------

TITLE: Configuring RST Documentation Structure for Presto Plugins
DESCRIPTION: RST documentation configuration using toctree directive to organize Presto plugin documentation with a link to redis-hbo-provider plugin.

LANGUAGE: rst
CODE:
.. toctree::
    :maxdepth: 1

    plugin/redis-hbo-provider

----------------------------------------

TITLE: Querying Oracle Table Data in Presto
DESCRIPTION: SQL command for selecting all data from a specific Oracle table through Presto.

LANGUAGE: sql
CODE:
SELECT * FROM oracle.web.clicks;

----------------------------------------

TITLE: Sample Pinot Schema Definition
DESCRIPTION: JSON representation of a Pinot schema, including dimension fields, metric fields, and time field specifications.

LANGUAGE: json
CODE:
{
  "schemaName": "meetupRsvp",
  "dimensionFieldSpecs": [
    {
      "name": "venue_name",
      "dataType": "STRING"
    },
    {
      "name": "event_name",
      "dataType": "STRING"
    },
    {
      "name": "event_id",
      "dataType": "STRING"
    },
    {
      "name": "event_time",
      "dataType": "LONG"
    },
    {
      "name": "group_city",
      "dataType": "STRING"
    },
    {
      "name": "group_country",
      "dataType": "STRING"
    },
    {
      "name": "group_id",
      "dataType": "LONG"
    },
    {
      "name": "group_name",
      "dataType": "STRING"
    }
  ],
  "metricFieldSpecs": [
    {
      "name": "rsvp_count",
      "dataType": "INT"
    }
  ],
  "timeFieldSpec": {
    "incomingGranularitySpec": {
      "name": "mtime",
      "dataType": "LONG",
      "timeType": "MILLISECONDS"
    }
  }
}

----------------------------------------

TITLE: Bitwise Shift Operations in Presto SQL
DESCRIPTION: Examples of bitwise shift operations in Presto, including left shift, logical right shift, and arithmetic right shift. These functions operate on integers with specified bit lengths.

LANGUAGE: SQL
CODE:
SELECT bitwise_shift_left(7, 2, 4); -- 12
SELECT bitwise_shift_left(7, 2, 64); -- 28

SELECT bitwise_logical_shift_right(7, 2, 4); -- 1
SELECT bitwise_logical_shift_right(-8, 2, 5); -- 6

SELECT bitwise_arithmetic_shift_right(-8, 2); -- -2
SELECT bitwise_arithmetic_shift_right(7, 2); -- 1

----------------------------------------

TITLE: Using String Literals in Presto SQL
DESCRIPTION: Examples of simple and Unicode string literals in Presto SQL, including escape characters and single quote handling.

LANGUAGE: SQL
CODE:
'Hello winter !'
U&'Hello winter \2603 !'
U&'Hello winter #2603 !' UESCAPE '#'
'It''s a beautiful day!'

----------------------------------------

TITLE: SQL Syntax Changes - Complex Grouping Operations
DESCRIPTION: New support added for CUBE, ROLLUP and GROUPING SETS operations in SQL queries.

LANGUAGE: sql
CODE:
CUBE, ROLLUP, GROUPING SETS

----------------------------------------

TITLE: Configuring Plugin Entry Point
DESCRIPTION: Defines the plugin entry point class in the services resource file that Presto uses to discover plugins via Java ServiceLoader.

LANGUAGE: none
CODE:
com.facebook.presto.example.ExamplePlugin

----------------------------------------

TITLE: SQL Window Function Order By Example
DESCRIPTION: Example showing window function ORDER BY clause with multiple specifications for the same field that was previously handled incorrectly.

LANGUAGE: sql
CODE:
OVER (ORDER BY x ASC, x DESC)

----------------------------------------

TITLE: Duration Parsing Example in Presto SQL
DESCRIPTION: Shows how to parse duration strings into intervals using the parse_duration function.

LANGUAGE: sql
CODE:
SELECT parse_duration('42.8ms'); -- 0 00:00:00.043
SELECT parse_duration('3.81 d'); -- 3 19:26:24.000
SELECT parse_duration('5m');     -- 0 00:05:00.000

----------------------------------------

TITLE: Executing EXPLAIN Query with Cost Information in Presto
DESCRIPTION: Example showing how cost information is displayed in a Presto EXPLAIN output for a simple SELECT query with a filter condition. The output includes estimates for rows, CPU, memory, and network usage at different stages of the execution plan.

LANGUAGE: sql
CODE:
EXPLAIN SELECT comment FROM tpch.sf1.nation WHERE nationkey > 3;

LANGUAGE: text
CODE:
- Output[comment] => [[comment]]
        Estimates: {rows: 22 (1.69kB), cpu: 6148.25, memory: 0.00, network: 1734.25}
    - RemoteExchange[GATHER] => [[comment]]
            Estimates: {rows: 22 (1.69kB), cpu: 6148.25, memory: 0.00, network: 1734.25}
        - ScanFilterProject[table = tpch:nation:sf1.0, filterPredicate = ("nationkey" > BIGINT '3')] => [[comment]]
                Estimates: {rows: 25 (1.94kB), cpu: 2207.00, memory: 0.00, network: 0.00}/{rows: 22 (1.69kB), cpu: 4414.00, memory: 0.00, network: 0.00}/{rows: 22 (1.69kB), cpu: 6148.25, memory: 0.00, network: 0.00}
                nationkey := tpch:nationkey
                comment := tpch:comment

----------------------------------------

TITLE: Querying System Node Information in Presto
DESCRIPTION: Shows how to query information about nodes in the Presto cluster.

LANGUAGE: sql
CODE:
SELECT * FROM system.runtime.nodes;

----------------------------------------

TITLE: Configuring JMX with Escaped MBean Names
DESCRIPTION: Configuration example showing how to properly escape commas in MBean names for memory pool monitoring.

LANGUAGE: properties
CODE:
connector.name=jmx
jmx.dump-tables=com.facebook.presto.memory:type=memorypool\\,name=general,\
com.facebook.presto.memory:type=memorypool\\,name=system,\
com.facebook.presto.memory:type=memorypool\\,name=reserved

----------------------------------------

TITLE: Scaling Quantile Digest in Presto SQL
DESCRIPTION: This function scales the distribution of a quantile digest by a specified factor. It returns a new qdigest with the scaled distribution.

LANGUAGE: sql
CODE:
scale_qdigest(qdigest(T), scale_factor) -> qdigest(T)

----------------------------------------

TITLE: Database Resource Group Manager Configuration
DESCRIPTION: Example configuration for database-based resource group management using MySQL.

LANGUAGE: text
CODE:
resource-groups.configuration-manager=db
resource-groups.config-db-url=jdbc:mysql://localhost:3306/resource_groups?user=<user>&password=<password>

----------------------------------------

TITLE: Expiring Snapshots in Iceberg Tables using Presto
DESCRIPTION: Demonstrates how to use the new expire_snapshots procedure to remove old snapshots in Iceberg tables.

LANGUAGE: SQL
CODE:
CALL iceberg.system.expire_snapshots('schema_name', 'table_name');

----------------------------------------

TITLE: Creating KHyperLogLog Sketch in Presto SQL
DESCRIPTION: This function returns a KHyperLogLog sketch representing the relationship between columns x and y. The MinHash structure summarizes x, while HyperLogLog sketches represent y values linked to x values.

LANGUAGE: SQL
CODE:
khyperloglog_agg(x, y) -> KHyperLogLog

----------------------------------------

TITLE: SQL JOIN Query Fix Reference
DESCRIPTION: Reference to JOIN query functionality fix that addresses incorrect results with null-returning functions.

LANGUAGE: sql
CODE:
JOIN

----------------------------------------

TITLE: Hive Configuration Properties
DESCRIPTION: New configuration properties for Hive connector including metastore username setting and storage format controls.

LANGUAGE: properties
CODE:
hive.metastore.username
hive.storage-format
hive.respect-table-format

----------------------------------------

TITLE: Merging Quantile Digests in Presto SQL
DESCRIPTION: This function merges all input qdigests into a single qdigest. It allows combining multiple quantile digest data structures without losing precision.

LANGUAGE: sql
CODE:
merge(qdigest) -> qdigest

----------------------------------------

TITLE: Running Presto Docker Container
DESCRIPTION: Docker command to run Presto server with mounted configuration files and port mapping

LANGUAGE: bash
CODE:
docker run -p 8080:8080 -it -v ./config.properties:/opt/presto-server/etc/config.properties -v ./jvm.config:/opt/presto-server/etc/jvm.config --name presto prestodb/presto:latest

----------------------------------------

TITLE: Implementing Finish Update Method
DESCRIPTION: Method signature for completing an update operation and processing the fragments from all splits.

LANGUAGE: java
CODE:
void finishUpdate(
    ConnectorSession session,
    ConnectorTableHandle tableHandle,
    Collection<Slice> fragments)

----------------------------------------

TITLE: Drop Function with IF EXISTS Clause - Presto SQL
DESCRIPTION: Example of safely dropping a function using IF EXISTS clause to suppress errors if the function doesn't exist.

LANGUAGE: sql
CODE:
DROP FUNCTION IF EXISTS example.default.tan(double)

----------------------------------------

TITLE: IP Prefix Subnet Generation in Presto SQL
DESCRIPTION: Generates all subnets of a specified size from a given IP prefix. Works with both IPv4 and IPv6 addresses.

LANGUAGE: sql
CODE:
SELECT IP_PREFIX_SUBNETS(IPPREFIX '192.168.1.0/24', 25);
SELECT IP_PREFIX_SUBNETS(IPPREFIX '2a03:2880:c000::/34', 36);

----------------------------------------

TITLE: Configuring Query Limit Spill in Presto
DESCRIPTION: Sets up query limit spill behavior using a configuration property and session property. When enabled and the spill strategy is not PER_TASK_MEMORY_THRESHOLD, spilling occurs when a query uses more than the per-node total memory limit in combined revocable and non-revocable memory.

LANGUAGE: sql
CODE:
experimental.query-limit-spill-enabled = true
query_limit_spill_enabled = true

----------------------------------------

TITLE: Configuring Maven Dependency for Presto SPI
DESCRIPTION: This XML snippet shows how to configure the Maven dependency for the Presto SPI in a plugin's POM file. The scope is set to 'provided' since Presto provides these classes at runtime.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>com.facebook.presto</groupId>
    <artifactId>presto-spi</artifactId>
    <scope>provided</scope>
</dependency>

----------------------------------------

TITLE: Show Stats Syntax Update
DESCRIPTION: Modified syntax for SHOW STATS command with removal of ON keyword and restrictions on WHERE clause filters.

LANGUAGE: sql
CODE:
SHOW STATS

----------------------------------------

TITLE: Casting UUID to VARCHAR in Accumulo Connector
DESCRIPTION: Illustrates how to cast the result of the uuid() function to VARCHAR type, which may be necessary due to changes in the Accumulo connector where the return type changed from VARCHAR to UUID.

LANGUAGE: sql
CODE:
SELECT CAST(UUID() AS VARCHAR);

----------------------------------------

TITLE: Configuring Maximum Grouping Sets in Presto
DESCRIPTION: Sets the default limit for the number of grouping sets in a GROUP BY clause to 2048. This can be configured using the analyzer.max-grouping-sets configuration property or the max_grouping_sets session property.

LANGUAGE: properties
CODE:
analyzer.max-grouping-sets=2048

----------------------------------------

TITLE: Querying Available Catalogs in Presto SQL
DESCRIPTION: SQL command to list all available catalogs in Presto. The optional LIKE pattern can be used to filter catalog names based on a pattern match.

LANGUAGE: sql
CODE:
SHOW CATALOGS [ LIKE pattern ]

----------------------------------------

TITLE: Fetching More Results via GET Request
DESCRIPTION: Sends a GET request to the nextUri provided in the previous response to fetch the next batch of query results.

LANGUAGE: http
CODE:
GET /v1/statement/20140120_032523_00005_dk5sd/2 HTTP/1.1
Host: presto-server
X-Presto-User: username

----------------------------------------

TITLE: Example of DEALLOCATE PREPARE Statement in Presto SQL
DESCRIPTION: Demonstrates how to use the DEALLOCATE PREPARE statement to remove a prepared statement named 'my_query' from the current session.

LANGUAGE: sql
CODE:
DEALLOCATE PREPARE my_query;

----------------------------------------

TITLE: Extracting Entries from Maps in Presto SQL
DESCRIPTION: Demonstrates how to extract all entries from a map as an array of rows.

LANGUAGE: sql
CODE:
SELECT map_entries(MAP(ARRAY[1, 2], ARRAY['x', 'y'])); -- [ROW(1, 'x'), ROW(2, 'y')]

----------------------------------------

TITLE: Using IS DISTINCT FROM with Long Decimals in SQL
DESCRIPTION: A fix has been implemented for the IS DISTINCT FROM operation when used with long decimal values in SQL queries.

LANGUAGE: SQL
CODE:
SELECT column1 IS DISTINCT FROM column2 FROM table;

----------------------------------------

TITLE: Private IP Check in Presto SQL
DESCRIPTION: Determines if an IP address is private or reserved according to IANA specifications.

LANGUAGE: sql
CODE:
SELECT is_private_ip(IPADDRESS '10.0.0.1');
SELECT is_private_ip(IPADDRESS '157.240.200.99');

----------------------------------------

TITLE: Unsupported Lambda Expression Operations in Presto SQL
DESCRIPTION: Examples of operations that are not supported in lambda expressions, including subqueries and aggregations.

LANGUAGE: sql
CODE:
x -> 2 + (SELECT 3)
x -> max(y)

----------------------------------------

TITLE: Transforming Map Keys in Presto SQL
DESCRIPTION: Demonstrates how to transform the keys of a map using a custom function with the transform_keys() function.

LANGUAGE: sql
CODE:
SELECT transform_keys(MAP(ARRAY[], ARRAY[]), (k, v) -> k + 1); -- {}
SELECT transform_keys(MAP(ARRAY [1, 2, 3], ARRAY ['a', 'b', 'c']), (k, v) -> k + 1); -- {2 -> a, 3 -> b, 4 -> c}
SELECT transform_keys(MAP(ARRAY ['a', 'b', 'c'], ARRAY [1, 2, 3]), (k, v) -> v * v); -- {1 -> 1, 4 -> 2, 9 -> 3}
SELECT transform_keys(MAP(ARRAY ['a', 'b'], ARRAY [1, 2]), (k, v) -> k || CAST(v as VARCHAR)); -- {a1 -> 1, b2 -> 2}
SELECT transform_keys(MAP(ARRAY [1, 2], ARRAY [1.0, 1.4]), -- {one -> 1.0, two -> 1.4}
                              (k, v) -> MAP(ARRAY[1, 2], ARRAY['one', 'two'])[k]);

----------------------------------------

TITLE: Configuring Basic JMX Connector in Presto
DESCRIPTION: Basic configuration for the JMX connector in Presto, specified in the etc/catalog/jmx.properties file.

LANGUAGE: properties
CODE:
connector.name=jmx

----------------------------------------

TITLE: Creating a Custom Function in SQL
DESCRIPTION: This snippet illustrates the newly added support for CREATE FUNCTION, allowing users to define custom functions in Presto.

LANGUAGE: sql
CODE:
CREATE FUNCTION function_name (parameter_list) RETURNS return_type AS 'implementation'

----------------------------------------

TITLE: Presto ALTER SCHEMA Syntax
DESCRIPTION: The basic syntax for altering a schema name in Presto. This command allows renaming an existing schema to a new name.

LANGUAGE: sql
CODE:
ALTER SCHEMA name RENAME TO new_name

----------------------------------------

TITLE: Configuring Cassandra Connector Properties in Presto
DESCRIPTION: Configuration properties for the Cassandra connector in Presto. These settings allow connecting to older Cassandra servers and control the number of splits per node.

LANGUAGE: properties
CODE:
cassandra.splits-per-node=<value>
cassandra.protocol-version=<value>

----------------------------------------

TITLE: Presto ALTER SCHEMA Syntax
DESCRIPTION: The basic syntax for altering a schema name in Presto. This command allows renaming an existing schema to a new name.

LANGUAGE: sql
CODE:
ALTER SCHEMA name RENAME TO new_name

----------------------------------------

TITLE: Using WITH Clause for Complex Expressions in Presto SQL
DESCRIPTION: Shows how to use the WITH clause to factor out complex expressions or subqueries in Presto for better readability and reusability.

LANGUAGE: SQL
CODE:
WITH a AS (
  SELECT substr(name, 1, 3) x
  FROM ...
)
SELECT *
FROM a
WHERE x = 'foo'

----------------------------------------

TITLE: Implementing Update Row ID Column Handle Method
DESCRIPTION: Method signature for retrieving the column handle used to identify rows for update operations, including the list of columns being updated.

LANGUAGE: java
CODE:
ColumnHandle getUpdateRowIdColumnHandle(
    ConnectorSession session,
    ConnectorTableHandle tableHandle,
    List<ColumnHandle> updatedColumns)

----------------------------------------

TITLE: Estimating Distinct Count with HyperLogLog in Presto SQL
DESCRIPTION: Uses the approx_distinct function to estimate the number of distinct entries in a column using HyperLogLog algorithm.

LANGUAGE: SQL
CODE:
SELECT approx_distinct(column_name) FROM table_name;

----------------------------------------

TITLE: Setting Local Exchange Buffer Size in Presto
DESCRIPTION: Configuration property to set the maximum size of the local exchange buffer in Presto, which can affect query performance and resource utilization.

LANGUAGE: properties
CODE:
task.max-local-exchange-buffer-size=<size>

----------------------------------------

TITLE: Standard Type Casting in Presto SQL
DESCRIPTION: Illustrates the use of standard types for CAST operations in Presto, including the use of VARCHAR instead of STRING.

LANGUAGE: SQL
CODE:
SELECT
  CAST(x AS varchar)
, CAST(x AS bigint)
, CAST(x AS double)
, CAST(x AS boolean)
FROM ...

----------------------------------------

TITLE: Querying with Aggregation in SQL for Presto
DESCRIPTION: An example SQL query demonstrating a simple aggregation operation on the 'orders' table, grouping by 'custkey' and summing 'totalprice'.

LANGUAGE: sql
CODE:
SELECT custkey, SUM(totalprice)
FROM orders
GROUP BY custkey

----------------------------------------

TITLE: SQL Function Updates - min_by and max_by
DESCRIPTION: Reference to enhanced aggregation functions that now support returning multiple values.

LANGUAGE: sql
CODE:
min_by
max_by

----------------------------------------

TITLE: Configuration Property Addition for Raptor ZSTD Decompression
DESCRIPTION: Configuration property to enable JNI ZSTD decompressor for ORC files in Raptor storage.

LANGUAGE: properties
CODE:
storage.zstd-jni-decompression-enabled

----------------------------------------

TITLE: DESCRIBE INPUT with No Parameters Example
DESCRIPTION: Shows preparing and describing a query that has no parameters.

LANGUAGE: sql
CODE:
PREPARE my_select2 FROM
SELECT * FROM nation;

LANGUAGE: sql
CODE:
DESCRIBE INPUT my_select2;

LANGUAGE: none
CODE:
 Position | Type
-----------------
(0 rows)

----------------------------------------

TITLE: Configuring Multiple Authentication Methods in Presto
DESCRIPTION: Sets up multiple authentication methods (PASSWORD and CERTIFICATE) for Presto server.

LANGUAGE: properties
CODE:
http-server.authentication.type=PASSWORD,CERTIFICATE

----------------------------------------

TITLE: Disabling Hive Bucketing Optimizations in Presto 0.150
DESCRIPTION: Configuration snippet to disable broken Hive bucketing optimizations in Presto 0.150. This should be added to the Hive catalog properties.

LANGUAGE: properties
CODE:
hive.bucket-execution=false

----------------------------------------

TITLE: Configuring Legacy JOIN USING Behavior in SQL
DESCRIPTION: Sets a configuration option to restore the old behavior of JOIN ... USING, which differs from standard SQL semantics.

LANGUAGE: SQL
CODE:
SET deprecated.legacy-join-using = true;

----------------------------------------

TITLE: Describing MySQL Table Columns in Presto
DESCRIPTION: SQL queries to describe columns of a MySQL table using Presto.

LANGUAGE: sql
CODE:
DESCRIBE mysql.web.clicks;
SHOW COLUMNS FROM mysql.web.clicks;

----------------------------------------

TITLE: Installing Presto on Apple Silicon Mac
DESCRIPTION: Command to install Presto using Homebrew on an Apple Silicon Mac. This installs Presto in the /usr/local/Cellar/prestodb/<version> directory.

LANGUAGE: bash
CODE:
arch -x86_64 brew install prestodb

----------------------------------------

TITLE: Creating Multimap from Entries in Presto SQL
DESCRIPTION: Shows how to create a multimap (map with multiple values per key) from an array of entries using the multimap_from_entries() function.

LANGUAGE: sql
CODE:
SELECT multimap_from_entries(ARRAY[(1, 'x'), (2, 'y'), (1, 'z')]); -- {1 -> ['x', 'z'], 2 -> ['y']}

----------------------------------------

TITLE: Creating Function Namespace in MySQL
DESCRIPTION: SQL command to create a new function namespace by inserting a record into the function namespaces table. Specifies the catalog name and schema name for the new namespace.

LANGUAGE: sql
CODE:
INSERT INTO example_function_namespaces (catalog_name, schema_name)
VALUES('example', 'test');

----------------------------------------

TITLE: Using approx_percentile Function with Accuracy Parameter in SQL
DESCRIPTION: New forms of the approx_percentile function have been added that accept an accuracy parameter.

LANGUAGE: SQL
CODE:
SELECT approx_percentile(column, 0.5, 0.01) FROM table;

----------------------------------------

TITLE: Using histogram Function with Map Type in Presto
DESCRIPTION: Fix for the histogram function when used with map types requiring type coercion. This change improves the functionality of histogram calculations on map data types.

LANGUAGE: sql
CODE:
:func:`!histogram`

----------------------------------------

TITLE: Preparing and Describing a Query with Expressions in Presto SQL
DESCRIPTION: Shows how to prepare a query with expressions and use DESCRIBE OUTPUT to view its output columns. This example demonstrates describing columns that are expressions rather than direct table columns.

LANGUAGE: sql
CODE:
PREPARE my_select2 FROM
SELECT count(*) as my_count, 1+2 FROM nation

LANGUAGE: sql
CODE:
DESCRIBE OUTPUT my_select2;

LANGUAGE: none
CODE:
 Column Name | Catalog | Schema | Table |  Type  | Type Size | Aliased
-------------+---------+--------+-------+--------+-----------+---------
 my_count    |         |        |       | bigint |         8 | true
 _col1       |         |        |       | bigint |         8 | false
(2 rows)

----------------------------------------

TITLE: Querying MySQL Table Data in Presto
DESCRIPTION: SQL query to select all data from a MySQL table using Presto.

LANGUAGE: sql
CODE:
SELECT * FROM mysql.web.clicks;

----------------------------------------

TITLE: Configuring Internal HTTPS Keystore in Presto
DESCRIPTION: Specifies the keystore path and password for internal HTTPS communication in Presto.

LANGUAGE: properties
CODE:
internal-communication.https.keystore.path=<keystore path>
internal-communication.https.keystore.key=<keystore password>

----------------------------------------

TITLE: Demonstrating SQL Function Usage in Presto 0.174
DESCRIPTION: This snippet showcases the use of various SQL functions mentioned in the release notes, including reduce, array_sort, shuffle, reverse, array_intersect, arrays_overlap, concat, map_concat, max_by, min_by, max, min, and arbitrary.

LANGUAGE: SQL
CODE:
SELECT reduce(array[1, 2, 3], 0, (s, x) -> s + x, s -> s),
       array_sort(array[3, 1, 2]),
       shuffle(array[1, 2, 3]),
       reverse(array[1, 2, 3]),
       array_intersect(array[1, 2, 3], array[2, 3, 4]),
       arrays_overlap(array[1, 2, 3], array[3, 4, 5]),
       concat(array[1, 2], array[3, 4]),
       map_concat(map(array['a', 'b'], array[1, 2]), map(array['c'], array[3])),
       max_by(array['a', 'b', 'c'], array[1, 2, 3]),
       min_by(array['a', 'b', 'c'], array[1, 2, 3]),
       max(array[1, 2, 3]),
       min(array[1, 2, 3]),
       arbitrary(array[1, 2, 3])

----------------------------------------

TITLE: Converting JSON to ARRAY or MAP Types in SQL
DESCRIPTION: Improves the performance of casting from JSON to ARRAY or MAP types.

LANGUAGE: SQL
CODE:
SELECT CAST(json_column AS ARRAY<VARCHAR>) FROM table;

----------------------------------------

TITLE: FROM Clause Syntax
DESCRIPTION: The structure of the FROM clause, including table references and join types.

LANGUAGE: SQL
CODE:
table_name [ [ AS ] alias [ ( column_alias [, ...] ) ] ]

from_item join_type from_item [ ON join_condition | USING ( join_column [, ...] ) ]

----------------------------------------

TITLE: Configuring Hive Parquet Reader Properties
DESCRIPTION: Configuration properties for enabling the new optimized Parquet reader and predicate push down functionality in Hive catalog. These settings can be applied either as session properties or catalog configuration values.

LANGUAGE: properties
CODE:
<hive-catalog>.parquet_optimized_reader_enabled
hive.parquet-optimized-reader.enabled=true
<hive-catalog>.parquet_predicate_pushdown_enabled
hive.parquet-predicate-pushdown.enabled=true

----------------------------------------

TITLE: Starting Presto Server in Background
DESCRIPTION: Command to start the Presto server as a background process on Mac.

LANGUAGE: bash
CODE:
presto-server start

----------------------------------------

TITLE: Configuring Hive Environment for Alluxio Integration
DESCRIPTION: Configuration to add Alluxio client jar to Hive's classpath for Metastore integration.

LANGUAGE: bash
CODE:
export HIVE_AUX_JARS_PATH=${ALLUXIO_HOME}/client/alluxio-<VERSION>-client.jar

----------------------------------------

TITLE: Analyzing Complex Partition Keys in Hive Table using Presto SQL
DESCRIPTION: Demonstrates analyzing partitions with complex partition keys (state and city columns) from a Hive partitioned table 'customers'.

LANGUAGE: sql
CODE:
ANALYZE hive.default.customers WITH (partitions = ARRAY[ARRAY['CA', 'San Francisco'], ARRAY['NY', 'NY']]);

----------------------------------------

TITLE: Show Create Table Example Query
DESCRIPTION: Example of using SHOW CREATE TABLE to display the creation SQL for the 'orders' table in the sf1 schema.

LANGUAGE: sql
CODE:
SHOW CREATE TABLE sf1.orders;

----------------------------------------

TITLE: Memory Management Properties
DESCRIPTION: Configuration properties related to memory thresholds and buffer sizes in C++ Presto

LANGUAGE: properties
CODE:
native_aggregation_spill_memory_threshold=0
native_join_spill_memory_threshold=0
native_max_output_buffer_size=33554432
native_max_page_partitioning_buffer_size=33554432
native_writer_flush_threshold_bytes=100663296

----------------------------------------

TITLE: Parsing Decimal Literals as DECIMAL Type in Presto SQL
DESCRIPTION: Configures Presto to treat decimal literals as values of the DECIMAL type rather than DOUBLE. This can be set using either a config property or a session property.

LANGUAGE: SQL
CODE:
SET SESSION parse_decimal_literals_as_double = false;

----------------------------------------

TITLE: Using Window Functions with Arrays or Maps in SQL
DESCRIPTION: Fixes query failures when using certain window functions that take arrays or maps as arguments, such as approx_percentile().

LANGUAGE: SQL
CODE:
SELECT approx_percentile(array_column, 0.5) OVER (PARTITION BY category) FROM table;

----------------------------------------

TITLE: Configuring CTE Hash Partition Count in Presto SQL
DESCRIPTION: Adds session property to specify the number of buckets or writers to be used when using CTE Materialization.

LANGUAGE: SQL
CODE:
SET SESSION cte_hash_partition_count = 8;

----------------------------------------

TITLE: Adding Table Comment Support in SQL CREATE TABLE Statements
DESCRIPTION: Introduces support for adding table comments in CREATE TABLE and CREATE TABLE AS statements, enhancing metadata management capabilities.

LANGUAGE: sql
CODE:
CREATE TABLE table_name (column_definitions) COMMENT 'table comment'

LANGUAGE: sql
CODE:
CREATE TABLE new_table COMMENT 'table comment' AS SELECT * FROM existing_table

----------------------------------------

TITLE: Extracting Subset of Map in Presto SQL
DESCRIPTION: Demonstrates how to extract a subset of a map based on an array of keys using the map_subset() function.

LANGUAGE: sql
CODE:
SELECT map_subset(MAP(ARRAY[1,2], ARRAY['a','b']), ARRAY[10]); -- {}
SELECT map_subset(MAP(ARRAY[1,2], ARRAY['a','b']), ARRAY[1]); -- {1->'a'}
SELECT map_subset(MAP(ARRAY[1,2], ARRAY['a','b']), ARRAY[1,3]); -- {1->'a'}
SELECT map_subset(MAP(ARRAY[1,2], ARRAY['a','b']), ARRAY[]); -- {}
SELECT map_subset(MAP(ARRAY[], ARRAY[]), ARRAY[1,2]); -- {}

----------------------------------------

TITLE: Configuring ORC Column Access in Hive Catalog Properties (SQL)
DESCRIPTION: Sets a property in the Hive catalog properties file to enable accessing ORC columns by name instead of ordinal position.

LANGUAGE: SQL
CODE:
hive.orc.use-column-names=true

----------------------------------------

TITLE: Implementing Connector Factory Method in Presto Plugin
DESCRIPTION: Core method implementation that returns connector factories for the Example HTTP connector. Uses Guava's ImmutableList to return a single ExampleConnectorFactory instance.

LANGUAGE: java
CODE:
@Override
public Iterable<ConnectorFactory> getConnectorFactories()
{
    return ImmutableList.of(new ExampleConnectorFactory());
}

----------------------------------------

TITLE: Using corr() Function in SQL
DESCRIPTION: Fixes a correctness issue with the corr() function to correctly return negative numbers for inverse correlations.

LANGUAGE: SQL
CODE:
SELECT corr(column1, column2) FROM table;

----------------------------------------

TITLE: Syntax for GRANT ROLES Command in Presto SQL
DESCRIPTION: Defines the syntax for granting roles to users or other roles in Presto. It includes options for specifying multiple roles and principals, as well as additional clauses like GRANTED BY and WITH ADMIN OPTION.

LANGUAGE: sql
CODE:
GRANT role [, ...]
TO ( user | USER user | ROLE role) [, ...]
[ GRANTED BY ( user | USER user | ROLE role | CURRENT_USER | CURRENT_ROLE ) ]
[ WITH ADMIN OPTION ]

----------------------------------------

TITLE: Adding a Column with Partitioning in Iceberg
DESCRIPTION: Demonstrates how to add a new column to an Iceberg table with optional partitioning transformation.

LANGUAGE: SQL
CODE:
ALTER TABLE <table> ADD COLUMN <column> [WITH (partitioning = '<transform_func>')];

----------------------------------------

TITLE: Parsing String to Timestamp in SQL
DESCRIPTION: Converts a string to a timestamp using a specified format. The format string should use Teradata-compatible specifiers.

LANGUAGE: SQL
CODE:
to_timestamp(string, format) -> timestamp

----------------------------------------

TITLE: Setting Partition Offline in Hive Connector
DESCRIPTION: Demonstrates how to mark a partition as offline using the new presto_offline partition property in the Hive connector.

LANGUAGE: SQL
CODE:
ALTER TABLE example_table SET PARTITION (partition_column = 'value') WITH (presto_offline = true);

----------------------------------------

TITLE: Adding New Functions in Presto
DESCRIPTION: This snippet lists two new functions added in Presto 0.179: 'repeat' and 'crc32'. These functions expand Presto's capabilities for string manipulation and checksum calculation respectively.

LANGUAGE: plain
CODE:
:func:`!repeat`
:func:`!crc32`

----------------------------------------

TITLE: Enhancing truncate Function in Presto
DESCRIPTION: Extends the truncate function to allow specifying the number of digits to keep after the decimal point in the result.

LANGUAGE: rst
CODE:
* Add support to :func:`!truncate` function for specifying the number of digits to the right of the decimal point in the truncated result.

----------------------------------------

TITLE: Example of bcrypt Password Format in Presto
DESCRIPTION: This snippet demonstrates the format of a bcrypt hashed password in the password file. It shows a username and password pair separated by a colon, with the password starting with '$2y$' and using a minimum cost of 8.

LANGUAGE: none
CODE:
test:$2y$10$BqTb8hScP5DfcpmHo5PeyugxHz5Ky/qf3wrpD7SNm8sWuA3VlGqsa

----------------------------------------

TITLE: Classification Metrics Example
DESCRIPTION: Example showing how to compute precision-recall curves using classification metrics functions

LANGUAGE: SQL
CODE:
WITH
    recall_precision AS (
        SELECT
            CLASSIFICATION_RECALL(10000, correct, pred) AS recalls,
            CLASSIFICATION_PRECISION(10000, correct, pred) AS precisions
        FROM
           classification_dataset
    )
SELECT
    recall,
    precision
FROM
    recall_precision
CROSS JOIN UNNEST(recalls, precisions) AS t(recall, precision)

----------------------------------------

TITLE: Grep Command for Filtering Exchange Logs
DESCRIPTION: Example of using grep to filter and view logs related to a specific protocol interaction, in this case, an exchange operation.

LANGUAGE: bash
CODE:
cat stderr* | grep '/v1/task/20240402_223203_00000_kg5tr.11.0.455.0/results'

----------------------------------------

TITLE: Drop Function without Parameter Type - Presto SQL
DESCRIPTION: Example of dropping a function without specifying parameter types, useful when only one function exists with that name.

LANGUAGE: sql
CODE:
DROP FUNCTION example.default.tan

----------------------------------------

TITLE: Enabling Experimental T-Digest Functions in Presto SQL
DESCRIPTION: Enables experimental t-digest functions for creating, merging, and querying t-digests. These functions provide advanced statistical capabilities.

LANGUAGE: SQL
CODE:
SET SESSION experimental_functions_enabled = true;

----------------------------------------

TITLE: Multiple Quantile Values
DESCRIPTION: Returns an array of approximate percentile values for multiple quantiles.

LANGUAGE: sql
CODE:
values_at_quantiles(tdigest<double>, quantiles) -> array<double>

----------------------------------------

TITLE: Adding a Comment When Altering Table in SQL
DESCRIPTION: Demonstrates the syntax for including a comment when adding a column to a table using ALTER TABLE statement in SQL.

LANGUAGE: SQL
CODE:
ALTER TABLE

----------------------------------------

TITLE: SQL Type Casting Enhancement
DESCRIPTION: New casting capabilities added to convert REAL, TINYINT, and SMALLINT data types to JSON format.

LANGUAGE: sql
CODE:
CAST(value AS JSON)

----------------------------------------

TITLE: Filtering Built-in Functions in Presto SQL
DESCRIPTION: Sets a session property to hide user-defined SQL functions in the SHOW FUNCTIONS command, displaying only built-in functions.

LANGUAGE: SQL
CODE:
SET SESSION list_built_in_functions_only = true;

----------------------------------------

TITLE: Using Multimap from Entries Function in Presto SQL
DESCRIPTION: Demonstrates the usage of the newly added multimap_from_entries function, which creates a multimap from an array of entries.

LANGUAGE: SQL
CODE:
SELECT multimap_from_entries(ARRAY[('a', 1), ('b', 2), ('a', 3)]);

----------------------------------------

TITLE: Querying Value at Quantile in Presto SQL
DESCRIPTION: Returns the approximate percentile value from a quantile digest for a given quantile between 0 and 1. This function is useful for estimating percentiles from the digest.

LANGUAGE: SQL
CODE:
value_at_quantile(qdigest(T), quantile) -> T

----------------------------------------

TITLE: Using JSON Path Subscript Escaping in Presto SQL
DESCRIPTION: Demonstrates the new ability to escape double quotes or backslashes using a backslash within JSON path subscripts for json_extract and json_extract_scalar functions.

LANGUAGE: SQL
CODE:
json_extract(column, '$."escaped\\path"')

----------------------------------------

TITLE: Querying Quantile at Value in Presto SQL
DESCRIPTION: Returns the approximate quantile (between 0 and 1) from a quantile digest for a given input value. Returns null if the digest is empty or the input value is out of range.

LANGUAGE: SQL
CODE:
quantile_at_value(qdigest(T), T) -> quantile

----------------------------------------

TITLE: SQL Example - Window Function Frame
DESCRIPTION: Example of window function frame specification that was fixed to handle empty frames correctly.

LANGUAGE: sql
CODE:
ROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING

----------------------------------------

TITLE: SQL Function and Query Syntax Changes
DESCRIPTION: Examples of SQL syntax changes in Presto 0.246, including SORT, LIMIT, GROUPING SETS, CUBE, and ROLLUP operations, along with ORDER BY restrictions with Window functions.

LANGUAGE: sql
CODE:
GROUPING SETS (())

LANGUAGE: sql
CODE:
CUBE

LANGUAGE: sql
CODE:
ROLLUP

LANGUAGE: sql
CODE:
SORT

LANGUAGE: sql
CODE:
LIMIT

LANGUAGE: sql
CODE:
ORDER BY

----------------------------------------

TITLE: New SQL Functions - Presto 0.214
DESCRIPTION: New SQL functions added in Presto 0.214, including ngrams for array processing and qdigest type functions.

LANGUAGE: sql
CODE:
array_sort()
ngrams()
qdigest

----------------------------------------

TITLE: Inserting Data into PostgreSQL via Presto
DESCRIPTION: SQL command to insert data into a PostgreSQL table using Presto.

LANGUAGE: sql
CODE:
INSERT INTO postgresql.public.renamed_table (id, name) VALUES (1, 'Test');

----------------------------------------

TITLE: SQL Query Example for Group By Optimization
DESCRIPTION: Example query demonstrating the fixed GROUP BY planning scenario where grouping column cardinality is one.

LANGUAGE: sql
CODE:
SELECT c1, sum(c2) FROM t WHERE c1 = 'foo' GROUP BY c1

----------------------------------------

TITLE: Configuring S3 Region for Hive
DESCRIPTION: Configuration property to enable automatic S3 region detection when running in EC2. Required for accessing S3 data in China isolated region.

LANGUAGE: properties
CODE:
hive.s3.pin-client-to-current-region=true

----------------------------------------

TITLE: Setting Presto History File Location Using Environment Variable
DESCRIPTION: Shows how to override the default location of the Presto CLI history file using the PRESTO_HISTORY_FILE environment variable. This allows for custom configuration of CLI history storage.

LANGUAGE: shell
CODE:
export PRESTO_HISTORY_FILE=/custom/path/to/history_file

----------------------------------------

TITLE: Using merge_sfm with Arrays in Presto SQL
DESCRIPTION: Shows how to merge multiple SFM sketches using the merge_sfm scalar function with arrays.

LANGUAGE: sql
CODE:
SELECT cardinality(merge_sfm(ARRAY[
    noisy_approx_set_sfm(col_1, 5.0),
    noisy_approx_set_sfm(col_2, 5.0),
    noisy_approx_set_sfm(col_3, 5.0)
])) AS distinct_count_over_3_cols
FROM my_table

----------------------------------------

TITLE: Session Property for Columnar Processing
DESCRIPTION: Session-level property to control dictionary-based columnar processing optimization.

LANGUAGE: properties
CODE:
columnar_processing_dictionary

----------------------------------------

TITLE: Using merge with SFM Sketches in Presto SQL
DESCRIPTION: Example of using merge aggregator function with SFM sketches to compute union of sketches grouped by year.

LANGUAGE: sql
CODE:
SELECT year, cardinality(merge(sketch)) AS annual_distinct_count
FROM monthly_sketches
GROUP BY 1

----------------------------------------

TITLE: Configuration Property Update - Memory Killer Policy
DESCRIPTION: New configuration property replacing query.low-memory-killer.enabled with query.low-memory-killer.policy, supporting total-reservation and total-reservation-on-blocked-nodes policies.

LANGUAGE: properties
CODE:
query.low-memory-killer.policy

----------------------------------------

TITLE: Configuring Writer Scaling in Presto
DESCRIPTION: This configuration enables dynamic scaling of writer tasks in Presto. It allows setting both the scaling option and the minimum size threshold for adding new writer tasks.

LANGUAGE: SQL
CODE:
SET SESSION scale_writers = true;
SET SESSION writer_min_size = '100MB';

----------------------------------------

TITLE: Querying Lark Sheets Tables in Presto
DESCRIPTION: Examples of SQL queries for interacting with Lark Sheets data in Presto. Includes commands for showing tables, querying sheet metadata, and selecting data from specific sheets using various identifiers.

LANGUAGE: sql
CODE:
SHOW TABLES FROM my_ss

SELECT * FROM my_ss."$sheets"

-- by sheet title
SELECT * FROM my_ss."number_text"

-- by sheet index
SELECT * FROM my_ss."$0"

-- by sheet id
SELECT * FROM my_ss."@MT1p4I"

----------------------------------------

TITLE: SQL Boolean Type Usage
DESCRIPTION: New support for BOOLEAN type in EXPLAIN IO statements.

LANGUAGE: sql
CODE:
BOOLEAN

----------------------------------------

TITLE: Enabling Metadata-Only Query Optimization in Presto
DESCRIPTION: Enables an optimization that rewrites certain aggregation queries to execute against table metadata instead of the full dataset. This can significantly improve performance for queries that are insensitive to input cardinality.

LANGUAGE: Properties
CODE:
optimizer.optimize-metadata-queries=true

----------------------------------------

TITLE: Setting Client Tags in Presto CLI
DESCRIPTION: Shows how to set client tags in the Presto CLI, which is a new feature added in this release.

LANGUAGE: SQL
CODE:
presto-cli --client-tags tag1,tag2

----------------------------------------

TITLE: Defining Connector Name in ExampleConnectorFactory
DESCRIPTION: Implementation of getName() method that specifies the connector's name as 'example-http'. This name is used in Presto configuration to reference this connector.

LANGUAGE: java
CODE:
@Override
public String getName()
{
    return "example-http";
}

----------------------------------------

TITLE: Grep Command for Following Exchange Protocol Interaction
DESCRIPTION: Example grep command to filter and display logs related to the exchange protocol interaction in Presto.

LANGUAGE: bash
CODE:
cat stderr* | grep '/v1/task/20240402_223203_00000_kg5tr.11.0.455.0/results'

----------------------------------------

TITLE: Implementing Begin Update Method
DESCRIPTION: Method signature for initiating an update operation on a table with specified columns.

LANGUAGE: java
CODE:
ConnectorTableHandle beginUpdate(
     ConnectorSession session,
     ConnectorTableHandle tableHandle,
     List<ColumnHandle> updatedColumns)

----------------------------------------

TITLE: Comparing CHAR Values in Presto SQL
DESCRIPTION: Example of comparing CHAR values with different lengths in Presto SQL, demonstrating implicit padding and type conversion.

LANGUAGE: SQL
CODE:
SELECT cast('example' AS char(20)) = cast('example    ' AS char(25));

----------------------------------------

TITLE: Row Number Partitioned Limit Query in Presto SQL
DESCRIPTION: Example query demonstrating how to select N arbitrary rows per partition using row_number() function. Shows streaming operation optimization for partitioned limits.

LANGUAGE: sql
CODE:
SELECT * FROM (
    SELECT row_number() OVER (PARTITION BY orderstatus) AS rn,
        custkey, orderdate, orderstatus
    FROM orders
) WHERE rn <= 5;

----------------------------------------

TITLE: SQL Function Call - element_at
DESCRIPTION: Performance improvement for element_at function when used with maps, now operating in constant time instead of linear time.

LANGUAGE: sql
CODE:
element_at

----------------------------------------

TITLE: SQL Commands
DESCRIPTION: SQL commands referenced in the changes including LIMIT, GROUPING SETS, CUBE, ROLLUP, and UNION queries.

LANGUAGE: sql
CODE:
LIMIT
GROUPING SETS
CUBE
ROLLUP
UNION

----------------------------------------

TITLE: Using nullif Function with Map Types in Presto SQL
DESCRIPTION: Example of using the nullif function in Presto SQL, which has been fixed for map types when type coercion is required.

LANGUAGE: sql
CODE:
nullif

----------------------------------------

TITLE: Java Constant Renaming in LogicalRowExpressions
DESCRIPTION: Renamed boolean constants in LogicalRowExpressions to avoid naming conflicts with java.lang.Boolean.

LANGUAGE: java
CODE:
LogicalRowExpressions::TRUE_CONSTANT
LogicalRowExpressions::FALSE_CONSTANT

----------------------------------------

TITLE: Configuring Bytecode Generator in Presto
DESCRIPTION: Configuration property to disable the new bytecode generator and revert to old implementation. Add this to etc/config.properties in coordinator and workers.

LANGUAGE: properties
CODE:
compiler.new-bytecode-generator-enabled=false

----------------------------------------

TITLE: Configuring LDAP Authentication in Presto
DESCRIPTION: Demonstrates the configuration for enabling LDAP authentication in Presto using username and password.

LANGUAGE: properties
CODE:
http-server.authentication.type=LDAP

----------------------------------------

TITLE: Creating Schema 'web' in Current Catalog in Presto SQL
DESCRIPTION: Demonstrates how to create a new schema named 'web' in the current catalog using Presto SQL.

LANGUAGE: sql
CODE:
CREATE SCHEMA web

----------------------------------------

TITLE: SQL SET SESSION Statement Support
DESCRIPTION: Examples of newly supported session management statements in JDBC

LANGUAGE: sql
CODE:
SET SESSION\nRESET SESSION

----------------------------------------

TITLE: Configuring Hash Generation Skipping for Join with Table Scan Input in Presto SQL
DESCRIPTION: Adds a session property to skip hash precomputation for join when the input is table scan, and the hash is on a single big int and is not reused later. The property defaults to not enabled.

LANGUAGE: SQL
CODE:
SET SESSION skip_hash_generation_for_join_with_table_scan_input = true;

----------------------------------------

TITLE: Invoking transform Function in Presto
DESCRIPTION: Demonstrates the usage of the improved transform function in Presto. This function is now more performant for data transformations.

LANGUAGE: sql
CODE:
SELECT transform(array, x -> x * 2) FROM my_table

----------------------------------------

TITLE: Fixing FILTER Behavior for count() Function in SQL
DESCRIPTION: Addresses an issue where the FILTER clause was being ignored when used with the count() function having a constant argument.

LANGUAGE: sql
CODE:
count(constant) FILTER (WHERE condition)

----------------------------------------

TITLE: Disabling Eager Memory Freeing in Presto Exchange
DESCRIPTION: Configuration setting to disable eager freeing of memory in source output buffers, which affects dynamic writer scaling.

LANGUAGE: properties
CODE:
exchange.acknowledge-pages=false

----------------------------------------

TITLE: Using geometry_to_bing_tiles Function in SQL
DESCRIPTION: This snippet demonstrates the use of the geometry_to_bing_tiles function, which has been fixed to handle certain degenerate geometries without causing query failures.

LANGUAGE: sql
CODE:
SELECT geometry_to_bing_tiles(geometry)

----------------------------------------

TITLE: Extending ConnectorSplitSource Interface in Presto SPI
DESCRIPTION: The ConnectorSplitSource interface now extends Closeable. This is a backwards incompatible change that requires connector updates before deploying this release.

LANGUAGE: text
CODE:
The ``ConnectorSplitSource`` interface now extends ``Closeable``.

----------------------------------------

TITLE: Executing xxhash64 Function in SQL
DESCRIPTION: The xxhash64 function is introduced in this release. It's important to note that in the next release, this function will return a varbinary instead of a bigint.

LANGUAGE: sql
CODE:
SELECT xxhash64(column_name) FROM table_name;

----------------------------------------

TITLE: Array Cumulative Sum Example in Presto SQL
DESCRIPTION: Demonstrates the array_cum_sum function that computes cumulative sums of array elements.

LANGUAGE: sql
CODE:
SELECT array_cum_sum(ARRAY [1, 2, null, 3]) -- array[1, 3, null, null]

----------------------------------------

TITLE: Configuring Google Sheets Connector in Presto
DESCRIPTION: This snippet shows the configuration properties needed to set up the Google Sheets connector in Presto. It includes the connector name, path to credentials, and metadata sheet ID.

LANGUAGE: text
CODE:
connector.name=gsheets
credentials-path=/path/to/google-sheets-credentials.json
metadata-sheet-id=exampleId

----------------------------------------

TITLE: Normalizing Myanmar Text to Unicode in Presto SQL
DESCRIPTION: This function normalizes Myanmar text to Unicode. If the input is Zawgyi-encoded, it converts it to Unicode. If the input is already in Unicode, it remains unchanged.

LANGUAGE: SQL
CODE:
myanmar_normalize_unicode(text) -> varchar

----------------------------------------

TITLE: Creating Table of Contents for Presto Migration Documentation
DESCRIPTION: This snippet uses reStructuredText to create a table of contents for Presto migration documentation. It sets up a toctree directive with a maximum depth of 1 and includes a single entry for migration from Hive.

LANGUAGE: reStructuredText
CODE:
.. toctree::
    :maxdepth: 1

    migration/from-hive

----------------------------------------

TITLE: Configuring TPCDS Connector in Presto
DESCRIPTION: Creates a catalog properties file for the TPCDS connector. This configuration enables the TPCDS connector in Presto.

LANGUAGE: properties
CODE:
connector.name=tpcds

----------------------------------------

TITLE: Configuring Maximum CPU Time for Queries in Presto 0.143
DESCRIPTION: A new configuration option query.max-cpu-time is introduced to limit the CPU time used by individual queries.

LANGUAGE: SQL
CODE:
SET SESSION query.max-cpu-time = '1h'

----------------------------------------

TITLE: Calling Round Function on TinyInt in Presto SQL
DESCRIPTION: Demonstrates the usage of the round function with tinyint arguments, which previously caused ambiguity failures.

LANGUAGE: sql
CODE:
round()

----------------------------------------

TITLE: Configuring Delta Connector Case-Sensitive Partitions in SQL
DESCRIPTION: Sets the Delta connector configuration to enable or disable case-sensitive partitions. This property allows querying data with partitioned columns having uppercase names when set to true.

LANGUAGE: SQL
CODE:
SET SESSION delta.case-sensitive-partitions-enabled = true

----------------------------------------

TITLE: Querying Available Tables in Local File Connector
DESCRIPTION: SQL command to list all available tables in the local file connector's logs schema.

LANGUAGE: sql
CODE:
SHOW TABLES FROM localfile.logs;

----------------------------------------

TITLE: Configuring Hive Parquet Reader Properties
DESCRIPTION: Configuration properties for enabling the optimized Parquet reader and predicate push down functionality in Presto's Hive catalog. These settings can be applied either at the session level or through catalog properties.

LANGUAGE: properties
CODE:
<hive-catalog>.parquet_optimized_reader_enabled

LANGUAGE: properties
CODE:
hive.parquet-optimized-reader.enabled=true

LANGUAGE: properties
CODE:
<hive-catalog>.parquet_predicate_pushdown_enabled

LANGUAGE: properties
CODE:
hive.parquet-predicate-pushdown.enabled=true

----------------------------------------

TITLE: Configuring Ignored Functions for Verifier
DESCRIPTION: Configuration property to specify functions that should be ignored during result mismatch resolution in the Presto Verifier component.

LANGUAGE: properties
CODE:
ignored-functions.functions=<function_list>

----------------------------------------

TITLE: Using TRY and COALESCE for Default Values in Presto SQL
DESCRIPTION: Shows how to combine TRY and COALESCE functions to provide default values when encountering division by zero or other errors in calculations.

LANGUAGE: sql
CODE:
SELECT COALESCE(TRY(total_cost / packages), 0) AS per_package FROM shipping;

----------------------------------------

TITLE: CALL Statement Simple Example
DESCRIPTION: Basic example of calling a procedure with positional arguments.

LANGUAGE: sql
CODE:
CALL test(123, 'apple');

----------------------------------------

TITLE: SQL Column Reference Changes
DESCRIPTION: Updates to SQL column information schema, removing non-standard is_partition_key column and modifying partition key comments format.

LANGUAGE: sql
CODE:
information_schema.columns

----------------------------------------

TITLE: Using map_agg() and array_agg() Functions in SQL
DESCRIPTION: These functions are used for aggregating data into maps and arrays respectively. The release notes mention improvements in memory accounting accuracy for these functions.

LANGUAGE: sql
CODE:
SELECT map_agg(key, value), array_agg(column);

----------------------------------------

TITLE: SQL DROP COLUMN Syntax
DESCRIPTION: New SQL syntax support for dropping columns from tables in Presto 0.181

LANGUAGE: sql
CODE:
ALTER TABLE table_name DROP COLUMN column_name

----------------------------------------

TITLE: Documenting Release Version in reStructuredText
DESCRIPTION: Defines the release version header using reStructuredText syntax. This snippet sets the title for the release notes of Presto version 0.243.1.

LANGUAGE: reStructuredText
CODE:
===============
Release 0.243.1
===============

----------------------------------------

TITLE: Querying Memory Pools with Wildcards
DESCRIPTION: SQL query example showing how to use wildcards to match multiple MBean objects for memory pool monitoring.

LANGUAGE: sql
CODE:
SELECT freebytes, node, object_name
FROM jmx.current."com.facebook.presto.memory:*type=memorypool*";

----------------------------------------

TITLE: Aggregating Maps and Arrays in Presto SQL
DESCRIPTION: The map_agg() and array_agg() functions have improved memory accounting accuracy. This may result in these functions appearing to use more memory than in previous versions.

LANGUAGE: sql
CODE:
map_agg(key, value)

LANGUAGE: sql
CODE:
array_agg(value)

----------------------------------------

TITLE: Creating Empty Table from Existing Schema
DESCRIPTION: Example showing how to create an empty table using the schema from an existing table without copying its data.

LANGUAGE: sql
CODE:
CREATE TABLE empty_nation AS
SELECT *
FROM nation
WITH NO DATA

----------------------------------------

TITLE: Configuring Alluxio SDK Cache in Presto Hive Properties
DESCRIPTION: Basic configuration settings for enabling Alluxio SDK cache in Presto's Hive connector. Includes settings for node selection strategy, cache type, maximum cache size, and base directory location.

LANGUAGE: properties
CODE:
hive.node-selection-strategy=SOFT_AFFINITY
cache.enabled=true
cache.type=ALLUXIO
cache.alluxio.max-cache-size=500GB
cache.base-directory=/tmp/alluxio-cache

----------------------------------------

TITLE: Describing Cassandra Table Structure
DESCRIPTION: Output showing the structure of the users table in Presto

LANGUAGE: none
CODE:
 Column  |  Type   | Extra | Comment
---------+---------+-------+---------
 user_id | bigint  |       |
 fname   | varchar |       |
 lname   | varchar |       |
(3 rows)

----------------------------------------

TITLE: SQL COMMIT Command Usage Examples in Presto
DESCRIPTION: Demonstrates two valid ways to use the COMMIT command in Presto SQL: with and without the optional WORK keyword.

LANGUAGE: sql
CODE:
COMMIT;
COMMIT WORK;

----------------------------------------

TITLE: File-Based Authorization Configuration Example
DESCRIPTION: JSON configuration example for file-based authorization in the Hive connector, including schema, table, and session property rules.

LANGUAGE: json
CODE:
{
  "schemas": [
    {
      "user": "admin",
      "schema": ".*",
      "owner": true
    },
    {
      "user": "guest",
      "owner": false
    },
    {
      "schema": "default",
      "owner": true
    }
  ],
  "tables": [
    {
      "user": "admin",
      "privileges": ["SELECT", "INSERT", "DELETE", "OWNERSHIP"]
    },
    {
      "user": "banned_user",
      "privileges": []
    },
    {
      "schema": "default",
      "table": ".*",
      "privileges": ["SELECT"]
    }
  ],
  "sessionProperties": [
    {
      "property": "force_local_scheduling",
      "allow": true
    },
    {
      "user": "admin",
      "property": "max_split_size",
      "allow": true
    }
  ]
}

----------------------------------------

TITLE: Executing SQL Group By with Empty Grouping Set in Presto
DESCRIPTION: This snippet demonstrates the use of an empty grouping set in a GROUP BY clause. The release notes indicate that errors for such queries are now raised during analysis rather than execution.

LANGUAGE: sql
CODE:
GROUP BY ()

----------------------------------------

TITLE: Replacing VARCHAR to JSON Cast in SQL
DESCRIPTION: Shows how to replace the deprecated cast from VARCHAR to JSON using the new JSON_PARSE function in Presto SQL.

LANGUAGE: SQL
CODE:
JSON_PARSE(x)

----------------------------------------

TITLE: SQL Map Function Declaration
DESCRIPTION: New function added to construct empty maps in Presto

LANGUAGE: sql
CODE:
map()

----------------------------------------

TITLE: Demonstrating RST Warning Block in Presto Release Notes
DESCRIPTION: This RST code snippet shows a warning about a bug in SORT or LIMIT operations when using GROUPING SETS, CUBE, or ROLLUP, introduced in version 0.246.

LANGUAGE: rst
CODE:
.. warning::
    There is a bug causing ``SORT`` or``LIMIT`` to be incorrectly eliminated when using ``GROUPING SETS (())`, ``CUBE`` or ``ROLLUP``,
    first introduced in 0.246 by :pr:`14915`

----------------------------------------

TITLE: Creating Verifier Snapshots Table in MySQL
DESCRIPTION: SQL code to create a table for storing verifier snapshots in a MySQL database. This table is used in query-bank mode to save and compare query results.

LANGUAGE: sql
CODE:
CREATE TABLE verifier_snapshots (
    id int(11) unsigned NOT NULL PRIMARY KEY AUTO_INCREMENT,
    suite varchar(256) NOT NULL,
    name varchar(256) NOT NULL DEFAULT '.',
    is_explain BOOLEAN NOT NULL DEFAULT false,
    snapshot json NOT NULL,
    updated_at datetime NOT NULL DEFAULT now(),
    UNIQUE(suite, name, is_explain))

----------------------------------------

TITLE: Configuring Memory Management Properties
DESCRIPTION: Configuration properties for controlling memory limits in Presto queries and worker nodes. Includes settings for total distributed memory, per-node memory limits, and system reserved memory.

LANGUAGE: Properties
CODE:
query.max-memory=<value>\nquery.max-memory-per-node=<value>\nresources.reserved-system-memory=<value>

----------------------------------------

TITLE: Configuring Alluxio Cache Settings in Presto
DESCRIPTION: Configuration properties required to enable local data caching using Alluxio cache library in Presto. These settings enable the cache functionality and specify Alluxio as the cache implementation type.

LANGUAGE: properties
CODE:
cache.enabled=true
cache.type=ALLUXIO

----------------------------------------

TITLE: Configuring SingleStore Connector Properties
DESCRIPTION: Basic configuration for connecting Presto to SingleStore database. Includes essential connection parameters like connector name, JDBC URL, username and password that should be placed in the etc/catalog directory.

LANGUAGE: properties
CODE:
connector.name=singlestore
connection-url=jdbc:singlestore://localhost:3306
connection-user=root
connection-password=LbRootPass1

----------------------------------------

TITLE: Querying Table Properties in Presto SQL
DESCRIPTION: This SQL query retrieves all available table properties from the system metadata. It's useful for listing connector-specific properties that can be used when creating new tables.

LANGUAGE: SQL
CODE:
SELECT * FROM system.metadata.table_properties

----------------------------------------

TITLE: BIGINT Column Type Reference
DESCRIPTION: Reference to BIGINT data type in context of fixing NULL matching behavior in semi joins and group by operations

LANGUAGE: sql
CODE:
BIGINT

----------------------------------------

TITLE: Exposing Query Stats in Presto JDBC Driver ResultSet
DESCRIPTION: Enhances the Presto JDBC driver to expose query statistics through the ResultSet interface, allowing applications to access performance metrics for executed queries.

LANGUAGE: SQL
CODE:
ResultSet

----------------------------------------

TITLE: Enabling Column Name Matching for Hive Parquet Tables in Presto
DESCRIPTION: Configures Presto to match columns between table and partition schemas by names for Hive Parquet tables. This can be enabled through a configuration property or a Hive catalog session property.

LANGUAGE: sql
CODE:
hive.parquet.use-column-names = true
parquet_use_column_names = true

----------------------------------------

TITLE: Disabling Reserved Memory Pool in Presto SQL
DESCRIPTION: Disable the reserved memory pool to prevent excessive spilling for large memory-consuming queries. The experimental.reserved-pool-enabled property is used to disable this feature.

LANGUAGE: sql
CODE:
SET SESSION experimental.reserved-pool-enabled = false

----------------------------------------

TITLE: Explaining Query Plan for Partitioned Tables in SQL
DESCRIPTION: Fixes the EXPLAIN query plan for tables partitioned on TIMESTAMP or DATE columns.

LANGUAGE: SQL
CODE:
EXPLAIN SELECT * FROM partitioned_table WHERE date_column = DATE '2023-01-01';

----------------------------------------

TITLE: Defining approx_most_frequent Aggregation Function in Presto
DESCRIPTION: Adds a new aggregation function called approx_most_frequent to Presto. This function likely estimates the most frequent items in a dataset.

LANGUAGE: rst
CODE:
* Add :func:`!approx_most_frequent` aggregation function.

----------------------------------------

TITLE: Creating Table with Fixed Row Count
DESCRIPTION: Creating a Black Hole table with specific configuration for generating a fixed number of rows using split_count, pages_per_split, and rows_per_page properties.

LANGUAGE: sql
CODE:
CREATE TABLE blackhole.test.nation (
  nationkey bigint,
  name varchar
)
WITH (
  split_count = 500,
  pages_per_split = 1000,
  rows_per_page = 2000
);

----------------------------------------

TITLE: Configuration Property for Task Writers
DESCRIPTION: Configuration property to specify the number of writers per task.

LANGUAGE: Properties
CODE:
task.writer-count

----------------------------------------

TITLE: USE Statement Examples
DESCRIPTION: Practical examples of the USE statement showing how to switch to a specific catalog and schema (hive.finance) and how to switch to a schema in the current catalog (information_schema).

LANGUAGE: sql
CODE:
USE hive.finance;
USE information_schema;

----------------------------------------

TITLE: Enabling Custom Authentication in Presto Coordinator
DESCRIPTION: Configuration property required in the coordinator's config.properties file to enable custom authentication in Presto.

LANGUAGE: properties
CODE:
http-server.authentication.type=CUSTOM

----------------------------------------

TITLE: Updated Hive Split Iterator Configuration
DESCRIPTION: Modified configuration parameter for controlling Hive split iterator threads.

LANGUAGE: properties
CODE:
hive.max-split-iterator-threads=<value>

----------------------------------------

TITLE: New Mathematical Functions in Presto SQL
DESCRIPTION: Adds new mathematical functions: degrees and radians for angle conversion, and to_base and from_base for number base conversion.

LANGUAGE: SQL
CODE:
degrees(angle)
radians(angle)
to_base(number, base)
from_base(string, base)

----------------------------------------

TITLE: Optimizing CASE Expressions on Constants in Presto SQL
DESCRIPTION: Enhances the performance of CASE expressions when used with constant values in Presto SQL queries.

LANGUAGE: SQL
CODE:
CASE

----------------------------------------

TITLE: Function Reference - ROUND Performance Fix
DESCRIPTION: Documentation of a performance regression fix in the ROUND function that was caused by type casting issues.

LANGUAGE: text
CODE:
!ROUND

----------------------------------------

TITLE: Reserved Header Names in Presto
DESCRIPTION: List of blocked headers that cannot be overridden by the Client Request Filter. These headers are reserved for Presto's internal use.

LANGUAGE: text
CODE:
X-Presto-Transaction-Id
X-Presto-Started-Transaction-Id
X-Presto-Clear-Transaction-Id
X-Presto-Trace-Token

----------------------------------------

TITLE: Querying Distinct Count in SQL
DESCRIPTION: Demonstrates the new support for DISTINCT argument qualifier in aggregation functions, limited to queries without a GROUP BY clause and where all aggregation functions have the same input expression.

LANGUAGE: SQL
CODE:
SELECT count(DISTINCT country)
FROM users

----------------------------------------

TITLE: Configuring Presto CLI Preprocessor
DESCRIPTION: Explains how to set up a preprocessor for Presto CLI commands using the PRESTO_PREPROCESSOR environment variable. This feature allows all commands to be piped through a specified program before being sent to the Presto server.

LANGUAGE: Shell
CODE:
export PRESTO_PREPROCESSOR="/path/to/preprocessor"

----------------------------------------

TITLE: Configuration Property - RCFile Writer
DESCRIPTION: Configuration settings for enabling the new optimized RCFile writer in Hive connector.

LANGUAGE: Properties
CODE:
rcfile_optimized_writer_enabled=true
hive.rcfile-optimized-writer.enabled=true

----------------------------------------

TITLE: Querying Specific Delta Lake Table Snapshot
DESCRIPTION: Reading data from a specific version snapshot of a Delta Lake table.

LANGUAGE: sql
CODE:
SELECT * FROM sales.apac."sales_data@v4" LIMIT 200;

----------------------------------------

TITLE: Describing Table Columns in SingleStore using Presto
DESCRIPTION: These SQL snippets demonstrate two ways to view the columns of a specific table in a SingleStore database using Presto: DESCRIBE and SHOW COLUMNS commands.

LANGUAGE: sql
CODE:
DESCRIBE singlestore.web.clicks;
SHOW COLUMNS FROM singlestore.web.clicks;

----------------------------------------

TITLE: Configuring Elasticsearch Connector in Presto
DESCRIPTION: Configuration properties for the Elasticsearch connector in Presto, controlling HTTP connections and thread count.

LANGUAGE: Properties
CODE:
elasticsearch.max-http-connections=<value>
elasticsearch.http-thread-count=<value>

----------------------------------------

TITLE: General Changes Documentation
DESCRIPTION: Lists various function additions, configuration changes, and bug fixes implemented in this release including new mathematical functions, array operations, and improvements to query handling.

LANGUAGE: markdown
CODE:
* Fix ``%f`` specifier in :func:`!date_format` and :func:`!date_parse`.
* Add ``WITH ORDINALITY`` support to ``UNNEST``.
* Add :func:`!array_distinct` function.
* Add :func:`!split` function.
* Add :func:`!degrees` and :func:`!radians` functions.
* Add :func:`!to_base` and :func:`!from_base` functions.
* Rename config property ``task.shard.max-threads`` to ``task.max-worker-threads``.
* Fix referencing ``NULL`` values in :ref:`row_type`.
* Make :ref:`map_type` comparable.
* Fix leak of tasks blocked during query teardown.
* Improve query queue config validation.

----------------------------------------

TITLE: Router Configuration JSON
DESCRIPTION: JSON configuration for router groups, selectors, scheduler type, and predictor settings.

LANGUAGE: none
CODE:
{
  "groups": [
    {
      "name": "all",
      "members": ["http://127.0.0.1:61381", "http://127.0.0.1:61382"],
      "weights": [1, 5]
    }
  ],
  "selectors": [
    {
      "targetGroup": "all"
    }
  ],
  "scheduler": "RANDOM_CHOICE",
  "predictor": "http://127.0.0.1:8000/v1"
}

----------------------------------------

TITLE: Setting Maven Plugin Packaging
DESCRIPTION: Maven configuration to mark a project as a Presto plugin, which automatically generates the necessary service resource files.

LANGUAGE: none
CODE:
<packaging>presto-plugin</packaging>

----------------------------------------

TITLE: Revoking Select Privilege and Grant Option from Public Role in Presto SQL
DESCRIPTION: Shows how to revoke the SELECT privilege and the ability to grant this privilege on the 'nation' table from the PUBLIC role using the REVOKE command in Presto SQL.

LANGUAGE: sql
CODE:
REVOKE GRANT OPTION FOR SELECT ON nation FROM ROLE PUBLIC;

----------------------------------------

TITLE: Query Bank Mode Configuration
DESCRIPTION: Configuration properties for enabling query-bank mode in Presto Verifier.

LANGUAGE: none
CODE:
running-mode=query-bank
save-snapshot=true

----------------------------------------

TITLE: Displaying CLI Help Information
DESCRIPTION: Command to display the CLI's help information showing all available options and their descriptions.

LANGUAGE: bash
CODE:
./presto --help

----------------------------------------

TITLE: Retrieving Values from Maps using Subscript Operator in Presto SQL
DESCRIPTION: Demonstrates how to use the [] subscript operator to retrieve a value from a map using a given key.

LANGUAGE: sql
CODE:
SELECT name_to_age_map['Bob'] AS bob_age;

----------------------------------------

TITLE: Implementing FinishUpdate Method in ConnectorMetadata for Presto
DESCRIPTION: This method is called after all splits have been processed for an UPDATE operation. It receives fragments from all splits and finalizes the operation, potentially committing the transaction.

LANGUAGE: java
CODE:
void finishUpdate(
    ConnectorSession session,
    ConnectorTableHandle tableHandle,
    Collection<Slice> fragments)

----------------------------------------

TITLE: Configuring REST Catalog
DESCRIPTION: Basic configuration for using REST catalog with the Iceberg connector

LANGUAGE: none
CODE:
connector.name=iceberg
iceberg.catalog.type=rest
iceberg.rest.uri=https://localhost:8181

----------------------------------------

TITLE: Setting Homebrew Path on Apple Silicon Mac
DESCRIPTION: Command to set the PATH environment variable to prioritize /usr/local/bin for Homebrew on Apple Silicon Mac.

LANGUAGE: bash
CODE:
export PATH=/usr/local/bin:$PATH

----------------------------------------

TITLE: Executing Presto CLI with Kerberos Debugging
DESCRIPTION: Bash script to launch the Presto CLI with additional Kerberos debugging information enabled. It uses the java command to run the CLI JAR file directly with a JVM argument for Kerberos debugging.

LANGUAGE: bash
CODE:
#!/bin/bash

java \
  -Dsun.security.krb5.debug=true \
  -jar presto-cli-*-executable.jar \
  --server https://presto-coordinator.example.com:7778 \
  --krb5-config-path /etc/krb5.conf \
  --krb5-principal someuser@EXAMPLE.COM \
  --krb5-keytab-path /home/someuser/someuser.keytab \
  --krb5-remote-service-name presto \
  --keystore-path /tmp/presto.jks \
  --keystore-password password \
  --catalog <catalog> \
  --schema <schema>

----------------------------------------

TITLE: Defining RST Table of Contents for Presto Developer Guide
DESCRIPTION: ReStructuredText markup defining the table of contents structure for Presto's developer documentation. Lists all major development topics with relative paths to their respective documentation files.

LANGUAGE: rst
CODE:
.. toctree::
    :maxdepth: 1

    develop/spi-overview
    develop/connectors
    develop/example-http
    develop/delete-and-update
    develop/types
    develop/functions
    develop/system-access-control
    develop/password-authenticator
    develop/event-listener
    develop/client-protocol
    develop/worker-protocol
    develop/serialized-page
    develop/presto-console
    develop/presto-authenticator
    develop/client-request-filter

----------------------------------------

TITLE: Scaling Quantile Digest in Presto SQL
DESCRIPTION: Returns a new qdigest with its distribution scaled by the specified factor. This allows adjusting the scale of the digest without recomputing from raw data.

LANGUAGE: SQL
CODE:
scale_qdigest(qdigest(T), scale_factor) -> qdigest(T)

----------------------------------------

TITLE: Enabling Exchange Materialization in Presto SQL
DESCRIPTION: SQL commands to enable exchange materialization by setting session properties. This includes setting the strategy, partitioning provider catalog, and hash partition count.

LANGUAGE: sql
CODE:
SET SESSION exchange_materialization_strategy='ALL';

-- Set partitioning_provider_catalog to the Hive connector catalog
SET SESSION partitioning_provider_catalog='hive';

-- We recommend setting hash_partition_count to be at least 5X-10X about the cluster size
-- when exchange materialization is enabled.
SET SESSION hash_partition_count = 4096;

----------------------------------------

TITLE: Querying Data from SingleStore Table using Presto
DESCRIPTION: This SQL snippet shows how to select all data from a specific table in a SingleStore database using Presto.

LANGUAGE: sql
CODE:
SELECT * FROM singlestore.web.clicks;

----------------------------------------

TITLE: Configuring JMX Connector with Escaped Commas in Presto
DESCRIPTION: Configuration example for the JMX connector in Presto, demonstrating how to escape commas in MBean names when specifying dump tables.

LANGUAGE: none
CODE:
connector.name=jmx
jmx.dump-tables=com.facebook.presto.memory:type=memorypool\,name=general,\
   com.facebook.presto.memory:type=memorypool\,name=system,\
   com.facebook.presto.memory:type=memorypool\,name=reserved

----------------------------------------

TITLE: Splitting Strings to Maps in Presto SQL
DESCRIPTION: Shows how to use split_to_map() function with a custom resolver for duplicate keys in Presto SQL.

LANGUAGE: SQL
CODE:
SELECT(split_to_map('a:1;b:2;a:3', ';', ':', (k, v1, v2) -> v1)); -- Returns {"a": "1", "b": "2"}
SELECT(split_to_map('a:1;b:2;a:3', ';', ':', (k, v1, v2) -> CONCAT(v1, v2))); -- Returns {"a": "13", "b": "2"}

----------------------------------------

TITLE: Setting Up JWT Internal Authentication
DESCRIPTION: Configuration for enabling JWT authentication between Presto nodes using a shared secret.

LANGUAGE: text
CODE:
internal-communication.jwt.enabled=true
internal-communication.shared-secret=<secret>

LANGUAGE: text
CODE:
openssl rand 512 | base64

----------------------------------------

TITLE: RST Table of Contents for Presto Clients
DESCRIPTION: ReStructuredText directive defining the documentation structure for Presto clients with maxdepth of 1 level.

LANGUAGE: rst
CODE:
.. toctree::
    :maxdepth: 1

    clients/presto-cli
    clients/presto-console
    clients/dbeaver
    clients/superset

----------------------------------------

TITLE: Enabling Parquet Dereference Pushdown in Presto Hive Connector
DESCRIPTION: Configuration settings to enable pushing dereferences into Parquet table scans, optimizing nested column reads. This feature can be enabled using a Hive configuration property and a Hive session property.

LANGUAGE: SQL
CODE:
-- Hive configuration property
hive.enable-parquet-dereference-pushdown=true

-- Hive session property
SET SESSION parquet_batch_reader_verification_enabled = true;

----------------------------------------

TITLE: Type Interface Methods in Presto
DESCRIPTION: Demonstrates the getJavaType() method that all Types must implement to define their native container type. This is used for value storage during execution and in Blocks.

LANGUAGE: java
CODE:
getJavaType()

----------------------------------------

TITLE: Creating Bucketed Sorted Tables in Hive Connector
DESCRIPTION: Demonstrates how to create a bucketed and sorted table in Hive using the new sorted_by table property. The hive.sorted-writing config property or sorted_writing_enabled session property can be used to control writing to sorted tables.

LANGUAGE: SQL
CODE:
CREATE TABLE example_table (
  id INT,
  name VARCHAR,
  value DOUBLE
)
WITH (
  bucketed_by = ARRAY['id'],
  bucket_count = 16,
  sorted_by = ARRAY['name']
);

----------------------------------------

TITLE: Querying Data from SQL Server Table
DESCRIPTION: This SQL query shows how to select all data from a specific table ('clicks') in the SQL Server database using Presto syntax.

LANGUAGE: sql
CODE:
SELECT * FROM sqlserver.web.clicks;

----------------------------------------

TITLE: Router Launch Commands
DESCRIPTION: Command line instructions for starting the Presto router either as a daemon or in the foreground.

LANGUAGE: none
CODE:
bin/launcher start

LANGUAGE: none
CODE:
bin/launcher run

----------------------------------------

TITLE: Defining Array Fields in Elasticsearch Mapping
DESCRIPTION: cURL command to update Elasticsearch mapping metadata for array field definitions.

LANGUAGE: shell
CODE:
curl --request PUT \
    --url localhost:9200/doc/_mapping \
    --header 'content-type: application/json' \
    --data '
{
    "_meta": {
        "presto":{
            "array_string_field":{
                "isArray":true
            },
            "object_field":{
                "array_int_field":{
                    "isArray":true
                }
            },
        }
    }
}'

----------------------------------------

TITLE: Configuring Hive Connector in Presto
DESCRIPTION: Configuration for the hive.properties file to set up the Hive connector in Presto. It specifies the connector name and the Hive metastore URI.

LANGUAGE: properties
CODE:
connector.name=hive-hadoop2
hive.metastore.uri=thrift://localhost:9083

----------------------------------------

TITLE: Enabling Kerberos Debugging in JVM Config
DESCRIPTION: JVM configuration settings to enable additional Kerberos debugging information for the Presto coordinator process.

LANGUAGE: properties
CODE:
-Dsun.security.krb5.debug=true
-Dlog.enable-console=true

----------------------------------------

TITLE: Installing Presto on Apple Silicon Mac using Homebrew
DESCRIPTION: Command to install Presto on an Apple Silicon (M1 or M2) Mac system using Homebrew package manager.

LANGUAGE: bash
CODE:
arch -x86_64 brew install prestodb

----------------------------------------

TITLE: Enabling HTTPS Endpoint in Presto Configuration
DESCRIPTION: Configures the HTTPS endpoint in Presto's config.properties file, including port and keystore settings.

LANGUAGE: properties
CODE:
http-server.https.enabled=true
http-server.https.port=<https port>
http-server.https.keystore.path=<keystore path>
http-server.https.keystore.key=<keystore password>

----------------------------------------

TITLE: CALL Statement Fully Qualified Name
DESCRIPTION: Example demonstrating how to call a procedure using a fully qualified name including catalog and schema.

LANGUAGE: sql
CODE:
CALL catalog.schema.test();

----------------------------------------

TITLE: Viewing Oracle Table Columns in Presto
DESCRIPTION: SQL commands for viewing column information of a specific table in Oracle through Presto.

LANGUAGE: sql
CODE:
DESCRIBE oracle.web.clicks;
SHOW COLUMNS FROM oracle.web.clicks;

----------------------------------------

TITLE: KLL Sketch Functions in Presto SQL
DESCRIPTION: Functions for computing and analyzing KLL sketches for quantile calculations. Includes functions for creating sketches with optional k parameter control, computing quantiles, and determining ranks of values within the distribution.

LANGUAGE: sql
CODE:
sketch_kll[T](x: T) -> kllsketch[T]
sketch_kll_with_k[T](x: T, k: int) -> kllsketch[T]
sketch_kll_quantile[T](sketch: kllsketch[T], rank: double[, inclusivity: boolean]) -> T
sketch_kll_rank[T](sketch: kllsketch[T], quantile: T[, inclusivity: boolean]) -> double

----------------------------------------

TITLE: Demonstrating FETCH FIRST Syntax in SQL
DESCRIPTION: Example showing the new ANSI SQL compliant FETCH FIRST syntax as an alternative to LIMIT clause

LANGUAGE: sql
CODE:
select * from table_name FETCH FIRST 3 ROWS ONLY

LANGUAGE: sql
CODE:
SELECT * FROM table_name LIMIT 3

----------------------------------------

TITLE: Creating a Complex Kudu Table with Multiple Partitions
DESCRIPTION: SQL statement demonstrating the creation of a Kudu table with multiple hash partitions and a range partition.

LANGUAGE: SQL
CODE:
CREATE TABLE events (
  rack varchar WITH (primary_key=true),
  machine varchar WITH (primary_key=true),
  event_time timestamp WITH (primary_key=true),
  ...
) WITH (
  partition_by_hash_columns = ARRAY['rack'],
  partition_by_hash_buckets = 2,
  partition_by_second_hash_columns = ARRAY['machine'],
  partition_by_second_hash_buckets = 3,
  partition_by_range_columns = ARRAY['event_time'],
  range_partitions = '[{"lower": null, "upper": "2018-01-01T00:00:00"}, {"lower": "2018-01-01T00:00:00", "upper": null}]'
)

----------------------------------------

TITLE: Generating Customized Uniqueness Distribution of KHyperLogLog Sketch in Presto SQL
DESCRIPTION: This function returns the uniqueness histogram with a specified number of buckets. If omitted, the default value is 256. All uniqueness values greater than histogramSize are accumulated in the last bucket.

LANGUAGE: SQL
CODE:
uniqueness_distribution(khll, histogramSize) ->  map<bigint,double>

----------------------------------------

TITLE: Starting Presto Server in Foreground on Apple Silicon Mac
DESCRIPTION: Command to start the Presto server in the foreground on an Apple Silicon Mac.

LANGUAGE: bash
CODE:
arch -x86_64 presto-server run

----------------------------------------

TITLE: Configuring Lark Sheets Properties in Presto
DESCRIPTION: Configuration properties file for mounting Lark Sheets connector as a catalog in Presto. Defines essential connection parameters including app domain, ID, and secret file location.

LANGUAGE: text
CODE:
connector.name=lark-sheets
app-domain=FEISHU
app-id=example_app_id
app-secret-file=/path/to/app-secret.json

----------------------------------------

TITLE: Installing Presto on Intel Mac
DESCRIPTION: Command to install Presto using Homebrew on an Intel Mac. This installs Presto in the /usr/local/Cellar/prestodb/<version> directory.

LANGUAGE: bash
CODE:
brew install prestodb

----------------------------------------

TITLE: Calculating Jaccard Index of Set Digests in Presto SQL
DESCRIPTION: Demonstrates how to estimate the Jaccard index for two set digests using the jaccard_index function.

LANGUAGE: SQL
CODE:
SELECT jaccard_index(make_set_digest(v1), make_set_digest(v2))
FROM (VALUES (1, 1), (NULL,2), (2, 3), (NULL, 4)) T(v1, v2);

----------------------------------------

TITLE: Referencing Functions in reStructuredText
DESCRIPTION: Shows how to reference functions using reStructuredText syntax when mentioning the element_at function and new binomial functions.

LANGUAGE: rst
CODE:
:func:`!element_at`

LANGUAGE: rst
CODE:
:func:`!binomial_cdf`

LANGUAGE: rst
CODE:
:func:`!inverse_binomial_cdf`

----------------------------------------

TITLE: Adding a Range Partition to Kudu Table via Presto
DESCRIPTION: SQL procedure call to add a new range partition to an existing Kudu table using Presto.

LANGUAGE: SQL
CODE:
CALL kudu.system.add_range_partition('myschema', 'events', '{"lower": "2018-01-01", "upper": "2018-06-01"}')

----------------------------------------

TITLE: Demonstrating RST Warning Block for SORT and LIMIT Elimination Bug
DESCRIPTION: This RST code snippet shows a warning block about a bug causing incorrect elimination of SORT or LIMIT when using certain grouping operations.

LANGUAGE: rst
CODE:
.. warning::
    There is a bug causing ``SORT`` or``LIMIT`` to be incorrectly eliminated when using ``GROUPING SETS (())`, ``CUBE`` or ``ROLLUP``,
    first introduced in 0.246 by :pr:`14915`

----------------------------------------

TITLE: Using Truncate Function in Presto SQL
DESCRIPTION: Adds support for the 'truncate' function in Presto SQL queries.

LANGUAGE: sql
CODE:
truncate(value)

----------------------------------------

TITLE: Cleaning Up Presto Docker Container
DESCRIPTION: Commands to stop and remove the Presto Docker container

LANGUAGE: bash
CODE:
docker stop presto
docker rm presto

----------------------------------------

TITLE: Using regexp_extract with Capture Groups
DESCRIPTION: Extracts the first match for a specific capture group from a pattern with multiple groups.

LANGUAGE: sql
CODE:
SELECT regexp_extract('1a 2b 14m', '(\d+)([a-z]+)', 2); -- 'a'

----------------------------------------

TITLE: Using IGNORE NULLS Clause with Window Functions in SQL
DESCRIPTION: The IGNORE NULLS clause has been added to various window functions.

LANGUAGE: SQL
CODE:
SELECT LEAD(column) IGNORE NULLS OVER (ORDER BY date) FROM table;

----------------------------------------

TITLE: Querying MySQL Schemas in Presto
DESCRIPTION: SQL query to show available MySQL schemas (databases) in Presto.

LANGUAGE: sql
CODE:
SHOW SCHEMAS FROM mysql;

----------------------------------------

TITLE: Computing Intersection Cardinality of KHyperLogLog Sketches in Presto SQL
DESCRIPTION: This function returns the set intersection cardinality of the data represented by the MinHash structures of two KHyperLogLog sketches.

LANGUAGE: SQL
CODE:
intersection_cardinality(khll1, khll2) ->  bigint

----------------------------------------

TITLE: Configuring File-Based Session Property Manager in Presto
DESCRIPTION: This snippet shows the contents of the 'etc/session-property-config.properties' file needed to enable the built-in file-based session property manager in Presto. It specifies the configuration manager type and the path to the JSON config file.

LANGUAGE: properties
CODE:
session-property-config.configuration-manager=file
session-property-manager.config-file=etc/session-property-config.json

----------------------------------------

TITLE: Interpolating Color Based on Fraction in Presto SQL
DESCRIPTION: This function interpolates a color between two given colors based on a fraction between 0 and 1. It truncates values outside this range to 0 or 1.

LANGUAGE: SQL
CODE:
color(x, low_color, high_color) -> color

----------------------------------------

TITLE: Extracting Query Plan in JSON Format
DESCRIPTION: Command to execute a SQL statement and save its query plan in JSON format to a file using jq for JSON processing.

LANGUAGE: bash
CODE:
./presto --catalog catalogname --schema tpch --execute 'EXPLAIN (format JSON) SELECT 1 from lineitem' --output-format JSON | jq '.["Query Plan"] | fromjson' > plan.json

----------------------------------------

TITLE: Querying Current User in Presto SQL
DESCRIPTION: Returns the username of the currently authenticated user executing the query. This is a standard SQL function that is called without parentheses.

LANGUAGE: sql
CODE:
current_user

----------------------------------------

TITLE: Configuring Minimum Output Page Size for Filter and Project in Presto
DESCRIPTION: Increases the default value for the experimental.filter-and-project-min-output-page-size configuration property to 500kB.

LANGUAGE: properties
CODE:
experimental.filter-and-project-min-output-page-size=500kB

----------------------------------------

TITLE: Querying Oracle Tables in Presto
DESCRIPTION: SQL commands for viewing tables in a specific Oracle database through Presto.

LANGUAGE: sql
CODE:
SHOW TABLES FROM oracle.web;

----------------------------------------

TITLE: Specifying Plugin Entry Point in ServiceLoader Resource File
DESCRIPTION: This snippet shows the content of the ServiceLoader resource file used to specify the plugin entry point class. The file is named 'com.facebook.presto.spi.Plugin' and located in the 'META-INF/services' directory.

LANGUAGE: none
CODE:
com.facebook.presto.example.ExamplePlugin

----------------------------------------

TITLE: Configuring SQL Server Connection with SSL Trust Store
DESCRIPTION: Example of a connection string using SSL configuration with a truststore for secure connections.

LANGUAGE: properties
CODE:
connection-url=jdbc:sqlserver://<host>:<port>;databaseName=<databaseName>;encrypt=true;trustServerCertificate=false;trustStoreType=PEM;hostNameInCertificate=hostname;trustStore=path/to/truststore.pem;trustStorePassword=password

----------------------------------------

TITLE: Casting Array Types in Presto SQL
DESCRIPTION: Support for casting between array types is added. This allows for conversion between arrays of different element types.

LANGUAGE: SQL
CODE:
SELECT CAST(array_column AS ARRAY(INTEGER)) FROM table_name;

----------------------------------------

TITLE: Converting Intervals to Milliseconds in SQL
DESCRIPTION: Adds a new to_milliseconds() function to convert intervals (day to second) to milliseconds.

LANGUAGE: SQL
CODE:
SELECT to_milliseconds(interval_column) FROM table;

----------------------------------------

TITLE: Sample Query Results JSON Structure
DESCRIPTION: Example structure of the QueryResults JSON document returned by the API, showing key fields like id, nextUri, columns, data, and error information.

LANGUAGE: JSON
CODE:
{\n  "id": "query_id",\n  "nextUri": "http://...",\n  "columns": [...],\n  "data": [...],\n  "updateType": "CREATE TABLE",\n  "error": {\n    "message": "...",\n    "errorCode": "..."\n  }\n}

----------------------------------------

TITLE: Configuration Property Examples in Presto
DESCRIPTION: Various configuration properties and session settings introduced or modified in this release, including grouped execution settings and optimization parameters.

LANGUAGE: properties
CODE:
grouped-execution-enabled=true
optimizer.optimize-metadata-queries
exchange.async-page-transport-enabled=false
elasticsearch.max-http-connections
elasticsearch.http-thread-count

----------------------------------------

TITLE: Presto Query Results Response (JSON)
DESCRIPTION: Example JSON response containing query results, including column information, data rows, and updated execution statistics.

LANGUAGE: json
CODE:
{
  "id":"20140108_110629_00011_dk5x2",
  "infoUri":"http://localhost:8001/v1/query/20140108_110629_00011_dk5x2",
  "columns":
  [
     {
        "name":"name",
        "type":"varchar"
     }
  ],
  "data":
  [
     ["4165@domU-12-31-39-0F-CC-72"]
  ],
  "stats":
  {
     "state":"FINISHED",
     "scheduled":true,
     "nodes":1,
     "totalSplits":2,
     "queuedSplits":0,
     "runningSplits":0,
     "completedSplits":2,
     "cpuTimeMillis":1,
     "wallTimeMillis":4,
     "processedRows":1,
     "processedBytes":27,
     "rootStage":
     {
        "stageId":"1",
        "state":"FINISHED",
        "done":true,
        "nodes":1,
        "totalSplits":1,
        "queuedSplits":0,
        "runningSplits":0,
        "completedSplits":1,
        "cpuTimeMillis":0,
        "wallTimeMillis":0,
        "processedRows":1,
        "processedBytes":32,
        "subStages":
        [
            {
              "stageId":"1",
              "state":"FINISHED",
              "done":true,
              "nodes":1,
              "totalSplits":1,
              "queuedSplits":0,
              "runningSplits":0,
              "completedSplits":1,
              "cpuTimeMillis":0,
              "wallTimeMillis":4,
              "processedRows":1,
              "processedBytes":27,
              "subStages":[]
           }
        ]
     }
  }
}

----------------------------------------

TITLE: Using noisy_count_gaussian in Presto SQL
DESCRIPTION: Demonstrates usage of noisy_count_gaussian function that adds normally distributed random noise to counts. Returns NULL for empty sets.

LANGUAGE: sql
CODE:
SELECT noisy_count_gaussian(orderkey, 20.0) FROM tpch.tiny.lineitem; -- 60179 (1 row)
SELECT noisy_count_gaussian(orderkey, 20.0) FROM tpch.tiny.lineitem WHERE false; -- NULL (1 row)

----------------------------------------

TITLE: Implementing Scalar NULL Check Function in Java
DESCRIPTION: Example of a scalar function that checks if a VARCHAR argument is NULL. Uses @ScalarFunction and @SqlType annotations.

LANGUAGE: java
CODE:
public class ExampleNullFunction
{
    @ScalarFunction("is_null", calledOnNullInput = true)
    @Description("Returns TRUE if the argument is NULL")
    @SqlType(StandardTypes.BOOLEAN)
    public static boolean isNull(@SqlNullable @SqlType(StandardTypes.VARCHAR) Slice string)
    {
        return (string == null);
    }
}

----------------------------------------

TITLE: Removing Deprecated Hive Connector Aliases
DESCRIPTION: Shows the removal of support for deprecated Hive connector aliases in Presto configuration.

LANGUAGE: properties
CODE:
# The following connectors are no longer supported:
hive-cdh4
hive-hadoop1
hive-cdh5 # (alias for hive-hadoop2)

----------------------------------------

TITLE: Syntax for DEALLOCATE PREPARE Statement in Presto SQL
DESCRIPTION: Defines the syntax for the DEALLOCATE PREPARE statement in Presto. This statement is used to remove a prepared statement from the current session.

LANGUAGE: sql
CODE:
DEALLOCATE PREPARE statement_name

----------------------------------------

TITLE: Installing Presto on Intel Mac using Homebrew
DESCRIPTION: Command to install Presto on an Intel-based Mac system using Homebrew package manager.

LANGUAGE: bash
CODE:
brew install prestodb

----------------------------------------

TITLE: Configuring Kerberos Authentication in Presto
DESCRIPTION: Shows the change in configuration for enabling Kerberos authentication in Presto. The old config option has been replaced with a new type-based configuration.

LANGUAGE: properties
CODE:
# Old configuration
http.server.authentication.enabled=true

# New configuration
http-server.authentication.type=KERBEROS

----------------------------------------

TITLE: Cosine Similarity Example in SQL
DESCRIPTION: Demonstrates calculation of cosine similarity between two sparse vectors represented as maps

LANGUAGE: sql
CODE:
SELECT cosine_similarity(MAP(ARRAY['a'], ARRAY[1.0]), MAP(ARRAY['a'], ARRAY[2.0]));

----------------------------------------

TITLE: Configuring Data Shuffle for Hive Table Writes in Presto SQL
DESCRIPTION: Enables shuffling of data on partition columns before writing to partitioned unbucketed Hive tables. This can increase the maximum number of partitions that can be written in a single query.

LANGUAGE: SQL
CODE:
SET SESSION shuffle_partitioned_columns_for_table_write = true;

----------------------------------------

TITLE: Retrieving Query Results from Presto (HTTP GET)
DESCRIPTION: Shows how to retrieve query results or status updates using an HTTP GET request to the nextUri provided in the initial response.

LANGUAGE: http
CODE:
GET /v1/statement/20140108_110629_00011_dk5x2/1 HTTP/1.1
Host: localhost:8001
User-Agent: StatementClient/0.55-SNAPSHOT

----------------------------------------

TITLE: Configuring ClickHouse Connector in Presto
DESCRIPTION: Example configuration for connecting Presto to a ClickHouse server. This snippet shows the contents of a catalog properties file.

LANGUAGE: properties
CODE:
connector.name=clickhouse
clickhouse.connection-url=jdbc:clickhouse://host1:8123/
clickhouse.connection-user=default
clickhouse.connection-password=secret

----------------------------------------

TITLE: SQL USE Statement Configuration
DESCRIPTION: Example of SQL USE statement that can now be executed on the server rather than in the CLI

LANGUAGE: sql
CODE:
USE

----------------------------------------

TITLE: Configuring Password File Authenticator in Presto
DESCRIPTION: This snippet shows how to configure the password file authenticator in Presto. It specifies the authenticator name and the path to the password file.

LANGUAGE: none
CODE:
password-authenticator.name=file
file.password-file=/path/to/password.db

----------------------------------------

TITLE: Setting Hive Security Configuration in Presto
DESCRIPTION: Shows how to set the Hive security configuration to 'none' in Presto. This setting affects the enforcement of legacy authorization properties.

LANGUAGE: properties
CODE:
hive.security=none

----------------------------------------

TITLE: Defining RST Documentation Structure
DESCRIPTION: RST toctree directive that specifies the structure and hierarchy of SQL language documentation pages, linking to types and reserved keywords sections.

LANGUAGE: rst
CODE:
.. toctree::
    :maxdepth: 1

    language/types
    language/reserved

----------------------------------------

TITLE: Displaying Warning Message in RST
DESCRIPTION: This RST code snippet shows how to format a warning message about a startup failure bug in Presto 0.244.1 when the function namespace manager is enabled and Thrift is not configured.

LANGUAGE: rst
CODE:
.. warning::
    There is a bug causing failure at startup if function namespace manager is enabled and Thrift is not configured (:pr:`15501`).

----------------------------------------

TITLE: Rendering Values with ANSI Color Codes in SQL (Presto)
DESCRIPTION: Functions for rendering various data types using ANSI color codes, including a specialized function for boolean values.

LANGUAGE: sql
CODE:
render(x, color) -> varchar

LANGUAGE: sql
CODE:
render(b) -> varchar

----------------------------------------

TITLE: Configuring Password Authentication in Presto
DESCRIPTION: Configuration property for enabling password authentication in Presto. Set this to include PASSWORD as an authentication type.

LANGUAGE: properties
CODE:
http-server.authentication.type

----------------------------------------

TITLE: Configuring TPCH Connector in Presto
DESCRIPTION: This snippet shows the contents of the catalog properties file needed to configure the TPCH connector in Presto. It should be placed in 'etc/catalog/tpch.properties'.

LANGUAGE: none
CODE:
connector.name=tpch

----------------------------------------

TITLE: Join Concurrency Configuration
DESCRIPTION: Experimental configuration property for controlling concurrency of join probe operations.

LANGUAGE: properties
CODE:
task.join-concurrency

----------------------------------------

TITLE: Accessing Dynamic Array Index in Presto SQL
DESCRIPTION: Demonstrates how to use the subscript operator in Presto to access a dynamic index of an array, which supports full expressions unlike Hive.

LANGUAGE: SQL
CODE:
SELECT my_array[CARDINALITY(my_array)] as last_element
FROM ...

----------------------------------------

TITLE: SQL Function Addition - Substring
DESCRIPTION: New substring function added to the SQL function library.

LANGUAGE: sql
CODE:
substring

----------------------------------------

TITLE: Altering Verifier Queries Table in SQL
DESCRIPTION: SQL commands to modify the verifier_queries table, adding new columns for test and control pre-queries and post-queries. This change is required when upgrading to Presto 0.124.

LANGUAGE: SQL
CODE:
ALTER TABLE verifier_queries ADD COLUMN test_postqueries text;
ALTER TABLE verifier_queries ADD COLUMN test_prequeries text;
ALTER TABLE verifier_queries ADD COLUMN control_postqueries text;
ALTER TABLE verifier_queries ADD COLUMN control_prequeries text;

----------------------------------------

TITLE: Enabling Verbose History Based Optimizer Runtime Stats in SQL
DESCRIPTION: Enables verbose runtime statistics tracking for the History Based Optimizer. This session property allows monitoring the latency of the HBO optimizer.

LANGUAGE: SQL
CODE:
SET SESSION enable_verbose_history_based_optimizer_runtime_stats = true

----------------------------------------

TITLE: Retrieving Specific Task Information in JSON (Presto)
DESCRIPTION: Example JSON response from the GET /v1/task/{taskId} endpoint, showing detailed information about a specific task including output buffers, statistics, and operator summaries. This data is used by Presto to coordinate queries.

LANGUAGE: json
CODE:
{
  "taskId" : "20140115_170528_00004_dk5x2.0.0",
  "version" : 42,
  "state" : "FINISHED",
  "self" : "http://10.193.207.128:8080/v1/task/20140115_170528_00004_dk5x2.0.0",
  "lastHeartbeat" : "2014-01-15T12:12:12.518-05:00",
  "outputBuffers" : {
    "state" : "FINISHED",
    "masterSequenceId" : 0,
    "pagesAdded" : 1,
    "buffers" : [ {
      "bufferId" : "out",
      "finished" : true,
      "bufferedPages" : 0,
      "pagesSent" : 1
    } ]
  },
  "noMoreSplits" : [ "8" ],
  "stats" : {
    "createTime" : "2014-01-15T12:12:08.520-05:00",
    "startTime" : "2014-01-15T12:12:08.526-05:00",
    "endTime" : "2014-01-15T12:12:12.518-05:00",
    "elapsedTime" : "4.00s",
    "queuedTime" : "6.39ms",
    "totalDrivers" : 1,
    "queuedDrivers" : 0,
    "runningDrivers" : 0,
    "completedDrivers" : 1,
    "memoryReservation" : "174.76kB",
    "totalScheduledTime" : "4.19ms",
    "totalCpuTime" : "4.09ms",
    "totalBlockedTime" : "29.50ms",
    "rawInputDataSize" : "10.90kB",
    "rawInputPositions" : 154,
    "processedInputDataSize" : "10.90kB",
    "processedInputPositions" : 154,
    "outputDataSize" : "10.90kB",
    "outputPositions" : 154,
    "pipelines" : [ {
      "inputPipeline" : true,
      "outputPipeline" : true,
      "totalDrivers" : 1,
      "queuedDrivers" : 0,
      "runningDrivers" : 0,
      "completedDrivers" : 1,
      "memoryReservation" : "0B",
      "queuedTime" : {
        "maxError" : 0.0,
        "count" : 1.0,
        "total" : 5857000.0,
        "p01" : 5857000,
        "p05" : 5857000,
        "p10" : 5857000,
        "p25" : 5857000,
        "p50" : 5857000,
        "p75" : 5857000,
        "p90" : 5857000,
        "p95" : 5857000,
        "p99" : 5857000,
        "min" : 5857000,
        "max" : 5857000
      },
      "elapsedTime" : {
        "maxError" : 0.0,
        "count" : 1.0,
        "total" : 4.1812E7,
        "p01" : 41812000,
        "p05" : 41812000,
        "p10" : 41812000,
        "p25" : 41812000,
        "p50" : 41812000,
        "p75" : 41812000,
        "p90" : 41812000,
        "p95" : 41812000,
        "p99" : 41812000,
        "min" : 41812000,
        "max" : 41812000
      },
      "totalScheduledTime" : "4.19ms",
      "totalCpuTime" : "4.09ms",
      "totalBlockedTime" : "29.50ms",
      "rawInputDataSize" : "10.90kB",
      "rawInputPositions" : 154,
      "processedInputDataSize" : "10.90kB",
      "processedInputPositions" : 154,
      "outputDataSize" : "10.90kB",
      "outputPositions" : 154,
      "operatorSummaries" : [ {
        "operatorId" : 0,
        "operatorType" : "ExchangeOperator",
        "addInputCalls" : 0,
        "addInputWall" : "0.00ns",
        "addInputCpu" : "0.00ns",
        "addInputUser" : "0.00ns",
        "inputDataSize" : "10.90kB",
        "inputPositions" : 154,
        "getOutputCalls" : 1,
        "getOutputWall" : "146.00us",
        "getOutputCpu" : "137.90us",
        "getOutputUser" : "0.00ns",
        "outputDataSize" : "10.90kB",
        "outputPositions" : 154,
        "blockedWall" : "29.50ms",
        "finishCalls" : 0,
        "finishWall" : "0.00ns",
        "finishCpu" : "0.00ns",
        "finishUser" : "0.00ns",
        "memoryReservation" : "0B",
        "info" : {
          "bufferedBytes" : 0,
          "averageBytesPerRequest" : 11158,
          "bufferedPages" : 0,
          "pageBufferClientStatuses" : [ {
            "uri" : "http://10.193.207.128:8080/v1/task/20140115_170528_00004_dk5x2.1.0/results/ab68e201-3878-4b21-b6b9-f6658ddc408b",
            "state" : "closed",
            "lastUpdate" : "2014-01-15T12:12:08.562-05:00",
            "pagesReceived" : 1,
            "requestsScheduled" : 3,
            "requestsCompleted" : 3,
            "httpRequestState" : "queued"
          } ]
        }
      }, {
        "operatorId" : 1,
        "operatorType" : "FilterAndProjectOperator",
        "addInputCalls" : 1,
        "addInputWall" : "919.00us",
        "addInputCpu" : "919.38us",
        "addInputUser" : "0.00ns",
        "inputDataSize" : "10.90kB",
        "inputPositions" : 154,
        "getOutputCalls" : 2,
        "getOutputWall" : "128.00us",
        "getOutputCpu" : "128.64us",
        "getOutputUser" : "0.00ns",
        "outputDataSize" : "10.45kB",
        "outputPositions" : 154,
        "blockedWall" : "0.00ns",
        "finishCalls" : 5,
        "finishWall" : "258.00us",
        "finishCpu" : "253.19us",
        "finishUser" : "0.00ns",
        "memoryReservation" : "0B"
      }, {
        "operatorId" : 2,
        "operatorType" : "OrderByOperator",
        "addInputCalls" : 1,
        "addInputWall" : "438.00us",
        "addInputCpu" : "439.18us",
        "addInputUser" : "0.00ns",
        "inputDataSize" : "10.45kB",
        "inputPositions" : 154,
        "getOutputCalls" : 4,
        "getOutputWall" : "869.00us",
        "getOutputCpu" : "831.85us",
        "getOutputUser" : "0.00ns",
        "outputDataSize" : "10.45kB",
        "outputPositions" : 154,
        "blockedWall" : "0.00ns",
        "finishCalls" : 4,
        "finishWall" : "808.00us",
        "finishCpu" : "810.18us",
        "finishUser" : "0.00ns",
        "memoryReservation" : "174.76kB"
      }, {
        "operatorId" : 3,
        "operatorType" : "FilterAndProjectOperator",
        "addInputCalls" : 1,
        "addInputWall" : "166.00us",
        "addInputCpu" : "166.66us",
        "addInputUser" : "0.00ns",
        "inputDataSize" : "10.45kB",
        "inputPositions" : 154,
        "getOutputCalls" : 5,
        "getOutputWall" : "305.00us",
        "getOutputCpu" : "241.14us",
        "getOutputUser" : "0.00ns",
        "outputDataSize" : "10.90kB",
        "outputPositions" : 154,
        "blockedWall" : "0.00ns",
        "finishCalls" : 2,
        "finishWall" : "70.00us",
        "finishCpu" : "71.02us",
        "finishUser" : "0.00ns",
        "memoryReservation" : "0B"
      }, {
        "operatorId" : 4,
        "operatorType" : "TaskOutputOperator",
        "addInputCalls" : 1,
        "addInputWall" : "50.00us",
        "addInputCpu" : "51.03us",
        "addInputUser" : "0.00ns",
        "inputDataSize" : "10.90kB",
        "inputPositions" : 154,
        "getOutputCalls" : 0,
        "getOutputWall" : "0.00ns",
        "getOutputCpu" : "0.00ns",
        "getOutputUser" : "0.00ns",
        "outputDataSize" : "10.90kB",
        "outputPositions" : 154,
        "blockedWall" : "0.00ns",
        "finishCalls" : 1,
        "finishWall" : "35.00us",
        "finishCpu" : "35.39us",
        "finishUser" : "0.00ns",
        "memoryReservation" : "0B"
      } ],
      "drivers" : [ ]
    } ]
  },
  "failures" : [ ],
  "outputs" : { }
}

----------------------------------------

TITLE: Using abs() Function in SQL
DESCRIPTION: This snippet shows the use of the abs() function in SQL queries. The release notes mention that bounds checks are now performed when evaluating this function.

LANGUAGE: sql
CODE:
SELECT abs(column);

----------------------------------------

TITLE: Adding Redis HBO Provider to Presto Server Assembly
DESCRIPTION: XML configuration to include the Redis HBO Provider plugin in the Presto server assembly. This should be added to the <fileSets> section in presto-server/src/main/assembly/presto.xml.

LANGUAGE: xml
CODE:
<fileSet>
  <directory>${project.build.directory}/dependency/redis-hbo-provider-${project.version}</directory>
  <outputDirectory>plugin/redis-hbo-provider</outputDirectory>
</fileSet>

----------------------------------------

TITLE: Concatenating Arrays with || Operator in SQL
DESCRIPTION: Adds support for concatenating arrays using the || operator in Presto SQL.

LANGUAGE: SQL
CODE:
SELECT ARRAY[1, 2] || ARRAY[3, 4]

----------------------------------------

TITLE: Configuring Local Exchange Buffer Size
DESCRIPTION: Illustrates how to set the local exchange buffer size using the new configuration property 'task.max-local-exchange-buffer-size'.

LANGUAGE: Properties
CODE:
task.max-local-exchange-buffer-size=<size>

----------------------------------------

TITLE: Creating Table from Existing Data
DESCRIPTION: SQL command to create a new table in the Memory connector by copying data from an existing table.

LANGUAGE: sql
CODE:
CREATE TABLE memory.default.nation AS
SELECT * from tpch.tiny.nation;

----------------------------------------

TITLE: Starting Presto CLI
DESCRIPTION: Command to start the Presto CLI, a terminal-based interactive shell for running queries.

LANGUAGE: bash
CODE:
presto

----------------------------------------

TITLE: Enabling Columnar Processing Dictionary in SQL
DESCRIPTION: This configuration option enables columnar processing dictionary in SQL queries. However, it's warned that enabling this feature may lead to query failures in this release, with a fix provided in release 0.133.

LANGUAGE: sql
CODE:
SET columnar_processing_dictionary = true;

----------------------------------------

TITLE: Prometheus Metrics Output Format
DESCRIPTION: Sample output from the worker metrics endpoint showing Prometheus-formatted counter metrics for HTTP requests, memory usage, and cache operations.

LANGUAGE: text
CODE:
# TYPE presto_cpp_num_http_request counter
presto_cpp_num_http_request{cluster="testing",worker=""} 0
# TYPE presto_cpp_num_http_request_error counter
presto_cpp_num_http_request_error{cluster="testing",worker=""} 0
# TYPE presto_cpp_memory_pushback_count counter
presto_cpp_memory_pushback_count{cluster="testing",worker=""} 0
# TYPE velox_driver_yield_count counter
velox_driver_yield_count{cluster="testing",worker=""} 0
# TYPE velox_cache_shrink_count counter
velox_cache_shrink_count{cluster="testing",worker=""} 0
# TYPE velox_memory_cache_num_stale_entries counter
velox_memory_cache_num_stale_entries{cluster="testing",worker=""} 0
# TYPE velox_arbitrator_requests_count counter
velox_arbitrator_requests_count{cluster="testing",worker=""} 0

----------------------------------------

TITLE: Configuring Non-Managed Table Creation in Presto Hive Connector
DESCRIPTION: Configuration option to control whether users can create non-managed (external) tables in the Hive connector. Default is true.

LANGUAGE: properties
CODE:
hive.non-managed-table-creates-enabled=true

----------------------------------------

TITLE: Enabling HBO for Scaled Writers in Presto SQL
DESCRIPTION: Adds support to use History Based Optimizer (HBO) for scaled writers. This feature is configurable via a session property.

LANGUAGE: SQL
CODE:
SET SESSION enable_hbo_for_scaled_writer = true;

----------------------------------------

TITLE: Creating Basic Kudu Table
DESCRIPTION: Example of creating a users table with primary key and hash partitioning

LANGUAGE: sql
CODE:
CREATE TABLE kudu.default.users (
  user_id int WITH (primary_key = true),
  first_name varchar,
  last_name varchar
) WITH (
  partition_by_hash_columns = ARRAY['user_id'],
  partition_by_hash_buckets = 2
);

----------------------------------------

TITLE: Presto Docker Deployment Configuration
DESCRIPTION: Dockerfile configuration for deploying Presto in a container with TPCH catalog.

LANGUAGE: docker
CODE:
FROM openjdk:8-jre

ARG PRESTO_VERSION
ARG PRESTO_BIN=https://repo1.maven.org/maven2/com/facebook/presto/presto-server/${PRESTO_VERSION}/presto-server-${PRESTO_VERSION}.tar.gz

RUN apt-get update
RUN apt-get install -y wget python less

RUN wget --quiet ${PRESTO_BIN}
RUN mkdir -p /opt
RUN tar -xf presto-server-${PRESTO_VERSION}.tar.gz -C /opt
RUN rm presto-server-${PRESTO_VERSION}.tar.gz
RUN ln -s /opt/presto-server-${PRESTO_VERSION} /opt/presto

COPY etc /opt/presto/etc

RUN wget --quiet https://repo1.maven.org/maven2/com/facebook/presto/presto-cli/${PRESTO_VERSION}/presto-cli-${PRESTO_VERSION}-executable.jar
RUN mv presto-cli-${PRESTO_VERSION}-executable.jar /usr/local/bin/presto
RUN chmod +x /usr/local/bin/presto

ENTRYPOINT ./opt/presto/bin/launcher run

----------------------------------------

TITLE: Starting Hive Metastore
DESCRIPTION: Command to start the Hive Metastore service after configuration changes.

LANGUAGE: bash
CODE:
$ ${HIVE_HOME}/hcatalog/sbin/hcat_server.sh start

----------------------------------------

TITLE: Enabling Parquet Column Name Access in Presto Hive Connector
DESCRIPTION: Configures the Hive connector to access Parquet columns by name instead of ordinal position in the Hive catalog properties file.

LANGUAGE: Properties
CODE:
hive.parquet.use-column-names=true

----------------------------------------

TITLE: Debug Configuration Properties
DESCRIPTION: Properties used for debugging and validation in C++ Presto

LANGUAGE: properties
CODE:
native_debug_validate_output_from_operators=false
native_debug_disable_expression_with_peeling=false
native_debug_disable_common_sub_expressions=false
native_debug_disable_expression_with_memoization=false
native_debug_disable_expression_with_lazy_inputs=false

----------------------------------------

TITLE: Creating Empty Map in Presto SQL
DESCRIPTION: Demonstrates how to create an empty map using the map() function.

LANGUAGE: sql
CODE:
SELECT map(); -- {}

----------------------------------------

TITLE: Merging KHyperLogLog Sketches in Presto SQL
DESCRIPTION: Returns the KHyperLogLog of the aggregate union of individual KHyperLogLog structures. An alternative function is provided to merge an array of KHyperLogLog structures.

LANGUAGE: SQL
CODE:
merge(khll)
merge_khll(array(khll))

----------------------------------------

TITLE: Inserting Data into Accumulo Table via Presto
DESCRIPTION: SQL statement to insert data into an Accumulo table using Presto.

LANGUAGE: sql
CODE:
INSERT INTO myschema.scientists VALUES
('row1', 'Grace Hopper', 109, DATE '1906-12-09'),
('row2', 'Alan Turing', 103, DATE '1912-06-23');

----------------------------------------

TITLE: Mounting S3 Bucket in Alluxio
DESCRIPTION: Commands to start Alluxio locally and mount an S3 bucket as a read-only file system in Alluxio.

LANGUAGE: bash
CODE:
$ cd ${ALLUXIO_HOME}
$ bin/alluxio-start.sh local -f
$ bin/alluxio fs mount --readonly /example \
   s3://apc999/presto-tutorial/example-reason/

----------------------------------------

TITLE: Enabling Canonical Partition Key Assumption for Hive in Presto
DESCRIPTION: Configures Presto to assume canonical partition keys for Hive tables. This option fixes an issue where Presto might silently ignore data with non-canonical partition values, but may impact performance for non-string partition keys.

LANGUAGE: Properties
CODE:
hive.assume-canonical-partition-keys=true

----------------------------------------

TITLE: Enabling Canonical Partition Key Assumption for Hive in Presto
DESCRIPTION: Configures Presto to assume canonical partition keys for Hive tables. This option fixes an issue where Presto might silently ignore data with non-canonical partition values, but may impact performance for non-string partition keys.

LANGUAGE: Properties
CODE:
hive.assume-canonical-partition-keys=true

----------------------------------------

TITLE: Configuring Release Notes Table of Contents in RST
DESCRIPTION: RST directive for configuring a table of contents tree for Presto release notes. Sets maximum depth to 1 and includes links to individual release note files.

LANGUAGE: rst
CODE:
.. toctree::
    :maxdepth: 1

    Release-0.291 [2025-01-27] <release/release-0.291>
    Release-0.290 [2024-11-01] <release/release-0.290>
    Release-0.289 [2024-08-23] <release/release-0.289>

----------------------------------------

TITLE: SQL Function Updates
DESCRIPTION: New and updated SQL functions including element_at, url_encode, url_decode, and concat with multiple arguments support.

LANGUAGE: sql
CODE:
first_value, last_value, nth_value, lead, lag, element_at, url_encode, url_decode, concat

----------------------------------------

TITLE: Enabling Open Telemetry Tracing in Presto
DESCRIPTION: A new Open Telemetry tracer implementation has been introduced. It can be enabled by installing the presto-open-telemetry plugin and updating the application configuration. The tracer supports B3 context propagation and W3C baggage headers.

LANGUAGE: Properties
CODE:
# In config.properties
tracing.enabled=true
tracing.implementation=io.opentelemetry.tracing.OpenTelemetryTracer

# Environment variable for exporter endpoint
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317

----------------------------------------

TITLE: Enabling HTTP Request Logging in Prestissimo
DESCRIPTION: Configuration setting to enable HTTP request logging in Prestissimo. Logs are written to the standard log.

LANGUAGE: properties
CODE:
http-server.enable-access-log=true

----------------------------------------

TITLE: Hive Configuration Update
DESCRIPTION: Updated configuration parameter for controlling split iterator threads in Hive connector

LANGUAGE: properties
CODE:
hive.max-split-iterator-threads

----------------------------------------

TITLE: Configuring Hive Metastore for Alluxio
DESCRIPTION: Configuration to include the Alluxio client jar in the Hive classpath by editing the hive-env.sh file.

LANGUAGE: bash
CODE:
export HIVE_AUX_JARS_PATH=${ALLUXIO_HOME}/client/alluxio-<VERSION>-client.jar

----------------------------------------

TITLE: Configuring Hash Aggregation Optimization in Presto
DESCRIPTION: Enables an optimization for hash aggregations in Presto. This feature is disabled by default and can be activated by adding a specific configuration property to the coordinator.

LANGUAGE: Properties
CODE:
optimizer.optimize-hash-generation=true

----------------------------------------

TITLE: Configuring Cluster Memory Management in Presto
DESCRIPTION: Configuration parameters for enabling and controlling the new cluster memory manager, including query memory limits and system memory reservation.

LANGUAGE: properties
CODE:
experimental.cluster-memory-manager-enabled=true
query.max-memory=<value>
query.max-memory-per-node=<value>
resources.reserved-system-memory=<value>

----------------------------------------

TITLE: Retrieving Top N Values from Map in Presto SQL
DESCRIPTION: Demonstrates how to retrieve the top N values from a map using the map_top_n_values() function.

LANGUAGE: sql
CODE:
SELECT map_top_n_values(map(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3]), 2) --- [3, 2]

----------------------------------------

TITLE: Estimating Intersection Cardinality of Set Digests in Presto SQL
DESCRIPTION: Demonstrates how to estimate the cardinality of the intersection between two set digests using the intersection_cardinality function.

LANGUAGE: SQL
CODE:
SELECT intersection_cardinality(make_set_digest(v1), make_set_digest(v2))
FROM (VALUES (1, 1), (NULL, 2), (2, 3), (3, 4)) T(v1, v2);

----------------------------------------

TITLE: Adding Histogram Function in Presto SQL
DESCRIPTION: Introduces the new histogram function in Presto SQL. This function allows for creating histograms from datasets.

LANGUAGE: SQL
CODE:
:func:`histogram`

----------------------------------------

TITLE: SQL Window Function Frame Syntax Example
DESCRIPTION: Example of the window function frame syntax that was fixed in this release, where empty frames between unbounded and bounded in same direction were previously handled incorrectly.

LANGUAGE: sql
CODE:
ROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING

----------------------------------------

TITLE: Basic View Renaming Example in Presto SQL
DESCRIPTION: Simple example demonstrating how to rename a view from 'users' to 'people'.

LANGUAGE: sql
CODE:
ALTER VIEW users RENAME TO people;

----------------------------------------

TITLE: Adding One Day to a Timestamp in SQL
DESCRIPTION: Illustrates the correct way to add one day to a timestamp using the date_add function with the 'day' unit, avoiding time zone complications.

LANGUAGE: SQL
CODE:
SELECT date_add('day', 1, TIMESTAMP '2014-03-08 09:00:00');

----------------------------------------

TITLE: Adding Histogram Function in Presto SQL
DESCRIPTION: Introduces the new histogram function in Presto SQL. This function allows for creating histograms from datasets.

LANGUAGE: SQL
CODE:
:func:`histogram`

----------------------------------------

TITLE: Configuration Property for Columnar Processing
DESCRIPTION: Configuration property to enable dictionary-based columnar processing optimization for filters and projections.

LANGUAGE: properties
CODE:
optimizer.columnar-processing-dictionary

----------------------------------------

TITLE: Configuring Max Partitions per Writer for Iceberg in Presto SQL
DESCRIPTION: Shows how to set the maximum number of partitions per writer for the Iceberg connector using a configuration property.

LANGUAGE: SQL
CODE:
-- Set in configuration:
-- iceberg.max-partitions-per-writer=1000

----------------------------------------

TITLE: Configuring Columnar Processing Dictionary in Presto SQL
DESCRIPTION: This configuration enables performance improvements for filters, projections, and dictionary encoded data. It can be set using either a config property or a session property.

LANGUAGE: sql
CODE:
SET SESSION columnar_processing_dictionary = true;

LANGUAGE: properties
CODE:
optimizer.columnar-processing-dictionary=true

----------------------------------------

TITLE: Subtracting TIME and TIMESTAMP Types in SQL
DESCRIPTION: Implements subtraction for all TIME and TIMESTAMP types.

LANGUAGE: SQL
CODE:
SELECT timestamp1 - timestamp2 FROM table;

----------------------------------------

TITLE: Named Arguments Procedure Call
DESCRIPTION: Example of calling a procedure using named arguments, allowing arguments to be specified in any order.

LANGUAGE: sql
CODE:
CALL catalog_name.system.procedure_name(arg_name_2 => arg_2, arg_name_1 => arg_1);

----------------------------------------

TITLE: Implementing NodeManager Injection in Presto Plugin
DESCRIPTION: Java code showing how to inject the NodeManager interface into a Presto plugin class. This allows plugins to detect all nodes in the Presto cluster.

LANGUAGE: java
CODE:
@Inject
public void setNodeManager(NodeManager nodeManager)
{
    this.nodeManager = nodeManager;
}

----------------------------------------

TITLE: Configuring Session Properties Example
DESCRIPTION: Example showing how to configure and declare session properties in a Presto connector implementation, focusing on HiveSessionProperties.

LANGUAGE: java
CODE:
SessionPropertyMetadata

----------------------------------------

TITLE: Configuring GCS Access Token Refresh in Presto CLI
DESCRIPTION: This command demonstrates how to use local private credentials (JSON key file) to refresh the Google Cloud Storage access token when using the Presto CLI.

LANGUAGE: bash
CODE:
presto-cli --extra-credential hive.gcs.credentials.path="${PRIVATE_KEY_JSON_PATH}"

----------------------------------------

TITLE: Enabling Optimized RCFile Writer in Presto Hive
DESCRIPTION: Shows how to enable the new experimental RCFile writer optimized for Presto using either a session property or a Hive catalog property.

LANGUAGE: SQL
CODE:
SET SESSION rcfile_optimized_writer_enabled = true;

LANGUAGE: Properties
CODE:
hive.rcfile-optimized-writer.enabled=true

----------------------------------------

TITLE: Configuring TLS Client Certificate Authentication in JDBC Driver
DESCRIPTION: Illustrates how to configure TLS client certificate authentication in the Presto JDBC driver by setting the SSLKeyStorePath and SSLKeyStorePassword parameters.

LANGUAGE: Properties
CODE:
SSLKeyStorePath=/path/to/keystore
SSLKeyStorePassword=keystore_password

----------------------------------------

TITLE: Setting Internal Address Authentication Type in Presto
DESCRIPTION: This configuration snippet demonstrates how to specify the authentication type for Presto's internal address. It allows for different authentication types such as KERBEROS, PASSWORD, or JWT.

LANGUAGE: none
CODE:
node.internal-address=<authentication type>

----------------------------------------

TITLE: Adding Redis HBO Provider to Presto Server Assembly
DESCRIPTION: XML configuration to include the Redis HBO Provider plugin in the Presto server assembly process.

LANGUAGE: xml
CODE:
<fileSet>
   <directory>${project.build.directory}/dependency/redis-hbo-provider-${project.version}</directory>
   <outputDirectory>plugin/redis-hbo-provider</outputDirectory>
</fileSet>

----------------------------------------

TITLE: Disabling Hash Generation Optimization in Presto 0.122
DESCRIPTION: This configuration setting is mentioned in relation to a bug in Presto 0.122 that causes queries to fail when disabled. It's important for users to be aware of this issue.

LANGUAGE: sql
CODE:
optimizer.optimize-hash-generation

----------------------------------------

TITLE: Enabling Spill Compression in Presto SQL
DESCRIPTION: Enable spill compression to reduce disk I/O at the cost of extra CPU load. The spill-compression-enabled property is used to enable this feature.

LANGUAGE: sql
CODE:
SET SESSION spill-compression-enabled = true

----------------------------------------

TITLE: SQL Error Reference - Memory Limit
DESCRIPTION: Error message related to memory limit tracking during spilled data reading

LANGUAGE: sql
CODE:
EXCEEDED_LOCAL_MEMORY_LIMIT

----------------------------------------

TITLE: Using LIKE Predicate with SHOW Commands in Presto SQL
DESCRIPTION: Shows how to use the LIKE predicate with SHOW SESSION and SHOW CATALOGS commands, including ESCAPE support for pattern matching.

LANGUAGE: SQL
CODE:
SHOW SESSION LIKE 'optimizer%';

LANGUAGE: SQL
CODE:
SHOW CATALOGS LIKE 'h%' ESCAPE '\';

----------------------------------------

TITLE: Configuration Property Reference - System Memory Pool
DESCRIPTION: Configuration property to enable legacy system pool behavior in Presto.

LANGUAGE: properties
CODE:
deprecated.legacy-system-pool-enabled

----------------------------------------

TITLE: Kerberos Authentication Configuration for Presto Router
DESCRIPTION: Additional configuration properties for enabling Kerberos authentication in the Presto router.

LANGUAGE: none
CODE:
query-tracker.http-client.authentication.enabled=true
query-tracker.http-client.authentication.krb5.name-type=USER_NAME
query-tracker.http-client.authentication.krb5.principal=presto@REMOTE.BIZ
query-tracker.http-client.authentication.krb5.remote-service-name=HTTP/PRESTO@REMOTE.BIZ
query-tracker.http-client.authentication.krb5.service-principal-pattern=PATTERN

----------------------------------------

TITLE: ANSI SQL Identifier and String Quoting in Presto
DESCRIPTION: Shows proper ANSI SQL syntax for quoting identifiers with double quotes and strings with single quotes.

LANGUAGE: sql
CODE:
SELECT name AS "User Name"
FROM "7day_active"
WHERE name = 'foo'

----------------------------------------

TITLE: Deleting from a Partitioned Hive Table in Presto SQL
DESCRIPTION: This SQL statement shows how to delete data from a partitioned Hive table using Presto. It demonstrates the requirement of specifying partition columns in the WHERE clause for deletion operations.

LANGUAGE: SQL
CODE:
DELETE FROM orders
WHERE order_date = '2015-10-15' AND order_region = 'APAC'

----------------------------------------

TITLE: Starting Presto Server on Apple Silicon Mac
DESCRIPTION: Command to start the Presto server as a background process on an Apple Silicon Mac.

LANGUAGE: bash
CODE:
arch -x86_64 presto-server start

----------------------------------------

TITLE: Retrieving Failed Node Information in Presto
DESCRIPTION: This endpoint returns a list of nodes that have failed the last heartbeat check. The response includes detailed information about each failed node, similar to the GET /v1/node endpoint.

LANGUAGE: http
CODE:
GET /v1/node/failed

HTTP/1.1 200 OK
Vary: Accept
Content-Type: text/javascript

[
   {
      "age": "1.37m",
      "lastFailureInfo": {
          "message": "Connect Timeout",
          "stack": [
              "org.eclipse.jetty.io.ManagedSelector$ConnectTimeout.run(ManagedSelector.java:683)",
              ....
              "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)",
              "java.lang.Thread.run(Thread.java:745)"
          ],
          "suppressed": [],
          "type": "java.net.SocketTimeoutException"
      },
      "lastRequestTime": "2017-08-05T11:52:42.647Z",
      "lastResponseTime": "2017-08-05T11:52:42.647Z",
      "recentFailureRatio": 0.22498784153043677,
      "recentFailures": 20.11558290058638,
      "recentFailuresByType": {
          "java.net.SocketTimeoutException": 20.11558290058638
      },
      "recentRequests": 89.40742203558189,
      "recentSuccesses": 69.30583024727453,
      "uri": "http://172.19.0.3:8080"
   }
]

----------------------------------------

TITLE: Setting Session Property for Warning Handling in SQL
DESCRIPTION: Shows how to set the new session property 'warning_handling' to control how warnings are handled in Presto. Options include SUPPRESS, NORMAL, and AS_ERROR.

LANGUAGE: SQL
CODE:
SET SESSION warning_handling = 'NORMAL'

----------------------------------------

TITLE: Enabling Join Prefiltering in Presto
DESCRIPTION: This code snippet shows how to enable join prefiltering to improve join performance by prefiltering the build side with distinct keys from the probe side using a session property.

LANGUAGE: SQL
CODE:
SET SESSION join_prefilter_build_side = true;

----------------------------------------

TITLE: T-Digest Aggregation with Parameters
DESCRIPTION: Creates a T-digest from input values with optional weight and compression parameters. The compression factor affects accuracy and performance trade-offs.

LANGUAGE: sql
CODE:
tdigest_agg(x, w, compression) -> tdigest<double>

----------------------------------------

TITLE: SQL DDL Enhancement - CREATE TABLE IF NOT EXISTS
DESCRIPTION: Added support for IF NOT EXISTS clause in CREATE TABLE AS queries.

LANGUAGE: sql
CODE:
CREATE TABLE AS ... IF NOT EXISTS

----------------------------------------

TITLE: Enabling Compressed Exchanges in Presto Configuration
DESCRIPTION: Demonstrates how to enable compressed exchanges in Presto using a configuration option. This feature can potentially improve performance by reducing network traffic.

LANGUAGE: properties
CODE:
exchange.compression-enabled=true

----------------------------------------

TITLE: Synchronizing Partition Metadata in Presto Hive Connector
DESCRIPTION: A new system procedure to synchronize partitions in the metastore with the partitions physically present in the file system. This procedure is part of the Hive connector changes in Presto 0.241.

LANGUAGE: SQL
CODE:
CALL system.sync_partition_metadata();

----------------------------------------

TITLE: Executing DESCRIBE OUTPUT in Presto SQL
DESCRIPTION: Shows the syntax for executing the DESCRIBE OUTPUT statement in Presto SQL. This statement is used to list the output columns of a prepared statement.

LANGUAGE: none
CODE:
DESCRIBE OUTPUT statement_name

----------------------------------------

TITLE: Setting S3 Intelligent-Tiering Storage Class for Hive Connector in Presto
DESCRIPTION: Enables the use of S3 Intelligent-Tiering storage class when writing data through the Hive connector. This is configured using a Hive-specific configuration property.

LANGUAGE: sql
CODE:
hive.s3.storage-class = INTELLIGENT_TIERING

----------------------------------------

TITLE: Configuration Property for Node Memoization
DESCRIPTION: Configuration setting to enable cache affinity improvement by memoizing dead nodes for a limited time.

LANGUAGE: plaintext
CODE:
internal-communication.memoize-dead-nodes-enabled=true

----------------------------------------

TITLE: Retrieving Hash Counts from Set Digest in Presto SQL
DESCRIPTION: Demonstrates how to get a map of Murmur3Hash128 hashed values and their occurrence counts from a set digest using the hash_counts function.

LANGUAGE: SQL
CODE:
SELECT hash_counts(make_set_digest(value))
FROM (VALUES 1, 1, 1, 2, 2) T(value);

----------------------------------------

TITLE: SQL Function Enhancement - JSON Extract
DESCRIPTION: Performance improvements for the json_extract function.

LANGUAGE: sql
CODE:
json_extract

----------------------------------------

TITLE: Flow Type Checker Implementation
DESCRIPTION: Shows how to enable Flow type checking in JSX files

LANGUAGE: javascript
CODE:
//@flow

----------------------------------------

TITLE: Creating MySQL Table in Presto
DESCRIPTION: SQL command to create a new MySQL table with specified columns using Presto.

LANGUAGE: sql
CODE:
CREATE TABLE mysql.web.page_views (
  user_id bigint,
  page_url varchar,
  ds date,
  country varchar
);

----------------------------------------

TITLE: Hive Metastore Headers Configuration
DESCRIPTION: Session property to configure custom headers for metastore operations in Hive connector.

LANGUAGE: properties
CODE:
hive.metastore_headers

----------------------------------------

TITLE: Querying Bit Count Function in SQL
DESCRIPTION: This snippet mentions a fix for the bit_count function in SQL, specifically for bits between 33 and 63. The function is used to count the number of set bits in a binary representation.

LANGUAGE: SQL
CODE:
bit_count(column_name)

----------------------------------------

TITLE: Array Subscript Access in Presto SQL
DESCRIPTION: Demonstrates how to access array elements using the [] operator, which is 1-based indexed.

LANGUAGE: sql
CODE:
SELECT my_array[1] AS first_element

----------------------------------------

TITLE: Using cosine_similarity Function in Presto SQL
DESCRIPTION: Introduces the new cosine_similarity function in Presto 0.144.7. This function calculates the cosine similarity between two vectors, which is useful for various data analysis and machine learning tasks.

LANGUAGE: sql
CODE:
SELECT cosine_similarity(vector1, vector2) FROM table;

----------------------------------------

TITLE: Creating Connector Instance with Guice Dependency Injection
DESCRIPTION: Implementation of the create() method in ExampleConnectorFactory that configures the connector using Guice for dependency injection. Sets up required modules and initializes the connector instance.

LANGUAGE: java
CODE:
// A plugin is not required to use Guice; it is just very convenient
Bootstrap app = new Bootstrap(
        new JsonModule(),
        new ExampleModule(catalogName));

Injector injector = app
        .doNotInitializeLogging()
        .setRequiredConfigurationProperties(requiredConfig)
        .initialize();

return injector.getInstance(ExampleConnector.class);

----------------------------------------

TITLE: Using substr Function with VARBINARY in SQL
DESCRIPTION: The substr function has been extended to work with VARBINARY data type in addition to CHAR and VARCHAR. This snippet shows the function signature.

LANGUAGE: SQL
CODE:
substr(VARBINARY)

----------------------------------------

TITLE: Querying Presto via POST Request
DESCRIPTION: Sends a POST request to /v1/statement with the SQL query in the body. Returns a JSON document containing query results and potentially a nextUri for subsequent requests.

LANGUAGE: http
CODE:
POST /v1/statement HTTP/1.1
Host: presto-server
Content-Type: application/json
X-Presto-User: username

{"query": "SELECT * FROM table"}

----------------------------------------

TITLE: Adding construct_tdigest Function for TDigest Type in Presto
DESCRIPTION: Adds the construct_tdigest() function for working with TDigest type in Presto. This function is likely used to create or manipulate TDigest data structures.

LANGUAGE: sql
CODE:
construct_tdigest()

----------------------------------------

TITLE: SQL JOIN Optimization Changes
DESCRIPTION: Support for improved JOIN criteria handling including FALSE expression optimization and non-equality predicates.

LANGUAGE: sql
CODE:
JOIN

----------------------------------------

TITLE: Terminating a Running Query via DELETE Request
DESCRIPTION: Sends a DELETE request to the nextUri to terminate a running query.

LANGUAGE: http
CODE:
DELETE /v1/statement/20140120_032523_00005_dk5sd/2 HTTP/1.1
Host: presto-server
X-Presto-User: username

----------------------------------------

TITLE: Configuring Maximum Output Stage Size for Event Logging
DESCRIPTION: This configuration property sets the maximum size of the output stage JSON that will be included in the completion event. It helps prevent excessively large event logs.

LANGUAGE: SQL
CODE:
event.max-output-stage-size

----------------------------------------

TITLE: Correcting JOIN Query Results in Presto 0.89
DESCRIPTION: A rare condition where JOIN queries could produce incorrect results has been fixed. This improves the reliability of JOIN operations in Presto.

LANGUAGE: sql
CODE:
JOIN

----------------------------------------

TITLE: Sample Nessie Docker Logs
DESCRIPTION: Example logs from running Nessie in Docker

LANGUAGE: none
CODE:
2023-09-05 13:11:37,905 INFO  [io.quarkus] (main) nessie-quarkus 0.69.0 on JVM (powered by Quarkus 3.2.4.Final) started in 1.921s. Listening on: http://0.0.0.0:19120
2023-09-05 13:11:37,906 INFO  [io.quarkus] (main) Profile prod activated.
2023-09-05 13:11:37,906 INFO  [io.quarkus] (main) Installed features: [agroal, amazon-dynamodb, cassandra-client, cdi, google-cloud-bigtable, hibernate-validator, jdbc-postgresql, logging-sentry, micrometer, mongodb-client, narayana-jta, oidc, opentelemetry, reactive-routes, resteasy, resteasy-jackson, security, security-properties-file, smallrye-context-propagation, smallrye-health, smallrye-openapi, swagger-ui, vertx]

----------------------------------------

TITLE: Merging Maps with Custom Function in Presto SQL
DESCRIPTION: Demonstrates how to merge two maps using a custom function to combine values for matching keys using the map_zip_with() function.

LANGUAGE: sql
CODE:
SELECT map_zip_with(MAP(ARRAY[1, 2, 3], ARRAY['a', 'b', 'c']), -- {1 -> ad, 2 -> be, 3 -> cf}
                            MAP(ARRAY[1, 2, 3], ARRAY['d', 'e', 'f']),
                            (k, v1, v2) -> concat(v1, v2));
SELECT map_zip_with(MAP(ARRAY['k1', 'k2'], ARRAY[1, 2]), -- {k1 -> ROW(1, null), k2 -> ROW(2, 4), k3 -> ROW(null, 9)}
                            MAP(ARRAY['k2', 'k3'], ARRAY[4, 9]),
                            (k, v1, v2) -> (v1, v2));
SELECT map_zip_with(MAP(ARRAY['a', 'b', 'c'], ARRAY[1, 8, 27]), -- {a -> a1, b -> b4, c -> c9}
                            MAP(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3]),
                            (k, v1, v2) -> k || CAST(v1/v2 AS VARCHAR));

----------------------------------------

TITLE: Cluster Memory Manager Configuration
DESCRIPTION: Flag to disable the cluster memory manager which is enabled by default in this release.

LANGUAGE: Properties
CODE:
experimental.cluster-memory-manager-enabled=false

----------------------------------------

TITLE: Listing System Tables in Presto
DESCRIPTION: Demonstrates how to list tables within the system.runtime schema.

LANGUAGE: sql
CODE:
SHOW TABLES FROM system.runtime;

----------------------------------------

TITLE: SPI Function Implementation Example
DESCRIPTION: Example showing the new first-class function support in SPI, replacing the old FunctionFactory interface. Functions can be implemented as scalar functions using @ScalarFunction, aggregation functions using @AggregationFunction, or window functions by implementing WindowFunction interface.

LANGUAGE: java
CODE:
@ScalarFunction
public class MyScalarFunction {
    // Scalar function implementation
}

@AggregationFunction
public class MyAggregationFunction {
    // Aggregation function implementation
}

public class MyWindowFunction extends ValueWindowFunction {
    // Window function implementation
}

----------------------------------------

TITLE: Fixing classification_precision Function in Presto SQL
DESCRIPTION: Addresses an issue with the classification_precision function that was introduced in release 0.239. The fix corrects incorrect results produced by this function.

LANGUAGE: sql
CODE:
classification_precision()

----------------------------------------

TITLE: SQL Interval Year to Month Example
DESCRIPTION: Example showing the format of INTERVAL YEAR TO MONTH literal in Presto SQL

LANGUAGE: sql
CODE:
INTERVAL '-2-3' YEAR TO MONTH

----------------------------------------

TITLE: Altering PostgreSQL Table in Presto
DESCRIPTION: Shows various ALTER TABLE operations supported by the PostgreSQL connector in Presto, including adding/dropping columns and renaming columns/tables.

LANGUAGE: sql
CODE:
ALTER TABLE postgresql.public.sample_table ADD COLUMN new_col INT;
ALTER TABLE postgresql.public.sample_table DROP COLUMN new_col;
ALTER TABLE postgresql.public.sample_table RENAME COLUMN is_active TO is_enabled;
ALTER TABLE postgresql.public.sample_table RENAME TO renamed_table;

----------------------------------------

TITLE: Adding 24 Hours to a Timestamp in SQL with Time Zone Consideration
DESCRIPTION: Shows how to add 24 hours to a timestamp using the date_add function, demonstrating the impact of daylight saving time in the America/Los Angeles time zone.

LANGUAGE: SQL
CODE:
SELECT date_add('hour', 24, TIMESTAMP '2014-03-08 09:00:00');

----------------------------------------

TITLE: Configuring Hive S3 Instance Credentials in Presto
DESCRIPTION: Sets the configuration option to disable the use of EC2 instance credentials for S3 connections in the Hive catalog properties file.

LANGUAGE: Properties
CODE:
hive.s3.use-instance-credentials=false

----------------------------------------

TITLE: Querying MySQL Table Data in Presto
DESCRIPTION: SQL query to select all data from a MySQL table using Presto.

LANGUAGE: sql
CODE:
SELECT * FROM mysql.web.clicks;

----------------------------------------

TITLE: Renaming Presto Task Configuration Property
DESCRIPTION: The 'task.verbose-stats' configuration property has been renamed to 'task.per-operator-cpu-timer-enabled'. This change affects how CPU timing for operators is enabled.

LANGUAGE: properties
CODE:
task.per-operator-cpu-timer-enabled=

----------------------------------------

TITLE: Using EXPLAIN ANALYZE with JSON Format in Presto
DESCRIPTION: Demonstrates how to use the EXPLAIN ANALYZE statement with the new JSON format option to get detailed query execution information.

LANGUAGE: SQL
CODE:
EXPLAIN ANALYZE (FORMAT JSON) SELECT * FROM table;

----------------------------------------

TITLE: Hashing Binary Data in Presto SQL
DESCRIPTION: Various hashing functions for binary data, including CRC32, MD5, MurmurHash3, SHA variants, xxhash64, and SpookyHashV2.

LANGUAGE: SQL
CODE:
crc32(binary) -> bigint
md5(binary) -> varbinary
murmur3_x64_128(binary) -> varbinary
sha1(binary) -> varbinary
sha256(binary) -> varbinary
sha512(binary) -> varbinary
xxhash64(binary) -> varbinary
spooky_hash_v2_32(binary) -> varbinary
spooky_hash_v2_64(binary) -> varbinary

----------------------------------------

TITLE: Formatting Date in Spanish Using date_format Function in SQL
DESCRIPTION: Demonstrates the use of the date_format function with localization support, formatting a date in Spanish.

LANGUAGE: SQL
CODE:
SELECT date_format(TIMESTAMP '2001-01-09 09:04', '%M');

----------------------------------------

TITLE: Configuring Hive S3 File System Retry Time in Presto
DESCRIPTION: Sets the maximum retry time for the Hive S3 file system in Presto. This configuration option allows users to control how long Presto will attempt to retry operations on the S3 file system before giving up.

LANGUAGE: Properties
CODE:
hive.s3.max-retry-time=<value>

----------------------------------------

TITLE: Inserting Data into Table
DESCRIPTION: SQL command to insert a single row of data into a table.

LANGUAGE: sql
CODE:
INSERT INTO memory.default1.my_table (id, name, age) VALUES (1, 'John Doe', 30);

----------------------------------------

TITLE: Configuring Bucket Function Type for Exchange in Presto SQL
DESCRIPTION: Sets the bucket function type for exchange materialization to PRESTO_NATIVE. This can be done either through a session property or a configuration property.

LANGUAGE: SQL
CODE:
SET SESSION bucket_function_type_for_exchange = 'PRESTO_NATIVE';

LANGUAGE: Properties
CODE:
hive.bucket-function-type-for-exchange=PRESTO_NATIVE

----------------------------------------

TITLE: Using CREATE TABLE AS with Custom Storage Format in Presto 0.143
DESCRIPTION: When using CREATE TABLE AS with a custom storage format, ensure hive.respect-table-format is set to true to avoid data corruption.

LANGUAGE: SQL
CODE:
SET SESSION hive.respect-table-format = true;
CREATE TABLE new_table WITH (format = 'PARQUET') AS SELECT * FROM source_table

----------------------------------------

TITLE: Window Function Frame Fix in SQL
DESCRIPTION: Fix for window functions to properly handle empty frames between unbounded and bounded ranges in the same direction. Example demonstrates frame specification that was incorrectly processing first two rows.

LANGUAGE: sql
CODE:
ROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING

----------------------------------------

TITLE: Trimmed Mean Calculation
DESCRIPTION: Calculates the mean excluding portions outside specified quantile bounds.

LANGUAGE: sql
CODE:
trimmed_mean(tdigest<double>, lower_quantile, upper_quantile) -> double

----------------------------------------

TITLE: Formatting Date in Japanese Using date_format Function in SQL
DESCRIPTION: Shows how to use the date_format function with localization support to format a date in Japanese.

LANGUAGE: SQL
CODE:
SELECT date_format(TIMESTAMP '2001-01-09 09:04', '%M');

----------------------------------------

TITLE: Running Presto CLI in Bash
DESCRIPTION: Launches the Presto CLI from the command line, starting the interactive shell.

LANGUAGE: bash
CODE:
./presto

----------------------------------------

TITLE: HANA Query Examples in SQL
DESCRIPTION: Examples of common SQL queries for interacting with HANA databases through Presto.

LANGUAGE: sql
CODE:
SHOW SCHEMAS FROM hana;
SHOW TABLES FROM hana.web;
DESCRIBE hana.web.clicks;
SHOW COLUMNS FROM hana.web.clicks;
SELECT * FROM hana.web.clicks;

----------------------------------------

TITLE: Demonstrating RST Warning Block for Presto 0.248 Bug
DESCRIPTION: This RST code snippet shows a warning block describing a bug in Presto 0.248 related to incorrect elimination of SORT or LIMIT when using certain grouping functions.

LANGUAGE: rst
CODE:
.. warning::
    There is a bug causing ``SORT`` or``LIMIT`` to be incorrectly eliminated when using ``GROUPING SETS (())`, ``CUBE`` or ``ROLLUP``,
    first introduced in 0.246 by :pr:`14915`

----------------------------------------

TITLE: Granting a Single Role to a User in Presto SQL
DESCRIPTION: Demonstrates how to grant a single role 'bar' to a user 'foo' using the GRANT ROLES command in Presto.

LANGUAGE: sql
CODE:
GRANT bar TO USER foo;

----------------------------------------

TITLE: Describing HANA Table Structure in Presto
DESCRIPTION: SQL commands to view the structure of a specific table in the HANA catalog. These queries provide information about the columns in the table.

LANGUAGE: sql
CODE:
DESCRIBE hana.web.clicks;
SHOW COLUMNS FROM hana.web.clicks;

----------------------------------------

TITLE: Configuring Raptor Connector Properties
DESCRIPTION: Configuration properties for setting up the Raptor connector in Presto, specifying the connector name, metadata database type and filename location.

LANGUAGE: properties
CODE:
connector.name=raptor
metadata.db.type=h2
metadata.db.filename=var/data/db/MetaStore

----------------------------------------

TITLE: Retrieving Binary Length in Presto SQL
DESCRIPTION: The length() function returns the length of a binary value in bytes. It takes a single binary argument and returns a bigint result.

LANGUAGE: SQL
CODE:
length(binary) -> bigint

----------------------------------------

TITLE: Controlling Variable Length Columns in Black Hole Connector
DESCRIPTION: Shows how to set the length of variable-length columns using the field_length table property. This allows for more precise control over the generated data.

LANGUAGE: sql
CODE:
CREATE TABLE blackhole.test.nation (
  nationkey bigint,
  name varchar
)
WITH (
  split_count = 500,
  pages_per_split = 1000,
  rows_per_page = 2000,
  field_length = 100
);

----------------------------------------

TITLE: Demonstrating Bigint to Varchar Cast Failure in Presto CLI
DESCRIPTION: This SQL snippet shows an example of how casting a large bigint to a bounded varchar now fails when the result exceeds the specified length. It demonstrates the new behavior where such casts will throw an error instead of truncating the result.

LANGUAGE: SQL
CODE:
select cast(1234500000000000000 as varchar(3));

----------------------------------------

TITLE: Retrieving Node Information with Errors in Presto
DESCRIPTION: This example shows the response from the GET /v1/node endpoint when a node is experiencing errors. It includes detailed information about recent failures, including Java exception types and stack traces.

LANGUAGE: http
CODE:
GET /v1/node

HTTP/1.1 200 OK
Vary: Accept
Content-Type: text/javascript

[
   {
      "age": "4.45m",
      "lastFailureInfo": {
          "message": "Connect Timeout",
          "stack": [
              "org.eclipse.jetty.io.ManagedSelector$ConnectTimeout.run(ManagedSelector.java:683)",
              ....
              "java.lang.Thread.run(Thread.java:745)"
          ],
          "suppressed": [],
          "type": "java.net.SocketTimeoutException"
      },
      "lastRequestTime": "2017-08-05T11:53:00.647Z",
      "lastResponseTime": "2017-08-05T11:53:00.647Z",
      "recentFailureRatio": 0.47263053472046446,
      "recentFailures": 2.8445543205610617,
      "recentFailuresByType": {
          "java.net.SocketTimeoutException": 2.8445543205610617
      },
      "recentRequests": 6.018558073577414,
      "recentSuccesses": 3.1746446343010297,
      "uri": "http://172.19.0.3:8080"
   }
]

----------------------------------------

TITLE: Configuring Dynamic Split Concurrency in Presto SQL
DESCRIPTION: Sets the initial number of splits per node and adjustment interval for dynamic split concurrency. These configurations can improve overall cluster throughput by adjusting the number of running leaf splits per query.

LANGUAGE: sql
CODE:
SET SESSION initial_splits_per_node = <value>;
SET SESSION split_concurrency_adjustment_interval = '<interval>';

----------------------------------------

TITLE: Stopping Presto Server in Background on Intel Mac
DESCRIPTION: Command to stop the Presto server running as a background process on an Intel-based Mac system.

LANGUAGE: bash
CODE:
presto-server stop

----------------------------------------

TITLE: Machine Learning Classification Example in Presto SQL
DESCRIPTION: Example SQL query demonstrating how to train a classifier model and evaluate predictions using Presto's machine learning functions. Features should be provided as a map with integer keys and floating-point values.

LANGUAGE: sql
CODE:
SELECT evaluate_classifier_predictions(label, classify(features, model))
FROM (
    SELECT learn_classifier(label, features) AS model
    FROM training_data
)
CROSS JOIN validation_data

----------------------------------------

TITLE: Defining Redis Table Structure in JSON for Presto
DESCRIPTION: JSON structure for defining Redis table schemas in Presto. This template shows how to specify table name, schema, and field definitions for both key and value data formats.

LANGUAGE: json
CODE:
{
    "tableName": "...",
    "schemaName": "...",
    "key": {
        "dataFormat": "...",
        "fields": [
            ...
        ]
    },
    "value": {
        "dataFormat": "...",
        "fields": [
            ...
       ]
    }
}

----------------------------------------

TITLE: Creating Table in Presto Using Alluxio Storage
DESCRIPTION: SQL commands to create a table in Presto that uses Alluxio as the storage layer, including schema definition and storage properties.

LANGUAGE: sql
CODE:
DROP TABLE IF EXISTS reason;
CREATE TABLE reason (
  r_reason_sk integer,
  r_reason_id varchar,
  r_reason_desc varchar
) WITH (
  external_location = 'alluxio://localhost:19998/example',
  format = 'PARQUET'
);

----------------------------------------

TITLE: Implementing Cross Joins in Presto SQL
DESCRIPTION: Shows the ANSI SQL syntax for performing cross joins between tables in Presto. Cross joins can be explicitly declared or result from inner joins where the join criteria evaluates to true during analysis.

LANGUAGE: sql
CODE:
SELECT *
FROM a
CROSS JOIN b

----------------------------------------

TITLE: SQL Array Functions - arrays_overlap and array_except
DESCRIPTION: New array manipulation functions for checking overlap between arrays and computing set difference.

LANGUAGE: SQL
CODE:
arrays_overlap(array1, array2)
array_except(array1, array2)

----------------------------------------

TITLE: Querying Indexed Accumulo Table in Presto
DESCRIPTION: SQL statement to query an indexed Accumulo table using Presto.

LANGUAGE: sql
CODE:
SELECT * FROM myschema.scientists WHERE age = 109;

----------------------------------------

TITLE: Enabling DROP TABLE for Hive Connector in SQL
DESCRIPTION: This configuration option enables the DROP TABLE feature for the Hive connector. By default, this feature is not enabled.

LANGUAGE: SQL
CODE:
hive.allow-drop-table=true

----------------------------------------

TITLE: Filtering Hudi Table by Symbol in SQL
DESCRIPTION: SQL query example for a Hudi Copy On Write table. This query selects the date and symbol columns, filtering for the symbol 'GOOG'.

LANGUAGE: sql
CODE:
select dt, symbol from stock_ticks_cow where symbol = 'GOOG';

----------------------------------------

TITLE: RST Table of Contents for Cache Documentation
DESCRIPTION: ReStructuredText markup defining the documentation structure for Presto's cache components, including local and service cache implementations.

LANGUAGE: rst
CODE:
.. toctree::
    :maxdepth: 1

    cache/local
    cache/service

----------------------------------------

TITLE: Implementing Table Value Constructor in SQL
DESCRIPTION: Demonstrates the usage of VALUES clause to create inline tables in Presto SQL. Shows both standalone usage and integration with FROM clause using JOIN operations.

LANGUAGE: sql
CODE:
VALUES ('a', 1), ('b', 2);

LANGUAGE: sql
CODE:
SELECT *
FROM (
  VALUES
    ('a', 'ape'),
    ('b', 'bear')
) AS animal (letter, animal)
JOIN (
  VALUES
    ('a', 'apple'),
    ('b', 'banana')
) AS fruit (letter, fruit)
USING (letter);

----------------------------------------

TITLE: Querying Prometheus Data with Time Window
DESCRIPTION: Example SQL query demonstrating how to fetch data from Prometheus with a time-based WHERE clause to limit the data volume.

LANGUAGE: sql
CODE:
SELECT * FROM prometheus.default.up WHERE timestamp > (NOW() - INTERVAL '10' second);

----------------------------------------

TITLE: Adding Redis Connector in Presto
DESCRIPTION: Introduces the new Redis connector in Presto, allowing integration with Redis databases.

LANGUAGE: SQL
CODE:
Add :doc:`/connector/redis`.

----------------------------------------

TITLE: Calculating Set Digest Cardinality in Presto SQL
DESCRIPTION: Uses the cardinality function to determine the number of unique elements in a set digest.

LANGUAGE: SQL
CODE:
SELECT cardinality(make_set_digest(value))
FROM (VALUES 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5) T(value);

----------------------------------------

TITLE: Querying Specific Delta Lake Table Snapshot
DESCRIPTION: Example of querying a specific version of a Delta Lake table using snapshot identifier

LANGUAGE: sql
CODE:
SELECT * FROM sales.apac."sales_data@v4" LIMIT 200;

----------------------------------------

TITLE: Spilling Configuration Properties
DESCRIPTION: Properties to configure memory spilling behavior to disk

LANGUAGE: properties
CODE:
experimental.spill-enabled=false
experimental.spiller-spill-path=
experimental.spiller-max-used-space-threshold=0.9
experimental.spiller-threads=4
experimental.max-spill-per-node=100 GB

----------------------------------------

TITLE: Updating SQL Commands in Presto 0.89
DESCRIPTION: The 'USE CATALOG' and 'USE SCHEMA' commands have been replaced with a new 'USE' command. This change affects how users switch between catalogs and schemas in Presto.

LANGUAGE: sql
CODE:
USE CATALOG

LANGUAGE: sql
CODE:
USE SCHEMA

----------------------------------------

TITLE: Resolving UNION Query Issues with Complex Types in Presto 0.89
DESCRIPTION: An issue where UNION queries involving complex types would fail during planning has been fixed. This allows for more robust handling of complex data types in UNION operations.

LANGUAGE: sql
CODE:
UNION

----------------------------------------

TITLE: SQL Metadata Query Examples
DESCRIPTION: Example queries demonstrating the metadata-only query optimization feature for aggregation operations that are insensitive to input cardinality.

LANGUAGE: sql
CODE:
SELECT min(key), max(key) FROM t;

SELECT DISTINCT key FROM t;

SELECT count(DISTINCT key) FROM t;

SELECT count(DISTINCT key + 5) FROM t;

SELECT count(DISTINCT key) FROM (SELECT key FROM t ORDER BY 1 LIMIT 10);

SELECT key1, count(DISTINCT key2) FROM t GROUP BY 1;

----------------------------------------

TITLE: Querying Delta Lake Table by Path
DESCRIPTION: Example of querying a Delta Lake table directly using its S3 path

LANGUAGE: sql
CODE:
SELECT * FROM sales."$path$"."s3://db-sa-datasets/presto/sales_data" LIMIT 200;

----------------------------------------

TITLE: Show Create Function Single Signature Example
DESCRIPTION: Example showing how to display the creation SQL for a specific array_sum function that takes an ARRAY<BIGINT> parameter.

LANGUAGE: sql
CODE:
SHOW CREATE FUNCTION example.default.array_sum(ARRAY<BIGINT>)

----------------------------------------

TITLE: Retrieving Node Information in Presto
DESCRIPTION: This endpoint returns a list of nodes known to a Presto Server. It provides detailed information about each node, including recent requests, failures, successes, and other statistics. The response includes decaying counters for certain metrics.

LANGUAGE: http
CODE:
GET /v1/node

HTTP/1.1 200 OK
Vary: Accept
Content-Type: text/javascript

[
   {
      "uri":"http://10.209.57.156:8080",
      "recentRequests":25.181940555111073,
      "recentFailures":0.0,
      "recentSuccesses":25.195472984170983,
      "lastRequestTime":"2013-12-22T13:32:44.673-05:00",
      "lastResponseTime":"2013-12-22T13:32:44.677-05:00",
      "age":"14155.28ms",
      "recentFailureRatio":0.0,
      "recentFailuresByType":{}
   }
]

----------------------------------------

TITLE: Configuring Maven POM for Presto Plugin Packaging
DESCRIPTION: This XML snippet demonstrates how to configure the Maven POM file to package a Presto plugin. The 'packaging' element is set to 'presto-plugin' to create the necessary resource file for built-in plugins.

LANGUAGE: xml
CODE:
<packaging>presto-plugin</packaging>

----------------------------------------

TITLE: Building and Running Presto Docker Container
DESCRIPTION: Commands to build a Docker image for Presto and run it as a container.

LANGUAGE: none
CODE:
docker build --build-arg PRESTO_VERSION=<see releases for latest version> . -t prestodb:latest
docker run --name presto prestodb:latest

----------------------------------------

TITLE: Configuring Redis Connector Properties in Presto
DESCRIPTION: Basic configuration for the Redis connector in Presto, including connector name, table names, and Redis server location. This snippet demonstrates the minimum required settings in the catalog properties file.

LANGUAGE: properties
CODE:
connector.name=redis
redis.table-names=schema1.table1,schema1.table2
redis.nodes=host:port

----------------------------------------

TITLE: Querying Black Hole Connector Table in Presto SQL
DESCRIPTION: Illustrates a query on a Black Hole connector table. This query will always return zero, as the connector doesn't actually store data.

LANGUAGE: sql
CODE:
SELECT count(*) FROM blackhole.test.nation;

----------------------------------------

TITLE: Granting Role to User in Presto SQL
DESCRIPTION: An example of granting a single role to a user in Presto.

LANGUAGE: sql
CODE:
GRANT bar TO USER foo;

----------------------------------------

TITLE: Authorizer Configuration Path Setting
DESCRIPTION: Configuration property to specify the path to the role-regex mapping file.

LANGUAGE: properties
CODE:
configuration-based-authorizer.role-regex-map.file-path=<path to mapping file>

----------------------------------------

TITLE: SQL Function Usage - json_extract and json_extract_scalar
DESCRIPTION: Updated JSON path functions that now support escaping double quotes and backslashes in JSON path subscripts using backslash notation.

LANGUAGE: SQL
CODE:
json_extract(json_column, '$.path["escaped\\quote"]')

----------------------------------------

TITLE: Executing Prepared Statement With Parameters
DESCRIPTION: Example of preparing and executing a SELECT statement with two parameters using the USING clause.

LANGUAGE: sql
CODE:
PREPARE my_select2 FROM
SELECT name FROM nation WHERE regionkey = ? and nationkey < ?;

LANGUAGE: sql
CODE:
EXECUTE my_select2 USING 1, 3;

LANGUAGE: sql
CODE:
SELECT name FROM nation WHERE regionkey = 1 AND nationkey < 3;

----------------------------------------

TITLE: Creating a Table Using Black Hole Connector in Presto SQL
DESCRIPTION: Demonstrates how to create a table in the Black Hole connector by copying data from an existing table. This operation doesn't actually store data but sets up the table structure.

LANGUAGE: sql
CODE:
CREATE TABLE blackhole.test.nation AS
SELECT * from tpch.tiny.nation;

----------------------------------------

TITLE: Logical Plan Example
DESCRIPTION: Example showing a logical execution plan for a GROUP BY query on the nation table.

LANGUAGE: sql
CODE:
presto:tiny> EXPLAIN SELECT regionkey, count(*) FROM nation GROUP BY 1;
                                                    Query Plan
    ----------------------------------------------------------------------------------------------------------
     - Output[regionkey, _col1] => [regionkey:bigint, count:bigint]
             _col1 := count
         - RemoteExchange[GATHER] => regionkey:bigint, count:bigint
             - Aggregate(FINAL)[regionkey] => [regionkey:bigint, count:bigint]
                    count := "count"("count_8")
                 - LocalExchange[HASH][$hashvalue] ("regionkey") => regionkey:bigint, count_8:bigint, $hashvalue:bigint
                     - RemoteExchange[REPARTITION][$hashvalue_9] => regionkey:bigint, count_8:bigint, $hashvalue_9:bigint
                         - Project[] => [regionkey:bigint, count_8:bigint, $hashvalue_10:bigint]
                                 $hashvalue_10 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("regionkey"), 0))
                             - Aggregate(PARTIAL)[regionkey] => [regionkey:bigint, count_8:bigint]
                                     count_8 := "count"(*)
                                 - TableScan[tpch:tpch:nation:sf0.1, originalConstraint = true] => [regionkey:bigint]
                                         regionkey := tpch:regionkey

----------------------------------------

TITLE: ALTER FUNCTION with Parameter Type Example
DESCRIPTION: Example showing how to alter a specific function signature by including the parameter type. Modifies the null-call clause of a tangent function.

LANGUAGE: sql
CODE:
ALTER FUNCTION prod.default.tan(double)
CALLED ON NULL INPUT

----------------------------------------

TITLE: Example Base64 Encoded SerializedPage in Project Node
DESCRIPTION: Shows how SerializedPage format appears in a Project node when representing constant array values in a query plan.

LANGUAGE: text
CODE:
- Project[projectLocality = LOCAL] => [expr:array(integer)]
        Estimates: {rows: 1 (51B), cpu: 51.00, memory: 0.00, network: 0.00}
        expr := [Block: position count: 3; size: 92 bytes]

----------------------------------------

TITLE: Querying Delta Lake Table at Timestamp
DESCRIPTION: Reading data from a Delta Lake table as of a specific timestamp.

LANGUAGE: sql
CODE:
SELECT * FROM sales.apac."sales_data@t2021-11-18 09:45" LIMIT 200;

----------------------------------------

TITLE: Example Base64 Encoded SerializedPage in Project Node
DESCRIPTION: Shows how SerializedPage format appears in a Project node when representing constant array values in a query plan.

LANGUAGE: text
CODE:
- Project[projectLocality = LOCAL] => [expr:array(integer)]
        Estimates: {rows: 1 (51B), cpu: 51.00, memory: 0.00, network: 0.00}
        expr := [Block: position count: 3; size: 92 bytes]

----------------------------------------

TITLE: Configuring Maven Dependency for Presto JDBC Driver
DESCRIPTION: Maven configuration snippet for including the Presto JDBC driver in a Java project. The driver is available from Maven Central.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>com.facebook.presto</groupId>
    <artifactId>presto-jdbc</artifactId>
    <version>|version|</version>
</dependency>

----------------------------------------

TITLE: Configuring Hive Connector Properties for Presto
DESCRIPTION: Configuration settings for the Hive connector in Presto to enable connection to the Hive metastore.

LANGUAGE: properties
CODE:
connector.name=hive-hadoop2
hive.metastore.uri=thrift://localhost:9083

----------------------------------------

TITLE: Simple Table Analysis Example
DESCRIPTION: Basic example showing how to analyze a table named 'web' to collect statistics.

LANGUAGE: sql
CODE:
ANALYZE web;

----------------------------------------

TITLE: Using DESCRIBE Command in Presto SQL
DESCRIPTION: Shows the syntax for using the DESCRIBE command to view table column information. This command is an alias for SHOW COLUMNS and displays the structure of a specified table.

LANGUAGE: sql
CODE:
DESCRIBE table_name

----------------------------------------

TITLE: Executing TRUNCATE Command on 'orders' Table in Presto SQL
DESCRIPTION: Demonstrates how to use the TRUNCATE command to delete all rows from a table named 'orders' in Presto SQL.

LANGUAGE: sql
CODE:
TRUNCATE TABLE orders;

----------------------------------------

TITLE: Querying Oracle Schemas in Presto
DESCRIPTION: SQL commands for viewing available Oracle schemas and databases through Presto.

LANGUAGE: sql
CODE:
SHOW SCHEMAS FROM oracle;

----------------------------------------

TITLE: Defining Role-Identity Regex Mapping for Presto Authorization
DESCRIPTION: This code block shows an example of role to identity regex mapping used by the Configuration-based Authorizer in Presto. It defines mappings for user, internal, and admin roles.

LANGUAGE: none
CODE:
user=.*
internal=coordinator
admin=su.*

----------------------------------------

TITLE: Show Create Table Basic Syntax
DESCRIPTION: Basic syntax for the SHOW CREATE TABLE command that displays the SQL statement used to create a specified table.

LANGUAGE: sql
CODE:
SHOW CREATE TABLE table_name

----------------------------------------

TITLE: Using SQL DELETE with Scalar Subqueries in Presto 0.143
DESCRIPTION: Presto 0.143 adds support for scalar subqueries in DELETE queries, enhancing the flexibility of data deletion operations.

LANGUAGE: SQL
CODE:
DELETE FROM table_name WHERE column_name = (SELECT max(value) FROM another_table)

----------------------------------------

TITLE: Implementing Function Plugin in Java
DESCRIPTION: Plugin class that returns a set of custom function implementations. Uses Guava's ImmutableSet to register function classes.

LANGUAGE: java
CODE:
public class ExampleFunctionsPlugin
        implements Plugin
{
    @Override
    public Set<Class<?>> getFunctions()
    {
        return ImmutableSet.<Class<?>>builder()
                .add(ExampleNullFunction.class)
                .add(IsNullFunction.class)
                .add(IsEqualOrNullFunction.class)
                .add(ExampleStringFunction.class)
                .add(ExampleAverageFunction.class)
                .build();
    }
}

----------------------------------------

TITLE: Configuration Properties Example
DESCRIPTION: New configuration properties for cluster statistics and nested data serialization.

LANGUAGE: properties
CODE:
cluster-stats-cache-expiration-duration=0
nested-data-serialization-enabled=TRUE
randomize_outer_join_null_key_strategy=cost_based
restrict_history_based_optimization_to_complex_query=TRUE
pull_expression_from_lambda_enabled=TRUE
rewrite_constant_array_contains_to_in_expression=TRUE

----------------------------------------

TITLE: Querying EXPLAIN Output with Filter in Presto SQL
DESCRIPTION: Example showing EXPLAIN output for a simple SELECT query with a WHERE clause, demonstrating cost estimates for rows, CPU, memory, and network usage across different operation nodes.

LANGUAGE: sql
CODE:
EXPLAIN SELECT comment FROM tpch.sf1.nation WHERE nationkey > 3;

LANGUAGE: none
CODE:
- Output[comment] => [[comment]]
        Estimates: {rows: 22 (1.69kB), cpu: 6148.25, memory: 0.00, network: 1734.25}
    - RemoteExchange[GATHER] => [[comment]]
            Estimates: {rows: 22 (1.69kB), cpu: 6148.25, memory: 0.00, network: 1734.25}
        - ScanFilterProject[table = tpch:nation:sf1.0, filterPredicate = ("nationkey" > BIGINT '3')] => [[comment]]
                Estimates: {rows: 25 (1.94kB), cpu: 2207.00, memory: 0.00, network: 0.00}/{rows: 22 (1.69kB), cpu: 4414.00, memory: 0.00, network: 0.00}/{rows: 22 (1.69kB), cpu: 6148.25, memory: 0.00, network: 0.00}
                nationkey := tpch:nationkey
                comment := tpch:comment

----------------------------------------

TITLE: Starting Presto Server in Background on Apple Silicon Mac
DESCRIPTION: Command to start the Presto server as a background process on an Apple Silicon (M1 or M2) Mac system.

LANGUAGE: bash
CODE:
arch -x86_64 presto-server start

----------------------------------------

TITLE: Simple DROP VIEW Example
DESCRIPTION: Demonstrates how to drop a view named 'orders_by_date' from the database.

LANGUAGE: sql
CODE:
DROP VIEW orders_by_date

----------------------------------------

TITLE: Defining Lark Sheets App Secret JSON
DESCRIPTION: JSON configuration file containing the app secret for Lark Sheets authentication.

LANGUAGE: json
CODE:
{"app-secret": "abcdefghijklmnopqrstuvwxyzabcdef"}

----------------------------------------

TITLE: Renaming Presto CLI JAR file in Bash
DESCRIPTION: Renames the downloaded Presto CLI JAR file to 'presto' for easier usage.

LANGUAGE: bash
CODE:
mv  presto-cli-0.286-executable.jar presto

----------------------------------------

TITLE: Using GROUP BY () in SQL Queries
DESCRIPTION: This SQL snippet shows the usage of GROUP BY with empty parentheses. The release notes mention that errors related to this construct will now be raised during analysis rather than execution.

LANGUAGE: sql
CODE:
SELECT column FROM table GROUP BY ();

----------------------------------------

TITLE: Validating PBKDF2 Passwords in Java with Fallback Mechanism
DESCRIPTION: This method validates passwords using PBKDF2WithHmacSHA256 with a fallback to PBKDF2WithHmacSHA1. It takes the input password and hashed password as parameters and returns a boolean indicating if the password matches.

LANGUAGE: java
CODE:
/**
 * @Deprecated using PBKDF2WithHmacSHA1 is deprecated and clients should switch to PBKDF2WithHmacSHA256
 */
public static boolean doesPBKDF2PasswordMatch(String inputPassword, String hashedPassword)
{
    PBKDF2Password password = PBKDF2Password.fromString(hashedPassword);

    // Validate using PBKDF2WithHmacSHA256
    if (validatePBKDF2Password(inputPassword, password, "PBKDF2WithHmacSHA256")) {
        return true;
    }

    // Fallback to PBKDF2WithHmacSHA1
    LOG.warn("Using deprecated PBKDF2WithHmacSHA1 for password validation.");
    return validatePBKDF2Password(inputPassword, password, "PBKDF2WithHmacSHA1");
}

----------------------------------------

TITLE: Defining Kafka Table Fields in JSON
DESCRIPTION: JSON structure for defining individual fields within a Kafka table. This includes the field name, type, data format, mapping, and other optional properties.

LANGUAGE: json
CODE:
{
    "name": "...",
    "type": "...",
    "dataFormat": "...",
    "mapping": "...",
    "formatHint": "...",
    "hidden": "...",
    "comment": "..."
}

----------------------------------------

TITLE: Create Role with Admin Example
DESCRIPTION: Example demonstrating how to create a role named 'moderator' with a specific user 'bob' as the role administrator.

LANGUAGE: sql
CODE:
CREATE ROLE moderator WITH ADMIN USER bob;

----------------------------------------

TITLE: Configuring Hive Storage Format Respect in Presto
DESCRIPTION: Introduces a configuration option 'hive.respect-table-format' to control whether Presto respects user-specified storage formats in CREATE TABLE AS statements for Hive tables.

LANGUAGE: sql
CODE:
hive.respect-table-format

----------------------------------------

TITLE: Configuring Maximum Grouping Sets in Presto SQL
DESCRIPTION: Sets the maximum number of grouping sets allowed in a GROUP BY clause. The default limit is 2048 and can be configured using the analyzer.max-grouping-sets configuration property or the max_grouping_sets session property.

LANGUAGE: SQL
CODE:
SET SESSION max_grouping_sets = 4096;

----------------------------------------

TITLE: Customer Topic JSON Definition
DESCRIPTION: JSON configuration file that maps Kafka topic data to Presto table columns including key and message field definitions.

LANGUAGE: json
CODE:
{
    "tableName": "customer",
    "schemaName": "tpch",
    "topicName": "tpch.customer",
    "key": {
        "dataFormat": "raw",
        "fields": [
            {
                "name": "kafka_key",
                "dataFormat": "LONG",
                "type": "BIGINT",
                "hidden": "false"
            }
        ]
    }
}

----------------------------------------

TITLE: Configuring Join Reordering Strategy in Presto SQL
DESCRIPTION: Sets the join reordering strategy session property in Presto. Valid values are 'AUTOMATIC' (default), 'ELIMINATE_CROSS_JOINS', or 'NONE'. This property determines how Presto optimizes the order of joins in a query.

LANGUAGE: sql
CODE:
SET SESSION join_reordering_strategy = 'AUTOMATIC';

----------------------------------------

TITLE: Configuring Driver Page Partitioning Buffer in Presto
DESCRIPTION: Configuration property to control the buffer size used for repartitioning pages during exchange operations in Presto.

LANGUAGE: properties
CODE:
driver.max-page-partitioning-buffer-size

----------------------------------------

TITLE: Documentation Warning Block in RST
DESCRIPTION: ReStructuredText warning block describing a startup failure bug when function namespace manager is enabled without Thrift configuration.

LANGUAGE: rst
CODE:
.. warning::
    There is a bug causing failure at startup if function namespace manager is enabled and Thrift is not configured (:pr:`15501`).

----------------------------------------

TITLE: Setting Coordinator Properties for Presto C++ Workers
DESCRIPTION: These configuration properties must be set for the Presto coordinator to enable the use of Presto C++ workers. They include enabling native execution, disabling hash generation optimization, setting the regex library to RE2J, and using alternative function signatures.

LANGUAGE: none
CODE:
native-execution-enabled=true
optimizer.optimize-hash-generation=false
regex-library=RE2J
use-alternative-function-signatures=true

----------------------------------------

TITLE: Defining Table of Contents for Presto Functions and Operators in reStructuredText
DESCRIPTION: This RST code defines a table of contents for Presto's functions and operators documentation. It uses the 'toctree' directive to create a hierarchical structure of documentation pages, with a maximum depth of 1.

LANGUAGE: rst
CODE:
.. toctree::
    :maxdepth: 1

    functions/logical
    functions/comparison
    functions/conditional
    functions/lambda
    functions/conversion
    functions/math
    functions/bitwise
    functions/decimal
    functions/string
    functions/regexp
    functions/binary
    functions/json
    functions/datetime
    functions/aggregate
    functions/noisy
    functions/window
    functions/array
    functions/map
    functions/url
    functions/ip
    functions/geospatial
    functions/hyperloglog
    functions/khyperloglog
    functions/qdigest
    functions/uuid
    functions/tdigest
    functions/color
    functions/session
    functions/teradata
    functions/internationalization
    functions/setdigest
    functions/sketch
    functions/pinot

----------------------------------------

TITLE: Using CHAR Literal with Escaped Single Quote in Presto SQL
DESCRIPTION: Example of using a CHAR literal with an escaped single quote in Presto SQL.

LANGUAGE: SQL
CODE:
SELECT CHAR 'All right, Mr. DeMille, I''m ready for my close-up.'

----------------------------------------

TITLE: Adding Table Comment Support in SQL CREATE TABLE Statements
DESCRIPTION: Introduces support for adding comments to tables when using CREATE TABLE and CREATE TABLE AS statements in SQL.

LANGUAGE: sql
CODE:
CREATE TABLE ... COMMENT 'table comment'

LANGUAGE: sql
CODE:
CREATE TABLE ... AS SELECT ... COMMENT 'table comment'

----------------------------------------

TITLE: Retrieving Stage Details in Presto API
DESCRIPTION: This endpoint retrieves detailed information about a stage in a Presto query. It uses the GET method and requires no parameters in the URL path.

LANGUAGE: REST
CODE:
GET /v1/stage

----------------------------------------

TITLE: Aggregating Hudi Table Data by Date in SQL
DESCRIPTION: SQL query example for a Hudi Copy On Write table. This query counts the number of records for each date in the table.

LANGUAGE: sql
CODE:
select dt, count(*) from stock_ticks_cow group by dt;

----------------------------------------

TITLE: Setting Presto CLI Session Properties
DESCRIPTION: Example showing how to set session properties using the Presto command-line interface with the --session flag.

LANGUAGE: none
CODE:
presto-cli --session color=red --session size=large

----------------------------------------

TITLE: Deleting a Stage in Presto API
DESCRIPTION: This endpoint deletes a specific stage in a Presto query. It uses the DELETE method and requires the stageId as a parameter in the URL path.

LANGUAGE: REST
CODE:
DELETE /v1/stage/{stageId}

----------------------------------------

TITLE: WITH Clause Usage in Presto SQL
DESCRIPTION: Shows how to use WITH clause for complex expressions and query reuse.

LANGUAGE: sql
CODE:
WITH a AS (
  SELECT substr(name, 1, 3) x
  FROM ...
)
SELECT *
FROM a
WHERE x = 'foo'

----------------------------------------

TITLE: Computing Theta Sketches in Presto
DESCRIPTION: Functions for creating and analyzing Theta sketches, which enable approximate distinct value counting and set operations. Includes functions for sketch creation, estimation, and detailed summary statistics.

LANGUAGE: sql
CODE:
sketch_theta(x) -> varbinary

LANGUAGE: sql
CODE:
sketch_theta_estimate(sketch) -> double

LANGUAGE: sql
CODE:
sketch_theta_summary(sketch) -> row(estimate double, theta double, upper_bound_std double, lower_bound_std double, retained_entries int)

----------------------------------------

TITLE: Using UNNEST Operation in Presto SQL
DESCRIPTION: Mentions the UNNEST operation in Presto SQL, which has been fixed to properly handle null collections.

LANGUAGE: SQL
CODE:
UNNEST

----------------------------------------

TITLE: Calculating Cardinality of KHyperLogLog Sketch in Presto SQL
DESCRIPTION: This function calculates the cardinality of the MinHash sketch, which represents x's cardinality in the KHyperLogLog structure.

LANGUAGE: SQL
CODE:
cardinality(khll) -> bigint

----------------------------------------

TITLE: Enabling Pinot Data Fetch Exception Retry in Presto
DESCRIPTION: Configures the Pinot connector to retry data fetch exceptions by setting the pinot.mark-data-fetch-exceptions-as-retriable property.

LANGUAGE: Properties
CODE:
pinot.mark-data-fetch-exceptions-as-retriable=true

----------------------------------------

TITLE: Checking Key Existence in Map in Presto SQL
DESCRIPTION: Shows how to check if a key exists in a map using the map_key_exists() function.

LANGUAGE: sql
CODE:
SELECT map_key_exists(MAP(ARRAY['x','y'], ARRAY[100,200]), 'x'); -- TRUE

----------------------------------------

TITLE: Retrieving Top N Values with Custom Comparator in Presto SQL
DESCRIPTION: Shows how to retrieve the top N values from a map using a custom comparator function with map_top_n_values().

LANGUAGE: sql
CODE:
SELECT map_top_n_values(map(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3]), 2, (x, y) -> IF(x < y, -1, IF(x = y, 0, 1))) --- [3, 2]

----------------------------------------

TITLE: String Concatenation in Presto SQL
DESCRIPTION: Demonstrates the ANSI SQL standard string concatenation operator.

LANGUAGE: sql
CODE:
SELECT a || b || c
FROM ...

----------------------------------------

TITLE: Running Presto CLI in Bash
DESCRIPTION: This command starts the Presto CLI, which will display a 'presto>' prompt for entering queries.

LANGUAGE: bash
CODE:
./presto

----------------------------------------

TITLE: String Concatenation in Presto SQL
DESCRIPTION: Shows how to use the standard ANSI SQL string concatenation operator in Presto.

LANGUAGE: SQL
CODE:
SELECT a || b || c
FROM ...

----------------------------------------

TITLE: Creating Schema 'sales' in 'hive' Catalog in Presto SQL
DESCRIPTION: Shows how to create a new schema named 'sales' in the 'hive' catalog using Presto SQL.

LANGUAGE: sql
CODE:
CREATE SCHEMA hive.sales

----------------------------------------

TITLE: Connecting to Presto Using JDBC URL
DESCRIPTION: Java code snippet demonstrating how to create a connection to Presto using a JDBC URL. The example connects to a Presto instance running on example.net:8080 with the Hive catalog and sales schema.

LANGUAGE: java
CODE:
String url = "jdbc:presto://example.net:8080/hive/sales";
Connection connection = DriverManager.getConnection(url, "test", null);

----------------------------------------

TITLE: Making Presto CLI executable in Bash
DESCRIPTION: Changes the file permissions to make the Presto CLI executable using the chmod command.

LANGUAGE: bash
CODE:
chmod +x presto

----------------------------------------

TITLE: Rolling Sum Example in Presto SQL
DESCRIPTION: Demonstrates how to calculate a rolling sum of order prices by day for each clerk using the sum() window function.

LANGUAGE: sql
CODE:
SELECT clerk, orderdate, orderkey, totalprice,
       sum(totalprice) OVER (PARTITION BY clerk
                             ORDER BY orderdate) AS rolling_sum
FROM orders
ORDER BY clerk, orderdate, orderkey

----------------------------------------

TITLE: Calculating Jaccard Similarity with MinHash in Presto SQL
DESCRIPTION: Demonstrates how to use MinHash to estimate the Jaccard similarity between two sets of data from different tables.

LANGUAGE: SQL
CODE:
WITH mh1 AS (SELECT minhash_agg(to_utf8(value)) AS minhash FROM table1), mh2 AS (SELECT minhash_agg(to_utf8(value)) AS minhash FROM table2), SELECT jaccard_index(mh1.minhash, mh2.minhash) AS similarity FROM mh1, mh2;

----------------------------------------

TITLE: Creating Empty Maps in Presto SQL
DESCRIPTION: Demonstrates how to create an empty map using the map() function.

LANGUAGE: sql
CODE:
SELECT map(); -- {}

----------------------------------------

TITLE: Using all_keys_match Function in Presto SQL
DESCRIPTION: Shows how to use the all_keys_match function to check if all keys in a map satisfy a given predicate.

LANGUAGE: sql
CODE:
SELECT all_keys_match(map(array['a', 'b', 'c'], array[1, 2, 3]), x -> length(x) = 1); -- true

----------------------------------------

TITLE: Private IP Address Detection in Presto SQL
DESCRIPTION: Determines if an IP address is private or reserved according to IANA specifications.

LANGUAGE: sql
CODE:
SELECT is_private_ip(IPADDRESS '10.0.0.1');
SELECT is_private_ip(IPADDRESS '157.240.200.99');

----------------------------------------

TITLE: Color Conversion and Interpolation in SQL (Presto)
DESCRIPTION: Functions for converting color strings to RGB values and interpolating colors based on numeric inputs.

LANGUAGE: sql
CODE:
color(string) -> color

LANGUAGE: sql
CODE:
color(x, low, high, low_color, high_color) -> color

LANGUAGE: sql
CODE:
color(x, low_color, high_color) -> color

----------------------------------------

TITLE: Defining AccumulatorState Interface for Presto Aggregation
DESCRIPTION: Example of an AccumulatorState interface used in the avg_double aggregation function. It defines getters and setters for the state object.

LANGUAGE: java
CODE:
public interface LongAndDoubleState
        extends AccumulatorState
{
    long getLong();

    void setLong(long value);

    double getDouble();

    void setDouble(double value);
}

----------------------------------------

TITLE: Implementing FinishDelete Method in ConnectorMetadata for Presto
DESCRIPTION: This method is called after all splits have been processed for a DELETE operation. It receives fragments from all splits and finalizes the operation, potentially committing the transaction.

LANGUAGE: java
CODE:
void finishDelete(
    ConnectorSession session,
    ConnectorTableHandle tableHandle,
    Collection<Slice> fragments)

----------------------------------------

TITLE: Configuring TPCH Connector Properties
DESCRIPTION: Basic configuration for the TPCH connector in Presto, specified in the catalog properties file.

LANGUAGE: properties
CODE:
connector.name=tpch

----------------------------------------

TITLE: Creating PostgreSQL Table from SELECT in Presto
DESCRIPTION: Shows how to create a new table in PostgreSQL based on the result of a SELECT query using CREATE TABLE AS SELECT in Presto.

LANGUAGE: sql
CODE:
CREATE TABLE postgresql.public.new_table AS SELECT * FROM postgresql.public.renamed_table;

----------------------------------------

TITLE: Creating PostgreSQL Table in Presto
DESCRIPTION: Demonstrates how to create a new table in PostgreSQL using the CREATE TABLE statement in Presto.

LANGUAGE: sql
CODE:
CREATE TABLE postgresql.public.test_integer ( id INTEGER );

----------------------------------------

TITLE: Querying PostgreSQL Schemas in Presto
DESCRIPTION: Shows how to list available PostgreSQL schemas using the SHOW SCHEMAS command in Presto.

LANGUAGE: sql
CODE:
SHOW SCHEMAS FROM postgresql;

----------------------------------------

TITLE: Creating New Schema
DESCRIPTION: SQL command to create a new schema in the Memory connector.

LANGUAGE: sql
CODE:
CREATE SCHEMA memory.default1;

----------------------------------------

TITLE: Configuring Local File Connector Properties in Presto
DESCRIPTION: Basic configuration for enabling the local file connector in Presto. This needs to be added to a properties file under the etc/catalog directory.

LANGUAGE: properties
CODE:
connector.name=localfile

----------------------------------------

TITLE: Configuring Kudu Connector Properties
DESCRIPTION: Basic configuration file for the Kudu connector including master addresses and schema emulation settings

LANGUAGE: none
CODE:
connector.name=kudu

## List of Kudu master addresses, at least one is needed (comma separated)
## Supported formats: example.com, example.com:7051, 192.0.2.1, 192.0.2.1:7051,
##                    [2001:db8::1], [2001:db8::1]:7051, 2001:db8::1
kudu.client.master-addresses=localhost

## Kudu does not support schemas, but the connector can emulate them optionally.
## By default, this feature is disabled, and all tables belong to the default schema.
## For more details see connector documentation.
#kudu.schema-emulation.enabled=false

----------------------------------------

TITLE: Basic Customer Topic Description
DESCRIPTION: Initial JSON configuration for mapping Kafka customer topic to Presto table

LANGUAGE: json
CODE:
{
    "tableName": "customer",
    "schemaName": "tpch",
    "topicName": "tpch.customer",
    "key": {
        "dataFormat": "raw",
        "fields": [
            {
                "name": "kafka_key",
                "dataFormat": "LONG",
                "type": "BIGINT",
                "hidden": "false"
            }
        ]
    }
}

----------------------------------------

TITLE: Querying Historical JMX Data
DESCRIPTION: SQL query example demonstrating how to retrieve historical JMX data with timestamps.

LANGUAGE: sql
CODE:
SELECT "timestamp", "uptime" FROM jmx.history."java.lang:type=runtime";

----------------------------------------

TITLE: Querying File Descriptors via JMX
DESCRIPTION: SQL query example demonstrating how to check open and maximum file descriptor counts for cluster nodes.

LANGUAGE: sql
CODE:
SELECT openfiledescriptorcount, maxfiledescriptorcount
FROM jmx.current."java.lang:type=operatingsystem";

----------------------------------------

TITLE: Installing Docker and Colima using Homebrew
DESCRIPTION: Command to install Docker and Colima tools using Homebrew. These are required for running Docker containers on Mac OS X.

LANGUAGE: bash
CODE:
brew install docker colima

----------------------------------------

TITLE: Installing Homebrew on Mac OS X
DESCRIPTION: Command to install the Homebrew package manager on Mac OS X. This is a prerequisite for installing Docker and Colima.

LANGUAGE: bash
CODE:
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

----------------------------------------

TITLE: Configuring Benchmark Suites in JSON
DESCRIPTION: This snippet demonstrates how to create a suite.json file to configure benchmark suites. It defines two suites: 'file_formats' and 'legacy_orc', specifying query patterns, schema patterns, and session properties.

LANGUAGE: json
CODE:
{
    "file_formats": {
        "query": ["single_.*", "tpch_.*"],
        "schema": [ "tpch_sf(?<scale>.*)_(?<format>.*)_(?<compression>.*?)" ],
        "session": {}
    },
    "legacy_orc": {
        "query": ["single_.*", "tpch_.*"],
        "schema": [ "tpch_sf(?<scale>.*)_(?<format>orc)_(?<compression>.*?)" ],
        "session": {
            "hive.optimized_reader_enabled": "false"
        }
    }
}

----------------------------------------

TITLE: Using regexp_split for String Splitting
DESCRIPTION: Splits a string using a regular expression pattern as delimiter and returns an array of substrings.

LANGUAGE: sql
CODE:
SELECT regexp_split('1a 2b 14m', '\s*[a-z]+\s*'); -- [1, 2, 14, ]

----------------------------------------

TITLE: Using regexp_like for Pattern Matching
DESCRIPTION: Tests if a string contains a substring matching the given regular expression pattern.

LANGUAGE: sql
CODE:
SELECT regexp_like('1a 2b 14m', '\d+b'); -- true

----------------------------------------

TITLE: Using regexp_extract_all with Group Parameter
DESCRIPTION: Extracts all occurrences of a specific capturing group from matches of a regular expression pattern in a string.

LANGUAGE: sql
CODE:
SELECT regexp_extract_all('1a 2b 14m', '(\d+)([a-z]+)', 2); -- ['a', 'b', 'm']

----------------------------------------

TITLE: Using JOIN with Date/Time Functions in Presto SQL
DESCRIPTION: This snippet demonstrates the use of JOIN in combination with date and time functions in Presto SQL queries. It includes examples of current_date, current_time, and extract functions.

LANGUAGE: sql
CODE:
SELECT * FROM table1
JOIN table2 ON table1.date = current_date
WHERE extract(hour from table2.timestamp) = 12;

----------------------------------------

TITLE: SQL Function References
DESCRIPTION: SQL function names and operators referenced in the changelog including min_by, max_by, array_join, and DISTINCT/LIMIT operations.

LANGUAGE: sql
CODE:
min_by
max_by
array_join
DISTINCT
LIMIT
FILTER
TRY
VALIDATE

----------------------------------------

TITLE: Demonstrating New Bitwise Aggregation Functions in Presto SQL
DESCRIPTION: Shows the usage of newly added bitwise_and_agg and bitwise_or_agg aggregation functions in Presto SQL. These functions perform bitwise AND and OR operations across a set of values.

LANGUAGE: sql
CODE:
SELECT bitwise_and_agg(column_name) FROM table_name;
SELECT bitwise_or_agg(column_name) FROM table_name;

----------------------------------------

TITLE: SQL IN Predicate Subquery Fix
DESCRIPTION: Reference to fix for uncorrelated subqueries used in IN predicates that previously failed during planning.

LANGUAGE: sql
CODE:
IN

----------------------------------------

TITLE: SQL Function Examples
DESCRIPTION: New SQL functions added in this release including array_union and reverse for array manipulation.

LANGUAGE: sql
CODE:
SELECT array_union(array1, array2);
SELECT reverse(array_column);

----------------------------------------

TITLE: Calling round() Function on tinyint in Presto SQL
DESCRIPTION: Example of using the round() function with tinyint arguments in Presto SQL. The ambiguity issue with this operation has been fixed in version 0.150.

LANGUAGE: sql
CODE:
round(tinyint_column)

----------------------------------------

TITLE: Using map_concat Function in Presto SQL
DESCRIPTION: The map_concat function is a new addition in Presto 0.130. It concatenates two or more maps into a single map.

LANGUAGE: sql
CODE:
SELECT map_concat(map1, map2, map3)

----------------------------------------

TITLE: Configuring Hive Security Settings in Presto
DESCRIPTION: Configuration options for enabling authorization checks in the Hive connector. The hive.security property can be set to 'none', 'read-only', or 'sql-standard' to control access levels.

LANGUAGE: properties
CODE:
hive.security=none|read-only|sql-standard

----------------------------------------

TITLE: Demonstrating Fixed row_number() Window Function in SQL
DESCRIPTION: This SQL snippet demonstrates the usage of the row_number() window function with partitioning and ordering, showcasing the fix for the result truncation bug when performing a partitioned top-N operation.

LANGUAGE: SQL
CODE:
SELECT * FROM (
    SELECT row_number() OVER (PARTITION BY orderstatus ORDER BY orderdate) AS rn,
        custkey, orderdate, orderstatus
    FROM orders
) WHERE rn <= 5;

----------------------------------------

TITLE: Configuration Property for Write Distribution
DESCRIPTION: Session and config properties to control data redistribution when writing tables.

LANGUAGE: plaintext
CODE:
redistribute_writes
redistribute-writes

----------------------------------------

TITLE: Configuring Cluster Memory Management
DESCRIPTION: Configuration properties for enabling cluster memory manager and setting memory limits for queries and worker nodes

LANGUAGE: properties
CODE:
experimental.cluster-memory-manager-enabled
query.max-memory
query.max-memory-per-node
resources.reserved-system-memory

----------------------------------------

TITLE: String Trimming Example
DESCRIPTION: Example showing right trim functionality with rtrim()

LANGUAGE: sql
CODE:
SELECT rtrim('test', 't'); -- tes
SELECT rtrim('test...', '.'); -- test

----------------------------------------

TITLE: Demonstrating RST Syntax for Release Notes
DESCRIPTION: This code snippet showcases the RST (reStructuredText) syntax used to format the release notes. It includes section headers, notes, and function references.

LANGUAGE: rst
CODE:
============
Release 0.98
============

Array, Map, and Row Types
-------------------------

The memory representation of these types is now ``VariableWidthBlockEncoding``
instead of ``JSON``.

.. note::
    This is a backwards incompatible change with the previous representation,
    so if you have written a connector or function, you will need to update
    your code before deploying this release.

Hive Changes
------------

* Fix handling of ORC files with corrupt checkpoints.

SPI Changes
-----------

* Rename ``Index`` to ``ConnectorIndex``.

.. note::
    This is a backwards incompatible change, so if you have written a connector
    that uses ``Index``, you will need to update your code before deploying this release.

General Changes
---------------

* Fix bug in ``UNNEST`` when output is unreferenced or partially referenced.
* Make :func:`!max` and :func:`!min` functions work on all orderable types.
* Optimize memory allocation in :func:`!max_by` and other places that ``Block`` is used.

----------------------------------------

TITLE: Configuring Interrupt Timeout for Runaway Splits in Presto
DESCRIPTION: Sets the timeout for interrupting runaway splits that are blocked in known situations. This configuration property allows users to control how long Presto waits before interrupting such splits.

LANGUAGE: properties
CODE:
task.interrupt-runaway-splits-timeout = 600s

----------------------------------------

TITLE: Configuring Task Parallelism in Presto
DESCRIPTION: Configuration parameters and session properties for controlling parallel execution of joins, hash builds, and aggregations.

LANGUAGE: properties
CODE:
task.default-concurrency=<value>
task_default_concurrency=<value>
task_join_concurrency=<value>
task_hash_build_concurrency=<value>
task_aggregation_concurrency=<value>

----------------------------------------

TITLE: Merging T-Digests
DESCRIPTION: Merges multiple T-digest structures into a single T-digest, preserving precision.

LANGUAGE: sql
CODE:
merge(tdigest<double>) -> tdigest<double>

----------------------------------------

TITLE: Casting HyperLogLog Types in Presto
DESCRIPTION: Example showing how to cast a HyperLogLog type to P4HyperLogLog type.

LANGUAGE: sql
CODE:
cast(hll AS P4HyperLogLog)

----------------------------------------

TITLE: Validation Plan Example
DESCRIPTION: Example showing validation output for a GROUP BY query.

LANGUAGE: sql
CODE:
presto:tiny> EXPLAIN (TYPE VALIDATE) SELECT regionkey, count(*) FROM nation GROUP BY 1;

----------------------------------------

TITLE: Single Column VALUES Example in Presto SQL
DESCRIPTION: Creates a simple table with one column containing three rows of numeric values.

LANGUAGE: sql
CODE:
VALUES 1, 2, 3

----------------------------------------

TITLE: Querying Available Functions in Presto SQL
DESCRIPTION: Shows the syntax for listing all available functions in Presto queries. The command supports optional LIKE pattern matching with an escape character for filtering function names.

LANGUAGE: sql
CODE:
SHOW FUNCTIONS [ LIKE pattern [ ESCAPE 'escape_character' ] ]

----------------------------------------

TITLE: Granting Multiple Roles with Admin Option in Presto SQL
DESCRIPTION: Shows how to grant multiple roles ('bar' and 'foo') to both a user ('baz') and a role ('qux') with admin option using the GRANT ROLES command in Presto.

LANGUAGE: sql
CODE:
GRANT bar, foo TO USER baz, ROLE qux WITH ADMIN OPTION;

----------------------------------------

TITLE: Demonstrating URL Syntax for Extraction Functions in Presto
DESCRIPTION: Illustrates the supported URL syntax for extraction functions in Presto. The syntax includes optional protocol, host, port, path, query, and fragment components.

LANGUAGE: text
CODE:
[protocol:][//host[:port]][path][?query][#fragment]

----------------------------------------

TITLE: Checking All Keys Match Predicate in Presto SQL
DESCRIPTION: Uses the all_keys_match function to check if all keys in a map satisfy a given predicate.

LANGUAGE: sql
CODE:
SELECT all_keys_match(map(array['a', 'b', 'c'], array[1, 2, 3]), x -> length(x) = 1); -- true

----------------------------------------

TITLE: DROP FUNCTION Syntax - Presto SQL
DESCRIPTION: The basic syntax pattern for dropping functions in Presto SQL. Supports optional TEMPORARY keyword, IF EXISTS clause, and parameter type specifications.

LANGUAGE: sql
CODE:
DROP [TEMPORARY] FUNCTION [ IF EXISTS ] qualified_function_name [ ( parameter_type[, ...] ) ]

----------------------------------------

TITLE: Querying NULL Values in Presto SQL
DESCRIPTION: A bug fix has been implemented to correct an issue where querying for NULL values incorrectly returned 0 rows instead of the expected result.

LANGUAGE: sql
CODE:
SELECT NULL

----------------------------------------

TITLE: Configuring HTTPS and Password Authentication in Presto
DESCRIPTION: These properties need to be added to the coordinator's config.properties file to enable HTTPS support and password authentication.

LANGUAGE: properties
CODE:
http-server.authentication.type=PASSWORD

http-server.https.enabled=true
http-server.https.port=8443

http-server.https.keystore.path=/etc/presto_keystore.jks
http-server.https.keystore.key=keystore_password

----------------------------------------

TITLE: Retrieving Task Information in JSON (Presto)
DESCRIPTION: Example JSON response from the GET /v1/task endpoint, showing task details including ID, state, output buffers, and statistics. This response is truncated for brevity but would be much larger for a busy Presto server.

LANGUAGE: json
CODE:
[ {
  "taskId" : "20131222_183944_00011_dk5x2.1.0",
  "version" : 9223372036854775807,
  "state" : "CANCELED",
  "self" : "unknown",
  "lastHeartbeat" : "2013-12-22T13:54:46.566-05:00",
  "outputBuffers" : {
    "state" : "FINISHED",
    "masterSequenceId" : 0,
    "pagesAdded" : 0,
    "buffers" : [ ]
  },
  "noMoreSplits" : [ ],
  "stats" : {
    "createTime" : "2013-12-22T13:54:46.566-05:00",
    "elapsedTime" : "0.00ns",
    "queuedTime" : "92.00us",
    "totalDrivers" : 0,
    "queuedDrivers" : 0,
    "runningDrivers" : 0,
    "completedDrivers" : 0,
    "memoryReservation" : "0B",
    "totalScheduledTime" : "0.00ns",
    "totalCpuTime" : "0.00ns",
    "totalBlockedTime" : "0.00ns",
    "rawInputDataSize" : "0B",
    "rawInputPositions" : 0,
    "processedInputDataSize" : "0B",
    "processedInputPositions" : 0,
    "outputDataSize" : "0B",
    "outputPositions" : 0,
    "pipelines" : [ ]
  },
  "failures" : [ ],
  "outputs" : { }
}]

----------------------------------------

TITLE: Creating Table with Column Aliases
DESCRIPTION: Creates a new table named orders_column_aliased with specified column names order_date and total_price, populated with data from the orders table.

LANGUAGE: sql
CODE:
CREATE TABLE orders_column_aliased (order_date, total_price)
AS
SELECT orderdate, totalprice
FROM orders

----------------------------------------

TITLE: Configuring Presto Web Connector URL for Tableau
DESCRIPTION: The URL format for connecting Tableau to a Presto coordinator. Replace example.net:8080 with your Presto coordinator's hostname and port (default port is 8080).

LANGUAGE: none
CODE:
http://example.net:8080/tableau/presto-connector.html

----------------------------------------

TITLE: View Renaming with IF EXISTS in Presto SQL
DESCRIPTION: Example showing view renaming with the IF EXISTS clause to handle cases where the view might not exist.

LANGUAGE: sql
CODE:
ALTER VIEW IF EXISTS users RENAME TO people;

----------------------------------------

TITLE: Creating Kerberos Principals and Keytab for Presto Coordinator
DESCRIPTION: This snippet demonstrates the kadmin commands to create Kerberos principals for the Presto coordinator and generate the corresponding keytab file.

LANGUAGE: none
CODE:
kadmin
> addprinc -randkey presto@EXAMPLE.COM
> addprinc -randkey presto/presto-coordinator.example.com@EXAMPLE.COM
> ktadd -k /etc/presto/presto.keytab presto@EXAMPLE.COM
> ktadd -k /etc/presto/presto.keytab presto/presto-coordinator.example.com@EXAMPLE.COM

----------------------------------------

TITLE: Querying with IS NULL Predicate on Bucketed Columns in SQL
DESCRIPTION: There is a bug in this release that causes incorrect results when using the IS NULL predicate on bucketed columns in SQL queries.

LANGUAGE: SQL
CODE:
SELECT * FROM table WHERE bucketed_column IS NULL;

----------------------------------------

TITLE: Calculating Value at Quantile
DESCRIPTION: Returns approximate percentile values from a T-digest for a given quantile between 0 and 1.

LANGUAGE: sql
CODE:
value_at_quantile(tdigest<double>, quantile) -> double

----------------------------------------

TITLE: Defining Security Documentation Structure using Sphinx toctree in reStructuredText
DESCRIPTION: This snippet uses Sphinx's toctree directive to create a structured table of contents for Presto's security documentation. It specifies a maximum depth of 1 and lists various security-related topics as separate files.

LANGUAGE: restructuredtext
CODE:
.. toctree::
    :maxdepth: 1

    security/server
    security/cli
    security/ldap
    security/password-file
    security/tls
    security/built-in-system-access-control
    security/internal-communication
    security/authorization

----------------------------------------

TITLE: Querying Schema Properties in Presto SQL
DESCRIPTION: This query retrieves all available schema properties from the system.metadata.schema_properties table.

LANGUAGE: sql
CODE:
SELECT * FROM system.metadata.schema_properties

----------------------------------------

TITLE: Configuring Maven Dependencies for Presto Plugin
DESCRIPTION: Maven dependency configuration for a Presto plugin project, showing how to include the Presto SPI with provided scope since it's available at runtime.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>com.facebook.presto</groupId>
    <artifactId>presto-spi</artifactId>
    <scope>provided</scope>
</dependency>

----------------------------------------

TITLE: Ranking Orders by Price for Each Clerk in Presto SQL
DESCRIPTION: Illustrates the use of the rank() window function to rank orders for each clerk based on the total price in descending order.

LANGUAGE: SQL
CODE:
SELECT orderkey, clerk, totalprice,
       rank() OVER (PARTITION BY clerk
                    ORDER BY totalprice DESC) AS rnk
FROM orders
ORDER BY clerk, rnk

----------------------------------------

TITLE: Reservoir Sampling Example
DESCRIPTION: SQL query showing how to use reservoir sampling to maintain a fixed-size random sample

LANGUAGE: sql
CODE:
WITH result as (
    SELECT
        reservoir_sample(NULL, 0, col, 5) as reservoir
    FROM (
        VALUES
        1, 2, 3, 4, 5, 6, 7, 8, 9, 0
    ) as t(col)
)
SELECT 
    reservoir.processed_count, reservoir.sample
FROM result;

----------------------------------------

TITLE: Creating Empty Table with Existing Schema
DESCRIPTION: Creates a new empty table empty_nation with the same schema as the nation table but without copying any data.

LANGUAGE: sql
CODE:
CREATE TABLE empty_nation AS
SELECT *
FROM nation
WITH NO DATA

----------------------------------------

TITLE: SQL GROUP BY and DISTINCT Operations
DESCRIPTION: Fix for query planning with GROUP BY and DISTINCT operations on UNNEST output columns

LANGUAGE: sql
CODE:
GROUP BY, DISTINCT

----------------------------------------

TITLE: Maven Dependency Configuration for Presto JDBC
DESCRIPTION: Maven dependency configuration to include the Presto JDBC driver in a Java project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>com.facebook.presto</groupId>
    <artifactId>presto-jdbc</artifactId>
    <version>\ |version|\ </version>
</dependency>

----------------------------------------

TITLE: Configuring HTTP and HTTPS Settings for Presto
DESCRIPTION: Basic configuration for disabling HTTP and enabling HTTPS endpoints in Presto's config.properties file.

LANGUAGE: none
CODE:
http-server.http.enabled=false

----------------------------------------

TITLE: Configuration Properties for CTE Materialization
DESCRIPTION: List of configuration properties and session settings that control CTE materialization behavior in Presto, including materialization strategy, replication threshold, storage format, and compression settings.

LANGUAGE: properties
CODE:
cte-materialization-strategy=NONE\nType: string\nAllowed values: ALL, NONE, HEURISTIC, HEURISTIC_COMPLEX_QUERIES_ONLY\nDefault value: NONE\n\ncte-heuristic-replication-threshold\nType: integer\nMinimum value: 0\nDefault value: 4\n\nquery.cte-partitioning-provider-catalog\nType: string\nDefault value: system\n\ncte-filter-and-projection-pushdown-enabled\nType: boolean\nDefault value: true\n\nhive.cte-virtual-bucket-count\nType: integer\nDefault value: 128\n\nhive.temporary-table-storage-format\nType: string\nAllowed values: PAGEFILE, ORC, DWRF, ALPHA, PARQUET, AVRO, RCBINARY, RCTEXT, SEQUENCEFILE, JSON, TEXTFILE, CSV\nDefault value: ORC\n\nhive.temporary-table-compression-codec\nType: string\nAllowed values: SNAPPY, NONE, GZIP, LZ4, ZSTD\nDefault value: SNAPPY\n\nhive.bucket-function-type-for-cte-materialization\nType: string\nAllowed values: HIVE_COMPATIBLE, PRESTO_NATIVE\nDefault value: PRESTO_NATIVE\n\nquery.max-written-intermediate-bytes\nType: DataSize\nDefault value: 2TB\n\nenhanced-cte-scheduling-enabled\nType: boolean\nDefault value: true

----------------------------------------

TITLE: Using regexp_replace with Replacement Pattern
DESCRIPTION: Replaces patterns using capture group references in the replacement string.

LANGUAGE: sql
CODE:
SELECT regexp_replace('1a 2b 14m', '(\d+)([ab]) ', '3c$2 '); -- '3ca 3cb 14m'

----------------------------------------

TITLE: Configuring Kerberos Authentication for Presto Router
DESCRIPTION: Additional configuration options for enabling Kerberos authentication in Presto Router, including principal and service name settings.

LANGUAGE: none
CODE:
query-tracker.http-client.authentication.enabled=true
query-tracker.http-client.authentication.krb5.name-type=USER_NAME
query-tracker.http-client.authentication.krb5.principal=presto@REMOTE.BIZ
query-tracker.http-client.authentication.krb5.remote-service-name=HTTP/PRESTO@REMOTE.BIZ
query-tracker.http-client.authentication.krb5.service-principal-pattern=PATTERN

----------------------------------------

TITLE: Analyzing a Table in Presto SQL
DESCRIPTION: Demonstrates how to analyze a table named 'web' to collect table and column statistics.

LANGUAGE: sql
CODE:
ANALYZE web;

----------------------------------------

TITLE: Using SHOW FUNCTION LIKE in Presto 0.237
DESCRIPTION: This snippet shows how to use the new SHOW FUNCTION LIKE syntax to list functions whose names match a specified pattern in Presto 0.237.

LANGUAGE: SQL
CODE:
SHOW FUNCTION LIKE 'array_%';

----------------------------------------

TITLE: SQL Function Syntax Examples
DESCRIPTION: New function signatures and syntax changes introduced in Presto 0.199, including HMAC functions, array sorting, and spatial functions.

LANGUAGE: sql
CODE:
hmac_md5()
hmac_sha1()
hmac_sha256()
hmac_sha512()
array_sort(array, (x, y) -> boolean)
line_locate_point()
round(x, d) -- where d is now INTEGER
truncate(x, d) -- where d is now INTEGER

----------------------------------------

TITLE: Specifying VARCHAR Data Type in Black Hole Connector
DESCRIPTION: Shows the syntax for specifying a VARCHAR data type with length in the Black Hole connector. This feature has been added in release 0.146.

LANGUAGE: sql
CODE:
varchar(n)

----------------------------------------

TITLE: Configuration Property Reference - Presto 0.214
DESCRIPTION: New and modified configuration properties introduced in Presto 0.214, including optimizer settings, security configurations, and Hive connector properties.

LANGUAGE: properties
CODE:
query-manager.required-workers
query-manager.required-workers-max-wait
security.refresh-period
optimizer.optimize-top-n-row-number
hive.s3.upload-acl-type

----------------------------------------

TITLE: Referencing MongoDB Connector Documentation in Presto
DESCRIPTION: Shows how to reference the MongoDB connector documentation in Presto's documentation system. This new connector has been added in release 0.146.

LANGUAGE: rst
CODE:
:doc:`/connector/mongodb`

----------------------------------------

TITLE: Basic Aggregation Query Example in Presto SQL
DESCRIPTION: Demonstrates a simple GROUP BY aggregation query that shows how data is processed in Presto's classic mode.

LANGUAGE: sql
CODE:
SELECT custkey, SUM(totalprice)
FROM orders
GROUP BY custkey

----------------------------------------

TITLE: Creating Connector Instance using Guice for Example HTTP Connector in Java
DESCRIPTION: This snippet demonstrates how the connector factory creates a connector instance using Guice for dependency injection. It sets up the required modules and configuration properties.

LANGUAGE: java
CODE:
// A plugin is not required to use Guice; it is just very convenient
Bootstrap app = new Bootstrap(
        new JsonModule(),
        new ExampleModule(catalogName));

Injector injector = app
        .doNotInitializeLogging()
        .setRequiredConfigurationProperties(requiredConfig)
        .initialize();

return injector.getInstance(ExampleConnector.class);

----------------------------------------

TITLE: SQL Commands for Database-Based Resource Group Manager Configuration
DESCRIPTION: This SQL snippet demonstrates how to configure a database-based resource group manager in PrestoDB. It includes commands to create and populate the necessary tables for resource groups and selectors.

LANGUAGE: sql
CODE:
-- global properties
INSERT INTO resource_groups_global_properties (name, value) VALUES ('cpu_quota_period', '1h');

-- Every row in resource_groups table indicates a resource group.
-- The enviroment name is 'test_environment', make sure it matches `node.environment` in your cluster.
-- The parent-child relationship is indicated by the ID in 'parent' column.

-- create a root group 'global' with NULL parent
INSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_policy, jmx_export, environment) VALUES ('global', '80%', 100, 1000, 'weighted', true, 'test_environment');

-- get ID of 'global' group
SELECT resource_group_id FROM resource_groups WHERE name = 'global';  -- 1
-- create two new groups with 'global' as parent
INSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_weight, environment, parent) VALUES ('data_definition', '10%', 5, 100, 1, 'test_environment', 1);
INSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_weight, environment, parent) VALUES ('adhoc', '10%', 50, 1, 10, 'test_environment', 1);

-- get ID of 'adhoc' group
SELECT resource_group_id FROM resource_groups WHERE name = 'adhoc';   -- 3
-- create 'other' group with 'adhoc' as parent
INSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_weight, scheduling_policy, environment, parent) VALUES ('other', '10%', 2, 1, 10, 'weighted_fair', 'test_environment', 3);

-- get ID of 'other' group
SELECT resource_group_id FROM resource_groups WHERE name = 'other';  -- 4
-- create '${USER}' group with 'other' as parent.
INSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, environment, parent) VALUES ('${USER}', '10%', 1, 100, 'test_environment', 4);

-- create 'bi-${toolname}' group with 'adhoc' as parent
INSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_weight, scheduling_policy, environment, parent) VALUES ('bi-${toolname}', '10%', 10, 100, 10, 'weighted_fair', 'test_environment', 3);

-- create 'pipeline' group with 'global' as parent
INSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_weight, jmx_export, environment, parent) VALUES ('pipeline', '80%', 45, 100, 1, true, 'test_environment', 1);

-- get ID of 'pipeline' group
SELECT resource_group_id FROM resource_groups WHERE name = 'pipeline'; -- 7
-- create 'pipeline_${USER}' group with 'pipeline' as parent
INSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued,  environment, parent) VALUES ('pipeline_${USER}', '50%', 5, 100, 'test_environment', 7);

-- create a root group 'admin' with NULL parent
INSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_policy, environment, jmx_export) VALUES ('admin', '100%', 50, 100, 'query_priority', 'test_environment', true);


-- Selectors

-- use ID of 'admin' resource group for selector
INSERT INTO selectors (resource_group_id, user_regex, priority) VALUES ((SELECT resource_group_id FROM resource_groups WHERE name = 'admin'), 'bob', 6);

-- use ID of 'global.data_definition' resource group for selector
INSERT INTO selectors (resource_group_id, source_regex, query_type, priority) VALUES ((SELECT resource_group_id FROM resource_groups WHERE name = 'data_definition'), '.*pipeline.*', 'DATA_DEFINITION', 4);

-- use ID of 'global.pipeline.pipeline_${USER}' resource group for selector
INSERT INTO selectors (resource_group_id, source_regex, priority) VALUES ((SELECT resource_group_id FROM resource_groups WHERE name = 'pipeline_${USER}'), '.*pipeline.*', 3);

-- get ID of 'global.adhoc.other.${USER}' resource group for by disambiguating group name using parent ID
SELECT A.resource_group_id self_id, B.resource_group_id parent_id, concat(B.name, '.', A.name) name_with_parent
FROM resource_groups A JOIN resource_groups B ON A.parent = B.resource_group_id
WHERE A.name = '${USER}' AND B.name = 'other';
-- |       5 |         4 | other.${USER}    |
INSERT INTO selectors (resource_group_id, priority) VALUES (5, 1);

----------------------------------------

TITLE: UUID Type Example
DESCRIPTION: Example of UUID type declaration following RFC 4122 format

LANGUAGE: sql
CODE:
UUID '12151fd2-7586-11e9-8f9e-2a86e4085a59'

----------------------------------------

TITLE: Using xxhash64 Function in SQL Queries
DESCRIPTION: The xxhash64 function is introduced in this release. It's important to note that in the next release, this function will return a varbinary instead of a bigint.

LANGUAGE: SQL
CODE:
SELECT xxhash64(column_name) FROM table_name;

----------------------------------------

TITLE: Configuring Benchmark Suites in JSON
DESCRIPTION: This snippet demonstrates how to create a suite.json file to configure benchmark suites. It defines two suites: 'file_formats' and 'legacy_orc', specifying query patterns, schema patterns, and session properties.

LANGUAGE: json
CODE:
{
    "file_formats": {
        "query": ["single_.*", "tpch_.*"],
        "schema": [ "tpch_sf(?<scale>.*)_(?<format>.*)_(?<compression>.*?)" ],
        "session": {}
    },
    "legacy_orc": {
        "query": ["single_.*", "tpch_.*"],
        "schema": [ "tpch_sf(?<scale>.*)_(?<format>orc)_(?<compression>.*?)" ],
        "session": {
            "hive.optimized_reader_enabled": "false"
        }
    }
}

----------------------------------------

TITLE: SQL COMMIT Usage Examples
DESCRIPTION: Demonstrates practical examples of using the COMMIT command, showing both the simple form and with the optional WORK keyword.

LANGUAGE: sql
CODE:
COMMIT;
COMMIT WORK;

----------------------------------------

TITLE: Creating a Schema with IF NOT EXISTS in Presto SQL
DESCRIPTION: This example demonstrates the use of the IF NOT EXISTS clause when creating a schema named 'traffic'.

LANGUAGE: sql
CODE:
CREATE SCHEMA IF NOT EXISTS traffic

----------------------------------------

TITLE: Dropping Function with IF EXISTS Clause
DESCRIPTION: Example showing how to safely drop a function using the IF EXISTS clause to prevent errors if the function doesn't exist.

LANGUAGE: sql
CODE:
DROP FUNCTION IF EXISTS example.default.tan(double)

----------------------------------------

TITLE: Example Queries Benefiting from Metadata-Only Optimization in Presto
DESCRIPTION: Demonstrates various SQL queries that can benefit from the metadata-only query optimization when enabled. These queries typically involve operations like MIN, MAX, DISTINCT, and COUNT DISTINCT on partition keys.

LANGUAGE: SQL
CODE:
SELECT min(key), max(key) FROM t;

SELECT DISTINCT key FROM t;

SELECT count(DISTINCT key) FROM t;

SELECT count(DISTINCT key + 5) FROM t;

SELECT count(DISTINCT key) FROM (SELECT key FROM t ORDER BY 1 LIMIT 10);

SELECT key1, count(DISTINCT key2) FROM t GROUP BY 1;

----------------------------------------

TITLE: Configuring Task Info Update Refresh in Presto SQL
DESCRIPTION: This configuration property enables long polling for task information updates, improving coordinator CPU utilization. It sets the maximum wait time for task info updates.

LANGUAGE: sql
CODE:
experimental.task.info-update-refresh-max-wait

----------------------------------------

TITLE: Configuring Accumulo Connector
DESCRIPTION: Example configuration file for the Accumulo connector in Presto.

LANGUAGE: properties
CODE:
connector.name=accumulo
accumulo.instance=xxx
accumulo.zookeepers=xxx
accumulo.username=username
accumulo.password=password

----------------------------------------

TITLE: Configuring Key-Based Sampling in Presto
DESCRIPTION: This snippet explains how to enable and configure key-based sampling for tables at query time in Presto. It includes session properties for enabling the feature and overriding default settings.

LANGUAGE: rst
CODE:
``key_based_sampling_enabled=true``. Additionally, default sampling rate and sampling function name can be overridden by sessions properties ``key_based_sampling_percentage`` and ``key_based_sampling_function`` respectively.

----------------------------------------

TITLE: Creating MySQL Table from Existing Table in Presto
DESCRIPTION: SQL statement to create a new MySQL table by copying data from an existing table using Presto.

LANGUAGE: sql
CODE:
CREATE TABLE mysql.web.page_views_new AS SELECT * FROM mysql.web.page_views;

----------------------------------------

TITLE: MongoDB Read Preference Configuration Example
DESCRIPTION: Example of configuring MongoDB read preference tags using key-value pairs separated by colons and ampersands.

LANGUAGE: properties
CODE:
mongodb.read-preference-tags=dc:east,use:reporting&use:reporting

----------------------------------------

TITLE: Presto JDBC Connection URL Formats
DESCRIPTION: Supported URL formats for connecting to Presto via JDBC.

LANGUAGE: none
CODE:
jdbc:presto://host:port
jdbc:presto://host:port/catalog
jdbc:presto://host:port/catalog/schema

----------------------------------------

TITLE: Creating Set Digest from Bigint Array in Presto SQL
DESCRIPTION: Uses the make_set_digest function to create a set digest from a bigint array.

LANGUAGE: SQL
CODE:
SELECT make_set_digest(value)
FROM (VALUES 1, 2, 3) T(value);

----------------------------------------

TITLE: Introducing ntile Function in SQL
DESCRIPTION: Adds the ntile function to Presto SQL for ranking rows into a specified number of buckets.

LANGUAGE: SQL
CODE:
SELECT ntile(4) OVER (ORDER BY column) FROM table

----------------------------------------

TITLE: Querying System Node Information in Presto
DESCRIPTION: Example of querying the runtime.nodes table to get information about cluster nodes.

LANGUAGE: sql
CODE:
SELECT * FROM system.runtime.nodes;

----------------------------------------

TITLE: New Presto Scalar Function
DESCRIPTION: Addition of json_size() scalar function for determining the size of JSON structures.

LANGUAGE: sql
CODE:
json_size()

----------------------------------------

TITLE: SQL Function Updates and Changes
DESCRIPTION: New SQL functions and syntax features added in Presto 0.147, including INTERSECT support, column aliases in WITH clause, and new functions like sequence, sign, and flatten.

LANGUAGE: sql
CODE:
SHOW CREATE VIEW
SHOW CREATE TABLE
SHOW CATALOGS LIKE '...'
SHOW SCHEMAS LIKE '...'
INTERSECT
sequence()
sign()
flatten()

----------------------------------------

TITLE: Enabling New Optimization for Redundant Distinct Removal in SQL
DESCRIPTION: A new optimization that removes redundant distinct operations if the output is already distinct after a group by operation. This feature is controlled by the session property 'remove_redundant_distinct_aggregation' which is set to false by default.

LANGUAGE: SQL
CODE:
SET SESSION remove_redundant_distinct_aggregation = true;

----------------------------------------

TITLE: CREATE FUNCTION Syntax in Presto
DESCRIPTION: Complete syntax definition for creating functions in Presto, showing all possible clauses and options.

LANGUAGE: sql
CODE:
CREATE [ OR REPLACE ] [TEMPORARY] FUNCTION
qualified_function_name (
  parameter_name parameter_type
  [, ...]
)
RETURNS return_type
[ COMMENT function_description ]
[ LANGUAGE [ SQL | identifier] ]
[ DETERMINISTIC | NOT DETERMINISTIC ]
[ RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT ]
[ RETURN expression | EXTERNAL [ NAME identifier ] ]

----------------------------------------

TITLE: Configuring Session Properties in Presto
DESCRIPTION: Configuration properties and session settings introduced in version 0.238, including bucket function type for exchange materialization and query memory limits.

LANGUAGE: properties
CODE:
bucket_function_type_for_exchange=PRESTO_NATIVE
hive.bucket-function-type-for-exchange=PRESTO_NATIVE
query_max_broadcast_memory=<value>
pinot.mark-data-fetch-exceptions-as-retriable=<value>

----------------------------------------

TITLE: Configuring MySQL JDBC Driver with UTC Timezone
DESCRIPTION: Example of a connection URL that configures the JDBC driver to interpret time values based on UTC as a timezone on the server. This serves as a workaround for a known issue.

LANGUAGE: text
CODE:
connection-url=jdbc:mysql://example.net:3306?serverTimezone=UTC

----------------------------------------

TITLE: Hive Procedure Definition
DESCRIPTION: System procedure for creating empty partitions in Hive connector

LANGUAGE: SQL
CODE:
system.create_empty_partition()

----------------------------------------

TITLE: Displaying SQL Syntax for SHOW ROLES Command in Presto
DESCRIPTION: This code block shows the syntax for the SHOW ROLES command in Presto SQL. It includes optional parameters for showing current roles and specifying a catalog.

LANGUAGE: sql
CODE:
SHOW [CURRENT] ROLES [ FROM catalog ]

----------------------------------------

TITLE: SQL Cast Example
DESCRIPTION: Example demonstrating the corrected behavior of casting from DOUBLE to DECIMAL in SQL standard conformance.

LANGUAGE: sql
CODE:
cast (double '100000000000000000000000000000000' as decimal(38))

----------------------------------------

TITLE: Implementing Password Validation in Java for Presto
DESCRIPTION: This Java method implements password validation using PBKDF2WithHmacSHA256 with a fallback to PBKDF2WithHmacSHA1. It's designed to maintain compatibility with legacy systems while encouraging the use of more secure modern cryptographic standards.

LANGUAGE: java
CODE:
/**
 * @Deprecated using PBKDF2WithHmacSHA1 is deprecated and clients should switch to PBKDF2WithHmacSHA256
 */
public static boolean doesPBKDF2PasswordMatch(String inputPassword, String hashedPassword)
{
    PBKDF2Password password = PBKDF2Password.fromString(hashedPassword);

    // Validate using PBKDF2WithHmacSHA256
    if (validatePBKDF2Password(inputPassword, password, "PBKDF2WithHmacSHA256")) {
        return true;
    }

    // Fallback to PBKDF2WithHmacSHA1
    LOG.warn("Using deprecated PBKDF2WithHmacSHA1 for password validation.");
    return validatePBKDF2Password(inputPassword, password, "PBKDF2WithHmacSHA1");
}

----------------------------------------

TITLE: Using New Array and Map Functions in SQL
DESCRIPTION: Several new functions have been added for array and map manipulation, including array_sort_desc, map_remove_null_values, map_top_n_keys, map_top_n_values, map_top_n, remove_nulls, array_min_by, and array_max_by.

LANGUAGE: SQL
CODE:
SELECT array_sort_desc(ARRAY[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]);
SELECT map_remove_null_values(MAP(ARRAY['a', 'b', 'c'], ARRAY[1, NULL, 3]));
SELECT map_top_n_keys(MAP(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3]), 2);
SELECT map_top_n_values(MAP(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3]), 2);
SELECT map_top_n(MAP(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3]), 2);
SELECT remove_nulls(ARRAY[1, NULL, 3, NULL, 5]);
SELECT array_min_by(ARRAY['a', 'bb', 'ccc'], x -> length(x));
SELECT array_max_by(ARRAY['a', 'bb', 'ccc'], x -> length(x));

----------------------------------------

TITLE: Configuring Presto Properties Changes
DESCRIPTION: Configuration property changes in Presto 0.149, including the merger of columnar processing properties and renaming of query age parameter.

LANGUAGE: properties
CODE:
query.max-age -> query.min-expire-age
optimizer.columnar-processing -> optimizer.processing-optimization
optimizer.columnar-processing-dictionary -> optimizer.processing-optimization
processing_optimization=disabled|columnar|columnar_dictionary
hive.dfs.ipc-ping-interval
hive.dfs-timeout=60

----------------------------------------

TITLE: Casting from JSON in Presto
DESCRIPTION: Examples of casting JSON to various SQL types including primitives, arrays, maps and row types

LANGUAGE: sql
CODE:
SELECT CAST(JSON 'null' AS VARCHAR); -- NULL
SELECT CAST(JSON '1' AS INTEGER); -- 1
SELECT CAST(JSON '9223372036854775807' AS BIGINT); -- 9223372036854775807
SELECT CAST(JSON '"abc"' AS VARCHAR); -- abc
SELECT CAST(JSON 'true' AS BOOLEAN); -- true
SELECT CAST(JSON '1.234' AS DOUBLE); -- 1.234
SELECT CAST(JSON '[1,23,456]' AS ARRAY(INTEGER)); -- [1, 23, 456]
SELECT CAST(JSON '[1,null,456]' AS ARRAY(INTEGER)); -- [1, NULL, 456]
SELECT CAST(JSON '[[1,23],[456]]' AS ARRAY(ARRAY(INTEGER))); -- [[1, 23], [456]]
SELECT CAST(JSON '{"k1":1,"k2":23,"k3":456}' AS MAP(VARCHAR, INTEGER)); -- {k1=1, k2=23, k3=456}
SELECT CAST(JSON '{"v1":123,"v2":"abc","v3":true}' AS ROW(v1 BIGINT, v2 VARCHAR, v3 BOOLEAN)); -- {v1=123, v2=abc, v3=true}

----------------------------------------

TITLE: Setting File-Based Resource Group Manager
DESCRIPTION: Configuration for enabling file-based resource group management in PrestoDB.

LANGUAGE: text
CODE:
resource-groups.configuration-manager=file

----------------------------------------

TITLE: Creating a Partitioned Hive Table in Presto SQL
DESCRIPTION: This SQL statement demonstrates how to create a partitioned table in Hive using Presto. It defines a table structure with columns and specifies partition columns using the 'WITH' clause.

LANGUAGE: SQL
CODE:
CREATE TABLE orders (
   order_date VARCHAR,
   order_region VARCHAR,
   order_id BIGINT,
   order_info VARCHAR
) WITH (partitioned_by = ARRAY['order_date', 'order_region'])

----------------------------------------

TITLE: Spilling Configuration
DESCRIPTION: Properties for configuring memory spilling behavior to disk when memory limits are reached.

LANGUAGE: properties
CODE:
experimental.spill-enabled=false
experimental.spiller-spill-path=
experimental.spiller-max-used-space-threshold=0.9

----------------------------------------

TITLE: Using Reservoir Sample Aggregation Function in Presto SQL
DESCRIPTION: Adds 'reservoir_sample' aggregation function which is useful for generating fixed-size samples.

LANGUAGE: SQL
CODE:
SELECT reservoir_sample(column_name, sample_size) FROM table_name;

----------------------------------------

TITLE: Replacing VARCHAR to JSON Cast in SQL
DESCRIPTION: Shows how to replace the deprecated cast from VARCHAR to JSON using the new JSON_PARSE function.

LANGUAGE: SQL
CODE:
JSON_PARSE(x)

----------------------------------------

TITLE: Retrieving Node Information in Presto
DESCRIPTION: This endpoint returns a list of nodes known to a Presto Server. It provides detailed information about each node, including recent activity statistics, age, and URI. The response includes decaying counters for recent requests, failures, and successes.

LANGUAGE: http
CODE:
GET /v1/node

HTTP/1.1 200 OK
Vary: Accept
Content-Type: text/javascript

[
   {
      "uri":"http://10.209.57.156:8080",
      "recentRequests":25.181940555111073,
      "recentFailures":0.0,
      "recentSuccesses":25.195472984170983,
      "lastRequestTime":"2013-12-22T13:32:44.673-05:00",
      "lastResponseTime":"2013-12-22T13:32:44.677-05:00",
      "age":"14155.28ms",
      "recentFailureRatio":0.0,
      "recentFailuresByType":{}
   }
]

----------------------------------------

TITLE: Defining Presto Documentation Structure with reStructuredText
DESCRIPTION: This snippet uses reStructuredText to define the table of contents for Presto documentation. It includes various sections such as overview, installation, clients, and features. The toctree directive is set to a maximum depth of 2.

LANGUAGE: reStructuredText
CODE:
.. toctree::
    :maxdepth: 2

    overview
    installation
    clients
    security
    admin
    cache
    optimizer
    connector
    plugin
    functions
    language
    sql
    migration
    rest
    ecosystem
    router
    develop
    presto-cpp
    release

----------------------------------------

TITLE: Defining Presto Router Rules and Groups
DESCRIPTION: Example router configuration file (etc/router-config.json) specifying Presto cluster groups, selectors, scheduler type, and predictor URI for the Presto Router.

LANGUAGE: none
CODE:
{
  "groups": [
    {
      "name": "all",
      "members": ["http://127.0.0.1:61381", "http://127.0.0.1:61382"],
      "weights": [1, 5]
    }
  ],
  "selectors": [
    {
      "targetGroup": "all"
    }
  ],
  "scheduler": "RANDOM_CHOICE",
  "predictor": "http://127.0.0.1:8000/v1"
}

----------------------------------------

TITLE: Using Searched CASE Expression in Presto SQL
DESCRIPTION: Illustrates the searched form of CASE expression in Presto SQL. It evaluates multiple conditions and returns the result corresponding to the first true condition.

LANGUAGE: sql
CODE:
SELECT a, b,
       CASE
           WHEN a = 1 THEN 'aaa'
           WHEN b = 2 THEN 'bbb'
           ELSE 'ccc'
       END

----------------------------------------

TITLE: Configuring Legacy JOIN USING Behavior in Presto
DESCRIPTION: Sets the configuration option to restore the old behavior of JOIN ... USING to non-standard SQL semantics.

LANGUAGE: properties
CODE:
deprecated.legacy-join-using=true

----------------------------------------

TITLE: Configuring Task Killer in Presto SQL
DESCRIPTION: Adds a task killer feature triggered when a worker is running out of memory. It provides two strategies: full garbage collection and frequent full garbage collection.

LANGUAGE: SQL
CODE:
SET SESSION task_killer_strategy = 'full_gc';

----------------------------------------

TITLE: Using concat() Function with Array Type in SQL
DESCRIPTION: This snippet demonstrates the usage of the concat() function with array types in SQL queries. However, it's noted that this operation may cause queries to fail in this release, with a fix available in the subsequent release 0.133.

LANGUAGE: sql
CODE:
concat(array_column)

----------------------------------------

TITLE: Using to_utf8 Function in Presto SQL
DESCRIPTION: The to_utf8 function is introduced alongside from_utf8 for UTF-8 encoding operations. It can be used to convert string data to UTF-8 format.

LANGUAGE: SQL
CODE:
SELECT to_utf8(column_name) FROM table_name;

----------------------------------------

TITLE: Configuring Eager Compaction in Presto
DESCRIPTION: Enables eager compaction of join memory to reduce GC spikes. This configuration can improve reliability at the cost of additional CPU usage.

LANGUAGE: properties
CODE:
pages-index.eager-compaction-enabled=true

----------------------------------------

TITLE: Querying Bing Tile Coordinates in SQL
DESCRIPTION: References the bing_tile_coordinates() function, which is used for working with Bing map tiles in SQL queries.

LANGUAGE: SQL
CODE:
bing_tile_coordinates()

----------------------------------------

TITLE: Revoking Role from User in Presto SQL
DESCRIPTION: An example of revoking the role 'bar' from the user 'foo' using the REVOKE ROLES command in Presto SQL.

LANGUAGE: sql
CODE:
REVOKE bar FROM USER foo;

----------------------------------------

TITLE: Creating Tangent Function Example
DESCRIPTION: Example of creating a permanent tangent function in the example.default schema that calculates tan(x) using sin(x)/cos(x).

LANGUAGE: sql
CODE:
CREATE FUNCTION example.default.tan(x double)
RETURNS double
DETERMINISTIC
RETURNS NULL ON NULL INPUT
RETURN sin(x) / cos(x)

----------------------------------------

TITLE: Querying Hudi Table with Symbol Grouping in SQL
DESCRIPTION: SQL query example for a Hudi Copy On Write table named 'stock_ticks_cow'. This query selects the symbol and maximum timestamp, grouping by symbol and filtering for 'GOOG'.

LANGUAGE: sql
CODE:
USE hudi.default;
select symbol, max(ts) from stock_ticks_cow group by symbol HAVING symbol = 'GOOG';

----------------------------------------

TITLE: Estimating Distinct Values with HyperLogLog in Presto SQL
DESCRIPTION: Demonstrates the use of the approx_distinct function to estimate the number of distinct entries in a column using HyperLogLog algorithm.

LANGUAGE: SQL
CODE:
SELECT approx_distinct(column_name) FROM table_name;

----------------------------------------

TITLE: Replacing USE CATALOG and USE SCHEMA in Presto SQL
DESCRIPTION: The USE CATALOG and USE SCHEMA commands have been deprecated and replaced with a new SQL command. Users should refer to the documentation for the new USE command for updated syntax.

LANGUAGE: sql
CODE:
USE CATALOG

LANGUAGE: sql
CODE:
USE SCHEMA

----------------------------------------

TITLE: Adding trimmed_mean Function for TDigest Type in Presto
DESCRIPTION: Introduces the trimmed_mean function for use with the TDigest type in Presto. This function likely provides a way to calculate a trimmed mean using TDigest data structures.

LANGUAGE: sql
CODE:
trimmed_mean

----------------------------------------

TITLE: Configuring Cassandra Connector Properties
DESCRIPTION: Basic configuration file setup for connecting Presto to Cassandra nodes

LANGUAGE: none
CODE:
connector.name=cassandra
cassandra.contact-points=host1,host2

----------------------------------------

TITLE: View Renaming Syntax in Presto SQL
DESCRIPTION: Basic syntax for renaming a view in Presto SQL. The command allows for an optional IF EXISTS clause to prevent errors if the view doesn't exist.

LANGUAGE: sql
CODE:
ALTER VIEW [IF EXISTS] old_view_name RENAME TO new_view_name;

----------------------------------------

TITLE: Configuring Elasticsearch Authentication in Presto
DESCRIPTION: Support for Elasticsearch user and password authentication has been added. This allows secure connections to Elasticsearch clusters that require authentication.

LANGUAGE: Properties
CODE:
connector.name=elasticsearch
elasticsearch.host=localhost
elasticsearch.port=9200
elasticsearch.default-schema-name=default
elasticsearch.username=user
elasticsearch.password=password

----------------------------------------

TITLE: Configuring Elasticsearch Properties
DESCRIPTION: Basic configuration properties for connecting Presto to Elasticsearch

LANGUAGE: properties
CODE:
connector.name=elasticsearch
elasticsearch.host=localhost
elasticsearch.port=9200
elasticsearch.default-schema-name=default

----------------------------------------

TITLE: Example: Showing CREATE Function for array_sum with BIGINT Array
DESCRIPTION: Demonstrates how to show the SQL statement that creates the array_sum function for BIGINT arrays. It displays the full function definition including its return type, comment, and implementation.

LANGUAGE: SQL
CODE:
SHOW CREATE FUNCTION example.default.array_sum(ARRAY<BIGINT>)

----------------------------------------

TITLE: Calculating Quantile for a Value in Quantile Digest in Presto SQL
DESCRIPTION: This function returns the approximate quantile (between 0 and 1) for a given value in a quantile digest. It returns null if the digest is empty or the input value is outside the digest's range.

LANGUAGE: sql
CODE:
quantile_at_value(qdigest(T), T) -> quantile

----------------------------------------

TITLE: JSON Utility Functions in Presto
DESCRIPTION: Examples of various JSON utility functions for checking types, array operations, and value extraction

LANGUAGE: sql
CODE:
SELECT is_json_scalar('1'); -- true
SELECT is_json_scalar('[1, 2, 3]'); -- false
SELECT json_array_contains('[1, 2, 3]', 2);
SELECT json_array_get('["a", [3, 9], "c"]', 0); -- JSON 'a'
SELECT json_array_length('[1, 2, 3]');
SELECT json_extract(json, '$.store.book');
SELECT json_format(JSON '[1, 2, 3]'); -- '[1,2,3]'
SELECT json_parse('[1, 2, 3]'); -- JSON '[1,2,3]'
SELECT json_size('{"x": {"a": 1, "b": 2}}', '$.x'); -- 2

----------------------------------------

TITLE: Formatting Timestamp to String in SQL
DESCRIPTION: Converts a timestamp to a string using a specified format. The format string should use Teradata-compatible specifiers.

LANGUAGE: SQL
CODE:
to_char(timestamp, format) -> varchar

----------------------------------------

TITLE: Creating Set Digest from Varchar Array in Presto SQL
DESCRIPTION: Shows how to create a set digest from a varchar array using the make_set_digest function.

LANGUAGE: SQL
CODE:
SELECT make_set_digest(value)
FROM (VALUES 'Presto', 'SQL', 'on', 'everything') T(value);

----------------------------------------

TITLE: JDBC Connection with Properties
DESCRIPTION: Examples of establishing JDBC connections using both Properties object and URL parameters.

LANGUAGE: java
CODE:
// properties
String url = "jdbc:presto://example.net:8080/hive/sales";
Properties properties = new Properties();
properties.setProperty("user", "test");
properties.setProperty("password", "secret");
properties.setProperty("SSL", "true");
Connection connection = DriverManager.getConnection(url, properties);

// URL parameters
String url = "jdbc:presto://example.net:8443/hive/sales?user=test&password=secret&SSL=true";
Connection connection = DriverManager.getConnection(url);

----------------------------------------

TITLE: Tweets Topic JSON Definition
DESCRIPTION: JSON configuration for mapping Twitter feed data from Kafka to Presto table structure with timestamp formatting.

LANGUAGE: json
CODE:
{
    "tableName": "tweets",
    "topicName": "twitter_feed",
    "dataFormat": "json",
    "key": {
        "dataFormat": "raw",
        "fields": [
            {
                "name": "kafka_key",
                "dataFormat": "LONG",
                "type": "BIGINT",
                "hidden": "false"
            }
        ]
    },
    "message": {
        "dataFormat":"json",
        "fields": [
            {
                "name": "text",
                "mapping": "text",
                "type": "VARCHAR"
            }
        ]
    }
}

----------------------------------------

TITLE: Creating Kerberos Principals and Keytab Using Kadmin
DESCRIPTION: Commands to create Kerberos principals for Presto and generate the required keytab file using kadmin tool.

LANGUAGE: shell
CODE:
kadmin
> addprinc -randkey presto@EXAMPLE.COM
> addprinc -randkey presto/presto-coordinator.example.com@EXAMPLE.COM
> ktadd -k /etc/presto/presto.keytab presto@EXAMPLE.COM
> ktadd -k /etc/presto/presto.keytab presto/presto-coordinator.example.com@EXAMPLE.COM

----------------------------------------

TITLE: Retrieving Top N Keys with Custom Comparator in Presto SQL
DESCRIPTION: Shows how to retrieve the top N keys from a map using a custom comparator function with map_top_n_keys().

LANGUAGE: sql
CODE:
SELECT map_top_n_keys(map(ARRAY['a', 'b', 'c'], ARRAY[3, 2, 1]), 2, (x, y) -> IF(x < y, -1, IF(x = y, 0, 1))) --- ['c', 'b']

----------------------------------------

TITLE: Installing Homebrew on MacOS
DESCRIPTION: Command to install the Homebrew package manager on MacOS systems

LANGUAGE: bash
CODE:
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

----------------------------------------

TITLE: Binary Arithmetic Operations with Decimals
DESCRIPTION: Rules for precision and scale calculation in binary arithmetic operations between decimal types. Shows formulas for addition, subtraction, multiplication, division, and modulo operations.

LANGUAGE: sql
CODE:
x + y    -- precision: min(38, 1 + min(xs, ys) + min(xp - xs, yp - ys))
          -- scale: max(xs, ys)

x - y    -- precision: min(38, 1 + min(xs, ys) + min(xp - xs, yp - ys))
          -- scale: max(xs, ys)

x * y    -- precision: min(38, xp + yp)
          -- scale: xs + ys

x / y    -- precision: min(38, xp + ys + max(0, ys-xs))
          -- scale: max(xs, ys)

x % y    -- precision: min(xp - xs, yp - ys) + max(xs, bs)
          -- scale: max(xs, ys)

----------------------------------------

TITLE: Detecting Myanmar Font Encoding in Presto
DESCRIPTION: Function that analyzes Myanmar text and determines whether it uses Zawgyi font encoding or Unicode. Returns 'zawgyi' for Zawgyi-encoded text and 'unicode' otherwise.

LANGUAGE: sql
CODE:
myanmar_font_encoding(text) -> varchar

----------------------------------------

TITLE: Using WITH ORDINALITY in UNNEST Function in Presto SQL
DESCRIPTION: Adds support for the WITH ORDINALITY clause to the UNNEST function, allowing users to generate a sequence number alongside the unnested elements.

LANGUAGE: SQL
CODE:
UNNEST(...) WITH ORDINALITY

----------------------------------------

TITLE: Truncating MySQL Table in Presto
DESCRIPTION: SQL command to delete all data from a MySQL table without dropping the table using Presto.

LANGUAGE: sql
CODE:
TRUNCATE TABLE mysql.web.page_views;

----------------------------------------

TITLE: Configuring RCFile Writer in Hive Connector for Presto
DESCRIPTION: This snippet shows configuration options for the optimized RCFile writer in the Hive connector. It enables or disables the writer and controls validation of written files.

LANGUAGE: Properties
CODE:
hive.rcfile-optimized-writer.enabled=true
hive.rcfile.writer.validate=false

----------------------------------------

TITLE: Starting ZooKeeper and Kafka Server
DESCRIPTION: Commands to start ZooKeeper and Kafka server services on ports 2181 and 9092 respectively.

LANGUAGE: none
CODE:
$ bin/zookeeper-server-start.sh config/zookeeper.properties

LANGUAGE: none
CODE:
$ bin/kafka-server-start.sh config/server.properties

----------------------------------------

TITLE: Enabling Shadow Writes for CREATE TABLE AS SELECT in Presto
DESCRIPTION: Shows how to enable the shadow-writes feature for CREATE TABLE AS SELECT queries, which writes to a temporary table instead of the originally specified table.

LANGUAGE: sql
CODE:
SET SESSION shadow-writes.enabled = true;

----------------------------------------

TITLE: Demonstrating NULL handling in OR operations in Presto SQL
DESCRIPTION: These SQL queries illustrate how the OR operator handles NULL values in Presto. The results show that OR with two NULL values is NULL, OR with NULL and false is NULL, and OR with NULL and true is true.

LANGUAGE: sql
CODE:
SELECT CAST(null AS boolean) OR CAST(null AS boolean); -- null

SELECT CAST(null AS boolean) OR false; -- null

SELECT CAST(null AS boolean) OR true; -- true

----------------------------------------

TITLE: Converting Pinot Binary Decimal to Double in SQL
DESCRIPTION: Function that converts a Pinot binary decimal to a double value using specified radix and scale parameters. The function includes an option to return zero for null inputs based on a boolean flag.

LANGUAGE: sql
CODE:
pinot_binary_decimal_to_double(binary, bigIntegerRadix, scale, returnZeroOnNull) -> double

----------------------------------------

TITLE: SQL Cast Row Type Example
DESCRIPTION: Example of casting a row with timestamp to a row type containing spaces in field type definition, which was previously failing but is now fixed in this release.

LANGUAGE: sql
CODE:
cast(row(timestamp '2018-06-01') AS row(timestamp with time zone))

----------------------------------------

TITLE: Configuring Kafka Connector in Presto
DESCRIPTION: Basic configuration properties for setting up the Kafka connector in Presto. This includes specifying the connector name, table names, and Kafka node addresses.

LANGUAGE: properties
CODE:
connector.name=kafka
kafka.table-names=table1,table2
kafka.nodes=host1:port,host2:port

----------------------------------------

TITLE: Querying Prometheus Metrics with Time Window in Presto SQL
DESCRIPTION: This SQL query demonstrates how to fetch data from the Prometheus 'up' metric table in Presto, limiting the results to the last 10 seconds using a WHERE clause on the timestamp column.

LANGUAGE: sql
CODE:
SELECT * FROM prometheus.default.up WHERE timestamp > (NOW() - INTERVAL '10' second);

----------------------------------------

TITLE: Using New Hive Connector Procedure in SQL
DESCRIPTION: Shows how to use the newly added system procedure for creating empty partitions in the Hive connector.

LANGUAGE: SQL
CODE:
CALL system.create_empty_partition()

----------------------------------------

TITLE: SQL EXCEPT Clause Query Example
DESCRIPTION: Example of nested EXCEPT clause queries that were affected by a correctness fix. Previously evaluated incorrectly, now returns correct results.

LANGUAGE: sql
CODE:
a EXCEPT (b EXCEPT c)

----------------------------------------

TITLE: Defining Table of Contents for SQL Language Documentation in reStructuredText
DESCRIPTION: This snippet defines a table of contents for SQL language documentation using reStructuredText syntax. It specifies a maximum depth of 1 and includes links to sections on language types and reserved keywords.

LANGUAGE: reStructuredText
CODE:
.. toctree::
    :maxdepth: 1

    language/types
    language/reserved

----------------------------------------

TITLE: DELETE All Rows
DESCRIPTION: Demonstrates how to delete all rows from a table by omitting the WHERE clause.

LANGUAGE: sql
CODE:
DELETE FROM orders;

----------------------------------------

TITLE: SQL Map Concat Function Reference
DESCRIPTION: Performance improvement for map concatenation operation when one argument is empty

LANGUAGE: sql
CODE:
map_concat()

----------------------------------------

TITLE: EXPLAIN ANALYZE VERBOSE Example in Presto SQL
DESCRIPTION: Shows the use of the VERBOSE option with EXPLAIN ANALYZE, which provides additional information such as window function details.

LANGUAGE: sql
CODE:
EXPLAIN ANALYZE VERBOSE SELECT count(clerk) OVER() FROM orders WHERE orderdate > date '1995-01-01';

----------------------------------------

TITLE: Configuring Memory Connector Properties
DESCRIPTION: Configuration file setup for the Memory connector specifying the connector name and maximum data per node.

LANGUAGE: none
CODE:
connector.name=memory
memory.max-data-per-node=128MB

----------------------------------------

TITLE: Creating Maps from Arrays in Presto SQL
DESCRIPTION: Shows how to create a map using two arrays for keys and values.

LANGUAGE: sql
CODE:
SELECT map(ARRAY[1,3], ARRAY[2,4]); -- {1 -> 2, 3 -> 4}

----------------------------------------

TITLE: Creating Table Using LIKE Clause in Presto
DESCRIPTION: Example demonstrating how to create a new table by copying columns from an existing table using the LIKE clause, with additional columns.

LANGUAGE: sql
CODE:
CREATE TABLE bigger_orders (
  another_orderkey bigint,
  LIKE orders,
  another_orderdate date
)

----------------------------------------

TITLE: Preparing and Describing a CREATE TABLE Query in Presto SQL
DESCRIPTION: Demonstrates preparing a CREATE TABLE AS SELECT query and using DESCRIBE OUTPUT to view its output. This example shows how DESCRIBE OUTPUT works with data modification statements.

LANGUAGE: sql
CODE:
PREPARE my_create FROM
CREATE TABLE foo AS SELECT * FROM nation

LANGUAGE: sql
CODE:
DESCRIBE OUTPUT my_create;

LANGUAGE: none
CODE:
 Column Name | Catalog | Schema | Table |  Type  | Type Size | Aliased
-------------+---------+--------+-------+--------+-----------+---------
 rows        |         |        |       | bigint |         8 | false
(1 row)

----------------------------------------

TITLE: Configuring RST Table of Contents for Presto Functions
DESCRIPTION: ReStructuredText directive that creates a table of contents listing all function categories in Presto's documentation. Sets maximum depth to 1 level and includes links to individual function category pages.

LANGUAGE: rst
CODE:
.. toctree::
    :maxdepth: 1

    functions/logical
    functions/comparison
    functions/conditional
    functions/lambda
    functions/conversion
    functions/math
    functions/bitwise
    functions/decimal
    functions/string
    functions/regexp
    functions/binary
    functions/json
    functions/datetime
    functions/aggregate
    functions/noisy
    functions/window
    functions/array
    functions/map
    functions/url
    functions/ip
    functions/geospatial
    functions/hyperloglog
    functions/khyperloglog
    functions/qdigest
    functions/uuid
    functions/tdigest
    functions/color
    functions/session
    functions/teradata
    functions/internationalization
    functions/setdigest
    functions/sketch
    functions/pinot

----------------------------------------

TITLE: Fixing FILTER Behavior for count() Function in SQL
DESCRIPTION: Addresses an issue where the FILTER clause was not being applied correctly when used with the count() function and a constant argument.

LANGUAGE: sql
CODE:
count(constant) FILTER (WHERE condition)

----------------------------------------

TITLE: Using Cross Join Inside IN Query in Presto SQL
DESCRIPTION: This snippet relates to a fix for a NoSuchElementException that occurred when using a cross join inside an IN query. The fix improves query stability and correctness.

LANGUAGE: sql
CODE:
... IN (SELECT ... FROM ... CROSS JOIN ...)

----------------------------------------

TITLE: Setting Default View Security Mode
DESCRIPTION: Shows how to set the default security mode for view creation to INVOKER.

LANGUAGE: sql
CODE:
SET SESSION default_view_security_mode='INVOKER'

----------------------------------------

TITLE: NULL Handling with BETWEEN
DESCRIPTION: Examples showing how NULL values are handled in BETWEEN operations, including string comparisons.

LANGUAGE: sql
CODE:
SELECT NULL BETWEEN 2 AND 4;
SELECT 2 BETWEEN NULL AND 6;
SELECT 'Paul' BETWEEN 'John' AND 'Ringo';

----------------------------------------

TITLE: Array Subscript Access in Presto SQL
DESCRIPTION: Demonstrates how to access array elements using dynamic indexing in Presto, which supports full expressions unlike Hive's constant-only indexing.

LANGUAGE: sql
CODE:
SELECT my_array[CARDINALITY(my_array)] as last_element
FROM ...

----------------------------------------

TITLE: Configuring Google Sheets Connector Properties
DESCRIPTION: Basic configuration properties for mounting the Google Sheets connector as a catalog in Presto. Requires specifying the connector name, credentials path, and metadata sheet ID.

LANGUAGE: text
CODE:
connector.name=gsheets
credentials-path=/path/to/google-sheets-credentials.json
metadata-sheet-id=exampleId

----------------------------------------

TITLE: Basic DELETE Syntax in Presto SQL
DESCRIPTION: Shows the fundamental syntax pattern for DELETE operations in Presto. Allows for optional WHERE clause to specify deletion conditions.

LANGUAGE: sql
CODE:
DELETE FROM table_name [ WHERE condition ]

----------------------------------------

TITLE: SQL Show Columns Modification
DESCRIPTION: Modification to SHOW COLUMNS command removing nullability and partition key flags from output.

LANGUAGE: sql
CODE:
SHOW COLUMNS

----------------------------------------

TITLE: HDFS Path Configuration
DESCRIPTION: Configuration to specify HDFS config files for advanced setups like federated HDFS or NameNode HA

LANGUAGE: none
CODE:
hive.config.resources=/etc/hadoop/conf/core-site.xml,/etc/hadoop/conf/hdfs-site.xml

----------------------------------------

TITLE: Executing DESCRIBE OUTPUT Command in Presto
DESCRIPTION: The DESCRIBE OUTPUT command lists the output columns of a prepared statement, including column details such as name, catalog, schema, table, type, type size, and aliasing.

LANGUAGE: none
CODE:
DESCRIBE OUTPUT statement_name

----------------------------------------

TITLE: Basic DESCRIBE INPUT Syntax
DESCRIPTION: Shows the basic syntax for the DESCRIBE INPUT command.

LANGUAGE: none
CODE:
DESCRIBE INPUT statement_name

----------------------------------------

TITLE: SQL CREATE TABLE Enhancement
DESCRIPTION: Added support for IF NOT EXISTS clause in CREATE TABLE AS queries.

LANGUAGE: sql
CODE:
CREATE TABLE AS

----------------------------------------

TITLE: SQL Function Examples
DESCRIPTION: New SQL functions added for Teradata compatibility and timestamp handling

LANGUAGE: sql
CODE:
normalize()
from_iso8601_timestamp()
from_iso8601_date()
to_iso8601()
position()
index()
char2hexint()
to_char()
to_date()
to_timestamp()

----------------------------------------

TITLE: Filtering Hudi Table by Symbol
DESCRIPTION: SQL query example showing how to filter records from a Hudi table based on symbol value.

LANGUAGE: sql
CODE:
select dt, symbol from stock_ticks_cow where symbol = 'GOOG';

LANGUAGE: text
CODE:
    dt      | symbol |\n------------+--------+\n 2018-08-31 |  GOOG  |\n(1 rows)

----------------------------------------

TITLE: Showing Tables in Lark Schema
DESCRIPTION: SQL command to display all available tables (sheets) in the Lark spreadsheet schema.

LANGUAGE: sql
CODE:
SHOW TABLES FROM my_ss

----------------------------------------

TITLE: Using JSON Data Type in Presto
DESCRIPTION: Mentions the JSON data type in Presto, which has been updated to be comparable in this release.

LANGUAGE: SQL
CODE:
JSON

----------------------------------------

TITLE: Executing EXPLAIN ANALYZE in Presto SQL
DESCRIPTION: The EXPLAIN ANALYZE command is now supported in Presto SQL. It provides detailed information about query execution plans and actual runtime statistics.

LANGUAGE: SQL
CODE:
EXPLAIN ANALYZE

----------------------------------------

TITLE: Defining Installation Documentation Structure in RST
DESCRIPTION: reStructuredText toctree directive that defines the structure and hierarchy of installation documentation pages with a maximum depth of 1 level.

LANGUAGE: rst
CODE:
.. toctree::
    :maxdepth: 1

    installation/deployment
    installation/cli
    installation/jdbc
    installation/benchmark-driver
    installation/tableau
    installation/spark
    installation/deploy-docker
    installation/deploy-brew
    installation/deploy-helm

----------------------------------------

TITLE: Configuring Black Hole Connector Properties
DESCRIPTION: Configuration file setup for the Black Hole connector in Presto.

LANGUAGE: properties
CODE:
connector.name=blackhole

----------------------------------------

TITLE: Creating External Hive Table in Presto SQL
DESCRIPTION: Shows how to create an external Hive table in Presto using the new external_location table property. This allows specifying an external location for the table data.

LANGUAGE: sql
CODE:
CREATE TABLE external_table (column_name data_type)
WITH (external_location = 's3://bucket/path/to/data');

----------------------------------------

TITLE: CREATE ROLE Syntax Definition
DESCRIPTION: The basic syntax structure for creating roles in Presto, including the optional WITH ADMIN clause that specifies role administrators.

LANGUAGE: sql
CODE:
CREATE ROLE role_name
[ WITH ADMIN ( user | USER user | ROLE role | CURRENT_USER | CURRENT_ROLE ) ]

----------------------------------------

TITLE: Executing Presto CLI with Additional Kerberos Debugging
DESCRIPTION: Bash script for invoking the Presto CLI JAR directly using java, enabling additional Kerberos debugging information. This method is used when more detailed Kerberos debugging output is required.

LANGUAGE: bash
CODE:
#!/bin/bash

java \
  -Dsun.security.krb5.debug=true \
  -jar presto-cli-*-executable.jar \
  --server https://presto-coordinator.example.com:7778 \
  --krb5-config-path /etc/krb5.conf \
  --krb5-principal someuser@EXAMPLE.COM \
  --krb5-keytab-path /home/someuser/someuser.keytab \
  --krb5-remote-service-name presto \
  --keystore-path /tmp/presto.jks \
  --keystore-password password \
  --catalog <catalog> \
  --schema <schema>

----------------------------------------

TITLE: Example of PBKDF2 Password Format in Presto
DESCRIPTION: This snippet shows the format of a PBKDF2 hashed password in the password file. It includes the iteration count, hex-encoded salt, and hash, all separated by colons.

LANGUAGE: none
CODE:
test:1000:5b4240333032306164:f38d165fce8ce42f59d366139ef5d9e1ca1247f0e06e503ee1a611dd9ec40876bb5edb8409f5abe5504aab6628e70cfb3d3a18e99d70357d295002c3d0a308a0

----------------------------------------

TITLE: Binary Concatenation Operator
DESCRIPTION: The concatenation operator || combines two binary values into a single binary value.

LANGUAGE: sql
CODE:
||

----------------------------------------

TITLE: Querying Row Count from TPCH Table
DESCRIPTION: Example SQL query to count rows in the customer table from the sf1 schema.

LANGUAGE: sql
CODE:
SELECT COUNT(*) FROM tpch.sf1.customer;

----------------------------------------

TITLE: Configuring Schema Ownership Rules in Presto's File-Based Access Control
DESCRIPTION: This JSON code demonstrates how to set up schema ownership rules in Presto's file-based access control, defining which users have ownership permissions for different schemas.

LANGUAGE: json
CODE:
{
  "catalogs": [
    {
      "allow": true
    }
  ],
  "schemas": [
    {
      "user": "admin",
      "schema": ".*",
      "owner": true
    },
    {
      "user": "guest",
      "owner": false
    },
    {
      "schema": "default",
      "owner": true
    }
  ]
}

----------------------------------------

TITLE: Renaming Columns in Presto SQL
DESCRIPTION: Shows how to rename columns using ALTER TABLE in Presto, including conditional renaming with IF EXISTS clause.

LANGUAGE: sql
CODE:
ALTER TABLE users RENAME COLUMN id TO user_id;

LANGUAGE: sql
CODE:
ALTER TABLE IF EXISTS users RENAME column IF EXISTS id to user_id;

----------------------------------------

TITLE: Creating Multimaps from Entries in Presto SQL
DESCRIPTION: Shows how to create a multimap (map with multiple values per key) from an array of entries.

LANGUAGE: sql
CODE:
SELECT multimap_from_entries(ARRAY[(1, 'x'), (2, 'y'), (1, 'z')]); -- {1 -> ['x', 'z'], 2 -> ['y']}

----------------------------------------

TITLE: EXPLAIN ANALYZE VERBOSE Example with Window Function in Presto SQL
DESCRIPTION: Shows the additional output when using the VERBOSE option with EXPLAIN ANALYZE, specifically for a query involving a window function.

LANGUAGE: sql
CODE:
EXPLAIN ANALYZE VERBOSE SELECT count(clerk) OVER() FROM orders WHERE orderdate > date '1995-01-01';

                                              Query Plan
    -----------------------------------------------------------------------------------------------
      ...
             - Window[] => [clerk:varchar(15), count:bigint]
                     Cost: {rows: ?, bytes: ?}
                     CPU fraction: 75.93%, Output: 8130 rows (230.24kB)
                     Input avg.: 8130.00 lines, Input std.dev.: 0.00%
                     Active Drivers: [ 1 / 1 ]
                     Index size: std.dev.: 0.00 bytes , 0.00 rows
                     Index count per driver: std.dev.: 0.00
                     Rows per driver: std.dev.: 0.00
                     Size of partition: std.dev.: 0.00
                     count := count("clerk")
     ...

----------------------------------------

TITLE: Configuring Experimental On-Disk Merge Sort in Presto
DESCRIPTION: Enable experimental on-disk merge sort for aggregations in Presto using the configuration flag. This feature can potentially improve performance for large aggregation operations.

LANGUAGE: properties
CODE:
experimental.spill-enabled=true

----------------------------------------

TITLE: Creating Verifier Query Table in MySQL
DESCRIPTION: SQL schema for creating the verifier_queries table that stores queries to be validated, including control and test query configurations.

LANGUAGE: sql
CODE:
CREATE TABLE verifier_queries (
    id int(11) unsigned NOT NULL PRIMARY KEY AUTO_INCREMENT,
    suite varchar(256) NOT NULL,
    name varchar(256) DEFAULT NULL,
    control_catalog varchar(256) NOT NULL, 
    control_schema varchar(256) NOT NULL,
    control_query text NOT NULL,
    control_username varchar(256) DEFAULT NULL,
    control_password varchar(256) DEFAULT NULL,
    control_session_properties text DEFAULT NULL,
    test_catalog varchar(256) NOT NULL,
    test_schema varchar(256) NOT NULL,
    test_query text NOT NULL,
    test_username varchar(256) DEFAULT NULL,
    test_password varchar(256) DEFAULT NULL,
    test_session_properties text DEFAULT NULL)

----------------------------------------

TITLE: Starting Presto Server in Background on Intel Mac
DESCRIPTION: Command to start the Presto server as a background process on an Intel-based Mac system.

LANGUAGE: bash
CODE:
presto-server start

----------------------------------------

TITLE: Querying JVM Version from JMX
DESCRIPTION: SQL query example showing how to retrieve JVM version information from all nodes in the Presto cluster.

LANGUAGE: sql
CODE:
SELECT node, vmname, vmversion
FROM jmx.current."java.lang:type=runtime";

----------------------------------------

TITLE: Enabling Kerberos Internal Communication
DESCRIPTION: Configuration for enabling Kerberos authentication for internal communication.

LANGUAGE: none
CODE:
internal-communication.kerberos.enabled=true

----------------------------------------

TITLE: Replacing Existing View Example
DESCRIPTION: Demonstrates using OR REPLACE to update an existing view definition.

LANGUAGE: sql
CODE:
CREATE OR REPLACE VIEW test AS
SELECT orderkey, orderstatus, totalprice / 4 AS quarter
FROM orders

----------------------------------------

TITLE: Creating a Schema in Presto SQL
DESCRIPTION: The CREATE SCHEMA command is used to create a new, empty schema in Presto. It supports an optional IF NOT EXISTS clause and a WITH clause for setting schema properties.

LANGUAGE: sql
CODE:
CREATE SCHEMA [ IF NOT EXISTS ] schema_name
[ WITH ( property_name = expression [, ...] ) ]

----------------------------------------

TITLE: Concatenating Binary Data in Presto SQL
DESCRIPTION: The || operator performs concatenation of binary data in Presto. It combines two or more binary values into a single binary value.

LANGUAGE: SQL
CODE:
binary1 || binary2

----------------------------------------

TITLE: Showing Available TPCH Schemas
DESCRIPTION: SQL query to display all available schemas in the TPCH connector, showing various scale factors.

LANGUAGE: sql
CODE:
SHOW SCHEMAS FROM tpch;

----------------------------------------

TITLE: START TRANSACTION Usage Examples
DESCRIPTION: Practical examples showing various ways to start transactions with different isolation levels and read/write modes.

LANGUAGE: sql
CODE:
START TRANSACTION;
START TRANSACTION ISOLATION LEVEL REPEATABLE READ;
START TRANSACTION READ WRITE;
START TRANSACTION ISOLATION LEVEL READ COMMITTED, READ ONLY;
START TRANSACTION READ WRITE, ISOLATION LEVEL SERIALIZABLE;

----------------------------------------

TITLE: Defining Table of Contents for Presto Release Notes in reStructuredText
DESCRIPTION: This code snippet defines a table of contents (toctree) in reStructuredText format, listing Presto release versions and their corresponding documentation links. It includes release numbers, dates for recent versions, and file paths for each release's detailed notes.

LANGUAGE: reStructuredText
CODE:
.. toctree::
    :maxdepth: 1

    Release-0.291 [2025-01-27] <release/release-0.291>
    Release-0.290 [2024-11-01] <release/release-0.290>
    Release-0.289 [2024-08-23] <release/release-0.289>
    Release-0.288.1 [2024-08-12] <release/release-0.288.1>
    Release-0.288 [2024-06-13] <release/release-0.288>
    Release-0.287 [2024-04-16] <release/release-0.287>
    Release-0.286 [2024-02-12] <release/release-0.286>
    Release-0.285.1 [2023-12-30] <release/release-0.285.1>
    Release-0.285 [2023-12-08] <release/release-0.285>
    Release-0.284 [2023-10-11] <release/release-0.284>
    Release-0.283 [2023-08-08] <release/release-0.283>
    release/release-0.282
    release/release-0.281
    release/release-0.280
    release/release-0.279.2
    release/release-0.279
    release/release-0.278.1
    release/release-0.278
    release/release-0.277
    release/release-0.276.1
    release/release-0.276
    release/release-0.275
    release/release-0.274
    release/release-0.273.3
    release/release-0.273.2
    release/release-0.273
    release/release-0.272
    release/release-0.271
    release/release-0.270
    release/release-0.269
    release/release-0.268
    release/release-0.267
    release/release-0.266
    release/release-0.265
    release/release-0.264.1
    release/release-0.264
    release/release-0.263.1
    release/release-0.263
    release/release-0.262
    release/release-0.261
    release/release-0.260.1
    release/release-0.260
    release/release-0.259.1
    release/release-0.259
    release/release-0.258
    release/release-0.257
    release/release-0.256
    release/release-0.255
    release/release-0.254.1
    release/release-0.254
    release/release-0.253.1
    release/release-0.253
    release/release-0.252
    release/release-0.251.1
    release/release-0.251
    release/release-0.250
    release/release-0.249.2
    release/release-0.249.1
    release/release-0.249
    release/release-0.248.1
    release/release-0.248
    release/release-0.247
    release/release-0.246
    release/release-0.245.1
    release/release-0.245
    release/release-0.244.1
    release/release-0.244
    release/release-0.243.4
    release/release-0.243.3
    release/release-0.243.2
    release/release-0.243.1
    release/release-0.243
    release/release-0.242.1
    release/release-0.242
    release/release-0.241
    release/release-0.240
    release/release-0.239.2
    release/release-0.239.1
    release/release-0.239
    release/release-0.238.3
    release/release-0.238.2
    release/release-0.238
    release/release-0.237
    release/release-0.236
    release/release-0.235.1
    release/release-0.235
    release/release-0.234.3
    release/release-0.234.2
    release/release-0.234.1
    release/release-0.234
    release/release-0.233.1
    release/release-0.233
    release/release-0.232
    release/release-0.231
    release/release-0.230
    release/release-0.229
    release/release-0.228
    release/release-0.227
    release/release-0.226
    release/release-0.225
    release/release-0.224
    release/release-0.223
    release/release-0.222
    release/release-0.221
    release/release-0.220
    release/release-0.219
    release/release-0.218
    release/release-0.217
    release/release-0.216
    release/release-0.215
    release/release-0.214
    release/release-0.213
    release/release-0.212
    release/release-0.211
    release/release-0.210
    release/release-0.209
    release/release-0.208
    release/release-0.207
    release/release-0.206
    release/release-0.205
    release/release-0.204
    release/release-0.203
    release/release-0.202
    release/release-0.201
    release/release-0.200
    release/release-0.199
    release/release-0.198
    release/release-0.197
    release/release-0.196
    release/release-0.195
    release/release-0.194
    release/release-0.193
    release/release-0.192
    release/release-0.191
    release/release-0.190
    release/release-0.189
    release/release-0.188
    release/release-0.187
    release/release-0.186
    release/release-0.185
    release/release-0.184
    release/release-0.183
    release/release-0.182
    release/release-0.181
    release/release-0.180
    release/release-0.179
    release/release-0.178
    release/release-0.177
    release/release-0.176
    release/release-0.175
    release/release-0.174
    release/release-0.173
    release/release-0.172
    release/release-0.171
    release/release-0.170
    release/release-0.169
    release/release-0.168
    release/release-0.167
    release/release-0.166
    release/release-0.165
    release/release-0.164
    release/release-0.163
    release/release-0.162
    release/release-0.161
    release/release-0.160
    release/release-0.159
    release/release-0.158
    release/release-0.157.1
    release/release-0.157
    release/release-0.156
    release/release-0.155
    release/release-0.154
    release/release-0.153
    release/release-0.152.3
    release/release-0.152.2
    release/release-0.152.1
    release/release-0.152
    release/release-0.151
    release/release-0.150
    release/release-0.149
    release/release-0.148
    release/release-0.147
    release/release-0.146
    release/release-0.145
    release/release-0.144.7
    release/release-0.144.6
    release/release-0.144.5
    release/release-0.144.4
    release/release-0.144.3
    release/release-0.144.2
    release/release-0.144.1
    release/release-0.144
    release/release-0.143
    release/release-0.142
    release/release-0.141
    release/release-0.140
    release/release-0.139
    release/release-0.138
    release/release-0.137
    release/release-0.136
    release/release-0.135
    release/release-0.134
    release/release-0.133
    release/release-0.132
    release/release-0.131
    release/release-0.130
    release/release-0.129
    release/release-0.128
    release/release-0.127
    release/release-0.126
    release/release-0.125
    release/release-0.124
    release/release-0.123
    release/release-0.122
    release/release-0.121
    release/release-0.120
    release/release-0.119
    release/release-0.118
    release/release-0.117
    release/release-0.116
    release/release-0.115
    release/release-0.114
    release/release-0.113
    release/release-0.112
    release/release-0.111
    release/release-0.110
    release/release-0.109
    release/release-0.108
    release/release-0.107
    release/release-0.106
    release/release-0.105
    release/release-0.104
    release/release-0.103
    release/release-0.102
    release/release-0.101
    release/release-0.100
    release/release-0.99
    release/release-0.98
    release/release-0.97
    release/release-0.96
    release/release-0.95
    release/release-0.94
    release/release-0.93
    release/release-0.92
    release/release-0.91
    release/release-0.90
    release/release-0.89
    release/release-0.88
    release/release-0.87
    release/release-0.86
    release/release-0.85
    release/release-0.84
    release/release-0.83
    release/release-0.82
    release/release-0.81
    release/release-0.80
    release/release-0.79
    release/release-0.78
    release/release-0.77
    release/release-0.76
    release/release-0.75
    release/release-0.74
    release/release-0.73
    release/release-0.72
    release/release-0.71
    release/release-0.70
    release/release-0.69
    release/release-0.68
    release/release-0.67
    release/release-0.66
    release/release-0.65
    release/release-0.64
    release/release-0.63
    release/release-0.62
    release/release-0.61
    release/release-0.60
    release/release-0.59
    release/release-0.58
    release/release-0.57
    release/release-0.56
    release/release-0.55
    release/release-0.54

----------------------------------------

TITLE: Defining Table of Contents for Presto Router Documentation
DESCRIPTION: This ReStructuredText code defines the table of contents for the Presto Router documentation, specifying the maximum depth and including links to deployment and scheduler sections.

LANGUAGE: restructuredtext
CODE:
.. toctree::
    :maxdepth: 1

    router/deployment
    router/scheduler

----------------------------------------

TITLE: Implementing Codegen Scalar Function in Presto
DESCRIPTION: Example of a codegen scalar function 'array_length' that generates bytecode for array length calculation. It uses @CodegenScalarFunction and returns a MethodHandle.

LANGUAGE: java
CODE:
public class CodegenArrayLengthFunction
{
    @CodegenScalarFunction("array_length", calledOnNullInput = true)
    @SqlType(StandardTypes.INTEGER)
    @TypeParameter("K")
    public static MethodHandle arrayLength(@SqlType("array(K)") Type arr)
    {
        CallSiteBinder binder = new CallSiteBinder();
        ClassDefinition classDefinition = new ClassDefinition(a(Access.PUBLIC, FINAL), makeClassName("ArrayLength"), type(Object.class));
        classDefinition.declareDefaultConstructor(a(PRIVATE));

        Parameter inputBlock = arg("inputBlock", Block.class);
        MethodDefinition method = classDefinition.declareMethod(a(Access.PUBLIC, STATIC), "array_length", type(Block.class), ImmutableList.of(inputBlock));
        BytecodeBlock body = method.getBody();
        body.append(inputBlock.invoke("getPositionCount", int.class).ret());

        Class<?> clazz = defineClass(classDefinition, Object.class, binder.getBindings(), CodegenArrayLengthFunction.class.getClassLoader());
        return new methodHandle(clazz, "array_length", Block.class), Optional.of();
    }
}

----------------------------------------

TITLE: SQL LIMIT Query Optimization
DESCRIPTION: Reference to LIMIT queries affected by optimizer.force-single-node-output configuration

LANGUAGE: sql
CODE:
LIMIT

----------------------------------------

TITLE: Enabling Column Statistics Collection in Hive Connector
DESCRIPTION: Configures the Hive connector to collect column-level statistics when writing tables. This feature is disabled by default and can be enabled by setting the hive.collect-column-statistics-on-write property.

LANGUAGE: SQL
CODE:
SET SESSION hive.collect-column-statistics-on-write = true;

----------------------------------------

TITLE: Enabling Verbose Optimizer Info in Presto SQL
DESCRIPTION: Adds information about cost-based optimizers and the source of stats they use (CBO/HBO) in explain plans. This feature is configurable via a session property.

LANGUAGE: SQL
CODE:
SET SESSION verbose_optimizer_info_enabled = true;

----------------------------------------

TITLE: Configuring TPCH Connector Properties
DESCRIPTION: Configuration file content for setting up the TPCH connector catalog in Presto. This needs to be added to etc/catalog/tpch.properties on both coordinator and worker nodes.

LANGUAGE: none
CODE:
connector.name=tpch

----------------------------------------

TITLE: Mounting S3 Storage in Alluxio
DESCRIPTION: Command to mount an S3 bucket as a read-only directory in Alluxio file system.

LANGUAGE: bash
CODE:
$ cd ${ALLUXIO_HOME}
$ bin/alluxio-start.sh local -f
$ bin/alluxio fs mount --readonly /example \
   s3://apc999/presto-tutorial/example-reason/

----------------------------------------

TITLE: Demonstrating New SQL Commands in Presto 0.174
DESCRIPTION: This snippet illustrates the usage of new SQL commands introduced in the release, including SHOW GRANTS and querying the information_schema.table_privileges table.

LANGUAGE: SQL
CODE:
SHOW GRANTS ON table_name;

SELECT * FROM information_schema.table_privileges;

----------------------------------------

TITLE: Basic SQL CREATE TABLE Syntax in Presto
DESCRIPTION: Complete syntax definition for CREATE TABLE statement in Presto, including optional IF NOT EXISTS clause, column definitions, constraints, and table properties.

LANGUAGE: sql
CODE:
CREATE TABLE [ IF NOT EXISTS ]
table_name (
  { column_name data_type [NOT NULL] [ COMMENT comment ] [ WITH ( property_name = expression [, ...] ) ]
  | LIKE existing_table_name [ { INCLUDING | EXCLUDING } PROPERTIES ]
  | [ CONSTRAINT constraint_name ] { PRIMARY KEY | UNIQUE } ( { column_name [, ...] } ) [ { ENABLED | DISABLED } ] [ [ NOT ] RELY ] [ [ NOT ] ENFORCED ] }
  [, ...]
)
[ COMMENT table_comment ]
[ WITH ( property_name = expression [, ...] ) ]

----------------------------------------

TITLE: Using Enhanced truncate Function with Decimal Precision in Presto SQL
DESCRIPTION: Shows how to use the enhanced truncate function, which now supports specifying the number of digits to the right of the decimal point in the truncated result.

LANGUAGE: SQL
CODE:
SELECT truncate(numeric_column, 2) FROM table_name;

----------------------------------------

TITLE: Executing Prepared Statement With Parameters
DESCRIPTION: Shows how to prepare and execute a SELECT statement with two parameters using placeholders.

LANGUAGE: sql
CODE:
PREPARE my_select2 FROM
SELECT name FROM nation WHERE regionkey = ? and nationkey < ?;

LANGUAGE: sql
CODE:
EXECUTE my_select2 USING 1, 3;

LANGUAGE: sql
CODE:
SELECT name FROM nation WHERE regionkey = 1 AND nationkey < 3;

----------------------------------------

TITLE: Configuring Delta Lake Connector Properties
DESCRIPTION: Basic configuration properties required for setting up the Delta Lake connector in Presto. Must be placed in etc/catalog/delta.properties file.

LANGUAGE: properties
CODE:
connector.name=delta
hive.metastore.uri=hostname:port

----------------------------------------

TITLE: Configuring HDFS Authentication with Kerberos and Impersonation
DESCRIPTION: Example configuration for enabling Kerberos authentication and end-user impersonation when accessing HDFS.

LANGUAGE: properties
CODE:
hive.hdfs.authentication.type=KERBEROS
hive.hdfs.impersonation.enabled=true
hive.hdfs.presto.principal=presto@EXAMPLE.COM
hive.hdfs.presto.keytab=/etc/presto/hdfs.keytab

----------------------------------------

TITLE: Referencing Max Function in RST Documentation
DESCRIPTION: Demonstrates how to reference the 'max' function in RST documentation using the :func: directive.

LANGUAGE: rst
CODE:
:func:`!max`

----------------------------------------

TITLE: Redis Hash Table Definition Schema
DESCRIPTION: JSON schema specifically for Redis hash type values, showing the structure for defining hash fields in the table definition.

LANGUAGE: json
CODE:
{
    "tableName": ...,
    "schemaName": ...,
    "value": {
        "dataFormat": "hash",
        "fields": [
            ...
       ]
    }
}

----------------------------------------

TITLE: S3 Security Mapping Configuration
DESCRIPTION: JSON configuration file example for S3 security mapping defining user-specific access credentials

LANGUAGE: json
CODE:
{
  "mappings": [
    {
      "user": "admin",
      "accessKey": "AKIAxxxaccess", 
      "secretKey": "iXbXxxxsecret"
    },
    {
      "user": "analyst|scientist",
      "iamRole": "arn:aws:iam::123456789101:role/analyst_and_scientist_role"
    },
    {
      "iamRole": "arn:aws:iam::123456789101:role/default"
    }
  ]
}

----------------------------------------

TITLE: Defining Schema Ownership Rules in Presto's File-Based Access Control
DESCRIPTION: This JSON snippet shows how to define schema ownership rules in Presto's file-based access control system, specifying user and schema patterns, and ownership rights.

LANGUAGE: json
CODE:
{
  "catalogs": [
    {
      "allow": true
    }
  ],
  "schemas": [
    {
      "user": "admin",
      "schema": ".*",
      "owner": true
    },
    {
      "user": "guest",
      "owner": false
    },
    {
      "schema": "default",
      "owner": true
    }
  ]
}

----------------------------------------

TITLE: New IEEE 754 Conversion Functions
DESCRIPTION: Introduction of two new functions for converting values to IEEE 754 32-bit and 64-bit floating-point formats.

LANGUAGE: sql
CODE:
to_ieee754_32(value)
to_ieee754_64(value)

----------------------------------------

TITLE: Deallocating a Prepared Statement Example in Presto SQL
DESCRIPTION: This example demonstrates how to deallocate a prepared statement named 'my_query' using the DEALLOCATE PREPARE statement in Presto SQL.

LANGUAGE: sql
CODE:
DEALLOCATE PREPARE my_query;

----------------------------------------

TITLE: Defining RST Table of Contents for Presto Admin Docs
DESCRIPTION: ReStructuredText directive that creates a table of contents tree for Presto administration documentation, with maximum depth of 1 level. Lists key administrative topics like web interface, tuning, properties, resource groups, and other management features.

LANGUAGE: rst
CODE:
.. toctree::
    :maxdepth: 1

    admin/web-interface
    admin/tuning
    admin/properties
    admin/properties-session
    admin/spill
    admin/exchange-materialization
    admin/cte-materialization
    admin/resource-groups
    admin/session-property-managers
    admin/function-namespace-managers
    admin/dist-sort
    admin/verifier

----------------------------------------

TITLE: Configuring SingleStore Connector in Presto
DESCRIPTION: This snippet shows how to configure the SingleStore connector in Presto by creating a properties file. It includes the necessary connection parameters such as the JDBC URL, username, and password.

LANGUAGE: properties
CODE:
connector.name=singlestore
connection-url=jdbc:singlestore://localhost:3306
connection-user=root
connection-password=LbRootPass1

----------------------------------------

TITLE: Generating Java Keystore for Presto Coordinator TLS
DESCRIPTION: This command generates a Java Keystore file for the Presto coordinator's TLS configuration. It creates a key pair with the alias 'presto' using RSA algorithm and stores it in 'keystore.jks'.

LANGUAGE: none
CODE:
keytool -genkeypair -alias presto -keyalg RSA -keystore keystore.jks

----------------------------------------

TITLE: Complex Partition Key Analysis
DESCRIPTION: Example demonstrating analysis of partitions with complex keys using multiple columns (state and city).

LANGUAGE: sql
CODE:
ANALYZE hive.default.customers WITH (partitions = ARRAY[ARRAY['CA', 'San Francisco'], ARRAY['NY', 'NY']]);

----------------------------------------

TITLE: Installing Homebrew on Apple Silicon Mac
DESCRIPTION: Command to install Homebrew package manager on an Apple Silicon Mac. This installs Homebrew into /usr/local/bin.

LANGUAGE: bash
CODE:
arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

----------------------------------------

TITLE: Using regexp_extract_all with Capture Groups
DESCRIPTION: Extracts all matches for a specific capture group from a pattern with multiple groups.

LANGUAGE: sql
CODE:
SELECT regexp_extract_all('1a 2b 14m', '(\d+)([a-z]+)', 2); -- ['a', 'b', 'm']

----------------------------------------

TITLE: Configuring Legacy Hive Authorization in Presto
DESCRIPTION: Demonstrates the syntax for a legacy Hive authorization property. These properties are now only enforced when Hive security is set to 'none'.

LANGUAGE: properties
CODE:
hive.allow-drop-table

----------------------------------------

TITLE: Configuring Hudi Connector Properties in Presto
DESCRIPTION: Minimum configuration properties required in the hudi.properties file for setting up the Hudi connector in Presto. This includes specifying the connector name and Hive metastore URI.

LANGUAGE: properties
CODE:
connector.name=hudi
hive.metastore.uri=thrift://hms.host:9083

----------------------------------------

TITLE: Basic SELECT Statement Syntax
DESCRIPTION: The fundamental structure of a SELECT statement in Presto, including optional clauses like WITH, FROM, WHERE, GROUP BY, HAVING, UNION/INTERSECT/EXCEPT, ORDER BY, OFFSET, and LIMIT.

LANGUAGE: SQL
CODE:
[ WITH with_query [, ...] ]
SELECT [ ALL | DISTINCT ] select_expr [, ...]
[ FROM from_item [, ...] ]
[ WHERE condition ]
[ GROUP BY [ ALL | DISTINCT ] grouping_element [, ...] ]
[ HAVING condition]
[ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] select ]
[ ORDER BY expression [ ASC | DESC ] [, ...] ]
[ OFFSET count [ { ROW | ROWS } ] ]
[ { LIMIT [ count | ALL ] } ]

----------------------------------------

TITLE: Creating Set Digest from Varchar Array in Presto SQL
DESCRIPTION: Demonstrates how to create a set digest from a varchar array using the make_set_digest function.

LANGUAGE: SQL
CODE:
SELECT make_set_digest(value)
FROM (VALUES 'Presto', 'SQL', 'on', 'everything') T(value);

----------------------------------------

TITLE: Implementing Finish Delete Method
DESCRIPTION: Method signature for completing a delete operation and processing the fragments from all splits.

LANGUAGE: java
CODE:
void finishDelete(
    ConnectorSession session,
    ConnectorTableHandle tableHandle,
    Collection<Slice> fragments)

----------------------------------------

TITLE: Querying Hudi Table with Symbol Grouping
DESCRIPTION: SQL query example demonstrating how to select and group data from a Hudi COW table by symbol with filtering.

LANGUAGE: sql
CODE:
USE hudi.default;\nselect symbol, max(ts) from stock_ticks_cow group by symbol HAVING symbol = 'GOOG';

LANGUAGE: text
CODE:
  symbol   |        _col1         |\n-----------+----------------------+\n GOOG      | 2018-08-31 10:59:00  |\n(1 rows)

----------------------------------------

TITLE: Array Sorting Examples in Presto SQL
DESCRIPTION: Demonstrates various array sorting scenarios including custom comparators and null handling.

LANGUAGE: sql
CODE:
SELECT array_sort(ARRAY [3, 2, 5, 1, 2], (x, y) -> IF(x < y, 1, IF(x = y, 0, -1))); -- [5, 3, 2, 2, 1]
SELECT array_sort(ARRAY ['bc', 'ab', 'dc'], (x, y) -> IF(x < y, 1, IF(x = y, 0, -1))); -- ['dc', 'bc', 'ab']

----------------------------------------

TITLE: Setting Refresh Period for File-Based System Access Control in Presto
DESCRIPTION: This code shows how to set a refresh period for the file-based system access control plugin, allowing changes to be applied without restarting Presto.

LANGUAGE: properties
CODE:
security.refresh-period=1s

----------------------------------------

TITLE: Creating Function Namespace - SQL Insert
DESCRIPTION: SQL command to create a new function namespace by inserting a record into the function namespaces table. Specifies the catalog name and schema name for the new namespace.

LANGUAGE: sql
CODE:
INSERT INTO example_function_namespaces (catalog_name, schema_name)
VALUES('example', 'test');

----------------------------------------

TITLE: Implementing Presto Plugin for Custom Functions
DESCRIPTION: Example of a Presto plugin class that registers custom functions by implementing the Plugin interface and overriding the getFunctions() method.

LANGUAGE: java
CODE:
public class ExampleFunctionsPlugin
        implements Plugin
{
    @Override
    public Set<Class<?>> getFunctions()
    {
        return ImmutableSet.<Class<?>>builder()
                .add(ExampleNullFunction.class)
                .add(IsNullFunction.class)
                .add(IsEqualOrNullFunction.class)
                .add(ExampleStringFunction.class)
                .add(ExampleAverageFunction.class)
                .build();
    }
}

----------------------------------------

TITLE: Configuration Properties - Simple TTL Node Selector
DESCRIPTION: Properties to configure default execution time estimates for SimpleTtlNodeSelector when user-provided estimates are not available.

LANGUAGE: properties
CODE:
simple-ttl-node-selector.use-default-execution-time-estimate-as-fallback
simple-ttl-node-selector.default-execution-time-estimate

----------------------------------------

TITLE: Installing Docker and Colima via Homebrew
DESCRIPTION: Command to install Docker CLI tools and Colima using Homebrew

LANGUAGE: bash
CODE:
brew install docker colima

----------------------------------------

TITLE: Executing DEALLOCATE PREPARE Statement in Presto SQL
DESCRIPTION: The DEALLOCATE PREPARE statement is used to remove a previously prepared statement from the list of prepared statements in a Presto session. It takes the name of the statement to be deallocated as its parameter.

LANGUAGE: sql
CODE:
DEALLOCATE PREPARE statement_name

----------------------------------------

TITLE: SQL ANALYZE Statement
DESCRIPTION: New ANALYZE statement support for collecting table statistics on demand, particularly in the Hive connector with WITH properties for partition specification.

LANGUAGE: sql
CODE:
ANALYZE

----------------------------------------

TITLE: Presto JVM Configuration
DESCRIPTION: JVM configuration settings for Presto server including memory allocation and garbage collection parameters

LANGUAGE: properties
CODE:
-server
-Xmx2G
-XX:+UseG1GC
-XX:G1HeapRegionSize=32M
-XX:+UseGCOverheadLimit
-XX:+ExplicitGCInvokesConcurrent
-XX:+HeapDumpOnOutOfMemoryError
-XX:+ExitOnOutOfMemoryError
-Djdk.attach.allowAttachSelf=true

----------------------------------------

TITLE: Retrieving MongoDB Node Hostnames
DESCRIPTION: Command to retrieve node hostnames using dig SRV record lookup.

LANGUAGE: bash
CODE:
dig srv _mongodb._tcp.<cluster-hostname>

----------------------------------------

TITLE: Creating Kerberos Principal and Keytab File
DESCRIPTION: Commands for creating a Kerberos principal and generating a keytab file using kadmin. This is required for each user connecting to the Presto coordinator with Kerberos authentication.

LANGUAGE: bash
CODE:
kadmin
> addprinc -randkey someuser@EXAMPLE.COM
> ktadd -k /home/someuser/someuser.keytab someuser@EXAMPLE.COM

----------------------------------------

TITLE: Configuring Resource Groups Properties File Path
DESCRIPTION: Specification of the JSON configuration file path for resource groups.

LANGUAGE: text
CODE:
resource-groups.config-file=etc/resource-groups.json

----------------------------------------

TITLE: Using date_parse() Function with Nanosecond Precision in Presto SQL
DESCRIPTION: Example of parsing timestamps with nanosecond precision using the date_parse() function in Presto SQL. This feature was added in version 0.150.

LANGUAGE: sql
CODE:
date_parse(timestamp_string, format_string)

----------------------------------------

TITLE: Rendering ANSI Bar Chart in SQL (Presto)
DESCRIPTION: Functions for rendering single bars in ANSI bar charts with color interpolation. Includes overloads for default and custom color ranges.

LANGUAGE: sql
CODE:
bar(x, width) -> varchar

LANGUAGE: sql
CODE:
bar(x, width, low_color, high_color) -> varchar

----------------------------------------

TITLE: Configuring HTTP Server HTTPS Excluded Ciphers in Presto
DESCRIPTION: Update to the default value of the http-server.https.excluded-cipher config property. This change excludes cipher suites with weak hash algorithms or without forward secrecy by default.

LANGUAGE: properties
CODE:
http-server.https.excluded-cipher=

----------------------------------------

TITLE: Converting Between Binary and IEEE 754 Floating-Point in Presto SQL
DESCRIPTION: Functions for converting between binary data and IEEE 754 floating-point representations for single and double precision values.

LANGUAGE: SQL
CODE:
to_ieee754_32(real) -> varbinary
from_ieee754_32(binary) -> real
to_ieee754_64(double) -> varbinary
from_ieee754_64(binary) -> double

----------------------------------------

TITLE: SQL Function Additions
DESCRIPTION: New substring function added to the SQL function library.

LANGUAGE: sql
CODE:
substring

----------------------------------------

TITLE: Basic ANALYZE Command Syntax
DESCRIPTION: The fundamental syntax structure for the ANALYZE command in Presto, showing the basic form and optional WITH clause for connector-specific properties.

LANGUAGE: none
CODE:
ANALYZE table_name [ WITH ( property_name = expression [, ...] ) ]

----------------------------------------

TITLE: Querying Historical JMX Data in Presto
DESCRIPTION: SQL query example demonstrating how to retrieve historical JMX data from the history schema, including a timestamp column for each snapshot.

LANGUAGE: sql
CODE:
SELECT "timestamp", "uptime" FROM jmx.history."java.lang:type=runtime";

----------------------------------------

TITLE: Generating Table of Contents for Presto Clients in reStructuredText
DESCRIPTION: This snippet uses reStructuredText directives to create a table of contents for Presto client documentation. It sets the maximum depth to 1 and includes links to separate pages for each client.

LANGUAGE: restructuredtext
CODE:
.. toctree::
    :maxdepth: 1

    clients/presto-cli
    clients/presto-console
    clients/dbeaver
    clients/superset

----------------------------------------

TITLE: Defining Catalog Access Rules in Presto's File-Based Access Control
DESCRIPTION: This JSON snippet illustrates how to define catalog access rules in Presto's file-based access control system, specifying permissions for different users and catalogs.

LANGUAGE: json
CODE:
{
  "catalogs": [
    {
      "user": "admin",
      "catalog": "(mysql|system)",
      "allow": "all"
    },
    {
      "catalog": "hive",
      "allow": "all"
    },
    {
      "user": "alice",
      "catalog": "postgresql",
      "allow": "read-only"
    },
    {
      "catalog": "system",
      "allow": "none"
    }
  ]
}

----------------------------------------

TITLE: Creating Temporary Square Function in Presto
DESCRIPTION: Example of creating a temporary function that calculates the square of an integer.

LANGUAGE: sql
CODE:
CREATE TEMPORARY FUNCTION square(x int)
RETURNS int
RETURN x * x

----------------------------------------

TITLE: IP Prefix Subnet Generation in Presto SQL
DESCRIPTION: Generates all subnets of specified length within a given IP prefix. Returns empty array if prefix_length is less specific.

LANGUAGE: sql
CODE:
SELECT IP_PREFIX_SUBNETS(IPPREFIX '192.168.1.0/24', 25);
SELECT IP_PREFIX_SUBNETS(IPPREFIX '2a03:2880:c000::/34', 36);

----------------------------------------

TITLE: Querying Table Properties in Presto SQL
DESCRIPTION: SQL query to list all available table properties from the system metadata.

LANGUAGE: sql
CODE:
SELECT * FROM system.metadata.table_properties

----------------------------------------

TITLE: Transforming Map Values in Presto SQL
DESCRIPTION: Shows how to transform the values of a map using a custom function with the transform_values() function.

LANGUAGE: sql
CODE:
SELECT transform_values(MAP(ARRAY[], ARRAY[]), (k, v) -> v + 1); -- {}
SELECT transform_values(MAP(ARRAY [1, 2, 3], ARRAY [10, 20, 30]), (k, v) -> v + k); -- {1 -> 11, 2 -> 22, 3 -> 33}
SELECT transform_values(MAP(ARRAY [1, 2, 3], ARRAY ['a', 'b', 'c']), (k, v) -> k * k); -- {1 -> 1, 2 -> 4, 3 -> 9}
SELECT transform_values(MAP(ARRAY ['a', 'b'], ARRAY [1, 2]), (k, v) -> k || CAST(v as VARCHAR)); -- {a -> a1, b -> b2}
SELECT transform_values(MAP(ARRAY [1, 2], ARRAY [1.0, 1.4]), -- {1 -> one_1.0, 2 -> two_1.4}
                                (k, v) -> MAP(ARRAY[1, 2], ARRAY['one', 'two'])[k] || '_' || CAST(v AS VARCHAR));

----------------------------------------

TITLE: Large IN Lists with Complex Types in Presto SQL
DESCRIPTION: This fix addresses incorrect results when using IN lists with more than 1000 elements of timestamp with time zone, time with time zone, or structural types, improving query accuracy for large datasets.

LANGUAGE: sql
CODE:
column IN (value1, value2, ..., value1001)

----------------------------------------

TITLE: Implementing Hash-Partitioned Semi-Joins in Presto SQL
DESCRIPTION: Enables hash-partitioning for semi-joins when the distributed_join option is enabled, potentially improving join performance for large datasets.

LANGUAGE: SQL
CODE:
distributed_join

----------------------------------------

TITLE: Enabling Query Limit Spill in Presto SQL
DESCRIPTION: Enable spilling for a query when its memory usage exceeds the per-node total memory limit. The experimental.query-limit-spill-enabled property is used to enable this feature.

LANGUAGE: sql
CODE:
SET SESSION experimental.query-limit-spill-enabled = true

----------------------------------------

TITLE: Configuring Presto Access Control Properties
DESCRIPTION: Example configuration file showing how to set up custom access control in Presto. The configuration includes the access control name and custom properties that are passed to the SystemAccessControlFactory.

LANGUAGE: properties
CODE:
access-control.name=custom-access-control
custom-property1=custom-value1
custom-property2=custom-value2

----------------------------------------

TITLE: Function References in Presto 0.222
DESCRIPTION: New and modified function references including approx_distinct, merge_hll, and bitwise operations.

LANGUAGE: sql
CODE:
approx_distinct
merge_hll
bitwise_arithmetic_shift_right
bitwise_logical_shift_right
bitwise_shift_left

----------------------------------------

TITLE: Generating Java Keystore for Presto Coordinator TLS
DESCRIPTION: This command uses keytool to generate a key pair and store it in a Java Keystore file for the Presto coordinator's TLS configuration. The user is prompted to enter keystore details and certificate information.

LANGUAGE: none
CODE:
keytool -genkeypair -alias presto -keyalg RSA -keystore keystore.jks
Enter keystore password:
Re-enter new password:
What is your first and last name?
  [Unknown]:  presto-coordinator.example.com
What is the name of your organizational unit?
  [Unknown]:
What is the name of your organization?
  [Unknown]:
What is the name of your City or Locality?
  [Unknown]:
What is the name of your State or Province?
  [Unknown]:
What is the two-letter country code for this unit?
  [Unknown]:
Is CN=presto-coordinator.example.com, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown correct?
  [no]:  yes

Enter key password for <presto>
        (RETURN if same as keystore password):

----------------------------------------

TITLE: DROP FUNCTION Syntax - Presto SQL
DESCRIPTION: The basic syntax pattern for dropping functions in Presto SQL. Supports optional TEMPORARY keyword, IF EXISTS clause, and parameter type specifications.

LANGUAGE: sql
CODE:
DROP [TEMPORARY] FUNCTION [ IF EXISTS ] qualified_function_name [ ( parameter_type[, ...] ) ]

----------------------------------------

TITLE: Configuring Certificate Authentication in Presto
DESCRIPTION: Configuration property to enable certificate-based authentication in Presto.

LANGUAGE: properties
CODE:
http-server.authentication.type=CERTIFICATE

----------------------------------------

TITLE: Using Column Aliases in CREATE TABLE AS Statements in SQL
DESCRIPTION: Adds support for column aliases in CREATE TABLE AS statements.

LANGUAGE: SQL
CODE:
CREATE TABLE new_table AS SELECT column1 AS alias1, column2 AS alias2 FROM source_table;

----------------------------------------

TITLE: Defining DROP SCHEMA Syntax in Presto SQL
DESCRIPTION: Specifies the syntax for the DROP SCHEMA command in Presto. It allows for an optional IF EXISTS clause to suppress errors if the schema doesn't exist.

LANGUAGE: SQL
CODE:
DROP SCHEMA [ IF EXISTS ] schema_name

----------------------------------------

TITLE: Configuring Presto Server Properties for Coordinator
DESCRIPTION: Minimal configuration for a Presto coordinator node, including settings for coordination, memory, and discovery.

LANGUAGE: none
CODE:
coordinator=true
node-scheduler.include-coordinator=false
http-server.http.port=8080
query.max-memory=50GB
query.max-memory-per-node=1GB
discovery-server.enabled=true
discovery.uri=http://example.net:8080

----------------------------------------

TITLE: Configuring Read-Only System Access Control in Presto
DESCRIPTION: This snippet shows how to configure the read-only system access control plugin in Presto. It allows read operations but prohibits write operations.

LANGUAGE: properties
CODE:
access-control.name=read-only

----------------------------------------

TITLE: Alluxio Cache Eviction Configuration
DESCRIPTION: Configuration property to specify the eviction policy for Alluxio caching in Hive connector.

LANGUAGE: plaintext
CODE:
cache.alluxio.eviction-policy

----------------------------------------

TITLE: Using IS NULL Predicate on Bucketed Columns in SQL
DESCRIPTION: There is a bug in this release that causes incorrect results when using the IS NULL predicate on bucketed columns.

LANGUAGE: SQL
CODE:
SELECT * FROM table WHERE bucketed_column IS NULL;

----------------------------------------

TITLE: SQL Function Reference - Array Manipulation
DESCRIPTION: New function for deleting elements from the end of an array

LANGUAGE: sql
CODE:
trim_array()

----------------------------------------

TITLE: ALTER FUNCTION Without Parameter Type Example
DESCRIPTION: Example demonstrating how to alter a function without specifying parameter types when only one signature exists.

LANGUAGE: sql
CODE:
ALTER FUNCTION prod.default.tan
CALLED ON NULL INPUT

----------------------------------------

TITLE: ANSI SQL Array Operations in Presto
DESCRIPTION: Demonstrates ANSI SQL compliant array operations including 1-based indexing and array construction syntax.

LANGUAGE: sql
CODE:
SELECT my_array[1] AS first_element
FROM ...

SELECT ARRAY[1, 2, 3] AS my_array

----------------------------------------

TITLE: Using ST_GeomFromBinary and ST_AsBinary Functions in SQL
DESCRIPTION: New functions added for converting geometries to and from Well-Known Binary format. These functions can be used in SQL queries to handle geometric data.

LANGUAGE: sql
CODE:
SELECT ST_GeomFromBinary(binary_data) AS geometry;
SELECT ST_AsBinary(geometry) AS binary_data;

----------------------------------------

TITLE: Integer Division with Proper Casting in Presto
DESCRIPTION: Demonstrates how to perform floating-point division with integers by using proper type casting.

LANGUAGE: sql
CODE:
SELECT CAST(5 AS DOUBLE) / 2

----------------------------------------

TITLE: Demonstrating RST Syntax for Highlights Section
DESCRIPTION: This RST code snippet shows the formatting for the Highlights section in the release notes, listing key features and improvements.

LANGUAGE: rst
CODE:
**Highlights**
==============
* Add the interface ``QueryInterceptor`` to allow for custom logic to be executed before or after query execution. (:pr:`15565`).
* Add support for temporary (session-scoped) functions.

----------------------------------------

TITLE: Basic DESCRIBE Table Syntax - Presto SQL
DESCRIPTION: Shows the basic syntax for using the DESCRIBE statement to view table column information in Presto. This command is functionally identical to SHOW COLUMNS.

LANGUAGE: sql
CODE:
DESCRIBE table_name

----------------------------------------

TITLE: Displaying Table and Query Statistics in Presto SQL
DESCRIPTION: Introduces the SHOW STATS command to display table and query statistics in Presto. This new feature allows users to retrieve statistical information about tables and query execution.

LANGUAGE: SQL
CODE:
SHOW STATS

----------------------------------------

TITLE: Retrieving Node Information with Errors in Presto
DESCRIPTION: This example shows the response from the GET /v1/node endpoint when a node is experiencing errors. It includes detailed failure information, including the Java exception type and stack trace.

LANGUAGE: http
CODE:
GET /v1/node

HTTP/1.1 200 OK
Vary: Accept
Content-Type: text/javascript

[
   {
      "age": "4.45m",
      "lastFailureInfo": {
          "message": "Connect Timeout",
          "stack": [
              "org.eclipse.jetty.io.ManagedSelector$ConnectTimeout.run(ManagedSelector.java:683)",
              ....
              "java.lang.Thread.run(Thread.java:745)"
          ],
          "suppressed": [],
          "type": "java.net.SocketTimeoutException"
      },
      "lastRequestTime": "2017-08-05T11:53:00.647Z",
      "lastResponseTime": "2017-08-05T11:53:00.647Z",
      "recentFailureRatio": 0.47263053472046446,
      "recentFailures": 2.8445543205610617,
      "recentFailuresByType": {
          "java.net.SocketTimeoutException": 2.8445543205610617
      },
      "recentRequests": 6.018558073577414,
      "recentSuccesses": 3.1746446343010297,
      "uri": "http://172.19.0.3:8080"
   }
]

----------------------------------------

TITLE: Querying SingleStore Schemas in Presto
DESCRIPTION: This SQL snippet demonstrates how to list available SingleStore databases (schemas) using the SHOW SCHEMAS command in Presto.

LANGUAGE: sql
CODE:
SHOW SCHEMAS FROM singlestore;

----------------------------------------

TITLE: Setting Role Privileges in Presto SQL
DESCRIPTION: The SET ROLE command allows users to modify their active role privileges for the current session in the current catalog. It supports enabling a single role, all granted roles, or disabling all roles. The command requires the user to have appropriate role grants for successful execution.

LANGUAGE: sql
CODE:
SET ROLE ( role | ALL | NONE )

----------------------------------------

TITLE: Configuration Property for Non-builtin Functions
DESCRIPTION: Configuration property to enable listing of non-builtin functions in SHOW FUNCTIONS command.

LANGUAGE: properties
CODE:
list-non-built-in-functions

----------------------------------------

TITLE: Listing PostgreSQL Tables in Presto
DESCRIPTION: Demonstrates how to show tables from a specific PostgreSQL schema using the SHOW TABLES command in Presto.

LANGUAGE: sql
CODE:
SHOW TABLES FROM postgresql.web;

----------------------------------------

TITLE: Creating Tables from Query Results in Presto SQL
DESCRIPTION: Demonstrates how to create a new table in Presto using the result of a SELECT query. The example shows creating an 'orders_by_date' table with aggregated order data.

LANGUAGE: SQL
CODE:
CREATE TABLE orders_by_date AS
SELECT orderdate, sum(totalprice) AS price
FROM orders
GROUP BY orderdate

----------------------------------------

TITLE: Synchronizing Partition Metadata in Presto SQL
DESCRIPTION: Shows the usage of a system procedure to synchronize partitions in the metastore with those physically present in the file system.

LANGUAGE: SQL
CODE:
CALL system.sync_partition_metadata();

----------------------------------------

TITLE: Configuring Advanced Principal Rules in Presto's Access Control
DESCRIPTION: This JSON code demonstrates advanced principal rules in Presto's file-based access control, including specific user matching and group principal handling for Kerberos authentication.

LANGUAGE: json
CODE:
{
  "catalogs": [
    {
      "allow": true
    }
  ],
  "principals": [
    {
      "principal": "([^/]+)/?.*@example.net",
      "principal_to_user": "$1",
      "allow": true
    },
    {
      "principal": "group@example.net",
      "user": "alice|bob",
      "allow": true
    }
  ]
}

----------------------------------------

TITLE: Configuring Worker Threads Relative to Core Count in Presto
DESCRIPTION: Demonstrates how to configure the maximum number of worker threads relative to the available CPU cores using the task.max-worker-threads configuration property.

LANGUAGE: Properties
CODE:
task.max-worker-threads=2C

----------------------------------------

TITLE: Drop Table Example
DESCRIPTION: Simple example showing how to drop a specific table named 'orders_by_date'.

LANGUAGE: sql
CODE:
DROP TABLE orders_by_date

----------------------------------------

TITLE: Enabling Column Statistics Collection in Hive Connector
DESCRIPTION: Illustrates how to enable the collection of column-level statistics when writing tables using the Hive connector. This feature is disabled by default and can be enabled through the hive.collect-column-statistics-on-write property.

LANGUAGE: properties
CODE:
hive.collect-column-statistics-on-write=true

----------------------------------------

TITLE: Configuring HTTPS Discovery URI in Presto
DESCRIPTION: Sets the discovery URI to use HTTPS for Presto cluster communication.

LANGUAGE: properties
CODE:
discovery.uri=https://<coordinator fqdn>:<https port>

----------------------------------------

TITLE: Creating a Table with Constant Row Count in Black Hole Connector
DESCRIPTION: Demonstrates creating a table with a specified number of rows using split, page, and row parameters. This allows for controlled testing scenarios.

LANGUAGE: sql
CODE:
CREATE TABLE blackhole.test.nation (
  nationkey bigint,
  name varchar
)
WITH (
  split_count = 500,
  pages_per_split = 1000,
  rows_per_page = 2000
);

----------------------------------------

TITLE: Memory Related Configuration Properties
DESCRIPTION: Properties for configuring memory limits and management in Presto

LANGUAGE: properties
CODE:
query.max-memory-per-node=JVM max memory * 0.1
query.max-total-memory-per-node=query.max-memory-per-node * 2
query.max-memory=20GB
query.max-total-memory=query.max-memory * 2
memory.heap-headroom-per-node=JVM max memory * 0.3

----------------------------------------

TITLE: Creating Verifier Snapshots Table
DESCRIPTION: SQL schema for creating the verifier_snapshots table that stores query result snapshots for query-bank mode.

LANGUAGE: sql
CODE:
CREATE TABLE verifier_snapshots (
    id int(11) unsigned NOT NULL PRIMARY KEY AUTO_INCREMENT,
    suite varchar(256) NOT NULL,
    name varchar(256) NOT NULL DEFAULT '.',
    is_explain BOOLEAN NOT NULL DEFAULT false,
    snapshot json NOT NULL,
    updated_at datetime NOT NULL DEFAULT now(),
    UNIQUE(suite, name, is_explain));

----------------------------------------

TITLE: Dropping a View with IF EXISTS Clause in Presto SQL
DESCRIPTION: Shows how to drop a view named 'orders_by_date' if it exists, using the IF EXISTS clause to prevent errors if the view is not present.

LANGUAGE: sql
CODE:
DROP VIEW IF EXISTS orders_by_date

----------------------------------------

TITLE: SQL Time Zone Chaining Example
DESCRIPTION: Example demonstrating the fixed functionality of chaining AT TIME ZONE operations in Presto SQL

LANGUAGE: sql
CODE:
SELECT TIMESTAMP '2016-01-02 12:34:56' AT TIME ZONE 'America/Los_Angeles' AT TIME ZONE 'UTC'

----------------------------------------

TITLE: Adding Column Comments in CREATE TABLE Statement
DESCRIPTION: This release allows specifying column comments when creating tables. This can improve documentation and metadata for table columns.

LANGUAGE: sql
CODE:
CREATE TABLE table_name (
    column1 data_type COMMENT 'Description of column1',
    column2 data_type COMMENT 'Description of column2'
);

----------------------------------------

TITLE: Basic EXECUTE Command Syntax
DESCRIPTION: Shows the basic syntax structure for the EXECUTE command with optional parameters.

LANGUAGE: sql
CODE:
EXECUTE statement_name [ USING parameter1 [ , parameter2, ... ] ]

----------------------------------------

TITLE: Basic Delta Lake Table Query
DESCRIPTION: Example of querying a Delta Lake table registered in Hive metastore through Presto.

LANGUAGE: sql
CODE:
SELECT * FROM sales.apac.sales_data LIMIT 200;

----------------------------------------

TITLE: Demonstrating New Bing Tiles Function in SQL
DESCRIPTION: Introduces a new variant of the bing_tiles_around function that accepts a radius parameter.

LANGUAGE: SQL
CODE:
SELECT bing_tiles_around(latitude, longitude, zoom, radius)

----------------------------------------

TITLE: Added Query Memory Limit Session Property
DESCRIPTION: Addition of query_max_memory session property to control memory limits for individual queries, bounded by the query.max-memory configuration setting

LANGUAGE: sql
CODE:
query_max_memory

----------------------------------------

TITLE: Converting Binary Decimal to Double in Pinot
DESCRIPTION: Function that converts a Pinot binary decimal value to a double precision number. Takes parameters for the binary value, radix for conversion, scale factor, and a boolean flag to determine null handling. Returns a double precision number or zero based on the returnZeroOnNull parameter.

LANGUAGE: sql
CODE:
pinot_binary_decimal_to_double(binary, bigIntegerRadix, scale, returnZeroOnNull) -> double

----------------------------------------

TITLE: Query Results Response with Final Data
DESCRIPTION: Example response containing final query results, including data rows and execution statistics.

LANGUAGE: json
CODE:
{
  "id":"20140108_110629_00011_dk5x2",
  "infoUri":"http://localhost:8001/v1/query/20140108_110629_00011_dk5x2",
  "columns":[
    {
      "name":"name",
      "type":"varchar"
    }
  ],
  "data":[
    ["4165@domU-12-31-39-0F-CC-72"]
  ],
  "stats":{
    "state":"FINISHED",
    "scheduled":true,
    "nodes":1,
    "totalSplits":2,
    "queuedSplits":0,
    "runningSplits":0,
    "completedSplits":2,
    "cpuTimeMillis":1,
    "wallTimeMillis":4,
    "processedRows":1,
    "processedBytes":27,
    "rootStage":{
      "stageId":"1",
      "state":"FINISHED",
      "done":true,
      "nodes":1,
      "totalSplits":1,
      "queuedSplits":0,
      "runningSplits":0,
      "completedSplits":1,
      "cpuTimeMillis":0,
      "wallTimeMillis":0,
      "processedRows":1,
      "processedBytes":32,
      "subStages":[
        {
          "stageId":"1",
          "state":"FINISHED",
          "done":true,
          "nodes":1,
          "totalSplits":1,
          "queuedSplits":0,
          "runningSplits":0,
          "completedSplits":1,
          "cpuTimeMillis":0,
          "wallTimeMillis":4,
          "processedRows":1,
          "processedBytes":27,
          "subStages":[]
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Referencing Pull Request in reStructuredText
DESCRIPTION: Demonstrates how to reference a pull request using reStructuredText syntax in the context of mentioning a CPU regression.

LANGUAGE: rst
CODE:
:pr:`16027`

----------------------------------------

TITLE: Calculating Quantile at Value
DESCRIPTION: Returns the approximate quantile (between 0 and 1) for a given value in the T-digest distribution.

LANGUAGE: sql
CODE:
quantile_at_value(tdigest<double>, value) -> double

----------------------------------------

TITLE: Demonstrating GROUPING SETS, CUBE, and ROLLUP in Presto 0.174
DESCRIPTION: This snippet shows examples of GROUPING SETS, CUBE, and ROLLUP clauses, which have improved parallelism in this release.

LANGUAGE: SQL
CODE:
SELECT column1, column2, SUM(column3)
FROM table_name
GROUP BY GROUPING SETS ((column1, column2), (column1), (column2), ());

SELECT column1, column2, SUM(column3)
FROM table_name
GROUP BY CUBE (column1, column2);

SELECT column1, column2, SUM(column3)
FROM table_name
GROUP BY ROLLUP (column1, column2);

----------------------------------------

TITLE: Illustrating New Geospatial Aggregation Functions in SQL
DESCRIPTION: Shows the usage of newly added geospatial aggregation functions convex_hull_agg and geometry_union_agg.

LANGUAGE: SQL
CODE:
SELECT convex_hull_agg(geometry), geometry_union_agg(geometry) FROM geospatial_data

----------------------------------------

TITLE: Database Resource Group Setup SQL
DESCRIPTION: SQL commands for setting up resource groups and selectors in the database management system.

LANGUAGE: sql
CODE:
INSERT INTO resource_groups_global_properties (name, value) VALUES ('cpu_quota_period', '1h');

INSERT INTO resource_groups (name, soft_memory_limit, hard_concurrency_limit, max_queued, scheduling_policy, jmx_export, environment) VALUES ('global', '80%', 100, 1000, 'weighted', true, 'test_environment');

----------------------------------------

TITLE: Describing Output of a CREATE TABLE AS Query in Presto
DESCRIPTION: This example demonstrates preparing a CREATE TABLE AS query and describing its output, which shows the row count of the created table.

LANGUAGE: sql
CODE:
PREPARE my_create FROM
CREATE TABLE foo AS SELECT * FROM nation

LANGUAGE: sql
CODE:
DESCRIBE OUTPUT my_create;

LANGUAGE: none
CODE:
 Column Name | Catalog | Schema | Table |  Type  | Type Size | Aliased
-------------+---------+--------+-------+--------+-----------+---------
 rows        |         |        |       | bigint |         8 | false
(1 row)

----------------------------------------

TITLE: Displaying Schema Output in TPCH Connector
DESCRIPTION: This code block shows the output of the 'SHOW SCHEMAS FROM tpch;' query, listing all available schemas in the TPCH connector, including various scale factors and special schemas.

LANGUAGE: none
CODE:
       Schema
--------------------
 information_schema
 sf1
 sf100
 sf1000
 sf10000
 sf100000
 sf300
 sf3000
 sf30000
 tiny
(10 rows)

----------------------------------------

TITLE: Enabling ORC Bloom Filters in Hive Connector
DESCRIPTION: Enables ORC bloom filters for predicate pushdown in the Hive connector using either the configuration property or session property.

LANGUAGE: Properties
CODE:
hive.orc.bloom-filters.enabled=true

LANGUAGE: SQL
CODE:
SET SESSION orc_bloom_filters_enabled = true;

----------------------------------------

TITLE: Inserting Data into Black Hole Table
DESCRIPTION: Example of inserting data into a Black Hole connector table. Note that inserted data is discarded.

LANGUAGE: sql
CODE:
INSERT INTO blackhole.test.nation
SELECT * FROM tpch.tiny.nation;

----------------------------------------

TITLE: Basic T-Digest Merging Function
DESCRIPTION: Merges multiple T-digest inputs into a single T-digest structure, preserving precision across combinations.

LANGUAGE: sql
CODE:
merge(tdigest<double>) -> tdigest<double>

----------------------------------------

TITLE: Using UUID Function in SQL
DESCRIPTION: New standard UUID function that returns a unique identifier. Changed from VARCHAR to UUID return type.

LANGUAGE: sql
CODE:
CAST(UUID() AS VARCHAR)

----------------------------------------

TITLE: Delta Lake Case-Sensitive Partitions Configuration
DESCRIPTION: Configuration parameter to enable case-sensitive partition column names in Delta connector. Defaults to true.

LANGUAGE: properties
CODE:
delta.case-sensitive-partitions-enabled=true

----------------------------------------

TITLE: Configuring Password Authenticator Properties in Presto
DESCRIPTION: Example configuration for password authenticator properties file showing how to specify the authenticator name and custom properties.

LANGUAGE: properties
CODE:
password-authenticator.name=custom-password-authenticator
custom-property1=custom-value1
custom-property2=custom-value2

----------------------------------------

TITLE: Adding Geometric Mean Function in Presto
DESCRIPTION: Adds a new function 'geometric_mean' to calculate the geometric mean of a set of numbers.

LANGUAGE: SQL
CODE:
Add :func:`!geometric_mean` function.

----------------------------------------

TITLE: SQL Function References
DESCRIPTION: References to SQL functions mentioned in release notes including min_by, max_by, corr, covar_samp, regr_intercept, regr_slope, bing_tiles_around, convex_hull_agg, and geometry_union_agg

LANGUAGE: SQL
CODE:
min_by()
max_by()
corr()
covar_samp()
regr_intercept()
regr_slope()
bing_tiles_around()
convex_hull_agg()
geometry_union_agg()

----------------------------------------

TITLE: Configuring Aggregation Partitioning Merging Strategy in Presto
DESCRIPTION: A new session property 'aggregation_partitioning_merging_strategy' has been added to configure the partition merging strategy when adding exchange around the aggregation node.

LANGUAGE: SQL
CODE:
SET SESSION aggregation_partitioning_merging_strategy = 'strategy_name';

----------------------------------------

TITLE: Using UUID Function in SQL
DESCRIPTION: Demonstrates the usage of the new uuid() function in SQL queries. This function returns a unique identifier of type UUID.

LANGUAGE: sql
CODE:
SELECT uuid();

----------------------------------------

TITLE: Fixing Date Format and Parse Functions in Presto SQL
DESCRIPTION: Fixes the '%k' specifier in date_format() and date_parse() functions to use '0' instead of '24' for the midnight hour.

LANGUAGE: sql
CODE:
date_format(date, '%k')

LANGUAGE: sql
CODE:
date_parse(string, '%k')

----------------------------------------

TITLE: Configuring ORC Buffer Size in Presto Properties
DESCRIPTION: Configuration property for setting maximum ORC buffer size to manage memory usage when reading large varchar/varbinary columns. Default value is 8MB to reduce heap fragmentation and prevent OOM errors.

LANGUAGE: properties
CODE:
hive.orc.max-buffer-size=8MB

----------------------------------------

TITLE: Using Statement.cancel() in JDBC
DESCRIPTION: Demonstrates the usage of Statement.cancel() method for cancelling all types of statements in the JDBC driver.

LANGUAGE: java
CODE:
Statement statement = connection.createStatement();
// Execute statement
statement.cancel();

----------------------------------------

TITLE: Configuring JVM Settings for GC Diagnostics in Presto
DESCRIPTION: This code block provides a list of JVM flags to enable detailed garbage collection logging and diagnostics in Presto. These settings are helpful for identifying and troubleshooting GC-related performance issues.

LANGUAGE: none
CODE:
-XX:+PrintGCApplicationConcurrentTime
-XX:+PrintGCApplicationStoppedTime
-XX:+PrintGCCause
-XX:+PrintGCDateStamps
-XX:+PrintGCTimeStamps
-XX:+PrintGCDetails
-XX:+PrintReferenceGC
-XX:+PrintClassHistogramAfterFullGC
-XX:+PrintClassHistogramBeforeFullGC
-XX:PrintFLSStatistics=2
-XX:+PrintAdaptiveSizePolicy
-XX:+PrintSafepointStatistics
-XX:PrintSafepointStatisticsCount=1

----------------------------------------

TITLE: Basic JDBC Connection Example
DESCRIPTION: Example of establishing a basic JDBC connection to Presto using DriverManager.

LANGUAGE: java
CODE:
String url = "jdbc:presto://example.net:8080/hive/sales";
Connection connection = DriverManager.getConnection(url, "test", null);

----------------------------------------

TITLE: Configuring Kudu Connector in Presto
DESCRIPTION: Example configuration file for the Kudu connector, specifying connector name, master addresses, and optional schema emulation settings.

LANGUAGE: properties
CODE:
connector.name=kudu
kudu.client.master-addresses=localhost
#kudu.schema-emulation.enabled=false
#kudu.schema-emulation.prefix=

----------------------------------------

TITLE: Using regexp_extract with Group Parameter
DESCRIPTION: Extracts a specific capturing group from the first match of a regular expression pattern in a string.

LANGUAGE: sql
CODE:
SELECT regexp_extract('1a 2b 14m', '(\d+)([a-z]+)', 2); -- 'a'

----------------------------------------

TITLE: Converting Between Binary and Big Endian Integers in Presto SQL
DESCRIPTION: Functions for converting between binary data and big endian integer representations for 32-bit and 64-bit values.

LANGUAGE: SQL
CODE:
to_big_endian_64(bigint) -> varbinary
from_big_endian_64(binary) -> bigint
to_big_endian_32(integer) -> varbinary
from_big_endian_32(binary) -> integer

----------------------------------------

TITLE: Displaying Prometheus Metrics in Presto C++
DESCRIPTION: Example of metrics data returned by the GET: v1/info/metrics endpoint in Prometheus Data format. This shows various counter metrics related to HTTP requests, memory management, and cache operations.

LANGUAGE: text
CODE:
# TYPE presto_cpp_num_http_request counter
presto_cpp_num_http_request{cluster="testing",worker=""} 0
# TYPE presto_cpp_num_http_request_error counter
presto_cpp_num_http_request_error{cluster="testing",worker=""} 0
# TYPE presto_cpp_memory_pushback_count counter
presto_cpp_memory_pushback_count{cluster="testing",worker=""} 0
# TYPE velox_driver_yield_count counter
velox_driver_yield_count{cluster="testing",worker=""} 0
# TYPE velox_cache_shrink_count counter
velox_cache_shrink_count{cluster="testing",worker=""} 0
# TYPE velox_memory_cache_num_stale_entries counter
velox_memory_cache_num_stale_entries{cluster="testing",worker=""} 0
# TYPE velox_arbitrator_requests_count counter
velox_arbitrator_requests_count{cluster="testing",worker=""} 0

----------------------------------------

TITLE: Adding and Renaming Columns in Hive Tables via Presto
DESCRIPTION: Enables support for adding new columns and renaming existing columns in Hive tables using Presto's ALTER TABLE statement.

LANGUAGE: SQL
CODE:
Support adding and renaming columns using :doc:`/sql/alter-table`.

----------------------------------------

TITLE: Setting Hive Metastore Headers in SQL
DESCRIPTION: Demonstrates how to set the new 'hive.metastore_headers' session property to configure headers for metastore operations in Hive.

LANGUAGE: SQL
CODE:
SET SESSION hive.metastore_headers = 'key1=value1,key2=value2';

----------------------------------------

TITLE: SQL System Table Reference - Analyze Properties
DESCRIPTION: System table storing connector-specific ANALYZE statement properties.

LANGUAGE: sql
CODE:
system.metadata.analyze_properties

----------------------------------------

TITLE: Data Size Parsing in Presto SQL
DESCRIPTION: Examples of using parse_presto_data_size() function to convert size strings with units (B, kB, MB, etc.) into their numeric byte equivalents.

LANGUAGE: sql
CODE:
SELECT parse_presto_data_size('1B'); -- 1
SELECT parse_presto_data_size('1kB'); -- 1024
SELECT parse_presto_data_size('1MB'); -- 1048576
SELECT parse_presto_data_size('2.3MB'); -- 2411724

----------------------------------------

TITLE: Configuring Time-to-Live Node Scheduling in Presto SQL
DESCRIPTION: Enable time-to-live based node scheduling for queries with execution time estimates by setting either the session property or configuration property to 'TTL'.

LANGUAGE: sql
CODE:
SET SESSION resource_aware_scheduling_strategy = 'TTL';

LANGUAGE: properties
CODE:
experimental.resource-aware-scheduling-strategy=TTL

----------------------------------------

TITLE: Row Comparison with IN
DESCRIPTION: Demonstrates use of IN operator for comparing values against lists and subqueries.

LANGUAGE: sql
CODE:
SELECT * FROM region WHERE name IN ('AMERICA', 'EUROPE');
SELECT * FROM region WHERE (column1, column2) IN ((NULL, 'value1'), ('value2', 'value3'));

----------------------------------------

TITLE: Configuration Properties
DESCRIPTION: New and updated configuration properties for query analysis timeout, partition caching, and table operations.

LANGUAGE: properties
CODE:
planner.query-analyzer-timeout
query_analyzer_timeout
hive.partition-cache-column-count-limit
hive.metastore.thrift.delete-files-on-table-drop
hive.insert-existing-partitions-behavior
spark.retry-on-out-of-memory-broadcast-join-enabled

----------------------------------------

TITLE: Querying PostgreSQL Table Data in Presto
DESCRIPTION: Demonstrates how to select all data from a PostgreSQL table using a SELECT statement in Presto.

LANGUAGE: sql
CODE:
SELECT * FROM postgresql.web.clicks;

----------------------------------------

TITLE: Enabling HTTP Request Logging in Presto
DESCRIPTION: Configuration settings to enable HTTP request logging in Presto's config.properties file. This helps diagnose protocol-related issues by logging HTTP requests.

LANGUAGE: properties
CODE:
http-server.log.enabled=true
http-server.log.path=<request_log_file_path>

----------------------------------------

TITLE: Fully Qualified Table Analysis
DESCRIPTION: Example demonstrating analysis of a table using fully qualified name with catalog and schema.

LANGUAGE: sql
CODE:
ANALYZE hive.default.stores;

----------------------------------------

TITLE: Generating Pseudo-Random UUID in Presto SQL
DESCRIPTION: The uuid() function returns a pseudo-randomly generated UUID (type 4). This function takes no parameters and can be used to generate unique identifiers in Presto queries.

LANGUAGE: SQL
CODE:
uuid() -> uuid

----------------------------------------

TITLE: Adding Redis HBO Provider Dependency to Presto Server
DESCRIPTION: Maven dependency configuration to include the Redis HBO Provider in the Presto server. This should be added to the dependencies section in presto-server/pom.xml.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>com.facebook.presto</groupId>
    <artifactId>redis-hbo-provider</artifactId>
    <version>${project.version}</version>
    <type>zip</type>
    <scope>provided</scope>
</dependency>

----------------------------------------

TITLE: Installing Homebrew on Intel Mac
DESCRIPTION: Command to install Homebrew package manager on an Intel Mac. This is a prerequisite for installing Presto.

LANGUAGE: bash
CODE:
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

----------------------------------------

TITLE: Dropping a Schema with IF EXISTS Clause in Presto SQL
DESCRIPTION: Shows how to drop the 'sales' schema if it exists, using the IF EXISTS clause to prevent errors if the schema is not present.

LANGUAGE: SQL
CODE:
DROP SCHEMA IF EXISTS sales

----------------------------------------

TITLE: Configuring Pinot Connector in Presto
DESCRIPTION: Example configuration for the Pinot connector in Presto, specifying the connector name and controller URLs.

LANGUAGE: properties
CODE:
connector.name=pinot
pinot.controller-urls=controller_host1:9000,controller_host2:9000

----------------------------------------

TITLE: Configuring Memory Connector Properties
DESCRIPTION: Configuration file setup for the Memory connector, specifying the connector name and maximum data per node limit.

LANGUAGE: none
CODE:
connector.name=memory
memory.max-data-per-node=128MB

----------------------------------------

TITLE: GROUP BY with Maps of Structural Types in Presto SQL
DESCRIPTION: This change extends GROUP BY functionality to support maps of structural types, allowing for more complex grouping operations in queries.

LANGUAGE: sql
CODE:
GROUP BY map_column

----------------------------------------

TITLE: Listing Grants for Current User on Specific Table in Presto SQL
DESCRIPTION: This example demonstrates how to use the SHOW GRANTS command to list the grants for the current user on a specific table named 'orders' in the current catalog.

LANGUAGE: sql
CODE:
SHOW GRANTS ON TABLE orders;

----------------------------------------

TITLE: Inserting a Single Row with Values in Presto SQL
DESCRIPTION: Shows how to insert a single row with specific values into the 'cities' table.

LANGUAGE: sql
CODE:
INSERT INTO cities VALUES (1, 'San Francisco');

----------------------------------------

TITLE: Querying Row Count in TPCH Connector
DESCRIPTION: This SQL query demonstrates how to count the number of rows in a specific table ('customer') within a particular schema ('sf1') of the TPCH connector.

LANGUAGE: sql
CODE:
SELECT COUNT(*) FROM tpch.sf1.customer;

----------------------------------------

TITLE: Frame Types Comparison in Presto SQL
DESCRIPTION: Illustrates the differences between ROWS, RANGE, and GROUPS frame types using ARRAY_AGG window function.

LANGUAGE: sql
CODE:
SELECT
    ARRAY_AGG(v) OVER (
        ORDER BY k ASC ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING
    )
FROM (
    VALUES (1, 'a'), (1, 'b'), (3, 'c'), (3, 'd'), (5, 'e')
) t(k, v);

SELECT
    ARRAY_AGG(v) OVER (
        ORDER BY k ASC RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING
    )
FROM (
    VALUES (1, 'a'), (1, 'b'), (3, 'c'), (3, 'd'), (5, 'e')
) t(k, v);

SELECT
    ARRAY_AGG(v) OVER (
        ORDER BY k ASC GROUPS BETWEEN 1 PRECEDING AND 1 FOLLOWING
    )
FROM (
    VALUES (1, 'a'), (1, 'b'), (3, 'c'), (3, 'd'), (5, 'e')
) t(k, v);

----------------------------------------

TITLE: S3 Security Mapping JSON Configuration
DESCRIPTION: Example JSON configuration file for AWS S3 security mappings showing role/credentials mapping for different users.

LANGUAGE: json
CODE:
{
  "mappings": [
    {
      "user": "admin",
      "accessKey": "AKIAxxxaccess",
      "secretKey": "iXbXxxxsecret"
    },
    {
      "user": "analyst|scientist", 
      "iamRole": "arn:aws:iam::123456789101:role/analyst_and_scientist_role"
    },
    {
      "iamRole": "arn:aws:iam::123456789101:role/default"
    }
  ]
}

----------------------------------------

TITLE: Creating Maps from Arrays using map Function in SQL
DESCRIPTION: Introduces the map function to create a map from arrays of keys and values in Presto SQL.

LANGUAGE: SQL
CODE:
SELECT map(ARRAY['a', 'b'], ARRAY[1, 2])

----------------------------------------

TITLE: Configuring Query Stage Count Limit in Presto
DESCRIPTION: Sets the maximum number of stages allowed in a query. The default is 100 and can be adjusted using the query.max-stage-count configuration property or the query_max_stage_count session property.

LANGUAGE: SQL
CODE:
SET SESSION query_max_stage_count = 150;

----------------------------------------

TITLE: Renaming Tables in Presto SQL
DESCRIPTION: Examples of renaming tables using the ALTER TABLE statement in Presto, including conditional renaming with IF EXISTS clause.

LANGUAGE: sql
CODE:
ALTER TABLE users RENAME TO people;

LANGUAGE: sql
CODE:
ALTER TABLE IF EXISTS users RENAME TO people;

----------------------------------------

TITLE: Configuring Presto Connection String in Superset
DESCRIPTION: SQLAlchemy URI format for connecting Superset to a Presto database. The connection string requires the hostname, port, and database name parameters.

LANGUAGE: sql
CODE:
presto://{hostname}:{port}/{database}

LANGUAGE: sql
CODE:
presto://<Presto-IP-address>:8080/system

----------------------------------------

TITLE: Configuration and Function References in Presto 0.84
DESCRIPTION: References to specific configuration parameters and SQL functions mentioned in the release notes, including NaN handling in arrays, JOIN operations, node scheduler configuration, and system table queries.

LANGUAGE: sql
CODE:
NaN
JOIN
node-scheduler.location-aware-scheduling-enabled=false
COUNT(*)
information_schema
sys

----------------------------------------

TITLE: Rolling Sum of Order Prices by Day for Each Clerk in Presto SQL
DESCRIPTION: Shows how to use the sum() aggregate function as a window function to calculate a rolling sum of order prices by day for each clerk.

LANGUAGE: SQL
CODE:
SELECT clerk, orderdate, orderkey, totalprice,
       sum(totalprice) OVER (PARTITION BY clerk
                             ORDER BY orderdate) AS rolling_sum
FROM orders
ORDER BY clerk, orderdate, orderkey

----------------------------------------

TITLE: Update Status for Unshipped Orders
DESCRIPTION: Example showing how to update the status field to 'OVERDUE' for all purchase records that have a null ship_date.

LANGUAGE: sql
CODE:
UPDATE purchases SET status = 'OVERDUE' WHERE ship_date IS NULL;

----------------------------------------

TITLE: ANALYZE Statement Syntax in Presto SQL
DESCRIPTION: Defines the syntax for the ANALYZE statement in Presto. It allows for analyzing a table with optional connector-specific properties.

LANGUAGE: sql
CODE:
ANALYZE table_name [ WITH ( property_name = expression [, ...] ) ]

----------------------------------------

TITLE: Querying with LIMIT Clause in SQL
DESCRIPTION: Shows the traditional LIMIT clause for comparison with the new FETCH FIRST syntax.

LANGUAGE: SQL
CODE:
SELECT * FROM table_name LIMIT 3

----------------------------------------

TITLE: Configuring Oracle Connector Properties
DESCRIPTION: Basic configuration for the Oracle connector in Presto, including connection URL and credentials setup. This configuration file should be placed in etc/catalog directory with a .properties extension.

LANGUAGE: properties
CODE:
connector.name=oracle
# The correct syntax of the connection-url varies by Oracle version and
# configuration. The following example URL connects to an Oracle SID named
# "orcl".
# In some situations, the connection-url has to include the user and password.
# example: connection-url=jdbc:oracle:thin:user/password@example.net:1521:orcl
#
connection-url=jdbc:oracle:thin:@example.net:1521:orcl
connection-user=root
connection-password=secret

----------------------------------------

TITLE: Retrieving Presto C++ Worker Information
DESCRIPTION: Example of basic worker information returned by the GET: v1/info endpoint. This JSON response includes details about the worker's role, environment, version, and uptime.

LANGUAGE: text
CODE:
{"coordinator":false,"environment":"testing","nodeVersion":{"version":"testversion"},"starting":false,"uptime":"49.00s"}

----------------------------------------

TITLE: Implementing ConnectorMetadata Partition Commit
DESCRIPTION: Addition of commitPartition method to Metadata and ConnectorMetadata interfaces for managing partition commits when partitionCommitRequired is true.

LANGUAGE: java
CODE:
void commitPartition(ConnectorSession session, ConnectorOutputTableHandle tableHandle, ConnectorPartitioningHandle partitioningHandle)

----------------------------------------

TITLE: Array Type Reference in Presto
DESCRIPTION: Reference to array type documentation, related to performance improvements for array operations.

LANGUAGE: sql
CODE:
array_type

----------------------------------------

TITLE: Configuring Example HTTP Connector Properties
DESCRIPTION: Configuration properties for mounting the example-http connector as the example catalog. Requires setting the connector name and metadata URI that points to a JSON document containing table metadata and CSV file information.

LANGUAGE: none
CODE:
connector.name=example-http
metadata-uri=http://s3.amazonaws.com/presto-example/v1/example-metadata.json

----------------------------------------

TITLE: Configuring Nessie Catalog
DESCRIPTION: Basic configuration for setting up Iceberg with Nessie catalog

LANGUAGE: none
CODE:
connector.name=iceberg
iceberg.catalog.type=nessie
iceberg.catalog.warehouse=/tmp
iceberg.nessie.uri=https://localhost:19120/api/v1

----------------------------------------

TITLE: Using geometry_to_bing_tiles Function in SQL
DESCRIPTION: Reference to the geometry_to_bing_tiles function, which has been fixed to correctly handle geometries aligned with tile borders.

LANGUAGE: SQL
CODE:
geometry_to_bing_tiles(geometry)

----------------------------------------

TITLE: Referencing Presto Functions in SQL
DESCRIPTION: This snippet shows how to reference Presto functions in SQL queries. It includes examples of functions like levenshtein_distance, map_agg, and multimap_agg.

LANGUAGE: sql
CODE:
SELECT levenshtein_distance(col1, col2);
SELECT map_agg(key, value);
SELECT multimap_agg(key, value);

----------------------------------------

TITLE: Configuring SSL with Truststore for SQL Server Connection
DESCRIPTION: This example shows a connection string that uses a truststore for SSL certificate verification. It includes various SSL configuration properties such as truststore type, path, and password.

LANGUAGE: properties
CODE:
connection-url=jdbc:sqlserver://<host>:<port>;databaseName=<databaseName>;encrypt=true;trustServerCertificate=false;trustStoreType=PEM;hostNameInCertificate=hostname;trustStore=path/to/truststore.pem;trustStorePassword=password

----------------------------------------

TITLE: ALTER TABLE Syntax in Presto SQL
DESCRIPTION: Defines the complete syntax for various ALTER TABLE operations in Presto, including renaming tables and columns, adding and dropping columns, managing constraints, and setting properties.

LANGUAGE: sql
CODE:
ALTER TABLE [ IF EXISTS ] name RENAME TO new_name
ALTER TABLE [ IF EXISTS ] name ADD COLUMN [ IF NOT EXISTS ] column_name data_type [ COMMENT comment ] [ WITH ( property_name = expression [, ...] ) ]
ALTER TABLE [ IF EXISTS ] name DROP COLUMN column_name
ALTER TABLE [ IF EXISTS ] name RENAME COLUMN [ IF EXISTS ] column_name TO new_column_name
ALTER TABLE [ IF EXISTS ] name ADD [ CONSTRAINT constraint_name ] { PRIMARY KEY | UNIQUE } ( { column_name [, ...] } ) [ { ENABLED | DISABLED } ] [ [ NOT ] RELY ] [ [ NOT ] ENFORCED } ]
ALTER TABLE [ IF EXISTS ] name DROP CONSTRAINT [ IF EXISTS ] constraint_name
ALTER TABLE [ IF EXISTS ] name ALTER [ COLUMN ] column_name { SET | DROP } NOT NULL
ALTER TABLE [ IF EXISTS ] name SET PROPERTIES (property_name=value, [, ...])

----------------------------------------

TITLE: Setting Worker Shutdown State via HTTP PUT
DESCRIPTION: HTTP PUT request to set a worker's state to SHUTTING_DOWN, enabling graceful shutdown where the worker stops accepting new tasks and exits after completing existing ones.

LANGUAGE: http
CODE:
PUT /v1/info/state

LANGUAGE: json
CODE:
"SHUTTING_DOWN"

----------------------------------------

TITLE: Task Parallelism Configuration
DESCRIPTION: Configuration parameters and session properties for controlling parallel execution of join probes, hash builds and aggregations

LANGUAGE: properties
CODE:
task.default-concurrency
task_default_concurrency
task_join_concurrency
task_hash_build_concurrency
task_aggregation_concurrency

----------------------------------------

TITLE: SQL Function Reference
DESCRIPTION: Reference to the geometry_to_bing_tiles geospatial function that received correctness fixes.

LANGUAGE: sql
CODE:
geometry_to_bing_tiles()

----------------------------------------

TITLE: Creating Tables in PostgreSQL via Presto
DESCRIPTION: SQL commands to create new tables in PostgreSQL using Presto, including creating a table with a specific schema and creating a table from a SELECT statement.

LANGUAGE: sql
CODE:
CREATE TABLE postgresql.public.test_integer ( id INTEGER );
CREATE TABLE postgresql.public.new_table AS SELECT * FROM postgresql.public.renamed_table;

----------------------------------------

TITLE: Importing Certificate to Java Truststore for Presto CLI
DESCRIPTION: This command uses keytool to import a certificate into a custom Java Truststore for the Presto CLI. It allows the CLI to trust the Presto coordinator when connecting via HTTPS.

LANGUAGE: none
CODE:
$ keytool -import -v -trustcacerts -alias presto_trust -file presto_certificate.cer -keystore presto_trust.jks -keypass <truststore_pass>

----------------------------------------

TITLE: Describing MySQL Table Columns in Presto
DESCRIPTION: SQL queries to describe columns of a MySQL table using Presto.

LANGUAGE: sql
CODE:
DESCRIBE mysql.web.clicks;
SHOW COLUMNS FROM mysql.web.clicks;

----------------------------------------

TITLE: Creating a Summarized View in Presto SQL
DESCRIPTION: Shows how to create a view 'orders_by_date' that summarizes data from the 'orders' table, grouping by date and calculating sum of prices.

LANGUAGE: sql
CODE:
CREATE VIEW orders_by_date AS
SELECT orderdate, sum(totalprice) AS price
FROM orders
GROUP BY orderdate

----------------------------------------

TITLE: Configuring Partial Aggregation History in Presto SQL
DESCRIPTION: Adds support to split aggregates into partial and final based on partial aggregation statistics. This feature is configurable via a session property.

LANGUAGE: SQL
CODE:
SET SESSION use_partial_aggregation_history = true;

----------------------------------------

TITLE: Fixed JOIN Operations with GROUP BY and DISTINCT
DESCRIPTION: Bug fix for RIGHT and FULL OUTER JOIN operations when combined with GROUP BY, DISTINCT, or similar operations. The fix specifically addresses cases where columns from the left relation are referenced both in the join clause and the grouping/distinct operations.

LANGUAGE: sql
CODE:
RIGHT JOIN
FULL OUTER JOIN
GROUP BY
DISTINCT

----------------------------------------

TITLE: Replacing JSON to VARCHAR Cast in SQL
DESCRIPTION: Demonstrates how to replace the deprecated cast from JSON to VARCHAR using the new JSON_FORMAT function in Presto SQL.

LANGUAGE: SQL
CODE:
JSON_FORMAT(x)

----------------------------------------

TITLE: Restoring Legacy Log Function in SQL
DESCRIPTION: Shows how to restore the deprecated log() function using a configuration option. This change was made to align with SQL standards.

LANGUAGE: SQL
CODE:
deprecated.legacy-log-function

----------------------------------------

TITLE: bcrypt Password Format Example for Presto
DESCRIPTION: This snippet demonstrates the format of a bcrypt-hashed password in the password file. bcrypt passwords start with '$2y$' and must use a minimum cost of 8.

LANGUAGE: none
CODE:
test:$2y$10$BqTb8hScP5DfcpmHo5PeyugxHz5Ky/qf3wrpD7SNm8sWuA3VlGqsa

----------------------------------------

TITLE: Describing PostgreSQL Table Columns in Presto
DESCRIPTION: Shows two ways to list columns of a PostgreSQL table using DESCRIBE and SHOW COLUMNS commands in Presto.

LANGUAGE: sql
CODE:
DESCRIBE postgresql.web.clicks;
SHOW COLUMNS FROM postgresql.web.clicks;

----------------------------------------

TITLE: Basic SQL Type Examples
DESCRIPTION: Examples of SQL type declarations and literal values for common Presto data types

LANGUAGE: sql
CODE:
-- Numeric types
DECIMAL(10,3)
DECIMAL '10.3'

-- String types
varchar(20)
'Hello winter !'
U&'Hello winter \2603 !'

-- Date/Time types
DATE '2001-08-22'
TIMESTAMP '2001-08-22 03:04:05.321'

-- Structural types
ARRAY[1, 2, 3]
MAP(ARRAY['foo', 'bar'], ARRAY[1, 2])
CAST(ROW(1, 2.0) AS ROW(x BIGINT, y DOUBLE))

----------------------------------------

TITLE: Adding Murmur3 Hash Function in SQL
DESCRIPTION: Introduces a new UDF 'murmur3_x64_128' that computes a hash equivalent to MurmurHash3_x64_128 (Murmur3F) in C++.

LANGUAGE: SQL
CODE:
SELECT murmur3_x64_128(column_name) FROM table_name;

----------------------------------------

TITLE: Configuring Node Properties in Presto
DESCRIPTION: Basic node.properties configuration for Presto server defining environment, node ID, and data directory location.

LANGUAGE: none
CODE:
node.environment=production
node.id=ffffffff-ffff-ffff-ffff-ffffffffffff
node.data-dir=/var/presto/data

----------------------------------------

TITLE: Configuring JMX Connector with Periodic Dumps in Presto
DESCRIPTION: Extended configuration for the JMX connector in Presto, including settings for periodic dumps of JMX information. This setup allows for storing historical JMX data in memory.

LANGUAGE: none
CODE:
connector.name=jmx
jmx.dump-tables=java.lang:type=Runtime,com.facebook.presto.execution.scheduler:name=NodeScheduler
jmx.dump-period=10s
jmx.max-entries=86400

----------------------------------------

TITLE: Updating ConnectorIndex in Presto SPI
DESCRIPTION: Code change required for existing connectors to adapt to the new ConnectorIndex API, which now returns ConnectorPageSource instead of RecordSet.

LANGUAGE: Java
CODE:
return new RecordPageSource(recordSet);

----------------------------------------

TITLE: Creating Indexed Accumulo Table in Presto
DESCRIPTION: SQL statement to create an Accumulo table with indexed columns in Presto.

LANGUAGE: sql
CODE:
CREATE TABLE myschema.scientists (
  recordkey VARCHAR,
  name VARCHAR,
  age BIGINT,
  birthday DATE
)
WITH (
  serializer = 'string',
  index_columns='name,age,birthday'
);

----------------------------------------

TITLE: HMAC Hashing in Presto SQL
DESCRIPTION: HMAC (Hash-based Message Authentication Code) functions for various hash algorithms including MD5, SHA1, SHA256, and SHA512.

LANGUAGE: SQL
CODE:
hmac_md5(binary, key) -> varbinary
hmac_sha1(binary, key) -> varbinary
hmac_sha256(binary, key) -> varbinary
hmac_sha512(binary, key) -> varbinary

----------------------------------------

TITLE: Altering Verifier Queries Table Schema in SQL
DESCRIPTION: SQL commands to modify the verifier_queries table structure by adding new columns for test and control pre/post queries as part of the Verifier enhancement.

LANGUAGE: sql
CODE:
ALTER TABLE verifier_queries ADD COLUMN test_postqueries text;
ALTER TABLE verifier_queries ADD COLUMN test_prequeries text;
ALTER TABLE verifier_queries ADD COLUMN control_postqueries text;
ALTER TABLE verifier_queries ADD COLUMN control_prequeries text;

----------------------------------------

TITLE: Basic UPDATE Statement Syntax in Presto SQL
DESCRIPTION: Defines the fundamental syntax structure for UPDATE statements in Presto SQL, showing the basic components including table name, column assignments, and WHERE clause.

LANGUAGE: none
CODE:
UPDATE table_name SET [ column = expression [, ... ] ] [ WHERE condition ]

----------------------------------------

TITLE: Altering Tables in PostgreSQL via Presto
DESCRIPTION: SQL commands to alter tables in PostgreSQL using Presto, including adding columns, dropping columns, and renaming columns and tables.

LANGUAGE: sql
CODE:
ALTER TABLE postgresql.public.sample_table ADD COLUMN new_col INT;
ALTER TABLE postgresql.public.sample_table DROP COLUMN new_col;
ALTER TABLE postgresql.public.sample_table RENAME COLUMN is_active TO is_enabled;
ALTER TABLE postgresql.public.sample_table RENAME TO renamed_table;

----------------------------------------

TITLE: Retrieving Specific Task Information in JSON (Presto API)
DESCRIPTION: Example JSON response from GET /v1/task/{taskId} endpoint, showing detailed information about a specific task including outputBuffers, stats, and operator summaries. This response is used by Presto to coordinate queries.

LANGUAGE: json
CODE:
{
  "taskId" : "20140115_170528_00004_dk5x2.0.0",
  "version" : 42,
  "state" : "FINISHED",
  "self" : "http://10.193.207.128:8080/v1/task/20140115_170528_00004_dk5x2.0.0",
  "lastHeartbeat" : "2014-01-15T12:12:12.518-05:00",
  "outputBuffers" : {
    "state" : "FINISHED",
    "masterSequenceId" : 0,
    "pagesAdded" : 1,
    "buffers" : [ {
      "bufferId" : "out",
      "finished" : true,
      "bufferedPages" : 0,
      "pagesSent" : 1
    } ]
  },
  "noMoreSplits" : [ "8" ],
  "stats" : {
    "createTime" : "2014-01-15T12:12:08.520-05:00",
    "startTime" : "2014-01-15T12:12:08.526-05:00",
    "endTime" : "2014-01-15T12:12:12.518-05:00",
    "elapsedTime" : "4.00s",
    "queuedTime" : "6.39ms",
    "totalDrivers" : 1,
    "queuedDrivers" : 0,
    "runningDrivers" : 0,
    "completedDrivers" : 1,
    "memoryReservation" : "174.76kB",
    "totalScheduledTime" : "4.19ms",
    "totalCpuTime" : "4.09ms",
    "totalBlockedTime" : "29.50ms",
    "rawInputDataSize" : "10.90kB",
    "rawInputPositions" : 154,
    "processedInputDataSize" : "10.90kB",
    "processedInputPositions" : 154,
    "outputDataSize" : "10.90kB",
    "outputPositions" : 154,
    "pipelines" : [ {
      "inputPipeline" : true,
      "outputPipeline" : true,
      "totalDrivers" : 1,
      "queuedDrivers" : 0,
      "runningDrivers" : 0,
      "completedDrivers" : 1,
      "memoryReservation" : "0B",
      "queuedTime" : {
        "maxError" : 0.0,
        "count" : 1.0,
        "total" : 5857000.0,
        "p01" : 5857000,
        "p05" : 5857000,
        "p10" : 5857000,
        "p25" : 5857000,
        "p50" : 5857000,
        "p75" : 5857000,
        "p90" : 5857000,
        "p95" : 5857000,
        "p99" : 5857000,
        "min" : 5857000,
        "max" : 5857000
      },
      "elapsedTime" : {
        "maxError" : 0.0,
        "count" : 1.0,
        "total" : 4.1812E7,
        "p01" : 41812000,
        "p05" : 41812000,
        "p10" : 41812000,
        "p25" : 41812000,
        "p50" : 41812000,
        "p75" : 41812000,
        "p90" : 41812000,
        "p95" : 41812000,
        "p99" : 41812000,
        "min" : 41812000,
        "max" : 41812000
      },
      "totalScheduledTime" : "4.19ms",
      "totalCpuTime" : "4.09ms",
      "totalBlockedTime" : "29.50ms",
      "rawInputDataSize" : "10.90kB",
      "rawInputPositions" : 154,
      "processedInputDataSize" : "10.90kB",
      "processedInputPositions" : 154,
      "outputDataSize" : "10.90kB",
      "outputPositions" : 154,
      "operatorSummaries" : [ {
        "operatorId" : 0,
        "operatorType" : "ExchangeOperator",
        "addInputCalls" : 0,
        "addInputWall" : "0.00ns",
        "addInputCpu" : "0.00ns",
        "addInputUser" : "0.00ns",
        "inputDataSize" : "10.90kB",
        "inputPositions" : 154,
        "getOutputCalls" : 1,
        "getOutputWall" : "146.00us",
        "getOutputCpu" : "137.90us",
        "getOutputUser" : "0.00ns",
        "outputDataSize" : "10.90kB",
        "outputPositions" : 154,
        "blockedWall" : "29.50ms",
        "finishCalls" : 0,
        "finishWall" : "0.00ns",
        "finishCpu" : "0.00ns",
        "finishUser" : "0.00ns",
        "memoryReservation" : "0B",
        "info" : {
          "bufferedBytes" : 0,
          "averageBytesPerRequest" : 11158,
          "bufferedPages" : 0,
          "pageBufferClientStatuses" : [ {
            "uri" : "http://10.193.207.128:8080/v1/task/20140115_170528_00004_dk5x2.1.0/results/ab68e201-3878-4b21-b6b9-f6658ddc408b",
            "state" : "closed",
            "lastUpdate" : "2014-01-15T12:12:08.562-05:00",
            "pagesReceived" : 1,
            "requestsScheduled" : 3,
            "requestsCompleted" : 3,
            "httpRequestState" : "queued"
          } ]
        }
      }, {
        "operatorId" : 1,
        "operatorType" : "FilterAndProjectOperator",
        "addInputCalls" : 1,
        "addInputWall" : "919.00us",
        "addInputCpu" : "919.38us",
        "addInputUser" : "0.00ns",
        "inputDataSize" : "10.90kB",
        "inputPositions" : 154,
        "getOutputCalls" : 2,
        "getOutputWall" : "128.00us",
        "getOutputCpu" : "128.64us",
        "getOutputUser" : "0.00ns",
        "outputDataSize" : "10.45kB",
        "outputPositions" : 154,
        "blockedWall" : "0.00ns",
        "finishCalls" : 5,
        "finishWall" : "258.00us",
        "finishCpu" : "253.19us",
        "finishUser" : "0.00ns",
        "memoryReservation" : "0B"
      }, {
        "operatorId" : 2,
        "operatorType" : "OrderByOperator",
        "addInputCalls" : 1,
        "addInputWall" : "438.00us",
        "addInputCpu" : "439.18us",
        "addInputUser" : "0.00ns",
        "inputDataSize" : "10.45kB",
        "inputPositions" : 154,
        "getOutputCalls" : 4,
        "getOutputWall" : "869.00us",
        "getOutputCpu" : "831.85us",
        "getOutputUser" : "0.00ns",
        "outputDataSize" : "10.45kB",
        "outputPositions" : 154,
        "blockedWall" : "0.00ns",
        "finishCalls" : 4,
        "finishWall" : "808.00us",
        "finishCpu" : "810.18us",
        "finishUser" : "0.00ns",
        "memoryReservation" : "174.76kB"
      }, {
        "operatorId" : 3,
        "operatorType" : "FilterAndProjectOperator",
        "addInputCalls" : 1,
        "addInputWall" : "166.00us",
        "addInputCpu" : "166.66us",
        "addInputUser" : "0.00ns",
        "inputDataSize" : "10.45kB",
        "inputPositions" : 154,
        "getOutputCalls" : 5,
        "getOutputWall" : "305.00us",
        "getOutputCpu" : "241.14us",
        "getOutputUser" : "0.00ns",
        "outputDataSize" : "10.90kB",
        "outputPositions" : 154,
        "blockedWall" : "0.00ns",
        "finishCalls" : 2,
        "finishWall" : "70.00us",
        "finishCpu" : "71.02us",
        "finishUser" : "0.00ns",
        "memoryReservation" : "0B"
      }, {
        "operatorId" : 4,
        "operatorType" : "TaskOutputOperator",
        "addInputCalls" : 1,
        "addInputWall" : "50.00us",
        "addInputCpu" : "51.03us",
        "addInputUser" : "0.00ns",
        "inputDataSize" : "10.90kB",
        "inputPositions" : 154,
        "getOutputCalls" : 0,
        "getOutputWall" : "0.00ns",
        "getOutputCpu" : "0.00ns",
        "getOutputUser" : "0.00ns",
        "outputDataSize" : "10.90kB",
        "outputPositions" : 154,
        "blockedWall" : "0.00ns",
        "finishCalls" : 1,
        "finishWall" : "35.00us",
        "finishCpu" : "35.39us",
        "finishUser" : "0.00ns",
        "memoryReservation" : "0B"
      } ],
      "drivers" : [ ]
    } ]
  },
  "failures" : [ ],
  "outputs" : { }
}

----------------------------------------

TITLE: Setting Query Max Stage Count in Presto Configuration
DESCRIPTION: Demonstrates how to set the maximum number of stages in a query using the query.max-stage-count configuration property. This setting limits the complexity of queries and can be adjusted to balance between query capability and resource usage.

LANGUAGE: properties
CODE:
query.max-stage-count=100

----------------------------------------

TITLE: Time Zone Conversion Example in Presto SQL
DESCRIPTION: Demonstrates converting timestamps between different time zones using the AT TIME ZONE operator.

LANGUAGE: sql
CODE:
SELECT timestamp '2012-10-31 01:00 UTC';
SELECT timestamp '2012-10-31 01:00 UTC' AT TIME ZONE 'America/Los_Angeles';

----------------------------------------

TITLE: Configuring Redis Connector Properties
DESCRIPTION: Basic configuration properties for connecting Presto to Redis server, specifying the connector name, table names, and server location.

LANGUAGE: properties
CODE:
connector.name=redis
redis.table-names=schema1.table1,schema1.table2
redis.nodes=host:port

----------------------------------------

TITLE: SQL Function Usage Examples
DESCRIPTION: Examples of SQL functions mentioned in the release notes including split_to_map indexing, element_at for maps, and the new hamming_distance function.

LANGUAGE: sql
CODE:
split_to_map(...)[...]
coalesce(arg1, arg2, ...)
element_at(map_column, key)
hamming_distance(value1, value2)

----------------------------------------

TITLE: Querying Delta Lake Table by Path
DESCRIPTION: Direct querying of Delta Lake table using its location path instead of registered name.

LANGUAGE: sql
CODE:
SELECT * FROM sales."$path$"."s3://db-sa-datasets/presto/sales_data" LIMIT 200;

----------------------------------------

TITLE: MongoDB Cluster DNS Lookup
DESCRIPTION: Command to retrieve MongoDB cluster node hostnames using dig

LANGUAGE: bash
CODE:
dig srv _mongodb._tcp.<cluster-hostname>

----------------------------------------

TITLE: Reversing Binary Data in Presto SQL
DESCRIPTION: The reverse() function reverses the order of bytes in a binary value. It takes a single binary argument and returns a varbinary result.

LANGUAGE: SQL
CODE:
reverse(binary) -> varbinary

----------------------------------------

TITLE: Configuring Hive ORC Column Names in Presto
DESCRIPTION: Illustrates the configuration option for using column names when reading ORC files in the Hive connector. This setting has been fixed for empty ORC files.

LANGUAGE: properties
CODE:
hive.orc.use-column-names

----------------------------------------

TITLE: Encoding and Decoding URL-safe Base64 in Presto SQL
DESCRIPTION: The to_base64url() and from_base64url() functions convert between binary data and URL-safe base64 encoded strings. They use a modified base64 alphabet safe for use in URLs.

LANGUAGE: SQL
CODE:
to_base64url(binary) -> varchar
from_base64url(string) -> varbinary

----------------------------------------

TITLE: Casting Values in Presto SQL
DESCRIPTION: Functions for explicit type conversion in Presto. Includes cast() for direct type conversion and try_cast() for safe conversion that returns null on failure.

LANGUAGE: sql
CODE:
cast(value AS type) -> type

LANGUAGE: sql
CODE:
try_cast(value AS type) -> type

----------------------------------------

TITLE: SQL Function Reference - POSITION Expression Fix
DESCRIPTION: Fix for parsing expressions in the form of POSITION(x in (y))

LANGUAGE: sql
CODE:
POSITION(x in (y))

----------------------------------------

TITLE: Demonstrating Truncate Function in Presto SQL
DESCRIPTION: Examples showing how to use the truncate function with different decimal places, including negative values for truncating left of decimal point

LANGUAGE: sql
CODE:
truncate(REAL '12.333', -1) -> result is 10.0
truncate(REAL '12.333', 0)  -> result is 12.0
truncate(REAL '12.333', 1)  -> result is 12.3

----------------------------------------

TITLE: Using USE Statement in SQL
DESCRIPTION: Reference to the USE statement in SQL, which now correctly updates the prompt in the CLI after execution.

LANGUAGE: SQL
CODE:
USE schema_name

----------------------------------------

TITLE: Configuring Remote Task Error Duration in Presto
DESCRIPTION: Configuration property for setting the minimum error duration for remote tasks in Presto. This property is now ignored and will be removed in a future release.

LANGUAGE: properties
CODE:
query.remote-task.min-error-duration

----------------------------------------

TITLE: Creating Password File for Presto Authentication
DESCRIPTION: These commands demonstrate how to create a password file for Presto authentication using the htpasswd utility. It creates an empty file and then adds or updates a password for the user 'test' using bcrypt with a cost of 10.

LANGUAGE: none
CODE:
touch password.db
htpasswd -B -C 10 password.db test

----------------------------------------

TITLE: Using grouping Function in SQL
DESCRIPTION: Reference to the grouping function, which has received performance improvements in this release.

LANGUAGE: SQL
CODE:
grouping()

----------------------------------------

TITLE: Example Output of EXPLAIN ANALYZE in Presto SQL
DESCRIPTION: Demonstrates the output of an EXPLAIN ANALYZE command for a SELECT query with grouping. Shows CPU time, input/output rows, and execution plan details.

LANGUAGE: sql
CODE:
presto:sf1> EXPLAIN ANALYZE SELECT count(*), clerk FROM orders WHERE orderdate > date '1995-01-01' GROUP BY clerk;

                                              Query Plan
    -----------------------------------------------------------------------------------------------
    Fragment 1 [HASH]
        Cost: CPU 88.57ms, Input: 4000 rows (148.44kB), Output: 1000 rows (28.32kB)
        Output layout: [count, clerk]
        Output partitioning: SINGLE []
        - Project[] => [count:bigint, clerk:varchar(15)]
                Cost: 26.24%, Input: 1000 rows (37.11kB), Output: 1000 rows (28.32kB), Filtered: 0.00%
                Input avg.: 62.50 lines, Input std.dev.: 14.77%
            - Aggregate(FINAL)[clerk][$hashvalue] => [clerk:varchar(15), $hashvalue:bigint, count:bigint]
                    Cost: 16.83%, Output: 1000 rows (37.11kB)
                    Input avg.: 250.00 lines, Input std.dev.: 14.77%
                    count := "count"("count_8")
                - LocalExchange[HASH][$hashvalue] ("clerk") => clerk:varchar(15), count_8:bigint, $hashvalue:bigint
                        Cost: 47.28%, Output: 4000 rows (148.44kB)
                        Input avg.: 4000.00 lines, Input std.dev.: 0.00%
                    - RemoteSource[2] => [clerk:varchar(15), count_8:bigint, $hashvalue_9:bigint]
                            Cost: 9.65%, Output: 4000 rows (148.44kB)
                            Input avg.: 4000.00 lines, Input std.dev.: 0.00%

    Fragment 2 [tpch:orders:1500000]
        Cost: CPU 14.00s, Input: 818058 rows (22.62MB), Output: 4000 rows (148.44kB)
        Output layout: [clerk, count_8, $hashvalue_10]
        Output partitioning: HASH [clerk][$hashvalue_10]
        - Aggregate(PARTIAL)[clerk][$hashvalue_10] => [clerk:varchar(15), $hashvalue_10:bigint, count_8:bigint]
                Cost: 4.47%, Output: 4000 rows (148.44kB)
                Input avg.: 204514.50 lines, Input std.dev.: 0.05%
                Collisions avg.: 5701.28 (17569.93% est.), Collisions std.dev.: 1.12%
                count_8 := "count"(*)
            - ScanFilterProject[table = tpch:tpch:orders:sf1.0, originalConstraint = ("orderdate" > "$literal$date"(BIGINT '9131')), filterPredicate = ("orderdate" > "$literal$date"(BIGINT '9131'))] => [cler
                    Cost: 95.53%, Input: 1500000 rows (0B), Output: 818058 rows (22.62MB), Filtered: 45.46%
                    Input avg.: 375000.00 lines, Input std.dev.: 0.00%
                    $hashvalue_10 := "combine_hash"(BIGINT '0', COALESCE("$operator$hash_code"("clerk"), 0))
                    orderdate := tpch:orderdate
                    clerk := tpch:clerk

----------------------------------------

TITLE: Pinot Connection Configuration Properties
DESCRIPTION: Configuration properties for Pinot connectivity including gRPC metadata customization, distinct count function override, and HTTPS enablement for various Pinot APIs.

LANGUAGE: properties
CODE:
pinot.extra-grpc-metadata
pinot.override-distinct-count-function
override_distinct_count_function
pinot.use-https-for-controller/broker/proxy

----------------------------------------

TITLE: Configuring Example HTTP Connector in Presto
DESCRIPTION: This snippet demonstrates how to configure the new Example HTTP connector in Presto. It shows the contents of the 'etc/catalog/example.properties' file, which mounts the 'example-http' connector as the 'example' catalog. The configuration specifies the connector name and the metadata URI for fetching table metadata and CSV file information.

LANGUAGE: properties
CODE:
connector.name=example-http
metadata-uri=http://s3.amazonaws.com/presto-example/v1/example-metadata.json

----------------------------------------

TITLE: Listing Grants on Specific Table in Presto SQL
DESCRIPTION: An example of using the SHOW GRANTS command to list the grants for the current user on a specific table named 'orders' in the current catalog.

LANGUAGE: sql
CODE:
SHOW GRANTS ON TABLE orders;

----------------------------------------

TITLE: Disabling SSL Encryption in SQL Server Connection
DESCRIPTION: This code snippet demonstrates how to disable SSL encryption in the SQL Server connection string using the 'encrypt' property. This may be necessary in certain environments where SSL is not required or available.

LANGUAGE: properties
CODE:
connection-url=jdbc:sqlserver://<host>:<port>;databaseName=<databaseName>;encrypt=false;

----------------------------------------

TITLE: Creating Table with Properties and Comments
DESCRIPTION: Creates a new table orders_by_date with a comment and ORC format specification, containing summarized order data grouped by date.

LANGUAGE: sql
CODE:
CREATE TABLE orders_by_date
COMMENT 'Summary of orders by date'
WITH (format = 'ORC')
AS
SELECT orderdate, sum(totalprice) AS price
FROM orders
GROUP BY orderdate

----------------------------------------

TITLE: SQL Query Example - Interval Year to Month
DESCRIPTION: Example showing the format of INTERVAL YEAR TO MONTH literal that was fixed for negative interval handling.

LANGUAGE: sql
CODE:
INTERVAL '-2-3' YEAR TO MONTH

----------------------------------------

TITLE: Making Presto CLI Executable in Bash
DESCRIPTION: This command changes the file permissions to make the Presto CLI executable.

LANGUAGE: bash
CODE:
chmod +x presto

----------------------------------------

TITLE: Example EXPLAIN ANALYZE Output in Presto SQL
DESCRIPTION: Demonstrates the output of an EXPLAIN ANALYZE command for a SELECT query with aggregation and filtering. Shows CPU time, input/output rows, and plan node details.

LANGUAGE: sql
CODE:
presto:sf1> EXPLAIN ANALYZE SELECT count(*), clerk FROM orders WHERE orderdate > date '1995-01-01' GROUP BY clerk;

----------------------------------------

TITLE: Dropping Table from Memory Connector
DESCRIPTION: SQL command to remove a table from the Memory connector.

LANGUAGE: sql
CODE:
DROP TABLE memory.default.nation;

----------------------------------------

TITLE: Retrieving Value at Quantile from Quantile Digest in Presto SQL
DESCRIPTION: This function returns the approximate percentile value from a quantile digest given a quantile between 0 and 1. It works with qdigests of type T, where T can be bigint, double, or real.

LANGUAGE: sql
CODE:
value_at_quantile(qdigest(T), quantile) -> T

----------------------------------------

TITLE: Querying Schema List in Presto SQL
DESCRIPTION: SQL command syntax for listing schemas from a catalog. Supports optional catalog specification and LIKE pattern matching for filtering schema names.

LANGUAGE: sql
CODE:
SHOW SCHEMAS [ FROM catalog ] [ LIKE pattern ]

----------------------------------------

TITLE: Defining Table of Contents for Presto Administration in reStructuredText
DESCRIPTION: This RST code snippet defines a table of contents for Presto administration documentation. It uses the toctree directive to create a nested list of links to various administration-related topics.

LANGUAGE: rst
CODE:
**************
Administration
**************

.. toctree::
    :maxdepth: 1

    admin/web-interface
    admin/tuning
    admin/properties
    admin/properties-session
    admin/spill
    admin/exchange-materialization
    admin/cte-materialization
    admin/resource-groups
    admin/session-property-managers
    admin/function-namespace-managers
    admin/dist-sort
    admin/verifier

----------------------------------------

TITLE: Time Travel Query for Iceberg Tables in Presto
DESCRIPTION: Shows how to use the new time travel syntax to query historical data in Iceberg tables using TIMESTAMP or VERSION.

LANGUAGE: SQL
CODE:
SELECT * FROM table FOR TIMESTAMP AS OF TIMESTAMP '2023-01-01 00:00:00';

LANGUAGE: SQL
CODE:
SELECT * FROM table FOR VERSION AS OF 123456789;

----------------------------------------

TITLE: Enabling HTTP Request Logging in Prestissimo Configuration
DESCRIPTION: Configuration setting to enable HTTP request logging in Prestissimo. This setting writes logs to the standard log, helping in diagnosing protocol-related issues.

LANGUAGE: none
CODE:
http-server.enable-access-log=true

----------------------------------------

TITLE: Enabling Optimized RCFile Reader in Hive
DESCRIPTION: Configuration settings to enable the experimental optimized RCFile reader functionality. Includes both configuration option and session property.

LANGUAGE: properties
CODE:
hive.optimized-reader.enabled
optimized_reader_enabled

----------------------------------------

TITLE: CREATE ROLE Syntax in Presto SQL
DESCRIPTION: The syntax for creating a new role in Presto. It allows specifying an optional admin for the role, which can be a user, another role, or the current user/role.

LANGUAGE: sql
CODE:
CREATE ROLE role_name
[ WITH ADMIN ( user | USER user | ROLE role | CURRENT_USER | CURRENT_ROLE ) ]

----------------------------------------

TITLE: Adding Redis HBO Provider Dependency to Presto Server POM
DESCRIPTION: Maven dependency configuration to include the Redis HBO Provider in the Presto server build.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>com.facebook.presto</groupId>
    <artifactId>redis-hbo-provider</artifactId>
    <version>${project.version}</version>
    <type>zip</type>
    <scope>provided</scope>
</dependency>

----------------------------------------

TITLE: Parsing String to Date in SQL
DESCRIPTION: Converts a string to a date using a specified format. The format string should use Teradata-compatible specifiers.

LANGUAGE: SQL
CODE:
to_date(string, format) -> date

----------------------------------------

TITLE: SQL Function Examples
DESCRIPTION: Examples of new SQL functions and properties introduced in this release including array_top_n, bitwise_xor_agg, and various Gaussian noise functions.

LANGUAGE: sql
CODE:
array_top_n(array, N)
bitwise_xor_agg(value)
NOISY_COUNT_GAUSSIAN(value, noiseScale[, randomSeed])
NOISY_SUM_GAUSSIAN(value, noiseScale[, randomSeed])
NOISY_AVG_GAUSSIAN(value, noiseScale[, randomSeed])
noisy_count_if_gaussian(condition, noiseScale[, randomSeed])

----------------------------------------

TITLE: IP Subnet Membership Test in Presto SQL
DESCRIPTION: Tests if an IP address belongs to a subnet or if one subnet is contained within another.

LANGUAGE: sql
CODE:
SELECT is_subnet_of(IPPREFIX '1.2.3.128/26', IPADDRESS '1.2.3.129');
SELECT is_subnet_of(IPPREFIX '192.168.3.131/26', IPPREFIX '192.168.3.144/30');

----------------------------------------

TITLE: Configuring Memory Revoking Threshold for Presto on Spark
DESCRIPTION: Sets the threshold for triggering memory spilling in Presto on Spark. This can be configured through both a session property and a configuration property. Spilling is triggered when total memory usage exceeds this threshold.

LANGUAGE: sql
CODE:
spark_memory_revoking_threshold = <value>
spark.memory-revoking-threshold = <value>

----------------------------------------

TITLE: Configuring Read-Only System Access Control in Presto
DESCRIPTION: This snippet shows how to configure the read-only system access control plugin in Presto using the access-control.properties file.

LANGUAGE: properties
CODE:
access-control.name=read-only

----------------------------------------

TITLE: Hive ORC Writer Configuration Properties
DESCRIPTION: Configuration properties for ORC writer stripe size and validation settings in Hive connector.

LANGUAGE: properties
CODE:
hive.orc.writer.stripe-min-size
hive.orc.writer.validation-percentage

----------------------------------------

TITLE: Configuring Pinot Connector in Presto
DESCRIPTION: Example configuration for the Pinot connector in Presto, specifying the connector name and controller URLs.

LANGUAGE: properties
CODE:
connector.name=pinot
pinot.controller-urls=controller_host1:9000,controller_host2:9000

----------------------------------------

TITLE: Using UNNEST for Array Expansion in Presto SQL
DESCRIPTION: Demonstrates how to use UNNEST in Presto to expand arrays, replacing Hive's LATERAL VIEW explode() functionality.

LANGUAGE: SQL
CODE:
SELECT student, score
FROM tests
LATERAL VIEW explode(scores) t AS score;

LANGUAGE: SQL
CODE:
SELECT student, score
FROM tests
CROSS JOIN UNNEST(scores) AS t (score);

----------------------------------------

TITLE: Syntax for ROLLBACK Command in Presto SQL
DESCRIPTION: Shows the syntax for the ROLLBACK command in Presto SQL. The optional keyword WORK can be included for SQL standard compliance.

LANGUAGE: sql
CODE:
ROLLBACK [ WORK ]

----------------------------------------

TITLE: Encoding and Decoding Base32 in Presto SQL
DESCRIPTION: The to_base32() and from_base32() functions convert between binary data and base32 encoded strings.

LANGUAGE: SQL
CODE:
to_base32(binary) -> varchar
from_base32(string) -> varbinary

----------------------------------------

TITLE: Preparing a Simple SELECT Query in Presto SQL
DESCRIPTION: Demonstrates how to prepare a basic SELECT query without parameters. This example selects all columns from the 'nation' table.

LANGUAGE: sql
CODE:
PREPARE my_select1 FROM
SELECT * FROM nation;

----------------------------------------

TITLE: Defining UpdateRowIdColumnHandle Method in ConnectorMetadata for Presto
DESCRIPTION: This method returns a ColumnHandle that provides the rowId used to identify rows for updating, along with any other required fields. It receives a list of updated column handles.

LANGUAGE: java
CODE:
ColumnHandle getUpdateRowIdColumnHandle(
    ConnectorSession session,
    ConnectorTableHandle tableHandle,
    List<ColumnHandle> updatedColumns)

----------------------------------------

TITLE: Configuring Presto Optimization Settings
DESCRIPTION: Example of Presto configuration properties for optimizing query performance, including settings for common sub-expression optimization and metadata query optimization.

LANGUAGE: Properties
CODE:
optimizer.optimize-metadata-queries=true
optimize_metadata_queries=true
optimize_common_sub_expressions=true

----------------------------------------

TITLE: Implementing ConnectorFactory for Example HTTP Connector in Java
DESCRIPTION: This snippet shows the core method of the connector plugin implementation, which returns an ExampleConnectorFactory. It uses Guava's ImmutableList utility class.

LANGUAGE: java
CODE:
@Override
public Iterable<ConnectorFactory> getConnectorFactories()
{
    return ImmutableList.of(new ExampleConnectorFactory());
}

----------------------------------------

TITLE: Limiting Replicated Table Size in Presto SQL
DESCRIPTION: Sets the maximum size for replicated tables in broadcast joins. This session property helps improve cluster concurrency and prevent suboptimal query plans. The value is specified as a data size string (e.g., '100MB').

LANGUAGE: sql
CODE:
SET SESSION join_max_broadcast_table_size = '100MB';

----------------------------------------

TITLE: Verifying Java Keystore File Contents
DESCRIPTION: This command lists and views the contents of a Java Keystore file, which is useful for verifying the keystore's password and contents during troubleshooting.

LANGUAGE: none
CODE:
$ keytool -list -v -keystore /etc/presto/presto.jks

----------------------------------------

TITLE: Dropping a Table with IF EXISTS Clause in Presto SQL
DESCRIPTION: Demonstrates dropping a table using the IF EXISTS clause. This command will drop the 'orders_by_date' table if it exists, or do nothing if it doesn't, without raising an error.

LANGUAGE: sql
CODE:
DROP TABLE IF EXISTS orders_by_date

----------------------------------------

TITLE: Implementing BeginUpdate Method in ConnectorMetadata for Presto
DESCRIPTION: This method is called to start the UPDATE operation. It performs necessary orchestration and returns a ConnectorTableHandle with additional information needed for the operation.

LANGUAGE: java
CODE:
ConnectorTableHandle beginUpdate(
     ConnectorSession session,
     ConnectorTableHandle tableHandle,
     List<ColumnHandle> updatedColumns)

----------------------------------------

TITLE: Retrieving Detailed Query Information Response - Presto REST API JSON
DESCRIPTION: Example JSON response from the GET /v1/query/{queryId} endpoint showing detailed query statistics including execution time, resource usage, and processing metrics. The response includes session information, query state, and comprehensive performance statistics.

LANGUAGE: json
CODE:
{
  "queryId" : "20131229_211533_00017_dk5x2",
  "session" : {
    "user" : "tobrien",
    "source" : "presto-cli",
    "catalog" : "jmx",
    "schema" : "jmx",
    "remoteUserAddress" : "173.15.79.89",
    "userAgent" : "StatementClient/0.55-SNAPSHOT",
    "startTime" : 1388351852026
  },
  "state" : "FINISHED",
  "self" : "http://10.193.207.128:8080/v1/query/20131229_211533_00017_dk5x2",
  "fieldNames" : [ "name" ],
  "query" : "select name from \"java.lang:type=runtime\"",
  "queryStats" : {
    "createTime" : "2013-12-29T16:17:32.027-05:00",
    "executionStartTime" : "2013-12-29T16:17:32.086-05:00",
    "lastHeartbeat" : "2013-12-29T16:17:44.561-05:00",
    "endTime" : "2013-12-29T16:17:32.152-05:00",
    "elapsedTime" : "125.00ms",
    "queuedTime" : "1.31ms",
    "analysisTime" : "4.84ms",
    "totalTasks" : 2,
    "runningTasks" : 0,
    "completedTasks" : 2,
    "totalDrivers" : 2,
    "queuedDrivers" : 0,
    "runningDrivers" : 0,
    "completedDrivers" : 2,
    "totalMemoryReservation" : "0B",
    "totalScheduledTime" : "5.84ms",
    "totalCpuTime" : "710.49us",
    "totalBlockedTime" : "27.38ms",
    "rawInputDataSize" : "27B",
    "rawInputPositions" : 1,
    "processedInputDataSize" : "32B",
    "processedInputPositions" : 1,
    "outputDataSize" : "32B",
    "outputPositions" : 1
  },
  "outputStage" : { }
}

----------------------------------------

TITLE: Enabling Column-Level Access Control Optimization in Presto SQL
DESCRIPTION: Enables a feature to ignore access checks on columns referenced but not required for query results. This optimization can be activated using a session property.

LANGUAGE: SQL
CODE:
SET SESSION check_access_control_on_utilized_columns_only = true;

----------------------------------------

TITLE: CALL Statement with Positional Arguments
DESCRIPTION: Example of calling a procedure using positional arguments, where optional parameters can only be omitted from the end.

LANGUAGE: sql
CODE:
CALL catalog_name.system.procedure_name(arg_1, arg_2, ... arg_n);

----------------------------------------

TITLE: Setting Target Result Size in Presto SQL
DESCRIPTION: Configures the target_result_size session property to customize data batch sizes streamed from the coordinator.

LANGUAGE: SQL
CODE:
SET SESSION target_result_size = '10MB';

----------------------------------------

TITLE: Stopping Presto Server in Background
DESCRIPTION: Command to stop the Presto server running as a background process on Mac.

LANGUAGE: bash
CODE:
presto-server stop

----------------------------------------

TITLE: Configuring Partial Aggregation Memory Limit in Presto
DESCRIPTION: Sets the maximum memory limit for the partial step of aggregations in Presto queries. This property allows fine-tuning of memory usage during query execution.

LANGUAGE: Properties
CODE:
task.max-partial-aggregation-memory=<value>

----------------------------------------

TITLE: Defining DECIMAL Type in Presto SQL
DESCRIPTION: Examples of defining DECIMAL types with different precisions and scales, and using decimal literals in Presto SQL.

LANGUAGE: SQL
CODE:
DECIMAL(10,3)
DECIMAL(20)
DECIMAL '10.3'
DECIMAL '1234567890'
1.1

----------------------------------------

TITLE: Listing Tables in HANA Schema using Presto
DESCRIPTION: SQL command to display all tables within a specific schema in the HANA catalog. This query helps in discovering available tables for further operations.

LANGUAGE: sql
CODE:
SHOW TABLES FROM hana.web;

----------------------------------------

TITLE: Implementing Scalar Function with Operator Dependency in Presto
DESCRIPTION: Example of a scalar function 'is_equal_or_null' that uses @OperatorDependency to ensure an equals function is defined for the type parameter.

LANGUAGE: java
CODE:
@ScalarFunction(name = "is_equal_or_null", calledOnNullInput = true)
@Description("Returns TRUE if arguments are equal or both NULL")
public final class IsEqualOrNullFunction
{
    @TypeParameter("T")
    @SqlType(StandardTypes.BOOLEAN)
    public static boolean isEqualOrNullSlice(
            @OperatorDependency(operator = OperatorType.EQUAL, returnType = StandardTypes.BOOLEAN, argumentTypes = {"T", "T"}) MethodHandle equals,
            @SqlNullable @SqlType("T") Slice value1,
            @SqlNullable @SqlType("T") Slice value2)
    {
        if (value1 == null && value2 == null) {
            return true;
        }
        if (value1 == null || value2 == null) {
            return false;
        }
        return (boolean) equals.invokeExact(value1, value2);
    }

    // ...and so on for each native container type
}

----------------------------------------

TITLE: Querying Available ANALYZE Properties in Presto SQL
DESCRIPTION: Shows how to query the system metadata to list all available properties for the ANALYZE statement.

LANGUAGE: sql
CODE:
SELECT * FROM system.metadata.analyze_properties

----------------------------------------

TITLE: Creating Delta Lake Table
DESCRIPTION: Creating a new Delta Lake table in Presto with external location in S3 bucket.

LANGUAGE: sql
CODE:
CREATE TABLE sales.apac.sales_data_new (dummyColumn INT)
WITH (external_location = 's3://db-sa-datasets/presto/sales_data_new');

----------------------------------------

TITLE: Using Reduce Function with Implicit Coercion in Presto SQL
DESCRIPTION: Demonstrates improved support for implicit coercion with functions involving lambda expressions, particularly the reduce function. This enhancement simplifies the use of reduce and similar functions in Presto queries.

LANGUAGE: SQL
CODE:
SELECT reduce(...)

----------------------------------------

TITLE: Retrieving Detailed Query Information Response in Presto REST API
DESCRIPTION: Example JSON response from the GET /v1/query/{queryId} endpoint showing detailed query execution statistics, session information, and performance metrics. The response includes query timing, resource usage, and processing statistics.

LANGUAGE: json
CODE:
{
  "queryId" : "20131229_211533_00017_dk5x2",
  "session" : {
    "user" : "tobrien",
    "source" : "presto-cli",
    "catalog" : "jmx",
    "schema" : "jmx",
    "remoteUserAddress" : "173.15.79.89",
    "userAgent" : "StatementClient/0.55-SNAPSHOT",
    "startTime" : 1388351852026
  },
  "state" : "FINISHED",
  "self" : "http://10.193.207.128:8080/v1/query/20131229_211533_00017_dk5x2",
  "fieldNames" : [ "name" ],
  "query" : "select name from \"java.lang:type=runtime\"",
  "queryStats" : {
    "createTime" : "2013-12-29T16:17:32.027-05:00",
    "executionStartTime" : "2013-12-29T16:17:32.086-05:00",
    "lastHeartbeat" : "2013-12-29T16:17:44.561-05:00",
    "endTime" : "2013-12-29T16:17:32.152-05:00",
    "elapsedTime" : "125.00ms",
    "queuedTime" : "1.31ms",
    "analysisTime" : "4.84ms",
    "totalTasks" : 2,
    "runningTasks" : 0,
    "completedTasks" : 2,
    "totalDrivers" : 2,
    "queuedDrivers" : 0,
    "runningDrivers" : 0,
    "completedDrivers" : 2,
    "totalMemoryReservation" : "0B",
    "totalScheduledTime" : "5.84ms",
    "totalCpuTime" : "710.49us",
    "totalBlockedTime" : "27.38ms",
    "rawInputDataSize" : "27B",
    "rawInputPositions" : 1,
    "processedInputDataSize" : "32B",
    "processedInputPositions" : 1,
    "outputDataSize" : "32B",
    "outputPositions" : 1
  },
  "outputStage" : { }
}

----------------------------------------

TITLE: Configuring Java Security for Presto HTTPS
DESCRIPTION: JVM configuration to set the entropy gathering device for environments with limited entropy sources.

LANGUAGE: properties
CODE:
-Djava.security.egd=file:/dev/urandom

----------------------------------------

TITLE: Configuring CPU Time Limit for Presto Queries
DESCRIPTION: Introduces a new configuration option 'query.max-cpu-time' to limit the CPU time used by a query in Presto.

LANGUAGE: sql
CODE:
query.max-cpu-time

----------------------------------------

TITLE: Inserting Data into Black Hole Connector Table in Presto SQL
DESCRIPTION: Shows how to insert data into a Black Hole connector table. Although the insert operation is performed, no data is actually stored.

LANGUAGE: sql
CODE:
INSERT INTO blackhole.test.nation
SELECT * FROM tpch.tiny.nation;

----------------------------------------

TITLE: Dropping a Schema with IF EXISTS Clause in Presto SQL
DESCRIPTION: Shows how to drop a schema named 'sales' using the DROP SCHEMA command with the IF EXISTS clause. This prevents an error if the schema doesn't exist.

LANGUAGE: SQL
CODE:
DROP SCHEMA IF EXISTS sales

----------------------------------------

TITLE: Grep Command for Following TaskStatus Updates
DESCRIPTION: Example grep command to filter and display logs related to TaskStatus updates in Presto.

LANGUAGE: bash
CODE:
cat stderr* | grep '/v1/task/20240402_223203_00000_kg5tr.11.0.455.0/status'

----------------------------------------

TITLE: SQL Column Specification in INSERT Statements
DESCRIPTION: Enhancement allowing explicit column name specification in INSERT queries

LANGUAGE: sql
CODE:
INSERT

----------------------------------------

TITLE: TRY Function Example with Invalid Data
DESCRIPTION: Demonstrates handling invalid data conversion using the TRY function, which returns NULL instead of failing when encountering invalid data.

LANGUAGE: sql
CODE:
SELECT TRY(CAST(origin_zip AS BIGINT)) FROM shipping;

----------------------------------------

TITLE: Querying Data from Alluxio-backed Table
DESCRIPTION: Example SQL query to retrieve data from the table stored in Alluxio cache.

LANGUAGE: sql
CODE:
SELECT * FROM reason LIMIT 3;

----------------------------------------

TITLE: Update Multiple Columns for All Customers
DESCRIPTION: Example demonstrating how to update multiple columns (account manager and assign date) for all customers in a single UPDATE statement.

LANGUAGE: sql
CODE:
UPDATE customers SET
  account_manager = 'John Henry',
  assign_date = DATE '2007-01-01';

----------------------------------------

TITLE: Altering Verifier Queries Table in SQL
DESCRIPTION: SQL commands to alter the verifier_queries table when upgrading from Presto 0.92 to 0.93. These commands add new columns for test and control usernames and passwords.

LANGUAGE: sql
CODE:
ALTER TABLE verifier_queries add test_username VARCHAR(256) NOT NULL default 'verifier-test';
ALTER TABLE verifier_queries add test_password VARCHAR(256);
ALTER TABLE verifier_queries add control_username VARCHAR(256) NOT NULL default 'verifier-test';
ALTER TABLE verifier_queries add control_password VARCHAR(256);

----------------------------------------

TITLE: SQL Function Reference - Base32 Functions
DESCRIPTION: New varbinary functions added for base32 encoding and decoding

LANGUAGE: sql
CODE:
to_base32()
from_base32()

----------------------------------------

TITLE: Multi-Column VALUES Example in Presto SQL
DESCRIPTION: Creates a table with two columns and three rows containing numbers and strings.

LANGUAGE: sql
CODE:
VALUES
    (1, 'a'),
    (2, 'b'),
    (3, 'c')

----------------------------------------

TITLE: SQL Query Example - AT TIME ZONE Chaining
DESCRIPTION: Example demonstrating the fixed functionality of chaining AT TIME ZONE operations in Presto SQL.

LANGUAGE: sql
CODE:
SELECT TIMESTAMP '2016-01-02 12:34:56' AT TIME ZONE 'America/Los_Angeles' AT TIME ZONE 'UTC'

----------------------------------------

TITLE: SQL Window Function Frame Example
DESCRIPTION: Example of window function frame specification between unbounded and bounded preceding

LANGUAGE: sql
CODE:
ROWS BETWEEN UNBOUNDED PRECEDING AND 2 PRECEDING

----------------------------------------

TITLE: Defining Principal Rules for LDAP and Kerberos in Presto's Access Control
DESCRIPTION: This JSON snippet shows how to configure principal rules in Presto's file-based access control for LDAP and Kerberos authentication, using regex matching and substitution.

LANGUAGE: json
CODE:
{
  "catalogs": [
    {
      "allow": true
    }
  ],
  "principals": [
    {
      "principal": "(.*)",
      "principal_to_user": "$1",
      "allow": true
    },
    {
      "principal": "([^/]+)/?.*@.*",
      "principal_to_user": "$1",
      "allow": true
    }
  ]
}

----------------------------------------

TITLE: Enabling JSON Protocol Message Processing with Bytecode Generation in Presto
DESCRIPTION: This experimental feature enables processing of JSON protocol messages by generating bytecode on the coordinator in Presto. It can be activated using the provided configuration property.

LANGUAGE: Properties
CODE:
experimental.json-serde-codegen-enabled=true

----------------------------------------

TITLE: Quantified Comparison Predicates
DESCRIPTION: Shows usage of ALL, ANY, and SOME quantifiers with comparison operators in subqueries.

LANGUAGE: sql
CODE:
SELECT 'hello' = ANY (VALUES 'hello', 'world');
SELECT 21 < ALL (VALUES 19, 20, 21);
SELECT 42 >= SOME (SELECT 41 UNION ALL SELECT 42 UNION ALL SELECT 43);

----------------------------------------

TITLE: Killing Running Queries in Presto
DESCRIPTION: Demonstrates how to kill a running query using the system connector's kill_query procedure with a custom message.

LANGUAGE: sql
CODE:
CALL system.runtime.kill_query(query_id => '20151207_215727_00146_tx3nr', message => 'Using too many resources');

----------------------------------------

TITLE: Configuring Amazon S3 Credentials for Hive Connector
DESCRIPTION: Configuration properties required to enable Amazon S3 data access for Hive connectors in Presto. Requires AWS Access Key ID and Secret Access Key to be specified in the catalog properties.

LANGUAGE: properties
CODE:
hive.s3.aws-access-key=AKIAIOSFODNN7EXAMPLE
hive.s3.aws-secret-key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

----------------------------------------

TITLE: Dropping a Role in Presto SQL
DESCRIPTION: The DROP ROLE command is used to remove a specified role from the current catalog in Presto. The user executing this command must have admin privileges for the role being dropped.

LANGUAGE: sql
CODE:
DROP ROLE role_name

----------------------------------------

TITLE: Basic Role Revocation Example
DESCRIPTION: Simple example showing how to revoke a single role 'bar' from a user 'foo'.

LANGUAGE: sql
CODE:
REVOKE bar FROM USER foo;

----------------------------------------

TITLE: Checking No Keys Match Predicate in Presto SQL
DESCRIPTION: Uses the no_keys_match function to check if no keys in a map satisfy a given predicate.

LANGUAGE: sql
CODE:
SELECT no_keys_match(map(array['a', 'b', 'c'], array[1, 2, 3]), x -> x = 'd'); -- true

----------------------------------------

TITLE: START TRANSACTION Mode Options
DESCRIPTION: Defines the available transaction modes including isolation levels and read/write access options.

LANGUAGE: none
CODE:
ISOLATION LEVEL { READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE }
READ { ONLY | WRITE }

----------------------------------------

TITLE: Installing Homebrew on Apple Silicon Mac
DESCRIPTION: Command to install Homebrew package manager on an Apple Silicon (M1 or M2) Mac system.

LANGUAGE: bash
CODE:
arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

----------------------------------------

TITLE: Querying Redshift Schemas in Presto
DESCRIPTION: This SQL snippet demonstrates how to list available Redshift schemas using the SHOW SCHEMAS command in Presto.

LANGUAGE: sql
CODE:
SHOW SCHEMAS FROM redshift;

----------------------------------------

TITLE: Using enum_key UDF in SQL
DESCRIPTION: Demonstrates the usage of the new enum_key UDF to get the key corresponding to an enum value. This function takes an EnumType as input and returns a VARCHAR.

LANGUAGE: SQL
CODE:
ENUM_KEY(EnumType) -> VARCHAR

----------------------------------------

TITLE: Murmur3 Hash Function
DESCRIPTION: UDF implementation of MurmurHash3_x64_128 (Murmur3F) hash function.

LANGUAGE: SQL
CODE:
murmur3_x64_128

----------------------------------------

TITLE: Configuring Hive Parquet Writer Version in SQL
DESCRIPTION: Sets the Hive configuration to use PARQUET_2_0 writer version, which was previously the default behavior. This configuration can be used to revert to the old behavior after the default was changed to PARQUET_1_0 in this release.

LANGUAGE: SQL
CODE:
SET SESSION hive.parquet.writer.version = PARQUET_2_0

----------------------------------------

TITLE: Granting Roles Syntax in Presto SQL
DESCRIPTION: The syntax for granting roles to users or other roles in Presto. It includes options for specifying multiple roles and principals, granting admin privileges, and setting a grantor.

LANGUAGE: sql
CODE:
GRANT role [, ...]
TO ( user | USER user | ROLE role) [, ...]
[ GRANTED BY ( user | USER user | ROLE role | CURRENT_USER | CURRENT_ROLE ) ]
[ WITH ADMIN OPTION ]

----------------------------------------

TITLE: Drop Table with IF EXISTS Example
DESCRIPTION: Example showing how to safely drop a table using IF EXISTS clause to prevent errors if the table doesn't exist.

LANGUAGE: sql
CODE:
DROP TABLE IF EXISTS orders_by_date

----------------------------------------

TITLE: Enabling Order-Based Execution for Hive Connector in Presto SQL
DESCRIPTION: Demonstrates how to enable order-based execution for the Hive connector to reduce memory footprint and improve performance when order-by keys are a subset of group-by keys. This can be done using a session property or configuration property.

LANGUAGE: SQL
CODE:
SET SESSION order_based_execution_enabled = true;

LANGUAGE: SQL
CODE:
-- Alternatively, set in configuration:
-- hive.order-based-execution-enabled=true

----------------------------------------

TITLE: Accessing Anonymous Row Fields in SQL (Deprecated)
DESCRIPTION: The previous behavior of accessing anonymous row fields via .field0, .field1, etc., is now deprecated. This can be re-enabled using configuration options.

LANGUAGE: SQL
CODE:
-- Deprecated usage:
.field0, .field1

-- Configuration to restore:
SET SESSION legacy_row_field_ordinal_access = true;
-- or
SET SESSION deprecated.legacy-row-field-ordinal-access = true;

----------------------------------------

TITLE: Extending Presto Verifier for CREATE Statements
DESCRIPTION: Enhances the Presto verifier to support verification of CREATE VIEW and CREATE TABLE queries.

LANGUAGE: rst
CODE:
* Add support in verifier to verify ``CREATE VIEW`` and ``CREATE TABLE`` queries.

----------------------------------------

TITLE: Show Create View Syntax in Presto SQL
DESCRIPTION: Command syntax for showing the SQL statement used to create a specified view in Presto. The command returns the complete CREATE VIEW statement that was used to create the referenced view.

LANGUAGE: sql
CODE:
SHOW CREATE VIEW view_name

----------------------------------------

TITLE: Retrieving Task Information in JSON (Presto API)
DESCRIPTION: Example JSON response from GET /v1/task endpoint, showing task details including taskId, state, and various statistics. This snippet represents a truncated version of a typical response.

LANGUAGE: json
CODE:
[ {
  "taskId" : "20131222_183944_00011_dk5x2.1.0",
  "version" : 9223372036854775807,
  "state" : "CANCELED",
  "self" : "unknown",
  "lastHeartbeat" : "2013-12-22T13:54:46.566-05:00",
  "outputBuffers" : {
    "state" : "FINISHED",
    "masterSequenceId" : 0,
    "pagesAdded" : 0,
    "buffers" : [ ]
  },
  "noMoreSplits" : [ ],
  "stats" : {
    "createTime" : "2013-12-22T13:54:46.566-05:00",
    "elapsedTime" : "0.00ns",
    "queuedTime" : "92.00us",
    "totalDrivers" : 0,
    "queuedDrivers" : 0,
    "runningDrivers" : 0,
    "completedDrivers" : 0,
    "memoryReservation" : "0B",
    "totalScheduledTime" : "0.00ns",
    "totalCpuTime" : "0.00ns",
    "totalBlockedTime" : "0.00ns",
    "rawInputDataSize" : "0B",
    "rawInputPositions" : 0,
    "processedInputDataSize" : "0B",
    "processedInputPositions" : 0,
    "outputDataSize" : "0B",
    "outputPositions" : 0,
    "pipelines" : [ ]
  },
  "failures" : [ ],
  "outputs" : { }
}]

----------------------------------------

TITLE: Sample React Component Directory Structure
DESCRIPTION: File structure showing the organization of Presto Console source code and key directories

LANGUAGE: plaintext
CODE:
presto-ui/src/
  - HTML files
  - src/static/
  - src/static/dev/
  - src/static/vendor/
  - src/

----------------------------------------

TITLE: Creating Tables on S3 in Presto SQL
DESCRIPTION: Demonstrates the syntax for creating tables on S3 using CREATE TABLE AS statement in Presto. This functionality has been fixed in the 0.139 release.

LANGUAGE: sql
CODE:
CREATE TABLE <table_name>
WITH (
  external_location = 's3://<bucket>/<path>'
)
AS SELECT ...

----------------------------------------

TITLE: Logical Plan Example
DESCRIPTION: Example showing a logical execution plan for a GROUP BY query on the nation table.

LANGUAGE: sql
CODE:
presto:tiny> EXPLAIN SELECT regionkey, count(*) FROM nation GROUP BY 1;

----------------------------------------

TITLE: SELECT Statement Basic Syntax
DESCRIPTION: Core SQL SELECT statement syntax showing all possible clauses and their ordering

LANGUAGE: SQL
CODE:
[ WITH with_query [, ...] ]
SELECT [ ALL | DISTINCT ] select_expr [, ...]
[ FROM from_item [, ...] ]
[ WHERE condition ]
[ GROUP BY [ ALL | DISTINCT ] grouping_element [, ...] ]
[ HAVING condition]
[ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] select ]
[ ORDER BY expression [ ASC | DESC ] [, ...] ]
[ OFFSET count [ { ROW | ROWS } ] ]
[ { LIMIT [ count | ALL ] } ]

----------------------------------------

TITLE: Show Create Table Example Output
DESCRIPTION: Example output showing the complete CREATE TABLE statement for the orders table, including column definitions and table properties like format and partitioning.

LANGUAGE: sql
CODE:
CREATE TABLE tpch.sf1.orders (
   orderkey bigint,
   orderstatus varchar,
   totalprice double,
   orderdate varchar
)
WITH (
   format = 'ORC',
   partitioned_by = ARRAY['orderdate']
)

----------------------------------------

TITLE: Creating Table with Column Aliases
DESCRIPTION: Example showing how to create a new table with custom column names from a SELECT query result.

LANGUAGE: sql
CODE:
CREATE TABLE orders_column_aliased (order_date, total_price)
AS
SELECT orderdate, totalprice
FROM orders

----------------------------------------

TITLE: Enabling Streaming API for Pinot Server Queries in Presto
DESCRIPTION: Configures Presto to use the streaming API when querying Pinot server (version 0.6.0 or higher). This feature is enabled through a configuration property.

LANGUAGE: properties
CODE:
pinot.use-streaming-for-segment-queries=true

----------------------------------------

TITLE: Basic Geometry Examples in WKT Format
DESCRIPTION: Examples of supported Well-Known Text (WKT) geometry formats including Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon and GeometryCollection.

LANGUAGE: text
CODE:
POINT (0 0)
LINESTRING (0 0, 1 1, 1 2)
POLYGON ((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1))
MULTIPOINT (0 0, 1 2)
MULTILINESTRING ((0 0, 1 1, 1 2), (2 3, 3 2, 5 4))
MULTIPOLYGON (((0 0, 4 0, 4 4, 0 4, 0 0), (1 1, 2 1, 2 2, 1 2, 1 1)), ((-1 -1, -1 -2, -2 -2, -2 -1, -1 -1)))
GEOMETRYCOLLECTION (POINT(2 3), LINESTRING (2 3, 3 4))

----------------------------------------

TITLE: Adding Histogram Function in Presto SQL
DESCRIPTION: Introduces the new histogram function in Presto SQL for data analysis and aggregation.

LANGUAGE: SQL
CODE:
:func:`histogram`

----------------------------------------

TITLE: Truncate Function Examples in SQL
DESCRIPTION: Shows different ways to use the truncate function with positive and negative decimal places

LANGUAGE: sql
CODE:
truncate(REAL '12.333', -1) -- result is 10.0
truncate(REAL '12.333', 0)  -- result is 12.0
truncate(REAL '12.333', 1)  -- result is 12.3

----------------------------------------

TITLE: MongoDB SSL Configuration
DESCRIPTION: Configuration flag for enabling SSL connections in MongoDB connector.

LANGUAGE: Properties
CODE:
mongodb.ssl.enabled=true

----------------------------------------

TITLE: Precision and Scale Calculation for Binary Arithmetic Decimal Operations in Presto
DESCRIPTION: Explains the rules for calculating precision and scale of the result for various binary arithmetic operations on decimal types in Presto.

LANGUAGE: sql
CODE:
x + y
x - y
x * y
x / y
x % y

----------------------------------------

TITLE: JDBC Statement Enhancement
DESCRIPTION: New JDBC driver functionality including network timeout configuration, client tags setting, and update type exposure through PrestoStatement.

LANGUAGE: java
CODE:
setNetworkTimeout()
getUpdateType()

----------------------------------------

TITLE: New SQL Function Addition in Presto 0.130
DESCRIPTION: Introduction of the map_concat function for concatenating maps in Presto queries.

LANGUAGE: sql
CODE:
map_concat

----------------------------------------

TITLE: Configuring Glue Client Connection Retries for Hive Connector in Presto
DESCRIPTION: Sets the maximum number of retries for Glue client connections in the Hive connector. This is controlled through a Hive-specific configuration property with a default value of 10.

LANGUAGE: sql
CODE:
hive.metastore.glue.max-error-retries = 10

----------------------------------------

TITLE: Rendering Boolean with Color in Presto SQL
DESCRIPTION: This function renders a boolean value as green for true and red for false using ANSI color codes.

LANGUAGE: SQL
CODE:
render(b) -> varchar

----------------------------------------

TITLE: Using noisy_count_gaussian in SQL
DESCRIPTION: Demonstrates usage of noisy_count_gaussian function that adds Gaussian noise to counts. The function accepts a column name, noise scale parameter, and optional random seed.

LANGUAGE: sql
CODE:
SELECT noisy_count_gaussian(orderkey, 20.0) FROM tpch.tiny.lineitem;
SELECT noisy_count_gaussian(orderkey, 20.0) FROM tpch.tiny.lineitem WHERE false;

----------------------------------------

TITLE: Renaming Presto CLI JAR File in Bash
DESCRIPTION: This command renames the downloaded Presto CLI JAR file to 'presto' for easier execution.

LANGUAGE: bash
CODE:
mv  presto-cli-0.286-executable.jar presto

----------------------------------------

TITLE: Using Map Top N Keys by Value Function in Presto SQL
DESCRIPTION: Adds function 'map_top_n_keys_by_value' which returns top 'n' keys of a map by value.

LANGUAGE: SQL
CODE:
SELECT map_top_n_keys_by_value(map_column, n) FROM table_name;

----------------------------------------

TITLE: Binary HMAC Functions
DESCRIPTION: Functions for computing HMAC (Hash-based Message Authentication Code) using various hash algorithms including MD5, SHA1, SHA256, and SHA512.

LANGUAGE: sql
CODE:
hmac_md5(binary, key) -> varbinary
hmac_sha1(binary, key) -> varbinary
hmac_sha256(binary, key) -> varbinary
hmac_sha512(binary, key) -> varbinary

----------------------------------------

TITLE: Environment Variable Configuration Example
DESCRIPTION: Example showing how to reference environment variables in configuration files for sensitive data like AWS access keys

LANGUAGE: properties
CODE:
hive.s3.aws-access-key=${AWS_S3_ACCESS_KEY}

----------------------------------------

TITLE: Installing Accumulo Iterator Dependency
DESCRIPTION: Commands to install the Presto Accumulo JAR file to the TabletServer nodes' lib/ext directory

LANGUAGE: bash
CODE:
# For each TabletServer node:
scp $PRESTO_HOME/plugins/accumulo/presto-accumulo-*.jar [tabletserver_address]:$ACCUMULO_HOME/lib/ext

# TabletServer should pick up new JAR files in ext directory, but may require restart

----------------------------------------

TITLE: Executing SHOW CATALOGS Command in Presto SQL
DESCRIPTION: This command lists all available catalogs in Presto. It can be optionally followed by a LIKE clause with a pattern to filter the results. The command is useful for exploring the available data sources in a Presto environment.

LANGUAGE: sql
CODE:
SHOW CATALOGS [ LIKE pattern ]

----------------------------------------

TITLE: T-Digest Structure Manipulation
DESCRIPTION: Functions to deconstruct and reconstruct T-digest structures, useful for external integration and detailed analysis of T-digest components.

LANGUAGE: sql
CODE:
destructure_tdigest(tdigest<double>) -> row<centroid_means array<double>, centroid_weights array<integer>, compression double, min double, max double, sum double, count bigint>

LANGUAGE: sql
CODE:
construct_tdigest(centroid_means array<double>, centroid_weights array<double>, compression double, min double, max double, sum double, count bigint) -> tdigest<double>

----------------------------------------

TITLE: Accessing Query Viewer in Presto Console
DESCRIPTION: Demonstrates how to access the Query Viewer feature in the Presto Console by appending '/ui/dev/index.html' to the server IP and port number.

LANGUAGE: none
CODE:
http://localhost:8080/ui/dev/index.html

----------------------------------------

TITLE: Accessing Presto Console URL
DESCRIPTION: The default URL to access the Presto Console web UI after starting Presto. This assumes the default port 8080 is being used.

LANGUAGE: none
CODE:
http://localhost:8080

----------------------------------------

TITLE: SQL Join Condition with Range Functions
DESCRIPTION: Example of a join condition using range comparisons over functions, which received performance improvements in this release.

LANGUAGE: sql
CODE:
a JOIN b ON b.x < f(a.x) AND b.x > g(a.x)

----------------------------------------

TITLE: SQL Function Reference - Split
DESCRIPTION: Enhanced split function supporting empty string delimiter to split string into individual characters.

LANGUAGE: sql
CODE:
split

----------------------------------------

TITLE: Resetting Session Properties Examples in Presto SQL
DESCRIPTION: Provides examples of resetting session properties in Presto. The first example resets a general optimization property, while the second resets a Hive-specific property.

LANGUAGE: sql
CODE:
RESET SESSION optimize_hash_generation;
RESET SESSION hive.optimized_reader_enabled;

----------------------------------------

TITLE: Implementing ConnectorPageSinkProvider with Partition Commit
DESCRIPTION: Example showing the updated PageSinkProvider interface with pageSinkContext parameter containing partitionCommitRequired flag for controlling partition commit behavior.

LANGUAGE: java
CODE:
void createPageSink(ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorOutputTableHandle outputTableHandle, PageSinkContext pageSinkContext)

----------------------------------------

TITLE: Starting Presto Server in Foreground on Apple Silicon Mac
DESCRIPTION: Command to start the Presto server in the foreground on an Apple Silicon (M1 or M2) Mac system.

LANGUAGE: bash
CODE:
arch -x86_64 presto-server run

----------------------------------------

TITLE: IP Subnet Membership Testing in Presto SQL
DESCRIPTION: Tests if an IP address belongs to a specified subnet or if one subnet is contained within another.

LANGUAGE: sql
CODE:
SELECT is_subnet_of(IPPREFIX '1.2.3.128/26', IPADDRESS '1.2.3.129');
SELECT is_subnet_of(IPPREFIX '192.168.3.131/26', IPPREFIX '192.168.3.144/30');

----------------------------------------

TITLE: Retrieving Top N Keys by Value in Presto SQL
DESCRIPTION: Demonstrates how to retrieve the top N keys from a map based on their corresponding values using the map_keys_by_top_n_values() function.

LANGUAGE: sql
CODE:
SELECT map_top_n_keys_by_value(map(ARRAY['a', 'b', 'c'], ARRAY[2, 1, 3]), 2) --- ['c', 'a']

----------------------------------------

TITLE: Verifying Docker installation
DESCRIPTION: Command to verify that Docker is installed and working correctly by running a simple 'hello-world' container.

LANGUAGE: bash
CODE:
docker run hello-world

----------------------------------------

TITLE: SQL Row Number Function
DESCRIPTION: Reference to the row_number function related to memory tracking improvements.

LANGUAGE: sql
CODE:
row_number()

----------------------------------------

TITLE: Retrieving Connection Properties in Presto JDBC Driver
DESCRIPTION: New method added to PrestoConnection interface to retrieve connection properties after a connection is established. This enhancement is introduced in PR #16329.

LANGUAGE: Java
CODE:
getConnectionProperties()

----------------------------------------

TITLE: Configuring Session Property Manager in Presto
DESCRIPTION: This snippet shows how to configure the built-in session property manager in Presto using a properties file. It specifies the configuration manager type and the path to the JSON config file.

LANGUAGE: properties
CODE:
session-property-config.configuration-manager=file
session-property-manager.config-file=etc/session-property-config.json

----------------------------------------

TITLE: Using Time Travel Syntax for Iceberg Tables in Presto
DESCRIPTION: These SQL snippets show how to use the new time travel syntax for Iceberg tables, including TIMESTAMP, VERSION, and BEFORE clauses to query historical data.

LANGUAGE: SQL
CODE:
SELECT * FROM my_table FOR TIMESTAMP AS OF TIMESTAMP '2023-01-01 00:00:00 UTC';

LANGUAGE: SQL
CODE:
SELECT * FROM my_table FOR VERSION AS OF 123456789;

LANGUAGE: SQL
CODE:
SELECT * FROM my_table FOR TIMESTAMP BEFORE TIMESTAMP '2023-01-01 00:00:00 UTC';

----------------------------------------

TITLE: Configuring JVM GC Diagnostic Settings for Presto
DESCRIPTION: JVM command line arguments for enabling detailed garbage collection logging and diagnostics. These settings help in analyzing GC-related performance issues by providing detailed information about garbage collection events, timing, and memory usage patterns.

LANGUAGE: none
CODE:
-XX:+PrintGCApplicationConcurrentTime
-XX:+PrintGCApplicationStoppedTime
-XX:+PrintGCCause
-XX:+PrintGCDateStamps
-XX:+PrintGCTimeStamps
-XX:+PrintGCDetails
-XX:+PrintReferenceGC
-XX:+PrintClassHistogramAfterFullGC
-XX:+PrintClassHistogramBeforeFullGC
-XX:PrintFLSStatistics=2
-XX:+PrintAdaptiveSizePolicy
-XX:+PrintSafepointStatistics
-XX:PrintSafepointStatisticsCount=1

----------------------------------------

TITLE: Advanced SSL/TLS Performance Tuning
DESCRIPTION: Configuration settings for improving SSL/TLS performance using alternative random number generation algorithms.

LANGUAGE: none
CODE:
http-server.https.secure-random-algorithm=SHA1PRNG

LANGUAGE: none
CODE:
-Djava.security.egd=file:/dev/urandom

----------------------------------------

TITLE: Displaying Presto CLI help in Bash
DESCRIPTION: Shows the available options for the Presto CLI by running it with the --help flag.

LANGUAGE: bash
CODE:
./presto --help

----------------------------------------

TITLE: Writing Lambda Expressions in Presto SQL
DESCRIPTION: Lambda expressions in Presto are written using the '->' syntax. They can contain various SQL operations, including arithmetic, function calls, and conditional statements. This snippet showcases different examples of valid lambda expressions.

LANGUAGE: SQL
CODE:
x -> x + 1
(x, y) -> x + y
x -> regexp_like(x, 'a+')
x -> x[1] / x[2]
x -> IF(x > 0, x, -x)
x -> COALESCE(x, 0)
x -> CAST(x AS JSON)
x -> x + TRY(1 / 0)

----------------------------------------

TITLE: Configuring KHyperLogLog Aggregation Group Limit in Presto SQL
DESCRIPTION: Adds a config property to limit the maximum number of groups that 'khyperloglog_agg' function can have. The query will fail when the limit is exceeded. (The default is 0 which means no limit).

LANGUAGE: SQL
CODE:
SET SESSION khyperloglog_agg_group_limit = 1000000;

----------------------------------------

TITLE: GROUPING SETS Example
DESCRIPTION: Demonstration of GROUPING SETS syntax for complex aggregations.

LANGUAGE: SQL
CODE:
SELECT origin_state, origin_zip, destination_state, sum(package_weight)
FROM shipping
GROUP BY GROUPING SETS (
    (origin_state),
    (origin_state, origin_zip),
    (destination_state));

----------------------------------------

TITLE: Stopping and removing Presto Docker container
DESCRIPTION: Commands to stop and remove the Presto Docker container. This cleans up the environment after using Presto.

LANGUAGE: bash
CODE:
docker stop presto
docker rm presto

----------------------------------------

TITLE: Dropping Delta Lake Table
DESCRIPTION: Removing a Delta Lake table metadata from Hive metastore while preserving the underlying data.

LANGUAGE: sql
CODE:
DROP TABLE sales.apac.sales_data_new;

----------------------------------------

TITLE: Creating and Querying HyperLogLog Sketches in Presto SQL
DESCRIPTION: Shows how to create a table for storing HyperLogLog sketches, insert data into it using approx_set(), and query the data to calculate weekly unique users. This example demonstrates the practical use of HyperLogLog for efficient cardinality estimation.

LANGUAGE: sql
CODE:
CREATE TABLE visit_summaries (
  visit_date date,
  hll varbinary
);

INSERT INTO visit_summaries
SELECT visit_date, cast(approx_set(user_id) AS varbinary)
FROM user_visits
GROUP BY visit_date;

SELECT cardinality(merge(cast(hll AS HyperLogLog))) AS weekly_unique_users
FROM visit_summaries
WHERE visit_date >= current_date - interval '7' day;

----------------------------------------

TITLE: Inserting Single Row with VALUES
DESCRIPTION: Shows how to insert a single row using the VALUES clause with direct values.

LANGUAGE: sql
CODE:
INSERT INTO cities VALUES (1, 'San Francisco');

----------------------------------------

TITLE: SQL System Table Reference - Information Schema Views
DESCRIPTION: System table showing view metadata with new view_owner column added.

LANGUAGE: sql
CODE:
information_schema.views

----------------------------------------

TITLE: Calculating Reidentification Potential of KHyperLogLog Sketch in Presto SQL
DESCRIPTION: This function computes the reidentification potential, which is the ratio of x values that have a uniqueness under the given threshold.

LANGUAGE: SQL
CODE:
reidentification_potential(khll, threshold) ->  double

----------------------------------------

TITLE: Defining Session Property Rules in Presto
DESCRIPTION: This JSON snippet demonstrates how to define session property rules for different query scenarios in Presto. It includes rules for global queries, interactive queries, ETL queries, and high memory ETL queries, each with specific session properties.

LANGUAGE: json
CODE:
[
  {
    "group": "global.*",
    "sessionProperties": {
      "query_max_execution_time": "8h",
    }
  },
  {
    "group": "global.interactive.*",
    "sessionProperties": {
      "query_max_execution_time": "1h"
    }
  },
  {
    "group": "global.pipeline.*",
    "clientTags": ["etl"],
    "sessionProperties": {
      "scale_writers": "true",
      "writer_min_size": "1GB"
    }
  },
  {
    "group": "global.pipeline.*",
    "clientTags": ["high_mem_etl"],
    "sessionProperties": {
      "exchange_materialization_strategy": "ALL",
      "partitioning_provider_catalog": "hive",
      "hash_partition_count": 4096
    }
  }
]

----------------------------------------

TITLE: Converting Map to Array of Entries in Presto SQL
DESCRIPTION: Demonstrates how to convert a map into an array of key-value pairs using the map_entries() function.

LANGUAGE: sql
CODE:
SELECT map_entries(MAP(ARRAY[1, 2], ARRAY['x', 'y'])); -- [ROW(1, 'x'), ROW(2, 'y')]

----------------------------------------

TITLE: Generic Shift Functions in Presto SQL
DESCRIPTION: Examples of generic shift functions in Presto that work with various integral types (TINYINT, SMALLINT, INTEGER, BIGINT). These functions perform left shift, logical right shift, and arithmetic right shift operations.

LANGUAGE: SQL
CODE:
SELECT bitwise_left_shift(TINYINT '7', 2); -- 28
SELECT bitwise_left_shift(TINYINT '-7', 2); -- -28

SELECT bitwise_right_shift(TINYINT '7', 2); -- 1
SELECT bitwise_right_shift(SMALLINT -8, 2); -- 16382

SELECT bitwise_right_shift_arithmetic(BIGINT '-8', 2); -- -2
SELECT bitwise_right_shift_arithmetic(SMALLINT '7', 2); -- 1

----------------------------------------

TITLE: Enabling Join Reordering in Presto SQL
DESCRIPTION: A new feature to automatically choose the best evaluation order for multi-way JOINs. This feature is disabled by default and can be enabled using the 'reorder-joins' config option or 'reorder_joins' session property.

LANGUAGE: SQL
CODE:
SET SESSION reorder_joins = true;

----------------------------------------

TITLE: SSL Debug Configuration for Presto CLI
DESCRIPTION: Command to enable SSL debugging when running Presto CLI for troubleshooting SSL-related issues.

LANGUAGE: bash
CODE:
java -Djavax.net.debug=ssl \
-jar \
presto-cli-<version>-executable.jar \
--server https://coordinator:8443 \
<other_cli_arguments>

----------------------------------------

TITLE: New Geospatial Function in SQL
DESCRIPTION: Adds a new geospatial function to determine the type of a geometry object.

LANGUAGE: SQL
CODE:
ST_GeometryType

----------------------------------------

TITLE: Basic DELETE Statement Syntax in Presto
DESCRIPTION: Shows the fundamental syntax structure for DELETE operations in Presto SQL. The WHERE clause is optional and determines which rows will be deleted.

LANGUAGE: sql
CODE:
DELETE FROM table_name [ WHERE condition ]

----------------------------------------

TITLE: Querying with substring Function (3 parameters) in SQL
DESCRIPTION: An alias for the substr function, which extracts a substring of specified length from a string starting at a specified position.

LANGUAGE: SQL
CODE:
substring(string, start, length) -> varchar

----------------------------------------

TITLE: Querying Redshift Table Data
DESCRIPTION: This SQL snippet shows how to query data from a specific table in a Redshift schema using a SELECT statement in Presto.

LANGUAGE: sql
CODE:
SELECT * FROM redshift.web.clicks;

----------------------------------------

TITLE: Using merge with SfmSketch in SQL
DESCRIPTION: Example of using the merge aggregator function with SfmSketch objects to compute annual distinct counts from monthly sketches.

LANGUAGE: sql
CODE:
SELECT year, cardinality(merge(sketch)) AS annual_distinct_count
FROM monthly_sketches
GROUP BY 1

----------------------------------------

TITLE: Executing Prepared Statement Without Parameters
DESCRIPTION: Demonstrates preparing and executing a simple SELECT statement without parameters.

LANGUAGE: sql
CODE:
PREPARE my_select1 FROM
SELECT name FROM nation;

LANGUAGE: sql
CODE:
EXECUTE my_select1;

----------------------------------------

TITLE: Querying Role Grants in Presto SQL
DESCRIPTION: SQL command to display roles granted to the current session user. The command can optionally specify a catalog context, otherwise it uses the current catalog. Returns a non-recursive list of granted roles.

LANGUAGE: sql
CODE:
SHOW ROLE GRANTS [ FROM catalog ]

----------------------------------------

TITLE: SQL Function References
DESCRIPTION: SQL functions mentioned in bug fixes and improvements including reduce, array_sort, shuffle, reverse, array_intersect, arrays_overlap, concat, map_concat, max_by, min_by, max, min, and arbitrary.

LANGUAGE: sql
CODE:
reduce()
array_sort()
shuffle()
reverse()
array_intersect()
arrays_overlap()
concat()
map_concat()
max_by()
min_by()
max()
min()
arbitrary()

----------------------------------------

TITLE: Enabling Parquet Dereference Pushdown in Presto SQL
DESCRIPTION: Illustrates how to enable pushdown of dereferences into Parquet table scans using Hive configuration and session properties.

LANGUAGE: SQL
CODE:
SET SESSION hive.enable-parquet-dereference-pushdown = true;
SET SESSION parquet_batch_reader_verification_enabled = true;

----------------------------------------

TITLE: LIKE Pattern Matching
DESCRIPTION: Examples of pattern matching using LIKE operator with wildcards and escape characters.

LANGUAGE: sql
CODE:
SELECT * FROM (VALUES ('abc'), ('bcd'), ('cde')) AS t (name)
WHERE name LIKE '%b%';

SELECT * FROM (VALUES ('a_c'), ('_cd'), ('cde')) AS t (name)
WHERE name LIKE '%#_%' ESCAPE '#';

----------------------------------------

TITLE: Creating Table in Presto Using Alluxio
DESCRIPTION: SQL commands to create a new table in Presto based on a file mounted in Alluxio. It demonstrates how to specify the external location using the Alluxio file system.

LANGUAGE: sql
CODE:
presto:default> DROP TABLE IF EXISTS reason;
DROP TABLE
presto:default> CREATE TABLE reason (
  r_reason_sk integer,
  r_reason_id varchar,
  r_reason_desc varchar
) WITH (
  external_location = 'alluxio://localhost:19998/example',
  format = 'PARQUET'
);
CREATE TABLE

----------------------------------------

TITLE: SQL Table Statistics Query
DESCRIPTION: Command for viewing table statistics in TPCDS

LANGUAGE: sql
CODE:
SHOW STATS FOR table_name

----------------------------------------

TITLE: Configuring Delta Lake Connector Properties
DESCRIPTION: Basic configuration properties required for setting up Delta Lake connector in Presto

LANGUAGE: properties
CODE:
connector.name=delta
hive.metastore.uri=hostname:port

----------------------------------------

TITLE: Installing Presto-Accumulo Iterator Dependency
DESCRIPTION: Commands to copy the presto-accumulo JAR file to each Accumulo TabletServer node.

LANGUAGE: bash
CODE:
# For each TabletServer node:
scp $PRESTO_HOME/plugins/accumulo/presto-accumulo-*.jar [tabletserver_address]:$ACCUMULO_HOME/lib/ext

# TabletServer should pick up new JAR files in ext directory, but may require restart

----------------------------------------

TITLE: Calculating Jaccard Similarity with MinHash in Presto SQL
DESCRIPTION: Shows how to use MinHash aggregation and Jaccard index calculation to estimate similarity between two sets of data from different tables.

LANGUAGE: SQL
CODE:
WITH mh1 AS (SELECT minhash_agg(to_utf8(value)) AS minhash FROM table1), mh2 AS (SELECT minhash_agg(to_utf8(value)) AS minhash FROM table2), SELECT jaccard_index(mh1.minhash, mh2.minhash) AS similarity FROM mh1, mh2;

----------------------------------------

TITLE: Aggregating Values into Quantile Digest in Presto SQL
DESCRIPTION: This function aggregates input values into a quantile digest. It returns a qdigest composed of all input values of x.

LANGUAGE: sql
CODE:
qdigest_agg(x) -> qdigest<[same as x]>

----------------------------------------

TITLE: Using merge_sfm with Arrays in SQL
DESCRIPTION: Demonstrates using merge_sfm to combine multiple SfmSketch objects from different columns into a single sketch for distinct counting.

LANGUAGE: sql
CODE:
SELECT cardinality(merge_sfm(ARRAY[
    noisy_approx_set_sfm(col_1, 5.0),
    noisy_approx_set_sfm(col_2, 5.0),
    noisy_approx_set_sfm(col_3, 5.0)
])) AS distinct_count_over_3_cols
FROM my_table

----------------------------------------

TITLE: Configuring Presto Node Properties
DESCRIPTION: Example of a minimal node.properties configuration file for Presto, specifying the environment, node ID, and data directory.

LANGUAGE: none
CODE:
node.environment=production
node.id=ffffffff-ffff-ffff-ffff-ffffffffffff
node.data-dir=/var/presto/data

----------------------------------------

TITLE: Defining DeleteRowIdColumnHandle Method in ConnectorMetadata for Presto
DESCRIPTION: This method returns a ColumnHandle that provides the rowId used to identify rows for deletion, along with any other required fields. For JDBC connectors, this is typically the primary key.

LANGUAGE: java
CODE:
ColumnHandle getDeleteRowIdColumnHandle(
    ConnectorSession session,
    ConnectorTableHandle tableHandle)

----------------------------------------

TITLE: Using IP Address Type in SQL
DESCRIPTION: Introduces a new IPADDRESS type to represent IP addresses.

LANGUAGE: SQL
CODE:
SELECT CAST('192.168.0.1' AS IPADDRESS) FROM table;

----------------------------------------

TITLE: Preparing an INSERT Query in Presto SQL
DESCRIPTION: Illustrates preparing an INSERT statement. This prepared statement will insert a new row into the 'cities' table with predefined values.

LANGUAGE: sql
CODE:
PREPARE my_insert FROM
INSERT INTO cities VALUES (1, 'San Francisco');

----------------------------------------

TITLE: Creating Tangent Function in Presto
DESCRIPTION: Example of creating a permanent tangent function in the example.default schema using basic syntax.

LANGUAGE: sql
CODE:
CREATE FUNCTION example.default.tan(x double)
RETURNS double
DETERMINISTIC
RETURNS NULL ON NULL INPUT
RETURN sin(x) / cos(x)

----------------------------------------

TITLE: Defining DROP SCHEMA Syntax in Presto SQL
DESCRIPTION: Specifies the syntax for the DROP SCHEMA command in Presto. It allows for dropping an existing schema, with an optional IF EXISTS clause to suppress errors if the schema doesn't exist.

LANGUAGE: SQL
CODE:
DROP SCHEMA [ IF EXISTS ] schema_name

----------------------------------------

TITLE: Enabling TLS Client Certificate Authentication in Presto
DESCRIPTION: Shows how to enable TLS client certificate authentication in Presto by setting the http-server.authentication.type to CERTIFICATE. This requires adding the certificate authority (CA) used to sign client certificates to the HTTP server KeyStore.

LANGUAGE: Properties
CODE:
http-server.authentication.type=CERTIFICATE

----------------------------------------

TITLE: Demonstrating NULL handling in OR operations with Presto SQL
DESCRIPTION: These SQL queries show how the OR operator handles NULL values in Presto. The results demonstrate that OR with NULL can produce NULL or TRUE depending on the other operand.

LANGUAGE: SQL
CODE:
SELECT CAST(null AS boolean) OR CAST(null AS boolean); -- null

SELECT CAST(null AS boolean) OR false; -- null

SELECT CAST(null AS boolean) OR true; -- true

----------------------------------------

TITLE: Using chr() Function in Presto SQL
DESCRIPTION: Shows how to use the chr() function to convert a Unicode code point to a character in Presto SQL.

LANGUAGE: SQL
CODE:
SELECT chr(65) AS result; -- Returns 'A'

----------------------------------------

TITLE: Merging Quantile Digests in Presto SQL
DESCRIPTION: Merges all input qdigests into a single qdigest. This function allows combining multiple quantile digest data structures without losing precision.

LANGUAGE: SQL
CODE:
merge(qdigest) -> qdigest

----------------------------------------

TITLE: IO Analysis in JSON Format
DESCRIPTION: Example showing IO analysis in JSON format for an INSERT statement with a WHERE clause.

LANGUAGE: json
CODE:
{
  "inputTableColumnInfos" : [ {
    "table" : {
      "catalog" : "hive",
      "schemaTable" : {
        "schema" : "tpch",
        "table" : "nation"
      }
    },
    "columns" : [ {
      "columnName" : "regionkey",
      "type" : "bigint",
      "domain" : {
        "nullsAllowed" : false,
        "ranges" : [ {
          "low" : {
            "value" : "2",
            "bound" : "EXACTLY"
          },
          "high" : {
            "value" : "2",
            "bound" : "EXACTLY"
          }
        } ]
      }
    } ]
  } ],
  "outputTable" : {
    "catalog" : "hive",
    "schemaTable" : {
      "schema" : "tpch",
      "table" : "test_nation"
    }
  }
}

----------------------------------------

TITLE: Normalizing Myanmar Text to Unicode in Presto
DESCRIPTION: Function that converts Myanmar text to normalized Unicode format. If the input text is in Zawgyi encoding, it will be converted to Unicode. If the input is already in Unicode, it remains unchanged.

LANGUAGE: sql
CODE:
myanmar_normalize_unicode(text) -> varchar

----------------------------------------

TITLE: Illustrating New SQL Functions in Presto
DESCRIPTION: This snippet demonstrates the newly added SQL functions in Presto 0.147: sequence, sign, and flatten. These functions enhance data manipulation capabilities in Presto queries.

LANGUAGE: SQL
CODE:
SELECT sequence(...);
SELECT sign(...);
SELECT flatten(...);

----------------------------------------

TITLE: MongoDB Schema Collection Structure
DESCRIPTION: JSON structure for defining table schemas in MongoDB collection

LANGUAGE: none
CODE:
{
    "table": ...,
    "fields": [
          { "name" : ...,
            "type" : "varchar|bigint|boolean|double|date|array(bigint)|...",
            "hidden" : false },
            ...
        ]
    }

----------------------------------------

TITLE: Configuring HTTPS and Password Authentication in Presto
DESCRIPTION: These properties need to be added to the coordinator's config.properties file to enable HTTPS support and password authentication.

LANGUAGE: properties
CODE:
http-server.authentication.type=PASSWORD

http-server.https.enabled=true
http-server.https.port=8443

http-server.https.keystore.path=/etc/presto_keystore.jks
http-server.https.keystore.key=keystore_password

----------------------------------------

TITLE: Using regexp_extract without Group Parameter
DESCRIPTION: Extracts the first substring matching a regular expression pattern from a string.

LANGUAGE: sql
CODE:
SELECT regexp_extract('1a 2b 14m', '\d+'); -- 1

----------------------------------------

TITLE: Show Create Function Basic Syntax
DESCRIPTION: Basic syntax for SHOW CREATE FUNCTION command in Presto SQL.

LANGUAGE: sql
CODE:
SHOW CREATE FUNCTION function_name [ ( parameter_type[, ...] ) ]

----------------------------------------

TITLE: Demonstrating RST Sections for Presto 0.248 Changelog
DESCRIPTION: This RST code snippet shows the structure of the changelog, including sections for highlights, details, and contributors.

LANGUAGE: rst
CODE:
**Highlights**
==============
* New aggregation function :func:`!map_union_sum`.
* Add support for overriding session properties using session property managers. See :doc:`/admin/session-property-managers`.

**Details**
===========

General Changes
_______________
* Improve query performance by reducing lock contention in output buffer memory tracking.
* Add support for overriding session properties using session property managers :doc:`/admin/session-property-managers`. Setting ``overrideSessionProperties`` to true will cause the property to be overridden and remain overridden even if subsequent rules match the property but don't have ``overrideSessionProperties`` set.
* Add support to drop multiple UDFs at the same time.
* Add a REST endpoint ``/v1/taskInfo/{{taskId}}`` on the coordinator to get TaskInfo without needing to go directly to the worker's endpoint.
* Add new aggregation function :func:`!map_union_sum`.
* Add support to configure ZSTD compression level for ORC writer.
* Add warning for JOIN conditions with OR expressions.
* Add configuration property ``internal-communication.https.trust-store-password`` to set the Java Truststore password used for https in internal communications between nodes.

Hive Connector Changes
______________________
* Add session property ``temporary_table_create_empty_bucket_files`` and configuration property ``hive.create-empty-bucket-files-for-temporary-table``, which, when set to ``false``, disables the creation of zero-row files for temporary table empty buckets, to improve performance.

Verifier Changes
________________
* Add output table names to Presto Verifier outputs.

**Contributors**
================

Ajay George, Andrii Rosa, Ariel Weisberg, Arunachalam Thirupathi, Bin Fan, Chi Tsai, David Stryker, James Petty, James Sun, Ke Wang, Leiqing Cai, Luca, Lung-Yen Chen, Nikhil Collooru, Rebecca Schlussel, Rongrong Zhong, Shixuan Fan, Sreeni Viswanadha, Stephen Dimmick, Tim Meehan, Venki Korukanti, Vic Zhang, Wenlei Xie, Yang Yang

----------------------------------------

TITLE: Querying Partitions System Table in SQL
DESCRIPTION: Introduces a new hidden system table for partitioned tables, allowing querying of partition information similar to SHOW PARTITIONS.

LANGUAGE: SQL
CODE:
-- For a table named 'example':
SELECT * FROM "example$partitions";

----------------------------------------

TITLE: Configuring Warning Handling in Presto 0.237
DESCRIPTION: This snippet demonstrates how to set the new 'warning_handling' session property to control how warnings are handled in Presto 0.237. Options are SUPPRESS, NORMAL, and AS_ERROR.

LANGUAGE: SQL
CODE:
SET SESSION warning_handling = 'SUPPRESS';
-- or
SET SESSION warning_handling = 'NORMAL';
-- or
SET SESSION warning_handling = 'AS_ERROR';

----------------------------------------

TITLE: Enabling Additional Kerberos Debugging for Presto Coordinator
DESCRIPTION: This snippet shows the JVM configuration options to enable additional Kerberos debugging information for the Presto coordinator process.

LANGUAGE: none
CODE:
-Dsun.security.krb5.debug=true
-Dlog.enable-console=true

----------------------------------------

TITLE: Reverting DWRF Writer Updates in Presto
DESCRIPTION: References a pull request that reverts non-backward-compatible DWRF writer updates in Presto. This change ensures compatibility with previous versions.

LANGUAGE: rst
CODE:
:pr:`16037`

----------------------------------------

TITLE: Creating Table with Processing Delay
DESCRIPTION: Creating a Black Hole table with a configured page processing delay to slow down data consumption and production.

LANGUAGE: sql
CODE:
CREATE TABLE blackhole.test.delay (
  dummy bigint
)
WITH (
  split_count = 1,
  pages_per_split = 1,
  rows_per_page = 1,
  page_processing_delay = '5s'
);

----------------------------------------

TITLE: GRANT Syntax in Presto SQL
DESCRIPTION: Defines the syntax for the GRANT statement in Presto. It shows how to grant one or more privileges or all privileges on a table to a user or role, with an optional WITH GRANT OPTION clause.

LANGUAGE: sql
CODE:
GRANT ( privilege [, ...] | ( ALL PRIVILEGES ) )
ON [ TABLE ] table_name TO ( user | USER user | ROLE role )
[ WITH GRANT OPTION ]

----------------------------------------

TITLE: Adding Pinot Binary to Double Conversion UDF in Presto SQL
DESCRIPTION: A new user-defined function 'pinot_binary_decimal_to_double' is introduced for the Pinot connector. It transforms Pinot binary column data to Double type.

LANGUAGE: SQL
CODE:
!pinot_binary_decimal_to_double

----------------------------------------

TITLE: EXPLAIN Command Syntax
DESCRIPTION: Basic syntax for the EXPLAIN command showing available options for format and type.

LANGUAGE: sql
CODE:
EXPLAIN [ ( option [, ...] ) ] statement

LANGUAGE: sql
CODE:
FORMAT { TEXT | GRAPHVIZ | JSON }
TYPE { LOGICAL | DISTRIBUTED | VALIDATE | IO }

----------------------------------------

TITLE: Creating Map from Arrays in Presto SQL
DESCRIPTION: Shows how to create a map from two arrays using the map() function, where one array contains keys and the other contains values.

LANGUAGE: sql
CODE:
SELECT map(ARRAY[1,3], ARRAY[2,4]); -- {1 -> 2, 3 -> 4}

----------------------------------------

TITLE: New Functions Added in Presto 0.109
DESCRIPTION: New functions added include slice(), md5(), array_min() and array_max().

LANGUAGE: plaintext
CODE:
!slice, !md5, !array_min, !array_max

----------------------------------------

TITLE: Creating External Delta Lake Table
DESCRIPTION: SQL command to create a new Delta Lake table with external location in S3

LANGUAGE: sql
CODE:
CREATE TABLE sales.apac.sales_data_new (dummyColumn INT)
WITH (external_location = 's3://db-sa-datasets/presto/sales_data_new');

----------------------------------------

TITLE: Using random() Function in SQL
DESCRIPTION: This snippet demonstrates the usage of the random() function in SQL queries. The release adds a new variant that produces an integer between 0 and a specified upper bound.

LANGUAGE: sql
CODE:
SELECT random(upper_bound);

----------------------------------------

TITLE: SQL Function Call - hamming_distance
DESCRIPTION: New function added to calculate Hamming distance between values.

LANGUAGE: sql
CODE:
hamming_distance

----------------------------------------

TITLE: Configuring Dynamic Split Concurrency Properties
DESCRIPTION: Configuration properties for controlling dynamic split concurrency behavior in Presto. Includes both system-wide configuration properties and corresponding session properties.

LANGUAGE: properties
CODE:
task.initial-splits-per-node
task.split-concurrency-adjustment-interval
initial_splits_per_node
split_concurrency_adjustment_interval

----------------------------------------

TITLE: SQL Type and Function Updates
DESCRIPTION: Changes to SQL type handling and function behavior, including try_cast improvements for TIMESTAMP type and making MAP type comparable.

LANGUAGE: sql
CODE:
try_cast(value AS TIMESTAMP)

----------------------------------------

TITLE: Adding and Dropping Columns in Presto SQL
DESCRIPTION: Demonstrates how to add and drop columns using ALTER TABLE in Presto, including conditional operations with IF EXISTS and IF NOT EXISTS clauses.

LANGUAGE: sql
CODE:
ALTER TABLE users ADD COLUMN zip varchar;

LANGUAGE: sql
CODE:
ALTER TABLE IF EXISTS users ADD COLUMN IF NOT EXISTS zip varchar;

LANGUAGE: sql
CODE:
ALTER TABLE users DROP COLUMN zip;

LANGUAGE: sql
CODE:
ALTER TABLE IF EXISTS users DROP COLUMN IF EXISTS zip;

----------------------------------------

TITLE: DESCRIBE INPUT with Multiple Parameters Example
DESCRIPTION: Demonstrates preparing and describing a query with three parameters of different types.

LANGUAGE: sql
CODE:
PREPARE my_select1 FROM
SELECT ? FROM nation WHERE regionkey = ? AND name < ?;

LANGUAGE: sql
CODE:
DESCRIBE INPUT my_select1;

LANGUAGE: none
CODE:
 Position | Type
--------------------
        0 | unknown
        1 | bigint
        2 | varchar
(3 rows)

----------------------------------------

TITLE: Creating Kerberos Principal and Keytab using kadmin
DESCRIPTION: Commands to create a Kerberos principal and generate a keytab file for a user using the kadmin tool.

LANGUAGE: bash
CODE:
kadmin
> addprinc -randkey someuser@EXAMPLE.COM
> ktadd -k /home/someuser/someuser.keytab someuser@EXAMPLE.COM

----------------------------------------

TITLE: Type Inspection in Presto SQL
DESCRIPTION: Examples of using typeof() function to inspect the data type of expressions at runtime.

LANGUAGE: sql
CODE:
SELECT typeof(123); -- integer
SELECT typeof('cat'); -- varchar(3)
SELECT typeof(cos(2) + 1.5); -- double

----------------------------------------

TITLE: Querying Sheet Metadata
DESCRIPTION: SQL command to retrieve metadata information about sheets in the schema.

LANGUAGE: sql
CODE:
SELECT * FROM my_ss."$sheets"

----------------------------------------

TITLE: Using IP Address and Prefix Types in Presto SQL
DESCRIPTION: Examples of using IPADDRESS and IPPREFIX types in Presto SQL, supporting both IPv4 and IPv6 formats.

LANGUAGE: SQL
CODE:
IPADDRESS '10.0.0.1'
IPADDRESS '2001:db8::1'
IPPREFIX '10.0.1.0/24'
IPPREFIX '2001:db8::/48'

----------------------------------------

TITLE: HANA SSL Connection Configuration
DESCRIPTION: Configuration string for enabling encrypted connections to HANA using TLS/SSL.

LANGUAGE: properties
CODE:
connection-url=jdbc:sap://<host>:<port>?encrypt=true;

----------------------------------------

TITLE: Enabling TLS Encryption for HANA Connection in Presto
DESCRIPTION: Configuration to enable Transport Layer Security (TLS) encryption for the HANA connection. This snippet demonstrates how to set the 'encrypt' property in the JDBC URL to ensure secure communication.

LANGUAGE: properties
CODE:
connection-url=jdbc:sap://<host>:<port>?encrypt=true;

----------------------------------------

TITLE: Concatenating Strings in Presto SQL
DESCRIPTION: Demonstrates the use of the || operator for string concatenation in Presto SQL.

LANGUAGE: SQL
CODE:
SELECT 'Hello' || ' ' || 'World' AS greeting;

----------------------------------------

TITLE: New Presto Window Functions
DESCRIPTION: Introduction of lead() and lag() window functions for accessing data from subsequent or previous rows in a result set.

LANGUAGE: sql
CODE:
lead()
lag()

----------------------------------------

TITLE: Configuring Stage Retries in Presto SQL
DESCRIPTION: Sets the maximum number of stage retries for failed stages. This configuration enables retrying failed stages from a materialized point instead of failing the entire query. The exchange_materialization_strategy must be set to ALL for this feature to work.

LANGUAGE: SQL
CODE:
SET SESSION max_stage_retries = 3;

----------------------------------------

TITLE: Defining TRUNCATE Syntax in Presto SQL
DESCRIPTION: Specifies the syntax for the TRUNCATE command in Presto SQL. This command is used to delete all rows from a specified table.

LANGUAGE: sql
CODE:
TRUNCATE TABLE table_name

----------------------------------------

TITLE: Dropping a Schema in Presto SQL
DESCRIPTION: Demonstrates how to drop the 'web' schema using the DROP SCHEMA command in Presto.

LANGUAGE: SQL
CODE:
DROP SCHEMA web

----------------------------------------

TITLE: Configuring Redis Provider Properties in Presto
DESCRIPTION: Sample configuration for the Redis HBO Provider in Presto. These properties are set in the etc/catalog/redis-provider.properties file and control various aspects of the Redis connection and behavior.

LANGUAGE: properties
CODE:
coordinator=true
hbo.redis-provider.enabled=true
hbo.redis-provider.total-fetch-timeoutms=5000
hbo.redis-provider.total-set-timeoutms=5000
hbo.redis-provider.default-ttl-seconds=4320000
hbo.redis-provider.cluster-mode-enabled=true
hbo.redis-provider.server_uri=redis://localhost:7001/

----------------------------------------

TITLE: Configuring Single Node Execution in Presto
DESCRIPTION: Configuration property and session property to enable single worker execution mode for improved latency on small queries in large clusters.

LANGUAGE: properties
CODE:
single-node-execution-enabled=true
single_node_execution_enabled=true

----------------------------------------

TITLE: Detecting Myanmar Font Encoding in Presto SQL
DESCRIPTION: This function determines whether the input text is encoded in Zawgyi or Unicode. It returns 'zawgyi' for Zawgyi-encoded text and 'unicode' otherwise.

LANGUAGE: SQL
CODE:
myanmar_font_encoding(text) -> varchar

----------------------------------------

TITLE: Querying Session Properties in Presto SQL
DESCRIPTION: The SHOW SESSION command is used to list the current session properties in Presto. It can be optionally filtered using a LIKE pattern. This command is useful for viewing and verifying session configurations.

LANGUAGE: sql
CODE:
SHOW SESSION [ LIKE pattern ]

----------------------------------------

TITLE: Retrieving Multiple Quantile Values from Quantile Digest in Presto SQL
DESCRIPTION: This function returns an array of approximate percentile values for a given array of quantiles (between 0 and 1) from a quantile digest.

LANGUAGE: sql
CODE:
values_at_quantiles(qdigest(T), quantiles) -> T

----------------------------------------

TITLE: Setting Query Timeout in JDBC Driver
DESCRIPTION: This snippet indicates the addition of support for setting query timeout in the JDBC driver using the 'Statement.setQueryTimeout()' method. This allows for better control over query execution time in JDBC applications.

LANGUAGE: plain
CODE:
Statement.setQueryTimeout()

----------------------------------------

TITLE: SQL Function Reference - bit_count
DESCRIPTION: Fix for the bit_count function to properly handle bits between positions 33 and 63.

LANGUAGE: sql
CODE:
bit_count()

----------------------------------------

TITLE: Referencing map_concat Function in Presto SQL
DESCRIPTION: Demonstrates the syntax for calling the map_concat function in Presto SQL queries. This function has been fixed to handle cases where the second map is empty.

LANGUAGE: sql
CODE:
:func:`!map_concat`

----------------------------------------

TITLE: Configuring Resource Group Management
DESCRIPTION: Sets up pluggable resource group management by specifying the configuration manager in the resource-groups.properties file.

LANGUAGE: Properties
CODE:
resource-groups.configuration-manager=custom-manager

----------------------------------------

TITLE: Querying Available Schemas in TPCH Connector
DESCRIPTION: This SQL query shows how to list all available schemas in the TPCH connector. It demonstrates the various scale factors available, including special schemas like 'information_schema' and 'tiny'.

LANGUAGE: sql
CODE:
SHOW SCHEMAS FROM tpch;

----------------------------------------

TITLE: Defining Presto Documentation Structure in reStructuredText
DESCRIPTION: This snippet defines the table of contents for Presto documentation using reStructuredText syntax. It includes a toctree directive with a maxdepth of 2 and lists all major documentation sections.

LANGUAGE: reStructuredText
CODE:
####################
Presto Documentation
####################

.. toctree::
    :maxdepth: 2

    overview
    installation
    clients
    security
    admin
    cache
    optimizer
    connector
    plugin
    functions
    language
    sql
    migration
    rest
    ecosystem
    router
    develop
    presto-cpp
    release

.. Note: If "release" is not the last item, the CSS must be updated.

----------------------------------------

TITLE: Inserting Data into PostgreSQL Table in Presto
DESCRIPTION: Demonstrates how to insert data into a PostgreSQL table using the INSERT INTO statement in Presto.

LANGUAGE: sql
CODE:
INSERT INTO postgresql.public.renamed_table (id, name) VALUES (1, 'Test');

----------------------------------------

TITLE: Renaming Schema Example
DESCRIPTION: Example demonstrating how to rename a schema named 'web' to 'traffic' using the ALTER SCHEMA command.

LANGUAGE: sql
CODE:
ALTER SCHEMA web RENAME TO traffic

----------------------------------------

TITLE: Dropping Function without Parameter Types
DESCRIPTION: Example demonstrating how to drop a function without specifying parameter types when only one function exists with that name.

LANGUAGE: sql
CODE:
DROP FUNCTION example.default.tan

----------------------------------------

TITLE: Using row_number Function in SQL
DESCRIPTION: Reference to the row_number function, which has received memory tracking improvements for queries involving DISTINCT operations.

LANGUAGE: SQL
CODE:
row_number()

----------------------------------------

TITLE: Implementing BeginDelete Method in ConnectorMetadata for Presto
DESCRIPTION: This method is called to start the DELETE operation. It performs necessary orchestration and returns a ConnectorTableHandle with additional information needed for the operation.

LANGUAGE: java
CODE:
ConnectorTableHandle beginDelete(
     ConnectorSession session,
     ConnectorTableHandle tableHandle)

----------------------------------------

TITLE: Using New String Padding Functions in Presto SQL
DESCRIPTION: Adds support for 'lpad' and 'rpad' functions to pad strings in Presto SQL queries.

LANGUAGE: sql
CODE:
lpad(string, length, padding)

LANGUAGE: sql
CODE:
rpad(string, length, padding)

----------------------------------------

TITLE: Applying truncate Function in Presto 0.143
DESCRIPTION: The newly added truncate function enables precise decimal truncation in Presto SQL queries.

LANGUAGE: SQL
CODE:
SELECT truncate(numeric_column, decimal_places) FROM table_name

----------------------------------------

TITLE: Configuring Presto JVM Options
DESCRIPTION: Example JVM configuration for Presto, including memory settings and garbage collection options.

LANGUAGE: none
CODE:
-server
-Xmx16G
-XX:+UseG1GC
-XX:G1HeapRegionSize=32M
-XX:+UseGCOverheadLimit
-XX:+ExplicitGCInvokesConcurrent
-XX:+HeapDumpOnOutOfMemoryError
-XX:+ExitOnOutOfMemoryError

----------------------------------------

TITLE: Exchange Configuration Properties
DESCRIPTION: Properties for configuring data exchange between nodes

LANGUAGE: properties
CODE:
exchange.client-threads=25
exchange.concurrent-request-multiplier=3
exchange.max-buffer-size=32MB
exchange.max-response-size=16MB

----------------------------------------

TITLE: Configuring HDFS Kerberos Authentication with Impersonation
DESCRIPTION: Example configuration for enabling Kerberos authentication and end-user impersonation for HDFS access.

LANGUAGE: none
CODE:
hive.hdfs.authentication.type=KERBEROS
hive.hdfs.impersonation.enabled=true
hive.hdfs.presto.principal=presto@EXAMPLE.COM
hive.hdfs.presto.keytab=/etc/presto/hdfs.keytab

----------------------------------------

TITLE: Creating Public Schema for Lark Sheets in Presto
DESCRIPTION: SQL command to create a public schema for a Lark spreadsheet in Presto. This allows the schema to be visible to users other than the creator.

LANGUAGE: sql
CODE:
CREATE SCHEMA my_ss WITH (TOKEN = 'shtcnBf5pg4BNSkwV2Ku5xwW9Pf', PUBLIC = true)

----------------------------------------

TITLE: Querying HANA Table Data in Presto
DESCRIPTION: SQL query to select all data from a specific table in the HANA catalog. This example demonstrates how to retrieve data from HANA through Presto.

LANGUAGE: sql
CODE:
SELECT * FROM hana.web.clicks;

----------------------------------------

TITLE: Querying with substring Function (2 parameters) in SQL
DESCRIPTION: An alias for the substr function, which extracts a substring from a string starting at a specified position.

LANGUAGE: SQL
CODE:
substring(string, start) -> varchar

----------------------------------------

TITLE: ORC Row Group Index Cache Configuration
DESCRIPTION: Properties to enable and configure in-memory ORC stripe row group index caching, including cache size and TTL settings.

LANGUAGE: properties
CODE:
orc.row-group-index-cache-enabled=true
orc.row-group-index-cache-size
orc.row-group-index-cache-ttl-since-last-access

----------------------------------------

TITLE: Displaying Query Plan with HBO Statistics in Presto
DESCRIPTION: This snippet shows an example of a query plan output in Presto that includes HBO statistics. It demonstrates how HBO statistics are displayed with the source 'HistoryBasedSourceInfo' for plan nodes.

LANGUAGE: text
CODE:
     Fragment 1 [HASH]                                                                                                                                            >
         Output layout: [orderpriority, count]                                                                                                                    >
         Output partitioning: SINGLE []                                                                                                                           >
         Stage Execution Strategy: UNGROUPED_EXECUTION                                                                                                            >
         - Project[PlanNodeId 392][projectLocality = LOCAL] => [orderpriority:varchar(15), count:bigint]                                                          >
                 Estimates: {source: HistoryBasedSourceInfo, rows: 5 (117B), cpu: ?, memory: ?, network: ?}                                                       >
             - Aggregate(FINAL)[orderpriority][$hashvalue][PlanNodeId 4] => [orderpriority:varchar(15), $hashvalue:bigint, count:bigint]                          >
                     Estimates: {source: HistoryBasedSourceInfo, rows: 5 (117B), cpu: ?, memory: ?, network: ?}                                                   >
                     count := "presto.default.count"((count_8)) (1:50)                                                                                            >
                 - LocalExchange[PlanNodeId 354][HASH][$hashvalue] (orderpriority) => [orderpriority:varchar(15), count_8:bigint, $hashvalue:bigint]              >
                     - RemoteSource[2] => [orderpriority:varchar(15), count_8:bigint, $hashvalue_9:bigint]

----------------------------------------

TITLE: Configuration Property Addition for Hive ZSTD Decompression
DESCRIPTION: Configuration property to enable JNI ZSTD decompressor for ORC files in Hive connector.

LANGUAGE: properties
CODE:
hive.zstd-jni-decompression-enabled

----------------------------------------

TITLE: Basic Presto Router Configuration Properties
DESCRIPTION: Core configuration properties for the Presto router web service, including HTTP port and logging settings.

LANGUAGE: none
CODE:
http-server.http.port=8080
http-server.log.max-history=3
http-server.log.max-size=500MB
router.config-file=etc/router-config.json

----------------------------------------

TITLE: Table Properties Management
DESCRIPTION: Example showing how to set table properties.

LANGUAGE: sql
CODE:
ALTER TABLE users SET PROPERTIES (x='y');

----------------------------------------

TITLE: Setting Query Max Execution Time in Presto
DESCRIPTION: Configures the maximum execution time for queries using either a session property or a config property. Queries will be automatically aborted if they exceed this duration.

LANGUAGE: SQL
CODE:
query_max_execution_time

LANGUAGE: SQL
CODE:
query.max-execution-time

----------------------------------------

TITLE: Using regexp_like for Pattern Matching
DESCRIPTION: Checks if a string contains a pattern matching a number followed by 'b'.

LANGUAGE: sql
CODE:
SELECT regexp_like('1a 2b 14m', '\d+b'); -- true

----------------------------------------

TITLE: Duration Parsing Example in Presto SQL
DESCRIPTION: Shows how to parse duration strings into intervals using the parse_duration function

LANGUAGE: sql
CODE:
SELECT parse_duration('42.8ms');
SELECT parse_duration('3.81 d');
SELECT parse_duration('5m');

----------------------------------------

TITLE: Casting HyperLogLog to P4HyperLogLog in Presto SQL
DESCRIPTION: Demonstrates how to explicitly cast a HyperLogLog type to P4HyperLogLog type in Presto SQL. This is useful when working with different HyperLogLog implementations.

LANGUAGE: sql
CODE:
cast(hll AS P4HyperLogLog)

----------------------------------------

TITLE: Executing SHOW COLUMNS Command in Presto SQL
DESCRIPTION: This command lists all columns in a specified table along with their data types and other attributes. It provides a quick way to inspect the structure of a table in Presto.

LANGUAGE: sql
CODE:
SHOW COLUMNS FROM table

----------------------------------------

TITLE: Querying Invalid Data with TRY Function in Presto SQL
DESCRIPTION: Demonstrates the use of TRY function to handle invalid data in a query. It returns NULL for invalid cast operations instead of causing a query failure.

LANGUAGE: sql
CODE:
SELECT TRY(CAST(origin_zip AS BIGINT)) FROM shipping;

----------------------------------------

TITLE: Querying with FETCH FIRST Syntax in SQL
DESCRIPTION: Demonstrates the new ANSI SQL compliant syntax for limiting result rows, equivalent to the LIMIT clause.

LANGUAGE: SQL
CODE:
SELECT * FROM table_name FETCH FIRST 3 ROWS ONLY

----------------------------------------

TITLE: Configuring S3-Compatible Storage in Hive Connector
DESCRIPTION: Configuration properties for setting up S3-compatible storage in the Hive connector. These properties allow specifying the S3 endpoint, signer type, and user agent prefix.

LANGUAGE: Properties
CODE:
hive.s3.endpoint=<s3-compatible-endpoint>
hive.s3.signer-type=<signer-type>
hive.s3.user-agent-prefix=<custom-prefix>

----------------------------------------

TITLE: Interpolating Color Based on Value Range in Presto SQL
DESCRIPTION: This function interpolates a color between two given colors based on a value within a specified range. It calculates the fraction and uses it for color interpolation.

LANGUAGE: SQL
CODE:
color(x, low, high, low_color, high_color) -> color

----------------------------------------

TITLE: Basic Hive Properties Configuration
DESCRIPTION: Example configuration in etc/catalog/hive.properties to mount the hive-hadoop2 connector as the hive catalog.

LANGUAGE: none
CODE:
connector.name=hive-hadoop2
hive.metastore.uri=thrift://example.net:9083

----------------------------------------

TITLE: Configuring Hive Local Scheduling
DESCRIPTION: Configuration options to enable forced local scheduling of splits in Hive connector. Includes both system-wide configuration and session property settings.

LANGUAGE: properties
CODE:
hive.force-local-scheduling
force_local_scheduling

----------------------------------------

TITLE: Distributed Plan Example
DESCRIPTION: Example showing a distributed execution plan with multiple fragments for a GROUP BY query.

LANGUAGE: sql
CODE:
presto:tiny> EXPLAIN (TYPE DISTRIBUTED) SELECT regionkey, count(*) FROM nation GROUP BY 1;

----------------------------------------

TITLE: Rendering ANSI Bar Chart with Default Colors in Presto SQL
DESCRIPTION: This function renders a single bar in an ANSI bar chart using default red and green colors. It takes the bar's value and width as parameters.

LANGUAGE: SQL
CODE:
bar(x, width) -> varchar

----------------------------------------

TITLE: IP Prefix Collapse in Presto SQL
DESCRIPTION: Combines multiple IP prefixes into minimal CIDR representation. Requires all inputs to be same IP version.

LANGUAGE: sql
CODE:
SELECT IP_PREFIX_COLLAPSE(ARRAY[IPPREFIX '192.168.0.0/24', IPPREFIX '192.168.1.0/24']);
SELECT IP_PREFIX_COLLAPSE(ARRAY[IPPREFIX '192.168.1.0/24', IPPREFIX '192.168.0.0/24', IPPREFIX '192.168.2.0/24', IPPREFIX '192.168.9.0/24']);

----------------------------------------

TITLE: Configuring Spark Memory Revoking Target in Presto
DESCRIPTION: Shows how to set the spark.memory-revoking-target configuration property and spark_memory_revoking_target session property to specify the occupancy percent of memory pool after revoke is completed in Presto on Spark.

LANGUAGE: sql
CODE:
SET SESSION spark_memory_revoking_target = 0.75;

----------------------------------------

TITLE: Using regexp_extract with Simple Pattern
DESCRIPTION: Extracts the first substring matching a numeric pattern.

LANGUAGE: sql
CODE:
SELECT regexp_extract('1a 2b 14m', '\d+'); -- 1

----------------------------------------

TITLE: Configuring Minimum Task Drivers in Presto Properties
DESCRIPTION: Configuration property to control the minimum number of concurrent drivers per task, helping to limit the number of concurrent readers in the system.

LANGUAGE: properties
CODE:
task.min-drivers

----------------------------------------

TITLE: New IEEE 754 Conversion Functions in SQL
DESCRIPTION: Introduces two new functions for converting IEEE 754 floating-point representations: from_ieee754_32() for 32-bit and from_ieee754_64() for 64-bit conversions.

LANGUAGE: SQL
CODE:
from_ieee754_32()

LANGUAGE: SQL
CODE:
from_ieee754_64()

----------------------------------------

TITLE: Defining ReStructuredText Table of Contents
DESCRIPTION: ReStructuredText directive for creating a table of contents tree with links to router deployment and scheduler documentation pages.

LANGUAGE: restructuredtext
CODE:
.. toctree::
    :maxdepth: 1

    router/deployment
    router/scheduler

----------------------------------------

TITLE: START TRANSACTION Usage Examples
DESCRIPTION: Demonstrates various ways to use the START TRANSACTION command with different isolation levels and read/write modes.

LANGUAGE: sql
CODE:
START TRANSACTION;
START TRANSACTION ISOLATION LEVEL REPEATABLE READ;
START TRANSACTION READ WRITE;
START TRANSACTION ISOLATION LEVEL READ COMMITTED, READ ONLY;
START TRANSACTION READ WRITE, ISOLATION LEVEL SERIALIZABLE;

----------------------------------------

TITLE: Granting SELECT Privilege with GRANT OPTION in Presto
DESCRIPTION: Example of granting SELECT privilege on the 'nation' table to the user 'alice' with the WITH GRANT OPTION clause, allowing alice to grant this privilege to others.

LANGUAGE: sql
CODE:
GRANT SELECT ON nation TO alice WITH GRANT OPTION;

----------------------------------------

TITLE: Enabling Segmented Aggregation in Presto SQL
DESCRIPTION: Demonstrates how to enable segmented aggregation to reduce memory footprint and improve performance when data is ordered by a subset of group-by keys. This can be done using a session property or configuration property.

LANGUAGE: SQL
CODE:
SET SESSION segmented_aggregation_enabled = true;

LANGUAGE: SQL
CODE:
-- Alternatively, set in configuration:
-- optimizer.segmented-aggregation-enabled=true

----------------------------------------

TITLE: Configuring Presto Task Properties
DESCRIPTION: Basic configuration properties for Presto on Spark, setting task concurrency, worker threads, and writer count. These values should match the number of cores per executor in the Spark configuration.

LANGUAGE: properties
CODE:
task.concurrency=4
task.max-worker-threads=4
task.writer-count=4

----------------------------------------

TITLE: Verifier Base Configuration Properties
DESCRIPTION: Basic configuration properties for Presto Verifier including database connection and cluster settings.

LANGUAGE: none
CODE:
source-query.suites=suite
source-query.database=jdbc:mysql://localhost:3306/mydb?user=my_username&password=my_password
control.hosts=127.0.0.1
control.http-port=8080
control.jdbc-port=8080
control.application-name=verifier-test
test.hosts=127.0.0.1
test.http-port=8081
test.jdbc-port=8081
test.application-name=verifier-test
test-id=1

----------------------------------------

TITLE: Setting JDBC Session Properties
DESCRIPTION: Example demonstrating how to set session properties in a JDBC connection by unwrapping the connection object to access Presto-specific functionality.

LANGUAGE: java
CODE:
connection.unwrap(PrestoConnection.class).setSessionProperty("name", "value");

----------------------------------------

TITLE: Basic CREATE TABLE AS Syntax
DESCRIPTION: The complete syntax definition for the CREATE TABLE AS command in Presto SQL, including optional parameters for IF NOT EXISTS clause, column aliases, table comments, and properties.

LANGUAGE: sql
CODE:
CREATE TABLE [ IF NOT EXISTS ] table_name [ ( column_alias, ... ) ]
[ COMMENT table_comment ]
[ WITH ( property_name = expression [, ...] ) ]
AS query
[ WITH [ NO ] DATA ]

----------------------------------------

TITLE: Removing Deprecated Cassandra Thrift Configuration
DESCRIPTION: Lists the deprecated Cassandra configuration options that must be removed when upgrading to support Cassandra 3.x.

LANGUAGE: properties
CODE:
# The following options are now defunct and must be removed:
cassandra.thrift-port
cassandra.thrift-connection-factory-class
cassandra.transport-factory-options
cassandra.partitioner

----------------------------------------

TITLE: Revoking All Privileges in Presto SQL
DESCRIPTION: Illustrates how to revoke all privileges on the 'test' table from the user 'alice' using the REVOKE command with the ALL PRIVILEGES clause in Presto SQL.

LANGUAGE: sql
CODE:
REVOKE ALL PRIVILEGES ON test FROM alice;

----------------------------------------

TITLE: SQL Function Reference Updates
DESCRIPTION: Documentation of new and modified SQL functions including array_intersect, array_distinct, reduce_agg, and millisecond function improvements.

LANGUAGE: sql
CODE:
array_intersect()
array_distinct()
reduce_agg()
millisecond()

----------------------------------------

TITLE: Accessing Bucket Number in Hive Tables with Presto
DESCRIPTION: Use the hidden $bucket column to access the bucket number for the current row in bucketed Hive tables. This feature allows for more advanced querying and analysis of bucketed data.

LANGUAGE: sql
CODE:
SELECT *, $bucket FROM bucketed_table

----------------------------------------

TITLE: Show Create Function All Signatures Example
DESCRIPTION: Example showing how to display creation SQL for all overloaded versions of the array_sum function.

LANGUAGE: sql
CODE:
SHOW CREATE FUNCTION example.default.array_sum

----------------------------------------

TITLE: Array Concatenation in Presto SQL
DESCRIPTION: Shows how to concatenate arrays using the || operator, which can combine arrays with arrays or single elements.

LANGUAGE: sql
CODE:
SELECT ARRAY [1] || ARRAY [2]; -- [1, 2]
SELECT ARRAY [1] || 2; -- [1, 2]
SELECT 2 || ARRAY [1]; -- [2, 1]

----------------------------------------

TITLE: Configuring Presto Compiler Interpreter in SQL
DESCRIPTION: This configuration option disables falling back to the interpreter when expressions fail to be compiled to bytecode. It forces certain queries to fail rather than running slowly.

LANGUAGE: SQL
CODE:
compiler.interpreter-enabled=false

----------------------------------------

TITLE: Querying Distinct Aggregations in Presto SQL
DESCRIPTION: Example of using DISTINCT qualifier with multiple COUNT aggregations, grouped by country. Note that approx_distinct() is recommended for better performance when approximate results are acceptable.

LANGUAGE: sql
CODE:
SELECT country, count(DISTINCT city), count(DISTINCT age)
FROM users
GROUP BY country

----------------------------------------

TITLE: Configuring Alluxio SDK Cache in Presto's Hive Properties
DESCRIPTION: This code snippet shows the configuration settings required in the 'etc/catalog/hive.properties' file to enable and configure the Alluxio SDK cache in Presto. It includes settings for node selection strategy, cache type, maximum cache size, and base directory.

LANGUAGE: properties
CODE:
hive.node-selection-strategy=SOFT_AFFINITY
cache.enabled=true
cache.type=ALLUXIO
cache.alluxio.max-cache-size=500GB
cache.base-directory=/tmp/alluxio-cache

----------------------------------------

TITLE: Enabling Optimized ORC Writer in Presto Hive Connector
DESCRIPTION: Introduces a new experimental ORC writer implementation for improved performance in the Hive connector. It can be enabled via configuration or session properties.

LANGUAGE: SQL
CODE:
SET SESSION hive.orc.optimized-writer.enabled = true;

----------------------------------------

TITLE: Calculating Intersection Cardinality of Set Digests in Presto SQL
DESCRIPTION: Shows how to estimate the cardinality of the intersection of two set digests using the intersection_cardinality function.

LANGUAGE: SQL
CODE:
SELECT intersection_cardinality(make_set_digest(v1), make_set_digest(v2))
FROM (VALUES (1, 1), (NULL, 2), (2, 3), (3, 4)) T(v1, v2);

----------------------------------------

TITLE: Implementing Parametric NULL Check Function in Java
DESCRIPTION: Generic implementation of is_null function that works with any type parameter. Uses @TypeParameter for type generalization.

LANGUAGE: java
CODE:
@ScalarFunction(name = "is_null", calledOnNullInput = true)
@Description("Returns TRUE if the argument is NULL")
public final class IsNullFunction
{
    @TypeParameter("T")
    @SqlType(StandardTypes.BOOLEAN)
    public static boolean isNullSlice(@SqlNullable @SqlType("T") Slice value)
    {
        return (value == null);
    }

    @TypeParameter("T")
    @SqlType(StandardTypes.BOOLEAN)
    public static boolean isNullLong(@SqlNullable @SqlType("T") Long value)
    {
        return (value == null);
    }

    @TypeParameter("T")
    @SqlType(StandardTypes.BOOLEAN)
    public static boolean isNullDouble(@SqlNullable @SqlType("T") Double value)
    {
        return (value == null);
    }
}

----------------------------------------

TITLE: Configuring Resource Overcommit in Presto
DESCRIPTION: This configuration flag allows queries to use more resources than normally allocated. When set to true, queries may be killed if cluster memory is low before reaching the query.max-memory limit.

LANGUAGE: SQL
CODE:
resource_overcommit=true

----------------------------------------

TITLE: Creating Table with IF NOT EXISTS Clause
DESCRIPTION: Creates a new table orders_by_date only if it doesn't already exist, containing summarized order data grouped by date.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS orders_by_date AS
SELECT orderdate, sum(totalprice) AS price
FROM orders
GROUP BY orderdate

----------------------------------------

TITLE: Parsing Row Types with Spaces in SQL
DESCRIPTION: Example of a row expression that now parses correctly after fixing an issue with row types containing spaces in field types.

LANGUAGE: SQL
CODE:
cast(row(timestamp '2018-06-01') AS row(timestamp with time zone))

----------------------------------------

TITLE: Implementing Average Aggregation Function in Java
DESCRIPTION: Example of an aggregation function that computes average of DOUBLE values. Uses @AggregationFunction with input, combine and output functions.

LANGUAGE: java
CODE:
@AggregationFunction("avg_double")
public class AverageAggregation
{
    @InputFunction
    public static void input(LongAndDoubleState state, @SqlType(StandardTypes.DOUBLE) double value)
    {
        state.setLong(state.getLong() + 1);
        state.setDouble(state.getDouble() + value);
    }

    @CombineFunction
    public static void combine(LongAndDoubleState state, LongAndDoubleState otherState)
    {
        state.setLong(state.getLong() + otherState.getLong());
        state.setDouble(state.getDouble() + otherState.getDouble());
    }

    @OutputFunction(StandardTypes.DOUBLE)
    public static void output(LongAndDoubleState state, BlockBuilder out)
    {
        long count = state.getLong();
        if (count == 0) {
            out.appendNull();
        }
        else {
            double value = state.getDouble();
            DOUBLE.writeDouble(out, value / count);
        }
    }
}

----------------------------------------

TITLE: Configuring Multiple Authentication Types in Presto
DESCRIPTION: Demonstrates how to configure multiple authentication types for Presto by specifying comma-separated values for the http-server.authentication.type setting. This allows supporting clients with different authentication requirements or migrating between authentication types.

LANGUAGE: Properties
CODE:
http-server.authentication.type=TYPE1,TYPE2,TYPE3

----------------------------------------

TITLE: Configuring Druid Connector Properties in Presto
DESCRIPTION: This snippet shows the basic configuration properties required to set up the Druid connector in Presto. It includes the connector name, Druid coordinator and broker URLs, schema name, and compute pushdown setting.

LANGUAGE: properties
CODE:
connector.name=druid
druid.coordinator-url=hostname:port
druid.broker-url=hostname:port
druid.schema-name=schema
druid.compute-pushdown-enabled=true

----------------------------------------

TITLE: Listing All Grants in Current Catalog in Presto SQL
DESCRIPTION: An example of using the SHOW GRANTS command without specifying a table name, which lists the grants for the current user on all tables in all schemas of the current catalog.

LANGUAGE: sql
CODE:
SHOW GRANTS;

----------------------------------------

TITLE: Implementing Begin Delete Method
DESCRIPTION: Method signature for initiating a delete operation on a table.

LANGUAGE: java
CODE:
ConnectorTableHandle beginDelete(
     ConnectorSession session,
     ConnectorTableHandle tableHandle)

----------------------------------------

TITLE: Demonstrating NULL handling in NOT operations in Presto SQL
DESCRIPTION: This SQL query shows how the NOT operator handles NULL values in Presto. The result demonstrates that the logical complement of NULL is NULL.

LANGUAGE: sql
CODE:
SELECT NOT CAST(null AS boolean); -- null

----------------------------------------

TITLE: Launching Presto on Spark Command
DESCRIPTION: Spark submit command to execute Presto queries on a Spark cluster. Includes configuration for executor cores, task CPU allocation, and various Presto-specific parameters like catalog and schema settings.

LANGUAGE: shell
CODE:
/spark/bin/spark-submit \
--master spark://spark-master:7077 \
--executor-cores 4 \
--conf spark.task.cpus=4 \
--class com.facebook.presto.spark.launcher.PrestoSparkLauncher \
  presto-spark-launcher-|version|.jar \
--package presto-spark-package-|version|.tar.gz \
--config /presto/etc/config.properties \
--catalogs /presto/etc/catalogs \
--catalog hive \
--schema default \
--file query.sql

----------------------------------------

TITLE: Configuring Data Redistribution in Presto 0.109
DESCRIPTION: Session and config properties to control data redistribution when writing tables. This feature is enabled by default but can be disabled.

LANGUAGE: properties
CODE:
redistribute_writes

LANGUAGE: properties
CODE:
redistribute-writes

----------------------------------------

TITLE: Configuring Affinity Scheduling File Section Size in Hive Connector
DESCRIPTION: This example demonstrates how to set the affinity scheduling file section size for improved scheduling granularity in the Hive connector using both configuration and session properties.

LANGUAGE: Properties
CODE:
hive.affinity-scheduling-file-section-size=256MB

LANGUAGE: SQL
CODE:
SET SESSION affinity_scheduling_file_section_size = '256MB';

----------------------------------------

TITLE: Complete Customer Topic Mapping
DESCRIPTION: Full JSON configuration mapping both key and message fields for customer topic

LANGUAGE: json
CODE:
{
    "tableName": "customer",
    "schemaName": "tpch",
    "topicName": "tpch.customer",
    "key": {
        "dataFormat": "raw",
        "fields": [
            {
                "name": "kafka_key",
                "dataFormat": "LONG",
                "type": "BIGINT",
                "hidden": "false"
            }
        ]
    },
    "message": {
        "dataFormat": "json",
        "fields": [
            {
                "name": "row_number",
                "mapping": "rowNumber",
                "type": "BIGINT"
            },
            {
                "name": "customer_key",
                "mapping": "customerKey",
                "type": "BIGINT"
            },
            {
                "name": "name",
                "mapping": "name",
                "type": "VARCHAR"
            },
            {
                "name": "address",
                "mapping": "address",
                "type": "VARCHAR"
            },
            {
                "name": "nation_key",
                "mapping": "nationKey",
                "type": "BIGINT"
            },
            {
                "name": "phone",
                "mapping": "phone",
                "type": "VARCHAR"
            },
            {
                "name": "account_balance",
                "mapping": "accountBalance",
                "type": "DOUBLE"
            },
            {
                "name": "market_segment",
                "mapping": "marketSegment",
                "type": "VARCHAR"
            },
            {
                "name": "comment",
                "mapping": "comment",
                "type": "VARCHAR"
            }
        ]
    }
}

----------------------------------------

TITLE: Retrieving Failed Nodes in Presto
DESCRIPTION: This endpoint returns a list of nodes that have failed the last heartbeat check. The response format is similar to the GET /v1/node endpoint, but only includes nodes that have failed.

LANGUAGE: http
CODE:
GET /v1/node/failed

HTTP/1.1 200 OK
Vary: Accept
Content-Type: text/javascript

[
   {
      "age": "1.37m",
      "lastFailureInfo": {
          "message": "Connect Timeout",
          "stack": [
              "org.eclipse.jetty.io.ManagedSelector$ConnectTimeout.run(ManagedSelector.java:683)",
              ....
              "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)",
              "java.lang.Thread.run(Thread.java:745)"
          ],
          "suppressed": [],
          "type": "java.net.SocketTimeoutException"
      },
      "lastRequestTime": "2017-08-05T11:52:42.647Z",
      "lastResponseTime": "2017-08-05T11:52:42.647Z",
      "recentFailureRatio": 0.22498784153043677,
      "recentFailures": 20.11558290058638,
      "recentFailuresByType": {
          "java.net.SocketTimeoutException": 20.11558290058638
      },
      "recentRequests": 89.40742203558189,
      "recentSuccesses": 69.30583024727453,
      "uri": "http://172.19.0.3:8080"
   }
]

----------------------------------------

TITLE: Grouping Data by Hour Using date_trunc Function in SQL
DESCRIPTION: Demonstrates how to use the new date_trunc function to perform aggregation by hour on a timestamp column. This function is useful for grouping data by specific time spans.

LANGUAGE: SQL
CODE:
SELECT date_trunc('hour', timestamp_column), count(*)
FROM ...
GROUP BY 1

----------------------------------------

TITLE: Casting to JSON in Presto
DESCRIPTION: Examples of casting various SQL types to JSON format, including primitives, arrays, maps and row types

LANGUAGE: sql
CODE:
SELECT CAST(NULL AS JSON); -- NULL
SELECT CAST(1 AS JSON); -- JSON '1'
SELECT CAST(9223372036854775807 AS JSON); -- JSON '9223372036854775807'
SELECT CAST('abc' AS JSON); -- JSON '"abc"'
SELECT CAST(true AS JSON); -- JSON 'true'
SELECT CAST(1.234 AS JSON); -- JSON '1.234'
SELECT CAST(ARRAY[1, 23, 456] AS JSON); -- JSON '[1,23,456]'
SELECT CAST(ARRAY[1, NULL, 456] AS JSON); -- JSON '[1,null,456]'
SELECT CAST(ARRAY[ARRAY[1, 23], ARRAY[456]] AS JSON); -- JSON '[[1,23],[456]]'
SELECT CAST(MAP_FROM_ENTRIES(ARRAY[('k1', 1), ('k2', 23), ('k3', 456)]) AS JSON); -- JSON '{"k1":1,"k2":23,"k3":456}'
SELECT CAST(CAST(ROW(123, 'abc', true) AS ROW(v1 BIGINT, v2 VARCHAR, v3 BOOLEAN)) AS JSON); -- JSON '[123,"abc",true]'

----------------------------------------

TITLE: Setting Query Memory Limits in Presto SQL
DESCRIPTION: Set memory limits for queries to control resource usage. The query_max_memory and query_max_memory_per_node properties are used to set these limits.

LANGUAGE: sql
CODE:
SET SESSION query_max_memory = '10GB'
SET SESSION query_max_memory_per_node = '2GB'

----------------------------------------

TITLE: Time Zone Conversion in SQL
DESCRIPTION: Examples showing timestamp creation with time zones and time zone conversion operations

LANGUAGE: sql
CODE:
SELECT TIMESTAMP '2014-03-14 09:30:00 Europe/Berlin';
-- 2014-03-14 09:30:00.000 Europe/Berlin

LANGUAGE: sql
CODE:
SELECT TIMESTAMP '2014-03-14 09:30:00 Europe/Berlin'
     AT TIME ZONE 'America/Los_Angeles';
-- 2014-03-14 01:30:00.000 America/Los_Angeles

----------------------------------------

TITLE: Presto Query States
DESCRIPTION: List of possible query states in Presto's web interface with their meanings. These states indicate the current status of query execution from initial queuing to completion or failure.

LANGUAGE: plaintext
CODE:
QUEUED -- Query has been accepted and is awaiting execution.
PLANNING -- Query is being planned.
STARTING -- Query execution is being started.
RUNNING -- Query has at least one running task.
BLOCKED -- Query is blocked and is waiting for resources (buffer space, memory, splits, etc.).
FINISHING -- Query is finishing (e.g. commit for autocommit queries).
FINISHED -- Query has finished executing and all output has been consumed.
FAILED -- Query execution failed.

----------------------------------------

TITLE: REVOKE ROLES Syntax in Presto SQL
DESCRIPTION: The syntax for the REVOKE ROLES command in Presto SQL. It allows revoking roles or admin options from users or roles, with an optional GRANTED BY clause.

LANGUAGE: sql
CODE:
REVOKE
[ ADMIN OPTION FOR ]
role [, ...]
FROM ( user | USER user | ROLE role) [, ...]
[ GRANTED BY ( user | USER user | ROLE role | CURRENT_USER | CURRENT_ROLE ) ]

----------------------------------------

TITLE: Configuring Hadoop Catalog
DESCRIPTION: Basic configuration for using Hadoop catalog with the Iceberg connector

LANGUAGE: none
CODE:
connector.name=iceberg
iceberg.catalog.type=hadoop
iceberg.catalog.warehouse=hdfs://hostname:port

----------------------------------------

TITLE: Resetting Session Properties Syntax in Presto
DESCRIPTION: Demonstrates the syntax for resetting session properties in Presto. It shows two forms: resetting a general session property and resetting a catalog-specific property.

LANGUAGE: sql
CODE:
RESET SESSION name
RESET SESSION catalog.name

----------------------------------------

TITLE: File-Based Authorization Configuration
DESCRIPTION: Example JSON configuration for file-based authorization, defining rules for schema ownership, table privileges, and session property access.

LANGUAGE: json
CODE:
{
  "schemas": [
    {
      "user": "admin",
      "schema": ".*",
      "owner": true
    },
    {
      "user": "guest",
      "owner": false
    },
    {
      "schema": "default",
      "owner": true
    }
  ],
  "tables": [
    {
      "user": "admin",
      "privileges": ["SELECT", "INSERT", "DELETE", "OWNERSHIP"]
    },
    {
      "user": "banned_user",
      "privileges": []
    },
    {
      "schema": "default",
      "table": ".*",
      "privileges": ["SELECT"]
    }
  ],
  "sessionProperties": [
    {
      "property": "force_local_scheduling",
      "allow": true
    },
    {
      "user": "admin",
      "property": "max_split_size",
      "allow": true
    }
  ]
}

----------------------------------------

TITLE: Using to_big_endian_64 Function in SQL
DESCRIPTION: The to_big_endian_64 function is a new addition in this release. It converts a 64-bit integer to its big-endian representation.

LANGUAGE: sql
CODE:
SELECT to_big_endian_64(integer_column) FROM table_name;

----------------------------------------

TITLE: Dropping a Specific Table in Presto SQL
DESCRIPTION: Shows an example of dropping a specific table named 'orders_by_date'. This command will remove the table from the database if it exists.

LANGUAGE: sql
CODE:
DROP TABLE orders_by_date

----------------------------------------

TITLE: Configuring Authorization Settings in Presto
DESCRIPTION: This code block demonstrates how to configure authorization settings in Presto's config.properties file. It includes enabling authorization, setting default policy, specifying allowed roles, and handling unsecured requests.

LANGUAGE: none
CODE:
http-server.authorization.enabled=true
http-server.authorization.default-policy=ALLOW
http-server.authorization.default-allowed-roles=USER,ADMIN
http-server.authorization.allow-unsecured-requests=false

----------------------------------------

TITLE: SQL COMMIT Command Syntax
DESCRIPTION: Shows the basic syntax pattern for the COMMIT command, which can optionally include the WORK keyword.

LANGUAGE: sql
CODE:
COMMIT [ WORK ]

----------------------------------------

TITLE: Scaling T-Digest
DESCRIPTION: Scales a T-digest distribution by a specified factor.

LANGUAGE: sql
CODE:
scale_tdigest(tdigest<double>, scale_factor) -> tdigest<double>

----------------------------------------

TITLE: Creating Table of Contents for Presto Migration Documentation
DESCRIPTION: This ReStructuredText code creates a table of contents for Presto migration documentation. It sets the maximum depth to 1 and includes a link to the 'migration/from-hive' document.

LANGUAGE: restructuredtext
CODE:
.. toctree::
    :maxdepth: 1

    migration/from-hive

----------------------------------------

TITLE: Using Width Bucket Function in Presto SQL
DESCRIPTION: Introduces the 'width_bucket' function for use in Presto SQL queries.

LANGUAGE: sql
CODE:
width_bucket(operand, bound1, bound2, buckets)

----------------------------------------

TITLE: Showing Functions with Pattern Matching in SQL
DESCRIPTION: Demonstrates the new syntax for listing functions whose names match a specified pattern using the SHOW FUNCTION LIKE command in SQL.

LANGUAGE: SQL
CODE:
SHOW FUNCTION LIKE 'pattern'

----------------------------------------

TITLE: Querying System Schemas in Presto
DESCRIPTION: Shows how to list available schemas in the system catalog.

LANGUAGE: sql
CODE:
SHOW SCHEMAS FROM system;

----------------------------------------

TITLE: Creating a Table with Constraints and Comments in Presto SQL
DESCRIPTION: An example of creating a table 'orders' with IF NOT EXISTS clause, table comment, column comment, NOT NULL constraint, and primary key constraint.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS orders (
  orderkey bigint,
  orderstatus varchar NOT NULL,
  totalprice double COMMENT 'Price in cents.',
  orderdate date,
  PRIMARY KEY (orderkey)
)
COMMENT 'A table to keep track of orders.'

----------------------------------------

TITLE: Configuring Presto Router Properties
DESCRIPTION: Example configuration file (etc/config.properties) for Presto Router, specifying web service settings such as HTTP port, log settings, and router configuration file location.

LANGUAGE: none
CODE:
http-server.http.port=8080
http-server.log.max-history=3
http-server.log.max-size=500MB
router.config-file=etc/router-config.json

----------------------------------------

TITLE: Enabling ORC Bloom Filters in Hive Connector
DESCRIPTION: Configuration property and session property for enabling ORC bloom filters in predicate push down for the Hive connector.

LANGUAGE: Properties
CODE:
hive.orc.bloom-filters.enabled=true

LANGUAGE: SQL
CODE:
SET SESSION orc_bloom_filters_enabled = true;

----------------------------------------

TITLE: Configuring Presto Web Connector URL in Tableau
DESCRIPTION: The URL format for connecting Tableau to a Presto coordinator. Replace example.net:8080 with the actual hostname and port number of your Presto coordinator instance. The default port is 8080.

LANGUAGE: none
CODE:
http://example.net:8080/tableau/presto-connector.html

----------------------------------------

TITLE: Dropping Delta Lake Table
DESCRIPTION: SQL command to drop a Delta Lake table metadata while preserving the underlying data

LANGUAGE: sql
CODE:
DROP TABLE sales.apac.sales_data_new;

----------------------------------------

TITLE: Subquery Examples
DESCRIPTION: Different types of subqueries including EXISTS, IN and scalar subqueries

LANGUAGE: SQL
CODE:
SELECT name
FROM nation
WHERE EXISTS (SELECT * FROM region WHERE region.regionkey = nation.regionkey)

----------------------------------------

TITLE: TABLESAMPLE Usage
DESCRIPTION: Examples of using TABLESAMPLE with BERNOULLI and SYSTEM methods.

LANGUAGE: SQL
CODE:
SELECT *
FROM users TABLESAMPLE BERNOULLI (50);

SELECT *
FROM users TABLESAMPLE SYSTEM (75);

----------------------------------------

TITLE: Listing Tables in Redshift Schema
DESCRIPTION: This SQL snippet shows how to list tables within a specific Redshift schema using the SHOW TABLES command in Presto.

LANGUAGE: sql
CODE:
SHOW TABLES FROM redshift.web;

----------------------------------------

TITLE: Network Address Type Examples
DESCRIPTION: Examples of IP address and prefix type declarations in Presto

LANGUAGE: sql
CODE:
IPADDRESS '10.0.0.1'
IPADDRESS '2001:db8::1'
IPPREFIX '10.0.1.0/24'
IPPREFIX '2001:db8::/48'

----------------------------------------

TITLE: Referencing Presto Documentation in RST
DESCRIPTION: This RST code snippet demonstrates how to reference Presto documentation for session property managers using a directive.

LANGUAGE: rst
CODE:
:doc:`/admin/session-property-managers`

----------------------------------------

TITLE: Configuring Lark Sheets Connector in Presto
DESCRIPTION: Configuration properties for the Lark Sheets connector in Presto. This snippet shows how to set up the connector in the catalog file, including specifying the app domain, app ID, and path to the app secret file.

LANGUAGE: text
CODE:
connector.name=lark-sheets
app-domain=FEISHU
app-id=example_app_id
app-secret-file=/path/to/app-secret.json

----------------------------------------

TITLE: Table Renaming Operations
DESCRIPTION: Examples demonstrating how to rename tables with and without IF EXISTS clause.

LANGUAGE: sql
CODE:
ALTER TABLE users RENAME TO people;

LANGUAGE: sql
CODE:
ALTER TABLE IF EXISTS users RENAME TO people;

----------------------------------------

TITLE: Querying View Definition in Presto SQL
DESCRIPTION: Shows the syntax for retrieving the CREATE VIEW statement that defines a specific view. The command requires a view name parameter and returns the complete SQL definition of the view.

LANGUAGE: sql
CODE:
SHOW CREATE VIEW view_name

----------------------------------------

TITLE: Hive Partition Keys Configuration
DESCRIPTION: Configuration property to enable optimized metastore partition fetching for non-string partition keys.

LANGUAGE: Properties
CODE:
hive.assume-canonical-partition-keys=true

----------------------------------------

TITLE: Setting Homebrew Path on Apple Silicon Mac
DESCRIPTION: Command to set the PATH environment variable to prioritize the Intel version of Homebrew on an Apple Silicon Mac.

LANGUAGE: bash
CODE:
export PATH=/usr/local/bin:$PATH

----------------------------------------

TITLE: Implementing Subtraction for TIME and TIMESTAMP Types in SQL
DESCRIPTION: This change adds support for subtraction operations between all TIME and TIMESTAMP types in Presto SQL queries.

LANGUAGE: SQL
CODE:
SELECT timestamp1 - timestamp2 AS time_difference;

----------------------------------------

TITLE: Trimming Strings with ltrim() in Presto SQL
DESCRIPTION: Demonstrates the use of ltrim() function to remove characters from the beginning of a string in Presto SQL.

LANGUAGE: SQL
CODE:
SELECT ltrim('test', 't'); -- Returns 'est'
SELECT ltrim('tetris', 'te'); -- Returns 'ris'

----------------------------------------

TITLE: Creating Aggregated View Example
DESCRIPTION: Shows how to create a view that summarizes data using GROUP BY and aggregate functions.

LANGUAGE: sql
CODE:
CREATE VIEW orders_by_date AS
SELECT orderdate, sum(totalprice) AS price
FROM orders
GROUP BY orderdate

----------------------------------------

TITLE: DELETE Filtered by Shipment Mode
DESCRIPTION: Demonstrates deleting specific rows from the lineitem table based on a simple WHERE clause filtering by shipmode.

LANGUAGE: sql
CODE:
DELETE FROM lineitem WHERE shipmode = 'AIR';

----------------------------------------

TITLE: Presto Schema Representation
DESCRIPTION: Example showing how Pinot schema is represented in Presto's table schema format, including column names, data types, and column properties.

LANGUAGE: none
CODE:
table_catalog | table_schema | table_name |  column_name  | ordinal_position | column_default | is_nullable | data_type |  comment  | extra_info
---------------+--------------+------------+---------------+------------------+----------------+-------------+-----------+-----------+------------
pinot         | default      | meetuprsvp | venue_name    |                1 | NULL           | YES         | varchar   | DIMENSION | NULL
pinot         | default      | meetuprsvp | rsvp_count    |                2 | NULL           | YES         | integer   | METRIC    | NULL
pinot         | default      | meetuprsvp | group_city    |                3 | NULL           | YES         | varchar   | DIMENSION | NULL
pinot         | default      | meetuprsvp | event_id      |                4 | NULL           | YES         | varchar   | DIMENSION | NULL
pinot         | default      | meetuprsvp | group_country |                5 | NULL           | YES         | varchar   | DIMENSION | NULL
pinot         | default      | meetuprsvp | group_id      |                6 | NULL           | YES         | bigint    | DIMENSION | NULL
pinot         | default      | meetuprsvp | group_name    |                7 | NULL           | YES         | varchar   | DIMENSION | NULL
pinot         | default      | meetuprsvp | event_name    |                8 | NULL           | YES         | varchar   | DIMENSION | NULL
pinot         | default      | meetuprsvp | mtime         |                9 | NULL           | YES         | timestamp | TIME      | NULL
pinot         | default      | meetuprsvp | event_time    |               10 | NULL           | YES         | bigint    | DIMENSION | NULL

----------------------------------------

TITLE: Using JSON Array Get Function in Presto SQL
DESCRIPTION: References the json_array_get function in Presto SQL, which has been fixed to handle nested structures correctly.

LANGUAGE: SQL
CODE:
json_array_get

----------------------------------------

TITLE: Slowing Down Data Processing in Black Hole Connector
DESCRIPTION: Illustrates how to add a delay to page processing using the page_processing_delay property. This can be useful for simulating slow data sources or sinks.

LANGUAGE: sql
CODE:
CREATE TABLE blackhole.test.delay (
  dummy bigint
)
WITH (
  split_count = 1,
  pages_per_split = 1,
  rows_per_page = 1,
  page_processing_delay = '5s'
);

----------------------------------------

TITLE: Debugging Properties
DESCRIPTION: Debug-related configuration properties for expression evaluation, validation, and optimization controls.

LANGUAGE: properties
CODE:
native_debug_validate_output_from_operators=false
native_debug_disable_expression_with_peeling=false
native_debug_disable_common_sub_expressions=false
native_debug_disable_expression_with_memoization=false

----------------------------------------

TITLE: Executing Presto CLI with Kerberos Authentication
DESCRIPTION: Bash script to launch the Presto CLI with Kerberos authentication enabled. It includes options for specifying the Kerberos configuration, principal, keytab, and TLS keystore.

LANGUAGE: bash
CODE:
#!/bin/bash

./presto \
  --server https://presto-coordinator.example.com:7778 \
  --krb5-config-path /etc/krb5.conf \
  --krb5-principal someuser@EXAMPLE.COM \
  --krb5-keytab-path /home/someuser/someuser.keytab \
  --krb5-remote-service-name presto \
  --keystore-path /tmp/presto.jks \
  --keystore-password password \
  --catalog <catalog> \
  --schema <schema>

----------------------------------------

TITLE: Calculating Reidentification Potential of KHyperLogLog Sketch in Presto SQL
DESCRIPTION: Computes the ratio of x values that have a uniqueness under the given threshold in the KHyperLogLog sketch.

LANGUAGE: SQL
CODE:
reidentification_potential(khll, threshold)

----------------------------------------

TITLE: Defining PREPARE Statement Syntax in Presto SQL
DESCRIPTION: Specifies the syntax for creating a prepared statement in Presto. The statement allows naming and defining a query for later execution, potentially with parameters.

LANGUAGE: sql
CODE:
PREPARE statement_name FROM statement

----------------------------------------

TITLE: SQL Query Fixes in Presto 0.172
DESCRIPTION: Collection of SQL-related fixes including ORDER BY implicit coercions, GROUP BY with lambda expressions, IN subqueries, JOIN clauses with lambda expressions, and optimizations for map_agg and map_union functions.

LANGUAGE: sql
CODE:
ORDER BY
GROUP BY
IN
SHOW TABLES
JOIN
map_agg()
map_union()

----------------------------------------

TITLE: SQL Query Pattern Fixes
DESCRIPTION: Various SQL query-related fixes including DISTINCT operations, IN expressions with subqueries, and GROUP BY queries with min_by and max_by functions.

LANGUAGE: sql
CODE:
DISTINCT
IN (subquery)
ORDER BY ... LIMIT
UNION
GROUP BY

----------------------------------------

TITLE: Using IGNORE NULLS Clause with Window Functions in SQL
DESCRIPTION: The IGNORE NULLS clause has been added to various window functions, allowing for null value handling in window operations.

LANGUAGE: SQL
CODE:
SELECT function_name(column) IGNORE NULLS OVER (PARTITION BY partition_column ORDER BY order_column)

----------------------------------------

TITLE: SQL Function Reference
DESCRIPTION: SQL functions mentioned in the release notes including row_number and current_user.

LANGUAGE: sql
CODE:
row_number()
current_user

----------------------------------------

TITLE: Creating MySQL Table from Existing Table in Presto
DESCRIPTION: SQL command to create a new MySQL table by selecting data from an existing table using Presto.

LANGUAGE: sql
CODE:
CREATE TABLE mysql.web.page_views_new AS SELECT * FROM mysql.web.page_views;

----------------------------------------

TITLE: Setting Verifier Configuration for Debugging in Presto
DESCRIPTION: Configuration property for the Presto Verifier to facilitate debugging. When set to false, it prevents dropping of temporary tables after checksum failures.

LANGUAGE: properties
CODE:
run-teardown-on-result-mismatch=false

----------------------------------------

TITLE: Configuring reStructuredText Table of Contents for Presto Ecosystem
DESCRIPTION: Sets up a toctree directive to include ecosystem documentation pages with maxdepth of 1, referencing the ecosystem/list document

LANGUAGE: rst
CODE:
.. toctree::
    :maxdepth: 1

    ecosystem/list

----------------------------------------

TITLE: Configuring Kafka Connector Properties
DESCRIPTION: Kafka connector configuration for Presto catalog

LANGUAGE: properties
CODE:
connector.name=kafka
kafka.nodes=localhost:9092
kafka.table-names=tpch.customer,tpch.orders,tpch.lineitem,tpch.part,tpch.partsupp,tpch.supplier,tpch.nation,tpch.region
kafka.hide-internal-columns=false

----------------------------------------

TITLE: Using line_interpolate_point Function in SQL
DESCRIPTION: This snippet shows the usage of the newly added geospatial function line_interpolate_point, which interpolates a point along a line geometry.

LANGUAGE: sql
CODE:
SELECT line_interpolate_point(line_geometry, fraction)

----------------------------------------

TITLE: Adding IF NOT EXISTS Support for CREATE TABLE in Presto SQL
DESCRIPTION: Implements basic support for the IF NOT EXISTS clause when creating tables in Presto SQL, preventing errors if the table already exists.

LANGUAGE: SQL
CODE:
CREATE TABLE

LANGUAGE: SQL
CODE:
IF NOT EXISTS

----------------------------------------

TITLE: SQL Function Reference - ST_Length
DESCRIPTION: New spatial function added for SphericalGeography type to calculate geometric length.

LANGUAGE: sql
CODE:
ST_Length

----------------------------------------

TITLE: Configuring Cassandra Connector in Presto
DESCRIPTION: Basic configuration for the Cassandra connector in Presto. This snippet shows the minimum required settings in the cassandra.properties file.

LANGUAGE: none
CODE:
connector.name=cassandra
cassandra.contact-points=host1,host2

----------------------------------------

TITLE: START TRANSACTION Basic Syntax
DESCRIPTION: Shows the basic command structure for starting a transaction, including optional mode specifications.

LANGUAGE: none
CODE:
START TRANSACTION [ mode [, ...] ]

----------------------------------------

TITLE: Parsing Timestamps with Nanosecond Precision in Presto SQL
DESCRIPTION: Shows the usage of the date_parse function, which now supports parsing timestamps with nanosecond precision.

LANGUAGE: sql
CODE:
date_parse()

----------------------------------------

TITLE: Adding and Renaming Columns in Hive Tables
DESCRIPTION: Enables support for adding new columns and renaming existing columns in Hive tables using Presto's ALTER TABLE command.

LANGUAGE: SQL
CODE:
Support adding and renaming columns using :doc:`/sql/alter-table`.

----------------------------------------

TITLE: Basic Hive Connector Configuration
DESCRIPTION: Minimal configuration required to mount the hive-hadoop2 connector as a hive catalog with metastore URI

LANGUAGE: none
CODE:
connector.name=hive-hadoop2
hive.metastore.uri=thrift://example.net:9083

----------------------------------------

TITLE: SQL VALUES Statement Reference
DESCRIPTION: Reference to VALUES statement usage in union operations, noting a fix for single-machine execution issues.

LANGUAGE: sql
CODE:
VALUES

----------------------------------------

TITLE: Setting task_writer_count Session Property in Presto
DESCRIPTION: The task_writer_count session property is introduced to set the task.writer-count. This allows for fine-tuning of task writing operations.

LANGUAGE: SQL
CODE:
SET SESSION task_writer_count = 4;

----------------------------------------

TITLE: Granting Multiple Roles with Admin Option in Presto SQL
DESCRIPTION: An example of granting multiple roles to a user and a role with admin option in Presto.

LANGUAGE: sql
CODE:
GRANT bar, foo TO USER baz, ROLE qux WITH ADMIN OPTION;

----------------------------------------

TITLE: Merging Array of KHyperLogLog Sketches in Presto SQL
DESCRIPTION: This function returns the KHyperLogLog of the union of an array of KHyperLogLog structures.

LANGUAGE: SQL
CODE:
merge_khll(array(khll)) -> KHyperLogLog

----------------------------------------

TITLE: Querying with char2hexint Function in SQL
DESCRIPTION: Returns the hexadecimal representation of the UTF-16BE encoding of the input string.

LANGUAGE: SQL
CODE:
char2hexint(string) -> varchar

----------------------------------------

TITLE: Modifying Column Nullability in Presto SQL
DESCRIPTION: Demonstrates how to add or remove NOT NULL constraints on columns using ALTER TABLE in Presto.

LANGUAGE: sql
CODE:
ALTER TABLE users ALTER COLUMN zip SET NOT NULL;

LANGUAGE: sql
CODE:
ALTER TABLE IF EXISTS users ALTER zip SET NOT NULL;

LANGUAGE: sql
CODE:
ALTER TABLE users ALTER COLUMN zip DROP NOT NULL;

----------------------------------------

TITLE: Array Transformation in Presto SQL
DESCRIPTION: Shows how to transform array elements using map functions with various data types and operations.

LANGUAGE: sql
CODE:
SELECT transform(ARRAY [], x -> x + 1); -- []
SELECT transform(ARRAY [5, 6], x -> x + 1); -- [6, 7]
SELECT transform(ARRAY [5, NULL, 6], x -> COALESCE(x, 0) + 1); -- [6, 1, 7]

----------------------------------------

TITLE: Creating Role with Specified Admin in Presto SQL
DESCRIPTION: An example of creating a role named 'moderator' with a specific user 'bob' as the admin.

LANGUAGE: sql
CODE:
CREATE ROLE moderator WITH ADMIN USER bob;

----------------------------------------

TITLE: Optimizer Configuration Properties
DESCRIPTION: Properties for configuring query optimization behavior

LANGUAGE: properties
CODE:
optimizer.dictionary-aggregation=false
optimizer.optimize-hash-generation=true
optimizer.optimize-metadata-queries=false
optimizer.optimize-single-distinct=true

----------------------------------------

TITLE: Differential Entropy Calculation
DESCRIPTION: SQL query example showing how to calculate differential entropy using histogram-based estimation

LANGUAGE: sql
CODE:
SELECT
    differential_entropy(1000000, x, weight, 'fixed_histogram_mle', -2.0, 2.0)
FROM
    data

----------------------------------------

TITLE: Querying Data from Memory Table
DESCRIPTION: SQL command showing how to select all data from a table in the Memory connector.

LANGUAGE: sql
CODE:
SELECT * FROM memory.default1.my_table;

----------------------------------------

TITLE: Configuring MySQL Function Namespace Manager - Properties File
DESCRIPTION: Configuration properties for setting up a MySQL-based function namespace manager. Specifies the manager type, database connection details, and table names for storing function namespaces and SQL functions.

LANGUAGE: properties
CODE:
function-namespace-manager.name=mysql
database-url=jdbc:mysql://example.net:3306/database?user=root&password=password
function-namespaces-table-name=example_function_namespaces
functions-table-name=example_sql_functions

----------------------------------------

TITLE: Preparing and Describing a Simple SELECT Query in Presto SQL
DESCRIPTION: Demonstrates preparing a SELECT query and then using DESCRIBE OUTPUT to list its output columns. This example shows how to view details of columns from a table.

LANGUAGE: sql
CODE:
PREPARE my_select1 FROM
SELECT * FROM nation

LANGUAGE: sql
CODE:
DESCRIBE OUTPUT my_select1;

LANGUAGE: none
CODE:
 Column Name | Catalog | Schema | Table  |  Type   | Type Size | Aliased
-------------+---------+--------+--------+---------+-----------+---------
 nationkey   | tpch    | sf1    | nation | bigint  |         8 | false
 name        | tpch    | sf1    | nation | varchar |         0 | false
 regionkey   | tpch    | sf1    | nation | bigint  |         8 | false
 comment     | tpch    | sf1    | nation | varchar |         0 | false
(4 rows)

----------------------------------------

TITLE: Directory Structure Example
DESCRIPTION: Shows the organization of key directories and files in the Presto Console codebase

LANGUAGE: plaintext
CODE:
presto-ui/src/
  - HTML files
  - src/static/      # Static assets
  - src/static/dev/  # Query Viewer
  - src/static/vendor/ # Third-party libraries
  - src/            # UI components

----------------------------------------

TITLE: Adding SHA Functions in Presto 0.115
DESCRIPTION: Introduces new cryptographic hash functions sha1, sha256, and sha512 to Presto's functionality. These functions can be used for generating secure hash values of input data.

LANGUAGE: sql
CODE:
!sha1()
!sha256()
!sha512()

----------------------------------------

TITLE: Querying with Group By Example in SQL
DESCRIPTION: Demonstrates a SQL query with a GROUP BY clause where the cardinality of the grouping column is one. This example was used to illustrate a fixed planning failure issue.

LANGUAGE: sql
CODE:
SELECT c1, sum(c2) FROM t WHERE c1 = 'foo' GROUP BY c1

----------------------------------------

TITLE: Configuring Nessie Catalog
DESCRIPTION: Basic configuration for using Nessie catalog with the Iceberg connector

LANGUAGE: none
CODE:
connector.name=iceberg
iceberg.catalog.type=nessie
iceberg.catalog.warehouse=/tmp
iceberg.nessie.uri=https://localhost:19120/api/v1

----------------------------------------

TITLE: Configuring Presto Coordinator for C++ Workers
DESCRIPTION: Essential configuration properties required for enabling Presto coordinator to work with C++ workers. These settings handle native execution, optimization parameters, and function signatures compatibility.

LANGUAGE: none
CODE:
native-execution-enabled=true
optimizer.optimize-hash-generation=false
regex-library=RE2J
use-alternative-function-signatures=true

----------------------------------------

TITLE: HTTP Methods for Presto API Endpoints
DESCRIPTION: Core HTTP endpoints and methods used for interacting with the Presto API, including query submission, result pagination, and query termination.

LANGUAGE: HTTP
CODE:
POST /v1/statement       # Submit query\nGET {nextUri}           # Get next results\nDELETE {nextUri}        # Terminate query

----------------------------------------

TITLE: Checking Any Key Matches Predicate in Presto SQL
DESCRIPTION: Uses the any_keys_match function to check if any key in a map satisfies a given predicate.

LANGUAGE: sql
CODE:
SELECT any_keys_match(map(array['a', 'b', 'c'], array[1, 2, 3]), x -> x = 'a'); -- true

----------------------------------------

TITLE: ALTER FUNCTION without Parameter Type Example
DESCRIPTION: Example demonstrating how to alter a function without specifying parameter types when only one signature exists for the function name.

LANGUAGE: sql
CODE:
ALTER FUNCTION prod.default.tan
CALLED ON NULL INPUT

----------------------------------------

TITLE: Deleting from Partitioned Hive Table in Presto SQL
DESCRIPTION: SQL delete statement showing how to remove data from a partitioned Hive table by specifying partition values in the WHERE clause.

LANGUAGE: sql
CODE:
DELETE FROM orders
WHERE order_date = '2015-10-15' AND order_region = 'APAC'

----------------------------------------

TITLE: Configuring PostgreSQL Connector in Presto
DESCRIPTION: Creates a catalog properties file to configure the PostgreSQL connector. Specifies the connector name, connection URL, user, and password.

LANGUAGE: properties
CODE:
connector.name=postgresql
connection-url=jdbc:postgresql://example.net:5432/database
connection-user=root
connection-password=secret

----------------------------------------

TITLE: Querying Oracle Table Data
DESCRIPTION: SQL command to select all data from a specific Oracle table.

LANGUAGE: sql
CODE:
SELECT * FROM oracle.web.clicks;

----------------------------------------

TITLE: MongoDB TLS Certificate Setup
DESCRIPTION: Commands for setting up TLS certificate for secure MongoDB connection

LANGUAGE: bash
CODE:
touch /etc/pki/ca-trust/source/anchors/mongo.prod-cluster.crt
update-ca-trust
openssl s_client -connect <host-found-with-dig-above>:27017 < /dev/null

----------------------------------------

TITLE: Retrieving Hash Counts from Set Digest in Presto SQL
DESCRIPTION: Shows how to retrieve a map of Murmur3Hash128 hashed values and their occurrence counts from a set digest using the hash_counts function.

LANGUAGE: SQL
CODE:
SELECT hash_counts(make_set_digest(value))
FROM (VALUES 1, 1, 1, 2, 2) T(value);

----------------------------------------

TITLE: Configuring Verbose Error Messages for Exceeded Memory Limit in Presto
DESCRIPTION: This configuration enables or disables verbose error messages for EXCEEDED_LOCAL_MEMORY_LIMIT errors in Presto. By default, it is enabled in this release.

LANGUAGE: properties
CODE:
memory.verbose-exceeded-memory-limit-errors-enabled=false

----------------------------------------

TITLE: Implementing Parametric Scalar Function in Presto
DESCRIPTION: Example of a parametric scalar function 'is_null' that works with any type. It uses @TypeParameter annotation and multiple method overloads for different native container types.

LANGUAGE: java
CODE:
@ScalarFunction(name = "is_null", calledOnNullInput = true)
@Description("Returns TRUE if the argument is NULL")
public final class IsNullFunction
{
    @TypeParameter("T")
    @SqlType(StandardTypes.BOOLEAN)
    public static boolean isNullSlice(@SqlNullable @SqlType("T") Slice value)
    {
        return (value == null);
    }

    @TypeParameter("T")
    @SqlType(StandardTypes.BOOLEAN)
    public static boolean isNullLong(@SqlNullable @SqlType("T") Long value)
    {
        return (value == null);
    }

    @TypeParameter("T")
    @SqlType(StandardTypes.BOOLEAN)
    public static boolean isNullDouble(@SqlNullable @SqlType("T") Double value)
    {
        return (value == null);
    }

    // ...and so on for each native container type
}

----------------------------------------

TITLE: Enabling Custom Authentication in Presto Coordinator
DESCRIPTION: This configuration snippet shows how to enable custom authentication in the Presto coordinator's config.properties file. It sets the authentication type to CUSTOM.

LANGUAGE: properties
CODE:
http-server.authentication.type=CUSTOM

----------------------------------------

TITLE: Filtering Map Entries in Presto SQL
DESCRIPTION: Shows how to filter map entries based on a predicate function using the map_filter() function.

LANGUAGE: sql
CODE:
SELECT map_filter(MAP(ARRAY[], ARRAY[]), (k, v) -> true); -- {}
SELECT map_filter(MAP(ARRAY[10, 20, 30], ARRAY['a', NULL, 'c']), (k, v) -> v IS NOT NULL); -- {10 -> a, 30 -> c}
SELECT map_filter(MAP(ARRAY['k1', 'k2', 'k3'], ARRAY[20, 3, 15]), (k, v) -> v > 10); -- {k1 -> 20, k3 -> 15}

----------------------------------------

TITLE: Initiating Graceful Shutdown in Presto Workers
DESCRIPTION: Demonstrates how to initiate a graceful shutdown of Presto workers using an HTTP PUT request. This allows workers to complete existing tasks before exiting.

LANGUAGE: http
CODE:
PUT /v1/info/state
Body: "SHUTTING_DOWN"

----------------------------------------

TITLE: Searched CASE Expression in SQL
DESCRIPTION: Shows the searched form of CASE expression that evaluates multiple conditions and returns the result matching the first true condition.

LANGUAGE: sql
CODE:
SELECT a, b,
       CASE
           WHEN a = 1 THEN 'aaa'
           WHEN b = 2 THEN 'bbb'
           ELSE 'ccc'
       END

----------------------------------------

TITLE: Configuring Hive Metastore Catalog
DESCRIPTION: Basic configuration for using Hive Metastore with the Iceberg connector

LANGUAGE: none
CODE:
connector.name=iceberg
hive.metastore.uri=hostname:port
iceberg.catalog.type=hive

----------------------------------------

TITLE: Using USE Statement with Catalog and Schema in Presto SQL
DESCRIPTION: Illustrates how to use the USE statement to switch to a specific catalog and schema in Presto SQL. In this example, it switches to the 'finance' schema in the 'hive' catalog.

LANGUAGE: sql
CODE:
USE hive.finance;

----------------------------------------

TITLE: SQL System Table Access
DESCRIPTION: New syntax for accessing partition information through system tables in Presto 0.199.

LANGUAGE: sql
CODE:
SELECT * FROM example$partitions
SHOW PARTITIONS FROM example

----------------------------------------

TITLE: Aggregating Quantile Digest with Accuracy Control in Presto SQL
DESCRIPTION: Creates a qdigest from input values x, using weights w and a specified maximum error accuracy. Accuracy must be between 0 and 1 and constant for all rows.

LANGUAGE: SQL
CODE:
qdigest_agg(x, w, accuracy) -> qdigest<[same as x]>

----------------------------------------

TITLE: T-Digest Aggregation
DESCRIPTION: Creates T-digest from input values with optional weights and compression factor.

LANGUAGE: sql
CODE:
tdigest_agg(x) -> tdigest<double>

LANGUAGE: sql
CODE:
tdigest_agg(x, w) -> tdigest<double>

LANGUAGE: sql
CODE:
tdigest_agg(x, w, compression) -> tdigest<double>

----------------------------------------

TITLE: Setting JDBC Session Properties in Java
DESCRIPTION: Demonstrates how to set session properties in a JDBC connection by unwrapping the PrestoConnection class.

LANGUAGE: java
CODE:
connection.unwrap(PrestoConnection.class).setSessionProperty("name", "value");

----------------------------------------

TITLE: Defining Kafka Table in JSON
DESCRIPTION: JSON structure for defining a Kafka table in Presto, including table name, schema, topic, and field mappings for key and message.

LANGUAGE: json
CODE:
{
    "tableName": "...",
    "schemaName": "...",
    "topicName": "...",
    "key": {
        "dataFormat": "...",
        "fields": [
            ...
        ]
    },
    "message": {
        "dataFormat": "...",
        "fields": [
            ...
       ]
    }
}

----------------------------------------

TITLE: Basic Window Function Syntax in Presto SQL
DESCRIPTION: Demonstrates the fundamental syntax for window functions using the OVER clause with optional PARTITION BY, ORDER BY, and frame specifications.

LANGUAGE: sql
CODE:
function(args) OVER (
    [PARTITION BY expression]
    [ORDER BY expression [ASC|DESC]]
    [frame]
)

----------------------------------------

TITLE: Initial Query Response with Execution Details
DESCRIPTION: Example response from Presto after submitting a query, containing query ID, next URI for polling results, and initial execution statistics.

LANGUAGE: json
CODE:
{
  "id":"20140108_110629_00011_dk5x2",
  "infoUri":"http://localhost:8001/v1/query/20140108_110629_00011_dk5x2",
  "partialCancelUri":"http://10.193.207.128:8080/v1/stage/20140108_110629_00011_dk5x2.1",
  "nextUri":"http://localhost:8001/v1/statement/20140108_110629_00011_dk5x2/1",
  "columns":[
    {
      "name":"name",
      "type":"varchar"
    }
  ],
  "stats":{
    "state":"RUNNING",
    "scheduled":false,
    "nodes":1,
    "totalSplits":0,
    "queuedSplits":0,
    "runningSplits":0,
    "completedSplits":0,
    "cpuTimeMillis":0,
    "wallTimeMillis":0,
    "processedRows":0,
    "processedBytes":0,
    "rootStage":{
      "stageId":"0",
      "state":"SCHEDULED",
      "done":false,
      "nodes":1,
      "totalSplits":0,
      "queuedSplits":0,
      "runningSplits":0,
      "completedSplits":0,
      "cpuTimeMillis":0,
      "wallTimeMillis":0,
      "processedRows":0,
      "processedBytes":0,
      "subStages":[
        {
          "stageId":"1",
          "state":"SCHEDULED",
          "done":false,
          "nodes":1,
          "totalSplits":0,
          "queuedSplits":0,
          "runningSplits":0,
          "completedSplits":0,
          "cpuTimeMillis":0,
          "wallTimeMillis":0,
          "processedRows":0,
          "processedBytes":0,
          "subStages":[]
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Controlling Non-Managed Table Creation in Hive
DESCRIPTION: Sets a configuration option to control whether users can create non-managed (external) tables in Hive.

LANGUAGE: SQL
CODE:
SET hive.non-managed-table-creates-enabled = true;

----------------------------------------

TITLE: Requiring HTTPS for Internal Communication in Presto
DESCRIPTION: Enforces the use of HTTPS for all internal communication within the Presto cluster.

LANGUAGE: properties
CODE:
internal-communication.https.required=true

----------------------------------------

TITLE: Defining Catalog Access Rules in Presto's File-Based Access Control
DESCRIPTION: This JSON snippet demonstrates how to define catalog access rules in Presto's file-based access control system, specifying user and catalog patterns, and access levels.

LANGUAGE: json
CODE:
{
  "catalogs": [
    {
      "user": "admin",
      "catalog": "(mysql|system)",
      "allow": "all"
    },
    {
      "catalog": "hive",
      "allow": "all"
    },
    {
      "user": "alice",
      "catalog": "postgresql",
      "allow": "read-only"
    },
    {
      "catalog": "system",
      "allow": "none"
    }
  ]
}

----------------------------------------

TITLE: T-Digest Structure Management
DESCRIPTION: Functions for deconstructing and constructing T-digest structures from component parts.

LANGUAGE: sql
CODE:
destructure_tdigest(tdigest<double>) -> row<centroid_means array<double>, centroid_weights array<integer>, compression double, min double, max double, sum double, count bigint>

LANGUAGE: sql
CODE:
construct_tdigest(centroid_means array<double>, centroid_weights array<double>, compression double, min double, max double, sum double, count bigint) -> tdigest<double>

----------------------------------------

TITLE: Basic Delta Lake Table Query
DESCRIPTION: Example of querying a Delta Lake table using catalog, database, and table name

LANGUAGE: sql
CODE:
SELECT * FROM sales.apac.sales_data LIMIT 200;

----------------------------------------

TITLE: Revoking Admin Option for Multiple Roles in Presto SQL
DESCRIPTION: An example of revoking the admin option for roles 'bar' and 'foo' from user 'baz' and role 'qux' using the REVOKE ROLES command in Presto SQL.

LANGUAGE: sql
CODE:
REVOKE ADMIN OPTION FOR bar, foo FROM USER baz, ROLE qux;

----------------------------------------

TITLE: Documenting Presto Release 0.244.1 Changes in RST
DESCRIPTION: This RST snippet documents the changes in Presto release 0.244.1, including a warning about a startup bug and a fix for reading ORC files with specific MAP column configurations in Hive.

LANGUAGE: rst
CODE:
===============
Release 0.244.1
===============

.. warning::
    There is a bug causing failure at startup if function namespace manager is enabled and Thrift is not configured (:pr:`15501`).

Hive Changes
____________
* Fix reading ORC files having MAP columns with MAP_FLAT encoding where all entries are empty maps (:pr:`15468`).

----------------------------------------

TITLE: Basic CALL Statement Syntax
DESCRIPTION: Shows the fundamental syntax for calling a procedure in Presto, supporting both named and positional arguments.

LANGUAGE: sql
CODE:
CALL procedure_name ( [ name => ] expression [, ...] )

----------------------------------------

TITLE: Memory Management Configuration
DESCRIPTION: Memory limit configurations for queries on worker nodes and across the cluster.

LANGUAGE: properties
CODE:
query.max-memory-per-node=JVM max memory * 0.1
query.max-total-memory-per-node=query.max-memory-per-node * 2
query.max-memory=20GB
query.max-total-memory=query.max-memory * 2

----------------------------------------

TITLE: Preparing and Describing a Simple SELECT Query in Presto
DESCRIPTION: This example demonstrates preparing a SELECT query and then describing its output using the DESCRIBE OUTPUT command.

LANGUAGE: sql
CODE:
PREPARE my_select1 FROM
SELECT * FROM nation

LANGUAGE: sql
CODE:
DESCRIBE OUTPUT my_select1;

LANGUAGE: none
CODE:
 Column Name | Catalog | Schema | Table  |  Type   | Type Size | Aliased
-------------+---------+--------+--------+---------+-----------+---------
 nationkey   | tpch    | sf1    | nation | bigint  |         8 | false
 name        | tpch    | sf1    | nation | varchar |         0 | false
 regionkey   | tpch    | sf1    | nation | bigint  |         8 | false
 comment     | tpch    | sf1    | nation | varchar |         0 | false
(4 rows)

----------------------------------------

TITLE: Configuring Specific Cipher Suites for HTTPS in Presto
DESCRIPTION: This snippet demonstrates how to configure Java to use specific cipher suites for HTTPS connections in Presto to manage CPU usage.

LANGUAGE: none
CODE:
http-server.https.included-cipher=TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256
http-server.https.excluded-cipher=

----------------------------------------

TITLE: Preparing a Simple SELECT Query in Presto SQL
DESCRIPTION: Demonstrates how to prepare a basic SELECT query without parameters. This prepared statement retrieves all columns from the 'nation' table.

LANGUAGE: sql
CODE:
PREPARE my_select1 FROM
SELECT * FROM nation;

----------------------------------------

TITLE: System Connector Changes Documentation
DESCRIPTION: Documents changes to the system connector functionality where global system tables are now only available in the 'system' catalog. Introduces the getSystemTables() method for connectors to provide system tables within their catalogs.

LANGUAGE: markdown
CODE:
The :doc:`/connector/system` now works like other connectors: global system tables are only available in the ``system`` catalog, rather than in a special schema that is available in every catalog.

----------------------------------------

TITLE: Merging Set Digests in Presto SQL
DESCRIPTION: Illustrates how to merge multiple set digests into a single set digest using the merge_set_digest function.

LANGUAGE: SQL
CODE:
SELECT merge_set_digest(a) from (SELECT make_set_digest(value) as a FROM (VALUES 4,3,2,1) T(value));

----------------------------------------

TITLE: Converting Intervals to Milliseconds in Presto SQL
DESCRIPTION: Adds a new to_milliseconds() function to convert day-to-second intervals into milliseconds in Presto SQL queries.

LANGUAGE: SQL
CODE:
SELECT to_milliseconds(INTERVAL '2' DAY) AS milliseconds;

----------------------------------------

TITLE: Configuring Presto Event Listener Properties
DESCRIPTION: Example configuration for a custom event listener in Presto. The configuration file specifies the event listener name and custom properties that will be passed to the EventListenerFactory.create() method.

LANGUAGE: properties
CODE:
event-listener.name=custom-event-listener
custom-property1=custom-value1
custom-property2=custom-value2

----------------------------------------

TITLE: Installing Homebrew on Intel Mac
DESCRIPTION: Command to install Homebrew package manager on an Intel-based Mac system.

LANGUAGE: bash
CODE:
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

----------------------------------------

TITLE: Adding Flow Type Checker to JSX
DESCRIPTION: Example of adding Flow type checker annotation to a JSX file. This enables static type checking for the component.

LANGUAGE: jsx
CODE:
//@flow

----------------------------------------

TITLE: Configuring Exchange Materialization Settings in Presto
DESCRIPTION: Shows the required session property configurations to enable exchange materialization. Includes settings for strategy, catalog selection, and partition count optimization.

LANGUAGE: sql
CODE:
SET SESSION exchange_materialization_strategy='ALL';

-- Set partitioning_provider_catalog to the Hive connector catalog
SET SESSION partitioning_provider_catalog='hive';

-- We recommend setting hash_partition_count to be at least 5X-10X about the cluster size
-- when exchange materialization is enabled.
SET SESSION hash_partition_count = 4096;

----------------------------------------

TITLE: Theta Sketch Functions in Presto SQL
DESCRIPTION: Functions for computing and analyzing Theta sketches, which enable distinct value counting and set operations. Includes functions for creating sketches, estimating distinct values, and generating detailed summaries.

LANGUAGE: sql
CODE:
sketch_theta(x) -> varbinary
sketch_theta_estimate(sketch) -> double
sketch_theta_summary(sketch) -> row(estimate double, theta double, upper_bound_std double, lower_bound_std double, retained_entries int)

----------------------------------------

TITLE: Native Execution Scale Properties
DESCRIPTION: Session properties for controlling native execution scaling behavior including writer threads and memory usage ratios.

LANGUAGE: properties
CODE:
native_execution_scale_partitioned_writer_threads_enabled=true
native_scaled_writer_rebalance_max_memory_usage_ratio=0.0
native_scaled_writer_max_partitions_per_writer=0
native_scaled_writer_min_partition_processed_bytes_rebalance_threshold=0
native_scaled_writer_min_processed_bytes_rebalance_threshold=0

----------------------------------------

TITLE: Querying Oracle Schemas
DESCRIPTION: SQL command to list all available Oracle schemas in the configured catalog.

LANGUAGE: sql
CODE:
SHOW SCHEMAS FROM oracle;

----------------------------------------

TITLE: Configuring reStructuredText Table of Contents for Presto Ecosystem
DESCRIPTION: Sets up a toctree directive to include ecosystem documentation pages with maxdepth of 1, referencing the ecosystem/list document

LANGUAGE: rst
CODE:
.. toctree::
    :maxdepth: 1

    ecosystem/list

----------------------------------------

TITLE: Aggregating Quantile Digest in Presto SQL
DESCRIPTION: Creates a qdigest from all input values of x. This function is used to build a quantile digest from a column of data.

LANGUAGE: SQL
CODE:
qdigest_agg(x) -> qdigest<[same as x]>

----------------------------------------

TITLE: DELETE Using Subquery Filter
DESCRIPTION: Shows how to delete rows using a subquery in the WHERE clause, specifically removing line items associated with low priority orders.

LANGUAGE: sql
CODE:
DELETE FROM lineitem
WHERE orderkey IN (SELECT orderkey FROM orders WHERE priority = 'LOW');

----------------------------------------

TITLE: Advanced Role Admin Option Revocation
DESCRIPTION: Complex example demonstrating how to revoke admin options for multiple roles from both a user and a role.

LANGUAGE: sql
CODE:
REVOKE ADMIN OPTION FOR bar, foo FROM USER baz, ROLE qux;

----------------------------------------

TITLE: Configuring Spill Paths in Presto SQL
DESCRIPTION: Set multiple paths on separate local devices for spill to increase query performance. The spiller-spill-path property is used to configure spill paths.

LANGUAGE: sql
CODE:
SET SESSION spiller-spill-path = '/path1,/path2,/path3'

----------------------------------------

TITLE: Setting Recursive Directory Scanning for Hive
DESCRIPTION: Enables recursive scanning of partition directories for data in Hive by setting the 'hive.recursive-directories' config option.

LANGUAGE: properties
CODE:
hive.recursive-directories=true

----------------------------------------

TITLE: Setting Query Max Broadcast Memory in Presto SQL
DESCRIPTION: Configures the query_max_broadcast_memory session property to limit the memory a query can use for broadcast join.

LANGUAGE: SQL
CODE:
SET SESSION query_max_broadcast_memory = '1GB';

----------------------------------------

TITLE: Configuring Local File Connector in Presto
DESCRIPTION: Creates a catalog properties file for the local file connector. This configuration enables the connector for use in Presto.

LANGUAGE: properties
CODE:
connector.name=localfile

----------------------------------------

TITLE: Granting Select to Public Role
DESCRIPTION: Example showing how to grant SELECT privilege to the PUBLIC role, effectively giving the privilege to all users.

LANGUAGE: sql
CODE:
GRANT SELECT ON orders TO ROLE PUBLIC;

----------------------------------------

TITLE: Configuring Task Writer Count in Presto
DESCRIPTION: Sets the number of writers per task in Presto configuration. This property allows fine-tuning of parallelism for write operations.

LANGUAGE: Properties
CODE:
task.writer-count=<value>

----------------------------------------

TITLE: Enabling Dynamic Filtering in Presto SQL
DESCRIPTION: Demonstrates how to enable dynamic filtering and bucket pruning support for broadcast or collocated joins using configuration properties and session properties.

LANGUAGE: SQL
CODE:
SET SESSION experimental.enable-dynamic-filtering = true;
SET SESSION enable_dynamic_filtering = true;

----------------------------------------

TITLE: Disabling Eager Memory Freeing in SQL Exchange
DESCRIPTION: Configures the exchange to not acknowledge pages, which disables the eager freeing of memory in source output buffers.

LANGUAGE: SQL
CODE:
SET exchange.acknowledge-pages = false;

----------------------------------------

TITLE: REVOKE Command Syntax in Presto SQL
DESCRIPTION: Defines the syntax for the REVOKE command in Presto SQL. It specifies how to revoke privileges from users or roles on specific tables.

LANGUAGE: sql
CODE:
REVOKE [ GRANT OPTION FOR ]
( privilege [, ...] | ALL PRIVILEGES )
ON [ TABLE ] table_name FROM ( user | USER user | ROLE role )

----------------------------------------

TITLE: SQL Function Reference - array_position Updates
DESCRIPTION: New functionality added to array_position function to find the nth instance of an element in an array

LANGUAGE: sql
CODE:
array_position

----------------------------------------

TITLE: SQL Configuration Property - Pinot Schema Mapping
DESCRIPTION: System properties for mapping Pinot time fields to Presto DATE and TIMESTAMP types based on epoch values.

LANGUAGE: sql
CODE:
pinot.infer-date-type-in-schema
pinot.infer-timestamp-type-in-schema

----------------------------------------

TITLE: REVOKE ROLES Syntax Definition
DESCRIPTION: Defines the complete syntax for the REVOKE ROLES command, including optional ADMIN OPTION FOR and GRANTED BY clauses. Shows the pattern for revoking roles from users or other roles.

LANGUAGE: sql
CODE:
REVOKE
[ ADMIN OPTION FOR ]
role [, ...]
FROM ( user | USER user | ROLE role) [, ...]
[ GRANTED BY ( user | USER user | ROLE role | CURRENT_USER | CURRENT_ROLE ) ]

----------------------------------------

TITLE: Adding IF NOT EXISTS Support for CREATE TABLE in Presto SQL
DESCRIPTION: Implements basic support for the IF NOT EXISTS clause when creating tables in Presto SQL, preventing errors when attempting to create an already existing table.

LANGUAGE: SQL
CODE:
CREATE TABLE

LANGUAGE: SQL
CODE:
IF NOT EXISTS

----------------------------------------

TITLE: Referencing Min Function in RST Documentation
DESCRIPTION: Demonstrates how to reference the 'min' function in RST Documentation using the :func: directive.

LANGUAGE: rst
CODE:
:func:`!min`

----------------------------------------

TITLE: Implementing ConnectorSplit Node Selection Strategy in Java
DESCRIPTION: The getNodeSelectionStrategy method in ConnectorSplit indicates the node affinity of a Split. It has three options: HARD_AFFINITY, SOFT_AFFINITY, and NO_PREFERENCE. The getPreferredNodes method provides a list of preferred nodes for the scheduler to pick from.

LANGUAGE: java
CODE:
public enum NodeSelectionStrategy {
    HARD_AFFINITY,
    SOFT_AFFINITY,
    NO_PREFERENCE
}

public NodeSelectionStrategy getNodeSelectionStrategy() {
    // Implementation
}

public List<HostAddress> getPreferredNodes() {
    // Implementation
}

----------------------------------------

TITLE: Normalizing Unicode Strings in Presto SQL
DESCRIPTION: Demonstrates the use of normalize() function for Unicode normalization in Presto SQL.

LANGUAGE: SQL
CODE:
SELECT normalize(string, NFD);
SELECT normalize(string, NFC);
SELECT normalize(string, NFKD);
SELECT normalize(string, NFKC);

----------------------------------------

TITLE: Configuring Hive Properties
DESCRIPTION: Configuration properties for the Hive connector to enable table dropping functionality. This setting must be explicitly enabled in the Hive catalog properties file.

LANGUAGE: properties
CODE:
hive.allow-drop-table=true

----------------------------------------

TITLE: Memory and CPU Management Properties
DESCRIPTION: Configuration properties for managing memory thresholds, CPU time slices, and resource limits in the native execution engine.

LANGUAGE: properties
CODE:
driver_cpu_time_slice_limit_ms=1000
native_aggregation_spill_memory_threshold=0
native_max_output_buffer_size=33554432
native_writer_flush_threshold_bytes=100663296

----------------------------------------

TITLE: Selecting Data from Table
DESCRIPTION: SQL command to retrieve all data from a table.

LANGUAGE: sql
CODE:
SELECT * FROM memory.default1.my_table;

----------------------------------------

TITLE: Configuring Presto to Skip Glacier Files in Amazon S3
DESCRIPTION: This configuration enables Presto's Hive connector to skip Glacier files when reading from Amazon S3. It can be useful for improving performance when working with S3 buckets that contain both active and archived data.

LANGUAGE: Properties
CODE:
hive.s3.skip-glacier-objects=true

----------------------------------------

TITLE: Querying Available Tables in Local File Connector
DESCRIPTION: SQL command to show all available tables in the 'logs' schema of the local file connector. This helps users discover queryable data sources.

LANGUAGE: sql
CODE:
SHOW TABLES FROM localfile.logs;

----------------------------------------

TITLE: Defining RST Documentation Structure for Query Optimizer
DESCRIPTION: ReStructuredText toctree directive defining the documentation structure for Presto's query optimizer sections. Includes paths to documentation files covering statistics, cost explanations, optimizations, and logical properties.

LANGUAGE: rst
CODE:
.. toctree::
    :maxdepth: 1

    optimizer/statistics
    optimizer/cost-in-explain
    optimizer/cost-based-optimizations
    optimizer/history-based-optimization
    optimizer/logical-properties

----------------------------------------

TITLE: Adding min_by Aggregation Function in SQL
DESCRIPTION: Introduces the min_by aggregation function to Presto SQL for finding the minimum value based on another column.

LANGUAGE: SQL
CODE:
SELECT min_by(x, y) FROM table

----------------------------------------

TITLE: MongoDB Basic Catalog Configuration
DESCRIPTION: Basic configuration properties file for connecting Presto to MongoDB

LANGUAGE: none
CODE:
connector.name=mongodb
mongodb.seeds=host1,host:port

----------------------------------------

TITLE: Deleting Stage in Presto REST API
DESCRIPTION: HTTP DELETE endpoint for removing a specific stage in a Presto query, identified by the stageId parameter in the URL path.

LANGUAGE: rest
CODE:
DELETE /v1/stage/{stageId}

----------------------------------------

TITLE: Importing Certificate to Java Truststore for Presto CLI
DESCRIPTION: This command imports a certificate 'presto_certificate.cer' into a custom truststore 'presto_trust.jks' for the Presto CLI to trust the Presto coordinator. It requires a truststore password to be provided.

LANGUAGE: none
CODE:
$ keytool -import -v -trustcacerts -alias presto_trust -file presto_certificate.cer -keystore presto_trust.jks -keypass <truststore_pass>

----------------------------------------

TITLE: Configuring Worker Threads Relative to Core Count in Presto
DESCRIPTION: This snippet demonstrates how to configure the maximum number of worker threads relative to the available core count using the task.max-worker-threads configuration property.

LANGUAGE: Properties
CODE:
task.max-worker-threads=2C

----------------------------------------

TITLE: Performing Cross Joins in Presto SQL
DESCRIPTION: Illustrates the ANSI SQL syntax for performing a cross join between two tables (a and b) in Presto. This join type produces a Cartesian product of the two tables.

LANGUAGE: SQL
CODE:
SELECT *
FROM a
CROSS JOIN b

----------------------------------------

TITLE: Configuring Password Authenticator Properties in Presto
DESCRIPTION: Example configuration file for setting up a custom password authenticator with custom properties. This file should be placed in etc/password-authenticator.properties.

LANGUAGE: none
CODE:
password-authenticator.name=custom-password-authenticator
custom-property1=custom-value1
custom-property2=custom-value2

----------------------------------------

TITLE: Implementing String Manipulation Scalar Function in Presto
DESCRIPTION: Example of a scalar function 'lowercaser' that converts a VARCHAR input to lowercase. It demonstrates working with Slice objects for string manipulation.

LANGUAGE: java
CODE:
public class ExampleStringFunction
{
    @ScalarFunction("lowercaser")
    @Description("converts the string to alternating case")
    @SqlType(StandardTypes.VARCHAR)
    public static Slice lowercaser(@SqlType(StandardTypes.VARCHAR) Slice slice)
    {
        String argument = slice.toStringUtf8();
        return Slices.utf8Slice(argument.toLowerCase());
    }
}

----------------------------------------

TITLE: Querying JSON Data with Bracket Syntax in Presto SQL
DESCRIPTION: Examples of using the json_extract function with the new bracket syntax for accessing JSON elements. Shows both simple bracket notation and quoted bracket notation for special characters.

LANGUAGE: sql
CODE:
SELECT json_extract(json, '$.store[book]');
SELECT json_extract(json, '$.store["book name"]');

----------------------------------------

TITLE: Basic INSERT Syntax in Presto SQL
DESCRIPTION: Shows the basic syntax structure for INSERT statements in Presto SQL. Allows specifying optional column names followed by a query.

LANGUAGE: sql
CODE:
INSERT INTO table_name [ ( column [, ... ] ) ] query

----------------------------------------

TITLE: Safe Array Access with Bounds Checking in Presto SQL
DESCRIPTION: Shows how to safely access array elements while avoiding out-of-bounds exceptions using IF statement.

LANGUAGE: sql
CODE:
SELECT IF(CARDINALITY(my_array) >= 3, my_array[3], NULL)
FROM ...

----------------------------------------

TITLE: Configuring Basic Thrift Properties
DESCRIPTION: Basic configuration properties for setting up the Presto Thrift connector in etc/catalog/thrift.properties

LANGUAGE: properties
CODE:
connector.name=presto-thrift
presto.thrift.client.addresses=host:port,host:port

----------------------------------------

TITLE: Preparing and Describing a Query without Parameters in Presto
DESCRIPTION: Shows how to prepare a SQL query without parameters and use DESCRIBE INPUT on it. This example demonstrates that DESCRIBE INPUT returns an empty result for queries without parameters.

LANGUAGE: sql
CODE:
PREPARE my_select2 FROM
SELECT * FROM nation;

LANGUAGE: sql
CODE:
DESCRIBE INPUT my_select2;

----------------------------------------

TITLE: Implementing Implicit Coercions for UNION in Presto SQL
DESCRIPTION: Adds support for implicit type coercions when using the UNION operator in Presto SQL, improving ease of use for combining datasets.

LANGUAGE: SQL
CODE:
UNION

----------------------------------------

TITLE: Granting INSERT and SELECT Privileges in Presto
DESCRIPTION: Example of granting INSERT and SELECT privileges on the 'orders' table to the user 'alice'.

LANGUAGE: sql
CODE:
GRANT INSERT, SELECT ON orders TO alice;

----------------------------------------

TITLE: Querying HANA Schemas in Presto
DESCRIPTION: SQL command to list all available schemas in the configured HANA catalog. This query is used to explore the structure of the connected HANA database.

LANGUAGE: sql
CODE:
SHOW SCHEMAS FROM hana;

----------------------------------------

TITLE: Removed Big Query Configuration Options in Presto 0.109
DESCRIPTION: List of configuration options that are no longer supported after the removal of experimental big query support.

LANGUAGE: properties
CODE:
experimental_big_query

LANGUAGE: properties
CODE:
experimental.big-query-initial-hash-partitions

LANGUAGE: properties
CODE:
experimental.max-concurrent-big-queries

LANGUAGE: properties
CODE:
experimental.max-queued-big-queries

----------------------------------------

TITLE: Submitting SQL Query via POST Request
DESCRIPTION: Example of submitting a SQL query to Presto using POST /v1/statement endpoint. Shows required headers and request format for query execution.

LANGUAGE: http
CODE:
POST /v1/statement HTTP/1.1
Host: localhost:8001
X-Presto-Catalog: jmx
X-Presto-Source: presto-cli
X-Presto-Schema: jmx
User-Agent: StatementClient/0.55-SNAPSHOT
X-Presto-User: tobrie1
Content-Length: 41

select name from "java.lang:type=runtime"

----------------------------------------

TITLE: Listing Tables in a Specific Schema
DESCRIPTION: This SQL query shows how to list all tables within a specific schema (in this case, 'web') in the SQL Server database using Presto.

LANGUAGE: sql
CODE:
SHOW TABLES FROM sqlserver.web;

----------------------------------------

TITLE: Setting Node Internal Address Configuration
DESCRIPTION: Configuration options for specifying how Presto nodes identify themselves within the cluster using FQDN.

LANGUAGE: none
CODE:
node.internal-address-source=FQDN

LANGUAGE: none
CODE:
node.internal-address=<node fqdn>

----------------------------------------

TITLE: Configuring JVM for Presto Router
DESCRIPTION: Example JVM configuration file (etc/jvm.config) for Presto Router, specifying Java Virtual Machine launch options including garbage collection settings and memory allocation.

LANGUAGE: none
CODE:
-ea
-XX:+UseG1GC
-XX:G1HeapRegionSize=32M
-XX:+UseGCOverheadLimit
-XX:+ExplicitGCInvokesConcurrent
-Xmx12G

----------------------------------------

TITLE: Sample Pinot Schema Definition
DESCRIPTION: Example of a Pinot schema definition showing dimension fields, metric fields, and time field specifications for a meetup RSVP table.

LANGUAGE: json
CODE:
{
  "schemaName": "meetupRsvp",
  "dimensionFieldSpecs": [
    {
      "name": "venue_name",
      "dataType": "STRING"
    },
    {
      "name": "event_name",
      "dataType": "STRING"
    },
    {
      "name": "event_id",
      "dataType": "STRING"
    },
    {
      "name": "event_time",
      "dataType": "LONG"
    },
    {
      "name": "group_city",
      "dataType": "STRING"
    },
    {
      "name": "group_country",
      "dataType": "STRING"
    },
    {
      "name": "group_id",
      "dataType": "LONG"
    },
    {
      "name": "group_name",
      "dataType": "STRING"
    }
  ],
  "metricFieldSpecs": [
    {
      "name": "rsvp_count",
      "dataType": "INT"
    }
  ],
  "timeFieldSpec": {
    "incomingGranularitySpec": {
      "name": "mtime",
      "dataType": "LONG",
      "timeType": "MILLISECONDS"
    }
  }
}

----------------------------------------

TITLE: Example: Dropping the 'admin' Role in Presto SQL
DESCRIPTION: This example demonstrates how to drop the 'admin' role using the DROP ROLE command in Presto SQL.

LANGUAGE: sql
CODE:
DROP ROLE admin;

----------------------------------------

TITLE: Spill Configuration Properties
DESCRIPTION: Properties controlling spill behavior and thresholds for various operations

LANGUAGE: properties
CODE:
native_join_spill_enabled=true
native_row_number_spill_enabled=true
native_window_spill_enabled=true
native_writer_spill_enabled=true
native_spill_compression_codec=none

----------------------------------------

TITLE: Querying Available Schemas in SQL Server
DESCRIPTION: This SQL query demonstrates how to list all available schemas in the configured SQL Server database using the Presto SQL syntax.

LANGUAGE: sql
CODE:
SHOW SCHEMAS FROM sqlserver;

----------------------------------------

TITLE: Using array_join Function in Presto SQL
DESCRIPTION: The array_join function is added to concatenate array elements into a string. It provides a convenient way to work with array data types.

LANGUAGE: SQL
CODE:
SELECT array_join(array_column, ',') FROM table_name;

----------------------------------------

TITLE: Update Status for Unshipped Orders
DESCRIPTION: Example showing how to update the status field to 'OVERDUE' for all purchases that don't have a ship date.

LANGUAGE: sql
CODE:
UPDATE purchases SET status = 'OVERDUE' WHERE ship_date IS NULL;

----------------------------------------

TITLE: New Bitwise Shift Functions in Presto
DESCRIPTION: This snippet lists new bitwise shift functions added to Presto. These functions include bitwise left shift, bitwise right shift, and bitwise right shift arithmetic.

LANGUAGE: text
CODE:
bitwise_left_shift

LANGUAGE: text
CODE:
bitwise_right_shift

LANGUAGE: text
CODE:
bitwise_right_shift_arithmetic

----------------------------------------

TITLE: SQL Configuration Property - Hive Compression
DESCRIPTION: Configuration property for specifying compression codec for ORC and DWRF formats independently from other formats.

LANGUAGE: sql
CODE:
hive.orc-compression-codec

----------------------------------------

TITLE: Querying PostgreSQL Schemas in Presto
DESCRIPTION: SQL commands to list available schemas, tables, and columns in a PostgreSQL database through Presto.

LANGUAGE: sql
CODE:
SHOW SCHEMAS FROM postgresql;
SHOW TABLES FROM postgresql.web;
DESCRIBE postgresql.web.clicks;
SHOW COLUMNS FROM postgresql.web.clicks;
SELECT * FROM postgresql.web.clicks;

----------------------------------------

TITLE: MongoDB Alter Table Operations
DESCRIPTION: SQL commands for altering table structure in MongoDB.

LANGUAGE: sql
CODE:
ALTER TABLE mongodb.admin.sample_table ADD COLUMN new_col INT;
ALTER TABLE mongodb.admin.sample_table DROP COLUMN new_col;
ALTER TABLE mongodb.admin.sample_table RENAME COLUMN is_active TO is_enabled;
ALTER TABLE mongodb.admin.sample_table RENAME TO renamed_table;

----------------------------------------

TITLE: Enabling Optimized RCFile Reader
DESCRIPTION: Configuration options to enable the experimental optimized RCFile reader in Hive connector. Includes both system-wide configuration and session property settings.

LANGUAGE: properties
CODE:
hive.optimized-reader.enabled
optimized_reader_enabled

----------------------------------------

TITLE: Referencing Pull Request in Presto Documentation
DESCRIPTION: Demonstrates how to reference a specific pull request in Presto documentation using the :pr: directive. This is used to provide more context about changes or features.

LANGUAGE: rst
CODE:
:pr:`15920`

----------------------------------------

TITLE: SQL Implicit Join Syntax
DESCRIPTION: Example showing the new implicit join syntax support in Presto.

LANGUAGE: sql
CODE:
SELECT * FROM a, b WHERE a.id = b.id;

----------------------------------------

TITLE: Showcasing New SQL Commands for Viewing Table and View Definitions
DESCRIPTION: This snippet illustrates the new SHOW CREATE TABLE and SHOW CREATE VIEW commands in Presto SQL. These commands allow users to view the definition of existing tables and views.

LANGUAGE: SQL
CODE:
SHOW CREATE TABLE table_name;
SHOW CREATE VIEW view_name;

----------------------------------------

TITLE: Performing Partitioned Limit with Row Number in Presto SQL
DESCRIPTION: Illustrates a streaming operation that selects N arbitrary rows per partition using the row_number() function. This query efficiently chooses five arbitrary rows from the 'orders' table for each 'orderstatus'.

LANGUAGE: SQL
CODE:
SELECT * FROM (
    SELECT row_number() OVER (PARTITION BY orderstatus) AS rn,
        custkey, orderdate, orderstatus
    FROM orders
) WHERE rn <= 5;

----------------------------------------

TITLE: Correlated Subquery with EXISTS
DESCRIPTION: Example of a correlated subquery using the EXISTS predicate.

LANGUAGE: SQL
CODE:
SELECT name
FROM nation
WHERE EXISTS (SELECT * FROM region WHERE region.regionkey = nation.regionkey)

----------------------------------------

TITLE: Constraint Management Operations
DESCRIPTION: Examples demonstrating how to add and drop PRIMARY KEY and UNIQUE constraints.

LANGUAGE: sql
CODE:
ALTER TABLE users ADD CONSTRAINT pk PRIMARY KEY (user_id);

ALTER TABLE IF EXISTS users ADD UNIQUE (first_name, last_name) DISABLED;

ALTER TABLE users DROP CONSTRAINT pk;

ALTER TABLE IF EXISTS users DROP CONSTRAINT IF EXISTS pk;

----------------------------------------

TITLE: IP Prefix Calculation in Presto SQL
DESCRIPTION: Returns the IP prefix of a given IP address with specified subnet size. Accepts both VARCHAR and IPADDRESS types.

LANGUAGE: sql
CODE:
SELECT ip_prefix(CAST('192.168.255.255' AS IPADDRESS), 9);
SELECT ip_prefix('2001:0db8:85a3:0001:0001:8a2e:0370:7334', 48);

----------------------------------------

TITLE: Listing System Tables in Presto
DESCRIPTION: Demonstrates how to list tables within a specific system schema.

LANGUAGE: sql
CODE:
SHOW TABLES FROM system.runtime;

----------------------------------------

TITLE: Positional Arguments Procedure Call
DESCRIPTION: Example of calling a procedure using positional arguments, where arguments must be in the correct order.

LANGUAGE: sql
CODE:
CALL catalog_name.system.procedure_name(arg_1, arg_2, ... arg_n);

----------------------------------------

TITLE: Configuring Verbose Task Statistics in Presto
DESCRIPTION: Sets the task.verbose-stats property to enable detailed statistics collection for tasks in Presto. This can be useful for performance analysis and debugging.

LANGUAGE: Properties
CODE:
task.verbose-stats=false

----------------------------------------

TITLE: Querying File Descriptor Counts from JMX in Presto
DESCRIPTION: SQL query example demonstrating how to fetch open and maximum file descriptor counts for each node using the JMX connector in Presto.

LANGUAGE: sql
CODE:
SELECT openfiledescriptorcount, maxfiledescriptorcount
FROM jmx.current."java.lang:type=operatingsystem";

----------------------------------------

TITLE: Revoking Insert and Select Privileges in Presto SQL
DESCRIPTION: Demonstrates how to revoke INSERT and SELECT privileges on the 'orders' table from the user 'alice' using the REVOKE command in Presto SQL.

LANGUAGE: sql
CODE:
REVOKE INSERT, SELECT ON orders FROM alice;

----------------------------------------

TITLE: Rendering Customized ANSI Bar Chart in Presto SQL
DESCRIPTION: This function renders a single line in an ANSI bar chart with customizable width and colors. It interpolates between low and high colors based on the input value.

LANGUAGE: SQL
CODE:
bar(x, width, low_color, high_color) -> varchar

----------------------------------------

TITLE: Resetting Session Properties in Presto SQL
DESCRIPTION: The RESET SESSION command is used to reset a session property value to its default. It can be applied to both general session properties and catalog-specific properties.

LANGUAGE: sql
CODE:
RESET SESSION optimize_hash_generation;

LANGUAGE: sql
CODE:
RESET SESSION hive.optimized_reader_enabled;

----------------------------------------

TITLE: SQL Cast Operation Example
DESCRIPTION: Demonstrates the behavior of casting a bigint to a bounded varchar where the result exceeds the specified length limit. The query will now fail with an error message when the target varchar length is insufficient.

LANGUAGE: sql
CODE:
select cast(1234500000000000000 as varchar(3));

----------------------------------------

TITLE: Replacing JSON to VARCHAR Cast in SQL
DESCRIPTION: Demonstrates how to replace the deprecated cast from JSON to VARCHAR using the new JSON_FORMAT function.

LANGUAGE: SQL
CODE:
JSON_FORMAT(x)

----------------------------------------

TITLE: SQL Cast Operations
DESCRIPTION: Enhanced CAST operations for timestamp and timezone conversions

LANGUAGE: sql
CODE:
CAST(value AS TIMESTAMP WITH TIME ZONE)
CAST(value AS TIMESTAMP)

----------------------------------------

TITLE: Using element_at Function in Presto SQL
DESCRIPTION: The element_at function in Presto SQL now returns NULL for out-of-range indices instead of failing. This change improves query resilience when working with arrays or maps.

LANGUAGE: sql
CODE:
element_at(array, index)

----------------------------------------

TITLE: Setting task_writer_count Session Property in Presto
DESCRIPTION: The task_writer_count session property is introduced to set the task.writer-count. It can be used to control the number of concurrent writers per task.

LANGUAGE: SQL
CODE:
SET SESSION task_writer_count = 4;

----------------------------------------

TITLE: Enabling HTTP Request Logging in Presto Configuration
DESCRIPTION: Configuration settings to enable HTTP request logging in Presto's config.properties file. This helps in diagnosing protocol-related issues by logging HTTP requests.

LANGUAGE: none
CODE:
http-server.log.enabled=true
http-server.log.path=<request_log_file_path>

----------------------------------------

TITLE: Querying JVM Version from JMX in Presto
DESCRIPTION: SQL query example showing how to retrieve the JVM version of every node in the Presto cluster using the JMX connector.

LANGUAGE: sql
CODE:
SELECT node, vmname, vmversion
FROM jmx.current."java.lang:type=runtime";

----------------------------------------

TITLE: Implementing Hash-Partitioned Semi-Joins in Presto SQL
DESCRIPTION: Enables hash-partitioning for semi-joins when the distributed_join option is enabled, potentially improving join performance.

LANGUAGE: SQL
CODE:
distributed_join

----------------------------------------

TITLE: String Concatenation Example
DESCRIPTION: Example showing string concatenation with the || operator

LANGUAGE: sql
CODE:
SELECT ltrim('test', 't'); -- est
SELECT ltrim('tetris', 'te'); -- ris

----------------------------------------

TITLE: SQL Configuration Property - Memory Management
DESCRIPTION: New soft memory limit configuration properties for controlling query memory allocation with defaults that can be overridden via session properties up to hard limits.

LANGUAGE: sql
CODE:
query.soft-max-memory-per-node
query.soft-max-total-memory-per-node
query.soft-max-total-memory
query.soft-max-memory

----------------------------------------

TITLE: Generating Java Keystore for Presto SSL/TLS
DESCRIPTION: Command to generate a Java Keystore file for SSL/TLS certificates used in Presto internal communication.

LANGUAGE: bash
CODE:
keytool -genkeypair -alias example.com -keyalg RSA -keystore keystore.jks

----------------------------------------

TITLE: Configuring Presto Grouped Execution
DESCRIPTION: Configuration properties for enabling and controlling grouped execution in Presto, including unified grouped execution and dynamic scheduling.

LANGUAGE: Properties
CODE:
grouped-execution-enabled=true
grouped_execution=true
dynamic-schedule-for-grouped-execution=true
grouped-execution-for-aggregation-enabled=true

----------------------------------------

TITLE: Syntax for SHOW GRANTS Command in Presto SQL
DESCRIPTION: The syntax for the SHOW GRANTS command in Presto SQL. It can be used with or without specifying a table name. The command requires the current catalog to be set and authentication to be enabled.

LANGUAGE: sql
CODE:
SHOW GRANTS [ ON [ TABLE ] table_name ]

----------------------------------------

TITLE: Defining Connector Name for Example HTTP Connector in Java
DESCRIPTION: This code defines the name of the Example HTTP connector as 'example-http'. This name is used to reference the connector in Presto configuration.

LANGUAGE: java
CODE:
@Override
public String getName()
{
    return "example-http";
}

----------------------------------------

TITLE: Creating Warning Block in reStructuredText
DESCRIPTION: Creates a warning block using reStructuredText directive to highlight a critical bug causing startup failure under specific conditions. It references a pull request for more details.

LANGUAGE: reStructuredText
CODE:
.. warning::
    There is a bug causing failure at startup if function namespace manager is enabled and Thrift is not configured (:pr:`15501`).

----------------------------------------

TITLE: Setting Table Properties in Presto SQL
DESCRIPTION: Shows how to set table properties using ALTER TABLE in Presto.

LANGUAGE: sql
CODE:
ALTER TABLE users SET PROPERTIES (x='y');

----------------------------------------

TITLE: Basic DROP VIEW Syntax
DESCRIPTION: Shows the basic syntax pattern for dropping a view in Presto SQL. The optional IF EXISTS clause can be used to suppress errors if the view doesn't exist.

LANGUAGE: sql
CODE:
DROP VIEW [ IF EXISTS ] view_name

----------------------------------------

TITLE: Connecting to Remote Presto Server
DESCRIPTION: Command to connect to a remote Presto server by specifying the full endpoint URL.

LANGUAGE: bash
CODE:
./presto --server http://www.example.net:8080

----------------------------------------

TITLE: Using enum_key Function in SQL
DESCRIPTION: The new enum_key UDF retrieves the key corresponding to an enum value. It takes an EnumType as input and returns a VARCHAR.

LANGUAGE: SQL
CODE:
ENUM_KEY(EnumType) -> VARCHAR

----------------------------------------

TITLE: IP Subnet Minimum Address Calculation in Presto SQL
DESCRIPTION: Returns the lowest IP address in a given subnet range for both IPv4 and IPv6 addresses.

LANGUAGE: sql
CODE:
SELECT ip_subnet_min(IPPREFIX '192.168.255.255/9');
SELECT ip_subnet_min(IPPREFIX '2001:0db8:85a3:0001:0001:8a2e:0370:7334/48');

----------------------------------------

TITLE: Querying Presto Memory Pools using Wildcards in JMX Connector
DESCRIPTION: SQL query example showing how to use wildcards to match multiple MBean objects and retrieve information from different Presto memory pools on each node.

LANGUAGE: sql
CODE:
SELECT freebytes, node, object_name
FROM jmx.current."com.facebook.presto.memory:*type=memorypool*";

----------------------------------------

TITLE: SQL Query for System Tables Count
DESCRIPTION: SQL query syntax for counting all rows in information_schema and sys tables, which previously encountered errors in execution.

LANGUAGE: sql
CODE:
COUNT(*)

----------------------------------------

TITLE: Adding Geometric Mean Function in Presto SQL
DESCRIPTION: Adds a new function 'geometric_mean' to calculate the geometric mean in Presto SQL queries.

LANGUAGE: SQL
CODE:
Add :func:`!geometric_mean` function.

----------------------------------------

TITLE: LDAP Password Authenticator Configuration
DESCRIPTION: Basic LDAP configuration properties for password authentication setup in password-authenticator.properties.

LANGUAGE: properties
CODE:
password-authenticator.name=ldap
ldap.url=ldaps://ldap-server:636
ldap.user-bind-pattern=<Refer below for usage>

----------------------------------------

TITLE: Defining Session Property Rules in Presto JSON Configuration
DESCRIPTION: This JSON snippet demonstrates how to define session property rules in Presto's configuration file. It includes examples for setting query execution time limits, configuring ETL queries, and enabling exchange materialization for high memory ETL queries based on resource groups and client tags.

LANGUAGE: json
CODE:
[
  {
    "group": "global.*",
    "sessionProperties": {
      "query_max_execution_time": "8h",
    }
  },
  {
    "group": "global.interactive.*",
    "sessionProperties": {
      "query_max_execution_time": "1h"
    }
  },
  {
    "group": "global.pipeline.*",
    "clientTags": ["etl"],
    "sessionProperties": {
      "scale_writers": "true",
      "writer_min_size": "1GB"
    }
  },
  {
    "group": "global.pipeline.*",
    "clientTags": ["high_mem_etl"],
    "sessionProperties": {
      "exchange_materialization_strategy": "ALL",
      "partitioning_provider_catalog": "hive",
      "hash_partition_count": 4096
    }
  }
]

----------------------------------------

TITLE: Querying Information Schema Columns in Presto Connectors
DESCRIPTION: Fix for failures when querying information_schema.columns without an equality predicate on table_name. This applies to MySQL, Redis, Kafka, and MongoDB connectors.

LANGUAGE: sql
CODE:
information_schema.columns

----------------------------------------

TITLE: Configuring Bytecode Generator in Presto Properties
DESCRIPTION: Configuration property to disable the new bytecode generator infrastructure and revert to the old implementation.

LANGUAGE: properties
CODE:
compiler.new-bytecode-generator-enabled=false

----------------------------------------

TITLE: Configuring Presto server properties
DESCRIPTION: Configuration file content for Presto server. This sets up the server as a coordinator, enables discovery, and sets the HTTP port to 8080.

LANGUAGE: properties
CODE:
coordinator=true
node-scheduler.include-coordinator=true
http-server.http.port=8080
discovery-server.enabled=true
discovery.uri=http://localhost:8080

----------------------------------------

TITLE: SQL Function Reference - Presto SQL
DESCRIPTION: SQL functions mentioned in the release notes for row numbering and user context.

LANGUAGE: sql
CODE:
row_number()
current_user

----------------------------------------

TITLE: Enabling New Resource Manager in Presto 0.109
DESCRIPTION: Configuration option to enable the new resource manager, replacing the experimental big query support.

LANGUAGE: properties
CODE:
experimental.cluster-memory-manager-enabled

----------------------------------------

TITLE: Restarting Presto Service
DESCRIPTION: Command to restart the Presto service after configuration changes or adding the Alluxio client jar.

LANGUAGE: bash
CODE:
$ ${PRESTO_HOME}/bin/launcher restart

----------------------------------------

TITLE: Creating App Secret JSON for Lark Sheets Connector
DESCRIPTION: Example of the JSON file structure for storing the app secret required by the Lark Sheets connector. This file should be referenced in the connector configuration.

LANGUAGE: json
CODE:
{"app-secret": "abcdefghijklmnopqrstuvwxyzabcdef"}

----------------------------------------

TITLE: GRANT Statement Syntax in Presto SQL
DESCRIPTION: The core syntax for the GRANT statement in Presto, showing how to grant specific privileges or all privileges on tables to users or roles, with optional grant option.

LANGUAGE: sql
CODE:
GRANT ( privilege [, ...] | ( ALL PRIVILEGES ) )
ON [ TABLE ] table_name TO ( user | USER user | ROLE role )
[ WITH GRANT OPTION ]

----------------------------------------

TITLE: Configuring MongoDB Connector Properties
DESCRIPTION: Basic configuration file setup for MongoDB connector in Presto's catalog directory.

LANGUAGE: none
CODE:
connector.name=mongodb
mongodb.seeds=host1,host:port

----------------------------------------

TITLE: Executing Partitioned Top-N Query with Row Number in Presto SQL
DESCRIPTION: Shows an optimized query that selects the top N rows from each partition based on a specific ordering. This example selects the five oldest rows based on 'orderdate' from the 'orders' table for each 'orderstatus'.

LANGUAGE: SQL
CODE:
SELECT * FROM (
    SELECT row_number() OVER (PARTITION BY orderstatus ORDER BY orderdate) AS rn,
        custkey, orderdate, orderstatus
    FROM orders
) WHERE rn <= 5;

----------------------------------------

TITLE: Output of Available TPCDS Schemas
DESCRIPTION: Displays the result of querying available schemas in the TPCDS connector, showing various scale factors and the 'tiny' schema for testing.

LANGUAGE: sql
CODE:
       Schema
--------------------
 information_schema
 sf1
 sf10
 sf100
 sf1000
 sf10000
 sf100000
 sf300
 sf3000
 sf30000
 tiny
(11 rows)

----------------------------------------

TITLE: Querying NULL Values in Presto SQL
DESCRIPTION: A bug fix has been implemented to correct an issue where querying for NULL values incorrectly returned 0 rows instead of the expected result.

LANGUAGE: sql
CODE:
SELECT NULL

----------------------------------------

TITLE: Syntax for SHOW CREATE FUNCTION in Presto SQL
DESCRIPTION: Defines the syntax for the SHOW CREATE FUNCTION command. It allows specifying a function name and optionally a list of parameter types.

LANGUAGE: SQL
CODE:
SHOW CREATE FUNCTION function_name [ ( parameter_type[, ...] ) ]

----------------------------------------

TITLE: Defining TRUNCATE Syntax in Presto SQL
DESCRIPTION: Specifies the syntax for the TRUNCATE command in Presto SQL. This command is used to delete all rows from a specified table.

LANGUAGE: sql
CODE:
TRUNCATE TABLE table_name

----------------------------------------

TITLE: URL Component Structure Format
DESCRIPTION: Demonstrates the standard URL syntax format supported by Presto's URL functions, showing the possible components that can be extracted including protocol, host, port, path, query, and fragment.

LANGUAGE: none
CODE:
[protocol:][//host[:port]][path][?query][#fragment]

----------------------------------------

TITLE: Basic Range Comparison with BETWEEN
DESCRIPTION: Demonstrates the usage of BETWEEN operator to test if a value falls within a specified range. Shows equivalent AND condition.

LANGUAGE: sql
CODE:
SELECT 3 BETWEEN 2 AND 6;

----------------------------------------

TITLE: SQL Configuration Property Example
DESCRIPTION: Example of a configuration property setting for temporary staging directory path in Hive connector. Supports user-specific paths through ${USER} placeholder variable.

LANGUAGE: sql
CODE:
/tmp/${USER}

----------------------------------------

TITLE: Configuration Properties - Writer Scaling
DESCRIPTION: Properties for enabling dynamic writer scaling and setting minimum size thresholds.

LANGUAGE: properties
CODE:
scale-writers
scale_writers
writer-min-size
writer_min_size

----------------------------------------

TITLE: Reservoir Sampling Example
DESCRIPTION: Example demonstrating how to use reservoir_sample function for fixed-size random sampling

LANGUAGE: SQL
CODE:
WITH result as (
    SELECT
        reservoir_sample(NULL, 0, col, 5) as reservoir
    FROM (
        VALUES
        1, 2, 3, 4, 5, 6, 7, 8, 9, 0
    ) as t(col)
)
SELECT 
    reservoir.processed_count, reservoir.sample
FROM result;

----------------------------------------

TITLE: Integer Division with Floating Point Result in Presto SQL
DESCRIPTION: Demonstrates how to perform floating point division on two integers in Presto by casting one operand to DOUBLE.

LANGUAGE: SQL
CODE:
SELECT CAST(5 AS DOUBLE) / 2

----------------------------------------

TITLE: Creating Table from Existing Data
DESCRIPTION: SQL command to create a new table in the Memory connector by copying data from an existing table.

LANGUAGE: sql
CODE:
CREATE TABLE memory.default.nation AS
SELECT * from tpch.tiny.nation;

----------------------------------------

TITLE: Documenting Hive Changes for Presto 0.245.1 in reStructuredText
DESCRIPTION: This snippet details a bug fix for reading ORC files with ARRAY/MAP/ROW of VARCHAR columns using selective stream readers in certain corner cases. It references a pull request for more information.

LANGUAGE: rst
CODE:
* Fix a bug reading ORC files with ``ARRAY``/``MAP``/``ROW`` of ``VARCHAR`` columns using the selective stream readers for some corner cases (:pr:`15549`).

----------------------------------------

TITLE: Avoiding Out of Bounds Array Access in Presto SQL
DESCRIPTION: Shows how to use an IF statement to prevent out of bounds access of array elements, which would result in an exception in Presto.

LANGUAGE: SQL
CODE:
SELECT IF(CARDINALITY(my_array) >= 3, my_array[3], NULL)
FROM ...

----------------------------------------

TITLE: Adding Partial JSON Casting Support in Presto SQL
DESCRIPTION: Introduces support for partial casting from JSON to complex types like arrays and maps of JSON in Presto SQL queries.

LANGUAGE: SQL
CODE:
array(json)

LANGUAGE: SQL
CODE:
map(varchar, json)

----------------------------------------

TITLE: Example: Showing All CREATE Function Statements for array_sum
DESCRIPTION: Illustrates how to display all SQL statements that can create functions named array_sum. This example shows two variations of the function for different array types (BIGINT and DOUBLE).

LANGUAGE: SQL
CODE:
SHOW CREATE FUNCTION example.default.array_sum

----------------------------------------

TITLE: New Bitwise Functions in Presto SQL
DESCRIPTION: New bitwise shift functions added to Presto for performing left shift, right shift, and arithmetic right shift operations.

LANGUAGE: sql
CODE:
bitwise_left_shift
bitwise_right_shift
bitwise_right_shift_arithmetic

----------------------------------------

TITLE: Configuring Path Style Access for S3 in Hive Connector
DESCRIPTION: Enables path style access to the S3 file system in the Hive connector. This can be useful for compatibility with certain S3-compatible storage systems.

LANGUAGE: SQL
CODE:
hive.s3.path-style-access=true

----------------------------------------

TITLE: Inserting Data into Memory Table
DESCRIPTION: SQL command demonstrating how to insert data into a table in the Memory connector.

LANGUAGE: sql
CODE:
INSERT INTO memory.default1.my_table (id, name, age) VALUES (1, 'John Doe', 30);

----------------------------------------

TITLE: Defining USE Statement Syntax in Presto SQL
DESCRIPTION: Demonstrates the syntax for the USE statement in Presto SQL. It shows two forms: one for specifying both catalog and schema, and another for specifying just the schema.

LANGUAGE: sql
CODE:
USE catalog.schema
USE schema

----------------------------------------

TITLE: Configuration Property Settings
DESCRIPTION: New configuration properties for Parquet statistics validation and Cassandra connectivity options.

LANGUAGE: sql
CODE:
hive.parquet.fail-on-corrupted-statistics
parquet_fail_with_corrupted_statistics
cassandra.splits-per-node
cassandra.protocol-version

----------------------------------------

TITLE: HDFS Configuration Properties
DESCRIPTION: Example HDFS configuration showing how to specify additional HDFS config files.

LANGUAGE: none
CODE:
hive.config.resources=/etc/hadoop/conf/core-site.xml,/etc/hadoop/conf/hdfs-site.xml

----------------------------------------

TITLE: Querying MySQL Tables in Presto
DESCRIPTION: SQL query to show tables in a specific MySQL database using Presto.

LANGUAGE: sql
CODE:
SHOW TABLES FROM mysql.web;

----------------------------------------

TITLE: Show Roles Query Syntax in Presto SQL
DESCRIPTION: SQL command syntax for displaying roles in Presto. Can show all roles in a catalog or just currently enabled roles for the session. The catalog parameter is optional - if omitted, the current catalog is used.

LANGUAGE: sql
CODE:
SHOW [CURRENT] ROLES [ FROM catalog ]

----------------------------------------

TITLE: Quantified Comparison with ALL/ANY/SOME
DESCRIPTION: Examples of using quantifiers (ALL, ANY, SOME) with comparison operators for subquery results.

LANGUAGE: sql
CODE:
SELECT 'hello' = ANY (VALUES 'hello', 'world');

SELECT 21 < ALL (VALUES 19, 20, 21);

SELECT 42 >= SOME (SELECT 41 UNION ALL SELECT 42 UNION ALL SELECT 43);

----------------------------------------

TITLE: Defining Kafka Table Structure in JSON
DESCRIPTION: JSON structure for defining a Kafka table in Presto. This includes table name, schema, topic name, and field definitions for both key and message data.

LANGUAGE: json
CODE:
{
    "tableName": "...",
    "schemaName": "...",
    "topicName": "...",
    "key": {
        "dataFormat": "...",
        "fields": [
            ...
        ]
    },
    "message": {
        "dataFormat": "...",
        "fields": [
            ...
       ]
    }
}

----------------------------------------

TITLE: Configuring MySQL Connector in Presto
DESCRIPTION: Example configuration for the MySQL connector in Presto. This snippet shows how to set up a catalog properties file for connecting to a MySQL database.

LANGUAGE: properties
CODE:
connector.name=mysql
connection-url=jdbc:mysql://example.net:3306
connection-user=root
connection-password=secret

----------------------------------------

TITLE: Setting Session Properties in Presto SQL
DESCRIPTION: The SET SESSION command is used to set session property values in Presto. It can be used to configure both general session properties and catalog-specific properties. The command takes a property name and an expression as arguments.

LANGUAGE: sql
CODE:
SET SESSION name = expression

LANGUAGE: sql
CODE:
SET SESSION catalog.name = expression

----------------------------------------

TITLE: Configuring Minimum Task Drivers in Java
DESCRIPTION: Sets the minimum number of drivers per task to help limit the number of concurrent readers.

LANGUAGE: java
CODE:
task.min-drivers

----------------------------------------

TITLE: Creating Table with Schema Definition
DESCRIPTION: SQL command to create a new table with specified columns and data types.

LANGUAGE: sql
CODE:
CREATE TABLE memory.default1.my_table (id integer, name varchar, age integer);

----------------------------------------

TITLE: Setting Join Distribution Type in Presto SQL
DESCRIPTION: Configures the join distribution type session property in Presto. Valid values are 'AUTOMATIC' (default), 'BROADCAST', or 'PARTITIONED'. This setting controls how Presto distributes data for join operations.

LANGUAGE: sql
CODE:
SET SESSION join_distribution_type = 'AUTOMATIC';

----------------------------------------

TITLE: Creating a Table in Kudu via Presto
DESCRIPTION: SQL statement to create a table in Kudu through Presto, demonstrating primary key, column properties, and partitioning options.

LANGUAGE: SQL
CODE:
CREATE TABLE kudu.default.users (
  user_id int WITH (primary_key = true),
  first_name varchar,
  last_name varchar
) WITH (
  partition_by_hash_columns = ARRAY['user_id'],
  partition_by_hash_buckets = 2
);

----------------------------------------

TITLE: Configuring HTTP Server Authentication in Presto
DESCRIPTION: Enable password authentication by setting the http-server.authentication.type configuration to include PASSWORD as an authentication type. This allows for generic password authentication using a pluggable password authenticator.

LANGUAGE: properties
CODE:
http-server.authentication.type

----------------------------------------

TITLE: Querying Schema Names in Presto SQL
DESCRIPTION: This snippet demonstrates the syntax for the SHOW SCHEMAS command in Presto SQL. It allows listing schemas from a specific catalog or the current catalog, with an optional LIKE pattern for filtering.

LANGUAGE: SQL
CODE:
SHOW SCHEMAS [ FROM catalog ] [ LIKE pattern ]

----------------------------------------

TITLE: Creating Schema in Memory Connector
DESCRIPTION: SQL command to create a new schema in the Memory connector.

LANGUAGE: sql
CODE:
CREATE SCHEMA memory.default1;

----------------------------------------

TITLE: Adding Column Rename Support in Presto ALTER TABLE
DESCRIPTION: Introduces support for renaming columns using the ALTER TABLE statement in Presto SQL.

LANGUAGE: SQL
CODE:
Support ``RENAME COLUMN`` in :doc:`/sql/alter-table`.

----------------------------------------

TITLE: Concatenating Multiple Binary Values in Presto SQL
DESCRIPTION: The concat() function concatenates multiple binary values. It takes any number of binary arguments and returns a single varbinary result.

LANGUAGE: SQL
CODE:
concat(binary1, ..., binaryN) -> varbinary

----------------------------------------

TITLE: Querying Table Statistics in Presto SQL
DESCRIPTION: Syntax examples for the SHOW STATS command to retrieve statistics for either a complete table or specific query results. The command can be used to analyze entire tables or filtered subsets of data.

LANGUAGE: sql
CODE:
SHOW STATS FOR table

LANGUAGE: sql
CODE:
SHOW STATS FOR ( SELECT * FROM table [ WHERE condition ] )

LANGUAGE: sql
CODE:
SHOW STATS FOR ( SELECT col1, col2,... colN FROM table [ WHERE condition ] )

----------------------------------------

TITLE: Describing Output of a Query with Expressions in Presto
DESCRIPTION: This example shows how to prepare and describe a query that includes expressions in its SELECT clause, demonstrating how aliases and computed columns are represented.

LANGUAGE: sql
CODE:
PREPARE my_select2 FROM
SELECT count(*) as my_count, 1+2 FROM nation

LANGUAGE: sql
CODE:
DESCRIBE OUTPUT my_select2;

LANGUAGE: none
CODE:
 Column Name | Catalog | Schema | Table |  Type  | Type Size | Aliased
-------------+---------+--------+-------+--------+-----------+---------
 my_count    |         |        |       | bigint |         8 | true
 _col1       |         |        |       | bigint |         8 | false
(2 rows)

----------------------------------------

TITLE: Configuring Hive Storage Format
DESCRIPTION: Property for specifying the storage format when writing data to Hive. Supports RCBINARY (default), RCTEXT, SEQUENCEFILE, and TEXTFILE formats.

LANGUAGE: properties
CODE:
hive.storage-format=RCBINARY

----------------------------------------

TITLE: SQL Subquery Example with Aggregation and Outer Join
DESCRIPTION: Example SQL query demonstrating a correlated scalar subquery that gets rewritten to an aggregation over an outer join when using push_aggregation_through_join optimization.

LANGUAGE: sql
CODE:
SELECT * FROM item i
    WHERE i.i_current_price > (
        SELECT AVG(j.i_current_price) FROM item j
            WHERE i.i_category = j.i_category);

----------------------------------------

TITLE: Creating Public Schema
DESCRIPTION: SQL command to create a publicly visible schema for a Lark spreadsheet.

LANGUAGE: sql
CODE:
CREATE SCHEMA my_ss WITH (TOKEN = 'shtcnBf5pg4BNSkwV2Ku5xwW9Pf', PUBLIC = true)

----------------------------------------

TITLE: Executing JOIN Queries in Presto SQL
DESCRIPTION: A rare condition causing incorrect results in JOIN queries has been fixed, improving the reliability of complex join operations.

LANGUAGE: sql
CODE:
JOIN

----------------------------------------

TITLE: Configuring S3 User Agent Prefix in Hive Connector
DESCRIPTION: Sets a custom user agent prefix for S3 requests in the Hive connector using the 'hive.s3.user-agent-prefix' configuration property.

LANGUAGE: Properties
CODE:
hive.s3.user-agent-prefix=custom-prefix

----------------------------------------

TITLE: New Geospatial Function in SQL
DESCRIPTION: Introduces a new geospatial function ST_GeometryType() in SQL for working with geometric data types.

LANGUAGE: SQL
CODE:
ST_GeometryType()

----------------------------------------

TITLE: Describing Accumulo Table in Presto
DESCRIPTION: SQL statement to describe the structure of an Accumulo table in Presto.

LANGUAGE: sql
CODE:
DESCRIBE myschema.scientists;

----------------------------------------

TITLE: Worker Info Endpoint Response
DESCRIPTION: Sample JSON response from the worker info endpoint showing basic status information including environment, version and uptime details.

LANGUAGE: text
CODE:
{"coordinator":false,"environment":"testing","nodeVersion":{"version":"testversion"},"starting":false,"uptime":"49.00s"}

----------------------------------------

TITLE: Querying Maximum Memory Limit for Presto Queries
DESCRIPTION: This configuration property sets the maximum amount of memory a query can use. It's particularly relevant when resource_overcommit is set to true.

LANGUAGE: SQL
CODE:
query.max-memory

----------------------------------------

TITLE: Starting Presto Server in Foreground
DESCRIPTION: Command to start the Presto server in the foreground on Mac.

LANGUAGE: bash
CODE:
presto-server run

----------------------------------------

TITLE: Time Zone Handling in SQL
DESCRIPTION: Examples demonstrating time zone operations and daylight saving time effects on date arithmetic

LANGUAGE: sql
CODE:
SELECT date_add('hour', 24, TIMESTAMP '2014-03-08 09:00:00');
-- 2014-03-09 10:00:00.000

LANGUAGE: sql
CODE:
SELECT date_add('day', 1, TIMESTAMP '2014-03-08 09:00:00');
-- 2014-03-09 09:00:00.000

LANGUAGE: sql
CODE:
SELECT TIMESTAMP '2014-03-09 02:30:00';

----------------------------------------

TITLE: Replacing log() Function with ln() in SQL
DESCRIPTION: The log() function has been removed due to incorrect argument order. It can be replaced using ln() for standard-compliant logarithm calculations. The function can be restored using a configuration option.

LANGUAGE: SQL
CODE:
ln(x) / ln(b)

----------------------------------------

TITLE: Presto Query Execution Response (JSON)
DESCRIPTION: Example JSON response from Presto after submitting a query. It includes query ID, next URI for retrieving results, column information, and query execution statistics.

LANGUAGE: json
CODE:
{
  "id":"20140108_110629_00011_dk5x2",
  "infoUri":"http://localhost:8001/v1/query/20140108_110629_00011_dk5x2",
  "partialCancelUri":"http://10.193.207.128:8080/v1/stage/20140108_110629_00011_dk5x2.1",
  "nextUri":"http://localhost:8001/v1/statement/20140108_110629_00011_dk5x2/1",
  "columns":
  [
      {
        "name":"name",
        "type":"varchar"
      }
  ],
  "stats":
  {
     "state":"RUNNING",
     "scheduled":false,
     "nodes":1,
     "totalSplits":0,
     "queuedSplits":0,
     "runningSplits":0,
     "completedSplits":0,
     "cpuTimeMillis":0,
     "wallTimeMillis":0,
     "processedRows":0,
     "processedBytes":0,
     "rootStage":
     {
        "stageId":"0",
        "state":"SCHEDULED",
        "done":false,
        "nodes":1,
        "totalSplits":0,
        "queuedSplits":0,
        "runningSplits":0,
        "completedSplits":0,
        "cpuTimeMillis":0,
        "wallTimeMillis":0,
        "processedRows":0,
        "processedBytes":0,
        "subStages":
        [
           {
              "stageId":"1",
              "state":"SCHEDULED",
              "done":false,
              "nodes":1,
              "totalSplits":0,
              "queuedSplits":0,
              "runningSplits":0,
              "completedSplits":0,
              "cpuTimeMillis":0,
              "wallTimeMillis":0,
              "processedRows":0,
              "processedBytes":0,
              "subStages":[]
           }
        ]
     }
  }
}

----------------------------------------

TITLE: Type Inspection in Presto SQL
DESCRIPTION: Function for determining the data type of an expression at runtime. Returns the type name as a varchar.

LANGUAGE: sql
CODE:
SELECT typeof(123); -- integer
SELECT typeof('cat'); -- varchar(3)
SELECT typeof(cos(2) + 1.5); -- double

----------------------------------------

TITLE: Partitioned Table Analysis with Date Values
DESCRIPTION: Example showing how to analyze specific partitions in a Hive partitioned table using date values.

LANGUAGE: sql
CODE:
ANALYZE hive.default.sales WITH (partitions = ARRAY[ARRAY['1992-01-01'], ARRAY['1992-01-02']]);

----------------------------------------

TITLE: Creating Tangent Function with Full Options in Presto
DESCRIPTION: Comprehensive example of creating a tangent function with all optional characteristics including description and language specification.

LANGUAGE: sql
CODE:
CREATE OR REPLACE FUNCTION example.default.tan(x double)
RETURNS double
COMMENT 'tangent trigonometric function'
LANGUAGE SQL
DETERMINISTIC
RETURNS NULL ON NULL INPUT
RETURN sin(x) / cos(x)

----------------------------------------

TITLE: Supporting LIMIT ALL Syntax in Presto 0.115
DESCRIPTION: Adds support for the 'LIMIT ALL' syntax in Presto queries. This allows users to explicitly specify that all rows should be returned, which can be useful in certain query contexts.

LANGUAGE: sql
CODE:
LIMIT ALL

----------------------------------------

TITLE: Basic Presto UPDATE Statement Syntax
DESCRIPTION: Demonstrates the fundamental syntax of the UPDATE statement in Presto SQL. Shows the structure for updating column values with optional WHERE clause filtering.

LANGUAGE: sql
CODE:
UPDATE table_name SET [ column = expression [, ... ] ] [ WHERE condition ]

----------------------------------------

TITLE: IP Subnet Maximum Address Calculation in Presto SQL
DESCRIPTION: Returns the highest IP address in a given subnet range for both IPv4 and IPv6 addresses.

LANGUAGE: sql
CODE:
SELECT ip_subnet_max(IPPREFIX '192.64.0.0/9');
SELECT ip_subnet_max(IPPREFIX '2001:0db8:85a3:0001:0001:8a2e:0370:7334/48');

----------------------------------------

TITLE: New SQL Function Addition
DESCRIPTION: Introduction of word_stem function for text processing operations and restrictions on aggregation functions min, max, min_by, and max_by to limit results to 10,000 elements.

LANGUAGE: sql
CODE:
min(col, n)
max(col, n)
min_by(col1, col2, n)
max_by(col1, col2, n)
word_stem()

----------------------------------------

TITLE: Preparing a Parameterized SELECT Query in Presto SQL
DESCRIPTION: Shows how to prepare a SELECT query with parameters. This query selects names from the 'nation' table based on regionkey and nationkey values that will be provided at execution time.

LANGUAGE: sql
CODE:
PREPARE my_select2 FROM
SELECT name FROM nation WHERE regionkey = ? AND nationkey < ?;

----------------------------------------

TITLE: Using Legacy Array Aggregation in Presto SQL
DESCRIPTION: Demonstrates how to enable the deprecated legacy array_agg behavior which ignores NULL input. This flag will be removed in a future release.

LANGUAGE: sql
CODE:
SET SESSION deprecated.legacy-array-agg = true;

----------------------------------------

TITLE: Enabling Legacy Scheduler in Presto SQL
DESCRIPTION: Configures Presto to use the legacy query scheduler before refactorings for full stage retries. This is a temporary property to allow rollback in case of bugs in the new scheduler.

LANGUAGE: SQL
CODE:
SET SESSION use_legacy_scheduler = true;

----------------------------------------

TITLE: Computing KLL Sketches in Presto
DESCRIPTION: Functions for creating and analyzing KLL sketches, which implement quantile sketches. Includes functions for sketch creation with optional k parameter control, quantile computation, and rank determination.

LANGUAGE: sql
CODE:
sketch_kll[T](x: T) -> kllsketch[T]

LANGUAGE: sql
CODE:
sketch_kll_with_k[T](x: T, k: int) -> kllsketch[T]

LANGUAGE: sql
CODE:
sketch_kll_quantile[T](sketch: kllsketch[T], rank: double[, inclusivity: boolean]) -> T

LANGUAGE: sql
CODE:
sketch_kll_rank[T](sketch: kllsketch[T], quantile: T[, inclusivity: boolean]) -> double

----------------------------------------

TITLE: Updating ConnectorSplitSource Interface Implementation in Java
DESCRIPTION: Breaking change that requires ConnectorSplitSource interface to extend Closeable. Connector implementations must be updated to implement this interface change.

LANGUAGE: java
CODE:
ConnectorSplitSource extends Closeable

----------------------------------------

TITLE: Configuring Raptor Connector in Presto
DESCRIPTION: Example configuration for the experimental Raptor connector in Presto. This snippet shows the contents of the catalog properties file for Raptor, which should be placed in etc/catalog/raptor.properties on both coordinator and worker nodes.

LANGUAGE: none
CODE:
connector.name=raptor
metadata.db.type=h2
metadata.db.filename=var/data/db/MetaStore

----------------------------------------

TITLE: Altering Verifier Queries Table in SQL
DESCRIPTION: SQL commands to modify the verifier_queries table by adding authentication columns for test and control users. This change is required when upgrading from version 0.92 to support username and password settings per query.

LANGUAGE: sql
CODE:
ALTER TABLE verifier_queries add test_username VARCHAR(256) NOT NULL default 'verifier-test';
ALTER TABLE verifier_queries add test_password VARCHAR(256);
ALTER TABLE verifier_queries add control_username VARCHAR(256) NOT NULL default 'verifier-test';
ALTER TABLE verifier_queries add control_password VARCHAR(256);

----------------------------------------

TITLE: Raptor Storage Configuration Properties
DESCRIPTION: Configuration properties for Raptor storage compression and writer optimization settings.

LANGUAGE: properties
CODE:
storage.orc.compression-kind
storage.orc.optimized-writer-stage

----------------------------------------

TITLE: Enabling Colocated Joins in Presto
DESCRIPTION: This configuration enables colocated joins in Presto, which can improve memory usage for certain types of joins. It requires setting both a config property and a session property.

LANGUAGE: SQL
CODE:
SET SESSION colocated_join = true;
SET SESSION concurrent_lifespans_per_task = 4;

----------------------------------------

TITLE: Syntax for SHOW STATS Command in Presto SQL
DESCRIPTION: Shows the various syntax options for the SHOW STATS command in Presto. It can be used to display statistics for a specific table or for the result of a query.

LANGUAGE: sql
CODE:
SHOW STATS FOR table
SHOW STATS FOR ( SELECT * FROM table [ WHERE condition ] )
SHOW STATS FOR ( SELECT col1, col2,... colN FROM table [ WHERE condition ] )

----------------------------------------

TITLE: Querying Partitioned Tables with Condition in Hive Connector
DESCRIPTION: Enables the use of 'SHOW PARTITIONS FROM <table> WHERE <condition>' for tables with a large number of partitions, as long as the condition reduces the partitions below the 'hive.max-partitions-per-scan' limit.

LANGUAGE: SQL
CODE:
SHOW PARTITIONS FROM <table> WHERE <condition>

----------------------------------------

TITLE: Creating Orders Table with Constraints and Comments
DESCRIPTION: Advanced example showing table creation with IF NOT EXISTS clause, column constraints, comments, and primary key definition.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS orders (
  orderkey bigint,
  orderstatus varchar NOT NULL,
  totalprice double COMMENT 'Price in cents.',
  orderdate date,
  PRIMARY KEY (orderkey)
)
COMMENT 'A table to keep track of orders.'

----------------------------------------

TITLE: Executing Presto CLI with Kerberos Authentication
DESCRIPTION: Bash script for invoking the Presto CLI with Kerberos authentication enabled. It includes necessary command-line options for specifying Kerberos configuration, principal, keytab, and TLS settings.

LANGUAGE: bash
CODE:
#!/bin/bash

./presto \
  --server https://presto-coordinator.example.com:7778 \
  --krb5-config-path /etc/krb5.conf \
  --krb5-principal someuser@EXAMPLE.COM \
  --krb5-keytab-path /home/someuser/someuser.keytab \
  --krb5-remote-service-name presto \
  --keystore-path /tmp/presto.jks \
  --keystore-password password \
  --catalog <catalog> \
  --schema <schema>

----------------------------------------

TITLE: Presto Geography Conversion Example
DESCRIPTION: Example showing distance calculation in euclidean plane vs spherical geography

LANGUAGE: sql
CODE:
ST_Distance(ST_Point(-71.0882, 42.3607), ST_Point(-74.1197, 40.6976))
ST_Distance(to_spherical_geography(ST_Point(-71.0882, 42.3607)), to_spherical_geography(ST_Point(-74.1197, 40.6976)))

----------------------------------------

TITLE: Documenting Warning for Presto 0.245.1 in reStructuredText
DESCRIPTION: This snippet presents a warning about a bug causing startup failure when the function namespace manager is enabled and Thrift is not configured. It references a pull request for more details.

LANGUAGE: rst
CODE:
.. warning::
    There is a bug causing failure at startup if function namespace manager is enabled and Thrift is not configured (:pr:`15501`).

----------------------------------------

TITLE: Demonstrating New EXPLAIN Option in SQL
DESCRIPTION: Illustrates the new EXPLAIN option that shows input tables with constraints and the output table in JSON format.

LANGUAGE: SQL
CODE:
EXPLAIN (TYPE IO, FORMAT JSON) SELECT * FROM table

----------------------------------------

TITLE: SQL SHOW TABLES Command
DESCRIPTION: Reference to improved error handling for SHOW TABLES command

LANGUAGE: sql
CODE:
SHOW TABLES

----------------------------------------

TITLE: SQL Function and Property References
DESCRIPTION: SQL function and configuration property references mentioned in the release notes, including array_cum_sum UDF and various session properties for optimization control.

LANGUAGE: sql
CODE:
cardinality(map_keys(x))
cardinality(map_values(x))
array_cum_sum()
TRUNCATE TABLE

----------------------------------------

TITLE: IP Subnet Range Array Generation in Presto SQL
DESCRIPTION: Returns an array containing the lowest and highest IP addresses in a subnet range.

LANGUAGE: sql
CODE:
SELECT ip_subnet_range(IPPREFIX '1.2.3.160/24');
SELECT ip_subnet_range(IPPREFIX '64:ff9b::52f4/120');

----------------------------------------

TITLE: Configuring Decimal Literal Parsing in Presto
DESCRIPTION: Configuration option to control how decimal literals are parsed in Presto. By default, decimal literals are now parsed as DECIMAL type, but this can be changed to the previous DOUBLE behavior.

LANGUAGE: properties
CODE:
parse-decimal-literals-as-double=false

----------------------------------------

TITLE: Dropping a Table in Presto SQL
DESCRIPTION: Demonstrates the syntax for dropping a table in Presto. The command removes an existing table from the database. The optional IF EXISTS clause can be used to suppress errors if the table doesn't exist.

LANGUAGE: sql
CODE:
DROP TABLE  [ IF EXISTS ] table_name

----------------------------------------

TITLE: Setting Memory Limits per Node in Presto SQL
DESCRIPTION: Configures the maximum total memory and maximum memory per node for a query. These session properties allow fine-tuning of memory allocation for queries.

LANGUAGE: SQL
CODE:
SET SESSION query_max_total_memory_per_node = '10GB';
SET SESSION query_max_memory_per_node = '8GB';

----------------------------------------

TITLE: Defining VALUES Syntax in Presto SQL
DESCRIPTION: Demonstrates the basic syntax for the VALUES clause in Presto SQL. It can be used to create an inline table with one or more rows, each containing one or more column expressions.

LANGUAGE: sql
CODE:
VALUES row [, ...]

LANGUAGE: sql
CODE:
( column_expression [, ...] )

----------------------------------------

TITLE: Configuring HTTP Server HTTPS Excluded Ciphers in Presto
DESCRIPTION: Update to the default value of the 'http-server.https.excluded-cipher' config property to exclude weak ciphers. This change affects TLS support and can be reverted by setting the property to an empty string.

LANGUAGE: properties
CODE:
http-server.https.excluded-cipher=

----------------------------------------

TITLE: Value at Quantile Calculation
DESCRIPTION: Retrieves approximate percentile values from a T-digest based on a quantile input between 0 and 1.

LANGUAGE: sql
CODE:
value_at_quantile(tdigest<double>, quantile) -> double

----------------------------------------

TITLE: Enhanced CTE Scheduling Configuration
DESCRIPTION: Session property to control enhanced CTE materialization scheduling where only dependent stages are blocked.

LANGUAGE: properties
CODE:
enhanced_cte_scheduling_enabled=true

----------------------------------------

TITLE: Show Functions Command Syntax
DESCRIPTION: Shows the syntax for listing available functions in Presto. Supports optional LIKE pattern matching with custom escape character for filtering function names.

LANGUAGE: sql
CODE:
SHOW FUNCTIONS [ LIKE pattern [ ESCAPE 'escape_character' ] ]

----------------------------------------

TITLE: SQL Operators and Commands Referenced in Release Notes
DESCRIPTION: SQL syntax elements mentioned in the release notes that received fixes or updates, including GROUP BY and CREATE TABLE commands.

LANGUAGE: sql
CODE:
GROUP BY

LANGUAGE: sql
CODE:
CREATE TABLE

----------------------------------------

TITLE: Granting Insert and Select Privileges
DESCRIPTION: Example showing how to grant INSERT and SELECT privileges on the orders table to a specific user.

LANGUAGE: sql
CODE:
GRANT INSERT, SELECT ON orders TO alice;

----------------------------------------

TITLE: Renaming Tables in MongoDB Connector with Presto SQL
DESCRIPTION: Demonstrates how to rename a table using the MongoDB connector in Presto, which now supports the ALTER TABLE RENAME TO syntax.

LANGUAGE: SQL
CODE:
ALTER TABLE old_table_name RENAME TO new_table_name;

----------------------------------------

TITLE: Enabling/Disabling Hive Data Cache in Presto SQL
DESCRIPTION: Control the Hive connector's data cache on a per-query basis using the 'hive.cache_enabled' session property.

LANGUAGE: sql
CODE:
SET SESSION hive.cache_enabled = true;

----------------------------------------

TITLE: Basic Array Aggregation Example
DESCRIPTION: Example showing how to use array_agg with ORDER BY clause to control result ordering

LANGUAGE: SQL
CODE:
array_agg(x ORDER BY y DESC)
array_agg(x ORDER BY x, y, z)

----------------------------------------

TITLE: Creating Maps from Entries in Presto SQL
DESCRIPTION: Demonstrates how to create a map from an array of key-value entries.

LANGUAGE: sql
CODE:
SELECT map_from_entries(ARRAY[(1, 'x'), (2, 'y')]); -- {1 -> 'x', 2 -> 'y'}

----------------------------------------

TITLE: Querying MySQL Schemas in Presto
DESCRIPTION: SQL query to show available MySQL databases (schemas) in Presto.

LANGUAGE: sql
CODE:
SHOW SCHEMAS FROM mysql;

----------------------------------------

TITLE: Configuring File-Based Resource Group Manager in PrestoDB
DESCRIPTION: This snippet demonstrates how to set up a file-based resource group manager in PrestoDB using a properties file. It specifies the configuration manager type and the path to the JSON configuration file.

LANGUAGE: text
CODE:
resource-groups.configuration-manager=file
resource-groups.config-file=etc/resource-groups.json

----------------------------------------

TITLE: Basic Authorization Settings for Presto
DESCRIPTION: Core authorization configuration properties including enabling authorization, setting default policy, allowed roles, and security settings.

LANGUAGE: properties
CODE:
http-server.authorization.enabled=true
http-server.authorization.default-policy=ALLOW
http-server.authorization.default-allowed-roles=USER,ADMIN
http-server.authorization.allow-unsecured-requests=false

----------------------------------------

TITLE: Configuring Event Listener Properties in Presto
DESCRIPTION: Example configuration file showing how to set up a custom event listener in Presto. The configuration includes the event listener name and custom properties that will be passed to the EventListenerFactory.create() method.

LANGUAGE: none
CODE:
event-listener.name=custom-event-listener
custom-property1=custom-value1
custom-property2=custom-value2

----------------------------------------

TITLE: Replacing an Existing View in Presto SQL
DESCRIPTION: Illustrates the use of the OR REPLACE clause to update an existing view named 'test' with a modified query.

LANGUAGE: sql
CODE:
CREATE OR REPLACE VIEW test AS
SELECT orderkey, orderstatus, totalprice / 4 AS quarter
FROM orders

----------------------------------------

TITLE: Adding Support for Inequality INNER JOIN in SQL
DESCRIPTION: Adds support for inequality INNER JOIN when each term of the condition refers to only one side of the join.

LANGUAGE: SQL
CODE:
INNER JOIN ... ON table1.column < table2.column

----------------------------------------

TITLE: Casting DOUBLE to DECIMAL in SQL
DESCRIPTION: Example of casting a DOUBLE value to DECIMAL(38) in SQL, demonstrating the fix for improved precision in decimal conversions.

LANGUAGE: SQL
CODE:
cast (double '100000000000000000000000000000000' as decimal(38))

----------------------------------------

TITLE: Syntax for DESCRIBE INPUT Statement in Presto
DESCRIPTION: Shows the basic syntax for the DESCRIBE INPUT statement in Presto SQL. It is used to list the input parameters of a prepared statement.

LANGUAGE: sql
CODE:
DESCRIBE INPUT statement_name

----------------------------------------

TITLE: Calculating Jaccard Index of Set Digests in Presto SQL
DESCRIPTION: Shows how to estimate the Jaccard index between two set digests using the jaccard_index function.

LANGUAGE: SQL
CODE:
SELECT jaccard_index(make_set_digest(v1), make_set_digest(v2))
FROM (VALUES (1, 1), (NULL,2), (2, 3), (NULL, 4)) T(v1, v2);

----------------------------------------

TITLE: Dropping Specific Function with Parameters
DESCRIPTION: Example showing how to drop a specific function with its parameter type specified.

LANGUAGE: sql
CODE:
DROP FUNCTION example.default.tan(double)

----------------------------------------

TITLE: Creating a Timestamp with Time Zone in SQL
DESCRIPTION: Demonstrates how to create a TIMESTAMP WITH TIME ZONE value in SQL, specifying both the timestamp and the time zone.

LANGUAGE: SQL
CODE:
SELECT TIMESTAMP '2014-03-14 09:30:00 Europe/Berlin';

----------------------------------------

TITLE: SQL Commands Referenced in Release Notes
DESCRIPTION: Key SQL operations mentioned in the release notes that received fixes or improvements.

LANGUAGE: sql
CODE:
GROUP BY
CREATE TABLE

----------------------------------------

TITLE: Configuring AWS Glue as Metastore in Presto
DESCRIPTION: Configuration setting to use AWS Glue as the metastore for Presto's Hive connector, enabling integration with AWS Glue Data Catalog.

LANGUAGE: properties
CODE:
hive.metastore=glue

----------------------------------------

TITLE: START TRANSACTION Syntax
DESCRIPTION: Basic syntax structure for the START TRANSACTION command showing possible modes and options.

LANGUAGE: none
CODE:
START TRANSACTION [ mode [, ...] ]

----------------------------------------

TITLE: Configuring BigQuery Connector in Presto (Properties)
DESCRIPTION: Example configuration for the BigQuery connector in Presto. This snippet shows how to set up a catalog properties file to mount the BigQuery connector, specifying the connector name and Google Cloud Platform project ID.

LANGUAGE: properties
CODE:
connector.name=bigquery
bigquery.project-id=<your Google Cloud Platform project id>

----------------------------------------

TITLE: Localization Examples in SQL
DESCRIPTION: Demonstrations of date formatting with different language localizations

LANGUAGE: sql
CODE:
SELECT date_format(TIMESTAMP '2001-01-09 09:04', '%M'); -- enero

LANGUAGE: sql
CODE:
SELECT date_format(TIMESTAMP '2001-01-09 09:04', '%M'); -- 1月

----------------------------------------

TITLE: New IEEE 754 Conversion Functions in SQL
DESCRIPTION: Introduces two new functions for converting IEEE 754 floating-point representations to decimal values.

LANGUAGE: SQL
CODE:
from_ieee754_32

LANGUAGE: SQL
CODE:
from_ieee754_64

----------------------------------------

TITLE: Retrieving Connection Properties in Presto JDBC Driver
DESCRIPTION: This new method allows retrieving connection properties after a connection is established in the Presto JDBC driver.

LANGUAGE: java
CODE:
PrestoConnection.getConnectionProperties()

----------------------------------------

TITLE: Configuring Node Scheduler Hash Strategy
DESCRIPTION: Configuration properties to enable consistent hashing for node selection during affinity scheduling. Includes settings for hash strategy and virtual node count.

LANGUAGE: properties
CODE:
node-scheduler.node-selection-hash-strategy=CONSISTENT
node-scheduler.consistent-hashing-min-virtual-node-count

----------------------------------------

TITLE: Examples of ROLLBACK Command Usage in Presto SQL
DESCRIPTION: Demonstrates two ways to use the ROLLBACK command in Presto SQL: with and without the optional WORK keyword.

LANGUAGE: sql
CODE:
ROLLBACK;
ROLLBACK WORK;

----------------------------------------

TITLE: Examples of SET SESSION Usage in Presto SQL
DESCRIPTION: These examples demonstrate how to use the SET SESSION command to enable optimize_hash_generation and set a Hive-specific property for optimized reader.

LANGUAGE: sql
CODE:
SET SESSION optimize_hash_generation = true;
SET SESSION hive.optimized_reader_enabled = true;

----------------------------------------

TITLE: Creating Tables from Query Results in Presto SQL
DESCRIPTION: Demonstrates how to create a new table based on the results of a SELECT query. The example shows creating a summary table of orders grouped by date. Tables are created unpartitioned in Hive using RCFile with Binary SerDe format.

LANGUAGE: sql
CODE:
CREATE TABLE orders_by_date AS
SELECT orderdate, sum(totalprice) AS price
FROM orders
GROUP BY orderdate

----------------------------------------

TITLE: Role-Identity Mapping Configuration for Presto
DESCRIPTION: Example configuration file content for mapping roles to identity regex patterns in the Configuration-based Authorizer.

LANGUAGE: properties
CODE:
user=.*
internal=coordinator
admin=su.*

----------------------------------------

TITLE: Example JSON Configuration for File-Based Resource Group Manager
DESCRIPTION: This JSON snippet provides an example configuration for a file-based resource group manager in PrestoDB. It defines various resource groups, their properties, and selector rules for query routing.

LANGUAGE: json
CODE:
{
    "rootGroups": [
        {
            "name": "global",
            "softMemoryLimit": "80%",
            "hardConcurrencyLimit": 100,
            "maxQueued": 1000,
            "schedulingPolicy": "weighted",
            "jmxExport": true,
            "subGroups": [
                {
                    "name": "data_definition",
                    "softMemoryLimit": "10%",
                    "hardConcurrencyLimit": 5,
                    "maxQueued": 100,
                    "schedulingWeight": 1
                },
                {
                    "name": "adhoc",
                    "softMemoryLimit": "10%",
                    "hardConcurrencyLimit": 50,
                    "maxQueued": 1,
                    "schedulingWeight": 10,
                    "subGroups": [
                        {
                            "name": "other",
                            "softMemoryLimit": "10%",
                            "hardConcurrencyLimit": 2,
                            "maxQueued": 1,
                            "schedulingWeight": 10,
                            "schedulingPolicy": "weighted_fair",
                            "subGroups": [
                                {
                                    "name": "${USER}",
                                    "softMemoryLimit": "10%",
                                    "hardConcurrencyLimit": 1,
                                    "maxQueued": 100
                                }
                            ]
                        },
                        {
                            "name": "bi-${toolname}",
                            "softMemoryLimit": "10%",
                            "hardConcurrencyLimit": 10,
                            "maxQueued": 100,
                            "schedulingWeight": 10,
                            "schedulingPolicy": "weighted_fair",
                            "subGroups": [
                                {
                                    "name": "${USER}",
                                    "softMemoryLimit": "10%",
                                    "hardConcurrencyLimit": 3,
                                    "maxQueued": 10
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "pipeline",
                    "softMemoryLimit": "80%",
                    "hardConcurrencyLimit": 45,
                    "maxQueued": 100,
                    "schedulingWeight": 1,
                    "jmxExport": true,
                    "subGroups": [
                        {
                            "name": "pipeline_${USER}",
                            "softMemoryLimit": "50%",
                            "hardConcurrencyLimit": 5,
                            "maxQueued": 100
                        }
                    ]
                }
            ]
        },
        {
            "name": "admin",
            "softMemoryLimit": "100%",
            "hardConcurrencyLimit": 50,
            "maxQueued": 100,
            "schedulingPolicy": "query_priority",
            "jmxExport": true
        }
    ],
    "selectors": [
        {
            "user": "bob",
            "group": "admin"
        },
        {
            "source": ".*pipeline.*",
            "queryType": "DATA_DEFINITION",
            "group": "global.data_definition"
        },
        {
            "source": ".*pipeline.*",
            "group": "global.pipeline.pipeline_${USER}"
        },
        {
            "source": "jdbc#(?<toolname>.*)",
            "clientTags": ["hi-pri"],
            "group": "global.adhoc.bi-${toolname}.${USER}"
        },
        {
            "group": "global.adhoc.other.${USER}"
        }
    ],
    "cpuQuotaPeriod": "1h"
}

----------------------------------------

TITLE: Starting Presto CLI on Intel Mac
DESCRIPTION: Command to start the Presto CLI (Command Line Interface) on an Intel-based Mac system.

LANGUAGE: bash
CODE:
presto

----------------------------------------

TITLE: Example Sheet Queries
DESCRIPTION: Various SQL query examples showing different ways to reference and query sheets within a Lark spreadsheet.

LANGUAGE: sql
CODE:
-- by sheet title
SELECT * FROM my_ss."number_text"

-- by sheet index
SELECT * FROM my_ss."$0"

-- by sheet id
SELECT * FROM my_ss."@MT1p4I"

----------------------------------------

TITLE: Configuring Refresh Period for File-Based Access Control in Presto
DESCRIPTION: This snippet shows how to set a refresh period for the file-based access control configuration, allowing changes to be applied without restarting Presto.

LANGUAGE: properties
CODE:
security.refresh-period=1s

----------------------------------------

TITLE: Defining SQL Query with Tags for Benchmark
DESCRIPTION: This SQL snippet shows how to define a query file for benchmarking. It includes tags 'projection' and 'filter' which will be included in the benchmark output, followed by a SQL query that sums the length of comments from the lineitem table.

LANGUAGE: sql
CODE:
projection=true
filter=false
=================
SELECT SUM(LENGTH(comment))
FROM lineitem

----------------------------------------

TITLE: Enabling JWT Authentication for Presto Internal Communication
DESCRIPTION: Configures JWT authentication for internal communication between Presto nodes, including shared secret setup.

LANGUAGE: properties
CODE:
internal-communication.jwt.enabled=true
internal-communication.shared-secret=<secret>

----------------------------------------

TITLE: SHOW TABLES Command Syntax
DESCRIPTION: Shows the syntax for listing tables in Presto SQL. The command can optionally filter by schema and supports pattern matching with LIKE clause. An escape character can be specified for the LIKE pattern.

LANGUAGE: sql
CODE:
SHOW TABLES [ FROM schema ] [ LIKE pattern [ ESCAPE 'escape_character' ] ]

----------------------------------------

TITLE: Configuring HDFS Data Caching in Presto
DESCRIPTION: Added support for reading data from HDFS while caching the fetched data on local storage. This feature can be enabled by specifying the cache directory configuration.

LANGUAGE: SQL
CODE:
SET SESSION cache.base-directory = '/path/to/cache/directory';

----------------------------------------

TITLE: ROLLBACK Command Syntax
DESCRIPTION: Shows the basic syntax structure for the ROLLBACK command in Presto. The optional WORK keyword can be included for ANSI SQL compliance.

LANGUAGE: none
CODE:
ROLLBACK [ WORK ]

----------------------------------------

TITLE: Configuring TPCH Connector in Presto
DESCRIPTION: This snippet shows how to configure the TPCH connector in Presto by creating a catalog property file. The TPCH connector generates synthetic data following the TPC-H specification for testing and bug reports.

LANGUAGE: properties
CODE:
connector.name=tpch

----------------------------------------

TITLE: Configuring Exchange Error Duration in Presto
DESCRIPTION: Configuration property for setting the minimum error duration for exchange operations in Presto. This property is now ignored and will be removed in a future release.

LANGUAGE: properties
CODE:
exchange.min-error-duration

----------------------------------------

TITLE: Generating Random Shared Secret for Presto JWT Authentication
DESCRIPTION: Command to generate a large random key for use as a shared secret in Presto JWT authentication.

LANGUAGE: bash
CODE:
openssl rand 512 | base64

----------------------------------------

TITLE: Configuring Presto JVM settings
DESCRIPTION: JVM configuration file content for Presto server. This sets various JVM options including memory allocation, garbage collection, and error handling.

LANGUAGE: properties
CODE:
-server
-Xmx2G
-XX:+UseG1GC
-XX:G1HeapRegionSize=32M
-XX:+UseGCOverheadLimit
-XX:+ExplicitGCInvokesConcurrent
-XX:+HeapDumpOnOutOfMemoryError
-XX:+ExitOnOutOfMemoryError
-Djdk.attach.allowAttachSelf=true

----------------------------------------

TITLE: Configuring SHA1PRNG for Presto HTTPS
DESCRIPTION: Sets the random number generator algorithm to SHA1PRNG for improved performance in high-bandwidth environments.

LANGUAGE: properties
CODE:
http-server.https.secure-random-algorithm=SHA1PRNG

----------------------------------------

TITLE: Setting Internal Authentication Type in Presto
DESCRIPTION: Configuration property to specify the internal authentication type for Presto nodes.

LANGUAGE: properties
CODE:
node.internal-address=<authentication type>

----------------------------------------

TITLE: Querying MBeans with Wildcard in JMX
DESCRIPTION: Demonstrates the new feature of using a wildcard character '*' to query multiple MBeans with a single query in JMX.

LANGUAGE: SQL
CODE:
SELECT * FROM jmx.current."java.lang:type=*"

----------------------------------------

TITLE: Displaying SHOW GRANTS Command Syntax in Presto SQL
DESCRIPTION: This snippet shows the syntax for the SHOW GRANTS command in Presto. It can be used with or without specifying a table name to list grants for the current user.

LANGUAGE: sql
CODE:
SHOW GRANTS [ ON [ TABLE ] table_name ]

----------------------------------------

TITLE: Naming Columns in VALUES Table with AS Clause in Presto SQL
DESCRIPTION: Shows how to use the AS clause to name columns in a table created with VALUES.

LANGUAGE: sql
CODE:
SELECT * FROM (
    VALUES
        (1, 'a'),
        (2, 'b'),
        (3, 'c')
) AS t (id, name)

----------------------------------------

TITLE: Removing Compiler Interpreter Configuration in Presto
DESCRIPTION: Configuration property for enabling the compiler interpreter in Presto. This property has been removed and is no longer used.

LANGUAGE: properties
CODE:
compiler.interpreter-enabled

----------------------------------------

TITLE: Configuring Hive Partition Cache Validation in Presto
DESCRIPTION: Enables validation of values returned from the partition cache with the actual value from Metastore by setting a configuration property. This helps ensure data consistency between the cache and the actual Metastore.

LANGUAGE: sql
CODE:
hive.partition-cache-validation-percentage = <value>

----------------------------------------

TITLE: Using any_keys_match Function in Presto SQL
DESCRIPTION: Demonstrates the use of any_keys_match function to check if any key in a map satisfies a given predicate.

LANGUAGE: sql
CODE:
SELECT any_keys_match(map(array['a', 'b', 'c'], array[1, 2, 3]), x -> x = 'a'); -- true

----------------------------------------

TITLE: Listing All Grants for Current User in Presto SQL
DESCRIPTION: This example shows how to use the SHOW GRANTS command without specifying a table name, which lists all grants for the current user on all tables in all schemas of the current catalog.

LANGUAGE: sql
CODE:
SHOW GRANTS;

----------------------------------------

TITLE: Setting Presto JDBC Connection Properties
DESCRIPTION: Java code example showing two equivalent methods for setting connection properties: using a Properties object and URL parameters. The example sets user, password, and SSL properties.

LANGUAGE: java
CODE:
// properties
String url = "jdbc:presto://example.net:8080/hive/sales";
Properties properties = new Properties();
properties.setProperty("user", "test");
properties.setProperty("password", "secret");
properties.setProperty("SSL", "true");
Connection connection = DriverManager.getConnection(url, properties);

// URL parameters
String url = "jdbc:presto://example.net:8443/hive/sales?user=test&password=secret&SSL=true";
Connection connection = DriverManager.getConnection(url);

----------------------------------------

TITLE: Using regexp_replace without Replacement
DESCRIPTION: Removes all substrings matching a regular expression pattern from a string.

LANGUAGE: sql
CODE:
SELECT regexp_replace('1a 2b 14m', '\d+[ab] '); -- '14m'

----------------------------------------

TITLE: Creating Multi-Column Table with VALUES in Presto SQL
DESCRIPTION: Demonstrates creating a table with two columns and three rows using VALUES.

LANGUAGE: sql
CODE:
VALUES
    (1, 'a'),
    (2, 'b'),
    (3, 'c')

----------------------------------------

TITLE: Referencing histogram Function in Presto SQL
DESCRIPTION: Example of using the histogram function in Presto SQL, which has been fixed for map types when type coercion is required.

LANGUAGE: sql
CODE:
:func:`!histogram`

----------------------------------------

TITLE: Configuring Amazon S3 Credentials for Hive Connector
DESCRIPTION: Configuration properties required to enable Amazon S3 integration with Hive connector, specifying AWS access credentials.

LANGUAGE: properties
CODE:
hive.s3.aws-access-key=AKIAIOSFODNN7EXAMPLE
hive.s3.aws-secret-key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

----------------------------------------

TITLE: Configuring FQDN Communication in Presto
DESCRIPTION: Sets up Presto nodes to communicate using fully qualified domain names, either automatically or manually specified.

LANGUAGE: properties
CODE:
node.internal-address-source=FQDN

LANGUAGE: properties
CODE:
node.internal-address=<node fqdn>

----------------------------------------

TITLE: Configuration Property - Deduplication for Distinct Aggregates
DESCRIPTION: New configuration property to enable deduplication of input data before spilling for distinct aggregates, which can be overridden by session property.

LANGUAGE: properties
CODE:
experimental.dedup-based-distinct-aggregation-spill-enabled

----------------------------------------

TITLE: Example: Dropping Admin Role in Presto SQL
DESCRIPTION: This example demonstrates how to drop the 'admin' role using the DROP ROLE command in Presto.

LANGUAGE: sql
CODE:
DROP ROLE admin;

----------------------------------------

TITLE: Creating External Accumulo Table in Presto
DESCRIPTION: SQL statement to create an external Accumulo table in Presto.

LANGUAGE: sql
CODE:
CREATE TABLE external_table (
  a VARCHAR,
  b BIGINT,
  c DATE
)
WITH (
  column_mapping = 'a:md:a,b:md:b,c:md:c',
  external = true,
  index_columns = 'b,c',
  locality_groups = 'foo:b,c'
);

----------------------------------------

TITLE: Session Properties - Colocated Join Configuration
DESCRIPTION: Configuration properties for enabling colocated joins and specifying concurrent lifespans per task.

LANGUAGE: properties
CODE:
colocated-joins-enabled
colocated_join
concurrent_lifespans_per_task

----------------------------------------

TITLE: Configuring Node Scheduler in Presto
DESCRIPTION: Configuration property to disable location-aware scheduling in Presto's node scheduler. When set to false, this property previously caused failures for connectors with non-remote splits.

LANGUAGE: properties
CODE:
node-scheduler.location-aware-scheduling-enabled=false

----------------------------------------

TITLE: Creating KHyperLogLog Sketch in Presto SQL
DESCRIPTION: Creates a KHyperLogLog sketch representing the relationship between columns x and y. The MinHash structure summarizes x, and the HyperLogLog sketches represent y values linked to x values.

LANGUAGE: SQL
CODE:
khyperloglog_agg(x, y)

----------------------------------------

TITLE: SQL Type Cast - MongoDB ObjectId
DESCRIPTION: New casting support for MongoDB ObjectId to string type

LANGUAGE: sql
CODE:
CAST(ObjectId() as STRING)

----------------------------------------

TITLE: Using regexp_replace with Replacement String
DESCRIPTION: Replaces all matches of a regular expression pattern with a replacement string, supporting group references.

LANGUAGE: sql
CODE:
SELECT regexp_replace('1a 2b 14m', '(\d+)([ab]) ', '3c$2 '); -- '3ca 3cb 14m'

----------------------------------------

TITLE: Optimizing Join Query with Partitioned Tables in SQL
DESCRIPTION: Illustrates how the new range predicate pushdown feature optimizes JOIN queries where tables are partitioned on the same column, limiting the scan to matching partitions.

LANGUAGE: SQL
CODE:
SELECT * FROM data_1_year JOIN data_1_week USING (ds)

----------------------------------------

TITLE: Enabling Null Filter Optimization in Presto SQL
DESCRIPTION: Enables the optimization to push null filters to the INNER side of equijoins using the optimize-nulls-in-joins property.

LANGUAGE: SQL
CODE:
SET SESSION optimize_nulls_in_joins = true;

----------------------------------------

TITLE: Renaming a View with IF EXISTS Clause in Presto SQL
DESCRIPTION: An example of renaming a view named 'users' to 'people' using the ALTER VIEW RENAME TO statement with the IF EXISTS clause to prevent errors if the view doesn't exist.

LANGUAGE: sql
CODE:
ALTER VIEW IF EXISTS users RENAME TO people;

----------------------------------------

TITLE: Creating Single-Column Table with VALUES in Presto SQL
DESCRIPTION: Shows how to use VALUES to create a simple table with one column and three rows.

LANGUAGE: sql
CODE:
VALUES 1, 2, 3

----------------------------------------

TITLE: Using ST_Buffer Geospatial Function in Presto SQL
DESCRIPTION: Demonstrates the usage of the newly added ST_Buffer geospatial function in Presto SQL queries.

LANGUAGE: SQL
CODE:
SELECT ST_Buffer(geometry, distance);

----------------------------------------

TITLE: Checking Key Existence in Maps in Presto SQL
DESCRIPTION: Demonstrates how to check if a key exists in a map using the map_key_exists function.

LANGUAGE: sql
CODE:
SELECT map_key_exists(MAP(ARRAY['x','y'], ARRAY[100,200]), 'x'); -- TRUE

----------------------------------------

TITLE: Generating Uniqueness Distribution of KHyperLogLog Sketch in Presto SQL
DESCRIPTION: Returns a histogram representing the uniqueness distribution of the KHyperLogLog sketch. The function can optionally take a histogram size parameter to specify the number of buckets.

LANGUAGE: SQL
CODE:
uniqueness_distribution(khll)
uniqueness_distribution(khll, histogramSize)

----------------------------------------

TITLE: Querying Date Truncation in SQL
DESCRIPTION: Example of using date_trunc function to group data by hour for aggregation purposes

LANGUAGE: sql
CODE:
SELECT date_trunc('hour', timestamp_column), count(*)
FROM ...
GROUP BY 1

----------------------------------------

TITLE: Querying JSON Data with Bracket Syntax in Presto SQL
DESCRIPTION: Demonstrates the new bracket syntax for json_extract and json_extract_scalar functions in Presto SQL. This allows for more flexible JSON path expressions, including support for special characters in key names.

LANGUAGE: SQL
CODE:
SELECT json_extract(json, '$.store[book]');
SELECT json_extract(json, '$.store["book name"]');

----------------------------------------

TITLE: Calculating Jaccard Index of KHyperLogLog Sketches in Presto SQL
DESCRIPTION: Computes the Jaccard index of the data represented by the MinHash structures of two KHyperLogLog sketches.

LANGUAGE: SQL
CODE:
jaccard_index(khll1, khll2)

----------------------------------------

TITLE: Setting Presto CLI Session Properties
DESCRIPTION: Example showing how to set session properties using the Presto CLI command line arguments.

LANGUAGE: none
CODE:
presto-cli --session color=red --session size=large

----------------------------------------

TITLE: Using any_values_match Function in Presto SQL
DESCRIPTION: Shows how to use the any_values_match function to check if any value in a map satisfies a given predicate.

LANGUAGE: sql
CODE:
SELECT ANY_VALUES_MATCH(map(ARRAY['a', 'b', 'c'], ARRAY[1, 2, 3]), x -> x = 1); -- true

----------------------------------------

TITLE: Specifying Allowed HTTP Protocols for Presto JDBC Client
DESCRIPTION: Shows how to set the 'protocols' connection parameter for the Presto JDBC client. This parameter allows users to specify which HTTP protocols the client is permitted to use.

LANGUAGE: java
CODE:
Properties properties = new Properties();
properties.setProperty("protocols", "http,https");
Connection connection = DriverManager.getConnection("jdbc:presto://example.net:8080/hive/default", properties);

----------------------------------------

TITLE: SQL Statement - Truncate Table
DESCRIPTION: New SQL statement added for truncating tables

LANGUAGE: sql
CODE:
TRUNCATE TABLE

----------------------------------------

TITLE: SQL Configuration Property - Offset Clause
DESCRIPTION: New session and configuration property to enable OFFSET clause support in SQL queries

LANGUAGE: sql
CODE:
offset_clause_enabled

----------------------------------------

TITLE: Demonstrating LIKE Clause Usage in SQL for Presto Catalog and Schema Queries
DESCRIPTION: This snippet shows the new support for using the LIKE clause with SHOW CATALOGS and SHOW SCHEMAS commands in Presto SQL. It allows for pattern matching when listing catalogs or schemas.

LANGUAGE: SQL
CODE:
SHOW CATALOGS LIKE 'pattern';
SHOW SCHEMAS LIKE 'pattern';

----------------------------------------

TITLE: Computing Intersection Cardinality of KHyperLogLog Sketches in Presto SQL
DESCRIPTION: Returns the set intersection cardinality of the data represented by the MinHash structures of two KHyperLogLog sketches.

LANGUAGE: SQL
CODE:
intersection_cardinality(khll1, khll2)

----------------------------------------

TITLE: Enabling Hash Generation Optimization in Presto SQL
DESCRIPTION: Adds a configuration property to enable an optimization for hash aggregations in Presto. This optimization is disabled by default and can be enabled by adding the specified property to the coordinator config.

LANGUAGE: SQL
CODE:
optimizer.optimize-hash-generation=true

----------------------------------------

TITLE: Creating New Table from VALUES in Presto SQL
DESCRIPTION: Demonstrates how to create a new table using CREATE TABLE AS with VALUES to define the table contents.

LANGUAGE: sql
CODE:
CREATE TABLE example AS
SELECT * FROM (
    VALUES
        (1, 'a'),
        (2, 'b'),
        (3, 'c')
) AS t (id, name)

----------------------------------------

TITLE: DROP VIEW with IF EXISTS Example
DESCRIPTION: Shows how to safely drop a view using the IF EXISTS clause to prevent errors if the view doesn't exist.

LANGUAGE: sql
CODE:
DROP VIEW IF EXISTS orders_by_date

----------------------------------------

TITLE: Adding Redis Connector in Presto
DESCRIPTION: Introduces the new Redis connector for Presto, allowing integration with Redis databases.

LANGUAGE: SQL
CODE:
Add :doc:`/connector/redis`.

----------------------------------------

TITLE: Altering MySQL Table in Presto
DESCRIPTION: SQL statements to alter a MySQL table structure using Presto, including adding, renaming, and dropping columns.

LANGUAGE: sql
CODE:
ALTER TABLE mysql.web.page_views ADD COLUMN zipcode VARCHAR;
ALTER TABLE mysql.web.page_views RENAME COLUMN zipcode TO location;
ALTER TABLE mysql.web.page_views DROP COLUMN location;

----------------------------------------

TITLE: Configuring TrustStore for HANA Connection in Presto
DESCRIPTION: Advanced configuration for setting up a truststore for SSL certificate validation in the HANA connection. This example shows how to specify the truststore file, password, and type in the JDBC URL.

LANGUAGE: properties
CODE:
connection-url=jdbc:sap://<host>:<port>?encrypt=true&validateCertificate=true&trustStore=path/to/truststore.jks&trustStorePassword=password&trustStoreType=jks