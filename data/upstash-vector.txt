TITLE: Inserting Documents into Vector Store
DESCRIPTION: Adding processed documents to the Upstash Vector index

LANGUAGE: python
CODE:
inserted_vectors = store.add_documents(docs)

----------------------------------------

TITLE: Implementing Upstash Vector Integration with Hosted Embedding Models
DESCRIPTION: TypeScript code for integrating Upstash Vector using hosted embedding models, including functions for upserting and querying embeddings.

LANGUAGE: typescript
CODE:
import { Index } from '@upstash/vector'

// Configure Upstash Vector client
// Make sure UPSTASH_VECTOR_REST_URL and UPSTASH_VECTOR_REST_TOKEN are in your .env
const index = new Index({
  url: process.env.UPSTASH_VECTOR_REST_URL!,
  token: process.env.UPSTASH_VECTOR_REST_TOKEN!,
})

// Chunking logic: split on period
function generateChunks(input: string): string[] {
  return input
    .trim()
    .split('.')
    .filter(i => i !== '')
}

// Upsert
export async function upsertEmbedding(resourceId: string, content: string) {
  const chunks = generateChunks(content)
  
  // Convert each chunk into an Upstash upsert object
  const toUpsert = chunks.map((chunk, i) => ({
    id: `${resourceId}-${i}`,
    data: chunk, // Using the data field instead of vector because embeddings are generated by Upstash
    metadata: {
      resourceId,
      content: chunk, // Store the chunk as metadata to use during response generation
    },
  }))

  await index.upsert(toUpsert)
}

// Query
export async function findRelevantContent(query: string, k = 4) {
  const result = await index.query({
    data: query, // Again, using the data field instead of vector field
    topK: k,
    includeMetadata: true, // Fetch metadata as well
  })

  return result
}

----------------------------------------

TITLE: Implementing Semantic Search with Upstash Vector in Python
DESCRIPTION: This Python script demonstrates how to use Upstash Vector for semantic search. It initializes the index, inserts documents, and performs a search query. The script uses environment variables for authentication and includes error handling.

LANGUAGE: python
CODE:
from upstash_vector import Index
from dotenv import load_dotenv
import time

# Load environment variables from a .env file
load_dotenv()

# Initialize the index from environment variables (URL and token)
index = Index.from_env()

# Example documents to be indexed
documents = [
    {"id": "1", "text": "Python is a popular programming language."},
    {"id": "2", "text": "Machine learning enables computers to learn from data."},
    {"id": "3", "text": "Upstash provides low-latency database solutions."},
    {"id": "4", "text": "Semantic search is a technique for understanding the meaning of queries."},
    {"id": "5", "text": "Cloud computing allows for scalable and flexible resource management."}
]

# Reset the index to remove previous data
index.reset()

# Upsert documents into Upstash (embeddings are generated automatically)
for doc in documents:
    index.upsert(
        vectors=[
            (doc["id"], doc["text"], {"text": doc["text"]})
        ]
    )
    print(f"Document {doc['id']} inserted.")

# Wait for the documents to be indexed
time.sleep(1)

# Search for documents similar to the query
query = "What is Python?"
results = index.query(data=query, top_k=3, include_metadata=True)

# Display search results
print("Search Results:")
for result in results:
    print(f"ID: {result.id}")
    print(f"Score: {result.score:.4f}")
    print(f"Metadata: {result.metadata}")
    print("-" * 40)  # Separator line between results

----------------------------------------

TITLE: Implementing Upstash Vector Integration with Custom Embedding Model
DESCRIPTION: TypeScript code for integrating Upstash Vector using a custom embedding model (OpenAI), including functions for generating embeddings, upserting, and querying.

LANGUAGE: typescript
CODE:
import { Index } from '@upstash/vector'
import { embed, embedMany } from 'ai'
import { openai } from '@ai-sdk/openai'

// Configure Upstash Vector client
const index = new Index({
  url: process.env.UPSTASH_VECTOR_REST_URL!,
  token: process.env.UPSTASH_VECTOR_REST_TOKEN!,
})

// Chunking logic: split on period
function generateChunks(input: string): string[] {
  return input
    .trim()
    .split('.')
    .filter(i => i !== '')
}

// Define the embedding model
const embeddingModel = openai.embedding('text-embedding-ada-002')

// Function to generate a single embedding
async function generateEmbedding(value: string): Promise<number[]> {
  const input = value.replaceAll('\\n', ' ')
  const { embedding } = await embed({
    model: embeddingModel,
    value: input,
  })
  return embedding
}

// Function to generate embeddings for multiple chunks
async function generateEmbeddings(
  value: string,
): Promise<Array<{ content: string; embedding: number[] }>> {
  const chunks = generateChunks(value)
  const { embeddings } = await embedMany({
    model: embeddingModel,
    values: chunks,
  })
  return embeddings.map((vector, i) => ({
    content: chunks[i],
    embedding: vector,
  }))
}

// Upsert
export async function upsertEmbeddings(resourceId: string, content: string) {
  // Generate embeddings for each chunk
  const chunkEmbeddings = await generateEmbeddings(content)
  // Convert each chunk into an Upstash upsert object
  const toUpsert = chunkEmbeddings.map((chunk, i) => ({
    id: `${resourceId}-${i}`, // e.g. "abc123-0"
    vector: chunk.embedding,
    metadata: {
      resourceId,
      content: chunk.content,
    },
  }))

  await index.upsert(toUpsert)
}

// Query
export async function findRelevantContent(query: string, k = 4) {
  const userEmbedding = await generateEmbedding(query)
  const result = await index.query({
    vector: userEmbedding,
    topK: k,
    includeMetadata: true,
  })

  return result
}

----------------------------------------

TITLE: Initializing LlamaIndex with Upstash Vector Store
DESCRIPTION: Setup and configuration of LlamaIndex with Upstash Vector store, including document loading and index creation

LANGUAGE: python
CODE:
from llama_index.core import VectorStoreIndex, SimpleDirectoryReader
from llama_index.vector_stores.upstash import UpstashVectorStore
from llama_index.core import StorageContext
import openai
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
openai.api_key = os.environ["OPENAI_API_KEY"]

# Setup the Upstash vector store 
upstash_vector_store = UpstashVectorStore(
    url=os.environ["UPSTASH_VECTOR_REST_URL"],
    token=os.environ["UPSTASH_VECTOR_REST_TOKEN"],
)

# Read the document about global warming from the documents directory
documents = SimpleDirectoryReader("./documents/").load_data()

# Initialize the storage context with the Upstash vector store
storage_context = StorageContext.from_defaults(vector_store=upstash_vector_store)

# Create the index from the loaded document with 1536 dimensions and cosine distance
index = VectorStoreIndex.from_documents(
    documents, storage_context=storage_context
)

----------------------------------------

TITLE: Implementing Resource Creation Server Action
DESCRIPTION: TypeScript code for a server action to create a new resource and upsert it to the Upstash Vector index.

LANGUAGE: typescript
CODE:
'use server'

import { z } from 'zod'
import { upsertEmbeddings } from '@/lib/ai/upstashVector'

// A simple schema for incoming resource content
const NewResourceSchema = z.object({
  content: z.string().min(1),
})

// Server action to parse the input and upsert to the index
export async function createResource(input: { content: string }) {
  const { content } = NewResourceSchema.parse(input)

  // Generate a random ID
  const resourceId = crypto.randomUUID()

  // Upsert the chunks/embeddings to Upstash Vector
  await upsertEmbeddings(resourceId, content)

  return `Resource ${resourceId} created and embedded.`
}

----------------------------------------

TITLE: Implementing Semantic Search with LangChain and Upstash Vector in Python
DESCRIPTION: This Python script demonstrates how to create an Upstash Vector store, add documents to it, and perform a similarity search using LangChain. It includes loading environment variables, initializing the vector store, adding sample documents, and executing a query.

LANGUAGE: python
CODE:
from dotenv import load_dotenv
from langchain_community.vectorstores.upstash import UpstashVectorStore
from langchain.schema import Document

# Load environment variables
load_dotenv()

# Create a vector store instance
store = UpstashVectorStore(
    embedding=True,  # Embedding option enabled
)

# Sample documents to upload
documents = [
    Document(page_content="Upstash Vector is a scalable vector database."),
    Document(page_content="LangChain is a framework for building intelligent apps."),
    Document(page_content="Semantic search enables advanced query matching."),
]

# Add documents to the Upstash Vector index
store.add_documents(documents)

# Perform a similarity search
query = "What is LangChain?"
results = store.similarity_search(query, k=3)

print("Similarity Search Results:")
for res in results:
    print(res.page_content)

----------------------------------------

TITLE: Upserting Vectors with Metadata
DESCRIPTION: Shows how to insert or update vectors with associated metadata across different programming languages. The metadata can include contextual information like URLs that can be used for filtering results.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.upsert(
    [("id-0", [0.9215, 0.3897]), {"url": "https://imgur.com/z9AVZLb"}],
)

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.upsert({
  "id": "id-0",
  vector: [0.9215, 0.3897],
  metadata: {
    url: "https://imgur.com/z9AVZLb",
  },
})

----------------------------------------

TITLE: Querying Vectors Using Data Field with Filtering in TypeScript
DESCRIPTION: Demonstrates querying vectors by providing data text instead of vectors directly, with metadata filtering for specific genre and title. The query uses Upstash Embedding to generate vectors automatically.

LANGUAGE: typescript
CODE:
const results = await index.query({
  data: "Movie about an adventure of a hobbit in a fantasy world.",
  includeVectors: true,
  includeMetadata: true,
  topK: 1,
  filter: "genre = 'fantasy' and title = 'Lord of the Rings'",
});
/*
[
  {
    id: "1234",
    vector: [0.1, 0.2, 0.3, 0.4, 0.5],
    score: 0.9999999,
    metadata: {
      title: "Lord of The Rings",
      genre: "fantasy",
      category: "classic",
    },
  }
]
*/

----------------------------------------

TITLE: Querying Vectors with Metadata
DESCRIPTION: Demonstrates how to query vectors while including metadata in the results and applying metadata-based filters to refine search results.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.query(
    [0.9215, 0.3897],
    top_k=5,
    include_metadata=True,
    filter="url GLOB '*imgur.com*'",
)

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.query({
  vector: [0.9215, 0.3897],
  topK: 5,
  includeMetadata: true,
  filter: "url GLOB '*imgur.com*'",
})

----------------------------------------

TITLE: Querying Text Data with Upstash Vector
DESCRIPTION: Examples of querying raw text data from Upstash Vector using different programming languages. Demonstrates how to perform similarity searches with metadata inclusion.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.query(
    data="What is Upstash?",
    top_k=1,
    include_metadata=True,
)

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.query({
  data: "What is Upstash?",
  topK: 1,
  includeMetadata: true,
})

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex("UPSTASH_VECTOR_REST_URL", "UPSTASH_VECTOR_REST_TOKEN")

	index.QueryData(vector.QueryData{
		Data:            "What is Upstash?",
		TopK:            1,
		IncludeMetadata: true,
	})
}

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataQuery;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->queryData(new DataQuery(
  data: 'What is Upstash?',
  topK: 1,
  includeMetadata: true,
));

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/query-data \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"data": "What is Upstash?", "topK": 1, "includeMetadata": "true"}'

----------------------------------------

TITLE: Initializing Upstash Vector Store
DESCRIPTION: Loading environment variables and creating a vector store instance with automatic embeddings generation

LANGUAGE: python
CODE:
from dotenv import load_dotenv
from langchain_community.vectorstores.upstash import UpstashVectorStore

load_dotenv()

# Create a vector store instance where embeddings are generated by Upstash
store = UpstashVectorStore(embedding=True)

----------------------------------------

TITLE: Querying Vectors from Upstash Index in Python
DESCRIPTION: Demonstrates how to perform a single vector query using the Upstash Vector index. The example shows generating a random vector and querying similar vectors with metadata filtering and various include options.

LANGUAGE: python
CODE:
import random

from upstash_vector import Index

index = Index.from_env()

# Generate a random vector for similarity comparison
dimension = 128  # Adjust based on your index's dimension
query_vector = [random.random() for _ in range(dimension)]

# Execute the query
query_result = index.query(
    vector=query_vector,
    include_metadata=True,
    include_data=True,
    include_vectors=False,
    top_k=5,
    filter="genre = 'fantasy' and title = 'Lord of the Rings'",
)

# Print the query result
for result in query_result:
    print("Score:", result.score)
    print("ID:", result.id)
    print("Vector:", result.vector)
    print("Metadata:", result.metadata)
    print("Data:", result.data)

----------------------------------------

TITLE: Initializing LlamaIndex with Upstash Vector Store
DESCRIPTION: This Python code demonstrates how to set up LlamaIndex with Upstash Vector. It loads environment variables, initializes the Upstash Vector store, loads documents, creates a storage context, and initializes the index with the documents.

LANGUAGE: python
CODE:
from llama_index.core import VectorStoreIndex, SimpleDirectoryReader
from llama_index.vector_stores.upstash import UpstashVectorStore
from llama_index.core import StorageContext
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Set OpenAI API key
openai.api_key = os.environ["OPENAI_API_KEY"]

# Initialize Upstash Vector store
upstash_vector_store = UpstashVectorStore(
    url=os.environ["UPSTASH_VECTOR_REST_URL"],
    token=os.environ["UPSTASH_VECTOR_REST_TOKEN"],
)

# Load documents using SimpleDirectoryReader
documents = SimpleDirectoryReader("./documents/").load_data()

# Create a storage context and initialize the index
storage_context = StorageContext.from_defaults(vector_store=upstash_vector_store)
index = VectorStoreIndex.from_documents(
    documents, storage_context=storage_context
)

----------------------------------------

TITLE: Indexing and Querying with Upstash Vector
DESCRIPTION: Implementation of document indexing and querying using Upstash Vector store and LlamaIndex.

LANGUAGE: python
CODE:
from llama_index.core import VectorStoreIndex
from llama_index.vector_stores.upstash import UpstashVectorStore
from llama_index.core import StorageContext
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

# Set up Upstash Vector Store
vector_store = UpstashVectorStore(
    url=os.getenv("UPSTASH_VECTOR_REST_URL"),
    token=os.getenv("UPSTASH_VECTOR_REST_TOKEN")
)

# Create storage context and index the parsed document
storage_context = StorageContext.from_defaults(vector_store=vector_store)
index = VectorStoreIndex.from_documents(documents, storage_context=storage_context)

# Perform a query
query_engine = index.as_query_engine()
response = query_engine.query("What is the main topic discussed in the document?")

----------------------------------------

TITLE: Implementing Gradio Interface with Question Answering
DESCRIPTION: Setting up the Gradio interface with question answering functionality using Hugging Face pipeline and vector similarity search.

LANGUAGE: python
CODE:
# Set up a Hugging Face Question Answering model
qa_pipeline = pipeline("question-answering", model="distilbert-base-cased-distilled-squad")

# Gradio interface function
def answer_question(query):
    # Retrieve relevant documents from Upstash Vector
    results = vector_store.similarity_search(query, k=3)
    
    # Use the most relevant document for QA
    if results:
        context = results[0].page_content
        qa_input = {"question": query, "context": context}
        answer = qa_pipeline(qa_input)["answer"]
        return f"Answer: {answer}\n\nContext: {context}"
    else:
        return "No relevant context found."

# Set up Gradio interface
iface = gr.Interface(
    fn=answer_question,
    inputs="text",
    outputs="text",
    title="RAG Application",
    description="Ask a question, and the app will retrieve relevant information and provide an answer."
)

# Launch the Gradio app
iface.launch()

----------------------------------------

TITLE: Implementing Chat API Route for RAG Chatbot
DESCRIPTION: TypeScript code for the chat API route, which acts as the backend for the RAG chatbot. It uses the Vercel AI SDK and implements tools for resource creation and information retrieval.

LANGUAGE: typescript
CODE:
import { openai } from '@ai-sdk/openai'
import { streamText, tool } from 'ai'
import { z } from 'zod'

// Tools
import { createResource } from '@/lib/actions/resources'
import { findRelevantContent } from '@/lib/ai/upstashVector'

// Allow streaming responses up to 30 seconds
export const maxDuration = 30

export async function POST(req: Request) {
  const { messages } = await req.json()

  const result = streamText({
    // 1. Choose your AI model
    model: openai('gpt-4o'),

    // 2. Pass along the conversation messages from the user
    messages,

    // 3. Prompt the model
    system: `You are a helpful RAG assistant. 
    You have the ability to add and retrieve content from your knowledge base.
    Only respond to the user with information found in your knowledge base.
    If no relevant information is found, respond with: "Sorry, I don't know."`,

    // 4. Provide your "tools": resource creation & retrieving content
    tools: {
      addResource: tool({
        description: `Add new content to the knowledge base.`,
        parameters: z.object({
          content: z.string().describe('The content to embed and store'),
        }),
        execute: async ({ content }) => {
          const msg = await createResource({ content })
          return msg
        },
      }),
      getInformation: tool({
        description: `Retrieve relevant knowledge from your knowledge base to answer user queries.`,
        parameters: z.object({
          question: z.string().describe('The question to search for'),
        }),
        execute: async ({ question }) => {
          const hits = await findRelevantContent(question)
          // Return array of metadata for each chunk
          // e.g. [{ id, score, metadata: { resourceId, content }}, ... ]
          return hits
        },
      }),
    },
  })

  // 5. Return the streaming response
  return result.toDataStreamResponse()
}

----------------------------------------

TITLE: Querying Vectors with Basic Parameters in TypeScript
DESCRIPTION: Example showing how to query vectors using direct vector input with basic parameters like topK, includeMetadata, and includeVectors. The response includes vector IDs, scores, and optional metadata.

LANGUAGE: typescript
CODE:
await index.query({
  topK: 2,
  vector: [ ... ],
  includeMetadata: true,
  includeVectors: true
}, { namespace: "my-namespace" })
/*
[
  {
    id: '6345',
    score: 0.85,
    vector: [],
    metadata: {
      sentence: "Upstash is great."
    }
  },
  {
    id: '1233',
    score: 0.75,
    vector: [],
    metadata: undefined
  },
]
*/

----------------------------------------

TITLE: Upserting Vector with Metadata using Upstash Vector SDK in Python
DESCRIPTION: Comprehensive example demonstrating how to use the Upstash Vector SDK to initialize the client, generate a random vector, and upsert it with metadata into the Upstash Vector database.

LANGUAGE: python
CODE:
import random
from upstash_vector import Index

# Initialize the index client using environment variables
index = Index.from_env()

def main():
    # Define the dimension based on the index configuration
    dimension = 128
    # Generate a random vector for upsert
    vector_to_upsert = [random.random() for _ in range(dimension)]
    # Additional metadata associated with the vector
    metadata = {"text": "example test for metadata"}

    # Upsert the vector into the index
    index.upsert(vectors=[
        ("id-for-vector", vector_to_upsert, metadata)
    ])

----------------------------------------

TITLE: Performing Semantic Search
DESCRIPTION: Executing a similarity search query on the vector store

LANGUAGE: python
CODE:
result = store.similarity_search("Technology's role in global warming.", k=5)
print(result)

----------------------------------------

TITLE: Querying Upstash Vector Index
DESCRIPTION: Shows how to perform similarity search queries on an Upstash Vector index with various programming languages. The example demonstrates querying with a 2-dimensional vector, retrieving top 3 results with metadata included.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(url="UPSTASH_VECTOR_REST_URL", token="UPSTASH_VECTOR_REST_TOKEN")

index.query(
    vector=[0.6, 0.8],
    top_k=3,
    include_metadata=True,
)

LANGUAGE: typescript
CODE:
import { Index } from "@upstash/vector";

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.query({ vector: [0.6, 0.8], topK: 3, includeMetadata: true })

LANGUAGE: go
CODE:
import "github.com/upstash/vector-go"

func main() {
  index := vector.NewIndex("UPSTASH_VECTOR_REST_URL", "UPSTASH_VECTOR_REST_TOKEN")

  index.Query(vector.Query{
	  Vector:          []float32{0.6, 0.8},
	  TopK:            3,
	  IncludeMetadata: true,
  })
}

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;

$index = new Index(
  url: '<UPSTASH_VECTOR_REST_URL>',
  token: '<UPSTASH_VECTOR_REST_TOKEN>',
);

$index->query(new VectorQuery(
  vector: [0.6, 0.8],
  topK: 3,
  includeMetadata: true,
));

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/query \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"vector": [0.6, 0.8], "topK": 3, "includeMetadata": "true"}'

----------------------------------------

TITLE: Using Reciprocal Rank Fusion Algorithm in Python
DESCRIPTION: Example of how to use the Reciprocal Rank Fusion (RRF) algorithm for fusing dense and sparse query scores in Python.

LANGUAGE: python
CODE:
from upstash_vector import Index
from upstash_vector.types import FusionAlgorithm, SparseVector

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.query(
    vector=[0.5, 0.4],
    sparse_vector=SparseVector([3, 5], [0.3, 0.5]),
    fusion_algorithm=FusionAlgorithm.RRF,
)

----------------------------------------

TITLE: Updating Data Entry Metadata in Upstash Vector (TypeScript)
DESCRIPTION: This snippet shows how to update the metadata of an existing data entry in the Upstash Vector index.

LANGUAGE: typescript
CODE:
await index.upsert({
	id: "1234",
	data: "Upstash product"
	metadata: {
		title: "Redis"
	}
})

await index.upsert({
	id: "1234",
	metadata: {
		title: "QStash"
	}
})

----------------------------------------

TITLE: Querying with Dense and Sparse Vectors in Go
DESCRIPTION: Example of how to query an Upstash Vector hybrid index using dense and sparse vectors in Go.

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex(
		"UPSTASH_VECTOR_REST_URL",
		"UPSTASH_VECTOR_REST_TOKEN",
	)

	scores, err := index.Query(vector.Query{
		Vector: []float32{0.5, 0.4},
		SparseVector: &vector.SparseVector{
			Indices: []int32{3, 5},
			Values:  []float32{0.3, 05},
		},
		TopK:            5,
		IncludeMetadata: true,
	})
}

----------------------------------------

TITLE: Weighting Query Values with IDF in Python
DESCRIPTION: Shows how to use inverse document frequency (IDF) weighting in queries, which is particularly useful for algorithms like BM25.

LANGUAGE: python
CODE:
from upstash_vector import Index
from upstash_vector.types import WeightingStrategy

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.query(
    data="Upstash Vector",
    top_k=5,
    weighting_strategy=WeightingStrategy.IDF,
)

----------------------------------------

TITLE: Sample Metadata Structure in JSON
DESCRIPTION: Example metadata structure showing supported value types including strings, numbers, booleans, nested objects and arrays.

LANGUAGE: json
CODE:
{
    "city": "Istanbul",
    "country": "Turkey",
    "is_capital": false,
    "population": 15460000,
    "geography": {
        "continent": "Asia",
        "coordinates": {
            "latitude": 41.0082,
            "longitude": 28.9784
        }
    },
    "economy": {
        "currency": "TRY",
        "major_industries": [
            "Tourism",
            "Textiles",
            "Finance"
        ]
    }
}

----------------------------------------

TITLE: Querying Hybrid Vector Index in PHP
DESCRIPTION: Demonstrates querying hybrid indexes using both dense and sparse vectors simultaneously. Combines features of both vector types for more comprehensive searching.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;
use Upstash\Vector\SparseVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->query(new VectorQuery(
  vector: [0.1, 0.2, ...],
  sparseVector: new SparseVector(
    indices: [1, 2, 3],
    values: [5.0, 6.0, 7.0],
  ),
  topK: 15,
));

----------------------------------------

TITLE: Performing Text-Based Similarity Search
DESCRIPTION: Implementation of semantic search using text queries to find similar documents.

LANGUAGE: python
CODE:
# Querying Vectors using a text query
query_text = "What are the effects of global warming?"
query_embedding = embeddings.embed_query(query_text)

# Perform similarity search with the query text
result_text_query = vector_store.similarity_search(
    query=query_text,
    k=5  # Number of top results to return
)

print("Results for text-based similarity search:")
for res in result_text_query:
    print(res.page_content)

----------------------------------------

TITLE: Type-Safe Vector Querying with Custom Metadata Types in TypeScript
DESCRIPTION: Shows how to implement type-safe vector querying using custom metadata types for improved TypeScript type checking and autocompletion. Includes example of accessing typed metadata fields.

LANGUAGE: typescript
CODE:
type Metadata = {
  title: string,
  genre: 'sci-fi' | 'fantasy' | 'horror' | 'action'
}

const results = await index.query<Metadata>({
  vector: [
    ... // query embedding
  ],
  includeVectors: true,
  topK: 1,
  filter: "genre = 'fantasy' and title = 'Lord of the Rings'"
})

if (results[0].metadata) {
  // Since we passed the Metadata type parameter above,
  // we can interact with metadata fields without having to
  // do any typecasting.
  const { title, genre } = results[0].metadata;
  console.log(`The best match in fantasy was ${title}`)
}

----------------------------------------

TITLE: Type-Safe Vector Querying with Custom Metadata Types in TypeScript
DESCRIPTION: Shows how to implement type-safe vector querying using custom metadata types for improved TypeScript type checking and autocompletion. Includes example of accessing typed metadata fields.

LANGUAGE: typescript
CODE:
type Metadata = {
  title: string,
  genre: 'sci-fi' | 'fantasy' | 'horror' | 'action'
}

const results = await index.query<Metadata>({
  vector: [
    ... // query embedding
  ],
  includeVectors: true,
  topK: 1,
  filter: "genre = 'fantasy' and title = 'Lord of the Rings'"
})

if (results[0].metadata) {
  // Since we passed the Metadata type parameter above,
  // we can interact with metadata fields without having to
  // do any typecasting.
  const { title, genre } = results[0].metadata;
  console.log(`The best match in fantasy was ${title}`)
}

----------------------------------------

TITLE: Querying with Embedding Models in PHP
DESCRIPTION: Shows how to query vectors using string data that gets automatically converted to vector embeddings when the index is configured with an embedding model.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataQuery;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->queryData(new DataQuery(
  data: 'What is the capital of France?',
  topK: 1,
  includeData: true,
));

----------------------------------------

TITLE: Inserting Data into Upstash Vector Index
DESCRIPTION: Demonstrates how to insert vector data with metadata into an Upstash Vector index using different programming languages. The example shows inserting a 2-dimensional vector with an ID and metadata.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(url="UPSTASH_VECTOR_REST_URL", token="UPSTASH_VECTOR_REST_TOKEN")

index.upsert(
  vectors=[
    ("1", [0.6, 0.8], {"field": "value"}),
  ]
)

LANGUAGE: typescript
CODE:
import { Index } from "@upstash/vector";

const index = new Index({
    url: "UPSTASH_VECTOR_REST_URL",
    token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.upsert({ id: "1", vector: [0.6, 0.8], metadata: {field: "value"} })

LANGUAGE: go
CODE:
import "github.com/upstash/vector-go"

func main() {
  index := vector.NewIndex("UPSTASH_VECTOR_REST_URL", "UPSTASH_VECTOR_REST_TOKEN")

  index.Upsert(vector.Upsert{
	  Id:       "1",
	  Vector:   []float32{0.6, 0.8},
	  Metadata: map[string]any{"field": "value"},
  })
}

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN', 
);

$index->upsert(new VectorUpsert(
  id: '1',
  vector: [0.6, 0.8],
  metadata: ['field' => 'value'],
));

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"id": "1", "vector": [0.6, 0.8], "metadata": {"field": "value"}}'

----------------------------------------

TITLE: Querying Dense Vector Index in PHP
DESCRIPTION: Demonstrates how to query dense vectors using the Upstash Vector PHP SDK. Includes options for including metadata, vectors, and data in results, with support for filtering.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->query(new VectorQuery(
  vector: [0.1, 0.2, ...],
  topK: 15,
  includeMetadata: true,
  includeVectors: true,
  includeData: true,
  filter: ''
));

----------------------------------------

TITLE: Metadata Filtering in Vector Queries
DESCRIPTION: Demonstrates how to filter vector query results based on metadata values using SQL-like filter expressions.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->query(new VectorQuery(
  vector: [0.1, 0.2, ...],
  topK: 15,
  filter: "country = 'PT' AND continent = 'EU'"
));

----------------------------------------

TITLE: Upserting Vectors Using Vector Object in Python
DESCRIPTION: Demonstrates how to upsert vectors using the Vector class object. Creates 100 vectors with random values, each containing an ID, vector array, metadata, and unstructured data.

LANGUAGE: python
CODE:
import random

from upstash_vector import Index, Vector

index = Index.from_env()

dimension = 128  # Adjust based on your index's dimension
upsert_amount = 100

vectors = [
    Vector(
        id=f"generated-id-{i}",
        vector=[random.random() for _ in range(dimension)],
        metadata={"some_field": f"some_value-{i}"},
        data=f"some-unstructured-data-{i}",
    )
    for i in range(upsert_amount)
]

index.upsert(vectors=vectors)

----------------------------------------

TITLE: Basic Range Query in TypeScript for Upstash Vector
DESCRIPTION: Demonstrates a basic range query to retrieve vectors with metadata from a specific namespace. It sets a cursor, limit, and includes metadata in the response.

LANGUAGE: typescript
CODE:
const responseRange = await index.range(
  {
    cursor: 0,
    limit: 2,
    includeMetadata: true,
  },
  { namespace: "my-namespace" }
);

/*
{
  nextCursor: '2',
  vectors: [
    { 
      id: '0',
      metadata: {
        keyword: "Vector"
      } 
    },
    { 
      id: '19',
      metadata: {
        keyword: "Redis"
      } 
    }
  ]
}
*/

----------------------------------------

TITLE: Performing Vector-Based Similarity Search
DESCRIPTION: Implementation of similarity search using pre-computed vector embeddings.

LANGUAGE: python
CODE:
# Querying Vectors using a vector directly
result_vector_query = vector_store.similarity_search_by_vector(
    embedding=query_embedding,
    k=5
)

print("Results for vector-based similarity search:")
for res in result_vector_query:
    print(res.page_content)

----------------------------------------

TITLE: Executing Range Query in Python with Upstash Vector Index
DESCRIPTION: This snippet demonstrates how to execute a range query using the Upstash Vector index in Python. It shows how to initialize the index, set query parameters, and process the results.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index.from_env()

# Execute the range query
range_result = index.range(
    cursor="",
    limit=10,
    include_vectors=False,
    include_metadata=True,
    include_data=True,
)

# Print the range result
print("Next Cursor:", range_result.next_cursor)

for vector_info in range_result.vectors:
    print("ID:", vector_info.id)
    print("Vector:", vector_info.vector)
    print("Metadata:", vector_info.metadata)
    print("Data:", vector_info.data)

----------------------------------------

TITLE: Range Query with ID Prefix in TypeScript for Upstash Vector
DESCRIPTION: Shows how to use the range method with an ID prefix to retrieve vectors whose IDs start with a specific string. It sets a cursor, limit, and prefix parameter.

LANGUAGE: typescript
CODE:
const responseRange = await index.range({
  cursor: 0,
  limit: 2,
  prefix: "test-",
});

/*
{
  nextCursor: '2',
  vectors: [
    { id: 'test-1' },
    { id: 'test-2' },
  ]
}
*/

----------------------------------------

TITLE: Querying with Text Data in PHP
DESCRIPTION: Example of how to query an Upstash Vector hybrid index using text data with hosted embedding models in PHP.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataQuery;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->queryData(new DataQuery(
  data: 'Upstash Vector',
  topK: 5,
  includeMetadata: true,
));

----------------------------------------

TITLE: Upserting Dense and Sparse Vectors in Python
DESCRIPTION: Example of how to upsert dense and sparse vectors into an Upstash Vector index using Python.

LANGUAGE: python
CODE:
from upstash_vector import Index, Vector
from upstash_vector.types import SparseVector

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.upsert(
    vectors=[
        Vector(id="id-0", vector=[0.1, 0.5], sparse_vector=SparseVector([1, 2], [0.1, 0.2])),
        Vector(id="id-1", vector=[0.3, 0.7], sparse_vector=SparseVector([123, 44232], [0.5, 0.4])),
    ]
)

----------------------------------------

TITLE: Using Namespaces in Upstash Vector
DESCRIPTION: This snippet demonstrates how to create and use a namespace in Upstash Vector. It shows upsert and query operations within a specific namespace.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.upsert(
    [("id-0", [0.9215, 0.3897])],
    namespace="ns",
)

index.query(
    [0.9215, 0.3897],
    top_k=5,
    namespace="ns",
)

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

const namespace = index.namespace("ns")

await namespace.upsert({
  id: "id-0",
  vector: [0.9215, 0.3897],
})

await namespace.query({
  vector: [0.9215, 0.3897],
  topK: 5,
})

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex("UPSTASH_VECTOR_REST_URL", "UPSTASH_VECTOR_REST_TOKEN")

	namespace := index.Namespace("ns")

	namespace.Upsert(vector.Upsert{
		Id:     "id-0",
		Vector: []float32{0.9215, 0.3897},
	})

	namespace.Query(vector.Query{
		Vector: []float32{0.9215, 0.3897},
		TopK:   5,
	})
}

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;
use Upstash\Vector\VectorQuery;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$namespace = $index->namespace('ns');

$namespace->upsert(new VectorUpsert(
  id: 'id-0',
  vector: [0.9215, 0.3897],
));

$namespace->query(new VectorQuery(
  vector: [0.9215, 0.3897],
  topK: 5,
));

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert/ns \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"id":"id-0", "vector":[0.9215,0.3897]}'

curl $UPSTASH_VECTOR_REST_URL/query/ns \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"vector":[0.9215,0.3897], "topK" : 5}'

----------------------------------------

TITLE: Upserting Single Vector to Specific Namespace using cURL
DESCRIPTION: Example demonstrating how to upsert a single vector with metadata to a specific namespace using cURL.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert/ns \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "id": "id-2", "vector": [0.1, 0.2], "metadata": { "link": "upstash.com" } }'

----------------------------------------

TITLE: Upserting Multiple Data Entries in Upstash Vector (TypeScript)
DESCRIPTION: This example demonstrates how to upsert multiple data entries at once, which will be converted to vectors using Upstash Embedding.

LANGUAGE: typescript
CODE:
await index.upsert([
  {
    id: "6789",
    data: "'Harry Potter' follows the journey of a young wizard, Harry Potter, as he attends Hogwarts School of Witchcraft and Wizardry, forms deep friendships, and confronts the dark wizard Voldemort, who seeks immortality and domination over the magical world.",
  },
  {
    id: "1234",
    data: "'The Lord of the Rings' follows Frodo Baggins and his allies on a quest to destroy a powerful ring and save Middle-earth from the dark lord Sauron.",
    metadata: {
      title: "Lord of The Rings",
      genre: "drama",
      category: "classic",
    },
  },
]);

----------------------------------------

TITLE: Managing Vector Data Content
DESCRIPTION: Shows how to store and retrieve unstructured data alongside vectors, including automatic handling of raw text data and querying based on data content.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.upsert(
    [
        {
            "id": "id-2",
            "data": "Upstash is a serverless data platform.",
        },
    ],
)

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.upsert([
  {
    id: "id-2",
    data: "Upstash is a serverless data platform.",
  }
])

----------------------------------------

TITLE: Successful Response for Namespace Deletion in JSON
DESCRIPTION: This JSON snippet shows the successful response format when a namespace is deleted. It includes a 'result' field with the value 'Success'.

LANGUAGE: json
CODE:
{
    "result": "Success"
}

----------------------------------------

TITLE: Upserting Hybrid Vectors in PHP with Upstash Vector
DESCRIPTION: This snippet demonstrates how to upsert hybrid vectors (combining dense and sparse vectors) into an Upstash Vector index using the PHP SDK. It shows both simple and namespace-based approaches.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;
use Upstash\Vector\SparseVector;

use function Upstash\Vector\createRandomVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->upsert(new VectorUpsert(
  id: '1',
  vector: createRandomVector(dimensions: 1536),
  sparseVector: new SparseVector(
    indices: [0, 1],
    values: [1.0, 2.0],
  ),
));

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;
use Upstash\Vector\SparseVector;

use function Upstash\Vector\createRandomVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->upsert(new VectorUpsert(
  id: '1',
  vector: createRandomVector(dimensions: 1536),
  sparseVector: new SparseVector(
    indices: [0, 1],
    values: [1.0, 2.0],
  ),
));

----------------------------------------

TITLE: Upserting Single Data Entry in Upstash Vector (TypeScript)
DESCRIPTION: This snippet shows how to upsert a single data entry, which will be converted to a vector using Upstash Embedding, along with metadata.

LANGUAGE: typescript
CODE:
await index.upsert({
  id: "1234",
  data: "'The Lord of the Rings' follows Frodo Baggins and his allies on a quest to destroy a powerful ring and save Middle-earth from the dark lord Sauron.",
  metadata: {
    title: "Lord of The Rings",
    genre: "drama",
    category: "classic",
  },
});

----------------------------------------

TITLE: Fetching Vectors by ID Prefix with Namespace in PHP using Upstash Vector
DESCRIPTION: This snippet shows how to fetch vectors from an Upstash Vector database using an ID prefix within a specified namespace. It combines the namespace() method with fetch(), using a VectorFetchByPrefix object to retrieve all vectors in the namespace whose IDs match the given prefix.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorFetchByPrefix;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->namespace('my-namespace')->fetch(new VectorFetchByPrefix(
  prefix: 'users:',
  includeMetadata: true, // (optional) if true the fetch results will contain metadata.
  includeVectors: true, // (optional) if true the fetch results will contain the indexed vectors.
  includeData: true, // (optional) if true the fetch results will contain the string data.
));

----------------------------------------

TITLE: Performing Resumable Query with Metadata Type in TypeScript
DESCRIPTION: This snippet illustrates using the resumableQuery method with a custom metadata type. It shows how to define the metadata type, use it in the query, and access the typed metadata in the results.

LANGUAGE: typescript
CODE:
type Metadata = {
  title: string,
  genre: 'sci-fi' | 'fantasy' | 'horror' | 'action'
}

const { result, fetchNext, stop } = await index.resumableQuery<Metadata>({
  vector: [
    ... // query embedding
  ],
  includeMetadata: true,
  topK: 1,
  filter: "genre = 'fantasy' and title = 'Lord of the Rings'",
  maxIdle: 3600,
})

if (result[0].metadata) {
  // Since we passed the Metadata type parameter above,
  // we can interact with metadata fields without having to
  // do any typecasting.
  const { title, genre } = result[0].metadata;
  console.log(`The best match in fantasy was ${title}`)
}

await stop();

----------------------------------------

TITLE: Fetching Multiple Vectors with Python using upstash-vector
DESCRIPTION: Example demonstrating how to fetch multiple vectors by their IDs with included vectors, metadata, and data. Shows initialization of the index and processing of fetch results.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index.from_env()

# Specify the identifiers of vectors to be fetched
ids_to_fetch = ["id-1", "id-2", "id-3"]

# Fetch the specified vectors with vectors and metadata included
fetch_result = index.fetch(
    ids=ids_to_fetch,
    include_vectors=True,
    include_metadata=True,
    include_data=True,
)

# Display the fetched vectors
for vector_info in fetch_result:
    print("ID:", vector_info.id)
    print("Vector:", vector_info.vector)
    print("Metadata:", vector_info.metadata)
    print("Data:", vector_info.data)

----------------------------------------

TITLE: Specifying Namespace for Upstash Vector Store
DESCRIPTION: This Python code snippet demonstrates how to create an UpstashVectorStore instance with a specified namespace. This is useful for organizing and segregating data within the vector store.

LANGUAGE: python
CODE:
vector_store = UpstashVectorStore(
    url="your_upstash_url",
    token="your_upstash_token",
    namespace="your_namespace"
)

----------------------------------------

TITLE: Retrieving Vector Index Information in TypeScript
DESCRIPTION: Demonstrates how to retrieve statistical information about a vector index including vector counts, size, dimensions, and namespace details. The response includes both ready and pending vector counts, index size in bytes, vector dimensions, similarity function, and namespace-specific statistics.

LANGUAGE: typescript
CODE:
const infoResponse = await index.info();
/*
{ 
  vectorCount: 17,
  pendingVectorCount: 0,
  indexSize: 551158,
  dimension: 1536,
  similarityFunction: "COSINE",
  namespaces: {
    "": { // default namespace
      vectorCount: 10,
      pendingVectorCount: 0,
    },
    "my-namespace": {
      vectorCount: 7,
      pendingVectorCount: 0,
    }
  }
}
*/

----------------------------------------

TITLE: Fetching All Results with a Resumable Query in Python
DESCRIPTION: Provides an example of how to fetch all results using a resumable query, demonstrating a pattern for efficiently retrieving large result sets.

LANGUAGE: python
CODE:
query = index.resumable_query(
  vector=[0.1, 0.2],
  top_k=2,
  include_metadata=True
)
results = query.start()
while True:
  next_batch = query.fetch_next(2)
  if not next_batch:
    break
  results.extend(next_batch)
query.stop()

----------------------------------------

TITLE: Deleting Vector with Namespace Specification
DESCRIPTION: Demonstrates deleting a vector from a specific namespace. When namespace is not specified, the default namespace is used.

LANGUAGE: python
CODE:
index.delete("id-4", namespace="ns")

----------------------------------------

TITLE: Initializing Upstash Vector Client with Configuration Object
DESCRIPTION: TypeScript code to initialize the Upstash Vector client using a configuration object with URL and token.

LANGUAGE: typescript
CODE:
import { Index } from "@upstash/vector";

const index = new Index({
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
});

----------------------------------------

TITLE: Fetching Vectors by Prefix in TypeScript
DESCRIPTION: Demonstrates fetching vectors using a prefix matcher to retrieve all vectors whose IDs start with the specified prefix.

LANGUAGE: typescript
CODE:
await index.fetch({ prefix: "test-" });
// [{ id: "test-1" }, { id: "test-2" }, { id: "test-3" }]

----------------------------------------

TITLE: Updating Vector with Metadata using cURL
DESCRIPTION: Example of updating a vector's metadata in the default namespace using cURL. Sets a metadata field 'link' with value 'upstash.com'.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/update \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "id": "id-1", "metadata": { "link": "upstash.com" } }'

----------------------------------------

TITLE: Upserting Single Vector in Upstash Vector (TypeScript)
DESCRIPTION: This snippet demonstrates how to upsert a single vector with an ID, vector data, and metadata into the Upstash Vector index.

LANGUAGE: typescript
CODE:
await index.upsert({
  id: "1234",
  vector: [0.1, 0.2, 0.3, 0.4, 0.5],
  metadata: {
    title: "Lord of The Rings",
    genre: "drama",
    category: "classic",
  },
});

----------------------------------------

TITLE: Deleting Vectors by ID Prefix
DESCRIPTION: Demonstrates how to delete all vectors whose IDs start with a specified prefix. This method is useful for batch deletions of related vectors.

LANGUAGE: python
CODE:
index.delete(prefix="id-")

----------------------------------------

TITLE: Record Management Operations
DESCRIPTION: Examples of updating, fetching, deleting, and managing vector records.

LANGUAGE: typescript
CODE:
await index.upsert({
  id: "18593",
  metadata: { genre: "romance" },
});

const fetchResult = await index.fetch(["id-1", "id-2"]);

// Delete multiple records
await index.delete([...]);

// Delete a single record
await index.delete("id-to-delete");

await index.stats(["id-1", "id-2", "id-3"]);

await index.reset();

----------------------------------------

TITLE: Updating Vector Metadata in PHP with Upstash Vector
DESCRIPTION: This snippet demonstrates how to update existing vector metadata in an Upstash Vector index using the PHP SDK. It shows both simple and namespace-based approaches for updating metadata.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpdate;
use Upstash\Vector\Enums\UpdateMode;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->update(new VectorUpdate(
  id: '1',
  metadata: ['foo' => 'baz'],
  metadataUpdateMode: UpdateMode::OVERWRITE,
));

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpdate;
use Upstash\Vector\Enums\UpdateMode;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->update(new VectorUpdate(
  id: '1',
  metadata: ['foo' => 'baz'],
  metadataUpdateMode: UpdateMode::OVERWRITE,
));

----------------------------------------

TITLE: Upserting Sparse Vectors in PHP with Upstash Vector
DESCRIPTION: This snippet shows how to upsert sparse vectors into an Upstash Vector index using the PHP SDK. It demonstrates both simple and namespace-based approaches for sparse vector upserting.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;
use Upstash\Vector\SparseVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->upsert(new VectorUpsert(
  id: '1',
  sparseVector: new SparseVector(
    indices: [0, 1],
    values: [1.0, 2.0],
  ),
));

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;
use Upstash\Vector\SparseVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->upsert(new VectorUpsert(
  id: '1',
  sparseVector: new SparseVector(
    indices: [0, 1],
    values: [1.0, 2.0],
  ),
));

----------------------------------------

TITLE: Vector Query with Metadata Filter in PHP
DESCRIPTION: Example of querying vectors with metadata filtering using the PHP SDK for Upstash Vector.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->query(new VectorQuery(
  vector: [0.9215, 0.3897],
  topK: 5,
  includeMetadata: true,
  filter: "population >= 1000000 AND geography.continent = 'Asia'",
));

----------------------------------------

TITLE: Upserting Vectors Using Tuples in Python
DESCRIPTION: Shows how to upsert vectors using tuple format. Each tuple contains the same information as the Vector object method but in a more compact format.

LANGUAGE: python
CODE:
import random

from upstash_vector import Index

index = Index.from_env()

dimension = 128  # Adjust based on your index's dimension
upsert_amount = 100

vectors = [
    (
        f"generated-id-{i}",
        [random.random() for _ in range(dimension)],
        {"some_field": f"some_value-{i}"},
        f"some-unstructured-data-{i}",
    )
    for i in range(upsert_amount)
]

index.upsert(vectors=vectors)

----------------------------------------

TITLE: Upserting Multiple Data Items with Embedding Model in PHP
DESCRIPTION: Demonstrates how to upsert multiple data items at once using the Upstash Vector SDK in PHP. It uses the upsertDataMany() method to efficiently insert or update multiple vectors in an index, improving performance through batching.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataUpsert;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->upsertDataMany([
  new DataUpsert(id: '1', data: 'The capital of Japan is Tokyo'),
  new DataUpsert(id: '2', data: 'The capital of France is Paris'),
  new DataUpsert(id: '3', data: 'The capital of Germany is Berlin'),
]);

----------------------------------------

TITLE: Updating Vector Metadata in Upstash Vector (TypeScript)
DESCRIPTION: This example demonstrates how to update the metadata of an existing vector in the Upstash Vector index.

LANGUAGE: typescript
CODE:
await index.upsert({
	id: "1234",
	vector: [0.1, 0.2, 0.3, 0.4, 0.5]
	metadata: {
		title: "Redis"
	}
})

await index.update({
	id: "1234",
	metadata: {
		title: "QStash"
	}
})

----------------------------------------

TITLE: Patching Metadata Using JSON Merge Patch in Upstash Vector
DESCRIPTION: Shows how to patch metadata using the JSON Merge Patch algorithm. This method allows updating existing fields, deleting fields by setting them to None, and adding new fields while preserving other existing metadata.

LANGUAGE: python
CODE:
from upstash_vector import Index
from upstash_vector.types import MetadataUpdateMode

index = Index.from_env()

updated = index.update(
    id="id2",
    metadata={
        "existing-field": "new-value",
        "existing-field-to-delete": None,
        "new-field": "new-value",
    },
    metadata_update_mode=MetadataUpdateMode.PATCH,
)

print(updated)

----------------------------------------

TITLE: Upserting Text Data with Upstash Vector
DESCRIPTION: Examples of upserting raw text data into Upstash Vector using different programming languages. Shows how to create an index and insert text with metadata.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.upsert(
    [("id-0", "Upstash is a serverless data platform.", {"field": "value"})],
)

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.upsert({
  id: "id-0",
  data: "Upstash is a serverless data platform.",
  metadata: {
    field: "value",
  },
})

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex("UPSTASH_VECTOR_REST_URL", "UPSTASH_VECTOR_REST_TOKEN")

	index.UpsertData(vector.UpsertData{
		Id:       "id-0",
		Data:     "Upstash is a serverless data platform.",
		Metadata: map[string]any{"field": "value"},
	})
}

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataUpsert;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->upsertData(new DataUpsert(
  id: 'id-0',
  data: 'Upstash is a serverless data platform.',
  metadata: [
    'field' => 'value',
  ],
));

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert-data \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"id": "1", "data": "Upstash is a serverless data platform.", "metadata": {"field": "value"}}'

----------------------------------------

TITLE: Accessing Index with Metadata Typing
DESCRIPTION: Example of using TypeScript types for metadata when accessing and querying the index.

LANGUAGE: typescript
CODE:
type Metadata = {
  title: string,
  genre: 'sci-fi' | 'fantasy' | 'horror' | 'action'
}

await index.upsert([{
  id: '1234',
  vector: [
    .... // embedding values
  ],
  metadata: {
    title: 'Lord of The Rings',
    genre: 'drama',
    category: 'classic'
  }
}])

const results = await index.query<Metadata>({
  vector: [
    ... // query embedding
  ],
  includeVectors: true,
  topK: 1,
})

if (results[0].metadata) {
  const { title, genre, category } = results[0].metadata;
  console.log(`The best match in fantasy was ${title}`)
}

----------------------------------------

TITLE: Deleting Vectors by Metadata Filter in PHP
DESCRIPTION: Demonstrates how to delete vectors based on metadata filtering criteria using VectorDeleteByMetadataFilter class.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorDeleteByMetadataFilter;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->delete(new VectorDeleteByMetadataFilter(
  filter: 'salary > 1000',
));

----------------------------------------

TITLE: Retrieving Index Statistics with Upstash Vector Info Method in Python
DESCRIPTION: This snippet demonstrates how to use the 'info' method from the Upstash Vector library to retrieve and display statistical information about a vector index. It shows initialization of the index and accessing various statistical fields returned by the method.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index.from_env()

from upstash_vector import Index

index = Index.from_env()

# Get statistical information about the index
info_result = index.info()

# Display the info result
print("Vector Count:", info_result.vector_count)
print("Pending Vector Count:", info_result.pending_vector_count)
print("Index Size:", info_result.index_size)
print("Dimension:", info_result.dimension)
print("Similarity Function:", info_result.similarity_function)

for ns, ns_info in info_result.namespaces.items():
    print("Namespace:", ns, "Vector Count:", ns_info.vector_count)
    print("Namespace:", ns, "Pending Vector Count:", ns_info.pending_vector_count)

----------------------------------------

TITLE: Querying with Text Data in PHP
DESCRIPTION: Demonstrates how to query using text data in a sparse index with an Upstash-hosted sparse embedding model using the PHP SDK.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataQuery;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->queryData(new DataQuery(
  data: 'Upstash Vector',
  topK: 5,
));

----------------------------------------

TITLE: Deleting Vectors by ID Array in Upstash Vector (TypeScript)
DESCRIPTION: Demonstrates how to delete multiple vectors by providing an array of IDs. The response includes the number of successfully deleted vectors.

LANGUAGE: typescript
CODE:
const response = await index.delete(["2", "3"]);
// { deleted: 2 }

----------------------------------------

TITLE: Vector Query with Metadata Filter in JavaScript
DESCRIPTION: Example of querying vectors with metadata filtering using the JavaScript SDK for Upstash Vector.

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.query({
  vector: [0.9215, 0.3897],
  filter: "population >= 1000000 AND geography.continent = 'Asia'",
  topK: 5,
  includeMetadata: true,
});

----------------------------------------

TITLE: Installing Required Python Libraries for Upstash Vector
DESCRIPTION: This bash command installs the necessary Python libraries: upstash-vector for interacting with Upstash Vector and python-dotenv for loading environment variables.

LANGUAGE: bash
CODE:
pip install upstash-vector python-dotenv

----------------------------------------

TITLE: Upserting Text Data in JavaScript
DESCRIPTION: Demonstrates how to upsert text data into a sparse index with an Upstash-hosted sparse embedding model using the JavaScript SDK.

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.upsert([
  {
    id: 'id-0',
    data: "Upstash Vector provides dense and sparse embedding models.",
  }
])

----------------------------------------

TITLE: Updating Vector with Namespace Specification
DESCRIPTION: Demonstrates how to update a vector within a specific namespace. When no namespace is specified, the operation uses the default namespace.

LANGUAGE: python
CODE:
index.update(..., namespace="ns")

----------------------------------------

TITLE: Range Query with ID Prefix in Python using Upstash Vector Index
DESCRIPTION: This snippet shows how to perform a range query with an ID prefix using the Upstash Vector index in Python. It retrieves all vectors with IDs that start with the specified prefix.

LANGUAGE: python
CODE:
index.range(prefix="id-")

----------------------------------------

TITLE: Inserting Data into Semantic Cache in JavaScript
DESCRIPTION: This code snippet demonstrates how to insert data into the Semantic Cache in JavaScript. It uses the insert method of the SemanticCache instance to add a new entry with specified text and metadata.

LANGUAGE: javascript
CODE:
await cache.insert({
  text: "The capital of France is Paris.",
  metadata: {
    source: "geography database",
    timestamp: Date.now(),
  },
});

----------------------------------------

TITLE: Deleting Vectors by Metadata Filter in Upstash Vector (TypeScript)
DESCRIPTION: Demonstrates how to delete vectors using a metadata filter. This method performs a full scan and may be slow for large indexes. The response includes the number of vectors that match the filter and were deleted.

LANGUAGE: typescript
CODE:
const response = await index.delete({
  filter: "age > 30",
});
// { deleted: 3 }

----------------------------------------

TITLE: Namespace-Specific Vector Querying in Python
DESCRIPTION: Demonstrates how to query vectors from a specific namespace in the Upstash Vector index.

LANGUAGE: python
CODE:
index.query(..., namespace="ns")

----------------------------------------

TITLE: Query Operations and Options
DESCRIPTION: Type definition for query options and example of querying vector values with results.

LANGUAGE: typescript
CODE:
type QueryOptions = {
  vector: number[];
  topK: number;
  includeVectors?: boolean;
  includeMetadata?: boolean;
};

> await index.query({ topK: 3, vector: [ ... ]})
{
  matches: [
    {
      id: '6345',
      score: 1.00000012,
      vector: [],
      metadata: undefined
    },
    {
      id: '1233',
      score: 1.00000012,
      vector: [],
      metadata: undefined
    },
    {
      id: '4142',
      score: 1.00000012,
      vector: [],
      metadata: undefined
    }
  ],
  namespace: ''
}

----------------------------------------

TITLE: Scanning Entire Index with Range Method in Python using Upstash Vector
DESCRIPTION: This code demonstrates how to scan the entire Upstash Vector index using the range method in Python. It uses a loop to continuously fetch results until there are no more vectors to retrieve.

LANGUAGE: python
CODE:
res = index.range(cursor="", limit=5)
print(res.vectors)

while res.next_cursor != "":
    res = index.range(cursor=res.next_cursor, limit=10)
    print(res.vectors)

----------------------------------------

TITLE: Implementing Chat UI for RAG Chatbot
DESCRIPTION: TypeScript React component for the chat UI, using the Vercel AI SDK's useChat hook to handle message state and streaming.

LANGUAGE: typescript
CODE:
'use client'

import { useChat } from 'ai/react'

export default function Home() {
  // This hook handles message state + streaming from /api/chat
  const { messages, input, handleInputChange, handleSubmit } = useChat({
    // You can enable multi-step calls if you want the model to call multiple tools in one session
    maxSteps: 3,
  })

  return (
    <div className="mx-auto max-w-md py-6">
      <h1 className="text-xl font-bold mb-4">RAG Chatbot with Upstash Vector</h1>
      
      {/* Render messages */}
      <div className="space-y-2 mb-8">
        {messages.map(m => (
          <div key={m.id} className="border p-2 rounded">
            <strong>{m.role}:</strong> 
            <div>
              {/* If the model calls a tool, show which tool it called */}
              {m.content.length > 0 ? (
                m.content
              ) : (
                <i>calling tool: {m?.toolInvocations?.[0]?.toolName}</i>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* Text input */}
      <form onSubmit={handleSubmit} className="flex gap-2">
        <input
          className="flex-1 border rounded px-2 py-1"
          placeholder="Say something..."
          value={input}
          onChange={handleInputChange}
        />
        <button className="px-4 py-1 bg-black text-white rounded" type="submit">
          Send
        </button>
      </form>
    </div>
  )
}

----------------------------------------

TITLE: Querying Vector Database with cURL - Namespace Example
DESCRIPTION: cURL request demonstrating how to query vectors within a specific namespace.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/query-data/ns \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "data": "What is Upstash?", "topK": 2, "includeMetadata": true }'

----------------------------------------

TITLE: Fetching Vectors by Prefix in Python
DESCRIPTION: Example demonstrating how to fetch all vectors whose IDs start with a specific prefix. Note: For large datasets, the range command is recommended to prevent timeouts.

LANGUAGE: python
CODE:
index.fetch(prefix="id-")

----------------------------------------

TITLE: Defining Index-level Metadata Types in TypeScript
DESCRIPTION: TypeScript code demonstrating how to define metadata types at the index level for type-safety in Upstash Vector operations.

LANGUAGE: typescript
CODE:
import { Index } from "@upstash/vector";

type Metadata = { genre: string, year: number };

const index = new Index<Metadata>();

----------------------------------------

TITLE: Sample JSON Response for Vector Query in Upstash
DESCRIPTION: This snippet shows a sample JSON response for a successful vector query. It includes the query results with vector IDs, similarity scores, and optional metadata.

LANGUAGE: json
CODE:
{
    "result": [
        {
            "id": "id-0",
            "score": 1.0,
            "metadata": {
                "link": "upstash.com"
            }
        },
        {
            "id": "id-1",
            "score": 0.99996454
        }
    ]
}

----------------------------------------

TITLE: Upserting Multiple Vectors in PHP with Upstash Vector
DESCRIPTION: This snippet shows how to upsert multiple vectors at once into an Upstash Vector index using the PHP SDK. It demonstrates both simple and namespace-based approaches for batch upserting.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;

use function Upstash\Vector\createRandomVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->upsertMany([
  new VectorUpsert(
    id: '1',
    vector: createRandomVector(dimensions: 1536)
  ),
  new VectorUpsert(
    id: '2',
    vector: createRandomVector(dimensions: 1536)
  ),
]);

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;

use function Upstash\Vector\createRandomVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->upsertMany([
  new VectorUpsert(
    id: '1',
    vector: createRandomVector(dimensions: 1536)
  ),
  new VectorUpsert(
    id: '2',
    vector: createRandomVector(dimensions: 1536)
  ),
]);

----------------------------------------

TITLE: Setting Environment Variables for RAG Chatbot
DESCRIPTION: Environment variables required for OpenAI API and Upstash Vector integration.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=your_openai_api_key
UPSTASH_VECTOR_REST_URL=your_upstash_url
UPSTASH_VECTOR_REST_TOKEN=your_upstash_token

----------------------------------------

TITLE: Executing Resumable Vector Query with Namespace using cURL
DESCRIPTION: This snippet shows how to execute a resumable vector query with a specified namespace using cURL. It includes the API endpoint with namespace, authorization header, and request body with query parameters.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/resumable-query/ns \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{
    "vector": [0.1, 0.2],
    "topK": 2,
    "includeMetadata": true,
    "maxIdle": 3600
  }'

----------------------------------------

TITLE: Configuring Upstash Vector Connections in Laravel
DESCRIPTION: This PHP configuration file shows how to set up multiple Upstash Vector connections in a Laravel application.

LANGUAGE: php
CODE:
return [
    'default' => env('UPSTASH_VECTOR_CONNECTION', 'default'),

    'connections' => [
        'default' => [
            'url' => env('UPSTASH_VECTOR_REST_URL'),
            'token' => env('UPSTASH_VECTOR_REST_TOKEN'),
        ],
        'another' => [
            'url' => env('SECOND_UPSTASH_VECTOR_REST_URL'),
            'token' => env('SECOND_UPSTASH_VECTOR_REST_TOKEN'),
        ],
    ],
];

----------------------------------------

TITLE: Setting Environment Variables for Upstash Vector
DESCRIPTION: Configuration of environment variables for Upstash Vector authentication

LANGUAGE: plaintext
CODE:
UPSTASH_VECTOR_REST_URL=your_upstash_url
UPSTASH_VECTOR_REST_TOKEN=your_upstash_token

----------------------------------------

TITLE: Performing Resumable Query with Text Data in Upstash Vector using cURL
DESCRIPTION: This cURL command demonstrates how to make a POST request to the Upstash Vector resumable query endpoint. It includes authentication, query text, and parameters for controlling the response content and query behavior.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/resumable-query-data \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{
    "data": "Hello world",
    "topK": 2,
    "includeMetadata": true,
    "maxIdle": 3600
  }'

----------------------------------------

TITLE: Upserting Multiple Vectors in Upstash Vector (TypeScript)
DESCRIPTION: This example shows how to upsert multiple vectors at once, with varying levels of detail in the vector objects.

LANGUAGE: typescript
CODE:
await index.upsert([
  {
    id: "6789",
    vector: [0.6, 0.7, 0.8, 0.9, 0.9],
  },
  {
    id: "1234",
    vector: [0.1, 0.2, 0.3, 0.4, 0.5],
    metadata: {
      title: "Lord of The Rings",
      genre: "drama",
      category: "classic",
    },
  },
]);

----------------------------------------

TITLE: Deleting a Namespace in Upstash Vector
DESCRIPTION: This snippet shows how to delete a namespace in Upstash Vector using different programming languages.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.delete_namespace("ns")

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.deleteNamespace("ns")

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex("UPSTASH_VECTOR_REST_URL", "UPSTASH_VECTOR_REST_TOKEN")

	namespace := index.Namespace("ns")

	namespace.DeleteNamespace()
}

LANGUAGE: php
CODE:
use Upstash\Vector\Index;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->namespace('ns')->deleteNamespace();

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/delete-namespace/ns \
  -X DELETE \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Querying List Namespaces API with cURL
DESCRIPTION: This snippet demonstrates how to use cURL to make a GET request to the List Namespaces API endpoint. It includes the necessary authorization header.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/list-namespaces \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Upserting a Single Vector in PHP with Upstash Vector
DESCRIPTION: This snippet demonstrates how to upsert a single vector into an Upstash Vector index using the PHP SDK. It shows both simple and namespace-based approaches.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;

use function Upstash\Vector\createRandomVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->upsert(new VectorUpsert(
  id: '1',
  vector: createRandomVector(dimensions: 1536)
));

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorUpsert;

use function Upstash\Vector\createRandomVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->upsert(new VectorUpsert(
  id: '1',
  vector: createRandomVector(dimensions: 1536)
));

----------------------------------------

TITLE: Range Query with Namespace in Python using Upstash Vector Index
DESCRIPTION: This snippet shows how to execute a range query on a specific namespace using the Upstash Vector index in Python. When no namespace is provided, the default namespace is used.

LANGUAGE: python
CODE:
index.range(..., namespace="ns")

----------------------------------------

TITLE: Fetch Vectors API Response Example
DESCRIPTION: Example JSON response showing the structure of returned vector data including IDs and metadata.

LANGUAGE: json
CODE:
{
    "result": [
        {
            "id": "id-0",
            "metadata": {
                "link": "upstash.com"
            }
        },
        {
            "id": "id-1"
        }
    ]
}

----------------------------------------

TITLE: Fetching Vectors by ID Prefix in PHP using Upstash Vector
DESCRIPTION: This snippet demonstrates how to fetch vectors from an Upstash Vector database using an ID prefix. It uses the fetch() method of the Index class with a VectorFetchByPrefix object, allowing retrieval of all vectors whose IDs match a specified prefix.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorFetchByPrefix;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->fetch(new VectorFetchByPrefix(
  prefix: 'users:',
  includeMetadata: true, // (optional) if true the fetch results will contain metadata.
  includeVectors: true, // (optional) if true the fetch results will contain the indexed vectors.
  includeData: true, // (optional) if true the fetch results will contain the string data.
));

----------------------------------------

TITLE: Initializing Hugging Face Embeddings and Upstash Vector Store
DESCRIPTION: Setup code for loading environment variables and initializing the embedding model and vector store.

LANGUAGE: python
CODE:
# Load environment variables for API keys and Upstash configuration
from dotenv import load_dotenv
import os
load_dotenv()

# Import required libraries
from langchain_huggingface.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores.upstash import UpstashVectorStore

# Initialize Hugging Face embeddings model
embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-mpnet-base-v2")

# Set up Upstash Vector Store (automatically uses the environment variables)
vector_store = UpstashVectorStore(embedding=embeddings)

----------------------------------------

TITLE: Accessing Specific Upstash Vector Connection in Laravel
DESCRIPTION: This code demonstrates how to access a specific Upstash Vector connection using the Vector facade in a Laravel application.

LANGUAGE: php
CODE:
use Upstash\Vector\Laravel\Facades\Vector;

Vector::connection('another')->getInfo();

----------------------------------------

TITLE: Querying Vectors using cURL in Upstash Vector
DESCRIPTION: This snippet demonstrates how to query vectors using cURL. It includes examples for querying the default namespace, a specific namespace, and performing a batch query.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/query \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "vector": [0.1, 0.2], "topK": 2, "includeMetadata": true }'

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/query/ns \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "vector": [0.1, 0.2], "topK": 2, "includeMetadata": true }'

LANGUAGE: sh
CODE:
curl "$UPSTASH_VECTOR_REST_URL/query" \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '[
        {
          "vector": [0.1, 0.2],
          "topK": 2,
          "includeMetadata": true
        },
        {
          "vector": [0.2, 0.3],
          "topK": 3
        }
      ]'

----------------------------------------

TITLE: Configuring Environment Variables for Upstash Vector in Python
DESCRIPTION: This snippet shows how to set up environment variables for Upstash Vector. It includes the URL and token required for authentication.

LANGUAGE: plaintext
CODE:
UPSTASH_VECTOR_REST_URL=your_upstash_url
UPSTASH_VECTOR_REST_TOKEN=your_upstash_token

----------------------------------------

TITLE: Publishing Upstash Vector Configuration in Laravel
DESCRIPTION: This command publishes the Upstash Vector configuration file in a Laravel application.

LANGUAGE: shell
CODE:
php artisan vendor:publish --tag="vector-config"

----------------------------------------

TITLE: Fetching Vectors from Specific Namespace Using curl
DESCRIPTION: Example of fetching vectors from a specific namespace 'ns' using curl, requesting multiple vector IDs with metadata.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/fetch/ns \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "ids": ["id-0", "id-1"], "includeMetadata": true }'

----------------------------------------

TITLE: Resetting Specific Namespace in Upstash Vector Index using PHP
DESCRIPTION: This code shows how to reset a specific namespace in an Upstash Vector index using the PHP SDK. It creates an Index object, specifies a namespace using the namespace() method, and then calls reset().

LANGUAGE: php
CODE:
use Upstash\Vector\Index;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->reset();

----------------------------------------

TITLE: Using Vector Facade in Laravel
DESCRIPTION: This code demonstrates how to use the Vector facade to interact with the Upstash Vector index in a Laravel application.

LANGUAGE: php
CODE:
use Upstash\Vector\Laravel\Facades\Vector;

Vector::getInfo(); // Fetches the index info.

----------------------------------------

TITLE: Upserting Sparse Vectors in Python
DESCRIPTION: Shows how to upsert sparse vectors into Upstash Vector indexes using the Python SDK. It demonstrates creating an Index object and upserting multiple vectors.

LANGUAGE: python
CODE:
from upstash_vector import Index, Vector
from upstash_vector.types import SparseVector

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.upsert(
    vectors=[
        Vector(id="id-0", sparse_vector=SparseVector([1, 2], [0.1, 0.2])),
        Vector(id="id-1", sparse_vector=SparseVector([123, 44232], [0.5, 0.4])),
    ]
)

----------------------------------------

TITLE: Resetting Default Namespace in Upstash Vector Index using PHP
DESCRIPTION: This snippet demonstrates how to reset the default namespace of an Upstash Vector index using the PHP SDK. It initializes an Index object with the Upstash Vector REST URL and token, then calls the reset() method.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->reset();

----------------------------------------

TITLE: Setting Upstash Vector Environment Variables
DESCRIPTION: This snippet demonstrates how to set the required environment variables for the Upstash Vector client. It includes the REST URL and REST token, which can be obtained from the Upstash console dashboard.

LANGUAGE: bash
CODE:
UPSTASH_VECTOR_REST_URL="your_rest_url"
UPSTASH_VECTOR_REST_TOKEN="your_rest_token"

----------------------------------------

TITLE: Fetching Vectors Using curl
DESCRIPTION: Example of fetching vectors from the default namespace using curl, including metadata in the response.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/fetch \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "ids": ["id-0"], "includeMetadata": true }'

----------------------------------------

TITLE: Querying Range Vectors API with cURL
DESCRIPTION: This snippet demonstrates how to make a GET request to the Range Vectors API endpoint using cURL. It includes the necessary authorization header and request parameters for pagination and metadata inclusion.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/range \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "cursor": "0", "limit": 2, "includeMetadata": true }'

----------------------------------------

TITLE: Defining Command-level Metadata Types in TypeScript
DESCRIPTION: TypeScript code showing how to define metadata types for specific commands in Upstash Vector operations.

LANGUAGE: typescript
CODE:
import { Index } from "@upstash/vector";

type Metadata = { genre: string, year: number };

const index = new Index();

index.upsert<Metadata>({ id: 1, vector: [...], metadata: { 
  genre: "comedy",
  year: 1990
}});

----------------------------------------

TITLE: Upserting Multiple Vectors using cURL
DESCRIPTION: Example showing how to upsert multiple vectors with metadata using cURL to the default namespace.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '[ 
    { "id": "id-0", "vector": [0.1, 0.2], "metadata": { "link": "upstash.com" } }, 
    { "id": "id-1", "vector": [0.2, 0.3] }
  ]'

----------------------------------------

TITLE: Error Response for Upserting Data without Embedding Model in Upstash Vector
DESCRIPTION: This JSON snippet demonstrates the error response when attempting to upsert data into an Upstash Vector index that wasn't created with an embedding model. It includes an error message and status code.

LANGUAGE: json
CODE:
{
    "error": "Embedding data for this index is not allowed. The index must be created with an embedding model to use it.",
    "status": 422
}

----------------------------------------

TITLE: Initializing Client with Environment Variables
DESCRIPTION: Creating a new Index instance using environment variables for configuration.

LANGUAGE: typescript
CODE:
import { Index } from "@upstash/vector";

const index = new Index();

----------------------------------------

TITLE: Fetching Vector with Namespace in Python
DESCRIPTION: Example showing how to fetch a vector using a specific namespace instead of the default one.

LANGUAGE: python
CODE:
index.fetch("id-4", namespace="ns")

----------------------------------------

TITLE: Querying Sparse Vector Index in PHP
DESCRIPTION: Shows how to query sparse vectors using SparseVector class with indices and values. This method is specific to sparse indexes and cannot be used with regular vectors.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorQuery;
use Upstash\Vector\SparseVector;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$results = $index->query(new VectorQuery(
  sparseVector: new SparseVector(
    indices: [1, 2, 3],
    values: [5.0, 6.0, 7.0],
  ),
  topK: 15,
));

----------------------------------------

TITLE: Installing Required Python Packages
DESCRIPTION: Installation of necessary Python packages using pip

LANGUAGE: bash
CODE:
pip install upstash-vector python-dotenv langchain langchain-community

----------------------------------------

TITLE: Querying Sparse Vectors in Go
DESCRIPTION: Shows how to query sparse vectors using the Go SDK. It demonstrates creating an Index object and performing a query with specific parameters.

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex(
		"UPSTASH_VECTOR_REST_URL",
		"UPSTASH_VECTOR_REST_TOKEN",
	)

	scores, err := index.Query(vector.Query{
		SparseVector: &vector.SparseVector{
			Indices: []int32{3, 5},
			Values:  []float32{0.3, 05},
		},
		TopK:            5,
		IncludeMetadata: true,
	})
}

----------------------------------------

TITLE: Querying Semantic Cache in JavaScript
DESCRIPTION: This code snippet shows how to query the Semantic Cache in JavaScript. It uses the query method of the SemanticCache instance to find similar entries based on a given text and specified options.

LANGUAGE: javascript
CODE:
const result = await cache.query({
  text: "What is the capital of France?",
  topK: 5,
  scoreThreshold: 0.8,
});

----------------------------------------

TITLE: Installing Required Python Dependencies
DESCRIPTION: Installation of necessary Python packages using pip for LlamaIndex and Upstash Vector integration

LANGUAGE: bash
CODE:
pip install llama-index upstash-vector llama-index-vector-stores-upstash python-dotenv

----------------------------------------

TITLE: Deleting Vectors in a Specific Namespace with cURL in Upstash Vector API
DESCRIPTION: This snippet shows how to delete vectors in a specific namespace using a cURL command. It sends a DELETE request to the Upstash Vector API endpoint, specifying the namespace in the URL path, along with an authorization token and a JSON payload containing the vector IDs to be deleted.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/delete/ns \
  -X DELETE \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "ids": [ "id-0", "id-1" ] }'

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Commands to install the necessary Python packages for LlamaParse and Upstash Vector integration.

LANGUAGE: bash
CODE:
pip install llama-index upstash-vector llama-index-vector-stores-upstash python-dotenv

----------------------------------------

TITLE: Setting Environment Variables for Upstash Vector and OpenAI
DESCRIPTION: Environment variable configuration for Upstash Vector REST URL, token, and OpenAI API key

LANGUAGE: plaintext
CODE:
UPSTASH_VECTOR_REST_URL=your_upstash_url
UPSTASH_VECTOR_REST_TOKEN=your_upstash_token
OPENAI_API_KEY=your_openai_api_key

----------------------------------------

TITLE: Deleting Vectors by Metadata Filter
DESCRIPTION: Shows how to delete vectors based on metadata filtering criteria. This example deletes all vectors where the age metadata field is greater than 30.

LANGUAGE: python
CODE:
index.delete(filter="age > 30")

----------------------------------------

TITLE: Range Query with Improved Types in TypeScript for Upstash Vector
DESCRIPTION: Demonstrates how to use TypeScript generics to improve type safety when working with metadata in range queries. It defines a custom Metadata type and uses it in the range method call.

LANGUAGE: typescript
CODE:
type Metadata = {
  title: string;
  genre: "sci-fi" | "fantasy" | "horror" | "action";
};

const responseRange = await index.range<Metadata>({
  cursor: 0,
  limit: 2,
  includeMetadata: true,
});

if (responseRange[0].metadata) {
  // Since we passed the Metadata type parameter above,
  // we can interact with metadata fields without having to
  // do any typecasting.
  const { title, genre } = results[0].metadata;
  console.log(`The best match in fantasy was ${title}`);
}

----------------------------------------

TITLE: Range Query with Improved Types in TypeScript for Upstash Vector
DESCRIPTION: Demonstrates how to use TypeScript generics to improve type safety when working with metadata in range queries. It defines a custom Metadata type and uses it in the range method call.

LANGUAGE: typescript
CODE:
type Metadata = {
  title: string;
  genre: "sci-fi" | "fantasy" | "horror" | "action";
};

const responseRange = await index.range<Metadata>({
  cursor: 0,
  limit: 2,
  includeMetadata: true,
});

if (responseRange[0].metadata) {
  // Since we passed the Metadata type parameter above,
  // we can interact with metadata fields without having to
  // do any typecasting.
  const { title, genre } = results[0].metadata;
  console.log(`The best match in fantasy was ${title}`);
}

----------------------------------------

TITLE: Environment Configuration Setup
DESCRIPTION: Environment variable configuration for Upstash Vector credentials.

LANGUAGE: text
CODE:
UPSTASH_VECTOR_REST_URL=your_upstash_url
UPSTASH_VECTOR_REST_TOKEN=your_upstash_token

----------------------------------------

TITLE: Deleting Single Vector by ID in Python
DESCRIPTION: Shows how to delete a single vector using its ID. A simpler alternative to the multiple deletion method.

LANGUAGE: python
CODE:
index.delete("id-4")

----------------------------------------

TITLE: Resetting Default Namespace in Upstash Vector (Python)
DESCRIPTION: This snippet demonstrates how to reset the default namespace in Upstash Vector using Python. It initializes an Index object from environment variables and calls the reset method without parameters.

LANGUAGE: python
CODE:
from upstash_vector import Index
index = Index.from_env()

index.reset()

----------------------------------------

TITLE: Installing Dependencies for RAG Application
DESCRIPTION: Commands to install required Python packages including Gradio, LangChain, sentence transformers, and Upstash Vector client.

LANGUAGE: bash
CODE:
pip install gradio langchain sentence_transformers upstash-vector python-dotenv transformers langchain-community langchain-huggingface

----------------------------------------

TITLE: Deleting Multiple Vectors by IDs in Python
DESCRIPTION: Demonstrates how to delete multiple vectors from an index using a list of vector IDs. Returns the count of deleted vectors.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index.from_env()

# Specify the identifiers of vectors to be deleted
ids_to_delete = ["id1", "id2", "id3"]

# Delete the specified vectors
delete_result = index.delete(ids=ids_to_delete)

# Display the number of vectors deleted
print("Number of Vectors Deleted:", delete_result.deleted)

----------------------------------------

TITLE: Retrieving Namespace Information in PHP
DESCRIPTION: Demonstrates how to fetch information about specific namespaces using both the getNamespaceInfo() method and through the index info object. Returns an instance of Upstash\Vector\NamespaceInfo.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

// Fetch the information of the default namespace.
$defaultNamespaceInfo = $index->getNamespaceInfo();

// Fetch the information on a specific namespace.
$myNamespaceInfo = $index->namespace('my-namespace')->getNamespaceInfo();

----------------------------------------

TITLE: Running the Upstash Vector Semantic Search Python Script
DESCRIPTION: This bash command executes the Python script that implements semantic search using Upstash Vector.

LANGUAGE: bash
CODE:
python main.py

----------------------------------------

TITLE: Example JSON Response for Random Vector Fetch in JSON
DESCRIPTION: This snippet illustrates the expected JSON response structure when successfully fetching a random vector. It includes the vector's ID and its dense vector representation.

LANGUAGE: json
CODE:
{
    "result": {
        "id": "id-0",
        "vector": [0.1, 0.2]
    }
}

----------------------------------------

TITLE: Fetching Single Vector with Python
DESCRIPTION: Simple example showing how to fetch a single vector by its ID.

LANGUAGE: python
CODE:
index.fetch("id-4")

----------------------------------------

TITLE: Updating Vector with Namespace using cURL
DESCRIPTION: Example of updating a vector in a specific namespace 'ns' using cURL. Updates the vector value to [0.1, 0.2].

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/update/ns \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "id": "id-2", "vector": [0.1, 0.2] }'

----------------------------------------

TITLE: Fetching Random Vector from Specific Namespace with cURL in Shell
DESCRIPTION: This snippet shows how to fetch a random vector from a specific namespace ('ns') using cURL. It requires the Upstash Vector REST URL and authentication token.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/random/ns \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Upserting Single Data Item with Embedding Model in PHP
DESCRIPTION: Demonstrates how to upsert a single data item using the Upstash Vector SDK in PHP. It initializes an Index object and uses the upsertData() method to insert or update data, which will automatically generate vector embeddings.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataUpsert;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->upsertData(new DataUpsert(
  id: '1',
  data: 'The capital of Japan is Tokyo',
));

----------------------------------------

TITLE: Successful Response Format
DESCRIPTION: Example of a successful response from the upsert endpoint.

LANGUAGE: json
CODE:
{
    "result": "Success"
}

----------------------------------------

TITLE: Fetching Random Vector with cURL in Shell
DESCRIPTION: This snippet demonstrates how to fetch a random vector from the default namespace using cURL. It requires the Upstash Vector REST URL and authentication token.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/random \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Error Response for Non-existent Namespace in JSON
DESCRIPTION: This JSON snippet demonstrates the error response format when attempting to delete a namespace that doesn't exist. It includes an 'error' message and a 'status' code of 404.

LANGUAGE: json
CODE:
{
    "error": "Namespace ns for the index $NAME does not exist",
    "status": 404
}

----------------------------------------

TITLE: Successful Response for Upserting Data in Upstash Vector
DESCRIPTION: This JSON snippet shows the successful response format when upserting data into Upstash Vector. It returns a 'Success' result string.

LANGUAGE: json
CODE:
{
    "result": "Success"
}

----------------------------------------

TITLE: Deleting a Namespace using cURL in Bash
DESCRIPTION: This snippet demonstrates how to delete a namespace from an Upstash Vector index using a cURL command. It requires the UPSTASH_VECTOR_REST_URL and UPSTASH_VECTOR_REST_TOKEN environment variables to be set.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/delete-namespace/ns \
  -X DELETE \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Installing upstash-vector SDK via pip
DESCRIPTION: Command to install the upstash-vector Python SDK using pip package manager.

LANGUAGE: bash
CODE:
pip install upstash-vector

----------------------------------------

TITLE: Upserting Multiple Vectors in Upstash Vector using cURL
DESCRIPTION: This snippet demonstrates how to upsert multiple vectors into the default namespace of Upstash Vector using a cURL command. It includes vector IDs, raw text data, and metadata.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert-data \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '[ 
    { "id": "id-0", "data": "Upstash is a serverless data platform.", "metadata": { "link": "upstash.com" } }, 
    { "id": "id-1", "data": "Upstash Vector is a serverless vector database." }
  ]'

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Required environment variables for client configuration including REST URL and token.

LANGUAGE: bash
CODE:
UPSTASH_VECTOR_REST_URL="your_rest_url"
UPSTASH_VECTOR_REST_TOKEN="your_rest_token"

----------------------------------------

TITLE: Handling Non-Existent Vectors in TypeScript
DESCRIPTION: Shows how the fetch operation handles non-existent vectors by returning null for missing entries in the result array.

LANGUAGE: typescript
CODE:
await index.fetch(["2", "3"]);
// [{ id: "2" }, null]

----------------------------------------

TITLE: Successful Reset Response in JSON
DESCRIPTION: This snippet shows the expected JSON response for a successful reset operation. The response includes a 'result' field with the value 'Success'.

LANGUAGE: json
CODE:
{
    "result": "Success"
}

----------------------------------------

TITLE: Installing Bun Package Manager
DESCRIPTION: Command to install Bun.js package manager using curl. Bun is required for package management and dependency handling in the project.

LANGUAGE: commandline
CODE:
curl -fsSL https://bun.sh/install | bash

----------------------------------------

TITLE: Creating and Storing Document Embeddings
DESCRIPTION: Code for creating sample documents, embedding them using Hugging Face, and storing them in Upstash Vector with batching support.

LANGUAGE: python
CODE:
# Import the required Document class from LangChain
from langchain.schema import Document

# Sample documents to embed and store as Document objects
documents = [
    Document(page_content="Global warming is causing sea levels to rise."),
    Document(page_content="Artificial intelligence is transforming many industries."),
    Document(page_content="Renewable energy is vital for sustainable development.")
]

# Embed documents and store in Upstash Vector with batching
vector_store.add_documents(
    documents=documents,
    batch_size=100,               
    embedding_chunk_size=200      
)

print("Documents with embeddings have been stored in Upstash Vector.")

----------------------------------------

TITLE: JSON Response for Successful Resumable Query Stop
DESCRIPTION: This JSON object represents the successful response from the Upstash Vector API when stopping a resumable query. It includes a 'result' field with a success message.

LANGUAGE: json
CODE:
{
  "result": "Success"
}

----------------------------------------

TITLE: Setting Environment Variables for Upstash Vector Client
DESCRIPTION: Bash commands to set the required environment variables for configuring the Upstash vector client.

LANGUAGE: bash
CODE:
UPSTASH_VECTOR_REST_URL="your_rest_url"
UPSTASH_VECTOR_REST_TOKEN="your_rest_token"

----------------------------------------

TITLE: Installing @upstash/vector SDK
DESCRIPTION: Commands to install the @upstash/vector package using npm or pnpm package managers.

LANGUAGE: shell
CODE:
npm install @upstash/vector

LANGUAGE: shell
CODE:
pnpm add @upstash/vector

----------------------------------------

TITLE: Range Vectors API Response Example
DESCRIPTION: This JSON snippet illustrates the structure of a successful response from the Range Vectors API. It includes the nextCursor for pagination and an array of vector objects with their IDs and optional metadata.

LANGUAGE: json
CODE:
{
    "result": {
        "nextCursor": "2",
        "vectors": [
            {
                "id": "id-0",
                "metadata": {
                    "link": "upstash.com"
                }
            },
            {
                "id": "id-1"
            }
        ]
    }
}

----------------------------------------

TITLE: Initializing Upstash Vector Index Client in Python
DESCRIPTION: Example of how to initialize the Upstash Vector Index client using explicit URL and token or environment variables.

LANGUAGE: python
CODE:
from upstash_vector import Index
index = Index(url="UPSTASH_VECTOR_REST_URL", token="UPSTASH_VECTOR_REST_TOKEN")

LANGUAGE: python
CODE:
from upstash_vector import Index
index = Index.from_env()

----------------------------------------

TITLE: Resetting Default Namespace using cURL
DESCRIPTION: This snippet demonstrates how to reset the default namespace of an Upstash Vector index using a cURL command. It requires the UPSTASH_VECTOR_REST_URL and UPSTASH_VECTOR_REST_TOKEN environment variables to be set.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/reset \
  -X DELETE \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Querying Range Vectors API with Namespace using cURL
DESCRIPTION: This snippet shows how to make a GET request to the Range Vectors API endpoint for a specific namespace using cURL. It includes the namespace in the URL path and the necessary authorization and request parameters.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/range/ns \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "cursor": "0", "limit": 2, "includeMetadata": true }'

----------------------------------------

TITLE: Manually Initializing Upstash Vector Client in PHP
DESCRIPTION: This snippet demonstrates how to manually initialize the Upstash Vector client in PHP by passing the REST URL and token directly to the constructor. This method is useful when interacting with multiple projects with different configurations.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

----------------------------------------

TITLE: Running Project Tests
DESCRIPTION: Command to execute all project tests using Bun. Requires appropriate environment variables to be set before running.

LANGUAGE: bash
CODE:
bun run test

----------------------------------------

TITLE: JSON Response from List Namespaces API
DESCRIPTION: This snippet shows the expected JSON response format from the List Namespaces API. The response includes an array of namespace names under the 'result' key.

LANGUAGE: json
CODE:
{
    "result": ["", "ns0", "ns1"]
}

----------------------------------------

TITLE: Initializing Upstash Vector Client from Environment Variables in PHP
DESCRIPTION: This code snippet shows how to initialize the Upstash Vector client using environment variables in PHP. It assumes that the required environment variables have been set previously.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;

$index = Index::fromEnv();

----------------------------------------

TITLE: Deleting a Single Vector by ID in Upstash Vector (TypeScript)
DESCRIPTION: Shows how to delete a single vector by providing its ID. The response includes the number of successfully deleted vectors, which should be 1 in this case.

LANGUAGE: typescript
CODE:
const response = await index.delete("2");
// { deleted: 1 }

----------------------------------------

TITLE: Successful Response for Deleting Vectors in Upstash Vector API
DESCRIPTION: This JSON snippet represents a successful response from the Upstash Vector API after deleting vectors. It includes a 'result' object with a 'deleted' field indicating the number of vectors that were successfully deleted.

LANGUAGE: json
CODE:
{
    "result": {
        "deleted": 2
    }
}

----------------------------------------

TITLE: Installing Upstash Vector PHP SDK with Composer
DESCRIPTION: This snippet shows how to install the Upstash Vector PHP SDK using Composer. It requires Composer to be installed in the development environment.

LANGUAGE: shell
CODE:
composer require upstash/vector

----------------------------------------

TITLE: Creating a Resumable Query in Python with Upstash Vector
DESCRIPTION: Demonstrates how to create a resumable query using the Index class. This query allows for fetching large result sets or implementing pagination.

LANGUAGE: python
CODE:
query = index.resumable_query(
    vector=[0.1, 0.2],  # or use 'data' parameter for text-based queries
    top_k=2,
    include_metadata=True,
    include_vectors=True,
    namespace="your_namespace"
)

----------------------------------------

TITLE: Error API Response Format
DESCRIPTION: Example of an error response from the Upstash Vector REST API, showing unauthorized access.

LANGUAGE: json
CODE:
{
  "error": "Unauthorized: Invalid auth token",
  "status": 401
}

----------------------------------------

TITLE: Dependency Injection with IndexInterface in Laravel Controller
DESCRIPTION: This snippet shows how to use dependency injection to access the Upstash Vector index in a Laravel controller.

LANGUAGE: php
CODE:
namespace App\Http\Controllers;

use Upstash\Vector\Contracts\IndexInterface;

class Controller
{
    public function index(IndexInterface $index)
    {
        $namespaces = $index->listNamespaces();
        
        return response()->json(['namespaces' => $namespaces]);
    }
}

----------------------------------------

TITLE: Deleting Vectors by Prefix in PHP
DESCRIPTION: Shows how to delete vectors that share a common ID prefix using VectorDeleteByPrefix class.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\VectorDeleteByPrefix;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->delete(new VectorDeleteByPrefix(
  prefix: 'users:',
));

----------------------------------------

TITLE: Error Response Example
DESCRIPTION: Sample JSON response showing an error when querying an index without an embedding model.

LANGUAGE: json
CODE:
{
    "error": "Embedding data for this index is not allowed. The index must be created with an embedding model to use it.",
    "status": 422
}

----------------------------------------

TITLE: Configuring Upstash Vector Environment Variables
DESCRIPTION: This snippet shows how to set up the required environment variables for Upstash Vector in a Laravel application.

LANGUAGE: bash
CODE:
UPSTASH_VECTOR_REST_URL="your_rest_url"
UPSTASH_VECTOR_REST_TOKEN="your_rest_token"

----------------------------------------

TITLE: Upserting Vectors to a Specific Namespace in Upstash Vector (TypeScript)
DESCRIPTION: This snippet illustrates how to upsert vectors into a specific namespace within the Upstash Vector index.

LANGUAGE: typescript
CODE:
await index.upsert([
  {
    id: "6789",
    vector: [0.6, 0.7, 0.8, 0.9, 0.9],
  },
], { namespace: "my-namespace" });

----------------------------------------

TITLE: Calculating Dot Product Score
DESCRIPTION: Formula for calculating normalized dot product score between two normalized vectors, resulting in a value between 0 and 1.

LANGUAGE: plaintext
CODE:
(1 + dot_product(v1, v2)) / 2

----------------------------------------

TITLE: Querying the LlamaIndex with Upstash Vector Store
DESCRIPTION: This Python code shows how to perform queries using the initialized LlamaIndex with Upstash Vector store. It creates a query engine from the index and demonstrates two example queries related to global warming and carbon footprint reduction.

LANGUAGE: python
CODE:
# Initialize the query engine
query_engine = index.as_query_engine()

# Perform queries
response_1 = query_engine.query("What is global warming?")
print(response_1)

response_2 = query_engine.query("How can we reduce our carbon footprint?")
print(response_2)

----------------------------------------

TITLE: Calculating Euclidean Distance Score
DESCRIPTION: Formula for calculating normalized Euclidean distance score between two vectors, resulting in a value between 0 and 1.

LANGUAGE: plaintext
CODE:
1 / (1 + squared_distance(v1, v2))

----------------------------------------

TITLE: Starting and Fetching Results from a Resumable Query in Python
DESCRIPTION: Shows how to start a resumable query, fetch initial results, and then fetch additional results as needed. This approach is useful for handling large result sets efficiently.

LANGUAGE: python
CODE:
initial_results = query.start()

next_results = query.fetch_next(number_of_results)

stop_result = query.stop()
assert stop_result == 'Success'

----------------------------------------

TITLE: Calculating Cosine Similarity Score
DESCRIPTION: Formula for calculating normalized cosine similarity score between two vectors, resulting in a value between 0 and 1.

LANGUAGE: plaintext
CODE:
(1 + cosine_similarity(v1, v2)) / 2

----------------------------------------

TITLE: Batch Querying Vectors from Upstash Index in Python
DESCRIPTION: Shows how to perform multiple vector queries in a single batch operation to reduce server round trips. The example demonstrates querying with different parameters and filters for each query in the batch.

LANGUAGE: python
CODE:
import random

from upstash_vector import Index

index = Index.from_env()

# Generate a random vector for similarity comparison
dimension = 128  # Adjust based on your index's dimension
query_vectors = [[random.random() for _ in range(dimension)] for _ in range(2)]

# Execute the query
query_results = index.query_many(
    queries=[
        {
            "vector": query_vectors[0],
            "include_metadata": True,
            "include_data": True,
            "include_vectors": False,
            "top_k": 5,
            "filter": "genre = 'fantasy' and title = 'Lord of the Rings'",
        },
        {
            "vector": query_vectors[1],
            "include_metadata": False,
            "include_data": False,
            "include_vectors": True,
            "top_k": 3,
            "filter": "genre = 'drama'",
        },
    ]
)

for i, query_result in enumerate(query_results):
    print(f"Query-{i} result:")

    # Print the query result
    for result in query_result:
        print("Score:", result.score)
        print("ID:", result.id)
        print("Vector:", result.vector)
        print("Metadata:", result.metadata)
        print("Data:", result.data)

----------------------------------------

TITLE: Representing Sparse Vectors in Python
DESCRIPTION: Demonstrates how to represent sparse vectors using two arrays: one for indices of non-zero dimensions and another for corresponding values.

LANGUAGE: python
CODE:
dense = [0.1, 0.3, , ...thousands of non-zero values..., 0.5, 0.2]

sparse = (
    [23, 42, 5523, 123987, 240001], # some low number of dimension indices
    [0.1, 0.3, 0.1, 0.2, 0.5], # non-zero values corresponding to dimensions
)

----------------------------------------

TITLE: Listing Namespaces in Upstash Vector
DESCRIPTION: This snippet demonstrates how to list all active namespaces in Upstash Vector using different programming languages.

LANGUAGE: python
CODE:
from upstash_vector import Index

index = Index(
    url="UPSTASH_VECTOR_REST_URL",
    token="UPSTASH_VECTOR_REST_TOKEN",
)

index.list_namespaces()

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.listNamespaces()

LANGUAGE: go
CODE:
package main

import (
	"github.com/upstash/vector-go"
)

func main() {
	index := vector.NewIndex("UPSTASH_VECTOR_REST_URL", "UPSTASH_VECTOR_REST_TOKEN")

	index.ListNamespaces()
}

LANGUAGE: php
CODE:
use Upstash\Vector\Index;

$index = new Index(
  url: 'UPSTASH_VECTOR_REST_URL',
  token: 'UPSTASH_VECTOR_REST_TOKEN',
);

$index->listNamespaces();

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/list-namespaces \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Using Distribution-Based Score Fusion in JavaScript
DESCRIPTION: Example of how to use the Distribution-Based Score Fusion (DBSF) algorithm for fusing dense and sparse query scores in JavaScript.

LANGUAGE: javascript
CODE:
import { FusionAlgorithm, Index } from "@upstash/vector";

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
});

await index.query({
  vector: [0.5, 0.4],
  sparseVector: {
    indices: [2, 3],
    values: [0.13, 0.87],
  },
  fusionAlgorithm: FusionAlgorithm.DBSF,
  topK: 3,
});

----------------------------------------

TITLE: Upserting Text Data in JavaScript
DESCRIPTION: Example of how to upsert text data into an Upstash Vector index with hosted embedding models using JavaScript.

LANGUAGE: javascript
CODE:
import { Index } from "@upstash/vector"

const index = new Index({
  url: "UPSTASH_VECTOR_REST_URL",
  token: "UPSTASH_VECTOR_REST_TOKEN",
})

await index.upsert([
  {
    id: 'id-0',
    data: "Upstash Vector provides dense and sparse embedding models.",
  }
])

----------------------------------------

TITLE: Successful API Response Format
DESCRIPTION: Example of a successful response from the Upstash Vector REST API.

LANGUAGE: json
CODE:
{ "result": "Success" }

----------------------------------------

TITLE: Inserting Vector Data using cURL
DESCRIPTION: Example of upserting vector data into Upstash Vector Database using cURL. Requires UPSTASH_VECTOR_REST_URL and UPSTASH_VECTOR_REST_TOKEN environment variables to be set.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{"id": "id-0", "vector": [0.87, 0.99]}'

----------------------------------------

TITLE: Error Response Format
DESCRIPTION: Example of an error response when vector dimensions don't match the index requirements.

LANGUAGE: json
CODE:
{
    "error": "Invalid vector dimension: 2, expected: 256",
    "status": 422
}

----------------------------------------

TITLE: Upserting Single Vector to Specific Namespace in Upstash Vector using cURL
DESCRIPTION: This snippet shows how to upsert a single vector into a specific namespace ('ns') in Upstash Vector using a cURL command. It includes a vector ID, raw text data, and metadata.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/upsert-data/ns \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{ "id": "id-2", "data": "Upstash is a serverless data platform.", "metadata": { "link": "upstash.com" } }'

----------------------------------------

TITLE: Resetting Specific Namespace using cURL
DESCRIPTION: This snippet shows how to reset a specific namespace named 'ns' in an Upstash Vector index using a cURL command. It requires the UPSTASH_VECTOR_REST_URL and UPSTASH_VECTOR_REST_TOKEN environment variables to be set.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/reset/ns \
  -X DELETE \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Successful Query Response Example
DESCRIPTION: Sample JSON response showing successful query results with scores and metadata.

LANGUAGE: json
CODE:
{
    "result": [
        {
            "id": "id-0",
            "score": 1.0,
            "metadata": {
                "link": "upstash.com"
            }
        },
        {
            "id": "id-1",
            "score": 0.99996454
        }
    ]
}

----------------------------------------

TITLE: Sample JSON Response from Index Info API
DESCRIPTION: This snippet shows an example JSON response from the Index Info API. It includes various details about the index, such as vector counts, index size, dimension, similarity function, and namespace information.

LANGUAGE: json
CODE:
{
  "result": {
    "vectorCount": 7,
    "pendingVectorCount": 0,
    "indexSize": 43501,
    "dimension": 1024,
    "similarityFunction": "COSINE",
    "indexType": "HYBRID",
    "denseIndex": {
      "dimension": 1024,
      "similarityFunction": "COSINE",
      "embeddingModel": "BGE_M3"
    },
    "sparseIndex": {
      "embeddingModel": "BM25"
    },
    "namespaces": {
      "": {
        "vectorCount": 6,
        "pendingVectorCount": 0
      },
      "ns": {
        "vectorCount": 1,
        "pendingVectorCount": 0
      }
    }
  }
}

----------------------------------------

TITLE: Querying Index Info using cURL
DESCRIPTION: This snippet demonstrates how to make a GET request to the Index Info API endpoint using cURL. It includes the necessary authorization header.

LANGUAGE: sh
CODE:
curl $UPSTASH_VECTOR_REST_URL/info \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN"

----------------------------------------

TITLE: Performing Resumable Query with Data in TypeScript
DESCRIPTION: This example shows how to use the resumableQuery method with a data input instead of a vector. It demonstrates querying, logging results, fetching additional results, and stopping the query.

LANGUAGE: typescript
CODE:
const { result, fetchNext, stop } = await index.resumableQuery({
  maxIdle: 3600,
  topK: 50,
  data: "lord of the rings"
  includeMetadata: true,
  includeData: true,
});

console.log(result);
/*
[
  {
    id: '6345',
    score: 1.00000012,
    data: "hobbit",
    metadata: {
      sentence: "Upstash is great."
    }
  },
  // ... more results
]
*/

const nextBatch = await fetchNext(5); // Fetch next 5 results
console.log(nextBatch);

await stop(); // Stop the resumable query

----------------------------------------

TITLE: Performing Resumable Query with Vector in TypeScript
DESCRIPTION: This snippet demonstrates how to use the resumableQuery method with a vector input. It shows initializing the query, logging results, fetching additional results, and stopping the query.

LANGUAGE: typescript
CODE:
const { result, fetchNext, stop } = await index.resumableQuery({
  maxIdle: 3600,
  topK: 50,
  vector: [0, 1, 2, ..., 383], // 384-dimensional vector
  includeMetadata: true,
  includeVectors: true,
});

console.log(result);
/*
[
  {
    id: '6345',
    score: 1.00000012,
    vector: [0, 1, 2, ..., 383],
    metadata: {
      sentence: "Upstash is great."
    }
  },
  // ... more results
]
*/

const nextBatch = await fetchNext(5); // Fetch next 5 results
console.log(nextBatch);

await stop(); // Stop the resumable query

----------------------------------------

TITLE: Error Handling in Resumable Queries with Python and Upstash Vector
DESCRIPTION: Illustrates how to handle errors when working with resumable queries, specifically when attempting operations on a stopped query.

LANGUAGE: python
CODE:
with pytest.raises(ClientError):
  query.fetch_next(1)
  query.async_fetch_next(1)

for async with pytest.raises(ClientError):
  query.stop() # or await query.async_stop() for async

----------------------------------------

TITLE: Asynchronous Resumable Query Operations in Python with Upstash Vector
DESCRIPTION: Demonstrates the asynchronous usage of resumable queries, including creating, starting, fetching results, and stopping the query using the AsyncIndex class.

LANGUAGE: python
CODE:
query = await async_index.resumable_query(
  vector=[0.1, 0.2],
  top_k=2,
  include_metadata=True,
  include_vectors=True,
  namespace='your_namespace'
)

initial_results = await query.async_start()

next_results = await query.async_fetch_next(number_of_results)

stop_result = await query.async_stop()
assert stop_result == 'Success'

----------------------------------------

TITLE: Configuring Idle Timeout for Resumable Queries
DESCRIPTION: Shows how to set custom idle timeout duration for resumable queries. Default timeout is 1 hour, but can be configured when initializing the query.

LANGUAGE: python
CODE:
result, handle = index.resumable_query(
    vector=[0.1, 0.2],
    top_k=2,
    include_metadata=True,
    max_idle = 7200, # two hours, in seconds
)

LANGUAGE: javascript
CODE:
const { result, fetchNext, stop } = await index.resumableQuery({
  vector: [0.1, 0.2],
  topK: 2,
  includeMetadata: true,
  maxIdle: 7200, // two hours, in seconds
});

LANGUAGE: go
CODE:
scores, handle, err := index.ResumableQuery(vector.ResumableQuery{
	Vector:          []float32{0.1, 0.2},
	TopK:            2,
	IncludeMetadata: true,
	MaxIdle:         7200, // two hours, in seconds
})

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/resumable-query \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{
    "vector": [0.1, 0.2],
    "topK": 2,
    "includeMetadata": true,
    "maxIdle": 7200
  }'

----------------------------------------

TITLE: Stopping Resumable Vector Query
DESCRIPTION: Demonstrates how to properly terminate a resumable query to free server resources. This is important for managing the maximum number of active queries.

LANGUAGE: python
CODE:
handle.stop()

LANGUAGE: javascript
CODE:
await stop();

LANGUAGE: go
CODE:
handle.Close()

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/resumable-query-end \
  -X POST \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{
    "uuid": "550e8400-e29b-41d4-a716-446655440000"
  }'

----------------------------------------

TITLE: Sample Query Results from Upstash Vector Similarity Search
DESCRIPTION: This code block shows the expected output from running the similarity search query "What is LangChain?" against the sample documents added to the Upstash Vector store. It demonstrates the ranking of results based on semantic relevance.

LANGUAGE: plaintext
CODE:
Similarity Search Results:
LangChain is a framework for building intelligent apps.
Semantic search enables advanced query matching.
Upstash Vector is a scalable vector database.

----------------------------------------

TITLE: Installing Required Packages for LangChain and Upstash Vector
DESCRIPTION: This command installs the necessary Python packages to use LangChain with Upstash Vector, including the Upstash Vector client, LangChain, and python-dotenv for environment variable management.

LANGUAGE: bash
CODE:
pip install upstash-vector langchain langchain-community python-dotenv

----------------------------------------

TITLE: Starting Flowise Application
DESCRIPTION: Command to start the Flowise application server which will be accessible at localhost:3000.

LANGUAGE: bash
CODE:
npx flowise start

----------------------------------------

TITLE: Installing Dependencies for RAG Chatbot
DESCRIPTION: Commands to create a Next.js application and install required packages for the RAG chatbot project.

LANGUAGE: bash
CODE:
npx create-next-app rag-chatbot --typescript
cd rag-chatbot

LANGUAGE: bash
CODE:
npm install @ai-sdk/openai ai zod @upstash/vector

LANGUAGE: bash
CODE:
pnpm install @ai-sdk/openai ai zod @upstash/vector

LANGUAGE: bash
CODE:
bun install @ai-sdk/openai ai zod @upstash/vector

----------------------------------------

TITLE: Embedding Upstash Vector Examples Dashboard in JSX
DESCRIPTION: This code snippet embeds an iframe that displays a dashboard of Upstash Vector examples. The iframe source is set to a Vercel-hosted URL, with full width, 1000px height, and no border.

LANGUAGE: jsx
CODE:
<iframe
  src="https://vector-example-dashboard.vercel.app"
  width="100%"
  height="1000px"
  style={{ border: "0" }}
></iframe>

----------------------------------------

TITLE: Querying Parsed Document with LLM and Upstash Vector
DESCRIPTION: Sets up Upstash Vector Store, creates an index from parsed documents, and queries the content using OpenAI as the language model.

LANGUAGE: python
CODE:
from llama_index.core import VectorStoreIndex
from llama_index.vector_stores.upstash import UpstashVectorStore
from llama_index.core import StorageContext
import openai

# Load environment variables for API keys and Upstash configuration
from dotenv import load_dotenv
import os
load_dotenv()

# Set up OpenAI API key
openai.api_key = os.getenv("OPENAI_API_KEY")

# Set up Upstash Vector Store
upstash_vector_store = UpstashVectorStore(
    url=os.getenv("UPSTASH_VECTOR_REST_URL"),
    token=os.getenv("UPSTASH_VECTOR_REST_TOKEN"),
)

# Create a storage context for Upstash Vector and index the parsed document
storage_context = StorageContext.from_defaults(vector_store=upstash_vector_store)
index = VectorStoreIndex.from_documents(documents, storage_context=storage_context)

# Create a query engine for the index and perform a query
query_engine = index.as_query_engine()
query = "What are the main points discussed in the document?"
response = query_engine.query(query)
print(response)

----------------------------------------

TITLE: Setting Environment Variables for API Keys and Upstash Configuration
DESCRIPTION: Creates a .env file with necessary API keys and configuration for Upstash Vector and OpenAI.

LANGUAGE: plaintext
CODE:
UPSTASH_VECTOR_REST_URL=your_upstash_url
UPSTASH_VECTOR_REST_TOKEN=your_upstash_token
OPENAI_API_KEY=your_openai_api_key
LLAMA_CLOUD_API_KEY=your_llama_cloud_api_key

----------------------------------------

TITLE: Example Query Output
DESCRIPTION: Sample responses from the LlamaIndex query engine demonstrating RAG functionality

LANGUAGE: plaintext
CODE:
Global warming refers to the long-term increase in Earth's average temperature due to the accumulation of greenhouse gases (GHGs) such as carbon dioxide (CO2), methane (CH4), and nitrous oxide (N2O) in the atmosphere. The primary drivers of GHG emissions include the burning of fossil fuels for energy, industrial processes, deforestation, and unsustainable agricultural practices. As these gases trap heat, they create a "greenhouse effect," leading to rising temperatures, melting polar ice caps, rising sea...

Shifting towards plant-based diets, which emphasize the consumption of vegetables, fruits, legumes, grains, and nuts, can significantly reduce our carbon footprint. Plant-based diets have a much lower environmental footprint compared to animal-based foods, particularly red meat, which is highly resource-intensive and contributes disproportionately to greenhouse gas emissions. Studies have shown that reducing the consumption of animal-based foods and increasing the intake of plant-based foods can help red...

----------------------------------------

TITLE: Querying the Document using LlamaIndex
DESCRIPTION: Implementation of document querying functionality using LlamaIndex query engine

LANGUAGE: python
CODE:
# Initialize the query engine
query_engine = index.as_query_engine()

# Query the document about global warming
res1 = query_engine.query("What is global warming?")
print(res1)

res2 = query_engine.query("How should we modify our diets to reduce our carbon footprint?")
print(res2)

----------------------------------------

TITLE: Creating and Storing Document Embeddings
DESCRIPTION: Sample document creation and storage in Upstash Vector with batch processing configuration.

LANGUAGE: python
CODE:
# Sample documents to embed and store
documents = [
    Document(page_content="Global warming is causing sea levels to rise."),
    Document(page_content="AI is transforming many industries."),
    Document(page_content="Renewable energy is vital for sustainable development.")
]
vector_store.add_documents(documents=documents, batch_size=100, embedding_chunk_size=200)

----------------------------------------

TITLE: Initializing Embeddings and Vector Store
DESCRIPTION: Setting up Hugging Face embeddings model and Upstash Vector store with necessary imports and configurations.

LANGUAGE: python
CODE:
# Import libraries
import gradio as gr
from dotenv import load_dotenv
from langchain_huggingface.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores.upstash import UpstashVectorStore
from transformers import pipeline
from langchain.schema import Document

# Load environment variables
load_dotenv()

# Set up embeddings and Upstash Vector store
embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-mpnet-base-v2")
vector_store = UpstashVectorStore(embedding=embeddings)

----------------------------------------

TITLE: Upserting Multiple Data Items with Namespace in PHP
DESCRIPTION: Shows how to upsert multiple data items at once using a namespace in Upstash Vector. It initializes an Index object, specifies a namespace, and uses the upsertDataMany() method to insert or update multiple data items within that namespace.

LANGUAGE: php
CODE:
use Upstash\Vector\Index;
use Upstash\Vector\DataUpsert;

$index = new Index(
  url: "<UPSTASH_VECTOR_REST_URL>",
  token: "<UPSTASH_VECTOR_REST_TOKEN>",
);

$index->namespace('my-namespace')->upsertDataMany([
  new DataUpsert(id: '1', data: 'The capital of Japan is Tokyo'),
  new DataUpsert(id: '2', data: 'The capital of France is Paris'),
  new DataUpsert(id: '3', data: 'The capital of Germany is Berlin'),
]);

----------------------------------------

TITLE: Accessing Index Information Properties in PHP
DESCRIPTION: Shows how to access various properties of the IndexInfo object including vector counts, index size, dimensions, and similarity function. Also demonstrates accessing namespace-specific information.

LANGUAGE: php
CODE:
// To know the number of vectors ready to query.
$info->vectorCount;

// To know the number of vectors that are getting indexed.
$info->pendingVectorCount;

// To know the size of the index in bytes.
$info->indexSize;

// To know the dimensions of your vector index.
$info->dimension;

// To know which similarity function is being used.
$info->similarityFunction;

// To get information about a specific index you can (More on next section):
$namespaceInfo = $info->namespace('my-namespace');

----------------------------------------

TITLE: Environment Variables Configuration
DESCRIPTION: Required environment variables setup for Upstash Vector and LlamaParse authentication.

LANGUAGE: plaintext
CODE:
UPSTASH_VECTOR_REST_URL=your_upstash_url
UPSTASH_VECTOR_REST_TOKEN=your_upstash_token
LLAMA_CLOUD_API_KEY=your_llama_cloud_api_key

----------------------------------------

TITLE: Vector Query with Metadata Filter using cURL
DESCRIPTION: Example of querying vectors with metadata filtering using direct REST API calls via cURL.

LANGUAGE: shell
CODE:
curl $UPSTASH_VECTOR_REST_URL/query \
  -H "Authorization: Bearer $UPSTASH_VECTOR_REST_TOKEN" \
  -d '{
   "vector":[0.9215,0.3897],
   "topK" : 5,
   "filter": "population >= 1000000 AND geography.continent = \"Asia\"",
   "includeMetadata": true
}'

----------------------------------------

TITLE: Compare Section TODO
DESCRIPTION: Placeholder comment indicating pending documentation to be completed by Melek.

LANGUAGE: markdown
CODE:
---
title: Compare
---

// todo melek