TITLE: Configuring TamaguiProvider in React
DESCRIPTION: Example of setting up the TamaguiProvider component in a React application, wrapping the app and providing configuration.

LANGUAGE: tsx
CODE:
import { TamaguiProvider, View } from '@tamagui/core'
import config from './tamagui.config' // your configuration

export default function App() {
  return (
  <TamaguiProvider config={config}>
    <View width={200} height={200} backgroundColor="$background" />
  </TamaguiProvider>
  )
}

----------------------------------------

TITLE: Minimal Tamagui Configuration
DESCRIPTION: Basic configuration example showing essential setup of tokens, themes, media queries and shorthands

LANGUAGE: tsx
CODE:
import { createTamagui, getConfig } from '@tamagui/core'

export const config = createTamagui({
  tokens: {
    size: { sm: 8, md: 12, lg: 20 },
    space: { '-sm': 8 },
    radius: { none: 0, sm: 3 },
    color: { white: '#fff', black: '#000' },
  },

  themes: {
    light: {
      bg: '#f2f2f2',
      color: '#fff',
    },
    dark: {
      bg: '#111',
      color: '#000',
    },
  },

  media: {
    sm: { maxWidth: 860 },
    gtSm: { minWidth: 860 + 1 },
    short: { maxHeight: 820 },
    hoverNone: { hover: 'none' },
    pointerCoarse: { pointer: 'coarse' },
  },

  shorthands: {
    px: 'paddingHorizontal',
  },

  settings: {
    disableSSR: true,
    allowedStyleValues: 'somewhat-strict-web',
  },
})

----------------------------------------

TITLE: Complete Tamagui Configuration
DESCRIPTION: Full configuration example including fonts, tokens, themes, and type definitions

LANGUAGE: tsx
CODE:
import { createFont, createTamagui, createTokens, isWeb } from 'tamagui'

const systemFont = createFont({
  family: isWeb ? 'Helvetica, Arial, sans-serif' : 'System',
  size: {
    1: 12,
    2: 14,
    3: 15,
  },
  lineHeight: {
    2: 22,
  },
  weight: {
    1: '300',
    3: '600',
  },
  letterSpacing: {
    1: 0,
    2: -1,
  },
  face: {
    300: { normal: 'InterLight', italic: 'InterItalic' },
    600: { normal: 'InterBold' },
  },
})

const size = {
  0: 0,
  1: 5,
  2: 10,
}

export const tokens = createTokens({
  size,
  space: { ...size, '-1': -5, '-2': -10 },
  radius: { 0: 0, 1: 3 },
  zIndex: { 0: 0, 1: 100, 2: 200 },
  color: {
    white: '#fff',
    black: '#000',
  },
})

----------------------------------------

TITLE: Installing Next.js and Tamagui Plugin
DESCRIPTION: Commands to create a new Next.js project and add the Tamagui Next.js plugin

LANGUAGE: bash
CODE:
npx create-next-app@latest
yarn add @tamagui/next-plugin

----------------------------------------

TITLE: Complete Tamagui Configuration Example
DESCRIPTION: Demonstrates a full example of setting up Tamagui with tokens, themes, and provider implementation.

LANGUAGE: tsx
CODE:
import { TamaguiProvider, createTokens, createTamagui, View, Theme } from 'tamagui'

const tokens = createTokens({
  color: {
    darkRed: '#550000'
    lightRed: '#ff0000'
  }
})

const config = createTamagui({
  tokens,
  themes: {
    dark: {
      red: tokens.color.darkRed,
    },
    light: {
      red: tokens.color.lightRed,
    }
  }
})

export const App = () => (
  <TamaguiProvider config={config} defaultTheme="light">
    <View backgroundColor="$red" />
    <Theme name="dark">
      <View backgroundColor="$red" />
    </Theme>
  </TamaguiProvider>
)

----------------------------------------

TITLE: Rendering Tamagui Documentation Components in JSX
DESCRIPTION: This code snippet demonstrates the usage of custom Tamagui documentation components to structure the introduction page. It includes components for the documentation intro, getting started guide, and a highlights section with key features.

LANGUAGE: jsx
CODE:
<DocsIntro />

<GetStarted />

#### Highlights

<Highlights
  disableLinks
  disableTitle
  large
  features={[
    `Core only has one dependency - React - but supports the full React Native View and Text API, a superset of the React Native Style API, styled(), powerful hooks, and the typed design system helpers in ~28Kb on web.`,
    `A smart, partial-evaluating compiler gives 0-runtime performance with the ergonomics of writing your code however you want - even inline, logic-filled code is optimized.`,
    `Every feature works at runtime and compile-time, so none of the usual limits of 0-runtime libraries, while optionally getting the same great performance.`,
    `useTheme and useMedia hooks with signal-like granularity and dirty tracking.`,
    `Unstyled and styled versions of all components.`,
  ]}
/>

----------------------------------------

TITLE: Installing Tamagui Babel Plugin
DESCRIPTION: Command to add the Tamagui Babel plugin to the project dependencies.

LANGUAGE: bash
CODE:
yarn add @tamagui/babel-plugin

----------------------------------------

TITLE: Configuring Tamagui Themes and Tokens
DESCRIPTION: Shows how to create and configure themes and tokens in Tamagui, including setting up base themes and sub-themes with different color variations.

LANGUAGE: tsx
CODE:
import { createTamagui, createTokens } from 'tamagui'

const tokens = createTokens({
  color: {
    pinkDark: '#610c62',
    pinkLight: '#f17efc',
  },
  // ... see configuration docs for required tokens
})

export default createTamagui({
  tokens,
  themes: {
    dark: {
      background: '#000',
      color: '#fff',
    },
    light: {
      color: '#000',
      background: '#fff',
    },
    dark_pink: {
      background: tokens.color.pinkDark,
      color: tokens.color.pinkLight,
    },
    light_pink: {
      background: tokens.color.pinkLight,
      color: tokens.color.pinkDark,
    },
  },
})

----------------------------------------

TITLE: Configuring TamaguiProvider in React Application
DESCRIPTION: Sets up the TamaguiProvider at the root of a React application, using the default configuration from @tamagui/config/v4. This is required for components like dialogs and popovers.

LANGUAGE: tsx
CODE:
import { createTamagui,TamaguiProvider, View } from 'tamagui'
import { defaultConfig } from '@tamagui/config/v4' // for quick config install this

const config = createTamagui(defaultConfig)

export default () => (
  <TamaguiProvider config={config}>
    <View />
  </TamaguiProvider>
)

----------------------------------------

TITLE: Installing Full Tamagui UI Kit
DESCRIPTION: Command to install the complete Tamagui UI kit package using Yarn package manager.

LANGUAGE: bash
CODE:
yarn add tamagui

----------------------------------------

TITLE: Configuring Tamagui v4 Base Settings
DESCRIPTION: Core configuration for Tamagui v4 including fonts, animations, media queries, tokens and settings. Defines system fonts, responsive breakpoints, and animation presets.

LANGUAGE: json
CODE:
{
  "tamaguiConfig": {
    "fonts": {
      "body": {
        "family": "-apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif",
        "lineHeight": {
          "1": 21, "2": 22, "3": 23, "4": 24, "5": 26, "6": 28,
          "7": 30, "8": 33, "9": 40, "10": 56, "11": 65, "12": 72,
          "13": 82, "14": 102, "15": 124, "16": 144, "true": 24
        },
        "weight": { "true": "300" },
        "letterSpacing": { "true": 0 },
        "size": {
          "1": 11, "2": 12, "3": 13, "4": 14, "5": 16, "6": 18,
          "7": 20, "8": 23, "9": 30, "10": 46, "11": 55, "12": 62,
          "13": 72, "14": 92, "15": 114, "16": 134, "true": 14
        }
      },
      "heading": {
        "family": "-apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif",
        "lineHeight": {
          "1": 25.4, "2": 26.8, "3": 28.2, "4": 29.6, "5": 32.4,
          "6": 35.2, "7": 38, "8": 42.2, "9": 52, "10": 74.4,
          "11": 87, "12": 96.8, "13": 110.8, "14": 138.8, "15": 169.6,
          "16": 197.6, "true": 29.6
        },
        "weight": { "true": "300" },
        "letterSpacing": { "true": 0 },
        "size": {
          "1": 15.4, "2": 16.8, "3": 18.2, "4": 19.6, "5": 22.4,
          "6": 25.2, "7": 28, "8": 32.2, "9": 42, "10": 64.4,
          "11": 77, "12": 86.8, "13": 100.8, "14": 128.8, "15": 159.6,
          "16": 187.6, "true": 19.6
        }
      }
    },
    "animations": {
      "75ms": "ease-in 75ms", "100ms": "ease-in 100ms",
      "200ms": "ease-in 200ms", "bouncy": "ease-in 200ms",
      "superBouncy": "ease-in 500ms", "lazy": "ease-in 1000ms",
      "medium": "ease-in 300ms", "slow": "ease-in 500ms",
      "quick": "cubic-bezier(0.215, 0.610, 0.355, 1.000) 400ms",
      "quicker": "cubic-bezier(0.215, 0.610, 0.355, 1.000) 300ms",
      "quickest": "cubic-bezier(0.215, 0.610, 0.355, 1.000) 200ms",
      "tooltip": "ease-in 400ms"
    },
    "media": {
      "2xl": { "minWidth": 1536 }, "xl": { "minWidth": 1280 },
      "lg": { "minWidth": 1024 }, "md": { "minWidth": 768 },
      "sm": { "minWidth": 640 }, "xs": { "minWidth": 460 },
      "2xs": { "minWidth": 340 }
    },
    "tokens": {
      "radius": {
        "$0": 0, "$1": 3, "$2": 5, "$3": 7, "$4": 9, "$5": 10,
        "$6": 16, "$7": 19, "$8": 22, "$9": 26, "$10": 34,
        "$11": 42, "$12": 50, "$true": 9
      },
      "zIndex": {
        "$0": 0, "$1": 100, "$2": 200, "$3": 300, "$4": 400,
        "$5": 500
      },
      "space": {
        "$0": 0, "$1": 2, "$2": 7, "$3": 13, "$4": 18, "$5": 24,
        "$6": 32, "$7": 39, "$8": 46, "$9": 53, "$10": 60,
        "$11": 74, "$12": 88, "$13": 102, "$14": 116, "$15": 130,
        "$16": 144, "$true": 18
      },
      "size": {
        "$0": 0, "$1": 20, "$2": 28, "$3": 36, "$4": 44, "$5": 52,
        "$6": 64, "$7": 74, "$8": 84, "$9": 94, "$10": 104,
        "$11": 124, "$12": 144, "$13": 164, "$14": 184, "$15": 204,
        "$16": 224, "$true": 44
      }
    },
    "settings": {
      "defaultFont": "body", "onlyAllowShorthands": true,
      "mediaQueryDefaultActive": { "xs": true, "2xs": true },
      "themeClassNameOnRoot": true, "fastSchemeChange": true,
      "shouldAddPrefersColorThemes": true
    },
    "unset": { "fontFamily": "$body" }
  }
}

----------------------------------------

TITLE: Using TamaguiPlugin for Webpack
DESCRIPTION: Alternative Webpack setup using the TamaguiPlugin for simplified configuration.

LANGUAGE: javascript
CODE:
const { TamaguiPlugin } = require('tamagui-loader')

module.exports = {
  plugins: [
    new TamaguiPlugin({
      config: './tamagui.config.ts',
      components: ['tamagui'],
      importsWhitelist: ['constants.js', 'colors.js'],
      logTimings: true,
      disableExtraction: process.env.NODE_ENV === 'development',
    }),
  ],
}

----------------------------------------

TITLE: Creating a Styled Component with Tamagui in TSX
DESCRIPTION: Demonstrates how to create a styled component using Tamagui's styled() function, setting a name for the component which generates a helpful class.

LANGUAGE: tsx
CODE:
const MyButton = styled(View, {
  name: 'MyButton',
  backgroundColor: 'red',
})

----------------------------------------

TITLE: Adding Variants to Styled Component
DESCRIPTION: Demonstrates how to add variants to a styled component including position, centering, and dynamic size variants.

LANGUAGE: tsx
CODE:
import { View, styled } from '@tamagui/core'

export const RoundedSquare = styled(View, {
  borderRadius: 20,

  variants: {
    pin: {
      top: {
        position: 'absolute',
        top: 0,
      },
    },

    centered: {
      true: {
        alignItems: 'center',
        justifyContent: 'center',
      },
    },

    size: {
      '...size': (size, { tokens }) => {
        return {
          width: tokens.size[size] ?? size,
          height: tokens.size[size] ?? size,
        }
      },
    },
  } as const,
})

----------------------------------------

TITLE: Tamagui Configuration Setup
DESCRIPTION: Shows the setup of a Tamagui configuration using createTamagui, including tokens, themes, media queries, and settings.

LANGUAGE: tsx
CODE:
import { createTamagui, getConfig } from '@tamagui/core'

export const config = createTamagui({
  tokens: {
    size: { sm: 8, md: 12, lg: 20 },
    space: { '-sm': 8 },
    radius: { none: 0, sm: 3 },
    color: { white: '#fff', black: '#000' },
  },

  themes: {
    light: {
      bg: '#f2f2f2',
      color: '#fff',
    },
    dark: {
      bg: '#111',
      color: '#000',
    },
  },

  media: {
    sm: { maxWidth: 860 },
    gtSm: { minWidth: 860 + 1 },
    short: { maxHeight: 820 },
    hoverNone: { hover: 'none' },
    pointerCoarse: { pointer: 'coarse' },
  },

  shorthands: {
    px: 'paddingHorizontal',
  },

  settings: {
    disableSSR: true,
    allowedStyleValues: 'somewhat-strict-web',
  },
})

----------------------------------------

TITLE: Creating Styled Components in Tamagui
DESCRIPTION: Demonstrates how to create and use styled components in Tamagui using the styled() function and applying styles directly as props.

LANGUAGE: tsx
CODE:
import { View, styled } from '@tamagui/core'

const StyledView = styled(View, {
  padding: 10,
})

const MyView = () => (
  <StyledView
    backgroundColor="red"
    hoverStyle={{
      backgroundColor: 'green'
    }}
  />
)

----------------------------------------

TITLE: Basic Tamagui Configuration Setup
DESCRIPTION: Sets up a basic Tamagui configuration using the defaultConfig from @tamagui/config/v4. It also includes type declarations to ensure proper TypeScript support.

LANGUAGE: tsx
CODE:
import { defaultConfig } from '@tamagui/config/v4'
import { createTamagui } from 'tamagui'

export const config = createTamagui(defaultConfig)

type CustomConfig = typeof config

// ensure types work
declare module 'tamagui' {
  interface TamaguiCustomConfig extends CustomConfig {}
}

----------------------------------------

TITLE: Defining Variants for a Styled Component in Tamagui
DESCRIPTION: This snippet demonstrates how to define variants for a styled component in Tamagui, including boolean, size, and position variants.

LANGUAGE: tsx
CODE:
import { View, styled } from 'tamagui' // or '@tamagui/core'

export const Circle = styled(View, {
  borderRadius: 100_000_000,

  variants: {
    pin: {
      top: {
        position: 'absolute',
        top: 0,
      },
    },

    centered: {
      true: {
        alignItems: 'center',
        justifyContent: 'center',
      },
    },

    size: {
      '...size': (size, { tokens }) => {
        return {
          width: tokens.size[size] ?? size,
          height: tokens.size[size] ?? size,
        }
      },
    },
  } as const,
})

----------------------------------------

TITLE: Configuring Babel for Tamagui
DESCRIPTION: Babel configuration to include the Tamagui plugin and enable optimizations. Also includes setup for React Native Reanimated.

LANGUAGE: javascript
CODE:
module.exports = function (api) {
  api.cache(true)
  return {
    presets: ['babel-preset-expo'],
    plugins: [
      [
        '@tamagui/babel-plugin',
        {
          components: ['tamagui'],
          config: './tamagui.config.ts',
          logTimings: true,
          disableExtraction: process.env.NODE_ENV === 'development',
        },
      ],

      // NOTE: this is only necessary if you are using reanimated for animations
      'react-native-reanimated/plugin',
    ],
  }
}


----------------------------------------

TITLE: Defining Custom Themes in Tamagui
DESCRIPTION: Demonstrates how to create custom themes using the createThemes function from @tamagui/config/v4. It includes definitions for light and dark palettes, shadows, and various color themes.

LANGUAGE: tsx
CODE:
import * as Colors from '@tamagui/colors'
import { createThemes, defaultComponentThemes } from '@tamagui/config/v4'

const darkPalette = [
  '#050505',
  '#151515',
  '#191919',
  '#232323',
  '#282828',
  '#323232',
  '#424242',
  '#494949',
  '#545454',
  '#626262',
  '#a5a5a5',
  '#fff',
]

const lightPalette = [
  '#fff',
  '#f8f8f8',
  'hsl(0, 0%, 96.3%)',
  'hsl(0, 0%, 94.1%)',
  'hsl(0, 0%, 92.0%)',
  'hsl(0, 0%, 90.0%)',
  'hsl(0, 0%, 88.5%)',
  'hsl(0, 0%, 81.0%)',
  'hsl(0, 0%, 56.1%)',
  'hsl(0, 0%, 50.3%)',
  'hsl(0, 0%, 42.5%)',
  'hsl(0, 0%, 9.0%)',
]

const lightShadows = {
  shadow1: 'rgba(0,0,0,0.04)',
  shadow2: 'rgba(0,0,0,0.08)',
  shadow3: 'rgba(0,0,0,0.16)',
  shadow4: 'rgba(0,0,0,0.24)',
  shadow5: 'rgba(0,0,0,0.32)',
  shadow6: 'rgba(0,0,0,0.4)',
}

const darkShadows = {
  shadow1: 'rgba(0,0,0,0.2)',
  shadow2: 'rgba(0,0,0,0.3)',
  shadow3: 'rgba(0,0,0,0.4)',
  shadow4: 'rgba(0,0,0,0.5)',
  shadow5: 'rgba(0,0,0,0.6)',
  shadow6: 'rgba(0,0,0,0.7)',
}

const extraColors = {
  black1: darkPalette[0],
  black2: darkPalette[1],
  black3: darkPalette[2],
  black4: darkPalette[3],
  black5: darkPalette[4],
  black6: darkPalette[5],
  black7: darkPalette[6],
  black8: darkPalette[7],
  black9: darkPalette[8],
  black10: darkPalette[9],
  black11: darkPalette[10],
  black12: darkPalette[11],
  white1: lightPalette[0],
  white2: lightPalette[1],
  white3: lightPalette[2],
  white4: lightPalette[3],
  white5: lightPalette[4],
  white6: lightPalette[5],
  white7: lightPalette[6],
  white8: lightPalette[7],
  white9: lightPalette[8],
  white10: lightPalette[9],
  white11: lightPalette[10],
  white12: lightPalette[11],
}

const generatedThemes = createThemes({
  componentThemes: defaultComponentThemes,
  
  base: {
    palette: {
      dark: darkPalette,
      light: lightPalette,
    },

    // for values we don't want being inherited onto sub-themes
    extra: {
      light: {
        ...Colors.blue,
        ...Colors.green,
        ...Colors.red,
        ...Colors.yellow,
        ...lightShadows,
        ...extraColors,
        shadowColor: lightShadows.shadow1,
      },
      dark: {
        ...Colors.blueDark,
        ...Colors.greenDark,
        ...Colors.redDark,
        ...Colors.yellowDark,
        ...darkShadows,
        ...extraColors,
        shadowColor: darkShadows.shadow1,
      },
    },
  },

  // inverse accent theme
  accent: {
    palette: {
      dark: lightPalette,
      light: darkPalette,
    },
  },

  childrenThemes: {
    blue: {
      palette: {
        dark: Object.values(Colors.blueDark),
        light: Object.values(Colors.blue),
      },
    },
    red: {
      palette: {
        dark: Object.values(Colors.redDark),
        light: Object.values(Colors.red),
      },
    },
    yellow: {
      palette: {
        dark: Object.values(Colors.yellowDark),
        light: Object.values(Colors.yellow),
      },
    },
    green: {
      palette: {
        dark: Object.values(Colors.greenDark),
        light: Object.values(Colors.green),
      },
    },
  },
})

export type TamaguiThemes = typeof generatedThemes

/**
 * This is an optional production optimization: themes JS can get to 20Kb or more.
 * Tamagui has ~1Kb of logic to hydrate themes from CSS, so you can remove the JS.
 * So long as you server render your Tamagui CSS, this will save you bundle size:
 */
export const themes: TamaguiThemes =
  process.env.TAMAGUI_ENVIRONMENT === 'client' &&
  process.env.NODE_ENV === 'production'
    ? {}
    : (generatedThemes as any)

----------------------------------------

TITLE: Implementing Basic Select Component in Tamagui
DESCRIPTION: This snippet demonstrates the basic structure and usage of the Select component in Tamagui. It includes the main Select container, Trigger, Value, Content, and various sub-components for items and groups.

LANGUAGE: tsx
CODE:
import { Select } from 'tamagui' // or '@tamagui/select'

export default () => (
  <Select defaultValue="">
    <Select.Trigger>
      <Select.Value placeholder="Search..." />
    </Select.Trigger>
    <Select.Content>
      <Select.ScrollUpButton />
      <Select.Viewport>
        <Select.Group>
          <Select.Label />
          <Select.Item>
            <Select.ItemText />
          </Select.Item>
        </Select.Group>
      </Select.Viewport>
      <Select.ScrollDownButton />
    </Select.Content>
  </Select>
)

----------------------------------------

TITLE: Custom Button Component Implementation
DESCRIPTION: Advanced example showing how to create a customized Button component with custom frame and text styling, including type definitions.

LANGUAGE: tsx
CODE:
import { forwardRef } from 'react'
import {
  ButtonFrame,
  ButtonText,
  GetProps,
  ButtonProps as TamaguiButtonProps,
  styled,
  themeable,
  useButton,
} from 'tamagui'

const CustomButtonFrame = styled(ButtonFrame, {
  // ...
})

const CustomButtonText = styled(ButtonText, {
  // ...
})

// to capture the custom variant types you define
type CustomButtonFrameProps = GetProps<typeof CustomButtonFrame>
type CustomButtonTextProps = GetProps<typeof CustomButtonText>

export type CustomButtonProps = TamaguiButtonProps &
  CustomButtonFrameProps &
  CustomButtonTextProps

export const Button = CustomButtonFrame.styleable<CustomButtonProps>((propsIn, ref) => {
  const { props } = useButton(propsIn, { Text: CustomButtonText })
  return <CustomButtonFrame {...props} ref={ref} />
})

----------------------------------------

TITLE: Creating Styled Context for Compound Components
DESCRIPTION: Shows how to create a compound component system using createStyledContext for sharing variant props between related components.

LANGUAGE: tsx
CODE:
import { SizeTokens, View, Text, createStyledContext, styled, withStaticProperties } from '@tamagui/core'

export const ButtonContext = createStyledContext<{
  size: SizeTokens
}>({
  size: '$medium',
})

export const ButtonFrame = styled(View, {
  name: 'Button',
  context: ButtonContext,

  variants: {
    size: {
      '...size': (name, { tokens }) => {
        return {
          height: tokens.size[name],
          borderRadius: tokens.radius[name],
          gap: tokens.space[name].val * 0.2,
        }
      },
    },
  } as const,

  defaultVariants: {
    size: '$medium',
  },
})

----------------------------------------

TITLE: Basic Button Usage in Tamagui
DESCRIPTION: Simple example showing how to import and use the basic Button component from Tamagui.

LANGUAGE: tsx
CODE:
import { Button } from 'tamagui'

export default () => <Button>Lorem ipsum</Button>

----------------------------------------

TITLE: Next.js Configuration with Tamagui Plugin
DESCRIPTION: Setting up next.config.js with Tamagui plugin including optimizations

LANGUAGE: typescript
CODE:
const { withTamagui } = require('@tamagui/next-plugin')

module.exports = function (name, { defaultConfig }) {
  let config = {
    ...defaultConfig,
  }
  const tamaguiPlugin = withTamagui({
    config: './tamagui.config.ts',
    components: ['tamagui'],
  })
  return {
    ...config,
    ...tamaguiPlugin(config),
  }
}

----------------------------------------

TITLE: Basic Tamagui Component Usage
DESCRIPTION: Simple example showing basic usage of Tamagui core components without configuration

LANGUAGE: tsx
CODE:
import { View, Text, styled } from '@tamagui/core'

export default () => (
  <View width={200} height={200} backgroundColor="rgba(0,0,0,0.2)">
    <Text color="#f2f2f2" fontSize={24}>
      Tamagui can optimize this to div + span or View + Text on React Native.
    </Text>
  </View>
)

----------------------------------------

TITLE: Configuring Babel for Tamagui in React Native
DESCRIPTION: Babel configuration for React Native projects using Tamagui, including component paths and exclusions.

LANGUAGE: js
CODE:
export default {
  plugins: [
    [
      '@tamagui/babel-plugin',
      {
        exclude: /node_modules/,
        config: './tamagui.config.ts',
        components: ['@ourapp/components', 'tamagui']
      },
    ],
  ],
}

----------------------------------------

TITLE: Basic Dialog Component Structure
DESCRIPTION: Basic anatomy of the Dialog component showing the required structure and nested components.

LANGUAGE: typescript
CODE:
import { Dialog } from 'tamagui'

export default () => (
  <Dialog>
    <Dialog.Trigger />
    <Dialog.Portal>
      <Dialog.Overlay />
      <Dialog.Content>
        <Dialog.Title />
        <Dialog.Description />
        <Dialog.Close />
        {/* ... */}
      </Dialog.Content>
    </Dialog.Portal>
  </Dialog>
)

----------------------------------------

TITLE: Defining Boolean Variants in Tamagui
DESCRIPTION: This snippet demonstrates how to define boolean variants for a styled component in Tamagui.

LANGUAGE: tsx
CODE:
import { View, styled } from 'tamagui' // or '@tamagui/core'

export const MyView = styled(View, {
  variants: {
    selectable: {
      true: {
        userSelect: 'auto',
      },
      false: {
        userSelect: 'none',
      },
    },
  } as const,
})

----------------------------------------

TITLE: Installing Tamagui UI Components with Yarn
DESCRIPTION: Command to install all Tamagui UI components using Yarn package manager.

LANGUAGE: bash
CODE:
yarn add tamagui

----------------------------------------

TITLE: Demonstrating Tamagui Compiler Optimization in React Native
DESCRIPTION: This code snippet shows how the Tamagui compiler optimizes React Native code by flattening components, extracting styles, and converting dynamic styles into static CSS and media queries.

LANGUAGE: jsx
CODE:
<YStack
  padding={10}
  margin={10}
  hoverStyle={{ backgroundColor: '$red10' }}
  $gtSm={{ padding: 20 }}
>
  <Text color="$color" fontSize={20} fontWeight="600" $gtSm={{ fontSize: 30 }}>
    Hello world
  </Text>
</YStack>

LANGUAGE: jsx
CODE:
<div
  className="reset_c-dAqiOJ hover_c-dAqiOJ_0 gtSm_c-dAqiOJ_1"
  style={{ margin: 10 }}
>
  <p className="reset_c-fAawWi gtSm_c-fAawWi_0">Hello world</p>
</div>

----------------------------------------

TITLE: Loading Tamagui Fonts in Expo
DESCRIPTION: Example of loading Tamagui's Inter font in an Expo app using the useFonts hook.

LANGUAGE: typescript
CODE:
import { useFonts } from 'expo-font'

function App() {
  const [loaded] = useFonts({
    Inter: require('@tamagui/font-inter/otf/Inter-Medium.otf'),
    InterBold: require('@tamagui/font-inter/otf/Inter-Bold.otf'),
  })

  useEffect(() => {
    if (loaded) {
      // can hide splash screen here
    }
  }, [loaded])

  if (!loaded) {
    return null
  }

  return <MyApp />
}


----------------------------------------

TITLE: Generating Tamagui Theme Configuration
DESCRIPTION: Theme generation setup including light/dark mode palettes, shadows, and color variations. Shows how to create base themes and color variants.

LANGUAGE: javascript
CODE:
const darkPalette = [
  '#050505',
  '#151515',
  '#191919',
  '#232323',
  '#282828',
  '#323232',
  '#424242',
  '#494949',
  '#545454',
  '#626262',
  '#a5a5a5',
  '#fff',
]

const lightPalette = [
  '#fff',
  '#f2f2f2',
  'hsl(0, 0%, 93%)',
  'hsl(0, 0%, 91%)',
  'hsl(0, 0%, 88%)',
  'hsl(0, 0%, 85%)',
  'hsl(0, 0%, 82%)',
  'hsl(0, 0%, 76%)',
  'hsl(0, 0%, 56%)',
  'hsl(0, 0%, 50%)',
  'hsl(0, 0%, 42%)',
  'hsl(0, 0%, 9%)',
]

const lightShadows = {
  shadow1: 'rgba(0,0,0,0.04)',
  shadow2: 'rgba(0,0,0,0.08)',
  shadow3: 'rgba(0,0,0,0.16)',
  shadow4: 'rgba(0,0,0,0.24)',
  shadow5: 'rgba(0,0,0,0.32)',
  shadow6: 'rgba(0,0,0,0.4)',
}

const darkShadows = {
  shadow1: 'rgba(0,0,0,0.2)',
  shadow2: 'rgba(0,0,0,0.3)',
  shadow3: 'rgba(0,0,0,0.4)',
  shadow4: 'rgba(0,0,0,0.5)',
  shadow5: 'rgba(0,0,0,0.6)',
  shadow6: 'rgba(0,0,0,0.7)',
}

const blackColors = {
  black1: darkPalette[0],
  black2: darkPalette[1],
  black3: darkPalette[2],
  black4: darkPalette[3],
  black5: darkPalette[4],
  black6: darkPalette[5],
  black7: darkPalette[6],
  black8: darkPalette[7],
  black9: darkPalette[8],
  black10: darkPalette[9],
  black11: darkPalette[10],
  black12: darkPalette[11],
}

const whiteColors = {
  white1: lightPalette[0],
  white2: lightPalette[1],
  white3: lightPalette[2],
  white4: lightPalette[3],
  white5: lightPalette[4],
  white6: lightPalette[5],
  white7: lightPalette[6],
  white8: lightPalette[7],
  white9: lightPalette[8],
  white10: lightPalette[9],
  white11: lightPalette[10],
  white12: lightPalette[11],
}

const generatedThemes = createThemes({
  componentThemes: defaultComponentThemes,

  base: {
    palette: {
      dark: darkPalette,
      light: lightPalette,
    },

    extra: {
      light: {
        ...Colors.blue,
        ...Colors.green,
        ...Colors.red,
        ...Colors.yellow,
        ...lightShadows,
        ...blackColors,
        ...whiteColors,
        shadowColor: lightShadows.shadow1,
      },
      dark: {
        ...Colors.blueDark,
        ...Colors.greenDark,
        ...Colors.redDark,
        ...Colors.yellowDark,
        ...darkShadows,
        ...blackColors,
        ...whiteColors,
        shadowColor: darkShadows.shadow1,
      },
    },
  },

  accent: {
    palette: {
      dark: lightPalette,
      light: darkPalette,
    },
  },

  childrenThemes: {
    black: {
      palette: {
        dark: Object.values(blackColors),
        light: Object.values(blackColors),
      },
    },
    white: {
      palette: {
        dark: Object.values(whiteColors),
        light: Object.values(whiteColors),
      },
    },

    blue: {
      palette: {
        dark: Object.values(Colors.blueDark),
        light: Object.values(Colors.blue),
      },
    },
    red: {
      palette: {
        dark: Object.values(Colors.redDark),
        light: Object.values(Colors.red),
      },
    },
    yellow: {
      palette: {
        dark: Object.values(Colors.yellowDark),
        light: Object.values(Colors.yellow),
      },
    },
    green: {
      palette: {
        dark: Object.values(Colors.greenDark),
        light: Object.values(Colors.green),
      },
    },
  },
})

----------------------------------------

TITLE: Installing Tamagui Core and Config Packages
DESCRIPTION: Command to install both the Tamagui core and config packages using Yarn package manager.

LANGUAGE: bash
CODE:
yarn add @tamagui/core @tamagui/config

----------------------------------------

TITLE: Creating Basic Styled Component
DESCRIPTION: Shows how to create a basic styled component by extending a View component with custom styles.

LANGUAGE: tsx
CODE:
import { GetProps, View, styled } from '@tamagui/core'

export const RoundedSquare = styled(View, {
  borderRadius: 20,
})

// helper to get props for any TamaguiComponent
export type RoundedSquareProps = GetProps<typeof RoundedSquare>

----------------------------------------

TITLE: Importing and Using Sheet Component in React
DESCRIPTION: This snippet demonstrates the basic structure and usage of the Sheet component from Tamagui. It shows how to import and nest the various subcomponents of Sheet.

LANGUAGE: tsx
CODE:
import { Sheet } from 'tamagui' // or '@tamagui/sheet'

export default () => (
  <Sheet>
    <Sheet.Overlay />
    <Sheet.Handle />
    <Sheet.Frame>{/* ...inner contents */}</Sheet.Frame>
  </Sheet>
)

----------------------------------------

TITLE: Implementing Theme Support with Color Scheme
DESCRIPTION: Enhanced root layout configuration with theme support and color scheme integration.

LANGUAGE: tsx
CODE:
import { TamaguiProvider, Theme } from 'tamagui'
import { Slot } from 'one'
import { useColorScheme } from 'react-native'
import config from '../tamagui.config'

export default function Layout() {
  const colorScheme = useColorScheme()

  return (
    <TamaguiProvider config={config} defaultTheme={colorScheme}>
      <Theme name={colorScheme}>
        <Slot />
      </Theme>
    </TamaguiProvider>
  )
}

----------------------------------------

TITLE: Creating Tokens in Tamagui
DESCRIPTION: Demonstrates how to create tokens using the createTokens function in Tamagui. This example creates a size token for 'small'.

LANGUAGE: tsx
CODE:
const tokens = createTokens({
  size: {
    small: 10
  }
})

----------------------------------------

TITLE: Sized Button Implementation in Tamagui
DESCRIPTION: Demonstrates how to use the size prop with Button component. The size prop adjusts padding, border radius, font size and icon sizes simultaneously.

LANGUAGE: tsx
CODE:
import { Button } from 'tamagui'

export default () => <Button size="$6">Lorem ipsum</Button>

----------------------------------------

TITLE: Basic Popover Component Structure
DESCRIPTION: Demonstrates the complete anatomy of a Popover component including trigger, content, arrow, close button, and adaptive sheet functionality for small screens

LANGUAGE: tsx
CODE:
import { Popover } from 'tamagui' // or '@tamagui/popover'

export default () => (
  <Popover>
    <Popover.Trigger />

    <Popover.Content>
      <Popover.Arrow />
      <Popover.Close />
      {/* ScrollView is optional, can just put any contents inside if not scrollable */}
      <Popover.ScrollView>{/* ... */}</Popover.ScrollView>
      {/* ... */}
    </Popover.Content>

    {/* optionally change to sheet when small screen */}
    <Popover.Adapt when="sm">
      <Popover.Sheet>
        <Popover.Sheet.Overlay />
        <Popover.Sheet.Frame>
          <Popover.Sheet.ScrollView>
            <Popover.Adapt.Contents />
          </Popover.Sheet.ScrollView>
        </Popover.Sheet.Frame>
      </Popover.Sheet>
    </Popover.Adapt>
  </Popover>
)

----------------------------------------

TITLE: Using Variants with Pseudo-styles and Media Queries in Tamagui
DESCRIPTION: This snippet shows how to use variants with pseudo-styles and media queries in Tamagui.

LANGUAGE: tsx
CODE:
const SizedText = styled(Text, {
  variants: {
    size: {
      md: {
        fontSize: '$sm',

        $gtMd: {
          fontSize: '$md',
        },

        $gt2xl: {
          fontSize: '$lg',
        },
      },
    },
  } as const,
})

----------------------------------------

TITLE: Basic Theme Usage in Tamagui
DESCRIPTION: Demonstrates how to implement basic theme switching using the Theme component from Tamagui.

LANGUAGE: tsx
CODE:
import { Button, Theme } from 'tamagui' // or '@tamagui/core'

export default () => (
  <Theme name="dark">
    <Button>I'm a dark button</Button>
  </Theme>
)

----------------------------------------

TITLE: Basic Select Component Structure - Tamagui TSX
DESCRIPTION: Demonstrates the basic structure and anatomy of a Select component with its sub-components including trigger, content, viewport, and items.

LANGUAGE: tsx
CODE:
import { Select } from 'tamagui' // or '@tamagui/select'

export default () => (
  <Select defaultValue="">
    <Select.Trigger>
      <Select.Value placeholder="Search..." />
    </Select.Trigger>
    <Select.Content>
      <Select.ScrollUpButton />
      <Select.Viewport>
        <Select.Group>
          <Select.Label />
          <Select.Item>
            <Select.ItemText />
          </Select.Item>
        </Select.Group>
      </Select.Viewport>
      <Select.ScrollDownButton />
    </Select.Content>
  </Select>
)

----------------------------------------

TITLE: Basic Toast Implementation with Native Support
DESCRIPTION: Example showing basic Toast setup with ToastProvider, CurrentToast component, and usage example with a button trigger.

LANGUAGE: tsx
CODE:
import { Button } from 'tamagui' // or '@tamagui/button'
import { Toast, ToastProvider, useToast } from '@tamagui/toast'

export default () => (
  <ToastProvider native={['mobile']}>
    <CurrentToast />
    <MyPage />
    <ToastViewport />
  </ToastProvider>
)

const CurrentToast = () => {
  const { currentToast } = useToast()

  // only show the component if it's present and not handled by native toast
  if (!currentToast || currentToast.isHandledNatively) return null
  return (
    <Toast key={currentToast.id}>
      <Toast.Title>{currentToast.title}</Toast.Title>
      <Toast.Description>{currentToast.message}</Toast.Description>
    </Toast>
  )
}

const MyPage = () => {
  const { show } = useToast()

  return (
    <Button onPress={() => show('Done!', { message: 'Form submitted successfully.' })}>
      Show Toast
    </Button>
  )
}

----------------------------------------

TITLE: Creating a Custom Styled Component in Tamagui
DESCRIPTION: Demonstrates how to create a custom 'Circle' component using styled() from Tamagui. The component includes variants for positioning, centering, and sizing, showcasing advanced styling techniques.

LANGUAGE: tsx
CODE:
import { View, styled } from 'tamagui' // or '@tamagui/core'

export const Circle = styled(View, {
  borderRadius: 100_000_000,

  variants: {
    pin: {
      top: {
        position: 'absolute',
        top: 0,
      },
    },

    centered: {
      true: {
        alignItems: 'center',
        justifyContent: 'center',
      },
    },

    size: {
      '...size': (size, { tokens }) => {
        return {
          width: tokens.size[size] ?? size,
          height: tokens.size[size] ?? size,
        }
      },
    },
  } as const,
})

----------------------------------------

TITLE: Accessing Theme Values with useTheme in Tamagui
DESCRIPTION: Demonstrates basic usage of the useTheme hook to access theme values and apply them to a Tamagui component.

LANGUAGE: tsx
CODE:
import { YStack, useTheme } from 'tamagui'

const App = () => {
  const theme = useTheme()

  return <YStack backgroundColor={theme.color1.val} />
}

----------------------------------------

TITLE: Inline Styling with Shorthands in Tamagui
DESCRIPTION: Shows how to use inline styles with shorthands in Tamagui for efficient styling. The View uses 'mx' for horizontal margin and 'scale' for scaling, while Text uses 'c' for color.

LANGUAGE: tsx
CODE:
import { View, Text } from 'tamagui' // or '@tamagui/core'

export default () => (
  <View mx="$sm" scale={1.2}>
    <Text c="$color">Hello</Text>
  </View>
)

----------------------------------------

TITLE: Implementing a Basic Switch in React with Tamagui
DESCRIPTION: This snippet demonstrates how to import and use the Switch component from Tamagui. It shows a basic implementation with size and animation properties.

LANGUAGE: tsx
CODE:
import { Switch } from 'tamagui'

export default () => (
  <Switch size="$4">
    <Switch.Thumb animation="bouncy" />
  </Switch>
)

----------------------------------------

TITLE: Basic Avatar Implementation - TypeScript/React
DESCRIPTION: Example showing how to implement a circular Avatar component with an image source and fallback state. Demonstrates basic usage with size prop and circular styling.

LANGUAGE: tsx
CODE:
import { Avatar } from 'tamagui'

export default () => (
  <Avatar circular size="$6">
    <Avatar.Image src="http://picsum.photos/200/300" />
    <Avatar.Fallback bc="red" />
  </Avatar>
)

----------------------------------------

TITLE: Basic Usage of Text Components in Tamagui
DESCRIPTION: Demonstrates how to use Text, SizableText, and Paragraph components in a React component.

LANGUAGE: tsx
CODE:
export default () => (
  <>
    <Text>Text</Text>
    <SizableText>Sizable Text</SizableText>
    <Paragraph>Paragraph</Paragraph>
  </>
)

----------------------------------------

TITLE: Basic Usage of Text Components in Tamagui
DESCRIPTION: Demonstrates how to use Text, SizableText, and Paragraph components in a React component.

LANGUAGE: tsx
CODE:
export default () => (
  <>
    <Text>Text</Text>
    <SizableText>Sizable Text</SizableText>
    <Paragraph>Paragraph</Paragraph>
  </>
)

----------------------------------------

TITLE: Advanced Stack Configuration with Styles
DESCRIPTION: Shows comprehensive usage of XStack and YStack with various style properties, hover states, and media queries.

LANGUAGE: tsx
CODE:
import { Text, XStack, YStack } from 'tamagui'

export default () => (
  <XStack
    flex={1}
    flexWrap="wrap"
    backgroundColor="#fff"
    hoverStyle={{
      backgroundColor: 'red',
    }}
    // media query
    $gtSm={{
      flexDirection: 'column',
      flexWrap: 'nowrap',
    }}
  >
    <YStack gap="$3">
      <Text>Hello</Text>
      <Text>World</Text>
    </YStack>
  </XStack>
)

----------------------------------------

TITLE: Basic Usage of Tamagui Slider Component
DESCRIPTION: Example of how to use the Slider component with default settings. It demonstrates setting size, width, default value, maximum value, and step.

LANGUAGE: tsx
CODE:
import { Slider } from 'tamagui'

export default () => (
  <Slider size="$4" width={200} defaultValue={[50]} max={100} step={1}>
    <Slider.Track>
      <Slider.TrackActive />
    </Slider.Track>
    <Slider.Thumb circular index={0} />
  </Slider>
)

----------------------------------------

TITLE: Using useMedia Hook in Tamagui Components
DESCRIPTION: This snippet shows how to use the useMedia hook for responsive design in Tamagui components. It demonstrates conditional styling and prop spreading based on media queries.

LANGUAGE: tsx
CODE:
import { Button, XStack, useMedia } from 'tamagui' // note: design system can use @tamagui/core

export default () => {
  const media = useMedia()

  return (
    <XStack
      // can be used as a ternary
      backgroundColor={media.sm ? 'red' : 'blue'}
      // can be used as a spread
      {...(media.lg && {
        x: 10,
        y: 10,
      })}
    >
      <Button>Hello</Button>
    </XStack>
  )
}

----------------------------------------

TITLE: Basic Button Usage in Tamagui
DESCRIPTION: Simple example showing how to import and use the Button component from Tamagui.

LANGUAGE: tsx
CODE:
import { Button } from 'tamagui'

export default () => <Button>Lorem ipsum</Button>

----------------------------------------

TITLE: Configuring Package.json Scripts for Expo
DESCRIPTION: Example of package.json scripts configuration for running Expo projects with Tamagui.

LANGUAGE: json
CODE:
{
  "scripts": {
    "start-native": "expo start -c",
    "start-web": "expo start -c",
    "android": "yarn expo run:android",
    "ios": "yarn expo run:ios",
    "web": "expo start --web"
  }
}

----------------------------------------

TITLE: Using Switch Component in React with Tamagui
DESCRIPTION: Example of how to import and use the Switch component in a React application with Tamagui. The Switch is rendered with a custom size and an animated thumb.

LANGUAGE: tsx
CODE:
import { Switch } from 'tamagui' // or '@tamagui/switch'

export default () => (
  <Switch size="$4">
    <Switch.Thumb animation="bouncy" />
  </Switch>
)

----------------------------------------

TITLE: Advanced Variant Implementation
DESCRIPTION: Demonstrates complex variant patterns including string values, boolean flags, and functional size tokens.

LANGUAGE: tsx
CODE:
import { View, styled } from '@tamagui/core'

export const RoundedSquare = styled(View, {
  borderRadius: 20,

  variants: {
    pin: {
      top: {
        position: 'absolute',
        top: 0,
      },
    },

    centered: {
      true: {
        alignItems: 'center',
        justifyContent: 'center',
      },
      false: {
        alignItems: 'flex-start'
      }
    },

    size: {
      '...size': (size, { tokens }) => {
        return {
          width: tokens.size[size] ?? size,
          height: tokens.size[size] ?? size,
        }
      },
    },
  } as const,
})

----------------------------------------

TITLE: Initializing TextArea Component in Tamagui (TSX)
DESCRIPTION: Shows how to import and use the TextArea component from Tamagui for multi-line inputs. Like Input, TextArea also accepts size and style properties directly.

LANGUAGE: tsx
CODE:
import { TextArea } from 'tamagui'

export const App = () => (
  // Accepts size and style properties directly
  <TextArea size="$4" borderWidth={2} />
)

----------------------------------------

TITLE: Basic Accordion Component Structure in React
DESCRIPTION: Demonstrates the basic structure of an Accordion component with its subcomponents in a React application using Tamagui.

LANGUAGE: jsx
CODE:
import { Accordion } from 'tamagui';

export default () => (
  <Accordion>
    <Accordion.Item>
      <Accordion.Header>
        <Accordion.Trigger />
      </Accordion.Header>
      <Accordion.Content />
    </Accordion.Item>
  </Accordion>
)

----------------------------------------

TITLE: Styleable Higher Order Component
DESCRIPTION: Demonstrates how to use the styleable wrapper for higher-order components that need to be styled themselves.

LANGUAGE: tsx
CODE:
const StyledText = styled(Text)

const HigherOrderStyledText = StyledText.styleable((props, ref) => (
  <StyledText ref={ref} {...props} />
))

const StyledHigherOrderStyledText = styled(HigherOrderStyledText, {
  variants: {
    // variants now merge correctly
  },
})

----------------------------------------

TITLE: Creating Custom Circle Component with Tamagui
DESCRIPTION: Example of creating a custom Circle component using Tamagui's styled API with size variants and proper type exports.

LANGUAGE: tsx
CODE:
import { GetProps, YStack, styled } from 'tamagui' // or '@tamagui/core' if extending just that

export const Circle = styled(YStack, {
  alignItems: 'center',
  justifyContent: 'center',
  borderRadius: 100_000_000,
  overflow: 'hidden',

  variants: {
    size: {
      '...size': (size, { tokens }) => {
        return {
          width: tokens.size[size] ?? size,
          height: tokens.size[size] ?? size,
        }
      },
    },
  },
})

export type CircleProps = GetProps<typeof Circle>

----------------------------------------

TITLE: Customizing ListItem Component in Tamagui
DESCRIPTION: Advanced example of customizing the ListItem component, including custom styling for frame, title, subtitle, and text.

LANGUAGE: tsx
CODE:
import { forwardRef } from 'react'
import {
  ListItemFrame,
  ListItemText,
  ListItemTitle,
  ListItemSubtitle,
  styled,
  themeable,
  useListItem,
} from 'tamagui'

const CustomListItemFrame = styled(ListItemFrame, {
  backgroundColor: 'orange', // or "$color", etc.
})

const CustomListItemTitle = styled(ListItemTitle, {
  color: 'blue',
})

const CustomListItemSubtitle = styled(ListItemSubtitle, {
  color: 'pink',
})

const CustomListItemText = styled(ListItemText, {
  color: 'red',
})

export const ListItem = CustomListItemFrame.styleable((propsIn, ref) => {
  const { props } = useListItem(propsIn, {
    Title: CustomListItemTitle,
    Text: CustomListItemText,
    Subtitle: CustomListItemSubtitle,
  })

  return <CustomListItemFrame {...props} ref={ref} />
})

----------------------------------------

TITLE: Basic Usage of ListItem Component in React
DESCRIPTION: Simple example of using the ListItem component in a React application.

LANGUAGE: tsx
CODE:
import { ListItem } from 'tamagui'

export default () => <ListItem>Lorem ipsum</ListItem>

----------------------------------------

TITLE: Using Styled Checkbox in Tamagui
DESCRIPTION: Example of how to use the styled Checkbox component in Tamagui, including importing necessary dependencies and rendering the component with an indicator.

LANGUAGE: typescript
CODE:
import { Check } from '@tamagui/lucide-icons'
import { Checkbox } from 'tamagui'

export default () => (
  <Checkbox size="$4">
    <Checkbox.Indicator>
      <Check />
    </Checkbox.Indicator>
  </Checkbox>
)

----------------------------------------

TITLE: Using a Styled Component with Variants in Tamagui
DESCRIPTION: This snippet shows how to use a styled component with defined variants in Tamagui.

LANGUAGE: tsx
CODE:
<Circle pin="top" centered size="$lg" />

----------------------------------------

TITLE: Configuring Webpack for Tamagui
DESCRIPTION: Webpack configuration for Tamagui loader, specifying config file and component paths.

LANGUAGE: js
CODE:
{
  loader: 'tamagui-loader',
  options: {
    config: './tamagui.config.ts',
    components: ['@ourapp/components', 'tamagui'],
  },
}

----------------------------------------

TITLE: Minimal Theme Creation with createThemeBuilder in Tamagui
DESCRIPTION: This snippet showcases a minimal example of using createThemeBuilder to generate light, dark, light_subtle, and dark_subtle themes. It demonstrates the use of palettes, templates, and themes concepts.

LANGUAGE: tsx
CODE:
import { createThemeBuilder } from '@tamagui/theme-builder'

const themesBuilder = createThemeBuilder()
  .addPalettes({
    dark: ['#000', '#111', '#222', '#999', '#ccc', '#eee', '#fff'],
    light: ['#fff', '#eee', '#ccc', '#999', '#222', '#111', '#000'],
  })
  .addTemplates({
    base: {
      background: 0,
      color: -0,
    },
    subtle: {
      background: 1,
      color: -1,
    }
  })
  .addThemes({
    light: {
      template: 'base',
      palette: 'light',
    },
    dark: {
      template: 'base',
      palette: 'dark',
    },
  })
  .addChildThemes({
    subtle: {
      template: 'subtle',
    },
  })

export const themes = themesBuilder.build()

----------------------------------------

TITLE: Basic Stack Layout Example in Tamagui
DESCRIPTION: Demonstrates basic usage of XStack and YStack components with gap spacing between elements.

LANGUAGE: tsx
CODE:
import { XStack, YStack } from 'tamagui'

export default () => (
  <XStack gap="$2">
    <YStack />
    <YStack />
    <YStack />
  </XStack>
)

----------------------------------------

TITLE: Basic Group Usage with Items
DESCRIPTION: Example of using XGroup with Group.Item components to create a horizontal button group with automatic spacing and border handling.

LANGUAGE: tsx
CODE:
import { Button, XGroup } from 'tamagui'

// usage with Item:
export default () => (
  <XGroup>
    <XGroup.Item>
      <Button>First</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Second</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Third</Button>
    </XGroup.Item>
  </XGroup>
)

----------------------------------------

TITLE: Using Default Variants in Tamagui
DESCRIPTION: This snippet demonstrates how to set default values for variants in Tamagui using the defaultVariants option.

LANGUAGE: tsx
CODE:
const Square = styled(View, {
  variants: {
    size: {
      '...size': (size, { tokens }) => {
        return {
          width: tokens.size[size] ?? size,
          height: tokens.size[size] ?? size,
        }
      },
    },
  } as const,

  defaultVariants: {
    size: '$10',
  },
})

----------------------------------------

TITLE: Using Sub-themes in Tamagui
DESCRIPTION: Demonstrates how to implement nested themes and sub-theming functionality using the Theme component.

LANGUAGE: tsx
CODE:
import { Button, Theme } from 'tamagui'

export default () => {
  return (
    <Theme name="dark">
      <Button>I have the theme dark</Button>
      <Theme name="pink">
        <Button>I have the theme pink-dark</Button>
      </Theme>
    </Theme>
  )
}

----------------------------------------

TITLE: Basic Toast Usage in React Native with Tamagui
DESCRIPTION: Example of how to set up and use the Toast component in a React Native application using Tamagui. It demonstrates the ToastProvider, CurrentToast component, and how to trigger a toast.

LANGUAGE: tsx
CODE:
import { Toast, ToastProvider, useToastController, useToastState } from '@tamagui/toast'
import { Button } from 'tamagui' // or '@tamagui/button'

export default () => (
  <ToastProvider native={['mobile']}>
    <CurrentToast />
    <MyPage />
    <ToastViewport />
  </ToastProvider>
)

const CurrentToast = () => {
  const toast = useToastState()

  // only show the component if it's present and not handled by native toast
  if (!toast || toast.isHandledNatively) {
    return null
  }

  return (
    <Toast key={toast.id}>
      <Toast.Title>{toast.title}</Toast.Title>
      <Toast.Description>{toast.message}</Toast.Description>
    </Toast>
  )
}

const MyPage = () => {
  const { show } = useToastController()

  return (
    <Button onPress={() => show('Done!', { message: 'Form submitted successfully.' })}>
      Show Toast
    </Button>
  )
}

----------------------------------------

TITLE: Popover Component Structure
DESCRIPTION: Basic anatomy of a Popover component showing all available sub-components and adaptive layout options.

LANGUAGE: tsx
CODE:
import { Popover, Adapt } from 'tamagui' // or '@tamagui/popover'

export default () => (
  <Popover>
    <Popover.Trigger />

    <Popover.Content>
      <Popover.Arrow />
      <Popover.Close />
      <Popover.ScrollView>{/* ... */}</Popover.ScrollView>
      {/* ... */}
    </Popover.Content>

    <Adapt when="sm">
      <Popover.Sheet>
        <Popover.Sheet.Overlay />
        <Popover.Sheet.Frame>
          <Popover.Sheet.ScrollView>
            <Adapt.Contents />
          </Popover.Sheet.ScrollView>
        </Popover.Sheet.Frame>
      </Popover.Sheet>
    </Adapt>
  </Popover>
)

----------------------------------------

TITLE: Installing Tamagui Slider Package
DESCRIPTION: Command to install the Tamagui slider package independently from the main Tamagui package.

LANGUAGE: bash
CODE:
npm install @tamagui/slider

----------------------------------------

TITLE: Implementing ScrollView with Tamagui Components
DESCRIPTION: Demonstrates basic usage of the ScrollView component with Tamagui's YStack and ListItem components. The ScrollView wraps content in a scrollable container while maintaining Tamagui's styling capabilities.

LANGUAGE: tsx
CODE:
import { ScrollView, YStack, ListItem } from 'tamagui'

export default () => (
  <ScrollView>
    <YStack>
      <ListItem>1</ListItem>
      <ListItem>2</ListItem>
      <ListItem>3</ListItem>
      <ListItem>4</ListItem>
    </YStack>
  </ScrollView>
)

----------------------------------------

TITLE: Using Styled RadioGroup in Tamagui
DESCRIPTION: Example of how to use the styled RadioGroup component in a React component.

LANGUAGE: tsx
CODE:
import { RadioGroup } from 'tamagui'

export default () => (
  <RadioGroup value="foo" gap="$2">
    <RadioGroup.Item value="foo" id="foo-radio-item">
      <RadioGroup.Indicator />
    </RadioGroup.Item>
    <RadioGroup.Item value="bar" id="bar-radio-item">
      <RadioGroup.Indicator />
    </RadioGroup.Item>
  </RadioGroup>
)

----------------------------------------

TITLE: Implementing PortalProvider in React Native App
DESCRIPTION: Example of how to wrap a React Native app with PortalProvider for Sheet component functionality.

LANGUAGE: tsx
CODE:
import { PortalProvider } from '@tamagui/portal'
import YourApp from './components/YourApp'

function App() {
  return (
    <PortalProvider shouldAddRootHost>
      <YourApp />
    </PortalProvider>
  )
}

export default App

----------------------------------------

TITLE: Installing Tamagui Image Component
DESCRIPTION: Command to install the @tamagui/image package independently if not using the full Tamagui package.

LANGUAGE: bash
CODE:
npm install @tamagui/image

----------------------------------------

TITLE: Rendering Spinner Component in Tamagui (TSX)
DESCRIPTION: This snippet demonstrates how to import and use the Spinner component from Tamagui. It shows rendering a large green spinner.

LANGUAGE: tsx
CODE:
import { Button, Spinner } from 'tamagui'

export default () => <Spinner size="large" color="$green10" />

----------------------------------------

TITLE: Using Unspaced Component in Tamagui with TSX
DESCRIPTION: Demonstrates how to use the Unspaced component to prevent spacing for specific children inside a View component with space prop. The example shows positioning elements with and without spacing, including an absolutely positioned text element wrapped in Unspaced.

LANGUAGE: tsx
CODE:
import { Text, Unspaced, View } from '@tamagui/core'

export default () => (
  <View position="relative" space>
    <View width={20} height={20} />
    {/* space */}
    <View width={20} height={20} />
    {/* no */}
    <Unspaced>
      <Text position="absolute">Some absolute positioned text</Text>
    </Unspaced>
  </View>
)

----------------------------------------

TITLE: Checking Tamagui Components and Elements
DESCRIPTION: The isTamaguiComponent and isTamaguiElement functions check if a given component or element is a Tamagui component or element, respectively. They can optionally verify a specific component name.

LANGUAGE: tsx
CODE:
type isTamaguiComponent (component: any; name?: string) => boolean

LANGUAGE: tsx
CODE:
type isTamaguiElement (child: any; name?: string) => boolean

----------------------------------------

TITLE: Basic Toast Component Structure in Tamagui
DESCRIPTION: Demonstrates the basic structure and hierarchy of the Toast component and its sub-components.

LANGUAGE: tsx
CODE:
<ToastProvider>
  <Toast>
    <Toast.Title />
    <Toast.Description />
    <Toast.Action />
    <Toast.Close />
  </Toast>

  <ToastViewport />
</ToastProvider>

----------------------------------------

TITLE: Installing Dialog Component
DESCRIPTION: Commands to install the Dialog component and its portal dependency.

LANGUAGE: bash
CODE:
npm install @tamagui/dialog
npm install @tamagui/portal

----------------------------------------

TITLE: Basic Group Usage with Items - Tamagui TSX
DESCRIPTION: Example showing how to use XGroup with Group.Item components to create a horizontal group of buttons with automatic spacing and borders.

LANGUAGE: tsx
CODE:
import { Button, XGroup } from 'tamagui'

// usage with Item:
export default () => (
  <XGroup>
    <XGroup.Item>
      <Button>First</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Second</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Third</Button>
    </XGroup.Item>
  </XGroup>
)

----------------------------------------

TITLE: Installing Lucide Icons Dependencies
DESCRIPTION: Commands to install the required packages for using Lucide Icons with Tamagui.

LANGUAGE: sh
CODE:
yarn add react-native-svg @tamagui/lucide-icons

----------------------------------------

TITLE: Theme Object Structure in Tamagui
DESCRIPTION: Shows the structure of the theme object returned by useTheme, which includes Variable objects for each theme property.

LANGUAGE: tsx
CODE:
{
  background: {
    val: '#000',
    variable: 'var(--background)',
    name: 'background',
    isVar: true,
  },
  color: {
    val: '#fff',
    variable: 'var(--color)',
    name: 'color',
    isVar: true,
  },
}

----------------------------------------

TITLE: Using AlertDialog in Native Modals with PortalProvider
DESCRIPTION: Example of how to use AlertDialog inside native modals by wrapping the screen component with PortalProvider.

LANGUAGE: tsx
CODE:
import { PortalProvider } from 'tamagui'

// this component used in react-navigation/expo-router with `presentation: "modal"`
export function Page() {
  return (
    <PortalProvider>
      {/* rest of your page, including the Dialog... */}
    </PortalProvider>
  )
}

----------------------------------------

TITLE: Basic Sheet Component Structure in React
DESCRIPTION: Demonstrates the basic structure and usage of the Sheet component in a React application using Tamagui.

LANGUAGE: tsx
CODE:
import { Sheet } from 'tamagui' // or '@tamagui/sheet'

export default () => (
  <Sheet>
    <Sheet.Overlay />
    <Sheet.Handle />
    <Sheet.Frame>{/* ...inner contents */}</Sheet.Frame>
  </Sheet>
)

----------------------------------------

TITLE: Sizing Button in Tamagui
DESCRIPTION: Shows how to use the size prop to adjust the button's size based on theme values or arbitrary numbers.

LANGUAGE: tsx
CODE:
import { Button } from 'tamagui'

export default () => <Button size="$6">Lorem ipsum</Button>

----------------------------------------

TITLE: Optimizing Theme Value Access in Tamagui
DESCRIPTION: Demonstrates how to use the .get() helper function for optimal performance when accessing theme values, especially on web platforms.

LANGUAGE: tsx
CODE:
import { Stack, useTheme } from '@tamagui/core'
import { SomeExternalComponent } from 'some-external-component'

const App = () => {
  const theme = useTheme()

  // on the web this is something like var(--background) and will avoid re-renders
  // on native it will be something like #fff and will re-render
  const background = theme.background.get()

  // if you needed to access it in a way that always returns the raw value
  const backgroundValue = theme.background.val

  return (
    <SomeExternalComponent
      style={{
        backgroundColor: background,
      }}
    />
  )
}

----------------------------------------

TITLE: Multiple Toast Implementation
DESCRIPTION: Demonstrates how to handle multiple toasts using array mapping and state management.

LANGUAGE: tsx
CODE:
export default () => {
  const [savedCount, setSavedCount] = React.useState(0)

  return (
    <YStack ai="center">
      <Button
        onPress={() => {
          setSavedCount((old) => old + 1)
        }}
      >
        Show toast
      </Button>
      {[...Array(savedCount)].map((_, index) => (
        <Toast
          key={index}
          animation="100ms"
          enterStyle={{ x: -20, opacity: 0 }}
          exitStyle={{ x: -20, opacity: 0 }}
          opacity={1}
          x={0}
        >
          <Toast.Title>Subscribed!</Toast.Title>
          <Toast.Description>We'll be in touch.</Toast.Description>
        </Toast>
      ))}
    </YStack>
  )

----------------------------------------

TITLE: Implementing Multiple Toasts with Barebone API in React
DESCRIPTION: This snippet demonstrates how to implement multiple toasts using the barebone API, including state management for multiple toasts.

LANGUAGE: tsx
CODE:
export default () => {
  const [savedCount, setSavedCount] = React.useState(0)

  return (
    <YStack ai="center">
      <Button
        onPress={() => {
          setSavedCount((old) => old + 1)
        }}
      >
        Show toast
      </Button>
      {[...Array(savedCount)].map((_, index) => (
        <Toast
          key={index}
          animation="100ms"
          enterStyle={{ x: -20, opacity: 0 }}
          exitStyle={{ x: -20, opacity: 0 }}
          opacity={1}
          x={0}
        >
          <Toast.Title>Subscribed!</Toast.Title>
          <Toast.Description>We'll be in touch.</Toast.Description>
        </Toast>
      ))}
    </YStack>
  )
}

----------------------------------------

TITLE: Sized Button Implementation in Tamagui
DESCRIPTION: Example demonstrating how to use the size prop with Button component to adjust padding, border radius, font size and icon sizes.

LANGUAGE: tsx
CODE:
import { Button } from 'tamagui'

export default () => <Button size="$6">Lorem ipsum</Button>

----------------------------------------

TITLE: Accessing Theme Values Outside of Styling in Tamagui
DESCRIPTION: Shows how to use useTheme for accessing theme values at runtime, including optimization techniques to avoid unnecessary re-renders.

LANGUAGE: tsx
CODE:
import { theme, View } from '@tamagui/core'

export default () => {
  const theme = useTheme()

  // access the value
  console.log(theme.bg.val)

  return (
    <View backgroundColor={theme.color1} />
  )
}

----------------------------------------

TITLE: Basic Theme Creation with createThemes in Tamagui
DESCRIPTION: This snippet demonstrates the simplest way to create themes using the createThemes function from @tamagui/theme-builder. It generates light and dark themes based on a basic palette definition.

LANGUAGE: tsx
CODE:
import { createThemes } from '@tamagui/theme-builder'

export const themes = createThemes({
  base: {
    palette: {
      dark: ['#000', '#fff'],
      light: ['#fff', '#000'],
    }
  },
})

----------------------------------------

TITLE: Positioning Toast Viewport in Tamagui
DESCRIPTION: Examples of positioning the ToastViewport component for different layouts.

LANGUAGE: tsx
CODE:
<ToastViewport flexDirection="column-reverse" top={0} right={0} />

LANGUAGE: tsx
CODE:
<ToastViewport flexDirection="column" bottom={0} left={0} right={0} />

----------------------------------------

TITLE: Creating Custom Switch Using createSwitch in Tamagui
DESCRIPTION: Example of creating a fully custom switch using the createSwitch export, defining custom Frame and Thumb components with checked variants.

LANGUAGE: tsx
CODE:
import { Stack, styled } from '@tamagui/core'
import { createSwitch } from '@tamagui/switch'

const Frame = styled(Stack, {
  variants: {
    checked: {
      true: {
        backgroundColor: 'yellow'
      },
      false: {
        backgroundColor: 'green',
      },
    },
  } as const,
})

const Thumb = styled(Stack, {
  variants: {
    checked: {
      true: {
        opacity: 1,
      },
      false: {
        opacity: 0.5,
      },
    },
  } as const,
})

export const Switch = createSwitch({
  Frame,
  Thumb,
})

----------------------------------------

TITLE: Importing and Using Sheet Component in React
DESCRIPTION: This snippet demonstrates the basic structure and usage of the Sheet component in a React application. It shows how to import the component and its subcomponents, and how to structure them in a typical usage scenario.

LANGUAGE: tsx
CODE:
import { Sheet } from 'tamagui' // or '@tamagui/sheet'

export default () => (
  <Sheet>
    <Sheet.Overlay />
    <Sheet.Handle />
    <Sheet.Frame>
      {/* ...inner contents */}
    </Sheet.Frame>
  </Sheet>
)

----------------------------------------

TITLE: Using Spread Variants in Tamagui
DESCRIPTION: This snippet demonstrates how to use spread variants in Tamagui to automatically create variants based on token categories.

LANGUAGE: tsx
CODE:
const MyButton = styled(View, {
  variants: {
    pad: {
      '...size': (val, { tokens }) => ({
        padding: tokens.size[val]
      }),
    }
  } as const
})

// now you can
<MyButton pad="$lg" />

----------------------------------------

TITLE: Implementing Multi-line TextArea Component
DESCRIPTION: Example demonstrating the implementation of a multi-line text input field using Tamagui's TextArea component with custom styling.

LANGUAGE: tsx
CODE:
import { TextArea } from 'tamagui'

export const App = () => (
  // Accepts size and style properties directly
  <TextArea gap="$4" borderWidth={2} />
)

----------------------------------------

TITLE: Basic Sheet Component Structure in Tamagui
DESCRIPTION: Demonstrates the basic structure and anatomy of a Sheet component in Tamagui.

LANGUAGE: tsx
CODE:
import { Sheet } from 'tamagui' // or '@tamagui/sheet'

export default () => (
  <Sheet>
    <Sheet.Overlay />
    <Sheet.Handle />
    <Sheet.Frame>{/* ...inner contents */}</Sheet.Frame>
  </Sheet>
)

----------------------------------------

TITLE: Implementing Basic Sheet Structure in Tamagui
DESCRIPTION: Demonstrates the basic structure of a Sheet component with its subcomponents: Overlay, Handle, and Frame.

LANGUAGE: tsx
CODE:
import { Sheet } from 'tamagui' // or '@tamagui/sheet'

export default () => (
  <Sheet>
    <Sheet.Overlay />
    <Sheet.Handle />
    <Sheet.Frame>{/* ...inner contents */}</Sheet.Frame>
  </Sheet>
)

----------------------------------------

TITLE: Using Extra Properties in Functional Variants in Tamagui
DESCRIPTION: This snippet shows how to use extra properties passed to functional variants in Tamagui, such as tokens and font information.

LANGUAGE: tsx
CODE:
const SizableText = styled(Text, {
  variants: {
    size: {
      '...size': (size, { tokens, font }) => {
        return {
          fontSize: font?.size,
          lineHeight: font?.lineHeight,
          height: tokens.size[size] ?? size,
        }
      },
    },
  } as const,
})

----------------------------------------

TITLE: Installing Headless RadioGroup in Tamagui
DESCRIPTION: Command to install the headless RadioGroup component, which has no dependency on @tamagui/core.

LANGUAGE: bash
CODE:
npm install @tamagui/radio-headless

----------------------------------------

TITLE: Basic Toast Component Structure
DESCRIPTION: Shows the basic anatomy of the Toast component with all its subcomponents.

LANGUAGE: tsx
CODE:
<ToastProvider>
  <Toast>
    <Toast.Title />
    <Toast.Description />
    <Toast.Action />
    <Toast.Close />
  </Toast>

  <ToastViewport />
</ToastProvider>

----------------------------------------

TITLE: Running One App in Development Mode
DESCRIPTION: Command to start the One app in development mode using Yarn.

LANGUAGE: bash
CODE:
yarn dev

----------------------------------------

TITLE: Using Dynamic Variants in Tamagui
DESCRIPTION: This snippet shows how to use dynamic variants in Tamagui for more complex types or shorter syntax.

LANGUAGE: tsx
CODE:
import { View, styled } from 'tamagui' // or '@tamagui/core'

export const MyView = styled(View, {
  variants: {
    doubleMargin: (val: number) => ({
      margin: val * 2,
    }),
  } as const,
})

----------------------------------------

TITLE: Tamagui Group Styling Example
DESCRIPTION: Demonstrates group-based styling in Tamagui, allowing components to be styled based on parent group context.

LANGUAGE: tsx
CODE:
<View group="card">
  <Text>Outer</Text>
  <View group>
    <Text $group-card-hover={{ color: 'blue' }}>Inner</Text>
    <Text $group-hover={{ color: 'green' }}>Sibling</Text>
  </View>
</View>

----------------------------------------

TITLE: Simple Group Component Usage - TSX
DESCRIPTION: Simplified example showing Group component usage without Group.Item wrappers, where spacing is applied to direct children.

LANGUAGE: tsx
CODE:
import { Button, XGroup } from 'tamagui'

// usage without Item:
export default () => (
  <XGroup>
    <Button>First</Button>
    <Button>Second</Button>
    <Button>Third</Button>
  </XGroup>
)

----------------------------------------

TITLE: Basic Usage of Form Component in Tamagui
DESCRIPTION: Example of how to import and use the Form component in a React component, including the Form.Trigger subcomponent.

LANGUAGE: tsx
CODE:
import { Form } from 'tamagui' // or '@tamagui/form'

export default () => (
  <Form>
    {/* ... */}
    <Form.Trigger asChild>
      <Button />
    </Form.Trigger>
  </Form>
)

----------------------------------------

TITLE: Accessing Tokens using getTokens in Tamagui
DESCRIPTION: Shows how to access tokens using the getTokens function. This can be done with or without the '$' prefix.

LANGUAGE: tsx
CODE:
import { getTokens } from '@tamagui/core'

getTokens().size.small

LANGUAGE: tsx
CODE:
getTokens().size['$small']

----------------------------------------

TITLE: Installing Checkbox Component in Tamagui
DESCRIPTION: Command to install the Checkbox component independently from Tamagui.

LANGUAGE: bash
CODE:
npm install @tamagui/checkbox

----------------------------------------

TITLE: Using Debug Prop on Tamagui Button in TSX
DESCRIPTION: Demonstrates how to use the debug prop on a Tamagui Button component to output detailed information during runtime.

LANGUAGE: tsx
CODE:
import { Button } from 'tamagui'

export default () => <Button debug>Hello world</Button>

----------------------------------------

TITLE: Basic Structure of Sheet Component in Tamagui
DESCRIPTION: Example showing the basic anatomy of the Sheet component, including Overlay, Handle, and Frame subcomponents.

LANGUAGE: tsx
CODE:
import { Sheet } from 'tamagui' // or '@tamagui/sheet'

export default () => (
  <Sheet>
    <Sheet.Overlay />
    <Sheet.Handle />
    <Sheet.Frame>{/* ...inner contents */}</Sheet.Frame>
  </Sheet>
)

----------------------------------------

TITLE: Using Custom Data with Toast in Tamagui
DESCRIPTION: Example of passing and retrieving custom data with Toast, including TypeScript module augmentation for type safety.

LANGUAGE: ts
CODE:
const toastController = useToastController()
toastController.show("Title", { myPreset: 'error' })

const toastState = useToastState()
toastState.myPreset

declare module '@tamagui/toast' {
  interface CustomData {
    myPreset: 'error' | 'success' | 'warning'
  }
}

----------------------------------------

TITLE: Accessing Token Values and Variables in Tamagui
DESCRIPTION: Shows how to access the raw value and CSS variable name of a token using the .val and .variable properties.

LANGUAGE: tsx
CODE:
getTokens().size.small.val // returns 10
getTokens().size.small.variable // returns something like (--size-small), which matches the CSS rule inserted

----------------------------------------

TITLE: Configuring Expo Router Layout with Tamagui
DESCRIPTION: Setup for the root layout in Expo Router, integrating Tamagui provider and theme handling.

LANGUAGE: typescript
CODE:
import '../tamagui-web.css'

import { DarkTheme, DefaultTheme, ThemeProvider } from '@react-navigation/native'
import { Stack } from 'expo-router'
import { useColorScheme } from 'react-native'
import { TamaguiProvider } from 'tamagui'

import { tamaguiConfig } from '../tamagui.config'

export default function RootLayout() {
  const colorScheme = useColorScheme()

  return (
    // add this
    <TamaguiProvider config={tamaguiConfig} defaultTheme={colorScheme!}>
      <ThemeProvider value={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>
        <Stack>
          <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
          <Stack.Screen name="modal" options={{ presentation: 'modal' }} />
        </Stack>
      </ThemeProvider>
    </TamaguiProvider>
  )
}


----------------------------------------

TITLE: Simplified Group Usage without Items in React
DESCRIPTION: Shows how to use the XGroup component without Group.Item, which applies borders and spacing based on direct children.

LANGUAGE: tsx
CODE:
import { Button, XGroup } from 'tamagui'

// usage without Item:
export default () => (
  <XGroup>
    <Button>First</Button>
    <Button>Second</Button>
    <Button>Third</Button>
  </XGroup>
)

----------------------------------------

TITLE: Creating a Single Toast without Hooks in Tamagui
DESCRIPTION: Example of creating a single Toast component without using hooks, including animation and state management.

LANGUAGE: tsx
CODE:
export default () => {
  const [open, setOpen] = React.useState(false)
  const timerRef = React.useRef(0)

  React.useEffect(() => {
    return () => clearTimeout(timerRef.current)
  }, [])

  return (
    <YStack ai="center">
      <Button
        onPress={() => {
          setOpen(false)
          window.clearTimeout(timerRef.current)
          timerRef.current = window.setTimeout(() => {
            setOpen(true)
          }, 150)
        }}
      >
        Single Toast
      </Button>
      <Toast
        onOpenChange={setOpen}
        open={open}
        animation="100ms"
        enterStyle={{ x: -20, opacity: 0 }}
        exitStyle={{ x: -20, opacity: 0 }}
        opacity={1}
        x={0}
      >
        <Toast.Title>Subscribed!</Toast.Title>
        <Toast.Description>We'll be in touch.</Toast.Description>
      </Toast>
    </YStack>
  )
}

----------------------------------------

TITLE: Using FontLanguage Component with Conditional Rendering in Tamagui
DESCRIPTION: This snippet demonstrates how to use the FontLanguage component to conditionally render different fonts based on language. It shows a simple example of switching between default and French fonts.

LANGUAGE: tsx
CODE:
<FontLanguage body={isFrench ? 'french' : 'default'}>
  <Text fontfamily="$body">Hello world</Text>
</FontLanguage>

----------------------------------------

TITLE: Installing Checkbox Component in Tamagui
DESCRIPTION: Command to install the Checkbox component package independently if not using the full Tamagui framework.

LANGUAGE: bash
CODE:
npm install @tamagui/checkbox

----------------------------------------

TITLE: Dialog in Native Modal
DESCRIPTION: Implementation example for using Dialog within native modals, such as in react-navigation.

LANGUAGE: typescript
CODE:
import { PortalProvider } from 'tamagui'

export function Page() {
  return (
    <PortalProvider>
      {/* rest of your page, including the Dialog... */}
    </PortalProvider>
  )
}

----------------------------------------

TITLE: Installing Sheet Component in Tamagui
DESCRIPTION: Command to install the Sheet component independently in a Tamagui project.

LANGUAGE: bash
CODE:
npm install @tamagui/sheet

----------------------------------------

TITLE: Using FontLanguage with Styled Components in Tamagui
DESCRIPTION: This example shows how to use the FontLanguage component with styled components in Tamagui. It creates a styled Text component and uses it within the FontLanguage wrapper.

LANGUAGE: tsx
CODE:
const P = styled(Text, { fontFamily: '$body' })

<FontLanguage body={isFrench ? 'french' : 'default'}>
  <P>Hello world</P>
</FontLanguage>

----------------------------------------

TITLE: Installing Native Dependencies
DESCRIPTION: Commands for adding native dependencies to the Expo application.

LANGUAGE: bash
CODE:
cd apps/expo
yarn add react-native-reanimated

cd ../..
yarn

----------------------------------------

TITLE: Installing Native Dependencies
DESCRIPTION: Commands for adding native dependencies to the Expo application.

LANGUAGE: bash
CODE:
cd apps/expo
yarn add react-native-reanimated

cd ../..
yarn

----------------------------------------

TITLE: Definition of Paragraph Component in Tamagui
DESCRIPTION: Shows the styled definition of the Paragraph component, which extends SizableText with additional properties.

LANGUAGE: tsx
CODE:
export const Paragraph = styled(SizableText, {
  name: 'Paragraph',
  tag: 'p',
  userSelect: 'auto',
  color: '$color',
  size: '$true',
  whiteSpace: 'normal',
})

----------------------------------------

TITLE: Installing Headless Switch Component in Tamagui
DESCRIPTION: Command to install the headless switch component, which has no dependency on @tamagui/core.

LANGUAGE: bash
CODE:
npm install @tamagui/switch-headless

----------------------------------------

TITLE: Configuring Custom Language Fonts in Tamagui Config
DESCRIPTION: This snippet demonstrates how to configure custom language fonts in the Tamagui configuration file. It shows the setup for adding a Chinese language variant of the body font.

LANGUAGE: tsx
CODE:
import { createFont, createTamagui, createTokens } from 'tamagui'

export default createTamagui({
  fonts: {
    body: createFont({
      family: 'Inter, Helvetica, Arial, sans-serif',
      // ...
    }),
    body_cn: createFont({
      family: 'Inter-CN',
      // ...
    }),
  },
})

----------------------------------------

TITLE: Installing Card Component in Tamagui
DESCRIPTION: Command to install the Card component independently using npm.

LANGUAGE: bash
CODE:
npm install @tamagui/card

----------------------------------------

TITLE: Installing Progress Component in Tamagui
DESCRIPTION: Command to install the Progress component package independently from Tamagui.

LANGUAGE: bash
CODE:
npm install @tamagui/progress

----------------------------------------

TITLE: Creating and Inspecting a Styled Circle Component in TSX
DESCRIPTION: Shows how to create a styled Circle component and access its staticConfig property for debugging and introspection.

LANGUAGE: tsx
CODE:
const Circle = styled(View, {
  borderRadius: 1000,
})

console.log(Circle.staticConfig) // lots of helpful information

----------------------------------------

TITLE: Installing Switch Component in Tamagui
DESCRIPTION: Command to install the Switch component independently from Tamagui.

LANGUAGE: bash
CODE:
npm install @tamagui/switch

----------------------------------------

TITLE: Using Custom Language Font with FontLanguage in Tamagui
DESCRIPTION: This example shows how to use a custom language font (Chinese in this case) with the FontLanguage component in a Tamagui application.

LANGUAGE: tsx
CODE:
import { FontLanguage, Text } from 'tamagui' // or '@tamagui/core'

export default (
  <FontLanguage body="cn">
    <Text fontFamily="$body">
      你好
    </Text>
  </FontLanguage>
)

----------------------------------------

TITLE: Configuring Ignorable Modules for Tamagui in Bash
DESCRIPTION: Sets the TAMAGUI_IGNORE_BUNDLE_ERRORS environment variable to ignore specific modules or all modules causing bundle errors in Tamagui. This can be used to suppress Warning 001.

LANGUAGE: bash
CODE:
TAMAGUI_IGNORE_BUNDLE_ERRORS=some_module_name,some_other_module_name
# Or to disable them all (not recommended):
TAMAGUI_IGNORE_BUNDLE_ERRORS=true

----------------------------------------

TITLE: Configuring Tamagui Plugin in Webpack
DESCRIPTION: Example of how to use the TamaguiPlugin in a webpack.config.js file. It specifies the configuration file and components to be used.

LANGUAGE: tsx
CODE:
const { TamaguiPlugin } = require('tamagui-loader')

config.plugins.push(
  new TamaguiPlugin({
    config: './src/tamagui.config.ts',
    components: ['tamagui'],
  }),
)

----------------------------------------

TITLE: Installing Tamagui Elements Package
DESCRIPTION: Command to install the @tamagui/elements package which provides semantic HTML elements for Tamagui applications.

LANGUAGE: bash
CODE:
npm install @tamagui/elements

----------------------------------------

TITLE: Nesting FontLanguage Components for Multiple Languages in Tamagui
DESCRIPTION: This snippet demonstrates how to nest FontLanguage components to switch between different language fonts, including resetting to the default font.

LANGUAGE: tsx
CODE:
import { FontLanguage, Text } from 'tamagui' // or '@tamagui/core'

export default (
  <FontLanguage body="cn">
    <Text fontFamily="$body">
      你好
    </Text>
    <FontLanguage body="default">
      <Text fontFamily="$body">
        Hello
      </Text>
    </FontLanguage>
  </FontLanguage>
)

----------------------------------------

TITLE: Creating Custom Sheet with createSheet in Tamagui
DESCRIPTION: Example of using createSheet to create a fully custom sheet component without default styles.

LANGUAGE: tsx
CODE:
import { Stack, styled } from '@tamagui/core'
import { createSheet } from '@tamagui/sheet'

const Handle = styled(Stack, {
  variants: {
    open: {
      true: {
        opacity: 0.35,
      },
      false: {
        opacity: 0.5,
      },
    },
  } as const,
})

const Overlay = styled(Stack, {
  variants: {
    open: {
      true: {
        opacity: 1,
        pointerEvents: 'auto',
      },
      false: {
        opacity: 0,
        pointerEvents: 'none',
      },
    },
  } as const,
})

const Frame = styled(Stack, {
  backgroundColor: '$background',
  // can add open variant as well
})

export const Sheet = createSheet({
  Frame,
  Handle,
  Overlay,
})

----------------------------------------

TITLE: Group Component with Size Prop - TSX
DESCRIPTION: Example demonstrating how to use the size prop with Group component to control border radius using tokens.

LANGUAGE: tsx
CODE:
import { Button, XGroup } from 'tamagui'

export default () => (
  <XGroup size="$6">
    <XGroup.Item>
      <Button>First</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Second</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Third</Button>
    </XGroup.Item>
  </XGroup>
)

----------------------------------------

TITLE: Installing RadioGroup Component in Tamagui
DESCRIPTION: Command to install the RadioGroup component independently from the Tamagui package using npm.

LANGUAGE: bash
CODE:
npm install @tamagui/radio-group

----------------------------------------

TITLE: Installing Tamagui Vite Plugin
DESCRIPTION: Command to add the Tamagui Vite plugin package using yarn.

LANGUAGE: bash
CODE:
yarn add @tamagui/vite-plugin

----------------------------------------

TITLE: Setting Up Native iOS Support for Sheet Component
DESCRIPTION: Instructions for setting up native iOS support for the Sheet component, including installation of dependencies and usage example.

LANGUAGE: tsx
CODE:
import { Sheet, setupNativeSheet } from '@tamagui/sheet'
import { ModalView } from 'react-native-ios-modal'

setupNativeSheet('ios', ModalView)

export default (
  <Sheet native>
    {/* The rest of your sheet views, see Anatomy, example and props API */}
  </Sheet>
)

----------------------------------------

TITLE: Implementing Safe Area Toast Viewport in React Native
DESCRIPTION: Example of how to create a ToastViewport that respects the safe area in React Native using react-native-safe-area-context.

LANGUAGE: tsx
CODE:
import { useSafeAreaInsets } from 'react-native-safe-area-context'

const SafeToastViewport = () => {
  const { left, top, right } = useSafeAreaInsets()
  return (
    <ToastViewport flexDirection="column-reverse" top={top} left={left} right={right} />
  )
}

----------------------------------------

TITLE: Implementing PortalProvider in React App
DESCRIPTION: Setup of PortalProvider at the root level of the application to enable Dialog functionality.

LANGUAGE: typescript
CODE:
import { PortalProvider } from '@tamagui/portal'
import YourApp from './components/YourApp'

function App() {
  return (
    <PortalProvider shouldAddRootHost>
      <YourApp />
    </PortalProvider>
  )
}

----------------------------------------

TITLE: Configuring Tamagui Plugin in Vite
DESCRIPTION: Basic Vite configuration setup with Tamagui plugin, including React SWC plugin and Tamagui optimization settings.

LANGUAGE: typescript
CODE:
import react from '@vitejs/plugin-react-swc'
import { tamaguiPlugin } from '@tamagui/vite-plugin'

export default {
  plugins: [
    react(),
    tamaguiPlugin({
      // points to your tamagui config file
      config: 'src/tamagui.config.ts',
      // points to any linked packages or node_modules
      // that have tamagui components to optimize
      components: ['tamagui'],
      // turns on the optimizing compiler
      optimize: true,
    }),
  ].filter(Boolean),
}

----------------------------------------

TITLE: Configuring Group Component Size in Tamagui (TSX)
DESCRIPTION: Illustrates how to set the size property of an XGroup component, which affects the borderRadius of child elements.

LANGUAGE: tsx
CODE:
import { Button, XGroup } from 'tamagui'

export default () => (
  <XGroup size="$6">
    <XGroup.Item>
      <Button>First</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Second</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Third</Button>
    </XGroup.Item>
  </XGroup>
)

----------------------------------------

TITLE: Custom Toast State Implementation
DESCRIPTION: Example of using useToastState hook to render custom toast contents.

LANGUAGE: tsx
CODE:
const CurrentToast = () => {
  const toast = useToastState()

  // don't show any toast if no toast is present or it's handled natively
  if (!toast || toast.isHandledNatively) {
    return null
  }

  return (
    <Toast key={toast.id} duration={toast.duration} viewport={toast.viewport}>
      <Toast.Title>{toast.title}</Toast.Title>
      <Toast.Description>{toast.message}</Toast.Description>
    </Toast>
  )
}

----------------------------------------

TITLE: Sheet Component Hero Demo Template
DESCRIPTION: This is a placeholder for a hero demo of the Sheet component. The actual implementation is not provided in the snippet, but it's intended to showcase the Sheet component's features and usage.

LANGUAGE: tsx
CODE:
```tsx hero template=Sheet

```

----------------------------------------

TITLE: Configuring Tamagui Base Setup
DESCRIPTION: Basic Tamagui configuration setup using default config with media queries support

LANGUAGE: typescript
CODE:
import { defaultConfig } from '@tamagui/config/v4'
import { createTamagui } from 'tamagui'

const appConfig = createTamagui(defaultConfig)

export type AppConfig = typeof appConfig

declare module 'tamagui' {
  interface TamaguiCustomConfig extends AppConfig {}
}

export default appConfig

----------------------------------------

TITLE: Installing Select Component in Tamagui
DESCRIPTION: Command to install the Select component independently in a Tamagui project.

LANGUAGE: bash
CODE:
npm install @tamagui/select

----------------------------------------

TITLE: Sized Group Component Usage in React
DESCRIPTION: Illustrates how to use the size property with XGroup to adjust the borderRadius of child components.

LANGUAGE: tsx
CODE:
import { Button, XGroup } from 'tamagui'

export default () => (
  <XGroup size="$6">
    <XGroup.Item>
      <Button>First</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Second</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Third</Button>
    </XGroup.Item>
  </XGroup>
)

----------------------------------------

TITLE: Basic Button Usage in Tamagui
DESCRIPTION: Demonstrates how to import and use the Button component from Tamagui.

LANGUAGE: tsx
CODE:
import { Button } from 'tamagui'

export default () => <Button>Lorem ipsum</Button>

----------------------------------------

TITLE: Installing Expo Font Package
DESCRIPTION: Command to install the expo-font package for font handling in Expo projects.

LANGUAGE: bash
CODE:
npx expo install expo-font

----------------------------------------

TITLE: Theme Reset Example in Tamagui
DESCRIPTION: Shows how to use the reset prop to revert to a parent theme in the theme hierarchy.

LANGUAGE: tsx
CODE:
<Theme name="dark">
  <Theme name="pink">
    <Theme reset>
      {/* This square and all children will have theme "dark" */}
      <Square bg="$background" size={10} />
    </Theme>
  </Theme>
</Theme>

----------------------------------------

TITLE: Basic Button Usage in Tamagui
DESCRIPTION: Simple example showing how to import and use the basic Button component.

LANGUAGE: tsx
CODE:
import { Button } from 'tamagui'

export default () => <Button>Lorem ipsum</Button>

----------------------------------------

TITLE: Loading Google Fonts in Expo
DESCRIPTION: Example of loading Google Fonts (Inter) in an Expo app using the useFonts hook from @expo-google-fonts.

LANGUAGE: typescript
CODE:
import { useFonts, Inter_400Regular, Inter_900Black } from '@expo-google-fonts/inter'

function App() {
  const [loaded] = useFonts({
    Inter_400Regular,
    Inter_900Black,
  })

  useEffect(() => {
    if (loaded) {
      // can hide splash screen here
    }
  }, [loaded])

  if (!loaded) {
    return null
  }

  return <MyApp />
}


----------------------------------------

TITLE: Implementing Single Custom Toast in Tamagui
DESCRIPTION: Example of how to implement a single custom toast with more control over its behavior and animation in Tamagui.

LANGUAGE: tsx
CODE:
export default () => {
  const [open, setOpen] = React.useState(false)
  const timerRef = React.useRef(0)

  React.useEffect(() => {
    return () => clearTimeout(timerRef.current)
  }, [])

  return (
    <YStack ai="center">
      <Button
        onPress={() => {
          setOpen(false)
          window.clearTimeout(timerRef.current)
          timerRef.current = window.setTimeout(() => {
            setOpen(true)
          }, 150)
        }}
      >
        Single Toast
      </Button>
      <Toast
        onOpenChange={setOpen}
        open={open}
        animation="100ms"
        enterStyle={{ x: -20, opacity: 0 }}
        exitStyle={{ x: -20, opacity: 0 }}
        opacity={1}
        x={0}
      >
        <Toast.Title>Subscribed!</Toast.Title>
        <Toast.Description>We'll be in touch.</Toast.Description>
      </Toast>
    </YStack>
  )
}

----------------------------------------

TITLE: Defining String Variants in Tamagui
DESCRIPTION: This snippet shows how to define string variants for a styled component in Tamagui using a pseudo TypeScript syntax.

LANGUAGE: tsx
CODE:
import { View, styled } from 'tamagui' // or '@tamagui/core'

export const ColorfulView = styled(View, {
  variants: {
    color: {
      ':string': (color) => {
        // color is of type "string"
        return {
          color,
          borderColor: color,
        }
      },
    },
  } as const,
})

----------------------------------------

TITLE: Installing ListItem Component in Tamagui
DESCRIPTION: Command to install the ListItem component independently using npm.

LANGUAGE: bash
CODE:
npm install @tamagui/list-item

----------------------------------------

TITLE: Starting Expo with Cleared Cache
DESCRIPTION: Command to start an Expo project with a cleared cache, useful for first-time Tamagui setup.

LANGUAGE: bash
CODE:
npx expo start -c

----------------------------------------

TITLE: Installing Portal Provider for Tooltip in Tamagui Core
DESCRIPTION: Instructions for installing the PortalProvider when using @tamagui/core instead of the full Tamagui package.

LANGUAGE: bash
CODE:
npm install @tamagui/portal

----------------------------------------

TITLE: Configuring Environment Variables for Stripe and Supabase
DESCRIPTION: Environment variable configuration for connecting Stripe test mode and Supabase services.

LANGUAGE: env
CODE:
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_xxxxxxxxxxxxxxxxx
STRIPE_SECRET_KEY=sk_test_xxxxxxxxxxxxxxxxx
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key
NEXT_PUBLIC_SUPABASE_URL=http://localhost:54321

----------------------------------------

TITLE: Using Catch-all Variants in Tamagui
DESCRIPTION: This snippet demonstrates how to use catch-all variants in Tamagui to handle any values that don't match other defined variants.

LANGUAGE: tsx
CODE:
import { View, styled } from 'tamagui' // or '@tamagui/core'

export const ColorfulView = styled(View, {
  variants: {
    colorful: {
      true: {
        color: 'red',
      },
      '...': (val: string) => {
        // this will catch any other values that don't match
        return {
          color: val,
        }
      },
    },
  } as const,
})

----------------------------------------

TITLE: Basic VisuallyHidden Component Usage in Tamagui
DESCRIPTION: Demonstrates the basic implementation of VisuallyHidden component to hide content while keeping it accessible to screen readers.

LANGUAGE: tsx
CODE:
import { Text, VisuallyHidden } from 'tamagui'

export default () => (
  <VisuallyHidden>
    <Text>Add annotations here</Text>
  </VisuallyHidden>
)

----------------------------------------

TITLE: Installing One Framework and Tamagui
DESCRIPTION: Commands to create a new One project and install Tamagui with its dependencies.

LANGUAGE: bash
CODE:
npx one

yarn add tamagui @tamagui/config

----------------------------------------

TITLE: Basic Usage of Card Component in Tamagui
DESCRIPTION: Demonstrates the basic structure and usage of the Card component and its subcomponents in a React component.

LANGUAGE: tsx
CODE:
import { Card } from 'tamagui' // or '@tamagui/card'

export default () => (
  <Card>
    <Card.Header />
    <Card.Footer />
    {/* any other components */}
    <Card.Background />
  </Card>
)

----------------------------------------

TITLE: Styling ToggleGroup.Item with Active State in Tamagui
DESCRIPTION: Example of how to customize the active styles for a ToggleGroup.Item using Tamagui's styled function.

LANGUAGE: tsx
CODE:
import { ToggleGroup } from '@tamagui/toggle-group'
import { styled } from 'tamagui'

const MyToggleGroupItem = styled(ToggleGroup.Item, {
  variants: {
    active: {
      true: {
        backgroundColor: 'red'
      },
    },
  },
})

----------------------------------------

TITLE: Creating Safe Area Toast Viewport in Tamagui
DESCRIPTION: Example of creating a ToastViewport that respects device safe areas using react-native-safe-area-context.

LANGUAGE: tsx
CODE:
import { useSafeAreaInsets } from 'react-native-safe-area-context'

const SafeToastViewport = () => {
  const { left, top, right } = useSafeAreaInsets()
  return (
    <ToastViewport flexDirection="column-reverse" top={top} left={left} right={right} />
  )
}

----------------------------------------

TITLE: Installing Tamagui Loader for Webpack
DESCRIPTION: Command to install the Tamagui loader package for Webpack integration.

LANGUAGE: bash
CODE:
yarn add tamagui-loader

----------------------------------------

TITLE: Creating and Using Reactive Stores in React with @tamagui/use-store
DESCRIPTION: This snippet demonstrates how to create and use reactive stores using @tamagui/use-store. It shows different methods of store creation and usage, including global stores and selectors.

LANGUAGE: tsx
CODE:
import { createUseStore, createStoreInstance, useStore, useGlobalStore } from '@tamagui/use-store'

class X {
  y = 0

  add() {
    this.y += 1
  }
}

// Can use it a few ways, all these will access *the same* store:
const useX = createUseStore(X)
const x = createStoreInstance(X)

// all of these will be reactive, so only props you use cause re-renders
export function ReactComponent() {
  const x0 = useStore(X)
  const x1 = useX()
  const x2 = useGlobalStore(x)
  
  return (
    <>
      <div>{x0.y}</div>
      <button action={x0.add}>add</button>
    </>
  )
}

// if you want a different instance or namespace, pass props, these will also all access the same store:
export function ReactComponentAlt() {
  const x0 = useStore(X, { id: 100 })
  const x1 = useX({ id: 100 })
  const x2 = useGlobalStore(x, { id: 100 })
  
  return (
    <div>{x0.y}</div>
  )
}

// finally, you can make selectors with
export function ReactComponentAlt() {
  const xplusten0 = useStoreSelector(X, { id: 100 }, x => x.y + 10)
  const xplusten1 = useGlobalStoreSelector(X, { id: 100 }, x => x.y + 10)

  return (
    <div>{xplusten}</div>
  )
}

----------------------------------------

TITLE: Basic Theme Definition in Tamagui
DESCRIPTION: Shows the basic structure of defining a dark theme object in Tamagui with background and color properties.

LANGUAGE: tsx
CODE:
const dark = {
  background: '#000',
  color: '#fff',
  // define any key to any string or number value
}

----------------------------------------

TITLE: Using Multiple Toast Viewports in Tamagui
DESCRIPTION: Demonstrates how to set up and use multiple named ToastViewport components.

LANGUAGE: tsx
CODE:
const App = () => {
  return (
    <ToastProvider>
      <ToastViewport /> {/* default viewport */}
      <ToastViewport name="viewport-custom" />
    </ToastProvider>
  )
}

const MyComponent = () => {
  return <Toast /> // default viewport
}

const MyComponent2 = () => {
  return <Toast viewportName="viewport-custom" />
}

----------------------------------------

TITLE: Configuring Babel for Tamagui
DESCRIPTION: Babel configuration example for integrating Tamagui compilation in native environments.

LANGUAGE: javascript
CODE:
module.exports = {
  plugins: [
    [
      '@tamagui/babel-plugin',
      {
        components: ['tamagui'],
        config: './tamagui.config.ts',
        importsWhitelist: ['constants.js', 'colors.js'],
        logTimings: true,
        disableExtraction: process.env.NODE_ENV === 'development',
      }
    ],
  ]
}

----------------------------------------

TITLE: Installing @tamagui/colors package using Yarn
DESCRIPTION: This command installs the @tamagui/colors package using Yarn package manager. It adds the package to your project's dependencies.

LANGUAGE: bash
CODE:
yarn add @tamagui/colors

----------------------------------------

TITLE: Setting up Tamagui Provider Component
DESCRIPTION: Root layout configuration with TamaguiProvider wrapper for the application.

LANGUAGE: tsx
CODE:
import { TamaguiProvider } from 'tamagui'
import { Slot } from 'one'
import config from '../tamagui.config'

export default function Layout() {
  return (
    <TamaguiProvider config={config}>
      <Slot />
    </TamaguiProvider>
  )
}

----------------------------------------

TITLE: Creating Multiple Toasts without Hooks in Tamagui
DESCRIPTION: Example of creating multiple Toast components without using hooks, including dynamic rendering based on state.

LANGUAGE: tsx
CODE:
export default () => {
  const [savedCount, setSavedCount] = React.useState(0)

  return (
    <YStack ai="center">
      <Button
        onPress={() => {
          setSavedCount((old) => old + 1)
        }}
      >
        Show toast
      </Button>
      {[...Array(savedCount)].map((_, index) => (
        <Toast
          key={index}
          animation="100ms"
          enterStyle={{ x: -20, opacity: 0 }}
          exitStyle={{ x: -20, opacity: 0 }}
          opacity={1}
          x={0}
        >
          <Toast.Title>Subscribed!</Toast.Title>
          <Toast.Description>We'll be in touch.</Toast.Description>
        </Toast>
      ))}
    </YStack>
  )
}

----------------------------------------

TITLE: Theme with Token Integration
DESCRIPTION: Demonstrates how to use tokens as fallback values for themes, creating a connection between tokens and theme values.

LANGUAGE: tsx
CODE:
const tokens = createTokens({
  color: {
    black: '#000',
    white: '#fff',
  },
})

// theme:
const dark = {
  background: tokens.color.black,
  color: tokens.color.white,
}

----------------------------------------

TITLE: Allowing Collapsing of All Accordion Items
DESCRIPTION: Demonstrates how to allow all items in an Accordion to be collapsed using the collapsible prop.

LANGUAGE: jsx
CODE:
<Accordion type="single" __collapsible__>
  <Accordion.Item value="item-1">…</Accordion.Item>
  <Accordion.Item value="item-2">…</Accordion.Item>
</Accordion>

----------------------------------------

TITLE: Using Lucide Icons with Tamagui Buttons
DESCRIPTION: Examples showing how to use Lucide Icons within Tamagui Button components, demonstrating both automatic size/theme inheritance and manual size control.

LANGUAGE: tsx
CODE:
import { Button } from 'tamagui'
import { Plus } from '@tamagui/lucide-icons'

// Button will automatically pass size/theme to icon
export default () => (
  <Button icon={Plus}>
    Hello world
  </Button>
)

// or you can control it
export default () => (
  <Button icon={<Plus size="$4" />}>
    Hello world
  </Button>
)

----------------------------------------

TITLE: Using SizableText with Size Property in Tamagui
DESCRIPTION: Demonstrates the usage of the size property with SizableText component, which applies predefined font styles.

LANGUAGE: tsx
CODE:
<SizableText size="$small" />

----------------------------------------

TITLE: Component Theme Definition
DESCRIPTION: Shows how to create a styled component with a specific theme name and corresponding theme definitions.

LANGUAGE: tsx
CODE:
import { Stack, styled } from 'tamagui'

const Circle = styled(Stack, {
  name: 'Circle',
  backgroundColor: '$background',
})

----------------------------------------

TITLE: Installing Bento Components via NPX
DESCRIPTION: Command to install the complete Bento suite of components using NPX package runner. This provides a streamlined way to get all Bento components in one command.

LANGUAGE: bash
CODE:
$ npx bento-get

----------------------------------------

TITLE: Proposed Improvements for Selectors and Reactions in @tamagui/use-store
DESCRIPTION: This snippet outlines planned improvements for the @tamagui/use-store package, including better selectors and reactions that are not tied to a single store. It demonstrates the proposed syntax for these features.

LANGUAGE: tsx
CODE:
const isValid = useStoreSelector(() => {
  return mapStore.isActive && homeStore.isActive
})

useEffect(() => {
  return reaction(
    () => {
      return homeStore.isActive && mapStore.isActive
    },
    isValid => {
      // ...
    }
  )
}, [])

----------------------------------------

TITLE: VisuallyHidden with Space Property in Tamagui
DESCRIPTION: Shows how to use VisuallyHidden component within a stack layout while maintaining proper spacing and avoiding double-spacing issues.

LANGUAGE: tsx
CODE:
import { H1, Text, VisuallyHidden, YStack } from 'tamagui'

export default () => (
  <YStack space>
    <H1>Title</H1>

    <VisuallyHidden>
      <Text>Add annotations here</Text>
    </VisuallyHidden>
  </YStack>
)

----------------------------------------

TITLE: Running Sandbox Environment
DESCRIPTION: Command to run the sandbox environment which works with Expo Go.

LANGUAGE: bash
CODE:
yarn sandbox

----------------------------------------

TITLE: Installing Toast Component in Tamagui
DESCRIPTION: Command to install the Toast component and its dependencies using yarn.

LANGUAGE: bash
CODE:
yarn add @tamagui/toast burnt

----------------------------------------

TITLE: Basic Icon Import and Usage in React Native
DESCRIPTION: Demonstrates the standard ES6 import and usage of a single icon component within a React class component

LANGUAGE: javascript
CODE:
import { Camera } from '@tamagui/lucide-icons';

class MyClass extends React.Component {
  render() {
    return <Camera />
  }
}

----------------------------------------

TITLE: Implementing Multiple Custom Toasts in Tamagui
DESCRIPTION: Example of how to implement multiple custom toasts with more control over their behavior and animation in Tamagui.

LANGUAGE: tsx
CODE:
export default () => {
  const [savedCount, setSavedCount] = React.useState(0)

  return (
    <YStack ai="center">
      <Button
        onPress={() => {
          setSavedCount((old) => old + 1)
        }}
      >
        Show toast
      </Button>
      {[...Array(savedCount)].map((_, index) => (
        <Toast
          key={index}
          animation="100ms"
          enterStyle={{ x: -20, opacity: 0 }}
          exitStyle={{ x: -20, opacity: 0 }}
          opacity={1}
          x={0}
        >
          <Toast.Title>Subscribed!</Toast.Title>
          <Toast.Description>We'll be in touch.</Toast.Description>
        </Toast>
      ))}
    </YStack>
  )
}

----------------------------------------

TITLE: Setting Up Kitchen Sink with React 18
DESCRIPTION: Commands to set up and run the kitchen sink demo with React 18 profile.

LANGUAGE: bash
CODE:
yarn profile react-18
yarn kitchen-sink

----------------------------------------

TITLE: Basic Tamagui Animation Implementation
DESCRIPTION: Demonstrates the simplest way to add animations to a Tamagui View component using the animation prop.

LANGUAGE: tsx
CODE:
import { View } from 'tamagui'

<View animation="100ms" />

----------------------------------------

TITLE: Using Props and Styles in Tamagui Components
DESCRIPTION: The useProps, useStyle, and usePropsAndStyle hooks handle prop and style processing in Tamagui components. They merge media styles, expand shorthands, and resolve theme/token values.

LANGUAGE: tsx
CODE:
function MyButton(props) {
  const activeProps = useProps(props)
}

LANGUAGE: tsx
CODE:
function MyButton(props) {
  const style = useStyle(props, {
    // option to disable the shorthand expansion
    disableExpandShorthands: true,
    // option to change how values are resolved
    // 'auto' (default) resolves to optimized value on all platforms (CSS variable on web, DynamicColor on iOS, not optimized on android)
    // 'value' resolves to the raw theme/token string on all platforms (the same as useTheme()[name].val)
    resolveValues: 'value',
    // pass a Tamagui component to resolve any custom variants:
    forComponent: CustomComponent
  })
}

LANGUAGE: tsx
CODE:
function MyButton(props) {
  const [props, style, theme, media] = usePropsAndStyle(props, opts)
  // see useStyle to for documentation on opts
  // we return theme, media as they are used internally already in the hook
}

----------------------------------------

TITLE: Implementing Basic Progress Bar with Tamagui
DESCRIPTION: Example showing how to create a basic progress bar with a 60% value and animated indicator using Tamagui's Progress component.

LANGUAGE: tsx
CODE:
import { Button, Progress } from 'tamagui'

export default () => (
  <Progress value={60}>
    <Progress.Indicator animation="bouncy" />
  </Progress>
)

----------------------------------------

TITLE: Building Native Applications
DESCRIPTION: Commands for building native applications for Android and iOS platforms.

LANGUAGE: bash
CODE:
# Android
yarn kitchen-sink:build:android

# iOS
yarn kitchen-sink:build:ios

----------------------------------------

TITLE: CommonJS Icon Import
DESCRIPTION: Demonstrates how to import icons using CommonJS require syntax for environments that don't support ES6 imports

LANGUAGE: javascript
CODE:
var Camera = require('@tamagui/lucide-icons/dist/icons/camera').default;

var MyComponent = React.createClass({
  render: function () {
    return (
      <Camera />
    );
  }
});

----------------------------------------

TITLE: Basic Progress Bar Implementation
DESCRIPTION: Example showing how to use the Progress component with an animated indicator. The Progress component accepts a value prop to control the completion percentage and can be customized with animations.

LANGUAGE: tsx
CODE:
import { Button, Progress } from 'tamagui'

export default () => (
  <Progress value={60}>
    <Progress.Indicator animation="bouncy" />
  </Progress>
)

----------------------------------------

TITLE: Basic Progress Bar Implementation
DESCRIPTION: Example showing how to use the Progress component with an animated indicator. The Progress component accepts a value prop to control the completion percentage and can be customized with animations.

LANGUAGE: tsx
CODE:
import { Button, Progress } from 'tamagui'

export default () => (
  <Progress value={60}>
    <Progress.Indicator animation="bouncy" />
  </Progress>
)

----------------------------------------

TITLE: Configuring Vite with Tamagui Plugin
DESCRIPTION: Example Vite configuration showing how to set up the Tamagui plugin with optimization enabled

LANGUAGE: tsx
CODE:
import { tamaguiPlugin } from '@tamagui/vite-plugin'
import react from '@vitejs/plugin-react-swc'
import { defineConfig } from 'vite'

export default defineConfig({
  clearScreen: false,
  plugins: [
    react(),
    tamaguiPlugin({
      optimize: true,
      components: ['tamagui'],
      config: 'tamagui.config.ts',
    }),
  ],
})

----------------------------------------

TITLE: Using Styled Checkbox in Tamagui
DESCRIPTION: Example of how to use the styled Checkbox component in Tamagui with a custom indicator.

LANGUAGE: typescript
CODE:
import { Check } from '@tamagui/lucide-icons'
import { Checkbox } from 'tamagui'

export default () => (
  <Checkbox size="$4">
    <Checkbox.Indicator>
      <Check />
    </Checkbox.Indicator>
  </Checkbox>
)

----------------------------------------

TITLE: Basic Select Component Structure in Tamagui
DESCRIPTION: Example of the basic structure and anatomy of a Select component in Tamagui, showcasing various sub-components and their hierarchy.

LANGUAGE: tsx
CODE:
import { Select } from 'tamagui' // or '@tamagui/select'

export default () => (
  <Select defaultValue="">
    <Select.Trigger>
      <Select.Value placeholder="Search..." />
    </Select.Trigger>
    <Select.Content>
      <Select.ScrollUpButton />
      <Select.Viewport>
        <Select.Group>
          <Select.Label />
          <Select.Item>
            <Select.ItemText />
          </Select.Item>
        </Select.Group>
      </Select.Viewport>
      <Select.ScrollDownButton />
    </Select.Content>
  </Select>
)

----------------------------------------

TITLE: Installing Vite Project
DESCRIPTION: Command to create a new Vite project using npm.

LANGUAGE: bash
CODE:
npm create vite@latest

----------------------------------------

TITLE: Installing Tamagui Starter Template
DESCRIPTION: Command to create a new Tamagui project using the starter template.

LANGUAGE: bash
CODE:
npm create tamagui@latest

----------------------------------------

TITLE: Installing Tamagui Popover Package
DESCRIPTION: Commands for installing the Popover component and its portal dependency.

LANGUAGE: bash
CODE:
npm install @tamagui/popover
npm install @tamagui/portal

----------------------------------------

TITLE: Using Inline Media Props in Tamagui Components
DESCRIPTION: This example demonstrates how to use inline media props with $ prefix for responsive styling in Tamagui components. It shows mobile-first design with overrides for larger viewports.

LANGUAGE: tsx
CODE:
import { Button, XStack, useMedia } from 'tamagui' // note: design system can use @tamagui/core

export default () => {
  const [x, setX] = useState(0)
  return (
    <XStack
      backgroundColor="red"
      $gtSm={{
        backgroundColor: 'blue',
      }}
      $gtMd={{
        backgroundColor: x > 0.5 ? 'green' : 'yellow',
      }}
    >
      <Button onPress={() => setX(Math.random())}>Hello</Button>
    </XStack>
  )
}

----------------------------------------

TITLE: Creating Tamagui Configuration
DESCRIPTION: TypeScript configuration file for Tamagui, setting up the default config and declaring custom types.

LANGUAGE: typescript
CODE:
import { defaultConfig } from '@tamagui/config/v4'
import { createTamagui } from 'tamagui'

export const tamaguiConfig = createTamagui(defaultConfig)

export default tamaguiConfig

export type Conf = typeof tamaguiConfig

declare module 'tamagui' {
  interface TamaguiCustomConfig extends Conf {}
}


----------------------------------------

TITLE: Configuring PortalProvider in React App
DESCRIPTION: Setup for PortalProvider at the root level to enable floating popover rendering.

LANGUAGE: tsx
CODE:
import { PortalProvider } from '@tamagui/portal'
import YourApp from './components/YourApp'

function App() {
  return (
    <PortalProvider shouldAddRootHost>
      <YourApp />
    </PortalProvider>
  )
}

----------------------------------------

TITLE: Custom Core Creation with Prop Mapping in TypeScript
DESCRIPTION: Example showing how to create a custom core implementation with prop mapping functionality for custom types.

LANGUAGE: typescript
CODE:
createCore<CustomTypes>({
  propMapper(propsIn) { return propsOut }
})

----------------------------------------

TITLE: Installing Pure JS Dependencies
DESCRIPTION: Commands for adding JavaScript-only dependencies that will be used across platforms in the app package.

LANGUAGE: bash
CODE:
cd packages/app
yarn add date-fns
cd ../..
yarn

----------------------------------------

TITLE: Configuring CSS Animations in Tamagui
DESCRIPTION: Setup for CSS-based animations in Tamagui using @tamagui/animations-css package. Defines animation durations and easing functions.

LANGUAGE: tsx
CODE:
import { createAnimations } from '@tamagui/animations-css'
import { createTamagui } from 'tamagui'

export default createTamagui({
  animations: createAnimations({
    fast: 'ease-in 150ms',
    medium: 'ease-in 300ms',
    slow: 'ease-in 450ms',
  }),
  // ...
})

----------------------------------------

TITLE: Configuring PortalProvider
DESCRIPTION: Setup of PortalProvider at the root level of the application for rendering popovers.

LANGUAGE: tsx
CODE:
import { PortalProvider } from '@tamagui/portal'
import YourApp from './components/YourApp'

function App() {
  return (
    <PortalProvider shouldAddRootHost>
      <YourApp />
    </PortalProvider>
  )
}

----------------------------------------

TITLE: Displaying Responsive Logo in HTML
DESCRIPTION: This HTML snippet creates a responsive logo that changes based on the user's color scheme preference. It uses the <picture> element with multiple <source> tags to provide different logo versions for light and dark modes.

LANGUAGE: html
CODE:
<div align="center">
  <picture width="572px">
    <source media="(prefers-color-scheme: dark)" srcset="https://github.com/tamagui/tamagui/raw/main/code/tamagui.dev/public/logo-black.png">
    <source media="(prefers-color-scheme: light)" srcset="https://github.com/tamagui/tamagui/raw/main/code/tamagui.dev/public/logo-white.png">
    <img alt="Shows a black logo in light color mode and a white one in dark color mode." src="https://github.com/tamagui/tamagui/raw/main/code/tamagui.dev/public/social.png">
  </picture>
</div>

----------------------------------------

TITLE: Adding hoistingLimits to package.json for Tamagui Project
DESCRIPTION: This snippet shows the configuration to be added to package.json to resolve issues with the 'yarn ios' command. However, this configuration conflicts with metro bundler's JavaScript build process.

LANGUAGE: json
CODE:
"installConfig": {
    "hoistingLimits": "dependencies"
  },

----------------------------------------

TITLE: Configuring Reanimated with Moti
DESCRIPTION: Setup for Reanimated animations through Moti integration in Tamagui, defining spring configurations.

LANGUAGE: tsx
CODE:
import { createAnimations } from '@tamagui/animations-moti'
import { createTamagui } from 'tamagui'

export default createTamagui({
  animations: createAnimations({
    fast: {
      type: 'spring',
      damping: 20,
      mass: 1.2,
      stiffness: 250,
    },
    medium: {
      type: 'spring',
      damping: 10,
      mass: 0.9,
      stiffness: 100,
    },
    slow: {
      type: 'spring',
      damping: 20,
      stiffness: 60,
    },
  }),
  // ...
})

----------------------------------------

TITLE: Implementing Basic Tamagui Components
DESCRIPTION: Example usage of Tamagui components in a One application page.

LANGUAGE: tsx
CODE:
import { Button, Text, YStack } from 'tamagui'

export default function Home() {
  return (
    <YStack f={1} jc="center" ai="center" p="$4" space>
      <Text fontSize="$6">Welcome to Tamagui with One!</Text>
      <Button>Click me</Button>
    </YStack>
  )
}

----------------------------------------

TITLE: Initializing Supabase Local Environment
DESCRIPTION: Commands to start the local Supabase development environment using Docker and the Supabase CLI.

LANGUAGE: bash
CODE:
cd apps/site && npx supabase start

----------------------------------------

TITLE: Installing Tamagui Loader
DESCRIPTION: Command to install tamagui-loader as a development dependency using Yarn.

LANGUAGE: bash
CODE:
yarn add -D tamagui-loader

----------------------------------------

TITLE: Displaying a Notice Component in JSX
DESCRIPTION: This code snippet demonstrates the use of a custom Notice component to display an alpha status message for Tamagui.

LANGUAGE: jsx
CODE:
<Notice>Tamagui is in alpha - we'd love it if you tried it out and gave us feedback</Notice>

----------------------------------------

TITLE: Web Component Class Name Support
DESCRIPTION: Shows how to enable className support for web components to enable CSS media queries and compile-time optimization.

LANGUAGE: tsx
CODE:
import { SomeCustomComponent } from 'some-library'
import { styled } from 'tamagui' // or '@tamagui/core'

export const TamaguiCustomComponent = styled(SomeCustomComponent, {
  acceptsClassName: true,
})

----------------------------------------

TITLE: Subscription Status Check Implementation
DESCRIPTION: TypeScript function to determine if a user has access to specific product features based on their subscription status.

LANGUAGE: typescript
CODE:
const hasProductAccess = (subscriptions, productName) =>
  subscriptions?.some(
    (sub) =>
      (sub.status === 'active' || sub.status === 'trialing') &&
      sub.subscription_items?.some((item) => item.price?.product?.name === productName)
  )

----------------------------------------

TITLE: Configuring Styled Components in Tamagui Core
DESCRIPTION: Example showing how to use the styled() factory function to create a reusable Circle component with variants, media queries and theme tokens

LANGUAGE: tsx
CODE:
import { Stack, styled } from 'tamagui' // or '@tamagui/core'

export const Circle = styled(Stack, {
  backgroundColor: '$background',
  borderRadius: '$4',

  $gtSm: {
    pressStyle: {
      borderRadius: '$6',
    },
  },

  variants: {
    pin: {
      top: {
        position: 'absolute',
        top: 0,
      },
    },

    size: {
      '...size': (size, { tokens }) => {
        return {
          width: tokens.size[size] ?? size,
          height: tokens.size[size] ?? size,
        }
      },
    },
  } as const,
})

----------------------------------------

TITLE: Configuring Tamagui with Default Config
DESCRIPTION: Example of setting up Tamagui with the default configuration, including type declarations for custom configuration.

LANGUAGE: tsx
CODE:
import { TamaguiProvider, createTamagui } from '@tamagui/core'
import { defaultConfig } from '@tamagui/config/v4'

// you usually export this from a tamagui.config.ts file
const config = createTamagui(defaultConfig)

type Conf = typeof config

// make imports typed
declare module '@tamagui/core' {
  interface TamaguiCustomConfig extends Conf {}
}

export default () => {
  return (
    <TamaguiProvider config={config}>
      {/* your app here */}
    </TamaguiProvider>
  )
}

----------------------------------------

TITLE: Configuring Vite for Tamagui Integration
DESCRIPTION: Vite configuration setup with Tamagui plugin and One framework integration, including optimization settings.

LANGUAGE: tsx
CODE:
import { one } from 'one/vite'
import { tamaguiPlugin } from '@tamagui/vite-plugin'
import type { UserConfig } from 'vite'

export default {
  plugins: [
    one({
      web: {
        defaultRenderMode: 'ssg',
      },
    }),
    tamaguiPlugin({
      config: './tamagui.config.ts',
      components: ['tamagui'],
    }),
  ],

  // Vite 6 style configuration
  ssr: {
    noExternal: true,
  },

  optimizeDeps: {
    include: [
      '@tamagui/core',
      '@tamagui/config',
    ],
  },

  build: {
    cssTarget: 'safari15',
  },
} satisfies UserConfig

----------------------------------------

TITLE: Creating Tamagui Design System Configuration
DESCRIPTION: Example configuration for creating a design system with fonts, tokens, themes and media queries using createTamagui()

LANGUAGE: tsx
CODE:
import { createFont, createTamagui, createTokens } from 'tamagui'

const interFont = createFont({
  family: 'Inter, Helvetica, Arial, sans-serif',
  size: { 1: 12, 2: 14 /* ... */ },
})

const size = { 0: 0, 1: 5, 2: 10 /* ... */ }

const tokens = createTokens({
  size,
  space: { ...size, '-1': -5, '-2': -10 },
  radius: { 0: 0, 1: 3 },
  zIndex: { 0: 0, 1: 100, 2: 200 },
  color: { white: '#fff', black: '#000' },
})

export default createTamagui({
  fonts: {
    heading: interFont,
    body: interFont,
  },
  tokens,
  themes: {
    light: { bg: '#f2f2f2', color: tokens.color.black },
    dark: { bg: '#111', color: tokens.color.white },
  },
  media: {
    sm: { maxWidth: 860 },
    gtSm: { minWidth: 860 + 1 },
  },
  shorthands: {
    px: 'paddingHorizontal',
    f: 'flex',
  } as const,
})

----------------------------------------

TITLE: Basic Tabs Usage in React with Tamagui
DESCRIPTION: Demonstrates how to use the Tabs component from Tamagui to create a simple tabbed interface with two tabs and their respective content.

LANGUAGE: tsx
CODE:
import { SizableText, Tabs } from 'tamagui'

export default () => (
  <Tabs defaultValue="tab1" width={400}>
    <Tabs.List space>
      <Tabs.Tab value="tab1">
        <SizableText>Tab 1</SizableText>
      </Tabs.Tab>
      <Tabs.Tab value="tab2">
        <SizableText>Tab 2</SizableText>
      </Tabs.Tab>
    </Tabs.List>

    <Tabs.Content value="tab1">
      <H5>Tab 1</H5>
    </Tabs.Content>
    <Tabs.Content value="tab2">
      <H5>Tab 2</H5>
    </Tabs.Content>
  </Tabs>
)

----------------------------------------

TITLE: Advanced Theme Configuration
DESCRIPTION: Demonstrates comprehensive theme setup using createThemes with palette definitions, component themes, and production optimizations.

LANGUAGE: tsx
CODE:
import * as Colors from '@tamagui/colors'
import { createThemes, defaultComponentThemes } from '@tamagui/config/v4'

const darkPalette = [
  '#050505',
  '#151515',
  '#191919',
  '#232323',
  '#282828',
  '#323232',
  '#424242',
  '#494949',
  '#545454',
  '#626262',
  '#a5a5a5',
  '#fff',
]

// ... [rest of the theme configuration code] ...

export const themes: TamaguiThemes =
  process.env.TAMAGUI_ENVIRONMENT === 'client' &&
  process.env.NODE_ENV === 'production'
    ? {}
    : (generatedThemes as any)

----------------------------------------

TITLE: Accessing Tokens with Prefixed Option in Tamagui
DESCRIPTION: Demonstrates how to access tokens with the prefixed option, allowing to get only prefixed or non-prefixed values.

LANGUAGE: tsx
CODE:
// only non-$
getTokens({ prefixed: false }).size.small
// only $
getTokens({ prefixed: true }).['$size'].small

----------------------------------------

TITLE: Creating Styled Components with Variants
DESCRIPTION: Shows how to create custom styled components using the styled() function with margin variants.

LANGUAGE: tsx
CODE:
import { styled, View } from 'tamagui'

const CustomView = styled(View, {
  margin: 10,

  variants: {
    spaced: {
      true: {
        margin: 20
      }
    }
  } as const
})

----------------------------------------

TITLE: Multiple Toasts Implementation
DESCRIPTION: Example showing how to implement multiple concurrent toasts with animation.

LANGUAGE: tsx
CODE:
export default () => {
  const [savedCount, setSavedCount] = React.useState(0)

  return (
    <YStack ai="center">
      <Button
        onPress={() => {
          setSavedCount((old) => old + 1)
        }}
      >
        Show toast
      </Button>
      {[...Array(savedCount)].map((_, index) => (
        <Toast
          key={index}
          animation="100ms"
          enterStyle={{ x: -20, opacity: 0 }}
          exitStyle={{ x: -20, opacity: 0 }}
          opacity={1}
          x={0}
        >
          <Toast.Title>Subscribed!</Toast.Title>
          <Toast.Description>We'll be in touch.</Toast.Description>
        </Toast>
      ))}
    </YStack>
  )
}

----------------------------------------

TITLE: Implementing PortalProvider in React App
DESCRIPTION: Example of how to add PortalProvider to the root of a React application for use with the Tooltip component.

LANGUAGE: tsx
CODE:
import { PortalProvider } from '@tamagui/portal'
import YourApp from './components/YourApp'

function App() {
  return (
    <PortalProvider shouldAddRootHost>
      <YourApp />
    </PortalProvider>
  )
}

export default App

----------------------------------------

TITLE: Configuring Tamagui Base Setup
DESCRIPTION: Basic Tamagui configuration setup including type declarations and default config implementation.

LANGUAGE: tsx
CODE:
import { defaultConfig } from '@tamagui/config/v4'
import { createTamagui } from 'tamagui'

const tamaguiConfig = createTamagui(defaultConfig)

export default tamaguiConfig

// this is important!
export type Conf = typeof tamaguiConfig

declare module 'tamagui' {
  interface TamaguiCustomConfig extends Conf {}
}

----------------------------------------

TITLE: Static Utilities - Basic Structure
DESCRIPTION: Simple markdown heading demarcating the static section of the documentation.

LANGUAGE: markdown
CODE:
## static

----------------------------------------

TITLE: Configuring Icons with Props
DESCRIPTION: Example of using inline props to customize icon appearance with color and size

LANGUAGE: javascript
CODE:
<Icon.AlertCircle color="red" size={48} />

----------------------------------------

TITLE: Setting Up Native iOS Sheet Support in Tamagui
DESCRIPTION: Instructions for setting up native iOS sheet support in a Tamagui project, including installation and usage example.

LANGUAGE: bash
CODE:
yarn add react-native-ios-modal
pod install
# rebuild your app (expo ios, or use react-native cli)

LANGUAGE: tsx
CODE:
import { Sheet, setupNativeSheet } from '@tamagui/sheet'
import { ModalView } from 'react-native-ios-modal'

setupNativeSheet('ios', ModalView)

export default (
  <Sheet native>
    {/* The rest of your sheet views, see Anatomy, example and props API */}
  </Sheet>
)

----------------------------------------

TITLE: Configuring React Native Animated Driver
DESCRIPTION: Configuration for React Native's built-in Animated library in Tamagui, defining spring animation presets.

LANGUAGE: tsx
CODE:
import { createAnimations } from '@tamagui/animations-react-native'
import { createTamagui } from 'tamagui'

export default createTamagui({
  animations: createAnimations({
    fast: {
      damping: 20,
      mass: 1.2,
      stiffness: 250,
    },
    medium: {
      damping: 10,
      mass: 0.9,
      stiffness: 100,
    },
    slow: {
      damping: 20,
      stiffness: 60,
    },
  }),
  // ...
})

----------------------------------------

TITLE: AnimatePresence Example with Exit Animations
DESCRIPTION: Implementation of entrance and exit animations using AnimatePresence component with custom styles.

LANGUAGE: tsx
CODE:
import { AnimatePresence, View } from 'tamagui'

export const MyComponent = ({ isVisible }) => (
  <AnimatePresence>
    {isVisible && (
      <View
        key="my-square"
        animation="bouncy"
        backgroundColor="green"
        size={50}
        enterStyle={{
          opacity: 0,
          y: 10,
          scale: 0.9,
        }}
        exitStyle={{
          opacity: 0,
          y: -10,
          scale: 0.9,
        }}
      />
    )}
  </AnimatePresence>
)

----------------------------------------

TITLE: Implementing Select with Sheet for Native Platforms in Tamagui
DESCRIPTION: This snippet shows how to use the Select component with a Sheet for native platforms in Tamagui. It uses the Adapt component to render the Select as a sheet on touch devices at small breakpoints.

LANGUAGE: tsx
CODE:
import { Select } from 'tamagui' // or '@tamagui/select'

export default () => (
  <Select defaultValue="">
    <Select.Trigger>
      <Select.Value placeholder="Search..." />
    </Select.Trigger>

    <Adapt when="sm" platform="touch">
      {/* or <Select.Sheet> */}
      <Sheet>
        <Sheet.Frame>
          <SheetContents />
        </Sheet.Frame>
        <Sheet.Overlay />
      </Sheet>
    </Adapt>

    <Select.Content>
      <Select.ScrollUpButton />
      <Select.Viewport>
        <Select.Group>
          <Select.Label />
          <Select.Item>
            <Select.ItemText />
          </Select.Item>
        </Select.Group>
      </Select.Viewport>
      <Select.ScrollDownButton />
    </Select.Content>
  </Select>
)

----------------------------------------

TITLE: Implementing Select with Sheet for Native Platforms in Tamagui
DESCRIPTION: This snippet shows how to use the Select component with a Sheet for native platforms in Tamagui. It uses the Adapt component to render the Select as a sheet on touch devices at small breakpoints.

LANGUAGE: tsx
CODE:
import { Select } from 'tamagui' // or '@tamagui/select'

export default () => (
  <Select defaultValue="">
    <Select.Trigger>
      <Select.Value placeholder="Search..." />
    </Select.Trigger>

    <Adapt when="sm" platform="touch">
      {/* or <Select.Sheet> */}
      <Sheet>
        <Sheet.Frame>
          <SheetContents />
        </Sheet.Frame>
        <Sheet.Overlay />
      </Sheet>
    </Adapt>

    <Select.Content>
      <Select.ScrollUpButton />
      <Select.Viewport>
        <Select.Group>
          <Select.Label />
          <Select.Item>
            <Select.ItemText />
          </Select.Item>
        </Select.Group>
      </Select.Viewport>
      <Select.ScrollDownButton />
    </Select.Content>
  </Select>
)

----------------------------------------

TITLE: Installing Portal Component for Tamagui
DESCRIPTION: Instructions for installing the Portal component package in a Tamagui project. This code snippet shows the package name to be installed.

LANGUAGE: markdown
CODE:
<InstallBanner name="@tamagui/portal" />

----------------------------------------

TITLE: LinearGradient Hero Template
DESCRIPTION: Empty hero template placeholder for LinearGradient demonstration.

LANGUAGE: tsx
CODE:


----------------------------------------

TITLE: Using Parent Variants in Tamagui
DESCRIPTION: This snippet demonstrates how styled components can access their parent components' variants in Tamagui.

LANGUAGE: tsx
CODE:
const ColorfulText = styled(Text, {
  variants: {
    colored: {
      true: {
        color: '$color',
      },
    },

    large: {
      true: {
        fontSize: '$8',
      },
    },
  } as const,
})

const MyParagraph = styled(ColorfulText, {
  colored: true,

  variants: {
    hero: {
      true: {
        large: true,
      },
    },
  } as const,
})

----------------------------------------

TITLE: Configuring Debug Mode for Tamagui in Bash
DESCRIPTION: Sets the DEBUG environment variable to enable full stack traces for Tamagui errors. This is useful for troubleshooting Warning 001 related to ignorable modules.

LANGUAGE: bash
CODE:
DEBUG=tamagui

----------------------------------------

TITLE: Simple Group Usage - Tamagui TSX
DESCRIPTION: Demonstrates direct usage of XGroup without Group.Item components, where spacing is applied to direct children.

LANGUAGE: tsx
CODE:
import { Button, XGroup } from 'tamagui'

// usage without Item:
export default () => (
  <XGroup>
    <Button>First</Button>
    <Button>Second</Button>
    <Button>Third</Button>
  </XGroup>
)

----------------------------------------

TITLE: Customized Slider Implementation
DESCRIPTION: Example showing how to customize Slider components using styled components for custom styling.

LANGUAGE: tsx
CODE:
import { Slider, styled } from 'tamagui'

const CustomSliderTrack = styled(Slider.Track, {
  backgroundColor: 'red',
})

export default () => (
  <Slider size="$4" width={200} defaultValue={[50]} max={100} step={1}>
    <CustomSliderTrack>
      <Slider.TrackActive />
    </CustomSliderTrack>
    <Slider.Thumb circular index={0} />
  </Slider>
)

----------------------------------------

TITLE: Combining useMedia and useTheme in Tamagui
DESCRIPTION: Illustrates how to use useMedia and useTheme together for responsive styling in Tamagui components.

LANGUAGE: tsx
CODE:
import { YStack, useMedia, useTheme } from 'tamagui'

const App = () => {
  const theme = useTheme()
  const media = useMedia()

  return (
    <YStack
      y={media.sm ? 10 : 0}
      backgroundColor={media.lg ? theme.red : theme.blue}
      {...(media.xl && {
        y: theme.space2,
      })}
    />
  )
}

----------------------------------------

TITLE: Using Lucide Icons with Tamagui Button
DESCRIPTION: Example showing how to import and use Lucide icons with Tamagui Button component, demonstrating automatic theme and size inheritance.

LANGUAGE: tsx
CODE:
import { Play } from '@tamagui/lucide-icons'
import { Button } from 'tamagui'

// theme and size are properly passed from Button to icons automatically
export default () => <Button size="$6" icon={Play} />

----------------------------------------

TITLE: Group with Custom Size - Tamagui TSX
DESCRIPTION: Shows how to use the size property with XGroup to control border radius tokens.

LANGUAGE: tsx
CODE:
import { Button, XGroup } from 'tamagui'

export default () => (
  <XGroup size="$6">
    <XGroup.Item>
      <Button>First</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Second</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Third</Button>
    </XGroup.Item>
  </XGroup>
)

----------------------------------------

TITLE: Installing Tamagui Metro Plugin
DESCRIPTION: This command installs the necessary packages for using Tamagui with Metro, including the Metro plugin for Tamagui.

LANGUAGE: bash
CODE:
yarn add tamagui @tamagui/config @tamagui/metro-plugin

----------------------------------------

TITLE: Advanced Theme Selection in Tamagui
DESCRIPTION: Demonstrates how to use useTheme with custom theme and component theme names for more granular theme control.

LANGUAGE: tsx
CODE:
function MyComponent(props) {
  const theme = useTheme(props.theme, 'MyComponent')
}

----------------------------------------

TITLE: Installing Tamagui Toast Component
DESCRIPTION: Command to install the Toast component and its dependency 'burnt' package.

LANGUAGE: bash
CODE:
yarn add @tamagui/toast burnt

----------------------------------------

TITLE: Importing and Using Tamagui Heading Components in React
DESCRIPTION: This snippet demonstrates how to import and use various Heading components from Tamagui, including H1 through H6 and the base Heading component.

LANGUAGE: tsx
CODE:
import { H1, H2, H3, H4, H5, H6, Heading } from 'tamagui'

export default () => (
  <>
    <H1>Heading 1</H1>
    <H2>Heading 2</H2>
    <H3>Heading 3</H3>
    <H4>Heading 4</H4>
    <H5>Heading 5</H5>
    <H6>Heading 6</H6>
    <Heading>Heading</Heading>
  </>
)

----------------------------------------

TITLE: Configuring Metro for Native Tamagui Projects
DESCRIPTION: This snippet shows how to set up a basic Metro configuration for native Tamagui projects, including support for CSS and handling of 'mjs' files. It's particularly useful for monorepo setups.

LANGUAGE: typescript
CODE:
// Learn more https://docs.expo.io/guides/customizing-metro
const { getDefaultConfig } = require('expo/metro-config')

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname, {
  // [Web-only]: Enables CSS support in Metro.
  isCSSEnabled: true,
})

// Expo 49 issue: default metro config needs to include "mjs"
// https://github.com/expo/expo/issues/23180
config.resolver.sourceExts.push('mjs')

module.exports = config

----------------------------------------

TITLE: Configuring Design System Package.json
DESCRIPTION: Package.json configuration for a Tamagui design system, including dependencies, build scripts, and important fields like sideEffects for CSS handling.

LANGUAGE: json
CODE:
{
  "name": "@ourapp/components",
  "types": "./types/index.d.ts",
  "main": "dist/cjs",
  "module": "dist/esm",
  "module:jsx": "dist/jsx",
  "files": ["types", "src", "dist"],
  "sideEffects": ["*.css"],
  "dependencies": {
    "@tamagui/core": "*"
  },
  "scripts": {
    "build": "tamagui-build",
    "watch": "tamagui-build --watch"
  },
  "devDependencies": {
    "@tamagui/build": "*"
  }
}

----------------------------------------

TITLE: Creating Custom Token Categories in Tamagui
DESCRIPTION: Demonstrates how to create custom token categories, such as 'icon', with multiple size options.

LANGUAGE: tsx
CODE:
const tokens = createTokens({
  // ...other tokens
  icon: {
    small: 16,
    medium: 24,
    large: 32,
  },
})

----------------------------------------

TITLE: Installing Label Component in Tamagui
DESCRIPTION: Shows how to install the Label component from the @tamagui/label package.

LANGUAGE: tsx
CODE:
<InstallBanner name="@tamagui/label" />

----------------------------------------

TITLE: Configuring Metro for Web Support with Tamagui
DESCRIPTION: This configuration extends the basic Metro setup to include web support for Tamagui. It uses the Tamagui Metro plugin to enable optimizing compiler and CSS extraction features.

LANGUAGE: typescript
CODE:
// Learn more https://docs.expo.io/guides/customizing-metro
const { getDefaultConfig } = require('expo/metro-config')

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname, {
  // [Web-only]: Enables CSS support in Metro.
  isCSSEnabled: true,
})

// add nice web support with optimizing compiler + CSS extraction
const { withTamagui } = require('@tamagui/metro-plugin')
module.exports = withTamagui(config, {
  components: ['tamagui'],
  config: './tamagui.config.ts',
  outputCSS: './tamagui-web.css',
})

----------------------------------------

TITLE: Tamagui ViewStyle Type Definition
DESCRIPTION: Shows the TypeScript type definition for Tamagui's ViewStyle, including base styles, web-only styles, and transform styles.

LANGUAGE: tsx
CODE:
import { ViewStyle as RNViewStyle } from 'react-native'

type BaseViewStyle = RNViewStyle & FlatTransformStyles & WebOnlyStyles

// these are accepted but only render on web:
type WebOnlyStyles =  {
  contain?: Properties['contain']
  touchAction?: Properties['touchAction']
  cursor?: Properties['cursor']
  // ... additional web properties
}

----------------------------------------

TITLE: Creating Custom Sheet with createSheet in Tamagui
DESCRIPTION: Example of creating a fully custom sheet without default styles using the createSheet export in Tamagui.

LANGUAGE: tsx
CODE:
import { Stack, styled } from '@tamagui/core'
import { createSheet } from '@tamagui/sheet'

const Handle = styled(Stack, {
  variants: {
    open: {
      true: {
        opacity: 0.35,
      },
      false: {
        opacity: 0.5,
      },
    },
  } as const,
})

const Overlay = styled(Stack, {
  variants: {
    open: {
      true: {
        opacity: 1,
        pointerEvents: 'auto',
      },
      false: {
        opacity: 0,
        pointerEvents: 'none',
      },
    },
  } as const,
})

const Frame = styled(Stack, {
  backgroundColor: '$background',
  // can add open variant as well
})

export const Sheet = createSheet({
  Frame,
  Handle,
  Overlay,
})

----------------------------------------

TITLE: Installing Switch Component in Tamagui
DESCRIPTION: Instructions for installing the Switch component independently if not using the full Tamagui package.

LANGUAGE: bash
CODE:
npm install @tamagui/switch

----------------------------------------

TITLE: Installing Tooltip Component in Tamagui
DESCRIPTION: Commands to install the Tooltip component independently or as part of the Tamagui package.

LANGUAGE: bash
CODE:
npm install @tamagui/tooltip

----------------------------------------

TITLE: Simplified Group Usage without Items
DESCRIPTION: Demonstrates direct usage of XGroup with Button components without Group.Item wrappers for simpler implementation.

LANGUAGE: tsx
CODE:
import { Button, XGroup } from 'tamagui'

// usage without Item:
export default () => (
  <XGroup>
    <Button>First</Button>
    <Button>Second</Button>
    <Button>Third</Button>
  </XGroup>
)

----------------------------------------

TITLE: Customizing Tamagui Slider Component
DESCRIPTION: Example of how to customize the Slider component by styling the Slider.Track using the styled function from Tamagui.

LANGUAGE: tsx
CODE:
import { Slider, styled } from 'tamagui'

const CustomSliderTrack = styled(Slider.Track, {
  backgroundColor: 'red',
})

export default () => (
  <Slider size="$4" width={200} defaultValue={[50]} max={100} step={1}>
    <CustomSliderTrack>
      <Slider.TrackActive />
    </CustomSliderTrack>
    <Slider.Thumb circular index={0} />
  </Slider>
)

----------------------------------------

TITLE: Installing Switch Component in Tamagui
DESCRIPTION: Command to install the Switch component independently if not already included in Tamagui.

LANGUAGE: bash
CODE:
npm install @tamagui/switch

----------------------------------------

TITLE: Installing PortalProvider for Tooltip in @tamagui/core
DESCRIPTION: Installation command for PortalProvider, required when using Tooltip with @tamagui/core instead of the full Tamagui package.

LANGUAGE: bash
CODE:
npm install @tamagui/portal

----------------------------------------

TITLE: Basic Group Component Usage with Items - TSX
DESCRIPTION: Example showing how to use Group component with Group.Item wrappers to create a horizontal group of buttons with automatic spacing and borders.

LANGUAGE: tsx
CODE:
import { Button, XGroup } from 'tamagui'

// usage with Item:
export default () => (
  <XGroup>
    <XGroup.Item>
      <Button>First</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Second</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Third</Button>
    </XGroup.Item>
  </XGroup>
)

----------------------------------------

TITLE: Paragraph Component Definition in Tamagui
DESCRIPTION: Shows how to extend SizableText to create a Paragraph component with default theme values for fontFamily, color, and size.

LANGUAGE: tsx
CODE:
export const Paragraph = styled(SizableText, {
  fontFamily: '$body',
  color: '$color',
  // note tamagui uses a generic "true" token that your sizes should set to be the same as the default on your scale
  size: '$true',
})

----------------------------------------

TITLE: Installing Toast Component in Tamagui
DESCRIPTION: Command to install the Toast component and its dependencies using yarn.

LANGUAGE: bash
CODE:
yarn add @tamagui/toast burnt

----------------------------------------

TITLE: Using Custom Tamagui Components
DESCRIPTION: Example of importing and using a custom Tamagui component with debug pragma for optimization verification.

LANGUAGE: tsx
CODE:
// debug
// ^ the above pragma will direct Tamagui to output a lot of information on the extraction
import { Circle } from '@ourapp/components'

export default () => <Circle size="$large" />

----------------------------------------

TITLE: Basic Group Usage with Items in React
DESCRIPTION: Demonstrates how to use the XGroup component with Group.Item to create a horizontal group of buttons.

LANGUAGE: tsx
CODE:
import { Button, XGroup } from 'tamagui'

// usage with Item:
export default () => (
  <XGroup>
    <XGroup.Item>
      <Button>First</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Second</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Third</Button>
    </XGroup.Item>
  </XGroup>
)

----------------------------------------

TITLE: Setting Up Tamagui Visualizer in TSX
DESCRIPTION: Configures the Tamagui visualizer for development, allowing for a quick heads-up-display of styled components when holding a specific key.

LANGUAGE: tsx
CODE:
import { setupDev } from '@tamagui/core'

setupDev({
  // can just be true as well for defaulting to key: Alt + delay: 800
  visualizer: {
    key: 'Alt',
    delay: 800
  }
})

----------------------------------------

TITLE: Installing Toast Package
DESCRIPTION: Commands to install the Toast component and its native dependency Burnt.

LANGUAGE: bash
CODE:
yarn add @tamagui/toast burnt

----------------------------------------

TITLE: Configuring Next.js for Tamagui
DESCRIPTION: Next.js configuration using withTamagui plugin to enable Tamagui component compilation.

LANGUAGE: js
CODE:
export default withPlugins([
  withTamagui({
    config: './tamagui.config.ts',
    components: ['@ourapp/components', 'tamagui'],
  })
])

----------------------------------------

TITLE: Empty Button Hero Template
DESCRIPTION: Template placeholder for button demonstration.

LANGUAGE: tsx
CODE:


----------------------------------------

TITLE: AlertDialog Component Anatomy in Tamagui
DESCRIPTION: Demonstrates the structure and sub-components of the AlertDialog component in Tamagui.

LANGUAGE: tsx
CODE:
import { AlertDialog } from 'tamagui' // or '@tamagui/alert-dialog'

export default () => (
  <AlertDialog>
    <AlertDialog.Trigger />
    <AlertDialog.Portal>
      <AlertDialog.Overlay />
      <AlertDialog.Content>
        <AlertDialog.Title />
        <AlertDialog.Description />
        <AlertDialog.Cancel />
        {/* ... */}
      </AlertDialog.Content>
    </AlertDialog.Portal>
  </AlertDialog>
)

----------------------------------------

TITLE: Installing Tooltip Component in Tamagui
DESCRIPTION: Instructions for installing the Tooltip component independently if not using the full Tamagui package.

LANGUAGE: bash
CODE:
npm install @tamagui/tooltip

----------------------------------------

TITLE: Installing Webpack Dev Server
DESCRIPTION: Command to install webpack-dev-server as a development dependency using Yarn.

LANGUAGE: bash
CODE:
yarn add -D webpack-dev-server

----------------------------------------

TITLE: Styling Text Component with Theme Values and Direct Properties
DESCRIPTION: Shows how to apply theme values, direct styling properties, and hover styles to a Text component.

LANGUAGE: tsx
CODE:
import { Text, XStack, YStack } from 'tamagui'

export default () => (
  <>
    <Text
      // can add theme values
      color="$white"
      fontFamily="$body"
      // or just use direct values
      fontSize={20}
      hoverStyle={{
        color: '$colorHover',
      }}
    >
      Lorem ipsum
    </Text>
  </>
)

----------------------------------------

TITLE: Importing Full Icon Package
DESCRIPTION: Shows how to import the entire icon package and use icons with namespace notation

LANGUAGE: javascript
CODE:
import * as Icon from '@tamagui/lucide-icons';

class MyClass extends React.Component {
  render() {
    return <Icon.Camera />
  }
}

----------------------------------------

TITLE: Importing LinearGradient Component in TSX
DESCRIPTION: Examples of importing the LinearGradient component either directly from the package or through Tamagui.

LANGUAGE: tsx
CODE:
import { LinearGradient } from '@tamagui/linear-gradient'
import { LinearGradient } from 'tamagui/linear-gradient'

----------------------------------------

TITLE: Retrieving Tokens in Tamagui
DESCRIPTION: The getToken and getTokenValue functions retrieve token values. getToken returns a variable on web or raw value on native, while getTokenValue always returns the raw value.

LANGUAGE: tsx
CODE:
getToken('$size.small') // returns on web var(--size-small), native 14
getToken('$small', 'size') // returns on web var(--size-small), native 14

LANGUAGE: tsx
CODE:
getTokenValue('$size.small') // returns 14
getTokenValue('$small', 'size') // returns 14

----------------------------------------

TITLE: Defining the Base Heading Component in Tamagui
DESCRIPTION: This code shows how the base Heading component is defined in Tamagui, extending from the Paragraph component with specific styling and accessibility properties.

LANGUAGE: tsx
CODE:
export const Heading = styled(Paragraph, {
  tag: 'span',
  name: 'Heading',
  accessibilityRole: 'header',
  fontFamily: '$heading',
  size: '$8',
  margin: 0,
})

----------------------------------------

TITLE: Configuring Accordion with Default Expanded Item
DESCRIPTION: Example of setting a default expanded item in an Accordion using the defaultValue prop.

LANGUAGE: jsx
CODE:
<Accordion type="single" __defaultValue__="item-2">
  <Accordion.Item value="item-1">…</Accordion.Item>
  <Accordion.Item value="item-2">…</Accordion.Item>
</Accordion>

----------------------------------------

TITLE: Installing LinearGradient Package
DESCRIPTION: Command to install the LinearGradient package as a dependency in your project.

LANGUAGE: bash
CODE:
npm install @tamagui/linear-gradient

----------------------------------------

TITLE: Type Helpers for Tamagui Components
DESCRIPTION: The GetProps and GetRef type helpers fetch the prop types and ref types for Tamagui components, respectively. They are useful for type-safe component development.

LANGUAGE: tsx
CODE:
import { Stack, GetProps, styled } from '@tamagui/core'

const X = styled(Stack, {})

type XProps = GetProps<typeof X>

LANGUAGE: tsx
CODE:
import { Stack, GetRef, styled } from '@tamagui/core'

const X = styled(Stack, {})

const MyComponent = () => {
  const ref = useRef<GetRef<typeof X>>()
  return <X ref={ref} />
}

----------------------------------------

TITLE: Initializing Input Component in Tamagui (TSX)
DESCRIPTION: Demonstrates how to import and use the Input component from Tamagui. The Input component accepts size and style properties directly, allowing for flexible customization.

LANGUAGE: tsx
CODE:
import { Input } from 'tamagui'

export const App = () => (
  // Accepts size and style properties directly
  <Input size="$4" borderWidth={2} />
)

----------------------------------------

TITLE: Installing Tamagui Core Package
DESCRIPTION: Command to install the core Tamagui package using Yarn package manager.

LANGUAGE: bash
CODE:
yarn add @tamagui/core

----------------------------------------

TITLE: Installing Tamagui Core Package
DESCRIPTION: Command to install the core Tamagui package using Yarn package manager.

LANGUAGE: bash
CODE:
yarn add @tamagui/core

----------------------------------------

TITLE: Installing RadioGroup Component in Tamagui
DESCRIPTION: Command to install the RadioGroup component independently from Tamagui.

LANGUAGE: bash
CODE:
npm install @tamagui/radio-group

----------------------------------------

TITLE: Basic Usage of ToggleGroup Component in React
DESCRIPTION: Example of how to use the ToggleGroup component with two toggle items in a React component.

LANGUAGE: tsx
CODE:
import { ToggleGroup } from 'tamagui'

export default () => {
  return (
    <ToggleGroup type="single">
      <ToggleGroup.Item value="foo"></ToggleGroup.Item>
      <ToggleGroup.Item value="bar"></ToggleGroup.Item>
    </ToggleGroup>
  )
}

----------------------------------------

TITLE: Installing Tamagui Input Component
DESCRIPTION: Command to install the Tamagui input component package via npm.

LANGUAGE: bash
CODE:
npm install @tamagui/input

----------------------------------------

TITLE: Basic Shapes Usage in Tamagui
DESCRIPTION: Demonstrates how to use Square and Circle components with both token-based and numeric sizing. The components can be sized using either the design system tokens (e.g., '$4') or direct pixel values.

LANGUAGE: tsx
CODE:
import { Circle, Square } from 'tamagui'

export default () => (
  <>
    <Square size="$4" />
    <Square size={100} />
    <Circle size="$4" />
    <Circle size={100} />
  </>
)

----------------------------------------

TITLE: Installing Avatar Component - Bash
DESCRIPTION: Command to install the Avatar component package independently from Tamagui.

LANGUAGE: bash
CODE:
npm install @tamagui/avatar

----------------------------------------

TITLE: Initializing Group Component with Items in Tamagui (TSX)
DESCRIPTION: Demonstrates how to use the XGroup component with Group.Item to create a horizontal group of buttons.

LANGUAGE: tsx
CODE:
import { Button, XGroup } from 'tamagui'

// usage with Item:
export default () => (
  <XGroup>
    <XGroup.Item>
      <Button>First</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Second</Button>
    </XGroup.Item>
    <XGroup.Item>
      <Button>Third</Button>
    </XGroup.Item>
  </XGroup>
)

----------------------------------------

TITLE: Implementing Single-line Input Component
DESCRIPTION: Example showing how to implement a basic single-line input field using Tamagui's Input component with custom styling properties.

LANGUAGE: tsx
CODE:
import { Input } from 'tamagui'

export const App = () => (
  // Accepts size and style properties directly
  <Input gap="$4" borderWidth={2} />
)

----------------------------------------

TITLE: Installing Portal Provider for Sheet Component
DESCRIPTION: Command to install the Portal Provider, which is required when rendering the Sheet component at the root of the app.

LANGUAGE: bash
CODE:
npm install @tamagui/portal

----------------------------------------

TITLE: Installing Headless Checkbox in Tamagui
DESCRIPTION: Command to install the headless Checkbox component, which has no dependency on @tamagui/core but works with react-native APIs.

LANGUAGE: bash
CODE:
npm install @tamagui/switch-headless

----------------------------------------

TITLE: Using useToastState Hook in Tamagui
DESCRIPTION: Example of using the useToastState hook to render toast contents conditionally.

LANGUAGE: tsx
CODE:
const CurrentToast = () => {
  const toast = useToastState()

  if (!toast || toast.isHandledNatively) {
    return null
  }

  return (
    <Toast key={toast.id} duration={toast.duration} viewport={toast.viewport}>
      <Toast.Title>{toast.title}</Toast.Title>
      <Toast.Description>{toast.message}</Toast.Description>
    </Toast>
  )
}

----------------------------------------

TITLE: Using Label Component in Tamagui
DESCRIPTION: Demonstrates how to import and use the Label component with an Input element.

LANGUAGE: tsx
CODE:
import { Label } from 'tamagui'

export default () => (
  <>
    <Label htmlFor="name">Name</Label>
    <Input id="name" defaultValue="Nate Wienert" />
  </>
)

----------------------------------------

TITLE: Creating Custom Sheet Component with createSheet
DESCRIPTION: Example of using createSheet to create a fully custom Sheet component with custom styles for Handle, Overlay, and Frame.

LANGUAGE: tsx
CODE:
import { Stack, styled } from '@tamagui/core'
import { createSheet } from '@tamagui/sheet'

const Handle = styled(Stack, {
  variants: {
    open: {
      true: {
        opacity: 0.35,
      },
      false: {
        opacity: 0.5,
      },
    },
  } as const,
})

const Overlay = styled(Stack, {
  variants: {
    open: {
      true: {
        opacity: 1,
        pointerEvents: 'auto',
      },
      false: {
        opacity: 0,
        pointerEvents: 'none',
      },
    },
  } as const,
})

const Frame = styled(Stack, {
  backgroundColor: '$background',
  // can add open variant as well
})

export const Sheet = createSheet({
  Frame,
  Handle,
  Overlay,
})

----------------------------------------

TITLE: Installing Checkbox Component in Tamagui
DESCRIPTION: Command to install the Checkbox component independently from Tamagui.

LANGUAGE: bash
CODE:
npm install @tamagui/checkbox

----------------------------------------

TITLE: Adding Custom Font with addFont Function in Tamagui (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the addFont function to add a custom font to a Tamagui project. It specifies the font family, weights, and file paths for different font styles.

LANGUAGE: typescript
CODE:
import { addFont } from '@tamagui/core'

addFont({
  family: 'Inter',
  weights: {
    400: { normal: 'inter.woff2' },
    600: { normal: 'inter-semibold.woff2' },
    700: { normal: 'inter-bold.woff2' },
    800: { normal: 'inter-bold.woff2' },
  },
})

----------------------------------------

TITLE: Installing Tamagui Slider Component
DESCRIPTION: Command to install the Slider component independently from the Tamagui package using npm.

LANGUAGE: bash
CODE:
npm install @tamagui/slider

----------------------------------------

TITLE: Installing Form Component for Tamagui
DESCRIPTION: Command to install the Form component independently using npm.

LANGUAGE: bash
CODE:
npm install @tamagui/form

----------------------------------------

TITLE: Configuring Package.json for Tamagui Build
DESCRIPTION: Example package.json configuration showing required fields and structure for using @tamagui/build. Includes export configurations for different platforms and build settings.

LANGUAGE: json
CODE:
{
  "source": "src/index.tsx",
  "types": "./types/index.d.ts",
  "main": "dist/cjs",
  "module": "dist/esm",
  "removeSideEffects": "true",
  "scripts": {
    "build": "tamagui-build",
    "watch": "tamagui-build --watch",
    "clean": "tamagui-build clean"
  },
  "exports": {
    "./package.json": "./package.json",
    ".": {
      "react-native-import": "./dist/esm/index.native.js",
      "react-native": "./dist/cjs/index.native.js",
      "types": "./types/index.d.ts",
      "import": "./dist/esm/index.mjs",
      "require": "./dist/cjs/index.js"
    }
  },
  "devDependencies": {
    "@tamagui/build": "latest"
  },
  "tamagui": {
    "build": {
      "skipEnvToMeta": true,
      "bundle.native": "./src/index.ts",
      "bundle.native.test": "./src/index.ts"
    }
  }
}

----------------------------------------

TITLE: Defining Switch Component Props in TypeScript
DESCRIPTION: This code block defines the props available for the Switch component, including accessibility attributes, control states, and styling options.

LANGUAGE: tsx
CODE:
{
  name: 'labeledBy',
  type: 'string',
  description: `Set aria-labeled-by.`,
},
{
  name: 'name',
  type: 'string',
  description: `Equivalent to input name.`,
},
{
  name: 'value',
  type: 'string',
  description: `Give it a value (for use in HTML forms).`,
},
{
  name: 'checked',
  type: 'boolean',
  description: `Control the input.`,
},
{
  name: 'defaultChecked',
  type: 'boolean',
  description: `Uncontrolled default value.`,
},
{
  name: 'required',
  type: 'boolean',
  description: `Sets aria-required.`,
},
{
  name: 'onCheckedChange',
  type: '(checked: boolean) => void',
},
{
  name: 'unstyled',
  type: 'boolean',
  default: 'false',
  description: `When true, remove all default tamagui styling.`,
}

----------------------------------------

TITLE: Setting Up Native iOS Sheet Support in Tamagui
DESCRIPTION: Instructions for installing and configuring native iOS sheet support in a Tamagui project.

LANGUAGE: bash
CODE:
yarn add react-native-ios-modal@3.0.0-5 react-native-ios-utilities@next @dominicstop/ts-event-emitter

LANGUAGE: tsx
CODE:
import { Sheet, setupNativeSheet } from '@tamagui/sheet'
import * as NativeModal from 'react-native-ios-modal'

setupNativeSheet('ios', NativeModal)

// now you can use the `native` prop:

export default (
  <Sheet native>
    {/* ... the rest of your sheet */}
  </Sheet>
)

----------------------------------------

TITLE: Sizing ListItem Component in Tamagui
DESCRIPTION: Example of using the size prop to adjust the ListItem's size based on theme values.

LANGUAGE: tsx
CODE:
import { ListItem } from 'tamagui'

export default () => <ListItem size="$6">Lorem ipsum</ListItem>

----------------------------------------

TITLE: AnimatePresence Implementation Example
DESCRIPTION: Demonstrates how to use AnimatePresence component for enter/exit animations with sliding pane implementation and direction-based variants.

LANGUAGE: tsx
CODE:
function MyComponent() {
  // you would have your own logic for the "direction" here:
  const towards = isGoingRight ? -1 : 1
  
  return (
    <AnimatePresence custom={{ towards }} initial={false}>
      {/* note the key changes when you need to "run" the animation: */}
      <SlidingPane key={currentPane} animation="200ms">
        {/* Contents of your pane */}
      </SlidingPane>
    </AnimatePresence>
  )
}

const SlidingPane = styled(View, {
  x: 0,
  opacity: 1,

  variants: {
    towards: (dir: Direction) => ({
      enterStyle: {
        x: dir === -1 ? -10 : 10,
        opacity: 0,
      },
      exitStyle: {
        x: dir === -1 ? 10 : -10
        opacity: 0,
      },
    }),
  } as const,
})

----------------------------------------

TITLE: Basic Usage of Switch Component in Tamagui
DESCRIPTION: Demonstrates how to import and use the Switch component with a custom size and animated thumb.

LANGUAGE: tsx
CODE:
import { Switch } from 'tamagui' // or '@tamagui/switch'

export default () => (
  <Switch size="$4">
    <Switch.Thumb animation="bouncy" />
  </Switch>
)

----------------------------------------

TITLE: Image Component JSX Example
DESCRIPTION: Example of using the Tamagui Image component with specific sizing and styling props.

LANGUAGE: jsx
CODE:
<Image
  title="Tamagui v1 Release Candidate"
  src="/banner-rc0.jpg"
  size="hero"
  overlap
  height={275}
  width={761}
  resizeMode="contain"
  mb="$4"
/>

----------------------------------------

TITLE: Creating Tamagui Expo Router Project
DESCRIPTION: Command to create a new Tamagui project using the Expo Router template. Requires Yarn 4.4.0 or greater.

LANGUAGE: bash
CODE:
yarn create tamagui@latest --template expo-router

----------------------------------------

TITLE: Basic Inline Styling with Tamagui Components
DESCRIPTION: Demonstrates basic inline styling using Tamagui's View and Text components with direct style props and token references.

LANGUAGE: tsx
CODE:
import { View, Text } from 'tamagui'

export default () => (
  <>
    <View backgroundColor="red" />
    <Text fontSize={16} color="$colorToken" />
  </>
)

----------------------------------------

TITLE: Basic Usage of RadioGroup Component in React
DESCRIPTION: Example of how to use the RadioGroup component in a React application. It demonstrates creating a radio group with two radio items.

LANGUAGE: tsx
CODE:
import { RadioGroup } from 'tamagui'

export default () => (
  <RadioGroup value="foo" gap="$2">
    <RadioGroup.Item value="foo" id="foo-radio-item">
      <RadioGroup.Indicator />
    </RadioGroup.Item>
    <RadioGroup.Item value="bar" id="bar-radio-item">
      <RadioGroup.Indicator />
    </RadioGroup.Item>
  </RadioGroup>
)

----------------------------------------

TITLE: Installing Headless Switch Component in Tamagui
DESCRIPTION: Command to install the headless Switch component, which has no dependency on @tamagui/core.

LANGUAGE: bash
CODE:
npm install @tamagui/switch-headless

----------------------------------------

TITLE: Initializing Expo TypeScript Project
DESCRIPTION: Command to create a new Expo project with TypeScript support using the blank template.

LANGUAGE: bash
CODE:
yarn dlx create-expo-app -t expo-template-blank-typescript

----------------------------------------

TITLE: Social Links Component JSX Example
DESCRIPTION: Example of using the SocialLinksRow component for displaying social media links.

LANGUAGE: jsx
CODE:
<SocialLinksRow />

----------------------------------------

TITLE: Installing ToggleGroup Component in Tamagui
DESCRIPTION: Command to install the ToggleGroup component independently if not already included in Tamagui.

LANGUAGE: bash
CODE:
npm install @tamagui/toggle-group

----------------------------------------

TITLE: Implementing SizableText Component with Dynamic Styling in Tamagui
DESCRIPTION: This snippet demonstrates the implementation of the SizableText component, which provides the foundation for size-based styling used in Heading components. It shows how font properties are dynamically applied based on the size prop.

LANGUAGE: tsx
CODE:
import { Text } from 'tamagui' // or '@tamagui/core'

const SizableText = styled(Text, {
  name: 'SizableText',
  fontFamily: '$body',
  color: '$color',

  variants: {
    size: {
      '...fontSize': (val, { font, props }) => {
        const fontSize = font.size[val]
        const lineHeight = font.lineHeight[val]
        const fontWeight = font.weight[val]
        const letterSpacing = font.letterSpacing[val]
        const fontStyle = font.style?.[val]
        const textTransform = font.transform?.[val]
        return {
          fontStyle,
          textTransform,
          fontWeight,
          letterSpacing,
          fontSize,
          lineHeight,
        }
      },
    },
  },

  defaultVariants: {
    // note tamagui uses a generic "true" token that your sizes should set to be the same as the default on your scale
    size: '$true',
  },
})

----------------------------------------

TITLE: Installing Webpack and Webpack CLI
DESCRIPTION: Command to install webpack and webpack-cli as development dependencies using Yarn.

LANGUAGE: bash
CODE:
yarn add -D webpack webpack-cli

----------------------------------------

TITLE: Configuring Animated Switch Component with Tamagui
DESCRIPTION: Example demonstrating the usage of Tamagui's new Switch component with spring animations. Shows component implementation with theme and animation properties.

LANGUAGE: tsx
CODE:
export default () => <Button size="$6" icon={Play} />

----------------------------------------

TITLE: Implementing Popover Component Structure in React
DESCRIPTION: Demonstrates the basic structure and anatomy of the Popover component, including Trigger, Content, Arrow, Close, and optional Adapt features for responsive design.

LANGUAGE: tsx
CODE:
import { Popover } from 'tamagui' // or '@tamagui/popover'

export default () => (
  <Popover>
    <Popover.Trigger />

    <Popover.Content>
      <Popover.Arrow />
      <Popover.Close />
      {/* ScrollView is optional, can just put any contents inside if not scrollable */}
      <Popover.ScrollView>{/* ... */}</Popover.ScrollView>
      {/* ... */}
    </Popover.Content>

    {/* optionally change to sheet when small screen */}
    <Popover.Adapt when="sm">
      <Popover.Sheet>
        <Popover.Sheet.Overlay />
        <Popover.Sheet.Frame>
          <Popover.Sheet.ScrollView>
            <Popover.Adapt.Contents />
          </Popover.Sheet.ScrollView>
        </Popover.Sheet.Frame>
      </Popover.Sheet>
    </Popover.Adapt>
  </Popover>
)

----------------------------------------

TITLE: Running Webpack Dev Server
DESCRIPTION: Command to start the Webpack development server using Yarn.

LANGUAGE: bash
CODE:
yarn run webpack serve

----------------------------------------

TITLE: Rendering an Image Component with Props in JSX
DESCRIPTION: This code snippet shows how to use a custom Image component with various props including title, src, size, and height.

LANGUAGE: jsx
CODE:
<Image
  title="Layout tools image"
  src="/blog/introducing-tamagui/hero.png"
  size="hero"
  height={200}
/>

----------------------------------------

TITLE: Installing Tamagui Popover Package
DESCRIPTION: Command to install the Popover component independently from the main Tamagui package

LANGUAGE: bash
CODE:
npm install @tamagui/popover

----------------------------------------

TITLE: Starting Remix Development Server with Vite
DESCRIPTION: Command to run the Vite development server for local development of the Remix + Tamagui application.

LANGUAGE: shell
CODE:
npm run dev

----------------------------------------

TITLE: Starting Stripe Webhook Listener
DESCRIPTION: Command to start the Stripe webhook listener for local development, forwarding events to the local server.

LANGUAGE: bash
CODE:
stripe listen --load-from-webhooks-api --forward-to http://localhost:8081/api/stripe/webhook

----------------------------------------

TITLE: Implementing PortalProvider in React App
DESCRIPTION: Setup code for adding PortalProvider to the root of a React application for modal rendering support.

LANGUAGE: tsx
CODE:
import { PortalProvider } from '@tamagui/portal'
import YourApp from './components/YourApp'

function App() {
  return (
    <PortalProvider shouldAddRootHost>
      <YourApp />
    </PortalProvider>
  )
}

----------------------------------------

TITLE: Installing Tamagui Popover Package
DESCRIPTION: Commands for installing the Popover component and its portal dependency.

LANGUAGE: bash
CODE:
npm install @tamagui/popover
npm install @tamagui/portal

----------------------------------------

TITLE: Generating Screenshots using Yarn for Tamagui Kitchen-Sink App
DESCRIPTION: Command to generate screenshots from the kitchen-sink demo application in the Tamagui project using yarn.

LANGUAGE: bash
CODE:
yarn screenshot

----------------------------------------

TITLE: Basic Popover Component Structure
DESCRIPTION: Example showing the complete anatomy of a Popover component with all possible subcomponents including adaptive sheet behavior.

LANGUAGE: tsx
CODE:
import { Popover, Adapt } from 'tamagui' // or '@tamagui/popover'

export default () => (
  <Popover>
    <Popover.Trigger />

    <Popover.Content>
      <Popover.Arrow />
      <Popover.Close />
      <Popover.ScrollView>{/* ... */}</Popover.ScrollView>
      {/* ... */}
    </Popover.Content>

    <Adapt when="sm">
      <Popover.Sheet>
        <Popover.Sheet.Overlay />
        <Popover.Sheet.Frame>
          <Popover.Sheet.ScrollView>
            <Adapt.Contents />
          </Popover.Sheet.ScrollView>
        </Popover.Sheet.Frame>
      </Popover.Sheet>
    </Adapt>
  </Popover>
)

----------------------------------------

TITLE: Installing Progress Component
DESCRIPTION: Instructions for installing the Progress component independently from the Tamagui package using npm.

LANGUAGE: bash
CODE:
npm install @tamagui/progress

----------------------------------------

TITLE: Building One App for Web Production
DESCRIPTION: Command to build the One app for web production deployment using Yarn.

LANGUAGE: bash
CODE:
yarn build:web

----------------------------------------

TITLE: Basic Popover Component Structure
DESCRIPTION: Example showing the complete anatomy of a Popover component including trigger, content, arrow, and adaptive sheet view for mobile.

LANGUAGE: tsx
CODE:
import { Popover, Adapt } from 'tamagui' // or '@tamagui/popover'

export default () => (
  <Popover>
    <Popover.Trigger />

    <Popover.Content>
      <Popover.Arrow />
      <Popover.Close />
      <Popover.ScrollView>{/* ... */}</Popover.ScrollView>
      {/* ... */}
    </Popover.Content>

    <Adapt when="sm">
      <Popover.Sheet>
        <Popover.Sheet.Overlay />
        <Popover.Sheet.Frame>
          <Popover.Sheet.ScrollView>
            <Adapt.Contents />
          </Popover.Sheet.ScrollView>
        </Popover.Sheet.Frame>
      </Popover.Sheet>
    </Adapt>
  </Popover>
)

----------------------------------------

TITLE: Installing Sheet Component in Tamagui
DESCRIPTION: Commands for installing the Sheet component and its portal dependency in a Tamagui project.

LANGUAGE: bash
CODE:
npm install @tamagui/sheet
npm install @tamagui/portal

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Install all project dependencies using Yarn package manager.

LANGUAGE: bash
CODE:
yarn install

----------------------------------------

TITLE: Installing Popover Package
DESCRIPTION: Commands for installing the Popover component and its portal dependency.

LANGUAGE: bash
CODE:
npm install @tamagui/popover
npm install @tamagui/portal

----------------------------------------

TITLE: Rendering Benchmark Charts in JSX
DESCRIPTION: These code snippets demonstrate the use of custom BenchmarkChart and BenchmarkChartNative components to visualize performance data. They render bar charts comparing the performance of various styling libraries including Tamagui, React Native Web, Dripsy, NativeBase, Stitches, Emotion, and styled-components.

LANGUAGE: jsx
CODE:
<BenchmarkChartNative />

LANGUAGE: jsx
CODE:
<BenchmarkChart
  data={[
    { name: 'Tamagui', value: 0.018 },
    { name: 'RNW', value: 0.057 },
    { name: 'Dripsy', value: 0.042 },
    { name: 'NativeBase', value: 0.67 },
    { name: 'Stitches', value: 0.023 },
    { name: 'Emotion', value: 0.041 },
  ]}
/>

LANGUAGE: jsx
CODE:
<BenchmarkChart
  data={[
    { name: 'Tamagui', value: 0.02 },
    { name: 'RNW', value: 0.063 },
    { name: 'Dripsy', value: 0.108 },
    { name: 'NativeBase', value: 0.73 },
    { name: 'Stitches', value: 0.037 },
    { name: 'Emotion', value: 0.069 },
    { name: 'SC', value: 0.081 },
  ]}
/>

LANGUAGE: jsx
CODE:
<BenchmarkChart
  data={[
    { name: 'Tamagui', value: 0.025 },
    { name: 'RNW', value: 0.06 },
    { name: 'Dripsy', value: 0.266 },
    { name: 'NativeBase', value: 0.8 },
    { name: 'Stitches', value: 0.027 },
    { name: 'Emotion', value: 0.047 },
  ]}
/>

LANGUAGE: jsx
CODE:
<BenchmarkChart
  data={[
    { name: 'Tamagui', value: 31.0 },
    { name: 'Dripsy', value: 57.5 },
    { name: 'Stitches', value: 14.5 },
    { name: 'Emotion', value: 49.01 },
  ]}
/>

LANGUAGE: jsx
CODE:
<BenchmarkChart
  data={[
    { name: 'Tamagui', value: 18.61 },
    { name: 'Dripsy', value: 44.43 },
    { name: 'Stitches', value: 8.32 },
    { name: 'Emotion', value: 42.49 },
    { name: 'SC', value: 51.4 },
  ]}
/>

----------------------------------------

TITLE: Setting Font Family on a Paragraph Component in TSX
DESCRIPTION: Shows how to set a font family on a Paragraph component, which generates specific classnames for the component and font family.

LANGUAGE: tsx
CODE:
<Paragraph fontFamily="$body" />

----------------------------------------

TITLE: Implementing PortalProvider in React App
DESCRIPTION: Example of how to add PortalProvider to the root of a React application for using AlertDialog independently.

LANGUAGE: tsx
CODE:
import { PortalProvider } from '@tamagui/portal'
import YourApp from './components/YourApp'

function App() {
  return (
    <PortalProvider shouldAddRootHost>
      <YourApp />
    </PortalProvider>
  )
}

export default App

----------------------------------------

TITLE: Advanced Theme Suite Creation with createThemes in Tamagui
DESCRIPTION: This example shows a more comprehensive use of createThemes to generate a production-grade theme suite. It includes accent themes and child themes for warning, error, and success states.

LANGUAGE: tsx
CODE:
import { createThemes } from '@tamagui/theme-builder'
import * as Colors from '@tamagui/colors'

export const themes = createThemes({
  base: {
    palette: {
      dark: ['#000', '#fff',],
      light: ['#fff', '#000'],
    },
  },

  accent: {
    palette: {
      dark: ['#fff', '#000'],
      light: ['#000', '#fff',],
    },
  }

  childrenThemes: {
    warning: {
      palette: {
        dark: Object.values(Colors.yellowDark),
        light: Object.values(Colors.yellow),
      },
    },

    error: {
      palette: {
        dark: Object.values(Colors.redDark),
        light: Object.values(Colors.red),
      },
    },

    success: {
      palette: {
        dark: Object.values(Colors.greenDark),
        light: Object.values(Colors.green),
      },
    },
  },
})

----------------------------------------

TITLE: Installing and Running create-tamagui Script
DESCRIPTION: This command uses npm to run the create-tamagui script, which sets up a new Tamagui monorepo project. It creates the project structure and installs necessary dependencies.

LANGUAGE: sh
CODE:
npm create tamagui

----------------------------------------

TITLE: Installing Sheet Component in Tamagui
DESCRIPTION: Command to install the Sheet component independently in a Tamagui project.

LANGUAGE: bash
CODE:
npm install @tamagui/sheet

----------------------------------------

TITLE: Demonstrating Image Component Usage in Tamagui (TSX)
DESCRIPTION: This code snippet is a placeholder for demonstrating the usage of the Image component in Tamagui. It's marked as a 'hero' template, indicating it's meant to showcase the primary functionality of the component.

LANGUAGE: tsx
CODE:
```tsx hero template=Image

```

----------------------------------------

TITLE: Intro Paragraph Component JSX Example
DESCRIPTION: Example of using the IntroParagraph component to describe Tamagui's core functionality.

LANGUAGE: jsx
CODE:
<IntroParagraph>
  Tamagui is an optimizing compiler meets universal style system for React that enables
  highly performant styles for React Native and web.
</IntroParagraph>

----------------------------------------

TITLE: Demonstrating Image Component Usage in Tamagui (TSX)
DESCRIPTION: This code snippet is a placeholder for demonstrating the usage of the Image component in Tamagui. It's marked as a 'hero' template, indicating it's meant to showcase the primary functionality of the component.

LANGUAGE: tsx
CODE:
```tsx hero template=Image

```

----------------------------------------

TITLE: Implementing Portal Provider in Tamagui App
DESCRIPTION: Example of how to add the PortalProvider to the root of a Tamagui app for use with the Sheet component.

LANGUAGE: tsx
CODE:
import { PortalProvider } from '@tamagui/portal'
import YourApp from './components/YourApp'

function App() {
  return (
    <PortalProvider shouldAddRootHost>
      <YourApp />
    </PortalProvider>
  )
}

export default App

----------------------------------------

TITLE: Installing @tamagui/config package
DESCRIPTION: Command to install the @tamagui/config package using npm.

LANGUAGE: bash
CODE:
npm install @tamagui/config

----------------------------------------

TITLE: Configuring Next.js for Tamagui
DESCRIPTION: Next.js configuration example showing how to set up Tamagui with various options and optimizations.

LANGUAGE: javascript
CODE:
const withPlugins = require('next-compose-plugins')
const { withTamagui } = require('@tamagui/next-plugin')

export default withPlugins([
  withTamagui({
    config: './tamagui.config.ts',
    components: ['tamagui'],
    disableExtraction: process.env.NODE_ENV === 'development',
    excludeReactNativeWebExports: ['Switch', 'ProgressBar', 'Picker'],
    shouldExtract: (path, projectRoot) => {
      if (path.includes('../packages/myapp')) {
        return true
      }
    },
    shouldExcludeFromServer: ({ fullPath, request }) => {
      if (fullPath.includes('my-module')) {
        return 'commonjs ' + commonjs
      }
      if (request === 'some-hard-to-bundle-package') {
        return true
      }
    },
  })
])

----------------------------------------

TITLE: Implementing Single Toast with Barebone API in React
DESCRIPTION: This snippet shows how to implement a single toast using the barebone API, including state management and animation styles.

LANGUAGE: tsx
CODE:
export default () => {
  const [open, setOpen] = React.useState(false)
  const timerRef = React.useRef(0)

  React.useEffect(() => {
    return () => clearTimeout(timerRef.current)
  }, [])

  return (
    <YStack ai="center">
      <Button
        onPress={() => {
          setOpen(false)
          window.clearTimeout(timerRef.current)
          timerRef.current = window.setTimeout(() => {
            setOpen(true)
          }, 150)
        }}
      >
        Single Toast
      </Button>
      <Toast
        onOpenChange={setOpen}
        open={open}
        animation="100ms"
        enterStyle={{ x: -20, opacity: 0 }}
        exitStyle={{ x: -20, opacity: 0 }}
        opacity={1}
        x={0}
      >
        <Toast.Title>Subscribed!</Toast.Title>
        <Toast.Description>We'll be in touch.</Toast.Description>
      </Toast>
    </YStack>
  )
}

----------------------------------------

TITLE: Initializing Group Component without Items in Tamagui (TSX)
DESCRIPTION: Shows how to use the XGroup component without Group.Item, which applies borders and spacing based on direct children.

LANGUAGE: tsx
CODE:
import { Button, XGroup } from 'tamagui'

// usage without Item:
export default () => (
  <XGroup>
    <Button>First</Button>
    <Button>Second</Button>
    <Button>Third</Button>
  </XGroup>
)

----------------------------------------

TITLE: Configuring Webpack for Tamagui Compilation
DESCRIPTION: Webpack configuration example showing how to set up Tamagui loader with various options and optimizations.

LANGUAGE: javascript
CODE:
const { shouldExclude } = require('tamagui-loader')

const tamaguiOptions = {
  config: './tamagui.config.ts',
  components: ['tamagui'],
  importsWhitelist: ['constants.js', 'colors.js'],
  logTimings: true,
  disableExtraction: process.env.NODE_ENV === 'development',
  enableDynamicEvaluation: false,
}

module.exports = {
  resolve: {
    alias: {
      'react-native$': require.resolve('react-native-web'),
      'react-native-svg': require.resolve('@tamagui/react-native-svg'),
    }
  },
  module: {
    rules: [
      {
        test: /\.[jt]sx?$/,
        exclude: path => shouldExclude(path, __dirname, tamaguiOptions),
        use: [
          'thread-loader',
          {
            loader: 'esbuild-loader',
          },
          {
            loader: 'tamagui-loader',
            options: tamaguiOptions,
          },
        ]
      }
    ]
  },
}

----------------------------------------

TITLE: Customizing Toast Placement in Tamagui
DESCRIPTION: Examples of how to customize the placement of toasts using the ToastViewport component in Tamagui.

LANGUAGE: tsx
CODE:
<ToastViewport flexDirection="column-reverse" top={0} right={0} />

LANGUAGE: tsx
CODE:
<ToastViewport flexDirection="column" bottom={0} left={0} right={0} />

----------------------------------------

TITLE: Basic Toast Component Structure
DESCRIPTION: Demonstrates the basic anatomy of a Toast component implementation with ToastProvider and required subcomponents.

LANGUAGE: tsx
CODE:
import { Toast, ToastProvider, ToastViewport } from 'tamagui'

export default () => (
  <ToastProvider>
    <Toast>
      <Toast.Title />
      <Toast.Description />
      <Toast.Action />
      <Toast.Close />
    </Toast>

    <ToastViewport />
  </ToastProvider>
)

----------------------------------------

TITLE: Using Tamagui Tokens in Components
DESCRIPTION: Example showing how to use Tamagui tokens in a React component. Demonstrates token usage with the View component.

LANGUAGE: tsx
CODE:
import { View } from 'tamagui'

export default () => <View width="$4.5" />

----------------------------------------

TITLE: Imperative Toast Implementation
DESCRIPTION: Shows how to use createToast for imperative toast control with custom provider and hooks.

LANGUAGE: tsx
CODE:
import { Button } from 'tamagui'
import { Toast, ToastProvider, createToast } from 'tamagui'

export const { ImperativeToastProvider, useToast } = createToast()

export default () => (
  <ToastProvider>
    <ImperativeToastProvider>
      <CurrentToast />
      <MyPage />
    </ImperativeToastProvider>

    <ToastViewport />
  </ToastProvider>
)

const CurrentToast = () => {
  const { currentToast } = useToast()

  if (!currentToast) return
  return (
    <Toast key={currentToast.id}>
      <Toast.Title>{currentToast.title}</Toast.Title>
      <Toast.Description>{currentToast.message}</Toast.Description>
    </Toast>
  )
}

const MyPage = () => {
  const { show } = useToast()

  return (
    <Button onPress={() => show('Done!', { message: 'Form submitted successfully.' })}>
      Show Toast
    </Button>
  )
}

----------------------------------------

TITLE: Implementing Imperative Toast API in React
DESCRIPTION: This snippet demonstrates how to use the imperative API for toasts, including setup for native support and usage within a React component.

LANGUAGE: tsx
CODE:
import { Button } from 'tamagui' // or '@tamagui/button'
import { Toast, ToastImperativeProvider, ToastProvider, useToast } from 'tamagui' // or '@tamagui/toast'

const options = { native: 'mobile' }

export default () => (
  <ToastProvider>
    <ToastImperativeProvider options={options}>
      <CurrentToast />
      <MyPage />
    </ToastImperativeProvider>

    <ToastViewport />
  </ToastProvider>
)

const CurrentToast = () => {
  const { currentToast } = useToast()

  // only show the component if it's present and not handled by native toast
  if (!currentToast || currentToast.isHandledNatively) return null
  return (
    <Toast key={currentToast.id}>
      <Toast.Title>{currentToast.title}</Toast.Title>
      <Toast.Description>{currentToast.message}</Toast.Description>
    </Toast>
  )
}

const MyPage = () => {
  const { show } = useToast()

  return (
    <Button onPress={() => show('Done!', { message: 'Form submitted successfully.' })}>
      Show Toast
    </Button>
  )
}

----------------------------------------

TITLE: Style Type Definition and Component Implementation
DESCRIPTION: Demonstrates implementing style types and component props with pseudo-style support using Tamagui's style system.

LANGUAGE: typescript
CODE:
import { Stack, style } from '@tamagui/core'

type StackStyle = {
  base: ViewStyle
  press?: ViewStyle
  hover?: ViewStyle
  focus?: ViewStyle
}

const mySubStyle: StackStyle = style({
  backgroundColor: 'red',
  pressStyle: {
    backgroundColor: 'blue'
  }
})

const MyComponent = (props: { accentedStyle?: StackStyle }) => {
  return (
    <Stack style={[accentedStyle]} />
  )
}

----------------------------------------

TITLE: TypeScript Custom Data Extension
DESCRIPTION: Shows how to add TypeScript type definitions for custom toast data.

LANGUAGE: ts
CODE:
declare module '@tamagui/toast' {
  interface CustomData {
    myPreset: 'error' | 'success' | 'warning'
  }
}

----------------------------------------

TITLE: Cloning Tamagui Repository
DESCRIPTION: Initial step to clone the Tamagui repository from GitHub to local environment.

LANGUAGE: bash
CODE:
git clone https://github.com/tamagui/tamagui

----------------------------------------

TITLE: Version Support Status Table in Markdown
DESCRIPTION: A markdown table showing which project versions currently receive security updates, using checkmarks and x marks to indicate support status.

LANGUAGE: markdown
CODE:
| Version | Supported          |
| ------- | ------------------ |
| 5.1.x   | :white_check_mark: |
| 5.0.x   | :x:                |
| 4.0.x   | :white_check_mark: |
| < 4.0   | :x:                |

----------------------------------------

TITLE: Basic Tooltip Component Structure in React
DESCRIPTION: Demonstrates the basic structure and composition of a Tooltip component in a React application using Tamagui.

LANGUAGE: tsx
CODE:
import { Tooltip } from 'tamagui' // or '@tamagui/tooltip'

export default () => (
  <Tooltip>
    <Tooltip.Trigger />
    <Tooltip.Content>
      <Tooltip.Arrow />
      {/* ... */}
    </Tooltip.Content>
  </Tooltip>
)

----------------------------------------

TITLE: Generating Native Code for iOS Build
DESCRIPTION: Command to generate the native code required for building the iOS version of the One app.

LANGUAGE: bash
CODE:
yarn prebuild:native

----------------------------------------

TITLE: Implementing PortalProvider in React App
DESCRIPTION: Example of how to add PortalProvider to the root of a React application for use with Tooltip.

LANGUAGE: tsx
CODE:
import { PortalProvider } from '@tamagui/portal'
import YourApp from './components/YourApp'

function App() {
  return (
    <PortalProvider shouldAddRootHost>
      <YourApp />
    </PortalProvider>
  )
}

export default App

----------------------------------------

TITLE: Basic Tooltip Component Structure in Tamagui
DESCRIPTION: Demonstrates the basic structure and components of a Tooltip in Tamagui.

LANGUAGE: tsx
CODE:
import { Tooltip } from 'tamagui' // or '@tamagui/tooltip'

export default () => (
  <Tooltip>
    <Tooltip.Trigger />
    <Tooltip.Content>
      <Tooltip.Arrow />
      {/* ... */}
    </Tooltip.Content>
  </Tooltip>
)

----------------------------------------

TITLE: Installing Accordion Component in Tamagui
DESCRIPTION: Command to install the Accordion component independently in a project using npm.

LANGUAGE: bash
CODE:
npm install @tamagui/accordion

----------------------------------------

TITLE: Configuring Accordion for Multiple Open Items
DESCRIPTION: Shows how to set up an Accordion to allow multiple items to be open simultaneously using the type prop.

LANGUAGE: jsx
CODE:
<Accordion type="__multiple__">
  <Accordion.Item value="item-1">…</Accordion.Item>
  <Accordion.Item value="item-2">…</Accordion.Item>
</Accordion>

----------------------------------------

TITLE: Customizing Text Components in ListItem
DESCRIPTION: Example of customizing only the text components of ListItem without modifying the frame.

LANGUAGE: tsx
CODE:
export const ListItem = themeable(
  forwardRef<TamaguiElement, ListItemProps>((propsIn, ref) => {
    const { props } = useListItem(propsIn, {
      Title: CustomListItemTitle,
      Text: CustomListItemText,
      Subtitle: CustomListItemSubtitle,
    })

    return <ListItemFrame {...props} ref={ref} />
  })
)

----------------------------------------

TITLE: Select Component with Sheet Adaptation - Tamagui TSX
DESCRIPTION: Shows how to implement Select with Sheet adaptation for mobile platforms using Adapt component, demonstrating the recommended approach for native platforms.

LANGUAGE: tsx
CODE:
import { Select } from 'tamagui' // or '@tamagui/select'

export default () => (
  <Select defaultValue="">
    <Select.Trigger>
      <Select.Value placeholder="Search..." />
    </Select.Trigger>

    <Adapt when="sm" platform="touch">
      <Sheet>
        <Sheet.Frame>
          <SheetContents />
        </Sheet.Frame>
        <Sheet.Overlay />
      </Sheet>
    </Adapt>

    <Select.Content>
      <Select.ScrollUpButton />
      <Select.Viewport>
        <Select.Group>
          <Select.Label />
          <Select.Item>
            <Select.ItemText />
          </Select.Item>
        </Select.Group>
      </Select.Viewport>
      <Select.ScrollDownButton />
    </Select.Content>
  </Select>
)

----------------------------------------

TITLE: Creating Basic Separator Layout in Tamagui
DESCRIPTION: Demonstrates how to implement a horizontal navigation layout with vertical separators between text elements. Uses XStack for horizontal alignment and Separator components with vertical orientation.

LANGUAGE: tsx
CODE:
export default () => (
  <XStack alignItems="center">
    <Paragraph>Blog</Paragraph>
    <Separator alignSelf="stretch" vertical />
    <Paragraph>Docs</Paragraph>
    <Separator alignSelf="stretch" vertical />
    <Paragraph>Source</Paragraph>
  </XStack>
)

----------------------------------------

TITLE: Empty Hero Template
DESCRIPTION: Template placeholder for shapes demonstration

LANGUAGE: tsx
CODE:


----------------------------------------

TITLE: Using Image Component in Tamagui
DESCRIPTION: Example of how to use the Image component in a React component with src, width, and height props.

LANGUAGE: tsx
CODE:
export default () => (
  <Image
    src='https://...'
    width={300}
    height={400}
  />
)

----------------------------------------

TITLE: Implementing Linear Gradient in Tamagui (TSX)
DESCRIPTION: This snippet demonstrates the usage of the Linear Gradient component in Tamagui. It's a placeholder for a demo implementation.

LANGUAGE: tsx
CODE:
hero template=LinearGradient