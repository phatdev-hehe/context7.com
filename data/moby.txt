TITLE: Building Docker Daemon with Buildx
DESCRIPTION: A comprehensive set of Docker Buildx commands for building the Docker daemon and related tools. Includes commands for local builds, cross-compilation, static/dynamic linking, and creating container images. Uses docker-bake.hcl for build configuration.

LANGUAGE: shell
CODE:
# build binaries for the current host platform
# output to ./bundles/binary-daemon by default
docker buildx bake
# or
docker buildx bake binary

# build binaries for the current host platform
# output to ./bin
DESTDIR=./bin docker buildx bake

# build dynamically linked binaries
# output to ./bundles/dynbinary-daemon by default
DOCKER_STATIC=0 docker buildx bake
# or
docker buildx bake dynbinary

# build binaries for all supported platforms
docker buildx bake binary-cross

# build binaries for a specific platform
docker buildx bake --set *.platform=linux/arm64

# build "complete" binaries (including containerd, runc, vpnkit, etc.)
docker buildx bake all

# build "complete" binaries for all supported platforms
docker buildx bake all-cross

# build non-runnable image wrapping "complete" binaries
# useful for use with undock and sharing via a registry
docker buildx bake bin-image

# build non-runnable image wrapping "complete" binaries, with custom tag
docker buildx bake bin-image --set "*.tags=foo/moby-bin:latest"

# build non-runnable image wrapping "complete" binaries for all supported platforms
# multi-platform images must be directly pushed to a registry
docker buildx bake bin-image-cross --set "*.tags=foo/moby-bin:latest" --push

----------------------------------------

TITLE: Using Logger in Application Code
DESCRIPTION: Demonstrates how to use the logger within application code, including structuring log messages with key-value pairs.

LANGUAGE: go
CODE:
    type appObject struct {
        // ... other fields ...
        logger logr.Logger
        // ... other fields ...
    }

    func (app *appObject) Run() {
        app.logger.Info("starting up", "timestamp", time.Now())

        // ... app code ...

----------------------------------------

TITLE: Raft State Machine Handling Loop in Go
DESCRIPTION: This snippet shows the main loop for handling a Raft state machine. It processes ticks, reads from the Ready channel, saves state to storage, sends messages, processes snapshots and committed entries, and advances the node state.

LANGUAGE: go
CODE:
  for {
    select {
    case <-s.Ticker:
      n.Tick()
    case rd := <-s.Node.Ready():
      saveToStorage(rd.HardState, rd.Entries, rd.Snapshot)
      send(rd.Messages)
      if !raft.IsEmptySnap(rd.Snapshot) {
        processSnapshot(rd.Snapshot)
      }
      for _, entry := range rd.CommittedEntries {
        process(entry)
        if entry.Type == raftpb.EntryConfChange {
          var cc raftpb.ConfChange
          cc.Unmarshal(entry.Data)
          s.Node.ApplyConfChange(cc)
        }
      }
      s.Node.Advance()
    case <-s.done:
      return
    }
  }

----------------------------------------

TITLE: Listing All Containers Using Docker Engine API in Go
DESCRIPTION: This snippet demonstrates how to use the Docker Engine API client in Go to list all containers, equivalent to the 'docker ps --all' command. It initializes the API client, retrieves the container list, and prints basic information for each container.

LANGUAGE: go
CODE:
package main

import (
	"context"
	"fmt"

	"github.com/docker/docker/api/types/container"
	"github.com/docker/docker/client"
)

func main() {
	apiClient, err := client.NewClientWithOpts(client.FromEnv)
	if err != nil {
		panic(err)
	}
	defer apiClient.Close()

	containers, err := apiClient.ContainerList(context.Background(), container.ListOptions{All: true})
	if err != nil {
		panic(err)
	}

	for _, ctr := range containers {
		fmt.Printf("%s %s (status: %s)\n", ctr.ID, ctr.Image, ctr.Status)
	}
}

----------------------------------------

TITLE: Basic Radix Tree Operations in Go
DESCRIPTION: Demonstrates basic usage of the iradix tree including creation, insertion, and longest prefix matching. Shows how to create a new tree, insert key-value pairs, and perform prefix lookup operations.

LANGUAGE: go
CODE:
// Create a tree
r := iradix.New()
r, _, _ = r.Insert([]byte("foo"), 1)
r, _, _ = r.Insert([]byte("bar"), 2)
r, _, _ = r.Insert([]byte("foobar"), 2)

// Find the longest prefix match
m, _, _ := r.Root().LongestPrefix([]byte("foozip"))
if string(m) != "foo" {
    panic("should be foo")
}

----------------------------------------

TITLE: Development Container Setup
DESCRIPTION: Commands for building and running a Docker development container using the Moby Engine codebase.

LANGUAGE: bash
CODE:
make BIND_DIR=. shell

----------------------------------------

TITLE: Example of Common Platform Specifier in Go
DESCRIPTION: This snippet shows a common example of a platform specifier used in the package. It demonstrates how to specify a Linux system with AMD64 architecture.

LANGUAGE: Go
CODE:
"linux/amd64"

----------------------------------------

TITLE: Basic Logrus Usage in Go
DESCRIPTION: Demonstrates how to import and use Logrus for basic logging with fields.

LANGUAGE: go
CODE:
package main

import (
  log "github.com/sirupsen/logrus"
)

func main() {
  log.WithFields(log.Fields{
    "animal": "walrus",
  }).Info("A walrus appears")
}

----------------------------------------

TITLE: Dual Stack IPv4/IPv6 Macvlan Configuration
DESCRIPTION: Creates a Macvlan network supporting both IPv4 and IPv6 addressing with multiple subnets

LANGUAGE: bash
CODE:
docker network create -d macvlan \
    --subnet=192.168.216.0/24 --subnet=192.168.218.0/24 \
    --gateway=192.168.216.1  --gateway=192.168.218.1 \
    --ipv6 --subnet=2001:db8:abc8::/64 --gateway=2001:db8:abc8::10 \
    -o parent=eth0.218 \
    -o macvlan_mode=bridge macvlan216

----------------------------------------

TITLE: Implementing Basic File System Watcher in Go
DESCRIPTION: This code snippet demonstrates how to create a basic file system watcher using the fsnotify library. It sets up a watcher, listens for events in a goroutine, and adds a path to watch. The example shows how to handle file modification events and errors.

LANGUAGE: go
CODE:
package main

import (
    "log"

    "github.com/fsnotify/fsnotify"
)

func main() {
    // Create new watcher.
    watcher, err := fsnotify.NewWatcher()
    if err != nil {
        log.Fatal(err)
    }
    defer watcher.Close()

    // Start listening for events.
    go func() {
        for {
            select {
            case event, ok := <-watcher.Events:
                if !ok {
                    return
                }
                log.Println("event:", event)
                if event.Has(fsnotify.Write) {
                    log.Println("modified file:", event.Name)
                }
            case err, ok := <-watcher.Errors:
                if !ok {
                    return
                }
                log.Println("error:", err)
            }
        }
    }()

    // Add a path.
    err = watcher.Add("/tmp")
    if err != nil {
        log.Fatal(err)
    }

    // Block main goroutine forever.
    <-make(chan struct{})
}

----------------------------------------

TITLE: Unmarshaling and Marshaling YAML in Go
DESCRIPTION: This example demonstrates how to use the yaml package to unmarshal YAML data into Go structs and maps, and then marshal them back into YAML. It showcases struct tags for custom field naming and flow style.

LANGUAGE: Go
CODE:
package main

import (
        "fmt"
        "log"

        "gopkg.in/yaml.v3"
)

var data = `
a: Easy!
b:
  c: 2
  d: [3, 4]
`

// Note: struct fields must be public in order for unmarshal to
// correctly populate the data.
type T struct {
        A string
        B struct {
                RenamedC int   `yaml:"c"`
                D        []int `yaml:",flow"`
        }
}

func main() {
        t := T{}
    
        err := yaml.Unmarshal([]byte(data), &t)
        if err != nil {
                log.Fatalf("error: %v", err)
        }
        fmt.Printf("--- t:\n%v\n\n", t)
    
        d, err := yaml.Marshal(&t)
        if err != nil {
                log.Fatalf("error: %v", err)
        }
        fmt.Printf("--- t dump:\n%s\n\n", string(d))
    
        m := make(map[interface{}]interface{})
    
        err = yaml.Unmarshal([]byte(data), &m)
        if err != nil {
                log.Fatalf("error: %v", err)
        }
        fmt.Printf("--- m:\n%v\n\n", m)
    
        d, err = yaml.Marshal(&m)
        if err != nil {
                log.Fatalf("error: %v", err)
        }
        fmt.Printf("--- m dump:\n%s\n\n", string(d))
}

----------------------------------------

TITLE: Implementing Network Namespace Operations with ns.Do()
DESCRIPTION: Demonstrates the recommended way to perform operations in a specific network namespace using the ns.Do() method. This example shows creating a dummy network interface within a target namespace while properly handling namespace switching.

LANGUAGE: go
CODE:
err = targetNs.Do(func(hostNs ns.NetNS) error {
	linkAttrs := netlink.NewLinkAttrs()
	linkAttrs.Name = "dummy0"
	dummy := &netlink.Dummy{
		LinkAttrs: linkAttrs,
	}
	return netlink.LinkAdd(dummy)
})

----------------------------------------

TITLE: Initializing and Using Logger in Go
DESCRIPTION: Shows how to create and use a Logger for high-performance structured logging with strongly typed Field values.

LANGUAGE: go
CODE:
logger, _ := zap.NewProduction()
defer logger.Sync()
logger.Info("failed to fetch URL",
  // Structured context as strongly typed Field values.
  zap.String("url", url),
  zap.Int("attempt", 3),
  zap.Duration("backoff", time.Second),
)

----------------------------------------

TITLE: Initializing Metrics Namespace in Go
DESCRIPTION: Creates a new metrics namespace for the Docker engine daemon with version and commit labels. Demonstrates how to set up a base namespace for collecting related metrics.

LANGUAGE: go
CODE:
ns := metrics.NewNamespace("engine", "daemon", metrics.Labels{
        "version": dockerversion.Version,
        "commit":  dockerversion.GitCommit,
})

----------------------------------------

TITLE: Creating Network Bridge with Go Netlink
DESCRIPTION: Demonstrates how to create a new network bridge and add an existing network interface (eth1) to it using the netlink library. Uses NewLinkAttrs constructor to set default values and shows bridge creation with proper error handling.

LANGUAGE: go
CODE:
package main

import (
    "fmt"
    "github.com/vishvananda/netlink"
)

func main() {
    la := netlink.NewLinkAttrs()
    la.Name = "foo"
    mybridge := &netlink.Bridge{LinkAttrs: la}
    err := netlink.LinkAdd(mybridge)
    if err != nil  {
        fmt.Printf("could not add %s: %v\n", la.Name, err)
    }
    eth1, _ := netlink.LinkByName("eth1")
    netlink.LinkSetMaster(eth1, mybridge)
}

----------------------------------------

TITLE: Launching Development Container for Debugging in Bash
DESCRIPTION: This command starts a development container with debugging enabled and Delve port exposed. It disables build optimizations and publishes the debugger port for local access.

LANGUAGE: bash
CODE:
$ make BIND_DIR=. DOCKER_DEBUG=1 DELVE_PORT=127.0.0.1:2345:2345 shell

----------------------------------------

TITLE: Initializing Logging in Main Function
DESCRIPTION: Example showing how to initialize the root logger in the main function using a chosen logging implementation.

LANGUAGE: go
CODE:
    func main() {
        // ... other setup code ...

        // Create the "root" logger.  We have chosen the "logimpl" implementation,
        // which takes some initial parameters and returns a logr.Logger.
        logger := logimpl.New(param1, param2)

        // ... other setup code ...

----------------------------------------

TITLE: Implementing HTTP Event Sink in Go
DESCRIPTION: Implementation of an HTTP sink that sends events as JSON POST requests. The sink marshals events to JSON and sends them to a configured URL, returning an error on non-200 responses.

LANGUAGE: go
CODE:
func (h *httpSink) Write(event Event) error {
	p, err := json.Marshal(event)
	if err != nil {
		return err
	}
	body := bytes.NewReader(p)
	resp, err := h.client.Post(h.url, "application/json", body)
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	
	if resp.Status != 200 {
		return errors.New("unexpected status")
	}

	return nil
}

----------------------------------------

TITLE: Loading and Accessing TOML Data in Go
DESCRIPTION: Example demonstrating how to load a TOML document and access its data using direct retrieval and intermediate objects.

LANGUAGE: go
CODE:
config, _ := toml.Load(`
[postgres]
user = "pelletier"
password = "mypassword"`)
// retrieve data directly
user := config.Get("postgres.user").(string)

// or using an intermediate object
postgresConfig := config.Get("postgres").(*toml.Tree)
password := postgresConfig.Get("password").(string)

----------------------------------------

TITLE: Setting Up Signal Handler for In-Memory Metrics Dump
DESCRIPTION: Shows how to set up an in-memory sink and signal handler to dump metrics to stderr when a signal is received. It includes examples of setting gauges, emitting keys, incrementing counters, and adding samples.

LANGUAGE: go
CODE:
// Setup the inmem sink and signal handler
inm := metrics.NewInmemSink(10*time.Second, time.Minute)
sig := metrics.DefaultInmemSignal(inm)
metrics.NewGlobal(metrics.DefaultConfig("service-name"), inm)

// Run some code
inm.SetGauge([]string{"foo"}, 42)
inm.EmitKey([]string{"bar"}, 30)

inm.IncrCounter([]string{"baz"}, 42)
inm.IncrCounter([]string{"baz"}, 1)
inm.IncrCounter([]string{"baz"}, 80)

inm.AddSample([]string{"method", "wow"}, 42)
inm.AddSample([]string{"method", "wow"}, 100)
inm.AddSample([]string{"method", "wow"}, 22)

----------------------------------------

TITLE: Returning Multierror Only if Errors Exist in Go
DESCRIPTION: Shows how to use the ErrorOrNil function to return an error implementation only if there are errors to return, otherwise returning nil.

LANGUAGE: go
CODE:
var result *multierror.Error

// ... accumulate errors here

// Return the `error` only if errors were added to the multierror, otherwise
// return nil since there are no errors.
return result.ErrorOrNil()

----------------------------------------

TITLE: Testing Windows Binary Against Linux Daemon
DESCRIPTION: Commands to set up environment variables and run tests for Windows binary against a Linux daemon.

LANGUAGE: bash
CODE:
$ export DOCKER_REMOTE_DAEMON=1
$ export DOCKER_TEST_HOST=tcp://213.124.23.200:2376
$ hack/make.sh binary test-integration

----------------------------------------

TITLE: Allowing Service Requests in Host Namespace
DESCRIPTION: Adds rules to the DOCKER-INGRESS chain in the FORWARD chain of the filter table in the host namespace. These rules allow service requests to the published port and their replies.

LANGUAGE: bash
CODE:
"ACCEPT  tcp  --  anywhere anywhere tcp dpt:30000"

LANGUAGE: bash
CODE:
"ACCEPT tcp  --  anywhere anywhere state RELATED,ESTABLISHED tcp spt:30000"

----------------------------------------

TITLE: Running Entire Moby Test Suite
DESCRIPTION: Command to run the entire Moby Engine test suite using the Makefile target.

LANGUAGE: bash
CODE:
$ make test

----------------------------------------

TITLE: Initializing Server-Side gRPC Prometheus Monitoring
DESCRIPTION: Sets up server-side interceptors for Prometheus monitoring of gRPC services. Includes initialization of metrics handler and registration of gRPC service implementations.

LANGUAGE: go
CODE:
import "github.com/grpc-ecosystem/go-grpc-prometheus"
...
    // Initialize your gRPC server's interceptor.
    myServer := grpc.NewServer(
        grpc.StreamInterceptor(grpc_prometheus.StreamServerInterceptor),
        grpc.UnaryInterceptor(grpc_prometheus.UnaryServerInterceptor),
    )
    // Register your gRPC service implementations.
    myservice.RegisterMyServiceServer(s.server, &myServiceImpl{})
    // After all your registrations, make sure all of the Prometheus metrics are initialized.
    grpc_prometheus.Register(myServer)
    // Register Prometheus metrics handler.    
    http.Handle("/metrics", promhttp.Handler())

----------------------------------------

TITLE: Basic Error Wrapping Usage in Go
DESCRIPTION: Demonstrates basic usage of errwrap package including wrapping errors, checking for contained errors, and extracting specific error types. Uses file operation as an example scenario.

LANGUAGE: go
CODE:
// A function that always returns an error, but wraps it, like a real
// function might.
func tryOpen() error {
	_, err := os.Open("/i/dont/exist")
	if err != nil {
		return errwrap.Wrapf("Doesn't exist: {{err}}", err)
	}

	return nil
}

func main() {
	err := tryOpen()

	// We can use the Contains helpers to check if an error contains
	// another error. It is safe to do this with a nil error, or with
	// an error that doesn't even use the errwrap package.
	if errwrap.Contains(err, "does not exist") {
		// Do something
	}
	if errwrap.ContainsType(err, new(os.PathError)) {
		// Do something
	}

	// Or we can use the associated `Get` functions to just extract
	// a specific error. This would return nil if that specific error doesn't
	// exist.
	perr := errwrap.GetType(err, new(os.PathError))
}

----------------------------------------

TITLE: IPAM Configuration Structure Definition
DESCRIPTION: Defines the IpamConf structure that contains all IPAM-related configurations for a network, including preferred pools, subpools, gateways and auxiliary addresses.

LANGUAGE: go
CODE:
// IpamConf contains all the ipam related configurations for a network
type IpamConf struct {
	// The master address pool for containers and network interfaces
	PreferredPool string
	// A subset of the master pool. If specified,
	// this becomes the container pool
	SubPool string
	// Input options for IPAM Driver (optional)
	Options map[string]string
	// Preferred Network Gateway address (optional)
	Gateway string
	// Auxiliary addresses for network driver. Must be within the master pool.
	// libnetwork will reserve them if they fall into the container pool
	AuxAddresses map[string]string
}

----------------------------------------

TITLE: BitSet Basic Usage Example in Go
DESCRIPTION: Demonstrates core functionality of the BitSet library including setting/clearing bits, chaining operations, and performing intersections. The example shows how to use the library in a card game simulation.

LANGUAGE: go
CODE:
package main

import (
	"fmt"
	"math/rand"

	"github.com/bits-and-blooms/bitset"
)

func main() {
	fmt.Printf("Hello from BitSet!\n")
	var b bitset.BitSet
	// play some Go Fish
	for i := 0; i < 100; i++ {
		card1 := uint(rand.Intn(52))
		card2 := uint(rand.Intn(52))
		b.Set(card1)
		if b.Test(card2) {
			fmt.Println("Go Fish!")
		}
		b.Clear(card1)
	}

	// Chaining
	b.Set(10).Set(11)

	for i, e := b.NextSet(0); e; i, e = b.NextSet(i + 1) {
		fmt.Println("The following bit is set:", i)
	}
	if b.Intersection(bitset.New(100).Set(10)).Count() == 1 {
		fmt.Println("Intersection works.")
	} else {
		fmt.Println("Intersection doesn't work???")
	}
}

----------------------------------------

TITLE: Using stateless compression with gzip
DESCRIPTION: Demonstrates how to use stateless compression with gzip, which is useful for scenarios with many concurrent compressors but little activity.

LANGUAGE: Go
CODE:
gzw, err := gzip.NewWriterLevel(ioutil.Discard, gzip.StatelessCompression)
if err != nil {
    return err
}
defer gzw.Close()

w := bufio.NewWriterSize(gzw, 4096)
defer w.Flush()

// Write to 'w'

----------------------------------------

TITLE: Formatting Go Code for Moby Project
DESCRIPTION: Command to format Go code according to Moby Project's coding style guidelines using gofmt.

LANGUAGE: Shell
CODE:
gofmt -s -w file.go

----------------------------------------

TITLE: HTTP Metrics Capture Example in Go
DESCRIPTION: Demonstrates how to wrap an HTTP handler to capture and log metrics for each request. The example shows capturing method, URL, status code, duration, and bytes written.

LANGUAGE: go
CODE:
// myH is your app's http handler, perhaps a http.ServeMux or similar.
var myH http.Handler
// wrappedH wraps myH in order to log every request.
wrappedH := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
	m := httpsnoop.CaptureMetrics(myH, w, r)
	log.Printf(
		"%s %s (code=%d dt=%s written=%d)",
		r.Method,
		r.URL,
		m.Code,
		m.Duration,
		m.Written,
	)
})
http.ListenAndServe(":8080", wrappedH)

----------------------------------------

TITLE: Proposing Changes to Raft State Machine in Go
DESCRIPTION: This code shows how to propose changes to the Raft state machine. It involves serializing application data into a byte slice and calling the Propose method on the Raft node.

LANGUAGE: go
CODE:
	n.Propose(ctx, data)

----------------------------------------

TITLE: Implementing Fine-grained Locking in Go
DESCRIPTION: Example implementation demonstrating the usage of Moby locker package with a data structure. Shows how to handle concurrent access to named resources using both fine-grained locks for specific items and a global mutex for shared data.

LANGUAGE: go
CODE:
package important

import (
	"sync"
	"time"

	"github.com/moby/locker"
)

type important struct {
	locks *locker.Locker
	data  map[string]interface{}
	mu    sync.Mutex
}

func (i *important) Get(name string) interface{} {
	i.locks.Lock(name)
	defer i.locks.Unlock(name)
	return i.data[name]
}

func (i *important) Create(name string, data interface{}) {
	i.locks.Lock(name)
	defer i.locks.Unlock(name)

	i.createImportant(data)

	i.mu.Lock()
	i.data[name] = data
	i.mu.Unlock()
}

func (i *important) createImportant(data interface{}) {
	time.Sleep(10 * time.Second)
}

----------------------------------------

TITLE: Modifying Console Settings in Go
DESCRIPTION: Demonstrates how to get the current console, set it to raw mode, retrieve console size, and perform resize operations. Includes proper cleanup with deferred reset.

LANGUAGE: go
CODE:
current := console.Current()
defer current.Reset()

if err := current.SetRaw(); err != nil {
}
ws, err := current.Size()
current.Resize(ws)

----------------------------------------

TITLE: Using CircBuf Package in Go
DESCRIPTION: Demonstrates how to create and use a circular buffer with a fixed size of 6 bytes. The example shows writing a string longer than the buffer size and verifying that only the last 6 bytes are retained.

LANGUAGE: go
CODE:
buf, _ := NewBuffer(6)
buf.Write([]byte("hello world"))

if string(buf.Bytes()) != " world" {
    panic("should only have last 6 bytes!")
}

----------------------------------------

TITLE: Basic Router Setup in Go
DESCRIPTION: Demonstrates basic setup of a gorilla/mux router with route handlers for different paths

LANGUAGE: go
CODE:
func main() {
    r := mux.NewRouter()
    r.HandleFunc("/", HomeHandler)
    r.HandleFunc("/products", ProductsHandler)
    r.HandleFunc("/articles", ArticlesHandler)
    http.Handle("/", r)
}

----------------------------------------

TITLE: Code Modification Example
DESCRIPTION: Example of modifying the Docker daemon's help message in the source code.

LANGUAGE: go
CODE:
Short:         "A self-sufficient and really fun runtime for containers."

----------------------------------------

TITLE: Range Scan Operations in Go Radix Tree
DESCRIPTION: Shows how to perform range scanning operations on the radix tree, demonstrating iteration over keys within a specific lexicographical range using SeekLowerBound and Next operations.

LANGUAGE: go
CODE:
// Create a tree
r := iradix.New[int]()
r, _, _ = r.Insert([]byte("001"), 1)
r, _, _ = r.Insert([]byte("002"), 2)
r, _, _ = r.Insert([]byte("005"), 5)
r, _, _ = r.Insert([]byte("010"), 10)
r, _, _ = r.Insert([]byte("100"), 10)

// Range scan over the keys that sort lexicographically between [003, 050)
it := r.Root().Iterator()
it.SeekLowerBound([]byte("003"))
for key, _, ok := it.Next(); ok; key, _, ok = it.Next() {
  if string(key) >= "050" {
      break
  }
  fmt.Println(string(key))
}

----------------------------------------

TITLE: Accessing Error List in Go using go-multierror
DESCRIPTION: Demonstrates how to use type switches to access the list of errors when a multierror might be returned.

LANGUAGE: go
CODE:
if err := something(); err != nil {
	if merr, ok := err.(*multierror.Error); ok {
		// Use merr.Errors
	}
}

----------------------------------------

TITLE: Configuring Exemplars in OpenTelemetry Go
DESCRIPTION: Examples of enabling/disabling exemplar exports and configuring exemplar filters. Shows various filter options including always_on, always_off, and trace_based.

LANGUAGE: console
CODE:
export OTEL_GO_X_EXEMPLAR=true

unset OTEL_GO_X_EXEMPLAR

export OTEL_METRICS_EXEMPLAR_FILTER=always_on

export OTEL_METRICS_EXEMPLAR_FILTER=always_off

export OTEL_METRICS_EXEMPLAR_FILTER=trace_based

unset OTEL_METRICS_EXEMPLAR_FILTER

----------------------------------------

TITLE: Instrumenting HTTP Handler with Metrics in Go
DESCRIPTION: Demonstrates how to wrap an HTTP handler with metrics instrumentation using the metrics package. Includes namespace creation and handler setup.

LANGUAGE: go
CODE:
namespace := metrics.NewNamespace("docker_distribution", "http", metrics.Labels{"handler": "your_http_handler_name"})
httpMetrics := namespace.NewDefaultHttpMetrics()
metrics.Register(namespace)
instrumentedHandler = metrics.InstrumentHandler(httpMetrics, unInstrumentedHandler)

----------------------------------------

TITLE: Opening a BBolt Database
DESCRIPTION: Example of opening a BBolt database with error handling and deferred close

LANGUAGE: go
CODE:
package main

import (
	log "log"
	bolt "go.etcd.io/bbolt"
)

func main() {
	db, err := bolt.Open("my.db", 0600, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	...
}

----------------------------------------

TITLE: Integration Test Environment Check in Go
DESCRIPTION: Example showing how to conditionally skip integration tests based on the testing environment using the skip.If function from gotest.tools/skip package. The code demonstrates checking if the test is running against a remote daemon.

LANGUAGE: go
CODE:
skip.If(t, testEnv.IsRemoteDaemon())
// your integration test code

----------------------------------------

TITLE: Initializing Go's Random Number Generator with seed.MustInit()
DESCRIPTION: This snippet demonstrates how to use the seed.MustInit() function to securely initialize Go's random number generator. It's typically used in an init() function and will panic if unable to set a high-entropy random seed.

LANGUAGE: go
CODE:
package mypackage

import (
  "github.com/sean-/seed"
)

// MustInit will panic() if it is unable to set a high-entropy random seed:
func init() {
  seed.MustInit()
}

----------------------------------------

TITLE: Initializing Generic Sets in Go
DESCRIPTION: Demonstrates how to create sets of various types using the golang-set library. Examples include creating sets of integers, strings, custom structs, and interface{} types.

LANGUAGE: go
CODE:
// Syntax example, doesn't compile.
mySet := mapset.NewSet[T]() // where T is some concrete comparable type.

// Therefore this code creates an int set
mySet := mapset.NewSet[int]()

// Or perhaps you want a string set
mySet := mapset.NewSet[string]()

type myStruct {
  name string
  age uint8
}

// Alternatively a set of structs
mySet := mapset.NewSet[myStruct]()

// Lastly a set that can hold anything using the any or empty interface keyword: interface{}. This is effectively removes type safety.
mySet := mapset.NewSet[any]()

----------------------------------------

TITLE: Initializing and Using SugaredLogger in Go
DESCRIPTION: Demonstrates how to create and use a SugaredLogger for structured logging with loosely typed key-value pairs and printf-style logging.

LANGUAGE: go
CODE:
logger, _ := zap.NewProduction()
defer logger.Sync() // flushes buffer, if any
sugar := logger.Sugar()
sugar.Infow("failed to fetch URL",
  // Structured context as loosely typed key-value pairs.
  "url", url,
  "attempt", 3,
  "backoff", time.Second,
)
sugar.Infof("Failed to fetch URL: %s", url)

----------------------------------------

TITLE: Error Wrapping with Context
DESCRIPTION: Shows how to use errors.Wrap to add contextual information to an error while preserving the original error value.

LANGUAGE: go
CODE:
_, err := ioutil.ReadAll(r)
if err != nil {
        return errors.Wrap(err, "read failed")
}

----------------------------------------

TITLE: Configuring Logrus in Go
DESCRIPTION: Shows how to configure Logrus with a custom formatter, output, and log level.

LANGUAGE: go
CODE:
package main

import (
  "os"
  log "github.com/sirupsen/logrus"
)

func init() {
  log.SetFormatter(&log.JSONFormatter{})
  log.SetOutput(os.Stdout)
  log.SetLevel(log.WarnLevel)
}

func main() {
  log.WithFields(log.Fields{
    "animal": "walrus",
    "size":   10,
  }).Info("A group of walrus emerges from the ocean")

  log.WithFields(log.Fields{
    "omg":    true,
    "number": 122,
  }).Warn("The group's number increased tremendously!")

  log.WithFields(log.Fields{
    "omg":    true,
    "number": 100,
  }).Fatal("The ice breaks!")
}

----------------------------------------

TITLE: Formatting Byte Sizes with Decimal Units in Go
DESCRIPTION: This snippet demonstrates how to format byte sizes using decimal units with the package. It shows examples of using %.2f and %g format specifiers to print byte sizes with appropriate unit suffixes.

LANGUAGE: go
CODE:
fmt.Printf("%.2f", 123 * B)   => "123B"
fmt.Printf("%.2f", 1234 * B)  => "1.23kB"
fmt.Printf("%g", 1200 * B)    => "1.2kB"
fmt.Printf("%#g", 1024 * B)   => "1KiB"

----------------------------------------

TITLE: Displaying PkgGoDev Badge for OpenTelemetry Trace API in Markdown
DESCRIPTION: This snippet shows how to include a PkgGoDev badge in a Markdown file, linking to the documentation for the OpenTelemetry Trace API Go package.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace)](https://pkg.go.dev/go.opentelemetry.io/otel/trace)

----------------------------------------

TITLE: Setting Docker Daemon Execution Options
DESCRIPTION: Example of configuring the Docker daemon to use systemd as the cgroup driver.

LANGUAGE: bash
CODE:
$ sudo dockerd --exec-opt native.cgroupdriver=systemd

----------------------------------------

TITLE: Configuring Docker Runtimes via JSON Configuration File
DESCRIPTION: Example of adding two runtimes (runc and custom) to the Docker daemon configuration file.

LANGUAGE: json
CODE:
{
	"default-runtime": "runc",
	"runtimes": {
		"runc": {
			"path": "runc"
		},
		"custom": {
			"path": "/usr/local/bin/my-runc-replacement",
			"runtimeArgs": [
				"--debug"
			]
		}
	}
}

----------------------------------------

TITLE: DNAT for Service Requests in Host Namespace
DESCRIPTION: Adds a rule to the DOCKER-INGRESS chain in the PREROUTING chain of the NAT table in the host namespace. This rule performs DNAT for service requests to the ingress namespace's eth1 IP.

LANGUAGE: bash
CODE:
"DNAT tcp  --  anywhere anywhere  tcp dpt:30000 to:172.18.0.2:30000"

----------------------------------------

TITLE: Opening a FIFO in Go
DESCRIPTION: Opens a FIFO and returns an io.ReadWriteCloser. Supports various flags for creating, read-only, write-only, and non-blocking operations. Context can be used for cancellation.

LANGUAGE: Go
CODE:
func OpenFifo(ctx context.Context, fn string, flag int, perm os.FileMode) (io.ReadWriteCloser, error)

----------------------------------------

TITLE: Basic Usage of Go-Metrics Library
DESCRIPTION: Demonstrates how to use the go-metrics library to profile a method's runtime, configure a statsite sink, and emit a key-value pair metric.

LANGUAGE: go
CODE:
func SlowMethod() {
    // Profiling the runtime of a method
    defer metrics.MeasureSince([]string{"SlowMethod"}, time.Now())
}

// Configure a statsite sink as the global metrics sink
sink, _ := metrics.NewStatsiteSink("statsite:8125")
metrics.NewGlobal(metrics.DefaultConfig("service-name"), sink)

// Emit a Key/Value pair
metrics.EmitKey([]string{"questions", "meaning of life"}, 42)

----------------------------------------

TITLE: Basic Macvlan Bridge Mode Network Creation
DESCRIPTION: Creates a basic Macvlan network in bridge mode and runs containers on it, demonstrating basic connectivity between containers

LANGUAGE: bash
CODE:
docker network create -d macvlan \
    --subnet=172.16.86.0/24 \
    --gateway=172.16.86.1  \
    -o parent=eth0 pub_net

docker  run --net=pub_net --ip=172.16.86.10 -itd alpine /bin/sh

docker  run --net=pub_net -it --rm alpine /bin/sh
ping -c 4 172.16.86.10

----------------------------------------

TITLE: Demonstrating Duplicate Lock Acquisition in Go
DESCRIPTION: Code snippet showing how acquiring the same lock twice in a goroutine can lead to deadlocks.

LANGUAGE: go
CODE:
A.Rlock() or lock()

A.lock() or A.RLock()

----------------------------------------

TITLE: Creating a Digest from Bytes in Go
DESCRIPTION: Demonstrates how to create a content identifier (digest) from a byte slice using the go-digest package.

LANGUAGE: go
CODE:
id := digest.FromBytes([]byte("my content"))

----------------------------------------

TITLE: Initializing and Using go-cni Library in Go
DESCRIPTION: This snippet demonstrates how to initialize the go-cni library, load CNI configurations, set up a network for a container namespace, and tear it down. It includes error handling and shows how to retrieve the IP address of the default network interface.

LANGUAGE: go
CODE:
package main

import (
	"context"
	"fmt"
	"log"

	gocni "github.com/containerd/go-cni"
)

func main() {
	id := "example"
	netns := "/var/run/netns/example-ns-1"

	// CNI allows multiple CNI configurations and the network interface
	// will be named by eth0, eth1, ..., ethN.
	ifPrefixName := "eth"
	defaultIfName := "eth0"

	// Initializes library
	l, err := gocni.New(
		// one for loopback network interface
		gocni.WithMinNetworkCount(2),
		gocni.WithPluginConfDir("/etc/cni/net.d"),
		gocni.WithPluginDir([]string{"/opt/cni/bin"}),
		// Sets the prefix for network interfaces, eth by default
		gocni.WithInterfacePrefix(ifPrefixName))
	if err != nil {
		log.Fatalf("failed to initialize cni library: %v", err)
	}

	// Load the cni configuration
	if err := l.Load(gocni.WithLoNetwork, gocni.WithDefaultConf); err != nil {
		log.Fatalf("failed to load cni configuration: %v", err)
	}

	// Setup network for namespace.
	labels := map[string]string{
		"K8S_POD_NAMESPACE":          "namespace1",
		"K8S_POD_NAME":               "pod1",
		"K8S_POD_INFRA_CONTAINER_ID": id,
		// Plugin tolerates all Args embedded by unknown labels, like
		// K8S_POD_NAMESPACE/NAME/INFRA_CONTAINER_ID...
		"IgnoreUnknown": "1",
	}

	ctx := context.Background()

	// Teardown network
	defer func() {
		if err := l.Remove(ctx, id, netns, gocni.WithLabels(labels)); err != nil {
			log.Fatalf("failed to teardown network: %v", err)
		}
	}()

	// Setup network
	result, err := l.Setup(ctx, id, netns, gocni.WithLabels(labels))
	if err != nil {
		log.Fatalf("failed to setup network for namespace: %v", err)
	}

	// Get IP of the default interface
	IP := result.Interfaces[defaultIfName].IPConfigs[0].IP.String()
	fmt.Printf("IP of the default interface %s:%s", defaultIfName, IP)
}

----------------------------------------

TITLE: Using a Verifier with io.Reader in Go
DESCRIPTION: Illustrates how to use a Verifier type to handle digest verification with an io.Reader, suitable for streaming content.

LANGUAGE: go
CODE:
rd := getContent()
verifier := id.Verifier()
io.Copy(verifier, rd)

if !verifier.Verified() {
  return errors.New("the content has changed!")
}

----------------------------------------

TITLE: Initializing a Three-Node Raft Cluster in Go
DESCRIPTION: This snippet demonstrates how to start a three-node Raft cluster using the raft library. It includes setting up storage, configuration, and initializing the node with peer information.

LANGUAGE: go
CODE:
  storage := raft.NewMemoryStorage()
  c := &raft.Config{
    ID:              0x01,
    ElectionTick:    10,
    HeartbeatTick:   1,
    Storage:         storage,
    MaxSizePerMsg:   4096,
    MaxInflightMsgs: 256,
  }
  // Set peer list to the other nodes in the cluster.
  // Note that they need to be started separately as well.
  n := raft.StartNode(c, []raft.Peer{{ID: 0x02}, {ID: 0x03}})

----------------------------------------

TITLE: Creating and Manipulating Sets in Go
DESCRIPTION: Provides a comprehensive example of creating sets for different class types (required, sciences, electives, bonus) and performing set operations like union, difference, and intersection.

LANGUAGE: go
CODE:
package main

import (
  "fmt"
  mapset "github.com/deckarep/golang-set/v2"
)

func main() {
  // Create a string-based set of required classes.
  required := mapset.NewSet[string]()
  required.Add("cooking")
  required.Add("english")
  required.Add("math")
  required.Add("biology")

  // Create a string-based set of science classes.
  sciences := mapset.NewSet[string]()
  sciences.Add("biology")
  sciences.Add("chemistry")
  
  // Create a string-based set of electives.
  electives := mapset.NewSet[string]()
  electives.Add("welding")
  electives.Add("music")
  electives.Add("automotive")

  // Create a string-based set of bonus programming classes.
  bonus := mapset.NewSet[string]()
  bonus.Add("beginner go")
  bonus.Add("python for dummies")
}

----------------------------------------

TITLE: Restarting a Raft Node from Previous State in Go
DESCRIPTION: This code demonstrates how to restart a Raft node from a previous state. It involves recovering the in-memory storage from persistent snapshot, state, and entries, then restarting the node without peer information.

LANGUAGE: go
CODE:
  storage := raft.NewMemoryStorage()

  // Recover the in-memory storage from persistent snapshot, state and entries.
  storage.ApplySnapshot(snapshot)
  storage.SetHardState(state)
  storage.Append(entries)

  c := &raft.Config{
    ID:              0x01,
    ElectionTick:    10,
    HeartbeatTick:   1,
    Storage:         storage,
    MaxSizePerMsg:   4096,
    MaxInflightMsgs: 256,
  }

  // Restart raft without peer information.
  // Peer information is already included in the storage.
  n := raft.RestartNode(c)

----------------------------------------

TITLE: Importing Cobra in Go Application
DESCRIPTION: Code snippet showing how to import the Cobra library in a Go application.

LANGUAGE: go
CODE:
import "github.com/spf13/cobra"

----------------------------------------

TITLE: Importing Hash Implementations in Go
DESCRIPTION: Demonstrates how to import necessary hash implementations to avoid panics when using the go-digest package.

LANGUAGE: go
CODE:
import (
    _ "crypto/sha256"
    _ "crypto/sha512"
)

----------------------------------------

TITLE: Implementing In-Memory Database with Go MemDB
DESCRIPTION: Complete example demonstrating the setup and usage of go-memdb, including schema definition, database creation, transaction handling, and various query operations. Shows how to create tables with indexes, insert data, and perform lookups and range scans.

LANGUAGE: go
CODE:
// Create a sample struct
type Person struct {
	Email string
	Name  string
	Age   int
}

// Create the DB schema
schema := &memdb.DBSchema{
	Tables: map[string]*memdb.TableSchema{
		"person": &memdb.TableSchema{
			Name: "person",
			Indexes: map[string]*memdb.IndexSchema{
				"id": &memdb.IndexSchema{
					Name:    "id",
					Unique:  true,
					Indexer: &memdb.StringFieldIndex{Field: "Email"},
				},
				"age": &memdb.IndexSchema{
					Name:    "age",
					Unique:  false,
					Indexer: &memdb.IntFieldIndex{Field: "Age"},
				},
			},
		},
	},
}

// Create a new data base
db, err := memdb.NewMemDB(schema)
if err != nil {
	panic(err)
}

// Create a write transaction
txn := db.Txn(true)

// Insert some people
people := []*Person{
	&Person{"joe@aol.com", "Joe", 30},
	&Person{"lucy@aol.com", "Lucy", 35},
	&Person{"tariq@aol.com", "Tariq", 21},
	&Person{"dorothy@aol.com", "Dorothy", 53},
}
for _, p := range people {
	if err := txn.Insert("person", p); err != nil {
		panic(err)
	}
}

// Commit the transaction
txn.Commit()

// Create read-only transaction
txn = db.Txn(false)
defer txn.Abort()

// Lookup by email
raw, err := txn.First("person", "id", "joe@aol.com")
if err != nil {
	panic(err)
}

// Say hi!
fmt.Printf("Hello %s!\n", raw.(*Person).Name)

// List all the people
it, err := txn.Get("person", "id")
if err != nil {
	panic(err)
}

fmt.Println("All the people:")
for obj := it.Next(); obj != nil; obj = it.Next() {
	p := obj.(*Person)
	fmt.Printf("  %s\n", p.Name)
}

// Range scan over people with ages between 25 and 35 inclusive
it, err = txn.LowerBound("person", "age", 25)
if err != nil {
	panic(err)
}

fmt.Println("People aged 25 - 35:")
for obj := it.Next(); obj != nil; obj = it.Next() {
	p := obj.(*Person)
	if p.Age > 35 {
		break
	}
	fmt.Printf("  %s is aged %d\n", p.Name, p.Age)
}

----------------------------------------

TITLE: Generating Fuzzed Struct in Go with go-fuzz-headers
DESCRIPTION: Demonstrates how to use go-fuzz-headers to fill a struct with fuzzed values based on the data provided by the fuzzing engine. This example shows both simple and nested struct fuzzing.

LANGUAGE: go
CODE:
type Person struct {
    Name string
    Age  int
}
p := Person{}
// Fill p with values based on the data provided by the fuzzing engine:
err := f.GenerateStruct(&p)

LANGUAGE: go
CODE:
type PersonI struct {
    Name       string
    Age        int
    BestFriend PersonII
}
type PersonII struct {
    Name string
    Age  int
}
p := PersonI{}
err := f.GenerateStruct(&p)

----------------------------------------

TITLE: CORS Middleware Implementation
DESCRIPTION: Implementation of CORS handling middleware with method restrictions

LANGUAGE: go
CODE:
func main() {
    r := mux.NewRouter()
    r.HandleFunc("/foo", fooHandler).Methods(http.MethodGet, http.MethodPut, http.MethodPatch, http.MethodOptions)
    r.Use(mux.CORSMethodMiddleware(r))
    http.ListenAndServe(":8080", r)
}

----------------------------------------

TITLE: Error Cause Type Switch
DESCRIPTION: Demonstrates how to use errors.Cause to retrieve and handle the original error using type switching.

LANGUAGE: go
CODE:
switch err := errors.Cause(err).(type) {
case *MyError:
        // handle specifically
default:
        // unknown error
}

----------------------------------------

TITLE: Setting Up Event Queue in Go
DESCRIPTION: Demonstrates creation of an unbounded event queue that processes events asynchronously, preventing blocking during event submission.

LANGUAGE: go
CODE:
queue := NewQueue(retry)

----------------------------------------

TITLE: BitSet File I/O Performance Tip in Go
DESCRIPTION: Shows how to optimize BitSet I/O performance using bufio when reading from or writing to files.

LANGUAGE: go
CODE:
f, err := os.Create("myfile")
w := bufio.NewWriter(f)

LANGUAGE: go
CODE:
f, err := os.Open("myfile")
r := bufio.NewReader(f)

----------------------------------------

TITLE: Vendoring Dependencies in Bash
DESCRIPTION: A shell script wrapper around 'go mod vendor' for managing project dependencies.

LANGUAGE: bash
CODE:
# Vendor (vendor.sh)

----------------------------------------

TITLE: Setting Up and Running Tests with Fake gRPC Server in Go
DESCRIPTION: This snippet demonstrates how to set up and run tests using a fake gRPC server. It includes creating a listener, registering the fake server, and configuring the client to use the fake server for testing.

LANGUAGE: go
CODE:
import (
        "context"
        "net"
        "testing"

        translate "cloud.google.com/go/translate/apiv3"
        "google.golang.org/api/option"
        translatepb "google.golang.org/genproto/googleapis/cloud/translate/v3"
        "google.golang.org/grpc"
)

func TestTranslateTextWithConcreteClient(t *testing.T) {
        ctx := context.Background()

        // Setup the fake server.
        fakeTranslationServer := &fakeTranslationServer{}
        l, err := net.Listen("tcp", "localhost:0")
        if err != nil {
                t.Fatal(err)
        }
        gsrv := grpc.NewServer()
        translatepb.RegisterTranslationServiceServer(gsrv, fakeTranslationServer)
        fakeServerAddr := l.Addr().String()
        go func() {
                if err := gsrv.Serve(l); err != nil {
                        panic(err)
                }
        }()

        // Create a client.
        client, err := translate.NewTranslationClient(ctx,
                option.WithEndpoint(fakeServerAddr),
                option.WithoutAuthentication(),
                option.WithGRPCDialOption(grpc.WithInsecure()),
        )
        if err != nil {
                t.Fatal(err)
        }

        // Run the test.
        text, err := TranslateTextWithConcreteClient(client, "Hola Mundo", "en-US")
        if err != nil {
                t.Fatal(err)
        }
        if text != "Hello World" {
                t.Fatalf("got %q, want Hello World", text)
        }
}

----------------------------------------

TITLE: Parsing Zap Log Level from String
DESCRIPTION: New functions added in v1.21.0 to parse log levels from strings.

LANGUAGE: Go
CODE:
zapcore.ParseLevel("info")
zap.ParseAtomicLevel("debug")

----------------------------------------

TITLE: Using go-deadlock Mutex and RWMutex in Go
DESCRIPTION: Examples of how to use the deadlock.Mutex and deadlock.RWMutex types as drop-in replacements for sync.Mutex and sync.RWMutex.

LANGUAGE: go
CODE:
import "github.com/sasha-s/go-deadlock"
var mu deadlock.Mutex
// Use normally, it works exactly like sync.Mutex does.
mu.Lock()

defer mu.Unlock()
// Or
var rw deadlock.RWMutex
rw.RLock()
defer rw.RUnlock()

----------------------------------------

TITLE: Custom Error Type Implementation in Go
DESCRIPTION: Shows how to implement custom error types that work with the errwrap package by implementing the Wrapper interface. Includes an example of creating an AppError type and using it with errwrap functions.

LANGUAGE: go
CODE:
type AppError {
  Code ErrorCode
  Err  error
}

func (e *AppError) WrappedErrors() []error {
  return []error{e.Err}
}

LANGUAGE: go
CODE:
err := &AppError{Err: fmt.Errorf("an error")}
if errwrap.ContainsType(err, fmt.Errorf("")) {
	// This will work!
}

----------------------------------------

TITLE: Building a List of Errors in Go using go-multierror
DESCRIPTION: Demonstrates how to use the Append function to create a list of errors. This approach works with nil, multierror.Error, or any other error type.

LANGUAGE: go
CODE:
var result error

if err := step1(); err != nil {
	result = multierror.Append(result, err)
}
if err := step2(); err != nil {
	result = multierror.Append(result, err)
}

return result

----------------------------------------

TITLE: Sink Interface Definition in Go
DESCRIPTION: Definition of the core Sink interface used for implementing custom event handling behavior. Includes Write and Close methods.

LANGUAGE: go
CODE:
type Sink {
	Write(Event) error
	Close() error
}

----------------------------------------

TITLE: Running Container with Containerd - PowerShell
DESCRIPTION: Example command to run a Windows container using the Containerd runtime with the runhcs shim.

LANGUAGE: powershell
CODE:
C:\> ctr.exe run --runtime io.containerd.runhcs.v1 --rm mcr.microsoft.com/windows/nanoserver:2004 windows-test cmd /c "echo Hello World!"

----------------------------------------

TITLE: Creating a New Logrus Logger Instance in Go
DESCRIPTION: Demonstrates how to create and configure a new instance of the Logrus logger.

LANGUAGE: go
CODE:
package main

import (
  "os"
  "github.com/sirupsen/logrus"
)

var log = logrus.New()

func main() {
  log.Out = os.Stdout

  log.WithFields(logrus.Fields{
    "animal": "walrus",
    "size":   10,
  }).Info("A group of walrus emerges from the ocean")
}

----------------------------------------

TITLE: Command Execution with PTY in Go
DESCRIPTION: Example demonstrating how to execute a command (grep) through a pseudo-terminal, showing input/output handling and basic PTY operations.

LANGUAGE: go
CODE:
package main

import (
	"io"
	"os"
	"os/exec"

	"github.com/creack/pty"
)

func main() {
	c := exec.Command("grep", "--color=auto", "bar")
	f, err := pty.Start(c)
	if err != nil {
		panic(err)
	}

	go func() {
		f.Write([]byte("foo\n"))
		f.Write([]byte("bar\n"))
		f.Write([]byte("baz\n"))
		f.Write([]byte{4}) // EOT
	}()
	io.Copy(os.Stdout, f)
}

----------------------------------------

TITLE: Building Containerd Shim - PowerShell
DESCRIPTION: Commands to build the Containerd shim for Windows runtime using PowerShell by setting GOOS to windows and building from the containerd-shim-runhcs-v1 command directory.

LANGUAGE: powershell
CODE:
C:\> $env:GOOS="windows"
C:\> go build .\cmd\containerd-shim-runhcs-v1

----------------------------------------

TITLE: Using Atomic Types in Go
DESCRIPTION: Example showing usage of atomic Uint32 type with Store, Sub, and CAS operations

LANGUAGE: go
CODE:
var atom atomic.Uint32
atom.Store(42)
atom.Sub(2)
atom.CAS(40, 11)

----------------------------------------

TITLE: Initializing and Using Memberlist in Go
DESCRIPTION: Example demonstrating how to create a memberlist instance, join an existing cluster, and list cluster members. Shows basic usage of the memberlist library including error handling and member iteration.

LANGUAGE: go
CODE:
/* Create the initial memberlist from a safe configuration.
   Please reference the godoc for other default config types.
   http://godoc.org/github.com/hashicorp/memberlist#Config
*/
list, err := memberlist.Create(memberlist.DefaultLocalConfig())
if err != nil {
	panic("Failed to create memberlist: " + err.Error())
}

// Join an existing cluster by specifying at least one known member.
n, err := list.Join([]string{"1.2.3.4"})
if err != nil {
	panic("Failed to join cluster: " + err.Error())
}

// Ask for members of the cluster
for _, member := range list.Members() {
	fmt.Printf("Member: %s %s\n", member.Name, member.Addr)
}

// Continue doing whatever you need, memberlist will maintain membership
// information in the background. Delegates can be used for receiving
// events when members join or leave.

----------------------------------------

TITLE: Replacing standard library imports with klauspost/compress
DESCRIPTION: Shows how to replace standard library compression package imports with the optimized versions from klauspost/compress.

LANGUAGE: Go
CODE:
import (
  "github.com/klauspost/compress/gzip"
  "github.com/klauspost/compress/zlib"
  "github.com/klauspost/compress/zip"
  "github.com/klauspost/compress/flate"
)

----------------------------------------

TITLE: Checking Git Configuration and Remotes in Bash
DESCRIPTION: This snippet demonstrates how to verify the Git configuration settings and list the configured remotes for the Moby fork repository.

LANGUAGE: bash
CODE:
$ git config --local -l
$ git remote -v

----------------------------------------

TITLE: Basic Usage of Mergo for Merging Structs
DESCRIPTION: Demonstrates how to use Mergo to merge two structs, with an option to override values.

LANGUAGE: go
CODE:
if err := mergo.Merge(&dst, src); err != nil {
    // ...
}

LANGUAGE: go
CODE:
if err := mergo.Merge(&dst, src, mergo.WithOverride); err != nil {
    // ...
}

----------------------------------------

TITLE: Executing Docker Build Scripts Using make.sh
DESCRIPTION: Demonstrates how to use the make.sh script to build specific bundles or run all default bundles for the Docker project. The example shows building the 'binary' and 'ubuntu' bundles, as well as running all default bundles.

LANGUAGE: bash
CODE:
./hack/make.sh binary ubuntu

# Or to run all default bundles:
./hack/make.sh

----------------------------------------

TITLE: Basic Compression Stream Example in Go
DESCRIPTION: Example showing how to compress data from an input reader to an output writer using Zstandard compression with default settings.

LANGUAGE: Go
CODE:
func Compress(in io.Reader, out io.Writer) error {
    enc, err := zstd.NewWriter(out)
    if err != nil {
        return err
    }
    _, err = io.Copy(enc, in)
    if err != nil {
        enc.Close()
        return err
    }
    return enc.Close()
}

----------------------------------------

TITLE: Running Tests for packageurl-go Library
DESCRIPTION: Shell command to run tests for the packageurl-go library using make. This command pulls test fixtures and executes the Go tests with verbose output and coverage information.

LANGUAGE: shell
CODE:
$ make test
go test -v -cover ./...
=== RUN   TestFromStringExamples
--- PASS: TestFromStringExamples (0.00s)
=== RUN   TestToStringExamples
--- PASS: TestToStringExamples (0.00s)
=== RUN   TestStringer
--- PASS: TestStringer (0.00s)
=== RUN   TestQualifiersMapConversion
--- PASS: TestQualifiersMapConversion (0.00s)
PASS
coverage: 90.7% of statements
ok      github.com/package-url/packageurl-go    0.004s  coverage: 90.7% of statements

----------------------------------------

TITLE: Generating Hash for Complex Struct in Go
DESCRIPTION: Example of using hashstructure to generate a hash for a complex struct containing nested maps and slices. It demonstrates the library's ability to handle various data types.

LANGUAGE: go
CODE:
type ComplexStruct struct {
    Name     string
    Age      uint
    Metadata map[string]interface{}
}

v := ComplexStruct{
    Name: "mitchellh",
    Age:  64,
    Metadata: map[string]interface{}{
        "car":      true,
        "location": "California",
        "siblings": []string{"Bob", "John"},
    },
}

hash, err := hashstructure.Hash(v, hashstructure.FormatV2, nil)
if err != nil {
    panic(err)
}

fmt.Printf("%d", hash)
// Output:
// 2307517237273902113

----------------------------------------

TITLE: Binding Flags to Variables in Go
DESCRIPTION: Shows how to bind a flag to a variable using the Var functions.

LANGUAGE: go
CODE:
var flagvar int
func init() {
    flag.IntVar(&flagvar, "flagname", 1234, "help message for flagname")
}

----------------------------------------

TITLE: Creating Systemd cgroup (v2)
DESCRIPTION: Creates a new systemd v2 cgroup slice with specified resources.

LANGUAGE: go
CODE:
import (
    "github.com/containerd/cgroups/v3/cgroup2"
    specs "github.com/opencontainers/runtime-spec/specs-go"
)

res := cgroup2.Resources{}
// dummy PID of -1 is used for creating a "general slice" to be used as a parent cgroup.
// see https://github.com/containerd/cgroups/blob/1df78138f1e1e6ee593db155c6b369466f577651/v2/manager.go#L732-L735
m, err := cgroup2.NewSystemd("/", "my-cgroup-abc.slice", -1, &res)
if err != nil {
	return err
}

----------------------------------------

TITLE: Defining Accept Header Structure in Go
DESCRIPTION: Defines a structure to represent individual clauses in an HTTP Accept Header, including type, subtype, quality value (Q), and additional parameters.

LANGUAGE: go
CODE:
type Accept struct {
    Type, SubType string
    Q             float32
    Params        map[string]string
}

----------------------------------------

TITLE: Running Presubmit Checks for Go CT Codebase
DESCRIPTION: Commands to run various tools and tests over the codebase, including code generation, build, test, and linters. These checks should be run before submitting pull requests.

LANGUAGE: bash
CODE:
./scripts/presubmit.sh

LANGUAGE: bash
CODE:
./scripts/presubmit.sh  --no-generate

LANGUAGE: bash
CODE:
golangci-lint run

----------------------------------------

TITLE: Unmarshaling TOML to Go struct
DESCRIPTION: Demonstrates how to unmarshal a TOML document into a Go struct using the Unmarshal function.

LANGUAGE: go
CODE:
doc := `
version = 2
name = "go-toml"
tags = ["go", "toml"]
`

var cfg MyConfig
err := toml.Unmarshal([]byte(doc), &cfg)
if err != nil {
	panic(err)
}
fmt.Println("version:", cfg.Version)
fmt.Println("name:", cfg.Name)
fmt.Println("tags:", cfg.Tags)

----------------------------------------

TITLE: Legacy SecureJoin Implementation Example in Go
DESCRIPTION: A trivial example implementation of SecureJoin using chroot on GNU/Linux systems. This requires root privileges and demonstrates the basic concept, though the actual library implementation is more sophisticated.

LANGUAGE: go
CODE:
package securejoin

import (
	"os/exec"
	"path/filepath"
)

func SecureJoin(root, unsafePath string) (string, error) {
	unsafePath = string(filepath.Separator) + unsafePath
	cmd := exec.Command("chroot", root,
		"readlink", "--canonicalize-missing", "--no-newline", unsafePath)
	output, err := cmd.CombinedOutput()
	if err != nil {
		return "", err
	}
	expanded := string(output)
	return filepath.Join(root, expanded), nil
}

----------------------------------------

TITLE: Copying Moby Binaries from Docker Container
DESCRIPTION: These Docker commands copy the built Moby binaries from the container to the host system.

LANGUAGE: powershell
CODE:
docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\docker.exe docker.exe
docker cp binaries:C:\gopath\src\github.com\docker\docker\bundles\dockerd.exe dockerd.exe

----------------------------------------

TITLE: Shorthand Flag Definition in Go
DESCRIPTION: Demonstrates defining flags with single-letter shorthand alternatives.

LANGUAGE: go
CODE:
var ip = flag.IntP("flagname", "f", 1234, "help message")
var flagvar bool
func init() {
	flag.BoolVarP(&flagvar, "boolname", "b", true, "help message")
}
flag.VarP(&flagVal, "varname", "v", "help message")

----------------------------------------

TITLE: Block-Based Compression Example in Go
DESCRIPTION: Example demonstrating how to compress individual blocks of data using a cached encoder instance for optimal performance.

LANGUAGE: Go
CODE:
import "github.com/klauspost/compress/zstd"

var encoder, _ = zstd.NewWriter(nil)

func Compress(src []byte) []byte {
    return encoder.EncodeAll(src, make([]byte, 0, len(src)))
}

----------------------------------------

TITLE: Initializing go-fuzz-headers Consumer in Go
DESCRIPTION: Creates a new Consumer instance with provided bytes from the fuzzing engine. This Consumer can then be used to generate fuzzed instances of different types.

LANGUAGE: go
CODE:
import (
	fuzz "github.com/AdaLogics/go-fuzz-headers"
)
data := []byte{'R', 'a', 'n', 'd', 'o', 'm'}
f := fuzz.NewConsumer(data)

----------------------------------------

TITLE: Building Moby Binaries in Docker Container
DESCRIPTION: These PowerShell commands set the Git commit and run the build process in a Docker container.

LANGUAGE: powershell
CODE:
$DOCKER_GITCOMMIT=(git rev-parse --short HEAD)
docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT nativebuildimage hack\make.ps1 -Binary
docker run --name binaries -e DOCKER_GITCOMMIT=$DOCKER_GITCOMMIT -m 2GB nativebuildimage hack\make.ps1 -Binary  # (if using Hyper-V containers)

----------------------------------------

TITLE: Marshaling Go struct to TOML
DESCRIPTION: Shows how to marshal a Go struct into a TOML document using the Marshal function.

LANGUAGE: go
CODE:
cfg := MyConfig{
	Version: 2,
	Name:    "go-toml",
	Tags:    []string{"go", "toml"},
}

b, err := toml.Marshal(cfg)
if err != nil {
	panic(err)
}
fmt.Println(string(b))

----------------------------------------

TITLE: BitSet Deserialization Example in Go
DESCRIPTION: Demonstrates how to read a serialized BitSet from a buffer back into a BitSet instance, with proper error handling.

LANGUAGE: go
CODE:
// Read back from buf
bs = bitset.New()
n, err = bs.ReadFrom(&buf)
if err != nil {
	// error
}
// n is the number of bytes read

----------------------------------------

TITLE: Formatting Commit Messages for Moby Project
DESCRIPTION: This snippet demonstrates the proper format for commit messages in the Moby project. It includes an example of a well-formatted commit message and explains the structure.

LANGUAGE: markdown
CODE:
```
scripts: add the test-cluster command

this uses tmux to setup a test cluster that you can easily kill and
start for debugging.

Fixes #38
```

----------------------------------------

TITLE: Configuring Client-Side gRPC Prometheus Monitoring
DESCRIPTION: Implements client-side interceptors for Prometheus monitoring of gRPC client calls. Shows how to set up connection with monitoring interceptors.

LANGUAGE: go
CODE:
import "github.com/grpc-ecosystem/go-grpc-prometheus"
...
   clientConn, err = grpc.Dial(
       address,
		   grpc.WithUnaryInterceptor(grpc_prometheus.UnaryClientInterceptor),
		   grpc.WithStreamInterceptor(grpc_prometheus.StreamClientInterceptor)
   )
   client = pb_testproto.NewTestServiceClient(clientConn)
   resp, err := client.PingEmpty(s.ctx, &myservice.Request{Msg: "hello"})

----------------------------------------

TITLE: Mapping Between Structs and Maps in Go using Mergo
DESCRIPTION: Demonstrates how to use Mergo to map between structs and maps in Go.

LANGUAGE: go
CODE:
if err := mergo.Map(&dst, srcMap); err != nil {
    // ...
}

----------------------------------------

TITLE: Checking Load Balancer Programming in Docker Swarm Network
DESCRIPTION: Demonstrates using ssd to verify load balancer programming consistency for containers on networks 'ov2' and 'ingress'. The command checks IPVS implementation across services running in a three-node swarm cluster.

LANGUAGE: bash
CODE:
docker run -v /var/run/docker.sock:/var/run/docker.sock -v /var/run/docker/netns:/var/run/docker/netns --privileged --net=host sanimej/ssd ov2
Verifying LB programming for containers on network ov2
Verifying container /s2.3.ltrdwef0iqf90rqauw3ehcs56...
service s2... OK
service s3... OK
service s1... OK
Verifying container /s3.3.nyhwvdvnocb4wftyhb8dr4fj8...
service s2... OK
service s3... OK
service s1... OK
Verifying container /s1.3.wwx5tuxhnvoz5vrb8ohphby0r...
service s2... OK
service s3... OK
service s1... OK
Verifying LB programming for containers on network ingress
Verifying container Ingress...
service web... OK

----------------------------------------

TITLE: Flag Parsing and Access in Go
DESCRIPTION: Shows how to parse command line flags and access their values.

LANGUAGE: go
CODE:
flag.Parse()
fmt.Println("ip has value ", *ip)
fmt.Println("flagvar has value ", flagvar)

----------------------------------------

TITLE: BitSet Installation Command
DESCRIPTION: Command to install the BitSet library using Go's package manager.

LANGUAGE: bash
CODE:
go get github.com/bits-and-blooms/bitset

----------------------------------------

TITLE: Importing go-toml v2 in Go
DESCRIPTION: Shows how to import the go-toml v2 library in a Go program.

LANGUAGE: go
CODE:
import "github.com/pelletier/go-toml/v2"

----------------------------------------

TITLE: BitSet Testing Commands
DESCRIPTION: Commands to run tests and check code coverage for the BitSet library.

LANGUAGE: bash
CODE:
go test
go test -cover

----------------------------------------

TITLE: Configuring and Using Codec Handlers
DESCRIPTION: Example showing how to create and configure codec handles, create encoders/decoders, and perform encoding/decoding operations

LANGUAGE: go
CODE:
var (
  bh codec.BincHandle
  mh codec.MsgpackHandle
)

mh.MapType = reflect.TypeOf(map[string]interface{}(nil))

var (
  r io.Reader
  w io.Writer
  b []byte
  h = &bh // or mh to use msgpack
)

dec = codec.NewDecoder(r, h)
dec = codec.NewDecoderBytes(b, h)
err = dec.Decode(&v) 

enc = codec.NewEncoder(w, h)
enc = codec.NewEncoderBytes(&b, h)
err = enc.Encode(v)

----------------------------------------

TITLE: Checking Gossip Protocol Consistency Across Docker Swarm Nodes
DESCRIPTION: Shows how to use ssd's gossip-consistency command to verify that networking state is synchronized across all nodes in the cluster by comparing hash digests of the control-plane state.

LANGUAGE: bash
CODE:
docker run -v /var/run/docker.sock:/var/run/docker.sock -v /var/run/docker/netns:/var/run/docker/netns --privileged sanimej/ssd ov2 gossip-consistency
Node id: sjfp0ca8f43rvnab6v7f21gq0 gossip hash c57d89094dbb574a37930393278dc282

Node id: bg228r3q9095grj4wxkqs80oe gossip hash c57d89094dbb574a37930393278dc282

Node id: 6jylcraipcv2pxdricqe77j5q gossip hash c57d89094dbb574a37930393278dc282

----------------------------------------

TITLE: Running Specific Integration Test
DESCRIPTION: Command to run a single integration test using the TESTFLAGS environment variable.

LANGUAGE: bash
CODE:
$ TESTFLAGS='-test.run TestDockerCLIBuildSuite' make test-integration

----------------------------------------

TITLE: Installing go-deadlock Package in Go
DESCRIPTION: Command to install the go-deadlock package using the go get command.

LANGUAGE: sh
CODE:
go get github.com/sasha-s/go-deadlock/...

----------------------------------------

TITLE: Loading/saving images for specific platform in Docker Engine API v1.48
DESCRIPTION: POST /images/{name}/load and GET /images/{name}/get now support a platform parameter to specify a platform for loading/saving images.

LANGUAGE: JSON
CODE:
POST /images/{name}/load?platform={JSON encoded OCI Platform}
GET /images/{name}/get?platform={JSON encoded OCI Platform}

----------------------------------------

TITLE: Verbosity-Based Logging in Klog
DESCRIPTION: Shows how to use verbosity levels in logging statements for conditional logging output.

LANGUAGE: go
CODE:
if glog.V(2) {
    glog.Info("Starting transaction...")
}

glog.V(2).Infoln("Processed", nItems, "elements")

----------------------------------------

TITLE: Benchmarking CSV Parsing Performance - Darwin ARM64
DESCRIPTION: Benchmark results comparing go-csvvalue against standard library performance on Darwin ARM64, demonstrating similar performance improvements in terms of memory allocation and processing speed.

LANGUAGE: text
CODE:
goos: darwin
goarch: arm64
pkg: github.com/tonistiigi/go-csvvalue
BenchmarkFields/stdlib/nocache-10                1679923               784.9 ns/op          4520 B/op         14 allocs/op
BenchmarkFields/stdlib/withcache-10              1641891               826.9 ns/op          4520 B/op         14 allocs/op
BenchmarkFields/csvvalue/withcache-10           34399642                33.93 ns/op            0 B/op          0 allocs/op
BenchmarkFields/csvvalue/nocache-10             17441373                67.21 ns/op           48 B/op          1 allocs/op
PASS

----------------------------------------

TITLE: YAML-JSON Conversion Example in Go
DESCRIPTION: Shows how to convert between YAML and JSON formats using YAMLToJSON and JSONToYAML methods.

LANGUAGE: go
CODE:
package main

import (
	"fmt"

	"sigs.k8s.io/yaml"
)

func main() {
	j := []byte(`{"name": "John", "age": 30}`)
	y, err := yaml.JSONToYAML(j)
	if err != nil {
		fmt.Printf("err: %v\n", err)
		return
	}
	fmt.Println(string(y))

	j2, err := yaml.YAMLToJSON(y)
	if err != nil {
		fmt.Printf("err: %v\n", err)
		return
	}
	fmt.Println(string(j2))
}

----------------------------------------

TITLE: Read-Write Transaction Example
DESCRIPTION: Example showing a read-write transaction with bucket creation

LANGUAGE: go
CODE:
err := db.Update(func(tx *bolt.Tx) error {
	b, err := tx.CreateBucket([]byte("MyBucket"))
	if err != nil {
		return fmt.Errorf("create bucket: %s", err)
	}
	return nil
})

----------------------------------------

TITLE: Generating Various Fuzzed Types in Go with go-fuzz-headers
DESCRIPTION: Demonstrates the usage of different APIs provided by go-fuzz-headers to generate fuzzed instances of various types such as strings, integers, bytes, booleans, maps, and more.

LANGUAGE: go
CODE:
createdString, err := f.GetString() // Gets a string
createdInt, err := f.GetInt() // Gets an integer
createdByte, err := f.GetByte() // Gets a byte
createdBytes, err := f.GetBytes() // Gets a byte slice
createdBool, err := f.GetBool() // Gets a boolean
err := f.FuzzMap(target_map) // Fills a map
createdTarBytes, err := f.TarBytes() // Gets bytes of a valid tar archive
err := f.CreateFiles(inThisDir) // Fills inThisDir with files
createdString, err := f.GetStringFrom("anyCharInThisString", ofThisLength) // Gets a string that consists of chars from "anyCharInThisString" and has the exact length "ofThisLength"

----------------------------------------

TITLE: Running Specific Unit Test
DESCRIPTION: Command to run a single unit test using the TESTFLAGS environment variable.

LANGUAGE: bash
CODE:
$ TESTFLAGS='-test.run ^TestValidateIPAddress$' make test-unit

----------------------------------------

TITLE: Tagging a New Release
DESCRIPTION: These Git commands demonstrate how to tag a new release version for the project.

LANGUAGE: bash
CODE:
git checkout v2
git pull
git tag v2.2.0
git push --tags

----------------------------------------

TITLE: Flag Default Value Configuration in Go
DESCRIPTION: Shows how to set default values for flags when no option is provided.

LANGUAGE: go
CODE:
var ip = flag.IntP("flagname", "f", 1234, "help message")
flag.Lookup("flagname").NoOptDefVal = "4321"

----------------------------------------

TITLE: Creating Docker Network and Running Container
DESCRIPTION: Commands to create a nat-unprotected network bridge and run a container with port mapping

LANGUAGE: bash
CODE:
docker network create \
  -o com.docker.network.bridge.name=bridge1 \
  -o com.docker.network.bridge.gateway_mode_ipv4=nat-unprotected \
  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1
docker run --network bridge1 -p 8080:80 --name c1 busybox

----------------------------------------

TITLE: Adding a New Node to an Existing Raft Cluster in Go
DESCRIPTION: This snippet illustrates how to add a new node to an existing Raft cluster. It involves starting the node with an empty peer list after the existing cluster has been updated to include the new node.

LANGUAGE: go
CODE:
  // Create storage and config as shown above.
  n := raft.StartNode(c, nil)

----------------------------------------

TITLE: Adding Kind Field to StartSpanOptions in Go
DESCRIPTION: Adds a new 'Kind' field to the StartSpanOptions struct in the runtime package to allow setting a span kind when starting a span.

LANGUAGE: go
CODE:
type StartSpanOptions struct {
  // existing fields
  Kind SpanKind
}

----------------------------------------

TITLE: Implementing RPC Server with Codec
DESCRIPTION: Example demonstrating how to set up an RPC server using the codec library

LANGUAGE: go
CODE:
go func() {
    for {
        conn, err := listener.Accept()
        rpcCodec := codec.GoRpc.ServerCodec(conn, h)
        //OR rpcCodec := codec.MsgpackSpecRpc.ServerCodec(conn, h)
        rpc.ServeCodec(rpcCodec)
    }
}()

----------------------------------------

TITLE: Custom Dialer Configuration for Syslog in Go
DESCRIPTION: Shows how to implement custom dialing behavior with timeout controls and TLS configuration

LANGUAGE: go
CODE:
netDialer := &net.Dialer{Timeout: time.Second*5} // easy timeouts
realNetwork := "tcp" // real network, other vars your dail func can close over
dial := func(network, addr string) (net.Conn, error) {
    // cannot use "network" here as it'll simply be "custom" which will fail
    return tls.DialWithDialer(netDialer, realNetwork, addr, &config)
}

w, err := DialWithCustomDialer("custom", "192.168.0.52:514", syslog.LOG_ERR, "testtag", dial)

----------------------------------------

TITLE: Running Integration Tests in Development Container
DESCRIPTION: Command to run integration tests and other tests using the hack/make.sh script inside a Moby development container.

LANGUAGE: bash
CODE:
# hack/make.sh dynbinary binary test-integration test-docker-py

----------------------------------------

TITLE: VSCode Linting Configuration JSON
DESCRIPTION: Configuration settings for enabling golangci-lint integration in Visual Studio Code for automated linting on save.

LANGUAGE: json
CODE:
    "go.lintTool": "golangci-lint",
    "go.lintOnSave": "package"

----------------------------------------

TITLE: Custom Flag Implementation in Go
DESCRIPTION: Demonstrates creating custom flags that implement the Value interface.

LANGUAGE: go
CODE:
flag.Var(&flagVal, "name", "help message for flagname")

----------------------------------------

TITLE: Running SCTP Server and Client in Go
DESCRIPTION: This snippet demonstrates how to build and run an example SCTP server and client using the Go implementation. It includes commands for compiling the example and running both server and client with specific port and IP configurations.

LANGUAGE: bash
CODE:
$ cd example
$ go build
$ # run example SCTP server
$ ./example -server -port 1000 -ip 10.10.0.1,10.20.0.1
$ # run example SCTP client
$ ./example -port 1000 -ip 10.10.0.1,10.20.0.1

----------------------------------------

TITLE: Creating Docker Network and Container
DESCRIPTION: Commands to create a user-defined network bridge1 and run a container with port mapping 8080:80

LANGUAGE: bash
CODE:
docker network create \
  -o com.docker.network.bridge.name=bridge1 \
  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1
docker run --network bridge1 -p 8080:80 --name c1 busybox

----------------------------------------

TITLE: Creating New cgroup with Static Path (v1)
DESCRIPTION: Creates a new cgroup using a static path for all subsystems under /test with CPU shares resource constraint.

LANGUAGE: go
CODE:
shares := uint64(100)
control, err := cgroup1.New(cgroup1.StaticPath("/test"), &specs.LinuxResources{
    CPU: &specs.LinuxCPU{
        Shares: &shares,
    },
})
defer control.Delete()

----------------------------------------

TITLE: Implementing RPC Client with Codec
DESCRIPTION: Example showing how to create an RPC client using the codec library

LANGUAGE: go
CODE:
conn, err = net.Dial("tcp", "localhost:5555")
rpcCodec := codec.GoRpc.ClientCodec(conn, h)
//OR rpcCodec := codec.MsgpackSpecRpc.ClientCodec(conn, h)
client := rpc.NewClientWithCodec(rpcCodec)

----------------------------------------

TITLE: Building Registry with Make
DESCRIPTION: Demonstrates the process of building the registry using the provided Makefile, including formatting, vetting, linting, building, and testing.

LANGUAGE: bash
CODE:
$ make
+ clean
+ fmt
+ vet
+ lint
+ build
github.com/docker/docker/vendor/src/code.google.com/p/go/src/pkg/archive/tar
github.com/sirupsen/logrus
github.com/docker/libtrust
...
github.com/yvasiyarov/gorelic
github.com/docker/distribution/registry/handlers
github.com/docker/distribution/cmd/registry
+ test
...
ok    github.com/docker/distribution/digest 7.875s
ok    github.com/docker/distribution/manifest 0.028s
ok    github.com/docker/distribution/notifications  17.322s
?     github.com/docker/distribution/registry [no test files]
ok    github.com/docker/distribution/registry/api/v2  0.101s
?     github.com/docker/distribution/registry/auth  [no test files]
ok    github.com/docker/distribution/registry/auth/silly  0.011s
...
+ /Users/sday/go/src/github.com/docker/distribution/bin/registry
+ /Users/sday/go/src/github.com/docker/distribution/bin/registry-api-descriptor-template
+ binaries

----------------------------------------

TITLE: Signing Git Commit Messages for Moby Project
DESCRIPTION: Example of how to sign off on Git commit messages to certify compliance with the Developer Certificate of Origin for Moby Project contributions.

LANGUAGE: Plaintext
CODE:
Signed-off-by: Joe Smith <joe.smith@email.com>

----------------------------------------

TITLE: Installing multierr Go Library
DESCRIPTION: Command to install the multierr Go library using go get. This will fetch the latest version of the library and add it to your Go module dependencies.

LANGUAGE: shell
CODE:
go get -u go.uber.org/multierr

----------------------------------------

TITLE: Demonstrating YAML Marshaling and Unmarshaling in Go
DESCRIPTION: Example showing how to use the yaml.v2 package to marshal and unmarshal YAML data in Go, including struct tags and different data structures. Demonstrates both struct-based and map-based YAML processing.

LANGUAGE: go
CODE:
package main

import (
        "fmt"
        "log"

        "gopkg.in/yaml.v2"
)

var data = `
a: Easy!
b:
  c: 2
  d: [3, 4]
`

// Note: struct fields must be public in order for unmarshal to
// correctly populate the data.
type T struct {
        A string
        B struct {
                RenamedC int   `yaml:"c"`
                D        []int `yaml:",flow"`
        }
}

func main() {
        t := T{}
    
        err := yaml.Unmarshal([]byte(data), &t)
        if err != nil {
                log.Fatalf("error: %v", err)
        }
        fmt.Printf("--- t:\n%v\n\n", t)
    
        d, err := yaml.Marshal(&t)
        if err != nil {
                log.Fatalf("error: %v", err)
        }
        fmt.Printf("--- t dump:\n%s\n\n", string(d))
    
        m := make(map[interface{}]interface{})
    
        err = yaml.Unmarshal([]byte(data), &m)
        if err != nil {
                log.Fatalf("error: %v", err)
        }
        fmt.Printf("--- m:\n%v\n\n", m)
    
        d, err = yaml.Marshal(&m)
        if err != nil {
                log.Fatalf("error: %v", err)
        }
        fmt.Printf("--- m dump:\n%s\n\n", string(d))
}

----------------------------------------

TITLE: Redirecting Published Port to Target Port in Container Namespace
DESCRIPTION: Adds a rule to the PREROUTING chain of the NAT table in the container namespace. This rule changes the published port to the target port for incoming service requests.

LANGUAGE: bash
CODE:
"REDIRECT   tcp  --  anywhere  10.255.0.11  tcp dpt:30000 redir ports 80"

----------------------------------------

TITLE: Creating Google Cloud Storage Client with Default Credentials
DESCRIPTION: Demonstrates how to create a new Google Cloud Storage client using default application credentials.

LANGUAGE: go
CODE:
client, err := storage.NewClient(ctx)

----------------------------------------

TITLE: Installing Singleflight Package Using Go Get
DESCRIPTION: Command to install the singleflight package using the go get command. This will download and install the package from the specified repository.

LANGUAGE: shell
CODE:
go get resenje.org/singleflight

----------------------------------------

TITLE: Updating cgroup Resources (v1)
DESCRIPTION: Updates the resource constraints of an existing cgroup.

LANGUAGE: go
CODE:
shares = uint64(200)
if err := control.Update(&specs.LinuxResources{
    CPU: &specs.LinuxCPU{
        Shares: &shares,
    },
}); err != nil {
}

----------------------------------------

TITLE: Adding IP Address to Loopback Interface
DESCRIPTION: Shows how to add a new IP address (169.254.169.254/32) to the loopback interface using the netlink library. Demonstrates the use of LinkByName and AddrAdd functions.

LANGUAGE: go
CODE:
package main

import (
    "github.com/vishvananda/netlink"
)

func main() {
    lo, _ := netlink.LinkByName("lo")
    addr, _ := netlink.ParseAddr("169.254.169.254/32")
    netlink.AddrAdd(lo, addr)
}

----------------------------------------

TITLE: Running Integration Tests with Debugger in Bash
DESCRIPTION: This command runs a specific integration test with the debugger attached. It uses environment variables to specify the test directory and test flags, and executes through the make.sh script.

LANGUAGE: bash
CODE:
$ TEST_INTEGRATION_DIR=./integration/networking \
    TESTFLAGS='-test.run TestBridgeICC' \
    ./hack/make.sh dynbinary test-integration

----------------------------------------

TITLE: Installing Levenshtein Package in Go
DESCRIPTION: This command installs the Levenshtein package from GitHub using the Go package manager. It downloads and installs the package in the user's Go workspace.

LANGUAGE: bash
CODE:
go get github.com/agext/levenshtein

----------------------------------------

TITLE: Performing Set Operations in Go
DESCRIPTION: Demonstrates various set operations such as union, contains, difference, intersection, and cardinality using the golang-set library.

LANGUAGE: go
CODE:
  all := required
    .Union(sciences)
    .Union(electives)
    .Union(bonus)
  
  fmt.Println(all)

  result := sciences.Contains("cooking")
  fmt.Println(result)

  notScience := all.Difference(sciences)
  fmt.Println(notScience)

  reqScience := sciences.Intersect(required)

  fmt.Println(bonus.Cardinality())

----------------------------------------

TITLE: Adding Process to cgroup (v1)
DESCRIPTION: Adds a process to an existing cgroup by PID.

LANGUAGE: go
CODE:
if err := control.Add(cgroup1.Process{Pid:1234}); err != nil {
}

----------------------------------------

TITLE: Installing PTY Package with Go
DESCRIPTION: Command to install the pty package using Go's package manager.

LANGUAGE: sh
CODE:
go get github.com/creack/pty

----------------------------------------

TITLE: Freezing and Thawing cgroup (v1)
DESCRIPTION: Controls the freeze and thaw states of a cgroup.

LANGUAGE: go
CODE:
if err := control.Freeze(); err != nil {
}
if err := control.Thaw(); err != nil {
}

----------------------------------------

TITLE: Creating cgroup with Systemd Slice Support (v1)
DESCRIPTION: Creates a new cgroup using systemd slice support with CPU shares configuration.

LANGUAGE: go
CODE:
control, err := cgroup1.New(cgroup1.Systemd, cgroup1.Slice("system.slice", "runc-test"), &specs.LinuxResources{
    CPU: &specs.CPU{
        Shares: &shares,
    },
})

----------------------------------------

TITLE: Joining an Endpoint to a Sandbox
DESCRIPTION: JSON request and response for the /NetworkDriver.Join endpoint, used when adding an endpoint to a sandbox.

LANGUAGE: json
CODE:
{
	"NetworkID": string,
	"EndpointID": string,
	"SandboxKey": string,
	"Options": { ... }
}

LANGUAGE: json
CODE:
{
	"InterfaceName": {
		SrcName: string,
		DstPrefix: string
	},
	"Gateway": string,
	"GatewayIPv6": string,
	"StaticRoutes": [{
		"Destination": string,
		"RouteType": int,
		"NextHop": string,
	}, ...]
}

----------------------------------------

TITLE: Handling Huff0 Compression Errors in Go
DESCRIPTION: This snippet shows the possible error values returned by the Huff0 compression functions and their meanings. It's crucial for proper error handling in the compression process.

LANGUAGE: go
CODE:
| Error               | Description                                                                 |
|---------------------|-----------------------------------------------------------------------------|
| `<nil>`             | Everything ok, output is returned                                           |
| `ErrIncompressible` | Returned when input is judged to be too hard to compress                    |
| `ErrUseRLE`         | Returned from the compressor when the input is a single byte value repeated |
| `ErrTooBig`         | Returned if the input block exceeds the maximum allowed size (128 Kib)      |
| `(error)`           | An internal error occurred.                                                 |

----------------------------------------

TITLE: Running Tests and Coverage in Go
DESCRIPTION: Commands for running tests and generating coverage reports

LANGUAGE: bash
CODE:
go test
script/coverage --html

----------------------------------------

TITLE: Omitting ResponseError.RawResponse from JSON Marshaling in Go
DESCRIPTION: Modifies the ResponseError struct to exclude the RawResponse field when marshaling to JSON, allowing instances to be marshaled.

LANGUAGE: go
CODE:
type ResponseError struct {
  // other fields
  RawResponse *http.Response `json:"-"`
}

----------------------------------------

TITLE: Basic Decompression Stream Example in Go
DESCRIPTION: Example showing how to decompress a Zstandard compressed stream from an input reader to an output writer.

LANGUAGE: Go
CODE:
func Decompress(in io.Reader, out io.Writer) error {
    d, err := zstd.NewReader(in)
    if err != nil {
        return err
    }
    defer d.Close()
    
    // Copy content...
    _, err = io.Copy(out, d)
    return err
}

----------------------------------------

TITLE: Running Benchmarks for xxHash Go Implementation
DESCRIPTION: Provides commands to run benchmarks comparing pure Go and assembly implementations of Sum64 using the go test tool with specific flags.

LANGUAGE: bash
CODE:
benchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')
benchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')

----------------------------------------

TITLE: Demonstrating Recursive Read Locking Deadlock in Go
DESCRIPTION: A complete Go program demonstrating how recursive read locking can lead to a deadlock situation.

LANGUAGE: go
CODE:
package main

import (
	"fmt"
	"sync"
)

func main() {
	var mu sync.RWMutex

	chrlockTwice := make(chan struct{}) // Used to control rlockTwice
	rlockTwice := func() {
		mu.RLock()
		fmt.Println("first Rlock succeeded")
		<-chrlockTwice
		<-chrlockTwice
		fmt.Println("trying to Rlock again")
		mu.RLock()
		fmt.Println("second Rlock succeeded")
		mu.RUnlock()
		mu.RUnlock()
	}

	chLock := make(chan struct{}) // Used to contol lock
	lock := func() {
		<-chLock
		fmt.Println("about to Lock")
		mu.Lock()
		fmt.Println("Lock succeeded")
		mu.Unlock()
		<-chLock
	}

	control := func() {
		chrlockTwice <- struct{}{}
		chLock <- struct{}{}

		close(chrlockTwice)
		close(chLock)
	}

	go control()
	go lock()
	rlockTwice()
}

----------------------------------------

TITLE: Using Labeled Timer Metric in Go
DESCRIPTION: Shows how to use a labeled timer metric to record duration for a specific action using the WithValues method.

LANGUAGE: go
CODE:
containerActions.WithValues("create").UpdateSince(start)

----------------------------------------

TITLE: Configuring PostgreSQL Database Connection in CFSSL
DESCRIPTION: JSON configuration for connecting CFSSL to a PostgreSQL database. Includes driver specification and connection string with user credentials and host details.

LANGUAGE: json
CODE:
{"driver":"postgres","data_source":"postgres://user:password@host/db"}

----------------------------------------

TITLE: Recording Stats in OpenCensus Go
DESCRIPTION: Example demonstrating how to record measurements with OpenCensus stats.

LANGUAGE: go
CODE:
stats.Record(ctx, videoSize.M(102478))

----------------------------------------

TITLE: Rewinding Request Bodies in BearerTokenPolicy in Go
DESCRIPTION: Modifies the BearerTokenPolicy to rewind request bodies before retrying, allowing the full request body to be resent.

LANGUAGE: go
CODE:
func (p *BearerTokenPolicy) Do(req *policy.Request) (*http.Response, error) {
  // existing code
  if err != nil {
    req.RewindBody()
    // retry request
  }
  // rest of function
}

----------------------------------------

TITLE: Macvlan 802.1q VLAN Trunk Configuration
DESCRIPTION: Sets up Macvlan networks with 802.1q VLAN tagging for network isolation using VLAN IDs 50 and 60

LANGUAGE: bash
CODE:
docker network create -d macvlan \
    --subnet=192.168.50.0/24 \
    --gateway=192.168.50.1 \
    -o parent=eth0.50 macvlan50

docker network create -d macvlan \
    --subnet=192.168.60.0/24 \
    --gateway=192.168.60.1 \
    -o parent=eth0.60 -o \
    -o macvlan_mode=bridge macvlan60

----------------------------------------

TITLE: Initializing procfs and Reading Stat Information in Go
DESCRIPTION: This snippet demonstrates how to initialize the proc filesystem mount point and read stat information using the procfs package.

LANGUAGE: go
CODE:
fs, err := procfs.NewFS("/proc")
stats, err := fs.Stat()

----------------------------------------

TITLE: Using Tags with Profiler in OpenCensus Go
DESCRIPTION: Demonstrates how to apply OpenCensus tags as profiler labels for Go 1.9+.

LANGUAGE: go
CODE:
ctx, err = tag.New(ctx,
	tag.Insert(osKey, "macOS-10.12.5"),
	tag.Insert(userIDKey, "fff0989878"),
)
if err != nil {
	log.Fatal(err)
}
tag.Do(ctx, func(ctx context.Context) {
	// Do work.
	// When profiling is on, samples will be
	// recorded with the key/values from the tag map.
})

----------------------------------------

TITLE: Custom TLS Configuration for Syslog in Go
DESCRIPTION: Shows how to create a custom TLS configuration for syslog connections with certificate pool management

LANGUAGE: go
CODE:
pool := x509.NewCertPool()
serverCert, err := ioutil.ReadFile("/path/to/servercert.pem")
if err != nil {
    return nil, err
}
pool.AppendCertsFromPEM(serverCert)
config := tls.Config{
    RootCAs: pool,
}

w, err := DialWithTLSConfig(network, raddr, priority, tag, &config)

----------------------------------------

TITLE: Interactive Shell Implementation with PTY in Go
DESCRIPTION: Advanced example showing how to create an interactive shell using PTY, including terminal size handling, signal management, and raw mode configuration.

LANGUAGE: go
CODE:
package main

import (
        "io"
        "log"
        "os"
        "os/exec"
        "os/signal"
        "syscall"

        "github.com/creack/pty"
        "golang.org/x/term"
)

func test() error {
        // Create arbitrary command.
        c := exec.Command("bash")

        // Start the command with a pty.
        ptmx, err := pty.Start(c)
        if err != nil {
                return err
        }
        // Make sure to close the pty at the end.
        defer func() { _ = ptmx.Close() }() // Best effort.

        // Handle pty size.
        ch := make(chan os.Signal, 1)
        signal.Notify(ch, syscall.SIGWINCH)
        go func() {
                for range ch {
                        if err := pty.InheritSize(os.Stdin, ptmx); err != nil {
                                log.Printf("error resizing pty: %s", err)
                        }
                }
        }()
        ch <- syscall.SIGWINCH // Initial resize.
        defer func() { signal.Stop(ch); close(ch) }() // Cleanup signals when done.

        // Set stdin in raw mode.
        oldState, err := term.MakeRaw(int(os.Stdin.Fd()))
        if err != nil {
                panic(err)
        }
        defer func() { _ = term.Restore(int(os.Stdin.Fd()), oldState) }() // Best effort.

        // Copy stdin to the pty and the pty to stdout.
        // NOTE: The goroutine will keep reading until the next keystroke before returning.
        go func() { _, _ = io.Copy(ptmx, os.Stdin) }()
        _, _ = io.Copy(os.Stdout, ptmx)

        return nil
}

func main() {
        if err := test(); err != nil {
                log.Fatal(err)
        
}

----------------------------------------

TITLE: Chain Usage Example - Go
DESCRIPTION: Shows how to create and use a conversion chain to convert between struct versions.

LANGUAGE: go
CODE:
chain := converter.NewChain(V1{}, V2{}, V3{})

v1 := // somehow get a populated v1 struct
v3 := V3{}
chain.Convert(v1, &v3)

----------------------------------------

TITLE: Create Container API Request
DESCRIPTION: Example HTTP request to create a new container

LANGUAGE: HTTP
CODE:
POST /v1.24/containers/create HTTP/1.1
Content-Type: application/json
Content-Length: 12345

{
  "Hostname": "",
  "Domainname": "",
  "User": "",
  "AttachStdin": false,
  "AttachStdout": true,
  "AttachStderr": true,
  "Tty": false,
  "OpenStdin": false,
  "StdinOnce": false,
  "Env": [
    "FOO=bar",
    "BAZ=quux"
  ],
  "Cmd": [
    "date"
  ],
  "Entrypoint": "",
  "Image": "ubuntu",
  "Labels": {
    "com.example.vendor": "Acme",
    "com.example.license": "GPL",
    "com.example.version": "1.0"
  },
  "Volumes": {
    "/volumes/data": {}
  },
  "WorkingDir": "",
  "NetworkDisabled": false,
  "MacAddress": "12:34:56:78:9a:bc",
  "ExposedPorts": {
    "22/tcp": {}
  },
  "StopSignal": "SIGTERM",
  "HostConfig": {
    "Binds": ["/tmp:/tmp"],
    "Links": ["redis3:redis"],
    "Memory": 0,
    "MemorySwap": 0,
    "MemoryReservation": 0,
    "KernelMemory": 0,
    "CpuPercent": 80,
    "CpuShares": 512,
    "CpuPeriod": 100000,
    "CpuQuota": 50000,
    "CpusetCpus": "0,1",
    "CpusetMems": "0,1",
    "MaximumIOps": 0,
    "MaximumIOBps": 0,
    "BlkioWeight": 300,
    "BlkioWeightDevice": [{}],
    "BlkioDeviceReadBps": [{}],
    "BlkioDeviceReadIOps": [{}],
    "BlkioDeviceWriteBps": [{}],
    "BlkioDeviceWriteIOps": [{}],
    "MemorySwappiness": 60,
    "OomKillDisable": false,
    "OomScoreAdj": 500,
    "PidMode": "",
    "PidsLimit": -1,
    "PortBindings": { "22/tcp": [{ "HostPort": "11022" }] },
    "PublishAllPorts": false,
    "Privileged": false,
    "ReadonlyRootfs": false,
    "Dns": ["8.8.8.8"],
    "DnsOptions": [""],
    "DnsSearch": [""],
    "ExtraHosts": null,
    "VolumesFrom": ["parent", "other:ro"],
    "CapAdd": ["NET_ADMIN"],
    "CapDrop": ["MKNOD"],
    "GroupAdd": ["newgroup"],
    "RestartPolicy": { "Name": "", "MaximumRetryCount": 0 },
    "NetworkMode": "bridge",
    "Devices": [],
    "Ulimits": [{}],
    "LogConfig": { "Type": "json-file", "Config": {} },
    "SecurityOpt": [],
    "StorageOpt": {},
    "CgroupParent": "",
    "VolumeDriver": "",
    "ShmSize": 67108864
  }
}

----------------------------------------

TITLE: Docker Filter Table Commands
DESCRIPTION: Template placeholder for displaying iptables commands used to set up filter table rules. Uses template variable SFilter4.

LANGUAGE: bash
CODE:
{{index . "SFilter4"}}

----------------------------------------

TITLE: Using term Package to Check Terminal Status and Size in Go
DESCRIPTION: This snippet demonstrates how to use the term package to check if a file descriptor is a terminal and retrieve its window size. It uses os.Stdin.Fd() to get the file descriptor and term.IsTerminal() to check if it's a terminal. If so, it uses term.GetWinsize() to get the terminal dimensions.

LANGUAGE: go
CODE:
package main

import (
	"log"
	"os"

	"github.com/moby/term"
)

func main() {
	fd := os.Stdin.Fd()
	if term.IsTerminal(fd) {
		ws, err := term.GetWinsize(fd)
		if err != nil {
			log.Fatalf("term.GetWinsize: %s", err)
		}
		log.Printf("%d:%d\n", ws.Height, ws.Width)
	}
}

----------------------------------------

TITLE: Creating a Network
DESCRIPTION: JSON request for the /NetworkDriver.CreateNetwork endpoint, containing network ID, IP addressing data, and options.

LANGUAGE: json
CODE:
{
	"NetworkID": string,
	"IPv4Data" : [
	{
		"AddressSpace": string,
		"Pool": ipv4-cidr-string,
		"Gateway" : ipv4-cidr-string,
		"AuxAddresses": {
			"<identifier1>" : "<ipv4-address1>",
			"<identifier2>" : "<ipv4-address2>",
			...
		}
	},
	],
	"IPv6Data" : [
	{
		"AddressSpace": string,
		"Pool": ipv6-cidr-string,
		"Gateway" : ipv6-cidr-string,
		"AuxAddresses": {
			"<identifier1>" : "<ipv6-address1>",
			"<identifier2>" : "<ipv6-address2>",
			...
		}
	},
	],
	"Options": {
		...
	}
}

----------------------------------------

TITLE: Synchronous Logging with Cloud Logging in Go
DESCRIPTION: Shows how to use synchronous ingestion for critical log entries, ensuring immediate writing to the logging service.

LANGUAGE: go
CODE:
logger := client.Logger("my-log")
logger.LogSync(context.Background(), logging.Entry{Payload: "something happened!"})

----------------------------------------

TITLE: Raw Table iptables Commands
DESCRIPTION: iptables commands for raw table showing direct access filtering rules

LANGUAGE: bash
CODE:
-P PREROUTING ACCEPT
-P OUTPUT ACCEPT
-A PREROUTING -d 192.0.2.2/32 ! -i bridge1 -p tcp -m tcp --dport 80 -j DROP

----------------------------------------

TITLE: BitSet Serialization Example in Go
DESCRIPTION: Shows how to serialize a BitSet to a byte stream and deserialize it back. Includes initialization of bits and error handling for I/O operations.

LANGUAGE: go
CODE:
const length = 9585
const oneEvery = 97
bs := bitset.New(length)
// Add some bits
for i := uint(0); i < length; i += oneEvery {
	bs = bs.Set(i)
}

var buf bytes.Buffer
n, err := bs.WriteTo(&buf)
if err != nil {
	// failure
}
// Here n == buf.Len()

----------------------------------------

TITLE: Registering Views in OpenCensus Go
DESCRIPTION: Example of registering a view with distribution aggregation for collecting stats.

LANGUAGE: go
CODE:
if err := view.Register(&view.View{
	Name:        "example.com/video_size_distribution",
	Description: "distribution of processed video size over time",
	Measure:     videoSize,
	Aggregation: view.Distribution(1<<32, 2<<32, 3<<32),
}); err != nil {
	log.Fatalf("Failed to register view: %v", err)
}

----------------------------------------

TITLE: Mounting images inside containers in Docker Engine API v1.48
DESCRIPTION: POST /containers/create now supports Mount of type image for mounting an image inside a container.

LANGUAGE: JSON
CODE:
POST /containers/create
{
  "Mounts": [
    {
      "Type": "image",
      "Source": "image_name"
    }
  ]
}

----------------------------------------

TITLE: Signed Commit Command
DESCRIPTION: Git command for creating a signed-off commit using the -s flag

LANGUAGE: bash
CODE:
$ git commit -s -m "this is a commit message"

----------------------------------------

TITLE: FSNotify Event Check Example
DESCRIPTION: Example showing the improved event checking syntax using Has() method introduced in version 1.6.0

LANGUAGE: Go
CODE:
if event.Has(Write) && !event.Has(Remove) {
    // Handle write event that isn't also a remove
}

----------------------------------------

TITLE: Setting Environment Variables for gRPC Logging in Go
DESCRIPTION: Shows how to enable verbose logging for gRPC in Go by setting environment variables. This can be useful for debugging and understanding the internal workings of gRPC.

LANGUAGE: shell
CODE:
$ export GRPC_GO_LOG_VERBOSITY_LEVEL=99
$ export GRPC_GO_LOG_SEVERITY_LEVEL=info

----------------------------------------

TITLE: Running Benchmark for Logr Performance in Markdown
DESCRIPTION: Instructions for running the benchmark to measure Logr's performance before and after code changes. This is required for any proposed modifications to ensure the library remains lightweight.

LANGUAGE: markdown
CODE:
[benchmark](./benchmark)

----------------------------------------

TITLE: Importing and Initializing Klog in Go
DESCRIPTION: Shows how to import klog v2 and initialize flags. Demonstrates replacing glog imports with klog imports and explicit flag initialization.

LANGUAGE: go
CODE:
"k8s.io/klog/v2"

klog.InitFlags(nil)

----------------------------------------

TITLE: Handling CAE Claims Challenges in BearerTokenPolicy in Go
DESCRIPTION: Updates the BearerTokenPolicy to handle Continuous Access Evaluation (CAE) claims challenges.

LANGUAGE: go
CODE:
func (p *BearerTokenPolicy) Do(req *policy.Request) (*http.Response, error) {
  // existing code
  if resp.StatusCode == 401 {
    // check for CAE challenge
    // handle CAE claims if present
  }
  // rest of function
}

----------------------------------------

TITLE: Range Scanning Radix Tree in Go
DESCRIPTION: Shows how to perform range scanning operations on the radix tree. Demonstrates inserting multiple values and iterating over keys within a specific lexicographical range using SeekLowerBound.

LANGUAGE: go
CODE:
// Create a tree
r := iradix.New()
r, _, _ = r.Insert([]byte("001"), 1)
r, _, _ = r.Insert([]byte("002"), 2)
r, _, _ = r.Insert([]byte("005"), 5)
r, _, _ = r.Insert([]byte("010"), 10)
r, _, _ = r.Insert([]byte("100"), 10)

// Range scan over the keys that sort lexicographically between [003, 050)
it := r.Root().Iterator()
it.SeekLowerBound([]byte("003"))
for key, _, ok := it.Next(); ok; key, _, ok = it.Next() {
  if key >= "050" {
      break
  }
  fmt.Println(key)
}

----------------------------------------

TITLE: Defining CheckpointOptions Message Type for ContainerD runc v1 in Protocol Buffers
DESCRIPTION: This snippet defines the CheckpointOptions message type with fields for configuring container checkpointing options in ContainerD runc v1. It includes options for exit behavior, network sockets, and filesystem-related settings.

LANGUAGE: protobuf
CODE:
message CheckpointOptions {
  bool exit = 1;
  bool open_tcp = 2;
  bool external_unix_sockets = 3;
  bool terminal = 4;
  bool file_locks = 5;
  repeated string empty_namespaces = 6;
  string cgroups_mode = 7;
  string image_path = 8;
  string work_path = 9;
}

----------------------------------------

TITLE: Cloud Client Library Go Snippet
DESCRIPTION: Example code showing Go client library integration

LANGUAGE: go
CODE:
c, err := pubsub.NewClient(ctx, "project-id", option.WithGRPCDialOption(grpc.WithUnaryInterceptor(tc.GRPCClientInterceptor())))
if err != nil {
    // handle error
}

----------------------------------------

TITLE: Demonstrating Inconsistent Lock Ordering in Go
DESCRIPTION: Code snippets showing how inconsistent lock ordering between two goroutines can lead to potential deadlocks.

LANGUAGE: go
CODE:
A.Lock() // defer A.Unlock() or similar.
...
B.Lock() // defer B.Unlock() or similar.

LANGUAGE: go
CODE:
B.Lock() // defer B.Unlock() or similar.
...
A.Lock() // defer A.Unlock() or similar.

----------------------------------------

TITLE: Fixing Integer Overflow in Retry Policy in Go
DESCRIPTION: Addresses an integer overflow issue in the retry policy implementation.

LANGUAGE: go
CODE:
func calculateBackoff(attempt int, min, max time.Duration) time.Duration {
  // Use int64 to avoid overflow
  backoff := int64(min) * int64(math.Pow(2, float64(attempt)))
  if backoff > int64(max) {
    backoff = int64(max)
  }
  return time.Duration(backoff)
}

----------------------------------------

TITLE: Documenting Initial Release in Markdown Changelog
DESCRIPTION: This snippet shows the structure of a changelog entry for the initial 1.0.0 release of the moby project. It includes the version number, release date, and a brief description of the release.

LANGUAGE: Markdown
CODE:
# Changelog

## 1.0.0 (2018-03-15)

Initial release tagging

----------------------------------------

TITLE: Defining Integer Flags in Go
DESCRIPTION: Demonstrates how to define an integer flag with a default value and help message.

LANGUAGE: go
CODE:
var ip *int = flag.Int("flagname", 1234, "help message for flagname")

----------------------------------------

TITLE: Querying TOML Data with Path Expressions in Go
DESCRIPTION: Example demonstrating how to use JSON-Path style queries to extract specific elements from a TOML document.

LANGUAGE: go
CODE:
// use a query to gather elements without walking the tree
q, _ := query.Compile("$..[user,password]")
results := q.Execute(config)
for ii, item := range results.Values() {
    fmt.Printf("Query result %d: %v\n", ii, item)
}

----------------------------------------

TITLE: HTML Comment for Documentation Redirect
DESCRIPTION: HTML comment explaining the purpose of maintaining this redirect file to preserve existing links to the original GitHub documentation location.

LANGUAGE: html
CODE:
<!-- do not remove this file, as there is a lot of links to https://github.com/moby/moby/blob/master/docs/rootless.md -->

----------------------------------------

TITLE: Displaying Supported Versions in Markdown Table
DESCRIPTION: This markdown table shows which versions of the Moby project are currently supported for security updates. It uses checkmarks and X marks to indicate support status.

LANGUAGE: markdown
CODE:
| Version    | Supported          |
| ---------- | ------------------ |
| Latest 2.x | :white_check_mark: |
| All 1.x    | :x:                |
| All 0.x    | :x:                |

----------------------------------------

TITLE: Using Flock for File Locking in Go
DESCRIPTION: Example demonstrating how to create and use a file lock with error handling and the non-blocking TryLock() function

LANGUAGE: go
CODE:
import "github.com/gofrs/flock"

fileLock := flock.New("/var/lock/go-lock.lock")

locked, err := fileLock.TryLock()

if err != nil {
	// handle locking error
}

if locked {
	// do work
	fileLock.Unlock()
}

----------------------------------------

TITLE: Docker Network Commands
DESCRIPTION: Basic Docker commands to verify network functionality and list available networks.

LANGUAGE: bash
CODE:
vagrant@net-1:~$ docker network ls
NETWORK ID          NAME                TYPE
4275f8b3a821        none                null                
80eba28ed4a7        host                host                
64322973b4aa        bridge              bridge              

----------------------------------------

TITLE: Creating Custom Time Encoder in Zap
DESCRIPTION: Function added in v1.16.0 to create time encoders for custom layouts.

LANGUAGE: Go
CODE:
zapcore.TimeEncoderOfLayout("2006-01-02 15:04:05")

----------------------------------------

TITLE: Building Custom ANSI Escape Sequences in Go
DESCRIPTION: Example of using the Builder pattern to create custom ANSI escape sequences with multiple features

LANGUAGE: go
CODE:
custom := aec.EmptyBuilder.Right(2).RGB8BitF(128, 255, 64).RedB().ANSI
custom.Apply("Hello World")

----------------------------------------

TITLE: Basic Flag Import and Usage in Go
DESCRIPTION: Shows how to import pflag as a drop-in replacement for Go's native flag package.

LANGUAGE: go
CODE:
import flag "github.com/spf13/pflag"

----------------------------------------

TITLE: Creating Zap Test Logger
DESCRIPTION: Function added in v1.10.0 to create a logger that writes to a testing.TB.

LANGUAGE: Go
CODE:
logger := zaptest.NewLogger(t)

----------------------------------------

TITLE: Saving Cache in Github Actions API
DESCRIPTION: This snippet outlines the process of saving cache using the Github Actions Cache API. It includes three steps: reserving a cache key, uploading data chunks, and finalizing the cache record.

LANGUAGE: markdown
CODE:
### `POST /caches`

Reserves a cache key and returns ID (incrementing number) that can be used for uploading cache. Once a key has been reserved, there is no way to save any other data to the same key. Subsequent requests with the same key/version will receive "already exists" error. There does not seem to be a way to discard partial save on error as well that may be problematic with crashes.

#### Request JSON object:

- `key` - Key to reserve. A prefix of this is used on query.
- `version` - Namespace that needs to match version on cache query.

#### Response JSON object:

- `cacheID` - Numeric unique ID used in next requests.


### `PATCH /caches/[cacheID]`

Uploads a chunk of data to the specified cache record. `Content-Range` headers are used to specify what range of data is being uploaded.

Request body is `application/octet-stream` raw data. Successful response is empty.

### `POST /caches/[cacheID]`

Finalizes the cache record after all data has been uploaded with `PATCH` requests. After calling this method, data becomes available for loading. 

#### Request JSON object:

- `size` - Total size of the object. Needs to match with the data that was uploaded.

Successful respone is empty.

----------------------------------------

TITLE: Apache License 2.0 Boilerplate Notice Template
DESCRIPTION: Standard boilerplate text template for applying the Apache License 2.0 to software works. Includes placeholders for copyright year and owner information.

LANGUAGE: text
CODE:
   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

----------------------------------------

TITLE: Writer Type Definition in Go
DESCRIPTION: Definition of the Writer struct type which implements a buffered writer with enhanced functionality.

LANGUAGE: go
CODE:
type Writer struct {
    // contains filtered or unexported fields
}

----------------------------------------

TITLE: Iptables Filter Table Configuration for Routed-Mode Network
DESCRIPTION: Detailed iptables filter table rules for a Docker container on a routed-mode network with port mapping.

LANGUAGE: plaintext
CODE:
Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 DOCKER-USER  0    --  *      *       0.0.0.0/0            0.0.0.0/0           
2        0     0 DOCKER-FORWARD  0    --  *      *       0.0.0.0/0            0.0.0.0/0           

Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination         

Chain DOCKER (2 references)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 ACCEPT     6    --  !bridge1 bridge1  0.0.0.0/0            192.0.2.2            tcp dpt:80
2        0     0 DROP       0    --  !docker0 docker0  0.0.0.0/0            0.0.0.0/0           
3        0     0 ACCEPT     1    --  *      bridge1  0.0.0.0/0            0.0.0.0/0           
4        0     0 DROP       0    --  !bridge1 bridge1  0.0.0.0/0            0.0.0.0/0           

Chain DOCKER-BRIDGE (1 references)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 DOCKER     0    --  *      docker0  0.0.0.0/0            0.0.0.0/0           
2        0     0 DOCKER     0    --  *      bridge1  0.0.0.0/0            0.0.0.0/0           

Chain DOCKER-CT (1 references)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 ACCEPT     0    --  *      docker0  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED
2        0     0 ACCEPT     0    --  *      bridge1  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED

Chain DOCKER-FORWARD (1 references)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 DOCKER-CT  0    --  *      *       0.0.0.0/0            0.0.0.0/0           
2        0     0 DOCKER-ISOLATION-STAGE-1  0    --  *      *       0.0.0.0/0            0.0.0.0/0           
3        0     0 DOCKER-BRIDGE  0    --  *      *       0.0.0.0/0            0.0.0.0/0           
4        0     0 ACCEPT     0    --  docker0 *       0.0.0.0/0            0.0.0.0/0           
5        0     0 ACCEPT     0    --  bridge1 *       0.0.0.0/0            0.0.0.0/0           

Chain DOCKER-ISOLATION-STAGE-1 (1 references)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 ACCEPT     0    --  bridge1 *       0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED
2        0     0 RETURN     0    --  *      bridge1  0.0.0.0/0            0.0.0.0/0           
3        0     0 DOCKER-ISOLATION-STAGE-2  0    --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0           
4        0     0 DOCKER-ISOLATION-STAGE-2  0    --  bridge1 !bridge1  0.0.0.0/0            0.0.0.0/0           

Chain DOCKER-ISOLATION-STAGE-2 (2 references)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 DROP       0    --  *      bridge1  0.0.0.0/0            0.0.0.0/0           
2        0     0 DROP       0    --  *      docker0  0.0.0.0/0            0.0.0.0/0           

Chain DOCKER-USER (1 references)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 RETURN     0    --  *      *       0.0.0.0/0            0.0.0.0/0           

----------------------------------------

TITLE: Installing Uber Atomic Package
DESCRIPTION: Command to install the atomic package using go get with version 1

LANGUAGE: shell
CODE:
$ go get -u go.uber.org/atomic@v1

----------------------------------------

TITLE: Disabling Btrfs Graphdriver in Docker Build
DESCRIPTION: Sets an environment variable to exclude the Btrfs graphdriver when building Docker. This is useful when Btrfs support is not required or available on the target system.

LANGUAGE: bash
CODE:
export DOCKER_BUILDTAGS='exclude_graphdriver_btrfs'

----------------------------------------

TITLE: Managing ZFS Filesystems, Snapshots and Clones in Go
DESCRIPTION: Demonstrates core ZFS operations including creating a filesystem, taking snapshots, creating clones, and cleanup. The example shows the basic workflow for managing ZFS resources using the wrapper functions.

LANGUAGE: go
CODE:
//assuming a zpool named test
//error handling omitted


f, err := zfs.CreateFilesystem("test/snapshot-test", nil)
ok(t, err)

s, err := f.Snapshot("test", nil)
ok(t, err)

// snapshot is named "test/snapshot-test@test"

c, err := s.Clone("test/clone-test", nil)

err := c.Destroy()
err := s.Destroy()
err := f.Destroy()


----------------------------------------

TITLE: Querying Github Actions Cache API
DESCRIPTION: This snippet demonstrates how to query the Github Actions Cache API using GET request. It includes the endpoint, query parameters, and describes the expected response format.

LANGUAGE: markdown
CODE:
### `GET /cache`

#### Query parameters:

- `keys` - comma-separated list of keys to query. Keys can be queried by prefix and do not need to match exactly. The newest record matching a prefix is returned.
- `version` - unique value that provides namespacing. The same value needs to be used on saving cache. The actual value does not seem to be significant.


#### Response

On success returns JSON object with following properties:

- `cacheKey` - full cache key used on saving (not prefix that was used in request)
- `scope` - which scope cache object belongs to
- `archiveLocation` - URL to download blob. This URL is already authenticated and does not need extra authentication with the token.

----------------------------------------

TITLE: Git Log Output Example
DESCRIPTION: Example output of git log showing a properly signed-off commit

LANGUAGE: bash
CODE:
$ git log -1
commit 37ceh170e4hb283bb73d958f2036ee5k07e7fde7 (HEAD -> issue-35, origin/main, main)
Author: John Doe <john.doe@example.com>
Date:   Mon Aug 1 11:27:13 2020 -0400

    this is a commit message

    Signed-off-by: John Doe <john.doe@example.com>

----------------------------------------

TITLE: Updating Service Version in Generated Go Files
DESCRIPTION: YAML directive to replace hardcoded service version with a variable in multiple generated Go files.

LANGUAGE: yaml
CODE:
directive:
- from: 
  - zz_appendblob_client.go
  - zz_blob_client.go
  - zz_blockblob_client.go
  - zz_container_client.go
  - zz_pageblob_client.go
  - zz_service_client.go
  where: $
  transform: >-
    return $.
      replaceAll(`[]string{"2024-08-04"}`, `[]string{ServiceVersion}`);

----------------------------------------

TITLE: Reader Type Definition in Go
DESCRIPTION: Definition of the Reader struct type which implements a buffered look-ahead reader with additional utility methods.

LANGUAGE: go
CODE:
type Reader struct {
    // contains filtered or unexported fields
}

----------------------------------------

TITLE: Installing JWT-Go Package in Go
DESCRIPTION: This command adds the jwt-go package as a dependency in a Go program. It uses the 'go get' command to fetch and install the latest version of the package.

LANGUAGE: sh
CODE:
go get -u github.com/golang-jwt/jwt/v5

----------------------------------------

TITLE: Creating Fake Translation Server for Testing in Go
DESCRIPTION: This snippet shows how to create a fake translation server for testing purposes. It implements the TranslationServiceServer interface and provides a mock implementation of the TranslateText method.

LANGUAGE: go
CODE:
import (
        "context"

        translatepb "google.golang.org/genproto/googleapis/cloud/translate/v3"
)

type fakeTranslationServer struct {
        translatepb.UnimplementedTranslationServiceServer
}

func (f *fakeTranslationServer) TranslateText(ctx context.Context, req *translatepb.TranslateTextRequest) (*translatepb.TranslateTextResponse, error) {
        resp := &translatepb.TranslateTextResponse{
                Translations: []*translatepb.Translation{
                        &translatepb.Translation{
                                TranslatedText: "Hello World",
                        },
                },
        }
        return resp, nil
}

----------------------------------------

TITLE: New API Function Signatures in Go
DESCRIPTION: Function signatures for the new safer API including OpenInRoot, OpenatInRoot, Reopen, MkdirAll, and MkdirAllHandle functions. These functions provide more secure path operations with protection against various race conditions.

LANGUAGE: go
CODE:
func OpenInRoot(root, unsafePath string) (*os.File, error)
func OpenatInRoot(root *os.File, unsafePath string) (*os.File, error)
func Reopen(handle *os.File, flags int) (*os.File, error)

----------------------------------------

TITLE: Running Registry with Default Configuration
DESCRIPTION: Shows how to run the registry with a default configuration file, including the expected output.

LANGUAGE: bash
CODE:
$ $GOPATH/bin/registry serve $GOPATH/src/github.com/docker/distribution/cmd/registry/config-example.yml
INFO[0000] endpoint local-5003 disabled, skipping        app.id=34bbec38-a91a-494a-9a3f-b72f9010081f version=v2.0.0-alpha.1+unknown
INFO[0000] endpoint local-8083 disabled, skipping        app.id=34bbec38-a91a-494a-9a3f-b72f9010081f version=v2.0.0-alpha.1+unknown
INFO[0000] listening on :5000                            app.id=34bbec38-a91a-494a-9a3f-b72f9010081f version=v2.0.0-alpha.1+unknown
INFO[0000] debug server listening localhost:5001

----------------------------------------

TITLE: Implementing Digest Methods for xxHash in Go
DESCRIPTION: Defines the key methods of the Digest type, which implements the hash.Hash64 interface for incremental hashing and final sum calculation.

LANGUAGE: go
CODE:
func (*Digest) Write([]byte) (int, error)
func (*Digest) WriteString(string) (int, error)
func (*Digest) Sum64() uint64

----------------------------------------

TITLE: Hidden Flag Configuration in Go
DESCRIPTION: Demonstrates how to hide flags from help text while maintaining functionality.

LANGUAGE: go
CODE:
flags.MarkHidden("secretFlag")

----------------------------------------

TITLE: Regenerating Go Code for CT Project
DESCRIPTION: Command to regenerate mock and protobuffer files for the CT project. This is needed when changing original files that generate code.

LANGUAGE: bash
CODE:
go generate -x ./...

----------------------------------------

TITLE: Loading Existing cgroup (v1)
DESCRIPTION: Loads an existing cgroup from a static path.

LANGUAGE: go
CODE:
control, err = cgroup1.Load(cgroup1.Default, cgroups.StaticPath("/test"))

----------------------------------------

TITLE: URL Path Variables in Go Routes
DESCRIPTION: Shows how to define and use URL path variables in route patterns with optional regex patterns

LANGUAGE: go
CODE:
r := mux.NewRouter()
r.HandleFunc("/products/{key}", ProductHandler)
r.HandleFunc("/articles/{category}/", ArticlesCategoryHandler)
r.HandleFunc("/articles/{category}/{id:[0-9]+}", ArticleHandler)

----------------------------------------

TITLE: Setting OpenTelemetry Environment Variable
DESCRIPTION: Command to enable experimental OpenTelemetry tracing support by setting an environment variable.

LANGUAGE: sh
CODE:
export GOOGLE_API_GO_EXPERIMENTAL_TELEMETRY_PLATFORM_TRACING=opentelemetry

----------------------------------------

TITLE: Defining Service Message in Protocol Buffers
DESCRIPTION: Defines the Service message structure representing a service in the swarm. It includes fields for service identification, metadata, specifications, endpoint information, and update status.

LANGUAGE: Protocol Buffers
CODE:
message Service {
  string id = 1;
  Meta meta = 2 [(gogoproto.nullable) = false];
  ServiceSpec spec = 3 [(gogoproto.nullable) = false];
  Version spec_version = 10;
  ServiceSpec previous_spec = 6;
  Version previous_spec_version = 11;
  Endpoint endpoint = 4;
  UpdateStatus update_status = 5;
  JobStatus job_status = 12;
  bool pending_delete = 7;
}

----------------------------------------

TITLE: Defining xxHash API Functions in Go
DESCRIPTION: Declares the main functions provided by the xxHash package, including Sum64 for byte slices and strings, and a Digest struct for incremental hashing.

LANGUAGE: go
CODE:
func Sum64(b []byte) uint64
func Sum64String(s string) uint64
type Digest struct{ ... }
    func New() *Digest

----------------------------------------

TITLE: Writing Syslog Messages in Go
DESCRIPTION: Demonstrates various methods for writing log messages at different priority levels

LANGUAGE: go
CODE:
if err != nil {
    log.Fatal("failed to connect to syslog:", err)
}
defer w.Close()

w.Alert("this is an alert")
w.Crit("this is critical")
w.Err("this is an error")
w.Warning("this is a warning")
w.Notice("this is a notice")
w.Info("this is info")
w.Debug("this is debug")
w.Write([]byte("these are some bytes"))

----------------------------------------

TITLE: Automatically Signing Git Commits for Moby Project
DESCRIPTION: Command to automatically sign Git commits after setting up user.name and user.email configurations.

LANGUAGE: Shell
CODE:
git commit -s

----------------------------------------

TITLE: TCP Syslog Connection in Go
DESCRIPTION: Shows how to connect to a remote syslog server using TCP

LANGUAGE: go
CODE:
w, err := syslog.Dial("tcp", "192.168.0.51:514", syslog.LOG_ERR, "testtag")

----------------------------------------

TITLE: Using JWT Validator in Go
DESCRIPTION: Example of using the new Validator struct to validate claims independently of parsing/verifying a token.

LANGUAGE: go
CODE:
var v = jwt.NewValidator(jwt.WithLeeway(5*time.Second))
v.Validate(myClaims)

----------------------------------------

TITLE: Installing Cobra CLI Generator
DESCRIPTION: Command to install the cobra-cli generator tool for bootstrapping Cobra applications.

LANGUAGE: bash
CODE:
go install github.com/spf13/cobra-cli@latest

----------------------------------------

TITLE: Running Unit Tests for Specific Package
DESCRIPTION: Command to run unit tests for a single package using the TESTDIRS environment variable.

LANGUAGE: bash
CODE:
$ TESTDIRS='github.com/docker/docker/opts' make test-unit

----------------------------------------

TITLE: Importing JWT-Go Package in Go Code
DESCRIPTION: This snippet shows how to import the jwt-go package in Go code. It uses the import statement to make the package available for use in the program.

LANGUAGE: go
CODE:
import "github.com/golang-jwt/jwt/v5"

----------------------------------------

TITLE: Installing D-Bus Go Library
DESCRIPTION: Command to install the dbus library using Go modules. Requires Go 1.12 or later.

LANGUAGE: bash
CODE:
go get github.com/godbus/dbus/v5

----------------------------------------

TITLE: Reading from a FIFO in Go
DESCRIPTION: Reads data from a FIFO into a byte array. Returns the number of bytes read and any error encountered.

LANGUAGE: Go
CODE:
func (f *fifo) Read(b []byte) (int, error)

----------------------------------------

TITLE: Installing Flock Package with Go
DESCRIPTION: Command to install the flock package using Go modules

LANGUAGE: bash
CODE:
go get -u github.com/gofrs/flock

----------------------------------------

TITLE: Displaying PkgGoDev Badge for Metric Noop Package in Markdown
DESCRIPTION: This code snippet shows how to embed a PkgGoDev badge in Markdown, linking to the documentation for the Metric Noop package in the OpenTelemetry Go library.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric/noop)](https://pkg.go.dev/go.opentelemetry.io/otel/metric/noop)

----------------------------------------

TITLE: Starting Vagrant Environment
DESCRIPTION: Commands to start and verify the Vagrant environment with three nodes: consul-server, net-1, and net-2.

LANGUAGE: bash
CODE:
$ vagrant up
$ vagrant status
Current machine states:

consul-server             running (virtualbox)
net-1                     running (virtualbox)
net-2                     running (virtualbox)

----------------------------------------

TITLE: Marking Service Requests in Ingress Namespace
DESCRIPTION: Adds a rule to the PREROUTING chain of the mangle table in the ingress_sbox namespace. This rule marks service requests for further processing.

LANGUAGE: bash
CODE:
"MARK  tcp  --  anywhere anywhere  tcp dpt:30000 MARK set 0x100"

----------------------------------------

TITLE: Benchmarking File Sync Operations in Golang
DESCRIPTION: Benchmark results comparing various file synchronization methods including CopyWithTar, CPA, DiffCopy, Rsync and GNU Tar implementations. Tests are run with different file sizes (10-10000) measuring operation speed in nanoseconds.

LANGUAGE: shell
CODE:
BENCH_FILE_SIZE=10000 ./bench.test --test.bench .
BenchmarkCopyWithTar10-4                	    2000	    995242 ns/op
BenchmarkCopyWithTar50-4                	     300	   4710021 ns/op
BenchmarkCopyWithTar200-4               	     100	  16627260 ns/op
BenchmarkCopyWithTar1000-4              	      20	  60031459 ns/op
BenchmarkCPA10-4                        	    1000	   1678367 ns/op
BenchmarkCPA50-4                        	     500	   3690306 ns/op
BenchmarkCPA200-4                       	     200	   9495066 ns/op
BenchmarkCPA1000-4                      	      50	  29769289 ns/op
BenchmarkDiffCopy10-4                   	    2000	    943889 ns/op
BenchmarkDiffCopy50-4                   	     500	   3285950 ns/op
BenchmarkDiffCopy200-4                  	     200	   8563792 ns/op
BenchmarkDiffCopy1000-4                 	      50	  29511340 ns/op
BenchmarkDiffCopyProto10-4              	    2000	    944615 ns/op
BenchmarkDiffCopyProto50-4              	     500	   3334940 ns/op
BenchmarkDiffCopyProto200-4             	     200	   9420038 ns/op
BenchmarkDiffCopyProto1000-4            	      50	  30632429 ns/op
BenchmarkIncrementalDiffCopy10-4        	    2000	    691993 ns/op
BenchmarkIncrementalDiffCopy50-4        	    1000	   1304253 ns/op
BenchmarkIncrementalDiffCopy200-4       	     500	   3306519 ns/op
BenchmarkIncrementalDiffCopy1000-4      	     200	  10211343 ns/op
BenchmarkIncrementalDiffCopy5000-4      	      20	  55194427 ns/op
BenchmarkIncrementalDiffCopy10000-4     	      20	  91759289 ns/op
BenchmarkIncrementalCopyWithTar10-4     	    2000	   1020258 ns/op
BenchmarkIncrementalCopyWithTar50-4     	     300	   5348786 ns/op
BenchmarkIncrementalCopyWithTar200-4    	     100	  19495000 ns/op
BenchmarkIncrementalCopyWithTar1000-4   	      20	  70338507 ns/op
BenchmarkIncrementalRsync10-4           	      30	  45215754 ns/op
BenchmarkIncrementalRsync50-4           	      30	  45837260 ns/op
BenchmarkIncrementalRsync200-4          	      30	  48780614 ns/op
BenchmarkIncrementalRsync1000-4         	      20	  54801892 ns/op
BenchmarkIncrementalRsync5000-4         	      20	  84782542 ns/op
BenchmarkIncrementalRsync10000-4        	      10	 103355108 ns/op
BenchmarkRsync10-4                      	      30	  46776470 ns/op
BenchmarkRsync50-4                      	      30	  48601555 ns/op
BenchmarkRsync200-4                     	      20	  59642691 ns/op
BenchmarkRsync1000-4                    	      20	 101343010 ns/op
BenchmarkGnuTar10-4                     	     500	   3171448 ns/op
BenchmarkGnuTar50-4                     	     300	   5030296 ns/op
BenchmarkGnuTar200-4                    	     100	  10464313 ns/op
BenchmarkGnuTar1000-4                   	      50	  30375257 ns/op

----------------------------------------

TITLE: Configuring MySQL Database Connection in CFSSL
DESCRIPTION: JSON configuration for connecting CFSSL to a MySQL database. Specifies the MySQL driver and connection string including user credentials, host details, and parseTime parameter.

LANGUAGE: json
CODE:
{"driver":"mysql","data_source":"user:password@tcp(hostname:3306)/db?parseTime=true"}

----------------------------------------

TITLE: Static File Server Setup
DESCRIPTION: Example of serving static files using gorilla/mux with proper timeout configuration

LANGUAGE: go
CODE:
func main() {
    var dir string
    flag.StringVar(&dir, "dir", ".", "the directory to serve files from. Defaults to the current dir")
    flag.Parse()
    r := mux.NewRouter()
    r.PathPrefix("/static/").Handler(http.StripPrefix("/static/", http.FileServer(http.Dir(dir))))
    srv := &http.Server{
        Handler: r,
        Addr: "127.0.0.1:8000",
        WriteTimeout: 15 * time.Second,
        ReadTimeout: 15 * time.Second,
    }
    log.Fatal(srv.ListenAndServe())
}

----------------------------------------

TITLE: Handling Unexpected Errors with DPanic in Go
DESCRIPTION: Demonstrates the use of DPanic for logging errors that shouldn't occur in production, but panicking in development environments.

LANGUAGE: go
CODE:
if err != nil {
  panic(fmt.Sprintf("shouldn't ever get here: %v", err))
}

----------------------------------------

TITLE: Creating Docker Network and Running Container
DESCRIPTION: Commands to create a user-defined Docker network and run a container on it with a published port. This sets up the environment for the iptables rules explained in the document.

LANGUAGE: bash
CODE:
docker network create \
  -o com.docker.network.bridge.name=bridge1 \
  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1
docker run --network bridge1 -p 8080:80 --name c1 busybox

----------------------------------------

TITLE: Regenerating Protobuf Go Code for Google API Error Schema
DESCRIPTION: This snippet demonstrates the commands to regenerate the protobuf Go code for the error schema. It uses protoc compiler with the Go plugin and goimports for formatting. The commands assume a local copy of googleapis and specific environment setup.

LANGUAGE: sh
CODE:
protoc -I $GOOGLEAPIS -I. --go_out=. --go_opt=module=github.com/googleapis/gax-go/v2/apierror/internal/proto error.proto
goimports -w .

----------------------------------------

TITLE: Container Hosts File Inspection
DESCRIPTION: Starting a container and examining its /etc/hosts file to verify network configuration.

LANGUAGE: bash
CODE:
$ docker run -it --rm ubuntu:14.04 bash
root@df479e660658:/# cat /etc/hosts
172.21.0.3	df479e660658
127.0.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::	ip6-localnet
ff00::	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
172.21.0.3	distracted_bohr
172.21.0.3	distracted_bohr.multihost

----------------------------------------

TITLE: Package Documentation Badge in Markdown
DESCRIPTION: Markdown syntax for displaying a pkg.go.dev documentation badge for the OpenTelemetry semantic conventions package v1.26.0.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.26.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.26.0)

----------------------------------------

TITLE: Initializing Cloud Logging Client in Go
DESCRIPTION: Creates a new logging client for a specified project. This client is used throughout the application for logging operations.

LANGUAGE: go
CODE:
ctx := context.Background()
client, err := logging.NewClient(ctx, "my-project")
if err != nil {
   // TODO: Handle error.
}

----------------------------------------

TITLE: UDP Syslog Connection in Go
DESCRIPTION: Shows how to connect to a remote syslog server using UDP

LANGUAGE: go
CODE:
w, err := syslog.Dial("udp", "192.168.0.50:514", syslog.LOG_ERR, "testtag")

----------------------------------------

TITLE: Importing go-toml Package in Go
DESCRIPTION: Basic import statement for including the go-toml library in a Go project.

LANGUAGE: go
CODE:
import "github.com/pelletier/go-toml"

----------------------------------------

TITLE: Displaying Support Channels in Markdown Table
DESCRIPTION: A markdown table listing various support channels for the Docker Distribution project, including IRC, issue tracker, Google Groups, and mailing list.

LANGUAGE: markdown
CODE:
<table>
<tr>
	<th align="left">
	IRC
	</th>
	<td>
	#docker-distribution on FreeNode
	</td>
</tr>
<tr>
	<th align="left">
	Issue Tracker
	</th>
	<td>
	github.com/docker/distribution/issues
	</td>
</tr>
<tr>
	<th align="left">
	Google Groups
	</th>
	<td>
	https://groups.google.com/a/dockerproject.org/forum/#!forum/distribution
	</td>
</tr>
<tr>
	<th align="left">
	Mailing List
	</th>
	<td>
	docker@dockerproject.org
	</td>
</tr>
</table>

----------------------------------------

TITLE: Linking to Cilium Maintainers File in Markdown
DESCRIPTION: This Markdown snippet provides a link to the Cilium Maintainers file on GitHub, where information about Moby project maintainers can be found.

LANGUAGE: Markdown
CODE:
# Maintainers

Maintainers can be found in the [Cilium Maintainers file](https://github.com/cilium/community/blob/main/roles/Maintainers.md)

----------------------------------------

TITLE: Pushing Changes to Fork
DESCRIPTION: Git command to push local changes to a remote feature branch in your fork.

LANGUAGE: bash
CODE:
git push origin cool_new_feature

----------------------------------------

TITLE: Creating Custom Overlay Network
DESCRIPTION: Commands to create and verify a new custom overlay network named 'foobar'.

LANGUAGE: bash
CODE:
$ docker network create -d overlay foobar
8805e22ad6e29cd7abb95597c91420fdcac54f33fcdd6fbca6dd4ec9710dd6a4
$ docker network ls
NETWORK ID          NAME                TYPE
a77e16a1e394        host                host                
684a4bb4c471        bridge              bridge              
8805e22ad6e2        foobar              overlay             
b5c9f05f1f8f        multihost           overlay             
67d5a33a2e54        none                null

----------------------------------------

TITLE: Deleting a Network
DESCRIPTION: JSON request for the /NetworkDriver.DeleteNetwork endpoint, containing the network ID to be deleted.

LANGUAGE: json
CODE:
{
	"NetworkID": string
}

----------------------------------------

TITLE: Generating Containerd Config - PowerShell
DESCRIPTION: Command to generate a default Containerd configuration file and save it to the specified location.

LANGUAGE: powershell
CODE:
.\containerd.exe config default | Out-File "C:\Program Files\containerd\config.toml" -Encoding ascii

----------------------------------------

TITLE: Create Container API Response
DESCRIPTION: Example JSON response after creating a container

LANGUAGE: JSON
CODE:
{
  "Id":"e90e34656806",
  "Warnings":[]
}

----------------------------------------

TITLE: Local Syslog Connection in Go
DESCRIPTION: Demonstrates connecting to local syslog service

LANGUAGE: go
CODE:
w, err := syslog.Dial("", "", syslog.LOG_ERR, "testtag")

----------------------------------------

TITLE: VSCode Linting Configuration - JSON
DESCRIPTION: JSON configuration for enabling golangci-lint integration in Visual Studio Code.

LANGUAGE: json
CODE:
{
    "go.lintTool": "golangci-lint",
    "go.lintOnSave": "package"
}

----------------------------------------

TITLE: Markdown Changelog Format
DESCRIPTION: Structured changelog entries following conventional commit format, documenting version changes, bug fixes, and feature additions

LANGUAGE: markdown
CODE:
# Changes

## [0.5.4](https://github.com/googleapis/google-cloud-go/compare/longrunning/v0.5.3...longrunning/v0.5.4) (2023-11-01)

### Bug Fixes

* **longrunning:** Bump google.golang.org/api to v0.149.0

----------------------------------------

TITLE: Linux Build and Test Script in Bash
DESCRIPTION: The main build and test script for Linux environments. It can be run locally or inside a Docker development container. It supports various test targets and has a default timeout of 60 minutes.

LANGUAGE: bash
CODE:
# make.sh
${TIMEOUT:=60m}

----------------------------------------

TITLE: Custom Claims Implementation in Go
DESCRIPTION: Example of implementing custom claims with additional validation logic using the new ClaimsValidator interface.

LANGUAGE: go
CODE:
// MyCustomClaims includes all registered claims, plus Foo.
type MyCustomClaims struct {
	Foo string `json:"foo"`
	jwt.RegisteredClaims
}

// Validate can be used to execute additional application-specific claims
// validation.
func (m MyCustomClaims) Validate() error {
	if m.Foo != "bar" {
		return errors.New("must be foobar")
	}

	return nil
}

----------------------------------------

TITLE: Deleting an Endpoint
DESCRIPTION: JSON request for the /NetworkDriver.DeleteEndpoint endpoint, containing the network and endpoint IDs to be deleted.

LANGUAGE: json
CODE:
{
	"NetworkID": string,
	"EndpointID": string
}

----------------------------------------

TITLE: Implementing Translation Function with Concrete Client in Go
DESCRIPTION: This snippet demonstrates a function that uses the concrete TranslationClient from the Google Cloud Translate API to translate text. It shows how to create a translation request and handle the response.

LANGUAGE: go
CODE:
import (
        "context"
        "fmt"
        "log"
        "os"

        translate "cloud.google.com/go/translate/apiv3"
        "github.com/googleapis/gax-go/v2"
        translatepb "google.golang.org/genproto/googleapis/cloud/translate/v3"
)

func TranslateTextWithConcreteClient(client *translate.TranslationClient, text string, targetLang string) (string, error) {
        ctx := context.Background()
        log.Printf("Translating %q to %q", text, targetLang)
        req := &translatepb.TranslateTextRequest{
                Parent:             fmt.Sprintf("projects/%s/locations/global", os.Getenv("GOOGLE_CLOUD_PROJECT")),
                TargetLanguageCode: "en-US",
                Contents:           []string{text},
        }
        resp, err := client.TranslateText(ctx, req)
        if err != nil {
                return "", fmt.Errorf("unable to translate text: %v", err)
        }
        translations := resp.GetTranslations()
        if len(translations) != 1 {
                return "", fmt.Errorf("expected only one result, got %d", len(translations))
        }
        return translations[0].TranslatedText, nil
}

----------------------------------------

TITLE: Defining Volume Driver Interface in Go
DESCRIPTION: Example interface definition for a volume driver showing the required method signatures. All function parameters and return values must be explicitly named in the definition.

LANGUAGE: go
CODE:
type volumeDriver interface {
	Create(name string, opts opts) (err error)
	Remove(name string) (err error)
	Path(name string) (mountpoint string, err error)
	Mount(name string) (mountpoint string, err error)
	Unmount(name string) (err error)
}

----------------------------------------

TITLE: TLS Syslog Connection with Certificate Path in Go
DESCRIPTION: Demonstrates establishing a TLS-encrypted syslog connection using a certificate file

LANGUAGE: go
CODE:
w, err := syslog.DialWithTLSCertPath("tcp+tls", "192.168.0.52:514", syslog.LOG_ERR, "testtag", "/path/to/servercert.pem")

----------------------------------------

TITLE: Implementing Mock Translation Client for Testing in Go
DESCRIPTION: This snippet demonstrates how to implement a mock TranslationClient for testing purposes. It includes a simple implementation of the TranslateText method that returns a predefined response.

LANGUAGE: go
CODE:
import (
        "context"
        "testing"

        "github.com/googleapis/gax-go/v2"
        translatepb "google.golang.org/genproto/googleapis/cloud/translate/v3"
)

type mockClient struct{}

func (*mockClient) TranslateText(_ context.Context, req *translatepb.TranslateTextRequest, opts ...gax.CallOption) (*translatepb.TranslateTextResponse, error) {
        resp := &translatepb.TranslateTextResponse{
                Translations: []*translatepb.Translation{
                        &translatepb.Translation{
                                TranslatedText: "Hello World",
                        },
                },
        }
        return resp, nil
}

func TestTranslateTextWithAbstractClient(t *testing.T) {
        client := &mockClient{}
        text, err := TranslateTextWithInterfaceClient(client, "Hola Mundo", "en-US")
        if err != nil {
                t.Fatal(err)
        }
        if text != "Hello World" {
                t.Fatalf("got %q, want Hello World", text)
        }
}

----------------------------------------

TITLE: Packaging Guest Agent in Rootfs - Shell Commands
DESCRIPTION: Series of commands to package the guest agent inside a rootfs using Docker containers and make commands.

LANGUAGE: sh
CODE:
docker pull busybox
docker run --name base_image_container busybox
docker export base_image_container | gzip > base.tar.gz
BASE=./base.tar.gz
make all

----------------------------------------

TITLE: Markdown Package Badge Link
DESCRIPTION: Badge and link to the Go package documentation on pkg.go.dev for the OpenTelemetry SDK trace testing package.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/trace/tracetest)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/trace/tracetest)

----------------------------------------

TITLE: Proposing Configuration Changes in Raft using Go
DESCRIPTION: This snippet demonstrates how to propose configuration changes (adding or removing nodes) in a Raft cluster. It involves building a ConfChange struct and calling ProposeConfChange on the Raft node.

LANGUAGE: go
CODE:
	n.ProposeConfChange(ctx, cc)

----------------------------------------

TITLE: Generating Docker Engine Man Pages using Make
DESCRIPTION: This command generates the man pages for Docker Engine from markdown sources. It requires a Go toolchain and places the generated pages in man*N* subdirectories.

LANGUAGE: makefile
CODE:
make

----------------------------------------

TITLE: Leaving a Sandbox
DESCRIPTION: JSON request for the /NetworkDriver.Leave endpoint, used when removing an endpoint from a sandbox.

LANGUAGE: json
CODE:
{
	"NetworkID": string,
	"EndpointID": string
}

----------------------------------------

TITLE: Implementing HTTP Logging Middleware in Go Storage Client
DESCRIPTION: Example of adding custom HTTP request logging using a middleware pattern with the Google Cloud Storage client. Implements a logging round tripper that dumps request details.

LANGUAGE: go
CODE:
package main

import (
    "context"
    "fmt"
    "log"
    "net/http"
    "net/http/httputil"

    "cloud.google.com/go/storage"
    "google.golang.org/api/iterator"
    "google.golang.org/api/option"
    htransport "google.golang.org/api/transport/http"
)

type loggingRoundTripper struct {
    rt http.RoundTripper
}

func (d loggingRoundTripper) RoundTrip(r *http.Request) (*http.Response, error) {
    dump, err := httputil.DumpRequest(r, true)
    if err != nil {
        log.Println("error dumping request")
    }
    log.Printf("%s", dump)
    return d.rt.RoundTrip(r)
}

func main() {
    ctx := context.Background()

    trans, err := htransport.NewTransport(ctx,
        http.DefaultTransport,
        option.WithScopes(storage.ScopeFullControl),
    )
    if err != nil {
        log.Fatal(err)
    }

    hc := &http.Client{
        Transport: loggingRoundTripper{rt: trans},
    }

    client, err := storage.NewClient(ctx, option.WithHTTPClient(hc))
    if err != nil {
        log.Fatal(err)
    }
    defer client.Close()
}

----------------------------------------

TITLE: Handling DiscoverNew Notifications
DESCRIPTION: JSON request for the /NetworkDriver.DiscoverNew endpoint, used to notify the driver of new discovery data.

LANGUAGE: json
CODE:
{
	"DiscoveryType": int,
	"DiscoveryData": {
		...
	}
}

----------------------------------------

TITLE: Basic Syslog Import in Go
DESCRIPTION: Shows how to import srslog instead of the standard syslog package

LANGUAGE: go
CODE:
import(
    //"log/syslog"
    syslog "github.com/RackSec/srslog"
)

----------------------------------------

TITLE: Verifying Registry Binary Version
DESCRIPTION: Shows how to verify the version of the built registry binary.

LANGUAGE: bash
CODE:
$ ./bin/registry --version
./bin/registry github.com/docker/distribution v2.0.0-alpha.2-80-g16d8b2c.m

----------------------------------------

TITLE: Installing Registry Command with Go
DESCRIPTION: This snippet shows how to use 'go get' to install the registry command from the current latest source.

LANGUAGE: bash
CODE:
go get github.com/docker/distribution/cmd/registry

----------------------------------------

TITLE: Development Update Report in Markdown
DESCRIPTION: Detailed markdown document containing development updates, meeting notes, and progress tracking for various Moby project components and initiatives.

LANGUAGE: markdown
CODE:
# Development Report for June 12, 2017\n\n## Moby Summit\n\nThe next Moby Summit will be at Docker HQ on June 19th, register [here](https://www.eventbrite.com/e/moby-summit-tickets-34483396768)\n\n## Daily Meeting\n\n### The CLI split\n\nManpages and docs yaml files can now be generated on [docker/cli](https://github.com/docker/cli).\nMan pages, docs and completion scripts will be removed next week thanks to @tiborvass\n\n### Find a good and non-confusing home for the remaining monolith\n\nLots of discussion happened on the [forums](https://forums.mobyproject.org/t/topic-find-a-good-an-non-confusing-home-for-the-remaining-monolith)\nWe should expect to do those changes after the moby summit. We contacted GitHub to work with them so we have a smooth move.

----------------------------------------

TITLE: Referencing Docker Build Script in Markdown
DESCRIPTION: This snippet references the primary build tool for Docker, which is used for compiling the official binary, running the test suite, and pushing releases.

LANGUAGE: markdown
CODE:
[hack/make.sh](../hack/make.sh) is the primary build tool for docker. It is used for compiling the official binary,
running the test suite, and pushing releases.

----------------------------------------

TITLE: Implementing gRPC Logging Interceptor for Secret Manager
DESCRIPTION: Example of adding custom gRPC request logging using an interceptor with the Google Cloud Secret Manager client. Logs method calls, metadata, and request details.

LANGUAGE: go
CODE:
package main

import (
    "context"
    "log"

    secretmanager "cloud.google.com/go/secretmanager/apiv1"
    "google.golang.org/api/option"
    "google.golang.org/grpc"
    "google.golang.org/grpc/metadata"
    "google.golang.org/protobuf/encoding/protojson"
    "google.golang.org/protobuf/reflect/protoreflect"
)

func loggingUnaryInterceptor() grpc.UnaryClientInterceptor {
    return func(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {
        err := invoker(ctx, method, req, reply, cc, opts...)
        log.Printf("Invoked method: %v", method)
        md, ok := metadata.FromOutgoingContext(ctx)
        if ok {
            log.Println("Metadata:")
            for k, v := range md {
                log.Printf("Key: %v, Value: %v", k, v)
            }
        }
        reqb, merr := protojson.Marshal(req.(protoreflect.ProtoMessage))
        if merr == nil {
            log.Printf("Request: %s", reqb)
        }
        return err
    }
}

func main() {
    ctx := context.Background()
    client, err := secretmanager.NewClient(ctx,
        option.WithGRPCDialOption(grpc.WithUnaryInterceptor(loggingUnaryInterceptor())),
    )
    if err != nil {
        log.Fatal(err)
    }
    defer client.Close()
}

----------------------------------------

TITLE: Building and Exporting Image with BuildKit in Go
DESCRIPTION: This snippet demonstrates how to build and export an image using BuildKit's containerd exporter. It uses a Go example and the buildctl command-line tool to build an image and specify the export options.

LANGUAGE: bash
CODE:
go run ./examples/buildkit2/buildkit.go | buildctl build --exporter image --exporter-opt name=docker.io/moby/buildkit:dev

----------------------------------------

TITLE: Creating and Submitting Pull Requests
DESCRIPTION: Git workflow commands for creating a branch, making changes, and submitting a pull request.

LANGUAGE: sh
CODE:
git checkout -b <YOUR_BRANCH_NAME>
# edit files
# update changelog
make precommit
git add -p
git commit
git push <YOUR_FORK> <YOUR_BRANCH_NAME>

----------------------------------------

TITLE: Configuring Shell Environment Variables for Go SDK Tests
DESCRIPTION: This snippet shows how to set up environment variables in a shell initialization file (e.g., .zshrc) for running Go SDK tests.

LANGUAGE: sh
CODE:
#### START GO SDK Test Variables
# Developers Console project's ID (e.g. bamboo-shift-455) for the general project.
export GCLOUD_TESTS_GOLANG_PROJECT_ID=your-project

# Developers Console project's ID (e.g. bamboo-shift-455) for the Bigtable project.
export GCLOUD_TESTS_GOLANG_SECONDARY_BIGTABLE_PROJECT_ID=your-bigtable-optional-secondary-project

# The path to the JSON key file of the general project's service account.
export GCLOUD_TESTS_GOLANG_KEY=~/directory/your-project-abcd1234.json

# Comma separated list of developer's Datastore databases. If not provided, 
# default database i.e. empty string is used.
export GCLOUD_TESTS_GOLANG_DATASTORE_DATABASES=your-database-1,your-database-2

# Developers Console project's ID (e.g. doorway-cliff-677) for the Firestore project.
export GCLOUD_TESTS_GOLANG_FIRESTORE_PROJECT_ID=your-firestore-project

# Comma separated list of developer's Firestore databases. If not provided, default database is used.
export GCLOUD_TESTS_GOLANG_FIRESTORE_DATABASES=your-database-1,your-database-2

# The path to the JSON key file of the Firestore project's service account.
export GCLOUD_TESTS_GOLANG_FIRESTORE_KEY=~/directory/your-firestore-project-abcd1234.json

# The full name of the keyring for the tests, in the form "projects/P/locations/L/keyRings/R".
# The creation of this is described below.
export MY_KEYRING=my-golang-sdk-test
export MY_LOCATION=global
export GCLOUD_TESTS_GOLANG_KEYRING=projects/$GCLOUD_TESTS_GOLANG_PROJECT_ID/locations/$MY_LOCATION/keyRings/$MY_KEYRING

# API key for using the Translate API.
export GCLOUD_TESTS_API_KEY=abcdefghijk123456789

# Compute Engine zone. (https://cloud.google.com/compute/docs/regions-zones)
export GCLOUD_TESTS_GOLANG_ZONE=your-chosen-region
#### END GO SDK Test Variables

----------------------------------------

TITLE: Installing Golint for Development
DESCRIPTION: Installs the golint tool, which is required for the full development experience using the provided Makefile.

LANGUAGE: bash
CODE:
go get github.com/golang/lint/golint

----------------------------------------

TITLE: Displaying PkgGoDev Badge for OpenTelemetry SDK Trace Package in Markdown
DESCRIPTION: This code snippet shows how to embed a PkgGoDev badge in a markdown file. The badge links to the documentation for the OpenTelemetry SDK Trace package on pkg.go.dev.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/trace)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/trace)

----------------------------------------

TITLE: Building from Local Source with BuildKit in Go
DESCRIPTION: This example demonstrates how to use BuildKit to build from local source files. It uses a Go example script and the buildctl command to map a local directory to a named endpoint in the build process.

LANGUAGE: bash
CODE:
go run ./examples/buildkit3/buildkit.go --local  | buildctl build --local buildkit-src=.

----------------------------------------

TITLE: Displaying TarSum Checksum Format
DESCRIPTION: This snippet shows the format of a TarSum checksum string, including the version, hashing cipher, and expected hash.

LANGUAGE: plaintext
CODE:
"tarsum.v1+sha256:220a60ecd4a3c32c282622a625a54db9ba0ff55b5ba9c29c7064a2bc358b6a3e"
|         |       \                                                               |
|         |        \                                                              |
|_version_|_cipher__|__                                                           |
|                      \                                                          |
|_calculation_mechanics_|______________________expected_sum_______________________|

----------------------------------------

TITLE: Running Zap Tests and Linters
DESCRIPTION: Commands to run the test suite and linting checks to ensure code quality before submitting changes.

LANGUAGE: bash
CODE:
make test
make lint

----------------------------------------

TITLE: Building from Git Source with Remote Ref in Docker
DESCRIPTION: Demonstrates how to build a Docker image from a specific Git reference, including pull requests. This new feature allows specifying any remote ref in git checkout URLs.

LANGUAGE: bash
CODE:
docker build git://github.com/moby/moby#pull/32502/head

----------------------------------------

TITLE: Installing DNS Library with Go Modules
DESCRIPTION: Basic commands to get and build the DNS library using Go modules. The library uses semantic versioning for releases.

LANGUAGE: bash
CODE:
go get github.com/miekg/dns\ngo build github.com/miekg/dns

----------------------------------------

TITLE: Displaying Microsoft Security Guidelines in Markdown
DESCRIPTION: This Markdown snippet contains the full text of Microsoft's security reporting guidelines, including how to report vulnerabilities, what information to include, and Microsoft's policy on vulnerability disclosure.

LANGUAGE: markdown
CODE:
<!-- BEGIN MICROSOFT SECURITY.MD V0.0.7 BLOCK -->

## Security

Microsoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).

If you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.

## Reporting Security Issues

**Please do not report security vulnerabilities through public GitHub issues.**

Instead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).

If you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).

You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). 

Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:

  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)
  * Full paths of source file(s) related to the manifestation of the issue
  * The location of the affected source code (tag/branch/commit or direct URL)
  * Any special configuration required to reproduce the issue
  * Step-by-step instructions to reproduce the issue
  * Proof-of-concept or exploit code (if possible)
  * Impact of the issue, including how an attacker might exploit the issue

This information will help us triage your report more quickly.

If you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.

## Preferred Languages

We prefer all communications to be in English.

## Policy

Microsoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).

<!-- END MICROSOFT SECURITY.MD BLOCK -->

----------------------------------------

TITLE: Basic Radix Tree Operations in Go
DESCRIPTION: Demonstrates creation of an immutable radix tree and performing basic insert and prefix matching operations. Shows how to create a new tree, insert key-value pairs, and find longest prefix matches.

LANGUAGE: go
CODE:
// Create a tree
r := iradix.New[int]()
r, _, _ = r.Insert([]byte("foo"), 1)
r, _, _ = r.Insert([]byte("bar"), 2)
r, _, _ = r.Insert([]byte("foobar"), 2)

// Find the longest prefix match
m, _, _ := r.Root().LongestPrefix([]byte("foozip"))
if string(m) != "foo" {
    panic("should be foo")
}

----------------------------------------

TITLE: Configuring SNAT and Redirect for Swarm Service Requests in Ingress Namespace
DESCRIPTION: Adds a rule to the PREROUTING chain of the NAT table in the ingress_sbox namespace. This rule performs SNAT and redirects service requests to IPVS for load balancing.

LANGUAGE: bash
CODE:
"SNAT  all  --  anywhere 10.255.0.0/16  ipvs to:10.255.0.2"

----------------------------------------

TITLE: Running Aliasfix Migration Tool for Go-genproto to Google-Cloud-Go
DESCRIPTION: This snippet demonstrates how to run the aliasfix migration tool to automatically update import statements in a Go project. It also includes a step to tidy up the module dependencies afterward.

LANGUAGE: bash
CODE:
go run cloud.google.com/go/internal/aliasfix/cmd/aliasfix@latest .
go mod tidy

----------------------------------------

TITLE: Creating Feature Branch for Changes
DESCRIPTION: Git commands for creating a new feature branch from an up-to-date master branch when starting development work.

LANGUAGE: bash
CODE:
cd $GOPATH/src/go.uber.org/zap
git checkout master
git fetch upstream
git rebase upstream/master
git checkout -b cool_new_feature

----------------------------------------

TITLE: Configuring IPVS Load Balancing in Ingress Namespace
DESCRIPTION: Sets up IPVS load balancing policy for marked traffic in the ingress_sbox namespace, distributing requests among container instances backing the service.

LANGUAGE: bash
CODE:
"FWM  256 rr\n  -> 10.255.0.5:0                 Masq    1      0          0         \n  -> 10.255.0.7:0                 Masq    1      0          0         \n  -> 10.255.0.8:0                 Masq    1      0          0        "

----------------------------------------

TITLE: Creating Google Cloud Storage Client with Custom Token Source
DESCRIPTION: Illustrates how to create a new Google Cloud Storage client using a custom OAuth2 token source for authentication.

LANGUAGE: go
CODE:
tokenSource := ...
client, err := storage.NewClient(ctx, option.WithTokenSource(tokenSource))

----------------------------------------

TITLE: Reading Files in Prometheus Go Library
DESCRIPTION: This code snippet demonstrates the recommended way to read files from the /proc filesystem in the Prometheus project, using the util.ReadFileNoStat function.

LANGUAGE: go
CODE:
data, err := util.ReadFileNoStat("/proc/cpuinfo")
if err != nil {
    return err
}
reader := bytes.NewReader(data)
scanner := bufio.NewScanner(reader)

----------------------------------------

TITLE: Configuring Git User Information and Remote in Bash
DESCRIPTION: This snippet shows how to set up Git user information locally for the Moby fork repository and add an upstream remote to track the original Moby repository.

LANGUAGE: bash
CODE:
$ cd moby-fork
$ git config --local user.name "FirstName LastName"
$ git config --local user.email "emailname@mycompany.com"
$ git remote add upstream https://github.com/moby/moby.git

----------------------------------------

TITLE: Configuring OpenTelemetry-OpenCensus Bridge
DESCRIPTION: Example of configuring the OpenCensus bridge with OpenTelemetry and Cloud Trace, including exporter setup and resource detection.

LANGUAGE: go
CODE:
import (
    "context"
    "log"
    "os"
    texporter "github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/trace"
    octrace "go.opencensus.io/trace"
    "go.opentelemetry.io/contrib/detectors/gcp"
    "go.opentelemetry.io/otel"
    "go.opentelemetry.io/otel/bridge/opencensus"
    "go.opentelemetry.io/otel/sdk/resource"
    sdktrace "go.opentelemetry.io/otel/sdk/trace"
    semconv "go.opentelemetry.io/otel/semconv/v1.7.0"
)

func main() {
    ctx := context.Background()
    projectID := os.Getenv("GOOGLE_CLOUD_PROJECT")
    exporter, err := texporter.New(texporter.WithProjectID(projectID))
    if err != nil {
        log.Fatalf("texporter.New: %v", err)
    }
    res, err := resource.New(ctx,
        resource.WithDetectors(gcp.NewDetector()),
        resource.WithTelemetrySDK(),
        resource.WithAttributes(
            semconv.ServiceNameKey.String("my-application"),
        ),
    )
    if err != nil {
        log.Fatalf("resource.New: %v", err)
    }
    tp := sdktrace.NewTracerProvider(
        sdktrace.WithBatcher(exporter),
        sdktrace.WithResource(res),
    )
    defer tp.Shutdown(ctx)
    otel.SetTracerProvider(tp)
    tracer := otel.GetTracerProvider().Tracer("example.com/trace")
    octrace.DefaultTracer = opencensus.NewTracer(tracer)
}

----------------------------------------

TITLE: Adding Dockerfile Syntax Include to Nano Configuration
DESCRIPTION: This snippet shows how to add the include statement for Dockerfile syntax highlighting to the Nano configuration file. It specifies the path to the Dockerfile.nanorc file.

LANGUAGE: nanorc
CODE:
## Dockerfile files
include "~/.nano/syntax/Dockerfile.nanorc"

----------------------------------------

TITLE: Basic Markdown Processing with Blackfriday in Go
DESCRIPTION: Demonstrates the simplest way to process Markdown input using Blackfriday. This snippet shows how to convert Markdown to HTML with popular extensions enabled.

LANGUAGE: go
CODE:
output := blackfriday.Run(input)

----------------------------------------

TITLE: Basic Klog Usage Example
DESCRIPTION: Demonstrates basic logging statements using klog, including info and fatal level logging with formatting.

LANGUAGE: go
CODE:
glog.Info("Prepare to repel boarders")

glog.Fatalf("Initialization failed: %s", err)

----------------------------------------

TITLE: Reading Small Files in Prometheus Go Library
DESCRIPTION: This code snippet shows how to read small files from the /sys filesystem in the Prometheus project, using the util.SysReadFile function.

LANGUAGE: go
CODE:
data, err := util.SysReadFile("/sys/class/power_supply/BAT0/capacity")

----------------------------------------

TITLE: Verifying Git Installation on Linux/macOS
DESCRIPTION: Command to check the installed version of git on the system

LANGUAGE: bash
CODE:
$ git --version

----------------------------------------

TITLE: Installing UUID Package using Go Get
DESCRIPTION: This command installs the uuid package from the GitHub repository using the go get command. It fetches the package and its dependencies, making it available for use in Go projects.

LANGUAGE: sh
CODE:
go get github.com/google/uuid

----------------------------------------

TITLE: Creating and Pushing a Test Branch in Bash
DESCRIPTION: This snippet shows the process of creating a new branch, making changes, committing them with a signature, and pushing the branch to the remote repository on GitHub.

LANGUAGE: bash
CODE:
$ cd moby-fork
$ git checkout -b dry-run-test
$ git branch
$ touch TEST.md
$ git status
$ git add TEST.md
$ git commit -s -m "Making a dry run test."
$ git push --set-upstream origin dry-run-test

----------------------------------------

TITLE: Creating Docker Network and Running Container with Port Mapping
DESCRIPTION: Commands to create a user-defined Docker network and run a container with a port mapped on a loopback address. This setup is the basis for the subsequent iptables configurations.

LANGUAGE: bash
CODE:
docker network create \
  -o com.docker.network.bridge.name=bridge1 \
  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1
docker run --network bridge1 -p 127.0.0.1:8080:80 --name c1 busybox

----------------------------------------

TITLE: Container Cleanup Commands
DESCRIPTION: Commands for removing unnecessary containers and images from the host system to maintain a clean development environment.

LANGUAGE: bash
CODE:
docker system prune -a

LANGUAGE: bash
CODE:
docker rm $(docker ps -a -q)

LANGUAGE: bash
CODE:
docker rmi -f $(docker images -q -a -f dangling=true)

----------------------------------------

TITLE: Processing Markdown without Extensions in Go
DESCRIPTION: Shows how to process Markdown input using Blackfriday without any extensions, adhering to the bare Markdown specification.

LANGUAGE: go
CODE:
output := blackfriday.Run(input, blackfriday.WithNoExtensions())

----------------------------------------

TITLE: Developer Certificate of Origin for Docker Contributions
DESCRIPTION: The full text of the Developer Certificate of Origin (DCO) version 1.1, which contributors must agree to when making contributions to Docker projects.

LANGUAGE: markdown
CODE:
```
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
660 York Street, Suite 102,
San Francisco, CA 94110 USA

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.

Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
```

----------------------------------------

TITLE: Installing Docker Engine Man Pages using Make
DESCRIPTION: This command installs the generated man pages. It supports customization through make variables such as prefix, mandir, INSTALL, INSTALL_DATA, and DESTDIR.

LANGUAGE: makefile
CODE:
make install

----------------------------------------

TITLE: Cloning OpenTelemetry Go Repository
DESCRIPTION: Commands to clone the OpenTelemetry Go repository using git.

LANGUAGE: sh
CODE:
git clone https://github.com/open-telemetry/opentelemetry-go.git

----------------------------------------

TITLE: Developer's Certificate of Origin Text
DESCRIPTION: The full text of the Developer's Certificate of Origin (DCO) Version 1.1 that contributors must agree to when making contributions

LANGUAGE: text
CODE:
Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

   (a) The contribution was created in whole or in part by me and I
       have the right to submit it under the open source license
       indicated in the file; or

   (b) The contribution is based upon previous work that, to the best
       of my knowledge, is covered under an appropriate open source
       license and I have the right under that license to submit that
       work with modifications, whether created in whole or in part
       by me, under the same open source license (unless I am
       permitted to submit under a different license), as indicated
       in the file; or

   (c) The contribution was provided directly to me by some other
       person who certified (a), (b) or (c) and I have not modified
       it.

   (d) I understand and agree that this project and the contribution
       are public and that a record of the contribution (including all
       personal information I submit with it, including my sign-off) is
       maintained indefinitely and may be redistributed consistent with
       this project or the open source license(s) involved.

----------------------------------------

TITLE: Cloning Moby Fork Repository in Bash
DESCRIPTION: This snippet demonstrates how to clone a forked Moby repository to a local machine using Git. It includes steps for creating a directory structure and navigating to the cloned repository.

LANGUAGE: bash
CODE:
$ cd ~
$ mkdir repos
$ cd repos
$ git clone https://github.com/YOUR_ACCOUNT/moby.git moby-fork
$ cd moby-fork

----------------------------------------

TITLE: Configuring Event Retry Logic in Go
DESCRIPTION: Example showing how to create a retrying sink with a circuit breaker pattern. Configures retry behavior to pause for one second after 5 consecutive failures.

LANGUAGE: go
CODE:
hs := newHTTPSink(/*...*/)
retry := NewRetryingSink(hs, NewBreaker(5, time.Second))

----------------------------------------

TITLE: Defining Default Buffer Size Constants in Go
DESCRIPTION: Constants defining the default buffer sizes for Reader and Writer implementations. DefaultReaderSize and DefaultWriterSize are set to 2048 bytes.

LANGUAGE: go
CODE:
const (
    // DefaultReaderSize is the default size of the read buffer
    DefaultReaderSize = 2048
)

LANGUAGE: go
CODE:
const (
    // DefaultWriterSize is the
    // default write buffer size.
    DefaultWriterSize = 2048
)

----------------------------------------

TITLE: Disabling Multiple Graphdrivers in Docker Build
DESCRIPTION: Sets an environment variable to exclude multiple graphdrivers (Btrfs and ZFS) when building Docker. This demonstrates how to combine multiple build tags.

LANGUAGE: bash
CODE:
export DOCKER_BUILDTAGS='exclude_graphdriver_btrfs exclude_graphdriver_zfs'

----------------------------------------

TITLE: Installing Cobra Library
DESCRIPTION: Command to install the latest version of the Cobra library using Go's package manager.

LANGUAGE: bash
CODE:
go get -u github.com/spf13/cobra@latest

----------------------------------------

TITLE: Sign-off Line Format
DESCRIPTION: Example of the required sign-off line format that must be included in commit messages

LANGUAGE: text
CODE:
Signed-off-by: John Doe <john.doe@example.com>

----------------------------------------

TITLE: OpenTelemetry Package Badge Markdown
DESCRIPTION: Markdown code for displaying the pkg.go.dev documentation badge for the OpenTelemetry codes package.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/codes)](https://pkg.go.dev/go.opentelemetry.io/otel/codes)

----------------------------------------

TITLE: Installing Go Codec Library
DESCRIPTION: Command to install the codec library using go get

LANGUAGE: bash
CODE:
go get github.com/ugorji/go/codec

----------------------------------------

TITLE: Checking Windows Build Number in PowerShell
DESCRIPTION: This PowerShell command retrieves the Windows build number to ensure it meets the minimum requirement for building Moby.

LANGUAGE: powershell
CODE:
PS C:\> $(gin).WindowsBuildLabEx

----------------------------------------

TITLE: Creating Registry Data Directory
DESCRIPTION: Creates a directory for storing registry data. Alternatively, an environment variable can be set to specify a custom location.

LANGUAGE: bash
CODE:
mkdir -p /var/lib/registry

LANGUAGE: bash
CODE:
export REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/somewhere

----------------------------------------

TITLE: Creating Docker Network and Running Container with Loopback Port Mapping
DESCRIPTION: This snippet demonstrates how to create a custom Docker network named 'bridge1' with specific subnet and gateway settings, and then run a container on that network with a port mapped to a loopback address.

LANGUAGE: bash
CODE:
docker network create \
  -o com.docker.network.bridge.name=bridge1 \
  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1
docker run --network bridge1 -p 127.0.0.1:8080:80 --name c1 busybox

----------------------------------------

TITLE: Running Go Tests with Race Detection
DESCRIPTION: This command runs the Go tests for the project with race detection enabled.

LANGUAGE: bash
CODE:
go test -race ./...

----------------------------------------

TITLE: Displaying Package Documentation Badge for OpenTelemetry Semantic Conventions in Markdown
DESCRIPTION: This code snippet shows how to embed a package documentation badge for the OpenTelemetry Semantic Conventions v1.21.0 package using Markdown syntax. The badge links to the package documentation on pkg.go.dev.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.21.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.21.0)

----------------------------------------

TITLE: Creating Docker Network and Running Container with Port Mapping
DESCRIPTION: Commands to create a Docker network in routed mode and run a container with port mapping.

LANGUAGE: bash
CODE:
docker network create \
  -o com.docker.network.bridge.name=bridge1 \
  -o com.docker.network.bridge.gateway_mode_ipv4=routed \
  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1
docker run --network bridge1 -p 8080:80 --name c1 busybox

----------------------------------------

TITLE: Installing hashstructure with Go Get
DESCRIPTION: Command to install the hashstructure library using Go's package manager.

LANGUAGE: bash
CODE:
$ go get github.com/mitchellh/hashstructure/v2

----------------------------------------

TITLE: Developer Certificate of Origin for Contributing to Open Source Projects
DESCRIPTION: The full text of the Developer Certificate of Origin (DCO) version 1.1, which contributors must agree to when making contributions to the project. It outlines the terms under which contributions are made and the rights of the contributor.

LANGUAGE: markdown
CODE:
```
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
660 York Street, Suite 102,
San Francisco, CA 94110 USA

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.

Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
```

----------------------------------------

TITLE: Installing Git for Windows via PowerShell
DESCRIPTION: This PowerShell script downloads and installs Git for Windows silently, then adds it to the system PATH.

LANGUAGE: powershell
CODE:
Invoke-Webrequest "https://github.com/git-for-windows/git/releases/download/v2.7.2.windows.1/Git-2.7.2-64-bit.exe" -OutFile git.exe -UseBasicParsing
Start-Process git.exe -ArgumentList '/VERYSILENT /SUPPRESSMSGBOXES /CLOSEAPPLICATIONS /DIR=c:\git\' -Wait
setx /M PATH "$env:Path;c:\git\cmd"

----------------------------------------

TITLE: Setting Network Driver Capabilities
DESCRIPTION: JSON response for the /NetworkDriver.GetCapabilities endpoint, specifying the scope and connectivity scope of the driver.

LANGUAGE: json
CODE:
{
	"Scope":             "local",
	"ConnectivityScope": "global",
	"GwAllocChecker":    false
}

----------------------------------------

TITLE: IPTables NAT Table Configuration
DESCRIPTION: NAT table rules for handling port mapping and network address translation for container communication

LANGUAGE: iptables
CODE:
-P PREROUTING ACCEPT
-P INPUT ACCEPT
-P OUTPUT ACCEPT
-P POSTROUTING ACCEPT
-N DOCKER
-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
-A POSTROUTING -s 192.0.2.0/24 ! -o bridge1 -j MASQUERADE
-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
-A DOCKER -i bridge1 -j RETURN
-A DOCKER -i docker0 -j RETURN
-A DOCKER ! -i bridge1 -p tcp -m tcp --dport 8080 -j DNAT --to-destination 192.0.2.2:80

----------------------------------------

TITLE: Custom Transformer for Merging time.Time in Go using Mergo
DESCRIPTION: Demonstrates how to create and use a custom transformer with Mergo to merge time.Time values in Go.

LANGUAGE: go
CODE:
package main

import (
	"fmt"
	"dario.cat/mergo"
    "reflect"
    "time"
)

type timeTransformer struct {
}

func (t timeTransformer) Transformer(typ reflect.Type) func(dst, src reflect.Value) error {
	if typ == reflect.TypeOf(time.Time{}) {
		return func(dst, src reflect.Value) error {
			if dst.CanSet() {
				isZero := dst.MethodByName("IsZero")
				result := isZero.Call([]reflect.Value{})
				if result[0].Bool() {
					dst.Set(src)
				}
			}
			return nil
		}
	}
	return nil
}

type Snapshot struct {
	Time time.Time
	// ...
}

func main() {
	src := Snapshot{time.Now()}
	dest := Snapshot{}
	mergo.Merge(&dest, src, mergo.WithTransformers(timeTransformer{}))
	fmt.Println(dest)
	// Will print
	// { 2018-01-12 01:15:00 +0000 UTC m=+0.000000001 }
}

----------------------------------------

TITLE: Markdown Badge for OpenTelemetry Baggage Package
DESCRIPTION: A markdown snippet displaying a badge that links to the package documentation on pkg.go.dev.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/baggage)](https://pkg.go.dev/go.opentelemetry.io/otel/baggage)

----------------------------------------

TITLE: Benchmarking CSV Parsing Performance - Linux AMD64
DESCRIPTION: Benchmark results comparing go-csvvalue against standard library performance on Linux AMD64, showing significant improvements in memory allocation and processing speed.

LANGUAGE: text
CODE:
goos: linux
goarch: amd64
pkg: github.com/tonistiigi/go-csvvalue
cpu: AMD EPYC 7763 64-Core Processor                
BenchmarkFields/stdlib/withcache-4         	 1109917	      1103 ns/op	    4520 B/op	      14 allocs/op
BenchmarkFields/stdlib/nocache-4           	 1082838	      1125 ns/op	    4520 B/op	      14 allocs/op
BenchmarkFields/csvvalue/withcache-4       	28554976	        42.12 ns/op	       0 B/op	       0 allocs/op
BenchmarkFields/csvvalue/nocache-4         	13666134	        83.77 ns/op	      48 B/op	       1 allocs/op

----------------------------------------

TITLE: Configuring Git Remote for Pull Requests
DESCRIPTION: Git commands to add your fork as a remote and prepare for submitting pull requests.

LANGUAGE: sh
CODE:
git remote add <YOUR_FORK> git@github.com:<YOUR_GITHUB_USERNAME>/opentelemetry-go

----------------------------------------

TITLE: Checking Docker Version on Linux
DESCRIPTION: Command to verify Docker installation and version on Linux systems

LANGUAGE: bash
CODE:
docker --version
Docker version 17.10.0-ce, build f4ffd25

----------------------------------------

TITLE: Configuring Git Remote for Pull Requests
DESCRIPTION: Git commands to add your fork as a remote and prepare for submitting pull requests.

LANGUAGE: sh
CODE:
git remote add <YOUR_FORK> git@github.com:<YOUR_GITHUB_USERNAME>/opentelemetry-go

----------------------------------------

TITLE: Configuring Network Diagnostic Port in Docker Daemon
DESCRIPTION: JSON configuration to enable the network diagnostic port in Docker daemon configuration file

LANGUAGE: json
CODE:
"network-diagnostic-port": <port>

----------------------------------------

TITLE: Displaying PkgGoDev Badge for OpenTelemetry Metric API in Markdown
DESCRIPTION: This snippet shows how to embed a PkgGoDev badge in a Markdown file, linking to the documentation for the OpenTelemetry Metric API package in Go.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/metric)](https://pkg.go.dev/go.opentelemetry.io/otel/metric)

----------------------------------------

TITLE: Closing a FIFO in Go
DESCRIPTION: Closes the FIFO, causing subsequent reads/writes to error. Can be called before the FIFO is opened to prevent opening.

LANGUAGE: Go
CODE:
func (f *fifo) Close() error

----------------------------------------

TITLE: Markdown Changelog Entry
DESCRIPTION: Markdown formatted changelog entries detailing version updates, bug fixes, features and documentation changes for the Google Cloud Compute Metadata module.

LANGUAGE: markdown
CODE:
# Changes

## [0.5.2](https://github.com/googleapis/google-cloud-go/compare/compute/metadata/v0.5.1...compute/metadata/v0.5.2) (2024-09-20)

### Bug Fixes

* **compute/metadata:** Close Response Body for failed request ([#10891](https://github.com/googleapis/google-cloud-go/issues/10891)) ([e91d45e](https://github.com/googleapis/google-cloud-go/commit/e91d45e4757a9e354114509ba9800085d9e0ff1f))

----------------------------------------

TITLE: Creating and Pushing a Feature Branch in Bash
DESCRIPTION: Git commands for creating a new feature branch, committing changes with a meaningful message including the issue number, and pushing the branch to the forked repository.

LANGUAGE: bash
CODE:
$ git checkout -b <feature-branch-name>
$ git commit -m "Issue #<issue-number> - <commit-message>"
$ git push origin <feature-branch-name>

----------------------------------------

TITLE: Iptables Raw Table Configuration for Port Mapping on Loopback
DESCRIPTION: Additional iptables rules in the raw table to filter traffic for ports mapped on the loopback address. This includes dropping remote traffic destined for the mapped port on the loopback interface.

LANGUAGE: plaintext
CODE:
Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 DROP       6    --  !lo    *       0.0.0.0/0            127.0.0.1            tcp dpt:8080
2        0     0 DROP       6    --  !bridge1 *       0.0.0.0/0            192.0.2.2            tcp dpt:80

Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination         

----------------------------------------

TITLE: Passing Logger to Application Object
DESCRIPTION: Shows how to pass the logger instance to application objects and structures.

LANGUAGE: go
CODE:
    app := createTheAppObject(logger)
    app.Run()

----------------------------------------

TITLE: Notable Changes in INI Parser v1.7.3
DESCRIPTION: Bug fix removing invalid escaping of shared config values. Values are now interpreted literally except for fully-quoted strings.



----------------------------------------

TITLE: Running Registry Binary with Version Check
DESCRIPTION: Demonstrates how to run the registry binary and check its version.

LANGUAGE: bash
CODE:
$ $GOPATH/bin/registry --version
$GOPATH/bin/registry github.com/docker/distribution v2.0.0-alpha.1+unknown

----------------------------------------

TITLE: Updating Local Repository with Upstream Changes in Bash
DESCRIPTION: Git commands to pull new changes from the upstream repository and merge them into the local master branch. This ensures the local copy is up-to-date before creating new feature branches.

LANGUAGE: bash
CODE:
$ git checkout master
$ git fetch upstream
$ git merge upstream/master

----------------------------------------

TITLE: Running Plugin RPC Generator via Command Line
DESCRIPTION: Command line example showing how to run the plugin RPC generator with specific parameters for type, name, input file, and output file.

LANGUAGE: bash
CODE:
$ pluginrpc-gen --type volumeDriver --name VolumeDriver -i volumes/drivers/extpoint.go -o volumes/drivers/proxy.go

----------------------------------------

TITLE: Configuring Unexported Fields Fuzzing in Go with go-fuzz-headers
DESCRIPTION: Shows how to enable or disable the fuzzing of unexported fields in structs using go-fuzz-headers.

LANGUAGE: go
CODE:
f.AllowUnexportedFields()

LANGUAGE: go
CODE:
f.DisallowUnexportedFields()

----------------------------------------

TITLE: Basic xxHash API Functions
DESCRIPTION: Core API functions for calculating xxHash values, including direct hashing of bytes and strings, and creating new Digest instances.

LANGUAGE: go
CODE:
func Sum64(b []byte) uint64
func Sum64String(s string) uint64
type Digest struct{ ... }
    func New() *Digest

----------------------------------------

TITLE: Displaying Project Components in Markdown Table
DESCRIPTION: A markdown table listing the main components of the Docker Distribution project, including registry, libraries, specifications, and documentation, along with their descriptions.

LANGUAGE: markdown
CODE:
|**Component**       |Description                                                                                                                                                                                         |
|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **registry**       | An implementation of the [Docker Registry HTTP API V2](docs/spec/api.md) for use with docker 1.6+.                                                                                                  |
| **libraries**      | A rich set of libraries for interacting with distribution components. Please see [godoc](https://godoc.org/github.com/docker/distribution) for details. **Note**: These libraries are **unstable**. |
| **specifications** | _Distribution_ related specifications are available in [docs/spec](docs/spec)                                                                                                                        |
| **documentation**  | Docker's full documentation set is available at [docs.docker.com](https://docs.docker.com). This repository [contains the subset](docs/) related just to the registry.                                                                                                                                          |

----------------------------------------

TITLE: Digest Type Methods
DESCRIPTION: Implementation of the hash.Hash64 interface methods for the Digest type, allowing incremental hashing of data.

LANGUAGE: go
CODE:
func (*Digest) Write([]byte) (int, error)
func (*Digest) WriteString(string) (int, error)
func (*Digest) Sum64() uint64

----------------------------------------

TITLE: Cloning and Setting Up go-zfs Repository in Bash
DESCRIPTION: Commands for forking the go-zfs project, cloning the fork, and adding the upstream remote. This setup is necessary for contributing to the project.

LANGUAGE: bash
CODE:
$ git clone git@github.com:<your-username>/go-zfs.git
$ cd go-zfs
$ git remote add upstream https://github.com/mistifyio/go-zfs.git

----------------------------------------

TITLE: Reporting Security Vulnerabilities in Moby Project
DESCRIPTION: Instructions for securely reporting security vulnerabilities discovered in the Moby project. It specifies the correct email address for privately submitting security reports and emphasizes not to disclose issues publicly.

LANGUAGE: markdown
CODE:
# Security Policy

## Reporting a Vulnerability

The maintainers take security seriously. If you discover a security issue, please bring it to their attention right away!

Please DO NOT file a public issue, instead send your report privately to cncf-distribution-security@lists.cncf.io.

----------------------------------------

TITLE: Semantic Version Format Example - Markdown
DESCRIPTION: Demonstrates the semantic versioning format MAJOR.MINOR.PATCH and explains when to increment each version number based on the type of changes made.

LANGUAGE: markdown
CODE:
Given a version number MAJOR.MINOR.PATCH, increment the:

   1. MAJOR version when you make incompatible API changes,
   2. MINOR version when you add functionality in a backwards-compatible manner, and
   3. PATCH version when you make backwards-compatible bug fixes.

----------------------------------------

TITLE: Setting Cardinality Limit in OpenTelemetry Go
DESCRIPTION: Examples of setting the cardinality limit using environment variables. Shows how to set a specific limit, set infinite limit, or disable the feature.

LANGUAGE: console
CODE:
export OTEL_GO_X_CARDINALITY_LIMIT=2000

export OTEL_GO_X_CARDINALITY_LIMIT=-1

unset OTEL_GO_X_CARDINALITY_LIMIT

----------------------------------------

TITLE: Creating an Endpoint
DESCRIPTION: JSON request and response for the /NetworkDriver.CreateEndpoint endpoint, containing network and endpoint IDs, options, and interface details.

LANGUAGE: json
CODE:
{
	"NetworkID": string,
	"EndpointID": string,
	"Options": {
		...
	},
	"Interface": {
		"Address": string,
		"AddressIPv6": string,
		"MacAddress": string
	}
}

LANGUAGE: json
CODE:
{
	"Interface": {
		"Address": string,
		"AddressIPv6": string,
		"MacAddress": string
	}
}

----------------------------------------

TITLE: Git Configuration Commands for Contribution
DESCRIPTION: Commands for configuring Git user information and signing commits when contributing to the project. This is a required step for all contributions.

LANGUAGE: bash
CODE:
git config user.name "Real Name" && git config user.email mail@example.com
git commit -s -m "My commit"

----------------------------------------

TITLE: Running Tests for fsnotify in Go
DESCRIPTION: Instructions for running all tests in the fsnotify project using Go's test command. It also mentions using the -short flag to expedite the stress test execution.

LANGUAGE: markdown
CODE:
Just `go test ./...` runs all the tests; the CI runs this on all supported\nplatforms. Testing different platforms locally can be done with something like\n[goon] or [Vagrant], but this isn't super-easy to set up at the moment.\n\nUse the `-short` flag to make the "stress test" run faster.

----------------------------------------

TITLE: Git Log Command for Changelog
DESCRIPTION: Git command to view commits since the last tag for changelog documentation.

LANGUAGE: sh
CODE:
git --no-pager log --pretty=oneline "<last tag>..HEAD"

----------------------------------------

TITLE: Developer Certificate of Origin Text
DESCRIPTION: The complete Developer Certificate of Origin (DCO) version 1.1 text that contributors must agree to when submitting patches. This document outlines the terms and conditions for open source contributions.

LANGUAGE: text
CODE:
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
660 York Street, Suite 102,
San Francisco, CA 94110 USA

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.

Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.

----------------------------------------

TITLE: Retrieving Endpoint Operational Info
DESCRIPTION: JSON request and response for the /NetworkDriver.EndpointOperInfo endpoint, used to get operational information about an endpoint.

LANGUAGE: json
CODE:
{
	"NetworkID": string,
	"EndpointID": string
}

LANGUAGE: json
CODE:
{
	"Value": { ... }
}

----------------------------------------

TITLE: Installing BBolt with Go Modules
DESCRIPTION: Instructions for installing BBolt using Go modules with go get command

LANGUAGE: sh
CODE:
$ go get go.etcd.io/bbolt@latest

----------------------------------------

TITLE: Go Generate Integration Example
DESCRIPTION: Example of using go:generate directive to automate the proxy code generation process. The directive should be placed at the top of the interface definition file.

LANGUAGE: go
CODE:
//go:generate pluginrpc-gen -i $GOFILE -o proxy.go -type volumeDriver -name VolumeDriver

----------------------------------------

TITLE: Notable Changes in INI Parser v1.7.0
DESCRIPTION: Implementation of new modern, less-strict config parser replacing legacy parser. Invalid lines within sections are now ignored rather than dropping entire sections.



----------------------------------------

TITLE: Apache License 2.0 Boilerplate Notice
DESCRIPTION: Standard boilerplate notice text to be included when applying the Apache License 2.0 to a work. This template includes placeholders for copyright year and owner information.

LANGUAGE: text
CODE:
   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

----------------------------------------

TITLE: Linking Prometheus Go Client Documentation with Badge
DESCRIPTION: A markdown link that combines a badge image from pkg.go.dev with a URL to the Prometheus client documentation.

LANGUAGE: markdown
CODE:
[![Go Reference](https://pkg.go.dev/badge/github.com/prometheus/client_golang/prometheus.svg)](https://pkg.go.dev/github.com/prometheus/client_golang/prometheus)

----------------------------------------

TITLE: Disabling Experimental Resource Semantic Conventions in OpenTelemetry Go SDK
DESCRIPTION: Unsets the OTEL_GO_X_RESOURCE environment variable to disable experimental resource semantic conventions in the OpenTelemetry Go SDK.

LANGUAGE: console
CODE:
unset OTEL_GO_X_RESOURCE

----------------------------------------

TITLE: Illustrating Docker Release Cycle Timeline
DESCRIPTION: This ASCII diagram illustrates the timeline of a Docker release cycle, showing the development phase, freeze phase, and release point. It visualizes the 9-week cycle with 6 weeks of development and 3 weeks of freeze.

LANGUAGE: ascii
CODE:
                                        Codebase              Release
Start of                                is frozen             (end of the
the Cycle                               (7th week)            9th week)
+---------------------------------------+---------------------+
|                                       |                     |
|           Development phase           |    Freeze phase     |
|                                       |                     |
+---------------------------------------+---------------------+
                   6 weeks                      3 weeks
<---------------------------------------><-------------------->

----------------------------------------

TITLE: SockAddr Structure ASCII Diagram
DESCRIPTION: Visual representation showing the relationship between C sockaddr structs and go-sockaddr interfaces.

LANGUAGE: text
CODE:
+-------------------------------------------------------+
|                                                       |
|                        sockaddr                       |
|                        SockAddr                       |
|                                                       |
| +--------------+ +----------------------------------+ |
| | sockaddr_un  | |                                  | |
| | SockAddrUnix | |           sockaddr_in{,6}        | |
| +--------------+ |                IPAddr            | |
|                  |                                  | |
|                  | +-------------+ +--------------+ | |
|                  | | sockaddr_in | | sockaddr_in6 | | |
|                  | |   IPv4Addr  | |   IPv6Addr   | | |
|                  | +-------------+ +--------------+ | |
|                  |                                  | |
|                  +----------------------------------+ |
|                                                       |
+-------------------------------------------------------+

----------------------------------------

TITLE: Notable Changes in INI Parser v1.8.0
DESCRIPTION: Major version update bumping minimum Go version requirement to 1.20 per language support policy.



----------------------------------------

TITLE: Displaying iptables Commands
DESCRIPTION: This snippet shows the actual iptables commands used to implement the configuration. The commands are dynamically inserted using a template variable.

LANGUAGE: plaintext
CODE:
{{index . "SRaw4"}}

----------------------------------------

TITLE: Importing gRPC in Go
DESCRIPTION: Demonstrates how to import the gRPC package in a Go project. This import statement allows the Go compiler to automatically fetch the necessary dependencies when building, running, or testing the code.

LANGUAGE: go
CODE:
import "google.golang.org/grpc"

----------------------------------------

TITLE: List Containers API Response
DESCRIPTION: Example JSON response listing container details

LANGUAGE: JSON
CODE:
[
  {
    "Id": "8dfafdbc3a40",
    "Names":["/boring_feynman"],
    "Image": "ubuntu:latest",
    "ImageID": "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82",
    "Command": "echo 1",
    "Created": 1367854155,
    "State": "exited",
    "Status": "Exit 0",
    "Ports": [{"PrivatePort": 2222, "PublicPort": 3333, "Type": "tcp"}],
    "Labels": {
      "com.example.vendor": "Acme",
      "com.example.license": "GPL",
      "com.example.version": "1.0"
    },
    "SizeRw": 12288,
    "SizeRootFs": 0,
    "HostConfig": {
      "NetworkMode": "default"
    },
    "NetworkSettings": {
      "Networks": {
        "bridge": {
          "IPAMConfig": null,
          "Links": null,
          "Aliases": null,
          "NetworkID": "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812",
          "EndpointID": "2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f",
          "Gateway": "172.17.0.1",
          "IPAddress": "172.17.0.2",
          "IPPrefixLen": 16,
          "IPv6Gateway": "",
          "GlobalIPv6Address": "",
          "GlobalIPv6PrefixLen": 0,
          "MacAddress": "02:42:ac:11:00:02"
        }
      }
    },
    "Mounts": [
      {
        "Name": "fac362...80535",
        "Source": "/data",
        "Destination": "/data",
        "Driver": "local",
        "Mode": "ro,Z",
        "RW": false,
        "Propagation": ""
      }
    ]
  }
]

----------------------------------------

TITLE: Installing SockAddr CLI Tool
DESCRIPTION: Command to install the sockaddr CLI utility using Go's package manager.

LANGUAGE: text
CODE:
$ go get -u github.com/hashicorp/go-sockaddr/cmd/sockaddr

----------------------------------------

TITLE: Retrieving image history for specific platform in Docker Engine API v1.48
DESCRIPTION: GET /images/{name}/history now supports a platform parameter to specify a platform for showing image history.

LANGUAGE: JSON
CODE:
GET /images/{name}/history?platform={JSON encoded OCI Platform}

----------------------------------------

TITLE: Bug Fix Format
DESCRIPTION: Format used for documenting bug fixes

LANGUAGE: markdown
CODE:
* **Bug Fix**: Add clock skew correction on all service clients

----------------------------------------

TITLE: Checking Gateway Allocation
DESCRIPTION: JSON request and response for the /NetworkDriver.GwAllocCheck endpoint, used to determine if LibNetwork should skip IPv4 or IPv6 gateway allocation.

LANGUAGE: json
CODE:
{
	"Options": {
		...
	}
}

LANGUAGE: json
CODE:
{
	"SkipIPv4": false,
	"SkipIPv6": false
}

----------------------------------------

TITLE: Accessing BuildKit Images with containerd Tools
DESCRIPTION: This set of commands shows how to interact with BuildKit-generated images using containerd's ctr tool. It includes listing images, unpacking rootfs, and running a container from the built image.

LANGUAGE: bash
CODE:
ctr --namespace buildkit images ls
ctr --namespace buildkit rootfs unpack <manifest-sha>
ctr --namespace buildkit run -t docker.io/moby/buildkit:dev id ash

----------------------------------------

TITLE: Feature Change Format
DESCRIPTION: Format used for documenting new feature additions

LANGUAGE: markdown
CODE:
* **Feature**: Support list-of-string endpoint parameter.

----------------------------------------

TITLE: Creating Tags in OpenCensus Go
DESCRIPTION: Example showing how to create new tags with key-value pairs in the current context.

LANGUAGE: go
CODE:
ctx, err := tag.New(ctx,
	tag.Insert(osKey, "macOS-10.12.5"),
	tag.Upsert(userIDKey, "cde36753ed"),
)
if err != nil {
	log.Fatal(err)
}

----------------------------------------

TITLE: Cloning OpenCensus Go Repository
DESCRIPTION: Command to clone the OpenCensus Go repository to the local GOPATH. This is the first step in setting up the development environment for contributing to the project.

LANGUAGE: bash
CODE:
$ go get -d go.opencensus.io

----------------------------------------

TITLE: Closing Cloud Logging Client in Go
DESCRIPTION: Demonstrates how to properly close the logging client, flushing any buffered log entries before the program exits.

LANGUAGE: go
CODE:
err = client.Close()
if err != nil {
   // TODO: Handle error.
}

----------------------------------------

TITLE: Installing packageurl-go Library using Go Get
DESCRIPTION: Command to install the packageurl-go library using the go get command. This will fetch and install the latest version of the library.

LANGUAGE: shell
CODE:
go get -u github.com/package-url/packageurl-go

----------------------------------------

TITLE: Pushing the Release Tag to Remote Repository
DESCRIPTION: After creating the tag locally, this command pushes the new version tag to the remote Git repository.

LANGUAGE: bash
CODE:
git push $VERSION

----------------------------------------

TITLE: Importing Mode Package in Go
DESCRIPTION: Code snippet demonstrating how to import the Mode package in a Go file.

LANGUAGE: Go
CODE:
import "hg.sr.ht/~dchapes/mode"

----------------------------------------

TITLE: Markdown Badge for OpenTelemetry Go Attribute Package
DESCRIPTION: Markdown code that displays a PkgGoDev badge and links to the OpenTelemetry Go attribute package documentation.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/attribute)](https://pkg.go.dev/go.opentelemetry.io/otel/attribute)

----------------------------------------

TITLE: Generating Protobuf Files for Moby Project
DESCRIPTION: Command to regenerate .pb.go files from .proto files in the Moby project. This should be run after making changes to .proto files to ensure consistency.

LANGUAGE: bash
CODE:
$ make generate

----------------------------------------

TITLE: Tagging a New Release Version in Git
DESCRIPTION: This command is used by an OWNER to create a signed Git tag for the new release version. The changelog should be inserted during this step.

LANGUAGE: bash
CODE:
git tag -s $VERSION

----------------------------------------

TITLE: Building Linux Guest Agent - Linux Shell
DESCRIPTION: Command to build the Linux guest agent on a Linux machine using the go build command.

LANGUAGE: sh
CODE:
> go build ./cmd/gcs

----------------------------------------

TITLE: Displaying PkgGoDev Badge for OTLP Metric gRPC Exporter in Markdown
DESCRIPTION: This code snippet shows how to display a PkgGoDev badge for the OTLP Metric gRPC Exporter package using Markdown syntax. The badge links to the package documentation on pkg.go.dev.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc)

----------------------------------------

TITLE: Version History Entry Format
DESCRIPTION: Standard format used for documenting version releases with type annotations and change descriptions

LANGUAGE: markdown
CODE:
# v1.26.4 (2024-07-10.2)

* **Dependency Update**: Updated to the latest SDK module versions

----------------------------------------

TITLE: Specifying codespell Package Requirement
DESCRIPTION: Defines a specific version requirement for the codespell Python package, which is used for spell checking in code and documentation. Uses the exact version specifier == to pin to version 2.3.0.

LANGUAGE: txt
CODE:
codespell==2.3.0

----------------------------------------

TITLE: Demonstrating Platform Specifier Format in Go
DESCRIPTION: This snippet demonstrates the format of a platform specifier used in the package. It shows how users can provide operating system, architecture, or both in a simplified format.

LANGUAGE: Go
CODE:
"<os>|<arch>|<os>/<arch>[/<variant>]"

----------------------------------------

TITLE: IPTables Filter Table Configuration
DESCRIPTION: Complete IPTables filter table rules showing the chain configurations for Docker internal networks, including DOCKER-FORWARD, DOCKER-ISOLATION, and related chains.

LANGUAGE: plaintext
CODE:
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
-N DOCKER
-N DOCKER-BRIDGE
-N DOCKER-CT
-N DOCKER-FORWARD
-N DOCKER-ISOLATION-STAGE-1
-N DOCKER-ISOLATION-STAGE-2
-N DOCKER-USER
-A FORWARD -j DOCKER-USER
-A FORWARD -j DOCKER-FORWARD
-A DOCKER ! -i docker0 -o docker0 -j DROP
-A DOCKER-BRIDGE -o docker0 -j DOCKER
-A DOCKER-CT -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A DOCKER-FORWARD -j DOCKER-CT
-A DOCKER-FORWARD -j DOCKER-ISOLATION-STAGE-1
-A DOCKER-FORWARD -j DOCKER-BRIDGE
-A DOCKER-FORWARD -i docker0 -j ACCEPT
-A DOCKER-FORWARD -i bridgeICC -o bridgeICC -j ACCEPT
-A DOCKER-FORWARD -i bridgeNoICC -o bridgeNoICC -j DROP
-A DOCKER-ISOLATION-STAGE-1 ! -s 198.51.100.0/24 -o bridgeNoICC -j DROP
-A DOCKER-ISOLATION-STAGE-1 ! -d 198.51.100.0/24 -i bridgeNoICC -j DROP
-A DOCKER-ISOLATION-STAGE-1 ! -s 192.0.2.0/24 -o bridgeICC -j DROP
-A DOCKER-ISOLATION-STAGE-1 ! -d 192.0.2.0/24 -i bridgeICC -j DROP
-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2
-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP
-A DOCKER-USER -j RETURN

----------------------------------------

TITLE: Markdown Package Badge Link
DESCRIPTION: PkgGoDev documentation badge and link for the OpenTelemetry trace/noop package.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/trace/noop)](https://pkg.go.dev/go.opentelemetry.io/otel/trace/noop)

----------------------------------------

TITLE: Integrating Log Rotation with Zap and Lumberjack in Go
DESCRIPTION: Shows how to integrate the lumberjack log rotation package with Zap as a zapcore.WriteSyncer. This setup allows for log file rotation based on size, number of backups, and age.

LANGUAGE: go
CODE:
w := zapcore.AddSync(&lumberjack.Logger{
  Filename:   "/var/log/myapp/foo.log",
  MaxSize:    500, // megabytes
  MaxBackups: 3,
  MaxAge:     28, // days
})
core := zapcore.NewCore(
  zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()),
  w,
  zap.InfoLevel,
)
logger := zap.New(core)

----------------------------------------

TITLE: Certificate Generation Command in Python
DESCRIPTION: Command to generate self-signed TLS certificates using Python cryptography library

LANGUAGE: bash
CODE:
pip install cryptography
python script/gen-certs.py

----------------------------------------

TITLE: IPTables Filter Table Configuration
DESCRIPTION: Complete iptables filter table rules showing chains and policies for network isolation and port forwarding

LANGUAGE: iptables
CODE:
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
-N DOCKER
-N DOCKER-BRIDGE
-N DOCKER-CT
-N DOCKER-FORWARD
-N DOCKER-ISOLATION-STAGE-1
-N DOCKER-ISOLATION-STAGE-2
-N DOCKER-USER
-A FORWARD -j DOCKER-USER
-A FORWARD -j DOCKER-FORWARD
-A DOCKER -d 192.0.2.2/32 ! -i bridge1 -o bridge1 -p tcp -m tcp --dport 80 -j ACCEPT
-A DOCKER ! -i docker0 -o docker0 -j DROP
-A DOCKER ! -i bridge1 -o bridge1 -j DROP
-A DOCKER-BRIDGE -o docker0 -j DOCKER
-A DOCKER-BRIDGE -o bridge1 -j DOCKER
-A DOCKER-CT -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A DOCKER-CT -o bridge1 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A DOCKER-FORWARD -j DOCKER-CT
-A DOCKER-FORWARD -j DOCKER-ISOLATION-STAGE-1
-A DOCKER-FORWARD -j DOCKER-BRIDGE
-A DOCKER-FORWARD -i docker0 -j ACCEPT
-A DOCKER-FORWARD -i bridge1 -o bridge1 -j DROP
-A DOCKER-FORWARD -i bridge1 ! -o bridge1 -j ACCEPT
-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2
-A DOCKER-ISOLATION-STAGE-1 -i bridge1 ! -o bridge1 -j DOCKER-ISOLATION-STAGE-2
-A DOCKER-ISOLATION-STAGE-2 -o bridge1 -j DROP
-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP
-A DOCKER-USER -j RETURN

----------------------------------------

TITLE: Docker NAT Table Rules
DESCRIPTION: Template placeholder for displaying Docker's NAT table rules. Uses template variable LNat4.

LANGUAGE: bash
CODE:
{{index . "LNat4"}}

----------------------------------------

TITLE: Changelog Formatting in Markdown
DESCRIPTION: Standard changelog format following Keep a Changelog conventions and Semantic Versioning, documenting version history with sections for Breaking changes, Fixed issues, Added features, and Compatibility updates.

LANGUAGE: markdown
CODE:
# Changelog #
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](http://keepachangelog.com/)
and this project adheres to [Semantic Versioning](http://semver.org/).

----------------------------------------

TITLE: Docker NAT Table Commands
DESCRIPTION: Template placeholder for displaying iptables commands used to set up NAT table rules. Uses template variable SNat4.

LANGUAGE: bash
CODE:
{{index . "SNat4"}}

----------------------------------------

TITLE: Fixing CRC Response Header in PutBlob Response
DESCRIPTION: YAML directive to add the x-ms-content-crc64 header to the PutBlob response in the Swagger document.

LANGUAGE: yaml
CODE:
directive:
- from: swagger-document
  where: $["x-ms-paths"]["/{containerName}/{blob}?BlockBlob"].put.responses["201"].headers
  transform: >
      $["x-ms-content-crc64"] = {
        "x-ms-client-name": "ContentCRC64",
        "type": "string",
        "format": "byte",
        "description": "Returned for a block blob so that the client can check the integrity of message content."
      };

----------------------------------------

TITLE: Iptables NAT Table Configuration for Docker Networks
DESCRIPTION: Detailed iptables rules for the nat table, showing the configuration for Docker networks including DNAT rules for port mapping and MASQUERADE rules for network address translation.

LANGUAGE: plaintext
CODE:
Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 DOCKER     0    --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL

Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 DOCKER     0    --  *      *       0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL

Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 MASQUERADE  0    --  *      !bridge1  192.0.2.0/24         0.0.0.0/0           
2        0     0 MASQUERADE  0    --  *      !docker0  172.17.0.0/16        0.0.0.0/0           

Chain DOCKER (2 references)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 RETURN     0    --  bridge1 *       0.0.0.0/0            0.0.0.0/0           
2        0     0 RETURN     0    --  docker0 *       0.0.0.0/0            0.0.0.0/0           
3        0     0 DNAT       6    --  !bridge1 *       0.0.0.0/0            127.0.0.1            tcp dpt:8080 to:192.0.2.2:80

----------------------------------------

TITLE: Displaying iptables Filter Table Configuration
DESCRIPTION: This snippet shows the iptables configuration for the filter table, which is identical to the nat mode configuration. The actual content is dynamically inserted using a template variable.

LANGUAGE: plaintext
CODE:
{{index . "LFilter4"}}

{{index . "SFilter4"}}

----------------------------------------

TITLE: Markdown Documentation - Project Governance
DESCRIPTION: Comprehensive markdown documentation detailing the governance structure, maintainer responsibilities, decision making processes, and contribution guidelines for the Distribution project.

LANGUAGE: markdown
CODE:
# distribution/reference Project Governance

Distribution [Code of Conduct](./CODE-OF-CONDUCT.md) can be found here.

For specific guidance on practical contribution steps please
see our [CONTRIBUTING.md](./CONTRIBUTING.md) guide.

----------------------------------------

TITLE: TTRPC Protobuf Generation Example
DESCRIPTION: Example path reference to the main protobuf generator implementation for TTRPC, showing where to find the gogo vanity binary with TTRPC plugin enabled.

LANGUAGE: go
CODE:
cmd/protoc-gen-gogottrpc/main.go

----------------------------------------

TITLE: Docker NAT Table IPTables Configuration
DESCRIPTION: NAT table configuration showing DOCKER chain setup and masquerading rules for container network traffic

LANGUAGE: bash
CODE:
Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination
1        0     0 DOCKER     0    --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL

----------------------------------------

TITLE: Displaying iptables NAT Table Configuration
DESCRIPTION: This snippet displays the iptables configuration for the nat table, which is identical to the nat mode configuration. The actual content is dynamically inserted using a template variable.

LANGUAGE: plaintext
CODE:
{{index . "LNat4"}}

{{index . "SNat4"}}

----------------------------------------

TITLE: Changelog Entry Format
DESCRIPTION: Standard format for documenting version changes in the GAX-Go library, including version numbers, comparison links, features, and bug fixes.

LANGUAGE: markdown
CODE:
## [2.12.0](https://github.com/googleapis/gax-go/compare/v2.11.0...v2.12.0) (2023-06-26)

### Features

* **v2/callctx:** add new callctx package ([#291](https://github.com/googleapis/gax-go/issues/291)) ([11503ed](https://github.com/googleapis/gax-go/commit/11503ed98df4ae1bbdedf91ff64d47e63f187d68))
* **v2:** add BuildHeaders and InsertMetadataIntoOutgoingContext to header  ([#290](https://github.com/googleapis/gax-go/issues/290)) ([6a4b89f](https://github.com/googleapis/gax-go/commit/6a4b89f5551a40262e7c3caf2e1bdc7321b76ea1))

----------------------------------------

TITLE: Displaying iptables Commands for Filter Table
DESCRIPTION: Placeholder for showing the exact iptables commands used to set up the filter table for the NAT-unprotected network. The content is dynamically inserted using a template variable.

LANGUAGE: plaintext
CODE:
{{index . "SFilter4"}}

----------------------------------------

TITLE: Configuring SQLite Database Connection in CFSSL
DESCRIPTION: JSON configuration for connecting CFSSL to a SQLite database. Specifies the driver as sqlite3 and provides the database file path.

LANGUAGE: json
CODE:
{"driver":"sqlite3","data_source":"certs.db"}

----------------------------------------

TITLE: IPTables Filter Commands
DESCRIPTION: Template reference for iptables filter commands

LANGUAGE: plaintext
CODE:
{{index . "SFilter4"}}

----------------------------------------

TITLE: NAT Table Configuration
DESCRIPTION: Template reference for iptables NAT table configuration

LANGUAGE: plaintext
CODE:
{{index . "LNat4"}}

----------------------------------------

TITLE: Formatting Byte Sizes with Integer Representation in Go
DESCRIPTION: This snippet shows how to format byte sizes using integer representation. It demonstrates the use of %d format specifier to print byte values, with an option to add a unit prefix using the # flag.

LANGUAGE: go
CODE:
fmt.Printf("%d", 1234 * B)    => "1234"
fmt.Printf("%#d", 1234 * B)   => "1234B"

----------------------------------------

TITLE: Adding Docker Runtimes via Command Line
DESCRIPTION: Example of adding runc and custom runtimes to Docker daemon using command line options.

LANGUAGE: bash
CODE:
$ sudo dockerd --add-runtime runc=runc --add-runtime custom=/usr/local/bin/my-runc-replacement

----------------------------------------

TITLE: Displaying iptables Filter Table for NAT-Unprotected Network
DESCRIPTION: Placeholder for displaying the iptables filter table configuration for the NAT-unprotected network. The actual content is dynamically inserted using a template variable.

LANGUAGE: plaintext
CODE:
{{index . "LFilter4"}}

----------------------------------------

TITLE: Creating Docker Swarm Service with Published Port
DESCRIPTION: This command creates a Docker Swarm service that publishes port 8080 to port 80 of the container, running the 'top' command in a busybox image.

LANGUAGE: bash
CODE:
docker service create -p 8080:80 busybox top

----------------------------------------

TITLE: Defining Aggregations in OpenCensus Go
DESCRIPTION: Shows how to create different types of aggregations for stats views.

LANGUAGE: go
CODE:
distAgg := view.Distribution(1<<32, 2<<32, 3<<32)
countAgg := view.Count()
sumAgg := view.Sum()

----------------------------------------

TITLE: Creating Docker Network with Disabled ICC
DESCRIPTION: Docker commands to create a custom network bridge1 with disabled inter-container communication and run a container with port mapping

LANGUAGE: bash
CODE:
docker network create \
  -o com.docker.network.bridge.name=bridge1 \
  -o com.docker.network.bridge.enable_icc=false \
  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1
docker run --network bridge1 -p 8080:80 --name c1 busybox

----------------------------------------

TITLE: Initializing blockdevice FS and Reading Disk Stats in Go
DESCRIPTION: This snippet shows how to initialize both proc and sys filesystems for the blockdevice package and read disk statistics.

LANGUAGE: go
CODE:
fs, err := blockdevice.NewFS("/proc", "/sys")
stats, err := fs.ProcDiskstats()

----------------------------------------

TITLE: Causer Interface Definition
DESCRIPTION: Defines the causer interface used to implement error cause chain functionality.

LANGUAGE: go
CODE:
type causer interface {
        Cause() error
}

----------------------------------------

TITLE: Initial Docker Configuration Commands
DESCRIPTION: Commands to set up Docker daemon without userland proxy, create a custom network bridge, and run a container with port mapping.

LANGUAGE: bash
CODE:
dockerd --userland-proxy=false
docker network create \
  -o com.docker.network.bridge.name=bridge1 \
  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1
docker run --network bridge1 -p 8080:80 --name c1 busybox

----------------------------------------

TITLE: Installing OpenCensus Go Package
DESCRIPTION: Command to install the OpenCensus Go package using go get.

LANGUAGE: bash
CODE:
$ go get -u go.opencensus.io

----------------------------------------

TITLE: Converting Markdown to Manpage using Shell Redirection
DESCRIPTION: Example showing how to convert a markdown file to a manpage using shell input/output redirection

LANGUAGE: bash
CODE:
go-md2man < go-md2man.1.md > go-md2man.1

----------------------------------------

TITLE: Defining Translation Client Interface for Mocking in Go
DESCRIPTION: This snippet shows how to define an interface for the TranslationClient, which can be used for mocking in tests. It includes the TranslateText method signature.

LANGUAGE: go
CODE:
type TranslationClient interface {
        TranslateText(ctx context.Context, req *translatepb.TranslateTextRequest, opts ...gax.CallOption) (*translatepb.TranslateTextResponse, error)
}

----------------------------------------

TITLE: Generating event_messages.bin using Docker and MinGW-w64
DESCRIPTION: This snippet demonstrates how to use a Debian Docker container to compile Windows message resources. It installs the necessary tools, runs the Windows Message Compiler (windmc) on an input file, and moves the resulting binary to the host system.

LANGUAGE: console
CODE:
$ docker run --rm -it -v "$(pwd):/winresources" debian:bookworm-slim bash
root@9ad2260f6ebc:/# apt-get update -y && apt-get install -y binutils-mingw-w64-x86-64
root@9ad2260f6ebc:/# x86_64-w64-mingw32-windmc -v /winresources/event_messages.mc
root@9ad2260f6ebc:/# mv MSG00001.bin /winresources/event_messages.bin

----------------------------------------

TITLE: Installing golangci-lint for Go
DESCRIPTION: Command to install the golangci-lint tool for linting Go code. This tool is required for running codebase checks.

LANGUAGE: bash
CODE:
go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.46.1

----------------------------------------

TITLE: Running Docker Daemon
DESCRIPTION: Demonstrates the basic command to run the Docker daemon. This is typically used in init scripts to start Docker as a system service.

LANGUAGE: bash
CODE:
dockerd

----------------------------------------

TITLE: Adding System-Wide Dockerfile Syntax Include to Nano Configuration
DESCRIPTION: This snippet demonstrates how to add the include statement for system-wide Dockerfile syntax highlighting to the global Nano configuration file. It specifies the path to the Dockerfile.nanorc file in the shared directory.

LANGUAGE: nanorc
CODE:
## Dockerfile files
include "/usr/local/share/nano/Dockerfile.nanorc"

----------------------------------------

TITLE: Building Moby Docker Image on Windows
DESCRIPTION: This Docker command builds the Moby image on Windows, with an optional memory limit for Hyper-V containers.

LANGUAGE: powershell
CODE:
docker build -t nativebuildimage -f .\Dockerfile.windows .
docker build -t nativebuildimage -f Dockerfile.windows -m 2GB .  # (if using Hyper-V containers)

----------------------------------------

TITLE: Running All Moby Tests and Build in Docker Container
DESCRIPTION: These Docker commands run all tests and build processes for Moby in a container, with an option for Hyper-V containers.

LANGUAGE: powershell
CODE:
docker run nativebuildimage hack\make.ps1 -All
docker run -m 2GB nativebuildimage hack\make.ps1 -All  # (if using Hyper-V containers)

----------------------------------------

TITLE: Running Tests for Prometheus in Go
DESCRIPTION: This command runs all the tests for the Prometheus project. It's recommended to run this before committing and pushing changes.

LANGUAGE: bash
CODE:
make test         # Make sure all the tests pass before you commit and push :)

----------------------------------------

TITLE: Windows Build Script in PowerShell
DESCRIPTION: A native Windows build script using PowerShell. It provides support for local Windows development and Windows-to-Windows CI, but has limited functionality compared to the Linux counterpart.

LANGUAGE: powershell
CODE:
# make.ps1

----------------------------------------

TITLE: Building Docker Daemon in Debug Mode using Bash
DESCRIPTION: These commands build the Docker daemon with debugging symbols, install it, and run it through the make.sh script. The daemon will wait for a debugger to attach before continuing execution.

LANGUAGE: bash
CODE:
$ ./hack/make.sh binary
$ make install
$ ./hack/make.sh run

----------------------------------------

TITLE: Shell Script for Testing Gitignore Behavior
DESCRIPTION: This shell script creates a test directory structure and initializes a git repository to demonstrate the expected behavior of gitignore patterns, which go-pathspec correctly implements.

LANGUAGE: shell
CODE:
mkdir -p /tmp/test/internal/util
touch /tmp/test/internal/util/parse.go
cd /tmp/test/
git init
echo "parse.go" > .gitignore

----------------------------------------

TITLE: Displaying PkgGoDev Badge for OpenTelemetry Go SDK Instrumentation
DESCRIPTION: This code snippet displays a badge that links to the package documentation for the OpenTelemetry Go SDK Instrumentation on pkg.go.dev. It provides quick access to the official documentation for developers.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/instrumentation)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/instrumentation)

----------------------------------------

TITLE: Running Unit Tests in Development Container
DESCRIPTION: Command to run unit tests using the hack/test/unit script inside a Moby development container.

LANGUAGE: bash
CODE:
# hack/test/unit

----------------------------------------

TITLE: Listing Go Modules Using Bash Command
DESCRIPTION: Shell command to find and display all Go module definitions in the project by searching for go.mod files and extracting module declarations.

LANGUAGE: bash
CODE:
$ cat `find . -name go.mod` | grep module
module cloud.google.com/go/pubsub
module cloud.google.com/go/spanner
module cloud.google.com/go
module cloud.google.com/go/bigtable
module cloud.google.com/go/bigquery
module cloud.google.com/go/storage
module cloud.google.com/go/pubsublite
module cloud.google.com/go/firestore
module cloud.google.com/go/logging
module cloud.google.com/go/internal/gapicgen
module cloud.google.com/go/internal/godocfx
module cloud.google.com/go/internal/examples/fake
module cloud.google.com/go/internal/examples/mock
module cloud.google.com/go/datastore

----------------------------------------

TITLE: Displaying PkgGoDev Badge in Markdown
DESCRIPTION: Markdown code that displays a package documentation badge linking to the Go package documentation for OpenTelemetry metric exemplars.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/metric/exemplar)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/metric/exemplar)

----------------------------------------

TITLE: Adding User to Docker Group on Linux
DESCRIPTION: Command to add the current user to the docker group to enable non-root Docker usage

LANGUAGE: bash
CODE:
$ sudo usermod -aG docker ubuntu

----------------------------------------

TITLE: Creating Google Cloud Storage Client with JSON Key File
DESCRIPTION: Shows how to create a new Google Cloud Storage client using a JSON key file for authentication.

LANGUAGE: go
CODE:
client, err := storage.NewClient(ctx, option.WithCredentialsFile("path/to/keyfile.json"))

----------------------------------------

TITLE: Verifying a Digest in Go
DESCRIPTION: Shows how to verify if a digest matches a given byte slice, useful for checking if content has changed.

LANGUAGE: go
CODE:
if id != digest.FromBytes([]byte("my content")) {
  return errors.New("the content has changed!")
}

----------------------------------------

TITLE: Building Docker Daemon
DESCRIPTION: Commands for building and installing the Docker daemon binary in the development container.

LANGUAGE: bash
CODE:
hack/make.sh binary
make install
dockerd -D &

----------------------------------------

TITLE: Setting Up OpenTelemetry Go Development Environment
DESCRIPTION: Commands to get the OpenTelemetry Go package using Go modules and set up the development environment.

LANGUAGE: sh
CODE:
go get -d go.opentelemetry.io/otel

----------------------------------------

TITLE: Metric SDK Badge Integration
DESCRIPTION: Markdown code showing the integration of a pkg.go.dev badge for the OpenTelemetry Metric SDK package. The badge provides a link to the package documentation.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/metric)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/metric)

----------------------------------------

TITLE: Network IPAM Option Configuration in Go
DESCRIPTION: Function signature for configuring IPAM options when creating a network. Allows specification of IPAM driver, address space, IPv4/IPv6 configurations and additional options.

LANGUAGE: go
CODE:
func NetworkOptionIpam(ipamDriver string, addrSpace string, ipV4 []*IpamConf, ipV6 []*IpamConf, opts map[string]string) NetworkOption

----------------------------------------

TITLE: Developer Certificate of Origin Text
DESCRIPTION: The full text of the Developer Certificate of Origin v1.1 that contributors must agree to when signing their work. Defines the terms under which contributions can be made to the project.

LANGUAGE: text
CODE:
Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
660 York Street, Suite 102,
San Francisco, CA 94110 USA

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.

Developer's Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.

----------------------------------------

TITLE: Checking Docker Group Membership on Linux
DESCRIPTION: Command to verify if the current user is a member of the docker group

LANGUAGE: bash
CODE:
$ getent group docker
docker:x:999:ubuntu

----------------------------------------

TITLE: Network Namespace Inspection
DESCRIPTION: Commands to inspect network namespaces and interface configuration in Docker containers.

LANGUAGE: bash
CODE:
$ docker inspect -f '{{ .NetworkSettings.SandboxKey}}' 6635a3822135
/var/run/docker/netns/6635a3822135

root@net-2:/var/run/docker# ip netns exec 6635a3822135 ip addr show eth0
15: eth0: <BROADCAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:b3:91:22:c3 brd ff:ff:ff:ff:ff:ff
    inet 172.21.0.5/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:b3ff:fe91:22c3/64 scope link 
       valid_lft forever preferred_lft forever

----------------------------------------

TITLE: Declaring Go Module Dependencies for Moby Project
DESCRIPTION: This snippet declares the dependencies for the Moby project, including go-md2man and blackfriday modules. It specifies version numbers, explicit requirements, and import paths for each module.

LANGUAGE: go
CODE:
# github.com/cpuguy83/go-md2man/v2 v2.0.6
## explicit; go 1.12
github.com/cpuguy83/go-md2man/v2
github.com/cpuguy83/go-md2man/v2/md2man
# github.com/russross/blackfriday/v2 v2.1.0
## explicit
github.com/russross/blackfriday/v2

----------------------------------------

TITLE: Using go mod to Replace gRPC Import Path
DESCRIPTION: Demonstrates how to use the 'replace' feature of Go modules to create an alias for the gRPC package. This is useful when facing issues accessing google.golang.org, particularly from certain countries.

LANGUAGE: shell
CODE:
go mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest
go mod tidy
go mod vendor
go build -mod=vendor

----------------------------------------

TITLE: Docker Engine API File Structure
DESCRIPTION: Key file paths and components that make up the Docker Engine API, including the Swagger definition, types, client libraries and daemon code.

LANGUAGE: text
CODE:
api/swagger.yaml
api/types/
cli/
client/
daemon/

----------------------------------------

TITLE: Git Configuration Commands
DESCRIPTION: Git commands for configuring user name and email globally for commit sign-offs

LANGUAGE: bash
CODE:
$ git config --global user.name "John Doe"
$ git config --global user.email "john.doe@example.com"

----------------------------------------

TITLE: Parsing a Package URL from String in Go
DESCRIPTION: Demonstrates how to parse a Package URL from a string representation. It creates a PackageURL instance and handles potential errors during parsing.

LANGUAGE: go
CODE:
package main

import (
	"fmt"

	"github.com/package-url/packageurl-go"
)

func main() {
	instance, err := packageurl.FromString("test:ok/name@version")
	if err != nil {
		panic(err)
	}
	fmt.Printf("%#v", instance)
}

----------------------------------------

TITLE: List Containers API Request
DESCRIPTION: Example HTTP request to list containers

LANGUAGE: HTTP
CODE:
GET /v1.24/containers/json?all=1&before=8dfafdbc3a40&size=1 HTTP/1.1

----------------------------------------

TITLE: FSE Error Table
DESCRIPTION: Table showing possible error return values from the Compress function and their meanings

LANGUAGE: markdown
CODE:
| Error               | Description                                                                 |
|---------------------|-----------------------------------------------------------------------------|
| `<nil>`             | Everything ok, output is returned                                           |
| `ErrIncompressible` | Returned when input is judged to be too hard to compress                    |
| `ErrUseRLE`         | Returned from the compressor when the input is a single byte value repeated |
| `(error)`           | An internal error occurred.                                                 |

----------------------------------------

TITLE: Creating a Package URL from Parts in Go
DESCRIPTION: Example of how to create a new Package URL instance using individual components such as type, namespace, name, and version. The resulting URL is then printed.

LANGUAGE: go
CODE:
package main

import (
	"fmt"

	"github.com/package-url/packageurl-go"
)

func main() {
	instance := packageurl.NewPackageURL("test", "ok", "name", "version", nil, "")
	fmt.Printf("%s", instance.ToString())
}

----------------------------------------

TITLE: IPTables NAT Configuration
DESCRIPTION: NAT table configuration showing DNAT and MASQUERADE rules for container port mapping

LANGUAGE: plaintext
CODE:
-P PREROUTING ACCEPT
-P INPUT ACCEPT
-P OUTPUT ACCEPT
-P POSTROUTING ACCEPT
-N DOCKER
-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
-A POSTROUTING -s 192.0.2.0/24 ! -o bridge1 -j MASQUERADE
-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
-A DOCKER -i bridge1 -j RETURN
-A DOCKER -i docker0 -j RETURN
-A DOCKER ! -i bridge1 -p tcp -m tcp --dport 8080 -j DNAT --to-destination 192.0.2.2:80

----------------------------------------

TITLE: Defining ProcessDetails Message Type for ContainerD runc v1 in Protocol Buffers
DESCRIPTION: This snippet defines the ProcessDetails message type with a single field for the exec ID. It is used to provide process-specific details in the ContainerD runc v1 implementation.

LANGUAGE: protobuf
CODE:
message ProcessDetails {
  string exec_id = 1;
}

----------------------------------------

TITLE: Progress Bar Implementation using ANSI Escape Codes
DESCRIPTION: Complete example showing how to create a simple progress bar using various ANSI escape code features including cursor movement and colors

LANGUAGE: go
CODE:
package main

import (
	"fmt"
	"strings"
	"time"

	"github.com/morikuni/aec"
)

func main() {
	const n = 20
	builder := aec.EmptyBuilder

	up2 := aec.Up(2)
	col := aec.Column(n + 2)
	bar := aec.Color8BitF(aec.NewRGB8Bit(64, 255, 64))
	label := builder.LightRedF().Underline().With(col).Right(1).ANSI

	// for up2
	fmt.Println()
	fmt.Println()

	for i := 0; i <= n; i++ {
		fmt.Print(up2)
		fmt.Println(label.Apply(fmt.Sprint(i, "/", n)))
		fmt.Print("[")
		fmt.Print(bar.Apply(strings.Repeat("=", i)))
		fmt.Println(col.Apply("]")
		time.Sleep(100 * time.Millisecond)
	}
}

----------------------------------------

TITLE: Iptables NAT Table Configuration for Routed-Mode Network
DESCRIPTION: Detailed iptables nat table rules for a Docker container on a routed-mode network with port mapping.

LANGUAGE: plaintext
CODE:
Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 DOCKER     0    --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL

Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 DOCKER     0    --  *      *       0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL

Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 MASQUERADE  0    --  *      !docker0  172.17.0.0/16        0.0.0.0/0           

Chain DOCKER (2 references)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 RETURN     0    --  bridge1 *       0.0.0.0/0            0.0.0.0/0           
2        0     0 RETURN     0    --  docker0 *       0.0.0.0/0            0.0.0.0/0           

----------------------------------------

TITLE: Installing copystructure Go Library via go get
DESCRIPTION: This command installs the copystructure library using the standard Go package manager. It fetches the package from the GitHub repository.

LANGUAGE: shell
CODE:
$ go get github.com/mitchellh/copystructure

----------------------------------------

TITLE: Logging Pointers to Primitives in Zap
DESCRIPTION: New field constructors added in v1.13.0 to log pointers to primitives with nil support.

LANGUAGE: Go
CODE:
zap.Intp("count", &count)
zap.Stringp("name", &name)

----------------------------------------

TITLE: IPTables NAT Table Configuration
DESCRIPTION: NAT table rules for Docker internal networks showing PREROUTING, POSTROUTING, and DOCKER chain configurations

LANGUAGE: plaintext
CODE:
-P PREROUTING ACCEPT
-P INPUT ACCEPT
-P OUTPUT ACCEPT
-P POSTROUTING ACCEPT
-N DOCKER
-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
-A DOCKER -i docker0 -j RETURN

----------------------------------------

TITLE: Displaying Package Documentation Badge for OpenTelemetry Semantic Conventions v1.20.0
DESCRIPTION: This code snippet displays a badge linking to the package documentation on pkg.go.dev for the OpenTelemetry Semantic Conventions v1.20.0 package.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/semconv/v1.20.0)](https://pkg.go.dev/go.opentelemetry.io/otel/semconv/v1.20.0)

----------------------------------------

TITLE: Content Type Negotiation Function Declaration in Go
DESCRIPTION: Function signature for negotiating the most appropriate content type based on the Accept header and available alternatives.

LANGUAGE: go
CODE:
func Negotiate(header string, alternatives []string) (content_type string)

----------------------------------------

TITLE: Docker NAT Table IPTables Commands
DESCRIPTION: The iptables commands used to establish NAT table rules for Docker networking, including DOCKER chain creation and masquerading configuration

LANGUAGE: bash
CODE:
-P PREROUTING ACCEPT
-P INPUT ACCEPT
-P OUTPUT ACCEPT
-P POSTROUTING ACCEPT
-N DOCKER
-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
-A DOCKER -i docker0 -j RETURN

----------------------------------------

TITLE: Markdown Badge Implementation for PkgGoDev
DESCRIPTION: Displays a PkgGoDev badge linking to the package documentation for the OTLP metric HTTP exporter.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp)

----------------------------------------

TITLE: Creating and Pushing a Feature Branch
DESCRIPTION: Series of Git commands to create a new feature branch, make changes, commit them, and push the branch to the contributor's fork. This is the process for preparing a new contribution for review.

LANGUAGE: bash
CODE:
$ git checkout -b feature
# edit files
$ git commit
$ git push fork feature

----------------------------------------

TITLE: Docker Filter Table IPTables Configuration
DESCRIPTION: Shows the complete filter table configuration created by Docker daemon including custom chains like DOCKER, DOCKER-USER, DOCKER-FORWARD, and isolation chains. Includes rules for network isolation and container traffic management.

LANGUAGE: bash
CODE:
Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination
1        0     0 DOCKER-USER  0    --  *      *       0.0.0.0/0            0.0.0.0/0
2        0     0 DOCKER-FORWARD  0    --  *      *       0.0.0.0/0            0.0.0.0/0

----------------------------------------

TITLE: Displaying PkgGoDev Badge for OpenTelemetry Propagation Package in Markdown
DESCRIPTION: This snippet shows how to display a PkgGoDev badge in Markdown, linking to the Go documentation for the OpenTelemetry propagation package.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/propagation)](https://pkg.go.dev/go.opentelemetry.io/otel/propagation)

----------------------------------------

TITLE: Installing aec Go Package
DESCRIPTION: Command to install the aec package using go get

LANGUAGE: bash
CODE:
go get github.com/morikuni/aec

----------------------------------------

TITLE: Creating Swarm Service with Published Port in Docker
DESCRIPTION: This command creates a Docker Swarm service that publishes port 8080 to the host, mapping it to port 80 in the container. It uses the busybox image and runs the 'top' command.

LANGUAGE: bash
CODE:
docker service create -p 8080:80 busybox top

----------------------------------------

TITLE: Installing Google Cloud Long Running Operations Library for Go
DESCRIPTION: This command installs the longrunning library using the Go package manager. It fetches the latest version of the library from the cloud.google.com/go/longrunning package.

LANGUAGE: bash
CODE:
go get cloud.google.com/go/longrunning

----------------------------------------

TITLE: Installing Mode Package via go get
DESCRIPTION: Command to install the Mode package using Go's package management system.

LANGUAGE: shell
CODE:
go get hg.sr.ht/~dchapes/mode

----------------------------------------

TITLE: Disabling ZFS Graphdriver in Docker Build
DESCRIPTION: Sets an environment variable to exclude the ZFS graphdriver when building Docker. This is useful when ZFS support is not required or available on the target system.

LANGUAGE: bash
CODE:
export DOCKER_BUILDTAGS='exclude_graphdriver_zfs'

----------------------------------------

TITLE: Installing Azure Core Client Module with Go
DESCRIPTION: Command to add the latest version of azcore module to your Go project's dependencies using go modules.

LANGUAGE: bash
CODE:
go get github.com/Azure/azure-sdk-for-go/sdk/azcore

----------------------------------------

TITLE: Applying Configuration Changes in Raft using Go
DESCRIPTION: This code shows how to apply configuration changes after they have been committed in the Raft log. It involves unmarshalling the ConfChange data and calling ApplyConfChange on the Raft node.

LANGUAGE: go
CODE:
	var cc raftpb.ConfChange
	cc.Unmarshal(data)
	n.ApplyConfChange(cc)

----------------------------------------

TITLE: Markdown Badge for Go Package Documentation
DESCRIPTION: A markdown snippet that displays a badge linking to the Go package documentation for the OpenTelemetry SDK metric data package.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/metric/metricdata)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/metric/metricdata)

----------------------------------------

TITLE: Displaying PkgGoDev Badge for OpenTelemetry SDK in Markdown
DESCRIPTION: This snippet shows how to embed a PkgGoDev badge in a Markdown file. The badge links to the documentation for the OpenTelemetry SDK package on pkg.go.dev.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk)

----------------------------------------

TITLE: Iptables Filter Table Configuration for Docker Networks
DESCRIPTION: Detailed iptables rules for the filter table, showing the configuration for Docker networks including user-defined and default bridge networks. This includes chains for DOCKER, DOCKER-USER, DOCKER-ISOLATION, and others.

LANGUAGE: plaintext
CODE:
Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 DOCKER-USER  0    --  *      *       0.0.0.0/0            0.0.0.0/0           
2        0     0 DOCKER-FORWARD  0    --  *      *       0.0.0.0/0            0.0.0.0/0           

Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out     source               destination         

Chain DOCKER (2 references)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 ACCEPT     6    --  !bridge1 bridge1  0.0.0.0/0            192.0.2.2            tcp dpt:80
2        0     0 DROP       0    --  !docker0 docker0  0.0.0.0/0            0.0.0.0/0           
3        0     0 DROP       0    --  !bridge1 bridge1  0.0.0.0/0            0.0.0.0/0           

Chain DOCKER-BRIDGE (1 references)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 DOCKER     0    --  *      docker0  0.0.0.0/0            0.0.0.0/0           
2        0     0 DOCKER     0    --  *      bridge1  0.0.0.0/0            0.0.0.0/0           

Chain DOCKER-CT (1 references)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 ACCEPT     0    --  *      docker0  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED
2        0     0 ACCEPT     0    --  *      bridge1  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED

Chain DOCKER-FORWARD (1 references)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 DOCKER-CT  0    --  *      *       0.0.0.0/0            0.0.0.0/0           
2        0     0 DOCKER-ISOLATION-STAGE-1  0    --  *      *       0.0.0.0/0            0.0.0.0/0           
3        0     0 DOCKER-BRIDGE  0    --  *      *       0.0.0.0/0            0.0.0.0/0           
4        0     0 ACCEPT     0    --  docker0 *       0.0.0.0/0            0.0.0.0/0           
5        0     0 ACCEPT     0    --  bridge1 *       0.0.0.0/0            0.0.0.0/0           

Chain DOCKER-ISOLATION-STAGE-1 (1 references)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 DOCKER-ISOLATION-STAGE-2  0    --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0           
2        0     0 DOCKER-ISOLATION-STAGE-2  0    --  bridge1 !bridge1  0.0.0.0/0            0.0.0.0/0           

Chain DOCKER-ISOLATION-STAGE-2 (2 references)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 DROP       0    --  *      bridge1  0.0.0.0/0            0.0.0.0/0           
2        0     0 DROP       0    --  *      docker0  0.0.0.0/0            0.0.0.0/0           

Chain DOCKER-USER (1 references)
num   pkts bytes target     prot opt in     out     source               destination         
1        0     0 RETURN     0    --  *      *       0.0.0.0/0            0.0.0.0/0           

----------------------------------------

TITLE: Displaying PkgGoDev Badge for OTLP Trace HTTP Exporter in Markdown
DESCRIPTION: This snippet shows how to embed a PkgGoDev badge in Markdown, linking to the package documentation for the OTLP Trace HTTP Exporter in the OpenTelemetry Go library.

LANGUAGE: markdown
CODE:
[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp)

----------------------------------------

TITLE: Creating NAT-Unprotected Network and Running Container in Docker
DESCRIPTION: Commands to create a Docker network with NAT-unprotected mode and run a container with port mapping. The network is created with a custom subnet and gateway, and the container publishes port 8080 to internal port 80.

LANGUAGE: bash
CODE:
docker network create \
  -o com.docker.network.bridge.name=bridge1 \
  -o com.docker.network.bridge.gateway_mode_ipv4=nat-unprotected \
  --subnet 192.0.2.0/24 --gateway 192.0.2.1 bridge1
docker run --network bridge1 -p 8080:80 --name c1 busybox

----------------------------------------

TITLE: Iptables NAT Table Configuration for Docker Swarm
DESCRIPTION: This snippet shows the iptables NAT table configuration for a Docker Swarm setup. It includes rules for DNAT (Destination NAT) to route incoming traffic on port 8080 to the Swarm service, as well as MASQUERADE rules for outgoing traffic from Docker networks.

LANGUAGE: bash
CODE:
-P PREROUTING ACCEPT
-P INPUT ACCEPT
-P OUTPUT ACCEPT
-P POSTROUTING ACCEPT
-N DOCKER
-N DOCKER-INGRESS
-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER-INGRESS
-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
-A OUTPUT -m addrtype --dst-type LOCAL -j DOCKER-INGRESS
-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
-A POSTROUTING -o docker_gwbridge -m addrtype --src-type LOCAL -j MASQUERADE
-A POSTROUTING -s 172.18.0.0/16 ! -o docker_gwbridge -j MASQUERADE
-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
-A DOCKER -i docker_gwbridge -j RETURN
-A DOCKER -i docker0 -j RETURN
-A DOCKER-INGRESS -p tcp -m tcp --dport 8080 -j DNAT --to-destination 172.18.0.2:8080
-A DOCKER-INGRESS -j RETURN

----------------------------------------

TITLE: Enabling Experimental Resource Semantic Conventions in OpenTelemetry Go SDK
DESCRIPTION: Sets the OTEL_GO_X_RESOURCE environment variable to 'true' to enable experimental resource semantic conventions in the OpenTelemetry Go SDK.

LANGUAGE: console
CODE:
export OTEL_GO_X_RESOURCE=true

----------------------------------------

TITLE: Handling DiscoverDelete Notifications
DESCRIPTION: JSON request for the /NetworkDriver.DiscoverDelete endpoint, used to notify the driver of deleted discovery data.

LANGUAGE: json
CODE:
{
	"DiscoveryType": int,
	"DiscoveryData": {
		...
	}
}

----------------------------------------

TITLE: Generating Test Coverage Report
DESCRIPTION: These commands generate a test coverage report for the project using Go's coverage tools.

LANGUAGE: bash
CODE:
go test -covermode=atomic -coverprofile=coverage.out
go tool cover -func=coverage.out

----------------------------------------

TITLE: Apache License 2.0 Boilerplate Notice Template
DESCRIPTION: Standard boilerplate notice text to be included when applying the Apache License 2.0 to a work. The template includes placeholders for copyright year and owner information.

LANGUAGE: text
CODE:
Copyright [yyyy] [name of copyright owner]

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

----------------------------------------

TITLE: Docker Filter Table Rules
DESCRIPTION: Template placeholder for displaying Docker's filter table rules. Uses template variable LFilter4.

LANGUAGE: bash
CODE:
{{index . "LFilter4"}}

----------------------------------------

TITLE: Running Benchmarks
DESCRIPTION: This command runs the Go benchmarks for the project, executing each benchmark 10 times.

LANGUAGE: bash
CODE:
go test ./... -bench=. -count=10

----------------------------------------

TITLE: IPTables NAT Commands
DESCRIPTION: Template reference for iptables NAT commands

LANGUAGE: plaintext
CODE:
{{index . "SNat4"}}

----------------------------------------

TITLE: Markdown Documentation Redirect
DESCRIPTION: Simple markdown notice indicating the specification has moved to a new repository location at github.com/moby/docker-image-spec

LANGUAGE: markdown
CODE:
# Docker Image Specification v1.3.0

This specification moved to a separate repository:
https://github.com/moby/docker-image-spec

----------------------------------------

TITLE: Raft Progress State Machine Diagram
DESCRIPTION: ASCII diagram showing the state transitions between probe, replicate, and snapshot states in the Raft progress tracking system. Includes transition conditions and configurations for each state.

LANGUAGE: ascii
CODE:
                            +--------------------------------------------------------+          
                            |                  send snapshot                         |          
                            |                                                        |          
                  +---------+----------+                                  +----------v---------+
              +--->       probe        |                                  |      snapshot      |
              |   |  max inflight = 1  <----------------------------------+  max inflight = 0  |
              |   +---------+----------+                                  +--------------------+
              |             |            1. snapshot success                                    
              |             |               (next=snapshot.index + 1)                           
              |             |            2. snapshot failure                                    
              |             |               (no change)                                         
              |             |            3. receives msgAppResp(rej=false&&index>lastsnap.index)
              |             |               (match=m.index,next=match+1)                        
receives msgAppResp(rej=true)                                                                   
(next=match+1)|             |                                                                   
              |             |                                                                   
              |             |                                                                   
              |             |   receives msgAppResp(rej=false&&index>match)                     
              |             |   (match=m.index,next=match+1)                                    
              |             |                                                                   
              |             |                                                                   
              |             |                                                                   
              |   +---------v----------+                                                        
              |   |     replicate      |                                                        
              +---+  max inflight = n  |                                                        
                  +--------------------+                                                        

----------------------------------------

TITLE: Filter Table Configuration
DESCRIPTION: Template reference for iptables filter table configuration

LANGUAGE: plaintext
CODE:
{{index . "LFilter4"}}

----------------------------------------

TITLE: Generating Authors List in Bash
DESCRIPTION: This script generates the AUTHORS file, which contains names and emails of all individual contributors to the project.

LANGUAGE: bash
CODE:
# Generate Authors (generate-authors.sh)

----------------------------------------

TITLE: Setting up Zap Development Environment
DESCRIPTION: Instructions for cloning and setting up the Zap repository for development. Includes creating proper Go workspace structure and configuring git remotes.

LANGUAGE: bash
CODE:
mkdir -p $GOPATH/src/go.uber.org
cd $GOPATH/src/go.uber.org
git clone git@github.com:your_github_username/zap.git
cd zap
git remote add upstream https://github.com/uber-go/zap.git
git fetch upstream

----------------------------------------

TITLE: IPTables Filter Table Configuration
DESCRIPTION: Complete iptables filter table configuration showing chain definitions and rules for Docker network isolation and forwarding.

LANGUAGE: text
CODE:
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
-N DOCKER
-N DOCKER-BRIDGE
-N DOCKER-CT
-N DOCKER-FORWARD
-N DOCKER-ISOLATION-STAGE-1
-N DOCKER-ISOLATION-STAGE-2
-N DOCKER-USER
-A FORWARD -j DOCKER-USER
-A FORWARD -j DOCKER-FORWARD
-A DOCKER -d 192.0.2.2/32 ! -i bridge1 -o bridge1 -p tcp -m tcp --dport 80 -j ACCEPT
-A DOCKER ! -i docker0 -o docker0 -j DROP
-A DOCKER ! -i bridge1 -o bridge1 -j DROP
-A DOCKER-BRIDGE -o docker0 -j DOCKER
-A DOCKER-BRIDGE -o bridge1 -j DOCKER
-A DOCKER-CT -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A DOCKER-CT -o bridge1 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A DOCKER-FORWARD -j DOCKER-CT
-A DOCKER-FORWARD -j DOCKER-ISOLATION-STAGE-1
-A DOCKER-FORWARD -j DOCKER-BRIDGE
-A DOCKER-FORWARD -i docker0 -j ACCEPT
-A DOCKER-FORWARD -i bridge1 -j ACCEPT
-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2
-A DOCKER-ISOLATION-STAGE-1 -i bridge1 ! -o bridge1 -j DOCKER-ISOLATION-STAGE-2
-A DOCKER-ISOLATION-STAGE-2 -o bridge1 -j DROP
-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP
-A DOCKER-USER -j RETURN

----------------------------------------

TITLE: Starting a Single-Node Raft Cluster in Go
DESCRIPTION: This code shows how to initialize a single-node Raft cluster. It sets up the configuration and starts the node with itself as the only peer, allowing it to become the leader of the single-node cluster.

LANGUAGE: go
CODE:
  // Create storage and config as shown above.
  // Set peer list to itself, so this node can become the leader of this single-node cluster.
  peers := []raft.Peer{{ID: 0x01}}
  n := raft.StartNode(c, peers)

----------------------------------------

TITLE: Commit Message Structure for Moby Project
DESCRIPTION: This snippet outlines the formal structure of commit messages for the Moby project. It specifies the format for the subject line, body, and footer of the commit message.

LANGUAGE: markdown
CODE:
```
<subsystem>: <what changed>
<BLANK LINE>
<why this change was made>
<BLANK LINE>
<footer>
```

----------------------------------------

TITLE: Docker Filter Table IPTables Commands
DESCRIPTION: The actual iptables commands used to create the filter table configuration, including chain creation, policy setting, and rule establishment for Docker networking

LANGUAGE: bash
CODE:
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
-N DOCKER
-N DOCKER-BRIDGE
-N DOCKER-CT
-N DOCKER-FORWARD
-N DOCKER-ISOLATION-STAGE-1
-N DOCKER-ISOLATION-STAGE-2
-N DOCKER-USER
-A FORWARD -j DOCKER-USER
-A FORWARD -j DOCKER-FORWARD

----------------------------------------

TITLE: Tagging and Pushing a New Release Version in Git
DESCRIPTION: Commands for tagging a new release version with a signed tag and pushing it to the repository. The $VERSION variable should be replaced with the actual version number.

LANGUAGE: bash
CODE:
git tag -s $VERSION

LANGUAGE: bash
CODE:
git push $VERSION

----------------------------------------

TITLE: Adding Dependencies in Go Modules for Prometheus
DESCRIPTION: These commands demonstrate how to add or update dependencies using Go modules in the Prometheus project. It includes picking the latest tagged release or a specific version.

LANGUAGE: bash
CODE:
# Pick the latest tagged release.
go get example.com/some/module/pkg

# Pick a specific version.
go get example.com/some/module/pkg@vX.Y.Z

----------------------------------------

TITLE: Running Diagnostic Container
DESCRIPTION: Command to run the network diagnostic container in privileged mode

LANGUAGE: bash
CODE:
$ docker container run --name net-diagnostic -d --privileged --network host dockereng/network-diagnostic:17.12-dind

----------------------------------------

TITLE: Setting Up Google Cloud Project and Environment Variables
DESCRIPTION: This snippet demonstrates how to set up the Google Cloud project, create resources, and configure environment variables necessary for running integration tests.

LANGUAGE: bash
CODE:
# Sets the default project in your env.
$ gcloud config set project $GCLOUD_TESTS_GOLANG_PROJECT_ID

# Authenticates the gcloud tool with your account.
$ gcloud auth login

# Create the indexes for all the databases you want to use in the datastore integration tests. 
# Use empty string as databaseID or skip database flag for default database.
$ gcloud alpha datastore indexes create --database=your-databaseID-1 --project=$GCLOUD_TESTS_GOLANG_PROJECT_ID testdata/index.yaml

# Creates a Google Cloud storage bucket with the same name as your test project,
# and with the Cloud Logging service account as owner, for the sink
# integration tests in logging.
$ gsutil mb gs://$GCLOUD_TESTS_GOLANG_PROJECT_ID
$ gsutil acl ch -g cloud-logs@google.com:O gs://$GCLOUD_TESTS_GOLANG_PROJECT_ID

# Creates a PubSub topic for integration tests of storage notifications.
$ gcloud beta pubsub topics create go-storage-notification-test
# Next, go to the Pub/Sub dashboard in GCP console. Authorize the user
# "service-<numeric project id>@gs-project-accounts.iam.gserviceaccount.com"
# as a publisher to that topic.

# Creates a Spanner instance for the spanner integration tests.
$ gcloud beta spanner instances create go-integration-test --config regional-us-central1 --nodes 10 --description 'Instance for go client test'
# NOTE: Spanner instances are priced by the node-hour, so you may want to
# delete the instance after testing with 'gcloud beta spanner instances delete'.

$ export MY_KEYRING=some-keyring-name
$ export MY_LOCATION=global
$ export MY_SINGLE_LOCATION=us-central1
# Creates a KMS keyring, in the same location as the default location for your
# project's buckets.
$ gcloud kms keyrings create $MY_KEYRING --location $MY_LOCATION
# Creates two keys in the keyring, named key1 and key2.
$ gcloud kms keys create key1 --keyring $MY_KEYRING --location $MY_LOCATION --purpose encryption
$ gcloud kms keys create key2 --keyring $MY_KEYRING --location $MY_LOCATION --purpose encryption
# Sets the GCLOUD_TESTS_GOLANG_KEYRING environment variable.
$ export GCLOUD_TESTS_GOLANG_KEYRING=projects/$GCLOUD_TESTS_GOLANG_PROJECT_ID/locations/$MY_LOCATION/keyRings/$MY_KEYRING
# Authorizes Google Cloud Storage to encrypt and decrypt using key1.
$ gsutil kms authorize -p $GCLOUD_TESTS_GOLANG_PROJECT_ID -k $GCLOUD_TESTS_GOLANG_KEYRING/cryptoKeys/key1

# Create KMS Key in one region for Bigtable
$ gcloud kms keyrings create $MY_KEYRING --location $MY_SINGLE_LOCATION
$ gcloud kms keys create key1 --keyring $MY_KEYRING --location $MY_SINGLE_LOCATION --purpose encryption
# Sets the GCLOUD_TESTS_BIGTABLE_KEYRING environment variable.
$ export GCLOUD_TESTS_BIGTABLE_KEYRING=projects/$GCLOUD_TESTS_GOLANG_PROJECT_ID/locations/$MY_SINGLE_LOCATION/keyRings/$MY_KEYRING
# Create a service agent, https://cloud.google.com/bigtable/docs/use-cmek#gcloud:
$ gcloud beta services identity create \
    --service=bigtableadmin.googleapis.com \
    --project $GCLOUD_TESTS_GOLANG_PROJECT_ID
# Note the service agent email for the agent created.
$ export SERVICE_AGENT_EMAIL=<service agent email, from last step>

# Authorizes Google Cloud Bigtable to encrypt and decrypt using key1
$ gcloud kms keys add-iam-policy-binding key1 \
    --keyring $MY_KEYRING \
    --location $MY_SINGLE_LOCATION \
    --role roles/cloudkms.cryptoKeyEncrypterDecrypter \
    --member "serviceAccount:$SERVICE_AGENT_EMAIL" \
    --project $GCLOUD_TESTS_GOLANG_PROJECT_ID

----------------------------------------

TITLE: Managing Dependencies in Go Modules for Prometheus
DESCRIPTION: These commands tidy up the go.mod and go.sum files, and copy new or updated dependencies to the vendor directory in the Prometheus project.

LANGUAGE: bash
CODE:
# The GO111MODULE variable can be omitted when the code isn't located in GOPATH.
GO111MODULE=on go mod tidy

GO111MODULE=on go mod vendor

----------------------------------------

TITLE: Network Diagnostic API Commands
DESCRIPTION: Various curl commands to interact with the network diagnostic API endpoints

LANGUAGE: bash
CODE:
$ curl localhost:2000/help

LANGUAGE: bash
CODE:
$ curl localhost:2000/join?members=ip1,ip2,...

LANGUAGE: bash
CODE:
$ curl localhost:2000/joinnetwork?nid=<network id>

LANGUAGE: bash
CODE:
$ curl localhost:2000/clusterpeers

LANGUAGE: bash
CODE:
$ curl localhost:2000/networkpeers?nid=<network id>

LANGUAGE: bash
CODE:
$ curl localhost:2000/gettable?nid=<network id>&tname=<table name>

----------------------------------------

TITLE: Activating Network Driver Plugin
DESCRIPTION: JSON response for the /Plugin.Activate endpoint, indicating that the plugin implements the NetworkDriver interface.

LANGUAGE: json
CODE:
{
	"Implements": ["NetworkDriver"]
}

----------------------------------------

TITLE: Running Cobra Tests
DESCRIPTION: Commands for running the test suite for the Cobra project using either Go test command or make.

LANGUAGE: shell
CODE:
go test ./...
make test

----------------------------------------

TITLE: Reloading Docker Configuration
DESCRIPTION: Bash command to reload Docker configuration by sending HUP signal to the daemon process

LANGUAGE: bash
CODE:
kill -HUP <pid-of-dockerd>

----------------------------------------

TITLE: Adding Permissions to ListBlobsInclude Parameter
DESCRIPTION: YAML directive to add 'permissions' to the enum of the ListBlobsInclude parameter in the Swagger document.

LANGUAGE: yaml
CODE:
directive:  
- from: swagger-document    
  where: $.parameters.ListBlobsInclude    
  transform: >        
    $.items.enum.push("permissions");

----------------------------------------

TITLE: Running Tests for gRPC Go Project
DESCRIPTION: This snippet shows the commands to run tests locally before creating a pull request. It includes running vet checks and go tests in both normal and race mode.

LANGUAGE: bash
CODE:
./scripts/vet.sh

LANGUAGE: bash
CODE:
go test -cpu 1,4 -timeout 7m ./...

LANGUAGE: bash
CODE:
go test -race -cpu 1,4 -timeout 7m ./...

----------------------------------------

TITLE: Basic YAML Marshal/Unmarshal Example in Go
DESCRIPTION: Demonstrates basic YAML marshaling and unmarshaling using a Person struct with JSON tags that affect YAML field names.

LANGUAGE: go
CODE:
package main

import (
	"fmt"

	"sigs.k8s.io/yaml"
)

type Person struct {
	Name string `json:"name"` // Affects YAML field names too.
	Age  int    `json:"age"`
}

func main() {
	// Marshal a Person struct to YAML.
	p := Person{"John", 30}
	y, err := yaml.Marshal(p)
	if err != nil {
		fmt.Printf("err: %v\n", err)
		return
	}
	fmt.Println(string(y))

	// Unmarshal the YAML back into a Person struct.
	var p2 Person
	err = yaml.Unmarshal(y, &p2)
	if err != nil {
		fmt.Printf("err: %v\n", err)
		return
	}
	fmt.Println(p2)
}

----------------------------------------

TITLE: Initializing Go's Random Number Generator with seed.Init()
DESCRIPTION: This snippet shows how to use the seed.Init() function to securely initialize Go's random number generator while handling potential errors. It returns a boolean indicating if the seeding was secure and an error if it failed.

LANGUAGE: go
CODE:
func init() {
  if secure, err := !seed.Init(); !secure {
    // Handle the error
    //panic(fmt.Sprintf("Unable to securely seed Go's RNG: %v", err))
  }
}

----------------------------------------

TITLE: Running Tests for OpenCensus Go Project
DESCRIPTION: Commands to install necessary tools and run tests for the OpenCensus Go project. This ensures that the development environment is set up correctly and all tests pass before making changes.

LANGUAGE: bash
CODE:
$ make install-tools  # Only first time.
$ make

----------------------------------------

TITLE: Installing and Importing YAML Package in Go
DESCRIPTION: Shows how to install the package via go get and import it in Go code.

LANGUAGE: bash
CODE:
$ go get sigs.k8s.io/yaml

LANGUAGE: go
CODE:
import "sigs.k8s.io/yaml"

----------------------------------------

TITLE: Configuring AutoRest for Azure Blob SDK Generation
DESCRIPTION: YAML configuration for AutoRest to generate the Azure Blob SDK for Golang. It specifies input files, output settings, and various options for code generation.

LANGUAGE: yaml
CODE:
go: true
clear-output-folder: false
version: "^3.0.0"
license-header: MICROSOFT_MIT_NO_VERSION
input-file: "https://raw.githubusercontent.com/Azure/azure-rest-api-specs/f6f50c6388fd5836fa142384641b8353a99874ef/specification/storage/data-plane/Microsoft.BlobStorage/stable/2024-08-04/blob.json"
credential-scope: "https://storage.azure.com/.default"
output-folder: ../generated
file-prefix: "zz_"
openapi-type: "data-plane"
verbose: true
security: AzureKey
modelerfour:
  group-parameters: false
  seal-single-value-enum-by-default: true
  lenient-model-deduplication: true
export-clients: true
use: "@autorest/go@4.0.0-preview.65"

----------------------------------------

TITLE: Installing and Using go-md2man CLI
DESCRIPTION: Commands for installing the go-md2man tool via Go package manager and using it to convert a markdown file to a man page. The tool requires specifying input markdown file path and output man file path.

LANGUAGE: bash
CODE:
go install github.com/cpuguy83/go-md2man@latest

go-md2man -in /path/to/markdownfile.md -out /manfile/output/path

----------------------------------------

TITLE: Legacy Import Path Replace Directive
DESCRIPTION: Go module replace directive to handle legacy github.com/uber-go/atomic import path

LANGUAGE: text
CODE:
replace github.com/uber-go/atomic => github.com/uber-go/atomic v1.4.0

----------------------------------------

TITLE: Defining Node Message in Protocol Buffers
DESCRIPTION: Defines the Node message structure representing a node in the swarm cluster. It includes fields for node identification, metadata, specifications, description, status, and other node-related information.

LANGUAGE: Protocol Buffers
CODE:
message Node {
  string id = 1;
  Meta meta = 2 [(gogoproto.nullable) = false];
  NodeSpec spec = 3 [(gogoproto.nullable) = false];
  NodeDescription description = 4;
  NodeStatus status = 5 [(gogoproto.nullable) = false];
  ManagerStatus manager_status = 6;
  NetworkAttachment attachment = 7 [deprecated=true];
  Certificate certificate = 8 [(gogoproto.nullable) = false];
  NodeRole role = 9;
  repeated NetworkAttachment attachments = 10;
  uint32 VXLANUDPPort = 11;
}

----------------------------------------

TITLE: Updating Go Mod with Legacy Import
DESCRIPTION: Shell command to automatically add the replace directive for legacy import path

LANGUAGE: shell
CODE:
$ go mod edit -replace github.com/uber-go/atomic=github.com/uber-go/atomic@v1.4.0

----------------------------------------

TITLE: Flag Name Normalization in Go
DESCRIPTION: Demonstrates how to implement custom flag name normalization for consistent handling of different separators.

LANGUAGE: go
CODE:
func wordSepNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {
	from := []string{"-", "_"}
	to := "."
	for _, sep := range from {
		name = strings.Replace(name, sep, to, -1)
	}
	return pflag.NormalizedName(name)
}

myFlagSet.SetNormalizeFunc(wordSepNormalizeFunc)

----------------------------------------

TITLE: Markdown Link to CNCF Code of Conduct
DESCRIPTION: Markdown formatted link referencing the CNCF Code of Conduct document that Prometheus follows

LANGUAGE: markdown
CODE:
# Prometheus Community Code of Conduct

Prometheus follows the [CNCF Code of Conduct](https://github.com/cncf/foundation/blob/main/code-of-conduct.md).

----------------------------------------

TITLE: CGroups v2 Metrics Protocol Buffer Schema
DESCRIPTION: Comprehensive protocol buffer definition for cgroup v2 metrics collection, including CPU, memory, I/O, RDMA, and hugetlb statistics. The schema defines message types for various metric categories with specific fields for detailed resource usage tracking.

LANGUAGE: protobuf
CODE:
syntax = "proto3";
package io.containerd.cgroups.v2;

option go_package = "github.com/containerd/cgroups/cgroup2/stats";

message Metrics {
  optional PidsStat pids = 1;
  optional CPUStat cpu = 2;
  optional MemoryStat memory = 4;
  optional RdmaStat rdma = 5;
  optional IOStat io = 6;
  repeated HugeTlbStat hugetlb = 7;
  optional MemoryEvents memory_events = 8;
}

message PSIData {
  optional double avg10 = 1;
  optional double avg60 = 2;
  optional double avg300 = 3;
  optional uint64 total = 4;
}

message PSIStats {
  optional PSIData some = 1;
  optional PSIData full = 2;
}

message PidsStat {
  optional uint64 current = 1;
  optional uint64 limit = 2;
}

message CPUStat {
  optional uint64 usage_usec = 1;
  optional uint64 user_usec = 2;
  optional uint64 system_usec = 3;
  optional uint64 nr_periods = 4;
  optional uint64 nr_throttled = 5;
  optional uint64 throttled_usec = 6;
  optional PSIStats psi = 7;
}

message MemoryStat {
  // Memory statistics fields...
}

message MemoryEvents {
  optional uint64 low = 1;
  optional uint64 high = 2;
  optional uint64 max = 3;
  optional uint64 oom = 4;
  optional uint64 oom_kill = 5;
}

message RdmaStat {
  repeated RdmaEntry current = 1;
  repeated RdmaEntry limit = 2;
}

message RdmaEntry {
  optional string device = 1;
  optional uint32 hca_handles = 2;
  optional uint32 hca_objects = 3;
}

message IOStat {
  repeated IOEntry usage = 1;
  optional PSIStats psi = 2;
}

message IOEntry {
  optional uint64 major = 1;
  optional uint64 minor = 2;
  optional uint64 rbytes = 3;
  optional uint64 wbytes = 4;
  optional uint64 rios = 5;
  optional uint64 wios = 6;
}

message HugeTlbStat {
  optional uint64 current = 1;
  optional uint64 max = 2;
  optional string pagesize = 3;
}

----------------------------------------

TITLE: Disable Flag Sorting in Go
DESCRIPTION: Shows how to disable automatic sorting of flags in help and usage messages.

LANGUAGE: go
CODE:
flags.BoolP("verbose", "v", false, "verbose output")
flags.String("coolflag", "yeaah", "it's really cool flag")
flags.Int("usefulflag", 777, "sometimes it's very useful")
flags.SortFlags = false
flags.PrintDefaults()

----------------------------------------

TITLE: Using jsonclient with empty HTTP responses
DESCRIPTION: The jsonclient package now handles empty HTTP responses.

LANGUAGE: Go
CODE:
client := jsonclient.New("https://example.com", nil)
resp, err := client.GetAndParse("/empty", nil)
if err != nil {
  // Handle error
}
// resp may be nil for empty responses

----------------------------------------

TITLE: Pre-release Make Command
DESCRIPTION: Make command for executing the pre-release process for a specific module set. Creates a new branch with version updates.

LANGUAGE: sh
CODE:
make prerelease MODSET=<module set>

----------------------------------------

TITLE: Basic Go Error Handling Pattern
DESCRIPTION: Demonstrates the traditional error handling pattern in Go, showing the basic nil check and return pattern.

LANGUAGE: go
CODE:
if err != nil {
        return err
}

----------------------------------------

TITLE: Running Docker-in-Docker (DinD) in Bash
DESCRIPTION: DinD is a wrapper script that enables running Docker inside a Docker container. It requires the container to be run in privileged mode.

LANGUAGE: bash
CODE:
# DinD (dind.sh)

----------------------------------------

TITLE: Forward Migration Struct Definitions - Go
DESCRIPTION: Defines three versions of structs with forward migration support using ConvertFrom interface implementations.

LANGUAGE: go
CODE:
// --------- V1 struct definition below ---------

type V1 struct {
  Name     string
  OldField string
}

// --------- V2 struct definition below ---------

type V2 struct {
  Name     string
  NewField string // this was a renamed field
}

func (to *V2) ConvertFrom(from interface{}) error {
  if from, ok := from.(V1); ok { // forward migration
    to.NewField = from.OldField
  }
  return nil
}

// --------- V3 struct definition below ---------

type V3 struct {
  Name       []string
  FinalField []string // this field was renamed and the type was changed
}

func (to *V3) ConvertFrom(from interface{}) error {
  if from, ok := from.(V2); ok { // forward migration
    to.FinalField = []string{from.NewField}
  }
  return nil
}

----------------------------------------

TITLE: System Call Assembly Interface Definitions in Go
DESCRIPTION: Core system call entry point definitions that must be implemented for each GOOS/GOARCH pair. These functions handle system call dispatch with different argument counts and scheduling behavior.

LANGUAGE: go
CODE:
func Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)
func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)
func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)

----------------------------------------

TITLE: Example of Merging Structs with Mergo in Go
DESCRIPTION: Provides a complete example of using Mergo to merge two structs in Go.

LANGUAGE: go
CODE:
package main

import (
	"fmt"
	"dario.cat/mergo"
)

type Foo struct {
	A string
	B int64
}

func main() {
	src := Foo{
		A: "one",
		B: 2,
	}
	dest := Foo{
		A: "two",
	}
	mergo.Merge(&dest, src)
	fmt.Println(dest)
	// Will print
	// {two 2}
}