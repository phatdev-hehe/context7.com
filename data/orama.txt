TITLE: Creating a RAG-powered Chat Experience with Orama and OpenAI
DESCRIPTION: This code demonstrates how to create an AI chat experience using Orama database with OpenAI integration via the Secure Proxy Plugin. It includes setting up the database, inserting data, creating an answer session, and generating AI responses based on database content.

LANGUAGE: javascript
CODE:
import { create, insert } from '@orama/orama'
import { pluginSecureProxy } from '@orama/plugin-secure-proxy'

const secureProxy = await pluginSecureProxy({
  apiKey: 'my-api-key',
  defaultProperty: 'embeddings',
  models: {
    // The chat model to use to generate the chat answer
    chat: 'openai/gpt-4o-mini'
  }
})

const db = create({
  schema: {
    name: 'string'
  },
  plugins: [secureProxy]
})

insert(db, { name: 'John Doe' })
insert(db, { name: 'Jane Doe' })

const session = new AnswerSession(db, {
  // Customize the prompt for the system
  systemPrompt: 'You will get a name as context, please provide a greeting message',
  events: {
    // Log all state changes. Useful to reactively update a UI on a new message chunk, sources, etc.
    onStateChange: console.log,
  }
})

const response = await session.ask({
  term: 'john'
})

console.log(response) // Hello, John Doe! How are you doing?

----------------------------------------

TITLE: Complete Vector Search Example in Orama
DESCRIPTION: A full example demonstrating how to create a database with a vector field, insert multiple documents with embeddings, and perform a vector search with specific parameters. The example uses a 5-dimensional vector for simplicity.

LANGUAGE: javascript
CODE:
import { create, insertMultiple, search } from "@orama/orama";

const db = create({
  schema: {
    title: "string", // To make it simple, let's pretend that
    embedding: "vector[5]", // we are using a 5-dimensional vector.
  },
});

insertMultiple(db, [
  {
    title: "The Prestige",
    embedding: [0.938293, 0.284951, 0.348264, 0.948276, 0.56472],
  },
  {
    title: "Barbie",
    embedding: [0.192839, 0.028471, 0.284738, 0.937463, 0.092827],
  },
  {
    title: "Oppenheimer",
    embedding: [0.827391, 0.927381, 0.001982, 0.983821, 0.294841],
  },
]);

const results = search(db, {
  mode: "vector",
  vector: {
    value: [0.938292, 0.284961, 0.248264, 0.748276, 0.26472],
    property: "embedding",
  },
  similarity: 0.85, // Minimum similarity. Defaults to `0.8`
  includeVectors: true, // Defaults to `false`
  limit: 10, // Defaults to `10`
  offset: 0, // Defaults to `0`
});

----------------------------------------

TITLE: Creating a Chat Experience with Orama and OpenAI Integration
DESCRIPTION: This snippet demonstrates how to create a conversational search experience using Orama's AnswerSession with OpenAI integration. It shows database creation, document insertion, and setting up a secure proxy for API calls with customized prompts and event handling.

LANGUAGE: javascript
CODE:
import { create, insert } from '@orama/orama'
import { pluginSecureProxy } from '@orama/plugin-secure-proxy'

const secureProxy = await pluginSecureProxy({
  apiKey: 'my-api-key',
  defaultProperty: 'embeddings',
  models: {
    // The chat model to use to generate the chat answer
    chat: 'openai/gpt-4o-mini'
  }
})

const db = create({
  schema: {
    name: 'string'
  },
  plugins: [secureProxy]
})

insert(db, { name: 'John Doe' })
insert(db, { name: 'Jane Doe' })

const session = new AnswerSession(db, {
  // Customize the prompt for the system
  systemPrompt: 'You will get a name as context, please provide a greeting message',
  events: {
    // Log all state changes. Useful to reactively update a UI on a new message chunk, sources, etc.
    onStateChange: console.log,
  }
})

const response = await session.ask({
  term: 'john'
})

console.log(response) // Hello, John Doe! How are you doing?

----------------------------------------

TITLE: Creating and Using an Orama Database
DESCRIPTION: Demonstrates how to create an Orama database with a schema, insert data, and perform a text search. This example shows the core functionality of creating a database with a structured schema and performing basic operations.

LANGUAGE: javascript
CODE:
import { create, insert, remove, search, searchVector } from '@orama/orama'

const db = create({
  schema: {
    name: 'string',
    description: 'string',
    price: 'number',
    embedding: 'vector[1536]', // Vector size must be expressed during schema initialization
    meta: {
      rating: 'number',
    },
  },
})

insert(db, {
  name: 'Noise cancelling headphones',
  description: 'Best noise cancelling headphones on the market',
  price: 99.99,
  embedding: [0.2432, 0.9431, 0.5322, 0.4234, ...],
  meta: {
    rating: 4.5
  }
})

const results = search(db, {
  term: 'Best headphones'
})

// {
//   elapsed: {
//     raw: 21492,
//     formatted: '21μs',
//   },
//   hits: [
//     {
//       id: '41013877-56',
//       score: 0.925085832971998432,
//       document: {
//         name: 'Noise cancelling headphones',
//         description: 'Best noise cancelling headphones on the market',
//         price: 99.99,
//         embedding: [0.2432, 0.9431, 0.5322, 0.4234, ...],
//         meta: {
//           rating: 4.5
//         }
//       }
//     }
//   ],
//   count: 1
// }

----------------------------------------

TITLE: Performing Hybrid Search with Orama in JavaScript
DESCRIPTION: This snippet demonstrates how to use the Orama JavaScript SDK to perform hybrid search. It initializes a client with endpoint and API key credentials, then executes a search with a text term, hybrid mode, and filtering conditions.

LANGUAGE: typescript
CODE:
import { OramaClient } from "@oramacloud/client";

const client = new OramaClient({
  endpoint: "",
  api_key: "",
});

const results = await client.search({
  term: "Super Mario videogame",
  mode: "hybrid",
  where: {
    price: {
      lt: 19.99,
    },
  },
});

----------------------------------------

TITLE: Creating and Using an Orama Database
DESCRIPTION: Demonstrates how to create an Orama database with a schema, insert data, and perform a text search. This example shows the core functionality of creating a database with a structured schema and performing basic operations.

LANGUAGE: javascript
CODE:
import { create, insert, remove, search, searchVector } from '@orama/orama'

const db = create({
  schema: {
    name: 'string',
    description: 'string',
    price: 'number',
    embedding: 'vector[1536]', // Vector size must be expressed during schema initialization
    meta: {
      rating: 'number',
    },
  },
})

insert(db, {
  name: 'Noise cancelling headphones',
  description: 'Best noise cancelling headphones on the market',
  price: 99.99,
  embedding: [0.2432, 0.9431, 0.5322, 0.4234, ...],
  meta: {
    rating: 4.5
  }
})

const results = search(db, {
  term: 'Best headphones'
})

// {
//   elapsed: {
//     raw: 21492,
//     formatted: '21μs',
//   },
//   hits: [
//     {
//       id: '41013877-56',
//       score: 0.925085832971998432,
//       document: {
//         name: 'Noise cancelling headphones',
//         description: 'Best noise cancelling headphones on the market',
//         price: 99.99,
//         embedding: [0.2432, 0.9431, 0.5322, 0.4234, ...],
//         meta: {
//           rating: 4.5
//         }
//       }
//     }
//   ],
//   count: 1
// }

----------------------------------------

TITLE: Basic Orama Search Implementation
DESCRIPTION: A simple example demonstrating how to create an Orama database with a schema, insert a document, and perform a search. It shows the core functionality of creating a database, inserting data, and querying it.

LANGUAGE: typescript
CODE:
import { create, search, insert } from "@orama/orama";

const db = create({
  schema: {
    name: "string",
    description: "string",
    price: "number",
    meta: {
      rating: "number",
    },
  },
});

insert(db, {
  name: "Wireless Headphones",
  description:
    "Experience immersive sound quality with these noise-cancelling wireless headphones.",
  price: 99.99,
  meta: {
    rating: 4.5,
  },
});

const searchResult = search(db, {
  term: "headphones",
});

console.log(searchResult.hits.map((hit) => hit.document));

----------------------------------------

TITLE: Installing and Configuring Orama Secure Proxy Plugin
DESCRIPTION: This snippet demonstrates how to create a new Orama instance with the Secure Proxy plugin configured. It sets up the plugin with an API key, default property for embeddings, and specifies the OpenAI embedding model to use.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";
import { pluginSecureProxy } from "@orama/plugin-secure-proxy";

const secureProxy = secureProxyPlugin({
  apiKey: "YOUR API KEY",
  defaultProperty: "embeddings",
  model: "openai/text-embedding-ada-002",
});

const db = create({
  schema: {
    title: "string",
    description: "string",
    embeddings: "vector[1536]",
  },
  plugins: [secureProxy],
});

----------------------------------------

TITLE: Implementing Vector Search with Orama Embeddings Plugin in JavaScript
DESCRIPTION: This code demonstrates how to set up the Orama embeddings plugin with TensorFlow.js to generate embeddings for vector search. It shows the complete workflow including plugin configuration, database creation with a proper schema, document insertion, and performing a vector search. Note that insert and search methods become asynchronous when using this plugin.

LANGUAGE: javascript
CODE:
import { create, insert, search } from '@orama/orama'
import { pluginEmbeddings } from '@orama/plugin-embeddings'
import '@tensorflow/tfjs-node' // Or any other appropriate TensorflowJS backend

const plugin = await pluginEmbeddings({
  embeddings: {
    // Property used to store generated embeddings. Must be defined in the schema.
    defaultProperty: 'embeddings',
    onInsert: {
      // Generate embeddings at insert-time.
      // Turn off if you're inserting documents with embeddings already generated.
      generate: true,
      // Properties to use for generating embeddings at insert time.
      // These properties will be concatenated and used to generate embeddings.
      properties: ['description'],
      verbose: true,
    }
  }
})

const db = create({
  schema: {
    description: 'string',
    // Orama generates 512-dimensions vectors.
    // When using this plugin, use `vector[512]` as a type.
    embeddings: 'vector[512]'
  },
  plugins: [plugin]
})

// When using this plugin, document insertion becomes async
await insert(db, { description: 'The quick brown fox jumps over the lazy dog' })
await insert(db, { description: "I've seen a lazy dog dreaming of jumping over a quick brown fox" })

// When using this plugin, search becomes async
const results = await search(db, {
  term: 'Dreaming of a quick brown fox',
  mode: 'vector'
})

----------------------------------------

TITLE: Basic Search in Orama
DESCRIPTION: This snippet shows the simplest way to search through an Orama database by providing a search term. When no term is provided, all documents in the database will be returned.

LANGUAGE: javascript
CODE:
const searchResult = search(movieDB, {
  term: "Harry",
});

----------------------------------------

TITLE: Implementing RAG Pipeline with Orama
DESCRIPTION: This comprehensive example demonstrates how to implement a Retrieval-Augmented Generation (RAG) pipeline using Orama. It covers database initialization with vector embeddings, document population, and response generation using search results as context.

LANGUAGE: typescript
CODE:
import { create, insert, search, AnswerSession } from "@orama/orama";
import { pluginSecureProxy } from "@orama/plugin-secure-proxy";

// Configuration options for better maintainability
const CONFIG = {
  API_KEY: process.env.ORAMA_SECURE_PROXY_API_KEY,
  VECTOR_DIMENSIONS: 1536,
};

// Sample documents
const SAMPLE_DOCS = [
  { description: "John Doe is a programmer, and he has 14 years." },
  { description: "Mitch Smith is a programmer, and he has 32 years." },
];

/**
 * Initialize the Orama database with secure proxy plugin
 * @returns {Promise<Object>} Configured database instance
 */
async function initializeDatabase() {
  const secureProxy = await pluginSecureProxy({
    apiKey: CONFIG.API_KEY,
    embeddings: {
      model: "openai/text-embedding-ada-002",
      defaultProperty: "embeddings",
      onInsert: {
        generate: true,
        properties: ["description"],
        verbose: true,
      },
    },
    chat: {
      model: "openai/gpt-3.5-turbo",
    },
  });

  return create({
    schema: {
      description: "string",
      embeddings: `vector[${CONFIG.VECTOR_DIMENSIONS}]`,
    },
    plugins: [secureProxy],
  });
}

/**
 * Populate the database with documents
 * @param {Object} db - Database instance
 * @param {Array} documents - Array of documents to insert
 */
async function populateDatabase(db, documents) {
  const insertPromises = documents.map((doc) =>
    insert(db, { description: doc.description })
  );
  await Promise.all(insertPromises);
}

/**
 * Perform vector search and generate response
 * @param {Object} db - Database instance
 * @param {string} userPrompt - User's question
 * @returns {Promise<string>} Generated response
 */
async function generateResponse(db, userPrompt) {
  try {
    const searchResults = await search(db, {
      mode: "vector",
      term: userPrompt,
    });

    const formattedPrompt = `### Context: \n\n${JSON.stringify(
      searchResults?.hits
    )}\n\n### Prompt:\n\n${userPrompt}`;

    const session = new AnswerSession(db, {});
    return await session.ask({ term: formattedPrompt });
  } catch (error) {
    console.error("Error generating response:", error);
    throw error;
  }
}

/**
 * Main execution function
 */
async function main() {
  try {
    // Initialize database
    const db = await initializeDatabase();

    // Populate with sample data
    await populateDatabase(db, SAMPLE_DOCS);

    // Example query
    const userPrompt = "Who is John Doe?";
    const response = await generateResponse(db, userPrompt);

    console.log("Response:", response);
  } catch (error) {
    console.error("Application error:", error);
  }
}

// Execute the application
main();

----------------------------------------

TITLE: Performing Vector Search with JavaScript/TypeScript in Orama Cloud
DESCRIPTION: This code demonstrates how to perform vector search using the Orama JavaScript client. It initializes a client with endpoint and API key, then performs a search with a term, vector mode, and filters on price.

LANGUAGE: typescript
CODE:
import { OramaClient } from "@oramacloud/client";

const client = new OramaClient({
  endpoint: "",
  api_key: "",
});

const results = await client.search({
  term: "Super Mario videogame",
  mode: "vector",
  where: {
    price: {
      lt: 19.99,
    },
  },
});

----------------------------------------

TITLE: Creating an Orama Database for Movies with Multiple Data Types
DESCRIPTION: This example shows how to create an Orama database with a more complex schema for movie data, including string, number, and boolean properties for different aspects of movie information.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";

const movieDB = create({
  schema: {
    title: "string",
    director: "string",
    plot: "string",
    year: "number",
    isFavorite: "boolean",
  },
});

----------------------------------------

TITLE: Creating a Typed Search Database with Orama in TypeScript
DESCRIPTION: This snippet demonstrates how to create a strongly-typed Orama database for movies with proper type definitions for schema, document structure, and search results. It includes type definitions for database, search parameters, and result objects.

LANGUAGE: typescript
CODE:
import type { TypedDocument, Orama, Results, SearchParams } from "@orama/orama";
import { create, insert, search } from "@orama/orama";

type MovieDocument = TypedDocument<Orama<typeof movieSchema>>;

const movieSchema = {
  title: "string",
  year: "number",
  actors: "string[]",
  isFavorite: "boolean",
  stars: "enum",
} as const; // <-- this is important

const movieDB: Orama<typeof movieSchema> = create({
  schema: movieSchema,
});

const idP: string = insert(movieDB, {
  title: "The Godfather",
  year: 1972,
  actors: ["Marlon Brando", "Al Pacino"],
  isFavorite: true,
});

const searchParams: SearchParams<Orama<typeof movieSchema>> = {
  term: "godfather",
};
const result: Results<MovieDocument> = search(movieDB, searchParams);
const title = result.hits[0].document.title; // well typed!

----------------------------------------

TITLE: Creating a Simple Orama Database Instance with String Schema
DESCRIPTION: A basic example of creating an Orama database with a minimal schema containing only a string property. This represents the simplest possible Orama instance configuration.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";

const db = create({
  schema: {
    word: "string",
  },
});

----------------------------------------

TITLE: Creating and Using an Orama Database with Nested Properties
DESCRIPTION: Demonstrates how to create an Orama database with nested schema properties and insert a document with nested data structures. This example shows nested properties for movie cast information including array types.

LANGUAGE: javascript
CODE:
const movieDB = create({
  schema: {
    title: "string",
    plot: "string",
    cast: {
      director: "string",
      leading: "string",
      supporting: "string[]",
    },
    year: "number",
    isFavorite: "boolean",
  },
});

insert(movieDB, {
  title: "The Godfather",
  plot: "The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.",
  cast: {
    director: "Francis Ford Coppola",
    leading: "Marlon Brando",
    supporting: ["Al Pacino", "James Caan", "Robert Duvall"],
  },
  year: 1972,
  isFavorite: true,
});

----------------------------------------

TITLE: Inserting Individual Documents into Orama Database
DESCRIPTION: Demonstrates inserting multiple individual movie records into an Orama database. Each insert operation returns an ID that can be used to reference the document later.

LANGUAGE: javascript
CODE:
const thePrestigeId = insert(movieDB, {
  title: "The prestige",
  director: "Christopher Nolan",
  plot: "Two friends and fellow magicians become bitter enemies after a sudden tragedy. As they devote themselves to this rivalry, they make sacrifices that bring them fame but with terrible consequences.",
  year: 2006,
  isFavorite: true,
});

const bigFishId = insert(movieDB, {
  title: "Big Fish",
  director: "Tim Burton",
  plot: "Will Bloom returns home to care for his dying father, who had a penchant for telling unbelievable stories. After he passes away, Will tries to find out if his tales were really true.",
  year: 2004,
  isFavorite: true,
});

const harryPotterId = insert(movieDB, {
  title: "Harry Potter and the Philosopher's Stone",
  director: "Chris Columbus",
  plot: "Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.",
  year: 2001,
  isFavorite: false,
});

----------------------------------------

TITLE: Performing Basic Full-Text Search in JavaScript with Orama Cloud
DESCRIPTION: Example showing how to initialize OramaClient and perform a full-text search query with filters in JavaScript. The code demonstrates setting up the client with endpoint and API key, then performing a search for 'red shoes' with a price filter.

LANGUAGE: typescript
CODE:
import { OramaClient } from "@oramacloud/client";

const client = new OramaClient({
  endpoint: '<Your Orama Cloud Endpoint>',
  api_key: '<Your Orama Cloud API Key>',
});

const results = await client.search({
  term: "red shoes",
  mode: "fulltext", // optional, default is "fulltext" but can also be "vector" or "hybrid"
  where: {
    price: {
      gt: 99.99,
    },
  },
});

----------------------------------------

TITLE: Performing Hybrid and Vector Search with Orama Secure Proxy
DESCRIPTION: This code example shows how to perform both hybrid and vector searches using the Orama Secure Proxy plugin. The plugin automatically translates search terms into vectors by calling the OpenAI API, allowing for semantic search capabilities.

LANGUAGE: javascript
CODE:
import { search } from '@orama/orama'

const resultsHybrid = await search(db, {
  mode: 'hybrid',
  term: 'Videogame for little kids with a passion about ice cream'
})

const resultsVector = await search(db, {
  mode: 'vector',
  term: 'Videogame for little kids with a passion about ice cream'
})

----------------------------------------

TITLE: Complete Hybrid Search Implementation with Orama
DESCRIPTION: Demonstrates a full example of setting up a database, inserting data with embeddings, and performing a hybrid search that combines full-text and vector similarity. The example uses 5-dimensional vectors for simplicity.

LANGUAGE: javascript
CODE:
import { create, insertMultiple, search } from '@orama/orama'

const db = create({
  schema: {
    title: 'string',        // To make it simple, let's pretend that
    embedding: 'vector[5]', // we are using a 5-dimensional vector.
  }
})

insertMultiple(db, [
  { title: 'The Prestige', embedding: [0.938293, 0.284951, 0.348264, 0.948276, 0.564720] },
  { title: 'Barbie',       embedding: [0.192839, 0.028471, 0.284738, 0.937463, 0.092827] },
  { title: 'Oppenheimer',  embedding: [0.827391, 0.927381, 0.001982, 0.983821, 0.294841] },
])

const results = search(db, {
  mode: 'hybrid',
  term: 'The Prestige'
  vector: {
    value: [0.938292, 0.284961, 0.248264, 0.748276, 0.264720],
    property: 'embedding',
  },
  similarity: 0.85,      // Minimum vector search similarity. Defaults to `0.8`
  includeVectors: true,  // Defaults to `false`
  limit: 10,             // Defaults to `10`
  offset: 0,             // Defaults to `0`
})

----------------------------------------

TITLE: Implementing Full-Text Search in Swift with Orama Cloud
DESCRIPTION: Swift implementation for performing full-text search using Orama Cloud. The example shows how to configure the client, define a document type, and perform a search with various parameters like limit, offset, and specific fields to return.

LANGUAGE: swift
CODE:
import OramaCloudClient

struct MyDoc: Codable {
  let title: String
  let description: String
}

let clientParams = OramaClientParams(endpoint: "<Your Orama Cloud Endpoint>", apiKey: "<Your Orama Cloud API Key>")
let client = OramaClient(params: clientParams)

let searchParams = ClientSearchParams.builder(
    term: "red shoes",
    mode: .fulltext // optional, default is .fulltext but can also be .vector or .hybrid
  )
  .limit(10) // optional
  .offset(0) // optional
  .returning(["title", "description"]) // optional
  .build()

let searchResults: SearchResults<MyDoc> = try await client.search(query: searchParams)

----------------------------------------

TITLE: Searching on Specific Properties in Orama
DESCRIPTION: This example demonstrates how to limit search to specific document properties. It can be used with simple properties or nested properties using dot notation.

LANGUAGE: javascript
CODE:
const searchResult = search(movieDB, {
  term: "Chris",
  properties: ["director"],
});

----------------------------------------

TITLE: Generating Embeddings with OramaProxy
DESCRIPTION: This snippet demonstrates how to use the OramaProxy class to generate text embeddings without exposing your OpenAI API key. It initializes the proxy with your API key and calls generateEmbeddings with text and the desired model.

LANGUAGE: js
CODE:
import { OramaProxy } from "@oramacloud/secure-proxy";

const proxy = new OramaProxy({
  api_key: "<YOUR API KEY>",
});

const embeddings = await proxy.generateEmbeddings(
  "Red leather shoes",
  "orama/gte-small" // Specify the model you want to use
);

console.log(embeddings);
// [-0.019633075, -0.00820422, -0.013555876, -0.011825735, 0.006641511, -0.012948156, ...]

----------------------------------------

TITLE: Creating and Populating a Movie Database with Orama
DESCRIPTION: This snippet demonstrates how to create an Orama database with a defined schema for movies, then insert multiple movie records. The schema includes string, number, and boolean properties.

LANGUAGE: javascript
CODE:
import { create, insert, search } from "@orama/orama";

const movieDB = create({
  schema: {
    title: "string",
    director: "string",
    plot: "string",
    year: "number",
    isFavorite: "boolean",
  },
});

insert(movieDB, {
  title: "The prestige",
  director: "Christopher Nolan",
  plot: "Two friends and fellow magicians become bitter enemies after a sudden tragedy. As they devote themselves to this rivalry, they make sacrifices that bring them fame but with terrible consequences.",
  year: 2006,
  isFavorite: true,
});

insert(movieDB, {
  title: "Big Fish",
  director: "Tim Burton",
  plot: "Will Bloom returns home to care for his dying father, who had a penchant for telling unbelievable stories. After he passes away, Will tries to find out if his tales were really true.",
  year: 2004,
  isFavorite: true,
});

insert(movieDB, {
  title: "Harry Potter and the Philosopher's Stone",
  director: "Chris Columbus",
  plot: "Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.",
  year: 2001,
  isFavorite: false,
});

----------------------------------------

TITLE: Configuring Vector Search in Orama with Embeddings
DESCRIPTION: Shows how to create an Orama database with vector properties for vector search capabilities and insert a document with embedding vectors. The vector size must be specified in the schema definition.

LANGUAGE: javascript
CODE:
const db = create({
  schema: {
    title: "string",
    embedding: "vector[10]", // replace 10 with the appropriate size of your vector
  },
});

insert(db, {
  title: "The Godfather",
  embedding: [
    -0.8469661901208547, 0.6762289692745016, 0.3294302068627739,
    -0.9269241187762711, -0.8340635986042049, -0.9940330715457502,
    -0.46761552816396046, 0.2818135926099674, -0.5812061227183709,
    0.6443446315273054,
  ],
});

----------------------------------------

TITLE: Creating and Populating an Orama Database Instance
DESCRIPTION: This code snippet demonstrates how to create an Orama database instance with a schema for quotes and authors, and then inserting three sample quotes into it. This serves as the common database source for both browser and server examples.

LANGUAGE: javascript
CODE:
import { create, insert } from "@orama/orama";

const originalInstance = create({
  schema: {
    author: "string",
    quote: "string",
  },
});

insert(originalInstance, {
  quote: "He who is brave is free",
  author: "Seneca",
});

insert(originalInstance, {
  quote: "Make each day your masterpiece",
  author: "John Wooden",
});

insert(originalInstance, {
  quote: "You must be the change you wish to see in the world",
  author: "Mahatma Gandhi",
});

----------------------------------------

TITLE: Performing Hybrid Search with Orama in Kotlin
DESCRIPTION: This snippet demonstrates how to use the Orama Kotlin SDK to perform hybrid search. It defines a serializable document class, initializes a client with credentials, and creates search parameters with filtering conditions.

LANGUAGE: kotlin
CODE:
import com.orama.client.OramaClient
import com.orama.model.search.*
import kotlinx.serialization.Serializable

@Serializable
data class MyDoc (
    val title: String,
    val category: String,
    val path: String,
    val content: String,
    val section: String
)

val client = OramaClient(
    endpoint = "",
    apiKey = ""
)

val searchParams = SearchParams.builder(
      term = "Super Mario videogame",
      mode = Mode.HYBRID
  )
  .where(listOf(
      Condition("price", ConditionType.LessThan(19.99))
  ))
  .build()

val results = client.search(searchParams, MyDoc.serializer())

----------------------------------------

TITLE: Initializing OramaClient for Multi-Index Search with TypeScript
DESCRIPTION: This code snippet demonstrates how to set up the Orama client to perform searches across multiple indexes. It configures the client with API keys and endpoints for different indexes and sets a merge option to control how results are returned.

LANGUAGE: typescript
CODE:
import { OramaClient } from "@oramacloud/client";

const client = new OramaClient({
  mergeResults: false
  indexes:[
        {api_key: "<Your Orama Cloud API Key index 1>", endpoint:"<Your Orama Cloud Endpoint index 1>"},
        {api_key: "<Your Orama Cloud API Key index 2>", endpoint:"<Your Orama Cloud Endpoint index 2>"},
      ]
});

const results = await client.search({
  term: "red shoes",
  mode: "fulltext", // optional, default is "fulltext" but can also be "vector" or "hybrid"
});

----------------------------------------

TITLE: Using Orama Embeddings Plugin for Automatic Vector Generation
DESCRIPTION: Demonstrates how to use the @orama/plugin-embeddings plugin to automatically generate vector embeddings from text fields. This plugin simplifies the process of implementing vector search by generating embeddings at insert time.

LANGUAGE: javascript
CODE:
import { create } from '@orama/orama'
import { pluginEmbeddings } from '@orama/plugin-embeddings'
import '@tensorflow/tfjs-node' // Or any other appropriate TensorflowJS backend, like @tensorflow/tfjs-backend-webgl

const plugin = await pluginEmbeddings({
  embeddings: {
    // Schema property used to store generated embeddings
    defaultProperty: 'embeddings',
    onInsert: {
      // Generate embeddings at insert-time
      generate: true,
      // properties to use for generating embeddings at insert time.
      // Will be concatenated to generate a unique embedding.
      properties: ['description'],
      verbose: true,
    }
  }
})

const db = create({
  schema: {
    description: 'string',
    // Orama generates 512-dimensions vectors.
    // When using @orama/plugin-embeddings, set the property where you want to store embeddings as `vector[512]`.
    embeddings: 'vector[512]'
  },
  plugins: [plugin]
})

// Orama will generate and store embeddings at insert-time!
await insert(db, { description: 'Classroom Headphones Bulk 5 Pack, Student On Ear Color Varieties' })
await insert(db, { description: 'Kids Wired Headphones for School Students K-12' })
await insert(db, { description: 'Kids Headphones Bulk 5-Pack for K-12 School' })
await insert(db, { description: 'Bose QuietComfort Bluetooth Headphones' })

// Orama will also generate and use embeddings at search time when search mode is set to "vector" or "hybrid"!
const searchResults = await search(db, {
  term: 'Headphones for 12th grade students',
  mode: 'vector'
})

----------------------------------------

TITLE: Implementing Japanese Search Functionality with Orama
DESCRIPTION: This code demonstrates how to set up a full-text search database with Japanese language support using Orama. It includes creating a database with a custom Japanese tokenizer, inserting Japanese city and university names, and performing a search query that correctly handles Japanese text.

LANGUAGE: javascript
CODE:
import { create, insert, search } from "@orama/orama";
import { createTokenizer } from '@orama/tokenizers/japanese'
import { stopwords as japaneseStopwords } from "@orama/stopwords/japanese";

const db = create({
  schema: {
    name: "string",
  },
  components: {
    tokenizer: createTokenizer({
      stopWords: japaneseStopwords,
    }),
  },
});

insert(db, { name: "東京" }); // Tokyo
insert(db, { name: "大阪" }); // Osaka
insert(db, { name: "京都" }); // Kyoto
insert(db, { name: "横浜" }); // Yokohama
insert(db, { name: "札幌" }); // Sapporo
insert(db, { name: "仙台" }); // Sendai
insert(db, { name: "広島" }); // Hiroshima
insert(db, { name: "東京大学" }); // University of Tokyo
insert(db, { name: "京都大学" }); // Kyoto University
insert(db, { name: "大阪大学" }); // Osaka University

const results = search(db, {
  term: "大阪",
  threshold: 0,
});

console.log(results);

// {
//   "elapsed": {
//     "raw": 89554625,
//     "formatted": "89ms"
//   },
//   "hits": [
//     {
//       "id": "36666208-3",
//       "score": 4.210224897276653,
//       "document": {
//         "name": "大阪"
//       }
//     },
//     {
//       "id": "36666208-10",
//       "score": 1.9335268122510698,
//       "document": {
//         "name": "大阪大学"
//       }
//     }
//   ],
//   "count": 2
// }

----------------------------------------

TITLE: Creating and Searching a Chinese Database with Orama
DESCRIPTION: This code demonstrates how to set up Orama with a Mandarin tokenizer and stopwords, create a database, insert Chinese city and university names, and perform a search. It shows the complete workflow from initialization to search results including the configuration of language-specific components.

LANGUAGE: javascript
CODE:
import { create, insert, search } from "@orama/orama";
import { createTokenizer } from '@orama/tokenizers/mandarin'
import { stopwords as mandarinStopwords } from "@orama/stopwords/mandarin";

const db = create({
  schema: {
    name: "string",
  },
  components: {
    tokenizer: createTokenizer({
      stopWords: mandarinStopwords,
    }),
  },
});

insert(db, { name: "北京" }); // Beijing
insert(db, { name: "上海" }); // Shanghai
insert(db, { name: "广州" }); // Guangzhou
insert(db, { name: "深圳" }); // Shenzhen
insert(db, { name: "成都" }); // Chengdu
insert(db, { name: "杭州" }); // Hangzhou
insert(db, { name: "南京" }); // Nanjing
insert(db, { name: "北京大学" }); // Peking University
insert(db, { name: "上海交通大学" }); // Shanghai Jiao Tong University
insert(db, { name: "广州中医药大学" }); // Guangzhou University of Chinese Medicine

const results = search(db, {
  term: "广州",
  threshold: 0,
});

console.log(results);

// {
//   "elapsed": {
//     "raw": 89554625,
//     "formatted": "89ms"
//   },
//   "hits": [
//     {
//       "id": "36666208-3",
//       "score": 4.210224897276653,
//       "document": {
//         "name": "广州"
//       }
//     },
//     {
//       "id": "36666208-10",
//       "score": 1.9335268122510698,
//       "document": {
//         "name": "广州中医药大学"
//       }
//     }
//   ],
//   "count": 2
// }

----------------------------------------

TITLE: Inserting Data with Automatic Embedding Generation
DESCRIPTION: Example showing how to insert data into an Orama database with the embeddings plugin. The plugin automatically generates and stores embeddings for the specified properties (in this case, 'description') without requiring explicit embedding creation.

LANGUAGE: js
CODE:
await insert(db, {
  description: 'Classroom Headphones Bulk 5 Pack, Student On Ear Color Varieties'
})

await insert(db, {
  description: 'Kids Wired Headphones for School Students K-12'
})

await insert(db, {
  description: 'Kids Headphones Bulk 5-Pack for K-12 School'
})

await insert(db, {
  description: 'Bose QuietComfort Bluetooth Headphones'
})

----------------------------------------

TITLE: Restoring Orama Database From In-Memory Snapshot
DESCRIPTION: This code demonstrates how to restore an Orama database from an in-memory snapshot previously created with the persist function. After restoring, the snippet shows how to perform a search operation on the restored database instance.

LANGUAGE: javascript
CODE:
import { search } from "@orama/orama";
import { restore } from "@orama/plugin-data-persistence";

const newInstance = await restore("json", JSONIndex);

search(newInstance, {
  term: "...",
});

----------------------------------------

TITLE: Enriching Document Types in Orama TypeScript
DESCRIPTION: This example shows how to enrich document types beyond the indexed properties in the schema. It demonstrates creating a custom interface that extends the basic schema and using generic type parameters with search functions to maintain type safety.

LANGUAGE: typescript
CODE:
const movieSchema = {
  title: "string",
} as const;
const db = create({ schema: movieSchema });

interface Movie {
  title: string;
  year: number;
}

//             this is important ---v
const r = search<typeof db, Movie>(db, { term: "" });
const title = r.hits[0].document.title; // well typed!
const year = r.hits[0].document.year; // well typed!

----------------------------------------

TITLE: Creating a Database with String Filters in Orama
DESCRIPTION: This snippet shows how to create an Orama database with a schema containing string properties and how to use string filters in search. It demonstrates exact matching on tokens with stemming disabled for specific properties.

LANGUAGE: javascript
CODE:
const db = create({
  schema: {
    title: "string",
    tag: "string",
  },
  components: {
    tokenizer: {
      stemming: true,
      stemmerSkipProperties: ["tag"],
    },
  },
});

const results = search(db, {
  term: "prestige",
  where: {
    tag: "new",
  },
});

----------------------------------------

TITLE: Configuring and Using the Orama Analytics Plugin
DESCRIPTION: This code demonstrates how to add the analytics plugin to an Orama database configuration, initialize the database with data, and perform a search that will collect analytics. The plugin requires an API key and index ID from Orama Cloud.

LANGUAGE: javascript
CODE:
import { Orama } from '@orama/core';
import { pluginAnalytics } from '@orama/plugin-analytics';

const db = create({
  schema: { name: 'string' } as const,
  plugins: [
    pluginAnalytics({
      apiKey: 'your-api-key',
      indexId: 'your-index-id',
    })
  ]
})

insertMultiple(db, [
  { name: 'foo' },
  { name: 'bar' },
  { name: 'baz' },
])

// Collects anonymous analytics data and sends it to Orama Cloud
search(db, { term: 'foo' })

----------------------------------------

TITLE: Implementing Orama Chat Box in React Applications
DESCRIPTION: Example of how to integrate the Orama Chat Box component in a React application. It shows the required configuration including index endpoint details, source URL mapping, and optional suggested questions to display initially.

LANGUAGE: jsx
CODE:
import { OramaChatBox } from '@orama/react-components';

<OramaChatBox
  index={{
    endpoint: 'https://your-index-endpoint-url',
    api_key: 'YOUR_PUBLIC_API_KEY'
  }}
  sourceBaseUrl="https://your-website-url"
  sourcesMap={{
    title: 'name',
    description: 'content',
    path: 'url'
  }}
  suggestions={[
    'How to use the Chat Box?',
    'What is the Chat Box component?',
    'How to integrate the Chat Box in my website?'
  ]}
/>

----------------------------------------

TITLE: Configuring BM25 Parameters in Orama Search
DESCRIPTION: This snippet demonstrates how to customize the BM25 relevance parameters when searching in Orama. It includes configuration for term frequency saturation, length normalization, and frequency normalization lower bound parameters with their recommended values.

LANGUAGE: javascript
CODE:
const searchResult = search(movieDB, {
  term: "Chris",
  properties: ["director"],
  relevance: {
    // Term frequency saturation parameter.
    // Default value: 1.2
    // Recommended value: between 1.2 and 2
    k: 1.2,

    // Length normalization parameter.
    // Default value: 0.75
    // Recommended value: > 0.75
    b: 0.75,

    // Frequency normalization lower bound.
    // Default value: 0.5
    // Recommended value: between 0.5 and 1
    d: 0.5,
  },
});

----------------------------------------

TITLE: Searching with Facets Configuration in Orama
DESCRIPTION: Shows how to perform a search with facets in Orama by specifying facet configurations for different property types. Includes limit and ordering for string facets, range definitions for number facets, and boolean value handling.

LANGUAGE: javascript
CODE:
const results = search(db, {
  term: "Movie about cars and racing",
  properties: ["description"],
  facets: {
    "categories.primary": {
      limit: 3,
      order: "DESC",
    },
    "categories.secondary": {
      limit: 2,
      order: "DESC",
    },
    rating: {
      ranges: [
        { from: 0, to: 3 },
        { from: 3, to: 7 },
        { from: 7, to: 10 },
      ],
    },
    isFavorite: {
      true: true,
      false: true,
    },
  },
});

----------------------------------------

TITLE: Performing Vector Search with Kotlin in Orama Cloud
DESCRIPTION: This code demonstrates vector search using the Orama Kotlin client. It defines a serializable document class, initializes a client with endpoint and API key, and builds search parameters with vector mode and price condition.

LANGUAGE: kotlin
CODE:
import com.orama.client.OramaClient
import com.orama.model.search.*
import kotlinx.serialization.Serializable

@Serializable
data class MyDoc (
    val title: String,
    val category: String,
    val path: String,
    val content: String,
    val section: String
)

val client = OramaClient(
    endpoint = "",
    apiKey = ""
)

val searchParams = SearchParams.builder(
      term = "Super Mario videogame",
      mode = Mode.VECTOR
  )
  .where(listOf(
      Condition("price", ConditionType.LessThan(19.99))
  ))
  .build()

val results = client.search(searchParams, MyDoc.serializer())

----------------------------------------

TITLE: Creating an Orama Database with Schema Definition
DESCRIPTION: Demonstrates how to create an Orama database with a schema that includes various data types that can be used for faceting, including string, number, boolean, and nested object properties.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";

const db = create({
  schema: {
    title: "string",
    description: "string",
    categories: {
      primary: "string",
      secondary: "string",
    },
    rating: "number",
    isFavorite: "boolean",
  },
});

----------------------------------------

TITLE: Advanced Orama Cloud Plugin Configuration with Document Transformation
DESCRIPTION: Extended configuration for the Orama Cloud plugin that includes a custom document transformer function. This allows for flattening nested collections and customizing the document structure before indexing.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  "orama-cloud": {
    config: {
      privateApiKey: env("ORAMA_PRIVATE_API_KEY"),
      collectionSettings: {
        "<your_collection_index_id>": {
          /* Mandatory */
          /* Define the schema of your document */
          schema: {
            id: { type: "integer" },
            owner: { type: "string" },
            cars: {
              brands: { type: "string" },
              models: { type: "string" },
            }
          },
          /* Mandatory */
          /* Define the transformer function */
          transformer: entry => {
            return {
              ...entry,
              owner: "Overriding owner",
              cars: {
                source: entry.cars,
                ...entry.cars.reduce((acc, curr) => {
                  acc.brands.push(curr.brand);
                  acc.models.push(curr.model);
                  return acc;
                }, {
                  brands: [],
                  models: []
                })
              }
            }
          }
        }
      }
    }
  }
})

----------------------------------------

TITLE: Simplified Vector Search with Orama Plugins
DESCRIPTION: A simplified vector search example using Orama plugins (secure proxy or embeddings). This approach allows text to be automatically converted to vectors without manually providing vector configurations.

LANGUAGE: javascript
CODE:
const results = search(db, {
  mode: "vector",
  term: "Videogame for little kids with a passion about ice cream",
});

----------------------------------------

TITLE: Using Array Filters in Orama Search
DESCRIPTION: This snippet demonstrates how to create a database with array properties (string[], number[], boolean[]) and filter on them. It shows how to query for documents with specific array values using different operators.

LANGUAGE: javascript
CODE:
const db = create({
  schema: {
    title: "string",
    tags: "string[]",
    editions: "number[]",
    limited: "boolean[]",
  }
});

insertMultiple(db, [
  {title: "a", tags: ["foo", "bar"], editions: [1990, 2024], limited: [false, false]},
  {title: "b", tags: ["foo"], editions: [1942, 2024], limited: [false, true]},
  {title: "c", tags: ["bar"], editions: [2020], limited: [false]},
])

// Books with tag foo
search(db, {where: {tags: "foo"}}); // returns  a, b

// Books tagged either as foo or bar
search(db, {where: {tags: ["foo", "bar"]}}); // returns a, b, c

// Books with a 2024 edition
search(db, {where: {editions: {eq: 2024}}}); // returns a, b

// Books with a limited edition
search(db, {where: {limited: true}}); // returns b

----------------------------------------

TITLE: Complete Orama Schema Definition for Movie Data
DESCRIPTION: Defines a complete schema for movie data in Orama. The schema maps each property to its corresponding type, including string, number, boolean, and array types that will be used for search optimization.

LANGUAGE: json
CODE:
{
    "title": "string",
    "director": "string",
    "description": "string",
    "rating": "number",
    "year": "number",
    "isFavorite": "boolean",
    "genres": "string[]"
}

----------------------------------------

TITLE: Implementing Faceted Search in JavaScript
DESCRIPTION: JavaScript implementation of faceted search with Orama client, demonstrating how to configure facets for string, number, and boolean properties with specific limits, orders, and ranges.

LANGUAGE: javascript
CODE:
const results = await client.search({
  term: "Movie about cars and racing",
  mode: "hybrid",
  properties: ["description"],
  facets: {
    "categories.primary": {
      limit: 3,
      order: "DESC",
    },
    "categories.secondary": {
      limit: 2,
      order: "DESC",
    },
    rating: {
      ranges: [
        { from: 0, to: 3 },
        { from: 3, to: 7 },
        { from: 7, to: 10 },
      ],
    },
    isFavorite: {
      true: true,
      false: true,
    },
  },
});

----------------------------------------

TITLE: Performing Vector Search with Orama
DESCRIPTION: Shows how to perform vector search operations by creating a database with vector fields and searching based on vector similarity. This example demonstrates Orama's vector search capabilities.

LANGUAGE: javascript
CODE:
import { create, insertMultiple, search } from '@orama/orama'

const db = create({
  schema: {
    title: 'string',
    embedding: 'vector[5]'', // we are using a 5-dimensional vector.
  },
});

insertMultiple(db, [
  { title: 'The Prestige', embedding: [0.938293, 0.284951, 0.348264, 0.948276, 0.56472] },
  { title: 'Barbie', embedding: [0.192839, 0.028471, 0.284738, 0.937463, 0.092827] },
  { title: 'Oppenheimer', embedding: [0.827391, 0.927381, 0.001982, 0.983821, 0.294841] },
])

const results = search(db, {
  // Search mode. Can be 'vector', 'hybrid', or 'fulltext'
  mode: 'vector',
  vector: {
    // The vector (text embedding) to use for search
    value: [0.938292, 0.284961, 0.248264, 0.748276, 0.26472],
    // The schema property where Orama should compare embeddings
    property: 'embedding',
  },
  // Minimum similarity to determine a match. Defaults to `0.8`
  similarity: 0.85,
  // Defaults to `false`. Setting to 'true' will return the embeddings in the response (which can be very large).
  includeVectors: true,
})

----------------------------------------

TITLE: Initializing OramaClient with API Credentials
DESCRIPTION: Demonstrates how to create a new OramaClient instance by providing the endpoint URL and public API key. These credentials can be found in the Orama Dashboard.

LANGUAGE: typescript
CODE:
import { OramaClient } from "@oramacloud/client";

const client = new OramaClient({
  endpoint: "YOUR_ENDPOINT_URL",
  api_key: "YOUR_PUBLIC_API_KEY",
});

----------------------------------------

TITLE: Performing Hybrid Search with Orama in Swift
DESCRIPTION: This code shows how to use the Orama Swift SDK to perform hybrid search. It defines a document structure, initializes a client, and builds search parameters with a text term and hybrid mode.

LANGUAGE: swift
CODE:
import OramaCloudClient

struct MyDoc: Encodable & Decodable {
  let title: String
  let description: String
}

let clientParams = OramaClientParams(endpoint: "", apiKey: "")
let orama = OramaClient(params: clientParams)

let searchParams = ClientSearchParams.builder(
    term: "Super Mario videogame",
    mode: .hybrid
  )
  .limit(10) // optional
  .offset(0) // optional
  .returning(["title", "description"]) // optional
  .build()

let searchResults: SearchResults<MyDoc> = try await orama.search(query: searchParams)

----------------------------------------

TITLE: Customizing Orama's Default Tokenizer
DESCRIPTION: Demonstrates how to customize the default tokenizer by importing it from @orama/orama/components and configuring it with specific options using the createTokenizer method.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";
import { tokenizer as defaultTokenizer } from "@orama/orama/components";

const movieDB = create({
  schema: {
    title: "string",
    director: "string",
  },
  components: {
    tokenizer: await defaultTokenizer.createTokenizer({
      language: "english",
      stemming: false,
    }),
  },
});

----------------------------------------

TITLE: Implementing QPS or PT15 Algorithm in Orama
DESCRIPTION: This code demonstrates how to change Orama's default search algorithm (BM25) by installing either the QPS or PT15 plugin. The snippet shows creating an Orama instance with a schema and applying a plugin to modify the search algorithm behavior.

LANGUAGE: javascript
CODE:
import { create } from '@orama/orama'
import { pluginQPS } from '@orama/plugin-qps'
import { pluginPT15 } from '@orama/plugin-pt15'

const db = create({
  schema: {
    title: 'string',
    description: 'string',
    rating: 'number',
  },
  plugins: [
    pluginQPS() // or pluginPT15()
  ],
})

----------------------------------------

TITLE: Initializing Answer Session with JavaScript SDK
DESCRIPTION: Creates an answer session with the Orama JavaScript SDK, including optional parameters for context, inference type, and event handlers.

LANGUAGE: typescript
CODE:
import { OramaClient } from "@oramacloud/client";

const orama = new OramaClient({
  endpoint: "YOUR_ENDPOINT_URL",
  api_key: "YOUR_PUBLIC_API_KEY",
});

const answerSession = orama.createAnswerSession({
  // optional
  userContext: "The user is a very skilled programmer but has never used Orama before.",
  // optional
  inferenceType: "documentation",
  // optional
  initialMessages: [],
  // optional
  events: {
    onMessageChange: (messages) => console.log({ messages }),
    onMessageLoading: (loading) => console.log({ loading }),
    onAnswerAborted: (aborted) => console.log({ aborted }),
    onSourceChange: (sources) => console.log({ sources }),
    onQueryTranslated: (query) => console.log({ query }),
    onStateChange: (state) => console.log({ state }),
    onNewInteractionStarted: (interactionId) => console.log({ interactionId }),
  },
});

await answerSession.ask({
  term: "How do I get started with Orama?",
});

----------------------------------------

TITLE: Setting up OramaCloud Provider in React Application
DESCRIPTION: Demonstrates how to set up the OramaCloud Provider component at the root of your React application. The Provider requires an endpoint and API key that can be found in the Orama Dashboard.

LANGUAGE: jsx
CODE:
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import { OramaCloud } from "@oramacloud/react-client";

ReactDOM.createRoot(document.getElementById("root")).render(
  <OramaCloud endpoint="<your-endpoint>" apiKey="<your-apikey>">
    <App />
  </OramaCloud>
);

----------------------------------------

TITLE: Configuring Orama Plugin in Astro Configuration
DESCRIPTION: This snippet demonstrates how to set up the Orama plugin in the Astro configuration file. It shows how to define search databases with custom configurations including path matching, language selection, and content selectors.

LANGUAGE: typescript
CODE:
// In `astro.config.mjs`
import orama from '@orama/plugin-astro'

// https://astro.build/config
export default defineConfig({
  integrations: [
    orama({
      // We can generate more than one DB, with different configurations
      mydb: {
        // Required. Only pages matching this path regex will be indexed
        pathMatcher: /blog\/[0-9]{4}\/[0-9]{2}\/[0-9]{2}\/.+$/,

        // Optional. 'english' by default
        language: 'spanish',

        // Optional. ['body'] by default. Use it to constraint what is used to
        // index a page.
        contentSelectors: ['h1', 'main']
      }
    })
  ]
})

----------------------------------------

TITLE: Implementing Custom Sort Algorithm in Orama
DESCRIPTION: Demonstrates how to specify a custom sort algorithm. The function receives document IDs, scores, and content, and implements custom sorting logic (in this example, by the 'year' property).

LANGUAGE: javascript
CODE:
const db = create({
  schema: {
    title: "string",
    year: "number",
    inPromotion: "boolean",
    meta: {
      tag: "string",
      rating: "number",
      favorite: "boolean",
    },
  },
  sortBy: (a, b) => {
    // Implement the custom sort algorithm
    return a[2].year - b[2].year;
  },
});

----------------------------------------

TITLE: Using Orama Cloud Swift SDK for Search Operations
DESCRIPTION: Example of using the Swift SDK to create a client and perform a search with customization options. Shows how to define a document type and build search parameters.

LANGUAGE: swift
CODE:
import OramaCloudClient

struct MyDoc: Codable {
  let title: String
  let description: String
}

let clientParams = OramaClientParams(endpoint: "<Your Orama Cloud Endpoint>", apiKey: "<Your Orama Cloud API Key>")
let client = OramaClient(params: clientParams)

let searchParams = ClientSearchParams.builder(
    term: "red shoes",
    mode: .fulltext // optional, default is .fulltext but can also be .vector or .hybrid
  )
  .limit(10) // optional
  .offset(0) // optional
  .returning(["title", "description"]) // optional
  .build()

let searchResults: SearchResults<MyDoc> = try await client.search(query: searchParams)

----------------------------------------

TITLE: Initializing and Using Match Highlight Plugin with Orama
DESCRIPTION: This snippet demonstrates how to create an Orama database with the match highlight plugin, insert a document, and search with highlighting. The plugin adds position data to search results for text highlighting.

LANGUAGE: typescript
CODE:
import { create, insert } from "@orama/orama";
import {
  afterInsert as highlightAfterInsert,
  searchWithHighlight,
} from "@orama/plugin-match-highlight";

// Create a new Orama instance
const db = create({
  schema: {
    text: "string",
  },
  plugins: [
    // Register the hook
    {
      name: "highlight",
      afterInsert: highlightAfterInsert,
    },
  ],
});

// Insert a document
insert(db, { text: "hello world" });

// Use the plugin's searchWithHighlight function to query the database
const results = searchWithHighlight(db, { term: "hello" });

----------------------------------------

TITLE: Boosting a Single Field in Orama Search
DESCRIPTION: This example demonstrates how to boost the importance of the title field by a factor of 2 in search results. This means matches in the title field will be considered twice as important as matches in other fields.

LANGUAGE: javascript
CODE:
const searchResult = search(movieDB, {
  term: "Harry",
  properties: "*",
  boost: {
    title: 2,
  },
});

----------------------------------------

TITLE: Performing Vector Search with Auto-generated Embeddings
DESCRIPTION: Example of conducting a vector search using Orama with the embeddings plugin. The plugin automatically generates embeddings for the search term and performs vector similarity search against the stored embeddings.

LANGUAGE: js
CODE:
await search(db, {
  term: 'Headphones for 12th grade students',
  mode: 'vector'
})

----------------------------------------

TITLE: Using Partial Threshold (0.6) in Orama Search
DESCRIPTION: Setting a threshold between 0 and 1 returns documents with all search terms plus a percentage of partially matching documents. This returns all exact matches plus 60% of documents with either 'slim' or 'fit'.

LANGUAGE: javascript
CODE:
const results = search(db, {
  term: "slim fit",
  threshold: 0.6,
});

----------------------------------------

TITLE: Implementing Basic Sorting in Orama Search
DESCRIPTION: Demonstrates how to create an Orama database with a schema and perform a search with basic sorting. The example shows sorting by a top-level property like 'title', 'year', or 'inPromotion'.

LANGUAGE: javascript
CODE:
const db = create({
  schema: {
    title: "string",
    year: "number",
    inPromotion: "boolean",
    meta: {
      tag: "string",
      rating: "number",
      favorite: "boolean",
    },
  },
});
const results = search(db, {
  term: "prestige",
  sortBy: {
    property: "title", // or 'year', 'inPromotion'
  },
});

----------------------------------------

TITLE: Populating Orama Database from HTML Documents Using Parsedoc Plugin
DESCRIPTION: Demonstrates how to create an Orama database with the default HTML schema and populate it from HTML files using the populateFromGlob function from @orama/plugin-parsedoc.

LANGUAGE: javascript
CODE:
import { create, insert } from "@orama/orama";
import { populateFromGlob, defaultHtmlSchema } from "@orama/plugin-parsedoc";

const db = create({
  schema: defaultHtmlSchema,
});

await populateFromGlob(db, "docs/**/*.html");

----------------------------------------

TITLE: Configuring Orama Astro Plugin in astro.config.mjs
DESCRIPTION: Configuration example for the Orama Astro plugin that sets up database generation with specific path matching, language, and content selectors. The plugin is added to the Astro integrations array with customized settings for database creation.

LANGUAGE: js
CODE:
import orama from "@orama/plugin-astro";

// https://astro.build/config
export default defineConfig({
  integrations: [
    orama({
      // We can generate more than one DB, with different configurations
      mydb: {
        // Required. Only pages matching this path regex will be indexed
        pathMatcher: /blog\/[0-9]{4}\/[0-9]{2}\/[0-9]{2}\/.+$/,

        // Optional. 'english' by default
        language: "spanish",

        // Optional. ['body'] by default. Use it to constraint what is used to
        // index a page.
        contentSelectors: ["h1", "main"],
      },
    }),
  ],
});

----------------------------------------

TITLE: Installing Orama Plugin for Docusaurus v2 with npm
DESCRIPTION: Command to install the Orama plugin for Docusaurus v2 using npm package manager.

LANGUAGE: bash
CODE:
npm install --save @orama/plugin-docusaurus

----------------------------------------

TITLE: Loading and Using Orama Database in Client-Side Astro
DESCRIPTION: HTML script example demonstrating how to load an Orama database on the client side and perform searches. It imports the necessary functions from the plugin's client module, loads the database asynchronously, and executes a search operation.

LANGUAGE: html
CODE:
<head>
  <!-- Other stuff -->
  <script>
    // Astro will do the job of bundling everything for you
    import { getOramaDB, search } from "@orama/plugin-astro/client"

    // We load the DB that we generated at build time, this is an asynchronous
    // operation, so we must either await, or rely on `.then` calls.
    const db = await getOramaDB('mydb')

    // Now we can search inside our DB. Of course, feel free to use it in more
    // interesting ways.
    console.log('Search Results')
    console.log(search(db, { term: 'mySearchTerm' }))
  </script>
</head>

----------------------------------------

TITLE: Orama Faceted Search Response Structure
DESCRIPTION: Illustrates the structure of a search response that includes facets. The response contains categories with count and values, numeric ranges with their distribution, and boolean facets showing the distribution of true/false values.

LANGUAGE: javascript
CODE:
{
  elapsed: ...,
  count: ...,
  hits: { ... },
  facets: {
    'categories.first': {
      count: 14,
      values: {
        'Action': 4,
        'Adventure': 3,
        'Comedy': 2,
      }
    },
    'categories.second': {
      count: 14,
      values: {
        'Cars': 4,
        'Racing': 3,
      }
    },
    rating: {
      count: 3,
      values: {
        '0-3': 5,
        '3-7': 15,
        '7-10': 80,
      }
    },
    isFavorite: {
      count: 2,
      values: {
        'true': 5,
        'false': 95,
      }
    },
  }
}

----------------------------------------

TITLE: Creating and Populating an Orama Database
DESCRIPTION: Creates an Orama database with a movie schema and populates it with three sample movies. This demonstrates the database creation, schema definition, and document insertion process before removal operations.

LANGUAGE: javascript
CODE:
import { create, insert, remove, search } from "@orama/orama";

const movieDB = create({
  schema: {
    title: "string",
    director: "string",
    plot: "string",
    year: "number",
    isFavorite: "boolean",
  },
});

const thePrestigeId = insert(movieDB, {
  title: "The prestige",
  director: "Christopher Nolan",
  plot: "Two friends and fellow magicians become bitter enemies after a sudden tragedy. As they devote themselves to this rivalry, they make sacrifices that bring them fame but with terrible consequences.",
  year: 2006,
  isFavorite: true,
});

const bigFishId = insert(movieDB, {
  title: "Big Fish",
  director: "Tim Burton",
  plot: "Will Bloom returns home to care for his dying father, who had a penchant for telling unbelievable stories. After he passes away, Will tries to find out if his tales were really true.",
  year: 2004,
  isFavorite: true,
});

const harryPotterId = insert(movieDB, {
  title: "Harry Potter and the Philosopher's Stone",
  director: "Chris Columbus",
  plot: "Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.",
  year: 2001,
  isFavorite: false,
});

----------------------------------------

TITLE: Performing Hybrid Search with Orama in PHP
DESCRIPTION: This snippet shows how to use the Orama PHP SDK to perform hybrid search. It initializes a client with credentials and builds a query with a text term, hybrid mode, and filtering conditions.

LANGUAGE: php
CODE:
use OramaCloud\Client;
use OramaCloud\Client\Query;
use OramaCloud\Client\QueryParams\WhereOperator;
use OramaCloud\Client\QueryParams\SortByOrder;

$client = new Client([
  'api_key' => '<Your Orama Cloud API Key>',
  'endpoint' => '<Your Orama Cloud Endpoint>'
]);

$query = (new Query())
  ->term('Super Mario videogame')
  ->mode('hybrid')
  ->where('price', WhereOperator::LT, 19.99);

$results = $client->search($query);

----------------------------------------

TITLE: Implementing and Using a Logger Plugin with Orama
DESCRIPTION: Demonstrates how to define a logger plugin and use it when creating an Orama instance. The example shows the complete workflow from defining the plugin to using it during search operations.

LANGUAGE: javascript
CODE:
import { create, insert, search } from "@orama/orama";

function loggerPlugin() {
  return {
    name: "logger",
    beforeSearch: (orama, query) => {
      console.log(
        `About to search for ${query.term} on Orama instance ${orama.id}`
      );
    },
  };
}

const orama = create({
  id: "my-instance", // Remember, IDs are automatically generated if not provided
  schema: {
    name: "string",
  },
  plugins: [loggerPlugin()],
});

insert(orama, { name: "John" });
search(orama, { term: "John" });

// Console logs: "About to search for john on Orama instance my-instance"

----------------------------------------

TITLE: Using Orama Cloud JavaScript SDK for Search Operations
DESCRIPTION: Example of initializing the JavaScript client and performing a search with filtering. Demonstrates how to set up the client connection and execute a search query with filtering capabilities.

LANGUAGE: typescript
CODE:
import { OramaClient } from "@oramacloud/client";

const client = new OramaClient({
  endpoint: '<Your Orama Cloud Endpoint>',
  api_key: '<Your Orama Cloud API Key>',
});

const results = await client.search({
  term: "red shoes",
  mode: "fulltext", // optional, default is "fulltext" but can also be "vector" or "hybrid"
  where: {
    price: {
      gt: 99.99,
    },
  },
});

----------------------------------------

TITLE: Implementing the OramaSearchBox Component in React
DESCRIPTION: Basic example of using the Search Box component in a React application. The component is configured with a placeholder, index endpoint details, and result mapping to customize how search results are displayed.

LANGUAGE: jsx
CODE:
import { OramaSearchBox } from '@orama/react-components';

<OramaSearchBox
  placeholder="Search something..."
  index={{
    endpoint: 'https://your-index-endpoint-url',
    api_key: 'YOUR_PUBLIC_API_KEY'
  }}
  resultMap={{
    title: 'name',
    description: 'content',
    section: 'category',
  }}
/>

----------------------------------------

TITLE: Performing Hybrid Search with Orama in Python
DESCRIPTION: This placeholder snippet indicates that Python support for Orama hybrid search is coming soon.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Importing search function from Orama
DESCRIPTION: Basic import of the search function from the Orama package, which is used for vector search operations.

LANGUAGE: javascript
CODE:
import { search } from "@orama/orama";

----------------------------------------

TITLE: Enabling Custom Stop-words in Orama
DESCRIPTION: This snippet demonstrates how to enable custom stop-words removal when creating a new Orama database instance. It uses the stopWords property in the tokenizer component configuration to specify a custom list of words to filter out during tokenization.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";

const db = create({
  schema: {
    author: "string",
    quote: "string",
  },
  components: {
    tokenizer: {
      stopWords: ["foo", "bar"], // Enable custom stop-words
    },
  },
});

----------------------------------------

TITLE: Configuring Orama with Embeddings Plugin
DESCRIPTION: Example of setting up Orama with the embeddings plugin. It demonstrates importing necessary modules, configuring the plugin with embedding generation options, and creating a database schema that includes a vector field for storing embeddings.

LANGUAGE: js
CODE:
import { create } from '@orama/orama'
import { pluginEmbeddings } from '@orama/plugin-embeddings'
import '@tensorflow/tfjs-node' // Or any other appropriate TensorflowJS backend

const plugin = await pluginEmbeddings({
  embeddings: {
    defaultProperty: 'embeddings', // Property used to store generated embeddings
    onInsert: {
      generate: true, // Generate embeddings at insert-time
      properties: ['description'], // properties to use for generating embeddings at insert time
      verbose: true,
    }
  }
})

const db = await create({
  schema: {
    description: 'string',
    embeddings: 'vector[512]' // Orama generates 512-dimensions vectors
  },
  plugins: [plugin]
})

----------------------------------------

TITLE: Performing Hybrid Search with Orama in Python
DESCRIPTION: This placeholder snippet indicates that Python support for Orama hybrid search is coming soon.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Performing Full-Text Search with useSearch Hook
DESCRIPTION: Shows how to use the useSearch hook to perform a full-text search query against an Orama Cloud index. The example demonstrates how to access and display the search results.

LANGUAGE: tsx
CODE:
import { useSearch } from "@oramacloud/react-client";

function Search() {
  const { results, error } = useSearch({
    term: "red leather shoes",
    limit: 5,
  });

  return (
    <>
      {results.hits.map((hit) => (
        <div key={hit.id}>
          <pre> {JSON.stringify(hit.document, null, 2)} </pre>
        </div>
      ))}
    </>
  );
}

----------------------------------------

TITLE: Implementing Custom Reducer for Advanced Aggregation
DESCRIPTION: Demonstrates how to use a custom reducer function to perform advanced aggregation on grouped results, collecting colors and ranks while maintaining other document properties.

LANGUAGE: typescript
CODE:
// The document interface
interface Doc extends Document {
  type: string;
  design: string;
  rank: number;
  color: string;
  isPromoted: boolean;
}
// The aggregation interface
interface AggregationValue {
  type: string;
  design: string;
  colors: string[];
  ranks: number[];
  isPromoted: boolean;
}

const results = search(db, {
  term: "red t-shirt",
  groupBy: {
    properties: ["type", "design"], // group on both properties
    reduce: {
      // the accumulator function
      reducer: (
        values: ScalarSearchableValue[],
        acc: AggregationValue,
        item: Result
      ) => {
        const doc = item.document as Doc;
        acc.type ||= doc.type;
        acc.design ||= doc.design;
        acc.isPromoted ||= doc.isPromoted;
        acc.colors.push(doc.color);
        acc.ranks.push(doc.rank);
        return acc;
      },
      // The initial value: this is called for every group
      getInitialValue: (): AggregationValue => ({
        type: "",
        design: "",
        colors: [],
        ranks: [],
        isPromoted: false,
      }),
    },
  },
  sortBy: {
    property: "rank",
    order: "DESC",
  },
});

----------------------------------------

TITLE: Setting System Prompts with OramaClient SDK in JavaScript
DESCRIPTION: This code demonstrates how to initialize the OramaClient and create an answer session with specified system prompts. The system prompts can be provided as an array of IDs, allowing Orama to randomly choose one or use a specific prompt.

LANGUAGE: javascript
CODE:
import { OramaClient } from '@oramacloud/client'

const client = new OramaClient({
  endpoint: 'your-endpoint',
  api_key: 'your-api-key'
})

const session = client
  .createAnswerSession({
    events: { ... },
    // Orama will randomly choose one of the system prompts.
    // Set just one prompt if you want to force Orama to use it.
    systemPrompts: [
      'sp_italian-prompt-chc4o0',
      'sp_italian-prompt-with-greetings-2bx7d3'
    ]
  })

await session.ask({
  term: 'what is Orama?'
})

----------------------------------------

TITLE: Transformed Document Example
DESCRIPTION: The resulting JSON structure after applying the transformer function to the original Strapi document. This shows how nested car objects are flattened into arrays of brands and models for better searchability.

LANGUAGE: json
CODE:
{
  "id": 1,
  "owner": "Overriding owner",
  "cars": {
    "brands": ["Toyota", "Ford"],
    "models": ["Corolla", "Focus"]
  }
}

----------------------------------------

TITLE: Implementing vector search with useSearch composable in Vue
DESCRIPTION: Shows how to perform vector search using the useSearch composable with additional parameters like mode, similarity threshold, and result limit.

LANGUAGE: vue
CODE:
<script setup>
import { client } from "./orama";
import { useSearch } from "@oramacloud/vue-client";

const { results } = useSearch({
  client,
  term: "Super Mario videogame",
  mode: "vector",
  similarity: 0.8, // Minimum similarity, between 0 and 1. Default is 0.8 (80% similar).
  limit: 5, // How many results to return. Default is 10.
});
</script>

<template>
  <div v-for="result in results?.hits">
    <pre>{{ result }}</pre>
  </div>
</template>

----------------------------------------

TITLE: Using Default Threshold (1) in Orama Search
DESCRIPTION: This snippet shows the default threshold behavior (1), which returns all documents containing any of the search terms. This returns all documents with either 'slim' or 'fit'.

LANGUAGE: javascript
CODE:
const results = search(db, {
  term: "slim fit",
});

----------------------------------------

TITLE: Implementing QPS Plugin with Orama
DESCRIPTION: This snippet demonstrates how to install and configure the QPS plugin in an Orama database. The plugin replaces the default BM25 scoring algorithm with Quantum Proximity Scoring, which evaluates token proximity to improve search relevance while reducing index size.

LANGUAGE: javascript
CODE:
import { create } from '@orama/orama'
import { pluginQPS } from '@orama/plugin-qps'

const db = create({
  schema: {
    title: 'string',
    description: 'string',
    rating: 'number',
  },
  plugins: [pluginQPS()],
})

----------------------------------------

TITLE: Complex Schema Definition for Orama Cloud Remote JSON Integration
DESCRIPTION: Optional complex schema definition that can be used to specify multiple searchable properties when configuring an Orama Cloud index with a Remote JSON data source. This schema defines various data types for different product properties.

LANGUAGE: json
CODE:
{
  "title": "string",
  "description": "string",
  "category": "string",
  "price": "number",
  "rating": "number",
  "stock": "number",
  "tags": "string[]",
  "brand": "string",
  "sku": "string",
  "meta": {
    "barcode": "string",
  }
}

----------------------------------------

TITLE: Using Preflight Search in Orama
DESCRIPTION: This example demonstrates how to use the preflight search feature in Orama by setting the preflight parameter to true. The code creates a database with headphone entries and performs a search that only returns the count of matching items without populating the hits array.

LANGUAGE: javascript
CODE:
import { create, insert, search } from "@orama/orama";

const db = create({
  schema: {
    title: "string",
  },
});

insert(db, { title: "Red headphones" });
insert(db, { title: "Green headphones" });
insert(db, { title: "Blue headphones" });
insert(db, { title: "Yellow headphones" });

const results = search(db, {
  term: "headphones",
  preflight: true,
});

console.log(results);

// {
//   elapsed: {
//     raw: 181208,
//     formatted: '181μs'
//   }
//   hits: []
//   count: 4
// }

----------------------------------------

TITLE: Using Orama Search in Astro Client-Side Scripts
DESCRIPTION: This snippet shows how to use the generated Orama search databases in client-side Astro pages. It demonstrates importing the necessary functions, loading the database asynchronously, and performing a basic search operation.

LANGUAGE: html
CODE:
<head>
  <!-- Other stuff -->
  <script>
    // Astro will do the job of bundling everything for you
    import { getOramaDB, search } from "@orama/plugin-astro/client"

    // We load the DB that we generated at build time, this is an asynchronous
    // operation, so we must either await, or rely on `.then` calls.
    const db = await getOramaDB('mydb')

    // Now we can search inside our DB. Of course, feel free to use it in more
    // interesting ways.
    console.log('Search Results')
    console.log(search(db, { term: 'mySearchTerm' }))
  </script>
</head>

----------------------------------------

TITLE: Checking Pending Operations with Kotlin SDK
DESCRIPTION: This code snippet demonstrates how to check for pending operations in an Orama Cloud index using the Kotlin SDK. It defines a document class, initializes a CloudManager with an API key, and uses coroutines to call the hasPendingOperations method.

LANGUAGE: swift
CODE:
import com.orama.client.CloudManager
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.Serializable

@Serializable
data class OramaDoc (
  let id: String
  let name: String
  let age: Int
)

val cloudManager = CloudManager(apiKey = "YOUR_API_KEY")
val indexManager = cloudManager.index<OramaDoc>(indexId)

runBlocking {
  val hasPendingOperations = index.hasPendingOperations()
  println(hasPendingOperations) // true or false
}

----------------------------------------

TITLE: Enum Facet Result Example
DESCRIPTION: Example JSON structure showing how enum-type facets are returned in search results, with the count and distribution of enum values.

LANGUAGE: json
CODE:
{
  "count": 9,           // Total number of values
  "values": {
    "Action": 4,        // Number of documents that have this value
    "Adventure": 3,     // Number of documents that have this value
    "Comedy": 2,        // Number of documents that have this value
  }
}

----------------------------------------

TITLE: High Precision Geosearch Using Vincenty Formula in Orama
DESCRIPTION: This example shows how to enable high precision geosearch by setting the 'highPrecision' flag to true. This causes Orama to use the Vincenty Formula instead of the default Haversine Formula for more accurate distance calculations over long distances.

LANGUAGE: javascript
CODE:
import { create, insert, search } from '@orama/orama'

const db = create({ ... })

insert(db, { ... })
insert(db, { ... })
insert(db, { ... })

const searchResult = search(db, {
  term: 'Duomo',
  where: {
    location: {
      polygon: {
        coordinates: [
          { lat: 45.46472, lon: 9.1886  },
          { lat: 45.46352, lon: 9.19177 },
          { lat: 45.46278, lon: 9.19176 },
          { lat: 45.4628,  lon: 9.18857 },
          { lat: 45.46472, lon: 9.1886  },
        ],
        highPrecision: true
      }
    }
  }
})

----------------------------------------

TITLE: Performing Radius-Based Geosearch in Orama
DESCRIPTION: This example shows how to filter search results by distance from a given location using the radius filter. The query searches for documents containing 'Duomo' that are within 1000 meters of the specified coordinates.

LANGUAGE: javascript
CODE:
import { create, insert, search } from '@orama/orama'

const db = create({ ... })

insert(db, { ... })
insert(db, { ... })
insert(db, { ... })

const searchResult = search(db, {
  term: 'Duomo',
  where: {
    location: {           // The property we want to filter by
      radius: {           // The filter we want to apply (in that case: "radius")
        coordinates: {    // The central coordinate
          lat: 45.4648,
          lon: 9.18998
        },
        unit: 'm',        // The unit of measurement. The default is "m" (meters)
        value: 1000,      // The radius length. In that case, 1km
        inside: true      // Whether we want to return the documents inside or outside the radius. The default is "true"
      }
    }
  }
})

----------------------------------------

TITLE: Creating an Async Plugin Hook in JavaScript
DESCRIPTION: Example of creating a plugin with an asynchronous hook. Shows the proper syntax for creating async hooks in Orama plugins, which requires using the async keyword modifier.

LANGUAGE: javascript
CODE:
async function afterInsertPluginExample() {
  return {
    name: "after-insert-plugin",
    afterInsert: async (orama, id, document) => {
      console.log("Orama instance: ", orama);
      console.log("Document id: ", id);
      console.log("Document inserted: ", document);
    },
  };
}

----------------------------------------

TITLE: Specifying Custom Vector Property for Search
DESCRIPTION: This example demonstrates how to override the default vector property when performing a vector search. This is useful when working with complex schemas that have multiple vector properties for different embedding types.

LANGUAGE: javascript
CODE:
const resultsVector = await search(db, {
  mode: 'vector',
  term: 'Videogame for little kids with a passion about ice cream',
  vector: {
    property: 'myAlternativeProperty'
  }
})

----------------------------------------

TITLE: Property-Specific Search with Typo Tolerance in Orama
DESCRIPTION: This example demonstrates searching with a specific property filter (director) and typo tolerance of 1, which allows for slight misspellings in the search term.

LANGUAGE: javascript
CODE:
const searchResult = search(movieDB, {
  term: "Cris",
  properties: ["director"],
  tolerance: 1,
});

----------------------------------------

TITLE: Filtering Search Results by Bounding Polygon in Orama
DESCRIPTION: This snippet demonstrates how to filter search results using a polygon boundary. The query returns documents containing 'Duomo' that are located within the defined polygon coordinates, which are specified as an array of latitude/longitude pairs.

LANGUAGE: javascript
CODE:
import { create, insert, search } from '@orama/orama'

const db = create({ ... })

insert(db, { ... })
insert(db, { ... })
insert(db, { ... })

const searchResult = search(db, {
  term: 'Duomo',
  where: {
    location: {            // The property we want to filter by
      polygon: {           // The filter we want to apply (in that case: "polygon")
        coordinates: [     // The polygon coordinate
          { lat: 45.46472, lon: 9.1886  },
          { lat: 45.46352, lon: 9.19177 },
          { lat: 45.46278, lon: 9.19176 },
          { lat: 45.4628,  lon: 9.18857 },
          { lat: 45.46472, lon: 9.1886  },
        ],
        inside: true      // Whether we want to return the documents inside or outside the polygon. The default is "true"
      }
    }
  }
})

----------------------------------------

TITLE: Filtering by Radius in JavaScript with Orama
DESCRIPTION: This snippet demonstrates how to filter search results based on a radius around a geographic point. It uses the 'radius' property with coordinates, unit of measurement, and radius value to find documents within a specified distance from a central point.

LANGUAGE: javascript
CODE:
const searchResult = await client.search({
  term: 'Duomo',
  where: {
    location: {           // The property we want to filter by
      radius: {           // The filter we want to apply (in that case: "radius")
        coordinates: {    // The central coordinate
          lat: 45.4648,
          lon: 9.18998
        },
        unit: 'm',        // The unit of measurement. The default is "m" (meters)
        value: 1000,      // The radius length. In that case, 1km
      }
    }
  }
})

----------------------------------------

TITLE: Grouping and Sorting Search Results
DESCRIPTION: Example of grouping search results by design and sorting items within each group by rank in descending order.

LANGUAGE: javascript
CODE:
const results = search(db, {
  term: "t-shirt",
  groupBy: {
    properties: ["design"], // property on which we want to group on
  },
  sortBy: {
    property: "rank", // inside a group, the result is ordered following this property
    order: "DESC", // with this order
  },
});

----------------------------------------

TITLE: Implementing full-text search with useSearch composable in Vue
DESCRIPTION: Demonstrates how to use the useSearch composable to perform a full-text search query in a Vue component, including result rendering.

LANGUAGE: vue
CODE:
<script setup>
import { client } from "./orama";
import { useSearch } from "@oramacloud/vue-client";

const { results } = useSearch({
  client,
  term: "guitar",
});
</script>

<template>
  <div v-for="result in results?.hits">
    <pre>{{ result }}</pre>
  </div>
</template>

----------------------------------------

TITLE: Inserting Documents with Geopoint Data into Orama Database
DESCRIPTION: This snippet demonstrates how to insert multiple documents with geopoint data into an Orama database. It creates a database with a schema for name and location, then inserts three landmarks with their coordinates.

LANGUAGE: javascript
CODE:
import { create, insert } from "@orama/orama";

const db = create({
  schema: {
    name: "string",
    location: "geopoint",
  },
});

insert(db, {
  name: "Duomo di Milano",
  location: { lat: 45.46409, lon: 9.19192 },
});
insert(db, {
  name: "Piazza Duomo",
  location: { lat: 45.46416, lon: 9.18945 },
});
insert(db, {
  name: "Piazzetta Reale",
  location: { lat: 45.46339, lon: 9.19092 },
});

----------------------------------------

TITLE: Customizing documentsStore Component in Orama
DESCRIPTION: This example demonstrates how to partially override the default documentsStore component in Orama to implement custom logic when removing documents. The documentsStore component handles document storage operations.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";
import { documentsStore as defaultDocumentsStore } from "@orama/orama/components";

const store = await defaultDocumentsStore.createDocumentsStore();
const movieDB = create({
  schema: {
    title: "string",
    director: "string",
  },
  components: {
    // override partially the default documents store
    documentsStore: {
      ...store,
      remove(s, id) {
        // Apply custom logic
        return store.remove(s, id);
      },
    },
  },
});

----------------------------------------

TITLE: Defining Orama Schema for Faceted Search
DESCRIPTION: Sample schema definition for Orama search with various data types that can be used for facets, including strings, numbers, and booleans.

LANGUAGE: json
CODE:
{
  "title": "string",
  "description": "string",
  "categories": {
    "primary": "string",
    "secondary": "string",
  },
  "rating": "number",
  "isFavorite": "boolean",
}

----------------------------------------

TITLE: Working with Array Fields in Orama Facets
DESCRIPTION: Demonstrates how Orama handles facets on array fields by treating each array element as a separate facet entry. The example shows creating a schema with string arrays and the resulting facet structure.

LANGUAGE: javascript
CODE:
const db = create({
  schema: {
    name: "string[]",
  },
});
insert(db, {
  name: ["Albus", "Percival Wulfric Brian"],
});

const results = search(db, {
  facets: {
    name: {},
  },
});

----------------------------------------

TITLE: Grouping by Multiple Properties
DESCRIPTION: Shows how to group search results by multiple properties simultaneously, creating groups based on combinations of design, rank, and isPromoted values.

LANGUAGE: javascript
CODE:
const results = search(db, {
  term: "red t-shirt",
  groupBy: {
    properties: ["design", "rank", "isPromoted"], // group on the combination of the values
  },
  sortBy: {
    property: "id",
    order: "ASC",
  },
});

----------------------------------------

TITLE: Implementing a Simple Custom Tokenizer in Orama
DESCRIPTION: Shows how to implement a basic custom tokenizer that only indexes the first character of each string. This demonstrates the minimal implementation required for a tokenizer component.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";

const movieDB = create({
  schema: {
    title: "string",
    director: "string",
  },
  components: {
    tokenizer: {
      language: "english",
      normalizationCache: new Map(),
      tokenize(raw) {
        return raw[0];
      },
    },
  },
});

----------------------------------------

TITLE: Using Boolean Filters in Orama Search
DESCRIPTION: This example shows how to filter search results using boolean properties. It demonstrates setting a boolean property to true to include only documents where that property is true.

LANGUAGE: javascript
CODE:
const results = search(db, {
  term: "prestige",
  where: {
    "meta.favorite": true,
  },
});

----------------------------------------

TITLE: Installing Orama Vue Components with pnpm
DESCRIPTION: Command to install Orama's Vue-specific components using pnpm package manager. These components are designed specifically for Vue applications.

LANGUAGE: bash
CODE:
pnpm i @orama/vue-components

----------------------------------------

TITLE: Example of Grouped Search Results Format
DESCRIPTION: Shows the structure of the response from a grouped search query, with groups containing their identifying values and the results belonging to each group.

LANGUAGE: js
CODE:
{
  groups: [
    {
      values: ['A'], // list of the values the group is referring to
      result: [
        {
          id: '1',
          score: 0,
          document: { ... } // the doc with id '1'
        }
      ]
    },
    {
      values: ['B'], // list of the values the group is referring to
      result: [
        {
          id: '5',
          score: 0,
          document: { ... } // the doc with id '5'
        }
      ]
    }
  ],
  // The other common properties like `hits` and `elapsed`
}

----------------------------------------

TITLE: Implementing a Component in TypeScript
DESCRIPTION: Shows how to create the actual implementation of a component. This example implements the ShiningDetector component with an isShining function and exports both the individual function and a factory function for component creation.

LANGUAGE: diff
CODE:
+ import { IShiningDetector } from '../src/types.js'
+
+ export function isShining(shining: Record<string, number>, subject: string): number {
+   return shining[subject] ?? 0
+ }
+
+ export function createShiningDetector(): IShiningDetector {
+   return { isShining }
+ }
+

----------------------------------------

TITLE: Implementing the Orama Search Button in React
DESCRIPTION: This example demonstrates how to use the OramaSearchButton component from the Orama React components library. The example includes configuration for size, color scheme, and custom theme settings with a personalized background color.

LANGUAGE: jsx
CODE:
import { OramaSearchButton } from '@orama/react-components';

<OramaSearchButton
  size="large"
  colorScheme="dark"
  themeConfig={{
    themeConfig: {
      colors: {
        dark: {
          '--background-color-primary': '#231102'
        },
      },
    },
  }}
>
  Search something...
</OramaSearchButton>

----------------------------------------

TITLE: Inserting Snapshot in Orama Cloud using Kotlin SDK
DESCRIPTION: Kotlin example for creating a snapshot in an Orama Cloud index. It defines a serializable document class, initializes the CloudManager, and uses runBlocking to call the snapshot method.

LANGUAGE: swift
CODE:
import com.orama.client.CloudManager
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.Serializable

@Serializable
data class OramaDoc (
  let id: String
  let name: String
  let age: Int
)

val cloudManager = CloudManager(apiKey = "YOUR_API_KEY")
val indexManager = cloudManager.index<Product>(indexId)

runBlocking {
  val snapshot = index.snapshot(listOf(
    OramaDoc(id = "1", name = "John Doe", age = 30),
    OramaDoc(id = "2", name = "Jane Doe", age = 25)
  ), OramaDoc.serializer())
}

----------------------------------------

TITLE: Demonstrating the Problem with Multi-term Searches in Orama
DESCRIPTION: This example demonstrates the issue with multiple search terms - searching for 'regular fit' returns all documents, even though only one contains both terms exactly. This happens because documents with partial matches are also included.

LANGUAGE: javascript
CODE:
const results = search(db, {
  term: "regular fit",
});

// results.count = 4

----------------------------------------

TITLE: Searching Nested Properties in Orama
DESCRIPTION: This snippet shows how to search through nested document properties using dot notation in the properties array.

LANGUAGE: javascript
CODE:
const searchResult = search(movieDB, {
  term: "Chris",
  properties: ["cast.director"],
});

----------------------------------------

TITLE: Counting Documents in an Orama Database with the count Function in JavaScript
DESCRIPTION: This snippet shows how to use the count function from the Orama library to determine the total number of documents in a database. The function returns an integer representing the document count.

LANGUAGE: javascript
CODE:
import { count } from "@orama/orama";

const docNumber = await count(movieDB);

// Returns the number of documents in the database

----------------------------------------

TITLE: Inserting and Updating Documents with JavaScript
DESCRIPTION: Demonstrates how to use the Orama Cloud Client SDK in JavaScript to insert a new document and update an existing one. The example shows how to initialize the CloudManager with your API key and perform operations on a specific index.

LANGUAGE: javascript
CODE:
import { CloudManager } from "@oramacloud/client"

const oramaCloudManager = new CloudManager({
  api_key: process.env.ORAMA_CLOUD_PRIVATE_API_KEY,
})

const myIndex = oramaCloudManager.index("my-index-id")

await myIndex.insert([{ id: "3", name: "Rick Sanchez", age: 80 }])
await myIndex.update([{ id: "3", name: "Rick Doe", age: 75 }])

----------------------------------------

TITLE: Installing Orama Vue Components with yarn
DESCRIPTION: Command to install Orama's Vue-specific components using yarn package manager. These components are designed specifically for Vue applications.

LANGUAGE: bash
CODE:
yarn add @orama/vue-components

----------------------------------------

TITLE: Understanding Match Highlight Search Results Structure
DESCRIPTION: This example shows the structure of search results when using the match highlight plugin. Each hit includes a positions property containing the start position and length of matched terms within the document properties.

LANGUAGE: javascript
CODE:
{
  elapsed: {...},
  count: ...,
  hits: [
    {
      id: ...,
      score: ...,
      document: { text: 'hello world' },
      positions: {
        text: {
          hello: [
            {
              start: 0,
              length: 5
            }
          ]
        }
      }
    }
  ]
}

----------------------------------------

TITLE: Filtering Search Results by String Property in Kotlin
DESCRIPTION: Kotlin code showing how to filter Orama search results using string equality conditions.

LANGUAGE: kotlin
CODE:
val searchParams = SearchParams.builder(
      term = "prestige",
    )
    .where(listOf(
        Condition("tag", ConditionType.Equals("new"))
    ))
    .build()

val results = client.search(searchParams, MyDoc.serializer())

----------------------------------------

TITLE: Basic Grouping Search in Orama
DESCRIPTION: Example of a basic groupBy operation in Orama search. This allows grouping results by specified properties with optional parameters for maximum results per group and custom aggregation logic.

LANGUAGE: javascript
CODE:
const results = search(db, {
  term: "t-shirt",
  groupBy: {
    properties: ["design"], // required: property on which we want to group on
    maxResult: 1, // optional: for every group, how many results we want
    reduce: {
      // optional: customize the aggregation logic
      reducer: Function,
      getInitialValue: Function,
    },
  },
});

----------------------------------------

TITLE: Deleting Documents with PHP
DESCRIPTION: Demonstrates how to delete a document using the Orama Cloud PHP client. This example initializes the IndexManager with your index ID and API key, then calls the delete method with an array of document IDs.

LANGUAGE: php
CODE:
use OramaCloud\Manager\IndexManager;
$indexManager = new IndexManager("my-index-id", PRIVATE_API_KEY);

$indexManager->delete(["2"]);

----------------------------------------

TITLE: Creating a Basic Logger Plugin in JavaScript
DESCRIPTION: Creates a simple logger plugin that logs search operations before they are executed. The plugin demonstrates the basic structure of an Orama plugin with a name property and a hook function.

LANGUAGE: javascript
CODE:
function loggerPlugin() {
  return {
    name: "logger",
    beforeSearch: (orama, query) => {
      console.log(
        `About to search for ${query.term} on Orama instance ${orama.id}`
      );
    },
  };
}

----------------------------------------

TITLE: Filtering Search Results by Multiple String Values in JavaScript
DESCRIPTION: JavaScript code demonstrating how to filter search results by an array of possible string values in Orama.

LANGUAGE: javascript
CODE:
const results = await client.search({
  term: "prestige",
  where: {
    tag: ["favorite", "new"],
  },
});

----------------------------------------

TITLE: Deploying Index Changes with cURL
DESCRIPTION: Demonstrates how to use cURL to trigger a deployment of queued changes to an Orama Cloud index. This example sends a POST request to the deploy endpoint with your API key for authentication.

LANGUAGE: bash
CODE:
curl https://api.oramasearch.com/api/v1/webhooks/$INDEX_ID/deploy \
  -X POST \
  -H "Authorization: Bearer $PRIVATE_API_KEY"

----------------------------------------

TITLE: Installing Orama React Components with pnpm
DESCRIPTION: Command to install Orama's React-specific components using pnpm package manager. These components are designed specifically for React applications.

LANGUAGE: bash
CODE:
pnpm i @orama/react-components

----------------------------------------

TITLE: Customizing Document ID Generation in Orama
DESCRIPTION: This example shows how to implement a custom getDocumentIndexId component that generates or extracts unique IDs for documents. The component uses the document's ID if available or generates a timestamp-based ID.

LANGUAGE: javascript
CODE:
import { create, insert } from "@orama/orama";

const movieDB = create({
  schema: {
    title: "string",
    director: "string",
  },
  components: {
    getDocumentIndexId(doc) {
      return doc.id ?? Date.now().toString();
    },
    afterInsert(_orama, _doc, id) {
      console.log(id);
    },
  },
});

// This will print something like "1679476550629"
insert(movieDB, {
  title: "Harry Potter and the Philosopher's Stone",
  director: "Chris Columbus",
});

----------------------------------------

TITLE: Filtering Search Results by Number Properties in Kotlin
DESCRIPTION: Kotlin code showing how to filter Orama search results using numeric conditions like GreaterThanOrEqual, Between, and LessThanOrEqual.

LANGUAGE: kotlin
CODE:
val searchParams = SearchParams.builder(
    term = "prestige",
)
.where(listOf(
    Condition("year", ConditionType.GreaterThanOrEqual(2000.00)),
    Condition("meta.rating", ConditionType.Between(
        listOf(5.00, 10.00)
    )),
    Condition("meta.length", ConditionType.LessThanOrEqual(60.00))
))
.build()
        
val results = client.search(searchParams, MyDoc.serializer())

----------------------------------------

TITLE: Creating an OramaClient instance in Vue
DESCRIPTION: Shows how to initialize the OramaClient with an endpoint and API key in a separate file for reuse throughout the application.

LANGUAGE: javascript
CODE:
import { OramaClient } from "@oramacloud/client";

export const client = new OramaClient({
  endpoint: "",
  api_key: "",
});

----------------------------------------

TITLE: Clearing Index Data with cURL
DESCRIPTION: Shows how to use cURL to clear all data from an Orama Cloud index. This example sends an empty array to the snapshot endpoint, effectively creating an empty snapshot that will clear all documents in the next deployment.

LANGUAGE: bash
CODE:
curl https://api.oramasearch.com/api/v1/webhooks/$INDEX_ID/snapshot \
  -H "authorization: Bearer $PRIVATE_API_KEY" ]
  -d "[]"

----------------------------------------

TITLE: Installing TensorflowJS Node Backend for Server Environments
DESCRIPTION: Command to install the recommended TensorflowJS backend for Node.js environments. This backend is optimized for server-side applications running in Node.js.

LANGUAGE: sh
CODE:
npm i @tensorflow/tfjs-node

----------------------------------------

TITLE: Custom Schema Validation in Orama
DESCRIPTION: This example demonstrates how to implement a custom validateSchema component in Orama. This component validates that documents match the defined schema before insertion.

LANGUAGE: javascript
CODE:
import { create, insert } from "@orama/orama";

const movieDB = create({
  schema: {
    title: "string",
    director: "string",
  },
  components: {
    validateSchema(doc) {
      return typeof doc.name === "string" && typeof doc.director === "string";
    },
  },
});

// This will throw
insert(movieDB, {
  title: "Harry Potter and the Philosopher's Stone",
  director: 42,
});

----------------------------------------

TITLE: Filtering Search Results by Boolean Property in Python
DESCRIPTION: Python placeholder code for filtering search results by boolean property in Orama.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Checking Pending Operations with JavaScript SDK
DESCRIPTION: This snippet demonstrates how to check if there are pending operations in an Orama Cloud index using the JavaScript SDK. It initializes a CloudManager with an API key and then uses the hasPendingOperations method on an index instance.

LANGUAGE: javascript
CODE:
import { CloudManager } from "@oramacloud/client"

const oramaCloudManager = new CloudManager({
  api_key: process.env.ORAMA_CLOUD_PRIVATE_API_KEY,
})

const myIndex = oramaCloudManager.index("my-index-id")

const hasPendingOperations = await myIndex.hasPendingOperations()
console.log(hasPendingOperations) // true or false

----------------------------------------

TITLE: Performing Vector Search with PHP in Orama Cloud
DESCRIPTION: This code shows how to perform vector search using the Orama PHP client. It initializes a client with API key and endpoint, creates a query with term, vector mode, and price condition, then executes the search.

LANGUAGE: php
CODE:
use OramaCloud\Client;
use OramaCloud\Client\Query;
use OramaCloud\Client\QueryParams\WhereOperator;
use OramaCloud\Client\QueryParams\SortByOrder;

$client = new Client([
  'api_key' => '<Your Orama Cloud API Key>',
  'endpoint' => '<Your Orama Cloud Endpoint>'
]);

$query = (new Query())
  ->term('Super Mario videogame')
  ->mode('vector')
  ->where('price', WhereOperator::LT, 19.99);

$results = $client->search($query);

----------------------------------------

TITLE: Using Custom Document IDs in Orama
DESCRIPTION: Shows how Orama automatically uses the 'id' field of a document as its identifier if present. Without an explicit id, Orama generates a random identifier for each document.

LANGUAGE: javascript
CODE:
import { create, search } from "@orama/orama";

const db = create({
  schema: {
    id: "string",
    author: "string",
    quote: "string",
  },
});

insert(db, {
  id: "73cbcc79-2203-49b8-bb52-60d8e9a66c5f",
  author: "Fernando Pessoa",
  quote: "I wasn't meant for reality, but life came and found me",
});

----------------------------------------

TITLE: Filtering Search Results by Boolean Property in PHP
DESCRIPTION: PHP code showing how to filter Orama search results by a boolean property using the WhereOperator.

LANGUAGE: php
CODE:
use OramaCloud\Client;
use OramaCloud\Client\Query;
use OramaCloud\Client\QueryParams\WhereOperator;

$query = (new Query())
  ->term('prestige')
  ->where('meta.favorite', WhereOperator::EQ, true);

$results = $client->search($query);

----------------------------------------

TITLE: Filtering by Polygon in JavaScript with Orama
DESCRIPTION: This snippet demonstrates how to filter search results based on a polygon boundary. It uses the 'polygon' property with an array of coordinates defining the polygon vertices to find documents located within the specified area.

LANGUAGE: javascript
CODE:
const searchResult = search(db, {
  term: 'Duomo',
  where: {
    location: {            // The property we want to filter by
      polygon: {           // The filter we want to apply (in that case: "polygon")
        coordinates: [     // The polygon coordinate
          { lat: 45.46472, lon: 9.1886  },
          { lat: 45.46352, lon: 9.19177 },
          { lat: 45.46278, lon: 9.19176 },
          { lat: 45.4628,  lon: 9.18857 },
          { lat: 45.46472, lon: 9.1886  },
        ]
      }
    }
  }
})

----------------------------------------

TITLE: Checking Pending Operations with PHP (Coming Soon)
DESCRIPTION: This placeholder indicates that PHP support for checking pending operations in Orama Cloud is coming soon.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Installing Orama Web Components with pnpm
DESCRIPTION: Command to install Orama's framework-agnostic web components using pnpm package manager. These components can be used in any JavaScript environment.

LANGUAGE: bash
CODE:
pnpm i @orama/wc-components

----------------------------------------

TITLE: Inserting and Updating Documents with PHP
DESCRIPTION: Shows how to use Orama Cloud's PHP client to insert and update documents. This example initializes the IndexManager with your index ID and API key, then performs document operations using array syntax.

LANGUAGE: php
CODE:
use OramaCloud\Manager\IndexManager;
$indexManager = new IndexManager("my-index-id", PRIVATE_API_KEY);

$indexManager->insert([
  ["id" => "3", "name" => "Rick Sanchez", "age" => 80]
]);
$indexManager->update([
  ["id" => "3", "name" => "Rick Doe", "age" => 75]
]);

----------------------------------------

TITLE: Regenerating Last Answer in Swift
DESCRIPTION: Demonstrates using the Orama Swift SDK to ask a question and regenerate the previous answer. The example shows the API for asking with parameters, regenerating with streaming control, and retrieving conversation messages.

LANGUAGE: swift
CODE:
// Ask the question
let answer = try await answerSession.ask(params: AnswerParams.AskParams(
  query: "What is Orama?",
  userData: nil,
  related: nil
))

// Regenerate the answer
// "stream" is true by default, but you can set it to false if you want to get the entire answer at once
let answer = try await answerSession.regenerateLast(stream: false)

// Check the messages
let messages = answerSession.getMessages()

print(messages)

// [
//   { role: 'user', content: 'What is Orama?' },
//   { role: 'assistant', content: 'Orama is a next-generation answer engine' }
// ]

----------------------------------------

TITLE: Multi-Property Sorting in JavaScript with Orama Cloud
DESCRIPTION: JavaScript implementation for sorting search results by multiple properties. This example demonstrates how to sort by 'year' as the primary sorting property and 'meta.rating' as the secondary sorting property when searching for 'prestige'.

LANGUAGE: javascript
CODE:
const results = await client.search({
  term: "prestige",
  sortBy: [
    {
      property: "year",
      order: "desc"
    },
    {
      property: "meta.rating",
      order: "desc"
    }
  ]
});

----------------------------------------

TITLE: Installing Orama Angular Components with npm
DESCRIPTION: Command to install Orama's Angular-specific components using npm package manager. These components are designed specifically for Angular applications.

LANGUAGE: bash
CODE:
npm i @orama/angular-components

----------------------------------------

TITLE: Deploying Index Changes with Kotlin
DESCRIPTION: Demonstrates how to deploy changes to an Orama Cloud index using Kotlin. This example uses coroutines to handle the asynchronous deploy operation that makes the queued changes available worldwide.

LANGUAGE: swift
CODE:
import com.orama.client.CloudManager
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.Serializable

@Serializable
data class OramaDoc (
  let id: String
  let name: String
  let age: Int
)

val cloudManager = CloudManager(apiKey = "YOUR_API_KEY")
val indexManager = cloudManager.index<OramaDoc>(indexId)

runBlocking {
  index.deploy()
}

----------------------------------------

TITLE: Filtering Search Results by Boolean Property in JavaScript
DESCRIPTION: JavaScript code showing how to filter Orama search results by a boolean property.

LANGUAGE: javascript
CODE:
const results = await client.search({
  term: "prestige",
  where: {
    "meta.favorite": true,
  },
});

----------------------------------------

TITLE: Clearing Session in Kotlin
DESCRIPTION: Shows how to reset an answer session using the Kotlin SDK. This clears all conversation history.

LANGUAGE: kotlin
CODE:
answerSession.clearSession()

----------------------------------------

TITLE: Checking Pending Operations with Swift SDK
DESCRIPTION: This example shows how to check for pending operations in an Orama Cloud index using the Swift SDK. It creates a CloudManager instance with an API key and uses the hasPendingOperations method on an index manager that is typed with a document structure.

LANGUAGE: swift
CODE:
import OramaCloudClient

// This is an example document. It should reflect your index schema.
struct OramaDoc: Codable {
  let id: String
  let name: String
  let age: Int
}

let cloudManager = CloudManager(apiKey: "YOUR_API_KEY")
let indexManager = cloudManager.index<OramaDoc>("my-index-id")

let hasPendingOperations = await try indexManager.hasPendingOperations()

print(hasPendingOperations) // true or false

----------------------------------------

TITLE: Performing Full-Text Search in Kotlin with Orama Cloud
DESCRIPTION: Kotlin implementation for Orama Cloud search functionality. This example demonstrates creating a data class for your document structure and building search parameters with conditions like price filters.

LANGUAGE: kotlin
CODE:
import com.orama.client.OramaClient
import com.orama.model.search.*
import kotlinx.serialization.Serializable

// Keep in mind that search is a suspended function, 
// so you need to call it from a coroutine ;)

@Serializable
data class MyDoc (
    val title: String,
    val category: String,
    val path: String,
    val content: String,
    val section: String
)

val searchParams = SearchParams.builder(
        term = "red shoes",
        mode = Mode.FULLTEXT
    )
    .where(listOf(
        Condition("price", ConditionType.GreaterThan(99.99))
    ))
    .build()

val results = client.search(searchParams, MyDoc.serializer())

----------------------------------------

TITLE: Deploying Index Changes with PHP
DESCRIPTION: Shows how to deploy changes to an Orama Cloud index using PHP. This example initializes the IndexManager with your index ID and API key, then calls the deploy method to make the queued changes live.

LANGUAGE: php
CODE:
use OramaCloud\Manager\IndexManager;
$indexManager = new IndexManager("my-index-id", PRIVATE_API_KEY);

$indexManager->deploy();

----------------------------------------

TITLE: Clearing Session in Python
DESCRIPTION: Placeholder for the Python implementation of clearing an answer session in Orama. The feature is marked as coming soon.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Multi-Property Sorting in Kotlin with Orama Cloud
DESCRIPTION: Kotlin implementation for sorting search results by multiple properties. This example demonstrates how to sort by 'year' in ascending order and 'meta.rating' in descending order when searching for 'prestige'.

LANGUAGE: kotlin
CODE:
val searchParams = SearchParams.builder(
        term = "prestige"
    )
  .sortBy([
    sortByDirective("year", Order.ASC),
    sortByDirective("meta.rating", Order.DESC)
  ])
  .build()

val results = client.search(searchParams, MyDoc.serializer())

----------------------------------------

TITLE: Multi-Property Sorting in PHP with Orama Cloud
DESCRIPTION: PHP implementation for sorting search results by multiple properties. This example shows how to sort by 'year' in descending order and 'meta.rating' in descending order when searching for 'prestige'.

LANGUAGE: php
CODE:
use OramaCloud\Client;
use OramaCloud\Client\Query;
use OramaCloud\Client\QueryParams\SortByOrder;

$query = (new Query())
    ->term('prestige')
    ->sortBy('year' SortByOrder::DESC)
    ->sortBy('meta.rating' SortByOrder::DESC);

$results = $client->search($query);

----------------------------------------

TITLE: Clearing Index Data with JavaScript
DESCRIPTION: Shows how to clear all data from an Orama Cloud index using JavaScript. This operation prepares the index for a complete data refresh in the next deployment by removing all existing documents.

LANGUAGE: javascript
CODE:
import { CloudManager } from "@oramacloud/client"

const oramaCloudManager = new CloudManager({
  api_key: process.env.ORAMA_CLOUD_PRIVATE_API_KEY,
})

const myIndex = oramaCloudManager.index("my-index-id")

await myIndex.clear()

----------------------------------------

TITLE: Single Property Sorting in JavaScript with Orama Cloud
DESCRIPTION: Example of sorting search results by a single property in JavaScript. This code demonstrates how to sort by the 'year' property in descending order when performing a full-text search for 'prestige'.

LANGUAGE: javascript
CODE:
const results = await client.search({
  term: "prestige",
  sortBy: {
    property: "year",
    order: "desc" // optional, default is "asc" 
  },
});

----------------------------------------

TITLE: Clearing Session in PHP
DESCRIPTION: Placeholder for the PHP implementation of clearing an answer session in Orama. The feature is marked as coming soon.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Performing Vector Search with Swift in Orama Cloud
DESCRIPTION: This snippet shows how to perform vector search using the Orama Swift client. It defines a document structure, initializes a client, and builds search parameters including term, mode, and optional parameters like limit, offset, and returning fields.

LANGUAGE: swift
CODE:
import OramaCloudClient

struct MyDoc: Encodable & Decodable {
  let title: String
  let description: String
}

let clientParams = OramaClientParams(endpoint: "", apiKey: "")
let orama = OramaClient(params: clientParams)

let searchParams = ClientSearchParams.builder(
    term: "Super Mario videogame",
    mode: .vector
  )
  .limit(10) // optional
  .offset(0) // optional
  .returning(["title", "description"]) // optional
  .build()

let searchResults: SearchResults<MyDoc> = try await orama.search(query: searchParams)

----------------------------------------

TITLE: Clearing Index Data with Kotlin
DESCRIPTION: Shows how to clear all data from an Orama Cloud index using Kotlin. This example uses coroutines to handle the asynchronous clear operation that removes all documents for the next deployment.

LANGUAGE: swift
CODE:
import com.orama.client.CloudManager
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.Serializable

@Serializable
data class OramaDoc (
  let id: String
  let name: String
  let age: Int
)

val cloudManager = CloudManager(apiKey = "YOUR_API_KEY")
val indexManager = cloudManager.index<OramaDoc>(indexId)

runBlocking {
  index.clear()
}

----------------------------------------

TITLE: Setting JSON UserContext in Kotlin
DESCRIPTION: Shows how to provide structured user context as a JSON string in Kotlin for the Orama answer session.

LANGUAGE: kotlin
CODE:
import com.orama.client.OramaClient

val client = OramaClient(apiKey = "", endpoint = "" )

val answerParams = AnswerParams(
  oramaClient = client,
  serializer = MyDoc.serializer(),
  userContext = "{ name: \"John Doe\", musicTaste: [\"Rock\", \"Punk\", \"Metal\"], customerSince: 2019 }"
)

val answerSession = AnswerSession(answerParams)

----------------------------------------

TITLE: Filtering Search Results by Number Properties in JavaScript
DESCRIPTION: JavaScript code showing how to filter Orama search results using numeric operators like gte, between, and lte.

LANGUAGE: javascript
CODE:
const results = await client.search({
  term: "prestige",
  where: {
    year: {
      gte: 2000,
    },
    "meta.rating": {
      between: [5, 10],
    },
    "meta.length": {
      lte: 60,
    },
  },
});

----------------------------------------

TITLE: Configuring Orama Cloud Plugin in Strapi
DESCRIPTION: Basic configuration for the Orama Cloud plugin in Strapi's plugins.js file. This setup requires a private API key from the Orama Cloud dashboard for authentication.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  "orama-cloud": {
    config: {
      privateApiKey: env('ORAMACLOUD_PRIVATE_API_KEY'),
    },
  },
});

----------------------------------------

TITLE: Clearing Index Data with PHP
DESCRIPTION: Demonstrates that the PHP method for clearing an Orama Cloud index is coming soon. This placeholder indicates that the functionality will be available in a future version of the PHP client.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Performing Full-Text Search in PHP with Orama Cloud
DESCRIPTION: PHP implementation of Orama Cloud search showing how to use the client to perform full-text search. The example demonstrates client initialization, query building with term search and price condition, and executing the search.

LANGUAGE: php
CODE:
use OramaCloud\Client;
use OramaCloud\Client\Query;
use OramaCloud\Client\QueryParams\WhereOperator;
use OramaCloud\Client\QueryParams\SortByOrder;

$client = new Client([
  'endpoint' => '<Your Orama Cloud Endpoint>',
  'api_key' => '<Your Orama Cloud API Key>'
]);

$query = (new Query())
  ->term('red shoes')
  ->mode('fulltext') // 'fulltext' is optional, but can also be "vector" or "hybrid"
  ->where('price', WhereOperator::GT, 99.99);

$results = $client->search($query);

----------------------------------------

TITLE: Setting Initial Messages in JavaScript
DESCRIPTION: Example of providing initial messages to seed the conversation with user and assistant exchanges.

LANGUAGE: javascript
CODE:
const initialMessages = [
  { role: "user", content: "What is Orama?" },
  { role: "assistant", content: "Orama is a next-generation answer engine" },
];

----------------------------------------

TITLE: Configuring Orama Cloud Plugin in Docusaurus
DESCRIPTION: Basic configuration for the @orama/plugin-docusaurus-v3 plugin in the Docusaurus config file. This setup connects your Docusaurus project to Orama Cloud for search functionality.

LANGUAGE: javascript
CODE:
plugins: [
  [
    "@orama/plugin-docusaurus-v3",
    {
      cloud: {
        apiKey: process.env.ORAMA_CLOUD_PRIVATE_API_KEY,
        indexId: "YOUR_ORAMA_CLOUD_INDEX_ID",
        deploy: process.env.ENABLE_ORAMA_CLOUD_DEPLOY,
      },
    },
  ],
];

----------------------------------------

TITLE: Implementing Answer Session with Kotlin SDK
DESCRIPTION: Shows how to initialize the Orama client and create an answer session in Kotlin, including data serialization for custom document types.

LANGUAGE: kotlin
CODE:
import com.orama.client.OramaClient

@Serializable
data class MyDoc (
    val title: String,
    val category: String,
    val path: String,
    val content: String,
    val section: String
)

val client = OramaClient(
  apiKey = "YOUR_PUBLIC_API_KEY",
  endpoint = "YOUR_ENDPOINT_URL"
)

val answerParams = AnswerParams(
  oramaClient = client,
  serializer = MyDoc.serializer(),
  userContext = "The user is a very skilled programmer but has never used Orama before."
)

val answerSession = AnswerSession(answerParams)

----------------------------------------

TITLE: Setting Initial Messages in Kotlin
DESCRIPTION: Shows how to initialize a conversation with predefined user and assistant messages in Kotlin.

LANGUAGE: kotlin
CODE:
import com.orama.client.OramaClient

var initialMessages = listOf(
  Message(role = Role.USER, content = "What is Orama?"),
  Message(role = Role.ASSISTANT, content = "Orama is a next-generation answer engine."),
)

----------------------------------------

TITLE: Filtering Search Results by Number Properties in Swift
DESCRIPTION: Swift placeholder code for filtering search results by number properties in Orama.

LANGUAGE: swift
CODE:
print("coming soon")

----------------------------------------

TITLE: Inserting and Updating Documents with Kotlin
DESCRIPTION: Demonstrates document operations using the Orama Cloud Client in Kotlin. The example defines a serializable data class and uses coroutines to handle the asynchronous operations with CloudManager.

LANGUAGE: swift
CODE:
import com.orama.client.CloudManager
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.Serializable

@Serializable
data class OramaDoc (
  let id: String
  let name: String
  let age: Int
)

val cloudManager = CloudManager(apiKey = "YOUR_API_KEY")
val indexManager = cloudManager.index<OramaDoc>(indexId)

runBlocking {
  index.insert(listOf(
      OramaDoc(id = "3", name = "Rick Sanchez", age = 80)
  ), OramaDoc.serializer())

  index.update(listOf(
      OramaDoc(id = "3", name = "Rick Doe", age = 75)
  ), OramaDoc.serializer())
}

----------------------------------------

TITLE: Setting String UserContext in JavaScript
DESCRIPTION: Example of providing user context as a string to personalize the answer experience in a music store scenario.

LANGUAGE: javascript
CODE:
const answerSession = orama.createAnswerSession({
  userContext: 'The user is called John Doe and he loves rock music. He has been a customer for 5 years.'
})

----------------------------------------

TITLE: Multi-Property Sorting in Swift with Orama Cloud
DESCRIPTION: Swift implementation for sorting search results by multiple properties. This example shows how to sort by 'year' in ascending order and 'meta.rating' in descending order when searching for 'prestige'.

LANGUAGE: swift
CODE:
let searchQuery = ClientSearchParams
  .builder(term: "prestige", mode: .fulltext)
  .sortBy([
    ClientSearchParams.SortByDirective(
      property: "year",
      order: .asc
    ),
    ClientSearchParams.SortByDirective(
      property: "meta.rating",
      order: .desc
    ),
  ])
  .build()

let results: SearchResults<MyDoc> = try await client.search(query: searchQuery)

----------------------------------------

TITLE: Defining Interaction Data Class in Kotlin for Orama Cloud
DESCRIPTION: Kotlin data class definition for Interaction in the Orama Cloud Client. Represents the structure of a user's interaction with the system, containing the query, response, and related information.

LANGUAGE: kotlin
CODE:
import com.orama.client.OramaClient

data class Interaction<T> (
  val interactionId: String,
  val query: String,
  val response: String,
  val relatedQueries: List<String>?,
  val sources: List<Hit<T>>,
  val translatedQuery: Map<String, JsonElement>,
  val aborted: Boolean = false,
  val loading: Boolean
)

----------------------------------------

TITLE: Deleting Documents with cURL
DESCRIPTION: Shows how to use cURL to send a document deletion request to the Orama Cloud API. This example uses the notify endpoint with a remove operation and provides the ID of the document to be deleted.

LANGUAGE: bash
CODE:
curl https://api.oramasearch.com/api/v1/webhooks/$INDEX_ID/notify \
  -H "authorization: Bearer $PRIVATE_API_KEY" \
  -d "{ \"remove\": [\"2\"] }"

----------------------------------------

TITLE: Setting Initial Messages in Swift
DESCRIPTION: Shows how to initialize a conversation with predefined messages in Swift for the Orama answer session.

LANGUAGE: swift
CODE:
import OramaCloudClient

let initialMessages = [
  AnswerParams<Doc>.Message(role: .user, content: "What is Orama?")
  AnswerParams<Doc>.Message(role: .assistant, content: "Orama is a next-generation answer engine")
]

----------------------------------------

TITLE: Python Placeholder for Interaction Type in Orama Cloud
DESCRIPTION: Placeholder for the Python implementation of the Interaction type in Orama Cloud Client, which is marked as coming soon.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Integrating Orama Analytics Plugin with Database Creation in JavaScript
DESCRIPTION: This snippet demonstrates how to import and integrate the Orama Analytics Plugin when creating a database. It requires an API key and endpoint from Orama Cloud, which can be obtained by signing up for a free account at cloud.orama.com.

LANGUAGE: javascript
CODE:
import { create, insert, search } from '@orama/orama'
import { pluginAnalytics} from '@orama/plugin-analytics'

const db = await create({
  schema: {
    title: 'string',
    description: 'string'
  },
  plugins: [
    pluginAnalytics({
      apiKey: '<API-KEY>',
      endpoint: '<ENDPOINT>'
    })
  ]
})

----------------------------------------

TITLE: Checking Pending Operations with cURL
DESCRIPTION: This bash script demonstrates how to check for pending operations in an Orama Cloud index using direct API calls with cURL. It includes a note that the API endpoint will be renamed in the future and recommends using the SDK instead.

LANGUAGE: bash
CODE:
# Beware: this API will be renamed to "/has-pending-operations" in the future.
# We recommend using the SDK instead.
curl https://api.oramasearch.com/api/v1/webhooks/$INDEX_ID/has-data \
  -H "authorization: Bearer $PRIVATE_API_KEY" ]

----------------------------------------

TITLE: Using onStateChange Event in JavaScript with Orama Cloud
DESCRIPTION: Example of using the onStateChange event in JavaScript with Orama Cloud. This shows how to create an answer session, register an event handler for state changes, and access the interactions after they complete.

LANGUAGE: javascript
CODE:
const answerSession = orama.createAnswerSession({
  events: {
    onStateChange: (state) => {
      if (state.every(interaction => !interaction.loading)) {
        console.log(state)
      }
    },
  },
});

await answerSession.ask({
  term: "What is Orama?",
});

// [
//   {
//     interactionId: "clyru4rl8000008l062b26fk1",
//     query: "What is Orama?",
//     response: "Orama is a next-generation answer engine [...]",
//     relatedQueries: ["How Orama works", "Why Orama is the best", "Vector search with orama"],
//     sources: [
//       {
//         count: 15,
//         elapsed: { formatted: "78ms", raw: 78000000 },
//         hits: [
//           { document: { title: "What is Orama", ... } },
//           { document: { title: "How Orama works", ... } },
//           { document: { title: "Why Orama is the best", ... } }
//         ]
//       }
//     ],
//     translatedQuery: { term: "What is Orama?" },
//     aborted: false,
//     loading: false
//   }
// ]

----------------------------------------

TITLE: Using ask method with Orama SDK in JavaScript
DESCRIPTION: Demonstrates how to use the ask method to get a complete answer at once. The method accepts search parameters and returns the entire answer after it has been streamed from the server.

LANGUAGE: javascript
CODE:
const answer = await answerSession.ask({
  term: "What is Orama?",
});

console.log(answer);
// Orama is a next-generation answer engine

----------------------------------------

TITLE: Document Schema for Orama Cloud
DESCRIPTION: Example JSON schema defining the structure of documents to be searched in Orama Cloud. The schema includes string, number, and boolean fields, as well as nested properties.

LANGUAGE: json
CODE:
{
  "title": "string",
  "year": "number",
  "inPromotion": "boolean",
  "meta": {
    "tag": "string",
    "rating": "number",
    "favorite": "boolean"
  }
}

----------------------------------------

TITLE: Using MDX with React Components in Docusaurus
DESCRIPTION: Demonstrates using MDX to add interactive React components inside Markdown. This example creates a Highlight component that changes background color and responds to clicks with an alert.

LANGUAGE: jsx
CODE:
export const Highlight = ({children, color}) => (
  <span
    style={{
      backgroundColor: color,
      borderRadius: '20px',
      color: '#fff',
      padding: '10px',
      cursor: 'pointer',
    }}
    onClick={() => {
      alert(`You clicked the color ${color} with label ${children}`)
    }}>
    {children}
  </span>
);

This is <Highlight color="#25c2a0">Docusaurus green</Highlight> !

This is <Highlight color="#1877F2">Facebook blue</Highlight> !

----------------------------------------

TITLE: Using askStream method with Orama SDK in JavaScript
DESCRIPTION: Shows how to use the askStream method to get chunks of the answer as they are streamed from the server. The method returns an async iterator that yields chunks of the answer.

LANGUAGE: javascript
CODE:
const answer = await answerSession.askStream({
  term: "What is Orama?",
});

for await (const msg of answer) {
  console.log(msg);
}

// Orama
//  is a
// next-gener
// ation answer
//  engine

----------------------------------------

TITLE: Python Placeholder for onStateChange in Orama Cloud
DESCRIPTION: Placeholder for the Python implementation of the onStateChange functionality in Orama Cloud Client, which is marked as coming soon.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Single Property Sorting in Kotlin with Orama Cloud
DESCRIPTION: Kotlin implementation for sorting search results by a single property. The example demonstrates sorting by the 'year' property in ascending order when searching for 'prestige'.

LANGUAGE: kotlin
CODE:
val searchParams = SearchParams.builder(
        term = "prestige"
    )
  .sortBy([
    sortByDirective("year", SortByOrder.ASC)
  ])
  .build()

val results = client.search(searchParams, MyDoc.serializer())

----------------------------------------

TITLE: Filtering Search Results by String Property in Python
DESCRIPTION: Python placeholder code for filtering search results by string property in Orama.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Using askStream method with Orama SDK in Swift
DESCRIPTION: Demonstrates how to use the askStream method in Swift to get chunks of the answer as they are streamed from the server. The method returns an async sequence.

LANGUAGE: swift
CODE:
let answer = try await answerSession.askStream(params: AnswerParams.AskParams(
  query: "What is Orama?",
  userData: nil,
  related: nil
))

for try await msg in answer {
  print(msg)
}

----------------------------------------

TITLE: Handling Message Changes in Orama SDK
DESCRIPTION: Demonstrates how to use the onMessageChange event handler to respond to streamed message updates from the server. This event is triggered with each chunk of data, allowing real-time rendering of messages as they are updated.

LANGUAGE: javascript
CODE:
const answerSession = orama.createAnswerSession({
  events: {
    onMessageChange: (messages) => {
      console.log(messages);
      // [
      //   { role: 'user', content: 'What is Orama?' },
      //   { role: 'assistant', content: 'Orama is a next-generation answer engine' }
      // ]
    },
  },
});

await answerSession.ask({
  term: "What is Orama?",
});

LANGUAGE: swift
CODE:
let answerSession = AnswerSession(params: answerParams)
  .on(event: .messageChange) { print($0) }

  try await answerSession.ask(params: AnswerParams.AskParams(
    query: "What is Orama?",
    userData: nil,
    related: nil
  ))

// [
//   { role: 'user', content: 'What is Orama?' },
//   { role: 'assistant', content: 'Orama is a next-generation answer engine' }
// ]

LANGUAGE: kotlin
CODE:
val answerSession = AnswerSession(answerParams, events = object: AnswerEventListener<MyDoc> {
  override fun onMessageChange(data: String) {
      println(data)
  }
})

val answer = answerSession.ask(AskParams(
  query = "Query is Orama?"
))

LANGUAGE: python
CODE:
print("coming soon")

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Using ask method with Orama SDK in Kotlin
DESCRIPTION: Demonstrates how to use the ask method in Kotlin to get a complete answer. The method accepts AskParams with a query parameter.

LANGUAGE: kotlin
CODE:
val answer = answerSession.ask(AskParams(
  query = "What is Orama?"
))

----------------------------------------

TITLE: Single Property Sorting in PHP with Orama Cloud
DESCRIPTION: PHP implementation for sorting search results by a single property. This example shows how to sort by the 'year' property in descending order when searching for 'prestige'.

LANGUAGE: php
CODE:
use OramaCloud\Client;
use OramaCloud\Client\Query;
use OramaCloud\Client\QueryParams\SortByOrder;

$query = (new Query())
    ->term('prestige')
    ->sortBy('year' SortByOrder::DESC); // optional, default is "ASC"

$results = $client->search($query);

----------------------------------------

TITLE: Using ask method with Orama SDK in Swift
DESCRIPTION: Shows how to use the ask method in Swift to get a complete answer. The method accepts parameters like query and optional userData and related parameters.

LANGUAGE: swift
CODE:
let answer = try await answerSession.ask(params: AnswerParams.AskParams(
  query: "What is Orama?",
  userData: nil,
  related: nil
))

----------------------------------------

TITLE: Tracking Source Changes in Orama SDK
DESCRIPTION: Shows how to implement the onSourceChange event handler to access search results as they are computed. This provides developers with real-time access to the sources used for generating answers, including metrics like count and performance data.

LANGUAGE: javascript
CODE:
const answerSession = orama.createAnswerSession({
  events: {
    onSourceChange: (sources) => {
      console.log(
        `Got ${sources.count} sources in ${sources.elapsed.formatted}.`
      );
      console.log(
        `Top three sources are: ${sources.hits
          .map((hit) => hit.document.title)
          .join(", ")}`
      );

      // Got 15 sources in 78ms.
      // Top three sources are: What is Orama, How Orama works, Why Orama is the best
    },
  },
});

await answerSession.ask({
  term: "What is Orama?",
});

LANGUAGE: swift
CODE:
let answerSession = AnswerSession(params: answerParams)
  .on(event: .onSourceChange) {
    print("Got \($0.count) sources in \($0.elapsed.formatted).")
    print("Top three sources are: \($0.hits.map { hit in hit.document.title }.joined(separator: ", "))")
  }

  try await answerSession.ask(params: AnswerParams.AskParams(
    query: "What is Orama?",
    userData: nil,
    related: nil
  ))

  // Got 15 sources in 78ms.
  // Top three sources are: What is Orama, How Orama works, Why Orama is the best

LANGUAGE: kotlin
CODE:
val answerSession = AnswerSession(answerParams, events = object: AnswerEventListener<MyDoc> {
  override fun onSourceChanged(sources: List<Hit<MyDoc>>) {
    println("Got ${sources.size}")
  }
})

val answer = answerSession.ask(AskParams(
    query = "Query is Orama?"
))

LANGUAGE: python
CODE:
print("coming soon")

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Implementing Faceted Search in Swift
DESCRIPTION: Swift implementation of faceted search using OramaCloudClient, showing how to configure various facet types and build search parameters with the Swift SDK.

LANGUAGE: swift
CODE:
import OramaCloudClient

struct MyDoc: Codable {
  let title: String
  let description: String
}

let clientParams = OramaClientParams(endpoint: "<Your Orama Cloud Endpoint>", apiKey: "<Your Orama Cloud API Key>")
let client = OramaClient(params: clientParams)

let searchParams = ClientSearchParams.builder(
    term: "Movie about cars and racing",
    mode: .hybrid
  )
  .properties(["description"]) // optional
  .facets([
    "category.primary": .string(limit: 3, order: .desc),
    "category.secondary": .string(limit: 2, order: .desc),
    "rating": .number(ranges: [
      ClientSearchParams.Facet.NumberRange(from: 0, to: 3),
      ClientSearchParams.Facet.NumberRange(from: 3, to: 7),
      ClientSearchParams.Facet.NumberRange(from: 7, to: 10),
    ]),
    "isFavorite": .boolean(isTrue: true, isFalse: true),
  ])
  .build()

let searchResults: SearchResults<MyDoc> = try await client.search(query: searchParams)

----------------------------------------

TITLE: Implementing Faceted Search in Python
DESCRIPTION: Python implementation placeholder for faceted search in Orama, indicating that the Python SDK support is coming soon.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Regenerating Last Answer in Kotlin
DESCRIPTION: Shows how to use the Orama Kotlin SDK to ask a question and regenerate the last answer. The example includes asking with parameters, regenerating the answer, and retrieving session messages.

LANGUAGE: kotlin
CODE:
var answer = answerSession.ask(AskParams(
  query = "What is Orama?"
))

answer = answerSession.regenerateLast()

val messages = answerSession.getMessages()

// [
//   { role: 'user', content: 'What is Orama?' },
//   { role: 'assistant', content: 'Orama is a next-generation answer engine' }
// ]

----------------------------------------

TITLE: Aborting answer sessions in Python
DESCRIPTION: Placeholder for the Python implementation of the abortAnswer method, which is coming soon.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Using askStream method with Orama SDK in Kotlin
DESCRIPTION: Shows how to use the askStream method in Kotlin to get chunks of the answer as they are streamed from the server. The method handles incoming messages through a callback.

LANGUAGE: kotlin
CODE:
val answer = answerSession.askStream(AskParams(
  query = "What is Orama?"
), this)

answer.incoming {
  println(it)
}

----------------------------------------

TITLE: Implementing Faceted Search in Kotlin
DESCRIPTION: Kotlin implementation of faceted search with Orama, demonstrating how to build search parameters with various facet configurations using the Kotlin SDK.

LANGUAGE: kotlin
CODE:
val searchParams = SearchParams.builder(
        term = "Movie about cars and racing",
        mode = Mode.HYBRID,
    )
    .properties(listOf("description"))
    .facets(
        mapOf(
            "category.primary" to Facet.StringFacet(limit = 3, order = Order.DESC),
            "category.secondary" to Facet.StringFacet(limit = 2, order = Order.DESC),
            "rating" to Facet.NumberFacet(
                ranges = listOf(
                    Facet.NumberRange(from = 0, to = 3),
                    Facet.NumberRange(from = 3, to = 7),
                    Facet.NumberRange(from = 7, to = 10)
                )
            ),
            "isFavorite" to Facet.BooleanFacet(isTrue = true, isFalse = true)
        )
    )
    .build()

val results = client.search(searchParams, MyDoc.serializer())

----------------------------------------

TITLE: Installing Orama Cloud JavaScript SDK with npm
DESCRIPTION: Command to install the Orama Cloud JavaScript SDK using npm package manager.

LANGUAGE: bash
CODE:
npm install @oramacloud/client

----------------------------------------

TITLE: Regenerating Last Answer in JavaScript
DESCRIPTION: Shows how to ask a question and regenerate the last answer using the JavaScript SDK. The code demonstrates asking a question, regenerating the answer with optional streaming control, and retrieving the conversation messages.

LANGUAGE: javascript
CODE:
// Ask the question
await answerSession.ask({ term: "What is Orama?" });

// Regenerate the answer
// "stream" is true by default, but you can set it to false if you want to get the entire answer at once
await answerSession.regenerateLast({ stream: false });

// Check the messages
const messages = answerSession.getMessages();

console.log(messages);

// [
//   { role: 'user', content: 'What is Orama?' },
//   { role: 'assistant', content: 'Orama is a next-generation answer engine' }
// ]

----------------------------------------

TITLE: Handling answer aborted events in PHP
DESCRIPTION: Placeholder for the PHP implementation of handling onAnswerAborted events, which is coming soon.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Filtering Search Results by String Property in Swift
DESCRIPTION: Swift placeholder code for filtering search results by string property in Orama.

LANGUAGE: swift
CODE:
print("coming soon")

----------------------------------------

TITLE: Placeholder for PHP Polygon Filtering Implementation
DESCRIPTION: This is a placeholder for the upcoming PHP implementation of polygon-based filtering in Orama.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Getting all messages in Swift
DESCRIPTION: Demonstrates how to retrieve all the messages in a session using the getMessages method in Swift. The method returns an array of messages with role and content properties.

LANGUAGE: swift
CODE:
let messages = answerSession.getMessages()

print(messages)

// [
//   { role: 'user', content: 'What is Orama?' },
//   { role: 'assistant', content: 'Orama is a next-generation answer engine' }
// ]

----------------------------------------

TITLE: Getting related queries in Kotlin
DESCRIPTION: Placeholder for the Kotlin implementation of getting related queries, which is coming soon.

LANGUAGE: kotlin
CODE:
print("coming soon")

----------------------------------------

TITLE: Using onStateChange Event in Swift with Orama Cloud
DESCRIPTION: Example of using the onStateChange event in Swift with Orama Cloud. This demonstrates creating an answer session with a state change handler and querying the API.

LANGUAGE: swift
CODE:
let answerSession = AnswerSession(params: answerParams)
  .on(event: .stateChange) { state in
    if state.allSatisfy({ !$0.loading }) {
      print(state)
    }
  }

  try await answerSession.ask(params: AnswerParams.AskParams(
    query: "What is Orama?",
    userData: nil,
    related: nil
  ))

// [
//   {
//     interactionId: "clyru4rl8000008l062b26fk1",
//     query: "What is Orama?",
//     response: "Orama is a next-generation answer engine [...]",
//     relatedQueries: ["How Orama works", "Why Orama is the best", "Vector search with orama"],
//     sources: [
//       {
//         count: 15,
//         elapsed: { formatted: "78ms", raw: 78000000 },
//         hits: [
//           { document: { title: "What is Orama", ... } },
//           { document: { title: "How Orama works", ... } },
//           { document: { title: "Why Orama is the best", ... } }
//         ]
//       }
//     ],
//     translatedQuery: { term: "What is Orama?" },
//     aborted: false,
//     loading: false
//   }
// ]

----------------------------------------

TITLE: Filtering Search Results by String Property in PHP
DESCRIPTION: PHP code showing how to filter Orama search results by exact string value using the WhereOperator.

LANGUAGE: php
CODE:
use OramaCloud\Client;
use OramaCloud\Client\Query;
use OramaCloud\Client\QueryParams\WhereOperator;

$query = (new Query())
  ->term('prestige')
  ->where('tag', WhereOperator::EQ, 'new');

$results = $client->search($query);

----------------------------------------

TITLE: Handling answer aborted events in Kotlin
DESCRIPTION: Demonstrates how to handle the onAnswerAborted event in Kotlin. The event is part of the AnswerEventListener interface and receives a boolean indicating the abort status.

LANGUAGE: kotlin
CODE:
val answerSession = AnswerSession(answerParams, events = object: AnswerEventListener<MyDoc> {
  override fun onAnswerAborted(aborted: Boolean) {
    if (aborted) {
      println("The user has aborted this answer generation!")
    }
  }
}, abortHandler = abortHandler)

----------------------------------------

TITLE: Getting all messages in JavaScript
DESCRIPTION: Shows how to retrieve all the messages in a session using the getMessages method in JavaScript. The method returns an array of messages with role and content properties.

LANGUAGE: javascript
CODE:
const messages = answerSession.getMessages();

console.log(messages);

// [
//   { role: 'user', content: 'What is Orama?' },
//   { role: 'assistant', content: 'Orama is a next-generation answer engine' }
// ]

----------------------------------------

TITLE: Placeholder for Swift Radius Filtering Implementation
DESCRIPTION: This is a placeholder for the upcoming Swift implementation of radius-based filtering in Orama.

LANGUAGE: swift
CODE:
print("coming soon")

----------------------------------------

TITLE: Python Placeholder for Orama Cloud Search
DESCRIPTION: A placeholder for the upcoming Python implementation of Orama Cloud search functionality.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Monitoring Message Loading State in Orama SDK
DESCRIPTION: Shows how to implement the onMessageLoading event handler to track when an answer request starts or ends. This helps developers provide loading indicators or other visual feedback to users during answer generation.

LANGUAGE: javascript
CODE:
const answerSession = orama.createAnswerSession({
  events: {
    onMessageLoading: (loading) => {
      if (loading) {
        console.log("Still loading the messages...");
      }
    },
  },
});

await answerSession.ask({
  term: "What is Orama?",
});

LANGUAGE: swift
CODE:
let answerSession = AnswerSession(params: answerParams)
  .on(event: .onMessageLoading) { 
    if $0 {
      print("Still loading the messages...")
    }
  }

  try await answerSession.ask(params: AnswerParams.AskParams(
    query: "What is Orama?",
    userData: nil,
    related: nil
  ))

LANGUAGE: kotlin
CODE:
val answerSession = AnswerSession(answerParams, events = object: AnswerEventListener<MyDoc> {
  override fun onMessageLoading(loading: Boolean) {
    if (loading) {
      println("Still loading the messages...")
    }
  }
})

val answer = answerSession.ask(AskParams(
  query = "Query is Orama?"
))

LANGUAGE: python
CODE:
print("coming soon")

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Clearing Session in JavaScript
DESCRIPTION: Shows how to clear an answer session using the JavaScript SDK. This resets all conversation messages to an empty array.

LANGUAGE: javascript
CODE:
answerSession.clearSession();

----------------------------------------

TITLE: Using onStateChange Event in Kotlin with Orama Cloud
DESCRIPTION: Example of using the onStateChange event in Kotlin with Orama Cloud. This shows setting up an answer session with a listener object that handles state changes.

LANGUAGE: kotlin
CODE:
val answerSession = AnswerSession(answerParams, events = object: AnswerEventListener<MyDoc> {
  override fun onStateChange(state: MutableList<Interaction<MyDoc>>) {
    println(state)
  }
})

// [
//   {
//     interactionId: "clyru4rl8000008l062b26fk1",
//     query: "What is Orama?",
//     response: "Orama is a next-generation answer engine [...]",
//     relatedQueries: ["How Orama works", "Why Orama is the best", "Vector search with orama"],
//     sources: [
//       {
//         count: 15,
//         elapsed: { formatted: "78ms", raw: 78000000 },
//         hits: [
//           { document: { title: "What is Orama", ... } },
//           { document: { title: "How Orama works", ... } },
//           { document: { title: "Why Orama is the best", ... } }
//         ]
//       }
//     ],
//     translatedQuery: { term: "What is Orama?" },
//     aborted: false,
//     loading: false
//   }
// ]

----------------------------------------

TITLE: Importing OramaClient in Deno
DESCRIPTION: Shows how to import the Orama Cloud client in a Deno environment using the npm namespace.

LANGUAGE: typescript
CODE:
import { OramaClient } from "npm:@oramacloud/client";

----------------------------------------

TITLE: Installing Orama Plugin QPS via npm
DESCRIPTION: Command to install the Orama Plugin Quantum Proximity Scoring package from npm.

LANGUAGE: sh
CODE:
npm i @orama/plugin-qps

----------------------------------------

TITLE: Setting JSON UserContext in Swift
DESCRIPTION: Demonstrates how to provide structured user context as a JSON string in Swift for the Orama answer session.

LANGUAGE: swift
CODE:
import OramaCloudClient

let clientParams = OramaClientParams(endpoint: "", apiKey: "")
let orama = OramaClient(params: clientParams)

let answerParams = AnswerParams<E2EDoc>(
  userContext: "{ name: \"John Doe\", musicTaste: [\"Rock\", \"Punk\", \"Metal\"], customerSince: 2019 }",
  inferenceType: .documentation,
  initialMessages: [],
  oramaClient: orama,
)
let answerSession = AnswerSession(params: answerParams)

----------------------------------------

TITLE: Placeholder for Kotlin Implementation in Orama SDK
DESCRIPTION: This is a placeholder snippet indicating that Kotlin support for Orama is coming soon. It simply prints a message rather than providing actual implementation.

LANGUAGE: kotlin
CODE:
print("coming soon")

----------------------------------------

TITLE: Performing Full-Text Search with Filtering
DESCRIPTION: Shows how to perform a full-text search query with additional filtering options. This example searches for "red shoes" while filtering for items with a price greater than 99.99.

LANGUAGE: typescript
CODE:
import { OramaClient } from "@oramacloud/client";

const client = new OramaClient({
  endpoint: "YOUR_ENDPOINT_URL",
  api_key: "YOUR_PUBLIC_API_KEY",
});

const results = await client.search({
  term: "red shoes",
  where: {
    price: {
      gt: 99.99,
    },
  },
});

----------------------------------------

TITLE: Getting related queries in Python
DESCRIPTION: Placeholder for the Python implementation of getting related queries, which is coming soon.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Setting Kotlin UserContext for Answer Session
DESCRIPTION: Shows how to create an Orama answer session with user context in Kotlin.

LANGUAGE: kotlin
CODE:
import com.orama.client.OramaClient

val client = OramaClient(apiKey = "", endpoint = "" )

val answerParams = AnswerParams(
  oramaClient = client,
  serializer = MyDoc.serializer(),
  userContext = "The user is a very skilled programmer but has never used Orama before."
)

val answerSession = AnswerSession(answerParams)

----------------------------------------

TITLE: Installing Orama Web Components with yarn
DESCRIPTION: Command to install Orama's framework-agnostic web components using yarn package manager. These components can be used in any JavaScript environment.

LANGUAGE: bash
CODE:
yarn add @orama/wc-components

----------------------------------------

TITLE: Updating System Prompt Configuration During Session in JavaScript
DESCRIPTION: This code shows how to update the system prompt configuration during an active answer session. The setSystemPromptConfiguration method allows for changing the system prompts to be used for subsequent questions.

LANGUAGE: javascript
CODE:
import { OramaClient } from '@oramacloud/client'

const client = new OramaClient({
  endpoint: 'your-endpoint',
  api_key: 'your-api-key'
})

const session = client
  .createAnswerSession({
    events: { ... },
    systemPrompts: ['sp_italian-prompt-with-greetings-2bx7d3']
  })

session.setSystemPromptConfiguration({
  systemPrompts: ['sp_italian-prompt-with-greetings-2bx7d3'] // Overrides the previous configuration
})

await session.ask({
  term: 'what is Orama?'
})

----------------------------------------

TITLE: Installing Orama Cloud Kotlin SDK with Gradle
DESCRIPTION: Gradle configuration for adding the Orama Cloud Kotlin SDK to a project using build.gradle.kts. Requires mavenCentral repository.

LANGUAGE: kotlin
CODE:
repositories {
    mavenCentral()
}

val oramaClientVersion = "0.0.3"

dependencies {
    implementation "com.orama:oramacloud-client-kotlin:${oramaClientVersion}"
}

----------------------------------------

TITLE: Placeholder for Kotlin Implementation with String User Data
DESCRIPTION: This is a placeholder for the Kotlin implementation of providing string user data in Orama. It simply prints a message indicating future support.

LANGUAGE: kotlin
CODE:
print("coming soon")

----------------------------------------

TITLE: Installing Orama Angular Components with yarn
DESCRIPTION: Command to install Orama's Angular-specific components using yarn package manager. These components are designed specifically for Angular applications.

LANGUAGE: bash
CODE:
yarn add @orama/angular-components

----------------------------------------

TITLE: Using Orama Cloud PHP SDK for Search Operations
DESCRIPTION: Example of using the PHP SDK to create a client and perform a search with filtering. Demonstrates setting up the client connection and building a query with conditions.

LANGUAGE: php
CODE:
use OramaCloud\Client;
use OramaCloud\Client\Query;
use OramaCloud\Client\QueryParams\WhereOperator;
use OramaCloud\Client\QueryParams\SortByOrder;

$client = new Client([
  'endpoint' => '<Your Orama Cloud Endpoint>',
  'api_key' => '<Your Orama Cloud API Key>'
]);

$query = (new Query())
  ->term('red shoes')
  ->mode('fulltext') // 'fulltext' is optional, but can also be "vector" or "hybrid"
  ->where('price', WhereOperator::GT, 99.99);

$results = $client->search($query);

----------------------------------------

TITLE: Getting all messages in Kotlin
DESCRIPTION: Shows how to retrieve all the messages in a session using the getMessages method in Kotlin. The method returns an array of messages with role and content properties.

LANGUAGE: kotlin
CODE:
val messages = answerSession.getMessages()

// [
//   { role: 'user', content: 'What is Orama?' },
//   { role: 'assistant', content: 'Orama is a next-generation answer engine' }
// ]

----------------------------------------

TITLE: Placeholder for Python Implementation in Orama SDK
DESCRIPTION: This is a placeholder snippet indicating that Python support for Orama is coming soon. It prints a message rather than providing actual implementation.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: AnswerSession State Change Example
DESCRIPTION: This example shows the state objects that are emitted during the lifecycle of an AnswerSession. It demonstrates how the state evolves from initial query to search results and finally to the generated response.

LANGUAGE: javascript
CODE:
[
  // As soon as you call the `.ask` method, the state will be populated as follows:
  {
    interactionId: "cm2anntif000008l84lvqfrvc", // Unique interaction ID for the session
    aborted: false, // If the session was aborted
    loading: true, // If the session is loading
    query: "john", // The query that was sent to the API
    response: "", // The response from the API, which is empty until the API responds
    sources: null, // The sources used to generate the response
    error: false, // If there was an error
    errorMessage: null, // The error message, if any
  },
  // Then, Orama will perform search and push the sources to the state:
  {
    interactionId: "cm2anntif000008l84lvqfrvc",
    aborted: false,
    loading: false,
    query: "john",
    response: "",
    sources: { // The sources used to generate the response, in the same format as the search result from Orama
      count: 1,
      elapsed: { raw: 0.123, formatted: "100μs" },
      hits: [
        {
          id: "1-19238",
          score: 0.8,
          document: { name: "John Doe" }
        }
      ]
    },
    error: false,
    errorMessage: null,
  },
  // Then, Orama will update this message with incoming chunks from OpenAI (via the secure proxy):
  {
    interactionId: "cm2anntif000008l84lvqfrvc",
    aborted: false,
    loading: false,
    query: "john",
    response: "Hello, John Doe!",
    sources: {
      count: 1,
      elapsed: { raw: 0.123, formatted: "100μs" },
      hits: [
        {
          id: "1-19238",
          score: 0.8,
          document: { name: "John Doe" }
        }
      ]
    },
    error: false,
    errorMessage: null,
  }
]

----------------------------------------

TITLE: Setting Object UserContext in JavaScript
DESCRIPTION: Example of providing structured user context as an object with customer information for personalized responses.

LANGUAGE: javascript
CODE:
const answerSession = orama.createAnswerSession({
  userContext: {
    name: 'John Doe',
    musicTaste: ['Rock', 'Punk', 'Metal'],
    customerSince: 2019
  }
})

----------------------------------------

TITLE: Installing Orama Web Components with npm
DESCRIPTION: Command to install Orama's framework-agnostic web components using npm package manager. These components can be used in any JavaScript environment.

LANGUAGE: bash
CODE:
npm i @orama/wc-components

----------------------------------------

TITLE: Configuring Document Metadata with Frontmatter in Markdown
DESCRIPTION: Shows how to add frontmatter metadata to a Docusaurus document to customize its appearance in the sidebar. The example includes setting a custom sidebar label and position.

LANGUAGE: markdown
CODE:
---
sidebar_label: 'Hi!'
sidebar_position: 3
---

# Hello

This is my **first Docusaurus document**!

----------------------------------------

TITLE: Regenerating Last Answer in PHP
DESCRIPTION: Placeholder for the PHP implementation of regenerating the last answer in Orama. The feature is marked as coming soon.

LANGUAGE: php
CODE:
echo "coming soon"

----------------------------------------

TITLE: Using getNanosecondsTime for Precise Time Measurement in JavaScript
DESCRIPTION: Shows how to use the getNanosecondsTime utility to get the current time with nanosecond precision as a BigInt value.

LANGUAGE: javascript
CODE:
import { getNanosecondsTime } from "@orama/orama/internals";

await getNanosecondsTime(); // 1363500821581208n

----------------------------------------

TITLE: Installing Orama React Components with npm
DESCRIPTION: Command to install Orama's React-specific components using npm package manager. These components are designed specifically for React applications.

LANGUAGE: bash
CODE:
npm i @orama/react-components

----------------------------------------

TITLE: Regenerating Last Answer in Python
DESCRIPTION: Placeholder for the Python implementation of regenerating the last answer in Orama. The feature is marked as coming soon.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Getting all messages in PHP
DESCRIPTION: Placeholder for the PHP implementation of getting all messages, which is coming soon.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Simplified Tokenizer Customization in Orama
DESCRIPTION: A simplified approach to customizing the default tokenizer by directly passing configuration options without using the createTokenizer method.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";

const movieDB = create({
  schema: {
    title: "string",
    director: "string",
  },
  components: {
    tokenizer: { language: "english", stemming: false },
  },
});

----------------------------------------

TITLE: Inserting Snapshot in Orama Cloud using Swift SDK
DESCRIPTION: Swift implementation for creating a snapshot in an Orama Cloud index. It defines a document struct, initializes the CloudManager with an API key, and calls the snapshot method with an array of documents.

LANGUAGE: swift
CODE:
import OramaCloudClient

// This is an example document. It should reflect your index schema.
struct OramaDoc: Codable {
  let id: String
  let name: String
  let age: Int
}

let cloudManager = CloudManager(apiKey: "YOUR_API_KEY")
let indexManager = cloudManager.index<OramaDoc>("my-index-id")

await try indexManager.snapshot([
  OramaDoc(id: "1", name: "John Doe", age: 30),
  OramaDoc(id: "2", name: "Jane Doe", age: 25)
])

----------------------------------------

TITLE: Installing Orama React Components with yarn
DESCRIPTION: Command to install Orama's React-specific components using yarn package manager. These components are designed specifically for React applications.

LANGUAGE: bash
CODE:
yarn add @orama/react-components

----------------------------------------

TITLE: Getting all messages in Python
DESCRIPTION: Placeholder for the Python implementation of getting all messages, which is coming soon.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Custom Elapsed Time Formatting in Orama
DESCRIPTION: This example shows how to implement a custom formatElapsedTime component to format the elapsed time in search results. The component adds a custom suffix to the elapsed time value.

LANGUAGE: javascript
CODE:
import { create, insert, search } from "@orama/orama";

const movieDB = create({
  schema: {
    title: "string",
    director: "string",
    plot: "string",
    year: "number",
    isFavorite: "boolean",
  },
  components: {
    formatElapsedTime(n) {
      return `${Number(n)} - custom`;
    },
  },
});

insert(movieDB, {
  title: "Harry Potter and the Philosopher's Stone",
  director: "Chris Columbus",
  plot: "Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.",
  year: 2001,
  isFavorite: false,
});

const results = search(movieDB, { term: "Harry" });

// This will print something like: 100 - custom
console.log(results.elapsed);

----------------------------------------

TITLE: Installing Orama Vue Components with npm
DESCRIPTION: Command to install Orama's Vue-specific components using npm package manager. These components are designed specifically for Vue applications.

LANGUAGE: bash
CODE:
npm i @orama/vue-components

----------------------------------------

TITLE: Handling answer aborted events in JavaScript
DESCRIPTION: Shows how to handle the onAnswerAborted event in JavaScript, which is triggered when an answer session is aborted. The event callback receives a boolean indicating the abort status.

LANGUAGE: javascript
CODE:
const answerSession = orama.createAnswerSession({
  events: {
    onAnswerAborted: (aborted) => {
      alert("The user aborted the answer session!");
    },
  },
});

----------------------------------------

TITLE: Using ask method with Orama SDK in Python
DESCRIPTION: Placeholder for the Python implementation of the ask method, which is coming soon.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Implementing beforeRemove Hook in Orama Plugin
DESCRIPTION: Example of a plugin with a beforeRemove hook that runs before document removal. The hook receives the Orama instance and the document ID to be removed as arguments.

LANGUAGE: javascript
CODE:
function beforeRemovePluginExample() {
  return {
    name: "before-remove-plugin",
    beforeRemove: (orama, id) => {
      console.log("Orama instance: ", orama);
      console.log("Document id: ", id);
    },
  };
}

----------------------------------------

TITLE: Inserting Documents with cURL
DESCRIPTION: Demonstrates how to use cURL to send a document insertion request to the Orama Cloud API. This approach uses the notify endpoint with an upsert operation to add or update documents based on their ID.

LANGUAGE: bash
CODE:
curl https://api.oramasearch.com/api/v1/webhooks/$INDEX_ID/notify \
  -H "authorization: Bearer $PRIVATE_API_KEY" \
  -d "{ \"upsert\": [{ \"id\": \"3\", \"name\": \"Rick Sanchez\", \"age\": 80 }] }"

----------------------------------------

TITLE: Installing Orama Angular Components with pnpm
DESCRIPTION: Command to install Orama's Angular-specific components using pnpm package manager. These components are designed specifically for Angular applications.

LANGUAGE: bash
CODE:
pnpm i @orama/angular-components

----------------------------------------

TITLE: Creating Links in Markdown Using Relative File Paths
DESCRIPTION: Shows how to create links in Markdown using relative file paths to reference other Markdown files.

LANGUAGE: md
CODE:
Let's see how to [Create a page](./create-a-page.md).

----------------------------------------

TITLE: Using ask method with Orama SDK in PHP
DESCRIPTION: Placeholder for the PHP implementation of the ask method, which is coming soon.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Implementing afterRemove Hook in Orama Plugin
DESCRIPTION: Example of a plugin with an afterRemove hook that runs after document removal. The hook receives the Orama instance and the document ID that was removed as arguments.

LANGUAGE: javascript
CODE:
function afterRemovePluginExample() {
  return {
    name: "after-remove-plugin",
    afterRemove: (orama, id) => {
      console.log("Orama instance: ", orama);
      console.log("Document id: ", id);
    },
  };
}

----------------------------------------

TITLE: Streaming Chat Completion with OramaProxy
DESCRIPTION: This snippet shows how to use OramaProxy to stream chat completion responses from OpenAI using asynchronous iterators. This approach allows you to receive and process the response in chunks as they arrive, which is useful for displaying progressive responses.

LANGUAGE: js
CODE:
import { OramaProxy } from '@oramacloud/secure-proxy'

const proxy = new OramaProxy({
  api_key: 'zrqplaxa-H46c3f-D9vk8Fg_eJlomMP3'
})

const chatParams = {
  model 'openai/gpt-4',
  messages: [{ role: 'user', content: 'Who is Michael Scott?' }]
}

for await (const message of proxy.chatStream(chatParams)) {
  console.log(message)
}

// Michael
// Scott is
// a fictional
//  character from the
//  television show
// "The
// Office" (US
// version)
// ...

----------------------------------------

TITLE: Performing Chat Completion with OramaProxy (Single Response)
DESCRIPTION: This code demonstrates how to use OramaProxy to execute a chat completion request with OpenAI models and receive the full response as a single string. It initializes the proxy and makes a request without exposing your API key to the client.

LANGUAGE: js
CODE:
import { OramaProxy } from '@oramacloud/secure-proxy'

const proxy = new OramaProxy({
  api_key: '<YOUR API KEY>'
})

const chatParams = {
  model 'openai/gpt-4',
  messages: [{ role: 'user', content: 'Who is Michael Scott?' }]
}

const response = await proxy.chat(chatParams)
console.log(response)

// "Michael Scott is a fictional character from the television show "The Office" (US version) ..."

----------------------------------------

TITLE: PHP Placeholder for State Access in Orama Cloud
DESCRIPTION: Placeholder for the PHP implementation of accessing the state in Orama Cloud Client, which is marked as coming soon.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Saving and Loading Orama Database with Highlights
DESCRIPTION: This snippet demonstrates how to persist an Orama database state with highlight information using the saveWithHighlight and loadWithHighlight functions from the plugin.

LANGUAGE: javascript
CODE:
import { create, insert } from "@orama/orama";
import {
  afterInsert as highlightAfterInsert,
  saveWithHighlight,
  loadWithHighlight,
} from "@orama/plugin-match-highlight";

const db = create({
  schema: {
    text: "string",
  },
  plugins: [
    // Register the hook
    {
      name: "highlight",
      afterInsert: highlightAfterInsert,
    },
  ],
});

insert(db, { text: "hello world" });

const savedDB = await saveWithHighlight(db);

const restoredDB = await loadWithHighlight(savedDB);

----------------------------------------

TITLE: Deleting Documents with JavaScript
DESCRIPTION: Shows how to delete a document by its ID using the Orama Cloud JavaScript client. This example initializes the CloudManager with your API key and uses the delete method on a specific index.

LANGUAGE: javascript
CODE:
import { CloudManager } from "@oramacloud/client"

const oramaCloudManager = new CloudManager({
  api_key: process.env.ORAMA_CLOUD_PRIVATE_API_KEY,
})

const myIndex = oramaCloudManager.index("my-index-id")

await myIndex.delete(["2"])

----------------------------------------

TITLE: Configuring Orama Analytics Plugin
DESCRIPTION: Shows how to configure the Orama analytics plugin in the Docusaurus configuration file. This includes enabling analytics and setting API key and index ID from environment variables.

LANGUAGE: js
CODE:
plugins: [
	  [
	    "@orama/plugin-docusaurus-v3",
	    {
	      plugins: {
	        analytics: {
	          enabled: true,
	          apiKey: process.env.ORAMA_ANALYTICS_API_KEY,
	          indexId: process.env.ORAMA_ANALYTICS_INDEX_ID,
	        },
	      },
	    },
	  ],
];

----------------------------------------

TITLE: PHP Placeholder for Interaction Type in Orama Cloud
DESCRIPTION: Placeholder for the PHP implementation of the Interaction type in Orama Cloud Client, which is marked as coming soon.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Example of a Valid Geopoint Object in JavaScript
DESCRIPTION: This code shows the structure of a valid geopoint object in Orama. A geopoint contains 'lat' (latitude) and 'lon' (longitude) properties, both represented as numbers in degrees.

LANGUAGE: javascript
CODE:
{
  lat: 45.46409,
  lon: 9.19192
}

----------------------------------------

TITLE: Implementing afterUpdate Hook in Orama Plugin
DESCRIPTION: Example of a plugin with an afterUpdate hook that runs after document update. The hook receives the Orama instance and the document ID that was updated as arguments.

LANGUAGE: javascript
CODE:
function afterUpdatePluginExample() {
  return {
    name: "after-update-plugin",
    afterUpdate: (orama, id) => {
      console.log("Orama instance: ", orama);
      console.log("Document id: ", id);
    },
  };
}

----------------------------------------

TITLE: Accessing Session State in JavaScript with Orama Cloud
DESCRIPTION: Example of accessing the current state of an answer session in JavaScript using the state getter. This provides a static snapshot of the interactions after making a query.

LANGUAGE: javascript
CODE:
const answerSession = orama.createAnswerSession();

await answerSession.ask({
  term: "What is Orama?",
});

console.log(answerSession.state);

// [
//   {
//     interactionId: "clyru4rl8000008l062b26fk1",
//     query: "What is Orama?",
//     response: "Orama is a next-generation answer engine [...]",
//     relatedQueries: ["How Orama works", "Why Orama is the best", "Vector search with orama"],
//     sources: [
//       {
//         count: 15,
//         elapsed: { formatted: "78ms", raw: 78000000 },
//         hits: [
//           { document: { title: "What is Orama", ... } },
//           { document: { title: "How Orama works", ... } },
//           { document: { title: "Why Orama is the best", ... } }
//         ]
//       }
//     ],
//     translatedQuery: { term: "What is Orama?" },
//     aborted: false,
//     loading: false
//   }
// ]

----------------------------------------

TITLE: Sample JSON Document Structure for Orama Cloud Index
DESCRIPTION: Example of the JSON structure for documents to be stored in an Orama Cloud index. Each document has an ID, name (string), and age (number) field, matching the defined schema.

LANGUAGE: json
CODE:
[
  {
    "id": "1",
    "name": "John Doe",
    "age": 30
  },
  {
    "id": "2",
    "name": "Jane Doe",
    "age": 25
  }
]

----------------------------------------

TITLE: Creating Database Schema for Grouping Example
DESCRIPTION: Example of creating an Orama database with a schema for clothing items, then inserting multiple documents that will be used in the grouping examples.

LANGUAGE: javascript
CODE:
const db = create({
  schema: {
    id: "string",
    type: "string",
    design: "string",
    color: "string",
    rank: "number",
    isPromoted: "boolean",
  },
});
const ids = insertMultiple(db, [
  {
    id: "0",
    type: "t-shirt",
    design: "A",
    color: "blue",
    rank: 3,
    isPromoted: true,
  },
  {
    id: "1",
    type: "t-shirt",
    design: "A",
    color: "green",
    rank: 5,
    isPromoted: false,
  },
  {
    id: "2",
    type: "t-shirt",
    design: "A",
    color: "red",
    rank: 4,
    isPromoted: false,
  },
  {
    id: "3",
    type: "t-shirt",
    design: "B",
    color: "blue",
    rank: 4,
    isPromoted: false,
  },
  {
    id: "4",
    type: "t-shirt",
    design: "B",
    color: "green",
    rank: 4,
    isPromoted: true,
  },
  {
    id: "5",
    type: "t-shirt",
    design: "B",
    color: "white",
    rank: 5,
    isPromoted: false,
  },
  {
    id: "6",
    type: "t-shirt",
    design: "B",
    color: "gray",
    rank: 5,
    isPromoted: true,
  },
  {
    id: "7",
    type: "sweatshirt",
    design: "A",
    color: "yellow",
    rank: 3,
    isPromoted: true,
  },
  {
    id: "8",
    type: "sweatshirt",
    design: "A",
    color: "green",
    rank: 4,
    isPromoted: false,
  },
]);

----------------------------------------

TITLE: Deleting Documents with Swift
DESCRIPTION: Demonstrates how to delete a document using the Orama Cloud Swift client. This example initializes the CloudManager and IndexManager, then uses the delete method to remove a document by its ID.

LANGUAGE: swift
CODE:
import OramaCloudClient

// This is an example document. It should reflect your index schema.
struct OramaDoc: Codable {
  let id: String
  let name: String
  let age: Int
}

let cloudManager = CloudManager(apiKey: "YOUR_API_KEY")
let indexManager = cloudManager.index<OramaDoc>("my-index-id")

await try indexManager.delete(["2"])

----------------------------------------

TITLE: Implementing beforeInsertMultiple Hook in Orama Plugin
DESCRIPTION: Example of a plugin with a beforeInsertMultiple hook that runs before batch insertions. The hook receives the Orama instance and the documents to be inserted as arguments.

LANGUAGE: javascript
CODE:
function beforeInsertMultiplePluginExample() {
  return {
    name: "before-insert-multiple-plugin",
    beforeInsertMultiple: (orama, documents) => {
      console.log("Orama instance: ", orama);
      console.log("Documents to be inserted: ", documents);
    },
  };
}

----------------------------------------

TITLE: Creating Directory Structure for Translations
DESCRIPTION: Creates the required directory structure for storing translated content in French and copies the original English introduction file to be translated.

LANGUAGE: bash
CODE:
mkdir -p i18n/fr/docusaurus-plugin-content-docs/current/

cp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md

----------------------------------------

TITLE: Defining a Basic String Schema in JSON
DESCRIPTION: JSON schema definition with title and tag string properties for use with Orama search filtering.

LANGUAGE: json
CODE:
{
  "title": "string",
  "tag": "string",
}

----------------------------------------

TITLE: Sorting with Nested Properties in Orama
DESCRIPTION: Shows how to sort search results using nested properties with dot notation. This example demonstrates sorting by the nested property 'meta.rating'.

LANGUAGE: javascript
CODE:
const results = search(db, {
  term: "prestige",
  sortBy: {
    property: "meta.rating",
  },
});

----------------------------------------

TITLE: Migrating from Orama Hooks to Plugins System
DESCRIPTION: Diff example showing how to migrate from Orama's legacy hooks system to the new plugin architecture. The example converts a beforeInsert hook to a plugin while maintaining the same functionality and signature.

LANGUAGE: javascript
CODE:
import { create } from '@orama/orama'

const db = create({
  schema: {
    name: 'string'
  },
- components: {
-   beforeInsert: (orama, id, document) => {
-     console.log('Orama instance: ', orama)
-     console.log('Document id: ', id)
-     console.log('Document to be inserted: ', document)
-   }
- }
+ plugins: [
+   {
+     name: 'before-insert-plugin',
+     beforeInsert: (orama, id, document) => {
+       console.log('Orama instance: ', orama)
+       console.log('Document id: ', id)
+       console.log('Document to be inserted: ', document)
+     }
+   }
+ ]
})

----------------------------------------

TITLE: Handling Answer Aborts in Orama SDK
DESCRIPTION: Demonstrates how to use the onAnswerAborted event handler to detect when an answer generation process is aborted. This allows developers to respond appropriately when users cancel an in-progress answer request.

LANGUAGE: javascript
CODE:
const answerSession = orama.createAnswerSession({
  events: {
    onAnswerAborted: (aborted) => {
      alert("The user has aborted this answer generation!");
    },
  },
});

await answerSession.ask({
  term: "What is Orama?",
});

setTimeout(() => {
  answerSession.abortAnswer();
}, 1000);

LANGUAGE: swift
CODE:
print("coming soon")

LANGUAGE: kotlin
CODE:
val abortHandler = AbortHandler()

val answerSession = AnswerSession(answerParams, events = object: AnswerEventListener<MyDoc> {
  override fun onAnswerAborted(aborted: Boolean) {
    if (aborted) {
      println("The user has aborted this answer generation!")
    }
  }
}, abortHandler = abortHandler)

val answer = answerSession.ask(AskParams(
  query = "Query is Orama?"
))

delay(2000)
abortHandler.abort()

LANGUAGE: python
CODE:
print("coming soon")

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Filtering Search Results by String Property in JavaScript
DESCRIPTION: JavaScript code showing how to filter Orama search results by exact string value in the tag property.

LANGUAGE: javascript
CODE:
const results = client.search({
  term: "prestige",
  where: {
    tag: "new",
  },
});

----------------------------------------

TITLE: Implementing Reverse Order Sorting in Orama
DESCRIPTION: Demonstrates how to specify reverse order sorting by using the 'order' parameter. The example shows creating a database and searching with descending order sorting.

LANGUAGE: javascript
CODE:
const db = create({
  schema: {
    title: "string",
    year: "number",
    inPromotion: "boolean",
    meta: {
      tag: "string",
      rating: "number",
      favorite: "boolean",
    },
  },
});
const results = search(db, {
  term: "prestige",
  sortBy: {
    property: "title", // or 'year', 'inPromotion'
    order: "DESC", // default is "ASC"
  },
});

----------------------------------------

TITLE: Deleting Documents with Kotlin
DESCRIPTION: Shows how to delete a document using the Orama Cloud Kotlin client. This example defines a document data class and uses coroutines to handle the asynchronous delete operation.

LANGUAGE: swift
CODE:
import com.orama.client.CloudManager
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.Serializable

@Serializable
data class OramaDoc (
  let id: String
  let name: String
  let age: Int
)

val cloudManager = CloudManager(apiKey = "YOUR_API_KEY")
val indexManager = cloudManager.index<OramaDoc>(indexId)

runBlocking {
  index.delete(listOf("2"), OramaDoc.serializer())
}

----------------------------------------

TITLE: Console Output of afterInsert Example
DESCRIPTION: The output from running the code with the custom afterInsert component. It shows the 'INSERTED' log message and the search count result.

LANGUAGE: plaintext
CODE:
INSERTED
2

----------------------------------------

TITLE: Defining a Schema with Number Properties in JSON
DESCRIPTION: JSON schema definition with string, number, and nested properties for use with Orama's numeric filtering.

LANGUAGE: json
CODE:
{
  "title": "string",
  "year": "number",
  "meta": {
    "rating": "number",
    "length": "number",
    "favorite": "boolean",
    "tags": "string",
  }
}

----------------------------------------

TITLE: Using Minimum Threshold (0) in Orama Search
DESCRIPTION: Setting the threshold to 0 returns only documents that contain all the search terms. In this case, only documents with both 'slim' and 'fit' will be returned.

LANGUAGE: javascript
CODE:
const results = search(db, {
  term: "slim fit",
  threshold: 0,
});

----------------------------------------

TITLE: Tokenizer Interface Definition in TypeScript
DESCRIPTION: Defines the interface that tokenizer components must implement. The tokenizer is responsible for breaking text into tokens and includes language specification and normalization caching.

LANGUAGE: typescript
CODE:
interface Tokenizer {
  language: string;
  normalizationCache: Map<string, string>;
  tokenize: (
    raw: string,
    language?: string,
    prop?: string
  ) => string[] | Promise<string[]>;
}

----------------------------------------

TITLE: Handling Query Translation in Orama SDK
DESCRIPTION: Demonstrates the onQueryTranslated event handler which is triggered when Orama translates a natural language query into a structured search query. This event provides insight into how Orama interprets user input based on the index schema.

LANGUAGE: javascript
CODE:
const answerSession = orama.createAnswerSession({
  events: {
    onQueryTranslated: (query) => {
      console.log(query);
      // { term: 'Halfpipe skateboard', where: { price: { lt: 100 } } }
    },
  },
});

await answerSession.ask({
  term: "What's the best skateboard for halfpipes under $100?",
});

LANGUAGE: swift
CODE:
let answerSession = AnswerSession(params: answerParams)
  .on(event: .onQueryTranslated) { print($0) }

  try await answerSession.ask(params: AnswerParams.AskParams(
    query: "What's the best skateboard for halfpipes under $100?",
    userData: nil,
    related: nil
  ))

  // { term: 'Halfpipe skateboard', where: { price: { lt: 100 } } }

LANGUAGE: kotlin
CODE:
val answerSession = AnswerSession(answerParams, events = object: AnswerEventListener<MyDoc> {
  override fun onQueryTranslated(query: Map<String, JsonElement>) {
    println(query)
  }
})

val answer = answerSession.ask(AskParams(
  query = "What's the best skateboard for halfpipes under $100?"
))

LANGUAGE: python
CODE:
print("coming soon")

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Filtering Search Results by Number Properties in Python
DESCRIPTION: Python placeholder code for filtering search results by number properties in Orama.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Batch Inserting Documents with insertMultiple
DESCRIPTION: Shows how to insert multiple documents at once using the insertMultiple function, which is more efficient for large datasets as it prevents blocking the event loop.

LANGUAGE: javascript
CODE:
const docs = [
  {
    title: "The prestige",
    director: "Christopher Nolan",
    plot: "Two friends and fellow magicians become bitter enemies after a sudden tragedy. As they devote themselves to this rivalry, they make sacrifices that bring them fame but with terrible consequences.",
    year: 2006,
    isFavorite: true,
  },
  {
    title: "Big Fish",
    director: "Tim Burton",
    plot: "Will Bloom returns home to care for his dying father, who had a penchant for telling unbelievable stories. After he passes away, Will tries to find out if his tales were really true.",
    year: 2004,
    isFavorite: true,
  },
  {
    title: "Harry Potter and the Philosopher's Stone",
    director: "Chris Columbus",
    plot: "Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.",
    year: 2001,
    isFavorite: false,
  },
];

insertMultiple(movieDB, docs);

----------------------------------------

TITLE: Importing Orama Types in TypeScript
DESCRIPTION: Example showing how to import types from Orama in a TypeScript project. This demonstrates the recommended approach for working with Orama types.

LANGUAGE: typescript
CODE:
import type { Language } from "@orama/orama";

----------------------------------------

TITLE: Customizing Orama's Default Index Component
DESCRIPTION: Shows how to extend the default index component in Orama by importing it and overriding specific methods, specifically the load method for custom deserialization.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";
import { index as defaultIndex } from "@orama/orama/components";

const index = await defaultIndex.createIndex();
const movieDB = create({
  schema: {
    title: "string",
    director: "string",
  },
  components: {
    // This index will only customize the deserialization
    index: {
      ...index,
      load(documentsIdsMapper, raw) {
        // Do something here
      },
    },
  },
});

----------------------------------------

TITLE: Filtering Search Results by Number Properties in PHP
DESCRIPTION: PHP code showing how to filter Orama search results by numeric properties using various operators.

LANGUAGE: php
CODE:
use OramaCloud\Client;
use OramaCloud\Client\Query;
use OramaCloud\Client\QueryParams\WhereOperator;

$query = (new Query())
  ->term('prestige')
  ->where('year', WhereOperator::GTE, 2000)
  ->where('meta.rating', WhereOperator::BETWEEN, [5, 10])
  ->where('meta.length', WhereOperator::LTE, 60);

$results = $client->search($query);

----------------------------------------

TITLE: Faceted Search Result Format
DESCRIPTION: Example JSON response from an Orama faceted search, showing the structure of facet data in the search results with count and value distribution for different facet types.

LANGUAGE: json
CODE:
{
  "elapsed": ...,
  "count": ...,
  "hits": { ... },
  "facets": {
    "categories.first": {
      "count": 14,
      "values": {
        "Action": 4,
        "Adventure": 3,
        "Comedy": 2,
      }
    },
    "categories.second": {
      "count": 14,
      "values": {
        "Cars": 4,
        "Racing": 3,
      }
    },
    "rating": {
      "count": 3,
      "values": {
        "0-3": 5,
        "3-7": 15,
        "7-10": 80,
      }
    },
    "isFavorite": {
      "count": 2,
      "values": {
        "true": 5,
        "false": 95,
      }
    },
  }
}

----------------------------------------

TITLE: Updating the Create Method with New Component
DESCRIPTION: Shows how to modify the create method to initialize the new component and its data. This example adds the ShiningDetector component to the Orama object and initializes the shining data with a default value.

LANGUAGE: diff
CODE:

import { createShiningDetector } from '../components/shiningDetector.js'

export async function create({ schema, language, components }: CreateArguments): Promise<Orama> {

  // ...

  const orama = {
    data: {},
    caches: {},
    // ...
+   shiningDetector: components.shiningDetector ?? createShiningDetector()
  } as Orama

  orama.data = {
    index: await orama.index.create(orama, schema),
    docs: await orama.documentsStore.create(orama),
    shining: { Paolo: 10 }
  }

----------------------------------------

TITLE: Aborting answer sessions in Kotlin
DESCRIPTION: Demonstrates how to abort an ongoing answer session in Kotlin using an AbortHandler. The example includes creating an abort handler, initializing a session with it, and calling abort after a delay.

LANGUAGE: kotlin
CODE:
val myAbortHandler = AbortHandler()

val answerSession = AnswerSession(answerParams, abortHandler = myAbortHandler)

val answer = answerSession.ask(AskParams(
  query = "Query is Orama?"
))

delay(2000)
myAbortHandler.abort()

----------------------------------------

TITLE: Filtering Search Results by Boolean Property in Swift
DESCRIPTION: Swift placeholder code for filtering search results by boolean property in Orama.

LANGUAGE: swift
CODE:
print("coming soon")

----------------------------------------

TITLE: String Facet Result Example
DESCRIPTION: Example JSON structure showing how string-type facets are returned in search results, including the total count of values and their distribution.

LANGUAGE: json
CODE:
{
  "count": 14,           // Total number of values, now limited to 3 (size)
  "values": {
    "Action": 4,        // Number of documents that have this value
    "Adventure": 3,     // Number of documents that have this value
    "Comedy": 2,        // Number of documents that have this value
  }
}

----------------------------------------

TITLE: Configuring Orama Vitepress Plugin in Vitepress Config
DESCRIPTION: This snippet demonstrates how to import and configure the Orama Vitepress plugin in your Vitepress configuration file. The plugin automatically indexes all .md files in your documentation directory once integrated.

LANGUAGE: javascript
CODE:
import { OramaPlugin } from "@orama/plugin-vitepress";

export default {
  // ...
  extends: {
    vite: {
      plugins: [OramaPlugin()],
    },
  },
};

----------------------------------------

TITLE: Exact Match Searching in Orama
DESCRIPTION: This example demonstrates exact matching, which requires the search term to match exactly rather than being contained within a property value. This has priority over typo tolerance.

LANGUAGE: javascript
CODE:
const searchResult = search(movieDB, {
  term: "Chris",
  properties: ["director"],
  exact: true,
});

----------------------------------------

TITLE: Filtering Search Results by Boolean Property in Kotlin
DESCRIPTION: Kotlin placeholder code for filtering search results by boolean property in Orama.

LANGUAGE: kotlin
CODE:
print("coming soon")

----------------------------------------

TITLE: Number Facet Result Example
DESCRIPTION: Example JSON structure showing how number-type facets with range configurations are returned in search results, including the count of ranges and their distribution.

LANGUAGE: json
CODE:
{
  "count": 3,    // Total number of ranges
  "values": {
    "0-3": 5,    // Number of documents that have a value between 0 and 3 (inclusive)
    "3-7": 15,   // Number of documents that have a value between 3 and 7 (inclusive)
    "7-10": 80,  // Number of documents that have a value between 7 and 10 (inclusive)
  }
}

----------------------------------------

TITLE: Limiting Search Results in Orama
DESCRIPTION: This example shows how to limit the number of results returned from a search query. It restricts the result set to just one matching document.

LANGUAGE: javascript
CODE:
const searchResult = search(movieDB, {
  term: "Chris",
  properties: ["director"],
  limit: 1,
});

----------------------------------------

TITLE: Using askStream method with Orama SDK in Python
DESCRIPTION: Placeholder for the Python implementation of the askStream method, which is coming soon.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Placeholder for Kotlin Radius Filtering Implementation
DESCRIPTION: This is a placeholder for the upcoming Kotlin implementation of radius-based filtering in Orama.

LANGUAGE: kotlin
CODE:
print("coming soon")

----------------------------------------

TITLE: Boolean Facet Result Example
DESCRIPTION: Example JSON structure showing how boolean-type facets are returned in search results, with counts for true and false values.

LANGUAGE: json
CODE:
{
  "count": 2,      // Total number of values
  "values": {
    "true": 5,    // Number of documents that have a `true` value
    "false": 95,  // Number of documents that have a `false` value
  }
}

----------------------------------------

TITLE: Configuring Orama Plugin in Vitepress
DESCRIPTION: This snippet demonstrates how to import and configure the Orama plugin in a Vitepress configuration file to enable search functionality. The plugin is added to the Vite plugins array within the extends section of the configuration.

LANGUAGE: javascript
CODE:
// .vitepress/config.js

import { defineConfig } from 'vitepress'
import { OramaPlugin } from '@orama/plugin-vitepress'

export default defineConfig({
  // ...
  extends: {
    vite: {
      plugins: [OramaPlugin()]
    },
  }
})

----------------------------------------

TITLE: Custom Elapsed Time Format in Orama Search Results
DESCRIPTION: This snippet shows the format of search results with a custom elapsed time formatter. Instead of the default object with raw and formatted values, it displays a custom string.

LANGUAGE: javascript
CODE:
{
  elapsed: 'custom value: 181208', // instead of { raw: 181208, formatted: '181μs' }
  count: 2,
  hits: [...]
}

----------------------------------------

TITLE: Placeholder for Swift Polygon Filtering Implementation
DESCRIPTION: This is a placeholder for the upcoming Swift implementation of polygon-based filtering in Orama.

LANGUAGE: swift
CODE:
print("coming soon")

----------------------------------------

TITLE: Defining a Geopoint Schema for Geosearch in JSON
DESCRIPTION: JSON schema definition with name and location properties, where location is a geopoint type for geosearch functionality.

LANGUAGE: json
CODE:
{
  "name": "string",
  "location": "geopoint",
}

----------------------------------------

TITLE: Using Multiple String Values in Orama Filters
DESCRIPTION: This example demonstrates how to filter search results using multiple string values. The search will return documents that match any of the provided string values in the specified property.

LANGUAGE: javascript
CODE:
const results = search(db, {
  term: "prestige",
  where: {
    tag: ["favorite", "new"],
  },
});

----------------------------------------

TITLE: Aborting answer sessions in JavaScript
DESCRIPTION: Shows how to abort an ongoing answer session using the abortAnswer method in JavaScript. This can be used when a user cancels an answer request.

LANGUAGE: javascript
CODE:
answerSession.abortAnswer();

----------------------------------------

TITLE: Placeholder for Kotlin Polygon Filtering Implementation
DESCRIPTION: This is a placeholder for the upcoming Kotlin implementation of polygon-based filtering in Orama.

LANGUAGE: kotlin
CODE:
print("coming soon")

----------------------------------------

TITLE: Placeholder for PHP Radius Filtering Implementation
DESCRIPTION: This is a placeholder for the upcoming PHP implementation of radius-based filtering in Orama.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Implementing Orama Plugin PT15 in JavaScript
DESCRIPTION: Example code showing how to import and use the Orama Plugin PT15 with the Orama database. The plugin is added to the create function when initializing a new database with a simple schema.

LANGUAGE: javascript
CODE:
import { create } from '@orama/orama'
import { pluginPT15 } from '@orama/plugin-pt15'

const db = await create({
  schema: {
    description: 'string',
  },
  plugins: [ pluginPT15() ],
})

----------------------------------------

TITLE: Handling Missing Fields and Extra Fields in Orama
DESCRIPTION: Illustrates Orama's validation behavior with missing and extra fields. Missing fields are allowed, and extra fields not defined in the schema are ignored during indexing.

LANGUAGE: javascript
CODE:
import { create, insert } from "@orama/orama";

const movieDB = create({
  schema: {
    title: "string",
    year: "number",
  },
});

insert(movieDB, {
  title: "The prestige",
  // `year` field is missing but it's ok
  // year: 2006,
  // Extra fields `director` and `isFavorite` will not be indexed
  director: "Christopher Nolan",
  isFavorite: true,
});

----------------------------------------

TITLE: Placeholder for Python Polygon Filtering Implementation
DESCRIPTION: This is a placeholder for the upcoming Python implementation of polygon-based filtering in Orama.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Performing Vector Search with useSearch Hook
DESCRIPTION: Demonstrates how to perform a vector search using the useSearch hook by setting the mode to 'vector'. The example includes parameters for similarity threshold and result limit.

LANGUAGE: tsx
CODE:
import { useSearch } from "@oramacloud/react-client";

function Search() {
  const { results, error } = useSearch({
    term: "Super Mario videogame",
    mode: "vector",
    similarity: 0.8, // Minimum similarity, between 0 and 1. Default is 0.8 (80% similar).
    limit: 5, // How many results to return. Default is 10.
  });

  return (
    <>
      {results.hits.map((hit) => (
        <div key={hit.id}>
          <pre> {JSON.stringify(hit.document, null, 2)} </pre>
        </div>
      ))}
    </>
  );
}

----------------------------------------

TITLE: Accessing Session State in Swift with Orama Cloud
DESCRIPTION: Example of accessing the current state of an answer session in Swift using the getState method. This provides a static snapshot of the interactions after making a query.

LANGUAGE: swift
CODE:
let answerSession = AnswerSession(params: answerParams)

try await answerSession.ask(params: AnswerParams.AskParams(
  query: "What is Orama?",
  userData: nil,
  related: nil
))

print(answerSession.getState())

// [
//   {
//     interactionId: "clyru4rl8000008l062b26fk1",
//     query: "What is Orama?",
//     response: "Orama is a next-generation answer engine [...]",
//     relatedQueries: ["How Orama works", "Why Orama is the best", "Vector search with orama"],
//     sources: [
//       {
//         count: 15,
//         elapsed: { formatted: "78ms", raw: 78000000 },
//         hits: [
//           { document: { title: "What is Orama", ... } },
//           { document: { title: "How Orama works", ... } },
//           { document: { title: "Why Orama is the best", ... } }
//         ]
//       }
//     ],
//     translatedQuery: { term: "What is Orama?" },
//     aborted: false,
//     loading: false
//   }
// ]

----------------------------------------

TITLE: Upcoming Python Support for Vector Search in Orama Cloud
DESCRIPTION: This is a placeholder for the upcoming Python client support for vector search in Orama Cloud. Currently only prints a message indicating future availability.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Installing Orama Cloud JavaScript SDK with pnpm
DESCRIPTION: Command to install the Orama Cloud JavaScript SDK using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm i @oramacloud/client

----------------------------------------

TITLE: Installing Orama Plugin Embeddings via npm
DESCRIPTION: Command to install the Orama Plugin Embeddings package using npm. This is the first step to integrate text embedding capabilities into your Orama database.

LANGUAGE: sh
CODE:
npm i @orama/plugin-embeddings

----------------------------------------

TITLE: Importing Orama in Browser via CDN
DESCRIPTION: Example of how to import Orama directly in a browser using an HTML script tag with type="module" and the unpkg CDN service. This approach allows using Orama without a build step.

LANGUAGE: html
CODE:
<html>
  <body>
    <script type="module">
      import {
        create,
        search,
        insert,
      } from "https://unpkg.com/@orama/orama@latest/dist/index.js";

      // ...
    </script>
  </body>
</html>

----------------------------------------

TITLE: Importing Types in TypeScript with Orama Plugins
DESCRIPTION: This code snippet shows the recommended way to import types from Orama plugins in TypeScript projects. It demonstrates importing the persistToFile type from the data persistence plugin using standard import syntax.

LANGUAGE: typescript
CODE:
import type { persistToFile } from "@orama/plugin-data-persistence";

----------------------------------------

TITLE: Installing Orama Cloud Swift SDK with CocoaPods
DESCRIPTION: Configuration snippet for installing the Orama Cloud Swift SDK using CocoaPods. Requires iOS 10.0 or later and sets up the pod dependency.

LANGUAGE: ruby
CODE:
source 'https://github.com/CocoaPods/Specs.git'
platform :ios, '10.0'
use_frameworks!

target '<Your Target Name>' do
    pod 'OramaCloudClient', '~> 0.0.1'
end

----------------------------------------

TITLE: Defining Nested Properties in Orama Schema with JSON
DESCRIPTION: Demonstrates how to define nested properties in an Orama schema using JSON. This example shows a schema for movie data with nested 'cast' property that contains 'director' and 'actors' fields.

LANGUAGE: json
CODE:
{
    "title": "string",
    "plot": "string",
    "cast": {
        "director": "string",
        "actors": "string[]"
    }
}

----------------------------------------

TITLE: PHP Placeholder for onStateChange in Orama Cloud
DESCRIPTION: Placeholder for the PHP implementation of the onStateChange functionality in Orama Cloud Client, which is marked as coming soon.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: TypeScript Import for Parsedoc Plugin Types
DESCRIPTION: Shows how to properly import types from the @orama/plugin-data-parsedoc package in TypeScript projects. Intended for use with moduleResolution set to Node16 or NodeNext in tsconfig.json.

LANGUAGE: typescript
CODE:
import type { populateFromGlob } from "@orama/plugin-data-parsedoc";

----------------------------------------

TITLE: Installing Orama Cloud Swift SDK with Swift Package Manager
DESCRIPTION: Configuration for adding the Orama Cloud Swift SDK using Swift Package Manager in a Package.swift file.

LANGUAGE: swift
CODE:
dependencies: [
    .package(url: "https://github.com/oramasearch/oramacloud-client-swift.git", from: "0.0.1")
]

----------------------------------------

TITLE: Installing TensorflowJS WebGL Backend for Browser Environments
DESCRIPTION: Command to install the recommended TensorflowJS backend for browser environments. The WebGL backend provides GPU acceleration for better performance in browser applications.

LANGUAGE: sh
CODE:
npm i @tensorflow/tfjs-backend-webgl

----------------------------------------

TITLE: Implementing ShowcaseImage Component for Static File Options in JSX
DESCRIPTION: This code snippet demonstrates the implementation of a ShowcaseImage component that displays options for importing JSON and CSV files to Orama Cloud. The component includes thumbnails, links, titles, and descriptions for each import option.

LANGUAGE: jsx
CODE:
<ShowcaseImage
  entries={[
    {
      thumbnail: import('../../../../../assets/data-sources/json-file.jpg'),
      href: '/cloud/data-sources/static-files/json-file',
      title: 'JSON File',
      description: 'Import a JSON file from your computer.',
    },
    {
      thumbnail: import('../../../../../assets/data-sources/csv-file.jpg'),
      href: '/cloud/data-sources/static-files/csv-file',
      title: 'CSV File',
      description: 'Import a CSV file from your computer.',
    },
  ]}
/>

----------------------------------------

TITLE: Implementing afterInsertMultiple Hook in Orama Plugin
DESCRIPTION: Example of a plugin with an afterInsertMultiple hook that runs after batch insertions. The hook receives the Orama instance and the inserted documents as arguments.

LANGUAGE: javascript
CODE:
function afterInsertMultiplePluginExample() {
  return {
    name: "after-insert-multiple-plugin",
    afterInsertMultiple: (orama, documents) => {
      console.log("Orama instance: ", orama);
      console.log("Documents inserted: ", documents);
    },
  };
}

----------------------------------------

TITLE: Installing Orama Cloud PHP SDK with Composer
DESCRIPTION: Command to install the Orama Cloud PHP SDK using Composer. Requires PHP 7.3 or later.

LANGUAGE: bash
CODE:
composer require oramacloud/client

----------------------------------------

TITLE: Styling Root Variables and Main Frame with CSS
DESCRIPTION: Custom CSS styles that define the content width for the documentation page and create a decorative background effect with a blurred circular element.

LANGUAGE: css
CODE:
:root {
  --sl-content-width: 1024px !important;
}
.main-frame {
  overflow: hidden;
  position: relative;
}
.main-frame:before {
  position: absolute;
  z-index: 0;
  content: '';
  top: 60px;
  right: -25px;
  width: 500px;
  height: 500px;
  max-width: 70vw;
  background-color: var(--sl-color-blur-bg);
  border-radius: 800px;
  filter: blur(67px);
  will-change: transform;
  transform: perspective(1200px);
  opacity: 0.3;
}

----------------------------------------

TITLE: Creating Answer Session with Swift SDK
DESCRIPTION: Demonstrates how to set up an answer session using the Orama Swift client library with context and inference type parameters.

LANGUAGE: swift
CODE:
import OramaCloudClient

let clientParams = OramaClientParams(endpoint: "YOUR_ENDPOINT_URL", apiKey: "YOUR_PUBLIC_API_KEY")
let orama = OramaClient(params: clientParams)

let answerParams = AnswerParams<E2EDoc>(
  userContext: "The user is a very skilled programmer but has never used Orama before.",
  inferenceType: .documentation,
  initialMessages: [],
  oramaClient: oramaClient,
)
answerSession = AnswerSession(params: answerParams)

----------------------------------------

TITLE: Removing a Single Document from an Orama Database
DESCRIPTION: Demonstrates how to remove a single document from an Orama database using the 'remove' function and a document ID. This is the simplest way to delete data from an Orama database.

LANGUAGE: javascript
CODE:
remove(movieDB, harryPotterId);

----------------------------------------

TITLE: Advanced Configuration with Searchbox Customization
DESCRIPTION: Extended configuration for the Orama plugin that includes custom properties for the searchbox and search button components. This allows customization of the search interface elements.

LANGUAGE: javascript
CODE:
plugins: [
	  [
	    "@orama/plugin-docusaurus-v3",
	    {
	      cloud: {
	        apiKey: process.env.ORAMA_CLOUD_PRIVATE_API_KEY,
	        indexId: "YOUR_ORAMA_CLOUD_INDEX_ID",
	        deploy: "default"
	      },
	      searchbox: {
	        placeholder: "Search...",
	      }
	      searchButton: {
	        text: "Click here to search..."
	      }
	    },
	  ],
];

----------------------------------------

TITLE: Installing Orama Switch via npm
DESCRIPTION: Command to install the Orama Switch package using npm. This package allows for unified querying across Orama Cloud and OSS.

LANGUAGE: sh
CODE:
npm i @orama/switch

----------------------------------------

TITLE: Installing Orama Plugin PT15 with npm
DESCRIPTION: Command to install the Orama Plugin PT15 package using npm package manager.

LANGUAGE: sh
CODE:
npm i @orama/plugin-pt15

----------------------------------------

TITLE: Disabling Sort Functionality in Orama
DESCRIPTION: Shows how to completely disable the sorting functionality in Orama by setting the 'enabled' property to false in the sort configuration.

LANGUAGE: javascript
CODE:
const db = create({
  schema: {
    // The schema
  },
  sort: {
    enabled: false,
  },
});

----------------------------------------

TITLE: Installing Orama Plugin for Docusaurus v2 with yarn
DESCRIPTION: Command to install the Orama plugin for Docusaurus v2 using yarn package manager.

LANGUAGE: bash
CODE:
yarn add @orama/plugin-docusaurus

----------------------------------------

TITLE: Implementing Orama Switch with Orama OSS
DESCRIPTION: Example of using Orama Switch with Orama OSS. This code shows how to create a database with a defined schema and execute the same search query as used with the Cloud version.

LANGUAGE: javascript
CODE:
import { Switch } from '@orama/switch'
import { create } from '@orama/orama'

const db = await create({
  schema: {
    productName: 'string',
    price: 'number'
  }
})

const orama = new Switch(client)

const results = await orama.search({
  term: 'noise cancelling headphones',
  where: {
    price: {
      lte: 99.99
    }
  }
})

----------------------------------------

TITLE: Placeholder for PHP Implementation in Orama SDK
DESCRIPTION: This is a placeholder snippet indicating that PHP support for Orama is coming soon. It contains a simple comment rather than actual code.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Customizing Elapsed Time Format in Orama
DESCRIPTION: This snippet demonstrates how to customize the elapsed time output format by providing a custom formatElapsedTime function when creating an Orama database.

LANGUAGE: javascript
CODE:
const db = create({
  schema: {
    title: "string",
    body: "string",
  },
  components: {
    formatElapsedTime: (n: bigint) => {
      return `custom value: ${n}`;
    },
  },
});

----------------------------------------

TITLE: Configuring Orama Plugin in Docusaurus
DESCRIPTION: JavaScript configuration to add the Orama plugin to the Docusaurus configuration file. This needs to be added to the docusaurus.config.js file.

LANGUAGE: javascript
CODE:
plugins: ['@orama/plugin-docusaurus']

----------------------------------------

TITLE: Implementing Orama Switch with Orama Cloud
DESCRIPTION: Example of using Orama Switch with Orama Cloud client. This code demonstrates how to initialize the client with proper authentication and execute a search query with filtering.

LANGUAGE: javascript
CODE:
import { Switch } from '@orama/switch'
import { OramaClient } from '@oramacloud/client'

const client = new OramaClient({
  endpoint: '<Your Orama Cloud Endpoint>',
  api_key: '<Your Orama Cloud API Key>',
})

const orama = new Switch(client)

const results = await orama.search({
  term: 'noise cancelling headphones',
  where: {
    price: {
      lte: 99.99
    }
  }
})

----------------------------------------

TITLE: Installing Dependencies for Orama Project in Bash
DESCRIPTION: Command to install all required dependencies for the Orama project using pnpm package manager with frozen lockfile to ensure consistent installations across environments.

LANGUAGE: bash
CODE:
pnpm install --frozen-lockfile

----------------------------------------

TITLE: Using uniqueId for Generating Document IDs in JavaScript
DESCRIPTION: Demonstrates how to use the uniqueId utility to generate a unique identifier string for documents in Orama.

LANGUAGE: javascript
CODE:
import { uniqueId } from "@orama/orama/internals";

await uniqueId(); // 37149225-243

----------------------------------------

TITLE: Creating a React Page in Docusaurus
DESCRIPTION: This snippet demonstrates how to create a simple React page in Docusaurus by defining a React component that uses the Layout component. The component renders a heading and paragraph within the Layout.

LANGUAGE: jsx
CODE:
import React from 'react';
import Layout from '@theme/Layout';

export default function MyReactPage() {
  return (
    <Layout>
      <h1>My React page</h1>
      <p>This is a React page</p>
    </Layout>
  );
}

----------------------------------------

TITLE: Creating a React Page in Docusaurus
DESCRIPTION: This snippet demonstrates how to create a simple React page in Docusaurus by defining a React component that uses the Layout component. The component renders a heading and paragraph within the Layout.

LANGUAGE: jsx
CODE:
import React from 'react';
import Layout from '@theme/Layout';

export default function MyReactPage() {
  return (
    <Layout>
      <h1>My React page</h1>
      <p>This is a React page</p>
    </Layout>
  );
}

----------------------------------------

TITLE: Deploying Orama Website Without SSH
DESCRIPTION: Command to deploy the website using GitHub username authentication, which builds the site and pushes to the gh-pages branch.

LANGUAGE: bash
CODE:
$ GIT_USER=<Your GitHub username> yarn deploy

----------------------------------------

TITLE: Providing User Data as a String in Orama Answer Sessions (JavaScript)
DESCRIPTION: This JavaScript example demonstrates how to provide user data as a string when asking a question with Orama. The userData parameter contains a simple string describing the user's experience level.

LANGUAGE: javascript
CODE:
const answer = await answerSession.ask({
  term: "What is Orama?",
  userData: "The user is a beginner in programming"
});

----------------------------------------

TITLE: Using formatNanoseconds for Human-Readable Time Representation in JavaScript
DESCRIPTION: Demonstrates how to use the formatNanoseconds utility to convert a BigInt nanosecond value into a human-readable string representation with appropriate time units.

LANGUAGE: javascript
CODE:
import { formatNanoseconds } from "@orama/orama/internals";

await formatNanoseconds(30000n); // '30μs'

----------------------------------------

TITLE: Explicitly Defining Sidebar Structure in JavaScript
DESCRIPTION: Example of how to manually configure a Docusaurus sidebar using the sidebars.js file. This approach gives more control over sidebar organization, including categories and specific document ordering.

LANGUAGE: javascript
CODE:
export default {
  tutorialSidebar: [
    'intro',
    // highlight-next-line
    'hello',
    {
      type: 'category',
      label: 'Tutorial',
      items: ['tutorial-basics/create-a-document'],
    },
  ],
};

----------------------------------------

TITLE: Integrating Custom Tokenizer with Orama Search Engine in JavaScript
DESCRIPTION: This code demonstrates how to create an Orama search database with a custom Mandarin tokenizer. It shows the import of necessary modules and the integration of the tokenizer through the components configuration option during database creation.

LANGUAGE: javascript
CODE:
import { create } from '@orama/orama'
import { createTokenizer } from '@orama/tokenizers/mandarin'

const db = await create({
  schema: {
    myProperty: 'string',
    anotherProperty: 'number'
  },
  components: {
    tokenizer: await createTokenizer()
  }
})

----------------------------------------

TITLE: Generating a New Docusaurus Site with NPM
DESCRIPTION: Command to create a new Docusaurus site using the classic template. This installs all necessary dependencies needed to run Docusaurus.

LANGUAGE: bash
CODE:
npm init docusaurus@latest my-website classic

----------------------------------------

TITLE: Installing Orama using package managers
DESCRIPTION: Command to install the Orama search library using npm. The library can also be installed with yarn, pnpm, or bun.

LANGUAGE: shell
CODE:
npm i @orama/orama

----------------------------------------

TITLE: Installing Orama using package managers
DESCRIPTION: Command to install the Orama search library using npm. The library can also be installed with yarn, pnpm, or bun.

LANGUAGE: shell
CODE:
npm i @orama/orama

----------------------------------------

TITLE: Creating Links in Markdown Using URLs
DESCRIPTION: Shows how to create links in Markdown using URL paths. This approach uses absolute paths to reference other pages.

LANGUAGE: md
CODE:
Let's see how to [Create a page](/create-a-page).

----------------------------------------

TITLE: Creating a Basic Blog Post in Docusaurus with Markdown
DESCRIPTION: Example of creating a first blog post in Docusaurus using markdown. The snippet shows the structure of a markdown file including frontmatter with metadata such as slug, title, authors, and tags, followed by the post content.

LANGUAGE: markdown
CODE:
---
slug: greetings
title: Greetings!
authors:
  - name: Joel Marcey
    title: Co-creator of Docusaurus 1
    url: https://github.com/JoelMarcey
    image_url: https://github.com/JoelMarcey.png
  - name: Sébastien Lorber
    title: Docusaurus maintainer
    url: https://sebastienlorber.com
    image_url: https://github.com/slorber.png
tags: [greetings]
---

Congratulations, you have made your first post!

Feel free to play around and edit this post as much you like.

----------------------------------------

TITLE: Providing User Data as a String in Orama Answer Sessions (Swift)
DESCRIPTION: This Swift code shows how to ask a question with Orama while providing user data as a simple string. The userData parameter describes the user as a beginner in programming to help contextualize the response.

LANGUAGE: swift
CODE:
let answer = try await answerSession.ask(params: AnswerParams.AskParams(
  query: "What is Orama?",
  userData: "The user is a beginner in programming",
  related: nil
))

----------------------------------------

TITLE: Committing Changes to Orama Project in Bash
DESCRIPTION: Command to commit changes to the Orama project using package manager scripts that enforce linting and testing before completing the commit process.

LANGUAGE: bash
CODE:
pnpm|yarn|npm commit

----------------------------------------

TITLE: Adding a Version Dropdown in Docusaurus Configuration
DESCRIPTION: JavaScript configuration to add a version dropdown to the navbar in docusaurus.config.js, allowing users to navigate between different documentation versions.

LANGUAGE: javascript
CODE:
export default {
  themeConfig: {
    navbar: {
      items: [
        // highlight-start
        {
          type: 'docsVersionDropdown',
        },
        // highlight-end
      ],
    },
  },
};

----------------------------------------

TITLE: Configuring Orama with Italian Stop-words
DESCRIPTION: This snippet demonstrates how to create an Orama database instance with Italian stop-words configuration. It imports the necessary modules and sets up the tokenizer component with Italian stop-words to filter out common words during indexing and searching.

LANGUAGE: javascript
CODE:
import { create } from '@orama/orama'
import { stopwords as italianStopwords } from '@orama/stopwords/italian'

const db = create({
  schema: {
  components: {
    tokenizer: {
      stopwords: italianStopwords
    }
  }
})

----------------------------------------

TITLE: Building Orama Site for Production with Docusaurus
DESCRIPTION: This command builds the Orama site for production environment. It generates static HTML, JavaScript and CSS files in the 'build' folder.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Importing Orama in a Browser Module
DESCRIPTION: Demonstrates how to import Orama directly in a browser using ES modules via CDN. This approach allows using Orama without a build step in browser environments.

LANGUAGE: html
CODE:
<html>
  <body>
    <script type="module">
      import { create, insert, search } from 'https://cdn.jsdelivr.net/npm/@orama/orama@latest/+esm'
    </script>
  </body>
</html>

----------------------------------------

TITLE: Building Docusaurus for a Specific Locale
DESCRIPTION: Builds the Docusaurus site for the French locale only, generating production-ready files for this specific language.

LANGUAGE: bash
CODE:
npm run build -- --locale fr

----------------------------------------

TITLE: Testing Production Build Locally with Docusaurus
DESCRIPTION: This command serves the production build locally for testing purposes. The 'build' folder will be served at http://localhost:3000/.

LANGUAGE: bash
CODE:
npm run serve

----------------------------------------

TITLE: Placeholder for PHP Implementation with String User Data
DESCRIPTION: This is a placeholder for the PHP implementation of providing string user data in Orama. It contains a comment indicating that support will be available in the future.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Creating a Basic Document in Docusaurus with Markdown
DESCRIPTION: Example of how to create a simple Docusaurus document using Markdown. The file demonstrates basic Markdown syntax including headings and bold text formatting.

LANGUAGE: markdown
CODE:
# Hello

This is my **first Docusaurus document**!

----------------------------------------

TITLE: Building Docusaurus with All Locales
DESCRIPTION: Builds the Docusaurus site with all configured locales included, generating a multilingual production-ready site.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Performing vector search with Orama
DESCRIPTION: Shows how to implement vector search by creating a database with vector embeddings and searching using vector similarity.

LANGUAGE: javascript
CODE:
import { create, insertMultiple, search } from '@orama/orama'

const db = create({
  schema: {
    title: 'string',
    embedding: 'vector[5]', // we are using a 5-dimensional vector.
  },
});

insertMultiple(db, [
  { title: 'The Prestige', embedding: [0.938293, 0.284951, 0.348264, 0.948276, 0.56472] },
  { title: 'Barbie', embedding: [0.192839, 0.028471, 0.284738, 0.937463, 0.092827] },
  { title: 'Oppenheimer', embedding: [0.827391, 0.927381, 0.001982, 0.983821, 0.294841] },
])

const results = search(db, {
  // Search mode. Can be 'vector', 'hybrid', or 'fulltext'
  mode: 'vector',
  vector: {
    // The vector (text embedding) to use for search
    value: [0.938292, 0.284961, 0.248264, 0.748276, 0.26472],
    // The schema property where Orama should compare embeddings
    property: 'embedding',
  },
  // Minimum similarity to determine a match. Defaults to `0.8`
  similarity: 0.85,
  // Defaults to `false`. Setting to 'true' will return the embeddings in the response (which can be very large).
  includeVectors: true,
})

----------------------------------------

TITLE: Using Front Matter in Markdown Documents
DESCRIPTION: Demonstrates how to add front matter metadata at the top of Markdown documents in Docusaurus. This front matter contains document properties like id, title, description, and custom URL slugs.

LANGUAGE: text
CODE:
---
id: my-doc-id
title: My document title
description: My document description
slug: /my-custom-url
---

## Markdown heading

Markdown text with [links](./hello.md)

----------------------------------------

TITLE: Starting a Docusaurus Development Server
DESCRIPTION: Commands to navigate to the project directory and start the local development server. This builds the website locally and serves it at http://localhost:3000/.

LANGUAGE: bash
CODE:
cd my-website
npm run start

----------------------------------------

TITLE: Creating Code Blocks with Syntax Highlighting in JSX
DESCRIPTION: Shows how to create a code block with syntax highlighting for JSX in Docusaurus. Includes title specification for the code block.

LANGUAGE: jsx
CODE:
function HelloDocusaurus() {
  return <h1>Hello, Docusaurus!</h1>;
}

----------------------------------------

TITLE: Placeholder for Python Implementation with String User Data
DESCRIPTION: This is a placeholder for the Python implementation of providing string user data in Orama. It prints a message indicating that support is coming soon.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Importing Orama in Deno
DESCRIPTION: Example of importing Orama in a Deno environment using npm specifiers.

LANGUAGE: javascript
CODE:
import { create, search, insert } from 'npm:@orama/orama'

----------------------------------------

TITLE: Creating Admonitions and Callouts in Docusaurus
DESCRIPTION: Demonstrates the special syntax for creating admonitions (tip and danger) in Docusaurus Markdown. These are styled callouts to highlight important information.

LANGUAGE: text
CODE:
:::tip My tip

Use this awesome feature option

:::

:::danger Take care

This action is dangerous

:::

----------------------------------------

TITLE: Using truncate comment in Markdown
DESCRIPTION: Demonstrates the use of an HTML comment to limit blog post size in the list view. The truncate comment serves as a marker to show only content before it in preview/list contexts.

LANGUAGE: markdown
CODE:
<!--truncate-->

----------------------------------------

TITLE: Importing Orama in Deno
DESCRIPTION: Example of importing Orama in a Deno environment using npm specifiers.

LANGUAGE: javascript
CODE:
import { create, search, insert } from 'npm:@orama/orama'

----------------------------------------

TITLE: Starting Docusaurus with a Specific Locale
DESCRIPTION: Runs the Docusaurus development server with the French locale specified, allowing preview of the translated content.

LANGUAGE: bash
CODE:
npm run start -- --locale fr

----------------------------------------

TITLE: Building Static Content for Orama Website
DESCRIPTION: Command to generate static website content in the build directory, ready for deployment to any static hosting service.

LANGUAGE: bash
CODE:
$ yarn build

----------------------------------------

TITLE: Creating a Markdown Page in Docusaurus
DESCRIPTION: Example of creating a simple Markdown page in Docusaurus. The code demonstrates the minimal syntax needed to create a page with a heading and text content.

LANGUAGE: mdx
CODE:
# My Markdown page

This is a Markdown page

----------------------------------------

TITLE: Deploying Orama Website Without SSH
DESCRIPTION: Command to deploy the website without SSH by specifying GitHub username, which builds the website and pushes to the gh-pages branch.

LANGUAGE: bash
CODE:
$ GIT_USER=<Your GitHub username> yarn deploy

----------------------------------------

TITLE: Providing User Data as an Object in Orama Answer Sessions (Swift)
DESCRIPTION: This Swift code shows how to ask a question with Orama's Swift SDK while providing user data as a JSON string. The userData parameter indicates that the user is a beginner, allowing for more tailored responses.

LANGUAGE: swift
CODE:
let answer = try await answerSession.ask(params: AnswerParams.AskParams(
  query: "What is Orama?",
  userData: "{ userLevel: \"beginner\" }",
  related: nil
))

----------------------------------------

TITLE: Defining Markdown Frontmatter in Orama
DESCRIPTION: This snippet shows how to define page metadata using YAML frontmatter at the beginning of a Markdown file. The frontmatter is enclosed in triple dashes and contains the page title.

LANGUAGE: markdown
CODE:
---
title: Markdown page example
---

----------------------------------------

TITLE: Configuring Sidebar Explicitly in Docusaurus
DESCRIPTION: JavaScript configuration for manually defining the sidebar structure in a Docusaurus site. This approach gives more control over sidebar organization compared to the automatically generated sidebar.

LANGUAGE: js
CODE:
module.exports = {
  tutorialSidebar: [
    'intro',
    // highlight-next-line
    'hello',
    {
      type: 'category',
      label: 'Tutorial',
      items: ['tutorial-basics/create-a-document'],
    },
  ],
};

----------------------------------------

TITLE: Building the Orama Project in Bash
DESCRIPTION: Command to build the Orama project after dependencies have been installed, compiling source code into distributable format.

LANGUAGE: bash
CODE:
pnpm build

----------------------------------------

TITLE: Creating a Markdown Blog Post File in Docusaurus
DESCRIPTION: This snippet demonstrates how to structure a blog post file in Docusaurus, including the required frontmatter metadata (slug, title, authors, tags) and basic content. The frontmatter contains author information with names, titles, URLs, and image links, followed by the actual post content.

LANGUAGE: markdown
CODE:
---
slug: greetings
title: Greetings!
authors:
  - name: Joel Marcey
    title: Co-creator of Docusaurus 1
    url: https://github.com/JoelMarcey
    image_url: https://github.com/JoelMarcey.png
  - name: Sébastien Lorber
    title: Docusaurus maintainer
    url: https://sebastienlorber.com
    image_url: https://github.com/slorber.png
tags: [greetings]
---

Congratulations, you have made your first post!

Feel free to play around and edit this post as much you like.

----------------------------------------

TITLE: Creating Code Blocks with Syntax Highlighting
DESCRIPTION: Example of how to create code blocks with syntax highlighting in Markdown, including specifying the language and adding a title to the code block.

LANGUAGE: jsx
CODE:
function HelloDocusaurus() {
  return <h1>Hello, Docusaurus!</h1>;
}

----------------------------------------

TITLE: Building a Docusaurus Site for Production
DESCRIPTION: Command to build a Docusaurus site for production. This generates static HTML, JavaScript, and CSS files in the 'build' folder.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Adding Metadata to a Docusaurus Markdown Document
DESCRIPTION: Example of a Markdown document with front matter metadata that customizes the sidebar label and position. The metadata controls how the document appears in the automatically generated sidebar.

LANGUAGE: md
CODE:
---
sidebar_label: 'Hi!'
sidebar_position: 3
---

# Hello

This is my **first Docusaurus document**!

----------------------------------------

TITLE: Providing User Data as an Object in Orama Answer Sessions (JavaScript)
DESCRIPTION: This snippet demonstrates how to ask a question with Orama's JavaScript SDK while providing user data as an object. The example specifies that the user is a beginner, which can help tailor the response accordingly.

LANGUAGE: javascript
CODE:
const answer = await answerSession.ask({
  term: "What is Orama?",
  userData: {
    userLevel: "beginner"
  }
});

----------------------------------------

TITLE: Using MDX and React Components in Markdown
DESCRIPTION: Example of using MDX to integrate React components into Markdown, creating an interactive Highlight component with onclick functionality.

LANGUAGE: jsx
CODE:
export const Highlight = ({children, color}) => (
  <span
    style={{
      backgroundColor: color,
      borderRadius: '20px',
      color: '#fff',
      padding: '10px',
      cursor: 'pointer',
    }}
    onClick={() => {
      alert(`You clicked the color ${color} with label ${children}`)
    }}>
    {children}
  </span>
);

This is <Highlight color="#25c2a0">Docusaurus green</Highlight> !

This is <Highlight color="#1877F2">Facebook blue</Highlight> !

----------------------------------------

TITLE: Testing a Docusaurus Production Build Locally
DESCRIPTION: Command to locally serve the production build of a Docusaurus site. This serves the 'build' folder at http://localhost:3000/ for testing before deployment.

LANGUAGE: bash
CODE:
npm run serve

----------------------------------------

TITLE: Placeholder for Python Radius Filtering Implementation
DESCRIPTION: This is a placeholder for the upcoming Python implementation of radius-based filtering in Orama.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Configuring i18n Locales in Docusaurus
DESCRIPTION: Sets up the internationalization configuration in the Docusaurus config file to support English and French languages. This defines the default locale as 'en' and adds support for the 'fr' locale.

LANGUAGE: javascript
CODE:
module.exports = {
  i18n: {
    defaultLocale: 'en',
    locales: ['en', 'fr'],
  },
};

----------------------------------------

TITLE: Adding a Version Dropdown to Docusaurus Navigation using JavaScript
DESCRIPTION: This snippet shows how to modify the docusaurus.config.js file to add a version dropdown menu to the navigation bar, allowing users to switch between different documentation versions.

LANGUAGE: javascript
CODE:
module.exports = {
  themeConfig: {
    navbar: {
      items: [
        // highlight-start
        {
          type: 'docsVersionDropdown',
        },
        // highlight-end
      ],
    },
  },
};

----------------------------------------

TITLE: Configuring Front Matter in Markdown Documents
DESCRIPTION: Example of Front Matter metadata at the top of a Markdown document. Front Matter provides document metadata like ID, title, description, and custom URL slug.

LANGUAGE: text
CODE:
---
id: my-doc-id
title: My document title
description: My document description
slug: /my-custom-url
---

## Markdown heading

Markdown text with [links](./hello.md)

----------------------------------------

TITLE: Defining Docusaurus Blog Post Front Matter in YAML
DESCRIPTION: This YAML front matter defines metadata for a Docusaurus blog post, including the slug, title, author information, and tags. The front matter is placed at the beginning of a markdown file and enclosed between triple dashes.

LANGUAGE: yaml
CODE:
---
slug: first-blog-post
title: First Blog Post
authors:
  name: Gao Wei
  title: Docusaurus Core Team
  url: https://github.com/wgao19
  image_url: https://github.com/wgao19.png
tags: [hola, docusaurus]
---

----------------------------------------

TITLE: Importing Orama SDK in Deno Environment
DESCRIPTION: Shows how to import the Orama Cloud SDK when developing with Deno by using the npm namespace.

LANGUAGE: typescript
CODE:
import { OramaCloud } from "npm:@oramacloud/react-client";

----------------------------------------

TITLE: Creating Translation Directory Structure with Bash
DESCRIPTION: Creates the necessary directory structure for translated content and copies the original intro.md file to the French translation directory for subsequent translation.

LANGUAGE: bash
CODE:
mkdir -p i18n/fr/docusaurus-plugin-content-docs/current/

cp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md

----------------------------------------

TITLE: Creating Links in Markdown
DESCRIPTION: Examples of how to create links in Markdown using both URL paths and relative file paths.

LANGUAGE: md
CODE:
Let's see how to [Create a page](/create-a-page).

LANGUAGE: md
CODE:
Let's see how to [Create a page](./create-a-page.md).

----------------------------------------

TITLE: Implementing Faceted Search in PHP
DESCRIPTION: PHP implementation placeholder for faceted search in Orama, indicating that the PHP SDK support is coming soon.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Creating an Interactive Button with React in MDX
DESCRIPTION: This snippet demonstrates how to embed a React button component within MDX that shows an alert when clicked. It illustrates the integration of React functionality directly in Markdown content.

LANGUAGE: javascript
CODE:
<button onClick={() => alert('button clicked!')}>Click me!</button>

----------------------------------------

TITLE: Building Docusaurus for a Single Locale
DESCRIPTION: Command to build the Docusaurus site for a specific locale (French in this example). This generates a production-ready version of the site in the target language only.

LANGUAGE: bash
CODE:
npm run build -- --locale fr

----------------------------------------

TITLE: Adding Images in Markdown
DESCRIPTION: Examples of how to add images in Markdown using both absolute paths to the static directory and relative paths to the current file.

LANGUAGE: md
CODE:
![Docusaurus logo](/img/docusaurus.png)

LANGUAGE: md
CODE:
![Docusaurus logo](./img/docusaurus.png)

----------------------------------------

TITLE: Showcasing Orama Cloud Native Integrations with ShowcaseImage Component in JSX
DESCRIPTION: This JSX code uses the ShowcaseImage component to display available native integrations for Orama Cloud. It creates a grid of integration options with thumbnails, titles, descriptions, and links to respective documentation pages.

LANGUAGE: jsx
CODE:
<ShowcaseImage
  entries={[
    {
      thumbnail: import('../../../../../assets/data-sources/docusaurus.jpg'),
      href: '/cloud/data-sources/native-integrations/docusaurus',
      title: 'Docusaurus',
      description: 'Install a plugin to index your static site contents.',
    },
    {
      thumbnail: import('../../../../../assets/data-sources/shopify.jpg'),
      href: '/cloud/data-sources/native-integrations/shopify',
      title: 'Shopify',
      description: 'Connect your Shopify store to Orama Cloud.',
    },
    {
      thumbnail: import('../../../../../assets/data-sources/strapi.jpg'),
      href: '/cloud/data-sources/native-integrations/strapi',
      title: 'Strapi',
      description: 'Integrate Orama Cloud with your Strapi CMS.',
    },
    {
      thumbnail: import('../../../../../assets/data-sources/elastic-path.jpg'),
      href: '/cloud/data-sources/native-integrations/elasticpath',
      title: 'Elasticpath',
      description: 'Connect your Elasticpath shop to Orama Cloud.',
    },
  ]}
/>

----------------------------------------

TITLE: Starting Docusaurus with a Specific Locale
DESCRIPTION: Command to start the Docusaurus development server with a specific locale (French in this example). This allows testing and previewing the translated site.

LANGUAGE: bash
CODE:
npm run start -- --locale fr

----------------------------------------

TITLE: Using askStream method with Orama SDK in PHP
DESCRIPTION: Placeholder for the PHP implementation of the askStream method, which is coming soon.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Using Truncate Comment in Docusaurus
DESCRIPTION: Demonstrates how to limit blog post size in the list view using the truncate comment syntax in Docusaurus. This comment controls where the post is cut off in preview displays.

LANGUAGE: markdown
CODE:
<!-- truncate -->

----------------------------------------

TITLE: Example Strapi Document Structure
DESCRIPTION: An example JSON document structure from Strapi that contains a nested collection of car objects that will be indexed in Orama Cloud.

LANGUAGE: json
CODE:
{
  "id": 1,
  "owner": "John",
  "cars": [
    {
      "brand": "Toyota",
      "model": "Corolla"
    },
    {
      "brand": "Ford",
      "model": "Focus"
    }
  ]
}

----------------------------------------

TITLE: Installing Dependencies for Orama Website
DESCRIPTION: Command to install all dependencies for the Orama website using yarn package manager.

LANGUAGE: bash
CODE:
$ yarn

----------------------------------------

TITLE: Aborting answer sessions in Swift
DESCRIPTION: Placeholder for the Swift implementation of the abortAnswer method, which is coming soon.

LANGUAGE: swift
CODE:
print("coming soon")

----------------------------------------

TITLE: Building Static Content for Orama Website
DESCRIPTION: Command to generate static content into the build directory that can be served using any static contents hosting service.

LANGUAGE: bash
CODE:
$ yarn build

----------------------------------------

TITLE: Demo API Response Structure for Remote JSON Integration with Orama Cloud
DESCRIPTION: Example of the JSON response structure from the dummyjson.com/products endpoint that will be used as a data source for Orama Cloud. This structure contains product details including information like title, description, price, and other metadata.

LANGUAGE: json
CODE:
{
  "products": [
    {
      "id": 1,
      "title": "Essence Mascara Lash Princess",
      "description": "The Essence Mascara Lash Princess is a popular mascara known for its volumizing and lengthening effects. Achieve dramatic lashes with this long-lasting and cruelty-free formula.",
      "category":"beauty",
      "price":9.99,
      "discountPercentage":7.17,
      "rating":4.94,
      "stock":5,
      "tags":["beauty","mascara"],
      "brand":"Essence",
      "sku":"RCH45Q1A",
      "weight":2,
      "dimensions":{
        "width":23.17,
        "height":14.43,
        "depth":28.01
        },
      "warrantyInformation":"1 month warranty",
      "shippingInformation":"Ships in 1 month",
      "availabilityStatus":"Low Stock",
      "reviews":[
        {
          "rating":2,
          "comment":"Very unhappy with my purchase!",
          "date":"2024-05-23T08:56:21.618Z",
          "reviewerName":"John Doe",
          "reviewerEmail":"john.doe@x.dummyjson.com"
        },
        {
          "rating":5,
          "comment":"Very satisfied!",
          "date":"2024-05-23T08:56:21.618Z",
          "reviewerName":"Scarlett Wright",
          "reviewerEmail":"scarlett.wright@x.dummyjson.com"
        }
      ],
      "returnPolicy":"30 days return policy",
      "minimumOrderQuantity":24,
      "meta": {
        "createdAt":"2024-05-23T08:56:21.618Z",
        "updatedAt":"2024-05-23T08:56:21.618Z",
        "barcode":"9164035109868",
        "qrCode":"https://assets.dummyjson.com/public/qr-code.png"
      },
      "images":["https://cdn.dummyjson.com/products/images/beauty/Essence%20Mascara%20Lash%20Princess/1.png"],
      "thumbnail":"https://cdn.dummyjson.com/products/images/beauty/Essence%20Mascara%20Lash%20Princess/thumbnail.png"
    },
    // More products...
  ]
}

----------------------------------------

TITLE: Aborting answer sessions in PHP
DESCRIPTION: Placeholder for the PHP implementation of the abortAnswer method, which is coming soon.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Clearing Index Data with Swift
DESCRIPTION: Demonstrates how to clear all data from an Orama Cloud index using Swift. This example initializes the CloudManager and IndexManager, then calls the clear method to remove all documents for the next deployment.

LANGUAGE: swift
CODE:
import OramaCloudClient

// This is an example document. It should reflect your index schema.
struct OramaDoc: Codable {
  let id: String
  let name: String
  let age: Int
}

let cloudManager = CloudManager(apiKey: "YOUR_API_KEY")
let indexManager = cloudManager.index<OramaDoc>("my-index-id")

await try indexManager.clear()

----------------------------------------

TITLE: Handling answer aborted events in Swift
DESCRIPTION: Placeholder for the Swift implementation of handling onAnswerAborted events, which is coming soon.

LANGUAGE: swift
CODE:
print("coming soon")

----------------------------------------

TITLE: Inserting Snapshot in Orama Cloud using cURL
DESCRIPTION: Command-line example using cURL to create a snapshot in an Orama Cloud index. It sends a POST request to the snapshot endpoint with the index ID, authorization header with a private API key, and a JSON array of documents.

LANGUAGE: bash
CODE:
curl https://api.oramasearch.com/api/v1/webhooks/$INDEX_ID/snapshot \
  -H "authorization: Bearer $PRIVATE_API_KEY" ]
  -d "[ { \"id\": \"1\", \"name\": \"John Doe\", \"age\": 30 }, { \"id\": \"2\", \"name\": \"Jane Doe\", \"age\": 25 } ]"

----------------------------------------

TITLE: Handling answer aborted events in Python
DESCRIPTION: Placeholder for the Python implementation of handling onAnswerAborted events, which is coming soon.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Inserting Snapshot in Orama Cloud using JavaScript SDK
DESCRIPTION: JavaScript example using the Orama Cloud SDK to create a snapshot that replaces all documents in an index. It imports the CloudManager class, initializes it with a private API key, and uploads two documents.

LANGUAGE: javascript
CODE:
import { CloudManager } from "@oramacloud/client"

const oramaCloudManager = new CloudManager({
  api_key: process.env.ORAMA_CLOUD_PRIVATE_API_KEY,
})

const myIndex = oramaCloudManager.index("my-index-id")

await myIndex.snapshot([
  { id: "1", name: "John Doe", age: 30 },
  { id: "2", name: "Jane Doe", age: 25 },
])

----------------------------------------

TITLE: Getting related queries in PHP
DESCRIPTION: Placeholder for the PHP implementation of getting related queries, which is coming soon.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Sample Movie Data Structure in JSON
DESCRIPTION: Shows a sample JSON object representing a movie record with various property types, including strings, numbers, booleans, and arrays. This example illustrates the structure of data that would be indexed in Orama.

LANGUAGE: json
CODE:
{
    "title": "Avatar",
    "director": "James Cameron",
    "description": "A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.",
    "rating": 7.8,
    "year": 2009,
    "isFavorite": true,
    "genres": ["Action", "Adventure", "Fantasy"]
}

----------------------------------------

TITLE: Python SDK Placeholder for Answer Session
DESCRIPTION: Placeholder for the upcoming Python SDK implementation for Orama answer sessions.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Creating and Populating an Orama Database with Example Data
DESCRIPTION: This snippet demonstrates how to create an Orama database with a simple schema for t-shirts and insert multiple documents with similar keywords.

LANGUAGE: javascript
CODE:
import { create, insert, search } from "@orama/orama";

const db = create({
  schema: {
    title: "string",
  },
});

insert(db, { title: "Blue t-shirt, slim fit" });
insert(db, { title: "Blue t-shirt, regular fit" });
insert(db, { title: "Red t-shirt, slim fit" });
insert(db, { title: "Red t-shirt, oversize fit" });

----------------------------------------

TITLE: PHP SDK Placeholder for Answer Session
DESCRIPTION: Placeholder comment for the upcoming PHP SDK implementation for Orama answer sessions.

LANGUAGE: php
CODE:
// coming soon

----------------------------------------

TITLE: Searching for a Common Keyword in Orama
DESCRIPTION: This code shows how searching for a common term like 't-shirt' returns all documents containing that keyword. All 4 documents are returned because they all contain 't-shirt'.

LANGUAGE: javascript
CODE:
const results = search(db, {
  term: "t-shirt",
});

// results.count = 4

----------------------------------------

TITLE: Python Placeholder for State Access in Orama Cloud
DESCRIPTION: Placeholder for the Python implementation of accessing the state in Orama Cloud Client, which is marked as coming soon.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Optimizing Memory Usage for Sorting in Orama
DESCRIPTION: Shows how to optimize memory by specifying unsortable properties. This prevents Orama from creating in-memory sort indexes for properties that don't need sorting.

LANGUAGE: javascript
CODE:
const db = create({
  schema: {
    title: "string",
    year: "number",
    inPromotion: "boolean",
    meta: {
      tag: "string",
      rating: "number",
      favorite: "boolean",
    },
  },
  sortBy: {
    unsortableProperties: ["year", "meta.tag"],
  },
});

----------------------------------------

TITLE: Python SDK placeholder for Orama Cloud
DESCRIPTION: A placeholder for the upcoming Python SDK implementation.

LANGUAGE: python
CODE:
print("coming soon")

----------------------------------------

TITLE: Offsetting Search Results in Orama
DESCRIPTION: This snippet demonstrates how to skip a number of results when searching, which is useful for pagination. The offset parameter determines how many results to skip.

LANGUAGE: javascript
CODE:
const searchResult = search(movieDB, {
  term: "Chris",
  properties: ["director"],
  offset: 1,
});

----------------------------------------

TITLE: Importing Orama SDK in Deno
DESCRIPTION: Shows how to import the OramaClient from the Orama SDK when developing with Deno using the npm namespace.

LANGUAGE: typescript
CODE:
import { OramaClient } from "npm:@oramacloud/client";

----------------------------------------

TITLE: Typo-Tolerant Searching in Orama
DESCRIPTION: This demonstrates how to allow typo tolerance in searches using the Levenshtein algorithm. A tolerance of 1 will match terms with a single character difference.

LANGUAGE: javascript
CODE:
const searchResult = search(movieDB, {
  term: "Cris",
  properties: ["director"],
  tolerance: 1,
});

----------------------------------------

TITLE: Installing Dependencies for Orama Website
DESCRIPTION: Command to install all required dependencies using Yarn package manager.

LANGUAGE: bash
CODE:
$ yarn

----------------------------------------

TITLE: Orama Search Result Structure
DESCRIPTION: This snippet shows the structure of a search result object returned by Orama. It includes elapsed time, result count, and an array of hits with document data and relevance scores.

LANGUAGE: javascript
CODE:
{
  elapsed: {
    raw: 181208,
    formatted: '181μs',
  },
  count: 2,
  hits: [
    {
      id: '37149225-243',
      score: 0.23856062735983122,
      document: {
        title: 'Harry Potter and the Philosopher\'s Stone',
        director: 'Chris Columbus',
        plot: 'Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.',
        year: 2001,
        isFavorite: false
      }
    },
    {
      id: '37149225-5',
      score: 0.21267890323564321,
      document: {
        title: 'The prestige',
        director: 'Christopher Nolan',
        plot: 'Two friends and fellow magicians become bitter enemies after a sudden tragedy. As they devote themselves to this rivalry, they make sacrifices that bring them fame but with terrible consequences.',
        year: 2006,
        isFavorite: true
      }
    }
  ]
}

----------------------------------------

TITLE: Deploying Orama Website Using SSH
DESCRIPTION: Command to deploy the website using SSH authentication method, which builds the site and pushes to the deployment branch.

LANGUAGE: bash
CODE:
$ USE_SSH=true yarn deploy

----------------------------------------

TITLE: Customizing Hybrid Search Weights in Orama
DESCRIPTION: Demonstrates how to customize the importance of text vs. vector results in hybrid search by adjusting the hybridWeights parameter. This example gives 80% weight to text results and 20% to vector results.

LANGUAGE: javascript
CODE:
const results = search(db, {
  mode: "hybrid",
  term: "The Prestige",
  vector: {
    value: [0.912729, 0.49271, 0.291728, 0.93819, 0.53618],
    property: "embedding",
  },
  hybridWeights: {
    text: 0.8,
    vector: 0.2,
  },
});

----------------------------------------

TITLE: Starting Local Development Server for Orama Website
DESCRIPTION: Command to start a local development server that opens a browser window and reflects changes live without restart.

LANGUAGE: bash
CODE:
$ yarn start

----------------------------------------

TITLE: Simplified Vector Search with Orama Plugins
DESCRIPTION: Shows how to perform vector search with the secure proxy or embeddings plugins, which simplifies the process by automatically converting text to vectors without exposing API keys.

LANGUAGE: javascript
CODE:
const results = search(db, {
  mode: "vector",
  term: "Videogame for little kids with a passion about ice cream",
});

----------------------------------------

TITLE: Deploying Orama Website Using SSH
DESCRIPTION: Command to deploy the website using SSH, which builds the website and pushes to the appropriate branch.

LANGUAGE: bash
CODE:
$ USE_SSH=true yarn deploy

----------------------------------------

TITLE: Importing the search function from Orama
DESCRIPTION: Imports the search function from the Orama package to perform hybrid search queries.

LANGUAGE: javascript
CODE:
import { search } from "@orama/orama";

----------------------------------------

TITLE: Configuring i18n in Docusaurus
DESCRIPTION: Modifies the Docusaurus configuration file to add support for the French locale alongside English. Sets English as the default locale and adds French as an additional supported language.

LANGUAGE: javascript
CODE:
export default {
  i18n: {
    defaultLocale: 'en',
    locales: ['en', 'fr'],
  },
};

----------------------------------------

TITLE: Limiting Results per Group
DESCRIPTION: Example of grouping search results by design with a limit of 1 result per group, sorted by rank in descending order.

LANGUAGE: javascript
CODE:
const results = search(db, {
  term: "t-shirt",
  groupBy: {
    properties: ["design"],
    maxResult: 1, // for every group, how many results we want
  },
  sortBy: {
    property: "rank",
    order: "DESC",
  },
});

----------------------------------------

TITLE: Adding a Locale Dropdown to Docusaurus
DESCRIPTION: Updates the Docusaurus configuration to add a language selector dropdown in the navigation bar, enabling users to switch between available languages.

LANGUAGE: javascript
CODE:
export default {
  themeConfig: {
    navbar: {
      items: [
        // highlight-start
        {
          type: 'localeDropdown',
        },
        // highlight-end
      ],
    },
  },
};

----------------------------------------

TITLE: Creating an Orama Database with Geopoint Schema in JavaScript
DESCRIPTION: This snippet demonstrates how to define a schema with a geopoint property when creating an Orama database instance. The schema includes a 'name' field of type string and a 'location' field of type geopoint.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";

const db = create({
  schema: {
    name: "string",
    location: "geopoint",
  },
});

----------------------------------------

TITLE: Creating a Documentation Version in Docusaurus using Bash
DESCRIPTION: Command to create version 1.0 of documentation which copies the docs folder into versioned_docs/version-1.0 and creates a versions.json file.

LANGUAGE: bash
CODE:
npm run docusaurus docs:version 1.0

----------------------------------------

TITLE: Implementing Remote Document Storage in Orama
DESCRIPTION: Demonstrates how to create a custom documentsStore component that stores documents in the filesystem instead of in memory. This approach allows for remote or persistent storage of documents while maintaining search functionality.

LANGUAGE: javascript
CODE:
import { readFile, readdir, writeFile, rm } from "node:fs/promises";
import { resolve } from "node:path";
import { create } from "@orama/orama";

const ROOT_LOCATION = "/var/db/orama-example";

async function getDocument(id) {
  return JSON.parse(
    await readFile(resolve(ROOT_LOCATION, `${id}.json`), "utf-8")
  );
}

async function listDocuments() {
  const allFiles = await readdir(ROOT_LOCATION);

  return allFiles.filter((id) => id.endsWith(".json"));
}

const database = create({
  schema: {
    title: "string",
    director: "string",
  },
  components: {
    // override partially the default documents store
    documentsStore: {
      create() {
        return {};
      },
      load(raw) {
        return {};
      },
      save(store) {
        return {};
      },
      get(_, id) {
        return getDocument(id);
      },
      getMultiple(_, ids) {
        return Promise.all(
          ids.map(async (id) => {
            return JSON.parse(await getDocument(id));
          })
        );
      },
      async getAll() {
        const docs = await listDocuments();

        return Promise.all(
          docs.map(async (id) => {
            return JSON.parse(await getDocument(id));
          })
        );
      },
      store() {
        // No-op
      },
      remove() {
        // No-op
      },
      async count() {
        const docs = await listDocuments();

        return docs.count;
      },
    },
  },
});

----------------------------------------

TITLE: Inserting Images in Markdown with Absolute Paths
DESCRIPTION: Demonstrates how to insert images in Markdown using absolute paths to reference files in the static directory.

LANGUAGE: md
CODE:
![Docusaurus logo](/img/docusaurus.png)

----------------------------------------

TITLE: Controlling Batch Size in insertMultiple
DESCRIPTION: Demonstrates how to set a custom batch size when using insertMultiple to optimize performance. Smaller batch sizes help prevent blocking the event loop.

LANGUAGE: javascript
CODE:
insertMultiple(movieDB, docs, 500);

----------------------------------------

TITLE: Inserting Images in Markdown with Relative Paths
DESCRIPTION: Shows how to insert images using relative paths, which is useful for colocating images close to the Markdown files using them.

LANGUAGE: md
CODE:
![Docusaurus logo](./img/docusaurus.png)

----------------------------------------

TITLE: Creating an Orama Instance with Custom Identifier
DESCRIPTION: Shows how to create an Orama database with a custom instance ID that can be used to identify it when working with multiple databases. This is useful in applications that need to manage several Orama instances.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";

const db = create({
  schema: {
    word: "string",
  },
  id: "my-orama-instance",
});

----------------------------------------

TITLE: Creating Interactive Elements with React in MDX
DESCRIPTION: This code snippet demonstrates how to embed a React button component directly in Markdown content using MDX. The button has an onClick event handler that displays an alert when clicked.

LANGUAGE: javascript
CODE:
<button onClick={() => alert('button clicked!')}>Click me!</button>

----------------------------------------

TITLE: Configuring TypeScript for Orama Imports
DESCRIPTION: A simple example showing how to properly import types from Orama in TypeScript. It specifies the required TypeScript configuration setting for module resolution and demonstrates the correct import syntax for type definitions.

LANGUAGE: typescript
CODE:
import type { Language } from "@orama/orama";

----------------------------------------

TITLE: Configuring Docusaurus Blog Post Front Matter in YAML
DESCRIPTION: Front matter configuration for a Docusaurus blog post that specifies metadata like slug, title, author details, and tags. This YAML block defines how the blog post will appear in the Docusaurus site navigation and display.

LANGUAGE: yaml
CODE:
---
slug: first-blog-post
title: First Blog Post
authors:
  name: Gao Wei
  title: Docusaurus Core Team
  url: https://github.com/wgao19
  image_url: https://github.com/wgao19.png
tags: [hola, docusaurus]
---

----------------------------------------

TITLE: Extending Default Stop-words List in Orama
DESCRIPTION: This example demonstrates how to extend a language-specific stop-words list by adding custom words. It imports the Italian stop-words and adds additional Italian words to the list using spread syntax when configuring the Orama database.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";
import { stopwords as italianStopwords } from "@orama/stopwords/italian";

const db = create({
  schema: {
    author: "string",
    quote: "string",
  },
  components: {
    tokenizer: {
      stopWords: [...italianStopwords, "ciao", "buongiorno"],
    },
  },
});

----------------------------------------

TITLE: Creating a Basic Markdown Document in Docusaurus
DESCRIPTION: Example of a simple Markdown document that displays a heading and formatted text. This creates a new document page that will be accessible in the Docusaurus site.

LANGUAGE: md
CODE:
# Hello

This is my **first Docusaurus document**!

----------------------------------------

TITLE: Using Default English Stop-words in Orama
DESCRIPTION: This snippet shows how to use the default English stop-words list provided by the @orama/stopwords package. It imports the English stop-words list and applies it to the Orama database's tokenizer component.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";
import { stopwords as englishStopwords } from "@orama/stopwords/english";

const db = create({
  schema: {
    author: "string",
    quote: "string",
  },
  components: {
    tokenizer: {
      stopWords: englishStopwords,
    },
  },
});

----------------------------------------

TITLE: Creating Admonitions in Docusaurus
DESCRIPTION: Examples of how to create admonitions (tip and danger callouts) using Docusaurus's special syntax.

LANGUAGE: text
CODE:
:::tip My tip

Use this awesome feature option

:::

:::danger Take care

This action is dangerous

:::

----------------------------------------

TITLE: Configuring Custom Stemming in Orama with Italian Language
DESCRIPTION: This snippet demonstrates how to create an Orama database with custom stemming enabled for the Italian language. It imports a specific stemmer and language configuration from the @orama/stemmers package and configures the tokenizer component to use them.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";
import { stemmer, language } from "@orama/stemmers/italian";

const db = create({
  schema: {
    author: "string",
    quote: "string",
  },
  components: {
    tokenizer: {
      stemming: true,
      language,
      stemmer,
    },
  },
});

----------------------------------------

TITLE: Adding a Locale Dropdown to Docusaurus Navigation
DESCRIPTION: Modifies the Docusaurus configuration to add a language selection dropdown in the navigation bar. This enables users to switch between available languages when viewing the site.

LANGUAGE: javascript
CODE:
module.exports = {
  themeConfig: {
    navbar: {
      items: [
        // highlight-start
        {
          type: 'localeDropdown',
        },
        // highlight-end
      ],
    },
  },
};

----------------------------------------

TITLE: Implementing beforeUpdateMultiple Hook in Orama Plugin
DESCRIPTION: Example of a plugin with a beforeUpdateMultiple hook that runs before batch updates. The hook receives the Orama instance and the document IDs to be updated as arguments.

LANGUAGE: javascript
CODE:
function beforeUpdateMultiplePluginExample() {
  return {
    name: "before-update-multiple-plugin",
    beforeUpdateMultiple: (orama, ids) => {
      console.log("Orama instance: ", orama);
      console.log("Document IDs to be updated: ", ids);
    },
  };
}

----------------------------------------

TITLE: Building Docusaurus with All Locales
DESCRIPTION: Command to build the Docusaurus site including all configured locales. This generates a production-ready version of the multilingual site with all translations.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Implementing afterRemoveMultiple Hook in Orama Plugin
DESCRIPTION: Example of a plugin with an afterRemoveMultiple hook that runs after batch removals. The hook receives the Orama instance and the document IDs that were removed as arguments.

LANGUAGE: javascript
CODE:
function afterRemoveMultiplePluginExample() {
  return {
    name: "after-remove-multiple-plugin",
    afterRemoveMultiple: (orama, ids) => {
      console.log("Orama instance: ", orama);
      console.log("Document IDs removed: ", ids);
    },
  };
}

----------------------------------------

TITLE: Generating a New Docusaurus Site with Classic Template
DESCRIPTION: Creates a new Docusaurus website using the classic template. This command initializes a new project and installs all necessary dependencies required to run Docusaurus.

LANGUAGE: bash
CODE:
npm init docusaurus@latest my-website classic

----------------------------------------

TITLE: Implementing beforeRemoveMultiple Hook in Orama Plugin
DESCRIPTION: Example of a plugin with a beforeRemoveMultiple hook that runs before batch removals. The hook receives the Orama instance and the document IDs to be removed as arguments.

LANGUAGE: javascript
CODE:
function beforeRemoveMultiplePluginExample() {
  return {
    name: "before-remove-multiple-plugin",
    beforeRemoveMultiple: (orama, ids) => {
      console.log("Orama instance: ", orama);
      console.log("Document IDs to be removed: ", ids);
    },
  };
}

----------------------------------------

TITLE: Starting the Docusaurus Development Server
DESCRIPTION: Changes to the newly created website directory and starts the local development server. Once running, the site will be available at http://localhost:3000/ with automatic reloading when files are changed.

LANGUAGE: bash
CODE:
cd my-website
npm run start

----------------------------------------

TITLE: Implementing afterSearch Hook in Orama Plugin
DESCRIPTION: Example of a plugin with an afterSearch hook that runs after search operations. The hook receives the Orama instance, query object, and search results as arguments.

LANGUAGE: javascript
CODE:
function afterSearchPluginExample() {
  return {
    name: "after-search-plugin",
    afterSearch: (orama, query, result) => {
      console.log("Orama instance: ", orama);
      console.log("Query: ", query);
      console.log("Search result: ", result);
    },
  };
}

----------------------------------------

TITLE: Installing Orama Cloud JavaScript SDK with yarn
DESCRIPTION: Command to install the Orama Cloud JavaScript SDK using yarn package manager.

LANGUAGE: bash
CODE:
yarn add @oramacloud/client

----------------------------------------

TITLE: Implementing beforeSearch Hook in Orama Plugin
DESCRIPTION: Example of a plugin with a beforeSearch hook that runs before search operations. The hook receives the Orama instance and the query object as arguments.

LANGUAGE: javascript
CODE:
function beforeSearchPluginExample() {
  return {
    name: "before-search-plugin",
    beforeSearch: (orama, query) => {
      console.log("Orama instance: ", orama);
      console.log("Query: ", query);
    },
  };
}

----------------------------------------

TITLE: Installing Orama Cloud JavaScript SDK with bun
DESCRIPTION: Command to install the Orama Cloud JavaScript SDK using bun package manager.

LANGUAGE: bash
CODE:
bun i @oramacloud/client

----------------------------------------

TITLE: Implementing beforeUpdate Hook in Orama Plugin
DESCRIPTION: Example of a plugin with a beforeUpdate hook that runs before document update. The hook receives the Orama instance and the document ID to be updated as arguments.

LANGUAGE: javascript
CODE:
function beforeUpdatePluginExample() {
  return {
    name: "before-update-plugin",
    beforeUpdate: (orama, id) => {
      console.log("Orama instance: ", orama);
      console.log("Document id: ", id);
    },
  };
}

----------------------------------------

TITLE: Setting Swift UserContext for Answer Session
DESCRIPTION: Shows how to create an Orama answer session with user context in Swift.

LANGUAGE: swift
CODE:
import OramaCloudClient

let clientParams = OramaClientParams(endpoint: "", apiKey: "")
let orama = OramaClient(params: clientParams)

let answerParams = AnswerParams<E2EDoc>(
  userContext: "The user is a very skilled programmer but has never used Orama before.",
  inferenceType: .documentation,
  initialMessages: [],
  oramaClient: oramaClient,
)
let answerSession = AnswerSession(params: answerParams)

----------------------------------------

TITLE: Implementing afterInsert Hook in Orama Plugin
DESCRIPTION: Example of a plugin with an afterInsert hook that runs after document insertion. The hook receives the Orama instance, document ID, and the inserted document as arguments.

LANGUAGE: javascript
CODE:
function afterInsertPluginExample() {
  return {
    name: "after-insert-plugin",
    afterInsert: (orama, id, document) => {
      console.log("Orama instance: ", orama);
      console.log("Document id: ", id);
      console.log("Document inserted: ", document);
    },
  };
}

----------------------------------------

TITLE: Defining Interaction Type in TypeScript for Orama Cloud
DESCRIPTION: TypeScript definition of the Interaction type used in the Orama Cloud Client. This type represents a single interaction between the user and Orama Cloud, including the query, response, and related metadata.

LANGUAGE: typescript
CODE:
import type { AnyDocument, AnyOrama, Nullable, Results, SearchParams } from "@oramacloud/client";

export type Interaction<T = AnyDocument> = {
  interactionId: string,
  query: string,
  response: string,
  relatedQueries: Nullable<string[]>,
  sources: Nullable<Results<T>>,
  translatedQuery: Nullable<SearchParams<AnyOrama>>,
  aborted: boolean,
  loading: boolean
}

----------------------------------------

TITLE: Defining Interaction Struct in Swift for Orama Cloud
DESCRIPTION: Swift definition of the Interaction struct used in the Orama Cloud Client. Similar to the TypeScript version, this represents a user-system interaction with query, response, and supplementary data.

LANGUAGE: swift
CODE:
import OramaCloudClient

struct Interaction<T: Codable> {
  var interactionId: String
  var query: String
  var response: String
  var relatedQueries: [String]?
  var sources: SearchResults<T>?
  var translatedQuery: ClientSearchParams?
  var aborted: Bool = false
  var loading: Bool
}

----------------------------------------

TITLE: Configuring Orama Search with Nextra in theme.config.jsx
DESCRIPTION: This snippet demonstrates how to import and configure the Orama search component in a Nextra theme configuration file. The code shows how to set the Orama search component as the search provider for a Nextra site, enabling automatic search index generation based on the current locale.

LANGUAGE: javascript
CODE:
import { OramaSearch } from "@orama/plugin-nextra";

export default {
  // ...
  search: {
    component: OramaSearch,
  },
  // ...
};

----------------------------------------

TITLE: Accessing Session State in Kotlin with Orama Cloud
DESCRIPTION: Example of accessing the current state of an answer session in Kotlin using the getState method. This provides a static snapshot of the interactions after making a query.

LANGUAGE: kotlin
CODE:
val answerSession = AnswerSession(answerParams)

val answer = answerSession.ask(AskParams(
  query = "Query is Orama?"
))

println(answerSession.getState())

// [
//   {
//     interactionId: "clyru4rl8000008l062b26fk1",
//     query: "What is Orama?",
//     response: "Orama is a next-generation answer engine [...]",
//     relatedQueries: ["How Orama works", "Why Orama is the best", "Vector search with orama"],
//     sources: [
//       {
//         count: 15,
//         elapsed: { formatted: "78ms", raw: 78000000 },
//         hits: [
//           { document: { title: "What is Orama", ... } },
//           { document: { title: "How Orama works", ... } },
//           { document: { title: "Why Orama is the best", ... } }
//         ]
//       }
//     ],
//     translatedQuery: { term: "What is Orama?" },
//     aborted: false,
//     loading: false
//   }
// ]

----------------------------------------

TITLE: Persisting Orama Database to File System (Server-Side)
DESCRIPTION: This code shows how to save an Orama database to a file on disk using the persistToFile function from the server module. This method is designed for server-side usage only and will throw an exception when used in browsers or environments without Node.js-compatible file system modules.

LANGUAGE: javascript
CODE:
import { persistToFile } from "@orama/plugin-data-persistence/server";

const filePath = await persistToFile(
  originalInstance,
  "binary",
  "./quotes.msp"
);

----------------------------------------

TITLE: Getting related queries in JavaScript
DESCRIPTION: Shows how to get related queries when asking questions in JavaScript. The related parameter accepts howMany (up to 5) and format options ('question' or 'query').

LANGUAGE: javascript
CODE:
const answerSession = orama.createAnswerSession({
  events: {
    onRelatedQueries: (relatedQueries) => {
      console.log(relatedQueries);
      // ["How Orama works", "Why Orama is the best", "Vector search with Orama"]
    },
  }
});

await answerSession.ask({
  term: "What is Orama?",
  related: {
    howMany: 3, // How many related queries you want to get. Maximum is 5.
    format: 'query'
  }
});

----------------------------------------

TITLE: Persisting Orama Database In-Memory
DESCRIPTION: This snippet shows how to use the persist function from the @orama/plugin-data-persistence package to save a database to an in-memory JSON representation for later restoration. The persist function returns a JSON-serialized version of the database.

LANGUAGE: javascript
CODE:
import { persist } from "@orama/plugin-data-persistence";

const JSONIndex = await persist(originalInstance, "json");

----------------------------------------

TITLE: Getting related queries in Swift
DESCRIPTION: Demonstrates how to get related queries when asking questions in Swift. The related parameter is part of AskParams and accepts howMany and format options.

LANGUAGE: swift
CODE:
  let answer = try await answerSession.ask(params: AnswerParams.AskParams(
    query: "What is Orama?",
    userData: "The user is a beginner in programming",
    related: AnswerParams<MyDoc>.RelatedQueries(howMany: 3, format: "query")
  ))

----------------------------------------

TITLE: Importing Orama Internals in TypeScript with Module Resolution Constraints
DESCRIPTION: Shows an alternative approach to importing Orama's internal utilities in TypeScript when tsconfig.json cannot use nodeNext or node16 module resolution.

LANGUAGE: typescript
CODE:
import { internals } from "@orama/orama";

await internals.boundedLevenshtein();

----------------------------------------

TITLE: Clearing Session in Swift
DESCRIPTION: Demonstrates how to clear an answer session using the Swift SDK. This resets all conversation messages.

LANGUAGE: swift
CODE:
answerSession.clearSession()

----------------------------------------

TITLE: Using formatBytes for Human-Readable Byte Representation in JavaScript
DESCRIPTION: Shows how to use the formatBytes utility to convert a BigInt byte value into a human-readable string representation with appropriate units.

LANGUAGE: javascript
CODE:
import { formatBytes } from "@orama/orama/internals";

await formatBytes(1024); // '1 KB'

----------------------------------------

TITLE: Importing Orama Utility Functions in JavaScript
DESCRIPTION: Shows how to import various utility functions from Orama's internals package. These functions include string comparison, formatting, time measurement, and ID generation utilities.

LANGUAGE: javascript
CODE:
import {
  boundedLevenshtein,
  sprintf,
  formatBytes,
  formatNanoseconds,
  getNanosecondsTime,
  uniqueId,
} from "@orama/orama/internals";

----------------------------------------

TITLE: Using the New Component in Existing Functions
DESCRIPTION: Demonstrates how to use the newly created component within existing Orama functions. This example shows integrating the ShiningDetector component's isShining method into the search function.

LANGUAGE: diff
CODE:
export async function search(orama: Orama, params: SearchParams, language?: string): Promise<Results> {
+   console.log('Shining level', await orama.shiningDetector.isShining(params.term))

  // ...

----------------------------------------

TITLE: Using boundedLevenshtein for String Distance Calculation in JavaScript
DESCRIPTION: Demonstrates how to use the boundedLevenshtein function to compute the Levenshtein distance between two strings with a tolerance limit. Returns early with -1 if the distance exceeds the tolerance.

LANGUAGE: javascript
CODE:
import { boundedLevenshtein } from "@orama/orama/internals";

await boundedLevenshtein("moon", "lions", 3); // { isBounded: true, distance: 3 }

----------------------------------------

TITLE: Defining Component Data Storage in TypeScript
DESCRIPTION: Demonstrates how to modify the Data interface to store component-specific data. This example adds a 'shining' field to the Data interface and updates the IShiningDetector interface to accept this data structure.

LANGUAGE: diff
CODE:
+ export interface IShiningDetector {
+   isShining(shining: Record<string, number>): SyncOrAsyncValue<number>
+ }

export interface ObjectComponents {
  tokenizer: Tokenizer | TokenizerConfig
  index: IIndex
  documentsStore: IDocumentsStore
+ shiningDetector: IShiningDetector
}

interface Data<I extends OpaqueIndex, D extends OpaqueDocumentStore> {
  index: I
  docs: D
+ shining: Record<string, number>
}

----------------------------------------

TITLE: Customizing sorter Component in Orama
DESCRIPTION: This example shows how to customize the sorter component in Orama by extending the default implementation. The sorter component is responsible for sorting documents in search results.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";
import { sorter as defaultSorter } from "@orama/orama/components.js";

const s = await defaultSort.createSorter();
const db = create({
  schema: {
    number: "number",
  },
  components: {
    sorter: {
      // override partially the default sorter
      ...s,
      async remove(sort, prop, id) {
        // Apply custom logic here
        return s.remove(sort, prop, id);
      },
    },
  },
});

----------------------------------------

TITLE: Defining a New Component Interface in TypeScript
DESCRIPTION: Shows how to define a new interface for a component (ShiningDetector) and add it to the ObjectComponents interface. The example demonstrates using SyncOrAsyncValue to support both synchronous and asynchronous function returns.

LANGUAGE: diff
CODE:
+ interface IShiningDetector {
+   isShining(): SyncOrAsyncValue<boolean>
+ }

export interface ObjectComponents {
  tokenizer: Tokenizer | TokenizerConfig
  index: IIndex
  documentsStore: IDocumentsStore
+ shiningDetector: IShiningDetector
}

----------------------------------------

TITLE: Implementing beforeInsert Hook in Orama Plugin
DESCRIPTION: Example of a plugin with a beforeInsert hook that runs before document insertion. The hook receives the Orama instance, document ID, and the document to be inserted as arguments.

LANGUAGE: javascript
CODE:
function beforeInsertPluginExample() {
  return {
    name: "before-insert-plugin",
    beforeInsert: (orama, id, document) => {
      console.log("Orama instance: ", orama);
      console.log("Document id: ", id);
      console.log("Document to be inserted: ", document);
    },
  };
}

----------------------------------------

TITLE: Custom Property Extraction in Orama
DESCRIPTION: This example demonstrates how to implement a custom getDocumentProperties component using lodash's get function. This component extracts indexable properties from documents using a dotted path syntax.

LANGUAGE: javascript
CODE:
import { create } from "@orama/orama";
import { get } from "lodash/get";

const movieDB = create({
  schema: {
    title: "string",
    director: "string",
  },
  components: {
    getDocumentProperties(doc, paths) {
      return Object.fromEntries(
        paths.map((path) => {
          return [path, get(doc, path)];
        })
      );
    },
  },
});

----------------------------------------

TITLE: Implementing afterUpdateMultiple Hook in Orama Plugin
DESCRIPTION: Example function that creates an Orama plugin with the afterUpdateMultiple hook. This hook runs after an updateMultiple operation and receives the Orama instance and the IDs of updated documents as arguments.

LANGUAGE: javascript
CODE:
function afterUpdateMultiplePluginExample() {
  return {
    name: "after-update-multiple-plugin",
    afterUpdateMultiple: (orama, ids) => {
      console.log("Orama instance: ", orama);
      console.log("Document IDs updated: ", ids);
    },
  };
}

----------------------------------------

TITLE: Implementing Custom Component with afterInsert Hook in Orama
DESCRIPTION: This example demonstrates how to provide a custom component when creating an Orama database. It implements an 'afterInsert' hook that logs a message after each document insertion.

LANGUAGE: javascript
CODE:
import { create, insert, search } from "@orama/orama";

const movieDB = create({
  schema: {
    title: "string",
    director: "string",
    plot: "string",
    year: "number",
    isFavorite: "boolean",
  },
  components: {
    afterInsert() {
      console.log("INSERTED");
    },
  },
});

insert(movieDB, {
  title: "Harry Potter and the Philosopher's Stone",
  director: "Chris Columbus",
  plot: "Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.",
  year: 2001,
  isFavorite: false,
});

const results = search(movieDB, { term: "Harry" });
console.log(results.count);

----------------------------------------

TITLE: Importing Types for Match Highlight Plugin in TypeScript
DESCRIPTION: This example shows the proper way to import types from the match highlight plugin in a TypeScript project after setting the moduleResolution in tsconfig.json to either Node16 or NodeNext.

LANGUAGE: typescript
CODE:
import { searchWithHighlight } from "@orama/plugin-match-highlight";

----------------------------------------

TITLE: Creating a Markdown Page in Docusaurus
DESCRIPTION: This snippet shows the minimal structure required for creating a Markdown page in Docusaurus. It includes a heading and a simple paragraph, which Docusaurus will automatically render as HTML.

LANGUAGE: mdx
CODE:
# My Markdown page

This is a Markdown page

----------------------------------------

TITLE: Facet Result Format for Array Fields in Orama
DESCRIPTION: Shows the JSON response format for facets on array fields, displaying how each array element is counted separately in the values object with its occurrence count.

LANGUAGE: json
CODE:
{
  "count": 2,
  "values": {
    "Albus": 1,
    "Percival Wulfric Brian": 1
  }
}

----------------------------------------

TITLE: Using the embeddings plugin for automatic vector generation
DESCRIPTION: Demonstrates using @orama/plugin-embeddings to automatically generate and use embeddings at insert and search time, simplifying vector search implementation.

LANGUAGE: javascript
CODE:
import { create } from '@orama/orama'
import { pluginEmbeddings } from '@orama/plugin-embeddings'
import '@tensorflow/tfjs-node' // Or any other appropriate TensorflowJS backend, like @tensorflow/tfjs-backend-webgl

const plugin = await pluginEmbeddings({
  embeddings: {
    // Schema property used to store generated embeddings
    defaultProperty: 'embeddings',
    onInsert: {
      // Generate embeddings at insert-time
      generate: true,
      // properties to use for generating embeddings at insert time.
      // Will be concatenated to generate a unique embedding.
      properties: ['description'],
      verbose: true,
    }
  }
})

const db = create({
  schema: {
    description: 'string',
    // Orama generates 512-dimensions vectors.
    // When using @orama/plugin-embeddings, set the property where you want to store embeddings as `vector[512]`.
    embeddings: 'vector[512]'
  },
  plugins: [plugin]
})

// Orama will generate and store embeddings at insert-time!
await insert(db, { description: 'Classroom Headphones Bulk 5 Pack, Student On Ear Color Varieties' })
await insert(db, { description: 'Kids Wired Headphones for School Students K-12' })
await insert(db, { description: 'Kids Headphones Bulk 5-Pack for K-12 School' })
await insert(db, { description: 'Bose QuietComfort Bluetooth Headphones' })

// Orama will also generate and use embeddings at search time when search mode is set to "vector" or "hybrid"!
const searchResults = await search(db, {
  term: 'Headphones for 12th grade students',
  mode: 'vector',
  similarity: 0.75,
})

----------------------------------------

TITLE: Using Distinct Values in Orama Search
DESCRIPTION: This example shows how to retrieve distinct values by specifying a property. Combined with sorting, it returns only the first document for each unique value of the specified property.

LANGUAGE: javascript
CODE:
const results = search(db, {
  distinctOn: "type",
  sortBy: {
    property: "rank",
    order: "DESC",
  },
});

----------------------------------------

TITLE: Batch Removal with removeMultiple in Orama
DESCRIPTION: Shows how to perform batch removals using 'removeMultiple' with a custom batch size to avoid blocking the event loop. This approach is recommended for removing large numbers of documents efficiently.

LANGUAGE: javascript
CODE:
const docs = [
  {
    title: "The prestige",
    director: "Christopher Nolan",
    plot: "Two friends and fellow magicians become bitter enemies after a sudden tragedy. As they devote themselves to this rivalry, they make sacrifices that bring them fame but with terrible consequences.",
    year: 2006,
    isFavorite: true,
  },
  {
    title: "Big Fish",
    director: "Tim Burton",
    plot: "Will Bloom returns home to care for his dying father, who had a penchant for telling unbelievable stories. After he passes away, Will tries to find out if his tales were really true.",
    year: 2004,
    isFavorite: true,
  },
  {
    title: "Harry Potter and the Philosopher's Stone",
    director: "Chris Columbus",
    plot: "Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.",
    year: 2001,
    isFavorite: false,
  },
];

const ids = insertMultiple(movieDB, docs, 500);
removeMultiple(movieDB, ids, 500);

----------------------------------------

TITLE: Importing Orama in a browser module
DESCRIPTION: HTML example showing how to import Orama directly in a browser using ES modules from a CDN.

LANGUAGE: html
CODE:
<html>
  <body>
    <script type="module">
      import { create, insert, search } from 'https://cdn.jsdelivr.net/npm/@orama/orama@latest/+esm'
    </script>
  </body>
</html>

----------------------------------------

TITLE: Creating an Orama Database with Schema Definition
DESCRIPTION: Creates an Orama database with a defined schema for movie data. The schema defines the data types for various fields including title, director, plot, year, and a boolean flag.

LANGUAGE: javascript
CODE:
import { create, insert } from "@orama/orama";

const movieDB = create({
  schema: {
    title: "string",
    director: "string",
    plot: "string",
    year: "number",
    isFavorite: "boolean",
  },
});

----------------------------------------

TITLE: Displaying Markdown Table of Segment Limits by Plan in Orama
DESCRIPTION: This markdown table shows the number of segments and triggers allowed for different subscription plans in Orama, ranging from Free to Enterprise plans. It provides a clear comparison of limitations across plans, with Enterprise offering unlimited segments and triggers.

LANGUAGE: markdown
CODE:
| Plan       | Number of segments  | Number of triggers  |
|------------|---------------------|---------------------|
| Free       | 3                   | 3 per index         |
| Hobby      | 5                   | 10 per index        |
| Pro        | 10                  | 50 per index        |
| Premium    | 25                  | 100 per index       |
| Enterprise | Unlimited           | Unlimited           |