TITLE: ML Model Loading with Cache Resource
DESCRIPTION: Shows how to cache machine learning model loading using st.cache_resource.

LANGUAGE: python
CODE:
from transformers import pipeline

@st.cache_resource
def load_model():
    return pipeline("sentiment-analysis")

model = load_model()

query = st.text_input("Your query", value="I love Streamlit! 🎈")
if query:
    result = model(query)[0]
    st.write(result)

----------------------------------------

TITLE: Building a Custom Connection in Streamlit
DESCRIPTION: Demonstrates how to create a custom connection by subclassing BaseConnection. This snippet shows how to implement the _connect method and add custom functionality like querying.

LANGUAGE: python
CODE:
class MyConnection(BaseConnection[myconn.MyConnection]):
    def _connect(self, **kwargs) -> MyConnection:
        return myconn.connect(**self._secrets, **kwargs)
    def query(self, query):
        return self._instance.query(query)

----------------------------------------

TITLE: Complete LLM App Implementation
DESCRIPTION: Full implementation of the Streamlit app that integrates with OpenAI's API through LangChain to generate text responses from user prompts

LANGUAGE: python
CODE:
import streamlit as st
from langchain_openai.chat_models import ChatOpenAI

st.title("🦜🔗 Quickstart App")

openai_api_key = st.sidebar.text_input("OpenAI API Key", type="password")


def generate_response(input_text):
    model = ChatOpenAI(temperature=0.7, api_key=openai_api_key)
    st.info(model.invoke(input_text))


with st.form("my_form"):
    text = st.text_area(
        "Enter text:",
        "What are the three key pieces of advice for learning how to code?",
    )
    submitted = st.form_submit_button("Submit")
    if not openai_api_key.startswith("sk-"):
        st.warning("Please enter your OpenAI API key!", icon="⚠")
    if submitted and openai_api_key.startswith("sk-"):
        generate_response(text)

----------------------------------------

TITLE: Inserting Chat Message Container in Streamlit (Python)
DESCRIPTION: The st.chat_message function is used to insert a chat message container into a Streamlit app. It is part of Streamlit's chat-related APIs for building conversational applications.

LANGUAGE: python
CODE:
st.chat_message

----------------------------------------

TITLE: Implementing Streamlit PostgreSQL Connection
DESCRIPTION: Python code demonstrating how to connect to PostgreSQL using st.connection, query data with caching, and display results in a Streamlit app.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st

# Initialize connection.
conn = st.connection("postgresql", type="sql")

# Perform query.
df = conn.query('SELECT * FROM mytable;', ttl="10m")

# Print results.
for row in df.itertuples():
    st.write(f"{row.name} has a :{row.pet}:")

----------------------------------------

TITLE: Basic Cache Data Usage with Clear Function in Python
DESCRIPTION: Example showing how to use st.cache_data decorator to cache function returns and clear the cache using a button. Demonstrates caching for simple mathematical operations.

LANGUAGE: python
CODE:
import streamlit as st

@st.cache_data
def square(x):
    return x**2

@st.cache_data
def cube(x):
    return x**3

if st.button("Clear All"):
    # Clear values from *all* all in-memory and on-disk data caches:
    # i.e. clear values from both square and cube
    st.cache_data.clear()

----------------------------------------

TITLE: Basic Caching Implementation in Python
DESCRIPTION: Demonstrates the minimal implementation of caching in Streamlit using the @st.cache_data decorator.

LANGUAGE: python
CODE:
@st.cache_data
def long_running_function(param1, param2):
    return ...

----------------------------------------

TITLE: Caching Database and Model Resources in Python with Streamlit
DESCRIPTION: Example demonstrating how to cache database sessions and ML models using st.cache_resource decorator, with functionality to clear all caches.

LANGUAGE: python
CODE:
import streamlit as st
from transformers import BertModel

@st.cache_resource
 def get_database_session(url):
     # Create a database session object that points to the URL.
     return session

@st.cache_resource
def get_model(model_type):
    # Create a model of the specified type.
    return BertModel.from_pretrained(model_type)

if st.button("Clear All"):
    # Clears all st.cache_resource caches:
    st.cache_resource.clear()

----------------------------------------

TITLE: Using st.connection in Streamlit
DESCRIPTION: The st.connection API (formerly experimental_connection) is used to create and manage data connections in Streamlit applications. This function enables developers to establish connections to various data sources and manage them efficiently within their Streamlit apps.

LANGUAGE: python
CODE:
st.connection

----------------------------------------

TITLE: Using st.chat_input in Streamlit
DESCRIPTION: st.chat_input displays a chat input widget that allows users to enter messages in a chat-like interface. This component is typically used alongside st.chat_message to build conversational applications and LLM-powered chat apps.

LANGUAGE: python
CODE:
st.chat_input()

----------------------------------------

TITLE: Configuring Streamlit PostgreSQL Connection Secrets
DESCRIPTION: TOML configuration for storing PostgreSQL connection details in Streamlit secrets file, including database credentials and connection parameters.

LANGUAGE: toml
CODE:
# .streamlit/secrets.toml

[connections.postgresql]
dialect = "postgresql"
host = "localhost"
port = "5432"
database = "xxx"
username = "xxx"
password = "xxx"

----------------------------------------

TITLE: Optimizing Performance in Streamlit Python
DESCRIPTION: Shows how to use caching mechanisms in Streamlit to optimize performance, including caching data objects and global resources.

LANGUAGE: python
CODE:
# E.g. Dataframe computation, storing downloaded data, etc.
@st.cache_data
def foo(bar):
    # Do something expensive and return data
    return data
# Executes foo
d1 = foo(ref1)
# Does not execute foo
# Returns cached item by value, d1 == d2
d2 = foo(ref1)
# Different arg, so function foo executes
d3 = foo(ref2)
# Clear the cached value for foo(ref1)
foo.clear(ref1)
# Clear all cached entries for this function
foo.clear()
# Clear values from *all* in-memory or on-disk cached functions
st.cache_data.clear()

# E.g. TensorFlow session, database connection, etc.
@st.cache_resource
def foo(bar):
    # Create and return a non-data object
    return session
# Executes foo
s1 = foo(ref1)
# Does not execute foo
# Returns cached item by reference, s1 == s2
s2 = foo(ref1)
# Different arg, so function foo executes
s3 = foo(ref2)
# Clear the cached value for foo(ref1)
foo.clear(ref1)
# Clear all cached entries for this function
foo.clear()
# Clear all global resources from cache
st.cache_resource.clear()

----------------------------------------

TITLE: Implementing Caching in Python with Streamlit
DESCRIPTION: This snippet demonstrates how to use the @st.cache_data decorator to cache a function in Streamlit. Caching helps improve performance by storing results of expensive function calls.

LANGUAGE: python
CODE:
@st.cache_data
def long_running_function(param1, param2):
    return …

----------------------------------------

TITLE: Using SQL Connection in Streamlit App
DESCRIPTION: Python code demonstrating how to create a SQL connection, insert data, and query results in a Streamlit app.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st

# Create the SQL connection to pets_db as specified in your secrets file.
conn = st.connection('pets_db', type='sql')

# Insert some data with conn.session.
with conn.session as s:
    s.execute('CREATE TABLE IF NOT EXISTS pet_owners (person TEXT, pet TEXT);')
    s.execute('DELETE FROM pet_owners;')
    pet_owners = {'jerry': 'fish', 'barbara': 'cat', 'alex': 'puppy'}
    for k in pet_owners:
        s.execute(
            'INSERT INTO pet_owners (person, pet) VALUES (:owner, :pet);',
            params=dict(owner=k, pet=pet_owners[k])
        )
    s.commit()

# Query and display the data you inserted
pet_owners = conn.query('select * from pet_owners')
st.dataframe(pet_owners)

----------------------------------------

TITLE: Complete Chat Validation Application
DESCRIPTION: Full implementation of the chat validation app including state management, UI components, and validation logic

LANGUAGE: python
CODE:
import streamlit as st
import lorem
from random import randint
import time

if "stage" not in st.session_state:
    st.session_state.stage = "user"
    st.session_state.history = []
    st.session_state.pending = None
    st.session_state.validation = {}

def chat_stream():
    for i in range(randint(3, 9)):
        yield lorem.sentence() + " "
        time.sleep(0.2)

def validate(response):
    response_sentences = response.split(". ")
    response_sentences = [
        sentence.strip(". ") + "."
        for sentence in response_sentences
        if sentence.strip(". ") != ""
    ]
    validation_list = [
        True if sentence.count(" ") > 4 else False for sentence in response_sentences
    ]
    return response_sentences, validation_list

def add_highlights(response_sentences, validation_list, bg="red", text="red"):
    return [
        f":{text}[:{bg}-background[" + sentence + "]]" if not is_valid else sentence
        for sentence, is_valid in zip(response_sentences, validation_list)
    ]

----------------------------------------

TITLE: Configuring Interactive Dataframe Display in Streamlit
DESCRIPTION: Demonstrates the usage of st.dataframe to create interactive data tables with features like sorting, resizing, searching, and clipboard copying. Also covers dataframe selections and column configuration options.



----------------------------------------

TITLE: Creating Forms in Streamlit
DESCRIPTION: Illustrates how to create a form that batches elements together with a 'Submit' button using st.form and st.form_submit_button.

LANGUAGE: python
CODE:
with st.form(key='my_form'):
    name = st.text_input("Name")
    email = st.text_input("Email")
    st.form_submit_button("Sign up")

----------------------------------------

TITLE: Implementing a ChatGPT-like App with OpenAI and Streamlit
DESCRIPTION: Demonstrates how to create a ChatGPT-like application using Streamlit's chat elements and OpenAI's API for generating responses.

LANGUAGE: python
CODE:
from openai import OpenAI
import streamlit as st

st.title("ChatGPT-like clone")

client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

if "openai_model" not in st.session_state:
    st.session_state["openai_model"] = "gpt-3.5-turbo"

if "messages" not in st.session_state:
    st.session_state.messages = []

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if prompt := st.chat_input("What is up?"):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        stream = client.chat.completions.create(
            model=st.session_state["openai_model"],
            messages=[
                {"role": m["role"], "content": m["content"]}
                for m in st.session_state.messages
            ],
            stream=True,
        )
        response = st.write_stream(stream)
    st.session_state.messages.append({"role": "assistant", "content": response})

----------------------------------------

TITLE: Creating a SQL Connection using SQLAlchemy in Streamlit
DESCRIPTION: Illustrates how to create a SQL connection using SQLAlchemy through Streamlit's SQLConnection. This snippet shows the basic setup for connecting to various SQL databases supported by SQLAlchemy.

LANGUAGE: python
CODE:
conn = st.connection('sql')

----------------------------------------

TITLE: Creating a Simple Chatbot GUI with Streaming in Streamlit
DESCRIPTION: Builds a chatbot interface with simulated response streaming using random responses and time delays.

LANGUAGE: python
CODE:
import streamlit as st
import random
import time

# Streamed response emulator
def response_generator():
    response = random.choice(
        [
            "Hello there! How can I assist you today?",
            "Hi, human! Is there anything I can help you with?",
            "Do you need help?",
        ]
    )
    for word in response.split():
        yield word + " "
        time.sleep(0.05)

st.title("Simple chat")

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Display chat messages from history on app rerun
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Accept user input
if prompt := st.chat_input("What is up?"):
    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": prompt})
    # Display user message in chat message container
    with st.chat_message("user"):
        st.markdown(prompt)

    # Display assistant response in chat message container
    with st.chat_message("assistant"):
        response = st.write_stream(response_generator())
    # Add assistant response to chat history
    st.session_state.messages.append({"role": "assistant", "content": response})

----------------------------------------

TITLE: Building an Echo Bot with Streamlit
DESCRIPTION: Creates a simple chatbot that mirrors user input using Streamlit's chat elements and session state for message history.

LANGUAGE: python
CODE:
import streamlit as st

st.title("Echo Bot")

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Display chat messages from history on app rerun
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# React to user input
if prompt := st.chat_input("What is up?"):
    # Display user message in chat message container
    st.chat_message("user").markdown(prompt)
    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": prompt})

    response = f"Echo: {prompt}"
    # Display assistant response in chat message container
    with st.chat_message("assistant"):
        st.markdown(response)
    # Add assistant response to chat history
    st.session_state.messages.append({"role": "assistant", "content": response})

----------------------------------------

TITLE: Querying BigQuery from Streamlit
DESCRIPTION: This Python script shows how to create a Streamlit app that authenticates with BigQuery, performs a query, and displays the results. It uses st.cache_data for efficient data retrieval.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st
from google.oauth2 import service_account
from google.cloud import bigquery

# Create API client.
credentials = service_account.Credentials.from_service_account_info(
    st.secrets["gcp_service_account"]
)
client = bigquery.Client(credentials=credentials)

# Perform query.
# Uses st.cache_data to only rerun when the query changes or after 10 min.
@st.cache_data(ttl=600)
def run_query(query):
    query_job = client.query(query)
    rows_raw = query_job.result()
    # Convert to list of dicts. Required for st.cache_data to hash the return value.
    rows = [dict(row) for row in rows_raw]
    return rows

rows = run_query("SELECT word FROM `bigquery-public-data.samples.shakespeare` LIMIT 10")

# Print results.
st.write("Some wise words from Shakespeare:")
for row in rows:
    st.write("✍️ " + row['word'])

----------------------------------------

TITLE: Inserting Side-by-Side Columns in Streamlit
DESCRIPTION: The st.columns function in Streamlit is used to create containers laid out as side-by-side columns. This function allows for flexible arrangement of elements in a horizontal layout within a Streamlit app.

LANGUAGE: python
CODE:
streamlit.columns

----------------------------------------

TITLE: Streamlit App Using Supabase Connection
DESCRIPTION: Python code implementing Supabase connection using the community-built st-supabase-connection library with st.connection.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st
from st_supabase_connection import SupabaseConnection

# Initialize connection.
conn = st.connection("supabase",type=SupabaseConnection)

# Perform query.
rows = conn.query("*", table="mytable", ttl="10m").execute()

# Print results.
for row in rows.data:
    st.write(f"{row['name']} has a :{row['pet']}:")

----------------------------------------

TITLE: Personalizing Apps for Users in Streamlit Python
DESCRIPTION: Shows how to implement user authentication and access user-specific information in Streamlit applications, including login/logout functionality and accessing cookies and headers.

LANGUAGE: python
CODE:
# Authenticate users
if not st.experimental_user.is_logged_in:
    st.login("my_provider")
f"Hi, {st.experimental_user.name}"
st.logout()

# Get dictionaries of cookies and headers
st.context.cookies
st.context.headers

----------------------------------------

TITLE: Testing Status Elements in Streamlit
DESCRIPTION: Shows how to test various status and alert elements including exceptions, success messages, info alerts, warnings, errors, and toasts.

LANGUAGE: python
CODE:
from streamlit.testing.v1 import AppTest

at = AppTest.from_file("cheatsheet_app.py")

# exception
assert len(at.exception) == 1
assert "TypeError" in at.exception[0].value

# Other in-line alerts: success, info, warning, error
assert at.success[0].value == "Great job!"
assert at.info[0].value == "Please enter an API key to continue"
assert at.warning[0].value == "Sorry, the passwords didn't match"
assert at.error[0].value == "Something went wrong :("

# toast
assert at.toast[0].value == "That was lit!" and at.toast[0].icon == "🔥"

----------------------------------------

TITLE: Comparing Streamlit and Native Altair Themes in Python
DESCRIPTION: This snippet demonstrates how to create an Altair chart and display it using both the Streamlit theme and the native Altair theme. It uses the cars dataset and creates an interactive scatter plot.

LANGUAGE: python
CODE:
import altair as alt
from vega_datasets import data

source = data.cars()

chart = alt.Chart(source).mark_circle().encode(
    x='Horsepower',
    y='Miles_per_Gallon',
    color='Origin',
).interactive()

tab1, tab2 = st.tabs(["Streamlit theme (default)", "Altair native theme"])

with tab1:
    # Use the Streamlit theme.
    # This is the default. So you can also omit the theme argument.
    st.altair_chart(chart, theme="streamlit", use_container_width=True)
with tab2:
    # Use the native Altair theme.
    st.altair_chart(chart, theme=None, use_container_width=True)

----------------------------------------

TITLE: Setting Page Configuration in Streamlit
DESCRIPTION: The st.set_page_config function configures default page settings like layout, title, favicon and initial sidebar state for Streamlit applications. This function should be called as the first Streamlit command in your script.

LANGUAGE: python
CODE:
st.set_page_config()

----------------------------------------

TITLE: Executing Queries with SnowparkConnection
DESCRIPTION: The query method allows executing SQL queries against a Snowflake database and returns results as a Pandas DataFrame. It handles query caching and provides options for TTL management.

LANGUAGE: python
CODE:
st.connections.SnowparkConnection.query

----------------------------------------

TITLE: Demonstrating Streamlit Magic Commands in Python
DESCRIPTION: Example showing various uses of Magic commands including markdown rendering, dataframe display, variable output, and matplotlib chart visualization. Demonstrates how Magic automatically renders content without explicit st.write() calls.

LANGUAGE: python
CODE:
# Draw a title and some text to the app:
'''
# This is the document title

This is some _markdown_.
'''

import pandas as pd
df = pd.DataFrame({'col1': [1,2,3]})
df  # 👈 Draw the dataframe

x = 10
'x', x  # 👈 Draw the string 'x' and then the value of x

# Also works with most supported chart types
import matplotlib.pyplot as plt
import numpy as np

arr = np.random.normal(1, 1, size=100)
fig, ax = plt.subplots()
ax.hist(arr, bins=20)

fig  # 👈 Draw a Matplotlib chart

----------------------------------------

TITLE: Creating Modal Dialogs in Streamlit
DESCRIPTION: Demonstrates the creation of a modal dialog form that can run independently from the main script using the @st.dialog decorator.

LANGUAGE: python
CODE:
@st.dialog("Sign up")
def email_form():
    name = st.text_input("Name")
    email = st.text_input("Email")

----------------------------------------

TITLE: Using st.fragment Decorator in Python for Independent Function Rerunning
DESCRIPTION: The st.fragment decorator allows a function to rerun independently in Streamlit applications. It is used to optimize performance by isolating parts of the app that need to be updated separately.

LANGUAGE: python
CODE:
@st.fragment
def some_function():
    # Function code here

----------------------------------------

TITLE: Comparing Streamlit and Native Plotly Themes
DESCRIPTION: This snippet demonstrates how to create a Plotly scatter plot and display it using both the Streamlit theme (default) and the native Plotly theme. It uses tabs to show the difference between the two themes.

LANGUAGE: python
CODE:
import plotly.express as px
import streamlit as st

df = px.data.gapminder()

fig = px.scatter(
    df.query("year==2007"),
    x="gdpPercap",
    y="lifeExp",
    size="pop",
    color="continent",
    hover_name="country",
    log_x=True,
    size_max=60,
)

tab1, tab2 = st.tabs(["Streamlit theme (default)", "Plotly native theme"])
with tab1:
    # Use the Streamlit theme.
    # This is the default. So you can also omit the theme argument.
    st.plotly_chart(fig, theme="streamlit", use_container_width=True)
with tab2:
    # Use the native Plotly theme.
    st.plotly_chart(fig, theme=None, use_container_width=True)

----------------------------------------

TITLE: Defining Streamlit Page
DESCRIPTION: Creates a new page definition for a multipage Streamlit app, specifying the source file, title, and icon.

LANGUAGE: python
CODE:
home = st.Page(
    "home.py",
    title="Home",
    icon=":material/home:"
)

----------------------------------------

TITLE: Implementing Streamlit-MongoDB Integration
DESCRIPTION: Python code demonstrating MongoDB connection initialization, data retrieval with caching, and display in Streamlit interface.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st
import pymongo

# Initialize connection.
# Uses st.cache_resource to only run once.
@st.cache_resource
def init_connection():
    return pymongo.MongoClient(**st.secrets["mongo"])

client = init_connection()

# Pull data from the collection.
# Uses st.cache_data to only rerun when the query changes or after 10 min.
@st.cache_data(ttl=600)
def get_data():
    db = client.mydb
    items = db.mycollection.find()
    items = list(items)  # make hashable for st.cache_data
    return items

items = get_data()

# Print results.
for item in items:
    st.write(f"{item['name']} has a :{item['pet']}:")

----------------------------------------

TITLE: Using st.data_editor in Streamlit Python
DESCRIPTION: The st.data_editor function displays a data editor widget for editing dataframes and other data structures. It supports various configuration options for columns, including adding images, charts, and clickable URLs.

LANGUAGE: python
CODE:
st.data_editor(data, **kwargs)

----------------------------------------

TITLE: Displaying Dataframes in Streamlit
DESCRIPTION: Use st.dataframe() to display a dataframe as an interactive table in a Streamlit app. This function takes a pandas DataFrame as input and renders it as an interactive widget.

LANGUAGE: python
CODE:
st.dataframe(my_data_frame)

----------------------------------------

TITLE: Configuring Streamlit Navigation Menu
DESCRIPTION: Sets up the navigation structure for a multipage Streamlit application by defining page groups and their associated pages.

LANGUAGE: python
CODE:
st.navigation({
    "Your account" : [log_out, settings],
    "Reports" : [overview, usage],
    "Tools" : [search]
})

----------------------------------------

TITLE: Basic Dataframe Display with st.dataframe
DESCRIPTION: Demonstrates how to display a basic Pandas DataFrame using st.dataframe with container width enabled

LANGUAGE: python
CODE:
import streamlit as st
import pandas as pd

df = pd.DataFrame(
    [
        {"command": "st.selectbox", "rating": 4, "is_widget": True},
        {"command": "st.balloons", "rating": 5, "is_widget": False},
        {"command": "st.time_input", "rating": 3, "is_widget": True},
    ]
)

st.dataframe(df, use_container_width=True)

----------------------------------------

TITLE: Creating Multipage Apps with Pages Directory
DESCRIPTION: Explains how to define multipage apps using a directory structure. Additional Python files placed in a 'pages/' directory alongside the entrypoint file are automatically shown in the navigation widget.

LANGUAGE: python
CODE:
pages/

----------------------------------------

TITLE: Creating Interactive Plotly Charts in Streamlit
DESCRIPTION: Use the streamlit-plotly-events component to make Plotly charts interactive in a Streamlit app. This example creates a simple line chart and captures selected points.

LANGUAGE: python
CODE:
from streamlit_plotly_events import plotly_events
fig = px.line(x=[1], y=[1])

selected_points = plotly_events(fig)

----------------------------------------

TITLE: Implementing File Downloads in Streamlit with st.download_button
DESCRIPTION: Comprehensive example showing different ways to use st.download_button for downloading text and binary files. Demonstrates handling CSV files, raw text, binary data, and zip files with various API configurations and optional parameters.

LANGUAGE: python
CODE:
import streamlit as st

# Text files

text_contents = '''
Foo, Bar
123, 456
789, 000
'''

# Different ways to use the API

st.download_button('Download CSV', text_contents, 'text/csv')
st.download_button('Download CSV', text_contents)  # Defaults to 'text/plain'

with open('myfile.csv') as f:
   st.download_button('Download CSV', f)  # Defaults to 'text/plain'

# ---
# Binary files

binary_contents = b'whatever'

# Different ways to use the API

st.download_button('Download file', binary_contents)  # Defaults to 'application/octet-stream'

with open('myfile.zip', 'rb') as f:
   st.download_button('Download Zip', f, file_name='archive.zip')  # Defaults to 'application/octet-stream'

# You can also grab the return value of the button,
# just like with any other button.

if st.download_button(...):
   st.write('Thanks for downloading!')

----------------------------------------

TITLE: Implementing Radio Button Widget with Customization Options in Streamlit
DESCRIPTION: Example showing how to create a radio button widget with configurable label visibility, disabled state, and horizontal orientation. Uses session state to store widget values and demonstrates layout control with columns.

LANGUAGE: python
CODE:
import streamlit as st

# Store the initial value of widgets in session state
if "visibility" not in st.session_state:
    st.session_state.visibility = "visible"
    st.session_state.disabled = False
    st.session_state.horizontal = False

col1, col2 = st.columns(2)

with col1:
    st.checkbox("Disable radio widget", key="disabled")
    st.checkbox("Orient radio options horizontally", key="horizontal")

with col2:
    st.radio(
        "Set label visibility 👇",
        ["visible", "hidden", "collapsed"],
        key="visibility",
        label_visibility=st.session_state.visibility,
        disabled=st.session_state.disabled,
        horizontal=st.session_state.horizontal,
    )

----------------------------------------

TITLE: Creating Expandable Sections in Streamlit
DESCRIPTION: Demonstrates the creation of expandable/collapsible sections using st.expander to organize content.

LANGUAGE: python
CODE:
with st.expander("Open to see more"):
  st.write("This is more content")

----------------------------------------

TITLE: Importing ProgressColumn Configuration in Streamlit
DESCRIPTION: Auto-generated function reference for ProgressColumn class from Streamlit's column_config module. Used to configure progress bar display settings in data tables.

LANGUAGE: python
CODE:
from streamlit.column_config import ProgressColumn

----------------------------------------

TITLE: Creating Simple Charts in Streamlit
DESCRIPTION: Examples of basic chart creation using Streamlit's native charting capabilities including area, bar, line, scatter charts and maps.

LANGUAGE: python
CODE:
st.area_chart(my_data_frame)

LANGUAGE: python
CODE:
st.bar_chart(my_data_frame)

LANGUAGE: python
CODE:
st.line_chart(my_data_frame)

LANGUAGE: python
CODE:
st.scatter_chart(my_data_frame)

LANGUAGE: python
CODE:
st.map(my_data_frame)

----------------------------------------

TITLE: Caching Global Resources with Streamlit Decorator
DESCRIPTION: Function decorator to cache functions that return global resources such as database connections or ML models.

LANGUAGE: python
CODE:
@st.cache_resource
def init_model():
  # Return a global resource here
  return pipeline(
    "sentiment-analysis",
    model="distilbert-base-uncased-finetuned-sst-2-english"
  )

----------------------------------------

TITLE: Displaying Metrics with st.metric in Streamlit Python
DESCRIPTION: The st.metric function is used to display a metric value prominently in a Streamlit app. It can optionally show a delta value to indicate change. This function is part of Streamlit's data display capabilities.

LANGUAGE: python
CODE:
streamlit.metric()

----------------------------------------

TITLE: Advanced Chart Integration in Streamlit
DESCRIPTION: Examples of integrating advanced charting libraries like Matplotlib, Altair, Vega-Lite, Plotly, Bokeh, PyDeck and GraphViz with Streamlit.

LANGUAGE: python
CODE:
st.pyplot(my_mpl_figure)

LANGUAGE: python
CODE:
st.altair_chart(my_altair_chart)

LANGUAGE: python
CODE:
st.vega_lite_chart(my_vega_lite_chart)

LANGUAGE: python
CODE:
st.plotly_chart(my_plotly_chart)

LANGUAGE: python
CODE:
st.bokeh_chart(my_bokeh_chart)

LANGUAGE: python
CODE:
st.pydeck_chart(my_pydeck_chart)

LANGUAGE: python
CODE:
st.graphviz_chart(my_graphviz_spec)

----------------------------------------

TITLE: Settings Page Implementation
DESCRIPTION: Example of a settings page that displays the user's current role from session state

LANGUAGE: python
CODE:
import streamlit as st

st.header("Settings")
st.write(f"You are logged in as {st.session_state.role}.")

----------------------------------------

TITLE: Selection Widgets in Streamlit
DESCRIPTION: Various selection widgets including checkboxes, color pickers, feedback buttons, multiselect, radio buttons, and sliders.

LANGUAGE: python
CODE:
selected = st.checkbox("I agree")
color = st.color_picker("Pick a color")
st.feedback("stars")
choices = st.multiselect("Buy", ["milk", "apples", "potatoes"])
st.pills("Tags", ["Sports", "AI", "Politics"])
choice = st.radio("Pick one", ["cats", "dogs"])
st.segmented_control("Filter", ["Open", "Closed", "All"])
size = st.select_slider("Pick a size", ["S", "M", "L"])
choice = st.selectbox("Pick one", ["cats", "dogs"])
activated = st.toggle("Activate")

----------------------------------------

TITLE: Implementing Customizable Text Input in Streamlit
DESCRIPTION: Demonstrates how to create and customize a text input widget with configurable label visibility, disabled state, and placeholder text. The example includes interactive controls to modify the widget's properties and displays the entered text.

LANGUAGE: python
CODE:
import streamlit as st

# Store the initial value of widgets in session state
if "visibility" not in st.session_state:
    st.session_state.visibility = "visible"
    st.session_state.disabled = False

col1, col2 = st.columns(2)

with col1:
    st.checkbox("Disable text input widget", key="disabled")
    st.radio(
        "Set text input label visibility 👉",
        key="visibility",
        options=["visible", "hidden", "collapsed"],
    )
    st.text_input(
        "Placeholder for the other text input widget",
        "This is a placeholder",
        key="placeholder",
    )

with col2:
    text_input = st.text_input(
        "Enter some text 👇",
        label_visibility=st.session_state.visibility,
        disabled=st.session_state.disabled,
        placeholder=st.session_state.placeholder,
    )

    if text_input:
        st.write("You entered: ", text_input)

----------------------------------------

TITLE: Defining Secrets in TOML for Streamlit
DESCRIPTION: Illustrates how to define secrets in a TOML file for use in Streamlit applications. This snippet shows the format for storing a secret API key.

LANGUAGE: toml
CODE:
OpenAI_key = "<YOUR_SECRET_KEY>"

----------------------------------------

TITLE: Implementing Stream Writing in Streamlit
DESCRIPTION: Demonstrates how to write generators or streams to the app with a typewriter effect. Useful for displaying real-time streaming content or LLM outputs.

LANGUAGE: python
CODE:
st.write_stream(my_generator)
st.write_stream(my_llm_stream)

----------------------------------------

TITLE: Displaying JSON Data with st.json in Streamlit (Python)
DESCRIPTION: The st.json function in Streamlit is used to display an object or string as a pretty-printed JSON string. It takes the data as input and renders it in a formatted JSON view within the Streamlit application.

LANGUAGE: python
CODE:
st.json(data)

----------------------------------------

TITLE: Configuring Line Chart Column in Streamlit
DESCRIPTION: Implements a line chart column with y-axis range configuration.

LANGUAGE: python
CODE:
LineChartColumn("Sales (last 6 months)" y_min=0, y_max=100)

----------------------------------------

TITLE: Initializing Session State in Python
DESCRIPTION: Shows how to initialize values in Streamlit's Session State using both dictionary and attribute syntax.

LANGUAGE: python
CODE:
# Initialization
if 'key' not in st.session_state:
    st.session_state['key'] = 'value'

# Session State also supports attribute based syntax
if 'key' not in st.session_state:
    st.session_state.key = 'value'

----------------------------------------

TITLE: Processing Camera Input with Torchvision in Streamlit (Python)
DESCRIPTION: This snippet shows how to use Torchvision to decode the image captured by st.camera_input into a 3D uint8 tensor. It demonstrates how to check the type and shape of the resulting tensor.

LANGUAGE: python
CODE:
import streamlit as st
import torch
import torchvision

img_file_buffer = st.camera_input("Take a picture")

if img_file_buffer is not None:
    # To read image file buffer as a 3D uint8 tensor with `torchvision.io`:
    bytes_data = img_file_buffer.getvalue()
    torch_img = torchvision.io.decode_image(
        torch.frombuffer(bytes_data, dtype=torch.uint8)
    )

    # Check the type of torch_img:
    # Should output: <class 'torch.Tensor'>
    st.write(type(torch_img))

    # Check the shape of torch_img:
    # Should output shape: torch.Size([channels, height, width])
    st.write(torch_img.shape)

----------------------------------------

TITLE: Using st.help in Streamlit
DESCRIPTION: The st.help function displays an object's docstring with nice formatting in a Streamlit app. This is similar to Python's built-in help() function but optimized for Streamlit's interface.

LANGUAGE: python
CODE:
st.help(object)

----------------------------------------

TITLE: Creating Columns in Streamlit Python
DESCRIPTION: Shows how to create and use columns in Streamlit for layout purposes, including equal-width columns, custom-width columns, and bottom-aligned columns.

LANGUAGE: python
CODE:
# Two equal columns:
col1, col2 = st.columns(2)
col1.write("This is column 1")
col2.write("This is column 2")

# Three different columns:
col1, col2, col3 = st.columns([3, 1, 1])
# col1 is larger.

# Bottom-aligned columns
col1, col2 = st.columns(2, vertical_alignment="bottom")

# You can also use "with" notation:
with col1:
    st.radio("Select one:", [1, 2])

----------------------------------------

TITLE: Implementing Date Input Widget in Streamlit Python
DESCRIPTION: st.date_input() displays an interactive date picker widget that allows users to select dates from a calendar interface. This widget returns the selected date as a datetime.date object.

LANGUAGE: python
CODE:
st.date_input

----------------------------------------

TITLE: Displaying Error Messages with Streamlit in Python
DESCRIPTION: The st.error function is used to display error messages in a Streamlit application. It is part of Streamlit's status message functions and is typically used to show critical errors or failures to the user.

LANGUAGE: python
CODE:
streamlit.error()

----------------------------------------

TITLE: Implementing Multi-line Text Input with Streamlit text_area
DESCRIPTION: st.text_area() creates a multi-line text input widget that allows users to enter and edit larger blocks of text. This widget returns the text content as a string and can be configured with placeholder text, height, and other formatting options.

LANGUAGE: python
CODE:
st.text_area(label="Enter text here:")

----------------------------------------

TITLE: Third-Party Chart Components Integration
DESCRIPTION: Examples of integrating additional third-party charting components with Streamlit including Plost, HiPlot, ECharts, Folium, Spacy, Agraph and Lottie animations.

LANGUAGE: python
CODE:
import plost
plost.line_chart(my_dataframe, x='time', y='stock_value', color='stock_name',)

LANGUAGE: python
CODE:
data = [{'dropout':0.1, 'lr': 0.001, 'loss': 10.0, 'optimizer': 'SGD'}, {'dropout':0.15, 'lr': 0.01, 'loss': 3.5, 'optimizer': 'Adam'}, {'dropout':0.3, 'lr': 0.1, 'loss': 4.5, 'optimizer': 'Adam'}]
hip.Experiment.from_iterable(data).display()

LANGUAGE: python
CODE:
from streamlit_echarts import st_echarts
st_echarts(options=options)

LANGUAGE: python
CODE:
m = folium.Map(location=[39.949610, -75.150282], zoom_start=16)
st_data = st_folium(m, width=725)

LANGUAGE: python
CODE:
models = ["en_core_web_sm", "en_core_web_md"]
spacy_streamlit.visualize(models, "Sundar Pichai is the CEO of Google.")

LANGUAGE: python
CODE:
from streamlit_agraph import agraph, Node, Edge, Config
agraph(nodes=nodes, edges=edges, config=config)

LANGUAGE: python
CODE:
lottie_hello = load_lottieurl("https://assets5.lottiefiles.com/packages/lf20_V9t630.json")
st_lottie(lottie_hello, key="hello")

LANGUAGE: python
CODE:
fig = px.line(x=[1], y=[1])
selected_points = plotly_events(fig)

LANGUAGE: python
CODE:
chart += get_annotations_chart(annotations=[("Mar 01, 2008", "Pretty good day for GOOG"), ("Dec 01, 2007", "Something's going wrong for GOOG & AAPL"), ("Nov 01, 2008", "Market starts again thanks to..."), ("Dec 01, 2009", "Small crash for GOOG after..."),],)
st.altair_chart(chart, use_container_width=True)

----------------------------------------

TITLE: Creating Editable Data Tables in Streamlit
DESCRIPTION: Use st.data_editor() to display an editable data table. This function allows users to modify the data directly in the Streamlit app. The 'num_rows' parameter can be set to 'dynamic' for resizable tables.

LANGUAGE: python
CODE:
edited = st.data_editor(df, num_rows="dynamic")

----------------------------------------

TITLE: Reading and Updating Session State Values
DESCRIPTION: Demonstrates how to read and update values in Session State, including displaying values with st.write.

LANGUAGE: python
CODE:
# Read
st.write(st.session_state.key)

# Outputs: value

----------------------------------------

TITLE: Using st.info in Streamlit
DESCRIPTION: The st.info function displays an informational message in a Streamlit application. It is used to show non-critical information to users in a visually distinct way.

LANGUAGE: python
CODE:
st.info('This is an informational message')

----------------------------------------

TITLE: Displaying Help Documentation in Streamlit
DESCRIPTION: Display object's documentation string with nice formatting.

LANGUAGE: python
CODE:
st.help(st.write)
st.help(pd.DataFrame)

----------------------------------------

TITLE: Reading and Updating Session State in Python
DESCRIPTION: Shows how to read and update values stored in Streamlit's Session State using both attribute and dictionary-like syntax.

LANGUAGE: python
CODE:
import streamlit as st

if 'key' not in st.session_state:
    st.session_state['key'] = 'value'

# Reads
st.write(st.session_state.key)

# Updates
st.session_state.key = 'value2'     # Attribute API
st.session_state['key'] = 'value2'  # Dictionary like API

----------------------------------------

TITLE: Using st.container in Streamlit Python Apps
DESCRIPTION: The st.container function creates a container element that can hold multiple Streamlit elements. Containers help organize content and control layout in Streamlit applications.

LANGUAGE: python
CODE:
st.container()

----------------------------------------

TITLE: Creating Expandable Container in Streamlit Python
DESCRIPTION: The st.expander component creates a container that can be expanded or collapsed to show/hide its contents. It helps organize information in a space-efficient way by allowing users to toggle visibility of content sections.

LANGUAGE: python
CODE:
st.expander(label: str, expanded: bool = False) -> DeltaGenerator

----------------------------------------

TITLE: Creating a SQL Connection in Streamlit
DESCRIPTION: Demonstrates how to create a SQL connection, query data, and display it in a Streamlit app. This snippet shows the basic usage of the st.connection() method for SQL databases.

LANGUAGE: python
CODE:
conn = st.connection('pets_db', type='sql')
pet_owners = conn.query('select * from pet_owners')
st.dataframe(pet_owners)

----------------------------------------

TITLE: Using Streamlit Magic Commands in Python
DESCRIPTION: Illustrates the use of Streamlit's magic commands, which implicitly call st.write() for displaying various types of content including Markdown and variables.

LANGUAGE: python
CODE:
# Magic commands implicitly
# call st.write().
"_This_ is some **Markdown**"
my_variable
"dataframe:", my_data_frame

----------------------------------------

TITLE: Creating a Form with Streamlit in Python
DESCRIPTION: The st.form function creates a form that batches elements together with a "Submit" button. It allows grouping of form inputs to be processed together when submitted.

LANGUAGE: python
CODE:
st.form

----------------------------------------

TITLE: Updating Toast Messages in Streamlit
DESCRIPTION: Shows how to update an existing toast message by assigning it to a variable. The example simulates a breakfast cooking process with multiple status updates using the same toast notification.

LANGUAGE: python
CODE:
import streamlit as st
import time

def cook_breakfast():
    msg = st.toast('Gathering ingredients...')
    time.sleep(1)
    msg.toast('Cooking...')
    time.sleep(1)
    msg.toast('Ready!', icon = "🥞")

if st.button('Cook breakfast'):
    cook_breakfast()

----------------------------------------

TITLE: Running Streamlit Apps via Command Line
DESCRIPTION: Shows how to run Streamlit applications using the command line interface with optional script arguments.

LANGUAGE: bash
CODE:
streamlit run your_script.py [-- script args]

----------------------------------------

TITLE: Accessing Secrets in Streamlit
DESCRIPTION: Demonstrates how to access secrets within a Streamlit application using both st.secrets dict and environment variables.

LANGUAGE: python
CODE:
import streamlit as st

# Everything is accessible via the st.secrets dict:

st.write("DB username:", st.secrets["db_username"])
st.write("DB password:", st.secrets["db_password"])

# And the root-level secrets are also accessible as environment variables:

import os

st.write(
    "Has environment variables been set:",
    os.environ["db_username"] == st.secrets["db_username"],
)

----------------------------------------

TITLE: Using Ag-Grid for Advanced Data Tables in Streamlit
DESCRIPTION: Implement the Ag-Grid component for more advanced data table functionality in Streamlit. This third-party component allows for editable grids with extended features.

LANGUAGE: python
CODE:
df = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})
grid_return = AgGrid(df, editable=True)

new_df = grid_return['data']

----------------------------------------

TITLE: Numeric Input Widgets in Streamlit
DESCRIPTION: Widgets for numeric input including number input fields and sliders.

LANGUAGE: python
CODE:
choice = st.number_input("Pick a number", 0, 10)
number = st.slider("Pick a number", 0, 100)

----------------------------------------

TITLE: Adding Selectbox and Radio Button to Streamlit Sidebar
DESCRIPTION: Illustrates how to add a selectbox and a radio button to the Streamlit sidebar using both object notation and 'with' notation. This example demonstrates practical usage of sidebar elements.

LANGUAGE: python
CODE:
import streamlit as st

# Using object notation
add_selectbox = st.sidebar.selectbox(
    "How would you like to be contacted?",
    ("Email", "Home phone", "Mobile phone")
)

# Using "with" notation
with st.sidebar:
    add_radio = st.radio(
        "Choose a shipping method",
        ("Standard (5-15 days)", "Express (2-5 days)")
    )

----------------------------------------

TITLE: Using st.select_slider Widget in Streamlit
DESCRIPTION: The select_slider widget displays a slider interface that allows users to select items from a list. Can be configured as either a single-value or range selector.

LANGUAGE: python
CODE:
streamlit.select_slider

----------------------------------------

TITLE: Cached Resource Pattern
DESCRIPTION: Demonstrates how to use caching to preserve class instances between reruns.

LANGUAGE: python
CODE:
import streamlit as st

class MyResource:
    def __init__(self, api_url: str):
        self._url = api_url

    @st.cache_resource(ttl=300)
    @staticmethod
    def get_resource_manager(api_url: str):
        return MyResource(api_url)

# This is cached until Session State is cleared or 5 minutes has elapsed.
resource_manager = MyResource.get_resource_manager("http://example.com/api/")

----------------------------------------

TITLE: Creating Side-by-Side Columns in Streamlit
DESCRIPTION: Demonstrates how to create and use side-by-side columns layout in Streamlit applications. Uses st.columns() to split the view into equal width columns.

LANGUAGE: python
CODE:
col1, col2 = st.columns(2)
col1.write("this is column 1")
col2.write("this is column 2")

----------------------------------------

TITLE: Configuring Secrets in TOML
DESCRIPTION: Example of defining secrets in a TOML configuration file, showing both root-level environment variables and custom sections.

LANGUAGE: toml
CODE:
# Everything in this section will be available as an environment variable
db_username = "Jane"
db_password = "mypassword"

# You can also add other sections if you like.
# The contents of sections as shown below will not become environment variables,
# but they'll be easily accessible from within Streamlit anyway as we show
# later in this doc.
[my_other_secrets]
things_i_like = ["Streamlit", "Python"]

----------------------------------------

TITLE: Accessing secrets in a Streamlit app using st.secrets
DESCRIPTION: Demonstrates how to access secrets in a Streamlit app using st.secrets. It shows different ways to access simple values, list items, and nested structures.

LANGUAGE: python
CODE:
st.secrets["OpenAI_key"] == "your OpenAI key"
"sally" in st.secrets.whitelist
st.secrets["database"]["user"] == "your username"
st.secrets.database.password == "your password"

----------------------------------------

TITLE: Text Input Widgets in Streamlit
DESCRIPTION: Text input widgets including single-line input, multi-line text areas, and chat input.

LANGUAGE: python
CODE:
name = st.text_input("First name")
text = st.text_area("Text to translate")
prompt = st.chat_input("Say something")
if prompt:
    st.write(f"The user has sent: {prompt}")

----------------------------------------

TITLE: Implementing Chat Input in Streamlit
DESCRIPTION: Creates a chat input widget that allows users to enter messages. The widget returns the user's input which can be processed and displayed.

LANGUAGE: python
CODE:
prompt = st.chat_input("Say something")
if prompt:
    st.write(f"The user has sent: {prompt}")

----------------------------------------

TITLE: Configuring Number Column in Streamlit
DESCRIPTION: Sets up a number column with minimum value and custom currency formatting.

LANGUAGE: python
CODE:
NumberColumn("Price (in USD)", min_value=0, format="$%d")

----------------------------------------

TITLE: Image Display in Streamlit
DESCRIPTION: Methods for displaying images in Streamlit apps from various sources including numpy arrays, bytes, files, and URLs.

LANGUAGE: python
CODE:
st.image(numpy_array)
st.image(image_bytes)
st.image(file)
st.image("https://example.com/myimage.jpg")

----------------------------------------

TITLE: Creating Empty Container with Streamlit in Python
DESCRIPTION: st.empty() creates a single-element container that can be used as a placeholder. This container can later be populated with any Streamlit element and can also be cleared or replaced with new content.

LANGUAGE: python
CODE:
placeholder = st.empty()

----------------------------------------

TITLE: Using st.color_picker in Streamlit (Python)
DESCRIPTION: The st.color_picker function displays a color picker widget in Streamlit applications. It allows users to select a color visually or by inputting color values.

LANGUAGE: python
CODE:
st.color_picker

----------------------------------------

TITLE: Displaying Information with st.write in Streamlit (Python)
DESCRIPTION: st.write is a versatile method in Streamlit for writing various types of content to the app. It can handle text, data frames, and matplotlib figures. This method is typically the first choice for displaying information.

LANGUAGE: python
CODE:
st.write("Hello **world**!")
st.write(my_data_frame)
st.write(my_mpl_figure)

----------------------------------------

TITLE: Caching Functions with Static Streamlit Elements
DESCRIPTION: Example demonstrating how to use Streamlit commands within cached functions to display static elements like success messages when fetching API data.

LANGUAGE: python
CODE:
@st.cache_data
def get_api_data():
    data = api.get(...)
    st.success("Fetched data from API!")  # 👈 Show a success message
    return data

----------------------------------------

TITLE: Creating Streamlit Page Links
DESCRIPTION: Displays clickable links to navigate between pages in a Streamlit app, with optional labels and icons.

LANGUAGE: python
CODE:
st.page_link("app.py", label="Home", icon="🏠")
st.page_link("pages/profile.py", label="Profile")

----------------------------------------

TITLE: Displaying Metrics with Optional Delta in Streamlit
DESCRIPTION: Use st.metric() to display a metric value in large font, optionally with a delta value to indicate change. This function takes a label, the current value, and an optional delta value.

LANGUAGE: python
CODE:
st.metric("My metric", 42, 2)

----------------------------------------

TITLE: Testing Layout Elements in Streamlit
DESCRIPTION: Shows how to test layout components including sidebars, columns, and tabs in Streamlit applications.

LANGUAGE: python
CODE:
from streamlit.testing.v1 import AppTest

at = AppTest.from_file("cheatsheet_app.py")

# sidebar
at.sidebar.text_input[0].set_value("Jane Doe")

# columns
at.columns[1].markdown[0].value == "Hello, world!"

# tabs
at.tabs[2].markdown[0].value == "Hello, yourself!"

----------------------------------------

TITLE: Managing Session State in Streamlit
DESCRIPTION: Using session state to save data between reruns and across pages in a Streamlit application.

LANGUAGE: python
CODE:
st.session_state["foo"] = "bar"

----------------------------------------

TITLE: Creating Chat Message Container in Streamlit
DESCRIPTION: Demonstrates how to create a chat message container that can display various Streamlit elements including text and charts. The example shows a user message with both text and a line chart.

LANGUAGE: python
CODE:
import numpy as np
with st.chat_message("user"):
    st.write("Hello 👋")
    st.line_chart(np.random.randn(30, 3))

----------------------------------------

TITLE: Adding Header Text in Streamlit
DESCRIPTION: Display text in header formatting for major sections.

LANGUAGE: python
CODE:
st.header("This is a header")

----------------------------------------

TITLE: Displaying Progress Bar in Streamlit
DESCRIPTION: Shows how to create a progress bar that updates as a task progresses. The progress is incremented in a loop, simulating a slow operation.

LANGUAGE: python
CODE:
for i in range(101):
  st.progress(i)
  do_something_slow()

----------------------------------------

TITLE: Using st.spinner in Streamlit Python Applications
DESCRIPTION: The st.spinner function is used to temporarily display a message while executing a block of code. It provides visual feedback to users during long-running operations.

LANGUAGE: python
CODE:
streamlit.spinner

----------------------------------------

TITLE: Streamlit Application Dockerfile Configuration
DESCRIPTION: Dockerfile for building a containerized Streamlit application using Python 3.9-slim as the base image, with necessary dependencies and security configurations.

LANGUAGE: docker
CODE:
FROM python:3.9-slim

RUN groupadd --gid 1000 appuser \
    && useradd --uid 1000 --gid 1000 -ms /bin/bash appuser

RUN pip3 install --no-cache-dir --upgrade \
    pip \
    virtualenv

RUN apt-get update && apt-get install -y \
    build-essential \
    software-properties-common \
    git

USER appuser
WORKDIR /home/appuser

RUN git clone https://github.com/streamlit/streamlit-example.git app

ENV VIRTUAL_ENV=/home/appuser/venv
RUN virtualenv ${VIRTUAL_ENV}
RUN . ${VIRTUAL_ENV}/bin/activate && pip install -r app/requirements.txt

EXPOSE 8501

COPY run.sh /home/appuser
ENTRYPOINT ["./run.sh"]

----------------------------------------

TITLE: Building Chat-based Apps in Streamlit Python
DESCRIPTION: Demonstrates how to create chat-based applications using Streamlit, including displaying chat messages and chat input widgets.

LANGUAGE: python
CODE:
# Insert a chat message container.
with st.chat_message("user"):
    st.write("Hello 👋")
    st.line_chart(np.random.randn(30, 3))

# Display a chat input widget at the bottom of the app.
st.chat_input("Say something")

# Display a chat input widget inline.
with st.container():
    st.chat_input("Say something")

----------------------------------------

TITLE: Testing Data Elements in Streamlit
DESCRIPTION: Demonstrates testing of data display elements including dataframes, metrics, JSON, and tables using the AppTest framework.

LANGUAGE: python
CODE:
from streamlit.testing.v1 import AppTest

at = AppTest.from_file("cheatsheet_app.py")

# dataframe
expected_df = pd.DataFrame([1, 2, 3])
assert at.dataframe[0].value.equals(expected_df)

# metric
assert at.metric[0].value == "9500"
assert at.metric[0].delta == "1000"

# json
assert at.json[0].value == '["hi", {"foo": "bar"}]'

# table
table_df = pd.DataFrame([1, 2, 3])
assert at.table[0].value.equals(table_df)

----------------------------------------

TITLE: Using st.page_link in Streamlit Python Applications
DESCRIPTION: st.page_link is a widget that displays a clickable link to navigate between pages in a multipage Streamlit app or to external pages. This component is useful for building custom navigation menus and dynamic page routing.

LANGUAGE: python
CODE:
st.page_link

----------------------------------------

TITLE: Using st.login in Streamlit
DESCRIPTION: The st.login function redirects users to the configured authentication provider to handle user login. This is part of Streamlit's authentication system and requires proper configuration of authentication providers.

LANGUAGE: python
CODE:
st.login()

----------------------------------------

TITLE: Creating Tabbed Interface in Streamlit
DESCRIPTION: Shows how to create and use tabbed interfaces to organize content into separate views.

LANGUAGE: python
CODE:
tab1, tab2 = st.tabs(["Tab 1", "Tab2"])
tab1.write("this is tab 1")
tab2.write("this is tab 2")

----------------------------------------

TITLE: Rendering HTML String as Streamlit Component
DESCRIPTION: Example of using components.html() to embed a Bootstrap 4 collapse element in a Streamlit app.

LANGUAGE: python
CODE:
import streamlit as st
import streamlit.components.v1 as components

# bootstrap 4 collapse example
components.html(
    """
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    <div id="accordion">
      <div class="card">
        <div class="card-header" id="headingOne">
          <h5 class="mb-0">
            <button class="btn btn-link" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
            Collapsible Group Item #1
            </button>
          </h5>
        </div>
        <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion">
          <div class="card-body">
            Collapsible Group Item #1 content
          </div>
        </div>
      </div>
      <div class="card">
        <div class="card-header" id="headingTwo">
          <h5 class="mb-0">
            <button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
            Collapsible Group Item #2
            </button>
          </h5>
        </div>
        <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordion">
          <div class="card-body">
            Collapsible Group Item #2 content
          </div>
        </div>
      </div>
    </div>
    """,
    height=600,
)

----------------------------------------

TITLE: Rendering Folium Maps in Streamlit
DESCRIPTION: Use the streamlit-folium component to render interactive Folium maps in a Streamlit app. This example creates a map centered on a specific location and adds a marker.

LANGUAGE: python
CODE:
m = folium.Map(location=[39.949610, -75.150282], zoom_start=16)
folium.Marker([39.949610, -75.150282], popup="Liberty Bell", tooltip="Liberty Bell").add_to(m)

st_data = st_folium(m, width=725)

----------------------------------------

TITLE: Implementing a Stateful Counter in Streamlit
DESCRIPTION: Demonstrates how to create a basic counter application using Streamlit's Session State to maintain the count across app reruns.

LANGUAGE: python
CODE:
import streamlit as st

st.title('Counter Example')
if 'count' not in st.session_state:
    st.session_state.count = 0

increment = st.button('Increment')
if increment:
    st.session_state.count += 1

st.write('Count = ', st.session_state.count)

----------------------------------------

TITLE: Testing Text Elements in Streamlit
DESCRIPTION: Demonstrates how to test various text-based elements in Streamlit including titles, headers, markdown, code blocks, captions, and LaTeX using AppTest framework.

LANGUAGE: python
CODE:
from streamlit.testing.v1 import AppTest

at = AppTest.from_file("cheatsheet_app.py")

# Headers
assert "My app" in at.title[0].value
assert "New topic" in at.header[0].value
assert "Interesting sub-topic" in at.subheader[0].value
assert len(at.divider) == 2

# Body / code
assert "Hello, world!" in at.markdown[0].value
assert "import streamlit as st" in at.code[0].value
assert "A cool diagram" in at.caption[0].value
assert "Hello again, world!" in at.text[0].value
assert "\int a x^2 \,dx" in at.latex[0].value

----------------------------------------

TITLE: Displaying Header Text in Streamlit
DESCRIPTION: st.header() is a Streamlit function that displays text in header formatting. It can be used to create section headers and organize content hierarchically in a Streamlit application.

LANGUAGE: python
CODE:
st.header("Your Header Text")

----------------------------------------

TITLE: Switch Page Navigation in Streamlit
DESCRIPTION: The st.switch_page function allows programmatic navigation to different pages within a Streamlit application. This function takes a page name as input and switches the active page to the specified target.

LANGUAGE: python
CODE:
st.switch_page("target_page_name")

----------------------------------------

TITLE: Configuring Streamlit Selectbox with Dynamic Label Visibility
DESCRIPTION: Example demonstrating how to create a selectbox widget with configurable label visibility and disabled state using session state. The code shows interaction between a checkbox, radio buttons, and the selectbox to control its appearance and functionality.

LANGUAGE: python
CODE:
import streamlit as st

# Store the initial value of widgets in session state
if "visibility" not in st.session_state:
    st.session_state.visibility = "visible"
    st.session_state.disabled = False

col1, col2 = st.columns(2)

with col1:
    st.checkbox("Disable selectbox widget", key="disabled")
    st.radio(
        "Set selectbox label visibility 👉",
        key="visibility",
        options=["visible", "hidden", "collapsed"],
    )

with col2:
    option = st.selectbox(
        "How would you like to be contacted?",
        ("Email", "Home phone", "Mobile phone"),
        label_visibility=st.session_state.visibility,
        disabled=st.session_state.disabled,
    )

----------------------------------------

TITLE: Adding Elements to Streamlit Sidebar using 'with' Notation
DESCRIPTION: Shows how to add elements to the Streamlit sidebar using 'with' notation. This method is more verbose but necessary for certain elements like st.echo and st.spinner.

LANGUAGE: python
CODE:
with st.sidebar:
    st.[element_name]

----------------------------------------

TITLE: Using Streamlit AgGrid Component
DESCRIPTION: Example showing how to use the AgGrid component to display a dataframe in a Streamlit application.

LANGUAGE: python
CODE:
AgGrid(my_dataframe)

----------------------------------------

TITLE: Displaying Static Tables in Streamlit
DESCRIPTION: Use st.table() to display a static, non-interactive table in a Streamlit app. This function is useful for smaller datasets where interactivity is not required.

LANGUAGE: python
CODE:
st.table(my_data_frame)

----------------------------------------

TITLE: Form Processing with Callback and Session State in Streamlit
DESCRIPTION: Illustrates processing form submissions using callbacks and session state to manage form data and updates.

LANGUAGE: python
CODE:
import streamlit as st

if 'sum' not in st.session_state:
    st.session_state.sum = ''

def sum():
    result = st.session_state.a + st.session_state.b
    st.session_state.sum = result

col1,col2 = st.columns(2)
col1.title('Sum:')
if isinstance(st.session_state.sum, float):
    col2.title(f'{st.session_state.sum:.2f}')

with st.form('addition'):
    st.number_input('a', key = 'a')
    st.number_input('b', key = 'b')
    st.form_submit_button('add', on_click=sum)

----------------------------------------

TITLE: Dynamic Data Visualization with Streamlit Line Chart
DESCRIPTION: Demonstrates how to create and update a line chart in real-time using Streamlit's add_rows() method. The example creates an initial DataFrame with random data, displays it as a line chart, and then continuously adds new random data rows with a slight delay between updates.

LANGUAGE: python
CODE:
import streamlit as st
import pandas as pd
import numpy as np
import time

df = pd.DataFrame(np.random.randn(15, 3), columns=(["A", "B", "C"]))
my_data_element = st.line_chart(df)

for tick in range(10):
    time.sleep(.5)
    add_df = pd.DataFrame(np.random.randn(1, 3), columns=(["A", "B", "C"]))
    my_data_element.add_rows(add_df)

st.button("Regenerate")

----------------------------------------

TITLE: Using st.subheader in Streamlit Python
DESCRIPTION: Streamlit's subheader function allows you to display text in subheader formatting. It accepts a string parameter and renders it as a styled subheading in the Streamlit app.

LANGUAGE: python
CODE:
st.subheader("Your subheader text here")

----------------------------------------

TITLE: Using st.checkbox in Streamlit (Python)
DESCRIPTION: The st.checkbox function displays a checkbox widget in Streamlit applications. It allows users to toggle a boolean value on or off. The function is part of the streamlit module.

LANGUAGE: python
CODE:
streamlit.checkbox

----------------------------------------

TITLE: Accessing User Information in Streamlit
DESCRIPTION: The st.experimental_user function returns information about the logged-in user. On Community Cloud, for non-authenticated apps, it returns the user's email if they are logged in and a member of the app's workspace, otherwise None.

LANGUAGE: python
CODE:
import streamlit as st

user = st.experimental_user()
if user.email:
    st.write(f"Welcome, {user.email}!")
else:
    st.write("Please log in.")

----------------------------------------

TITLE: Implementing Stateful Widgets in Streamlit Entrypoint File
DESCRIPTION: Example showing how to create stateful widgets in a Streamlit multipage app's entrypoint file. Demonstrates setting up navigation and creating sidebar widgets that maintain state across pages.

LANGUAGE: python
CODE:
import streamlit as st

pg = st.navigation([st.Page("page_1.py"), st.Page("page_2.py")])

st.sidebar.selectbox("Group", ["A","B","C"], key="group")
st.sidebar.slider("Size", 1, 5, key="size")

pg.run()

----------------------------------------

TITLE: Displaying Preformatted Text in Streamlit
DESCRIPTION: Write fixed-width and preformatted text without any formatting.

LANGUAGE: python
CODE:
st.text("Hello world")

----------------------------------------

TITLE: Creating Modal Dialog in Streamlit
DESCRIPTION: Demonstrates how to insert a modal dialog that can rerun independently from the rest of the script using the @st.dialog decorator.

LANGUAGE: python
CODE:
@st.dialog("Sign up")
def email_form():
    name = st.text_input("Name")
    email = st.text_input("Email")

----------------------------------------

TITLE: Implementing Batch Thread Processing in Streamlit
DESCRIPTION: Demonstrates how to create and manage multiple worker threads that execute independently and display results after all threads complete. Uses a custom WorkerThread class that avoids Streamlit commands within threads.

LANGUAGE: python
CODE:
import streamlit as st
import time
from threading import Thread


class WorkerThread(Thread):
    def __init__(self, delay):
        super().__init__()
        self.delay = delay
        self.return_value = None

    def run(self):
        start_time = time.time()
        time.sleep(self.delay)
        end_time = time.time()
        self.return_value = f"start: {start_time}, end: {end_time}"


delays = [5, 4, 3, 2, 1]
threads = [WorkerThread(delay) for delay in delays]
for thread in threads:
    thread.start()
for thread in threads:
    thread.join()
for i, thread in enumerate(threads):
    st.header(f"Thread {i}")
    st.write(thread.return_value)

st.button("Rerun")

----------------------------------------

TITLE: Querying TiDB Database with Streamlit (Python)
DESCRIPTION: Python code for a Streamlit app that connects to a TiDB database, executes a query, and displays the results. Uses st.connection for secure access and caching.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st

# Initialize connection.
conn = st.connection('tidb', type='sql')

# Perform query.
df = conn.query('SELECT * from mytable;', ttl=600)

# Print results.
for row in df.itertuples():
    st.write(f"{row.name} has a :{row.pet}:")

----------------------------------------

TITLE: Basic Streamlit Toggle Widget Usage
DESCRIPTION: The st.toggle component displays a toggle widget that allows users to switch between True and False states. This widget is commonly used for binary settings or feature flags in Streamlit applications.

LANGUAGE: python
CODE:
st.toggle(label="Enable feature", value=False, key=None)

----------------------------------------

TITLE: Logging Out Users with Streamlit in Python
DESCRIPTION: The st.logout() function is used to remove the current user's identity information and initialize a clean session. This is particularly useful in authenticated Streamlit applications where you need to implement user logout functionality.

LANGUAGE: python
CODE:
st.logout()

----------------------------------------

TITLE: Streamlit SQL Server Integration
DESCRIPTION: Python code demonstrating how to connect Streamlit to SQL Server using pyodbc, including connection caching and query execution.

LANGUAGE: python
CODE:
import streamlit as st
import pyodbc

@st.cache_resource
def init_connection():
    return pyodbc.connect(
        "DRIVER={ODBC Driver 17 for SQL Server};SERVER="
        + st.secrets["server"]
        + ";DATABASE="
        + st.secrets["database"]
        + ";UID="
        + st.secrets["username"]
        + ";PWD="
        + st.secrets["password"]
    )

conn = init_connection()

@st.cache_data(ttl=600)
def run_query(query):
    with conn.cursor() as cur:
        cur.execute(query)
        return cur.fetchall()

rows = run_query("SELECT * from mytable;")

for row in rows:
    st.write(f"{row[0]} has a :{row[1]}:")

----------------------------------------

TITLE: Counting Page Runs with Session State in Streamlit
DESCRIPTION: This example shows how to use Session State to count the number of times a Streamlit page has been run. It demonstrates initializing, incrementing, and displaying a counter across reruns.

LANGUAGE: python
CODE:
import streamlit as st

if "counter" not in st.session_state:
    st.session_state.counter = 0

st.session_state.counter += 1

st.header(f"This page has run {st.session_state.counter} times.")
st.button("Run it again")

----------------------------------------

TITLE: Rendering HTML Content in Streamlit
DESCRIPTION: Display raw HTML strings in the Streamlit app.

LANGUAGE: python
CODE:
st.html("<p>Foo bar.</p>")

----------------------------------------

TITLE: Displaying Images with st.image in Streamlit (Python)
DESCRIPTION: The st.image function in Streamlit is used to display images in a Streamlit application. It can handle single images or lists of images, supporting various input formats and customization options.

LANGUAGE: python
CODE:
st.image(image, caption=None, width=None, use_column_width=None, clamp=False, channels="RGB", output_format="auto")

----------------------------------------

TITLE: Displaying Title Text in Streamlit - Python
DESCRIPTION: The st.title function is used to display text in title formatting in Streamlit applications. It creates a large, prominent heading that can be used as the main title of your app or section headers.

LANGUAGE: python
CODE:
st.title("Your Title Text")

----------------------------------------

TITLE: Using st.video to Display Video Player in Streamlit
DESCRIPTION: The st.video function allows you to embed a video player in your Streamlit app. It can accept various video sources including URLs and local file paths. The function is part of Streamlit's media display capabilities.

LANGUAGE: python
CODE:
import streamlit as st

st.video("https://example.com/video.mp4")

----------------------------------------

TITLE: Implementing Horizontal Dividers in Streamlit Python
DESCRIPTION: Example showing how to use st.divider() to create horizontal rules between different Streamlit elements including text and sliders. The dividers help visually separate content sections in the application interface.

LANGUAGE: python
CODE:
import streamlit as st

st.write("This is some text.")

st.slider("This is a slider", 0, 100, (25, 75))

st.divider()  # 👈 Draws a horizontal rule

st.write("This text is between the horizontal rules.")

st.divider()  # 👈 Another horizontal rule

----------------------------------------

TITLE: Defining Fragments in Streamlit
DESCRIPTION: Shows how to define a fragment that reruns independently from the rest of the script at specified intervals using the @st.fragment decorator.

LANGUAGE: python
CODE:
@st.fragment(run_every="10s")
def fragment():
    df = get_data()
    st.line_chart(df)

----------------------------------------

TITLE: Empty Dataframe Configuration with Column Validation
DESCRIPTION: Example of configuring an empty dataframe with specific column types and validation rules for user input

LANGUAGE: python
CODE:
import streamlit as st
import pandas as pd

df = pd.DataFrame(columns=['name','age','color'])
colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']
config = {
    'name' : st.column_config.TextColumn('Full Name (required)', width='large', required=True),
    'age' : st.column_config.NumberColumn('Age (years)', min_value=0, max_value=122),
    'color' : st.column_config.SelectboxColumn('Favorite Color', options=colors)
}

result = st.data_editor(df, column_config = config, num_rows='dynamic')

if st.button('Get results'):
    st.write(result)

----------------------------------------

TITLE: Displaying Code Blocks in Streamlit
DESCRIPTION: Display a code block with optional syntax highlighting for code examples.

LANGUAGE: python
CODE:
st.code("a = 1234")

----------------------------------------

TITLE: File Upload Widget Declaration in Streamlit Python
DESCRIPTION: Reference documentation for the streamlit.file_uploader function, which creates a file upload widget in Streamlit applications. This widget enables users to upload files through the Streamlit interface.

LANGUAGE: python
CODE:
st.file_uploader

----------------------------------------

TITLE: Using st.text in Streamlit Python
DESCRIPTION: The st.text function writes fixed-width and preformatted text to a Streamlit app. The text will be displayed in a monospace font and preserve whitespace formatting.

LANGUAGE: python
CODE:
st.text("Hello world")

----------------------------------------

TITLE: Reading Secrets in Streamlit
DESCRIPTION: Use st.secrets to read secrets from a .streamlit/secrets.toml file during local development. This method allows secure access to sensitive credentials without exposing them in the repository.

LANGUAGE: python
CODE:
st.secrets

----------------------------------------

TITLE: Initializing AppTest Basic Usage Example
DESCRIPTION: Basic example showing how to initialize and run a Streamlit app test, set secrets, and verify test conditions.

LANGUAGE: python
CODE:
from streamlit.testing.v1 import AppTest

at = AppTest.from_file("streamlit_app.py")
at.secrets["WORD"] = "Foobar"
at.run()
assert not at.exception

at.text_input("word").input("Bazbat").run()
assert at.warning[0].value == "Try again."

----------------------------------------

TITLE: Initializing Streamlit Multiselect Widget in Python
DESCRIPTION: The st.multiselect widget creates a dropdown interface that allows users to select multiple items. The widget starts empty by default and can be populated with options for user selection.

LANGUAGE: python
CODE:
st.multiselect

----------------------------------------

TITLE: Complete Streamlit App for Uber Pickups Analysis
DESCRIPTION: The full Python script for the interactive Streamlit app, combining all components for Uber pickup data exploration in NYC.

LANGUAGE: python
CODE:
import streamlit as st
import pandas as pd
import numpy as np

st.title('Uber pickups in NYC')

DATE_COLUMN = 'date/time'
DATA_URL = ('https://s3-us-west-2.amazonaws.com/'
            'streamlit-demo-data/uber-raw-data-sep14.csv.gz')

@st.cache_data
def load_data(nrows):
    data = pd.read_csv(DATA_URL, nrows=nrows)
    lowercase = lambda x: str(x).lower()
    data.rename(lowercase, axis='columns', inplace=True)
    data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])
    return data

data_load_state = st.text('Loading data...')
data = load_data(10000)
data_load_state.text("Done! (using st.cache_data)")

if st.checkbox('Show raw data'):
    st.subheader('Raw data')
    st.write(data)

st.subheader('Number of pickups by hour')
hist_values = np.histogram(data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0]
st.bar_chart(hist_values)

hour_to_filter = st.slider('hour', 0, 23, 17)
filtered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]

st.subheader('Map of all pickups at %s:00' % hour_to_filter)
st.map(filtered_data)

----------------------------------------

TITLE: Embedding External Website in Streamlit App
DESCRIPTION: Example of using components.iframe() to embed an external website (example.com) in a Streamlit app.

LANGUAGE: python
CODE:
import streamlit as st
import streamlit.components.v1 as components

# embed streamlit docs in a streamlit app
components.iframe("https://example.com", height=500)

----------------------------------------

TITLE: Adding Subheader Text in Streamlit
DESCRIPTION: Display text in subheader formatting for subsections.

LANGUAGE: python
CODE:
st.subheader("This is a subheader")

----------------------------------------

TITLE: Creating Vega-Lite Charts with Streamlit and Native Themes
DESCRIPTION: This snippet demonstrates how to create Vega-Lite charts in Streamlit using both the default Streamlit theme and the native Vega-Lite theme. It uses data from the vega_datasets library to create a scatter plot of car statistics.

LANGUAGE: python
CODE:
import streamlit as st
from vega_datasets import data

source = data.cars()

chart = {
    "mark": "point",
    "encoding": {
        "x": {
            "field": "Horsepower",
            "type": "quantitative",
        },
        "y": {
            "field": "Miles_per_Gallon",
            "type": "quantitative",
        },
        "color": {"field": "Origin", "type": "nominal"},
        "shape": {"field": "Origin", "type": "nominal"},
    },
}

tab1, tab2 = st.tabs(["Streamlit theme (default)", "Vega-Lite native theme"])

with tab1:
    # Use the Streamlit theme.
    # This is the default. So you can also omit the theme argument.
    st.vega_lite_chart(
        source, chart, theme="streamlit", use_container_width=True
    )
with tab2:
    st.vega_lite_chart(
        source, chart, theme=None, use_container_width=True
    )

----------------------------------------

TITLE: Displaying Sequential Toast Messages in Streamlit
DESCRIPTION: Demonstrates how to display multiple sequential toast notifications with delays between them. Uses a button trigger to show three consecutive messages with the last one including a celebration emoji icon.

LANGUAGE: python
CODE:
import streamlit as st
import time

if st.button('Three cheers'):
    st.toast('Hip!')
    time.sleep(.5)
    st.toast('Hip!')
    time.sleep(.5)
    st.toast('Hooray!', icon='🎉')

----------------------------------------

TITLE: Configuring Snowflake Connection in Streamlit Secrets
DESCRIPTION: Example of how to add Snowflake connection parameters to the .streamlit/secrets.toml file for secure access.

LANGUAGE: toml
CODE:
[connections.snowflake]
account = "xxxxxxx-xxxxxxx"
user = "xxx"
private_key_file = "../xxx/xxx.p8"
role = "xxx"
warehouse = "xxx"
database = "xxx"
schema = "xxx"

----------------------------------------

TITLE: Initializing Session State in Python
DESCRIPTION: Demonstrates how to initialize Session State variables in a Streamlit app using both dictionary-like and attribute-based syntax.

LANGUAGE: python
CODE:
import streamlit as st

# Check if 'key' already exists in session_state
# If not, then initialize it
if 'key' not in st.session_state:
    st.session_state['key'] = 'value'

# Session State also supports the attribute based syntax
if 'key' not in st.session_state:
    st.session_state.key = 'value'

----------------------------------------

TITLE: Installing Required Python Packages
DESCRIPTION: Command to install the necessary Python libraries Streamlit and LangChain-OpenAI

LANGUAGE: python
CODE:
pip install streamlit langchain-openai

----------------------------------------

TITLE: Configuring Streamlit Component Path
DESCRIPTION: Python code to properly configure the component path to use the built frontend assets instead of development server.

LANGUAGE: python
CODE:
parent_dir = os.path.dirname(os.path.abspath(__file__))
build_dir = os.path.join(parent_dir, "frontend/build")
component = components.declare_component("new_component_name", path=build_dir)

----------------------------------------

TITLE: Rendering Markdown Text in Streamlit
DESCRIPTION: Display string formatted as Markdown with support for basic formatting like bold text.

LANGUAGE: python
CODE:
st.markdown("Hello **world**!")

----------------------------------------

TITLE: Setting Up Streamlit Config File Structure
DESCRIPTION: Shows the directory structure for configuring Streamlit apps using a config.toml file in the .streamlit directory.

LANGUAGE: plaintext
CODE:
your-project/
├── .streamlit/
│   └── config.toml
└── your_app.py

----------------------------------------

TITLE: Streamlit Page Runner
DESCRIPTION: Method documentation for executing a Streamlit page within a multipage application context. The run method handles the actual rendering and execution of the page content.

LANGUAGE: python
CODE:
StreamlitPage.run()

----------------------------------------

TITLE: Basic Streamlit App Querying Snowflake
DESCRIPTION: A simple Streamlit app that connects to Snowflake, queries a table, and displays the results.

LANGUAGE: python
CODE:
import streamlit as st

conn = st.connection("snowflake")
df = conn.query("SELECT * FROM mytable;", ttl="10m")

for row in df.itertuples():
    st.write(f"{row.NAME} has a :{row.PET}:")

----------------------------------------

TITLE: Using st.time_input Widget in Streamlit
DESCRIPTION: The st.time_input widget provides a time picker interface that allows users to select a specific time value. This widget returns a datetime.time object representing the selected time.

LANGUAGE: python
CODE:
st.time_input("Select time:")

----------------------------------------

TITLE: Streamlit App with AWS S3 Integration
DESCRIPTION: Main Streamlit application code that demonstrates connecting to S3, reading a CSV file, and displaying its contents. Uses FilesConnection for handling S3 connectivity with caching support.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st
from st_files_connection import FilesConnection

# Create connection object and retrieve file contents.
# Specify input format is a csv and to cache the result for 600 seconds.
conn = st.connection('s3', type=FilesConnection)
df = conn.read("testbucket-jrieke/myfile.csv", input_format="csv", ttl=600)

# Print results.
for row in df.itertuples():
    st.write(f"{row.Owner} has a :{row.Pet}:")

----------------------------------------

TITLE: Displaying Exception Output in Streamlit
DESCRIPTION: Shows how to display an exception in a Streamlit app using the st.exception() function. This example creates a RuntimeError and displays it.

LANGUAGE: python
CODE:
e = RuntimeError("This is an exception of type RuntimeError")
st.exception(e)

----------------------------------------

TITLE: Updating Streamlit Configuration with st.set_option in Python
DESCRIPTION: The st.set_option function is used to update a single configuration option in Streamlit. It allows developers to dynamically change configuration settings during runtime.

LANGUAGE: python
CODE:
streamlit.set_option()

----------------------------------------

TITLE: Rendering LaTeX in Streamlit
DESCRIPTION: Display mathematical expressions formatted using LaTeX syntax.

LANGUAGE: python
CODE:
st.latex("\\int a x^2 \\,dx")

----------------------------------------

TITLE: Declaring Custom Streamlit Component in Python
DESCRIPTION: Creates and registers a custom component with Streamlit using declare_component. This allows developers to create reusable UI components with custom frontend implementations.

LANGUAGE: python
CODE:
from st.components.v1 import declare_component
declare_component(
    "custom_slider",
    "/frontend",
)

----------------------------------------

TITLE: StreamlitPage Class Reference
DESCRIPTION: Class reference documentation for constructing and managing pages in Streamlit multipage applications. A StreamlitPage object represents a single page within a multipage Streamlit app.

LANGUAGE: python
CODE:
st.Page()

----------------------------------------

TITLE: Creating MySQL Database and Table
DESCRIPTION: SQL commands to create a new database called 'pets', a table named 'mytable', and insert sample data into it.

LANGUAGE: sql
CODE:
CREATE DATABASE pets;

USE pets;

CREATE TABLE mytable (
    name varchar(80),
    pet varchar(80)
);

INSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');

----------------------------------------

TITLE: Using st.rerun to Update Header in Streamlit
DESCRIPTION: This snippet demonstrates how to use st.rerun to update a header in a Streamlit app. It initializes a session state value and uses a button to trigger a change and rerun the script.

LANGUAGE: python
CODE:
import streamlit as st

if "value" not in st.session_state:
    st.session_state.value = "Title"

##### Option using st.rerun #####
st.header(st.session_state.value)

if st.button("Foo"):
    st.session_state.value = "Foo"
    st.rerun()

----------------------------------------

TITLE: Configuring Streamlit Page Settings
DESCRIPTION: Demonstrates how to configure page-level settings like title and favicon using st.set_page_config().

LANGUAGE: python
CODE:
st.set_page_config(
  page_title="My app",
  page_icon=":shark:",
)

----------------------------------------

TITLE: Configuring List Column in Streamlit
DESCRIPTION: Creates a list column with custom width for displaying array data.

LANGUAGE: python
CODE:
ListColumn("Sales (last 6 months)", width="medium")

----------------------------------------

TITLE: Setting Page Title in Streamlit
DESCRIPTION: Display text in title formatting at the top of the Streamlit app.

LANGUAGE: python
CODE:
st.title("The app title")

----------------------------------------

TITLE: Simple Streamlit App for Testing
DESCRIPTION: A basic Streamlit app that counts beans, used as an example for testing throughout the guide.

LANGUAGE: python
CODE:
"""app.py"""
import streamlit as st

# Initialize st.session_state.beans
st.session_state.beans = st.session_state.get("beans", 0)

st.title("Bean counter :paw_prints:")

addend = st.number_input("Beans to add", 0, 10)
if st.button("Add"):
    st.session_state.beans += addend
st.markdown(f"Beans counted: {st.session_state.beans}")

----------------------------------------

TITLE: Image Comparison in Streamlit
DESCRIPTION: Component for comparing two images using a slider interface powered by JuxtaposeJS.

LANGUAGE: python
CODE:
from streamlit_image_comparison import image_comparison

image_comparison(img1="image1.jpg", img2="image2.jpg",)

----------------------------------------

TITLE: Configuring Streamlit Navigation Settings
DESCRIPTION: Configuration file to disable default sidebar navigation in Streamlit

LANGUAGE: toml
CODE:
[client]
showSidebarNavigation = false

----------------------------------------

TITLE: Defining and Calling a Basic Fragment in Python
DESCRIPTION: This snippet demonstrates how to define a fragment function using the @st.fragment decorator and call it in a Streamlit app. The fragment contains a button that, when clicked, displays a message.

LANGUAGE: python
CODE:
import streamlit as st

@st.fragment
def fragment_function():
    if st.button("Hi!"):
        st.write("Hi back!")

fragment_function()

----------------------------------------

TITLE: Testing Chat Elements in Streamlit
DESCRIPTION: Demonstrates how to test chat-related components including chat input and chat messages with avatars.

LANGUAGE: python
CODE:
from streamlit.testing.v1 import AppTest

at = AppTest.from_file("cheatsheet_app.py")

# chat_input
at.chat_input[0].set_value("Do you know any jokes?").run()
# Note: chat_input value clears after every re-run (like in a real app)

# chat_message
assert at.chat_message[0].markdown[0].value == "Do you know any jokes?"
assert at.chat_message[0].avatar == "user"

----------------------------------------

TITLE: Drawable Canvas in Streamlit
DESCRIPTION: Component providing a sketching canvas using Fabric.js with customizable drawing options and background settings.

LANGUAGE: python
CODE:
from streamlit_drawable_canvas import st_canvas

st_canvas(fill_color="rgba(255, 165, 0, 0.3)", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == 'point' else 0, key="canvas",)

----------------------------------------

TITLE: Configuring Bar Chart Column in Streamlit
DESCRIPTION: Sets up a bar chart column with y-axis range configuration.

LANGUAGE: python
CODE:
BarChartColumn("Marketing spend" y_min=0, y_max=100)

----------------------------------------

TITLE: Stopping Streamlit Script Execution
DESCRIPTION: Shows how to stop the execution of a Streamlit script immediately using st.stop().

LANGUAGE: python
CODE:
st.stop()

----------------------------------------

TITLE: Displaying Error Message in Streamlit
DESCRIPTION: Demonstrates how to show an error message in a Streamlit app using the st.error() function.

LANGUAGE: python
CODE:
st.error("We encountered an error")

----------------------------------------

TITLE: WebRTC Integration in Streamlit
DESCRIPTION: Component for handling real-time video/audio streams using WebRTC in Streamlit applications.

LANGUAGE: python
CODE:
from streamlit_webrtc import webrtc_streamer

webrtc_streamer(key="sample")

----------------------------------------

TITLE: Retrieving and Asserting Streamlit Elements
DESCRIPTION: Examples of how to retrieve Streamlit elements by index and key, and how to make assertions about their properties.

LANGUAGE: python
CODE:
assert at.button[0].label == "B"
assert at.button[1].label == "A"

assert at.button(key="submit").label == "Next"
assert at.button("cancel").label == "Back"

assert at.selectbox[0].value == None
assert at.selectbox[0].label == "A"
assert at.selectbox[0].options == ["1","2","3"]
assert at.selectbox[0].index == None
assert at.selectbox[0].help == "Pick a number"
assert at.selectbox[0].placeholder == "Pick me"
assert at.selectbox[0].disabled == False

----------------------------------------

TITLE: Calling a Fragment Function in Streamlit's Sidebar
DESCRIPTION: This example shows how to call a fragment function inside a Streamlit sidebar using a context manager. This allows the fragment's content to appear in a specific container.

LANGUAGE: python
CODE:
with st.sidebar:
    fragment_function()

----------------------------------------

TITLE: Displaying Media with Streamlit in Python
DESCRIPTION: Shows how to display various types of media content using Streamlit, including images, audio, video (with optional subtitles), and logos.

LANGUAGE: python
CODE:
st.image("./header.png")
st.audio(data)
st.video(data)
st.video(data, subtitles="./subs.vtt")
st.logo("logo.jpg")

----------------------------------------

TITLE: Configuring Checkbox Column in Streamlit
DESCRIPTION: Creates a checkbox column with help text for selection.

LANGUAGE: python
CODE:
CheckboxColumn("Your favorite?", help="Select your **favorite** widgets")

----------------------------------------

TITLE: Using Multi-Element Containers in Streamlit
DESCRIPTION: Shows how to create and manipulate a multi-element container that can hold multiple Streamlit elements with controlled rendering order.

LANGUAGE: python
CODE:
c = st.container()
st.write("This will show last")
c.write("This will show first")
c.write("This will show second")

----------------------------------------

TITLE: Enum Class Usage in Streamlit
DESCRIPTION: Shows how to use Enum classes with Streamlit widgets and handle coercion settings.

LANGUAGE: python
CODE:
from enum import Enum
import streamlit as st

# class syntax
class Color(Enum):
    RED = 1
    GREEN = 2
    BLUE = 3

selected_colors = set(st.multiselect("Pick colors", options=Color))

if selected_colors == {Color.RED, Color.GREEN}:
    st.write("Hooray, you found the color YELLOW!")

----------------------------------------

TITLE: Adding Elements to Streamlit Sidebar using Object Notation
DESCRIPTION: Demonstrates how to add elements to the Streamlit sidebar using object notation. This method is concise and suitable for most elements.

LANGUAGE: python
CODE:
st.sidebar.[element_name]

----------------------------------------

TITLE: Admin Page Implementation
DESCRIPTION: Admin-restricted page with role-based access control

LANGUAGE: python
CODE:
import streamlit as st
from menu import menu_with_redirect

menu_with_redirect()

if st.session_state.role not in ["admin", "super-admin"]:
    st.warning("You do not have permission to view this page.")
    st.stop()

st.title("This page is available to all admins")
st.markdown(f"You are currently logged with the role of {st.session_state.role}.")

----------------------------------------

TITLE: Automating Fragment Reruns in Python
DESCRIPTION: This example shows how to use the run_every parameter in the @st.fragment decorator to automatically rerun a fragment at specified intervals. It's useful for displaying live data streams or status updates.

LANGUAGE: python
CODE:
@st.fragment(run_every="10s")
def auto_function():
		# This will update every 10 seconds!
		df = get_latest_updates()
		st.line_chart(df)

auto_function()

----------------------------------------

TITLE: Using Interactive Widgets in Cached Functions
DESCRIPTION: Example demonstrating how to use interactive widgets within cached functions using the experimental_allow_widgets parameter.

LANGUAGE: python
CODE:
@st.cache_data(experimental_allow_widgets=True)  # 👈 Set the parameter
def get_data():
    num_rows = st.slider("Number of rows to get")  # 👈 Add a slider
    data = api.get(..., num_rows)
    return data

----------------------------------------

TITLE: Accessing Context in Streamlit
DESCRIPTION: Using st.context to access cookies and headers in a read-only manner.

LANGUAGE: python
CODE:
st.context.cookies
st.context.headers

----------------------------------------

TITLE: Declaring Secrets in Streamlit App Test
DESCRIPTION: This snippet demonstrates how to declare secrets within a Streamlit app test, including nested secrets. It shows the equivalent of a secrets.toml file in Python code.

LANGUAGE: python
CODE:
# Initialize an AppTest instance.
at = AppTest.from_file("app.py")
# Declare the secrets.
at.secrets["db_username"] = "Jane"
at.secrets["db_password"] = "mypassword"
at.secrets["my_other_secrets.things_i_like"] = ["Streamlit", "Python"]
# Run the app.
at.run()

----------------------------------------

TITLE: Using Container to Update Header in Streamlit
DESCRIPTION: This snippet illustrates how to use a container to update a header in a Streamlit app. It creates a container first, then updates the session state value, and finally renders the header within the container.

LANGUAGE: python
CODE:
##### Option using a container #####
container = st.container()

if st.button("Baz"):
    st.session_state.value = "Baz"

container.header(st.session_state.value)

----------------------------------------

TITLE: Using Magic Commands in Streamlit (Python)
DESCRIPTION: Streamlit's magic command feature automatically writes variable or literal values to the app using st.write when they appear on their own line. This provides a concise way to display information without explicitly calling st.write.

LANGUAGE: python
CODE:
"Hello **world**!"
my_data_frame
my_mpl_figure

----------------------------------------

TITLE: Example of a Streamlit App URL
DESCRIPTION: This example demonstrates a real Streamlit Community Cloud app URL. It's for an app deployed from the 'streamlit' organization, with the repo 'demo-self-driving' and app name 'streamlit_app.py' in the root directory.

LANGUAGE: bash
CODE:
https://streamlit-demo-self-driving-streamlit-app-8jya0g.streamlit.app

----------------------------------------

TITLE: User Page Implementation
DESCRIPTION: User-accessible page with role verification

LANGUAGE: python
CODE:
import streamlit as st
from menu import menu_with_redirect

menu_with_redirect()

st.title("This page is available to all users")
st.markdown(f"You are currently logged with the role of {st.session_state.role}.")

----------------------------------------

TITLE: Implementing Iterative Thread Processing in Streamlit
DESCRIPTION: Shows how to create multiple worker threads that update the UI as they complete using containers. This pattern allows for real-time updates while still avoiding Streamlit commands within threads.

LANGUAGE: python
CODE:
import streamlit as st
import time
from threading import Thread


class WorkerThread(Thread):
    def __init__(self, delay):
        super().__init__()
        self.delay = delay
        self.return_value = None

    def run(self):
        start_time = time.time()
        time.sleep(self.delay)
        end_time = time.time()
        self.return_value = f"start: {start_time}, end: {end_time}"


delays = [5, 4, 3, 2, 1]
result_containers = []
for i, delay in enumerate(delays):
    st.header(f"Thread {i}")
    result_containers.append(st.container())

threads = [WorkerThread(delay) for delay in delays]
for thread in threads:
    thread.start()
thread_lives = [True] * len(threads)

while any(thread_lives):
    for i, thread in enumerate(threads):
        if thread_lives[i] and not thread.is_alive():
            result_containers[i].write(thread.return_value)
            thread_lives[i] = False
    time.sleep(0.5)

for thread in threads:
    thread.join()

st.button("Rerun")

----------------------------------------

TITLE: Implementing GCS File Reading in Streamlit
DESCRIPTION: Python script demonstrating how to read files from Google Cloud Storage using Streamlit's FilesConnection with caching functionality.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st
from st_files_connection import FilesConnection

# Create connection object and retrieve file contents.
# Specify input format is a csv and to cache the result for 600 seconds.
conn = st.connection('gcs', type=FilesConnection)
df = conn.read("streamlit-bucket/myfile.csv", input_format="csv", ttl=600)

# Print results.
for row in df.itertuples():
    st.write(f"{row.Owner} has a :{row.Pet}:")

----------------------------------------

TITLE: Setting Streamlit Config Options via Environment Variables
DESCRIPTION: Set Streamlit configuration options using environment variables, prefixed with STREAMLIT_.

LANGUAGE: bash
CODE:
export STREAMLIT_SERVER_PORT=9876

----------------------------------------

TITLE: Using Callback to Update Header in Streamlit
DESCRIPTION: This example shows how to use a callback function to update a header in a Streamlit app. It defines a function to update the session state and assigns it to a button's on_click event.

LANGUAGE: python
CODE:
##### Option using a callback #####
st.header(st.session_state.value)

def update_value():
    st.session_state.value = "Bar"

st.button("Bar", on_click=update_value)

----------------------------------------

TITLE: Adding Horizontal Divider in Streamlit
DESCRIPTION: Display a horizontal rule to separate content sections.

LANGUAGE: python
CODE:
st.divider()

----------------------------------------

TITLE: Demonstrating Streamlit App URL Structure
DESCRIPTION: This snippet shows the structure of a Streamlit Community Cloud app URL. It includes components such as GitHub username/organization, repository name, app path, branch name, and a random hash.

LANGUAGE: bash
CODE:
https://[GitHub username or organization]-[repo name]-[app path]-[branch name]-[short hash].streamlit.app

----------------------------------------

TITLE: Configuring BigQuery Service Account in Streamlit Secrets
DESCRIPTION: This snippet shows how to structure the secrets.toml file to include Google Cloud Platform service account credentials for BigQuery access.

LANGUAGE: toml
CODE:
# .streamlit/secrets.toml

[gcp_service_account]
type = "service_account"
project_id = "xxx"
private_key_id = "xxx"
private_key = "xxx"
client_email = "xxx"
client_id = "xxx"
auth_uri = "https://accounts.google.com/o/oauth2/auth"
token_uri = "https://oauth2.googleapis.com/token"
auth_provider_x509_cert_url = "https://www.googleapis.com/oauth2/v1/certs"
client_x509_cert_url = "xxx"

----------------------------------------

TITLE: Setting Streamlit Configuration Option
DESCRIPTION: Shows how to set a single configuration option using st.set_option(), with an example of disabling pyplot global use deprecation warnings.

LANGUAGE: python
CODE:
st.set_option("deprecation.showPyplotGlobalUse", False)

----------------------------------------

TITLE: Streaming Content with st.write_stream in Streamlit (Python)
DESCRIPTION: st.write_stream is used to write generators or streams to the Streamlit app with a typewriter effect. This is useful for displaying content that is generated or streamed in real-time, such as from an LLM.

LANGUAGE: python
CODE:
st.write_stream(my_generator)
st.write_stream(my_llm_stream)

----------------------------------------

TITLE: Getting Streamlit Configuration Option in Python
DESCRIPTION: The st.get_option function retrieves the value of a single configuration option from Streamlit's configuration system. It provides programmatic access to read configuration values that control Streamlit's behavior.

LANGUAGE: python
CODE:
streamlit.get_option()

----------------------------------------

TITLE: Generating random member data with caching in Streamlit
DESCRIPTION: Define a cached function to generate random member data using Faker and numpy. Returns a pandas DataFrame with member names and activity data.

LANGUAGE: python
CODE:
@st.cache_data
def get_profile_dataset(number_of_items: int = 20, seed: int = 0) -> pd.DataFrame:
    new_data = []

    fake = Faker()
    np.random.seed(seed)
    Faker.seed(seed)

    for i in range(number_of_items):
        profile = fake.profile()
        new_data.append(
            {
                "name": profile["name"],
                "daily_activity": np.random.rand(25),
                "activity": np.random.randint(2, 90, size=12),
            }
        )

    profile_df = pd.DataFrame(new_data)
    return profile_df

----------------------------------------

TITLE: Configuring Text Column in Streamlit
DESCRIPTION: Configures a text column with character limit and validation pattern.

LANGUAGE: python
CODE:
TextColumn("Widgets", max_chars=50, validate="^st\.[a-z_]+$")

----------------------------------------

TITLE: Configuring Generic Column in Streamlit
DESCRIPTION: Creates a basic column configuration with custom width and help text using Column class.

LANGUAGE: python
CODE:
Column("Streamlit Widgets", width="medium", help="Streamlit **widget** commands 🎈")

----------------------------------------

TITLE: Streamlit iframe Embed Options
DESCRIPTION: Collection of URL parameters for customizing embedded Streamlit app appearance and behavior.

LANGUAGE: javascript
CODE:
/?embed=true&embed_options=show_toolbar

LANGUAGE: javascript
CODE:
/?embed=true&embed_options=show_padding

LANGUAGE: javascript
CODE:
/?embed=true&embed_options=show_footer

LANGUAGE: javascript
CODE:
/?embed=true&embed_options=show_colored_line

LANGUAGE: javascript
CODE:
/?embed=true&embed_options=hide_loading_screen

LANGUAGE: javascript
CODE:
/?embed=true&embed_options=disable_scrolling

LANGUAGE: javascript
CODE:
/?embed=true&embed_options=light_theme

LANGUAGE: javascript
CODE:
/?embed=true&embed_options=dark_theme

LANGUAGE: javascript
CODE:
/?embed=true&embed_options=show_toolbar&embed_options=show_padding&embed_options=show_footer&embed_options=show_colored_line&embed_options=disable_scrolling

----------------------------------------

TITLE: Logging in a User with Streamlit
DESCRIPTION: The st.login() function initiates an authentication flow with an identity provider in Streamlit. This allows users to log in to the application.

LANGUAGE: python
CODE:
st.login()

----------------------------------------

TITLE: Retrieving Streamlit Configuration Option
DESCRIPTION: Demonstrates how to retrieve a single configuration option using st.get_option(), specifically for accessing theme settings.

LANGUAGE: python
CODE:
st.get_option("theme.primaryColor")

----------------------------------------

TITLE: Stateful Button Implementation
DESCRIPTION: Shows how to create a button that maintains its state using session_state, allowing the button to remain True after clicking.

LANGUAGE: python
CODE:
import streamlit as st

if 'clicked' not in st.session_state:
    st.session_state.clicked = False

def click_button():
    st.session_state.clicked = True

st.button('Click me', on_click=click_button)

if st.session_state.clicked:
    st.write('Button clicked!')
    st.slider('Select a value')

----------------------------------------

TITLE: Sample requirements.txt for Streamlit App
DESCRIPTION: An example requirements.txt file for a Streamlit app, listing only the necessary external dependencies. This file is used to specify the Python packages required for the application to run.

LANGUAGE: none
CODE:
streamlit
pandas
numpy

----------------------------------------

TITLE: Configuring Image Column in Streamlit
DESCRIPTION: Sets up an image column with help text for displaying images.

LANGUAGE: python
CODE:
ImageColumn("Preview Image", help="The preview screenshots")

----------------------------------------

TITLE: Show Streamlit Configuration
DESCRIPTION: Displays all available Streamlit configuration options and their current values.

LANGUAGE: bash
CODE:
streamlit config show

----------------------------------------

TITLE: Basic Streamlit App iframe Embedding
DESCRIPTION: Example of embedding a public Streamlit app using an iframe HTML element with the ?embed=true parameter.

LANGUAGE: javascript
CODE:
<iframe
  src="https://30days.streamlit.app?embed=true"
  style="height: 450px; width: 100%;"
></iframe>

----------------------------------------

TITLE: Using st.success to Display Success Messages in Streamlit (Python)
DESCRIPTION: The st.success function is used to display a success message in a Streamlit application. It takes a string argument which is the message to be displayed. This function is part of Streamlit's status message API.

LANGUAGE: python
CODE:
streamlit.success(message)

----------------------------------------

TITLE: Using Spinner for Temporary Messages in Streamlit
DESCRIPTION: Demonstrates how to display a temporary message using a spinner while executing a block of code. The spinner is shown until the operation completes.

LANGUAGE: python
CODE:
with st.spinner("Please wait..."):
  do_something_slow()

----------------------------------------

TITLE: Implementing st.echo for Code Display in Streamlit
DESCRIPTION: This snippet demonstrates how to use st.echo to display a specific section of code within a Streamlit app. It wraps the desired code block with st.echo(), making it visible in the app interface while still executing it.

LANGUAGE: python
CODE:
import streamlit as st

def get_user_name():
    return 'John'

with st.echo():
    # Everything inside this block will be both printed to the screen
    # and executed.

    def get_punctuation():
        return '!!!'

    greeting = "Hi there, "
    value = get_user_name()
    punctuation = get_punctuation()

    st.write(greeting, value, punctuation)

# And now we're back to _not_ printing to the screen
foo = 'bar'
st.write('Done!')

----------------------------------------

TITLE: Basic TOML Configuration Example
DESCRIPTION: Example showing basic client and theme configuration in config.toml

LANGUAGE: toml
CODE:
[client]
showErrorDetails = "none"

[theme]
primaryColor = "#F63366"
backgroundColor = "black"

----------------------------------------

TITLE: Retaining Widget Statefulness with Parameter Changes in Streamlit
DESCRIPTION: Provides a solution to retain the statefulness of a slider widget when its minimum and maximum values are changed, by interrupting the widget clean-up process.

LANGUAGE: python
CODE:
import streamlit as st

# Set default value
if "a" not in st.session_state:
    st.session_state.a = 5

cols = st.columns(2)
minimum = cols[0].number_input("Min", 1, 5, key="min")
maximum = cols[1].number_input("Max", 6, 10, 10, key="max")


def update_value():
    # Helper function to ensure consistency between widget parameters and value
    st.session_state.a = min(st.session_state.a, maximum)
    st.session_state.a = max(st.session_state.a, minimum)


# Validate the slider value before rendering
update_value()
st.slider("A", minimum, maximum, key="a")

----------------------------------------

TITLE: Configuring Area Chart Column in Streamlit
DESCRIPTION: Creates an area chart column with y-axis range configuration.

LANGUAGE: python
CODE:
AreaChartColumn("Sales (last 6 months)" y_min=0, y_max=100)

----------------------------------------

TITLE: Showing Toast Notifications in Streamlit
DESCRIPTION: Demonstrates how to display a brief toast message in the bottom-right corner of the app. The example shows a toast with the text 'Butter!' and a butter emoji icon.

LANGUAGE: python
CODE:
st.toast('Butter!', icon='🧈')

----------------------------------------

TITLE: Packages.txt for MySQL Dependencies
DESCRIPTION: Example packages.txt file showing required apt-get dependencies for mysqlclient Python package on Debian Linux.

LANGUAGE: bash
CODE:
build-essential
pkg-config
default-libmysqlclient-dev

----------------------------------------

TITLE: Displaying Snow Animation in Streamlit
DESCRIPTION: st.snow() is a Streamlit function that creates an animated snowfall effect overlay on the application. This is typically used for celebratory or festive visual effects in Streamlit apps.

LANGUAGE: python
CODE:
st.snow()

----------------------------------------

TITLE: Using st.experimental_rerun in Streamlit (Python)
DESCRIPTION: st.experimental_rerun is a deprecated function that immediately reruns the Streamlit script. It was deprecated in version 1.27.0 and users should use st.rerun instead for the same functionality.

LANGUAGE: python
CODE:
st.experimental_rerun()

----------------------------------------

TITLE: Displaying Bokeh Chart in Streamlit (Python)
DESCRIPTION: The st.bokeh_chart function is used to render interactive Bokeh charts within a Streamlit application. It takes a Bokeh figure object as input and displays it in the Streamlit interface.

LANGUAGE: python
CODE:
st.bokeh_chart(bokeh_figure)

----------------------------------------

TITLE: Deleting Session State Items
DESCRIPTION: Shows methods for deleting individual or all items from Session State using Python dictionary syntax.

LANGUAGE: python
CODE:
# Delete a single key-value pair
del st.session_state[key]

# Delete all the items in Session state
for key in st.session_state.keys():
    del st.session_state[key]

----------------------------------------

TITLE: Implementing Dataframe Row Selection in Streamlit <1.35.0
DESCRIPTION: Creates a function that adds a checkbox column to a pandas dataframe to enable row selection functionality. The function copies the input dataframe, adds a temporary 'Select' column, presents it in a data editor, and returns the selected rows with the temporary column removed.

LANGUAGE: python
CODE:
import streamlit as st
import numpy as np
import pandas as pd

df = pd.DataFrame(
    {
        "Animal": ["Lion", "Elephant", "Giraffe", "Monkey", "Zebra"],
        "Habitat": ["Savanna", "Forest", "Savanna", "Forest", "Savanna"],
        "Lifespan (years)": [15, 60, 25, 20, 25],
        "Average weight (kg)": [190, 5000, 800, 10, 350],
    }
)

def dataframe_with_selections(df):
    df_with_selections = df.copy()
    df_with_selections.insert(0, "Select", False)

    # Get dataframe row-selections from user with st.data_editor
    edited_df = st.data_editor(
        df_with_selections,
        hide_index=True,
        column_config={"Select": st.column_config.CheckboxColumn(required=True)},
        disabled=df.columns,
    )

    # Filter the dataframe using the temporary column, then drop the column
    selected_rows = edited_df[edited_df.Select]
    return selected_rows.drop('Select', axis=1)


selection = dataframe_with_selections(df)
st.write("Your selection:")
st.write(selection)

----------------------------------------

TITLE: Configuring Streamlit Secrets for Microsoft Entra Authentication
DESCRIPTION: This snippet shows how to set up the secrets.toml file with the necessary configuration for Microsoft Entra authentication. It includes the redirect URI, cookie secret, client ID, client secret, and server metadata URL.

LANGUAGE: toml
CODE:
[auth]
redirect_uri = "http://localhost:8501/oauth2callback"
cookie_secret = "xxx"
client_id = "xxx"
client_secret = "xxx"
server_metadata_url = "https://login.microsoftonline.com/consumers/v2.0/.well-known/openid-configuration"

----------------------------------------

TITLE: Displaying Celebratory Balloons in Streamlit
DESCRIPTION: Shows how to trigger a celebratory balloon animation in a Streamlit app using a simple function call.

LANGUAGE: python
CODE:
st.balloons()

----------------------------------------

TITLE: Styling Metric Cards in Streamlit
DESCRIPTION: Use the streamlit-extras library to apply custom styling to metric cards in a Streamlit app. This example demonstrates how to use the style_metric_cards function to enhance the appearance of metrics.

LANGUAGE: python
CODE:
from streamlit_extras.metric_cards import style_metric_cards
col3.metric(label="No Change", value=5000, delta=0)

style_metric_cards()

----------------------------------------

TITLE: Streamlit App for MySQL Data Retrieval and Display
DESCRIPTION: Python code for a Streamlit app that connects to a MySQL database, executes a query, and displays the results. It uses st.connection for secure database access and caching.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st

# Initialize connection.
conn = st.connection('mysql', type='sql')

# Perform query.
df = conn.query('SELECT * from mytable;', ttl=600)

# Print results.
for row in df.itertuples():
    st.write(f"{row.name} has a :{row.pet}:")

----------------------------------------

TITLE: Customizing Google Sheets Data Retrieval in Streamlit
DESCRIPTION: This Python code snippet demonstrates how to customize the Google Sheets data retrieval by specifying worksheet, cache expiration, and pandas read_csv parameters.

LANGUAGE: python
CODE:
df = conn.read(
    worksheet="Sheet1",
    ttl="10m",
    usecols=[0, 1],
    nrows=3,
)

----------------------------------------

TITLE: Logging out a User with Streamlit
DESCRIPTION: The st.logout() function removes a user's identity information in Streamlit. This logs the user out of the application.

LANGUAGE: python
CODE:
st.logout()

----------------------------------------

TITLE: Configuring Progress Column in Streamlit
DESCRIPTION: Creates a progress column with value range and currency formatting.

LANGUAGE: python
CODE:
ProgressColumn("Sales volume", min_value=0, max_value=1000, format="$%f")

----------------------------------------

TITLE: Adding PyMongo Dependency
DESCRIPTION: Requirements file entry for installing the PyMongo package.

LANGUAGE: bash
CODE:
# requirements.txt
pymongo==x.x.x

----------------------------------------

TITLE: Using st.echo and st.spinner in Streamlit Sidebar
DESCRIPTION: Demonstrates how to use st.echo and st.spinner elements in the Streamlit sidebar, which require 'with' notation. This example also includes a time delay to simulate loading and a success message.

LANGUAGE: python
CODE:
import streamlit as st
import time

with st.sidebar:
    with st.echo():
        st.write("This code will be printed to the sidebar.")

    with st.spinner("Loading..."):
        time.sleep(5)
    st.success("Done!")

----------------------------------------

TITLE: Configuring MongoDB Connection Secrets
DESCRIPTION: TOML configuration for storing MongoDB connection details in Streamlit secrets file.

LANGUAGE: toml
CODE:
# .streamlit/secrets.toml

[mongo]
host = "localhost"
port = 27017
username = "xxx"
password = "xxx"

----------------------------------------

TITLE: Accessing User Information in Streamlit
DESCRIPTION: The st.experimental_user object provides access to information about a logged-in user. This snippet demonstrates how to check if a user is logged in and display a personalized welcome message.

LANGUAGE: python
CODE:
if st.experimental_user.is_logged_in:
  st.write(f"Welcome back, {st.experimental_user.name}!")

----------------------------------------

TITLE: Run Streamlit Applications
DESCRIPTION: Executes a Streamlit application script with optional arguments. Custom script arguments must be passed after two dashes to avoid being interpreted as Streamlit arguments.

LANGUAGE: bash
CODE:
streamlit run your_script.py [-- script args]

----------------------------------------

TITLE: Running Streamlit App with Script Arguments
DESCRIPTION: Example of running a Streamlit app with script arguments and accessing them using sys.argv.

LANGUAGE: bash
CODE:
streamlit run your_app.py "my list" of arguments

LANGUAGE: python
CODE:
sys.argv[0] == "your_app.py"
sys.argv[1] == "my list"
sys.argv[2] == "of"
sys.argv[3] == "arguments"

----------------------------------------

TITLE: Configuring GCS Secrets in TOML
DESCRIPTION: Configuration file for storing Google Cloud Storage service account credentials in Streamlit secrets.

LANGUAGE: toml
CODE:
# .streamlit/secrets.toml

[connections.gcs]
type = "service_account"
project_id = "xxx"
private_key_id = "xxx"
private_key = "xxx"
client_email = "xxx"
client_id = "xxx"
auth_uri = "https://accounts.google.com/o/oauth2/auth"
token_uri = "https://oauth2.googleapis.com/token"
auth_provider_x509_cert_url = "https://www.googleapis.com/oauth2/v1/certs"
client_x509_cert_url = "xxx"

----------------------------------------

TITLE: Initializing AppTest from String
DESCRIPTION: Shows how to create a test instance from a string containing the app code, including a word-guessing game example.

LANGUAGE: python
CODE:
from streamlit.testing.v1 import AppTest

app_script = """
import streamlit as st

word_of_the_day = st.text_input("What's the word of the day?", key="word")
if word_of_the_day == st.secrets["WORD"]:
    st.success("That's right!")
elif word_of_the_day and word_of_the_day != st.secrets["WORD"]:
    st.warn("Try again.")
"""

at = AppTest.from_string(app_script)
at.secrets["WORD"] = "Foobar"
at.run()
assert not at.exception

----------------------------------------

TITLE: Displaying filtered dataframe based on row selections in Streamlit
DESCRIPTION: Filter and display the dataframe based on user row selections, using the same column configuration as the original dataframe.

LANGUAGE: python
CODE:
st.header("Selected members")
people = event.selection.rows
filtered_df = df.iloc[people]
st.dataframe(
    filtered_df,
    column_config=column_configuration,
    use_container_width=True,
)

----------------------------------------

TITLE: Viewing Streamlit Configuration Options via Command Line
DESCRIPTION: This snippet demonstrates the command to view all available Streamlit configuration options using the streamlit config show command.

LANGUAGE: bash
CODE:
streamlit config show

----------------------------------------

TITLE: Basic Streamlit App with Common Imports
DESCRIPTION: A simple Streamlit app demonstrating common imports including pandas, numpy, math, and random. This example shows which dependencies need to be explicitly installed and which are built-in or come with Streamlit.

LANGUAGE: python
CODE:
import streamlit as st
import pandas as pd
import numpy as np
import math
import random

st.write('Hi!')

----------------------------------------

TITLE: Creating a Custom-Colored Altair Chart in Python
DESCRIPTION: This example shows how to create a more complex Altair chart with custom colors and multiple panels. It demonstrates that custom configurations are preserved even when using the Streamlit theme.

LANGUAGE: python
CODE:
import altair as alt
import streamlit as st
from vega_datasets import data

source = data.seattle_weather()

scale = alt.Scale(
    domain=["sun", "fog", "drizzle", "rain", "snow"],
    range=["#e7ba52", "#a7a7a7", "#aec7e8", "#1f77b4", "#9467bd"],
)
color = alt.Color("weather:N", scale=scale)

# We create two selections:
# - a brush that is active on the top panel
# - a multi-click that is active on the bottom panel
brush = alt.selection_interval(encodings=["x"])
click = alt.selection_multi(encodings=["color"])

# Top panel is scatter plot of temperature vs time
points = (
    alt.Chart()
    .mark_point()
    .encode(
        alt.X("monthdate(date):T", title="Date"),
        alt.Y(
            "temp_max:Q",
            title="Maximum Daily Temperature (C)",
            scale=alt.Scale(domain=[-5, 40]),
        ),
        color=alt.condition(brush, color, alt.value("lightgray")),
        size=alt.Size("precipitation:Q", scale=alt.Scale(range=[5, 200])),
    )
    .properties(width=550, height=300)
    .add_selection(brush)
    .transform_filter(click)
)

# Bottom panel is a bar chart of weather type
bars = (
    alt.Chart()
    .mark_bar()
    .encode(
        x="count()",
        y="weather:N",
        color=alt.condition(click, color, alt.value("lightgray")),
    )
    .transform_filter(brush)
    .properties(
        width=550,
    )
    .add_selection(click)
)

chart = alt.vconcat(points, bars, data=source, title="Seattle Weather: 2012-2015")

tab1, tab2 = st.tabs(["Streamlit theme (default)", "Altair native theme"])

with tab1:
    st.altair_chart(chart, theme="streamlit", use_container_width=True)
with tab2:
    st.altair_chart(chart, theme=None, use_container_width=True)

----------------------------------------

TITLE: Reading Data from Google Sheets in Streamlit
DESCRIPTION: This Python script uses st.connection and GSheetsConnection to read data from a Google Sheet and display it in a Streamlit app. It demonstrates basic usage of the connection object and data iteration.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st
from streamlit_gsheets import GSheetsConnection

# Create a connection object.
conn = st.connection("gsheets", type=GSheetsConnection)

df = conn.read()

# Print results.
for row in df.itertuples():
    st.write(f"{row.name} has a :{row.pet}:")

----------------------------------------

TITLE: Limiting Multiselect Options
DESCRIPTION: st.multiselect has a keyword-only max_selections parameter to limit the number of options that can be selected at a time.

LANGUAGE: python
CODE:
st.multiselect("Select up to 3 options:", ["A", "B", "C", "D"], max_selections=3)

----------------------------------------

TITLE: Displaying JSON Data in Streamlit
DESCRIPTION: Use st.json() to display a dictionary or JSON string as a formatted JSON output in a Streamlit app. This function automatically handles pretty-printing of the JSON data.

LANGUAGE: python
CODE:
st.json(my_dict)

----------------------------------------

TITLE: Initializing AppTest from Function
DESCRIPTION: Demonstrates initialization from a function containing the app code, with a complete word-guessing game implementation.

LANGUAGE: python
CODE:
from streamlit.testing.v1 import AppTest

def app_script ():
    import streamlit as st

    word_of_the_day = st.text_input("What's the word of the day?", key="word")
    if word_of_the_day == st.secrets["WORD"]:
        st.success("That's right!")
    elif word_of_the_day and word_of_the_day != st.secrets["WORD"]:
        st.warn("Try again.")

at = AppTest.from_function(app_script)
at.secrets["WORD"] = "Foobar"
at.run()
assert not at.exception

----------------------------------------

TITLE: Displaying Timezone-Aware Datetime in Streamlit
DESCRIPTION: Shows how Streamlit handles datetime objects with specified timezone information using pytz. The datetime instance is displayed with the timezone offset as defined in the backend.

LANGUAGE: python
CODE:
import streamlit as st
from datetime import datetime
import pytz

st.write(datetime(2020, 1, 10, 10, 30, tzinfo=pytz.timezone("EST")))
# Outputs: 2020-01-10 10:30:00-05:00

----------------------------------------

TITLE: Implementing CSV Download with Streamlit
DESCRIPTION: Example code showing how to read a CSV file into a Pandas DataFrame and create a download button using st.download_button. The code includes a cached function to convert the DataFrame to CSV format with UTF-8 encoding.

LANGUAGE: python
CODE:
import streamlit as st
import pandas as pd

df = pd.read_csv("dir/file.csv")

@st.cache_data
def convert_df(df):
   return df.to_csv(index=False).encode('utf-8')


csv = convert_df(df)

st.download_button(
   "Press to Download",
   csv,
   "file.csv",
   "text/csv",
   key='download-csv'
)

----------------------------------------

TITLE: Displaying Celebratory Snowflakes in Streamlit
DESCRIPTION: Demonstrates how to trigger a celebratory snowflake animation in a Streamlit app using a simple function call.

LANGUAGE: python
CODE:
st.snow()

----------------------------------------

TITLE: Creating TiDB Database and Table (SQL)
DESCRIPTION: SQL commands to create a new database named 'pets', a table named 'mytable', and insert sample data into it.

LANGUAGE: sql
CODE:
CREATE DATABASE pets;

USE pets;

CREATE TABLE mytable (
    name            varchar(80),
    pet             varchar(80)
);

INSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');

----------------------------------------

TITLE: Creating a Date Range Picker in Streamlit
DESCRIPTION: Use st.date_picker to create a date range picker by passing a list/tuple as the default date. This feature was introduced in version 0.61.0.

LANGUAGE: python
CODE:
start_date, end_date = st.date_picker("Select date range", value=[datetime(2020, 1, 1), datetime(2020, 1, 7)])

----------------------------------------

TITLE: Initializing and Rendering Chat History in Streamlit
DESCRIPTION: Initialize the chat history in session state and render existing messages with feedback widgets for assistant responses.

LANGUAGE: python
CODE:
if "history" not in st.session_state:
    st.session_state.history = []

for i, message in enumerate(st.session_state.history):
    with st.chat_message(message["role"]):
        st.write(message["content"])
        if message["role"] == "assistant":
            feedback = message.get("feedback", None)
            st.session_state[f"feedback_{i}"] = feedback
            st.feedback(
                "thumbs",
                key=f"feedback_{i}",
                disabled=feedback is not None,
                on_change=save_feedback,
                args=[i],
            )

----------------------------------------

TITLE: Loading Remote URL in Streamlit iframe
DESCRIPTION: Embeds an external webpage within the Streamlit application using an iframe component. Enables integration of external web content into Streamlit apps.

LANGUAGE: python
CODE:
from st.components.v1 import iframe
iframe(
    "docs.streamlit.io"
)

----------------------------------------

TITLE: Example Streamlit App URL with Query Parameters
DESCRIPTION: Shows an example URL for a Streamlit app with query parameters, illustrating how parameters are formatted in the URL.

LANGUAGE: javascript
CODE:
https://your_app.streamlit.app/?first_key=1&second_key=two&third_key=true

----------------------------------------

TITLE: Configuring AWS Credentials in Streamlit Secrets
DESCRIPTION: Configuration file for storing AWS credentials securely in Streamlit. Contains access key ID, secret access key, and default region settings.

LANGUAGE: toml
CODE:
# .streamlit/secrets.toml
AWS_ACCESS_KEY_ID = "xxx"
AWS_SECRET_ACCESS_KEY = "xxx"
AWS_DEFAULT_REGION = "xxx"

----------------------------------------

TITLE: Audio Player in Streamlit
DESCRIPTION: Methods for embedding audio players in Streamlit apps, supporting various input formats including numpy arrays, bytes, files, and URLs.

LANGUAGE: python
CODE:
st.audio(numpy_array)
st.audio(audio_bytes)
st.audio(file)
st.audio("https://example.com/myaudio.mp3", format="audio/mp3")

----------------------------------------

TITLE: Using Stqdm for Progress Bars in Streamlit
DESCRIPTION: Demonstrates how to use the stqdm library to create a simple progress bar in a Streamlit app. It iterates over a range and sleeps to simulate work.

LANGUAGE: python
CODE:
from stqdm import stqdm

for _ in stqdm(range(50)):
    sleep(0.5)

----------------------------------------

TITLE: Connecting Streamlit to Google Sheets and Displaying Data
DESCRIPTION: This Python script uses st.connection and GSheetsConnection to read data from a Google Sheet and display it in a Streamlit app.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st
from streamlit_gsheets import GSheetsConnection

# Create a connection object.
conn = st.connection("gsheets", type=GSheetsConnection)

df = conn.read()

# Print results.
for row in df.itertuples():
    st.write(f"{row.name} has a :{row.pet}:")

----------------------------------------

TITLE: Configuring Streamlit's File Watcher
DESCRIPTION: Use the server.fileWatcherType config option to control Streamlit's file watching behavior.

LANGUAGE: Python
CODE:
# Config options:
# auto, watchdog, poll, none

----------------------------------------

TITLE: Initializing Streamlit App for Chat Feedback
DESCRIPTION: Import required libraries and set up the basic structure for a Streamlit app that will collect user feedback on chat responses.

LANGUAGE: python
CODE:
import streamlit as st
import time

----------------------------------------

TITLE: Video Player in Streamlit
DESCRIPTION: Methods for embedding video players in Streamlit apps, supporting various input formats including numpy arrays, bytes, files, and URLs.

LANGUAGE: python
CODE:
st.video(numpy_array)
st.video(video_bytes)
st.video(file)
st.video("https://example.com/myvideo.mp4", format="video/mp4")

----------------------------------------

TITLE: Accessing Safe Snowpark Session
DESCRIPTION: The safe_session property provides access to the underlying Snowpark session with additional safety checks. It ensures the session is active and handles reconnection if needed.

LANGUAGE: python
CODE:
st.connections.SnowparkConnection.safe_session

----------------------------------------

TITLE: Lottie Animations in Streamlit
DESCRIPTION: Component for integrating Lottie animations into Streamlit applications using JSON-based animation files.

LANGUAGE: python
CODE:
lottie_hello = load_lottieurl("https://assets5.lottiefiles.com/packages/lf20_V9t630.json")

st_lottie(lottie_hello, key="hello")

----------------------------------------

TITLE: Creating Custom Notification Box in Streamlit
DESCRIPTION: Shows how to use the streamlit_custom_notification_box library to create a customizable notification box with styling options and an external link.

LANGUAGE: python
CODE:
from streamlit_custom_notification_box import custom_notification_box

styles = {'material-icons':{'color': 'red'}, 'text-icon-link-close-container': {'box-shadow': '#3896de 0px 4px'}, 'notification-text': {'':''}, 'close-button':{'':''}, 'link':{'':''}}
custom_notification_box(icon='info', textDisplay='We are almost done with your registration...', externalLink='more info', url='#', styles=styles, key="foo")

----------------------------------------

TITLE: Connecting Streamlit to Tableau and Retrieving Data
DESCRIPTION: This Python script demonstrates how to connect Streamlit to Tableau using the tableauserverclient library. It retrieves workbook names, view names, and data from a specific view, caching the results for efficiency.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st
import tableauserverclient as TSC


# Set up connection.
tableau_auth = TSC.PersonalAccessTokenAuth(
    st.secrets["tableau"]["token_name"],
    st.secrets["tableau"]["personal_access_token"],
    st.secrets["tableau"]["site_id"],
)
server = TSC.Server(st.secrets["tableau"]["server_url"], use_server_version=True)


# Get various data.
# Explore the tableauserverclient library for more options.
# Uses st.cache_data to only rerun when the query changes or after 10 min.
@st.cache_data(ttl=600)
def run_query():
    with server.auth.sign_in(tableau_auth):

        # Get all workbooks.
        workbooks, pagination_item = server.workbooks.get()
        workbooks_names = [w.name for w in workbooks]

        # Get views for first workbook.
        server.workbooks.populate_views(workbooks[0])
        views_names = [v.name for v in workbooks[0].views]

        # Get image & CSV for first view of first workbook.
        view_item = workbooks[0].views[0]
        server.views.populate_image(view_item)
        server.views.populate_csv(view_item)
        view_name = view_item.name
        view_image = view_item.image
        # `view_item.csv` is a list of binary objects, convert to str.
        view_csv = b"".join(view_item.csv).decode("utf-8")

        return workbooks_names, views_names, view_name, view_image, view_csv

workbooks_names, views_names, view_name, view_image, view_csv = run_query()


# Print results.
st.subheader("📓 Workbooks")
st.write("Found the following workbooks:", ", ".join(workbooks_names))

st.subheader("👁️ Views")
st.write(
    f"Workbook *{workbooks_names[0]}* has the following views:",
    ", ".join(views_names),
)

st.subheader("🖼️ Image")
st.write(f"Here's what view *{view_name}* looks like:")
st.image(view_image, width=300)

st.subheader("📊 Data")
st.write(f"And here's the data for view *{view_name}*:")
st.write(pd.read_csv(StringIO(view_csv)))

----------------------------------------

TITLE: Clearing Matplotlib Figures in Streamlit
DESCRIPTION: st.pyplot now clears figures by default. To disable this behavior, pass clear_figure=False.

LANGUAGE: Python
CODE:
st.pyplot(clear_figure=False)

----------------------------------------

TITLE: Importing Streamlit AgGrid Component
DESCRIPTION: Code snippet showing how to import the AgGrid component into a Streamlit application.

LANGUAGE: python
CODE:
from st_aggrid import AgGrid

----------------------------------------

TITLE: Logo Display in Streamlit
DESCRIPTION: Method to display a logo in the upper-left corner of a Streamlit app and its sidebar.

LANGUAGE: python
CODE:
st.logo("logo.jpg")

----------------------------------------

TITLE: Creating Interactive Data Layer for Altair Chart in Python
DESCRIPTION: This code creates an interactive data layer for the chart, including a line chart, points, and tooltips. It uses Altair's selection and encoding features to create mouseover interactions.

LANGUAGE: python
CODE:
hover = alt.selection_single(
    fields=["date"],
    nearest=True,
    on="mouseover",
    empty="none",
)

lines = (
    alt.Chart(stock_data, title="Evolution of stock prices")
    .mark_line()
    .encode(
        x="date",
        y="price",
        color="symbol",
    )
)

points = lines.transform_filter(hover).mark_circle(size=65)

tooltips = (
    alt.Chart(stock_data)
    .mark_rule()
    .encode(
        x="yearmonthdate(date)",
        y="price",
        opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),
        tooltip=[
            alt.Tooltip("date", title="Date"),
            alt.Tooltip("price", title="Price (USD)"),
        ],
    )
    .add_selection(hover)
)

data_layer = lines + points + tooltips

----------------------------------------

TITLE: Basic Streamlit Run Command Syntax
DESCRIPTION: Basic command syntax for running a Streamlit application using the CLI.

LANGUAGE: bash
CODE:
streamlit run <entrypoint file> [-- config options] [script args]

----------------------------------------

TITLE: Using Block Class for Testing Streamlit Elements
DESCRIPTION: The Block class represents a container of elements in Streamlit testing. It has the same methods and attributes as AppTest and is used for testing container elements like ChatMessage, Column, and Tab.

LANGUAGE: Python
CODE:
Block.button  # Returns a WidgetList of Button elements

----------------------------------------

TITLE: Displaying Balloons in Streamlit Python App
DESCRIPTION: The st.balloons() function is used to show celebratory balloons in a Streamlit app. It's a fun visual element that can be used to mark achievements or special moments in the user interaction.

LANGUAGE: python
CODE:
import streamlit as st

st.balloons()

----------------------------------------

TITLE: Configuring Secrets in TOML Format
DESCRIPTION: Example of secrets.toml file structure showing how to define API keys, whitelists, and database credentials using TOML format.

LANGUAGE: toml
CODE:
OpenAI_key = "your OpenAI key"
whitelist = ["sally", "bob", "joe"]

[database]
user = "your username"
password = "your password"

----------------------------------------

TITLE: Using Emoji Codes in Streamlit Text Elements
DESCRIPTION: Support for emoji codes in st.write and st.markdown. Allows adding emojis to text using colon syntax.

LANGUAGE: Python
CODE:
st.write("Hello :wave:")

----------------------------------------

TITLE: Defining Helper Functions for Cat Display
DESCRIPTION: Creates two helper functions to display black and orange cats with a simulated delay, representing the process of 'herding' cats.

LANGUAGE: Python
CODE:
def black_cats():
    time.sleep(1)
    st.title("🐈‍⬛ 🐈‍⬛")
    st.markdown("🐾 🐾 🐾 🐾")

def orange_cats():
    time.sleep(1)
    st.title("🐈 🐈")
    st.markdown("🐾 🐾 🐾 🐾")

----------------------------------------

TITLE: Using Empty Containers in Streamlit
DESCRIPTION: Shows how to use single-element containers that can be updated or replaced dynamically during runtime.

LANGUAGE: python
CODE:
c = st.empty()
st.write("This will show last")
c.write("This will be replaced")
c.write("This will show first")

----------------------------------------

TITLE: Activating Conda Environment
DESCRIPTION: Command to activate the Conda environment named streamlitenv

LANGUAGE: bash
CODE:
conda activate streamlitenv

----------------------------------------

TITLE: Displaying Status Container in Streamlit
DESCRIPTION: Shows how to use a status container to display the output of long-running tasks. The status is set to 'Running' while the operation is in progress.

LANGUAGE: python
CODE:
with st.status('Running'):
  do_something_slow()

----------------------------------------

TITLE: Displaying Static Tables with st.table in Python
DESCRIPTION: The st.table function displays a static table in Streamlit. It is the most basic way to display dataframes, but for most cases, st.dataframe or st.data_editor are recommended for interactive or editable dataframes respectively.

LANGUAGE: python
CODE:
st.table(data)

----------------------------------------

TITLE: Configuring Tableau Secrets in TOML
DESCRIPTION: This snippet shows how to structure the secrets.toml file to store Tableau authentication information. It includes the token name, token secret, server URL, and site ID.

LANGUAGE: toml
CODE:
# .streamlit/secrets.toml

[tableau]
token_name = "xxx"
token_secret = "xxx"
server_url = "https://abc01.online.tableau.com/"
site_id = "streamlitexample"  # in your site's URL behind the server_url

----------------------------------------

TITLE: Uploading Files with Streamlit in Python
DESCRIPTION: Preview release of the file uploader widget in Streamlit. Call st.file_uploader() to use this new feature.

LANGUAGE: Python
CODE:
st.file_uploader()

----------------------------------------

TITLE: Organizing Streamlit app with tabs for selection and comparison
DESCRIPTION: Use Streamlit tabs to separate the member selection interface from the data comparison charts, improving the app's organization and user experience.

LANGUAGE: python
CODE:
select, compare = st.tabs(["Select members", "Compare selected"])

with select:
    # Code for member selection and display

with compare:
    # Code for data comparison and visualization

----------------------------------------

TITLE: Processing Camera Input with PyTorch in Streamlit (Python)
DESCRIPTION: This example demonstrates how to use PyTorch to decode the image captured by st.camera_input into a 3D uint8 tensor. It shows how to check the type and shape of the resulting tensor.

LANGUAGE: python
CODE:
import streamlit as st
import torch
import numpy as np

img_file_buffer = st.camera_input("Take a picture")

if img_file_buffer is not None:
    # To read image file buffer as a 3D uint8 tensor with PyTorch:
    bytes_data = img_file_buffer.getvalue()
    torch_img = torch.ops.image.decode_image(
        torch.from_numpy(np.frombuffer(bytes_data, np.uint8)), 3
    )

    # Check the type of torch_img:
    # Should output: <class 'torch.Tensor'>
    st.write(type(torch_img))

    # Check the shape of torch_img:
    # Should output shape: torch.Size([channels, height, width])
    st.write(torch_img.shape)

----------------------------------------

TITLE: Navigating to Project Directory - Bash
DESCRIPTION: Command to change directory to the project folder

LANGUAGE: bash
CODE:
cd myproject

----------------------------------------

TITLE: Configuring TigerGraph Secrets in TOML
DESCRIPTION: Configuration file for storing TigerGraph connection credentials including host, username, password, and graph name.

LANGUAGE: toml
CODE:
# .streamlit/secrets.toml

[tigergraph]
host = "https://xxx.i.tgcloud.io/"
username = "xxx"
password = "xxx"
graphname = "xxx"

----------------------------------------

TITLE: Displaying Info Message in Streamlit
DESCRIPTION: Demonstrates how to show an informational message in a Streamlit app using the st.info() function.

LANGUAGE: python
CODE:
st.info("Dataset is updated every day at midnight.")

----------------------------------------

TITLE: Custom Equality Comparison for Dataclasses
DESCRIPTION: Demonstrates how to implement custom equality comparison to handle class redefinition issues with dataclasses.

LANGUAGE: python
CODE:
import streamlit as st
from dataclasses import dataclass

@dataclass
class MyDataclass:
    var1: int
    var2: float

    def __eq__(self, other):
        return (self.var1, self.var2) == (other.var1, other.var2)

if "my_dataclass" not in st.session_state:
    st.session_state.my_dataclass = MyDataclass(1, 5.5)

# Displays True on every rerun
st.session_state.my_dataclass == MyDataclass(1, 5.5)

st.button("Rerun")

----------------------------------------

TITLE: Creating Charts with Streamlit in Python
DESCRIPTION: Illustrates various methods to create and display charts using Streamlit, including built-in charts and integration with external libraries like Altair, Bokeh, Plotly, and more.

LANGUAGE: python
CODE:
st.area_chart(df)
st.bar_chart(df)
st.bar_chart(df, horizontal=True)
st.line_chart(df)
st.map(df)
st.scatter_chart(df)

st.altair_chart(chart)
st.bokeh_chart(fig)
st.graphviz_chart(fig)
st.plotly_chart(fig)
st.pydeck_chart(chart)
st.pyplot(fig)
st.vega_lite_chart(df, spec)

# Work with user selections
event = st.plotly_chart(
    df,
    on_select="rerun"
)
event = st.altair_chart(
    chart,
    on_select="rerun"
)
event = st.vega_lite_chart(
    df,
    spec,
    on_select="rerun"
)

----------------------------------------

TITLE: Initializing imports for Streamlit dataframe app
DESCRIPTION: Import necessary libraries including numpy, pandas, streamlit, and Faker for generating random data.

LANGUAGE: python
CODE:
import numpy as np
import pandas as pd
import streamlit as st

from faker import Faker

----------------------------------------

TITLE: Toggle Button with Session State
DESCRIPTION: Implementation of a toggle button that switches between on/off states using session_state, with two alternative approaches shown.

LANGUAGE: python
CODE:
import streamlit as st

if 'button' not in st.session_state:
    st.session_state.button = False

def click_button():
    st.session_state.button = not st.session_state.button

st.button('Click me', on_click=click_button)

if st.session_state.button:
    st.write('Button is on!')
    st.slider('Select a value')
else:
    st.write('Button is off!')

LANGUAGE: python
CODE:
import streamlit as st

if 'button' not in st.session_state:
    st.session_state.button = False

def click_button():
    st.session_state.button = not st.session_state.button

st.button('Click me', on_click=click_button)

st.slider('Select a value', disabled=st.session_state.button)

----------------------------------------

TITLE: Combining and Displaying Altair Chart Layers in Streamlit
DESCRIPTION: This code combines the data and annotation layers of the Altair chart and displays it using Streamlit. It uses st.altair_chart to render the combined chart in the Streamlit app.

LANGUAGE: python
CODE:
combined_chart = data_layer + annotation_layer
st.altair_chart(combined_chart, use_container_width=True)

----------------------------------------

TITLE: Configuring Multiple Database Connections in Global Secrets
DESCRIPTION: Example of setting up multiple database connections in a global Streamlit secrets file.

LANGUAGE: toml
CODE:
# ~/.streamlit/secrets.toml

[connections.local]
url = "mysql://me:****@localhost:3306/local_db"

[connections.staging]
url = "mysql://jdoe:******@staging.acmecorp.com:3306/staging_db"

----------------------------------------

TITLE: Displaying Code in Streamlit Python
DESCRIPTION: Demonstrates how to display and execute code simultaneously in a Streamlit application using the echo() function.

LANGUAGE: python
CODE:
with st.echo():
    st.write("Code will be executed and printed")

----------------------------------------

TITLE: Configuring Streamlit Magic Commands in TOML
DESCRIPTION: Configuration example showing how to disable Magic commands in Streamlit using the config.toml file.

LANGUAGE: toml
CODE:
[runner]
magicEnabled = false

----------------------------------------

TITLE: Connecting to Data Sources in Streamlit Python
DESCRIPTION: Demonstrates how to create and use database connections in Streamlit applications, including SQL and Snowflake connections, and how to create custom connections.

LANGUAGE: python
CODE:
st.connection("pets_db", type="sql")
conn = st.connection("sql")
conn = st.connection("snowflake")

class MyConnection(BaseConnection[myconn.MyConnection]):
    def _connect(self, **kwargs) -> MyConnection:
        return myconn.connect(**self._secrets, **kwargs)
    def query(self, query):
        return self._instance.query(query)

----------------------------------------

TITLE: Caching with Interactive Widgets in Streamlit
DESCRIPTION: Shows how to use interactive widgets within cached functions using the experimental_allow_widgets parameter.

LANGUAGE: python
CODE:
@st.cache_resource(experimental_allow_widgets=True)  # 👈 Set the parameter
def load_model():
    pretrained = st.checkbox("Use pre-trained model:")  # 👈 Add a checkbox
    model = torchvision.models.resnet50(weights=ResNet50_Weights.DEFAULT, pretrained=pretrained)
    return model

----------------------------------------

TITLE: Serialization Pattern for Class Storage
DESCRIPTION: Shows how to implement serialization methods for storing class instances in session state.

LANGUAGE: python
CODE:
import streamlit as st
from dataclasses import dataclass

@dataclass
class MyDataclass:
    var1: int
    var2: float

    def to_str(self):
        return f"{self.var1},{self.var2}"

    @classmethod
    def from_str(cls, serial_str):
        values = serial_str.split(",")
        var1 = int(values[0])
        var2 = float(values[1])
        return cls(var1, var2)

if "my_dataclass" not in st.session_state:
    st.session_state.my_dataclass = MyDataclass(1, 5.5).to_str()

# Displays True on every rerun
MyDataclass.from_str(st.session_state.my_dataclass) == MyDataclass(1, 5.5)

st.button("Rerun")

----------------------------------------

TITLE: Creating Plotting Demo Page
DESCRIPTION: Implementation of the plotting demo page showing animated line charts with random data generation.

LANGUAGE: python
CODE:
import streamlit as st
import time
import numpy as np

st.set_page_config(page_title="Plotting Demo", page_icon="📈")

st.markdown("# Plotting Demo")
st.sidebar.header("Plotting Demo")
st.write(
    """This demo illustrates a combination of plotting and animation with
Streamlit. We're generating a bunch of random numbers in a loop for around
5 seconds. Enjoy!"""
)

progress_bar = st.sidebar.progress(0)
status_text = st.sidebar.empty()
last_rows = np.random.randn(1, 1)
chart = st.line_chart(last_rows)

for i in range(1, 101):
    new_rows = last_rows[-1, :] + np.random.randn(5, 1).cumsum(axis=0)
    status_text.text("%i%% Complete" % i)
    chart.add_rows(new_rows)
    progress_bar.progress(i)
    last_rows = new_rows
    time.sleep(0.05)

progress_bar.empty()

st.button("Re-run")

----------------------------------------

TITLE: Setting Streamlit Environment Variables in Bash
DESCRIPTION: This snippet shows how to set Streamlit server port and cookie secret using environment variables in a Bash shell.

LANGUAGE: bash
CODE:
export STREAMLIT_SERVER_PORT=80
export STREAMLIT_SERVER_COOKIE_SECRET=dontforgottochangeme

----------------------------------------

TITLE: Configuring Snowflake Connection with Additional Arguments
DESCRIPTION: Example of configuring a Snowflake connection with additional arguments in the Streamlit secrets file.

LANGUAGE: toml
CODE:
# .streamlit/secrets.toml

[connections.snowflake]
url = "snowflake://<user_login_name>@<account_identifier>/"

[connections.snowflake.create_engine_kwargs.connect_args]
authenticator = "externalbrowser"
warehouse = "xxx"
role = "xxx"

----------------------------------------

TITLE: Using Placeholders and Options in Streamlit Python
DESCRIPTION: Shows how to use placeholders, get help, set options, configure page layout, and work with query parameters in Streamlit applications.

LANGUAGE: python
CODE:
# Replace any single element.
element = st.empty()
element.line_chart(...)
element.text_input(...)  # Replaces previous.

# Insert out of order.
elements = st.container()
elements.line_chart(...)
st.write("Hello")
elements.text_input(...)  # Appears above "Hello".

st.help(pandas.DataFrame)
st.get_option(key)
st.set_option(key, value)
st.set_page_config(layout="wide")
st.query_params[key]
st.query_params.from_dict(params_dict)
st.query_params.get_all(key)
st.query_params.clear()
st.html("<p>Hi!</p>")

----------------------------------------

TITLE: Setting Server Port in TOML Configuration for Streamlit
DESCRIPTION: This snippet demonstrates how to set the server port to 80 in a TOML configuration file for Streamlit.

LANGUAGE: toml
CODE:
[server]
port = 80

----------------------------------------

TITLE: Creating Expandable Containers in Streamlit Python
DESCRIPTION: Shows how to create expandable containers (expanders and popovers) in Streamlit applications, using both direct method calls and the 'with' notation.

LANGUAGE: python
CODE:
expand = st.expander("My label", icon=":material/info:")
expand.write("Inside the expander.")
pop = st.popover("Button label")
pop.checkbox("Show all")

# You can also use "with" notation:
with expand:
    st.radio("Select one:", [1, 2])

----------------------------------------

TITLE: Client Configuration Settings
DESCRIPTION: TOML configuration for client-side behavior including error display and toolbar settings

LANGUAGE: toml
CODE:
[client]
showErrorDetails = "full"
toolbarMode = "auto"
showSidebarNavigation = true

----------------------------------------

TITLE: Displaying Naive Datetime in Streamlit
DESCRIPTION: Demonstrates how Streamlit handles and displays datetime objects without timezone information. The datetime instance is shown exactly as provided without any timezone adjustments.

LANGUAGE: python
CODE:
import streamlit as st
from datetime import datetime

st.write(datetime(2020, 1, 10, 10, 30))
# Outputs: 2020-01-10 10:30:00

----------------------------------------

TITLE: Rerunning Streamlit Script
DESCRIPTION: Demonstrates how to rerun the Streamlit script immediately using st.rerun().

LANGUAGE: python
CODE:
st.rerun()

----------------------------------------

TITLE: Using Snowflake Connection with Configuration from Secrets
DESCRIPTION: Python code showing how to use a Snowflake connection with configuration from the secrets file.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st

# url and connect_args from secrets.toml above are picked up and used here
conn = st.connection("snowflake", "sql")
# ...

----------------------------------------

TITLE: Using validation with @st.experimental_singleton
DESCRIPTION: The @st.experimental_singleton decorator now supports an optional validate parameter for validating cached data.

LANGUAGE: python
CODE:
@st.experimental_singleton(validate=my_validation_function)
def my_cached_function():
    # Function implementation

----------------------------------------

TITLE: Creating Histogram of Uber Pickups with Streamlit
DESCRIPTION: Generates a histogram of Uber pickups by hour using NumPy and displays it using Streamlit's bar chart function.

LANGUAGE: python
CODE:
st.subheader('Number of pickups by hour')
hist_values = np.histogram(
    data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0]
st.bar_chart(hist_values)

----------------------------------------

TITLE: Configuring Database URL in Streamlit Secrets
DESCRIPTION: Example of setting up a database URL in the Streamlit secrets.toml file for a SQLite connection.

LANGUAGE: toml
CODE:
# .streamlit/secrets.toml

[connections.pets_db]
url = "sqlite:///pets.db"

----------------------------------------

TITLE: Logger Configuration Settings
DESCRIPTION: TOML configuration for Streamlit's logging system including log level and message format

LANGUAGE: toml
CODE:
[logger]
level = "info"
messageFormat = "%(asctime)s %(message)s"

----------------------------------------

TITLE: Modifying Font in Light Theme
DESCRIPTION: Simple configuration to change only the font family while keeping other light theme defaults.

LANGUAGE: toml
CODE:
[theme]
font="serif"

----------------------------------------

TITLE: Testing Input Widgets in Streamlit
DESCRIPTION: Shows how to test various input widgets including buttons, checkboxes, color pickers, date inputs, forms, multiselect, number inputs, radio buttons, sliders, and text inputs.

LANGUAGE: python
CODE:
from streamlit.testing.v1 import AppTest

at = AppTest.from_file("cheatsheet_app.py")

# button
assert at.button[0].value == False
at.button[0].click().run()
assert at.button[0].value == True

# checkbox
assert at.checkbox[0].value == False
at.checkbox[0].check().run() # uncheck() is also supported
assert at.checkbox[0].value == True

# color_picker
assert at.color_picker[0].value == "#FFFFFF"
at.color_picker[0].pick("#000000").run()

# date_input
assert at.date_input[0].value == datetime.date(2019, 7, 6)
at.date_input[0].set_value(datetime.date(2022, 12, 21)).run()

# form_submit_button - shows up just like a button
assert at.button[0].value == False
at.button[0].click().run()
assert at.button[0].value == True

# multiselect
assert at.multiselect[0].value == ["foo", "bar"]
at.multiselect[0].select("baz").unselect("foo").run()

# number_input
assert at.number_input[0].value == 5
at.number_input[0].increment().run()

# radio
assert at.radio[0].value == "Bar"
assert at.radio[0].index == 3
at.radio[0].set_value("Foo").run()

# selectbox
assert at.selectbox[0].value == "Bar"
assert at.selectbox[0].index == 3
at.selectbox[0].set_value("Foo").run()

# select_slider
assert at.select_slider[0].value == "Feb"
at.select_slider[0].set_value("Mar").run()
at.select_slider[0].set_range("Apr", "Jun").run()

# slider
assert at.slider[0].value == 2
at.slider[0].set_value(3).run()
at.slider[0].set_range(4, 6).run()

# text_area
assert at.text_area[0].value == "Hello, world!"
at.text_area[0].set_value("Hello, yourself!").run()

# text_input
assert at.text_input[0].value == "Hello, world!")
at.text_input[0].set_value("Hello, yourself!").run()

# time_input
assert at.time_input[0].value == datetime.time(8, 45)
at.time_input[0].set_value(datetime.time(12, 30))

# toggle
assert at.toggle[0].value == False
assert at.toggle[0].label == "Debug mode"
at.toggle[0].set_value(True).run()
assert at.toggle[0].value == True

----------------------------------------

TITLE: Testing Input Widgets in Streamlit
DESCRIPTION: Shows how to test various input widgets including buttons, checkboxes, color pickers, date inputs, forms, multiselect, number inputs, radio buttons, sliders, and text inputs.

LANGUAGE: python
CODE:
from streamlit.testing.v1 import AppTest

at = AppTest.from_file("cheatsheet_app.py")

# button
assert at.button[0].value == False
at.button[0].click().run()
assert at.button[0].value == True

# checkbox
assert at.checkbox[0].value == False
at.checkbox[0].check().run() # uncheck() is also supported
assert at.checkbox[0].value == True

# color_picker
assert at.color_picker[0].value == "#FFFFFF"
at.color_picker[0].pick("#000000").run()

# date_input
assert at.date_input[0].value == datetime.date(2019, 7, 6)
at.date_input[0].set_value(datetime.date(2022, 12, 21)).run()

# form_submit_button - shows up just like a button
assert at.button[0].value == False
at.button[0].click().run()
assert at.button[0].value == True

# multiselect
assert at.multiselect[0].value == ["foo", "bar"]
at.multiselect[0].select("baz").unselect("foo").run()

# number_input
assert at.number_input[0].value == 5
at.number_input[0].increment().run()

# radio
assert at.radio[0].value == "Bar"
assert at.radio[0].index == 3
at.radio[0].set_value("Foo").run()

# selectbox
assert at.selectbox[0].value == "Bar"
assert at.selectbox[0].index == 3
at.selectbox[0].set_value("Foo").run()

# select_slider
assert at.select_slider[0].value == "Feb"
at.select_slider[0].set_value("Mar").run()
at.select_slider[0].set_range("Apr", "Jun").run()

# slider
assert at.slider[0].value == 2
at.slider[0].set_value(3).run()
at.slider[0].set_range(4, 6).run()

# text_area
assert at.text_area[0].value == "Hello, world!"
at.text_area[0].set_value("Hello, yourself!").run()

# text_input
assert at.text_input[0].value == "Hello, world!")
at.text_input[0].set_value("Hello, yourself!").run()

# time_input
assert at.time_input[0].value == datetime.time(8, 45)
at.time_input[0].set_value(datetime.time(12, 30))

# toggle
assert at.toggle[0].value == False
assert at.toggle[0].label == "Debug mode"
at.toggle[0].set_value(True).run()
assert at.toggle[0].value == True

----------------------------------------

TITLE: Using st.file_uploader in Streamlit (Python)
DESCRIPTION: st.file_uploader copies uploaded file data to a BytesIO buffer in Python memory. The data persists in RAM until the Streamlit app re-runs. To save data between runs, it can be cached.

LANGUAGE: python
CODE:
st.file_uploader()

----------------------------------------

TITLE: Installing SQLAlchemy for SQL Connections
DESCRIPTION: Command to install the SQLAlchemy library, which is required for SQL connections in Streamlit.

LANGUAGE: bash
CODE:
pip install SQLAlchemy==1.4.0

----------------------------------------

TITLE: Displaying Raw Data with Streamlit Checkbox
DESCRIPTION: Adds a checkbox to toggle the display of raw data in the Streamlit app.

LANGUAGE: python
CODE:
if st.checkbox('Show raw data'):
    st.subheader('Raw data')
    st.write(data)

----------------------------------------

TITLE: Checking Streamlit Process Status in Unix Systems
DESCRIPTION: Command to verify if Streamlit process is running on Mac or Linux systems using ps command.

LANGUAGE: bash
CODE:
ps -Al | grep streamlit

----------------------------------------

TITLE: Customizing Dark Theme in TOML
DESCRIPTION: Example of inheriting from the dark theme while customizing the primary color to purple.

LANGUAGE: toml
CODE:
[theme]
base="dark"
primaryColor="purple"

----------------------------------------

TITLE: Global Configuration Settings
DESCRIPTION: TOML configuration for global Streamlit settings including widget state and execution warnings

LANGUAGE: toml
CODE:
[global]
disableWidgetStateDuplicationWarning = false
showWarningOnDirectExecution = true

----------------------------------------

TITLE: Configuring Default Light Theme in TOML
DESCRIPTION: Basic theme configuration showing the default Streamlit Light theme settings in a .streamlit/config.toml file. Defines primary color, background colors, text color, and font family.

LANGUAGE: toml
CODE:
[theme]
primaryColor="#FF4B4B"
backgroundColor="#FFFFFF"
secondaryBackgroundColor="#F0F2F6"
textColor="#31333F"
font="sans serif"

----------------------------------------

TITLE: Verifying Streamlit Version in Python
DESCRIPTION: Python code to check the installed Streamlit version within an application.

LANGUAGE: python
CODE:
import streamlit as st
st.write(st.__version__)

----------------------------------------

TITLE: Compact Secret Section Usage
DESCRIPTION: Shows how to efficiently use TOML sections for passing multiple secrets as a single attribute in function calls.

LANGUAGE: toml
CODE:
[db_credentials]
username = "my_username"
password = "my_password"

LANGUAGE: python
CODE:
# Verbose version
my_db.connect(username=st.secrets.db_credentials.username, password=st.secrets.db_credentials.password)

# Far more compact version!
my_db.connect(**st.secrets.db_credentials)

----------------------------------------

TITLE: Creating Mapping Demo Page
DESCRIPTION: Implementation of the mapping demo page using PyDeck to display interactive geospatial visualizations.

LANGUAGE: python
CODE:
import streamlit as st
import pandas as pd
import pydeck as pdk
from urllib.error import URLError

st.set_page_config(page_title="Mapping Demo", page_icon="🌍")

st.markdown("# Mapping Demo")
st.sidebar.header("Mapping Demo")
st.write(
    """This demo shows how to use
[`st.pydeck_chart`](https://docs.streamlit.io/develop/api-reference/charts/st.pydeck_chart)
to display geospatial data."""
)

@st.cache_data
def from_data_file(filename):
    url = (
        "http://raw.githubusercontent.com/streamlit/"
        "example-data/master/hello/v1/%s" % filename
    )
    return pd.read_json(url)

try:
    ALL_LAYERS = {
        "Bike Rentals": pdk.Layer(
            "HexagonLayer",
            data=from_data_file("bike_rental_stats.json"),
            get_position=["lon", "lat"],
            radius=200,
            elevation_scale=4,
            elevation_range=[0, 1000],
            extruded=True,
        ),
        # ... [additional layers omitted for brevity]
    }
    # ... [rest of the mapping implementation]

----------------------------------------

TITLE: Upgrading Streamlit with Pipenv
DESCRIPTION: Commands to upgrade Streamlit using Pipenv package manager. First navigates to the project directory, then activates the environment and upgrades Streamlit.

LANGUAGE: bash
CODE:
cd myproject

LANGUAGE: bash
CODE:
pipenv shell
pip install --upgrade streamlit
streamlit version

LANGUAGE: bash
CODE:
pipenv update streamlit
pipenv run streamlit version

----------------------------------------

TITLE: Configuring Static File Serving in Streamlit (TOML)
DESCRIPTION: This snippet shows how to enable static file serving in Streamlit by setting the 'enableStaticServing' option to true in the config.toml file.

LANGUAGE: toml
CODE:
# .streamlit/config.toml

[server]
enableStaticServing = true

----------------------------------------

TITLE: Building Python Distribution Package
DESCRIPTION: Command to create a Python wheel distribution package from the component source code.

LANGUAGE: bash
CODE:
python setup.py sdist bdist_wheel

----------------------------------------

TITLE: Installing Streamlit AgGrid Component
DESCRIPTION: Command to install the AgGrid component package using pip package manager.

LANGUAGE: python
CODE:
pip install streamlit-aggrid

----------------------------------------

TITLE: Running Streamlit App with Config Options
DESCRIPTION: Example of running a Streamlit app with custom configuration options.

LANGUAGE: bash
CODE:
streamlit run your_app.py --client.showErrorDetails=False --theme.primaryColor=blue

----------------------------------------

TITLE: Creating Basic Streamlit Hello World App in Snowflake
DESCRIPTION: A simple Streamlit application that displays 'Hello World' using st.write(). This demonstrates the basic setup of a Streamlit app within the Snowflake environment.

LANGUAGE: python
CODE:
import streamlit as st

st.write("Hello World")

----------------------------------------

TITLE: Implementing Control Flow in Streamlit Python
DESCRIPTION: Illustrates various control flow mechanisms in Streamlit, including stopping execution, rerunning scripts, navigation, forms, dialogs, and fragments.

LANGUAGE: python
CODE:
# Stop execution immediately:
st.stop()
# Rerun script immediately:
st.rerun()
# Navigate to another page:
st.switch_page("pages/my_page.py")

# Define a navigation widget in your entrypoint file
pg = st.navigation(
    st.Page("page1.py", title="Home", url_path="home", default=True)
    st.Page("page2.py", title="Preferences", url_path="settings")
)
pg.run()

# Group multiple widgets:
with st.form(key="my_form"):
    username = st.text_input("Username")
    password = st.text_input("Password")
    st.form_submit_button("Login")

# Define a dialog function
@st.dialog("Welcome!")
def modal_dialog():
    st.write("Hello")

modal_dialog()

# Define a fragment
@st.fragment
def fragment_function():
    df = get_data()
    st.line_chart(df)
    st.button("Update")

fragment_function()

----------------------------------------

TITLE: Initializing Main Streamlit App
DESCRIPTION: Main entry point file (Hello.py) that sets up the welcome page with page configuration and markdown content.

LANGUAGE: python
CODE:
import streamlit as st

st.set_page_config(
    page_title="Hello",
    page_icon="👋",
)

st.write("# Welcome to Streamlit! 👋")

st.sidebar.success("Select a demo above.")

st.markdown(
    """
    Streamlit is an open-source app framework built specifically for
    Machine Learning and Data Science projects.
    **👈 Select a demo from the sidebar** to see some examples
    of what Streamlit can do!
    ### Want to learn more?
    - Check out [streamlit.io](https://streamlit.io)
    - Jump into our [documentation](https://docs.streamlit.io)
    - Ask a question in our [community
        forums](https://discuss.streamlit.io)
    ### See more complex demos
    - Use a neural net to [analyze the Udacity Self-driving Car Image
        Dataset](https://github.com/streamlit/demo-self-driving)
    - Explore a [New York City rideshare dataset](https://github.com/streamlit/demo-uber-nyc-pickups)
"""
)

----------------------------------------

TITLE: Deactivating Virtual Environment - Bash
DESCRIPTION: Command to deactivate the Python virtual environment

LANGUAGE: bash
CODE:
deactivate

----------------------------------------

TITLE: Disabling Telemetry in Streamlit TOML Configuration
DESCRIPTION: This snippet shows how to opt out of usage statistics collection in Streamlit by setting the gatherUsageStats option to false in the TOML configuration.

LANGUAGE: toml
CODE:
[browser]
gatherUsageStats = false

----------------------------------------

TITLE: Configuring Link Column in Streamlit
DESCRIPTION: Implements a link column with character limit and URL validation.

LANGUAGE: python
CODE:
LinkColumn("Trending apps", max_chars=100, validate="^https://.*$")

----------------------------------------

TITLE: Displaying Interactive Widgets in Streamlit Python
DESCRIPTION: Shows a comprehensive list of interactive widgets available in Streamlit, including buttons, input fields, sliders, and more. Also demonstrates how to use widget values and disable widgets.

LANGUAGE: python
CODE:
st.button("Click me")
st.download_button("Download file", data)
st.link_button("Go to gallery", url)
st.page_link("app.py", label="Home")
st.data_editor("Edit data", data)
st.checkbox("I agree")
st.feedback("thumbs")
st.pills("Tags", ["Sports", "Politics"])
st.radio("Pick one", ["cats", "dogs"])
st.segmented_control("Filter", ["Open", "Closed"])
st.toggle("Enable")
st.selectbox("Pick one", ["cats", "dogs"])
st.multiselect("Buy", ["milk", "apples", "potatoes"])
st.slider("Pick a number", 0, 100)
st.select_slider("Pick a size", ["S", "M", "L"])
st.text_input("First name")
st.number_input("Pick a number", 0, 10)
st.text_area("Text to translate")
st.date_input("Your birthday")
st.time_input("Meeting time")
st.file_uploader("Upload a CSV")
st.audio_input("Record a voice message")
st.camera_input("Take a picture")
st.color_picker("Pick a color")

# Use widgets' returned values in variables:
for i in range(int(st.number_input("Num:"))):
    foo()
if st.sidebar.selectbox("I:",["f"]) == "f":
    b()
my_slider_val = st.slider("Quinn Mallory", 1, 88)
st.write(slider_val)

# Disable widgets to remove interactivity:
st.slider("Pick a number", 0, 100, disabled=True)

----------------------------------------

TITLE: Initializing Streamlit Server in Python
DESCRIPTION: This command starts up a Streamlit server using Python. The server acts as the backend of the Streamlit app, performing computations for all users viewing the app.

LANGUAGE: python
CODE:
streamlit run your_app.py

----------------------------------------

TITLE: Adding Elements to Sidebar in Streamlit Python
DESCRIPTION: Demonstrates how to add elements to the sidebar in Streamlit applications using both direct method calls and the 'with' notation.

LANGUAGE: python
CODE:
# Just add it after st.sidebar:
a = st.sidebar.radio("Select one:", [1, 2])

# Or use "with" notation:
with st.sidebar:
    st.radio("Select one:", [1, 2])

----------------------------------------

TITLE: Streamlit Layout Management
DESCRIPTION: Shows how to organize content using columns and sidebar layouts in Streamlit.

LANGUAGE: python
CODE:
import streamlit as st

left_column, right_column = st.columns(2)
# You can use a column just like st.sidebar:
left_column.button('Press me!')

# Or even better, call Streamlit functions inside a "with" block:
with right_column:
    chosen = st.radio(
        'Sorting hat',
        ("Gryffindor", "Ravenclaw", "Hufflepuff", "Slytherin"))
    st.write(f"You are in {chosen} house!")

----------------------------------------

TITLE: Importing sklearn in Python without proper requirements
DESCRIPTION: This snippet demonstrates an import statement that would cause a ModuleNotFoundError if 'scikit-learn' is not included in the requirements file when deploying on Streamlit Community Cloud.

LANGUAGE: python
CODE:
import sklearn

----------------------------------------

TITLE: Initializing and Running a Simulated Streamlit App
DESCRIPTION: Code snippet demonstrating how to initialize and run a simulated Streamlit app for testing purposes.

LANGUAGE: python
CODE:
at = AppTest.from_file("app.py")
at.run()

----------------------------------------

TITLE: Configuring Datetime Column in Streamlit
DESCRIPTION: Sets up a datetime column with minimum value and custom date format.

LANGUAGE: python
CODE:
DatetimeColumn("Appointment", min_value=datetime(2023, 6, 1), format="D MMM YYYY, h:mm a")

----------------------------------------

TITLE: Displaying Data with Streamlit in Python
DESCRIPTION: Demonstrates methods to display structured data using Streamlit, including dataframes, tables, JSON, and metrics.

LANGUAGE: python
CODE:
st.dataframe(my_dataframe)
st.table(data.iloc[0:10])
st.json({"foo":"bar","fu":"ba"})
st.metric("My metric", 42, 2)

----------------------------------------

TITLE: Installing GitHub Package in requirements.txt
DESCRIPTION: Basic syntax for installing a package from a GitHub repository using pip in a requirements.txt file.

LANGUAGE: bash
CODE:
git+https://github.com/SomePackage#egg=SomePackage

----------------------------------------

TITLE: Setting Page Configuration in Streamlit
DESCRIPTION: Use st.set_page_config() to set the page title, favicon, sidebar state, and wide mode. This function was introduced in version 0.65.0.

LANGUAGE: python
CODE:
st.set_page_config(page_title="My App", page_icon=":tada:", layout="wide", initial_sidebar_state="expanded")

----------------------------------------

TITLE: Querying a Database using Streamlit Connections
DESCRIPTION: This example demonstrates how to use Streamlit's connection feature to query a database. It simplifies the process of connecting to and retrieving data from a database.

LANGUAGE: python
CODE:
import streamlit as st

conn = st.connection("my_database")
df = conn.query("select * from my_table")
st.dataframe(df)

----------------------------------------

TITLE: Setting Upload Limit via Environment Variable
DESCRIPTION: Set the maximum file upload size using Streamlit environment variables

LANGUAGE: bash
CODE:
export STREAMLIT_SERVER_MAX_UPLOAD_SIZE=200

----------------------------------------

TITLE: Running pytest for Streamlit App Testing
DESCRIPTION: Commands to execute pytest and run the tests for the Streamlit app.

LANGUAGE: bash
CODE:
pytest

LANGUAGE: bash
CODE:
pytest tests/

----------------------------------------

TITLE: Streamlit Command Line Operations in Python
DESCRIPTION: Lists various Streamlit command line operations including running scripts, launching the demo, viewing configuration, clearing cache, accessing documentation, and checking the version.

LANGUAGE: python
CODE:
streamlit --help
streamlit run your_script.py
streamlit hello
streamlit config show
streamlit cache clear
streamlit docs
streamlit --version

----------------------------------------

TITLE: Caching Data Loading with Pandas
DESCRIPTION: Example showing how to cache data loading operations using pandas and st.cache_data.

LANGUAGE: python
CODE:
@st.cache_data
def load_data(url):
    df = pd.read_csv(url)  # Download the data
    return df

df = load_data("https://github.com/plotly/datasets/raw/master/uber-rides-data1.csv")
st.dataframe(df)

st.button("Rerun")

----------------------------------------

TITLE: Configuring Streamlit Secrets for Neon
DESCRIPTION: TOML configuration for storing Neon database connection string in Streamlit secrets.

LANGUAGE: toml
CODE:
[connections.neon]
url="postgresql://neondb_owner:xxxxxxxxxxxx@ep-adjective-noun-xxxxxxxx.us-east-2.aws.neon.tech/neondb?sslmode=require"

----------------------------------------

TITLE: Creating a Multipage Streamlit App in Python
DESCRIPTION: This code snippet demonstrates how to create a multipage Streamlit app using st.Page and st.navigation. It defines three pages and sets up navigation between them.

LANGUAGE: python
CODE:
import streamlit as st

# Define the pages
main_page = st.Page("main_page.py", title="Main Page", icon="🎈")
page_2 = st.Page("page_2.py", title="Page 2", icon="❄️")
page_3 = st.Page("page_3.py", title="Page 3", icon="🎉")

# Set up navigation
pg = st.navigation([main_page, page_2, page_3])

# Run the selected page
pg.run()

----------------------------------------

TITLE: Disabling CORS Protection in Streamlit
DESCRIPTION: Command to disable CORS protection for troubleshooting loading issues.

LANGUAGE: bash
CODE:
streamlit run my_app.py --server.enableCORS=false

----------------------------------------

TITLE: Testing Multipage Streamlit App - First Page
DESCRIPTION: This code snippet shows the implementation of the first page in a multipage Streamlit app. It allows setting a 'magic word' in the session state.

LANGUAGE: python
CODE:
"""first.py"""
import streamlit as st

st.session_state.magic_word = st.session_state.get("magic_word", "Streamlit")

new_word = st.text_input("Magic word:")

if st.button("Set the magic word"):
    st.session_state.magic_word = new_word

----------------------------------------

TITLE: Installing and Importing Streamlit in Python
DESCRIPTION: Shows how to install Streamlit using pip, run a Streamlit application, and import the library using the conventional alias.

LANGUAGE: python
CODE:
pip install streamlit

streamlit run first_app.py

# Import convention
>>> import streamlit as st

----------------------------------------

TITLE: Caching Data in Streamlit Apps
DESCRIPTION: Using Streamlit's caching decorators to optimize resource usage by storing data and model results. These methods help prevent redundant computations and reduce memory consumption.

LANGUAGE: python
CODE:
st.cache_data
st.cache_resource

----------------------------------------

TITLE: Starting Python HTTP Server
DESCRIPTION: Command to start a simple Python HTTP server for testing server connectivity issues.

LANGUAGE: bash
CODE:
python -m http.server [port]

----------------------------------------

TITLE: Streamlit TigerGraph Integration Application
DESCRIPTION: Main Streamlit application that establishes connection to TigerGraph, implements data caching, and displays query results about COVID-19 infections.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st
import pyTigerGraph as tg

# Initialize connection.
conn = tg.TigerGraphConnection(**st.secrets["tigergraph"])
conn.apiToken = conn.getToken(conn.createSecret())

# Pull data from the graph by running the "mostDirectInfections" query.
# Uses st.cache_data to only rerun when the query changes or after 10 min.
@st.cache_data(ttl=600)
def get_data():
    most_infections = conn.runInstalledQuery("mostDirectInfections")[0]["Answer"][0]
    return most_infections["v_id"], most_infections["attributes"]

items = get_data()

# Print results.
st.title(f"Patient {items[0]} has the most direct infections")
for key, val in items[1].items():
    st.write(f"Patient {items[0]}'s {key} is {val}.")

----------------------------------------

TITLE: Installing Streamlit Package via pip
DESCRIPTION: Command to install Streamlit package using pip package manager within the Anaconda environment

LANGUAGE: bash
CODE:
pip install streamlit

----------------------------------------

TITLE: Basic Docker Container Health Check Script
DESCRIPTION: A bash script that serves as the entrypoint for the Docker container, handling process management and signal handling for the Streamlit application.

LANGUAGE: bash
CODE:
#!/bin/bash

APP_PID=
stopRunningProcess() {
    if test ! "${APP_PID}" = '' && ps -p ${APP_PID} > /dev/null ; then
       > /proc/1/fd/1 echo "Stopping ${COMMAND_PATH} which is running with process ID ${APP_PID}"
       kill -TERM ${APP_PID}
       > /proc/1/fd/1 echo "Waiting for ${COMMAND_PATH} to process SIGTERM signal"
        wait ${APP_PID}
        > /proc/1/fd/1 echo "All processes have stopped running"
    else
        > /proc/1/fd/1 echo "${COMMAND_PATH} was not started when the signal was sent or it has already been stopped"
    fi
}

trap stopRunningProcess EXIT TERM

source ${VIRTUAL_ENV}/bin/activate

streamlit run ${HOME}/app/streamlit_app.py &
APP_ID=${!}

wait ${APP_ID}

----------------------------------------

TITLE: Integrating pytest-results-action with Streamlit App Action
DESCRIPTION: This YAML snippet demonstrates how to combine Streamlit App Action with pytest-results-action for more detailed test result reporting.

LANGUAGE: yaml
CODE:
- uses: streamlit/streamlit-app-action@v0.0.3
  with:
    app-path: streamlit_app.py
    # Add pytest-args to output junit xml
    pytest-args: -v --junit-xml=test-results.xml
- if: always()
  uses: pmeier/pytest-results-action@v0.6.0
  with:
    path: test-results.xml
    summary: true
    display-options: fEX

----------------------------------------

TITLE: Creating Input Widgets
DESCRIPTION: Examples of input widgets like buttons, text inputs and sliders.

LANGUAGE: python
CODE:
clicked = st.button("Click me")
name = st.text_input("Enter name")
age = st.slider("Pick age", 0, 100)

----------------------------------------

TITLE: Using Query Parameters in Streamlit
DESCRIPTION: Set and get query parameters to add stateful behaviors to your Streamlit app. This feature was introduced in version 0.65.0.

LANGUAGE: python
CODE:
st.experimental_set_query_params(my_param=[1, 2])
params = st.experimental_get_query_params()

----------------------------------------

TITLE: Creating Fragment for Black Cat Herding
DESCRIPTION: Defines a Streamlit fragment for herding black cats across multiple containers, using st.empty() to prevent element accumulation.

LANGUAGE: Python
CODE:
@st.fragment
def herd_black_cats(card_a, card_b, card_c):
    st.button("Herd the black cats")
    container_a = card_a.container()
    container_b = card_b.container()
    container_c = card_c.container()
    with container_a:
        black_cats()
    with container_b:
        black_cats()
    with container_c:
        black_cats()

----------------------------------------

TITLE: Configuring Streamlit Secrets for TiDB Connection (TOML)
DESCRIPTION: TOML configuration for storing TiDB connection details in Streamlit secrets file. Includes host, port, database, username, and password.

LANGUAGE: toml
CODE:
# .streamlit/secrets.toml

[connections.tidb]
dialect = "mysql"
host = "<TiDB_cluster_host>"
port = 4000
database = "pets"
username = "<TiDB_cluster_user>"
password = "<TiDB_cluster_password>"

----------------------------------------

TITLE: Installing Streamlit - Bash
DESCRIPTION: Command to install Streamlit using pip package manager

LANGUAGE: bash
CODE:
pip install streamlit

----------------------------------------

TITLE: Verifying Docker Installation with Hello World
DESCRIPTION: Command to verify Docker Engine installation by running the hello-world image.

LANGUAGE: bash
CODE:
sudo docker run hello-world

----------------------------------------

TITLE: Adding Linting to Streamlit App Action Workflow
DESCRIPTION: This YAML snippet shows how to add automated linting using Ruff to the Streamlit App Action workflow.

LANGUAGE: yaml
CODE:
- uses: streamlit/streamlit-app-action@v0.0.3
  with:
    app-path: streamlit_app.py
    ruff: true

----------------------------------------

TITLE: Using Echo for Code Tutorial Display in Streamlit
DESCRIPTION: Display and execute code simultaneously, useful for creating tutorials.

LANGUAGE: python
CODE:
with st.echo():
  st.write('This code will be printed')

----------------------------------------

TITLE: Using the Color Picker Widget in Streamlit
DESCRIPTION: Utilize the color picker widget with st.beta_color_picker(). This feature was introduced in version 0.59.0.

LANGUAGE: python
CODE:
color = st.beta_color_picker("Pick a color", "#00f900")

----------------------------------------

TITLE: Streamlit App Using Snowpark Session
DESCRIPTION: An alternative Streamlit app that uses a Snowpark session for dataframe-style operations inside Snowflake.

LANGUAGE: python
CODE:
import streamlit as st

conn = st.connection("snowflake")

@st.cache_data
def load_table():
    session = conn.session()
    return session.table("mytable").to_pandas()

df = load_table()

for row in df.itertuples():
    st.write(f"{row.NAME} has a :{row.PET}:")

----------------------------------------

TITLE: Version-Specific requirements.txt for Streamlit App
DESCRIPTION: An example requirements.txt file with version specifications for each package. This demonstrates how to pin specific versions or set version constraints for dependencies in a Streamlit app.

LANGUAGE: none
CODE:
streamlit==1.24.1
pandas>2.0
numpy<=1.25.1

----------------------------------------

TITLE: Creating Supabase Database Table and Sample Data
DESCRIPTION: SQL queries to create a new table 'mytable' with name and pet columns, and insert sample data records.

LANGUAGE: sql
CODE:
CREATE TABLE mytable (
    name            varchar(80),
    pet             varchar(80)
);

INSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');

----------------------------------------

TITLE: Activating Virtual Environment - Multiple OS Commands
DESCRIPTION: Commands for activating the virtual environment on different operating systems

LANGUAGE: bash
CODE:
# Windows command prompt
.venv\Scripts\activate.bat

# Windows PowerShell
.venv\Scripts\Activate.ps1

# macOS and Linux
source .venv/bin/activate

----------------------------------------

TITLE: Adding Streamlit GitHub Badge in Markdown
DESCRIPTION: Markdown snippet to embed a Streamlit app badge in a GitHub README.md file. The badge links to the deployed Streamlit app.

LANGUAGE: markdown
CODE:
[![Streamlit App](https://static.streamlit.io/badges/streamlit_badge_black_white.svg)](https://<your-custom-subdomain>.streamlit.app)

----------------------------------------

TITLE: Using ScriptRunContext with Custom Threads in Streamlit
DESCRIPTION: Demonstrates how to expose ScriptRunContext to custom threads, allowing direct Streamlit command calls within threads. This is an advanced pattern that should be used with caution as it's not officially supported.

LANGUAGE: python
CODE:
import streamlit as st
from streamlit.runtime.scriptrunner import add_script_run_ctx, get_script_run_ctx
import time
from threading import Thread


class WorkerThread(Thread):
    def __init__(self, delay, target):
        super().__init__()
        self.delay = delay
        self.target = target

    def run(self):
        start_time = time.time()
        time.sleep(self.delay)
        end_time = time.time()
        self.target.write(f"start: {start_time}, end: {end_time}")


delays = [5, 4, 3, 2, 1]
result_containers = []
for i, delay in enumerate(delays):
    st.header(f"Thread {i}")
    result_containers.append(st.container())

threads = [
    WorkerThread(delay, container)
    for delay, container in zip(delays, result_containers)
]
for thread in threads:
    add_script_run_ctx(thread, get_script_run_ctx())
    thread.start()

for thread in threads:
    thread.join()

st.button("Rerun")

----------------------------------------

TITLE: Adding Caption Text in Streamlit
DESCRIPTION: Display text in small font size for captions or supplementary information.

LANGUAGE: python
CODE:
st.caption("This is written small caption text")

----------------------------------------

TITLE: Creating Tab Containers
DESCRIPTION: Introducing st.tabs to have tab containers in your app.

LANGUAGE: python
CODE:
tab1, tab2 = st.tabs(["Tab 1", "Tab 2"])

with tab1:
    st.write("This is tab 1")

with tab2:
    st.write("This is tab 2")

----------------------------------------

TITLE: Setting Streamlit's Base URL Path
DESCRIPTION: Use the server.baseUrlPath config option to set a custom base URL path for your Streamlit app.

LANGUAGE: Python
CODE:
# In config:
server.baseUrlPath = "/customPath"

----------------------------------------

TITLE: Creating PostgreSQL Table and Sample Data
DESCRIPTION: SQL commands to create a sample table 'mytable' with name and pet columns, and insert initial test data.

LANGUAGE: sql
CODE:
CREATE TABLE mytable (
    name            varchar(80),
    pet             varchar(80)
);

INSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');

----------------------------------------

TITLE: Saving User Feedback in Streamlit Session State
DESCRIPTION: Define a callback function to save user feedback into the chat history stored in Streamlit's session state.

LANGUAGE: python
CODE:
def save_feedback(index):
    st.session_state.history[index]["feedback"] = st.session_state[f"feedback_{index}"]

----------------------------------------

TITLE: Handling User Input with Streamlit Chat Input
DESCRIPTION: Shows how to use st.chat_input to accept and display user input in a chat interface.

LANGUAGE: python
CODE:
import streamlit as st

prompt = st.chat_input("Say something")
if prompt:
    st.write(f"User has sent the following prompt: {prompt}")

----------------------------------------

TITLE: Separate Module Pattern for Class Definition
DESCRIPTION: Shows how to properly structure class definitions by moving them to separate modules to avoid redefinition issues.

LANGUAGE: python
CODE:
# my_class.py
class MyClass:
    def __init__(self, var1, var2):
        self.var1 = var1
        self.var2 = var2

LANGUAGE: python
CODE:
# app.py
import streamlit as st
from my_class import MyClass

if "my_instance" not in st.session_state:
  st.session_state.my_instance = MyClass("foo", "bar")

# Displays True on every rerun
st.write(isinstance(st.session_state.my_instance, MyClass))

st.button("Rerun")

----------------------------------------

TITLE: Implementing Microsoft Entra Authentication in Streamlit
DESCRIPTION: This Python code demonstrates how to create a Streamlit app with Microsoft Entra authentication. It includes functions for displaying a login screen and handling user authentication state, showing a personalized greeting for logged-in users and a logout option.

LANGUAGE: python
CODE:
import streamlit as st

def login_screen():
    st.header("This app is private.")
    st.subheader("Please log in.")
    st.button("Log in with Microsoft", on_click=st.login)

if not st.experimental_user.is_logged_in:
    login_screen()
else:
    st.header(f"Welcome, {st.experimental_user.name}!")
    st.button("Log out", on_click=st.logout)

----------------------------------------

TITLE: Using Callback Functions with Forms in Streamlit
DESCRIPTION: Illustrates how to implement a callback function with a form in Streamlit, considering the order of operations for widget updates and form submissions.

LANGUAGE: python
CODE:
import streamlit as st

if "attendance" not in st.session_state:
    st.session_state.attendance = set()


def take_attendance():
    if st.session_state.name in st.session_state.attendance:
        st.info(f"{st.session_state.name} has already been counted.")
    else:
        st.session_state.attendance.add(st.session_state.name)


with st.form(key="my_form"):
    st.text_input("Name", key="name")
    st.form_submit_button("I'm here!", on_click=take_attendance)

----------------------------------------

TITLE: Text Highlighting Helper Function
DESCRIPTION: Adds color highlighting to text based on validation results using Streamlit's markdown formatting

LANGUAGE: python
CODE:
def add_highlights(response_sentences, validation_list, bg="red", text="red"):
    return [
        f":{text}[:{bg}-background[" + sentence + "]]" if not is_valid else sentence
        for sentence, is_valid in zip(response_sentences, validation_list)
    ]

----------------------------------------

TITLE: Configuring Secrets for Google Sheets Connection in TOML
DESCRIPTION: This TOML configuration sets up the secrets for connecting to a Google Sheet, including the spreadsheet URL and service account credentials.

LANGUAGE: toml
CODE:
# .streamlit/secrets.toml

[connections.gsheets]
spreadsheet = "https://docs.google.com/spreadsheets/d/xxxxxxx/edit#gid=0"

# From your JSON key file
type = "service_account"
project_id = "xxx"
private_key_id = "xxx"
private_key = "xxx"
client_email = "xxx"
client_id = "xxx"
auth_uri = "https://accounts.google.com/o/oauth2/auth"
token_uri = "https://oauth2.googleapis.com/token"
auth_provider_x509_cert_url = "https://www.googleapis.com/oauth2/v1/certs"
client_x509_cert_url = "xxx"

----------------------------------------

TITLE: Initializing Chat Stream Simulator
DESCRIPTION: Creates a generator function that simulates a chat stream by yielding random Lorem ipsum sentences with delays

LANGUAGE: python
CODE:
def chat_stream():
    for i in range(randint(3, 9)):
        yield lorem.sentence() + " "
        time.sleep(0.2)

----------------------------------------

TITLE: Displaying Monthly Sales Summary
DESCRIPTION: Function to display monthly sales data including daily breakdown and total sales charts. Coordinates with daily sales fragment through session state.

LANGUAGE: python
CODE:
def show_monthly_sales(data):
    time.sleep(1)
    selected_date = st.session_state.selected_date
    this_month = selected_date.replace(day=1)
    next_month = (selected_date.replace(day=28) + timedelta(days=4)).replace(day=1)

    st.container(height=100, border=False)
    with st.container(height=510):
        st.header(f"Daily sales for all products, {this_month:%B %Y}")
        monthly_sales = data[(data.index < next_month) & (data.index >= this_month)]
        st.write(monthly_sales)
    with st.container(height=510):
        st.header(f"Total sales for all products, {this_month:%B %Y}")
        st.bar_chart(monthly_sales.sum())

----------------------------------------

TITLE: Temporary Message Button in Streamlit
DESCRIPTION: Demonstrates how to create a button that shows a temporary message checking if an animal exists in a list. The message disappears on next script rerun.

LANGUAGE: python
CODE:
import streamlit as st

animal_shelter = ['cat', 'dog', 'rabbit', 'bird']

animal = st.text_input('Type an animal')

if st.button('Check availability'):
    have_it = animal.lower() in animal_shelter
    'We have that animal!' if have_it else 'We don\'t have that animal.'

----------------------------------------

TITLE: Complete Streamlit Data Streaming Application
DESCRIPTION: Full implementation of a Streamlit app that demonstrates real-time data streaming with start/stop controls using fragments.

LANGUAGE: python
CODE:
import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta


def get_recent_data(last_timestamp):
    """Generate and return data from last timestamp to now, at most 60 seconds."""
    now = datetime.now()
    if now - last_timestamp > timedelta(seconds=60):
        last_timestamp = now - timedelta(seconds=60)
    sample_time = timedelta(seconds=0.5)  # time between data points
    next_timestamp = last_timestamp + sample_time
    timestamps = np.arange(next_timestamp, now, sample_time)
    sample_values = np.random.randn(len(timestamps), 2)

    data = pd.DataFrame(sample_values, index=timestamps, columns=["A", "B"])
    return data


if "data" not in st.session_state:
    st.session_state.data = get_recent_data(datetime.now() - timedelta(seconds=60))

if "stream" not in st.session_state:
    st.session_state.stream = False


def toggle_streaming():
    st.session_state.stream = not st.session_state.stream


st.title("Data feed")
st.sidebar.slider(
    "Check for updates every: (seconds)", 0.5, 5.0, value=1.0, key="run_every"
)
st.sidebar.button(
    "Start streaming", disabled=st.session_state.stream, on_click=toggle_streaming
)
st.sidebar.button(
    "Stop streaming", disabled=not st.session_state.stream, on_click=toggle_streaming
)

if st.session_state.stream is True:
    run_every = st.session_state.run_every
else:
    run_every = None


@st.fragment(run_every=run_every)
def show_latest_data():
    last_timestamp = st.session_state.data.index[-1]
    st.session_state.data = pd.concat(
        [st.session_state.data, get_recent_data(last_timestamp)]
    )
    st.session_state.data = st.session_state.data[-100:]
    st.line_chart(st.session_state.data)


show_latest_data()

----------------------------------------

TITLE: Configuring Streamlit Secrets for Google Auth
DESCRIPTION: TOML configuration file containing authentication credentials and settings for Google OAuth

LANGUAGE: toml
CODE:
[auth]
redirect_uri = "http://localhost:8501/oauth2callback"
cookie_secret = "xxx"
client_id = "xxx"
client_secret = "xxx"
server_metadata_url = "https://accounts.google.com/.well-known/openid-configuration"

----------------------------------------

TITLE: Distinguishing Identical Widgets with Keys in Python
DESCRIPTION: Demonstrates how to use keys to distinguish between otherwise identical widgets on the same page, avoiding DuplicateWidgetID errors.

LANGUAGE: python
CODE:
st.button("OK", key="privacy")
st.button("OK", key="terms")

----------------------------------------

TITLE: Editing Streamlit App Title in Python
DESCRIPTION: This snippet demonstrates how to modify the title of a Streamlit app by changing the text passed to the st.title() function.

LANGUAGE: diff
CODE:
-st.title("🎈 My new app")
+st.title("🎈 My new Streamlit app")

----------------------------------------

TITLE: Creating Fragment for Orange Cat Herding
DESCRIPTION: Defines a Streamlit fragment for herding orange cats across multiple containers, similar to the black cat fragment.

LANGUAGE: Python
CODE:
@st.fragment
def herd_orange_cats(card_a, card_b, card_c):
    st.button("Herd the orange cats")
    container_a = card_a.container()
    container_b = card_b.container()
    container_c = card_c.container()
    with container_a:
        orange_cats()
    with container_b:
        orange_cats()
    with container_c:
        orange_cats()

----------------------------------------

TITLE: Installing Required Streamlit Version
DESCRIPTION: Specifies the minimum required Streamlit version for this tutorial.

LANGUAGE: text
CODE:
streamlit>=1.37.0

----------------------------------------

TITLE: Functionalized Widget State Management in Streamlit
DESCRIPTION: Generalized implementation for managing multiple widgets' states across pages using helper functions for storing and loading values.

LANGUAGE: python
CODE:
import streamlit as st

def store_value(key):
    st.session_state[key] = st.session_state["_"+key]
def load_value(key):
    st.session_state["_"+key] = st.session_state[key]

load_value("my_key")
st.number_input("Number of filters", key="_my_key", on_change=store_value, args=["my_key"])

----------------------------------------

TITLE: Starting Streamlit Application
DESCRIPTION: Command to run the Streamlit application from the terminal.

LANGUAGE: bash
CODE:
streamlit run app.py

----------------------------------------

TITLE: Configuring Streamlit Secrets for MySQL Connection
DESCRIPTION: TOML configuration for .streamlit/secrets.toml file to store MySQL connection details securely.

LANGUAGE: toml
CODE:
# .streamlit/secrets.toml

[connections.mysql]
dialect = "mysql"
host = "localhost"
port = 3306
database = "xxx"
username = "xxx"
password = "xxx"
query = { charset = "xxx" }

----------------------------------------

TITLE: Using Magic Commands in Streamlit
DESCRIPTION: Magic commands allow using st.write functionality without explicitly calling st.write().

LANGUAGE: Python
CODE:
# Instead of:
# st.write("Hello World")

# You can now do:
"Hello World"

----------------------------------------

TITLE: Initializing Streamlit App with Multi-Container Layout
DESCRIPTION: Sets up the basic structure of the Streamlit app, including importing necessary libraries, creating a title, and defining a grid of containers for cat displays.

LANGUAGE: Python
CODE:
import streamlit as st
import time

st.title("Cats!")

row1 = st.columns(3)
row2 = st.columns(3)

grid = [col.container(height=200) for col in row1 + row2]
safe_grid = [card.empty() for card in grid]

----------------------------------------

TITLE: Basic Streamlit Hello World Application
DESCRIPTION: Simple Streamlit application that displays 'Hello World' using the write method

LANGUAGE: python
CODE:
import streamlit as st

st.write("Hello World")

----------------------------------------

TITLE: Assembling Final Streamlit App with Fragments
DESCRIPTION: Combines the defined fragments and adds a full-script rerun button in the sidebar to create the complete Streamlit application.

LANGUAGE: Python
CODE:
with st.sidebar:
    herd_black_cats(grid[0].empty(), grid[2].empty(), grid[4].empty())
    herd_orange_cats(grid[1].empty(), grid[3].empty(), grid[5].empty())
    st.button("Herd all the cats")

----------------------------------------

TITLE: Importing Libraries and Preparing Data for Altair Chart in Python
DESCRIPTION: This snippet imports necessary libraries and prepares stock price data for visualization. It uses the @st.cache_data decorator to efficiently cache the data.

LANGUAGE: python
CODE:
import streamlit as st
import altair as alt
import pandas as pd
from vega_datasets import data

@st.cache_data
def get_data():
    source = data.stocks()
    source = source[source.date.gt("2004-01-01")]
    return source

stock_data = get_data()

----------------------------------------

TITLE: Sharing Python Modules Across Pages in Streamlit
DESCRIPTION: Demonstrates how Python modules are shared globally across pages in a Streamlit multipage app.

LANGUAGE: python
CODE:
# page1.py
import foo
foo.hello = 123

# page2.py
import foo
st.write(foo.hello)  # If page1 already executed, this writes 123

----------------------------------------

TITLE: Creating Annotation Layer for Altair Chart in Python
DESCRIPTION: This snippet creates an annotation layer for the chart, adding emojis and tooltips to mark specific points of interest. It uses a custom DataFrame to define the annotations.

LANGUAGE: python
CODE:
ANNOTATIONS = [
    ("Sep 01, 2007", 450, "🙂", "Something's going well for GOOG & AAPL."),
    ("Nov 01, 2008", 220, "🙂", "The market is recovering."),
    ("Dec 01, 2007", 750, "😱", "Something's going wrong for GOOG & AAPL."),
    ("Dec 01, 2009", 680, "😱", "A hiccup for GOOG."),
]
annotations_df = pd.DataFrame(
    ANNOTATIONS, columns=["date", "price", "marker", "description"]
)
annotations_df.date = pd.to_datetime(annotations_df.date)

annotation_layer = (
    alt.Chart(annotations_df)
    .mark_text(size=20, dx=-10, dy=0, align="left")
    .encode(x="date:T", y=alt.Y("price:Q"), text="marker", tooltip="description")
)

----------------------------------------

TITLE: Streamlit App with Neon Database Connection
DESCRIPTION: Python code demonstrating how to connect to Neon database using st.connection, execute queries, and display results in a Streamlit app.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st

# Initialize connection.
conn = st.connection("neon", type="sql")

# Perform query.
df = conn.query('SELECT * FROM home;', ttl="10m")

# Print results.
for row in df.itertuples():
    st.write(f"{row.name} has a :{row.pet}:")

----------------------------------------

TITLE: Accessing Raw Snowpark Session
DESCRIPTION: The session property provides direct access to the underlying Snowpark session. This is the raw session object without additional safety checks.

LANGUAGE: python
CODE:
st.connections.SnowparkConnection.session

----------------------------------------

TITLE: Running Streamlit Application
DESCRIPTION: Commands to run a Streamlit application from a Python file

LANGUAGE: bash
CODE:
streamlit run app.py

LANGUAGE: bash
CODE:
python -m streamlit run app.py

----------------------------------------

TITLE: Configuring Streamlit dataframe columns with custom formatting
DESCRIPTION: Define column configuration for the dataframe, including text, line chart, and bar chart columns with custom formatting options.

LANGUAGE: python
CODE:
column_configuration = {
    "name": st.column_config.TextColumn(
        "Name", help="The name of the user", max_chars=100, width="medium"
    ),
    "activity": st.column_config.LineChartColumn(
        "Activity (1 year)",
        help="The user's activity over the last 1 year",
        width="large",
        y_min=0,
        y_max=100,
    ),
    "daily_activity": st.column_config.BarChartColumn(
        "Activity (daily)",
        help="The user's activity in the last 25 days",
        width="medium",
        y_min=0,
        y_max=1,
    ),
}

----------------------------------------

TITLE: Configuring Dependencies
DESCRIPTION: Required Python packages for implementing Google authentication in Streamlit

LANGUAGE: text
CODE:
streamlit>=1.42.0
Authlib>=1.3.2

----------------------------------------

TITLE: Running a Streamlit Multipage App
DESCRIPTION: Command to run a Streamlit multipage app, where 'your_homepage.py' is the entrypoint file.

LANGUAGE: bash
CODE:
streamlit run your_homepage.py

----------------------------------------

TITLE: Creating Snowflake Database and Table with SQL
DESCRIPTION: SQL statements to create a new database named PETS, create a table named MYTABLE, insert sample data, and query the table.

LANGUAGE: sql
CODE:
CREATE DATABASE PETS;

CREATE TABLE MYTABLE (NAME varchar(80), PET varchar(80));

INSERT INTO MYTABLE
VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird');

SELECT * FROM MYTABLE;

----------------------------------------

TITLE: Interrupting Streamlit Widget Cleanup Process
DESCRIPTION: Simple technique to prevent widget state cleanup by re-saving the key-value pair in session state at the beginning of each page.

LANGUAGE: python
CODE:
if "my_key" in st.session_state:
    st.session_state.my_key = st.session_state.my_key

----------------------------------------

TITLE: Installing Streamlit via pip
DESCRIPTION: Basic command to install Streamlit using pip package manager.

LANGUAGE: bash
CODE:
pip install streamlit

----------------------------------------

TITLE: Creating interactive dataframe with row selections in Streamlit
DESCRIPTION: Display a dataframe with multi-row selection enabled, using custom column configuration and caching for data generation.

LANGUAGE: python
CODE:
st.header("All members")

df = get_profile_dataset()

event = st.dataframe(
    df,
    column_config=column_configuration,
    use_container_width=True,
    hide_index=True,
    on_select="rerun",
    selection_mode="multi-row",
)

----------------------------------------

TITLE: Demonstrating Basic Streamlit App Structure
DESCRIPTION: This snippet shows a basic Streamlit app structure without using st.echo. It defines functions for getting a user name and punctuation, then writes a greeting to the app.

LANGUAGE: python
CODE:
import streamlit as st

def get_user_name():
    return 'John'

# ------------------------------------------------
# Want people to see this part of the code...

def get_punctuation():
    return '!!!'

greeting = "Hi there, "
user_name = get_user_name()
punctuation = get_punctuation()

st.write(greeting, user_name, punctuation)

# ...up to here
# ------------------------------------------------

foo = 'bar'
st.write('Done!')

----------------------------------------

TITLE: Structuring a Multipage Streamlit App with pages/ Directory
DESCRIPTION: Demonstrates the file structure for a simple multipage Streamlit app using the pages/ directory approach. This method automatically creates additional pages for each Python file in the pages/ directory.

LANGUAGE: plaintext
CODE:
your_working_directory/
├── pages/
│   ├── a_page.py
│   └── another_page.py
└── your_homepage.py

----------------------------------------

TITLE: Configuring Streamlit Secrets for Google Sheets in TOML
DESCRIPTION: This snippet shows how to set up the .streamlit/secrets.toml file to store the Google Sheets URL. This file should be kept private and not committed to version control.

LANGUAGE: toml
CODE:
# .streamlit/secrets.toml
[connections.gsheets]
spreadsheet = "https://docs.google.com/spreadsheets/d/xxxxxxx/edit#gid=0"

----------------------------------------

TITLE: Installing Required Python Packages for Streamlit-Snowflake Connection
DESCRIPTION: Lists the necessary Python packages to install for connecting Streamlit to Snowflake, including version requirements.

LANGUAGE: text
CODE:
streamlit>=1.28
snowflake-snowpark-python>=0.9.0
snowflake-connector-python>=2.8.0

----------------------------------------

TITLE: Creating Primary and Secondary Buttons
DESCRIPTION: st.button and st.form_submit_button support designating buttons as "primary" or "secondary" with the type parameter.

LANGUAGE: python
CODE:
st.button("Primary", type="primary")
st.button("Secondary", type="secondary")

----------------------------------------

TITLE: Setting Upload Limit via Command Line
DESCRIPTION: Configure the maximum file upload size through command line arguments when running the Streamlit application

LANGUAGE: bash
CODE:
streamlit run your_script.py --server.maxUploadSize 200

----------------------------------------

TITLE: Streamlit App Using Direct Supabase Client
DESCRIPTION: Alternative implementation using the Supabase Python client library directly with custom caching.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st
from supabase import create_client, Client

# Initialize connection.
# Uses st.cache_resource to only run once.
@st.cache_resource
def init_connection():
    url = st.secrets["SUPABASE_URL"]
    key = st.secrets["SUPABASE_KEY"]
    return create_client(url, key)

supabase = init_connection()

# Perform query.
# Uses st.cache_data to only rerun when the query changes or after 10 min.
@st.cache_data(ttl=600)
def run_query():
    return supabase.table("mytable").select("*").execute()

rows = run_query()

# Print results.
for row in rows.data:
    st.write(f"{row['name']} has a :{row['pet']}:")

----------------------------------------

TITLE: Displaying Warning Message in Streamlit
DESCRIPTION: Shows how to display a warning message in a Streamlit app using the st.warning() function.

LANGUAGE: python
CODE:
st.warning("Unable to fetch image. Skipping...")

----------------------------------------

TITLE: Referencing Streamlit Page and Navigation APIs
DESCRIPTION: Demonstrates the use of st.Page and st.navigation for defining multipage apps in Streamlit. These APIs provide flexibility in organizing project structure and labeling pages.

LANGUAGE: python
CODE:
st.Page
st.navigation

----------------------------------------

TITLE: Markdown Structure for Authentication Tutorial Page
DESCRIPTION: This snippet shows the markdown structure for the authentication tutorial page, including the title, slug, and main content sections. It demonstrates how to format the page and include reference cards for specific authentication providers.

LANGUAGE: markdown
CODE:
---
title: Authenticate users and personalize your app
slug: /develop/tutorials/authentication
---

# Authenticate users and personalize your app

Streamlit supports user authentication with the OpenID Connect (OIDC) protocol. You can use any OIDC provider. Whether you want to create a social login or manage your enterprise users, Streamlit makes it simple to authenticate your users.

<TileContainer layout="list">
    <RefCard href="/develop/tutorials/authentication/google">
        <h5>Google Auth Platform</h5>
        Google is one of the most popular identity providers for social logins. You can use the Google Auth Platform with any Google account, including personal and organization accounts.
    </RefCard>
    <RefCard href="/develop/tutorials/authentication/microsoft">
        <h5>Microsoft Entra</h5>
        Microsoft is popular for both social and business logins. You can include personal, school, or work accounts in your integration.
    </RefCard>
</TileContainer>

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Requirements file specifying necessary Python packages for GCS integration.

LANGUAGE: bash
CODE:
# requirements.txt
gcsfs==x.x.x
st-files-connection

----------------------------------------

TITLE: Setting Gap Size Between Columns
DESCRIPTION: st.columns supports setting the gap size between columns with the gap keyword parameter.

LANGUAGE: python
CODE:
col1, col2 = st.columns(2, gap="large")

----------------------------------------

TITLE: Customizing Google Sheets Data Retrieval in Streamlit
DESCRIPTION: This Python snippet demonstrates how to customize the data retrieval from Google Sheets using additional parameters. It shows how to specify a worksheet, set cache expiration time, and use pandas read_csv options.

LANGUAGE: python
CODE:
df = conn.read(
    worksheet="Sheet1",
    ttl="10m",
    usecols=[0, 1],
    nrows=3,
)

----------------------------------------

TITLE: Image Cropping in Streamlit
DESCRIPTION: Component for interactive image cropping with customizable settings like real-time updates and aspect ratio.

LANGUAGE: python
CODE:
from streamlit_cropper import st_cropper

st_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)

----------------------------------------

TITLE: Form Container Usage in Streamlit
DESCRIPTION: Demonstrates using forms as containers with direct method calls and flexible submit button placement.

LANGUAGE: python
CODE:
import streamlit as st

animal = st.form('my_animal')

sound = st.selectbox('Sounds like', ['meow','woof','squeak','tweet'])

submit = animal.form_submit_button(f'Say it with {sound}!')
sentence = animal.text_input('Your sentence:', 'Where\'s the tuna?')
say_it = sentence.rstrip('.,!?') + f', {sound}!'
if submit:
    animal.subheader(say_it)
else:
    animal.subheader('&nbsp;')

----------------------------------------

TITLE: Installing Required Packages
DESCRIPTION: Requirements file specifying the necessary Python packages (s3fs and st-files-connection) for AWS S3 integration.

LANGUAGE: bash
CODE:
# requirements.txt
s3fs==x.x.x
st-files-connection

----------------------------------------

TITLE: Demonstrating Widget Parameter Changes in Streamlit
DESCRIPTION: Shows how changing widget parameters affects their statefulness, using sliders with different configurations of default values and keys.

LANGUAGE: python
CODE:
import streamlit as st

cols = st.columns([2, 1, 2])
minimum = cols[0].number_input("Minimum", 1, 5)
maximum = cols[2].number_input("Maximum", 6, 10, 10)

st.slider("No default, no key", minimum, maximum)
st.slider("No default, with key", minimum, maximum, key="a")
st.slider("With default, no key", minimum, maximum, value=5)
st.slider("With default, with key", minimum, maximum, value=5, key="b")

----------------------------------------

TITLE: Checking Streamlit Process Status - Linux/Unix
DESCRIPTION: Command to verify if Streamlit is running on a remote Linux server by checking active processes.

LANGUAGE: bash
CODE:
ps -Al | grep streamlit

----------------------------------------

TITLE: Creating Sample Database Table in Neon
DESCRIPTION: SQL commands to create a sample table 'home' and insert test data with names and pets.

LANGUAGE: sql
CODE:
CREATE TABLE home (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    pet VARCHAR(100)
);

INSERT INTO home (name, pet)
VALUES
    ('Mary', 'dog'),
    ('John', 'cat'),
    ('Robert', 'bird');

----------------------------------------

TITLE: Adding Popovers in Streamlit
DESCRIPTION: Shows how to create popover containers that can be opened and closed, useful for additional settings or information.

LANGUAGE: python
CODE:
with st.popover("Settings"):
  st.checkbox("Show completed")

----------------------------------------

TITLE: Processing Camera Input with TensorFlow in Streamlit (Python)
DESCRIPTION: This example illustrates how to use TensorFlow to decode the image captured by st.camera_input into a 3D uint8 tensor. It shows how to check the type and shape of the resulting tensor.

LANGUAGE: python
CODE:
import streamlit as st
import tensorflow as tf

img_file_buffer = st.camera_input("Take a picture")

if img_file_buffer is not None:
    # To read image file buffer as a 3D uint8 tensor with TensorFlow:
    bytes_data = img_file_buffer.getvalue()
    img_tensor = tf.io.decode_image(bytes_data, channels=3)

    # Check the type of img_tensor:
    # Should output: <class 'tensorflow.python.framework.ops.EagerTensor'>
    st.write(type(img_tensor))

    # Check the shape of img_tensor:
    # Should output shape: (height, width, channels)
    st.write(img_tensor.shape)

----------------------------------------

TITLE: Streamlit Docker Container Configuration
DESCRIPTION: Complete Dockerfile configuration for building a Streamlit application container, including base image selection, dependency installation, and runtime configuration.

LANGUAGE: docker
CODE:
FROM python:3.9-slim

WORKDIR /app

RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    software-properties-common \
    git \
    && rm -rf /var/lib/apt/lists/*

RUN git clone https://github.com/streamlit/streamlit-example.git .

RUN pip3 install -r requirements.txt

EXPOSE 8501

HEALTHCHECK CMD curl --fail http://localhost:8501/_stcore/health

ENTRYPOINT ["streamlit", "run", "streamlit_app.py", "--server.port=8501", "--server.address=0.0.0.0"]

----------------------------------------

TITLE: Preserving Widget Values Between Pages in Streamlit
DESCRIPTION: Demonstrates a technique to save widget values in Session State, allowing them to be preserved when navigating between different pages of a Streamlit app.

LANGUAGE: python
CODE:
import streamlit as st

def store_value(key):
    st.session_state[key] = st.session_state["_"+key]
def load_value(key):
    st.session_state["_"+key] = st.session_state[key]

load_value("my_key")
st.number_input("Number of filters", key="_my_key", on_change=store_value, args=["my_key"])

----------------------------------------

TITLE: Unserializable Data Example
DESCRIPTION: Demonstrates handling of unserializable data in Session State when enforcement is enabled.

LANGUAGE: python
CODE:
import streamlit as st

def unserializable_data():
		return lambda x: x

#👇 results in an exception when enforceSerializableSessionState is on
st.session_state.unserializable = unserializable_data()

----------------------------------------

TITLE: Disabling Websocket Compression in Streamlit
DESCRIPTION: Command to disable websocket compression when server infrastructure strips required headers.

LANGUAGE: bash
CODE:
streamlit run my_app.py --server.enableWebsocketCompression=false

----------------------------------------

TITLE: Installing Required Python Packages
DESCRIPTION: Required Python package dependencies for connecting Streamlit to Neon database.

LANGUAGE: txt
CODE:
streamlit>=1.28
psycopg2-binary>=2.9.6
sqlalchemy>=2.0.0

----------------------------------------

TITLE: Caching UI Components with Model Loading in Streamlit
DESCRIPTION: Demonstrates caching entire UI sections along with model loading, showing how to combine multiple Streamlit commands within a cached function.

LANGUAGE: python
CODE:
@st.cache_resource
def load_model():
    st.header("Data analysis")
    model = torchvision.models.resnet50(weights=ResNet50_Weights.DEFAULT)
    st.success("Loaded model!")
    st.write("Turning on evaluation mode...")
    model.eval()
    st.write("Here's the model:")
    return model

----------------------------------------

TITLE: Implementing Interactive Markdown Preview in Streamlit
DESCRIPTION: Creates an interactive markdown editor with live preview using Streamlit. Uses text_area for input and displays both the rendered markdown and the code needed to reproduce it. Demonstrates the usage of st.markdown for rendering markdown-formatted text.

LANGUAGE: python
CODE:
import streamlit as st

md = st.text_area('Type in your markdown string (without outer quotes)',
                  "Happy Streamlit-ing! :balloon:")

st.code(f"""
import streamlit as st

st.markdown('''{md}''')
""")

st.markdown(md)

----------------------------------------

TITLE: Implementing Interactive Markdown Preview in Streamlit
DESCRIPTION: Creates an interactive markdown editor with live preview using Streamlit. Uses text_area for input and displays both the rendered markdown and the code needed to reproduce it. Demonstrates the usage of st.markdown for rendering markdown-formatted text.

LANGUAGE: python
CODE:
import streamlit as st

md = st.text_area('Type in your markdown string (without outer quotes)',
                  "Happy Streamlit-ing! :balloon:")

st.code(f"""
import streamlit as st

st.markdown('''{md}''')
""")

st.markdown(md)

----------------------------------------

TITLE: Optimized Multiple OIDC Provider Login Using Callbacks
DESCRIPTION: An optimized version of the multiple OIDC provider login flow using callbacks for cleaner code structure.

LANGUAGE: python
CODE:
import streamlit as st

if not st.experimental_user.is_logged_in:
    st.button("Log in with Google", on_click=st.login, args=["google"])
    st.button("Log in with Microsoft", on_click=st.login, args=["microsoft"])
    st.stop()

st.button("Log out", on_click=st.logout)
st.markdown(f"Welcome! {st.experimental_user.name}")

----------------------------------------

TITLE: Basic Requirements.txt Configuration
DESCRIPTION: Simple requirements.txt file example showing how to specify core dependencies without version constraints.

LANGUAGE: none
CODE:
streamlit
pandas
numpy

----------------------------------------

TITLE: Retrieving Filenames for Multiple File Uploads in Streamlit (Python)
DESCRIPTION: This snippet shows how to retrieve filenames for multiple files uploaded using st.file_uploader with accept_multiple_files=True in Streamlit. It iterates through the list of UploadedFile objects and accesses the .name attribute for each file.

LANGUAGE: python
CODE:
import streamlit as st

uploaded_files = st.file_uploader("Upload multiple files", accept_multiple_files=True)

if uploaded_files:
   for uploaded_file in uploaded_files:
       st.write("Filename: ", uploaded_file.name)

----------------------------------------

TITLE: Disabling XSRF Protection in Streamlit
DESCRIPTION: Command to disable XSRF protection for troubleshooting file upload issues in multi-replica setups.

LANGUAGE: bash
CODE:
streamlit run my_app.py --server.enableXsrfProtection=false

----------------------------------------

TITLE: Creating SQL Server Database and Table
DESCRIPTION: SQL commands to create a new database, table, and insert sample data for testing.

LANGUAGE: sql
CODE:
CREATE DATABASE mydb
GO
USE mydb
CREATE TABLE mytable (name varchar(80), pet varchar(80))
INSERT INTO mytable VALUES ('Mary', 'dog'), ('John', 'cat'), ('Robert', 'bird')
GO

----------------------------------------

TITLE: Importing ExperimentalBaseConnection in Python
DESCRIPTION: This snippet shows how to import the deprecated ExperimentalBaseConnection class from Streamlit. It is recommended to use BaseConnection instead.

LANGUAGE: python
CODE:
from streamlit.connections import ExperimentalBaseConnection

----------------------------------------

TITLE: Accessing Parameters of Container Classes in Streamlit Testing
DESCRIPTION: Container classes like ChatMessage and Tab inherit from Block. Their original element parameters can be accessed as properties.

LANGUAGE: Python
CODE:
ChatMessage.avatar  # Accesses the avatar parameter of ChatMessage
Tab.label  # Accesses the label parameter of Tab

----------------------------------------

TITLE: Configuring Multiple OIDC Providers in secrets.toml
DESCRIPTION: Example configuration for multiple OIDC providers (Google Identity and Microsoft Entra ID) in the secrets.toml file for local development.

LANGUAGE: toml
CODE:
[auth]
redirect_uri = "http://localhost:8501/oauth2callback"
cookie_secret = "xxx"

[auth.google]
client_id = "xxx"
client_secret = "xxx"
server_metadata_url = (
    "https://accounts.google.com/.well-known/openid-configuration"
)

[auth.microsoft]
client_id = "xxx"
client_secret = "xxx"
server_metadata_url = (
    "https://login.microsoftonline.com/{tenant}/v2.0/.well-known/openid-configuration"
)

----------------------------------------

TITLE: Google Search Site Query Format
DESCRIPTION: Shows the search query format to check how a Streamlit app appears in Google search results.

LANGUAGE: text
CODE:
site:<your-custom-subdomain>.streamlit.app

----------------------------------------

TITLE: Demonstrating Unserializable Data in Streamlit Session State
DESCRIPTION: This Python code snippet demonstrates how adding unserializable data (a lambda function) to Streamlit's session state will result in an exception when the enforceSerializableSessionState option is enabled.

LANGUAGE: python
CODE:
import streamlit as st

def unserializable_data():
		return lambda x: x

#👇 results in an exception when enforceSerializableSessionState is on
st.session_state.unserializable = unserializable_data()

----------------------------------------

TITLE: Running Streamlit App with Different Database Connections
DESCRIPTION: Bash commands demonstrating how to run a Streamlit app with different database connections using environment variables.

LANGUAGE: bash
CODE:
# connect to local
DB_CONN=local streamlit run streamlit_app.py

# connect to staging
DB_CONN=staging streamlit run streamlit_app.py

----------------------------------------

TITLE: Creating Markdown Link to Anchor in Streamlit
DESCRIPTION: Creates a markdown link that navigates to the previously defined header anchor. The link text is 'Section 1' and points to the anchor #section-1.

LANGUAGE: python
CODE:
st.markdown("[Section 1](#section-1)")

----------------------------------------

TITLE: Creating MongoDB Collection with Sample Data
DESCRIPTION: SQL commands to create a new database 'mydb' and insert sample documents into a collection.

LANGUAGE: sql
CODE:
use mydb
db.mycollection.insertMany([{"name" : "Mary", "pet": "dog"}, {"name" : "John", "pet": "cat"}, {"name" : "Robert", "pet": "bird"}])

----------------------------------------

TITLE: Using Environment Variable for Database Connection Selection
DESCRIPTION: Python code showing how to use an environment variable to select between different database connections.

LANGUAGE: python
CODE:
# streamlit_app.py
import streamlit as st

conn = st.connection("env:DB_CONN", "sql")
df = conn.query("select * from mytable")
# ...

----------------------------------------

TITLE: Importing LineChartColumn from Streamlit
DESCRIPTION: Shows how to import the LineChartColumn class from Streamlit's column_config module. This class is used to configure line chart columns in Streamlit apps.

LANGUAGE: python
CODE:
from streamlit.column_config import LineChartColumn

----------------------------------------

TITLE: Running Streamlit from URL
DESCRIPTION: Example of running a Streamlit application directly from a remote URL, such as a GitHub repository. This allows running scripts hosted on remote servers.

LANGUAGE: bash
CODE:
streamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py

----------------------------------------

TITLE: Setting Custom Page Title in Streamlit
DESCRIPTION: Demonstrates how to set a custom page title for a Streamlit app using st.set_page_config(), which affects the app's meta title in search results and browser tabs.

LANGUAGE: python
CODE:
st.set_page_config(page_title="Traingenerator")

----------------------------------------

TITLE: Setting Custom Page Title in Streamlit App (Python)
DESCRIPTION: This code snippet demonstrates how to use st.set_page_config to set a custom page title, page icon, layout, and initial sidebar state in a Streamlit application. By using this method, the '· Streamlit' suffix is not appended to the title.

LANGUAGE: python
CODE:
import streamlit as st

st.set_page_config(
   page_title="Ex-stream-ly Cool App",
   page_icon="🧊",
   layout="wide",
   initial_sidebar_state="expanded",
)

----------------------------------------

TITLE: Updating Slider Value with Button Click in Streamlit
DESCRIPTION: This code demonstrates how to use a callback function with st.button to update a slider value in Streamlit. It uses session state to store and modify the slider value, ensuring updates occur on every button click.

LANGUAGE: Python
CODE:
# the callback function for the button will add 1 to the
# slider value up to 10
def plus_one():
    if st.session_state["slider"] < 10:
        st.session_state.slider += 1
    else:
        pass
    return

# when creating the button, assign the name of your callback
# function to the on_click parameter
add_one = st.button("Add one to the slider", on_click=plus_one, key="add_one")

# create the slider
slide_val = st.slider("Pick a number", 0, 10, key="slider")

----------------------------------------

TITLE: Adding google-cloud-bigquery to Requirements File
DESCRIPTION: This snippet demonstrates how to add the google-cloud-bigquery package to the requirements.txt file, specifying a pinned version.

LANGUAGE: text
CODE:
# requirements.txt
google-cloud-bigquery==x.x.x

----------------------------------------

TITLE: Running Basic Streamlit Application
DESCRIPTION: Basic command to run a Streamlit application using the streamlit run command. This launches a local Streamlit server and opens the app in the default web browser.

LANGUAGE: bash
CODE:
streamlit run your_script.py

----------------------------------------

TITLE: Using the reset method of ExperimentalBaseConnection in Python
DESCRIPTION: This snippet demonstrates the usage of the reset method in the ExperimentalBaseConnection class. The method is used to reset the connection's internal state.

LANGUAGE: python
CODE:
connection = ExperimentalBaseConnection()
connection.reset()

----------------------------------------

TITLE: Running Streamlit with Custom Arguments
DESCRIPTION: Command syntax for running a Streamlit application with custom script arguments. Arguments must be passed after two dashes to distinguish them from Streamlit's own arguments.

LANGUAGE: bash
CODE:
streamlit run your_script.py [-- script args]

----------------------------------------

TITLE: Running Streamlit Hello App - Bash
DESCRIPTION: Commands to run the Streamlit hello example application

LANGUAGE: bash
CODE:
streamlit hello

# Alternative long-form command
python -m streamlit hello

----------------------------------------

TITLE: Sample Streamlit Application Code
DESCRIPTION: Example Streamlit application that creates an interactive spiral visualization with configurable parameters.

LANGUAGE: python
CODE:
from collections import namedtuple
import altair as alt
import math
import pandas as pd
import streamlit as st

"""
# Welcome to Streamlit!

Edit `/streamlit_app.py` to customize this app to your heart's desire :heart:

If you have any questions, checkout our [documentation](https://docs.streamlit.io) and [community
forums](https://discuss.streamlit.io).

In the meantime, below is an example of what you can do with just a few lines of code:
"""

with st.echo(code_location='below'):
   total_points = st.slider("Number of points in spiral", 1, 5000, 2000)
   num_turns = st.slider("Number of turns in spiral", 1, 100, 9)

   Point = namedtuple('Point', 'x y')
   data = []

   points_per_turn = total_points / num_turns

   for curr_point_num in range(total_points):
      curr_turn, i = divmod(curr_point_num, points_per_turn)
      angle = (curr_turn + 1) * 2 * math.pi * i / points_per_turn
      radius = curr_point_num / total_points
      x = radius * math.cos(angle)
      y = radius * math.sin(angle)
      data.append(Point(x, y))

   st.altair_chart(alt.Chart(pd.DataFrame(data), height=500, width=500)
      .mark_circle(color='#0068c9', opacity=0.5)
      .encode(x='x:Q', y='y:Q'))

----------------------------------------

TITLE: Enhanced Streamlit Hello World with Title
DESCRIPTION: Updated version of the Hello World application using the title method for larger text display

LANGUAGE: python
CODE:
import streamlit as st

st.title("Hello World")

----------------------------------------

TITLE: Version-Specific Requirements.txt Configuration
DESCRIPTION: Advanced requirements.txt example demonstrating version pinning and constraints for dependencies.

LANGUAGE: none
CODE:
streamlit==1.24.1
pandas>2.0
numpy<=1.25.1

----------------------------------------

TITLE: Specifying Python Dependencies
DESCRIPTION: Requirements file entries for installing necessary Python packages (psycopg2-binary and SQLAlchemy) for PostgreSQL connectivity.

LANGUAGE: bash
CODE:
# requirements.txt
psycopg2-binary==x.x.x
sqlalchemy==x.x.x

----------------------------------------

TITLE: Validating Streamlit Installation
DESCRIPTION: Command to verify Streamlit installation by running the built-in Hello application.

LANGUAGE: bash
CODE:
streamlit hello

----------------------------------------

TITLE: Clear Streamlit Cache
DESCRIPTION: Removes all persisted files from the on-disk Streamlit cache storage.

LANGUAGE: bash
CODE:
streamlit cache clear

----------------------------------------

TITLE: Basic Form Implementation with Default Values in Streamlit
DESCRIPTION: Shows a simple form implementation with slider and selectbox inputs, demonstrating how default values work within forms.

LANGUAGE: python
CODE:
import streamlit as st

with st.form("my_form"):
   st.write("Inside the form")
   my_number = st.slider('Pick a number', 1, 10)
   my_color = st.selectbox('Pick a color', ['red','orange','green','blue','violet'])
   st.form_submit_button('Submit my picks')

# This is outside the form
st.write(my_number)
st.write(my_color)

----------------------------------------

TITLE: Creating Hello World App - Python
DESCRIPTION: Simple Python script demonstrating basic Streamlit usage

LANGUAGE: python
CODE:
import streamlit as st

st.write("Hello world")

----------------------------------------

TITLE: Using st.empty() for Out-of-Order Element Insertion in Streamlit (Python)
DESCRIPTION: This code snippet demonstrates how to use st.empty() to create placeholder slots in a Streamlit app, which can be filled later with text or charts. It shows the flexibility of element placement in Streamlit applications.

LANGUAGE: python
CODE:
st.text('This will appear first')
# Appends some text to the app.

my_slot1 = st.empty()
# Appends an empty slot to the app. We'll use this later.

my_slot2 = st.empty()
# Appends another empty slot.

st.text('This will appear last')
# Appends some more text to the app.

my_slot1.text('This will appear second')
# Replaces the first empty slot with a text string.

my_slot2.line_chart(np.random.randn(20, 2))
# Replaces the second empty slot with a chart.

----------------------------------------

TITLE: Setting Page Title with st.set_page_config in Python
DESCRIPTION: Demonstrates how to set a custom page title for a Streamlit app using st.set_page_config(). This title will appear in both the browser tab and social media share previews.

LANGUAGE: python
CODE:
import streamlit as st

st.set_page_config(page_title="My App")

# ... rest of your app

----------------------------------------

TITLE: Configuring SSL Certificates in Streamlit TOML Configuration
DESCRIPTION: This snippet demonstrates how to set the SSL certificate and key file paths in the Streamlit configuration file. It specifies the locations of the certificate chain and private key files for enabling HTTPS support.

LANGUAGE: toml
CODE:
# .streamlit/config.toml

[server]
sslCertFile = '/path/to/certchain.pem'
sslKeyFile = '/path/to/private.key'

----------------------------------------

TITLE: Using st.number_input Widget in Streamlit
DESCRIPTION: A numeric input widget that allows users to enter numbers with configurable step values, min/max bounds, and formatting. This widget is part of Streamlit's core input components.

LANGUAGE: python
CODE:
st.number_input()

----------------------------------------

TITLE: Check Streamlit Version
DESCRIPTION: Displays the currently installed version of Streamlit.

LANGUAGE: bash
CODE:
streamlit version

----------------------------------------

TITLE: Test File for Streamlit App
DESCRIPTION: A pytest test file that simulates user interactions with the Streamlit app and checks the expected output.

LANGUAGE: python
CODE:
"""test_app.py"""
from streamlit.testing.v1 import AppTest

def test_increment_and_add():
    """A user increments the number input, then clicks Add"""
    at = AppTest.from_file("app.py").run()
    at.number_input[0].increment().run()
    at.button[0].click().run()
    assert at.markdown[0].value == "Beans counted: 1"

----------------------------------------

TITLE: Formatting Hello World with Title Style in Streamlit
DESCRIPTION: Modified version of the Hello World app that uses st.title() instead of st.write() to display text in a larger, title format.

LANGUAGE: python
CODE:
import streamlit as st

st.title("Hello World")

----------------------------------------

TITLE: Configuring Supabase Secrets in Streamlit
DESCRIPTION: TOML configuration for storing Supabase credentials in Streamlit's secrets management system.

LANGUAGE: toml
CODE:
# .streamlit/secrets.toml

[connections.supabase]
SUPABASE_URL = "xxxx"
SUPABASE_KEY = "xxxx"

----------------------------------------

TITLE: Markdown Documentation File Structure
DESCRIPTION: Example of front matter and content structure for documentation Markdown files including title, slug, and content formatting.

LANGUAGE: markdown
CODE:
---
title: Create a Component
slug: /develop/concepts/custom-components/create
---

<Note>

This is a **note** that links to our [website](https://docs.streamlit.io/).

</Note>

----------------------------------------

TITLE: Docker Image Build and Run Commands
DESCRIPTION: Commands for building and running the Streamlit Docker container, including port mapping configuration.

LANGUAGE: docker
CODE:
docker build -t streamlit .
docker run -p 8501:8501 streamlit

----------------------------------------

TITLE: Configuring Serializable Session State in Streamlit
DESCRIPTION: This snippet shows how to enable the enforceSerializableSessionState option in Streamlit's configuration file. When set to true, this option only allows pickle-serializable objects in Session State.

LANGUAGE: toml
CODE:
# .streamlit/config.toml
[runner]
enforceSerializableSessionState = true

----------------------------------------

TITLE: View Streamlit CLI Help
DESCRIPTION: Displays all supported Streamlit CLI commands and their usage information.

LANGUAGE: bash
CODE:
streamlit --help

----------------------------------------

TITLE: Basic Class Definition Pattern in Streamlit
DESCRIPTION: Demonstrates how class redefinition can cause issues with instance checking in Streamlit due to script reruns.

LANGUAGE: python
CODE:
# app.py
import streamlit as st

# MyClass gets redefined every time app.py reruns
class MyClass:
    def __init__(self, var1, var2):
        self.var1 = var1
        self.var2 = var2

if "my_instance" not in st.session_state:
  st.session_state.my_instance = MyClass("foo", "bar")

# Displays True on the first run then False on every rerun
st.write(isinstance(st.session_state.my_instance, MyClass))

st.button("Rerun")

----------------------------------------

TITLE: Correct Subprocess Invocation in Streamlit Using sys.executable
DESCRIPTION: The recommended solution using sys.executable to ensure the subprocess runs with the same Python interpreter and environment as the Streamlit application, maintaining access to all installed dependencies.

LANGUAGE: python
CODE:
# streamlit_app.py
import streamlit as st
import subprocess
import sys

subprocess.run([f"{sys.executable}", "script.py"])

----------------------------------------

TITLE: Creating a Custom DuckDB Connection
DESCRIPTION: Python code showing how to create a custom DuckDB connection by extending the ExperimentalBaseConnection class.

LANGUAGE: python
CODE:
from streamlit.connections import ExperimentalBaseConnection
import duckdb

class DuckDBConnection(ExperimentalBaseConnection[duckdb.DuckDBPyConnection])

def _connect(self, **kwargs) -> duckdb.DuckDBPyConnection:
    if 'database' in kwargs:
        db = kwargs.pop('database')
    else:
        db = self._secrets['database']
    return duckdb.connect(database=db, **kwargs)

----------------------------------------

TITLE: Deprecated: Setting Query Parameters in Streamlit
DESCRIPTION: Deprecated method to set query parameters shown in the browser's URL bar.

LANGUAGE: python
CODE:
st.experimental_set_query_params(
  {"show_all"=True, "selected"=["asia", "america"]}
)

----------------------------------------

TITLE: Downgrading Streamlit Version
DESCRIPTION: Command to downgrade Streamlit to a specific version for regression testing.

LANGUAGE: bash
CODE:
pip install --upgrade streamlit==1.0.0

----------------------------------------

TITLE: Form Callbacks in Streamlit
DESCRIPTION: Example of implementing callbacks with forms in Streamlit, showing how to access form widget values through Session State.

LANGUAGE: python
CODE:
def form_callback():
    st.write(st.session_state.my_slider)
    st.write(st.session_state.my_checkbox)

with st.form(key='my_form'):
    slider_input = st.slider('My slider', 0, 10, 5, key='my_slider')
    checkbox_input = st.checkbox('Yes or No', key='my_checkbox')
    submit_button = st.form_submit_button(label='Submit', on_click=form_callback)

----------------------------------------

TITLE: Configuring Streamlit Community Cloud Default Settings
DESCRIPTION: Default configuration settings that are enforced by Community Cloud and will override any contrary settings in the user's config.toml file. These settings control error details, rerun behavior, server settings, and usage statistics collection.

LANGUAGE: toml
CODE:
[client]
showErrorDetails = false

[runner]
fastReruns = true

[server]
runOnSave = true
enableXsrfProtection = true

[browser]
gatherUsageStats = true

----------------------------------------

TITLE: Running Streamlit on Port 80
DESCRIPTION: Command to start Streamlit on port 80, which is commonly exposed by default on many hosts.

LANGUAGE: bash
CODE:
streamlit run my_app.py --server.port=80

----------------------------------------

TITLE: Creating Basic Interactive Streamlit Application - Python
DESCRIPTION: A simple example demonstrating how to create an interactive Streamlit app with a slider input and text output. The app runs on a local web server at http://localhost:8501 when executed.

LANGUAGE: python
CODE:
import streamlit as st
number = st.slider("Pick a number: ", min_value=1, max_value=10)
st.text("Your number is " + str(number))

----------------------------------------

TITLE: Retrieving URL Query Parameters in Streamlit (Deprecated)
DESCRIPTION: Function that returns query parameters from the browser's URL bar in a Streamlit application. This function has been deprecated in version 1.30.0 and should be replaced with st.query_params.

LANGUAGE: python
CODE:
st.experimental_get_query_params()

----------------------------------------

TITLE: Running Streamlit on Custom Port
DESCRIPTION: Command to start Streamlit application on a specific port number for cache testing.

LANGUAGE: bash
CODE:
streamlit run my_app.py --server.port=9876

----------------------------------------

TITLE: Accessing URL Query Parameters in Streamlit
DESCRIPTION: Demonstrates how to access and manipulate query parameters in a Streamlit app's URL using st.query_params. It shows both key and attribute notation for reading and writing parameters.

LANGUAGE: python
CODE:
# You can read query params using key notation
if st.query_params["first_key"] == "1":
    do_something()

# ...or using attribute notation
if st.query_params.second_key == "two":
    do_something_else()

# And you can change a param by just writing to it
st.query_params.first_key = 2  # This gets converted to str automatically

----------------------------------------

TITLE: Streamlit oEmbed URL Format
DESCRIPTION: Example URL format for embedding a Streamlit app using oEmbed integration.

LANGUAGE: javascript
CODE:
https://30days.streamlit.app/

----------------------------------------

TITLE: Increasing Upload Limit for Cloud Deployment
DESCRIPTION: Example configuration to increase the upload limit to 400MB in Streamlit Community Cloud by modifying the .streamlit/config.toml file

LANGUAGE: toml
CODE:
[server]
maxUploadSize = 400

----------------------------------------

TITLE: Simulating Chat Response Stream in Python
DESCRIPTION: Define a function that simulates a streaming chat response by yielding characters with a time delay, used to avoid actual API calls in the tutorial.

LANGUAGE: python
CODE:
def chat_stream(prompt):
    response = f'You said, "{prompt}" ...interesting.'
    for char in response:
        yield char
        time.sleep(0.02)

----------------------------------------

TITLE: Setting Query Parameters in Streamlit (Deprecated)
DESCRIPTION: This code snippet demonstrates the usage of st.experimental_set_query_params to set query parameters in the browser's URL bar. However, this function is deprecated as of Streamlit version 1.30.0. Users are advised to use st.query_params instead.

LANGUAGE: python
CODE:
streamlit.experimental_set_query_params

----------------------------------------

TITLE: Upgrading Streamlit Package
DESCRIPTION: Commands to upgrade Streamlit to the latest version and verify the installed version.

LANGUAGE: bash
CODE:
pip install --upgrade streamlit
streamlit version

----------------------------------------

TITLE: Caching Complex UI Elements in Streamlit
DESCRIPTION: Example showing how to cache entire UI sections including headers, charts, and dataframes using st.cache_data decorator.

LANGUAGE: python
CODE:
@st.cache_data
def show_data():
    st.header("Data analysis")
    data = api.get(...)
    st.success("Fetched data from API!")
    st.write("Here is a plot of the data:")
    st.line_chart(data)
    st.write("And here is the raw data:")
    st.dataframe(data)

----------------------------------------

TITLE: Storing Secrets in TOML File
DESCRIPTION: Store sensitive credentials in a .streamlit/secrets.toml file for local development. This file should never be committed to the repository and its contents should be pasted into the Advanced settings dialog when deploying the app.

LANGUAGE: toml
CODE:
.streamlit/secrets.toml

----------------------------------------

TITLE: Creating Header with Anchor in Streamlit
DESCRIPTION: Creates a header text in Streamlit that automatically generates an anchor point. The header text will be accessible via URL using #section-1.

LANGUAGE: python
CODE:
st.header("Section 1")

----------------------------------------

TITLE: Combining and visualizing selected data with Streamlit charts
DESCRIPTION: Process selected rows to create combined activity data, then display comparisons using bar and line charts if rows are selected.

LANGUAGE: python
CODE:
activity_df = {}
for person in people:
    activity_df[df.iloc[person]["name"]] = df.iloc[person]["activity"]
activity_df = pd.DataFrame(activity_df)

daily_activity_df = {}
for person in people:
    daily_activity_df[df.iloc[person]["name"]] = df.iloc[person]["daily_activity"]
daily_activity_df = pd.DataFrame(daily_activity_df)

if len(people) > 0:
    st.header("Daily activity comparison")
    st.bar_chart(daily_activity_df)
    st.header("Yearly activity comparison")
    st.line_chart(activity_df)
else:
    st.markdown("No members selected.")

----------------------------------------

TITLE: Serializable Session State Configuration
DESCRIPTION: Configuration example for enabling serializable Session State enforcement in Streamlit using TOML configuration.

LANGUAGE: toml
CODE:
# .streamlit/config.toml
[runner]
enforceSerializableSessionState = true

----------------------------------------

TITLE: Retrieving Filename for Single File Upload in Streamlit (Python)
DESCRIPTION: This snippet demonstrates how to retrieve the filename of a single file uploaded using st.file_uploader in Streamlit. It uses the .name attribute of the UploadedFile object to get the filename.

LANGUAGE: python
CODE:
import streamlit as st

uploaded_file = st.file_uploader("Upload a file")

if uploaded_file:
   st.write("Filename: ", uploaded_file.name)

----------------------------------------

TITLE: Deprecated: Getting Query Parameters in Streamlit
DESCRIPTION: Deprecated method to get query parameters shown in the browser's URL bar.

LANGUAGE: python
CODE:
param_dict = st.experimental_get_query_params()

----------------------------------------

TITLE: Basic Streamlit App with Standard Imports
DESCRIPTION: Example Streamlit application showing common imports that don't require additional dependencies since pandas and numpy are installed as Streamlit dependencies, while math and random are built into Python.

LANGUAGE: python
CODE:
import streamlit as st
import pandas as pd
import numpy as np
import math
import random

st.write("Hi!")

----------------------------------------

TITLE: Setting PYTHONPATH for Streamlit Module Watching
DESCRIPTION: Command to add external module paths to PYTHONPATH before running a Streamlit application. This enables Streamlit to detect and reload when changes occur in imported modules outside the main app directory.

LANGUAGE: bash
CODE:
export PYTHONPATH=$PYTHONPATH:/path/to/module
streamlit run your_script.py

----------------------------------------

TITLE: Running Streamlit App from Subdirectory
DESCRIPTION: Example of running a Streamlit app from a subdirectory path.

LANGUAGE: bash
CODE:
streamlit run your_subdirectory/your_app.py

----------------------------------------

TITLE: Basic Subprocess Invocation in Streamlit (Problematic Approach)
DESCRIPTION: This approach demonstrates the problematic way of invoking a subprocess, which may lead to dependency issues since it uses the system Python path rather than the virtual environment's Python.

LANGUAGE: python
CODE:
# streamlit_app.py
import streamlit as st
import subprocess

subprocess.run(["python", "script.py"])

----------------------------------------

TITLE: Manipulating Query Parameters in Streamlit
DESCRIPTION: Setting and clearing query parameters that are shown in the browser's URL bar.

LANGUAGE: python
CODE:
st.query_params[key] = value
st.query_params.clear()

----------------------------------------

TITLE: Running Streamlit App - Bash
DESCRIPTION: Commands to run a custom Streamlit application

LANGUAGE: bash
CODE:
streamlit run app.py

# Alternative long-form command
python -m streamlit run app.py

----------------------------------------

TITLE: Creating a Deprecated Snowpark Connection in Streamlit
DESCRIPTION: Demonstrates the usage of the deprecated SnowparkConnection for connecting to Snowflake. This snippet is included for reference but should not be used in new projects.

LANGUAGE: python
CODE:
conn = st.connection("snowpark")

----------------------------------------

TITLE: Implementing Forms with Callbacks in Streamlit
DESCRIPTION: Shows how to create a form with time input and number input, using callbacks to update a counter and timestamp in Session State.

LANGUAGE: python
CODE:
import streamlit as st
import datetime

st.title('Counter Example')
if 'count' not in st.session_state:
    st.session_state.count = 0
    st.session_state.last_updated = datetime.time(0,0)

def update_counter():
    st.session_state.count += st.session_state.increment_value
    st.session_state.last_updated = st.session_state.update_time

with st.form(key='my_form'):
    st.time_input(label='Enter the time', value=datetime.datetime.now().time(), key='update_time')
    st.number_input('Enter a value', value=0, step=1, key='increment_value')
    submit = st.form_submit_button(label='Update', on_click=update_counter)

st.write('Current Count = ', st.session_state.count)
st.write('Last Updated = ', st.session_state.last_updated)

----------------------------------------

TITLE: Running Remote Streamlit App
DESCRIPTION: Example of running a Streamlit app from a public GitHub repository.

LANGUAGE: bash
CODE:
streamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py

----------------------------------------

TITLE: Setting Global Upload Limit in TOML Config
DESCRIPTION: Configure the maximum file upload size in the global Streamlit configuration file located at ~/.streamlit/config.toml or %userprofile%/.streamlit/config.toml

LANGUAGE: toml
CODE:
[server]
maxUploadSize = 200

----------------------------------------

TITLE: Caching Data with Streamlit Decorator
DESCRIPTION: Function decorator to cache data-returning functions. This is useful for expensive computations or web data fetching to improve performance.

LANGUAGE: python
CODE:
@st.cache_data
def long_function(param1, param2):
  # Perform expensive computation here or
  # fetch data from the web here
  return data

----------------------------------------

TITLE: Creating Virtual Environment - Bash
DESCRIPTION: Command to create a new Python virtual environment using venv

LANGUAGE: bash
CODE:
python -m venv .venv

----------------------------------------

TITLE: Creating a Snowflake Connection in Streamlit
DESCRIPTION: Shows how to create a connection to Snowflake using Streamlit's built-in SnowflakeConnection. This snippet demonstrates the simplicity of connecting to Snowflake databases in Streamlit apps.

LANGUAGE: python
CODE:
conn = st.connection('snowflake')

----------------------------------------

TITLE: Using Deprecated Experimental Connection in Streamlit
DESCRIPTION: Example of the deprecated st.experimental_connection API usage. This API was used for creating data connections in Streamlit apps but has been replaced by st.connection as of version 1.28.0.

LANGUAGE: python
CODE:
st.experimental_connection

----------------------------------------

TITLE: Installing Tagged Version in requirements.txt
DESCRIPTION: Syntax for installing a specific tagged version of a GitHub package in a requirements.txt file.

LANGUAGE: bash
CODE:
git+https://github.com/SomePackage.git@v1.1.0#egg=SomePackage

----------------------------------------

TITLE: Loading and Caching Uber Pickup Data with Streamlit
DESCRIPTION: Defines a function to load Uber pickup data from a CSV file, using Streamlit's caching decorator to improve performance.

LANGUAGE: python
CODE:
@st.cache_data
def load_data(nrows):
    data = pd.read_csv(DATA_URL, nrows=nrows)
    lowercase = lambda x: str(x).lower()
    data.rename(lowercase, axis='columns', inplace=True)
    data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])
    return data

data_load_state = st.text('Loading data...')
data = load_data(10000)
data_load_state.text("Done! (using st.cache_data)")

----------------------------------------

TITLE: Plotting Uber Pickups on Interactive Map with Streamlit
DESCRIPTION: Uses Streamlit's map function to plot Uber pickup locations on an interactive map of New York City.

LANGUAGE: python
CODE:
hour_to_filter = st.slider('hour', 0, 23, 17)  # min: 0h, max: 23h, default: 17h
filtered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]
st.subheader(f'Map of all pickups at {hour_to_filter}:00')
st.map(filtered_data)

----------------------------------------

TITLE: Caching NLP Model with Static Elements in Streamlit
DESCRIPTION: Shows how to cache an NLP model while including static Streamlit UI elements that will be replayed on subsequent runs.

LANGUAGE: python
CODE:
from transformers import pipeline

@st.cache_resource
def load_model():
    model = pipeline("sentiment-analysis")
    st.success("Loaded NLP model from Hugging Face!")  # 👈 Show a success message
    return model

----------------------------------------

TITLE: Creating a Sidebar in Streamlit
DESCRIPTION: Add elements to a sidebar by prefixing Streamlit commands with st.sidebar.

LANGUAGE: Python
CODE:
st.sidebar.write("This appears in the sidebar")

----------------------------------------

TITLE: Testing Multipage Streamlit App - Second Page
DESCRIPTION: This code snippet represents the second page of a multipage Streamlit app. It checks the 'magic word' in the session state and displays a balloon emoji if it matches 'Balloons'.

LANGUAGE: python
CODE:
"""second.py"""
import streamlit as st

st.session_state.magic_word = st.session_state.get("magic_word", "Streamlit")

if st.session_state.magic_word == "Balloons":
    st.markdown(":balloon:")

----------------------------------------

TITLE: Configuring secrets in TOML format for Streamlit
DESCRIPTION: Example of how to structure a secrets.toml file for use with st.secrets in Streamlit. It shows how to define simple key-value pairs, lists, and nested structures.

LANGUAGE: toml
CODE:
OpenAI_key = "your OpenAI key"
whitelist = ["sally", "bob", "joe"]

[database]
user = "your username"
password = "your password"

----------------------------------------

TITLE: Creating DataFrame Demo Page
DESCRIPTION: Implementation of the DataFrame demo page showing data visualization using Pandas and Altair charts.

LANGUAGE: python
CODE:
import streamlit as st
import pandas as pd
import altair as alt
from urllib.error import URLError

st.set_page_config(page_title="DataFrame Demo", page_icon="📊")

st.markdown("# DataFrame Demo")
st.sidebar.header("DataFrame Demo")
st.write(
    """This demo shows how to use `st.write` to visualize Pandas DataFrames.
(Data courtesy of the [UN Data Explorer](http://data.un.org/Explorer.aspx)."""
)

@st.cache_data
def get_UN_data():
    AWS_BUCKET_URL = "http://streamlit-demo-data.s3-us-west-2.amazonaws.com"
    df = pd.read_csv(AWS_BUCKET_URL + "/agri.csv.gz")
    return df.set_index("Region")

# ... [rest of the DataFrame implementation]

----------------------------------------

TITLE: Initializing Streamlit App for Uber Pickups Analysis
DESCRIPTION: Sets up the basic structure of the Streamlit app, importing necessary libraries and adding a title.

LANGUAGE: python
CODE:
import streamlit as st
import pandas as pd
import numpy as np

st.title('Uber pickups in NYC')

----------------------------------------

TITLE: Programmatic Page Navigation in Streamlit
DESCRIPTION: Programmatically navigates to a specified page in a Streamlit application.

LANGUAGE: python
CODE:
st.switch_page("pages/my_page.py")

----------------------------------------

TITLE: Specifying Python Version for Streamlit Project
DESCRIPTION: This snippet defines the Python version requirement for a Streamlit project. It specifies version 3.8, which is likely the minimum or recommended version for running the Streamlit application.

LANGUAGE: plaintext
CODE:
3.8

----------------------------------------

TITLE: Installing pytest for Streamlit Testing
DESCRIPTION: Command to install pytest, which is required for running the example tests in this guide.

LANGUAGE: bash
CODE:
pip install pytest

----------------------------------------

TITLE: Markdown Cookie Consent Message
DESCRIPTION: A markdown formatted cookie consent message informing users about website cookie usage and providing privacy policy link.

LANGUAGE: markdown
CODE:
# Hello there 👋

Thanks for stopping by! We use cookies to help us understand how you interact with our website.

By clicking "Accept all", you consent to our use of cookies. For more information, please see our [privacy policy](www.streamlit.io/privacy-policy).

----------------------------------------

TITLE: Data Display with st.write()
DESCRIPTION: Shows how to use st.write() to display text and data frames in a Streamlit app.

LANGUAGE: python
CODE:
import streamlit as st
import pandas as pd

st.write("Here's our first attempt at using data to create a table:")
st.write(pd.DataFrame({
    'first column': [1, 2, 3, 4],
    'second column': [10, 20, 30, 40]
}))

----------------------------------------

TITLE: Basic Data Display with Magic Commands
DESCRIPTION: Demonstrates using Streamlit's magic commands to display data frames without explicit write commands.

LANGUAGE: python
CODE:
"""
# My first app
Here's our first attempt at using data to create a table:
"""

import streamlit as st
import pandas as pd
df = pd.DataFrame({
  'first column': [1, 2, 3, 4],
  'second column': [10, 20, 30, 40]
})

df

----------------------------------------

TITLE: Testing Streamlit Login Page with AppTest
DESCRIPTION: This code snippet contains test cases for the Streamlit login page. It uses the AppTest framework to simulate user interactions and verify the app's behavior in different scenarios.

LANGUAGE: python
CODE:
from streamlit.testing.v1 import AppTest

def test_no_interaction():
    at = AppTest.from_file("app.py")
    at.secrets["password"] = "streamlit"
    at.run()
    assert at.session_state["status"] == "unverified"
    assert len(at.text_input) == 1
    assert len(at.warning) == 0
    assert len(at.success) == 0
    assert len(at.button) == 0
    assert at.text_input[0].value == ""

def test_incorrect_password():
    at = AppTest.from_file("app.py")
    at.secrets["password"] = "streamlit"
    at.run()
    at.text_input[0].input("balloon").run()
    assert at.session_state["status"] == "incorrect"
    assert len(at.text_input) == 1
    assert len(at.warning) == 1
    assert len(at.success) == 0
    assert len(at.button) == 0
    assert at.text_input[0].value == ""
    assert "Incorrect password" in at.warning[0].value

def test_correct_password():
    at = AppTest.from_file("app.py")
    at.secrets["password"] = "streamlit"
    at.run()
    at.text_input[0].input("streamlit").run()
    assert at.session_state["status"] == "verified"
    assert len(at.text_input) == 0
    assert len(at.warning) == 0
    assert len(at.success) == 1
    assert len(at.button) == 1
    assert "Login successful" in at.success[0].value
    assert at.button[0].label == "Log out"

def test_log_out():
    at = AppTest.from_file("app.py")
    at.secrets["password"] = "streamlit"
    at.session_state["status"] = "verified"
    at.run()
    at.button[0].click().run()
    assert at.session_state["status"] == "unverified"
    assert len(at.text_input) == 1
    assert len(at.warning) == 0
    assert len(at.success) == 0
    assert len(at.button) == 0
    assert at.text_input[0].value == ""

----------------------------------------

TITLE: Specifying Streamlit Version Requirement
DESCRIPTION: Defines the minimum required version of Streamlit library as 1.43.0 or higher. This is typically used in requirements.txt files for Python project dependency management.

LANGUAGE: text
CODE:
streamlit>=1.43.0

----------------------------------------

TITLE: Installing Pre-release Streamlit Features in Python
DESCRIPTION: Demonstrates how to uninstall the stable version of Streamlit and install the nightly (pre-release) version for access to experimental features.

LANGUAGE: python
CODE:
pip uninstall streamlit
pip install streamlit-nightly --upgrade

----------------------------------------

TITLE: Defining Streamlit Version Requirement
DESCRIPTION: Specifies the minimum required version of Streamlit package that must be installed. Uses the greater than or equal to operator to ensure compatibility with version 1.43.0 and above.

LANGUAGE: plaintext
CODE:
streamlit>=1.43.0

----------------------------------------

TITLE: Creating Secondary Page Content in Streamlit
DESCRIPTION: These code snippets demonstrate how to create content for additional pages in a Streamlit app, using markdown for both the main content and sidebar.

LANGUAGE: python
CODE:
import streamlit as st

st.markdown("# Page 2 ❄️")
st.sidebar.markdown("# Page 2 ❄️")

LANGUAGE: python
CODE:
import streamlit as st

st.markdown("# Page 3 🎉")
st.sidebar.markdown("# Page 3 🎉")

----------------------------------------

TITLE: Creating Main Page Content in Streamlit
DESCRIPTION: This code snippet shows how to create content for the main page of a Streamlit app using markdown for both the main content and sidebar.

LANGUAGE: python
CODE:
import streamlit as st

# Main page content
st.markdown("# Main page 🎈")
st.sidebar.markdown("# Main page 🎈")

----------------------------------------

TITLE: Configuring GitHub Actions for Streamlit App Testing
DESCRIPTION: This YAML configuration sets up automated testing for a Streamlit app using GitHub Actions. It defines a workflow that runs on push and pull requests to the main branch.

LANGUAGE: yaml
CODE:
# .github/workflows/streamlit-app.yml
name: Streamlit app

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  streamlit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: streamlit/streamlit-app-action@v0.0.3
        with:
          app-path: app.py

----------------------------------------

TITLE: Defining Python Package Dependencies
DESCRIPTION: Requirements file specifying exact versions of Python packages needed for a Streamlit application. Includes data manipulation, visualization, and computer vision libraries.

LANGUAGE: txt
CODE:
pandas==1.5.3
numpy==1.23.5
altair==4.2.0
pydeck==0.8.0
opencv-python-headless==4.8.1.78
streamlit>=1.43.0

----------------------------------------

TITLE: Creating Daily Sales Fragment with Rerun Logic
DESCRIPTION: Fragment function that displays daily sales data and triggers full script rerun when month changes. Uses st.fragment decorator and implements conditional rerun logic.

LANGUAGE: python
CODE:
@st.fragment
def show_daily_sales(data):
    time.sleep(1)
    with st.container(height=100):
        selected_date = st.date_input(
            "Pick a day ",
            value=date(2023, 1, 1),
            min_value=date(2023, 1, 1),
            max_value=date(2023, 12, 31),
            key="selected_date",
        )

    if "previous_date" not in st.session_state:
        st.session_state.previous_date = selected_date
    previous_date = st.session_state.previous_date
    st.session_state.previous_date = selected_date
    is_new_month = selected_date.replace(day=1) != previous_date.replace(day=1)
    if is_new_month:
        st.rerun()

    with st.container(height=510):
        st.header(f"Best sellers, {selected_date:%m/%d/%y}")
        top_ten = data.loc[selected_date].sort_values(ascending=False)[0:10]
        cols = st.columns([1, 4])
        cols[0].dataframe(top_ten)
        cols[1].bar_chart(top_ten)

    with st.container(height=510):
        st.header(f"Worst sellers, {selected_date:%m/%d/%y}")
        bottom_ten = data.loc[selected_date].sort_values()[0:10]
        cols = st.columns([1, 4])
        cols[0].dataframe(bottom_ten)
        cols[1].bar_chart(bottom_ten)

----------------------------------------

TITLE: Specifying Streamlit Version Requirement
DESCRIPTION: This line specifies that the project requires Streamlit version 1.43.0 or higher. It is typically used in a requirements.txt file to define project dependencies.

LANGUAGE: plain text
CODE:
streamlit>=1.43.0

----------------------------------------

TITLE: Running Streamlit Hello Example
DESCRIPTION: Commands to launch the Streamlit demo application to verify installation

LANGUAGE: bash
CODE:
streamlit hello

LANGUAGE: bash
CODE:
python -m streamlit hello

----------------------------------------

TITLE: Admin Page Implementation
DESCRIPTION: Example of an admin page stub showing role-based content

LANGUAGE: python
CODE:
import streamlit as st

st.header("Admin 1")
st.write(f"You are logged in as {st.session_state.role}.")

----------------------------------------

TITLE: Configuring Toolbar Mode Options
DESCRIPTION: Shows the available configuration options for customizing how the app menu appears to users through the client.toolbarMode setting. Options include developer, viewer, minimal and auto modes.

LANGUAGE: plaintext
CODE:
"developer" - Show developer options to all viewers\n"viewer" - Hide developer options from all viewers\n"minimal" - Show only externally set options\n"auto" - Default mode that shows developer options based on access context

----------------------------------------

TITLE: Listing Dependencies for Streamlit Project
DESCRIPTION: This snippet specifies the required packages for a Streamlit project. It includes Faker for generating fake data and Streamlit version 1.43.0 or higher as the main framework.

LANGUAGE: plaintext
CODE:
Faker
streamlit>=1.43.0

----------------------------------------

TITLE: Implementing Custom Navigation Menu Logic
DESCRIPTION: Core menu implementation with role-based authentication and navigation controls

LANGUAGE: python
CODE:
import streamlit as st

def authenticated_menu():
    st.sidebar.page_link("app.py", label="Switch accounts")
    st.sidebar.page_link("pages/user.py", label="Your profile")
    if st.session_state.role in ["admin", "super-admin"]:
        st.sidebar.page_link("pages/admin.py", label="Manage users")
        st.sidebar.page_link(
            "pages/super-admin.py",
            label="Manage admin access",
            disabled=st.session_state.role != "super-admin",
        )

def unauthenticated_menu():
    st.sidebar.page_link("app.py", label="Log in")

def menu():
    if "role" not in st.session_state or st.session_state.role is None:
        unauthenticated_menu()
        return
    authenticated_menu()

def menu_with_redirect():
    if "role" not in st.session_state or st.session_state.role is None:
        st.switch_page("app.py")
    menu()

----------------------------------------

TITLE: Specifying Streamlit Version Requirement
DESCRIPTION: This line defines the minimum required version of Streamlit for the project. It uses the greater than or equal to operator to ensure compatibility with Streamlit version 1.43.0 and above.

LANGUAGE: plaintext
CODE:
streamlit>=1.43.0

----------------------------------------

TITLE: Markdown Documentation for Streamlit Authentication
DESCRIPTION: Structured markdown documentation explaining the authentication flows for Streamlit Community Cloud platform, including sign-in methods via Google, GitHub, and email, plus sign-out instructions.

LANGUAGE: markdown
CODE:
# Sign in & sign out

After you've created your account, you can sign in to share.streamlit.io as described by the following options.

## Sign in with Google

1. Click "Continue to sign-in."
1. Click "Continue with Google."
1. Enter your Google account credentials and follow the prompts.

## Sign in with GitHub

1. Click "Continue to sign-in."
1. Click "Continue with GitHub."
1. Enter your GitHub credentials and follow the prompts.

## Sign in with Email

1. Click "Continue to sign-in."
1. In the "Email" field, enter your email address.
1. Click "Continue."
1. Go to your email inbox, and copy your one-time, six-digit code.
1. Return to the authentication page, and enter your code.

## Sign out of your account

From your workspace, click on your workspace name in the upper-left corner. Click "Sign out."

----------------------------------------

TITLE: Running the Streamlit Application
DESCRIPTION: Command to launch the Streamlit application locally

LANGUAGE: bash
CODE:
streamlit run streamlit_app.py

----------------------------------------

TITLE: Creating Interactive Map with Form Controls in Python Streamlit
DESCRIPTION: Demonstrates creating a map visualization with form controls for color, opacity and size parameters for two teams. The form prevents script rerun until submission while allowing dynamic map updates.

LANGUAGE: python
CODE:
import streamlit as st
import pandas as pd
import numpy as np

def get_data():
    df = pd.DataFrame({
        "lat": np.random.randn(200) / 50 + 37.76,
        "lon": np.random.randn(200) / 50 + -122.4,
        "team": ['A','B']*100
    })
    return df

if st.button('Generate new points'):
    st.session_state.df = get_data()
if 'df' not in st.session_state:
    st.session_state.df = get_data()
df = st.session_state.df

with st.form("my_form"):
    header = st.columns([1,2,2])
    header[0].subheader('Color')
    header[1].subheader('Opacity')
    header[2].subheader('Size')

    row1 = st.columns([1,2,2])
    colorA = row1[0].color_picker('Team A', '#0000FF')
    opacityA = row1[1].slider('A opacity', 20, 100, 50, label_visibility='hidden')
    sizeA = row1[2].slider('A size', 50, 200, 100, step=10, label_visibility='hidden')

    row2 = st.columns([1,2,2])
    colorB = row2[0].color_picker('Team B', '#FF0000')
    opacityB = row2[1].slider('B opacity', 20, 100, 50, label_visibility='hidden')
    sizeB = row2[2].slider('B size', 50, 200, 100, step=10, label_visibility='hidden')

    st.form_submit_button('Update map')

alphaA = int(opacityA*255/100)
alphaB = int(opacityB*255/100)

df['color'] = np.where(df.team=='A',colorA+f'{alphaA:02x}',colorB+f'{alphaB:02x}')
df['size'] = np.where(df.team=='A',sizeA, sizeB)

st.map(df, size='size', color='color')

----------------------------------------

TITLE: Specifying Streamlit Version Requirement
DESCRIPTION: This line specifies that the project requires Streamlit version 1.43.0 or higher. It's typically used in a requirements.txt file or similar dependency specification file for Python projects.

LANGUAGE: plaintext
CODE:
streamlit>=1.43.0

----------------------------------------

TITLE: Main App Page Implementation
DESCRIPTION: Main application file with role selection and session state management

LANGUAGE: python
CODE:
import streamlit as st
from menu import menu

if "role" not in st.session_state:
    st.session_state.role = None

st.session_state._role = st.session_state.role

def set_role():
    st.session_state.role = st.session_state._role

st.selectbox(
    "Select your role:",
    [None, "user", "admin", "super-admin"],
    key="_role",
    on_change=set_role,
)
menu()

----------------------------------------

TITLE: Configuring Python Dependencies for Streamlit Project
DESCRIPTION: Defines required Python packages and their versions for a Streamlit application. Includes core Streamlit framework, database connectors (SQLAlchemy, DuckDB), cloud storage interfaces (S3FS, GCSFS), and Snowflake integration.

LANGUAGE: plaintext
CODE:
streamlit>=1.43.0
toml
sqlalchemy==1.4
duckdb
git+https://github.com/streamlit/files-connection
s3fs
gcsfs
snowflake-snowpark-python[pandas]

----------------------------------------

TITLE: Updating Streamlit App Title
DESCRIPTION: Code diff showing how to modify the title of a Streamlit application by updating the st.title() call

LANGUAGE: diff
CODE:
-st.title("🎈 My new app")
+st.title("🎈 My new Streamlit app")

----------------------------------------

TITLE: Defining Python Dependencies
DESCRIPTION: Requirements.txt file contents listing the required Python packages for the application

LANGUAGE: python
CODE:
streamlit
openai
langchain

----------------------------------------

TITLE: Implementing Basic Login Flow in Streamlit
DESCRIPTION: A simple Python script demonstrating how to implement a basic login flow in a Streamlit app using st.login(), st.logout(), and st.experimental_user.

LANGUAGE: python
CODE:
import streamlit as st

if not st.experimental_user.is_logged_in:
    if st.button("Log in with Google"):
        st.login()
    st.stop()

if st.button("Log out"):
    st.logout()
st.markdown(f"Welcome! {st.experimental_user.name}")

----------------------------------------

TITLE: Defining Python Package Dependencies for Streamlit Project
DESCRIPTION: This snippet lists the required Python packages for a Streamlit project. It specifies Streamlit version 1.43.0 or higher and includes the webvtt-py package for working with WebVTT files.

LANGUAGE: plaintext
CODE:
streamlit>=1.43.0
webvtt-py

----------------------------------------

TITLE: Importing and Configuring Streamlit Experimental Connection Demo
DESCRIPTION: This snippet demonstrates the initial setup for a Streamlit app using experimental_connection. It includes necessary imports and a comment describing the app's requirements for cloud execution.

LANGUAGE: python
CODE:
# st.experimental_connection Demo

Demo app for st.experimental_connection. Requires secrets for SQL, S3, GCS to run in Cloud. Can also take Snowpark secrets.

----------------------------------------

TITLE: Specifying Python Package Dependencies for Streamlit Project
DESCRIPTION: This snippet defines the required Python packages and their versions for a Streamlit project. It includes pandas for data manipulation, numpy for numerical operations, altair and pydeck for data visualization, and streamlit itself for creating web applications.

LANGUAGE: Text
CODE:
pandas==1.5.3
numpy==1.23.5
altair==4.2.0
pydeck==0.8.0
streamlit>=1.43.0

----------------------------------------

TITLE: Executing Streamlit Run Command from Repository Root
DESCRIPTION: Demonstrates how to properly execute the 'streamlit run' command from the root directory of your repository to ensure consistent path interpretation between local development and Community Cloud deployment.

LANGUAGE: bash
CODE:
cd your_repository
streamlit run subdirectory/your_app.py

----------------------------------------

TITLE: Setting Light Theme Base in TOML
DESCRIPTION: Simple configuration to use the light theme as a base for custom theming using the base option in config.toml.

LANGUAGE: toml
CODE:
[theme]
base="light"

----------------------------------------

TITLE: Configuring OIDC Connection in Streamlit's secrets.toml
DESCRIPTION: Example configuration for a single OIDC provider (Google Identity) in the secrets.toml file for local development.

LANGUAGE: toml
CODE:
[auth]
redirect_uri = "http://localhost:8501/oauth2callback"
cookie_secret = "xxx"
client_id = "xxx"
client_secret = "xxx"
server_metadata_url = (
    "https://accounts.google.com/.well-known/openid-configuration"
)

----------------------------------------

TITLE: Connecting to SQL Server via Command Line
DESCRIPTION: Command to connect to a local SQL Server instance using sqlcmd utility with server authentication.

LANGUAGE: bash
CODE:
sqlcmd -S localhost -U SA -P '<YourPassword>'

----------------------------------------

TITLE: Specifying Python Package Dependencies for Streamlit Project
DESCRIPTION: This snippet lists the required Python packages for a Streamlit project. It specifies a minimum version for Streamlit and includes the LangChain OpenAI integration package.

LANGUAGE: Plain Text
CODE:
streamlit>=1.43.0
langchain-openai

----------------------------------------

TITLE: Main Application Setup with Role-Based Navigation
DESCRIPTION: Main application file implementing dynamic navigation with role-based access control, session state management, and page routing

LANGUAGE: python
CODE:
import streamlit as st

if "role" not in st.session_state:
    st.session_state.role = None

ROLES = [None, "Requester", "Responder", "Admin"]

def login():
    st.header("Log in")
    role = st.selectbox("Choose your role", ROLES)
    if st.button("Log in"):
        st.session_state.role = role
        st.rerun()

def logout():
    st.session_state.role = None
    st.rerun()

----------------------------------------

TITLE: Resetting SnowparkConnection Cache
DESCRIPTION: The reset method clears any cached queries associated with the connection instance. This is useful when you need to force fresh data retrieval.

LANGUAGE: python
CODE:
st.connections.SnowparkConnection.reset

----------------------------------------

TITLE: Configuring Snowflake Connection with Inline Arguments
DESCRIPTION: Python code demonstrating how to configure a Snowflake connection using inline arguments without a secrets file.

LANGUAGE: python
CODE:
# streamlit_app.py

import streamlit as st

# secrets.toml is not needed
conn = st.connection(
    "snowflake",
    "sql",
    url = "snowflake://<user_login_name>@<account_identifier>/",
    connect_args = dict(
        authenticator = "externalbrowser",
        warehouse = "xxx",
        role = "xxx",
    )
)
# ...

----------------------------------------

TITLE: Example Error Message for OS-Specific Package
DESCRIPTION: This snippet demonstrates the error message received when trying to install a Windows-specific package (pywin32) on a Linux-based Streamlit Community Cloud environment.

LANGUAGE: plaintext
CODE:
ERROR: No matching distribution found for pywin32

----------------------------------------

TITLE: Specifying Streamlit Version Requirement
DESCRIPTION: Defines the minimum required version of Streamlit that must be installed for the project to function. Uses the greater than or equal to operator to ensure compatibility with version 1.43.0 and above.

LANGUAGE: plaintext
CODE:
streamlit>=1.43.0

----------------------------------------

TITLE: Installing Required Streamlit Version
DESCRIPTION: Specifies the minimum Streamlit version required for the tutorial

LANGUAGE: bash
CODE:
streamlit>=1.36.0

----------------------------------------

TITLE: Custom Color Scale with Streamlit and Native Plotly Themes
DESCRIPTION: This example shows how to create a Plotly scatter plot with a custom color scale and display it using both the Streamlit theme and the native Plotly theme. It demonstrates that custom configurations are preserved even when using the Streamlit theme.

LANGUAGE: python
CODE:
import plotly.express as px
import streamlit as st

st.subheader("Define a custom colorscale")
df = px.data.iris()
fig = px.scatter(
    df,
    x="sepal_width",
    y="sepal_length",
    color="sepal_length",
    color_continuous_scale="reds",
)

tab1, tab2 = st.tabs(["Streamlit theme (default)", "Plotly native theme"])
with tab1:
    st.plotly_chart(fig, theme="streamlit", use_container_width=True)
with tab2:
    st.plotly_chart(fig, theme=None, use_container_width=True)

----------------------------------------

TITLE: Building Frontend Release for Streamlit Component
DESCRIPTION: Command to create a release build of the frontend code, generating the build directory with compiled frontend assets.

LANGUAGE: bash
CODE:
cd frontend
npm run build

----------------------------------------

TITLE: Installing libGL Dependency via packages.txt
DESCRIPTION: Creates a packages.txt file to install the libgl1 apt-get dependency required for OpenCV functionality in Streamlit Community Cloud deployments.

LANGUAGE: plaintext
CODE:
libgl1

----------------------------------------

TITLE: Specifying Streamlit Version Requirement
DESCRIPTION: This snippet defines the minimum required version of Streamlit for the project. It uses the greater than or equal to operator to ensure compatibility with version 1.43.0 and any newer versions.

LANGUAGE: plaintext
CODE:
streamlit>=1.43.0

----------------------------------------

TITLE: Handling User Input and Generating Responses in Streamlit Chat
DESCRIPTION: Process user input, display it in the chat, generate a response, and add a feedback widget for the new response.

LANGUAGE: python
CODE:
if prompt := st.chat_input("Say something"):
    with st.chat_message("user"):
        st.write(prompt)
    st.session_state.history.append({"role": "user", "content": prompt})
    with st.chat_message("assistant"):
        response = st.write_stream(chat_stream(prompt))
        st.feedback(
            "thumbs",
            key=f"feedback_{len(st.session_state.history)}",
            on_change=save_feedback,
            args=[len(st.session_state.history)],
        )
    st.session_state.history.append({"role": "assistant", "content": response})

----------------------------------------

TITLE: Installing Component from Test PyPI
DESCRIPTION: Command to install the published component package from Test PyPI for verification.

LANGUAGE: bash
CODE:
python -m pip install --index-url https://test.pypi.org/simple/ --no-deps example-pkg-YOUR-USERNAME-HERE

----------------------------------------

TITLE: Specifying Git Branch in requirements.txt
DESCRIPTION: Syntax for installing a specific branch of a GitHub package in a requirements.txt file.

LANGUAGE: bash
CODE:
git+https://github.com/SomePackage.git@main#egg=SomePackage

----------------------------------------

TITLE: Markdown Documentation Structure for Streamlit Development
DESCRIPTION: Markdown structure for the development documentation landing page of Streamlit, containing frontmatter and navigation links using InlineCallout components.

LANGUAGE: markdown
CODE:
---
title: Develop
slug: /develop
---

# Develop

Get all the information you need to build beautiful, performant web apps with Streamlit!

<InlineCalloutContainer>
    <InlineCallout
        color="indigo-70"
        icon="book"
        bold="Concepts."
        href="/develop/concepts"
    >Learn how Streamlit works with in-depth guides to our execution model and features.</InlineCallout>
    <InlineCallout
        color="indigo-70"
        icon="list"
        bold="API reference."
        href="/develop/api-reference"
    >Learn about our API with function definitions and examples.</InlineCallout>
    <InlineCallout
        color="indigo-70"
        icon="auto_awesome"
        bold="Tutorials."
        href="/develop/tutorials"
    >Follow step-by-step instructions to build example apps and useful snippets.</InlineCallout>
    <InlineCallout
        color="indigo-70"
        icon="bolt"
        bold="Quick references."
        href="/develop/quick-reference"
    >Check out our quick references for easy access to convenient information like our changelog, cheat sheet, pre-release features, and roadmap.</InlineCallout>
</InlineCalloutContainer>

----------------------------------------

TITLE: Displaying Chat Messages with Streamlit
DESCRIPTION: Demonstrates how to use st.chat_message to display a chat message container with text and a chart.

LANGUAGE: python
CODE:
import streamlit as st
import numpy as np

with st.chat_message("assistant"):
    st.write("Hello human")
    st.bar_chart(np.random.randn(30, 3))

----------------------------------------

TITLE: Configuring Streamlit Secrets for TiDB Connection with PyMySQL (TOML)
DESCRIPTION: TOML configuration for storing TiDB connection details using PyMySQL driver in Streamlit secrets file. Includes additional SSL configuration.

LANGUAGE: toml
CODE:
# .streamlit/secrets.toml

[connections.tidb]
dialect = "mysql"
driver = "pymysql"
host = "<TiDB_cluster_host>"
port = 4000
database = "pets"
username = "<TiDB_cluster_user>"
password = "<TiDB_cluster_password>"
create_engine_kwargs = { connect_args = { ssl = { ca = "<path_to_CA_store>" }}}

----------------------------------------

TITLE: Using boolean values with @st.experimental_memo's persist parameter
DESCRIPTION: The persist parameter of @st.experimental_memo now accepts boolean values.

LANGUAGE: python
CODE:
@st.experimental_memo(persist=True)
def my_memoized_function():
    # Function implementation

----------------------------------------

TITLE: Configuring Robot Crawling Rules for Streamlit Project
DESCRIPTION: This snippet defines the rules for web robots crawling the Streamlit project. It allows access to all areas except the /admin/ directory, which is disallowed for all user agents.

LANGUAGE: plaintext
CODE:
User-agent: *
Disallow: /admin/

----------------------------------------

TITLE: Random Data Generation Function
DESCRIPTION: Function to generate random time series data with timestamps for demonstration purposes.

LANGUAGE: python
CODE:
def get_recent_data(last_timestamp):
    """Generate and return data from last timestamp to now, at most 60 seconds."""
    now = datetime.now()
    if now - last_timestamp > timedelta(seconds=60):
        last_timestamp = now - timedelta(seconds=60)
    sample_time = timedelta(seconds=0.5)  # time between data points
    next_timestamp = last_timestamp + sample_time
    timestamps = np.arange(next_timestamp, now, sample_time)
    sample_values = np.random.randn(len(timestamps), 2)

    data = pd.DataFrame(sample_values, index=timestamps, columns=["A", "B"])
    return data

----------------------------------------

TITLE: Specifying Python Package Dependencies for Streamlit Project
DESCRIPTION: This snippet lists the required Python packages and their versions for a Streamlit project. It includes Streamlit 1.43.0 or higher, vega_datasets (no specific version), Altair 4.2.0, and Plotly 5.13.0.

LANGUAGE: Plain Text
CODE:
streamlit>=1.43.0
vega_datasets
altair==4.2.0
plotly==5.13.0

----------------------------------------

TITLE: Response Validation Function
DESCRIPTION: Implements validation logic to split responses into sentences and check for minimum word count requirements

LANGUAGE: python
CODE:
def validate(response):
    response_sentences = response.split(". ")
    response_sentences = [
        sentence.strip(". ") + "."
        for sentence in response_sentences
        if sentence.strip(". ") != ""
    ]
    validation_list = [
        True if sentence.count(" ") > 4 else False for sentence in response_sentences
    ]
    return response_sentences, validation_list

----------------------------------------

TITLE: Ubuntu Development Environment Setup
DESCRIPTION: Commands for setting up a complete development environment on Ubuntu including package repositories and system dependencies.

LANGUAGE: bash
CODE:
# Set up the Yarn repo
$ curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
$ echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list

$ sudo apt-get update

# Install Pyenv for testing multiple Python versions
$ sudo apt install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
xz-utils tk-dev libffi-dev liblzma-dev python-openssl mysql-client libmysqlclient-dev unixodbc-dev
$ curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash

# Install some other deps
$ sudo apt install graphviz python3-distutils pre-commit

# Install Yarn, pip, Protobuf, npm
$ sudo apt install yarn npm python-pip protobuf-compiler libgconf-2-4

----------------------------------------

TITLE: Displaying Supported Versions Table in Markdown
DESCRIPTION: This snippet shows a markdown table listing the supported versions of Streamlit. It indicates that versions 1.11.1 and above are supported.

LANGUAGE: markdown
CODE:
| Version   | Supported |
| --------- | --------- |
| >= 1.11.1 | ✅        |

----------------------------------------

TITLE: Accessing Secrets in Streamlit
DESCRIPTION: Shows how to access secrets stored in a local TOML file using Streamlit's secrets management. This snippet demonstrates retrieving a secret key for use in an application.

LANGUAGE: python
CODE:
key = st.secrets["OpenAI_key"]

----------------------------------------

TITLE: Configuring Column Display in Streamlit Tables
DESCRIPTION: Use st.column_config to customize the display and editing behavior of columns in dataframes and data editors. This example configures a number column with a minimum value and currency formatting.

LANGUAGE: python
CODE:
st.column_config.NumberColumn("Price (in USD)", min_value=0, format="$%d")

----------------------------------------

TITLE: Python Package Dependencies List
DESCRIPTION: List of Python packages and their version constraints required for a Streamlit project. Includes data manipulation libraries like pandas and numpy, visualization libraries like plotly and bokeh, and additional utilities like Faker and OpenAI.

LANGUAGE: plaintext
CODE:
pandas
plotly
bokeh==2.4.3
graphviz
requests
matplotlib
numpy<2
scipy
altair>=5.0.0
pydeck
Faker
openai
vega_datasets
streamlit>=1.43.0

----------------------------------------

TITLE: Generating Pandas Profiling Reports in Streamlit
DESCRIPTION: Use the streamlit-pandas-profiling component to generate and display comprehensive data profiling reports in a Streamlit app. This example reads a CSV file and generates a profile report.

LANGUAGE: python
CODE:
df = pd.read_csv("https://storage.googleapis.com/tf-datasets/titanic/train.csv")
pr = df.profile_report()

st_profile_report(pr)

----------------------------------------

TITLE: Installing Latest Streamlit Version Using pip
DESCRIPTION: Command to upgrade Streamlit to the latest version using pip package manager

LANGUAGE: bash
CODE:
pip install --upgrade streamlit

----------------------------------------

TITLE: Capturing Image Click Coordinates in Streamlit
DESCRIPTION: Use the streamlit-image-coordinates component to get the coordinates of user clicks on an image in a Streamlit app. This example displays an image and returns the click coordinates.

LANGUAGE: python
CODE:
from streamlit_image_coordinates import streamlit_image_coordinates
value = streamlit_image_coordinates("https://placekitten.com/200/300")

st.write(value)

----------------------------------------

TITLE: Setting up Node.js with NVM
DESCRIPTION: Instructions for installing Node.js using NVM (Node Version Manager) and enabling Corepack for package management.

LANGUAGE: bash
CODE:
# Install node
nvm install node

corepack enable

----------------------------------------

TITLE: Rendering Warning Icon in Markdown
DESCRIPTION: This snippet demonstrates how to render a warning icon using inline HTML and CSS within a Markdown document. It uses material icons and custom styling to display a warning symbol.

LANGUAGE: markdown
CODE:
<i style={{ verticalAlign: "-.25em", color: "#ff8700" }} className={{ class: "material-icons-sharp" }}>warning</i>

----------------------------------------

TITLE: Configuring Selectbox Column in Streamlit
DESCRIPTION: Implements a selectbox column with predefined options.

LANGUAGE: python
CODE:
SelectboxColumn("App Category", options=["🤖 LLM", "📈 Data Viz"])

----------------------------------------

TITLE: Installing Base Dependencies on MacOS
DESCRIPTION: Commands for installing required development tools and dependencies on MacOS including Homebrew packages and Node.js setup.

LANGUAGE: bash
CODE:
# Some Apple dev tools (developer.apple.com/downloads)
$ xcode-select --install

# Install Homebrew
$ /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

# Install the Protobuf compiler, graphviz, database, and virtual environment
$ brew install protobuf graphviz gawk mysql mysql-client pkg-config unixodbc postgresql pre-commit

----------------------------------------

TITLE: Using st.code Function in Streamlit (Python)
DESCRIPTION: The st.code function is used to display a code block in Streamlit applications. It supports optional syntax highlighting to enhance readability. This function is part of Streamlit's text-related API for presenting code snippets within the app interface.

LANGUAGE: python
CODE:
streamlit.code

----------------------------------------

TITLE: Converting User Information to Dictionary in Streamlit
DESCRIPTION: The to_dict() method converts the user information to a dictionary. This can be useful for accessing all user attributes or for serialization purposes.

LANGUAGE: python
CODE:
import streamlit as st

user_dict = st.experimental_user.to_dict()
st.write(user_dict)