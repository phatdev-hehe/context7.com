TITLE: Initializing SvelteKit Project with NPM
DESCRIPTION: Commands to create, set up, and start a new SvelteKit project. Creates a new project directory, installs dependencies, and launches the development server.

LANGUAGE: bash
CODE:
npx sv create myapp
cd myapp
npm install
npm run dev

----------------------------------------

TITLE: Declaring Reactive State with $state in Svelte 5
DESCRIPTION: Demonstrates how to use the $state rune to create reactive state in a Svelte component. The example shows a button that increments a count variable when clicked.

LANGUAGE: svelte
CODE:
<script>
	let count = $state(0);
</script>

<button onclick={() => count++}>
	clicks: {count}
</button>

----------------------------------------

TITLE: Creating Reactive State with $state in Svelte
DESCRIPTION: This snippet demonstrates how to create a reactive state variable 'count' and use it in a button click handler. The UI automatically updates when the state changes.

LANGUAGE: svelte
CODE:
<script>
	let count = $state(0);
</script>

<button onclick={() => count++}>
	clicks: {count}
</button>

----------------------------------------

TITLE: Creating Basic Svelte Component with Button
DESCRIPTION: Demonstrates a simple Svelte component structure including script logic, HTML markup, and component-scoped styling. Shows how to create an interactive button with a click handler and custom styling.

LANGUAGE: svelte
CODE:
<!--- file: App.svelte --->
<script>
	function greet() {
		alert('Welcome to Svelte!');
	}
</script>

<button onclick={greet}>click me</button>

<style>
	button {
		font-size: 2em;
	}
</style>

----------------------------------------

TITLE: Deep State Reactivity with Arrays and Objects in Svelte
DESCRIPTION: This example shows how to create a deeply reactive state proxy for an array of objects. Modifying properties of individual items triggers UI updates.

LANGUAGE: javascript
CODE:
let todos = $state([
	{
		done: false,
		text: 'add more todos'
	}
]);

LANGUAGE: javascript
CODE:
todos[0].done = !todos[0].done;

LANGUAGE: javascript
CODE:
todos.push({
	done: false,
	text: 'eat lunch'
});

----------------------------------------

TITLE: Creating and Using a Writable Store in Svelte
DESCRIPTION: Demonstrates how to create a writable store, subscribe to it, and update its value using the set and update methods.

LANGUAGE: javascript
CODE:
/// file: store.js
import { writable } from 'svelte/store';

const count = writable(0);

count.subscribe((value) => {
	console.log(value);
}); // logs '0'

count.set(1); // logs '1'

count.update((n) => n + 1); // logs '2'

----------------------------------------

TITLE: Declaring Props in Svelte Components
DESCRIPTION: Demonstrates how to declare props using the $props rune in Svelte. This snippet shows basic prop declaration, default values, and rest syntax for capturing all props.

LANGUAGE: svelte
CODE:
<script>
	let { foo, bar, baz } = $props();

	// Values that are passed in as props
	// are immediately available
	console.log({ foo, bar, baz });
</script>

LANGUAGE: svelte
CODE:
<script>
	let { foo = 'optional default initial value' } = $props();
</script>

LANGUAGE: svelte
CODE:
<script>
	let { a, b, c, ...everythingElse } = $props();
</script>

----------------------------------------

TITLE: Basic Svelte Component Structure
DESCRIPTION: Demonstrates the fundamental structure of a .svelte component file with module script, instance script, markup, and style sections

LANGUAGE: svelte
CODE:
<script module>
	// module-level logic goes here
	// (you will rarely use this)
</script>

<script>
	// instance-level logic goes here
</script>

<!-- markup (zero or more items) goes here -->

<style>
	/* styles go here */
</style>

----------------------------------------

TITLE: Basic Component and Tag Usage in Svelte
DESCRIPTION: Demonstrates how to import and use components alongside HTML elements in Svelte.

LANGUAGE: svelte
CODE:
<script>
	import Widget from './Widget.svelte';
</script>

<div>
	<Widget />
</div>

----------------------------------------

TITLE: HTML Element Attributes in Svelte
DESCRIPTION: Shows basic HTML attribute usage in Svelte components.

LANGUAGE: svelte
CODE:
<div class="foo">
	<button disabled>can't touch this</button>
</div>

----------------------------------------

TITLE: Initializing Derived State in Svelte
DESCRIPTION: Demonstrates how to create derived state using the $derived rune. The example shows a count variable and a derived doubled value that updates when count changes.

LANGUAGE: svelte
CODE:
<script>
	let count = $state(0);
	let doubled = $derived(count * 2);
</script>

<button onclick={() => count++}>
	{doubled}
</button>

<p>{count} doubled is {doubled}</p>

----------------------------------------

TITLE: Fetching Data with Built-in Fetch Method in Svelte
DESCRIPTION: Demonstrates how to use the built-in fetch method to retrieve data from an API endpoint in a Svelte component. The response is stored in a reactive state variable.

LANGUAGE: svelte
CODE:
<script>
	let response = $state();
	fetch('/api/data').then(async (r) => (response = r.json()));
</script>

----------------------------------------

TITLE: Receiving Props in a Svelte Component
DESCRIPTION: Shows how to receive props in a Svelte component using the $props rune.

LANGUAGE: svelte
CODE:
<script>
	let props = $props();
</script>

<p>this component is {props.adjective}</p>

----------------------------------------

TITLE: Basic Store Usage in Svelte
DESCRIPTION: Demonstrates how to use a writable store in a Svelte component, including subscribing to the store, setting its value, and using the $ prefix for reactive access.

LANGUAGE: svelte
CODE:
<script>
	import { writable } from 'svelte/store';

	const count = writable(0);
	console.log($count); // logs 0

	count.set(1);
	console.log($count); // logs 1

	$count = 2;
	console.log($count); // logs 2
</script>

----------------------------------------

TITLE: Basic TypeScript Usage in Svelte Component
DESCRIPTION: Demonstrates basic TypeScript usage within a Svelte component using script lang="ts" attribute. Shows type annotations for variables and event handlers.

LANGUAGE: svelte
CODE:
<script lang="ts">
	let name: string = 'world';

	function greet(name: string) {
		alert(`Hello, ${name}!`);
	}
</script>

<button onclick={(e: Event) => greet(e.target.innerText)}>
	{name as string}
</button>

----------------------------------------

TITLE: Basic Input Value Binding in Svelte
DESCRIPTION: Demonstrates basic two-way data binding between an input element and a variable using bind:value directive.

LANGUAGE: svelte
CODE:
<script>
	let message = $state('hello');
</script>

<input bind:value={message} />
<p>{message}</p>

----------------------------------------

TITLE: Mounting a Svelte Component
DESCRIPTION: Demonstrates how to use the mount function to instantiate and mount a Svelte component to a specific DOM element. It shows how to specify the target element and pass props to the component.

LANGUAGE: javascript
CODE:
import { mount } from 'svelte';
import App from './App.svelte';

const app = mount(App, {
	target: document.querySelector('#app'),
	props: { some: 'property' }
});

----------------------------------------

TITLE: Basic #each Block Usage in Svelte
DESCRIPTION: Demonstrates how to use the #each block to iterate over an array of items and render a list in Svelte.

LANGUAGE: svelte
CODE:
<h1>Shopping list</h1>
<ul>
	{#each items as item}
		<li>{item.name} x {item.qty}</li>
	{/each}
</ul>

----------------------------------------

TITLE: Applying Global Styles in Svelte
DESCRIPTION: Shows how to apply global styles in Svelte using the :global(...) modifier. This allows styles to affect elements outside the component.

LANGUAGE: html
CODE:
<style>
	:global(body) {
		background-color: #ff3e00;
		color: white;
	}
</style>

----------------------------------------

TITLE: Basic {#if} Block Structure in Svelte
DESCRIPTION: Demonstrates the basic syntax for an {#if} block in Svelte. This structure is used for simple conditional rendering based on a single expression.

LANGUAGE: svelte
CODE:
{#if expression}...{/if}

----------------------------------------

TITLE: Creating and Running a SvelteKit Application
DESCRIPTION: Commands to create a new SvelteKit application, install dependencies, and start the development server. This process sets up a basic Svelte project structure and prepares it for development.

LANGUAGE: bash
CODE:
npx sv create my-app
cd my-app
npm install
npm run dev

----------------------------------------

TITLE: Simple Conditional Rendering in Svelte
DESCRIPTION: Demonstrates a basic usage of the {#if} block to conditionally render a paragraph based on a specific condition. The condition checks if the 'answer' variable is equal to 42.

LANGUAGE: svelte
CODE:
{#if answer === 42}
	<p>what was the question?</p>
{/if}

----------------------------------------

TITLE: Using onMount in Svelte 5
DESCRIPTION: Demonstrates how to use the onMount function to run code when a component is mounted to the DOM. It also shows how to return a cleanup function.

LANGUAGE: svelte
CODE:
<script>
	import { onMount } from 'svelte';

	onMount(() => {
		console.log('the component has mounted');
	});
</script>

LANGUAGE: svelte
CODE:
<script>
	import { onMount } from 'svelte';

	onMount(() => {
		const interval = setInterval(() => {
			console.log('beep');
		}, 1000);

		return () => clearInterval(interval);
	});
</script>

----------------------------------------

TITLE: Indexed #each Block in Svelte
DESCRIPTION: Shows how to include an index in the #each block iteration, similar to array.map() callback.

LANGUAGE: svelte
CODE:
{#each items as item, i}
	<li>{i + 1}: {item.name} x {item.qty}</li>
{/each}

----------------------------------------

TITLE: #each Block with Else Clause in Svelte
DESCRIPTION: Demonstrates how to use an else clause in an #each block to handle empty lists.

LANGUAGE: svelte
CODE:
{#each todos as todo}
	<p>{todo.text}</p>
{:else}
	<p>No tasks today!</p>
{/each}

----------------------------------------

TITLE: Function Bindings in Svelte
DESCRIPTION: Demonstrates how to use function bindings for validation and transformation of bound values.

LANGUAGE: svelte
CODE:
<input bind:value={
	() => value,
	(v) => value = v.toLowerCase()}
/>

----------------------------------------

TITLE: Each Block with Destructuring Patterns
DESCRIPTION: Examples of using destructuring and rest patterns in each blocks for more flexible data access.

LANGUAGE: svelte
CODE:
{#each items as { id, name, qty }, i (id)}
	<li>{i + 1}: {name} x {qty}</li>
{/each}

{#each objects as { id, ...rest }}
	<li><span>{id}</span><MyComponent {...rest} /></li>
{/each}

{#each items as [id, ...rest]}
	<li><span>{id}</span><MyComponent values={rest} /></li>
{/each}

----------------------------------------

TITLE: Event Handling in Svelte
DESCRIPTION: Example of handling DOM events in Svelte components.

LANGUAGE: svelte
CODE:
<button onclick={() => console.log('clicked')}>click me</button>

----------------------------------------

TITLE: Basic Canvas Drawing with $effect in Svelte
DESCRIPTION: Demonstrates using $effect to draw on a canvas element in response to state changes. Shows how the effect automatically tracks changes to color and size variables.

LANGUAGE: svelte
CODE:
<script>
	let size = $state(50);
	let color = $state('#ff3e00');

	let canvas;

	$effect(() => {
		const context = canvas.getContext('2d');
		context.clearRect(0, 0, canvas.width, canvas.height);

		// this will re-run whenever `color` or `size` change
		context.fillStyle = color;
		context.fillRect(0, 0, size, size);
	});
</script>

<canvas bind:this={canvas} width="100" height="100" />

----------------------------------------

TITLE: Using $props.id() in Svelte
DESCRIPTION: Shows how to use the $props.id() rune to generate unique IDs for component instances, useful for linking elements via attributes.

LANGUAGE: svelte
CODE:
<script>
	const uid = $props.id();
</script>

<form>
	<label for="{uid}-firstname">First Name: </label>
	<input id="{uid}-firstname" type="text" />

	<label for="{uid}-lastname">Last Name: </label>
	<input id="{uid}-lastname" type="text" />
</form>

----------------------------------------

TITLE: Using the Readonly Helper in Svelte Stores
DESCRIPTION: Demonstrates how to use the readonly helper function to create a read-only version of a writable store.

LANGUAGE: javascript
CODE:
import { readonly, writable } from 'svelte/store';

const writableStore = writable(1);
const readableStore = readonly(writableStore);

readableStore.subscribe(console.log);

writableStore.set(2); // console: 2
// @errors: 2339
readableStore.set(2); // ERROR

----------------------------------------

TITLE: Overriding Derived Values in Svelte
DESCRIPTION: Demonstrates how to temporarily override derived values for optimistic UI updates. The example shows a like button that immediately updates the UI before the server request completes.

LANGUAGE: svelte
CODE:
<script>
	let { post, like } = $props();

	let likes = $derived(post.likes);

	async function onclick() {
		// increment the `likes` count immediately...
		likes += 1;

		// and tell the server, which will eventually update `post`
		try {
			await like();
		} catch {
			// failed! roll back the change
			likes -= 1;
		}
	}
</script>

<button {onclick}>🧡 {likes}</button>

----------------------------------------

TITLE: Migrating Component Instantiation in Svelte 5
DESCRIPTION: Shows how to update from Svelte 4's class-based component instantiation to Svelte 5's functional approach using mount.

LANGUAGE: javascript
CODE:
import { mount } from 'svelte';
import App from './App.svelte'

const app = mount(App, { target: document.getElementById("app") });

export default app;

----------------------------------------

TITLE: Scoping Component Styles in Svelte
DESCRIPTION: Demonstrates how to scope styles to a specific component in Svelte using the <style> tag. The styles defined here will only apply to elements in this component.

LANGUAGE: html
CODE:
<style>
	p {
		color: purple;
		font-family: 'Comic Sans MS', cursive;
		font-size: 2em;
	}
</style>

<p>This is a paragraph.</p>

----------------------------------------

TITLE: Setting Context in Svelte Parent Component
DESCRIPTION: Demonstrates how to set context in a parent Svelte component using the setContext function.

LANGUAGE: svelte
CODE:
<script>
	import { setContext } from 'svelte';

	setContext('my-context', 'hello from Parent.svelte');
</script>

----------------------------------------

TITLE: Implementing SEO Elements with Svelte Head
DESCRIPTION: Demonstrates how to add SEO-related elements like title and meta description using the <svelte:head> component. This component must be used at the top level of your component and cannot be nested inside blocks or elements.

LANGUAGE: svelte
CODE:
<svelte:head>
	<title>Hello world!</title>
	<meta name="description" content="This is where the description goes for SEO" />
</svelte:head>

----------------------------------------

TITLE: Keyed #each Block in Svelte
DESCRIPTION: Illustrates how to use a key expression in #each blocks for efficient list diffing when data changes.

LANGUAGE: svelte
CODE:
{#each items as item (item.id)}
	<li>{item.name} x {item.qty}</li>
{/each}

<!-- or with additional index value -->
{#each items as item, i (item.id)}
	<li>{i + 1}: {item.name} x {item.qty}</li>
{/each}

----------------------------------------

TITLE: Implementing Fade Transition in Svelte
DESCRIPTION: This snippet demonstrates how to use the built-in fade transition in Svelte. It imports the fade function from 'svelte/transition' and applies it to a div element that toggles visibility based on a state variable.

LANGUAGE: svelte
CODE:
<script>
	import { fade } from 'svelte/transition';

	let visible = $state(false);
</script>

<button onclick={() => visible = !visible}>toggle</button>

{#if visible}
	<div transition:fade>fades in and out</div>
{/if}

----------------------------------------

TITLE: Adding Event Listeners to Window in Svelte
DESCRIPTION: Demonstrates how to add event listeners to the window object using the <svelte:window> element. This approach ensures proper cleanup when the component is destroyed and handles server-side rendering scenarios.

LANGUAGE: svelte
CODE:
<svelte:window onevent={handler} />

----------------------------------------

TITLE: Implementing Type-Safe Context in Svelte
DESCRIPTION: Demonstrates a pattern for creating type-safe context in Svelte using helper functions to wrap setContext and getContext calls.

LANGUAGE: javascript
CODE:
import { getContext, setContext } from 'svelte';

let key = {};

/** @param {User} user */
export function setUserContext(user) {
	setContext(key, user);
}

export function getUserContext() {
	return /** @type {User} */ (getContext(key));
}

----------------------------------------

TITLE: Basic $inspect Usage in Svelte Component
DESCRIPTION: Demonstrates basic usage of $inspect rune for logging reactive state changes in count and message variables. The rune re-runs whenever tracked values change, with deep reactivity tracking.

LANGUAGE: svelte
CODE:
<script>
	let count = $state(0);
	let message = $state('hello');

	$inspect(count, message); // will console.log when `count` or `message` change
</script>

<button onclick={() => count++}>Increment</button>
<input bind:value={message} />

----------------------------------------

TITLE: Defining Local Constants in Svelte Each Block
DESCRIPTION: Demonstrates how to use {@const} to create a local constant within an {#each} block. The example calculates and stores the area of boxes using box dimensions. The constant is scoped to the block where it's defined.

LANGUAGE: svelte
CODE:
{#each boxes as box}
	{@const area = box.width * box.height}
	{box.width} * {box.height} = {area}
{/each}

----------------------------------------

TITLE: Basic Svelte Action Implementation
DESCRIPTION: Demonstrates how to create a basic action in Svelte using the use: directive and $effect for setup and teardown logic.

LANGUAGE: svelte
CODE:
<script>
	/** @type {import('svelte/action').Action} */
	function myaction(node) {
		// the node has been mounted in the DOM

		$effect(() => {
			// setup goes here

			return () => {
				// teardown goes here
			};
		});
	}
</script>

<div use:myaction>...</div>

----------------------------------------

TITLE: Using $derived.by for Complex Derivations in Svelte
DESCRIPTION: Shows how to use $derived.by for more complex derivations that don't fit in a single expression. The example calculates the total of an array of numbers.

LANGUAGE: svelte
CODE:
<script>
	let numbers = $state([1, 2, 3]);
	let total = $derived.by(() => {
		let total = 0;
		for (const n of numbers) {
			total += n;
		}
		return total;
	});
</script>

<button onclick={() => numbers.push(numbers.length + 1)}>
	{numbers.join(' + ')} = {total}
</button>

----------------------------------------

TITLE: Applying Global Styles with :global {...} Block in Svelte
DESCRIPTION: This snippet demonstrates how to use the :global {...} block to apply styles globally to groups of selectors in Svelte. It includes examples for styling all divs and paragraphs in the application, as well as nested selectors.

LANGUAGE: svelte
CODE:
<style>
	:global {
		/* applies to every <div> in your application */
		div { ... }

		/* applies to every <p> in your application */
		p { ... }
	}

	.a :global {
		/* applies to every `.b .c .d` element, in any component,
		   that is inside an `.a` element in this component */
		.b .c .d {...}
	}
</style>

----------------------------------------

TITLE: Basic Animation Directive Usage in Svelte
DESCRIPTION: Demonstrates how to use the animate directive with a built-in flip animation on elements within a keyed each block.

LANGUAGE: svelte
CODE:
{#each list as item, index (item)}
	<li animate:flip>{item}</li>
{/each}

----------------------------------------

TITLE: Generic Props in Svelte Components
DESCRIPTION: Shows how to use generic types with props in Svelte components using the generics attribute.

LANGUAGE: svelte
CODE:
<script lang="ts" generics="Item extends { text: string }">
	interface Props {
		items: Item[];
		select(item: Item): void;
	}

	let { items, select }: Props = $props();
</script>

{#each items as item}
	<button onclick={() => select(item)}>
		{item.text}
	</button>
{/each}

----------------------------------------

TITLE: Async Dependencies in $effect
DESCRIPTION: Illustrates how $effect handles asynchronous dependencies differently from synchronous ones. Only color changes trigger updates, while size changes are not tracked in async context.

LANGUAGE: typescript
CODE:
$effect(() => {
	const context = canvas.getContext('2d');
	context.clearRect(0, 0, canvas.width, canvas.height);

	// this will re-run whenever `color` changes...
	context.fillStyle = color;

	setTimeout(() => {
		// ...but not when `size` changes
		context.fillRect(0, 0, size, size);
	}, 0);
});

----------------------------------------

TITLE: Converting Side Effects in Svelte 5
DESCRIPTION: Illustrates the migration from Svelte 4's $: reactive statements for side effects to Svelte 5's $effect rune.

LANGUAGE: svelte
CODE:
<script>
	let count = $state(0);

	$effect(() => {
		if (count > 5) {
			alert('Count is too high!');
		}
	});
</script>

----------------------------------------

TITLE: Creating a Bindable Prop in Svelte
DESCRIPTION: This snippet demonstrates how to create a bindable prop in a Svelte component using the $bindable rune. It creates a FancyInput component with a bindable 'value' prop and applies custom styling to the input element.

LANGUAGE: svelte
CODE:
<script>
	let { value = $bindable(), ...props } = $props();
</script>

<input bind:value={value} {...props} />

<style>
	input {
		font-family: 'Comic Sans MS';
		color: deeppink;
	}
</style>

----------------------------------------

TITLE: Binding Window Properties in Svelte
DESCRIPTION: Shows how to bind to window properties using the <svelte:window> element. This allows for reactive updates when window properties change.

LANGUAGE: svelte
CODE:
<svelte:window bind:prop={value} />

----------------------------------------

TITLE: Initializing Svelte Key Block
DESCRIPTION: Demonstrates the basic syntax for a Svelte key block. The key block destroys and recreates its contents when the value of the expression changes.

LANGUAGE: svelte
CODE:
{#key expression}...{/key}

----------------------------------------

TITLE: Updating Event Dispatcher Types in TypeScript
DESCRIPTION: Demonstrates the stricter typing for createEventDispatcher in Svelte 4, showing how to specify optional, required, and no-argument events.

LANGUAGE: typescript
CODE:
import { createEventDispatcher } from 'svelte';

const dispatch = createEventDispatcher<{
	optional: number | null;
	required: string;
	noArgument: null;
}>();

// Svelte version 3:
dispatch('optional');
dispatch('required'); // I can still omit the detail argument
dispatch('noArgument', 'surprise'); // I can still add a detail argument

// Svelte version 4 using TypeScript strict mode:
dispatch('optional');
dispatch('required'); // error, missing argument
dispatch('noArgument', 'surprise'); // error, cannot pass an argument

----------------------------------------

TITLE: Creating a Readable Store in Svelte
DESCRIPTION: Shows how to create a readable store that updates its value periodically, demonstrating the use of the set function and cleanup logic.

LANGUAGE: typescript
CODE:
import { readable } from 'svelte/store';

const time = readable(new Date(), (set) => {
	set(new Date());

	const interval = setInterval(() => {
		set(new Date());
	}, 1000);

	return () => clearInterval(interval);
});

const ticktock = readable('tick', (set, update) => {
	const interval = setInterval(() => {
		update((sound) => (sound === 'tick' ? 'tock' : 'tick'));
	}, 1000);

	return () => clearInterval(interval);
});

----------------------------------------

TITLE: Basic Await Block Syntax
DESCRIPTION: The complete syntax structure for Svelte await blocks showing all possible branches.

LANGUAGE: svelte
CODE:
{#await expression}...{:then name}...{:catch name}...{/await}

----------------------------------------

TITLE: Typed Svelte Action with Custom Events
DESCRIPTION: Illustrates how to implement a typed action with custom event handlers using TypeScript generics for node type, parameters, and custom events.

LANGUAGE: svelte
CODE:
<script>
	/**
	 * @type {import('svelte/action').Action<
	 * 	HTMLDivElement,
	 * 	undefined,
	 * 	{
	 * 		onswiperight: (e: CustomEvent) => void;
	 * 		onswipeleft: (e: CustomEvent) => void;
	 * 		// ...
	 * 	}
	 * >}
	 */
	function gestures(node) {
		$effect(() => {
			// ...
			node.dispatchEvent(new CustomEvent('swipeleft'));

			// ...
			node.dispatchEvent(new CustomEvent('swiperight'));
		});
	}
</script>

<div
	use:gestures
	onswipeleft={next}
	onswiperight={prev}
>...</div>

----------------------------------------

TITLE: Basic Snippet Syntax in Svelte
DESCRIPTION: Shows the basic syntax for declaring snippets with and without parameters in Svelte components.

LANGUAGE: svelte
CODE:
{#snippet name()}...{/snippet}

{#snippet name(param1, param2, paramN)}...{/snippet}

----------------------------------------

TITLE: Implementing Custom Typewriter Transition in Svelte
DESCRIPTION: This example shows a custom 'typewriter' transition function in Svelte. It animates text by revealing it character by character. The function uses a 'tick' callback for frame-by-frame animation control.

LANGUAGE: svelte
CODE:
<script>
	export let visible = false;

	/**
	 * @param {HTMLElement} node
	 * @param {{ speed?: number }} params
	 */
	function typewriter(node, { speed = 1 }) {
		const valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;

		if (!valid) {
			throw new Error(`This transition only works on elements with a single text node child`);
		}

		const text = node.textContent;
		const duration = text.length / (speed * 0.01);

		return {
			duration,
			tick: (t) => {
				const i = ~~(text.length * t);
				node.textContent = text.slice(0, i);
			}
		};
	}
</script>

{#if visible}
	<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>
{/if}

----------------------------------------

TITLE: Creating Basic Custom Element in Svelte
DESCRIPTION: Demonstrates how to create a basic custom element using Svelte with the customElement compiler option and svelte:options element. Shows basic prop handling and slot usage.

LANGUAGE: svelte
CODE:
<svelte:options customElement="my-element" />

<script>
	let { name = 'world' } = $props();
</script>

<h1>Hello {name}!</h1>
<slot />

----------------------------------------

TITLE: Using 'failed' Property with <svelte:boundary> in Svelte
DESCRIPTION: Shows how to use the 'failed' property of <svelte:boundary> to render custom content when an error occurs. It provides access to the error object and a reset function to recreate the contents.

LANGUAGE: svelte
CODE:
<svelte:boundary>
	<FlakyComponent />

	{#snippet failed(error, reset)}
		<button onclick={reset}>oops! try again</button>
	{/snippet}
</svelte:boundary>

----------------------------------------

TITLE: Optional Snippet Rendering with Optional Chaining
DESCRIPTION: Demonstrates how to safely render potentially undefined snippets using optional chaining syntax.

LANGUAGE: svelte
CODE:
{@render children?.()}

----------------------------------------

TITLE: Creating Shared State with Runes in Svelte
DESCRIPTION: Shows how to create and use shared state using Svelte's runes feature, which is an alternative to stores for cross-component reactive states.

LANGUAGE: typescript
CODE:
/// file: state.svelte.js
export const userState = $state({
	name: 'name',
	/* ... */
});

LANGUAGE: svelte
CODE:
<!--- file: App.svelte --->
<script>
	import { userState } from './state.svelte.js';
</script>

<p>User name: {userState.name}</p>
<button onclick={() => {
	userState.name = 'new name';
}}>
	change name
</button>

----------------------------------------

TITLE: Basic Snippet Rendering in Svelte
DESCRIPTION: Demonstrates how to define and render a simple snippet that calculates and displays sums. Shows multiple invocations of the same snippet with different parameters.

LANGUAGE: svelte
CODE:
{#snippet sum(a, b)}
	<p>{a} + {b} = {a + b}</p>
{/snippet}

{@render sum(1, 2)}
{@render sum(3, 4)}
{@render sum(5, 6)}

----------------------------------------

TITLE: Incorrect Scoped Styling for Injected HTML in Svelte
DESCRIPTION: Demonstrates an ineffective attempt to style injected HTML content using scoped styles. The styles for 'a' and 'img' will be considered unused as Svelte cannot detect them in injected content.

LANGUAGE: svelte
CODE:
<article>
	{@html content}
</article>

<style>
	article {
		a { color: hotpink }
		img { width: 100% }
	}
</style>

----------------------------------------

TITLE: Event Modifier Usage in Svelte
DESCRIPTION: Example of using event modifiers with the preventDefault modifier to control form submission behavior.

LANGUAGE: svelte
CODE:
<form on:submit|preventDefault={handleSubmit}>
	<!-- the `submit` event's default is prevented,
	     so the page won't reload -->
</form>

----------------------------------------

TITLE: Applying Transition Parameters in Svelte
DESCRIPTION: This example shows how to pass parameters to a transition function in Svelte. It uses the fade transition with a custom duration of 2000 milliseconds.

LANGUAGE: svelte
CODE:
{#if visible}
	<div transition:fade={{ duration: 2000 }}>fades in and out over two seconds</div>
{/if}

----------------------------------------

TITLE: Valid and Invalid {@debug} Syntax Examples in Svelte
DESCRIPTION: Shows correct and incorrect ways to use the {@debug} tag. Demonstrates that only variable names are accepted, not expressions or object properties.

LANGUAGE: svelte
CODE:
<!-- Compiles -->
{@debug user}
{@debug user1, user2, user3}

<!-- WON'T compile -->
{@debug user.firstname}
{@debug myArray[0]}
{@debug !isReady}
{@debug typeof user === 'object'}

----------------------------------------

TITLE: Server-Side Rendering of Svelte Components (JavaScript)
DESCRIPTION: Illustrates how to perform server-side rendering of Svelte components using the render method. This returns an object with head, html, and css properties.

LANGUAGE: javascript
CODE:
require('svelte/register');

const App = require('./App.svelte').default;

const { head, html, css } = App.render({
	answer: 42
});

----------------------------------------

TITLE: Basic Usage of style: Directive in Svelte
DESCRIPTION: Demonstrates the basic usage of the style: directive, showing its equivalence to the standard style attribute.

LANGUAGE: svelte
CODE:
<!-- These are equivalent -->
<div style:color="red">...</div>
<div style="color: red;">...</div>

----------------------------------------

TITLE: Basic {@debug} Usage with Object in Svelte
DESCRIPTION: Demonstrates how to use the {@debug} tag to monitor changes in a user object. The code shows debugging a user object containing firstname and lastname properties.

LANGUAGE: svelte
CODE:
<script>
	let user = {
		firstname: 'Ada',
		lastname: 'Lovelace'
	};
</script>

{@debug user}

<h1>Hello {user.firstname}!</h1>

----------------------------------------

TITLE: Multiple style: Directives in Svelte
DESCRIPTION: Demonstrates how to apply multiple style: directives to a single element, including the use of expressions.

LANGUAGE: svelte
CODE:
<div style:color style:width="12rem" style:background-color={darkMode ? 'black' : 'white'}>...</div>

----------------------------------------

TITLE: Shopping List Example with Basic Each Block
DESCRIPTION: Shows how to iterate over a list of items to create a shopping list using Svelte's each block.

LANGUAGE: svelte
CODE:
<h1>Shopping list</h1>
<ul>
	{#each items as item}
		<li>{item.name} x {item.qty}</li>
	{/each}
</ul>

----------------------------------------

TITLE: Basic Class Attribute Usage in Svelte
DESCRIPTION: Demonstrates using a ternary operator to conditionally set a class name.

LANGUAGE: svelte
CODE:
<div class={large ? 'large' : 'small'}>...</div>

----------------------------------------

TITLE: Component Class Prop Forwarding in Svelte
DESCRIPTION: Example of a Button component that combines local classes with forwarded class props.

LANGUAGE: svelte
CODE:
<script>
	let props = $props();
</script>

<button {...props} class={['cool-button', props.class]}>
	{@render props.children?.()}
</button>

----------------------------------------

TITLE: #each Block Without Item in Svelte
DESCRIPTION: Shows how to use #each block to render something a specific number of times without an item variable.

LANGUAGE: svelte
CODE:
<div class="chess-board">
	{#each { length: 8 }, rank}
		{#each { length: 8 }, file}
			<div class:black={(rank + file) % 2 === 1}></div>
		{/each}
	{/each}
</div>

----------------------------------------

TITLE: Await Block Without Error Handling
DESCRIPTION: Simplified await block syntax that only handles pending and fulfilled states, omitting error handling.

LANGUAGE: svelte
CODE:
{#await promise}
	<!-- promise is pending -->
	<p>waiting for the promise to resolve...</p>
{:then value}
	<!-- promise was fulfilled -->
	<p>The value is {value}</p>
{/await}

----------------------------------------

TITLE: Applying Global Styles with :global(...) Modifier in Svelte
DESCRIPTION: This snippet demonstrates how to use the :global(...) modifier to apply styles globally to specific selectors in Svelte. It shows examples for styling the body element, nested elements, and elements with specific classes.

LANGUAGE: svelte
CODE:
<style>
	:global(body) {
		/* applies to <body> */
		margin: 0;
	}

	div :global(strong) {
		/* applies to all <strong> elements, in any component,
		   that are inside <div> elements belonging
		   to this component */
		color: goldenrod;
	}

	p:global(.big.red) {
		/* applies to all <p> elements belonging to this component
		   with `class="big red"`, even if it is applied
		   programmatically (for example by a library) */
	}
</style>

----------------------------------------

TITLE: Dynamic Attribute Values with Expressions
DESCRIPTION: Shows how to use JavaScript expressions in attribute values.

LANGUAGE: svelte
CODE:
<a href="page/{p}">page {p}</a>

----------------------------------------

TITLE: Custom $inspect Handler with .with() Method
DESCRIPTION: Shows how to use $inspect.with() to provide a custom callback handler for inspections. The callback receives an event type ('init' or 'update') and the inspected values.

LANGUAGE: svelte
CODE:
<script>
	let count = $state(0);

	$inspect(count).with((type, count) => {
		if (type === 'update') {
			debugger; // or `console.trace`, or whatever you want
		}
	});
</script>

<button onclick={() => count++}>Increment</button>

----------------------------------------

TITLE: Creating Global @keyframes Animations in Svelte
DESCRIPTION: This snippet shows how to create globally accessible @keyframes animations in Svelte by prepending the keyframe names with '-global-'. The '-global-' prefix is removed during compilation.

LANGUAGE: svelte
CODE:
<style>
	@keyframes -global-my-animation-name {
		/* code goes here */
	}
</style>

----------------------------------------

TITLE: Custom Properties with SVG Elements in Svelte
DESCRIPTION: Illustrates how Svelte handles custom properties for SVG elements by using a <g> element instead of svelte-css-wrapper.

LANGUAGE: svelte
CODE:
<g style="--track-color: black; --thumb-color: rgb({r} {g} {b})">
	<Slider
		bind:value
		min={0}
		max={100}
	/>
</g>

----------------------------------------

TITLE: Elements missing content in Svelte
DESCRIPTION: Shows heading and anchor elements without content, which is required for accessibility.

LANGUAGE: svelte
CODE:
<!-- A11y: <a> element should have child content -->
<a href="/foo"></a>

<!-- A11y: <h1> element should have child content -->
<h1></h1>

----------------------------------------

TITLE: Using 'onerror' Function with <svelte:boundary> in Svelte
DESCRIPTION: Demonstrates how to use the 'onerror' function with <svelte:boundary> for error reporting or handling errors outside the boundary itself.

LANGUAGE: svelte
CODE:
<svelte:boundary onerror={(e) => report(e)}>
	...
</svelte:boundary>

----------------------------------------

TITLE: Handling Keydown Events on Window in Svelte
DESCRIPTION: Illustrates a practical example of using <svelte:window> to handle keydown events on the window object. The example shows how to define a handler function and attach it to the window's keydown event.

LANGUAGE: svelte
CODE:
<script>
	function handleKeydown(event) {
		alert(`pressed the ${event.key} key`);
	}
</script>

<svelte:window onkeydown={handleKeydown} />

----------------------------------------

TITLE: Handling Hydration Attribute Changes in Svelte
DESCRIPTION: Shows how to force an update of an attribute value that changes between server and client renders. This example uses an effect to reset the src attribute of an img element after mounting.

LANGUAGE: svelte
CODE:
<script>
	let { src } = $props();

	if (typeof window !== 'undefined') {
		// stash the value...
		const initial = src;

		// unset it...
		src = undefined;

		$effect(() => {
			// ...and reset after we've mounted
			src = initial;
		});
	}
</script>

<img {src} />

----------------------------------------

TITLE: Binding to Window's scrollY Property in Svelte
DESCRIPTION: Demonstrates how to bind to the window's scrollY property using <svelte:window>. This allows for reactive updates when the window's vertical scroll position changes.

LANGUAGE: svelte
CODE:
<svelte:window bind:scrollY={y} />

----------------------------------------

TITLE: Property Binding with <svelte:document> in Svelte
DESCRIPTION: Shows how to bind to properties of the document object using the <svelte:document> element. This allows reactive updates when document properties change.

LANGUAGE: svelte
CODE:
<svelte:document bind:prop={value} />

----------------------------------------

TITLE: Demonstrating Dependency Tracking Limitations in Svelte
DESCRIPTION: This example illustrates a case where Svelte's dependency tracking fails due to indirect references. The reactive statement for z will not update as expected because y is not considered 'dirty' when the update occurs.

LANGUAGE: svelte
CODE:
<script>
	let x = 0;
	let y = 0;

	$: z = y;
	$: setY(x);

	function setY(value) {
		y = value;
	}
</script>

----------------------------------------

TITLE: Basic Usage of <svelte:options> in Svelte
DESCRIPTION: Demonstrates the basic syntax for using the <svelte:options> element in a Svelte component. This element is used to specify compiler options for the component.

LANGUAGE: svelte
CODE:
<svelte:options option={value} />

----------------------------------------

TITLE: Using Event Listeners and Actions on Document Body in Svelte
DESCRIPTION: Shows how to add multiple event listeners (mouseenter and mouseleave) and an action to the document body using the <svelte:body> element. This element must be used at the top level of the component.

LANGUAGE: svelte
CODE:
<svelte:body onmouseenter={handleMouseenter} onmouseleave={handleMouseleave} use:someAction />

----------------------------------------

TITLE: Suppressing Single Svelte Compiler Warning
DESCRIPTION: Demonstrates how to suppress a single accessibility warning for autofocus using the svelte-ignore comment directive.

LANGUAGE: svelte
CODE:
<!-- svelte-ignore a11y_autofocus -->
<input autofocus />

----------------------------------------

TITLE: Server-Side Rendering of a Svelte Component
DESCRIPTION: Illustrates how to use the render function for server-side rendering of a Svelte component. It returns an object with HTML content for both the body and head of the document, which can be used to populate the server-rendered HTML.

LANGUAGE: javascript
CODE:
import { render } from 'svelte/server';
import App from './App.svelte';

const result = render(App, {
	props: { some: 'property' }
});
result.body; // HTML for somewhere in this <body> tag
result.head; // HTML for somewhere in this <head> tag

----------------------------------------

TITLE: Implementing Nested Style Elements in Svelte
DESCRIPTION: Demonstrates how nested <style> elements are handled in Svelte components. When a style tag is nested inside other elements or logic blocks, it is inserted directly into the DOM without Svelte's usual style scoping or processing, affecting all matching elements globally.

LANGUAGE: svelte
CODE:
<div>
	<style>
		/* this style tag will be inserted as-is */
		div {
			/* this will apply to all `<div>` elements in the DOM */
			color: red;
		}
	</style>
</div>

----------------------------------------

TITLE: Configuring Custom Element with <svelte:options> in Svelte
DESCRIPTION: Shows how to use <svelte:options> to configure a Svelte component as a custom element. This example sets the custom element tag name to 'my-custom-element'.

LANGUAGE: svelte
CODE:
<svelte:options customElement="my-custom-element" />

----------------------------------------

TITLE: Implementing Side Effects with $effect in Svelte 5
DESCRIPTION: Demonstrates how to use the $effect rune to create side effects that respond to changes in reactive state. The example updates a canvas element when size or color values change.

LANGUAGE: svelte
CODE:
<script>
	let size = $state(50);
	let color = $state('#ff3e00');

	let canvas;

	$effect(() => {
		const context = canvas.getContext('2d');
		context.clearRect(0, 0, canvas.width, canvas.height);

		// this will re-run whenever `color` or `size` change
		context.fillStyle = color;
		context.fillRect(0, 0, size, size);
	});
</script>

<canvas bind:this={canvas} width="100" height="100" />

----------------------------------------

TITLE: Chat Window Example in Svelte 5
DESCRIPTION: Demonstrates the transition from Svelte 4 to Svelte 5 patterns in a chat window example, using $effect.pre instead of beforeUpdate for more granular control over updates.

LANGUAGE: svelte
CODE:
<script>
	import { tick } from 'svelte';

	let theme = $state('dark');
	let messages = $state([]);

	let viewport;

	$effect.pre(() => {
		messages;
		const autoscroll = viewport && viewport.offsetHeight + viewport.scrollTop > viewport.scrollHeight - 50;

		if (autoscroll) {
			tick().then(() => {
				viewport.scrollTo(0, viewport.scrollHeight);
			});
		}
	});

	function handleKeydown(event) {
		if (event.key === 'Enter') {
			const text = event.target.value;
			if (!text) return;

			messages = [...messages, text];
			event.target.value = '';
		}
	}

	function toggle() {
		theme = theme === 'dark' ? 'light' : 'dark';
	}
</script>

<div class:dark={theme === 'dark'}>
	<div bind:this={viewport}>
		{#each messages as message}
			<p>{message}</p>
		{/each}
	</div>

	<input onkeydown={handleKeydown} />

	<button onclick={toggle}> Toggle dark mode </button>
</div>

----------------------------------------

TITLE: Configuring Vite for Vitest
DESCRIPTION: Configuration setup for Vite to work with Vitest, including browser conditions resolution

LANGUAGE: javascript
CODE:
import { defineConfig } from 'vitest/config';

export default defineConfig({
	// ...
	resolve: process.env.VITEST
		? {
				conditions: ['browser']
			}
		: undefined
});

----------------------------------------

TITLE: Advanced Usage of <svelte:document> in Svelte
DESCRIPTION: Illustrates advanced usage of the <svelte:document> element, including handling specific events like visibilitychange and applying actions to the document object.

LANGUAGE: svelte
CODE:
<svelte:document onvisibilitychange={handleVisibilityChange} use:someAction />

----------------------------------------

TITLE: Component Method Export
DESCRIPTION: Example of exporting a function as part of the component's API rather than as a prop.

LANGUAGE: svelte
CODE:
<!--- file: Greeter.svelte--->
<script>
	export function greet(name) {
		alert(`hello ${name}!`);
	}
</script>

----------------------------------------

TITLE: Using Custom Element in HTML
DESCRIPTION: Demonstrates how to use the defined custom element in HTML with slotted content.

LANGUAGE: javascript
CODE:
document.body.innerHTML = `
	<my-element>
		<p>This is some slotted content</p>
	</my-element>
`;

----------------------------------------

TITLE: Component Props and Spread Attributes
DESCRIPTION: Shows different ways to pass props to components including spread syntax.

LANGUAGE: svelte
CODE:
<Widget {...things} />

----------------------------------------

TITLE: Named Slots with Data Passing
DESCRIPTION: Shows how to implement named slots that also pass data between components using the let: directive on slotted elements.

LANGUAGE: svelte
CODE:
<!--- file: FancyList.svelte --->
<ul>
	{#each items as item}
		<li class="fancy">
			<slot name="item" item={process(data)} />
		</li>
	{/each}
</ul>

<slot name="footer" />

LANGUAGE: svelte
CODE:
<!--- file: App.svelte --->
<FancyList {items}>
	<div slot="item" let:item>{item.text}</div>
	<p slot="footer">Copyright (c) 2019 Svelte Industries</p>
</FancyList>

----------------------------------------

TITLE: Migrating Reactive State in Svelte 5
DESCRIPTION: Demonstrates how to update reactive state declarations from Svelte 4's implicit reactivity to Svelte 5's explicit $state rune.

LANGUAGE: svelte
CODE:
<script>
	let count = $state(0);
</script>

----------------------------------------

TITLE: Passing Props to a Svelte Component
DESCRIPTION: Demonstrates how to pass props to a Svelte component in the parent file.

LANGUAGE: svelte
CODE:
<script>
	import MyComponent from './MyComponent.svelte';
</script>

<MyComponent adjective="cool" />

----------------------------------------

TITLE: Inline Event Handler in Svelte
DESCRIPTION: Shows how to use an inline event handler with no performance penalty for simple operations.

LANGUAGE: svelte
CODE:
<button on:click={() => (count += 1)}>
	count: {count}
</button>

----------------------------------------

TITLE: Using Reactive Window Dimensions in Svelte
DESCRIPTION: Demonstrates how to use reactive window dimensions (innerWidth and innerHeight) from the svelte/reactivity/window module. The values automatically update when the window is resized.

LANGUAGE: svelte
CODE:
<script>
	import { innerWidth, innerHeight } from 'svelte/reactivity/window';
</script>

<p>{innerWidth.current}x{innerHeight.current}</p>

----------------------------------------

TITLE: Using Rest Props in Svelte
DESCRIPTION: Demonstrates how to use a rest property to capture remaining props in Svelte.

LANGUAGE: javascript
CODE:
let { a, b, c, ...others } = $props();

----------------------------------------

TITLE: Button Component with Props Spreading in Svelte
DESCRIPTION: Demonstrates creating a button component that passes through all props except 'variant' using $$restProps, while handling CSS classes with $$props. The example shows proper prop spreading and class composition techniques.

LANGUAGE: svelte
CODE:
<script>
	export let variant;
</script>

<button {...$$restProps} class="variant-{variant} {$$props.class ?? ''}">
	click me
</button>

<style>
	.variant-danger {
		background: red;
	}
</style>

----------------------------------------

TITLE: Declaring Reactive State in Svelte Legacy Mode
DESCRIPTION: This snippet demonstrates how to declare a reactive variable in Svelte's legacy mode and use it in a button click event. The count variable is automatically reactive when declared at the top level of the component.

LANGUAGE: svelte
CODE:
<script>
	let count = 0;
</script>

<button on:click={() => count += 1}>
	clicks: {count}
</button>

----------------------------------------

TITLE: Basic Svelte Element Usage
DESCRIPTION: Demonstrates the basic syntax for using <svelte:element> to render a dynamic element.

LANGUAGE: svelte
CODE:
<svelte:element this={expression} />

----------------------------------------

TITLE: Handling Browser-Only Code in Reactive Statements
DESCRIPTION: This snippet demonstrates how to wrap browser-specific code in a reactive statement. It checks for the browser environment before updating the document title.

LANGUAGE: javascript
CODE:
// @noErrors
$: if (browser) {
	document.title = title;
}

----------------------------------------

TITLE: Reactive Destructuring Assignment in JavaScript
DESCRIPTION: This snippet shows how to use destructuring assignment in a reactive statement, assigning properties from the stooges object to individual variables.

LANGUAGE: javascript
CODE:
// @noErrors
$: ({ larry, moe, curly } = stooges);

----------------------------------------

TITLE: Svelte Element with Invalid Child Content
DESCRIPTION: Example showing how using child content with void elements throws a runtime error in development mode.

LANGUAGE: svelte
CODE:
<script>
	let tag = $state('hr');
</script>

<svelte:element this={tag}>
	This text cannot appear inside an hr element
</svelte:element>

----------------------------------------

TITLE: Using SvelteURL for Reactive URL Manipulation
DESCRIPTION: Demonstrates how to use the SvelteURL component to create reactive bindings for URL manipulation. The example shows two-way data binding between URL components (protocol, hostname, pathname) and input fields, with automatic synchronization of the full href value.

LANGUAGE: svelte
CODE:
<script>
	import { SvelteURL } from 'svelte/reactivity';

	const url = new SvelteURL('https://example.com/path');
</script>

<!-- changes to these... -->
<input bind:value={url.protocol} />
<input bind:value={url.hostname} />
<input bind:value={url.pathname} />

<hr />

<!-- will update `href` and vice versa -->
<input bind:value={url.href} />

----------------------------------------

TITLE: Component Event Handling in Svelte
DESCRIPTION: Demonstrates how to listen for and handle custom events dispatched from child components.

LANGUAGE: svelte
CODE:
<script>
	import Stepper from './Stepper.svelte';

	let n = 0;
</script>

<Stepper
	on:decrement={() => n -= 1}
	on:increment={() => n += 1}
/>

<p>n: {n}</p>

----------------------------------------

TITLE: Using a Bindable Prop in a Parent Component
DESCRIPTION: This snippet shows how to use a bindable prop in a parent component. It imports the FancyInput component and binds its 'value' prop to a local state variable 'message'.

LANGUAGE: svelte
CODE:
<script>
	import FancyInput from './FancyInput.svelte';

	let message = $state('hello');
</script>

<FancyInput bind:value={message} />
<p>{message}</p>

----------------------------------------

TITLE: Module Definition - svelte/easing
DESCRIPTION: Module identifier for the Svelte easing functions package that provides various easing functions for animation purposes.

LANGUAGE: javascript
CODE:
MODULE: svelte/easing

----------------------------------------

TITLE: Named Slots in Svelte Components
DESCRIPTION: Shows how to implement and use named slots in Svelte components. Demonstrates passing content to specific named slots using the slot attribute.

LANGUAGE: svelte
CODE:
<!--- file: App.svelte --->
<script>
	import Modal from './Modal.svelte';

	let open = true;
</script>

{#if open}
	<Modal>
		This is some slotted content

		<div slot="buttons">
			<button on:click={() => open = false}>
				close
			</button>
		</div>
	</Modal>
{/if}

LANGUAGE: svelte
CODE:
<!--- file: Modal.svelte --->
<div class="modal">
	<slot></slot>
	<hr>
	<slot name="buttons"></slot>
</div>

----------------------------------------

TITLE: Installing Vitest for Svelte Testing
DESCRIPTION: Command to install Vitest as a development dependency for testing Svelte applications

LANGUAGE: bash
CODE:
npm install -D vitest

----------------------------------------

TITLE: Svelte Module Script Counter Example
DESCRIPTION: Shows how to use module-level scripts to maintain a count of component instantiations

LANGUAGE: svelte
CODE:
<script module>
	let total = 0;
</script>

<script>
	total += 1;
	console.log(`instantiated ${total} times`);
</script>

----------------------------------------

TITLE: Creating Named Slots in Svelte Widget Component
DESCRIPTION: Demonstrates the creation of a Widget component with named slots for header and footer content, including a default value for the header slot.

LANGUAGE: svelte
CODE:
<!--- file: Widget.svelte --->
<div>
	<slot name="header">No header was provided</slot>
	<p>Some content between header and footer</p>
	<slot name="footer" />
</div>

----------------------------------------

TITLE: Event Handling with <svelte:document> in Svelte
DESCRIPTION: Demonstrates how to add event listeners to the document object using the <svelte:document> element. This allows handling of events that don't fire on the window object.

LANGUAGE: svelte
CODE:
<svelte:document onevent={handler} />

----------------------------------------

TITLE: Using $state in JavaScript Class Fields
DESCRIPTION: Shows how to use the $state rune in class fields to create reactive properties in a Todo class. Both public and private fields can be marked as reactive.

LANGUAGE: javascript
CODE:
class Todo {
	done = $state(false);
	text = $state();

	constructor(text) {
		this.text = text;
	}
}

----------------------------------------

TITLE: Using Conditional Slots in Svelte Application
DESCRIPTION: This snippet shows how to use a component with conditional slots in a Svelte application. It demonstrates providing content for the 'title' slot while omitting the 'description' slot.

LANGUAGE: svelte
CODE:
<Card>
	<h1 slot="title">Blog Post Title</h1>
	<!-- No slot named "description" was provided so the optional slot will not be rendered. -->
</Card>

----------------------------------------

TITLE: Recursive Component Using svelte:self Element
DESCRIPTION: Implementation of a recursive countdown component using the <svelte:self> element. The component takes a count prop and recursively renders itself with a decremented count until reaching zero.

LANGUAGE: svelte
CODE:
<script>
	export let count;
</script>

{#if count > 0}
	<p>counting down... {count}</p>
	<svelte:self count={count - 1} />
{:else}
	<p>lift-off!</p>
{/if}

----------------------------------------

TITLE: Demonstrating Update Propagation in Svelte
DESCRIPTION: Illustrates how Svelte's push-pull reactivity works with derived values. The example shows that updates are only propagated when the derived value actually changes.

LANGUAGE: svelte
CODE:
<script>
	let count = $state(0);
	let large = $derived(count > 10);
</script>

<button onclick={() => count++}>
	{large}
</button>

----------------------------------------

TITLE: Exporting Readonly Values in Svelte Components
DESCRIPTION: Demonstrates how to export constants, classes, or functions as readonly properties in a Svelte component.

LANGUAGE: svelte
CODE:
<script>
	export const thisIs = 'readonly';

	export function greet(name) {
		alert(`hello ${name}!`);
	}
</script>

----------------------------------------

TITLE: Hydrating a Server-Rendered Svelte Component (TypeScript)
DESCRIPTION: Shows how to hydrate a server-rendered Svelte component on the client side. This is useful for enhancing server-side rendered content with client-side interactivity.

LANGUAGE: typescript
CODE:
import App from './App.svelte';

const app = new App({
	target: document.querySelector('#server-rendered-html'),
	hydrate: true
});

----------------------------------------

TITLE: Updating Array State in Svelte Legacy Mode
DESCRIPTION: This example shows how to update an array in Svelte's legacy mode. It demonstrates that array methods like push() don't automatically trigger updates, and a subsequent assignment is required to update the UI.

LANGUAGE: svelte
CODE:
<script>
	let numbers = [1, 2, 3, 4];

	function addNumber() {
		// this method call does not trigger an update
		numbers.push(numbers.length + 1);

		// this assignment will update anything
		// that depends on `numbers`
		numbers = numbers;
	}
</script>

----------------------------------------

TITLE: Installing JSDOM for Component Testing
DESCRIPTION: Command to install JSDOM for DOM environment simulation in component tests

LANGUAGE: bash
CODE:
npm install -D jsdom

----------------------------------------

TITLE: Avoiding accesskey in Svelte
DESCRIPTION: Demonstrates the incorrect use of the accesskey attribute, which should be avoided to prevent accessibility complications.

LANGUAGE: svelte
CODE:
<!-- A11y: Avoid using accesskey -->
<div accesskey="z"></div>

----------------------------------------

TITLE: Specifying a Fallback Value for a Bindable Prop
DESCRIPTION: This snippet demonstrates how to specify a fallback value for a bindable prop when no value is passed from the parent component. It uses the $bindable rune with a default value of 'fallback'.

LANGUAGE: javascript
CODE:
let { value = $bindable('fallback'), ...props } = $props();

----------------------------------------

TITLE: Configuring Playwright for E2E Testing
DESCRIPTION: Configuration setup for Playwright E2E testing with Svelte applications

LANGUAGE: javascript
CODE:
const config = {
	webServer: {
		command: 'npm run build && npm run preview',
		port: 4173
	},
	testDir: 'tests',
	testMatch: /(.+\.)?(test|spec)\.[jt]s/
};

export default config;

----------------------------------------

TITLE: Using aria-activedescendant with tabindex in Svelte
DESCRIPTION: Shows an element with aria-activedescendant that should also have a tabindex value for proper accessibility.

LANGUAGE: svelte
CODE:
<!-- A11y: Elements with attribute aria-activedescendant should have tabindex value -->
<div aria-activedescendant="some-id"></div>

----------------------------------------

TITLE: Shorthand Form of style: Directive in Svelte
DESCRIPTION: Illustrates the shorthand form of the style: directive when the property name matches the variable name.

LANGUAGE: svelte
CODE:
<div style:color>...</div>

----------------------------------------

TITLE: Avoiding autofocus in Svelte
DESCRIPTION: Shows the incorrect use of the autofocus attribute, which should be avoided to prevent usability issues.

LANGUAGE: svelte
CODE:
<!-- A11y: Avoid using autofocus -->
<input autofocus />

----------------------------------------

TITLE: HTML Injection with @html
DESCRIPTION: Shows how to render HTML strings in Svelte components.

LANGUAGE: svelte
CODE:
{@html potentiallyUnsafeHtmlString}

----------------------------------------

TITLE: Incorrect placement of figcaption in Svelte
DESCRIPTION: Illustrates the incorrect placement of a figcaption element, which should be an immediate child of a figure element.

LANGUAGE: svelte
CODE:
<!-- A11y: <figcaption> must be an immediate child of <figure> -->
<div>
	<figcaption>Image caption</figcaption>
</div>

----------------------------------------

TITLE: Using the Get Function with Svelte Stores
DESCRIPTION: Shows how to use the get function to retrieve the current value of a store without subscribing to it.

LANGUAGE: typescript
CODE:
import { get } from 'svelte/store';

const value = get(store);

----------------------------------------

TITLE: Handling click events without keyboard events in Svelte
DESCRIPTION: Demonstrates a div with an onclick event but no keyboard event handler, which is not accessible.

LANGUAGE: svelte
CODE:
<!-- A11y: visible, non-interactive elements with an onclick event must be accompanied by a keyboard event handler. -->
<div onclick={() => {}}></div>

----------------------------------------

TITLE: Hiding important elements in Svelte
DESCRIPTION: Shows an h2 element being hidden, which should not be done as it's useful for screen reader navigation.

LANGUAGE: svelte
CODE:
<!-- A11y: <h2> element should not be hidden -->
<h2 aria-hidden="true">invisible header</h2>

----------------------------------------

TITLE: Passing Custom Properties to Svelte Component
DESCRIPTION: Demonstrates how to pass both static and dynamic CSS custom properties to a Svelte component. The example uses a Slider component with custom track and thumb colors.

LANGUAGE: svelte
CODE:
<Slider
	bind:value
	min={0}
	max={100}
	--track-color="black"
	--thumb-color="rgb({r} {g} {b})"
/>

----------------------------------------

TITLE: Using interactive roles without tabindex in Svelte
DESCRIPTION: Demonstrates an element with an interactive role (button) that should have a tabindex value for proper keyboard navigation.

LANGUAGE: svelte
CODE:
<!-- A11y: Elements with the 'button' interactive role must have a tabindex value. -->
<div role="button" onkeypress={() => {}} />

----------------------------------------

TITLE: Using redundant alt text for images in Svelte
DESCRIPTION: Demonstrates correct and incorrect ways to use alt text for images, avoiding redundant words like 'image' or 'photo'.

LANGUAGE: svelte
CODE:
<img src="foo" alt="Foo eating a sandwich." />

<!-- aria-hidden, won't be announced by screen reader -->
<img src="bar" aria-hidden="true" alt="Picture of me taking a photo of an image" />

<!-- A11y: Screen readers already announce <img> elements as an image. -->
<img src="foo" alt="Photo of foo being weird." />

<!-- A11y: Screen readers already announce <img> elements as an image. -->
<img src="bar" alt="Image of me at a bar!" />

<!-- A11y: Screen readers already announce <img> elements as an image. -->
<img src="foo" alt="Picture of baz fixing a bug." />

----------------------------------------

TITLE: Updating Action Types in TypeScript
DESCRIPTION: Shows how to update the Action type to specify a parameter type in Svelte 4, which is now required for typed parameters.

LANGUAGE: typescript
CODE:
const action: Action<HTMLElement, string> = (node, params) => { ... } // params is of type string

----------------------------------------

TITLE: Associating labels with form controls in Svelte
DESCRIPTION: Demonstrates correct and incorrect ways to associate labels with form controls for accessibility.

LANGUAGE: svelte
CODE:
<label for="id">B</label>

<label>C <input type="text" /></label>

<!-- A11y: A form label must be associated with a control. -->
<label>A</label>

----------------------------------------

TITLE: Using incorrect ARIA attribute types in Svelte
DESCRIPTION: Shows the incorrect use of the aria-hidden attribute with a non-boolean value.

LANGUAGE: svelte
CODE:
<!-- A11y: The value of 'aria-hidden' must be exactly one of true or false -->
<div aria-hidden="yes"></div>

----------------------------------------

TITLE: Updating onMount Usage for Asynchronous Functions
DESCRIPTION: Demonstrates the correct way to use onMount with asynchronous operations in Svelte 4 to ensure cleanup functions are called.

LANGUAGE: javascript
CODE:
onMount(
	() => {
		foo().then(something => {...});
		// ...
		return () => someCleanup();
	}
);

----------------------------------------

TITLE: Adding event listeners to non-interactive elements in Svelte
DESCRIPTION: Demonstrates the incorrect addition of click handlers to non-interactive elements like li and div with listitem role.

LANGUAGE: svelte
CODE:
<!-- `A11y: Non-interactive element <li> should not be assigned mouse or keyboard event listeners.` -->
<li onclick={() => {}}></li>

<!-- `A11y: Non-interactive element <div> should not be assigned mouse or keyboard event listeners.` -->
<div role="listitem" onclick={() => {}}></div>

----------------------------------------

TITLE: Using invalid href attributes in Svelte
DESCRIPTION: Shows an anchor tag with an invalid (empty) href attribute, which should be avoided for accessibility reasons.

LANGUAGE: svelte
CODE:
<!-- A11y: '' is not a valid href attribute -->
<a href="">invalid</a>

----------------------------------------

TITLE: Creating a Svelte Component (TypeScript)
DESCRIPTION: Demonstrates how to create a new Svelte component instance with options. The example shows creating an App component and mounting it to the document body with props.

LANGUAGE: typescript
CODE:
import App from './App.svelte';

const app = new App({
	target: document.body,
	props: {
		// assuming App.svelte contains something like
		// `export let answer`:
		answer: 42
	}
});

----------------------------------------

TITLE: Using interactive roles on non-interactive elements in Svelte
DESCRIPTION: Shows the incorrect use of an interactive role (searchbox) on a non-interactive element (h3).

LANGUAGE: svelte
CODE:
<!-- A11y: Non-interactive element <h3> cannot have interactive role 'searchbox' -->
<h3 role="searchbox">Button</h3>

----------------------------------------

TITLE: Adding captions to media elements in Svelte
DESCRIPTION: Shows correct and incorrect ways to add captions to video elements for accessibility.

LANGUAGE: svelte
CODE:
<video><track kind="captions" /></video>

<audio muted></audio>

<!-- A11y: Media elements must have a <track kind=\"captions\"> -->
<video></video>

<!-- A11y: Media elements must have a <track kind=\"captions\"> -->
<video><track /></video>

----------------------------------------

TITLE: Svelte {#if} Block with Multiple Conditions
DESCRIPTION: Shows the structure for an {#if} block with additional conditions using {:else if}. This allows for multiple conditional branches in the rendering logic.

LANGUAGE: svelte
CODE:
{#if expression}...{:else if expression}...{/if}

----------------------------------------

TITLE: Svelte {#if} Block with Multiple Conditions
DESCRIPTION: Shows the structure for an {#if} block with additional conditions using {:else if}. This allows for multiple conditional branches in the rendering logic.

LANGUAGE: svelte
CODE:
{#if expression}...{:else if expression}...{/if}

----------------------------------------

TITLE: Using unsupported ARIA attributes in Svelte
DESCRIPTION: Demonstrates the use of ARIA attributes that are not supported by the element's role, both explicit and implicit.

LANGUAGE: svelte
CODE:
<!-- A11y: The attribute 'aria-multiline' is not supported by the role 'link'. -->
<div role="link" aria-multiline></div>

<!-- A11y: The attribute 'aria-required' is not supported by the role 'listitem'. This role is implicit on the element <li>. -->
<li aria-required></li>

----------------------------------------

TITLE: Using roles on reserved DOM elements in Svelte
DESCRIPTION: Demonstrates the incorrect use of the role attribute on a meta tag, which should not have such attributes.

LANGUAGE: svelte
CODE:
<!-- A11y: <meta> should not have role attribute -->
<meta role="tooltip" />

----------------------------------------

TITLE: Interval Timer with Teardown in $effect
DESCRIPTION: Shows how to implement an interval timer with proper cleanup using $effect's teardown function. The interval speed can be adjusted dynamically.

LANGUAGE: svelte
CODE:
<script>
	let count = $state(0);
	let milliseconds = $state(1000);

	$effect(() => {
		// This will be recreated whenever `milliseconds` changes
		const interval = setInterval(() => {
			count += 1;
		}, milliseconds);

		return () => {
			// if a teardown function is provided, it will run
			// a) immediately before the effect re-runs
			// b) when the component is destroyed
			clearInterval(interval);
		};
	});
</script>

<h1>{count}</h1>

<button onclick={() => (milliseconds *= 2)}>slower</button>
<button onclick={() => (milliseconds /= 2)}>faster</button>

----------------------------------------

TITLE: Using :global for Dynamic Content CSS in Svelte
DESCRIPTION: Demonstrates how to use the :global modifier to preserve CSS selectors when styling dynamic content rendered through {@html} tags. This prevents Svelte from removing seemingly unused selectors that actually target dynamically inserted content.

LANGUAGE: svelte
CODE:
<div class="post">{@html content}</div>

<style>
  .post :global {
    p {...}
  }
</style>

----------------------------------------

TITLE: Using scope attribute incorrectly in Svelte
DESCRIPTION: Shows the incorrect use of the scope attribute on a div element, which should only be used with th elements.

LANGUAGE: svelte
CODE:
<!-- A11y: The scope attribute should only be used with <th> elements -->
<div scope="row" />

----------------------------------------

TITLE: Using tick in Svelte 5
DESCRIPTION: Demonstrates how to use the tick function to ensure that the UI is updated before continuing execution. It returns a promise that resolves once pending state changes have been applied.

LANGUAGE: svelte
CODE:
<script>
	import { tick } from 'svelte';

	$effect.pre(() => {
		console.log('the component is about to update');
		tick().then(() => {
				console.log('the component just updated');
		});
	});
</script>

----------------------------------------

TITLE: Running Svelte Migration for Self-Closing Tags
DESCRIPTION: This command demonstrates how to use the Svelte CLI to automatically migrate self-closing tags to explicit closing tags in a project.

LANGUAGE: bash
CODE:
npx sv migrate self-closing-tags

----------------------------------------

TITLE: Missing required attributes for accessibility in Svelte
DESCRIPTION: Demonstrates elements missing required attributes for accessibility, such as alt for images or lang for html.

LANGUAGE: svelte
CODE:
<!-- A11y: <input type=\"image\"> element should have an alt, aria-label or aria-labelledby attribute -->
<input type="image" />

<!-- A11y: <html> element should have a lang attribute -->
<html></html>

<!-- A11y: <a> element should have an href attribute -->
<a>text</a>

----------------------------------------

TITLE: Array-based Class Assignment in Svelte
DESCRIPTION: Demonstrates using arrays to combine multiple conditional classes.

LANGUAGE: svelte
CODE:
<div class={[faded && 'saturate-0 opacity-50', large && 'scale-200']}>...</div>

----------------------------------------

TITLE: Correct Implementation of Derived State in Svelte
DESCRIPTION: This snippet demonstrates the correct way to implement derived state in Svelte, avoiding the issue of updating state inside a derived expression.

LANGUAGE: javascript
CODE:
let even = $derived(count % 2 === 0);
let odd = $derived(!even);

----------------------------------------

TITLE: Using positive tabindex values in Svelte
DESCRIPTION: Demonstrates the use of a positive tabindex value, which should be avoided for better accessibility.

LANGUAGE: svelte
CODE:
<!-- A11y: avoid tabindex values above zero -->
<div tabindex="1"></div>

----------------------------------------

TITLE: Using Reserved Words as Prop Names in Svelte
DESCRIPTION: Shows how to use reserved words as prop names in Svelte components by using object destructuring with renaming.

LANGUAGE: svelte
CODE:
<script>
	// creates a `class` property, even
	// though it is a reserved word
	let { class: className } = $props();
</script>

----------------------------------------

TITLE: Fixing Stale Assignment in Svelte State Management
DESCRIPTION: Demonstrates how to correctly update a state proxy array to avoid discarding pushed values. The fix involves separating the null coalescing assignment and array push into two statements.

LANGUAGE: js
CODE:
let object = { array: [0] };
// ---cut---
function add() {
	object.array ??= [];
	object.array.push(object.array.length);
}

----------------------------------------

TITLE: Missing required ARIA attributes in Svelte
DESCRIPTION: Shows an element with the checkbox role missing the required aria-checked attribute.

LANGUAGE: svelte
CODE:
<!-- A11y: A11y: Elements with the ARIA role "checkbox" must have the following attributes defined: "aria-checked" -->
<span role="checkbox" aria-labelledby="foo" tabindex="0"></span>

----------------------------------------

TITLE: Destructuring Props in a Svelte Component
DESCRIPTION: Illustrates how to destructure props for easier access within a Svelte component.

LANGUAGE: svelte
CODE:
<script>
	let { adjective } = $props();
</script>

<p>this component is {adjective}</p>

----------------------------------------

TITLE: Updating HTML Content on Hydration in Svelte
DESCRIPTION: Demonstrates how to force an update of an {@html ...} block that changes between server and client renders. This approach uses an effect to reset the markup after mounting.

LANGUAGE: svelte
CODE:
<script>
	let { markup } = $props();

	if (typeof window !== 'undefined') {
		// stash the value...
		const initial = markup;

		// unset it...
		markup = undefined;

		$effect(() => {
			// ...and reset after we've mounted
			markup = initial;
		});
	}
</script>

{@html markup}

----------------------------------------

TITLE: Using unknown ARIA attributes in Svelte
DESCRIPTION: Shows the use of an unknown ARIA attribute, likely due to a typo.

LANGUAGE: svelte
CODE:
<!-- A11y: Unknown aria attribute 'aria-labeledby' (did you mean 'labelledby'?) -->
<input type="image" aria-labeledby="foo" />

----------------------------------------

TITLE: Updating Preprocessor Order in Svelte Configuration
DESCRIPTION: Demonstrates the correct order of preprocessors in Svelte 4, particularly when using MDsveX with other preprocessors.

LANGUAGE: javascript
CODE:
preprocess: [
	mdsvex(mdsvexConfig),
	vitePreprocess()
]

----------------------------------------

TITLE: Invalid Snippet Export Example
DESCRIPTION: Illustrates an invalid snippet export scenario where a snippet references variables outside its module scope, which is not allowed in Svelte's module system.

LANGUAGE: svelte
CODE:
<script module>
	export { greeting };
</script>

<script>
	let message = 'hello';
</script>

{#snippet greeting(name)}
	<p>{message} {name}!</p>
{/snippet}

----------------------------------------

TITLE: Incorrect State Reference in Svelte Context
DESCRIPTION: This example demonstrates an incorrect way of passing state to a Svelte context, where updates to the state won't be reflected in the child component.

LANGUAGE: svelte
CODE:
<!--- file: Parent.svelte --->
<script>
	import { setContext } from 'svelte';

	let count = $state(0);

	// warning: state_referenced_locally
	setContext('count', count);
</script>

<button onclick={() => count++}>
	increment
</button>

LANGUAGE: svelte
CODE:
<!--- file: Child.svelte --->
<script>
	import { getContext } from 'svelte';

	const count = getContext('count');
</script>

<!-- This will never update -->
<p>The count is {count}</p>

----------------------------------------

TITLE: Conditional Snippet Rendering in Svelte
DESCRIPTION: Shows how to conditionally render snippets using a JavaScript expression within the {@render} tag.

LANGUAGE: svelte
CODE:
{@render (cool ? coolSnippet : lameSnippet)()}

----------------------------------------

TITLE: Demonstrating Reactive and Non-Reactive Updates in Svelte
DESCRIPTION: This snippet illustrates the difference between reactive and non-reactive variable updates in Svelte. It shows how $state-wrapped variables trigger updates, while regular variables do not.

LANGUAGE: svelte
CODE:
<script>
	let reactive = $state('reactive');
	let stale = 'stale';
</script>

<p>This value updates: {reactive}</p>
<p>This value does not update: {stale}</p>

<button onclick={() => {
	stale = 'updated';
	reactive = 'updated';
}}>update</button>

----------------------------------------

TITLE: Migrating from svelte:component to Dynamic Components
DESCRIPTION: These snippets demonstrate how to replace the deprecated <svelte:component> syntax with dynamic component rendering in Svelte 5, using both @const and $derived.

LANGUAGE: svelte
CODE:
{#each items as item}
	---<svelte:component this={item.condition ? Y : Z} />---
	+++{@const Component = item.condition ? Y : Z}+++
	+++<Component />+++
{/each}

LANGUAGE: svelte
CODE:
<script>
	// ...
	let condition = $state(false);
	+++const Component = $derived(condition ? Y : Z);+++
</script>

---<svelte:component this={condition ? Y : Z} />---
+++<Component />+++

----------------------------------------

TITLE: Complex Conditional Rendering with Multiple Branches in Svelte
DESCRIPTION: Shows a more complex example of conditional rendering using {#if}, {:else if}, and {:else} blocks. This snippet demonstrates how to handle multiple conditions for rendering different content based on the temperature of porridge.

LANGUAGE: svelte
CODE:
{#if porridge.temperature > 100}
	<p>too hot!</p>
{:else if 80 > porridge.temperature}
	<p>too cold!</p>
{:else}
	<p>just right!</p>
{/if}

----------------------------------------

TITLE: Using Svelte Lifecycle Functions in Server Context
DESCRIPTION: Explains the error that occurs when trying to use lifecycle methods like 'mount' in a server-side context. These functions are client-side only and should not be called during server-side rendering.

LANGUAGE: javascript
CODE:
%name%(...)

----------------------------------------

TITLE: Demonstrating Invalid Default Snippet Usage in Svelte Components
DESCRIPTION: This snippet shows an incompatible setup between a parent component using let: directives and a child component using {@render children(...)}. It illustrates why this combination throws an error in Svelte.

LANGUAGE: svelte
CODE:
<!--- file: Parent.svelte --->
<List {items} let:entry>
    <span>{entry}</span>
</List>

LANGUAGE: svelte
CODE:
<!--- file: List.svelte --->
<script>
    let { items, children } = $props();
</script>

<ul>
    {#each items as item}
        <li>{@render children(item)}</li>
    {/each}
</ul>

----------------------------------------

TITLE: Rendering Dynamic Components with <svelte:component> in Svelte
DESCRIPTION: This snippet demonstrates how to use <svelte:component> in Svelte's legacy mode to dynamically render a component. The component instance is destroyed and recreated when the value of the 'this' expression changes. If 'this' is falsy, no component is rendered.

LANGUAGE: svelte
CODE:
<svelte:component this={MyComponent} />

----------------------------------------

TITLE: Cloning Objects with $state.snapshot in Svelte
DESCRIPTION: $state.snapshot attempts to clone a given value to return a reference that no longer changes. This example demonstrates cloning a cloneable property and an uncloneable DOM element (window).

LANGUAGE: javascript
CODE:
const object = $state({ property: 'this is cloneable', window })
const snapshot = $state.snapshot(object);

----------------------------------------

TITLE: Correct Lifecycle Method Usage in Svelte Components
DESCRIPTION: This example demonstrates the correct placement of lifecycle methods in Svelte components. It shows that methods like onMount should be called at the top level of the component script, not inside other functions.

LANGUAGE: svelte
CODE:
<script>
    import { onMount } from 'svelte';

    function handleClick() {
        // This is wrong
        onMount(() => {})
    }

    // This is correct
    onMount(() => {})
</script>

<button onclick={handleClick}>click me</button>

----------------------------------------

TITLE: Error-Only Await Block
DESCRIPTION: Await block syntax focusing only on error handling, ignoring pending and fulfilled states.

LANGUAGE: svelte
CODE:
{#await promise catch error}
	<p>The error is {error}</p>
{/await}

----------------------------------------

TITLE: Including Warning Documentation in Markdown
DESCRIPTION: Include directives to merge generated warning documentation files into the main runtime warnings documentation page. This combines both client-specific and shared warnings.

LANGUAGE: markdown
CODE:
@include .generated/client-warnings.md

@include .generated/shared-warnings.md

----------------------------------------

TITLE: Reporting Breaking Changes in Pull Requests
DESCRIPTION: Template for documenting breaking changes when submitting a pull request. It includes sections for describing who is affected, migration steps, justification, and severity assessment.

LANGUAGE: markdown
CODE:
### New breaking change here

- **Who does this affect**:
- **How to migrate**:
- **Why make this breaking change**:
- **Severity (number of people affected x effort)**:

----------------------------------------

TITLE: Suppressing Multiple Svelte Compiler Warnings
DESCRIPTION: Shows how to suppress multiple accessibility warnings with an explanatory note using a single svelte-ignore comment directive.

LANGUAGE: svelte
CODE:
<!-- svelte-ignore a11y_click_events_have_key_events, a11y_no_static_element_interactions (because of reasons) -->
<div onclick>...</div>

----------------------------------------

TITLE: Displaying Svelte Logo with Dark Mode Support in HTML
DESCRIPTION: This HTML snippet creates a responsive logo display for Svelte, using the <picture> element to support different images based on the user's color scheme preference.

LANGUAGE: html
CODE:
<a href="https://svelte.dev">
	<picture>
		<source media="(prefers-color-scheme: dark)" srcset="assets/banner_dark.png">
		<img src="assets/banner.png" alt="Svelte - web development for the rest of us" />
	</picture>
</a>

----------------------------------------

TITLE: Basic Scoped Styling in Svelte
DESCRIPTION: Demonstrates how Svelte scopes CSS styles to a component by adding a unique class (e.g. svelte-123xyz) to affected elements. The example shows a paragraph style that will only apply to p elements within the component.

LANGUAGE: svelte
CODE:
<style>
	p {
		/* this will only affect <p> elements in this component */
		color: burlywood;
	}
</style>

----------------------------------------

TITLE: Basic Scoped Styling in Svelte
DESCRIPTION: Demonstrates how Svelte scopes CSS styles to a component by adding a unique class (e.g. svelte-123xyz) to affected elements. The example shows a paragraph style that will only apply to p elements within the component.

LANGUAGE: svelte
CODE:
<style>
	p {
		/* this will only affect <p> elements in this component */
		color: burlywood;
	}
</style>

----------------------------------------

TITLE: Using Svelte Key Block with Components
DESCRIPTION: Shows how to use a key block around a component. This causes the component to be reinstantiated and reinitialized when the value changes.

LANGUAGE: svelte
CODE:
{#key value}
	<Component />
{/key}

----------------------------------------

TITLE: Using State Rune in Svelte
DESCRIPTION: Demonstrates the basic usage of a rune with the $state function. Runes are special compiler-controlled symbols that don't require imports and can't be used as regular functions or variables.

LANGUAGE: javascript
CODE:
let message = $state('hello');

----------------------------------------

TITLE: Using State Rune in Svelte
DESCRIPTION: Demonstrates the basic usage of a rune with the $state function. Runes are special compiler-controlled symbols that don't require imports and can't be used as regular functions or variables.

LANGUAGE: javascript
CODE:
let message = $state('hello');

----------------------------------------

TITLE: Using Context with Reactive State in Svelte
DESCRIPTION: Illustrates how to use context with reactive state in Svelte, including setting context with a state object and updating it.

LANGUAGE: svelte
CODE:
<script>
	import { setContext } from 'svelte';
	import Child from './Child.svelte';

	let counter = $state({
		count: 0
	});

	setContext('counter', counter);
</script>

<button onclick={() => counter.count += 1}>
	increment
</button>

<Child />
<Child />
<Child />

----------------------------------------

TITLE: Basic Slot Implementation in Svelte
DESCRIPTION: Demonstrates the basic usage of slots in Svelte components. Shows how content can be passed from a parent component to a child component using slots.

LANGUAGE: svelte
CODE:
<!--- file: App.svelte --->
<script>
	import Modal from './Modal.svelte';
</script>

<Modal>This is some slotted content</Modal>

LANGUAGE: svelte
CODE:
<!--- file: Modal.svelte --->
<div class="modal">
	<slot></slot>
</div>

----------------------------------------

TITLE: Defining YAML Front Matter for Svelte Reference Page
DESCRIPTION: This snippet defines the YAML front matter for a Svelte reference documentation page. It sets the title of the page to 'Reference', which is likely used by a static site generator to create the page title and potentially for navigation purposes.

LANGUAGE: yaml
CODE:
---
title: Reference
---

----------------------------------------

TITLE: Demonstrating Reactive Statements and Assignments in Svelte
DESCRIPTION: This snippet shows how to use reactive statements and assignments in Svelte. It demonstrates logging a calculation and updating a sum reactively based on changes to variables a and b.

LANGUAGE: svelte
CODE:
<script>
	let a = 1;
	let b = 2;

	// this is a 'reactive statement', and it will re-run
	// when `a`, `b` or `sum` change
	$: console.log(`${a} + ${b} = ${sum}`);

	// this is a 'reactive assignment' — `sum` will be
	// recalculated when `a` or `b` change. It is
	// not necessary to declare `sum` separately
	$: sum = a + b;
</script>

----------------------------------------

TITLE: Advanced Custom Element Configuration in Svelte
DESCRIPTION: Demonstrates advanced configuration options for custom elements including shadow DOM settings, property reflection, type definitions, and class extension.

LANGUAGE: svelte
CODE:
<svelte:options
	customElement={{
		tag: 'custom-element',
		shadow: 'none',
		props: {
			name: { reflect: true, type: 'Number', attribute: 'element-index' }
		},
		extend: (customElementConstructor) => {
			return class extends customElementConstructor {
				static formAssociated = true;

				constructor() {
					super();
					this.attachedInternals = this.attachInternals();
				}

				randomIndex() {
					this.elementIndex = Math.random();
				}
			};
		}
	}}
/>

<script>
	let { elementIndex, attachedInternals } = $props();
	// ...
	function check() {
		attachedInternals.checkValidity();
	}
</script>

...

----------------------------------------

TITLE: Svelte Element with Explicit Namespace
DESCRIPTION: Shows how to specify an explicit namespace for the dynamic element using the xmlns attribute.

LANGUAGE: svelte
CODE:
<svelte:element this={tag} xmlns="http://www.w3.org/2000/svg" />

----------------------------------------

TITLE: Mouse events without keyboard events in Svelte
DESCRIPTION: Demonstrates the use of mouse events without corresponding keyboard events, which is not accessible.

LANGUAGE: svelte
CODE:
<!-- A11y: onmouseover must be accompanied by onfocus -->
<div onmouseover={handleMouseover} />

<!-- A11y: onmouseout must be accompanied by onblur -->
<div onmouseout={handleMouseout} />

----------------------------------------

TITLE: Applying Transitions with Svelte Key Block
DESCRIPTION: Demonstrates using a key block to trigger a transition effect whenever a value changes. In this example, a fade transition is applied to a div element.

LANGUAGE: svelte
CODE:
{#key value}
	<div transition:fade>{value}</div>
{/key}

----------------------------------------

TITLE: Object-based Class Assignment in Svelte
DESCRIPTION: Shows how to use an object to conditionally apply classes, where truthy keys become class names.

LANGUAGE: svelte
CODE:
<script>
	let { cool } = $props();
</script>

<div class={{ cool, lame: !cool }}>...</div>

----------------------------------------

TITLE: Implementing Custom Whoosh Transition in Svelte
DESCRIPTION: This snippet demonstrates a custom 'whoosh' transition function in Svelte. It applies a scaling effect to the element, preserving any existing transforms. The function uses customizable delay, duration, and easing parameters.

LANGUAGE: svelte
CODE:
<script>
	import { elasticOut } from 'svelte/easing';

	/** @type {boolean} */
	export let visible;

	/**
	 * @param {HTMLElement} node
	 * @param {{ delay?: number, duration?: number, easing?: (t: number) => number }} params
	 */
	function whoosh(node, params) {
		const existingTransform = getComputedStyle(node).transform.replace('none', '');

		return {
			delay: params.delay || 0,
			duration: params.duration || 400,
			easing: params.easing || elasticOut,
			css: (t, u) => `transform: ${existingTransform} scale(${t})`
		};
	}
</script>

{#if visible}
	<div in:whoosh>whooshes in</div>
{/if}

----------------------------------------

TITLE: Renaming Props in Svelte
DESCRIPTION: Shows how to rename props during destructuring in Svelte, useful for invalid identifiers or JavaScript keywords.

LANGUAGE: javascript
CODE:
let { super: trouper = 'lights are gonna find me' } = $props();

----------------------------------------

TITLE: Advanced Error Handling with <svelte:boundary> in Svelte
DESCRIPTION: Shows a more complex example of using <svelte:boundary> with state management for error handling and recovery outside the boundary component.

LANGUAGE: svelte
CODE:
<script>
	let error = $state(null);
	let reset = $state(() => {});

	function onerror(e, r) {
		error = e;
		reset = r;
	}
</script>

<svelte:boundary {onerror}>
	<FlakyComponent />
</svelte:boundary>

{#if error}
	<button onclick={() => {
		error = null;
		reset();
	}}>
		oops! try again
	</button>
{/if}

----------------------------------------

TITLE: Including Generated Compiler Errors Documentation in Markdown
DESCRIPTION: Markdown include directive that pulls in compiler error documentation from a generated file named 'compile-errors.md' located in the .generated directory.

LANGUAGE: markdown
CODE:
@include .generated/compile-errors.md

----------------------------------------

TITLE: Deprecated beforeUpdate and afterUpdate in Svelte 5
DESCRIPTION: Shows the deprecated beforeUpdate and afterUpdate hooks from Svelte 4, which are shimmed in Svelte 5 for backwards compatibility but not available in components using runes.

LANGUAGE: svelte
CODE:
<script>
	import { beforeUpdate, afterUpdate } from 'svelte';

	beforeUpdate(() => {
		console.log('the component is about to update');
	});

	afterUpdate(() => {
		console.log('the component just updated');
	});
</script>

----------------------------------------

TITLE: Using unknown roles in Svelte
DESCRIPTION: Demonstrates the use of an unknown role, likely due to a typo.

LANGUAGE: svelte
CODE:
<!-- A11y: Unknown role 'toooltip' (did you mean 'tooltip'?) -->
<div role="toooltip"></div>

----------------------------------------

TITLE: Legacy Code Error Template in Markdown
DESCRIPTION: Template for displaying an error message when deprecated code is used, suggesting the newer alternative syntax.

LANGUAGE: markdown
CODE:
> `%code%` is no longer valid — please use `%suggestion%` instead