TITLE: Implementing a Sortable Grid in React Native
DESCRIPTION: This example demonstrates how to create a basic sortable grid with react-native-sortables. It shows how to define data, render grid items using a callback function, and configure the grid's appearance with column count and spacing.

LANGUAGE: tsx
CODE:
import { useCallback } from 'react';
import { Text, View, StyleSheet } from 'react-native';
import type { SortableGridRenderItem } from 'react-native-sortables';
import Sortable from 'react-native-sortables';

const DATA = Array.from({ length: 12 }, (_, index) => `Item ${index + 1}`);

export default function Grid() {
  const renderItem = useCallback<SortableGridRenderItem<string>>(
    ({ item }) => (
      <View style={styles.card}>
        <Text>{item}</Text>
      </View>
    ),
    []
  );

  return (
    <Sortable.Grid
      columns={3}
      data={DATA} // Pass your data here
      renderItem={renderItem}
      rowGap={10}
      columnGap={10}
    />
  );
}

const styles = StyleSheet.create({
  card: {
    backgroundColor: '#36877F',
    height: 100,
    borderRadius: 10,
    alignItems: 'center',
    justifyContent: 'center'
  }
});

----------------------------------------

TITLE: Creating a Basic Sortable Flex Layout in React Native
DESCRIPTION: A simple example showing how to implement a Sortable.Flex layout with a list of countries. It demonstrates that the component has no required props and can render any content within it, with items having flexible heights and appearances.

LANGUAGE: tsx
CODE:
import { Text, View, StyleSheet } from 'react-native';
import Sortable from 'react-native-sortables';

const DATA = [
  'Poland',
  'Germany',
  'France',
  'Italy',
  'Spain',
  'Portugal',
  'Greece',
  'Great Britain',
  'United States',
  'Canada',
  'Australia',
  'New Zealand'
];

export default function Flex() {
  return (
    <Sortable.Flex gap={10} padding={10}>
      {/* You can render anything within the Sortable.Flex component */}
      {DATA.map(item => (
        <View style={styles.cell} key={item}>
          <Text>{item}</Text>
        </View>
      ))}
    </Sortable.Flex>
  );
}

const styles = StyleSheet.create({
  cell: {
    backgroundColor: '#36877F',
    borderRadius: 9999,
    padding: 10,
    alignItems: 'center',
    justifyContent: 'center'
  }
});

----------------------------------------

TITLE: Installing react-native-sortables with NPM
DESCRIPTION: Command to install the react-native-sortables package using NPM package manager. This adds the library to your project's dependencies.

LANGUAGE: sh
CODE:
npm install react-native-sortables

----------------------------------------

TITLE: Installing react-native-sortables with Yarn
DESCRIPTION: Command to install the react-native-sortables package using Yarn package manager. This adds the library to your project's dependencies.

LANGUAGE: sh
CODE:
yarn add react-native-sortables

----------------------------------------

TITLE: Implementing a Sortable Grid with Nestable Touchable Components in React Native
DESCRIPTION: This example demonstrates how to create a sortable grid with proper press event handling using Sortable.Pressable. The component renders a 2-column grid of items, each with a delete button that removes the item when pressed. Unlike React Native's Pressable, Sortable.Pressable correctly distinguishes between drag operations and press events.

LANGUAGE: tsx
CODE:
import { useCallback, useState } from 'react';
import { Text, View, StyleSheet } from 'react-native';
import type { SortableGridRenderItem } from 'react-native-sortables';
import Sortable from 'react-native-sortables';

const DATA = Array.from({ length: 4 }, (_, index) => `Item ${index + 1}`);

export default function Grid() {
  const [data, setData] = useState(DATA);

  const renderItem = useCallback<SortableGridRenderItem<string>>(
    ({ item }) => (
      <View style={styles.card}>
        <Text style={styles.text}>{item}</Text>
        <Sortable.Pressable
          style={styles.deleteButton}
          onPress={() => setData(prev => prev.filter(i => i !== item))}>
          <Text style={styles.text}>Delete</Text>
        </Sortable.Pressable>
      </View>
    ),
    []
  );

  return (
    <View style={styles.container}>
      <Sortable.Grid
        columns={2}
        data={data}
        renderItem={renderItem}
        rowGap={10}
        columnGap={10}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 10
  },
  card: {
    backgroundColor: '#36877F',
    height: 100,
    borderRadius: 10,
    alignItems: 'center',
    justifyContent: 'center',
    gap: 10
  },
  text: {
    color: 'white',
    fontWeight: 'bold'
  },
  deleteButton: {
    backgroundColor: '#6AA67C',
    padding: 10,
    borderRadius: 10
  }
});

----------------------------------------

TITLE: Implementing Auto Scroll with SortableGrid in React Native
DESCRIPTION: This snippet demonstrates how to set up a sortable grid with auto scroll functionality using react-native-sortables. It creates a scrollable grid of 30 items in 3 columns with auto scroll enabled when dragging items near the edge of the screen. The example includes commented options for customizing auto scroll behavior.

LANGUAGE: tsx
CODE:
import { useCallback } from 'react';
import { StyleSheet, Text, View } from 'react-native';
import Animated, { useAnimatedRef } from 'react-native-reanimated';
import type { SortableGridRenderItem } from 'react-native-sortables';
import Sortable from 'react-native-sortables';

const DATA = Array.from({ length: 30 }, (_, index) => `Item ${index + 1}`);

export default function Example() {
  const scrollableRef = useAnimatedRef<Animated.ScrollView>();

  const renderItem = useCallback<SortableGridRenderItem<string>>(
    ({ item }) => (
      <View style={styles.card}>
        <Text style={styles.text}>{item}</Text>
      </View>
    ),
    []
  );

  return (
    <Animated.ScrollView
      contentContainerStyle={styles.contentContainer}
      ref={scrollableRef}>
      <Sortable.Grid
        columnGap={10}
        columns={3}
        data={DATA}
        renderItem={renderItem}
        rowGap={10}
        scrollableRef={scrollableRef} // required for auto scroll
        // autoScrollActivationOffset={75}
        // autoScrollSpeed={1}
        // autoScrollEnabled={true}
      />
    </Animated.ScrollView>
  );
}

const styles = StyleSheet.create({
  card: {
    alignItems: 'center',
    backgroundColor: '#36877F',
    borderRadius: 10,
    height: 100,
    justifyContent: 'center'
  },
  contentContainer: {
    padding: 10
  },
  text: {
    color: 'white',
    fontWeight: 'bold'
  }
});

----------------------------------------

TITLE: Implementing Sortable Grid with Different Item Heights in React Native
DESCRIPTION: This example creates a Sortable Grid component that handles items with varying heights. The component renders a 3-column grid with 12 items, each having a randomly generated height between 50 and 200 pixels. The rendering is handled by a callback function that creates styled View components for each item.

LANGUAGE: tsx
CODE:
import { useCallback } from 'react';
import { StyleSheet, Text, View } from 'react-native';
import type { SortableGridRenderItem } from 'react-native-sortables';
import Sortable from 'react-native-sortables';

const DATA = Array.from({ length: 12 }, (_, index) => `Item ${index + 1}`);

export default function Example() {
  const renderItem = useCallback<SortableGridRenderItem<string>>(
    ({ item }) => (
      <View
        style={[
          styles.card,
          { height: Math.random() * 150 + 50 } // random height for demo purposes
        ]}>
        <Text style={styles.text}>{item}</Text>
      </View>
    ),
    []
  );

  return (
    <View style={styles.container}>
      <Sortable.Grid
        columnGap={10}
        columns={3}
        data={DATA}
        renderItem={renderItem}
        rowGap={10}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  card: {
    alignItems: 'center',
    backgroundColor: '#36877F',
    borderRadius: 10,
    height: 100,
    justifyContent: 'center'
  },
  container: {
    padding: 10
  },
  text: {
    color: 'white',
    fontWeight: 'bold'
  }
});

----------------------------------------

TITLE: Creating Custom Drop Indicator Component with Animations
DESCRIPTION: This advanced example demonstrates how to implement a fully custom drop indicator component using react-native-reanimated. The custom component features color interpolation based on the drop position and animated scaling effects when the drop location changes.

LANGUAGE: tsx
CODE:
import { useCallback } from 'react';
import { StyleSheet, Text, View } from 'react-native';
import Animated, {
  interpolateColor,
  useAnimatedReaction,
  useAnimatedStyle,
  useDerivedValue,
  useSharedValue,
  withSequence,
  withSpring,
  withTiming
} from 'react-native-reanimated';
import type {
  DropIndicatorComponentProps,
  SortableGridRenderItem
} from 'react-native-sortables';
import Sortable from 'react-native-sortables';

const DATA = Array.from({ length: 18 }, (_, index) => `Item ${index + 1}`);

export default function Example() {
  const renderItem = useCallback<SortableGridRenderItem<string>>(
    ({ item }) => (
      <View style={styles.card}>
        <Text style={styles.text}>{item}</Text>
      </View>
    ),
    []
  );

  return (
    <View style={styles.container}>
      <Sortable.Grid
        columnGap={10}
        columns={3}
        data={DATA}
        DropIndicatorComponent={DropIndicator}
        renderItem={renderItem}
        rowGap={10}
        showDropIndicator
      />
    </View>
  );
}

function DropIndicator({
  activeAnimationProgress,
  activeItemKey,
  dropIndex,
  orderedItemKeys,
  style
}: DropIndicatorComponentProps) {
  const itemsCount = useDerivedValue(() => orderedItemKeys.value.length);
  const indexes = useDerivedValue(() =>
    Array.from({ length: itemsCount.value }, (_, i) => i)
  );
  const colors = useDerivedValue(() =>
    Array.from({ length: itemsCount.value }, (_, i) => {
      const hue = (360 / itemsCount.value) * i;
      return `hsl(${hue}, 100%, 50%)`;
    })
  );

  const scale = useSharedValue(0);
  const colorIndex = useSharedValue(0);
  const showIndicator = useDerivedValue(
    () => activeAnimationProgress.value > 0.2 && activeItemKey.value !== null
  );

  useAnimatedReaction(
    () => ({
      count: itemsCount.value,
      index: dropIndex.value,
      show: showIndicator.value
    }),
    ({ count, index, show }, prev) => {
      if (show !== prev?.show) {
        scale.value = withSpring(+show);
      } else if (show && index !== prev?.index) {
        colorIndex.value = withTiming(index % count);
        scale.value = withSequence(
          withTiming(0.75, { duration: 100 }),
          withSpring(1)
        );
      }
    }
  );

  const animatedStyle = useAnimatedStyle(() => ({
    backgroundColor: interpolateColor(
      colorIndex.value,
      indexes.value,
      colors.value
    ),
    transform: [{ scale: scale.value }]
  }));

  return (
    <Animated.View style={[style, styles.customIndicator, animatedStyle]} />
  );
}

const styles = StyleSheet.create({
  card: {
    alignItems: 'center',
    backgroundColor: '#36877F',
    borderRadius: 10,
    height: 100,
    justifyContent: 'center'
  },
  container: {
    padding: 10
  },
  customIndicator: { borderStyle: 'solid' },
  text: {
    color: 'white',
    fontWeight: 'bold'
  }
});

----------------------------------------

TITLE: Implementing Sortable Layer with React Native Sortables
DESCRIPTION: Example code demonstrating how to use the Sortable.Layer component to wrap a Sortable.Grid or Sortable.Flex component for proper zIndex management. This ensures dragged items remain visible above other components.

LANGUAGE: tsx
CODE:
import Sortable from 'react-native-sortables';

function MyComponent() {
  return (
    // ... other components
    <Sortable.Layer>
      {/* ... other components */}
      <Sortable.Grid // or Sortable.Flex
      // ... sortable grid props
      />
      {/* ... other components */}
    </Sortable.Layer>
    // ... other components
  );
}

----------------------------------------

TITLE: Creating a Custom Drop Indicator Component in React Native Sortables
DESCRIPTION: This example demonstrates how to implement a custom Drop Indicator component with a circular border radius and integrate it with a Sortable.Grid component. The component receives styling props from the parent sortable component.

LANGUAGE: tsx
CODE:
import { View } from 'react-native';
import type { DropIndicatorComponentProps } from 'react-native-sortables';

function CustomDropIndicator({
  style // style from the `dropIndicatorStyle` prop or a default style
}: DropIndicatorComponentProps) {
  return <View style={[style, { borderRadius: '100%' }]} />;
}

export default function Grid() {
  return (
    <Sortable.Grid
      DropIndicatorComponent={CustomDropIndicator}
      // ... other props
    />
  );
}

----------------------------------------

TITLE: SortableGridRenderItem Type Definition in TypeScript
DESCRIPTION: Type definitions for the renderItem prop, which outlines the function signature and information provided to render each item in the sortable grid.

LANGUAGE: tsx
CODE:
type SortableGridRenderItem<T> = (
  info: SortableGridRenderItemInfo<T>
) => JSX.Element;

type SortableGridRenderItemInfo<T> = {
  item: T;
  index: number;
};

----------------------------------------

TITLE: Defining DragEndCallback Interface for React Native Sortables
DESCRIPTION: Type definitions for the drag end callback function and its parameters, providing comprehensive information about the drag operation including source and destination positions and utility functions for reordering data.

LANGUAGE: typescript
CODE:
type SortableFlexDragEndCallback = (params: SortableFlexDragEndParams) => void;

type SortableFlexDragEndParams = {
  key: string;
  fromIndex: number;
  toIndex: number;
  indexToKey: Array<string>;
  keyToIndex: Record<string, number>;
  order: <I>(data: Array<I>) => Array<I>; // returns new array with items in the new order
};

----------------------------------------

TITLE: Defining DragStartCallback Interface for React Native Sortables
DESCRIPTION: Type definitions for the drag start callback function and its parameters, providing information about which item is being dragged and from which position.

LANGUAGE: typescript
CODE:
type DragStartCallback = (params: DragStartParams) => void;

type DragStartParams = {
  key: string;
  fromIndex: number;
};

----------------------------------------

TITLE: SortableGridDragEndCallback Type Definition for Sorting Completion
DESCRIPTION: Type definition for the callback fired when a drag operation ends, providing comprehensive information about the final state of the grid including reordered data.

LANGUAGE: tsx
CODE:
type SortableGridDragEndCallback<T> = (
  params: SortableGridDragEndParams<T>
) => void;

type SortableGridDragEndParams<T> = {
  key: string;
  fromIndex: number;
  toIndex: number;
  indexToKey: Array<string>;
  keyToIndex: Record<string, number>;
  data: Array<T>;
};

----------------------------------------

TITLE: Defining OrderChangeCallback Interface for React Native Sortables
DESCRIPTION: Type definitions for the order change callback function and its parameters, triggered when the order of items changes during dragging, providing information about the current item positions.

LANGUAGE: typescript
CODE:
type OrderChangeCallback = (params: OrderChangeParams) => void;

type OrderChangeParams = {
  key: string;
  fromIndex: number;
  toIndex: number;
  indexToKey: Array<string>;
  keyToIndex: Record<string, number>;
};

----------------------------------------

TITLE: Defining DragMoveCallback Interface for React Native Sortables
DESCRIPTION: Type definitions for the drag move callback function and its parameters, providing real-time information about an item being dragged including its key, original position, and touch data.

LANGUAGE: typescript
CODE:
type DragMoveCallback = (params: DragMoveParams) => void;

type DragMoveParams = {
  key: string;
  fromIndex: number;
  touchData: TouchData;
};

----------------------------------------

TITLE: Defining DropIndicatorComponentProps Interface for React Native Sortables
DESCRIPTION: Type definition for the props passed to custom drop indicator components. Includes shared values for tracking activation progress, touched items, drop positions, and styling information.

LANGUAGE: typescript
CODE:
type DropIndicatorComponentProps = {
  activationProgress: SharedValue<number>;
  touchedItemKey: SharedValue<null | string>;
  dropIndex: SharedValue<number>;
  dropPosition: SharedValue<Vector>;
  orderedItemKeys: SharedValue<Array<string>>;
  style: ViewStyle;
};

----------------------------------------

TITLE: DropIndicatorComponentProps Type Definition in TypeScript
DESCRIPTION: Type definition for the props passed to a custom drop indicator component, including shared values for animation and positioning data.

LANGUAGE: tsx
CODE:
type DropIndicatorComponentProps = {
  activationProgress: SharedValue<number>;
  touchedItemKey: SharedValue<null | string>;
  dropIndex: SharedValue<number>;
  dropPosition: SharedValue<Vector>;
  orderedItemKeys: SharedValue<Array<string>>;
  style: ViewStyle;
};

----------------------------------------

TITLE: Defining Animatable Type in TypeScript for React Native Sortables
DESCRIPTION: Type definition for Animatable<T> which can accept either a Reanimated Shared Value or a static value of type T. This is used throughout the props that can be animated.

LANGUAGE: typescript
CODE:
type Animatable<T> = SharedValue<T> | T;

----------------------------------------

TITLE: Defining Animatable Type in TypeScript
DESCRIPTION: Type definition for Animatable properties that can accept either a Reanimated Shared Value or a static value of the specified type.

LANGUAGE: typescript
CODE:
type Animatable<T> = SharedValue<T> | T;

----------------------------------------

TITLE: Defining LayoutAnimation Type for React Native Sortables
DESCRIPTION: Type definition for layout animations, supporting various animation formats including BaseAnimationBuilder, EntryExitAnimationFunction, or a BaseAnimationBuilder class for item entering/exiting animations.

LANGUAGE: typescript
CODE:
type LayoutAnimation =
  | BaseAnimationBuilder
  | EntryExitAnimationFunction
  | typeof BaseAnimationBuilder;

----------------------------------------

TITLE: LayoutAnimation Type Definition for Item Transitions
DESCRIPTION: Type definition for layout animations used for entering and exiting animations, supporting various Reanimated animation builders and functions.

LANGUAGE: tsx
CODE:
type LayoutAnimation =
  | BaseAnimationBuilder
  | EntryExitAnimationFunction
  | typeof BaseAnimationBuilder;

----------------------------------------

TITLE: Defining LayoutTransition Type for React Native Sortables
DESCRIPTION: Type definition for layout transitions, supporting various animation formats including BaseAnimationBuilder, LayoutAnimationFunction, or a BaseAnimationBuilder class for item reordering animations.

LANGUAGE: typescript
CODE:
type LayoutTransition =
  | BaseAnimationBuilder
  | LayoutAnimationFunction
  | typeof BaseAnimationBuilder;

----------------------------------------

TITLE: LayoutTransition Type Definition for Grid Reordering
DESCRIPTION: Type definition for layout transitions when items are reordered in the grid, supporting Reanimated animation builders and functions.

LANGUAGE: tsx
CODE:
type LayoutTransition =
  | BaseAnimationBuilder
  | LayoutAnimationFunction
  | typeof BaseAnimationBuilder;

----------------------------------------

TITLE: Implementing a Sortable Grid with Item Snap in React Native
DESCRIPTION: This example demonstrates how to create a sortable grid with the item snap feature using react-native-sortables. It sets up a basic 2-column grid with 4 items and allows for customization of snap behavior through commented properties.

LANGUAGE: tsx
CODE:
import { useCallback } from 'react';
import { StyleSheet, Text, View } from 'react-native';
import type { SortableGridRenderItem } from 'react-native-sortables';
import Sortable from 'react-native-sortables';

const DATA = Array.from({ length: 4 }, (_, index) => `Item ${index + 1}`);

export default function Example() {
  const renderItem = useCallback<SortableGridRenderItem<string>>(
    ({ item }) => (
      <View style={styles.card}>
        <Text style={styles.text}>{item}</Text>
      </View>
    ),
    []
  );

  return (
    <View style={styles.container}>
      <Sortable.Grid
        columnGap={10}
        columns={2}
        data={DATA}
        renderItem={renderItem}
        rowGap={10}
        // enableActiveItemSnap={true}
        // snapOffsetX='50%'
        // snapOffsetY='50%'
      />
    </View>
  );
}

const styles = StyleSheet.create({
  card: {
    alignItems: 'center',
    backgroundColor: '#36877F',
    borderRadius: 10,
    height: 100,
    justifyContent: 'center'
  },
  container: {
    padding: 10
  },
  text: {
    color: 'white',
    fontWeight: 'bold'
  }
});

----------------------------------------

TITLE: Implementing Default Drop Indicator in react-native-sortables
DESCRIPTION: This example demonstrates the basic implementation of a sortable grid with a default drop indicator. The code creates a 3-column grid with 18 items and enables the built-in drop indicator that shows where an item will be placed when dropped.

LANGUAGE: tsx
CODE:
import { useCallback } from 'react';
import { StyleSheet, Text, View } from 'react-native';
import type { SortableGridRenderItem } from 'react-native-sortables';
import Sortable from 'react-native-sortables';

const DATA = Array.from({ length: 18 }, (_, index) => `Item ${index + 1}`);

export default function Example() {
  const renderItem = useCallback<SortableGridRenderItem<string>>(
    ({ item }) => (
      <View style={styles.card}>
        <Text style={styles.text}>{item}</Text>
      </View>
    ),
    []
  );

  return (
    <View style={styles.container}>
      <Sortable.Grid
        columnGap={10}
        columns={3}
        data={DATA}
        renderItem={renderItem}
        rowGap={10}
        showDropIndicator
      />
    </View>
  );
}

const styles = StyleSheet.create({
  card: {
    alignItems: 'center',
    backgroundColor: '#36877F',
    borderRadius: 10,
    height: 100,
    justifyContent: 'center'
  },
  container: {
    padding: 10
  },
  text: {
    color: 'white',
    fontWeight: 'bold'
  }
});

----------------------------------------

TITLE: Setting Custom autoScrollActivationOffset in SortableGrid
DESCRIPTION: This code snippet shows how to customize the autoScrollActivationOffset property for a SortableGrid component, which defines the distance from the edge of the screen where auto scrolling begins when dragging an item.

LANGUAGE: tsx
CODE:
autoScrollActivationOffset={200}

----------------------------------------

TITLE: Configuring autoScrollSpeed in SortableGrid
DESCRIPTION: This code snippet demonstrates how to adjust the autoScrollSpeed property of a SortableGrid component, which controls how quickly the screen scrolls when dragging items near the edge. A lower value creates slower scrolling.

LANGUAGE: tsx
CODE:
autoScrollSpeed={0.2}

----------------------------------------

TITLE: Disabling Item Snap in React Native Sortables
DESCRIPTION: This code snippet shows how to disable the item snap feature in react-native-sortables by setting the enableActiveItemSnap property to false.

LANGUAGE: tsx
CODE:
enableActiveItemSnap={false}

----------------------------------------

TITLE: Configuring Numeric Snap Offsets in React Native Sortables
DESCRIPTION: This code snippet demonstrates how to set custom numeric values for both X and Y snap offsets, positioning the item precisely at the touch point with no offset.

LANGUAGE: tsx
CODE:
snapOffsetX={0}
snapOffsetY={0}

----------------------------------------

TITLE: Setting Mixed Percentage and Numeric Snap Offsets in React Native Sortables
DESCRIPTION: This code snippet shows how to use mixed offset types, with X offset specified as a percentage (120%) and Y offset as a numeric value (10), creating an asymmetric snap behavior.

LANGUAGE: tsx
CODE:
snapOffsetX='120%'
snapOffsetY={10}

----------------------------------------

TITLE: Customizing Drop Indicator Style in react-native-sortables
DESCRIPTION: This example shows how to customize the appearance of the drop indicator using the dropIndicatorStyle prop. The custom style adds a semi-transparent background with a solid border to provide more distinct visual feedback during drag operations.

LANGUAGE: tsx
CODE:
import { useCallback } from 'react';
import { StyleSheet, Text, View } from 'react-native';
import type { SortableGridRenderItem } from 'react-native-sortables';
import Sortable from 'react-native-sortables';

const DATA = Array.from({ length: 18 }, (_, index) => `Item ${index + 1}`);

export default function Example() {
  const renderItem = useCallback<SortableGridRenderItem<string>>(
    ({ item }) => (
      <View style={styles.card}>
        <Text style={styles.text}>{item}</Text>
      </View>
    ),
    []
  );

  return (
    <View style={styles.container}>
      <Sortable.Grid
        columnGap={10}
        columns={3}
        data={DATA}
        dropIndicatorStyle={styles.dropIndicator} // Custom style
        renderItem={renderItem}
        rowGap={10}
        showDropIndicator
      />
    </View>
  );
}

const styles = StyleSheet.create({
  card: {
    alignItems: 'center',
    backgroundColor: '#36877F',
    borderRadius: 10,
    height: 100,
    justifyContent: 'center'
  },
  container: {
    padding: 10
  },
  dropIndicator: {
    backgroundColor: 'rgba(54, 135, 127, 0.5)',
    borderColor: '#36877f',
    borderStyle: 'solid',
    borderWidth: 5
  },
  text: {
    color: 'white',
    fontWeight: 'bold'
  }
});

----------------------------------------

TITLE: Default Style Object for Drop Indicator in React Native Sortables
DESCRIPTION: The default style configuration for the Drop Indicator component in react-native-sortables. This style is applied by default when no custom dropIndicatorStyle is provided, creating a dashed border indicator with light background.

LANGUAGE: ts
CODE:
{
  backgroundColor: 'rgba(0, 0, 0, 0.1)',
  borderColor: 'black',
  borderRadius: 10,
  borderStyle: 'dashed',
  borderWidth: 2,
  flex: 1
}

----------------------------------------

TITLE: Default dropIndicatorStyle Configuration in TypeScript
DESCRIPTION: Default style configuration for the drop indicator component, which can be customized to change the appearance of the drop indicator in the sortable grid.

LANGUAGE: typescript
CODE:
{
  backgroundColor: 'rgba(0, 0, 0, 0.1)',
  borderColor: 'black',
  borderRadius: 10,
  borderStyle: 'dashed',
  borderWidth: 2,
  flex: 1
}

----------------------------------------

TITLE: OrderChangeCallback Type Definition for Grid Reordering
DESCRIPTION: Type definition for the callback fired when the order of items changes during a drag operation, providing mapping information between indices and keys.

LANGUAGE: tsx
CODE:
type OrderChangeCallback = (params: OrderChangeParams) => void;

type OrderChangeParams = {
  key: string;
  fromIndex: number;
  toIndex: number;
  indexToKey: Array<string>;
  keyToIndex: Record<string, number>;
};

----------------------------------------

TITLE: DragMoveCallback Type Definition for Drag Motion Tracking
DESCRIPTION: Type definition for the callback fired during drag movement, providing information about the dragged item and touch coordinates.

LANGUAGE: tsx
CODE:
type DragMoveCallback = (params: DragMoveParams) => void;

type DragMoveParams = {
  key: string;
  fromIndex: number;
  touchData: TouchData;
};

----------------------------------------

TITLE: SortableGridStrategy Type Definition for Reordering Behavior
DESCRIPTION: Type definition for the strategy that controls how items are reordered when dragging, supporting preset strategies or custom factory functions.

LANGUAGE: tsx
CODE:
type SortableGridStrategy = 'insert' | 'swap' | SortableGridStrategyFactory;

----------------------------------------

TITLE: Defining SortableFlexStrategy Types in TypeScript
DESCRIPTION: Type definition for the strategy property that controls how items are reordered during drag operations. The type can be either a string literal 'insert' or a custom strategy factory function.

LANGUAGE: tsx
CODE:
type SortableFlexStrategy = 'insert' | SortableFlexStrategyFactory;

----------------------------------------

TITLE: Offset Type Definition for Snap Positioning
DESCRIPTION: Type definition for the Offset type used in snap offset properties, which can be either a percentage string or a number value.

LANGUAGE: typescript
CODE:
type Offset = `${number}%` | number;

----------------------------------------

TITLE: Offset Type Definition for Snap Positioning (Duplicate)
DESCRIPTION: Type definition for the Offset type used in snap offset properties, which can be either a percentage string or a number value.

LANGUAGE: typescript
CODE:
type Offset = `${number}%` | number;

----------------------------------------

TITLE: Setting Up Development Environment for React Native Sortables
DESCRIPTION: Commands to install dependencies and set up CocoaPods for iOS development. This is the initial setup required before starting development on the project.

LANGUAGE: bash
CODE:
yarn
yarn pod  # iOS only

----------------------------------------

TITLE: Starting the Development Server for Example Apps
DESCRIPTION: Commands to navigate to an example app directory and start the development server. This allows testing changes in different environments.

LANGUAGE: bash
CODE:
cd example/fabric  # or any other example
yarn start

----------------------------------------

TITLE: Running Example Apps from Project Root
DESCRIPTION: Commands to run specific example applications from the project root directory. This provides shortcuts for launching different example environments.

LANGUAGE: bash
CODE:
yarn example:fabric start
yarn example:paper android
yarn example:expo ios

----------------------------------------

TITLE: Installing Website Dependencies with Yarn
DESCRIPTION: Command to install all required dependencies for the Docusaurus website using Yarn package manager.

LANGUAGE: bash
CODE:
$ yarn

----------------------------------------

TITLE: Starting Local Development Server
DESCRIPTION: Command to start a local development server that opens a browser window. Changes to the website content are reflected live without server restart.

LANGUAGE: bash
CODE:
$ yarn start

----------------------------------------

TITLE: Building Static Website Content
DESCRIPTION: Command to generate static website content into the 'build' directory. The generated content can be served using any static content hosting service.

LANGUAGE: bash
CODE:
$ yarn build

----------------------------------------

TITLE: Deploying Website Using SSH
DESCRIPTION: Command to build and deploy the website using SSH authentication. This is used when you have SSH access configured for your repository.

LANGUAGE: bash
CODE:
$ USE_SSH=true yarn deploy

----------------------------------------

TITLE: Deploying Website Without SSH
DESCRIPTION: Command to build and deploy the website without SSH, using GitHub username authentication. This command builds the website and pushes to the 'gh-pages' branch for GitHub Pages hosting.

LANGUAGE: bash
CODE:
$ GIT_USER=<Your GitHub username> yarn deploy

----------------------------------------

TITLE: Importing Grid Video in JSX/Markdown
DESCRIPTION: Imports a video file and displays it as an autoplay video element in the documentation page.

LANGUAGE: jsx
CODE:
import gridVideo from '@site/static/video/grid.mp4';

<video autoPlay loop muted width='100%' src={gridVideo} />

----------------------------------------

TITLE: Importing Video Component in React Documentation
DESCRIPTION: Code snippet demonstrating how to import and display a video file in React documentation using the import statement and video HTML element with autoPlay, loop and muted attributes.

LANGUAGE: jsx
CODE:
import bannerVideo from '@site/static/video/banner.mp4';

<video autoPlay loop muted width='100%' src={bannerVideo} />

----------------------------------------

TITLE: Creating an Interactive Button with React in MDX
DESCRIPTION: Example of using JSX to create an interactive button component that displays an alert message when clicked. This demonstrates how React components can be embedded directly in Docusaurus MDX blog posts.

LANGUAGE: js
CODE:
<button onClick={() => alert('button clicked!')}>Click me!</button>

----------------------------------------

TITLE: Using Truncate Comment in Docusaurus Blog
DESCRIPTION: Shows how to use the HTML comment-based truncate marker to limit blog post size in list views. This marker determines where the blog post content is truncated when displayed in blog listing pages.

LANGUAGE: markdown
CODE:
<!--` `truncate` `-->