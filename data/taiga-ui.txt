TITLE: Configuring Taiga UI Root Component with Portal Layers
DESCRIPTION: Shows the implementation of tui-root component with multiple portal layers using ngProjectAs directive. Each layer serves a specific purpose in the UI hierarchy - from base content to overlays for dialogs, alerts, dropdowns, and hints.

LANGUAGE: html
CODE:
<tui-root>
  <!-- content of your app -->

  <!--
     If you need, you can add something between Taiga portal layers:
    -->
  <ng-container ngProjectAs="tuiOverContent">
    <!-- Content over app content -->
  </ng-container>
  <ng-container ngProjectAs="tuiOverDialogs">
    <!-- Content over dialogs -->
  </ng-container>
  <ng-container ngProjectAs="tuiOverAlerts">
    <!-- Content over alerts -->
  </ng-container>
  <ng-container ngProjectAs="tuiOverDropdowns">
    <!-- Content over dropdowns -->
  </ng-container>
  <ng-container ngProjectAs="tuiOverHints">
    <!-- Content over hints -->
  </ng-container>
</tui-root>

----------------------------------------

TITLE: Configuring Standalone Angular Component with TuiRoot
DESCRIPTION: Sets up a standalone Angular root component by importing and configuring TuiRoot from Taiga UI core package. The component uses standalone mode and defines basic metadata like selector and template URL.

LANGUAGE: typescript
CODE:
import {TuiRoot} from '@taiga-ui/core';
// ..

@Component({
  standalone: true,
  selector: 'app-root',
  imports: [
    TuiRoot,
    // ...
  ],
  templateUrl: './app.component.html',
})
export class App {}

----------------------------------------

TITLE: Installing Taiga UI Schematics using Angular CLI
DESCRIPTION: This command uses the Angular CLI to add Taiga UI to an existing Angular project. It will install the necessary dependencies and set up the initial configuration.

LANGUAGE: shell
CODE:
ng add taiga-ui

----------------------------------------

TITLE: Bootstrapping Angular Application with Taiga UI in TypeScript
DESCRIPTION: This snippet demonstrates how to bootstrap an Angular application with Taiga UI integration. It imports necessary modules, defines a root component, and configures the application with required providers including animations, router, and Taiga UI specific configurations.

LANGUAGE: typescript
CODE:
import 'zone.js';
import {provideRouter} from '@angular/router';
import {bootstrapApplication} from '@angular/platform-browser';
import {provideAnimations} from '@angular/platform-browser/animations';
import {Component} from '@angular/core';
import {TuiRoot, tuiAssetsPathProvider} from '@taiga-ui/core';
import {NG_EVENT_PLUGINS} from '@taiga-ui/event-plugins';

import {App} from './app/app.component';

@Component({
  standalone: true,
  selector: 'root',
  imports: [App, TuiRoot],
  template: '<tui-root> <app/> </tui-root>',
})
class Root {}

bootstrapApplication(Root, {
  providers: [
    provideAnimations(),
    provideRouter([]),
    /**
     * A workaround for StackBlitz only (it does not support assets).
     * Don't use this approach in real-world applications!
     */
    tuiAssetsPathProvider('https://taiga-ui.dev/assets/taiga-ui/icons'),
    NG_EVENT_PLUGINS,
    {
      provide: 'Pythons',
      useValue: ['John Cleese', 'Eric Idle', 'Michael Palin', 'Graham Chapman', 'Terry Gilliam', 'Terry Jones'],
    },
  ],
});

----------------------------------------

TITLE: Installing Taiga UI Packages with npm
DESCRIPTION: This command installs the main Taiga UI packages: CDK, core, kit, and icons. It uses npm's ability to install multiple packages in a single command by specifying them in curly braces.

LANGUAGE: bash
CODE:
npm i @taiga-ui/{cdk,core,kit,icons}

----------------------------------------

TITLE: Configuring Taiga UI Styles in Angular Project JSON
DESCRIPTION: This JSON configuration specifies the style imports required for a Taiga UI project in Angular. It includes the core theme, fonts, and an optional mobile styles import.

LANGUAGE: json
CODE:
{
  "targets": {
    "build": {
      "options": {
        "styles": [
          "@taiga-ui/core/styles/taiga-ui-theme.less",
          "@taiga-ui/core/styles/taiga-ui-fonts.less",
          "@taiga-ui/addon-mobile/styles/taiga-ui-mobile.less" // optional
        ]
      }
    }
  }
}

----------------------------------------

TITLE: Installing Taiga UI Core Dependencies
DESCRIPTION: Command to install the core Taiga UI packages including CDK and core modules. These packages provide the fundamental building blocks for using Taiga UI in an Angular application.

LANGUAGE: bash
CODE:
npm i @taiga-ui/{cdk,core}

----------------------------------------

TITLE: Version Compatibility Table
DESCRIPTION: HTML table showing Taiga UI version compatibility with different Angular versions, including support status and latest npm version badges.

LANGUAGE: html
CODE:
| Taiga UI | Angular              | Supported                  | Latest version (npm)                                                                               |
| -------- | -------------------- | -------------------------- | -------------------------------------------------------------------------------------------------- |
| `4.x.y`  | `^16.0.0` - `latest` | ✅ Current                 | ![npm version](https://img.shields.io/npm/v/@taiga-ui/cdk/latest?label=%40taiga-ui%2Fcdk%20~%20v4) |
| `3.x.y`  | `^12.0.0` - `latest` | ✅ Long-term support (LTS) | ![npm version](https://img.shields.io/npm/v/@taiga-ui/cdk/v3-lts?label=%40taiga-ui%2Fcdk%20~%20v3) |
| `2.x.y`  | `^9.0.0` - `^15.0.0` | ⚠️ No longer supported     | ![v2](https://img.shields.io/npm/v/@taiga-ui/cdk/v2-lts?label=%40taiga-ui%2Fcdk%20~%20v2)          |

----------------------------------------

TITLE: Installing Taiga UI Core Packages
DESCRIPTION: Command to install the essential Taiga UI packages including CDK, core, and kit components. These packages are required to build Taiga UI based Angular applications.

LANGUAGE: bash
CODE:
npm i @taiga-ui/{cdk,core,kit}

----------------------------------------

TITLE: Configuring Angular Bootstrap with Taiga UI Providers
DESCRIPTION: Sets up the main Angular application bootstrap configuration with Taiga UI integration. Includes essential providers for animations and event handling through Taiga UI's event plugins system.

LANGUAGE: typescript
CODE:
import {provideAnimations} from '@angular/platform-browser/animations';
import {NG_EVENT_PLUGINS} from '@taiga-ui/event-plugins';
// ...

bootstrapApplication(App, {
  providers: [
    provideAnimations(),
    NG_EVENT_PLUGINS,
    //...
  ],
}).catch((err) => console.error(err));

----------------------------------------

TITLE: Importing and Using TuiButton in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import the TuiButton component from Taiga UI and use it in a standalone Angular component. It shows the basic structure of a component with imports and the @Component decorator.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiButton} from '@taiga-ui/core';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiButton,
  ],
})
export class Example {}

----------------------------------------

TITLE: Configuring Taiga UI Styles in Project Build (JSON)
DESCRIPTION: This JSON configuration specifies the Taiga UI styles to be included in the project build. It includes core theme styles, font styles, and optional mobile styles. This configuration is typically part of a larger project setup file.

LANGUAGE: json
CODE:
{
  "projects": {
    "my-project": {
      "architect": {
        "build": {
          "options": {
            "styles": [
              "@taiga-ui/core/styles/taiga-ui-theme.less",
              "@taiga-ui/core/styles/taiga-ui-fonts.less",
              "@taiga-ui/addon-mobile/styles/taiga-ui-mobile.less" // optional
            ]
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Installing and Initializing Taiga UI with npm and Nx
DESCRIPTION: This snippet shows how to install Taiga UI using npm and then generate the initial setup using the Nx CLI. The first command installs the Taiga UI package, while the second command uses the Nx generator to add Taiga UI to an Angular project.

LANGUAGE: bash
CODE:
npm i taiga-ui
nx g taiga-ui:ng-add

----------------------------------------

TITLE: Creating Accordion Component with Taiga UI
DESCRIPTION: Implementation of a Taiga UI accordion component with three expandable sections. Each section contains a button with tuiAccordion directive and a tui-expand element with descriptive content about different Taiga UI packages.

LANGUAGE: html
CODE:
<tui-accordion>
  <button tuiAccordion>Taiga UI cdk</button>
  <tui-expand>
    Development kit consisting of the low level tools and abstractions used to develop Taiga UI Angular entities
  </tui-expand>
  <button tuiAccordion>Taiga UI core</button>
  <tui-expand>Basic elements needed to develop components, directives and more using Taiga UI design system</tui-expand>
  <button tuiAccordion>Taiga UI kit</button>
  <tui-expand>The main set of components used to build Taiga UI based Angular applications</tui-expand>
</tui-accordion>

----------------------------------------

TITLE: Installing Taiga UI Mobile Addon for Angular
DESCRIPTION: Command to install the Taiga UI Mobile addon package using npm. This package adds mobile-specific behaviors to Taiga UI components.

LANGUAGE: bash
CODE:
npm i @taiga-ui/addon-mobile

----------------------------------------

TITLE: Implementing Credit Card Form with Taiga UI Components
DESCRIPTION: Creates a reactive form with three Taiga UI text fields for card number, expiration date, and security code input. Uses specialized Taiga UI directives tuiInputCard, tuiInputExpire, and tuiInputCVC for proper formatting and validation of credit card information.

LANGUAGE: html
CODE:
<form [formGroup]="form">
  <tui-textfield>
    <label tuiLabel>Card number</label>
    <input
      formControlName="card"
      tuiInputCard
    />
  </tui-textfield>
  <tui-textfield>
    <label tuiLabel>Expire date</label>
    <input
      formControlName="expire"
      tuiInputExpire
    />
  </tui-textfield>
  <tui-textfield>
    <label tuiLabel>CVC/CVV</label>
    <input
      formControlName="cvc"
      tuiInputCVC
    />
  </tui-textfield>
</form>

----------------------------------------

TITLE: Implementing Taiga UI Checkbox with NgModel in HTML
DESCRIPTION: Demonstrates how to create a checkbox input using Taiga UI's tuiCheckbox directive with Angular's ngModel for two-way data binding. The value property is bound to a component variable named 'value'.

LANGUAGE: html
CODE:
<input
  tuiCheckbox
  type="checkbox"
  [(ngModel)]="value"
/>

----------------------------------------

TITLE: Installing Taiga UI Charts Add-on
DESCRIPTION: Command to install the Taiga UI Charts add-on package, which provides various charts and graph components.

LANGUAGE: bash
CODE:
npm i @taiga-ui/addon-charts

----------------------------------------

TITLE: Importing Taiga UI Core Styles in LESS
DESCRIPTION: Imports the core styling module from Taiga UI framework using LESS @import directive. The file imports taiga-ui-local.less from the core styles package and includes a placeholder comment for additional custom styles.

LANGUAGE: less
CODE:
@import '@taiga-ui/core/styles/taiga-ui-local.less';

// other styles

----------------------------------------

TITLE: Implementing Taiga UI Navigation Layout in HTML
DESCRIPTION: This snippet demonstrates the structure for a navigation layout using Taiga UI components. It includes a header, an expandable sidebar, a main content area, and a navigation section for elements like breadcrumbs, tabs, and buttons.

LANGUAGE: html
CODE:
<header tuiNavigationHeader>Header content</header>
<aside [tuiNavigationAside]="expanded">Sidebar content</aside>
<main tuiNavigationMain>
  <nav tuiNavigationNav>Breadcrumbs, tabs, buttons</nav>
  Main content
</main>

----------------------------------------

TITLE: Implementing Taiga UI Table Component in HTML
DESCRIPTION: This code snippet demonstrates how to create a Taiga UI table component with sortable columns, custom cell rendering, and integration of Taiga UI directives. It includes a header section with column definitions and a body section that renders sorted user data with conditional formatting and tag components.

LANGUAGE: html
CODE:
<table
  tuiTable
  [columns]="columns"
>
  <thead tuiThead>
    <tr tuiThGroup>
      <th
        *tuiHead="'name'"
        tuiTh
      >
        Name
      </th>
      <th
        *tuiHead="'email'"
        tuiTh
      >
        E-mail
      </th>
      <th
        *tuiHead="'status'"
        tuiTh
      >
        Status
      </th>
      <th
        *tuiHead="'tags'"
        tuiTh
        [sorter]="null"
      >
        Tags
      </th>
    </tr>
  </thead>
  <tbody
    *tuiLet="users | tuiTableSort as sortedUsers"
    tuiTbody
    [data]="sortedUsers"
  >
    <tr
      *ngFor="let item of sortedUsers"
      tuiTr
    >
      <td
        *tuiCell="'name'"
        tuiTd
      >
        {{ item.name }}
      </td>
      <td
        *tuiCell="'email'"
        tuiTd
      >
        <a
          *ngIf="item.email"
          tuiLink
          [href]="'mailto:' + item.email"
        >
          {{ item.email }}
        </a>
      </td>
      <td
        *tuiCell="'status'"
        tuiTd
      >
        <div [class]="item.status">{{ item.status }}</div>
      </td>
      <td
        *tuiCell="'tags'"
        tuiTd
      >
        <tui-tag
          class="tui-space_right-1"
          *ngFor="let tag of item.tags"
          [value]="tag"
          [autoColor]="true"
        ></tui-tag>
      </td>
    </tr>
  </tbody>
</table>

----------------------------------------

TITLE: Creating Search Form with Taiga UI Components
DESCRIPTION: Creates a search form using Taiga UI components including a text field with search icon and submit button. The form is integrated with Angular's reactive forms using formGroup and formControlName directives. The search field includes a label and placeholder text.

LANGUAGE: html
CODE:
<search tuiSearch>
  <form [formGroup]="form">
    <fieldset>
      <tui-textfield iconStart="@tui.search">
        <label tuiLabel>Search</label>
        <input
          placeholder="Search"
          tuiTextfield
          formControlName="search"
        />
      </tui-textfield>
      <button tuiButton>Search</button>
    </fieldset>
  </form>
</search>

----------------------------------------

TITLE: Implementing International Phone Input with Taiga UI in Angular Template
DESCRIPTION: Sets up a form with an international phone number input field using Taiga UI components. The input uses the tuiInputPhoneInternational directive and is bound to a form control named 'testValue'. Countries can be configured through the countries binding.

LANGUAGE: html
CODE:
<form [formGroup]="testForm">
  <tui-textfield>
    <input
      tuiInputPhoneInternational
      formControlName="testValue"
      [countries]="countries"
    />
  </tui-textfield>
</form>

----------------------------------------

TITLE: Implementing Taiga UI Date Input in Angular Reactive Form
DESCRIPTION: This snippet demonstrates how to use the Taiga UI date input component within an Angular reactive form. It includes a form group and a date input field with a placeholder text.

LANGUAGE: html
CODE:
<form [formGroup]="testForm">
  <tui-input-date formControlName="testValue">
    Choose a date
    <input tuiTextfieldLegacy />
  </tui-input-date>
</form>

----------------------------------------

TITLE: Implementing Taiga UI Combo Box in Angular Form
DESCRIPTION: Shows how to set up a Taiga UI combo box within an Angular reactive form using formGroup and formControlName directives. The combo box includes a data list wrapper that displays items from an array.

LANGUAGE: html
CODE:
<form [formGroup]="testForm">
  <tui-combo-box formControlName="testValue">
    <tui-data-list-wrapper
      *tuiDataList
      [items]="items"
    ></tui-data-list-wrapper>
  </tui-combo-box>
</form>

----------------------------------------

TITLE: Configuring Taiga UI Component in Angular
DESCRIPTION: This snippet demonstrates how to set up a Taiga UI component in an Angular application. It imports necessary modules from Taiga UI's core and layout packages, and configures a standalone component with these imports.

LANGUAGE: typescript
CODE:
import {TuiAppearance} from '@taiga-ui/core';
import {TuiCardLarge, TuiForm} from '@taiga-ui/layout';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCardLarge,
    TuiAppearance,
    TuiForm,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing TuiCalendar in Angular Standalone Component
DESCRIPTION: Shows how to import and configure TuiCalendar component from Taiga UI core package in a standalone Angular component. The example demonstrates the modern standalone component approach in Angular.

LANGUAGE: typescript
CODE:
import {TuiCalendar} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCalendar,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Opening Dialog with TuiDialogService in Angular TypeScript
DESCRIPTION: Demonstrates how to inject and use TuiDialogService to open a simple dialog window. The example shows proper import statements, dependency injection using the inject function, and opening a dialog with a basic text message.

LANGUAGE: typescript
CODE:
import {PolymorpheusComponent} from '@taiga-ui/polymorpheus';
import {TuiDialogService} from '@taiga-ui/core';
import {inject} from '@angular/core';

// ...

export class Example {
  private readonly dialogs = inject(TuiDialogService);

  // ...

  open() {
    this.dialogs.open('Hello!').subscribe();
  }
}

----------------------------------------

TITLE: Creating Button with Tooltip in Taiga UI
DESCRIPTION: Demonstrates how to create a button with an accessible tooltip hint using Taiga UI directives. The tuiHintDescribe attribute makes the hint part of the button's ARIA description for better accessibility.

LANGUAGE: html
CODE:
<button
  tuiButton
  tuiHint="I'm a hint"
  tuiHintDescribe
>
  Press me
</button>

----------------------------------------

TITLE: Opening Mobile Dialog with Taiga UI Service in TypeScript
DESCRIPTION: Shows how to initialize and open a mobile dialog using TuiMobileDialogService with custom configuration including heading, buttons, and data. Includes handling of button click events through subscription.

LANGUAGE: typescript
CODE:
constructor(private readonly dialogs: TuiMobileDialogService) {}

// ...

this.dialogs
    .open(
        'Text',
        {
            label: 'Heading',
            actions: ['Button 1', 'Button 2'],
            data: 'Some data'
        },
    )
    .subscribe(index => {
        // Index of clicked button
        console.log(index);
    });

----------------------------------------

TITLE: Implementing Router Link Navigation with Taiga UI Tabs in Angular
DESCRIPTION: This snippet shows how to create tab navigation using Taiga UI's tui-tabs component with router links. It demonstrates the use of routerLink and routerLinkActive directives for navigation between pages.

LANGUAGE: html
CODE:
<tui-tabs>
  <a
    tuiTab
    routerLink="/page-1"
    routerLinkActive
  >
    Page 1
  </a>
  <a
    tuiTab
    routerLink="/page-2"
    routerLinkActive
  >
    Page 2
  </a>
</tui-tabs>

----------------------------------------

TITLE: Implementing Notification Handler with Taiga UI in TypeScript
DESCRIPTION: Creates a notification handler class that manages alert popover interactions using Taiga UI's context system. The class provides methods to complete the notification context with boolean responses for OK and cancel actions.

LANGUAGE: typescript
CODE:
import {TuiAlertOptions} from '@taiga-ui/core';
import {TuiPopover} from '@taiga-ui/cdk';
import {POLYMORPHEUS_CONTEXT} from '@taiga-ui/polymorpheus';

//...

export class NotificationExample {
  private readonly context: TuiPopover<TuiAlertOptions<boolean>, boolean> = inject(POLYMORPHEUS_CONTEXT);

  ok() {
    this.context.completeWith(true);
  }

  cancel() {
    this.context.completeWith(false);
  }
}

----------------------------------------

TITLE: Configuring Taiga UI Alert Provider in TypeScript Component
DESCRIPTION: Sets up custom alert options for a Taiga UI component including auto-capitalized status labels, negative appearance styling, and a 7-second auto-close duration. Implemented using the tuiAlertOptionsProvider within a standalone component.

LANGUAGE: typescript
CODE:
import {tuiAlertOptionsProvider} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  providers: [
    tuiAlertOptionsProvider({
      label: ({status}: any) => status[0].toUpperCase() + status.slice(1),
      appearance: 'negative',
      autoClose: 7000,
    }),
  ],
  //  ...
})
export class Example {}

----------------------------------------

TITLE: Implementing Taiga UI Rating Component with NgModel in HTML
DESCRIPTION: This snippet shows how to implement a rating component using Taiga UI in an Angular template. It uses two-way data binding with ngModel to sync the rating value with a component property.

LANGUAGE: HTML
CODE:
<tui-rating [(ngModel)]="value"></tui-rating>

----------------------------------------

TITLE: Implementing Dialog Context Handling in Taiga UI with TypeScript
DESCRIPTION: Shows how to inject and use dialog context to handle dialog completion with boolean values. The code demonstrates both success (ok) and cancellation scenarios using the TuiDialogContext from Taiga UI core.

LANGUAGE: typescript
CODE:
import {TuiDialogContext} from '@taiga-ui/core';
import {injectContext} from '@taiga-ui/polymorpheus';

// ...

export class Example {
  public readonly context = injectContext<TuiDialogContext<boolean>>();

  ok() {
    this.context.completeWith(true);
  }

  cancel() {
    this.context.completeWith(false);
  }
}

----------------------------------------

TITLE: Basic Taiga UI Progress Bar Implementation in HTML
DESCRIPTION: Demonstrates how to create a progress bar using the tuiProgressBar directive. The progress bar is set to display 40% completion with a maximum value of 100.

LANGUAGE: html
CODE:
<progress
  tuiProgressBar
  [value]="40"
  [max]="100"
></progress>

----------------------------------------

TITLE: Implementing Taiga UI Notification with Negative Appearance in HTML
DESCRIPTION: This snippet demonstrates how to use the tui-notification component from Taiga UI with a negative appearance. The component is configured to display some content with a visual style indicating a negative or error state.

LANGUAGE: html
CODE:
<tui-notification appearance="negative">Some content</tui-notification>

----------------------------------------

TITLE: Styling Form with Taiga UI Directives
DESCRIPTION: Example of form element using Taiga UI directives to create a large floating form with card appearance. Uses tuiAppearance for floating style, tuiCardLarge for card styling, and tuiForm for size configuration.

LANGUAGE: html
CODE:
<form
  tuiAppearance="floating"
  tuiCardLarge
  tuiForm="l"
>
  <!-- Form content -->
</form>

----------------------------------------

TITLE: Creating Navigation Stepper with Taiga UI
DESCRIPTION: Implements a three-step navigation using Taiga UI's stepper component. Each step is an anchor tag with Angular router directives and Taiga UI's tuiStep directive, enabling navigation between different routes while maintaining the step-based visual interface.

LANGUAGE: html
CODE:
<tui-stepper>
  <a
    routerLink="/step-1"
    routerLinkActive
    tuiStep
  >
    One 1
  </a>
  <a
    routerLink="/step-2"
    routerLinkActive
    tuiStep
  >
    Two 2
  </a>
  <a
    routerLink="/step-3"
    routerLinkActive
    tuiStep
  >
    Three 3
  </a>
</tui-stepper>

----------------------------------------

TITLE: Implementing Custom Alerts with TuiAlertService in Angular/TypeScript
DESCRIPTION: Demonstrates how to inject and use TuiAlertService to display custom notifications using PolymorpheusComponent. The example shows dependency injection using Angular's inject function and subscription to notification closure events.

LANGUAGE: typescript
CODE:
import {PolymorpheusComponent} from '@taiga-ui/polymorpheus';
import {TuiAlertService} from '@taiga-ui/core';
import {CustomNotification} from './custom-notification.component';
import {inject} from '@angular/core';

//...

export class Example {
  private readonly alerts = inject(TuiAlertService);

  constructor() {
    //...

    this.alerts.open(new PolymorpheusComponent(CustomNotificationComponent)).subscribe({
      complete: () => {
        console.log('Notification is closed');
      },
    });
  }
}

----------------------------------------

TITLE: Implementing Taiga UI Range Input with Angular Reactive Forms
DESCRIPTION: Demonstrates the implementation of a range input using Taiga UI's tui-input-range component within an Angular reactive form. The component is bound to a form control named 'testValue' using formControlName directive and wrapped in a form group container.

LANGUAGE: html
CODE:
<ng-container [formGroup]="testForm">
  <tui-input-range
    class="input-wrapper"
    formControlName="testValue"
  >
    placeholder
  </tui-input-range>
</ng-container>

----------------------------------------

TITLE: Implementing Taiga UI Form Input with Angular Reactive Forms
DESCRIPTION: Shows how to create a form input using Taiga UI's tui-input component with Angular's Reactive Forms. The code demonstrates the proper setup of form binding using formGroup and formControlName directives.

LANGUAGE: html
CODE:
<form [formGroup]="testForm">
  <tui-input formControlName="testValue">
    Type a text
    <input tuiTextfieldLegacy />
  </tui-input>
</form>

----------------------------------------

TITLE: Configuring Standalone Angular Component with Taiga UI Date Input
DESCRIPTION: This snippet shows the import statements and component decorator for setting up a standalone Angular component that uses Taiga UI's TuiInputDateModule and Angular's ReactiveFormsModule. It demonstrates how to properly import and declare these modules in the component's configuration.

LANGUAGE: typescript
CODE:
import {ReactiveFormsModule} from '@angular/forms';
import {TuiInputDateModule} from '@taiga-ui/legacy';

@Component({
  standalone: true,
  imports: [
    // ...
    ReactiveFormsModule,
    TuiInputDateModule,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing and Using TuiCalendarRange in Angular Component
DESCRIPTION: This snippet demonstrates how to import the TuiCalendarRange component from the Taiga UI kit and include it in the imports array of a standalone Angular component. It shows the basic setup required to use the calendar range functionality in an Angular application.

LANGUAGE: typescript
CODE:
import {TuiCalendarRange} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCalendarRange,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Implementing Taiga UI Date and Time Input in Angular Reactive Form
DESCRIPTION: This snippet demonstrates how to use the tui-input-date-time component from Taiga UI within an Angular reactive form. The form is bound to a formGroup called 'testForm', and the input is linked to the 'testValue' form control.

LANGUAGE: HTML
CODE:
<form [formGroup]="testForm">
  <tui-input-date-time formControlName="testValue">Choose date and time</tui-input-date-time>
</form>

----------------------------------------

TITLE: Implementing Taiga UI Select in Angular Reactive Form
DESCRIPTION: This snippet demonstrates how to use the Taiga UI select component within an Angular reactive form. It includes form binding using formGroup and formControlName directives, and populates the select options using a tui-data-list-wrapper component.

LANGUAGE: HTML
CODE:
<form [formGroup]="testForm">
  <tui-select formControlName="testValue">
    <tui-data-list-wrapper
      *tuiDataList
      [items]="items"
    ></tui-data-list-wrapper>
  </tui-select>
</form>

----------------------------------------

TITLE: Implementing Taiga UI Buttons in HTML
DESCRIPTION: This snippet shows how to create Taiga UI buttons using the tuiButton directive. It demonstrates usage with both <button> and <a> elements, allowing for flexibility in button implementation.

LANGUAGE: html
CODE:
<button tuiButton>Press me</button>
<a tuiButton>Press me</a>

----------------------------------------

TITLE: Opening Polymorphic Dialog using Taiga UI in TypeScript
DESCRIPTION: Demonstrates how to open a dialog component using TuiDialogService and PolymorpheusComponent. The code shows dependency injection setup and the open() method implementation for displaying a custom dialog component.

LANGUAGE: typescript
CODE:
import {PolymorpheusComponent} from '@taiga-ui/polymorpheus';
import {TuiDialogService} from '@taiga-ui/core';

import {MyDialog} from './my-dialog.component.ts';

// ...

@Component({
  // ...
})
export class Example {
  private readonly injector = inject(INJECTOR);
  private readonly dialogs = inject(TuiDialogService);

  // ...
  open() {
    this.dialogs
      .open(
        // this.injector is optional
        new PolymorpheusComponent(MyDialog, this.injector),
      )
      .subscribe();
  }
}

----------------------------------------

TITLE: Rendering Taiga UI Badge Component in HTML
DESCRIPTION: This snippet shows how to use the tui-badge component from Taiga UI. It sets the appearance to 'primary' and displays a dynamic value inside the badge.

LANGUAGE: html
CODE:
<tui-badge appearance="primary">{{ value }}</tui-badge>

----------------------------------------

TITLE: Implementing Taiga UI Preview Component with Pagination and Actions in HTML
DESCRIPTION: This snippet demonstrates the structure of a Taiga UI preview component. It includes a title, pagination controls, action buttons for delete and download operations, and an image display. The template uses Taiga UI-specific components and directives for styling and functionality.

LANGUAGE: html
CODE:
<ng-template #preview>
  <tui-preview>
    <tui-preview-title>{{title}}</tui-preview-title>
    <tui-preview-pagination
      [length]="2"
      [(index)]="index"
    ></tui-preview-pagination>

    <button
      tuiIconButton
      tuiPreviewAction
      icon="@tui.trash"
      title="Delete"
      (click)="delete()"
    ></button>
    <button
      tuiIconButton
      tuiPreviewAction
      icon="@tui.download"
      title="Download"
      (click)="download()"
    ></button>

    <img
      *polymorpheusOutlet="previewContent as src"
      alt=""
      [src]="src"
    />
  </tui-preview>
</ng-template>

----------------------------------------

TITLE: Implementing Grouped Menu with Taiga UI Data List in HTML
DESCRIPTION: This snippet demonstrates how to create a structured menu using Taiga UI's tui-data-list and tui-opt-group components. It iterates over groups and their items, creating clickable menu items with router links. The component uses Angular's structural directives for rendering.

LANGUAGE: html
CODE:
<tui-data-list role="menu">
  <tui-opt-group
    *ngFor="let group of groups"
    [label]="group.label"
  >
    <a
      *ngFor="let item of group.items"
      tuiOption
      role="menuitem"
      [routerLink]="item.routerLink"
    >
      {{item.label}}
    </a>
  </tui-opt-group>
</tui-data-list>

----------------------------------------

TITLE: Creating Taiga UI Island Component with Content
DESCRIPTION: Demonstrates the structure of a Taiga UI Island component containing a title, text paragraph, and a secondary appearance button. Shows proper class naming conventions and component nesting patterns for Taiga UI.

LANGUAGE: html
CODE:
<tui-island>
  <h3 class="tui-island__title">Title</h3>
  <p class="tui-island__paragraph">Text</p>
  <p class="tui-island__paragraph tui-island__paragraph_button">
    <button
      tuiButton
      type="button"
      appearance="secondary"
    >
      Button
    </button>
  </p>
</tui-island>

----------------------------------------

TITLE: Implementing Taiga UI Segmented Component in HTML
DESCRIPTION: This snippet demonstrates how to use the tui-segmented component from Taiga UI to create a tabbed interface. It includes three buttons as tab options and uses two-way data binding to track the active item index.

LANGUAGE: html
CODE:
<tui-segmented [(activeItemIndex)]="index">
  <button>Tab 1</button>
  <button>Tab 2</button>
  <button>Tab 3</button>
</tui-segmented>

----------------------------------------

TITLE: Implementing Taiga UI Multi-Select in Angular Reactive Form
DESCRIPTION: This code snippet demonstrates how to use the Taiga UI multi-select component within an Angular reactive form. It binds the multi-select to a form control and populates it with items from a data list.

LANGUAGE: html
CODE:
<form [formGroup]="testForm">
  <tui-multi-select formControlName="testValue">
    <tui-data-list-wrapper
      *tuiDataList
      tuiMultiSelectGroup
      [items]="items"
    ></tui-data-list-wrapper>
  </tui-multi-select>
</form>

----------------------------------------

TITLE: Basic Taiga UI Calendar Implementation in HTML
DESCRIPTION: Shows how to include a basic Taiga UI calendar component in HTML markup using the tui-calendar custom element. This component provides a standalone calendar widget that can be used for date selection.

LANGUAGE: html
CODE:
<tui-calendar></tui-calendar>

----------------------------------------

TITLE: Structuring a Block Details Component with Taiga UI in HTML
DESCRIPTION: This snippet demonstrates how to create a structured block of details using Taiga UI components. It includes an avatar, a title with subtitle, a formatted amount, description, comment, and a badge. The component uses various Taiga UI directives and elements to achieve a consistent and styled layout.

LANGUAGE: html
CODE:
<div tuiBlockDetails>
  <tui-avatar></tui-avatar>
  <h2 tuiTitle>
    Title
    <div tuiSubtitle>Subtitle</div>
  </h2>

  <span>{{ amount }} | tuiAmount: 'USD' | async }}</span>
  <span tuiAmountDescription>description</span>
  <span tuiComment>comment</span>
  <tui-badge appearance="neutral">Badge</tui-badge>
</div>

----------------------------------------

TITLE: Implementing Dropdown Hover in Taiga UI with Angular
DESCRIPTION: This snippet shows how to create a dropdown that appears on hover using Taiga UI's tuiDropdownHover directive. It defines a host element and a separate template for the dropdown content.

LANGUAGE: html
CODE:
<div
  tuiDropdownHover
  [tuiDropdown]="content"
>
  Host element
</div>

<ng-template #content>Dropdown content</ng-template>

----------------------------------------

TITLE: Implementing Taiga UI Pie Chart in Angular HTML Template
DESCRIPTION: This snippet demonstrates how to integrate the tui-pie-chart component from Taiga UI into an Angular template. The component takes a 'value' input binding to populate the chart data.

LANGUAGE: HTML
CODE:
<tui-pie-chart [value]="value"></tui-pie-chart>

----------------------------------------

TITLE: Importing TuiFiles in Standalone Angular Component
DESCRIPTION: Shows how to import the TuiFiles component from @taiga-ui/kit package and include it in a standalone Angular component's imports array. This setup is necessary for using TuiFiles functionality within the component.

LANGUAGE: typescript
CODE:
import {TuiFiles} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [TuiFiles],
  //...
})
export class Example {}

----------------------------------------

TITLE: Implementing Taiga UI Textarea in Angular Reactive Form
DESCRIPTION: Shows how to bind a Taiga UI textarea component to a form control within an Angular reactive form. The textarea is labeled 'Bio' and bound to the 'testValue' form control within the 'testForm' form group.

LANGUAGE: html
CODE:
<form [formGroup]="testForm">
  <tui-textarea formControlName="testValue">Bio</tui-textarea>
</form>

----------------------------------------

TITLE: Implementing Taiga UI Bar Chart in HTML
DESCRIPTION: This snippet shows how to use the tui-bar-chart component from Taiga UI in an Angular template. The [value] attribute is used to bind data to the chart.

LANGUAGE: HTML
CODE:
<tui-bar-chart [value]="value"></tui-bar-chart>

----------------------------------------

TITLE: Implementing Basic and Icon Links with Taiga UI
DESCRIPTION: Demonstrates two implementations of the tuiLink directive: a basic text link and a link with an icon positioned at the start. The examples show how to use the tuiLink directive and the iconStart attribute for icon placement.

LANGUAGE: html
CODE:
<a
  tuiLink
  href="#"
>
  Link
</a>

<a
  tuiLink
  iconStart="@tui.settings"
  href="#"
>
  Link with an icon on the left
</a>

----------------------------------------

TITLE: Structuring a Taiga UI Header Component in HTML
DESCRIPTION: This code snippet illustrates the structure of a Taiga UI header component. It uses custom elements and attributes like 'tuiHeader', 'tuiTitle', and 'tuiAccessories' to create a header with a title, subtitle, and accessories section.

LANGUAGE: HTML
CODE:
<header tuiHeader>
  <hgroup tuiTitle>
    <h1>Title</h1>
    <p tuiSubtitle>Subtitle</p>
  </hgroup>
  <aside tuiAccessories>Accessories</aside>
</header>

----------------------------------------

TITLE: Implementing Taiga UI Breadcrumbs in Angular HTML Template
DESCRIPTION: This snippet demonstrates how to use the tui-breadcrumbs component from Taiga UI to create a breadcrumb navigation. It iterates through an array of items, creating clickable links for each breadcrumb item using Angular's template syntax and the Taiga UI link directive.

LANGUAGE: HTML
CODE:
<tui-breadcrumbs [size]="size">
  <ng-container *ngFor="let item of items">
    <a
      *tuiItem
      tuiLink
      [routerLink]="item.routerLink"
    >
      {{ item.caption }}
    </a>
  </ng-container>
</tui-breadcrumbs>

----------------------------------------

TITLE: Implementing Text Highlighting with tuiHighlight in HTML
DESCRIPTION: Demonstrates how to use the tuiHighlight directive to highlight matching text within a div element. The directive takes a query input for the text to highlight and accepts a custom highlight color specified as a hex value.

LANGUAGE: html
CODE:
<div
  [tuiHighlight]="query"
  [tuiHighlightColor]="'#228B22'"
>
  ...
</div>

----------------------------------------

TITLE: Importing TuiArcChart in Standalone Angular Component
DESCRIPTION: Shows how to import the TuiArcChart component from Taiga UI's addon-charts package and include it in a standalone Angular component's imports array. The component is configured using the standalone: true property introduced in Angular.

LANGUAGE: typescript
CODE:
import {TuiArcChart} from '@taiga-ui/addon-charts';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiArcChart,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Creating Taiga UI Drawer with Header
DESCRIPTION: Demonstrates the structure of a Taiga UI drawer component with a header section containing a title and close button. The drawer uses the tuiPopup directive for controlling visibility and includes styled header elements using Taiga UI's built-in directives.

LANGUAGE: html
CODE:
<tui-drawer *tuiPopup="open()">
  <header>
    <h2 tuiHeader>
      <div tuiTitle>Header</div>
      <div tuiAccessories>
        <button
          tuiButton
          (click)="open.set(false)"
        >
          Close
        </button>
      </div>
    </h2>
    Content
  </header>
</tui-drawer>

----------------------------------------

TITLE: Implementing Items List with More Template in Taiga UI
DESCRIPTION: Shows how to display a list of items with a 'show more' functionality using tui-items-with-more component. Uses *ngFor for iteration and includes a template for displaying the remaining count of items. The tuiMore template provides access to the current index for calculating remaining items.

LANGUAGE: html
CODE:
<tui-items-with-more>
  <ng-container *ngFor="let item of items">
    <span *tuiItem>{{ item }}</span>
  </ng-container>
  <ng-template
    tuiMore
    let-index
  >
    and {{ items.length - index - 1 }} more
  </ng-template>
</tui-items-with-more>

----------------------------------------

TITLE: Importing and Using TuiLineDaysChart in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import the TuiLineDaysChart component from the @taiga-ui/addon-charts package and include it in the imports array of an Angular standalone component. This allows the component to use the TuiLineDaysChart in its template.

LANGUAGE: typescript
CODE:
import {TuiLineDaysChart} from '@taiga-ui/addon-charts';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiLineDaysChart,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Formatting Number Input with Taiga UI Angular Components
DESCRIPTION: Creates a number input field using Taiga UI's textfield component with reactive form integration. The input uses number formatting with 2 decimal places precision and is bound to a form control.

LANGUAGE: html
CODE:
<tui-textfield>
  <input
    tuiInputNumber
    [formControl]="control"
    [tuiNumberFormat]="{precision: 2}"
  />
</tui-textfield>

----------------------------------------

TITLE: Importing TuiNotification in Standalone Angular Component
DESCRIPTION: Shows how to import TuiNotification from @taiga-ui/core package and include it in a standalone component's imports array. This setup is required when using Taiga UI notification functionality in standalone components.

LANGUAGE: typescript
CODE:
import {TuiNotification} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiNotification,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Configuring Angular Component with Taiga UI DateTime Input
DESCRIPTION: Sets up a standalone Angular component with form functionality and Taiga UI datetime input integration. Demonstrates importing required modules and creating a basic form group with a single control.

LANGUAGE: typescript
CODE:
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiInputDateTimeModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiInputDateTimeModule,
  ],
  // ...
})
export class Example {
  testForm = new FormGroup({
    testValue: new FormControl(),
  });
}

----------------------------------------

TITLE: Structuring a Title Component with Taiga UI in HTML
DESCRIPTION: This snippet shows how to create a title component using Taiga UI directives. It includes a main title with the 'tuiTitle' attribute set to 's', and two subtitle elements using the 'tuiSubtitle' directive.

LANGUAGE: HTML
CODE:
<h2 tuiTitle="s">
  <div tuiSubtitle>Caption</div>
  I am a title
  <div tuiSubtitle>I'm a subtitle</div>
</h2>

----------------------------------------

TITLE: Applying Status Color with tuiStatus Directive
DESCRIPTION: Demonstrates using the tuiStatus directive to apply a predefined positive status color to text content using CSS custom properties. The example uses Taiga UI's built-in status variable --tui-status-positive to style a span element.

LANGUAGE: html
CODE:
<span tuiStatus="var(--tui-status-positive)">Success</span>

----------------------------------------

TITLE: Importing and Using TuiAvatar in Angular Standalone Component
DESCRIPTION: This snippet shows how to import the TuiAvatar component from the Taiga UI kit and include it in the imports array of an Angular standalone component. It demonstrates the basic setup required to use Taiga UI components in an Angular application.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiAvatar} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiAvatar,
  ],
})
export class Example {}

----------------------------------------

TITLE: Implementing Basic Tree Component with Taiga UI
DESCRIPTION: Shows implementation of a basic tree component using tui-tree from Taiga UI framework. The component takes a value input for the tree data and a childrenHandler function to manage child nodes.

LANGUAGE: html
CODE:
<tui-tree
  [value]="value"
  [childrenHandler]="handler"
></tui-tree>

----------------------------------------

TITLE: Implementing TUI_CONFIRM Dialog in Angular with Taiga UI
DESCRIPTION: This snippet demonstrates how to use the TUI_CONFIRM dialog from Taiga UI in an Angular component. It shows the import statement, the injection of TuiDialogService, and the method to open the confirm dialog with custom labels and content.

LANGUAGE: typescript
CODE:
import {TUI_CONFIRM} from '@taiga-ui/kit';

// ...
export class Example {
  private readonly dialogs = inject(TuiDialogService);

  confirm() {
    this.dialogs
      .open<boolean>(TUI_CONFIRM, {
        label: 'Are you sure?',
        data: {
          content: 'This action has consequences',
          yes: 'Whatever...',
          no: 'Oops!',
        },
      })
      .subscribe((response) => {
        // ...
      });
  }
}

----------------------------------------

TITLE: Opening PDF with TuiPdfViewerService in TypeScript
DESCRIPTION: This code demonstrates how to inject and use the TuiPdfViewerService to open a PDF file with custom options. It includes a method to show the PDF viewer with specified actions and a label.

LANGUAGE: typescript
CODE:
export class Example {
  private readonly pdfService = inject(TuiPdfViewerService);

  show(actions: PolymorpheusContent<TuiPdfViewerOptions>) {
    this.pdfService
      .open('/assets/taiga.pdf', {
        label: 'Taiga UI',
        actions,
      })
      .subscribe();
  }
}

----------------------------------------

TITLE: Implementing TuiAlertService in TypeScript Angular Component
DESCRIPTION: Shows how to inject the TuiAlertService and display a notification with completion handling. The service is injected using the inject() function and used to show an alert with a completion callback that logs to the console.

LANGUAGE: typescript
CODE:
import {TuiAlertService} from '@taiga-ui/core';
//...

export class Example {
  private readonly alerts = inject(TuiAlertService);

  constructor() {
    //...

    this.alerts.open('Notification').subscribe({
      complete: () => {
        console.log('Notification is closed');
      },
    });
  }
}

----------------------------------------

TITLE: Implementing Taiga UI Phone Input in Angular Reactive Form
DESCRIPTION: This snippet demonstrates how to integrate the Taiga UI phone input component (tui-input-phone) within an Angular reactive form. The form is bound to a formGroup called 'testForm', and the phone input is associated with the 'testValue' form control.

LANGUAGE: html
CODE:
<form [formGroup]="testForm">
  <tui-input-phone formControlName="testValue">Type phone number</tui-input-phone>
</form>

----------------------------------------

TITLE: Implementing Taiga UI Buttons with Custom Tooltips in HTML
DESCRIPTION: This code snippet demonstrates the creation of two Taiga UI buttons with custom tooltips using the tuiHint directive. The first button uses a text tooltip, while the second button references a template for its tooltip content. Both buttons have manual tooltip control enabled.

LANGUAGE: html
CODE:
<button
  tuiButton
  type="button"
  tuiHint="Custom host with text tooltip"
  [tuiHintManual]="true"
>
  Press me
</button>

<button
  tuiButton
  type="button"
  [tuiHint]="template"
  [tuiHintManual]="true"
>
  Press that ↑
</button>

<ng-template #template>Reusable template</ng-template>

----------------------------------------

TITLE: Opening Dialog with Taiga UI in TypeScript
DESCRIPTION: Function signature for opening a dialog using Taiga UI. It takes polymorphic content and dialog options as parameters, and returns an Observable of the specified output type.

LANGUAGE: typescript
CODE:
open<O>(
  content: PolymorpheusContent<TuiDialogContext<O, I>,
  options: Partial<TuiDialogOptions<I>>,
): Observable<O>;

----------------------------------------

TITLE: Injecting and Using TuiKeyboardService in Angular Component
DESCRIPTION: Shows how to inject the TuiKeyboardService using Angular's inject function and implement a toggle method. The service is used to manage keyboard-related functionality in a Taiga UI component.

LANGUAGE: typescript
CODE:
import {inject} from '@angular/core';
import {TuiKeyboardService} from '@taiga-ui/cdk';

// ...
export class Example {
  private readonly keyboard = inject(TuiKeyboardService);

  toggle(): void {
    this.keyboard.toggle();
  }
}

----------------------------------------

TITLE: Displaying Country Flag Image using Taiga UI Flag Pipe in HTML
DESCRIPTION: This snippet demonstrates how to use the Taiga UI flag pipe to set the source of an image element for displaying a country flag. The pipe converts a country code to the corresponding flag image URL.

LANGUAGE: HTML
CODE:
<img
  alt="United Arab Emirates"
  [src]="'AE' | tuiFlag"
/>

----------------------------------------

TITLE: Implementing Taiga UI Color Picker with Two-way Binding in HTML
DESCRIPTION: Shows how to implement a color picker component using Taiga UI's tui-color-picker directive with Angular's two-way data binding. The color property is bound using [(color)] syntax to synchronize the selected color value with the component's state.

LANGUAGE: html
CODE:
<tui-color-picker [(color)]="color"></tui-color-picker>

----------------------------------------

TITLE: Importing TuiTable in Angular Standalone Component
DESCRIPTION: Shows how to import the TuiTable component from @taiga-ui/addon-table package and include it in a standalone component's imports array. This setup enables the use of Taiga UI's table functionality within the component.

LANGUAGE: typescript
CODE:
import {TuiTable} from '@taiga-ui/addon-table';

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTable,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Implementing Taiga UI Ring Chart in HTML
DESCRIPTION: This snippet shows how to use the tui-ring-chart component from Taiga UI. The component is bound to a 'value' property, which likely represents the data to be displayed in the ring chart.

LANGUAGE: HTML
CODE:
<tui-ring-chart [value]="value"></tui-ring-chart>

----------------------------------------

TITLE: Implementing Search Input with Taiga UI and Angular
DESCRIPTION: This snippet demonstrates how to create a search input field using Taiga UI's textfield component. It utilizes Angular's ngModel for two-way data binding and the tuiInputSearch directive for search functionality. The results are displayed using a template reference.

LANGUAGE: html
CODE:
<tui-textfield>
  <input
    [tuiInputSearch]="results"
    [(ngModel)]="value"
  />
  <ng-template #results>
    <!-- ... -->
  </ng-template>
</tui-textfield>

----------------------------------------

TITLE: Rendering Taiga UI Thumbnail Card for Visa Payment System in HTML
DESCRIPTION: This snippet demonstrates how to use the tui-thumbnail-card component from Taiga UI to display a Visa card number. The component is configured with a 'logo' class and 'visa' as the payment system.

LANGUAGE: html
CODE:
<tui-thumbnail-card
  class="logo"
  paymentSystem="visa"
>
  {{ 1234 }}
</tui-thumbnail-card>

----------------------------------------

TITLE: Implementing Taiga UI Primitive Textfield with Two-way Binding
DESCRIPTION: A simple example showing how to use the tui-primitive-textfield component with two-way data binding for the value property. The component allows text input with default placeholder text 'Type something'.

LANGUAGE: html
CODE:
<tui-primitive-textfield [(value)]="value">Type something</tui-primitive-textfield>

----------------------------------------

TITLE: Implementing Taiga UI Checkboxes in Angular HTML
DESCRIPTION: This snippet demonstrates how to create both visible and implicit checkboxes using Taiga UI components in an Angular template. It shows the usage of tuiCheckbox and tuiBlock directives, as well as ngModel for data binding.

LANGUAGE: html
CODE:
<!-- Visible checkbox -->
<label tuiBlock>
  <input
    type="checkbox"
    tuiCheckbox
    [(ngModel)]="value"
  />
  I'm a label
</label>

<!-- Implicit checkbox -->
<label tuiBlock>
  <input
    type="checkbox"
    tuiBlock
    [(ngModel)]="value"
  />
  I'm a label
</label>

----------------------------------------

TITLE: Creating a Taiga UI Secondary Button in HTML
DESCRIPTION: This snippet demonstrates how to create a button using Taiga UI components. It uses the 'tuiButton' directive and sets the appearance to 'secondary'.

LANGUAGE: HTML
CODE:
<button
  tuiButton
  tuiAppearance="secondary"
>
  Press me
</button>

----------------------------------------

TITLE: Creating Month Picker Input with Taiga UI Components
DESCRIPTION: Implementation of a month picker input using Taiga UI's textfield component with a dropdown calendar. The component supports two-way data binding with ngModel, minimum and maximum date constraints, and custom disabled item handling.

LANGUAGE: html
CODE:
<tui-textfield>
  <input
    tuiInputMonth
    [(ngModel)]="value"
  />

  <tui-calendar-month
    *tuiTextfieldDropdown
    [min]="min"
    [max]="max"
    [disabledItemHandler]="disabledItemHandler"
    [(year)]="activeYear"
  />
</tui-textfield>

----------------------------------------

TITLE: Configuring Language Switcher in Taiga UI Application
DESCRIPTION: Sets up the tuiLanguageSwitcher provider in the application bootstrap process. Implements lazy loading of language files from node_modules using dynamic imports. The configuration allows for custom language file path overrides.

LANGUAGE: typescript
CODE:
import {tuiLanguageSwitcher, TuiLanguageName} from '@taiga-ui/i18';

bootstrapApplication(App, {
  providers: [
    // ...
    tuiLanguageSwitcher(
      /**
       * @note:
       * then the i18n language files will be loaded from node_modules
       */
      async (language: TuiLanguageName): Promise<unknown> =>
        import(
          /* webpackMode: "lazy" */
          /* webpackChunkName: "i18n-lazy-" */
          `@taiga-ui/i18n/languages/${language}`
          // also you can override the paths to your i18n language files
        ),
    ),
  ],
}).catch((err: unknown) => console.error(err));

----------------------------------------

TITLE: Implementing Taiga UI Compass Component in HTML
DESCRIPTION: This snippet shows how to use the tui-compass component from Taiga UI in an Angular template. The degrees property is bound to a variable, allowing dynamic control of the compass direction.

LANGUAGE: HTML
CODE:
<tui-compass [degrees]="degrees"></tui-compass>

----------------------------------------

TITLE: Configuring Angular Standalone Component with Taiga UI Input Slider
DESCRIPTION: This code snippet sets up an Angular standalone component that uses Taiga UI's input slider. It imports required modules from Angular Forms and Taiga UI, including TuiInputSlider and TuiNumberFormat. The component is configured with necessary imports and initializes a value property.

LANGUAGE: typescript
CODE:
import {FormsModule} from '@angular/forms';
import {TuiNumberFormat, TuiTextfield} from '@taiga-ui/core';
import {TuiInputSlider} from '@taiga-ui/kit';

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    TuiTextfield,
    TuiInputSlider,
    TuiNumberFormat,
  ],
  // ...
})
export class Example {
  value = 0;
}

----------------------------------------

TITLE: Implementing Taiga UI Input Tag with Reactive Forms in Angular
DESCRIPTION: This snippet demonstrates how to use the Taiga UI input-tag component within a reactive form in Angular. It uses formGroup directive and formControlName for form integration.

LANGUAGE: html
CODE:
<ng-container [formGroup]="formName">
  <tui-input-tag formControlName="controlName"></tui-input-tag>
</ng-container>

----------------------------------------

TITLE: Implementing Taiga UI Slider Input in Angular HTML Template
DESCRIPTION: This snippet demonstrates how to create a slider input using Taiga UI's tuiSlider directive. It binds the input to a form control for reactive form functionality in Angular.

LANGUAGE: HTML
CODE:
<input
  tuiSlider
  type="range"
  [formControl]="control"
/>

----------------------------------------

TITLE: Adding Bottom Comment with Taiga UI Directive in HTML
DESCRIPTION: Shows how to add a bottom-positioned comment to a div element using the tuiComment directive from Taiga UI framework. The directive takes a position parameter 'bottom' to specify where the comment should appear relative to the element.

LANGUAGE: html
CODE:
<div tuiComment="bottom">comment</div>

----------------------------------------

TITLE: Integrating Taiga UI Month Range Picker with Angular Forms
DESCRIPTION: Demonstrates how to use the tui-input-month-range component within an Angular reactive form. The component is bound to a form control named 'testValue' using the formControlName directive.

LANGUAGE: html
CODE:
<form [formGroup]="testForm">
  <tui-input-month-range formControlName="testValue">Choose a range of months</tui-input-month-range>
</form>

----------------------------------------

TITLE: Creating PIN Input Field with Taiga UI and Angular Forms
DESCRIPTION: Implementation of a PIN input field using Taiga UI's tui-textfield component integrated with Angular's reactive forms. The input is restricted to 4 characters using maxlength and includes the tuiInputPin directive for PIN-specific functionality.

LANGUAGE: html
CODE:
<form [formGroup]="testForm">
  <tui-textfield>
    <input
      maxlength="4"
      tuiInputPin
      [formControl]="control"
    />
  </tui-textfield>
</form>

----------------------------------------

TITLE: Implementing Taiga UI Calendar Range Component in HTML
DESCRIPTION: Basic implementation of the Taiga UI calendar range picker component. This self-closing component creates an interactive date range selection interface.

LANGUAGE: html
CODE:
<tui-calendar-range />

----------------------------------------

TITLE: Configuring TuiLoader Component with Custom Options
DESCRIPTION: Sets up a standalone Angular component that imports and configures TuiLoader with specific options including size, color inheritance, and overlay settings. Uses the tuiLoaderOptionsProvider to define global loader configuration.

LANGUAGE: typescript
CODE:
import {TuiLoader} from '@taiga-ui/core';

@Component({
  standalone: true,
  imports: [
    // ...
    TuiLoader,
  ],
  providers: [
    tuiLoaderOptionsProvider({
      size: 'l',
      inheritColor: false,
      overlay: true,
    }),
  ],
})
export class Example {}

----------------------------------------

TITLE: Implementing Taiga UI Line Days Chart Component
DESCRIPTION: Demonstrates the implementation of a tui-line-days-chart component with essential attributes. The chart is configured with a base y-axis value of 0, fixed height of 100 units, and accepts a dynamic value input for rendering the chart data.

LANGUAGE: html
CODE:
<tui-line-days-chart
  [y]="0"
  [height]="100"
  [value]="value"
></tui-line-days-chart>

----------------------------------------

TITLE: Configuring Standalone Angular Component with TuiDataList
DESCRIPTION: Shows how to set up a standalone Angular component with proper Taiga UI DataList integration. Demonstrates the import statement and component decorator configuration using the standalone: true property.

LANGUAGE: typescript
CODE:
import {TuiDataList} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiDataList,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Implementing Scrollable List with Taiga UI Scrollbar
DESCRIPTION: Demonstrates how to wrap HTML list content within a tui-scrollbar component to enable custom scrolling behavior. The example shows a simple unordered list with three items enclosed in the Taiga UI scrollbar wrapper.

LANGUAGE: html
CODE:
<tui-scrollbar>
  <ul>
    <li>Item 1</li>
    <li>Item 2</li>
    <li>Item 3</li>
  </ul>
</tui-scrollbar>

----------------------------------------

TITLE: Implementing tuiSensitive Directive in HTML
DESCRIPTION: Shows how to apply the tuiSensitive directive to a span element to make its content sensitive. When set to true, the text content will be masked or hidden based on Taiga UI's sensitivity settings.

LANGUAGE: html
CODE:
<span [tuiSensitive]="true">text</span>

----------------------------------------

TITLE: Importing TuiDataListWrapper in Standalone Component
DESCRIPTION: Shows how to import the TuiDataListWrapper component from the @taiga-ui/kit package and include it in a standalone Angular component's imports array. This setup enables the use of TuiDataListWrapper functionality within the component.

LANGUAGE: typescript
CODE:
import {TuiDataListWrapper} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiDataListWrapper,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Implementing Large Floating Card with Taiga UI in HTML
DESCRIPTION: Creates a large floating card component using Taiga UI directives. The card includes a tuiCardLarge directive with floating appearance and a header section containing a title. This snippet demonstrates the basic structure of a Taiga UI card component.

LANGUAGE: html
CODE:
<div
  tuiCardLarge
  tuiAppearance="floating"
>
  <div tuiHeader>
    <h2 tuiTitle>Header</h2>
  </div>
</div>

----------------------------------------

TITLE: Configuring Angular Component with Taiga UI TuiReorder in TypeScript
DESCRIPTION: This snippet shows how to import the TuiReorder module from Taiga UI's table addon and configure it in a standalone Angular component. The TuiReorder module is added to the imports array of the component decorator.

LANGUAGE: typescript
CODE:
import {TuiReorder} from '@taiga-ui/addon-table';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiReorder,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing and Configuring TuiMessage in Angular Component
DESCRIPTION: This snippet demonstrates how to import the TuiMessage component from the Taiga UI kit and include it in an Angular component's imports array. It shows the basic structure of an Angular component using TypeScript decorators.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiMessage} from '@taiga-ui/kit';
// ...

@Component({
  imports: [
    // ...
    TuiMessage,
  ],
})
export class Example {}

----------------------------------------

TITLE: Conditional Rendering with tuiIsPresent Pipe in Angular Template
DESCRIPTION: Demonstrates how to conditionally render content using Angular's *ngIf directive in combination with Taiga UI's tuiIsPresent pipe. The pipe checks if the item is present (not null, undefined, or empty) before displaying it.

LANGUAGE: html
CODE:
<div *ngIf="item | tuiIsPresent">{{item}}</div>

----------------------------------------

TITLE: Initializing Russian Language Support in Taiga UI
DESCRIPTION: Configures the TUI_LANGUAGE provider to use Russian language settings in a Taiga UI application. Uses Angular's dependency injection system to provide the Russian language configuration globally.

LANGUAGE: typescript
CODE:
import {TUI_LANGUAGE, TUI_RUSSIAN_LANGUAGE} from '@taiga-ui/i18n';

bootstrapApplication(App, {
  providers: [
    // ...
    {
      provide: TUI_LANGUAGE,
      useValue: of(TUI_RUSSIAN_LANGUAGE),
    },
  ],
}).catch((err: unknown) => console.error(err));

----------------------------------------

TITLE: Importing and Configuring TuiPin in Angular Component
DESCRIPTION: This snippet demonstrates how to import the TuiPin module from Taiga UI and set up a standalone Angular component. It shows the necessary import statements and the component decorator configuration.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiPin} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPin,
  ],
})
export class Example {}

----------------------------------------

TITLE: Applying Taiga UI Status Color Variable in LESS
DESCRIPTION: Sets the background color of an element using Taiga UI's predefined status-positive CSS variable. This ensures consistent color theming aligned with Taiga UI's design system.

LANGUAGE: less
CODE:
.class {
  background-color: var(--tui-status-positive);
}

----------------------------------------

TITLE: Importing TuiError in Angular Standalone Component
DESCRIPTION: This code snippet demonstrates how to import the TuiError component from the Taiga UI core package and include it in an Angular standalone component. It shows the import statement and the component decorator with the imports array.

LANGUAGE: typescript
CODE:
import {TuiError} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiError,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing and Using TuiTiles Component in Angular
DESCRIPTION: This code snippet demonstrates how to import the TuiTiles component from the Taiga UI kit and include it in an Angular component's imports array. It's part of setting up a standalone component that uses Taiga UI's Tiles feature.

LANGUAGE: typescript
CODE:
import {TuiTiles} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTiles,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Configuring Taiga UI Textfield with Slider Input
DESCRIPTION: Shows how to set up a textfield component with both numeric input and range slider controls. The numeric input includes dollar prefix and percentage postfix, with 3 decimal precision, while the range slider supports key steps and segments configuration.

LANGUAGE: html
CODE:
<tui-textfield>
  <input
    tuiInputSlider
    prefix="$"
    postfix="%"
    [min]="0"
    [max]="100"
    [tuiNumberFormat]="{precision: 3}"
    [(ngModel)]="value"
  />

  <input
    tuiSlider
    type="range"
    [keySteps]="keySteps"
    [segments]="segments"
    [step]="step"
  />
</tui-textfield>

----------------------------------------

TITLE: Importing TuiNavigation in Standalone Angular Component
DESCRIPTION: Demonstrates how to import the TuiNavigation component from Taiga UI layout package and include it in a standalone Angular component's imports array. The example uses Angular's standalone component pattern with TypeScript.

LANGUAGE: typescript
CODE:
import {TuiNavigation} from '@taiga-ui/layout';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiNavigation,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Documentation Page Template Structure
DESCRIPTION: HTML template structure for a documentation page with examples and property documentation

LANGUAGE: html
CODE:
<tui-doc-page
  header="Super"
  package="SUPER-PACKAGE"
  deprecated
>
  <ng-template pageTab>
    This would be the content of a first tab

    <tui-doc-example
      id="basic-example"
      heading="Example of usage"
      [content]="example"
    >
      <example-1></example-1>
    </tui-doc-example>
  </ng-template>

  <ng-template pageTab="Documentation">
    <tui-doc-demo>
      <super-component [input]="input"></super-component>
    </tui-doc-demo>
    <tui-doc-documentation>
      <ng-template
        documentationPropertyName="input"
        documentationPropertyMode="input"
        documentationPropertyType="T"
        [documentationPropertyValues]="inputVariants"
        [(documentationPropertyValue)]="input"
      >
        Some input
      </ng-template>
    </tui-doc-documentation>
  </ng-template>
</tui-doc-page>

----------------------------------------

TITLE: Importing TuiExpand in Angular Standalone Component
DESCRIPTION: Shows how to import the TuiExpand component from Taiga UI's experimental package and include it in a standalone Angular component's imports array. The component is configured using the standalone property and implements a basic class structure.

LANGUAGE: typescript
CODE:
import {TuiExpand} from '@taiga-ui/experimental';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiExpand,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Implementing Taiga UI Filter in Angular Reactive Form
DESCRIPTION: This snippet demonstrates how to use the Taiga UI Filter component within an Angular reactive form. It shows the setup of form control binding, custom handlers for badges and disabled items, and event handling for toggled items.

LANGUAGE: html
CODE:
<form [formGroup]="form">
  <tui-filter
    formControlName="filters"
    [badgeHandler]="badgeHandler"
    [disabledItemHandler]="disabledItemHandler"
    [items]="items"
    [size]="size"
    (toggledItem)="onToggledItemChange($event)"
  ></tui-filter>
</form>

----------------------------------------

TITLE: Configuring Angular Routes for Documentation
DESCRIPTION: Setting up Angular routes with title metadata for documentation pages

LANGUAGE: typescript
CODE:
import {Routes} from '@angular/router';

const appRoutes: Routes = [
  {
    path: 'super-page',
    loadChildren: async () => (await import('../super-page/super-page.module')).SuperModule,
    data: {
      title: 'Super Page',
    },
  },
];

----------------------------------------

TITLE: Initializing Angular Component with Taiga UI TuiBadge in TypeScript
DESCRIPTION: This snippet demonstrates how to import and set up an Angular component using the Taiga UI TuiBadge module. It shows the component decorator with standalone configuration and imports.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiBadge} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiBadge,
  ],
})
export class Example {}

----------------------------------------

TITLE: Configuring Taiga UI Dialog Closing in Angular Component
DESCRIPTION: This snippet defines an Angular component that uses Taiga UI's TUI_DIALOGS_CLOSE token. It provides a custom implementation for closing dialogs, which is linked to the logout$ observable from an AuthService. This setup allows dialogs to be closed when a user logs out.

LANGUAGE: typescript
CODE:
@Component({
  standalone: true,
  // ...
  providers: [
    {
      provide: TUI_DIALOGS_CLOSE,
      deps: [AuthService],
      useFactory: (authService) => authService.logout$,
    },
  ],
})
export class Example {}

----------------------------------------

TITLE: Implementing Taiga UI Cell with Avatar and Button
DESCRIPTION: Creates a cell layout using Taiga UI components including an avatar, hierarchical title with subtitle, and an action button. Uses the tuiCell directive for layout structure and includes Taiga UI specific components like tui-avatar and tuiButton.

LANGUAGE: html
CODE:
<div tuiCell>
  <tui-avatar src="..."></tui-avatar>
  <div tuiTitle>
    Title
    <div tuiSubtitle>Subtitle</div>
  </div>
  <button tuiButton>Action</button>
</div>

----------------------------------------

TITLE: Implementing Taiga UI Pin Component in HTML
DESCRIPTION: This snippet shows how to use the tui-pin component from Taiga UI in an Angular template. The component is given a dynamic 'open' property and displays the number 16.

LANGUAGE: html
CODE:
<tui-pin [open]="open">16</tui-pin>

----------------------------------------

TITLE: Configuring Syntax Highlighting in Angular
DESCRIPTION: TypeScript configuration for setting up syntax highlighting in the documentation portal using highlight.js

LANGUAGE: typescript
CODE:
@Component({
  standalone: true,
  imports: [TuiDocMainModule],
  providers: [
    {
      provide: HIGHLIGHT_OPTIONS,
      useValue: {
        coreLibraryLoader: () => import('highlight.js/lib/core' as string),
        lineNumbersLoader: () => import('highlightjs-line-numbers.js' as string),
        languages: {
          typescript: () => import('highlight.js/lib/languages/typescript' as string),
          less: () => import('highlight.js/lib/languages/less' as string),
          xml: () => import('highlight.js/lib/languages/xml' as string),
        },
      },
    },
  ],
})
export class App {}

----------------------------------------

TITLE: Initializing Angular Component with Taiga UI Icon in TypeScript
DESCRIPTION: This snippet demonstrates how to create a standalone Angular component that imports and uses the TuiIcon module from Taiga UI. It shows the basic structure of the component decorator and the necessary import statements.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiIcon} from '@taiga-ui/core';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiIcon,
  ],
})
export class Example {}

----------------------------------------

TITLE: Importing TuiTree Component in Angular Standalone Component
DESCRIPTION: Configuration for integrating the TuiTree component from Taiga UI kit into an Angular standalone component. Shows the proper import statement and component decorator setup.

LANGUAGE: typescript
CODE:
import {TuiTree} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTree,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Setting Global Bot Access Rules in robots.txt
DESCRIPTION: Defines global access rules for all web crawlers using the wildcard user-agent. This configuration allows all bots to crawl the entire site.

LANGUAGE: txt
CODE:
User-agent: *

----------------------------------------

TITLE: Configuring Taiga UI FontAwesome Icons Build Assets in JSON
DESCRIPTION: Build configuration that copies FontAwesome icons from the Taiga UI node modules to the project's assets directory. Specifies the source path in node_modules and the destination path in the assets folder.

LANGUAGE: json
CODE:
{
  "projects": {
    "demo": {
      "architect": {
        "build": {
          "assets": [
            {
              "glob": "**/*",
              "input": "node_modules/@taiga-ui/icons-fontawesome/src",
              "output": "assets/taiga-ui/icons/"
            }
          ]
        }
      }
    }
  }
}

----------------------------------------

TITLE: Importing TuiInputCardGroup in Standalone Angular Component
DESCRIPTION: Shows the setup for importing TuiInputCardGroup from Taiga UI's commerce addon and including it in a standalone component's imports array. The component uses the standalone configuration approach introduced in Angular.

LANGUAGE: typescript
CODE:
import {TuiInputCardGroup} from '@taiga-ui/addon-commerce';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiInputCardGroup,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Configuring Standalone Angular Component with Taiga UI Imports
DESCRIPTION: Shows how to import and configure Taiga UI components (TuiItem and TuiBreadcrumbs) in a standalone Angular component. The component is marked as standalone and includes the necessary imports in its configuration.

LANGUAGE: typescript
CODE:
import {TuiItem} from '@taiga-ui/cdk';
import {TuiBreadcrumbs} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiItem,
    TuiBreadcrumbs,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing TuiPulse Component
DESCRIPTION: Demonstrates how to import the TuiPulse component from the @taiga-ui/kit package and include it in a standalone Angular component's imports array. This setup enables the use of TuiPulse within the component.

LANGUAGE: typescript
CODE:
import {TuiPulse} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPulse,
  ],
})
export class Example {}

----------------------------------------

TITLE: Structuring HTML for Taiga UI Landing Page
DESCRIPTION: This HTML snippet sets up the basic structure for a Taiga UI project page. It includes a header with the Taiga UI logo and a GitHub star button. The page uses the Manrope font and has a placeholder for the main content.

LANGUAGE: html
CODE:
<html lang="en">
  <head>
    <title>Taiga UI</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Manrope:wght@500;800&display=swap"
      rel="stylesheet"
    />
  </head>

  <body>
    <header class="header">
      <h1>
        <img
          src="https://raw.githubusercontent.com/taiga-family/taiga-ui/main/projects/demo/src/assets/images/taiga.svg"
          alt="taiga ui logo"
          width="24"
        />
        Taiga UI
      </h1>

      <iframe
        src="https://ghbtns.com/github-btn.html?user=Taiga-family&repo=taiga-ui&type=star&count=true&size=large"
        frameborder="0"
        scrolling="0"
        width="170"
        height="30"
        title="GitHub"
      ></iframe>
    </header>

    <root>Loading Taiga UI...</root>
  </body>
</html>

----------------------------------------

TITLE: Displaying Message with Taiga UI in HTML
DESCRIPTION: This snippet shows how to use the tuiMessage directive from Taiga UI to display a message. The value is interpolated from a component property.

LANGUAGE: HTML
CODE:
<span tuiMessage>{{ value }}</span>

----------------------------------------

TITLE: Using Taiga UI Input Tag with NgModel in Angular
DESCRIPTION: This snippet shows how to use the Taiga UI input-tag component with two-way data binding using NgModel in Angular. It demonstrates a simpler implementation without reactive forms.

LANGUAGE: html
CODE:
<tui-input-tag [(ngModel)]="model"></tui-input-tag>

----------------------------------------

TITLE: Configuring Angular Project Structure and Build Settings in JSON
DESCRIPTION: This snippet defines the Angular project structure, build configurations, and serve options for a demo application. It includes settings for development and production environments, as well as asset management and compilation options.

LANGUAGE: json
CODE:
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "newProjectRoot": "projects",
  "projects": {
    "demo": {
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "configurations": {
            "development": {
              "extractLicenses": false,
              "namedChunks": true,
              "optimization": false,
              "sourceMap": true
            },
            "production": {
              "aot": true,
              "extractLicenses": true,
              "namedChunks": false,
              "optimization": true,
              "outputHashing": "all",
              "sourceMap": false
            }
          },
          "options": {
            "assets": [],
            "index": "src/index.html",
            "browser": "src/main.ts",
            "outputPath": "dist/demo",
            "scripts": [],
            "styles": ["src/global_styles.less"],
            "tsConfig": "tsconfig.json"
          }
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "development": {
              "buildTarget": "demo:build:development"
            },
            "production": {
              "buildTarget": "demo:build:production"
            }
          },
          "defaultConfiguration": "development"
        }
      },
      "prefix": "app",
      "projectType": "application",
      "root": "",
      "schematics": {},
      "sourceRoot": "src"
    }
  },
  "version": 1
}

----------------------------------------

TITLE: Configuring Standalone Angular Component with TuiLike Import
DESCRIPTION: Sets up a standalone Angular component that incorporates the TuiLike feature from Taiga UI kit. The component is configured using the standalone: true property and includes TuiLike in its imports array.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiLike} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiLike,
  ],
})
export class Example {}

----------------------------------------

TITLE: Importing TuiLet in Standalone Angular Component
DESCRIPTION: Shows how to import the TuiLet module from @taiga-ui/cdk and properly include it in a standalone component's configuration. The component is marked as standalone and includes TuiLet in its imports array.

LANGUAGE: typescript
CODE:
import {TuiLet} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiLet,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Implementing Taiga UI Elastic Container in HTML
DESCRIPTION: Shows the basic structure of a tui-elastic-container element that wraps content including a heading, paragraph, and button. The elastic container provides flexible content organization with automatic sizing.

LANGUAGE: html
CODE:
<tui-elastic-container>
  <h2>Title</h2>
  <p>Your content here</p>
  <button>Add more</button>
</tui-elastic-container>

----------------------------------------

TITLE: Importing TuiTabs in Standalone Angular Component
DESCRIPTION: Shows how to import the TuiTabs component from @taiga-ui/kit package and include it in a standalone Angular component's imports array. The component is configured as standalone using the standalone: true property.

LANGUAGE: typescript
CODE:
import {TuiTabs} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTabs,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Configuring TypeScript Compiler Options for Angular Project in JSON
DESCRIPTION: This snippet defines the TypeScript compiler options and Angular compiler options for the project. It includes strict type checking, module resolution settings, and target ECMAScript version. It also specifies Angular-specific compiler options for improved type safety and template checking.

LANGUAGE: json
CODE:
{
  "compileOnSave": false,
  "compilerOptions": {
    "outDir": "./dist/out-tsc",
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "esModuleInterop": true,
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "ES2015",
    "module": "ES2022",
    "useDefineForClassFields": false,
    "lib": ["ES2022", "dom"]
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}

----------------------------------------

TITLE: Configuring Angular Component with Taiga UI Date Range Input
DESCRIPTION: This snippet demonstrates how to set up an Angular component with Taiga UI's input date range module. It imports necessary modules from Angular forms and Taiga UI, configures the component as standalone, and sets up a simple form group.

LANGUAGE: typescript
CODE:
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiInputDateRangeModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiInputDateRangeModule,
  ],
  // ...
})
export class Example {
  testForm = new FormGroup({
    testValue: new FormControl(),
  });
}

----------------------------------------

TITLE: Displaying Error Message with Taiga UI Error Component in HTML
DESCRIPTION: This snippet shows how to use the tui-error component from Taiga UI to display an error message. The error message is bound to the 'error' property, which is likely defined in the component's TypeScript file.

LANGUAGE: HTML
CODE:
<tui-error [error]="error"></tui-error>

----------------------------------------

TITLE: Configuring Multiple Stylesheets for Angular Component
DESCRIPTION: This TypeScript code configures an Angular component with multiple stylesheet files. It uses the @Component decorator to specify both SCSS and LESS files in the styleUrls array.

LANGUAGE: typescript
CODE:
@Component({
  //...,
  styleUrls: ['./my.component.scss', './my.component.less'],
})
export class Example {}

----------------------------------------

TITLE: Creating a Card with Avatar and Title using Taiga UI in HTML
DESCRIPTION: This snippet demonstrates how to create a card component using Taiga UI directives and components. It includes a card container with the tuiCardMedium directive, an avatar component with a star icon, and a title with a subtitle using Taiga UI's typography directives.

LANGUAGE: HTML
CODE:
<div tuiCardMedium>
  <tui-avatar
    class="star"
    src="@tui.star"
  ></tui-avatar>

  <h2 tuiTitle>
    Title
    <span tuiSubtitle>Subtitle</span>
  </h2>
</div>

----------------------------------------

TITLE: Injecting TuiBreakpointService in Angular Component using TypeScript
DESCRIPTION: This code snippet demonstrates how to import the TuiBreakpointService from the Taiga UI core library and inject it into an Angular component class. The service is assigned to a private readonly property named breakpoint$.

LANGUAGE: typescript
CODE:
import {TuiBreakpointService} from '@taiga-ui/core';

// ...
export class Example {
  private readonly breakpoint$ = inject(TuiBreakpointService);
}

----------------------------------------

TITLE: Implementing Taiga UI Push Component in HTML
DESCRIPTION: This snippet demonstrates the structure of a Taiga UI Push component. It includes a heading, a Taiga UI icon, custom text, and a styled button using Taiga UI directives.

LANGUAGE: html
CODE:
<tui-push heading="1.21 Gigawatts!?!">
  <tui-icon icon="@tui.clock" />
  This is heavy!
  <button tuiLink>Great Scott!</button>
</tui-push>

----------------------------------------

TITLE: Implementing Taiga UI Active Zone with Buttons in HTML
DESCRIPTION: This snippet demonstrates how to use the tuiActiveZoneChange directive from Taiga UI along with styled buttons. It creates a container div that responds to active zone changes and includes two buttons with Taiga UI styling.

LANGUAGE: HTML
CODE:
<div (tuiActiveZoneChange)="onActiveZone($event)">
  <button
    tuiButton
    type="button"
  >
    Button 1
  </button>
  <button
    tuiButton
    type="button"
  >
    Button 2
  </button>
</div>

----------------------------------------

TITLE: Installing Taiga UI Addon Packages with NPM
DESCRIPTION: Commands to install different Taiga UI addon packages including charts, commerce features, mobile components, table utilities, documentation tools, and layout components. Each package provides specific functionality for building UI applications with Taiga UI framework.

LANGUAGE: bash
CODE:
npm i @taiga-ui/addon-charts    // Components for various charts, graphs and visualizations
npm i @taiga-ui/addon-commerce  // Money-related extension with currencies, credit card inputs and validators
npm i @taiga-ui/addon-mobile    // Components and tools specific to mobile version of the app
npm i @taiga-ui/addon-table     // Interactive table component and related utilities
npm i @taiga-ui/addon-doc       // Taiga UI based library for developing documentation portals for Angular libraries
npm i @taiga-ui/layout          // Layout components

----------------------------------------

TITLE: Importing and Using TuiInputYearModule in Angular Component
DESCRIPTION: This snippet demonstrates how to import the TuiInputYearModule from Taiga UI and use it in a standalone Angular component. It also sets up a basic form using FormGroup and FormControl.

LANGUAGE: typescript
CODE:
import {TuiInputYearModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiInputYearModule,
  ],
  // ...
})
export class Example {
  readonly testForm = new FormGroup({
    testValue: new FormControl(null),
  });
}

----------------------------------------

TITLE: Using tui-expand Component in HTML
DESCRIPTION: Shows how to implement the tui-expand component with a basic expanded state binding. The content inside the component is eagerly loaded regardless of the expanded state.

LANGUAGE: html
CODE:
<tui-expand [expanded]="expanded">Eager content</tui-expand>

----------------------------------------

TITLE: Running Taiga UI E2E Tests
DESCRIPTION: Command to run end-to-end screenshot tests for visual regression testing

LANGUAGE: bash
CODE:
npm run test:e2e

----------------------------------------

TITLE: Implementing Taiga UI Root Component in HTML
DESCRIPTION: This snippet shows the basic structure for using the Taiga UI root component in an Angular template. It wraps the app content and includes the sheets host component for overlay content.

LANGUAGE: HTML
CODE:
<tui-root>
  <!-- Your app content -->
  <tui-sheets-host ngProjectAs="tuiOverContent"></tui-sheets-host>
</tui-root>

----------------------------------------

TITLE: Setting First Day of Week in Taiga UI Angular Component
DESCRIPTION: This TypeScript code configures a standalone Angular component to use Sunday as the first day of the week in Taiga UI. It imports necessary types from Taiga UI packages and uses dependency injection to provide the TUI_FIRST_DAY_OF_WEEK token with the value of TuiDayOfWeek.Sunday.

LANGUAGE: typescript
CODE:
import {TuiDayOfWeek} from '@taiga-ui/cdk';
import {TUI_FIRST_DAY_OF_WEEK} from '@taiga-ui/core';

@Component({
  standalone: true,
  // ...
  providers: [
    {
      provide: TUI_FIRST_DAY_OF_WEEK,
      useValue: TuiDayOfWeek.Sunday,
    },
  ],
})
export class Example {}

----------------------------------------

TITLE: Importing and Configuring TuiTextfield in Angular Component
DESCRIPTION: This snippet demonstrates how to import the TuiTextfield component from Taiga UI and include it in a standalone Angular component. It shows the basic setup required to use Taiga UI components in an Angular application.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiTextfield} from '@taiga-ui/core';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTextfield,
  ],
})
export class Example {}

----------------------------------------

TITLE: Importing TuiFade in Standalone Angular Component
DESCRIPTION: Shows how to import the TuiFade animation component from Taiga UI kit and set up a standalone Angular component. The component is configured with standalone: true and includes TuiFade in its imports array.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiFade} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiFade,
  ],
})
export class Example {}

----------------------------------------

TITLE: ItemsWithMore multiline mode in kit package
DESCRIPTION: Added multiline mode to ItemsWithMore component in kit package

LANGUAGE: typescript
CODE:
// Enabling multiline mode
<tui-items-with-more
  [items]="items"
  [multiline]="true"
>
</tui-items-with-more>

----------------------------------------

TITLE: Defining Routes with Taiga UI Dialogable Route in TypeScript
DESCRIPTION: This code defines an array of routes for a web application. It includes a main route with a component 'MyPage' and a child route generated using Taiga UI's 'tuiGenerateDialogableRoute' function to create a dialog route.

LANGUAGE: typescript
CODE:
export const routes = [
  {
    path: '',
    component: MyPage,
    children: [
      tuiGenerateDialogableRoute(MyDialog, {
        path: 'path/to/dialog',
      }),
    ],
  },
];

----------------------------------------

TITLE: Importing and Configuring TuiPagination in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import the TuiPagination component from the Taiga UI kit and include it in a standalone Angular component's imports array. This allows the component to use the pagination functionality provided by Taiga UI.

LANGUAGE: typescript
CODE:
import {TuiPagination} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPagination,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Installing Taiga UI CDK Package with NPM
DESCRIPTION: Command to install the Taiga UI CDK package using npm. This package provides low-level tools and abstractions for developing Taiga UI Angular entities.

LANGUAGE: bash
CODE:
npm i @taiga-ui/cdk

----------------------------------------

TITLE: Defining Router Outlet in Angular Template
DESCRIPTION: Implements the Angular router-outlet directive to serve as a container for dynamically rendered components based on the application's routing configuration. This component acts as a placeholder where routed components will be displayed.

LANGUAGE: html
CODE:
<router-outlet></router-outlet>

----------------------------------------

TITLE: Implementing Taiga UI Input with Filtered Data List in Angular
DESCRIPTION: Creates an input field with a dropdown list using Taiga UI components. The input is bound to a form control named 'user' and includes a data list wrapper that filters items based on input using the tuiFilterByInput pipe.

LANGUAGE: html
CODE:
<tui-input [formControl]="user">
  User
  <tui-data-list-wrapper
    *tuiDataList
    [items]="items | tuiFilterByInput"
  ></tui-data-list-wrapper>
</tui-input>

----------------------------------------

TITLE: Configuring Standalone Angular Component with Taiga UI Checkbox
DESCRIPTION: This snippet demonstrates how to set up a standalone Angular component that imports the TuiCheckbox module from Taiga UI. It shows the necessary imports and the component decorator configuration for using Taiga UI components.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiCheckbox} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCheckbox,
  ],
})
export class Example {}

----------------------------------------

TITLE: Initializing Angular Component with Taiga UI Imports in TypeScript
DESCRIPTION: This snippet defines an Angular component that imports and uses Taiga UI modules. It demonstrates how to set up a standalone component and import specific Taiga UI elements like TuiTextfield and TuiFluidTypography.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiTextfield} from '@taiga-ui/core';
import {TuiFluidTypography} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTextfield,
    TuiFluidTypography,
  ],
})
export class Example {}

----------------------------------------

TITLE: Setting up Angular Routes with Taiga UI Dialog Generation
DESCRIPTION: Configures Angular routes using tuiGenerateDialogableRoute utility to create a lazy-loaded dialog route. The dialog component is loaded asynchronously when the specified path is accessed.

LANGUAGE: typescript
CODE:
export const routes = [
  {
    path: '',
    component: MyPage,
    children: [
      tuiGenerateDialogableRoute(async () => import('./dialog.component'), {
        path: 'path/to/dialog',
      }),
    ],
  },
];

----------------------------------------

TITLE: Implementing Taiga UI Textfield with Two-Way Data Binding in HTML
DESCRIPTION: This snippet demonstrates how to use the Taiga UI textfield component in an Angular template. It includes two-way data binding with ngModel for the input value. The textfield is wrapped in a tui-textfield container element.

LANGUAGE: HTML
CODE:
<tui-textfield>
  <input
    tuiTextfield
    [(ngModel)]="value"
  />
</tui-textfield>

----------------------------------------

TITLE: Configuring Angular Standalone Component with Taiga UI Imports
DESCRIPTION: Sets up a standalone Angular component with necessary imports for forms handling and Taiga UI components. Includes Angular's form modules and Taiga UI's data list and combo box functionality.

LANGUAGE: typescript
CODE:
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiDataList} from '@taiga-ui/core';
import {TuiDataListWrapper} from '@taiga-ui/kit';
import {TuiComboBoxModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiComboBoxModule,
    TuiDataList,
    TuiDataListWrapper,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing Taiga UI Components in TypeScript
DESCRIPTION: Demonstrates importing TuiPopup from Taiga UI core and TuiDrawer from Taiga UI kit packages, then configuring them in a standalone Angular component's imports array. Shows the basic setup required to use these UI components.

LANGUAGE: typescript
CODE:
import {TuiPopup} from '@taiga-ui/core';
import {TuiDrawer} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPopup,
    TuiDrawer,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing and Using TuiElement in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import TuiElement from the Taiga UI CDK and use it in a standalone Angular component. It shows the component decorator with the standalone property set to true and includes TuiElement in the imports array.

LANGUAGE: typescript
CODE:
import {TuiElement} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiElement,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing TuiAppBar in Standalone Angular Component
DESCRIPTION: Demonstrates how to import the TuiAppBar component from Taiga UI's layout package and include it in a standalone Angular component's imports array. This setup enables the use of TuiAppBar within the component.

LANGUAGE: typescript
CODE:
import {TuiAppBar} from '@taiga-ui/layout';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiAppBar,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing and Using TuiHovered in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import the TuiHovered component from the Taiga UI CDK and include it in the imports array of a standalone Angular component. The TuiHovered component is likely used for handling hover states within the component.

LANGUAGE: TypeScript
CODE:
import {TuiHovered} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiHovered,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing TuiHint Component in Standalone Angular Component
DESCRIPTION: Shows how to import the TuiHint component from @taiga-ui/core package and include it in a standalone Angular component's imports array.

LANGUAGE: typescript
CODE:
import {TuiHint} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiHint,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Configuring Angular Component with Taiga UI and Forms Modules
DESCRIPTION: This code snippet shows how to import and configure an Angular component using Taiga UI components (TuiBlock, TuiCheckbox) and Angular forms modules. It demonstrates the setup for a standalone component with specific module imports.

LANGUAGE: typescript
CODE:
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiBlock, TuiCheckbox} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    TuiBlock,
    TuiCheckbox, // or TuiRadio
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Configuring Phone Input Form Component with Taiga UI in TypeScript
DESCRIPTION: Creates a standalone Angular component that implements a phone input form using TuiInputPhoneModule and ReactiveFormsModule. The component initializes a form group with a phone number control having a default value.

LANGUAGE: typescript
CODE:
import {ReactiveFormsModule} from '@angular/forms';
import {TuiInputPhoneModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    ReactiveFormsModule,
    TuiInputPhoneModule,
  ],
  // ...
})
export class Example {
  testForm = new FormGroup({
    testValue: new FormControl('+78005553535'),
  });
}

----------------------------------------

TITLE: Importing and Using Taiga UI Components in Angular TypeScript
DESCRIPTION: This code snippet demonstrates how to import and use Taiga UI components in a standalone Angular component. It specifically imports TuiButton from @taiga-ui/core and TuiButtonClose from @taiga-ui/kit, and includes them in the component's imports array.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiButton} from '@taiga-ui/core';
import {TuiButtonClose} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiButton,
    TuiButtonClose,
  ],
})
export class Example {}

----------------------------------------

TITLE: Importing and Using TuiActionBar in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import the TuiActionBar component from the Taiga UI kit and use it in a standalone Angular component. It shows the basic setup for including Taiga UI components in an Angular application.

LANGUAGE: typescript
CODE:
import {TuiActionBar} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    TuiActionBar,
    // ...
  ],
  // ...
})
export class App {}

----------------------------------------

TITLE: Basic TaigaUI Action Bar Implementation in Angular Template
DESCRIPTION: Implementation of a TaigaUI Action Bar component using the structural directive tuiActionBar. The open parameter controls the visibility of the action bar, and the content is placed between the opening and closing tags.

LANGUAGE: html
CODE:
<tui-action-bar *tuiActionBar="open">content</tui-action-bar>

----------------------------------------

TITLE: Implementing Taiga UI Arc Chart in Angular HTML Template
DESCRIPTION: Basic implementation of a Taiga UI Arc Chart component with a value binding. The component renders a circular chart that visualizes the bound value property.

LANGUAGE: html
CODE:
<tui-arc-chart [value]="value"></tui-arc-chart>

----------------------------------------

TITLE: Implementing Line Clamp with Taiga UI in Angular HTML Template
DESCRIPTION: This snippet demonstrates how to use the tui-line-clamp component from Taiga UI to limit text display to a specific number of lines. It sets a lines limit of 3 and provides a template for the content to be clamped, which includes various HTML elements.

LANGUAGE: html
CODE:
<tui-line-clamp
  [content]="content"
  [linesLimit]="3"
></tui-line-clamp>
<ng-template #content>
  Lorem ipsum
  <br />
  Gaudeamus igitur
  <br />
  <strong>Carpe diem</strong>
  <br />
  Veni, vidi, vici
</ng-template>

----------------------------------------

TITLE: Importing TuiHint in Standalone Angular Component
DESCRIPTION: Shows how to import the TuiHint component from Taiga UI core package and include it in a standalone Angular component's imports array. The component uses TypeScript decorators for configuration.

LANGUAGE: typescript
CODE:
import {TuiHint} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiHint,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing and Using Taiga UI Components in Angular
DESCRIPTION: This snippet demonstrates how to import Taiga UI components and use them in a standalone Angular component. It includes the setup of a reactive form with a single form control.

LANGUAGE: typescript
CODE:
import {TuiTextfield} from '@taiga-ui/core';
import {TuiInputPin} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTextfield,
    TuiInputPin,
  ],
  // ...
})
export class Example {
  readonly testForm = new FormGroup({
    testValue: new FormControl(null),
  });
}

----------------------------------------

TITLE: Implementing TuiAutoFocus with Custom Options in Angular Component
DESCRIPTION: Configuration of a standalone Angular component that imports and configures TuiAutoFocus directive with custom options. Sets a 300ms focus delay and prevents automatic scrolling to the focused element.

LANGUAGE: typescript
CODE:
@Component({
  standalone: true,
  imports: [
    // ...
    TuiAutoFocus,
  ],
  providers: [
    tuiAutoFocusOptionsProvider({
      delay: 300, // NaN = no delay/sync
      preventScroll: true,
    }),
  ],
})
export class Example {}

----------------------------------------

TITLE: Implementing Zoomable Content with Taiga UI in HTML
DESCRIPTION: This snippet demonstrates how to create a zoomable element using Taiga UI's tuiZoom directive. It binds the zoom event to update a scale variable, which is then applied as a transform to the inner div for scaling effect.

LANGUAGE: html
CODE:
<div (tuiZoom)="onZoom(scale += $event.delta)">
  <div [style.transform]="'scale(' + scale + ')'">Zoomable</div>
</div>

----------------------------------------

TITLE: Importing Taiga UI Components in Angular
DESCRIPTION: Shows how to import TuiInputSearch and TuiTextfield components from Taiga UI packages and include them in a standalone Angular component's imports array. The component is configured using the standalone: true property for modern Angular applications.

LANGUAGE: typescript
CODE:
import {TuiInputSearch} from '@taiga-ui/layout';
import {TuiTextfield} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTextfield,
    TuiInputSearch,
  ],
  // ...
})
export class MyComponent {}

----------------------------------------

TITLE: Implementing Basic Avatar in Taiga UI HTML
DESCRIPTION: Creates a basic avatar component with text content 'Batman' using Taiga UI's tui-avatar element. This component can be used to display user avatars or profile pictures in a web application.

LANGUAGE: html
CODE:
<tui-avatar>Batman</tui-avatar>

----------------------------------------

TITLE: Implementing Taiga UI Pulse Component in HTML
DESCRIPTION: This snippet shows how to use the tui-pulse component from Taiga UI in an Angular template. The [playing] attribute is bound to a 'value' variable, allowing dynamic control of the pulse animation.

LANGUAGE: HTML
CODE:
<tui-pulse [playing]="value"></tui-pulse>

----------------------------------------

TITLE: Basic Fade Animation with tuiFade Directive
DESCRIPTION: Shows the basic implementation of a fade animation effect using Taiga UI's tuiFade directive. The directive is applied to a div element that contains content that will fade in/out.

LANGUAGE: html
CODE:
<div tuiFade>
  <!-- long text here -->
</div>

----------------------------------------

TITLE: Importing TuiMedia in Standalone Angular Component
DESCRIPTION: This snippet demonstrates how to import the TuiMedia component from the Taiga UI CDK and use it in a standalone Angular component. The component is declared as standalone and includes TuiMedia in its imports array.

LANGUAGE: typescript
CODE:
import {TuiMedia} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiMedia,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Configuring TuiInputNumber Component with Custom Options
DESCRIPTION: Sets up a standalone Angular component with TuiInputNumber integration, including custom default options for number input behavior. Demonstrates the use of reactive forms and custom input constraints like min/max values and percentage postfix.

LANGUAGE: typescript
CODE:
import {ReactiveFormsModule} from '@angular/forms';
import {TuiNumberFormat} from '@taiga-ui/core';
import {TuiInputNumber, tuiInputNumberOptionsProvider} from '@taiga-ui/kit';

@Component({
  standalone: true,
  imports: [ReactiveFormsModule, TuiInputNumber, TuiNumberFormat],
  providers: [
    /**
     * (Optional)
     * Customize default behavior for all InputNumber-s
     * inside specific Dependency Injection scope
     */
    tuiInputNumberOptionsProvider({
      min: 0,
      max: 100,
      postfix: '%',
    }),
  ],
})
export class Example {
  protected readonly control = new FormControl(42);
}

----------------------------------------

TITLE: Configuring Angular Component with Taiga UI and ReactiveFormsModule
DESCRIPTION: This snippet demonstrates how to set up an Angular component using Taiga UI's TuiInputInline and ReactiveFormsModule. It shows the necessary import statements and the component decorator configuration for a standalone component.

LANGUAGE: typescript
CODE:
import {ReactiveFormsModule} from '@angular/forms';
import {TuiInputInline} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    ReactiveFormsModule,
    TuiInputInline,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Implementing Lazy Loading Image with Taiga UI Directive
DESCRIPTION: Demonstrates how to add lazy loading to an HTML image element using the tuiLoading directive with 'lazy' value. The example includes standard image attributes like src, height, and width along with the Taiga UI specific directive.

LANGUAGE: html
CODE:
<img
  src="myImage.jpg"
  height="200"
  width="300"
  tuiLoading="lazy"
/>

----------------------------------------

TITLE: Configuring Angular Standalone Component with Taiga UI
DESCRIPTION: Shows the import statements and component configuration for using Taiga UI's input range module in a standalone Angular component. Demonstrates proper module imports including FormsModule, ReactiveFormsModule, and TuiInputRangeModule.

LANGUAGE: typescript
CODE:
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiInputRangeModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiInputRangeModule,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Creating Dropdown with Taiga UI Directive
DESCRIPTION: Shows how to implement a dropdown menu using tuiDropdown directive from Taiga UI. The code uses a host element with [tuiDropdown] directive bound to a template reference and [tuiDropdownManual] for manual control of the dropdown state.

LANGUAGE: html
CODE:
<div
  [tuiDropdown]="dropdownContent"
  [tuiDropdownManual]="open"
>
  Host element
</div>

<ng-template #dropdownContent>Dropdown content</ng-template>

----------------------------------------

TITLE: Implementing Taiga UI Tiles with Angular Template Syntax
DESCRIPTION: This snippet shows how to use the Taiga UI Tiles component to create a grid of interactive tiles. It utilizes Angular's ngFor directive to iterate over a collection of items, setting the width and height of each tile dynamically. A drag handle is added to each tile using the tuiTileHandle directive.

LANGUAGE: HTML
CODE:
<tui-tiles [(items)]="items">
  <tui-tile
    *ngFor="let item of items"
    [width]="item.w"
    [height]="item.h"
  >
    <tui-icon
      tuiTileHandle
      icon="@tui.grip-vertical"
    />
    {{ item.content }}
  </tui-tile>
</tui-tiles>

----------------------------------------

TITLE: Binding Pan Gesture Handler in Taiga UI HTML Template
DESCRIPTION: Demonstrates how to attach a pan gesture handler to a div element using Taiga UI's tuiPan directive. The event handler is bound using Angular's event binding syntax.

LANGUAGE: html
CODE:
<div (tuiPan)="..."></div>

----------------------------------------

TITLE: Importing and Using TuiNumberFormat in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import the TuiNumberFormat module from the @taiga-ui/core package and include it in the imports array of a standalone Angular component. This allows the component to use the number formatting functionality provided by Taiga UI.

LANGUAGE: typescript
CODE:
import {TuiNumberFormat} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiNumberFormat,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Configuring TuiInputTimeModule in Angular Component
DESCRIPTION: This snippet demonstrates how to import and configure the TuiInputTimeModule from Taiga UI in an Angular component. It includes custom options for the time input and sets up a form group with a TuiTime value.

LANGUAGE: typescript
CODE:
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiInputTimeModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiInputTimeModule,
  ],
  providers: [
    {
      provide: TUI_INPUT_TIME_OPTIONS,
      useValue: {
        icon: '@tui.circle-check',
        mode: 'HH:MM:SS',
        itemSize: 's',
      },
    },
  ],
})
export class Example {
  testForm = new FormGroup({
    testValue: new FormControl(new TuiTime(12, 30)),
  });
}

----------------------------------------

TITLE: Implementing Taiga UI Range Input in Angular
DESCRIPTION: Examples of tui-range component implementation showing two binding approaches: ngModel for template-driven forms and formControl for reactive forms. Both examples set a maximum value of 10 for the range input.

LANGUAGE: html
CODE:
<tui-range
  [max]="10"
  [(ngModel)]="model"
></tui-range>

<tui-range
  [formControl]="testValue"
  [max]="10"
></tui-range>

----------------------------------------

TITLE: Configuring Standalone Angular Component with TuiDropdown
DESCRIPTION: Demonstrates how to import and configure the TuiDropdown component from Taiga UI core library in a standalone Angular component. Shows the basic setup with component decorator and imports array.

LANGUAGE: typescript
CODE:
import {TuiDropdown} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiDropdown,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing TuiLineChart in Standalone Angular Component
DESCRIPTION: Shows how to import the TuiLineChart component from Taiga UI's addon-charts package and include it in a standalone Angular component's imports array. This setup enables the use of TuiLineChart within the component.

LANGUAGE: typescript
CODE:
import {TuiLineChart} from '@taiga-ui/addon-charts';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiLineChart,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing TuiTableFilters in Standalone Angular Component
DESCRIPTION: Shows how to import TuiTableFilters from @taiga-ui/addon-table package and include it in a standalone component's imports array. This setup enables table filtering functionality in the component.

LANGUAGE: typescript
CODE:
import {TuiTableFilters} from '@taiga-ui/addon-table';

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTableFilters,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Clamping Values with Taiga UI CDK
DESCRIPTION: Imports and uses the clamp utility function from Taiga UI CDK to ensure a value stays within specified minimum and maximum bounds. The function takes three parameters: the value to clamp, minimum bound, and maximum bound.

LANGUAGE: typescript
CODE:
import {clamp} from '@taiga-ui/cdk';

// ...
clamped = clamp(value, min, max);
// ...

----------------------------------------

TITLE: Importing TuiZoom in Standalone Angular Component
DESCRIPTION: This snippet demonstrates how to import the TuiZoom component from the Taiga UI CDK and include it in the imports array of a standalone Angular component. It showcases the basic structure for using Taiga UI components in a modular way.

LANGUAGE: typescript
CODE:
import {TuiZoom} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiZoom,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing and Using TuiPresent in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import the TuiPresent component from the Taiga UI kit and include it in the imports array of a standalone Angular component. It shows the basic structure of a component using Taiga UI elements.

LANGUAGE: typescript
CODE:
import {TuiPresent} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPresent,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing and Configuring Taiga UI Mobile Calendar in Angular Component
DESCRIPTION: This snippet demonstrates how to import the necessary Taiga UI modules and configure an Angular component to use the mobile calendar. It includes the import statements for TuiMobileCalendar and TuiInputDateModule, and shows how to set up the component with the required imports and providers.

LANGUAGE: typescript
CODE:
import {TuiMobileCalendar, tuiProvideMobileCalendar} from '@taiga-ui/addon-mobile';
import {TuiInputDateModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiMobileCalendar,
  ],
  // If you want it in date picker inputs
  providers: [tuiProvideMobileCalendar()],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Formatting Timestamp with Taiga UI Pipe in Angular Template
DESCRIPTION: This snippet demonstrates how to use the tuiFormatDate pipe from Taiga UI to format a timestamp in an Angular template. The pipe is applied asynchronously, allowing for dynamic date formatting based on the current locale or user preferences.

LANGUAGE: html
CODE:
Formatted timestamp: {{timestamp | tuiFormatDate | async}}

----------------------------------------

TITLE: Implementing Taiga UI Dropdown in Angular HTML Template
DESCRIPTION: This snippet demonstrates how to set up a Taiga UI dropdown component in an Angular application. It uses the tuiDropdownContext directive on the host element and binds the dropdown content using [tuiDropdown]. The dropdown content is defined in a separate template with a close function for dismissing the dropdown.

LANGUAGE: html
CODE:
<div
  tuiDropdownContext
  [tuiDropdown]="content"
>
  Host element
</div>

<ng-template
  #content
  let-close
>
  Dropdown content
  <button (click)="close()"></button>
</ng-template>

----------------------------------------

TITLE: Configuring Angular Standalone Component with Taiga UI Slider
DESCRIPTION: Sets up a standalone Angular component that uses Taiga UI Slider with form controls. Demonstrates proper import configuration and basic form control initialization.

LANGUAGE: typescript
CODE:
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiSlider} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiSlider,
  ],
  // ...
})
export class Example {
  readonly control = new FormControl(1);
}

----------------------------------------

TITLE: Implementing Taiga UI Number Input in Angular Form
DESCRIPTION: Demonstrates how to bind a Taiga UI number input component to an Angular reactive form using formControlName. The component is wrapped in a form element and uses formGroup directive for form management.

LANGUAGE: html
CODE:
<form [formGroup]="testForm">
  <tui-input-number formControlName="testValue">Type a sum</tui-input-number>
</form>

----------------------------------------

TITLE: Installing Taiga UI Packages
DESCRIPTION: Command to install the main Taiga UI packages and documentation addon using npm

LANGUAGE: bash
CODE:
npm i @taiga-ui/{cdk,core,kit,addon-mobile}

LANGUAGE: bash
CODE:
npm i @taiga-ui/addon-doc

----------------------------------------

TITLE: Applying Taiga UI Touchable Directive in HTML
DESCRIPTION: This snippet demonstrates how to use the tuiTouchable directive on a div and an anchor element. The div uses a 'transform' effect, while the anchor combines the tuiLink directive with an 'opacity' touch effect.

LANGUAGE: html
CODE:
<div tuiTouchable="transform">...</div>
<a
  tuiLink
  tuiTouchable="opacity"
>
  ...
</a>

----------------------------------------

TITLE: Implementing Resizable Container with Taiga UI
DESCRIPTION: Sets up a resizable container using Taiga UI directives. The outer div uses tuiResizable directive to enable resize functionality, while the inner div uses tuiResizer directive with a vector parameter [1, 0] to specify horizontal-only resizing.

LANGUAGE: html
CODE:
<div tuiResizable>
  <div [tuiResizer]="[1, 0]"></div>
</div>

----------------------------------------

TITLE: Configuring TuiTagModule with Custom Options in TypeScript
DESCRIPTION: Sets up a standalone Angular component with TuiTagModule and configures default tag options using tuiTagOptionsProvider. Demonstrates setting custom size and status parameters for all tags within the component's scope.

LANGUAGE: typescript
CODE:
import {TuiTagModule, tuiTagOptionsProvider} from '@taiga-ui/legacy';
// ...

@Component({
  standalone: true,
  imports: [TuiTagModule],
  providers: [
    tuiTagOptionsProvider({
      size: 'l',
      status: 'success',
    }),
  ],
})
export class Example {}

----------------------------------------

TITLE: Binding Zoom Events with tuiZoom Directive in HTML
DESCRIPTION: Shows how to use Taiga UI's tuiZoom directive to handle zoom events on a div element. The directive binds to a zoom event handler method named onZoom that receives the zoom event as a parameter.

LANGUAGE: html
CODE:
<div (tuiZoom)="onZoom($event)">...</div>

----------------------------------------

TITLE: Implementing Taiga UI Hint with Pointer in HTML
DESCRIPTION: This code snippet demonstrates how to create a block element with a pointer hint using Taiga UI's custom attributes. The 'tuiHintPointer' attribute enables the pointer functionality, while 'tuiHint' sets the hint text.

LANGUAGE: HTML
CODE:
<div
  tuiHintPointer
  tuiHint="Hint text"
>
  Block with pointer hint
</div>

----------------------------------------

TITLE: Importing and Using TuiDropdown in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import the TuiDropdown component from the Taiga UI core package and include it in an Angular standalone component's imports array. It sets up the necessary configuration for using the dropdown functionality in the component.

LANGUAGE: typescript
CODE:
import {TuiDropdown} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiDropdown,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Implementing File Input and Display with Taiga UI in Angular
DESCRIPTION: This snippet demonstrates how to create a file input using Taiga UI components in an Angular application. It includes a file input with multiple file selection, form control binding, and a rejection handler. The code also shows how to display selected files using Taiga UI's file display component.

LANGUAGE: html
CODE:
<label tuiInputFiles>
  <input
    tuiInputFiles
    accept="image/*"
    [multiple]="true"
    [formControl]="control"
    (reject)="onReject($event)"
  />
</label>

<tui-files>
  <tui-file
    tuiItem
    [file]="file"
  ></tui-file>
</tui-files>

----------------------------------------

TITLE: Implementing Taiga UI Reorder Component in HTML
DESCRIPTION: Shows how to implement the tui-reorder component with two-way data binding for both the items array and enabled state. The component enables drag-and-drop reordering functionality for a collection of items.

LANGUAGE: html
CODE:
<tui-reorder
  [(items)]="items"
  [(enabled)]="enabled"
></tui-reorder>

----------------------------------------

TITLE: Implementing Fluid Typography in Taiga UI TextField
DESCRIPTION: Shows how to create a text input field using Taiga UI's TextField component with fluid typography capabilities. The tuiFluidTypography directive enables responsive font sizing based on viewport dimensions.

LANGUAGE: html
CODE:
<tui-textfield>
  <input
    tuiTextfield
    tuiFluidTypography
  />
</tui-textfield>

----------------------------------------

TITLE: Applying Taiga UI Skeleton Directive in HTML
DESCRIPTION: This snippet demonstrates how to use the tuiSkeleton directive from Taiga UI to create a loading placeholder. The directive is applied to a span element, which will display 'Loading..' text while the skeleton effect is active.

LANGUAGE: HTML
CODE:
<span [tuiSkeleton]="true">Loading..</span>

----------------------------------------

TITLE: Importing TuiDropdown in Standalone Angular Component
DESCRIPTION: Shows the configuration of a standalone Angular component that imports the TuiDropdown module from Taiga UI core package. The example demonstrates the modern standalone component pattern in Angular with specific module imports.

LANGUAGE: typescript
CODE:
import {TuiDropdown} from '@taiga-ui/core';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiDropdown,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Creating a Currency Input Field with Taiga UI in Angular
DESCRIPTION: This snippet demonstrates how to create a currency input field using Taiga UI components. It utilizes the tui-textfield component for the overall structure, a label for user guidance, and an input element with the tuiInputNumber directive for numerical input. The input also includes a USD currency prefix using the tuiCurrency pipe.

LANGUAGE: html
CODE:
<tui-textfield>
  <label tuiLabel>Type a sum</label>

  <input
    formControlName="testValue"
    tuiInputNumber
    [prefix]="'USD' | tuiCurrency"
  />
</tui-textfield>

----------------------------------------

TITLE: Importing and Using TuiFilterByInputPipe in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import the TuiFilterByInputPipe from the @taiga-ui/kit package and include it in the imports array of a standalone Angular component. The TuiFilterByInputPipe is likely used for filtering data based on input within the component.

LANGUAGE: TypeScript
CODE:
import {TuiFilterByInputPipe} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiFilterByInputPipe,
  ],
  //  ...
})
export class Example {}

----------------------------------------

TITLE: Importing and Using TuiHint in Standalone Angular Component
DESCRIPTION: This snippet demonstrates how to import the TuiHint component from the Taiga UI core package and include it in a standalone Angular component's imports array. This setup allows the component to use TuiHint functionality.

LANGUAGE: TypeScript
CODE:
import {TuiHint} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiHint,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Implementing TuiInputPhoneInternational in Angular Standalone Component
DESCRIPTION: This snippet shows how to set up a standalone Angular component using Taiga UI's TuiInputPhoneInternational for international phone number input. It includes necessary imports, form control initialization, and country code configuration.

LANGUAGE: typescript
CODE:
import {ReactiveFormsModule} from '@angular/forms';
import type {TuiCountryIsoCode} from '@taiga-ui/i18n';
import {TuiTextfield} from '@taiga-ui/core';
import {TuiInputPhoneInternational} from '@taiga-ui/experimental';

@Component({
  standalone: true,
  imports: [ReactiveFormsModule, TuiInputPhoneInternational],
  // ...
})
export class Example {
  readonly testForm = new FormGroup({
    testValue: new FormControl('+78005553535'),
  });

  readonly countries: ReadonlyArray<TuiCountryIsoCode> = ['RU', 'KZ', 'UA', 'BY'];
}

----------------------------------------

TITLE: Configuring Taiga UI Input Date Component in HTML
DESCRIPTION: This snippet demonstrates how to use the tui-input-date component from Taiga UI with custom date formatting. The tuiDateFormat input property is used to specify the mode and separator for date display.

LANGUAGE: HTML
CODE:
<tui-input-date [tuiDateFormat]="{mode, separator}"></tui-input-date>

----------------------------------------

TITLE: Configuring Standalone Angular Component with TuiFieldErrorPipe
DESCRIPTION: Example of importing TuiFieldErrorPipe from @taiga-ui/kit package and including it in a standalone Angular component's imports array. Shows the basic structure for component configuration with Taiga UI integration.

LANGUAGE: typescript
CODE:
import {TuiFieldErrorPipe} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiFieldErrorPipe,
  ],
})
export class Example {}

----------------------------------------

TITLE: Importing and Using TuiSwipe in Angular Component
DESCRIPTION: This snippet demonstrates how to import the TuiSwipe component from the Taiga UI CDK and include it in the imports array of a standalone Angular component. The TuiSwipe component is likely used for handling swipe gestures in the user interface.

LANGUAGE: typescript
CODE:
import {TuiSwipe} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiSwipe,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing and Using Taiga UI Resizable Components in Angular
DESCRIPTION: This snippet demonstrates how to import TuiResizable and TuiResizer from Taiga UI's CDK and use them in a standalone Angular component. It shows the import statements and the component decorator with the necessary imports.

LANGUAGE: typescript
CODE:
import {TuiResizable, TuiResizer} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiResizable,
    TuiResizer,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Configuring Taiga UI Language Switcher in TypeScript
DESCRIPTION: This code snippet sets up the Taiga UI language switcher provider in a TypeScript application. It uses dynamic imports to load language files based on the selected language, supporting multiple languages including a custom Serbian language implementation.

LANGUAGE: typescript
CODE:
import {tuiLanguageSwitcher, TuiLanguageName} from '@taiga-ui/i18n';

bootstrapApplication(App, {
  providers: [
    // ...
    tuiLanguageSwitcher(async (language: TuiLanguageName): Promise<unknown> => {
      switch (language) {
        case 'belarusian':
          return import('@taiga-ui/i18n/languages/belarusian');
        case 'chinese':
          return import('@taiga-ui/i18n/languages/chinese');
        case 'dutch':
          return import('@taiga-ui/i18n/languages/dutch');
        case 'french':
          return import('@taiga-ui/i18n/languages/french');
        case 'german':
          return import('@taiga-ui/i18n/languages/german');
        case 'italian':
          return import('@taiga-ui/i18n/languages/italian');
        case 'polish':
          return import('@taiga-ui/i18n/languages/polish');
        case 'portuguese':
          return import('@taiga-ui/i18n/languages/portuguese');
        case 'russian':
          return import('@taiga-ui/i18n/languages/russian');
        case 'spanish':
          return import('@taiga-ui/i18n/languages/spanish');
        case 'turkish':
          return import('@taiga-ui/i18n/languages/turkish');
        case 'ukrainian':
          return import('@taiga-ui/i18n/languages/ukrainian');
        case 'vietnamese':
          return import('@taiga-ui/i18n/languages/vietnamese');

        case 'serbian': // custom language for example
          return import('@my-scope/serbian-language');

        default:
          return import('@taiga-ui/i18n/languages/english');
      }
    }),
  ],
}).catch((err: unknown) => console.error(err));

----------------------------------------

TITLE: Importing and Using TuiFormatNumberPipe in Angular Component
DESCRIPTION: This code demonstrates how to import the TuiFormatNumberPipe from the Taiga UI core library and include it in the imports array of a standalone Angular component. The TuiFormatNumberPipe is likely used for number formatting within the component's template.

LANGUAGE: typescript
CODE:
import {TuiFormatNumberPipe} from '@taiga-ui/core';

//...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiFormatNumberPipe,
  ],
  //  ...
})
export class Example {}

----------------------------------------

TITLE: Implementing TuiSidebar Component in TypeScript
DESCRIPTION: Shows the basic setup of a standalone Angular component using Taiga UI's sidebar. The component imports TuiSidebar and TuiActiveZone modules and implements a simple toggle functionality for controlling the sidebar's open state.

LANGUAGE: typescript
CODE:
import {TuiSidebar} from '@taiga-ui/addon-mobile';
import {TuiActiveZone} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiSidebar,
    TuiActiveZone,
  ],
  // ...
})
export class Example {
  open = false;

  toggle(open: boolean) {
    this.open = open;
  }
}

----------------------------------------

TITLE: Configuring Jest Test Environment with Browser Event Mocks in TypeScript
DESCRIPTION: Sets up the Jest testing environment for Taiga UI by importing required testing utilities and creating mock implementations for browser events (AnimationEvent, TransitionEvent, DragEvent). Uses reflect-metadata for runtime type reflection.

LANGUAGE: typescript
CODE:
import '@taiga-ui/testing/setup-jest';

// allows you to do runtime reflection on types
import 'reflect-metadata';

// make custom mocks
(window as any).AnimationEvent = {};
(window as any).TransitionEvent = {};
(window as any).DragEvent = class {};

----------------------------------------

TITLE: Creating a Dropdown Button with Taiga UI in Angular HTML Template
DESCRIPTION: This snippet demonstrates how to create a dropdown button using Taiga UI components. It uses the tuiButton directive for styling, tuiDropdown for the dropdown functionality, and tui-data-list for displaying the menu items. The dropdown content is defined using an ng-template.

LANGUAGE: html
CODE:
<button
  tuiButton
  type="button"
  [tuiDropdown]="dropdown"
  [(tuiDropdownOpen)]="open"
>
  Open menu
  <ng-template #dropdown>
    <tui-data-list>
      <button
        *ngFor="let item of items"
        tuiOption
        (click)="onClick()"
      >
        {{item}}
      </button>
    </tui-data-list>
  </ng-template>
</button>

----------------------------------------

TITLE: Using TuiMapper Pipe with Arguments in Taiga UI Template
DESCRIPTION: Shows how to use the TuiMapper pipe to transform a value using a mapper function with an additional argument. The pipe takes an item as input, applies the mapper function with someArg as an extra parameter to transform the value.

LANGUAGE: html
CODE:
{{item | tuiMapper: mapper: someArg}}

----------------------------------------

TITLE: Implementing Taiga UI Input with Cleaner Directive in HTML
DESCRIPTION: This snippet demonstrates how to use the Taiga UI input component with the textfield cleaner directive. The cleaner functionality is enabled by setting the [tuiTextfieldCleaner] attribute to true. The input is wrapped in a div with a 'wrapper' class for styling purposes.

LANGUAGE: html
CODE:
<div
  class="wrapper"
  [tuiTextfieldCleaner]="true"
>
  <tui-input>...</tui-input>
</div>

----------------------------------------

TITLE: Importing and Configuring TuiTextfieldControllerModule in Angular Component
DESCRIPTION: This snippet demonstrates how to import the TuiTextfieldControllerModule from Taiga UI's legacy package and include it in a standalone Angular component's configuration. It showcases the module import statement and its addition to the component's imports array.

LANGUAGE: typescript
CODE:
import {TuiTextfieldControllerModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTextfieldControllerModule,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing TuiBarChart in Angular Standalone Component
DESCRIPTION: Shows how to properly import the TuiBarChart component from @taiga-ui/addon-charts package and include it in the imports array of a standalone Angular component. This setup enables the use of the bar chart component within the example component.

LANGUAGE: typescript
CODE:
import {TuiBarChart} from '@taiga-ui/addon-charts';

//...

@Component({
  standalone: true,
  imports: [
    //  ...
    TuiBarChart,
  ],
  //...
})
export class Example {}

----------------------------------------

TITLE: Implementing Taiga UI Combo Box in Angular HTML Template
DESCRIPTION: This snippet demonstrates how to use the tui-combo-box component from Taiga UI in an Angular template. It includes two-way data binding with ngModel and uses a custom stringify pipe for displaying option names.

LANGUAGE: html
CODE:
<tui-combo-box
  [stringify]="'name' | tuiStringify"
  [(ngModel)]="value"
>
  <!-- ... -->
</tui-combo-box>

----------------------------------------

TITLE: Importing TuiCurrencyPipe in Angular Standalone Component
DESCRIPTION: Shows how to import TuiCurrencyPipe from Taiga UI's commerce addon and include it in a standalone component's imports array. This allows the component to use currency formatting functionality.

LANGUAGE: typescript
CODE:
import {TuiCurrencyPipe} from '@taiga-ui/addon-commerce';

//...

@Component({
  standalone: true,
  imports: [
    //...
    TuiCurrencyPipe,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Creating Navigation Header with Taiga UI App Bar
DESCRIPTION: Demonstrates implementation of a navigation header using Taiga UI's App Bar component. Includes a back button on the left, page title in the center, and a settings icon button on the right. Uses Taiga UI's built-in slots for positioning elements.

LANGUAGE: html
CODE:
<header>
  <tui-app-bar>
    <button
      tuiAppBarBack
      tuiSlot="left"
    >
      Back
    </button>
    Page title
    <button
      tuiIconButton
      icon="@tui.settings"
      title="settings"
      tuiSlot="right"
    ></button>
  </tui-app-bar>
</header>

----------------------------------------

TITLE: Implementing Taiga UI Bar Component in HTML
DESCRIPTION: Shows how to integrate a Taiga UI bar component with value binding. The tui-bar component accepts a value property that controls the bar's progress or filled state.

LANGUAGE: html
CODE:
<tui-bar [value]="value"></tui-bar>

----------------------------------------

TITLE: Importing TuiFlagPipe in Angular Standalone Component
DESCRIPTION: This code snippet demonstrates how to import the TuiFlagPipe from the Taiga UI core package and include it in the imports array of a standalone Angular component. The component is defined using the @Component decorator with the standalone property set to true.

LANGUAGE: typescript
CODE:
import {TuiFlagPipe} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiFlagPipe,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing TuiValidator in Standalone Angular Component
DESCRIPTION: Shows how to import TuiValidator from @taiga-ui/cdk package and include it in a standalone component's imports array. The component is configured as standalone with necessary imports setup.

LANGUAGE: typescript
CODE:
import {TuiValidator} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiValidator,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Configuring Taiga UI Component in TypeScript
DESCRIPTION: This snippet demonstrates how to set up a Taiga UI component using Angular's standalone component feature. It imports necessary modules from Taiga UI core, kit, and proprietary packages, as well as Angular's FormsModule. The component is configured as standalone and includes the imported modules.

LANGUAGE: TypeScript
CODE:
import {FormsModule} from '@angular/forms';
import {TuiDataList} from '@taiga-ui/core';
import {TuiDataListWrapper, TuiInputModule} from '@taiga-ui/kit';
import {TuiEmailsPipe} from '@taiga-ui/proprietary';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    TuiEmailsPipe,
    TuiInputModule,
    TuiDataList,
    TuiDataListWrapper,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing TuiTabBar in Angular Standalone Component
DESCRIPTION: Demonstrates the setup of a standalone Angular component that imports the TuiTabBar component from the Taiga UI mobile addon package. Shows the basic component configuration with standalone mode enabled.

LANGUAGE: typescript
CODE:
import {TuiTabBar} from '@taiga-ui/addon-mobile';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiTabBar,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Checking Element Position using Taiga UI CDK in TypeScript
DESCRIPTION: Imports and uses the isElementAtPoint utility from Taiga UI CDK to check if a DOM element is present at specific x,y coordinates on the page. The function returns a boolean indicating whether the element is at the specified point.

LANGUAGE: typescript
CODE:
import {isElementAtPoint} from '@taiga-ui/cdk';

//...
isAtPoint = isElementAtPoint(element, point.x, point.y);
//...

----------------------------------------

TITLE: Importing and Configuring TuiFormatDatePipe in Angular Component
DESCRIPTION: This snippet demonstrates how to import the TuiFormatDatePipe from the Taiga UI core library and include it in the imports array of a standalone Angular component. The TuiFormatDatePipe is likely used for formatting date values within the component's template.

LANGUAGE: TypeScript
CODE:
import {TuiFormatDatePipe} from '@taiga-ui/core';

//...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiFormatDatePipe,
  ],
  //  ...
})
export class Example {}

----------------------------------------

TITLE: Importing and Using TuiSwitch in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import the TuiSwitch component from Taiga UI and include it in an Angular standalone component. It shows the basic structure of a component using the standalone: true option and the imports array.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiSwitch} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiSwitch,
  ],
})
export class Example {}

----------------------------------------

TITLE: Importing TuiImgLazyLoading in Standalone Angular Component
DESCRIPTION: Shows the setup for importing the TuiImgLazyLoading component from Taiga UI kit library and including it in a standalone Angular component's imports array. This enables lazy loading functionality for images within the component.

LANGUAGE: typescript
CODE:
import {TuiImgLazyLoading} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiImgLazyLoading,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Extending TuiPortalService in TypeScript for Taiga UI
DESCRIPTION: This snippet defines MyPortalService, a custom service that extends TuiPortalService from Taiga UI. It is decorated with @Injectable and provided at the root level, making it available throughout the application.

LANGUAGE: typescript
CODE:
@Injectable({
  providedIn: 'root',
})
export class MyPortalService extends TuiPortalService {}

----------------------------------------

TITLE: Configuring Cypress Browser Launch Settings in TypeScript
DESCRIPTION: Defines a Cypress configuration that sets up browser launch options, specifically adding the --force-prefers-reduced-motion flag for Chrome browsers. Uses the setupNodeEvents hook to modify browser launch parameters.

LANGUAGE: typescript
CODE:
import {defineConfig} from 'cypress';

export default defineConfig({
  // setupNodeEvents can be defined in either
  // the e2e or component configuration
  e2e: {
    setupNodeEvents(on, config) {
      on('before:browser:launch', (browser = {}, launchOptions) => {
        /* ... */

        if (browser.name === `chrome`) {
          launchOptions.args.push(`--force-prefers-reduced-motion`);
        }
      });
    },
  },
});

----------------------------------------

TITLE: Importing and Using TuiRepeatTimesPipe in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import the TuiRepeatTimesPipe from the Taiga UI CDK and include it in the imports array of a standalone Angular component. The TuiRepeatTimesPipe is likely used for repeating elements a specified number of times within the component's template.

LANGUAGE: typescript
CODE:
import {TuiRepeatTimesPipe} from '@taiga-ui/cdk';

//...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiRepeatTimesPipe,
  ],
  //  ...
})
export class Example {}

----------------------------------------

TITLE: Displaying Taiga UI Example Reproduction Instruction in HTML
DESCRIPTION: This HTML snippet creates a paragraph element with instructions for reproducing Taiga UI examples. It provides a simple starting point for users to begin testing and exploring Taiga UI components.

LANGUAGE: html
CODE:
<p>Here you can reproduce any Taiga UI example</p>

----------------------------------------

TITLE: Importing Taiga UI Local Styles in LESS
DESCRIPTION: This code snippet shows how to import the local styles from Taiga UI core, which includes the mixins for styling the wrapper component.

LANGUAGE: less
CODE:
@import '@taiga-ui/core/styles/taiga-ui-local.less';

----------------------------------------

TITLE: Importing TuiPrimitiveTextfield in Standalone Component
DESCRIPTION: Shows how to import the TuiPrimitiveTextfieldModule from Taiga UI's legacy package and include it in a standalone Angular component's imports array. The component is configured as standalone with necessary module imports.

LANGUAGE: typescript
CODE:
import {TuiPrimitiveTextfieldModule} from '@taiga-ui/legacy';

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPrimitiveTextfieldModule,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Configuring Standalone Angular Component with TuiBlockDetails
DESCRIPTION: Sets up a standalone Angular component that imports TuiBlockDetails from the Taiga UI layout module. The component is configured using the standalone: true property and includes necessary imports.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiBlockDetails} from '@taiga-ui/layout';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiBlockDetails,
  ],
})
export class Example {}

----------------------------------------

TITLE: Importing and Using TuiProgress Component in Angular
DESCRIPTION: This snippet demonstrates how to import the TuiProgress component from the @taiga-ui/kit package and include it in the imports array of a standalone Angular component. This allows the component to use TuiProgress in its template.

LANGUAGE: TypeScript
CODE:
import {TuiProgress} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiProgress,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Adding TuiDocAPINumberItem in addon-doc
DESCRIPTION: New TuiDocAPINumberItem added to configure input API option in addon-doc package

LANGUAGE: typescript
CODE:
// Example usage of TuiDocAPINumberItem
const apiOptions = [
  new TuiDocAPINumberItem({
    name: 'myNumberOption',
    min: 0,
    max: 100
  })
];

----------------------------------------

TITLE: Configuring Playwright Tests in TypeScript
DESCRIPTION: This snippet defines a configuration for Playwright tests. It sets up options for reduced motion and screenshot comparison, including disabling animations and hiding the caret.

LANGUAGE: typescript
CODE:
import {defineConfig, devices} from '@playwright/test';

export default defineConfig({
  // ...
  use: {
    // ...
    contextOptions: {
      reducedMotion: `reduce`,
    },
  },
  expect: {
    toHaveScreenshot: {
      animations: `disabled`,
      caret: `hide`,
      scale: `device`,
    },
  },
});

----------------------------------------

TITLE: Configuring TuiPager in Angular Standalone Component
DESCRIPTION: Shows how to import and configure the TuiPager component from Taiga UI kit in a standalone Angular component. Demonstrates the proper import syntax and component configuration using the standalone feature.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiPager} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPager,
  ],
})
export class Example {}

----------------------------------------

TITLE: Running Taiga UI Unit Tests
DESCRIPTION: Command to execute the project's unit test suite

LANGUAGE: bash
CODE:
npm test

----------------------------------------

TITLE: Importing TuiSheetModule in Standalone Component
DESCRIPTION: Shows how to import TuiSheetModule from @taiga-ui/legacy package and include it in a standalone Angular component's imports array. This setup is required to use TuiSheet functionality in the component.

LANGUAGE: typescript
CODE:
import {TuiSheetModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiSheetModule,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Implementing Taiga UI Button with Hover Event
DESCRIPTION: Creates a button using Taiga UI's tuiButton directive and binds to the tuiHoveredChange event. The event handler is triggered when the user hovers over or moves away from the button, allowing for dynamic interaction responses.

LANGUAGE: html
CODE:
<button
  tuiButton
  type="button"
  (tuiHoveredChange)="onHovered($event)"
>
  Hover over me to reveal hidden text!
</button>

----------------------------------------

TITLE: Implementing Taiga UI Input and Error Components in Angular HTML
DESCRIPTION: This snippet shows how to use Taiga UI's tui-input and tui-error components in an Angular template. It demonstrates form control binding and error handling with async pipe and custom error transformation.

LANGUAGE: HTML
CODE:
<tui-input [formControl]="user">User</tui-input>
<tui-error
  [formControl]="user"
  [error]="[] | tuiFieldError | async"
></tui-error>

----------------------------------------

TITLE: Configuring Angular Component with TuiItemGroup Import
DESCRIPTION: Demonstrates how to import and configure a TuiItemGroup component within an Angular component's decorator. Shows the basic setup required for using Taiga UI layout components.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiItemGroup} from '@taiga-ui/layout';
// ...

@Component({
  imports: [
    // ...
    TuiItemGroup,
  ],
})
export class Example {}

----------------------------------------

TITLE: Conventional Commit Example
DESCRIPTION: Example of the Conventional Commits format used for commit messages in the project

LANGUAGE: markdown
CODE:
feat(core): improve typing

----------------------------------------

TITLE: Component Visibility Control with CSS and *ngIf in Angular/Taiga UI
DESCRIPTION: Demonstrates two equivalent ways to control component visibility: using CSS class binding with [class.hidden] and using the structural directive *ngIf. Both examples use tuiPresentChange event handler for state changes. The CSS approach keeps the element in DOM while *ngIf removes it completely.

LANGUAGE: html
CODE:
<div
  [class.hidden]="!visible"
  (tuiPresentChange)="onPresentChange($event)"
>
  I am a component hidden with CSS
</div>
or
<div
  *ngIf="visible"
  (tuiPresentChange)="onPresentChange($event)"
>
  I am a component hidden with *ngIf
</div>

----------------------------------------

TITLE: Importing TuiFilterPipe in Standalone Angular Component
DESCRIPTION: Example of importing TuiFilterPipe from Taiga UI CDK package and including it in a standalone component's imports array. This setup enables filtering functionality within the component.

LANGUAGE: typescript
CODE:
import {TuiFilterPipe} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiFilterPipe,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Installing Taiga UI Base Packages
DESCRIPTION: Command to install the required base packages (@taiga-ui/cdk and @taiga-ui/core) using npm.

LANGUAGE: bash
CODE:
npm i @taiga-ui/{cdk,core}

----------------------------------------

TITLE: Creating Documentation Page Component
DESCRIPTION: Example of creating a documentation page component with code examples and documentation properties

LANGUAGE: typescript
CODE:
@Component({
  standalone: true,
  selector: 'super',
  templateUrl: './super.component.html',
})
export class Super {
  readonly example = {
    TypeScript: import('./examples/1/index.ts?raw'),
    HTML: import('./examples/1/index.html?raw'),
  };

  readonly inputVariants = ['input 1', 'input 2'];
}

----------------------------------------

TITLE: Installing Taiga UI Base Packages with npm
DESCRIPTION: Command to install the base packages @taiga-ui/cdk and @taiga-ui/core using npm. These are prerequisites for using the layout package.

LANGUAGE: bash
CODE:
npm i @taiga-ui/{cdk,core}

----------------------------------------

TITLE: Importing and Configuring TuiIsPresentPipe in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import TuiIsPresentPipe from Taiga UI CDK and include it in the imports array of an Angular standalone component. It sets up the component to use this pipe for checking if values are present.

LANGUAGE: typescript
CODE:
import {TuiIsPresentPipe} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiIsPresentPipe,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Installing Taiga UI Table Addon
DESCRIPTION: Command to install the Taiga UI Table addon package for table functionality.

LANGUAGE: bash
CODE:
npm i @taiga-ui/addon-table

----------------------------------------

TITLE: Starting Taiga UI Demo Project
DESCRIPTION: Command to launch the demo project for development purposes

LANGUAGE: bash
CODE:
npm start

----------------------------------------

TITLE: Implementing Taiga UI Form Input with Angular Reactive Forms
DESCRIPTION: This snippet demonstrates how to create an input field using Taiga UI, bind it to an Angular FormControl, and handle value changes. It uses the formControl directive for form binding and the tuiValueChanges event for change detection.

LANGUAGE: html
CODE:
<input
  [formControl]="control"
  (tuiValueChanges)="onChanges($event)"
/>

----------------------------------------

TITLE: Importing TuiMapperPipe in Standalone Angular Component
DESCRIPTION: Demonstrates importing TuiMapperPipe from Taiga UI CDK package and configuring it in a standalone Angular component. The component uses the standalone: true flag and includes TuiMapperPipe in its imports array.

LANGUAGE: typescript
CODE:
import {TuiMapperPipe} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    //    ...
    TuiMapperPipe,
  ],
  //  ...
})
export class Example {}

----------------------------------------

TITLE: Installing Taiga UI Commerce Addon
DESCRIPTION: Command to install the Taiga UI Commerce addon package using npm.

LANGUAGE: bash
CODE:
npm i @taiga-ui/addon-commerce

----------------------------------------

TITLE: Installing Taiga UI Layout Package with npm
DESCRIPTION: Command to install the @taiga-ui/layout package using npm. This package contains layout components for the Taiga UI framework.

LANGUAGE: bash
CODE:
npm i @taiga-ui/layout

----------------------------------------

TITLE: Responsive Image Width Styling using LESS and Taiga UI Mobile Breakpoint
DESCRIPTION: Defines a responsive image style that sets a fixed width on desktop and switches to full width on mobile devices using Taiga UI's mobile media query variable @tui-mobile.

LANGUAGE: less
CODE:
.image {
  width: 300px;

  @media @tui-mobile {
    width: 100%;
  }
}

----------------------------------------

TITLE: Installing Taiga UI Icons Package via NPM
DESCRIPTION: Command to install the @taiga-ui/icons package using NPM package manager. This package is part of the Taiga UI framework and contains vector icons that can be tree-shaken.

LANGUAGE: bash
CODE:
npm i @taiga-ui/icons

----------------------------------------

TITLE: Installing Taiga UI Icons Package via NPM
DESCRIPTION: Command to install the @taiga-ui/icons package using NPM package manager. This package is part of the larger Taiga UI ecosystem and is fully treeshakable.

LANGUAGE: bash
CODE:
npm i @taiga-ui/icons

----------------------------------------

TITLE: New TuiOption version in core package
DESCRIPTION: Updated version of TuiOption component in the core package

LANGUAGE: typescript
CODE:
// Using new TuiOption
<tui-option
  [value]="value"
  [disabled]="disabled"
>
  {{ label }}
</tui-option>

----------------------------------------

TITLE: Defining Standalone Angular Component in TypeScript
DESCRIPTION: This code snippet defines a basic Angular component named 'App' using the @Component decorator. It is set up as a standalone component with a selector, template URL, and stylesheet URL.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';

@Component({
  standalone: true,
  selector: 'app',
  templateUrl: './app.template.html',
  styleUrls: ['./app.style.less'],
})
export class App {}

----------------------------------------

TITLE: Installing Taiga UI Legacy Package via NPM
DESCRIPTION: Command to install the @taiga-ui/legacy package using NPM package manager. This package contains legacy components from previous major releases to assist with migration.

LANGUAGE: shell
CODE:
npm i @taiga-ui/legacy

----------------------------------------

TITLE: Importing TuiDropdown in Standalone Angular Component
DESCRIPTION: Shows how to import the TuiDropdown component from @taiga-ui/core and include it in a standalone Angular component's imports array. This setup enables the use of Taiga UI's dropdown functionality within the component.

LANGUAGE: typescript
CODE:
import {TuiDropdown} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiDropdown,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Installing Taiga UI Experimental Package in NPM
DESCRIPTION: Command to install the experimental package of Taiga UI using NPM. This package contains new versions of components with updated design specs.

LANGUAGE: bash
CODE:
npm i @taiga-ui/experimental

----------------------------------------

TITLE: Installing Taiga UI Base Packages for Angular
DESCRIPTION: Command to install the core Taiga UI packages (cdk, core, and kit) using npm. These are required dependencies for the mobile addon.

LANGUAGE: bash
CODE:
npm i @taiga-ui/{cdk,core,kit}

----------------------------------------

TITLE: Installing Taiga UI Base Packages in NPM
DESCRIPTION: Command to install the base packages of Taiga UI using NPM. This includes the CDK and core packages.

LANGUAGE: bash
CODE:
npm i @taiga-ui/{cdk,core}

----------------------------------------

TITLE: Importing and Using TuiCopyProcessor in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import the TuiCopyProcessor from the @taiga-ui/core library and include it in the imports array of an Angular standalone component. The TuiCopyProcessor is likely used for handling copy operations within the component.

LANGUAGE: typescript
CODE:
import {TuiCopyProcessor} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCopyProcessor,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Implementing Angular Component with TuiPure Decorator in TypeScript
DESCRIPTION: This snippet defines an Angular component class named 'Example' with two methods decorated by @tuiPure. The @tuiPure decorator is used to memoize the results of pure functions, improving performance by caching results for repeated calls with the same arguments.

LANGUAGE: typescript
CODE:
@Component({
  standalone: true,
  // ..
})
export class Example {
  @tuiPure
  get complexCalculationWithFixedResult(): number {
    // ...
  }

  @tuiPure
  someMethod(arg1: number, arg2: {}): {} {
    // ...
  }
}

----------------------------------------

TITLE: Formatting Currency with tuiAmount Pipe in Angular Templates
DESCRIPTION: This snippet demonstrates the usage of the tuiAmount pipe from Taiga UI to format currency values in Angular templates. It shows examples of left and right alignment, as well as using currency codes and symbols.

LANGUAGE: html
CODE:
<!-- {{ 100000 | tuiAmount : currency : align | async }} -->
<p>{{ 100000 | tuiAmount : '978' : 'left' | async }}</p>
<p>{{ 100000 | tuiAmount : 'EUR' : 'right' | async }}</p>

----------------------------------------

TITLE: Implementing Taiga UI Tags in HTML Templates
DESCRIPTION: Demonstrates two ways to use the Taiga UI tag component: as a standalone tag and as a clickable link. The example shows binding a value property and configuring link attributes for the tag-link variation.

LANGUAGE: html
CODE:
<tui-tag [value]="tag"></tui-tag>
<!--Use can use tag as link-->
<a
  tuiTag
  href="https://somesite.com"
  target="_blank"
  [value]="tag"
></a>

----------------------------------------

TITLE: Using tuiFilter Pipe in Angular Template with Taiga UI
DESCRIPTION: Shows how to apply the tuiFilter pipe in an Angular template to filter array items. The pipe accepts a matcher function and an optional argument to determine which items to display in the repeated elements.

LANGUAGE: html
CODE:
<div *ngFor="let item of items | tuiFilter: matcher: someArg">{{item}}</div>

----------------------------------------

TITLE: Implementing Taiga UI Swipe Actions with Icon Button
DESCRIPTION: Creates a swipe action component with a card content and an eye icon button action. Uses Taiga UI's built-in directives tuiIconButton and tuiSwipeAction to enable swipe functionality.

LANGUAGE: html
CODE:
<tui-swipe-actions>
  <div>Card content</div>

  <button
    iconStart="@tui.eye"
    size="m"
    tuiIconButton
    tuiSwipeAction
  ></button>
</tui-swipe-actions>

----------------------------------------

TITLE: Implementing Taiga UI Inline Input with Form Control in Angular
DESCRIPTION: Example showing how to use the tui-input-inline component with an Angular form control binding. The component wraps an input element and includes a placeholder text.

LANGUAGE: html
CODE:
<tui-input-inline>
  Placeholder
  <input [formControl]="control" />
</tui-input-inline>

----------------------------------------

TITLE: Opening a Sheet Dialog with Taiga UI in TypeScript
DESCRIPTION: This snippet demonstrates how to inject and use the TuiSheetDialogService to open a sheet dialog. It sets the content, label, and offset for the dialog, and subscribes to the result.

LANGUAGE: typescript
CODE:
constructor(private readonly sheets: TuiSheetDialogService) {}

// ...

this.sheets
    .open(
        'Content',
        {
            label: 'Heading',
            offset: 48,
        },
    )
    .subscribe();

----------------------------------------

TITLE: Implementing Taiga UI Sidebar Toggle Button in HTML
DESCRIPTION: This snippet demonstrates how to create a button that toggles a sidebar using Taiga UI directives. It uses the tuiButton directive for styling, and tuiSidebar for conditional rendering of sidebar content. The button responds to both click and active zone change events.

LANGUAGE: HTML
CODE:
<button
  tuiButton
  type="button"
  (click)="toggle(true)"
  (tuiActiveZoneChange)="toggle($event)"
>
  Show sidebar
  <div *tuiSidebar="open">Content</div>
</button>

----------------------------------------

TITLE: Configuring TuiScrollService in Angular Component
DESCRIPTION: Shows how to set up a standalone Angular component with TuiScrollService provider and implement scrolling functionality. The service is injected and used in ngOnInit to create a scroll subscription with a 500ms duration.

LANGUAGE: typescript
CODE:
@Component({
  standalone: true,
  // ...
  providers: [TuiScrollService],
  // ...
})
export class Example {
  private tuiScrollService = inject(TuiScrollService);

  ngOnInit() {
    this.tuiScrollService.scroll$(this.elementRef.nativeElement, 500).subscribe();
  }
}

----------------------------------------

TITLE: Implementing Taiga UI Icon with Tooltip in HTML
DESCRIPTION: This code snippet demonstrates how to use the Taiga UI icon component with a tooltip directive. The tooltip provides additional information or instructions when hovering over the icon.

LANGUAGE: HTML
CODE:
<tui-icon tuiTooltip="Please don't touch this" />

----------------------------------------

TITLE: Implementing Taiga UI Pager Component in Angular
DESCRIPTION: Basic implementation of the Taiga UI pager component that displays pagination controls. The component accepts two inputs: 'index' for the current page number and 'count' for the total number of pages.

LANGUAGE: html
CODE:
<tui-pager
  [index]="index"
  [count]="count"
/>

----------------------------------------

TITLE: Implementing Segmented Progress Bar with Taiga UI in HTML
DESCRIPTION: This code creates a segmented progress bar using the Taiga UI framework. It sets the maximum value to 5, creates 5 segments, and sets the current value to 3.

LANGUAGE: HTML
CODE:
<progress
  tuiProgressBar
  [max]="5"
  [segments]="5"
  [value]="3"
></progress>

----------------------------------------

TITLE: Implementing Taiga UI Mobile Calendar Component in HTML
DESCRIPTION: Shows usage of tui-mobile-calendar component with key properties for date range constraints and item handling. The component accepts min/max date bounds and a handler function for managing disabled dates.

LANGUAGE: html
CODE:
<tui-mobile-calendar
  [min]="min"
  [max]="max"
  [disabledItemHandler]="disabledItemHandler"
></tui-mobile-calendar>

----------------------------------------

TITLE: Configuring Taiga UI Combo Box with Custom Item Rendering in HTML
DESCRIPTION: This snippet demonstrates how to set up a Taiga UI combo box component with a custom stringify function for item display and a data list wrapper for rendering the dropdown items. It uses two-way data binding for the selected value and applies a custom content renderer for the list items.

LANGUAGE: html
CODE:
<tui-combo-box
  [stringify]="stringify"
  [(ngModel)]="value"
>
  <tui-data-list-wrapper
    *tuiDataList
    [items]="items"
    [itemContent]="stringify | tuiStringifyContent"
  ></tui-data-list-wrapper>
</tui-combo-box>

----------------------------------------

TITLE: Implementing Like Component with Taiga UI
DESCRIPTION: Basic implementation of a Like component using Taiga UI's tuiLike directive on a checkbox input. This creates a toggleable like/unlike interaction that can be used for social features or content rating systems.

LANGUAGE: html
CODE:
<input
  tuiLike
  type="checkbox"
/>

----------------------------------------

TITLE: Importing and Using TuiItemsWithMore in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import the TuiItemsWithMore component from the @taiga-ui/kit package and include it in the imports array of a standalone Angular component. This allows the component to be used within the Example component.

LANGUAGE: TypeScript
CODE:
import {TuiItemsWithMore} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiItemsWithMore,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing and Using TuiIsland in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import the TuiIsland component from Taiga UI's legacy module and include it in an Angular standalone component's imports array. It sets up the basic structure for using TuiIsland within the component.

LANGUAGE: typescript
CODE:
import {TuiIsland} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiIsland,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Basic Taiga UI Legend Item Implementation in HTML/Angular
DESCRIPTION: Shows how to use the tui-legend-item component with property binding for value and content projection. The component displays a legend item with dynamic value and static content.

LANGUAGE: html
CODE:
<tui-legend-item [value]="value">Content</tui-legend-item>

----------------------------------------

TITLE: Configuring Standalone Angular Component with Taiga UI
DESCRIPTION: Shows the required imports and component configuration for using Taiga UI's input tag module along with Angular's forms functionality in a standalone component. Demonstrates the use of FormsModule, ReactiveFormsModule, and TuiInputTagModule.

LANGUAGE: typescript
CODE:
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiInputTagModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiInputTagModule,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Installing Taiga UI Base Packages
DESCRIPTION: Command to install the required base packages for Taiga UI, including the CDK and core libraries.

LANGUAGE: bash
CODE:
npm i @taiga-ui/{cdk,core}

----------------------------------------

TITLE: Implementing Taiga UI Input Slider in Angular Reactive Form
DESCRIPTION: This snippet demonstrates how to use the Taiga UI input slider component within an Angular reactive form. It sets up a form with a single input slider control, specifying maximum value and quantum (step) attributes.

LANGUAGE: HTML
CODE:
<form [formGroup]="testForm">
  <tui-input-slider
    formControlName="testValue"
    max="1000"
    quantum="10"
  ></tui-input-slider>
</form>

----------------------------------------

TITLE: Importing and Using TuiRating in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import the TuiRating component from Taiga UI and include it in an Angular standalone component. It shows the component declaration and the necessary import statements.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiRating} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiRating,
  ],
})
export class Example {}

----------------------------------------

TITLE: Importing and Using TuiInputMonthModule in Angular Component
DESCRIPTION: This snippet demonstrates how to import TuiInputMonthModule from Taiga UI and use it in a standalone Angular component. It also shows the creation of a FormGroup with a single form control.

LANGUAGE: typescript
CODE:
import {TuiInputMonthModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiInputMonthModule,
  ],
  // ...
})
export class Example {
  readonly testForm = new FormGroup({
    testValue: new FormControl(null),
  });
}

----------------------------------------

TITLE: Importing and Configuring TuiProgress in Angular Component
DESCRIPTION: This snippet demonstrates how to import the TuiProgress component from the Taiga UI kit and include it in an Angular component's imports array. It's part of setting up a standalone component that uses Taiga UI elements.

LANGUAGE: typescript
CODE:
import {TuiProgress} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiProgress,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Initializing Standalone Angular Component with Taiga UI Month Input
DESCRIPTION: Sets up a standalone Angular component with necessary imports from Angular Forms and Taiga UI. Configures a component with a month input field using TuiInputMonth and includes form handling capabilities.

LANGUAGE: typescript
CODE:
import {FormsModule} from '@angular/forms';
import {TuiTextfield} from '@taiga-ui/core';
import {TuiInputMonth} from '@taiga-ui/kit';

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    TuiTextfield,
    TuiInputMonth,
  ],
})
export class Example {
  value: TuiMonth | null = null;
}

----------------------------------------

TITLE: Importing TuiBarSet in Standalone Angular Component
DESCRIPTION: Shows how to import the TuiBarSet component from @taiga-ui/addon-charts package and include it in a standalone Angular component's imports array. This setup enables the use of Taiga UI's bar chart functionality within the component.

LANGUAGE: typescript
CODE:
import {TuiBarSet} from '@taiga-ui/addon-charts';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiBarSet,
  ],
})
// ...
export class Example {}

----------------------------------------

TITLE: Implementing Taiga UI Date Range Input with Angular Reactive Forms
DESCRIPTION: Implementation of a date range input field using Taiga UI's tui-input-date-range component within an Angular reactive form. The component is bound to a form control named 'testValue' using formControlName directive.

LANGUAGE: html
CODE:
<form [formGroup]="testForm">
  <tui-input-date-range formControlName="testValue">Choose dates</tui-input-date-range>
</form>

----------------------------------------

TITLE: Applying tuiAutoFocus Directive in HTML
DESCRIPTION: This snippet demonstrates how to use the tuiAutoFocus directive on both a standard HTML element and a Taiga UI component. The directive is used to automatically focus the element when it's rendered.

LANGUAGE: html
CODE:
<!-- Usual HTML element -->
<div
  tuiAutoFocus
  tabindex="0"
></div>

<!-- Or focusable component of Taiga UI -->
<tui-input
  tuiAutoFocus
  [(ngModel)]="model"
>
  Input
</tui-input>

----------------------------------------

TITLE: Rendering Taiga UI Check Icon in HTML
DESCRIPTION: This snippet shows how to use the tui-icon component from Taiga UI to display a check icon. The icon property is set to '@tui.check' to specify the desired icon.

LANGUAGE: HTML
CODE:
<tui-icon icon="@tui.check"></tui-icon>

----------------------------------------

TITLE: Importing TuiCell in Angular Component
DESCRIPTION: Shows how to import TuiCell from @taiga-ui/layout package and include it in an Angular component's imports array. The example demonstrates the standalone component setup with TypeScript decorators.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiCell} from '@taiga-ui/layout';
// ...

@Component({
  imports: [
    // ...
    TuiCell,
  ],
})
export class Example {}

----------------------------------------

TITLE: Configuring Asset Copying for Taiga UI Material Icons in Angular
DESCRIPTION: This JSON configuration specifies how to copy Taiga UI material icons from the node_modules directory to the project's assets folder during the build process. It ensures that the icons are available for use in the Angular application.

LANGUAGE: json
CODE:
{
  "projects": {
    "demo": {
      "architect": {
        "build": {
          "assets": [
            {
              "glob": "**/*",
              "input": "node_modules/@taiga-ui/icons-material/src",
              "output": "assets/taiga-ui/icons/"
            }
          ]
        }
      }
    }
  }
}

----------------------------------------

TITLE: Importing TuiPan in Standalone Angular Component
DESCRIPTION: Shows how to import the TuiPan component from Taiga UI CDK package and include it in a standalone Angular component's imports array. This setup enables the use of TuiPan functionality within the component.

LANGUAGE: typescript
CODE:
import {TuiPan} from '@taiga-ui/cdk';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiPan,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Initializing Standalone Angular Component with Taiga UI
DESCRIPTION: Sets up a basic standalone Angular component with Taiga UI header and title component imports. Uses the standalone component syntax and demonstrates proper module imports for Taiga UI layout and core components.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiHeader} from '@taiga-ui/layout';
import {TuiTitle} from '@taiga-ui/core';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiHeader,
    TuiTitle,
  ],
})
export class Example {}

----------------------------------------

TITLE: Installing css-vars-ponyfill via NPM for Taiga UI
DESCRIPTION: This command installs the css-vars-ponyfill package using npm. The package provides a polyfill for CSS custom properties, enabling their use in browsers that don't natively support them. This is likely a dependency for the Taiga UI project to ensure consistent styling across different browser versions.

LANGUAGE: bash
CODE:
npm install css-vars-ponyfill

----------------------------------------

TITLE: Importing TuiGroup in Standalone Angular Component
DESCRIPTION: Demonstrates importing TuiGroup from @taiga-ui/core and including it in a standalone component's imports array. Shows the basic structure of a standalone component using Taiga UI components.

LANGUAGE: typescript
CODE:
import {TuiGroup} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiGroup,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing TuiBadgeNotification in Angular Standalone Component
DESCRIPTION: Shows how to import and declare TuiBadgeNotification from Taiga UI kit in a standalone Angular component. The component is configured with standalone: true and includes the necessary imports.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiBadgeNotification} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiBadgeNotification,
  ],
})
export class Example {}

----------------------------------------

TITLE: Importing and Using TuiFilter in Standalone Angular Component
DESCRIPTION: This snippet demonstrates how to import the TuiFilter component from the Taiga UI kit and use it in a standalone Angular component. The TuiFilter is added to the imports array of the component decorator.

LANGUAGE: typescript
CODE:
import {TuiFilter} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiFilter,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Installing Taiga UI Icons Package via npm
DESCRIPTION: Command to install the Taiga UI Icons package using npm. This package contains a set of vector icons used by the Taiga UI framework.

LANGUAGE: bash
CODE:
npm i @taiga-ui/icons

----------------------------------------

TITLE: Importing and Using TuiElasticContainer in Angular Component
DESCRIPTION: This snippet demonstrates how to import the TuiElasticContainer from the Taiga UI kit and include it in the imports array of a standalone Angular component. The TuiElasticContainer is likely used for creating flexible, responsive layouts within the component.

LANGUAGE: TypeScript
CODE:
import {TuiElasticContainer} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiElasticContainer,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing TuiDropdown in Standalone Component
DESCRIPTION: Shows how to import the TuiDropdown component from @taiga-ui/core package and include it in a standalone Angular component's imports array. This setup enables the use of TuiDropdown functionality within the component.

LANGUAGE: typescript
CODE:
import {TuiDropdown} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiDropdown,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Importing TuiCompass Component in Angular
DESCRIPTION: Shows how to import and configure a standalone Angular component that uses the TuiCompass component from Taiga UI kit. The component is marked as standalone and includes necessary imports.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiCompass} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCompass,
  ],
})
export class Example {}

----------------------------------------

TITLE: Configuring Angular Component with Taiga UI TuiSensitive in TypeScript
DESCRIPTION: This snippet demonstrates how to import and configure an Angular component using Taiga UI's TuiSensitive module. It sets up the component as standalone and includes TuiSensitive in the imports array.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiSensitive} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiSensitive,
  ],
})
export class Example {}

----------------------------------------

TITLE: Importing and Using TuiChip Component in Angular
DESCRIPTION: This snippet shows how to import the TuiChip component from the Taiga UI kit and include it in an Angular component's imports array. It demonstrates the basic setup required to use Taiga UI components in an Angular application.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiChip} from '@taiga-ui/kit';
// ...

@Component({
  imports: [
    // ...
    TuiChip,
  ],
})
export class Example {}

----------------------------------------

TITLE: Configuring Taiga UI Number Input with Format Options in HTML
DESCRIPTION: Implementation of a numeric input field using Taiga UI's tuiInputNumber directive with format configuration options. The input is wrapped in a tui-textfield component and supports customization of decimal precision, zero padding, rounding, and separator characters.

LANGUAGE: html
CODE:
<tui-textfield>
  <input
    tuiInputNumber
    [tuiNumberFormat]="{decimal, precision, zeroPadding, rounding, thousandSeparator, decimalSeparator}"
  />
</tui-textfield>

----------------------------------------

TITLE: Implementing Taiga UI Carousel in HTML
DESCRIPTION: This snippet shows how to create a basic carousel using the tui-carousel component from Taiga UI. It includes three slides, each represented by a div element with the *tuiItem directive.

LANGUAGE: HTML
CODE:
<tui-carousel>
  <div *tuiItem>Slide 1</div>
  <div *tuiItem>Slide 2</div>
  <div *tuiItem>Slide 3</div>
</tui-carousel>

----------------------------------------

TITLE: Adding Ripple Effect with Taiga UI Directive
DESCRIPTION: Demonstrates how to apply the tuiRipple directive to a div element to create a material design-like ripple effect on click. The ripple effect provides visual feedback for user interactions.

LANGUAGE: html
CODE:
<div tuiRipple>...</div>

----------------------------------------

TITLE: Importing TuiCarousel in Standalone Angular Component
DESCRIPTION: Shows how to import the TuiCarousel component from @taiga-ui/kit package and include it in a standalone component's imports array. This setup enables the use of TuiCarousel within the component's template.

LANGUAGE: typescript
CODE:
import {TuiCarousel} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiCarousel,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Configuring Taiga UI Icons as Assets in Angular JSON
DESCRIPTION: This snippet shows how to configure the Angular project's JSON to include Taiga UI icons as assets. It specifies the glob pattern, input directory from node_modules, and the output directory in the project's assets folder.

LANGUAGE: json
CODE:
{
  "projects": {
    "my-project": {
      "architect": {
        "build": {
          // ...
          "assets": [
            {
              "glob": "**/*",
              "input": "node_modules/@taiga-ui/icons/src",
              "output": "assets/taiga-ui/icons"
            }
          ]
        }
      }
    }
  }
}

----------------------------------------

TITLE: Inserting Taiga UI Calendar Month Component in HTML
DESCRIPTION: This snippet shows how to add the tui-calendar-month component to an HTML template. The component is part of the Taiga UI library and provides a month view calendar functionality.

LANGUAGE: HTML
CODE:
<tui-calendar-month></tui-calendar-month>

----------------------------------------

TITLE: Importing Taiga UI Core Styles in Less
DESCRIPTION: This snippet imports the Taiga UI core styles from the local project directory. It uses the Less @import directive to include the taiga-ui-local.less file from the @taiga-ui/core/styles path.

LANGUAGE: Less
CODE:
@import '@taiga-ui/core/styles/taiga-ui-local.less';

----------------------------------------

TITLE: Creating Close Button with Taiga UI Directives
DESCRIPTION: Demonstrates how to create a close button using Taiga UI's tuiIconButton and tuiButtonClose directives. The button combines icon button functionality with close button styling.

LANGUAGE: html
CODE:
<button
  tuiIconButton
  tuiButtonClose
>
  Close
</button>

----------------------------------------

TITLE: Rendering Asynchronous Data with Taiga UI Components in Angular
DESCRIPTION: This snippet showcases an Angular template using Taiga UI components and directives. It utilizes the tuiLet directive for handling asynchronous data, displays the data, and includes a tooltip and a button. The template dynamically updates based on the value of 'someStream'.

LANGUAGE: html
CODE:
<ng-container *tuiLet="someStream | async as streamValue">
  <p>
    {{streamValue}}
    <tui-icon [tuiTooltip]="template"></tui-icon>
  </p>
  <button
    tuiButton
    type="button"
  >
    Delete {{streamValue}}
  </button>
  <ng-template #template>{{streamValue}} is a current value of a someStream</ng-template>
</ng-container>

----------------------------------------

TITLE: Implementing Taiga UI Block Status Component with Content Slots
DESCRIPTION: Shows how to create a block status component with multiple content elements including an image slot, heading, description text, and a styled button. Uses Taiga UI's tuiButton and tuiItem directives for button styling.

LANGUAGE: html
CODE:
<tui-block-status [card]="card">
  <img
    tuiSlot="top"
    src="src"
  />
  <h4>Title</h4>
  Description
  <button
    tuiButton
    tuiItem
  >
    Button
  </button>
</tui-block-status>

----------------------------------------

TITLE: Importing and Configuring TuiRipple in Angular Component
DESCRIPTION: This snippet demonstrates how to import the TuiRipple module from @taiga-ui/addon-mobile and include it in the imports array of a standalone Angular component. The TuiRipple module is likely used to add ripple effects to UI elements within the component.

LANGUAGE: typescript
CODE:
import {TuiRipple} from '@taiga-ui/addon-mobile';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiRipple,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Implementing Badge Notification in Taiga UI
DESCRIPTION: Basic implementation of a badge notification component displaying the number '10'. The tui-badge-notification component is used to show count indicators or notification badges in a Taiga UI interface.

LANGUAGE: html
CODE:
<tui-badge-notification>10</tui-badge-notification>

----------------------------------------

TITLE: Configuring Angular Component with Taiga UI Input Number Module
DESCRIPTION: This snippet demonstrates how to set up an Angular component using Taiga UI's Input Number Module. It imports necessary modules, configures the component as standalone, and sets up a reactive form with an initial value.

LANGUAGE: typescript
CODE:
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiInputNumberModule} from '@taiga-ui/legacy';

@Component({
  standalone: true,
  imports: [FormsModule, ReactiveFormsModule, TuiInputNumberModule],
  // ...
})
export class Example {
  testForm = new FormGroup({
    testValue: new FormControl(5000),
  });
}

----------------------------------------

TITLE: Importing and Using TuiBadgedContent in Angular Component
DESCRIPTION: This snippet demonstrates how to import the TuiBadgedContent from Taiga UI and use it in a standalone Angular component. It shows the basic structure of the component with necessary imports.

LANGUAGE: typescript
CODE:
import {Component} from '@angular/core';
import {TuiBadgedContent} from '@taiga-ui/kit';
// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiBadgedContent,
  ],
})
export class Example {}

----------------------------------------

TITLE: Implementing Button-based Navigation with Taiga UI Tabs in Angular
DESCRIPTION: This snippet demonstrates how to create tab navigation using Taiga UI's tui-tabs component with buttons. It uses the activeItemIndex binding and click event handlers for managing tab selection and navigation.

LANGUAGE: html
CODE:
<tui-tabs [(activeItemIndex)]="activeItemIndex">
  <button
    tuiTab
    (click)="onTabClick(1)"
  >
    Page 1
  </button>
  <button
    tuiTab
    (click)="onTabClick(2)"
  >
    Page 2
  </button>
</tui-tabs>

----------------------------------------

TITLE: Implementing Taiga UI Bar Set Component in HTML
DESCRIPTION: This snippet shows how to use the tui-bar-set component from the Taiga UI library in an Angular template. The component is bound to a 'value' property, likely defined in the component's TypeScript file.

LANGUAGE: HTML
CODE:
<tui-bar-set [value]="value"></tui-bar>

----------------------------------------

TITLE: Implementing Taiga UI Line Chart in HTML
DESCRIPTION: This code demonstrates how to use the tui-line-chart component from Taiga UI. It sets the position (x and y), dimensions (width and height), and binds a value to the chart.

LANGUAGE: html
CODE:
<tui-line-chart
  [x]="0"
  [y]="0"
  [width]="200"
  [height]="100"
  [value]="value"
></tui-line-chart>

----------------------------------------

TITLE: Importing TuiBar in Standalone Angular Component
DESCRIPTION: Shows the import statement and component configuration for using TuiBar from Taiga UI's addon-charts package in a standalone Angular component. The component is set up with standalone: true and includes TuiBar in its imports array.

LANGUAGE: typescript
CODE:
import {TuiBar} from '@taiga-ui/addon-charts';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiBar,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Formatting Numbers with tuiFormatNumber Pipe in Angular Template
DESCRIPTION: This snippet demonstrates how to use the tuiFormatNumber pipe from Taiga UI to format a numeric value in an Angular template. The pipe is applied to an 'index' variable and the result is displayed asynchronously.

LANGUAGE: html
CODE:
Formatted number: {{index | tuiFormatNumber | async}}

----------------------------------------

TITLE: Implementing Taiga UI Axes Component in HTML
DESCRIPTION: This snippet shows how to use the tui-axes component from Taiga UI in an Angular template. The component's value is bound to a variable named 'value', which should be defined in the corresponding component class.

LANGUAGE: HTML
CODE:
<tui-axes [value]="value"></tui-axes>

----------------------------------------

TITLE: Configuring Taiga UI Base Styles in Less
DESCRIPTION: Sets up the base styling for a Taiga UI application including theme imports, app container layout, and header component styling. Uses Less preprocessor with Taiga UI's core style modules.

LANGUAGE: less
CODE:
@import '@taiga-ui/core/styles/taiga-ui-theme.less';
@import '@taiga-ui/core/styles/taiga-ui-fonts.less';
@import '@taiga-ui/styles/taiga-ui-global.less';

app {
  display: block;
  padding: 1.5rem;
  height: 100%;
  box-sizing: border-box;
  font-size: 16px;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid var(--tui-border-normal);
  padding-left: 20px;
}

----------------------------------------

TITLE: Importing and Using TuiAxes in Angular Standalone Component
DESCRIPTION: This snippet demonstrates how to import the TuiAxes component from the Taiga UI addon-charts package and include it in the imports array of a standalone Angular component. This setup allows the component to use the TuiAxes functionality.

LANGUAGE: typescript
CODE:
import {TuiAxes} from '@taiga-ui/addon-charts';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiAxes,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Inserting Angular Router Outlet in HTML
DESCRIPTION: This snippet demonstrates the use of the router-outlet directive in Angular. It serves as a placeholder where Angular dynamically renders components based on the current route.

LANGUAGE: HTML
CODE:
<router-outlet></router-outlet>

----------------------------------------

TITLE: Importing TuiAccordion in Standalone Component
DESCRIPTION: Example of importing the TuiAccordion component from @taiga-ui/kit package and including it in a standalone Angular component's imports array. The component is set up with standalone: true configuration.

LANGUAGE: typescript
CODE:
import {TuiAccordion} from '@taiga-ui/kit';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiAccordion,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Implementing Taiga UI Accordion in HTML for Angular
DESCRIPTION: This snippet demonstrates how to structure a Taiga UI accordion component with three items. Each item uses the tui-accordion-item element and ng-template for content. The accordion showcases different parts of the Taiga UI framework.

LANGUAGE: html
CODE:
<tui-accordion class="container">
  <tui-accordion-item>
    Taiga UI cdk
    <ng-template tuiAccordionItemContent>
      Development kit consisting of the low level tools and abstractions used to develop Taiga UI Angular entities
    </ng-template>
  </tui-accordion-item>
  <tui-accordion-item>
    Taiga UI core
    <ng-template tuiAccordionItemContent>
      <div #content>Basic elements needed to develop components, directives and more using Taiga UI design system</div>
    </ng-template>
  </tui-accordion-item>
  <tui-accordion-item>
    Taiga UI kit
    <ng-template tuiAccordionItemContent>
      The main set of components used to build Taiga UI based Angular applications
    </ng-template>
  </tui-accordion-item>
</tui-accordion>

----------------------------------------

TITLE: Configuring Main Documentation Component in HTML
DESCRIPTION: Basic HTML template setup for the documentation main component

LANGUAGE: html
CODE:
<tui-doc-main>You can add content here, it will be shown below navigation in the sidebar</tui-doc-main>

----------------------------------------

TITLE: Configuring Angular Standalone Component with Taiga UI Month Range Input
DESCRIPTION: Sets up an Angular standalone component with necessary form modules and Taiga UI's month range input. Includes form group initialization with a test control. Requires @angular/forms and @taiga-ui/legacy packages.

LANGUAGE: typescript
CODE:
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiInputMonthRangeModule} from '@taiga-ui/legacy';

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiInputMonthRangeModule,
  ],
  // ...
})
export class Example {
  readonly testForm = new FormGroup({
    testValue: new FormControl(null),
  });
}

----------------------------------------

TITLE: Installing Dependencies for Taiga UI
DESCRIPTION: Command to install project dependencies using npm clean install to ensure consistent installations

LANGUAGE: bash
CODE:
npm ci

----------------------------------------

TITLE: Implementing Taiga UI Checkbox with Angular Binding in HTML
DESCRIPTION: This snippet demonstrates how to create a checkbox using Taiga UI components, including a label and input element. It utilizes Angular's ngModel for two-way data binding of the checkbox state.

LANGUAGE: HTML
CODE:
<label tuiLabel>
  <input
    tuiCheckbox
    type="checkbox"
    size="s"
    [(ngModel)]="selected"
  />
  Label text
</label>

----------------------------------------

TITLE: New ItemGroup directive in layout package
DESCRIPTION: Added new ItemGroup directive to the layout package

LANGUAGE: typescript
CODE:
// Using new ItemGroup directive
<div tuiItemGroup>
  <tui-item>Item 1</tui-item>
  <tui-item>Item 2</tui-item>
</div>

----------------------------------------

TITLE: Configuring Angular Standalone Component with Taiga UI
DESCRIPTION: Sets up a standalone Angular component with necessary form handling modules and Taiga UI's input slider module. The component imports FormsModule and ReactiveFormsModule for form handling, along with TuiInputSliderModule from Taiga UI's legacy package.

LANGUAGE: typescript
CODE:
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
import {TuiInputSliderModule} from '@taiga-ui/legacy';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    FormsModule,
    ReactiveFormsModule,
    TuiInputSliderModule,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: New shift output event for carousel component
DESCRIPTION: Added new shift output event to the carousel component in kit package

LANGUAGE: typescript
CODE:
// Using new shift event
<tui-carousel
  (shift)="onShift($event)"
>
  <!-- carousel items -->
</tui-carousel>

----------------------------------------

TITLE: Implementing Custom Date Formatting Service in Taiga UI with TypeScript
DESCRIPTION: This snippet defines a FormatService that extends TuiFormatDateService to provide relative time formatting using date-fns. It also demonstrates how to inject this service into a component.

LANGUAGE: typescript
CODE:
import formatDistance from 'date-fns/formatDistance';

@Injectable()
export class FormatService extends TuiFormatDateService {
  format(timestamp: number): Observable<string> {
    return timer(0, 1000).pipe(map(() => formatDistance(timestamp, Date.now())));
  }
}

@Component({
  // ...
  providers: [
    {
      provide: TuiFormatDateService,
      useClass: FormatService,
    },
  ],
})
export class Example {}

----------------------------------------

TITLE: Migrating Taiga UI CDK with nx
DESCRIPTION: These commands are used to migrate the @taiga-ui/cdk package from version 3.0.0 to the latest version using nx. The first command initiates the migration process, while the second command executes the migrations.

LANGUAGE: bash
CODE:
nx migrate @taiga-ui/cdk --from="@taiga-ui/cdk@3.0.0"
nx migrate --run-migrations

----------------------------------------

TITLE: Importing and Configuring TuiSearch Component in Angular
DESCRIPTION: This snippet demonstrates how to import the TuiSearch component from Taiga UI and include it in a standalone Angular component's imports array. It sets up the basic structure for using the search functionality in an Angular application.

LANGUAGE: typescript
CODE:
import {TuiSearch} from '@taiga-ui/layout';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiSearch,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Configuring TuiColorPickerModule in Angular Module
DESCRIPTION: Example of importing and configuring the TuiColorPickerModule in a standalone Angular module. Shows the basic module setup with necessary imports from Taiga UI's legacy package.

LANGUAGE: typescript
CODE:
import {TuiColorPickerModule} from '@taiga-ui/legacy';

// ...

@NgModule({
  standalone: true,
  imports: [
    // ...
    TuiColorPickerModule,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Configuring Jest Setup Files
DESCRIPTION: Defines Jest configuration to load setup files after the test environment is initialized. Specifies a single setup file 'setup-jest.js' located in the root directory.

LANGUAGE: json
CODE:
{
  "jest": {
    "setupFilesAfterEnv": ["<rootDir>/setup-jest.js"]
  }
}

----------------------------------------

TITLE: Importing TuiLink in Angular Standalone Component
DESCRIPTION: Shows how to import the TuiLink component from Taiga UI core package and include it in a standalone Angular component's imports array. The example demonstrates the standard setup pattern for Taiga UI component integration.

LANGUAGE: typescript
CODE:
import {TuiLink} from '@taiga-ui/core';

// ...

@Component({
  standalone: true,
  imports: [
    // ...
    TuiLink,
  ],
  // ...
})
export class Example {}

----------------------------------------

TITLE: Configuring Jest Setup Files in TypeScript
DESCRIPTION: Configuration object for Jest testing framework that specifies files to be executed after the test environment is set up. Uses setupFilesAfterEnv to point to a setup script in the root directory.

LANGUAGE: typescript
CODE:
export default {
  setupFilesAfterEnv: ['<rootDir>/setup-jest.js'],
};

----------------------------------------

TITLE: Applying tuiCopyProcessor Directive in HTML (Angular)
DESCRIPTION: This snippet demonstrates how to use the tuiCopyProcessor directive on a span element in an HTML template. The directive is bound to a 'processor' variable, which likely contains a function to process the copied content. The ellipsis suggests there may be additional content within the span.

LANGUAGE: html
CODE:
<span [tuiCopyProcessor]="processor">
  ...
</div>

----------------------------------------

TITLE: Basic Taiga UI Bottom Sheet Implementation in HTML
DESCRIPTION: Demonstrates the minimal usage of tui-bottom-sheet component. The component creates a modal dialog that slides up from the bottom of the screen, commonly used for mobile-friendly interfaces.

LANGUAGE: html
CODE:
<tui-bottom-sheet>Content</tui-bottom-sheet>

----------------------------------------

TITLE: Implementing Time Input with Taiga UI in Angular Form
DESCRIPTION: Shows how to integrate Taiga UI's tui-input-time component within an Angular reactive form. The component is bound to a form control named 'testValue' within a form group named 'testForm'.

LANGUAGE: html
CODE:
<form [formGroup]="testForm">
  <tui-input-time formControlName="testValue">Placeholder</tui-input-time>
</form>