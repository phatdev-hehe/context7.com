TITLE: Complete Research Agent Implementation in Python
DESCRIPTION: This code snippet presents the entire implementation of the Research Agent, including imports, configuration, main function definition, and execution. It demonstrates how to create an AI assistant that can perform research on ArXiv and create GitHub issues based on the findings.

LANGUAGE: python
CODE:
import os
import dotenv
from composio_llamaindex import Action, ComposioToolSet  # pylint: disable=import-error
from llama_index.core.llms import ChatMessage  # pylint: disable=import-error
from llama_index.llms.openai import OpenAI  # pylint: disable=import-error
from llama_index.agent.openai import OpenAIAgent
from llama_index.tools.arxiv.base import ArxivToolSpec

# Load environment variables from .env
dotenv.load_dotenv()

llm = OpenAI(model="gpt-4o")

research_topic = "LLM agents function calling"
target_repo = "composiohq/composio"
n_issues = 3


def main():
    # Get All the tools
    composio_toolset = ComposioToolSet()
    tools = composio_toolset.get_actions(actions=[Action.GITHUB_CREATE_AN_ISSUE])
    arxiv_tool = ArxivToolSpec()

    prefix_messages = [
        ChatMessage(
            role="system",
            content=(
                "You are now a integration agent, and what  ever you are "
                "requested, you will try to execute utilizing your tools."
            ),
        )
    ]

    agent = OpenAIAgent.from_tools(
        tools=tools + arxiv_tool.to_tool_list(),
        llm=llm,
        prefix_messages=prefix_messages,
        max_function_calls=10,
        allow_parallel_tool_calls=False,
        verbose=True,
    )

    response = agent.chat(
        f"Please research on Arxiv about `{research_topic}`, Organize "
        f"the top {n_issues} results as {n_issues} issues for "
        f"a github repository, finally raise those issues with proper, "
        f"title, body, implementation guidance and reference in "
        f"{target_repo} repo,  as well as relevant tags and assignee as "
        "the repo owner."
    )

    print("Response:", response)


if __name__ == "__main__":
    main()

----------------------------------------

TITLE: Defining Main Function for Research Agent in Python
DESCRIPTION: This function sets up the AI agent with necessary tools and configurations, including Composio tools for GitHub interaction and ArxivToolSpec for research. It then instructs the agent to perform research on a specified topic, organize results into GitHub issues, and create these issues in the target repository.

LANGUAGE: python
CODE:
def main():
    # Get All the tools
    composio_toolset = ComposioToolSet()
    tools = composio_toolset.get_actions(actions=[Action.GITHUB_CREATE_AN_ISSUE])
    arxiv_tool = ArxivToolSpec()

    prefix_messages = [
        ChatMessage(
            role="system",
            content=(
                "You are now a integration agent, and whatever you are "
                "requested, you will try to execute utilizing your tools."
            ),
        )
    ]

    agent = OpenAIAgent.from_tools(
        tools=tools + arxiv_tool.to_tool_list(),
        llm=llm,
        prefix_messages=prefix_messages,
        max_function_calls=10,
        allow_parallel_tool_calls=False,
        verbose=True,
    )

    response = agent.chat(
        f"Please research on Arxiv about `{research_topic}`, Organize "
        f"the top {n_issues} results as {n_issues} issues for "
        f"a github repository, finally raise those issues with proper, "
        f"title, body, implementation guidance and reference in "
        f"{target_repo} repo,  as well as relevant tags and assignee as "
        "the repo owner."
    )

    print("Response:", response)

----------------------------------------

TITLE: Authenticating and Executing GitHub Action - Python
DESCRIPTION: Python implementation showing how to add authentication parameters to a toolset and execute a GitHub star repository action. Uses the add_auth method to configure authentication headers and execute_action to perform the operation.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App

toolset = ComposioToolSet()

toolset.add_auth(
    app=App.GITHUB,
    parameters=[
        dict(
            name="Authorization",
            in_="header",
            value="Bearer gho_XL9IXXXXXX",
        )
    ],
)

toolset.execute_action(
    action="GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
    params={"owner": "composiohq", "repo": "composio"},
)

----------------------------------------

TITLE: Complete Research Assistant Agent Implementation
DESCRIPTION: This comprehensive code snippet combines all the previous steps to create a fully functional Research Assistant Agent using CrewAI and Composio. It includes environment setup, agent definition, task creation, and execution.

LANGUAGE: python
CODE:
from crewai import Agent, Task, Crew, Process
from composio_langchain import ComposioToolSet, App
from langchain_openai import ChatOpenAI
import os
import dotenv

# Load environment variables
dotenv.load_dotenv()

# Initialize the language model with OpenAI API key and model name
llm = ChatOpenAI(
    model_name="gpt-4o"
)

# Setup tools using ComposioToolSet
composio_toolset = ComposioToolSet()
#Using .get_tools we are able to add various tools needed by the agents to execute its objective
#in this case its serpapi, giving the agent access to the internet
tools = composio_toolset.get_tools(apps=[App.SERPAPI])

# Define the Researcher agent with its role, goal, and backstory
researcher = Agent(
    role='Researcher',
    goal='Search the internet for the information requested',
    backstory="""
    You are a researcher. Using the information in the task, you find out some of the most popular facts about the topic along with some of the trending aspects.
    You provide a lot of information thereby allowing a choice in the content selected for the final blog.
    """,
    verbose=True,  # Enable verbose logging for the agent
    allow_delegation=False,  # Disable delegation
    tools=tools,  # Assign the tools to the agent
    llm=llm  # Assign the language model to the agent
)

# Define the research task with its description and expected output
task = Task(
    description="""
    Research about open source LLMs vs closed source LLMs.
    Your final answer MUST be a full analysis report
    """, #you can add your own topic after "Research about {your topic}"
    expected_output='When the research report is ready',  # Define the expected output
    agent=researcher  # Assign the task to the researcher agent
)

# Execute the task
crew = Crew(agents=[researcher], tasks=[task])
result = crew.kickoff()
print(result)

----------------------------------------

TITLE: Direct Tool Execution with Parameters
DESCRIPTION: Examples of executing a GitHub star repository action with explicit parameters using both Python and JavaScript APIs.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, Action

tool_set = ComposioToolSet(entity_id="Jessica")

tool_set.execute_action(
    action=Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER,
    params={"owner": "composiohq", "repo": "composio"},
    entity_id="Jessica",
)

LANGUAGE: javascript
CODE:
import { OpenAIToolSet } from "composio-core";

const toolset = new OpenAIToolSet();
const entity = toolset.client.getEntity("default");

const result = await entity.execute({
  actionName: "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
  params: {
    owner: "composiohq",
    repo: "composio",
  },
});
console.log(result);

----------------------------------------

TITLE: Complete RAG Tool Agent Implementation in JavaScript
DESCRIPTION: This code snippet provides the complete implementation of the RAG Tool Agent, including all the previously described components. It sets up the environment, initializes the agent, adds content to the RAG tool, and performs a query.

LANGUAGE: javascript
CODE:
import dotenv from 'dotenv';
import { ExecEnv, LangchainToolSet } from 'composio-core';
import { ChatOpenAI } from '@langchain/openai';
import { AgentExecutor, createOpenAIToolsAgent } from 'langchain/agents';
import { pull } from 'langchain/hub';

dotenv.config();

(async () => {
    const llm = new ChatOpenAI({ model: "gpt-4-turbo" });

    const composioToolset = new LangchainToolSet({
        apiKey: process.env.COMPOSIO_API_KEY,
        workspaceEnv: ExecEnv.DOCKER
    });

    const tools = await composioToolset.getTools({
        actions: ["ragtool_add_content", "ragtool_query"]
    });

    const prompt = await pull("hwchase17/openai-functions-agent");
    
    const agent = await createOpenAIToolsAgent({
        llm,
        tools,
        prompt,
    });

    const agentExecutor = new AgentExecutor({
        agent,
        tools,
        verbose: true,
    });

    async function addContentToRAG(content) {
        const result = await agentExecutor.invoke({
            input: `Add the following content to the RAG tool to enrich its knowledge base: ${content}`
        });
        console.log(result.output);
        return result.output;
    }

    async function queryRAG(userQuery) {
        const result = await agentExecutor.invoke({
            input: `Formulate a query based on this input: ${userQuery}. 
                    Retrieve relevant information using the RAG tool and return the results.`
        });
        console.log(result.output);
        return result.output;
    }

    // Example content to add
    const additionalContentList = [
        "Paris is the capital of France. It is known for its art, fashion, and culture.",
        "Berlin is the capital of Germany. It is famous for its history and vibrant culture.",
        "Tokyo is the capital of Japan. It is known for its technology and cuisine.",
        "Canberra is the capital of Australia. It is known for its modern architecture and museums.",
    ];

    // Add content to RAG tool
    for (const content of additionalContentList) {
        await addContentToRAG(content);
    }

    // Example query
    const userQuery = "What is the capital of France?";
    const queryResult = await queryRAG(userQuery);
    console.log("Query Result:", queryResult);
})();

----------------------------------------

TITLE: Complete Code Execution Agent Implementation
DESCRIPTION: Full implementation combining all components into a working code execution system with error handling.

LANGUAGE: javascript
CODE:
import dotenv from 'dotenv';
import { ChatOpenAI } from "@langchain/openai";
import { createOpenAIFunctionsAgent, AgentExecutor } from "langchain/agents";
import { pull } from "langchain/hub";
import { LangchainToolSet } from "composio-core";

dotenv.config();

async function executeCodeAgent(userProblem) {
    const toolset = new LangchainToolSet({ 
        apiKey: process.env.COMPOSIO_API_KEY
    });

    const tools = await toolset.getTools({ 
        actions: ["codeinterpreter_create_sandbox", "codeinterpreter_execute_code"] 
    });

    const llm = new ChatOpenAI({ 
        model: "gpt-4o",
        apiKey: process.env.OPEN_AI_API_KEY
    });

    const prompt = await pull("hwchase17/openai-functions-agent");
    const agent = await createOpenAIFunctionsAgent({ llm, tools, prompt });

    const agentExecutor = new AgentExecutor({ 
        agent, 
        tools, 
        verbose: true,
    });

    console.log("Generating code for the problem...");
    const codeGenerationResult = await agentExecutor.invoke({ 
        input: `Generate Python code to solve the following problem: ${userProblem}. 
                Only provide the code, no explanations.`
    });
    const generatedCode = codeGenerationResult.output;
    console.log("Generated Code:", generatedCode);

    console.log("\nExecuting the generated code...");
    const executionResult = await agentExecutor.invoke({ 
        input: `Execute the following Python code:\n${generatedCode}`
    });
    console.log("\nExecution Result:", executionResult.output);
}

const userProblem = "Create a list of prime numbers up to 50";
executeCodeAgent(userProblem).catch(error => console.error("An error occurred:", error));

----------------------------------------

TITLE: Complete RAG Tool Agent Implementation in Python
DESCRIPTION: This code snippet provides the complete implementation of the RAG Tool Agent system. It includes all the necessary imports, environment setup, agent and task definitions, and process execution in a single script.

LANGUAGE: python
CODE:
import os
import dotenv
from textwrap import dedent
from composio_langchain import Action, App, ComposioToolSet
from crewai import Agent, Crew, Process, Task
from langchain_openai import ChatOpenAI
from composio.tools.local import ragtool

# Load environment variables from .env file
dotenv.load_dotenv()

# Initialize the ComposioToolSet
toolset = ComposioToolSet()

# Get the RAG tool from the Composio ToolSet
tools = toolset.get_tools(apps=[App.RAGTOOL])

# Initialize the ChatOpenAI model with GPT-4 and API key from environment variables
llm = ChatOpenAI(model="gpt-4o")

# User-provided description of the data to be added and the query
additional_content_list = [
    "Paris is the capital of France. It is known for its art, fashion, and culture.",
    "Berlin is the capital of Germany. It is famous for its history and vibrant culture.",
    "Tokyo is the capital of Japan. It is known for its technology and cuisine.",
    "Canberra is the capital of Australia. It is known for its modern architecture and museums.",
    # Add more data as needed
]

user_query = "What is the capital of France?"  # Edit the query for the action you want it to perform

# Define the RAG Agent
rag_agent = Agent(
    role="RAG Agent",
    goal=dedent(
        """\
        Add relevant content to the RAG tool to enrich its knowledge base.
        Formulate a query to retrieve information from the RAG tool based on user input.
        After retrieval and addition of content, evaluate whether the goal given by the user input is achieved. If yes, stop execution."""
    ),
    verbose=True,
    memory=True,
    backstory=dedent(
        """\
        You are an expert in understanding user requirements, forming accurate queries,
        and enriching the knowledge base with relevant content."""
    ),
    llm=llm,
    allow_delegation=False,
    tools=tools,
)

# Define the task for adding content to the RAG tool


total_content = ""
for content in additional_content_list:
  total_content +=content

add_content_tasks = Task(
        description=(
            f"""
            Add the following content to the RAG tool to enrich its knowledge base: {total_content}"""
        ),
        expected_output="Content was added to the RAG tool",
        tools=tools,
        agent=rag_agent,
        allow_delegation=False,
    )
# Define the task for executing the RAG tool query
query_task = Task(
    description=dedent(
        f"""\
        Formulate a query based on this input: {user_query}.
        Retrieve relevant information using the RAG tool and return the results."""
    ),
    expected_output="Results of the RAG tool query were returned. Stop once the goal is achieved.",
    tools=tools,
    agent=rag_agent,
    allow_delegation=False,
)

# Define the crew with the agent and tasks
crew = Crew(
    agents=[rag_agent],
    tasks=[add_content_tasks,query_task],
    process=Process.sequential,
)

# Kickoff the process and print the result
result = crew.kickoff()
print(result)

----------------------------------------

TITLE: Executing GitHub Actions with Custom Auth in Python
DESCRIPTION: Demonstrates how to add custom authentication to a Composio toolset and execute a GitHub repository starring action using Python. Uses the add_auth method to configure Bearer token authentication.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App

toolset = ComposioToolSet()

toolset.add_auth(
    app=App.GITHUB,
    parameters=[
        dict(
            name="Authorization",
            in_="header",
            value="Bearer gho_XL9IXXXXXX",
        )
    ],
)

toolset.execute_action(
    action="GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
    params={"owner": "composiohq", "repo": "composio"},
)

----------------------------------------

TITLE: Installing Composio with uv Package Manager (Python)
DESCRIPTION: Two-step installation process for Composio using the uv package manager. First installs uv itself, then installs the core Composio packages and OpenAI integration.

LANGUAGE: bash
CODE:
curl -LsSf https://astral.sh/uv/install.sh | sh

LANGUAGE: bash
CODE:
uv add composio_core composio_openai

----------------------------------------

TITLE: Importing Libraries and Initializing ComposioToolSet and LLM
DESCRIPTION: Python code to import necessary libraries, initialize ComposioToolSet with an API key, and configure the language model (LLM) for Autogen.

LANGUAGE: python
CODE:
from autogen import AssistantAgent, UserProxyAgent
from composio_autogen import ComposioToolSet, App

toolset = ComposioToolSet(api_key="<your-composio-api-key>")
llm_config = {
    "config_list": [
        {
            "model": "gpt-4o-mini",
            "api_key": "<your-api-key>",
        }
    ]
}

----------------------------------------

TITLE: Complete AI News Retrieval and Summarization System
DESCRIPTION: Combines all components to create a full system for AI news retrieval and summarization, including imports, tool setup, agent definition, and execution.

LANGUAGE: python
CODE:
from langchain import hub
from langchain.agents import AgentExecutor, load_tools
from langchain.agents.format_scratchpad import format_log_to_str
from langchain.agents.output_parsers import (
    ReActJsonSingleInputOutputParser,
)
from langchain.tools.render import render_text_description
from langchain_community.utilities import SerpAPIWrapper
from langchain_community.llms import HuggingFaceEndpoint
from langchain_community.chat_models.huggingface import ChatHuggingFace
from composio_langchain import ComposioToolSet, Action, App


llm = HuggingFaceEndpoint(repo_id="HuggingFaceH4/zephyr-7b-beta", huggingfacehub_api_token=os.getenv("HUGGINGFACEHUB_API_TOKEN"))

chat_model = ChatHuggingFace(llm=llm)
# Import from composio_langchain


# setup tools
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.SERPAPI])

# setup ReAct style prompt
prompt = hub.pull("hwchase17/react-json")
prompt = prompt.partial(
    tools=render_text_description(tools),
    tool_names=", ".join([t.name for t in tools]),
)

# define the agent
chat_model_with_stop = chat_model.bind(stop=["\nInvalidStop"])
agent = (
    {
        "input": lambda x: x["input"],
        "agent_scratchpad": lambda x: format_log_to_str(x["intermediate_steps"]),
    }
    | prompt
    | chat_model_with_stop
    | ReActJsonSingleInputOutputParser()
)

# instantiate AgentExecutor
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True, handle_parsing_errors=True)
agent_executor.return_intermediate_steps = True
res = agent_executor.invoke(
    {
        "input": "Use SERP to find the one latest AI news, take only description of article."
    }
)

res2 = agent_executor.invoke({
    "input": res['output']+' Summarize this'
})


----------------------------------------

TITLE: Complete Community Reward Agent Implementation in Python
DESCRIPTION: This is the full implementation of the Community Reward Agent, including all imports, function definitions, and execution logic. It combines all the previous snippets into a single, runnable script.

LANGUAGE: python
CODE:
from composio_llamaindex import ComposioToolSet, App, Action
from llama_index.core.agent import FunctionCallingAgentWorker
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI
from dotenv import load_dotenv
from solders.keypair import Keypair
from solders.pubkey import Pubkey
from solana.rpc.api import Client
from solders.system_program import TransferParams, transfer
from solders.transaction import Transaction
from solders.message import Message
from composio import action
import base58
from solders.signature import Signature

load_dotenv()

@action(toolname='solanakit', requires=['solana','solders'])
def send_sol(sender_private_key: str, receiver_public_key: str, amount: str, network: str = "devnet") -> str:
    """
    Send SOL to a wallet
    :param sender_private_key: private key of the sender
    :param receiver_public_key: address of the wallet to send SOL to
    :param amount: amount of SOL to send, should be in lamports
    :param network: network to send the transaction on
    :return transaction_hash: transaction hash
    """
    try:
        # Create keypair for sender
        # Use a valid Base58-encoded private key for the sender
        sender_keypair = Keypair.from_base58_string(sender_private_key)
        sender_public_key = sender_keypair.pubkey()

        # Define receiver's public key
        receiver_public_key_ = Pubkey.from_string(receiver_public_key)

        # Build the transfer instruction
        ixns = [
            transfer(
                TransferParams(
                    from_pubkey=sender_public_key,
                    to_pubkey=receiver_public_key_,
                    lamports=int(amount)
                )
            )
        ]

        # Create a message with the transaction
        msg = Message(ixns, sender_public_key)

        # Connect to a Solana client
        client = Client(f"https://api.{network}.solana.com")  # Using Devnet RPC endpoint

        # Fetch the latest blockhash
        latest_blockhash = client.get_latest_blockhash().value.blockhash

        # Create the transaction
        transaction = Transaction([sender_keypair], msg, latest_blockhash)

        # Send the transaction
        response = client.send_transaction(transaction)
        print("Transaction response:", response)
        return "Transaction sent successfully: "+str(response)
    except ValueError as e:
        return f"Error: Invalid key format - {str(e)}"
    except Exception as e:
        return f"Error sending transaction: {str(e)}"

toolset = ComposioToolSet(api_key="")
tools = toolset.get_tools(actions=[send_sol, Action.GITHUB_LIST_REPOSITORY_CONTRIBUTORS])

llm = OpenAI(model="gpt-4o")

prefix_messages = [
    ChatMessage(
        role="system",
        content=(
              "You are a solana agent that can execute actions with Solana Kit"
              "You have access to Github and can list repository contributors"
        ),
    )
]

agent = FunctionCallingAgentWorker(
    tools=tools,
    llm=llm,
    prefix_messages=prefix_messages,
    max_function_calls=10,
    allow_parallel_tool_calls=False,
    verbose=True,
).as_agent()


community_channel_name = input("Enter the name of the slack channel: ")
response = agent.chat(f"""Find only the most active community member this week from the slack channel {community_channel_name} and then print their slack name. The date today is {date}""")
print(response)
wallet_address = input("Enter the wallet address of the most active community member: ")
private_key = os.getenv('SOLANA_PRIVATE_KEY')
my_wallet_address = os.getenv('SOLANA_WALLET_ADDRESS')
agent.chat(f"""send 1 SOL from my wallet {my_wallet_address}, my private key is {private_key} to {wallet_address} on devnet using send sol action and then check transaction status twice/thrice after 5 seconds of the transaction using get transaction status action. After the the transaction is confirmed, send a message to the slack channel {community_channel_name} with the username of the most active community member announcing that they are the most active community member this week and congratulate them and tell them they have been rewarded with 1 SOL""")

----------------------------------------

TITLE: Integrating GitHub Tools with Composio
DESCRIPTION: Setting up Composio toolset and configuring GitHub-specific actions for the CAMEL agent.

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(
    actions=[Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER]
)

----------------------------------------

TITLE: Complete Newsletter Summarizer Implementation in Python
DESCRIPTION: This comprehensive code snippet combines all the components of the Newsletter Summarizer project. It includes package imports, tool initialization, agent and task definitions, and process execution using CrewAI.

LANGUAGE: python
CODE:
# Import base packages
import os
import dotenv
from composio_langchain import Action, App, ComposioToolSet
from crewai import Agent, Crew, Process, Task
from langchain_groq import ChatGroq
from datetime import datetime

# Load environment variables from the .env file
dotenv.load_dotenv()

# Initialize the ComposioToolSet
toolset = ComposioToolSet()

# Get the Gmail tools from the ComposioToolSet
gmail_tools = toolset.get_tools(apps=[App.GMAIL])

# Initialize the ChatOpenAI model with GPT-4
llm = ChatGroq(model="llama3.1-70b-versatile", stop_sequences=["\n\n"])

# Define the Email Fetcher Agent
email_fetcher_agent = Agent(
    role="Email Fetcher Agent",
    goal="Fetch recent newsletter emails from the inbox.",
    verbose=True,
    memory=True,
    backstory=f"You are an expert in retrieving and organizing email content. Today's date is {datetime.now().strftime('%B %d, %Y')}.",
    llm=llm,
    allow_delegation=False,
    tools=gmail_tools,
)

# Define the Summarizer Agent
summarizer_agent = Agent(
    role="Summarizer Agent",
    goal="Summarize the content of newsletter emails.",
    verbose=True,
    memory=True,
    backstory=f"You are an expert in analyzing and summarizing complex information. Today's date is {datetime.now().strftime('%B %d, %Y')}.",
    llm=llm,
    allow_delegation=False,
    tools=[],
)

# Define the Email Sender Agent
email_sender_agent = Agent(
    role="Email Sender Agent",
    goal="Send the summarized newsletter content via email.",
    verbose=True,
    memory=True,
    backstory=f"You are an expert in composing and sending emails. Today's date is {datetime.now().strftime('%B %d, %Y')}.",
    llm=llm,
    allow_delegation=False,
    tools=gmail_tools,
)

# Define the task for fetching emails
fetch_emails_task = Task(
    description="Fetch the most recent newsletter emails from the inbox.",
    expected_output="A detailed list of recent newsletter emails with their content.",
    tools=gmail_tools,
    agent=email_fetcher_agent,
)

# Define the task for summarizing emails
summarize_emails_task = Task(
    description="Summarize the content of the fetched newsletter emails.",
    expected_output="A comprehensive summary of the newsletter emails.",
    agent=summarizer_agent,
    context=[fetch_emails_task],
)

# Define the task for sending the summary email
send_summary_task = Task(
    description="Compose and send an email containing the summarized newsletter content.",
    expected_output="Confirmation that the summary email has been sent.",
    tools=gmail_tools,
    agent=email_sender_agent,
    context=[summarize_emails_task],
)

# Define the crew with the agents and tasks
crew = Crew(
    agents=[email_fetcher_agent, summarizer_agent, email_sender_agent],
    tasks=[fetch_emails_task, summarize_emails_task, send_summary_task],
    process=Process.sequential,
)

# Kickoff the process and print the result
result = crew.kickoff()
print("Newsletter Summary Process Completed:")
print(result)

----------------------------------------

TITLE: Creating and Executing a GitHub Issue Creation Agent with Langchain in TypeScript
DESCRIPTION: This function sets up and executes a Langchain agent that creates GitHub issues. It uses the Composio SDK to get tools for GitHub issue creation, sets up a ChatOpenAI model, and creates an OpenAI functions agent. The agent is then invoked to create a new issue based on provided details.

LANGUAGE: typescript
CODE:
async function executeAgent (entityName){
        // Create entity and get tools
        const entity = toolset.client.getEntity(entityName)
        await setupUserConnectionIfNotExists(entity.id);
        const tools = await toolset.getTools({ actions: ["github_issues_create"] },entity.id);

        // Create an agent
        const prompt = await pull("hwchase17/openai-functions-agent");
        const llm = new ChatOpenAI({
            model: "gpt-4o",
            apiKey: process.env.OPEN_AI_API_KEY
        });
  
        const agent = await createOpenAIFunctionsAgent({
            llm,
            tools: tools,
            prompt,
        });
        const agentExecutor = new AgentExecutor({agent,tools,verbose: true,});

        // Invoke the agent
        const body = "TITLE: HELLO WORLD, DESCRIPTION: HELLO WORLD for the repo - himanshu-dixit/custom-repo-breaking"
        const result = await agentExecutor.invoke({
            input: "Please create another github issue with the summary and description with the following details of another issue:- , " + JSON.stringify(body)
        });

        console.log(result.output)
}

----------------------------------------

TITLE: Installing Composio Framework Extensions
DESCRIPTION: Installation commands for various framework-specific Composio extensions including Langchain, Autogen, CrewAI, Lyzr, OpenAI, and Julep.

LANGUAGE: bash
CODE:
# Installation for Langchain
pip install composio-langchain

LANGUAGE: bash
CODE:
# Installation for Autogen
pip install composio-autogen

LANGUAGE: bash
CODE:
# Installation for CrewAI
pip install composio-crewai

LANGUAGE: bash
CODE:
# Installation for Lyzr
pip install composio-lyzr

LANGUAGE: bash
CODE:
# Installation for OpenAI
pip install composio-openai

LANGUAGE: bash
CODE:
# Installation for Julep
pip install composio-julep

----------------------------------------

TITLE: Importing Libraries and Initializing ComposioToolSet and LLM
DESCRIPTION: This code imports required libraries, initializes the ComposioToolSet with an API key, and sets up the OpenAI language model. It's essential for setting up the environment for Composio and CrewAI integration.

LANGUAGE: python
CODE:
from composio_crewai import ComposioToolSet, App
from crewai import Agent, Task, Crew
from langchain_openai import ChatOpenAI

toolset = ComposioToolSet(api_key="<your-composio-api-key>")
llm = ChatOpenAI(api_key="<your-openai-api-key>")

----------------------------------------

TITLE: Creating GitHub Star Bot with OpenAI and Composio
DESCRIPTION: Complete example showing how to create an AI agent using OpenAI and Composio tools to star a GitHub repository. Demonstrates initialization, tool configuration, and execution of assistant actions.

LANGUAGE: python
CODE:
from openai import OpenAI
from composio_openai import ComposioToolSet, App, Action

openai_client = OpenAI(
    api_key="{{OPENAIKEY}}"
)

# Initialise the Composio Tool Set

composio_tool_set = ComposioToolSet()

# Get GitHub tools that are pre-configured
actions = composio_tool_set.get_actions(
    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]
)

my_task = "Star a repo composiodev/composio on GitHub"

# Setup openai assistant
assistant_instruction = "You are a super intelligent personal assistant"

assistant = openai_client.beta.assistants.create(
    name="Personal Assistant",
    instructions=assistant_instruction,
    model="gpt-4-turbo",
    tools=actions,
)

# create a thread
thread = openai_client.beta.threads.create()

message = openai_client.beta.threads.messages.create(
    thread_id=thread.id,
    role="user",
    content=my_task
)

# Execute Agent with integrations
run = openai_client.beta.threads.runs.create(
    thread_id=thread.id,
    assistant_id=assistant.id
)


# Execute Function calls
response_after_tool_calls = composio_tool_set.wait_and_handle_assistant_tool_calls(
    client=openai_client,
    run=run,
    thread=thread,
)

print(response_after_tool_calls)

----------------------------------------

TITLE: Complete Slack Bot Setup and Execution
DESCRIPTION: Full Python script combining all steps for setting up a Slack bot with Composio, including authentication, action retrieval, task analysis with OpenAI, and action execution.

LANGUAGE: python
CODE:
## Step 1
#!pip install composio-core
## Step 2
from openai import OpenAI
from composio import Composio, TestIntegration
# Initialize the OpenAI client with your API key
openai_client = OpenAI(api_key="******OPENAIKEY******")
client = Composio("api-key")
#client.get_integration(**YourIntegrationID**)
integration = client.get_integration(TestIntegration.SLACK
#Trying to initiate a new connection
connected_account = integration.initiate_connection(entity_id = None)
print("Complete the auth flow, link: ", connected_account.redirectUrl)
## Step 3
#Keep Polling and wait until timeout
connected_account = connected_account.wait_until_active(timeout=60)
## Step 4
actions = connected_account.get_all_actions()
## Step 5
my_task = "Set a reminder to buy groceries tomorrow at 5pm"
# Create a chat completion request to decide on the action
response = openai_client.chat.completions.create(model="gpt-4-turbo-preview",
tools=actions, # Passing actions we fetched earlier.
messages=[
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": my_task}
  ]
)
## Step 6
# Execute Function calls
execution_details = connected_account.handle_tools_calls(response)
print(execution_details)
print("Completed Task")

----------------------------------------

TITLE: Complete Demo Assistant Implementation in JavaScript
DESCRIPTION: This is the full implementation of the Demo Assistant using Composio and OpenAI. It includes all the necessary imports, server setup, webhook endpoint definition, and the main logic for interacting with the OpenAI API and GitHub.

LANGUAGE: javascript
CODE:
import express from 'express';
import { OpenAI } from "openai";
import { OpenAIToolSet, Action } from "composio-core";

const app = express();
const PORT = process.env.PORT || 2001;

app.use(express.json());

app.get('/webhook', async (req, res) => {
    try {
        const body = "TITLE: HELLO WORLD, DESCRIPTION: HELLO WORLD for the repo - utkarsh-dixit/speedy";
        
        const toolset = new OpenAIToolSet({
            apiKey: process.env.COMPOSIO_API_KEY,
        });
        const tools = await toolset.get_actions([
            Action.GITHUB_USERS_GET_AUTHENTICATED,
            Action.GITHUB_ISSUES_CREATE
        ]);

        const client = new OpenAI({});
        const assistant = await client.beta.assistants.create({
            model: "gpt-4-turbo",
            description: "This is a test assistant",
            instructions: "You are a helpful assistant that takes actions on user's GitHub",
            tools: tools,
        });

        const thread = await client.beta.threads.create({
            messages: [{
                role: "user",
                content: body
            }]
        });

        let run = await client.beta.threads.runs.create(thread.id, {
            assistant_id: assistant.id,
        });

        run = await toolset.wait_and_handle_assistant_tool_calls(client, run, thread);
        
        // Check if the run is completed
        if (run.status === "completed") {
            let messages = await client.beta.threads.messages.list(thread.id);
            console.log(messages.data);
            return messages.data;
        } else if (run.status === "requires_action") {
            console.log(run.status);
            return await toolset.handle_assistant_message(run);
        } else {
            console.error("Run did not complete:", run);
        }
    } catch (error) {
        console.error(error);
        res.status(500).send('Internal Server Error');
    }
});

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

----------------------------------------

TITLE: Defining Tasks for Newsletter Summarization Process in Python
DESCRIPTION: This code defines three tasks: fetching emails, summarizing emails, and sending the summary. Each task is associated with a specific agent and includes a description, expected output, and required tools or context.

LANGUAGE: python
CODE:
fetch_emails_task = Task(
    description="Fetch the most recent newsletter emails from the inbox.",
    expected_output="A detailed list of recent newsletter emails with their content.",
    tools=gmail_tools,
    agent=email_fetcher_agent,
)

summarize_emails_task = Task(
    description="Summarize the content of the fetched newsletter emails.",
    expected_output="A comprehensive summary of the newsletter emails.",
    agent=summarizer_agent,
    context=[fetch_emails_task],
)

send_summary_task = Task(
    description="Compose and send an email containing the summarized newsletter content.",
    expected_output="Confirmation that the summary email has been sent.",
    tools=gmail_tools,
    agent=email_sender_agent,
    context=[summarize_emails_task],
)

----------------------------------------

TITLE: Creating GitHub Issue Agent with OpenAI and Composio (TypeScript)
DESCRIPTION: This function sets up an agent that uses OpenAI's GPT-4 model to create GitHub issues. It utilizes Composio's toolset to handle GitHub actions and OpenAI's API for natural language processing. The function requires both Composio and OpenAI API keys.

LANGUAGE: typescript
CODE:
async function executeAgent(repo,entityName="default") {
        const entity = toolset.client.getEntity(entityName)
        await setupUserConnectionIfNotExists(entity.id);

        const tools = await toolset.getTools({ actions: ["github_issues_create"] }, entity.id);
        const instruction = `Make an issue with sample title in the repo - ${repo}`

        const client = new OpenAI({ apiKey: OPEN_AI_API_KEY })
        const response = await client.chat.completions.create({
            model: "gpt-4-turbo",
            messages: [{
                role: "user",
                content: instruction,
            }],
            tools: tools,
            tool_choice: "auto",
        })

        console.log(response.choices[0].message.tool_calls);
        await toolset.handleToolCall(response, entity.id);
}

----------------------------------------

TITLE: Executing LangGraph Workflow for GitHub Repository Starring
DESCRIPTION: Code to run the compiled LangGraph workflow, demonstrating how to use the agent to star a GitHub repository. This showcases the practical application of the Composio-LangGraph integration.

LANGUAGE: python
CODE:
for chunk in app.stream(
    {
        "messages": [
            (
                "human",
                "Star the GitHub Repository composiohq/composio",
            )
        ]
    },
    stream_mode="values",
):
    chunk["messages"][-1].pretty_print()

LANGUAGE: typescript
CODE:
const stream = await app.invoke({
    messages: [
        new HumanMessage("Star the GitHub Repository composiohq/composio"),
    ],
});

console.log(stream.messages[stream.messages.length - 1].content);

----------------------------------------

TITLE: Initializing Composio with OpenAI in Python
DESCRIPTION: Setup code for integrating Composio with OpenAI in Python, including necessary imports and client initialization.

LANGUAGE: python
CODE:
from composio_openai import ComposioToolSet, Action
from openai import OpenAI

openai_client = OpenAI()
composio_toolset = ComposioToolSet(entity_id="default")

----------------------------------------

TITLE: Complete Python Implementation of AI Lead Generator Agent
DESCRIPTION: This snippet provides the complete Python implementation of the AI Lead Generator Agent, including all necessary imports, initializations, and execution.

LANGUAGE: python
CODE:
from composio_llamaindex import ComposioToolSet, App, Action
from llama_index.core.agent import FunctionCallingAgentWorker
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI
from dotenv import load_dotenv

load_dotenv()
toolset = ComposioToolSet(api_key="")
tools = toolset.get_tools(apps=[App.PEOPLEDATALABS, App.GOOGLESHEETS])

llm = OpenAI(model="gpt-4o")

spreadsheetid = '14T4e0j1XsWjriQYeFMgkM2ihyvLAplPqB9q8hytytcw'
prefix_messages = [
    ChatMessage(
        role="system",
        content=(
            f"""
            You are a lead research agent. Based on user input, find 10 relevant leads using people data labs.
            After finding the leads, create a Google Sheet with the details for the lead description, and spreadsheet ID: ${spreadsheetid}.
            Print the list of people and their details and the link to the google sheet."""
        ),
    )
]

agent = FunctionCallingAgentWorker(
    tools=tools,
    llm=llm,
    prefix_messages=prefix_messages,
    max_function_calls=10,
    allow_parallel_tool_calls=False,
    verbose=True,
).as_agent()

lead_description = 'Senior frontend developers in San Francisco'
user_input = f"Create a lead list based on the description: {lead_description}"
response = agent.chat(user_input)

----------------------------------------

TITLE: Creating and Executing Calendar Agent (Python)
DESCRIPTION: This snippet defines and executes the agent responsible for creating Google Calendar events based on the todo list. It sets up the agent with specific roles, goals, and tools, and creates a task for booking calendar slots.

LANGUAGE: python
CODE:
# Create and Execute Agent.
def run_crew():
    calendar_agent = Agent(
        role="Google Calendar Agent",
        goal="""You take action on Google Calendar using Google Calendar APIs""",
        backstory="""You are an AI agent responsible for taking actions on Google Calendar on users' behalf. 
        You need to take action on Calendar using Google Calendar APIs. Use correct tools to run APIs from the given tool-set.""",
        verbose=True,
        tools=tools,
        llm=llm,
    )
    task = Task(
        description=f"Book slots according to {todo}. Label them with the work provided to be done in that time period. Schedule it for today. Today's date is {date} (it's in YYYY-MM-DD format) and make the timezone be {timezone}.",
        agent=calendar_agent,
        expected_output="if free slot is found",
    )
    crew = Crew(agents=[calendar_agent], tasks=[task])
    result = crew.kickoff()
    print(result)

----------------------------------------

TITLE: Fetching and Writing Composio GitHub Tools
DESCRIPTION: This snippet demonstrates how to fetch GitHub tools provided by Composio and write them in a PraisonAI-supported format, returning the tool names to be added to the agents.yml file.

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(
    actions=[Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER]
)
tool_section_str = composio_toolset.get_tools_section(tools)
print(tool_section_str)

----------------------------------------

TITLE: Complete Implementation
DESCRIPTION: Full implementation of the Code Execution Agent including initialization, configuration, and execution logic.

LANGUAGE: python
CODE:
import os
from composio_langchain import Action, App, ComposioToolSet
from crewai import Agent, Crew, Process, Task

toolset = ComposioToolSet()
tools = toolset.get_tools(apps=[App.CODEINTERPRETER])

python_executor_agent = Agent(
    role="Python Code Executor",
    goal="Execute Python code in a Jupyter notebook cell and return the results.",
    verbose=True,
    memory=True,
    backstory="You are an expert in executing Python code and interpreting results in a sandbox environment.",
    allow_delegation=False,
    tools=tools,
)

python_code = """
def calculate_sum(a, b):
    return a + b

result = calculate_sum(5, 3)
print(result)
"""

execute_code_task = Task(
    description="Execute the following Python code and return the results:\n\n"
    + python_code,
    expected_output="Execution of Python code returned the results.",
    tools=tools,
    agent=python_executor_agent,
    allow_delegation=False,
)

crew = Crew(
    agents=[python_executor_agent],
    tasks=[execute_code_task],
    process=Process.sequential,
)

result = crew.kickoff()
print(result)

LANGUAGE: javascript
CODE:
import dotenv from 'dotenv';
import { ChatOpenAI } from "@langchain/openai";
import { createOpenAIFunctionsAgent, AgentExecutor } from "langchain/agents";
import { pull } from "langchain/hub";
import { LangchainToolSet } from "composio-core";

dotenv.config();

async function executeCodeAgent(userProblem) {
    const toolset = new LangchainToolSet({ 
        apiKey: process.env.COMPOSIO_API_KEY
    });

    const tools = await toolset.getTools({ 
        actions: ["codeinterpreter_create_sandbox", "codeinterpreter_execute_code"] 
    });

    const llm = new ChatOpenAI({ 
        model: "gpt-4o",
        apiKey: process.env.OPEN_AI_API_KEY
    });

    const prompt = await pull("hwchase17/openai-functions-agent");
    const agent = await createOpenAIFunctionsAgent({ llm, tools, prompt });

    const agentExecutor = new AgentExecutor({ 
        agent, 
        tools, 
        verbose: true,
    });

    console.log("Generating code for the problem...");
    const codeGenerationResult = await agentExecutor.invoke({ 
        input: `Generate Python code to solve the following problem: ${userProblem}. 
                Only provide the code, no explanations.`
    });
    const generatedCode = codeGenerationResult.output;
    console.log("Generated Code:", generatedCode);

    console.log("\nExecuting the generated code...");
    const executionResult = await agentExecutor.invoke({ 
        input: `Execute the following Python code:\n${generatedCode}`
    });
    console.log("\nExecution Result:", executionResult.output);
}

const userProblem = "Create a list of prime numbers up to 50";
executeCodeAgent(userProblem).catch(error => console.error("An error occurred:", error));

----------------------------------------

TITLE: Creating and Executing Calendar Agent
DESCRIPTION: This snippet defines and executes the agent responsible for creating Google Calendar events based on the to-do list. It sets up the agent with specific goals and tools, creates a task, and runs the crew to process the to-do list.

LANGUAGE: python
CODE:
# Create and Execute Agent.
def run_crew():
    calendar_agent = Agent(
        role="Google Calendar Agent",
        goal="""You take action on Google Calendar using Google Calendar APIs""",
        backstory="""You are an AI agent responsible for taking actions on Google Calendar on users' behalf. 
        You need to take action on Calendar using Google Calendar APIs. Use correct tools to run APIs from the given tool-set.""",
        verbose=True,
        tools=tools,
        llm=llm,
    )
    task = Task(
        description=f"Book slots according to {todo}. Label them with the work provided to be done in that time period. Schedule it for today. Today's date is {date} (it's in YYYY-MM-DD format) and make the timezone be {timezone}.",
        agent=calendar_agent,
        expected_output="if free slot is found",
    )
    crew = Crew(agents=[calendar_agent], tasks=[task])
    result = crew.kickoff()
    print(result)

----------------------------------------

TITLE: Discovering and Fetching Actions in Python
DESCRIPTION: This code snippet shows how to find relevant actions for a specific use case and fetch the corresponding tools using Composio in Python. It uses the ToolSet's methods to search for actions and retrieve tools.

LANGUAGE: python
CODE:
# Find relevant actions for our task
actions = toolset.find_actions_by_use_case(
    use_case="star a repo, print octocat",
    advanced=True,
)

# Get the tools for these actions
tools = toolset.get_tools(actions=actions)

----------------------------------------

TITLE: Implementing Lead Generation Function
DESCRIPTION: Creates the main function that handles lead generation by initializing the agent worker and processing user input to generate leads.

LANGUAGE: python
CODE:
def generate_leads(business_name, lead_description):
    # Initialize the agent worker
    agent = FunctionCallingAgentWorker(
        tools=tools,
        llm=llm,
        prefix_messages=prefix_messages,
        max_function_calls=10,
        allow_parallel_tool_calls=False,
        verbose=True,
    ).as_agent()
    user_input = f"Create a lead list for {business_name}. Description: {lead_description}"
    response = agent.chat(user_input)
    return response.response

----------------------------------------

TITLE: Creating Integration with Composio Credentials
DESCRIPTION: Demonstrates how to create a new integration using Composio's built-in OAuth credentials for quick prototyping. Shows implementation in both Python and TypeScript.

LANGUAGE: python
CODE:
from composio_openai import ComposioToolSet, App, Action

toolset = ComposioToolSet()
integration = toolset.create_integration(
    app=App.GITHUB,
    auth_mode="OAUTH2",
    use_composio_oauth_app=True,
    force_new_integration=True,
)

LANGUAGE: typescript
CODE:
import { Composio } from "composio-core";

const composioClient = new Composio({});
const integration = await composioClient.integrations.create({
  appUniqueKey: "github",
  name: "github-managed",
  authScheme: "OAUTH2",
  useComposioAuth: true,
  forceNewIntegration: true
});

----------------------------------------

TITLE: Initializing Language Model and Tools
DESCRIPTION: Sets up the GPT-4 language model and configures Google Calendar tools using Composio toolset

LANGUAGE: javascript
CODE:
const llm = new ChatOpenAI({ model: "gpt-4-turbo" });

const composioToolset = new LangchainToolSet({
    apiKey: process.env.COMPOSIO_API_KEY
});
const tools = await composioToolset.getTools({
    actions: ["googlecalendar_create_event", "googlecalendar_list_events"]
});

const getCurrentDate = () => new Date().toISOString().split('T')[0];
const getTimezone = () => new Date().toLocaleTimeString('en-us', { timeZoneName: 'short' }).split(' ')[2];

const date = getCurrentDate();
const timezone = getTimezone();

----------------------------------------

TITLE: Complete Research Assistant Implementation
DESCRIPTION: Combines all previous steps into a single script. It sets up the environment, initializes the LLM and tools, creates the researcher agent, defines the research task, executes it, and prints the result.

LANGUAGE: python
CODE:
from crewai import Agent, Task, Crew, Process
from composio_langchain import ComposioToolSet, App
from langchain_openai import ChatOpenAI
import os
import dotenv

# Load environment variables
dotenv.load_dotenv()

# Initialize the language model with OpenAI API key and model name
llm = ChatOpenAI(
    openai_api_key=os.environ["OPENAI_API_KEY"],
    model_name="gpt-4o"
)

# Setup tools using ComposioToolSet
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.SERPAPI])

# Define the Researcher agent with its role, goal, and backstory
researcher = Agent(
    role='Researcher',
    goal='Search the internet for the information requested',
    backstory="""
    You are a researcher. Using the information in the task, you find out some of the most popular facts about the topic along with some of the trending aspects.
    You provide a lot of information thereby allowing a choice in the content selected for the final blog.
    """,
    verbose=True,  # Enable verbose logging for the agent
    allow_delegation=False,  # Disable delegation
    tools=tools,  # Assign the tools to the agent
    llm=llm  # Assign the language model to the agent
)

# Define the research task with its description and expected output
task1 = Task(
    description="""
    Research about open source LLMs vs closed source LLMs.
    Your final answer MUST be a full analysis report
    """, #you can add your own topic after "Research about {your topic}"
    expected_output='When the research report is ready',  # Define the expected output
    agent=researcher  # Assign the task to the researcher agent
)

# Execute the task
task1.execute()

# Print the result of the task execution
print(task1.result)

----------------------------------------

TITLE: Initializing Language Model and Configuration for Research Agent in Python
DESCRIPTION: This code initializes the OpenAI language model and sets up the necessary configurations for the Research Agent. It loads environment variables, creates an instance of the OpenAI model, and defines key parameters for the research task and GitHub interaction.

LANGUAGE: python
CODE:
dotenv.load_dotenv()

llm = OpenAI(model="gpt-4o")

research_topic = "LLM agents function calling"
target_repo = "composiohq/composio"
n_issues = 3

----------------------------------------

TITLE: Complete Python Research Agent Implementation
DESCRIPTION: Full implementation of the research agent in Python using LlamaIndex and Composio tools to search ArXiv and create GitHub issues.

LANGUAGE: python
CODE:
import os
import dotenv

from composio_llamaindex import Action, ComposioToolSet
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI
from llama_index.agent.openai import OpenAIAgent
from llama_index.tools.arxiv.base import ArxivToolSpec

# Load environment variables
dotenv.load_dotenv()

# Initialize the language model
llm = OpenAI(model="gpt-4o")

# Set research parameters
research_topic = "LLM agents function calling"
target_repo = "composiohq/composio"
n_issues = 3

def main():
    # Get Composio toolset and add ArXiv tools
    composio_toolset = ComposioToolSet()
    github_tools = composio_toolset.get_actions(actions=[Action.GITHUB_CREATE_AN_ISSUE])
    arxiv_tool = ArxivToolSpec()
    
    # Define system message
    prefix_messages = [
        ChatMessage(
            role="system",
            content=(
                "You are now a research agent, and whatever you are "
                "requested, you will try to execute utilizing your tools."
            ),
        )
    ]
    
    # Create the agent with tools
    agent = OpenAIAgent.from_tools(
        tools=github_tools + arxiv_tool.to_tool_list(),
        llm=llm,
        prefix_messages=prefix_messages,
        max_function_calls=10,
        allow_parallel_tool_calls=False,
        verbose=True,
    )
    
    # Create the research prompt
    prompt = (
        f"Please research on Arxiv about `{research_topic}`, Organize "
        f"the top {n_issues} results as {n_issues} issues for "
        f"a github repository, finally raise those issues with proper, "
        f"title, body, implementation guidance and reference in "
        f"{target_repo} repo, as well as relevant tags and assignee as "
        "the repo owner."
    )
    
    # Execute the agent
    response = agent.chat(prompt)
    
    # Print the result
    print("Response:", response)

if __name__ == "__main__":
    main()

----------------------------------------

TITLE: Python Implementation - Complete AI Scheduling Agent
DESCRIPTION: Full Python implementation of the AI scheduling agent including email monitoring, calendar management, and response generation using OpenAI's GPT-4

LANGUAGE: python
CODE:
import os
import time  
import dotenv  
import re
from datetime import datetime
from composio_llamaindex import App, ComposioToolSet, Action
from llama_index.core.agent import FunctionCallingAgentWorker
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI

from composio.client.collections import TriggerEventData

dotenv.load_dotenv()

composio_toolset = ComposioToolSet()

schedule_tool = composio_toolset.get_tools(
    actions=[
        Action.GOOGLECALENDAR_FIND_FREE_SLOTS,
        Action.GOOGLECALENDAR_CREATE_EVENT,
        Action.GMAIL_CREATE_EMAIL_DRAFT
    ]
)

llm = OpenAI(model="gpt-4o")

date_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
timezone = datetime.now().astimezone().tzinfo

listener = composio_toolset.create_trigger_listener()
@listener.callback(filters={"trigger_name": "GMAIL_NEW_GMAIL_MESSAGE"})
def callback_new_message(event: TriggerEventData) -> None:
    print("here in the function")
    payload = event.payload
    thread_id = payload.get("threadId")
    message = payload.get("messageText")
    sender_mail = payload.get("sender")
    if sender_mail is None:
        print("No sender email found")
        return
    print(sender_mail)

    prefix_messages = [
    ChatMessage(
        role="system",
        content=(
            f"""
                You are an AI assistant specialized in creating calendar events based on email information. 
                Current DateTime: {date_time} and timezone {timezone}. All the conversations happen in IST timezone.
                Pass empty config ("config": {{}}) for the function calls, if you get an error about not passing config.
                Analyze email, and create event on calendar depending on the email content. 
                You should also draft an email in response to the sender of the previous email  
            """

        ),
        )
    ]
    agent = FunctionCallingAgentWorker(
    tools=schedule_tool,  
    llm=llm,  
    prefix_messages=prefix_messages,  
    max_function_calls=10, 
    allow_parallel_tool_calls=False,  
    verbose=True,  
    ).as_agent()
    analyze_email_task = f"""
        1. Analyze the email content and decide if an event should be created. 
                a. The email was received from {sender_mail} 
                b. The content of the email is: {message} 
                c. The thread id is: {thread_id}.
        2. If you decide to create an event, try to find a free slot 
            using Google Calendar Find Free Slots action.
        3. Once you find a free slot, use Google Calendar Create Event 
            action to create the event at a free slot and send the invite to {sender_mail}.

        If an event was created, draft a confirmation email for the created event. 
        The receiver of the mail is: {sender_mail}, the subject should be meeting scheduled and body
        should describe what the meeting is about
        """
    response = agent.chat(analyze_email_task)
    print(response)

print("Listener started!")
print("Waiting for email")
listener.listen()

----------------------------------------

TITLE: Searching Images with Embed Tool in Python
DESCRIPTION: This snippet demonstrates how to search for images using the Embed Tool in Composio. It executes the EMBEDTOOL_CREATE_IMAGE_VECTOR_STORE action with parameters for search query, indexed directory, and maximum results.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App, Action
toolset = ComposioToolSet()
search_query = "Describe the image you want to find"
path_to_vector_store = "path/where/images/folder/was/located"
max_results = 2
toolset.execute_action(
    action=Action.EMBEDTOOL_CREATE_IMAGE_VECTOR_STORE,
    params={
        "search_query":search_query,
        "indexed_directory":path_to_vector_store,
        "max_results":max_results,
        },
)

----------------------------------------

TITLE: Installing Required Libraries for Composio in Python
DESCRIPTION: This snippet shows how to install the necessary Python libraries for using Composio, including langchain, langchain-openai, and composio-langchain.

LANGUAGE: bash
CODE:
pip install langchain langchain-openai composio-langchain

----------------------------------------

TITLE: Connecting GitHub Account in JavaScript
DESCRIPTION: Demonstrates how to connect a GitHub account using Composio's CLI and JavaScript SDK.

LANGUAGE: shell
CODE:
composio login
composio add github

LANGUAGE: javascript
CODE:
import { Composio } from "composio-core";

const client = new Composio({ apiKey: "<your-api-key>" });

const entity = await client.getEntity("default");
const connection = await entity.initiateConnection({appName: 'github'});

console.log(`Open this URL to authenticate: ${connection.redirectUrl}`);

----------------------------------------

TITLE: Installing Composio Package in JavaScript
DESCRIPTION: This snippet shows how to install the necessary Composio package for JavaScript using npm.

LANGUAGE: bash
CODE:
npm install composio-core

----------------------------------------

TITLE: Installing Composio Python Package
DESCRIPTION: Commands to install the Composio core package and optional OpenAI plugin using pip package manager.

LANGUAGE: bash
CODE:
pip install composio-core

----------------------------------------

TITLE: Main Function Implementation in Python
DESCRIPTION: Implements the main function that sets up the agent with tools and executes the research and issue creation workflow.

LANGUAGE: python
CODE:
def main():
    composio_toolset = ComposioToolSet()
    tools = composio_toolset.get_actions(actions=[Action.GITHUB_CREATE_AN_ISSUE])
    arxiv_tool = ArxivToolSpec()

    prefix_messages = [
        ChatMessage(
            role="system",
            content=(
                "You are now a integration agent, and what  ever you are "
                "requested, you will try to execute utilizing your tools."
            ),
        )
    ]

    agent = OpenAIAgent.from_tools(
        tools=tools + arxiv_tool.to_tool_list(),
        llm=llm,
        prefix_messages=prefix_messages,
        max_function_calls=10,
        allow_parallel_tool_calls=False,
        verbose=True,
    )

    response = agent.chat(
        f"Please research on Arxiv about `{research_topic}`, Organize "
        f"the top {n_issues} results as {n_issues} issues for "
        f"a github repository, finally raise those issues with proper, "
        f"title, body, implementation guidance and reference in "
        f"{target_repo} repo,  as well as relevant tags and assignee as "
        "the repo owner."
    )

    print("Response:", response)

----------------------------------------

TITLE: Installing Required Python Packages
DESCRIPTION: Install the necessary Python packages including Composio, OpenAI, and FastAPI dependencies.

LANGUAGE: bash
CODE:
pip install composio_core composio_openai
pip install fastapi uvicorn pydantic

----------------------------------------

TITLE: Initializing Language Model and Defining Tools for SQL Agent
DESCRIPTION: This snippet shows the initialization of the language model and definition of tools needed for SQL operations and data visualization. It includes setting up the Composio ToolSet and getting specific tools for SQL, file operations, and code interpretation.

LANGUAGE: python
CODE:
# Initialize the language model
llm = ChatOpenAI(model="gpt-4o")

# Initialize the Composio ToolSet
composio_toolset = ComposioToolSet()

# Get tools for SQL and File operations
sql_file_tools = composio_toolset.get_tools(apps=[App.SQLTOOL, App.FILETOOL])

# Get tools for code interpreter (for plotting graphs)
code_tools = composio_toolset.get_tools(apps=[App.CODEINTERPRETER])

# Get all tools combined
all_tools = composio_toolset.get_tools(apps=[App.SQLTOOL, App.FILETOOL, App.CODEINTERPRETER])

# Pull the prompt template for the agent
prompt = hub.pull("hwchase17/openai-functions-agent")

LANGUAGE: javascript
CODE:
// Initialize the Composio ToolSet
const composioToolset = new ComposioToolSet({
    apiKey: process.env.COMPOSIO_API_KEY
});

// Initialize the language model
const llm = new ChatOpenAI({ model: "gpt-4-turbo" });

// Function to get SQL and File tools
const getSQLTools = async () => {
    return await composioToolset.getTools({ 
        apps: ["sqltool", "filetool"] 
    });
};

// Function to get all tools including code interpreter
const getAllTools = async () => {
    return await composioToolset.getTools({ 
        apps: ["sqltool", "filetool", "codeinterpreter"] 
    });
};

----------------------------------------

TITLE: Configuring Local Environment in Python and JavaScript
DESCRIPTION: Demonstrates how to set up a local environment for running agents directly on the local machine using both Python and JavaScript.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, WorkspaceType
toolset = ComposioToolSet(
    workspace_config=WorkspaceType.Host()
)

LANGUAGE: javascript
CODE:
import { Workspace } from "composio-core"

toolset = new OpenAIToolset({
    workspaceConfig: Workspace.Host({})
})

----------------------------------------

TITLE: Creating AI Agent with OpenAI and GitHub Integration in JavaScript
DESCRIPTION: JavaScript implementation demonstrating how to create an AI agent using OpenAI, configure Composio tools, and execute GitHub operations.

LANGUAGE: javascript
CODE:
import { OpenAIToolSet } from "composio-core";
import OpenAI from "openai";

const toolset = new OpenAIToolSet({ apiKey: process.env.COMPOSIO_API_KEY });
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const tools = await toolset.getTools({ actions: ["GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"] });

async function createGithubAssistant(openai, tools) {
return await openai.beta.assistants.create({
name: "Github Assistant",
instructions: "You're a GitHub Assistant, you can do operations on GitHub",
tools: tools,
model: "gpt-4o"
});
}

async function executeAssistantTask(openai, toolset, assistant, task) {
const thread = await openai.beta.threads.create();
const run = await openai.beta.threads.runs.create(thread.id, {
assistant_id: assistant.id,
instructions: task,
tools: tools,
model: "gpt-4o",
stream: false
});
const call = await toolset.waitAndHandleAssistantToolCalls(openai, run, thread);
console.log(call);
}

(async () => {
const githubAssistant = await createGithubAssistant(openai, tools);
await executeAssistantTask(
openai,
toolset,
githubAssistant,
"Star the repository 'composiohq/composio'"
);
})();

----------------------------------------

TITLE: Using Composio Tools with Entity-Specific Actions
DESCRIPTION: Example of using Composio tools with a specific user entity, demonstrating how to execute actions on behalf of a particular user using the entity_id parameter.

LANGUAGE: python
CODE:
# Import required libraries
from composio_openai import ComposioToolSet, App
from openai import OpenAI

# Initialize OpenAI and Composio clients
openai_client = OpenAI()
composio_toolset = ComposioToolSet(entity_id="Jessica")

# Get GitHub tools from Composio for the entity Jessica
tools = composio_toolset.get_tools(apps=[App.GITHUB])

task = "Star the repo composiohq/composio on GitHub"

# Make API call to OpenAI with the tools
response = openai_client.chat.completions.create(
    model="gpt-4o-mini",
    tools=tools,
    messages=[
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": task},
    ],
)

# Execute the tool calls
result = composio_toolset.handle_tool_calls(response=response)
print(result)

LANGUAGE: javascript
CODE:
// Import required libraries
import { OpenAI } from "openai";
import { OpenAIToolSet } from "composio-core";

// Initialize OpenAI and Composio clients
const openai_client = new OpenAI();
const composio_toolset = new OpenAIToolSet();

// Get GitHub tools from Composio
const tools = await composio_toolset.getTools({apps: ['GITHUB'], entityId: "Jessica"})

const task = "Star the repo composiohq/composio on GitHub"

// Make API call to OpenAI with the tools
const response = await openai_client.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [{ role: "user", content: task }],
    tools: tools,
    tool_choice: "auto",
});

const result = await composio_toolset.handleToolCall(response);
console.log(result);

----------------------------------------

TITLE: Integrating GitHub Tools with Composio for Griptape Operations
DESCRIPTION: This snippet shows how to integrate GitHub tools into Griptape projects using Composio's services. It creates a ComposioToolSet and configures a Griptape agent with GitHub tools.

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet()
composio_tools = composio_toolset.get_tools(tools = App.GITHUB)

agent = Agent(
    tools=composio_tools
)

----------------------------------------

TITLE: Complete Github Contributor Reward Agent Implementation in Python
DESCRIPTION: This snippet combines all the previous code blocks to create a complete implementation of the Github Contributor Reward Agent. It includes all necessary imports, function definitions, and agent execution steps.

LANGUAGE: python
CODE:
from composio_llamaindex import ComposioToolSet, App, Action
from llama_index.core.agent import FunctionCallingAgentWorker
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI
from dotenv import load_dotenv
from solders.keypair import Keypair
from solders.pubkey import Pubkey
from solana.rpc.api import Client
from solders.system_program import TransferParams, transfer
from solders.transaction import Transaction
from solders.message import Message
from composio import action
import base58
from solders.signature import Signature

load_dotenv()

@action(toolname='solanakit', requires=['solana','solders'])
def send_sol(sender_private_key: str, receiver_public_key: str, amount: str, network: str = "devnet") -> str:
    """
    Send SOL to a wallet
    :param sender_private_key: private key of the sender
    :param receiver_public_key: address of the wallet to send SOL to
    :param amount: amount of SOL to send, should be in lamports
    :param network: network to send the transaction on
    :return transaction_hash: transaction hash
    """
    try:
        # Create keypair for sender
        # Use a valid Base58-encoded private key for the sender
        sender_keypair = Keypair.from_base58_string(sender_private_key)
        sender_public_key = sender_keypair.pubkey()

        # Define receiver's public key
        receiver_public_key_ = Pubkey.from_string(receiver_public_key)

        # Build the transfer instruction
        ixns = [
            transfer(
                TransferParams(
                    from_pubkey=sender_public_key,
                    to_pubkey=receiver_public_key_,
                    lamports=int(amount)
                )
            )
        ]

        # Create a message with the transaction
        msg = Message(ixns, sender_public_key)

        # Connect to a Solana client
        client = Client(f"https://api.{network}.solana.com")  # Using Devnet RPC endpoint

        # Fetch the latest blockhash
        latest_blockhash = client.get_latest_blockhash().value.blockhash

        # Create the transaction
        transaction = Transaction([sender_keypair], msg, latest_blockhash)

        # Send the transaction
        response = client.send_transaction(transaction)
        print("Transaction response:", response)
        return "Transaction sent successfully: "+str(response)
    except ValueError as e:
        return f"Error: Invalid key format - {str(e)}"
    except Exception as e:
        return f"Error sending transaction: {str(e)}"

toolset = ComposioToolSet(api_key="")
tools = toolset.get_tools(actions=[send_sol, Action.GITHUB_LIST_REPOSITORY_CONTRIBUTORS])

llm = OpenAI(model="gpt-4o")

prefix_messages = [
    ChatMessage(
        role="system",
        content=(
              "You are a solana agent that can execute actions with Solana Kit"
              "You have access to Github and can list repository contributors"
        ),
    )
]

agent = FunctionCallingAgentWorker(
    tools=tools,
    llm=llm,
    prefix_messages=prefix_messages,
    max_function_calls=10,
    allow_parallel_tool_calls=False,
    verbose=True,
).as_agent()

agent.chat("Find the most active contributor to the composiohq/composio repository and print their username.")
wallet_address = input("Enter the wallet address of the most active contributor: ")
private_key = os.getenv('SOLANA_PRIVATE_KEY')
my_wallet_address = os.getenv('SOLANA_WALLET_ADDRESS')
agent.chat(f"""send 1 SOL from my wallet {my_wallet_address}, my private key is {private_key} to {wallet_address} on devnet using send sol action""")

----------------------------------------

TITLE: Custom Action Execution
DESCRIPTION: Examples of executing custom actions with specific parameters in both Python and JavaScript implementations.

LANGUAGE: python
CODE:
toolset.execute_action(
    action=create_draft,
    params={
        "thread_id": "",
        "message_body": "",
    },
    entity_id="Jessica",
)

LANGUAGE: javascript
CODE:
const result = await langchainToolset.executeAction({
    action: "create_draft",
    params:{
        thread_id: "",
        message_body: ""
    },
    entityId: "Jessica",
})

console.log(result);

----------------------------------------

TITLE: Installing Composio Core Package with npm
DESCRIPTION: Use npm to install the composio-core package, which is required for using the Composio JS SDK.

LANGUAGE: bash
CODE:
npm install composio-core

----------------------------------------

TITLE: Defining and Creating OpenAI Assistant for GitHub Operations
DESCRIPTION: Create an OpenAI Assistant with GitHub tools and initiate a conversation thread for performing GitHub operations in Python and JavaScript.

LANGUAGE: python
CODE:
assistant_instruction = "You are a super intelligent personal assistant"

assistant = openai_client.beta.assistants.create(
  name="Personal Assistant",
  instructions=assistant_instruction,
  model="gpt-4-turbo-preview",
  tools=tools,
)

thread = openai_client.beta.threads.create()
my_task = "Star a repo composiohq/composio on GitHub"
message = openai_client.beta.threads.messages.create(thread_id=thread.id,role="user",content=my_task)

run = openai_client.beta.threads.runs.create(thread_id=thread.id,assistant_id=assistant.id)

response_after_tool_calls = composio_toolset.wait_and_handle_assistant_tool_calls(
    client=openai_client,
    run=run,
    thread=thread,
)

LANGUAGE: javascript
CODE:
async function createGithubAssistant(openai, tools) {
    return await openai.beta.assistants.create({
        name: "Github Assistant",
        instructions: "You're a GitHub Assistant, you can do operations on GitHub",
        tools: tools,
        model: "gpt-4o-mini"
    });
}

----------------------------------------

TITLE: Configuring LlamaIndex Agent
DESCRIPTION: Setup for the LlamaIndex agent with GitHub tools and system message configuration

LANGUAGE: python
CODE:
prefix_messages = [
    ChatMessage(
        role="system",
        content=(
            "You are a Github Agent, and you can use tools to perform actions on Github."
        ),
    )
]

agent = FunctionCallingAgentWorker(
    tools=tools,
    llm=llm,
    prefix_messages=prefix_messages,
    max_function_calls=10,
    allow_parallel_tool_calls=False,
    verbose=True,
).as_agent()

----------------------------------------

TITLE: Installing Required Packages for Composio-LangChain Integration
DESCRIPTION: Installation commands for required packages including composio-langchain and OpenAI dependencies for both Python and JavaScript environments

LANGUAGE: bash
CODE:
pip install composio-langchain langchain_openai

LANGUAGE: javascript
CODE:
npm install composio-core langchain @langchain/openai

----------------------------------------

TITLE: Scraping Website Content with Web Scraper Tool in Python
DESCRIPTION: This snippet demonstrates how to use the Web Scraper tool in Composio to scrape content from a website. It uses the ComposioToolSet and executes the WEBTOOL_SCRAPE_WEBSITE_CONTENT action with the specified website URL.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App, Action
toolset = ComposioToolSet()
website_link="https://app.composio.dev"
toolset.execute_action(
    action=Action.WEBTOOL_SCRAPE_WEBSITE_CONTENT,
    params={
        "website_url":website_link,
        },
)

----------------------------------------

TITLE: Integrating GitHub Tools with Composio for LangChain
DESCRIPTION: This snippet demonstrates how to integrate GitHub tools into LangChain projects using Composio's services and create a Julep agent with these tools.

LANGUAGE: python
CODE:
from composio_julep import App, ComposioToolSet
    
toolset = ComposioToolSet()
composio_tools = toolset.get_tools(tools=App.GITHUB)


agent = client.agents.create(
    name=name,
    about=about,
    default_settings=default_settings,
    model="gpt-4-turbo",
    tools=composio_tools,
)

----------------------------------------

TITLE: Complete Code Implementation for Code Execution Agent
DESCRIPTION: This snippet provides the complete code implementation for the Code Execution Agent project in both Python and JavaScript, including all the steps from package imports to task execution.

LANGUAGE: python
CODE:
import os

from composio_crewai import Action, App, ComposioToolSet
from crewai import Agent, Crew, Process, Task
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

# Load environment variables
load_dotenv()

# Set up Composio tools
composio_toolset = ComposioToolSet()

# Get tools from the Code Interpreter app
tools = composio_toolset.get_tools(apps=[App.CODEINTERPRETER])

# Initialize the language model
llm = ChatOpenAI(model="gpt-4o")

# Define the Python executor agent
python_executor_agent = Agent(
    role="Python Executor",
    goal="Execute Python code to solve problems",
    backstory="""You are an expert Python developer specializing in executing code to solve various problems.
    Your job is to analyze problems, write efficient Python code to solve them, and execute the code to ensure it works correctly.""",
    verbose=True,
    allow_delegation=False,
    tools=tools,
    llm=llm
)

# Define a task for the agent
task = Task(
    description="""Write a Python function to calculate the Fibonacci sequence up to the 10th number.
                Then, execute the code and return the result.""",
    expected_output="The Fibonacci sequence and the execution result",
    agent=python_executor_agent
)

# Create a crew with the agent and task
crew = Crew(
    agents=[python_executor_agent],
    tasks=[task],
    verbose=2,
    process=Process.sequential
)

# Execute the task
result = crew.kickoff()
print(f"Result: {result}")

LANGUAGE: javascript
CODE:
import dotenv from 'dotenv';
import { ChatOpenAI } from "@langchain/openai";
import { AgentExecutor, createOpenAIFunctionsAgent } from "langchain/agents";
import { pull } from "langchain/hub";
import { LangchainToolSet } from "composio-core";

dotenv.config();

// Set up Composio tools
const composioToolset = new LangchainToolSet({
    apiKey: process.env.COMPOSIO_API_KEY
});

async function main() {
    // Get specific tools for code execution
    const tools = await composioToolset.getTools({
        actions: ["codeinterpreter_execute_code"]
    });

    // Initialize the language model
    const llm = new ChatOpenAI({ model: "gpt-4o" });

    // Create the agent
    const prompt = await pull("hwchase17/openai-functions-agent");
    const agent = await createOpenAIFunctionsAgent({
        llm,
        tools,
        prompt
    });
    
    // Set up the agent executor
    const agentExecutor = new AgentExecutor({
        agent,
        tools,
        verbose: true
    });

    // Define the code execution function
    async function executeCodeAgent(problem) {
        const result = await agentExecutor.invoke({
            input: `Write code to solve the following problem and execute it: ${problem}`
        });
        
        return result.output;
    }
    
    // Run the agent with a sample problem
    const problem = "Write a function to calculate the Fibonacci sequence up to the 10th number and display the result.";
    
    const result = await executeCodeAgent(problem);
    console.log("Result:", result);
}

main().catch(console.error);

----------------------------------------

TITLE: Creating Custom Actions with GitHub Integration
DESCRIPTION: Examples of creating custom actions that interact with GitHub API, including repository listing and starring functionality. The actions utilize automatic authentication handling provided by Composio.

LANGUAGE: python
CODE:
@action(toolname="github")
def list_repositories(
    owner: str,
    execute_request: t.Callable,
) -> list[str]:
    """
    List repositories for a user.

    :param owner: Name of the owner.
    :return repositories: List of repositories for given user.
    """
    return [
        repo["name"]
        for repo in execute_request(f"/users/{owner}/repos", "get", None, None).get(
            "data", []
        )
    ]

LANGUAGE: javascript
CODE:
const action = await openAIToolset.createAction({
    actionName: "star_repo",
    toolName: "github",
    description: "Stars a repository on GitHub",
    inputParams: z.object({
        owner: z.string().describe("The owner of the repository"),
        repo: z.string().describe("The name of the repository"),
    }),
    callback: async (inputParams, authCredentials, executeRequest) => {
        try {
            const res = await executeRequest({
                endpoint: `/user/starred/${inputParams.owner}/${inputParams.repo}`,
                method: "PUT",
                parameters: [],
                body: {}
            });
            return res;
        } catch (e) {
            console.error(e);
            return {};
        }
    },
})

----------------------------------------

TITLE: Initializing Language Model and Defining Tools
DESCRIPTION: This snippet initializes the language model (ChatOpenAI) and sets up the necessary tools for the agents, including the Google Calendar tool from Composio. It also retrieves the current date and timezone.

LANGUAGE: python
CODE:
load_dotenv()

# Initialize the language model
llm = ChatOpenAI(model="gpt-4o")

# Define tools for the agents
# We are using Google calendar tool from composio to connect to our calendar account.
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.GOOGLECALENDAR])

# Retreive the current date and time
date = datetime.today().strftime("%Y-%m-%d")
timezone = datetime.now().astimezone().tzinfo

----------------------------------------

TITLE: Initializing Composio Toolset
DESCRIPTION: Setting up the Composio toolset and retrieving the necessary tools for code execution.

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.CODEINTERPRETER])

LANGUAGE: javascript
CODE:
const toolset = new LangchainToolSet({ 
    apiKey: process.env.COMPOSIO_API_KEY
});

const tools = await toolset.getTools({ 
    actions: ["codeinterpreter_create_sandbox", "codeinterpreter_execute_code"] 
});

----------------------------------------

TITLE: Defining Custom Schema Processor for Linear Action in Python
DESCRIPTION: Create a custom function to modify the schema of the LINEAR_CREATE_LINEAR_ISSUE action, removing project_id and team_id parameters.

LANGUAGE: Python
CODE:
def linear_schema_processor(schema: dict) -> dict:
    # This way the agent doesn't expect a project and team ID to run the action
    del schema['project_id']
    del schema['team_id']
    return schema

----------------------------------------

TITLE: Connecting GitHub Account with Composio
DESCRIPTION: Authenticate and connect a GitHub account to Composio using CLI commands or programmatically in Python and JavaScript.

LANGUAGE: shell
CODE:
composio login
composio add github

LANGUAGE: python
CODE:
request = composio_toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

LANGUAGE: javascript
CODE:
const connection = await toolset.connectedAccounts.initiate({appName: "github"})
console.log(`Open this URL to authenticate: ${connection.redirectUrl}`);

----------------------------------------

TITLE: Integrating Contact Data Tools with LangChain
DESCRIPTION: Example implementations for integrating various contact data providers (Cognism, Apollo.io, Zoominfo, etc.) using LangChain agents and tools. Shows how to initialize and execute agents with specific tool configurations.

LANGUAGE: python
CODE:
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain import hub
from langchain_openai import ChatOpenAI
from composio_langchain import ComposioToolSet, Action, App

llm = ChatOpenAI()
prompt = hub.pull("hwchase17/openai-functions-agent")

composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.COGNISM])

agent = create_openai_functions_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

task = "your task description here"
result = agent_executor.invoke({"input": task})
print(result)

LANGUAGE: javascript
CODE:
import { ChatOpenAI } from "@langchain/openai";
import { createOpenAIFunctionsAgent, AgentExecutor } from "langchain/agents";
import { LangchainToolSet } from "composio-core";
import { pull } from "langchain/hub";

const llm = new ChatOpenAI({
  model: "gpt-4-turbo",
  temperature: 0,
});

const prompt = await pull("hwchase17/openai-functions-agent");

const toolset = new LangchainToolSet({ apiKey: "<your-composio-api-key>" });
const tools = await toolset.getTools({ apps: ["COGNISM"] });

const agent = await createOpenAIFunctionsAgent({llm, tools, prompt});
const agentExecutor = new AgentExecutor({ agent, tools, verbose: true });

const response = await agentExecutor.invoke({ input: "your task description here" });
console.log(response);

----------------------------------------

TITLE: Creating and Configuring OpenAI Assistant
DESCRIPTION: Implementation of OpenAI assistant creation and configuration for GitHub operations

LANGUAGE: python
CODE:
assistant_instruction = "You are a super intelligent personal assistant"

assistant = openai_client.beta.assistants.create(
  name="Personal Assistant",
  instructions=assistant_instruction,
  model="gpt-4-turbo-preview",
  tools=tools,
)

thread = openai_client.beta.threads.create()
my_task = "Star a repo composiohq/composio on GitHub"
message = openai_client.beta.threads.messages.create(thread_id=thread.id,role="user",content=my_task)

run = openai_client.beta.threads.runs.create(thread_id=thread.id,assistant_id=assistant.id)

response_after_tool_calls = composio_toolset.wait_and_handle_assistant_tool_calls(
    client=openai_client,
    run=run,
    thread=thread,
)

LANGUAGE: javascript
CODE:
async function createGithubAssistant(openai, tools) {
    return await openai.beta.assistants.create({
        name: "Github Assistant",
        instructions: "You're a GitHub Assistant, you can do operations on GitHub",
        tools: tools,
        model: "gpt-4o-mini"
    });
}

----------------------------------------

TITLE: Setting Up User GitHub Connection with Composio (TypeScript)
DESCRIPTION: This function checks if a user has an existing GitHub connection through Composio. If not, it initiates a new connection and waits for it to become active. It requires the Composio API key and uses the OpenAIToolSet from composio-core.

LANGUAGE: typescript
CODE:
import { OpenAI } from "openai";
import { OpenAIToolSet } from "composio-core";

const COMPOSIO_API_KEY = "<your-composio-api-key>"
const OPEN_AI_API_KEY = "<your-openai-api-key>"
const toolset = new OpenAIToolSet({apiKey: COMPOSIO_API_KEY,});

const appName = 'github';

async function setupUserConnectionIfNotExists(entityId) {
        const entity = toolset.client.getEntity(entityId);
        const connection = await entity.getConnection({ appName: appName });

        if (!connection) {
            const connection = await entity.initiateConnection({appName: appName});
            console.log("Log in via: ", connection.redirectUrl);
            return connection.waitUntilActive(60);
        }

        return connection;
}

----------------------------------------

TITLE: Creating AI Agent with OpenAI and GitHub Integration in Python
DESCRIPTION: Python implementation showing how to create an AI agent using OpenAI, configure Composio tools, and execute GitHub operations.

LANGUAGE: python
CODE:
from openai import OpenAI
from composio_openai import ComposioToolSet, App, Action

openai_client = OpenAI(
api_key="{{OPENAIKEY}}"
)

# Initialise the Composio Tool Set

composio_tool_set = ComposioToolSet()

# Get GitHub tools that are pre-configured
actions = composio_tool_set.get_actions(
actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]
)

my_task = "Star a repo composiodev/composio on GitHub"

# Setup openai assistant
assistant_instruction = "You are a super intelligent personal assistant"

assistant = openai_client.beta.assistants.create(
name="Personal Assistant",
instructions=assistant_instruction,
model="gpt-4-turbo",
tools=actions,
)

# create a thread
thread = openai_client.beta.threads.create()

message = openai_client.beta.threads.messages.create(
thread_id=thread.id,
role="user",
content=my_task
)

# Execute Agent with integrations
run = openai_client.beta.threads.runs.create(
thread_id=thread.id,
assistant_id=assistant.id
)


# Execute Function calls
response_after_tool_calls = composio_tool_set.wait_and_handle_assistant_tool_calls(
client=openai_client,
run=run,
thread=thread,
)

print(response_after_tool_calls)

----------------------------------------

TITLE: Executing Claude Agent for GitHub Tasks
DESCRIPTION: Creating and executing a chat completion request to perform GitHub actions using Claude's tool-enabled API.

LANGUAGE: python
CODE:
my_task = "Star a repo composiohq/composio on GitHub"

# Create a chat completion request to decide on the action
response = client.beta.tools.messages.create(
    model="claude-3-opus-20240229",
    max_tokens=1024,
    tools= actions,
    messages=[{"role": "user", "content": "Star me composiohq/composio repo in github."}],
)
pprint(response)

----------------------------------------

TITLE: Getting GitHub Tools in JavaScript with Composio
DESCRIPTION: This code demonstrates how to initialize the LangchainToolSet and retrieve all actions for the GitHub tool in JavaScript.

LANGUAGE: javascript
CODE:
import { LangchainToolSet } from "composio-core";

const composioToolset = new LangchainToolSet();

// Get all actions from a tool
const tools = await composioToolset.getTools({ apps: ["GITHUB"] });

----------------------------------------

TITLE: Implementing Web Scraping with Firecrawl and Composio
DESCRIPTION: Examples showing how to use Composio's hosted tools with Firecrawl for web scraping in both Python and JavaScript. Demonstrates integration with external services.

LANGUAGE: python
CODE:
from composio_openai import ComposioToolSet
from openai import OpenAI

client = OpenAI()
toolset = ComposioToolSet()

tools = toolset.get_tools(["FIRECRAWL_SCRAPE_EXTRACT_DATA_LLM"])
task = "Scrape https://example.com and extract the data"
response = client.chat.completions.create(
    model="gpt-4o-mini",
    messages=[{"role": "user", "content": task}],
    tools=tools,
    tool_choice="auto",
)

result = toolset.handle_tool_calls(response)
print(result)

LANGUAGE: javascript
CODE:
import { OpenAIToolSet } from "composio-core"
import { OpenAI } from "openai";

const openai_client = new OpenAI();
const toolset = new OpenAIToolSet();

const tools = await toolset.getTools({
  actions: ["FIRECRAWL_SCRAPE_EXTRACT_DATA_LLM"]
});
const instruction = "Scrape https://example.com and extract the data";

const response = await openai_client.chat.completions.create({
  model="gpt-4o-mini",
  messages: [{ role: "user", content: instruction }],
  tools: tools,
  tool_choice: "auto",
});

const result = await toolset.handleToolCalls(response);
console.log(result);

----------------------------------------

TITLE: Defining RAG Agent with Role, Goal, and Tools in Python
DESCRIPTION: This snippet defines the RAG agent with its role, goal, backstory, and tools. It uses the Agent class to create an agent that can add content to the RAG tool, formulate queries, and evaluate goal achievement based on user input.

LANGUAGE: python
CODE:
# Define the RAG Agent
rag_agent = Agent(
    role="RAG Agent",
    goal=dedent(
        """\
        Add relevant content to the RAG tool to enrich its knowledge base.
        Formulate a query to retrieve information from the RAG tool based on user input.
        After retrieval and addition of content, evaluate whether the goal given by the user input is achieved. If yes, stop execution."""
    ),
    verbose=True,
    memory=True,
    backstory=dedent(
        """\
        You are an expert in understanding user requirements, forming accurate queries,
        and enriching the knowledge base with relevant content."""
    ),
    llm=llm,
    allow_delegation=False,
    tools=tools,
)

----------------------------------------

TITLE: Installing Composio Core Package with pnpm
DESCRIPTION: Use pnpm to install the composio-core package, enabling the use of Composio JS SDK in your project.

LANGUAGE: bash
CODE:
pnpm install composio-core

----------------------------------------

TITLE: Connecting GitHub Account using Composio CLI
DESCRIPTION: This snippet demonstrates how to log in to Composio and add a GitHub integration using the Composio CLI.

LANGUAGE: bash
CODE:
composio login 
composio add github

----------------------------------------

TITLE: Executing Full Workflow for SQL Agent with Composio
DESCRIPTION: This code snippet demonstrates the execution of the full workflow combining SQL queries and data visualization. It includes a main function that executes the SQL query, creates a visualization based on the results, and handles any errors that may occur during the process.

LANGUAGE: python
CODE:
# Execute the workflow
def main():
    # First, execute SQL query
    sql_result = sql_executor.invoke({"input": query_task})
    print(f"SQL Query Result: {sql_result['output']}")
    
    # Then, create visualization
    visualization_task = (
        f"Using the following data from the top 10 highest salaries: {sql_result['output']}\n"
        "Create a bar chart showing first_name on the x-axis and salary on the y-axis. "
        "Save the visualization as 'salary_chart.png'."
    )
    visualization_result = visualization_executor.invoke({"input": visualization_task})
    print(f"Visualization Result: {visualization_result['output']}")
    
    return "Workflow completed successfully!"

if __name__ == "__main__":
    main()

LANGUAGE: javascript
CODE:
// Main function to run the SQL Agent workflow
async function runSQLAgent() {
    try {
        // Define the SQL query
        const query = "SELECT * FROM MOCK_DATA ORDER BY salary DESC LIMIT 10";
        
        // Execute the SQL query
        const queryResult = await executeSQLQuery(query);
        
        // Create visualization based on query results
        const visualizationResult = await createVisualization(queryResult);
        
        console.log("SQL Agent workflow completed successfully!");
        return {
            queryResult,
            visualizationResult
        };
    } catch (error) {
        console.error("An error occurred:", error);
        throw error;
    }
}

// Execute the workflow
runSQLAgent().catch(error => console.error("SQL Agent failed:", error));

----------------------------------------

TITLE: GitHub Account Connection
DESCRIPTION: Commands and code for connecting to GitHub through Composio, including CLI commands and programmatic approaches

LANGUAGE: shell
CODE:
composio login
composio add github

LANGUAGE: python
CODE:
request = composio_toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

LANGUAGE: javascript
CODE:
const connection = await toolset.connectedAccounts.initiate({appName: "github"})
console.log(`Open this URL to authenticate: ${connection.redirectUrl}`);

----------------------------------------

TITLE: Implementing Webhook Handler in JavaScript
DESCRIPTION: Creates a webhook endpoint that processes incoming requests, interacts with OpenAI API, and handles tool calls for newsletter processing.

LANGUAGE: javascript
CODE:
app.get('/webhook', async (req, res) => {
    try {
        const toolset = new OpenAIToolSet({
            apiKey: process.env.COMPOSIO_API_KEY,
        });
        // ... rest of the webhook implementation
    } catch (error) {
        console.error(error);
        res.status(500).send('Internal Server Error');
    }
});

----------------------------------------

TITLE: Installing Required Packages
DESCRIPTION: Installation commands for required packages in both Python and JavaScript environments. Includes core dependencies for Composio and LangChain integration.

LANGUAGE: python
CODE:
pip install composio-crewai langchain-openai

LANGUAGE: javascript
CODE:
pnpm add composio-core dotenv @langchain/openai langchain

----------------------------------------

TITLE: Task Execution Endpoint
DESCRIPTION: Create FastAPI endpoint that processes natural language tasks using OpenAI and Composio tools.

LANGUAGE: python
CODE:
@app.post("/execute_task")
async def execute_task(request: TaskRequest):
    response = openai_client.chat.completions.create(
        model="gpt-4o-mini",
        tools=tools,
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": request.task},
        ],
    )
    
    result = composio_toolset.handle_tool_calls(response)
    return {"result": result}

----------------------------------------

TITLE: Executing Custom Actions with LLM Integration
DESCRIPTION: Implementation of custom action execution using OpenAI's language models, demonstrating how to integrate custom tools with AI-powered automation.

LANGUAGE: python
CODE:
tools = toolset.get_tools(actions=[list_repositories])

task = "List all the repositories for the organization composiohq"

response = openai_client.chat.completions.create(
model="gpt-4o-mini",
tools=tools,
messages=
    [
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": task},
    ],
)

result = toolset.handle_tool_calls(response)
print(result)

LANGUAGE: javascript
CODE:
const tools = await openAIToolset.getTools({
    actions: ["star_repo"]
});

const task = "Star the repository composioHQ/composio";

const response = await openai_client.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [
        { "role": "system", "content": "You are a helpful assistant." },
        { "role": "user", "content": task },
    ],
    tools: tools,
    tool_choice: "auto",
});

const result = await openAIToolset.handleToolCall(response, "default");
console.log(result);

----------------------------------------

TITLE: Configuring Newsletter Processing Agents in Python
DESCRIPTION: Defines three specialized agents for email fetching, content summarization, and email sending, each with specific roles and capabilities.

LANGUAGE: python
CODE:
email_fetcher_agent = Agent(
    role="Email Fetcher Agent",
    goal="Fetch recent newsletter emails from the inbox.",
    verbose=True,
    memory=True,
    backstory=f"You are an expert in retrieving and organizing email content. Today's date is {datetime.now().strftime('%B %d, %Y')}.",
    llm=llm,
    allow_delegation=False,
    tools=gmail_tools,
)

----------------------------------------

TITLE: Configuring E2B Workspace Environment in Python
DESCRIPTION: This code snippet shows how to modify the benchmark.py file to use the E2B workspace environment. It imports the WorkspaceType and sets the workspace_env parameter in the evaluate function.

LANGUAGE: python
CODE:
from composio import WorkspaceType

# existing benchmark code

evaluate(
    bench,
    dry_run=False,
    test_range=test_range,
    test_instance_ids=test_instance_ids_list,
    workspace_env=WorkspaceType.E2B
)

----------------------------------------

TITLE: Complete RAG Implementation
DESCRIPTION: Full implementation of the RAG system including agent definition, content addition, and query functionality.

LANGUAGE: python
CODE:
import os
import textwrap

from composio_crewai import Action, App, ComposioToolSet
from crewai import Agent, Crew, Process, Task
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

# Load environment variables
load_dotenv()

# Initialize the language model
llm = ChatOpenAI(model="gpt-4o")

# Set up Composio tools
composio_toolset = ComposioToolSet()

# Get tools for RAG operations
rag_tools = composio_toolset.get_tools(apps=[App.RAG])

# Define the RAG Agent
rag_agent = Agent(
    role="RAG Knowledge Base Manager",
    goal="Manage a knowledge base using RAG tools",
    backstory="""You are an expert in managing knowledge bases and retrieving information.
    Your job is to add content to the knowledge base and retrieve answers to user queries.
    You use RAG (Retrieval-Augmented Generation) tools to efficiently store and retrieve information.""",
    verbose=True,
    allow_delegation=False,
    tools=rag_tools,
    llm=llm
)

# Define task for adding content
add_content_task = Task(
    description="""Add the following information to the knowledge base:
    
    1. Paris is the capital city of France.
    2. London is the capital city of the United Kingdom.
    3. Washington D.C. is the capital city of the United States.
    4. Tokyo is the capital city of Japan.
    5. Berlin is the capital city of Germany.
    
    Make sure to confirm that each piece of information is successfully added.""",
    expected_output="Confirmation that all information was added to the knowledge base",
    agent=rag_agent
)

# Define task for querying
query_task = Task(
    description="""Query the knowledge base to answer the following question:
    \"What is the capital of France?\"
    
    Return the answer with any supporting information from the knowledge base.""",
    expected_output="The answer to the question based on the knowledge base",
    agent=rag_agent,
    context=[add_content_task]  # This task depends on content being added first
)

# Create a crew with the agent and tasks
crew = Crew(
    agents=[rag_agent],
    tasks=[add_content_task, query_task],
    verbose=2,
    process=Process.sequential  # Tasks must run in order
)

# Execute the workflow
result = crew.kickoff()
print(textwrap.fill(f"Final Result: {result}", width=80))

LANGUAGE: javascript
CODE:
import dotenv from 'dotenv';
import { LangchainToolSet } from "composio-core";
import { ChatOpenAI } from "@langchain/openai";
import { AgentExecutor, createOpenAIFunctionsAgent } from "langchain/agents";
import { pull } from "langchain/hub";

dotenv.config();

const llm = new ChatOpenAI({ model: "gpt-4-turbo" });

const composioToolset = new LangchainToolSet({
    apiKey: process.env.COMPOSIO_API_KEY,
    workspace: {
        type: "docker"
    }
});

(async () => {
    try {
        const tools = await composioToolset.getTools({
            actions: ["rag_add_content", "rag_get_content", "rag_query"]
        });
        
        const prompt = await pull("hwchase17/openai-functions-agent");
        const agent = await createOpenAIFunctionsAgent({
            llm,
            tools,
            prompt
        });
        
        const agentExecutor = new AgentExecutor({
            agent,
            tools,
            verbose: true
        });
        
        const content = `
            1. Paris is the capital city of France.
            2. London is the capital city of the United Kingdom.
            3. Washington D.C. is the capital city of the United States.
            4. Tokyo is the capital city of Japan.
            5. Berlin is the capital city of Germany.
        `;
        
        const addResult = await agentExecutor.invoke({
            input: `Add the following information to the knowledge base: ${content}`
        });
        
        console.log("Content Added:", addResult.output);
        
        const query = "What is the capital of France?";
        
        const queryResult = await agentExecutor.invoke({
            input: `Query the knowledge base to answer the following question: \"${query}\"`
        });
        
        console.log("Query Result:", queryResult.output);
        console.log("RAG workflow completed successfully");
    } catch (error) {
        console.error("Error:", error);
    }
})();

----------------------------------------

TITLE: Filtering Actions by Use Case
DESCRIPTION: Demonstrates how to find relevant actions by describing a use case in natural language. Shows implementation across Python, JavaScript and CLI with examples of complex workflows.

LANGUAGE: python
CODE:
from composio_openai import ComposioToolSet, App

composio_toolset = ComposioToolSet()

use_case="Create an issue in Linear & send the issue URL on Slack to a slack channel"

action_enums=composio_toolset.find_actions_by_use_case(App.GITHUB, use_case=use_case, advanced=False)
tools = composio_toolset.get_tools(actions=action_enums)

print(tools)

LANGUAGE: javascript
CODE:
import { OpenAIToolSet } from "composio-core";

const toolset = new OpenAIToolSet();

//  -- Normal way --
// Specify the use case
const useCase = "Star a repo on github";

const actionsList = await toolset.client.actions.list({
  useCase: useCase,
  apps: "github",
});

console.log(actionsList);


// -- Advanced way --
(async() => {
    const actionsEnums = await toolset.client.actions.findActionEnumsByUseCase({
        apps: ["github", "gmail"],
        useCase: "get repo details and send an email to the owner of the repo"
    });
    console.log("Action enums:", actionsEnums);
    
    // Fetch the actual actions using the enums
    const actions = await toolset.getTools({ actions: actionsEnums });
    console.log("Fetched actions:", actions);
})();

LANGUAGE: bash
CODE:
composio actions --use-case 'star a repo on github' --app 'github'

----------------------------------------

TITLE: Filtering Specific Actions for Google AI Model
DESCRIPTION: This code shows how to restrict the Google AI model to execute only specific actions, such as creating a GitHub issue.

LANGUAGE: python
CODE:
# To restrict models from executing any actions, filter specific actions 
actions = composio_toolset.get_tool(actions=[Action.GITHUB_CREATE_ISSUE])

----------------------------------------

TITLE: Implementing Tool Calling Loop in Python
DESCRIPTION: This code snippet shows the main interaction loop for tool calling in Python. It sends requests to the LLM, checks for tool calls, executes them, and stores the conversation history. The loop continues until the task is complete or an error occurs.

LANGUAGE: python
CODE:
# Main interaction loop
while True:
    try:
        # 1. Send request to LLM
        response = client.chat.completions.create(
            model="gpt-4o",
            tools=tools,
            messages=messages,
        )

        # 2. Check if LLM wants to use tools
        if response.choices[0].finish_reason != "tool_calls":
            print(response.choices[0].message.content)
            break

        # 3. Execute tool calls
        result = toolset.handle_tool_calls(response)

        # 4. Store the conversation history
        messages.append({
            "role": "assistant",
            "content": "",
            "tool_calls": response.choices[0].message.tool_calls,
        })
        for tool_call in response.choices[0].message.tool_calls:
            messages.append({
                "role": "tool",
                "content": str(result),
                "tool_call_id": tool_call.id,
            })
    except Exception as error:
        print(f"Error: {error}")
        if hasattr(error, 'response'):
            print(f"Response data: {error.response}")
        break

----------------------------------------

TITLE: Executing LlamaIndex Agent to Star GitHub Repository
DESCRIPTION: This code snippet demonstrates how to execute the LlamaIndex agent to perform a specific task on GitHub, in this case, starring a repository. It shows the simplicity of interacting with external services using natural language commands.

LANGUAGE: python
CODE:
result = agent.chat("Star a repo composiohq/composio on GitHub")

LANGUAGE: typescript
CODE:
coming soon

----------------------------------------

TITLE: Defining Agno Agent with GitHub Tools
DESCRIPTION: Creates an Agno Agent instance with the retrieved GitHub tools.

LANGUAGE: python
CODE:
agent = Agent(tools=tools, show_tool_calls=True)

----------------------------------------

TITLE: Configuring CAMEL Agent with GitHub Tools
DESCRIPTION: Setting up the CAMEL agent with appropriate configurations, system messages, and GitHub tools integration.

LANGUAGE: python
CODE:
assistant_model_config = ChatGPTConfig(
    temperature=0.0,
    tools=tools,
)

model = ModelFactory.create(
    model_platform=ModelPlatformType.OPENAI,
    model_type=ModelType.GPT_3_5_TURBO,
    model_config_dict=assistant_model_config.__dict__,
)

# set up agent
assistant_sys_msg = BaseMessage.make_assistant_message(
    role_name="Developer",
    content=(
        "You are a programmer as well an experienced github user. "
        "When asked given a instruction, "
        "you try to use available tools, and execute it"
    ),
)

agent = ChatAgent(
    assistant_sys_msg,
    model,
    tools=tools,
)
agent.reset()

----------------------------------------

TITLE: Example GitHub Commands for Griptape Agent
DESCRIPTION: These snippets show example commands that can be given to the Griptape agent to interact with GitHub, such as starring a repository or getting the last commit.

LANGUAGE: bash
CODE:
Star composiohq/composio repository

LANGUAGE: bash
CODE:
Get last commit on composiohq/composio repository

----------------------------------------

TITLE: Installing Composio and Connecting GitHub Tool
DESCRIPTION: This snippet shows how to install the Composio-Google package and connect the GitHub tool for use with Google AI models.

LANGUAGE: bash
CODE:
pip install composio-google

# Connect your GitHub so models can interact with it

composio add github

# Check all supported apps

composio apps

----------------------------------------

TITLE: Complete JavaScript Research Agent Implementation
DESCRIPTION: Full implementation of the research agent as an Express server using OpenAI's API and Composio tools to perform research and create GitHub issues.

LANGUAGE: javascript
CODE:
import express from 'express';
import { OpenAI } from "openai";
import { OpenAIToolSet, Action } from "composio-core";
import dotenv from 'dotenv';

dotenv.config();

// Create Express app
const app = express();
const PORT = process.env.PORT || 2001;

// Set research parameters
const researchTopic = "LLM agents function calling";
const targetRepo = "composiohq/composio";
const nIssues = 3;

// Configure Express
app.use(express.json());

// Initialize the Composio toolset
const toolset = new OpenAIToolSet({
    apiKey: process.env.COMPOSIO_API_KEY,
});

// Initialize OpenAI client
const client = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

// Create endpoint to trigger the research
app.get('/research', async (req, res) => {
    try {
        // Get the necessary tools for research and GitHub interaction
        const tools = await toolset.get_actions([
            Action.SERPAPI_SEARCH,
            Action.GITHUB_USERS_GET_AUTHENTICATED,
            Action.GITHUB_ISSUES_CREATE
        ]);
        
        // Create assistant
        const assistant = await client.beta.assistants.create({
            model: "gpt-4-turbo",
            description: "Research Agent that interacts with GitHub",
            instructions: "You are a helpful assistant that researches topics and creates GitHub issues",
            tools: tools,
        });
        
        // Create the research prompt
        const prompt = `Please research about \`${researchTopic}\`, organize 
            the top ${nIssues} results as ${nIssues} issues for 
            a GitHub repository, and finally raise those issues with proper 
            title, body, implementation guidance, and references in 
            the ${targetRepo} repo, as well as relevant tags and assignees as 
            the repo owner.`;
        
        // Create a thread with the user's request
        const thread = await client.beta.threads.create({
            messages: [{
                role: "user",
                content: prompt
            }]
        });
        
        // Start the assistant run
        let run = await client.beta.threads.runs.create(thread.id, {
            assistant_id: assistant.id,
        });
        
        // Handle tool calls and wait for completion
        run = await toolset.wait_and_handle_assistant_tool_calls(client, run, thread);
        
        // Check if the run completed successfully
        if (run.status === "completed") {
            const messages = await client.beta.threads.messages.list(thread.id);
            res.json({ status: 'success', messages: messages.data });
        } else {
            res.status(500).json({ status: 'error', message: 'Run did not complete', run });
        }
    } catch (error) {
        console.error(error);
        res.status(500).json({ status: 'error', message: error.message });
    }
});

// Start the Express server
app.listen(PORT, () => {
    console.log(`Research Agent server is running on port ${PORT}`)
});

----------------------------------------

TITLE: Initializing Composio's OpenAIToolSet and OpenAI in JavaScript
DESCRIPTION: Sets up the Composio OpenAIToolSet and OpenAI client for use in JavaScript.

LANGUAGE: javascript
CODE:
import { OpenAI } from "openai";
import { OpenAIToolSet } from "composio-core";

const openai_client = new OpenAI();
const composio_toolset = new OpenAIToolSet();

----------------------------------------

TITLE: Configuring and Executing Composio Agent in TypeScript
DESCRIPTION: Add custom processors to the toolset, get tools, create the agent, and execute it with a specific task to create a Linear issue.

LANGUAGE: TypeScript
CODE:
async function main() {
  toolset.addSchemaProcessor(schemaProcessor);
  toolset.addPreProcessor(preProcessor);
  toolset.addPostProcessor(postProcessor);

  const tools = await toolset.getTools({
    actions: ["LINEAR_CREATE_LINEAR_ISSUE"]
  });

  const prompt = (await pull(
    "hwchase17/openai-functions-agent"
  )) as ChatPromptTemplate;

  const agent = await createOpenAIFunctionsAgent({
    llm,
    tools,
    prompt,
  });

  const agentExecutor = new AgentExecutor({ agent, tools, verbose: true });

  const response = await agentExecutor.invoke({ input: "Create an issue on linear to update the frontend to with new design and description 'to update the frontend with new design', estimate is 5 (L) & return the issue id" });
  console.log(response);
}

main()

----------------------------------------

TITLE: Importing Dependencies and Environment Setup
DESCRIPTION: Sets up the required imports and environment variables for the SQL Agent system. Includes core dependencies for Composio, LangChain, and OpenAI integration.

LANGUAGE: python
CODE:
import os
import dotenv
from composio_langchain import App, ComposioToolSet
from langchain import hub
from langchain.agents import AgentExecutor, create_openai_functions_agent
from langchain_openai import ChatOpenAI

# Load environment variables
dotenv.load_dotenv()

----------------------------------------

TITLE: Integrating GitHub Tools with Composio
DESCRIPTION: Configure and fetch GitHub-specific tools from Composio for repository operations.

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(
    actions=[Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER]
)

----------------------------------------

TITLE: Executing a Task via Google AI Model
DESCRIPTION: Define a task and send it as a message to the Google AI model for execution. The response from the model is then printed.

LANGUAGE: python
CODE:
# Define task
task = "Star a repo composiohq/composio on GitHub"

# Send a message to the model
response = chat.send_message(task)

print("Model response:")
print(response)

----------------------------------------

TITLE: Setting up Trading Agent and Tools
DESCRIPTION: Initializes the OpenAI LLM, Composio toolset, and creates the agent executor with necessary trading tools.

LANGUAGE: python
CODE:
llm = ChatOpenAI(model="gpt-4o")

toolset = ComposioToolSet()
tools = toolset.get_tools(apps=[
    App.COINBASE,
    App.EXA,
    App.FILETOOL
])

prompt = hub.pull("hwchase17/openai-functions-agent")
agent = create_openai_functions_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

----------------------------------------

TITLE: Executing Community Reward Agent in Python
DESCRIPTION: This code snippet runs the agent to find the most active community member, get their wallet address, and send them 1 SOL as a reward. It also sends a congratulatory message to the Slack channel.

LANGUAGE: python
CODE:
community_channel_name = input("Enter the name of the slack channel: ")
response = agent.chat(f"""Find only the most active community member this week from the slack channel {community_channel_name} and then print their slack name. The date today is {date}""")
print(response)
wallet_address = input("Enter the wallet address of the most active community member: ")
private_key = os.getenv('SOLANA_PRIVATE_KEY')
my_wallet_address = os.getenv('SOLANA_WALLET_ADDRESS')
agent.chat(f"""send 1 SOL from my wallet {my_wallet_address}, my private key is {private_key} to {wallet_address} on devnet using send sol action and then check transaction status twice/thrice after 5 seconds of the transaction using get transaction status action. After the the transaction is confirmed, send a message to the slack channel {community_channel_name} with the username of the most active community member announcing that they are the most active community member this week and congratulate them and tell them they have been rewarded with 1 SOL""")

----------------------------------------

TITLE: Initializing Language Model (LLM) for Research Assistant
DESCRIPTION: Sets up the ChatOpenAI language model using the OpenAI API key from environment variables. Raises an error if the API key is not set.

LANGUAGE: python
CODE:
dotenv.load_dotenv()
openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    raise ValueError("The OPENAI_API_KEY environment variable is not set.")
llm = ChatOpenAI(openai_api_key=openai_api_key, model_name="gpt-4o")

----------------------------------------

TITLE: Initiating Shopify Connection with Collected Parameters
DESCRIPTION: This snippet demonstrates how to initiate a connection with Shopify using the collected authentication parameters. It handles different connection statuses and provides appropriate responses.

LANGUAGE: python
CODE:
# This is the URL that the user will be redirected to after completing the authentication process
redirect_url = "https://yourwebsite.com/connection/success"
# this is only useful for oauth based flows involving redirect based authentication. 

entity_id = "Jessica"  # This is the unique identifier for the user

# Initiate the connection
connection_request = toolset.initiate_connection(
    connected_account_params=collected_params, # send collected params
    entity_id=entity_id,
    app=App.SHOPIFY,
    redirect_url=redirect_url,
)


if connection_request.connectionStatus == "INITIATED":
    print(connection_request.redirectUrl)
    # complete the connection by redirecting the user to the redirectUrl
    
elif connection_request.connectionStatus == "ACTIVE":
    print("Connection Status is active, you can now test by calling the tool.")
    # active connection means the user has completed the authentication process. 
    # the API Key entered might still be invalid, you can test by calling the tool.
else:
    print("Connection process failed, please try again.")

LANGUAGE: javascript
CODE:
const redirectUrl = "https://yourwebsite.com/connection/success"

const entityId = "Jessica" // This is the unique identifier for the user

const connectionRequest = await toolset.client.connectedAccounts.initiate({
    data: {
        ...collectedParams // send collected params
    },
    entityId: entityId,
    integrationId: expectedInputFields.integrationId, 
    redirectUri: redirectUrl,
    authMode: "OAUTH2",
    authConfig: {},
});

if (connectionRequest.connectionStatus === "INITIATED") {
    console.log(connectionRequest.redirectUrl);
    // complete the connection by redirecting the user to the redirectUrl
} else if (connectionRequest.connectionStatus === "ACTIVE") {
    console.log("Connection Status is active, you can now test by calling the tool.");
    // active connection means the user has completed the authentication process. 
    // the API Key entered might still be invalid, you can test by calling the tool.
} else {
    console.log("Connection process failed, please try again.");
}

----------------------------------------

TITLE: Integrating Ollama Open Source Models with Composio
DESCRIPTION: Example of using Ollama's open source LLMs with Composio, showing GitHub repository interaction. Includes setup for API connections and tool initialization for both Python and JavaScript implementations.

LANGUAGE: python
CODE:
import openai
from composio_openai import ComposioToolSet, App, Action

openai.base_url = "http://localhost:11434/v1"
openai.api_key = 'ollama'
toolset = ComposioToolSet(api_key="COMPOSIO_API_KEY")

messages=[{'role': 'user', 'content': 'Star the repo composiohq/composio'}]

tools = toolset.get_tools(apps=[App.GITHUB])
response = openai.chat.completions.create(
	model="llama3.1",
	messages=messages,
	tools=tools,
)

LANGUAGE: javascript
CODE:
import OpenAI from 'openai'
import { OpenAIToolSet } from "composio-core";

const toolset = new OpenAIToolSet({apiKey: COMPOSIO_API_KEY,});

const openai = new OpenAI({
  baseURL: 'http://localhost:11434/v1',
  apiKey: 'ollama', // required but unused
})
const tools = await toolset.getTools({ actions: ["GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER"] }, entity.id);
const instruction = `Star the repo composiohq/composio`

const completion = await openai.chat.completions.create({
  model: 'llama3.1',
  messages: [{ role: 'user', content: instruction }],
  tools: tools,
})

console.log(completion.choices[0].message.content)

----------------------------------------

TITLE: SQL Query Task Definition and Execution
DESCRIPTION: Defines and executes a SQL query task using the configured agent. The task retrieves data from a SQLite database and writes the output to a file.

LANGUAGE: python
CODE:
# Pull the prompt template for the agent
prompt = hub.pull("hwchase17/openai-functions-agent")

# Define the task to execute
query_task = (
    "Write sqlite query to get top 10 rows from the only table MOCK_DATA "
    "and database companydb using sqltool, write the output in a file called log.txt and return the output"
)

# Create the agent for SQL and File operations and execute the task
query_agent = create_openai_functions_agent(llm, sql_file_tool, prompt)
agent_executor = AgentExecutor(agent=query_agent, tools=sql_file_tool, verbose=True)
res = agent_executor.invoke({"input": query_task})

----------------------------------------

TITLE: Importing Libraries and Initializing Composio and LiteLLM Components
DESCRIPTION: This code imports required libraries, initializes ComposioToolSet, and creates a LiteLLM Router with Anthropic's Claude model configuration.

LANGUAGE: Python
CODE:
from composio_openai import ComposioToolSet, App
from litellm.router import Router

toolset = ComposioToolSet()

router = Router(
    model_list=[
        {
            "model_name": "anthropic/claude-3-5",
            "litellm_params": {
                "model": "claude-3-opus-20240229",
                "api_key": "<your-anthropic-api-key>",
            },
        }
    ]
)

----------------------------------------

TITLE: Advanced Tool Configuration - Python
DESCRIPTION: Advanced examples of tool configuration including multiple tools, tag filtering, and app-specific setups.

LANGUAGE: python
CODE:
# Using multiple tools
tools = composio_toolset.get_tools(
    actions=[
        Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER,
        Action.GITHUB_CREATE_REPOSITORY
    ],
    max_retries={
        Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER: 5,
        Action.GITHUB_CREATE_REPOSITORY: 2
    }
)

# Filtering tools by tags
tools = composio_toolset.get_tools(
    tags=["github", "repository"],
    default_max_retries=3
)

# Using app-specific tools
tools = composio_toolset.get_tools(
    apps=[App.GITHUB],
    max_retries={
        Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER: 5
    }
)

----------------------------------------

TITLE: Implementing Workflow Logic
DESCRIPTION: Implementation of model calling and decision functions for workflow routing

LANGUAGE: python
CODE:
def call_model(state: MessagesState):
    """
    Process messages through the LLM and return the response
    """
    messages = state["messages"]
    response = model_with_tools.invoke(messages)
    return {"messages": [response]}

LANGUAGE: typescript
CODE:
async function callModal(state) {
    const { messages } = state;
    const response = await model.invoke(messages);
    return { messages: [response] };
}

----------------------------------------

TITLE: JavaScript Implementation - Complete AI Scheduling Agent
DESCRIPTION: Full JavaScript implementation of the AI scheduling agent with similar functionality using the Composio and OpenAI integration

LANGUAGE: javascript
CODE:
import { openai } from "@ai-sdk/openai";
import { VercelAIToolSet, Composio, OpenAIToolSet } from "composio-core";
import dotenv from "dotenv";
import { generateText } from "ai";
dotenv.config();

// Setup toolset
const toolset = new VercelAIToolSet({
  apiKey: process.env.COMPOSIO_API_KEY,
});

// Subscribe to triggers and perform actions
await toolset.triggers.subscribe(async (data) => {
    console.log("trigger received", data);
    const payload = data.payload;
    const message = payload.messageText;
    const sender = payload.sender;
    const threadId = payload.threadId;
    const entity_id = 'default';
    
      // Setup entity and ensure connection
    const entity = await toolset.client.getEntity(entity_id);
    
      // Retrieve tools for the specified app
      const tools = await toolset.getTools({ apps: ["googlecalendar","gmail"] }, entity.id);
      
      // Generate text using the model and tools
      const output = await generateText({
        model: openai("gpt-4o"),
        streamText: false,
        tools: tools,
        prompt: `
                This is a message from ${sender}: ${message}
                Threadid:${threadId}
                This is the date: ${new Date().toISOString()}
                You are a scheduling agent, Read the email received and understand the content.
                After understanding the content, create a calendar event with the details.
                Then reply to the email with the calendar event details. If thread id is not provided, create a draft email.
                `, 
        maxToolRoundtrips: 5,
      });
    
      console.log("🎉Output from agent: ", output.text);

});

----------------------------------------

TITLE: Configuring CrewAI Agent and Task
DESCRIPTION: Setting up a CrewAI agent with GitHub-specific role, goal, and task configuration for starring a repository.

LANGUAGE: python
CODE:
crewai_agent = Agent(
    role="GitHub Agent",
    goal="You take action on GitHub using GitHub APIs",
    backstory="You are AI agent that is responsible for taking actions on GitHub on behalf of users using GitHub APIs",
    verbose=True,
    tools=tools,
    llm=llm,
)

task = Task(
    description="Star a repo composiohq/composio on GitHub",
    agent=crewai_agent,
    expected_output="Status of the operation"
)

crew = Crew(
    agents = [crewai_agent],
    tasks = [task]
)

----------------------------------------

TITLE: Filtering Actions by Tags
DESCRIPTION: Shows how to filter Tool actions using tags like 'users' or 'meta'. Implements filtering in Python, JavaScript, and CLI with examples of retrieving user-related and metadata actions.

LANGUAGE: python
CODE:
from composio_langchain import ComposioToolSet, App
tool_set = ComposioToolSet()

tools = tool_set.get_tools(apps=[App.GITHUB]) 

# Filter by tags
tag = "users"

action_enums = tool_set.find_actions_by_tags(
    App.GITHUB,
    tags=[tag], 
)

tools = tool_set.get_tools(actions=action_enums)

LANGUAGE: javascript
CODE:
import { OpenAIToolSet } from "composio-core";

const composio_toolset = new OpenAIToolSet();

// Filter by tags
const tag = "meta";

const actions = await composio_toolset.getTools({
  apps: ["github"],
  tags: [tag],
});

console.log(actions);

LANGUAGE: bash
CODE:
composio actions --app 'github' --tag 'code'

----------------------------------------

TITLE: Verifying Autogen Agent Response
DESCRIPTION: Example output showing the response from the Autogen agent after completing a GitHub task.

LANGUAGE: bash
CODE:
[{'content': 'I have starred the repository "composio" for you on GitHub under the account "composiohq".', 'role': 'user'}, 
{'content': '', 'role': 'assistant'}, {'content': 'TERMINATE', 'role': 'user'}]

----------------------------------------

TITLE: Querying RAG Tool in JavaScript
DESCRIPTION: This snippet defines a function to query the RAG tool based on user input. It demonstrates how to use the agent executor to formulate a query, retrieve relevant information, and return the results.

LANGUAGE: javascript
CODE:
async function queryRAG(userQuery) {
    const result = await agentExecutor.invoke({
        input: `Formulate a query based on this input: ${userQuery}. 
                Retrieve relevant information using the RAG tool and return the results.`
    });
    console.log(result.output);
    return result.output;
}

// Example usage
const userQuery = "What is the capital of France?";
const queryResult = await queryRAG(userQuery);
console.log("Query Result:", queryResult);

----------------------------------------

TITLE: Scraping Website Element with Web Scraper Tool in Python
DESCRIPTION: This code shows how to scrape a specific element from a website using the Web Scraper tool in Composio. It uses a CSS selector to target the desired element and executes the WEBTOOL_SCRAPE_WEBSITE_CONTENT action.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App, Action
toolset = ComposioToolSet()
website_link="https://app.composio.dev"
web_element = "CSS Selector for the element of your choice"
toolset.execute_action(
    action=Action.WEBTOOL_SCRAPE_WEBSITE_CONTENT,
    params={
        "website_url":website_link,
        "element_selector":web_element,
        },
)

----------------------------------------

TITLE: Complete GitHub OAuth2 Integration Configuration
DESCRIPTION: Full YAML configuration for GitHub integration including OAuth2 authentication setup with necessary endpoints and scopes.

LANGUAGE: yaml
CODE:
name: GitHub
description: Integrate GitHub to manage your repositories directly from Composio.
logo: https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png
categories: ["developer tools", "version control"]

auth_schemes:
  - name: github_oauth2
    auth_mode: OAUTH2
    authorization_url: "https://github.com/login/oauth/authorize"
    token_url: "https://github.com/login/oauth/access_token"
    default_scopes: ["repo", "admin:org"]
    token_params:
      grant_type: authorization_code
    authorization_params:
      response_type: code
    proxy:
      base_url: "{{base_url}}"
    fields:
      - name: base_url
        displayName: Base URL
        description: "The API base URL for GitHub"
        type: string
        default: https://api.github.com

----------------------------------------

TITLE: Code Interpreter Task for Data Visualization
DESCRIPTION: Creates and executes an agent for generating data visualizations from the SQL query results using the Code Interpreter tool.

LANGUAGE: python
CODE:
# Create the agent for Code Interpreter operations
code_tool = composio_toolset.get_tools(apps=[App.CODEINTERPRETER])
code_agent = create_openai_functions_agent(llm, code_tool, prompt)
agent_executor = AgentExecutor(agent=code_agent, tools=code_tool, verbose=True)

# Define the task for plotting graphs
plot_task = (
    "Using the following extracted information, plot the graph between first name and salary: "
    + res["output"]
)

# Execute the plotting task
final_res = agent_executor.invoke({"input": plot_task})

----------------------------------------

TITLE: Authenticating and Executing GitHub Action - JavaScript
DESCRIPTION: JavaScript implementation demonstrating how to configure authentication parameters and execute a GitHub star repository action using the OpenAIToolSet client. Shows how to structure the request body with authentication configuration.

LANGUAGE: javascript
CODE:
import { OpenAIToolSet } from "composio-core";

const toolset = new OpenAIToolSet();

const response = await toolset.client.actions.execute({
    actionName: "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
    requestBody: {
        appName: "github",
        authConfig: {
            parameters: [{
                name: "Authorization",
                in: "header",
                value: `Bearer gho_XL9IXXXXXX`
            }]
        },
        input: {
            "owner": "composiohq",
            "repo": "composio"
        }
    }
});

console.log(response)

----------------------------------------

TITLE: Setting up Environment and Dependencies
DESCRIPTION: Import required libraries and configure environment variables for both Python and JavaScript implementations. Includes initialization of OpenAI client and Composio toolset.

LANGUAGE: python
CODE:
import os
import dotenv
from textwrap import dedent
from composio_langchain import Action, App, ComposioToolSet
from langchain_openai import ChatOpenAI
from composio.local_tools import ragtool

dotenv.load_dotenv()

LANGUAGE: javascript
CODE:
import dotenv from 'dotenv';
import { ExecEnv, LangchainToolSet } from 'composio-core';
import { ChatOpenAI } from '@langchain/openai';
import { AgentExecutor, createOpenAIToolsAgent } from 'langchain/agents';
import { pull } from 'langchain/hub';

dotenv.config();

----------------------------------------

TITLE: Creating Endpoint and Using Composio Tools in Cloudflare Worker
DESCRIPTION: Set up a POST endpoint that uses Composio Tools to star a GitHub repository. It initializes the CloudflareToolSet, retrieves GitHub tools, and uses Cloudflare AI to process the instruction and make the API call.

LANGUAGE: javascript
CODE:
app.post('/', async (c) => {
    const toolset = new CloudflareToolSet();

    try {
        const tools = await toolset.getTools({ apps: ['github'] });
        const instruction = 'Star the repository "composiohq/composio"';    

        let messages = [
            { role: 'system', content: '' },
            { role: 'user', content: instruction },
        ];

        const config = {
            model: '@hf/nousresearch/hermes-2-pro-mistral-7b',
        };

        const toolCallResp = await c.env.AI.run(config.model, {
            messages,
            tools,
        });

        await toolset.handleToolCall(toolCallResp, entity.id);
        return c.json({ messages: "Your issue has been created" });
    } catch (err) {
        console.log(err);
        return c.text('Something went wrong', 500);
    }

    export default app;
});

----------------------------------------

TITLE: JavaScript Implementation of Gmail Trigger System
DESCRIPTION: Complete JavaScript implementation for Gmail trigger system including connection, agent creation, and trigger listener setup.

LANGUAGE: javascript
CODE:
import { OpenAIToolSet, Composio } from "composio-core";
import { OpenAI } from "openai";

const toolset = new OpenAIToolSet();
const openai_client = new OpenAI();

const connectionRequest = await toolset.client.connectedAccounts.initiate({
    appName: "gmail",
    entityId: "default",
    authMode: "OAUTH2",
    authConfig: {},
});
console.log(connectionRequest.redirectUrl);

const entity = toolset.client.getEntity("default");

const response = await entity.setupTrigger("gmail", "gmail_new_gmail_message", {
    userId: "me",
    interval: 1,
    labelIds: "INBOX"
})
console.log(response)

const agentFunction = async (threadId, subject, senderMail) => {
    const tools = await toolset.getTools({ apps: ["gmail"] });

    const response = await openai_client.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
            {
                role: "system",
                content: "You are a helpful assistant that can parse the email content, identify bank transactions and add the 'important' label to the email. Otherwise, don't do anything"
            },
            {
                role: "user",
                content: `Thread ID: ${threadId}, Subject: ${subject}, Sender: ${senderMail}`
            }
        ],
        tools: tools,
        tool_choice: "auto",
    });

    const result = await toolset.handleToolCall(response);
    console.log(result);
}

toolset.triggers.subscribe(
    (data) => {
        const {
            payload: {
                threadId,
                subject,
                sender
            }
        } = data;
        agentFunction(threadId, subject, sender);
    },
    {
        triggerName: "gmail_new_gmail_message"
    }
);

----------------------------------------

TITLE: Importing Dependencies for Code Execution Agent
DESCRIPTION: Required package imports for setting up the Code Execution Agent in both Python and JavaScript environments.

LANGUAGE: python
CODE:
import os
from composio_langchain import Action, App, ComposioToolSet
from crewai import Agent, Crew, Process, Task

LANGUAGE: javascript
CODE:
import dotenv from 'dotenv';
import { ChatOpenAI } from "@langchain/openai";
import { createOpenAIFunctionsAgent, AgentExecutor } from "langchain/agents";
import { pull } from "langchain/hub";
import { LangchainToolSet } from "composio-core";

dotenv.config();

----------------------------------------

TITLE: Initializing Composio Toolset
DESCRIPTION: Sets up the Composio toolset with API key and configures required tools for code interpretation and execution.

LANGUAGE: javascript
CODE:
const toolset = new LangchainToolSet({ 
    apiKey: process.env.COMPOSIO_API_KEY
});

const tools = await toolset.getTools({ 
    actions: ["codeinterpreter_create_sandbox", "codeinterpreter_execute_code"] 
});

----------------------------------------

TITLE: Complete Coinbase Agent Implementation
DESCRIPTION: The complete implementation of the Coinbase Wallet Manager Agent including all necessary imports, configuration, and execution.

LANGUAGE: python
CODE:
from composio_llamaindex import ComposioToolSet, App, Action
from llama_index.core.agent import FunctionCallingAgentWorker
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

toolset = ComposioToolSet(api_key="")
tools = toolset.get_tools(actions=[
    Action.COINBASE_CREATE_WALLET,
    Action.COINBASE_LIST_WALLETS,
    Action.COINBASE_GET_WALLET_INFO,
    Action.COINBASE_SEND_TOKENS,
    Action.COINBASE_CHECK_TRANSFER,
    Action.COINBASE_COINBASE_FAUCET,
    Action.FILETOOL_CREATE_FILE,
    Action.FILETOOL_WRITE
])

llm = OpenAI(model="gpt-4o")

prefix_messages = [
    ChatMessage(
        role="system",
        content=(
              "You are a coinbase agent that can execute actions on Coinbase"
        ),
    )
]

agent = FunctionCallingAgentWorker(
    tools=tools,
    llm=llm,
    prefix_messages=prefix_messages,
    max_function_calls=10,
    allow_parallel_tool_calls=False,
    verbose=True,
).as_agent()


response = agent.chat("Create a coinbase wallet, write the wallet address, seed and wallet id in a file called wallet.txt and get its balance")
print(response)

----------------------------------------

TITLE: Setting up Environment and Dependencies
DESCRIPTION: Import required libraries and configure environment variables for both Python and JavaScript implementations. Includes initialization of OpenAI client and Composio toolset.

LANGUAGE: python
CODE:
import os
import dotenv
from textwrap import dedent
from composio_langchain import Action, App, ComposioToolSet
from langchain_openai import ChatOpenAI
from composio.local_tools import ragtool

dotenv.load_dotenv()

LANGUAGE: javascript
CODE:
import dotenv from 'dotenv';
import { ExecEnv, LangchainToolSet } from 'composio-core';
import { ChatOpenAI } from '@langchain/openai';
import { AgentExecutor, createOpenAIToolsAgent } from 'langchain/agents';
import { pull } from 'langchain/hub';

dotenv.config();

----------------------------------------

TITLE: Initializing Toolset and Core Functions
DESCRIPTION: Implementation of core functions for SQL query execution and graph plotting using Composio toolset and OpenAI integration.

LANGUAGE: javascript
CODE:
const composioToolset = new ComposioToolSet();

async function executeSQLQuery(query) {
    const sqlTools = await composioToolset.getTools({ apps: ["sqltool", "filetool"] });
    const llm = new ChatOpenAI({ model: "gpt-4-turbo" });
    const prompt = await pull("hwchase17/openai-functions-agent");
    const agent = await createOpenAIFunctionsAgent({ llm, tools: sqlTools, prompt });

    const agentExecutor = new AgentExecutor({
        agent,
        tools: sqlTools,
        verbose: true,
    });

    const result = await agentExecutor.invoke({
        input: `Execute the following SQL query and write the output to a file named 'output.txt': ${query}`
    });

    console.log("Query Result:", result.output);
    return result.output;
}

async function plotGraph(data) {
    const allTools = await composioToolset.getTools({ apps: ["sqltool", "filetool", "codeinterpreter"] });
    const llm = new ChatOpenAI({ model: "gpt-4-turbo" });
    const prompt = await pull("hwchase17/openai-functions-agent");
    const codeAgent = await createOpenAIFunctionsAgent({ llm, tools: allTools, prompt });
    const codeExecutor = new AgentExecutor({
        agent: codeAgent,
        tools: allTools,
        verbose: true,
    });

    const result = await codeExecutor.invoke({
        input: `Using the following data, plot a graph: ${data}`
    });

    console.log("Graph Result:", result.output);
    return result.output;
}

----------------------------------------

TITLE: Finding Files with File Manager Tool in Python
DESCRIPTION: This code shows how to use the File Manager tool in Composio to find files. It executes the FILETOOL_FIND_FILE action with parameters for pattern matching, case sensitivity, and directory inclusion/exclusion.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App, Action
toolset = ComposioToolSet()
pattern = "file_name"

toolset.execute_action(
    action=Action.FILETOOL_FIND_FILE,
    params={
        "pattern":pattern,
        "case_sensitive":True,
        "include":["List of directories to search in"],
        "exclude":["List of directories to exclude while searching"]
        },
)

----------------------------------------

TITLE: Configuring Fly.io Environment for Distributed Execution in Python
DESCRIPTION: Set up a Fly.io environment for scalable, distributed execution of SWE agents using the ComposioToolSet and WorkspaceType.FlyIO() configuration. Requires FLY_API_TOKEN environment variable.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, WorkspaceType

toolset = ComposioToolSet(
    workspace_config=WorkspaceType.FlyIO(),
)

----------------------------------------

TITLE: Configuring Local Environment for SWE Agents in Python
DESCRIPTION: Set up a local environment for running SWE agents directly on the local machine using the ComposioToolSet and WorkspaceType.Host() configuration.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, WorkspaceType
toolset = ComposioToolSet(
    workspace_config=WorkspaceType.Host()
)

----------------------------------------

TITLE: Complete SQL Agent Implementation
DESCRIPTION: The complete implementation combining all components for SQL querying, file operations, and data visualization using Composio and LangChain.

LANGUAGE: python
CODE:
import os
import dotenv
from composio_langchain import App, ComposioToolSet
from langchain import hub
from langchain.agents import AgentExecutor, create_openai_functions_agent
from langchain_openai import ChatOpenAI

# Load environment variables
dotenv.load_dotenv()

# Initialize the LLM with the OpenAI GPT-4o model and API key
llm = ChatOpenAI(model="gpt-4o")

# Initialize the Composio ToolSet
composio_toolset = ComposioToolSet()

# Get tools for SQL and File operations
sql_file_tool = composio_toolset.get_tools(apps=[App.SQLTOOL, App.FILETOOL])

# Get tools for SQL, File, and Code Interpreter operations
tools = composio_toolset.get_tools(apps=[App.SQLTOOL, App.FILETOOL, App.CODEINTERPRETER])

# Pull the prompt template for the agent
prompt = hub.pull("hwchase17/openai-functions-agent")

# Define the task to execute
query_task = (
    "Write sqlite query to get top 10 rows from the only table MOCK_DATA "
    "and database companydb using sqltool, write the output in a file called log.txt and return the output"
)

# Create the agent for SQL and File operations and execute the task
query_agent = create_openai_functions_agent(llm, sql_file_tool, prompt)
agent_executor = AgentExecutor(agent=query_agent, tools=sql_file_tool, verbose=True)
res = agent_executor.invoke({"input": query_task})

# Create the agent for Code Interpreter operations
code_tool = composio_toolset.get_tools(apps=[App.CODEINTERPRETER])
code_agent = create_openai_functions_agent(llm, code_tool, prompt)
agent_executor = AgentExecutor(agent=code_agent, tools=code_tool, verbose=True)

# Define the task for plotting graphs
plot_task = (
    "Using the following extracted information, plot the graph between first name and salary: "
    + res["output"]
)

# Execute the plotting task
final_res = agent_executor.invoke({"input": plot_task})

# Print the final result
print(final_res)

----------------------------------------

TITLE: Using App-Level Processors in Python
DESCRIPTION: Example of how to use processors at the App-level in Python, specifying pre-processing, post-processing, and schema processing functions for an entire app.

LANGUAGE: Python
CODE:
tools = composio_toolset.get_tools(
    processors={
        "pre": {
            App.<app_name>: processor_function,
        },
        "post": {
            App.<app_name>: processor_function,
        },
        "schema": {
            App.<app_name>: processor_function,
        },
    },
    apps=[App.<app_name>]
)

----------------------------------------

TITLE: Using Composio Tools with OpenAI
DESCRIPTION: Example of using Composio tools with OpenAI's LLM to perform GitHub actions. Demonstrates tool initialization, API calls, and handling tool responses.

LANGUAGE: python
CODE:
# Import required libraries
from composio_openai import ComposioToolSet, App
from openai import OpenAI

# Initialize OpenAI and Composio clients
openai_client = OpenAI()
composio_toolset = ComposioToolSet()

# Get GitHub tools from Composio
tools = composio_toolset.get_tools(apps=[App.GITHUB])

task = "Star the repo composiohq/composio on GitHub"

# Make API call to OpenAI with the tools
response = openai_client.chat.completions.create(
    model="gpt-4o-mini",
    tools=tools,
    messages=[
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": task},
    ],
)

# Execute the tool calls
result = composio_toolset.handle_tool_calls(response)
print(result)

LANGUAGE: javascript
CODE:
// Import required libraries
import { OpenAI } from "openai";
import { OpenAIToolSet } from "composio-core";

// Initialize OpenAI and Composio clients
const openai_client = new OpenAI();
const composio_toolset = new OpenAIToolSet();

// Get GitHub tools from Composio
const tools = await composio_toolset.getTools({
  actions: ["github_star_a_repository_for_the_authenticated_user"]
});

const task = "Star the repo composiohq/composio on GitHub";

// Make API call to OpenAI with the tools
const response = await openai_client.chat.completions.create({
  model: "gpt-4o-mini",
  messages: [{ role: "user", content: task }],
  tools: tools,
  tool_choice: "auto",
});

// Execute the tool calls
const result = await composio_toolset.handleToolCall(response);
console.log(result);

----------------------------------------

TITLE: Importing Required CAMEL and Composio Packages
DESCRIPTION: Initial setup importing necessary packages from CAMEL and Composio libraries for agent functionality.

LANGUAGE: python
CODE:
from colorama import Fore
from camel.agents import ChatAgent
from camel.configs import ChatGPTConfig
from camel.messages import BaseMessage
from camel.models import ModelFactory
from camel.types import ModelPlatformType, ModelType
from camel.utils import print_text_animated
from composio_camel import ComposioToolSet, Action

----------------------------------------

TITLE: Fetching Composio Tools by Apps and Tags in Python
DESCRIPTION: Demonstrates how to retrieve Composio tools by specifying apps and tags using the ComposioToolSet in Python. This method allows for more targeted tool selection based on specific needs.

LANGUAGE: python
CODE:
from composio_openai import ComposioToolSet, Action, App
toolset = ComposioToolSet()

tools = toolset.get_tools(
    apps=[App.JIRA],
    tags=["Issues"]
)

----------------------------------------

TITLE: Creating Letta Agent with GitHub Capabilities
DESCRIPTION: Setting up a Letta agent with GitHub tools and configuration including memory blocks and model settings

LANGUAGE: python
CODE:
agent = client.agents.create(
    name="GitHub Agent",
    memory_blocks=[
        {"label": "persona", "value": "I am a helpful assistant"}
    ],
    model="openai/gpt-4o",
    embedding="openai/text-embedding-ada-002", 
    tool_ids=[tool.id]
)

LANGUAGE: javascript
CODE:
const agent = await client.agents.create({
    name: "GitHub Agent",
    memoryBlocks: [
        {
            value: "I am a helpful assistant",
            label: "persona",
        },
    ],
    model: "openai/gpt-4o",
    embedding: "openai/text-embedding-ada-002",
    toolIds: [tool.id],
});

----------------------------------------

TITLE: Initializing RAG Agent Configuration
DESCRIPTION: Define the RAG agent with its role, goals, and tools for managing the knowledge base and handling queries.

LANGUAGE: python
CODE:
rag_agent = Agent(
    role="RAG Agent",
    goal=dedent(
        """\
        Add relevant content to the RAG tool to enrich its knowledge base.
        Formulate a query to retrieve information from the RAG tool based on user input.
        After retrieval and addition of content, evaluate whether the goal given by the user input is achieved. If yes, stop execution."""
    ),
    verbose=True,
    memory=True,
    backstory=dedent(
        """\
        You are an expert in understanding user requirements, forming accurate queries,
        and enriching the knowledge base with relevant content."""
    ),
    llm=llm,
    allow_delegation=False,
    tools=tools,
)

----------------------------------------

TITLE: Setting up GitHub Tools Integration
DESCRIPTION: Code for integrating GitHub tools with Composio to enable automated GitHub operations.

LANGUAGE: python
CODE:
from composio_openai import App, ComposioToolSet

toolset = ComposioToolSet()
actions = toolset.get_tools(apps=[App.GITHUB])

----------------------------------------

TITLE: Implementing Trading Loop
DESCRIPTION: Creates an infinite loop that checks prices and executes trades between USDC and ETH at specified intervals.

LANGUAGE: python
CODE:
POLLING_INTERVAL = 60  # Poll every 60 seconds

print("Starting trading poll...")
while True:
    try:
        print(f"Executing trade at {time.strftime('%Y-%m-%d %H:%M:%S')}")
        agent_executor.invoke({
            "input": "Check the prices of USDC and ETH on Base Mainnet and perform a trade between 0.01 ETH and USDC or 0.01 USDC and ETH if the price is favorable on Base Mainnet"
        })
    except Exception as e:
        print(f"Error during trade execution: {e}")
    
    print(f"Waiting {POLLING_INTERVAL} seconds before next trade...")
    time.sleep(POLLING_INTERVAL)

----------------------------------------

TITLE: Scraping Website with Spider Tool in Python
DESCRIPTION: This snippet demonstrates how to use the Spider Crawler tool in Composio to scrape a website. It executes the SPIDERTOOL_SCRAPE action with the specified website URL.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App, Action
toolset = ComposioToolSet()
website_link="https://app.composio.dev"
toolset.execute_action(
    action=Action.SPIDERTOOL_SCRAPE,
    params={
        "website_url":website_link,
        },
)

----------------------------------------

TITLE: Defining a Code Agent with Composio Tools in Python
DESCRIPTION: This code defines a CodeAgent using the retrieved Composio tools and an HfApiModel.

LANGUAGE: python
CODE:
agent = CodeAgent(tools=tools, model=HfApiModel())

----------------------------------------

TITLE: Creating AI Agent for Code Execution
DESCRIPTION: This snippet shows how to define the AI agent that will generate and execute code in both Python and JavaScript.

LANGUAGE: python
CODE:
# Define the Python executor agent
python_executor_agent = Agent(
    role="Python Executor",
    goal="Execute Python code to solve problems",
    backstory="""You are an expert Python developer specializing in executing code to solve various problems.
    Your job is to analyze problems, write efficient Python code to solve them, and execute the code to ensure it works correctly.""",
    verbose=True,
    allow_delegation=False,
    tools=tools,
    llm=llm
)

LANGUAGE: javascript
CODE:
// Create the agent
const prompt = await pull("hwchase17/openai-functions-agent");
const agent = await createOpenAIFunctionsAgent({
    llm,
    tools,
    prompt
});

// Set up the agent executor
const agentExecutor = new AgentExecutor({
    agent,
    tools,
    verbose: true
});

----------------------------------------

TITLE: Defining Custom Output Postprocessor for Linear Action in Python
DESCRIPTION: Create a custom function to modify the output data for the LINEAR_CREATE_LINEAR_ISSUE action, extracting success status and issue_id.

LANGUAGE: Python
CODE:
def linear_post_processor(output_data: dict) -> dict:
    output_data = {
        'success': output_data['successfull'],
        'issue_id': output_data['id'],
    }
    return output_data

----------------------------------------

TITLE: Implementing Lyzr Agent with Composio for GitHub Actions
DESCRIPTION: Python implementation showcasing how to create a Lyzr agent that uses Composio to star a GitHub repository. The code demonstrates setting up OpenAI model configuration, creating a Lyzr agent, and configuring a pipeline for task execution.

LANGUAGE: python
CODE:
from  lyzr_automata  import  Task, Agent
from lyzr_automata.ai_models.openai import OpenAIModel
from lyzr_automata.tasks.task_literals import InputType, OutputType
from lyzr_automata.pipelines.linear_sync_pipeline import LinearSyncPipeline

import os
import dotenv
dotenv.load_dotenv()
from composio_lyzr import ComposioToolSet, App, Action

open_ai_text_completion_model = OpenAIModel(
    api_key=os.environ["OPENAI_API_KEY"],
    parameters={
        "model": "gpt-4-turbo-preview",
        "temperature": 0.2,
        "max_tokens": 1500,
    },
)


lyzr_agent = Agent(
        role="Github Agent",
        prompt_persona="You are AI agent that is responsible for taking actions on Github on users behalf. You need to take action on Github using Github APIs"
    )

composio_toolset = ComposioToolSet()
composio_tool = composio_toolset.get_lyzr_tool(Action.GITHUB_STAR_REPO)

task = Task(
        name="Github Starring",
        agent=lyzr_agent,
        tool=composio_tool,
        output_type=OutputType.TEXT,
        input_type=InputType.TEXT,
        model=open_ai_text_completion_model,
        instructions="Star a repo composiohq/composio on GitHub",
        log_output=True,
        enhance_prompt=False,
)

lyzr_output = LinearSyncPipeline(
    name="Composio Lyzr",
    completion_message="Task completed",
    tasks=[
        task,
    ],
).run()

print(lyzr_output)

----------------------------------------

TITLE: Executing the Code Agent to Star a GitHub Repository in Python
DESCRIPTION: This snippet demonstrates how to run the CodeAgent with a task to star a specific GitHub repository.

LANGUAGE: python
CODE:
task = "Star a repo composiohq/composio on GitHub"
agent.run(task)

----------------------------------------

TITLE: Defining Webhook Endpoint for Demo Assistant in JavaScript
DESCRIPTION: This snippet defines the webhook endpoint that handles incoming requests and interacts with the OpenAI API. It sets up the assistant, creates a thread, and processes the run to handle tool calls and messages.

LANGUAGE: javascript
CODE:
app.get('/webhook', async (req, res) => {
    try {
        const body = `Please research on Arxiv about \`${researchTopic}\`, organize 
        the top ${nIssues} results as ${nIssues} issues for 
        a GitHub repository, and finally raise those issues with proper 
        title, body, implementation guidance, and references in 
        the ${targetRepo} repo, as well as relevant tags and assignees as 
        the repo owner.`;
        
        const toolset = new OpenAIToolSet({
            apiKey: process.env.COMPOSIO_API_KEY,
        });
        const tools = await toolset.get_actions([
            Action.SERPAPI_SEARCH,
            Action.GITHUB_USERS_GET_AUTHENTICATED,
            Action.GITHUB_ISSUES_CREATE
        ]);

        const client = new OpenAI({});
        const assistant = await client.beta.assistants.create({
            model: "gpt-4-turbo",
            description: "This is a test assistant",
            instructions: "You are a helpful assistant that takes actions on user's GitHub",
            tools: tools,
        });

        const thread = await client.beta.threads.create({
            messages: [{
                role: "user",
                content: body
            }]
        });

        let run = await client.beta.threads.runs.create(thread.id, {
            assistant_id: assistant.id,
        });

        run = await toolset.wait_and_handle_assistant_tool_calls(client, run, thread);
        
        // Check if the run is completed
        if (run.status === "completed") {
            let messages = await client.beta.threads.messages.list(thread.id);
            console.log(messages.data);
            return messages.data;
        } else if (run.status === "requires_action") {
            console.log(run.status);
            return await toolset.handle_assistant_message(run);
        } else {
            console.error("Run did not complete:", run);
        }
    } catch (error) {
        console.error(error);
        res.status(500).send('Internal Server Error');
    }
});

----------------------------------------

TITLE: Connecting to GitHub Account
DESCRIPTION: Commands and code for authenticating with GitHub through Composio, requires environment variables COMPOSIO_API_KEY and OPENAI_API_KEY

LANGUAGE: shell
CODE:
composio login
composio add github

LANGUAGE: python
CODE:
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

LANGUAGE: javascript
CODE:
const connection = await toolset.connectedAccounts.initiate({appName: "github"})
console.log(`Open this URL to authenticate: ${connection.redirectUrl}`);

----------------------------------------

TITLE: Installing Dependencies for Composio and OpenAI
DESCRIPTION: Commands to install required npm packages including composio-core and openai using different package managers.

LANGUAGE: bash
CODE:
npm install composio-core openai 
yarn add composio-core openai 
pnpm add composio-core openai

----------------------------------------

TITLE: Executing Gemini Agent to Star GitHub Repository
DESCRIPTION: This code creates a Gemini chat instance with the configured tools and sends a message to star a specific GitHub repository.

LANGUAGE: python
CODE:
chat = client.chats.create(model="gemini-2.0-flash", config=config)

response = chat.send_message(
    "Can you star composiohq/composio repository on github",
)

print(response.text)

----------------------------------------

TITLE: Creating Integration with OAuth Configuration
DESCRIPTION: Code to create a new integration with either Composio's default OAuth flow or custom OAuth credentials

LANGUAGE: python
CODE:
# Using Composio's default OAuth flow
integration = entity.client.integrations.create(
    name="GITHUB_Integration_Demo", 
    app_id="01e22f33-dc3f-46ae-b58d-050e4d2d1909", 
    auth_mode="OAUTH2", 
    use_composio_auth=True
)

# Using your own OAuth flow
integration = entity.client.integrations.create(
    name="GITHUB_Integration_Demo", 
    app_id="01e22f33-dc3f-46ae-b58d-050e4d2d1909", 
    auth_mode="OAUTH2", 
    use_composio_auth=False,
    auth_config={
        "client_id": "",
        "client_secret": ""
    }
)

LANGUAGE: javascript
CODE:
// Using Composio's default OAuth flow
const integration = await entity.integrations.create({
    name: "GITHUB_Integration_Demo",
    appId: "01e22f33-dc3f-46ae-b58d-050e4d2d1909",
    authScheme: "OAUTH2",
    useComposioAuth: true,
});

// Using your own OAuth flow
const integration = await entity.integrations.create({
    name: "GITHUB_Integration_Demo",
    appId: "01e22f33-dc3f-46ae-b58d-050e4d2d1909",
    authScheme: "OAUTH2",
    useComposioAuth: false,
    authConfig: {
        client_id: "",
        client_secret: ""
    }
});

----------------------------------------

TITLE: Configuring LlamaIndex Agent for GitHub Repository Starring
DESCRIPTION: This snippet sets up a LlamaIndex agent with the necessary tools and configuration to perform tasks like starring a GitHub repository.

LANGUAGE: python
CODE:
prefix_messages = [
    ChatMessage(
        role="system",
        content=(
            "You are now a integration agent, and what  ever you are requested, you will try to execute utilizing your toools."
        ),
    )
]

agent = FunctionCallingAgentWorker(
    tools=tools,
    llm=llm,
    prefix_messages=prefix_messages,
    max_function_calls=10,
    allow_parallel_tool_calls=False,
    verbose=True,
).as_agent()

----------------------------------------

TITLE: Python Market Research Agent Implementation
DESCRIPTION: Complete implementation of the market research agent using Python, LlamaIndex, and Composio tools

LANGUAGE: python
CODE:
from composio_llamaindex import ComposioToolSet, App, Action
from llama_index.core.agent import FunctionCallingAgentWorker
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI
from llama_index.llms.cerebras import Cerebras
from llama_index.llms.groq import Groq
from dotenv import load_dotenv
from pathlib import Path
import os

load_dotenv()
llm = OpenAI(model='gpt-4o')
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps = [App.TAVILY, App.GOOGLEDOCS])

prefix_messages = [
    ChatMessage(
        role="system",
        content=(
        f"""
        You are a market research agent that finds niche ideas that can be built and marketed. 
        Your users are primarily indie hackers who want to build something new and are looking for ideas. The input will 
        be a domain or a category and your job is to research extensively and find ideas that can be marketed.
        Write this content in a google doc, create a google doc before writing in it.
        I want you to show the following content:
        - Data Collection and Aggregation - Show data supporting a trend
        - Sentiment Analysis - Show customer sentiment on the topic
        - Trend Forecasting
        - Competitor Analysis
        - Competitor Benchmarking
        - Idea Validation
        """
        )
    )
]

agent = FunctionCallingAgentWorker(
    tools=tools,  
    llm=llm,  
    prefix_messages=prefix_messages,  
    max_function_calls=10,  
    allow_parallel_tool_calls=False,  
    verbose=True,  
).as_agent()

a = input('Enter the domain or category you want to research about:')
task = f"""
The domain or category you want to research about is {a}. Use all the tools available to you to find and gather more insights on customers and market.
"""
response = agent.chat(task)
print(response)

----------------------------------------

TITLE: Executing Newsletter Summarization Process in Python
DESCRIPTION: This snippet creates a Crew with the defined agents and tasks, and initiates the newsletter summarization process. It executes the tasks sequentially and prints the final result.

LANGUAGE: python
CODE:
crew = Crew(
    agents=[email_fetcher_agent, summarizer_agent, email_sender_agent],
    tasks=[fetch_emails_task, summarize_emails_task, send_summary_task],
    process=Process.sequential,
)

result = crew.kickoff()
print("Newsletter Summary Process Completed:")
print(result)

----------------------------------------

TITLE: Implementing Query Functionality
DESCRIPTION: Define and execute queries against the RAG tool to retrieve information based on user input.

LANGUAGE: python
CODE:
query_task = Task(
    description=dedent(
        f"""\Formulate a query based on this input: {user_query}.
        Retrieve relevant information using the RAG tool and return the results."""
    ),
    expected_output="Results of the RAG tool query were returned. Stop once the goal is achieved.",
    tools=tools,
    agent=rag_agent,
    allow_delegation=False,
)

LANGUAGE: javascript
CODE:
async function queryRAG(userQuery) {
    const result = await agentExecutor.invoke({
        input: `Formulate a query based on this input: ${userQuery}. 
                Retrieve relevant information using the RAG tool and return the results.`
    });
    console.log(result.output);
    return result.output;
}

----------------------------------------

TITLE: OpenAPI Delete Trigger Instance Endpoint
DESCRIPTION: OpenAPI/Swagger specification for the DELETE endpoint to remove a trigger instance. The endpoint takes a trigger instance ID as a path parameter.

LANGUAGE: yaml
CODE:
openapi: delete /api/v1/triggers/instance/{triggerInstanceId}

----------------------------------------

TITLE: Executing Tool Calls with Composio
DESCRIPTION: This snippet shows how to handle and execute the tool calls generated by the LiteLLM Router using Composio's toolset.

LANGUAGE: Python
CODE:
result = toolset.handle_tool_calls(response=response)
print(result)

----------------------------------------

TITLE: Webhook Implementation for OpenAI Integration
DESCRIPTION: Implements a webhook endpoint that handles requests, interacts with OpenAI API, and manages GitHub issue creation through assistant tool calls.

LANGUAGE: javascript
CODE:
app.get('/webhook', async (req, res) => {
    try {
        const body = `Please research on Arxiv about \`${researchTopic}\`, organize
        the top ${nIssues} results as ${nIssues} issues for
        a GitHub repository, and finally raise those issues with proper
        title, body, implementation guidance, and references in
        the ${targetRepo} repo, as well as relevant tags and assignees as
        the repo owner.`;

        const toolset = new OpenAIToolSet({
            apiKey: process.env.COMPOSIO_API_KEY,
        });
        const tools = await toolset.get_actions([
            Action.SERPAPI_SEARCH,
            Action.GITHUB_USERS_GET_AUTHENTICATED,
            Action.GITHUB_ISSUES_CREATE
        ]);
        const client = new OpenAI({});
        const assistant = await client.beta.assistants.create({
            model: "gpt-4-turbo",
            description: "This is a test assistant",
            instructions: "You are a helpful assistant that takes actions on user's GitHub",
            tools: tools,
        });
        const thread = await client.beta.threads.create({
            messages: [{
                role: "user",
                content: body
            }]
        });
        let run = await client.beta.threads.runs.create(thread.id, {
            assistant_id: assistant.id,
        });
        run = await toolset.wait_and_handle_assistant_tool_calls(client, run, thread);

        if (run.status === "completed") {
            let messages = await client.beta.threads.messages.list(thread.id);
            console.log(messages.data);
            return messages.data;
        } else if (run.status === "requires_action") {
            console.log(run.status);
            return await toolset.handle_assistant_message(run);
        } else {
            console.error("Run did not complete:", run);
        }
    } catch (error) {
        console.error(error);
        res.status(500).send('Internal Server Error');
    }
});

----------------------------------------

TITLE: Installing Required Packages for Composio and CrewAI Integration
DESCRIPTION: This snippet shows how to install the necessary Python packages for integrating Composio with CrewAI and using OpenAI's language model.

LANGUAGE: bash
CODE:
pip install composio_crewai crewai langchain_openai

----------------------------------------

TITLE: Importing Required Libraries for Lead Generator Agent
DESCRIPTION: Imports necessary Python packages including Gradio for UI, Composio for tools, LlamaIndex for agent functionality, and OpenAI for LLM integration.

LANGUAGE: python
CODE:
import gradio as gr
from composio_llamaindex import ComposioToolSet, App, Action
from llama_index.core.agent import FunctionCallingAgentWorker
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI
from dotenv import load_dotenv

----------------------------------------

TITLE: Defining POST Endpoint for Connected Accounts in OpenAPI
DESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /api/v1/connectedAccounts endpoint. It outlines the request body structure and expected response format for creating connected accounts.

LANGUAGE: yaml
CODE:
openapi: post /api/v1/connectedAccounts

----------------------------------------

TITLE: Defining CrewAI Agent, Task, and Crew for GitHub Interaction
DESCRIPTION: This snippet sets up a CrewAI agent, task, and crew for interacting with GitHub. The agent is configured to use GitHub APIs, and the task is set to star a specific repository.

LANGUAGE: python
CODE:
crewai_agent = Agent(
    role="GitHub Agent",
    goal="You take action on GitHub using GitHub APIs",
    backstory="You are AI agent that is responsible for taking actions on GitHub on behalf of users using GitHub APIs",
    verbose=True,
    tools=tools,
    llm=llm,
)

task = Task(
    description="Star a repo composiohq/composio on GitHub",
    agent=crewai_agent,
    expected_output="Status of the operation"
)

crew = Crew(
    agents = [crewai_agent],
    tasks = [task]
)

----------------------------------------

TITLE: Listing All Apps in Composio using Python
DESCRIPTION: This code snippet shows how to list all available tools (apps) in Composio using the Python SDK.

LANGUAGE: python
CODE:
from composio import ComposioToolSet

toolset = ComposioToolSet()
print(toolset.get_apps())

----------------------------------------

TITLE: Defining Assistant and Registering Tools
DESCRIPTION: Python code to define an Autogen AssistantAgent and UserProxyAgent, and register GitHub tools with Composio toolset.

LANGUAGE: python
CODE:
chatbot = AssistantAgent(
    "chatbot",
    system_message="Reply TERMINATE when the task is done or when user's content is empty",
    llm_config=llm_config,
)

user_proxy = UserProxyAgent(
    name="User",
    is_termination_msg=lambda x: x.get("content", "")
    and "TERMINATE" in x.get("content", ""),
    human_input_mode="NEVER",
    code_execution_config={"use_docker": False},
)

toolset.register_tools(apps=[App.GITHUB], caller=chatbot, executor=user_proxy)

----------------------------------------

TITLE: Getting Image Analyser Action from Composio in Python
DESCRIPTION: This code snippet demonstrates how to retrieve the Image Analyser action tool from the ComposioToolSet.

LANGUAGE: python
CODE:
tools = composio_toolset.get_tools(
    actions=[Action.IMAGE_ANALYSER_ANALYSE],
)

----------------------------------------

TITLE: Creating Integration with Custom OAuth Credentials
DESCRIPTION: Shows how to create an integration using custom OAuth credentials, including client ID, secret, and redirect URI configuration.

LANGUAGE: python
CODE:
from composio_openai import ComposioToolSet, App, Action

toolset = ComposioToolSet()
toolset.create_integration(
    app=App.GITHUB,
    auth_mode="OAUTH2",
    force_new_integration=True,
    use_composio_oauth_app=False,
    auth_config={
        "client_id": "1234567890",
        "client_secret": "1234567890",
        "redirect_uri": "https://backend.yourapp.com/handle-redirect-uri/",
        "scopes": ["repo", "user"],
    },
)

LANGUAGE: typescript
CODE:
import { Composio } from "composio-core";

const composioClient = new Composio({});
const integration = await composioClient.integrations.create({
    appUniqueKey: "github",
    name: "github-self",
    authScheme: "OAUTH2",
    forceNewIntegration: true,
    useComposioAuth: false,
    authConfig: {
        clientId: "1234567890",
        clientSecret: "1234567890",
        redirectUri: "https://backend.yourapp.com/handle-redirect-uri/",
        scopes: ["repo", "user"],
    },
});

----------------------------------------

TITLE: Creating and Executing Langchain Agent
DESCRIPTION: Sets up a Langchain agent with OpenAI integration for creating GitHub issues. Includes tool configuration, agent creation, and execution logic.

LANGUAGE: typescript
CODE:
async function executeAgent (entityName){
        // Create entity and get tools
        const entity = toolset.client.getEntity(entityName)
        await setupUserConnectionIfNotExists(entity.id);
        const tools = await toolset.getTools({ actions: ["github_issues_create"] },entity.id);

        // Create an agent
        const prompt = await pull("hwchase17/openai-functions-agent");
        const llm = new ChatOpenAI({
            model: "gpt-4o",
            apiKey: process.env.OPEN_AI_API_KEY
        });
  
        const agent = await createOpenAIFunctionsAgent({
            llm,
            tools: tools,
            prompt,
        });
        const agentExecutor = new AgentExecutor({agent,tools,verbose: true,});

        // Invoke the agent
        const body = "TITLE: HELLO WORLD, DESCRIPTION: HELLO WORLD for the repo - himanshu-dixit/custom-repo-breaking"
        const result = await agentExecutor.invoke({
            input: "Please create another github issue with the summary and description with the following details of another issue:- , " + JSON.stringify(body)
        });

        console.log(result.output)
}

----------------------------------------

TITLE: Creating Endpoint and Handling GitHub Tool Calls in JavaScript
DESCRIPTION: Sets up a POST endpoint that retrieves GitHub tools, processes an instruction to star a repository, and handles the tool call using Cloudflare Worker AI.

LANGUAGE: javascript
CODE:
app.post('/', async (c) => {
    const toolset = new CloudflareToolSet();

    try {
        const tools = await toolset.getTools({ apps: ['github'] });
        const instruction = 'Star the repository "composiohq/composio"';    

        let messages = [
            { role: 'system', content: '' },
            { role: 'user', content: instruction },
        ];

        const config = {
            model: '@hf/nousresearch/hermes-2-pro-mistral-7b',
        };

        const toolCallResp = await c.env.AI.run(config.model, {
            messages,
            tools,
        });

        await toolset.handleToolCall(toolCallResp, entity.id);
        return c.json({ messages: "Your issue has been created" });
    } catch (err) {
        console.log(err);
        return c.text('Something went wrong', 500);
    }

    export default app;
});

----------------------------------------

TITLE: Executing GitHub Tasks with OpenAI Assistant and Composio
DESCRIPTION: Execute GitHub tasks using the created OpenAI Assistant and Composio tools, with options for streaming and non-streaming responses in Python and JavaScript.

LANGUAGE: python
CODE:
print(response_after_tool_calls)

LANGUAGE: javascript
CODE:
//With Streaming
async function executeAssistantTask(openai, toolset, assistant, task) {
    const thread = await openai.beta.threads.create();
    const run = await openai.beta.threads.runs.create(thread.id, {
        assistant_id: assistant.id,
        instructions: task,
        tools: tools,
        model: "gpt-4o-mini",
        stream: true
    });

    for await (const result of toolset.waitAndHandleAssistantStreamToolCalls(openai, run, thread)) {
        console.log(result);
    }
}

// Without Streaming
async function executeAssistantTask(openai, toolset, assistant, task) {
    const thread = await openai.beta.threads.create();
    const run = await openai.beta.threads.runs.create(thread.id, {
        assistant_id: assistant.id,
        instructions: task,
        tools: tools,
        model: "gpt-4o-mini",
        stream: false
    });
    const call = await toolset.waitAndHandleAssistantToolCalls(openai, run, thread);
    console.log(call);
}

(async() => {
    const githubAssistant = await createGithubAssistant(openai, tools);
    await executeAssistantTask(
        openai, 
        toolset, 
        githubAssistant, 
        "Star the repository 'composiohq/composio'"
    );
})();

----------------------------------------

TITLE: Configuring LiteLLM Router for GitHub Repository Interaction
DESCRIPTION: This code configures the LiteLLM Router to generate a completion for starring a GitHub repository using the Anthropic Claude model.

LANGUAGE: Python
CODE:
response = router.completion(
    model="anthropic/claude-3-5",
    messages=[
        {"role": "user", "content": "Star the repository composiohq/composio on github"},
    ],
    tools=tools,
    tool_choice="auto",
)

----------------------------------------

TITLE: Importing Libraries and Initializing ComposioToolSet in Python
DESCRIPTION: This code imports necessary libraries from composio_smol and smolagents, loads environment variables, and initializes the ComposioToolSet.

LANGUAGE: python
CODE:
from composio_smol import ComposioToolSet, Action, App
from smolagents import CodeAgent, HfApiModel
from dotenv import load_dotenv

load_dotenv()

composio_toolset = ComposioToolSet()

----------------------------------------

TITLE: Sample Output of Action Schema
DESCRIPTION: Example output showing the schema for the 'github_star_a_repository_for_the_authenticated_user' action, including required parameters and their descriptions.

LANGUAGE: json
CODE:
{
  "owner": {
    "description": "The account owner of the repository. The name is not case sensitive. Please provide a value of type string. This parameter is required.",
    "title": "Owner",
    "type": "string"
  },
  "repo": {
    "description": "The name of the repository without the `.git` extension. The name is not case sensitive. Please provide a value of type string. This parameter is required.",
    "title": "Repo",
    "type": "string"
  }
}

----------------------------------------

TITLE: Importing Base Packages for Calendar Agent
DESCRIPTION: This code snippet imports the essential libraries required for the Calendar Agent project, including datetime handling, CrewAI components, and OpenAI integration.

LANGUAGE: python
CODE:
import os
from datetime import datetime

from composio_crewai import App, ComposioToolSet
from crewai import Agent, Task, Crew
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

----------------------------------------

TITLE: Retrieving GitHub Tools from Composio
DESCRIPTION: This snippet demonstrates how to get all GitHub tools available through Composio.

LANGUAGE: Python
CODE:
tools = toolset.get_tools(apps=[App.GITHUB])

----------------------------------------

TITLE: Installing Required Packages for Calendar Agent
DESCRIPTION: This snippet shows how to install the necessary Python packages for the Calendar Agent project using pip. It also mentions the need to create a .env file for storing the OpenAI API key.

LANGUAGE: python
CODE:
pip install composio-crewai langchain-openai

----------------------------------------

TITLE: Executing News Retrieval and Summarization
DESCRIPTION: Running the agent to fetch and summarize AI news articles using SERP API

LANGUAGE: python
CODE:
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True, handle_parsing_errors=True)
agent_executor.return_intermediate_steps = True
res = agent_executor.invoke(
    {
        "input": "Use SERP to find the latest AI news, take only description of article."
    }
)
res2 = agent_executor.invoke({
    "input": res['output']+' Summarize this'
})

----------------------------------------

TITLE: CLI Trigger Management
DESCRIPTION: Commands for viewing, enabling, and disabling triggers using Composio CLI

LANGUAGE: bash
CODE:
composio triggers show GITHUB_STAR_ADDED_EVENT
composio triggers enable GITHUB_STAR_ADDED_EVENT
composio triggers disable 818bd52e-c5...

----------------------------------------

TITLE: Retrieving GitHub Tools
DESCRIPTION: Code to fetch available GitHub tools from Composio

LANGUAGE: python
CODE:
tools = toolset.get_tools(apps=[App.GITHUB])

----------------------------------------

TITLE: Setting Up Todo List for Calendar Agent (JavaScript)
DESCRIPTION: This code defines the todo list that will be converted into calendar events. It includes a task with a specified time slot and description.

LANGUAGE: javascript
CODE:
// Setup Todo
const todo = `
    1PM - 3PM -> Code solo
    5PM - 7PM -> Meeting,
    9AM - 12AM -> Learn something,
    8PM - 10PM -> Game
`;

----------------------------------------

TITLE: Importing Libraries and Configuring Letta Client
DESCRIPTION: This code demonstrates how to import the necessary libraries and set up the Letta client for both Python and JavaScript. It initializes the client with a base URL for the Letta server.

LANGUAGE: python
CODE:
from letta_client import Letta
from composio_langchain import Action, ComposioToolSet, App

client = Letta(base_url="http://localhost:8283")

LANGUAGE: javascript
CODE:
import { LettaClient } from '@letta-ai/letta-client'
import { ComposioToolSet } from "composio-core"

const client = new LettaClient({
    baseUrl: "http://localhost:8283",
});

const toolset = new ComposioToolSet()

----------------------------------------

TITLE: Filtering App Actions by Tags for Google AI Model
DESCRIPTION: This code shows how to filter actions for a specific app (Asana) using tags, allowing fine-grained control over the AI model's capabilities.

LANGUAGE: python
CODE:
actions = composio_toolset.get_tool(apps=[App.ASANA], tags=[Tag.ASANA_TASKS])

----------------------------------------

TITLE: Executing Tool Calls for GitHub Actions using Composio
DESCRIPTION: This snippet shows how to handle and execute tool calls generated by the LiteLLM Router using Composio's toolset.

LANGUAGE: Python
CODE:
result = toolset.handle_tool_calls(response=response)
print(result)

----------------------------------------

TITLE: Importing Libraries and Initializing ComposioToolSet
DESCRIPTION: This code snippet imports the required libraries and initializes the VercelAIToolSet. It sets up the necessary components for using Composio with Vercel AI SDK, including OpenAI integration and the Composio tool set.

LANGUAGE: JavaScript
CODE:
import { openai } from "@ai-sdk/openai";
import { VercelAIToolSet } from "composio-core";
import { generateText } from "ai";

const toolset = new VercelAIToolSet();

----------------------------------------

TITLE: Installing Express for JavaScript Webhook
DESCRIPTION: Command to install Express and body-parser packages required for implementing webhook receiver in JavaScript

LANGUAGE: bash
CODE:
npm install express body-parser

----------------------------------------

TITLE: Importing Libraries and Initializing Hono in Cloudflare Worker
DESCRIPTION: Import required libraries (Hono and CloudflareToolSet) and initialize a Hono app instance for the Cloudflare Worker.

LANGUAGE: javascript
CODE:
import { Hono } from 'hono';
import { CloudflareToolSet } from "composio-core"

const app = new Hono();

----------------------------------------

TITLE: Fetching Connection Parameters in Python and JavaScript
DESCRIPTION: This snippet demonstrates how to fetch and use connection parameters locally to build custom actions. It shows how to retrieve auth parameters and raw connection parameters in both Python and JavaScript.

LANGUAGE: python
CODE:
connected_account = toolset.get_connected_account(connection_request.connectedAccountId)

# Get the parameters for your local usage
print(toolset.get_auth_params(connection_id=connected_account.id))

#print(connected_account.connectionParams) # use this for raw/advanced cases

LANGUAGE: javascript
CODE:
const connectedAccount = await toolset.client.connectedAccounts.get({
    connectedAccountId: connectionRequest.connectedAccountId
})

const connectedAccountAuthParams = await toolset.getAuthParams({
    connectedAccountId: connectedAccount.connectedAccountId
})

console.log("Connected account auth params", connectedAccountAuthParams)

//console.log("Connected account raw auth params", connectedAccount.connectionParams)

----------------------------------------

TITLE: FastAPI Initial Setup
DESCRIPTION: Initialize FastAPI application and import required dependencies.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from pydantic import BaseModel
from composio_openai import ComposioToolSet, App
from openai import OpenAI

# Initialize FastAPI app
app = FastAPI()

----------------------------------------

TITLE: Initializing Libraries and ToolSet
DESCRIPTION: Import required libraries and initialize the Vercel AI ToolSet for Composio integration

LANGUAGE: javascript
CODE:
import { openai } from "@ai-sdk/openai";
import { VercelAIToolSet } from "composio-core";
import { generateText } from "ai";

const toolset = new VercelAIToolSet();

----------------------------------------

TITLE: Enabling Triggers in Python
DESCRIPTION: Enable and disable triggers using Python code with Composio.

LANGUAGE: python
CODE:
from composio import Composio, Action

client = Composio()
entity = client.get_entity(id="default")

# config is optional, it can be used to pass additional parameters for the trigger
entity.enable_trigger(app=App.GMAIL, trigger_name="gmail_new_gmail_message", config={}) # Enable trigger

# entity.disable_trigger("gmail_new_gmail_message") # Disable trigger via ID

----------------------------------------

TITLE: Defining LlamaIndex Agent for GitHub Interaction
DESCRIPTION: This snippet shows how to define a LlamaIndex agent for GitHub interaction. It sets up the agent with specific tools, LLM, and system message to perform actions on GitHub.

LANGUAGE: python
CODE:
prefix_messages = [
    ChatMessage(
        role="system",
        content=(
            "You are a Github Agent, and you can use tools to perform actions on Github."
        ),
    )
]

agent = FunctionCallingAgentWorker(
    tools=tools,
    llm=llm,
    prefix_messages=prefix_messages,
    max_function_calls=10,
    allow_parallel_tool_calls=False,
    verbose=True,
).as_agent()

LANGUAGE: typescript
CODE:
coming soon

----------------------------------------

TITLE: Initializing Environment and Client for Composio-Griptape Integration
DESCRIPTION: This code snippet demonstrates how to set up the development environment by importing necessary libraries and initializing the Griptape client for use with Composio.

LANGUAGE: python
CODE:
from griptape.structures import Agent
from griptape.utils import Chat

from composio_griptape import App, Action, Tag, ComposioToolSet
import dotenv


dotenv.load_dotenv("/Users/sawradip/Desktop/practice_code/practice_composio/composio_sdk/examples/.env")

----------------------------------------

TITLE: Executing a Task via Google AI Model
DESCRIPTION: This code shows how to define a task and send it to the Google AI model for execution.

LANGUAGE: python
CODE:
# Define task
task = "Star a repo composiohq/composio on GitHub"

# Send a message to the model
response = chat.send_message(task)

print("Model response:")
print(response)

----------------------------------------

TITLE: Installing Required Packages for Composio-LlamaIndex Integration
DESCRIPTION: Installation commands for the required Python packages to use Composio with LlamaIndex

LANGUAGE: bash
CODE:
pip install composio-llamaindex llama-index

----------------------------------------

TITLE: Setting up Function Calling Worker for Github Contributor Reward Agent
DESCRIPTION: This snippet sets up a FunctionCallingAgentWorker with the initialized tools and language model. It defines the agent's role and capabilities through prefix messages.

LANGUAGE: python
CODE:
prefix_messages = [
    ChatMessage(
        role="system",
        content=(
              "You are a solana agent that can execute actions with Solana Kit"
              "You have access to Github and can list repository contributors"
        ),
    )
]

agent = FunctionCallingAgentWorker(
    tools=tools,
    llm=llm,
    prefix_messages=prefix_messages,
    max_function_calls=10,
    allow_parallel_tool_calls=False,
    verbose=True,
).as_agent()

----------------------------------------

TITLE: Installing and Setting up Composio for LangChain
DESCRIPTION: Installation commands for the Composio LangChain package and initial setup steps for GitHub integration

LANGUAGE: bash
CODE:
# Install Composio LangChain package
pip install composio-langchain

# Connect your GitHub account
composio-cli add github

# View available applications you can connect with
composio-cli show-apps

----------------------------------------

TITLE: Defining the AI Agent for Repository Starring
DESCRIPTION: This code defines an AI agent using Vercel AI SDK and OpenAI's GPT-4 model. It sets up the agent with the retrieved GitHub tools and a prompt to star a specific repository. The maxToolRoundtrips parameter limits the number of tool interactions.

LANGUAGE: JavaScript
CODE:
const output = await generateText({
    model: openai("gpt-4o-mini"),
    streamText: false,
    tools,
    prompt: 'Star the repository "composiohq/composio"',
    maxToolRoundtrips: 5,
});

----------------------------------------

TITLE: Defining Agents for Newsletter Processing in Python
DESCRIPTION: This snippet defines three agents: Email Fetcher, Summarizer, and Email Sender. Each agent is configured with specific roles, goals, and tools for handling different aspects of newsletter processing.

LANGUAGE: python
CODE:
email_fetcher_agent = Agent(
    role="Email Fetcher Agent",
    goal="Fetch recent newsletter emails from the inbox. Please look for labels 'newsletter' only for the last 7 days.",
    verbose=True,
    memory=True,
    backstory=f"You are an expert in retrieving and organizing email content. Today's date is {datetime.now().strftime('%B %d, %Y')}.",
    llm=llm,
    allow_delegation=False,
    tools=gmail_tools,
)

summarizer_agent = Agent(
    role="Summarizer Agent",
    goal="Summarize the content of newsletter emails, highlighting key information and trends.",
    verbose=True,
    memory=True,
    backstory=f"You are an expert in analyzing and summarizing complex information. Today's date is {datetime.now().strftime('%B %d, %Y')}.",
    llm=llm,
    allow_delegation=False,
    tools=[],
)

email_sender_agent = Agent(
    role="Email Sender Agent",
    goal="Send the summarized newsletter content via email to investtradegame@gmail.com.",
    verbose=True,
    memory=True,
    backstory=f"You are an expert in composing and sending emails. Today's date is {datetime.now().strftime('%B %d, %Y')}.",
    llm=llm,
    allow_delegation=False,
    tools=gmail_tools,
)

----------------------------------------

TITLE: Proxy Configuration with Authentication in YAML
DESCRIPTION: Complete proxy configuration example including base URL, headers, and query parameters with template variables

LANGUAGE: yaml
CODE:
proxy:
  base_url: "https://api.example.com/v1"
  headers:
    Authorization: "Bearer {{access_token}}"
    Content-Type: "application/json"
  query_params:
    api_key: "{{api_key}}"

----------------------------------------

TITLE: Initializing ChatOpenAI and Composio Toolset in Python
DESCRIPTION: Set up the ChatOpenAI model and initialize the Composio toolset client for use in the Python environment.

LANGUAGE: Python
CODE:
prompt = hub.pull("hwchase17/openai-functions-agent")

llm = ChatOpenAI()
composio_toolset = ComposioToolSet()

----------------------------------------

TITLE: Defining OpenAPI Endpoint for Action Execution in YAML
DESCRIPTION: This YAML snippet defines an OpenAPI specification for a POST endpoint to execute an action. It includes the path parameter 'actionId' to identify the specific action to be executed.

LANGUAGE: yaml
CODE:
openapi: post /api/v2/actions/{actionId}/execute/get.inputs

----------------------------------------

TITLE: Installing Required Packages
DESCRIPTION: Installation commands for required packages in Python and JavaScript environments

LANGUAGE: bash
CODE:
pip install composio-openai openai

LANGUAGE: javascript
CODE:
npm i composio-core openai

----------------------------------------

TITLE: Basic Auth Configuration in YAML
DESCRIPTION: Configuration example for Basic Authentication including username and password in proxy headers

LANGUAGE: yaml
CODE:
proxy:
  headers:
    username: "{{username}}"
    password: "{{password}}"

----------------------------------------

TITLE: Customizing Workspace Environment Variables in Python and JavaScript
DESCRIPTION: Demonstrates how to add custom environment variables to a Docker workspace configuration in both Python and JavaScript.

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet(
    workspace_config=WorkspaceType.Docker(
        environment={
            "SOME_API_TOKEN": "<SOME_API_TOKEN>",
        }
    )
)

LANGUAGE: javascript
CODE:
composio_toolset = new OpenAIToolset({
    workspaceConfig: WorkspaceType.Docker({
        environment: {
            "SOME_API_TOKEN": "<SOME_API_TOKEN>",
        }
    })
})

----------------------------------------

TITLE: Executing Tool Calls in Python
DESCRIPTION: Handles the execution of tool calls based on the LLM response.

LANGUAGE: python
CODE:
result = composio_toolset.handle_tool_calls(response)
print(result)

----------------------------------------

TITLE: Listing Composio Applications
DESCRIPTION: Demonstrates how to retrieve a list of all available applications/tools in Composio using different programming interfaces. Shows implementation across Python, JavaScript, and CLI.

LANGUAGE: python
CODE:
from composio import ComposioToolSet

toolset = ComposioToolSet()
print(toolset.get_apps())

LANGUAGE: javascript
CODE:
import { Composio } from "composio-core";

const composio = new Composio();
console.log(await composio.apps.list());

LANGUAGE: bash
CODE:
composio apps

----------------------------------------

TITLE: Installing Packages and Connecting GitHub Tool with Composio
DESCRIPTION: This snippet shows how to install the necessary packages (lyzr-automata and composio_lyzr) and connect GitHub as a tool for Composio. It also demonstrates how to list all available apps that can be connected.

LANGUAGE: bash
CODE:
pip install lyzr-automata -q
pip install composio_lyzr
#Connect your Github so agents can use it. 
composio add github
#Check all different apps which you can connect with
composio apps

----------------------------------------

TITLE: Getting Specific Actions by ID in Python/JavaScript
DESCRIPTION: Demonstrates how to retrieve specific tool actions using their action IDs. Shows implementation in both Python using ComposioToolSet and JavaScript using LangchainToolSet.

LANGUAGE: python
CODE:
from composio_langchain import ComposioToolSet, Action

toolset = ComposioToolSet()

# can pass multiple actions
tools = toolset.get_tools(
    actions=[Action.GITHUB_CREATE_AN_ISSUE]
)

LANGUAGE: javascript
CODE:
import { LangchainToolSet } from "composio-core";

const toolset = new LangchainToolSet();

// can pass multiple actions
const tools = await toolset.getTools({actions: ['github_issues_create','github_commit_event']});

----------------------------------------

TITLE: Setting up OpenAI Model and Agent
DESCRIPTION: Initializes the ChatGPT model and creates an OpenAI Functions Agent with the specified prompt and tools.

LANGUAGE: javascript
CODE:
const llm = new ChatOpenAI({ 
    model: "gpt-4o",
    apiKey: process.env.OPEN_AI_API_KEY
});

const prompt = await pull("hwchase17/openai-functions-agent");
const agent = await createOpenAIFunctionsAgent({ llm, tools, prompt });

const agentExecutor = new AgentExecutor({ 
    agent, 
    tools, 
    verbose: true,
});

----------------------------------------

TITLE: Installing CrewAI Integration
DESCRIPTION: Commands to install CrewAI and its Composio plugin for additional functionality

LANGUAGE: bash
CODE:
pip install crewai composio-crewai

----------------------------------------

TITLE: Executing Groq Agent for GitHub Repository Starring
DESCRIPTION: Creates a Groq agent, sets up an executor, and invokes tasks to perform GitHub API calls using Composio for starring a repository.

LANGUAGE: python
CODE:
task = "Star a repo composiohq/composio on GitHub"

agent = create_react_agent(llm, tools)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

# Execute using agent_executor
inputs = {"messages": [("user",  task)]}
agent_executor.invoke(input=inputs)

LANGUAGE: javascript
CODE:
// Create an OpenAI functions agent with the provided LLM, tools, and prompt
const agent = await createReactAgent({
      llm,
      tools: tools,
  });

// Initialize the agent executor with verbosity enabled
const agentExecutor = new AgentExecutor({ agent, tools, verbose: true });

// Invoke the agent to perform the task of starring a GitHub repository
const response = await agentExecutor.invoke({"messages": [("user",  task)]});

// Output the response from the agent execution
console.log(response);

----------------------------------------

TITLE: Defining and Executing Research Task
DESCRIPTION: Creates a research task for the agent to perform, specifically about open source LLMs vs closed source LLMs. The task is then executed by the researcher agent.

LANGUAGE: python
CODE:
task1 = Task( description="""Research about open source LLMs vs
    closed source LLMs. Your final answer MUST be a full analysis report""", #You can add your own topic to research about change the topic, edit the text after 'Research about' in the description parameter of task1 
    expected_output='When the research report is ready',
    agent=researcher
)
task1.execute()

----------------------------------------

TITLE: Logging out from Composio CLI
DESCRIPTION: Securely ends the user session by logging out from the Composio CLI.

LANGUAGE: bash
CODE:
composio logout

----------------------------------------

TITLE: Configuring API Key Authentication in YAML
DESCRIPTION: Example configuration for API key-based authentication including proxy setup with base URL and headers

LANGUAGE: yaml
CODE:
proxy:
  base_url: "{{base_url}}"
  headers:
    Authorization: "{{api_key}}"

----------------------------------------

TITLE: Python Webhook Receiver Implementation
DESCRIPTION: Flask application that implements a webhook endpoint to receive and process POST requests, returning appropriate responses based on the request method

LANGUAGE: python
CODE:
import json
from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == 'POST':
        payload = request.json
        print(json.dumps(payload, indent=2))
        return jsonify(success=True), 200
    return jsonify(success=False), 405

if __name__ == '__main__':
    app.run(debug=True, port=5000)

----------------------------------------

TITLE: Fetching GitHub Actions and Passing to LLM in Python
DESCRIPTION: Retrieves GitHub actions and passes them to an OpenAI LLM for processing.

LANGUAGE: python
CODE:
tools = composio_toolset.get_tools(apps=[App.GITHUB])

task = "Star the repo composiohq/composio on GitHub"

response = openai_client.chat.completions.create(
    model="gpt-4o",
    tools=tools,
    messages=[
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": task},
    ],
)

----------------------------------------

TITLE: Initializing Tools and Models for Newsletter Summarizer in Python
DESCRIPTION: This code initializes the ComposioToolSet, retrieves Gmail tools, and sets up the Groq language model. It prepares the necessary components for email processing and AI-driven tasks.

LANGUAGE: python
CODE:
dotenv.load_dotenv()

toolset = ComposioToolSet()

gmail_tools = toolset.get_tools(apps=[App.GMAIL])

llm = ChatGroq(model="llama3.1-70b-versatile", stop_sequences=["\n\n"])

----------------------------------------

TITLE: Executing Main Python Script
DESCRIPTION: Command to run the main Python script for the trend finder application.

LANGUAGE: shell
CODE:
python python/examples/quickstarters/trend_finder/main.py

----------------------------------------

TITLE: Initializing Language Model and Tools for Research Assistant
DESCRIPTION: This snippet initializes the language model with OpenAI API and sets up the necessary tools for the Research Assistant Agent, including the SerpAPI tool for web searches.

LANGUAGE: python
CODE:
# Load environment variables
dotenv.load_dotenv()

# Initialize the language model with OpenAI API key and model name
llm = ChatOpenAI(
    model="gpt-4o"
)
# Setup tools using ComposioToolSet
composio_toolset = ComposioToolSet()
#Using .get_tools we are able to add various tools needed by the agents to execute its objective
#in this case its serpapi, giving the agent access to the internet
tools = composio_toolset.get_tools(apps=[App.SERPAPI])

----------------------------------------

TITLE: Defining Assistant and Registering Tools
DESCRIPTION: This snippet shows how to define an Autogen AssistantAgent and UserProxyAgent, and register Composio tools for GitHub with the agents.

LANGUAGE: python
CODE:
chatbot = AssistantAgent(
    "chatbot",
    system_message="Reply TERMINATE when the task is done or when user's content is empty",
    llm_config=llm_config,
)

user_proxy = UserProxyAgent(
    name="User",
    is_termination_msg=lambda x: x.get("content", "")
    and "TERMINATE" in x.get("content", ""),
    human_input_mode="NEVER",
    code_execution_config={"use_docker": False},
)

toolset.register_tools(apps=[App.GITHUB], caller=chatbot, executor=user_proxy)

----------------------------------------

TITLE: Initializing GitHub Tools with Composio
DESCRIPTION: Setup of Composio toolset for GitHub interactions within LangGraph

LANGUAGE: python
CODE:
from composio_langgraph import Action, ComposioToolSet

# Initialize the toolset for GitHub
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_actions(
    actions=[
        Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER,
        Action.GITHUB_USERS_GET_AUTHENTICATED,
    ])
tool_node = ToolNode(tools)

----------------------------------------

TITLE: Importing Libraries and Initializing Composio and OpenAI
DESCRIPTION: Import necessary libraries and initialize ComposioToolSet and OpenAI client for both Python and JavaScript environments.

LANGUAGE: python
CODE:
from openai import OpenAI
from composio_openai import ComposioToolSet, Action

openai_client = OpenAI()
composio_toolset = ComposioToolSet()

LANGUAGE: javascript
CODE:
import { OpenAIToolSet } from "composio-core";
import OpenAI from "openai";

const toolset = new OpenAIToolSet();
const openai = new OpenAI();

----------------------------------------

TITLE: Adding Trigger Listener in JavaScript
DESCRIPTION: This snippet demonstrates how to set up a trigger listener using the Composio client. It shows the process of initializing the client and subscribing to triggers.

LANGUAGE: javascript
CODE:
import { LangchainToolSet } from "composio-core"; // or any other toolset

const toolset = new LangchainToolSet({ apiKey: process.env.COMPOSIO_API_KEY }); /
const composio_client = toolset.client

// If not using LangchainToolSet
// import {Composio} from "composio-core";  
//const composio_client = new Composio({apiKey: process.env.COMPOSIO_API_KEY});


// Subscribe to triggers and perform actions
composio_client.triggers.subscribe((data) => {
    console.log("trigger received", data);
});

----------------------------------------

TITLE: Filtering Specific Actions and Apps
DESCRIPTION: Examples of how to filter and restrict specific actions and applications in the toolset.

LANGUAGE: python
CODE:
# To restrict agents from executing any actions, filter specific actions 
actions = composio_toolset.get_tools(actions=[Action.GITHUB_CREATE_ISSUE])

LANGUAGE: python
CODE:
# To restrict agents from using all tools, filter specific tools 
actions = composio_toolset.get_tools(apps=[App.ASANA, App.GITHUB])

LANGUAGE: python
CODE:
actions = toolset.get_tools(apps=[App.ASANA], tags=[Tag.ASANA_TASKS])

----------------------------------------

TITLE: Constructing LangGraph Workflow for GitHub Interaction
DESCRIPTION: Code to define and compile the LangGraph workflow. This sets up the structure for the agent's decision-making process and tool usage when interacting with GitHub.

LANGUAGE: python
CODE:
workflow = StateGraph(MessagesState)

workflow.add_node("agent", call_model)
workflow.add_node("tools", tool_node)
workflow.add_edge("__start__", "agent")
workflow.add_conditional_edges(
    "agent",
    should_continue,
)
workflow.add_edge("tools", "agent")

app = workflow.compile()

LANGUAGE: typescript
CODE:
const workflow = new StateGraph(MessagesAnnotation)
    .addNode("agent", callModal)
    .addEdge(START, "agent")
    .addNode("tools", toolNode)
    .addConditionalEdges("agent", shouldContinue)
    .addEdge("tools", "agent");

const app = workflow.compile();

----------------------------------------

TITLE: Defining Assistant and Registering Tools
DESCRIPTION: This snippet shows how to define an Autogen AssistantAgent and UserProxyAgent, and register Composio tools for GitHub with the agents.

LANGUAGE: python
CODE:
chatbot = AssistantAgent(
    "chatbot",
    system_message="Reply TERMINATE when the task is done or when user's content is empty",
    llm_config=llm_config,
)

user_proxy = UserProxyAgent(
    name="User",
    is_termination_msg=lambda x: x.get("content", "")
    and "TERMINATE" in x.get("content", ""),
    human_input_mode="NEVER",
    code_execution_config={"use_docker": False},
)

toolset.register_tools(apps=[App.GITHUB], caller=chatbot, executor=user_proxy)

----------------------------------------

TITLE: Executing SQL Query with SQL Tool in Python
DESCRIPTION: This snippet demonstrates how to use the SQL Tool in Composio to perform SQL operations on a database. It executes the SQLTOOL_SQL_QUERY action with parameters for the SQL query and connection string.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App, Action
toolset = ComposioToolSet()
path = "path/to/sqldb"
query = "SELECT * FROM <TABLE_NAME>" #example query
toolset.execute_action(
    action=Action.SQLTOOL_SQL_QUERY,
    params={
          "query":query,
          "connection_string":path,
        },
)

----------------------------------------

TITLE: Setting up SQL Query Agent for Composio
DESCRIPTION: This code snippet demonstrates the setup of an agent to execute SQL queries and save results. It includes creating an agent for SQL and file operations, defining a SQL query task, and executing the task using the agent executor.

LANGUAGE: python
CODE:
# Create the agent for SQL and File operations
sql_agent = create_openai_functions_agent(llm, sql_file_tools, prompt)
sql_executor = AgentExecutor(agent=sql_agent, tools=sql_file_tools, verbose=True)

# Define the SQL query task
query_task = (
    "Connect to the SQLite database 'companydb' and execute the following query: "
    "SELECT * FROM MOCK_DATA ORDER BY salary DESC LIMIT 10. "
    "Save the results to a file named 'top_salaries.txt' and return the content."
)

# Execute the SQL query task
sql_result = sql_executor.invoke({"input": query_task})
print(f"SQL Query Result: {sql_result['output']}")

LANGUAGE: javascript
CODE:
// Function to execute SQL queries
async function executeSQLQuery(query) {
    // Get SQL and File tools
    const sqlTools = await getSQLTools();
    
    // Create the agent prompt
    const prompt = await pull("hwchase17/openai-functions-agent");
    
    // Create the agent for SQL operations
    const agent = await createOpenAIFunctionsAgent({ 
        llm, 
        tools: sqlTools, 
        prompt 
    });

    // Create the agent executor
    const agentExecutor = new AgentExecutor({
        agent,
        tools: sqlTools,
        verbose: true,
    });

    // Execute the SQL query
    const result = await agentExecutor.invoke({
        input: `Connect to the SQLite database 'companydb' and execute the following query: ${query}. 
                Save the results to a file named 'query_results.txt' and return the content.`
    });

    console.log("SQL Query Result:", result.output);
    return result.output;
}

----------------------------------------

TITLE: Running Setup Script - Shell Command
DESCRIPTION: Command to execute the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Initializing Composio Client and Entity
DESCRIPTION: Setup code to import and initialize the Composio client and get an entity object

LANGUAGE: python
CODE:
from composio import ComposioToolSet

toolset = ComposioToolSet()
entity = toolset.get_entity("default")

LANGUAGE: javascript
CODE:
import { Composio } from "composio-core";

const toolset = new Composio();
const entity = toolset.getEntity("default");

----------------------------------------

TITLE: Querying Code with Greptile Tool in Python
DESCRIPTION: This code shows how to use the Greptile tool in Composio to query and understand a codebase. It executes the GREPTILE_CODE_QUERY action with parameters for message ID, content, and role.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App, Action
toolset = ComposioToolSet()
repo_name="composiohq/composio"
destination = "file/path"
toolset.execute_action(
    action=Action.GREPTILE_CODE_QUERY,
    params={
        "id":"id of the message",
        "content":"message content",
        "role":"user",#default role is user, can change to system
        },
)

----------------------------------------

TITLE: JavaScript Trigger Implementation
DESCRIPTION: JavaScript SDK implementation for managing triggers including setup, enabling, disabling, and listing triggers

LANGUAGE: bash
CODE:
npm install composio-core

LANGUAGE: javascript
CODE:
import { ComposioToolSet } from "composio-core";
const toolset = new ComposioToolSet();

const trigger = await toolset.triggers.getTriggerConfig({
    triggerId: "GITHUB_STAR_ADDED_EVENT"
})
console.log(trigger.config)

LANGUAGE: javascript
CODE:
toolset.triggers.subscribe(
    (data) => {
        console.log(data);
    },
    {
        triggerName: "GITHUB_STAR_ADDED_EVENT"
    }
);

----------------------------------------

TITLE: Setting Up JavaScript Express Server
DESCRIPTION: Initializes Express.js server with necessary configurations and middleware for handling webhook requests.

LANGUAGE: javascript
CODE:
import express from 'express';
import { OpenAI } from "openai";
import { OpenAIToolSet, Action } from "composio-core";

const app = express();
const PORT = process.env.PORT || 2001;
const research_topic = "LLM agents function calling"
const target_repo = "composiohq/composio"
app.use(express.json());

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems. This step may be necessary before running the setup script.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Fetching GitHub LangChain Tools via Composio
DESCRIPTION: Imports necessary modules from Composio and fetches all GitHub tools for use with LangChain.

LANGUAGE: python
CODE:
# Import from composio_langchain
from composio_langchain import ComposioToolSet, Action, App

# Get All the tools

composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.GITHUB])

LANGUAGE: javascript
CODE:
// Initialize the LangchainToolSet with the API key from environment variables
const toolset = new LangchainToolSet({ apiKey: process.env.COMPOSIO_API_KEY});

// Fetch tools configured for GitHub applications
const tools = await toolset.getTools({ apps: ["github"] });

----------------------------------------

TITLE: Importing Base Packages and Initializing OpenAI LLM
DESCRIPTION: This snippet imports necessary packages from LlamaIndex, sets up environment variables, and initializes the OpenAI language model.

LANGUAGE: python
CODE:
from llama_index.llms.openai import OpenAI
from llama_index.core.llms import ChatMessage
from llama_index.core.agent import FunctionCallingAgentWorker

import dotenv
from llama_index.core.tools import FunctionTool

# Load environment variables from .env
dotenv.load_dotenv()

llm = OpenAI(model="gpt-4-turbo")

----------------------------------------

TITLE: Defining GET Endpoint for Client Authentication Projects in OpenAPI
DESCRIPTION: This snippet defines an OpenAPI specification for a GET endpoint to retrieve client authentication projects. The endpoint path is '/api/v1/client/auth/projects'.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/client/auth/projects

----------------------------------------

TITLE: Importing Libraries for Research Assistant Agent
DESCRIPTION: This code imports the necessary Python libraries for creating a Research Assistant Agent using CrewAI and Composio.

LANGUAGE: python
CODE:
from crewai import Agent, Task, Crew, Process
from composio_langchain import ComposioToolSet, App
from langchain_openai import ChatOpenAI
import os
import dotenv

----------------------------------------

TITLE: Fetching GitHub LangChain Tools via Composio
DESCRIPTION: Imports necessary modules from Composio and fetches all GitHub tools for use with LangChain.

LANGUAGE: python
CODE:
# Import from composio_langchain
from composio_langchain import ComposioToolSet, Action, App

# Get All the tools

composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.GITHUB])

LANGUAGE: javascript
CODE:
// Initialize the LangchainToolSet with the API key from environment variables
const toolset = new LangchainToolSet({ apiKey: process.env.COMPOSIO_API_KEY});

// Fetch tools configured for GitHub applications
const tools = await toolset.getTools({ apps: ["github"] });

----------------------------------------

TITLE: Initializing Composio and OpenAI Clients
DESCRIPTION: Setup code for initializing the Composio toolset and OpenAI client in both languages

LANGUAGE: python
CODE:
from openai import OpenAI
from composio_openai import ComposioToolSet, Action

openai_client = OpenAI()
composio_toolset = ComposioToolSet()

LANGUAGE: javascript
CODE:
import { OpenAIToolSet } from "composio-core";
import OpenAI from "openai";

const toolset = new OpenAIToolSet();
const openai = new OpenAI();

----------------------------------------

TITLE: Configuring Docker Environment in Python and JavaScript
DESCRIPTION: Shows how to set up a Docker environment for enhanced security and isolation using both Python and JavaScript.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, WorkspaceType
toolset = ComposioToolSet(
    workspace_config=WorkspaceType.Docker()
)

LANGUAGE: javascript
CODE:
import { OpenAIToolset, Workspace } from "composio-core"

toolset = new OpenAIToolset({
  workspaceConfig: Workspace.Docker({})
})

----------------------------------------

TITLE: Executing Data Analyst Agent - Python
DESCRIPTION: Command to run the main Python script that initializes and runs the Data Analyst agent.

LANGUAGE: shell
CODE:
python cookbook/examples/data_analyst_agent/main.py

----------------------------------------

TITLE: Performing Git Operations with File Manager Tool in Python
DESCRIPTION: This snippet demonstrates how to use the File Manager tool in Composio to perform Git operations. It executes the FILETOOL_GIT_CLONE action with parameters for repository name, destination, and commit options.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App, Action
toolset = ComposioToolSet()
repo_name="composiohq/composio"
destination = "file/path"
toolset.execute_action(
    action=Action.FILETOOL_GIT_CLONE,
    params={
        "repo_name":repo_name,
        "destination":destination,
        "just_reset":True,
        "commit_id":"The commit id you want to set it to"
        },
)

----------------------------------------

TITLE: JavaScript Webhook Receiver Implementation
DESCRIPTION: Express application that implements a webhook endpoint to receive and process POST requests, logging the payload and returning a success response

LANGUAGE: javascript
CODE:
const express = require('express');
const bodyParser = require('body-parser');
const app = express();
app.use(bodyParser.json());

app.post('/webhook', (req, res) => {
    const payload = req.body;
    console.log(JSON.stringify(payload, null, 2));
    res.status(200).json({ success: true });
});

const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

----------------------------------------

TITLE: Installing Composio Gemini Package
DESCRIPTION: Installation of the required Composio Gemini package using pip

LANGUAGE: bash
CODE:
pip install composio-gemini

----------------------------------------

TITLE: Initializing Composio and Gemini Clients
DESCRIPTION: Setting up the Gemini client and Composio toolset with respective API keys

LANGUAGE: python
CODE:
from google.genai import types
from google import genai
from composio_gemini import Action, ComposioToolSet, App

client = genai.Client(api_key="<gemini-api-key>")
toolset = ComposioToolSet(api_key="<composio-api-key>")

----------------------------------------

TITLE: Running Presentation Agent
DESCRIPTION: Python command to execute the main presentation agent script that processes sheets and generates presentations.

LANGUAGE: shell
CODE:
python cookbook/examples/quickstarters/presentation_agent/main.py

----------------------------------------

TITLE: Initializing Language Model and Defining Tools (Python)
DESCRIPTION: This snippet initializes the ChatOpenAI language model and sets up the necessary tools for the agents, including the Google Calendar tool from Composio. It also retrieves the current date and timezone.

LANGUAGE: python
CODE:
load_dotenv()

# Initialize the language model
llm = ChatOpenAI(model="gpt-4o")

# Define tools for the agents
# We are using Google calendar tool from composio to connect to our calendar account.
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.GOOGLECALENDAR])

# Retrieve the current date and time
date = datetime.today().strftime("%Y-%m-%d")
timezone = datetime.now().astimezone().tzinfo

----------------------------------------

TITLE: Importing Libraries and Initializing ComposioToolSet
DESCRIPTION: Setting up initial imports and creating the ComposioToolSet instance for both Python and TypeScript implementations

LANGUAGE: python
CODE:
from typing import Literal
from langchain_openai import ChatOpenAI
from langgraph.graph import MessagesState, StateGraph
from langgraph.prebuilt import ToolNode
from composio_langgraph import Action, ComposioToolSet, App

composio_toolset = ComposioToolSet()

LANGUAGE: typescript
CODE:
import { LangGraphToolSet } from "composio-core";
import { ToolNode } from "@langchain/langgraph/prebuilt";
import { ChatOpenAI } from "@langchain/openai";
import { StateGraph, END, MessagesAnnotation, START } from "@langchain/langgraph";
import { HumanMessage } from "@langchain/core/messages";

const composioToolset = new LangGraphToolSet();

----------------------------------------

TITLE: Creating and Executing Workflow
DESCRIPTION: Final setup and execution of the LangGraph workflow for starring a GitHub repository

LANGUAGE: python
CODE:
workflow = StateGraph(MessagesState)

workflow.add_node("agent", call_model)
workflow.add_node("tools", tool_node)
workflow.add_edge("__start__", "agent")
workflow.add_conditional_edges(
    "agent",
    should_continue,
)
workflow.add_edge("tools", "agent")

app = workflow.compile()

LANGUAGE: typescript
CODE:
const workflow = new StateGraph(MessagesAnnotation)
    .addNode("agent", callModal)
    .addEdge(START, "agent")
    .addNode("tools", toolNode)
    .addConditionalEdges("agent", shouldContinue)
    .addEdge("tools", "agent");

const app = workflow.compile();

----------------------------------------

TITLE: Importing Required Packages for Camel AI and Composio
DESCRIPTION: Initial setup importing necessary packages from Camel AI and Composio libraries for agent functionality

LANGUAGE: python
CODE:
from colorama import Fore

from camel.agents import ChatAgent
from camel.configs import ChatGPTConfig
from camel.messages import BaseMessage
from camel.models import ModelFactory
from camel.types import ModelPlatformType, ModelType
from camel.utils import print_text_animated
from composio_camel import ComposioToolSet, Action

----------------------------------------

TITLE: Connecting GitHub Account in Python
DESCRIPTION: Demonstrates how to connect a GitHub account using Composio's CLI and Python SDK.

LANGUAGE: shell
CODE:
composio login 
composio add github -e "default"

LANGUAGE: python
CODE:
from composio_openai import ComposioToolSet, App, Trigger
toolset = ComposioToolSet(entity_id="default")

request = toolset.initiate_connection(app=App.GITHUB)

print(f"Open this URL to authenticate: {request.redirectUrl}")

----------------------------------------

TITLE: Importing Packages and Initializing Google AI Model
DESCRIPTION: This code imports necessary packages, initializes the Composio Toolset, and sets up the Google AI Gemini model with GitHub tools.

LANGUAGE: python
CODE:
import dotenv
from composio_google import App, ComposioToolset
from vertexai.generative_models import GenerativeModel

# Load environment variables from .env
dotenv.load_dotenv()

# Initialize the Composio Toolset
composio_toolset = ComposioToolset()

# Get GitHub tools that are pre-configured
tool = composio_toolset.get_tool(apps=[App.GITHUB])

# Initialize the Google AI Gemini model
model = GenerativeModel("gemini-1.5-pro", tools=[tool])

----------------------------------------

TITLE: Advanced Composio Tool Configuration
DESCRIPTION: Examples of filtering and restricting tool access for specific actions and applications

LANGUAGE: python
CODE:
# Filter to only allow creating issues on GitHub
toolsGithubCreateIssue = ComposioToolSet(actions=[Action.GITHUB_CREATE_ISSUE])

# Allow usage of Asana and GitHub only
toolsAsanaGithub = ComposioToolSet(apps=[App.ASANA, App.GITHUB])

----------------------------------------

TITLE: Installing Required Libraries for Composio in Python
DESCRIPTION: Install the necessary Python libraries for working with Composio, including langchain, langchain-openai, and composio-langchain.

LANGUAGE: bash
CODE:
pip install langchain langchain-openai composio-langchain

----------------------------------------

TITLE: Creating File with File Manager Tool in Python
DESCRIPTION: This snippet demonstrates how to use the File Manager tool in Composio to create a file. It executes the FILETOOL_CREATE_FILE action with the specified path and file type parameters.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App, Action
toolset = ComposioToolSet()
path = "path/to/directory"
toolset.execute_action(
    action=Action.FILETOOL_CREATE_FILE,
    params={
        "path":path,
        "is_directory":False,
        },
)

----------------------------------------

TITLE: Validating Connection Request in Python
DESCRIPTION: These snippets demonstrate different methods to validate a connection request using the Composio SDK. They include fetching the connected account object and polling until the connection is active or times out.

LANGUAGE: python
CODE:
connected_account = composio.get_connected_account(connection_request.id)

LANGUAGE: python
CODE:
connected_account = connection_request.wait_until_active(timeout=60)

LANGUAGE: python
CODE:
print(connected_account.status)

----------------------------------------

TITLE: Executing AI Agent for News Retrieval and Summarization
DESCRIPTION: Instantiates an AgentExecutor and uses it to find the latest AI news, retrieve the article description, and then summarize it.

LANGUAGE: python
CODE:
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True, handle_parsing_errors=True)
agent_executor.return_intermediate_steps = True
res = agent_executor.invoke(
    {
        "input": "Use SERP to find the one latest AI news, take only description of article."
    }
)

res2 = agent_executor.invoke({
    "input": res['output']+' Summarize this'
})


----------------------------------------

TITLE: Executing AI Agent for News Retrieval and Summarization
DESCRIPTION: Instantiates an AgentExecutor and uses it to find the latest AI news, retrieve the article description, and then summarize it.

LANGUAGE: python
CODE:
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True, handle_parsing_errors=True)
agent_executor.return_intermediate_steps = True
res = agent_executor.invoke(
    {
        "input": "Use SERP to find the one latest AI news, take only description of article."
    }
)

res2 = agent_executor.invoke({
    "input": res['output']+' Summarize this'
})


----------------------------------------

TITLE: Installing Composio and Connecting GitHub
DESCRIPTION: This snippet shows how to install the necessary package and connect GitHub for agent use. It also demonstrates how to view all available apps for connection.

LANGUAGE: bash
CODE:
pip install composio_griptape
# Connect your GitHub so agents can use it. 
composio add github
# Check all different apps which you can connect with
composio show-apps

----------------------------------------

TITLE: Crawling Website with Spider Tool in Python
DESCRIPTION: This code shows how to use the Spider Crawler tool in Composio to crawl a website. It executes the SPIDERTOOL_CRAWL action with the specified website URL.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App, Action
toolset = ComposioToolSet()
website_link="https://app.composio.dev"
toolset.execute_action(
    action=Action.SPIDERTOOL_CRAWL,
    params={
        "website_url":website_link,
        },
)

----------------------------------------

TITLE: OpenAPI GET Endpoint for Team Members
DESCRIPTION: YAML specification defining the API endpoint for retrieving team members using GET /api/v1/team/members

LANGUAGE: yaml
CODE:
openapi: get /api/v1/team/members

----------------------------------------

TITLE: Connecting GitHub Account to Composio
DESCRIPTION: Command to authenticate and connect a GitHub account with Composio using the CLI tool.

LANGUAGE: bash
CODE:
composio add github

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment, installs dependencies, logs into Composio, and adds necessary tools.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Initializing LlamaIndex and Composio Components
DESCRIPTION: Setup code for initializing the ComposioToolSet and OpenAI LLM for use with LlamaIndex

LANGUAGE: python
CODE:
from llama_index.llms.openai import OpenAI
from llama_index.core.llms import ChatMessage
from llama_index.core.agent import FunctionCallingAgentWorker
from composio_llamaindex import App, ComposioToolSet

toolset = ComposioToolSet()
llm = OpenAI()

----------------------------------------

TITLE: Complete Calendar Agent Implementation
DESCRIPTION: This snippet presents the complete implementation of the Calendar Agent, including all imports, initializations, and the main execution function. It combines all the previous code snippets into a single, runnable script.

LANGUAGE: python
CODE:
# Import base packages
import os
from datetime import datetime

from composio_crewai import App, ComposioToolSet
from crewai import Agent, Task
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

# Load environment variables
load_dotenv()

# Initialize the language model
llm = ChatOpenAI(model="gpt-4o")

# Define tools for the agents
# We are using Google calendar tool from composio to connect to our calendar account.
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.GOOGLECALENDAR])

# Retreive the current date and time
date = datetime.today().strftime("%Y-%m-%d")
timezone = datetime.now().astimezone().tzinfo

# Setup Todo
todo = """
    1PM - 3PM -> Code,
    5PM - 7PM -> Meeting,
    9AM - 12AM -> Learn something,
    8PM - 10PM -> Game
"""

# Create and Execute Agent.
def run_crew():
    calendar_agent = Agent(
        role="Google Calendar Agent",
        goal="""You take action on Google Calendar using Google Calendar APIs""",
        backstory="""You are an AI agent responsible for taking actions on Google Calendar on users' behalf.
        You need to take action on Calendar using Google Calendar APIs. Use correct tools to run APIs from the given tool-set.""",
        verbose=True,
        tools=tools,
        llm=llm,
    )
    task = Task(
        description=f"Book slots according to {todo}. Label them with the work provided to be done in that time period. Schedule it for today. Today's date is {date} (it's in YYYY-MM-DD format) and make the timezone be {timezone}.",
        agent=calendar_agent,
        expected_output="if free slot is found",
    )
    crew = Crew(agents=[calendar_agent], tasks=[task])
    result = crew.kickoff()
    print(result)
    return result

run_crew()

----------------------------------------

TITLE: Integrating GitHub Tools with Composio
DESCRIPTION: This code snippet shows how to fetch and integrate GitHub tools provided by Composio, enabling enhanced functionality for LangChain operations.

LANGUAGE: python
CODE:
from composio_phidata import ComposioToolSet, Action

toolset = ComposioToolSet()
composio_tools = toolset.get_actions(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])

----------------------------------------

TITLE: Initiating OAuth Connection in Composio
DESCRIPTION: Illustrates the process of initiating a new OAuth-based connection for a user, including setting up connection parameters and handling the connection request response.

LANGUAGE: python
CODE:
# Store connection parameters
redirect_url = "https://yourwebsite.com/connection/success"
entity_id = "default" 

connection_request = toolset.initiate_connection(redirect_url=redirect_url, entity_id=entity_id, app=App.GMAIL)

LANGUAGE: javascript
CODE:
// Store connection parameters
const redirectURL = "https://yourwebsite.com/connection/success"
const entityId = "default" 

const connectionRequest = await toolset.connectedAccounts.initiate({
  appName: "gmail",
  redirectUri: redirectURL,
  entityId: entityId,
  authMode: "OAUTH2",
});
console.log(connectionRequest);

----------------------------------------

TITLE: Importing Required Libraries for Research Assistant
DESCRIPTION: Imports necessary Python libraries including os, dotenv, crewai components, composio_langchain tools, and ChatOpenAI from langchain_openai.

LANGUAGE: python
CODE:
import os
import dotenv
from crewai import Agent, Task, Crew, Process
from composio_langchain import ComposioToolSet, Action, App
from langchain_openai import ChatOpenAI

----------------------------------------

TITLE: Initializing LlamaIndex and Composio Components
DESCRIPTION: Setup code for initializing the ComposioToolSet and OpenAI LLM for use with LlamaIndex

LANGUAGE: python
CODE:
from llama_index.llms.openai import OpenAI
from llama_index.core.llms import ChatMessage
from llama_index.core.agent import FunctionCallingAgentWorker
from composio_llamaindex import App, ComposioToolSet

toolset = ComposioToolSet()
llm = OpenAI()

----------------------------------------

TITLE: Implementing Versioned Actions in Python with Composio
DESCRIPTION: Demonstrates different ways to specify action versions when using Composio's toolset. Shows how to use latest, latest:base, and specific version specifiers when initializing tools.

LANGUAGE: python
CODE:
from composio_langchain import ComposioToolSet, Action

# Initialize toolset
toolset = ComposioToolSet()

# Use latest base version (default)
tools = toolset.get_tools(actions=[Action.GITHUB_META_ROOT @ "latest:base"])

# Use latest version
tools = toolset.get_tools(actions=[Action.GITHUB_META_ROOT @ "latest"])

# Use specific version
tools = toolset.get_tools(actions=[Action.GITHUB_META_ROOT @ "0_1"])

----------------------------------------

TITLE: Disabling a Specific Trigger in Composio CLI
DESCRIPTION: Deactivates a specific trigger using its Trigger_ID. This is useful when a trigger is no longer needed after testing.

LANGUAGE: bash
CODE:
composio triggers disable <trigger_id>

----------------------------------------

TITLE: Defining GET Endpoint for Project Retrieval in OpenAPI
DESCRIPTION: Specifies an OpenAPI endpoint for retrieving project details. The endpoint uses a GET method and requires a project ID as a path parameter.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/org/projects/{projectId}

----------------------------------------

TITLE: Logging into Composio CLI
DESCRIPTION: Authenticates the user session by logging into the Composio account through the CLI.

LANGUAGE: bash
CODE:
composio login

----------------------------------------

TITLE: Gmail Schema Definition - JSON Configuration
DESCRIPTION: Complete JSON schema definition for the GMAIL_SEND_EMAIL tool, specifying all available parameters and their constraints.

LANGUAGE: json
CODE:
{
	"type": "function",
	"function": {
		"name": "GMAIL_SEND_EMAIL",
		"description": "Send An Email Using Gmail's Api.",
		"parameters": {
			"properties": {
				"user_id": {
					"default": "me",
					"description": "The user's email address or 'me' for the authenticated user. Please provide a value of type string.",
					"title": "User Id",
					"type": "string"
				},
				"recipient_email": {
					"description": "Email address of the recipient. Please provide a value of type string. This parameter is required.",
					"examples": ["john@doe.com"],
					"title": "Recipient Email",
					"type": "string"
				},
				"cc": {
					"default": [],
					"description": "Email addresses of the recipients to be added as a carbon copy (CC).",
					"examples": [["john@doe.com", "jane@doe.com"]],
					"items": {
						"type": "string"
					},
					"title": "Cc",
					"type": "array"
				},
				"bcc": {
					"default": [],
					"description": "Email addresses of the recipients to be added as a blind carbon copy (BCC).",
					"examples": [["john@doe.com", "jane@doe.com"]],
					"items": {
						"type": "string"
					},
					"title": "Bcc",
					"type": "array"
				},
				"subject": {
					"default": null,
					"description": "Subject of the email. Please provide a value of type string.",
					"examples": ["Job Application"],
					"title": "Subject",
					"type": "string"
				},
				"body": {
					"description": "Body content of the email. Can be plain text or HTML. Please provide a value of type string. This parameter is required.",
					"examples": ["<h1>Hello</h1><p>This is an HTML email.</p>"],
					"title": "Body",
					"type": "string"
				},
				"is_html": {
					"default": false,
					"description": "Set to True if the body content is HTML. Please provide a value of type boolean.",
					"title": "Is Html",
					"type": "boolean"
				},
				"attachment": {
					"anyOf": [{
						"file_uploadable": true,
						"properties": {
							"name": {
								"title": "Name",
								"type": "string"
							},
							"mimetype": {
								"title": "Mimetype",
								"type": "string"
							},
							"s3key": {
								"title": "S3Key",
								"type": "string"
							}
						},
						"required": ["name", "mimetype", "s3key"],
						"title": "FileUploadable",
						"type": "object"
					}, {
						"type": "null"
					}],
					"default": null,
					"description": "Path of File to be attached with the mail, If attachment to be sent.",
					"type": "object"
				}
			},
			"title": "SendEmailRequest",
			"type": "object",
			"required": ["recipient_email", "body"]
		}
	}
}

----------------------------------------

TITLE: Executing setup.sh Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Implementing Tool Calling Loop in JavaScript
DESCRIPTION: This code snippet demonstrates the main interaction loop for tool calling in JavaScript. It sends requests to the LLM, checks for tool calls, executes them, and stores the conversation history asynchronously. The loop continues until the task is complete.

LANGUAGE: javascript
CODE:
while (true) {
    console.log("\n⏳ Waiting for AI response...");
    const response = await client.chat.completions.create({
        model: "gpt-4o",
        tools: tools,
        messages: messages,
    });

    if (!response.choices[0].message.tool_calls) {
        console.log("💬 AI Response:", response.choices[0].message.content);
        break;
    }

    console.log("🔧 Executing tool calls...");
    const result = await toolset.handleToolCall(response);
    console.log("✅ Tool execution result:", result);

    messages.push({
        role: "assistant",
        content: "",
        tool_calls: response.choices[0].message.tool_calls,
    });

    messages.push({
        role: "tool",
        content: String(result),
        tool_call_id: response.choices[0].message.tool_calls[0].id,
    });
}

----------------------------------------

TITLE: Creating Tasks for Adding Content to RAG Tool in Python
DESCRIPTION: This code creates tasks to add content to the RAG tool for enriching its knowledge base. It defines a list of additional content and creates a task for each content item to be added to the RAG tool.

LANGUAGE: python
CODE:
from composio_langchain import Task  # Ensure Task is imported

# User-provided description of the data to be added
additional_content_list = [
    "Paris is the capital of France. It is known for its art, fashion, and culture.",
    "Berlin is the capital of Germany. It is famous for its history and vibrant culture.",
    "Tokyo is the capital of Japan. It is known for its technology and cuisine.",
    "Canberra is the capital of Australia. It is known for its modern architecture and museums.",
    # Add more data as needed
]

# Define the task for adding content to the RAG tool
add_content_tasks = [
    Task(
        description=dedent(
            f"""\
            Add the following content to the RAG tool to enrich its knowledge base: {content}"""
        ),
        expected_output="Content was added to the RAG tool",
        tools=tools,
        agent=rag_agent,
        allow_delegation=False,
    )
    for content in additional_content_list
]

----------------------------------------

TITLE: Importing Base Packages for Research Agent in Python
DESCRIPTION: This snippet imports essential libraries for the Research Agent project, including Composio, LlamaIndex, and OpenAI modules. It sets up the foundation for creating an AI assistant that can interact with GitHub and perform research tasks.

LANGUAGE: python
CODE:
import os
import dotenv
from composio_llamaindex import Action, ComposioToolSet  # pylint: disable=import-error
from llama_index.core.llms import ChatMessage  # pylint: disable=import-error
from llama_index.llms.openai import OpenAI  # pylint: disable=import-error
from llama_index.agent.openai import OpenAIAgent
from llama_index.tools.arxiv.base import ArxivToolSpec

----------------------------------------

TITLE: Using Custom Authentication with Composio Tools in Python
DESCRIPTION: Demonstrates how to use custom authentication when executing Composio tools. This allows for managing authentication from another provider and adding auth parameters for any app.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App

toolset = ComposioToolSet()

toolset.add_auth(
    app=App.GITHUB,
    parameters=[
        dict(
            name="Authorization",
            in_="header",
            value="Bearer gho_",
        )
    ],
)

toolset.execute_action(
    action="GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
    params={"owner": "composiohq", "repo": "composio"},
)

----------------------------------------

TITLE: Importing Libraries and Setting Up Environment for RAG Tool Agent in Python
DESCRIPTION: This snippet imports necessary libraries and sets up environment variables for the RAG Tool Agent project. It uses dotenv for environment management and imports required modules from composio_langchain, langchain_openai, and composio.local_tools.

LANGUAGE: python
CODE:
import os
import dotenv
from textwrap import dedent
from composio_langchain import Action, App, ComposioToolSet
from langchain_openai import ChatOpenAI
from composio.local_tools import ragtool

# Load environment variables
dotenv.load_dotenv()

----------------------------------------

TITLE: Creating Solana Transfer Action in Python
DESCRIPTION: This snippet defines a custom action for sending SOL using the Solana blockchain. It includes error handling and returns the transaction status.

LANGUAGE: python
CODE:
from solders.keypair import Keypair
from solders.pubkey import Pubkey
from solana.rpc.api import Client
from solders.system_program import TransferParams, transfer
from solders.transaction import Transaction
from solders.message import Message
from composio import action
import base58
from solders.signature import Signature

@action(toolname='solanakit', requires=['solana','solders'])
def send_sol(sender_private_key: str, receiver_public_key: str, amount: str, network: str = "devnet") -> str:
    """
    Send SOL to a wallet
    :param sender_private_key: private key of the sender
    :param receiver_public_key: address of the wallet to send SOL to
    :param amount: amount of SOL to send, should be in lamports
    :param network: network to send the transaction on
    :return transaction_hash: transaction hash
    """
    try:
        # Create keypair for sender
        # Use a valid Base58-encoded private key for the sender
        sender_keypair = Keypair.from_base58_string(sender_private_key)
        sender_public_key = sender_keypair.pubkey()

        # Define receiver's public key
        receiver_public_key_ = Pubkey.from_string(receiver_public_key)

        # Build the transfer instruction
        ixns = [
            transfer(
                TransferParams(
                    from_pubkey=sender_public_key,
                    to_pubkey=receiver_public_key_,
                    lamports=int(amount)
                )
            )
        ]

        # Create a message with the transaction
        msg = Message(ixns, sender_public_key)

        # Connect to a Solana client
        client = Client(f"https://api.{network}.solana.com")  # Using Devnet RPC endpoint

        # Fetch the latest blockhash
        latest_blockhash = client.get_latest_blockhash().value.blockhash

        # Create the transaction
        transaction = Transaction([sender_keypair], msg, latest_blockhash)

        # Send the transaction
        response = client.send_transaction(transaction)
        print("Transaction response:", response)
        return "Transaction sent successfully: "+str(response)
    except ValueError as e:
        return f"Error: Invalid key format - {str(e)}"
    except Exception as e:
        return f"Error sending transaction: {str(e)}"

----------------------------------------

TITLE: Filtering App Actions by Tags in Composio ToolSet
DESCRIPTION: This snippet illustrates how to filter actions by tags, specifically for Asana tasks in this example.

LANGUAGE: python
CODE:
actions = toolset.get_tools(apps=[App.ASANA], tags=[Tag.ASANA_TASKS])

----------------------------------------

TITLE: Running SWEBench Benchmark
DESCRIPTION: Python command to run the benchmark with a specific test instance ID.

LANGUAGE: bash
CODE:
python benchmark.py --test-instance-ids "django__django-14434"

----------------------------------------

TITLE: Logging into Composio CLI
DESCRIPTION: Authenticates the user session by logging into the Composio account through the CLI.

LANGUAGE: bash
CODE:
composio login

----------------------------------------

TITLE: Setting up Function Calling Worker for AI Lead Generator Agent
DESCRIPTION: This snippet shows how to set up the Function Calling Worker for the AI Lead Generator Agent in Python, including system message configuration and agent initialization.

LANGUAGE: python
CODE:
spreadsheetid = '14T4e0j1XsWjriQYeFMgkM2ihyvLAplPqB9q8hytytcw'
prefix_messages = [
    ChatMessage(
        role="system",
        content=(
            f"""
            You are a lead research agent. Based on user input, find 10 relevant leads using people data labs.
            After finding the leads, create a Google Sheet with the details for the lead description, and spreadsheet ID: ${spreadsheetid}.
            Print the list of people and their details and the link to the google sheet."""
        ),
    )
]

agent = FunctionCallingAgentWorker(
    tools=tools,
    llm=llm,
    prefix_messages=prefix_messages,
    max_function_calls=10,
    allow_parallel_tool_calls=False,
    verbose=True,
).as_agent()

----------------------------------------

TITLE: Running PR Agent
DESCRIPTION: Command to execute the main Python script that runs the PR agent.

LANGUAGE: shell
CODE:
python cookbook/examples/pr_agent_openai/main.py

----------------------------------------

TITLE: API Client Initialization
DESCRIPTION: Initialize OpenAI client and Composio toolset with GitHub tools.

LANGUAGE: python
CODE:
# Initialize clients
openai_client = OpenAI()
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.GITHUB])

----------------------------------------

TITLE: Updating All Apps in Composio
DESCRIPTION: Command to update all installed apps in Composio, including both authenticated and non-authenticated apps, to their latest versions.

LANGUAGE: python
CODE:
composio apps update

----------------------------------------

TITLE: OpenAPI Path Definition - API Key Regeneration
DESCRIPTION: OpenAPI/Swagger path specification for the API key regeneration endpoint. Defines the route for regenerating organization API keys.

LANGUAGE: yaml
CODE:
openapi: post /api/v1/client/auth/org/api_key/regenerate

----------------------------------------

TITLE: Installing Composio CLI with pip
DESCRIPTION: Installs the Composio CLI using pip package manager. Requires Python 3.9 and pip to be installed on the system.

LANGUAGE: bash
CODE:
pip install composio-core

----------------------------------------

TITLE: Retrieving GitHub Tools for LangChain Integration
DESCRIPTION: Code for fetching available GitHub tools through Composio's toolset

LANGUAGE: python
CODE:
tools = composio_toolset.get_tools(apps=[App.GITHUB])

LANGUAGE: javascript
CODE:
const tools = await toolset.getTools({ apps: ["github"] });

----------------------------------------

TITLE: Express App Initialization
DESCRIPTION: Sets up the Express application with basic configuration including port settings and JSON middleware.

LANGUAGE: javascript
CODE:
const app = express();
const PORT = process.env.PORT || 2001;
const research_topic = "LLM agents function calling"
const target_repo = "composiohq/composio"
app.use(express.json());

----------------------------------------

TITLE: Defining Custom Schema Processor for Linear Action in TypeScript
DESCRIPTION: Create a custom function to modify the schema of the LINEAR_CREATE_LINEAR_ISSUE action, removing project_id and team_id as required fields.

LANGUAGE: TypeScript
CODE:
const schemaProcessor: TSchemaProcessor = ({
  actionName,
  toolSchema,
}: {
  actionName: string;
  toolSchema: RawActionData;
}) => {
  const modifiedSchema = { ...toolSchema };
  modifiedSchema.parameters = {
    ...modifiedSchema.parameters,
    required: modifiedSchema.parameters?.required?.filter(
      field => !['project_id', 'team_id'].includes(field)
    ) || []
  };

  return modifiedSchema;
};

----------------------------------------

TITLE: Setting up AI Agent for Lead Generation in JavaScript
DESCRIPTION: This snippet shows how to set up the AI agent for lead generation using JavaScript, including configuration of the lead description, spreadsheet ID, and agent parameters.

LANGUAGE: javascript
CODE:
const leadDescription = 'Senior frontend developers in San Francisco';
const spreadsheetid='14T4e0j1XsWjriQYeFMgkM2ihyvLAplPqB9q8hytytcw'
const output = await generateText({
model: openai("gpt-4o"),
streamText: false,
tools: tools,
prompt: `
        You are a lead research agent. Based on user input, find 10 relevant leads using people data labs.
        After finding the leads, create a Google Sheet with the details for the lead description: ${leadDescription}, and spreadsheet ID: ${spreadsheetid}.
        Print the list of people and their details and the link to the google sheet.
        `, 
maxToolRoundtrips: 5,
});

----------------------------------------

TITLE: Google Calendar Event Creation with OpenAI in JavaScript
DESCRIPTION: JavaScript implementation for creating calendar events using natural language processing through OpenAI integration.

LANGUAGE: javascript
CODE:
const tools = await composio_toolset.getTools({
    actions: ["googlecalendar_create_event"]
});

const today = new Date().toDateString();
const instruction = `Create a 1 hour meeting event at 5:30PM tomorrow. Today's date is ${today}`;

const response = await openai_client.chat.completions.create({
    model: "gpt-4-turbo-preview",
    messages: [{ role: "user", content: instruction }],
    tools: tools,
    tool_choice: "auto",
});

----------------------------------------

TITLE: Retrieving GitHub Tools for LangChain Integration
DESCRIPTION: Code for fetching available GitHub tools through Composio's toolset

LANGUAGE: python
CODE:
tools = composio_toolset.get_tools(apps=[App.GITHUB])

LANGUAGE: javascript
CODE:
const tools = await toolset.getTools({ apps: ["github"] });

----------------------------------------

TITLE: Connecting GitHub Account with Composio
DESCRIPTION: Authentication setup for connecting GitHub account with Composio, including CLI commands and programmatic approaches

LANGUAGE: shell
CODE:
composio login
composio add github

LANGUAGE: python
CODE:
request = composio_toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

LANGUAGE: javascript
CODE:
const connection = await toolset.connectedAccounts.initiate({appName: "github"})
console.log(`Open this URL to authenticate: ${connection.redirectUrl}`);

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change to the directory containing the project files.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Initiating Connection Request in Python
DESCRIPTION: This snippet shows how to initiate a connection request using the Composio SDK. It sends the required parameters and handles the response, which may include a redirect URL for OAuth flows.

LANGUAGE: python
CODE:
# Collect the subdomain from your user via your platform's frontend
auth_config = {"subdomain":"***zendesk_sub_domain****"}

connection_request = integration.initiate_connection(params=auth_config, entity_id = "")

if connection_request.redirectUrl != "":
print("Please complete the auth flow by opening this link: ", connection_request.redirectUrl)
else:
print("The account status is: ",connection_request)

----------------------------------------

TITLE: API Path Definition for Enabling Connected Accounts
DESCRIPTION: OpenAPI specification defining a POST endpoint for enabling connected accounts using their unique identifier

LANGUAGE: yaml
CODE:
openapi: post /api/v1/connectedAccounts/{connectedAccountId}/enable

----------------------------------------

TITLE: Connecting to Github and Setting OpenAI API Key for Reward Agent
DESCRIPTION: This snippet demonstrates how to connect to Github using Composio and set the OpenAI API key as an environment variable.

LANGUAGE: bash
CODE:
composio add github

export OPENAI_API_KEY="<your-openai-api-key>"

----------------------------------------

TITLE: Natural Language Tool Execution
DESCRIPTION: Executing tools using natural language prompts instead of explicit parameters in both Python and JavaScript.

LANGUAGE: python
CODE:
tool_set.execute_action(
    action=Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER,
    params={},
    # Natural language prompt
    text="Star the repo composiohq/composio",
    entity_id="Jessica",
)

LANGUAGE: javascript
CODE:
const result = await toolset.client.getEntity("default").execute({
    actionName: "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
    params: {},
    // Natural language prompt
    text: "Star the repo composiohq/composio"
});
console.log(result);

----------------------------------------

TITLE: Setting File Permissions for Setup Script
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Defining Model Calling Function for LangGraph
DESCRIPTION: Function to process messages through the language model and return the response. This is a key component in the LangGraph workflow for handling agent interactions.

LANGUAGE: python
CODE:
def call_model(state: MessagesState):
    """
    Process messages through the LLM and return the response
    """
    messages = state["messages"]
    response = model_with_tools.invoke(messages)
    return {"messages": [response]}

LANGUAGE: typescript
CODE:
async function callModal(state) {
    const { messages } = state;
    const response = await model.invoke(messages);
    return { messages: [response] };
}

----------------------------------------

TITLE: Defining Research Agent for CrewAI
DESCRIPTION: This code defines the Researcher agent with its role, goal, backstory, and necessary parameters for the CrewAI framework.

LANGUAGE: python
CODE:
researcher = Agent(
    role='Researcher',
    goal='Search the internet for the information requested',
    backstory="""
    You are a researcher. Using the information in the task, you find out some of the most popular facts about the topic along with some of the trending aspects.
    You provide a lot of information thereby allowing a choice in the content selected for the final blog.
    """,
    verbose=True,
    allow_delegation=False,
    tools=tools,
    llm=llm
)

----------------------------------------

TITLE: Main Execution Function
DESCRIPTION: Implementation of the main function that orchestrates SQL query execution and graph plotting operations.

LANGUAGE: javascript
CODE:
async function runSQLAgent() {
    const query = "SELECT * FROM users LIMIT 10";
    const queryResult = await executeSQLQuery(query);
    const graphResult = await plotGraph(queryResult);
}

runSQLAgent().catch(error => console.error("An error occurred:", error));

----------------------------------------

TITLE: Integrating GitHub Tools with Composio for Google AI Python
DESCRIPTION: This code snippet shows how to fetch and integrate GitHub tools provided by Composio, enabling enhanced functionality for Google AI Python operations. It sets up the necessary tools and configuration for starring a GitHub repository.

LANGUAGE: python
CODE:
from google.genai import types

from composio_gemini import Action, ComposioToolSet

# Create composio client
toolset = ComposioToolSet()

# Create tools
tools = toolset.get_tools(
    actions=[
        Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER,
    ]
)

# Create genai client config
config = types.GenerateContentConfig(
    tools=tools,  # type: ignore    
)

----------------------------------------

TITLE: Listing All Actions in Composio using JavaScript
DESCRIPTION: This code snippet shows how to list all available actions in Composio with a limit of 10 using the JavaScript SDK.

LANGUAGE: javascript
CODE:
import { Composio } from "composio-core";
const composio = new Composio();
const actions = await composio.actions.list({ data: { limit: 10 } });

console.log(actions); // print all actions supported

----------------------------------------

TITLE: Integrating GitHub Tools with Composio
DESCRIPTION: Setting up GitHub tools integration using Composio's toolset functionality.

LANGUAGE: python
CODE:
from composio_claude import App, ComposioToolSet

toolset = ComposioToolSet()
actions = toolset.get_tools(tools=App.GITHUB)

----------------------------------------

TITLE: Filtering Specific Actions in Composio
DESCRIPTION: Restrict the Google AI model to execute only specific actions, such as creating a GitHub issue.

LANGUAGE: python
CODE:
# To restrict models from executing any actions, filter specific actions 
actions = composio_toolset.get_tool(actions=[Action.GITHUB_CREATE_ISSUE])

----------------------------------------

TITLE: Importing Base Packages for Research Agent
DESCRIPTION: Essential library imports for setting up the research agent environment.

LANGUAGE: python
CODE:
import os
import dotenv

from composio_llamaindex import Action, ComposioToolSet
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI
from llama_index.agent.openai import OpenAIAgent
from llama_index.tools.arxiv.base import ArxivToolSpec

LANGUAGE: javascript
CODE:
import express from 'express';
import { OpenAI } from "openai";
import { OpenAIToolSet, Action } from "composio-core";
import dotenv from 'dotenv';

dotenv.config();

----------------------------------------

TITLE: Example Response for Zendesk Integration Parameters
DESCRIPTION: This JSON snippet shows the expected response when fetching required parameters for the Zendesk integration. It includes details about the subdomain parameter.

LANGUAGE: json
CODE:
[
  {
    "name": "subdomain",
    "expected_from_customer": true,
    "displayName": "Zendesk Subdomain",
    "description": "Your Zendesk subdomain (e.g., your-company-name in your-company-name.zendesk.com)",
    "type": "string",
    "required": true
  }
]

----------------------------------------

TITLE: Executing Selected Slack Actions
DESCRIPTION: Python code to handle the tool calls returned by OpenAI and execute the selected actions in Slack using the connected account.

LANGUAGE: python
CODE:
# Execute Function calls
execution_details = connected_account.handle_tools_calls(response)
print(execution_details)
print("Completed Task")

----------------------------------------

TITLE: Importing Required Libraries for Composio in Python
DESCRIPTION: This code snippet demonstrates how to import the necessary Python modules for working with Composio, including components from langchain and composio_langchain.

LANGUAGE: python
CODE:
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain import hub
from langchain_openai import ChatOpenAI
from composio_langchain import ComposioToolSet, Action, App

----------------------------------------

TITLE: Fetching Integration Parameters in Python
DESCRIPTION: This snippet demonstrates how to retrieve integration parameters using the Composio SDK. It initializes the client, gets an entity, and fetches the required variables for a specific integration.

LANGUAGE: python
CODE:
from composio import ComposioToolSet,App

client = Composio(api_key="COMPOSIO_API_KEY")

entity = client.get_entity(id="default")

# Integration Chosen by User to Connect with

integration = client.get_integration(integration_id)

# list of params req from user

print(integration.get_required_variables())

----------------------------------------

TITLE: Defining OpenAPI POST Endpoint for Disabling Connected Accounts
DESCRIPTION: This YAML snippet defines an OpenAPI specification for a POST endpoint used to disable a connected account. It includes the path with a parameter for the connected account ID.

LANGUAGE: yaml
CODE:
openapi: post /api/v1/connectedAccounts/{connectedAccountId}/disable

----------------------------------------

TITLE: Creating ReAct Prompt Template
DESCRIPTION: Configuring the prompt template using Langchain Hub for agent interactions

LANGUAGE: python
CODE:
prompt = hub.pull("hwchase17/react-json")
prompt = prompt.partial(
    tools=render_text_description(tools),
    tool_names=", ".join([t.name for t in tools]),
)

----------------------------------------

TITLE: Installing Composio Core Package
DESCRIPTION: Installation commands for the composio-core package using pip (Python) and npm (JavaScript).

LANGUAGE: bash
CODE:
pip install composio-core

LANGUAGE: bash
CODE:
npm install composio-core

----------------------------------------

TITLE: Setting up Code Execution Task
DESCRIPTION: Define a sample Python code task and create a Task object for execution.

LANGUAGE: python
CODE:
python_code = """
    def calculate_sum(a, b):
        return a + b

    result = calculate_sum(5, 3)
    print(result)
"""

execute_code_task = Task(
    description="Execute the following Python code and return the results:\n\n" + python_code,
    expected_output="Execution of Python code returned the results.",
    tools=tools,
    agent=python_executor_agent,
    allow_delegation=False,
)

----------------------------------------

TITLE: Invoking the Composio Agent in Python
DESCRIPTION: Create and execute the Composio agent using the configured tools and a specific task to create a Linear issue.

LANGUAGE: Python
CODE:
task = "Create a Linear Issue to update the frontend"

agent = create_openai_functions_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

agent_executor.invoke({"input": task})

----------------------------------------

TITLE: Handling Tool Calls in Julep Agent Response
DESCRIPTION: This snippet shows how to handle tool calls in the Julep agent's response and print the resulting messages.

LANGUAGE: python
CODE:
response = composio_toolset.handle_tool_calls(response)

print(response.messages)

----------------------------------------

TITLE: Initializing Base Imports and Environment Setup
DESCRIPTION: Set up the Python environment with required imports and IBM API key configuration for Watson integration.

LANGUAGE: python
CODE:
from composio_langchain import ComposioToolSet, Action
from langchain_ibm import ChatWatsonx
import os

os.environ['WATSONX_API_KEY'] = '<ibm_api_key>' #add your ibm api key here
if not os.environ.get('WATSONX_API_KEY'):
    raise ValueError("WATSONX_API_KEY environment variable is not set")

----------------------------------------

TITLE: Initializing Composio and OpenAI Integration
DESCRIPTION: Setting up ComposioToolSet and ChatOpenAI instances with respective API keys for integration.

LANGUAGE: python
CODE:
from composio_crewai import ComposioToolSet, App
from crewai import Agent, Task, Crew
from langchain_openai import ChatOpenAI

toolset = ComposioToolSet(api_key="<your-composio-api-key>")
llm = ChatOpenAI(api_key="<your-openai-api-key>")

----------------------------------------

TITLE: Defining PraisonAI Agent Configuration in YAML
DESCRIPTION: This code defines the agent configuration in YAML format, including the framework, topic, roles, and tasks for the PraisonAI agent to star a GitHub repository.

LANGUAGE: python
CODE:
agent_yaml = """
framework: "crewai"
topic: "Github Management"

roles:
  developer:
    role: "Developer"
    goal: "An expert programmer"
    backstory: "A developer exploring new codebases and having certain tools available to execute different tasks."
    tasks:
      star_github:
        description: "Star a repo composiohq/composio on GitHub"
        expected_output: "Response whether the task was executed."
""" + tool_section_str

print(agent_yaml)

----------------------------------------

TITLE: Running Composio Core MCP Client for Claude in Bash
DESCRIPTION: This command demonstrates how to run the Composio Core MCP client for Claude. It uses npx to execute the composio-core package, specifying the MCP server URL and the client type.

LANGUAGE: bash
CODE:
npx composio-core@rc mcp "https://mcp.composio.dev/notion/30c7242b-9a14-45d2-bca7-5012dd77fc11" --client claude

----------------------------------------

TITLE: Running Scheduler Agent Python Script
DESCRIPTION: Command to execute the main Python script for the Scheduler Agent, which uses LangGraph and ChatGPT.

LANGUAGE: shell
CODE:
python python/examples/advanced_agents/scheduler_agent/scheduler_agent_langgraph/main.py

----------------------------------------

TITLE: OpenAPI Project Deletion Endpoint Definition
DESCRIPTION: OpenAPI specification defining the DELETE endpoint for removing a project through the client authentication API. The endpoint requires a project ID parameter.

LANGUAGE: yaml
CODE:
openapi: delete /api/v1/client/auth/project/delete/{projectId}

----------------------------------------

TITLE: Setting up Environment with Bash Script
DESCRIPTION: Instructions for making the setup script executable and running it to configure the environment

LANGUAGE: bash
CODE:
chmod +x setup.sh

# run the setup.sh file
./setup.sh

----------------------------------------

TITLE: Installing Composio Gemini and Connecting GitHub Account
DESCRIPTION: This snippet shows how to install the Composio Gemini package and connect a GitHub account for agent functionality. It also demonstrates how to view available applications for connection.

LANGUAGE: bash
CODE:
# Install Composio Gemini package
pip install composio-gemini

# Connect your GitHub account
composio add github

# View available applications you can connect with
composio apps

----------------------------------------

TITLE: Invoking the GitHub Issue Creation Agent in TypeScript
DESCRIPTION: This snippet demonstrates how to invoke the previously defined executeAgent function with a specific entity name to create a GitHub issue.

LANGUAGE: typescript
CODE:
executeAgent("himanshu")

----------------------------------------

TITLE: Preparing Griptape Agent with Composio Tools
DESCRIPTION: This snippet demonstrates how to create a Composio toolset for GitHub and add it to a Griptape agent. It initializes the agent with the necessary tools for GitHub interaction.

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps = [App.GITHUB])

agent = Agent(
tools=tools
)

----------------------------------------

TITLE: Installing Composio Package and GitHub Setup
DESCRIPTION: Instructions for installing the Composio LangChain package and connecting a GitHub account for agent functionality.

LANGUAGE: bash
CODE:
# Install Composio LangChain package
pip install composio-claude

# Connect your GitHub account
composio-cli add github

# View available applications you can connect with
composio-cli show-apps

----------------------------------------

TITLE: Executing Newsletter Summarization Workflow
DESCRIPTION: This snippet demonstrates how to execute the newsletter summarization process and handle the results in both Python and JavaScript environments.

LANGUAGE: python
CODE:
# Create and run the crew
crew = Crew(
    agents=[email_fetcher, summarizer, email_sender],
    tasks=[fetch_task, summarize_task, send_task],
    verbose=2,
    process=Process.sequential
)

# Execute the workflow
result = crew.kickoff()
print(f"Result: {result}")

LANGUAGE: javascript
CODE:
app.post("/summarize-newsletters", async (c) => {
    // Set up connection
    const { ok, connectionId, error } = await setupConnection(c);
    if (!ok) return c.json({ error }, 400);
    
    // Get Gmail tools
    const tools = await composioToolset.getTools({
        actions: ["gmail_list_messages", "gmail_get_message", "gmail_send_email"],
        connectionId
    });
    
    // Get today's date and the date from 7 days ago
    const today = new Date().toLocaleDateString("en-US", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit"
    }).replace(/\//g, "/");
    
    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toLocaleDateString("en-US", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit"
    }).replace(/\//g, "/");
    
    try {
        // Process instructions for the AI
        const instructions = `
            1. Search for newsletter emails in the inbox from ${weekAgo} to ${today}
            2. For each newsletter found:
               - Read the content
               - Create a concise summary highlighting key points
            3. Compose a single email with all summaries organized clearly
            4. Send the summary email to the specified recipient with the subject 'Weekly Newsletter Digest'
        `;
        
        // Message to process with tool calling
        const message = {
            role: "user",
            content: instructions
        };
        
        // Process the message with tool calling
        const result = await composioToolset.process({
            messages: [message],
            tools,
            llm,
            recipient: "youremail@example.com"  // Replace with actual recipient
        });
        
        return c.json({ status: "success", result });
    } catch (error) {
        console.error("Error:", error);
        return c.json({ status: "error", message: error.message }, 500);
    }
});

// Set up Cloudflare Pages handler
export default {
    fetch: handle(app)
};

// For local testing
if (import.meta.main) {
    console.log("Starting server on http://localhost:8787");
    Bun.serve({
        fetch: app.fetch,
        port: 8787
    });
}

----------------------------------------

TITLE: Importing Libraries and Initializing Composio and LiteLLM
DESCRIPTION: This code imports required libraries, initializes ComposioToolSet, and creates a LiteLLM Router with Anthropic's Claude model configuration.

LANGUAGE: Python
CODE:
from composio_openai import ComposioToolSet, App
from litellm.router import Router

toolset = ComposioToolSet()

router = Router(
    model_list=[
        {
            "model_name": "anthropic/claude-3-5",
            "litellm_params": {
                "model": "claude-3-opus-20240229",
                "api_key": "<your-anthropic-api-key>",
            },
        }
    ]
)

----------------------------------------

TITLE: Importing Base Packages for Newsletter Service
DESCRIPTION: Imports essential libraries including Express, OpenAI, and Composio core components needed for the newsletter summarization service.

LANGUAGE: javascript
CODE:
import express from 'express';
import { OpenAI } from "openai";
import { OpenAIToolSet, Action } from "composio-core";

----------------------------------------

TITLE: Adding Custom Environment Variables to Workspace
DESCRIPTION: Demonstrates how to add custom environment variables to a Docker workspace configuration for API tokens or other environment-specific values.

LANGUAGE: javascript
CODE:
composio_toolset = new OpenAIToolset({
    workspaceConfig: WorkspaceType.Docker({
        environment: {
            "SOME_API_TOKEN": "<SOME_API_TOKEN>",
        }
    })
})

----------------------------------------

TITLE: Configuring GitHub Tools Integration
DESCRIPTION: Initialize Composio toolset and configure GitHub-specific tools for repository operations.

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(
    actions=[Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER]
)

----------------------------------------

TITLE: Navigating Project Directory in Shell
DESCRIPTION: Command to change into the project directory containing setup files

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Running Setup Script - Shell
DESCRIPTION: Command to execute the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Running the Autogen Agent to Star a GitHub Repository
DESCRIPTION: This code snippet demonstrates how to run the Autogen agent to perform the task of starring a specific GitHub repository using the configured tools and agents.

LANGUAGE: python
CODE:
task = "Star a repo composiohq/composio on GitHub"
response = user_proxy.initiate_chat(chatbot, message=task)
print(response.chat_history)

----------------------------------------

TITLE: Retrieving GitHub Tools from ComposioToolSet
DESCRIPTION: This code fetches all available GitHub tools from the ComposioToolSet. These tools will be used by the CrewAI agent to perform actions on GitHub.

LANGUAGE: python
CODE:
tools = toolset.get_tools(apps=[App.GITHUB])

----------------------------------------

TITLE: Executing Task via Julep Agent
DESCRIPTION: This code snippet demonstrates how to create a user, initiate a session, and execute a task (starring a GitHub repository) using the Julep agent.

LANGUAGE: python
CODE:
about = """
Sam, a software developer, is passionate about impactful tech.
At the tech fair, he seeks investors and collaborators for his project.
"""
user = julep_client.users.create(
    name="Sam",
    about=about,
)

situation_prompt = "You are at a tech fair seeking innovative projects."
session = julep_client.sessions.create(user_id=user.id, agent_id=agent.id, situation=situation_prompt)

user_msg = "Could you star the GitHub repository composiohq/composio?"

response = julep_client.sessions.chat(
    session_id=session.id,
    messages=[
        {"role": "user", "content": user_msg, "name": "Sam"}
    ],
    recall=True,
    remember=True
)

----------------------------------------

TITLE: Navigating to Project Directory - Shell
DESCRIPTION: Command to change into the project directory containing setup and configuration files.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: OpenAPI GET Endpoint Specification
DESCRIPTION: OpenAPI YAML specification for the GET endpoint to retrieve all actions. Located at /api/v2/actions/list/all.

LANGUAGE: yaml
CODE:
openapi: get /api/v2/actions/list/all

----------------------------------------

TITLE: Importing Base Packages for Groq and LangChain
DESCRIPTION: Initializes imports for Groq and LangChain, sets up the LLM, and pulls the prompt template.

LANGUAGE: python
CODE:
# Initialise imports
from langchain.agents import AgentExecutor
from langchain import hub
from langchain_groq import ChatGroq
from langgraph.prebuilt import create_react_agent

llm = ChatGroq(model="mixtral-8x7b-32768", temperature=0)

prompt = hub.pull("hwchase17/react")

LANGUAGE: javascript
CODE:
// Importing necessary modules from langchain and composio-core packages
import dotenv from 'dotenv';
dotenv.config();

import { ChatGroq } from "@langchain/groq";
import { AgentExecutor, createReactAgent } from "langchain/agents";
import { LangchainToolSet } from "composio-core";
import { pull } from "langchain/hub";


// Creating an instance of ChatGroq with specific model and temperature settings
const llm = new ChatGroq({
  model: "mixtral-8x7b-32768",
  temperature: 0,
});

// Pulling a chat prompt template asynchronously using the pull function
const prompt = await pull<ChatPromptTemplate>(
"hwchase17/react"
);

----------------------------------------

TITLE: Connecting GitHub Account via CLI or Python
DESCRIPTION: This snippet demonstrates two methods to connect a GitHub account: using the CLI or Python. It's a prerequisite for using GitHub-related tools with Composio.

LANGUAGE: shell
CODE:
composio login 
composio add github

LANGUAGE: python
CODE:
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

----------------------------------------

TITLE: Defining Task and Execution for Code Generation
DESCRIPTION: This snippet demonstrates how to create a task for the agent and set up the execution function in both Python and JavaScript.

LANGUAGE: python
CODE:
# Define a task for the agent
task = Task(
    description="""Write a Python function to calculate the Fibonacci sequence up to the 10th number.
                Then, execute the code and return the result.""",
    expected_output="The Fibonacci sequence and the execution result",
    agent=python_executor_agent
)

# Create a crew with the agent and task
crew = Crew(
    agents=[python_executor_agent],
    tasks=[task],
    verbose=2,
    process=Process.sequential
)

# Execute the task
result = crew.kickoff()
print(f"Result: {result}")

LANGUAGE: javascript
CODE:
// Define the code execution function
async function executeCodeAgent(problem) {
    const result = await agentExecutor.invoke({
        input: `Write code to solve the following problem and execute it: ${problem}`
    });
    
    return result.output;
}

// Run the agent with a sample problem
const problem = "Write a function to calculate the Fibonacci sequence up to the 10th number and display the result.";

executeCodeAgent(problem)
    .then(result => console.log("Result:", result))
    .catch(error => console.error("Error:", error));

----------------------------------------

TITLE: Importing Libraries for Github Contributor Reward Agent in Python
DESCRIPTION: This snippet imports the necessary libraries for the Github Contributor Reward Agent, including Composio, LlamaIndex, and dotenv for environment variable loading.

LANGUAGE: python
CODE:
from composio_llamaindex import ComposioToolSet, App, Action
from llama_index.core.agent import FunctionCallingAgentWorker
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

----------------------------------------

TITLE: Initiating GitHub Connection using Composio Python API
DESCRIPTION: This code shows how to initiate a connection to GitHub using the Composio Python API, generating a URL for authentication.

LANGUAGE: Python
CODE:
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

----------------------------------------

TITLE: Importing Libraries and Setting Up Environment for RAG Tool Agent in JavaScript
DESCRIPTION: This snippet imports necessary libraries and sets up environment variables for the RAG Tool Agent. It uses dotenv for environment configuration and imports required modules from Composio and Langchain.

LANGUAGE: javascript
CODE:
import dotenv from 'dotenv';
import { ExecEnv, LangchainToolSet } from 'composio-core';
import { ChatOpenAI } from '@langchain/openai';
import { AgentExecutor, createOpenAIToolsAgent } from 'langchain/agents';
import { pull } from 'langchain/hub';

// Load environment variables
dotenv.config();

----------------------------------------

TITLE: Connecting GitHub Account via CLI
DESCRIPTION: This snippet demonstrates how to connect a GitHub account using the Composio CLI commands.

LANGUAGE: shell
CODE:
composio login 
composio add github

----------------------------------------

TITLE: Setting Global Trigger Callback URL in Composio CLI
DESCRIPTION: Sets a global callback URL for all Composio triggers. This is crucial for receiving trigger notifications.

LANGUAGE: bash
CODE:
composio triggers callbacks set https://31-*****-163.ngrok.app

----------------------------------------

TITLE: Running the Autogen Agent to Star a GitHub Repository
DESCRIPTION: Python code to initiate a chat with the Autogen agent, instructing it to star a specific GitHub repository and print the chat history.

LANGUAGE: python
CODE:
task = "Star a repo composiohq/composio on GitHub"
response = user_proxy.initiate_chat(chatbot, message=task)
print(response.chat_history)

----------------------------------------

TITLE: Python Package Dependencies List
DESCRIPTION: A list of required Python packages including composio-autogen, autogen, langchain-openai, and python-dotenv for environment configuration.

LANGUAGE: plaintext
CODE:
composio-autogen
autogen
langchain-openai
python-dotenv

----------------------------------------

TITLE: Defining OpenAPI GET Endpoint for Logs Retrieval
DESCRIPTION: This YAML snippet specifies an OpenAPI endpoint for retrieving logs using the GET method. It defines the path '/api/v1/logs/' for accessing log data through the API.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/logs/

----------------------------------------

TITLE: Executing CAMEL Agent Tasks
DESCRIPTION: Running the configured CAMEL agent with a specific task prompt to star a GitHub repository.

LANGUAGE: python
CODE:
prompt = (
    "I have created a new GitHub Repo,"
    "Please star my github repository: camel-ai/camel"
)
user_msg = BaseMessage.make_user_message(role_name="User", content=prompt)
print(Fore.YELLOW + f"User prompt:\n{prompt}\n")

response = agent.step(user_msg)
for msg in response.msgs:
    print_text_animated(Fore.GREEN + f"Agent response:\n{msg.content}\n")

----------------------------------------

TITLE: Initializing Base Imports and Environment Setup
DESCRIPTION: Set up the Python environment with necessary imports from Composio and IBM, including API key configuration.

LANGUAGE: python
CODE:
from composio_langchain import ComposioToolSet, Action
from langchain_ibm import ChatWatsonx
import os

os.environ['WATSONX_API_KEY'] = '<ibm_api_key>' #add your ibm api key here
if not os.environ.get('WATSONX_API_KEY'):
    raise ValueError("WATSONX_API_KEY environment variable is not set")

----------------------------------------

TITLE: Defining OpenAPI POST Endpoint for Updating Webhook Formats in YAML
DESCRIPTION: This YAML snippet specifies the OpenAPI structure for a POST request to update webhook formats. It includes the endpoint path, request body schema, and possible response codes.

LANGUAGE: yaml
CODE:
openapi: post /api/v1/triggers/update_webhook_format

----------------------------------------

TITLE: Importing Packages and Initializing Google AI Model
DESCRIPTION: Import necessary packages, initialize the Composio Toolset, get GitHub tools, and initialize the Google AI Gemini model. Requires replacing {google_api_key} with an actual API key.

LANGUAGE: python
CODE:
import dotenv
from composio_google import App, ComposioToolset
from vertexai.generative_models import GenerativeModel

# Load environment variables from .env
dotenv.load_dotenv()

# Initialize the Composio Toolset
composio_toolset = ComposioToolset()

# Get GitHub tools that are pre-configured
tool = composio_toolset.get_tool(apps=[App.GITHUB])

# Initialize the Google AI Gemini model
model = GenerativeModel("gemini-1.5-pro", tools=[tool])

----------------------------------------

TITLE: Configuring Basic GitHub Integration in YAML
DESCRIPTION: Initial YAML configuration for GitHub integration with basic metadata and descriptive information.

LANGUAGE: yaml
CODE:
name: GitHub
description: Integrate GitHub to manage your repositories directly from Composio.
logo: https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png
categories: ["developer tools", "version control"]
auth_schemes:


----------------------------------------

TITLE: Defining OpenAPI GET Endpoint for Integrations
DESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /api/v1/integrations endpoint. It specifies the endpoint path, HTTP method, and response structure for retrieving integration data.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/integrations

----------------------------------------

TITLE: Fetching Composio Tools by Apps and Tags in TypeScript
DESCRIPTION: Shows how to retrieve Composio tools by specifying apps and tags using the OpenAIToolSet in TypeScript. This approach helps filter available tools to those relevant to the application.

LANGUAGE: typescript
CODE:
import { OpenAIToolSet } from "composio-core";

const toolset = new OpenAIToolSet();

const tools = await toolset.getTools({
  apps: ["JIRA"],
  tags: ["Issues"]
});

----------------------------------------

TITLE: Initializing Tools and LLM for Github Contributor Reward Agent
DESCRIPTION: This snippet initializes the Composio ToolSet with the custom send_sol action and the Github list repository contributors action. It also sets up the OpenAI language model.

LANGUAGE: python
CODE:
toolset = ComposioToolSet(api_key="")
tools = toolset.get_tools(actions=[send_sol, Action.GITHUB_LIST_REPOSITORY_CONTRIBUTORS])

llm = OpenAI(model="gpt-4o")

----------------------------------------

TITLE: Configuring FlyIO Deployment with Network Services
DESCRIPTION: Sets up Composio toolset for FlyIO deployment with custom port and protocol configuration

LANGUAGE: python
CODE:
from composio import ComposioToolSet, WorkspaceType

composio_toolset = ComposioToolSet(
    workspace_config=WorkspaceType.FlyIO(
        image="composio/composio",
        ports=[
            {
                "ports": [
                    {"port": 443, "handlers": ["tls", "http"]},
                ],
                "internal_port": 80,
                "protocol": "tcp",
            }
        ],
    )
)

----------------------------------------

TITLE: Defining PraisonAI Agent Configuration
DESCRIPTION: YAML configuration for PraisonAI agent defining roles and tasks for GitHub repository management.

LANGUAGE: python
CODE:
agent_yaml = """
framework: "crewai"
topic: "Github Management"

roles:
  developer:
    role: "Developer"
    goal: "An expert programmer"
    backstory: "A developer exploring new codebases and having certain tools available to execute different tasks."
    tasks:
      star_github:
        description: "Star a repo composiohq/composio on GitHub"
        expected_output: "Response whether the task was executed."
""" + tool_section_str

print(agent_yaml)

----------------------------------------

TITLE: Connecting GitHub Account with Composio
DESCRIPTION: Authenticate and connect your GitHub account with Composio using CLI commands or programmatically in Python and JavaScript.

LANGUAGE: shell
CODE:
composio login
composio add github

LANGUAGE: python
CODE:
request = composio_toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

LANGUAGE: javascript
CODE:
const connection = await toolset.connectedAccounts.initiate({appName: "github"})
console.log(`Open this URL to authenticate: ${connection.redirectUrl}`);

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Example of environment variables to be set in a .env file, including API keys for OpenAI and Composio.

LANGUAGE: env
CODE:
OPENAI_API_KEY=
COMPOSIO_API_KEY=

----------------------------------------

TITLE: Adding Environment Variables to Workspace in Python
DESCRIPTION: Customize the workspace environment by adding environment variables while creating the workspace using the ComposioToolSet and WorkspaceType.Docker() with an environment dictionary.

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet(
    workspace_config=WorkspaceType.Docker(
        environment={
            "SOME_API_TOKEN": "<SOME_API_TOKEN>",
        }
    )
)

----------------------------------------

TITLE: Installing Composio and Connecting GitHub Account
DESCRIPTION: This snippet shows how to install the Composio LangChain package, connect a GitHub account, and view available applications for connection.

LANGUAGE: bash
CODE:
# Install Composio LangChain package
pip install composio-griptape

# Connect your GitHub account
composio-cli add github

# View available applications you can connect with
composio-cli show-apps

----------------------------------------

TITLE: Importing Required Packages for AI Agent
DESCRIPTION: Imports necessary Python modules from LangChain, HuggingFace, and Composio for creating an AI agent capable of news retrieval and summarization.

LANGUAGE: python
CODE:
from langchain_community.document_loaders import WebBaseLoader
#To use Open Source LLMs from huggingface
from langchain_community.llms import HuggingFaceEndpoint
from langchain.chat_models import ChatHuggingFace
#Langchain Utilities for Agents
from langchain.agents import AgentExecutor, load_tools
from langchain.agents.format_scratchpad import format_log_to_str
from langchain.agents.output_parsers import (
    ReActJsonSingleInputOutputParser,
)
from langchain import hub
from langchain.tools.render import render_text_description
#Importing Composio
from composio_langchain import ComposioToolSet, Action, App
import os
import dotenv

----------------------------------------

TITLE: Listing Dependencies for Composio Project
DESCRIPTION: This snippet lists the required dependencies for the Composio project. It includes composio-llamaindex, llama-index for AI-powered data processing, and python-dotenv for managing environment variables.

LANGUAGE: plaintext
CODE:
composio-llamaindex
llama-index
python-dotenv

----------------------------------------

TITLE: Defining OpenAPI GET Endpoint for Listing Action Tags
DESCRIPTION: This YAML snippet specifies an OpenAPI endpoint for retrieving a list of action tags. It defines the HTTP method (GET) and the endpoint path (/api/v2/actions/list/tags).

LANGUAGE: yaml
CODE:
openapi: get /api/v2/actions/list/tags

----------------------------------------

TITLE: Initializing Composio Toolset
DESCRIPTION: Set up the Composio toolset and configure it to use the CodeInterpreter application.

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.CODEINTERPRETER])

----------------------------------------

TITLE: Initializing Base Packages and Language Model
DESCRIPTION: Setup code for importing required CrewAI packages and initializing the OpenAI language model with API key.

LANGUAGE: python
CODE:
from crewai import Agent, Task
from langchain_openai import ChatOpenAI

# Initialize the language model with your OpenAI API key
llm = ChatOpenAI(openai_api_key="sk-<OPENAI KEY>")

----------------------------------------

TITLE: OpenAPI PATCH Integration Endpoint
DESCRIPTION: OpenAPI specification defining the PATCH endpoint path for updating an existing integration by ID.

LANGUAGE: openapi
CODE:
openapi: patch /api/v1/integrations/{integrationId}

----------------------------------------

TITLE: Executing Agent Tasks
DESCRIPTION: Implementation of agent task execution for GitHub repository operations

LANGUAGE: python
CODE:
# Define task
task = "Star a repo composiohq/composio on GitHub"

# Send a message to the model
response = chat.send_message(task)

----------------------------------------

TITLE: Setting up Function Calling Worker for Community Reward Agent in Python
DESCRIPTION: This snippet sets up the FunctionCallingAgentWorker with system instructions for the Solana agent, including its capabilities and purpose.

LANGUAGE: python
CODE:
prefix_messages = [
    ChatMessage(
        role="system",
        content=(
              "You are a solana agent that can execute actions with Solana Kit"
              "You also have access to Slack and can fetch conversation history and get channel id based on the channel name. You can also get username based on the user id by fetching all users in the slack team. Your job is to find out the most active community member and reward them with 1 SOL"
        ),
    )
]

agent = FunctionCallingAgentWorker(
    tools=tools,
    llm=llm,
    prefix_messages=prefix_messages,
    max_function_calls=10,
    allow_parallel_tool_calls=False,
    verbose=True,
).as_agent()

----------------------------------------

TITLE: Getting Action Schema with JavaScript SDK
DESCRIPTION: JavaScript code to import Composio libraries, initialize the toolset, get the action schema, and print the parameters in a readable format.

LANGUAGE: javascript
CODE:
import { OpenAIToolSet } from "composio-core";

const composio_toolset = new OpenAIToolSet();

const schema = await composio_toolset.getActionsSchema({
  actions: ["github_star_a_repository_for_the_authenticated_user"],
});

console.log(JSON.stringify(schema[0].parameters.properties, null, 2));

----------------------------------------

TITLE: Importing Dependencies for Code Execution Agent
DESCRIPTION: Imports required packages including dotenv for environment variables, ChatOpenAI, and Langchain components for agent creation.

LANGUAGE: javascript
CODE:
import dotenv from 'dotenv';
import { ChatOpenAI } from "@langchain/openai";
import { createOpenAIFunctionsAgent, AgentExecutor } from "langchain/agents";
import { pull } from "langchain/hub";
import { LangchainToolSet } from "composio-core";

dotenv.config();

----------------------------------------

TITLE: Installing Composio and OpenAI Packages
DESCRIPTION: Install the required packages for Composio and OpenAI integration using pip for Python or npm for JavaScript.

LANGUAGE: bash
CODE:
pip install composio-openai openai

LANGUAGE: javascript
CODE:
npm i composio-core openai

----------------------------------------

TITLE: Executing Camel AI Agent Tasks
DESCRIPTION: Implementing the execution logic for the Camel AI agent to perform GitHub repository starring based on user prompts

LANGUAGE: python
CODE:
prompt = (
    "I have created a new Github Repo,"
    "Please star my github repository: camel-ai/camel"
)
user_msg = BaseMessage.make_user_message(role_name="User", content=prompt)
print(Fore.YELLOW + f"user prompt:\n{prompt}\n")

response = agent.step(user_msg)
for msg in response.msgs:
    print_text_animated(Fore.GREEN + f"Agent response:\n{msg.content}\n")

----------------------------------------

TITLE: Running Content Writing Agent
DESCRIPTION: Command to execute the main Python script that runs the content writing agent implementation.

LANGUAGE: shell
CODE:
python cookbook/python-examples/advanced_agents/content_writing_agent/llamaindex/main.py

----------------------------------------

TITLE: Defining OpenAPI PATCH Endpoint for Connected Account Data in YAML
DESCRIPTION: This YAML snippet specifies an OpenAPI patch endpoint for updating data associated with a connected account. It defines the path parameters and the HTTP method for the API endpoint.

LANGUAGE: yaml
CODE:
openapi: patch /api/v1/connectedAccounts/{connectedAccountId}/data

----------------------------------------

TITLE: Creating Custom Cowsay Action
DESCRIPTION: Define a custom action that uses cowsay to display messages. Includes input parameter definitions and function implementation.

LANGUAGE: python
CODE:
@action(toolname="cow", requires=["cowsay"])
def my_custom_action(message: str) -> str:
    """
    Cow will say whatever you want it to say.

    :param message: Message to be displayed
    :return greeting: Formatted message.
    """
    import cowsay
    
    return cowsay.get_output_string("cow", message)

LANGUAGE: javascript
CODE:
await toolset.createAction({
    actionName: "myCustomAction",
    description: "Cow will say whatever you want it to say",
    inputParams: z.object({
        message: z.string()
    }),
    callback: async (inputParams) => {
        const message = inputParams.message;
        const cowMessage = `Cow says: ${message}`;
        return cowMessage;
    }
});

----------------------------------------

TITLE: Importing Base Packages for Lyzr-Composio Integration
DESCRIPTION: Setting up necessary imports and initializing OpenAI model for Lyzr agent

LANGUAGE: python
CODE:
from lyzr_automata import Task, Agent
from lyzr_automata.ai_models.openai import OpenAIModel
from composio_lyzr import ComposioToolSet, App, Action
from lyzr_automata.pipelines.linear_sync_pipeline import LinearSyncPipeline


open_ai_text_completion_model = OpenAIModel( api_key="sk-...", parameters={"model": "gpt-4-turbo"})

----------------------------------------

TITLE: Configuring GitHub Tools with Composio
DESCRIPTION: Setting up GitHub tools integration using Composio's toolset for repository starring functionality

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_actions(
    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]
)

----------------------------------------

TITLE: Initializing Composio Tools and OpenAI Model
DESCRIPTION: Sets up the Composio toolset with EXA, BrowserBase, and Google Sheets capabilities, and initializes the GPT-4 model.

LANGUAGE: python
CODE:
load_dotenv()

# Initialize Composio ToolSet and OpenAI model
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.EXA, App.BROWSERBASE_TOOL, App.GOOGLESHEETS])
llm = OpenAI(model="gpt-4")

----------------------------------------

TITLE: Defining GET Endpoint for Callback URL Trigger in OpenAPI YAML
DESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /api/v1/triggers/callback_url endpoint. It outlines the request parameters, response structure, and possible status codes for retrieving callback URL trigger information.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/triggers/callback_url

----------------------------------------

TITLE: Defining OpenAPI Specification for Team Invite Endpoint in YAML
DESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /api/v1/team/invite endpoint. It specifies the endpoint path and HTTP method for inviting team members.

LANGUAGE: yaml
CODE:
openapi: post /api/v1/team/invite

----------------------------------------

TITLE: Retrieving GitHub Tools
DESCRIPTION: Gets all available tools for the GitHub app using the Composio ToolSet.

LANGUAGE: python
CODE:
tools = toolset.get_tools(apps=[App.GITHUB])

----------------------------------------

TITLE: Creating and Running the Crew
DESCRIPTION: Set up a Crew instance with the agent and task, then execute the code.

LANGUAGE: python
CODE:
crew = Crew(
    agents=[python_executor_agent],
    tasks=[execute_code_task],
    process=Process.sequential,
)

result = crew.kickoff()
print(result)

----------------------------------------

TITLE: Invoking the Composio Agent with Image Analysis Task in Python
DESCRIPTION: This snippet shows how to create and invoke a Composio agent to analyze an image, using the previously configured tools and LLM.

LANGUAGE: python
CODE:
task = "Describe the image. Image Path: cat.png"

agent = create_openai_functions_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

agent_executor.invoke({"input": task})

----------------------------------------

TITLE: Executing Agno Agent to Star GitHub Repository
DESCRIPTION: Executes the Agno Agent with a prompt to star a specific GitHub repository.

LANGUAGE: python
CODE:
agent.print_response("Can you star ComposioHQ/composio repo?")

----------------------------------------

TITLE: Checking Connection Status in Composio
DESCRIPTION: Shows how to check the status of a connection using the connected account ID. This is useful for verifying if a connection is active, initiated, or failed.

LANGUAGE: python
CODE:
connection = toolset.get_connected_account(id="83f5e791-e6c4-4cd6-8e3a-dada66b0a8f1")
print(connection.status)

LANGUAGE: javascript
CODE:
const connection = await toolset.connectedAccounts.get({
    connectedAccountId: "<connected_account_id>"
});
console.log(connection.status);

----------------------------------------

TITLE: Executing Setup Script
DESCRIPTION: Command to run the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: UV Package Manager Common Commands
DESCRIPTION: Essential UV package manager commands for package installation, virtual environment management, and environment activation.

LANGUAGE: bash
CODE:
# Install a package
uv pip install package_name

# Install a package in development/editable mode
uv pip install -e .

# Install requirements from a file
uv pip install -r requirements.txt

# Create a virtual environment
uv venv

# Activate the virtual environment
# On Linux/macOS:
source .venv/bin/activate
# On Windows:
.venv\Scripts\activate

----------------------------------------

TITLE: Configuring Specific Actions for Composio Autogen Integration
DESCRIPTION: Python code demonstrating how to limit the actions an Autogen agent can execute using Composio tools.

LANGUAGE: python
CODE:
composio_tools.register_tools(actions=[Action.GITHUB_CREATE_ISSUE])

----------------------------------------

TITLE: Starting Griptape Agent Chat
DESCRIPTION: This code snippet initiates a chat session with the Griptape agent, allowing for interaction and command input.

LANGUAGE: python
CODE:
Chat(agent).start()

----------------------------------------

TITLE: Executing Main Application
DESCRIPTION: Command to run the main Python script that starts the Youtube summary agent.

LANGUAGE: shell
CODE:
python cookbook/python-examples/quickstarters/transcript_insight_generator/langgraph/main.py

----------------------------------------

TITLE: OpenAPI GET Endpoint Definition for Connected Account Info
DESCRIPTION: YAML specification for the API endpoint that retrieves information about a specific connected account using its ID.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/connectedAccounts/{connectedAccountId}/info

----------------------------------------

TITLE: Defining AI Agent for News Retrieval and Summarization
DESCRIPTION: Creates an AI agent using the LangChain framework, combining the language model, prompt template, and tools for news retrieval and summarization tasks.

LANGUAGE: python
CODE:
chat_model_with_stop = chat_model.bind(stop=["\nInvalidStop"])
agent = (
{
"input": lambda x: x["input"],
"agent_scratchpad": lambda x: format_log_to_str(x["intermediate_steps"]),
}
| prompt
| chat_model_with_stop
| ReActJsonSingleInputOutputParser()
)

----------------------------------------

TITLE: Initializing Autogen Agents with Composio Integration
DESCRIPTION: Python code to set up the environment, import necessary packages, and configure Autogen agents with Composio integration.

LANGUAGE: python
CODE:
from autogen import AssistantAgent, UserProxyAgent
from composio_autogen import ComposioToolSet, App, Action
import os

# Configuration for the language model
llm_config = {"config_list": [{"model": "gpt-4-turbo", "api_key": os.environ["OPENAI_API_KEY"]}]}

# Initialize the AssistantAgent
chatbot = AssistantAgent(
    "chatbot",
    system_message="Reply TERMINATE when the task is done or when user's content is empty",
    llm_config=llm_config,
)

# Initialize the UserProxyAgent
user_proxy = UserProxyAgent(
    "user_proxy",
    is_termination_msg=lambda x: x.get("content", "") and "TERMINATE" in x.get("content", ""),
    human_input_mode="NEVER",  # Don't take input from User
    code_execution_config={"use_docker": False}
)

----------------------------------------

TITLE: Defining GET Endpoint for Retrieving Action Details in OpenAPI
DESCRIPTION: This YAML snippet specifies the OpenAPI structure for the GET /api/v2/actions/{actionId} endpoint. It defines the path, parameters, and expected responses for retrieving details of a specific action using its unique identifier.

LANGUAGE: yaml
CODE:
openapi: get /api/v2/actions/{actionId}

----------------------------------------

TITLE: Executing LangChain Agent to Star GitHub Repository
DESCRIPTION: Invoke the LangChain agent to perform a GitHub action, specifically starring a repository.

LANGUAGE: python
CODE:
task = "Star a repo composiohq/composio on GitHub"
agent_executor.invoke({"input": task})

LANGUAGE: javascript
CODE:
const response = await agentExecutor.invoke({ input: "Star a repo composiohq/composio on GitHub" });
console.log(response);

----------------------------------------

TITLE: Enabling Gmail Triggers
DESCRIPTION: Configuration for enabling Gmail message triggers to monitor new emails with specified parameters.

LANGUAGE: shell
CODE:
composio triggers enable gmail_new_gmail_message

LANGUAGE: python
CODE:
entity = toolset.get_entity(id="default")

entity.enable_trigger(
    app=App.GMAIL,
    trigger_name="gmail_new_gmail_message",
    config={"userId": "me", "interval": 1, "labelIds": "INBOX"},
)

----------------------------------------

TITLE: Listing Dependencies for Composio Project
DESCRIPTION: A list of required packages and dependencies including the core Composio components, CrewAI integration, environment management with python-dotenv, and LangChain OpenAI integration.

LANGUAGE: text
CODE:
composio-core
composio-crewai
python-dotenv
langchain-openai
crewai

----------------------------------------

TITLE: Defining Agno Agent with GitHub Tools
DESCRIPTION: Create an Agno Agent instance with the retrieved GitHub tools, enabling tool call visibility.

LANGUAGE: python
CODE:
agent = Agent(tools=tools, show_tool_calls=True)

----------------------------------------

TITLE: Installing Composio Libraries
DESCRIPTION: Shows how to install the necessary Composio libraries using pip for Python and npm for JavaScript.

LANGUAGE: bash
CODE:
pip install composio-core

LANGUAGE: bash
CODE:
npm install composio-core

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Running SQL Agent Python Script
DESCRIPTION: Command to execute the main Python script that implements the SQL agent functionality, including query execution and logging.

LANGUAGE: shell
CODE:
python cookbook/examples/sql_agent/main.py

----------------------------------------

TITLE: Defining DELETE Endpoint for Connected Accounts in OpenAPI
DESCRIPTION: OpenAPI specification for a DELETE endpoint that removes a connected account using its unique identifier. The path parameter includes the connected account ID.

LANGUAGE: yaml
CODE:
openapi: delete /api/v1/connectedAccounts/{connectedAccountId}

----------------------------------------

TITLE: Initializing Language Model for AI Agent
DESCRIPTION: Loads environment variables and initializes a HuggingFace language model (Zephyr-7b-beta) for use in the AI agent.

LANGUAGE: python
CODE:
dotenv.load_dotenv()
llm = HuggingFaceEndpoint(repo_id="HuggingFaceH4/zephyr-7b-beta", huggingfacehub_api_token=os.getenv("HUGGINGFACEHUB_API_TOKEN"))
chat_model = ChatHuggingFace(llm=llm)

----------------------------------------

TITLE: Executing GitHub Tasks via Autogen Agent
DESCRIPTION: Python code to initiate a task (starring a GitHub repository) using the configured Autogen agent with Composio integration.

LANGUAGE: python
CODE:
task = "Star a repo composiohq/composio on GitHub"

# Initiate the task
response = user_proxy.initiate_chat(chatbot, message=task)

print(response.chat_history)

----------------------------------------

TITLE: Setting Up Script Permissions
DESCRIPTION: Command to make the setup script executable on Unix-based systems (Linux/macOS).

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Getting GitHub Tools in Python with Composio
DESCRIPTION: This code demonstrates how to initialize the ComposioToolSet and retrieve all actions for the GitHub tool in Python.

LANGUAGE: python
CODE:
from composio_langchain import ComposioToolSet, Action, App

tool_set = ComposioToolSet()

# Get all actions from a tool
tools = tool_set.get_tools(apps=[App.GITHUB])

----------------------------------------

TITLE: Importing Libraries and Initializing ComposioToolSet and LLM
DESCRIPTION: This code snippet demonstrates how to import necessary libraries, initialize ComposioToolSet with an API key, and configure the language model (LLM) for use with Autogen.

LANGUAGE: python
CODE:
from autogen import AssistantAgent, UserProxyAgent
from composio_autogen import ComposioToolSet, App

toolset = ComposioToolSet(api_key="<your-composio-api-key>")
llm_config = {
    "config_list": [
        {
            "model": "gpt-4o-mini",
            "api_key": "<your-api-key>",
        }
    ]
}

----------------------------------------

TITLE: Listing All Apps in Composio using JavaScript
DESCRIPTION: This code snippet demonstrates how to list all available tools (apps) in Composio using the JavaScript SDK.

LANGUAGE: javascript
CODE:
import { Composio } from "composio-core";

const composio = new Composio();
console.log(await composio.apps.list());

----------------------------------------

TITLE: Installing Required Packages for Composio and Cloudflare Worker
DESCRIPTION: Installs the necessary packages including composio-core, wrangler, and fs using npm.

LANGUAGE: bash
CODE:
npm install composio-core -g wrangler fs

----------------------------------------

TITLE: Initiating Gmail Connection
DESCRIPTION: Shows how to initiate a Gmail connection by generating a redirect URL for OAuth flow and handling the connection status. Requires a redirect URL and unique entity ID for user identification.

LANGUAGE: python
CODE:
redirect_url = "https://yourwebsite.com/connection/success"
entity_id = "Jessica"  # This is the unique identifier for the user

# Initiate the connection
connection_request = toolset.initiate_connection(
    entity_id=entity_id,
    app=App.GMAIL,
    redirect_url=redirect_url,
)

if connection_request.connectionStatus == "INITIATED":
    print(connection_request.redirectUrl)
    print("Connection Status should be active after user completes the authentication process, you can now test by fetching the connection.")
    
elif connection_request.connectionStatus == "ACTIVE":
    print("Connection Status is active, you can now test by calling the tool.")
else:
    print("Connection process failed, please try again.")

LANGUAGE: javascript
CODE:
const redirectUrl = "https://yourwebsite.com/connection/success"

const entityId = "Jessica" // This is the unique identifier for the user

const connectionRequest = await toolset.client.connectedAccounts.initiate({
    entityId: entityId,
    integrationId: expectedInputFields.integrationId, 
    redirectUri: redirectUrl,
    authMode: "OAUTH2",
    authConfig: {},
});

if (connectionRequest.connectionStatus === "INITIATED") {
    console.log(connectionRequest.redirectUrl);
} else if (connectionRequest.connectionStatus === "ACTIVE") {
    console.log("Connection Status is active, you can now test by calling the tool.");
} else {
    console.log("Connection process failed, please try again.");
}

----------------------------------------

TITLE: Listing Python Package Dependencies
DESCRIPTION: Specifies the core dependencies needed to run the Composio project: composio-gemini for Gemini integration, streamlit for the web interface, and python-dotenv for environment configuration.

LANGUAGE: plaintext
CODE:
composio-gemini
streamlit
python-dotenv

----------------------------------------

TITLE: Initializing LangChain Base Components
DESCRIPTION: Setup of basic LangChain components including OpenAI functions agent and chat configuration

LANGUAGE: python
CODE:
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain import hub
from langchain_openai import ChatOpenAI

# Initialize LangChain OpenAI Chat
llm = ChatOpenAI()

# Pull the agent prompt configuration
prompt = hub.pull("hwchase17/openai-functions-agent")

----------------------------------------

TITLE: Installing Required Packages
DESCRIPTION: Installation commands for required packages including composio-langgraph and related dependencies

LANGUAGE: bash
CODE:
pip install composio-langgraph

LANGUAGE: bash
CODE:
npm i @langchain/langgraph
npm i composio-core 
npm i @langchain/openai
npm i @langchain/core

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Shell command to change the current directory to the project location containing setup and source files.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Initializing Composio Toolset for Code Execution
DESCRIPTION: This snippet shows how to set up the Composio toolset to access the code interpreter functionality in both Python and JavaScript.

LANGUAGE: python
CODE:
load_dotenv()

# Set up Composio tools
composio_toolset = ComposioToolSet()

# Get tools from the Code Interpreter app
tools = composio_toolset.get_tools(apps=[App.CODEINTERPRETER])

LANGUAGE: javascript
CODE:
// Set up Composio tools
const composioToolset = new LangchainToolSet({
    apiKey: process.env.COMPOSIO_API_KEY
});

// Get specific tools for code execution
const tools = await composioToolset.getTools({
    actions: ["codeinterpreter_execute_code"]
});

----------------------------------------

TITLE: Running SQL Agent Script
DESCRIPTION: Command to execute the main Python script that runs the SQL agent functionality.

LANGUAGE: shell
CODE:
python cookbook/examples/sql_agent/main.py

----------------------------------------

TITLE: Advanced Composio Tool Configuration
DESCRIPTION: Examples of filtering specific actions and applications for enhanced security and focused operations.

LANGUAGE: python
CODE:
toolsGithubCreateIssue = ComposioToolSet(actions=[Action.GITHUB_CREATE_ISSUE])

toolsAsanaGithub = ComposioToolSet(apps=[App.ASANA, App.GITHUB])

----------------------------------------

TITLE: Setting Up ReAct Style Prompt Template
DESCRIPTION: Configures a ReAct (Reasoning and Acting) style prompt template using LangChain Hub for the AI agent's interaction.

LANGUAGE: python
CODE:
#We use Langchain Hub for the Prompt Template
prompt = hub.pull("hwchase17/react-json")
#prompt.partial assigns values to some parameters defined within the prompt template
prompt = prompt.partial(
tools=render_text_description(tools),
tool_names=", ".join([t.name for t in tools]),
)

----------------------------------------

TITLE: Defining GET Endpoint for Retrieving Integration Details in OpenAPI YAML
DESCRIPTION: This snippet specifies the OpenAPI path and method for retrieving integration details by ID. It uses a GET request to the '/api/v1/integrations/{integrationId}' endpoint.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/integrations/{integrationId}

----------------------------------------

TITLE: Initializing Composio Tools for AI Agent
DESCRIPTION: Sets up the Composio toolset and retrieves the SERP API tool for use in the AI agent.

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.SERPAPI])

----------------------------------------

TITLE: Executing Setup Script
DESCRIPTION: Command to run the setup script for environment configuration and dependency installation.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Executing Custom Action with OpenAI
DESCRIPTION: Execute the custom action using OpenAI's chat completions API and handle the tool calls.

LANGUAGE: python
CODE:
tools = toolset.get_tools(actions=[my_custom_action])

task = "Say 'AI is the future' using cowsay"

response = openai_client.chat.completions.create(
model="gpt-4o-mini",
tools=tools,
messages=
    [
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": task},
    ],
)

result = toolset.handle_tool_calls(response)
print(result)

LANGUAGE: javascript
CODE:
const tools = await toolset.getTools({
    actions: ["myCustomAction"]
});

const instruction = "Say 'AI is the future' using cowsay";

const response = await openai_client.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [{ role: "user", content: instruction }],
    tools: tools,
    tool_choice: "auto",
});

const result = await toolset.handleToolCall(response);
console.log(result);

----------------------------------------

TITLE: Connecting GitHub Account Using Composio CLI and SDK
DESCRIPTION: This snippet shows how to connect a GitHub account using both the Composio CLI and SDK. It includes steps to initiate the connection and obtain an authentication URL.

LANGUAGE: shell
CODE:
composio login 
composio add github

LANGUAGE: python
CODE:
toolset = ComposioToolSet()
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

LANGUAGE: javascript
CODE:
const connection = await toolset.connectedAccounts.initiate({appName: "github"})
console.log(`Open this URL to authenticate: ${connection.redirectUrl}`);

----------------------------------------

TITLE: Connecting GitHub Account Using Composio CLI and SDK
DESCRIPTION: This snippet shows how to connect a GitHub account using both the Composio CLI and SDK. It includes steps to initiate the connection and obtain an authentication URL.

LANGUAGE: shell
CODE:
composio login 
composio add github

LANGUAGE: python
CODE:
toolset = ComposioToolSet()
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

LANGUAGE: javascript
CODE:
const connection = await toolset.connectedAccounts.initiate({appName: "github"})
console.log(`Open this URL to authenticate: ${connection.redirectUrl}`);

----------------------------------------

TITLE: Initializing Composio SDK
DESCRIPTION: Initialize the Composio SDK using an API key obtained from the Composio dashboard. This step is only necessary if Composio hasn't been set up via CLI.

LANGUAGE: python
CODE:
from composio import ComposioToolSet
composio_toolset = ComposioToolSet(api_key=*COMPOSIO_API_KEY*)

----------------------------------------

TITLE: Package Dependencies List
DESCRIPTION: A list of Python package dependencies specifying LlamaIndex core package and its LLM integrations with OpenAI and Groq, plus python-dotenv for environment management.

LANGUAGE: plaintext
CODE:
composio-llamaindex
llama-index-llms-openai
llama-index-llms-groq
python-dotenv

----------------------------------------

TITLE: Adding App-Level Metadata to ComposioToolSet in Python
DESCRIPTION: This code snippet demonstrates how to add metadata at the App-level when initializing the ComposioToolSet, which applies to all actions within a specific tool or app.

LANGUAGE: python
CODE:
toolset = ComposioToolSet(
    metadata={
        App.<app_name>: {
            "attribute": "value",
        }
    }
)

----------------------------------------

TITLE: Connecting to GitHub Account using Composio CLI
DESCRIPTION: This snippet demonstrates how to connect a GitHub account using Composio CLI commands.

LANGUAGE: bash
CODE:
composio login 
composio add github

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment, installs dependencies, logs into Composio, and adds necessary tools.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Setting up GitHub User Connection
DESCRIPTION: Function to establish and verify GitHub connection for a given entity. Handles both new connection creation and existing connection verification.

LANGUAGE: typescript
CODE:
import { OpenAI } from "openai";
import { OpenAIToolSet } from "composio-core";

const COMPOSIO_API_KEY = "<your-composio-api-key>"
const OPEN_AI_API_KEY = "<your-openai-api-key>"
const toolset = new OpenAIToolSet({apiKey: COMPOSIO_API_KEY,});

const appName = 'github';

async function setupUserConnectionIfNotExists(entityId) {
        const entity = toolset.client.getEntity(entityId);
        const connection = await entity.getConnection({ appName: appName });

        if (!connection) {
            const connection = await entity.initiateConnection({appName: appName});
            console.log("Log in via: ", connection.redirectUrl);
            return connection.waitUntilActive(60);
        }

        return connection;
}

----------------------------------------

TITLE: Defining GET Endpoint for Connected Accounts in OpenAPI
DESCRIPTION: This YAML snippet specifies the OpenAPI definition for the GET /api/v1/connectedAccounts endpoint. It describes the structure and behavior of the API for retrieving connected accounts.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/connectedAccounts

----------------------------------------

TITLE: Adding SERP Tool with Composio
DESCRIPTION: Uses Composio commands to log in and add the SERP (Search Engine Results Page) tool for web search functionality.

LANGUAGE: python
CODE:
%composio login
%composio add serpapi

----------------------------------------

TITLE: Getting GitHub Tools for Repository Operations
DESCRIPTION: Retrieve specific GitHub tools for repository operations using the ComposioToolSet.

LANGUAGE: python
CODE:
tools = composio_toolset.get_tools(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])

----------------------------------------

TITLE: Running Ollama and Pulling Mistral Model
DESCRIPTION: Command to start the Ollama service and pull the Mistral language model.

LANGUAGE: sh
CODE:
ollama serve & ollama pull mistral

----------------------------------------

TITLE: Registering GitHub Tools with Composio for Autogen
DESCRIPTION: Python code to initialize Composio Toolset and register GitHub tools for use with Autogen agents.

LANGUAGE: python
CODE:
from composio_autogen import ComposioToolSet, App, Action

# Initialize Composio Toolset
composio_tools = ComposioToolSet()

# Register tools with appropriate executors
composio_tools.register_tools(tools=[App.GITHUB], caller=chatbot, executor=user_proxy)

----------------------------------------

TITLE: Setting Up GitHub User Connection in TypeScript
DESCRIPTION: This function sets up a user's GitHub connection if it doesn't already exist. It uses the Composio SDK to initiate a connection and waits for it to become active. It requires an entity ID and uses the COMPOSIO_API_KEY environment variable.

LANGUAGE: typescript
CODE:
const toolset = new LangchainToolSet({ apiKey: process.env.COMPOSIO_API_KEY, });

async function setupUserConnectionIfNotExists(entityId) {
        const entity = toolset.client.getEntity(entityId);
        const connection = await entity.getConnection({ appName: "GITHUB" });

        if (!connection) {
            // If this entity/user hasn't already connected the account
            const connection = await entity.initiateConnection({appName: appName});
            console.log("Log in via: ", connection.redirectUrl);
           return connection.waitUntilActive(60);
        }

       return connection;
}

----------------------------------------

TITLE: Pydantic Request Model
DESCRIPTION: Define the request model for input validation using Pydantic.

LANGUAGE: python
CODE:
class TaskRequest(BaseModel):
    task: str  # This will contain the natural language task description

----------------------------------------

TITLE: Filtering Specific Actions in Composio ToolSet
DESCRIPTION: This snippet demonstrates how to restrict agents to execute only specific actions, such as creating GitHub issues.

LANGUAGE: python
CODE:
# To restrict agents from executing any actions, filter specific actions 
actions = composio_toolset.get_tools(actions=[Action.GITHUB_CREATE_ISSUE])

----------------------------------------

TITLE: Fetching Authentication Parameters for Shopify Connection
DESCRIPTION: This snippet demonstrates how to fetch the expected authentication parameters for a Shopify connection using the Composio library. It retrieves the required fields that need to be collected from the user.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App
toolset = ComposioToolSet()

response = toolset.get_expected_params_for_user(app=App.SHOPIFY) # can use integration_id instead of app

print(response["expected_params"])

LANGUAGE: javascript
CODE:
import { Composio, OpenAIToolSet } from "composio-core";

const toolset = new OpenAIToolSet();

const response = await toolset.getExpectedParamsForUser({
  app: "shopify",
});

console.log(response["expectedInputFields"]);

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script for environment configuration and dependency installation

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Defining Custom Output Postprocessor for Linear Action in TypeScript
DESCRIPTION: Create a custom function to modify the output data for the LINEAR_CREATE_LINEAR_ISSUE action, extracting the issue ID and success status.

LANGUAGE: TypeScript
CODE:
const postProcessor: TPostProcessor = ({ actionName, appName, toolResponse }: {
  actionName: string;
  appName: string;
  toolResponse: ActionExecutionResDto;
}) => {
  const issueId = toolResponse.data.id;
  return { data: { id: issueId }, successful: true };
}

----------------------------------------

TITLE: Configuring LiteLLM Router for GitHub Repository Interaction
DESCRIPTION: This code configures the LiteLLM Router to generate a completion for starring a GitHub repository using the Anthropic Claude model.

LANGUAGE: Python
CODE:
response = router.completion(
    model="anthropic/claude-3-5",
    messages=[
        {"role": "user", "content": "Star the repository composiohq/composio on github"},
    ],
    tools=tools,
    tool_choice="auto",
)

----------------------------------------

TITLE: Configuring Griptape Agent with Composio Tools
DESCRIPTION: Setup code to create a Griptape agent with Composio GitHub integration tools.

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps = [App.GITHUB])

agent = Agent(
tools=tools
)

----------------------------------------

TITLE: GitHub Authentication Setup
DESCRIPTION: Commands for logging into Composio and adding GitHub integration via CLI or Python.

LANGUAGE: bash
CODE:
composio login 
composio add github

LANGUAGE: python
CODE:
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script that configures the environment and installs dependencies

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Handling Tool Calls in Composio
DESCRIPTION: Process the response from the Google AI model using the Composio toolset to handle tool calls and execute the requested action.

LANGUAGE: python
CODE:
result = composio_toolset.handle_response(response)
print("Function call result:")
print(result)

----------------------------------------

TITLE: Importing Libraries and Initializing Composio and Gemini
DESCRIPTION: This code snippet imports necessary libraries and initializes the Gemini client and Composio ToolSet with API keys.

LANGUAGE: python
CODE:
from google.genai import types
from google import genai
from composio_gemini import Action, ComposioToolSet, App

client = genai.Client(api_key="<gemini-api-key>")
toolset = ComposioToolSet(api_key="<composio-api-key>")

----------------------------------------

TITLE: Listing Python Package Dependencies for Composio
DESCRIPTION: This snippet lists the required Python packages for the Composio project. It includes the core langchain library, the OpenAI integration for langchain, and a custom composio-langchain package.

LANGUAGE: plaintext
CODE:
langchain
langchain-openai
composio-langchain

----------------------------------------

TITLE: Setting Up Script Permissions
DESCRIPTION: Command to make the setup script executable on Linux/macOS systems

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: JavaScript Implementation for Versioned Actions
DESCRIPTION: Placeholder for upcoming JavaScript implementation of versioned actions in Composio.

LANGUAGE: javascript
CODE:
coming soon!

----------------------------------------

TITLE: Initializing Composio's OpenAI Toolset and OpenAI in JavaScript
DESCRIPTION: Set up the development environment by initializing Composio's OpenAI Toolset and OpenAI client in JavaScript.

LANGUAGE: javascript
CODE:
import { OpenAI } from "openai";
import { OpenAIToolSet } from "composio-core";

const openai_client = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

const composio_toolset = new OpenAIToolSet({
    apiKey: process.env.COMPOSIO_API_KEY,
});

----------------------------------------

TITLE: Installing SweKit and Core Packages
DESCRIPTION: Commands to install the core SWE Development Kit packages using pip

LANGUAGE: bash
CODE:
pip install swekit composio-core

----------------------------------------

TITLE: Preparing LLM Model
DESCRIPTION: Initialization of the language model with tool binding

LANGUAGE: python
CODE:
model = ChatOpenAI(temperature=0, streaming=True)
model_with_tools = model.bind_tools(functions)

----------------------------------------

TITLE: Implementing Action Class Definition
DESCRIPTION: Defines an action class with request/response schemas and execution logic for the local tool.

LANGUAGE: python
CODE:
from pydantic import BaseModel, Field
from composio.tools.local.base import Action

class <RequestSchema>(BaseModel):
    # Define input schema for your action
    # Example:
    # text: str = Field(..., description="Input text for the action")

class <ResponseSchema>(BaseModel):
    # Define output schema for your action
    # Example:
    # result: str = Field(..., description="Result of the action")

class <ActionName>(Action[<RequestSchema>, <ResponseSchema>]):
    """
    Description of your action.
    """

    display_name = "Friendly name of your action"
    _request_schema = <RequestSchema>
    _response_schema = <ResponseSchema>
    _tags = ["tag1", "tag2"]  # Optional tags to categorize your action
    _tool_name = "<tool_name>"  # Tool name, same as directory name

    def execute(
        self, request_data: <RequestSchema>, authorisation_data: dict = {}
    ) -> <ResponseSchema>:
        # Implement logic to process input and return output
        # Example:
        # response_data = {"result": "Processed text: " + request_data.text}
        return {"execution_details": {"executed": True}, "response_data": response_data}

----------------------------------------

TITLE: Connecting GitHub Account via CLI
DESCRIPTION: This snippet shows how to connect a GitHub account using the Composio CLI commands.

LANGUAGE: shell
CODE:
composio login 
composio add github

----------------------------------------

TITLE: Running the Demo
DESCRIPTION: This command executes the demo script to generate a report template using the configured agent.

LANGUAGE: bash
CODE:
node demo.mjs

----------------------------------------

TITLE: Executing Agno Agent to Star GitHub Repository
DESCRIPTION: Use the Agno Agent to process a natural language request for starring a specific GitHub repository.

LANGUAGE: python
CODE:
agent.print_response("Can you star ComposioHQ/composio repo?")

----------------------------------------

TITLE: Installing Dependencies for Composio Development with UV
DESCRIPTION: This snippet shows how to set up a development environment for Composio using UV, including creating a virtual environment and installing the framework and its plugins.

LANGUAGE: bash
CODE:
# Install uv
pip install uv

# Create and activate virtual environment
uv venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate

# Install dependencies
uv pip install -e .
uv pip install -e python/swe

# Install plugins as needed
uv pip install -e python/plugins/autogen
uv pip install -e python/plugins/claude
uv pip install -e python/plugins/crew_ai
uv pip install -e python/plugins/griptape
uv pip install -e python/plugins/julep
uv pip install -e python/plugins/langchain
uv pip install -e python/plugins/llamaindex
uv pip install -e python/plugins/lyzr
uv pip install -e python/plugins/openai

----------------------------------------

TITLE: Python Package Dependencies
DESCRIPTION: Core dependencies required for the Composio project including ChromaDB for vector storage, sentence transformers for embeddings, OpenClip for vision models, and LangChain integrations.

LANGUAGE: text
CODE:
chromadb
sentence-transformers
open-clip-torch
composio-langchain
langchain-openai

----------------------------------------

TITLE: Executing CrewAI Crew to Perform GitHub Task
DESCRIPTION: This code initiates the CrewAI crew to perform the defined task, which is starring a GitHub repository. It then prints the result of the operation.

LANGUAGE: python
CODE:
result = crew.kickoff()
print(result)

----------------------------------------

TITLE: Initializing Composio and Importing Dependencies
DESCRIPTION: Import required libraries and initialize the ComposioToolSet for interacting with external services.

LANGUAGE: python
CODE:
from composio_smol import ComposioToolSet, Action, App
from smolagents import CodeAgent, HfApiModel
from dotenv import load_dotenv

load_dotenv()

composio_toolset = ComposioToolSet()

----------------------------------------

TITLE: Setting up GitHub Tools via Composio
DESCRIPTION: Initialization of Composio toolset for GitHub integration with LangChain

LANGUAGE: python
CODE:
from composio_langchain import ComposioToolSet, Action, App

# Initialize the toolset for GitHub
tools = ComposioToolSet(apps=[App.GITHUB])

----------------------------------------

TITLE: Filtering Specific Apps for Google AI Model
DESCRIPTION: This snippet demonstrates how to restrict the Google AI model to use only specific tools, such as Asana and GitHub.

LANGUAGE: python
CODE:
# To restrict models from using all tools, filter specific tools 
actions = composio_toolset.get_tool(apps=[App.ASANA, App.GITHUB])

----------------------------------------

TITLE: Admin Event Webhook Payload Example
DESCRIPTION: Example JSON payload structure for Slack Connection Initiation admin event, demonstrating the format of data received when a new connection is established

LANGUAGE: json
CODE:
{
  "event": {
    "method": "POST",
    "path": "/",
    "query": {},
    "client_ip": "3.238.0.124",
    "url": "https://example-webhook-url.com/webhook",
    "headers": {
      "host": "example-webhook-url.com",
      "content-type": "application/json",
      "user-agent": "Composio-Webhook/1.0"
    },
    "body": {
      "type": "connected_account.add.start",
      "timestamp": "2024-10-17T09:10:15.989Z",
      "data": {
        "app_name": "slack",
        "integration_name": "slack_worthy_cyan",
        "integration_id": "dummy-integration-id-12345",
        "body": {},
        "connected_account_id": "dummy-connected-account-id-67890"
      }
    }
  }
}

----------------------------------------

TITLE: Handling Tool Calls and Responses
DESCRIPTION: Shows how to handle tool calls and process agent responses.

LANGUAGE: python
CODE:
response = composio_toolset.handle_tool_calls(response)

print(response.messages)

LANGUAGE: bash
CODE:
[{'content': 'I have starred the repository "composio" for you on GitHub under the account "composiohq".', 'role': 'agent'}]

----------------------------------------

TITLE: Initializing Composio Toolset and OpenAI in Python
DESCRIPTION: Set up the development environment by initializing Composio Toolset and OpenAI client in Python.

LANGUAGE: python
CODE:
from composio_openai import ComposioToolSet, Action
from openai import OpenAI

openai_client = OpenAI()
composio_toolset = ComposioToolSet()

----------------------------------------

TITLE: Installing Required Packages for Composio and LiteLLM Integration
DESCRIPTION: This snippet shows how to install the necessary Python packages (composio_openai and litellm) using pip.

LANGUAGE: bash
CODE:
 pip install composio_openai litellm

----------------------------------------

TITLE: Executing Github Contributor Reward Agent
DESCRIPTION: This snippet demonstrates how to use the agent to find the most active contributor of a Github repository and send them a reward in SOL. It interacts with the user to get the wallet address for the reward.

LANGUAGE: python
CODE:
agent.chat("Find the most active contributor to the composiohq/composio repository and print their username.")
wallet_address = input("Enter the wallet address of the most active contributor: ")
private_key = os.getenv('SOLANA_PRIVATE_KEY')
my_wallet_address = os.getenv('SOLANA_WALLET_ADDRESS')
agent.chat(f"""send 1 SOL from my wallet {my_wallet_address}, my private key is {private_key} to {wallet_address} on devnet using send sol action""")

----------------------------------------

TITLE: Executing GitHub Actions via Agent
DESCRIPTION: Example of using the configured agent to star a GitHub repository

LANGUAGE: python
CODE:
result = agent.chat("Star a repo composiohq/composio on GitHub")

----------------------------------------

TITLE: Installing Composio and Smol Agents Packages in Python
DESCRIPTION: This snippet shows how to install the required packages 'composio-smol' and 'smolagents' using pip.

LANGUAGE: bash
CODE:
pip install composio-smol smolagents

----------------------------------------

TITLE: Configuring Docker Ports in Python and JavaScript
DESCRIPTION: Demonstrates how to configure exposed ports for Docker environments in both Python and JavaScript, useful for web app development.

LANGUAGE: python
CODE:
#Opening ports on Docker for web apps
toolset = ComposioToolSet(
  workspace_config=WorkspaceType.Docker(
    ports={
      8001: 8001,
    }
  )
)

LANGUAGE: javascript
CODE:
//Opening ports on Docker for web apps
toolset = new OpenAIToolset({
  workspaceConfig: Workspace.Docker({
    ports: {
      8001: 8001,
    }
  })
})

----------------------------------------

TITLE: Viewing Lyzr Agent Execution Output
DESCRIPTION: Sample output showing successful execution of the GitHub repository starring task

LANGUAGE: bash
CODE:
START PIPELINE Composio Lyzr :: start time : 1713439069.754745
START TASK Github Starring :: start time : 1713439069.7548192
output : {'execution_details': {'executed': True}, 'response_data': ''}
END TASK Github Starring :: end time :  1713439073.961327 :: execution time : 4.206507921218872
END PIPELINE Composio Lyzr :: end time :  1713439073.961421 :: execution time : 4.206676006317139
Task completed
[{'task_id': UUID('d0280a9d-89ef-4f8b-8145-58588aebcb6c'), 'task_output': {'execution_details': {'executed': True}, 'response_data': ''}}]

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems. This step may be necessary before running the setup script.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Configuring GitHub Tools Integration
DESCRIPTION: Integration code for setting up GitHub tools with Composio, enabling LangChain operations.

LANGUAGE: python
CODE:
from composio_togetherai import Action, ComposioToolSet, App


toolset = ComposioToolSet()
actions = toolset.get_tools(apps=[App.GITHUB])

----------------------------------------

TITLE: Running Pre-PR Checks for Composio
DESCRIPTION: This snippet lists the commands to run various checks before pushing code for a pull request in the Composio project.

LANGUAGE: bash
CODE:
make clean
make format-code
make check-code

----------------------------------------

TITLE: Python Package Dependencies List
DESCRIPTION: A requirements.txt file listing all required Python packages with pinned version numbers. This includes core dependencies like fastapi, openai, docker, and various supporting libraries.

LANGUAGE: plain
CODE:
aiohappyeyeballs==2.4.4
aiohttp==3.11.9
aiosignal==1.3.1
annotated-types==0.7.0
anyio==4.6.2.post1
async-timeout==5.0.1
attrs==24.2.0
bcrypt==4.2.1
certifi==2024.8.30
cffi==1.17.1
charset-normalizer==3.4.0
click==8.1.7
composio_autogen==0.5.50
composio_core==0.5.50
cryptography==44.0.0
diskcache==5.6.3
distro==1.9.0
docker==7.1.0
exceptiongroup==1.2.2
fastapi==0.115.6
FLAML==2.2.0
frozenlist==1.5.0
h11==0.14.0
httpcore==1.0.7
httpx==0.28.0
idna==3.10
importlib_metadata==8.5.0
inflection==0.5.1
jiter==0.8.0
jsonref==1.1.0
jsonschema==4.23.0
jsonschema-specifications==2024.10.1
markdown-it-py==3.0.0
mdurl==0.1.2
multidict==6.1.0
numpy==1.26.4
openai==1.56.1
packaging==24.2
paramiko==3.5.0
propcache==0.2.1
pyautogen==0.4.1
pycparser==2.22
pydantic==2.9.2
pydantic_core==2.23.4
Pygments==2.18.0
PyNaCl==1.5.0
pyperclip==1.9.0
Pysher==1.0.8
python-dotenv==1.0.1
referencing==0.35.1
regex==2024.11.6
requests==2.32.3
rich==13.9.4
rpds-py==0.22.1
semver==3.0.2
sentry-sdk==2.19.0
sniffio==1.3.1
starlette==0.41.3
termcolor==2.5.0
tiktoken==0.8.0
tqdm==4.67.1
typing_extensions==4.12.2
urllib3==2.2.3
uvicorn==0.32.1
websocket-client==1.8.0
yarl==1.18.3
zipp==3.21.0

----------------------------------------

TITLE: Configuring GitHub Actions in Letta
DESCRIPTION: Adding GitHub repository starring capability to the Letta client

LANGUAGE: python
CODE:
tool = client.tools.add_composio_tool(composio_action_name=Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER.name)

LANGUAGE: javascript
CODE:
const tool = await client.tools.addComposioTool(
    "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
)

----------------------------------------

TITLE: Verifying Current User Identity in Composio CLI
DESCRIPTION: Confirms the identity of the current user session by displaying the API key or user information.

LANGUAGE: bash
CODE:
composio whoami

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Shell command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Enabling Triggers via API
DESCRIPTION: Enable triggers using a REST API call to Composio's backend.

LANGUAGE: bash
CODE:
curl --request POST \
--url https://backend.composio.dev/api/v1/triggers/enable/{connectedAccountId}/GMAIL_NEW_GMAIL_MESSAGE \
--header 'Content-Type: application/json' \
--header 'X-API-Key: <x-api-key>' \
--data '{
    "triggerConfig": {}
}'

----------------------------------------

TITLE: Installing Flask for Python Webhook
DESCRIPTION: Command to install the Flask package required for implementing webhook receiver in Python

LANGUAGE: bash
CODE:
pip install flask

----------------------------------------

TITLE: Executing Coinbase Agent Commands
DESCRIPTION: Execute a command to create a wallet and save its details using the configured agent.

LANGUAGE: python
CODE:
agent.chat("Create a coinbase wallet, write the wallet address, seed and wallet id in a file called wallet.txt and get its balance")

----------------------------------------

TITLE: Retrieving GitHub Tools from Composio
DESCRIPTION: This snippet demonstrates how to get all the tools for the GitHub app using the Composio toolset. It mentions that specific actions can be filtered using usecase and tags, with a reference to more detailed documentation.

LANGUAGE: JavaScript
CODE:
const tools = await toolset.getTools({ apps: ["github"] });

----------------------------------------

TITLE: Initializing Letta Client with Composio Integration
DESCRIPTION: Setting up the Letta client and importing necessary libraries for both Python and JavaScript implementations

LANGUAGE: python
CODE:
from letta_client import Letta
from composio_langchain import Action, ComposioToolSet, App

client = Letta(base_url="http://localhost:8283")

LANGUAGE: javascript
CODE:
import { LettaClient } from '@letta-ai/letta-client'
import { ComposioToolSet } from "composio-core"

const client = new LettaClient({
    baseUrl: "http://localhost:8283",
});

const toolset = new ComposioToolSet()

----------------------------------------

TITLE: Defining Agent Configuration
DESCRIPTION: YAML configuration for the PraisonAI agent defining its role, goals, and tasks for GitHub repository management.

LANGUAGE: python
CODE:
agent_yaml = """
framework: "crewai"
topic: "Github Management"

roles:
  developer:
    role: "Developer"
    goal: "An expert programmer"
    backstory: "A developer exploring new codebases and have certain tools available to execute different tasks."
    tasks:
      star_github:
        description: "Star a repo composiohq/composio on GitHub"
        expected_output: "Response whether the task was executed."
""" + tool_section_str

print(agent_yaml)

----------------------------------------

TITLE: Installing Dependencies for Composio
DESCRIPTION: Installation commands for required dependencies to use Composio with OpenAI in Python and JavaScript environments.

LANGUAGE: bash
CODE:
pip install composio_openai openai

LANGUAGE: bash
CODE:
npm install composio-core openai

----------------------------------------

TITLE: Python Package Dependencies
DESCRIPTION: List of required Python packages including composio, crewai, langchain-openai integration, and python-dotenv for environment variable management.

LANGUAGE: text
CODE:
composio-crewai
crewai
langchain-openai
python-dotenv

----------------------------------------

TITLE: Importing Base Packages
DESCRIPTION: Imports essential libraries and configures environment variables for the Calendar Agent

LANGUAGE: javascript
CODE:
import dotenv from 'dotenv';
import { ChatOpenAI } from "@langchain/openai";
import { AgentExecutor, createOpenAIFunctionsAgent } from "langchain/agents";
import { pull } from "langchain/hub";
import { LangchainToolSet } from "composio-core";

dotenv.config();

----------------------------------------

TITLE: Installing Required Packages for Composio and Cloudflare Worker
DESCRIPTION: Install the necessary packages including composio-core, wrangler, and fs using npm.

LANGUAGE: bash
CODE:
npm install composio-core -g wrangler fs

----------------------------------------

TITLE: Setting Up Composio GitHub Tools
DESCRIPTION: Initialization of Composio toolset for GitHub interactions.

LANGUAGE: python
CODE:
from composio_crewai import ComposioToolSet, Action, App

# Initialize the toolset with GitHub application
tools = ComposioToolSet(apps=[App.GITHUB])

----------------------------------------

TITLE: Initializing Coinbase Tools and LLM
DESCRIPTION: Set up the Composio toolset with Coinbase actions and initialize the OpenAI LLM.

LANGUAGE: python
CODE:
toolset = ComposioToolSet(api_key="")
tools = toolset.get_tools(actions=[
    Action.COINBASE_CREATE_WALLET,
    Action.COINBASE_LIST_WALLETS,
    Action.COINBASE_GET_WALLET_INFO,
    Action.COINBASE_SEND_TOKENS,
    Action.COINBASE_CHECK_TRANSFER,
    Action.COINBASE_COINBASE_FAUCET,
    Action.FILETOOL_CREATE_FILE,
    Action.FILETOOL_WRITE
])


llm = OpenAI(model="gpt-4o")

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change the current working directory to the project folder containing essential files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Exporting Action Class
DESCRIPTION: Exports the action class from the actions __init__.py file.

LANGUAGE: python
CODE:
from .<action_name> import <ActionName>

----------------------------------------

TITLE: OpenAPI Endpoint Specification - GET Triggers Logs
DESCRIPTION: YAML specification defining the API endpoint for retrieving trigger logs at /api/v1/triggers/logs using HTTP GET method.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/triggers/logs

----------------------------------------

TITLE: Installing Composio Libraries for Python
DESCRIPTION: Installs the required Composio libraries using pip.

LANGUAGE: shell
CODE:
pip install composio_core composio_openai

----------------------------------------

TITLE: Starting a Chat Session with Google AI Model
DESCRIPTION: Initialize a chat session with the Google AI model for interaction.

LANGUAGE: python
CODE:
# Start a chat session
chat = model.start_chat()

----------------------------------------

TITLE: Running Composio Project with Cloudflare Workers and OpenAI
DESCRIPTION: Commands to install dependencies and start the development server for a Composio project integrated with Cloudflare Workers and OpenAI.

LANGUAGE: shell
CODE:
npm install
npm run start

----------------------------------------

TITLE: Installing Composio OpenAI Agents Package
DESCRIPTION: Command to install the Composio integration package for OpenAI Agents using pip.

LANGUAGE: bash
CODE:
pip install composio_openai_agents

----------------------------------------

TITLE: Starting Griptape Agent Chat Session
DESCRIPTION: Code to initiate an interactive chat session with the configured Griptape agent.

LANGUAGE: python
CODE:
Chat(agent).start()

----------------------------------------

TITLE: Setting up CAMEL agent for GitHub operations
DESCRIPTION: This snippet configures and sets up the CAMEL agent with necessary model configurations and system messages to perform GitHub-related tasks.

LANGUAGE: python
CODE:
assistant_model_config = ChatGPTConfig(
    temperature=0.0,
    tools=tools,
)

model = ModelFactory.create(
    model_platform=ModelPlatformType.OPENAI,
    model_type=ModelType.GPT_3_5_TURBO,
    model_config_dict=assistant_model_config.__dict__,
)


# set up agent
assistant_sys_msg = BaseMessage.make_assistant_message(
    role_name="Developer",
    content=(
        "You are a programmer as well an experienced github user. "
        "When asked given a instruction, "
        "you try to use available tools, and execute it"
    ),
)

agent = ChatAgent(
    assistant_sys_msg,
    model,
    tools=tools,
)
agent.reset()

----------------------------------------

TITLE: Installing Dependencies for Reddit Agent
DESCRIPTION: Command to install required package dependencies using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Creating LangGraph Workflow
DESCRIPTION: Definition of the complete workflow including nodes, edges, and conditional logic

LANGUAGE: python
CODE:
def should_continue(state: MessagesState) -> Literal["tools", "__end__"]:
    messages = state["messages"]
    last_message = messages[-1]
    if last_message.tool_calls:
        return "tools"
    return "__end__"


workflow = StateGraph(MessagesState)

# Define the two nodes we will cycle between
workflow.add_node("agent", call_model)
workflow.add_node("tools", tool_node)

workflow.add_edge("__start__", "agent")
workflow.add_conditional_edges(
    "agent",
    should_continue,
)
workflow.add_edge("tools", "agent")

app = workflow.compile()

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Listing Python Dependencies for Composio Project
DESCRIPTION: This snippet lists the required Python packages for the Composio project. It includes LlamaIndex and its extensions for OpenAI and Groq, as well as python-dotenv for environment variable management and agentops for additional functionality.

LANGUAGE: plaintext
CODE:
composio-llamaindex
python-dotenv
llama-index-llms-openai
llama-index
agentops
llama-index-llms-groq

----------------------------------------

TITLE: Making Setup Script Executable
DESCRIPTION: Command to change the permissions of the setup.sh script, making it executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Installing Required Packages for AI News Retrieval
DESCRIPTION: Installs necessary Python packages including Composio, LangChain, and related dependencies for the AI news retrieval and summarization project.

LANGUAGE: python
CODE:
%pip install composio-langchain
%pip install composio-core
%pip install langchain-community
%pip install huggingface_hub
%pip install google-search-results
%pip install python-dotenv

----------------------------------------

TITLE: Executing PraisonAI Agent
DESCRIPTION: Initialize and run the PraisonAI agent with the defined configuration to perform GitHub actions.

LANGUAGE: python
CODE:
# Create a PraisonAI instance with the agent_yaml content
praison_ai = PraisonAI(agent_yaml=agent_yaml)

# Run PraisonAI
result = praison_ai.main()

# Print the result
print(result)

----------------------------------------

TITLE: Configuring LangChain Agent with Composio Tools
DESCRIPTION: Setup code for creating and configuring the LangChain agent with the retrieved Composio tools

LANGUAGE: python
CODE:
prompt = hub.pull("hwchase17/openai-functions-agent")
agent = create_openai_functions_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

LANGUAGE: javascript
CODE:
const prompt = await pull(
    "hwchase17/openai-functions-agent"
);
const agent = await createOpenAIFunctionsAgent({
    llm,
    tools: tools,
    prompt,
});
const agentExecutor = new AgentExecutor({ agent, tools, verbose: true });

----------------------------------------

TITLE: Installing Composio in JavaScript
DESCRIPTION: Install the required Composio packages using npm and optionally pip for CLI.

LANGUAGE: bash
CODE:
npm install composio-core openai
pip install composio_core  # for CLI (optional)

----------------------------------------

TITLE: Configuring LangChain Agent with Composio Tools
DESCRIPTION: Setup code for creating and configuring the LangChain agent with the retrieved Composio tools

LANGUAGE: python
CODE:
prompt = hub.pull("hwchase17/openai-functions-agent")
agent = create_openai_functions_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

LANGUAGE: javascript
CODE:
const prompt = await pull(
    "hwchase17/openai-functions-agent"
);
const agent = await createOpenAIFunctionsAgent({
    llm,
    tools: tools,
    prompt,
});
const agentExecutor = new AgentExecutor({ agent, tools, verbose: true });

----------------------------------------

TITLE: Configuring LangChain Agent with Composio Tools
DESCRIPTION: Setup code for creating and configuring the LangChain agent with the retrieved Composio tools

LANGUAGE: python
CODE:
prompt = hub.pull("hwchase17/openai-functions-agent")
agent = create_openai_functions_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

LANGUAGE: javascript
CODE:
const prompt = await pull(
    "hwchase17/openai-functions-agent"
);
const agent = await createOpenAIFunctionsAgent({
    llm,
    tools: tools,
    prompt,
});
const agentExecutor = new AgentExecutor({ agent, tools, verbose: true });

----------------------------------------

TITLE: Running Scheduler Agent Python Script
DESCRIPTION: Command to execute the main Python script for the Scheduler Agent, which uses various AI frameworks to process emails and schedule events.

LANGUAGE: shell
CODE:
python python/examples/advanced_agents/scheduler_agent/scheduler_agent_autogen/main.py

----------------------------------------

TITLE: Setting Execute Permissions
DESCRIPTION: Command to make the setup.sh script executable on Linux/macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Executing Setup Script
DESCRIPTION: Command to run the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Example Connection Parameters Output in JSON and JavaScript
DESCRIPTION: This snippet shows examples of how connection parameters would look like in both JSON format (for auth params) and JavaScript format (for raw auth params). It includes details such as base URL, headers, and various authentication tokens.

LANGUAGE: json
CODE:
{
	"base_url": "", // This is the base URL for the API Ex. https://api.linear.app
	"params": [{ // This is the list of all the params
		"name": "x-api-key", 
		"in": "header", // `in` value could be of type `header`, `query` 
		"value": "<api-key>"
	}],
	"body": {}
}

LANGUAGE: javascript
CODE:
Connected account raw auth params {
  scope: '********',
  scopes: '********',
  id_token: '********',
  client_id: '********',
  expires_in: '********',
  token_type: '********',
  redirectUrl: 'https://accounts.google.com/o/oauth2/v2/auth?client_id=96-8p515bt7ijf94c2bf4a5lev5jr6r7oc1.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Fbackend.composio.dev%2Fapi%2Fv1%2Fauth-apps%2Fadd&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fgmail.modify&response_type=code&access_type=offline&prompt=consent&state=staging_eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.30.W9PV-ncrbbPhnjfcgBCN8ZNn9A8V2lzCbXQR2fOXht4&code_challenge=YpyY74p3BJU_-a_mIq4GZyka2FlpnH4APVIfQ&code_challenge_method=S256',
  callback_url: '********',
  client_secret: '********',
  code_verifier: '********',
  refresh_token: '********',
  headers: {
    Authorization: 'Bearer ya29.-BhZtwh0ZLk-',
  },
  queryParams: {},
  base_url: 'https://www.googleapis.com'
}

----------------------------------------

TITLE: Configuring Camel AI Agent
DESCRIPTION: Setting up the Camel AI agent with OpenAI GPT model configuration and system message for GitHub interactions

LANGUAGE: python
CODE:
# set up LLM model
assistant_model_config = ChatGPTConfig(
    temperature=0.0,
    tools=tools,
)

model = ModelFactory.create(
    model_platform=ModelPlatformType.OPENAI,
    model_type=ModelType.GPT_3_5_TURBO,
    model_config_dict=assistant_model_config.__dict__,
)


# set up agent
assistant_sys_msg = BaseMessage.make_assistant_message(
    role_name="Developer",
    content=(
        "You are a programmer as well an experienced github user. "
        "When asked given a instruction, "
        "you try to use available tools, and execute it"
    ),
)

agent = ChatAgent(
    assistant_sys_msg,
    model,
    tools=tools,
)
agent.reset()

----------------------------------------

TITLE: Installing Composio and LangChain Packages
DESCRIPTION: Install the required packages for using Composio with LangChain in Python and JavaScript environments.

LANGUAGE: bash
CODE:
pip install composio-langchain langchain_openai

LANGUAGE: javascript
CODE:
npm install composio-core langchain @langchain/openai

----------------------------------------

TITLE: Importing Dependencies for SQL Agent
DESCRIPTION: Setting up necessary imports and environment configuration for the SQL Agent implementation.

LANGUAGE: javascript
CODE:
import dotenv from 'dotenv';
import { ChatOpenAI } from "@langchain/openai";
import { AgentExecutor, createOpenAIFunctionsAgent } from "langchain/agents";
import { ComposioToolSet } from "composio-core";
import { pull } from "langchain/hub";

dotenv.config();

----------------------------------------

TITLE: Executing Setup Script
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs necessary dependencies for the Second Brain Agent.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Creating Environment File with API Keys in Bash
DESCRIPTION: Command to create a .env file and instructions for adding Composio and OpenAI API keys. This step is crucial for authenticating with the required services.

LANGUAGE: bash
CODE:
COMPOSIO_API_KEY=YOUR_COMPOSIO_API_KEY
OPENAI_API_KEY=YOUR_OPENAI_API_KEY

----------------------------------------

TITLE: Connecting GitHub Account with Composio
DESCRIPTION: Instructions and code to connect a GitHub account with Composio. This step is crucial for authenticating and accessing GitHub functionalities through Composio.

LANGUAGE: shell
CODE:
composio login
composio add github

LANGUAGE: python
CODE:
request = composio_toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

LANGUAGE: javascript
CODE:
const connection = await composioToolset.connectedAccounts.initiate({appName: "github"})
console.log(`Open this URL to authenticate: ${connection.redirectUrl}`);

----------------------------------------

TITLE: Installing Composio in Python
DESCRIPTION: Install the required Composio packages using pip.

LANGUAGE: bash
CODE:
pip install composio_core composio_openai

----------------------------------------

TITLE: Authenticating GitHub Integration
DESCRIPTION: Commands to log in to Composio and add GitHub integration. Includes both CLI commands and Python code for authentication.

LANGUAGE: shell
CODE:
composio login
composio add github

LANGUAGE: python
CODE:
request = composio_toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

----------------------------------------

TITLE: Running Image Search Python Script
DESCRIPTION: Command to execute the main Python script that implements the Image Search Agent functionality. This script is located in the cookbook/examples/image_search directory.

LANGUAGE: shell
CODE:
python cookbook/examples/image_search/main.py

----------------------------------------

TITLE: Running Python Script for Content Hook Generator
DESCRIPTION: Executes the main Python script for the content hook generator agent located in the cookbook/examples/quickstarters directory.

LANGUAGE: shell
CODE:
python cookbook/examples/quickstarters/content_hook_generator_agent/main.py

----------------------------------------

TITLE: Setting Up IBM Watson Agent
DESCRIPTION: Configure IBM Watson agent with specific parameters and model settings for natural language processing.

LANGUAGE: python
CODE:
parameters = {
"decoding_method": "sample",
"max_new_tokens": 100,
"min_new_tokens": 1,
"temperature": 0.5,
"top_k": 50,
"top_p": 1,
}
url = input('Add your IBM Cloud URL here: ')
project_id = input('Add your IBM Project ID here: ')
watsonx_llm = ChatWatsonx(
model_id = 'ibm/granite-3-8b-instruct',
url = url, 
project_id = project_id,
)   

if not url or not project_id:
    raise ValueError("IBM Cloud URL and Project ID must be provided")

llm_with_tools = watsonx_llm.bind_tools(tools)

----------------------------------------

TITLE: Creating New SWE Agent
DESCRIPTION: Command to scaffold a new Software Engineering agent with specified framework and output directory

LANGUAGE: bash
CODE:
swekit scaffold swe -f crewai -o swe_agent

----------------------------------------

TITLE: Running Image Search Python Script
DESCRIPTION: Command to execute the main Python script for the Image Search Agent.

LANGUAGE: shell
CODE:
python cookbook/examples/image_search/main.py

----------------------------------------

TITLE: Running Slack Agent Python Script
DESCRIPTION: Command to execute the Python script that runs the Slack Bot Agent. This script should be run after setting up the environment and filling in the .env file with required secrets.

LANGUAGE: shell
CODE:
python cookbook/examples/slack_agent_openai/slack_agent_openai.py

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs necessary dependencies for the Slack Bot Agent.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Installing Dependencies and Building Composio MCP CLI in Bash
DESCRIPTION: These commands are used for setting up the development environment for Composio MCP. They install dependencies using pnpm, build the CLI using Vite, and run the CLI locally.

LANGUAGE: bash
CODE:
# Install dependencies
pnpm install

# Build the CLI
pnpm run build

# Run the CLI locally
pnpm start

----------------------------------------

TITLE: Connecting Tools and API Configuration
DESCRIPTION: Commands to connect Gmail, Google Calendar and set up API keys

LANGUAGE: bash
CODE:
composio add gmail
composio add googlecalendar

export OPENAI_API_KEY="<your-openai-api-key>"

----------------------------------------

TITLE: Running the Main Python Script
DESCRIPTION: Command to execute the main Python script that implements the Second Brain Agent functionality using LlamaIndex.

LANGUAGE: shell
CODE:
python cookbook/examples/advanced_agents/Second_brain_Agent/llamaindex/main.py

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs necessary dependencies for the project.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Initializing Julep Client and Basic Imports
DESCRIPTION: Sets up the basic imports and creates a Julep client instance with API key configuration.

LANGUAGE: python
CODE:
from julep import Client
from composio_julep import ComposioToolSet, App
import os

julep_api_key = "{julep_api_key}" # Replace it
julep_client = Client(api_key=julep_api_key)

----------------------------------------

TITLE: Installing Dependencies for Crypto Trading Agent
DESCRIPTION: Installs required Python packages including composio-langchain, python-dotenv, cdp-langchain, and langchain-openai.

LANGUAGE: bash
CODE:
pip install composio-langchain python-dotenv cdp-langchain langchain-openai

----------------------------------------

TITLE: Installing Dependencies for Composio and OpenAI Integration (Bash)
DESCRIPTION: This snippet shows how to install the required npm packages (composio-core and openai) using different package managers.

LANGUAGE: bash
CODE:
npm install composio-core openai 
yarn add composio-core openai 
pnpm add composio-core openai

----------------------------------------

TITLE: Navigating Project Directory in Shell
DESCRIPTION: Command to change directory to the project location containing setup files.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Executing the AI Lead Generator Agent
DESCRIPTION: This snippet demonstrates how to execute the AI Lead Generator Agent with a specific lead description in Python.

LANGUAGE: python
CODE:
lead_description = 'Senior frontend developers in San Francisco'
user_input = f"Create a lead list based on the description: {lead_description}"
response = agent.chat(user_input)

----------------------------------------

TITLE: Listing Python Dependencies
DESCRIPTION: Specifies required Python packages for installation. Includes composio-llamaindex for core functionality and python-dotenv for environment variable management.

LANGUAGE: text
CODE:
composio-llamaindex
python-dotenv

----------------------------------------

TITLE: Executing PR Agent Script
DESCRIPTION: Command to run the main Python script that starts the PR agent

LANGUAGE: shell
CODE:
python cookbook/examples/pr_agent_openai/main.py

----------------------------------------

TITLE: Running Independent Linting and Static Analysis for Composio
DESCRIPTION: This snippet shows the commands for running independent linting, formatting, and static analysis checks on the Composio codebase using tox.

LANGUAGE: bash
CODE:
tox -e isort
tox -e black
tox -e isort-check
tox -e black-check
tox -e flake8
tox -e pylint
tox -e mypy

----------------------------------------

TITLE: Setting Up Gradio Interface
DESCRIPTION: Creates and configures the Gradio web interface for user interaction, including input fields for business name and lead description.

LANGUAGE: python
CODE:
iface = gr.Interface(
    fn=generate_leads,
    inputs=[
        gr.Textbox(label="Business Name", placeholder="Enter your business name"),
        gr.Textbox(label="Lead Description", placeholder="Describe the kind of leads you want")
    ],
    outputs=gr.Markdown(label="Response"),
    title="Lead Generation Tool",
    description="Use this tool to generate leads based on your business and specifications."
)

iface.launch()

----------------------------------------

TITLE: App Trigger Webhook Payload Example
DESCRIPTION: Example JSON payload structure for Slack's SLACK_RECEIVE_MESSAGE trigger, showing the format of data received when a message is received in Slack

LANGUAGE: json
CODE:
{
  "trigger_name": "SLACK_RECEIVE_MESSAGE",
  "connection_id": "7baac1d4-e3be-41ae-9550-5ce9829579c9",
  "trigger_id": "fb36f8db-caf0-4d2c-9cd6-0cb575a5689e",
  "payload": {
    "channel": "C07JB863EBW",
    "user": "U07JMDFMR7B",
    "text": "hey",
    "ts": "1733236813.895519",
    "team_id": "T07J24QFB62",
    "bot_id": null,
    "channel_type": "channel"
  }
}

----------------------------------------

TITLE: Importing Langchain and LangchainToolSet Dependencies in JavaScript
DESCRIPTION: This snippet shows how to import necessary dependencies from Langchain and Composio for creating an agent. It includes ChatOpenAI, agent creation functions, and the LangchainToolSet from Composio.

LANGUAGE: javascript
CODE:
import { ChatOpenAI } from "@langchain/openai";
import { createOpenAIFunctionsAgent, AgentExecutor } from "langchain/agents";
import { pull } from "langchain/hub";
import { LangchainToolSet } from "composio-core";

----------------------------------------

TITLE: Initializing Tools and LLM for Community Reward Agent in Python
DESCRIPTION: This code initializes the ComposioToolSet with various actions and sets up the OpenAI language model for use in the agent.

LANGUAGE: python
CODE:
toolset = ComposioToolSet(api_key="")
tools = toolset.get_tools(actions=[send_sol, Action.SLACK_FETCH_CONVERSATION_HISTORY, Action.SLACK_LIST_ALL_SLACK_TEAM_CHANNELS_WITH_VARIOUS_FILTERS, Action.SLACK_LIST_ALL_SLACK_TEAM_USERS_WITH_PAGINATION, Action.SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL])

llm = OpenAI(model="gpt-4o")

----------------------------------------

TITLE: Executing Main Python Script
DESCRIPTION: Command to run the main Python script that implements the Second Brain Agent functionality

LANGUAGE: shell
CODE:
python cookbook/examples/advanced_agents/Second_brain_Agent/llamaindex/main.py

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script for environment configuration and dependency installation

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Installing Composio-Julep and Setting Up GitHub Connection
DESCRIPTION: Initial setup commands to install the composio-julep package and connect GitHub integration. Also shows how to check supported applications.

LANGUAGE: bash
CODE:
pip install composio-julep

# Connect your GitHub so agents can interact with it

composio add github

# Check all supported apps

composio apps

----------------------------------------

TITLE: FastAPI Webhook Handler Implementation
DESCRIPTION: Implementation of a FastAPI server to handle webhook events from Composio. Includes basic request handling and payload processing.

LANGUAGE: python
CODE:
from fastapi import FastAPI, Request
from typing import Dict, Any
import uvicorn
import json

app = FastAPI(title="Webhook Demo")

@app.post("/webhook")
async def webhook_handler(request: Request):
    # Get the raw payload
    payload = await request.json()
    
    # Log the received webhook data
    print("Received webhook payload:")
    print(json.dumps(payload, indent=2))
    
    # Return a success response
    return {"status": "success", "message": "Webhook received"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)

----------------------------------------

TITLE: Retrieving GitHub Tools
DESCRIPTION: Fetching available GitHub tools from Composio toolset.

LANGUAGE: python
CODE:
tools = toolset.get_tools(apps=[App.GITHUB])

----------------------------------------

TITLE: Running Slack Bot Agent
DESCRIPTION: Command to execute the main Python script for the Slack bot agent implementation

LANGUAGE: shell
CODE:
python python/examples/advanced_agents/slack_bot_agent/slack_agent_langchain/slack_agent_langchain.py

----------------------------------------

TITLE: Running Sales Assistant Agent Script
DESCRIPTION: Command to execute the main Python script for the Sales Assistant Agent.

LANGUAGE: shell
CODE:
python cookbook/python-examples/advanced_agents/sales_assistant_agent/main.py

----------------------------------------

TITLE: Setting Up Pydantic-AI Agent - Python
DESCRIPTION: Creation and configuration of a Pydantic-AI agent with Composio tools and system prompt.

LANGUAGE: python
CODE:
# Create an agent with the tools
agent = Agent(
    model="openai:gpt-4-turbo",  # Using a known model name
    tools=tools,
    system_prompt="""You are an AI agent that helps users interact with GitHub.
    You can perform various GitHub operations using the available tools.
    When given a task, analyze it and use the appropriate tool to complete it.""",
)

----------------------------------------

TITLE: Trigger Event Payload Example
DESCRIPTION: Sample JSON payload structure for GitHub star added event trigger

LANGUAGE: json
CODE:
{
  'action': 'created',
  'starred_at': '2024-12-11T15:31:26Z',
  'repository_id': 861033276,
  'repository_name': 'composio',
  'repository_url': 'https://github.com/composioHQ/composio/',
  'starred_by': 'abhishekpatil4',
  'triggerName': 'GITHUB_STAR_ADDED_EVENT'
}

----------------------------------------

TITLE: Starting the SWE Agent
DESCRIPTION: Command to launch the SWE agent, which will prompt for repository and issue information.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change into the project directory containing setup files and dependencies

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script that configures the environment and installs dependencies

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Importing Required Libraries for AI Lead Generator Agent
DESCRIPTION: This snippet shows the necessary library imports for the AI Lead Generator Agent in both Python and JavaScript.

LANGUAGE: python
CODE:
from composio_llamaindex import ComposioToolSet, App, Action
from llama_index.core.agent import FunctionCallingAgentWorker
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

LANGUAGE: javascript
CODE:
import { openai } from "@ai-sdk/openai";
import { VercelAIToolSet } from "composio-core";
import dotenv from "dotenv";
import { generateText } from "ai";

dotenv.config();

----------------------------------------

TITLE: Importing Libraries for Composio in TypeScript
DESCRIPTION: Import the required TypeScript libraries to work with Composio, including components from composio-core and langchain.

LANGUAGE: TypeScript
CODE:
import { ActionExecutionResDto, LangchainToolSet, RawActionData, TPostProcessor, TPreProcessor, TSchemaProcessor } from "composio-core";
import { ChatOpenAI } from "@langchain/openai";
import { createOpenAIFunctionsAgent, AgentExecutor } from "langchain/agents";
import { pull } from "langchain/hub";
import { ChatPromptTemplate } from "@langchain/core/prompts";

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project location containing essential files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to change the permissions of the setup.sh script, making it executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Executing Agent Commands
DESCRIPTION: Execute natural language commands through the configured IBM Watson agent to perform GitHub actions.

LANGUAGE: python
CODE:
response = llm_with_tools.invoke("Star the composiohq/composio repository")
print(response)

----------------------------------------

TITLE: Defining OpenAPI GET Endpoint for Active Triggers
DESCRIPTION: OpenAPI specification path definition for retrieving active triggers via GET request to /api/v1/triggers/active_triggers endpoint.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/triggers/active_triggers

----------------------------------------

TITLE: OpenAPI GET Triggers Route Definition
DESCRIPTION: YAML definition specifying the OpenAPI route for retrieving triggers at /api/v1/triggers

LANGUAGE: yaml
CODE:
openapi: get /api/v1/triggers

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs necessary dependencies for the Image Search Agent.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Configuring Linear Action with Custom Processors in Python
DESCRIPTION: Set up the LINEAR_CREATE_LINEAR_ISSUE action with custom schema, pre-processing, and post-processing functions using the get_tools method.

LANGUAGE: Python
CODE:
tools = composio_toolset.get_tools(
    processors={
        "schema": {
            Action.LINEAR_CREATE_LINEAR_ISSUE: linear_schema_processor,
        },
        "pre": {
            Action.LINEAR_CREATE_LINEAR_ISSUE: linear_pre_processor,
        },
        "post": {
            Action.LINEAR_CREATE_LINEAR_ISSUE: linear_post_processor,
        }
    },
    actions=[Action.LINEAR_CREATE_LINEAR_ISSUE]
)

----------------------------------------

TITLE: Setting Up Environment
DESCRIPTION: Shell commands to make the setup script executable and run it for environment configuration and dependency installation.

LANGUAGE: shell
CODE:
chmod +x setup.sh

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Executing Setup Script
DESCRIPTION: Command to run the setup script for environment configuration and dependency installation

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Initializing E2B Cloud Sandbox Environment
DESCRIPTION: Sets up an E2B cloud sandbox environment for OpenAI toolset. Requires E2B_API_KEY environment variable to be set.

LANGUAGE: javascript
CODE:
import { OpenAIToolset, Workspace } from "composio-core"

toolset = new OpenAIToolset({
    workspaceConfig: Workspace.E2B({})
})

----------------------------------------

TITLE: Running Main Python Script in Shell
DESCRIPTION: Command to execute the main Python script that implements the Agentic RAG functionality for website content scraping and RAG creation.

LANGUAGE: shell
CODE:
python python/examples/quickstarters/website_to_prompt/main.py

----------------------------------------

TITLE: Defining Custom Input Preprocessor for Linear Action in TypeScript
DESCRIPTION: Create a custom function to modify the input data for the LINEAR_CREATE_LINEAR_ISSUE action, adding project_id and team_id values.

LANGUAGE: TypeScript
CODE:
const preProcessor: TPreProcessor = ({ params, actionName, appName }: {
  params: Record<string, unknown>;
  actionName: string;
  appName: string;
}) => {
  const modifiedParams = { ...params };

  modifiedParams.project_id = "e708162b-9b1a-4901-ab93-0f0149f9d805";
  modifiedParams.team_id = "249ee4cc-7bbb-4ff1-adbe-d3ef2f3df94e";

  return modifiedParams;
}

----------------------------------------

TITLE: Initializing Composio and OpenAI Clients in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize the OpenAI client and Composio ToolSet in JavaScript. It sets up the necessary objects for the workflow using ES6 import syntax.

LANGUAGE: javascript
CODE:
import { OpenAI } from "openai";
import { OpenAIToolSet } from "composio-core";

const client = new OpenAI();
const toolset = new OpenAIToolSet({
    apiKey: process.env.COMPOSIO_API_KEY,
});

----------------------------------------

TITLE: Initializing Tools and LLM for AI Lead Generator Agent
DESCRIPTION: This snippet demonstrates how to initialize the ComposioToolSet and LLM (Language Model) for the AI Lead Generator Agent in both Python and JavaScript.

LANGUAGE: python
CODE:
toolset = ComposioToolSet(api_key="")
tools = toolset.get_tools(apps=[App.PEOPLEDATALABS, App.GOOGLESHEETS])

llm = OpenAI(model="gpt-4o")

LANGUAGE: javascript
CODE:
const toolset = new VercelAIToolSet({
  apiKey: process.env.COMPOSIO_API_KEY,
});

const tools = await toolset.getTools([App.PEOPLEDATALABS, App.GOOGLESHEETS]);

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Python Package Requirements
DESCRIPTION: List of Python package dependencies required for the Composio project. Includes vector database (chromadb), text embedding models (sentence-transformers), and AI agent frameworks (AutoGen).

LANGUAGE: plaintext
CODE:
chromadb
sentence-transformers
open-clip-torch
composio-autogen
autogen

----------------------------------------

TITLE: Filtering Specific Actions and Apps
DESCRIPTION: Examples of how to restrict agent access to specific actions or apps using filters.

LANGUAGE: bash
CODE:
# To restrict agents from using all the actions, filter specific actions
tools = composio_toolset.get_tools(apps=[App.GITHUB])

LANGUAGE: bash
CODE:
# To restrict agents from using all tools, filter specific tools 
tools = composio_toolset.get_tools(actions=[Action.GITHUB_CREATE_ISSUE])

----------------------------------------

TITLE: Defining OpenAPI Patch Operation for Trigger Instance Status Update
DESCRIPTION: This YAML snippet defines the OpenAPI specification for a PATCH operation to update the status of a trigger instance. It specifies the endpoint path, including a path parameter for the triggerId.

LANGUAGE: yaml
CODE:
openapi: patch /api/v1/triggers/instance/{triggerId}/status

----------------------------------------

TITLE: Defining OpenAPI Endpoint for Disabling Trigger Instance in YAML
DESCRIPTION: This YAML snippet specifies the OpenAPI details for the POST endpoint used to disable a trigger instance. It includes the path parameter for the trigger instance ID.

LANGUAGE: yaml
CODE:
openapi: post /api/v1/triggers/disable/{triggerInstanceId}

----------------------------------------

TITLE: Executing Setup Script
DESCRIPTION: Command to run the setup script for environment configuration and dependency installation.

LANGUAGE: sh
CODE:
./setup.sh

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Executing Tasks with Julep Agent
DESCRIPTION: Demonstrates how to create a user session and execute a GitHub-related task using the configured Julep agent.

LANGUAGE: python
CODE:
about = """
Sam, a software developer, is passionate about impactful tech.
At the tech fair, he seeks investors and collaborators for his project.
"""
user = julep_client.users.create(
    name="Sam",
    about=about,
)

situation_prompt = "You are at a tech fair seeking innovative projects."
session = julep_client.sessions.create(user_id=user.id, agent_id=agent.id, situation=situation_prompt)

user_msg = "Could you star the GitHub repository composiohq/composio?"

response = julep_client.sessions.chat(
    session_id=session.id,
    messages=[
        {"role": "user", "content": user_msg, "name": "Sam"}
    ],
    recall=True,
    remember=True
)

----------------------------------------

TITLE: Importing Libraries and Initializing Clients
DESCRIPTION: Import required libraries and initialize OpenAI and Composio tool set instances.

LANGUAGE: python
CODE:
from composio_openai import ComposioToolSet, action
from openai import OpenAI

openai_client = OpenAI()
toolset = ComposioToolSet()

LANGUAGE: javascript
CODE:
import { OpenAIToolSet } from "composio-core"
import { OpenAI } from "openai";
import { z } from "zod"

const openai_client = new OpenAI();
const toolset = new OpenAIToolSet();

----------------------------------------

TITLE: Executing Setup Script
DESCRIPTION: Command to run the setup script for environment configuration and dependency installation

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Listing Dependencies for Composio Project
DESCRIPTION: Lists the required Python package dependencies needed for the Composio project, including the main composio-autogen package, autogen library, and python-dotenv for environment variable management.

LANGUAGE: plaintext
CODE:
composio-autogen
autogen
python-dotenv

----------------------------------------

TITLE: Configuring Docker Ports for Web Applications
DESCRIPTION: Configures Docker workspace environment with exposed ports for web application development. Maps port 8001 for public access.

LANGUAGE: javascript
CODE:
toolset = new OpenAIToolset({
  workspaceConfig: Workspace.Docker({
    ports: {
      8001: 8001,
    }
  })
})

----------------------------------------

TITLE: Setting API Key Environment Variable
DESCRIPTION: Command to set the Composio API key as an environment variable for use in scripts and applications

LANGUAGE: bash
CODE:
export COMPOSIO_API_KEY="your_api_key"

----------------------------------------

TITLE: Running Lead Outreach Agent
DESCRIPTION: Command to execute the main Python script that runs the Lead Outreach Agent.

LANGUAGE: shell
CODE:
python cookbook/python-examples/advanced_agents/lead_outreach_agent/crewai/main.py

----------------------------------------

TITLE: Running Slack Bot Agent Python Script
DESCRIPTION: Command to execute the main Python script (slack_agent_openai.py) that runs the Slack Bot Agent. This should be done after setting up the environment and filling in the .env file with required secrets.

LANGUAGE: shell
CODE:
python python/examples/advanced_agents/slack_bot_agent/slack_agent_openai/slack_agent_openai.py

----------------------------------------

TITLE: Initializing Base Packages
DESCRIPTION: Setting up the initial imports and configuring the Groq LLM with necessary parameters.

LANGUAGE: python
CODE:
# Initialise imports
from langchain.agents import AgentExecutor
from langchain import hub
from langchain_groq import ChatGroq
from langgraph.prebuilt import create_react_agent

llm = ChatGroq(model="mixtral-8x7b-32768", temperature=0)

prompt = hub.pull("hwchase17/react")

LANGUAGE: javascript
CODE:
// Importing necessary modules from langchain and composio-core packages
import dotenv from 'dotenv';
dotenv.config();

import { ChatGroq } from "@langchain/groq";
import { AgentExecutor, createReactAgent } from "langchain/agents";
import { LangchainToolSet } from "composio-core";
import { pull } from "langchain/hub";


// Creating an instance of ChatGroq with specific model and temperature settings
const llm = new ChatGroq({
  model: "mixtral-8x7b-32768",
  temperature: 0,
});

// Pulling a chat prompt template asynchronously using the pull function
const prompt = await pull<ChatPromptTemplate>(
"hwchase17/react"
);

----------------------------------------

TITLE: Importing Base Packages for Calendar Agent
DESCRIPTION: This snippet demonstrates the import of essential libraries for the Calendar Agent project in both Python and JavaScript. It includes imports for Composio, CrewAI, LangChain, and other utility packages.

LANGUAGE: python
CODE:
import os
from datetime import datetime

from composio_crewai import App, ComposioToolSet
from crewai import Agent, Task
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

LANGUAGE: javascript
CODE:
import dotenv from 'dotenv';
import { ChatOpenAI } from "@langchain/openai";
import { AgentExecutor, createOpenAIFunctionsAgent } from "langchain/agents";
import { pull } from "langchain/hub";
import { LangchainToolSet } from "composio-core";

dotenv.config();

----------------------------------------

TITLE: Installing E2B Workspace Extension
DESCRIPTION: Provides the command to install the E2B workspace extension for Composio.

LANGUAGE: bash
CODE:
pip install composio-core[e2b]

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project location containing setup files and scripts.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Installing Dependencies for SQL Agent
DESCRIPTION: Commands for installing required npm packages including Langchain, Composio, and environment configuration tools.

LANGUAGE: javascript
CODE:
pnpm install @langchain/openai composio-core langchain dotenv

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Launching Python Application
DESCRIPTION: Command to start the main Python application for the human-in-the-loop scheduler.

LANGUAGE: shell
CODE:
python cookbook/examples/advanced_agents/human_in_the_loop_scheduler/llamaindex/main.py

----------------------------------------

TITLE: Listing Active Triggers in Composio CLI
DESCRIPTION: Displays all currently active triggers within the user's account. This helps in reviewing and managing active triggers.

LANGUAGE: bash
CODE:
composio triggers --active

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project folder containing essential files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Importing Libraries and Initializing ComposioToolSet
DESCRIPTION: Import necessary classes from Agno and Composio, and initialize the ComposioToolSet for use with external applications.

LANGUAGE: python
CODE:
from agno.agent.agent import Agent
from composio_agno import Action, App, ComposioToolSet

toolset = ComposioToolSet()

----------------------------------------

TITLE: Complete Cloudflare Implementation
DESCRIPTION: Implements a full Cloudflare-based solution using Hono framework and Composio core, including GitHub authentication and email processing functionality.

LANGUAGE: javascript
CODE:
import { Hono } from 'hono';
import { CloudflareToolSet } from "composio-core";
const app = new Hono();

const config = {
    model: '@hf/nousresearch/hermes-2-pro-mistral-7b',
};

async function setupUserConnectionIfNotExists(toolset, entityId, c) {
    const entity = await toolset.client.getEntity(entityId);
    const connection = await entity.getConnection({ appName: "GITHUB" });

    if (!connection) {
        const connection = await entity.initiateConnection({appName: "GITHUB"});
        console.log('Log in via: ', connection.redirectUrl);
        c.json({ redirectUrl: connection.redirectUrl, message: 'Please log in to continue and then call this API again.' });
    }

    return connection;
}

app.post('/help', async (c) => {
    const toolset = new CloudflareToolSet({
        apiKey: c.env.COMPOSIO_API_KEY,
    });

    try {
        const entity = await toolset.client.getEntity('default');
        await setupUserConnectionIfNotExists(toolset, entity.id, c);
        const tools = await toolset.getTools({ actions: ['gmail_fetch_emails', 'gmail_send_email'] }, entity.id);
        const instruction = `
            "Fetch the most recent newsletter emails from the inbox. "
            "Look for emails with subjects containing words like 'newsletter', 'update', or 'digest'. "
            "Retrieve the content of these emails, including any important links or attachments. "
            "Pay special attention to newsletters from reputable sources and industry leaders."
            "Compose and send an email containing the summarized newsletter content. "
            "Use the Gmail API to send the email to investtradegame@gmail.com. "
            "Ensure the email has a clear, engaging subject line and well-formatted content. "
            "Use the following structure for the email:\n\n"
            f"Subject: Your Weekly News Digest - {datetime.now().strftime('%B %d, %Y')}\n\n"
            "<h1>Weekly News Digest</h1>\n\n"
            "<p>Dear Reader,</p>\n\n"
            "<p>Here's your curated summary of this week's top news items and insights:</p>\n\n"
            "[Insert summarized content here]\n\n"
            "Each main section should be separated by a horizontal rule, like this:\n"
            "<hr>\n\n"
            "Structure the content logically, with clear sections for each summarized newsletter or topic area.\n"
            "Use appropriate HTML formatting such as <strong> for headlines, "
            "<ul> and <li> for bullet points, and <br> for line breaks to enhance readability.\n\n"
            "Include relevant links using HTML anchor tags: <a href='URL'>Link Text</a>\n\n"
            "Include a brief introduction at the beginning to set the context and a conclusion at the end "
            "to summarize the key takeaways and trends observed across the newsletters.\n\n"
            "<footer>\n"
            "<p>For more details on these stories, click on the provided links or stay tuned to our next update. "
            "If you have any questions or feedback, please don't hesitate to reach out.</p>\n\n"
            "<p>Best regards,<br>Your Newsletter Summary Team</p>\n"
            "</footer>\n\n"
            "Important: Ensure all HTML tags are properly closed and nested correctly."
        `;

        let messages = [
            { role: 'system', content: '' },
            { role: 'user', content: instruction },
        ];

        const toolCallResp = await c.env.AI.run(config.model, {
            messages,
            tools,
        });

        await toolset.handleToolCall(toolCallResp, entity.id);
        return c.json({ messages: "Mails found" });
    } catch (err) {
        console.log(err);
        return c.text('Something went wrong', 500);
    }
});

export default app;

----------------------------------------

TITLE: Importing Base Packages for Demo Assistant in JavaScript
DESCRIPTION: This snippet shows the necessary import statements for the Demo Assistant project. It includes Express.js for the web server, OpenAI for AI functionality, and Composio core for tool integration.

LANGUAGE: javascript
CODE:
import express from 'express';
import { OpenAI } from "openai";
import { OpenAIToolSet, Action } from "composio-core";

----------------------------------------

TITLE: Defining POST /api/v1/logs/ OpenAPI Endpoint
DESCRIPTION: OpenAPI specification for a POST endpoint to submit logs at /api/v1/logs/

LANGUAGE: yaml
CODE:
openapi: post /api/v1/logs/

----------------------------------------

TITLE: Executing Main Python Script
DESCRIPTION: Command to run the main Python script that initializes the Indie Hacker Agent.

LANGUAGE: shell
CODE:
python cookbook/python-examples/advanced_agents/indie_hacker_agent/letta/main.py

----------------------------------------

TITLE: Listing Python Package Dependencies
DESCRIPTION: Core Python package dependencies required for the Composio project, including LangChain integrations for Gemini and OpenAI, and environment configuration support.

LANGUAGE: text
CODE:
composio-langgraph
composio-gemini
langchain-openai
python-dotenv

----------------------------------------

TITLE: Importing Libraries and Initializing ComposioToolSet
DESCRIPTION: Import necessary classes from Agno and Composio, and initialize the ComposioToolSet for use with external applications.

LANGUAGE: python
CODE:
from agno.agent.agent import Agent
from composio_agno import Action, App, ComposioToolSet

toolset = ComposioToolSet()

----------------------------------------

TITLE: Navigating Project Directory
DESCRIPTION: Command to change into the project directory containing setup.sh, main.py, requirements.txt, and README.md files.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Installing Docker Workspace Extension
DESCRIPTION: Shows the command to install the Docker workspace extension for Composio.

LANGUAGE: bash
CODE:
pip install composio-core[docker]

----------------------------------------

TITLE: Installing Composio and GitHub Setup
DESCRIPTION: Commands for installing the Composio LangChain package and connecting a GitHub account for automation purposes.

LANGUAGE: bash
CODE:
# Install Composio LangChain package
pip install composio-openai

# Connect your GitHub account
composio-cli add github

# View available applications you can connect with
composio-cli show-apps

----------------------------------------

TITLE: Navigating Project Directory
DESCRIPTION: Command to change to the project's directory containing setup and source files.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Example Agent Commands for GitHub Interaction
DESCRIPTION: Sample natural language commands to interact with GitHub through the Griptape agent.

LANGUAGE: bash
CODE:
Star composiohq/composio repository

LANGUAGE: bash
CODE:
Get last commit on composiohq/composio repository

----------------------------------------

TITLE: Setting Up To-Do List for Calendar Agent
DESCRIPTION: This code defines the to-do list that will be converted into calendar events. The list includes time slots and corresponding activities.

LANGUAGE: python
CODE:
# Setup Todo
todo = """
    1PM - 3PM -> Code,
    5PM - 7PM -> Meeting,
    9AM - 12AM -> Learn something,
    8PM - 10PM -> Game
"""

----------------------------------------

TITLE: Running Lead Generator Agent
DESCRIPTION: Command to execute the main Python script that runs the Lead Generator Agent.

LANGUAGE: shell
CODE:
python cookbook/python-examples/advanced_agents/lead_generator_agent/main.py

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change into the project's working directory where key files are located.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Listing Python Dependencies for composio Project
DESCRIPTION: This snippet lists the required Python packages for the composio project. It includes ChromaDB for vector storage, sentence-transformers and open-clip-torch for text and image embeddings, composio-crewai and crewai for AI task automation, and langchain-openai for language model integration.

LANGUAGE: plaintext
CODE:
chromadb
sentence-transformers
open-clip-torch
composio-crewai
langchain-openai
crewai

----------------------------------------

TITLE: Enabling a Specific Trigger in Composio CLI
DESCRIPTION: Activates a specific Slack trigger and obtains a unique Trigger_ID. This ID is crucial for distinguishing between triggers.

LANGUAGE: bash
CODE:
composio triggers enable slack_receive_message # Replace 'slack_receive_message' with your desired trigger name

----------------------------------------

TITLE: Navigating Project Directory
DESCRIPTION: Command to change into the project directory containing setup files and dependencies.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change to the project's directory containing setup and configuration files.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems. This step may be necessary before running the setup script.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Executing PraisonAI Agent
DESCRIPTION: Final implementation steps to initialize and run the PraisonAI agent with the configured tasks.

LANGUAGE: python
CODE:
# Create a PraisonAI instance with the agent_yaml content
praison_ai = PraisonAI(agent_yaml=agent_yaml)

# Run PraisonAI
result = praison_ai.main()

# Print the result
print(result)

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the project locally for development and testing purposes.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Listing Files Using Host Workspace in Python
DESCRIPTION: Demonstrates how to configure and use the Host workspace to list files in the current directory using Composio and OpenAI.

LANGUAGE: python
CODE:
from composio_openai import ComposioToolSet, App, Action, WorkspaceType
from openai import OpenAI

client = OpenAI()

toolset = ComposioToolSet(workspace_config=WorkspaceType.Host())
entity = toolset.get_entity(id="default")
tools = toolset.get_tools(["FILETOOL_LIST_FILES"])

question = "List all files in the current directory"

response = client.chat.completions.create(
    model="gpt-4o-mini",
    max_tokens=1024,
    tools=tools,
    messages=[{"role": "user", "content": question}],
)
result = toolset.handle_tool_calls(response)
print(result)

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project location containing essential files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Executing Setup Script
DESCRIPTION: Command to run the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Cloning Composio Repository
DESCRIPTION: Command to clone the Composio repository containing the Slackbot code

LANGUAGE: bash
CODE:
git clone https://github.com/ComposioHQ/composio.git

----------------------------------------

TITLE: Setting up Trigger Listener
DESCRIPTION: Implementation of a trigger listener to process incoming Gmail messages using the defined agent function.

LANGUAGE: python
CODE:
listener = toolset.create_trigger_listener()

@listener.callback(filters={"trigger_name": Trigger.GMAIL_NEW_GMAIL_MESSAGE})
def callback_function(event):
    payload = event.payload
    thread_id = payload.get("threadId")
    message = payload.get("messageText")
    sender_mail = payload.get("sender")
    agent_function(thread_id, message, sender_mail)


print("Starting listener")
listener.wait_forever()

----------------------------------------

TITLE: Updating Composio Apps and Actions
DESCRIPTION: Refreshes all applications and actions to ensure the CLI tools are up-to-date.

LANGUAGE: bash
CODE:
composio apps update

----------------------------------------

TITLE: Navigating to Slackbot Directory
DESCRIPTION: Command to change directory to the Slackbot implementation folder

LANGUAGE: bash
CODE:
cd composio/python/examples/advanced_agents/slackbot_code_expert

----------------------------------------

TITLE: Navigating to Slackbot Directory
DESCRIPTION: Command to change directory to the Slackbot implementation folder

LANGUAGE: bash
CODE:
cd composio/python/examples/advanced_agents/slackbot_code_expert

----------------------------------------

TITLE: Importing Packages and Creating Default Julep Agent
DESCRIPTION: This code snippet imports necessary packages and creates a default Julep client. It requires replacing the placeholder API key with an actual Julep API key.

LANGUAGE: python
CODE:
from julep import Client
from composio_julep import ComposioToolSet, App
import os

julep_api_key = "{julep_api_key}" # Replace it
julep_client = Client(api_key=julep_api_key)

----------------------------------------

TITLE: OpenAPI Endpoint Definition - List Categories
DESCRIPTION: OpenAPI specification for GET endpoint that retrieves application categories. Path defined as /api/v1/apps/list/categories.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/apps/list/categories

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup script executable on Linux/macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Cloning the Repository in Shell
DESCRIPTION: Commands to clone the repository and navigate to the project directory.

LANGUAGE: sh
CODE:
git clone <repository-url>
cd path/to/project/directory

----------------------------------------

TITLE: Installing Composio and GitHub Setup
DESCRIPTION: Commands for installing the Composio LangChain package and connecting GitHub account for agent functionality.

LANGUAGE: bash
CODE:
# Install Composio LangChain package
pip install composio-praisonai

# Connect your GitHub account
composio-cli add github

# View available applications you can connect with
composio-cli show-apps

----------------------------------------

TITLE: Running the AI Assignment Agent Script
DESCRIPTION: This command executes the main Python script for the AI Assignment Agent, which will prompt the user to choose between creating a new assignment or reviewing existing assignments on Canvas.

LANGUAGE: bash
CODE:
python assignment_agent.py

----------------------------------------

TITLE: Generating Dockerfiles using Python script
DESCRIPTION: This command runs the generate.py script to create Dockerfiles in the generated/ directory.

LANGUAGE: python
CODE:
python generate.py

----------------------------------------

TITLE: Navigating to Project Directory in Bash
DESCRIPTION: Command to change to the directory containing project files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: bash
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Executing CAMEL agent for GitHub repository starring task
DESCRIPTION: This snippet demonstrates how to execute the CAMEL agent with a specific prompt to star a GitHub repository, showcasing the integration of natural language commands with GitHub actions.

LANGUAGE: python
CODE:
prompt = (
    "I have created a new GitHub Repo,"
    "Please star my github repository: camel-ai/camel"
)
user_msg = BaseMessage.make_user_message(role_name="User", content=prompt)
print(Fore.YELLOW + f"User prompt:\n{prompt}\n")

response = agent.step(user_msg)
for msg in response.msgs:
    print_text_animated(Fore.GREEN + f"Agent response:\n{msg.content}\n")

----------------------------------------

TITLE: Running Scheduler Agent Python Script
DESCRIPTION: Command to execute the main Python script that runs the Scheduler Agent. This script utilizes Composio, CrewAI, LangChain, and ChatGPT to process emails and schedule events.

LANGUAGE: shell
CODE:
python python/examples/advanced_agents/scheduler_agent/scheduler_agent_crewai/main.py

----------------------------------------

TITLE: Running Trading Agent
DESCRIPTION: Command to execute the main trading agent script

LANGUAGE: shell
CODE:
python cookbook/python-examples/advanced_agents/cryptokit/trading_agent/main.py

----------------------------------------

TITLE: Version Control Commands for Composio Release
DESCRIPTION: Collection of command line instructions for managing version bumps and branch creation during the release process.

LANGUAGE: bash
CODE:
python scripts/bump.py --major/--minor/--patch/--pre/--post

LANGUAGE: bash
CODE:
release/v{version}

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project folder containing necessary files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Configuring E2B Environment in Python and JavaScript
DESCRIPTION: Shows how to set up an E2B environment for cloud-based execution using both Python and JavaScript. Requires setting the E2B_API_KEY environment variable.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, WorkspaceType
toolset = ComposioToolSet(
    workspace_config=WorkspaceType.E2B(),
)

LANGUAGE: javascript
CODE:
import { OpenAIToolset, Workspace } from "composio-core"

toolset = new OpenAIToolset({
  workspaceConfig: Workspace.E2B({})
})

----------------------------------------

TITLE: Making Setup Script Executable
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Setting Up Environment in Shell
DESCRIPTION: Commands to make the setup script executable and run it.

LANGUAGE: sh
CODE:
chmod +x setup.sh
./setup.sh

----------------------------------------

TITLE: Setting Up Environment Variables for AI Assignment Agent
DESCRIPTION: This snippet shows the content of the .env file, which should contain the OpenAI API key and Composio API key for the AI Assignment Agent to function properly.

LANGUAGE: bash
CODE:
OPENAI_API_KEY=your_openai_key
COMPOSIO_API_KEY=your_composio_key

----------------------------------------

TITLE: Initializing Composio Tools - Python
DESCRIPTION: Configuration of GitHub tools with retry settings using Composio toolset.

LANGUAGE: python
CODE:
# Initialize toolset
composio_toolset = ComposioToolSet()

# Configure max retries for specific tools
max_retries = {
    Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER: 5,    # More retries for starring
    Action.GITHUB_CREATE_REPOSITORY: 2   # Fewer retries for creation
}

# Get GitHub tools with retry configuration
tools = composio_toolset.get_tools(
    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER],
    max_retries=max_retries,
    default_max_retries=3  # Default retries for tools not specified in max_retries
)

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Shell command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Installing Required Libraries
DESCRIPTION: Install the necessary Composio and OpenAI libraries using package managers.

LANGUAGE: bash
CODE:
pip install composio-openai openai

LANGUAGE: bash
CODE:
npm install composio-core openai

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change to the project directory where the necessary files are located.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Updating App and Action Enums
DESCRIPTION: Adds new tool and action entries to the enum classes for registration in Composio.

LANGUAGE: python
CODE:
class App(str, Enum):
    """Composio App."""

    ABLY = "ably"
    ACCELO = "accelo"
    <TOOL_ENUM_NAME> = <_tool_name_>



class Action(tuple, Enum):
    """App action."""

    MATHEMATICAL_CALCULATOR = ("mathematical", "mathematical_calculator", True, True)
    LOCALWORKSPACE_WORKSPACESTATUSACTION = ("localworkspace", "localworkspace_workspacestatusaction", True, True)
    LOCALWORKSPACE_CREATEWORKSPACEACTION = ("localworkspace", "localworkspace_createworkspaceaction", True, True)
    <ACTION_ENUM_NAME> = ( <_tool_name>, <_action_name>, True, True)

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems. This step may be necessary before running the setup script.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Executing Setup Script
DESCRIPTION: Command to run the setup script that configures the environment and installs required dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Creating Sum Calculator with TypeScript and Composio
DESCRIPTION: Example demonstrating how to implement a custom tool for calculating sums using TypeScript, OpenAI, and Composio. Shows tool definition, API interaction, and response handling.

LANGUAGE: typescript
CODE:
import { ActionExecutionResDto, OpenAIToolSet, RawExecuteRequestParam } from "composio-core"
import { OpenAI } from "openai";
import { z } from "zod"
import dotenv from "dotenv";

dotenv.config();

const openai_client = new OpenAI();
const toolset = new OpenAIToolSet();

await toolset.createAction({
  actionName: "calculateSum",
  description: "Calculate the sum of two numbers",
  inputParams: z.object({
      a: z.number(),
      b: z.number()
  }),
  callback: async (inputParams: {}, authCredentials: Record<string, string> | undefined, executeRequest: (data: RawExecuteRequestParam) => Promise<ActionExecutionResDto>) => {
      const { a, b } = inputParams as { a: number, b: number };
      const sum = a + b;
      return {
        successful: true,
        data: {
          sum: sum
        }
      };
  }
});

const tools = await toolset.getTools({
  actions: ["calculateSum"]
});
const instruction = "What is 3932 + 2193?";

const response = await openai_client.chat.completions.create({
  model: "gpt-4o-mini",
  messages: [{ role: "user", content: instruction }],
  tools: tools,
  tool_choice: "auto",
});

const result = await toolset.handleToolCall(response);
console.log(result);

----------------------------------------

TITLE: Importing Libraries and Initializing ComposioToolSet
DESCRIPTION: Code to import required libraries and initialize the ComposioToolSet for both Python and TypeScript. This sets up the foundation for using Composio tools with LangGraph.

LANGUAGE: python
CODE:
from typing import Literal
from langchain_openai import ChatOpenAI
from langgraph.graph import MessagesState, StateGraph
from langgraph.prebuilt import ToolNode
from composio_langgraph import Action, ComposioToolSet, App

composio_toolset = ComposioToolSet()

LANGUAGE: typescript
CODE:
import { LangGraphToolSet } from "composio-core";
import { ToolNode } from "@langchain/langgraph/prebuilt";
import { ChatOpenAI } from "@langchain/openai";
import { StateGraph, END, MessagesAnnotation, START } from "@langchain/langgraph";
import { HumanMessage } from "@langchain/core/messages";

const composioToolset = new LangGraphToolSet();

----------------------------------------

TITLE: Importing Dependencies for Python Research Agent
DESCRIPTION: Imports required libraries including Composio, LlamaIndex, and OpenAI for building the research agent.

LANGUAGE: python
CODE:
import os
import dotenv
from composio_llamaindex import Action, ComposioToolSet
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI
from llama_index.agent.openai import OpenAIAgent
from llama_index.tools.arxiv.base import ArxivToolSpec

----------------------------------------

TITLE: Running Main Python Script - Shell Command
DESCRIPTION: Command to execute the main Python script that implements the Human in the Loop functionality.

LANGUAGE: shell
CODE:
python cookbook/examples/human_in_the_loop/main.py

----------------------------------------

TITLE: Running Main Python Script in Shell
DESCRIPTION: Command to execute the main Python script (main.py) located in the cookbook/examples/rag_agent directory, which implements the RAG agent functionality.

LANGUAGE: shell
CODE:
python cookbook/examples/rag_agent/main.py

----------------------------------------

TITLE: Integrating Composio with OpenAI Agents
DESCRIPTION: Complete example showing how to initialize and use Composio tools with OpenAI Agents. Demonstrates setting up a GitHub agent that can star repositories using the Composio toolset.

LANGUAGE: python
CODE:
import asyncio
import dotenv
from agents import Agent, Runner

from composio_openai_agents import Action, ComposioToolSet

# Load environment variables from .env
dotenv.load_dotenv()

# Initialize Composio toolset
composio_toolset = ComposioToolSet()

# Get all the tools
tools = composio_toolset.get_tools(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])

# Create an agent with the tools
agent = Agent(
    name="GitHub Agent",
    instructions="You are a helpful assistant that helps users with GitHub tasks.",
    tools=tools,
)

# Run the agent
async def main():
    result = await Runner.run(agent, "Star the repository composiohq/composio on GitHub")
    print(result.final_output)

asyncio.run(main())

----------------------------------------

TITLE: Integrating Composio with OpenAI Agents
DESCRIPTION: Complete example showing how to initialize and use Composio tools with OpenAI Agents. Demonstrates setting up a GitHub agent that can star repositories using the Composio toolset.

LANGUAGE: python
CODE:
import asyncio
import dotenv
from agents import Agent, Runner

from composio_openai_agents import Action, ComposioToolSet

# Load environment variables from .env
dotenv.load_dotenv()

# Initialize Composio toolset
composio_toolset = ComposioToolSet()

# Get all the tools
tools = composio_toolset.get_tools(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])

# Create an agent with the tools
agent = Agent(
    name="GitHub Agent",
    instructions="You are a helpful assistant that helps users with GitHub tasks.",
    tools=tools,
)

# Run the agent
async def main():
    result = await Runner.run(agent, "Star the repository composiohq/composio on GitHub")
    print(result.final_output)

asyncio.run(main())

----------------------------------------

TITLE: Running PR Agent Python Script
DESCRIPTION: Command to execute the main Python script for the PR agent.

LANGUAGE: shell
CODE:
python cookbook/examples/pr_agent_langchain/main.py

----------------------------------------

TITLE: Installing Composio Packages
DESCRIPTION: Commands to install the necessary Composio packages for Python and JavaScript.

LANGUAGE: bash
CODE:
pip install composio-openai

LANGUAGE: bash
CODE:
npm install composio-core

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project folder containing necessary files like setup.sh, slack_agent_openai.py, requirements.txt, and README.md.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Instructions for creating a .env file and adding necessary API keys for Composio and OpenAI.

LANGUAGE: plaintext
CODE:
COMPOSIO_API_KEY=YOUR_COMPOSIO_API_KEY
OPENAI_API_KEY=YOUR_OPENAI_API_KEY

----------------------------------------

TITLE: Adding Custom Environment Variables
DESCRIPTION: Example of adding additional environment variables to workspace configuration

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet(
    workspace_config=WorkspaceType.Docker(
        environment={
            "SOME_API_TOKEN": "<SOME_API_TOKEN>",
        }
    )
)

----------------------------------------

TITLE: Schema and Preprocessing Implementation in Python
DESCRIPTION: Example showing how to implement schema processing and preprocessing for the Gmail send email tool, including parameter modification and injection.

LANGUAGE: python
CODE:
def gmail_schema_processor(schema: dict) -> dict:
    del schema["recipient_email"]
    del schema["attachment"]
    return schema

def gmail_preprocessor(inputs: dict) -> dict:
    inputs["recipient_email"] = "sama@composio.dev"  # Change to an email you can access to test!
    return inputs

processed_send_email_tool = toolset.get_tools(
    actions=[Action.GMAIL_SEND_EMAIL],
    processors={
        "schema": {Action.GMAIL_SEND_EMAIL: gmail_schema_processor},
        "pre": {Action.GMAIL_SEND_EMAIL: gmail_preprocessor},
    },
    check_connected_accounts=False,
)

response = client.chat.completions.create(
    model="gpt-4o-mini",
    messages=[
        {"role": "system", "content": "You are head of AGI at OpenAI."},
        {
            "role": "user",
            "content": "Send an email to Sam Altman in one sentence that AGI is coming 5 years earlier.",
        },
    ],
    tools=processed_send_email_tool,
)

exec_response = toolset.handle_tool_calls(response)

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project location containing essential files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change directory to the project location.

LANGUAGE: bash
CODE:
cd path/to/your/project

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems. This step may be necessary before running the setup script.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Listing Python Package Dependencies for Composio
DESCRIPTION: This snippet lists the required Python packages for the Composio project. It includes LangChain and its extensions, a custom Composio-LangChain integration, and python-dotenv for environment variable management.

LANGUAGE: plaintext
CODE:
langchain
langchain-openai
langchain-ollama
composio-langchain
python-dotenv

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Runs the setup.sh script to configure the environment, install dependencies, login to Composio, and add necessary tools.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Running Main Python Script for Code Analysis
DESCRIPTION: Command to execute the main Python script for code analysis using the Composio framework.

LANGUAGE: shell
CODE:
python python/examples/quickstarters/code-analysis/main.py

----------------------------------------

TITLE: Importing LangGraph Base Packages
DESCRIPTION: Initial imports required for setting up LangGraph agent environment

LANGUAGE: python
CODE:
from typing import Literal

from langchain_openai import ChatOpenAI
from langgraph.graph import MessagesState, StateGraph
from langgraph.prebuilt import ToolNode

----------------------------------------

TITLE: Running Main Python Script for Meeting Agent
DESCRIPTION: Command to execute the main Python script that implements the Meeting agent functionality for market research and trend analysis.

LANGUAGE: shell
CODE:
python cookbook/python-examples/advanced_agents/sales_kit/meeting_agent/main.py

----------------------------------------

TITLE: Installing Composio Core Package
DESCRIPTION: Installs the core Composio SDK package using pip package manager. Requires Python 3.8 or higher.

LANGUAGE: bash
CODE:
# Install the core Composio SDK
pip install composio-core

----------------------------------------

TITLE: Installing Composio and Connecting GitHub Account
DESCRIPTION: This snippet shows how to install the Composio LangChain package, connect a GitHub account, and view available applications for connection.

LANGUAGE: bash
CODE:
# Install Composio LangChain package
pip install composio-openai

# Connect your GitHub account
composio-cli add github

# View available applications you can connect with
composio-cli show-apps

----------------------------------------

TITLE: Executing Demo Script for Lead Generator Agent
DESCRIPTION: This command runs the demo script for the Lead Generator Agent using Node.js.

LANGUAGE: bash
CODE:
node demo.mjs

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup.sh script executable on Linux/macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: OpenAPI Endpoint Definition for API Key Regeneration
DESCRIPTION: OpenAPI specification for the POST endpoint that handles API key regeneration for projects within an organization. The endpoint follows the pattern /api/v1/org/projects/{projectId}/api-key/regenerate.

LANGUAGE: openapi
CODE:
openapi: post /api/v1/org/projects/{projectId}/api-key/regenerate

----------------------------------------

TITLE: Making setup.sh Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Executing setup.sh Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Filtering Specific Composio Apps
DESCRIPTION: Shows how to restrict agents to use tools from specific apps, in this case, only the GitHub create issue action.

LANGUAGE: bash
CODE:
# To restrict agents from using all tools, filter specific tools 
tools = composio_toolset.get_tools(actions=[Action.GITHUB_CREATE_ISSUE])

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems, which is necessary before running the script.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment, installs dependencies, logs into Composio, and adds necessary tools.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Initializing Environment and Julep Client
DESCRIPTION: This code sets up the development environment by importing necessary libraries, configuring the Julep client, and defining agent settings.

LANGUAGE: python
CODE:
import os
import textwrap
from julep import Client
from dotenv import load_dotenv


load_dotenv()

api_key = os.environ["JULEP_API_KEY"]
base_url = os.environ["JULEP_API_URL"]
# openai_api_key = os.environ["OPENAI_API_KEY"]

client = Client(api_key=api_key, base_url=base_url)



name = "Jessica"
about = "Jessica is a forward-thinking tech entrepreneur with a sharp eye for disruptive technologies. She excels in identifying and nurturing innovative tech startups, with a particular interest in sustainability and AI."
default_settings = {
    "temperature": 0.7,
    "top_p": 1,
    "min_p": 0.01,
    "presence_penalty": 0,
    "frequency_penalty": 0,
    "length_penalty": 1.0,
    "max_tokens": 150,
}

----------------------------------------

TITLE: Setting GitHub Access Token
DESCRIPTION: Command to set up GitHub authentication by exporting the access token as an environment variable.

LANGUAGE: bash
CODE:
export GITHUB_ACCESS_TOKEN=<github_access_token>

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Makes the setup.sh script executable on Linux or macOS systems using the chmod command.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script for environment configuration and dependency installation

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 by default.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Running Scheduler Agent Python Script
DESCRIPTION: Command to execute the main Python script that implements the Scheduler Agent functionality using Composio, PhiData, and ChatGPT.

LANGUAGE: shell
CODE:
python python/examples/advanced_agents/scheduler_agent/scheduler_agent_phidata/main.py

----------------------------------------

TITLE: Running Setup Script - Shell
DESCRIPTION: Executes the setup script to configure the environment, install dependencies, and setup Composio tools.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Enabling Triggers in Python and TypeScript
DESCRIPTION: Code examples showing how to enable triggers for Slack message events using both Python and TypeScript SDKs. Demonstrates basic trigger setup with the ComposioToolSet.

LANGUAGE: python
CODE:
from composio_openai import ComposioToolSet

toolset = ComposioToolSet()

user_id = "default" # User ID referencing an entity retrieved from application logic
entity = toolset.get_entity(id=user_id)
triggers = toolset.get_trigger("SLACK_RECEIVE_MESSAGE")

res = entity.enable_trigger(
    app=App.SLACK,
    trigger_name="SLACK_RECEIVE_MESSAGE",
    config={}
)

print(res["status"])

LANGUAGE: typescript
CODE:
import { ComposioToolSet } from "composio-core";
const toolset = new ComposioToolSet();

const userId = "default";

const entity = await toolset.getEntity(userId);

const trigger = await toolset.triggers.get({
  triggerId: "SLACK_RECEIVE_MESSAGE",
});

const res = await entity.setupTrigger({
  triggerName: "SLACK_RECEIVE_MESSAGE",
  app: "slack",
  config: {},
});

console.log(res.status);

----------------------------------------

TITLE: Python Dependencies List
DESCRIPTION: List of required Python packages including LlamaIndex integration, Gradio UI framework, and environment variable management.

LANGUAGE: plaintext
CODE:
composio-llamaindex
gradio
python-dotenv

----------------------------------------

TITLE: Defining GET Endpoint for Organization Projects in OpenAPI
DESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /api/v1/org/projects endpoint. It specifies the path and HTTP method for retrieving organization projects.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/org/projects

----------------------------------------

TITLE: Running SQL Agent Python Script
DESCRIPTION: Command to execute the main Python script that runs the SQL agent, performing database operations and logging SQL queries.

LANGUAGE: shell
CODE:
python cookbook/examples/sql_agent/main.py

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems. This step may be necessary before running the setup script.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current working directory to the project folder containing essential files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory in Bash
DESCRIPTION: Commands to clone the Composio repository and navigate to the portfolio generator example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/composioHQ/composio.git
cd composio/js/examples/portfolio-generator

----------------------------------------

TITLE: Using OpenAI Function Call for Task Analysis
DESCRIPTION: Python code that uses OpenAI's API to analyze a natural language task and determine the appropriate Slack action. It requires an OpenAI API key and uses the GPT-4 Turbo model.

LANGUAGE: python
CODE:
from openai import OpenAI
my_task = "Set a reminder to buy groceries tomorrow at 5pm"
# Initialize the OpenAI client with your API key
openai_client = OpenAI(api_key="******OPENAIKEY******")
# Create a chat completion request to decide on the action
response = openai_client.chat.completions.create(
model="gpt-4-turbo-preview",
tools=actions, # Passing actions we fetched earlier.
messages=[
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": my_task}
  ]
)

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup script executable on Unix-based systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Installing and Configuring Composio MCP for Claude Integration
DESCRIPTION: This bash command installs the Composio Core package and configures it for use with Claude AI. It requires replacing '<YOUR_URL>' with the specific Server-Sent Events (SSE) URL for the desired service.

LANGUAGE: bash
CODE:
# Install and configure with npm
npx composio-core@rc mcp "<YOUR_URL>" --client claude

# Restart Claude Desktop to apply changes

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems. This step may be necessary before running the setup script.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: GET API Keys Endpoint Definition - OpenAPI/YAML
DESCRIPTION: OpenAPI specification that defines the GET endpoint for retrieving API keys at /api/v1/api_keys.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/api_keys

----------------------------------------

TITLE: Initializing Language Model and Defining Tools (JavaScript)
DESCRIPTION: This snippet initializes the ChatOpenAI language model and sets up the necessary tools for the agents using the Composio LangchainToolSet. It also defines functions to get the current date and timezone.

LANGUAGE: javascript
CODE:
// Initialize the language model
const llm = new ChatOpenAI({ model: "gpt-4-turbo" });

// Define tools for the agents
// We are using Google calendar tool from composio to connect to our calendar account.
const composioToolset = new LangchainToolSet({
    apiKey: process.env.COMPOSIO_API_KEY
});
const tools = await composioToolset.getTools({
    actions: ["googlecalendar_create_event", "googlecalendar_list_events"]
});

// Retrieve the current date and time
const getCurrentDate = () => new Date().toISOString().split('T')[0];
const getTimezone = () => new Date().toLocaleTimeString('en-us', { timeZoneName: 'short' }).split(' ')[2];

const date = getCurrentDate();
const timezone = getTimezone();

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Installing Required Packages for Composio and LangGraph Integration
DESCRIPTION: Commands to install necessary packages for both Python and TypeScript environments to set up Composio with LangGraph.

LANGUAGE: bash
CODE:
pip install composio-langgraph

LANGUAGE: bash
CODE:
npm i @langchain/langgraph
npm i composio-core 
npm i @langchain/openai
npm i @langchain/core

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to change the permissions of the setup.sh script, making it executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script for environment configuration and dependency installation

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change to the project directory before running the application

LANGUAGE: bash
CODE:
cd path/to/your/project

----------------------------------------

TITLE: Installing SWEBench-Agent Dependencies
DESCRIPTION: Command to install the required Python packages SWEKit and Composio-core using pip.

LANGUAGE: bash
CODE:
pip install -U swekit composio-core

----------------------------------------

TITLE: Listing Project Dependencies for Composio
DESCRIPTION: This snippet lists the required dependencies for the Composio project. It includes LlamaIndex components for handling YouTube transcripts and the python-dotenv library for managing environment variables.

LANGUAGE: plaintext
CODE:
composio-llamaindex
llama-index-readers-youtube-transcript
python-dotenv

----------------------------------------

TITLE: Initializing Docker Workspace Environment
DESCRIPTION: Sets up a basic Docker workspace environment for OpenAI toolset with default configuration.

LANGUAGE: javascript
CODE:
import { OpenAIToolset, Workspace } from "composio-core"

toolset = new OpenAIToolset({
    workspaceConfig: Workspace.Docker({})
})

----------------------------------------

TITLE: Launching Python Application
DESCRIPTION: Command to start the main Python application for the Human in the Loop agent.

LANGUAGE: shell
CODE:
python cookbook/examples/human_in_the_loop/main.py

----------------------------------------

TITLE: Python Package Dependencies Declaration
DESCRIPTION: Lists required Python packages including CrewAI with tools, python-dotenv for environment management, Composio core and CrewAI integration, and LangChain OpenAI package.

LANGUAGE: plaintext
CODE:
crewai
crewai[tools]
python-dotenv
composio_core
composio-crewai
langchain_openai

----------------------------------------

TITLE: Configuring Fly.io Ports for Development or Deployment in Python
DESCRIPTION: Configure ports for development or deployment on Fly.io using the ComposioToolSet and WorkspaceType.FlyIO() with specific port and protocol settings.

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet(
    workspace_config=WorkspaceType.FlyIO(
        image="composio/composio:latest",
        ports=[{
            "ports": [{"port": 443, "handlers": ["tls", "http"]}],
            "internal_port": 80,
            "protocol": "tcp"
        }],
    )
)

----------------------------------------

TITLE: Making Setup Script Executable
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS.

LANGUAGE: sh
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script which configures the environment, installs dependencies, and sets up Composio tools.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Navigating Project Directory
DESCRIPTION: Shell command to change to the project's working directory where setup and main files are located.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Python Dependencies List
DESCRIPTION: A list of required Python packages including LangChain components, OpenAI integration, Groq support, and environment configuration utilities.

LANGUAGE: plaintext
CODE:
composio-langgraph
langchain-openai
langchain-groq
langchain-community
python-dotenv

----------------------------------------

TITLE: Running Main Python Script in Shell
DESCRIPTION: Executes the main Python script for the news summary agent, which populates a Notion page with data.

LANGUAGE: shell
CODE:
python cookbook/examples/news_summary/main.py

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project folder containing necessary files.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Installing Composio and GitHub Setup
DESCRIPTION: Instructions for installing the Composio LangChain package and connecting a GitHub account for agent functionality

LANGUAGE: bash
CODE:
# Install Composio LangChain package
pip install composio-camel

# Connect your GitHub account
composio-cli add github

# View available applications you can connect with
composio-cli show-apps

----------------------------------------

TITLE: Setting File Permissions in Shell
DESCRIPTION: Command to make the setup script executable on Linux/macOS systems

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Python Implementation of AI Outreach Agent
DESCRIPTION: Complete Python implementation including initialization of tools, LLM setup, and agent configuration using Composio and LlamaIndex.

LANGUAGE: python
CODE:
from composio_llamaindex import ComposioToolSet, App, Action
from llama_index.core.agent import FunctionCallingAgentWorker
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI
from dotenv import load_dotenv

load_dotenv()
toolset = ComposioToolSet(api_key="")
tools = toolset.get_tools(actions=[Action.HUBSPOT_LIST_CONTACTS_PAGE, Action.GMAIL_CREATE_EMAIL_DRAFT])

llm = OpenAI(model="gpt-4o")

prefix_messages = [
    ChatMessage(
        role="system",
        content=(
            f"""
            "You are a Lead Outreach Agent that is has access to the CRM through HubSpot."
            "and is an expert writer. Your job is to first research some info about the lead "
            "given to you and then draft a perfect ideal email for whatever input task is given to you. "
            """
        ),
    )
]

agent = FunctionCallingAgentWorker(
    tools=tools,
    llm=llm,
    prefix_messages=prefix_messages,
    max_function_calls=10,
    allow_parallel_tool_calls=False,
    verbose=True,
).as_agent()

user_input = f"Draft an email for each lead in my Hubspot contacts page introducing yourself and asking them if they're interested in integrating AI Agents in their workflow."
response = agent.chat(user_input)

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup.sh script executable on Unix-based systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Executing Main Script - Shell
DESCRIPTION: Command to run the main Python script that generates the presentation using the configured environment.

LANGUAGE: shell
CODE:
python cookbook/examples/quickstarters/presentation_agent/main.py

----------------------------------------

TITLE: Importing Base Packages for Calendar Agent (JavaScript)
DESCRIPTION: This code snippet imports the essential libraries needed for the Calendar Agent project in JavaScript, including dotenv for environment variables, OpenAI integration, and Langchain components.

LANGUAGE: javascript
CODE:
import dotenv from 'dotenv';
import { ChatOpenAI } from "@langchain/openai";
import { AgentExecutor, createOpenAIFunctionsAgent } from "langchain/agents";
import { pull } from "langchain/hub";
import { LangchainToolSet } from "composio-core";

dotenv.config();

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script which configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Implementing File Management Tools with LangChain
DESCRIPTION: Examples showing how to use file management tools like open, rename, edit, create files and perform git operations. Uses LangChain's agent framework with OpenAI integration.

LANGUAGE: python
CODE:
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain import hub
from langchain_openai import ChatOpenAI
from composio_langchain import ComposioToolSet, Action, App

llm = ChatOpenAI()
prompt = hub.pull("hwchase17/openai-functions-agent")

composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(actions=['FILETOOL_OPEN_FILE'])

agent = create_openai_functions_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

task = "your task description here"
result = agent_executor.invoke({"input": task})
print(result)

LANGUAGE: javascript
CODE:
import { ChatOpenAI } from "@langchain/openai";
import { createOpenAIFunctionsAgent, AgentExecutor } from "langchain/agents";
import { LangchainToolSet } from "composio-core";
import { pull } from "langchain/hub";

const llm = new ChatOpenAI({
  model: "gpt-4-turbo",
  temperature: 0,
});

const prompt = await pull("hwchase17/openai-functions-agent");

const toolset = new LangchainToolSet({ apiKey: "<your-composio-api-key>" });
const tools = await toolset.getTools({ actions: ["FILETOOL_OPEN_FILE"] });

const agent = await createOpenAIFunctionsAgent({llm, tools, prompt});

const agentExecutor = new AgentExecutor({ agent, tools, verbose: true });

const response = await agentExecutor.invoke({ input: "your task description here" });
console.log(response);

----------------------------------------

TITLE: Initializing Together AI Client
DESCRIPTION: Setup code for initializing the Together AI client with API key configuration.

LANGUAGE: python
CODE:
from together import Together

# Initialize OpenAI client
client = Together(api_key="<together-ai-api-key>")

----------------------------------------

TITLE: Installing Composio and GitHub Setup - Bash
DESCRIPTION: Instructions for installing the Composio Pydantic-AI package and connecting a GitHub account.

LANGUAGE: bash
CODE:
# Install Composio Pydantic-AI package
pip install composio-pydanticai

# Connect your GitHub account
composio add github

# View available applications you can connect with
composio apps

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script that configures the Slackbot environment

LANGUAGE: bash
CODE:
./setup.sh

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Changes the current directory to the project folder containing necessary files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Navigating Project Directory
DESCRIPTION: Command to change to the project directory containing setup files

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Running Python Script for Hackernews Agent
DESCRIPTION: Command to execute the main Python script that implements the Hackernews search agent functionality.

LANGUAGE: shell
CODE:
python cookbook/examples/quickstarters/perplexity_for_hackernews/main.py

----------------------------------------

TITLE: Listing All Actions in Composio using Python
DESCRIPTION: This code snippet demonstrates how to list all available actions in Composio with a limit of 10 using the Python SDK.

LANGUAGE: python
CODE:
from composio import Composio

client = Composio()
print(client.actions.get(limit=10)) # print all actions supported

----------------------------------------

TITLE: Running the Application with Node.js
DESCRIPTION: Command to execute the application using Node.js, specifically running the demo.mjs file.

LANGUAGE: bash
CODE:
node demo.mjs

----------------------------------------

TITLE: Connecting GitHub Account via CLI
DESCRIPTION: Use Composio CLI commands to log in and add GitHub integration.

LANGUAGE: shell
CODE:
composio login
composio add github

----------------------------------------

TITLE: Listing All Apps in Composio using CLI
DESCRIPTION: This command shows how to list all available tools (apps) in Composio using the command-line interface.

LANGUAGE: bash
CODE:
composio apps

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change into the project directory containing required files like setup.sh, main.py, requirements.txt, and README.md

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Running Setup Script - Shell
DESCRIPTION: Command to execute the setup script that configures the environment, installs dependencies, and performs Composio login.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Executing Agent Actions
DESCRIPTION: Implementation of agent execution for GitHub repository starring using Together AI chat completions.

LANGUAGE: python
CODE:
my_task = "Star a repo composiohq/composio on GitHub"

# Create a chat completion request to decide on the action
response = client.chat.completions.create(model="gpt-4o",
    tools=actions, # Passing actions we fetched earlier.
    messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": my_task}
        ]
    )

print(response)

----------------------------------------

TITLE: Initiating GitHub Connection with Composio in Python
DESCRIPTION: This code shows how to initiate a connection to GitHub using Composio's Python library, generating a URL for authentication.

LANGUAGE: Python
CODE:
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change to the directory containing project files.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Running PR Agent Python Script
DESCRIPTION: Command to execute the main Python script for the PR agent implementation.

LANGUAGE: shell
CODE:
python cookbook/examples/pr_agent_crewai/main.py

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change to the project's root directory where essential files are located.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Running Calendar Agent Python Script
DESCRIPTION: Command to execute the main Python script that implements the Calendar Agent functionality, adding events to Google Calendar based on the to-do list.

LANGUAGE: shell
CODE:
python python/examples/quickstarters/calendar_agent/main.py

----------------------------------------

TITLE: Setting Environment Variables
DESCRIPTION: Configure API keys for Composio and OpenAI services.

LANGUAGE: bash
CODE:
export COMPOSIO_API_KEY=<your-composio-api-key>
export OPENAI_API_KEY=<your-openai-api-key>

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current working directory to the project folder containing essential files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Runs the setup.sh script to set up the environment, install dependencies, login to composio, and add necessary tools.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Importing Required Python Packages
DESCRIPTION: Importing necessary packages including Langchain components and Composio integration

LANGUAGE: python
CODE:
import os
import dotenv
#To use Open Source LLMs from huggingface
from langchain_community.llms import HuggingFaceEndpoint
from langchain_community.chat_models.huggingface import ChatHuggingFace
#Langchain Utilities for Agents
from langchain.agents import AgentExecutor
from langchain.agents.format_scratchpad import format_log_to_str
from langchain.agents.output_parsers import ReActJsonSingleInputOutputParser
from langchain import hub
from langchain.tools.render import render_text_description
#Importing Composio
from composio_langchain import ComposioToolSet, App

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment, installs dependencies, logs into composio, and adds necessary tools.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Authenticating Slack Integration with Composio
DESCRIPTION: Python code to authenticate and connect a Slack account using Composio SDK. It initializes the Composio client, retrieves the Slack integration, and initiates a new connection.

LANGUAGE: python
CODE:
from composio import Composio, TestIntegration
client = Composio("api-key")
#client.get_integration(**YourIntegrationID**)
integration = client.get_integration(TestIntegration.SLACK)
#Trying to initiate a new connection
connected_account = integration.initiate_connection(entity_id = None)
print("Complete the auth flow, link: ", connected_account.redirectUrl)

----------------------------------------

TITLE: Executing Tasks with Agent - Python
DESCRIPTION: Example of running a task using the configured Pydantic-AI agent.

LANGUAGE: python
CODE:
# Define task
task = "Star a repo composiohq/composio on GitHub"

# Run the agent synchronously
result = agent.run_sync(task)
print("Result:", result.data)
print("Trace:\n\n", result.all_messages())

----------------------------------------

TITLE: Initiating GitHub Connection in Python
DESCRIPTION: This code shows how to initiate a GitHub connection using the Composio ToolSet in Python, providing a URL for authentication.

LANGUAGE: python
CODE:
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup.sh script executable on Unix-based systems

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Installing Repository
DESCRIPTION: Commands to clone and navigate to the project directory

LANGUAGE: shell
CODE:
git clone <repository-url>
cd path/to/project/directory

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Shell command to change to the project directory containing the necessary files for the Slack Bot setup.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Project Dependencies List
DESCRIPTION: List of Python package dependencies required for the project. Includes LlamaIndex for AI/ML functionality, Streamlit for web interface creation, and python-dotenv for environment variable management.

LANGUAGE: plaintext
CODE:
composio-llamaindex
streamlit
python-dotenv

----------------------------------------

TITLE: Installing Required Libraries for Composio in TypeScript
DESCRIPTION: Install the necessary TypeScript libraries for working with Composio, including composio-core, langchain, and related packages.

LANGUAGE: bash
CODE:
npm install composio-core @langchain/openai langchain @langchain/core

----------------------------------------

TITLE: Running the Streamlit Application
DESCRIPTION: This command starts the Streamlit application for the Podcast Summarizer, making it accessible through a web interface.

LANGUAGE: bash
CODE:
streamlit run main.py

----------------------------------------

TITLE: Installing Composio-Gemini Package
DESCRIPTION: This snippet shows how to install the required package for integrating Composio with Gemini using pip.

LANGUAGE: bash
CODE:
pip install composio-gemini

----------------------------------------

TITLE: Checking for Specific App Connection in Python and JavaScript
DESCRIPTION: This snippet shows how to check if an entity has a connected account for a particular app using both Python and JavaScript. It demonstrates filtering based on app name or connected account ID.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App
from composio.client.exceptions import NoItemsFound

toolset = ComposioToolSet()

# Filter based on entity id
entity = toolset.get_entity(id="default") 

try:
    # Filters based on app name
    connection_details = entity.get_connection(app=App.GITHUB) 
    # Filters based on connected account id for an entity
    connection_details = entity.get_connection(connected_account_id="<connected_account_id>") 
    print(connection_details)
except NoItemsFound as e:
    print("No connected account found")

LANGUAGE: javascript
CODE:
import { OpenAIToolSet } from "composio-core";
const toolset = new OpenAIToolSet();

// Filter based on entity id
const entity = await toolset.client.getEntity("default")

// Filters based on app name
const connectionDetails = await entity.getConnection({ appName: "GITHUB" })

if(connectionDetails){
    console.log(connectionDetails)
}else{
    console.log("No connection details found")
}

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script for environment configuration and dependency installation.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Importing PhiData Assistant
DESCRIPTION: This snippet demonstrates the import of the Assistant class from the phi.assistant module, which is necessary for creating an AI assistant.

LANGUAGE: python
CODE:
from phi.assistant import Assistant

----------------------------------------

TITLE: Setting up Data Visualization Agent for Composio
DESCRIPTION: This snippet shows the setup of an agent to process data and generate visualizations. It includes creating an agent for data visualization, defining a visualization task, and executing the task using the agent executor.

LANGUAGE: python
CODE:
# Create the agent for data visualization
visualization_agent = create_openai_functions_agent(llm, code_tools, prompt)
visualization_executor = AgentExecutor(agent=visualization_agent, tools=code_tools, verbose=True)

# Define the visualization task
visualization_task = (
    f"Using the following data from the top 10 highest salaries: {sql_result['output']}\n"
    "Create a bar chart showing first_name on the x-axis and salary on the y-axis. "
    "Save the visualization as 'salary_chart.png'."
)

# Execute the visualization task
visualization_result = visualization_executor.invoke({"input": visualization_task})
print(f"Visualization Result: {visualization_result['output']}")

LANGUAGE: javascript
CODE:
// Function to create data visualizations
async function createVisualization(data) {
    // Get all tools including code interpreter
    const allTools = await getAllTools();
    
    // Create the agent prompt
    const prompt = await pull("hwchase17/openai-functions-agent");
    
    // Create the agent for visualization
    const agent = await createOpenAIFunctionsAgent({ 
        llm, 
        tools: allTools, 
        prompt 
    });

    // Create the agent executor
    const agentExecutor = new AgentExecutor({
        agent,
        tools: allTools,
        verbose: true,
    });

    // Execute the visualization task
    const result = await agentExecutor.invoke({
        input: `Using the following data: ${data}
                Create a bar chart showing first_name on the x-axis and salary on the y-axis.
                Save the visualization as 'salary_chart.png'.`
    });

    console.log("Visualization Result:", result.output);
    return result.output;
}

----------------------------------------

TITLE: Making setup.sh Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change to the project directory containing setup files.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Installing Ollama on Linux
DESCRIPTION: Command to install Ollama on a Linux system using curl.

LANGUAGE: sh
CODE:
curl -fsSL https://ollama.com/install.sh | sh

----------------------------------------

TITLE: Creating Host Workspace Configuration
DESCRIPTION: Configures Composio toolset to run on the host machine

LANGUAGE: python
CODE:
from composio import ComposioToolSet, WorkspaceType

toolset = ComposioToolSet(
    workspace_config=WorkspaceType.Host()
)

----------------------------------------

TITLE: Installing Required Libraries
DESCRIPTION: Instructions for installing the necessary Composio libraries for both Python and JavaScript environments.

LANGUAGE: shell
CODE:
pip install composio-core composio_openai

LANGUAGE: shell
CODE:
npm install composio-core openai

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems. This step may be necessary before running the setup script.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project folder containing setup files.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup.sh script executable on Linux/macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Cloning SWE Template Repository
DESCRIPTION: Command to clone the JavaScript SWE template repository from GitHub to get started with the framework.

LANGUAGE: bash
CODE:
git clone https://github.com/ComposioHQ/swe-js-template.git swe-js

----------------------------------------

TITLE: Defining Agent Configuration
DESCRIPTION: Setting up the agent with input processing and output parsing capabilities

LANGUAGE: python
CODE:
chat_model_with_stop = chat_model.bind(stop=["\nInvalidStop"])
agent = (
    {
        "input": lambda x: x["input"],
        "agent_scratchpad": lambda x: format_log_to_str(x["intermediate_steps"]),
    }
    | prompt
    | chat_model_with_stop
    | ReActJsonSingleInputOutputParser()
)

----------------------------------------

TITLE: Defining LLM Model Call Function
DESCRIPTION: Implementation of the model calling node for the LangGraph workflow

LANGUAGE: python
CODE:
def call_model(state: MessagesState):
    messages = state["messages"]
    response = model_with_tools.invoke(messages)
    return {"messages": [response]}

----------------------------------------

TITLE: Installing Required Packages for SQL Agent
DESCRIPTION: This snippet shows how to install the necessary packages for the SQL Agent project using pip for Python and pnpm for JavaScript. It also mentions creating a .env file for storing the OpenAI API key.

LANGUAGE: python
CODE:
pip install composio-langchain langchain-openai

LANGUAGE: javascript
CODE:
pnpm add @langchain/openai composio-core langchain dotenv

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project folder containing essential files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script for environment configuration and dependency installation.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: JavaScript Implementation of AI Outreach Agent
DESCRIPTION: Complete JavaScript implementation including initialization of tools, LLM setup, and agent configuration using Composio and LangChain.

LANGUAGE: javascript
CODE:
import { ChatOpenAI } from "@langchain/openai";
import { createOpenAIFunctionsAgent, AgentExecutor } from "langchain/agents";
import { pull } from "langchain/hub";
import dotenv from 'dotenv';
import { LangchainToolSet } from "composio-core";

dotenv.config();

const llm = new ChatOpenAI({
    model: "gpt-4-turbo",
    apiKey: process.env.OPENAI_API_KEY,
});

const toolset = new LangchainToolSet({
    apiKey: process.env.COMPOSIO_API_KEY,
});

const tools = await toolset.getTools({actions: ["HUBSPOT_LIST_CONTACTS_PAGE", "GMAIL_CREATE_EMAIL_DRAFT"]});

const prompt = await pull("hwchase17/openai-functions-agent");

const additional = `
    "You are a Lead Outreach Agent that is has access to the CRM through HubSpot."
    "and is an expert writer. Your job is to first research some info about the lead "
    "given to you and then draft a perfect ideal email template for whatever input task is given to you. "
    `;


const agent = await createOpenAIFunctionsAgent({
    llm,
    tools,
    prompt,
});

const agentExecutor = new AgentExecutor({
    agent,
    tools,
    verbose: false, 
});
const result = await agentExecutor.invoke({
    input: `Draft an email for each lead in my Hubspot contacts page introducing yourself and asking them if they're interested in integrating AI Agents in their workflow.`
});
console.log('🎉Output from agent: ', result.output);

----------------------------------------

TITLE: Creating Image Embeddings with Embed Tool in Python
DESCRIPTION: This code shows how to use the Embed Tool in Composio to create image embeddings. It executes the EMBEDTOOL_CREATE_IMAGE_VECTOR_STORE action with the specified image path.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App, Action
toolset = ComposioToolSet()
image_path = "path/to/images/folder"
toolset.execute_action(
    action=Action.EMBEDTOOL_CREATE_IMAGE_VECTOR_STORE,
    params={"path":image_path},
)

----------------------------------------

TITLE: Running DeepSeek Research Agent Python Script
DESCRIPTION: Executes the main Python script for the DeepSeek Research Agent.

LANGUAGE: shell
CODE:
python cookbook/python-examples/advanced_agents/deepseek_research/main.py

----------------------------------------

TITLE: Importing Base Packages
DESCRIPTION: Essential imports required for setting up the RAG agent system, including Composio, LangChain, and environment configuration utilities.

LANGUAGE: python
CODE:
import os
import textwrap

from composio_crewai import Action, App, ComposioToolSet
from crewai import Agent, Crew, Process, Task
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

LANGUAGE: javascript
CODE:
import dotenv from 'dotenv';
import { LangchainToolSet } from "composio-core";
import { ChatOpenAI } from "@langchain/openai";
import { AgentExecutor, createOpenAIFunctionsAgent } from "langchain/agents";
import { pull } from "langchain/hub";

dotenv.config();

----------------------------------------

TITLE: Instance URL Field Configuration in YAML
DESCRIPTION: Configuration for an instance URL field commonly used in enterprise applications like Salesforce

LANGUAGE: yaml
CODE:
fields:
  - name: instanceUrl
    display_name: Instance URL
    description: "The base URL for your instance, used for API requests."
    type: string
    required: true
    expected_from_customer: true

----------------------------------------

TITLE: Running Main Python Script
DESCRIPTION: Command to execute the main Python script for the To Do List Agent, which processes Slack conversations and creates a Notion page with the to-do list.

LANGUAGE: shell
CODE:
python cookbook/python-examples/quickstarters/Notion_todo_list_agent/crewai/main.py

----------------------------------------

TITLE: Executing Main Python Script
DESCRIPTION: Command to run the main Python script that creates and executes the calendar agent.

LANGUAGE: shell
CODE:
python python/examples/quickstarters/calendar_agent/llamaindex/main.py

----------------------------------------

TITLE: Executing LangGraph Workflow
DESCRIPTION: Streaming execution of the workflow with a sample task

LANGUAGE: python
CODE:
for chunk in app.stream(
    {
        "messages": [
            (
                "human",
                # "Star the Github Repository composiohq/composio",
                "Get my information.",
            )
        ]
    },
    stream_mode="values",
):
    chunk["messages"][-1].pretty_print()

----------------------------------------

TITLE: Installing Required Packages for Newsletter Summarizer
DESCRIPTION: This snippet shows how to install the necessary packages for the Newsletter Summarizer project using pip for Python and pnpm for JavaScript.

LANGUAGE: python
CODE:
pip install composio-crewai langchain-openai

LANGUAGE: javascript
CODE:
pnpm add hono composio-core dotenv @langchain/openai

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project folder containing essential files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Navigating Project Directory
DESCRIPTION: Command to change to the project's root directory where key files are located.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Setting Execute Permissions
DESCRIPTION: Command to make the setup script executable on Unix-based systems

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Connecting to Tools and Setting Environment Variables
DESCRIPTION: This snippet demonstrates how to connect to required tools (PeopleDataLabs and Google Sheets) and set up environment variables for API keys.

LANGUAGE: bash
CODE:
composio add peopledatalabs
composio add googlesheets

export OPENAI_API_KEY="<your-openai-api-key>"

LANGUAGE: bash
CODE:
composio add peopledatalabs
composio add googlesheets

export OPENAI_API_KEY="<your-openai-api-key>"
export COMPOSIO_API_KEY="<your-composio-api-key>"

----------------------------------------

TITLE: Custom API Key Field Definition in YAML
DESCRIPTION: Definition of a custom API key field with display name, description, and validation requirements

LANGUAGE: yaml
CODE:
fields:
  - name: api_key
    display_name: API Key
    description: "Your API key for authentication."
    type: string
    required: true
    expected_from_customer: true

----------------------------------------

TITLE: Importing Libraries and Initializing Hono in JavaScript
DESCRIPTION: Imports the required libraries (Hono and CloudflareToolSet) and initializes a new Hono application instance.

LANGUAGE: javascript
CODE:
import { Hono } from 'hono';
import { CloudflareToolSet } from "composio-core"

const app = new Hono();

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change into the project directory containing setup and configuration files.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: OpenAPI POST Endpoint for API Key Generation
DESCRIPTION: YAML specification defining the endpoint for creating new API keys at /api/v1/api_keys. The endpoint structure follows OpenAPI format.

LANGUAGE: yaml
CODE:
openapi: post /api/v1/api_keys

----------------------------------------

TITLE: GitHub Account Connection Methods
DESCRIPTION: Two alternative approaches for connecting GitHub: using Composio CLI or setting up local authentication token

LANGUAGE: bash
CODE:
composio add github

LANGUAGE: bash
CODE:
export GITHUB_ACCESS_TOKEN=<your_token>

----------------------------------------

TITLE: Initiating Non-OAuth Connection in Composio
DESCRIPTION: Illustrates the process of initiating a new non-OAuth connection (e.g., API key-based) for a user, including setting up connection parameters and handling the connection request response.

LANGUAGE: python
CODE:
# Store connection parameters
entity_id = "default"
collected_params = {"api_key": "<firecrawl_api_key>"}
auth_scheme = "API_KEY"

# Initiate new connection (You can use integration_id instead of app)
connection_request = toolset.initiate_connection(
    connected_account_params=collected_params,
    entity_id=entity_id,
    app=App.FIRECRAWL,
    auth_scheme=auth_scheme,
)

LANGUAGE: javascript
CODE:
// Store connection parameters
const entityId = "default";
const collectedParams = {
    api_key: "<firecrawl_api_key>"
};
const authScheme = "API_KEY";

const connection_request = await toolset.connectedAccounts.initiate({
    data: collectedParams,
    entityId: entityId,
    appName: "firecrawl",
    authMode: authScheme,
    authConfig: {}
})
console.log(connection_request)

----------------------------------------

TITLE: Executing Griptape Agent for GitHub Task Automation
DESCRIPTION: This code initiates a chat session with the configured Griptape agent, allowing for execution of GitHub tasks through conversational commands.

LANGUAGE: python
CODE:
Chat(agent).start()

----------------------------------------

TITLE: Installing Composio Core Package
DESCRIPTION: Installation command for the core Composio package using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install -g composio-core

----------------------------------------

TITLE: Navigating Project Directory in Shell
DESCRIPTION: Command to change into the project directory where setup and execution files are located.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project folder containing necessary files.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Setting Up Script Permissions
DESCRIPTION: Command to make the setup script executable on Unix-based systems (Linux/macOS).

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Adding CodeInterpreter Example in Composio CLI
DESCRIPTION: Specific example showing how to add the CodeInterpreter app to Composio without authentication.

LANGUAGE: bash
CODE:
composio add codeinterpreter

----------------------------------------

TITLE: Listing Python Package Dependencies
DESCRIPTION: This snippet provides a detailed list of Python package dependencies with their exact versions. It includes packages for documentation (Sphinx), testing (pytest), type checking (mypy), and development tools (pre-commit, tox).

LANGUAGE: plaintext
CODE:
alabaster==0.7.13
babel==2.12.1
certifi==2022.12.7
charset-normalizer==3.1.0
docutils==0.17.1
idna==3.4
imagesize==1.4.1
jinja2==3.1.2
markupsafe==2.1.2
packaging==23.0
pallets-sphinx-themes==2.0.3
pygments==2.15.0
requests==2.28.2
snowballstemmer==2.2.0
sphinx==4.5.0
sphinx-issues==3.0.1
sphinx-tabs==3.3.1
sphinxcontrib-applehelp==1.0.4
sphinxcontrib-devhelp==1.0.2
sphinxcontrib-htmlhelp==2.0.1
sphinxcontrib-jsmath==1.0.1
sphinxcontrib-log-cabinet==1.0.1
sphinxcontrib-qthelp==1.0.3
sphinxcontrib-serializinghtml==1.1.5
urllib3==1.26.15

asgiref==3.6.0
iniconfig==2.0.0
packaging==23.0
pluggy==1.0.0
pytest==7.3.0
python-dotenv==1.0.0 ; python_version >= "3.8"

cffi==1.15.1
cryptography==40.0.1
mypy==1.2.0
mypy-extensions==1.0.0
pycparser==2.21
types-contextvars==2.4.7.2
types-dataclasses==0.6.6
types-setuptools==67.6.0.7
typing-extensions==4.5.0

build==0.10.0
cachetools==5.3.0
cfgv==3.3.1
chardet==5.1.0
click==8.1.3
colorama==0.4.6
distlib==0.3.6
filelock==3.11.0
identify==2.5.22
nodeenv==1.7.0
pip-compile-multi==2.6.2
pip-tools==6.13.0
platformdirs==3.2.0
pre-commit==3.2.2
pyproject-api==1.5.1
pyproject-hooks==1.0.0
pyyaml==6.0
toposort==1.10
tox==4.4.11
virtualenv==20.21.0
wheel==0.40.0

----------------------------------------

TITLE: Subdomain Field Configuration in YAML
DESCRIPTION: Example of a subdomain field configuration with default value for services like PostHog

LANGUAGE: yaml
CODE:
fields:
  - name: subdomain
    display_name: Sub Domain
    description: "Your PostHog subdomain (e.g., 'app' for app.posthog.com)."
    type: string
    required: true
    default: "app"

----------------------------------------

TITLE: Running the Scheduling Agent Demo
DESCRIPTION: Command to execute the scheduling agent demo script.

LANGUAGE: bash
CODE:
node demo.mjs

----------------------------------------

TITLE: Setting Up E2B Sandbox Environment
DESCRIPTION: Configures Composio toolset to run in an E2B sandbox environment

LANGUAGE: python
CODE:
from composio import ComposioToolSet, WorkspaceType

toolset = ComposioToolSet(
    workspace_config=WorkspaceType.E2B(),
)

----------------------------------------

TITLE: Configuring Wrangler for Cloudflare Worker AI
DESCRIPTION: Sets up the wrangler.toml file with necessary configurations for the Cloudflare Worker, including the project name, main file, compatibility settings, and AI binding.

LANGUAGE: toml
CODE:
name = "github-agent"
main = "worker.js"
compatibility_date = "2024-09-23"
compatibility_flags = ["nodejs_compat"]

[vars]
COMPOSIO_API_KEY = "<your-composio-api-key>"

[ai]
binding = "AI"

----------------------------------------

TITLE: Executing setup.sh Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment, installs dependencies, logs into Composio, and adds necessary tools.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Executing Agent for GitHub Operations
DESCRIPTION: Creating and executing an agent instance to perform GitHub repository starring action.

LANGUAGE: python
CODE:
# Create a chat completion request to decide on the action
agent = Agent(tools=composio_tools, show_tool_calls=True)

agent.print_response("Can you star ComposioHQ/composio repo?")

----------------------------------------

TITLE: Installing Dependencies for Deep Researcher Agent
DESCRIPTION: This snippet shows the command to install all necessary dependencies for the Deep Researcher Agent project using pnpm. It includes packages for AI operations, data validation, and CLI enhancements.

LANGUAGE: bash
CODE:
pnpm install @ai-sdk/openai ai zod composio-core chalk dotenv figlet gradient-string ora

----------------------------------------

TITLE: Listing Python Package Dependencies
DESCRIPTION: Lists required Python packages including LlamaIndex implementation (composio-llamaindex), LlamaIndex core package (llama-index), and python-dotenv for environment variable management.

LANGUAGE: plaintext
CODE:
composio-llamaindex
llama-index
python-dotenv

----------------------------------------

TITLE: Setting Up Environment in Shell
DESCRIPTION: Commands to make the setup script executable and run it.

LANGUAGE: sh
CODE:
chmod +x setup.sh
./setup.sh

----------------------------------------

TITLE: Setting File Permissions
DESCRIPTION: Command to make the setup script executable on Unix-based systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Adding No-Auth App in Composio CLI
DESCRIPTION: Command to add a new app that doesn't require authentication to your Composio environment. Replace app_name with the desired application name.

LANGUAGE: bash
CODE:
composio add app_name

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script that configures the environment and installs dependencies

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Configuring E2B Environment for Cloud-based Execution in Python
DESCRIPTION: Set up an E2B environment for cloud-based execution of SWE agents using the ComposioToolSet and WorkspaceType.E2B() configuration. Requires E2B_API_KEY environment variable.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, WorkspaceType
toolset = ComposioToolSet(
    workspace_config=WorkspaceType.E2B(),
)

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project folder containing essential files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Importing Base Packages for Calendar Agent (Python)
DESCRIPTION: This code snippet imports the essential libraries needed for the Calendar Agent project in Python, including datetime handling, CrewAI components, and OpenAI integration.

LANGUAGE: python
CODE:
import os
from datetime import datetime

from composio_crewai import App, ComposioToolSet
from crewai import Agent, Task
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

----------------------------------------

TITLE: Running PR Agent Python Script
DESCRIPTION: Command to execute the main Python script that implements the PR agent functionality using LlamaIndex.

LANGUAGE: shell
CODE:
python cookbook/examples/pr_agent_llama_index/main.py

----------------------------------------

TITLE: Restricting Autogen Agent Access to Specific Composio Apps
DESCRIPTION: Python code showing how to restrict an Autogen agent's access to specific Composio tools for focused operations.

LANGUAGE: python
CODE:
composio_tools.register_tools([App.ASANA, App.GITHUB])

----------------------------------------

TITLE: Installing Dependencies with PNPM
DESCRIPTION: This command installs the necessary dependencies for the project using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Installing Composio SDK via NPM
DESCRIPTION: Command to install the Composio SDK package using npm package manager.

LANGUAGE: bash
CODE:
npm install composio-core

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems. This step may be necessary before running the setup script.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Navigating Project Directory
DESCRIPTION: Command to change into the project's working directory where essential files are located.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup script executable on Unix-based systems (Linux/macOS).

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup.sh script executable on Unix-based systems

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Starting the Cloudflare Worker for Development
DESCRIPTION: Use the wrangler CLI to start the Cloudflare Worker in development mode.

LANGUAGE: bash
CODE:
wrangler dev

----------------------------------------

TITLE: Installing Composio Core Package
DESCRIPTION: Instructions for installing the core Composio package using different package managers (pnpm, npm, yarn).

LANGUAGE: bash
CODE:
pnpm install -g composio-core

LANGUAGE: bash
CODE:
npm install -g composio-core

LANGUAGE: bash
CODE:
yarn install -g composio-core

----------------------------------------

TITLE: Navigating Project Directory
DESCRIPTION: Command to change into the project's working directory where key files are located

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Configuring Docker Ports for Web Apps in Python
DESCRIPTION: Configure exposed ports for web applications running in a Docker environment using the ComposioToolSet and WorkspaceType.Docker() with a ports dictionary.

LANGUAGE: python
CODE:
toolset = ComposioToolSet(
  workspace_config=WorkspaceType.Docker(
    ports={
      8001: 8001,
    }
  )
)

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to change the permissions of the setup.sh script, making it executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Cloning Repository and Changing Directory in Bash
DESCRIPTION: Commands to clone the project repository and navigate to the project directory. Replace placeholders with actual repository URL and directory name.

LANGUAGE: bash
CODE:
git clone <repository-url>
cd <repository-directory>

----------------------------------------

TITLE: Setting FlyIO API Token in Bash
DESCRIPTION: This snippet shows how to export the FlyIO API token as an environment variable, which is required when using the FlyIO workspace environment.

LANGUAGE: bash
CODE:
export FLY_API_TOKEN=<your_flyio_api_token>

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs required dependencies for the SQL agent project.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project folder containing essential files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Executing and Logging Output
DESCRIPTION: Execute the AI agent and log the response text to console

LANGUAGE: javascript
CODE:
console.log(output.text);

----------------------------------------

TITLE: Installing Dependencies for AI Assignment Agent
DESCRIPTION: This command installs the required dependencies for the AI Assignment Agent project using pip and the requirements.txt file.

LANGUAGE: bash
CODE:
pip install -r requirements.txt

----------------------------------------

TITLE: Configuring Docker Environment for SWE Agents in Python
DESCRIPTION: Set up a Docker environment for enhanced security and isolation when running SWE agents using the ComposioToolSet and WorkspaceType.Docker() configuration.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, WorkspaceType
toolset = ComposioToolSet(
    workspace_config=WorkspaceType.Docker()
)

----------------------------------------

TITLE: Running Twitter Posting Agent Script in Python
DESCRIPTION: Command to execute the main Python script for the Twitter Posting Agent after completing the setup and configuration steps.

LANGUAGE: shell
CODE:
python python/examples/advanced_agents/twitter_posting_agent/main.py

----------------------------------------

TITLE: Updating Composio Apps and Actions
DESCRIPTION: Refreshes all applications and actions to keep tools up-to-date using the Composio CLI.

LANGUAGE: bash
CODE:
composio apps update

----------------------------------------

TITLE: Running Slack Bot Agent
DESCRIPTION: Command to execute the main Python script that runs the Slack Bot Agent with CrewAI integration.

LANGUAGE: shell
CODE:
python python/examples/advanced_agents/slack_bot_agent/slack_agent_crewai/slack_agent_crewai.py

----------------------------------------

TITLE: Checking Julep Agent Response
DESCRIPTION: This code block displays the expected output of the Julep agent's response after starring a GitHub repository.

LANGUAGE: bash
CODE:
[{'content': 'I have starred the repository "composio" for you on GitHub under the account "composiohq".', 'role': 'agent'}]

----------------------------------------

TITLE: Setting Environment Variables in .env File
DESCRIPTION: Contents of the .env file for configuring API keys. Replace placeholders with actual API keys for Composio and OpenAI.

LANGUAGE: plaintext
CODE:
COMPOSIO_API_KEY=<your-composio-api-key>
OPENAI_API_KEY=<your-openai-api-key>

----------------------------------------

TITLE: Displaying Lyzr Agent Output for GitHub Repository Starring
DESCRIPTION: This snippet shows the expected output of the Lyzr agent after executing the task to star a GitHub repository. It includes pipeline start and end times, task execution details, and the final output.

LANGUAGE: bash
CODE:
START PIPELINE Composio Lyzr :: start time : 1713439069.754745
START TASK Github Starring :: start time : 1713439069.7548192
output : {'execution_details': {'executed': True}, 'response_data': ''}
END TASK Github Starring :: end time :  1713439073.961327 :: execution time : 4.206507921218872
END PIPELINE Composio Lyzr :: end time :  1713439073.961421 :: execution time : 4.206676006317139
Task completed
[{'task_id': UUID('d0280a9d-89ef-4f8b-8145-58588aebcb6c'), 'task_output': {'execution_details': {'executed': True}, 'response_data': ''}}]

----------------------------------------

TITLE: Running PR Agent Python Script
DESCRIPTION: Command to execute the main Python script for the PR agent.

LANGUAGE: shell
CODE:
python cookbook/examples/pr_agent_autogen/main.py

----------------------------------------

TITLE: Navigating Project Directory - Shell
DESCRIPTION: Command to change to the project directory containing setup files and dependencies.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Executing the AI Agent and Logging Output
DESCRIPTION: This snippet shows how to execute the defined AI agent and log its output. It represents the final step in the process of using Composio with Vercel AI SDK to star a GitHub repository.

LANGUAGE: JavaScript
CODE:
console.log(output.text);

----------------------------------------

TITLE: Installing Required Packages
DESCRIPTION: Commands for installing necessary packages and connecting GitHub tools using Composio.

LANGUAGE: python
CODE:
pip install composio-langchain
pip install langchain-groq

#Connect your GitHub so agents can use it
composio add github

#Check all different apps which you can connect with
composio apps

LANGUAGE: javascript
CODE:
npm install composio-core
npm install langchain

// Connect your GitHub so agents can use it
composio add github

// Check all different apps which you can connect with
composio apps

----------------------------------------

TITLE: Handling Tool Execution Response
DESCRIPTION: Code for processing and validating the response from the tool execution.

LANGUAGE: python
CODE:
result = toolset.handle_tool_calls(response)
pprint(result)

----------------------------------------

TITLE: Executing Setup Script
DESCRIPTION: Command to run the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Handling Tool Calls for Specific Entities
DESCRIPTION: Shows how to execute tool calls on behalf of specific users by specifying entity IDs.

LANGUAGE: python
CODE:
toolset.handle_tool_calls(
    response=response,
    entity_id=entity.id,
)

LANGUAGE: typescript
CODE:
import { OpenAIToolSet } from "composio-core";

const toolset = new OpenAIToolSet();

await toolset.handleToolCall(
  response,
  entityId: "default"
)

----------------------------------------

TITLE: Configuring FlyIO Workspace Environment in Python
DESCRIPTION: This code snippet demonstrates how to modify the benchmark.py file to use the FlyIO workspace environment. It imports the WorkspaceType and sets the workspace_env parameter in the evaluate function.

LANGUAGE: python
CODE:
from composio import WorkspaceType

# existing benchmark code

evaluate(
    bench,
    dry_run=False,
    test_range=test_range,
    test_instance_ids=test_instance_ids_list,
    workspace_env=WorkspaceType.FLYIO
)

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project location containing essential files like setup.sh, slack_agent_openai.py, requirements.txt, and README.md.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: This command demonstrates how to change the current directory to the project folder. The actual path should be replaced with the specific location of the project on the user's system.

LANGUAGE: bash
CODE:
cd path/to/your/project

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Installing Required Python Packages
DESCRIPTION: This command installs all the necessary Python packages listed in the requirements.txt file for the Podcast Summarizer project.

LANGUAGE: bash
CODE:
pip install -r requirements.txt

----------------------------------------

TITLE: Installing Composio and Connecting GitHub Account
DESCRIPTION: This snippet shows how to install the Composio LangChain package, connect a GitHub account, and view available applications for connection.

LANGUAGE: bash
CODE:
# Install Composio LangChain package
pip install composio-phidata

# Connect your GitHub account
composio-cli add github

# View available applications you can connect with
composio-cli show-apps

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project folder containing essential files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Fetching Supported Actions from Slack Integration
DESCRIPTION: Python code to retrieve all supported actions from the connected Slack account.

LANGUAGE: python
CODE:
actions = connected_account.get_all_actions()

----------------------------------------

TITLE: Executing PraisonAI Agent to Star GitHub Repository
DESCRIPTION: This snippet initializes the PraisonAI class with the agent configuration and executes the agent to perform the task of starring a GitHub repository.

LANGUAGE: python
CODE:
# Create a PraisonAI instance with the agent_yaml content
praison_ai = PraisonAI(agent_yaml=agent_yaml)

# Run PraisonAI
result = praison_ai.main()

# Print the result
print(result)

----------------------------------------

TITLE: Setting E2B API Key in Bash
DESCRIPTION: This snippet shows how to export the E2B API key as an environment variable, which is required when using the E2B workspace environment.

LANGUAGE: bash
CODE:
export E2B_API_KEY=<your_e2b_api_key>

----------------------------------------

TITLE: Executing Setup Script
DESCRIPTION: Command to run the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Running Data Analyst Agent Script in Python
DESCRIPTION: Command to execute the main Python script for the Data Analyst agent, located in the cookbook/examples/data_analyst_agent directory.

LANGUAGE: shell
CODE:
python cookbook/examples/data_analyst_agent/main.py

----------------------------------------

TITLE: Executing Newsletter Summarizer
DESCRIPTION: Command to run the main Python script that performs newsletter summarization.

LANGUAGE: shell
CODE:
python cookbook/python-examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_autogen/main.py

----------------------------------------

TITLE: Listing Composio Actions
DESCRIPTION: Shows how to retrieve a list of available actions in Composio with pagination support (limit parameter). Demonstrates implementation across Python, JavaScript, and CLI interfaces.

LANGUAGE: python
CODE:
from composio import Composio

client = Composio()
print(client.actions.get(limit=10)) # print all actions supported

LANGUAGE: javascript
CODE:
import { Composio } from "composio-core";
const composio = new Composio();
const actions = await composio.actions.list({ data: { limit: 10 } });

console.log(actions); // print all actions supported

LANGUAGE: bash
CODE:
composio actions --limit 10

----------------------------------------

TITLE: Configuring Tools and API Keys
DESCRIPTION: Set up necessary tools and environment variables for API access

LANGUAGE: bash
CODE:
composio add tavily
composio add googledocs

export OPENAI_API_KEY="<your-openai-api-key>"

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change to the directory containing the project files.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Navigating Project Directory
DESCRIPTION: Command to change into the project directory containing setup files and dependencies

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Cloning SWEBench-Agent Repository
DESCRIPTION: Git commands to clone the Composio repository and navigate to the agent directory.

LANGUAGE: bash
CODE:
git clone https://github.com/ComposioHQ/composio.git
cd composio/python/swe/agent

----------------------------------------

TITLE: Running Main Python Script in Shell
DESCRIPTION: Command to execute the main Python script for the Code Execution Agent project after completing the setup process.

LANGUAGE: shell
CODE:
python python/examples/quickstarters/code_execution_agent/main.py

----------------------------------------

TITLE: Listing Project Dependencies
DESCRIPTION: Lists the required packages for the project: composio_llamaindex for LlamaIndex integration and python-dotenv for environment variable management.

LANGUAGE: plaintext
CODE:
composio_llamaindex
python-dotenv

----------------------------------------

TITLE: Executing Agent Scripts
DESCRIPTION: These commands demonstrate how to run different agent scripts, including Slack bot, image search, scheduler, and project management agents.

LANGUAGE: sh
CODE:
python examples/advanced_agents/slack_bot_agent/main.py
python examples/advanced_agents/image_search/main.py
python examples/advanced_agents/human_in_the_loop_scheduler/main.py
python examples/advanced_agents/AI_PM_agent/main.py

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Commands to install all required dependencies for the SWE agent using different package managers.

LANGUAGE: bash
CODE:
cd swe-js && pnpm i

LANGUAGE: bash
CODE:
cd swe-js && npm i

LANGUAGE: bash
CODE:
cd swe-js && yarn install

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup script executable on Linux/macOS systems

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Cloning SWE Template Repository
DESCRIPTION: Command to clone the JavaScript template repository for creating a new SWE agent.

LANGUAGE: bash
CODE:
git clone https://github.com/ComposioHQ/swe-js-template.git swe-js

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change to the project's working directory where key files are located.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: JavaScript Market Research Agent Implementation
DESCRIPTION: Complete implementation of the market research agent using JavaScript, Langchain, and Composio tools

LANGUAGE: javascript
CODE:
import { ChatOpenAI } from "@langchain/openai";
import { createOpenAIFunctionsAgent, AgentExecutor } from "langchain/agents";
import { pull } from "langchain/hub";
import dotenv from 'dotenv';
import { LangchainToolSet } from "composio-core";

dotenv.config();

const llm = new ChatOpenAI({
    model: "gpt-4-turbo",
    apiKey: process.env.OPENAI_API_KEY,
});

const toolset = new LangchainToolSet({
    apiKey: process.env.COMPOSIO_API_KEY,
});

const tools = await toolset.getTools({
    apps: ["tavily","googledocs"]
});

const prompt = await pull("hwchase17/openai-functions-agent");

const additional = `You are a market research agent that finds niche ideas that can be built and marketed. 
        Your users are primarily indie hackers who want to build something new and are looking for ideas. The input will 
        be a domain or a category and your job is to research extensively and find ideas that can be marketed.
        Write this content in a google doc, create a google doc before writing in it.
        I want you to show the following content:
        - Data Collection and Aggregation - Show data supporting a trend
        - Sentiment Analysis - Show customer sentiment on the topic
        - Trend Forecasting
        - Competitor Analysis
        - Competitor Benchmarking
        - Idea Validation`;

const agent = await createOpenAIFunctionsAgent({
    llm,
    tools,
    prompt,
});

const agentExecutor = new AgentExecutor({
    agent,
    tools,
    verbose: true,
});
const domain = 'AI SaaS'
const result = await agentExecutor.invoke({
    input: additional + 'This is the domain:' + domain
});
console.log('🎉Output from agent: ', result.output);

----------------------------------------

TITLE: Navigating Project Directory
DESCRIPTION: Command to change to the project's working directory where key files are located.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Initializing Base Packages
DESCRIPTION: Import statements for required Python packages to set up the PraisonAI environment.

LANGUAGE: python
CODE:
import os
import yaml
from praisonai import PraisonAI

----------------------------------------

TITLE: Running Newsletter Summarizer
DESCRIPTION: Command to execute the main Python script that runs the newsletter summarizer agent.

LANGUAGE: shell
CODE:
python cookbook/examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_crewai/main.py

----------------------------------------

TITLE: Executing Main Python Script
DESCRIPTION: Command to run the main Python script that implements the Youtube summary agent functionality.

LANGUAGE: shell
CODE:
python cookbook/python-examples/quickstarters/transcript_insight_generator/llama_index/main.py

----------------------------------------

TITLE: Setting up Github Authentication
DESCRIPTION: Configuration for Github authentication using an access token to enable Github Issues integration.

LANGUAGE: bash
CODE:
export GITHUB_ACCESS_TOKEN=<your_token>

----------------------------------------

TITLE: Launching Slack Bot Agent - Shell
DESCRIPTION: Command to start the Slack Bot Agent Python script after configuration is complete.

LANGUAGE: shell
CODE:
python python/examples/advanced_agents/slack_bot_agent/slack_agent_autogen/slack_agent_autogen.py

----------------------------------------

TITLE: GET Organization API Key Authentication Endpoint
DESCRIPTION: OpenAPI specification for the GET /api/v1/client/auth/org/api_key endpoint used for organization API key authentication.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/client/auth/org/api_key

----------------------------------------

TITLE: Running Game Builder Agent Script in Shell
DESCRIPTION: Command to execute the main Python script for the Game Builder Agent. This script is located in the cookbook/python-examples/advanced_agents/game_builder directory.

LANGUAGE: shell
CODE:
python cookbook/python-examples/advanced_agents/game_builder/main.py

----------------------------------------

TITLE: Listing All Actions in Composio using CLI
DESCRIPTION: This command demonstrates how to list all available actions in Composio with a limit of 10 using the command-line interface.

LANGUAGE: bash
CODE:
composio actions --limit 10

----------------------------------------

TITLE: Starting the Cloudflare Worker for Development
DESCRIPTION: Launches the Cloudflare Worker in development mode using the wrangler CLI tool.

LANGUAGE: bash
CODE:
wrangler dev

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change into the project's working directory where key files are located

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Initializing Google AI Python Client
DESCRIPTION: Setup of the Google AI Python environment and Gemini model initialization

LANGUAGE: python
CODE:
from vertexai.generative_models import GenerativeModel

# Initialize Google AI Python client
model = GenerativeModel("gemini-pro")

----------------------------------------

TITLE: Running Slack Bot Agent Python Script
DESCRIPTION: Command to execute the main Python script for the Slack Bot Agent.

LANGUAGE: sh
CODE:
python python/examples/advanced_agents/slack_bot_agent/slack_agent_ollama/main.py

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change to the project directory containing setup files and dependencies.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Running the Portfolio Generator Demo in Bash
DESCRIPTION: Command to execute the portfolio generator demo script.

LANGUAGE: bash
CODE:
node demo.mjs

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Install required packages for both Python and JavaScript implementations

LANGUAGE: bash
CODE:
pip install composio-llamaindex python-dotenv

LANGUAGE: bash
CODE:
npm install composio-core langchain dotenv @langchain/openai

----------------------------------------

TITLE: Setting Script Permissions - Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Authenticating Gmail Account in JavaScript
DESCRIPTION: Authenticate a Gmail account for the 'default' user using JavaScript code.

LANGUAGE: javascript
CODE:
import { Composio } from "composio-core";

const client = new Composio(process.env.COMPOSIO_API_KEY);

const entity = await client.getEntity("default");
const connection = await entity.initiateConnection({appName: "gmail"});

console.log(`Open this URL to authenticate: ${connection.redirectUrl}`);

----------------------------------------

TITLE: Executing Setup Script
DESCRIPTION: Command to run the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Initializing Claude Client
DESCRIPTION: Setting up the basic Claude client for API interactions.

LANGUAGE: python
CODE:
import anthropic

# Initialize Claude client
client = anthropic.Anthropic()

----------------------------------------

TITLE: Running Scheduler Agent Python Script
DESCRIPTION: Command to execute the main Python script for the Scheduler Agent, which uses Composio and LlamaIndex.

LANGUAGE: shell
CODE:
python python/examples/advanced_agents/scheduler_agent/scheduler_agent_llamaindex/main.py

----------------------------------------

TITLE: Installing Dependencies with PNPM in Bash
DESCRIPTION: Command to install project dependencies using the PNPM package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Installing Dependencies for AI Lead Generator Agent
DESCRIPTION: This snippet shows how to install the necessary dependencies for the AI Lead Generator Agent project using pip for Python and npm for JavaScript.

LANGUAGE: bash
CODE:
pip install composio-llamaindex python-dotenv

LANGUAGE: bash
CODE:
npm install composio-core ai @ai-sdk/openai dotenv

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs necessary dependencies for the Slack Bot Agent.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Defining OpenAPI Specification for Client Authentication Info Endpoint
DESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /api/v1/client/auth/client_info endpoint. It specifies the path, HTTP method, and likely includes details about request parameters, responses, and authentication requirements.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/client/auth/client_info

----------------------------------------

TITLE: Running Data Analyst Agent
DESCRIPTION: Command to execute the main Python script that runs the data analyst agent

LANGUAGE: shell
CODE:
python cookbook/examples/data_analyst_agent/main.py

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems. This is a prerequisite step before running the setup script.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Creating a Trigger Listener in JavaScript
DESCRIPTION: Set up a trigger listener in JavaScript to handle new events.

LANGUAGE: javascript
CODE:
import { LangchainToolSet } from "composio-core"; // or any other toolset

const toolset = new LangchainToolSet({ apiKey: process.env.COMPOSIO_API_KEY });
const composio_client = toolset.client;

// If not using LangchainToolSet
// import { Composio } from "composio-core";
// const composio_client = new Composio({ apiKey: process.env.COMPOSIO_API_KEY });

// Subscribe to triggers and perform actions
composio_client.triggers.subscribe((data) => {
    console.log("trigger received", data);
});

----------------------------------------

TITLE: Setting Up Script Permissions
DESCRIPTION: Command to make the setup script executable on Linux or macOS systems

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Initializing OpenAI Client
DESCRIPTION: Setup code for initializing the OpenAI client instance for API interactions.

LANGUAGE: python
CODE:
from openai import OpenAI

# Initialize OpenAI client
openai_client = OpenAI()

----------------------------------------

TITLE: Running Recruiter Agent Python Script
DESCRIPTION: Command to execute the main Python script for the Recruiter Agent.

LANGUAGE: shell
CODE:
python cookbook/python-examples/advanced_agents/recruiter_agent/main.py

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Environment variable configuration for Composio and OpenAI API keys required for the Reddit research agent.

LANGUAGE: bash
CODE:
COMPOSIO_API_KEY=YOUR_COMPOSIO_API_KEY
OPENAI_API_KEY=YOUR_OPENAI_API_KEY

----------------------------------------

TITLE: Testing changes in composio directory
DESCRIPTION: This bash command sequence builds a development version of the composio image, tags it as latest, and prepares for rebuilding images with the changes.

LANGUAGE: bash
CODE:
make dev && docker tag composio/composio:dev composio/composio:latest

----------------------------------------

TITLE: Initializing Composio and OpenAI
DESCRIPTION: Setup code to import and initialize necessary modules for Composio and OpenAI integration.

LANGUAGE: python
CODE:
import typing as t
from composio_openai import ComposioToolSet, action, Action
from openai import OpenAI

openai_client = OpenAI()
toolset = ComposioToolSet()

LANGUAGE: javascript
CODE:
import { OpenAI } from "openai";
import { OpenAIToolSet } from "composio-core";
import { z } from "zod";

const openai_client = new OpenAI();
const openAIToolset = new OpenAIToolSet();

----------------------------------------

TITLE: Executing setup.sh Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Defining Dependencies for Composio OpenAI Project
DESCRIPTION: Lists the required Python packages for the project including OpenAI API client and environment variable management with python-dotenv.

LANGUAGE: plaintext
CODE:
composio-openai
openai
python-dotenv

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Configuring Docker Workspace in Python
DESCRIPTION: Illustrates how to set up and use a Docker workspace for tool execution in Composio, including image specification and volume mounting.

LANGUAGE: python
CODE:
from composio_openai import ComposioToolSet, App, Action, WorkspaceType
from openai import OpenAI

client = OpenAI()

toolset = ComposioToolSet(workspace_config=WorkspaceType.Docker(
    image="python:3.9",  # Base image to use
    volumes={"/host/path": "/container/path"}  # Optional volume mounts
))
tools = toolset.get_tools(["FILETOOL_LIST_FILES"])

response = client.chat.completions.create(
    model="gpt-4o-mini",
    max_tokens=1024,
    tools=tools,
    messages=[{"role": "user", "content": "List files in container"}],
)
result = toolset.handle_tool_calls(response)
print(result)

----------------------------------------

TITLE: Executing Image Search Script
DESCRIPTION: Command to run the main Python script for image searching functionality

LANGUAGE: shell
CODE:
python cookbook/examples/image_search/main.py

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Required environment variables for API keys and authentication credentials

LANGUAGE: env
CODE:
COMPOSIO_API_KEY=COMPOSIO_API_KEY
OPENAI_API_KEY=OPENAI_API_KEY
CDP_API_KEY_NAME=API_KEY_NAME
CDP_API_KEY_PRIVATE_KEY=API_KEY_PRIVATE_KEY

----------------------------------------

TITLE: Fetching Specific Connected Account for Shopify
DESCRIPTION: This snippet shows how to retrieve a specific connected account using its ID. It demonstrates the process for both Python and JavaScript implementations.

LANGUAGE: python
CODE:
connected_account = toolset.get_connected_account(connection_request.connectedAccountId)

LANGUAGE: javascript
CODE:
const connectedAccount = await toolset.client.connectedAccounts.get({connectedAccountId:connectionRequest.connectedAccountId})

----------------------------------------

TITLE: Executing Resume Matching Script
DESCRIPTION: Command to run the main Python script that performs resume matching functionality

LANGUAGE: shell
CODE:
python python/examples/advanced_agents/resume_matching/main.py

----------------------------------------

TITLE: Starting the Slackbot Agent
DESCRIPTION: Command to launch the Slackbot agent after configuration is complete

LANGUAGE: bash
CODE:
python main.py

----------------------------------------

TITLE: Running the Application
DESCRIPTION: Command to execute the market research agent application

LANGUAGE: bash
CODE:
node demo.mjs

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Specifying YouTube URL and Slack Channel for Podcast Summarization
DESCRIPTION: This snippet shows the input format for the YouTube URL of the podcast to be summarized and the Slack channel where the summary will be sent. Note that there's a typo in the channel name ('sumary' instead of 'summary').

LANGUAGE: bash
CODE:
youtube_url = https://www.youtube.com/watch?v=7T4-aEuGajI
slack_channel = "a-sumary-channel" (noticed a Typo).

----------------------------------------

TITLE: Running Community Reward Agent in Python
DESCRIPTION: Command to execute the Community Reward Agent script, which automates the distribution of SOL tokens to community members based on their contributions.

LANGUAGE: sh
CODE:
python cookbook/python-examples/advanced_agents/cryptokit/solana/community_reward_agent.py

----------------------------------------

TITLE: Configuring Composio Tools for PraisonAI
DESCRIPTION: Setup Composio toolset and fetch GitHub-specific tools for PraisonAI integration.

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(
    actions=[Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER]
)
tool_section_str = composio_toolset.get_tools_section(tools)
print(tool_section_str)

----------------------------------------

TITLE: Running Python Script for Trend Finder
DESCRIPTION: Command to execute the main Python script for the Startup Trend Finder agent, located in the specified directory.

LANGUAGE: shell
CODE:
python python/examples/quickstarters/trend_finder/main.py

----------------------------------------

TITLE: Package Dependencies for LlamaIndex and Groq Integration
DESCRIPTION: Lists required Python packages including composio-llamaindex for core functionality, python-dotenv for environment management, and llama-index-llms-groq for Groq LLM integration.

LANGUAGE: text
CODE:
composio-llamaindex
python-dotenv
llama-index-llms-groq

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment, installs dependencies, logs in to Composio, and adds necessary tools.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Fetching Gmail Authentication Parameters
DESCRIPTION: Demonstrates how to fetch authentication parameters for Gmail integration using Composio's toolset. Gmail uses OAuth 2.0 and requires no upfront parameters.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App
toolset = ComposioToolSet()

response = toolset.get_expected_params_for_user(app=App.GMAIL) # can use integration_id instead of app

print(response["expected_params"])

LANGUAGE: javascript
CODE:
import { Composio, OpenAIToolSet } from "composio-core";

const toolset = new OpenAIToolSet();

const response = await toolset.getExpectedParamsForUser({
  app: "gmail",
  authScheme: "OAUTH2",
});

console.log(response);

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script which configures the environment, installs dependencies and sets up Composio tools

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Defining and Executing Query Task for RAG Tool in Python
DESCRIPTION: This snippet creates and executes the task for querying the RAG tool based on user input. It defines a user query and creates a task to formulate a query, retrieve information using the RAG tool, and return the results.

LANGUAGE: python
CODE:
# User-provided query
user_query = "What is the capital of France?"

# Define the task for executing the RAG tool query
query_task = Task(
    description=dedent(
        f"""\
        Formulate a query based on this input: {user_query}.
        Retrieve relevant information using the RAG tool and return the results."""
    ),
    expected_output="Results of the RAG tool query were returned. Stop once the goal is achieved.",
    tools=tools,
    agent=rag_agent,
    allow_delegation=False,
)

----------------------------------------

TITLE: Cloning Repository for Reddit Research Agent
DESCRIPTION: Commands to clone the Composio repository and navigate to the Reddit research example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/composioHQ/composio.git
cd composio/js/examples/reddit-research

----------------------------------------

TITLE: Executing the GitHub Issue Creation Agent
DESCRIPTION: Example of how to invoke the executeAgent function with a specific GitHub repository.

LANGUAGE: typescript
CODE:
executeAgent("himanshu-dixit/custom-repo-breaking")

----------------------------------------

TITLE: Navigating Project Directory
DESCRIPTION: Command to change into the project directory containing setup and configuration files

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Testing API Endpoint
DESCRIPTION: Example curl command to test the task execution endpoint.

LANGUAGE: bash
CODE:
curl -X POST \
  http://localhost:8000/execute_task \
  -H "Content-Type: application/json" \
  -d '{"task": "Star the repo composiohq/composio on GitHub"}'

----------------------------------------

TITLE: Custom Redirect URL Configuration
DESCRIPTION: URL configuration for setting up OAuth callback redirects

LANGUAGE: bash
CODE:
https://backend.composio.dev/api/v1/auth-apps/add

----------------------------------------

TITLE: Starting Express Server for Demo Assistant in JavaScript
DESCRIPTION: This code starts the Express server to listen for incoming requests on the specified port. It logs a message when the server is successfully running.

LANGUAGE: javascript
CODE:
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Shell command to change to the project's directory containing required files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project folder containing essential files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Starting Express Server for Demo Assistant in JavaScript
DESCRIPTION: This code starts the Express server to listen for incoming requests on the specified port. It logs a message when the server is successfully running.

LANGUAGE: javascript
CODE:
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems. This step may be necessary before running the setup script.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Installing Dependencies for Lead Outreach Agent
DESCRIPTION: Commands to install required npm packages including LangChain, OpenAI integration, Composio core, and Express framework using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm install @langchain @langchain/openai composio-core express

----------------------------------------

TITLE: Installing Composio Core Package with yarn
DESCRIPTION: Use yarn to add the composio-core package to your project for integrating the Composio JS SDK.

LANGUAGE: bash
CODE:
yarn add composio-core

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup script executable on Unix-based systems

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Importing Libraries and Initializing Clients in Python
DESCRIPTION: Import necessary libraries and initialize ComposioToolSet and Together client.

LANGUAGE: python
CODE:
from composio_togetherai import ComposioToolSet, App
from together import Together

client = Together()
toolset = ComposioToolSet()

----------------------------------------

TITLE: Executing Setup Script
DESCRIPTION: Shell command to run the setup script that configures the environment, installs dependencies, and sets up Composio tools.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Polling for Connected Account Status
DESCRIPTION: Python code to wait for the connected account status to become 'Active'. It uses a timeout to prevent indefinite waiting.

LANGUAGE: python
CODE:
#Keep Polling and wait until timeout
connected_account = connected_account.wait_until_active(timeout=60)

----------------------------------------

TITLE: Executing Newsletter Summarizer
DESCRIPTION: Command to run the main Python script that processes and summarizes newsletters.

LANGUAGE: shell
CODE:
python cookbook/python-examples/advanced_agents/newsletter_summarizer/newsletter_summarizer_crewai/main.py

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: This command changes the current directory to the project folder. Replace 'path/to/your/project' with the actual path to the project directory.

LANGUAGE: bash
CODE:
cd path/to/your/project

----------------------------------------

TITLE: Retrieving Connected Accounts for an Entity in Python and JavaScript
DESCRIPTION: This snippet demonstrates how to get all connected accounts for an entity using both Python and JavaScript. It uses the ComposioToolSet or OpenAIToolSet to retrieve entity information and list connections.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App
toolset = ComposioToolSet()

# Filter based on entity id
entity = toolset.get_entity(id="default")
try:
    # Lists all connections of the entity
    connected_accounts  = entity.get_connections() 
    print(connected_accounts)
except NoItemsFound as e:
    print("No connected account found")

LANGUAGE: javascript
CODE:
import { OpenAIToolSet } from "composio-core";
const toolset = new OpenAIToolSet();

// Filter based on entity id
const entity = await toolset.client.getEntity("default")

// lists all connections of the entity
const connected_accounts = await entity.getConnections()

if (connected_accounts.length > 0) {
    console.log(connected_accounts)
}else{
    console.log("No connected account found")
}

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Running Image Search Script
DESCRIPTION: Command to execute the main Python script that implements the image search functionality.

LANGUAGE: shell
CODE:
python cookbook/examples/image_search/main.py

----------------------------------------

TITLE: Installing Composio SDK via pip
DESCRIPTION: Command to install the Composio SDK using pip package manager.

LANGUAGE: bash
CODE:
pip install composio-core

----------------------------------------

TITLE: Navigating Project Directory
DESCRIPTION: Command to change into the project directory containing setup and configuration files.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Setting Execute Permissions
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Setting Up Documentation Development Environment for Composio
DESCRIPTION: This snippet provides instructions for setting up and running a local documentation development server for the Composio project using Fern CLI.

LANGUAGE: bash
CODE:
npm install -g fern-api
fern docs dev

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs necessary dependencies for the Scheduler Agent.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Implementing Square Root Calculator with Python and Composio
DESCRIPTION: Example showing how to create a custom tool for calculating square roots using Python, OpenAI, and Composio. Demonstrates basic tool creation, LLM interaction, and result handling.

LANGUAGE: python
CODE:
from composio_openai import ComposioToolSet, action
from typing import Annotated
from openai import OpenAI
import math

client = OpenAI()
toolset = ComposioToolSet()

@action(toolname="calculate_square_root", requires=["math"])
def calculate_square_root(
    a: Annotated[int, "Number from which to take the square root"],
) -> float:
    """
    Calculate the square root of a number.
    :param a: Number from which to take the square root
    :return sqrt: Square root of the number
    """
    return math.sqrt(a)

tools = toolset.get_tools([calculate_square_root])

question = "What is the square root of 212?"

response = client.chat.completions.create(
    model="gpt-4o-mini",
    messages=[
        {
            "role": "user",
            "content": question,
        }
    ],
    tools=tools,
    tool_choice="auto",
)

result = toolset.handle_tool_calls(response=response)

print("Question: ", question)
print("Answer: ", result[0]["data"]["sum"])

----------------------------------------

TITLE: Fetching Connected Account Details
DESCRIPTION: Retrieves the details of a specific connected account using the connection ID obtained from the previous step.

LANGUAGE: python
CODE:
connected_account = toolset.get_connected_account(connection_request.connectedAccountId)

LANGUAGE: javascript
CODE:
const connectedAccount = await toolset.client.connectedAccounts.get({connectedAccountId:connectionRequest.connectedAccountId})

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Runs the setup.sh script to configure the environment and install dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Integrating Custom Tools into Composio Toolset in Python
DESCRIPTION: This snippet shows how to integrate custom tools into a Composio toolset. It imports the custom 'say' tool and adds it to the toolset along with other tools.

LANGUAGE: python
CODE:
from custom_tools import say

from composio import ComposioToolSet

composio_toolset = ComposioToolSet()

tools = [
  *composio_toolset.get_tools(apps=[
      # ... other tools
  ]),
  *composio_toolset.get_tools(
    actions=[
      say, # Your custom tool
  ]
)]

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment, installs dependencies, logs into Composio, and adds necessary tools.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Installing Composio Libraries for JavaScript
DESCRIPTION: Installs the required Composio libraries using npm.

LANGUAGE: shell
CODE:
npm install composio-core openai

----------------------------------------

TITLE: Launching Loan Underwriter Agent
DESCRIPTION: Command to start the Loan Underwriter Agent application using Streamlit.

LANGUAGE: shell
CODE:
streamlit run cookbook/python-examples/advanced_agents/loan_underwriter_agent/main.py

----------------------------------------

TITLE: Running the SWE Agent
DESCRIPTION: Command to start the SWE agent, which will prompt for repository and issue specifications.

LANGUAGE: bash
CODE:
pnpm start

----------------------------------------

TITLE: Installing Composio Core Package - Python
DESCRIPTION: Command to install the required Composio core package using pip

LANGUAGE: bash
CODE:
pip install composio-core

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Running Coder Reward Agent in Python
DESCRIPTION: Command to execute the Coder Reward Agent script, which manages automated payments to developers based on code contributions and milestones.

LANGUAGE: sh
CODE:
python cookbook/python-examples/advanced_agents/cryptokit/solana/coder_reward_agent.py

----------------------------------------

TITLE: Invoking GitHub Issue Creation Agent (TypeScript)
DESCRIPTION: This snippet demonstrates how to call the executeAgent function with a specific GitHub repository to create an issue.

LANGUAGE: typescript
CODE:
executeAgent("himanshu-dixit/custom-repo-breaking")

----------------------------------------

TITLE: Executing Setup Script
DESCRIPTION: Command to run the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Get Trigger API Endpoint Definition
DESCRIPTION: OpenAPI specification defining the endpoint to retrieve a trigger by its name. The endpoint takes a triggerName path parameter to identify the specific trigger.

LANGUAGE: yaml
CODE:
openapi: get /api/v2/triggers/{triggerName}

----------------------------------------

TITLE: Executing OpenAI Chat Completion for GitHub Actions
DESCRIPTION: Implementation of chat completion request to process natural language commands for GitHub operations like starring repositories.

LANGUAGE: python
CODE:
my_task = "Star a repo composiohq/composio on GitHub"

# Create a chat completion request to decide on the action
response = openai_client.chat.completions.create(model="gpt-4-turbo-preview",
    tools=actions, # Passing actions we fetched earlier.
    messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": my_task}
        ]
    )

pprint(response)

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script for environment configuration and dependency installation.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Running SWE-Bench Benchmark in Bash
DESCRIPTION: This snippet demonstrates how to run the SWE-Bench benchmark on an agent. It includes navigating to the agent directory and running the benchmark script with optional test split parameter.

LANGUAGE: bash
CODE:
cd agent
python benchmark.py --test-split=<test_split>

----------------------------------------

TITLE: Starting Python Application
DESCRIPTION: Command to run the main Python script using Poetry package manager

LANGUAGE: shell
CODE:
poetry run python main.py

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Shell command to run the setup.sh script, which sets up the environment, installs dependencies, logs into Composio, and adds necessary tools.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Building Docker images using Python script
DESCRIPTION: This command executes the build.py script to build Docker images from the generated Dockerfiles.

LANGUAGE: python
CODE:
python build.py

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Running Main Python Script
DESCRIPTION: Command to execute the main Python script for the Human in the Loop Scheduler

LANGUAGE: shell
CODE:
python cookbook/examples/advanced_agents/human_in_the_loop_scheduler/crewai/main.py

----------------------------------------

TITLE: Installing Required Packages for Composio and Vercel AI SDK
DESCRIPTION: This snippet shows the command to install the necessary npm packages for using Composio with Vercel AI SDK. It includes @ai-sdk/openai for OpenAI integration, composio-core for Composio functionality, and ai for AI-related operations.

LANGUAGE: bash
CODE:
npm install @ai-sdk/openai composio-core ai

----------------------------------------

TITLE: Importing Required Libraries for Coinbase Agent
DESCRIPTION: Import necessary Python libraries for the Coinbase Wallet Manager Agent implementation.

LANGUAGE: python
CODE:
from composio_llamaindex import ComposioToolSet, App, Action
from llama_index.core.agent import FunctionCallingAgentWorker
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI
from dotenv import load_dotenv
import json
import os

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project location containing necessary files.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Adding Content to RAG Tool in Python
DESCRIPTION: This code shows how to use the RAG Tool in Composio to add text content to a vector store. It executes the RAGTOOL_ADD_CONTENT_TO_RAG_TOOL action with the provided text content.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App, Action
toolset = ComposioToolSet()
text = """
    Paris is the capital of France. It is known for its art, fashion, and culture.,
    Berlin is the capital of Germany. It is famous for its history and vibrant culture.,
    Tokyo is the capital of Japan. It is known for its technology and cuisine.,
    Canberra is the capital of Australia. It is known for its modern architecture and museums.,
    # Add more data as needed
"""
toolset.execute_action(
    action=Action.RAGTOOL_ADD_CONTENT_TO_RAG_TOOL,
    params={"content":text},
)

----------------------------------------

TITLE: Running Main Python Script in Shell
DESCRIPTION: Command to execute the main Python script for the Domain Deep Research Agent.

LANGUAGE: shell
CODE:
python cookbook/python-examples/advanced_agents/domain_deep_research/main.py

----------------------------------------

TITLE: GET Connected Account Endpoint Definition
DESCRIPTION: OpenAPI specification for retrieving a connected account by ID. The endpoint expects a connectedAccountId parameter in the path.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/connectedAccounts/{connectedAccountId}

----------------------------------------

TITLE: Installing Composio TypeScript Package
DESCRIPTION: Installation commands for the Composio TypeScript package using different Node.js package managers (pnpm, npm, yarn).

LANGUAGE: bash
CODE:
pnpm install composio-core

LANGUAGE: bash
CODE:
npm install composio-core

LANGUAGE: bash
CODE:
yarn add composio-core

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Retrieving API Key via CLI
DESCRIPTION: Command to fetch your API key using the Composio CLI tool

LANGUAGE: bash
CODE:
composio whoami

----------------------------------------

TITLE: Implementing Tool Class Definition
DESCRIPTION: Defines the main tool class that specifies available actions and triggers for a custom local tool.

LANGUAGE: python
CODE:
import typing as t
from composio.tools.local.base import Action, Tool
from .actions.<action_name> import <ActionName>  # Import your action class

class <ToolName>(Tool):
    """
    Description of your tool.
    """

    def actions(self) -> list[t.Type[Action]]:
        return [<ActionName>]

    def triggers(self) -> list:
        return []  # If applicable, define triggers here

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change to the project directory containing setup files.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Querying RAG Tool in Python
DESCRIPTION: This snippet demonstrates how to query the RAG Tool in Composio. It executes the RAGTOOL_RAG_TOOL_QUERY action with a specified query text.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App, Action
toolset = ComposioToolSet()
text="What is Paris known for?"
toolset.execute_action(
    action=Action.RAGTOOL_RAG_TOOL_QUERY,
    params={"query":text},
)

----------------------------------------

TITLE: Executing Setup Script - Shell Command
DESCRIPTION: Command to run the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Changes the current directory to the project folder containing necessary files.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Creating a New Project via API in Python (Placeholder)
DESCRIPTION: This code snippet is a placeholder for creating a new project using the Composio API in Python. The actual implementation is not provided and is marked as 'coming soon'.

LANGUAGE: python
CODE:
coming soon!

----------------------------------------

TITLE: Executing GitHub Operations via Letta Agent
DESCRIPTION: Implementing the agent execution to star a GitHub repository with message handling

LANGUAGE: python
CODE:
response = client.agents.messages.create(
    agent_id=agent.id,
    messages=[
        {
            "role": "user",
            "content": "Star the github repo composioHQ/composio/"
        }
    ]
)
for message in response.messages:
    print(message)

LANGUAGE: javascript
CODE:
const response = await client.agents.messages.create(agent.id, {
    messages: [
        {
            role: "user",
            content: "Star the github repo composiohq/composio",
        },
    ],
});

for (const message of response.messages) {
    console.log(message);
}

----------------------------------------

TITLE: Connecting GitHub Account using Composio CLI
DESCRIPTION: This snippet demonstrates how to log in to Composio and add a GitHub integration using the Composio CLI.

LANGUAGE: shell
CODE:
composio login
composio add github

----------------------------------------

TITLE: Launching Content Writing Agent
DESCRIPTION: Command to run the main Python script that starts the content writing agent.

LANGUAGE: shell
CODE:
python cookbook/python-examples/advanced_agents/content_writing_agent/phidata/main.py

----------------------------------------

TITLE: Logging out from Composio CLI
DESCRIPTION: Securely ends the current user session by logging out from the Composio CLI.

LANGUAGE: bash
CODE:
composio logout

----------------------------------------

TITLE: Importing base packages for Composio and CAMEL integration
DESCRIPTION: This snippet imports the necessary packages from Composio and CAMEL to set up the environment for agent operations.

LANGUAGE: python
CODE:
from colorama import Fore
from camel.agents import ChatAgent
from camel.configs import ChatGPTConfig
from camel.messages import BaseMessage
from camel.models import ModelFactory
from camel.types import ModelPlatformType, ModelType
from camel.utils import print_text_animated
from composio_camel import ComposioToolSet, Action

----------------------------------------

TITLE: Installing Composio-Autogen Package
DESCRIPTION: This snippet shows how to install the required package 'composio-autogen' using pip.

LANGUAGE: bash
CODE:
pip install composio-autogen

----------------------------------------

TITLE: Connecting GitHub Account via CLI
DESCRIPTION: Uses Composio CLI commands to log in and add GitHub integration.

LANGUAGE: bash
CODE:
composio login 
composio add github

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems, which is necessary before running the script.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Installing Composio-Autogen Package
DESCRIPTION: This snippet shows how to install the required package 'composio-autogen' using pip.

LANGUAGE: bash
CODE:
pip install composio-autogen

----------------------------------------

TITLE: Importing base packages for Composio and CAMEL integration
DESCRIPTION: This snippet imports the necessary packages from Composio and CAMEL to set up the environment for agent operations.

LANGUAGE: python
CODE:
from colorama import Fore
from camel.agents import ChatAgent
from camel.configs import ChatGPTConfig
from camel.messages import BaseMessage
from camel.models import ModelFactory
from camel.types import ModelPlatformType, ModelType
from camel.utils import print_text_animated
from composio_camel import ComposioToolSet, Action

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment and installs necessary dependencies for the Game Builder Agent project.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Initializing Language Model and Tools Setup
DESCRIPTION: Initializes the OpenAI language model and configures Composio tools for SQL operations, file handling, and code interpretation.

LANGUAGE: python
CODE:
llm = ChatOpenAI(model="gpt-4o")

# Initialize the Composio ToolSet
composio_toolset = ComposioToolSet()

# Get tools for SQL and File operations
sql_file_tool = composio_toolset.get_tools(apps=[App.SQLTOOL, App.FILETOOL])

# Get tools for SQL, File, and Code Interpreter operations
tools = composio_toolset.get_tools(apps=[App.SQLTOOL, App.FILETOOL, App.CODEINTERPRETER])

----------------------------------------

TITLE: Executing Main Python Script
DESCRIPTION: Command to run the main Trend Finder Python script after environment setup is complete

LANGUAGE: shell
CODE:
python python/examples/quickstarters/trend_finder/main.py

----------------------------------------

TITLE: LLM Initialization in Python
DESCRIPTION: Initializes OpenAI LLM and sets up configuration variables for the research agent.

LANGUAGE: python
CODE:
dotenv.load_dotenv()

llm = OpenAI(model="gpt-4o")

research_topic = "LLM agents function calling"
target_repo = "composiohq/composio"
n_issues = 3

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Example of the required environment variables to be set in a .env file.

LANGUAGE: env
CODE:
OPENAI_API_KEY=
COMPOSIO_API_KEY=
SOLANA_PRIVATE_KEY=
SOLANA_WALLET_ADDRESS=

----------------------------------------

TITLE: Installing Required Packages and Tool Connection
DESCRIPTION: Commands for installing Lyzr and Composio packages, and connecting GitHub integration

LANGUAGE: bash
CODE:
pip install lyzr-automata -q
pip install composio_lyzr
#Connect your Github so agents can use it. 
composio add github
#Check all different apps which you can connect with
composio apps

----------------------------------------

TITLE: Importing Base Packages for Newsletter Summarizer in Python
DESCRIPTION: This snippet imports the necessary libraries for the Newsletter Summarizer project, including Composio, CrewAI, and Groq components. It sets up the foundation for email processing and AI-driven summarization.

LANGUAGE: python
CODE:
import os
import dotenv
from composio_langchain import Action, App, ComposioToolSet
from crewai import Agent, Crew, Process, Task
from langchain_groq import ChatGroq
from datetime import datetime

----------------------------------------

TITLE: Setting Execute Permissions
DESCRIPTION: Command to make the setup.sh script executable on Linux/macOS systems

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Making Setup Script Executable - Shell Command
DESCRIPTION: Command to make the setup.sh script executable on Linux/macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Initializing Language Model and Tools
DESCRIPTION: Setting up the Hugging Face language model and configuring Composio tools with SERPAPI integration

LANGUAGE: python
CODE:
dotenv.load_dotenv()

llm = HuggingFaceEndpoint(repo_id="HuggingFaceH4/zephyr-7b-beta", huggingfacehub_api_token=os.getenv("HUGGINGFACEHUB_API_TOKEN"))

chat_model = ChatHuggingFace(llm=llm,  huggingfacehub_api_token=os.getenv("HUGGINGFACEHUB_API_TOKEN"))
# Import from composio_langchain


# setup tools
composio_toolset = ComposioToolSet()
#we use composio to add the tools we need
#this gives agents, the ability to use tools, in this case we need SERPAPI
tools = composio_toolset.get_tools(apps=[App.SERPAPI])

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script for environment configuration and dependency installation.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Creating Crew and Executing RAG Tool Agent Process in Python
DESCRIPTION: This code defines the crew with the agent and tasks, then executes the process. It uses the Crew class to organize the agent and tasks, and kicks off the process to run the RAG Tool Agent system.

LANGUAGE: python
CODE:
# Define the crew with the agent and tasks
crew = Crew(
    agents=[rag_agent],
    tasks=[add_content_tasks ,query_task],
    process=Process.sequential,
)

# Kickoff the process and print the result
result = crew.kickoff()
print(result)

----------------------------------------

TITLE: Python Package Dependencies List
DESCRIPTION: A list of required Python packages including LlamaIndex core library, composio integration, Groq LLM support, and environment variable management with python-dotenv.

LANGUAGE: plaintext
CODE:
llama-index
composio-llamaindex
llama-index-llms-groq
python-dotenv

----------------------------------------

TITLE: Initiating GitHub Connection with Composio in Python
DESCRIPTION: This code initiates a connection to GitHub using the Composio toolset and prints the authentication URL.

LANGUAGE: python
CODE:
request = composio_toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

----------------------------------------

TITLE: Running Setup Script in Shell
DESCRIPTION: Command to execute the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Setting up OpenAI ChatGPT Model
DESCRIPTION: Initialize the ChatGPT model from OpenAI for use with the agent.

LANGUAGE: python
CODE:
from langchain_openai import ChatOpenAI

llm = ChatOpenAI(model="gpt-4o")

----------------------------------------

TITLE: Navigating Project Directory in Shell
DESCRIPTION: Command to change to the project's directory containing setup files and dependencies.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Creating AI Agent Configuration
DESCRIPTION: Define the AI agent with specific role, goals, and capabilities for code execution.

LANGUAGE: python
CODE:
python_executor_agent = Agent(
role="Python Code Executor",
goal="Execute Python code in a Jupyter notebook cell and return the results.",
verbose=True,
memory=True,
backstory="You are an expert in executing Python code and interpreting results in a sandbox environment.",
allow_delegation=False,
tools=tools,
)

----------------------------------------

TITLE: Listing Python Package Dependencies
DESCRIPTION: A list of required Python packages including CrewAI, python-dotenv, a custom composio-crewai package, and LangChain OpenAI integration.

LANGUAGE: plaintext
CODE:
crewai
python-dotenv
composio-crewai
langchain_openai

----------------------------------------

TITLE: Retrieving GitHub Star Repository Action from Composio in Python
DESCRIPTION: This snippet shows how to get the specific GitHub 'star repository' action from the Composio toolset.

LANGUAGE: python
CODE:
tools = composio_toolset.get_tools(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])

----------------------------------------

TITLE: Setting Up Todo List for Calendar Agent (Python)
DESCRIPTION: This code defines the todo list that will be converted into calendar events. It includes tasks with specified time slots and descriptions.

LANGUAGE: python
CODE:
# Setup Todo
todo = """
    1PM - 3PM -> Code,
    5PM - 7PM -> Meeting,
    9AM - 12AM -> Learn something,
    8PM - 10PM -> Game
"""

----------------------------------------

TITLE: Setting File Permissions - Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Creating AI Agent for Email Processing
DESCRIPTION: Implementation of an AI agent using OpenAI to analyze email content and identify bank transactions.

LANGUAGE: python
CODE:
def agent_function(thread_id: str, message: str, sender_mail: str):
    tools = toolset.get_tools(apps=[App.GMAIL])

    response = openai_client.chat.completions.create(
        model="gpt-4o-mini",
        tools=tools,
        messages=[
            {
                "role": "system",
                "content": "You are a helpful assistant that can parse the email content, identify bank transactions and add the 'important' label to the email. Otherwise, don't do anything.",
            },
            {
                "role": "user",
                "content": f"Thread ID: {thread_id}\nMessage: {message}\nSender: {sender_mail}",
            },
        ],
    )
    result = toolset.handle_tool_calls(response)
    print(result)

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: This snippet shows the content of the .env file, which should include the Composio API key and OpenAI API key.

LANGUAGE: plaintext
CODE:
COMPOSIO_API_KEY=YOUR_COMPOSIO_API_KEY
OPENAI_API_KEY=YOUR_OPENAI_API_KEY

----------------------------------------

TITLE: Setting Up Environment
DESCRIPTION: Shell commands to make setup script executable and run it

LANGUAGE: shell
CODE:
chmod +x setup.sh
./setup.sh

----------------------------------------

TITLE: Launching CRM Agent with Streamlit
DESCRIPTION: Command to start the CRM agent application using Streamlit framework.

LANGUAGE: shell
CODE:
streamlit run cookbook/python-examples/advanced_agents/sales_kit/CRM_agent/main.py

----------------------------------------

TITLE: Listing Dependencies for Composio Project
DESCRIPTION: A requirements or dependencies file listing three Python packages required for the project: composio-openai for composition functionality, openai for OpenAI API integration, and python-dotenv for environment variable management.

LANGUAGE: plaintext
CODE:
composio-openai
openai
python-dotenv

----------------------------------------

TITLE: Executing Letta Agent to Star GitHub Repository
DESCRIPTION: This code demonstrates how to execute the Letta agent to star a GitHub repository. It sends a message to the agent and processes the response.

LANGUAGE: python
CODE:
response = client.agents.messages.create(
    agent_id=agent.id,
    messages=[
        {
            "role": "user",
            "content": "Star the github repo composioHQ/composio/"
        }
    ]
)
for message in response.messages:
    print(message)

LANGUAGE: javascript
CODE:
const response = await client.agents.messages.create(agent.id, {
    messages: [
        {
            role: "user",
            content: "Star the github repo composiohq/composio",
        },
    ],
});

for (const message of response.messages) {
    console.log(message);
}

----------------------------------------

TITLE: Configuring Composio Tools
DESCRIPTION: Setup of Composio tools for GitHub interactions, specifically for repository starring functionality.

LANGUAGE: python
CODE:
from composio_praisonai import Action, ComposioToolSet

composio_toolset = ComposioToolSet()
tools = composio_toolset.get_actions(
    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]
)

tool_section_str = composio_toolset.get_tools_section(tools)
print(tool_section_str)

----------------------------------------

TITLE: Importing Libraries for Community Reward Agent in Python
DESCRIPTION: This code snippet imports the necessary libraries and modules for the Community Reward Agent, including Composio, LlamaIndex, OpenAI, and Solana-related tools.

LANGUAGE: python
CODE:
from composio_llamaindex import ComposioToolSet, App, Action
from llama_index.core.agent import FunctionCallingAgentWorker
from llama_index.core.llms import ChatMessage
from llama_index.llms.openai import OpenAI
from solana_kit import get_balance, send_sol, get_transaction_status, request_airdrop
from dotenv import load_dotenv
import json
import os
import datetime

date = datetime.datetime.now().strftime("%Y-%m-%d")

----------------------------------------

TITLE: Initializing Researcher Agent for Research Assistant
DESCRIPTION: Creates a researcher agent with a defined role, goal, and backstory. The agent is configured with tools and the language model for performing research tasks.

LANGUAGE: python
CODE:
researcher = Agent(
     role='Researcher',
     goal='Search the internet for the information requested',
     backstory="""
     You are a researcher. Using the information in the task, you find out some of the most popular facts about the topic along with some of the trending aspects.
     You provide a lot of information thereby allowing a choice in the content selected for the final blog.
     """,
     verbose=True,
     allow_delegation=False,
     tools=tools,
     llm=llm
 )

----------------------------------------

TITLE: Importing Required Packages for Griptape Agent
DESCRIPTION: Basic imports needed to set up a Griptape agent with Composio integration, including environment variable loading.

LANGUAGE: python
CODE:
from griptape.structures import Agent
from griptape.utils import Chat
from composio_griptape import App, Action, Tag, ComposioToolSet
import dotenv

dotenv.load_dotenv()

----------------------------------------

TITLE: Importing Required Packages for Griptape Agent
DESCRIPTION: Basic imports needed to set up a Griptape agent with Composio integration, including environment variable loading.

LANGUAGE: python
CODE:
from griptape.structures import Agent
from griptape.utils import Chat
from composio_griptape import App, Action, Tag, ComposioToolSet
import dotenv

dotenv.load_dotenv()

----------------------------------------

TITLE: Installing PraisonAI and Composio Packages
DESCRIPTION: This snippet shows the command-line instructions for installing necessary packages, logging into Composio, and connecting GitHub as a tool for agent use.

LANGUAGE: bash
CODE:
pip install PraisonAI -q
pip install composio-praisonai
# login to composio
composio login
# Connect your GitHub using command below, so agents can use it. 
composio add github
# Check all different apps which you can connect with
composio apps

----------------------------------------

TITLE: Connecting to Tools and Setting OpenAI API Key in Bash
DESCRIPTION: This snippet demonstrates how to connect to required tools using Composio and set the OpenAI API key as an environment variable.

LANGUAGE: bash
CODE:
composio add github

export OPENAI_API_KEY="<your-openai-api-key>"

----------------------------------------

TITLE: Initializing Tools for Research Assistant
DESCRIPTION: Sets up the ComposioToolSet and retrieves tools for SerpAPI search functionality. These tools will be used by the research agent.

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(actions=[Action.SERPAPI_SEARCH])

----------------------------------------

TITLE: Getting Application Details API Definition
DESCRIPTION: OpenAPI specification for GET endpoint that retrieves details for a specific application by name parameter.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/apps/{appName}

----------------------------------------

TITLE: Retrieving GitHub Tools
DESCRIPTION: Fetch all available GitHub tools from the toolset for use with the AI agent

LANGUAGE: javascript
CODE:
const tools = await toolset.getTools({ apps: ["github"] });

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Adding GitHub Action to Letta Client
DESCRIPTION: This code demonstrates how to add a GitHub action (specifically, starring a repository) as a tool to the Letta client in both Python and JavaScript.

LANGUAGE: python
CODE:
tool = client.tools.add_composio_tool(composio_action_name=Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER.name)

LANGUAGE: javascript
CODE:
const tool = await client.tools.addComposioTool(
    "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
)

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install the required dependencies for the scheduling agent demo using pnpm.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Importing Required Packages for PraisonAI and Composio
DESCRIPTION: This code snippet imports the necessary Python modules to work with PraisonAI and Composio, including the PraisonAI client and Composio tool set.

LANGUAGE: python
CODE:
import os
import yaml
from praisonai import PraisonAI

from composio_praisonai import Action, ComposioToolSet

----------------------------------------

TITLE: Integrating GitHub tools with Composio for CAMEL operations
DESCRIPTION: This snippet fetches and integrates GitHub tools provided by Composio, enabling enhanced functionality for CAMEL operations.

LANGUAGE: python
CODE:
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(
    actions=[Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER]
)

----------------------------------------

TITLE: OpenAPI Endpoint Specification - Project Authentication Add
DESCRIPTION: OpenAPI definition for the POST endpoint used to add projects to an authentication client

LANGUAGE: openapi
CODE:
openapi: post /api/v1/client/auth/project/add

----------------------------------------

TITLE: OpenAPI Endpoint Specification - Project Authentication Add
DESCRIPTION: OpenAPI definition for the POST endpoint used to add projects to an authentication client

LANGUAGE: openapi
CODE:
openapi: post /api/v1/client/auth/project/add

----------------------------------------

TITLE: Running To Do List Agent Python Script
DESCRIPTION: Shell command to execute the main Python script for the To Do List Agent, which processes Slack messages and creates a Notion page with the to-do list.

LANGUAGE: shell
CODE:
python cookbook/python-examples/quickstarters/Notion_todo_list_agent/llamaindex/main.py

----------------------------------------

TITLE: Filtering Specific Apps in Composio ToolSet
DESCRIPTION: This code shows how to restrict agents to use only specific apps, such as Asana and GitHub.

LANGUAGE: python
CODE:
# To restrict agents from using all tools, filter specific tools 
actions = composio_toolset.get_tools(apps=[App.ASANA, App.GITHUB])

----------------------------------------

TITLE: GitHub Account Connection Setup
DESCRIPTION: Commands and code for connecting to GitHub via Composio authentication

LANGUAGE: shell
CODE:
composio login
composio add github

LANGUAGE: python
CODE:
request = composio_toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

LANGUAGE: javascript
CODE:
const connection = await composioToolset.connectedAccounts.initiate({appName: "github"})
console.log(`Open this URL to authenticate: ${connection.redirectUrl}`);

----------------------------------------

TITLE: Installing Composio and GitHub Setup
DESCRIPTION: Instructions for installing the Composio LangChain package and connecting GitHub account for application access.

LANGUAGE: bash
CODE:
# Install Composio LangChain package
pip install composio-togetherai

# Connect your GitHub account
composio add github

# View available applications you can connect with
composio apps

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Verifying Current User Identity in Composio CLI
DESCRIPTION: Confirms the user's identity and prints the API key to ensure the correct user session in Composio CLI.

LANGUAGE: bash
CODE:
composio whoami

----------------------------------------

TITLE: Executing Setup Script
DESCRIPTION: Command to run the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Running Main Python Script in Shell
DESCRIPTION: Command to execute the main Python script for the Customer Support Agent project.

LANGUAGE: shell
CODE:
python python/examples/quickstarters/customer_support/swarm/main.py

----------------------------------------

TITLE: Configuring Julep Agent with Composio Tools
DESCRIPTION: This snippet initializes the Composio Tool Set, registers the GitHub app, and creates a configured Julep agent with specific settings and tools.

LANGUAGE: python
CODE:
# Initialise the Composio Tool Set
composio_toolset = ComposioToolSet()

# Register the GitHub app with the right settings

tools = composio_toolset.get_tools(apps=[App.GITHUB])

# Create and configure the Julep agent

agent = julep_client.agents.create(
name="Jessica",
about="Tech entrepreneur with a focus on sustainability and AI.",
default_settings={
"temperature": 0.7,
"top_p": 1,
"min_p": 0.01,
"presence_penalty": 0,
"frequency_penalty": 0,
"length_penalty": 1.0,
"max_tokens": 150
},
model="gpt-4-turbo",
tools=tools,
)

----------------------------------------

TITLE: Cloning the Podcast Summarizer Repository
DESCRIPTION: This command clones the GitHub repository containing the Podcast Summarizer project to the local machine.

LANGUAGE: bash
CODE:
git clone https://github.com/siddartha-10/Podcast_summarizer_Agents.git

----------------------------------------

TITLE: Importing Agno Base Package
DESCRIPTION: Importing the fundamental Agent class from the Agno package.

LANGUAGE: python
CODE:
from agno.agent import Agent

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup.sh script executable on Linux/macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change to the directory containing the project files.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Basic installation commands for the core Composio packages and CrewAI framework

LANGUAGE: bash
CODE:
pip install swekit composio-core
pip install crewai composio-crewai

----------------------------------------

TITLE: Getting Action Schema with Python SDK
DESCRIPTION: Python code to import Composio libraries, initialize the toolset, get the action schema, and print the parameters in a readable format.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, Action
import json

composio_toolset = ComposioToolSet()

# Get the action schema
action_schema = composio_toolset.get_action_schemas(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])

# Print the parameters in a readable format
print(json.dumps(action_schema[0].parameters.properties, indent=2))

----------------------------------------

TITLE: Installing Market Research Agent Repository
DESCRIPTION: Commands to clone the repository and navigate to the project directory

LANGUAGE: bash
CODE:
git clone https://github.com/composioHQ/composio.git
cd composio/js/examples/market_research_agent

----------------------------------------

TITLE: Defining OpenAPI Endpoint for Action Execution
DESCRIPTION: This YAML snippet defines an OpenAPI endpoint for executing actions using their unique identifier. It specifies the HTTP method (POST) and the path with a parameter for the action ID.

LANGUAGE: yaml
CODE:
openapi: post /api/v2/actions/{actionId}/execute

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Command to execute the setup script that configures the environment and installs dependencies.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Running Image Search Python Script
DESCRIPTION: Command to execute the main Python script for the Image Search Agent.

LANGUAGE: shell
CODE:
python cookbook/examples/image_search/main.py

----------------------------------------

TITLE: Installing Dependencies for Coinbase Agent
DESCRIPTION: Install the required Python packages for the Coinbase Wallet Manager Agent.

LANGUAGE: bash
CODE:
pip install composio-llamaindex python-dotenv

----------------------------------------

TITLE: Retrieving Connected Account Authentication Parameters in Python
DESCRIPTION: Demonstrates how to retrieve and display connected account details including integration ID, connection parameters, and authentication tokens. This information is used for making authenticated API calls.

LANGUAGE: python
CODE:
print(connected_account)

LANGUAGE: python
CODE:
{
  "integrationId": "5e8584e4-723c-44ae-907d-20db982b1797",
  "connectionParams": {
    "scope": "admin:org,gist,repo,user",
    "base_url": "https://api.github.com",
    "token_type": "bearer",
    "access_token": "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",
    "headers": {
      "Authorization": "Bearer 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"
    },
    "queryParams": {}
  },
  "appUniqueId": "github",
  "id": "1f090d08-3741-4e20-ae47-431be119a664",
  "status": "ACTIVE",
  "createdAt": "2024-03-19T17:26:21.463Z",
  "updatedAt": "2024-03-19T17:26:24.134Z"
}

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to change the permissions of the setup.sh script, making it executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Installing Dependencies for Github Contributor Reward Agent in Python
DESCRIPTION: This snippet installs the required dependencies for the Github Contributor Reward Agent project using pip.

LANGUAGE: bash
CODE:
pip install composio-llamaindex python-dotenv

----------------------------------------

TITLE: Retrieving GitHub Tools from Composio
DESCRIPTION: Fetch all available GitHub tools from Composio for use with OpenAI Assistant in both Python and JavaScript.

LANGUAGE: python
CODE:
tools = composio_toolset.get_tools(apps=[App.GITHUB])

LANGUAGE: javascript
CODE:
const tools = await toolset.getTools({ apps: ["github"] });

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project folder containing essential files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Executes the setup script to configure the environment, install dependencies, and set up Composio tools

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Executing Main Python Script
DESCRIPTION: Command to run the main Python script for the lead outreach agent implementation

LANGUAGE: shell
CODE:
python cookbook/python-examples/advanced_agents/lead_outreach_agent/llamaindex/main.py

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Shell command to run the setup.sh script, which sets up the environment and installs dependencies for the Slack Bot.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup script executable on Linux/macOS systems

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Executing Main Python Script
DESCRIPTION: Command to run the main Python script that implements the image search functionality

LANGUAGE: shell
CODE:
python cookbook/examples/image_search/main.py

----------------------------------------

TITLE: Setting Up Executable Permissions in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux/macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Installing Required Packages for Code Execution Agent
DESCRIPTION: This snippet shows how to install the necessary packages for the Code Execution Agent project using pip for Python and pnpm for JavaScript.

LANGUAGE: python
CODE:
pip install composio-crewai langchain-openai

LANGUAGE: javascript
CODE:
pnpm add composio-core dotenv @langchain/openai langchain

----------------------------------------

TITLE: Making Setup Script Executable
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Running Coinbase Crypto Kit Agent in Python
DESCRIPTION: Command to execute the main Python script for the Coinbase Crypto Kit Agent.

LANGUAGE: sh
CODE:
python cookbook/python-examples/advanced_agents/cryptokit/coinbase/main.py

----------------------------------------

TITLE: Making Setup Script Executable
DESCRIPTION: Command to make the setup.sh script executable on Linux/macOS systems

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Running Calendar Agent Script in Python
DESCRIPTION: Command to execute the main Python script that implements the Calendar Agent functionality.

LANGUAGE: shell
CODE:
python python/examples/quickstarters/calendar_agent/main.py

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Sets execute permissions for the setup.sh script on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Checking Node.js Version in Bash
DESCRIPTION: This command is used to verify the installed version of Node.js, which is a prerequisite for using Composio MCP. Node.js version 16 or higher is required.

LANGUAGE: bash
CODE:
node --version

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Executing Setup Script in Shell
DESCRIPTION: Command to run the setup.sh script, which sets up the environment, installs dependencies, logs into Composio, and adds necessary tools.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Making Setup Script Executable in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Authenticating Gmail Account via CLI
DESCRIPTION: Use the Composio CLI to authenticate a Gmail account for the 'default' user.

LANGUAGE: bash
CODE:
composio add gmail -e "default" # Launches Gmail login

----------------------------------------

TITLE: Setting Setup Script Permissions
DESCRIPTION: Shell command to make the setup.sh script executable on Unix-based systems (Linux/macOS).

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Defining GET Applications API Endpoint in OpenAPI
DESCRIPTION: OpenAPI/Swagger specification for a GET endpoint that retrieves application data via /api/v1/apps path.

LANGUAGE: yaml
CODE:
openapi: get /api/v1/apps

----------------------------------------

TITLE: Setting Setup Script Permissions
DESCRIPTION: Command to make the setup.sh script executable on Unix-based systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Navigating Project Directory
DESCRIPTION: Command to change into the project directory containing setup files

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Configuring Wrangler for Cloudflare Worker
DESCRIPTION: Set up the wrangler.toml file with project configuration, including the worker name, main file, compatibility settings, and Composio API key.

LANGUAGE: toml
CODE:
name = "github-agent"
main = "worker.js"
compatibility_date = "2024-09-23"
compatibility_flags = ["nodejs_compat"]

[vars]
COMPOSIO_API_KEY = "<your-composio-api-key>"

[ai]
binding = "AI"

----------------------------------------

TITLE: Running Setup Script in Shell
DESCRIPTION: Command to execute the setup script that configures the environment and installs dependencies

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Installing Dependencies with PNPM in Bash
DESCRIPTION: Command to install project dependencies using the PNPM package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change to the project's root directory where core files are located.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Importing Base Packages for Code Execution Agent
DESCRIPTION: This snippet demonstrates the import of essential libraries for the Code Execution Agent project in both Python and JavaScript.

LANGUAGE: python
CODE:
import os

from composio_crewai import Action, App, ComposioToolSet
from crewai import Agent, Crew, Process, Task
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI

LANGUAGE: javascript
CODE:
import dotenv from 'dotenv';
import { ChatOpenAI } from "@langchain/openai";
import { AgentExecutor, createOpenAIFunctionsAgent } from "langchain/agents";
import { pull } from "langchain/hub";
import { LangchainToolSet } from "composio-core";

dotenv.config();

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project folder containing essential files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Sample Trigger Webhook JSON
DESCRIPTION: This JSON structure represents a sample trigger webhook received on the callback URL. It includes trigger details, connected account ID, and payload information.

LANGUAGE: json
CODE:
{
	"trigger_name":"github_commit_event",
    "trigger_id":"12310-sadas-12ad-sa",
	"connected_account_id":"64184e1a-76bf-404b-bf8e-e9ce04fd7c9c",
	"payload":{
		"id":"ae4926ca23488ef488e76c8b39e2ad3ae9e58786",
		"message":"Update README.md",
		"timestamp":"2024-03-26T19:36:58+05:30",
		"author":"kaavee315",
		"url":"https://github.com/kaavee315/ML_assignment/commit/ae4926ca23488ef488e76c8b39e2ad3ae9e58786"
	}
}

----------------------------------------

TITLE: Navigating to Project Directory - Shell Command
DESCRIPTION: Command to change into the project's working directory where essential files like setup.sh, main.py, requirements.txt, and README.md are located.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change into the project directory containing the required setup files.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Fetching Integrations
DESCRIPTION: Methods to retrieve integrations with various filtering options

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App
toolset = ComposioToolSet()

# get all integrations
print(toolset.get_integrations()) 

#filter based on app 
print(toolset.get_integrations(app=App.GMAIL)) 

#filter based on integration id
print(toolset.get_integration(id="<integration_id>")) 

# By auth scheme
print(toolset.get_integrations(auth_scheme="BEARER_TOKEN"))

LANGUAGE: javascript
CODE:
import { OpenAIToolSet } from "composio-core";
const openai_client = new OpenAIToolSet();

// //get all integrations
console.log(openai_client.client.integrations.list()) 

// //filter based on app
console.log(openai_client.client.integrations.get({ appName:'gmail'})) 

// //filter based on integration id
console.log(await openai_client.client.integrations.get({integrationId:"<integration_id>"}))

----------------------------------------

TITLE: Listing Slack Triggers in Composio CLI
DESCRIPTION: Lists all available triggers for the Slack app in Composio. This helps in exploring potential trigger activations.

LANGUAGE: bash
CODE:
composio triggers --app slack

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change to the project's working directory containing setup files and dependencies.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Creating Connections with Integration
DESCRIPTION: Initialize new connections using existing integrations and handle OAuth redirects

LANGUAGE: python
CODE:
from composio import ComposioToolSet

toolset = ComposioToolSet(entity_id="default")

entity = toolset.get_entity()

integration = entity.client.integrations.get_by_id("integration_id...")
connection_request = entity.initiate_connection(
    app_name="TWITTER",
    redirect_url="https://yourwebsite.com/connection/success",
    integration=integration,
)

# If the connection method is OAuth, redirect the user to the URL below
print(connection_request.redirectUrl)

LANGUAGE: javascript
CODE:
import { OpenAIToolSet } from "composio-core";

const toolset = new OpenAIToolSet();

const connectionRequest = await toolset.client.connectedAccounts.initiate({
  appName: "gmail",
  redirect_url: "https://yourwebsite.com/connection/success",
  integrationId: integration.id,
  entityId:"default"
});

console.log(connectionRequest.redirectUrl);

----------------------------------------

TITLE: Importing Libraries for Composio in Python
DESCRIPTION: Import the required Python libraries to work with Composio, including components from langchain and composio_langchain.

LANGUAGE: Python
CODE:
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain import hub
from langchain_openai import ChatOpenAI
from composio_langchain import ComposioToolSet, Action, App

----------------------------------------

TITLE: Installing Composio Core Package
DESCRIPTION: Commands to install the core Composio package using pip for Python and npm for JavaScript implementations.

LANGUAGE: bash
CODE:
pip install composio-core

LANGUAGE: bash
CODE:
npm install composio-core

----------------------------------------

TITLE: Installing Dependencies with UV Package Manager
DESCRIPTION: Commands for installing Composio core and its plugin dependencies using the UV package manager in editable mode.

LANGUAGE: bash
CODE:
uv pip install -e .
uv pip install -e ../swe
# Install plugins as needed
uv pip install -e ../plugins/autogen
uv pip install -e ../plugins/claude
uv pip install -e ../plugins/crew_ai
uv pip install -e ../plugins/griptape
uv pip install -e ../plugins/julep
uv pip install -e ../plugins/langchain
uv pip install -e ../plugins/llamaindex
uv pip install -e ../plugins/lyzr
uv pip install -e ../plugins/openai

----------------------------------------

TITLE: Setting Executable Permissions for setup.sh in Shell
DESCRIPTION: Command to make the setup.sh script executable on Linux or macOS systems.

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project folder containing necessary files like setup.sh, main.py, requirements.txt, and README.md.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Adding GitHub Integration to Composio
DESCRIPTION: Command to connect GitHub account to Composio for authentication and access.

LANGUAGE: bash
CODE:
composio add github

----------------------------------------

TITLE: Navigating Project Directory
DESCRIPTION: Command to change to the project's root directory where key files are located.

LANGUAGE: shell
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Installing Composio Dependencies
DESCRIPTION: Commands for installing the Composio LangChain package and setting up GitHub account connections.

LANGUAGE: bash
CODE:
# Install Composio LangChain package
pip install composio-agno

# Connect your GitHub account
composio add github

# View available applications you can connect with
composio apps

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project folder containing setup files.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Commands to navigate to the project directory and install all required dependencies using pnpm.

LANGUAGE: bash
CODE:
cd swe-js && pnpm i

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Changes the current directory to the project location where key files are stored.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Integrating GitHub Tools with Composio
DESCRIPTION: Setting up GitHub toolset integration with Composio for repository operations.

LANGUAGE: python
CODE:
from composio_agno import ComposioToolSet, Action

toolset = ComposioToolSet()
composio_tools = toolset.get_actions(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project location where essential files are stored.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Folder
DESCRIPTION: These commands clone the composio-js repository and navigate to the report template generator agent example folder.

LANGUAGE: bash
CODE:
git clone https://github.com/composioHQ/composio-js.git
cd composio/js/examples/report-template-generator-agent

----------------------------------------

TITLE: Navigating to Project Directory in Shell
DESCRIPTION: Command to change the current directory to the project location where essential files are stored.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Setting Script Permissions
DESCRIPTION: Command to make the setup script executable on Unix-based systems

LANGUAGE: shell
CODE:
chmod +x setup.sh

----------------------------------------

TITLE: Navigating Project Directory - Shell Command
DESCRIPTION: Command to change into the project directory containing setup files and dependencies.

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Running the Reddit Research Demo
DESCRIPTION: Command to execute the Reddit research agent demo script.

LANGUAGE: bash
CODE:
node demo.mjs

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change into the project directory containing setup files

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Running the SWE Agent
DESCRIPTION: Commands to navigate to the agent directory and execute the main script

LANGUAGE: bash
CODE:
cd swe_agent/agent
python main.py

----------------------------------------

TITLE: Navigating Project Directory
DESCRIPTION: Command to change to the project directory where setup and configuration files are located

LANGUAGE: sh
CODE:
cd path/to/project/directory

----------------------------------------

TITLE: Cloning Repository and Navigating to Project Directory
DESCRIPTION: Commands to clone the Composio repository and navigate to the scheduling agent example directory.

LANGUAGE: bash
CODE:
git clone https://github.com/composioHQ/composio.git
cd composio/js/examples/scheduling-agent

----------------------------------------

TITLE: Defining Agents and Tasks for Newsletter Summarization
DESCRIPTION: This code defines the agents (Email Fetcher, Newsletter Summarizer, Email Sender) and their respective tasks for the newsletter summarization process in Python using CrewAI.

LANGUAGE: python
CODE:
# Define the Email Fetcher Agent
email_fetcher = Agent(
    role="Email Fetcher",
    goal="Fetch all newsletter emails",
    backstory="""You are an Email Fetcher specialized in finding newsletter emails.
    Your job is to identify and retrieve recent newsletter emails from the user's inbox.""",
    verbose=True,
    tools=gmail_tools,
    llm=llm
)

# Define the Email Summarizer Agent
summarizer = Agent(
    role="Newsletter Summarizer",
    goal="Create concise summaries of newsletter content",
    backstory="""You are a Newsletter Summarizer who excels at distilling information.
    You can read newsletter emails and create brief, informative summaries of their main points.""",
    verbose=True,
    llm=llm
)

# Define the Email Sender Agent
email_sender = Agent(
    role="Email Sender",
    goal="Send email with newsletter summaries",
    backstory="""You are an Email Sender who specializes in composing and sending emails.
    You take summaries and convert them into well-formatted emails before sending them to recipients.""",
    verbose=True,
    tools=gmail_tools,
    llm=llm
)

# Define tasks for each agent
fetch_task = Task(
    description=f"""Search for newsletter emails in the inbox from {week_ago} to {today}.
    Return a list of emails with their subjects, senders, and content.""",
    expected_output="A list of newsletter emails with their content",
    agent=email_fetcher
)

summarize_task = Task(
    description="""Create a concise summary of each newsletter email.
    Identify the key points, announcements, and insights from each newsletter.
    Format your summaries neatly with bullet points.""",
    expected_output="Summarized content from all newsletters",
    agent=summarizer,
    context=[fetch_task]
)

send_task = Task(
    description="""Compose an email with the newsletter summaries.
    Send it to youremail@example.com with the subject 'Weekly Newsletter Digest'.
    Format the email in a reader-friendly way with headings for each newsletter.""",
    expected_output="Confirmation that the email was sent",
    agent=email_sender,
    context=[summarize_task]
)

----------------------------------------

TITLE: HTML Project Header Layout
DESCRIPTION: HTML markup for the project header including responsive logo display and centered project title

LANGUAGE: html
CODE:
<p align="center">
  <picture width="200">
    <source media="(prefers-color-scheme: dark)" width="172" srcset="https://github.com/ComposioHQ/composio/blob/fix/docs-images/js/docs/assets/Composio-Logo-dark.svg">
    <source media="(prefers-color-scheme: light)" width="172" srcset="https://github.com/ComposioHQ/composio/blob/fix/docs-images/js/docs/assets/Composio-Logo-light.svg">
    <img alt="Composio Logo" width="172" src="https://github.com/ComposioHQ/composio/blob/fix/docs-images/js/docs/assets/Composio-Logo-dark.svg"/>
  </picture>
  <h3 align="center">MCP CLI: Model Context Protocol Command Line Interface</h3>
  <p align="center">Supercharge your AI workflows with powerful context management</p>
  <hr/>
</p>

----------------------------------------

TITLE: Listing Python Dependencies for Composio Project
DESCRIPTION: This snippet lists the Python packages required for the Composio project. It includes composio-crewai, crewai, langchain-openai, and python-dotenv. These dependencies suggest that the project involves AI-related tasks, possibly using language models and environment variable management.

LANGUAGE: plaintext
CODE:
composio-crewai
crewai
langchain-openai
python-dotenv

----------------------------------------

TITLE: Installing Dependencies for Lead Generator Agent
DESCRIPTION: This command installs the required npm packages for the Lead Generator Agent project using pnpm.

LANGUAGE: bash
CODE:
pnpm install @ai-sdk/openai ai zod composio-core

----------------------------------------

TITLE: Specific Actions Configuration
DESCRIPTION: Optional configuration to limit tools to specific actions for better performance.

LANGUAGE: python
CODE:
tools = composio_toolset.get_tools(actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER])

----------------------------------------

TITLE: Required Shell Tool Classes
DESCRIPTION: Core classes needed for implementing shell tool functionality in the SWE agent. These classes handle shell requests, execution responses, and base command functionality.

LANGUAGE: python
CODE:
ShellRequest
ShellExecResponse
BaseExecCommand

----------------------------------------

TITLE: Listing Python Package Dependencies
DESCRIPTION: Specifies the required Python packages for the Composio project, including LangChain core package, OpenAI integration, Composio's LangChain extension, and environment variable management.

LANGUAGE: plaintext
CODE:
langchain
langchain-openai
composio-langchain
python-dotenv

----------------------------------------

TITLE: Installing Composio and Letta Packages
DESCRIPTION: This snippet shows how to install the required packages for using Composio with Letta in both Python and JavaScript environments.

LANGUAGE: bash
CODE:
pip install letta-client composio_langchain

LANGUAGE: bash
CODE:
npm i composio-core @letta-ai/letta-client

----------------------------------------

TITLE: GitHub Authentication
DESCRIPTION: Authenticate GitHub account with Composio CLI.

LANGUAGE: bash
CODE:
composio add github # Launches GitHub login

----------------------------------------

TITLE: Installing Composio LangGraph Dependencies
DESCRIPTION: Installation commands for setting up Composio LangGraph package and connecting GitHub account

LANGUAGE: bash
CODE:
# Install Composio LangGraph package
pip install composio-langgraph

# Connect your GitHub account
composio-cli add github

# View available applications you can connect with
composio-cli show-apps

----------------------------------------

TITLE: Python Package Dependencies
DESCRIPTION: Required Python packages that need to be installed for the Composio project. Includes ChromaDB for vector storage, sentence-transformers and open-clip-torch for embeddings, and various LangChain components.

LANGUAGE: text
CODE:
chromadb
sentence-transformers
open-clip-torch
composio-langgraph
langgraph
langchain-openai

----------------------------------------

TITLE: Cloning Repository and Changing Directory in Shell
DESCRIPTION: Commands to clone the project repository and navigate to the project directory.

LANGUAGE: sh
CODE:
git clone <repository-url>
cd path/to/project/directory

----------------------------------------

TITLE: Implementing Custom 'Cow Say' Tool in Python for Composio
DESCRIPTION: This snippet demonstrates how to create a custom 'Cow Say' tool using the @action decorator from Composio. It requires the cowsay library and returns a formatted message.

LANGUAGE: python
CODE:
from composio import action

# tool name is "cow"
# requires cowsay library
@action(toolname="cow", requires=["cowsay"])
def say(message: str) -> str:
    """
    cow will say whatever you want it to say.
    :param message: Message string
    :return greeting: Formatted message.
    """
    import cowsay
    return cowsay.get_output_string("cow", message)

----------------------------------------

TITLE: Listing Python Package Dependencies for composio-llamaindex
DESCRIPTION: This snippet lists the required Python packages for the composio-llamaindex project. It includes composio-llamaindex itself, python-dotenv for environment variable management, llama-index-llms-groq for LLM integration, and pygame for game development.

LANGUAGE: plaintext
CODE:
composio-llamaindex
python-dotenv
llama-index-llms-groq
pygame

----------------------------------------

TITLE: Configuring Fly.io Environment in Python
DESCRIPTION: Demonstrates how to set up a Fly.io environment for scalable, distributed execution. Requires setting the FLY_API_TOKEN environment variable.

LANGUAGE: python
CODE:
from composio import ComposioToolSet, WorkspaceType

toolset = ComposioToolSet(
    workspace_config=WorkspaceType.FlyIO(),
)

----------------------------------------

TITLE: Integrating Coinbase Exchange with LangChain Agent
DESCRIPTION: Example showing how to set up a LangChain agent to interact with Coinbase exchange API using ComposioToolSet. Demonstrates agent creation, tool configuration, and task execution.

LANGUAGE: python
CODE:
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain import hub
from langchain_openai import ChatOpenAI
from composio_langchain import ComposioToolSet, Action, App

llm = ChatOpenAI()
prompt = hub.pull("hwchase17/openai-functions-agent")

composio_toolset = ComposioToolSet()
tools = composio_toolset.get_tools(apps=[App.COINBASE])

agent = create_openai_functions_agent(llm, tools, prompt)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

task = "your task description here"
result = agent_executor.invoke({"input": task})
print(result)

LANGUAGE: javascript
CODE:
import { ChatOpenAI } from "@langchain/openai";
import { createOpenAIFunctionsAgent, AgentExecutor } from "langchain/agents";
import { LangchainToolSet } from "composio-core";
import { pull } from "langchain/hub";

const llm = new ChatOpenAI({
  model: "gpt-4-turbo",
  temperature: 0,
});

const prompt = await pull("hwchase17/openai-functions-agent");

const toolset = new LangchainToolSet({ apiKey: "<your-composio-api-key>" });
const tools = await toolset.getTools({ apps: ["COINBASE"] });

const agent = await createOpenAIFunctionsAgent({llm, tools, prompt});

const agentExecutor = new AgentExecutor({ agent, tools, verbose: true });

const response = await agentExecutor.invoke({ input: "your task description here" });
console.log(response);

----------------------------------------

TITLE: Python Dependencies List
DESCRIPTION: List of required Python packages including LlamaIndex components, agent operations, LLM integrations, and UI framework Gradio.

LANGUAGE: plaintext
CODE:
composio-llamaindex
agentops
llama-index-llms-groq
llama-index-llms-openai
python-dotenv
gradio

----------------------------------------

TITLE: Adding Content to RAG Tool in JavaScript
DESCRIPTION: This code defines a function to add content to the RAG tool and demonstrates its usage with example content. It uses the agent executor to invoke the content addition task.

LANGUAGE: javascript
CODE:
async function addContentToRAG(content) {
    const result = await agentExecutor.invoke({
        input: `Add the following content to the RAG tool to enrich its knowledge base: ${content}`
    });
    console.log(result.output);
    return result.output;
}

// Example content to add
const additionalContentList = [
    "Paris is the capital of France. It is known for its art, fashion, and culture.",
    "Berlin is the capital of Germany. It is famous for its history and vibrant culture.",
    "Tokyo is the capital of Japan. It is known for its technology and cuisine.",
    "Canberra is the capital of Australia. It is known for its modern architecture and museums.",
];

// Add content to RAG tool
for (const content of additionalContentList) {
    await addContentToRAG(content);
}

----------------------------------------

TITLE: OpenAPI POST Endpoint Definition for Enabling Triggers
DESCRIPTION: OpenAPI route specification for enabling triggers through a POST request. The endpoint requires a connected account ID and trigger name as path parameters.

LANGUAGE: openapi
CODE:
openapi: post /api/v1/triggers/enable/{connectedAccountId}/{triggerName}

----------------------------------------

TITLE: Registering Local Tool
DESCRIPTION: Adds the new tool to the list of available local tools in Composio.

LANGUAGE: python
CODE:
from pathlib import Path
from composio.tools.local.filetool import FileTool
from composio.tools.local.greptile import Greptile
from composio.tools.local.<tool_name> import <ToolName> # Import your tool class

TOOLS_PATH = Path(__file__).parent
TOOLS = [
    FileTool,
    Greptile,
    <ToolName>, # Add your tool here
]

----------------------------------------

TITLE: Importing Required Libraries
DESCRIPTION: Imports necessary Python libraries for the trading agent including LangChain, Composio, and CDP toolkit components.

LANGUAGE: python
CODE:
from langchain_openai import ChatOpenAI
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain import hub
from composio_langchain import ComposioToolSet, App
from cdp_langchain.agent_toolkits import CdpToolkit
from cdp_langchain.utils import CdpAgentkitWrapper
from dotenv import load_dotenv
from pathlib import Path
import time
import os

load_dotenv()

----------------------------------------

TITLE: OpenAPI DELETE Project Endpoint Definition
DESCRIPTION: OpenAPI specification for the DELETE endpoint that removes a project from an organization based on the provided project ID parameter.

LANGUAGE: yaml
CODE:
openapi: delete /api/v1/org/projects/{projectId}

----------------------------------------

TITLE: Structuring Local Tool Files in Composio
DESCRIPTION: Shows the required directory structure for organizing local tools and their actions within the Composio framework.

LANGUAGE: bash
CODE:
composio/
└── tools/
   └── local/
       └── <tool_name>/
           ├── __init__.py
           ├── tool.py
           └── actions/
               ├── __init__.py
               └── <action_name>.py

----------------------------------------

TITLE: Installing Required Packages
DESCRIPTION: Installs the necessary npm packages including composio-core, dotenv, langchain, and @langchain/openai

LANGUAGE: javascript
CODE:
pnpm add composio-core dotenv langchain @langchain/openai

----------------------------------------

TITLE: Defining OpenAPI Delete Endpoint for Integration Removal
DESCRIPTION: This YAML snippet specifies the OpenAPI structure for a DELETE operation on the /api/v1/integrations/{integrationId} endpoint. It defines the path for removing a specific integration using its unique identifier.

LANGUAGE: yaml
CODE:
openapi: delete /api/v1/integrations/{integrationId}

----------------------------------------

TITLE: Configuring Fly.io Workspace in Python
DESCRIPTION: Illustrates the setup and usage of a Fly.io workspace in Composio, including API token configuration, Docker image specification, port exposure, and environment variable setup.

LANGUAGE: python
CODE:
from composio_openai import ComposioToolSet, App, Action, WorkspaceType
from openai import OpenAI

client = OpenAI()

toolset = ComposioToolSet(workspace_config=WorkspaceType.Flyio(
    token="your_flyio_token",  # Required: Fly.io API token
    image="your-custom-image:tag",  # Optional: Docker image to use
    ports=[{  # Optional: Additional ports to expose
        "ports": [
            {
                "port": 3000,
                "handlers": ["http"]  # Available handlers: http, tls
            }
        ]
    }],
    environment={"KEY": "VALUE"}  # Optional: Environment variables
))
tools = toolset.get_tools(["FILETOOL_LIST_FILES"])

response = client.chat.completions.create(
    model="gpt-4o-mini",
    max_tokens=1024,
    tools=tools,
    messages=[{"role": "user", "content": "List files in Fly.io instance"}],
)
result = toolset.handle_tool_calls(response)
print(result)

----------------------------------------

TITLE: Connecting GitHub Account
DESCRIPTION: Commands to authenticate and connect GitHub account with Composio using both CLI and Python methods

LANGUAGE: shell
CODE:
composio login 
composio add github

LANGUAGE: python
CODE:
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

----------------------------------------

TITLE: Defining API Key Deletion Endpoint in OpenAPI
DESCRIPTION: Specifies the OpenAPI structure for the DELETE endpoint to remove an API key. The endpoint path includes a parameter for the API key ID.

LANGUAGE: yaml
CODE:
openapi: delete /api/v1/api_keys/{id}

----------------------------------------

TITLE: Installing Fly.io Workspace Extension
DESCRIPTION: Shows the command to install the Fly.io workspace extension for Composio.

LANGUAGE: bash
CODE:
pip install composio-core[flyio]

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Installation of required packages for both Python and JavaScript implementations.

LANGUAGE: bash
CODE:
pip install composio-core

LANGUAGE: bash
CODE:
npm install composio-core langchain @langchain/openai

----------------------------------------

TITLE: Listing Python Package Dependencies
DESCRIPTION: Lists the required Python packages for the project: composio_llamaindex for LlamaIndex integration and python-dotenv for environment variable management.

LANGUAGE: text
CODE:
composio_llamaindex
python-dotenv

----------------------------------------

TITLE: Installing Required Packages
DESCRIPTION: Install necessary npm packages including Vercel AI SDK, Composio Core, and AI utilities

LANGUAGE: bash
CODE:
npm install @ai-sdk/openai composio-core ai

----------------------------------------

TITLE: Configuring Tool Connections
DESCRIPTION: Setting up connections to Gmail and HubSpot, and configuring API keys.

LANGUAGE: bash
CODE:
composio add gmail
composio add hubspot

export OPENAI_API_KEY="<your-openai-api-key>"

----------------------------------------

TITLE: Listing Python Dependencies for Composio Project
DESCRIPTION: This snippet lists the required Python packages for the Composio project. It includes LangChain extensions, language model integrations, and environment management tools.

LANGUAGE: plaintext
CODE:
composio-langgraph
langgraph
langchain-groq
langchain-openai
python-dotenv

----------------------------------------

TITLE: Installing Required Packages for Composio and LiteLLM Integration
DESCRIPTION: This snippet shows how to install the necessary Python packages (composio_openai and litellm) using pip.

LANGUAGE: bash
CODE:
pip install composio_openai litellm

----------------------------------------

TITLE: Installing Required Packages for Composio and Agno
DESCRIPTION: Installs the necessary Python packages 'composio-agno' and 'openai' using pip.

LANGUAGE: bash
CODE:
pip install composio-agno openai

----------------------------------------

TITLE: Listing Dependencies for Composio Project
DESCRIPTION: This snippet lists the required dependencies for the Composio project. It includes composio-llamaindex for LlamaIndex integration, llama-index-llms-groq for Groq LLM support, and python-dotenv for managing environment variables in Python.

LANGUAGE: plaintext
CODE:
composio-llamaindex
llama-index-llms-groq
python-dotenv

----------------------------------------

TITLE: Importing Libraries and Initializing Composio and LLM
DESCRIPTION: Import necessary libraries and initialize ComposioToolSet and ChatOpenAI for use with LangChain.

LANGUAGE: python
CODE:
from langchain.agents import create_openai_functions_agent, AgentExecutor
from langchain import hub
from langchain_openai import ChatOpenAI
from composio_langchain import ComposioToolSet, App

llm = ChatOpenAI()
composio_toolset = ComposioToolSet()

LANGUAGE: javascript
CODE:
import { ChatOpenAI } from "@langchain/openai";
import { createOpenAIFunctionsAgent, AgentExecutor } from "langchain/agents";
import { LangchainToolSet } from "composio-core";
import { pull } from "langchain/hub";

const llm = new ChatOpenAI();
const toolset = new LangchainToolSet();

----------------------------------------

TITLE: Creating Solana Transfer Action for Github Contributor Reward Agent
DESCRIPTION: This snippet defines a custom action to send SOL (Solana's native cryptocurrency) from one wallet to another. It uses the Solana and Solders libraries to create and send transactions on the Solana blockchain.

LANGUAGE: python
CODE:
from solders.keypair import Keypair
from solders.pubkey import Pubkey
from solana.rpc.api import Client
from solders.system_program import TransferParams, transfer
from solders.transaction import Transaction
from solders.message import Message
from composio import action
import base58
from solders.signature import Signature

@action(toolname='solanakit', requires=['solana','solders'])
def send_sol(sender_private_key: str, receiver_public_key: str, amount: str, network: str = "devnet") -> str:
    """
    Send SOL to a wallet
    :param sender_private_key: private key of the sender
    :param receiver_public_key: address of the wallet to send SOL to
    :param amount: amount of SOL to send, should be in lamports
    :param network: network to send the transaction on
    :return transaction_hash: transaction hash
    """
    try:
        # Create keypair for sender
        # Use a valid Base58-encoded private key for the sender
        sender_keypair = Keypair.from_base58_string(sender_private_key)
        sender_public_key = sender_keypair.pubkey()

        # Define receiver's public key
        receiver_public_key_ = Pubkey.from_string(receiver_public_key)

        # Build the transfer instruction
        ixns = [
            transfer(
                TransferParams(
                    from_pubkey=sender_public_key,
                    to_pubkey=receiver_public_key_,
                    lamports=int(amount)
                )
            )
        ]

        # Create a message with the transaction
        msg = Message(ixns, sender_public_key)

        # Connect to a Solana client
        client = Client(f"https://api.{network}.solana.com")  # Using Devnet RPC endpoint

        # Fetch the latest blockhash
        latest_blockhash = client.get_latest_blockhash().value.blockhash

        # Create the transaction
        transaction = Transaction([sender_keypair], msg, latest_blockhash)

        # Send the transaction
        response = client.send_transaction(transaction)
        print("Transaction response:", response)
        return "Transaction sent successfully: "+str(response)
    except ValueError as e:
        return f"Error: Invalid key format - {str(e)}"
    except Exception as e:
        return f"Error sending transaction: {str(e)}"

----------------------------------------

TITLE: Retrieving Expected Parameters for Non-OAuth Apps in Composio
DESCRIPTION: Demonstrates how to retrieve the expected parameters required to create a connection for non-OAuth apps, such as API keys or other authentication details.

LANGUAGE: python
CODE:
# You can use integration_id instead of app
response = toolset.get_expected_params_for_user(app=App.FIRECRAWL) 
print(response["expected_params"])

LANGUAGE: javascript
CODE:
const expectedInputFields = await toolset.integrations.getRequiredParams(
    "<app-integration-id>", //integrationId
);
console.log(expectedInputFields);

----------------------------------------

TITLE: Implementing Websocket Listeners
DESCRIPTION: Example of setting up a websocket listener for Slack messages using Python. Shows how to create a callback function for handling incoming events.

LANGUAGE: python
CODE:
from composio_openai import ComposioToolSet, App, Action

toolset = ComposioToolSet()
entity = toolset.get_entity(id="default")

listener = toolset.create_trigger_listener()
@listener.callback(
    filters={
        "trigger_name": "SLACK_RECEIVE_MESSAGE",
    }
)
def handle_slack_message(event):
    print(event)

listener.wait_forever()

----------------------------------------

TITLE: Executing Assistant Tasks
DESCRIPTION: Code for executing assistant tasks with both streaming and non-streaming options in Python and JavaScript

LANGUAGE: python
CODE:
print(response_after_tool_calls)

LANGUAGE: javascript
CODE:
//With Streaming
async function executeAssistantTask(openai, toolset, assistant, task) {
    const thread = await openai.beta.threads.create();
    const run = await openai.beta.threads.runs.create(thread.id, {
        assistant_id: assistant.id,
        instructions: task,
        tools: tools,
        model: "gpt-4o-mini",
        stream: true
    });

    for await (const result of toolset.waitAndHandleAssistantStreamToolCalls(openai, run, thread)) {
        console.log(result);
    }
}

// Without Streaming
async function executeAssistantTask(openai, toolset, assistant, task) {
    const thread = await openai.beta.threads.create();
    const run = await openai.beta.threads.runs.create(thread.id, {
        assistant_id: assistant.id,
        instructions: task,
        tools: tools,
        model: "gpt-4o-mini",
        stream: false
    });
    const call = await toolset.waitAndHandleAssistantToolCalls(openai, run, thread);
    console.log(call);
}

(async() => {
    const githubAssistant = await createGithubAssistant(openai, tools);
    await executeAssistantTask(
        openai, 
        toolset, 
        githubAssistant, 
        "Star the repository 'composiohq/composio'"
    );
})();

----------------------------------------

TITLE: Installing Composio Griptape Integration
DESCRIPTION: Commands to install Composio's Griptape integration package and connect GitHub tool for agent use.

LANGUAGE: bash
CODE:
pip install composio_griptape
# Connect your GitHub so agents can use it. 
composio add github
# Check all different apps which you can connect with
composio show-apps

----------------------------------------

TITLE: Complete JavaScript Implementation of AI Lead Generator Agent
DESCRIPTION: This snippet provides the complete JavaScript implementation of the AI Lead Generator Agent, including all necessary imports, initializations, and execution.

LANGUAGE: javascript
CODE:
import { openai } from "@ai-sdk/openai";
import { VercelAIToolSet } from "composio-core";
import dotenv from "dotenv";
import { generateText } from "ai";

dotenv.config();

const toolset = new VercelAIToolSet({
  apiKey: process.env.COMPOSIO_API_KEY,
});

const tools = await toolset.getTools([App.PEOPLEDATALABS, App.GOOGLESHEETS]);

const leadDescription = 'Senior frontend developers in San Francisco';
const spreadsheetid='14T4e0j1XsWjriQYeFMgkM2ihyvLAplPqB9q8hytytcw'
const output = await generateText({
model: openai("gpt-4o"),
streamText: false,
tools: tools,
prompt: `
        You are a lead research agent. Based on user input, find 10 relevant leads using people data labs.
        After finding the leads, create a Google Sheet with the details for the lead description: ${leadDescription}, and spreadsheet ID: ${spreadsheetid}.
        Print the list of people and their details and the link to the google sheet.
        `, 
maxToolRoundtrips: 5,
});

console.log("🎉Output from agent: ", output.text);

----------------------------------------

TITLE: Initializing ChatOpenAI and LangChain Toolset in TypeScript
DESCRIPTION: Set up the ChatOpenAI model and initialize the LangChain toolset client for use in the TypeScript environment.

LANGUAGE: TypeScript
CODE:
const llm = new ChatOpenAI({ apiKey: "<your-api-key>" });
const toolset = new LangchainToolSet({ apiKey: "<your-api-key>" });

----------------------------------------

TITLE: Installing Composio CLI with pip
DESCRIPTION: Installs the Composio CLI using pip. Requires Python 3.9 and pip to be installed.

LANGUAGE: bash
CODE:
pip install composio-core

----------------------------------------

TITLE: Initiating GitHub Connection in Python
DESCRIPTION: Python code to initiate a connection to GitHub using Composio toolset and print the authentication URL.

LANGUAGE: python
CODE:
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

----------------------------------------

TITLE: Filtering Specific Apps in Composio
DESCRIPTION: Limit the Google AI model to use only specific tools or apps, such as Asana and GitHub.

LANGUAGE: python
CODE:
# To restrict models from using all tools, filter specific tools 
actions = composio_toolset.get_tool(apps=[App.ASANA, App.GITHUB])

----------------------------------------

TITLE: Creating a Trigger Listener in Python
DESCRIPTION: Set up a trigger listener in Python to handle new Gmail messages.

LANGUAGE: python
CODE:
listener = composio_toolset.create_trigger_listener()

## Triggers when a new event has taken place
@listener.callback(filters={"trigger_name": "gmail_new_gmail_message"})
def callback_function(event):
    ## Your Code Here ##
    ## Parse event data and do something with it
    payload = event.payload
    thread_id = payload.get("threadId")
    message = payload.get("snippet")
    sender_mail = extract_sender_email(payload["payload"])
    print(sender_mail + ":" + message)

listener.listen()

----------------------------------------

TITLE: Initiating GitHub Connection in Python
DESCRIPTION: Initiates a connection to GitHub using the Composio ToolSet and prints the authentication URL.

LANGUAGE: python
CODE:
request = toolset.initiate_connection(app=App.GITHUB)
print(f"Open this URL to authenticate: {request.redirectUrl}")

----------------------------------------

TITLE: Filtering App Actions by Tags in Composio
DESCRIPTION: Filter actions for specific apps using tags, allowing fine-grained control over which actions the Google AI model can perform.

LANGUAGE: python
CODE:
actions = composio_toolset.get_tool(apps=[App.ASANA], tags=[Tag.ASANA_TASKS])

----------------------------------------

TITLE: Starting a Chat Session with Google AI Model
DESCRIPTION: This snippet demonstrates how to start a chat session with the initialized Google AI model.

LANGUAGE: python
CODE:
# Start a chat session
chat = model.start_chat()

----------------------------------------

TITLE: Filtering Specific Composio Actions for GitHub
DESCRIPTION: Demonstrates how to restrict agents to use only specific actions from the GitHub toolset.

LANGUAGE: bash
CODE:
# To restrict agents from using all the actions, filter specific actions
tools = composio_toolset.get_tools(apps=[App.GITHUB])

----------------------------------------

TITLE: Python Trigger Setup and Configuration
DESCRIPTION: Python implementation for trigger management including installation, configuration, and trigger operations

LANGUAGE: bash
CODE:
pip install composio-core

LANGUAGE: python
CODE:
from composio import ComposioToolSet, App

toolset = ComposioToolSet()

trigger_schema = toolset.get_trigger("GITHUB_STAR_ADDED_EVENT")
print(trigger_schema.config)

LANGUAGE: python
CODE:
entity = toolset.get_entity()
response = entity.enable_trigger(
    app=App.GITHUB,
    trigger_name="GITHUB_PULL_REQUEST_EVENT",
    config={"owner": "composiohq", "repo": "composio"},
)
print(response)

----------------------------------------

TITLE: Validating Response Execution
DESCRIPTION: Validation of the executed task response to ensure successful completion

LANGUAGE: python
CODE:
result = composio_toolset.handle_response(response)
print("Function call result:", result)

----------------------------------------

TITLE: Creating and Executing Calendar Agent
DESCRIPTION: Implements the agent execution logic to convert todo items into Google Calendar events with proper labeling and scheduling

LANGUAGE: javascript
CODE:
async function runAgent() {
    const prompt = await pull("hwchase17/openai-functions-agent");
    const agent = await createOpenAIFunctionsAgent({
        llm,
        tools,
        prompt
    });

    const agentExecutor = new AgentExecutor({
        agent,
        tools,
        verbose: true,
    });

    const result = await agentExecutor.invoke({
        input: `Book slots according to this todo list: ${todo}. 
                Label them with the work provided to be done in that time period. 
                Schedule it for today. Today's date is ${date} (it's in YYYY-MM-DD format) 
                and make the timezone be ${timezone}.`
    });

    console.log(result.output);
    return "Agent execution completed";
}

runAgent().then(console.log).catch(console.error);

----------------------------------------

TITLE: Defining the Smol Agent
DESCRIPTION: Initialize a CodeAgent instance with the retrieved GitHub tools and HfApiModel.

LANGUAGE: python
CODE:
agent = CodeAgent(tools=tools, model=HfApiModel())

----------------------------------------

TITLE: Integrating Cerebras LLM with Google Calendar via Composio
DESCRIPTION: Implementation of Cerebras LLM integration with Composio for Google Calendar management. Demonstrates setup of environment variables, tool initialization, and calendar event scheduling using LlamaIndex framework.

LANGUAGE: python
CODE:
import os
import dotenv
from composio_llamaindex import Action, App, ComposioToolSet
from composio_llamaindex import App, ComposioToolSet, Action
from llama_index.core.agent import FunctionCallingAgentWorker
from llama_index.core.llms import ChatMessage
from llama_index.core.llms import Cerebras
from datetime import datetime
from llama_index.core import Settings

# Load environment variables from .env file
dotenv.load_dotenv()
Settings.llm = Cerebras(model="llama3.1-70b", api_key=os.environ["GROQ_API_KEY"])
llm = Cerebras(model="llama3.1-70b", api_key=os.environ["GROQ_API_KEY"])


# Initialize the ComposioToolSet
toolset = ComposioToolSet()

# Get the RAG tool from the Composio ToolSet
tools = toolset.get_tools(apps=[App.GOOGLECALENDAR])

# Retrieve the current date and time
date = datetime.today().strftime("%Y-%m-%d")
timezone = datetime.now().astimezone().tzinfo

# Setup Todo
todo = """
    1PM - 3PM -> Code,
    5PM - 7PM -> Meeting,
    9AM - 12AM -> Learn something,
    8PM - 10PM -> Game
"""

# Define the RAG Agent
prefix_messages = [
    ChatMessage(
        role="system",
        content=(
        """
        You are an AI agent responsible for taking actions on Google Calendar on users' behalf. 
        You need to take action on Calendar using Google Calendar APIs. Use correct tools to run APIs from the given tool-set.
        """
        ),
    )
]

# Initialize a FunctionCallingAgentWorker with the tools, LLM, and system messages
agent = FunctionCallingAgentWorker(
    tools=tools,  # Tools available for the agent to use
    llm=llm,  # Language model for processing requests
    prefix_messages=prefix_messages,  # Initial system messages for context
    max_function_calls=10,  # Maximum number of function calls allowed
    allow_parallel_tool_calls=False,  # Disallow parallel tool calls
    verbose=True,  # Enable verbose output
).as_agent()

response = agent.chat(
    """
Book slots according to {todo}. 
Properly Label them with the work provided to be done in that time period. 
Schedule it for today. Today's date is {date} (it's in YYYY-MM-DD format) 
and make the timezone be {timezone}.
    """
)
print(response)

----------------------------------------

TITLE: Installing Required Packages for Calendar Agent (Python)
DESCRIPTION: This snippet shows how to install the necessary Python packages for the Calendar Agent project using pip. It also mentions creating a .env file for the OpenAI API key.

LANGUAGE: python
CODE:
pip install composio-crewai langchain-openai

----------------------------------------

TITLE: Configuring AI Agent
DESCRIPTION: Define the AI agent configuration using OpenAI's GPT-4 model with specific tools and prompt

LANGUAGE: javascript
CODE:
const output = await generateText({
    model: openai("gpt-4o-mini"),
    streamText: false,
    tools,
    prompt: 'Star the repository "composiohq/composio"',
    maxToolRoundtrips: 5,
});

----------------------------------------

TITLE: Fetching GitHub LlamaIndex Tools via Composio
DESCRIPTION: This snippet demonstrates how to access GitHub tools provided by Composio for LlamaIndex, specifically for starring a repository.

LANGUAGE: python
CODE:
from composio_llamaindex import App, Action, ComposioToolSet

# Get All the tools
composio_toolset = ComposioToolSet()
tools = composio_toolset.get_actions(
    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]
)
print(tools)

----------------------------------------

TITLE: Installing Composio CrewAI and Setting Up GitHub Connection
DESCRIPTION: Initial setup commands to install the Composio CrewAI package and connect GitHub account for agent functionality.

LANGUAGE: bash
CODE:
pip install composio_crewai
composio-cli add github  # Connect your GitHub account
composio-cli show-apps   # Check available applications

----------------------------------------

TITLE: Executing Assistant for GitHub Repository Starring
DESCRIPTION: This snippet demonstrates how to configure and execute an AI assistant to carry out actions, specifically starring a GitHub repository based on user input.

LANGUAGE: python
CODE:
my_task = "Star a repo composiohq/composio on GitHub"

# Create a chat completion request to decide on the action
assistant = Assistant(tools=composio_tools, show_tool_calls=True)

assistant.print_response("Can you star ComposioHQ/composio repo?")

----------------------------------------

TITLE: Executing Gemini Agent to Star GitHub Repository
DESCRIPTION: This snippet demonstrates how to configure and execute the Gemini agent to carry out the action of starring a GitHub repository. It uses the chat interface to send a message instructing the agent to perform the action.

LANGUAGE: python
CODE:
# Use the chat interface.
chat = client.chats.create(model="gemini-2.0-flash", config=config)
response = chat.send_message(
    "Can you star composiohq/composio repository on github",
)
print(response.text)

----------------------------------------

TITLE: Importing Required Packages - Python
DESCRIPTION: Initial setup for importing necessary components from Composio and Pydantic-AI.

LANGUAGE: python
CODE:
from dotenv import load_dotenv
import os

from composio import Action
from composio_pydanticai import ComposioToolSet
from pydantic_ai import Agent

----------------------------------------

TITLE: Cloning the Advanced Agents Repository
DESCRIPTION: These commands clone the repository containing the advanced agents and navigate to the project directory.

LANGUAGE: sh
CODE:
git clone https://github.com/your-repo/advanced_agents.git
cd advanced_agents

----------------------------------------

TITLE: Validating Composio Tool Execution Response
DESCRIPTION: This snippet shows how to execute and validate the response from the Composio tool to ensure the task was completed successfully.

LANGUAGE: python
CODE:
execution_output = toolset.handle_tool_calls(response)
print(execution_output)

----------------------------------------

TITLE: Implementing Decision Function for Workflow Routing
DESCRIPTION: Function to determine if the conversation should continue to tools or end. This guides the flow of the LangGraph workflow based on the presence of tool calls in messages.

LANGUAGE: python
CODE:
def should_continue(state: MessagesState) -> Literal["tools", "__end__"]:
    """
    Determine if the conversation should continue to tools or end
    Returns:
        - "tools" if the last message contains tool calls
        - "__end__" otherwise
    """
    messages = state["messages"]
    last_message = messages[-1]
    if last_message.tool_calls:
        return "tools"
    return "__end__"

LANGUAGE: typescript
CODE:
async function shouldContinue(state) {
    const { messages } = state;
    const lastMessage = messages[messages.length - 1];

    if (lastMessage.additional_kwargs.tool_calls) {
        return "tools";
    } else {
        return END;
    }
}

----------------------------------------

TITLE: Validating Tool Execution Response
DESCRIPTION: Processing and validating the response from the tool execution.

LANGUAGE: python
CODE:
result = toolset.handle_tool_calls(response)
pprint(result)

----------------------------------------

TITLE: Installing Required Packages for Composio and Letta
DESCRIPTION: Installation commands for required packages in both Python and JavaScript environments

LANGUAGE: bash
CODE:
pip install letta-client composio_langchain

LANGUAGE: bash
CODE:
npm i composio-core @letta-ai/letta-client

----------------------------------------

TITLE: Installing Required Packages for Composio and Smol Agents
DESCRIPTION: Install the necessary Python packages composio-smol and smolagents using pip.

LANGUAGE: bash
CODE:
pip install composio-smol smolagents

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Execute the setup script to configure the environment, install dependencies, and set up Composio tools.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Running Setup Script
DESCRIPTION: Execute the setup script to configure the environment, install dependencies, and set up Composio tools.

LANGUAGE: shell
CODE:
./setup.sh

----------------------------------------

TITLE: Installing Composio and Agno Dependencies
DESCRIPTION: Install the required Python packages 'composio-agno' and 'openai' using pip.

LANGUAGE: bash
CODE:
pip install composio-agno openai

----------------------------------------

TITLE: Implementing OpenAI Agent for GitHub Issues
DESCRIPTION: Function that sets up and executes an OpenAI agent to create GitHub issues. Uses GPT-4 Turbo model and handles tool calls through Composio.

LANGUAGE: typescript
CODE:
async function executeAgent(repo,entityName="default") {
        const entity = toolset.client.getEntity(entityName)
        await setupUserConnectionIfNotExists(entity.id);

        const tools = await toolset.getTools({ actions: ["github_issues_create"] }, entity.id);
        const instruction = `Make an issue with sample title in the repo - ${repo}`

        const client = new OpenAI({ apiKey: OPEN_AI_API_KEY })
        const response = await client.chat.completions.create({
            model: "gpt-4-turbo",
            messages: [{
                role: "user",
                content: instruction,
            }],
            tools: tools,
            tool_choice: "auto",
        })

        console.log(response.choices[0].message.tool_calls);
        await toolset.handleToolCall(response, entity.id);
}

----------------------------------------

TITLE: Installing Dependencies
DESCRIPTION: Installation commands for required packages in Python and JavaScript environments

LANGUAGE: bash
CODE:
pip install composio-llamaindex python-dotenv

LANGUAGE: bash
CODE:
npm install composio-core openai dotenv @ai-sdk/openai ai dotenv

----------------------------------------

TITLE: CSV User Data Records
DESCRIPTION: Sample CSV data containing user records with fields for ID, first name, last name, email address, and a numeric code. Each record is on a new line with comma-separated values.

LANGUAGE: csv
CODE:
1, Ainslee, Hanner, ahanner0@edublogs.org, 96306
2, Christabel, Maleham, cmaleham1@china.com.cn, 68295
3, Maurizia, O'Donnell, modonnell2@blogs.com, 76965
4, Boycie, Fleisch, bfleisch3@bigcartel.com, 49013
5, Sullivan, Jacques, sjacques4@comcast.net, 10828
6, Alley, Thieme, athieme5@marriott.com, 48305
7, Lannie, St Angel, lstangel6@godaddy.com, 34307
8, Margot, O'Neal, moneal7@cpanel.net, 68410
9, Bernardo, Bletsoe, bbletsoe8@mit.edu, 32329
10, Dorris, Watling, dwatling9@furl.net, 44987

----------------------------------------

TITLE: Collecting Shopify Authentication Parameters from User
DESCRIPTION: This snippet shows how to collect the required authentication parameters from the user via terminal input. It iterates through the expected parameters and prompts the user for each value.

LANGUAGE: python
CODE:
expected_params = response["expected_params"]
collected_params = {}

if len(expected_params) > 0:
    for param in expected_params:
        user_input = input(f"Enter the value for '{param.displayName}', Description: {param.description}:\n")
        collected_params[param.name] = user_input

print(collected_params)

LANGUAGE: javascript
CODE:
const collectedParams = {};

if (response["expectedInputFields"].length > 0) {
    for (const param of response["expectedInputFields"]) {
        const userInput = await new Promise(resolve => {
            process.stdout.write(`Enter the value for '${param.displayName}', Description: ${param.description}:\n`);
            process.stdin.once('data', data => {
                resolve(data.toString().trim());
            });
        });
        collectedParams[param.name] = userInput;
    }
}

console.log(collectedParams);

----------------------------------------

TITLE: Installing Composio and LlamaIndex Packages
DESCRIPTION: This snippet shows how to install the necessary packages for using Composio with LlamaIndex. It includes commands for both Python and TypeScript (coming soon).

LANGUAGE: bash
CODE:
pip install composio-llamaindex llama-index

LANGUAGE: typescript
CODE:
coming soon

----------------------------------------

TITLE: Connecting Gmail Account in Python
DESCRIPTION: Code to establish connection with Gmail using Composio's Python SDK and authenticate the user.

LANGUAGE: shell
CODE:
composio login 
composio add gmail -e "default"

LANGUAGE: python
CODE:
from composio_openai import ComposioToolSet, App, Trigger
toolset = ComposioToolSet(entity_id="default")

request = toolset.initiate_connection(app=App.GMAIL)

print(f"Open this URL to authenticate: {request.redirectUrl}")

----------------------------------------

TITLE: Enabling Triggers via CLI
DESCRIPTION: Enable and disable triggers using the Composio CLI.

LANGUAGE: bash
CODE:
# In CLI
composio triggers enable gmail_new_gmail_message
# trigger_name is the name of the trigger - gmail_new_gmail_message

## To disable a trigger
composio triggers disable <trigger_name>

----------------------------------------

TITLE: Discovering and Fetching Actions in JavaScript
DESCRIPTION: This snippet demonstrates how to find relevant actions for a specific use case and fetch the corresponding tools using Composio in JavaScript. It uses the ToolSet's methods to search for actions and retrieve tools asynchronously.

LANGUAGE: javascript
CODE:
// Find relevant actions for our task
const actionsEnums = await toolset.client.actions.findActionEnumsByUseCase({
    apps: ["github"],
    useCase: "star a repo, print octocat"
});

// Get the tools for these actions
const tools = await toolset.getTools({ actions: actionsEnums });

----------------------------------------

TITLE: Connecting SerpAPI Account using Composio CLI
DESCRIPTION: Uses Composio CLI commands to log in and add SerpAPI integration. This allows agents to use SerpAPI for web searches.

LANGUAGE: python
CODE:
%composio login
%composio add serpapi