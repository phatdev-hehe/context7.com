TITLE: Implementing PersistentStateComponent in Kotlin with SimplePersistentStateComponent
DESCRIPTION: Example of implementing a persistent state component in Kotlin using SimplePersistentStateComponent, which is parameterized by a subclass of BaseState. This approach provides property delegates for easy creation of properties with default values.

LANGUAGE: kotlin
CODE:
@Service
@State(...)
class MySettings : SimplePersistentStateComponent<MySettings.State>(State()) {
  class State : BaseState() {
    var value by string("default value")
  }
}

----------------------------------------

TITLE: Declaring Plugin Dependencies in Gradle (IntelliJ Platform Gradle Plugin 2.x)
DESCRIPTION: Demonstrates how to define dependencies on plugins using helper functions in the dependencies block of the build.gradle.kts file.

LANGUAGE: kotlin
CODE:
dependencies {
  intellijPlatform {
    bundledPlugin("<pluginId>")
    plugin("<nonBundledPluginId>:<version>")
  }
}

----------------------------------------

TITLE: Configuring Inspection Plugin in XML
DESCRIPTION: XML configuration for registering a local inspection as an extension point in the plugin.xml file

LANGUAGE: XML
CODE:
"<localInspection language=\"JAVA\" implementationClass=\"com.example.MyInspection\" />"

----------------------------------------

TITLE: Declaring IntelliJ Platform Extensions in plugin.xml
DESCRIPTION: Example showing how to declare extensions in plugin.xml to access extension points in both the IntelliJ Platform and custom plugins. Demonstrates using both interface and beanClass implementation approaches.

LANGUAGE: xml
CODE:
<!--
  Declare extensions to access extension points in the IntelliJ Platform.
  These extension points have been declared using "interface".
 -->
<extensions defaultExtensionNs="com.intellij">
  <appStarter
      implementation="com.example.MyAppStarter"/>
  <projectTemplatesFactory
      implementation="com.example.MyProjectTemplatesFactory"/>
</extensions>

<!--
  Declare extensions to access extension points in a custom plugin "another.plugin".
  The "myExtensionPoint" extension point has been declared using "beanClass"
  and exposes custom properties "key" and "implementationClass".
-->
<extensions defaultExtensionNs="another.plugin">
  <myExtensionPoint
      key="keyValue"
      implementationClass="com.example.MyExtensionPointImpl"/>
</extensions>

----------------------------------------

TITLE: Configuring Gradle for Integration Tests in IntelliJ Platform SDK
DESCRIPTION: This Kotlin code snippet shows how to configure Gradle for integration testing in an IntelliJ Platform SDK project. It sets up dependencies, defines test source roots, creates an integration test task, and configures necessary system properties.

LANGUAGE: kotlin
CODE:
dependencies {
  intellijPlatform {
    //...
    testFramework(TestFrameworkType.Starter)
  }

sourceSets {
  create("integrationTest") {
    compileClasspath += sourceSets.main.get().output
    runtimeClasspath += sourceSets.main.get().output
  }
}

val integrationTestImplementation by configurations.getting {
  extendsFrom(configurations.testImplementation.get())
}

dependencies {
  integrationTestImplementation("org.junit.jupiter:junit-jupiter:5.7.1")
  integrationTestImplementation("org.kodein.di:kodein-di-jvm:7.20.2")
  integrationTestImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.10.1")
}

val integrationTest = task<Test>("integrationTest") {
  val integrationTestSourceSet = sourceSets.getByName("integrationTest")
  testClassesDirs = integrationTestSourceSet.output.classesDirs
  classpath = integrationTestSourceSet.runtimeClasspath
  systemProperty("path.to.build.plugin", tasks.prepareSandbox.get().pluginDirectory.get().asFile)
  useJUnitPlatform()
  dependsOn(tasks.prepareSandbox)
}

----------------------------------------

TITLE: Converting PsiElement to All Possible UElement Types in Java
DESCRIPTION: Demonstrates how to convert a PsiElement to all possible UElement types in Java using UastFacade.

LANGUAGE: java
CODE:
UastFacade.INSTANCE.convertToAlternatives(element,
    new Class[]{UField.class, UParameter.class});

----------------------------------------

TITLE: Adding Global Document Change Listener in Java
DESCRIPTION: Illustrates how to add a listener for changes in all open documents using EditorFactory.

LANGUAGE: Java
CODE:
EditorFactory.getEventMulticaster().addDocumentListener()

----------------------------------------

TITLE: Executing a Write Action
DESCRIPTION: Example of using WriteAction.run() to perform a write operation safely under a write lock.

LANGUAGE: kotlin
CODE:
WriteAction.run<Throwable> {
  // write data
}

LANGUAGE: java
CODE:
WriteAction.run(() -> {
  // write data
});

----------------------------------------

TITLE: Defining Plugin Configuration in XML
DESCRIPTION: Example of a basic plugin.xml configuration file structure.

LANGUAGE: XML
CODE:
<idea-plugin>
  <id>com.example.myplugin</id>
  <name>My Plugin</name>
  <version>1.0.0</version>
  <vendor email="support@example.com" url="https://www.example.com">My Company</vendor>
  <description><![CDATA[
    This is a sample plugin description.
  ]]></description>
  <change-notes><![CDATA[
    Initial release of the plugin.
  ]]></change-notes>
  <!-- Add other elements like <depends>, <extensions>, <actions>, etc. -->
</idea-plugin>

----------------------------------------

TITLE: Declaring Extension Points in plugin.xml
DESCRIPTION: Example of declaring interface and bean extension points in the plugin.xml file. This allows other plugins to extend the functionality of the declaring plugin.

LANGUAGE: XML
CODE:
<idea-plugin>
  <id>my.plugin</id>

  <extensionPoints>
    <extensionPoint
        name="myExtensionPoint1"
        interface="com.example.MyInterface"/>

    <extensionPoint
        name="myExtensionPoint2"
        beanClass="com.example.MyBeanClass"/>
  </extensionPoints>

</idea-plugin>

----------------------------------------

TITLE: Visualizing Plugin Structure Without Dependencies in PlantUML
DESCRIPTION: This PlantUML diagram illustrates the directory structure of a plugin without dependencies, showing the placement of the plugin JAR file, classes, and configuration files.

LANGUAGE: plantuml
CODE:
@startuml

skinparam TitleFontName JetBrains Sans
skinparam TitleFontStyle plain
skinparam TitleFontSize 16
skinparam DefaultTextAlignment left

title
  <IDE directory>
  |_ plugins
    |_ sample.jar // (Plugin distribution) //
      |_ com
        |_ company
          |_ Sample.class // (Class "com.company.Sample") //
      |_ ...
      |_ META-INF
        |_ plugin.xml // (Plugin Configuration File) //
        |_ pluginIcon.svg // (Plugin Logo) //
        |_ pluginIcon_dark.svg // (Plugin Logo, dark variant) //
end title
@enduml

----------------------------------------

TITLE: Creating Basic Markdown Link Template
DESCRIPTION: Defines the basic text structure for a Markdown link template with TEXT and LINK variables.

LANGUAGE: text
CODE:
[$TEXT$]($LINK$)$END$

----------------------------------------

TITLE: Reference Completion Implementation in Java
DESCRIPTION: Implementation method for PsiReference.getVariants() to provide basic code completion functionality. Returns array of completion variants that can include strings, PsiElement instances, or LookupElement objects.

LANGUAGE: Java
CODE:
public Object[] getVariants() {
    // Walk up the tree similarly to resolve()
    // Use PsiScopeProcessor to collect declarations
    // Return array of strings, PsiElements, or LookupElements
}

----------------------------------------

TITLE: Action Registration XML Configuration
DESCRIPTION: Example XML configuration showing how to register actions and groups in plugin.xml, including keyboard shortcuts, icons, and menu placement.

LANGUAGE: XML
CODE:
<actions>
  <action
      id="VssIntegration.GarbageCollection"
      class="com.example.impl.CollectGarbage"
      text="Garbage Collector: Collect _Garbage"
      description="Run garbage collector"
      icon="icons/garbage.png">
    <override-text place="MainMenu" text="Collect _Garbage"/>
    <override-text place="EditorPopup" use-text-of-place="MainMenu"/>
    <synonym text="GC"/>
    <add-to-group
        group-id="ToolsMenu"
        relative-to-action="GenerateJavadoc"
        anchor="after"/>
    <keyboard-shortcut
        keymap="$default"
        first-keystroke="control alt G"
        second-keystroke="C"/>
  </action>
</actions>

----------------------------------------

TITLE: Simulating User Actions in IntelliJ Platform SDK Tests
DESCRIPTION: This snippet demonstrates various helper methods provided by the test framework to simulate common user actions in the IDE, such as typing, invoking code completion, and performing refactoring operations.

LANGUAGE: markdown
CODE:
* `type()` simulates the typing of a character or string into the in-memory editor.
* `performEditorAction()` simulates the execution of an action in the in-memory editor context.
* `complete()` simulates code completion invocation and returns the list of lookup elements displayed in the completion list (or `null` if the completion had no suggestions or one suggestion which was auto-inserted).
* `findUsages()` simulates the invocation of _Find Usages_ and returns the found usages.
* `findSingleIntention()` in combination with `launchAction()` simulate the invocation of an intention action or inspection quick fix with the specified name.
* `renameElementAtCaret()` or `rename()` simulate the execution of a rename refactoring.

----------------------------------------

TITLE: Implementing PersistentStateComponent in Kotlin with SerializablePersistentStateComponent
DESCRIPTION: Example of implementing a persistent state component in Kotlin using SerializablePersistentStateComponent, which is parameterized with an immutable state data class. This approach ensures atomic modification and thread safety.

LANGUAGE: kotlin
CODE:
@Service
@State(...)
class MySettings : SerializablePersistentStateComponent<MySettings.State>(State()) {

  var stringValue: String
    get() = state.stringValue
    set(value) {
      updateState {
        it.copy(stringValue = value)
      }
    }

  data class State (
    @JvmField val stringValue: String = "default value"
  )
}

----------------------------------------

TITLE: Creating Notifications using NotificationGroupManager (2020.3+)
DESCRIPTION: Shows how to create and display notifications using the registered notification group through NotificationGroupManager. Demonstrates creating error notifications for a specific project.

LANGUAGE: java
CODE:
public class MyNotifier {

  public static void notifyError(Project project, String content) {
    NotificationGroupManager.getInstance()
        .getNotificationGroup("Custom Notification Group")
        .createNotification(content, NotificationType.ERROR)
        .notify(project);
  }

}

----------------------------------------

TITLE: Java Light Service Implementation
DESCRIPTION: Examples of implementing application-level and project-level light services in Java using @Service annotation.

LANGUAGE: java
CODE:
@Service
public final class MyAppService {
  public void doSomething(String param) {
    // ...
  }
}

LANGUAGE: java
CODE:
@Service(Service.Level.PROJECT)
public final class MyProjectService {
  private final Project myProject;

  MyProjectService(Project project) {
    myProject = project;
  }

  public void doSomething(String param) {
    String projectName = myProject.getName();
    // ...
  }
}

----------------------------------------

TITLE: Subscribing to VFS Changes in Java
DESCRIPTION: This code snippet demonstrates how to implement a BulkFileListener and subscribe to VFS changes using the project message bus. It allows handling of virtual file system events.

LANGUAGE: Java
CODE:
project.getMessageBus().connect().subscribe(
    VirtualFileManager.VFS_CHANGES,
    new BulkFileListener() {
      @Override
      public void after(@NotNull List<? extends VFileEvent> events) {
        // handle the events
      }
    });

----------------------------------------

TITLE: Retrieving Stored Credentials in Java
DESCRIPTION: Example showing how to retrieve stored credentials using PasswordSafe API, including both full credentials object and password-only retrieval

LANGUAGE: java
CODE:
String key = null; // e.g. serverURL, accountID
CredentialAttributes attributes = createCredentialAttributes(key);
PasswordSafe passwordSafe = PasswordSafe.getInstance();

Credentials credentials = passwordSafe.get(attributes);
if (credentials != null) {
  String password = credentials.getPasswordAsString();
}

// or get password only
String password = passwordSafe.getPassword(attributes);

----------------------------------------

TITLE: Finding PSI Element at Offset
DESCRIPTION: Locates a leaf PSI element at the specified offset in a PSI file. Returns a lexer token that can be used with PsiTreeUtil.getParentOfType() to find elements of specific types.

LANGUAGE: Java
CODE:
PsiFile.findElementAt(offset)

----------------------------------------

TITLE: Implementing a Stub Index for Custom Language
DESCRIPTION: Java code demonstrating how to implement a stub index for a custom language. This example shows a string-based stub index for storing and retrieving property elements.

LANGUAGE: Java
CODE:
public class PropertyNameIndex extends StringStubIndexExtension<Property> {
    public static final StubIndexKey<String, Property> KEY = StubIndexKey.createIndexKey("myLanguage.property.name");

    @Override
    public int getVersion() {
        return 1;
    }

    @Override
    public @NotNull StubIndexKey<String, Property> getKey() {
        return KEY;
    }

    @Override
    public Collection<Property> get(@NotNull String key, @NotNull Project project, @NotNull GlobalSearchScope scope) {
        return StubIndex.getElements(KEY, key, project, scope, Property.class);
    }
}

----------------------------------------

TITLE: Implementing Basic DialogWrapper in Java
DESCRIPTION: Demonstrates the minimum implementation of a DialogWrapper subclass in Java, including constructor, title setting, and content creation.

LANGUAGE: java
CODE:
public class SampleDialogWrapper extends DialogWrapper {

  public SampleDialogWrapper() {
    super(true); // use current window as parent
    setTitle("Test DialogWrapper");
    init();
  }

  @Nullable
  @Override
  protected JComponent createCenterPanel() {
    JPanel dialogPanel = new JPanel(new BorderLayout());

    JLabel label = new JLabel("Testing");
    label.setPreferredSize(new Dimension(100, 100));
    dialogPanel.add(label, BorderLayout.CENTER);

    return dialogPanel;
  }
}

----------------------------------------

TITLE: Caching Heavy Computations with CachedValue in Java
DESCRIPTION: Demonstrates how to use CachedValue and CachedValueManager to cache results of expensive computations in PSI. This approach helps avoid repeated costly operations.

LANGUAGE: Java
CODE:
CachedValue<ResultType> cachedValue = CachedValuesManager.getCachedValue(element, () -> {
    ResultType result = /* expensive computation */;
    return CachedValueProvider.Result.create(result, element);
});

----------------------------------------

TITLE: Kotlin Light Service Implementation
DESCRIPTION: Examples of implementing application-level and project-level light services in Kotlin using @Service annotation.

LANGUAGE: kotlin
CODE:
@Service
class MyAppService {
  fun doSomething(param: String) {
    // ...
  }
}

LANGUAGE: kotlin
CODE:
@Service(Service.Level.PROJECT)
class MyProjectService(private val project: Project) {
  fun doSomething(param: String) {
    val projectName = project.name
    // ...
  }
}

----------------------------------------

TITLE: Declaring Plugin Dependencies in Gradle (Gradle IntelliJ Plugin 1.x)
DESCRIPTION: Shows how to add plugin dependencies to the intellij.plugins parameter in the build script using Kotlin and Groovy syntax.

LANGUAGE: kotlin
CODE:
intellij {
  plugins.set(listOf("com.example.another-plugin:1.0"))
}

LANGUAGE: groovy
CODE:
intellij {
  plugins = ['com.example.another-plugin:1.0']
}

----------------------------------------

TITLE: Test Framework Dependencies Notice
DESCRIPTION: Markdown snippet highlighting the requirement to explicitly declare test framework dependencies for IntelliJ Platform SDK version 2024.2 and later.

LANGUAGE: markdown
CODE:
> All required [test-framework dependencies](tools_intellij_platform_gradle_plugin_dependencies_extension.md#testing) must be declared explicitly.\n>\n{title=\"Configuring Test Frameworks (2024.2+)\"}

----------------------------------------

TITLE: Accessing Document from Virtual File in Java
DESCRIPTION: Illustrates methods to obtain a Document from a Virtual File, with options for cached or forced loading.

LANGUAGE: Java
CODE:
FileDocumentManager.getDocument()

LANGUAGE: Java
CODE:
FileDocumentManager.getCachedDocument()

----------------------------------------

TITLE: Retrieving Document from Action Context in Java
DESCRIPTION: Demonstrates how to obtain a Document instance from an AnActionEvent in the context of an Action.

LANGUAGE: Java
CODE:
AnActionEvent.getData(CommonDataKeys.EDITOR).getDocument()

----------------------------------------

TITLE: Implementing Quick Fix for Simple Language Properties
DESCRIPTION: Quick Fix implementation that creates missing properties in Simple language files when referenced from Java code. Includes property creation and navigation functionality.

LANGUAGE: Java
CODE:
public class SimpleCreatePropertyQuickFix implements LocalQuickFix {
  private final String key;

  public SimpleCreatePropertyQuickFix(String key) {
    this.key = key;
  }

  @Override
  public @IntentionName @NotNull String getName() {
    return "Create property";
  }

  @Override
  public @NotNull String getFamilyName() {
    return "Simple properties";
  }

  @Override
  public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) {
    createProperty(project, key);
  }

  private void createProperty(Project project, String key) {
    List<SimpleFile> files = SimpleUtil.findFiles(project);
    if (files.size() == 1) {
      createProperty(files.get(0), key);
    }
    else {
      PsiFile[] psiFiles = new PsiFile[files.size()];
      String[] fileNames = new String[files.size()];
      for (int i = 0; i < files.size(); i++) {
        psiFiles[i] = files.get(i);
        fileNames[i] = files.get(i).getName();
      }

      ChooseFileDialog.builder()
          .setTitle(SimpleSupportBundle.message("simple.choose.properties.file"))
          .setFiles(psiFiles)
          .setFileNames(fileNames)
          .setValidator(new ChooseFileDialog.FileValidator() {
            @Override
            public boolean isValid(@NotNull File file) {
              return file.getName().endsWith(".simple");
            }
          })
          .buildAndShow().onOk(file -> createProperty((SimpleFile) file, key));
    }
  }

  private void createProperty(SimpleFile file, String key) {
    if (WriteCommandAction.runWriteCommandAction(file.getProject(),
        () -> {
          PsiElement lastChild = file.getLastChild();
          if (lastChild != null && !lastChild.getText().equals("\n")) {
            file.add(SimpleElementFactory.createCRLF(file.getProject()));
          }
          file.add(SimpleElementFactory.createProperty(file.getProject(), key));
          return true;
        })) {
      FileEditorManager.getInstance(file.getProject()).openFile(file.getVirtualFile(), true);
    }
  }
}

----------------------------------------

TITLE: Implementing ConfigurationType in Java for IntelliJ Platform SDK
DESCRIPTION: This code snippet shows how to implement the ConfigurationType interface to define a custom run configuration type. It sets up the configuration's ID, name, description, and icon.

LANGUAGE: Java
CODE:
public class DemoRunConfigurationType implements ConfigurationType {
  @Override
  public @NotNull String getDisplayName() {
    return "Demo";
  }

  @Override
  public @NotNull String getConfigurationTypeDescription() {
    return "Demo run configuration type";
  }

  @Override
  public @NotNull Icon getIcon() {
    return AllIcons.General.Information;
  }

  @Override
  public @NotNull String getId() {
    return "DEMO_RUN_CONFIGURATION";
  }

  @Override
  public @NotNull ConfigurationFactory[] getConfigurationFactories() {
    return new ConfigurationFactory[]{new DemoConfigurationFactory(this)};
  }
}

----------------------------------------

TITLE: Dispatching Coroutine on EDT in Kotlin
DESCRIPTION: Example of dispatching a coroutine on the Event Dispatch Thread (EDT) using Kotlin coroutines. This code is currently wrapped in an implicit write intent lock by the execution system.

LANGUAGE: kotlin
CODE:
withContext(Dispatchers.EDT) {
  // ...
}

----------------------------------------

TITLE: Creating a Simple Integration Test for IntelliJ Platform SDK
DESCRIPTION: This Kotlin code snippet demonstrates how to create a basic integration test for an IntelliJ Platform SDK plugin. It starts the IDE, installs the plugin, and performs a shutdown without opening any project.

LANGUAGE: kotlin
CODE:
class PluginTest {
  @Test
  fun simpleTestWithoutProject() {
    Starter.newContext(
      testName = "testExample",
      TestCase(IdeProductProvider.IC, projectInfo = NoProject)
        .withVersion("2024.3")
    ).apply {
      val pathToPlugin = System.getProperty("path.to.build.plugin")
      PluginConfigurator(this).installPluginFromFolder(File(pathToPlugin))
    }.runIdeWithDriver().useDriverAndCloseIde {
    }
  }
}

----------------------------------------

TITLE: Implementing PersistentStateComponent in Java with Separate State Class
DESCRIPTION: Example of implementing PersistentStateComponent in Java using a separate state class. The state class instance is stored as a field in the PersistentStateComponent class.

LANGUAGE: java
CODE:
@Service
@State(...)
class MySettings implements PersistentStateComponent<MySettings.State> {

  static class State {
    public String value;
  }

  private State myState = new State();

  @Override
  public State getState() {
    return myState;
  }

  @Override
  public void loadState(State state) {
    myState = state;
  }
}

----------------------------------------

TITLE: Defining Custom Action Class in Java
DESCRIPTION: Basic structure of a custom action class extending AnAction, with placeholders for update() and actionPerformed() methods.

LANGUAGE: Java
CODE:
public class PopupDialogAction extends AnAction {

  @Override
  public void update(@NotNull AnActionEvent event) {
    // Using the event, evaluate the context,
    // and enable or disable the action.
  }

  @Override
  public void actionPerformed(@NotNull AnActionEvent event) {
    // Using the event, implement an action.
    // For example, create and show a dialog.
  }

  // Override getActionUpdateThread() when you target 2022.3 or later!

}

----------------------------------------

TITLE: Implementing Project-Level Listener
DESCRIPTION: Implementation of a project-level listener that receives tool window state changes.

LANGUAGE: java
CODE:
package myPlugin;

final class MyToolWindowListener implements ToolWindowManagerListener {
  private final Project project;

  MyToolWindowListener(Project project) {
    this.project = project;
  }

  @Override
  public void stateChanged(@NotNull ToolWindowManager toolWindowManager) {
    // handle the state change
  }
}

----------------------------------------

TITLE: Using JavaRecursiveElementVisitor to Find Local Variables in Java
DESCRIPTION: This snippet demonstrates how to use a JavaRecursiveElementVisitor to perform top-down navigation and find all local variable declarations in a Java file. It overrides the visitLocalVariable method to process each variable found.

LANGUAGE: Java
CODE:
file.accept(new JavaRecursiveElementVisitor() {
  @Override
  public void visitLocalVariable(@NotNull PsiLocalVariable variable) {
    super.visitLocalVariable(variable);
    System.out.println("Found a variable at offset " +
         variable.getTextRange().getStartOffset());
  }
});

----------------------------------------

TITLE: Defining Token Types for Properties Language
DESCRIPTION: Example of defining token types for the Properties language plugin. It shows how to create IElementType instances for custom token types.

LANGUAGE: Java
CODE:
// Token types for Properties language plugin
public interface PropertiesTokenTypes {
    IElementType KEY_CHARACTERS = new PropertiesElementType("KEY_CHARACTERS");
    IElementType VALUE_CHARACTERS = new PropertiesElementType("VALUE_CHARACTERS");
    IElementType END_OF_LINE_COMMENT = new PropertiesElementType("END_OF_LINE_COMMENT");
    // ... other token types
}

----------------------------------------

TITLE: Creating PSI File from Language Parser in Java
DESCRIPTION: Demonstrates how to create a PSI file using a language-specific parser definition.

LANGUAGE: Java
CODE:
LanguageParserDefinitions.INSTANCE
    .forLanguage(MyLanguage.INSTANCE)
    .createFile(fileViewProvider);

----------------------------------------

TITLE: Java Variable Assignment Using Postfix Completion
DESCRIPTION: Demonstrates how postfix completion works in Java by showing the transformation of a method chain into a variable assignment using the .var postfix template. The example shows how a Cart object's delivery cost calculation is assigned to a properly typed variable.

LANGUAGE: java
CODE:
void confirmOrder(Cart cart) {
  cart.getDeliveryType().getDeliveryCost()
}

LANGUAGE: java
CODE:
void confirmOrder(Cart cart) {
  cart.getDeliveryType().getDeliveryCost().var
}

LANGUAGE: java
CODE:
void confirmOrder(Cart cart) {
  Money deliveryCost = cart.getDeliveryType().getDeliveryCost();
}

----------------------------------------

TITLE: Implementing VFS Event Listener - IntelliJ Platform
DESCRIPTION: Example showing how to listen to Virtual File System events by implementing BulkFileListener or AsyncFileListener interfaces. Used to track file system changes across all open projects.

LANGUAGE: java
CODE:
BulkFileListener.subscribe(VirtualFileManager.VFS_CHANGES)

----------------------------------------

TITLE: Getting Content and Source Roots
DESCRIPTION: Demonstrates how to retrieve content and source roots for a given file or directory in a project.

LANGUAGE: Java
CODE:
VirtualFile moduleContentRoot = ProjectRootManager.getInstance(project)
    .getFileIndex().getContentRootForFile(virtualFileOrDirectory);
VirtualFile moduleSourceRoot = ProjectRootManager.getInstance(project)
    .getFileIndex().getSourceRootForFile(virtualFileOrDirectory);

----------------------------------------

TITLE: Basic Dependencies Configuration in Kotlin
DESCRIPTION: Example showing basic dependencies setup including Maven Central repository, IntelliJ IDEA Community target, Java plugin dependency, and test framework configuration.

LANGUAGE: kotlin
CODE:
import org.jetbrains.intellij.platform.gradle.TestFrameworkType

repositories {
  mavenCentral()

  intellijPlatform {
    defaultRepositories()
  }
}

dependencies {
  intellijPlatform {
    intellijIdeaCommunity("%ijPlatform%")

    bundledPlugin("com.intellij.java")

    testFramework(TestFrameworkType.Platform)
  }

  testImplementation("junit:junit:4.13.2")
  // other dependencies, e.g., 3rd-party libraries
}

----------------------------------------

TITLE: Implementing Quick Fix for String Reference Comparison
DESCRIPTION: Example of PSI modification showing how to apply a quick fix that replaces string reference comparison with equals() method call. The code demonstrates proper handling of PSI elements including creation, replacement and formatting.

LANGUAGE: Java
CODE:
private void applyFix(@NotNull Project project,\n    PsiElement element) {\n    PsiMethodCallExpression methodCall = (PsiMethodCallExpression) element;\n    IElementType operationSign = ((PsiBinaryExpression) methodCall.getParent())\n            .getOperationTokenType();\n    String equalsCall = (operationSign.equals(JavaTokenType.EQEQ)) ?\n            "equals" : "!equals";\n    PsiExpression leftSide = methodCall.getMethodExpression()\n            .getQualifierExpression();\n    PsiExpression rightSide = methodCall.getArgumentList()\n            .getExpressions()[0];\n    PsiElementFactory factory = JavaPsiFacade.getElementFactory(project);\n    String newText = leftSide.getText() + "." + equalsCall +\n            "(" + rightSide.getText() + ")";\n    PsiExpression newCall = factory.createExpressionFromText(newText,\n            element);\n    methodCall.getParent().replace(newCall);\n}

----------------------------------------

TITLE: Lookup Element Builder Configuration in Java
DESCRIPTION: Example of configuring a LookupElementBuilder to create custom completion items with various attributes like text, tail text, type text, icons, and insert handlers.

LANGUAGE: Java
CODE:
LookupElementBuilder.create("element")
    .withTailText("(param1, param2)")
    .withTypeText("ReturnType")
    .withIcon(icon)
    .withBoldness(true)
    .withInsertHandler(insertHandler)

----------------------------------------

TITLE: Registering File Type via Extension Point (2019.2+)
DESCRIPTION: Registration of a LanguageFileType implementation using the com.intellij.fileType extension point. Demonstrates various file association methods including extensions, filenames, patterns and hashbangs.

LANGUAGE: XML
CODE:
<extensions defaultExtensionNs="com.intellij">
    <fileType
        name="EXTENSION_NAME"
        implementationClass="com.example.MyFileType"
        fieldName="INSTANCE"
        language="MyLanguage"
        extensions="ext;ext2"
        fileNames="filename1;filename2"
        patterns="*.pattern;?.pattern"
        hashBangs="php;php5"/>
</extensions>

----------------------------------------

TITLE: Implementing SimpleTokenType for Simple Language Parser
DESCRIPTION: Defines a custom token type by extending IElementType for the Simple Language parser implementation. This class handles token type identification within the Simple Language context.

LANGUAGE: Java
CODE:
package org.intellij.sdk.language.psi;

import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.SimpleLanguage;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;

public class SimpleTokenType extends IElementType {
    public SimpleTokenType(@NotNull @NonNls String debugName) {
        super(debugName, SimpleLanguage.INSTANCE);
    }

    @Override
    public String toString() {
        return "SimpleTokenType." + super.toString();
    }
}

----------------------------------------

TITLE: Getting PSI Element from Action Event
DESCRIPTION: Retrieves the PSI element from an Action event context. If an editor is open and the element under caret is a reference, this returns the resolved reference.

LANGUAGE: Java
CODE:
AnActionEvent.getData(CommonDataKeys.PSI_ELEMENT)

----------------------------------------

TITLE: Basic Java Method References Example
DESCRIPTION: Demonstrates five different types of references in a simple Java method including class references (String, System), field reference (out), method reference (println), and parameter reference (message).

LANGUAGE: java
CODE:
public void hello(String message) {
  System.out.println(message);
}

----------------------------------------

TITLE: Action Localization Bundle Example
DESCRIPTION: Example XML configuration for action resource bundle registration and corresponding properties file format.

LANGUAGE: XML
CODE:
<resource-bundle>messages.BasicActionsBundle</resource-bundle>

<actions resource-bundle="messages.MyActionsBundle">
  <!-- actions using MyActionsBundle.properties -->
</actions>

----------------------------------------

TITLE: Implementing update() Method in Java
DESCRIPTION: Implementation of the update() method in the custom action class, demonstrating how to control the action's visibility and availability based on context.

LANGUAGE: Java
CODE:
@Override
public void update(@NotNull AnActionEvent event) {
  // Set the availability based on whether a project is open
  Project project = event.getProject();
  Presentation presentation = event.getPresentation();
  presentation.setEnabledAndVisible(project != null);
}

----------------------------------------

TITLE: Implementing RunConfiguration in Java for IntelliJ Platform SDK
DESCRIPTION: This code snippet shows the implementation of a custom RunConfiguration. It includes methods for getting and setting the script name, as well as creating a RunProfileState for execution.

LANGUAGE: Java
CODE:
public class DemoRunConfiguration extends RunConfigurationBase<DemoRunConfigurationOptions> {
  protected DemoRunConfiguration(@NotNull Project project, @NotNull ConfigurationFactory factory, String name) {
    super(project, factory, name);
  }

  @Override
  protected @NotNull DemoRunConfigurationOptions getOptions() {
    return (DemoRunConfigurationOptions) super.getOptions();
  }

  public String getScriptName() {
    return getOptions().getScriptName();
  }

  public void setScriptName(String scriptName) {
    getOptions().setScriptName(scriptName);
  }

  @Override
  public @NotNull SettingsEditor<? extends RunConfiguration> getConfigurationEditor() {
    return new DemoSettingsEditor();
  }

  @Override
  public @Nullable RunProfileState getState(@NotNull Executor executor, @NotNull ExecutionEnvironment environment) {
    return new CommandLineState(environment) {
      @Override
      protected @NotNull ProcessHandler startProcess() throws ExecutionException {
        GeneralCommandLine commandLine = new GeneralCommandLine(getScriptName());
        return ProcessHandlerFactory.getInstance().createColoredProcessHandler(commandLine);
      }
    };
  }
}

----------------------------------------

TITLE: Configuring Token in Gradle (1.x)
DESCRIPTION: Kotlin configuration for providing publishing token in Gradle IntelliJ Plugin 1.x.

LANGUAGE: kotlin
CODE:
tasks {
  publishPlugin {
    token = providers.gradleProperty("intellijPlatformPublishingToken")
  }
}

----------------------------------------

TITLE: Defining Simple Language Class in Java
DESCRIPTION: Creates a custom language class called SimpleLanguage by extending the Language class. It sets up a singleton instance and defines the language ID.

LANGUAGE: Java
CODE:
public class SimpleLanguage extends Language {
    public static final SimpleLanguage INSTANCE = new SimpleLanguage();

    private SimpleLanguage() {
        super("Simple");
    }
}

----------------------------------------

TITLE: Implementing SimpleAnnotator Class
DESCRIPTION: Defines the SimpleAnnotator class that extends Annotator to highlight and annotate Simple Language properties in Java strings.

LANGUAGE: java
CODE:
public class SimpleAnnotator implements Annotator {

  @Override
  public void annotate(@NotNull final PsiElement element, @NotNull AnnotationHolder holder) {
    if (element instanceof PsiLiteralExpression) {
      PsiLiteralExpression literalExpression = (PsiLiteralExpression) element;
      String value = literalExpression.getValue() instanceof String ? (String) literalExpression.getValue() : null;

      if (value != null && value.startsWith("simple:")) {
        Project project = element.getProject();
        String key = value.substring(7);
        List<SimpleProperty> properties = SimpleUtil.findProperties(project, key);
        if (properties.isEmpty()) {
          holder.newAnnotation(HighlightSeverity.ERROR, "Unresolved property")
              .range(element)
              .withFix(new CreatePropertyQuickFix(key))
              .create();
        } else {
          holder.newAnnotation(HighlightSeverity.INFORMATION, "Simple property")
              .range(element)
              .create();
        }
      }
    }
  }
}

----------------------------------------

TITLE: Complete Integration Test Example for IntelliJ Platform SDK
DESCRIPTION: This Kotlin code snippet provides a complete example of an integration test for IntelliJ Platform SDK. It includes custom exception handling, opening a GitHub project, installing the plugin, and waiting for background processes to complete.

LANGUAGE: kotlin
CODE:
class PluginTest {
  init {
    di = DI {
      extend(di)
      bindSingleton<CIServer>(overrides = true) {
        object : CIServer by NoCIServer {
          override fun reportTestFailure(
            testName: String,
            message: String,
            details: String,
            linkToLogs: String?
          ) {
            fail { "$testName fails: $message. \n$details" }
          }
        }
      }
    }
  }
  @Test
  fun simpleTest() {
    val result = Starter.newContext(
      "testExample",
      TestCase(
        IdeProductProvider.IC,
        GitHubProject.fromGithub(
          branchName = "master",
          repoRelativeUrl = "JetBrains/ij-perf-report-aggregator"
        )
      ).withVersion("2024.2")
    ).apply {
      val pathToPlugin = System.getProperty("path.to.build.plugin")
      PluginConfigurator(this).installPluginFromFolder(File(pathToPlugin))
    }.runIdeWithDriver().useDriverAndCloseIde {
      waitForIndicators(5.minutes)
    }
  }
}

----------------------------------------

TITLE: Implementing Backgroundable Task in Java
DESCRIPTION: Shows how to create and queue a background task with progress tracking and cancellation support in Java.

LANGUAGE: java
CODE:
new Task.Backgroundable(project, "Synchronizing data", true) {
  public void run(ProgressIndicator indicator) {
    // operation
  }
}
  .setCancelText("Stop loading")
  .queue();

----------------------------------------

TITLE: Registering a Disposable with Disposer in Java
DESCRIPTION: Demonstrates how to register a child Disposable with a parent using the Disposer API.

LANGUAGE: java
CODE:
Disposer.register(parentDisposable, childDisposable);

----------------------------------------

TITLE: Adding Document Change Listener in Java
DESCRIPTION: Shows how to add a listener for changes in a specific Document instance.

LANGUAGE: Java
CODE:
Document.addDocumentListener()

----------------------------------------

TITLE: Implementing Own References in PsiElement
DESCRIPTION: Example showing how to provide Own references in a PSI element by implementing getOwnReferences(). Used for references that are native to the language, such as Java variable references.

LANGUAGE: Java
CODE:
Collections.singletonList()

----------------------------------------

TITLE: Defining Custom Framework Class in Java
DESCRIPTION: Basic class definition extending FrameworkTypeEx to create a custom framework implementation.

LANGUAGE: java
CODE:
final class DemoFramework extends FrameworkTypeEx {
}

----------------------------------------

TITLE: Storing Credentials in Java
DESCRIPTION: Example demonstrating how to store credentials using PasswordSafe API, with the ability to remove stored credentials by passing null

LANGUAGE: java
CODE:
CredentialAttributes attributes = createCredentialAttributes(key);
Credentials credentials = new Credentials(username, password);
PasswordSafe.getInstance().set(attributes, credentials);

----------------------------------------

TITLE: Implementing Simple Lexer Adapter in Java
DESCRIPTION: Adapter class that bridges the JFlex-generated lexer with IntelliJ Platform's Lexer API by extending FlexAdapter.

LANGUAGE: Java
CODE:
package org.intellij.sdk.language;

import com.intellij.lexer.FlexAdapter;

import java.io.Reader;

public class SimpleLexerAdapter extends FlexAdapter {

  public SimpleLexerAdapter() {
    super(new SimpleLexer(null));
  }
}

----------------------------------------

TITLE: Implementing handleElementRename() for Custom References
DESCRIPTION: Example of implementing handleElementRename() for custom references in a language plugin. This method is called for all references to the renamed element.

LANGUAGE: Java
CODE:
handleElementRename()

----------------------------------------

TITLE: CLion Plugin Dependency Declaration - Modern Syntax (2020.3+)
DESCRIPTION: Demonstrates how to declare CLion plugin dependencies in plugin.xml and Gradle build scripts for versions 2020.3 and later.

LANGUAGE: XML
CODE:
<depends>com.intellij.clion</depends>

LANGUAGE: Kotlin
CODE:
intellij {
  plugins.set(listOf("com.intellij.clion"))
}

LANGUAGE: Groovy
CODE:
intellij {
  plugins = ['com.intellij.clion']
}

----------------------------------------

TITLE: Importing ProjectSettingsService Reference
DESCRIPTION: Code reference showing the import path for ProjectSettingsService class used for programmatically opening project settings.

LANGUAGE: java
CODE:
ProjectSettingsService - platform/lang-impl/src/com/intellij/openapi/roots/ui/configuration/ProjectSettingsService.java

----------------------------------------

TITLE: Implementing Custom TypedActionHandler in Java
DESCRIPTION: Java implementation of a custom TypedActionHandler that inserts a specific string at the beginning of the document for each keystroke event.

LANGUAGE: Java
CODE:
final class MyTypedHandler implements TypedActionHandler {
  @Override
  public void execute(@NotNull Editor editor,
                      char c,
                      @NotNull DataContext dataContext) {
    Document document = editor.getDocument();
    Project project = editor.getProject();
    Runnable runnable = () -> document.insertString(0, "editor_basics\n");
    WriteCommandAction.runWriteCommandAction(project, runnable);
  }
}

----------------------------------------

TITLE: Implementing Disposable Interface in Java
DESCRIPTION: Shows an example of implementing the Disposable interface in a class, including constructor and dispose method implementation.

LANGUAGE: java
CODE:
public class Foo<T> extends JBFoo implements Disposable {

  public Foo(@NotNull Project project,
             @NotNull String name,
             @Nullable FileEditor fileEditor,
             @NotNull Disposable parentDisposable) {
    this(project, name, fileEditor, InitParams.createParams(project),
        DetachedToolWindowManager.getInstance(project));
    Disposer.register(parentDisposable, this);
  }

  @Override
  public void dispose() {
    myFooManager.unregister(this);
    myDetachedToolWindowManager.unregister(myFileEditor);
    KeyboardFocusManager.getCurrentKeyboardFocusManager()
        .removePropertyChangeListener("focusOwner", myMyPropertyChangeListener);
    setToolContext(null);
  }
}

----------------------------------------

TITLE: Reading PsiFile in a Read Action
DESCRIPTION: Example of using ReadAction.compute() to read a PsiFile safely under a read lock.

LANGUAGE: kotlin
CODE:
val psiFile = ReadAction.compute<PsiFile, Throwable> {
  // read and return PsiFile
}

LANGUAGE: java
CODE:
PsiFile psiFile = ReadAction.compute(() -> {
  // read and return PsiFile
});

----------------------------------------

TITLE: Registering Actions in XML
DESCRIPTION: Example of registering an action in the plugin configuration.

LANGUAGE: XML
CODE:
<actions>
  <action
      id="com.example.myframeworksupport.MyAction"
      class="com.example.impl.MyAction"
      text="Do Action"
      description="Do something with the code"
      icon="AllIcons.Actions.GC">
    <add-to-group
        group-id="ToolsMenu"
        anchor="after"
        relative-to-action="GenerateJavadoc"/>
    <keyboard-shortcut
        keymap="$default"
        first-keystroke="control alt G"
        second-keystroke="C"/>
  </action>
</actions>

----------------------------------------

TITLE: Initializing Logger in Java
DESCRIPTION: Demonstrates how to initialize and use a Logger instance in a Java class for an IntelliJ Platform plugin.

LANGUAGE: java
CODE:
import com.intellij.openapi.diagnostic.Logger;

public class MyClass {
  private static final Logger LOG = Logger.getInstance(MyClass.class);

  public void someMethod() {
    LOG.info("someMethod() was called");
  }
}

----------------------------------------

TITLE: Adding Content Root and Source Root for Module in Kotlin
DESCRIPTION: This snippet shows how to add a content root and a source root to a module using the Workspace Model. It creates new ContentRootEntity and SourceRootEntity instances and adds them to the module.

LANGUAGE: kotlin
CODE:
val workspaceModel = WorkspaceModel.getInstance(project)
val virtualFileUrlManager = workspaceModel.getVirtualFileUrlManager()

val moduleEntity = workspaceModel.currentSnapshot
  .resolve(ModuleId(moduleName)) ?: ...
val contentRootUrl = virtualFileUrlManager
  .getOrCreateFromUrl("file://foo/bar")
val sourceRootUrl = virtualFileUrlManager
  .getOrCreateFromUrl("file://foo/bar/src")
workspaceModel.update("Adding source root") { builder ->
  val contentRootEntity = ContentRootEntity(contentRootUrl, emptyList(), moduleEntity.entitySource) {
    val sourceRootEntity =
      SourceRootEntity(
        sourceRootUrl,
        SourceRootTypeId("java-source"),
        moduleEntity.entitySource
      )
    this.sourceRoots = mutableListOf(sourceRootEntity)
  }
  builder.modifyModuleEntity(moduleEntity) {
    this.contentRoots = mutableListOf(contentRootEntity)
  }
}

----------------------------------------

TITLE: Visualizing Test Directory Structure with PlantUML
DESCRIPTION: PlantUML diagram showing the recommended directory structure for plugin tests, including main source, test source, and test data directories organized under the src folder.

LANGUAGE: plantuml
CODE:
@startuml

skinparam TitleFontName JetBrains Sans
skinparam TitleFontStyle plain
skinparam TitleFontSize 16
skinparam DefaultTextAlignment left

title
  src
  |_ main
    |_ java
    |_ resources
  |_ test
    |_ java
    |_ testData
end title
@enduml

----------------------------------------

TITLE: Implementing StartupActivity for Immediate Execution on EDT (Pre-2023.1)
DESCRIPTION: Example of implementing StartupActivity interface for immediate execution on EDT when a project is opened. This is registered in the com.intellij.postStartupActivity extension point.

LANGUAGE: java
CODE:
public class MyStartupActivity implements StartupActivity, DumbAware {
    @Override
    public void runActivity(@NotNull Project project) {
        // Your startup logic here
    }
}

----------------------------------------

TITLE: Implementing FileBasedIndexExtension in Java
DESCRIPTION: Skeleton for implementing a file-based index by extending FileBasedIndexExtension. It includes key methods like getIndexer(), getKeyDescriptor(), getValueExternalizer(), getInputFilter(), getName(), and getVersion().

LANGUAGE: Java
CODE:
public class MyIndex extends FileBasedIndexExtension<Key, Value> {
    @Override
    public DataIndexer<Key, Value, FileContent> getIndexer() {
        // Implementation
    }

    @Override
    public KeyDescriptor<Key> getKeyDescriptor() {
        // Implementation
    }

    @Override
    public DataExternalizer<Value> getValueExternalizer() {
        // Implementation
    }

    @Override
    public InputFilter getInputFilter() {
        // Implementation
    }

    @Override
    public String getName() {
        return "com.example.myplugin.indexing.MyIndex";
    }

    @Override
    public int getVersion() {
        // Implementation
    }
}

----------------------------------------

TITLE: Implementing PersistentStateComponent in Java as State Class
DESCRIPTION: Example of implementing PersistentStateComponent in Java where the component itself is the state class. The getState() method returns the component itself, and loadState() copies properties from the loaded state.

LANGUAGE: java
CODE:
@Service
@State(...)
class MySettings implements PersistentStateComponent<MySettings> {

  public String stateValue;

  @Override
  public MySettings getState() {
    return this;
  }

  @Override
  public void loadState(MySettings state) {
    XmlSerializerUtil.copyBean(state, this);
  }
}

----------------------------------------

TITLE: Implementing Background StartupActivity for Delayed Execution (2019.3+)
DESCRIPTION: Example of implementing StartupActivity.Background interface for execution with a 5-second delay in a background thread when a project is opened. This is registered in the com.intellij.backgroundPostStartupActivity extension point.

LANGUAGE: java
CODE:
public class MyBackgroundStartupActivity implements StartupActivity.Background {
    @Override
    public void runActivity(@NotNull Project project) {
        // Your background startup logic here
    }
}

----------------------------------------

TITLE: Retrieving Module Classpath in Java
DESCRIPTION: Demonstrates how to get the classpath (classes root of all dependencies) for a module using the OrderEnumerator class.

LANGUAGE: java
CODE:
VirtualFile[] roots = ModuleRootManager.getInstance(module).orderEntries().classes().getRoots();

----------------------------------------

TITLE: Declaring Dynamic Extension Points in XML
DESCRIPTION: Example of how to declare a custom extension point as dynamic in the plugin.xml file. This is required for extension points to be compatible with dynamic plugin loading.

LANGUAGE: XML
CODE:
<extensionPoint name="myExtensionPoint" interface="com.example.MyExtensionPoint" dynamic="true"/>

----------------------------------------

TITLE: Creating Unbound Document in Java
DESCRIPTION: Demonstrates how to create a new Document instance not bound to any file using EditorFactory.

LANGUAGE: Java
CODE:
EditorFactory.createDocument()

----------------------------------------

TITLE: Creating ModuleEntity in Kotlin (2024.3+)
DESCRIPTION: This snippet demonstrates how to create a new ModuleEntity using the Workspace Model in version 2024.3 and later. It includes checks for existing modules and uses LegacyBridgeJpsEntitySourceFactory to create the entity source.

LANGUAGE: kotlin
CODE:
import com.intellij.workspaceModel.ide.legacyBridge.LegacyBridgeJpsEntitySourceFactory
// ...

val workspaceModel = WorkspaceModel.getInstance(project)
val moduleId = ModuleId(moduleName)
if (moduleId in workspaceModel.currentSnapshot) {
  // Module with such `ModuleId` already exists
  ...
}

val baseModuleDir = workspaceModel.getVirtualFileUrlManager()
  .getOrCreateFromUrl("file://foo/bar")
val moduleEntitySource =
    LegacyBridgeJpsEntitySourceFactory.getInstance(project)
        .createEntitySourceForModule(baseModuleDir, null)
WorkspaceModel.getInstance(project).update("Add new module") { builder ->
  val moduleEntity =
      ModuleEntity(moduleName, emptyList(), moduleEntitySource)
  builder.addEntity(moduleEntity)
}

----------------------------------------

TITLE: Subscribing to Project Structure Changes
DESCRIPTION: Shows how to subscribe to notifications about project structure changes using message bus.

LANGUAGE: Java
CODE:
project.getMessageBus().connect().subscribe(
    ProjectTopics.PROJECT_ROOTS,
    new ModuleRootListener() {
      @Override
      public void rootsChanged(@NotNull ModuleRootEvent event) {
        // action
      }
    });

----------------------------------------

TITLE: Registering Simple Action Group in XML
DESCRIPTION: Demonstrates how to register a simple action group in the plugin.xml file, specifying its ID, text, popup attribute, and icon.

LANGUAGE: XML
CODE:
<group
    id="org.intellij.sdk.action.GroupedActions"
    text="Static Grouped Actions"
    popup="true"
    icon="SdkIcons.Sdk_default_icon"/>

----------------------------------------

TITLE: Getting Module Libraries - Java
DESCRIPTION: Retrieves a list of all module libraries defined in a given module using OrderEntryUtil.

LANGUAGE: java
CODE:
OrderEntryUtil.getModuleLibraries(ModuleRootManager.getInstance(module));

----------------------------------------

TITLE: Accessing FileBasedIndex in Java
DESCRIPTION: Example of accessing a file-based index using the FileBasedIndex class. It demonstrates methods like getAllKeys(), getValues(), getContainingFiles(), and processValues().

LANGUAGE: Java
CODE:
FileBasedIndex.getInstance().getAllKeys(MyIndex.NAME, project);
FileBasedIndex.getInstance().getValues(MyIndex.NAME, key, scope);
FileBasedIndex.getInstance().getContainingFiles(MyIndex.NAME, key, scope);
FileBasedIndex.getInstance().processValues(MyIndex.NAME, key, null, processor, scope);

----------------------------------------

TITLE: Replacing Selected Text in Java
DESCRIPTION: Demonstrates how to safely replace selected text in the editor using a WriteCommandAction. It retrieves the document, caret model, and selection information before performing the text replacement.

LANGUAGE: Java
CODE:
public class EditorIllustrationAction extends AnAction {
  @Override
  public void actionPerformed(@NotNull AnActionEvent event) {
    // Get all the required data from data keys
    Editor editor = event.getRequiredData(CommonDataKeys.EDITOR);
    Project project = event.getRequiredData(CommonDataKeys.PROJECT);
    Document document = editor.getDocument();

    // Work off of the primary caret to get the selection info
    Caret primaryCaret = editor.getCaretModel().getPrimaryCaret();
    int start = primaryCaret.getSelectionStart();
    int end = primaryCaret.getSelectionEnd();

    // Replace the selection with a fixed string.
    // Must do this document change in a write action context.
    WriteCommandAction.runWriteCommandAction(project, () ->
        document.replaceString(start, end, "editor_basics")
    );

    // De-select the text range that was just replaced
    primaryCaret.removeSelection();
  }
}

----------------------------------------

TITLE: Defining Custom Color Scheme Attributes in XML
DESCRIPTION: Demonstrates the structure of an XML file containing custom color scheme attributes for a language plugin. This file defines colors and styles for specific language elements.

LANGUAGE: xml
CODE:
<?xml version='1.0'?>
<list>
  <option name="MY_VAR">
    <value>
      <option name="FOREGROUND" value="660000"/>
    </value>
  </option>
  <option name="MY_SPECIAL_CHAR">
    <value>
      <option name="FOREGROUND" value="008000"/>
      <option name="BACKGROUND" value="e3fcff"/>
      <option name="FONT_TYPE" value="1"/>
    </value>
  </option>
</list>

----------------------------------------

TITLE: Converting PsiElement to UElement in Java
DESCRIPTION: Demonstrates how to convert a PsiElement to a UElement using UastContextKt in Java.

LANGUAGE: java
CODE:
UastContextKt.toUElement(element);

----------------------------------------

TITLE: Registering Module Builder in plugin.xml
DESCRIPTION: Register a new com.intellij.moduleBuilder extension point in the plugin.xml configuration file to define a custom module builder.

LANGUAGE: XML
CODE:
<extensions defaultExtensionNs="com.intellij">
  <moduleBuilder
      builderClass="org.intellij.sdk.project.wizard.DemoModuleWizardStep"
      id="DEMO_STEP"
      order="first"/>
</extensions>

----------------------------------------

TITLE: Defining Simple Language Lexer Rules in JFlex
DESCRIPTION: JFlex rules for tokenizing the Simple language, including package declaration, imports, and token definitions for various language elements.

LANGUAGE: Java
CODE:
// Content of Simple.flex file omitted for brevity

----------------------------------------

TITLE: Visualizing Run Configuration Architecture with PlantUML
DESCRIPTION: A PlantUML diagram showing the key run configurations classes and their relationships, including ConfigurationType, ConfigurationFactory, RunConfiguration, RunProfile, and SettingsEditor.

LANGUAGE: PlantUML
CODE:
@startuml

skinparam DefaultFontName JetBrains Sans
skinparam DefaultFontSize 14
hide empty members
hide circle

interface RunProfile
interface ConfigurationType
abstract class ConfigurationFactory
interface RunConfiguration
abstract class SettingsEditor


ConfigurationType *-- "*" ConfigurationFactory
ConfigurationFactory --> RunConfiguration: creates
RunConfiguration o-- "0..*" SettingsEditor
RunConfiguration -l|> RunProfile

@enduml

----------------------------------------

TITLE: Creating Credential Attributes in Java
DESCRIPTION: Utility method to create CredentialAttributes object with a generated service name for storing credentials

LANGUAGE: java
CODE:
private CredentialAttributes createCredentialAttributes(String key) {
  return new CredentialAttributes(
    CredentialAttributesKt.generateServiceName("MySystem", key)
  );
}

----------------------------------------

TITLE: Declaring Optional Plugin Dependency in plugin.xml
DESCRIPTION: Shows how to declare an optional plugin dependency in the plugin.xml file with additional attributes.

LANGUAGE: xml
CODE:
<depends
    optional="true"
    config-file="myPluginId-optionalPluginName.xml">dependency.plugin.id</depends>

----------------------------------------

TITLE: SDK Setup Validator in Kotlin
DESCRIPTION: Implementation of ProjectSdkSetupValidator to validate and notify users about missing SDK configuration

LANGUAGE: kotlin
CODE:
internal class DemoProjectSdkSetupValidator : ProjectSdkSetupValidator {
  override fun isApplicableFor(project: Project, file: VirtualFile): Boolean {
    return file.fileType == DemoFileType
  }

  override fun getErrorMessage(project: Project, file: VirtualFile): String? {
    if (ProjectJdkTable.getInstance().getSdksOfType(DemoSdkType.getInstance()).isEmpty()) {
      return "No DemoSdks are configured for this project!"
    }
    return null
  }

  override fun getFixHandler(project: Project, file: VirtualFile):
        EditorNotificationPanel.ActionHandler {
    return SdkPopupFactory.newBuilder()
        .withProject(project)
        .withSdkTypeFilter { it is DemoSdkType }
        .updateSdkForFile(file)
        .buildEditorNotificationPanelHandler()
  }
}

----------------------------------------

TITLE: Defining Application Listeners in XML
DESCRIPTION: Example of defining an application-level listener in the plugin configuration.

LANGUAGE: XML
CODE:
<applicationListeners>
  <listener
      topic="com.intellij.ide.AppLifecycleListener"
      class="com.example.MyListener"
      os="mac"
      activeInTestMode="false"/>
</applicationListeners>

----------------------------------------

TITLE: Converting PsiElement to Specific UElement Type in Kotlin
DESCRIPTION: Demonstrates converting a PsiElement to a specific UElement type (UCallExpression) in Kotlin.

LANGUAGE: kotlin
CODE:
element.toUElement(UCallExpression::class.java)

----------------------------------------

TITLE: Visualizing Plugin Structure With Dependencies in PlantUML
DESCRIPTION: This PlantUML diagram shows the directory structure of a plugin with dependencies, including the placement of the plugin JAR file, bundled libraries, and configuration files.

LANGUAGE: plantuml
CODE:
@startuml

skinparam TitleFontName JetBrains Sans
skinparam TitleFontStyle plain
skinparam TitleFontSize 16
skinparam DefaultTextAlignment left

title
  <IDE directory>
  |_ plugins
    |_ sample
      |_ lib
        |_ lib_foo.jar // (Required bundled library #1) //
        |_ lib_bar.jar // (Required bundled library #2) //
        |_ ...
        |_ sample.jar // (Plugin distribution) //
          |_ com
            |_ company
              |_ Sample.class // (Class "com.company.Sample") //
          |_ ...
          |_ META-INF
            |_ plugin.xml // (Plugin Configuration File) //
            |_ pluginIcon.svg // (Plugin Logo) //
            |_ pluginIcon_dark.svg // (Plugin Logo, dark variant) //
end title
@enduml

----------------------------------------

TITLE: Visualizing Plugin Structure With Dependencies in PlantUML
DESCRIPTION: This PlantUML diagram shows the directory structure of a plugin with dependencies, including the placement of the plugin JAR file, bundled libraries, and configuration files.

LANGUAGE: plantuml
CODE:
@startuml

skinparam TitleFontName JetBrains Sans
skinparam TitleFontStyle plain
skinparam TitleFontSize 16
skinparam DefaultTextAlignment left

title
  <IDE directory>
  |_ plugins
    |_ sample
      |_ lib
        |_ lib_foo.jar // (Required bundled library #1) //
        |_ lib_bar.jar // (Required bundled library #2) //
        |_ ...
        |_ sample.jar // (Plugin distribution) //
          |_ com
            |_ company
              |_ Sample.class // (Class "com.company.Sample") //
          |_ ...
          |_ META-INF
            |_ plugin.xml // (Plugin Configuration File) //
            |_ pluginIcon.svg // (Plugin Logo) //
            |_ pluginIcon_dark.svg // (Plugin Logo, dark variant) //
end title
@enduml

----------------------------------------

TITLE: Implementing AppSettingsConfigurable Class in Java
DESCRIPTION: Java implementation of the AppSettingsConfigurable class, which implements Configurable to handle interactions with the IntelliJ Platform.

LANGUAGE: Java
CODE:
public class AppSettingsConfigurable implements Configurable {

    private AppSettingsComponent mySettingsComponent;

    @Nls(capitalization = Nls.Capitalization.Title)
    @Override
    public String getDisplayName() {
        return "SDK: Application Settings Example";
    }

    @Override
    public JComponent getPreferredFocusedComponent() {
        return mySettingsComponent.getPreferredFocusedComponent();
    }

    @Nullable
    @Override
    public JComponent createComponent() {
        mySettingsComponent = new AppSettingsComponent();
        return mySettingsComponent.getPanel();
    }

    @Override
    public boolean isModified() {
        AppSettings settings = AppSettings.getInstance();
        boolean modified = !mySettingsComponent.getUserNameText().equals(settings.myState.userId);
        modified |= mySettingsComponent.getIdeaUserStatus() != settings.myState.ideaStatus;
        return modified;
    }

    @Override
    public void apply() throws ConfigurationException {
        AppSettings settings = AppSettings.getInstance();
        settings.myState.userId = mySettingsComponent.getUserNameText();
        settings.myState.ideaStatus = mySettingsComponent.getIdeaUserStatus();
    }

    @Override
    public void reset() {
        AppSettings settings = AppSettings.getInstance();
        mySettingsComponent.setUserNameText(settings.myState.userId);
        mySettingsComponent.setIdeaUserStatus(settings.myState.ideaStatus);
    }

    @Override
    public void disposeUIResources() {
        mySettingsComponent = null;
    }

}

----------------------------------------

TITLE: Service Registration in plugin.xml
DESCRIPTION: XML configuration for registering application-level and project-level services in the plugin.xml file.

LANGUAGE: xml
CODE:
<extensions defaultExtensionNs="com.intellij">
  <!-- Declare the application-level service -->
  <applicationService
          serviceInterface="com.example.MyAppService"
          serviceImplementation="com.example.MyAppServiceImpl"/>

  <!-- Declare the project-level service -->
  <projectService
          serviceInterface="com.example.MyProjectService"
          serviceImplementation="com.example.MyProjectServiceImpl"/>
</extensions>

----------------------------------------

TITLE: Subscribing to VFS Changes Programmatically
DESCRIPTION: Shows how to subscribe to Virtual File System changes using code-based listener registration.

LANGUAGE: java
CODE:
messageBus.connect().subscribe(VirtualFileManager.VFS_CHANGES,
    new BulkFileListener() {
      @Override
      public void after(@NotNull List<? extends VFileEvent> events) {
        // handle the events
      }
});

----------------------------------------

TITLE: Implementing StructureViewTreeElement for Custom Language
DESCRIPTION: Shows how to implement the StructureViewTreeElement interface to define the structure of the tree in the Structure View.

LANGUAGE: Java
CODE:
StructureViewTreeElement.getChildren()

----------------------------------------

TITLE: Text Field with Browse Button Implementation
DESCRIPTION: Creating a text field with browse button using TextFieldWithBrowseButton component. Supports file path entry with filename completion and integrated file chooser dialog.

LANGUAGE: Java
CODE:
TextFieldWithBrowseButton.addBrowseFolderListener()

----------------------------------------

TITLE: Subscribing to a Topic in Java
DESCRIPTION: Demonstrates how to subscribe to a Topic using the MessageBus. It creates a connection and subscribes to the ChangeActionNotifier topic with implemented callback methods.

LANGUAGE: java
CODE:
project.getMessageBus().connect().subscribe(
    ChangeActionNotifier.CHANGE_ACTION_TOPIC,
    new ChangeActionNotifier() {
        @Override
        public void beforeAction(Context context) {
          // Process 'before action' event.
        }
        @Override
        public void afterAction(Context context) {
          // Process 'after action' event.
        }
});

----------------------------------------

TITLE: Implementing MultiHostInjector for Complex DSL Injection
DESCRIPTION: Java implementation of MultiHostInjector to inject Java code into multiple fragments of an XML-based DSL.

LANGUAGE: Java
CODE:
final class MyDSLInjector implements MultiHostInjector {

  @Override
  public void getLanguagesToInject(@NotNull MultiHostRegistrar registrar,
                                   @NotNull PsiElement context) {
    if (context instanceof XmlText && isMethodTag(context)) {
      registrar.startInjecting(JavaLanguage.INSTANCE);

      // construct class header, method header,
      // inject method name, append code block start
      registrar.addPlace("class MyDsl { void ", "() {",
                         (PsiLanguageInjectionHost)context,
                         rangeForMethodName(context));

      // inject method body, append closing braces
      // to form a valid Java class structure
      registrar.addPlace(null, "}}", context, rangeForBody(context));
      registrar.doneInjecting();
    }
  }

  @Override
  public @NotNull List<? extends Class<? extends PsiElement>> elementsToInjectIn() {
    return List.of(XmlText.class);
  }
}

----------------------------------------

TITLE: Implementing RenameInputValidatorEx for YAML Keys
DESCRIPTION: Example of implementing RenameInputValidatorEx for validating YAML language keys. This extension allows for custom error messages when validation fails.

LANGUAGE: Java
CODE:
YamlKeyValueRenameInputValidator

----------------------------------------

TITLE: Defining SimpleBlock for Simple Language Formatter in Java
DESCRIPTION: Implementation of SimpleBlock class extending AbstractBlock to represent the formatting structure of a file as a tree of Block objects.

LANGUAGE: Java
CODE:
public class SimpleBlock extends AbstractBlock {
    private SpacingBuilder spacingBuilder;

    protected SimpleBlock(@NotNull ASTNode node, @Nullable Wrap wrap, @Nullable Alignment alignment,
                          SpacingBuilder spacingBuilder) {
        super(node, wrap, alignment);
        this.spacingBuilder = spacingBuilder;
    }

    @Override
    protected List<Block> buildChildren() {
        List<Block> blocks = new ArrayList<>();
        ASTNode child = myNode.getFirstChildNode();
        while (child != null) {
            if (child.getElementType() != TokenType.WHITE_SPACE) {
                Block block = new SimpleBlock(child, Wrap.createWrap(WrapType.NONE, false), Alignment.createAlignment(),
                        spacingBuilder);
                blocks.add(block);
            }
            child = child.getTreeNext();
        }
        return blocks;
    }

    @Override
    public Indent getIndent() {
        return Indent.getNoneIndent();
    }

    @Nullable
    @Override
    public Spacing getSpacing(@Nullable Block child1, @NotNull Block child2) {
        return spacingBuilder.getSpacing(this, child1, child2);
    }

    @Override
    public boolean isLeaf() {
        return myNode.getFirstChildNode() == null;
    }
}

----------------------------------------

TITLE: Enabling OK Button with Validation in Kotlin UI DSL
DESCRIPTION: This Kotlin UI DSL snippet demonstrates how to enable the OK button in a dialog while still showing an error message. This is useful for complex forms where the user should be allowed to proceed despite validation errors.

LANGUAGE: kotlin
CODE:
error("The host cannot be reached")
    .withOkEnabled()

----------------------------------------

TITLE: Applying Gradle IntelliJ Plugin in Kotlin
DESCRIPTION: Shows how to apply the Gradle IntelliJ Plugin in a Kotlin build script.

LANGUAGE: kotlin
CODE:
plugins {
  id("org.jetbrains.intellij") version "%gradle-intellij-plugin-version%"
}

----------------------------------------

TITLE: Declaring VFS Listener in XML
DESCRIPTION: Example of declarative registration for a Virtual File System listener using XML configuration.

LANGUAGE: xml
CODE:
<applicationListeners>
  <listener
      class="myPlugin.MyVfsListener"
      topic="com.intellij.openapi.vfs.newvfs.BulkFileListener"/>
</applicationListeners>

----------------------------------------

TITLE: Using EditorModificationUtil for Multi-caret Typing
DESCRIPTION: Demonstrates how to handle typed characters across multiple carets using EditorModificationUtil. This utility method allows inserting the same text at all caret positions while respecting their individual contexts.

LANGUAGE: java
CODE:
EditorModificationUtil.typeInStringAtCaretHonorMultipleCarets()

----------------------------------------

TITLE: Applying Additional Syntax Highlighting in Annotator (2020.1+)
DESCRIPTION: Shows how to apply additional syntax highlighting to a specific range of text using an Annotator in IntelliJ Platform 2020.1 and later versions.

LANGUAGE: Java
CODE:
holder.newSilentAnnotation(HighlightSeverity.INFORMATION)
    .range(rangeToHighlight)
    .textAttributes(MyHighlighter.EXTRA_HIGHLIGHT_ATTRIBUTE)
    .create();

----------------------------------------

TITLE: Setting Environment Variable for Publishing Token
DESCRIPTION: Bash command to set environment variable for Gradle plugin publishing token.

LANGUAGE: bash
CODE:
export ORG_GRADLE_PROJECT_intellijPlatformPublishingToken='YOUR_TOKEN'

----------------------------------------

TITLE: Implementing IStubElementType for Custom Language Element
DESCRIPTION: Java code example showing how to implement IStubElementType for a custom language element. This class handles creating PSI from stubs, creating stubs from PSI, and serializing/deserializing stub data.

LANGUAGE: Java
CODE:
public class PropertyStubElementType extends IStubElementType<PropertyStub, Property> {
    public PropertyStubElementType() {
        super("PROPERTY", PropertiesLanguage.INSTANCE);
    }

    @Override
    public Property createPsi(@NotNull PropertyStub stub) {
        return new PropertyImpl(stub);
    }

    @Override
    public PropertyStub createStub(@NotNull Property psi, StubElement parentStub) {
        return new PropertyStubImpl(parentStub, psi.getName());
    }

    @Override
    public void serialize(@NotNull PropertyStub stub, @NotNull StubOutputStream dataStream) throws IOException {
        dataStream.writeName(stub.getName());
    }

    @Override
    public @NotNull PropertyStub deserialize(@NotNull StubInputStream dataStream, StubElement parentStub) throws IOException {
        String name = dataStream.readName().toString();
        return new PropertyStubImpl(parentStub, name);
    }

    @Override
    public String getExternalId() {
        return "MyLanguage.PROPERTY";
    }
}

----------------------------------------

TITLE: Find Usages Extension Point Registration
DESCRIPTION: Custom language plugins need to register FindUsagesProvider implementation in the com.intellij.lang.findUsagesProvider extension point. The provider must implement methods for word scanning, usage verification, and element description.

LANGUAGE: markdown
CODE:
com.intellij.lang.findUsagesProvider

----------------------------------------

TITLE: Registering Module Type Extension in plugin.xml
DESCRIPTION: XML configuration to register a new module type extension with the IntelliJ Platform. Defines the module type ID and implementation class.

LANGUAGE: xml
CODE:
<extensions defaultExtensionNs="com.intellij">
  <moduleType
      id="DEMO_MODULE_TYPE"
      implementationClass="org.intellij.sdk.module.DemoModuleType"/>
</extensions>

----------------------------------------

TITLE: Setting Named Color with Fallback in Kotlin
DESCRIPTION: Demonstrates how to use JBColor.namedColor to set a color key with fallback values for light and dark themes in Kotlin.

LANGUAGE: kotlin
CODE:
val SELECTED_BACKGROUND_COLOR: Color =
    JBColor.namedColor(
        "CompletionPopup.selectionBackground",
        JBColor(0xc5dffc, 0x113a5c)
    )

----------------------------------------

TITLE: Using TrustedProjects.whenProjectTrusted() in Kotlin
DESCRIPTION: Demonstrates the use of a helper method to execute code when a project becomes trusted in Kotlin.

LANGUAGE: kotlin
CODE:
TrustedProjects.whenProjectTrusted()

----------------------------------------

TITLE: Initializing List Speed Search
DESCRIPTION: Adds keyboard-based item selection functionality to a list component. Allows quick navigation through list items by typing.

LANGUAGE: java
CODE:
new ListSpeedSearch(list)

----------------------------------------

TITLE: Subscribing to Module Change Notifications in Java
DESCRIPTION: Demonstrates how to receive notifications about module changes (additions, removals, or renames) using the message bus and ProjectTopics.MODULES topic.

LANGUAGE: java
CODE:
project.getMessageBus().connect().subscribe(
    ProjectTopics.MODULES,
    new ModuleListener() {
      @Override
      public void moduleAdded(@NotNull Project project, @NotNull Module module) {
        // action
      }
    });

----------------------------------------

TITLE: Defining a Topic for Change Action Notifications in Java
DESCRIPTION: Creates an interface with business methods and a Topic field bound to the interface for change action notifications. The Topic is annotated for project-level use.

LANGUAGE: java
CODE:
public interface ChangeActionNotifier {

  @Topic.ProjectLevel
  Topic<ChangeActionNotifier> CHANGE_ACTION_TOPIC =
      Topic.create("custom name", ChangeActionNotifier.class);

  void beforeAction(Context context);
  void afterAction(Context context);
}

----------------------------------------

TITLE: Obtaining LighterAST for Improved Indexing Performance
DESCRIPTION: Demonstrates how to obtain a LighterAST for more efficient parsing during indexing. This approach avoids creating memory-intensive AST nodes and can improve performance.

LANGUAGE: Java
CODE:
PsiDependentFileContent fileContent = (PsiDependentFileContent) inputData;
LighterAST lighterAst = fileContent.getLighterAST();
// Traverse lighterAst as needed

----------------------------------------

TITLE: Bottom-Up Navigation in PSI Tree for Java
DESCRIPTION: This code snippet shows how to perform bottom-up navigation in the PSI tree, starting from an element at a specific offset. It demonstrates finding the containing method and class of an element using PsiTreeUtil and specific navigation methods.

LANGUAGE: Java
CODE:
PsiFile psiFile = anActionEvent.getData(CommonDataKeys.PSI_FILE);
PsiElement element = psiFile.findElementAt(offset);
PsiMethod containingMethod = PsiTreeUtil.getParentOfType(element, PsiMethod.class);
PsiClass containingClass = containingMethod.getContainingClass();

----------------------------------------

TITLE: Registering PsiStructureViewFactory for Custom Language
DESCRIPTION: Example of how to register a PsiStructureViewFactory for a custom language plugin. This is the starting point for implementing a Structure View.

LANGUAGE: Java
CODE:
com.intellij.lang.psiStructureViewFactory

----------------------------------------

TITLE: Tool Window Registration Example in plugin.xml
DESCRIPTION: Declarative registration of a tool window using the com.intellij.toolWindow extension point in plugin.xml. Demonstrates setting basic attributes like id, icon, anchor position and factory class.

LANGUAGE: XML
CODE:
<extensions defaultExtensionNs="com.intellij">
    <toolWindow id="Sample Calendar"
                icon="/icons/calendar.svg"
                anchor="right"
                secondary="false"
                factoryClass="org.intellij.sdk.toolWindow.MyToolWindowFactory"
                canCloseContents="true"/>
</extensions>

----------------------------------------

TITLE: Referencing ComponentWithEmptyText Implementation in Markdown
DESCRIPTION: Markdown link to the ComponentWithEmptyText implementation file in the IntelliJ Platform SDK GitHub repository.

LANGUAGE: markdown
CODE:
[`ComponentWithEmptyText`](%gh-ic%/platform/platform-api/src/com/intellij/util/ui/ComponentWithEmptyText.java)

----------------------------------------

TITLE: Getting Project SDK in Java
DESCRIPTION: Retrieves the project SDK instance using ProjectRootManager

LANGUAGE: java
CODE:
Sdk projectSdk = ProjectRootManager.getInstance(project).getProjectSdk();

----------------------------------------

TITLE: Registering NotificationGroup in plugin.xml (2020.3+)
DESCRIPTION: Demonstrates how to register a custom notification group using the com.intellij.notificationGroup extension point in plugin.xml. This configuration allows creating balloon notifications with localized group display names.

LANGUAGE: xml
CODE:
<extensions defaultExtensionNs="com.intellij">
  <notificationGroup id="Custom Notification Group"
                     displayType="BALLOON"
                     key="notification.group.name"/>
</extensions>

----------------------------------------

TITLE: Finding Module for File in Java
DESCRIPTION: Shows how to determine the project module to which a specified file belongs using the ModuleUtil class.

LANGUAGE: java
CODE:
String pathToFile = "/Users/john/plugins/myPlugin/src/MyAction.java";
VirtualFile virtualFile = LocalFileSystem.getInstance().findFileByPath(pathToFile);
Module module = ModuleUtil.findModuleForFile(virtualFile, myProject);
String moduleName = module == null ? "Module not found" : module.getName();

----------------------------------------

TITLE: Publishing Messages to a Topic in Java
DESCRIPTION: Shows how to publish messages to a Topic. It retrieves the MessageBus, gets a publisher for the ChangeActionNotifier topic, and calls methods on the publisher to send notifications.

LANGUAGE: java
CODE:
public void doChange(Context context) {
  ChangeActionNotifier publisher = project.getMessageBus()
      .syncPublisher(ChangeActionNotifier.CHANGE_ACTION_TOPIC);
  publisher.beforeAction(context);
  try {
    // do action
  } finally {
    publisher.afterAction(context);
  }
}

----------------------------------------

TITLE: Generating Certificate Chain with OpenSSL
DESCRIPTION: Command to generate a certificate chain using the previously created private key.

LANGUAGE: bash
CODE:
openssl req\
  -key private.pem\
  -new\
  -x509\
  -days 365\
  -out chain.crt

----------------------------------------

TITLE: Implementing Simple File Type in Java
DESCRIPTION: Defines the SimpleFileType class by extending LanguageFileType. It specifies file type properties such as name, description, default extension, and icon.

LANGUAGE: Java
CODE:
public class SimpleFileType extends LanguageFileType {
    public static final SimpleFileType INSTANCE = new SimpleFileType();

    private SimpleFileType() {
        super(SimpleLanguage.INSTANCE);
    }

    @NotNull
    @Override
    public String getName() {
        return "Simple File";
    }

    @NotNull
    @Override
    public String getDescription() {
        return "Simple language file";
    }

    @NotNull
    @Override
    public String getDefaultExtension() {
        return "simple";
    }

    @Nullable
    @Override
    public Icon getIcon() {
        return SimpleIcons.FILE;
    }
}

----------------------------------------

TITLE: Implementing Structure View Element in Java
DESCRIPTION: Creates a StructureViewTreeElement implementation that represents individual elements in the structure view tree.

LANGUAGE: Java
CODE:
public class SimpleStructureViewElement implements StructureViewTreeElement, SortableTreeElement {
    private final PsiElement myElement;

    @Override
    public Object getValue() {
        return myElement;
    }

    @Override
    public @NotNull String getAlphaSortKey() {
        String name = myElement instanceof SimpleProperty ?
                ((SimpleProperty) myElement).getKey() :
                myElement.getText();
        return name;
    }

    // ... Additional implementation methods
}

----------------------------------------

TITLE: Using JBColor for Color-Aware UI in Java
DESCRIPTION: Demonstrates how to use JBColor instead of java.awt.Color for theme-aware color handling in IntelliJ Platform plugins. It also shows how to use lazy color retrieval for dynamic updates.

LANGUAGE: Java
CODE:
JBColor myColor = JBColor.namedColor("MyCustomColor", JBColor.RED);

JBColor lazyColor = JBColor.lazy(() -> retrieveColorFromSource());

----------------------------------------

TITLE: Implementing ConfigurationFactory in Java for IntelliJ Platform SDK
DESCRIPTION: This code snippet shows the implementation of a ConfigurationFactory for creating custom run configurations. It defines methods for creating new configurations and setting default options.

LANGUAGE: Java
CODE:
public class DemoConfigurationFactory extends ConfigurationFactory {
  protected DemoConfigurationFactory(ConfigurationType type) {
    super(type);
  }

  @Override
  public @NotNull String getId() {
    return "Demo";
  }

  @Override
  public @NotNull RunConfiguration createTemplateConfiguration(@NotNull Project project) {
    return new DemoRunConfiguration(project, this, "Demo");
  }

  @Override
  public @NotNull RunConfigurationSingletonPolicy getSingletonPolicy() {
    return RunConfigurationSingletonPolicy.SINGLE_INSTANCE_ONLY;
  }
}

----------------------------------------

TITLE: Searching Module by Name in Kotlin
DESCRIPTION: This snippet demonstrates how to search for a module by its name using the Workspace Model. It uses the ModuleId to resolve the module from the current snapshot of the entity storage.

LANGUAGE: kotlin
CODE:
val moduleId = ModuleId("moduleName")
val entityStorage: ImmutableEntityStorage =
  WorkspaceModel.getInstance(project).currentSnapshot
entityStorage.resolve(moduleId)

----------------------------------------

TITLE: Property Binding with Checkbox
DESCRIPTION: Shows how to bind UI components to properties using both direct property reference and getter/setter pairs.

LANGUAGE: kotlin
CODE:
checkBox("Show file extensions in editor tabs",
  { !uiSettings.hideKnownExtensionInTabs },
  { uiSettings.hideKnownExtensionInTabs = !it })

----------------------------------------

TITLE: Creating EditorTextField with Java Code Fragment
DESCRIPTION: This snippet demonstrates how to create an EditorTextField for entering a Java class or package name. It involves creating a code fragment, obtaining the corresponding document, and initializing the EditorTextField with the document.

LANGUAGE: java
CODE:
PsiFile psiFile = PsiDocumentManager.getInstance(project)
        .getPsiFile(editor.getDocument());
PsiElement element =
        psiFile.findElementAt(editor.getCaretModel().getOffset());

PsiExpressionCodeFragment code =
        JavaCodeFragmentFactory.getInstance(project)
        .createExpressionCodeFragment("", element, null, true);

Document document =
        PsiDocumentManager.getInstance(project).getDocument(code);

EditorTextField editorTextField =
        new EditorTextField(document, project, JavaFileType.INSTANCE);

----------------------------------------

TITLE: Declaring Plugin Dependency in plugin.xml
DESCRIPTION: Demonstrates how to declare a plugin dependency in the plugin.xml file using the <depends> tag.

LANGUAGE: xml
CODE:
<depends>com.example.another-plugin</depends>

----------------------------------------

TITLE: Generating TrustStore for Self-Signed Certificates
DESCRIPTION: Command to generate a TrustStore using keytool for self-signed certificates.

LANGUAGE: bash
CODE:
keytool -import -alias IdeaPlugin -file chain.crt -keystore pluginKeystore.jks -storepass changeit

----------------------------------------

TITLE: Vue Component Pattern Definition in JSON
DESCRIPTION: Example JSON configuration showing how to map domain-specific Vue components to HTML elements and define attribute patterns for component properties.

LANGUAGE: json
CODE:
{
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "Vue component",
          "pattern": {
            "items": "/html/vue-components"
          },
          "attributes": [
            {
              "name": "Component property",
              "pattern": {
                "or": [
                  {
                    "items": "props",
                    "priority": "highest"
                  }
                ]
              },
              "value": {
                "type": "of-match"
              }
            }
          ]
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Creating XML Attribute Value Pattern for FXML Files in JavaFX
DESCRIPTION: This snippet demonstrates how to create an XmlAttributeValuePattern that matches XML attribute values in .fxml files. It uses XmlPatterns and combines multiple conditions.

LANGUAGE: java
CODE:
XmlAttributeValuePattern attributeValueInFxml =
    XmlPatterns.xmlAttributeValue().inVirtualFile(
        virtualFile().withExtension(JavaFxFileTypeFactory.FXML_EXTENSION)
    );

----------------------------------------

TITLE: Configuring signPlugin Task in Gradle (Kotlin DSL)
DESCRIPTION: Example configuration for the signPlugin task in the Gradle build file using Kotlin DSL.

LANGUAGE: kotlin
CODE:
signPlugin {
  certificateChain.set("""
    -----BEGIN CERTIFICATE-----
    MIIElgCCAn4CCQDo83LWYj2QSTANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJQ
    ...
    gdZzxCN8t1EmH8kD2Yve6YKGFCRAIIzveEg=
    -----END CERTIFICATE-----
  """.trimIndent())

  privateKey.set("""
    -----BEGIN RSA PRIVATE KEY-----
    MIIJKgIBAAKCAgEAwU8awS22Rw902BmwVDDBMlTREX440BAAVM40NW3E0lJ7YTJG
    ...
    EnNBfIVFhh6khisKqTBWSEo5iS2RYJcuZs961riCn1LARztiaXL4l17oW8t+Qw==
    -----END RSA PRIVATE KEY-----
  """.trimIndent())

  password.set("8awS22%#3(4wVDDBMlTREX")
}

publishPlugin {
  token.set("perm:a961riC....l17oW8t+Qw==")
}

----------------------------------------

TITLE: Implementing Simple Language Syntax Highlighter in Java
DESCRIPTION: Implementation of SyntaxHighlighterBase that defines highlighting text attributes for the Simple Language. It specifies color schemes as dependencies on standard IntelliJ Platform keys.

LANGUAGE: java
CODE:
public class SimpleSyntaxHighlighter extends SyntaxHighlighterBase {
  public static final TextAttributesKey SEPARATOR = TextAttributesKey.createTextAttributesKey(
          "SIMPLE_SEPARATOR", DefaultLanguageHighlighterColors.OPERATION_SIGN);
  public static final TextAttributesKey KEY = TextAttributesKey.createTextAttributesKey(
          "SIMPLE_KEY", DefaultLanguageHighlighterColors.KEYWORD);
  public static final TextAttributesKey VALUE = TextAttributesKey.createTextAttributesKey(
          "SIMPLE_VALUE", DefaultLanguageHighlighterColors.STRING);
  // ... Class implementation
}

----------------------------------------

TITLE: Renaming Module in Kotlin
DESCRIPTION: This snippet shows how to rename a module using the Workspace Model. It resolves the module entity and updates its name within a write action.

LANGUAGE: kotlin
CODE:
val workspaceModel = WorkspaceModel.getInstance(project)
val moduleEntity: ModuleEntity =
  workspaceModel.currentSnapshot.resolve(ModuleId(moduleName))
writeAction {
  workspaceModel.update("Change module name") { builder ->
    builder.modifyModuleEntity(moduleEntity) {
      this.name = newModuleName
    }
  }
}

----------------------------------------

TITLE: Custom Component Integration
DESCRIPTION: Example of adding a custom password field component to a panel

LANGUAGE: kotlin
CODE:
val passwordField = JPasswordField()
row {
  cell(passwordField)
}

----------------------------------------

TITLE: Configuring Empty Text for JBList
DESCRIPTION: Sets custom text to be displayed when a JBList contains no items. This text appears in gray in the middle of the list box.

LANGUAGE: java
CODE:
getEmptyText().setText()

----------------------------------------

TITLE: Declaring Extension Points in XML
DESCRIPTION: Example of declaring an extension point in the plugin configuration.

LANGUAGE: XML
CODE:
<extensionPoints>
  <extensionPoint
      name="myExtension"
      beanClass="com.example.MyExtension">
    <with
        attribute="myClass"
        implements="com.example.ParentType"/>
    <with
        tag="someClass"
        implements="java.lang.Comparable"/>
  </extensionPoint>
</extensionPoints>

----------------------------------------

TITLE: Locating VirtualFileUrl in Kotlin
DESCRIPTION: Demonstrates how to find or create a VirtualFileUrl and search for entities with that path using the Workspace Model API.

LANGUAGE: kotlin
CODE:
val workspaceModel = WorkspaceModel.getInstance(project)
// Getting VirtualFileUrlManager
val virtualFileManager = workspaceModel.getVirtualFileUrlManager()
// Find or create VirtualFileUrl from the URL
val path = virtualFileManager.findByUrl("file:///foo/bar")
// Searching all entities with the path
workspaceModel.currentSnapshot.getVirtualFileUrlIndex()
  .findEntitiesByUrl(path)

----------------------------------------

TITLE: Registering Default PsiElementVisitor for Performance Optimization
DESCRIPTION: Custom language plugins with many inspections can register a default PsiElementVisitor for their language to optimize processing. This is done using the com.intellij.inspection.basicVisitor extension point.

LANGUAGE: XML
CODE:
<extension point="com.intellij.inspection.basicVisitor">
  <!-- Register default PsiElementVisitor here -->
</extension>

----------------------------------------

TITLE: Registering Application-Level Listener in XML
DESCRIPTION: Demonstrates how to declare an application-level listener in plugin.xml that subscribes to plugin events.

LANGUAGE: xml
CODE:
<idea-plugin>
  <applicationListeners>
    <listener
        class="myPlugin.MyListenerClass"
        topic="BaseListenerInterface"/>
  </applicationListeners>
</idea-plugin>

----------------------------------------

TITLE: Creating Line Marker Provider for Simple Language Properties
DESCRIPTION: Implementation of SimpleLineMarkerProvider that extends RelatedItemLineMarkerProvider to add gutter icons for Simple Language property occurrences in Java files and enable navigation to property definitions.

LANGUAGE: java
CODE:
public class SimpleLineMarkerProvider extends RelatedItemLineMarkerProvider {
    @Override
    protected void collectNavigationMarkers(@NotNull PsiElement element,
                                           @NotNull Collection<? super RelatedItemLineMarkerInfo<?>> result) {
        // Process only leaf elements
        if (!(element instanceof PsiIdentifier)) {
            return;
        }
        // Only process references to Simple language properties
        PsiElement parent = element.getParent();
        if (!(parent instanceof JsonPropertyName)) {
            return;
        }
        JsonProperty property = (JsonProperty) parent.getParent();
        String key = property.getName();
        if (key == null) {
            return;
        }
        // Find all Simple language properties with this key
        Project project = element.getProject();
        Collection<SimpleProperty> properties = SimpleUtil.findProperties(project, key);
        if (properties.isEmpty()) {
            return;
        }
        // Add navigation marker
        NavigationGutterIconBuilder<PsiElement> builder =
            NavigationGutterIconBuilder.create(SimpleIcons.FILE)
                .setTargets(properties)
                .setTooltipText("Navigate to Simple language property");
        result.add(builder.createLineMarkerInfo(element));
    }
}

----------------------------------------

TITLE: Registering Parser Definition in plugin.xml
DESCRIPTION: XML configuration to register the SimpleParserDefinition with the IntelliJ Platform using the com.intellij.lang.parserDefinition extension point.

LANGUAGE: XML
CODE:
<extensions defaultExtensionNs="com.intellij">
  <lang.parserDefinition
      language="Simple"
      implementationClass="org.intellij.sdk.language.SimpleParserDefinition"/>
</extensions>

----------------------------------------

TITLE: Accessing Project File Index
DESCRIPTION: Shows how to get a ProjectFileIndex instance to check file relationships within a project.

LANGUAGE: Java
CODE:
ProjectFileIndex projectFileIndex =
    ProjectRootManager.getInstance(project).getFileIndex();

----------------------------------------

TITLE: Displaying DialogWrapper on Button Click in Java
DESCRIPTION: Shows how to display a DialogWrapper instance when a button is clicked, and how to handle the user's response.

LANGUAGE: java
CODE:
JButton testButton = new JButton();
testButton.addActionListener(actionEvent -> {
  if (new SampleDialogWrapper().showAndGet()) {
    // user pressed OK
  }
});

----------------------------------------

TITLE: Implementing ProjectActivity for Post-Startup Tasks in Kotlin (IntelliJ 2023.1+)
DESCRIPTION: Example of implementing ProjectActivity interface to execute code when a project is opened. This approach uses Kotlin coroutines and is registered in the com.intellij.postStartupActivity extension point.

LANGUAGE: kotlin
CODE:
class MyProjectActivity : ProjectActivity {
    override suspend fun execute(project: Project) {
        // Your post-startup logic here
    }
}

----------------------------------------

TITLE: Implementing tearDown Method in Java Tests
DESCRIPTION: Shows how to properly implement tearDown method in Java test classes to avoid flaky tests and handle cleanup properly. Demonstrates calling super.tearDown() in finally block.

LANGUAGE: java
CODE:
protected void tearDown() throws Exception {
  try {
    // test specific tear down calls
  } catch (Exception e) {
    addSuppressedException(e);
  } finally {
    super.tearDown();
  }
}

----------------------------------------

TITLE: Implementing PSI Helper Methods in Java
DESCRIPTION: Defines utility methods for accessing key and value properties of SimpleProperty PSI elements. Includes handling of escaped spaces in property keys.

LANGUAGE: Java
CODE:
package org.intellij.sdk.language.psi.impl;

import com.intellij.lang.ASTNode;
import org.intellij.sdk.language.psi.SimpleProperty;
import org.intellij.sdk.language.psi.SimpleTypes;

public class SimplePsiImplUtil {

  public static String getKey(SimpleProperty element) {
    ASTNode keyNode = element.getNode().findChildByType(SimpleTypes.KEY);
    if (keyNode != null) {
      // IMPORTANT: Convert embedded escaped spaces to simple spaces
      return keyNode.getText().replaceAll("\\\\ ", " ");
    } else {
      return null;
    }
  }

  public static String getValue(SimpleProperty element) {
    ASTNode valueNode = element.getNode().findChildByType(SimpleTypes.VALUE);
    if (valueNode != null) {
      return valueNode.getText();
    } else {
      return null;
    }
  }

}

----------------------------------------

TITLE: Registering Color Settings Page in XML
DESCRIPTION: XML configuration to register the color settings page with the IntelliJ Platform using the colorSettingsPage extension point.

LANGUAGE: xml
CODE:
<extensions defaultExtensionNs="com.intellij">
  <colorSettingsPage
      implementation="org.intellij.sdk.language.SimpleColorSettingsPage"/>
</extensions>

----------------------------------------

TITLE: Reference Resolution Interface Implementation
DESCRIPTION: Example reference implementation showing minimum required interfaces for resolve functionality in a custom language. The class must implement PsiElement.getReference() and return a PsiReference implementation.

LANGUAGE: Java
CODE:
public class MyReference implements PsiReference {
    @Nullable
    @Override
    public PsiElement resolve() {
        // Return the element this reference points to
        // Return null if reference cannot be resolved
        return null;
    }
    
    @Override
    public boolean isReferenceTo(@NotNull PsiElement element) {
        // Compare if reference resolves to given element
        return resolve() == element;
    }
}

----------------------------------------

TITLE: Defining Simple Language File in Java
DESCRIPTION: Implementation of SimpleFile class representing the root PSI element for Simple language files, extending PsiFileBase.

LANGUAGE: Java
CODE:
package org.intellij.sdk.language.psi;

import com.intellij.extapi.psi.PsiFileBase;
import com.intellij.openapi.fileTypes.FileType;
import com.intellij.psi.FileViewProvider;
import org.intellij.sdk.language.SimpleFileType;
import org.intellij.sdk.language.SimpleLanguage;
import org.jetbrains.annotations.NotNull;

public class SimpleFile extends PsiFileBase {

  public SimpleFile(@NotNull FileViewProvider viewProvider) {
    super(viewProvider, SimpleLanguage.INSTANCE);
  }

  @NotNull
  @Override
  public FileType getFileType() {
    return SimpleFileType.INSTANCE;
  }

  @Override
  public String toString() {
    return "Simple File";
  }
}

----------------------------------------

TITLE: IntelliJ Platform Action Documentation
DESCRIPTION: Core documentation explaining how actions work in the IntelliJ Platform SDK. Actions are classes derived from AnAction that can be triggered through various user interface elements and shortcuts.

LANGUAGE: markdown
CODE:
<!-- Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->

# Actions

<link-summary>Introduction to actions allowing to invoke plugin functionalities.</link-summary>

The IntelliJ Platform provides the concept of _actions_.
An action is a class derived from [`AnAction`](%gh-ic%/platform/editor-ui-api/src/com/intellij/openapi/actionSystem/AnAction.java), whose `actionPerformed()` method is called when its menu item or toolbar button is selected.

----------------------------------------

TITLE: Checking File Belonging to Module Source Root in Java
DESCRIPTION: Shows how to check if a virtual file or directory belongs to a module source root using the ProjectFileIndex class.

LANGUAGE: java
CODE:
VirtualFile moduleSourceRoot = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(virtualFileOrDirectory);

----------------------------------------

TITLE: Implementing ProjectViewNodeDecorator in Java for IntelliJ Platform
DESCRIPTION: To modify project view node representations, implement the ProjectViewNodeDecorator interface and register it as a com.intellij.projectViewNodeDecorator extension. The decorate() method should be implemented to modify ProjectViewNode objects. Use ProjectView.refresh() to update node representations on specific events.

LANGUAGE: Java
CODE:
ProjectViewNodeDecorator

LANGUAGE: Java
CODE:
ProjectView.refresh()

----------------------------------------

TITLE: Implementing Symbol Presentation in SimplePsiImplUtil
DESCRIPTION: Helper method implementation for defining how PSI elements appear in the Navigate | Symbol popup window and Structure tool window.

LANGUAGE: Java
CODE:
public static ItemPresentation getPresentation(final SimpleProperty element) {
    return new ItemPresentation() {
        @Override
        public String getPresentableText() {
            return element.getKey();
        }

        @Override
        public Icon getIcon(boolean unused) {
            return AllIcons.Nodes.Property;
        }
    };
}

----------------------------------------

TITLE: Checking Object Validity Between Read Actions
DESCRIPTION: Example demonstrating how to check if a VirtualFile is still valid between two separate read actions.

LANGUAGE: kotlin
CODE:
val virtualFile = runReadAction { // read action 1
  // read a virtual file
}
// do other time-consuming work...
val psiFile = runReadAction { // read action 2
  if (virtualFile.isValid()) { // check if the virtual file is valid
    PsiManager.getInstance(project).findFile(virtualFile)
  } else null
}

LANGUAGE: java
CODE:
VirtualFile virtualFile = ReadAction.compute(() -> { // read action 1
  // read a virtual file
});
// do other time-consuming work...
PsiFile psiFile = ReadAction.compute(() -> { // read action 2
  if (virtualFile.isValid()) { // check if the virtual file is valid
    return PsiManager.getInstance(project).findFile(virtualFile);
  }
  return null;
});

----------------------------------------

TITLE: Implementing Custom Converter for PersistentStateComponent
DESCRIPTION: Example of implementing a custom Converter for persisting complex types like LocalDateTime. The converter is used in the @OptionTag or @Attribute annotation.

LANGUAGE: java
CODE:
class LocalDateTimeConverter extends Converter<LocalDateTime> {
  public LocalDateTime fromString(@NotNull String value) {
    long epochMilli = Long.parseLong(value);
    ZoneId zoneId = ZoneId.systemDefault();
    return Instant.ofEpochMilli(epochMilli)
        .atZone(zoneId)
        .toLocalDateTime();
  }

  public String toString(LocalDateTime value) {
    ZoneId zoneId = ZoneId.systemDefault();
    long toEpochMilli = value.atZone(zoneId)
        .toInstant()
        .toEpochMilli();
    return Long.toString(toEpochMilli);
  }
}

class State {
  @OptionTag(converter = LocalDateTimeConverter.class)
  public LocalDateTime dateTime;
}

----------------------------------------

TITLE: Adding External Link to Got It Tooltip in Kotlin and Java
DESCRIPTION: Shows how to add an external link to a Got It tooltip for both Kotlin and Java implementations.

LANGUAGE: kotlin
CODE:
GotItTooltip(TOOLTIP_ID, GOT_IT_TEXT, parentDisposable)
    .withBrowserLink("How to use", new URL("https://example.com"))

LANGUAGE: java
CODE:
new GotItTooltip(TOOLTIP_ID, GOT_IT_TEXT, parentDisposable)
    .withBrowserLink("How to use", new URL("https://example.com"));

----------------------------------------

TITLE: Creating Radio Button with HTML Formatted Label - Kotlin
DESCRIPTION: Implementation example showing how to create a radio button with a multi-line HTML formatted label using Kotlin UI DSL.

LANGUAGE: kotlin
CODE:
radioButton(
    "<html>Show options before adding<br>to version control</html>")

----------------------------------------

TITLE: Implementing SimpleElementType for Simple Language Parser
DESCRIPTION: Defines a custom element type by extending IElementType for the Simple Language parser implementation. This class handles PSI element type identification within the Simple Language context.

LANGUAGE: Java
CODE:
package org.intellij.sdk.language.psi;

import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.SimpleLanguage;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;

public class SimpleElementType extends IElementType {
    public SimpleElementType(@NotNull @NonNls String debugName) {
        super(debugName, SimpleLanguage.INSTANCE);
    }
}

----------------------------------------

TITLE: Defining Simple Language Icon in Java
DESCRIPTION: Creates a SimpleIcons class that loads and stores an icon for the Simple language file type.

LANGUAGE: Java
CODE:
public class SimpleIcons {
    public static final Icon FILE = IconLoader.getIcon("/icons/jar-gray.png", SimpleIcons.class);
}

----------------------------------------

TITLE: Setting Project SDK Attributes in Java
DESCRIPTION: Examples of getting and setting various SDK attributes like SDK name and instance

LANGUAGE: java
CODE:
String projectSdkName = ProjectRootManager.getInstance(project).getProjectSdkName();
ProjectRootManager.getInstance(project).setProjectSdk(sdk);
ProjectRootManager.getInstance(project).setProjectSdkName(name, sdk.getSdkType().getName());

----------------------------------------

TITLE: Defining Gradle Entity with Default and Computable Fields in Kotlin
DESCRIPTION: Example showing how to declare a WorkspaceEntity interface with default values, computable fields and a supporting data class.

LANGUAGE: kotlin
CODE:
interface GradleEntity : WorkspaceEntity {
  val test: String

  // Field with default value
  val version: Int
    @Default get() = 5
  val description: Description

  // Computable field
  val name: String
    get() = description.name
}

data class Description(
  val name: String,
  val valid: Boolean,
  val modifications: Int
)

----------------------------------------

TITLE: Custom Icon Replacement
DESCRIPTION: Demonstrates how to replace default icons with custom SVG icons

LANGUAGE: json
CODE:
{
  "icons": {
    "/actions/compile.svg": "/factory.svg"
  }
}

----------------------------------------

TITLE: Initializing Logger in Kotlin
DESCRIPTION: Shows how to initialize and use a Logger instance in a Kotlin class for an IntelliJ Platform plugin.

LANGUAGE: kotlin
CODE:
import com.intellij.openapi.diagnostic.logger

private val LOG = logger<MyClass>()

class MyClass {
  fun someMethod() {
    LOG.info("someMethod() was called")
  }
}

----------------------------------------

TITLE: Using Named Colors in Java Code
DESCRIPTION: Example of using JBColor.namedColor() to define color constants with light and dark theme defaults.

LANGUAGE: java
CODE:
private static final JBColor SECTION_HEADER_FOREGROUND =
    JBColor.namedColor(
      "Plugins.SectionHeader.foreground",
      new JBColor(0x787878,0x999999)
    );

----------------------------------------

TITLE: Enabling Inspections in Java Test
DESCRIPTION: Shows how to enable inspections before running a highlighting test in a Java test method.

LANGUAGE: Java
CODE:
CodeInsightTestFixture.enableInspections()

----------------------------------------

TITLE: Implementing Progress Bar in Java Swing
DESCRIPTION: This snippet shows how to implement a progress bar using the JProgressBar class from Java Swing. JProgressBar is the recommended implementation for progress bars in IntelliJ-based IDEs.

LANGUAGE: java
CODE:
JProgressBar

----------------------------------------

TITLE: Implementing FindUsagesProvider in Java
DESCRIPTION: Implementation of FindUsagesProvider interface for the Simple language. Uses DefaultWordsScanner for thread-safe word scanning and provides methods for finding usages of properties.

LANGUAGE: java
CODE:
public class SimpleFindUsagesProvider implements FindUsagesProvider {
    @Nullable
    @Override
    public WordsScanner getWordsScanner() {
        return new DefaultWordsScanner();
    }
}

----------------------------------------

TITLE: Registering Project-Level Listener
DESCRIPTION: Shows how to register a project-level listener for tool window events using XML configuration.

LANGUAGE: xml
CODE:
<idea-plugin>
  <projectListeners>
    <listener
        class="myPlugin.MyToolWindowListener"
        topic="com.intellij.openapi.wm.ex.ToolWindowManagerListener"/>
  </projectListeners>
</idea-plugin>

----------------------------------------

TITLE: Accessing Facets using FacetManager in Java
DESCRIPTION: This snippet demonstrates how to use FacetManager to create, search, and access the list of facets for a module in the IntelliJ Platform SDK.

LANGUAGE: java
CODE:
FacetManager

----------------------------------------

TITLE: Setting Up Multi-Module Project Test in Java
DESCRIPTION: Demonstrates how to configure a heavy test with multiple Java modules using TestFixtureBuilder. Shows creation of project fixture and module builders with configuration options.

LANGUAGE: java
CODE:
TestFixtureBuilder<IdeaProjectTestFixture> projectBuilder =
    IdeaTestFixtureFactory.getFixtureFactory().createFixtureBuilder(getName());

// fixture must be created before adding modules:
myFixture = JavaTestFixtureFactory.getFixtureFactory()
    .createCodeInsightFixture(projectBuilder.getFixture());

// add and configure modules:
JavaModuleFixtureBuilder<?> builder1 =
    projectBuilder.addModule(JavaModuleFixtureBuilder.class);
// optionally, configure the module, e.g.:
// builder1.setLanguageLevel(...);
// builder1.addJdk(...);

JavaModuleFixtureBuilder<?> builder2 =
    projectBuilder.addModule(JavaModuleFixtureBuilder.class);
// configure another module...

----------------------------------------

TITLE: Customizing VCS File Status Colors in XML
DESCRIPTION: This XML snippet demonstrates how to customize colors for different VCS file statuses in a custom editor color scheme.

LANGUAGE: xml
CODE:
<colors>
  <option name="FILESTATUS_ADDED" value="62cc47"/>
  <option name="FILESTATUS_COPIED" value="62cc47"/>
  <option name="FILESTATUS_DELETED" value="ed864a"/>
</colors>

----------------------------------------

TITLE: Configuring Gradle Build Script for WebStorm Plugin (IntelliJ Platform Gradle Plugin 2.x)
DESCRIPTION: Demonstrates the minimum setup required in build.gradle.kts for a WebStorm plugin project using the IntelliJ Platform Gradle Plugin 2.x. It includes repository configuration and dependencies for WebStorm and the JavaScript plugin.

LANGUAGE: kotlin
CODE:
repositories {
  mavenCentral()
  intellijPlatform {
    defaultRepositories()
  }
}

dependencies {
  intellijPlatform {
    webstorm("<versionNumber>")
    bundledPlugin("JavaScript")
  }
}

----------------------------------------

TITLE: Using XML Autocompletion for Extension Points in plugin.xml
DESCRIPTION: Demonstrates how to use autocompletion in the plugin.xml file to discover and implement extension points for IntelliJ Platform plugins.

LANGUAGE: XML
CODE:
<extensions defaultExtensionNs="com.intellij">
  <!-- Autocompletion will suggest possible extension points here -->
</extensions>

----------------------------------------

TITLE: Referencing JBEditorTabs Implementation in Kotlin
DESCRIPTION: This snippet demonstrates how to reference the JBEditorTabs class, which is used for creating tabs in code editors with extended functionality.

LANGUAGE: kotlin
CODE:
com.intellij.ui.tabs.impl.JBEditorTabs

----------------------------------------

TITLE: Implementing CompletionContributor for Simple Language in Java
DESCRIPTION: Defines a SimpleCompletionContributor class that adds 'Hello' to completion variants for Simple Language files. It extends CompletionContributor and uses fillCompletionVariants to add the completion item.

LANGUAGE: Java
CODE:
public class SimpleCompletionContributor extends CompletionContributor {
    public SimpleCompletionContributor() {
        extend(CompletionType.BASIC,
                PlatformPatterns.psiElement(SimpleTypes.VALUE).withLanguage(SimpleLanguage.INSTANCE),
                new CompletionProvider<>() {
                    public void addCompletions(@NotNull CompletionParameters parameters,
                                               @NotNull ProcessingContext context,
                                               @NotNull CompletionResultSet resultSet) {
                        resultSet.addElement(LookupElementBuilder.create("Hello"));
                    }
                }
        );
    }
}

----------------------------------------

TITLE: Using thisLogger() in Kotlin for Exception Logging
DESCRIPTION: Demonstrates how to use the thisLogger() convenience method for logging exceptions in Kotlin.

LANGUAGE: kotlin
CODE:
try {
  // some code
} catch (e: Throwable) {
  thisLogger().error("some code failed", e)
}

----------------------------------------

TITLE: Implementing TrailingCommaPostFormatProcessor in Kotlin
DESCRIPTION: Example of a post-format processor in Kotlin that inserts trailing commas in Kotlin files.

LANGUAGE: kotlin
CODE:
class TrailingCommaPostFormatProcessor : PostFormatProcessor {
    // Implementation details
}

----------------------------------------

TITLE: Converting PsiElement to All Possible UElement Types in Kotlin
DESCRIPTION: Shows the Kotlin syntax for converting a PsiElement to all possible UElement types using UastFacade.

LANGUAGE: kotlin
CODE:
UastFacade.convertToAlternatives(element,
    UField::class.java, UParameter::class.java)

----------------------------------------

TITLE: Registering DirectNavigationProvider in Java
DESCRIPTION: Implement and register DirectNavigationProvider in the com.intellij.lang.directNavigationProvider extension point for direct navigation from one PsiElement to another.

LANGUAGE: Java
CODE:
// Implement DirectNavigationProvider interface
public class MyDirectNavigationProvider implements DirectNavigationProvider {
    // Implementation details
}

// Register in plugin.xml
<extensions defaultExtensionNs="com.intellij">
    <lang.directNavigationProvider implementation="com.example.MyDirectNavigationProvider"/>
</extensions>

----------------------------------------

TITLE: Configuring Gradle Build Script for DataGrip Plugin (Gradle 2.x)
DESCRIPTION: Gradle build script configuration for DataGrip plugin development using the IntelliJ Platform Gradle Plugin 2.x. Includes required repository setup and dependencies for DataGrip and database plugin.

LANGUAGE: kotlin
CODE:
repositories {
  mavenCentral()
  intellijPlatform {
    defaultRepositories()
  }
}

dependencies {
  intellijPlatform {
    datagrip("<versionNumber>")
    bundledPlugin("com.intellij.database")
  }
}

----------------------------------------

TITLE: Using Extension Points in Another Plugin
DESCRIPTION: Example of how another plugin can use the extension points defined in the original plugin. This demonstrates declaring dependencies and implementing the extension points.

LANGUAGE: XML
CODE:
<idea-plugin>
  <id>another.plugin</id>

  <!-- Declare dependency on plugin defining extension point: -->
  <depends>my.plugin</depends>

  <!-- Use "my.plugin" namespace: -->
  <extensions defaultExtensionNs="my.plugin">
    <myExtensionPoint1
            key="someKey"
            implementationClass="com.example.MyImplementation"/>

    <myExtensionPoint2
            implementation="another.MyInterfaceImpl"/>
  </extension>

</idea-plugin>

----------------------------------------

TITLE: Implementing Project Structure Detector in Java
DESCRIPTION: Java code snippet demonstrating how to implement a ProjectStructureDetector to support module creation when importing projects from existing sources.

LANGUAGE: Java
CODE:
@Override
public void setupProjectStructure(@NotNull Collection<DetectedProjectRoot> roots,
                                @NotNull ProjectDescriptor projectDescriptor,
                                @NotNull ProjectFromSourcesBuilder builder) {
  List<ModuleDescriptor> modules = projectDescriptor.getModules();
  if (modules.isEmpty()) {
    modules = new ArrayList<>();
    for (DetectedProjectRoot root : roots) {
      modules.add(new ModuleDescriptor(root.getDirectory(),
          MyModuleType.getInstance(), ContainerUtil.emptyList()));
    }
    projectDescriptor.setModules(modules);
  }
}

----------------------------------------

TITLE: Referencing JBTable Implementation
DESCRIPTION: Link to the JBTable implementation class which is the main component for creating tables in IntelliJ Platform applications

LANGUAGE: markdown
CODE:
[`JBTable`](%gh-ic%/platform/platform-api/src/com/intellij/ui/table/JBTable.java)

----------------------------------------

TITLE: Adding Java Plugin Dependency in Gradle (Kotlin)
DESCRIPTION: Adds a dependency on the Java plugin in the Gradle build script using Kotlin DSL.

LANGUAGE: kotlin
CODE:
intellij {
  plugins.set(listOf("com.intellij.java"))
}

----------------------------------------

TITLE: Retrieving Status Bar Widget Instance in Kotlin
DESCRIPTION: This snippet demonstrates how to programmatically obtain a reference to a specific status bar widget instance using its unique ID.

LANGUAGE: kotlin
CODE:
val widget = WindowManager.getInstance().getStatusBar(project)
    .getWidget(MyWidget.ID) as MyWidget


----------------------------------------

TITLE: Implementing IntentionAction Interface for Custom Intentions
DESCRIPTION: Custom language intentions need to implement the IntentionAction interface and are registered using the com.intellij.intentionAction extension point.

LANGUAGE: Java
CODE:
public class MyCustomIntention implements IntentionAction {
  // Implement required methods
}

----------------------------------------

TITLE: Invoking Highlighting Test in Java
DESCRIPTION: Example of how to invoke a highlighting test using CodeInsightTestFixture in a Java test method.

LANGUAGE: Java
CODE:
CodeInsightTestFixture.checkHighlighting()

----------------------------------------

TITLE: Registering SurroundDescriptor Extension Point
DESCRIPTION: The plugin must register implementations of SurroundDescriptor interface in the com.intellij.lang.surroundDescriptor extension point. Each descriptor defines a type of code fragment that can be surrounded (e.g., expressions or statements) and contains an array of Surrounder objects for specific templates.



----------------------------------------

TITLE: Implementing JBSplitter Component
DESCRIPTION: JBSplitter is a custom split pane implementation that provides better UI consistency and automatic proportion remembering. Components are added using setFirstComponent() and setSecondComponent() methods.

LANGUAGE: Java
CODE:
setFirstComponent()
setSecondComponent()
setSplitterProportionKey()

----------------------------------------

TITLE: Applying IntelliJ Platform Gradle Plugin in Groovy
DESCRIPTION: Shows how to apply the IntelliJ Platform Gradle Plugin in a Groovy-based Gradle build file.

LANGUAGE: groovy
CODE:
plugins {
  id 'org.jetbrains.intellij.platform' version '%intellij-platform-gradle-plugin-version%'
}

----------------------------------------

TITLE: Implementing Module Builder in Java
DESCRIPTION: Java code snippet showing the required methods to implement when extending ModuleBuilder class. This includes setting up the root model and getting the module type.

LANGUAGE: Java
CODE:
public abstract void setupRootModel(
    ModifiableRootModel modifiableRootModel) throws ConfigurationException;

public abstract ModuleType getModuleType();

----------------------------------------

TITLE: Implementing Split Button Component in Kotlin
DESCRIPTION: Reference to JBOptionButton implementation class in IntelliJ Platform SDK that provides split button functionality.

LANGUAGE: xml
CODE:
JBOptionButton in com/intellij/ui/components/JBOptionButton.kt

----------------------------------------

TITLE: Adding Library Dependency to Module in Kotlin
DESCRIPTION: This snippet shows how to add a project-level library as a dependency to a module using the Workspace Model. It resolves the module entity and adds a new LibraryDependency to its dependencies.

LANGUAGE: kotlin
CODE:
val workspaceModel = WorkspaceModel.getInstance(project)
val moduleEntity = workspaceModel.currentSnapshot
  .resolve(ModuleId(moduleName)) ?: return
workspaceModel.update("Adding new module dependency") { builder ->
  builder.modifyModuleEntity(moduleEntity) {
    val libraryId = LibraryId(
      libraryName,
      LibraryTableId.ProjectLibraryTableId
    )
    this.dependencies.add(
      LibraryDependency(libraryId, false, DependencyScope.COMPILE)
    )
  }
}

----------------------------------------

TITLE: Validating Port Number Input in Kotlin UI DSL
DESCRIPTION: This snippet demonstrates how to validate a port number input field using Kotlin UI DSL. It checks if the entered value is within the valid range of 0 to 65535 and displays an error message if not.

LANGUAGE: kotlin
CODE:
val MESSAGE =
    "The port number must be between 0 and 65535";
textField()
  .validationOnInput {
    val portString = it.text
    if (portString.isNotEmpty()) {
      try {
        val portValue = portString.toInt()
        if (portValue < 0 || portValue > 65535) {
          error(MESSAGE)
        } else {
          null
        }
      } catch (_: NumberFormatException) {
        error(MESSAGE)
      }
    } else {
      null
    }
  }

----------------------------------------

TITLE: File Path Reference Example
DESCRIPTION: Example demonstrating how external references work with file paths in string literals within Java code.

LANGUAGE: Java
CODE:
new File("users.txt")

----------------------------------------

TITLE: Setting Placeholder Text in JBTextField
DESCRIPTION: Shows how to set placeholder text in a JBTextField component. This is used to provide hints or indicate optional fields.

LANGUAGE: java
CODE:
JBTextField.getEmptyText().setText(...)

----------------------------------------

TITLE: Implementing Parsing Test Case for Simple Language
DESCRIPTION: Java implementation of parsing test case that extends ParsingTestCase. Includes setup for test data paths and definition of test methods for parsing validation.

LANGUAGE: java
CODE:
package org.intellij.sdk.language;

import com.intellij.testFramework.ParsingTestCase;

public class SimpleParsingTest extends ParsingTestCase {

  public SimpleParsingTest() {
    super("parser", "simple");
  }

  public void testParsingTestData() {
    doTest(true);
  }

  /**
   * @return path to test data file directory relative to root of this module.
   */
  @Override
  protected String getTestDataPath() {
    return "src/test/testData";
  }

  @Override
  protected boolean skipSpaces() {
    return false;
  }

  @Override
  protected boolean includeRanges() {
    return true;
  }

}

----------------------------------------

TITLE: Resolving Entities by SymbolicEntityId in Kotlin
DESCRIPTION: Shows how to search for an entity using its SymbolicEntityId.

LANGUAGE: kotlin
CODE:
val moduleId = ModuleId("moduleName")
val entityStorage: ImmutableEntityStorage =
  WorkspaceModel.getInstance(project).currentSnapshot
entityStorage.resolve(moduleId)

----------------------------------------

TITLE: Basic Dependencies Configuration in Groovy
DESCRIPTION: Example showing basic dependencies setup in Groovy DSL including Maven Central repository, IntelliJ IDEA Community target, Java plugin dependency, and test framework configuration.

LANGUAGE: groovy
CODE:
import org.jetbrains.intellij.platform.gradle.TestFrameworkType

repositories {
  mavenCentral()

  intellijPlatform {
    defaultRepositories()
  }
}

dependencies {
  intellijPlatform {
    intellijIdeaCommunity '%ijPlatform%'

    bundledPlugin 'com.intellij.java'

    testFramework TestFrameworkType.Platform.INSTANCE
  }

  testImplementation 'junit:junit:4.13.2'
  // other dependencies, e.g., 3rd-party libraries
}

----------------------------------------

TITLE: Example Template File - After State
DESCRIPTION: Example showing how to format the after.java.template file that demonstrates the template state after expansion. Shows the final code with variable declaration.

LANGUAGE: Java
CODE:
List<Product> products = cart.getProducts();<spot></spot>

----------------------------------------

TITLE: ActionButton Implementation Reference
DESCRIPTION: Reference to the ActionButton class implementation in the IntelliJ Platform SDK, which handles icon button functionality in the platform's action system.

LANGUAGE: text
CODE:
ActionButton - platform/platform-impl/src/com/intellij/openapi/actionSystem/impl/ActionButton.java

----------------------------------------

TITLE: Implementing Incremental Computation with Kotlin Flow in Workspace Model
DESCRIPTION: Demonstrates how to set up incremental computation using Kotlin Flow to build and update an index based on Workspace Model events. The code shows handling both initial index building and subsequent updates.

LANGUAGE: kotlin
CODE:
workspaceModel.eventLog.collectIndexed { index, event ->
  if (index == 0) {
    buildIndex(event.storageAfter)
  } else {
    updateIndex(event)
  }
}

----------------------------------------

TITLE: Validating Port Number Input in Java
DESCRIPTION: This Java code snippet shows how to validate a port number input field using ComponentValidator. It checks if the entered value is within the valid range of 0 to 65535 and displays an error message if not.

LANGUAGE: java
CODE:
// Fields initializers
private JTextField myPort = new JTextField();
private static final String MESSAGE =
    "The port number must be between 0 and 65535";

// Components initialization
new ComponentValidator(parentDisposable).withValidator(() -> {
  String pt = myPort.getText();
  if (StringUtil.isNotEmpty(pt)) {
    try {
      int portValue = Integer.parseInt(pt);
      if (portValue >= 0 && portValue <= 65535) {
        return null;
      } else {
        return new ValidationInfo(MESSAGE, myPort);
      }
    } catch (NumberFormatException nfe) {
      return new ValidationInfo(MESSAGE, myPort);
    }
  } else {
    return null;
  }
}).installOn(myPort);
myPort.getDocument().addDocumentListener(new DocumentAdapter() {
  @Override
  protected void textChanged(@NotNull DocumentEvent e) {
    ComponentValidator.getInstance(myPort)
        .ifPresent(v -> v.revalidate());
  }
});

----------------------------------------

TITLE: Implementing RenameHandler for Resource Bundles
DESCRIPTION: Example of implementing RenameHandler for renaming a resource bundle in the Properties language plugin. This allows for complete customization of the rename UI and workflow.

LANGUAGE: Java
CODE:
ResourceBundleFromEditorRenameHandler

----------------------------------------

TITLE: Adding Loader to ExpandableTextField in Java
DESCRIPTION: Demonstrates how to add a loader icon as an extension to an ExpandableTextField component. This is used for showing a loader inside a text field.

LANGUAGE: java
CODE:
ExpandableTextField textField = new ExpandableTextField();
textField.addExtension(
  Extension.create(new AnimatedIcon.Default(), null, null)
);

----------------------------------------

TITLE: Theme Plugin Sample Note
DESCRIPTION: Reference to the Theme Basics sample project in IntelliJ SDK Code Samples repository, demonstrating a complete theme implementation example.

LANGUAGE: markdown
CODE:
> To see a full example theme project, see the [Theme Basics](%gh-sdk-samples-master%/theme_basics) in IntelliJ SDK Code Samples.
>
{title="Theme Plugin Sample" style="note"}

----------------------------------------

TITLE: Finding Entities by VirtualFileUrl in Kotlin
DESCRIPTION: Demonstrates how to use the VirtualFileUrl index to quickly find entities referring to a particular VirtualFileUrl.

LANGUAGE: kotlin
CODE:
val currentSnapshot: ImmutableEntityStorage =
  WorkspaceModel.getInstance(project).currentSnapshot
// Searching all entities with the given path
currentSnapshot.getVirtualFileUrlIndex()
  .findEntitiesByUrl(virtualFileUrl)

----------------------------------------

TITLE: Applying IntelliJ Platform Gradle Plugin in Kotlin
DESCRIPTION: Demonstrates how to apply the IntelliJ Platform Gradle Plugin in a Kotlin-based Gradle build file.

LANGUAGE: kotlin
CODE:
plugins {
  id("org.jetbrains.intellij.platform") version "%intellij-platform-gradle-plugin-version%"
}

----------------------------------------

TITLE: Template Key Placeholder Example
DESCRIPTION: Example showing usage of $key placeholder in template files which gets replaced with the actual template key like 'var' in the UI preview.

LANGUAGE: Java
CODE:
cart.getProducts()$key

----------------------------------------

TITLE: Setting Busy State for JBList
DESCRIPTION: Enables a busy icon indicator in the top right corner of the list box to show background operation status.

LANGUAGE: java
CODE:
setPaintBusy()

----------------------------------------

TITLE: Registering Additional Text Attributes in plugin.xml
DESCRIPTION: Shows how to register additional text attributes for specific color schemes in the plugin.xml file using the com.intellij.additionalTextAttributes extension point.

LANGUAGE: xml
CODE:
<extensions defaultExtensionNs="com.intellij">
  ...
  <additionalTextAttributes
      scheme="Default"
      file="colorSchemes/MyLangDefault.xml"/>
  ...
</extensions>

----------------------------------------

TITLE: Implementing TreeBasedStructureViewBuilder for Custom Language
DESCRIPTION: Shows how to implement a TreeBasedStructureViewBuilder to reuse the IntelliJ Platform's default Structure View implementation while customizing it for a specific language.

LANGUAGE: Java
CODE:
PsiStructureViewFactory.getStructureViewBuilder()

----------------------------------------

TITLE: Creating Radio Button with HTML Formatted Label - Java
DESCRIPTION: Implementation example showing how to create a radio button with a multi-line HTML formatted label using Java.

LANGUAGE: java
CODE:
new JRadioButton(
    "<html>Show options before adding<br>to version control</html>");

----------------------------------------

TITLE: Executing JavaScript in JCEF Browser from Java
DESCRIPTION: Demonstrates how to execute JavaScript code in the embedded JCEF browser from Java plugin code.

LANGUAGE: java
CODE:
browser.getCefBrowser().executeJavaScript(
    "alert('Hello World!')",
    url, lineNumber
);

----------------------------------------

TITLE: Getting Library Content - Java
DESCRIPTION: Retrieves and displays source roots and classes included in a library using Library.getUrls().

LANGUAGE: java
CODE:
StringBuilder roots = new StringBuilder("The " + lib.getName() + " library includes:\n");
roots.append("Sources:\n");
for (String each : lib.getUrls(OrderRootType.SOURCES)) {
  roots.append(each).append("\n");
}
roots.append("Classes:\n");
for (String each : lib.getUrls(OrderRootType.CLASSES)) {
  roots.append(each).append("\n");
}
Messages.showInfoMessage(roots.toString(), "Library Info");

----------------------------------------

TITLE: Configuring Snapshot Repository in Kotlin
DESCRIPTION: Demonstrates how to configure the snapshot repository for the IntelliJ Platform Gradle Plugin in a Kotlin-based Gradle settings file.

LANGUAGE: kotlin
CODE:
pluginManagement {
  repositories {
    maven("https://oss.sonatype.org/content/repositories/snapshots/")
    gradlePluginPortal()
  }
}

----------------------------------------

TITLE: Creating Settings Link in HTML
DESCRIPTION: HTML markup for adding a settings link in the inspection description

LANGUAGE: HTML
CODE:
"See <em>Includes</em> tab in <a href=\"settings://fileTemplates\">Settings | Editor | File and Code Templates</a> to configure."

----------------------------------------

TITLE: Custom SDK Path Setup in Java
DESCRIPTION: Implementation of setupSdkPaths() method for making SDK settings persistent

LANGUAGE: java
CODE:
@Override
public boolean setupSdkPaths(@NotNull Sdk sdk, @NotNull SdkModel sdkModel) {
  SdkModificator modificator = sdk.getSdkModificator();
  modificator.setVersionString(getVersionString(sdk));
  modificator.commitChanges(); // save
  return true;
}

----------------------------------------

TITLE: Configuring Specific Build Compatibility in plugin.xml
DESCRIPTION: Example showing how to specify compatibility starting from a specific build number (2021.3.3) in the idea-version element.

LANGUAGE: xml
CODE:
<!-- 2021.3.3 or later -->
<idea-version since-build="213.7172.25"/>

----------------------------------------

TITLE: Surrounder Implementation Process
DESCRIPTION: When the Surround With action is invoked, the IDE queries surround descriptors until finding one that returns non-empty elements. It then checks each surrounder's applicability and executes the selected template using surroundElements() method.



----------------------------------------

TITLE: Registering BooleanOptionDescription for Toggle Button in XML
DESCRIPTION: Register a SearchTopHitProvider implementation in plugin.xml to create a toggle button for system or editor settings.

LANGUAGE: XML
CODE:
<search.topHitProvider implementation="fq.class.name"/>

----------------------------------------

TITLE: Modifying JVM Arguments for runIde Task in Groovy
DESCRIPTION: This snippet demonstrates how to add JVM arguments to the runIde task using Groovy DSL in Gradle. It shows how to set a custom system property.

LANGUAGE: groovy
CODE:
runIde {
  jvmArgs "-DmyProperty=value"
}

----------------------------------------

TITLE: Implementing JavaScript to Java Communication in JCEF
DESCRIPTION: Shows how to set up a mechanism for executing Java plugin code from JavaScript in the embedded JCEF browser.

LANGUAGE: java
CODE:
JBCefJSQuery openLinkQuery = JBCefJSQuery.create(browser); // 1
openLinkQuery.addHandler((link) -> { // 2
    if (LinkUtil.isExternal(link)) {
      BrowserUtil.browse(link);
    } else {
      EditorUtil.openFileInEditor(link);
    }
    return null; // 3
});

browser.getCefBrowser().executeJavaScript( // 4
    "window.openLink = function(link) {" +
      openLinkQuery.inject("link") + // 5
      "};",
    browser.getCefBrowser().getURL(), 0
);

browser.getCefBrowser().executeJavaScript( // 6
    """
    document.addEventListener('click', function (e) {
      const link = e.target.closest('a').href;
      if (link) {
        window.openLink(link);
      }
    });""",
    browser.getCefBrowser().getURL(), 0
);

----------------------------------------

TITLE: Configuring Dependency Resolution Management in Kotlin
DESCRIPTION: Demonstrates how to configure dependency resolution management for IntelliJ Platform SDK artifacts in a Kotlin-based Gradle settings file.

LANGUAGE: kotlin
CODE:
import org.jetbrains.intellij.platform.gradle.extensions.intellijPlatform

plugins {
  id("org.jetbrains.intellij.platform.settings") version "%intellij-platform-gradle-plugin-version%"
}

dependencyResolutionManagement {
  repositoriesMode = RepositoriesMode.FAIL_ON_PROJECT_REPOS

  repositories {
    mavenCentral()

    intellijPlatform {
      defaultRepositories()
    }
  }
}

----------------------------------------

TITLE: Configuring Maven Repositories in Gradle (Groovy)
DESCRIPTION: Groovy DSL configuration for adding JetBrains Maven repositories to a Gradle build script, including both release repository and intellij-dependencies repository.

LANGUAGE: groovy
CODE:
repositories {
  maven { url "https://www.jetbrains.com/intellij-repository/releases" }
  maven { url "https://cache-redirector.jetbrains.com/intellij-dependencies" }
}

----------------------------------------

TITLE: Tree-based File Chooser Implementation
DESCRIPTION: Using TreeFileChooserFactory to create a dual-tab file selection interface with project structure and file navigation options. Suitable for scenarios where typing file names is the primary selection method.

LANGUAGE: Java
CODE:
TreeFileChooserFactory.createFileChooser().showDialog()

----------------------------------------

TITLE: Tree-based File Chooser Implementation
DESCRIPTION: Using TreeFileChooserFactory to create a dual-tab file selection interface with project structure and file navigation options. Suitable for scenarios where typing file names is the primary selection method.

LANGUAGE: Java
CODE:
TreeFileChooserFactory.createFileChooser().showDialog()

----------------------------------------

TITLE: Accessing Module Content Roots in Java
DESCRIPTION: Demonstrates how to access the content roots of a module using the ModuleRootManager class.

LANGUAGE: java
CODE:
VirtualFile[] contentRoots = ModuleRootManager.getInstance(module).getContentRoots();

----------------------------------------

TITLE: Implementing NamesValidator for Properties Language
DESCRIPTION: Example of implementing NamesValidator for the Properties language plugin. This interface is used to validate if a name is a valid identifier according to custom language rules.

LANGUAGE: Java
CODE:
PropertiesNamesValidator

----------------------------------------

TITLE: Highlighting Relevant Identifiers in Annotator (2024.1+)
DESCRIPTION: Demonstrates the recommended approach for highlighting relevant identifiers in an Annotator implementation for IntelliJ Platform 2024.1 and later, focusing on individual PSI elements for better performance.

LANGUAGE: Java
CODE:
annotate(PsiIdentifier) {
  <<highlight this identifier if it's relevant>>
}

----------------------------------------

TITLE: Implementing Table Cell Validation in Kotlin
DESCRIPTION: This Kotlin code snippet shows how to implement validation for a table cell editor. It adds a red outline to the cell if it contains a dot character, demonstrating real-time validation as the user types.

LANGUAGE: kotlin
CODE:
val cellEditor = JTextField()
cellEditor.putClientProperty(DarculaUIUtil.COMPACT_PROPERTY, true)
cellEditor.document.addDocumentListener(object : DocumentAdapter() {
  override fun textChanged(e: DocumentEvent) {
    val outline =
      if (cellEditor.text.contains(".")) "error" else null
    cellEditor.putClientProperty("JComponent.outline", outline)
  }
})
val firstColumn = table.columnModel.getColumn(0)
firstColumn.cellEditor = DefaultCellEditor(cellEditor)
firstColumn.cellRenderer = object : DefaultTableCellRenderer() {
  override fun getPreferredSize(): Dimension {
    val size = super.preferredSize
    val editorSize = cellEditor.preferredSize
    size.height = max(size.height, editorSize.height)
    return size
  }
}

----------------------------------------

TITLE: Registering VCS Integration Plugin in plugin.xml
DESCRIPTION: XML configuration for registering a custom VCS implementation with the IntelliJ Platform. Defines the VCS name and implementation class in the com.intellij.vcs extension point.

LANGUAGE: xml
CODE:
<idea-plugin>
  ...
  <extensions defaultExtensionNs="com.intellij">
    <vcs name="svn" vcsClass="org.jetbrains.idea.svn.SvnVcs"/>
  </extensions>
</idea-plugin>

----------------------------------------

TITLE: Defining SimpleSpellcheckingStrategy in Java
DESCRIPTION: Implements a custom SpellcheckingStrategy for the Simple language, extending the base SpellcheckingStrategy class. It defines how different elements of the Simple language should be tokenized for spell checking.

LANGUAGE: Java
CODE:
public class SimpleSpellcheckingStrategy extends SpellcheckingStrategy {
    @Override
    public @NotNull Tokenizer getTokenizer(PsiElement element) {
        if (element instanceof PsiLiteralExpression) {
            return TEXT_TOKENIZER;
        }
        return EMPTY_TOKENIZER;
    }
}

----------------------------------------

TITLE: Parametrizing IntelliJ Platform Dependency in Groovy
DESCRIPTION: Shows how to parametrize the IntelliJ Platform dependency using Gradle properties in a Groovy-based Gradle build file.

LANGUAGE: groovy
CODE:
dependencies {
  intellijPlatform {
    def type = providers.gradleProperty('platformType')
    def version = providers.gradleProperty('platformVersion')

    create(type, version)
  }
}

----------------------------------------

TITLE: Declaring IntelliJ Platform Dependencies (Groovy)
DESCRIPTION: Groovy DSL configuration for declaring specific IntelliJ Platform module dependencies in a Gradle build script, showing how to specify version and module coordinates.

LANGUAGE: groovy
CODE:
dependencies {
  implementation "com.jetbrains.intellij.platform:jps-model-serialization:182.2949.4"
  implementation "com.jetbrains.intellij.platform:jps-model-impl:182.2949.4"
}

----------------------------------------

TITLE: Adding Header to Got It Tooltip in Kotlin and Java
DESCRIPTION: Demonstrates how to add a header to a Got It tooltip using the GotItTooltip class in both Kotlin and Java.

LANGUAGE: kotlin
CODE:
GotItTooltip(TOOLTIP_ID, GET_IT_TEXT, parentDisposable)
    .withHeader("The reader mode is on")

LANGUAGE: java
CODE:
new GotItTooltip(TOOLTIP_ID, GET_IT_TEXT, parentDisposable)
    .withHeader("The reader mode is on");

----------------------------------------

TITLE: Retrieving Module Dependencies in Java
DESCRIPTION: Demonstrates how to get a list of modules that a specific module directly depends on, using both Module objects and module names.

LANGUAGE: java
CODE:
ModuleRootManager moduleRootManager = ModuleRootManager.getInstance(module);
Module[] dependentModules = moduleRootManager.getDependencies();
String[] dependentModulesNames = moduleRootManager.getDependencyModuleNames();

----------------------------------------

TITLE: Implementing Navigation Item Processing Methods
DESCRIPTION: Required method implementations for ChooseByNameContributorEx interface to enable navigation functionality. These methods handle processing names within a search scope and processing navigation items for a given name.

LANGUAGE: Java
CODE:
processNames(@NotNull Processor<? super String> processor, @NotNull GlobalSearchScope scope, @Nullable IdFilter filter)

LANGUAGE: Java
CODE:
processElementsWithName(String name, Processor<? super NavigationItem> processor, FindSymbolParameters parameters)

----------------------------------------

TITLE: Checking Stimulus Context in Kotlin
DESCRIPTION: Example of how to check for the presence of a specific Web Symbols context using the WebSymbolsContext.get() method.

LANGUAGE: Kotlin
CODE:
WebSymbolsContext.get("stimulus-context", psiElement) == "true"

----------------------------------------

TITLE: Defining HTML Table for Date and Time Formatting Examples
DESCRIPTION: HTML table structure demonstrating various date and time formatting examples for IntelliJ Platform UI, including guidelines for different scenarios.

LANGUAGE: html
CODE:
<table>
<tr>
<td width="20%"></td>
<td width="25%"> Examples </td>
<td width="55%"> When and how to use </td></tr>
<tr>
    <td>Date</td>
    <td>
        <p>Today</p>
        <p>05 Jan</p>
        <p>05 Jan 2017</p>
    </td>
    <td>
        <p>Omit the time for events if the exact time does not matter, e.g., Annotate panel.</p>
        <p>Use <i>Today</i> and <i>Yesterday</i> for the last two days, use exact date for all other days.</p>
        <p>Do <b>not</b> show the year if it's within the current calendar year.</p>
    </td>
</tr>
<tr>
    <td>Date and time</td>
    <td>
        <p>Today, 14:04</p>
        <p>05 Jan, 14:04</p>
        <p>05 Jan 2019, 14:04</p>
    </td>
    <td>When it is important to know the exact sequence of actions, e.g., Version Control Log.</td>
</tr>
<tr>
    <td>Time</td>
    <td>22:49</td>
    <td>Omit date if the event happened today and it's clear from the context.</td>
</tr>
<tr>
    <td>Date and day of week</td>
    <td>Tuesday, 30 August</td>
    <td>
        <p>Use as headers in timelines, e.g., Event Log. The day of the week helps to quickly understand how long ago was the event.</p>
        <p>Use <i>Today</i> and <i>Yesterday</i> for the last two days, use exact date for all other days.</p>
    </td>
</tr>
<tr>
    <td>Approximate time</td>
   <td>
       <p>A moment ago</p>
       <p>10 minutes ago</p>
       <p>2 hours ago</p>
    </td>
    <td><p>Use for a single event that happened recently, e.g., in the Status bar:</p>
        <p><img src="approximate.png" width="215" /></p>
        <p>Do <b>not</b> use in tables as it's harder to compare.</p>
        <p>If more than 12 hours have passed since the event, use Date format.</p>
    </td>
</tr>
</table>

----------------------------------------

TITLE: Executing Command for Document Modification in Java
DESCRIPTION: Demonstrates wrapping document modification operations in a command using CommandProcessor.

LANGUAGE: Java
CODE:
CommandProcessor.executeCommand()

----------------------------------------

TITLE: Registering SimpleSpellcheckingStrategy in plugin.xml
DESCRIPTION: Registers the SimpleSpellcheckingStrategy implementation with the IntelliJ Platform using the com.intellij.spellchecker.support extension point in the plugin configuration file.

LANGUAGE: XML
CODE:
<extensions defaultExtensionNs="com.intellij">
  <spellchecker.support language="Simple" implementationClass="org.intellij.sdk.language.SimpleSpellcheckingStrategy"/>
</extensions>

----------------------------------------

TITLE: Applying IntelliJ Platform Module Plugin in Kotlin
DESCRIPTION: Demonstrates how to apply the IntelliJ Platform Module Gradle Plugin for submodules in a multi-module project using a Kotlin-based Gradle build file.

LANGUAGE: kotlin
CODE:
plugins {
  id("org.jetbrains.intellij.platform.module")
}

----------------------------------------

TITLE: Defining an Icons Class in Kotlin
DESCRIPTION: Example of creating an icon holder class in Kotlin to organize and reference custom plugin icons, using @JvmField annotation.

LANGUAGE: Kotlin
CODE:
package icons

object MyIcons {
  @JvmField
  val Action = IconLoader.getIcon("/icons/action.svg", javaClass)
  @JvmField
  val ToolWindow = IconLoader.getIcon("/icons/toolWindow.svg", javaClass)
}

----------------------------------------

TITLE: Specifying Plugin Logo Files in META-INF Directory
DESCRIPTION: Example of the correct file structure for including plugin logo files in the META-INF folder of a plugin project.

LANGUAGE: plaintext
CODE:
resources/META-INF/
    pluginIcon.svg
    pluginIcon_dark.svg

----------------------------------------

TITLE: Getting Library Dependencies List - Java
DESCRIPTION: Retrieves and displays a list of libraries that a module depends on using OrderEnumerator.

LANGUAGE: java
CODE:
List<String> libraryNames = new ArrayList<>();
ModuleRootManager.getInstance(module).orderEntries().forEachLibrary(library -> {
  libraryNames.add(library.getName());
  return true;
});
Messages.showInfoMessage(StringUtil.join(libraryNames, "\n"), "Libraries in Module");

----------------------------------------

TITLE: Basic Theme Description JSON Structure
DESCRIPTION: The minimal JSON structure for a theme description file, including name, author, dark mode flag, editor scheme reference, and UI customization object.

LANGUAGE: json
CODE:
{
  "name": "theme_basics",
  "author": "",
  "dark": false,
  "editorScheme": "/theme_basics.xml",
  "ui": {
  }
}

----------------------------------------

TITLE: Registering Context Blocker in XML
DESCRIPTION: Example of registering a WebSymbolsContextProvider that can prevent a context from being detected, using the 'any' name to block all contexts of a particular kind.

LANGUAGE: XML
CODE:
<idea-plugin>
  <extensions defaultExtensionNs="com.intellij">
    <webSymbols.context
        kind="framework" name="any"
        implementation="com.intellij.python.js.PyTemplatesWebContextBlocker"/>
  </extensions>
</idea-plugin>

----------------------------------------

TITLE: Parameter Info XML Extension Point Declaration
DESCRIPTION: XML extension point registration for parameter info handler in plugin.xml

LANGUAGE: XML
CODE:
<!-- Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->

----------------------------------------

TITLE: Registering ExtendWordSelectionHandler in plugin.xml
DESCRIPTION: Register the ExtendWordSelectionHandler implementation in the plugin.xml file using the com.intellij.extendWordSelectionHandler extension point.

LANGUAGE: XML
CODE:
<extension point="com.intellij.extendWordSelectionHandler">
  <extendWordSelectionHandler implementation="com.example.MyExtendWordSelectionHandler"/>
</extension>

----------------------------------------

TITLE: Kotlin Debug Logger Usage
DESCRIPTION: Example usage of the Kotlin debug logger extension showing simplified syntax

LANGUAGE: kotlin
CODE:
logger.debug { "..." + expensiveComputation() }

----------------------------------------

TITLE: Configuring ProGuard in Groovy for IntelliJ Platform Gradle Plugin
DESCRIPTION: This Groovy snippet shows how to configure ProGuard for an IntelliJ Platform plugin. It sets up a ProGuard task, defines input and output JAR locations, and modifies the prepareSandbox task to use the obfuscated JAR.

LANGUAGE: groovy
CODE:
import proguard.gradle.ProGuardTask

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("com.guardsquare:proguard-gradle:7.5.0")
  }
}

def proguardJar = layout.buildDirectory.file("libs/$name-$version-proguard.jar")

tasks.register('proguard', ProGuardTask) {
  it.injars(composedJar.archiveFile)
  outjars(proguardJar)

  // ...
}

prepareSandbox {
  pluginJar = proguardJar
  dependsOn(proguard)
}

----------------------------------------

TITLE: Referencing Icons in plugin.xml
DESCRIPTION: Examples of referencing icons in plugin.xml for actions and tool windows, using both file paths and icon holder class constants.

LANGUAGE: XML
CODE:
<actions>
  <action icon="/icons/myAction.svg" ... />
</actions>

<extensions defaultExtensionNs="com.intellij">
  <toolWindow icon="/icons/myToolWindow.svg" ... />
</extensions>

LANGUAGE: XML
CODE:
<actions>
  <!-- referencing icons from class in top-level 'icons' package -->
  <action icon="MyIcons.MyAction" ... />
</actions>

<extensions defaultExtensionNs="com.intellij">
  <!-- referencing icons from custom package -->
  <toolWindow icon="com.example.plugin.MyIcons.MyToolWindow" ... />
</extensions>

----------------------------------------

TITLE: Customizing Action Icon Colors
DESCRIPTION: Example of customizing colors for action icons in toolbars

LANGUAGE: json
CODE:
{
  "icons": {
    "ColorPalette": {
      "Actions.Blue": "#5BC0DE"
    }
  }
}

----------------------------------------

TITLE: Custom Options Binding for Resource Bundle Inspection
DESCRIPTION: Implementation of custom options binding for inconsistent resource bundle inspection using OptionController. Demonstrates handling dynamic providers and custom value storage.

LANGUAGE: java
CODE:
private NotNullLazyValue<InconsistentResourceBundleInspectionProvider[]> myProviders = ...;
private Map<String, Boolean> mySettings = new LinkedHashMap<>();

@Override
public @NotNull OptPane getOptionsPane() {
  return new OptPane(ContainerUtil.map(
    myProviders.getValue(),
    provider -> checkbox(provider.getName(), provider.getPresentableName())));
}

@Override
public @NotNull OptionController getOptionController() {
  return OptionController.of(
    (bindId) -> ContainerUtil.getOrElse(mySettings, bindId, true),
    (bindId, value) -> {
      boolean boolValue = (Boolean)value;
      if (boolValue) {
        mySettings.remove(bindId);
      } else {
        mySettings.put(bindId, false);
      }
    });
}

----------------------------------------

TITLE: Basic Theme Definition with Named Colors
DESCRIPTION: Example of defining and using named colors in a theme description file to set background colors

LANGUAGE: json
CODE:
{
  "name": "theme_basics",
  "dark": false,
  "author": "IntelliJ Platform SDK",
  "editorScheme": "/Lightning.xml",

  "colors": {
    "basicBackground": "#E1E1E1"
  },
  "ui": {
    "Panel.background": "basicBackground"
  }
}

----------------------------------------

TITLE: Defining Context Rules in Web Types JSON
DESCRIPTION: Example of defining context rules in a Web Types JSON file, including enable-when conditions for different package dependencies.

LANGUAGE: JSON
CODE:
{
  "$schema": "https://json.schemastore.org/web-types",
  "name": "vue-store-contexts",
  "version": "0.0.0",
  "contexts-config": {
    "vue-store": {
      "vuex": {
        "enable-when": {
          "node-packages": [
            "vuex"
          ],
          "ide-libraries": [
            "vuex"
          ]
        }
      },
      "pinia": {
        "enable-when": {
          "node-packages": [
            "pinia"
          ]
        }
      }
    }
  }
}

----------------------------------------

TITLE: Implementing setName() for Properties Language
DESCRIPTION: Example of implementing the setName() method for a Properties language plugin. This method is called when renaming an element.

LANGUAGE: Java
CODE:
setName()

----------------------------------------

TITLE: Setting Got It Tooltip Location in Kotlin and Java
DESCRIPTION: Demonstrates how to set the location of a Got It tooltip using predefined point providers in both Kotlin and Java.

LANGUAGE: kotlin
CODE:
GotItTooltip(TOOLTIP_ID, GOT_IT_TEXT, parentDisposable)
    .show(gutterComponent, GotItTooltip.TOP_MIDDLE)

LANGUAGE: java
CODE:
new GotItTooltip(TOOLTIP_ID, GOT_IT_TEXT, parentDisposable)
    .show(gutterComponent, GotItTooltip.TOP_MIDDLE);

----------------------------------------

TITLE: Implementing SettingsEditor in Java for IntelliJ Platform SDK
DESCRIPTION: This code snippet demonstrates the implementation of a SettingsEditor for the custom run configuration. It creates a form with a text field for the script name and handles resetting and applying settings.

LANGUAGE: Java
CODE:
public class DemoSettingsEditor extends SettingsEditor<DemoRunConfiguration> {
  private JPanel myPanel;
  private JTextField myScriptName;

  @Override
  protected void resetEditorFrom(@NotNull DemoRunConfiguration s) {
    myScriptName.setText(s.getScriptName());
  }

  @Override
  protected void applyEditorTo(@NotNull DemoRunConfiguration s) {
    s.setScriptName(myScriptName.getText());
  }

  @Override
  protected @NotNull JComponent createEditor() {
    return myPanel;
  }

  private void createUIComponents() {
    myScriptName = new TextFieldWithBrowseButton();
  }
}

----------------------------------------

TITLE: Creating Custom Plugin-Aware Task in Groovy
DESCRIPTION: Example of creating a custom Gradle task that implements PluginAware interface to access plugin.xml details

LANGUAGE: groovy
CODE:
import org.jetbrains.intellij.platform.gradle.tasks.aware.PluginAware

abstract class RetrievePluginNameTask extends DefaultTask implements PluginAware {}

tasks.register('retrievePluginName', RetrievePluginNameTask) {
  def outputFile = layout.buildDirectory.file("pluginName.txt")

  doLast {
    outputFile.get().asFile.writeText(pluginXml.parse { name }.get())
  }
}

----------------------------------------

TITLE: Creating an Animated Icon
DESCRIPTION: Example of creating an animated icon using the AnimatedIcon class with multiple frames and a delay.

LANGUAGE: Java
CODE:
AnimatedIcon icon = new AnimatedIcon(
    500,
    AllIcons.Ide.Macro.Recording_1,
    AllIcons.Ide.Macro.Recording_2);

----------------------------------------

TITLE: Theme Metadata JSON Structure
DESCRIPTION: JSON schema defining UI customization keys with their properties including deprecation status, descriptions, and source components.

LANGUAGE: json
CODE:
{
  "name": "My Plugin",
  "fixed": false,
  "ui": [
    {
      "key": "MyComponent.border",
      "description": "The border for my component. Not used anymore.",
      "deprecated": true,
      "source": "com.example.MyComponent"
    },
    {
      [more keys...]
    }
  ]
}

----------------------------------------

TITLE: Defining an Icons Class in Java
DESCRIPTION: Example of creating an icon holder class in Java to organize and reference custom plugin icons.

LANGUAGE: Java
CODE:
package icons;

public interface MyIcons {
  Icon Action = IconLoader.getIcon("/icons/action.svg", MyIcons.class);
  Icon ToolWindow = IconLoader.getIcon("/icons/toolWindow.svg", MyIcons.class);
}

----------------------------------------

TITLE: Overriding Global Icon Colors
DESCRIPTION: Shows how to override default icon colors using ColorPalette in the theme description

LANGUAGE: json
CODE:
{
  "icons": {
    "ColorPalette": {
      "#DB5860": "#D61A26"
    }
  }
}

----------------------------------------

TITLE: Vue Directive Pattern Example (Web Types)
DESCRIPTION: Demonstrates the structure of a Vue directive pattern using Web Types format. Shows how directive segments are broken down and matched during pattern evaluation.

LANGUAGE: text
CODE:
v-on:click.once.alt

1. v-: Vue directive pattern symbol
2. on: Vue 'on' directive 
3. :
4. click: DOM 'click' event symbol
5. .
6. once: Vue 'on' directive 'once' modifier
7. alt: Vue 'on' directive 'alt' modifier

----------------------------------------

TITLE: Markup for Inlay Hint Preview (2023.2+)
DESCRIPTION: Shows how to define hints in preview files for displaying in the Settings dialog for 2023.2+ versions.

LANGUAGE: markup
CODE:
/*<# Displayed Hint #>*/

----------------------------------------

TITLE: Setting ComboBox Editable State in Java
DESCRIPTION: Code example showing how to make a ComboBox editable. Use ComboBox from IntelliJ Platform API instead of javax.swing.JComboBox.

LANGUAGE: java
CODE:
comboBox.setEditable(true);

----------------------------------------

TITLE: Displaying Caret Position Information in Java
DESCRIPTION: This snippet shows how to retrieve and display caret position information, including Logical Position, Visual Position, and Offset, in an IntelliJ Platform plugin action.

LANGUAGE: Java
CODE:
public class EditorAreaIllustration extends AnAction {

  public void actionPerformed(@NotNull AnActionEvent event) {
    // Get access to the editor and caret model.
    Editor editor = event.getRequiredData(CommonDataKeys.EDITOR);
    CaretModel caretModel = editor.getCaretModel();

    // Getting the primary caret ensures we get the correct one of a possible many.
    Caret primaryCaret = caretModel.getPrimaryCaret();
    // Get the caret information
    LogicalPosition logicalPos = primaryCaret.getLogicalPosition();
    VisualPosition visualPos = primaryCaret.getVisualPosition();
    int caretOffset = primaryCaret.getOffset();

    // Build and display the caret report.
    String report = logicalPos.toString() + "\n" +
        visualPos.toString() + "\n" +
        "Offset: " + caretOffset;
    Messages.showInfoMessage(report, "Caret Parameters Inside The Editor");
  }

}

----------------------------------------

TITLE: Updating Annotator for Simple Language Quick Fix Integration
DESCRIPTION: Annotator implementation that identifies invalid properties and registers the Quick Fix action for creating missing properties.

LANGUAGE: Java
CODE:
public class SimpleAnnotator implements Annotator {
  @Override
  public void annotate(@NotNull final PsiElement element, @NotNull AnnotationHolder holder) {
    // Only process properties
    if (!(element instanceof SimpleProperty)) {
      return;
    }
    // Get the property key to validate
    SimpleProperty simpleProperty = (SimpleProperty) element;
    String key = simpleProperty.getKey();
    if (key == null) {
      return;
    }
    // Validate the key
    if (key.matches("[\\w\\-]+(?:\\.[\\w\\-]*)*")) {
      // Success
      holder.newSilentAnnotation(HighlightSeverity.INFORMATION)
          .range(element.getFirstChild().getTextRange())
          .textAttributes(SimpleAnnotatorHighlighter.PROPERTY_KEY)
          .create();
    }
    else {
      // Error
      holder.newAnnotation(HighlightSeverity.ERROR,
              SimpleSupportBundle.message("simple.property.invalid.key.error"))
          .range(element.getFirstChild().getTextRange())
          .withFix(new SimpleCreatePropertyQuickFix(key))
          .create();
    }
  }
}

----------------------------------------

TITLE: Implementing actionPerformed() Method in Java
DESCRIPTION: Implementation of the actionPerformed() method in the custom action class, showing how to handle the action event and display a dialog.

LANGUAGE: Java
CODE:
@Override
public void actionPerformed(@NotNull AnActionEvent event) {
  // Using the event, implement an action.
  // For example, create and show a dialog.
  Project currentProject = event.getProject();
  StringBuilder message =
      new StringBuilder(event.getPresentation().getText() + " Selected!");
  // If an element is selected in the editor, add info about it.
  Navigatable selectedElement = event.getData(CommonDataKeys.NAVIGATABLE);
  if (selectedElement != null) {
    message.append("\n\nSelected Element: ").append(selectedElement);
  }
  String title = event.getPresentation().getDescription();
  Messages.showMessageDialog(
      currentProject,
      message.toString(),
      title,
      Messages.getInformationIcon());
}

----------------------------------------

TITLE: Declaring Parent-Child Settings Using Separate Extension Points in XML
DESCRIPTION: Example showing how to declare related settings components using separate extension point declarations. The parent setting is added to the 'tools' group, while the child setting is linked to the parent using matching IDs.

LANGUAGE: xml
CODE:
<extensions defaultExtensionNs="com.intellij">
  <projectConfigurable
      parentId="tools"
      id="com.intellij.sdk.tasks"
      displayName="Tasks"
      nonDefaultProject="true"
      instance="com.intellij.sdk.TaskConfigurable"/>

  <projectConfigurable
      parentId="com.intellij.sdk.tasks"
      id="com.intellij.sdk.tasks.servers"
      displayName="Servers"
      nonDefaultProject="true"
      instance="com.intellij.sdk.TaskRepositoriesConfigurable"/>
</extensions>

----------------------------------------

TITLE: Defining Web Component in Web Types JSON
DESCRIPTION: Shows a comprehensive example of defining a Web Component with attributes, properties, events, and CSS custom properties using Web Types JSON.

LANGUAGE: JSON
CODE:
{
  "$schema": "https://raw.githubusercontent.com/JetBrains/web-types/master/schema/web-types.json",
  "name": "Cool library",
  "version": "1.0.0",
  "js-types-syntax": "typescript",
  "description-markup": "markdown",
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "cool-component",
          "description": "Use the cool component to make your website more attractive.",
          "doc-url": "https://example.com/docs/cool-component",
          "attributes": [
            {
              "name": "color",
              "description": "Choose color for coolness",
              "default": "blue",
              "required": false,
              "doc-url": "https://example.com/docs/cool-component#attrs",
              "value": {
                "type": "string"
              }
            }
          ],
          "slots": [
            {
              "name": "container"
            }
          ],
          "events": [
            {
              "name": "color:changed",
              "description": "Emitted when color changes"
            }
          ],
          "js": {
            "properties": [
              {
                "name": "color",
                "type": "string",
                "default": "blue"
              }
            ]
          },
          "css": {
            "properties": [
              {
                "name": "--cool-degree"
              }
            ]
          }
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Displaying Theme Project Directory Structure with PlantUML
DESCRIPTION: A PlantUML diagram showing the directory structure of a generated theme plugin project, including the key configuration files and their purposes.

LANGUAGE: plantuml
CODE:
@startuml

skinparam TitleFontName JetBrains Sans
skinparam TitleFontStyle plain
skinparam TitleFontSize 16
skinparam DefaultTextAlignment left

title
  my_theme
  |_ resources
    |_ META-INF
      |_ plugin.xml // (Plugin Configuration File) //
      |_ pluginIcon.svg // (Plugin Logo) //
      |_ ...
    |_ theme
      |_ my_theme.theme.json // (Theme description file) //
  |_ my_theme.iml // (IntelliJ IDEA Module configuration file) //
end title
@enduml

----------------------------------------

TITLE: Defining Custom HTML Element with Web Types JSON
DESCRIPTION: Demonstrates a simple Web Types JSON file defining a custom HTML element 'my-element' with a 'foo' attribute.

LANGUAGE: JSON
CODE:
{
  "$schema": "https://raw.githubusercontent.com/JetBrains/web-types/master/schema/web-types.json",
  "name": "example",
  "version": "0.0.1",
  "description-markup": "markdown",
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "my-element",
          "description": "A custom HTML element",
          "doc-url": "https://example.com/docs/my-element",
          "attributes": [
            {
              "name": "foo",
              "description": "A custom attribute of `my-element`"
            }
          ]
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Adding JCEF Browser to UI in Java
DESCRIPTION: Creates a JBCefBrowser instance and adds it to a JPanel component in the plugin UI.

LANGUAGE: java
CODE:
// assume 'JPanel myPanel' is a part of a tool window UI
JBCefBrowser browser = new JBCefBrowser();
myPanel.add(browser.getComponent());

----------------------------------------

TITLE: Implementing External Link in Kotlin for IntelliJ Platform SDK
DESCRIPTION: This code snippet demonstrates how to create an external link using ActionLink in Kotlin. It sets up a link that opens an external website in a browser when clicked.

LANGUAGE: kotlin
CODE:
val externalLink = ActionLink("External link") {
  BrowserUtil.browse("https://www.jetbrains.com")
}.apply {
  setExternalLinkIcon()
}

----------------------------------------

TITLE: Implementing SimpleFormattingModelBuilder for Simple Language Formatter in Java
DESCRIPTION: Implementation of SimpleFormattingModelBuilder class to define formatting rules for the Simple Language, including spacing around the property separator.

LANGUAGE: Java
CODE:
public class SimpleFormattingModelBuilder implements FormattingModelBuilder {
    @Override
    public @NotNull FormattingModel createModel(@NotNull FormattingContext formattingContext) {
        final CommonCodeStyleSettings settings = formattingContext.getCodeStyleSettings()
                .getCommonSettings(SimpleLanguage.INSTANCE);
        SpacingBuilder spacingBuilder = new SpacingBuilder(settings)
                .around(SimpleTypes.SEPARATOR)
                .spaceIf(settings.SPACE_AROUND_ASSIGNMENT_OPERATORS)
                .before(SimpleTypes.PROPERTY).none();
        final ASTNode rootNode = formattingContext.getNode();
        return new FormattingModelProvider.ThrowableAwareFormattingModel(
                new CustomFormattingModel(rootNode, spacingBuilder), formattingContext.getProject());
    }

    private static class CustomFormattingModel implements FormattingModel {
        private final ASTNode myNode;
        private final SpacingBuilder mySpacingBuilder;

        CustomFormattingModel(final ASTNode node, final SpacingBuilder spacingBuilder) {
            myNode = node;
            mySpacingBuilder = spacingBuilder;
        }

        @Override
        public @NotNull Block getRootBlock() {
            return new SimpleBlock(myNode, Wrap.createWrap(WrapType.NONE, false), Alignment.createAlignment(),
                    mySpacingBuilder);
        }

        @Override
        public @NotNull FormattingDocumentModel getDocumentModel() {
            return FormattingDocumentModel.get(myNode.getPsi().getContainingFile());
        }

        @Override
        public @NotNull Document getDocument() {
            return getDocumentModel().getDocument();
        }

        @Override
        public @NotNull TextRange replaceWhiteSpace(@NotNull TextRange textRange, String whiteSpace) {
            return TextRange.EMPTY_RANGE;
        }

        @Override
        public @NotNull TextRange shiftIndentInsideRange(@NotNull ASTNode node, @NotNull TextRange range, int indent) {
            return range;
        }

        @Override
        public void commitChanges() {
        }
    }
}

----------------------------------------

TITLE: Implementing Color Settings Page in Java
DESCRIPTION: Implementation of ColorSettingsPage that allows users to customize color settings for Simple Language highlighting. Includes attribute descriptors and demo text.

LANGUAGE: java
CODE:
public class SimpleColorSettingsPage implements ColorSettingsPage {
  private static final AttributesDescriptor[] DESCRIPTORS = new AttributesDescriptor[]{
    new AttributesDescriptor("Key", SimpleSyntaxHighlighter.KEY),
    new AttributesDescriptor("Separator", SimpleSyntaxHighlighter.SEPARATOR),
    new AttributesDescriptor("Value", SimpleSyntaxHighlighter.VALUE),
  };
  // ... Class implementation
}

----------------------------------------

TITLE: Creating Dynamic Action Group in Java
DESCRIPTION: Demonstrates how to create an action group with a variable number of actions by extending ActionGroup and overriding the getChildren method.

LANGUAGE: Java
CODE:
public class DynamicActionGroup extends ActionGroup {
  @NotNull
  @Override
  public AnAction[] getChildren(AnActionEvent event) {
    return new AnAction[]{
        new PopupDialogAction(
            "Action Added at Runtime",
            "Dynamic Action Demo",
            SdkIcons.Sdk_default_icon)
    };
  }
}

----------------------------------------

TITLE: Configuring Grammar-Kit Extension in Kotlin
DESCRIPTION: Illustrates how to configure the grammarKit extension with custom JFlex and Grammar-Kit release versions in a Kotlin-based Gradle script.

LANGUAGE: kotlin
CODE:
grammarKit {
  jflexRelease.set("1.7.0-1")
  grammarKitRelease.set("2021.1.2")
}

----------------------------------------

TITLE: Implementing Structure View Factory in Java
DESCRIPTION: Creates a PsiStructureViewFactory implementation that builds a tree-based structure view for Simple language files.

LANGUAGE: Java
CODE:
public class SimpleStructureViewFactory implements PsiStructureViewFactory {
    @Override
    public @Nullable StructureViewBuilder getStructureViewBuilder(@NotNull FileViewProvider viewProvider) {
        return new TreeBasedStructureViewBuilder() {
            @Override
            public @NotNull StructureViewModel createStructureViewModel(
                    @Nullable Editor editor) {
                return new SimpleStructureViewModel((SimpleFile) viewProvider.getPsi(SimpleLanguage.INSTANCE));
            }
        };
    }
}

----------------------------------------

TITLE: Contributing CSS Properties to HTML Element
DESCRIPTION: Shows how to contribute CSS properties to a custom HTML element using nested namespaces in Web Types JSON.

LANGUAGE: JSON
CODE:
{
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "my-element",
          "description": "A custom HTML element",
          "attributes": [
            {
              "name": "foo",
              "description": "A custom HTML attribute of `my-element`"
            }
          ],
          "css": {
            "properties": [
              {
                "name": "--bg-color",
                "description": "Background color of my-element"
              }
            ]
          }
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Accessing XML Elements Using DOM
DESCRIPTION: Simplified XML element access using DOM model compared to PSI

LANGUAGE: Java
CODE:
DomManager manager = DomManager.getDomManager(project);
Root root = manager.getFileElement(file).getRootElement();
List<Bar> bars = root.getFoo().getBars();
if (bars.size() > 1) {
  String s = bars.get(1).getValue();
  // do something
}

----------------------------------------

TITLE: Sample Plugin Configuration with Optional Dependency
DESCRIPTION: Provides a complete example of a plugin.xml file with both required and optional dependencies, along with extension declarations.

LANGUAGE: xml
CODE:
<idea-plugin>
   ...
   <depends>com.intellij.java</depends>

   <depends
       optional="true"
       config-file="myPluginId-withKotlin.xml">org.jetbrains.kotlin</depends>

   <extensions defaultExtensionNs="com.intellij">
      <annotator
          language="JAVA"
          implementationClass="com.example.MyJavaAnnotator"/>
   </extensions>
</idea-plugin>

----------------------------------------

TITLE: Implementing Framework Support Provider in Java
DESCRIPTION: Implementation of createProvider() method to enable framework support in module configuration with UI components and support addition logic.

LANGUAGE: java
CODE:
@NotNull
@Override
public FrameworkSupportInModuleProvider createProvider() {
  return new FrameworkSupportInModuleProvider() {
    @NotNull
    @Override
    public FrameworkTypeEx getFrameworkType() {
      return DemoFramework.this;
    }

    @NotNull
    @Override
    public FrameworkSupportInModuleConfigurable createConfigurable(
        @NotNull FrameworkSupportModel model) {
      return new FrameworkSupportInModuleConfigurable() {

        @Override
        public JComponent createComponent() {
          return new JCheckBox("SDK Extra Option");
        }

        @Override
        public void addSupport(@NotNull Module module,
                               @NotNull ModifiableRootModel model,
                               @NotNull ModifiableModelsProvider provider) {
          // This is the place to set up a library, generate a specific file,
          // and actually add framework support to a module.
        }
      };
    }

    @Override
    public boolean isEnabledForModuleType(@NotNull ModuleType type) {
      return true;
    }
  };
}

----------------------------------------

TITLE: Setting Custom Shim Server Port
DESCRIPTION: Shows how to specify a custom port for the Shim server, which is used to proxy requests to authorized custom plugin repositories.

LANGUAGE: groovy
CODE:
org.jetbrains.intellij.platform.shimServerPort=7348

----------------------------------------

TITLE: Coroutine Header Format
DESCRIPTION: Defines the standard format for coroutine headers including optional multiplier, name, class, state and context

LANGUAGE: plaintext
CODE:
-[xN of] "name":CoroutineClass{JobState}, state: STATE [context]

----------------------------------------

TITLE: Bundling Additional Files with Plugin in Groovy
DESCRIPTION: This Groovy snippet shows how to bundle additional files with a plugin by adding them to the plugin directory during sandbox preparation. It configures the prepareSandbox task to copy files from a specified directory into the plugin's sandbox.

LANGUAGE: groovy
CODE:
tasks.named('prepareSandbox', PrepareSandboxTask) {
  from layout.projectDirectory.dir('extraFiles')
  into it.pluginName.map { "$it/extra" }
}

----------------------------------------

TITLE: Generating Documentation - Java
DESCRIPTION: Implements the main documentation generation logic for Simple Language properties.

LANGUAGE: java
CODE:
@Override
public @Nullable String generateDoc(PsiElement element, @Nullable PsiElement originalElement) {
  if (element instanceof SimpleProperty) {
    return renderFullDoc((SimpleProperty) element);
  }
  return super.generateDoc(element, originalElement);
}

----------------------------------------

TITLE: New UI Icon Mapping JSON
DESCRIPTION: Example of a JSON mapping file for New UI icons, showing how to map icons in different directories.

LANGUAGE: JSON
CODE:
{
  "icons": {
    "expui": {
      "dirName": {
        "icon1.svg": "icons/icon1.svg",
        "icon2.svg": "icons/icon2.svg"
      },
      "anotherDir": {
        "anotherIcon.svg": "images/anotherIcon.svg"
      }
    }
  }
}

----------------------------------------

TITLE: DOM Collection Control UI Component
DESCRIPTION: Example showing how to create a UI component for editing DOM collections

LANGUAGE: Java
CODE:
public class ConverterComponent extends BasicDomElementComponent<Converter> {
  private JPanel myRootPane;
  private TextPanel myConverterId;
  private PsiClassPanel myConverterClass;

  public ConverterComponent(Converter domElement) {
    super(domElement);
    bindProperties();
  }
}

----------------------------------------

TITLE: Disabling Searchable Options Build in Groovy
DESCRIPTION: This snippet shows how to disable the building of searchable options task using Groovy DSL in Gradle. This is useful for plugins that don't provide custom settings.

LANGUAGE: groovy
CODE:
buildSearchableOptions.enabled = false

----------------------------------------

TITLE: Defining Test Data for Simple Language Properties
DESCRIPTION: Creates a file with Simple language properties to be used as test data for completion.

LANGUAGE: properties
CODE:
```properties
```

----------------------------------------

TITLE: Disabling Searchable Options Warning
DESCRIPTION: Demonstrates how to disable the warning shown when the buildSearchableOptions task doesn't produce any results. This can improve performance for plugins without custom settings.

LANGUAGE: groovy
CODE:
org.jetbrains.intellij.platform.buildSearchableOptions=false

----------------------------------------

TITLE: Displaying Downloads Badge for ReSharper Plugins
DESCRIPTION: Markdown code to embed a shield.io badge showing the number of downloads for a ReSharper plugin. Requires replacing :packageName with the actual package name.

LANGUAGE: markdown
CODE:
![Downloads](https://img.shields.io/resharper/dt/:packageName)

----------------------------------------

TITLE: Chaining Text Attribute Keys in Java
DESCRIPTION: Demonstrates how to chain text attribute keys, allowing for multiple levels of fallback when searching for text attributes.

LANGUAGE: java
CODE:
static final TextAttributesKey MY_PREDEFINED_SYMBOL =
  TextAttributesKey.createTextAttributesKey("MY_PREDEFINED_SYMBOL", MY_KEYWORD);

----------------------------------------

TITLE: Implementing SimpleCommenter Class in Java
DESCRIPTION: Implementation of Commenter interface for Simple Language that defines '#' as the line comment prefix. This enables commenting functionality for Simple Language files through IDE actions.

LANGUAGE: java
CODE:
public class SimpleCommenter implements Commenter {
    @Override
    public @Nullable String getLineCommentPrefix() {
        return "#";
    }

    @Override
    public @Nullable String getBlockCommentPrefix() {
        return null;
    }

    @Override
    public @Nullable String getBlockCommentSuffix() {
        return null;
    }

    @Override
    public @Nullable String getCommentedBlockCommentPrefix() {
        return null;
    }

    @Override
    public @Nullable String getCommentedBlockCommentSuffix() {
        return null;
    }
}

----------------------------------------

TITLE: Implementing ExtendWordSelectionHandler in Java
DESCRIPTION: Example implementation of the ExtendWordSelectionHandler interface, showing the canSelect and select methods for a function call use case.

LANGUAGE: Java
CODE:
public class MyExtendWordSelectionHandler implements ExtendWordSelectionHandler {
    @Override
    public boolean canSelect(@NotNull PsiElement e) {
        return e instanceof PsiFunctionCallExpression;
    }

    @Override
    public List<TextRange> select(@NotNull PsiElement e, @NotNull CharSequence editorText, int cursorOffset, @NotNull Editor editor) {
        if (e instanceof PsiFunctionCallExpression) {
            PsiExpressionList argumentList = ((PsiFunctionCallExpression) e).getArgumentList();
            if (argumentList != null) {
                return Collections.singletonList(argumentList.getTextRange());
            }
        }
        return Collections.emptyList();
    }
}

----------------------------------------

TITLE: Implementing Declarative Inspection Options in Java
DESCRIPTION: Example of implementing declarative inspection options using OptPane with string list and checkbox controls. Shows binding to class fields and validation for Java classes.

LANGUAGE: java
CODE:
public OrderedSet<String> ignoredTypes = new OrderedSet<>();
public boolean ignoreNegations = false;

@Override
public @NotNull OptPane getOptionsPane() {
  return pane(
    stringList(
      "ignoredTypes",
      message("options.label.ignored.classes"),
      new JavaClassValidator()),
    checkbox(
      "ignoreNegations",
      message("size.replaceable.by.isempty.negation.ignore"))
  );
}

----------------------------------------

TITLE: HTML Copyright Notice
DESCRIPTION: Copyright notice for JetBrains documentation in HTML comment format

LANGUAGE: html
CODE:
<!-- Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->

----------------------------------------

TITLE: Bundling Additional Files with Plugin in Kotlin
DESCRIPTION: This Kotlin snippet demonstrates how to bundle additional files with a plugin by adding them to the plugin directory during sandbox preparation. It uses the prepareSandbox task to copy files from a specified directory into the plugin's sandbox.

LANGUAGE: kotlin
CODE:
tasks {
  prepareSandbox {
    from(layout.projectDirectory.dir("extraFiles")) {
      into(pluginName.map { "$it/extra" })
    }
  }
}

----------------------------------------

TITLE: Specifying IntelliJ Platform Cache Directory
DESCRIPTION: Demonstrates how to set a custom location for the IntelliJ Platform cache directory. This directory stores files related to the current project.

LANGUAGE: groovy
CODE:
org.jetbrains.intellij.platform.intellijPlatformCache=/path/to/intellijPlatformCache/

----------------------------------------

TITLE: Default Navigation Bar Extension Methods
DESCRIPTION: Core methods that need to be overridden when implementing DefaultNavBarExtension for basic navigation bar customization.

LANGUAGE: Java
CODE:
getPresentableText() // returns string representation of navigation element
getIcon() // returns icon for navigation element

----------------------------------------

TITLE: Configuring plugin.xml for WebStorm Plugin
DESCRIPTION: Explains the necessary dependencies to declare in the plugin.xml file for a WebStorm plugin. It mentions the required <depends> tags for JavaScript and com.intellij.modules.platform.

LANGUAGE: xml
CODE:
<!-- Example plugin.xml snippet -->
<depends>JavaScript</depends>
<depends>com.intellij.modules.platform</depends>

----------------------------------------

TITLE: Registering CompletionContributor in plugin.xml for Simple Language
DESCRIPTION: XML configuration to register the SimpleCompletionContributor in the plugin.xml file. It uses the com.intellij.completion.contributor extension point and specifies the language as 'Simple'.

LANGUAGE: XML
CODE:
<extensions defaultExtensionNs="com.intellij">
  <completion.contributor
      language="Simple"
      implementationClass="org.intellij.sdk.language.SimpleCompletionContributor"/>
</extensions>

----------------------------------------

TITLE: Registering Custom Action in plugin.xml
DESCRIPTION: XML configuration to register a custom action in the plugin.xml file, specifying action ID, class, text, description, and menu placement.

LANGUAGE: XML
CODE:
<actions>
  <action
      id="org.intellij.sdk.action.PopupDialogAction"
      class="org.intellij.sdk.action.PopupDialogAction"
      text="Popup Dialog Action"
      description="SDK action example">
    <add-to-group group-id="ToolsMenu" anchor="first"/>
  </action>
</actions>

----------------------------------------

TITLE: Creating a Message Bundle Class in Kotlin
DESCRIPTION: Demonstrates how to create a message bundle class in Kotlin using DynamicBundle for efficient internationalization support.

LANGUAGE: kotlin
CODE:
@NonNls
private const val BUNDLE = "messages.ExampleBundle"

internal object ExampleBundle {
  private val INSTANCE = DynamicBundle(ExampleBundle::class.java, BUNDLE)

  fun message(
      key: @PropertyKey(resourceBundle = BUNDLE) String,
      vararg params: Any
  ): @Nls String {
    return INSTANCE.getMessage(key, *params)
  }

  fun lazyMessage(
      @PropertyKey(resourceBundle = BUNDLE) key: String,
      vararg params: Any
  ): Supplier<@Nls String> {
    return INSTANCE.getLazyMessage(key, *params)
  }
}

----------------------------------------

TITLE: Accessing Module SDK Information in Java
DESCRIPTION: Shows how to retrieve detailed information about the SDK used by a specific module, including name, version, and home directory.

LANGUAGE: java
CODE:
ModuleRootManager moduleRootManager = ModuleRootManager.getInstance(module);
Sdk sdk = moduleRootManager.getSdk();
String jdkInfo = "Module: " + module.getName() +
    " SDK: " + sdk.getName() +
    " SDK version: " + sdk.getVersionString() +
    " SDK home directory: " + sdk.getHomePath();

----------------------------------------

TITLE: Applying Migration Plugin in Kotlin
DESCRIPTION: This snippet demonstrates how to apply both the IntelliJ Platform Gradle Plugin and its migration plugin to assist with the transition from the 1.x version.

LANGUAGE: kotlin
CODE:
plugins {
  id("org.jetbrains.intellij.platform") version "%intellij-platform-gradle-plugin-version%"
  id("org.jetbrains.intellij.platform.migration") version "%intellij-platform-gradle-plugin-version%"
}

----------------------------------------

TITLE: Registering Structure Aware Navbar in plugin.xml
DESCRIPTION: XML configuration to register the SimpleStructureAwareNavbar implementation with the IntelliJ Platform using the com.intellij.navbar extension point.

LANGUAGE: xml
CODE:
<extensions defaultExtensionNs="com.intellij">
  <navbar implementation="org.intellij.sdk.language.SimpleStructureAwareNavbar"/>
</extensions>

----------------------------------------

TITLE: Breaking API Changes File Structure Comment XML
DESCRIPTION: XML comment block explaining the format and guidelines for documenting breaking API changes, including patterns and examples.

LANGUAGE: XML
CODE:
<!-- Copyright 2000-2023 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->

----------------------------------------

TITLE: Declaring Ruby Plugin Dependency in plugin.xml
DESCRIPTION: Configuration required in plugin.xml to declare dependency on Ruby plugin APIs using the depends tag.

LANGUAGE: xml
CODE:
<depends>com.intellij.modules.ruby</depends>

----------------------------------------

TITLE: Registering SimpleAnnotator in plugin.xml
DESCRIPTION: Registers the SimpleAnnotator class for the Java language using the com.intellij.annotator extension point in the plugin configuration file.

LANGUAGE: xml
CODE:
<extensions defaultExtensionNs="com.intellij">
  <annotator
      language="JAVA"
      implementationClass="org.intellij.sdk.language.SimpleAnnotator"/>
</extensions>

----------------------------------------

TITLE: Extended Action Registration in plugin.xml
DESCRIPTION: More detailed XML configuration for action registration, including icon, text overrides, keyboard and mouse shortcuts.

LANGUAGE: XML
CODE:
<action
    id="org.intellij.sdk.action.PopupDialogAction"
    class="org.intellij.sdk.action.PopupDialogAction"
    text="Action Basics Plugin: Popup Dialog Action"
    description="SDK action example"
    icon="SdkIcons.Sdk_default_icon">
  <override-text place="MainMenu" text="Popup Dialog Action"/>
  <keyboard-shortcut
      keymap="$default"
      first-keystroke="control alt A"
      second-keystroke="C"/>
  <mouse-shortcut
      keymap="$default"
      keystroke="control button3 doubleClick"/>
  <add-to-group group-id="ToolsMenu" anchor="first"/>
</action>

----------------------------------------

TITLE: Checking Project Trust Status in Kotlin
DESCRIPTION: Uses the Kotlin extension method to check if a project is trusted.

LANGUAGE: kotlin
CODE:
Project.isTrusted()

----------------------------------------

TITLE: Link Color Property Configuration
DESCRIPTION: Specifies the color property for clickable links within description text areas using the Link.activeForeground system property.

LANGUAGE: properties
CODE:
Link.activeForeground

----------------------------------------

TITLE: Disabling Self-Update Check for IntelliJ Platform Gradle Plugin
DESCRIPTION: Demonstrates how to disable the automatic check for updates of the IntelliJ Platform Gradle Plugin.

LANGUAGE: groovy
CODE:
org.jetbrains.intellij.platform.selfUpdateCheck=false

----------------------------------------

TITLE: Declaring IntelliJ Platform Dependencies (Kotlin)
DESCRIPTION: Kotlin DSL configuration for declaring specific IntelliJ Platform module dependencies in a Gradle build script, showing how to specify version and module coordinates.

LANGUAGE: kotlin
CODE:
dependencies {
  implementation("com.jetbrains.intellij.platform:jps-model-serialization:182.2949.4")
  implementation("com.jetbrains.intellij.platform:jps-model-impl:182.2949.4")
}

----------------------------------------

TITLE: API Status Annotation Example (Java)
DESCRIPTION: Examples of API status annotations used for marking API stability and usage restrictions in IntelliJ Platform plugins.

LANGUAGE: java
CODE:
@ApiStatus.Experimental
@ApiStatus.Internal
@ApiStatus.ScheduledForRemoval
@ApiStatus.Obsolete
@ApiStatus.NonExtendable
@ApiStatus.OverrideOnly
@ApiStatus.AvailableSince

----------------------------------------

TITLE: Handling Return Type References in Java (Pre-2020.2)
DESCRIPTION: Example of handling return type references before PhpStorm 2020.2. This method uses the deprecated getClassReference() method.

LANGUAGE: java
CODE:
private void handleReturnTypeBefore(PhpReturnType returnType) {
  ClassReference classReference = returnType.getClassReference();
  handleReference(classReference);
}

----------------------------------------

TITLE: Implementing SimpleFoldingBuilder in Java
DESCRIPTION: This code snippet defines the SimpleFoldingBuilder class that extends FoldingBuilderEx to replace Simple Language property keys with their values in Java files. It implements methods for building fold regions, getting placeholder text, and determining if regions should be collapsed by default.

LANGUAGE: Java
CODE:
public class SimpleFoldingBuilder extends FoldingBuilderEx implements DumbAware {
    @Override
    public FoldingDescriptor @NotNull [] buildFoldRegions(@NotNull PsiElement root, @NotNull Document document, boolean quick) {
        // ... implementation details
    }

    @Override
    public @Nullable String getPlaceholderText(@NotNull ASTNode node) {
        // ... implementation details
    }

    @Override
    public boolean isCollapsedByDefault(@NotNull ASTNode node) {
        return true;
    }
}

----------------------------------------

TITLE: Registering Language Code Style Settings Provider
DESCRIPTION: XML configuration for registering the SimpleLanguageCodeStyleSettingsProvider using the langCodeStyleSettingsProvider extension point.

LANGUAGE: xml
CODE:
<extensions defaultExtensionNs="com.intellij">
  <langCodeStyleSettingsProvider
      implementation="org.intellij.sdk.language.SimpleLanguageCodeStyleSettingsProvider"/>
</extensions>

----------------------------------------

TITLE: Configuring Gradle Build Script for Android Studio Plugin (Kotlin)
DESCRIPTION: Example of configuring the Gradle build script for an Android Studio plugin project using Kotlin DSL. It sets up the IntelliJ Platform version, declares dependency on the Android plugin, and configures the IDE Development Instance.

LANGUAGE: kotlin
CODE:
intellij {
  // Define IntelliJ Platform against which to build the plugin project.

  // Same IntelliJ IDEA version (2019.1.4) as target 3.5 Android Studio:
  version.set("191.8026.42")

  // Use IntelliJ IDEA CE because it's the basis of the IntelliJ Platform:
  type.set("IC")

  // Require the Android plugin:
  plugins.set(listOf("org.jetbrains.android"))
}

tasks {
  runIde {
    // Absolute path to installed target 3.5 Android Studio to use as
    // IDE Development Instance (the "Contents" directory is macOS specific):
    ideDir.set(file("/Applications/Android Studio.app/Contents"))
  }
}

----------------------------------------

TITLE: HTML Link Summary
DESCRIPTION: HTML tag containing a brief summary of the IntelliJ Platform Persistence Model

LANGUAGE: html
CODE:
<link-summary>Introduction to the IntelliJ Platform Persistence Model.</link-summary>

----------------------------------------

TITLE: Adding Explicit JetBrains Runtime Dependency in Kotlin
DESCRIPTION: Demonstrates how to add an explicit dependency on JetBrains Runtime for running tests or IDE in Kotlin DSL.

LANGUAGE: kotlin
CODE:
repositories {
  mavenCentral()

  intellijPlatform {
    defaultRepositories()
    jetbrainsRuntime()
  }
}

dependencies {
  intellijPlatform {
    intellijIdeaCommunity("%ijPlatform%")
    jetbrainsRuntime("...")
  }
}

----------------------------------------

TITLE: Implementing MultiCaretCodeInsightAction
DESCRIPTION: Shows inheritance from MultiCaretCodeInsightAction instead of CodeInsightAction to support operations across multiple carets. Each caret can have different editor and PSI instances.

LANGUAGE: java
CODE:
class MyAction extends MultiCaretCodeInsightAction

----------------------------------------

TITLE: Using Environment Variables for Signing Configuration
DESCRIPTION: Example of using environment variables to provide signing configuration in Gradle.

LANGUAGE: kotlin
CODE:
signPlugin {
  certificateChain.set(providers.environmentVariable("CERTIFICATE_CHAIN"))
  privateKey.set(providers.environmentVariable("PRIVATE_KEY"))
  password.set(providers.environmentVariable("PRIVATE_KEY_PASSWORD"))
}

publishPlugin {
  token.set(providers.environmentVariable("PUBLISH_TOKEN"))
}

----------------------------------------

TITLE: Plugin Dependency XML Configuration
DESCRIPTION: Example showing plugin dependency configuration in plugin.xml for transitive optional plugin dependencies, introduced in 2019.3.

LANGUAGE: xml
CODE:
<depends>...</depends>

----------------------------------------

TITLE: Handling Parameter Type References in Java (Post-2020.2)
DESCRIPTION: Updated method for fetching class references from parameters after PhpStorm 2020.2. It first retrieves PhpTypeDeclaration and then iterates through class references.

LANGUAGE: java
CODE:
private void handleParameterAfter(Parameter parameter) {
  PhpTypeDeclaration typeDeclaration = PsiTreeUtil.getChildOfType(parameter, PhpTypeDeclaration.class);
  for (ClassReference classReference : typeDeclaration.getClassReferences()) {
    handleReference(classReference);
  }
}

----------------------------------------

TITLE: Implementing Spell Checking Strategy
DESCRIPTION: Basic implementation of spell checking by inheriting from SpellcheckingStrategy class and registering it in com.intellij.spellchecker.support extension point. Used to customize spell checking behavior for specific PSI elements.



----------------------------------------

TITLE: Creating Custom Icon Provider for Properties
DESCRIPTION: Implementation of IconProvider to supply custom icons for Simple Language property elements in the UI.

LANGUAGE: Java
CODE:
public final class SimplePropertyIconProvider extends IconProvider {
    @Override
    public @Nullable Icon getIcon(@NotNull PsiElement element, @IconFlags int flags) {
        if (element instanceof SimpleProperty) {
            return AllIcons.Nodes.Property;
        }
        return null;
    }
}

----------------------------------------

TITLE: Configuring Gradle Build Script for CLion Plugin (2.x)
DESCRIPTION: Minimal Gradle build script configuration for CLion plugin development using IntelliJ Platform Gradle Plugin 2.x. Sets up required repositories and dependencies including the bundled CLion plugin.

LANGUAGE: kotlin
CODE:
repositories {
  mavenCentral()
  intellijPlatform {
    defaultRepositories()
  }
}

dependencies {
  intellijPlatform {
    clion("<versionNumber>")
    bundledPlugin("com.intellij.clion")
  }
}

----------------------------------------

TITLE: Configuring JVM Toolchain for JetBrains Runtime in Kotlin
DESCRIPTION: Shows how to configure the JVM Toolchain to use JetBrains Runtime using Kotlin DSL.

LANGUAGE: kotlin
CODE:
kotlin {
  jvmToolchain {
    languageVersion = JavaLanguageVersion.of(17)
    vendor = JvmVendorSpec.JETBRAINS
  }
}

----------------------------------------

TITLE: Using Local IDE with Bundled JBR in Kotlin
DESCRIPTION: Shows how to use a local IDE installation with bundled JetBrains Runtime for running tests or IDE in Kotlin DSL.

LANGUAGE: kotlin
CODE:
repositories {
  mavenCentral()

  intellijPlatform {
    defaultRepositories()
  }
}

dependencies {
  intellijPlatform {
    local("/Users/hsz/Applications/IntelliJ IDEA Ultimate.app")
  }
}

----------------------------------------

TITLE: Implementing PsiElement Delete Method
DESCRIPTION: Required implementation of the delete() method for PsiElement subclasses that support Safe Delete functionality. This method handles the actual deletion of PSI elements by removing AST nodes and corresponding text ranges.

LANGUAGE: Java
CODE:
public class MyPsiElement extends PsiElement {
    @Override
    public void delete() throws IncorrectOperationException {
        // Custom deletion logic for the PSI element
        ASTNode parentNode = getParent().getNode();
        ASTNode node = getNode();
        parentNode.removeChild(node);
    }
}

----------------------------------------

TITLE: Using CLI Tool for Plugin Signing
DESCRIPTION: Command to sign a plugin ZIP file using the Marketplace ZIP Signer CLI tool.

LANGUAGE: bash
CODE:
java -jar marketplace-zip-signer-cli.jar sign\
  -in "unsigned.zip"\
  -out "signed.zip"\
  -cert-file "/path/to/chain.crt"\
  -key-file "/path/to/private.pem"\
  -key-pass "PRIVATE_KEY_PASSWORD"

----------------------------------------

TITLE: Configuring GoLand IDE Type in Gradle (Kotlin)
DESCRIPTION: Gradle build script configuration for targeting GoLand IDE using the Gradle IntelliJ Plugin 1.x. It sets the IntelliJ IDEA version, type to GO, and includes the Go plugin dependency.

LANGUAGE: kotlin
CODE:
intellij {
  version.set("2020.3")
  type.set("GO")

  // required if Go language API is needed:
  plugins.set(listOf("org.jetbrains.plugins.go"))
}

----------------------------------------

TITLE: Grazie Text Extractor Implementation
DESCRIPTION: Implementation of TextExtractor interface for Grazie plugin integration to extract natural language text from PSI elements. Requires registration in com.intellij.grazie.textExtractor extension point.



----------------------------------------

TITLE: Updating Simple Language Grammar Definition
DESCRIPTION: BNF grammar definition update to include presentation method for property elements.

LANGUAGE: BNF
CODE:
property ::= (KEY? SEPARATOR VALUE?) | KEY {
  mixin="org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl"
  implements="org.intellij.sdk.language.psi.SimpleNamedElement"
  methods=[getKey getValue getName setName getNameIdentifier getPresentation]
}

----------------------------------------

TITLE: Displaying Nette Framework Plugins in Markdown Table
DESCRIPTION: A markdown table showcasing various Nette framework-related plugins for PhpStorm, including their names, descriptions, websites, GitHub repositories, and plugin marketplace links.

LANGUAGE: markdown
CODE:
| Name                    | Description                                                                                                                                                                                                                                                                                                                                                                            | Website                                   | GitHub                                                                           | Plugin                                                                            |
|-------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------|----------------------------------------------------------------------------------|-----------------------------------------------------------------------------------|
| Nette framework helpers | Nette framework helpers make application development in Nette easier. The plugin provides code completion and navigation for Nette components, annotations, and DI service methods in PHP code. It also implements PHP type by `PhpTypeProvider`.                                                                      | [Nette web](https://nette.org/en)         | [intellij-nette](https://github.com/nette-intellij/intellij-nette)               | [Nette plugin](https://plugins.jetbrains.com/plugin/7231-nette-framework-helpers) |
| Latte                   | Nette Latte plugin supports Latte language – the safest & truly intuitive templates for PHP. The plugin implements custom language. Partially support PHP like in .php files (code completion, inspections, references to classes, methods, properties, etc.). Supports load config from XML files located in the project. It implements Stub indexes and more around custom language. | [Latte web](https://latte.nette.org/en)   | [intellij-latte](https://github.com/nette-intellij/intellij-latte)               | [Latte plugin](https://plugins.jetbrains.com/plugin/7457-latte)                   |
| Neon                    | Nette Neon is commonly used for any structured data, such as settings, language translations, etc. It is very similar to YAML. The plugin implements custom language. Easy implementation for Go to PHP classes and completion for classes.                                                                                                                                            | [Neon web](https://ne-on.org)             | [intellij-neon](https://github.com/nette-intellij/intellij-neon)                 | [Neon plugin](https://plugins.jetbrains.com/plugin/7060-neon-support)             |
| Nette Tester            | Nette Tester is a simple and yet convenient PHP code testing tool. The plugin implements "run configurations" and "run line markers". Supports run configurations in a remote interpreter (eg: in Docker or docker-compose).                                                                                                                                                           | [Tester web](https://tester.nette.org/en) | [intellij-nette-tester](https://github.com/nette-intellij/intellij-nette-tester) | [Tester plugin](https://plugins.jetbrains.com/plugin/8226-nette-tester)           |

----------------------------------------

TITLE: Plugin XML Parsing Example in Kotlin
DESCRIPTION: Example showing how to use the PluginAware parse method to access plugin.xml fields

LANGUAGE: kotlin
CODE:
abstract class RetrievePluginNameTask : DefaultTask(), PluginAware

val retrievePluginName by tasks.registering(RetrievePluginNameTask::class) {
    doLast {
        val name = pluginXml.parse { name }.get()
        println("Plugin Name: $name")
    }
}

----------------------------------------

TITLE: Disabling Searchable Options Building in Groovy
DESCRIPTION: Shows how to disable building searchable options for plugins that don't provide custom settings using Groovy DSL.

LANGUAGE: groovy
CODE:
intellijPlatform {
  buildSearchableOptions = false
}

----------------------------------------

TITLE: Implementing MultiHostInjector for RegExp Injection
DESCRIPTION: Java implementation of MultiHostInjector to inject regular expressions into Java string literals.

LANGUAGE: Java
CODE:
final class MyRegExpToJavaInjector implements MultiHostInjector {

  @Override
  public void getLanguagesToInject(@NotNull MultiHostRegistrar registrar,
                                   @NotNull PsiElement context) {
    if (context instanceof PsiLiteralExpression && shouldInject(context)) {
      registrar
        .startInjecting(RegExpLanguage.INSTANCE)
        .addPlace(null, null,
                  (PsiLanguageInjectionHost)context,
                  innerRangeStrippingQuotes(context))
        .doneInjecting();
    }
  }

  @Override
  public @NotNull List<? extends Class<? extends PsiElement>> elementsToInjectIn() {
    return List.of(PsiLiteralExpression.class);
  }
}

----------------------------------------

TITLE: Project Model Actions Table Definition
DESCRIPTION: Markdown table defining the available actions in the project, their implementation files, and base action classes. Each action demonstrates different aspects of the Project Model API.

LANGUAGE: markdown
CODE:
| ID                                | Implementation                                                    | Base Action Class |
|-----------------------------------|-------------------------------------------------------------------|-------------------|
| `ProjectModel.SourceRoots`        | [ShowSourceRootsActions][file:ShowSourceRootsActions]             | `AnAction`        |
| `ProjectModel.ProjectSdk`         | [ProjectSdkAction][file:ProjectSdkAction]                         | `AnAction`        |
| `ProjectModel.ProjectFileIndex`   | [ProjectFileIndexSampleAction][file:ProjectFileIndexSampleAction] | `AnAction`        |
| `ProjectModel.ModificationAction` | [ModificationAction][file:ModificationAction]                     | `AnAction`        |
| `ProjectModel.LibrariesAction`    | [LibrariesAction][file:LibrariesAction]                           | `AnAction`        |

----------------------------------------

TITLE: Configuring plugin.xml for PhpStorm Plugin
DESCRIPTION: Example of declaring dependencies in plugin.xml for a PhpStorm plugin.

LANGUAGE: xml
CODE:
<!-- Targeting PhpStorm, so is dependent on the PHP plugin -->
<depends>com.jetbrains.php</depends>
<depends>com.intellij.modules.platform</depends>

----------------------------------------

TITLE: Implementing Basic LSP Server Support Provider and Descriptor
DESCRIPTION: Kotlin implementation of LspServerSupportProvider and LspServerDescriptor classes to set up basic LSP support for a custom file type. It includes file type checking, server startup logic, and command line creation.

LANGUAGE: kotlin
CODE:
import com.intellij.platform.lsp.api.LspServerSupportProvider
import com.intellij.platform.lsp.api.ProjectWideLspServerDescriptor

internal class FooLspServerSupportProvider : LspServerSupportProvider {
  override fun fileOpened(project: Project, file: VirtualFile, serverStarter: LspServerStarter) {
    if (file.extension == "foo") {
      serverStarter.ensureServerStarted(FooLspServerDescriptor(project))
    }
  }
}

private class FooLspServerDescriptor(project: Project) : ProjectWideLspServerDescriptor(project, "Foo") {
  override fun isSupportedFile(file: VirtualFile) = file.extension == "foo"
  override fun createCommandLine() = GeneralCommandLine("foo", "--stdio")
}

----------------------------------------

TITLE: Implementing Go To Symbol Contributor
DESCRIPTION: Implementation of ChooseByNameContributorEx to enable symbol navigation for Simple Language properties.

LANGUAGE: Java
CODE:
public class SimpleChooseByNameContributor implements ChooseByNameContributorEx {
    @Override
    public void processNames(@NotNull Processor<? super String> processor,
                           @NotNull GlobalSearchScope scope,
                           @Nullable IdFilter filter) {
        Project project = scope.getProject();
        if (project != null) {
            SimplePropertyIndex.getInstance(project)
                    .processAllKeys(processor, scope, filter);
        }
    }

    @Override
    public void processElementsWithName(@NotNull String name,
                                      @NotNull Processor<? super NavigationItem> processor,
                                      @NotNull FindSymbolParameters parameters) {
        SimplePropertyIndex.getInstance(parameters.getProject())
                .processElementsWithName(name, processor, parameters.getSearchScope(),
                        parameters.getIdFilter());
    }
}

----------------------------------------

TITLE: Displaying Downloads Badge for IntelliJ Plugins
DESCRIPTION: Markdown code to embed a shield.io badge showing the number of downloads for an IntelliJ plugin. Requires replacing :pluginId with the actual plugin ID.

LANGUAGE: markdown
CODE:
![Downloads](https://img.shields.io/jetbrains/plugin/d/:pluginId)

----------------------------------------

TITLE: Adding Gradle IDEA Ext Plugin Dependency in Groovy
DESCRIPTION: This snippet demonstrates how to add an explicit dependency on the Gradle IDEA Ext Plugin in a Groovy build script.

LANGUAGE: groovy
CODE:
plugins {
  id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.9'
}

----------------------------------------

TITLE: Disabling Auto-Reload for Specific runIde Task in Kotlin
DESCRIPTION: Demonstrates how to disable automatic reload for a specific runIde task using Kotlin DSL.

LANGUAGE: kotlin
CODE:
tasks {
  runIde {
    autoReload = false
  }
}

----------------------------------------

TITLE: Defining Context in .ws-context JSON
DESCRIPTION: Example of a .ws-context JSON file that forces specific contexts for different file patterns within a project.

LANGUAGE: JSON
CODE:
{
  "framework": "vue",
  "angular-template-syntax": "V_2",
  "src/**/app/**": {
    "framework": null,
    "app.component.html" : {
      "framework": "angular",
      "angular-template-syntax": "V_17"
    }
  },
  "src/**/p*-editor/*.html" : {
    "framework" : "angular"
  }
}

----------------------------------------

TITLE: Plugin Verifier Task Configuration Example (XML)
DESCRIPTION: Sample reference to GitHub workflow configuration for Plugin Verifier integration in CI environments.

LANGUAGE: xml
CODE:
<path>plugin.xml</path>

----------------------------------------

TITLE: Plugin XML Configuration for CLion
DESCRIPTION: Example snippet demonstrating the required module dependencies declaration in plugin.xml for CLion plugin development. Shows both modern and legacy dependency options.

LANGUAGE: xml
CODE:
<depends>com.intellij.modules.clion</depends>

----------------------------------------

TITLE: Basic DOM Interface Definition
DESCRIPTION: Example of defining basic DOM interfaces for XML elements with getters and setters

LANGUAGE: Java
CODE:
interface Root extends com.intellij.util.xml.DomElement {
  Foo getFoo();
}

interface Foo extends com.intellij.util.xml.DomElement {
  List<Bar> getBars();
}

interface Bar extends com.intellij.util.xml.DomElement {
  String getValue();
}

----------------------------------------

TITLE: Defining Token Sets for Simple Language in Java
DESCRIPTION: Definition of token sets for the Simple language, grouping related token types from SimpleTypes.

LANGUAGE: Java
CODE:
package org.intellij.sdk.language.psi;

import com.intellij.psi.tree.TokenSet;

public interface SimpleTokenSets {

  TokenSet IDENTIFIERS = TokenSet.create(SimpleTypes.KEY);

  TokenSet COMMENTS = TokenSet.create(SimpleTypes.COMMENT);

  TokenSet STRINGS = TokenSet.create(SimpleTypes.VALUE);
}

----------------------------------------

TITLE: Displaying Version Badge for ReSharper Plugins
DESCRIPTION: Markdown code to embed a shield.io badge showing the version of a ReSharper plugin. Requires replacing :packageName with the actual package name.

LANGUAGE: markdown
CODE:
![Version](https://img.shields.io/resharper/v/:packageName)

----------------------------------------

TITLE: Adding Gradle IDEA Ext Plugin Dependency in Kotlin
DESCRIPTION: This snippet demonstrates how to add an explicit dependency on the Gradle IDEA Ext Plugin in a Kotlin build script.

LANGUAGE: kotlin
CODE:
plugins {
  id("org.jetbrains.gradle.plugin.idea-ext") version "1.1.9"
}

----------------------------------------

TITLE: Disabling Auto-Reload Globally in Kotlin
DESCRIPTION: Shows how to disable automatic reload of dynamic plugins globally using Kotlin DSL.

LANGUAGE: kotlin
CODE:
intellijPlatform {
  autoReload = false
}

----------------------------------------

TITLE: Creating Custom Module Builder
DESCRIPTION: Implementation of ModuleBuilder to handle custom module creation process. Defines module type, presentation details, and setup logic.

LANGUAGE: java
CODE:
public class DemoModuleBuilder extends ModuleBuilder {
    @Override
    public void setupRootModel(@NotNull ModifiableRootModel modifiableRootModel) {
        // Set up initial module structure
    }

    @Override
    public @NotNull ModuleType<?> getModuleType() {
        return DemoModuleType.getInstance();
    }

    @Override
    public @Nullable ModuleWizardStep getCustomOptionsStep(
            Context context,
            Disposable parentDisposable) {
        return new DemoModuleWizardStep();
    }
}

----------------------------------------

TITLE: Configuring PHP Plugin Dependency in plugin.xml
DESCRIPTION: XML configuration required to declare dependency on the PHP plugin in IntelliJ Platform plugins.

LANGUAGE: xml
CODE:
<depends>com.jetbrains.php</depends>

----------------------------------------

TITLE: Configuring AppCode Plugin Dependencies in plugin.xml
DESCRIPTION: XML configuration showing required module dependencies for AppCode plugins. For versions before 2020.3, use com.intellij.modules.appcode, and for 2020.3+ use com.intellij.appcode.

LANGUAGE: XML
CODE:
<depends>com.intellij.modules.appcode</depends>

----------------------------------------

TITLE: Searching for Library by Root Type and URL in Kotlin
DESCRIPTION: This snippet demonstrates how to search for library entities based on a specific root type and URL using the Workspace Model. It filters LibraryEntity instances that have a matching root URL and type.

LANGUAGE: kotlin
CODE:
val workspaceModel = WorkspaceModel.getInstance(project)
val virtualFileUrlManager = workspaceModel.getVirtualFileUrlManager()
// URL that we will look for in library entities
val virtualFileUrl = virtualFileUrlManager
  .getOrCreateFromUrl("file://foo/bar")
workspaceModel.currentSnapshot.getVirtualFileUrlIndex()
  .findEntitiesByUrl(virtualFileUrl).filterIsInstance<LibraryEntity>().filter {
    it.roots.any {
      it.url == virtualFileUrl &&
              it.type == LibraryRootTypeId.SOURCES
    }
  }

----------------------------------------

TITLE: PSI Element Helper Method Implementation
DESCRIPTION: Implementation of utility methods in SimplePsiImplUtil for handling property names and PSI element manipulation.

LANGUAGE: Java
CODE:
public class SimplePsiImplUtil {
  public static String getName(SimpleProperty element) {
    return getKey(element);
  }

  public static PsiElement setName(SimpleProperty element, String newName) {
    ASTNode keyNode = element.getNode().findChildByType(SimpleTypes.KEY);
    if (keyNode != null) {
      SimpleProperty property =
          SimpleElementFactory.createProperty(element.getProject(), newName);
      ASTNode newKeyNode = property.getFirstChild().getNode();
      element.getNode().replaceChild(keyNode, newKeyNode);
    }
    return element;
  }

  public static PsiElement getNameIdentifier(SimpleProperty element) {
    ASTNode keyNode = element.getNode().findChildByType(SimpleTypes.KEY);
    return keyNode != null ? keyNode.getPsi() : null;
  }
}

----------------------------------------

TITLE: Structural Search Query for plugin.xml Files
DESCRIPTION: Shows the structural search query used to find all plugin.xml files in the project and libraries, which is useful for exploring extension point implementations in other plugins.

LANGUAGE: XML
CODE:
<idea-plugin>

----------------------------------------

TITLE: Testing Framework Configuration in Kotlin
DESCRIPTION: Example showing how to configure test framework dependencies for plugin testing using TestFrameworkType.Platform.

LANGUAGE: kotlin
CODE:
import org.jetbrains.intellij.platform.gradle.TestFrameworkType

dependencies {
  intellijPlatform {
    testFramework(TestFrameworkType.Platform)
  }

  testImplementation("junit:junit:4.13.2")
}

----------------------------------------

TITLE: Adding JUnit4 Runtime Dependency in Groovy
DESCRIPTION: Demonstrates how to add JUnit4 as a test runtime dependency to resolve NoClassDefFoundError for JUnit4 classes in Groovy DSL.

LANGUAGE: groovy
CODE:
dependencies {
  // ...
  testRuntimeOnly 'junit:junit:4.13.2'
}

----------------------------------------

TITLE: Implementing DefaultTemplatePropertiesProvider in Java
DESCRIPTION: Example of implementing the DefaultTemplatePropertiesProvider interface to provide custom properties for file templates, such as PACKAGE_NAME based on the directory a file is created in.

LANGUAGE: Java
CODE:
public class TemplatePackagePropertyProvider implements DefaultTemplatePropertiesProvider {
  @Override
  public void fillProperties(PsiDirectory directory, Properties props) {
    String packageName = JavaDirectoryService.getInstance().getPackage(directory).getQualifiedName();
    props.setProperty("PACKAGE_NAME", packageName);
  }
}

----------------------------------------

TITLE: PhpTypeProvider4 Interface Definition in Java
DESCRIPTION: Defines the PhpTypeProvider4 interface used for implementing custom type providers in PhpStorm.

LANGUAGE: java
CODE:
public interface PhpTypeProvider4 {
  ExtensionPointName<PhpTypeProvider4> EP_NAME = ExtensionPointName.create("com.jetbrains.php.typeProvider4");

  char getKey();

  @Nullable
  PhpType getType(PsiElement element);

  @Nullable
  PhpType complete(String expression, Project project);

  Collection<? extends PhpNamedElement> getBySignature(String expression, Set<String> visited, int depth, Project project);

  default boolean emptyResultIsComplete() {
    return false;
  }

  @Internal
  default boolean interceptsNativeSignature() {
    return false;
  }
}

----------------------------------------

TITLE: Declaring Android Plugin Dependency in plugin.xml
DESCRIPTION: XML snippet showing how to declare a dependency on the Android plugin in the plugin.xml file of an Android Studio plugin project.

LANGUAGE: xml
CODE:
<depends>org.jetbrains.android</depends>

----------------------------------------

TITLE: Dispatching Sequential Events Using Coroutines
DESCRIPTION: Shows how to implement sequential event processing using coroutines with yield() function, replacing nested invokeLater calls with more maintainable coroutine code.

LANGUAGE: kotlin
CODE:
withContext(Dispatchers.EDT) {
  step1()
  yield() // suspends here, dispatches the following block again on EDT
  step2()
  yield()
  step3()
}

----------------------------------------

TITLE: Implementing Structure View Model in Java
DESCRIPTION: Defines a StructureViewModel implementation that extends StructureViewModelBase to provide structure view data representation.

LANGUAGE: Java
CODE:
public class SimpleStructureViewModel extends StructureViewModelBase implements StructureViewModel.ElementInfoProvider {
    public SimpleStructureViewModel(@NotNull SimpleFile root) {
        super(root, new SimpleStructureViewElement(root));
    }

    @Override
    public Sorter @NotNull [] getSorters() {
        return new Sorter[]{Sorter.ALPHA_SORTER};
    }

    @Override
    public boolean isAlwaysShowsPlus(StructureViewTreeElement element) {
        return false;
    }

    @Override
    public boolean isAlwaysLeaf(StructureViewTreeElement element) {
        return element.getValue() instanceof SimpleProperty;
    }
}

----------------------------------------

TITLE: ContainerUtil Unmodifiable Collections Update
DESCRIPTION: Methods in ContainerUtil marked with @Unmodifiable annotation now return truly unmodifiable collections, currently enabled only in internal/test mode.

LANGUAGE: markdown
CODE:
[`ContainerUtil`](%gh-ic%/platform/util/src/com/intellij/util/containers/ContainerUtil.java) using unmodifiable collections\n: Methods marked with [`@Unmodifiable`](%gh-java-annotations%/java8/src/main/java/org/jetbrains/annotations/Unmodifiable.java) now really return unmodifiable collections (only in [internal](enabling_internal.md)/test mode for now).

----------------------------------------

TITLE: Setting Up Plugin Dependencies in Kotlin
DESCRIPTION: Demonstrates how to set up plugin dependencies for the IntelliJ Platform in a Kotlin-based Gradle build file.

LANGUAGE: kotlin
CODE:
repositories {
  intellijPlatform {
    defaultRepositories()
  }
}

dependencies {
  intellijPlatform {
    intellijIdeaCommunity("%ijPlatform%")

    bundledPlugin("com.intellij.java")
    plugin("org.intellij.scala", "2024.1.4")
  }
}

----------------------------------------

TITLE: Adding opentest4j Dependency in Kotlin
DESCRIPTION: Shows how to add the missing opentest4j dependency to resolve NoClassDefFoundError in Kotlin DSL.

LANGUAGE: kotlin
CODE:
dependencies {
  // ...
  testImplementation("org.opentest4j:opentest4j:1.3.0")
}

----------------------------------------

TITLE: Implementing Custom Action Group Behavior in Java
DESCRIPTION: Shows how to implement specific behavior for a custom action group by overriding the update method to control visibility and set a custom icon.

LANGUAGE: Java
CODE:
public class CustomDefaultActionGroup extends DefaultActionGroup {
  @Override
  public void update(AnActionEvent event) {
    // Enable/disable depending on whether a user is editing
    Editor editor = event.getData(CommonDataKeys.EDITOR);
    event.getPresentation().setEnabled(editor != null);
    // Take this opportunity to set an icon for the group.
    event.getPresentation().setIcon(SdkIcons.Sdk_default_icon);
  }
}

----------------------------------------

TITLE: Handling Return Type References in Java (Post-2020.2)
DESCRIPTION: Updated method for handling return type references after PhpStorm 2020.2. It iterates through class references using getClassReferences() method.

LANGUAGE: java
CODE:
private void handleReturnTypeAfter(PhpReturnType returnType) {
  for (ClassReference classReference : returnType.getClassReferences()) {
    handleReference(classReference);
  }
}

----------------------------------------

TITLE: Configuring TOC Redirects in XML
DESCRIPTION: Configuration for handling page redirects when renaming documentation pages using accepts-web-file-names attribute.

LANGUAGE: xml
CODE:
<toc-element
    id="themes_getting_started.md"
    accepts-web-file-names="themes.html,themes-intro.html"/>

----------------------------------------

TITLE: Proper Dispatcher Parallelism Limitation
DESCRIPTION: Demonstrates the correct way to limit dispatcher parallelism by storing the limited dispatcher instance as a static property rather than creating new instances on each call.

LANGUAGE: kotlin
CODE:
private val myDispatcher = Dispatchers.Default.limitedParallelism(3)

suspend fun doSomething() {
  withContext(myDispatcher) {
    // ...
  }
}

----------------------------------------

TITLE: Creating Custom File Template Action in Java
DESCRIPTION: Demonstrates how to create a custom action for creating files from templates by extending CreateFileFromTemplateAction.

LANGUAGE: java
CODE:
public class CreateMyClassAction extends CreateFileFromTemplateAction {

  @Override
  protected void buildDialog(Project project, PsiDirectory directory,
      CreateFileFromTemplateDialog.Builder builder) {
    builder
    .setTitle("New My File")
    .addKind("Class", MyIcons.CLASS_ICON, "My Class");
  }

  @Override
  protected String getActionName(PsiDirectory directory,
      @NotNull String newName, String templateName) {
    return "Create My Class: " + newName;
  }
}

----------------------------------------

TITLE: FileType Registration Extension Point
DESCRIPTION: Recommended extension point registration for file types replacing deprecated FileTypeFactory, introduced in 2019.2.

LANGUAGE: xml
CODE:
<com.intellij.fileType>

----------------------------------------

TITLE: Applying IntelliJ Platform Plugin for Multi-Module Project in Kotlin
DESCRIPTION: Demonstrates how to apply the IntelliJ Platform Gradle Plugin for the root module of a multi-module project in a Kotlin-based Gradle build file.

LANGUAGE: kotlin
CODE:
plugins {
  id("org.jetbrains.intellij.platform") version "%intellij-platform-gradle-plugin-version%"
}

----------------------------------------

TITLE: Basic IntelliJ Platform Configuration
DESCRIPTION: Example of basic plugin configuration using the intellijPlatform extension

LANGUAGE: kotlin
CODE:
intellijPlatform {
  buildSearchableOptions = true
  instrumentCode = true
  projectName = project.name
  sandboxContainer = "..."

  pluginConfiguration {
    // ...
  }
  publishing {
    // ...
  }
  signing {
    // ...
  }
  pluginVerification {
    // ...
  }
}

LANGUAGE: groovy
CODE:
intellijPlatform {
  buildSearchableOptions = true
  instrumentCode = true
  projectName = project.name
  sandboxContainer = '...'

  pluginConfiguration {
    // ...
  }
  publishing {
    // ...
  }
  signing {
    // ...
  }
  pluginVerification {
    // ...
  }
}

----------------------------------------

TITLE: Registering Framework Extension in XML
DESCRIPTION: XML configuration to register the custom framework as an extension point in plugin.xml.

LANGUAGE: xml
CODE:
<extensions defaultExtensionNs="com.intellij">
  <framework.type
      implementation="org.intellij.sdk.framework.DemoFramework"/>
</extensions>

----------------------------------------

TITLE: Reference to ComboBoxButton Implementation in Java
DESCRIPTION: Reference to the ComboBoxButton class which implements the toolbar drop-down list functionality in the IntelliJ Platform SDK.

LANGUAGE: java
CODE:
com.intellij.openapi.actionSystem.ex.ComboBoxAction

----------------------------------------

TITLE: Configuring runIdeForUiTests Task in Kotlin
DESCRIPTION: Kotlin code snippet showing how to register and configure the runIdeForUiTests task

LANGUAGE: kotlin
CODE:
val runIdeForUiTests by intellijPlatformTesting.runIde.registering {
  task {
    jvmArgumentProviders += CommandLineArgumentProvider {
      listOf(
        "-Drobot-server.port=8082",
        "-Dide.mac.message.dialogs.as.sheets=false",
        "-Djb.privacy.policy.text=<!--999.999-->",
        "-Djb.consents.confirmation.enabled=false",
      )
    }
  }
  plugins {
    robotServerPlugin()
  }
}

----------------------------------------

TITLE: Comparing Incorrect and Correct IO Dispatcher Usage in Kotlin
DESCRIPTION: Demonstrates the proper way to use the IO dispatcher for file operations in a coroutine. The correct version limits the IO dispatcher's scope to only the actual file read operation.

LANGUAGE: kotlin
CODE:
suspend fun readDataFromFile(): Data {
  return withContext(Dispatchers.IO) {
    val fileName = computeFileName()
    val bytes = readFile(fileName)
    Data(parseBytes(bytes))
  }
}

LANGUAGE: kotlin
CODE:
suspend fun readDataFromFile(): Data {
  val fileName = computeFileName()
  val bytes = withContext(Dispatchers.IO) {
    readFile(fileName)
  }
  return Data(parseBytes(bytes))
}

----------------------------------------

TITLE: Customizing File Creation Dialog in Java
DESCRIPTION: Shows how to customize the file creation dialog with multiple entity types for a language.

LANGUAGE: java
CODE:
@Override
protected void buildDialog(Project project, PsiDirectory directory,
    CreateFileFromTemplateDialog.Builder builder) {
  builder
    .setTitle("My File")
    .addKind("Class", MyIcons.CLASS_ICON, "My Class")
    .addKind("Record", MyIcons.RECORD_ICON, "My Record")
    .addKind("Enum", MyIcons.ENUM_ICON, "My Enum");
}

----------------------------------------

TITLE: Method Reference Example
DESCRIPTION: Example of method reference format used in the documentation for breaking changes

LANGUAGE: markdown
CODE:
`com.intellij.openapi.externalSystem.dependency.analyzer.DependencyAnalyzerExtension.isApplicable(ProjectSystemId)` abstract method added

----------------------------------------

TITLE: Parametrizing IntelliJ Platform Dependency in Kotlin
DESCRIPTION: Demonstrates how to parametrize the IntelliJ Platform dependency using Gradle properties in a Kotlin-based Gradle build file.

LANGUAGE: kotlin
CODE:
dependencies {
  intellijPlatform {
    val type = providers.gradleProperty("platformType")
    val version = providers.gradleProperty("platformVersion")

    create(type, version)
  }
}

----------------------------------------

TITLE: Applying IntelliJ Platform Plugin for Multi-Module Project in Groovy
DESCRIPTION: Shows how to apply the IntelliJ Platform Gradle Plugin for the root module of a multi-module project in a Groovy-based Gradle build file.

LANGUAGE: groovy
CODE:
plugins {
  id 'org.jetbrains.intellij.platform' version '%intellij-platform-gradle-plugin-version%'
}

----------------------------------------

TITLE: Rendering Documentation HTML - Java
DESCRIPTION: Creates formatted HTML documentation output for Simple Language properties.

LANGUAGE: java
CODE:
private @NotNull String renderFullDoc(@NotNull SimpleProperty element) {
  StringBuilder sb = new StringBuilder();
  String docComment = SimpleUtil.findDocumentationComment(element);
  if (docComment != null) {
    sb.append(DocumentationMarkup.CONTENT_START)
      .append(docComment)
      .append(DocumentationMarkup.CONTENT_END);
  }
  sb.append(DocumentationMarkup.SECTIONS_START);
  addKeyValueSection("Key", element.getKey(), sb);
  addKeyValueSection("Value", element.getValue(), sb);
  addKeyValueSection("File", element.getContainingFile().getName(), sb);
  sb.append(DocumentationMarkup.SECTIONS_END);
  return sb.toString();
}

----------------------------------------

TITLE: Implementing ComboBox with Browse Button
DESCRIPTION: Code example showing how to create a ComboBox with a built-in browse button using ExtendableTextField. The implementation includes creating an extension with custom icons and click handler.

LANGUAGE: kotlin
CODE:
val browseExtension = ExtendableTextComponent.Extension.create(
    AllIcons.General.OpenDisk,
    AllIcons.General.OpenDiskHover,
    "Open file",
    { System.out.println("Browse file clicked") }
)
val extComboBox = ComboBox<String>(STRING_VALUES)
extComboBox.setEditable(true)
extComboBox.setEditor(object : BasicComboBoxEditor() {
  override fun createEditorComponent(): JTextField {
    val ecbEditor = ExtendableTextField()
    ecbEditor.addExtension(browseExtension)
    ecbEditor.setBorder(null)
    return ecbEditor
  }
})

LANGUAGE: java
CODE:
ExtendableTextComponent.Extension browseExtension =
  ExtendableTextComponent.Extension.create(
    AllIcons.General.OpenDisk,
    AllIcons.General.OpenDiskHover,
    "Open file",
    () -> System.out.println("Browse file clicked")
  );
ComboBox<String> extComboBox = new ComboBox<>(STRING_VALUES);
extComboBox.setEditable(true);
extComboBox.setEditor(new BasicComboBoxEditor() {
  @Override
  protected JTextField createEditorComponent() {
    ExtendableTextField ecbEditor = new ExtendableTextField();
    ecbEditor.addExtension(browseExtension);
    ecbEditor.setBorder(null);
    return ecbEditor;
  }
});

----------------------------------------

TITLE: Running IDE with Default Argument in Groovy
DESCRIPTION: This Groovy snippet shows how to run the IDE with a default argument provided, such as a path to a project or file to open automatically. It configures the runIde task and adds a CommandLineArgumentProvider to supply the argument.

LANGUAGE: groovy
CODE:
runIde {
  argumentProviders.add({
    ['/path/to/the/project']
  } as CommandLineArgumentProvider)
}

----------------------------------------

TITLE: Basic Coroutine Dump Structure
DESCRIPTION: Demonstrates the hierarchical structure of a coroutine dump showing parent-child relationships and stackframes

LANGUAGE: plaintext
CODE:
- parent coroutine header
	at stackframe
	at stackframe
	...
	- child coroutine 0 header
		at stackframe
		at stackframe
		...
		- grandchild coroutine header
			at stackframe
			at stackframe
			...
	- child coroutine 1 header
	- child coroutine 2 header
		at stackframe
		at stackframe
		...

----------------------------------------

TITLE: Registering Internal File Template in XML
DESCRIPTION: Demonstrates how to register an internal file template to expose it in the Files category.

LANGUAGE: xml
CODE:
<internalFileTemplate name="My Record"/>

----------------------------------------

TITLE: Adding Custom File to Plugin Distribution in Groovy
DESCRIPTION: This snippet demonstrates how to add a custom file to the plugin distribution using the prepareSandbox task in Groovy DSL. It copies a file into the plugin's lib directory.

LANGUAGE: groovy
CODE:
prepareSandbox {
  from("yourFile") {
    into "${intellij.pluginName.get()}/lib/"
  }
}

----------------------------------------

TITLE: Implementing Formatter Test Method in Java
DESCRIPTION: Adds a testFormatter() method to the SimpleCodeInsightTest class. This method configures the test fixture, sets code style settings, formats the file, and compares the result with expected output.

LANGUAGE: java
CODE:
```java
```

----------------------------------------

TITLE: Implementing Legal Text in Kotlin UI DSL
DESCRIPTION: This snippet demonstrates how to add a checkbox with a long legal text comment using Kotlin UI DSL. It shows how to format and structure multi-line comments for legal purposes.

LANGUAGE: kotlin
CODE:
panel {
  row {
    checkBox("Send usage statistics when using EAP versions")
      .comment("""
        <p>Help JetBrains improve its products by sending anonymous
        data about features and plugins used, hardware and software
        configuration, statistics on types of files, number of files
        per project, etc.</p>
        <br/>
        <p>Please note that this will not include personal data or
        any sensitive information, such as source code, file names,
        etc. The data sent complies with the
        <a href=\"https://www.jetbrains.com\">
        JetBrains Privacy Policy</a></p>
        """.trimIndent()
      )
  }
}

----------------------------------------

TITLE: Accessing IntelliJ Platform from Gradle Task in Kotlin
DESCRIPTION: This snippet demonstrates how to create a custom Gradle task that can access IntelliJ Platform features using Kotlin. It uses the IntelliJPlatformVersionAware interface to inject platform-related information during the configuration phase.

LANGUAGE: kotlin
CODE:
import org.jetbrains.intellij.platform.gradle.tasks.aware.IntelliJPlatformVersionAware

abstract class MyTask : DefaultTask(), IntelliJPlatformVersionAware

val myTask by tasks.registering(MyTask::class) {
  doLast {
    println("platformPath = \n${platformPath}")
    println("productInfo.buildNumber = ${productInfo.buildNumber}")
  }
}

----------------------------------------

TITLE: Plugin Leak Example with Intersection Scopes
DESCRIPTION: Illustrates how using intersection scopes incorrectly can lead to plugin leaks when one plugin's scope remains active while another is unloaded.

LANGUAGE: kotlin
CODE:
project.getCoroutineScope(PluginBService::class.java).launch {
  project.getService(PluginAService::class.java)
}

----------------------------------------

TITLE: Setting Framework Mandatory Attributes in Java
DESCRIPTION: Implementation of required framework attributes including unique ID, presentable name, and icon.

LANGUAGE: java
CODE:
final class DemoFramework extends FrameworkTypeEx {

  public static final String FRAMEWORK_ID =
      "org.intellij.sdk.framework.DemoFramework";

  DemoFramework() {
    super(FRAMEWORK_ID);
  }
}

----------------------------------------

TITLE: Defining Extension Point in plugin.xml for IntelliJ Platform SDK
DESCRIPTION: This snippet shows how to define the com.intellij.themeProvider extension point in the plugin.xml file. It specifies the implementation file and the extension point class.

LANGUAGE: markdown
CODE:
| Name                         | Implementation                                          | Extension Point Class |
|------------------------------|---------------------------------------------------------|-----------------------|
| `com.intellij.themeProvider` | [theme_basics.theme.json][file:theme_basics.theme.json] |                       |

----------------------------------------

TITLE: Adding Custom File to Plugin Distribution in Kotlin
DESCRIPTION: This snippet demonstrates how to add a custom file to the plugin distribution using the prepareSandbox task in Kotlin DSL. It copies a file into the plugin's lib directory.

LANGUAGE: kotlin
CODE:
tasks {
  prepareSandbox {
    from("yourFile") {
      into("${intellij.pluginName.get()}/lib/")
    }
  }
}

----------------------------------------

TITLE: Implementing Grouped Controls with Inline Text in Kotlin UI DSL
DESCRIPTION: This code snippet shows how to create grouped controls with inline help text using Kotlin UI DSL. It demonstrates the use of Panel.group() for creating titled panels and adding multi-line comments.

LANGUAGE: kotlin
CODE:
panel {
  group("Build and Run") {
    row("Build and run with:") {
      comboBox(listOf("IntelliJ IDEA", "Gradle"))
    }
    row("Run tests with:") {
      comboBox(listOf("IntelliJ IDEA", "Gradle"))
    }
    row {
      comment("""
        <p>By default IntelliJ IDEA uses Gradle to build the project
        and run the tasks.</p>
        <p>In a pure Java/Kotlin project, building and running
        by means of IDE might be faster, thanks to optimizations.
        Note, that the IDE doesn't support all Gradle plugins and
        the project might not be built correctly with some of them.</p>
        """.trimIndent()
      )
    }
  }
  group("Gradle") {
    row("Use Gradle from:") {
      comboBox(gradleModel)
    }
  }
}

----------------------------------------

TITLE: Disabling JetBrains Cache Redirector
DESCRIPTION: Demonstrates how to disable the use of JetBrains Cache Redirector when resolving Maven repositories or resources used by the IntelliJ Platform Gradle Plugin.

LANGUAGE: groovy
CODE:
org.jetbrains.intellij.platform.useCacheRedirector=false

----------------------------------------

TITLE: Converting PsiElement to Multiple UElement Types in Java
DESCRIPTION: Shows how to convert a PsiElement to one of multiple possible UElement types in Java using UastFacade.

LANGUAGE: java
CODE:
UastFacade.INSTANCE.convertElementWithParent(element,
    new Class[]{UInjectionHost.class, UReferenceExpression.class});

----------------------------------------

TITLE: Implementing Framework Visual Components in Java
DESCRIPTION: Implementation of methods to define framework's visual representation including name and icon.

LANGUAGE: java
CODE:
final class DemoFramework extends FrameworkTypeEx {
  @NotNull
  @Override
  public String getPresentableName() {
    return "SDK Demo Framework";
  }

  @NotNull
  @Override
  public Icon getIcon() {
    return SdkIcons.Sdk_default_icon;
  }
}

----------------------------------------

TITLE: Extension Points Configuration Table
DESCRIPTION: Configuration table showing the mapping between extension point names, their implementations, and corresponding extension point classes for Settings integration in IntelliJ Platform.

LANGUAGE: markdown
CODE:
| Name                                   | Implementation                                          | Extension Point Class      |
|----------------------------------------|---------------------------------------------------------|----------------------------|
| `com.intellij.applicationConfigurable` | [AppSettingsConfigurable][file:AppSettingsConfigurable] | `Configurable`             |
| `com.intellij.applicationService`      | [AppSettings][file:AppSettings]                         | `PersistentStateComponent` |

----------------------------------------

TITLE: Modifying JVM Arguments for runIde Task in Kotlin
DESCRIPTION: This snippet demonstrates how to add JVM arguments to the runIde task using Kotlin DSL in Gradle. It shows how to set a custom system property.

LANGUAGE: kotlin
CODE:
tasks {
  runIde {
    jvmArgs("-DmyProperty=value")
  }
}

----------------------------------------

TITLE: Visualizing Disposer Tree Structure with PlantUML
DESCRIPTION: A PlantUML diagram illustrating the hierarchical structure of Disposables managed by the Disposer.

LANGUAGE: plantuml
CODE:
@startuml

skinparam DefaultFontName JetBrains Sans
skinparam DefaultFontSize 13
skinparam DefaultTextAlignment center
hide empty members
hide circle

rectangle "Root\nDisposable" as root

rectangle "Application" as application
rectangle "App\nListener" as listener
rectangle "Dialog\nWrapper" as dialogDisposable
rectangle "Dialog\nResource" as dialogResource

rectangle "Services of\nApplication" as applicationServices
rectangle "App\nService 1" as appService1
rectangle "App\nService 2" as appService2

rectangle "My\nProject" as project
rectangle "My\nListener" as projectListener
rectangle "My\nAlarm" as projectAlarm

rectangle "Services of\nMy Project" as projectServices
rectangle "Project\nService A" as projectService1
rectangle "Project\nService B" as projectService2

root -- application
root -- applicationServices
root -- project
root -- projectServices

application -- listener
application -- dialogDisposable
dialogDisposable -- dialogResource

applicationServices -- appService1
applicationServices -- appService2

project -- projectListener
project -- projectAlarm

projectServices -- projectService1
projectServices -- projectService2

@enduml

----------------------------------------

TITLE: Accessing Font Styles in Kotlin for IntelliJ Platform
DESCRIPTION: Demonstrates how to use JBFont methods to access various font styles and sizes in the IntelliJ Platform SDK. These methods are used to set appropriate typography for different UI elements.

LANGUAGE: kotlin
CODE:
JBFont.h0().asBold()
JBFont.h1().asBold()
JBFont.h2()
JBFont.h2().asBold()
JBFont.h3()
JBFont.h3().asBold()
JBFont.h4().asBold()
JBFont.regular().asBold()
JBFont.regular()
JBFont.medium()
JBFont.medium().asBold()
JBFont.small()

----------------------------------------

TITLE: Enabling Source Download for IntelliJ Platform Plugin
DESCRIPTION: Shows how to enable downloading of sources when working with the IntelliJ Platform Gradle Plugin. This property is passed to the IDEA Gradle Plugin.

LANGUAGE: groovy
CODE:
org.jetbrains.intellij.platform.downloadSources=true

----------------------------------------

TITLE: Converting PsiElement to Multiple UElement Types in Kotlin
DESCRIPTION: Illustrates converting a PsiElement to one of multiple possible UElement types in Kotlin using UastFacade.

LANGUAGE: kotlin
CODE:
UastFacade.convertElementWithParent(element,
    UInjectionHost::class.java, UReferenceExpression::class.java)

----------------------------------------

TITLE: Registering Live Template Macro Extension Point
DESCRIPTION: XML configuration to register the custom macro implementation with the IntelliJ Platform using the liveTemplateMacro extension point.

LANGUAGE: xml
CODE:
<extensions defaultExtensionNs="com.intellij">
  <liveTemplateMacro
      implementation="org.intellij.sdk.liveTemplates.TitleCaseMacro"/>
</extensions>

----------------------------------------

TITLE: Light Java Test Case Implementation in Kotlin
DESCRIPTION: JUnit4 variant of LightJavaCodeInsightFixtureTestCase for testing Java code in the IntelliJ Platform.

LANGUAGE: Kotlin
CODE:
LightJavaCodeInsightFixtureTestCase4

----------------------------------------

TITLE: Demonstrating Coroutine Execution Across Multiple Threads in Kotlin
DESCRIPTION: Illustrates how a single coroutine can execute across different threads, even when using the same dispatcher. The example shows a suspending task and UI update on different threads and the EDT.

LANGUAGE: kotlin
CODE:
suspend fun doSomething() {
  val fetchedData = suspendingTask()
  withContext(Dispatchers.EDT) {
    updateUI(fetchedData)
  }
}

suspend fun suspendingTask(): Data {
  // fetch data from the internet
}

----------------------------------------

TITLE: Creating Inline Validation Message in Java
DESCRIPTION: This Java snippet demonstrates how to create a ValidationInfo object for displaying an inline error message in a dialog. The null component parameter indicates that the message should be shown in the dialog's general message area.

LANGUAGE: java
CODE:
new ValidationInfo(
    "The host cannot be reached. Check the address and credentials.");

----------------------------------------

TITLE: Configuring signPlugin Task in Gradle (Groovy DSL)
DESCRIPTION: Example configuration for the signPlugin task in the Gradle build file using Groovy DSL.

LANGUAGE: groovy
CODE:
signPlugin {
  certificateChain = """
    -----BEGIN CERTIFICATE-----
    MIIElgCCAn4CCQDo83LWYj2QSTANBgkqhkiG9w0BAQsFADANMQswCQYDVQQGEwJQ
    ...
    gdZzxCN8t1EmH8kD2Yve6YKGFCRAIIzveEg=
    -----END CERTIFICATE-----
  """.stripIndent()

  privateKey = """
    -----BEGIN RSA PRIVATE KEY-----
    MIIJKgIBAAKCAgEAwU8awS22Rw902BmwVDDBMlTREX440BAAVM40NW3E0lJ7YTJG
    ...
    EnNBfIVFhh6khisKqTBWSEo5iS2RYJcuZs961riCn1LARztiaXL4l17oW8t+Qw==
    -----END RSA PRIVATE KEY-----
  """.stripIndent()

  password = "8awS22%#3(4wVDDBMlTREX"
}

publishPlugin {
  token = "perm:a961riC....l17oW8t+Qw=="
}

----------------------------------------

TITLE: Implementing Module Wizard Step
DESCRIPTION: Custom wizard step implementation for module creation UI. Provides form components and validation logic for module configuration.

LANGUAGE: java
CODE:
public class DemoModuleWizardStep extends ModuleWizardStep {
    @Override
    public JComponent getComponent() {
        return new JLabel("Put your content here");
    }

    @Override
    public void updateDataModel() {
        // Update module configuration based on UI inputs
    }
}

----------------------------------------

TITLE: Implementing ServiceLoader with Plugin ClassLoader
DESCRIPTION: Code pattern for properly using ServiceLoader within a plugin by temporarily setting the context ClassLoader to the plugin's ClassLoader and ensuring it's properly restored.

LANGUAGE: java
CODE:
Thread currentThread = Thread.currentThread();
ClassLoader originalClassLoader = currentThread.getContextClassLoader();
ClassLoader pluginClassLoader = this.getClass().getClassLoader();
try {
  currentThread.setContextClassLoader(pluginClassLoader);
  // code working with ServiceLoader here
} finally {
  currentThread.setContextClassLoader(originalClassLoader);
}

----------------------------------------

TITLE: Sample Internal API Usage
DESCRIPTION: Example showing BuildNumber.currentVersion() being replaced with ApplicationInfo.getBuild()

LANGUAGE: java
CODE:
// Old internal API
BuildNumber.currentVersion()

// New public API
ApplicationInfo.getBuild()

----------------------------------------

TITLE: Converting PsiElement to Specific UElement Type in Java
DESCRIPTION: Illustrates converting a PsiElement to a specific UElement type (UCallExpression) in Java.

LANGUAGE: java
CODE:
UastContextKt.toUElement(element, UCallExpression.class);

----------------------------------------

TITLE: Customizing Editor Scroll Bar Colors in XML
DESCRIPTION: This XML snippet shows how to customize the colors of editor scroll bars, including transparency settings for macOS.

LANGUAGE: xml
CODE:
<color>
  <option name="ScrollBar.Mac.trackColor" value="000000"/>
  <option name="ScrollBar.Mac.thumbColor" value="FFFFFFBE"/>
</color>

----------------------------------------

TITLE: Adding Dependency on Local Plugin in Kotlin
DESCRIPTION: This snippet shows how to add a dependency on a plugin available in the local file system using Kotlin DSL in Gradle. It demonstrates pointing to a plugin's directory.

LANGUAGE: kotlin
CODE:
intellij {
    plugins.set(listOf(file("/path/to/plugin/")))
}

----------------------------------------

TITLE: Configuring JaCoCo for Accurate Coverage in Kotlin
DESCRIPTION: Shows how to configure JaCoCo for accurate coverage reporting when using PathClassLoader and instrumented code in Kotlin DSL.

LANGUAGE: kotlin
CODE:
tasks {
  withType<Test> {
    configure<JacocoTaskExtension> {
      isIncludeNoLocationClasses = true
      excludes = listOf("jdk.internal.*")
    }
  }

  jacocoTestReport {
    classDirectories.setFrom(instrumentCode)
  }

  jacocoTestCoverageVerification {
    classDirectories.setFrom(instrumentCode)
  }
}

----------------------------------------

TITLE: Implementing RunConfigurationOptions in Java for IntelliJ Platform SDK
DESCRIPTION: This code snippet demonstrates the implementation of RunConfigurationOptions to store settings for the custom run configuration. It includes a property for the script name.

LANGUAGE: Java
CODE:
public class DemoRunConfigurationOptions extends RunConfigurationOptions {
  private String myScriptName = "";

  public String getScriptName() {
    return myScriptName;
  }

  public void setScriptName(String scriptName) {
    myScriptName = scriptName;
  }
}

----------------------------------------

TITLE: Implementing tearDown Method in Kotlin Tests
DESCRIPTION: Shows how to properly implement tearDown method in Kotlin test classes to avoid flaky tests and handle cleanup properly. Demonstrates calling super.tearDown() in finally block.

LANGUAGE: kotlin
CODE:
override fun tearDown() {
  try {
    // test specific tear down calls
  } catch (e: Throwable) {
    addSuppressedException(e)
  } finally {
    super.tearDown()
  }
}

----------------------------------------

TITLE: XML Markup for Test Running Instructions
DESCRIPTION: XML snippet containing structured documentation for running tests in an IntelliJ Platform plugin project. Includes procedural steps and troubleshooting information.

LANGUAGE: xml
CODE:
<snippet id="runTests">

Run the test and make sure it's successful.

<procedure title="Running tests" collapsible="true" default-state="collapsed">

1. Open the <control>Gradle</control> Tool Window.
2. Select the <control>simple_language_plugin</control> node.
  You may need to reimport it as a Gradle project.
3. Drill down under <control>simple_language_plugin</control> to <control>Tasks</control>, <control>verification</control>, <control>test</control> task.
4. Run the <control>test</control> task.

The results are displayed in the <control>Run</control> Tool Window, and also written to the <path>simple_language_plugin/build/test-results/test</path> directory.

If the <control>Run</control> Tool Window displays the error *Test events were not received*, do the following:
1. In the <control>Gradle</control> Tool Window, drill down under <control>simple_language_plugin</control> to <control>Tasks</control>, <control>build</control>, <control>clean</control> task.
2. Run the <control>clean</control> task, which deletes the <path>simple_language_plugin/build</path> directory.
3. Restart the test.

</procedure>

</snippet>

----------------------------------------

TITLE: Radio Button Group Implementation
DESCRIPTION: Demonstrates creating radio button groups with property bindings for selection state.

LANGUAGE: kotlin
CODE:
buttonGroup(mySettings::providerType) {
  row { radioButton("In native Keychain", ProviderType.KEYCHAIN) }
  row { radioButton("In KeePass", ProviderType.KEEPASS) }
}

----------------------------------------

TITLE: Checking JCEF Support in Java
DESCRIPTION: Checks if JCEF is supported in the running IDE before using JCEF API.

LANGUAGE: java
CODE:
if (JBCefApp.isSupported()) {
  // use JCEF
} else {
  // optional fallback to an alternative browser-less solution
}

----------------------------------------

TITLE: Disabling Searchable Options Build in Kotlin
DESCRIPTION: This snippet shows how to disable the building of searchable options task using Kotlin DSL in Gradle. This is useful for plugins that don't provide custom settings.

LANGUAGE: kotlin
CODE:
tasks {
  buildSearchableOptions {
    enabled = false
  }
}

----------------------------------------

TITLE: Applying IntelliJ Platform Module Plugin in Groovy
DESCRIPTION: Shows how to apply the IntelliJ Platform Module Gradle Plugin for submodules in a multi-module project using a Groovy-based Gradle build file.

LANGUAGE: groovy
CODE:
plugins {
  id 'org.jetbrains.intellij.platform.module'
}

----------------------------------------

TITLE: Implementing AppSettings Class in Java
DESCRIPTION: Java implementation of the AppSettings class, which extends PersistentStateComponent to store settings persistently.

LANGUAGE: Java
CODE:
public class AppSettings implements PersistentStateComponent<AppSettings.State> {
    @State(
            name = "org.intellij.sdk.settings.AppSettings",
            storages = {@Storage("SdkSettingsPlugin.xml")}
    )
    public static class State {
        public String userId = "John Q. Public";
        public boolean ideaStatus = false;
    }

    private State myState = new State();

    @Nullable
    @Override
    public State getState() {
        return myState;
    }

    @Override
    public void loadState(@NotNull State state) {
        myState = state;
    }

    public static AppSettings getInstance() {
        return ServiceManager.getService(AppSettings.class);
    }
}

----------------------------------------

TITLE: Launching Coroutines in Project Service - Kotlin
DESCRIPTION: Implementation of a coroutine launcher in a project-level service. Uses constructor injection to receive both Project and CoroutineScope, and provides a method to schedule coroutine execution within the project context.

LANGUAGE: kotlin
CODE:
@Service(Service.Level.PROJECT)
class MyProjectService(
  private val project: Project,
  private val cs: CoroutineScope
) {
  fun scheduleSomething() {
    cs.launch {
      // do something
    }
  }
}

----------------------------------------

TITLE: Configuring Gradle Build Script for PyCharm Plugin
DESCRIPTION: Example of configuring the Gradle build script to target PyCharm using the intellij.type property.

LANGUAGE: kotlin
CODE:
intellij {
  type.set("PY")
  version.set("2019.2.3")
}

LANGUAGE: groovy
CODE:
intellij {
  type = 'PY'
  version = '2019.2.3'
}

----------------------------------------

TITLE: Component Cell Grouping
DESCRIPTION: Demonstrates how to group multiple components into a single cell in the grid layout.

LANGUAGE: kotlin
CODE:
row {
  // These two components will occupy two columns in the grid
  label(...)
  textField(...)

  // These two components will be placed in the same grid cell
  cell {
    label(...)
    textField(...)
  }
}

----------------------------------------

TITLE: Configuring Debug Port for External Builder
DESCRIPTION: VM option to set a fixed debug port for the external builder process to enable debugging.

LANGUAGE: plain text
CODE:
-Dcompiler.process.debug.port=<port-number>

----------------------------------------

TITLE: Setting System Properties for runIde Task in Groovy
DESCRIPTION: This snippet shows how to set system properties for the runIde task using Groovy DSL in Gradle. It demonstrates setting a custom name-value pair.

LANGUAGE: groovy
CODE:
runIde {
  systemProperty("name", "value")
}

----------------------------------------

TITLE: Specifying Custom Android Studio Releases URL
DESCRIPTION: Demonstrates how to set a custom URL for fetching the list of Android Studio releases. This list is used for plugin verification.

LANGUAGE: groovy
CODE:
org.jetbrains.intellij.platform.productsReleasesAndroidStudioUrl=https://...

----------------------------------------

TITLE: Defining Input Test Data for Annotator in Java
DESCRIPTION: Creates a test file with Simple Language embedded in Java code, including valid and invalid uses of the 'simple:' prefix and keys.

LANGUAGE: java
CODE:
public class Test {
  public static void main(String[] args) {
    System.out.println("simple:website");
    System.out.println("simple:<error descr=\"Unresolved property\">websit</error>");
  }
}

----------------------------------------

TITLE: Launching Coroutines in Application Service - Kotlin
DESCRIPTION: Implementation of a coroutine launcher in an application-level service. Uses constructor injection to receive a CoroutineScope and provides a method to schedule coroutine execution.

LANGUAGE: kotlin
CODE:
@Service
class MyApplicationService(
  private val cs: CoroutineScope
) {
  fun scheduleSomething() {
    cs.launch {
      // do something
    }
  }
}

----------------------------------------

TITLE: Defining Extension Point for Tool Window in IntelliJ SDK
DESCRIPTION: This snippet shows the extension point configuration for the Tool Window sample. It defines the name, implementation class, and extension point class for the tool window.

LANGUAGE: markdown
CODE:
| Name                      | Implementation                                              | Extension Point Class |
|---------------------------|-------------------------------------------------------------|-----------------------|
| `com.intellij.toolWindow` | [CalendarToolWindowFactory][file:CalendarToolWindowFactory] | `ToolWindowFactory`   |

----------------------------------------

TITLE: Configuring Grammar-Kit Extension in Groovy
DESCRIPTION: Shows how to configure the grammarKit extension with custom JFlex and Grammar-Kit release versions in a Groovy-based Gradle script.

LANGUAGE: groovy
CODE:
grammarKit {
  jflexRelease = "1.7.0-1"
  grammarKitRelease = "2021.1.2"
}

----------------------------------------

TITLE: Custom Value Type Conversion
DESCRIPTION: Example of implementing a custom value converter for enum types

LANGUAGE: Java
CODE:
enum CmpVersion implements NamedEnum {
  CmpVersion_1_X ("1.x"),
  CmpVersion_2_X ("2.x");

  private final String value;

  CmpVersion(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }
}

----------------------------------------

TITLE: Background Startup Activity Extension Point
DESCRIPTION: New extension point for registering background post-startup activities, introduced in 2019.2.

LANGUAGE: xml
CODE:
<com.intellij.backgroundPostStartupActivity>

----------------------------------------

TITLE: Configuring Plugin Verifier Download Directory in Groovy
DESCRIPTION: This snippet shows how to configure the download directory for the Plugin Verifier task using Groovy DSL in Gradle. It sets the directory to a custom location in the user's home directory.

LANGUAGE: groovy
CODE:
runPluginVerifier {
  downloadDir = System.getProperty("user.home") + "/.pluginVerifier/ides"
}

----------------------------------------

TITLE: Implementing Annotator Test Method in Java
DESCRIPTION: Defines a test method 'testAnnotator()' in the SimpleCodeInsightTest class to verify weak warnings using checkHighlighting() method.

LANGUAGE: java
CODE:
```
{src="simple_language_plugin/src/test/java/org/intellij/sdk/language/SimpleCodeInsightTest.java" include-symbol="testAnnotator"}

----------------------------------------

TITLE: Proper Modality State Management in Coroutines
DESCRIPTION: Shows the recommended approach for handling modality state in coroutines by setting it at launch time rather than changing it during execution.

LANGUAGE: kotlin
CODE:
cs.launch(ModalityState.current().asContextElement()) {
  // ...
  withContext(Dispatchers.EDT) {
    // ...
  }
}

----------------------------------------

TITLE: Handling Invalid Property Syntax
DESCRIPTION: This section demonstrates how the parser handles attempts to create invalid property keys and values, including incomplete lines and missing separators.

LANGUAGE: Properties
CODE:
# test for illegal key attempt
key\
with\
endofline = test

----------------------------------------

TITLE: Applying Gradle Grammar-Kit Plugin in Kotlin
DESCRIPTION: Demonstrates how to apply the Gradle Grammar-Kit Plugin in a Kotlin-based Gradle build script.

LANGUAGE: kotlin
CODE:
plugins {
  id("org.jetbrains.grammarkit") version "%gradle-grammar-kit-plugin-version%"
}

----------------------------------------

TITLE: Comparing Test Results in IntelliJ Platform SDK Tests
DESCRIPTION: This snippet explains methods for comparing test results with expected outcomes, including comparing individual files and entire directories.

LANGUAGE: markdown
CODE:
To compare the results of executing the action with the expected results, you can use the `checkResultByFile()` method.
The file with the expected results can also contain [markup](test_project_and_testdata_directories.md#special-markup) to specify the expected caret position or selected text range.
Suppose you're testing an action that modifies multiple files (a project-wide refactoring, for example). In that case, you can compare an entire directory under the test project with the expected output using `PlatformTestUtil.assertDirectoriesEqual()`.

----------------------------------------

TITLE: Coroutines Learning Resources Reference
DESCRIPTION: HTML snippet containing a reference block for Kotlin Coroutines learning materials within the IntelliJ Platform context, including links to additional documentation and learning resources.

LANGUAGE: html
CODE:
<!-- Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->
<snippet id="learnCoroutines">

> This section focuses on explaining coroutines in the specific context of the [IntelliJ Platform](intellij_platform.md).
> If you are not experienced with Kotlin Coroutines, it is highly recommended to get familiar with
> [](kotlin_coroutines.md#learning-resources) first.
{title="Kotlin Coroutines×IntelliJ Platform"}

</snippet>

----------------------------------------

TITLE: Configuring Gradle Build Script for RubyMine Plugin (Gradle 2.x)
DESCRIPTION: Minimal Gradle build script configuration for RubyMine plugin development using IntelliJ Platform Gradle Plugin 2.x. Includes repository setup and dependencies for RubyMine and Ruby plugin.

LANGUAGE: kotlin
CODE:
repositories {
  mavenCentral()
  intellijPlatform {
    defaultRepositories()
  }
}

dependencies {
  intellijPlatform {
    rubymine("<versionNumber>")
    bundledPlugin("org.jetbrains.plugins.ruby")
  }
}

----------------------------------------

TITLE: Implementing testCompletion() Method for Simple Language Completion Test
DESCRIPTION: Defines the testCompletion() method to configure and run the completion test, checking the returned lookup strings against expected completion variants.

LANGUAGE: java
CODE:
```java
```

----------------------------------------

TITLE: Fixed Delay Task Scheduling with Coroutines
DESCRIPTION: Implements a recurring task scheduler using coroutines, providing an alternative to traditional scheduleWithFixedDelay() functionality with proper cancellation handling.

LANGUAGE: kotlin
CODE:
val job = coroutineScope.launch {
  delay(initialDelayMs)
  while (true) {
    action() // can be suspending as well
    delay(delayMs)
  }
}

----------------------------------------

TITLE: Defining Basic Properties in Properties File
DESCRIPTION: This snippet shows how to define basic key-value pairs in a properties file. It includes examples of simple properties, comments, and URL values.

LANGUAGE: Properties
CODE:
# You are reading the ".properties" entry.
! The exclamation mark can also mark text as comments.
website = https://en.wikipedia.org/

language = English

----------------------------------------

TITLE: Defining XML Variable in Live Template
DESCRIPTION: Example of an empty variable definition that allows manual user input in a live template. The variable requires a name and can specify expression, default value and whether to always stop at this variable during template expansion.

LANGUAGE: XML
CODE:
<variable
    name="MY_VAR"
    expression=""
    defaultValue=""
    alwaysStopAt="true"/>

----------------------------------------

TITLE: Defining Input Test Data in Properties
DESCRIPTION: Creates a properties file 'RenameTestData.simple' in the testData directory to serve as input for the rename test.

LANGUAGE: properties
CODE:
website = https://en.wikipedia.org/

----------------------------------------

TITLE: Using Dispatchers.EDT in Kotlin Coroutines
DESCRIPTION: Example of using Dispatchers.EDT instead of Dispatchers.Main to maintain write-intent lock behavior in Kotlin coroutines.

LANGUAGE: Kotlin
CODE:
launch(Dispatchers.EDT) {
    // Your coroutine code here
}

----------------------------------------

TITLE: Demonstrating Complete Type Inference in PHP
DESCRIPTION: Shows an example of complete type inference where PhpStorm can determine the exact type based on local information.

LANGUAGE: php
CODE:
<?php

$a = 100;

----------------------------------------

TITLE: Implementing Documentation Test for Custom Language Plugin in Java
DESCRIPTION: This code snippet defines a test method 'testDocumentation()' in the SimpleCodeInsightTest class. It sets up a test project, opens a file, positions the caret, and verifies the documentation string generated by the custom language's documentation provider.

LANGUAGE: Java
CODE:
public void testDocumentation() {
    // Loads test files and sets up the editor
    myFixture.configureByFiles("DocumentationTestData.java", "DocumentationTestData.simple");
    myFixture.editor.getCaretModel().moveToOffset(myFixture.editor.getDocument().getText().indexOf("simple:website"));

    // Gets the target element for documentation
    PsiElement originalElement = myFixture.getElementAtCaret();
    PsiElement element = DocumentationManager
            .getInstance(getProject())
            .findTargetElement(myFixture.getEditor(), originalElement.getContainingFile(), originalElement);

    // Verifies that a target element is found
    assertNotNull(element);

    // Gets the documentation provider and generates documentation
    DocumentationProvider documentationProvider = DocumentationManager.getProviderFromElement(element);
    String generateDoc = documentationProvider.generateDoc(element, originalElement);

    // Verifies the generated documentation
    assertEquals(
            "<div class='definition'><pre>website</pre></div>" +
                    "<div class='content'>Documentation for website</div>" +
                    "<div class='content'><p>Returns <i>http://www.jetbrains.com</i></p></div>",
            generateDoc
    );
}

----------------------------------------

TITLE: Creating Custom Plugin-Aware Task in Kotlin
DESCRIPTION: Example of creating a custom Gradle task that implements PluginAware interface to access plugin.xml details

LANGUAGE: kotlin
CODE:
import org.jetbrains.intellij.platform.gradle.tasks.aware.PluginAware

abstract class RetrievePluginNameTask : DefaultTask(), PluginAware

val retrievePluginName by tasks.registering(RetrievePluginNameTask::class) {
    val outputFile = layout.buildDirectory.file("pluginName.txt")

    doLast {
        outputFile.get().asFile.writeText(pluginXml.parse { name }.get())
    }
}

----------------------------------------

TITLE: Extension Point Table for Run Configuration Demo
DESCRIPTION: A markdown table describing the implementation of the 'com.intellij.configurationType' extension point. It specifies the name, implementation file, and extension point class for the Demo run configuration.

LANGUAGE: markdown
CODE:
| Name                             | Implementation                                            | Extension Point Class |
|----------------------------------|-----------------------------------------------------------|-----------------------|
| `com.intellij.configurationType` | [DemoRunConfigurationType][file:DemoRunConfigurationType] | `ConfigurationType`   |

----------------------------------------

TITLE: Testing Intention Preview Suffix Example
DESCRIPTION: Example showing how to add the preview testing suffix to test data comments to enable preview testing in LightQuickFixTestCase or LightQuickFixParameterizedTestCase.

LANGUAGE: text
CODE:
// "Replace Arrays.asList().stream() with Stream.of()" "true"

LANGUAGE: text
CODE:
// "Replace Arrays.asList().stream() with Stream.of()" "true-preview"

----------------------------------------

TITLE: Modern Plugin Extension Registration (2022.3+)
DESCRIPTION: XML configuration for registering Live Templates and context using modern extension points in plugin.xml.

LANGUAGE: xml
CODE:
<extensions defaultExtensionNs="com.intellij">
  <defaultLiveTemplates file="/liveTemplates/Markdown.xml"/>
  <liveTemplateContext
          contextId="MARKDOWN"
          implementation="org.intellij.sdk.liveTemplates.MarkdownContext"/>
</extensions>

----------------------------------------

TITLE: Tree Structure Provider Extension Point Configuration
DESCRIPTION: Extension point configuration showing the implementation of TreeStructureProvider that filters Project View to show only plain text files.

LANGUAGE: markdown
CODE:
| Name                                 | Implementation                                                      | Extension Point Class   |
|--------------------------------------|---------------------------------------------------------------------|-------------------------|
| `com.intellij.treeStructureProvider` | [TextOnlyTreeStructureProvider][file:TextOnlyTreeStructureProvider] | `TreeStructureProvider` |

----------------------------------------

TITLE: Demonstrating Union Types in PHP
DESCRIPTION: Illustrates how PhpStorm handles union types when the exact type cannot be determined at compile-time.

LANGUAGE: php
CODE:
<?php

$a = 100;
if (rand(0, 10) > 5) {
  $a = "Hello World!";
}

$a; // (1)

----------------------------------------

TITLE: Defining Test Data in Simple Language
DESCRIPTION: Creates a test data file in the Simple language format to be used in the find usages test.

LANGUAGE: properties
CODE:
# You are reading the ".properties" entry.
!The exclamation mark can also mark text as comments.
website = https://en.wikipedia.org/
language = English
# The backslash below tells the application to continue reading
# the value onto the next line.
message = Welcome to \
          Wikipedia!
# Add spaces to the key
key\ with\ spaces = This is the value that could be looked up with the key "key with spaces".
# Unicode
tab : \u0009

----------------------------------------

TITLE: Configuring Custom Plugin Repository with Authentication
DESCRIPTION: Example demonstrating how to configure a custom plugin repository with HTTP header authentication credentials.

LANGUAGE: kotlin
CODE:
import com.jetbrains.plugin.structure.intellij.repository.CustomPluginRepositoryListingType

repositories {
  intellijPlatform {
    customPluginRepository("https://example.com/plugins.xml", CustomPluginRepositoryType.SIMPLE) {
      credentials<HttpHeaderCredentials> {
        name = "Authorization"
        value = "Automation amFrdWJfdGVzdDotX...MkV2UkFwekFWTnNwZjA="
      }
    }
  }
}

LANGUAGE: groovy
CODE:
import com.jetbrains.plugin.structure.intellij.repository.CustomPluginRepositoryListingType

repositories {
  intellijPlatform {
    customPluginRepository('https://example.com/plugins.xml', CustomPluginRepositoryListingType.SIMPLE) { repository ->
      repository.credentials(HttpHeaderCredentials) {
        name = 'Authorization'
        value = 'Automation amFrdWJfdGVzdDotX...MkV2UkFwekFWTnNwZjA='
      }
    }
  }
}

----------------------------------------

TITLE: Plugin Action Configuration Table
DESCRIPTION: Defines the plugin action metadata including the action ID, implementation class, and base action class that it extends.

LANGUAGE: markdown
CODE:
| ID                                           | Implementation                              | Base Action Class |
|----------------------------------------------|---------------------------------------------|-------------------|
| `org.intellij.sdk.pycharm.PopupDialogAction` | [PopupDialogAction][file:PopupDialogAction] | `AnAction`        |

----------------------------------------

TITLE: Creating Table Structure in Markdown
DESCRIPTION: Example of creating tables using pipe and minus symbols for documentation.

LANGUAGE: markdown
CODE:
| Column 1 | Column 2 | Column 3 |
|----------|----------|----------|
| Blah     | Blah     | Blah     |

----------------------------------------

TITLE: Obtaining File Template in Java
DESCRIPTION: Demonstrates how to obtain a file template from the Code category using FileTemplateManager.

LANGUAGE: java
CODE:
FileTemplate template = FileTemplateManager.getInstance(project)
    .getCodeTemplate("Test Class.java");

----------------------------------------

TITLE: Extension Point Table for Project View Pane in Markdown
DESCRIPTION: Defines the extension point used in the demo, specifying its name, implementation class, and base class. This table provides a quick reference for the custom Project View pane implementation.

LANGUAGE: markdown
CODE:
| Name                           | Implementation                                      | Extension Point Class     |
|--------------------------------|-----------------------------------------------------|---------------------------|
| `com.intellij.projectViewPane` | [ImagesProjectViewPane][file:ImagesProjectViewPane] | `AbstractProjectViewPane` |

----------------------------------------

TITLE: Configuring Plugin.xml Dependencies for DataGrip
DESCRIPTION: XML configuration showing required dependencies for DataGrip plugins. Must declare dependencies on both com.intellij.database and com.intellij.modules.platform.

LANGUAGE: xml
CODE:
<depends>com.intellij.database</depends>
<depends>com.intellij.modules.platform</depends>

----------------------------------------

TITLE: Defining Test Data for Folding in Java
DESCRIPTION: Creates a Java file with markup instructions for three different cases of code folding. This file serves as test data for the folding builder test.

LANGUAGE: Java
CODE:
```java
```

----------------------------------------

TITLE: Running Process with Progress Synchronously in Kotlin
DESCRIPTION: Example of running a synchronous process with progress tracking using ProgressManager in Kotlin.

LANGUAGE: kotlin
CODE:
ProgressManager.getInstance().runProcessWithProgressSynchronously(
    ThrowableComputable {
      // operation
    },
    "Synchronizing data", true, project
)

----------------------------------------

TITLE: Defining Extension Points for Facets in IntelliJ SDK
DESCRIPTION: This markdown table defines the extension point for implementing custom Facet types in the IntelliJ SDK. It specifies the extension point name, implementation file, and the corresponding extension point class.

LANGUAGE: markdown
CODE:
| Name                     | Implementation                      | Extension Point Class |
|--------------------------|-------------------------------------|-----------------------|
| `com.intellij.facetType` | [DemoFacetType][file:DemoFacetType] | `FacetType`           |

----------------------------------------

TITLE: Adding Link Summary Excerpt
DESCRIPTION: Short excerpt using the link-summary tag that should be included before main page contents.

LANGUAGE: html
CODE:
<link-summary>Defining groups of related settings.</link-summary>

----------------------------------------

TITLE: Modifying and Removing Entities in Kotlin
DESCRIPTION: Shows how to modify existing entities and remove entities from the workspace model storage.

LANGUAGE: kotlin
CODE:
WorkspaceModel.getInstance(project).updateProjectModel("Update module") { builder ->
  val module = ModuleId(moduleName).resolve(builder) ?: ...
  val groupPath = module.groupPath ?: ...
  builder.removeEntity(groupPath)
  // a special extension function 'modifyEntity'
  // is generated for each entity type
  builder.modifyModuleEntity(module) {
    name = prefix + name
  }
}

----------------------------------------

TITLE: Extension Points Configuration for Project Management
DESCRIPTION: Configuration table showing the extension point implementation for post-startup activity that monitors project opening.

LANGUAGE: markdown
CODE:
| Name                               | Implementation                                                | Extension Point Class |
|------------------------------------|---------------------------------------------------------------|-----------------------|
| `com.intellij.postStartupActivity` | [ProjectOpenStartupActivity][file:ProjectOpenStartupActivity] | `StartupActivity`     |

----------------------------------------

TITLE: Configuring Gradle Build Script for Android Studio Plugin (Groovy)
DESCRIPTION: Example of configuring the Gradle build script for an Android Studio plugin project using Groovy DSL. It sets up the IntelliJ Platform version, declares dependency on the Android plugin, and configures the IDE Development Instance.

LANGUAGE: groovy
CODE:
intellij {
  // Define IntelliJ Platform against which to build the plugin project.

  // Same IntelliJ IDEA version (2019.1.4) as target 3.5 Android Studio:
  version = '191.8026.42'

  // Use IntelliJ IDEA CE because it's the basis of the IntelliJ Platform:
  type = 'IC'

  // Require the Android plugin:
  plugins = ['org.jetbrains.android']
}

runIde {
  // Absolute path to installed target 3.5 Android Studio to use as
  // IDE Development Instance (the "Contents" directory is macOS specific):
  ideDir = file('/Applications/Android Studio.app/Contents')
}

----------------------------------------

TITLE: Defining Test Data for Simple Language Formatter
DESCRIPTION: Creates a test data file named FormatterTestData.simple in the testData directory. This file contains sample code to be formatted during the test.

LANGUAGE: properties
CODE:
```properties
```

----------------------------------------

TITLE: Markdown Navigation Links Structure
DESCRIPTION: A structured list of navigation links to various UI principle documentation pages using markdown syntax

LANGUAGE: markdown
CODE:
# Principles

- [](data_formats.md)
- [](icons_style.md)
- [](layout.md)
    - [](groups_of_controls.md)
- [](mnemonics.md)
- [](platform_theme_colors.md)
- [](typography.md)
- [](validation_errors.md)

----------------------------------------

TITLE: Implementing Loader with Label in Java
DESCRIPTION: Creates a JLabel with a loader icon and text using Java. The loader is implemented using new AnimatedIcon.Default() and aligned to the left of the text.

LANGUAGE: java
CODE:
new JLabel(
    "Loading...",
    new AnimatedIcon.Default(),
    SwingConstants.LEFT
);

----------------------------------------

TITLE: Virtual File Access - IntelliJ Platform
DESCRIPTION: Example demonstrating how to access virtual files using the VFS API by calling getChildren() or findChild() methods on VirtualFile objects.

LANGUAGE: java
CODE:
VirtualFile.getChildren()
VirtualFile.findChild()

----------------------------------------

TITLE: Displaying Stars Rating Badge for IntelliJ Plugins
DESCRIPTION: Markdown code to embed a shield.io badge showing the star rating for an IntelliJ plugin. Requires replacing :pluginId with the actual plugin ID.

LANGUAGE: markdown
CODE:
![Rating](https://img.shields.io/jetbrains/plugin/r/stars/:pluginId)

----------------------------------------

TITLE: Creating Test Method for Reference Resolution in Java
DESCRIPTION: Implements a test method that verifies reference resolution functionality by checking if a SimpleProperty reference resolves to the correct value at the caret position.

LANGUAGE: java
CODE:
public void testReference() {
    // Inject files into the fake file system
    myFixture.configureByFiles("ReferenceTestData.java", "DefaultTestData.simple");
    // Get the reference at the caret position
    PsiElement element = myFixture.getFile().findElementAt(myFixture.getCaretOffset());
    PsiReference ref = element.getParent().getReferences()[0];
    // Resolve the reference and verify
    SimpleProperty resolvedProperty = (SimpleProperty) ref.resolve();
    assertEquals("simple property", resolvedProperty.getValue());
}

----------------------------------------

TITLE: Plugin Extension Point Registration
DESCRIPTION: Example showing ModuleTypeManager.registerModuleType() being replaced with extension point declaration

LANGUAGE: java
CODE:
// Old internal API
ModuleTypeManager.registerModuleType()

// New public API - use com.intellij.moduleType extension point

----------------------------------------

TITLE: Enabling OK Button with Validation in Java
DESCRIPTION: This Java code snippet shows how to enable the OK button in a dialog while still showing an error message. This approach is useful for complex forms where the user should be allowed to proceed despite validation errors.

LANGUAGE: java
CODE:
new ValidationInfo("The host cannot be reached", myHostField)
    .withOkEnabled();

----------------------------------------

TITLE: Referencing JBTabbedPane Implementation in Java
DESCRIPTION: This snippet shows how to reference the JBTabbedPane class, which is the recommended implementation for tabs in dialogs.

LANGUAGE: java
CODE:
com.intellij.ui.components.JBTabbedPane

----------------------------------------

TITLE: HTML Fragment Generation Example
DESCRIPTION: Example showing usage of HtmlBuilder for generating formatted content in documentation.

LANGUAGE: java
CODE:
HtmlBuilder builder = new HtmlBuilder();
builder.append("formatted content");

----------------------------------------

TITLE: Displaying Version Badge for ReSharper Plugins (Including Pre-releases)
DESCRIPTION: Markdown code to embed a shield.io badge showing the version of a ReSharper plugin, including pre-release versions. Requires replacing :packageName with the actual package name.

LANGUAGE: markdown
CODE:
![Version](https://img.shields.io/resharper/v/:packageName?include_prereleases)

----------------------------------------

TITLE: Defining Input Test Data in Java
DESCRIPTION: Creates a Java file 'RenameTestData.java' in the testData directory with a Simple Language reference embedded and a caret position for testing.

LANGUAGE: java
CODE:
public class Test {
    public static void main(String[] args) {
        System.out.println("simple:website<caret>");
    }
}

----------------------------------------

TITLE: Searching for Module-Containing Path in Kotlin
DESCRIPTION: This snippet demonstrates how to search for content roots and source roots with specific URLs and determine the ModuleEntity to which they belong using the Workspace Model.

LANGUAGE: kotlin
CODE:
val workspaceModel = WorkspaceModel.getInstance(project)
val virtualFileUrl = workspaceModel.getVirtualFileUrlManager()
  .getOrCreateFromUrl("file://foo/bar/src")

workspaceModel.currentSnapshot.getVirtualFileUrlIndex()
  .findEntitiesByUrl(virtualFileUrl)
  .mapNotNull {
    if (it is SourceRootEntity) {
      it.contentRoot.module
    } else if (it is ContentRootEntity) {
      it.module
    } else {
      null
    }
  }

----------------------------------------

TITLE: Referencing ToolbarDecorator Implementation
DESCRIPTION: Link to the ToolbarDecorator class used for implementing table toolbars with actions like add, remove, import etc.

LANGUAGE: markdown
CODE:
[`ToolbarDecorator`](%gh-ic%/platform/platform-api/src/com/intellij/ui/ToolbarDecorator.java)

----------------------------------------

TITLE: Missing Content Feedback Snippet
DESCRIPTION: XML snippet for displaying a feedback request when documentation content is missing

LANGUAGE: XML
CODE:
<snippet id="missingContent">

> If a topic you are interested in is not covered in the above sections, let us know via the **Was this page helpful?** feedback form below or [other channels](getting_help.topic#problems-with-the-guide).
>
> Please be specific about the topics and reasons for adding them, and leave your email in case we need more details. Thanks for your feedback!
>
{title="Something missing?" style="note"}

</snippet>

----------------------------------------

TITLE: Example Java Class with Custom Annotation
DESCRIPTION: Demonstrates a scenario where custom annotation @GetterSetter is used to generate getters and setters, requiring highlight suppression since the IDE would normally flag the setter usage as an error.

LANGUAGE: java
CODE:
class Person {
    @GetterSetter
    private int age;
}

// usage:
person.setAge(47); // valid at runtime

----------------------------------------

TITLE: Implementing Rename Test Method in Java
DESCRIPTION: Adds a testRename() method to the SimpleCodeInsightTest class to configure the test fixture, perform the rename operation, and compare input and output files.

LANGUAGE: java
CODE:
public void testRename() {
    myFixture.testRename("RenameTestData.java", "RenameTestDataAfter.simple", "websiteUrl");
}

----------------------------------------

TITLE: Adding Child Entity - Method 2
DESCRIPTION: Alternative approach to add a child entity by modifying the parent entity.

LANGUAGE: kotlin
CODE:
val contentRoot = ContentRootEntity(url, emptyList(), entitySource)
builder.modifyContentRootEntity(module) {
  this.contentRoots = this.contentRoots + contentRoot
}

----------------------------------------

TITLE: Registering Module Builder in plugin.xml
DESCRIPTION: XML configuration to register a custom module builder as an extension point in the plugin.xml file.

LANGUAGE: XML
CODE:
<extensions defaultExtensionNs="com.intellij">
  <moduleBuilder
      builderClass="org.jetbrains.plugins.ruby.rails.facet.versions.MyModuleBuilder"/>
</extensions>

----------------------------------------

TITLE: Adding Shortcut to Got It Tooltip in Kotlin and Java
DESCRIPTION: Shows how to include a shortcut in the Got It tooltip text for both Kotlin and Java implementations.

LANGUAGE: kotlin
CODE:
GotItTooltip(
    TOOLTIP_ID,
    { "You can rename usages ${shortcut("My.Action")}" },
    parentDisposable
)

LANGUAGE: java
CODE:
new GotItTooltip(
    TOOLTIP_ID,
    gotItTextBuilder -> {
        String shortcut = gotItTextBuilder.shortcut("My.Action");
        return "You can rename usages " + shortcut;
    },
    parentDisposable
);

----------------------------------------

TITLE: Plugin DevKit Availability Notice
DESCRIPTION: XML snippet explaining the availability of Plugin DevKit plugin in different IntelliJ IDEA versions

LANGUAGE: XML
CODE:
<snippet id="pluginDevKitAvailability">

_Plugin DevKit_ plugin is bundled with IntelliJ IDEA until 2023.2.

> When using IntelliJ IDEA 2023.3 or later, the _Plugin DevKit_ plugin must be installed from JetBrains Marketplace ([Plugin Homepage](https://plugins.jetbrains.com/plugin/22851-plugin-devkit))
> as it is no longer bundled with the IDE.
>
{title="Plugin DevKit Availability" style="warning"}

</snippet>

----------------------------------------

TITLE: Setting Timeout for Got It Tooltip in Kotlin and Java
DESCRIPTION: Shows how to set a custom timeout duration for a Got It tooltip in both Kotlin and Java implementations.

LANGUAGE: kotlin
CODE:
GotItTooltip(TOOLTIP_ID, GOT_IT_TEXT, parentDisposable)
    .withTimeout(3000)

LANGUAGE: java
CODE:
new GotItTooltip(TOOLTIP_ID, GOT_IT_TEXT, parentDisposable)
    .withTimeout(3000);

----------------------------------------

TITLE: ComboBox Implementation Reference
DESCRIPTION: Reference to the ComboBox class implementation in the IntelliJ Platform SDK, which is the core component for creating drop-down lists.

LANGUAGE: Java
CODE:
com.intellij.openapi.ui.ComboBox

----------------------------------------

TITLE: Overriding TextEditorBasedStructureViewModel for Custom Language
DESCRIPTION: Demonstrates how to override methods of TextEditorBasedStructureViewModel to customize the Structure View for a specific language.

LANGUAGE: Java
CODE:
TextEditorBasedStructureViewModel

----------------------------------------

TITLE: Project Data Structure Diagram
DESCRIPTION: UML diagram showing the relationship between DataNode, Key and ExternalEntityData classes in the external system's project data model.

LANGUAGE: plantuml
CODE:
@startuml

skinparam DefaultFontName JetBrains Sans
skinparam DefaultFontSize 14
hide empty members
hide circle

class "parent DataNode" as parent
class DataNode
together {
  class "child n DataNode" as child3
  class "..." as child2
  class "child 1 DataNode" as child1
  class Key
  class ExternalEntityData
}

parent -- DataNode

ExternalEntityData --o DataNode
Key --o DataNode
DataNode -- child1
DataNode -- child2
DataNode -- child3

@enduml

----------------------------------------

TITLE: Defining Inspection Code Snippet in HTML
DESCRIPTION: HTML structure for displaying syntax-highlighted code snippets in inspection descriptions

LANGUAGE: HTML
CODE:
"<p>\n  The following code will be shown with syntax highlighting:\n</p>\n<pre>\n  <code>\n    // code snippet\n  </code>\n</pre>"

----------------------------------------

TITLE: Adding Local Link to Got It Tooltip in Kotlin and Java
DESCRIPTION: Demonstrates how to add a local link to a Got It tooltip for both Kotlin and Java implementations.

LANGUAGE: kotlin
CODE:
GotItTooltip(TOOLTIP_ID, TOOLTIP_TEXT, parentDisposable)
    .withLink("Disable for all files", this::actionMethodReference)

LANGUAGE: java
CODE:
new GotItTooltip(TOOLTIP_ID, TOOLTIP_TEXT, parentDisposable)
    .withLink("Disable for all files", this::actionMethodReference);

----------------------------------------

TITLE: Dereferencing Symbol Pointer in Java
DESCRIPTION: Demonstrates how to obtain a Symbol instance from a previously created pointer in a subsequent read action.

LANGUAGE: java
CODE:
Symbol symbol = pointer.dereference();

----------------------------------------

TITLE: Creating Warning Annotation with Quick Fix in Annotator (2020.1+)
DESCRIPTION: Demonstrates how to create a warning annotation with an associated quick fix in an Annotator implementation for IntelliJ Platform 2020.1 and later versions.

LANGUAGE: Java
CODE:
holder.newAnnotation(HighlightSeverity.WARNING, "Invalid code") // or HighlightSeverity.ERROR
    .withFix(new MyFix(psiElement))
    .create();

----------------------------------------

TITLE: Configuring Token in Gradle (IntelliJ Platform 2.x)
DESCRIPTION: Kotlin configuration for providing publishing token in IntelliJ Platform Gradle Plugin 2.x.

LANGUAGE: kotlin
CODE:
intellijPlatform {
  publishing {
    token = providers.gradleProperty("intellijPlatformPublishingToken")
  }
}

----------------------------------------

TITLE: Displaying Version Badge for IntelliJ Plugins
DESCRIPTION: Markdown code to embed a shield.io badge showing the version of an IntelliJ plugin. Requires replacing :pluginId with the actual plugin ID.

LANGUAGE: markdown
CODE:
![Version](https://img.shields.io/jetbrains/plugin/v/:pluginId)

----------------------------------------

TITLE: Markup for Inlay Hint Preview (Pre-2023.2)
DESCRIPTION: Shows how to define hints in preview files for displaying in the Settings dialog for versions before 2023.2.

LANGUAGE: markup
CODE:
<# Displayed Hint #>

----------------------------------------

TITLE: Implementing Labeled Inputs with Inline Text in Kotlin UI DSL
DESCRIPTION: This code snippet shows how to create labeled inputs (combo box and text field) with inline help text using Kotlin UI DSL. It demonstrates the placement of help text to the right of the inputs.

LANGUAGE: kotlin
CODE:
panel {
  row("Plugin update policy:") {
      comboBox(listOf("Default", "Non default"))
      comment("Ignore by Maven 3+")
  }
  row("Thread count:") {
      textField()
      comment("-T option")
  }
}

----------------------------------------

TITLE: Custom Dictionary Provider Implementation
DESCRIPTION: Implementation of BundledDictionaryProvider to provide custom dictionaries for language-specific keywords and identifiers. Requires registration in com.intellij.spellchecker.bundledDictionaryProvider extension point.



----------------------------------------

TITLE: Defining Suitable Classes for Structure View
DESCRIPTION: Example of implementing TextEditorBasedStructureViewModel.getSuitableClasses() to specify which PSI element classes can be shown in the Structure View.

LANGUAGE: Java
CODE:
TextEditorBasedStructureViewModel.getSuitableClasses()

----------------------------------------

TITLE: UI Control Border Customization
DESCRIPTION: Shows how to customize border width, color and insets for UI controls

LANGUAGE: json
CODE:
{
  "ui": {
    "Window.border" : "4,4,4,4,E6E6E6"
  }
}

----------------------------------------

TITLE: UI Control Border Customization
DESCRIPTION: Shows how to customize border width, color and insets for UI controls

LANGUAGE: json
CODE:
{
  "ui": {
    "Window.border" : "4,4,4,4,E6E6E6"
  }
}

----------------------------------------

TITLE: Displaying GitHub Actions Workflow Badge
DESCRIPTION: Markdown code to embed a badge showing the status of a GitHub Actions workflow. Requires replacing placeholders with actual repository and workflow information.

LANGUAGE: markdown
CODE:
![Build](https://github.com/<OWNER>/<REPOSITORY>/actions/workflows/<WORKFLOW_FILE>/badge.svg)

----------------------------------------

TITLE: Radio Button Group Example
DESCRIPTION: Shows how to create a group of radio buttons bound to a state value

LANGUAGE: kotlin
CODE:
var value = true
buttonsGroup("Panel.buttonsGroup:") {
 row {
  radioButton("true", true)
 }
 row {
  radioButton("false", false)
 }
}.bind({ value }, { value = it })

----------------------------------------

TITLE: Implementing Checkboxes with Inline Text in Kotlin UI DSL
DESCRIPTION: This snippet demonstrates how to create checkboxes with inline help text using Kotlin UI DSL. It shows the placement of help text to the right of the checkboxes.

LANGUAGE: kotlin
CODE:
panel {
  row {
    checkBox("Build project automatically")
    comment("Works while not running / debugging")
  }
  row {
    checkBox("Compile independent modules in parallel")
    comment("May require larger heap size")
  }
}

----------------------------------------

TITLE: Custom Tokenizer Implementation
DESCRIPTION: Implementation of custom Tokenizer class to define how PSI elements are broken down for spell checking. Used when elements require special text extraction handling beyond basic tokenization.



----------------------------------------

TITLE: Configuring Gradle Build Script for PhpStorm Plugin (2.x)
DESCRIPTION: Minimum Gradle configuration for PhpStorm plugin development using IntelliJ Platform Gradle Plugin 2.x. Includes required repository setup and dependencies for PhpStorm and PHP plugin.

LANGUAGE: kotlin
CODE:
repositories {
  mavenCentral()
  intellijPlatform {
    defaultRepositories()
  }
}

dependencies {
  intellijPlatform {
    phpstorm("<versionNumber>")
    bundledPlugin("com.jetbrains.php")
  }
}

----------------------------------------

TITLE: Indented Panel Row Example
DESCRIPTION: Demonstrates creating indented and non-indented rows in a panel

LANGUAGE: kotlin
CODE:
row {
  label("Not indented row")
}
indent {
  row {
    label("Indented row")
  }
}

----------------------------------------

TITLE: Defining BNF Grammar for Simple Language
DESCRIPTION: Specifies the grammar rules for the Simple Language using BNF notation. Defines structure for properties, comments, and basic language elements with parser and PSI class configuration.

LANGUAGE: BNF
CODE:
{
  parserClass="org.intellij.sdk.language.parser.SimpleParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Simple"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"

  elementTypeHolderClass="org.intellij.sdk.language.psi.SimpleTypes"
  elementTypeClass="org.intellij.sdk.language.psi.SimpleElementType"
  tokenTypeClass="org.intellij.sdk.language.psi.SimpleTokenType"
}

simpleFile ::= item_*

private item_ ::= (property|COMMENT|CRLF)

property ::= (KEY? SEPARATOR VALUE?) | KEY

----------------------------------------

TITLE: Implementing Input Field with Bottom Inline Text in Kotlin UI DSL
DESCRIPTION: This code snippet shows how to create an input field with inline help text placed below it using Kotlin UI DSL. It demonstrates the use of textFieldWithBrowseButton and comment placement.

LANGUAGE: kotlin
CODE:
panel {
  row("Default directory:") {
    textFieldWithBrowseButton()
      .comment(
        "Preselected in Open and New | Project dialogs"
      )
  }
}

----------------------------------------

TITLE: Configuring Gradle Build Script for LSP Plugin (Gradle IntelliJ Plugin 1.x)
DESCRIPTION: Kotlin DSL configuration for setting up the Gradle build script to support LSP plugin development using the Gradle IntelliJ Plugin version 1.x. It specifies the plugin version, IntelliJ IDEA Ultimate as the target IDE, and the platform version.

LANGUAGE: kotlin
CODE:
plugins {
  // ...
  id("org.jetbrains.intellij") version "%gradle-intellij-plugin-version%"
}

intellij {
  version = "%ijPlatform%"
  type = "IU"
}

----------------------------------------

TITLE: Configuring Gradle Build Script for LSP Plugin (Gradle IntelliJ Plugin 1.x)
DESCRIPTION: Kotlin DSL configuration for setting up the Gradle build script to support LSP plugin development using the Gradle IntelliJ Plugin version 1.x. It specifies the plugin version, IntelliJ IDEA Ultimate as the target IDE, and the platform version.

LANGUAGE: kotlin
CODE:
plugins {
  // ...
  id("org.jetbrains.intellij") version "%gradle-intellij-plugin-version%"
}

intellij {
  version = "%ijPlatform%"
  type = "IU"
}

----------------------------------------

TITLE: Configuring Plugin XML with Vendor-Based ID
DESCRIPTION: Example plugin.xml configuration demonstrating how to set up a plugin with separate vendor and ID elements. The settings file would be picked up from dotnet/Extensions/Jean-Luc Picard.Enterprise/settings path.

LANGUAGE: xml
CODE:
<idea-plugin>
  <id>Enterprise</id>
  <vendor>Jean-Luc Picard</vendor>
  <!-- ... -->
</idea-plugin>

----------------------------------------

TITLE: Illustrating Complete Type Inference with Function Parameters in PHP
DESCRIPTION: Demonstrates how PhpStorm infers complete types from function parameter type hints.

LANGUAGE: php
CODE:
<?php

function foo(string $a): string {
  echo $a;
}

----------------------------------------

TITLE: Nested Row Layout with Labels
DESCRIPTION: Shows how to create nested rows with labels and proper indentation in the UI layout.

LANGUAGE: kotlin
CODE:
row {
  checkBox(...)
  row {
    textField(...) // indented relatively to the checkbox above
  }
}

----------------------------------------

TITLE: Configuring Gradle Source Sets for Generated Parser
DESCRIPTION: Gradle configuration to include generated parser source files in the project's source sets. Shows both Kotlin and Groovy DSL syntax.

LANGUAGE: Kotlin
CODE:
sourceSets["main"].java.srcDirs("src/main/gen")

LANGUAGE: Groovy
CODE:
sourceSets.main.java.srcDirs 'src/main/gen'

----------------------------------------

TITLE: Implementing External Link in Java for IntelliJ Platform SDK
DESCRIPTION: This code snippet shows how to create an external link using ActionLink in Java. It creates a link that opens an external website in a browser when clicked.

LANGUAGE: java
CODE:
ActionLink externalLink = new ActionLink(
    "External link",
    event -> BrowserUtil.browse("https://www.jetbrains.com")
);
externalLink.setExternalLinkIcon();

----------------------------------------

TITLE: Creating a Message Bundle Class in Java
DESCRIPTION: Shows how to create a message bundle class in Java using DynamicBundle for effective internationalization implementation.

LANGUAGE: java
CODE:
final class ExampleBundle {
  @NonNls
  private static final String BUNDLE = "messages.ExampleBundle";
  private static final DynamicBundle INSTANCE =
      new DynamicBundle(ExampleBundle.class, BUNDLE);

  private ExampleBundle() {}

  public static @NotNull @Nls String message(
      @NotNull @PropertyKey(resourceBundle = BUNDLE) String key,
      Object @NotNull ... params
  ) {
    return INSTANCE.getMessage(key, params);
  }

  public static Supplier<@Nls String> lazyMessage(
      @NotNull @PropertyKey(resourceBundle = BUNDLE) String key,
      Object @NotNull ... params
  ) {
    return INSTANCE.getLazyMessage(key, params);
  }
}

----------------------------------------

TITLE: Defining Copyright Notice in HTML Comments
DESCRIPTION: Required copyright notice that must appear at the start of each Markdown file in the documentation.

LANGUAGE: html
CODE:
<!-- Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->

----------------------------------------

TITLE: Adding Bean Reference in DOM Element
DESCRIPTION: Template for adding a reference to a Spring Bean in a DOM Element using Java annotations.

LANGUAGE: Java
CODE:
@Convert(SpringBeanResolveConverter.class)
@RequiredBeanType("fqn.to.required.class") // optional
GenericAttributeValue<SpringBeanPointer> getMyAttributeName();

----------------------------------------

TITLE: UI Components Notice Block
DESCRIPTION: Markdown snippet explaining how to inspect existing UI components using the UI Inspector tool.

LANGUAGE: markdown
CODE:
> Use [UI Inspector](internal_ui_inspector.md) to locate the underlying Swing component implementation or to inspect an existing UI at runtime.\n>\n{title=\"Inspecting existing UI\"}

----------------------------------------

TITLE: Adding Action to Static Group in XML
DESCRIPTION: Demonstrates how to add a new action to a static action group in the plugin.xml file, reusing an existing action implementation.

LANGUAGE: XML
CODE:
<group
    id="org.intellij.sdk.action.GroupedActions"
    text="Static Grouped Actions"
    popup="true"
    icon="SdkIcons.Sdk_default_icon">
  <add-to-group
      group-id="ToolsMenu"
      anchor="after"
      relative-to-action="org.intellij.sdk.action.PopupDialogAction"/>
  <action
      class="org.intellij.sdk.action.PopupDialogAction"
      id="org.intellij.sdk.action.GroupPopDialogAction"
      text="A Group Action"
      description="SDK static grouped action example"
      icon="SdkIcons.Sdk_default_icon">
  </action>
</group>

----------------------------------------

TITLE: JBScrollBar Component Reference
DESCRIPTION: Reference to the JBScrollBar implementation class used for creating scrollbars in IntelliJ Platform applications. Located in the platform-api module.

LANGUAGE: java
CODE:
com.intellij.ui.components.JBScrollBar

----------------------------------------

TITLE: Accessing XML Elements Using PSI
DESCRIPTION: Example showing complex PSI-based XML element traversal with null checks

LANGUAGE: Java
CODE:
XmlFile file = ...;
XmlDocument document = file.getDocument();
if (document != null) {
  XmlTag rootTag = document.getRootTag();
  if (rootTag != null) {
    XmlTag foo = rootTag.findFirstSubTag("foo");
    if (foo != null) {
      XmlTag[] bars = foo.findSubTags("bar");
      if (bars.length > 1) {
        String s = bars[1].getValue().getTrimmedText();
        // do something
      }
    }
  }
}

----------------------------------------

TITLE: Project Leak Example in Application Scope
DESCRIPTION: Demonstrates how using application scope can lead to project leaks when the project is closed but the application scope remains active.

LANGUAGE: kotlin
CODE:
application.coroutineScope.launch {
  project.getService(PsiDirectoryFactory::class.java)
}

----------------------------------------

TITLE: Getting Package Reference for Java Class
DESCRIPTION: This snippet demonstrates how to obtain a reference to the containing package of a Java class using PsiJavaFile and JavaPsiFacade.

LANGUAGE: java
CODE:
PsiJavaFile javaFile = (PsiJavaFile) psiClass.getContainingFile();
PsiPackage psiPackage = JavaPsiFacade.getInstance(project)
    .findPackage(javaFile.getPackageName());

----------------------------------------

TITLE: Implicit Reference Example
DESCRIPTION: Example showing how implicit references work with the var keyword in Java declarations.

LANGUAGE: Java
CODE:
var x = new Person()

----------------------------------------

TITLE: Implementing Custom ToggleAction in Java
DESCRIPTION: Create a custom action by inheriting from ToggleAction class to implement a toggle button functionality.

LANGUAGE: Java
CODE:
public class MyToggleAction extends ToggleAction {
    // Implementation details
}

----------------------------------------

TITLE: Build Log Directory Path Structure
DESCRIPTION: Directory path structure showing where to find external build process log files.

LANGUAGE: plain text
CODE:
<ide-system-directory>/log/build-log

----------------------------------------

TITLE: Coroutine Header Example
DESCRIPTION: Shows an example of a coroutine header with its components including name, class, state and context

LANGUAGE: plaintext
CODE:
-[x5 of] "my task":StandaloneCoroutine{Active}, state: SUSPENDED [ComponentManager(ApplicationImpl@xxxxxxxx), Dispatchers.EDT]

----------------------------------------

TITLE: Defining Text Attribute Key Dependency in Java
DESCRIPTION: Shows how to create a text attribute key with a dependency on a standard key from DefaultLanguageHighlighterColors. This approach allows for fallback to default colors if custom ones are not defined.

LANGUAGE: java
CODE:
static final TextAttributesKey MY_KEYWORD =
  TextAttributesKey.createTextAttributesKey("MY_KEYWORD", DefaultLanguageHighlighterColors.KEYWORD);

----------------------------------------

TITLE: Defining Text Attribute Key Dependency in Java
DESCRIPTION: Shows how to create a text attribute key with a dependency on a standard key from DefaultLanguageHighlighterColors. This approach allows for fallback to default colors if custom ones are not defined.

LANGUAGE: java
CODE:
static final TextAttributesKey MY_KEYWORD =
  TextAttributesKey.createTextAttributesKey("MY_KEYWORD", DefaultLanguageHighlighterColors.KEYWORD);

----------------------------------------

TITLE: Registering Editor Action in plugin.xml
DESCRIPTION: XML configuration to register a custom editor action in the plugin.xml file. This adds an 'Editor Add Caret' menu item to the editor context menu.

LANGUAGE: XML
CODE:
<actions>
  <action
      id="EditorBasics.EditorHandlerIllustration"
      class="org.intellij.sdk.editor.EditorHandlerIllustration"
      text="Editor Add Caret"
      description="Adds a second caret below the existing one."
      icon="SdkIcons.Sdk_default_icon">
    <add-to-group group-id="EditorPopupMenu" anchor="first"/>
  </action>
</action>

----------------------------------------

TITLE: Adding Bean Reference in JAM Element
DESCRIPTION: Code snippet for adding a reference to a Spring Bean in a JAM Element (Version 14).

LANGUAGE: Java
CODE:
JamStringAttributeMeta.Single<SpringBeanPointer> ATTRIBUTE_META =
    JamAttributeMeta.singleString("attributeName",
        new SpringBeanReferenceJamConverter("fqn.to.required.class"));

----------------------------------------

TITLE: Configuring GoLand IDE Type in Gradle (Groovy)
DESCRIPTION: Gradle build script configuration for targeting GoLand IDE using the Gradle IntelliJ Plugin 1.x, written in Groovy. It sets the IntelliJ IDEA version, type to GO, and includes the Go plugin dependency.

LANGUAGE: groovy
CODE:
intellij {
  version = '2020.3'
  type = 'GO'

  // required if Go language API is needed:
  plugins = ['org.jetbrains.plugins.go']
}

----------------------------------------

TITLE: Adding Custom Background Image to Theme JSON
DESCRIPTION: This JSON snippet demonstrates how to add a custom background image to both the main IDE window and empty frame in a theme plugin.

LANGUAGE: json
CODE:
{
  "name": "Theme Basics",
  "dark": false,
  "author": "IntelliJ Platform SDK",
  "ui": {
  },
  "background": {
    "image": "/austria.png",
    "transparency": 10,
    "fill": "scale",
    "anchor": "center"
  },
  "emptyFrameBackground": {
    "image": "/austria.png",
    "transparency": 20,
    "fill": "scale",
    "anchor": "center"
  }
}

----------------------------------------

TITLE: Adding Profiling Mode Parameter for External Builder
DESCRIPTION: Command line parameter to enable CPU profiling for the external build process.

LANGUAGE: plain text
CODE:
-Dprofiling.mode=true

----------------------------------------

TITLE: Structure Aware Navigation Bar Extension Methods
DESCRIPTION: Essential methods to override when implementing StructureAwareNavBarModelExtension for advanced navigation bar functionality with specific file elements.

LANGUAGE: Java
CODE:
getLanguage() // returns language instance
getPresentableText() // returns string representation
getIcon() // returns icon
adjustElement() // modifies navigation bar element

----------------------------------------

TITLE: Adding Spring Boot Dependency in plugin.xml
DESCRIPTION: Add a dependency on the Spring Boot plugin in the plugin.xml configuration file.

LANGUAGE: XML
CODE:
<depends>com.intellij.spring.boot</depends>

----------------------------------------

TITLE: Registering PhpUnitFiledInitializedInSetUpMethodsTP in XML
DESCRIPTION: Shows how to register the custom PhpTypeProvider4 implementation in the plugin configuration file.

LANGUAGE: xml
CODE:
<extensions defaultExtensionNs="com.jetbrains">
  <php.typeProvider4
          implementation="com.jetbrains.php.lang.psi.resolve.types.PhpUnitFiledInitializedInSetUpMethodsTP"/>
</extensions>

----------------------------------------

TITLE: Editor Tabs Customization
DESCRIPTION: Complex example showing how to customize editor tab appearances with various properties

LANGUAGE: json
CODE:
{
  "ui": {
    "EditorTabs": {
      "selectedForeground": "#FFFFFF",
      "selectedBackground": "#0e5d73",
      "inactiveMaskColor": "#000000FF",
      "underlineColor": "#1AEBFF",
      "underlineHeight": 4,
      "underlinedTabBackground": "#000000",
      "inactiveColoredFileBackground": "#00000000"
    }
  }
}

----------------------------------------

TITLE: Registering Theme Metadata Provider in plugin.xml
DESCRIPTION: XML configuration to register a theme metadata file via com.intellij.themeMetadataProvider extension point.

LANGUAGE: xml
CODE:
<idea-plugin>
  <extensions defaultExtensionNs="com.intellij">
    <themeMetadataProvider path="/META-INF/MyPlugin.themeMetadata.json"/>
  </extensions>
</idea-plugin>

----------------------------------------

TITLE: Declaring Action Group with ID in XML
DESCRIPTION: Example of how to declare an action group with a required ID in the plugin.xml file. This is necessary for dynamic plugins to properly manage action groups.

LANGUAGE: XML
CODE:
<group id="MyPlugin.MyActionGroup" text="My Group" description="Group with my custom actions">
  <!-- action definitions -->
</group>

----------------------------------------

TITLE: Creating Page Title in Markdown
DESCRIPTION: Required level 1 heading that defines the page title and must follow the copyright notice.

LANGUAGE: markdown
CODE:
# Contributing to the IntelliJ Platform SDK

----------------------------------------

TITLE: Example of Incomplete Type Inference Across Files in PHP
DESCRIPTION: Shows how incomplete types are created when type information depends on definitions in other files.

LANGUAGE: php
CODE:
<?php

function foo(): string {
  return "Hello World!";
}

LANGUAGE: php
CODE:
<?php

$a = foo();
echo $a;

----------------------------------------

TITLE: Global UI Control Background Color
DESCRIPTION: Shows how to set a global background color for all UI controls using wildcards

LANGUAGE: json
CODE:
{
  "ui": {
    "*": {
      "background": "#AED7E3"
     }
  }
}

----------------------------------------

TITLE: Retrieving Associated Arbitrary Data from Entities in Kotlin
DESCRIPTION: Shows how to retrieve previously associated arbitrary data from a WorkspaceEntity.

LANGUAGE: kotlin
CODE:
// Сlass whose instances we want to store in the index
data class Foo(val someData: String)

// Unique identifier of the concrete mapping
val externalMappingKey = ExternalMappingKey.create<Foo>("intellij.foo")

val entityStorage = WorkspaceModel.getInstance(project).currentSnapshot
// Immutable instance of specific mapping
val fooExternalMapping = entityStorage
  .getExternalMapping(externalMappingKey)

val moduleEntity = entityStorage
  .entities(ModuleEntity::class.java).single()
// Getting the data associated with specific `ModuleEntity`
val foo = fooExternalMapping.getDataByEntity(moduleEntity)

----------------------------------------

TITLE: AppCode Plugin Dependency Declaration - Modern Syntax (2020.3+)
DESCRIPTION: Shows how to declare AppCode plugin dependencies in plugin.xml and Gradle build scripts for versions 2020.3 and later.

LANGUAGE: XML
CODE:
<depends>com.intellij.appcode</depends>

LANGUAGE: Kotlin
CODE:
intellij {
  plugins.set(listOf("com.intellij.appcode"))
}

LANGUAGE: Groovy
CODE:
intellij {
  plugins = ['com.intellij.appcode']
}

----------------------------------------

TITLE: Configuring Release Channels (2.x)
DESCRIPTION: Configuration for specifying release channels in IntelliJ Platform Gradle Plugin 2.x.

LANGUAGE: kotlin
CODE:
intellijPlatform {
  publishing {
    channels = listOf("beta")
  }
}

LANGUAGE: groovy
CODE:
intellijPlatform {
  publishing {
    channels = ['beta']
  }
}

----------------------------------------

TITLE: Adding Spring Dependency in plugin.xml
DESCRIPTION: Add a dependency on the Spring Support plugin in the plugin.xml configuration file.

LANGUAGE: XML
CODE:
<depends>com.intellij.spring</depends>

----------------------------------------

TITLE: File Path Reference in Markdown
DESCRIPTION: Example path references for Gradle build script files using inline code formatting.

LANGUAGE: markdown
CODE:
<path>build.gradle.kts</path>

----------------------------------------

TITLE: Querying Entities by EntitySource in Kotlin
DESCRIPTION: Shows how to query entities based on their EntitySource using the EntitySource index.

LANGUAGE: kotlin
CODE:
val currentSnapshot: ImmutableEntityStorage =
  WorkspaceModel.getInstance(project).currentSnapshot
// Querying all entities of different types
// but with concrete entitySource
currentSnapshot.entitiesBySource { it is GradleEntitySource }.forEach {
  // ...
}

----------------------------------------

TITLE: Internal Mode Tip Snippet
DESCRIPTION: HTML snippet containing a tip about enabling the Internal Actions menu if it's not available in the IDE.

LANGUAGE: html
CODE:
<snippet id="enable_internal_mode_tip">

> If the menu item <ui-path>Tools | Internal Actions</ui-path> is not available in the IDE, then the first step is [Enabling Internal Mode](enabling_internal.md).
>

</snippet>

----------------------------------------

TITLE: Configuring Release Channels (1.x)
DESCRIPTION: Configuration for specifying release channels in Gradle IntelliJ Plugin 1.x.

LANGUAGE: kotlin
CODE:
tasks {
  publishPlugin {
    channels = listOf("beta")
  }
}

LANGUAGE: groovy
CODE:
tasks {
  publishPlugin {
    channels = ['beta']
  }
}

----------------------------------------

TITLE: Gradle Configuration Path Example for AppCode
DESCRIPTION: Example path configuration for Gradle showing how to set up localPath and ideDir for AppCode plugin development on macOS.

LANGUAGE: Gradle
CODE:
/Users/$USERNAME$/Library/Application Support/JetBrains/Toolbox/apps/AppCode/ch-0/193.5662.55/AppCode.app/Contents

----------------------------------------

TITLE: Explicit JBR Version Configuration
DESCRIPTION: Demonstrates how to explicitly specify JetBrains Runtime version, variant, and architecture in build configuration files.

LANGUAGE: kotlin
CODE:
repositories {
  mavenCentral()
  intellijPlatform {
    defaultRepositories()
    jetbrainsRuntime()
    // ...
  }
}

dependencies {
  intellijPlatform {
    intellijIdeaCommunity("%ijPlatform%")
    jetbrainsRuntime(version, variant, architecture)
    // or
    jetbrainsRuntimeExplicit(explicitVersion)
    // ...
  }
}

LANGUAGE: groovy
CODE:
repositories {
  mavenCentral()
  intellijPlatform {
    defaultRepositories()
    jetbrainsRuntime()
    // ...
  }
}

dependencies {
  intellijPlatform {
    intellijIdeaCommunity '%ijPlatform%'
    jetbrainsRuntime(version, variant, architecture)
    // or
    jetbrainsRuntimeExplicit(explicitVersion)
    // ...
  }
}

----------------------------------------

TITLE: Creating Symbolic Entity References in Kotlin
DESCRIPTION: Shows how to implement soft references between entities using SymbolicEntityId.

LANGUAGE: kotlin
CODE:
interface MavenEntity : WorkspaceEntityWithSymbolicId {
  val version: Int
  val name: String
  override val symbolicId: MavenId
    get() = MavenId(true, name)
}

interface KotlinEntity : WorkspaceEntity {
  val name: String
  val mavenId: MavenId
}

data class MavenId(
  val valid: Boolean,
  override val presentableName: String
) : SymbolicEntityId<MavenEntity>

----------------------------------------

TITLE: Markdown Documentation Structure for Plugin Prerequisites
DESCRIPTION: Structured markdown documentation describing the setup process for IntelliJ Platform plugin development, including IDE installation, source code access, plugin requirements, and project creation steps.

LANGUAGE: markdown
CODE:
<!-- Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->

# 1. Prerequisites

<link-summary>Steps required before starting implementation of a sample custom language support.</link-summary>

<include from="language_and_filetype.md" element-id="custom_language_tutorial_header"></include>

## Download and Install IntelliJ IDEA

Download and install either IntelliJ IDEA Ultimate or IntelliJ IDEA Community Edition from [here](https://www.jetbrains.com/idea/download/).

## Check out Community Edition Source Files

> While not required, having the full sources of the platform and all bundled plugins available for browsing allows finding related implementations.
>
{style="note"}

Download the IntelliJ IDEA Community Edition source files as described in the IntelliJ IDEA Community Edition [README](%gh-ic%/README.md) file.

## Install Required Plugins

Make sure that the _Plugin DevKit_ and _Gradle_ plugins are enabled.

<include from="snippets.md" element-id="pluginDevKitAvailability"/>

Install and enable [Grammar-Kit](https://plugins.jetbrains.com/plugin/6606-grammar-kit) and [PsiViewer](https://plugins.jetbrains.com/plugin/227-psiviewer) (optionally) plugins.

## Create a Project

Create an empty [IntelliJ Platform Plugin project](creating_plugin_project.md) or start using [](plugin_github_template.md) when creating a plugin hosted on GitHub.

----------------------------------------

TITLE: PSI Documentation Comment Header
DESCRIPTION: Copyright notice and license information for the PSI documentation

LANGUAGE: markdown
CODE:
<!-- Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->

----------------------------------------

TITLE: Configuring Gradle Build Script for Android Studio Plugin (IntelliJ Platform Gradle Plugin 2.x)
DESCRIPTION: Example of configuring the Gradle build script for an Android Studio plugin project using the IntelliJ Platform Gradle Plugin 2.x. It sets up the repositories and dependencies for Android Studio development.

LANGUAGE: kotlin
CODE:
repositories {
  mavenCentral()
  intellijPlatform {
    defaultRepositories()
  }
}

dependencies {
  intellijPlatform {
    androidStudio("<versionNumber>")
    bundledPlugin("org.jetbrains.android")
  }
}

----------------------------------------

TITLE: Displaying Numeric Rating Badge for IntelliJ Plugins
DESCRIPTION: Markdown code to embed a shield.io badge showing the numeric rating for an IntelliJ plugin. Requires replacing :pluginId with the actual plugin ID.

LANGUAGE: markdown
CODE:
![Rating](https://img.shields.io/jetbrains/plugin/r/rating/:pluginId)

----------------------------------------

TITLE: Entity Changes Flow Diagram
DESCRIPTION: Mermaid diagram showing the flow of entity changes during applyChangesFrom() operation.

LANGUAGE: mermaid
CODE:
flowchart
    subgraph WorkspaceModel
        direction TB
        subgraph Original
            ModuleEntity --> ContentRootEntity1
            ModuleEntity --> ContentRootEntity2
            ContentRootEntity1 --> SourceRootEntity1
            ContentRootEntity2 --> SourceRootEntity2
            ContentRootEntity2 --> SourceRootEntity3
        end

        subgraph Result
            l[ModuleEntity]
            m[ContentRootEntity1]
            n[ContentRootEntity2]
            p[SourceRootEntity2]
            q[SourceRootEntity3]
            r[SourceRootEntity4]
            l --> m
            l --> n
            n --> p
            n --> q
            n --> r
            style l fill: #FF9
            style q fill: #FF9
            style r fill: #9F9
        end

    end

    subgraph MutableEntityStorage
        a[ModuleEntity]
        b[ContentRootEntity1]
        d[ContentRootEntity2]
        c[SourceRootEntity1]
        e[SourceRootEntity2]
        k[SourceRootEntity3]
        f[SourceRootEntity4]
        a --> b
        a --> d
        b --> c
        d --> e
        d --> k
        d --> f
        style c fill: #F99
        style a fill: #FF9
        style k fill: #FF9
        style f fill: #9F9

    end
  MutableEntityStorage ==  "applyChangesFrom()"  ==> Original

----------------------------------------

TITLE: PSI Navigation Action Configuration Table
DESCRIPTION: Markdown table defining the action configuration for PSI Navigation Demo, specifying the action ID, implementation class, and base action class.

LANGUAGE: markdown
CODE:
| ID                  | Implementation                                          | Base Action Class |
|---------------------|---------------------------------------------------------|-------------------|
| `PsiNavigationDemo` | [PsiNavigationDemoAction][file:PsiNavigationDemoAction] | `AnAction`        |

----------------------------------------

TITLE: VFS Refresh Operation - IntelliJ Platform
DESCRIPTION: Code showing how to properly perform VFS refresh operations using RefreshQueue or directly on VirtualFile instances.

LANGUAGE: java
CODE:
RefreshQueue.createSession()
VirtualFile.refresh()

----------------------------------------

TITLE: Testing Documentation Note Block
DESCRIPTION: Markdown snippet containing a note about available testing resources including a tutorial and code samples for plugin testing.

LANGUAGE: markdown
CODE:
> Check out [this step-by-step tutorial](writing_tests_for_plugins.md) teaching how to write and run automated tests for your custom language plugin.\n> Also, code samples\n> [comparing_string_references_inspection](%gh-sdk-samples-master%/comparing_string_references_inspection)\n> and [conditional_operator_intention](%gh-sdk-samples-master%/conditional_operator_intention) demonstrate using tests.\n>

----------------------------------------

TITLE: HTML Copyright Notice Comment
DESCRIPTION: Copyright header comment in HTML format specifying JetBrains license terms.

LANGUAGE: html
CODE:
<!-- Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->

----------------------------------------

TITLE: Basic UI DSL Panel Creation
DESCRIPTION: Creates a simple panel with a text field and label using Kotlin UI DSL

LANGUAGE: kotlin
CODE:
panel {
  row("Enter value:") {
    textField()
  }
}

----------------------------------------

TITLE: Testing Documentation Note Block
DESCRIPTION: Markdown snippet containing a note about available testing resources including a tutorial and code samples for plugin testing.

LANGUAGE: markdown
CODE:
> Check out [this step-by-step tutorial](writing_tests_for_plugins.md) teaching how to write and run automated tests for your custom language plugin.\n> Also, code samples\n> [comparing_string_references_inspection](%gh-sdk-samples-master%/comparing_string_references_inspection)\n> and [conditional_operator_intention](%gh-sdk-samples-master%/conditional_operator_intention) demonstrate using tests.\n>

----------------------------------------

TITLE: Defining HTML Table for Number Formatting Examples
DESCRIPTION: HTML table structure showing examples of number formatting for different scenarios in IntelliJ Platform UI.

LANGUAGE: html
CODE:
<table>
<tr>
    <td width="20%"></td>
    <td width="25%"> Examples </td>
    <td width="55%"> When and how to use </td>
</tr>
<tr>
    <td>Numbers</td>
    <td>4,255,165.00</td>
    <td><p>Space is not limited, e.g. <control>Settings</control> dialog:</p>
        <p><img src="numbers.png" width="277" /></p>
    </td>
</tr>
<tr>
    <td>Numbers short</td>
    <td>
        <p>10.5k</p>
        <p>3.3M</p>
    </td>
    <td>Space is limited, e.g. in table or lists.</td>
</tr>
<tr>
    <td>Percentage</td>
    <td>13%</td>
    <td></td>
</tr>
<tr>
    <td>Ratios</td>
    <td>3 of 10</td>
    <td></td>
</tr>
<tr>
    <td>Ratios short</td>
    <td>3/10</td>
    <td>Space is limited, e.g. in table or lists.</td>
</tr>
<tr>
    <td>Currency</td>
    <td>$10</td>
    <td></td>
  </tr>
</table>

----------------------------------------

TITLE: Plugin Configuration Settings
DESCRIPTION: Example of plugin metadata configuration including ID, name, version and vendor details

LANGUAGE: kotlin
CODE:
pluginConfiguration {
  id = "my-plugin-id"
  name = "My Awesome Plugin"
  version = "1.0.0"
  description = "It's an awesome plugin!"
  changeNotes = """
    A descriptive release note...
    """.trimIndent()

  productDescriptor {
    // ...
  }
  ideaVersion {
    // ...
  }
  vendor {
    // ...
  }
}

LANGUAGE: groovy
CODE:
pluginConfiguration {
  id = 'my-plugin-id'
  name = 'My Awesome Plugin'
  version = '1.0.0'
  description = 'It\'s an awesome plugin!'
  changeNotes = """
    A descriptive release note...
    """.stripIndent()

  productDescriptor {
    // ...
  }
  ideaVersion {
    // ...
  }
  vendor {
    // ...
  }
}

----------------------------------------

TITLE: Constructor Removal Example
DESCRIPTION: Example of a removed constructor with recommended replacement using factory method.

LANGUAGE: java
CODE:
com.intellij.util.indexing.FileContentImpl(VirtualFile, byte[]) constructor removed
Use FileContentImpl#createByContent(VirtualFile, byte[]) instead.

----------------------------------------

TITLE: File Chooser via Dialog Implementation
DESCRIPTION: Using FileChooser.chooseFiles() method to create a file selection dialog. Supports customization through FileChooserDescriptor for controlling file selection options. Best used with callback variant for native macOS support.

LANGUAGE: Java
CODE:
FileChooser.chooseFiles()

----------------------------------------

TITLE: Using Registered Extensions at Runtime
DESCRIPTION: Java code demonstrating how to use registered extensions at runtime. This example shows how to iterate through all registered extensions for a specific extension point.

LANGUAGE: Java
CODE:
@Service
public final class MyExtensionUsingService {

  private static final ExtensionPointName<MyBeanClass> EP_NAME =
      ExtensionPointName.create("my.plugin.myExtensionPoint1");

  public void useRegisteredExtensions() {
    for (MyBeanClass extension : EP_NAME.getExtensionList()) {
      String key = extension.getKey();
      String clazz = extension.getClass();
      // ...
    }
  }

}

----------------------------------------

TITLE: Using Registered Extensions at Runtime
DESCRIPTION: Java code demonstrating how to use registered extensions at runtime. This example shows how to iterate through all registered extensions for a specific extension point.

LANGUAGE: Java
CODE:
@Service
public final class MyExtensionUsingService {

  private static final ExtensionPointName<MyBeanClass> EP_NAME =
      ExtensionPointName.create("my.plugin.myExtensionPoint1");

  public void useRegisteredExtensions() {
    for (MyBeanClass extension : EP_NAME.getExtensionList()) {
      String key = extension.getKey();
      String clazz = extension.getClass();
      // ...
    }
  }

}

----------------------------------------

TITLE: IntelliJ Platform Copyright Notice in HTML
DESCRIPTION: Copyright notice for JetBrains IntelliJ Platform SDK documentation using HTML comment syntax.

LANGUAGE: html
CODE:
<!-- Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->

----------------------------------------

TITLE: Adding opentest4j Dependency in Groovy
DESCRIPTION: Shows how to add the missing opentest4j dependency to resolve NoClassDefFoundError in Groovy DSL.

LANGUAGE: groovy
CODE:
dependencies {
  // ...
  testImplementation 'org.opentest4j:opentest4j:1.3.0'
}

----------------------------------------

TITLE: Java Code Example - Type Parameter Change
DESCRIPTION: Example showing a method parameter type change in Java code that may break Kotlin source compatibility.

LANGUAGE: java
CODE:
com.intellij.openapi.application.NonBlockingReadAction.finishOnUiThread method parameter type changed from `Consumer<T>` to `Consumer<? super T>`

----------------------------------------

TITLE: Implementing ModuleType Interface
DESCRIPTION: Java implementation of ModuleType interface to define a custom module type. Includes module ID, name, description, and icon implementation.

LANGUAGE: java
CODE:
public class DemoModuleType extends ModuleType<DemoModuleBuilder> {
    private static final String ID = "DEMO_MODULE_TYPE";

    public DemoModuleType() {
        super(ID);
    }

    public static DemoModuleType getInstance() {
        return (DemoModuleType) ModuleType.findByID(ID);
    }

    @Override
    public @NotNull String getName() {
        return "Demo Module Type";
    }

    @Override
    public @NotNull String getDescription() {
        return "Example custom module type";
    }

    @Override
    public @NotNull Icon getNodeIcon(boolean isOpened) {
        return AllIcons.General.Information;
    }

    @Override
    public @NotNull DemoModuleBuilder createModuleBuilder() {
        return new DemoModuleBuilder();
    }
}

----------------------------------------

TITLE: Verifying Plugin Signature with CLI Tool
DESCRIPTION: Command to verify the signature of a signed plugin ZIP file using the Marketplace ZIP Signer CLI tool.

LANGUAGE: bash
CODE:
java -jar marketplace-zip-signer-cli.jar verify\
  -in "signed.zip"\
  -cert "/path/to/chain.crt"

----------------------------------------

TITLE: Verifying Plugin Signature with CLI Tool
DESCRIPTION: Command to verify the signature of a signed plugin ZIP file using the Marketplace ZIP Signer CLI tool.

LANGUAGE: bash
CODE:
java -jar marketplace-zip-signer-cli.jar verify\
  -in "signed.zip"\
  -cert "/path/to/chain.crt"

----------------------------------------

TITLE: Disabling Auto-Reload Globally in Groovy
DESCRIPTION: Shows how to disable automatic reload of dynamic plugins globally using Groovy DSL.

LANGUAGE: groovy
CODE:
intellijPlatform {
  autoReload = false
}

----------------------------------------

TITLE: Defining Output Test Data in Properties
DESCRIPTION: Creates a properties file 'RenameTestDataAfter.simple' in the testData directory to define the expected outcome of the rename test.

LANGUAGE: properties
CODE:
websiteUrl = https://en.wikipedia.org/

----------------------------------------

TITLE: Setting Up Completion Variable in Live Template
DESCRIPTION: Demonstrates configuration of a variable that invokes code completion with a default value. Uses the complete() function with a fallback string value.

LANGUAGE: XML
CODE:
<variable
    name="MY_VAR"
    expression="complete()"
    defaultValue="&quot;myValue&quot;"
    alwaysStopAt="true"/>

----------------------------------------

TITLE: Declaring Listener in IntelliJ Platform XML
DESCRIPTION: Illustrates how to declare a listener in an XML file for the IntelliJ Platform.

LANGUAGE: XML
CODE:
<applicationListeners>
  <listener class="com.example.MyListener" topic="com.intellij.openapi.project.ProjectManagerListener"/>
</applicationListeners>

----------------------------------------

TITLE: Checking Latest EAP Release in Groovy
DESCRIPTION: Demonstrates how to use the printProductsReleases task to check for the latest EAP release of IntelliJ IDEA Community Edition in Groovy DSL.

LANGUAGE: groovy
CODE:
import org.jetbrains.intellij.platform.gradle.IntelliJPlatformType
import org.jetbrains.intellij.platform.gradle.models.ProductRelease

tasks {
  printProductsReleases {
    channels = [ProductRelease.Channel.EAP]
    types = [IntelliJPlatformType.IntellijIdeaCommunity]
    untilBuild = null

    doLast {
      def latestEap = productsReleases.get().max()
    }
  }
}

----------------------------------------

TITLE: Defining Context Options in Live Template
DESCRIPTION: Example showing how to specify context applicability for a template in Java code, comments, and strings. Uses context options to enable/disable template in different scenarios.

LANGUAGE: XML
CODE:
<context>
    <option name="JAVA_CODE" value="true"/>
    <option name="JAVA_COMMENT" value="false"/>
    <option name="JAVA_STRING" value="false"/>
</context>

----------------------------------------

TITLE: Defining Live Template XML Configuration
DESCRIPTION: XML configuration for a Live Template that uses the custom titleCase function. Defines template name, value, description, and variable with titleCase expression operating on selected text.

LANGUAGE: xml
CODE:
<template
    name="mc"
    value="$TITLE$"
    description="SDK: Convert to title case"
    toReformat="true"
    toShortenFQNames="false">
  <variable
      name="TITLE"
      expression="titleCase(SELECTION)"
      defaultValue="the quick brown fox"
      alwaysStopAt="true"/>
  <context>
    <option name="MARKDOWN" value="true"/>
  </context>
</template>

----------------------------------------

TITLE: Declaring Extension Point in IntelliJ Platform XML
DESCRIPTION: Demonstrates how to declare an extension point in an XML file for the IntelliJ Platform.

LANGUAGE: XML
CODE:
<extensionPoints>
  <extensionPoint name="myExtensionPoint" interface="com.example.MyExtensionPoint"/>
</extensionPoints>

----------------------------------------

TITLE: Using Local IDE with Bundled JBR in Groovy
DESCRIPTION: Shows how to use a local IDE installation with bundled JetBrains Runtime for running tests or IDE in Groovy DSL.

LANGUAGE: groovy
CODE:
repositories {
  mavenCentral()

  intellijPlatform {
    defaultRepositories()
  }
}

dependencies {
  intellijPlatform {
    local '/Users/hsz/Applications/IntelliJ IDEA Ultimate.app'
  }
}

----------------------------------------

TITLE: Configuring Clipboard Variable in Live Template
DESCRIPTION: Example showing how to create a variable that uses clipboard content with a fallback placeholder variable. The variable will use clipboard() function and reference another variable as default value.

LANGUAGE: XML
CODE:
<variable
    name="PLACEHOLDER"
    expression=""
    defaultValue=""
    alwaysStopAt="true"/>
<variable
    name="MY_VAR"
    expression="clipboard()"
    defaultValue="PLACEHOLDER"
    alwaysStopAt="true"/>

----------------------------------------

TITLE: AppCode Listener Topics
DESCRIPTION: Event listener definitions for CocoaPods, device management, Xcode project testing, and Swift package management

LANGUAGE: XML
CODE:
<listener topic="CocoaPodsUtils#GEM_TOPIC" class="GemListener"/>
<listener topic="CocoaPodsUtils#PODS_TOPIC" class="PodsListener"/>
<listener topic="AMDeviceManager#DEVICE_LISTENER_TOPIC" class="AMDeviceListener"/>

----------------------------------------

TITLE: Setting Gradle Property for IntelliJ Platform Plugin
DESCRIPTION: Demonstrates how to set a Gradle property for the IntelliJ Platform Plugin in the gradle.properties file. The property controls a specific behavior of the plugin.

LANGUAGE: groovy
CODE:
org.jetbrains.intellij.platform.<name>=<value>

----------------------------------------

TITLE: Implementing TitleCase Macro for Live Templates in Java
DESCRIPTION: Custom macro implementation that extends MacroBase to provide title case conversion functionality. Includes constructor for naming, context validation, and result calculation logic.

LANGUAGE: java
CODE:
{src="live_templates/src/main/java/org/intellij/sdk/liveTemplates/TitleCaseMacro.java" include-symbol="TitleCaseMacro"}

----------------------------------------

TITLE: Adding Action Presentation Texts to Resource Bundle
DESCRIPTION: Demonstrates how to add action presentation texts to the resource bundle for localization.

LANGUAGE: properties
CODE:
action.Create.MyClass.text=My Class
action.Create.MyClass.description=Creates new class

----------------------------------------

TITLE: AppCode Core Extension Points
DESCRIPTION: Core extension points for AppCode including project root handling, debugger attachments, and Xcode template providers

LANGUAGE: XML
CODE:
<extensionPoints>
  <extensionPoint name="appcode.additionalRootsProvider" interface="XcodeMetaDataAdditionalRootsProvider"/>
  <extensionPoint name="appcode.attachDebuggerProvider" interface="AppCodeAttachDebuggerExtension"/>
  <extensionPoint name="appcode.projectNameUpdateVeto" interface="XcodeProjectNameUpdateVeto"/>
</extensionPoints>

----------------------------------------

TITLE: Applying IntelliJ Platform Gradle Plugin in Kotlin
DESCRIPTION: This snippet shows how to apply the new IntelliJ Platform Gradle Plugin using its updated plugin ID in a Kotlin build script.

LANGUAGE: kotlin
CODE:
plugins {
  id("org.jetbrains.intellij.platform") version "%intellij-platform-gradle-plugin-version%"
}

----------------------------------------

TITLE: Demonstrating Live Template Expansion for Java For Loop
DESCRIPTION: This snippet shows how a 'fori' Live Template expands into a complete for loop structure in Java. It illustrates the placeholder positions and how the cursor moves between them.

LANGUAGE: java
CODE:
for (int i = [|]; i < []; i++) {
  []
}

----------------------------------------

TITLE: Finding Documentation Comments - Java
DESCRIPTION: Extracts documentation comments that precede Simple Language property definitions.

LANGUAGE: java
CODE:
public static @Nullable String findDocumentationComment(@NotNull SimpleProperty property) {
  List<String> result = new ArrayList<>();
  PsiElement element = property.getPrevSibling();
  while (element instanceof PsiComment || element instanceof PsiWhiteSpace) {
    if (element instanceof PsiComment) {
      String commentText = element.getText().replaceFirst("[#]+", "").trim();
      result.add(commentText);
    }
    element = element.getPrevSibling();
  }
  Collections.reverse(result);
  return result.isEmpty() ? null : String.join("\n", result);
}

----------------------------------------

TITLE: Using ReadAction for Swing Invocations in Java
DESCRIPTION: Example of wrapping Swing invocations with ReadAction to handle changes in write-intent lock behavior.

LANGUAGE: Java
CODE:
ReadAction.compute(() -> SwingUtilities.invokeLater(() -> {
    // Your code here
}));

----------------------------------------

TITLE: Defining IntelliJ Platform Dependencies in Kotlin
DESCRIPTION: This snippet demonstrates how to define IntelliJ Platform dependencies using the new syntax in a Kotlin build script.

LANGUAGE: kotlin
CODE:
repositories {
  mavenCentral()
  intellijPlatform {
    defaultRepositories()
  }
}

dependencies {
  intellijPlatform {
    create(type, version)
  }
}

----------------------------------------

TITLE: Acquiring EditorActionHandler in Java
DESCRIPTION: Java code snippet demonstrating how to acquire the correct EditorActionHandler for cloning a caret using EditorActionManager.

LANGUAGE: Java
CODE:
// Snippet from EditorHandlerIllustration.actionPerformed()
EditorActionManager actionManager = EditorActionManager.getInstance();
EditorActionHandler actionHandler =
    actionManager.getActionHandler(IdeActions.ACTION_EDITOR_CLONE_CARET_BELOW);

----------------------------------------

TITLE: Adding Different Types of Library Roots in Kotlin
DESCRIPTION: This snippet demonstrates how to add different types of library roots (source and compiled) to a library entity using the Workspace Model. It also shows how to add a new exclude root to the library.

LANGUAGE: kotlin
CODE:
val workspaceModel = WorkspaceModel.getInstance(project)
val virtualFileUrlManager = workspaceModel.getVirtualFileUrlManager()
val libraryEntity = workspaceModel.currentSnapshot
  .resolve(
    LibraryId(
      libraryName,
      LibraryTableId.ProjectLibraryTableId
    )
  ) ?: ...

val sourceRoot = LibraryRoot(
  virtualFileUrlManager
    .getOrCreateFromUrl("file://foo/bar"), LibraryRootTypeId.SOURCES
)
val compiledRoot = LibraryRoot(
  virtualFileUrlManager
    .getOrCreateFromUrl("file://foo/baz"), LibraryRootTypeId.COMPILED
)
workspaceModel.update("Adding library roots") { builder ->
  builder.modifyLibraryEntity(libraryEntity) {
    this.roots = mutableListOf(sourceRoot, compiledRoot)
    // Adding new exclude root
    val virtualFileUrl = virtualFileUrlManager
      .getOrCreateFromUrl("file://foo/out")
    this.excludedRoots =
      excludedRoots + ExcludeUrlEntity(virtualFileUrl, this.entitySource)
  }
}

----------------------------------------

TITLE: Collaboration Tools API Changes 2023.3
DESCRIPTION: Breaking changes in Collaboration Tools module APIs including removal and relocation of classes, changes to method signatures and return types.

LANGUAGE: text
CODE:
com.intellij.collaboration.ui.codereview.action.CodeReviewCheckoutRemoteBranchAction class removed
com.intellij.collaboration.ui.codereview.details.CodeReviewBranchComponentFactory.create method removed
com.intellij.collaboration.ui.codereview.diff.viewer.DiffEditorUtilKt class removed

----------------------------------------

TITLE: Setting Up Plugin Dependencies in Kotlin
DESCRIPTION: This snippet shows how to set up dependencies on plugins and bundled plugins using properties from gradle.properties in a Kotlin build script.

LANGUAGE: kotlin
CODE:
repositories {
  mavenCentral()
  intellijPlatform {
    defaultRepositories()
  }
}

dependencies {
  intellijPlatform {
    plugins(providers.gradleProperty("platformPlugins").map { it.split(',') })
    bundledPlugins(providers.gradleProperty("platformBundledPlugins").map { it.split(',') })
  }
}

----------------------------------------

TITLE: Implementing Parser Definition for Simple Language in Java
DESCRIPTION: Parser definition for the Simple language, extending ParserDefinition to define how the language should be parsed and PSI tree built.

LANGUAGE: Java
CODE:
package org.intellij.sdk.language;

import com.intellij.lang.ASTNode;
import com.intellij.lang.ParserDefinition;
import com.intellij.lang.PsiParser;
import com.intellij.lexer.Lexer;
import com.intellij.openapi.project.Project;
import com.intellij.psi.FileViewProvider;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiFile;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IFileElementType;
import com.intellij.psi.tree.TokenSet;
import org.intellij.sdk.language.parser.SimpleParser;
import org.intellij.sdk.language.psi.SimpleFile;
import org.intellij.sdk.language.psi.SimpleTypes;
import org.jetbrains.annotations.NotNull;

public class SimpleParserDefinition implements ParserDefinition {

  public static final IFileElementType FILE = new IFileElementType(SimpleLanguage.INSTANCE);

  @NotNull
  @Override
  public Lexer createLexer(Project project) {
    return new SimpleLexerAdapter();
  }

  @NotNull
  @Override
  public TokenSet getWhitespaceTokens() {
    return TokenSet.create(TokenType.WHITE_SPACE);
  }

  @NotNull
  @Override
  public TokenSet getCommentTokens() {
    return SimpleTokenSets.COMMENTS;
  }

  @NotNull
  @Override
  public TokenSet getStringLiteralElements() {
    return SimpleTokenSets.STRINGS;
  }

  @NotNull
  @Override
  public PsiParser createParser(final Project project) {
    return new SimpleParser();
  }

  @Override
  public IFileElementType getFileNodeType() {
    return FILE;
  }

  @Override
  public PsiFile createFile(FileViewProvider viewProvider) {
    return new SimpleFile(viewProvider);
  }

  @Override
  public SpaceRequirements spaceExistenceTypeBetweenTokens(ASTNode left, ASTNode right) {
    return SpaceRequirements.MAY;
  }

  @NotNull
  @Override
  public PsiElement createElement(ASTNode node) {
    return SimpleTypes.Factory.createElement(node);
  }
}

----------------------------------------

TITLE: Adding Child Entity - Method 1
DESCRIPTION: First approach to add a child entity by specifying the parent during creation.

LANGUAGE: kotlin
CODE:
val contentRoot = ContentRootEntity(url, emptyList(), entitySource) {
  this.module = module
}
builder.addEntity(contentRoot)

----------------------------------------

TITLE: Application Listeners Configuration for Project Tracking
DESCRIPTION: Configuration table defining the project manager listener implementation for tracking project close events.

LANGUAGE: markdown
CODE:
| Name     | Implementation                                        | Listener Class           |
|----------|-------------------------------------------------------|---------------------------|
| listener | [ProjectOpenCloseListener][file:ProjectCloseListener] | `ProjectManagerListener` |

----------------------------------------

TITLE: Using Settings Plugin in Kotlin
DESCRIPTION: Shows how to use the Settings plugin in the settings.gradle.kts file for managing project repositories and dependencies.

LANGUAGE: kotlin
CODE:
import org.jetbrains.intellij.platform.gradle.extensions.intellijPlatform

plugins {
  id("org.jetbrains.intellij.platform.settings") version "%intellij-platform-gradle-plugin-version%"
}

rootProject.name = "..."

dependencyResolutionManagement {
  repositoriesMode = RepositoriesMode.FAIL_ON_PROJECT_REPOS

  repositories {
    mavenCentral()

    intellijPlatform {
      defaultRepositories()
    }
  }
}

include(":submodule")

----------------------------------------

TITLE: Implementing TextOnlyTreeStructureProvider
DESCRIPTION: Java implementation of TreeStructureProvider that filters project view to show only text files and directories. The implementation processes collection of tree nodes and filters out non-text files.

LANGUAGE: java
CODE:
public class TextOnlyTreeStructureProvider implements TreeStructureProvider, DumbAware {
  @NotNull
  @Override
  public Collection<AbstractTreeNode<?>> modify(@NotNull AbstractTreeNode<?> parent,
                                              @NotNull Collection<AbstractTreeNode<?>> children,
                                              ViewSettings viewSettings) {
    return children.stream()
            .filter(node -> {
              // Keep nodes that represent directories
              if (node.getValue() instanceof PsiDirectory) {
                return true;
              }
              // Keep nodes that represent text files
              if (node.getValue() instanceof PsiFile) {
                return FileTypeRegistry.getInstance().getFileTypeByFileName(((PsiFile) node.getValue()).getName())
                        .equals(FileTypes.PLAIN_TEXT);
              }
              return true;
            })
            .collect(Collectors.toList());
  }
}

----------------------------------------

TITLE: Implementing Parent-Child Entity References in Kotlin
DESCRIPTION: Demonstrates setting up parent-child relationships between workspace entities using the @Child annotation.

LANGUAGE: kotlin
CODE:
interface MavenEntity : WorkspaceEntity {
  val version: Int
  val name: String
  val root: VirtualFileUrl

  val kotlinEntities: List<@Child KotlinEntity>
}

interface KotlinEntity : WorkspaceEntity {
  val name: String
  val maven: MavenEntity
}

----------------------------------------

TITLE: Converting Ternary Operator to If Statement in Java
DESCRIPTION: This code snippet demonstrates the conversion of a ternary operator to an if statement. It shows the original code using a ternary operator and the resulting code after applying the Conditional Operator Converter intention.

LANGUAGE: java
CODE:
public class X {
  void f(boolean isMale) {
    String title = isMale ? "Mr." : "Ms.";
    System.out.println("title = " + title);
 }
}

LANGUAGE: java
CODE:
public class X {
  void f(boolean isMale) {
    String title;
    if (isMale) {
      title = "Mr.";
    } else {
      title = "Ms.";
    }
    System.out.println("title = " + title);
  }
}

----------------------------------------

TITLE: Customizing Sandbox Location in Groovy for IntelliJ Platform Gradle Plugin
DESCRIPTION: This snippet shows how to create a custom task with a specified sandbox directory outside the default location using Groovy. It configures the prepareSandboxTask to set a custom sandbox directory and suffix.

LANGUAGE: groovy
CODE:
intellijPlatformTesting.runIde {
  runWithCustomSandbox {
    // ...

    prepareSandboxTask {
      sandboxDirectory = project.layout.buildDirectory.dir('custom-sandbox')
      sandboxSuffix = ''
    }
  }
}

----------------------------------------

TITLE: Registering Documentation Provider - XML
DESCRIPTION: Registers the documentation provider extension in plugin.xml configuration.

LANGUAGE: xml
CODE:
<extensions defaultExtensionNs="com.intellij">
  <!-- Other extensions… -->
  <lang.documentationProvider
      language="Simple"
      implementationClass="org.intellij.sdk.language.SimpleDocumentationProvider"/>
</extensions>

----------------------------------------

TITLE: Configuring ProGuard in Kotlin for IntelliJ Platform Gradle Plugin
DESCRIPTION: This Kotlin snippet demonstrates how to configure ProGuard for an IntelliJ Platform plugin. It sets up a ProGuard task, defines input and output JAR locations, and modifies the prepareSandbox task to use the obfuscated JAR.

LANGUAGE: kotlin
CODE:
import proguard.gradle.ProGuardTask

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("com.guardsquare:proguard-gradle:7.5.0")
  }
}

tasks {
  val proguardJar = layout.buildDirectory.file("libs/$name-$version-proguard.jar")

  val proguard by registering(ProGuardTask::class) {
    injars(composedJar.map { it.archiveFile })
    outjars(proguardJar)

    // ...
  }

  prepareSandbox {
    pluginJar = proguardJar
    dependsOn(proguard)
  }
}

----------------------------------------

TITLE: Minimal SVG Icon File
DESCRIPTION: Example of a minimal SVG icon file with width and height attributes set.

LANGUAGE: XML
CODE:
<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16">
  <rect width="100%" height="100%" fill="green"/>
</svg>

----------------------------------------

TITLE: Configuring Default Repositories in Gradle
DESCRIPTION: Example showing how to set up Maven Central and default IntelliJ Platform repositories in a Gradle build script.

LANGUAGE: kotlin
CODE:
repositories {
  mavenCentral()

  intellijPlatform {
    defaultRepositories()
  }
}

LANGUAGE: groovy
CODE:
repositories {
  mavenCentral()

  intellijPlatform {
    defaultRepositories()
  }
}

----------------------------------------

TITLE: Implementing Block Structure in Java
DESCRIPTION: Example of how to implement a basic block structure for formatting in Java, demonstrating the use of indentation and alignment.

LANGUAGE: java
CODE:
int start  = 1;
int finish = 2;

----------------------------------------

TITLE: Plugin XML Parsing Example in Groovy
DESCRIPTION: Example showing how to use the PluginAware parse method to access plugin.xml fields

LANGUAGE: groovy
CODE:
abstract class RetrievePluginNameTask extends DefaultTask implements PluginAware {}

tasks.register('retrievePluginName', RetrievePluginNameTask) {
    doLast {
        def name = pluginXml.parse { name }.get()
        println("Plugin Name: $name")
    }
}

----------------------------------------

TITLE: Enabling Internal Mode in idea.properties
DESCRIPTION: Configuration property that enables internal development mode in IntelliJ-based IDEs. This setting allows access to the Internal Actions menu and other development tools.

LANGUAGE: properties
CODE:
idea.is.internal=true

----------------------------------------

TITLE: Initializing IntelliJ Platform Testing Extension in Groovy
DESCRIPTION: Shows how to initialize the intellijPlatformTesting extension in a Groovy build script. This extension allows for registering custom tasks for running and testing the IDE.

LANGUAGE: groovy
CODE:
intellijPlatformTesting {
  runIde
  testIde
  testIdeUi
  testIdePerformance
}

----------------------------------------

TITLE: Disabling Searchable Options Building in Kotlin
DESCRIPTION: Shows how to disable building searchable options for plugins that don't provide custom settings using Kotlin DSL.

LANGUAGE: kotlin
CODE:
intellijPlatform {
  buildSearchableOptions = false
}

----------------------------------------

TITLE: Configuring Plugins for Custom Run Task in Kotlin
DESCRIPTION: Demonstrates how to configure plugins for a custom runIde task in Kotlin. It shows how to add a plugin dependency and disable a plugin.

LANGUAGE: kotlin
CODE:
  val runIdeWithPlugins by intellijPlatformTesting.runIde.registering {
  // ...
  plugins {
    plugin("pluginId", "1.0.0")
    disablePlugin("pluginId")
  }
}

----------------------------------------

TITLE: Testing Framework Configuration in Groovy
DESCRIPTION: Example showing how to configure test framework dependencies for plugin testing using TestFrameworkType.Platform in Groovy DSL.

LANGUAGE: groovy
CODE:
import org.jetbrains.intellij.platform.gradle.TestFrameworkType

dependencies {
  intellijPlatform {
    testFramework TestFrameworkType.Platform.INSTANCE
  }

  testImplementation 'junit:junit:4.13.2'
}

----------------------------------------

TITLE: Associating Arbitrary Data with Entities in Kotlin
DESCRIPTION: Demonstrates how to associate external data with WorkspaceEntity instances and retrieve it later. This example associates Foo instances with ModuleEntity.

LANGUAGE: kotlin
CODE:
// Сlass whose instances we want to store in the index
data class Foo(val someData: String)
// Unique identifier of the concrete mapping
val externalMappingKey = ExternalMappingKey.create<Foo>("intellij.foo")

val mutableEntityStorage = WorkspaceModel.getInstance(project)
  .currentSnapshot.toBuilder()
// Getting mutable instance of specific mapping
val mutableFooExternalMapping =
  mutableEntityStorage.getMutableExternalMapping(externalMappingKey)

val moduleEntity = mutableEntityStorage
  .entities(ModuleEntity::class.java).single()
// Associate data with specific `ModuleEntity`
mutableFooExternalMapping.addMapping(moduleEntity, Foo("someData"))

----------------------------------------

TITLE: Creating LibraryEntity in Kotlin (2024.3+)
DESCRIPTION: This snippet shows how to create a new LibraryEntity using the Workspace Model in version 2024.3 and later. It includes checks for existing libraries and uses LegacyBridgeJpsEntitySourceFactory to create the entity source.

LANGUAGE: kotlin
CODE:
import com.intellij.workspaceModel.ide.legacyBridge.LegacyBridgeJpsEntitySourceFactory
// ...

val currentSnapshot = WorkspaceModel.getInstance(project).currentSnapshot
val libraryTableId = LibraryTableId.ProjectLibraryTableId

val libraryId = LibraryId(libraryName, libraryTableId)
if (libraryId in currentSnapshot) {
  // Library with such `LibraryId` already exist
  ...
}

val libraryEntitySource =
    LegacyBridgeJpsEntitySourceFactory.getInstance(project)
        .createEntitySourceForProjectLibrary(null)
val libraryEntity = LibraryEntity(
  libraryName,
  libraryTableId, emptyList(),
  libraryEntitySource
)
WorkspaceModel.getInstance(project).update("Add new library") { builder ->
  builder.addEntity(libraryEntity)
}

----------------------------------------

TITLE: Declaring IntelliJ Platform Ultimate Module Dependency in plugin.xml
DESCRIPTION: XML configuration in plugin.xml to declare dependency on the IntelliJ Platform Ultimate module, which is required for LSP support.

LANGUAGE: xml
CODE:
<idea-plugin>
  <!-- ... -->
  <depends>com.intellij.modules.ultimate</depends>
</idea-plugin>

----------------------------------------

TITLE: Creating Symbol Pointer in Java
DESCRIPTION: Shows how to create a pointer to a Symbol instance, which is used to maintain references between read actions.

LANGUAGE: java
CODE:
Symbol.Pointer pointer = symbol.createPointer();

----------------------------------------

TITLE: Registering WebSymbolsContextProvider in XML
DESCRIPTION: Example of registering a WebSymbolsContextProvider through the com.intellij.webSymbols.context extension point in the plugin.xml file.

LANGUAGE: XML
CODE:
<idea-plugin>
  <extensions defaultExtensionNs="com.intellij">
    <webSymbols.context
        kind="stimulus-context" name="true"
        implementation="com.intellij.stimulus.context.StimulusContextProvider"/>
  </extensions>
</idea-plugin>

----------------------------------------

TITLE: Vue Component Definition in JSON
DESCRIPTION: Example JSON configuration for defining a Vue component with props and metadata in a domain-specific format.

LANGUAGE: json
CODE:
{
  "contributions": {
    "html": {
      "vue-components": [
        {
          "name": "MyVueComponent",
          "description": "This is the component you always needed in your application",
          "props": [
            {
              "name": "listen-to",
              "type": "string | HTMLElement | Document | Window | (() => HTMLElement)",
              "description": "The scrolling element to listen to.",
              "default": "document"
            }
          ]
        }
      ]
    }
  }
}